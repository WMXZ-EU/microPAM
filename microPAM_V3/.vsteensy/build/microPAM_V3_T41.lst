
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002370 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00016590 l    d  .fini	00000000 .fini
00016594 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200092c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60021d34 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001794 l     F .text.code	00000024 flexspi2_command
600017b8 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 usb.c
00009ed8 l     F .text.itcm	000000a0 endpoint0_receive
00009f78 l     F .text.itcm	0000007c schedule_transfer
00009ff4 l     F .text.itcm	00000034 run_callbacks
0000a028 l     F .text.itcm	0000001c usb_endpoint_config
0000a044 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20027d01 l     O .bss	00000008 endpoint0_buffer
20027368 l     O .bss	00000004 endpoint0_notify_mask
2000b9c0 l     O .bss	00000008 endpoint0_setupdata
2002736c l     O .bss	00000004 endpointN_notify_mask
20027d0a l     O .bss	00000008 reply_buffer
20027d24 l     O .bss	00000001 sof_usage
20027d2c l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
2002749c l     O .bss	00000004 s_hotCount
200274a0 l     O .bss	00000004 s_hotTemp
200274a4 l     O .bss	00000004 s_hot_ROOM
200274a8 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001cfc l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
20027d00 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20027404 l     O .bss	00000000 object.0
60002360 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
0000065c l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
2000b9cc l     O .bss	00000004 guard variable for loop::status
20026e40 l     O .bss	00000004 loop::t0
20027b88 l     O .bss	00000002 loop::mxb
20027b8a l     O .bss	00000002 loop::status
20026e44 l     O .bss	00000004 loop::loopCount
20007e26 l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008c0 l     F .text.itcm	000000ac acq_isr()
00000c20 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
200265dc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
000026d2 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000026f2 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00002716 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
2000b9d0 l     O .bss	00001200 diskBuffer
20024ddc l     O .bss	00001800 tempBuffer0
00002f44 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000cbd0 l     O .bss	00000200 fileHeader
20027be4 l     O .bss	00000050 dirName
200269f4 l     O .bss	00000200 wav_hdr
20027c34 l     O .bss	00000050 fileName
20026e3c l     O .bss	00000004 checkEndOfFile(short)::dta
20027c88 l     O .bss	00000050 timeStamp()::date_time
20008954 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
20008f35 l     O .data	00000012 device_descriptor
600024ce l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c6e l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000c94 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cd0 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010c0 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
0000156e l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000016d8 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001a40 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001d98 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001daa l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001dc0 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001de4 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001de8 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001dfc l     F .text.itcm	00000030 menuGetLine()
00001e2c l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001e48 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20027b68 l     O .bss	00000020 store
20027cd8 l     O .bss	00000028 menuGetLine()::buffer
20007e4d l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Queue.cpp
2000cdd8 l     O .bss	00018000 data_buffer
2000cdd4 l     O .bss	00000004 queue_busy
200267e4 l     O .bss	00000004 head
200267e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
200265e4 l     O .bss	00000200 dout
200267f4 l     O .bss	00000200 outData
20026bf4 l     O .bss	00000200 tempData
20026e48 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20007e8b l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
000034f4 l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
0000350c l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00003f5e l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
20026e4c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20026e50 l     O .bss	00000004 MTPD::write(char const*, int)::dst
200079c4 l     O .data	00000010 propertyList
200079d4 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20007898 l     O .data	0000012c lookupTable
200079fc l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00005850 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006210 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007264 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008324 l     F .text.itcm	0000002c sdIrs()
00008350 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008370 l     F .text.itcm	00000018 isBusyCommandComplete()
00008388 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008398 l     F .text.itcm	00000014 isBusyDat()
000083ac l     F .text.itcm	0000000c isBusyDMA()
000083b8 l     F .text.itcm	00000014 isBusyFifoRead()
000083cc l     F .text.itcm	00000014 isBusyFifoWrite()
000083e0 l     F .text.itcm	00000018 isBusyTransferComplete()
000083f8 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00008500 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00008524 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00008570 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
000085a0 l     F .text.itcm	000000d4 initSDHC()
00008690 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000086f8 l     F .text.itcm	00000020 statusCMD13()
00008718 l     F .text.itcm	00000010 isBusyCMD13()
0000872c l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00008784 l     F .text.itcm	00000030 waitDmaStatus()
000087b4 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008aac l     F .text.itcm	0000005c waitTransferComplete()
00008d14 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20027bc0 l     O .bss	00000001 m_initDone
2000cdd0 l     O .bss	00000004 m_sdClkKhz
20027bc1 l     O .bss	00000001 m_version2
20024dd8 l     O .bss	00000004 m_errorLine
20027bc2 l     O .bss	00000001 m_highCapacity
20027bc3 l     O .bss	00000001 m_transferActive
20027bc4 l     O .bss	00000010 m_cid
20027bd4 l     O .bss	00000010 m_csd
200267ec l     O .bss	00000004 m_ocr
200267f0 l     O .bss	00000004 m_rca
20026df4 l     O .bss	00000004 m_busyFcn
20027c84 l     O .bss	00000001 m_dmaBusy
20026df8 l     O .bss	00000004 m_irqstat
20008f34 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009254 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000095bc l     F .text.itcm	00000060 rx_queue_transfer
20200800 l     O .bss.dma	00001000 rx_buffer
0000961c l     F .text.itcm	000000ac rx_event
000096c8 l     F .text.itcm	0000008c usb_serial_flush_callback
20201800 l     O .bss.dma	00002000 txbuffer
20027484 l     O .bss	00000004 rx_available
20027b96 l     O .bss	00000010 rx_count
20027d12 l     O .bss	00000001 rx_head
20027ba6 l     O .bss	00000010 rx_index
20027d14 l     O .bss	00000009 rx_list
20027bb6 l     O .bss	00000002 rx_packet_size
20027d22 l     O .bss	00000001 rx_tail
2000b740 l     O .bss	00000100 rx_transfer
20027d25 l     O .bss	00000001 transmit_previous_timeout
20027bba l     O .bss	00000002 tx_available
20027d26 l     O .bss	00000001 tx_head
20027d28 l     O .bss	00000001 tx_noautoflush
20027bbc l     O .bss	00000002 tx_packet_size
2000b8c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000af00 l     F .text.itcm	00000010 txEvent_event
0000af10 l     F .text.itcm	0000003c rx_event
0000af4c l     F .text.itcm	00000060 rx_queue_transfer
20027d13 l     O .bss	00000001 rx_head
20027d1d l     O .bss	00000005 rx_list
20027488 l     O .bss	00000014 rx_list_transfer_len
20027bb8 l     O .bss	00000002 rx_packet_size
20027d23 l     O .bss	00000001 rx_tail
2000b840 l     O .bss	00000080 rx_transfer
20027d27 l     O .bss	00000001 tx_head
20027bbe l     O .bss	00000002 tx_packet_size
2000b940 l     O .bss	00000080 tx_transfer
20203800 l     O .bss.dma	00000800 rx_buffer
20204000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20027c87 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000b512 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d2bc l     F .text.itcm	00000144 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000d41c l     F .text.itcm	00000018 stdio_exit_handler
0000d434 l     F .text.itcm	00000040 cleanup_stdio
0000d474 l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000e530 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-stpncpy.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
000130b8 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00013ecc l     F .text.itcm	00000140 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoll.o
00014010 l     F .text.itcm	0000016c _strtoll_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoull.o
00014180 l     F .text.itcm	0000019c _strtoull_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-mbrtowc.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-iswspace.o
00000000 l    df *ABS*	00000000 libc_a-iswspace_l.o
00000000 l    df *ABS*	00000000 libc_a-jp2uc.o
00014408 l     F .text.itcm	00000134 __jp2uc
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiscanf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
00014838 l     F .text.itcm	00000076 __sprint_r.part.0
0001583c l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-categories.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00016558 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00016560 l     F .text.itcm	00000008 ___init_veneer
00016568 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00016570 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00016578 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00016580 l     F .text.itcm	00000008 __usb_init_veneer
600022d0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600022d8 l     F .text.code	00000008 ____libc_init_array_veneer
600022e0 l     F .text.code	00000008 __pwm_init_veneer
600022e8 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600022f0 l     F .text.code	00000008 __set_arm_clock_veneer
600022f8 l     F .text.code	00000008 __delay_veneer
60002300 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002308 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002310 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002318 l     F .text.code	00000008 __memset_veneer
60002320 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002328 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002330 l     F .text.code	00000008 __main_veneer
60002338 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002340 l     F .text.code	00000008 __sm_set_pool_veneer
60002348 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002350 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002358 l     F .text.code	00000008 __usb_init_serialnumber_veneer
00006240  w    F .text.itcm	00000026 FatPartition::cacheSync()
60002370 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
000049d8 g     F .text.itcm	000000a8 toUpcase(unsigned short)
0000107a g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000025b4 g     F .text.itcm	0000005c pushData(unsigned long*)
00009970 g     F .text.itcm	00000014 usb_serial_available
0000f78c g     F .text.itcm	00000062 __any_on
00016148 g     F .text.itcm	00000024 _isatty_r
0000df7c g     F .text.itcm	000000ba strcpy
00006da8 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600017e8 g     F .text.code	00000002 startup_default_late_hook
0000db84 g     F .text.itcm	0000002c _lseek_r
0000884c g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b280  w    F .text.itcm	00000074 yield
00007c90  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20027424 g     O .bss	00000060 proc_stat
20027b64 g     O .bss	00000004 usb_timer1_callback
0000368c g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
000036e4 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00006c04 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000b5ee g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
20027984 g     O .bss	000001b8 storage
600023e0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20027b94 g     O .bss	00000002 proc
60001900 g     F .text.code	00000274 configure_external_ram
00007bfa  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
000011a4 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
000082e4  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00016488 g     F .text.itcm	0000005a .hidden __floatdidf
000073e0 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
2002741c g     O .bss	00000004 procCount
00007110 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
20026dfc g     O .bss	00000004 FsDateTime::callback
20026fe8 g     O .bss	00000001 __lock___atexit_recursive_mutex
00014374 g     F .text.itcm	0000004c _wcrtomb_r
00007504 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
000080cc g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000b588 g     F .text.itcm	0000001a Print::println()
200004a8 g     O .data	00000070 vtable for DedicatedSpiCard
20027420 g     O .bss	00000004 procMiss
0000d76c g     F .text.itcm	00000020 __sseek
0000d548 g     F .text.itcm	0000003c __sinit
00004ec4 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
0000f80c g     F .text.itcm	000000a4 fcvtbuf
0001606c g     F .text.itcm	000000b0 __swbuf_r
000035aa g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000c044 g     F .text.itcm	0000000c __malloc_unlock
20008f08 g     O .data	00000004 t_4
20026e34 g     O .bss	00000004 FsVolume::m_cwv
00002584 g     F .text.itcm	00000008 getStore()
00006828 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
2000b9c8 g     O .bss	00000004 SerNum
20027c86 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00007bee  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60002278 g     F .text.code	0000004c analog_init
0000d2b0 g     F .text.itcm	0000000c _strtod_r
0000159c g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000d794 g     F .text.itcm	0000004a _vdprintf_r
00007f1e g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
00002e28 g     F .text.itcm	0000011c saveData(short)
20008f1c g     O .data	00000002 shift
20008940 g     O .data	00000004 F_CPU_ACTUAL
00014784 g     F .text.itcm	000000b4 _sfread_r
0000d8c0 g     F .text.itcm	000000f8 memmove
20027b48 g     O .bss	00000004 t_1
000015ca g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
200273f8 g     O .bss	00000004 max_stat
0000d5e4 g     F .text.itcm	00000088 snprintf
000091d4 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000ed7c g     F .text.itcm	0000004c _Balloc
00000c5a  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001659c g       .ARM.exidx	00000000 __exidx_end
00007022 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20027c85 g     O .bss	00000001 EventResponder::runningFromYield
000093ca g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00007ae4 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000acf4 g     F .text.itcm	00000060 tempmonGetTemp
0000ac34 g     F .text.itcm	0000001e smalloc_verify_pool
20008958 g     O .data	00000004 __atexit_recursive_mutex
0000dc2c g     F .text.itcm	0000000c __errno
00001fec g     F .text.itcm	00000098 saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
20026e0c g     O .bss	00000004 EventResponder::firstInterrupt
0000a6cc g     F .text.itcm	00000028 usb_transfer_status
0000383a g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000ac86 g     F .text.itcm	0000006a sm_set_pool
000029dc g     F .text.itcm	00000014 newFolder(int)
20026e14 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
20027160 g     O .bss	00000004 __stdio_exit_handler
000004a4  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000057ec g     F .text.itcm	00000018 ExFatPartition::rootLength()
000164e4 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
00002854 g     F .text.itcm	00000014 headerUpdate(long)
0000b484  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
0001611c g     F .text.itcm	0000002c _fstat_r
20007418 g     O .data	00000370 digital_pin_to_info_PGM
20027370 g     O .bss	00000004 errno
000093d4 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00005570 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000d728 g     F .text.itcm	00000004 __seofread
00016598 g       .text.itcm	00000000 _etext
00007820 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200092c0 g       .bss	00000000 _sbss
000084a8 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d56 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
0000349e g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
0000363a g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001838 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00008b08 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
0000570c g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
600024d8 g       *ABS*	00000000 _stextload
00000248 g     F .text.itcm	00000214 loop
0000adf8 g     F .text.itcm	00000072 flexpwm_init
600017ea g     F .text.code	00000004 startup_debug_reset
0000a5e0 g     F .text.itcm	00000040 usb_config_rx
00003a54 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00004c94 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000900c g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
20026e08 g     O .bss	00000004 EventResponder::lastInterrupt
00007984 g     F .text.itcm	0000002a FsBaseFile::close()
000047da g     F .text.itcm	00000048 SPIClass::end()
00009488 g     F .text.itcm	00000134 memcpy
0000eba0 g     F .text.itcm	000001b0 __hexnan
000015fc g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00008194 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00004822 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000147a g     F .text.itcm	000000f4 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
200092c0 g     O .data	00000000 .hidden __TMC_END__
00005650 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001338 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000064ea g     F .text.itcm	00000026 FatFile::peek()
00002084 g     F .text.itcm	00000040 menu1(short)
20027400 g     O .bss	00000004 nbuf
0000f8b0 g     F .text.itcm	00001b44 _svfprintf_r
00016410 g     F .text.itcm	00000022 .hidden __floatsidf
20027b40 g     O .bss	00000004 systick_millis_count
00005cf0 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000b0e4 g     F .text.itcm	00000030 usb_mtp_available
0000045c g     F .text.itcm	00000048 setup1()
0000419c g     F .text.itcm	000005e6 MTPD::loop()
0000b7bc g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
20027d2a g     O .bss	00000001 usb_configuration
00007be4  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000ac52 g     F .text.itcm	00000034 sm_align_pool
00009238 g     F .text.itcm	0000001c SdioCard::syncDevice()
00008c20 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00006510 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
0000f6cc g     F .text.itcm	00000062 __ratio
00007c9e g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
600023e0  w    O .text.progmem	00000018 usb_string_manufacturer_name
20008f04 g     O .data	00000004 t_3
600023b8 g     O .text.progmem	00000008 usb_string_mtp
0000bab8 g     F .text.itcm	00000010 malloc
20000540  w    O .data	00000024 vtable for FsFile
0000abb2  w    F .text.itcm	0000000a _fstat
000143d8 g     F .text.itcm	00000006 iswspace
20027164 g     O .bss	00000200 acqBuffer
00013000 g     F .text.itcm	00000040 __assert_func
00004168 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002ae0 g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
6000165c g     F .text.code	000000e4 usb_init
000079ae g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
2002797c g     O .bss	00000004 sessionID_
00002b80 g     F .text.itcm	00000068 do_hibernate(unsigned long)
00007bea  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c44  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
20027024 g     O .bss	00000004 __malloc_top_pad
0000abf0 g     F .text.itcm	00000044 rtc_set
00014748 g     F .text.itcm	0000003a __ssrefill_r
20027b44 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005d84 g     F .text.itcm	000000ca ExFatFile::truncate()
20008960 g     O .data	00000000 .hidden __dso_handle
000163f0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00012f7c g     F .text.itcm	00000008 _localeconv_r
20008efc g     O .data	00000004 sd_str
0001431c g     F .text.itcm	00000004 _strtoull_r
00009376 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
000158bc g     F .text.itcm	000002f4 __sfvwrite_r
0000efd0 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
0000afac g     F .text.itcm	000000a4 usb_mtp_configure
20008f10 g     O .data	00000004 t_on
60002465 g     O .text.progmem	00000069 usb_config_descriptor_480
0000b7ec g     F .text.itcm	000002c8 .hidden __udivmoddi4
0000398c g     F .text.itcm	000000c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0001616c g     F .text.itcm	00000000 .hidden __aeabi_drsub
000093c4 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006266 g     F .text.itcm	00000036 FatFile::addCluster()
0000dbdc g     F .text.itcm	00000024 _sbrk_r
00008674 g     F .text.itcm	0000001c SdioCard::type() const
000035dc g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
600017e4 g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
000099e4 g     F .text.itcm	0000001e usb_serial_getchar
00000d3e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20027b54 g     O .bss	00000008 usb_cdc_line_coding
0000ad54 g     F .text.itcm	00000040 digitalWrite
00006e00  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20026e10 g     O .bss	00000004 EventResponder::lastYield
00004c6e g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000dbb0 g     F .text.itcm	0000002c _read_r
00000caa  w    F .text.itcm	00000024 Print::write(char const*)
20027b50 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00007c88  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00012c44 g     F .text.itcm	000000c6 _fclose_r
20027374 g     O .bss	00000010 extmem_smalloc_pool
2002701c g     O .bss	00000004 __malloc_max_sbrked_mem
00008014 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000ad94 g     F .text.itcm	00000064 pinMode
000013b2 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ec0  w    F .text.itcm	0000001c FsFile::FsFile()
0000b680 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00016434 g     F .text.itcm	00000042 .hidden __extendsfdf2
000113f4 g     F .text.itcm	00001850 __ssvfscanf_r
0000b448  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000e78  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00016178 g     F .text.itcm	00000276 .hidden __adddf3
0000395c g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
000035c8 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60022000 g     O .text.csf	00000c00 hab_csf
00003650 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007068 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
0000f534 g     F .text.itcm	000000c2 __b2d
000032b8 g     F .text.itcm	00000002 adc_init()
00016594 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20008f00 g     O .data	00000004 t_2
0000b424  w    F .text.itcm	00000008 Print::print(unsigned char)
0000abbc  w    F .text.itcm	00000004 _isatty
20026e04 g     O .bss	00000004 EventResponder::firstYield
00000eb2 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
000048b4 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c068 g     F .text.itcm	000003d8 _realloc_r
0000dc38 g     F .text.itcm	00000048 __libc_init_array
0000a73c g     F .text.itcm	00000248 dtostrf
000053ba g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000084b4 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
2000069c g     O .data	00000100 __hexdig
00005b3a g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
0000146e g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
000019fc g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00015da0 g     F .text.itcm	00000066 _fputwc_r
20000300 g     O .data	00000028 __mprec_bigtens
0000ee80 g     F .text.itcm	000000b0 __s2b
00007f96  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000abc6  w    F .text.itcm	00000004 abort
0000b46c  w    F .text.itcm	00000004 usb_serial_class::clear()
000163f0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000ab7c  w    F .text.itcm	0000002c _sbrk
60018a74 g       *ABS*	00000000 _sdataload
0000f338 g     F .text.itcm	00000042 __mcmp
00001782 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000895c g     O .data	00000004 __brkval
20027d29 g     O .bss	00000001 usb_cdc_line_rtsdtr
600022c4 g     F .text.code	00000000 _init
00009754 g     F .text.itcm	00000002 usb_serial_reset
0000630c g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00000f98  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00016518 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
600023fc g     O .text.progmem	00000069 usb_config_descriptor_12
0000c440 g     F .text.itcm	00000e70 _strtod_l
0000eb68 g     F .text.itcm	00000036 __match
20027d60 g       .bss	00000000 _ebss
000088c8 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000036f8 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
20008ef4 g     O .data	00000004 propertyListNum
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00003484 g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
0000ef30 g     F .text.itcm	00000040 __hi0bits
00004c22 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001d50 g     F .text.code	00000074 CrashReportClass::clear()
00005bea g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20204880 g       .bss.dma	00000000 _heap_start
00003810 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
20026fec g     O .bss	00000001 __lock___malloc_recursive_mutex
00001b78 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00005804 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20027028 g     O .bss	00000138 __sf
20008938 g     O .data	00000004 CrashReport
200274b0 g     O .bss	000004cc sdx
00007e94 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000518 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200092e0 g     O .bss	00000020 endpoint0_transfer_data
00006076 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
0000498a g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000b7ac g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000aea0 g     F .text.itcm	00000060 pwm_init
00016178 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20027384 g     O .bss	00000050 file
00003ed0 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20008f47 g     O .data	00000001 usb_mtp_status
60022c00 g       .text.csf	00000000 __text_csf_end
60001b74 g     F .text.code	0000005c usb_pll_start
0000f188 g     F .text.itcm	000000c0 __pow5mult
000065ee g     F .text.itcm	0000004c FatFile::rmdir()
2000049c g     O .data	0000000c vtable for CrashReportClass
00016478 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00006fa0 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
200273d4 g     O .bss	00000004 haveStore
00008322  w    F .text.itcm	00000002 SdioCard::end()
200092c0 g     O .bss	00000020 endpoint0_transfer_ack
20027b5c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a68c g     F .text.itcm	00000024 usb_transmit
00000d0c  w    F .text.itcm	00000014 Print::println(char const*)
0000b330 g     F .text.itcm	00000020 systick_isr
0000dc8c g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003488 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00003604 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20008944 g     O .data	00000010 Serial
200273d8 g     O .bss	00000020 logBuffer
0000b48c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007a84 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
600017e4  w    F .text.code	00000002 startup_early_hook
000058a4 g     F .text.itcm	00000094 ExFatFile::addCluster()
00007df8 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000992c g     F .text.itcm	00000044 usb_serial_peekchar
0000d584 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e040 g     F .text.itcm	00000000 memchr
00006ed0 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
00009c88 g     F .text.itcm	00000250 set_arm_clock
20027b3c g     O .bss	00000004 systick_cycle_count
20008f1e g     O .data	00000016 usb_string_serial_number_default
0000e324 g     F .text.itcm	0000020c _free_r
00008102 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00015f34 g     F .text.itcm	00000060 category
000081c6 g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00008bac g     F .text.itcm	00000074 SdioCard::readStop()
00000d72  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00007bf2  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000db54 g     F .text.itcm	0000000c __locale_mb_cur_max
000143c0 g     F .text.itcm	00000016 _wcsrtombs_r
20026e58 g     O .bss	00000190 __atexit0
0000191e g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000b47c  w    F .text.itcm	00000004 usb_serial_class::flush()
000146c8 g     F .text.itcm	00000080 _sungetc_r
00016174 g     F .text.itcm	0000027a .hidden __aeabi_dsub
20008ed8 g     O .data	00000004 __malloc_sbrk_base
0000b474  w    F .text.itcm	00000004 usb_serial_class::read()
0001417c g     F .text.itcm	00000004 _strtoll_r
000078cc g     F .text.itcm	000000b8 FatFile::remove()
00016478 g     F .text.itcm	0000006a .hidden __floatundidf
00000ec0  w    F .text.itcm	0000001c FsFile::FsFile()
0000abc0  w    F .text.itcm	00000006 _lseek
0000f248 g     F .text.itcm	000000f0 __lshift
00002be8 g     F .text.itcm	00000240 storeData(short)
000069ce g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000a660 g     F .text.itcm	0000002c usb_prepare_transfer
00007bf6  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000a9fc g     F .text.itcm	00000180 unused_interrupt_vector
000145c8 g     F .text.itcm	00000100 __ssprint_r
60001bd0 g     F .text.code	0000012c tempmon_init
20027b60 g     O .bss	00000004 usb_timer0_callback
00007314 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000d7fc g     F .text.itcm	00000062 _vasnprintf_r
0000e1fc g     F .text.itcm	00000088 __register_exitproc
00007c20 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000052f4 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000da20 g     F .text.itcm	00000044 strlcpy
0000da64 g     F .text.itcm	0000008a strncmp
00007282 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00005c32 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
00009984 g     F .text.itcm	00000060 usb_serial_flush_input
20008ef0 g     O .data	00000004 fsamp
000056aa g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001240 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f34  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
0000f02c g     F .text.itcm	0000015c __multiply
0000258c g     F .text.itcm	0000001c getDataCount()
00009b90 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000daf0 g     F .text.itcm	00000064 strncpy
20026ff4 g     O .bss	00000028 __malloc_current_mallinfo
00000ad0 g     F .text.itcm	00000084 i2s_setup()
0000f5f8 g     F .text.itcm	000000d4 __d2b
00008214 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
0000831a  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001740 g     F .text.code	00000054 _reboot_Teensyduino_
00008560  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017e6 g     F .text.code	00000002 startup_default_middle_hook
00000c5e  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b54 g     F .text.itcm	000000a4 dma_setup()
0000c050 g     F .text.itcm	00000018 realloc
00007d1c g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00007f58 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00008ca8 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
0001400c g     F .text.itcm	00000004 _strtoul_r
0000b114 g     F .text.itcm	000000c4 usb_mtp_send
0000a138 g     F .text.itcm	000004a8 usb_isr
0000d404 g     F .text.itcm	0000000c __cxa_atexit
00004d14 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000db60 g     F .text.itcm	00000024 _close_r
000082aa  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00016410 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00007fd2 g     F .text.itcm	0000002a SharedSpiCard::readStop()
0000493c g     F .text.itcm	0000004e FsCache::sync()
0000d860 g     F .text.itcm	00000060 memcmp
20000518  w    O .data	00000028 vtable for usb_serial_class
000093f6 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000dc84 g     F .text.itcm	00000002 __retarget_lock_close_recursive
00003ca2 g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
0000943e g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
200274ac g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000d6ac g     F .text.itcm	00000058 sscanf
00015c28 g     F .text.itcm	000000cc __swsetup_r
0000bab4  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000059c4 g     F .text.itcm	00000056 ExFatFile::rmdir()
00003b60 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d20  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002780 g     F .text.itcm	000000d4 headerInit(long, long, long, int)
00007f9e g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
0000f730 g     F .text.itcm	0000005c __copybits
00003f04 g     F .text.itcm	00000016 MTPD::read16()
00000c6a g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20008ad0 g     O .data	00000408 __malloc_av_
20026e54 g     O .bss	00000004 __atexit
0000d704 g     F .text.itcm	00000022 __sread
00009bf4 g     F .text.itcm	00000094 usb_serial_flush_output
0000c038 g     F .text.itcm	0000000c __malloc_lock
00004b10 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20009000 g     O .data	000002c0 _VectorsRam
000093fe g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00007e68 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00012e3c g     F .text.itcm	00000054 _fflush_r
00013040 g     F .text.itcm	00000078 _calloc_r
00003e6c g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
000028c8 g     F .text.itcm	000000b8 makeHeader(long*)
00000ef4  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
0000759c g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
20008f0c g     O .data	00000004 t_acq
20027d2d g     O .bss	00000001 yield_active_check_flags
00005af8 g     F .text.itcm	00000042 ExFatFile::sync()
0000dc88 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20027d2b g     O .bss	00000001 usb_high_speed
00006a72 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
000089a4 g     F .text.itcm	00000040 SdioCard::isBusy()
00003624 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
00009444 g     F .text.itcm	00000000 memset
0000b492 g     F .text.itcm	00000010 main
20027020 g     O .bss	00000004 __malloc_max_total_mem
000053f4 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000dc80 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20204800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00008244 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00005e50 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
2000043c g     O .data	00000060 vtable for MTPStorage_SD
00003f94 g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000d9b8 g     F .text.itcm	00000066 strlcat
0000d78c g     F .text.itcm	00000008 __sclose
0000b1d8 g     F .text.itcm	00000054 usb_init_serialnumber
0000d400 g     F .text.itcm	00000004 _strtol_r
60002370 g       .text.code	00000000 __init_array_end
000131e0 g     F .text.itcm	00000cec _dtoa_r
0000bad8 g     F .text.itcm	00000560 _malloc_r
00007bfe g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
0000f7f0 g     F .text.itcm	0000001a __ascii_wctomb
00016488 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20026e38 g     O .bss	00000004 FatVolume::m_cwv
0000b41c  w    F .text.itcm	00000008 Print::print(char const*)
00015bb0 g     F .text.itcm	00000076 __submore
200005d4  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000b4d0 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004784 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
65eaae24 g       *ABS*	00000000 __rtc_localtime
0000a984 g     F .text.itcm	0000004c micros
000036a0 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00005a1c g     F .text.itcm	000000dc ExFatFile::syncDir()
0000e284 g     F .text.itcm	000000a0 _malloc_trim_r
00015e08 g     F .text.itcm	00000106 _wcsnrtombs_l
600023f8 g     O .text.progmem	00000004 string0
00009a04 g     F .text.itcm	0000018c usb_serial_write
600017e8  w    F .text.code	00000002 startup_late_hook
0000a0d8 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000dd2  w    F .text.itcm	00000050 FsBaseFile::available() const
0000828e g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000b478  w    F .text.itcm	00000004 usb_serial_class::available()
0000dca8 g     F .text.itcm	000002dc strcmp
00003f2e g     F .text.itcm	00000030 MTPD::readstring(char*)
00006798 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
0000587e  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
600023c0  w    O .text.progmem	00000020 usb_string_product_name
00003584 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000a9d0 g     F .text.itcm	0000002a delay
00016518 g     F .text.itcm	00000040 .hidden __fixunsdfdi
20027b90 g     O .bss	00000002 dma_channel_allocated_mask
00000e56 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00000e90  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00016590 g     F .fini	00000000 _fini
000032ba g     F .text.itcm	00000002 acqPower(int)
00002728  w    F .text.itcm	00000014 FsBaseFile::sync()
00007dc8 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20027b4c g     O .bss	00000004 t_off
000053c8 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000d66c g     F .text.itcm	00000040 sprintf
0000b5c0 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000b576 g     F .text.itcm	00000012 Print::print(long)
00006818 g     F .text.itcm	00000010 FatFile::close()
0000acf0 g     F .text.itcm	00000004 Panic_Temp_isr
000164e4 g     F .text.itcm	00000030 .hidden __fixdfdi
00000970 g     F .text.itcm	00000160 setAudioFrequency(int)
000025a8 g     F .text.itcm	0000000c queue_isBusy()
20008ef8 g     O .data	00000004 sd
000068d4 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00015f10 g     F .text.itcm	00000024 _wcsnrtombs_r
000084fc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000dc00 g     F .text.itcm	0000002c _write_r
000143e0 g     F .text.itcm	00000028 iswspace_l
000089e4 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
20027b8c g     O .bss	00000002 again
00002f74 g     F .text.itcm	000000b4 filing_init()
0000b050 g     F .text.itcm	00000094 usb_mtp_recv
0000e1f0 g     F .text.itcm	0000000c nanf
20027980 g     O .bss	00000004 setup_ready
20008eec g     O .data	00000004 _impure_ptr
00004e9a g     F .text.itcm	0000002a ExFatFile::peek()
00012d0c g     F .text.itcm	00000130 __sflush_r
20000418  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
00014320 g     F .text.itcm	00000054 _mbrtowc_r
0000b22c  w    F .text.itcm	00000054 EventResponder::runFromYield()
00007bb8 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000d59c g     F .text.itcm	00000046 _fwalk_sglue
0000849c g     F .text.itcm	0000000c SdioCard::errorCode() const
000068c6 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002360 g       .text.code	00000000 __preinit_array_end
60001dc4 g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002660 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00002a5c g     F .text.itcm	00000084 newFileName(char*)
00000edc  w    F .text.itcm	00000018 FsFile::~FsFile()
0000553c g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007d7a g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001774 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0000ed50 g     F .text.itcm	0000002a __ascii_mbtowc
0000f4d0 g     F .text.itcm	00000064 __ulp
0000a10c g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000b42c  w    F .text.itcm	00000008 Print::print(unsigned long, int)
0000074c g     F .text.itcm	00000168 setup
20007800 g     O .data	00000078 usb_descriptor_list
00008728 g     F .text.itcm	00000004 SdioCard::status()
0000104c g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
000035ec g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000e44  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00000e22  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000e1e0 g     F .text.itcm	00000010 nan
00006364 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00003d88 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
0000632a g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20026e00 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007be0 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000b3ec g     F .text.itcm	00000030 DMAChannel::release()
000020c4 g     F .text.itcm	00000118 loadParameters()
00009ba8 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00012f18 g     F .text.itcm	00000064 stpncpy
20008ee0 g     O .data	0000000c __sglue
00009758 g     F .text.itcm	00000100 usb_serial_configure
0000b5a4  w    F .text.itcm	0000001c _write
200092c0 g       .data	00000000 _edata
00005616 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
20027d09 g     O .bss	00000001 external_psram_size
0000388c g     F .text.itcm	000000d0 MTPD::GetObjectInfo(unsigned long)
000084fc  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004a80 g     F .text.itcm	00000048 FsName::get16()
00007c88  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008068 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00007c0e g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00004bc0 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
0000629c g     F .text.itcm	00000070 FatFile::addDirCluster()
00015cf4 g     F .text.itcm	000000aa __fputwc
0000b480  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00006dd6 g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000bf8 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000a6f4 g     F .text.itcm	00000046 ultoa
00003eee g     F .text.itcm	00000016 MTPD::read8()
20027b8e g     O .bss	00000002 dgain
00007a0e g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001124 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000d72c g     F .text.itcm	0000003e __swrite
0000b2f4 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
000024bc g     F .text.itcm	000000c8 menu(short)
20008edc g     O .data	00000004 __malloc_trim_threshold
0000b470  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d410 g     F .text.itcm	0000000a fcvtf
0000831e  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007da0 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
000034ac g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001162 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
000145a0 g     F .text.itcm	00000028 fiprintf
000148b0 g     F .text.itcm	00000f8c _vfiprintf_r
000034d0 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
00009264  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20009300 g     O .bss	00002440 mtpd
0000f37c g     F .text.itcm	00000154 __mdiff
00002610 g     F .text.itcm	00000050 pullData(unsigned long*)
000084ec g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000013da g     F .text.itcm	00000094 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000055d6 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006120 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002980 g     F .text.itcm	0000005c checkEndOfFile(short)
20008818 g     O .data	00000120 _impure_data
00004fa4 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002868 g     F .text.itcm	00000060 writeHeader(char*)
0001453c g     F .text.itcm	00000064 _jp2uc_l
00001e64 g     F .text.itcm	00000188 menu3()
0000d590 g     F .text.itcm	0000000c __sfp_lock_release
200273fc g     O .bss	00000004 mtp_txEventCount
0000b434  w    F .text.itcm	00000014 Print::println(unsigned long, int)
0000273c g     F .text.itcm	00000044 timeStamp()
00008bac g     F .text.itcm	00000074 SdioCard::writeStop()
00012e90 g     F .text.itcm	00000088 __sccl
00007e60 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00004c5a g     F .text.itcm	00000014 ExFatFile::close()
20000800 g     O .data	00000101 _ctype_
0000aba8  w    F .text.itcm	00000004 _read
60002360 g       .text.code	00000000 __init_array_start
0000bab4  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000fe8 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
60002268 g     F .text.code	0000000e CrashReportClass::operator bool()
00003f1a g     F .text.itcm	00000014 MTPD::read32()
2000893c g     O .data	00000004 F_BUS_ACTUAL
0000ae6a g     F .text.itcm	00000036 quadtimer_init
20027364 g     O .bss	00000004 disk_count
000032bc g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007228 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
000033b8 g     F .text.itcm	000000cc date2time(datetime_t*)
0000b4a4 g     F .text.itcm	0000002c Stream::timedRead()
00015f94 g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000b350 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00007c8a  w    F .text.itcm	00000006 SharedSpiCard::end()
0000e100 g     F .text.itcm	000000dc strlen
00006336 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000654e g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000e5d4 g     F .text.itcm	00000594 __gethex
600023c0 g     O .text.progmem	00000020 usb_string_product_name_default
0000d7e0 g     F .text.itcm	0000001c vdprintf
00008944 g     F .text.itcm	00000060 SdioCard::sectorCount()
000066fc g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
600017e6  w    F .text.code	00000002 startup_middle_hook
20000564 g     O .data	00000070 vtable for SdioCard
00016434 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000011f6 g     F .text.itcm	00000048 MTPStorage_SD::close()
0000620c g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600017ee g     F .text.code	00000112 configure_cache
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
00008316  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000012a0 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
00007f8e  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
000029f0 g     F .text.itcm	0000006c newDirectory(char*)
000090c0 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
000021dc g     F .text.itcm	000002e0 menu2()
00009368 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003028 g     F .text.itcm	00000290 compress(void*)
0000605c  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c66 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00016174 g     F .text.itcm	0000027a .hidden __subdf3
60002360 g       .text.code	00000000 __preinit_array_start
0000a6b0 g     F .text.itcm	0000001c usb_receive
0000549c g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
000011e0 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20008f14 g     O .data	00000004 t_rep
0000ef70 g     F .text.itcm	00000060 __lo0bits
000055b0 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
20008f18 g     O .data	00000004 tempDatai
0000663a g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00022c00 g       *ABS*	00000000 _flashimagelen
00007ffc g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000b7b0 g     F .text.itcm	0000000a __aeabi_atexit
00000edc  w    F .text.itcm	00000018 FsFile::~FsFile()
0000abcc g     F .text.itcm	00000024 rtc_get
00005938 g     F .text.itcm	0000008c ExFatFile::remove()
00012f88 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000b32c g     F .text.itcm	00000004 pendablesrvreq_isr
00004074 g     F .text.itcm	000000f4 MTPD::SendObject()
20027b92 g     O .bss	00000002 monitor
00001d50 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20008964 g     O .data	0000016c __global_locale
00008da0 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00009858 g     F .text.itcm	000000d4 usb_serial_read
20026ff0 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b5da g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000a620 g     F .text.itcm	00000040 usb_config_tx
0000abac  w    F .text.itcm	00000006 _close
00006e12 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000bac8 g     F .text.itcm	00000010 free
00004ac8 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010a6 g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000eddc g     F .text.itcm	000000a4 __multadd
0000edc8 g     F .text.itcm	00000012 _Bfree
0000609e g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20008f1e  w    O .data	00000016 usb_string_serial_number
0000912c g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
000084d0 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200092c0
60001428:	.word	0x20027d60

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	600017e4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	600017ee <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001b74 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600022f0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001900 <configure_external_ram>
	analog_init();
6000159c:	bl	60002278 <analog_init>
	pwm_init();
600015a0:	bl	600022e0 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001bd0 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	600017e6 <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	6000165c <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	600017ea <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	600017e8 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	600022d8 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002330 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00016598
600015dc:	.word	0x600024d8
600015e0:	.word	0x00000000
600015e4:	.word	0x200092c0
600015e8:	.word	0x60018a74
600015ec:	.word	0x20000000
600015f0:	.word	0x20009000
600015f4:	.word	0x0000a9fd
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000b32d
6000160c:	.word	0x0000b331
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20027b3c
6000161c:	.word	0x08f0d180
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20027b40
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	ldr	r3, [pc, #192]	; (60001720 <usb_init+0xc4>)
6000165e:	movw	r2, #3937	; 0xf61
{
60001662:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001664:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001668:	bl	60002358 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000166c:	ldr	r2, [pc, #180]	; (60001724 <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r1, [pc, #184]	; (60001728 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001670:	ldr.w	r3, [r2, #128]	; 0x80
60001674:	orr.w	r3, r3, #3
60001678:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
6000167c:	movw	r2, #1028	; 0x404
60001680:	ldr	r3, [pc, #168]	; (6000172c <usb_init+0xd0>)
60001682:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001686:	ldr	r2, [pc, #168]	; (60001730 <usb_init+0xd4>)
60001688:	ldr	r0, [r2, #0]
6000168a:	tst	r0, r1
6000168c:	bne.n	60001696 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000168e:	ldr.w	r1, [r3, #424]	; 0x1a8
60001692:	lsls	r4, r1, #30
60001694:	beq.n	600016cc <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001696:	mov.w	r1, #2147483648	; 0x80000000
6000169a:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000169c:	ldr.w	r2, [r3, #320]	; 0x140
600016a0:	orr.w	r2, r2, #2
600016a4:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a8:	ldr	r2, [pc, #128]	; (6000172c <usb_init+0xd0>)
600016aa:	ldr.w	r3, [r2, #320]	; 0x140
600016ae:	lsls	r0, r3, #30
600016b0:	bmi.n	600016aa <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b2:	mov.w	r3, #3758153728	; 0xe000e000
600016b6:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016ba:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016bc:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016c0:	mov.w	r2, #2147483648	; 0x80000000
600016c4:	ldr	r3, [pc, #104]	; (60001730 <usb_init+0xd4>)
600016c6:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016c8:	bl	600022f8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016cc:	ldr	r3, [pc, #96]	; (60001730 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
600016ce:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d0:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d4:	ldr	r4, [pc, #84]	; (6000172c <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d6:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d8:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
600016dc:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016de:	movs	r3, #10
600016e0:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e4:	ldr	r3, [pc, #76]	; (60001734 <usb_init+0xd8>)
600016e6:	mov	r0, r3
600016e8:	bl	60002318 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016ec:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f0:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016f4:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016f6:	mov.w	r2, #4194304	; 0x400000
600016fa:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016fc:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001700:	ldr	r2, [pc, #52]	; (60001738 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001702:	str.w	r3, [r4, #328]	; 0x148
60001706:	ldr	r3, [pc, #52]	; (6000173c <usb_init+0xe0>)
60001708:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170c:	mov.w	r3, #3758153728	; 0xe000e000
60001710:	mov.w	r2, #131072	; 0x20000
60001714:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001718:	movs	r3, #1
6000171a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000171e:	pop	{r4, pc}
60001720:	.word	0x400d8000
60001724:	.word	0x400fc000
60001728:	.word	0x001e1c00
6000172c:	.word	0x402e0000
60001730:	.word	0x400d9000
60001734:	.word	0x20000000
60001738:	.word	0x0000a139
6000173c:	.word	0x20009000

60001740 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001740:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001742:	ldr	r3, [pc, #60]	; (60001780 <_reboot_Teensyduino_+0x40>)
60001744:	ldr	r3, [r3, #96]	; 0x60
60001746:	lsls	r3, r3, #30
60001748:	bmi.n	6000174c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000174a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000174c:	cpsid	i
		USB1_USBCMD = 0;
6000174e:	ldr	r3, [pc, #52]	; (60001784 <_reboot_Teensyduino_+0x44>)
60001750:	movs	r2, #0
60001752:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001756:	sub.w	r3, r3, #2310144	; 0x234000
6000175a:	ldr	r2, [pc, #44]	; (60001788 <_reboot_Teensyduino_+0x48>)
6000175c:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000175e:	sub.w	r3, r3, #534773760	; 0x1fe00000
60001762:	sub.w	r3, r3, #700416	; 0xab000
60001766:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001768:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000176c:	ldr	r0, [pc, #28]	; (6000178c <_reboot_Teensyduino_+0x4c>)
6000176e:	ldr	r3, [pc, #32]	; (60001790 <_reboot_Teensyduino_+0x50>)
60001770:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	mov.w	r3, #2097152	; 0x200000
60001776:	ldr	r3, [r3, #28]
60001778:	ldr	r3, [r3, #8]
6000177a:	blx	r3
6000177c:	b.n	6000174c <_reboot_Teensyduino_+0xc>
6000177e:	nop
60001780:	.word	0x401f4400
60001784:	.word	0x402e0000
60001788:	.word	0x00200003
6000178c:	.word	0x20208000
60001790:	.word	0xeb120000

60001794 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001794:	ldr	r3, [pc, #28]	; (600017b4 <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001796:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001798:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
6000179a:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000179e:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017a2:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017a6:	ldr	r2, [r3, #20]
600017a8:	lsls	r2, r2, #31
600017aa:	bpl.n	600017a6 <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017ac:	movs	r2, #1
600017ae:	str	r2, [r3, #20]
}
600017b0:	bx	lr
600017b2:	nop
600017b4:	.word	0x402a4000

600017b8 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
600017b8:	ldr	r3, [pc, #32]	; (600017dc <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017ba:	ldr	r2, [pc, #36]	; (600017e0 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
600017bc:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017c0:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017c4:	movs	r2, #1
600017c6:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ca:	ldr	r2, [r3, #20]
600017cc:	lsls	r2, r2, #31
600017ce:	bpl.n	600017ca <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
600017d0:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017d4:	movs	r2, #33	; 0x21
}
600017d6:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017d8:	str	r2, [r3, #20]
}
600017da:	bx	lr
600017dc:	.word	0x402a4000
600017e0:	.word	0x00030004

600017e4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017e4:	bx	lr

600017e6 <startup_default_middle_hook>:
600017e6:	bx	lr

600017e8 <startup_default_late_hook>:
600017e8:	bx	lr

600017ea <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017ea:	nop
600017ec:	bx	lr

600017ee <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600017ee:	mov.w	r3, #3758153728	; 0xe000e000
600017f2:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f4:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
600017f6:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017fa:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017fe:	ldr	r2, [pc, #184]	; (600018b8 <configure_cache+0xca>)
60001800:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001804:	movs	r2, #17
60001806:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000180a:	ldr	r2, [pc, #176]	; (600018bc <configure_cache+0xce>)
6000180c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001810:	movs	r2, #18
60001812:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001816:	ldr	r2, [pc, #168]	; (600018c0 <configure_cache+0xd2>)
60001818:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181c:	ldr	r2, [pc, #164]	; (600018c4 <configure_cache+0xd6>)
6000181e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001822:	ldr	r2, [pc, #164]	; (600018c8 <configure_cache+0xda>)
60001824:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001828:	ldr	r2, [pc, #160]	; (600018cc <configure_cache+0xde>)
6000182a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182e:	ldr	r2, [pc, #160]	; (600018d0 <configure_cache+0xe2>)
60001830:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	ldr	r2, [pc, #156]	; (600018d4 <configure_cache+0xe6>)
60001836:	orr.w	r2, r2, #21
6000183a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000183e:	ldr	r2, [pc, #152]	; (600018d8 <configure_cache+0xea>)
60001840:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001844:	add.w	r2, r2, #270532608	; 0x10200000
60001848:	adds	r2, #13
6000184a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000184e:	ldr	r2, [pc, #140]	; (600018dc <configure_cache+0xee>)
60001850:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001854:	ldr	r2, [pc, #136]	; (600018e0 <configure_cache+0xf2>)
60001856:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000185a:	ldr	r2, [pc, #136]	; (600018e4 <configure_cache+0xf6>)
6000185c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001860:	ldr	r2, [pc, #132]	; (600018e8 <configure_cache+0xfa>)
60001862:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001866:	ldr	r2, [pc, #132]	; (600018ec <configure_cache+0xfe>)
60001868:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000186c:	ldr	r2, [pc, #128]	; (600018f0 <configure_cache+0x102>)
6000186e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001872:	ldr	r2, [pc, #128]	; (600018f4 <configure_cache+0x106>)
60001874:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001878:	ldr	r2, [pc, #124]	; (600018f8 <configure_cache+0x10a>)
6000187a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000187e:	ldr	r2, [pc, #124]	; (600018fc <configure_cache+0x10e>)
60001880:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001884:	nop
	asm("nop");
60001886:	nop
	asm("nop");
60001888:	nop
	asm("nop");
6000188a:	nop
	asm("nop");
6000188c:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000188e:	movs	r2, #1
60001890:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001894:	dsb	sy
	asm("isb");
60001898:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000189c:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018a0:	dsb	sy
	asm("isb");
600018a4:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018a8:	ldr.w	r2, [r3, #3348]	; 0xd14
600018ac:	orr.w	r2, r2, #196608	; 0x30000
600018b0:	str.w	r2, [r3, #3348]	; 0xd14
}
600018b4:	bx	lr
600018b6:	nop
600018b8:	.word	0x1000003f
600018bc:	.word	0x07080025
600018c0:	.word	0x00100009
600018c4:	.word	0x00200013
600018c8:	.word	0x07020021
600018cc:	.word	0x20000014
600018d0:	.word	0x13080025
600018d4:	.word	0x20027d60
600018d8:	.word	0x10000009
600018dc:	.word	0x130b0027
600018e0:	.word	0x40000017
600018e4:	.word	0x13100033
600018e8:	.word	0x60000018
600018ec:	.word	0x070b002f
600018f0:	.word	0x70000019
600018f4:	.word	0x130b002f
600018f8:	.word	0x8000001a
600018fc:	.word	0x130b003b

60001900 <configure_external_ram>:
{
60001900:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001902:	ldr	r3, [pc, #536]	; (60001b1c <configure_external_ram+0x21c>)
60001904:	ldr	r2, [pc, #536]	; (60001b20 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001906:	ldr	r1, [pc, #540]	; (60001b24 <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001908:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000190c:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001910:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001914:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001918:	ldr	r4, [pc, #524]	; (60001b28 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000191a:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000191e:	add.w	r2, r2, #28672	; 0x7000
60001922:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001926:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000192a:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000192e:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001932:	movs	r2, #24
60001934:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001936:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001938:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000193a:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000193c:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000193e:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001942:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001946:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000194a:	movs	r2, #1
6000194c:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001950:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001954:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001958:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000195c:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001960:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001964:	ldr	r2, [pc, #452]	; (60001b2c <configure_external_ram+0x22c>)
60001966:	ldr	r3, [r2, #24]
60001968:	bic.w	r3, r3, #3758096384	; 0xe0000000
6000196c:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001970:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001974:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001978:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000197a:	ldr.w	r3, [r2, #132]	; 0x84
6000197e:	orr.w	r3, r3, #12
60001982:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001986:	ldr	r3, [pc, #424]	; (60001b30 <configure_external_ram+0x230>)
60001988:	ldr	r2, [r3, #0]
6000198a:	orr.w	r2, r2, #2
6000198e:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001990:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001992:	ldr	r2, [pc, #416]	; (60001b34 <configure_external_ram+0x234>)
60001994:	bic.w	r1, r1, #30848	; 0x7880
60001998:	bic.w	r1, r1, #115	; 0x73
6000199c:	lsls	r1, r1, #16
6000199e:	lsrs	r1, r1, #16
600019a0:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019a2:	ldr	r1, [pc, #404]	; (60001b38 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019a6:	mov.w	r2, #4294967295
600019aa:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ac:	add.w	r2, r2, #16187392	; 0xf70000
600019b0:	ldr	r0, [r1, #8]
600019b2:	add.w	r2, r2, #14336	; 0x3800
600019b6:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b8:	ldr	r0, [pc, #384]	; (60001b3c <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019ba:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019be:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c0:	ldr	r2, [r3, #12]
600019c2:	bic.w	r2, r2, #120	; 0x78
600019c6:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019c8:	ldr	r2, [r3, #32]
600019ca:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019cc:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ce:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	ldr	r2, [r3, #32]
600019d2:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	ldr	r0, [pc, #356]	; (60001b40 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	ldr	r2, [pc, #356]	; (60001b44 <configure_external_ram+0x244>)
600019e0:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e2:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	ldr.w	r2, [r1, #184]	; 0xb8
600019e8:	bic.w	r2, r2, #63	; 0x3f
600019ec:	orr.w	r2, r2, #1
600019f0:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
600019f8:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	bic.w	r2, r2, #63	; 0x3f
600019fe:	orr.w	r2, r2, #1
60001a02:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a18:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1c:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a1e:	ldr	r0, [pc, #296]	; (60001b48 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a20:	bic.w	r2, r2, #2
60001a24:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	ldr	r2, [pc, #292]	; (60001b4c <configure_external_ram+0x24c>)
60001a28:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2a:	movs	r2, #2
60001a2c:	str	r2, [r3, #28]
60001a2e:	ldr	r2, [pc, #288]	; (60001b50 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a30:	str.w	r1, [r2], #4
60001a34:	cmp	r2, r0
60001a36:	bne.n	60001a30 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a38:	ldr	r2, [r3, #0]
60001a3a:	orr.w	r2, r2, #1
60001a3e:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	ldr	r3, [pc, #236]	; (60001b30 <configure_external_ram+0x230>)
60001a42:	ldr	r4, [r3, #0]
60001a44:	ands.w	r4, r4, #1
60001a48:	bne.n	60001a42 <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a4a:	ldr	r2, [pc, #256]	; (60001b4c <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4c:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001a4e:	mov	r1, r4
60001a50:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a52:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a54:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a58:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5a:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a5e:	movw	r2, #1126	; 0x466
60001a62:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a66:	movw	r2, #1177	; 0x499
60001a6a:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	ldr	r2, [pc, #228]	; (60001b54 <configure_external_ram+0x254>)
60001a70:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a74:	movw	r2, #9217	; 0x2401
60001a78:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	movw	r2, #1077	; 0x435
60001a80:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a84:	ldr	r2, [pc, #208]	; (60001b58 <configure_external_ram+0x258>)
60001a86:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	ldr	r2, [pc, #208]	; (60001b5c <configure_external_ram+0x25c>)
60001a8c:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a90:	ldr	r2, [pc, #204]	; (60001b60 <configure_external_ram+0x260>)
60001a92:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	movw	r2, #8705	; 0x2201
60001a9a:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001a9e:	bl	60001794 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001aa2:	movs	r0, #1
60001aa4:	bl	60001794 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001aa8:	mov	r0, r6
60001aaa:	bl	60001794 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aae:	mov	r0, r4
60001ab0:	bl	600017b8 <flexspi2_psram_id>
60001ab4:	movw	r3, #23821	; 0x5d0d
60001ab8:	mov	r5, r0
60001aba:	cmp	r0, r3
60001abc:	bne.n	60001b0e <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001abe:	movs	r0, #4
60001ac0:	bl	60001794 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001ac4:	mov.w	r1, #8388608	; 0x800000
60001ac8:	mov	r0, r4
60001aca:	bl	60001794 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ace:	movs	r0, #1
60001ad0:	bl	60001794 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001ad4:	mov	r0, r6
60001ad6:	bl	60001794 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ada:	mov	r0, r1
60001adc:	bl	600017b8 <flexspi2_psram_id>
60001ae0:	cmp	r0, r5
60001ae2:	bne.n	60001b0a <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001ae4:	movs	r0, #4
60001ae6:	bl	60001794 <flexspi2_command>
			external_psram_size = 16;
60001aea:	movs	r0, #16
			external_psram_size * 0x100000 -
60001aec:	ldr	r1, [pc, #116]	; (60001b64 <configure_external_ram+0x264>)
			external_psram_size = 16;
60001aee:	ldr	r3, [pc, #120]	; (60001b68 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001af0:	ldr	r2, [pc, #120]	; (60001b6c <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001af2:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af4:	movs	r3, #0
			external_psram_size * 0x100000 -
60001af6:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af8:	str	r3, [sp, #0]
60001afa:	movs	r3, #1
60001afc:	add.w	r2, r2, r0, lsl #20
60001b00:	ldr	r0, [pc, #108]	; (60001b70 <configure_external_ram+0x270>)
60001b02:	bl	60002340 <__sm_set_pool_veneer>
}
60001b06:	add	sp, #8
60001b08:	pop	{r4, r5, r6, pc}
60001b0a:	movs	r0, #8
60001b0c:	b.n	60001aec <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b0e:	movs	r2, #16
60001b10:	ldr	r0, [pc, #92]	; (60001b70 <configure_external_ram+0x270>)
}
60001b12:	add	sp, #8
60001b14:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b18:	b.w	60002318 <__memset_veneer>
60001b1c:	.word	0x401f8000
60001b20:	.word	0x0001b0f9
60001b24:	.word	0x000110f9
60001b28:	.word	0x7cf0ff00
60001b2c:	.word	0x400fc000
60001b30:	.word	0x402a4000
60001b34:	.word	0xffff0012
60001b38:	.word	0x402a8000
60001b3c:	.word	0x80000040
60001b40:	.word	0x00020063
60001b44:	.word	0x830f00ff
60001b48:	.word	0x402a4300
60001b4c:	.word	0x5af05af0
60001b50:	.word	0x402a4200
60001b54:	.word	0x3018049f
60001b58:	.word	0x0a1806eb
60001b5c:	.word	0x26013206
60001b60:	.word	0x0a180638
60001b64:	.word	0x70000000
60001b68:	.word	0x20027d09
60001b6c:	.word	0x70000000
60001b70:	.word	0x20027374

60001b74 <usb_pll_start>:
{
60001b74:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b76:	ldr	r3, [pc, #84]	; (60001bcc <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b78:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b7a:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b7e:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b82:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b86:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b8a:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b8e:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b90:	tst.w	r2, #2
60001b94:	beq.n	60001b9e <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b96:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b98:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b9a:	str	r7, [r3, #24]
			continue;
60001b9c:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b9e:	tst.w	r2, #8192	; 0x2000
60001ba2:	bne.n	60001ba8 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ba4:	str	r5, [r3, #20]
			continue;
60001ba6:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001ba8:	tst.w	r2, #4096	; 0x1000
60001bac:	bne.n	60001bb2 <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bae:	str	r4, [r3, #20]
			continue;
60001bb0:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001bb2:	cmp	r2, #0
60001bb4:	bge.n	60001b8e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001bb6:	tst.w	r2, #65536	; 0x10000
60001bba:	beq.n	60001bc0 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	str	r1, [r3, #24]
			continue;
60001bbe:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001bc0:	lsls	r2, r2, #25
60001bc2:	bmi.n	60001bc8 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc4:	str	r0, [r3, #20]
			continue;
60001bc6:	b.n	60001b8e <usb_pll_start+0x1a>
}
60001bc8:	pop	{r4, r5, r6, r7, pc}
60001bca:	nop
60001bcc:	.word	0x400d8000

60001bd0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd0:	ldr	r2, [pc, #248]	; (60001ccc <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bd2:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bd6:	ldr	r0, [pc, #248]	; (60001cd0 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd8:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	vldr	s10, [pc, #244]	; 60001cd4 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be0:	bic.w	r3, r3, #1
{
60001be4:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be6:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bea:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bec:	ldr	r4, [pc, #232]	; (60001cd8 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bee:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf2:	ldr	r3, [pc, #232]	; (60001cdc <tempmon_init+0x10c>)
60001bf4:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf8:	uxtb	r1, r3
60001bfa:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfc:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c00:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c04:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c06:	vcvt.f32.s32	s14, s15
60001c0a:	ldr	r1, [pc, #212]	; (60001ce0 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c0c:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c10:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c12:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c16:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1a:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1e:	ldr	r3, [pc, #196]	; (60001ce4 <tempmon_init+0x114>)
60001c20:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c24:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c28:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2c:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c30:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c34:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c38:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3c:	vdiv.f32	s11, s10, s12
60001c40:	vadd.f32	s11, s11, s13
60001c44:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c48:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4c:	vldr	s11, [pc, #152]	; 60001ce8 <tempmon_init+0x118>
60001c50:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c54:	orr.w	r3, r3, r1, lsl #20
60001c58:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c5c:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c60:	ldr	r3, [pc, #136]	; (60001cec <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c62:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c66:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c6a:	vdiv.f32	s11, s14, s12
60001c6e:	vadd.f32	s14, s11, s13
60001c72:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c76:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7e:	and.w	r3, r3, r0, lsl #16
60001c82:	orrs	r3, r1
60001c84:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c88:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8c:	vadd.f32	s15, s14, s13
60001c90:	vcvt.u32.f32	s15, s15
60001c94:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c98:	ubfx	r3, r3, #0, #12
60001c9c:	orrs	r3, r1
60001c9e:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	orr.w	r3, r3, #2
60001caa:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cae:	movs	r2, #0
60001cb0:	ldr	r3, [pc, #60]	; (60001cf0 <tempmon_init+0x120>)
60001cb2:	strb.w	r2, [r3, #64]	; 0x40
60001cb6:	ldr	r3, [pc, #60]	; (60001cf4 <tempmon_init+0x124>)
60001cb8:	ldr	r2, [pc, #60]	; (60001cf8 <tempmon_init+0x128>)
60001cba:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cbe:	mov.w	r3, #3758153728	; 0xe000e000
60001cc2:	movs	r2, #1
60001cc4:	str.w	r2, [r3, #264]	; 0x108
}
60001cc8:	pop	{r4, pc}
60001cca:	nop
60001ccc:	.word	0x400d8100
60001cd0:	.word	0x200274a0
60001cd4:	.word	0x42aa0000
60001cd8:	.word	0x2002749c
60001cdc:	.word	0x401f4400
60001ce0:	.word	0x200274a4
60001ce4:	.word	0x200274a8
60001ce8:	.word	0x42b40000
60001cec:	.word	0x0fff0000
60001cf0:	.word	0xe000e400
60001cf4:	.word	0x20009000
60001cf8:	.word	0x0000acf1

60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001cfc:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001cfe:	ldr	r4, [pc, #64]	; (60001d40 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001d00:	ldr.w	r3, [r4, #128]	; 0x80
60001d04:	cmp	r3, #11
60001d06:	bne.n	60001d3a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001d08:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001d0c:	ldr	r2, [pc, #52]	; (60001d44 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d0e:	ldr	r6, [pc, #56]	; (60001d48 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001d10:	ldr	r5, [pc, #56]	; (60001d4c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001d12:	ldr	r1, [r2, #0]
60001d14:	adds	r2, #4
60001d16:	eors	r3, r1
60001d18:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d1a:	and.w	r0, r3, #1
60001d1e:	subs	r1, #1
60001d20:	mul.w	r0, r6, r0
60001d24:	eor.w	r3, r0, r3, lsr #1
60001d28:	bne.n	60001d1a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001d2a:	cmp	r2, r5
60001d2c:	bne.n	60001d12 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001d2e:	ldr.w	r0, [r4, #168]	; 0xa8
60001d32:	subs	r3, r0, r3
60001d34:	negs	r0, r3
60001d36:	adcs	r0, r3
	return 1;
}
60001d38:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001d3a:	movs	r0, #0
60001d3c:	b.n	60001d38 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001d3e:	nop
60001d40:	.word	0x2027ff00
60001d44:	.word	0x2027ff80
60001d48:	.word	0xedb88320
60001d4c:	.word	0x2027ffa8

60001d50 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001d50:	ldr	r2, [pc, #96]	; (60001db4 <CrashReportClass::clear()+0x64>)
60001d52:	movs	r3, #0
{
60001d54:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001d56:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001d5a:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001d5e:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001d62:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001d66:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001d6a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001d6e:	mov.w	r4, #3758153728	; 0xe000e000
60001d72:	adds	r2, #128	; 0x80
60001d74:	str.w	r2, [r4, #3952]	; 0xf70
60001d78:	adds	r2, #32
60001d7a:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001d7e:	dsb	sy
	asm("isb");
60001d82:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d86:	ldr	r2, [pc, #48]	; (60001db8 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001d88:	ldr	r6, [pc, #48]	; (60001dbc <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d8a:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d8c:	ldr	r5, [pc, #48]	; (60001dc0 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d8e:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d90:	movs	r1, #28
	SRC_GPR5 = 0;
60001d92:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d94:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001d96:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d9a:	bl	60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001d9e:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001da2:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001da6:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001daa:	dsb	sy
	asm("isb");
60001dae:	isb	sy
}
60001db2:	pop	{r4, r5, r6, pc}
60001db4:	.word	0x2027ff00
60001db8:	.word	0x400f8000
60001dbc:	.word	0x2027f000
60001dc0:	.word	0x2027ffc0

60001dc4 <CrashReportClass::printTo(Print&) const>:
{
60001dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001dc8:	mov	r4, r1
  if (isvalid(info)) {
60001dca:	bl	60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001dce:	cmp	r0, #0
60001dd0:	beq.w	60002174 <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001dd4:	ldr	r6, [pc, #692]	; (6000208c <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001dd6:	mov	r0, r4
60001dd8:	ldr	r1, [pc, #692]	; (60002090 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001dda:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001dde:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001de2:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001de6:	ldr	r1, [pc, #684]	; (60002094 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001de8:	mov	r0, r4
    info->time /= 60;
60001dea:	udiv	r9, r7, r8
    info->time /= 60;
60001dee:	udiv	r5, r9, r8
60001df2:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001df6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001dfa:	movs	r3, #24
    p.print(hh);
60001dfc:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001dfe:	udiv	r1, r5, r3
60001e02:	mls	r1, r3, r1, r5
    p.print(hh);
60001e06:	uxtb	r1, r1
60001e08:	bl	60002338 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e0c:	ldr	r1, [pc, #648]	; (60002098 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e0e:	mov	r0, r4
60001e10:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001e14:	mls	r1, r8, r5, r9
    p.print(mm);
60001e18:	mov	r0, r4
60001e1a:	uxtb	r1, r1
60001e1c:	bl	60002338 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e20:	ldr	r1, [pc, #628]	; (60002098 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e22:	mov	r0, r4
60001e24:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001e28:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001e2c:	mov	r0, r4
60001e2e:	uxtb	r1, r1
60001e30:	bl	60002338 <___ZN5Print5printEh_veneer>
60001e34:	mov	r0, r4
60001e36:	bl	600022e8 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001e3a:	ldr	r1, [pc, #608]	; (6000209c <CrashReportClass::printTo(Print&) const+0x2d8>)
60001e3c:	mov	r0, r4
60001e3e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001e42:	movs	r2, #16
60001e44:	ldr.w	r1, [r6, #152]	; 0x98
60001e48:	mov	r0, r4
60001e4a:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001e4e:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001e52:	cmp	r5, #0
60001e54:	beq.n	60001f04 <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001e56:	ldr	r1, [pc, #584]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001e58:	mov	r0, r4
60001e5a:	bl	60002310 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001e5e:	movs	r2, #16
60001e60:	ldr.w	r1, [r6, #136]	; 0x88
60001e64:	mov	r0, r4
60001e66:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001e6a:	lsls	r2, r5, #31
60001e6c:	bpl.w	60002014 <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001e70:	ldr	r1, [pc, #560]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001e72:	mov	r0, r4
60001e74:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001e78:	lsls	r2, r5, #24
60001e7a:	bpl.n	60001ed0 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001e7c:	ldr	r1, [pc, #552]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001e7e:	mov	r0, r4
60001e80:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001e84:	movs	r2, #16
60001e86:	ldr.w	r1, [r6, #144]	; 0x90
60001e8a:	mov	r0, r4
60001e8c:	bl	60002320 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001e90:	ldr.w	r2, [r6, #144]	; 0x90
60001e94:	cmp	r2, #31
60001e96:	bhi.w	60002036 <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001e9a:	ldr	r1, [pc, #528]	; (600020ac <CrashReportClass::printTo(Print&) const+0x2e8>)
60001e9c:	mov	r0, r4
60001e9e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ea2:	movs	r2, #16
60001ea4:	ldr.w	r1, [r6, #152]	; 0x98
60001ea8:	mov	r0, r4
60001eaa:	bl	60002320 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60001eae:	ldr	r1, [pc, #512]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001eb0:	mov	r0, r4
60001eb2:	bl	60002310 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001eb6:	ldr.w	r1, [r6, #152]	; 0x98
60001eba:	movs	r2, #16
60001ebc:	mov	r0, r4
60001ebe:	bl	60002320 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
60001ec2:	ldr	r1, [pc, #496]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60001ec4:	mov	r0, r4
60001ec6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.println();
60001eca:	mov	r0, r4
60001ecc:	bl	600022e8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001ed0:	lsls	r3, r5, #23
60001ed2:	bpl.w	6000204a <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
60001ed6:	ldr	r1, [pc, #480]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60001ed8:	mov	r0, r4
60001eda:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001ede:	lsls	r7, r5, #16
60001ee0:	bpl.n	60001ef6 <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
60001ee2:	ldr	r1, [pc, #472]	; (600020bc <CrashReportClass::printTo(Print&) const+0x2f8>)
60001ee4:	mov	r0, r4
60001ee6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60001eea:	movs	r2, #16
60001eec:	ldr.w	r1, [r6, #148]	; 0x94
60001ef0:	mov	r0, r4
60001ef2:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001ef6:	lsls	r0, r5, #15
60001ef8:	bpl.w	60002074 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60001efc:	ldr	r1, [pc, #448]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60001efe:	mov	r0, r4
60001f00:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
60001f04:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001f08:	cbz	r5, 60001f2c <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60001f0a:	ldr	r1, [pc, #440]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x300>)
60001f0c:	mov	r0, r4
60001f0e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
60001f12:	movs	r2, #16
60001f14:	ldr.w	r1, [r6, #140]	; 0x8c
60001f18:	mov	r0, r4
60001f1a:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001f1e:	lsls	r0, r5, #30
60001f20:	bpl.w	6000216a <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
60001f24:	ldr	r1, [pc, #416]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
60001f26:	mov	r0, r4
60001f28:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60001f2c:	ldr	r1, [pc, #412]	; (600020cc <CrashReportClass::printTo(Print&) const+0x308>)
60001f2e:	mov	r0, r4
60001f30:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
60001f34:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001f38:	movs	r1, #2
60001f3a:	mov	r0, r4
60001f3c:	vcvt.f64.f32	d0, s0
60001f40:	bl	60002350 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
60001f44:	ldr	r1, [pc, #392]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x30c>)
60001f46:	mov	r0, r4
60001f48:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
60001f4c:	ldr	r1, [pc, #388]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x310>)
60001f4e:	mov	r0, r4
60001f50:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
60001f54:	ldr	r3, [pc, #384]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001f56:	ldr	r1, [pc, #388]	; (600020dc <CrashReportClass::printTo(Print&) const+0x318>)
60001f58:	movs	r2, #10
60001f5a:	ldr	r0, [r3, #0]
60001f5c:	movs	r3, #0
60001f5e:	udiv	r1, r0, r1
60001f62:	mov	r0, r4
60001f64:	bl	600022d0 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
60001f68:	ldr	r1, [pc, #372]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x31c>)
60001f6a:	mov	r0, r4
60001f6c:	bl	60002310 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
60001f70:	ldr	r3, [pc, #368]	; (600020e4 <CrashReportClass::printTo(Print&) const+0x320>)
60001f72:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001f74:	lsls	r2, r5, #30
60001f76:	bpl.n	60001f8a <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
60001f78:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f7a:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
60001f7c:	ldr	r3, [pc, #360]	; (600020e8 <CrashReportClass::printTo(Print&) const+0x324>)
60001f7e:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60001f80:	ite	eq
60001f82:	ldreq	r1, [pc, #360]	; (600020ec <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f84:	ldrne	r1, [pc, #360]	; (600020f0 <CrashReportClass::printTo(Print&) const+0x32c>)
60001f86:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001f8a:	lsls	r7, r5, #29
60001f8c:	bpl.n	60001f96 <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
60001f8e:	ldr	r1, [pc, #356]	; (600020f4 <CrashReportClass::printTo(Print&) const+0x330>)
60001f90:	mov	r0, r4
60001f92:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f96:	lsls	r6, r5, #28
60001f98:	bpl.n	60001fa2 <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
60001f9a:	ldr	r1, [pc, #348]	; (600020f8 <CrashReportClass::printTo(Print&) const+0x334>)
60001f9c:	mov	r0, r4
60001f9e:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001fa2:	lsls	r0, r5, #27
60001fa4:	bpl.n	60001fae <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
60001fa6:	ldr	r1, [pc, #340]	; (600020fc <CrashReportClass::printTo(Print&) const+0x338>)
60001fa8:	mov	r0, r4
60001faa:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001fae:	lsls	r1, r5, #26
60001fb0:	bpl.n	60001fba <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
60001fb2:	ldr	r1, [pc, #332]	; (60002100 <CrashReportClass::printTo(Print&) const+0x33c>)
60001fb4:	mov	r0, r4
60001fb6:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001fba:	lsls	r2, r5, #25
60001fbc:	bpl.n	60001fc6 <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60001fbe:	ldr	r1, [pc, #324]	; (60002104 <CrashReportClass::printTo(Print&) const+0x340>)
60001fc0:	mov	r0, r4
60001fc2:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001fc6:	lsls	r3, r5, #24
60001fc8:	bpl.n	60001fd2 <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60001fca:	ldr	r1, [pc, #316]	; (60002108 <CrashReportClass::printTo(Print&) const+0x344>)
60001fcc:	mov	r0, r4
60001fce:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001fd2:	ands.w	r5, r5, #256	; 0x100
60001fd6:	beq.w	600021a6 <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60001fda:	ldr	r1, [pc, #304]	; (6000210c <CrashReportClass::printTo(Print&) const+0x348>)
60001fdc:	mov	r0, r4
60001fde:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fe2:	ldr	r2, [pc, #256]	; (600020e4 <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
60001fe4:	ldr	r1, [pc, #296]	; (60002110 <CrashReportClass::printTo(Print&) const+0x34c>)
60001fe6:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fe8:	ldr	r3, [r2, #8]
60001fea:	bic.w	r3, r3, #256	; 0x100
60001fee:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60001ff0:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
60001ff4:	ldr	r1, [pc, #284]	; (60002114 <CrashReportClass::printTo(Print&) const+0x350>)
60001ff6:	mov	r0, r4
60001ff8:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001ffc:	ldr	r3, [pc, #280]	; (60002118 <CrashReportClass::printTo(Print&) const+0x354>)
60001ffe:	movs	r2, #7
60002000:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002002:	ldr	r2, [pc, #280]	; (6000211c <CrashReportClass::printTo(Print&) const+0x358>)
60002004:	ldr	r3, [r2, #56]	; 0x38
60002006:	orr.w	r3, r3, #64	; 0x40
6000200a:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
6000200c:	dsb	sy
	  while (1) asm ("wfi");
60002010:	wfi
60002012:	b.n	60002010 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002014:	lsls	r3, r5, #30
60002016:	bpl.n	6000201c <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002018:	ldr	r1, [pc, #260]	; (60002120 <CrashReportClass::printTo(Print&) const+0x35c>)
6000201a:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
6000201c:	lsls	r7, r5, #28
6000201e:	bpl.n	60002024 <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002020:	ldr	r1, [pc, #256]	; (60002124 <CrashReportClass::printTo(Print&) const+0x360>)
60002022:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60002024:	lsls	r0, r5, #27
60002026:	bpl.n	6000202c <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002028:	ldr	r1, [pc, #252]	; (60002128 <CrashReportClass::printTo(Print&) const+0x364>)
6000202a:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
6000202c:	lsls	r1, r5, #26
6000202e:	bpl.w	60001e78 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002032:	ldr	r1, [pc, #248]	; (6000212c <CrashReportClass::printTo(Print&) const+0x368>)
60002034:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60002036:	ldr	r3, [pc, #248]	; (60002130 <CrashReportClass::printTo(Print&) const+0x36c>)
60002038:	cmp	r2, r3
6000203a:	bcc.w	60001eca <CrashReportClass::printTo(Print&) const+0x106>
6000203e:	adds	r3, #32
60002040:	cmp	r2, r3
60002042:	bcs.w	60001eca <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60002046:	ldr	r1, [pc, #236]	; (60002134 <CrashReportClass::printTo(Print&) const+0x370>)
60002048:	b.n	60001ec4 <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
6000204a:	lsls	r7, r5, #22
6000204c:	bpl.n	60002052 <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000204e:	ldr	r1, [pc, #232]	; (60002138 <CrashReportClass::printTo(Print&) const+0x374>)
60002050:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60002052:	lsls	r0, r5, #21
60002054:	bpl.n	6000205a <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002056:	ldr	r1, [pc, #228]	; (6000213c <CrashReportClass::printTo(Print&) const+0x378>)
60002058:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000205a:	lsls	r1, r5, #20
6000205c:	bpl.n	60002062 <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000205e:	ldr	r1, [pc, #224]	; (60002140 <CrashReportClass::printTo(Print&) const+0x37c>)
60002060:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002062:	lsls	r2, r5, #19
60002064:	bpl.n	6000206a <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
60002066:	ldr	r1, [pc, #220]	; (60002144 <CrashReportClass::printTo(Print&) const+0x380>)
60002068:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
6000206a:	lsls	r3, r5, #18
6000206c:	bpl.w	60001ede <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002070:	ldr	r1, [pc, #212]	; (60002148 <CrashReportClass::printTo(Print&) const+0x384>)
60002072:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60002074:	lsls	r1, r5, #14
60002076:	bpl.n	6000207c <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
60002078:	ldr	r1, [pc, #208]	; (6000214c <CrashReportClass::printTo(Print&) const+0x388>)
6000207a:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
6000207c:	lsls	r2, r5, #13
6000207e:	bpl.n	60002084 <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
60002080:	ldr	r1, [pc, #204]	; (60002150 <CrashReportClass::printTo(Print&) const+0x38c>)
60002082:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60002084:	lsls	r3, r5, #12
60002086:	bpl.n	60002158 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
60002088:	ldr	r1, [pc, #200]	; (60002154 <CrashReportClass::printTo(Print&) const+0x390>)
6000208a:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
6000208c:	.word	0x2027ff00
60002090:	.word	0x20007fd3
60002094:	.word	0x20007fe0
60002098:	.word	0x20008509
6000209c:	.word	0x20008007
600020a0:	.word	0x2000802c
600020a4:	.word	0x20008035
600020a8:	.word	0x200080fb
600020ac:	.word	0x2000811d
600020b0:	.word	0x2000813c
600020b4:	.word	0x2000817b
600020b8:	.word	0x200081db
600020bc:	.word	0x20008314
600020c0:	.word	0x20008336
600020c4:	.word	0x20008412
600020c8:	.word	0x2000841b
600020cc:	.word	0x2000845e
600020d0:	.word	0x20008481
600020d4:	.word	0x20008487
600020d8:	.word	0x20008940
600020dc:	.word	0x000f4240
600020e0:	.word	0x200084a5
600020e4:	.word	0x400f8000
600020e8:	.word	0x0bad00f1
600020ec:	.word	0x20008602
600020f0:	.word	0x2000864b
600020f4:	.word	0x2000868c
600020f8:	.word	0x200086b4
600020fc:	.word	0x200086df
60002100:	.word	0x20008706
60002104:	.word	0x20008730
60002108:	.word	0x20008752
6000210c:	.word	0x20008774
60002110:	.word	0x2000879e
60002114:	.word	0x200087c0
60002118:	.word	0x400ac000
6000211c:	.word	0x400d4000
60002120:	.word	0x2000805e
60002124:	.word	0x20008080
60002128:	.word	0x200080aa
6000212c:	.word	0x200080d0
60002130:	.word	0x20027d60
60002134:	.word	0x20008199
60002138:	.word	0x200081fc
6000213c:	.word	0x20008229
60002140:	.word	0x2000826e
60002144:	.word	0x200082ae
60002148:	.word	0x200082e2
6000214c:	.word	0x2000835a
60002150:	.word	0x2000838d
60002154:	.word	0x200083b6
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60002158:	lsls	r7, r5, #7
6000215a:	bpl.n	60002160 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
6000215c:	ldr	r1, [pc, #204]	; (6000222c <CrashReportClass::printTo(Print&) const+0x468>)
6000215e:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60002160:	lsls	r5, r5, #6
60002162:	bpl.w	60001f04 <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
60002166:	ldr	r1, [pc, #200]	; (60002230 <CrashReportClass::printTo(Print&) const+0x46c>)
60002168:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000216a:	lsls	r1, r5, #1
6000216c:	bpl.w	60001f2c <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
60002170:	ldr	r1, [pc, #192]	; (60002234 <CrashReportClass::printTo(Print&) const+0x470>)
60002172:	b.n	60001f26 <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
60002174:	ldr	r1, [pc, #192]	; (60002238 <CrashReportClass::printTo(Print&) const+0x474>)
60002176:	mov	r0, r4
60002178:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
6000217c:	ldr	r1, [pc, #188]	; (6000223c <CrashReportClass::printTo(Print&) const+0x478>)
6000217e:	mov	r0, r4
60002180:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
60002184:	ldr	r1, [pc, #184]	; (60002240 <CrashReportClass::printTo(Print&) const+0x47c>)
60002186:	mov	r0, r4
60002188:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
6000218c:	ldr	r1, [pc, #180]	; (60002244 <CrashReportClass::printTo(Print&) const+0x480>)
6000218e:	mov	r0, r4
60002190:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
60002194:	ldr	r1, [pc, #176]	; (60002248 <CrashReportClass::printTo(Print&) const+0x484>)
60002196:	mov	r0, r4
60002198:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
6000219c:	ldr	r1, [pc, #172]	; (6000224c <CrashReportClass::printTo(Print&) const+0x488>)
6000219e:	mov	r0, r4
600021a0:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
600021a4:	b.n	60001f70 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600021a6:	ldr	r7, [pc, #168]	; (60002250 <CrashReportClass::printTo(Print&) const+0x48c>)
600021a8:	ldr.w	r3, [r7, #192]	; 0xc0
600021ac:	cbz	r3, 60002220 <CrashReportClass::printTo(Print&) const+0x45c>
600021ae:	ldr.w	r6, [r7, #220]	; 0xdc
600021b2:	movs	r1, #28
600021b4:	ldr	r0, [pc, #156]	; (60002254 <CrashReportClass::printTo(Print&) const+0x490>)
600021b6:	bl	60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
600021ba:	cmp	r6, r0
600021bc:	bne.n	60002220 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
600021be:	ldr.w	r8, [pc, #160]	; 60002260 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
600021c2:	ldr.w	r9, [pc, #160]	; 60002264 <CrashReportClass::printTo(Print&) const+0x4a0>
600021c6:	ldr.w	sl, [pc, #140]	; 60002254 <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
600021ca:	movs	r3, #1
600021cc:	ldr.w	r2, [r7, #192]	; 0xc0
600021d0:	mov	r6, r5
600021d2:	lsls	r3, r5
600021d4:	adds	r5, #1
600021d6:	tst	r3, r2
600021d8:	beq.n	6000221c <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
600021da:	mov	r1, r8
600021dc:	mov	r0, r4
600021de:	bl	60002310 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
600021e2:	mov	r1, r5
600021e4:	add.w	r6, sl, r6, lsl #2
600021e8:	mov	r0, r4
600021ea:	bl	60002308 <___ZN5Print5printEl_veneer>
        p.print(" was ");
600021ee:	mov	r1, r9
600021f0:	mov	r0, r4
600021f2:	bl	60002310 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021f6:	movs	r3, #0
600021f8:	movs	r2, #10
600021fa:	ldr	r1, [r6, #4]
600021fc:	mov	r0, r4
600021fe:	bl	600022d0 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
60002202:	ldr	r1, [pc, #84]	; (60002258 <CrashReportClass::printTo(Print&) const+0x494>)
60002204:	mov	r0, r4
60002206:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
6000220a:	ldr	r1, [r6, #4]
6000220c:	movs	r2, #16
6000220e:	mov	r0, r4
60002210:	bl	60002320 <___ZN5Print5printEmi_veneer>
        p.println(")");
60002214:	ldr	r1, [pc, #68]	; (6000225c <CrashReportClass::printTo(Print&) const+0x498>)
60002216:	mov	r0, r4
60002218:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
6000221c:	cmp	r5, #6
6000221e:	bne.n	600021ca <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002220:	bl	60001d50 <CrashReportClass::clear()>
}
60002224:	movs	r0, #1
60002226:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000222a:	nop
6000222c:	.word	0x200083cd
60002230:	.word	0x200083f6
60002234:	.word	0x20008442
60002238:	.word	0x200084aa
6000223c:	.word	0x200084c2
60002240:	.word	0x2000850b
60002244:	.word	0x20008555
60002248:	.word	0x2000857a
6000224c:	.word	0x200085c2
60002250:	.word	0x2027ff00
60002254:	.word	0x2027ffc0
60002258:	.word	0x20008812
6000225c:	.word	0x200085c0
60002260:	.word	0x20008803
60002264:	.word	0x2000847b

60002268 <CrashReportClass::operator bool()>:
{
60002268:	push	{r3, lr}
	if (isvalid(info)) return true;
6000226a:	bl	60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
6000226e:	subs	r0, #0
60002270:	it	ne
60002272:	movne	r0, #1
60002274:	pop	{r3, pc}
60002276:	nop

60002278 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002278:	ldr	r3, [pc, #60]	; (600022b8 <analog_init+0x40>)
6000227a:	ldr	r2, [r3, #108]	; 0x6c
6000227c:	orr.w	r2, r2, #196608	; 0x30000
60002280:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002282:	ldr	r2, [r3, #108]	; 0x6c
60002284:	orr.w	r2, r2, #768	; 0x300
60002288:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000228a:	sub.w	r3, r3, #229376	; 0x38000
6000228e:	movw	r2, #1591	; 0x637
60002292:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002294:	movs	r2, #160	; 0xa0
60002296:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002298:	ldr	r2, [r3, #72]	; 0x48
6000229a:	lsls	r2, r2, #24
6000229c:	bmi.n	60002298 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000229e:	ldr	r2, [pc, #28]	; (600022bc <analog_init+0x44>)
600022a0:	movw	r3, #1591	; 0x637
600022a4:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600022a6:	movs	r3, #160	; 0xa0
600022a8:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600022aa:	ldr	r3, [r2, #72]	; 0x48
600022ac:	ands.w	r3, r3, #128	; 0x80
600022b0:	bne.n	600022aa <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600022b2:	ldr	r2, [pc, #12]	; (600022c0 <analog_init+0x48>)
600022b4:	strb	r3, [r2, #0]
}
600022b6:	bx	lr
600022b8:	.word	0x400fc000
600022bc:	.word	0x400c8000
600022c0:	.word	0x20027d00

600022c4 <_init>:
600022c4:	push	{r3, r4, r5, r6, r7, lr}
600022c6:	nop
600022c8:	pop	{r3, r4, r5, r6, r7}
600022ca:	pop	{r3}
600022cc:	mov	lr, r3
600022ce:	bx	lr

600022d0 <___ZN5Print11printNumberEmhh_veneer>:
600022d0:	ldr.w	pc, [pc]	; 600022d4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600022d4:	.word	0x0000b5db

600022d8 <____libc_init_array_veneer>:
600022d8:	ldr.w	pc, [pc]	; 600022dc <____libc_init_array_veneer+0x4>
600022dc:	.word	0x0000dc39

600022e0 <__pwm_init_veneer>:
600022e0:	ldr.w	pc, [pc]	; 600022e4 <__pwm_init_veneer+0x4>
600022e4:	.word	0x0000aea1

600022e8 <___ZN5Print7printlnEv_veneer>:
600022e8:	ldr.w	pc, [pc]	; 600022ec <___ZN5Print7printlnEv_veneer+0x4>
600022ec:	.word	0x0000b589

600022f0 <__set_arm_clock_veneer>:
600022f0:	ldr.w	pc, [pc]	; 600022f4 <__set_arm_clock_veneer+0x4>
600022f4:	.word	0x00009c89

600022f8 <__delay_veneer>:
600022f8:	ldr.w	pc, [pc]	; 600022fc <__delay_veneer+0x4>
600022fc:	.word	0x0000a9d1

60002300 <___ZN5Print7printlnEPKc_veneer>:
60002300:	ldr.w	pc, [pc]	; 60002304 <___ZN5Print7printlnEPKc_veneer+0x4>
60002304:	.word	0x00000d0d

60002308 <___ZN5Print5printEl_veneer>:
60002308:	ldr.w	pc, [pc]	; 6000230c <___ZN5Print5printEl_veneer+0x4>
6000230c:	.word	0x0000b577

60002310 <___ZN5Print5printEPKc_veneer>:
60002310:	ldr.w	pc, [pc]	; 60002314 <___ZN5Print5printEPKc_veneer+0x4>
60002314:	.word	0x0000b41d

60002318 <__memset_veneer>:
60002318:	ldr.w	pc, [pc]	; 6000231c <__memset_veneer+0x4>
6000231c:	.word	0x00009445

60002320 <___ZN5Print5printEmi_veneer>:
60002320:	ldr.w	pc, [pc]	; 60002324 <___ZN5Print5printEmi_veneer+0x4>
60002324:	.word	0x0000b42d

60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002328:	ldr.w	pc, [pc]	; 6000232c <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
6000232c:	.word	0x0000b449

60002330 <__main_veneer>:
60002330:	ldr.w	pc, [pc]	; 60002334 <__main_veneer+0x4>
60002334:	.word	0x0000b493

60002338 <___ZN5Print5printEh_veneer>:
60002338:	ldr.w	pc, [pc]	; 6000233c <___ZN5Print5printEh_veneer+0x4>
6000233c:	.word	0x0000b425

60002340 <__sm_set_pool_veneer>:
60002340:	ldr.w	pc, [pc]	; 60002344 <__sm_set_pool_veneer+0x4>
60002344:	.word	0x0000ac87

60002348 <___ZN5Print7printlnEmi_veneer>:
60002348:	ldr.w	pc, [pc]	; 6000234c <___ZN5Print7printlnEmi_veneer+0x4>
6000234c:	.word	0x0000b435

60002350 <___ZN5Print10printFloatEdh_veneer>:
60002350:	ldr.w	pc, [pc]	; 60002354 <___ZN5Print10printFloatEdh_veneer+0x4>
60002354:	.word	0x0000b681

60002358 <__usb_init_serialnumber_veneer>:
60002358:	ldr.w	pc, [pc]	; 6000235c <__usb_init_serialnumber_veneer+0x4>
6000235c:	.word	0x0000b1d9

60002360 <__frame_dummy_init_array_entry>:
60002360:	E...]...!...E/..

Disassembly of section .text.progmem:

60002370 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60002370:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002374:	ldr	r3, [pc, #60]	; (600023b4 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002376:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000237a:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000237e:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002382:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60002384:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002388:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
6000238c:	ldr	r2, [r3, #112]	; 0x70
6000238e:	bic.w	r2, r2, #4096	; 0x1000
60002392:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60002394:	ldr	r2, [r3, #112]	; 0x70
60002396:	cmp	r2, #0
60002398:	bge.n	60002394 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000239a:	ldr.w	r2, [r3, #368]	; 0x170
6000239e:	bic.w	r2, r2, #8388608	; 0x800000
600023a2:	bic.w	r2, r2, #32768	; 0x8000
600023a6:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600023aa:	ldr	r2, [r3, #112]	; 0x70
600023ac:	bic.w	r2, r2, #65536	; 0x10000
600023b0:	str	r2, [r3, #112]	; 0x70
  }
600023b2:	bx	lr
600023b4:	.word	0x400d8000

600023b8 <usb_string_mtp>:
600023b8:	..M.T.P.

600023c0 <usb_string_product_name_default>:
600023c0:	 .T.e.e.n.s.y. .
600023d0:	M.T.P. .D.i.s.k.

600023e0 <usb_string_manufacturer_name_default>:
600023e0:	..T.e.e.n.s.y.d.
600023f0:	u.i.n.o.

600023f8 <string0>:
600023f8:	....

600023fc <usb_config_descriptor_12>:
600023fc:	..i.....2.......
6000240c:	...........$....
6000241c:	$....$...$......
6000242c:	................
6000243c:	.@......@.......
6000244c:	........@......@
6000245c:	...... ..

60002465 <usb_config_descriptor_480>:
60002465:	..i.....2.......
60002475:	...........$....
60002485:	$....$...$......
60002495:	................
600024a5:	................
600024b5:	................
600024c5:	...... ..

600024ce <qualifier_descriptor>:
600024ce:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200092c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200092c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20027404
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60022c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	6798 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	5af8 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	6364 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	4d14 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	64ea <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	4e9a <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	b280 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x20027d2a
     154:	.word	0x20027d29
     158:	.word	0x20027b40
     15c:	.word	0x20027b5c

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	e100 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	b588 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	7984 <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	7984 <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	7984 <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000444
     1dc:	.word	0x20000420

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	6c04 <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	5e50 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	a9d0 <delay>
    usb_init();
     22a:	bl	16580 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	419c <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20009300

00000248 <loop>:
{
     248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     24c:	ldr	r6, [pc, #416]	; (3f0 <loop+0x1a8>)
{
     24e:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     250:	ldr	r5, [pc, #416]	; (3f4 <loop+0x1ac>)
  loopCount++;
     252:	ldr	r3, [r6, #0]
     254:	ldr	r4, [pc, #416]	; (3f8 <loop+0x1b0>)
     256:	adds	r3, #1
     258:	str	r3, [r6, #0]
  nb = getDataCount();
     25a:	bl	258c <getDataCount()>
  if(nb>mxb) mxb=nb;
     25e:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     260:	ldr	r2, [pc, #408]	; (3fc <loop+0x1b4>)
  if(nb>mxb) mxb=nb;
     262:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     264:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     266:	it	cc
     268:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     26a:	tst.w	r3, #1
     26e:	bne.n	284 <loop+0x3c>
     270:	ldr	r3, [pc, #396]	; (400 <loop+0x1b8>)
     272:	ldr	r3, [r3, #0]
     274:	cmp	r3, #1
     276:	mov.w	r3, #4294967295
     27a:	it	ne
     27c:	movne	r3, #0
     27e:	strh	r3, [r4, #0]
     280:	movs	r3, #1
     282:	str	r3, [r2, #0]
  status=menu(status);
     284:	ldrh	r0, [r4, #0]
     286:	sxth	r0, r0
     288:	bl	24bc <menu(short)>
     28c:	strh	r0, [r4, #0]
    if(status<0)
     28e:	ldrh	r3, [r4, #0]
     290:	lsls	r3, r3, #16
     292:	bpl.w	39a <loop+0x152>
    { mtpd.loop();
     296:	ldr	r0, [pc, #364]	; (404 <loop+0x1bc>)
     298:	bl	419c <MTPD::loop()>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     29c:	ldr	r3, [pc, #360]	; (408 <loop+0x1c0>)
  if((t1=millis())>(t0+1000))
     29e:	ldr	r7, [pc, #364]	; (40c <loop+0x1c4>)
     2a0:	ldr	r3, [r3, #0]
     2a2:	str	r3, [sp, #28]
     2a4:	ldr	r3, [r7, #0]
     2a6:	ldr	r2, [sp, #28]
     2a8:	add.w	r3, r3, #1000	; 0x3e8
     2ac:	cmp	r3, r2
     2ae:	bcs.n	394 <loop+0x14c>
    if(monitor)
     2b0:	ldr	r3, [pc, #348]	; (410 <loop+0x1c8>)
     2b2:	ldr.w	sl, [pc, #412]	; 450 <loop+0x208>
     2b6:	ldrsh.w	r3, [r3]
     2ba:	ldr.w	r9, [pc, #408]	; 454 <loop+0x20c>
     2be:	ldr.w	r8, [pc, #408]	; 458 <loop+0x210>
     2c2:	cmp	r3, #0
     2c4:	beq.n	37e <loop+0x136>
      rtc_get_datetime(&t);
     2c6:	add	r0, sp, #32
     2c8:	bl	3488 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2cc:	ldrsb.w	r3, [sp, #36]	; 0x24
     2d0:	ldrsh.w	r2, [sp, #32]
     2d4:	str	r3, [sp, #16]
     2d6:	ldrsb.w	r3, [sp, #39]	; 0x27
     2da:	ldr	r1, [pc, #312]	; (414 <loop+0x1cc>)
     2dc:	str	r3, [sp, #12]
     2de:	ldrsb.w	r3, [sp, #38]	; 0x26
     2e2:	ldr	r0, [pc, #308]	; (418 <loop+0x1d0>)
     2e4:	str	r3, [sp, #8]
     2e6:	ldrsb.w	r3, [sp, #37]	; 0x25
     2ea:	str	r3, [sp, #4]
     2ec:	ldrsb.w	r3, [sp, #35]	; 0x23
     2f0:	str	r3, [sp, #0]
     2f2:	ldrsb.w	r3, [sp, #34]	; 0x22
     2f6:	bl	b5c0 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     2fa:	ldr	r1, [pc, #288]	; (41c <loop+0x1d4>)
     2fc:	ldr	r0, [pc, #280]	; (418 <loop+0x1d0>)
     2fe:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     302:	ldr	r1, [r6, #0]
     304:	ldr	r0, [pc, #272]	; (418 <loop+0x1d0>)
     306:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     30a:	ldr	r1, [pc, #276]	; (420 <loop+0x1d8>)
     30c:	ldr	r0, [pc, #264]	; (418 <loop+0x1d0>)
     30e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     312:	ldr.w	r1, [sl]
     316:	ldr	r0, [pc, #256]	; (418 <loop+0x1d0>)
     318:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     31c:	ldr	r1, [pc, #256]	; (420 <loop+0x1d8>)
     31e:	ldr	r0, [pc, #248]	; (418 <loop+0x1d0>)
     320:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     324:	ldr.w	r1, [r9]
     328:	ldr	r0, [pc, #236]	; (418 <loop+0x1d0>)
     32a:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     32e:	ldr	r1, [pc, #240]	; (420 <loop+0x1d8>)
     330:	ldr	r0, [pc, #228]	; (418 <loop+0x1d0>)
     332:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     336:	ldrh	r2, [r5, #0]
     338:	ldr	r1, [pc, #232]	; (424 <loop+0x1dc>)
     33a:	ldr	r0, [pc, #220]	; (418 <loop+0x1d0>)
     33c:	bl	b5c0 <Print::printf(char const*, ...)>
     340:	ldr	r1, [pc, #228]	; (428 <loop+0x1e0>)
     342:	ldr	r0, [pc, #212]	; (418 <loop+0x1d0>)
     344:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     348:	ldr.w	r1, [r8]
     34c:	ldr	r0, [pc, #200]	; (418 <loop+0x1d0>)
     34e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     352:	ldr	r1, [pc, #216]	; (42c <loop+0x1e4>)
     354:	ldr	r0, [pc, #192]	; (418 <loop+0x1d0>)
     356:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     35a:	ldr	r3, [pc, #212]	; (430 <loop+0x1e8>)
     35c:	ldrh	r4, [r3, #0]
     35e:	sxth	r4, r4
     360:	cbnz	r4, 3b4 <loop+0x16c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     362:	ldr	r3, [pc, #208]	; (434 <loop+0x1ec>)
     364:	ldr	r1, [pc, #208]	; (438 <loop+0x1f0>)
     366:	ldr.w	fp, [pc, #176]	; 418 <loop+0x1d0>
     36a:	ldr.w	r2, [r3, r4, lsl #2]
     36e:	adds	r4, #1
     370:	mov	r0, fp
     372:	bl	b5c0 <Print::printf(char const*, ...)>
     376:	cmp	r4, #8
     378:	ldr	r1, [pc, #188]	; (438 <loop+0x1f0>)
     37a:	ldr	r3, [pc, #184]	; (434 <loop+0x1ec>)
     37c:	bne.n	36a <loop+0x122>
    loopCount=0;
     37e:	movs	r3, #0
     380:	str	r3, [r6, #0]
    procCount=0;
     382:	str.w	r3, [sl]
    procMiss=0;
     386:	str.w	r3, [r9]
    mxb=0;
     38a:	strh	r3, [r5, #0]
    disk_count=0;
     38c:	str.w	r3, [r8]
    t0=t1;
     390:	ldr	r3, [sp, #28]
     392:	str	r3, [r7, #0]
}
     394:	add	sp, #44	; 0x2c
     396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     39a:	ldr	r7, [pc, #160]	; (43c <loop+0x1f4>)
     39c:	mov.w	r8, #8
     3a0:	str.w	r8, [r7, #132]	; 0x84
      status=saveData(status);  
     3a4:	ldrh	r0, [r4, #0]
     3a6:	sxth	r0, r0
     3a8:	bl	2e28 <saveData(short)>
     3ac:	strh	r0, [r4, #0]
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     3ae:	str.w	r8, [r7, #136]	; 0x88
}
     3b2:	b.n	29c <loop+0x54>
     3b4:	ldr.w	fp, [pc, #148]	; 44c <loop+0x204>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3b8:	movs	r4, #0
     3ba:	ldr	r1, [pc, #132]	; (440 <loop+0x1f8>)
     3bc:	ldr	r3, [pc, #88]	; (418 <loop+0x1d0>)
     3be:	adds	r4, #1
     3c0:	mov	r0, r3
     3c2:	ldr.w	r2, [fp], #4
     3c6:	bl	b5c0 <Print::printf(char const*, ...)>
     3ca:	cmp	r4, #24
     3cc:	ldr	r3, [pc, #72]	; (418 <loop+0x1d0>)
     3ce:	ldr	r1, [pc, #112]	; (440 <loop+0x1f8>)
     3d0:	bne.n	3be <loop+0x176>
        Serial.printf("%2d",max_stat);
     3d2:	ldr	r4, [pc, #112]	; (444 <loop+0x1fc>)
     3d4:	mov	r0, r3
     3d6:	ldr	r1, [pc, #112]	; (448 <loop+0x200>)
     3d8:	ldr	r2, [r4, #0]
     3da:	bl	b5c0 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3de:	movs	r2, #96	; 0x60
     3e0:	movs	r1, #0
     3e2:	ldr	r0, [pc, #104]	; (44c <loop+0x204>)
     3e4:	bl	9444 <memset>
        max_stat=0;        
     3e8:	movs	r3, #0
     3ea:	str	r3, [r4, #0]
     3ec:	b.n	37e <loop+0x136>
     3ee:	nop
     3f0:	.word	0x20026e44
     3f4:	.word	0x20027b88
     3f8:	.word	0x20027b8a
     3fc:	.word	0x2000b9cc
     400:	.word	0x20027b50
     404:	.word	0x20009300
     408:	.word	0x20027b40
     40c:	.word	0x20026e40
     410:	.word	0x20027b92
     414:	.word	0x20007f1e
     418:	.word	0x20008944
     41c:	.word	0x20007f3f
     420:	.word	0x20007f48
     424:	.word	0x20007f43
     428:	.word	0x20007f47
     42c:	.word	0x20007f4a
     430:	.word	0x20027b94
     434:	.word	0x200273d8
     438:	.word	0x20007f4f
     43c:	.word	0x42004000
     440:	.word	0x20007f54
     444:	.word	0x200273f8
     448:	.word	0x20007f59
     44c:	.word	0x20027424
     450:	.word	0x2002741c
     454:	.word	0x20027420
     458:	.word	0x20027364

0000045c <setup1()>:
{ while(!Serial) {}
     45c:	push	{r4, lr}
     45e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     462:	cmp	r0, #0
     464:	beq.n	45e <setup1()+0x2>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     466:	ldr	r4, [pc, #44]	; (494 <setup1()+0x38>)
  Serial.println("Setup1");
     468:	ldr	r1, [pc, #44]	; (498 <setup1()+0x3c>)
     46a:	ldr	r0, [pc, #48]	; (49c <setup1()+0x40>)
     46c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     470:	ldr	r3, [r4, #0]
     472:	cbz	r3, 48c <setup1()+0x30>
  i2s_setup();
     474:	bl	ad0 <i2s_setup()>
  dma_setup();
     478:	bl	b54 <dma_setup()>
  adc_init();
     47c:	bl	32b8 <adc_init()>
  Serial.println("Setup1 done");
     480:	ldr	r1, [pc, #28]	; (4a0 <setup1()+0x44>)
     482:	ldr	r0, [pc, #24]	; (49c <setup1()+0x40>)
}
     484:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     488:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     48c:	movs	r0, #1
     48e:	bl	a9d0 <delay>
     492:	b.n	470 <setup1()+0x14>
     494:	.word	0x20027980
     498:	.word	0x20007de7
     49c:	.word	0x20008944
     4a0:	.word	0x20007dee

000004a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4a4:	push	{r4, r5, r6, lr}
     4a6:	mov	r5, r0
     4a8:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4ac:	cbnz	r0, 4d2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ae:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4b0:	ldr.w	r0, [r5, #1152]	; 0x480
     4b4:	cbz	r0, 508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4b6:	bl	7068 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4ba:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4bc:	cbz	r6, 4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4be:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4c2:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     4c4:	ldr	r3, [r0, #0]
     4c6:	movs	r1, #0
     4c8:	ldr	r3, [r3, #68]	; 0x44
     4ca:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     4cc:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     4ce:	mov	r0, r4
     4d0:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4d2:	ldr	r3, [r0, #0]
     4d4:	ldr	r3, [r3, #60]	; 0x3c
     4d6:	blx	r3
     4d8:	cmp	r0, #0
     4da:	beq.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4dc:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4e0:	cbnz	r0, 4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     4e2:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     4e6:	cbnz	r0, 4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     4e8:	movs	r4, #0
     4ea:	b.n	4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4ec:	ldr	r3, [r0, #0]
     4ee:	ldr	r3, [r3, #64]	; 0x40
     4f0:	blx	r3
     4f2:	cmp	r0, #0
     4f4:	bne.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4f6:	b.n	4e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     4f8:	ldr	r3, [r0, #0]
     4fa:	movs	r1, #1
     4fc:	ldr	r3, [r3, #68]	; 0x44
     4fe:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     500:	mov	r6, r0
     502:	cmp	r0, #0
     504:	bne.n	4b0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     506:	b.n	4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     508:	ldr.w	r0, [r5, #1156]	; 0x484
     50c:	cmp	r0, #0
     50e:	beq.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     510:	bl	56aa <ExFatPartition::freeClusterCount()>
     514:	b.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000518 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     518:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     51c:	ldr	r4, [pc, #276]	; (634 <storage_configure()+0x11c>)
     51e:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     520:	movs	r1, #0
     522:	ldr	r6, [pc, #276]	; (638 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     524:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     528:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     52c:	strb.w	r1, [r4, #1224]	; 0x4c8
     530:	mov	r0, r5
     532:	bl	8da0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     536:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     538:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     53c:	bl	849c <SdioCard::errorCode() const>
     540:	cmp	r0, #0
     542:	bne.n	5e6 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     544:	movs	r3, #1
     546:	ldr.w	r1, [r4, #1164]	; 0x48c
     54a:	mov	r0, r4
     54c:	mov	r2, r3
     54e:	bl	7ae4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     552:	cmp	r0, #0
     554:	beq.n	5e6 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     556:	ldr	r3, [pc, #228]	; (63c <storage_configure()+0x124>)
     558:	ldr	r2, [r3, #4]
     55a:	cmp	r2, #19
     55c:	ble.n	602 <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     55e:	ldr.w	r3, [r4, #1152]	; 0x480
     562:	cmp	r3, #0
     564:	beq.n	616 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     566:	ldr	r5, [r3, #28]
     568:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     56a:	ldr	r0, [pc, #200]	; (634 <storage_configure()+0x11c>)
     56c:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     570:	ldr.w	r3, [r4, #1152]	; 0x480
     574:	mov	r7, r0
     576:	cmp	r3, #0
     578:	beq.n	624 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     57a:	ldrb	r3, [r3, #6]
     57c:	mov.w	r4, #512	; 0x200
     580:	lsls	r4, r3
     582:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     584:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     586:	mov.w	r8, #10
     58a:	movs	r6, #0
     58c:	movs	r2, #0
     58e:	str	r3, [sp, #0]
     590:	movs	r3, #254	; 0xfe
     592:	ldr	r1, [pc, #172]	; (640 <storage_configure()+0x128>)
     594:	ldr	r0, [pc, #172]	; (644 <storage_configure()+0x12c>)
     596:	bl	b5c0 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     59a:	ldr	r1, [pc, #172]	; (648 <storage_configure()+0x130>)
     59c:	ldr	r0, [pc, #164]	; (644 <storage_configure()+0x12c>)
     59e:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5a2:	mov	r2, r5
     5a4:	mov	r3, r6
     5a6:	ldr	r0, [pc, #156]	; (644 <storage_configure()+0x12c>)
     5a8:	strd	r8, r6, [sp]
     5ac:	bl	b5ee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5b0:	ldr	r1, [pc, #152]	; (64c <storage_configure()+0x134>)
     5b2:	ldr	r0, [pc, #144]	; (644 <storage_configure()+0x12c>)
     5b4:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5b8:	mov	r2, r7
     5ba:	mov	r3, r6
     5bc:	ldr	r0, [pc, #132]	; (644 <storage_configure()+0x12c>)
     5be:	strd	r8, r6, [sp]
     5c2:	bl	b5ee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5c6:	ldr	r1, [pc, #136]	; (650 <storage_configure()+0x138>)
     5c8:	ldr	r0, [pc, #120]	; (644 <storage_configure()+0x12c>)
     5ca:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5ce:	lsr.w	r1, r4, r8
     5d2:	ldr	r0, [pc, #112]	; (644 <storage_configure()+0x12c>)
     5d4:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     5d8:	ldr	r1, [pc, #120]	; (654 <storage_configure()+0x13c>)
     5da:	ldr	r0, [pc, #104]	; (644 <storage_configure()+0x12c>)
        }
      }
  }
     5dc:	add	sp, #8
     5de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5e2:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5e6:	ldr	r3, [r6, #0]
     5e8:	movs	r2, #0
     5ea:	ldr	r1, [pc, #108]	; (658 <storage_configure()+0x140>)
     5ec:	str	r3, [sp, #0]
     5ee:	movs	r3, #254	; 0xfe
     5f0:	ldr	r0, [pc, #80]	; (644 <storage_configure()+0x12c>)
     5f2:	bl	b5c0 <Print::printf(char const*, ...)>
     5f6:	ldr	r0, [pc, #76]	; (644 <storage_configure()+0x12c>)
  }
     5f8:	add	sp, #8
     5fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5fe:	b.w	b588 <Print::println()>
          sd_name[fsCount] = name;
     602:	add.w	r1, r3, r2, lsl #2
     606:	ldr	r0, [r6, #0]
     608:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     60a:	adds	r1, r2, #1
     60c:	str	r1, [r3, #4]
     60e:	add.w	r3, r3, r2, lsl #2
     612:	str	r4, [r3, #88]	; 0x58
     614:	b.n	55e <storage_configure()+0x46>
     616:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     61a:	cmp	r5, #0
     61c:	beq.n	56a <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     61e:	ldr.w	r5, [r5, #1072]	; 0x430
     622:	b.n	56a <storage_configure()+0x52>
     624:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     628:	cmp	r4, #0
     62a:	beq.n	584 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     62c:	ldr.w	r4, [r4, #1084]	; 0x43c
     630:	b.n	584 <storage_configure()+0x6c>
     632:	nop
     634:	.word	0x200274b0
     638:	.word	0x20008efc
     63c:	.word	0x20027984
     640:	.word	0x20007beb
     644:	.word	0x20008944
     648:	.word	0x20007c02
     64c:	.word	0x20007c15
     650:	.word	0x20007c26
     654:	.word	0x20007c35
     658:	.word	0x20007bc0

0000065c <_GLOBAL__sub_I_storage>:
  }
     65c:	push	{r3, r4, r5, lr}
        fsCount = 0;
     65e:	ldr	r5, [pc, #192]	; (720 <_GLOBAL__sub_I_storage+0xc4>)
     660:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     662:	ldr	r3, [pc, #192]	; (724 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     664:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     668:	ldr	r1, [pc, #188]	; (728 <_GLOBAL__sub_I_storage+0xcc>)
     66a:	mov	r0, r5
     66c:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     66e:	ldr	r3, [pc, #188]	; (72c <_GLOBAL__sub_I_storage+0xd0>)
     670:	str.w	r2, [r5, #176]	; 0xb0
     674:	str.w	r3, [r5, #168]	; 0xa8
     678:	str.w	r3, [r5, #248]	; 0xf8
     67c:	str.w	r3, [r5, #328]	; 0x148
     680:	mvn.w	r3, #1
        fsCount = 0;
     684:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     686:	str.w	r4, [r5, #172]	; 0xac
     68a:	strb.w	r4, [r5, #180]	; 0xb4
     68e:	strb.w	r4, [r5, #260]	; 0x104
     692:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     696:	str.w	r4, [r5, #416]	; 0x1a0
     69a:	strh.w	r4, [r5, #428]	; 0x1ac
     69e:	strd	r4, r2, [r5, #252]	; 0xfc
     6a2:	strd	r4, r2, [r5, #332]	; 0x14c
     6a6:	ldr	r2, [pc, #136]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6a8:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6ac:	strd	r4, r4, [r5, #240]	; 0xf0
     6b0:	strd	r4, r4, [r5, #320]	; 0x140
     6b4:	strd	r4, r4, [r5, #400]	; 0x190
     6b8:	strd	r4, r4, [r5, #408]	; 0x198
     6bc:	bl	b7b0 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6c0:	ldr	r3, [pc, #112]	; (734 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6c2:	ldr	r1, [pc, #116]	; (738 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     6c4:	mov	r0, r4
     6c6:	str	r5, [r3, #0]
     6c8:	add.w	r3, r3, #8192	; 0x2000
     6cc:	ldr	r2, [pc, #96]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6ce:	str.w	r4, [r3, #1056]	; 0x420
     6d2:	strb.w	r4, [r3, #1060]	; 0x424
     6d6:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     6da:	ldr	r3, [pc, #96]	; (73c <_GLOBAL__sub_I_storage+0xe0>)
     6dc:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     6e0:	ldr	r1, [pc, #92]	; (740 <_GLOBAL__sub_I_storage+0xe4>)
     6e2:	str.w	r4, [r3, #1152]	; 0x480
     6e6:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     6ea:	movs	r1, #7
     6ec:	str.w	r4, [r3, #1156]	; 0x484
     6f0:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     6f4:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     6f6:	str.w	r4, [r3, #1164]	; 0x48c
     6fa:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     6fe:	ldr	r1, [pc, #68]	; (744 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     700:	strh.w	r4, [r3, #1176]	; 0x498
     704:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     708:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     70c:	strb.w	r4, [r3, #1208]	; 0x4b8
     710:	strb.w	r4, [r3, #1224]	; 0x4c8
     714:	ldr	r1, [pc, #48]	; (748 <_GLOBAL__sub_I_storage+0xec>)
  }
     716:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     71a:	b.w	b7b0 <__aeabi_atexit>
     71e:	nop
     720:	.word	0x20027984
     724:	.word	0x20000444
     728:	.word	0x000001a5
     72c:	.word	0x20000548
     730:	.word	0x20008960
     734:	.word	0x20009300
     738:	.word	0x2000056c
     73c:	.word	0x200274b0
     740:	.word	0x003d0900
     744:	.word	0x200004b0
     748:	.word	0x0000006d

0000074c <setup>:
{
     74c:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     74e:	ldr	r5, [pc, #292]	; (874 <setup+0x128>)
     750:	sub	sp, #28
    set_arm_clock(48'000'000);
     752:	ldr	r0, [pc, #292]	; (878 <setup+0x12c>)
				if (elapsed > 750) break;
     754:	movw	r7, #750	; 0x2ee
     758:	bl	9c88 <set_arm_clock>
			if (usb_configuration) {
     75c:	ldr	r6, [pc, #284]	; (87c <setup+0x130>)
		uint32_t millis_begin = systick_millis_count;
     75e:	ldr	r4, [r5, #0]
		while (!(*this)) {
     760:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     764:	cbz	r0, 78c <setup+0x40>
  uint16_t *params=loadParameters();
     766:	bl	20c4 <loadParameters()>
  if(params[0]==1)
     76a:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     76c:	mov	r4, r0
  if(params[0]==1)
     76e:	cmp	r3, #1
     770:	beq.n	7a4 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     772:	movw	r6, #9999	; 0x270f
	return systick_millis_count;
     776:	ldr	r3, [r5, #0]
     778:	cmp	r3, r6
     77a:	bhi.n	7b8 <setup+0x6c>
     77c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     780:	cmp	r0, #0
     782:	beq.n	776 <setup+0x2a>
     784:	ldr	r3, [pc, #248]	; (880 <setup+0x134>)
     786:	movs	r2, #1
     788:	str	r2, [r3, #0]
     78a:	b.n	7b8 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     78c:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     78e:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     790:	subs	r3, r3, r4
			if (usb_configuration) {
     792:	cbz	r2, 7a0 <setup+0x54>
				if (elapsed > 2000) break;
     794:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     798:	bhi.n	766 <setup+0x1a>
			yield();
     79a:	bl	b280 <yield>
     79e:	b.n	760 <setup+0x14>
				if (elapsed > 750) break;
     7a0:	cmp	r3, r7
     7a2:	b.n	798 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7a4:	ldr	r3, [pc, #220]	; (884 <setup+0x138>)
     7a6:	ldr	r2, [pc, #224]	; (888 <setup+0x13c>)
     7a8:	ldr	r3, [r3, #0]
     7aa:	ldr	r2, [r2, #0]
     7ac:	cmp	r3, r2
     7ae:	ldr	r2, [pc, #208]	; (880 <setup+0x134>)
     7b0:	ite	hi
     7b2:	movhi	r3, #0
     7b4:	movls	r3, #1
     7b6:	str	r3, [r2, #0]
  while(millis()<10'000) if(Serial) { break;}
     7b8:	movw	r6, #9999	; 0x270f
     7bc:	ldr	r3, [r5, #0]
     7be:	cmp	r3, r6
     7c0:	bhi.n	7ca <setup+0x7e>
     7c2:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7c6:	cmp	r0, #0
     7c8:	beq.n	7bc <setup+0x70>
  Serial.println(version);
     7ca:	ldr	r1, [pc, #192]	; (88c <setup+0x140>)
     7cc:	ldr	r0, [pc, #192]	; (890 <setup+0x144>)
     7ce:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7d2:	ldr	r1, [pc, #192]	; (894 <setup+0x148>)
     7d4:	ldr	r0, [pc, #184]	; (890 <setup+0x144>)
     7d6:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     7da:	ldrh	r1, [r4, #0]
     7dc:	ldr	r0, [pc, #176]	; (890 <setup+0x144>)
     7de:	bl	b576 <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     7e2:	ldr	r0, [pc, #172]	; (890 <setup+0x144>)
     7e4:	bl	b588 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     7e8:	ldr	r0, [pc, #172]	; (898 <setup+0x14c>)
     7ea:	bl	16568 <___ZN16CrashReportClasscvbEv_veneer>
     7ee:	cbz	r0, 7f8 <setup+0xac>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     7f0:	ldr	r1, [pc, #156]	; (890 <setup+0x144>)
     7f2:	ldr	r0, [pc, #164]	; (898 <setup+0x14c>)
     7f4:	bl	16578 <___ZNK16CrashReportClass7printToER5Print_veneer>
  storage_configure();
     7f8:	bl	518 <storage_configure()>
  rtc_setup();
     7fc:	movs	r1, #19
     7fe:	movs	r0, #18
     800:	bl	3484 <rtc_setup(unsigned char, unsigned char)>
  Serial.println("rtc_setup() done");
     804:	ldr	r0, [pc, #136]	; (890 <setup+0x144>)
     806:	ldr	r1, [pc, #148]	; (89c <setup+0x150>)
     808:	bl	190 <Print::println(char const*) [clone .isra.0]>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     80c:	add	r0, sp, #16
     80e:	bl	3488 <rtc_get_datetime(datetime_t*)>
     812:	cbnz	r0, 81c <setup+0xd0>
     814:	ldr	r1, [pc, #136]	; (8a0 <setup+0x154>)
     816:	ldr	r0, [pc, #120]	; (890 <setup+0x144>)
     818:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     81c:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     820:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     822:	ldrsh.w	r2, [sp, #16]
     826:	str	r3, [sp, #12]
     828:	ldrsb.w	r3, [sp, #22]
     82c:	ldr	r1, [pc, #116]	; (8a4 <setup+0x158>)
     82e:	str	r3, [sp, #8]
     830:	ldrsb.w	r3, [sp, #21]
     834:	ldr	r0, [pc, #88]	; (890 <setup+0x144>)
     836:	str	r3, [sp, #4]
     838:	ldrsb.w	r3, [sp, #19]
     83c:	str	r3, [sp, #0]
     83e:	ldrsb.w	r3, [sp, #18]
     842:	bl	b5c0 <Print::printf(char const*, ...)>
                           t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     846:	ldr	r0, [pc, #72]	; (890 <setup+0x144>)
     848:	bl	b588 <Print::println()>
  Serial.println("filing_init");
     84c:	ldr	r1, [pc, #88]	; (8a8 <setup+0x15c>)
     84e:	ldr	r0, [pc, #64]	; (890 <setup+0x144>)
     850:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     854:	bl	2f74 <filing_init()>
  Serial.println("Setup done");
     858:	ldr	r1, [pc, #80]	; (8ac <setup+0x160>)
     85a:	ldr	r0, [pc, #52]	; (890 <setup+0x144>)
     85c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  setup_ready=1;
     860:	ldr	r3, [pc, #76]	; (8b0 <setup+0x164>)
     862:	str	r4, [r3, #0]
    setup1();
     864:	bl	45c <setup1()>
    pinMode(13,OUTPUT);
     868:	mov	r1, r4
     86a:	movs	r0, #13
     86c:	bl	ad94 <pinMode>
}
     870:	add	sp, #28
     872:	pop	{r4, r5, r6, r7, pc}
     874:	.word	0x20027b40
     878:	.word	0x02dc6c00
     87c:	.word	0x20027d2a
     880:	.word	0x20027b50
     884:	.word	0x20008f14
     888:	.word	0x20008f10
     88c:	.word	0x20007e26
     890:	.word	0x20008944
     894:	.word	0x20007f5d
     898:	.word	0x20008938
     89c:	.word	0x20007f6a
     8a0:	.word	0x20007f7b
     8a4:	.word	0x20007f90
     8a8:	.word	0x20007fb7
     8ac:	.word	0x20007fc3
     8b0:	.word	0x20027980

000008b4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8b4:	push	{r4, lr}
     8b6:	mov	r4, r0
		release();
     8b8:	bl	b3ec <DMAChannel::release()>
	}
     8bc:	mov	r0, r4
     8be:	pop	{r4, pc}

000008c0 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8c0:	push	{r3, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8c2:	ldr	r3, [pc, #140]	; (950 <acq_isr()+0x90>)
     8c4:	ldr	r2, [r3, #0]
     8c6:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8c8:	ldrb	r2, [r3, #4]
     8ca:	ldr	r3, [pc, #136]	; (954 <acq_isr()+0x94>)
     8cc:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8ce:	ldr	r2, [pc, #136]	; (958 <acq_isr()+0x98>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8d0:	sub.w	r3, r2, #1024	; 0x400
     8d4:	cmp	r1, r2
     8d6:	it	cc
     8d8:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8da:	mov	r1, r3
	asm("dsb");
     8dc:	dsb	sy
     8e0:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     8e4:	add.w	r2, r3, #1024	; 0x400
     8e8:	cmp	r2, r0
     8ea:	ite	cc
     8ec:	movcc	r2, #1
     8ee:	movcs	r2, #32
		SCB_CACHE_DCIMVAC = location;
     8f0:	mov.w	r0, #3758153728	; 0xe000e000
     8f4:	add.w	r2, r3, r2, lsl #5
     8f8:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     8fc:	adds	r1, #32
	} while (location < end_addr);
     8fe:	cmp	r1, r2
     900:	bne.n	8f8 <acq_isr()+0x38>
	asm("dsb");
     902:	dsb	sy
	asm("isb");
     906:	isb	sy
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     90a:	ldr	r1, [pc, #80]	; (95c <acq_isr()+0x9c>)
     90c:	ldr	r0, [pc, #80]	; (960 <acq_isr()+0xa0>)
     90e:	ldr	r2, [r1, #0]
     910:	adds	r2, #1
     912:	str	r2, [r1, #0]
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
     914:	movs	r2, #0
     916:	ldr.w	r1, [r3, r2, lsl #3]
     91a:	adds	r2, #1
     91c:	asrs	r1, r1, #8
     91e:	cmp	r2, #128	; 0x80
     920:	str.w	r1, [r0], #4
     924:	bne.n	916 <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     926:	ldr	r2, [pc, #60]	; (964 <acq_isr()+0xa4>)
     928:	ldrh	r3, [r2, #0]
     92a:	sxth	r3, r3
     92c:	cbnz	r3, 940 <acq_isr()+0x80>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     92e:	ldr	r0, [pc, #48]	; (960 <acq_isr()+0xa0>)
     930:	bl	25b4 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     934:	cbnz	r0, 93e <acq_isr()+0x7e>
     936:	ldr	r2, [pc, #48]	; (968 <acq_isr()+0xa8>)
     938:	ldr	r3, [r2, #0]
     93a:	adds	r3, #1
     93c:	str	r3, [r2, #0]
  }
     93e:	pop	{r3, pc}
  else if(proc==1)
     940:	ldrh	r3, [r2, #0]
     942:	sxth	r3, r3
     944:	cmp	r3, #1
     946:	bne.n	93e <acq_isr()+0x7e>
   if(!compress((void *)acqBuffer)) procMiss++;
     948:	ldr	r0, [pc, #20]	; (960 <acq_isr()+0xa0>)
     94a:	bl	3028 <compress(void*)>
     94e:	b.n	934 <acq_isr()+0x74>
     950:	.word	0x200265dc
     954:	.word	0x400e8000
     958:	.word	0x20200400
     95c:	.word	0x2002741c
     960:	.word	0x20027164
     964:	.word	0x20027b94
     968:	.word	0x20027420
     96c:	.word	0x00000000

00000970 <setAudioFrequency(int)>:
  {
     970:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     974:	ldr.w	r9, [pc, #332]	; ac4 <setAudioFrequency(int)+0x154>
     978:	movs	r2, #5
     97a:	mov	r5, r0
     97c:	ldr	r1, [pc, #312]	; (ab8 <setAudioFrequency(int)+0x148>)
     97e:	ldr.w	r3, [r9]
     982:	mov	r0, r9
     984:	ldr	r3, [r3, #4]
     986:	vpush	{d8}
     98a:	sub	sp, #12
     98c:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     98e:	movs	r1, #128	; 0x80
     990:	mov	r0, r9
     992:	bl	b576 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     996:	mov	r0, r9
     998:	bl	b588 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     99c:	movs	r3, #26
     99e:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a0:	ldr	r0, [pc, #280]	; (abc <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9a2:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a4:	mov	r2, r1
        n1=0;
     9a6:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a8:	mul.w	ip, r0, r3
        {   n1++; 
     9ac:	mov	r6, r4
     9ae:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9b0:	sdiv	r8, ip, r2
     9b4:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9b8:	cmp	r7, #64	; 0x40
     9ba:	ble.n	9c8 <setAudioFrequency(int)+0x58>
     9bc:	cmp	r4, #9
     9be:	add	r2, r1
     9c0:	bne.n	9ac <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     9c2:	cmp	r3, #54	; 0x36
     9c4:	bne.n	9a2 <setAudioFrequency(int)+0x32>
     9c6:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9c8:	mov	r2, r5
     9ca:	ldr	r1, [pc, #244]	; (ac0 <setAudioFrequency(int)+0x150>)
     9cc:	ldr	r0, [pc, #244]	; (ac4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9ce:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9d2:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9d4:	strd	r4, r7, [sp]
     9d8:	bl	b5c0 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9dc:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     9e0:	ldr.w	r3, [r9]
     9e4:	movs	r2, #3
     9e6:	vcvt.f64.s32	d7, s15
     9ea:	ldr	r1, [pc, #220]	; (ac8 <setAudioFrequency(int)+0x158>)
     9ec:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9ee:	and.w	r6, r6, #448	; 0x1c0
     9f2:	ldr	r0, [pc, #208]	; (ac4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9f4:	vldr	d6, [pc, #168]	; aa0 <setAudioFrequency(int)+0x130>
     9f8:	vmul.f64	d7, d7, d6
     9fc:	vmov	s13, r4
     a00:	vcvt.f64.s32	d6, s13
     a04:	vmul.f64	d7, d7, d6
     a08:	vmov	s13, r7
     a0c:	vcvt.f64.s32	d6, s13
     a10:	vmul.f64	d7, d7, d6
     a14:	vldr	d6, [pc, #144]	; aa8 <setAudioFrequency(int)+0x138>
     a18:	vdiv.f64	d8, d7, d6
     a1c:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a1e:	movs	r1, #2
     a20:	ldr	r0, [pc, #160]	; (ac4 <setAudioFrequency(int)+0x154>)
     a22:	vmov.f64	d0, d8
     a26:	bl	b680 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a2a:	ldr	r0, [pc, #152]	; (ac4 <setAudioFrequency(int)+0x154>)
     a2c:	bl	b588 <Print::println()>
    int c0 = C;
     a30:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a34:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a38:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a3c:	mul.w	r3, r2, r0
     a40:	vmov	s14, r3
     a44:	vldr	d6, [pc, #104]	; ab0 <setAudioFrequency(int)+0x140>
     a48:	vcvt.f64.s32	d7, s14
     a4c:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a50:	vcvt.s32.f64	s15, d7
     a54:	vmov	r1, s15
     a58:	bl	16570 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a5c:	ldr	r2, [pc, #108]	; (acc <setAudioFrequency(int)+0x15c>)
     a5e:	ldr	r3, [r2, #28]
     a60:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a64:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a68:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a6a:	ldr	r3, [r2, #40]	; 0x28
     a6c:	bic.w	r3, r3, #510	; 0x1fe
     a70:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a74:	orr.w	r3, r3, r8
     a78:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a7a:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a7c:	sub.w	r2, r2, #327680	; 0x50000
     a80:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     a82:	bic.w	r3, r3, #524288	; 0x80000
     a86:	bic.w	r3, r3, #7
     a8a:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a8e:	str	r3, [r2, #4]
  }
     a90:	add	sp, #12
     a92:	vpop	{d8}
     a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a9a:	nop
     a9c:	nop.w
     aa0:	.word	0x00000000
     aa4:	.word	0x40600000
     aa8:	.word	0x00000000
     aac:	.word	0x4176e360
     ab0:	.word	0x00000000
     ab4:	.word	0x40c38800
     ab8:	.word	0x20007b99
     abc:	.word	0x016e3600
     ac0:	.word	0x20007b9f
     ac4:	.word	0x20008944
     ac8:	.word	0x20007bbc
     acc:	.word	0x400fc000

00000ad0 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ad0:	ldr	r2, [pc, #100]	; (b38 <i2s_setup()+0x68>)
     ad2:	ldr	r3, [r2, #124]	; 0x7c
  {
     ad4:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ad6:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ada:	ldr	r4, [pc, #96]	; (b3c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     adc:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ade:	ldr.w	r3, [r4, #136]	; 0x88
     ae2:	cmp	r3, #0
     ae4:	blt.n	b36 <i2s_setup()+0x66>
    int fs = fsamp;
     ae6:	ldr	r3, [pc, #88]	; (b40 <i2s_setup()+0x70>)
     ae8:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     aea:	bl	970 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     aee:	ldr	r3, [pc, #84]	; (b44 <i2s_setup()+0x74>)
     af0:	movs	r2, #3
     af2:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     af6:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     afa:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     afe:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b02:	movs	r2, #2
     b04:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b08:	movs	r3, #0
     b0a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b0e:	movs	r3, #4
     b10:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b14:	mov.w	r3, #83886080	; 0x5000000
     b18:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b1c:	mov.w	r3, #65536	; 0x10000
     b20:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b24:	ldr	r3, [pc, #32]	; (b48 <i2s_setup()+0x78>)
     b26:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b2a:	ldr	r3, [pc, #32]	; (b4c <i2s_setup()+0x7c>)
     b2c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b30:	ldr	r3, [pc, #28]	; (b50 <i2s_setup()+0x80>)
     b32:	str.w	r3, [r4, #136]	; 0x88
  }
     b36:	pop	{r4, pc}
     b38:	.word	0x400fc000
     b3c:	.word	0x40384000
     b40:	.word	0x20008ef0
     b44:	.word	0x401f8000
     b48:	.word	0x00011f1b
     b4c:	.word	0x1f1f1f00
     b50:	.word	0x92000001

00000b54 <dma_setup()>:
  {
     b54:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b56:	ldr	r4, [pc, #128]	; (bd8 <dma_setup()+0x84>)
     b58:	movs	r1, #1
     b5a:	mov	r0, r4
     b5c:	bl	b350 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b60:	ldr	r3, [r4, #0]
     b62:	ldr	r2, [pc, #120]	; (bdc <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b64:	ldr	r1, [pc, #120]	; (be0 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b66:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b68:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b6a:	ldr	r0, [pc, #120]	; (be4 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b6c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b6e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b70:	ldr	r0, [pc, #116]	; (be8 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b72:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b76:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     b7a:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b7c:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b7e:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     b82:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b84:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     b86:	ldrh	r2, [r3, #22]
     b88:	uxth	r2, r2
     b8a:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     b8c:	movs	r2, #6
     b8e:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b90:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     b92:	ldr	r2, [pc, #88]	; (bec <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b94:	lsls	r3, r3, #2
     b96:	add.w	r3, r3, #1073741824	; 0x40000000
     b9a:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     b9e:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     ba0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     ba2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ba4:	ldr	r2, [pc, #72]	; (bf0 <dma_setup()+0x9c>)
     ba6:	add.w	r1, r3, #16
     baa:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bae:	asrs	r2, r3, #5
     bb0:	and.w	r0, r3, #31
     bb4:	movs	r1, #1
     bb6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bba:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bbe:	lsls	r1, r0
     bc0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bc2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bc6:	lsls	r2, r2, #2
     bc8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bca:	movs	r2, #96	; 0x60
     bcc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bce:	ldr	r3, [pc, #36]	; (bf4 <dma_setup()+0xa0>)
     bd0:	ldrb	r2, [r4, #4]
     bd2:	strb	r2, [r3, #27]
  }
     bd4:	pop	{r4, pc}
     bd6:	nop
     bd8:	.word	0x200265dc
     bdc:	.word	0x403840a0
     be0:	.word	0x02020000
     be4:	.word	0x20200000
     be8:	.word	0x000008c1
     bec:	.word	0x80000013
     bf0:	.word	0x20009000
     bf4:	.word	0x400e8000

00000bf8 <acqModifyFrequency(unsigned long)>:
  {
     bf8:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     bfa:	ldr	r4, [pc, #32]	; (c1c <acqModifyFrequency(unsigned long)+0x24>)
     bfc:	ldr.w	r3, [r4, #136]	; 0x88
     c00:	bic.w	r3, r3, #2415919104	; 0x90000000
     c04:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c08:	bl	970 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c0c:	ldr.w	r3, [r4, #136]	; 0x88
     c10:	orr.w	r3, r3, #2415919104	; 0x90000000
     c14:	str.w	r3, [r4, #136]	; 0x88
  }
     c18:	pop	{r4, pc}
     c1a:	nop
     c1c:	.word	0x40384000

00000c20 <_GLOBAL__sub_I_procCount>:
		begin();
     c20:	ldr	r0, [pc, #20]	; (c38 <_GLOBAL__sub_I_procCount+0x18>)
     c22:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c24:	push	{r3, lr}
     c26:	bl	b350 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c2a:	ldr	r2, [pc, #16]	; (c3c <_GLOBAL__sub_I_procCount+0x1c>)
     c2c:	ldr	r1, [pc, #16]	; (c40 <_GLOBAL__sub_I_procCount+0x20>)
     c2e:	ldr	r0, [pc, #8]	; (c38 <_GLOBAL__sub_I_procCount+0x18>)
}
     c30:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c34:	b.w	b7b0 <__aeabi_atexit>
     c38:	.word	0x200265dc
     c3c:	.word	0x20008960
     c40:	.word	0x000008b5

00000c44 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c44:	ldr	r3, [r0, #4]
     c46:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c48:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c4a:	bgt.n	c58 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c4c:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c50:	adds	r3, #1
          sd_name[fsCount] = name;
     c52:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c54:	str	r3, [r0, #4]
     c56:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c58:	pop	{r4, pc}

00000c5a <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c5a:	ldr	r0, [r0, #4]
     c5c:	bx	lr

00000c5e <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c5e:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c62:	ldr	r0, [r1, #8]
     c64:	bx	lr

00000c66 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c66:	movs	r0, #0
     c68:	bx	lr

00000c6a <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c6a:	movs	r0, #1
     c6c:	bx	lr

00000c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c6e:	push	{r4}
    *name = 0;
     c70:	movs	r4, #0
     c72:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c74:	ldr	r3, [r0, #56]	; 0x38
     c76:	cbz	r3, c82 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     c78:	mov	r0, r3
  }
     c7a:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     c7e:	b.w	620c <FatFile::getName(char*, unsigned int)>
     c82:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     c84:	cbz	r0, c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     c86:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     c8a:	b.w	4b10 <ExFatFile::getName8(char*, unsigned int)>
     c8e:	ldr.w	r4, [sp], #4
     c92:	bx	lr

00000c94 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     c94:	push	{r4, lr}
     c96:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     c98:	movs	r3, #0
     c9a:	movs	r2, #10
     c9c:	bl	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ca0:	mov	r0, r4
     ca2:	ldmia.w	sp!, {r4, lr}
     ca6:	b.w	b588 <Print::println()>

00000caa <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     caa:	push	{r0, r1, r4, lr}
     cac:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cae:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cb0:	cbz	r1, cca <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     cb2:	str	r1, [sp, #4]
     cb4:	bl	e100 <strlen>
     cb8:	ldr	r3, [r4, #0]
     cba:	mov	r2, r0
     cbc:	ldr	r1, [sp, #4]
     cbe:	mov	r0, r4
     cc0:	ldr	r3, [r3, #4]
     cc2:	add	sp, #8
     cc4:	ldmia.w	sp!, {r4, lr}
     cc8:	bx	r3
     cca:	add	sp, #8
     ccc:	pop	{r4, pc}
	...

00000cd0 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cd0:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cd2:	ldr	r4, [pc, #44]	; (d00 <dbgPrint(unsigned short)+0x30>)
     cd4:	mov	r5, r0
     cd6:	ldr	r1, [pc, #44]	; (d04 <dbgPrint(unsigned short)+0x34>)
     cd8:	mov	r0, r4
     cda:	bl	caa <Print::write(char const*)>
     cde:	ldr	r1, [pc, #40]	; (d08 <dbgPrint(unsigned short)+0x38>)
     ce0:	mov	r0, r4
     ce2:	bl	caa <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ce6:	movs	r0, #46	; 0x2e
     ce8:	bl	9b90 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     cec:	mov	r1, r5
     cee:	mov	r0, r4
     cf0:	bl	b576 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     cf4:	mov	r0, r4
  }
     cf6:	ldmia.w	sp!, {r3, r4, r5, lr}
     cfa:	b.w	b588 <Print::println()>
     cfe:	nop
     d00:	.word	0x20008944
     d04:	.word	0x20007e74
     d08:	.word	0x20007e7f

00000d0c <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d0c:	push	{r3, r4, r5, lr}
     d0e:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d10:	bl	caa <Print::write(char const*)>
     d14:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d16:	mov	r0, r5
     d18:	bl	b588 <Print::println()>
     d1c:	add	r0, r4
     d1e:	pop	{r3, r4, r5, pc}

00000d20 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d20:	ldr.w	r3, [r0, #1152]	; 0x480
     d24:	cbz	r3, d32 <FsVolume::bytesPerCluster() const+0x12>
     d26:	ldrb	r3, [r3, #6]
     d28:	mov.w	r0, #512	; 0x200
     d2c:	lsls	r0, r3
     d2e:	uxth	r0, r0
     d30:	bx	lr
     d32:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d36:	cbz	r0, d3c <FsVolume::bytesPerCluster() const+0x1c>
     d38:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d3c:	bx	lr

00000d3e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d3e:	ldr.w	r3, [r0, #1152]	; 0x480
     d42:	cbz	r3, d4a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d44:	ldr	r0, [r3, #28]
     d46:	subs	r0, #1
     d48:	bx	lr
     d4a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d4e:	cbz	r0, d54 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d50:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d54:	bx	lr

00000d56 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d56:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d5a:	push	{r3, r4, r5, lr}
     d5c:	ldr	r5, [r1, #88]	; 0x58
     d5e:	mov	r0, r5
     d60:	bl	d3e <FsVolume::clusterCount() const>
     d64:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d66:	mov	r0, r5
     d68:	bl	d20 <FsVolume::bytesPerCluster() const>
     d6c:	umull	r0, r1, r4, r0
     d70:	pop	{r3, r4, r5, pc}

00000d72 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d72:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d76:	push	{r4, r5, lr}
     d78:	mov	r5, r1
     d7a:	sub	sp, #68	; 0x44
     d7c:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d7e:	cbz	r3, da4 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     d80:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     d82:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     d86:	add	r0, sp, #8
     d88:	mov	r3, r2
     d8a:	str	r2, [sp, #8]
     d8c:	mov	r2, r5
     d8e:	str	r1, [sp, #4]
     d90:	bl	6828 <FatFile::open(FatFile*, char const*, int)>
     d94:	ldr	r1, [sp, #4]
     d96:	cbz	r0, da0 <FsVolume::rename(char const*, char const*)+0x2e>
     d98:	mov	r2, r4
     d9a:	add	r0, sp, #8
     d9c:	bl	6a72 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     da0:	add	sp, #68	; 0x44
     da2:	pop	{r4, r5, pc}
     da4:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     da8:	cmp	r0, #0
     daa:	beq.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     dac:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     db0:	mov	r2, r5
     db2:	add	r0, sp, #8
  ExFatFile() {}
     db4:	str	r3, [sp, #56]	; 0x38
     db6:	str	r1, [sp, #4]
     db8:	bl	52f4 <ExFatFile::open(ExFatFile*, char const*, int)>
     dbc:	ldr	r1, [sp, #4]
     dbe:	cbnz	r0, dc4 <FsVolume::rename(char const*, char const*)+0x52>
     dc0:	movs	r0, #0
     dc2:	b.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>
     dc4:	mov	r2, r4
     dc6:	add	r0, sp, #8
     dc8:	bl	5cf0 <ExFatFile::rename(ExFatFile*, char const*)>
     dcc:	cmp	r0, #0
     dce:	beq.n	dc0 <FsVolume::rename(char const*, char const*)+0x4e>
     dd0:	b.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>

00000dd2 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     dd2:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     dd4:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     dd6:	cbz	r3, df0 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     dd8:	ldrb	r0, [r3, #0]
     dda:	ands.w	r0, r0, #8
     dde:	ittt	ne
     de0:	ldrne	r0, [r3, #28]
     de2:	ldrne	r3, [r3, #20]
     de4:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     de6:	cmp	r0, #0
     de8:	it	lt
     dea:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     dee:	pop	{r4, pc}
     df0:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     df2:	cmp	r0, #0
     df4:	beq.n	dee <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     df6:	ldrb.w	r3, [r0, #49]	; 0x31
     dfa:	ands.w	r3, r3, #8
     dfe:	beq.n	e1e <FsBaseFile::available() const+0x4c>
     e00:	ldrd	r1, r3, [r0, #16]
     e04:	ldrd	r2, r4, [r0]
     e08:	subs	r0, r1, r2
     e0a:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e0e:	cmp.w	r0, #2147483648	; 0x80000000
     e12:	sbcs.w	r3, r3, #0
     e16:	it	cs
     e18:	mvncs.w	r0, #2147483648	; 0x80000000
     e1c:	b.n	dee <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e1e:	mov	r0, r3
     e20:	b.n	e0e <FsBaseFile::available() const+0x3c>

00000e22 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e22:	ldr	r3, [r0, #56]	; 0x38
     e24:	cbz	r3, e34 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e26:	ldrb	r3, [r3, #0]
     e28:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e2c:	ite	ne
     e2e:	movne	r0, #1
     e30:	moveq	r0, #0
  }
     e32:	bx	lr
     e34:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e36:	cmp	r0, #0
     e38:	beq.n	e32 <FsBaseFile::isDir() const+0x10>
     e3a:	ldrb.w	r3, [r0, #49]	; 0x31
     e3e:	tst.w	r3, #80	; 0x50
     e42:	b.n	e2c <FsBaseFile::isDir() const+0xa>

00000e44 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e44:	ldr	r3, [r0, #56]	; 0x38
     e46:	cbnz	r3, e52 <FsBaseFile::isOpen() const+0xe>
     e48:	ldr	r0, [r0, #60]	; 0x3c
     e4a:	subs	r0, #0
     e4c:	it	ne
     e4e:	movne	r0, #1
     e50:	bx	lr
     e52:	movs	r0, #1
     e54:	bx	lr

00000e56 <MTPStorage_SD::CloseIndex()>:
  {
     e56:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e58:	add.w	r5, r0, #184	; 0xb8
  {
     e5c:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e5e:	mov	r0, r5
     e60:	bl	e44 <FsBaseFile::isOpen() const>
     e64:	cbz	r0, e6c <MTPStorage_SD::CloseIndex()+0x16>
     e66:	mov	r0, r5
     e68:	bl	7984 <FsBaseFile::close()>
    index_generated = false;
     e6c:	movs	r3, #0
     e6e:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     e72:	str.w	r3, [r4, #424]	; 0x1a8
  }
     e76:	pop	{r3, r4, r5, pc}

00000e78 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     e78:	ldr	r3, [r0, #56]	; 0x38
     e7a:	cbz	r3, e82 <FsBaseFile::read(void*, unsigned int)+0xa>
     e7c:	mov	r0, r3
     e7e:	b.w	6364 <FatFile::read(void*, unsigned int)>
     e82:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     e84:	cbz	r0, e8a <FsBaseFile::read(void*, unsigned int)+0x12>
     e86:	b.w	4d14 <ExFatFile::read(void*, unsigned int)>
  }
     e8a:	mov.w	r0, #4294967295
     e8e:	bx	lr

00000e90 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     e90:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e92:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     e94:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e96:	cbz	r5, ea2 <FsBaseFile::seekSet(unsigned long long)+0x12>
     e98:	cbnz	r3, eac <FsBaseFile::seekSet(unsigned long long)+0x1c>
     e9a:	mov	r0, r5
  }
     e9c:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e9e:	b.w	654e <FatFile::seekSet(unsigned long)>
     ea2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ea4:	cbz	r0, eac <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     ea6:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     ea8:	b.w	4ec4 <ExFatFile::seekSet(unsigned long long)>
  }
     eac:	movs	r0, #0
     eae:	pop	{r4, r5}
     eb0:	bx	lr

00000eb2 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     eb2:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     eb4:	add.w	r0, r0, #264	; 0x108
     eb8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     ebc:	pop	{r3, pc}
	...

00000ec0 <FsFile::FsFile()>:
     ec0:	movs	r2, #0
     ec2:	mov.w	r1, #1000	; 0x3e8
     ec6:	strb	r2, [r0, #12]
     ec8:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     ecc:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ed0:	ldr	r2, [pc, #4]	; (ed8 <FsFile::FsFile()+0x18>)
     ed2:	str	r2, [r0, #0]
     ed4:	bx	lr
     ed6:	nop
     ed8:	.word	0x20000548

00000edc <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     edc:	ldr	r3, [pc, #16]	; (ef0 <FsFile::~FsFile()+0x14>)
     ede:	push	{r4, lr}
     ee0:	mov	r4, r0
     ee2:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     ee6:	bl	7984 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     eea:	mov	r0, r4
     eec:	pop	{r4, pc}
     eee:	nop
     ef0:	.word	0x20000420

00000ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     ef4:	add.w	r1, r0, r1, lsl #2
     ef8:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     efa:	ldr.w	r1, [r3, #1152]	; 0x480
     efe:	push	{lr}
     f00:	sub	sp, #60	; 0x3c
     f02:	cbz	r1, f1a <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f04:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f06:	add.w	r1, r1, #1096	; 0x448
     f0a:	mov	r0, sp
     f0c:	str	r3, [sp, #0]
     f0e:	movs	r3, #1
     f10:	bl	69ce <FatFile::mkdir(FatFile*, char const*, bool)>
     f14:	add	sp, #60	; 0x3c
     f16:	ldr.w	pc, [sp], #4
     f1a:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f1e:	cmp	r0, #0
     f20:	beq.n	f14 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f22:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f24:	movs	r3, #1
     f26:	add.w	r1, r0, #1096	; 0x448
     f2a:	mov	r0, sp
     f2c:	bl	5c32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f30:	b.n	f14 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f34 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f34:	push	{r4, r5, lr}
     f36:	mov	r4, r0
     f38:	sub	sp, #68	; 0x44
     f3a:	mov	r5, r1
     f3c:	ldr	r0, [pc, #84]	; (f94 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f3e:	mov	r1, r2
     f40:	str	r2, [sp, #4]
     f42:	bl	d0c <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f46:	ldr	r2, [sp, #4]
     f48:	add.w	r1, r4, r5, lsl #2
     f4c:	ldr	r3, [r1, #84]	; 0x54
     f4e:	ldr.w	r1, [r3, #1152]	; 0x480
     f52:	cbz	r1, f6c <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f54:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f56:	add	r0, sp, #8
     f58:	str	r3, [sp, #8]
     f5a:	movs	r3, #1
     f5c:	bl	68c6 <FatFile::open(FatVolume*, char const*, int)>
     f60:	cbz	r0, f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f62:	add	r0, sp, #8
     f64:	bl	78cc <FatFile::remove()>
     f68:	add	sp, #68	; 0x44
     f6a:	pop	{r4, r5, pc}
     f6c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     f70:	cmp	r0, #0
     f72:	beq.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f74:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f76:	movs	r3, #1
     f78:	mov	r1, r0
     f7a:	add	r0, sp, #8
     f7c:	bl	53ba <ExFatFile::open(ExFatVolume*, char const*, int)>
     f80:	cbnz	r0, f86 <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     f82:	movs	r0, #0
     f84:	b.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f86:	add	r0, sp, #8
     f88:	bl	5938 <ExFatFile::remove()>
     f8c:	cmp	r0, #0
     f8e:	beq.n	f82 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     f90:	b.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f92:	nop
     f94:	.word	0x20008944

00000f98 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     f98:	add.w	r1, r0, r1, lsl #2
     f9c:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     f9e:	ldr.w	r1, [r3, #1152]	; 0x480
     fa2:	push	{lr}
     fa4:	sub	sp, #60	; 0x3c
     fa6:	cbz	r1, fc0 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fa8:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     faa:	mov	r0, sp
     fac:	str	r3, [sp, #0]
     fae:	bl	68c6 <FatFile::open(FatVolume*, char const*, int)>
     fb2:	cbz	r0, fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fb4:	mov	r0, sp
     fb6:	bl	65ee <FatFile::rmdir()>
     fba:	add	sp, #60	; 0x3c
     fbc:	ldr.w	pc, [sp], #4
     fc0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     fc4:	cmp	r0, #0
     fc6:	beq.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fc8:	mov	r3, r1
     fca:	str	r1, [sp, #48]	; 0x30
     fcc:	mov	r1, r0
     fce:	mov	r0, sp
     fd0:	bl	53ba <ExFatFile::open(ExFatVolume*, char const*, int)>
     fd4:	cbnz	r0, fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
     fd6:	movs	r0, #0
     fd8:	b.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fda:	mov	r0, sp
     fdc:	bl	59c4 <ExFatFile::rmdir()>
     fe0:	cmp	r0, #0
     fe2:	beq.n	fd6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
     fe4:	b.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00000fe8 <MTPStorage_SD::OpenIndex()>:
  { 
     fe8:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
     fea:	add.w	r5, r0, #184	; 0xb8
  { 
     fee:	sub	sp, #84	; 0x54
     ff0:	mov	r4, r0
    if(index_.isOpen()) return; // only once
     ff2:	mov	r0, r5
     ff4:	bl	e44 <FsBaseFile::isOpen() const>
     ff8:	cbnz	r0, 103a <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
     ffa:	ldr	r2, [pc, #68]	; (1040 <MTPStorage_SD::OpenIndex()+0x58>)
     ffc:	movw	r3, #514	; 0x202
    1000:	ldr	r1, [r4, #88]	; 0x58
    1002:	mov	r0, sp
    1004:	bl	7bb8 <FsVolume::open(char const*, int)>
class Print
    1008:	ldr	r3, [sp, #4]
    100a:	add	r1, sp, #16
    100c:	mov	r0, r5
    100e:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1012:	ldr	r3, [sp, #8]
    1014:	str.w	r3, [r4, #176]	; 0xb0
    1018:	ldrb.w	r3, [sp, #12]
    101c:	strb.w	r3, [r4, #180]	; 0xb4
    1020:	bl	79ae <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    1024:	mov	r0, sp
    1026:	bl	edc <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    102a:	mov	r0, r5
    102c:	bl	e44 <FsBaseFile::isOpen() const>
    1030:	cbnz	r0, 103a <MTPStorage_SD::OpenIndex()+0x52>
    1032:	ldr	r1, [pc, #16]	; (1044 <MTPStorage_SD::OpenIndex()+0x5c>)
    1034:	ldr	r0, [pc, #16]	; (1048 <MTPStorage_SD::OpenIndex()+0x60>)
    1036:	bl	d0c <Print::println(char const*)>
  }
    103a:	add	sp, #84	; 0x54
    103c:	pop	{r4, r5, pc}
    103e:	nop
    1040:	.word	0x20007e9d
    1044:	.word	0x20007eab
    1048:	.word	0x20008944

0000104c <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    104c:	push	{r4, lr}
    104e:	mov	r4, r0
    if(!index_.isOpen()) return;
    1050:	adds	r0, #184	; 0xb8
    1052:	bl	e44 <FsBaseFile::isOpen() const>
    1056:	cbz	r0, 1078 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1058:	ldr	r3, [r4, #0]
    105a:	mov	r0, r4
    105c:	ldr	r3, [r3, #64]	; 0x40
    105e:	blx	r3
    all_scanned_ = false;
    1060:	movs	r3, #0
    OpenIndex();
    1062:	mov	r0, r4
    all_scanned_ = false;
    1064:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    1068:	mvn.w	r3, #1
    106c:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1070:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    1074:	b.w	fe8 <MTPStorage_SD::OpenIndex()>
  }
    1078:	pop	{r4, pc}

0000107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    107a:	push	{r0, r1, r4, r5, r6, lr}
    107c:	mov	r4, r0
    107e:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    1080:	mov.w	r6, #272	; 0x110
  { OpenIndex();
    1084:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    1086:	adds	r4, #184	; 0xb8
  { OpenIndex();
    1088:	bl	fe8 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    108c:	mul.w	r2, r6, r5
    1090:	movs	r3, #0
    1092:	mov	r0, r4
    1094:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    1098:	mov	r2, r6
    109a:	ldr	r1, [sp, #4]
    109c:	mov	r0, r4
    109e:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10a2:	add	sp, #8
    10a4:	pop	{r4, r5, r6, pc}

000010a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10a6:	push	{r4, lr}
    10a8:	ldr.w	r4, [r0, #424]	; 0x1a8
    10ac:	mov	r2, r1
    10ae:	adds	r1, r4, #1
    10b0:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10b4:	mov	r1, r4
    10b6:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10ba:	mov	r0, r4
    10bc:	pop	{r4, pc}
	...

000010c0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10c0:	movs	r3, #1
    sd_remove(0,indexFile);
    10c2:	ldr	r2, [pc, #88]	; (111c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10c4:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10c6:	push	{r4, r5, r6, r7, lr}
    10c8:	mov	r4, r0
    index_generated = true;
    10ca:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10ce:	sub	sp, #276	; 0x114
    sd_remove(0,indexFile);
    10d0:	adds	r0, #4
    10d2:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    10d6:	movs	r5, #0
    num_storage = sd_getFSCount();
    10d8:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    10da:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    10de:	ldr	r7, [pc, #64]	; (1120 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    10e0:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    10e4:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    10e8:	ldr.w	r3, [r4, #408]	; 0x198
    10ec:	cmp	r5, r3
    10ee:	blt.n	10f4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    10f0:	add	sp, #276	; 0x114
    10f2:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    10f4:	movs	r3, #0
      strcpy(r.name, "/");
    10f6:	mov	r1, r7
    10f8:	add	r0, sp, #16
      r.store = ii; // 
    10fa:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    10fe:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1100:	adds	r5, #1
      r.sibling = 0;
    1102:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    1106:	movs	r3, #1
    1108:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    110c:	bl	df7c <strcpy>
      AppendIndexRecord(r);
    1110:	mov	r1, sp
    1112:	mov	r0, r4
    1114:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1118:	b.n	10e8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    111a:	nop
    111c:	.word	0x20007e9d
    1120:	.word	0x20007b97

00001124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1124:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    1126:	mov.w	r7, #272	; 0x110
  {
    112a:	mov	r4, r1
    112c:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    112e:	movs	r1, #0
    1130:	mov	r2, r7
  {
    1132:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1134:	bl	9444 <memset>
    if (i > index_entries_) 
    1138:	ldr.w	r3, [r4, #424]	; 0x1a8
    113c:	cmp	r3, r6
    113e:	bcc.n	115e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1140:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1142:	adds	r4, #184	; 0xb8
    OpenIndex();
    1144:	bl	fe8 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1148:	mul.w	r2, r7, r6
    114c:	movs	r3, #0
    114e:	mov	r0, r4
    1150:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1154:	mov	r2, r7
    1156:	mov	r1, r5
    1158:	mov	r0, r4
    115a:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
  }
    115e:	mov	r0, r5
    1160:	pop	{r3, r4, r5, r6, r7, pc}

00001162 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    1162:	push	{r4, r5, lr}
    1164:	mov	r4, r0
    1166:	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    1168:	ldr.w	r5, [r4, #432]	; 0x1b0
    116c:	cbz	r5, 118c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    116e:	mov	r2, r5
    1170:	mov	r1, r4
    1172:	mov	r0, sp
    1174:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1178:	ldrb.w	r3, [r4, #436]	; 0x1b4
    117c:	cbz	r3, 1192 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    117e:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    1180:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    1184:	ldrb.w	r3, [sp, #16]
    1188:	cmp	r3, #0
    118a:	beq.n	1168 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    118c:	mov	r0, r5
    118e:	add	sp, #276	; 0x114
    1190:	pop	{r4, r5, pc}
      { next_++;
    1192:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    1196:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    119a:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    119c:	cmp	r1, r2
    119e:	it	cc
    11a0:	movcc	r3, r1
    11a2:	b.n	1180 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011a4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    11a4:	push	{r4, r5, lr}
    11a6:	sub	sp, #276	; 0x114
    11a8:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11aa:	mov	r2, r1
    11ac:	mov	r1, r0
    11ae:	mov	r0, sp
  {
    11b0:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11b2:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11b6:	add	r1, sp, #16
    11b8:	mov	r0, r5
    11ba:	bl	df7c <strcpy>
    *parent = r.parent;
    11be:	ldr	r3, [sp, #288]	; 0x120
    11c0:	ldr	r2, [sp, #0]
    11c2:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11c4:	ldrb.w	r3, [sp, #12]
    11c8:	cbnz	r3, 11da <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    11ca:	ldr	r3, [sp, #4]
    11cc:	str	r3, [r4, #0]
    *store = r.store;
    11ce:	ldrh.w	r2, [sp, #14]
    11d2:	ldr	r3, [sp, #292]	; 0x124
    11d4:	strh	r2, [r3, #0]
  }
    11d6:	add	sp, #276	; 0x114
    11d8:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11da:	mov.w	r3, #4294967295
    11de:	b.n	11cc <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

000011e0 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    11e0:	push	{lr}
    11e2:	sub	sp, #276	; 0x114
    11e4:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    11e6:	mov	r1, r0
    11e8:	mov	r0, sp
    11ea:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    11ee:	ldr	r0, [sp, #4]
    11f0:	add	sp, #276	; 0x114
    11f2:	ldr.w	pc, [sp], #4

000011f6 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    11f6:	ldr.w	r3, [r0, #320]	; 0x140
  {
    11fa:	push	{r4, r5, lr}
    11fc:	mov	r4, r0
    11fe:	sub	sp, #276	; 0x114
    1200:	cbz	r3, 1232 <MTPStorage_SD::close()+0x3c>
    1202:	ldr	r5, [r3, #28]
    file_.close();
    1204:	add.w	r0, r4, #264	; 0x108
    1208:	bl	7984 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    120c:	ldr.w	r2, [r4, #420]	; 0x1a4
    1210:	mov	r1, r4
    1212:	mov	r0, sp
    1214:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    1218:	mov	r2, sp
    121a:	ldr.w	r1, [r4, #420]	; 0x1a4
    121e:	mov	r0, r4
    uint32_t size = (uint32_t) file_.size();
    1220:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1222:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1226:	mvn.w	r3, #1
    122a:	str.w	r3, [r4, #420]	; 0x1a4
  }
    122e:	add	sp, #276	; 0x114
    1230:	pop	{r4, r5, pc}
    1232:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1236:	cmp	r5, #0
    1238:	beq.n	1204 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    123a:	ldr	r5, [r5, #16]
    123c:	b.n	1204 <MTPStorage_SD::close()+0xe>
	...

00001240 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1240:	push	{r4, r5, r6, lr}
    1242:	sub	sp, #272	; 0x110
    1244:	mov	r6, r0
    1246:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1248:	mov	r2, r1
    124a:	mov	r1, r0
    124c:	mov	r0, sp
  {
    124e:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1250:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1254:	ldr	r1, [sp, #0]
    1256:	adds	r3, r1, #1
    1258:	bne.n	126a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    125a:	ldr	r1, [pc, #64]	; (129c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    125c:	mov	r0, r4
    125e:	bl	df7c <strcpy>
      return tmp.store;
    1262:	ldrh.w	r0, [sp, #14]
  }
    1266:	add	sp, #272	; 0x110
    1268:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    126a:	mov	r3, r5
    126c:	mov	r2, r4
    126e:	mov	r0, r6
    1270:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1274:	mov	r0, r4
    1276:	bl	e100 <strlen>
    127a:	add	r0, r4
    127c:	ldrb.w	r3, [r0, #-1]
    1280:	cmp	r3, #47	; 0x2f
    1282:	beq.n	128e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1284:	mov	r2, r5
    1286:	ldr	r1, [pc, #20]	; (129c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1288:	mov	r0, r4
    128a:	bl	d9b8 <strlcat>
      strlcat(out, tmp.name,len);
    128e:	mov	r2, r5
    1290:	add	r1, sp, #16
    1292:	mov	r0, r4
    1294:	bl	d9b8 <strlcat>
    1298:	b.n	1262 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    129a:	nop
    129c:	.word	0x20007b97

000012a0 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    12a0:	push	{r4, r5, r6, r7, lr}
    12a2:	subw	sp, sp, #1044	; 0x414
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12a6:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    12aa:	mov	r4, r0
    12ac:	mov	r5, r1
    12ae:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12b0:	mov	r2, sp
    12b2:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    12b6:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12b8:	mov	r6, r0
    Serial.println(oldName);
    12ba:	ldr	r0, [pc, #120]	; (1334 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    12bc:	bl	d0c <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    12c0:	mov	r2, r5
    12c2:	mov	r1, r4
    12c4:	add	r0, sp, #768	; 0x300
    12c6:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    12ca:	mov.w	r2, #256	; 0x100
    12ce:	add	r1, sp, #784	; 0x310
    12d0:	add	r0, sp, #512	; 0x200
    12d2:	bl	da20 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    12d6:	mov.w	r2, #256	; 0x100
    12da:	mov	r1, r7
    12dc:	add	r0, sp, #784	; 0x310
    12de:	bl	da20 <strlcpy>
    WriteIndexRecord(handle, p1);
    12e2:	add	r2, sp, #768	; 0x300
    12e4:	mov	r1, r5
    12e6:	mov	r0, r4
    12e8:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    12ec:	mov.w	r3, #256	; 0x100
    12f0:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    12f2:	add.w	r6, r4, r6, lsl #2
    12f6:	add.w	r2, sp, r3
    12fa:	mov	r0, r4
    12fc:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    1300:	add	r1, sp, #256	; 0x100
    1302:	ldr	r0, [pc, #48]	; (1334 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1304:	bl	d0c <Print::println(char const*)>
    1308:	ldr	r0, [r6, #88]	; 0x58
    130a:	add	r2, sp, #256	; 0x100
    130c:	mov	r1, sp
    130e:	bl	d72 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1312:	mov	r6, r0
    1314:	cbnz	r0, 132c <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    1316:	mov.w	r2, #256	; 0x100
    131a:	add	r1, sp, #512	; 0x200
    131c:	add	r0, sp, #784	; 0x310
    131e:	bl	da20 <strlcpy>
    WriteIndexRecord(handle, p1);
    1322:	add	r2, sp, #768	; 0x300
    1324:	mov	r1, r5
    1326:	mov	r0, r4
    1328:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    132c:	mov	r0, r6
    132e:	addw	sp, sp, #1044	; 0x414
    1332:	pop	{r4, r5, r6, r7, pc}
    1334:	.word	0x20008944

00001338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1338:	ldr.w	r3, [r0, #420]	; 0x1a4
    133c:	cmp	r3, r1
  {
    133e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1342:	mov	r4, r0
    1344:	sub	sp, #336	; 0x150
    1346:	mov	r6, r1
    1348:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    134a:	bne.n	1354 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    134c:	ldr.w	r3, [r0, #416]	; 0x1a0
    1350:	cmp	r3, r2
    1352:	beq.n	13ac <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1354:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1358:	mov.w	r3, #256	; 0x100
    135c:	add	r2, sp, #80	; 0x50
    135e:	mov	r1, r6
    1360:	mov	r0, r4
    1362:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1366:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1368:	mov	r0, r8
    136a:	bl	e44 <FsBaseFile::isOpen() const>
    136e:	cbz	r0, 1376 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1370:	mov	r0, r8
    1372:	bl	7984 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1376:	add.w	r7, r4, r7, lsl #2
    137a:	add	r2, sp, #80	; 0x50
    137c:	mov	r3, r5
    137e:	mov	r0, sp
    1380:	ldr	r1, [r7, #88]	; 0x58
    1382:	bl	7bb8 <FsVolume::open(char const*, int)>
    1386:	ldr	r3, [sp, #4]
    1388:	add	r1, sp, #16
    138a:	mov	r0, r8
    138c:	str.w	r3, [r4, #252]	; 0xfc
    1390:	ldr	r3, [sp, #8]
    1392:	str.w	r3, [r4, #256]	; 0x100
    1396:	ldrb.w	r3, [sp, #12]
    139a:	strb.w	r3, [r4, #260]	; 0x104
    139e:	bl	79ae <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    13a2:	mov	r0, sp
    13a4:	bl	edc <FsFile::~FsFile()>
    mode_ = mode;
    13a8:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    13ac:	add	sp, #336	; 0x150
    13ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000013b2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    13b2:	push	{r4, r5, r6, lr}
    13b4:	mov	r4, r0
    13b6:	mov	r6, r2
    13b8:	mov	r5, r3
    OpenFileByIndex(handle);
    13ba:	movs	r2, #0
    file_.seekSet(pos);
    13bc:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    13c0:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    13c4:	mov	r2, r6
    13c6:	movs	r3, #0
    13c8:	mov	r0, r4
    13ca:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    13ce:	ldr	r2, [sp, #16]
    13d0:	mov	r1, r5
    13d2:	mov	r0, r4
    13d4:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
  }
    13d8:	pop	{r4, r5, r6, pc}

000013da <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    13da:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    13de:	cmp.w	r2, #4294967295
    13e2:	ite	ne
    13e4:	movne	r8, r2
    13e6:	moveq	r8, r1
  {
    13e8:	sub.w	sp, sp, #800	; 0x320
    13ec:	mov	r4, r0
    13ee:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    13f0:	mov	r2, r8
    13f2:	mov	r1, r0
    13f4:	add	r0, sp, #256	; 0x100
  {
    13f6:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    13f8:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    13fc:	mov.w	r2, #256	; 0x100
    1400:	ldr	r1, [sp, #824]	; 0x338
    1402:	add	r0, sp, #544	; 0x220
    1404:	bl	da20 <strlcpy>
    r.store = p.store;
    1408:	ldrh.w	r3, [sp, #270]	; 0x10e
    ret = p.child = AppendIndexRecord(r);
    140c:	add	r1, sp, #528	; 0x210
    140e:	mov	r0, r4
    r.store = p.store;
    1410:	strh.w	r3, [sp, #542]	; 0x21e
    r.child = 0;
    1414:	movs	r3, #0
    r.parent = parent;
    1416:	str.w	r8, [sp, #528]	; 0x210
    r.child = 0;
    141a:	str	r3, [sp, #532]	; 0x214
    r.sibling = p.child;
    141c:	ldr	r3, [sp, #260]	; 0x104
    r.isdir = folder;
    141e:	strb.w	r7, [sp, #540]	; 0x21c
    r.sibling = p.child;
    1422:	str	r3, [sp, #536]	; 0x218
    r.scanned = 1;
    1424:	movs	r3, #1
    1426:	strb.w	r3, [sp, #541]	; 0x21d
    ret = p.child = AppendIndexRecord(r);
    142a:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    142e:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1430:	mov	r5, r0
    1432:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1434:	mov	r1, r8
    1436:	mov	r0, r4
    1438:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    143c:	cbz	r7, 1460 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x86>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    143e:	mov	r2, sp
    1440:	mov	r1, r5
    1442:	mov.w	r3, #256	; 0x100
    1446:	mov	r0, r4
    1448:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    144c:	mov	r2, sp
    144e:	mov	r1, r6
    1450:	adds	r0, r4, #4
    1452:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    1456:	mov	r0, r5
    1458:	add.w	sp, sp, #800	; 0x320
    145c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    1460:	movw	r2, #514	; 0x202
    1464:	mov	r1, r5
    1466:	mov	r0, r4
    1468:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    146c:	b.n	1456 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x7c>

0000146e <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    146e:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1472:	cbnz	r3, 1478 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1474:	b.w	10c0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1478:	bx	lr

0000147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    147a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    147e:	cmp.w	r2, #4294967295
    1482:	ite	ne
    1484:	movne	r6, r2
    1486:	moveq	r6, r1
    1488:	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    148c:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    148e:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1490:	mov	r2, r6
    1492:	mov	r0, sp
    1494:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1498:	ldrb.w	r3, [sp, #12]
    149c:	cmp	r3, #0
    149e:	beq.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    14a0:	ldrb.w	r5, [sp, #13]
    14a4:	cmp	r5, #0
    14a6:	bne.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
      if (!file_.isOpen()) return;
    14a8:	add.w	r7, r4, #264	; 0x108
      OpenFileByIndex(i);
    14ac:	mov	r0, r4
    14ae:	mov	r2, r5
    14b0:	mov	r1, r6
    14b2:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    14b6:	mov	r0, r7
    14b8:	bl	e44 <FsBaseFile::isOpen() const>
    14bc:	cmp	r0, #0
    14be:	beq.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    14c0:	mov	r8, r5
    FsFile tmpFile;
    14c2:	add	r0, sp, #272	; 0x110
    14c4:	add.w	r9, r4, #344	; 0x158
    14c8:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    14cc:	movs	r2, #0
    14ce:	mov	r1, r7
    14d0:	add	r0, sp, #288	; 0x120
    14d2:	bl	7a84 <FsBaseFile::openNext(FsBaseFile*, int)>
    14d6:	ldr	r3, [sp, #276]	; 0x114
    14d8:	add	r1, sp, #288	; 0x120
    14da:	mov	r0, r9
    14dc:	str.w	r3, [r4, #332]	; 0x14c
    14e0:	ldr	r3, [sp, #280]	; 0x118
    14e2:	str.w	r3, [r4, #336]	; 0x150
    14e6:	ldrb.w	r3, [sp, #284]	; 0x11c
    14ea:	strb.w	r3, [r4, #340]	; 0x154
    14ee:	bl	79ae <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    14f2:	add	r0, sp, #272	; 0x110
    14f4:	bl	edc <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    14f8:	mov	r0, r9
    14fa:	bl	e44 <FsBaseFile::isOpen() const>
    14fe:	cbz	r0, 1554 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.store = record.store;
    1500:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    1504:	mov	r0, r9
        r.parent = i;
    1506:	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    1508:	strh.w	r3, [sp, #286]	; 0x11e
        r.sibling = sibling;
    150c:	str	r5, [sp, #280]	; 0x118
    150e:	bl	e22 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1512:	strb.w	r0, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1516:	cbnz	r0, 1550 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    return m_fFile ? m_fFile->fileSize() :
    1518:	ldr.w	r3, [r4, #400]	; 0x190
    151c:	cbz	r3, 1544 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xca>
    151e:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1520:	mov.w	r2, #256	; 0x100
    1524:	add	r1, sp, #288	; 0x120
    1526:	mov	r0, r9
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1528:	str	r3, [sp, #276]	; 0x114
        r.scanned = false;
    152a:	strb.w	r8, [sp, #285]	; 0x11d
        child_.getName(r.name,MAX_FILENAME_LEN);
    152e:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        sibling = AppendIndexRecord(r);
    1532:	add	r1, sp, #272	; 0x110
    1534:	mov	r0, r4
    1536:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    153a:	mov	r5, r0
        child_.close();
    153c:	mov	r0, r9
    153e:	bl	7984 <FsBaseFile::close()>
      }
    1542:	b.n	14c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1544:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    1548:	cmp	r3, #0
    154a:	beq.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
    154c:	ldr	r3, [r3, #16]
    154e:	b.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1550:	movs	r3, #0
    1552:	b.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
      record.scanned = true;
    1554:	movs	r3, #1
      WriteIndexRecord(i, record);
    1556:	mov	r2, sp
    1558:	mov	r1, r6
    155a:	mov	r0, r4
      record.scanned = true;
    155c:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1560:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1562:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1566:	add.w	sp, sp, #548	; 0x224
    156a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000156e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    156e:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1570:	cmp.w	r2, #4294967295
    1574:	it	eq
    1576:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1578:	sub	sp, #280	; 0x118
    157a:	mov	r4, r0
      ScanDir(store, parent);
    157c:	str	r2, [sp, #4]
    157e:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    1582:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    1584:	ldr	r2, [sp, #4]
    1586:	mov	r1, r4
    1588:	add	r0, sp, #8
      follow_sibling_ = true;
    158a:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    158e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1592:	ldr	r3, [sp, #12]
    1594:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1598:	add	sp, #280	; 0x118
    159a:	pop	{r4, pc}

0000159c <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    159c:	push	{r4, r5, r6, lr}
    159e:	ldrb.w	r4, [r0, #429]	; 0x1ad
    15a2:	mov	r5, r0
    15a4:	mov	r6, r1
    15a6:	cbnz	r4, 15ba <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    15a8:	movs	r3, #1
    15aa:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    15ae:	bl	146e <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15b2:	ldr.w	r3, [r5, #424]	; 0x1a8
    15b6:	cmp	r4, r3
    15b8:	bcc.n	15bc <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    15ba:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15bc:	mov	r2, r4
    15be:	mov	r1, r6
    15c0:	mov	r0, r5
    15c2:	adds	r4, #1
    15c4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    15c8:	b.n	15b2 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000015ca <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    15ca:	push	{r4, r5, r6, lr}
    15cc:	mov	r5, r2
    15ce:	mov	r4, r0
    15d0:	mov	r6, r1
    GenerateIndex(store);
    15d2:	bl	146e <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    15d6:	cbz	r5, 15e6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    15d8:	mov	r2, r5
    15da:	mov	r1, r6
    15dc:	mov	r0, r4
  }
    15de:	ldmia.w	sp!, {r4, r5, r6, lr}
    15e2:	b.w	156e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    15e6:	mov	r1, r6
    15e8:	mov	r0, r4
    15ea:	bl	159c <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    15ee:	movs	r3, #1
      follow_sibling_ = false;
    15f0:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    15f4:	str.w	r3, [r4, #432]	; 0x1b0
  }
    15f8:	pop	{r4, r5, r6, pc}
	...

000015fc <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    15fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1600:	mov	r4, r1
    1602:	sub.w	sp, sp, #764	; 0x2fc
    1606:	add.w	r1, r0, r1, lsl #2
    160a:	mov	r6, r0
  FsFile f1=sd_open(store,file,0);
    160c:	adds	r7, r0, #4
    160e:	movs	r3, #0
    1610:	add	r0, sp, #8
    1612:	ldr	r1, [r1, #88]	; 0x58
{ 
    1614:	mov	r5, r2
    1616:	bl	7bb8 <FsVolume::open(char const*, int)>
    161a:	add	r0, sp, #24
    161c:	bl	e22 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1620:	cmp	r0, #0
    1622:	beq.n	16c6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1624:	ldr.w	r9, [pc, #172]	; 16d4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1628:	add	r0, sp, #88	; 0x58
    162a:	bl	ec0 <FsFile::FsFile()>
    FsFile tmpFile;
    162e:	add	r0, sp, #168	; 0xa8
    1630:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1634:	movs	r2, #0
    1636:	add	r1, sp, #24
    1638:	add	r0, sp, #184	; 0xb8
    163a:	bl	7a84 <FsBaseFile::openNext(FsBaseFile*, int)>
    163e:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1640:	add	r1, sp, #184	; 0xb8
    1642:	add	r0, sp, #104	; 0x68
    1644:	str	r3, [sp, #92]	; 0x5c
    1646:	ldr	r3, [sp, #176]	; 0xb0
    1648:	str	r3, [sp, #96]	; 0x60
    164a:	ldrb.w	r3, [sp, #180]	; 0xb4
    164e:	strb.w	r3, [sp, #100]	; 0x64
    1652:	bl	79ae <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1656:	add	r0, sp, #104	; 0x68
    1658:	bl	e44 <FsBaseFile::isOpen() const>
    165c:	mov	r8, r0
    while(f2=f1.openNextFile())
    165e:	add	r0, sp, #168	; 0xa8
    1660:	bl	edc <FsFile::~FsFile()>
    1664:	cmp.w	r8, #0
    1668:	bne.n	1688 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    166a:	mov	r2, r5
    166c:	mov	r1, r4
    166e:	mov	r0, r7
    1670:	bl	f98 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1674:	add	r0, sp, #88	; 0x58
    1676:	bl	edc <FsFile::~FsFile()>
}
    167a:	add	r0, sp, #8
    167c:	bl	edc <FsFile::~FsFile()>
    1680:	add.w	sp, sp, #764	; 0x2fc
    1684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    1688:	add.w	r8, sp, #504	; 0x1f8
    168c:	mov.w	r2, #256	; 0x100
    1690:	add	r0, sp, #104	; 0x68
    1692:	mov	r1, r8
    1694:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1698:	mov	r2, r9
    169a:	mov.w	r1, #256	; 0x100
    169e:	mov	r3, r5
    16a0:	add	r0, sp, #248	; 0xf8
    16a2:	str.w	r8, [sp]
    16a6:	bl	d5e4 <snprintf>
    return BaseFile::isDir();
    16aa:	add	r0, sp, #104	; 0x68
    16ac:	bl	e22 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    16b0:	add	r2, sp, #248	; 0xf8
    16b2:	mov	r1, r4
    16b4:	cbz	r0, 16be <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    16b6:	mov	r0, r6
    16b8:	bl	15fc <MTPStorage_SD::removeFile(unsigned long, char*)>
    16bc:	b.n	162e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    16be:	mov	r0, r7
    16c0:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    16c4:	b.n	162e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    16c6:	mov	r2, r5
    16c8:	mov	r1, r4
    16ca:	mov	r0, r7
    16cc:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    16d0:	b.n	167a <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    16d2:	nop
    16d4:	.word	0x20007e97

000016d8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    16d8:	push	{r4, r5, r6, r7, lr}
    16da:	subw	sp, sp, #1348	; 0x544
    16de:	mov	r4, r0
    16e0:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    16e2:	mov.w	r3, #256	; 0x100
    16e6:	add	r2, sp, #272	; 0x110
    16e8:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    16ec:	mov	r2, r5
    16ee:	mov	r1, r4
    16f0:	add	r0, sp, #528	; 0x210
    16f2:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    16f6:	add	r2, sp, #272	; 0x110
    16f8:	ldrh.w	r1, [sp, #542]	; 0x21e
    16fc:	mov	r0, r4
    16fe:	bl	15fc <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    1702:	movs	r3, #0
    WriteIndexRecord(object, r);
    1704:	add	r2, sp, #528	; 0x210
    1706:	mov	r1, r5
    1708:	mov	r0, r4
    r.name[0]=0;
    170a:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    170e:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1712:	ldr	r2, [sp, #528]	; 0x210
    1714:	mov	r1, r4
    1716:	add	r0, sp, #800	; 0x320
    1718:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    171c:	ldr	r6, [sp, #804]	; 0x324
    171e:	cmp	r5, r6
    1720:	bne.n	1736 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1722:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    1724:	add	r2, sp, #800	; 0x320
    1726:	ldr	r1, [sp, #528]	; 0x210
      t.child = r.sibling;
    1728:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(is, x);
    172a:	mov	r0, r4
    172c:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1730:	addw	sp, sp, #1348	; 0x544
    1734:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1736:	mov	r2, r6
    1738:	mov	r1, r4
    173a:	add.w	r0, sp, #1072	; 0x430
    173e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1742:	ldr.w	r7, [sp, #1080]	; 0x438
    1746:	cmp	r5, r7
    1748:	bne.n	1758 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    174a:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    174c:	add.w	r2, sp, #1072	; 0x430
    1750:	mov	r1, r6
      x.sibling = r.sibling;
    1752:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    1756:	b.n	172a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1758:	mov	r2, r7
    175a:	mov	r1, r4
    175c:	mov	r0, sp
    175e:	mov	r6, r7
    1760:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1764:	mov.w	r2, #272	; 0x110
    1768:	mov	r1, sp
    176a:	add.w	r0, sp, #1072	; 0x430
    176e:	bl	9488 <memcpy>
    1772:	b.n	1742 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001774 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1774:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1776:	adds	r3, r1, #1
    1778:	beq.n	177e <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    177a:	bl	16d8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    177e:	movs	r0, #1
    1780:	pop	{r3, pc}

00001782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    1782:	push	{r4, r5, r6, lr}
    1784:	add.w	r1, r0, r1, lsl #2
    1788:	sub.w	sp, sp, #2208	; 0x8a0
    178c:	mov	r5, r0
    178e:	mov	r6, r3
    1790:	ldr	r1, [r1, #84]	; 0x54
    1792:	movs	r3, #0
    1794:	mov	r0, sp
    1796:	bl	7bb8 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,FILE_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    179a:	add	r0, sp, #16
    179c:	bl	e44 <FsBaseFile::isOpen() const>
    17a0:	mov	r4, r0
    17a2:	cbnz	r0, 17ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    17a4:	movw	r0, #669	; 0x29d
    17a8:	bl	cd0 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    17ac:	mov	r0, sp
    17ae:	bl	edc <FsFile::~FsFile()>
    17b2:	mov	r0, r4
    17b4:	add.w	sp, sp, #2208	; 0x8a0
    17b8:	pop	{r4, r5, r6, pc}
    17ba:	add.w	r5, r5, r6, lsl #2
    17be:	movw	r3, #514	; 0x202
    17c2:	ldr.w	r2, [sp, #2224]	; 0x8b0
    17c6:	add	r0, sp, #80	; 0x50
    17c8:	ldr	r1, [r5, #84]	; 0x54
    17ca:	bl	7bb8 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    17ce:	add	r0, sp, #96	; 0x60
    17d0:	bl	e44 <FsBaseFile::isOpen() const>
    17d4:	mov	r4, r0
    17d6:	cbnz	r0, 17ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    17d8:	add	r0, sp, #16
    17da:	bl	7984 <FsBaseFile::close()>
    17de:	mov.w	r0, #672	; 0x2a0
    17e2:	bl	cd0 <dbgPrint(unsigned short)>
}
    17e6:	add	r0, sp, #80	; 0x50
    17e8:	bl	edc <FsFile::~FsFile()>
    17ec:	b.n	17ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    17ee:	mov.w	r5, #4294967295
    return BaseFile::available();
    17f2:	add	r0, sp, #16
    17f4:	bl	dd2 <FsBaseFile::available() const>
  while(f1.available()>0)
    17f8:	cmp	r0, #0
    17fa:	ble.n	181c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    17fc:	mov.w	r2, #2048	; 0x800
    1800:	add	r1, sp, #160	; 0xa0
    1802:	add	r0, sp, #16
    1804:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1808:	subs	r5, r0, #0
    180a:	blt.n	181c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    180c:	mov	r2, r5
    180e:	add	r1, sp, #160	; 0xa0
    1810:	add	r0, sp, #96	; 0x60
    1812:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1816:	cmp.w	r5, #2048	; 0x800
    181a:	bge.n	17f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    181c:	add	r0, sp, #16
    181e:	bl	7984 <FsBaseFile::close()>
  f2.close();
    1822:	add	r0, sp, #96	; 0x60
    1824:	bl	7984 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1828:	cmp	r5, #0
    182a:	bge.n	17e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    182c:	mov.w	r0, #684	; 0x2ac
    1830:	movs	r4, #0
    1832:	bl	cd0 <dbgPrint(unsigned short)>
    1836:	b.n	17e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001838 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1838:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    183c:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1840:	cmp.w	r3, #4294967295
    1844:	ite	ne
    1846:	movne	r8, r3
    1848:	moveq	r8, r2
  { 
    184a:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    184c:	mov	r2, r1
  { 
    184e:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1850:	mov	r1, r0
    1852:	add	r0, sp, #520	; 0x208
    1854:	add	r6, sp, #536	; 0x218
    1856:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    185a:	mov	r2, r8
    185c:	mov	r1, r4
    185e:	add	r0, sp, #792	; 0x318
    1860:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1864:	ldrb.w	r5, [sp, #532]	; 0x214
    1868:	cbz	r5, 18ae <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    186a:	ldrh.w	r1, [sp, #534]	; 0x216
    186e:	mov	r2, r7
    1870:	mov	r0, r4
    1872:	adds	r1, #1
    1874:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1878:	ldrb.w	r3, [sp, #532]	; 0x214
    187c:	ldr	r2, [r4, #0]
    187e:	mov	r0, r4
    1880:	subs	r3, #0
    1882:	str	r6, [sp, #0]
    1884:	ldrh.w	r1, [sp, #806]	; 0x326
    1888:	ldr	r5, [r2, #44]	; 0x2c
    188a:	it	ne
    188c:	movne	r3, #1
    188e:	mov	r2, r8
    1890:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    1892:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1894:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    1896:	ldrh.w	r2, [sp, #806]	; 0x326
    189a:	ldr	r6, [r3, #84]	; 0x54
    189c:	mov	r1, r7
    189e:	mov	r3, r0
    18a0:	mov	r0, r4
    18a2:	blx	r6
  }
    18a4:	mov	r0, r5
    18a6:	add.w	sp, sp, #1336	; 0x538
    18aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    18ae:	mov.w	r2, #256	; 0x100
    18b2:	mov	r1, r6
    18b4:	add.w	r0, sp, #1080	; 0x438
    18b8:	bl	da20 <strlcpy>
      r.store = p2.store;
    18bc:	ldrh.w	r3, [sp, #806]	; 0x326
      newHandle = p2.child = AppendIndexRecord(r);
    18c0:	add.w	r1, sp, #1064	; 0x428
    18c4:	mov	r0, r4
      r.store = p2.store;
    18c6:	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    18ca:	ldr	r3, [sp, #796]	; 0x31c
      r.child = 0;
    18cc:	str.w	r5, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
    18d0:	str.w	r3, [sp, #1072]	; 0x430
      r.isdir = 0;
    18d4:	strh.w	r5, [sp, #1076]	; 0x434
      r.parent = newParent;
    18d8:	str.w	r8, [sp, #1064]	; 0x428
      newHandle = p2.child = AppendIndexRecord(r);
    18dc:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    18e0:	add	r2, sp, #792	; 0x318
      newHandle = p2.child = AppendIndexRecord(r);
    18e2:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    18e4:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    18e6:	str	r0, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    18e8:	mov	r0, r4
    18ea:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18ee:	add	r2, sp, #8
    18f0:	mov	r1, r7
    18f2:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    18f6:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18f8:	mov	r0, r4
    18fa:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    18fe:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1900:	mov	r2, r7
    1902:	mov	r1, r5
    1904:	mov.w	r3, #256	; 0x100
    1908:	mov	r0, r4
    190a:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    190e:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1910:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1912:	mov	r1, r6
    1914:	adds	r0, r4, #4
    1916:	str	r7, [sp, #0]
    1918:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    191c:	b.n	18a4 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

0000191e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    191e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1922:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1926:	cmp.w	r3, #4294967295
    192a:	ite	ne
    192c:	movne	r7, r3
    192e:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1930:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1932:	mov	r2, r1
    1934:	mov	r1, r0
    1936:	add	r0, sp, #520	; 0x208
    1938:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    193c:	mov	r2, r7
    193e:	mov	r1, r4
    1940:	add	r0, sp, #792	; 0x318
  Record p1=ReadIndexRecord(handle);
    1942:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1946:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1948:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    194c:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    194e:	cbnz	r6, 1966 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1950:	mov	r0, r4
    1952:	add	r2, sp, #792	; 0x318
    1954:	mov	r1, r7
  p2.child=iy;
    1956:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    1958:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    195c:	movs	r0, #1
    195e:	addw	sp, sp, #1612	; 0x64c
    1962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1966:	mov	r2, r6
    1968:	mov	r1, r4
    196a:	add.w	r0, sp, #1064	; 0x428
    196e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1972:	mov.w	r2, #272	; 0x110
    1976:	add.w	r1, sp, #1064	; 0x428
    197a:	add.w	r0, sp, #1336	; 0x538
    197e:	bl	9488 <memcpy>
    py.store = p2.store;
    1982:	ldrh.w	r3, [sp, #806]	; 0x326
    iy = AppendIndexRecord(py);
    1986:	add.w	r1, sp, #1336	; 0x538
    198a:	mov	r0, r4
    py.store = p2.store;
    198c:	strh.w	r3, [sp, #1350]	; 0x546
    py.sibling = iy;
    1990:	str.w	r5, [sp, #1344]	; 0x540
    py.parent = newHandle;
    1994:	str.w	r7, [sp, #1336]	; 0x538
    iy = AppendIndexRecord(py);
    1998:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    199c:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    199e:	mov.w	r3, #256	; 0x100
    19a2:	add	r2, sp, #8
    19a4:	mov	r1, r6
    19a6:	mov	r0, r4
    19a8:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    19ac:	add	r2, sp, #264	; 0x108
    19ae:	mov.w	r3, #256	; 0x100
    19b2:	mov	r1, r5
    19b4:	mov	r0, r4
    19b6:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    19ba:	ldrb.w	r1, [sp, #1348]	; 0x544
      sd_mkdir(py.store,newfilename);
    19be:	adds	r0, r4, #4
    19c0:	ldrh.w	r3, [sp, #1350]	; 0x546
    if(py.isdir) 
    19c4:	add	r2, sp, #264	; 0x108
    19c6:	cbz	r1, 19f0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    19c8:	mov	r1, r3
    19ca:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    19ce:	mov	r2, r6
    19d0:	mov	r1, r8
    19d2:	mov	r0, r4
    19d4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    19d8:	ldr	r3, [r4, #0]
    19da:	ldrh.w	r2, [sp, #806]	; 0x326
    19de:	mov	r1, r6
    19e0:	ldr.w	r9, [r3, #84]	; 0x54
    19e4:	mov	r0, r4
    19e6:	mov	r3, r5
    19e8:	blx	r9
    ix = px.sibling;
    19ea:	ldr.w	r6, [sp, #1072]	; 0x430
    19ee:	b.n	194e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    19f0:	str	r2, [sp, #0]
    19f2:	mov	r1, r8
    19f4:	add	r2, sp, #8
    19f6:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    19fa:	b.n	19ea <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

000019fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    19fc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1a00:	ldr.w	r8, [sp, #32]
    1a04:	mov	r6, r1
    1a06:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a08:	mov	r1, r3
    1a0a:	mov	r2, r8
    1a0c:	str	r3, [sp, #4]
{ // old and new are directory paths
    1a0e:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a10:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1a14:	ldr	r3, [sp, #4]
    1a16:	mov	r4, r0
    1a18:	cbz	r0, 1a2e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1a1a:	mov	r2, r7
    1a1c:	mov	r1, r6
    1a1e:	mov	r0, r5
    1a20:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1a24:	add	sp, #8
    1a26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a2a:	b.w	1a40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a2e:	movw	r0, #694	; 0x2b6
    1a32:	bl	cd0 <dbgPrint(unsigned short)>
}
    1a36:	mov	r0, r4
    1a38:	add	sp, #8
    1a3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001a40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1a40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a44:	mov	r6, r1
    1a46:	sub.w	sp, sp, #680	; 0x2a8
    1a4a:	add.w	r1, r0, r1, lsl #2
    1a4e:	mov	r5, r0
    1a50:	mov	r8, r3
    1a52:	add	r0, sp, #8
    1a54:	movs	r3, #0
    1a56:	ldr	r1, [r1, #84]	; 0x54
    1a58:	mov	r7, r2
    1a5a:	bl	7bb8 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1a5e:	add	r0, sp, #24
    1a60:	bl	e44 <FsBaseFile::isOpen() const>
    1a64:	mov	r4, r0
    1a66:	cmp	r0, #0
    1a68:	beq.n	1b1e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a6a:	ldr	r4, [pc, #264]	; (1b74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1a6c:	mov.w	r2, #256	; 0x100
    1a70:	mov	r1, r7
    1a72:	add	r0, sp, #168	; 0xa8
    1a74:	bl	da20 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a78:	add	r0, sp, #168	; 0xa8
    1a7a:	bl	e100 <strlen>
    1a7e:	add	r3, sp, #168	; 0xa8
    1a80:	add	r0, r3
    1a82:	ldrb.w	r3, [r0, #-1]
    1a86:	cmp	r3, #47	; 0x2f
    1a88:	beq.n	1a96 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1a8a:	mov.w	r2, #256	; 0x100
    1a8e:	mov	r1, r4
    1a90:	add	r0, sp, #168	; 0xa8
    1a92:	bl	d9b8 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1a96:	mov.w	r2, #256	; 0x100
    1a9a:	ldr	r1, [sp, #704]	; 0x2c0
    1a9c:	add	r0, sp, #424	; 0x1a8
    1a9e:	bl	da20 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1aa2:	add	r0, sp, #424	; 0x1a8
    1aa4:	bl	e100 <strlen>
    1aa8:	add	r3, sp, #424	; 0x1a8
    1aaa:	add	r0, r3
    1aac:	ldrb.w	r3, [r0, #-1]
    1ab0:	cmp	r3, #47	; 0x2f
    1ab2:	beq.n	1ac0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1ab4:	mov.w	r2, #256	; 0x100
    1ab8:	mov	r1, r4
    1aba:	add	r0, sp, #424	; 0x1a8
    1abc:	bl	d9b8 <strlcat>
    FsFile tmpFile;
    1ac0:	add	r0, sp, #88	; 0x58
    1ac2:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1ac6:	movs	r2, #0
    1ac8:	add	r1, sp, #24
    1aca:	add	r0, sp, #104	; 0x68
    1acc:	bl	7a84 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1ad0:	add	r0, sp, #104	; 0x68
    1ad2:	bl	e44 <FsBaseFile::isOpen() const>
    1ad6:	cmp	r0, #0
    1ad8:	beq.n	1b5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1ada:	mov.w	r2, #256	; 0x100
    1ade:	add	r1, sp, #168	; 0xa8
    1ae0:	add	r0, sp, #104	; 0x68
    1ae2:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1ae6:	mov.w	r2, #256	; 0x100
    1aea:	add	r1, sp, #424	; 0x1a8
    1aec:	add	r0, sp, #104	; 0x68
    1aee:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1af2:	add	r0, sp, #104	; 0x68
    1af4:	bl	e22 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1af8:	add	r3, sp, #424	; 0x1a8
    1afa:	add	r2, sp, #168	; 0xa8
    1afc:	mov	r1, r6
    1afe:	str	r3, [sp, #0]
    1b00:	mov	r3, r8
        if(f2.isDirectory())
    1b02:	cbz	r0, 1b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b04:	mov	r0, r5
    1b06:	bl	19fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1b0a:	cbnz	r0, 1b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b0c:	movw	r0, #717	; 0x2cd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b10:	bl	cd0 <dbgPrint(unsigned short)>
    }
    1b14:	add	r0, sp, #88	; 0x58
    1b16:	movs	r4, #0
    1b18:	bl	edc <FsFile::~FsFile()>
    1b1c:	b.n	1b26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b1e:	movw	r0, #697	; 0x2b9
    1b22:	bl	cd0 <dbgPrint(unsigned short)>
}
    1b26:	add	r0, sp, #8
    1b28:	bl	edc <FsFile::~FsFile()>
    1b2c:	mov	r0, r4
    1b2e:	add.w	sp, sp, #680	; 0x2a8
    1b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b36:	mov	r0, r5
    1b38:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b3c:	cbnz	r0, 1b44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1b3e:	movw	r0, #721	; 0x2d1
    1b42:	b.n	1b10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b44:	add	r2, sp, #168	; 0xa8
    1b46:	mov	r1, r6
    1b48:	mov	r0, r5
    1b4a:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    1b4e:	cbnz	r0, 1b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b50:	movw	r0, #722	; 0x2d2
    1b54:	b.n	1b10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1b56:	add	r0, sp, #88	; 0x58
    1b58:	bl	edc <FsFile::~FsFile()>
    1b5c:	b.n	1a6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1b5e:	add	r0, sp, #88	; 0x58
    1b60:	bl	edc <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1b64:	mov	r2, r7
    1b66:	mov	r1, r6
    1b68:	mov	r0, r5
    1b6a:	bl	f98 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1b6e:	mov	r4, r0
    1b70:	b.n	1b26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1b72:	nop
    1b74:	.word	0x20007b97

00001b78 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1b78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b7c:	subw	sp, sp, #2700	; 0xa8c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1b80:	cmp.w	r3, #4294967295
    1b84:	ite	ne
    1b86:	movne	r7, r3
    1b88:	moveq	r7, r2
  { 
    1b8a:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1b8c:	mov	r2, r1
  { 
    1b8e:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1b90:	mov	r1, r0
    1b92:	add	r0, sp, #792	; 0x318
    1b94:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1b98:	mov	r2, r7
    1b9a:	mov	r1, r4
    1b9c:	add.w	r0, sp, #1064	; 0x428
    1ba0:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1ba4:	ldr	r2, [sp, #792]	; 0x318
    1ba6:	mov	r1, r4
    1ba8:	add.w	r0, sp, #1336	; 0x538
    1bac:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1bb0:	ldrb.w	r3, [sp, #804]	; 0x324
    1bb4:	cbz	r3, 1bd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1bb6:	ldrb.w	r3, [sp, #805]	; 0x325
    1bba:	cbnz	r3, 1bd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1bbc:	mov	r2, r5
    1bbe:	ldrh.w	r1, [sp, #806]	; 0x326
    1bc2:	mov	r0, r4
    1bc4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1bc8:	add	r2, sp, #792	; 0x318
    1bca:	mov	r1, r5
    1bcc:	mov	r0, r4
    1bce:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1bd2:	mov.w	r2, #272	; 0x110
    1bd6:	add	r1, sp, #792	; 0x318
    1bd8:	add.w	r0, sp, #1608	; 0x648
    1bdc:	bl	9488 <memcpy>
    Record p2o = p2;
    1be0:	mov.w	r2, #272	; 0x110
    1be4:	add.w	r1, sp, #1064	; 0x428
    1be8:	add.w	r0, sp, #1880	; 0x758
    1bec:	bl	9488 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1bf0:	mov.w	r3, #256	; 0x100
    1bf4:	add	r2, sp, #280	; 0x118
    1bf6:	mov	r1, r5
    1bf8:	mov	r0, r4
    1bfa:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1bfe:	ldr.w	r8, [sp, #1340]	; 0x53c
    1c02:	cmp	r8, r5
    1c04:	bne.n	1c7c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1c06:	ldr	r3, [sp, #800]	; 0x320
    uint32_t jx=-1;
    1c08:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1c0c:	add.w	r2, sp, #1336	; 0x538
    1c10:	ldr	r1, [sp, #792]	; 0x318
    1c12:	mov	r0, r4
        p3.child = p1.sibling;
    1c14:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    1c18:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1c1c:	ldrh.w	r3, [sp, #1078]	; 0x436
      WriteIndexRecord(handle, p1);
    1c20:	add	r2, sp, #792	; 0x318
    1c22:	mov	r1, r5
    1c24:	mov	r0, r4
      p1.store = p2.store;
    1c26:	strh.w	r3, [sp, #806]	; 0x326
      p1.sibling = p2.child;
    1c2a:	ldr.w	r3, [sp, #1068]	; 0x42c
      p1.parent = newParent;
    1c2e:	str	r7, [sp, #792]	; 0x318
      p1.sibling = p2.child;
    1c30:	str	r3, [sp, #800]	; 0x320
      p2.child = handle;
    1c32:	str.w	r5, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    1c36:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1c3a:	add.w	r2, sp, #1064	; 0x428
    1c3e:	mov	r1, r7
    1c40:	mov	r0, r4
    1c42:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1c46:	mov.w	r3, #256	; 0x100
    1c4a:	mov	r1, r5
    1c4c:	add	r2, sp, #536	; 0x218
    1c4e:	mov	r0, r4
    1c50:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1c54:	ldrh.w	r1, [sp, #1622]	; 0x656
    1c58:	ldrh.w	r3, [sp, #1894]	; 0x766
    1c5c:	cmp	r1, r3
    1c5e:	bne.n	1d0c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1c60:	add.w	r3, r4, r1, lsl #2
    1c64:	add	r2, sp, #536	; 0x218
    1c66:	add	r1, sp, #280	; 0x118
    1c68:	ldr	r0, [r3, #88]	; 0x58
    1c6a:	bl	d72 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1c6e:	cbz	r0, 1cdc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1c70:	movs	r6, #1
  }
    1c72:	mov	r0, r6
    1c74:	addw	sp, sp, #2700	; 0xa8c
    1c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1c7c:	mov	r2, r8
    1c7e:	mov	r1, r4
    1c80:	add	r0, sp, #8
    1c82:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1c86:	mov.w	r2, #272	; 0x110
    1c8a:	add	r1, sp, #8
    1c8c:	addw	r0, sp, #2424	; 0x978
    1c90:	bl	9488 <memcpy>
        pxo = px;
    1c94:	mov.w	r2, #272	; 0x110
    1c98:	addw	r1, sp, #2424	; 0x978
    1c9c:	addw	r0, sp, #2152	; 0x868
    1ca0:	bl	9488 <memcpy>
        while(handle != px.sibling)
    1ca4:	ldr.w	r6, [sp, #2432]	; 0x980
    1ca8:	cmp	r6, r5
    1caa:	bne.n	1cc0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1cac:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    1cae:	addw	r2, sp, #2424	; 0x978
    1cb2:	mov	r1, r8
    1cb4:	mov	r0, r4
        px.sibling = p1.sibling;
    1cb6:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    1cba:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1cbe:	b.n	1c1c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1cc0:	mov	r2, r6
    1cc2:	mov	r1, r4
    1cc4:	add	r0, sp, #8
    1cc6:	mov	r8, r6
    1cc8:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1ccc:	mov.w	r2, #272	; 0x110
    1cd0:	add	r1, sp, #8
    1cd2:	addw	r0, sp, #2424	; 0x978
    1cd6:	bl	9488 <memcpy>
          pxo = px;
    1cda:	b.n	1c94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1cdc:	movw	r0, #558	; 0x22e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1ce0:	bl	cd0 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1ce4:	addw	r2, sp, #2152	; 0x868
    1ce8:	mov	r1, r8
    1cea:	mov	r0, r4
    1cec:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1cf0:	add.w	r2, sp, #1608	; 0x648
    1cf4:	mov	r1, r5
    1cf6:	mov	r0, r4
    1cf8:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1cfc:	add.w	r2, sp, #1880	; 0x758
    1d00:	mov	r1, r7
    1d02:	mov	r0, r4
    return false;
    1d04:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1d06:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1d0a:	b.n	1c72 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1d0c:	ldrb.w	r2, [sp, #1620]	; 0x654
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d10:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1d14:	cbnz	r2, 1d3a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d16:	add	r2, sp, #536	; 0x218
    1d18:	mov	r0, r9
    1d1a:	str	r2, [sp, #0]
    1d1c:	add	r2, sp, #280	; 0x118
    1d1e:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1d22:	mov	r6, r0
    1d24:	cbz	r0, 1d34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1d26:	add	r2, sp, #280	; 0x118
    1d28:	ldrh.w	r1, [sp, #1894]	; 0x766
    1d2c:	mov	r0, r9
    1d2e:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    1d32:	b.n	1c72 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1d34:	movw	r0, #562	; 0x232
    1d38:	b.n	1ce0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d3a:	add	r2, sp, #536	; 0x218
    1d3c:	mov	r0, r9
    1d3e:	str	r2, [sp, #0]
    1d40:	add	r2, sp, #280	; 0x118
    1d42:	bl	19fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1d46:	cmp	r0, #0
    1d48:	bne.n	1c70 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1d4a:	movw	r0, #566	; 0x236
    1d4e:	b.n	1ce0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001d50 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1d50:	push	{r4, r5, r6, lr}
    1d52:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1d56:	ldr	r4, [pc, #60]	; (1d94 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1d58:	ldr	r0, [r5, #88]	; 0x58
    1d5a:	bl	d3e <FsVolume::clusterCount() const>
    1d5e:	mov	r1, r0
    1d60:	mov	r0, r4
    1d62:	bl	c94 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1d66:	ldr	r0, [r5, #88]	; 0x58
    1d68:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d6c:	mov	r1, r0
    1d6e:	mov	r0, r4
    1d70:	bl	c94 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1d74:	ldr	r6, [r5, #88]	; 0x58
    1d76:	mov	r0, r6
    1d78:	bl	d3e <FsVolume::clusterCount() const>
    1d7c:	mov	r4, r0
    1d7e:	mov	r0, r6
    1d80:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d84:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1d86:	ldr	r0, [r5, #88]	; 0x58
    1d88:	bl	d20 <FsVolume::bytesPerCluster() const>
    1d8c:	umull	r0, r1, r4, r0
    1d90:	pop	{r4, r5, r6, pc}
    1d92:	nop
    1d94:	.word	0x20008944

00001d98 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1d98:	push	{r4, lr}
    1d9a:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1d9c:	bl	b576 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1da0:	mov	r0, r4
    1da2:	ldmia.w	sp!, {r4, lr}
    1da6:	b.w	b588 <Print::println()>

00001daa <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1daa:	push	{r4, lr}
    1dac:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1dae:	movs	r3, #0
    1db0:	movs	r2, #10
    1db2:	bl	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1db6:	mov	r0, r4
    1db8:	ldmia.w	sp!, {r4, lr}
    1dbc:	b.w	b588 <Print::println()>

00001dc0 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1dc0:	push	{r0, r1, r4, lr}
    1dc2:	mov	r4, r0
    1dc4:	cbz	r1, 1de0 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1dc6:	mov	r0, r1
    1dc8:	str	r1, [sp, #4]
    1dca:	bl	e100 <strlen>
    1dce:	ldr	r3, [r4, #0]
    1dd0:	mov	r2, r0
    1dd2:	ldr	r1, [sp, #4]
    1dd4:	ldr	r3, [r3, #4]
    1dd6:	mov	r0, r4
    1dd8:	add	sp, #8
    1dda:	ldmia.w	sp!, {r4, lr}
    1dde:	bx	r3
    1de0:	add	sp, #8
    1de2:	pop	{r4, pc}

00001de4 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1de4:	b.w	1dc0 <Print::write(char const*) [clone .isra.0]>

00001de8 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1de8:	push	{r4, lr}
    1dea:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1dec:	bl	1dc0 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1df0:	mov	r0, r4
    1df2:	ldmia.w	sp!, {r4, lr}
    1df6:	b.w	b588 <Print::println()>
	...

00001dfc <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1dfc:	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    1dfe:	bl	9970 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1e02:	cmp	r0, #0
    1e04:	beq.n	1dfe <menuGetLine()+0x2>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1e06:	ldr	r4, [pc, #28]	; (1e24 <menuGetLine()+0x28>)
    1e08:	movs	r3, #40	; 0x28
    1e0a:	movs	r1, #13
    1e0c:	ldr	r0, [pc, #24]	; (1e28 <menuGetLine()+0x2c>)
    1e0e:	mov	r2, r4
    1e10:	bl	b4d0 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1e14:	movs	r3, #0
  Serial.println(buffer);
    1e16:	mov	r1, r4
  buffer[count]=0;
    1e18:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1e1a:	ldr	r0, [pc, #12]	; (1e28 <menuGetLine()+0x2c>)
    1e1c:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1e20:	mov	r0, r4
    1e22:	pop	{r4, pc}
    1e24:	.word	0x20027cd8
    1e28:	.word	0x20008944

00001e2c <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1e2c:	push	{r0, r1, r4, lr}
    1e2e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e30:	bl	1dfc <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1e34:	add	r2, sp, #4
    1e36:	ldr	r1, [pc, #12]	; (1e44 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1e38:	bl	d6ac <sscanf>
    1e3c:	ldr	r3, [sp, #4]
    1e3e:	str	r3, [r4, #0]
  return 1;
}
    1e40:	add	sp, #8
    1e42:	pop	{r4, pc}
    1e44:	.word	0x20007f3c

00001e48 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1e48:	push	{r0, r1, r4, lr}
    1e4a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e4c:	bl	1dfc <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1e50:	add	r2, sp, #4
    1e52:	ldr	r1, [pc, #12]	; (1e60 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1e54:	bl	d6ac <sscanf>
    1e58:	ldr	r3, [sp, #4]
    1e5a:	strh	r3, [r4, #0]
}
    1e5c:	add	sp, #8
    1e5e:	pop	{r4, pc}
    1e60:	.word	0x20007f3c

00001e64 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1e64:	push	{r4, lr}
    1e66:	sub	sp, #32
    1e68:	bl	9970 <usb_serial_available>

    while(!Serial.available()) ;
    1e6c:	cmp	r0, #0
    1e6e:	beq.n	1e68 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1e70:	bl	99e4 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1e74:	uxtb	r0, r0
    if(ch=='d') // set date
    1e76:	cmp	r0, #100	; 0x64
    1e78:	bne.n	1ea6 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1e7a:	bl	1dfc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1e7e:	add	r3, sp, #28
    1e80:	add	r2, sp, #20
    1e82:	ldr	r1, [pc, #308]	; (1fb8 <menu3()+0x154>)
    1e84:	str	r3, [sp, #8]
    1e86:	add.w	r3, sp, #19
    1e8a:	str	r3, [sp, #4]
    1e8c:	add	r3, sp, #24
    1e8e:	str	r3, [sp, #0]
    1e90:	add.w	r3, sp, #18
    1e94:	bl	d6ac <sscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1e98:	ldr	r0, [sp, #20]
    1e9a:	ldrd	r1, r2, [sp, #24]
    1e9e:	bl	34ac <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1ea2:	add	sp, #32
    1ea4:	pop	{r4, pc}
    else if(ch=='t') // set time
    1ea6:	cmp	r0, #52	; 0x34
    1ea8:	bhi.n	1ebc <menu3()+0x58>
    1eaa:	cmp	r0, #48	; 0x30
    1eac:	bls.n	1ea2 <menu3()+0x3e>
    1eae:	subs	r0, #50	; 0x32
    1eb0:	cmp	r0, #2
    1eb2:	bhi.n	1fa6 <menu3()+0x142>
    1eb4:	tbb	[pc, r0]
    1eb8:	.short	0x7b79
    1eba:	.byte	0x7d
    1ebb:	.byte	0x00
    1ebc:	subs	r0, #97	; 0x61
    1ebe:	uxtb	r3, r0
    1ec0:	cmp	r3, #22
    1ec2:	bhi.n	1ea2 <menu3()+0x3e>
    1ec4:	cmp	r0, #22
    1ec6:	bhi.n	1ea2 <menu3()+0x3e>
    1ec8:	add	r3, pc, #4	; (adr r3, 1ed0 <menu3()+0x6c>)
    1eca:	ldr.w	pc, [r3, r0, lsl #2]
    1ece:	nop
    1ed0:	.word	0x00001f57
    1ed4:	.word	0x00001ea3
    1ed8:	.word	0x00001f93
    1edc:	.word	0x00001ea3
    1ee0:	.word	0x00001ea3
    1ee4:	.word	0x00001f6b
    1ee8:	.word	0x00001f9f
    1eec:	.word	0x00001ea3
    1ef0:	.word	0x00001ea3
    1ef4:	.word	0x00001ea3
    1ef8:	.word	0x00001ea3
    1efc:	.word	0x00001ea3
    1f00:	.word	0x00001ea3
    1f04:	.word	0x00001ea3
    1f08:	.word	0x00001f63
    1f0c:	.word	0x00001ea3
    1f10:	.word	0x00001ea3
    1f14:	.word	0x00001f67
    1f18:	.word	0x00001f7f
    1f1c:	.word	0x00001f2d
    1f20:	.word	0x00001ea3
    1f24:	.word	0x00001ea3
    1f28:	.word	0x00001fa3
{ char *buffer=menuGetLine();
    1f2c:	bl	1dfc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f30:	add	r3, sp, #28
    1f32:	add	r2, sp, #20
    1f34:	ldr	r1, [pc, #128]	; (1fb8 <menu3()+0x154>)
    1f36:	str	r3, [sp, #8]
    1f38:	add.w	r3, sp, #19
    1f3c:	str	r3, [sp, #4]
    1f3e:	add	r3, sp, #24
    1f40:	str	r3, [sp, #0]
    1f42:	add.w	r3, sp, #18
    1f46:	bl	d6ac <sscanf>
      rtcSetTime(hour,minutes,seconds);
    1f4a:	ldr	r0, [sp, #20]
    1f4c:	ldrd	r1, r2, [sp, #24]
    1f50:	bl	34d0 <rtcSetTime(int, int, int)>
    1f54:	b.n	1ea2 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    1f56:	ldr	r0, [pc, #100]	; (1fbc <menu3()+0x158>)
}
    1f58:	add	sp, #32
    1f5a:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    1f5e:	b.w	1e2c <menuGetInt32(long*) [clone .isra.0]>
    1f62:	ldr	r0, [pc, #92]	; (1fc0 <menu3()+0x15c>)
    1f64:	b.n	1f58 <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    1f66:	ldr	r0, [pc, #92]	; (1fc4 <menu3()+0x160>)
    1f68:	b.n	1f58 <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    1f6a:	ldr	r4, [pc, #92]	; (1fc8 <menu3()+0x164>)
    1f6c:	mov	r0, r4
    1f6e:	bl	1e2c <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1f72:	ldr	r0, [r4, #0]
}
    1f74:	add	sp, #32
    1f76:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1f7a:	b.w	bf8 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    1f7e:	ldr	r4, [pc, #76]	; (1fcc <menu3()+0x168>)
    1f80:	mov	r0, r4
    1f82:	bl	1e48 <menuGetInt16(short*) [clone .isra.0]>
    1f86:	ldrh	r3, [r4, #0]
    1f88:	lsls	r3, r3, #16
    1f8a:	bpl.n	1ea2 <menu3()+0x3e>
    1f8c:	movs	r3, #0
    1f8e:	strh	r3, [r4, #0]
    1f90:	b.n	1ea2 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    1f92:	ldr	r0, [pc, #60]	; (1fd0 <menu3()+0x16c>)
}
    1f94:	add	sp, #32
    1f96:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    1f9a:	b.w	1e48 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    1f9e:	ldr	r0, [pc, #52]	; (1fd4 <menu3()+0x170>)
    1fa0:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&store[0]);
    1fa2:	ldr	r0, [pc, #52]	; (1fd8 <menu3()+0x174>)
    1fa4:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    1fa6:	ldr	r0, [pc, #52]	; (1fdc <menu3()+0x178>)
    1fa8:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    1faa:	ldr	r0, [pc, #52]	; (1fe0 <menu3()+0x17c>)
    1fac:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    1fae:	ldr	r0, [pc, #52]	; (1fe4 <menu3()+0x180>)
    1fb0:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    1fb2:	ldr	r0, [pc, #52]	; (1fe8 <menu3()+0x184>)
    1fb4:	b.n	1f94 <menu3()+0x130>
    1fb6:	nop
    1fb8:	.word	0x20007ddc
    1fbc:	.word	0x20008f0c
    1fc0:	.word	0x20008f10
    1fc4:	.word	0x20008f14
    1fc8:	.word	0x20008ef0
    1fcc:	.word	0x20008f1c
    1fd0:	.word	0x20027b94
    1fd4:	.word	0x20027b8c
    1fd8:	.word	0x20027b68
    1fdc:	.word	0x20027b48
    1fe0:	.word	0x20008f00
    1fe4:	.word	0x20008f04
    1fe8:	.word	0x20008f08

00001fec <saveParameters()>:
//    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
}

void saveParameters(void)
{
  store[1]  = t_acq;
    1fec:	ldr	r3, [pc, #92]	; (204c <saveParameters()+0x60>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    1fee:	mov.w	r1, #1000	; 0x3e8
  store[1]  = t_acq;
    1ff2:	ldr	r2, [r3, #0]
    1ff4:	ldr	r3, [pc, #88]	; (2050 <saveParameters()+0x64>)
    1ff6:	strh	r2, [r3, #2]
  store[2]  = t_on;
    1ff8:	ldr	r2, [pc, #88]	; (2054 <saveParameters()+0x68>)
    1ffa:	ldr	r2, [r2, #0]
    1ffc:	strh	r2, [r3, #4]
  store[3]  = t_off;
    1ffe:	ldr	r2, [pc, #88]	; (2058 <saveParameters()+0x6c>)
    2000:	ldr	r2, [r2, #0]
    2002:	strh	r2, [r3, #6]
  store[4]  = t_rep;
    2004:	ldr	r2, [pc, #84]	; (205c <saveParameters()+0x70>)
    2006:	ldr	r2, [r2, #0]
    2008:	strh	r2, [r3, #8]
  store[5]  = proc;
    200a:	ldr	r2, [pc, #84]	; (2060 <saveParameters()+0x74>)
    200c:	ldrh	r2, [r2, #0]
    200e:	strh	r2, [r3, #10]
  store[6]  = shift;
    2010:	ldr	r2, [pc, #80]	; (2064 <saveParameters()+0x78>)
    2012:	ldrh	r2, [r2, #0]
    2014:	strh	r2, [r3, #12]
  store[7]  = t_1;
    2016:	ldr	r2, [pc, #80]	; (2068 <saveParameters()+0x7c>)
    2018:	ldr	r2, [r2, #0]
    201a:	strh	r2, [r3, #14]
  store[8]  = t_2;
    201c:	ldr	r2, [pc, #76]	; (206c <saveParameters()+0x80>)
    201e:	ldr	r2, [r2, #0]
    2020:	strh	r2, [r3, #16]
  store[9]  = t_3;
    2022:	ldr	r2, [pc, #76]	; (2070 <saveParameters()+0x84>)
    2024:	ldr	r2, [r2, #0]
    2026:	strh	r2, [r3, #18]
  store[10] = t_4;
    2028:	ldr	r2, [pc, #72]	; (2074 <saveParameters()+0x88>)
    202a:	ldr	r2, [r2, #0]
    202c:	strh	r2, [r3, #20]
  store[11] = fsamp/1000;
    202e:	ldr	r2, [pc, #72]	; (2078 <saveParameters()+0x8c>)
    2030:	ldr	r2, [r2, #0]
    2032:	sdiv	r2, r2, r1
    2036:	strh	r2, [r3, #22]
  store[12] = again;
    2038:	ldr	r2, [pc, #64]	; (207c <saveParameters()+0x90>)
    203a:	ldrh	r2, [r2, #0]
    203c:	strh	r2, [r3, #24]
  store[13] = dgain;
    203e:	ldr	r2, [pc, #64]	; (2080 <saveParameters()+0x94>)
    2040:	ldrh	r2, [r2, #0]
    2042:	strh	r2, [r3, #26]
  store[14] = 0;
    2044:	movs	r2, #0
    2046:	strh	r2, [r3, #28]
  store[15] = 0;
    2048:	strh	r2, [r3, #30]

  storeConfig(store, 16);
}
    204a:	bx	lr
    204c:	.word	0x20008f0c
    2050:	.word	0x20027b68
    2054:	.word	0x20008f10
    2058:	.word	0x20027b4c
    205c:	.word	0x20008f14
    2060:	.word	0x20027b94
    2064:	.word	0x20008f1c
    2068:	.word	0x20027b48
    206c:	.word	0x20008f00
    2070:	.word	0x20008f04
    2074:	.word	0x20008f08
    2078:	.word	0x20008ef0
    207c:	.word	0x20027b8c
    2080:	.word	0x20027b8e

00002084 <menu1(short)>:
{   // have ':'
    2084:	push	{r4, lr}
    2086:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2088:	bl	9970 <usb_serial_available>
    while(!Serial.available()) ;
    208c:	cmp	r0, #0
    208e:	beq.n	2088 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2090:	bl	99e4 <usb_serial_getchar>
    ch=Serial.read();
    2094:	uxtb	r3, r0
    if(ch=='w') 
    2096:	cmp	r3, #119	; 0x77
    2098:	bne.n	20aa <menu1(short)+0x26>
    { Serial.println("Save parameters");
    209a:	ldr	r1, [pc, #28]	; (20b8 <menu1(short)+0x34>)
    209c:	ldr	r0, [pc, #28]	; (20bc <menu1(short)+0x38>)
    209e:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    20a2:	bl	1fec <saveParameters()>
}
    20a6:	mov	r0, r4
    20a8:	pop	{r4, pc}
    else if(ch=='m') 
    20aa:	cmp	r3, #109	; 0x6d
    20ac:	bne.n	20a6 <menu1(short)+0x22>
    { menuGetInt16((int16_t *)&monitor);
    20ae:	ldr	r0, [pc, #16]	; (20c0 <menu1(short)+0x3c>)
    20b0:	bl	1e48 <menuGetInt16(short*) [clone .isra.0]>
    20b4:	b.n	20a6 <menu1(short)+0x22>
    20b6:	nop
    20b8:	.word	0x20007c97
    20bc:	.word	0x20008944
    20c0:	.word	0x20027b92

000020c4 <loadParameters()>:

uint16_t *loadParameters(void)
{
  loadConfig(store,16);
  if(store[0]==1)
    20c4:	ldr	r3, [pc, #220]	; (21a4 <loadParameters()+0xe0>)
    20c6:	ldr.w	ip, [pc, #260]	; 21cc <loadParameters()+0x108>
    20ca:	ldrh	r2, [r3, #0]
    20cc:	ldr	r1, [pc, #216]	; (21a8 <loadParameters()+0xe4>)
    20ce:	cmp	r2, #1
    20d0:	ldr	r0, [pc, #216]	; (21ac <loadParameters()+0xe8>)
{
    20d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d6:	ldr.w	sl, [pc, #248]	; 21d0 <loadParameters()+0x10c>
    20da:	ldr.w	lr, [pc, #248]	; 21d4 <loadParameters()+0x110>
    20de:	ldr.w	r8, [pc, #248]	; 21d8 <loadParameters()+0x114>
    20e2:	ldr	r7, [pc, #204]	; (21b0 <loadParameters()+0xec>)
    20e4:	ldr	r6, [pc, #204]	; (21b4 <loadParameters()+0xf0>)
    20e6:	ldr	r5, [pc, #208]	; (21b8 <loadParameters()+0xf4>)
    20e8:	ldr	r4, [pc, #208]	; (21bc <loadParameters()+0xf8>)
  if(store[0]==1)
    20ea:	bne.n	2146 <loadParameters()+0x82>
  {
    t_acq   = store[1];
    20ec:	ldrh	r2, [r3, #2]
    t_on    = store[2];
    20ee:	ldrh.w	r9, [r3, #4]
    t_acq   = store[1];
    20f2:	str.w	r2, [sl]
    t_on    = store[2];
    20f6:	ldr	r2, [pc, #200]	; (21c0 <loadParameters()+0xfc>)
    20f8:	str.w	r9, [r2]
    t_off   = store[3];
    20fc:	ldrh	r2, [r3, #6]
    20fe:	str.w	r2, [lr]
    t_rep   = store[4];
    2102:	ldrh	r2, [r3, #8]
    2104:	str.w	r2, [r8]
    proc    = store[5];
    2108:	ldrsh.w	r2, [r3, #10]
    210c:	strh	r2, [r7, #0]
    shift   = store[6];
    210e:	ldrsh.w	r2, [r3, #12]
    2112:	strh.w	r2, [ip]
    t_1     = store[7];
    2116:	ldrh	r2, [r3, #14]
    2118:	str	r2, [r1, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    211a:	mov.w	r1, #1000	; 0x3e8
    t_2     = store[8];
    211e:	ldrh	r2, [r3, #16]
    2120:	str	r2, [r6, #0]
    t_3     = store[9];
    2122:	ldrh	r2, [r3, #18]
    2124:	str	r2, [r5, #0]
    t_4     = store[10];
    2126:	ldrh	r2, [r3, #20]
    2128:	str	r2, [r4, #0]
    fsamp   = store[11]*1000;
    212a:	ldrh	r2, [r3, #22]
    212c:	muls	r2, r1
    again   = store[12];
    212e:	ldrsh.w	r1, [r3, #24]
    fsamp   = store[11]*1000;
    2132:	str	r2, [r0, #0]
    again   = store[12];
    2134:	ldr	r2, [pc, #140]	; (21c4 <loadParameters()+0x100>)
    2136:	strh	r1, [r2, #0]
    dgain   = store[13];
    2138:	ldrsh.w	r2, [r3, #26]
    213c:	ldr	r3, [pc, #136]	; (21c8 <loadParameters()+0x104>)
    213e:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    2140:	ldr	r0, [pc, #96]	; (21a4 <loadParameters()+0xe0>)
    2142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[0]  = 0;
    2146:	movs	r2, #0
    store[1]  = t_acq    = T_ACQ;
    2148:	mov.w	r9, #60	; 0x3c
    214c:	str.w	r9, [sl]
    store[3]  = t_off    = T_OFF;
    2150:	str.w	r2, [lr]
    store[4]  = t_rep    = T_REP;
    2154:	mov.w	lr, #600	; 0x258
    store[0]  = 0;
    2158:	strh	r2, [r3, #0]
    store[4]  = t_rep    = T_REP;
    215a:	str.w	lr, [r8]
    store[5]  = proc     = PROC_MODE;
    215e:	strh	r2, [r7, #0]
    store[6]  = shift    = SHIFT;
    2160:	movs	r7, #8
    store[1]  = t_acq    = T_ACQ;
    2162:	strh.w	r9, [r3, #2]
    store[6]  = shift    = SHIFT;
    2166:	strh.w	r7, [ip]
    store[7]  = t_1      = T_1;
    216a:	str	r2, [r1, #0]
    store[8]  = t_2      = T_2;
    216c:	movs	r1, #12
    store[3]  = t_off    = T_OFF;
    216e:	strh	r2, [r3, #6]
    store[8]  = t_2      = T_2;
    2170:	str	r1, [r6, #0]
    2172:	strh	r1, [r3, #16]
    store[9]  = t_3      = T_3;
    2174:	str	r1, [r5, #0]
    2176:	strh	r1, [r3, #18]
    store[10] = t_4      = T_4;
    2178:	movs	r1, #24
    store[4]  = t_rep    = T_REP;
    217a:	strh.w	lr, [r3, #8]
    store[10] = t_4      = T_4;
    217e:	str	r1, [r4, #0]
    2180:	strh	r1, [r3, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    2182:	movw	r1, #48000	; 0xbb80
    store[5]  = proc     = PROC_MODE;
    2186:	strh	r2, [r3, #10]
    store[11] = (fsamp   = FSAMP)/1000; 
    2188:	str	r1, [r0, #0]
    218a:	movs	r1, #48	; 0x30
    store[6]  = shift    = SHIFT;
    218c:	strh	r7, [r3, #12]
    store[11] = (fsamp   = FSAMP)/1000; 
    218e:	strh	r1, [r3, #22]
    store[12] = again    = AGAIN;
    2190:	ldr	r1, [pc, #48]	; (21c4 <loadParameters()+0x100>)
    store[7]  = t_1      = T_1;
    2192:	strh	r2, [r3, #14]
    store[12] = again    = AGAIN;
    2194:	strh	r2, [r1, #0]
    store[13] = dgain    = DGAIN;
    2196:	ldr	r1, [pc, #48]	; (21c8 <loadParameters()+0x104>)
    store[12] = again    = AGAIN;
    2198:	strh	r2, [r3, #24]
    store[13] = dgain    = DGAIN;
    219a:	strh	r2, [r1, #0]
    219c:	strh	r2, [r3, #26]
    store[14] = 0;
    219e:	strh	r2, [r3, #28]
    store[15] = 0; 
    21a0:	strh	r2, [r3, #30]
    21a2:	b.n	2140 <loadParameters()+0x7c>
    21a4:	.word	0x20027b68
    21a8:	.word	0x20027b48
    21ac:	.word	0x20008ef0
    21b0:	.word	0x20027b94
    21b4:	.word	0x20008f00
    21b8:	.word	0x20008f04
    21bc:	.word	0x20008f08
    21c0:	.word	0x20008f10
    21c4:	.word	0x20027b8c
    21c8:	.word	0x20027b8e
    21cc:	.word	0x20008f1c
    21d0:	.word	0x20008f0c
    21d4:	.word	0x20027b4c
    21d8:	.word	0x20008f14

000021dc <menu2()>:
{   // have '?'
    21dc:	push	{r4, lr}
    21de:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    21e0:	bl	9970 <usb_serial_available>
    while(!Serial.available()) ;
    21e4:	cmp	r0, #0
    21e6:	beq.n	21e0 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21e8:	bl	99e4 <usb_serial_getchar>
    ch=Serial.read();
    21ec:	uxtb	r0, r0
    if(ch=='p') // get parameters
    21ee:	cmp	r0, #112	; 0x70
    21f0:	bne.w	2302 <menu2()+0x126>
      Serial.println();
    21f4:	ldr	r0, [pc, #576]	; (2438 <menu2()+0x25c>)
    21f6:	bl	b588 <Print::println()>
      Serial.println(version);
    21fa:	ldr	r1, [pc, #576]	; (243c <menu2()+0x260>)
    21fc:	ldr	r0, [pc, #568]	; (2438 <menu2()+0x25c>)
    21fe:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    2202:	add	r0, sp, #24
    2204:	bl	3488 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now: %4d-%02d-%02d %02d:%02d:%02d %d\n",
    2208:	ldrsb.w	r3, [sp, #28]
    220c:	ldrsh.w	r2, [sp, #24]
    2210:	str	r3, [sp, #16]
    2212:	ldrsb.w	r3, [sp, #31]
    2216:	ldr	r1, [pc, #552]	; (2440 <menu2()+0x264>)
    2218:	str	r3, [sp, #12]
    221a:	ldrsb.w	r3, [sp, #30]
    221e:	ldr	r0, [pc, #536]	; (2438 <menu2()+0x25c>)
    2220:	str	r3, [sp, #8]
    2222:	ldrsb.w	r3, [sp, #29]
    2226:	str	r3, [sp, #4]
    2228:	ldrsb.w	r3, [sp, #27]
    222c:	str	r3, [sp, #0]
    222e:	ldrsb.w	r3, [sp, #26]
    2232:	bl	b5c0 <Print::printf(char const*, ...)>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2236:	ldr	r1, [pc, #524]	; (2444 <menu2()+0x268>)
    2238:	ldr	r0, [pc, #508]	; (2438 <menu2()+0x25c>)
    223a:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    223e:	ldr	r3, [pc, #520]	; (2448 <menu2()+0x26c>)
    2240:	ldr	r0, [pc, #500]	; (2438 <menu2()+0x25c>)
    2242:	ldr	r1, [r3, #0]
    2244:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2248:	ldr	r1, [pc, #512]	; (244c <menu2()+0x270>)
    224a:	ldr	r0, [pc, #492]	; (2438 <menu2()+0x25c>)
    224c:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2250:	ldr	r3, [pc, #508]	; (2450 <menu2()+0x274>)
    2252:	ldr	r0, [pc, #484]	; (2438 <menu2()+0x25c>)
    2254:	ldr	r1, [r3, #0]
    2256:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    225a:	ldr	r1, [pc, #504]	; (2454 <menu2()+0x278>)
    225c:	ldr	r0, [pc, #472]	; (2438 <menu2()+0x25c>)
    225e:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2262:	ldr	r3, [pc, #500]	; (2458 <menu2()+0x27c>)
    2264:	ldr	r0, [pc, #464]	; (2438 <menu2()+0x25c>)
    2266:	ldr	r1, [r3, #0]
    2268:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    226c:	ldr	r1, [pc, #492]	; (245c <menu2()+0x280>)
    226e:	ldr	r0, [pc, #456]	; (2438 <menu2()+0x25c>)
    2270:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2274:	ldr	r3, [pc, #488]	; (2460 <menu2()+0x284>)
	size_t println(long n)				{ return print(n) + println(); }
    2276:	ldr	r0, [pc, #448]	; (2438 <menu2()+0x25c>)
    2278:	ldr	r1, [r3, #0]
    227a:	bl	b576 <Print::print(long)>
    227e:	ldr	r0, [pc, #440]	; (2438 <menu2()+0x25c>)
    2280:	bl	b588 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2284:	ldr	r1, [pc, #476]	; (2464 <menu2()+0x288>)
    2286:	ldr	r0, [pc, #432]	; (2438 <menu2()+0x25c>)
    2288:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    228c:	ldr	r3, [pc, #472]	; (2468 <menu2()+0x28c>)
    228e:	ldr	r0, [pc, #424]	; (2438 <menu2()+0x25c>)
    2290:	ldrh	r1, [r3, #0]
    2292:	sxth	r1, r1
    2294:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2298:	ldr	r1, [pc, #464]	; (246c <menu2()+0x290>)
    229a:	ldr	r0, [pc, #412]	; (2438 <menu2()+0x25c>)
    229c:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22a0:	ldr	r3, [pc, #460]	; (2470 <menu2()+0x294>)
    22a2:	ldr	r0, [pc, #404]	; (2438 <menu2()+0x25c>)
    22a4:	ldrh	r1, [r3, #0]
    22a6:	sxth	r1, r1
    22a8:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    22ac:	ldr	r1, [pc, #452]	; (2474 <menu2()+0x298>)
    22ae:	ldr	r0, [pc, #392]	; (2438 <menu2()+0x25c>)
    22b0:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22b4:	ldr	r3, [pc, #448]	; (2478 <menu2()+0x29c>)
    22b6:	ldr	r0, [pc, #384]	; (2438 <menu2()+0x25c>)
    22b8:	ldrh	r1, [r3, #0]
    22ba:	sxth	r1, r1
    22bc:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    22c0:	ldr	r1, [pc, #440]	; (247c <menu2()+0x2a0>)
    22c2:	ldr	r0, [pc, #372]	; (2438 <menu2()+0x25c>)
    22c4:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22c8:	ldr	r3, [pc, #436]	; (2480 <menu2()+0x2a4>)
    22ca:	ldr	r0, [pc, #364]	; (2438 <menu2()+0x25c>)
    22cc:	ldr	r1, [r3, #0]
    22ce:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    22d2:	ldr	r1, [pc, #432]	; (2484 <menu2()+0x2a8>)
    22d4:	ldr	r0, [pc, #352]	; (2438 <menu2()+0x25c>)
    22d6:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22da:	ldr	r3, [pc, #428]	; (2488 <menu2()+0x2ac>)
    22dc:	ldr	r0, [pc, #344]	; (2438 <menu2()+0x25c>)
    22de:	ldr	r1, [r3, #0]
    22e0:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    22e4:	ldr	r1, [pc, #420]	; (248c <menu2()+0x2b0>)
    22e6:	ldr	r0, [pc, #336]	; (2438 <menu2()+0x25c>)
    22e8:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22ec:	ldr	r3, [pc, #416]	; (2490 <menu2()+0x2b4>)
    22ee:	ldr	r0, [pc, #328]	; (2438 <menu2()+0x25c>)
    22f0:	ldr	r1, [r3, #0]
    22f2:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    22f6:	ldr	r1, [pc, #412]	; (2494 <menu2()+0x2b8>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    22f8:	ldr	r0, [pc, #316]	; (2438 <menu2()+0x25c>)
    22fa:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22fe:	ldr	r3, [pc, #408]	; (2498 <menu2()+0x2bc>)
    2300:	b.n	238c <menu2()+0x1b0>
    else if(ch=='d') // get date
    2302:	cmp	r0, #52	; 0x34
    2304:	bhi.n	2338 <menu2()+0x15c>
    2306:	cmp	r0, #48	; 0x30
    2308:	bls.n	2340 <menu2()+0x164>
    230a:	subs	r0, #50	; 0x32
    230c:	cmp	r0, #2
    230e:	bhi.n	23f6 <menu2()+0x21a>
    2310:	tbb	[pc, r0]
    2314:	.short	0x7d77
    2316:	.byte	0x83
    2317:	.byte	0x00
    2318:	cmp	r0, #22
    231a:	bhi.n	2340 <menu2()+0x164>
    231c:	tbb	[pc, r0]
    2320:	.word	0x165f1031
    2324:	.word	0x10654710
    2328:	.word	0x10101010
    232c:	.word	0x103b1010
    2330:	.word	0x25544110
    2334:	.short	0x1010
    2336:	.byte	0x7f
    2337:	.byte	0x00
    2338:	subs	r0, #97	; 0x61
    233a:	uxtb	r3, r0
    233c:	cmp	r3, #22
    233e:	bls.n	2318 <menu2()+0x13c>
        virtual int available() { return usb_serial_available(); }
    2340:	bl	9970 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2344:	cmp	r0, #0
    2346:	bne.n	2430 <menu2()+0x254>
}
    2348:	add	sp, #32
    234a:	pop	{r4, pc}
      rtc_get_datetime(&t);
    234c:	add	r0, sp, #24
    234e:	bl	3488 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    2352:	ldrsb.w	r3, [sp, #27]
    2356:	ldrsh.w	r2, [sp, #24]
    235a:	str	r3, [sp, #0]
    235c:	ldr	r1, [pc, #316]	; (249c <menu2()+0x2c0>)
    235e:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    2362:	ldr	r0, [pc, #212]	; (2438 <menu2()+0x25c>)
    2364:	bl	b5c0 <Print::printf(char const*, ...)>
    2368:	b.n	2340 <menu2()+0x164>
      rtc_get_datetime(&t);
    236a:	add	r0, sp, #24
    236c:	bl	3488 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    2370:	ldrsb.w	r3, [sp, #31]
    2374:	ldrsb.w	r2, [sp, #29]
    2378:	str	r3, [sp, #0]
    237a:	ldr	r1, [pc, #292]	; (24a0 <menu2()+0x2c4>)
    237c:	ldrsb.w	r3, [sp, #30]
    2380:	b.n	2362 <menu2()+0x186>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2382:	ldr	r1, [pc, #192]	; (2444 <menu2()+0x268>)
    2384:	ldr	r0, [pc, #176]	; (2438 <menu2()+0x25c>)
    2386:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    238a:	ldr	r3, [pc, #188]	; (2448 <menu2()+0x26c>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    238c:	ldr	r1, [r3, #0]
    238e:	ldr	r0, [pc, #168]	; (2438 <menu2()+0x25c>)
    2390:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
    2394:	b.n	2340 <menu2()+0x164>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    2396:	ldr	r1, [pc, #268]	; (24a4 <menu2()+0x2c8>)
    2398:	ldr	r0, [pc, #156]	; (2438 <menu2()+0x25c>)
    239a:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    239e:	ldr	r3, [pc, #176]	; (2450 <menu2()+0x274>)
    23a0:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23a2:	ldr	r1, [pc, #176]	; (2454 <menu2()+0x278>)
    23a4:	ldr	r0, [pc, #144]	; (2438 <menu2()+0x25c>)
    23a6:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23aa:	ldr	r3, [pc, #172]	; (2458 <menu2()+0x27c>)
    23ac:	b.n	238c <menu2()+0x1b0>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    23ae:	ldr	r1, [pc, #172]	; (245c <menu2()+0x280>)
    23b0:	ldr	r0, [pc, #132]	; (2438 <menu2()+0x25c>)
    23b2:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23b6:	ldr	r3, [pc, #168]	; (2460 <menu2()+0x284>)
    23b8:	ldr	r0, [pc, #124]	; (2438 <menu2()+0x25c>)
    23ba:	ldr	r1, [r3, #0]
    23bc:	bl	b576 <Print::print(long)>
    23c0:	ldr	r0, [pc, #116]	; (2438 <menu2()+0x25c>)
    23c2:	bl	b588 <Print::println()>
    23c6:	b.n	2340 <menu2()+0x164>
      Serial.print("shift (s) = "); Serial.println(shift);
    23c8:	ldr	r1, [pc, #152]	; (2464 <menu2()+0x288>)
    23ca:	ldr	r0, [pc, #108]	; (2438 <menu2()+0x25c>)
    23cc:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23d0:	ldr	r3, [pc, #148]	; (2468 <menu2()+0x28c>)
      Serial.print("again (g) = "); Serial.println(again);
    23d2:	ldrh	r1, [r3, #0]
    23d4:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    23d6:	ldr	r0, [pc, #96]	; (2438 <menu2()+0x25c>)
    23d8:	bl	1d98 <Print::println(int) [clone .isra.0]>
    23dc:	b.n	2340 <menu2()+0x164>
      Serial.print("proc  (c) = "); Serial.println(proc);
    23de:	ldr	r1, [pc, #140]	; (246c <menu2()+0x290>)
    23e0:	ldr	r0, [pc, #84]	; (2438 <menu2()+0x25c>)
    23e2:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23e6:	ldr	r3, [pc, #136]	; (2470 <menu2()+0x294>)
    23e8:	b.n	23d2 <menu2()+0x1f6>
      Serial.print("again (g) = "); Serial.println(again);
    23ea:	ldr	r1, [pc, #136]	; (2474 <menu2()+0x298>)
    23ec:	ldr	r0, [pc, #72]	; (2438 <menu2()+0x25c>)
    23ee:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23f2:	ldr	r3, [pc, #132]	; (2478 <menu2()+0x29c>)
    23f4:	b.n	23d2 <menu2()+0x1f6>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    23f6:	ldr	r1, [pc, #176]	; (24a8 <menu2()+0x2cc>)
    23f8:	ldr	r0, [pc, #60]	; (2438 <menu2()+0x25c>)
    23fa:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23fe:	ldr	r3, [pc, #128]	; (2480 <menu2()+0x2a4>)
    2400:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    2402:	ldr	r1, [pc, #168]	; (24ac <menu2()+0x2d0>)
    2404:	ldr	r0, [pc, #48]	; (2438 <menu2()+0x25c>)
    2406:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    240a:	ldr	r3, [pc, #124]	; (2488 <menu2()+0x2ac>)
    240c:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    240e:	ldr	r1, [pc, #160]	; (24b0 <menu2()+0x2d4>)
    2410:	ldr	r0, [pc, #36]	; (2438 <menu2()+0x25c>)
    2412:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2416:	ldr	r3, [pc, #120]	; (2490 <menu2()+0x2b4>)
    2418:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    241a:	ldr	r1, [pc, #152]	; (24b4 <menu2()+0x2d8>)
    241c:	b.n	22f8 <menu2()+0x11c>
    { uint16_t *params=loadParameters();
    241e:	bl	20c4 <loadParameters()>
    2422:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2424:	ldr	r1, [pc, #144]	; (24b8 <menu2()+0x2dc>)
    2426:	ldr	r0, [pc, #16]	; (2438 <menu2()+0x25c>)
    2428:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    242c:	ldrh	r1, [r4, #0]
    242e:	b.n	23d6 <menu2()+0x1fa>
        virtual int read() { return usb_serial_getchar(); }
    2430:	bl	99e4 <usb_serial_getchar>
    2434:	b.n	2340 <menu2()+0x164>
    2436:	nop
    2438:	.word	0x20008944
    243c:	.word	0x20007e4d
    2440:	.word	0x20007ca7
    2444:	.word	0x20007ccd
    2448:	.word	0x20008f0c
    244c:	.word	0x20007cda
    2450:	.word	0x20008f10
    2454:	.word	0x20007ce7
    2458:	.word	0x20008f14
    245c:	.word	0x20007cf4
    2460:	.word	0x20008ef0
    2464:	.word	0x20007d01
    2468:	.word	0x20008f1c
    246c:	.word	0x20007d0e
    2470:	.word	0x20027b94
    2474:	.word	0x20007d1b
    2478:	.word	0x20027b8c
    247c:	.word	0x20007d28
    2480:	.word	0x20027b48
    2484:	.word	0x20007d35
    2488:	.word	0x20008f00
    248c:	.word	0x20007d42
    2490:	.word	0x20008f04
    2494:	.word	0x20007d4f
    2498:	.word	0x20008f08
    249c:	.word	0x20007d5c
    24a0:	.word	0x20007d76
    24a4:	.word	0x20007d91
    24a8:	.word	0x20007d9e
    24ac:	.word	0x20007daa
    24b0:	.word	0x20007db6
    24b4:	.word	0x20007dc2
    24b8:	.word	0x20007dce

000024bc <menu(short)>:
{
    24bc:	push	{r3, r4, r5, lr}
    24be:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    24c0:	bl	9970 <usb_serial_available>
  if(Serial.available())
    24c4:	cmp	r0, #0
    24c6:	beq.n	2568 <menu(short)+0xac>
        virtual int read() { return usb_serial_getchar(); }
    24c8:	bl	99e4 <usb_serial_getchar>
    char ch=Serial.read();
    24cc:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    24ce:	cmp	r1, #115	; 0x73
    24d0:	bne.n	24e0 <menu(short)+0x24>
    24d2:	movs	r4, #0
    24d4:	ldr	r1, [pc, #148]	; (256c <menu(short)+0xb0>)
    24d6:	ldr	r0, [pc, #152]	; (2570 <menu(short)+0xb4>)
    24d8:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
	size_t print(char c)				{ return write((uint8_t)c); }
    24dc:	ldr	r5, [pc, #144]	; (2570 <menu(short)+0xb4>)
    24de:	b.n	2560 <menu(short)+0xa4>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    24e0:	cmp	r1, #101	; 0x65
    24e2:	bne.n	24f0 <menu(short)+0x34>
    24e4:	ldr	r1, [pc, #140]	; (2574 <menu(short)+0xb8>)
    24e6:	movs	r4, #5
    24e8:	ldr	r0, [pc, #132]	; (2570 <menu(short)+0xb4>)
    24ea:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    24ee:	b.n	24dc <menu(short)+0x20>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    24f0:	cmp	r1, #109	; 0x6d
    24f2:	bne.n	2512 <menu(short)+0x56>
    24f4:	ldr	r5, [pc, #128]	; (2578 <menu(short)+0xbc>)
    24f6:	ldr	r1, [pc, #132]	; (257c <menu(short)+0xc0>)
    24f8:	ldrh	r3, [r5, #0]
    24fa:	ldr	r0, [pc, #116]	; (2570 <menu(short)+0xb4>)
    24fc:	rsb	r3, r3, #1
    2500:	strh	r3, [r5, #0]
    2502:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2506:	ldrsh.w	r1, [r5]
    250a:	ldr	r0, [pc, #100]	; (2570 <menu(short)+0xb4>)
    250c:	bl	b576 <Print::print(long)>
    2510:	b.n	24dc <menu(short)+0x20>
    else if(ch=='r') {resetUSB();}
    2512:	cmp	r1, #114	; 0x72
    2514:	bne.n	251c <menu(short)+0x60>
    2516:	bl	218 <resetUSB()>
    251a:	b.n	24dc <menu(short)+0x20>
    else if(ch==':') status=menu1(status); 
    251c:	cmp	r1, #58	; 0x3a
    251e:	bne.n	252a <menu(short)+0x6e>
    2520:	mov	r0, r4
    2522:	bl	2084 <menu1(short)>
    2526:	mov	r4, r0
    2528:	b.n	24dc <menu(short)+0x20>
    else if(ch=='?') menu2(); 
    252a:	cmp	r1, #63	; 0x3f
    252c:	bne.n	2534 <menu(short)+0x78>
    252e:	bl	21dc <menu2()>
    2532:	b.n	24dc <menu(short)+0x20>
    else if(ch=='!') menu3(); 
    2534:	cmp	r1, #33	; 0x21
    2536:	bne.n	253e <menu(short)+0x82>
    2538:	bl	1e64 <menu3()>
    253c:	b.n	24dc <menu(short)+0x20>
	size_t print(char c)				{ return write((uint8_t)c); }
    253e:	ldr	r5, [pc, #48]	; (2570 <menu(short)+0xb4>)
    2540:	ldr	r3, [r5, #0]
    2542:	mov	r0, r5
    2544:	ldr	r3, [r3, #0]
    2546:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2548:	ldr	r1, [pc, #52]	; (2580 <menu(short)+0xc4>)
    254a:	mov	r0, r5
    254c:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
    2550:	b.n	24dc <menu(short)+0x20>
    2552:	bl	99e4 <usb_serial_getchar>
    2556:	ldr	r3, [r5, #0]
    2558:	uxtb	r1, r0
    255a:	ldr	r0, [pc, #20]	; (2570 <menu(short)+0xb4>)
    255c:	ldr	r3, [r3, #0]
    255e:	blx	r3
        virtual int available() { return usb_serial_available(); }
    2560:	bl	9970 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2564:	cmp	r0, #0
    2566:	bne.n	2552 <menu(short)+0x96>
}
    2568:	mov	r0, r4
    256a:	pop	{r3, r4, r5, pc}
    256c:	.word	0x20007c3c
    2570:	.word	0x20008944
    2574:	.word	0x20007c44
    2578:	.word	0x20027b92
    257c:	.word	0x20007c4b
    2580:	.word	0x20007c56

00002584 <getStore()>:

uint16_t *getStore(void) {return store;}
    2584:	ldr	r0, [pc, #0]	; (2588 <getStore()+0x4>)
    2586:	bx	lr
    2588:	.word	0x20027b68

0000258c <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    258c:	ldr	r3, [pc, #16]	; (25a0 <getDataCount()+0x14>)
    258e:	ldr	r0, [r3, #0]
    2590:	ldr	r3, [pc, #16]	; (25a4 <getDataCount()+0x18>)
    2592:	ldr	r3, [r3, #0]
    2594:	subs	r0, r0, r3
    2596:	it	mi
    2598:	addmi	r0, #192	; 0xc0
    259a:	uxth	r0, r0
    259c:	bx	lr
    259e:	nop
    25a0:	.word	0x200267e8
    25a4:	.word	0x200267e4

000025a8 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    25a8:	ldr	r3, [pc, #4]	; (25b0 <queue_isBusy()+0x8>)
    25aa:	ldr	r0, [r3, #0]
    25ac:	bx	lr
    25ae:	nop
    25b0:	.word	0x2000cdd4

000025b4 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    25b4:	push	{r3, r4, r5, r6, r7, lr}
    if ( (tail+1)%MAXBUF == head ) return 0;
    25b6:	ldr	r5, [pc, #72]	; (2600 <pushData(unsigned long*)+0x4c>)
    25b8:	movs	r6, #192	; 0xc0
  {
    25ba:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) return 0;
    25bc:	ldr	r2, [pc, #68]	; (2604 <pushData(unsigned long*)+0x50>)
    25be:	ldr	r3, [r5, #0]
    25c0:	ldr	r2, [r2, #0]
    25c2:	adds	r3, #1
    25c4:	sdiv	r0, r3, r6
    25c8:	mls	r3, r6, r0, r3
    25cc:	cmp	r3, r2
    25ce:	beq.n	25fc <pushData(unsigned long*)+0x48>
    //while(busy); 
    queue_busy=1;
    25d0:	movs	r4, #1
    25d2:	ldr	r7, [pc, #52]	; (2608 <pushData(unsigned long*)+0x54>)
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25d4:	ldr	r3, [pc, #52]	; (260c <pushData(unsigned long*)+0x58>)
    25d6:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    25da:	str	r4, [r7, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25dc:	ldr	r0, [r5, #0]
    25de:	add.w	r0, r3, r0, lsl #9
    25e2:	bl	9488 <memcpy>
    tail = (tail+1)%MAXBUF;
    25e6:	ldr	r3, [r5, #0]
    queue_busy=0;
    return 1; // signal success.
    25e8:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    25ea:	add	r3, r4
    25ec:	sdiv	r2, r3, r6
    25f0:	mls	r3, r6, r2, r3
    25f4:	str	r3, [r5, #0]
    queue_busy=0;
    25f6:	movs	r3, #0
    25f8:	str	r3, [r7, #0]
  }
    25fa:	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) return 0;
    25fc:	movs	r0, #0
    25fe:	b.n	25fa <pushData(unsigned long*)+0x46>
    2600:	.word	0x200267e8
    2604:	.word	0x200267e4
    2608:	.word	0x2000cdd4
    260c:	.word	0x2000cdd8

00002610 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    2610:	ldr	r3, [pc, #60]	; (2650 <pullData(unsigned long*)+0x40>)
  {
    2612:	push	{r4, r5, r6, lr}
    if ( head==tail ) return 0;
    2614:	ldr	r5, [pc, #60]	; (2654 <pullData(unsigned long*)+0x44>)
    2616:	ldr	r2, [r5, #0]
    2618:	ldr	r3, [r3, #0]
    261a:	cmp	r2, r3
    261c:	beq.n	264c <pullData(unsigned long*)+0x3c>
    //while(busy); 
    queue_busy=1;
    261e:	movs	r4, #1
    2620:	ldr	r6, [pc, #52]	; (2658 <pullData(unsigned long*)+0x48>)
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2622:	ldr	r3, [pc, #56]	; (265c <pullData(unsigned long*)+0x4c>)
    2624:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    2628:	str	r4, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    262a:	ldr	r1, [r5, #0]
    262c:	add.w	r1, r3, r1, lsl #9
    2630:	bl	9488 <memcpy>
    head = (head+1)%MAXBUF;
    2634:	ldr	r3, [r5, #0]
    2636:	movs	r2, #192	; 0xc0
    queue_busy=0;
    return 1;
    2638:	mov	r0, r4
    head = (head+1)%MAXBUF;
    263a:	add	r3, r4
    263c:	sdiv	r1, r3, r2
    2640:	mls	r3, r2, r1, r3
    2644:	str	r3, [r5, #0]
    queue_busy=0;
    2646:	movs	r3, #0
    2648:	str	r3, [r6, #0]
  }
    264a:	pop	{r4, r5, r6, pc}
    if ( head==tail ) return 0;
    264c:	movs	r0, #0
    264e:	b.n	264a <pullData(unsigned long*)+0x3a>
    2650:	.word	0x200267e8
    2654:	.word	0x200267e4
    2658:	.word	0x2000cdd4
    265c:	.word	0x2000cdd8

00002660 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2660:	push	{r0, r1, r4, r5, r6, lr}
    2662:	mov	r6, r0
    rtc_get_datetime(&t);
    2664:	mov	r0, sp
{
    2666:	mov	r5, r2
    2668:	mov	r4, r1
    rtc_get_datetime(&t);
    266a:	bl	3488 <rtc_get_datetime(datetime_t*)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    266e:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    2672:	ldrsb.w	r3, [sp, #3]
    2676:	subw	r2, r2, #1980	; 0x7bc
    267a:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    267c:	cmp	r2, #127	; 0x7f
    267e:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2680:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2684:	cmp	r1, #12
    2686:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2688:	uxtb	r3, r3
    268a:	cmp	r3, #31
    268c:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    268e:	orr.w	r3, r3, r1, lsl #5
    2692:	orr.w	r3, r3, r2, lsl #9
    2696:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2698:	ldrb.w	r1, [sp, #5]
    269c:	ldrsb.w	r2, [sp, #7]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    26a0:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    26a2:	strh	r3, [r6, #0]
    26a4:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    26a6:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    26aa:	cmp	r3, #59	; 0x3b
    26ac:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    26ae:	uxtb	r2, r2
    26b0:	cmp	r2, #59	; 0x3b
    26b2:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    26b4:	lsls	r3, r3, #5
    26b6:	orr.w	r3, r3, r1, lsl #11
    26ba:	orr.w	r3, r3, r2, lsr #1
    26be:	uxth	r3, r3
    26c0:	strh	r3, [r4, #0]
    *ms10 = 0;
    26c2:	movs	r3, #0
    26c4:	strb	r3, [r5, #0]
}
    26c6:	add	sp, #8
    26c8:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    26ca:	movs	r3, #0
    26cc:	b.n	2698 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    26ce:	movs	r3, #0
    26d0:	b.n	26c0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

000026d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    26d2:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26d4:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    26d6:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26d8:	cbz	r5, 26e4 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    26da:	cbnz	r3, 26ee <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    26dc:	mov	r0, r5
  }
    26de:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26e0:	b.w	654e <FatFile::seekSet(unsigned long)>
    26e4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    26e6:	cbz	r0, 26ee <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    26e8:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    26ea:	b.w	4ec4 <ExFatFile::seekSet(unsigned long long)>
  }
    26ee:	pop	{r4, r5}
    26f0:	bx	lr

000026f2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    26f2:	push	{r0, r1, r4, lr}
    26f4:	mov	r4, r0
    26f6:	cbz	r1, 2712 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    26f8:	mov	r0, r1
    26fa:	str	r1, [sp, #4]
    26fc:	bl	e100 <strlen>
    2700:	ldr	r3, [r4, #0]
    2702:	mov	r2, r0
    2704:	ldr	r1, [sp, #4]
    2706:	ldr	r3, [r3, #4]
    2708:	mov	r0, r4
    270a:	add	sp, #8
    270c:	ldmia.w	sp!, {r4, lr}
    2710:	bx	r3
    2712:	add	sp, #8
    2714:	pop	{r4, pc}

00002716 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2716:	push	{r4, lr}
    2718:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    271a:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    271e:	mov	r0, r4
    2720:	ldmia.w	sp!, {r4, lr}
    2724:	b.w	b588 <Print::println()>

00002728 <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    2728:	ldr	r3, [r0, #56]	; 0x38
    272a:	cbz	r3, 2732 <FsBaseFile::sync()+0xa>
    272c:	mov	r0, r3
    272e:	b.w	6798 <FatFile::sync()>
    2732:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    2734:	cbz	r0, 273a <FsBaseFile::sync()+0x12>
    2736:	b.w	5af8 <ExFatFile::sync()>
  }
    273a:	bx	lr

0000273c <timeStamp()>:
{
    273c:	push	{r4, lr}
    273e:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2740:	ldr	r4, [pc, #52]	; (2778 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2742:	add	r0, sp, #16
    2744:	bl	3488 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2748:	ldrsb.w	r3, [sp, #23]
    274c:	ldrsh.w	r2, [sp, #16]
    2750:	mov	r0, r4
    2752:	str	r3, [sp, #12]
    2754:	ldrsb.w	r3, [sp, #22]
    2758:	ldr	r1, [pc, #32]	; (277c <timeStamp()+0x40>)
    275a:	str	r3, [sp, #8]
    275c:	ldrsb.w	r3, [sp, #21]
    2760:	str	r3, [sp, #4]
    2762:	ldrsb.w	r3, [sp, #19]
    2766:	str	r3, [sp, #0]
    2768:	ldrsb.w	r3, [sp, #18]
    276c:	bl	d66c <sprintf>
}
    2770:	mov	r0, r4
    2772:	add	sp, #24
    2774:	pop	{r4, pc}
    2776:	nop
    2778:	.word	0x20027c88
    277c:	.word	0x20007ae1

00002780 <headerInit(long, long, long, int)>:
{
    2780:	push	{r0, r1, r4, r5, r6, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2782:	ldr	r4, [pc, #184]	; (283c <headerInit(long, long, long, int)+0xbc>)
  int nbytes=nbits/8;
    2784:	cmp	r2, #0
    2786:	str	r3, [sp, #4]
    2788:	mov	r6, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    278a:	ldr	r3, [pc, #180]	; (2840 <headerInit(long, long, long, int)+0xc0>)
  int nbytes=nbits/8;
    278c:	it	lt
    278e:	addlt	r6, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2790:	str	r0, [r4, #24]
{
    2792:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2794:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    2796:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    279a:	asrs	r6, r6, #3
  wav_hdr.nFormatTag=1;
    279c:	movs	r2, #16
  memcpy(wav_hdr.wId,"WAVE",4);
    279e:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nBitsPerSamples=nbits;
    27a2:	strh	r5, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27a4:	muls	r0, r6
  memcpy(wav_hdr.wId,"WAVE",4);
    27a6:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    27a8:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27ac:	muls	r0, r1
  wav_hdr.nBlockAlign=nchan*nbytes;
    27ae:	smulbb	r1, r1, r6
  memcpy(wav_hdr.fId,"fmt ",4);
    27b2:	add.w	r3, r3, #1974272	; 0x1e2000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27b6:	str	r0, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    27b8:	add.w	r0, r4, #44	; 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    27bc:	addw	r3, r3, #3087	; 0xc0f
  wav_hdr.nBlockAlign=nchan*nbytes;
    27c0:	strh	r1, [r4, #32]
  strcpy(&wav_hdr.info[0], MAGIC);
    27c2:	ldr	r1, [pc, #128]	; (2844 <headerInit(long, long, long, int)+0xc4>)
  memcpy(wav_hdr.fId,"fmt ",4);
    27c4:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    27c6:	add.w	r3, r3, #1090519040	; 0x41000000
    27ca:	subw	r3, r3, #3074	; 0xc02
    27ce:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    27d2:	add.w	r3, r3, #218107136	; 0xd000d00
    27d6:	add.w	r3, r3, #15859712	; 0xf20000
    27da:	adds	r3, #5
    27dc:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    27de:	mov.w	r3, #504	; 0x1f8
    27e2:	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    27e4:	mov.w	r3, #460	; 0x1cc
    27e8:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    27ea:	movs	r3, #0
    27ec:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    27f0:	mov.w	r3, #65537	; 0x10001
    27f4:	strd	r2, r3, [r4, #16]
  strcpy(&wav_hdr.info[0], MAGIC);
    27f8:	bl	df7c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    27fc:	bl	273c <timeStamp()>
    2800:	mov	r1, r0
    2802:	add.w	r0, r4, #48	; 0x30
    2806:	bl	df7c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    280a:	ldr	r2, [sp, #4]
    280c:	ldr	r1, [pc, #56]	; (2848 <headerInit(long, long, long, int)+0xc8>)
    280e:	add.w	r0, r4, #64	; 0x40
    2812:	bl	d66c <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    2816:	adds	r4, #74	; 0x4a
    2818:	bl	2584 <getStore()>
    281c:	add.w	r3, r0, #32
    2820:	ldr.w	r2, [r0], #4
    2824:	cmp	r0, r3
    2826:	str.w	r2, [r4], #4
    282a:	bne.n	2820 <headerInit(long, long, long, int)+0xa0>
  strcpy(&wav_hdr.info[62]," end");
    282c:	ldr	r1, [pc, #28]	; (284c <headerInit(long, long, long, int)+0xcc>)
    282e:	ldr	r0, [pc, #32]	; (2850 <headerInit(long, long, long, int)+0xd0>)
    2830:	bl	df7c <strcpy>
}
    2834:	ldr	r0, [pc, #4]	; (283c <headerInit(long, long, long, int)+0xbc>)
    2836:	add	sp, #8
    2838:	pop	{r4, r5, r6, pc}
    283a:	nop
    283c:	.word	0x200269f4
    2840:	.word	0x46464952
    2844:	.word	0x20007ad0
    2848:	.word	0x20007ad5
    284c:	.word	0x20007ada
    2850:	.word	0x20026a5e

00002854 <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2854:	ldr	r3, [pc, #12]	; (2864 <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2856:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2858:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    285c:	add	r2, r0
}
    285e:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2860:	str	r2, [r3, #4]
}
    2862:	bx	lr
    2864:	.word	0x200269f4

00002868 <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2868:	ldr	r3, [pc, #76]	; (28b8 <writeHeader(char*)+0x50>)
    286a:	ldr	r2, [r3, #72]	; 0x48
{ 
    286c:	push	{r4, r5, r6, lr}
    286e:	mov	r6, r0
    2870:	cbz	r2, 28a6 <writeHeader(char*)+0x3e>
    2872:	ldr	r4, [r2, #20]
    2874:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2876:	mov	r2, r4
    2878:	mov	r3, r5
    287a:	ldr	r1, [pc, #64]	; (28bc <writeHeader(char*)+0x54>)
    287c:	ldr	r0, [pc, #64]	; (28c0 <writeHeader(char*)+0x58>)
    287e:	bl	b5c0 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2882:	movs	r3, #0
    2884:	movs	r2, #0
    2886:	ldr	r0, [pc, #60]	; (28c4 <writeHeader(char*)+0x5c>)
    2888:	bl	26d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write(wav_hdr,512);
    288c:	mov.w	r2, #512	; 0x200
    2890:	mov	r1, r6
    2892:	ldr	r0, [pc, #48]	; (28c4 <writeHeader(char*)+0x5c>)
    2894:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  file.seekSet(fpos);
    2898:	mov	r2, r4
    289a:	mov	r3, r5
    289c:	ldr	r0, [pc, #36]	; (28c4 <writeHeader(char*)+0x5c>)
}
    289e:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    28a2:	b.w	26d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    28a6:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    28a8:	cbz	r3, 28b0 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    28aa:	ldrd	r4, r5, [r3]
    28ae:	b.n	2876 <writeHeader(char*)+0xe>
    28b0:	mov	r4, r3
    28b2:	mov	r5, r3
    28b4:	b.n	2876 <writeHeader(char*)+0xe>
    28b6:	nop
    28b8:	.word	0x20027384
    28bc:	.word	0x20007b71
    28c0:	.word	0x20008944
    28c4:	.word	0x20027394

000028c8 <makeHeader(long*)>:
{
    28c8:	push	{r4, lr}
    28ca:	sub	sp, #32
    28cc:	mov	r4, r0
    rtc_get_datetime(&t);
    28ce:	add	r0, sp, #24
    28d0:	bl	3488 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    28d4:	ldrsb.w	r3, [sp, #31]
    28d8:	ldr	r2, [pc, #120]	; (2954 <makeHeader(long*)+0x8c>)
    28da:	mov	r0, r4
    28dc:	str	r3, [sp, #16]
    28de:	ldrsb.w	r3, [sp, #30]
    28e2:	ldr	r1, [pc, #116]	; (2958 <makeHeader(long*)+0x90>)
    28e4:	str	r3, [sp, #12]
    28e6:	ldrsb.w	r3, [sp, #29]
    28ea:	str	r3, [sp, #8]
    28ec:	ldrsb.w	r3, [sp, #27]
    28f0:	str	r3, [sp, #4]
    28f2:	ldrsb.w	r3, [sp, #26]
    28f6:	str	r3, [sp, #0]
    28f8:	ldrsh.w	r3, [sp, #24]
    28fc:	bl	d66c <sprintf>
    header[5] = 20;          // SW version
    2900:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2902:	movs	r0, #1
    header[5] = 20;          // SW version
    2904:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2906:	ldr	r3, [pc, #84]	; (295c <makeHeader(long*)+0x94>)
    header[8] = NCHAN_ACQ;
    2908:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    290a:	ldr	r3, [r3, #0]
    290c:	str	r3, [r4, #24]
    header[7] = fsamp;
    290e:	ldr	r3, [pc, #80]	; (2960 <makeHeader(long*)+0x98>)
    2910:	ldr	r3, [r3, #0]
    2912:	str	r3, [r4, #28]
    header[9] = t_acq;
    2914:	ldr	r3, [pc, #76]	; (2964 <makeHeader(long*)+0x9c>)
    2916:	ldr	r3, [r3, #0]
    2918:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    291a:	ldr	r3, [pc, #76]	; (2968 <makeHeader(long*)+0xa0>)
    291c:	ldr	r3, [r3, #0]
    291e:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2920:	ldr	r3, [pc, #72]	; (296c <makeHeader(long*)+0xa4>)
    2922:	ldr	r3, [r3, #0]
    2924:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2926:	ldr	r3, [pc, #72]	; (2970 <makeHeader(long*)+0xa8>)
    2928:	ldrh	r3, [r3, #0]
    292a:	sxth	r3, r3
    292c:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    292e:	ldr	r3, [pc, #68]	; (2974 <makeHeader(long*)+0xac>)
    2930:	ldrh	r3, [r3, #0]
    2932:	sxth	r3, r3
    2934:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2936:	ldr	r3, [pc, #64]	; (2978 <makeHeader(long*)+0xb0>)
    2938:	ldrh	r3, [r3, #0]
    293a:	sxth	r3, r3
    293c:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    293e:	ldr	r3, [pc, #60]	; (297c <makeHeader(long*)+0xb4>)
    2940:	ldrh	r3, [r3, #0]
    2942:	sxth	r3, r3
    2944:	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    2946:	mov.w	r3, #1431655765	; 0x55555555
    294a:	str.w	r3, [r4, #508]	; 0x1fc
}
    294e:	add	sp, #32
    2950:	pop	{r4, pc}
    2952:	nop
    2954:	.word	0x20007ad0
    2958:	.word	0x20007adf
    295c:	.word	0x2000b9c8
    2960:	.word	0x20008ef0
    2964:	.word	0x20008f0c
    2968:	.word	0x20008f10
    296c:	.word	0x20008f14
    2970:	.word	0x20027b94
    2974:	.word	0x20008f1c
    2978:	.word	0x20027b8c
    297c:	.word	0x20027b8e

00002980 <checkEndOfFile(short)>:
  if(state==RUNNING)
    2980:	cmp	r0, #2
{ 
    2982:	push	{r4, lr}
    2984:	mov	r4, r0
  if(state==RUNNING)
    2986:	bne.n	29b0 <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2988:	bl	abcc <rtc_get>
    uint32_t dt1 = tt % t_acq;
    298c:	ldr	r3, [pc, #60]	; (29cc <checkEndOfFile(short)+0x4c>)
    298e:	ldr	r2, [r3, #0]
    2990:	udiv	r3, r0, r2
    2994:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2998:	ldr	r2, [pc, #52]	; (29d0 <checkEndOfFile(short)+0x50>)
    299a:	ldr	r1, [r2, #0]
    dta = dt1;
    299c:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    299e:	cmp	r3, r1
    29a0:	bcs.n	29b0 <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    29a2:	ldr	r3, [pc, #48]	; (29d4 <checkEndOfFile(short)+0x54>)
    29a4:	ldr	r2, [pc, #48]	; (29d8 <checkEndOfFile(short)+0x58>)
    29a6:	ldr	r4, [r3, #0]
    29a8:	ldr	r1, [r2, #0]
    29aa:	cmp	r4, r1
    29ac:	bhi.n	29b4 <checkEndOfFile(short)+0x34>
    29ae:	movs	r4, #3
}
    29b0:	mov	r0, r4
    29b2:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    29b4:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29b6:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    29b8:	udiv	r2, r0, r3
    29bc:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29c0:	cmp	r0, r4
    29c2:	ite	cc
    29c4:	movcc	r4, #3
    29c6:	movcs	r4, #4
    29c8:	b.n	29b0 <checkEndOfFile(short)+0x30>
    29ca:	nop
    29cc:	.word	0x20008f0c
    29d0:	.word	0x20026e3c
    29d4:	.word	0x20008f14
    29d8:	.word	0x20008f10

000029dc <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    29dc:	ldr	r3, [pc, #12]	; (29ec <newFolder(int)+0x10>)
    29de:	ldr	r2, [r3, #0]
    29e0:	cmp	r2, r0
  d0=d;
    29e2:	itte	ne
    29e4:	strne	r0, [r3, #0]
  return 1;
    29e6:	movne	r0, #1
  if(d==d0) return 0; // same day
    29e8:	moveq	r0, #0
}
    29ea:	bx	lr
    29ec:	.word	0x20008954

000029f0 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    29f0:	push	{r4, lr}
    29f2:	sub	sp, #24
    29f4:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    29f6:	add	r0, sp, #16
    29f8:	bl	3488 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    29fc:	ldrsb.w	r1, [sp, #21]
    2a00:	mov	r0, r1
    2a02:	bl	29dc <newFolder(int)>
    2a06:	cbz	r0, 2a42 <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2a08:	ldrsb.w	r3, [sp, #19]
    2a0c:	mov	r0, r4
    2a0e:	ldr	r2, [pc, #56]	; (2a48 <newDirectory(char*)+0x58>)
    2a10:	str	r3, [sp, #8]
    2a12:	ldrsb.w	r3, [sp, #18]
    2a16:	str	r1, [sp, #12]
    2a18:	str	r3, [sp, #4]
    2a1a:	ldrsh.w	r3, [sp, #16]
    2a1e:	ldr	r1, [pc, #44]	; (2a4c <newDirectory(char*)+0x5c>)
    2a20:	str	r3, [sp, #0]
    2a22:	ldr	r3, [pc, #44]	; (2a50 <newDirectory(char*)+0x60>)
    2a24:	ldr	r3, [r3, #0]
    2a26:	bl	d66c <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    2a2a:	ldr	r0, [pc, #40]	; (2a54 <newDirectory(char*)+0x64>)
    2a2c:	bl	b588 <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    2a30:	ldr	r1, [pc, #36]	; (2a58 <newDirectory(char*)+0x68>)
    2a32:	ldr	r0, [pc, #32]	; (2a54 <newDirectory(char*)+0x64>)
    2a34:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    2a38:	ldr	r0, [pc, #24]	; (2a54 <newDirectory(char*)+0x64>)
    2a3a:	mov	r1, r4
    2a3c:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2a40:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2a42:	add	sp, #24
    2a44:	pop	{r4, pc}
    2a46:	nop
    2a48:	.word	0x20007b7c
    2a4c:	.word	0x20007b7e
    2a50:	.word	0x2000b9c8
    2a54:	.word	0x20008944
    2a58:	.word	0x20007f40

00002a5c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2a5c:	push	{r4, lr}
    2a5e:	sub	sp, #32
    2a60:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2a62:	add	r0, sp, #24
    2a64:	bl	3488 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2a68:	ldr	r3, [pc, #92]	; (2ac8 <newFileName(char*)+0x6c>)
    2a6a:	ldrsb.w	r0, [sp, #31]
    2a6e:	ldrh	r2, [r3, #0]
    2a70:	ldrsb.w	r1, [sp, #30]
    2a74:	sxth	r2, r2
    2a76:	ldrsb.w	r3, [sp, #29]
    2a7a:	cbnz	r2, 2ab8 <newFileName(char*)+0x5c>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a7c:	str	r3, [sp, #8]
    2a7e:	ldrsb.w	r3, [sp, #27]
    2a82:	ldr	r2, [pc, #72]	; (2acc <newFileName(char*)+0x70>)
    2a84:	str	r3, [sp, #4]
    2a86:	ldrsb.w	r3, [sp, #26]
    2a8a:	strd	r1, r0, [sp, #12]
    2a8e:	str	r3, [sp, #0]
    2a90:	mov	r0, r4
    2a92:	ldrsh.w	r3, [sp, #24]
    2a96:	ldr	r1, [pc, #56]	; (2ad0 <newFileName(char*)+0x74>)
    2a98:	bl	d66c <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2a9c:	ldr	r0, [pc, #52]	; (2ad4 <newFileName(char*)+0x78>)
    2a9e:	bl	b588 <Print::println()>
    2aa2:	ldr	r1, [pc, #52]	; (2ad8 <newFileName(char*)+0x7c>)
    2aa4:	ldr	r0, [pc, #44]	; (2ad4 <newFileName(char*)+0x78>)
    2aa6:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    2aaa:	mov	r1, r4
    2aac:	ldr	r0, [pc, #36]	; (2ad4 <newFileName(char*)+0x78>)
    2aae:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    return 1;
}
    2ab2:	movs	r0, #1
    2ab4:	add	sp, #32
    2ab6:	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    2ab8:	strd	r1, r0, [sp]
    2abc:	ldr	r2, [pc, #12]	; (2acc <newFileName(char*)+0x70>)
    2abe:	mov	r0, r4
    2ac0:	ldr	r1, [pc, #24]	; (2adc <newFileName(char*)+0x80>)
    2ac2:	bl	d66c <sprintf>
    2ac6:	b.n	2a9c <newFileName(char*)+0x40>
    2ac8:	.word	0x20027b94
    2acc:	.word	0x20007b39
    2ad0:	.word	0x20007b3b
    2ad4:	.word	0x20008944
    2ad8:	.word	0x20007f40
    2adc:	.word	0x20007b5d

00002ae0 <getAlarmTime(unsigned long)>:
#include "core_pins.h"

uint32_t getAlarmTime(uint32_t secs)
{
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2ae0:	ldr	r2, [pc, #132]	; (2b68 <getAlarmTime(unsigned long)+0x88>)
    2ae2:	udiv	r3, r0, r2
    2ae6:	mls	r3, r2, r3, r0
    2aea:	mov.w	r2, #3600	; 0xe10
    2aee:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2af2:	ldr	r2, [pc, #120]	; (2b6c <getAlarmTime(unsigned long)+0x8c>)
    2af4:	ldr	r1, [r2, #0]
    2af6:	cmp	r1, r3
{
    2af8:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2afa:	bhi.n	2b04 <getAlarmTime(unsigned long)+0x24>
    2afc:	ldr	r1, [pc, #112]	; (2b70 <getAlarmTime(unsigned long)+0x90>)
    2afe:	ldr	r1, [r1, #0]
    2b00:	cmp	r1, r3
    2b02:	bhi.n	2b2c <getAlarmTime(unsigned long)+0x4c>
    2b04:	ldr	r5, [pc, #108]	; (2b74 <getAlarmTime(unsigned long)+0x94>)
    2b06:	ldr	r1, [r5, #0]
    2b08:	cmp	r1, r3
    2b0a:	bhi.n	2b14 <getAlarmTime(unsigned long)+0x34>
    2b0c:	ldr	r1, [pc, #104]	; (2b78 <getAlarmTime(unsigned long)+0x98>)
    2b0e:	ldr	r1, [r1, #0]
    2b10:	cmp	r1, r3
    2b12:	bhi.n	2b2c <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2b14:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2b16:	ldr	r1, [pc, #80]	; (2b68 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2b18:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2b1a:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2b1e:	bhi.n	2b3c <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2b20:	ldr	r6, [pc, #76]	; (2b70 <getAlarmTime(unsigned long)+0x90>)
    2b22:	ldr	r6, [r6, #0]
    2b24:	cmp	r6, r3
    2b26:	bhi.n	2b4a <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2b28:	ldr	r0, [r5, #0]
    2b2a:	b.n	2b3e <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2b2c:	ldr	r2, [pc, #76]	; (2b7c <getAlarmTime(unsigned long)+0x9c>)
    2b2e:	ldr	r3, [r2, #0]
    2b30:	udiv	r3, r0, r3
    2b34:	ldr	r0, [r2, #0]
    2b36:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2b3a:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2b3c:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2b3e:	mov.w	r3, #3600	; 0xe10
    2b42:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b44:	mla	r0, r1, r4, r0
    2b48:	b.n	2b3a <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2b4a:	ldr	r5, [pc, #44]	; (2b78 <getAlarmTime(unsigned long)+0x98>)
    2b4c:	ldr	r6, [r5, #0]
    2b4e:	cmp	r6, r3
    2b50:	bhi.n	2b3a <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b52:	ldr	r0, [r2, #0]
    2b54:	ldr	r3, [r5, #0]
    2b56:	subs	r0, r0, r3
    2b58:	mov.w	r3, #3600	; 0xe10
    2b5c:	muls	r0, r3
    2b5e:	add.w	r0, r0, #86016	; 0x15000
    2b62:	add.w	r0, r0, #384	; 0x180
    2b66:	b.n	2b44 <getAlarmTime(unsigned long)+0x64>
    2b68:	.word	0x00015180
    2b6c:	.word	0x20027b48
    2b70:	.word	0x20008f00
    2b74:	.word	0x20008f04
    2b78:	.word	0x20008f08
    2b7c:	.word	0x20008f14

00002b80 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    2b80:	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
    2b82:	ldr	r3, [pc, #96]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2b84:	ldr	r5, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2b86:	ldr	r2, [r3, #76]	; 0x4c
    2b88:	orr.w	r2, r2, #1
    2b8c:	str	r2, [r3, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2b8e:	ldr	r2, [r3, #56]	; 0x38
    2b90:	bic.w	r2, r2, #2
    2b94:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2b96:	ldr	r2, [r3, #56]	; 0x38
    2b98:	lsls	r2, r2, #30
    2b9a:	bmi.n	2b96 <do_hibernate(unsigned long)+0x16>

    __disable_irq();
    2b9c:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2b9e:	ldr	r4, [pc, #68]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2ba0:	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2ba2:	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2ba4:	ldr	r1, [r4, #84]	; 0x54
    2ba6:	ldr	r2, [r4, #80]	; 0x50
    2ba8:	cmp	r1, r3
    2baa:	bne.n	2ba0 <do_hibernate(unsigned long)+0x20>
    2bac:	cmp	r2, r0
    2bae:	bne.n	2ba0 <do_hibernate(unsigned long)+0x20>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2bb0:	lsrs	r3, r3, #15

    //set alarm
    secs = getAlarmTime(secs);
    2bb2:	orr.w	r0, r3, r0, lsl #17
    2bb6:	bl	2ae0 <getAlarmTime(unsigned long)>

    SNVS_LPTAR = secs;
    2bba:	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2bbc:	ldr	r4, [pc, #36]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2bbe:	ldr	r3, [r4, #88]	; 0x58
    2bc0:	cmp	r3, r0
    2bc2:	bne.n	2bbe <do_hibernate(unsigned long)+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2bc4:	orr.w	r5, r5, #2
    2bc8:	str	r5, [r4, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2bca:	ldr	r3, [r4, #56]	; 0x38
    2bcc:	lsls	r3, r3, #30
    2bce:	bpl.n	2bca <do_hibernate(unsigned long)+0x4a>

    __enable_irq();
    2bd0:	cpsie	i
  
    // shutdown acq board
    acqPower(LOW);
    2bd2:	movs	r0, #0
    2bd4:	bl	32ba <acqPower(int)>
    //
    SNVS_LPCR |= (1 << 6); // turn off power
    2bd8:	ldr	r3, [r4, #56]	; 0x38
    2bda:	orr.w	r3, r3, #64	; 0x40
    2bde:	str	r3, [r4, #56]	; 0x38
    while (1) asm("wfi");  
    2be0:	wfi
    2be2:	b.n	2be0 <do_hibernate(unsigned long)+0x60>
    2be4:	.word	0x400d4000

00002be8 <storeData(short)>:
{
    2be8:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2bea:	mov	r4, r0
{
    2bec:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2bee:	cmp	r0, #0
    2bf0:	bne.n	2cf2 <storeData(short)+0x10a>
        if(newDirectory(dirName))
    2bf2:	ldr	r0, [pc, #488]	; (2ddc <storeData(short)+0x1f4>)
    2bf4:	bl	29f0 <newDirectory(char*)>
    2bf8:	cmp	r0, #0
    2bfa:	beq.n	2c92 <storeData(short)+0xaa>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2bfc:	ldr	r5, [pc, #480]	; (2de0 <storeData(short)+0x1f8>)
    2bfe:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2c00:	ldr.w	r1, [r3, #1152]	; 0x480
    2c04:	cbz	r1, 2c34 <storeData(short)+0x4c>
    return tmp.open(this, path, O_RDONLY);
    2c06:	mov	r3, r4
    2c08:	ldr	r2, [pc, #464]	; (2ddc <storeData(short)+0x1f4>)
    2c0a:	mov	r0, sp
    2c0c:	str	r4, [sp, #0]
    2c0e:	bl	68c6 <FatFile::open(FatVolume*, char const*, int)>
    2c12:	cbnz	r0, 2c6e <storeData(short)+0x86>
    2c14:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2c16:	ldr.w	r1, [r3, #1152]	; 0x480
    2c1a:	cbnz	r1, 2c4c <storeData(short)+0x64>
    2c1c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2c20:	cbz	r0, 2c60 <storeData(short)+0x78>
  ExFatFile() {}
    2c22:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2c24:	movs	r3, #1
    2c26:	add.w	r1, r0, #1096	; 0x448
    2c2a:	ldr	r2, [pc, #432]	; (2ddc <storeData(short)+0x1f4>)
    2c2c:	mov	r0, sp
    2c2e:	bl	5c32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2c32:	b.n	2c5e <storeData(short)+0x76>
    2c34:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2c38:	cmp	r0, #0
    2c3a:	beq.n	2c14 <storeData(short)+0x2c>
    return tmp.open(this, path, O_RDONLY);
    2c3c:	mov	r3, r1
    2c3e:	str	r1, [sp, #48]	; 0x30
    2c40:	ldr	r2, [pc, #408]	; (2ddc <storeData(short)+0x1f4>)
    2c42:	mov	r1, r0
    2c44:	mov	r0, sp
    2c46:	bl	53ba <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c4a:	b.n	2c12 <storeData(short)+0x2a>
    2c4c:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2c4e:	ldr	r2, [pc, #396]	; (2ddc <storeData(short)+0x1f4>)
    2c50:	add.w	r1, r1, #1096	; 0x448
    2c54:	mov	r0, sp
    2c56:	str	r3, [sp, #0]
    2c58:	movs	r3, #1
    2c5a:	bl	69ce <FatFile::mkdir(FatFile*, char const*, bool)>
    2c5e:	cbnz	r0, 2c6e <storeData(short)+0x86>
    2c60:	ldr	r1, [pc, #384]	; (2de4 <storeData(short)+0x1fc>)
            {   Serial.println("Failing open file");
    2c62:	ldr	r0, [pc, #388]	; (2de8 <storeData(short)+0x200>)
    2c64:	bl	2716 <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2c68:	mov.w	r4, #4294967295
    2c6c:	b.n	2dd4 <storeData(short)+0x1ec>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2c6e:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2c70:	ldr.w	r0, [r3, #1152]	; 0x480
    2c74:	cbz	r0, 2c82 <storeData(short)+0x9a>
    2c76:	ldr	r1, [pc, #356]	; (2ddc <storeData(short)+0x1f4>)
    2c78:	bl	7228 <FatVolume::chdir(char const*)>
    2c7c:	cbnz	r0, 2c92 <storeData(short)+0xaa>
    2c7e:	ldr	r1, [pc, #364]	; (2dec <storeData(short)+0x204>)
    2c80:	b.n	2c62 <storeData(short)+0x7a>
    2c82:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2c86:	cmp	r0, #0
    2c88:	beq.n	2c7e <storeData(short)+0x96>
    2c8a:	ldr	r1, [pc, #336]	; (2ddc <storeData(short)+0x1f4>)
    2c8c:	bl	5804 <ExFatVolume::chdir(char const*)>
    2c90:	b.n	2c7c <storeData(short)+0x94>
        if(newFileName(fileName))
    2c92:	ldr	r0, [pc, #348]	; (2df0 <storeData(short)+0x208>)
    2c94:	bl	2a5c <newFileName(char*)>
    2c98:	cmp	r0, #0
    2c9a:	beq.n	2c68 <storeData(short)+0x80>
            file = sd->open(fileName, FILE_WRITE); 
    2c9c:	ldr	r1, [pc, #320]	; (2de0 <storeData(short)+0x1f8>)
    2c9e:	movw	r3, #16898	; 0x4202
    2ca2:	ldr	r2, [pc, #332]	; (2df0 <storeData(short)+0x208>)
    2ca4:	mov	r0, sp
    2ca6:	ldr	r1, [r1, #0]
    2ca8:	bl	7bb8 <FsVolume::open(char const*, int)>
class Print
    2cac:	ldr	r4, [pc, #324]	; (2df4 <storeData(short)+0x20c>)
    2cae:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2cb0:	add	r1, sp, #16
    2cb2:	add.w	r0, r4, #16
    2cb6:	str	r3, [r4, #4]
    2cb8:	ldr	r3, [sp, #8]
    2cba:	str	r3, [r4, #8]
    2cbc:	ldrb.w	r3, [sp, #12]
    2cc0:	strb	r3, [r4, #12]
    2cc2:	bl	79ae <FsBaseFile::operator=(FsBaseFile const&)>
    2cc6:	mov	r0, sp
    2cc8:	bl	edc <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ccc:	ldr	r3, [r4, #72]	; 0x48
    2cce:	cbz	r3, 2ce8 <storeData(short)+0x100>
    {   nbuf=0;
    2cd0:	ldr	r3, [pc, #292]	; (2df8 <storeData(short)+0x210>)
    2cd2:	movs	r2, #0
    2cd4:	str	r2, [r3, #0]
        if(proc==0)
    2cd6:	ldr	r3, [pc, #292]	; (2dfc <storeData(short)+0x214>)
    2cd8:	ldrh	r3, [r3, #0]
    2cda:	sxth	r3, r3
    2cdc:	cbz	r3, 2d38 <storeData(short)+0x150>
          makeHeader(fileHeader);
    2cde:	ldr	r0, [pc, #288]	; (2e00 <storeData(short)+0x218>)
    2ce0:	bl	28c8 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2ce4:	ldr	r1, [pc, #280]	; (2e00 <storeData(short)+0x218>)
    2ce6:	b.n	2d4a <storeData(short)+0x162>
    2ce8:	ldr	r3, [r4, #76]	; 0x4c
    2cea:	cmp	r3, #0
    2cec:	bne.n	2cd0 <storeData(short)+0xe8>
            {   Serial.println("Failing open file");
    2cee:	ldr	r1, [pc, #276]	; (2e04 <storeData(short)+0x21c>)
    2cf0:	b.n	2c62 <storeData(short)+0x7a>
    if(status==OPENED) // file is open: write first record (header)
    2cf2:	cmp	r0, #1
    2cf4:	beq.n	2cd0 <storeData(short)+0xe8>
    if(status==RUNNING) // file is open and header written: store data records
    2cf6:	cmp	r0, #2
    2cf8:	beq.n	2d5a <storeData(short)+0x172>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2cfa:	subs	r3, r4, #3
    2cfc:	uxth	r3, r3
    2cfe:	cmp	r3, #2
    2d00:	bhi.n	2dd4 <storeData(short)+0x1ec>
    2d02:	ldr	r3, [pc, #240]	; (2df4 <storeData(short)+0x20c>)
    2d04:	ldr	r2, [r3, #72]	; 0x48
    2d06:	cbnz	r2, 2d0c <storeData(short)+0x124>
    2d08:	ldr	r3, [r3, #76]	; 0x4c
    2d0a:	cbz	r3, 2d2c <storeData(short)+0x144>
        {   if(proc==0)
    2d0c:	ldr	r3, [pc, #236]	; (2dfc <storeData(short)+0x214>)
    2d0e:	ldrh	r3, [r3, #0]
    2d10:	sxth	r3, r3
    2d12:	cbnz	r3, 2d26 <storeData(short)+0x13e>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2d14:	ldr	r3, [pc, #224]	; (2df8 <storeData(short)+0x210>)
    2d16:	mov.w	r0, #4608	; 0x1200
    2d1a:	ldr	r3, [r3, #0]
    2d1c:	muls	r0, r3
    2d1e:	bl	2854 <headerUpdate(long)>
              writeHeader(hdr);
    2d22:	bl	2868 <writeHeader(char*)>
            file.close();
    2d26:	ldr	r0, [pc, #224]	; (2e08 <storeData(short)+0x220>)
    2d28:	bl	7984 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2d2c:	cmp	r4, #4
    2d2e:	bne.n	2dcc <storeData(short)+0x1e4>
        { do_hibernate(t_rep);
    2d30:	ldr	r3, [pc, #216]	; (2e0c <storeData(short)+0x224>)
    2d32:	ldr	r0, [r3, #0]
    2d34:	bl	2b80 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2d38:	ldr	r3, [pc, #212]	; (2e10 <storeData(short)+0x228>)
    2d3a:	movs	r1, #1
    2d3c:	movs	r2, #24
    2d3e:	ldr	r0, [r3, #0]
    2d40:	ldr	r3, [pc, #208]	; (2e14 <storeData(short)+0x22c>)
    2d42:	ldr	r3, [r3, #0]
    2d44:	bl	2780 <headerInit(long, long, long, int)>
    2d48:	mov	r1, r0
        if(file.write(hdr,512) < 512) 
    2d4a:	mov.w	r2, #512	; 0x200
    2d4e:	ldr	r0, [pc, #184]	; (2e08 <storeData(short)+0x220>)
    2d50:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d54:	cmp.w	r0, #512	; 0x200
    2d58:	bcc.n	2dc8 <storeData(short)+0x1e0>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2d5a:	mov.w	r2, #4608	; 0x1200
    2d5e:	ldr	r1, [pc, #184]	; (2e18 <storeData(short)+0x230>)
    2d60:	ldr	r0, [pc, #164]	; (2e08 <storeData(short)+0x220>)
    2d62:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d66:	cmp.w	r0, #4608	; 0x1200
    2d6a:	mov	r4, r0
    2d6c:	ldr	r5, [pc, #136]	; (2df8 <storeData(short)+0x210>)
    2d6e:	bcs.n	2dbe <storeData(short)+0x1d6>
	size_t print(const char s[])			{ return write(s); }
    2d70:	ldr	r1, [pc, #168]	; (2e1c <storeData(short)+0x234>)
    2d72:	ldr	r0, [pc, #116]	; (2de8 <storeData(short)+0x200>)
    2d74:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2d78:	movs	r3, #0
    2d7a:	movs	r2, #10
    2d7c:	mov	r1, r4
    2d7e:	ldr	r0, [pc, #104]	; (2de8 <storeData(short)+0x200>)
          status=DOCLOSE; 
    2d80:	movs	r4, #3
    2d82:	bl	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    2d86:	ldr	r1, [pc, #152]	; (2e20 <storeData(short)+0x238>)
    2d88:	ldr	r0, [pc, #92]	; (2de8 <storeData(short)+0x200>)
    2d8a:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2d8e:	movs	r1, #2
    2d90:	ldr	r0, [pc, #84]	; (2de8 <storeData(short)+0x200>)
    2d92:	bl	b576 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2d96:	ldr	r0, [pc, #80]	; (2de8 <storeData(short)+0x200>)
    2d98:	bl	b588 <Print::println()>
        disk_count++;
    2d9c:	ldr	r2, [pc, #132]	; (2e24 <storeData(short)+0x23c>)
    2d9e:	ldr	r3, [r2, #0]
    2da0:	adds	r3, #1
    2da2:	str	r3, [r2, #0]
    2da4:	mov.w	r2, #1000	; 0x3e8
    2da8:	ldr	r3, [r5, #0]
    2daa:	udiv	r1, r3, r2
    2dae:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2db2:	cmp	r3, #0
    2db4:	bne.n	2cfa <storeData(short)+0x112>
    BaseFile::sync();
    2db6:	ldr	r0, [pc, #80]	; (2e08 <storeData(short)+0x220>)
    2db8:	bl	2728 <FsBaseFile::sync()>
  }
    2dbc:	b.n	2cfa <storeData(short)+0x112>
          nbuf++;
    2dbe:	ldr	r3, [r5, #0]
    2dc0:	movs	r4, #2
    2dc2:	adds	r3, #1
    2dc4:	str	r3, [r5, #0]
    2dc6:	b.n	2d9c <storeData(short)+0x1b4>
        { status = DOCLOSE;
    2dc8:	movs	r4, #3
    2dca:	b.n	2cfa <storeData(short)+0x112>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    2dcc:	subs	r4, #3
    2dce:	it	ne
    2dd0:	movne.w	r4, #4294967295
}
    2dd4:	mov	r0, r4
    2dd6:	add	sp, #84	; 0x54
    2dd8:	pop	{r4, r5, pc}
    2dda:	nop
    2ddc:	.word	0x20027be4
    2de0:	.word	0x20008ef8
    2de4:	.word	0x20007dfa
    2de8:	.word	0x20008944
    2dec:	.word	0x20007e06
    2df0:	.word	0x20027c34
    2df4:	.word	0x20027384
    2df8:	.word	0x20027400
    2dfc:	.word	0x20027b94
    2e00:	.word	0x2000cbd0
    2e04:	.word	0x20007e12
    2e08:	.word	0x20027394
    2e0c:	.word	0x20008f14
    2e10:	.word	0x20008ef0
    2e14:	.word	0x2000b9c8
    2e18:	.word	0x2000b9d0
    2e1c:	.word	0x20007e24
    2e20:	.word	0x20007f48
    2e24:	.word	0x20027364

00002e28 <saveData(short)>:
    if(status==STOPPED) 
    2e28:	adds	r3, r0, #1
{
    2e2a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e2e:	mov	r4, r0
    if(status==STOPPED) 
    2e30:	bne.n	2e60 <saveData(short)+0x38>
      while(queue_isBusy()); //wait if acq writes to queue
    2e32:	bl	25a8 <queue_isBusy()>
    2e36:	mov	r5, r0
    2e38:	cmp	r0, #0
    2e3a:	bne.n	2e32 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    2e3c:	ldr	r0, [pc, #236]	; (2f2c <saveData(short)+0x104>)
    2e3e:	bl	2610 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2e42:	ldr	r3, [pc, #232]	; (2f2c <saveData(short)+0x104>)
    2e44:	ldr	r2, [pc, #232]	; (2f30 <saveData(short)+0x108>)
    2e46:	ldr.w	r1, [r3], #4
    2e4a:	str.w	r1, [r2, r5, lsl #2]
    2e4e:	adds	r5, #1
    2e50:	cmp	r5, #8
    2e52:	bne.n	2e46 <saveData(short)+0x1e>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2e54:	ldr	r3, [pc, #220]	; (2f34 <saveData(short)+0x10c>)
    2e56:	str.w	r5, [r3, #132]	; 0x84
}
    2e5a:	mov	r0, r4
    2e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2e60:	ldr	r3, [pc, #208]	; (2f34 <saveData(short)+0x10c>)
    2e62:	movs	r2, #8
    if(status<CLOSED) return status; // we are stopped: don't do anything
    2e64:	cmp	r0, #0
    2e66:	str.w	r2, [r3, #136]	; 0x88
    2e6a:	blt.n	2e5a <saveData(short)+0x32>
    status=checkEndOfFile(status);
    2e6c:	bl	2980 <checkEndOfFile(short)>
    2e70:	mov	r4, r0
    if(getDataCount() >= NDBL)
    2e72:	bl	258c <getDataCount()>
    2e76:	cmp	r0, #11
    2e78:	bls.n	2f22 <saveData(short)+0xfa>
      digitalWrite(13,HIGH);
    2e7a:	movs	r1, #1
    2e7c:	movs	r0, #13
    2e7e:	bl	ad54 <digitalWrite>
      if(proc==0)
    2e82:	ldr	r3, [pc, #180]	; (2f38 <saveData(short)+0x110>)
    2e84:	ldrh	r5, [r3, #0]
    2e86:	sxth	r5, r5
    2e88:	cbnz	r5, 2ef0 <saveData(short)+0xc8>
    2e8a:	ldr	r7, [pc, #160]	; (2f2c <saveData(short)+0x104>)
    2e8c:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2e8e:	bl	25a8 <queue_isBusy()>
    2e92:	mov	r6, r0
    2e94:	cmp	r0, #0
    2e96:	bne.n	2e8e <saveData(short)+0x66>
        for(int ii=0; ii<NDBL; ii++)
    2e98:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    2e9a:	mov	r0, r8
    2e9c:	bl	2610 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2ea0:	add.w	r8, r8, #512	; 0x200
    2ea4:	cmp	r5, #12
    2ea6:	bne.n	2e8e <saveData(short)+0x66>
    2ea8:	ldr	r2, [pc, #128]	; (2f2c <saveData(short)+0x104>)
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2eaa:	mov	r3, r6
    2eac:	ldr	r1, [pc, #128]	; (2f30 <saveData(short)+0x108>)
    2eae:	ldr.w	r0, [r2], #4
    2eb2:	str.w	r0, [r1, r3, lsl #2]
    2eb6:	adds	r3, #1
    2eb8:	cmp	r3, #8
    2eba:	bne.n	2eae <saveData(short)+0x86>
    2ebc:	ldr	r3, [pc, #124]	; (2f3c <saveData(short)+0x114>)
            outptr[jj++]=(inpp[ii]) &0xff;
    2ebe:	ldr.w	r2, [r7], #4
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2ec2:	adds	r6, #3
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2ec4:	adds	r3, #3
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    2ec6:	lsrs	r1, r2, #8
            outptr[jj++]=(inpp[ii]) &0xff;
    2ec8:	strb.w	r2, [r3, #-3]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2ecc:	cmp.w	r6, #4608	; 0x1200
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2ed0:	mov.w	r2, r2, lsr #16
            outptr[jj++]=(inpp[ii]>>8) &0xff;
    2ed4:	strb.w	r1, [r3, #-2]
            outptr[jj++]=(inpp[ii]>>16) &0xff;
    2ed8:	strb.w	r2, [r3, #-1]
          for(int ii=0; ii<MAX_TEMP_BUFFER;ii++)
    2edc:	bne.n	2ebe <saveData(short)+0x96>
      if(haveStore)
    2ede:	ldr	r3, [pc, #96]	; (2f40 <saveData(short)+0x118>)
    2ee0:	ldr	r3, [r3, #0]
    2ee2:	cmp	r3, #0
    2ee4:	beq.n	2e5a <saveData(short)+0x32>
        status=storeData(status);
    2ee6:	mov	r0, r4
}
    2ee8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    2eec:	b.w	2be8 <storeData(short)>
    2ef0:	ldr	r6, [pc, #72]	; (2f3c <saveData(short)+0x114>)
        for(int ii=0; ii<NDBL; ii++)
    2ef2:	movs	r7, #0
      if(proc==0)
    2ef4:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2ef6:	bl	25a8 <queue_isBusy()>
    2efa:	mov	r5, r0
    2efc:	cmp	r0, #0
    2efe:	bne.n	2ef6 <saveData(short)+0xce>
        for(int ii=0; ii<NDBL; ii++)
    2f00:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    2f02:	mov	r0, r8
    2f04:	bl	2610 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2f08:	add.w	r8, r8, #512	; 0x200
    2f0c:	cmp	r7, #12
    2f0e:	bne.n	2ef6 <saveData(short)+0xce>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    2f10:	ldr	r3, [pc, #28]	; (2f30 <saveData(short)+0x108>)
    2f12:	ldr.w	r2, [r6], #4
    2f16:	str.w	r2, [r3, r5, lsl #2]
    2f1a:	adds	r5, #1
    2f1c:	cmp	r5, #8
    2f1e:	bne.n	2f12 <saveData(short)+0xea>
    2f20:	b.n	2ede <saveData(short)+0xb6>
      digitalWrite(13,LOW);
    2f22:	movs	r1, #0
    2f24:	movs	r0, #13
    2f26:	bl	ad54 <digitalWrite>
    2f2a:	b.n	2e5a <saveData(short)+0x32>
    2f2c:	.word	0x20024ddc
    2f30:	.word	0x200273d8
    2f34:	.word	0x42004000
    2f38:	.word	0x20027b94
    2f3c:	.word	0x2000b9d0
    2f40:	.word	0x200273d4

00002f44 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    2f44:	ldr	r0, [pc, #28]	; (2f64 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2f46:	movs	r3, #0
    2f48:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    2f4c:	ldr	r1, [pc, #24]	; (2f68 <_GLOBAL__sub_I_t_acq+0x24>)
    2f4e:	strb	r3, [r0, #12]
    2f50:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    2f54:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2f58:	ldr	r3, [pc, #16]	; (2f6c <_GLOBAL__sub_I_t_acq+0x28>)
    2f5a:	ldr	r2, [pc, #20]	; (2f70 <_GLOBAL__sub_I_t_acq+0x2c>)
    2f5c:	str	r3, [r0, #0]
    2f5e:	b.w	b7b0 <__aeabi_atexit>
    2f62:	nop
    2f64:	.word	0x20027384
    2f68:	.word	0x00000edd
    2f6c:	.word	0x20000548
    2f70:	.word	0x20008960

00002f74 <filing_init()>:
{
    2f74:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f78:	ldr	r3, [pc, #132]	; (3000 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    2f7a:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f7c:	ldr	r2, [pc, #132]	; (3004 <filing_init()+0x90>)
    2f7e:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    2f82:	ldr.w	r9, [pc, #156]	; 3020 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f86:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    2f8a:	ldr.w	r8, [pc, #152]	; 3024 <filing_init()+0xb0>
    2f8e:	ldr	r7, [pc, #120]	; (3008 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f90:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    2f92:	ldr	r3, [pc, #120]	; (300c <filing_init()+0x98>)
    2f94:	ldr	r2, [pc, #120]	; (3010 <filing_init()+0x9c>)
    2f96:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    2f98:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    2f9c:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    2f9e:	movs	r1, #0
    2fa0:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    2fa4:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    2fa8:	strb.w	r1, [r5, #1224]	; 0x4c8
    2fac:	mov	r0, r6
    2fae:	bl	8da0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2fb2:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2fb4:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fb8:	bl	849c <SdioCard::errorCode() const>
    2fbc:	cbnz	r0, 2fe0 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2fbe:	movs	r3, #1
    2fc0:	ldr.w	r1, [r5, #1164]	; 0x48c
    2fc4:	mov	r0, r5
    2fc6:	mov	r2, r3
    2fc8:	bl	7ae4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2fcc:	cbz	r0, 2fe0 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    2fce:	ldr	r0, [pc, #56]	; (3008 <filing_init()+0x94>)
    2fd0:	ldr	r1, [pc, #64]	; (3014 <filing_init()+0xa0>)
    2fd2:	bl	2716 <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    2fd6:	movs	r0, #1
    2fd8:	ldr	r3, [pc, #60]	; (3018 <filing_init()+0xa4>)
    2fda:	str	r0, [r3, #0]
}
    2fdc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    2fe0:	mov	r1, r8
    2fe2:	mov	r0, r7
    2fe4:	bl	2716 <Print::println(char const*) [clone .isra.0]>
      delay(100);
    2fe8:	movs	r0, #100	; 0x64
    2fea:	bl	a9d0 <delay>
  for(int ii=0; ii<5;ii++)
    2fee:	subs	r4, #1
    2ff0:	bne.n	2f98 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    2ff2:	ldr	r0, [pc, #20]	; (3008 <filing_init()+0x94>)
    2ff4:	ldr	r1, [pc, #36]	; (301c <filing_init()+0xa8>)
    2ff6:	bl	2716 <Print::println(char const*) [clone .isra.0]>
  return 0;
    2ffa:	mov	r0, r4
    2ffc:	b.n	2fdc <filing_init()+0x68>
    2ffe:	nop
    3000:	.word	0x401f4400
    3004:	.word	0x2000b9c8
    3008:	.word	0x20008944
    300c:	.word	0x20026dfc
    3010:	.word	0x00002661
    3014:	.word	0x20007afb
    3018:	.word	0x200273d4
    301c:	.word	0x20007b1d
    3020:	.word	0x20008ef8
    3024:	.word	0x20007b0d

00003028 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    3028:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    302c:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    302e:	bl	abcc <rtc_get>
    3032:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    3034:	bl	a984 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3038:	ldr	r3, [pc, #604]	; (3298 <compress(void*)+0x270>)
  t1 = micros();
    303a:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    303c:	movs	r2, #0
    303e:	ldr	r3, [r3, #0]
    3040:	ldr.w	r1, [r4, r2, lsl #2]
    3044:	str.w	r1, [r3, r2, lsl #2]
    3048:	adds	r2, #1
    304a:	cmp	r2, #128	; 0x80
    304c:	bne.n	3040 <compress(void*)+0x18>
    304e:	subs	r4, #4
    3050:	add.w	r0, r3, #508	; 0x1fc
    3054:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    3056:	ldr.w	r1, [r2, #4]!
    305a:	ldr.w	r5, [r4, #4]!
    305e:	cmp	r0, r2
    3060:	sub.w	r1, r1, r5
    3064:	str	r1, [r2, #0]
    3066:	bne.n	3056 <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    3068:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    306a:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    306e:	cmp	r1, #0
    3070:	it	lt
    3072:	neglt	r1, r1
    3074:	cmp	r2, r1
    3076:	it	lt
    3078:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    307a:	cmp	r0, r3
    307c:	bne.n	306a <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    307e:	movs	r4, #2
    3080:	movs	r1, #1
    3082:	subs	r3, r4, #1
    3084:	lsl.w	r3, r1, r3
    3088:	cmp	r3, r2
    308a:	bgt.n	3092 <compress(void*)+0x6a>
    308c:	adds	r4, #1
    308e:	cmp	r4, #24
    3090:	bne.n	3082 <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    3092:	ldr	r2, [pc, #520]	; (329c <compress(void*)+0x274>)
    3094:	subs	r1, r4, #1
    3096:	ldr.w	r8, [pc, #536]	; 32b0 <compress(void*)+0x288>
    309a:	ldr.w	r3, [r2, r1, lsl #2]
    309e:	mov	fp, r8
    30a0:	adds	r3, #1
    30a2:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    30a6:	ldr	r3, [pc, #504]	; (32a0 <compress(void*)+0x278>)
    30a8:	ldr	r2, [r3, #0]
    30aa:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    30ac:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    30ae:	it	hi
    30b0:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    30b2:	movs	r3, #1
    30b4:	lsl.w	r0, r3, r4
    30b8:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    30ba:	ldr.w	r1, [r2, #4]!
    30be:	adds	r3, #1
    30c0:	ands	r1, r0
    30c2:	cmp	r3, #128	; 0x80
    30c4:	str	r1, [r2, #0]
    30c6:	bne.n	30ba <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30c8:	ldr	r5, [pc, #472]	; (32a4 <compress(void*)+0x27c>)
    30ca:	mov.w	r2, #512	; 0x200
    30ce:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    30d0:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30d4:	mov	r0, r5
    30d6:	bl	9444 <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    30da:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    30de:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    30e0:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    30e4:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    30e6:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    30ea:	ldr	r2, [pc, #444]	; (32a8 <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30ec:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    30ee:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    30f0:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    30f4:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30f8:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    30fc:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    30fe:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3100:	str	r3, [r5, #24]
    3102:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3104:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    3108:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    310a:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    310c:	str.w	r3, [fp]
  int nx = MBIT;
    3110:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3112:	str	r0, [r5, #20]
  {   nx -= nb;
    3114:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3118:	ldr.w	sl, [r5, r1, lsl #2]
    311c:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3120:	cmp.w	lr, #0
    3124:	ble.n	316e <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    3126:	lsl.w	r2, r2, lr
    312a:	mov	r3, lr
    312c:	orr.w	r2, r2, sl
    3130:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3134:	add.w	ip, ip, #1
    3138:	cmp.w	ip, #128	; 0x80
    313c:	bne.n	3114 <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    313e:	ldr.w	r8, [pc, #372]	; 32b4 <compress(void*)+0x28c>
    3142:	ldr.w	r4, [r8]
    3146:	add.w	r9, r4, r6
    314a:	cmp.w	r9, #128	; 0x80
    314e:	bgt.n	319e <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3150:	ldr	r0, [pc, #344]	; (32ac <compress(void*)+0x284>)
    3152:	lsls	r2, r6, #2
    3154:	ldr	r1, [pc, #332]	; (32a4 <compress(void*)+0x27c>)
    3156:	add.w	r0, r0, r4, lsl #2
    315a:	bl	9488 <memcpy>
    315e:	str.w	r9, [r8]
  int ret=1;
    3162:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    3166:	mov	r0, r9
    3168:	add	sp, #12
    316a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    316e:	add.w	r9, r1, #1
      else if(nx==0) 
    3172:	bne.n	3182 <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    3174:	orr.w	r2, sl, r2
          nx=MBIT;
    3178:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    317a:	str.w	r2, [r5, r1, lsl #2]
    317e:	mov	r1, r9
    3180:	b.n	3134 <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3182:	subs	r3, r4, r3
    3184:	lsr.w	r3, r2, r3
    3188:	orr.w	r3, r3, sl
    318c:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3190:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3194:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    3196:	lsls	r2, r3
    3198:	str.w	r2, [r5, r9, lsl #2]
    319c:	b.n	3134 <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    319e:	cmp	r4, #122	; 0x7a
    31a0:	ble.n	31ec <compress(void*)+0x1c4>
    31a2:	movs	r2, #0
    31a4:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    31a6:	ldr	r1, [pc, #260]	; (32ac <compress(void*)+0x284>)
    31a8:	mov	r0, r2
    31aa:	cmp	r3, #127	; 0x7f
    31ac:	bls.n	31e2 <compress(void*)+0x1ba>
    31ae:	cmp	r4, #128	; 0x80
    31b0:	rsb	r3, r4, #128	; 0x80
    31b4:	it	gt
    31b6:	movgt	r3, #0
    31b8:	add	r3, r4
    31ba:	cbz	r2, 31c0 <compress(void*)+0x198>
    31bc:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    31c0:	ldr	r0, [pc, #232]	; (32ac <compress(void*)+0x284>)
    31c2:	bl	25b4 <pushData(unsigned long*)>
    31c6:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31ca:	mov.w	r2, r6, lsl #2
    31ce:	ldr	r1, [pc, #212]	; (32a4 <compress(void*)+0x27c>)
    31d0:	ldr	r0, [pc, #216]	; (32ac <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    31d2:	it	ne
    31d4:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31d8:	bl	9488 <memcpy>
    31dc:	str.w	r6, [r8]
    31e0:	b.n	3166 <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    31e2:	str.w	r0, [r1, r3, lsl #2]
    31e6:	movs	r2, #1
    31e8:	adds	r3, #1
    31ea:	b.n	31aa <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    31ec:	rsb	r3, r4, #122	; 0x7a
    31f0:	ldr	r1, [pc, #176]	; (32a4 <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    31f2:	ldr	r2, [pc, #184]	; (32ac <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    31f4:	orr.w	r3, r3, r0, lsl #16
    31f8:	mov	r0, r1
    31fa:	str	r3, [r5, #20]
    31fc:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    31fe:	ldr.w	ip, [r0], #4
    3202:	str.w	ip, [r2, r3, lsl #2]
    3206:	adds	r3, #1
    3208:	cmp	r3, #128	; 0x80
    320a:	bne.n	31fe <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    320c:	ldr	r0, [pc, #156]	; (32ac <compress(void*)+0x284>)
    320e:	rsb	sl, r4, #128	; 0x80
    3212:	str	r1, [sp, #4]
    3214:	str.w	r3, [r8]
    3218:	bl	25b4 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    321c:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    321e:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    3222:	subs.w	r9, r0, #0
    3226:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3228:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    322c:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3230:	it	ne
    3232:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3236:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3238:	lsls	r3, r3, #16
    323a:	orrs	r3, r7
    323c:	ldr	r7, [pc, #108]	; (32ac <compress(void*)+0x284>)
    323e:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3240:	mov	r2, r7
    3242:	movs	r3, #0
    3244:	str.w	r3, [r8]
    3248:	subs	r0, #1
    324a:	bne.n	327a <compress(void*)+0x252>
    324c:	cbz	r3, 3254 <compress(void*)+0x22c>
    324e:	movs	r3, #6
    3250:	str.w	r3, [r8]
    3254:	ldr.w	r1, [r8]
    3258:	movs	r3, #0
    325a:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    325e:	cmp	sl, r6
    3260:	blt.n	3286 <compress(void*)+0x25e>
    3262:	subs	r4, #128	; 0x80
    3264:	add	r4, r6
    3266:	cmp	r6, fp
    3268:	it	lt
    326a:	movlt	r4, #0
    326c:	add	r4, r1
    326e:	cmp	r3, #0
    3270:	beq.w	3166 <compress(void*)+0x13e>
    3274:	str.w	r4, [r8]
  return ret;
    3278:	b.n	3166 <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    327a:	ldr.w	r3, [r1], #4
    327e:	str.w	r3, [r7], #4
    3282:	movs	r3, #1
    3284:	b.n	3248 <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    3286:	ldr.w	r3, [r5, sl, lsl #2]
    328a:	add.w	sl, sl, #1
    328e:	str.w	r3, [r2], #4
    3292:	movs	r3, #1
    3294:	b.n	325e <compress(void*)+0x236>
    3296:	nop
    3298:	.word	0x20008f18
    329c:	.word	0x20027424
    32a0:	.word	0x200273f8
    32a4:	.word	0x200267f4
    32a8:	.word	0x20008f1c
    32ac:	.word	0x200265e4
    32b0:	.word	0x20026bf4
    32b4:	.word	0x20026e48

000032b8 <adc_init()>:
        }
        Serial.println();
    }
#else
    // there is no ADC to be controlled
    void adc_init(void) {}
    32b8:	bx	lr

000032ba <acqPower(int)>:
    void acqPower(int flag) {(void) flag;}
    32ba:	bx	lr

000032bc <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    32bc:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    32be:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    32c0:	movw	lr, #365	; 0x16d
    32c4:	movs	r6, #100	; 0x64
    32c6:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32ca:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    32ce:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32d2:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    32d6:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32da:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    32dc:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    32de:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    32e0:	udiv	r2, r3, r0
    32e4:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    32e8:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    32ea:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    32ec:	movs	r3, #7
    32ee:	udiv	r3, r0, r3
    32f2:	rsb	r3, r3, r3, lsl #3
    32f6:	subs	r0, r0, r3
    32f8:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    32fa:	movs	r0, #0
    days = 0;
    32fc:	mov	r4, r0
    32fe:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3300:	addw	r3, r3, #1970	; 0x7b2
    3304:	ands.w	r7, r3, #3
    3308:	bne.n	338c <time2date(unsigned long, datetime_t*)+0xd0>
    330a:	sdiv	r5, r3, r6
    330e:	mls	r5, r6, r5, r3
    3312:	cmp	r5, #0
    3314:	bne.n	3392 <time2date(unsigned long, datetime_t*)+0xd6>
    3316:	sdiv	r5, r3, ip
    331a:	mls	r5, ip, r5, r3
    331e:	cmp	r5, #0
    3320:	ite	ne
    3322:	movne	r5, lr
    3324:	moveq.w	r5, #366	; 0x16e
    3328:	add	r4, r5
    332a:	adds	r0, #1
    332c:	cmp	r2, r4
    332e:	bcs.n	32fe <time2date(unsigned long, datetime_t*)+0x42>
    3330:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    3332:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3334:	udiv	r6, r3, r0
    3338:	mls	r6, r0, r6, r3
    333c:	mov.w	r0, #400	; 0x190
    3340:	udiv	r5, r3, r0
    3344:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3348:	cbnz	r7, 3398 <time2date(unsigned long, datetime_t*)+0xdc>
    334a:	cbnz	r6, 339e <time2date(unsigned long, datetime_t*)+0xe2>
    334c:	cmp	r3, #0
    334e:	movw	r0, #365	; 0x16d
    3352:	it	eq
    3354:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    3358:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    335a:	ldr.w	ip, [pc, #88]	; 33b4 <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    335e:	add	r2, r0
    3360:	movs	r0, #0
      if (month==1) { // february
    3362:	cmp	r0, #1
    3364:	uxtb	r5, r0
    3366:	bne.n	33a4 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3368:	cbnz	r7, 33aa <time2date(unsigned long, datetime_t*)+0xee>
    336a:	cbnz	r6, 33ae <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    336c:	cmp	r3, #0
    336e:	ite	ne
    3370:	movne	r4, #28
    3372:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    3374:	cmp	r4, r2
    3376:	bhi.n	3382 <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3378:	adds	r0, #1
        time -= monthLength;
    337a:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    337c:	cmp	r0, #12
    337e:	bne.n	3362 <time2date(unsigned long, datetime_t*)+0xa6>
    3380:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    3382:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3384:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3386:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3388:	strb	r2, [r1, #3]
  }
    338a:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    338c:	movw	r5, #365	; 0x16d
    3390:	b.n	3328 <time2date(unsigned long, datetime_t*)+0x6c>
    3392:	mov.w	r5, #366	; 0x16e
    3396:	b.n	3328 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3398:	movw	r0, #365	; 0x16d
    339c:	b.n	3358 <time2date(unsigned long, datetime_t*)+0x9c>
    339e:	mov.w	r0, #366	; 0x16e
    33a2:	b.n	3358 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    33a4:	ldrb.w	r4, [r0, ip]
    33a8:	b.n	3374 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    33aa:	movs	r4, #28
    33ac:	b.n	3374 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    33ae:	movs	r4, #29
    33b0:	b.n	3374 <time2date(unsigned long, datetime_t*)+0xb8>
    33b2:	nop
    33b4:	.word	0x20007e8b

000033b8 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    33b8:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    33ba:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    33be:	ldr	r2, [pc, #184]	; (3478 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    33c0:	adds	r3, #78	; 0x4e
    33c2:	uxtb	r3, r3
  {
    33c4:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    33c6:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    33c8:	movs	r5, #100	; 0x64
    33ca:	mov.w	r6, #400	; 0x190
    33ce:	subw	r4, r1, #1970	; 0x7b2
    33d2:	cmp	r3, r4
    33d4:	bgt.n	3430 <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33d6:	addw	r3, r3, #1970	; 0x7b2
    33da:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    33dc:	ldrsb.w	r7, [r0, #2]
    33e0:	ldr	r6, [pc, #152]	; (347c <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    33e2:	ldr.w	ip, [pc, #156]	; 3480 <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33e6:	udiv	r4, r3, r1
    33ea:	mls	r4, r1, r4, r3
    33ee:	mov.w	r1, #400	; 0x190
    33f2:	udiv	r5, r3, r1
    33f6:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    33fa:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33fc:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    3400:	cmp	r7, r1
    3402:	bgt.n	3454 <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3404:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3408:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    340c:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3410:	rsb	r3, r3, r3, lsl #4
    3414:	lsls	r3, r3, #2
    seconds+= tm->sec;
    3416:	mla	r3, r4, r1, r3
    341a:	ldrsb.w	r1, [r0, #7]
    341e:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3420:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    3424:	ldr	r0, [pc, #88]	; (3480 <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3426:	subs	r1, #1
    seconds+= tm->sec;
    3428:	mla	r0, r0, r1, r3
    return seconds; 
  }
    342c:	add	r0, r2
    342e:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    3430:	lsls	r4, r1, #30
    3432:	bne.n	3450 <date2time(datetime_t*)+0x98>
    3434:	sdiv	r4, r1, r5
    3438:	mls	r4, r5, r4, r1
    343c:	cbnz	r4, 3448 <date2time(datetime_t*)+0x90>
    343e:	sdiv	r4, r1, r6
    3442:	mls	r4, r6, r4, r1
    3446:	cbnz	r4, 3450 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    3448:	add.w	r2, r2, #86016	; 0x15000
    344c:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    3450:	adds	r1, #1
    3452:	b.n	33ce <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3454:	cmp	r1, #2
    3456:	bne.n	346c <date2time(datetime_t*)+0xb4>
    3458:	cbnz	r3, 346c <date2time(datetime_t*)+0xb4>
    345a:	cbnz	r4, 345e <date2time(datetime_t*)+0xa6>
    345c:	cbnz	r5, 346c <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    345e:	add.w	r2, r2, #2490368	; 0x260000
    3462:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3466:	adds	r1, #1
    3468:	adds	r6, #1
    346a:	b.n	3400 <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    346c:	ldrb.w	lr, [r6]
    3470:	mla	r2, ip, lr, r2
    3474:	b.n	3466 <date2time(datetime_t*)+0xae>
    3476:	nop
    3478:	.word	0x01e13380
    347c:	.word	0x20007e8b
    3480:	.word	0x00015180

00003484 <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    3484:	movs	r0, #1
    3486:	bx	lr

00003488 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3488:	push	{r0, r1, r2, lr}
    348a:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    348c:	bl	abcc <rtc_get>
    3490:	ldr	r1, [sp, #4]
    3492:	bl	32bc <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3496:	movs	r0, #1
    3498:	add	sp, #12
    349a:	ldr.w	pc, [sp], #4

0000349e <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    349e:	push	{r3, lr}
    rtc_set(date2time(t));
    34a0:	bl	33b8 <date2time(datetime_t*)>
    34a4:	bl	abf0 <rtc_set>
    return 1;
  }
    34a8:	movs	r0, #1
    34aa:	pop	{r3, pc}

000034ac <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    34ac:	push	{r0, r1, r4, r5, r6, lr}
    34ae:	mov	r5, r1
    34b0:	mov	r4, r2
    34b2:	mov	r6, r0
    rtc_get_datetime(&t);
    34b4:	mov	r0, sp
    34b6:	bl	3488 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    34ba:	mov	r0, sp
    t.year=year;
    34bc:	strh.w	r6, [sp]
    t.month=month;
    34c0:	strb.w	r5, [sp, #2]
    t.day=day;
    34c4:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    34c8:	bl	349e <rtc_set_datetime(datetime_t*)>
  }
    34cc:	add	sp, #8
    34ce:	pop	{r4, r5, r6, pc}

000034d0 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    34d0:	push	{r0, r1, r4, r5, r6, lr}
    34d2:	mov	r5, r1
    34d4:	mov	r4, r2
    34d6:	mov	r6, r0
    rtc_get_datetime(&t);
    34d8:	mov	r0, sp
    34da:	bl	3488 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    34de:	mov	r0, sp
    t.hour=hour;
    34e0:	strb.w	r6, [sp, #5]
    t.min=minutes;
    34e4:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    34e8:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    34ec:	bl	349e <rtc_set_datetime(datetime_t*)>
  }
    34f0:	add	sp, #8
    34f2:	pop	{r4, r5, r6, pc}

000034f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    34f4:	push	{r3, r4, r5, lr}
    34f6:	mov	r4, r0
    34f8:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34fa:	movs	r2, #60	; 0x3c
    34fc:	mov	r1, r5
    34fe:	mov	r0, r4
    3500:	bl	b114 <usb_mtp_send>
    3504:	cmp	r0, #0
    3506:	ble.n	34fa <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3508:	pop	{r3, r4, r5, pc}
	...

0000350c <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    350c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3510:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3512:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    3516:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3518:	ldr.w	r3, [r1, #1064]	; 0x428
    351c:	cbnz	r3, 3526 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    351e:	add.w	r2, r0, #544	; 0x220
    3522:	ldr	r4, [pc, #92]	; (3580 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    3524:	str	r2, [r4, #0]
        write_length_ += len;
    3526:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3528:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    352c:	add.w	r9, r0, #1056	; 0x420
    3530:	ldr.w	sl, [pc, #76]	; 3580 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3534:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3538:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    353c:	cmp	r6, r8
    353e:	bgt.n	3544 <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3540:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3544:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3548:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    354c:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    354e:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3552:	mov	r0, r3
    3554:	cmp	r5, r2
    3556:	it	ge
    3558:	movge	r5, r2
    355a:	mov	r2, r5
          pos += to_copy;
    355c:	add	r8, r5
          memcpy(dst,src,to_copy);
    355e:	bl	9488 <memcpy>
    3562:	mov	r3, r0
          src += to_copy;
    3564:	add	r7, r5
          dst += to_copy;
    3566:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3568:	cmp	r9, r3
          dst += to_copy;
    356a:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    356e:	bne.n	353c <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3570:	mov.w	r1, #512	; 0x200
    3574:	mov	r0, r4
    3576:	bl	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    357a:	str.w	r4, [sl]
    357e:	b.n	353c <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3580:	.word	0x20026e50

00003584 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3584:	push	{r4, r5, r6, lr}
    3586:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3588:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    358a:	subs	r4, r1, #1
    int num = 0;
    358c:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    358e:	ldr	r3, [r0, #0]
    3590:	mov	r1, r4
    3592:	ldr	r3, [r3, #28]
    3594:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3596:	ldr	r0, [r5, #0]
    3598:	mov	r1, r4
    359a:	ldr	r3, [r0, #0]
    359c:	ldr	r3, [r3, #32]
    359e:	blx	r3
    35a0:	cbnz	r0, 35a6 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    35a2:	mov	r0, r6
    35a4:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    35a6:	adds	r6, #1
    35a8:	b.n	3596 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

000035aa <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    35aa:	ldr	r0, [r0, #0]
    35ac:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    35ae:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    35b0:	ldr	r4, [r0, #0]
    35b2:	ldr	r4, [r4, #76]	; 0x4c
    35b4:	blx	r4
    }
    35b6:	movw	r2, #8193	; 0x2001
    35ba:	movw	r3, #8197	; 0x2005
    35be:	cmp	r0, #0
    35c0:	ite	ne
    35c2:	movne	r0, r2
    35c4:	moveq	r0, r3
    35c6:	pop	{r4, pc}

000035c8 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    35c8:	ldr	r0, [r0, #0]
    35ca:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    35cc:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    35ce:	ldr	r4, [r0, #0]
    35d0:	ldr	r4, [r4, #80]	; 0x50
    35d2:	mov	ip, r4
    }
    35d4:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    35d8:	bx	ip
	...

000035dc <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    35dc:	ldr	r3, [pc, #8]	; (35e8 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    35de:	ldr	r0, [r0, #0]
      sessionID_ = id;
    35e0:	str	r1, [r3, #0]
      storage_->ResetIndex();
    35e2:	ldr	r3, [r0, #0]
    35e4:	ldr	r3, [r3, #68]	; 0x44
    35e6:	bx	r3
    35e8:	.word	0x2002797c

000035ec <MTPD::pull_packet(unsigned char*)>:
    {
    35ec:	push	{r4, lr}
    35ee:	mov	r4, r1
      while(!usb_mtp_available());
    35f0:	bl	b0e4 <usb_mtp_available>
    35f4:	cmp	r0, #0
    35f6:	beq.n	35f0 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    35f8:	mov	r0, r4
    35fa:	movs	r1, #60	; 0x3c
    }
    35fc:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3600:	b.w	b050 <usb_mtp_recv>

00003604 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    3604:	add.w	r3, r0, #8192	; 0x2000
    3608:	push	{r4, r5}
    360a:	ldrb.w	r5, [r3, #1060]	; 0x424
    360e:	cbz	r5, 361e <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3610:	ldr.w	r1, [r3, #1064]	; 0x428
    3614:	add	r1, r2
    }
    3616:	pop	{r4, r5}
        write_length_ += len;
    3618:	str.w	r1, [r3, #1064]	; 0x428
    }
    361c:	bx	lr
    361e:	pop	{r4, r5}
    3620:	b.w	350c <MTPD::write(char const*, int) [clone .part.0]>

00003624 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    3624:	push	{r0, r1, r2, lr}
    3626:	movs	r2, #1
    3628:	strb.w	r1, [sp, #7]
    362c:	add.w	r1, sp, #7
    3630:	bl	3604 <MTPD::write(char const*, int)>
    3634:	add	sp, #12
    3636:	ldr.w	pc, [sp], #4

0000363a <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    363a:	push	{r0, r1, r2, lr}
    363c:	movs	r2, #2
    363e:	strh.w	r1, [sp, #6]
    3642:	add.w	r1, sp, #6
    3646:	bl	3604 <MTPD::write(char const*, int)>
    364a:	add	sp, #12
    364c:	ldr.w	pc, [sp], #4

00003650 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3650:	push	{r3, r4, r5, lr}
    3652:	mov	r4, r1
    if (*str) 
    3654:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3656:	mov	r5, r0
    if (*str) 
    3658:	cbz	r1, 3682 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    365a:	mov	r0, r4
    365c:	subs	r4, #1
    365e:	bl	e100 <strlen>
    3662:	adds	r0, #1
    3664:	uxtb	r1, r0
    3666:	mov	r0, r5
    3668:	bl	3624 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    366c:	ldrb.w	r1, [r4, #1]!
    3670:	mov	r0, r5
    3672:	cbnz	r1, 367c <MTPD::writestring(char const*)+0x2c>
  }
    3674:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3678:	b.w	363a <MTPD::write16(unsigned short)>
    367c:	bl	363a <MTPD::write16(unsigned short)>
    3680:	b.n	366c <MTPD::writestring(char const*)+0x1c>
  }
    3682:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3686:	b.w	3624 <MTPD::write8(unsigned char)>
	...

0000368c <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    368c:	movw	r3, #54274	; 0xd402
    3690:	cmp	r1, r3
    3692:	bne.n	369a <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3694:	ldr	r1, [pc, #4]	; (369c <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3696:	b.w	3650 <MTPD::writestring(char const*)>
  }
    369a:	bx	lr
    369c:	.word	0x20007ef9

000036a0 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    36a0:	movw	r3, #54274	; 0xd402
    36a4:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    36a6:	push	{r4, lr}
    36a8:	mov	r4, r0
    switch (prop) {
    36aa:	bne.n	36de <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    36ac:	bl	363a <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    36b0:	mov	r0, r4
    36b2:	movw	r1, #65535	; 0xffff
    36b6:	bl	363a <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    36ba:	mov	r0, r4
    36bc:	movs	r1, #0
    36be:	bl	3624 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    36c2:	mov	r0, r4
    36c4:	ldr	r1, [pc, #24]	; (36e0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    36c6:	bl	3650 <MTPD::writestring(char const*)>
    36ca:	mov	r0, r4
    36cc:	ldr	r1, [pc, #16]	; (36e0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    36ce:	bl	3650 <MTPD::writestring(char const*)>
        write8(0);       // no form
    36d2:	mov	r0, r4
    36d4:	movs	r1, #0
  }
    36d6:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    36da:	b.w	3624 <MTPD::write8(unsigned char)>
  }
    36de:	pop	{r4, pc}
    36e0:	.word	0x20007ef9

000036e4 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    36e4:	push	{r0, r1, r2, lr}
    36e6:	movs	r2, #4
    36e8:	str	r1, [sp, #4]
    36ea:	add.w	r1, sp, r2
    36ee:	bl	3604 <MTPD::write(char const*, int)>
    36f2:	add	sp, #12
    36f4:	ldr.w	pc, [sp], #4

000036f8 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    36f8:	push	{r4, r5, r6, lr}
    36fa:	mov	r4, r0
    36fc:	sub	sp, #24
    write16(100);  // MTP version
    36fe:	movs	r1, #100	; 0x64
    3700:	ldr	r6, [pc, #240]	; (37f4 <MTPD::WriteDescriptor()+0xfc>)
    3702:	bl	363a <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3706:	movs	r1, #6
    3708:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    370a:	movs	r5, #0
    write32(6);    // MTP extension
    370c:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3710:	movs	r1, #100	; 0x64
    3712:	mov	r0, r4
    3714:	bl	363a <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3718:	ldr	r1, [pc, #220]	; (37f8 <MTPD::WriteDescriptor()+0x100>)
    371a:	mov	r0, r4
    371c:	bl	3650 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3720:	movs	r1, #0
    3722:	mov	r0, r4
    3724:	bl	363a <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3728:	movs	r1, #20
    372a:	mov	r0, r4
    372c:	bl	36e4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3730:	adds	r5, #1
    3732:	ldrh.w	r1, [r6], #2
    3736:	mov	r0, r4
    3738:	bl	363a <MTPD::write16(unsigned short)>
    373c:	cmp	r5, #20
    373e:	bne.n	3730 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3740:	movs	r1, #4
    3742:	mov	r0, r4
    3744:	bl	36e4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3748:	movw	r1, #16388	; 0x4004
    374c:	mov	r0, r4
    374e:	bl	363a <MTPD::write16(unsigned short)>
    3752:	movw	r1, #16389	; 0x4005
    3756:	mov	r0, r4
    3758:	bl	363a <MTPD::write16(unsigned short)>
    375c:	movw	r1, #16395	; 0x400b
    3760:	mov	r0, r4
    3762:	bl	363a <MTPD::write16(unsigned short)>
    3766:	movw	r1, #16396	; 0x400c
    376a:	mov	r0, r4
    376c:	bl	363a <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3770:	movs	r1, #1
    3772:	mov	r0, r4
    3774:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3778:	movw	r1, #54274	; 0xd402
    377c:	mov	r0, r4
    377e:	bl	363a <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3782:	movs	r1, #0
    3784:	mov	r0, r4
    3786:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    378a:	movs	r1, #2
    378c:	mov	r0, r4
    378e:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3792:	mov.w	r1, #12288	; 0x3000
    3796:	mov	r0, r4
    3798:	bl	363a <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    379c:	movw	r1, #12289	; 0x3001
    37a0:	mov	r0, r4
    37a2:	bl	363a <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    37a6:	ldr	r1, [pc, #84]	; (37fc <MTPD::WriteDescriptor()+0x104>)
    37a8:	mov	r0, r4
    37aa:	bl	3650 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    37ae:	ldr	r1, [pc, #80]	; (3800 <MTPD::WriteDescriptor()+0x108>)
    37b0:	mov	r0, r4
    37b2:	bl	3650 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    37b6:	vldr	s0, [pc, #76]	; 3804 <MTPD::WriteDescriptor()+0x10c>
    37ba:	add	r2, sp, #4
    37bc:	movs	r1, #2
    37be:	movs	r0, #3
    37c0:	bl	a73c <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    37c4:	mov	r2, r5
    37c6:	ldr	r1, [pc, #64]	; (3808 <MTPD::WriteDescriptor()+0x110>)
    37c8:	add	r0, sp, #4
    37ca:	bl	d9b8 <strlcat>
    writestring( buf );    
    37ce:	add	r1, sp, #4
    37d0:	mov	r0, r4
    37d2:	bl	3650 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    37d6:	ldr	r1, [pc, #52]	; (380c <MTPD::WriteDescriptor()+0x114>)
    37d8:	add	r2, sp, #4
    writestring( buf );    
    37da:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    37dc:	ldrh.w	r0, [r1, #2]!
    37e0:	subs	r3, #1
    37e2:	strb.w	r0, [r2], #1
    37e6:	bne.n	37dc <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    37e8:	add	r1, sp, #4
    37ea:	mov	r0, r4
    37ec:	bl	3650 <MTPD::writestring(char const*)>
  }
    37f0:	add	sp, #24
    37f2:	pop	{r4, r5, r6, pc}
    37f4:	.word	0x200079d4
    37f8:	.word	0x20007ed5
    37fc:	.word	0x20007ee9
    3800:	.word	0x20007ef9
    3804:	.word	0x3fcb851f
    3808:	.word	0x20007eee
    380c:	.word	0x20008f1e

00003810 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3810:	push	{r4, r5, r6, lr}
    3812:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3814:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3816:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3818:	ldr	r3, [r0, #0]
    381a:	ldr	r3, [r3, #4]
    381c:	blx	r3
    write32(num); // number of storages (disks)
    381e:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3820:	mov	r5, r0
    write32(num); // number of storages (disks)
    3822:	mov	r0, r4
    3824:	bl	36e4 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3828:	cmp	r6, r5
    382a:	bne.n	382e <MTPD::WriteStorageIDs()+0x1e>
  }
    382c:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    382e:	adds	r6, #1
    3830:	mov	r0, r4
    3832:	mov	r1, r6
    3834:	bl	36e4 <MTPD::write32(unsigned long)>
    3838:	b.n	3828 <MTPD::WriteStorageIDs()+0x18>

0000383a <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    383a:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    383c:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3840:	mov	r4, r0
    3842:	mov	r6, r2
    if (write_get_length_) {
    3844:	ldrb.w	r3, [r7, #1060]	; 0x424
    3848:	cbz	r3, 3858 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    384a:	bl	3584 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    384e:	adds	r0, #1
      write_length_ *= 4;
    3850:	lsls	r0, r0, #2
    3852:	str.w	r0, [r7, #1064]	; 0x428
  }
    3856:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3858:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    385a:	bl	3584 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    385e:	mov	r1, r0
    3860:	mov	r0, r4
    3862:	bl	36e4 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    3866:	ldr	r0, [r4, #0]
    3868:	mov	r2, r6
    386a:	mov	r1, r5
    386c:	ldr	r3, [r0, #0]
    386e:	ldr	r3, [r3, #28]
    3870:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    3872:	ldr	r0, [r4, #0]
    3874:	mov	r1, r5
    3876:	ldr	r3, [r0, #0]
    3878:	ldr	r3, [r3, #32]
    387a:	blx	r3
    387c:	mov	r1, r0
    387e:	cmp	r0, #0
    3880:	beq.n	3856 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    3882:	mov	r0, r4
    3884:	bl	36e4 <MTPD::write32(unsigned long)>
    3888:	b.n	3872 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

0000388c <MTPD::GetObjectInfo(unsigned long)>:
  {
    388c:	push	{r4, r5, r6, r7, lr}
    388e:	mov	r4, r0
    3890:	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    3892:	ldr	r0, [r0, #0]
    3894:	add.w	r6, sp, #14
    3898:	add	r5, sp, #20
    389a:	ldr	r3, [r0, #0]
    389c:	add	r2, sp, #24
    389e:	str	r6, [sp, #4]
    38a0:	str	r5, [sp, #0]
    38a2:	ldr	r7, [r3, #36]	; 0x24
    38a4:	add	r3, sp, #16
    38a6:	blx	r7
    uint32_t storage = Store2Storage(store);
    38a8:	ldrh.w	r1, [sp, #14]
    write32(storage); // storage
    38ac:	mov	r0, r4
    38ae:	adds	r1, #1
    38b0:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    38b4:	ldr	r3, [sp, #16]
    38b6:	movw	r1, #12289	; 0x3001
    38ba:	mov	r0, r4
    38bc:	adds	r3, #1
    38be:	it	ne
    38c0:	movne	r1, #0
    38c2:	bl	363a <MTPD::write16(unsigned short)>
    write16(0);  // protection
    38c6:	mov	r0, r4
    38c8:	movs	r1, #0
    38ca:	bl	363a <MTPD::write16(unsigned short)>
    write32(size); // size
    38ce:	ldr	r1, [sp, #16]
    38d0:	mov	r0, r4
    38d2:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    38d6:	mov	r0, r4
    38d8:	movs	r1, #0
    38da:	bl	363a <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    38de:	mov	r0, r4
    38e0:	movs	r1, #0
    38e2:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    38e6:	mov	r0, r4
    38e8:	movs	r1, #0
    38ea:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    38ee:	mov	r0, r4
    38f0:	movs	r1, #0
    38f2:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    38f6:	mov	r0, r4
    38f8:	movs	r1, #0
    38fa:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    38fe:	mov	r0, r4
    3900:	movs	r1, #0
    3902:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    3906:	mov	r0, r4
    3908:	movs	r1, #0
    390a:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    390e:	ldr	r1, [sp, #20]
    3910:	mov	r0, r4
    3912:	bl	36e4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    3916:	ldr	r1, [sp, #16]
    3918:	mov	r0, r4
    391a:	adds	r3, r1, #1
    391c:	negs	r1, r3
    391e:	adcs	r1, r3
    3920:	bl	363a <MTPD::write16(unsigned short)>
    write32(0); // association description
    3924:	mov	r0, r4
    3926:	movs	r1, #0
    3928:	bl	36e4 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    392c:	mov	r0, r4
    392e:	movs	r1, #0
    3930:	bl	36e4 <MTPD::write32(unsigned long)>
    writestring(filename);
    3934:	add	r1, sp, #24
    3936:	mov	r0, r4
    3938:	bl	3650 <MTPD::writestring(char const*)>
    writestring("");  // date created
    393c:	mov	r0, r4
    393e:	ldr	r1, [pc, #24]	; (3958 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3940:	bl	3650 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    3944:	mov	r0, r4
    3946:	ldr	r1, [pc, #16]	; (3958 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3948:	bl	3650 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    394c:	ldr	r1, [pc, #8]	; (3958 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    394e:	mov	r0, r4
    3950:	bl	3650 <MTPD::writestring(char const*)>
  }
    3954:	add	sp, #284	; 0x11c
    3956:	pop	{r4, r5, r6, r7, pc}
    3958:	.word	0x20007bbb

0000395c <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    395c:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    395e:	ldr	r6, [pc, #36]	; (3984 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3960:	movs	r4, #0
    3962:	ldr	r7, [pc, #36]	; (3988 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    3964:	mov	r5, r0
      write32(propertyListNum);
    3966:	ldr	r1, [r6, #0]
    3968:	bl	36e4 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    396c:	ldr	r3, [r6, #0]
    396e:	cmp	r3, r4
    3970:	bhi.n	3974 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    3972:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3974:	ldrh.w	r1, [r7], #2
    3978:	mov	r0, r5
    397a:	adds	r4, #1
    397c:	bl	363a <MTPD::write16(unsigned short)>
    3980:	b.n	396c <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    3982:	nop
    3984:	.word	0x20008ef4
    3988:	.word	0x200079c4

0000398c <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    398c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3990:	mov	r4, r0
    3992:	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3994:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    3996:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3998:	add.w	r8, sp, #14
    399c:	add	r6, sp, #20
    399e:	ldr	r3, [r0, #0]
    39a0:	add	r2, sp, #24
    39a2:	str.w	r8, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    39a6:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    39a8:	str	r6, [sp, #0]
    39aa:	ldr.w	r9, [r3, #36]	; 0x24
    39ae:	add	r3, sp, #16
    39b0:	blx	r9
      switch(p2)
    39b2:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    39b6:	ldrh.w	r3, [sp, #14]
      switch(p2)
    39ba:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    39bc:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    39be:	add.w	r8, r3, #1
      switch(p2)
    39c2:	bhi.n	39e4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x58>
    39c4:	cmp.w	r5, #56320	; 0xdc00
    39c8:	bls.n	39f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    39ca:	sub.w	r5, r5, #56320	; 0xdc00
    39ce:	subs	r5, #1
    39d0:	cmp	r5, #10
    39d2:	bhi.n	39f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    39d4:	tbb	[pc, r5]
    39d8:	.word	0x37201611
    39dc:	.word	0x27220e0e
    39e0:	.short	0x0e27
    39e2:	.byte	0x29
    39e3:	.byte	0x00
    39e4:	movw	r3, #56385	; 0xdc41
    39e8:	cmp	r5, r3
    39ea:	beq.n	3a34 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa8>
    39ec:	movw	r3, #56388	; 0xdc44
    39f0:	cmp	r5, r3
    39f2:	beq.n	3a1c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    }
    39f4:	add	sp, #284	; 0x11c
    39f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(storage);
    39fa:	mov	r1, r8
          write32(0);
    39fc:	mov	r0, r4
    39fe:	bl	36e4 <MTPD::write32(unsigned long)>
    }
    3a02:	b.n	39f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(dir?0x3001:0x3000);
    3a04:	adds	r1, #1
    3a06:	movw	r1, #12289	; 0x3001
    3a0a:	it	ne
    3a0c:	movne.w	r1, #12288	; 0x3000
          write16(0);
    3a10:	mov	r0, r4
    3a12:	bl	363a <MTPD::write16(unsigned short)>
          break;
    3a16:	b.n	39f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(0);
    3a18:	movs	r1, #0
    3a1a:	b.n	3a10 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
          writestring(name);
    3a1c:	add	r1, sp, #24
          writestring("");
    3a1e:	mov	r0, r4
    3a20:	bl	3650 <MTPD::writestring(char const*)>
          break;
    3a24:	b.n	39f4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          writestring("");
    3a26:	ldr	r1, [pc, #40]	; (3a50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc4>)
    3a28:	b.n	3a1e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x92>
          write32((store==parent)? 0: parent);
    3a2a:	ldr	r1, [r6, #0]
    3a2c:	cmp	r3, r1
    3a2e:	it	eq
    3a30:	moveq	r1, #0
    3a32:	b.n	39fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
          write32(p1);
    3a34:	mov	r1, r7
    3a36:	mov	r0, r4
    3a38:	bl	36e4 <MTPD::write32(unsigned long)>
          write32(parent);
    3a3c:	ldr	r1, [r6, #0]
    3a3e:	mov	r0, r4
    3a40:	bl	36e4 <MTPD::write32(unsigned long)>
          write32(storage);
    3a44:	mov	r1, r8
    3a46:	mov	r0, r4
    3a48:	bl	36e4 <MTPD::write32(unsigned long)>
          write32(0);
    3a4c:	movs	r1, #0
    3a4e:	b.n	39fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
    3a50:	.word	0x20007bbb

00003a54 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    3a54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a58:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3a5a:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    3a5c:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    3a5e:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3a60:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3a62:	mov.w	fp, #0
    3a66:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    3a68:	ldr	r6, [pc, #228]	; (3b50 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    3a6a:	ldr	r3, [r3, #20]
    3a6c:	blx	r3
    3a6e:	cmp	r0, #0
    3a70:	mov	r0, r4
    3a72:	ite	ne
    3a74:	movne	r1, #1
    3a76:	moveq	r1, #4
    3a78:	bl	363a <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    3a7c:	ldr	r0, [r4, #0]
    3a7e:	mov	r1, r7
    3a80:	ldr	r3, [r0, #0]
    3a82:	ldr	r3, [r3, #24]
    3a84:	blx	r3
    3a86:	adds	r0, #1
    3a88:	uxth	r1, r0
    3a8a:	mov	r0, r4
    3a8c:	bl	363a <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    3a90:	mov	r0, r4
    3a92:	movs	r1, #0
    3a94:	bl	363a <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    3a98:	ldr	r0, [r4, #0]
    3a9a:	mov	r1, r7
    3a9c:	ldr	r3, [r0, #0]
    3a9e:	ldr	r3, [r3, #12]
    3aa0:	blx	r3
    3aa2:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    3aa4:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    3aa6:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    3aa8:	mov	r1, r7
    3aaa:	ldr	r3, [r0, #0]
    3aac:	ldr	r3, [r3, #16]
    3aae:	blx	r3
    3ab0:	ldr	r3, [r6, #0]
    3ab2:	mov	r9, r0
    3ab4:	mov	sl, r1
    3ab6:	ldr	r3, [r3, #4]
    3ab8:	movs	r2, #5
    3aba:	ldr	r1, [pc, #152]	; (3b54 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    3abc:	mov	r0, r6
    3abe:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3ac0:	movs	r3, #10
    3ac2:	mov	r2, r5
    3ac4:	mov	r0, r6
    3ac6:	strd	r3, fp, [sp]
    3aca:	mov	r3, r8
    3acc:	bl	b5ee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3ad0:	mov	r0, r6
    3ad2:	bl	b588 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    3ad6:	ldr	r3, [r6, #0]
    3ad8:	ldr	r1, [pc, #124]	; (3b58 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    3ada:	movs	r2, #5
    3adc:	ldr	r3, [r3, #4]
    3ade:	mov	r0, r6
    3ae0:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3ae2:	movs	r3, #10
    3ae4:	mov	r2, r9
    3ae6:	mov	r0, r6
    3ae8:	str	r3, [sp, #0]
    3aea:	mov	r3, sl
    3aec:	str.w	fp, [sp, #4]
    3af0:	bl	b5ee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3af4:	mov	r0, r6
    3af6:	bl	b588 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3afa:	movs	r2, #8
    3afc:	mov	r0, r4
    3afe:	add.w	r1, sp, r2
    3b02:	strd	r5, r8, [sp, #8]
    3b06:	bl	3604 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    3b0a:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3b0e:	mov.w	r2, #8
    3b12:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    3b14:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3b18:	add.w	r1, sp, r2
    3b1c:	strd	r5, r3, [sp, #8]
    3b20:	bl	3604 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    3b24:	mov	r0, r4
    3b26:	mov.w	r1, #4294967295
    3b2a:	bl	36e4 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    3b2e:	ldr	r0, [r4, #0]
    3b30:	mov	r1, r7
    3b32:	ldr	r3, [r0, #0]
    3b34:	ldr	r3, [r3, #8]
    3b36:	blx	r3
    3b38:	mov	r1, r0
    writestring(name);  // storage descriptor
    3b3a:	mov	r0, r4
    3b3c:	bl	3650 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    3b40:	ldr	r1, [pc, #24]	; (3b5c <MTPD::GetStorageInfo(unsigned long)+0x108>)
    3b42:	mov	r0, r4
  }
    3b44:	add	sp, #20
    3b46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    3b4a:	b.w	3650 <MTPD::writestring(char const*)>
    3b4e:	nop
    3b50:	.word	0x20008944
    3b54:	.word	0x20007ec9
    3b58:	.word	0x20007ecf
    3b5c:	.word	0x20007bbb

00003b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    3b60:	movw	r2, #56331	; 0xdc0b
    3b64:	cmp	r1, r2
    {
    3b66:	push	{r0, r1, r4, r6, r7, lr}
    3b68:	mov	r4, r0
      switch(p1)
    3b6a:	bhi.n	3b8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    3b6c:	cmp.w	r1, #56320	; 0xdc00
    3b70:	bls.n	3b9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3b72:	sub.w	r3, r1, #56320	; 0xdc00
    3b76:	subs	r3, #1
    3b78:	cmp	r3, #10
    3b7a:	bhi.n	3b9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3b7c:	tbb	[pc, r3]
    3b80:	.word	0x413e2210
    3b84:	.word	0x69570e0e
    3b88:	.short	0x0e75
    3b8a:	.byte	0x78
    3b8b:	.byte	0x00
    3b8c:	movw	r2, #56385	; 0xdc41
    3b90:	cmp	r1, r2
    3b92:	beq.n	3c76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    3b94:	movw	r2, #56388	; 0xdc44
    3b98:	cmp	r1, r2
    3b9a:	beq.n	3c58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    3b9c:	add	sp, #8
    3b9e:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    3ba0:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    3ba4:	mov	r0, r4
    3ba6:	bl	363a <MTPD::write16(unsigned short)>
          write16(6);
    3baa:	mov	r0, r4
    3bac:	movs	r1, #6
    3bae:	bl	363a <MTPD::write16(unsigned short)>
          write8(0); //get
    3bb2:	mov	r0, r4
    3bb4:	movs	r1, #0
    3bb6:	bl	3624 <MTPD::write8(unsigned char)>
          write32(0);
    3bba:	movs	r1, #0
    3bbc:	mov	r0, r4
    3bbe:	bl	36e4 <MTPD::write32(unsigned long)>
          write32(0);
    3bc2:	b.n	3be6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    3bc4:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    3bc8:	mov	r0, r4
    3bca:	bl	363a <MTPD::write16(unsigned short)>
          write16(0x004);
    3bce:	movs	r1, #4
    3bd0:	mov	r0, r4
    3bd2:	bl	363a <MTPD::write16(unsigned short)>
          write8(0); //get
    3bd6:	movs	r1, #0
    3bd8:	mov	r0, r4
    3bda:	bl	3624 <MTPD::write8(unsigned char)>
          write16(0);
    3bde:	movs	r1, #0
    3be0:	mov	r0, r4
    3be2:	bl	363a <MTPD::write16(unsigned short)>
          write32(0);
    3be6:	mov	r0, r4
    3be8:	movs	r1, #0
    3bea:	bl	36e4 <MTPD::write32(unsigned long)>
          write8(0);
    3bee:	movs	r1, #0
    3bf0:	mov	r0, r4
    }
    3bf2:	add	sp, #8
    3bf4:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    3bf8:	b.w	3624 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    3bfc:	movw	r1, #56323	; 0xdc03
    3c00:	b.n	3bc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    3c02:	movw	r1, #56324	; 0xdc04
    3c06:	bl	363a <MTPD::write16(unsigned short)>
          write16(0x008);
    3c0a:	movs	r1, #8
    3c0c:	mov	r0, r4
    3c0e:	bl	363a <MTPD::write16(unsigned short)>
          write8(0); //get
    3c12:	movs	r1, #0
    3c14:	mov	r0, r4
    3c16:	bl	3624 <MTPD::write8(unsigned char)>
          write64(0);
    3c1a:	movs	r2, #0
    3c1c:	movs	r3, #0
    3c1e:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3c22:	movs	r2, #8
    3c24:	mov	r1, sp
    3c26:	mov	r0, r4
    3c28:	bl	3604 <MTPD::write(char const*, int)>
          write32(0);
    3c2c:	b.n	3be6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    3c2e:	movw	r1, #56327	; 0xdc07
    3c32:	bl	363a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3c36:	movw	r1, #65535	; 0xffff
    3c3a:	mov	r0, r4
    3c3c:	bl	363a <MTPD::write16(unsigned short)>
          write8(1); //get/set
    3c40:	movs	r1, #1
          write8(0); //get
    3c42:	mov	r0, r4
    3c44:	bl	3624 <MTPD::write8(unsigned char)>
          write8(0);
    3c48:	movs	r1, #0
    3c4a:	mov	r0, r4
    3c4c:	bl	3624 <MTPD::write8(unsigned char)>
    3c50:	b.n	3be6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    3c52:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    3c56:	mov	r0, r4
          write16(0xDC44);
    3c58:	bl	363a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3c5c:	movw	r1, #65535	; 0xffff
    3c60:	mov	r0, r4
    3c62:	bl	363a <MTPD::write16(unsigned short)>
          write8(0); //get
    3c66:	movs	r1, #0
    3c68:	b.n	3c42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    3c6a:	movw	r1, #56329	; 0xdc09
    3c6e:	b.n	3c56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    3c70:	movw	r1, #56331	; 0xdc0b
    3c74:	b.n	3ba4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    3c76:	bl	363a <MTPD::write16(unsigned short)>
          write16(0x0A);
    3c7a:	movs	r1, #10
    3c7c:	mov	r0, r4
    3c7e:	movs	r6, #0
    3c80:	bl	363a <MTPD::write16(unsigned short)>
          write8(0); //get
    3c84:	movs	r7, #0
    3c86:	movs	r1, #0
    3c88:	mov	r0, r4
    3c8a:	bl	3624 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3c8e:	movs	r2, #8
    3c90:	mov	r1, sp
    3c92:	mov	r0, r4
    3c94:	strd	r6, r7, [sp]
    3c98:	bl	3604 <MTPD::write(char const*, int)>
          write64(0);
    3c9c:	strd	r6, r7, [sp]
    3ca0:	b.n	3c22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

00003ca2 <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    3ca2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ca6:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    3ca8:	ldr	r0, [r0, #0]
    3caa:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    3cac:	add.w	r5, r6, #8192	; 0x2000
    {
    3cb0:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3cb4:	ldr	r3, [r3, #40]	; 0x28
    {
    3cb6:	sub	sp, #20
    3cb8:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3cbc:	blx	r3
      if (write_get_length_) {
    3cbe:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    3cc2:	mov	r8, r0
      if (write_get_length_) {
    3cc4:	cbz	r4, 3cda <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    3cc6:	ldr.w	r3, [r5, #1064]	; 0x428
    3cca:	add	r3, r0
    3ccc:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    3cd0:	add	sp, #20
    3cd2:	vpop	{d8}
    3cd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3cda:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    3cde:	movs	r7, #12
    3ce0:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3ce4:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    3ce8:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    3cec:	str	r4, [sp, #12]
        while(pos<size)
    3cee:	ldr	r3, [sp, #12]
    3cf0:	cmp	r3, r8
    3cf2:	bcc.n	3d0e <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    3cf4:	cmp	r7, #0
    3cf6:	beq.n	3cd0 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3cf8:	mov.w	r1, #512	; 0x200
    3cfc:	add.w	r0, r6, #544	; 0x220
    }
    3d00:	add	sp, #20
    3d02:	vpop	{d8}
    3d06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d0a:	b.w	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    3d0e:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3d12:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    3d14:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3d18:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    3d1c:	bne.n	3d40 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3d1e:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3d20:	cmp.w	r9, #8192	; 0x2000
    3d24:	it	cc
    3d26:	movcc	r3, r9
    3d28:	vmov	r1, s16
    3d2c:	ldr	r2, [r0, #0]
    3d2e:	str	r3, [sp, #0]
    3d30:	ldr	r3, [r2, #48]	; 0x30
    3d32:	ldr	r2, [sp, #12]
    3d34:	mov	r4, r3
    3d36:	mov	r3, fp
    3d38:	blx	r4
            disk_pos=0;
    3d3a:	movs	r3, #0
    3d3c:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3d40:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3d44:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d48:	add.w	r0, sl, r7
    3d4c:	cmp	r9, r3
    3d4e:	it	cs
    3d50:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3d52:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d56:	add	r1, fp
    3d58:	cmp	r9, r3
    3d5a:	it	cs
    3d5c:	movcs	r9, r3
    3d5e:	mov	r2, r9
          len += to_copy;
    3d60:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d62:	bl	9488 <memcpy>
          disk_pos += to_copy;
    3d66:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3d6a:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    3d6e:	add	r3, r9
    3d70:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    3d74:	ldr	r3, [sp, #12]
    3d76:	add	r3, r9
    3d78:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    3d7a:	bne.n	3cee <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d7c:	mov	r1, r7
    3d7e:	mov	r0, sl
            len=0;
    3d80:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d82:	bl	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    3d86:	b.n	3cee <MTPD::GetObject(unsigned long)+0x4c>

00003d88 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    3d88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d8c:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    3d8e:	ldr	r0, [r0, #0]
    {
    3d90:	mov	r4, r3
    3d92:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    3d94:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    3d96:	add.w	r5, r8, #8192	; 0x2000
    {
    3d9a:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3d9e:	ldr	r3, [r3, #40]	; 0x28
    {
    3da0:	sub	sp, #20
    3da2:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3da6:	blx	r3
      size -= offset;
    3da8:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    3daa:	cmp.w	r4, #4294967295
    3dae:	it	eq
    3db0:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    3db2:	cmp	r4, r0
    3db4:	mov	r3, r4
    3db6:	it	cs
    3db8:	movcs	r3, r0
    3dba:	str	r3, [sp, #8]
      if (write_get_length_) {
    3dbc:	ldrb.w	r3, [r5, #1060]	; 0x424
    3dc0:	str	r3, [sp, #12]
    3dc2:	cbz	r3, 3ddc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    3dc4:	ldr.w	r3, [r5, #1064]	; 0x428
    3dc8:	ldr	r2, [sp, #8]
    3dca:	add	r3, r2
    3dcc:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    3dd0:	ldr	r0, [sp, #8]
    3dd2:	add	sp, #20
    3dd4:	vpop	{d8}
    3dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3ddc:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    3de0:	movs	r7, #12
    3de2:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3de6:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    3dea:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    3dee:	ldr	r3, [sp, #8]
    3df0:	cmp	r3, r6
    3df2:	bls.n	3dd0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    3df4:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3df8:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    3dfa:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3dfe:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    3e02:	bne.n	3e28 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3e04:	ldr.w	r0, [r8]
    3e08:	cmp.w	r9, #8192	; 0x2000
    3e0c:	it	cc
    3e0e:	movcc	r3, r9
    3e10:	vmov	r1, s16
    3e14:	ldr	r2, [r0, #0]
    3e16:	str	r3, [sp, #0]
    3e18:	ldr	r3, [r2, #48]	; 0x30
    3e1a:	mov	r2, r6
    3e1c:	mov	r4, r3
    3e1e:	mov	r3, fp
    3e20:	blx	r4
            disk_pos=0;
    3e22:	ldr	r3, [sp, #12]
    3e24:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3e28:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3e2c:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e30:	add.w	r0, sl, r7
    3e34:	cmp	r9, r3
    3e36:	it	cs
    3e38:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3e3a:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e3e:	add	r1, fp
    3e40:	cmp	r9, r3
    3e42:	it	cs
    3e44:	movcs	r9, r3
    3e46:	mov	r2, r9
          len += to_copy;
    3e48:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e4a:	bl	9488 <memcpy>
          disk_pos += to_copy;
    3e4e:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3e52:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    3e56:	add	r6, r9
          disk_pos += to_copy;
    3e58:	add	r3, r9
    3e5a:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3e5e:	bne.n	3dee <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e60:	mov	r1, r7
    3e62:	mov	r0, sl
            len=0;
    3e64:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e66:	bl	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    3e6a:	b.n	3dee <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00003e6c <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    3e6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e70:	mov	r8, r0
    3e72:	mov	r5, r1
      static int index=0;
      if(!size) 
    3e74:	mov	r4, r2
    3e76:	ldr.w	fp, [pc, #84]	; 3ecc <MTPD::read(char*, unsigned long)+0x60>
    3e7a:	cbz	r2, 3ec2 <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    3e7c:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    3e80:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    3e84:	ldr.w	r6, [fp]
    3e88:	rsb	r7, r6, #512	; 0x200
    3e8c:	cmp	r7, r4
    3e8e:	it	cs
    3e90:	movcs	r7, r4
        if (data) {
    3e92:	cbz	r5, 3ea2 <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    3e94:	mov	r0, r5
          data += to_copy;
    3e96:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    3e98:	mov	r2, r7
    3e9a:	add.w	r1, r9, r6
    3e9e:	bl	9488 <memcpy>
        index += to_copy;
    3ea2:	add	r6, r7
        size -= to_copy;
    3ea4:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    3ea6:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    3eaa:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    3eae:	bne.n	3ebc <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    3eb0:	mov	r1, r9
    3eb2:	mov	r0, r8
    3eb4:	bl	35ec <MTPD::pull_packet(unsigned char*)>
          index=0;
    3eb8:	str.w	sl, [fp]
      while (size) {
    3ebc:	cmp	r4, #0
    3ebe:	bne.n	3e84 <MTPD::read(char*, unsigned long)+0x18>
    3ec0:	b.n	3ec6 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    3ec2:	str.w	r2, [fp]
        }
      }
    }
    3ec6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eca:	nop
    3ecc:	.word	0x20026e4c

00003ed0 <MTPD::ReadMTPHeader()>:
  {
    3ed0:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    3ed2:	movs	r2, #12
    3ed4:	add	r1, sp, #4
    3ed6:	bl	3e6c <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3eda:	ldrh.w	r3, [sp, #8]
    3ede:	cmp	r3, #2
      return header.len - 12;
    3ee0:	itet	eq
    3ee2:	ldreq	r0, [sp, #4]
      return 0;
    3ee4:	movne	r0, #0
      return header.len - 12;
    3ee6:	subeq	r0, #12
  }
    3ee8:	add	sp, #20
    3eea:	ldr.w	pc, [sp], #4

00003eee <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3eee:	push	{r0, r1, r2, lr}
    3ef0:	movs	r2, #1
    3ef2:	add.w	r1, sp, #7
    3ef6:	bl	3e6c <MTPD::read(char*, unsigned long)>
    3efa:	ldrb.w	r0, [sp, #7]
    3efe:	add	sp, #12
    3f00:	ldr.w	pc, [sp], #4

00003f04 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3f04:	push	{r0, r1, r2, lr}
    3f06:	movs	r2, #2
    3f08:	add.w	r1, sp, #6
    3f0c:	bl	3e6c <MTPD::read(char*, unsigned long)>
    3f10:	ldrh.w	r0, [sp, #6]
    3f14:	add	sp, #12
    3f16:	ldr.w	pc, [sp], #4

00003f1a <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3f1a:	push	{r0, r1, r2, lr}
    3f1c:	movs	r2, #4
    3f1e:	add.w	r1, sp, r2
    3f22:	bl	3e6c <MTPD::read(char*, unsigned long)>
    3f26:	ldr	r0, [sp, #4]
    3f28:	add	sp, #12
    3f2a:	ldr.w	pc, [sp], #4

00003f2e <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    3f2e:	push	{r4, r5, r6, lr}
    3f30:	mov	r5, r1
    3f32:	mov	r6, r0
    int len = read8();
    3f34:	bl	3eee <MTPD::read8()>
    if (!buffer) {
    3f38:	cbz	r5, 3f42 <MTPD::readstring(char*)+0x14>
    3f3a:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    3f3c:	cmp	r5, r4
    3f3e:	bne.n	3f52 <MTPD::readstring(char*)+0x24>
  }
    3f40:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    3f42:	sxth	r2, r0
    3f44:	mov	r1, r5
    3f46:	mov	r0, r6
    3f48:	lsls	r2, r2, #1
  }
    3f4a:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    3f4e:	b.w	3e6c <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    3f52:	mov	r0, r6
    3f54:	bl	3f04 <MTPD::read16()>
    3f58:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    3f5c:	b.n	3f3c <MTPD::readstring(char*)+0xe>

00003f5e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3f5e:	push	{r4, r5, lr}
    3f60:	mov	r4, r0
    3f62:	sub	sp, #260	; 0x104
    3f64:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    3f66:	bl	3ed0 <MTPD::ReadMTPHeader()>
        readstring(filename);
    3f6a:	mov	r1, sp
    3f6c:	mov	r0, r4
    3f6e:	bl	3f2e <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    3f72:	ldr	r0, [r4, #0]
    3f74:	mov	r2, sp
    3f76:	mov	r1, r5
    3f78:	ldr	r3, [r0, #0]
    3f7a:	ldr	r3, [r3, #72]	; 0x48
    3f7c:	blx	r3
      }
      else
        return 0x2005;
    }
    3f7e:	movw	r2, #8193	; 0x2001
    3f82:	movw	r3, #8197	; 0x2005
    3f86:	cmp	r0, #0
    3f88:	ite	ne
    3f8a:	movne	r0, r2
    3f8c:	moveq	r0, r3
    3f8e:	add	sp, #260	; 0x104
    3f90:	pop	{r4, r5, pc}
	...

00003f94 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3f94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f98:	mov	r4, r0
    3f9a:	sub	sp, #268	; 0x10c
    3f9c:	mov	r6, r1
      pull_packet(rx_data_buffer);
    3f9e:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3fa2:	mov	r7, r2
      pull_packet(rx_data_buffer);
    3fa4:	bl	35ec <MTPD::pull_packet(unsigned char*)>
        index=0;
    3fa8:	movs	r2, #0
    3faa:	ldr	r3, [pc, #196]	; (4070 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    3fac:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3fae:	add.w	r9, sp, #8
        index=0;
    3fb2:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    3fb4:	bl	3ed0 <MTPD::ReadMTPHeader()>
    3fb8:	mov	r5, r0
      read32(); len -=4; // storage
    3fba:	mov	r0, r4
    3fbc:	bl	3f1a <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    3fc0:	mov	r0, r4
    3fc2:	bl	3f04 <MTPD::read16()>
    3fc6:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    3fca:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    3fcc:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    3fce:	subs	r3, r0, r3
      read16(); len -=2; // protection
    3fd0:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    3fd2:	rsbs	r8, r3, #0
    3fd6:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    3fda:	bl	3f04 <MTPD::read16()>
      read32(); len -=4; // size
    3fde:	mov	r0, r4
    3fe0:	bl	3f1a <MTPD::read32()>
      read16(); len -=2; // thumb format
    3fe4:	mov	r0, r4
    3fe6:	bl	3f04 <MTPD::read16()>
      read32(); len -=4; // thumb size
    3fea:	mov	r0, r4
    3fec:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // thumb width
    3ff0:	mov	r0, r4
    3ff2:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // thumb height
    3ff6:	mov	r0, r4
    3ff8:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // pix width
    3ffc:	mov	r0, r4
    3ffe:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // pix height
    4002:	mov	r0, r4
    4004:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // bit depth
    4008:	mov	r0, r4
    400a:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // parent
    400e:	mov	r0, r4
    4010:	bl	3f1a <MTPD::read32()>
      read16(); len -=2; // association type
    4014:	mov	r0, r4
    4016:	bl	3f04 <MTPD::read16()>
      read32(); len -=4; // association description
    401a:	mov	r0, r4
    401c:	bl	3f1a <MTPD::read32()>
      read32(); len -=4; // sequence number
    4020:	mov	r0, r4
    4022:	bl	3f1a <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4026:	mov	r1, r9
    4028:	mov	r0, r4
    402a:	bl	3f2e <MTPD::readstring(char*)>
    402e:	mov	r0, r9
    4030:	bl	e100 <strlen>
    4034:	adds	r0, #1
    4036:	sub.w	r5, r5, r0, lsl #1
    403a:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    403c:	cmp	r5, #3
    403e:	bgt.n	405a <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    4040:	cbnz	r5, 4064 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    4042:	ldr	r0, [r4, #0]
    4044:	mov	r2, r7
    4046:	mov	r1, r6
    4048:	ldr	r3, [r0, #0]
    404a:	str.w	r9, [sp]
    404e:	ldr	r4, [r3, #44]	; 0x2c
    4050:	mov	r3, r8
    4052:	blx	r4
    }
    4054:	add	sp, #268	; 0x10c
    4056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    405a:	mov	r0, r4
    405c:	subs	r5, #4
    405e:	bl	3f1a <MTPD::read32()>
    4062:	b.n	403c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4064:	mov	r0, r4
    4066:	subs	r5, #1
    4068:	bl	3eee <MTPD::read8()>
    406c:	b.n	4040 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    406e:	nop
    4070:	.word	0x20026e4c

00004074 <MTPD::SendObject()>:
    { 
    4074:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4078:	add.w	r9, r0, #32
    { 
    407c:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    407e:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4082:	mov	r1, r9
      disk_pos=0;
    4084:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4088:	bl	35ec <MTPD::pull_packet(unsigned char*)>
        index=0;
    408c:	ldr	r3, [pc, #212]	; (4164 <MTPD::SendObject()+0xf0>)
    408e:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4090:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4092:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4096:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4098:	bl	3ed0 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    409c:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    409e:	mov	r7, r0
      disk_pos=0;
    40a0:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    40a4:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    40a6:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    40aa:	bgt.n	40c0 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    40ac:	ldr	r0, [r4, #0]
    40ae:	ldr	r2, [r0, #0]
      if(disk_pos)
    40b0:	cmp	r3, #0
    40b2:	bne.n	414e <MTPD::SendObject()+0xda>
      storage_->close();
    40b4:	ldr	r0, [r4, #0]
    40b6:	ldr	r3, [r0, #0]
    40b8:	ldr	r3, [r3, #56]	; 0x38
    40ba:	blx	r3
      return true;
    40bc:	movs	r0, #1
    40be:	b.n	4108 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    40c0:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    40c4:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    40c8:	add.w	r0, fp, r3
    40cc:	add.w	r1, r9, sl
    40d0:	cmp	r8, r7
    40d2:	it	cs
    40d4:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    40d6:	cmp	r5, r8
    40d8:	it	cs
    40da:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    40dc:	mov	r2, r5
    40de:	bl	9488 <memcpy>
        disk_pos += to_copy;
    40e2:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    40e6:	subs	r3, r7, r5
        disk_pos += to_copy;
    40e8:	add	r2, r5
        len -= to_copy;
    40ea:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    40ec:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    40f0:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    40f4:	bne.n	413a <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    40f6:	ldr	r0, [r4, #0]
    40f8:	mov	r1, fp
    40fa:	ldr	r3, [r0, #0]
    40fc:	ldr	r3, [r3, #52]	; 0x34
    40fe:	blx	r3
    4100:	cmp.w	r0, #8192	; 0x2000
    4104:	bcs.n	410e <MTPD::SendObject()+0x9a>
    4106:	movs	r0, #0
    }
    4108:	add	sp, #12
    410a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    410e:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4110:	subs.w	r2, r8, r5
          disk_pos =0;
    4114:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4118:	beq.n	413a <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    411a:	add.w	r1, sl, r5
    411e:	mov	r0, fp
    4120:	str	r2, [sp, #4]
    4122:	add	r1, r9
    4124:	bl	9488 <memcpy>
            disk_pos += bytes;
    4128:	ldr.w	r3, [r6, #1056]	; 0x420
    412c:	ldr	r2, [sp, #4]
    412e:	add	r3, r2
    4130:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    4134:	sub.w	r3, r7, r8
    4138:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    413a:	ldr	r3, [sp, #4]
    413c:	cbz	r3, 414a <MTPD::SendObject()+0xd6>
          index=0;
    413e:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4142:	mov	r1, r9
    4144:	mov	r0, r4
    4146:	bl	35ec <MTPD::pull_packet(unsigned char*)>
          index=0;
    414a:	ldr	r7, [sp, #4]
    414c:	b.n	40a4 <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    414e:	ldr	r5, [r2, #52]	; 0x34
    4150:	add.w	r1, r4, #1056	; 0x420
    4154:	mov	r2, r3
    4156:	blx	r5
    4158:	ldr.w	r3, [r6, #1056]	; 0x420
    415c:	cmp	r0, r3
    415e:	bcs.n	40b4 <MTPD::SendObject()+0x40>
    4160:	b.n	4106 <MTPD::SendObject()+0x92>
    4162:	nop
    4164:	.word	0x20026e4c

00004168 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4168:	push	{r4, r5, r6, lr}
    416a:	mov	r5, r1
    416c:	add.w	r1, r0, #32
    4170:	mov	r6, r2
    4172:	mov	r4, r0
    4174:	bl	35ec <MTPD::pull_packet(unsigned char*)>
        index=0;
    4178:	ldr	r3, [pc, #28]	; (4198 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    417a:	movs	r2, #0
    417c:	str	r2, [r3, #0]
      if(p2==0xDC07)
    417e:	movw	r3, #56327	; 0xdc07
    4182:	cmp	r6, r3
    4184:	bne.n	4192 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4186:	mov	r1, r5
    4188:	mov	r0, r4
    }
    418a:	ldmia.w	sp!, {r4, r5, r6, lr}
    418e:	b.w	3f5e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4192:	movw	r0, #8197	; 0x2005
    4196:	pop	{r4, r5, r6, pc}
    4198:	.word	0x20026e4c

0000419c <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    419c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41a0:	sub	sp, #60	; 0x3c
    41a2:	mov	r4, r0
    41a4:	bl	b0e4 <usb_mtp_available>
    41a8:	cmp	r0, #0
    41aa:	beq.w	4604 <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    41ae:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    41b2:	movs	r1, #60	; 0x3c
    41b4:	mov	r0, fp
    41b6:	bl	b050 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    41ba:	cmp	r0, #0
    41bc:	beq.w	4604 <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    41c0:	ldr	r3, [r4, #40]	; 0x28
    41c2:	ldr	r1, [pc, #756]	; (44b8 <MTPD::loop()+0x31c>)
    41c4:	str	r3, [sp, #4]
    41c6:	ldrh	r3, [r4, #36]	; 0x24
    41c8:	ldr	r0, [pc, #752]	; (44bc <MTPD::loop()+0x320>)
    41ca:	str	r3, [sp, #0]
    41cc:	ldr	r3, [r4, #32]
    41ce:	ldrh	r2, [r4, #38]	; 0x26
    41d0:	bl	b5c0 <Print::printf(char const*, ...)>
    41d4:	ldr	r3, [r4, #32]
    41d6:	cmp	r3, #12
    41d8:	bls.n	41e4 <MTPD::loop()+0x48>
    41da:	ldr	r2, [r4, #44]	; 0x2c
    41dc:	ldr	r1, [pc, #736]	; (44c0 <MTPD::loop()+0x324>)
    41de:	ldr	r0, [pc, #732]	; (44bc <MTPD::loop()+0x320>)
    41e0:	bl	b5c0 <Print::printf(char const*, ...)>
    41e4:	ldr	r3, [r4, #32]
    41e6:	cmp	r3, #16
    41e8:	bls.n	41f4 <MTPD::loop()+0x58>
    41ea:	ldr	r2, [r4, #48]	; 0x30
    41ec:	ldr	r1, [pc, #720]	; (44c0 <MTPD::loop()+0x324>)
    41ee:	ldr	r0, [pc, #716]	; (44bc <MTPD::loop()+0x320>)
    41f0:	bl	b5c0 <Print::printf(char const*, ...)>
    41f4:	ldr	r3, [r4, #32]
    41f6:	cmp	r3, #20
    41f8:	bls.n	4204 <MTPD::loop()+0x68>
    41fa:	ldr	r2, [r4, #52]	; 0x34
    41fc:	ldr	r1, [pc, #704]	; (44c0 <MTPD::loop()+0x324>)
    41fe:	ldr	r0, [pc, #700]	; (44bc <MTPD::loop()+0x320>)
    4200:	bl	b5c0 <Print::printf(char const*, ...)>
    4204:	ldr	r1, [pc, #700]	; (44c4 <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    4206:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    420a:	ldr	r0, [pc, #688]	; (44bc <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    420c:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4210:	bl	b5c0 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    4214:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    4216:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4218:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    421a:	mov	r6, r3
        int op = CONTAINER->op;
    421c:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    421e:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    4222:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    4224:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    4226:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    422a:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    422e:	movw	r1, #8197	; 0x2005
    4232:	cmp	r0, #2
    4234:	it	eq
    4236:	moveq	r7, r1

        switch (op)
    4238:	movw	r0, #4123	; 0x101b
    423c:	cmp	r2, r0
    423e:	bhi.n	42c8 <MTPD::loop()+0x12c>
    4240:	cmp.w	r2, #4096	; 0x1000
    4244:	bhi.n	424c <MTPD::loop()+0xb0>
    4246:	movw	r7, #8197	; 0x2005
    424a:	b.n	4346 <MTPD::loop()+0x1aa>
    424c:	sub.w	r2, r2, #4096	; 0x1000
    4250:	subs	r2, #1
    4252:	cmp	r2, #26
    4254:	bhi.n	4246 <MTPD::loop()+0xaa>
    4256:	add	r1, pc, #4	; (adr r1, 425c <MTPD::loop()+0xc0>)
    4258:	ldr.w	pc, [r1, r2, lsl #2]
    425c:	.word	0x000042eb
    4260:	.word	0x0000433f
    4264:	.word	0x000045ff
    4268:	.word	0x00004375
    426c:	.word	0x000043b9
    4270:	.word	0x00004403
    4274:	.word	0x00004419
    4278:	.word	0x0000446f
    427c:	.word	0x000044c9
    4280:	.word	0x00004247
    4284:	.word	0x00004513
    4288:	.word	0x00004531
    428c:	.word	0x00004545
    4290:	.word	0x00004247
    4294:	.word	0x00004247
    4298:	.word	0x00004247
    429c:	.word	0x00004247
    42a0:	.word	0x00004247
    42a4:	.word	0x00004247
    42a8:	.word	0x0000455b
    42ac:	.word	0x000045a5
    42b0:	.word	0x00004247
    42b4:	.word	0x00004247
    42b8:	.word	0x00004247
    42bc:	.word	0x000045ef
    42c0:	.word	0x0000460b
    42c4:	.word	0x00004635
    42c8:	add.w	r3, r2, #26496	; 0x6780
    42cc:	adds	r3, #127	; 0x7f
    42ce:	uxth	r3, r3
    42d0:	cmp	r3, #3
    42d2:	bhi.n	4246 <MTPD::loop()+0xaa>
    42d4:	sub.w	r2, r2, #38912	; 0x9800
    42d8:	subs	r2, #2
    42da:	cmp	r2, #2
    42dc:	bhi.w	4688 <MTPD::loop()+0x4ec>
    42e0:	tbh	[pc, r2, lsl #1]
    42e4:	.word	0x021e01f7
    42e8:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    42ea:	movs	r6, #0
    42ec:	movs	r3, #1
    42ee:	mov	r0, r4
    42f0:	strb.w	r3, [r5, #1060]	; 0x424
    42f4:	str.w	r6, [r5, #1064]	; 0x428
    42f8:	bl	36f8 <MTPD::WriteDescriptor()>
    42fc:	ldr.w	r3, [r5, #1064]	; 0x428
    4300:	mov	r0, r4
    4302:	movs	r2, #12
    4304:	adds	r3, #12
    4306:	add	r1, sp, #24
    4308:	str	r3, [sp, #24]
    430a:	movs	r3, #2
    430c:	strh.w	r3, [sp, #28]
    4310:	ldrh	r3, [r4, #38]	; 0x26
    4312:	strh.w	r3, [sp, #30]
    4316:	ldr	r3, [r4, #40]	; 0x28
    4318:	str.w	r6, [r5, #1064]	; 0x428
    431c:	strb.w	r6, [r5, #1060]	; 0x424
    4320:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4322:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4326:	mov	r0, r4
    4328:	bl	36f8 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    432c:	ldr	r1, [sp, #24]
    432e:	ubfx	r1, r1, #0, #9
    4332:	cbz	r1, 4346 <MTPD::loop()+0x1aa>
    4334:	add.w	r0, r4, #544	; 0x220
    4338:	bl	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    433c:	b.n	4346 <MTPD::loop()+0x1aa>
            openSession(p1);
    433e:	mov	r1, r6
    4340:	mov	r0, r4
    4342:	bl	35dc <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4346:	movs	r3, #3
            CONTAINER->len=len;
    4348:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    434c:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    434e:	mov	r1, fp
            CONTAINER->type=3;
    4350:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4352:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4354:	ldr	r3, [sp, #16]
    4356:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4358:	ldr	r3, [sp, #12]
    435a:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    435c:	add.w	r4, r4, #544	; 0x220
    4360:	mov	r0, r4
    4362:	bl	9488 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4366:	mov	r1, r9
    4368:	mov	r0, r4
        }
      }
    }
    436a:	add	sp, #60	; 0x3c
    436c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4370:	b.w	34f4 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4374:	movs	r6, #0
    4376:	movs	r3, #1
    4378:	mov	r0, r4
    437a:	strb.w	r3, [r5, #1060]	; 0x424
    437e:	str.w	r6, [r5, #1064]	; 0x428
    4382:	bl	3810 <MTPD::WriteStorageIDs()>
    4386:	ldr.w	r3, [r5, #1064]	; 0x428
    438a:	mov	r0, r4
    438c:	movs	r2, #12
    438e:	adds	r3, #12
    4390:	add	r1, sp, #24
    4392:	str	r3, [sp, #24]
    4394:	movs	r3, #2
    4396:	strh.w	r3, [sp, #28]
    439a:	ldrh	r3, [r4, #38]	; 0x26
    439c:	strh.w	r3, [sp, #30]
    43a0:	ldr	r3, [r4, #40]	; 0x28
    43a2:	str.w	r6, [r5, #1064]	; 0x428
    43a6:	strb.w	r6, [r5, #1060]	; 0x424
    43aa:	str	r3, [sp, #32]
    { if (write_get_length_) 
    43ac:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    43b0:	mov	r0, r4
    43b2:	bl	3810 <MTPD::WriteStorageIDs()>
    43b6:	b.n	432c <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    43b8:	mov.w	r8, #0
    43bc:	movs	r3, #1
    43be:	mov	r1, r6
    43c0:	mov	r0, r4
    43c2:	strb.w	r3, [r5, #1060]	; 0x424
    43c6:	str.w	r8, [r5, #1064]	; 0x428
    43ca:	bl	3a54 <MTPD::GetStorageInfo(unsigned long)>
    43ce:	ldr.w	r3, [r5, #1064]	; 0x428
    43d2:	add	r1, sp, #24
    43d4:	mov	r0, r4
    43d6:	adds	r3, #12
    43d8:	movs	r2, #12
    43da:	str	r3, [sp, #24]
    43dc:	movs	r3, #2
    43de:	strh.w	r3, [sp, #28]
    43e2:	ldrh	r3, [r4, #38]	; 0x26
    43e4:	strh.w	r3, [sp, #30]
    43e8:	ldr	r3, [r4, #40]	; 0x28
    43ea:	str.w	r8, [r5, #1064]	; 0x428
    43ee:	strb.w	r8, [r5, #1060]	; 0x424
    43f2:	str	r3, [sp, #32]
    { if (write_get_length_) 
    43f4:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    43f8:	mov	r1, r6
    43fa:	mov	r0, r4
    43fc:	bl	3a54 <MTPD::GetStorageInfo(unsigned long)>
    4400:	b.n	432c <MTPD::loop()+0x190>
            if (p2) 
    4402:	cmp.w	r8, #0
    4406:	bne.w	477c <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    440a:	mov	r2, r3
    440c:	mov	r1, r6
    440e:	mov	r0, r4
    4410:	bl	3584 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4414:	str	r0, [sp, #12]
    4416:	b.n	4346 <MTPD::loop()+0x1aa>
            if (p2) 
    4418:	cmp.w	r8, #0
    441c:	bne.w	477c <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4420:	movs	r2, #1
    4422:	mov	r1, r6
    4424:	mov	r0, r4
    4426:	str.w	r8, [r5, #1064]	; 0x428
    442a:	strb.w	r2, [r5, #1060]	; 0x424
    442e:	mov	r2, r3
    4430:	str	r3, [sp, #20]
    4432:	bl	383a <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4436:	ldr.w	r2, [r5, #1064]	; 0x428
    443a:	add	r1, sp, #24
    443c:	mov	r0, r4
    443e:	adds	r2, #12
    4440:	str	r2, [sp, #24]
    4442:	movs	r2, #2
    4444:	strh.w	r2, [sp, #28]
    4448:	ldrh	r2, [r4, #38]	; 0x26
    444a:	strh.w	r2, [sp, #30]
    444e:	ldr	r2, [r4, #40]	; 0x28
    4450:	str.w	r8, [r5, #1064]	; 0x428
    4454:	str	r2, [sp, #32]
    4456:	movs	r2, #12
    4458:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    445c:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4460:	ldr	r3, [sp, #20]
    4462:	mov	r1, r6
    4464:	mov	r0, r4
    4466:	mov	r2, r3
    4468:	bl	383a <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    446c:	b.n	432c <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    446e:	mov.w	r8, #0
    4472:	movs	r3, #1
    4474:	mov	r1, r6
    4476:	mov	r0, r4
    4478:	strb.w	r3, [r5, #1060]	; 0x424
    447c:	str.w	r8, [r5, #1064]	; 0x428
    4480:	bl	388c <MTPD::GetObjectInfo(unsigned long)>
    4484:	ldr.w	r3, [r5, #1064]	; 0x428
    4488:	add	r1, sp, #24
    448a:	mov	r0, r4
    448c:	adds	r3, #12
    448e:	movs	r2, #12
    4490:	str	r3, [sp, #24]
    4492:	movs	r3, #2
    4494:	strh.w	r3, [sp, #28]
    4498:	ldrh	r3, [r4, #38]	; 0x26
    449a:	strh.w	r3, [sp, #30]
    449e:	ldr	r3, [r4, #40]	; 0x28
    44a0:	str.w	r8, [r5, #1064]	; 0x428
    44a4:	strb.w	r8, [r5, #1060]	; 0x424
    44a8:	str	r3, [sp, #32]
    { if (write_get_length_) 
    44aa:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    44ae:	mov	r1, r6
    44b0:	mov	r0, r4
    44b2:	bl	388c <MTPD::GetObjectInfo(unsigned long)>
    44b6:	b.n	432c <MTPD::loop()+0x190>
    44b8:	.word	0x20007f00
    44bc:	.word	0x20008944
    44c0:	.word	0x20007f0e
    44c4:	.word	0x20007bb9
            TRANSMIT(GetObject(p1));
    44c8:	mov.w	r8, #0
    44cc:	movs	r3, #1
    44ce:	mov	r1, r6
    44d0:	mov	r0, r4
    44d2:	strb.w	r3, [r5, #1060]	; 0x424
    44d6:	str.w	r8, [r5, #1064]	; 0x428
    44da:	bl	3ca2 <MTPD::GetObject(unsigned long)>
    44de:	ldr.w	r3, [r5, #1064]	; 0x428
    44e2:	add	r1, sp, #24
    44e4:	mov	r0, r4
    44e6:	adds	r3, #12
    44e8:	movs	r2, #12
    44ea:	str	r3, [sp, #24]
    44ec:	movs	r3, #2
    44ee:	strh.w	r3, [sp, #28]
    44f2:	ldrh	r3, [r4, #38]	; 0x26
    44f4:	strh.w	r3, [sp, #30]
    44f8:	ldr	r3, [r4, #40]	; 0x28
    44fa:	str.w	r8, [r5, #1064]	; 0x428
    44fe:	strb.w	r8, [r5, #1060]	; 0x424
    4502:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4504:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4508:	mov	r1, r6
    450a:	mov	r0, r4
    450c:	bl	3ca2 <MTPD::GetObject(unsigned long)>
    4510:	b.n	432c <MTPD::loop()+0x190>
              if (p2) {
    4512:	cmp.w	r8, #0
    4516:	bne.w	477c <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    451a:	ldr	r0, [r4, #0]
    451c:	mov	r1, r6
    451e:	ldr	r3, [r0, #0]
    4520:	ldr	r3, [r3, #60]	; 0x3c
    4522:	blx	r3
                  return_code = 0x2012; // partial deletion
    4524:	movw	r3, #8210	; 0x2012
    4528:	cmp	r0, #0
    452a:	it	eq
    452c:	moveq	r7, r3
    452e:	b.n	4346 <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    4530:	mov	r2, r8
    4532:	mov	r1, r6
    4534:	mov	r0, r4
              len = 12 + 3 * 4;
    4536:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    453a:	bl	3f94 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    453e:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    4542:	b.n	4346 <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    4544:	mov	r0, r4
    4546:	mov.w	r9, #12
    454a:	bl	4074 <MTPD::SendObject()>
    454e:	movw	r3, #8197	; 0x2005
    4552:	cmp	r0, #0
    4554:	it	eq
    4556:	moveq	r7, r3
    4558:	b.n	4346 <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    455a:	mov.w	r8, #0
    455e:	movs	r3, #1
    4560:	mov	r1, r6
    4562:	mov	r0, r4
    4564:	strb.w	r3, [r5, #1060]	; 0x424
    4568:	str.w	r8, [r5, #1064]	; 0x428
    456c:	bl	36a0 <MTPD::GetDevicePropDesc(unsigned long)>
    4570:	ldr.w	r3, [r5, #1064]	; 0x428
    4574:	add	r1, sp, #24
    4576:	mov	r0, r4
    4578:	adds	r3, #12
    457a:	movs	r2, #12
    457c:	str	r3, [sp, #24]
    457e:	movs	r3, #2
    4580:	strh.w	r3, [sp, #28]
    4584:	ldrh	r3, [r4, #38]	; 0x26
    4586:	strh.w	r3, [sp, #30]
    458a:	ldr	r3, [r4, #40]	; 0x28
    458c:	str.w	r8, [r5, #1064]	; 0x428
    4590:	strb.w	r8, [r5, #1060]	; 0x424
    4594:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4596:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    459a:	mov	r1, r6
    459c:	mov	r0, r4
    459e:	bl	36a0 <MTPD::GetDevicePropDesc(unsigned long)>
    45a2:	b.n	432c <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    45a4:	mov.w	r8, #0
    45a8:	movs	r3, #1
    45aa:	mov	r1, r6
    45ac:	mov	r0, r4
    45ae:	strb.w	r3, [r5, #1060]	; 0x424
    45b2:	str.w	r8, [r5, #1064]	; 0x428
    45b6:	bl	368c <MTPD::GetDevicePropValue(unsigned long)>
    45ba:	ldr.w	r3, [r5, #1064]	; 0x428
    45be:	add	r1, sp, #24
    45c0:	mov	r0, r4
    45c2:	adds	r3, #12
    45c4:	movs	r2, #12
    45c6:	str	r3, [sp, #24]
    45c8:	movs	r3, #2
    45ca:	strh.w	r3, [sp, #28]
    45ce:	ldrh	r3, [r4, #38]	; 0x26
    45d0:	strh.w	r3, [sp, #30]
    45d4:	ldr	r3, [r4, #40]	; 0x28
    45d6:	str.w	r8, [r5, #1064]	; 0x428
    45da:	strb.w	r8, [r5, #1060]	; 0x424
    45de:	str	r3, [sp, #32]
    { if (write_get_length_) 
    45e0:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    45e4:	mov	r1, r6
    45e6:	mov	r0, r4
    45e8:	bl	368c <MTPD::GetDevicePropValue(unsigned long)>
    45ec:	b.n	432c <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    45ee:	mov	r2, r8
    45f0:	mov	r1, r6
    45f2:	mov	r0, r4
              len = 12;
    45f4:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    45f8:	bl	35aa <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    45fc:	mov	r7, r0
        if(return_code)
    45fe:	cmp	r7, #0
    4600:	bne.w	4346 <MTPD::loop()+0x1aa>
    }
    4604:	add	sp, #60	; 0x3c
    4606:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    460a:	mov	r2, r8
    460c:	mov	r1, r6
    460e:	mov	r0, r4
              if(!return_code) 
    4610:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    4614:	bl	35c8 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4618:	cmp	r0, #0
    461a:	itete	eq
    461c:	moveq	r3, r6
    461e:	movne	r3, r0
    4620:	moveq.w	r9, #12
    4624:	movne.w	r9, #16
    4628:	str	r3, [sp, #12]
    462a:	movw	r3, #8193	; 0x2001
    462e:	it	ne
    4630:	movne	r7, r3
    4632:	b.n	4346 <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4634:	mov.w	sl, #0
    4638:	movs	r2, #1
    463a:	mov	r1, r6
    463c:	mov	r0, r4
    463e:	strb.w	r2, [r5, #1060]	; 0x424
    4642:	mov	r2, r8
    4644:	str.w	sl, [r5, #1064]	; 0x428
    4648:	str	r3, [sp, #20]
    464a:	bl	3d88 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    464e:	ldr.w	r2, [r5, #1064]	; 0x428
    4652:	add	r1, sp, #24
    4654:	adds	r2, #12
    4656:	str	r2, [sp, #24]
    4658:	movs	r2, #2
    465a:	strh.w	r2, [sp, #28]
    465e:	ldrh	r2, [r4, #38]	; 0x26
    4660:	strh.w	r2, [sp, #30]
    4664:	ldr	r2, [r4, #40]	; 0x28
    4666:	str.w	sl, [r5, #1064]	; 0x428
    466a:	strb.w	sl, [r5, #1060]	; 0x424
    466e:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    4672:	mov	r0, r4
    4674:	movs	r2, #32
    4676:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    467a:	ldr	r3, [sp, #20]
    467c:	mov	r2, r8
    467e:	mov	r1, r6
    4680:	mov	r0, r4
    4682:	bl	3d88 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4686:	b.n	432c <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4688:	mov.w	r8, #0
    468c:	movs	r3, #1
    468e:	mov	r1, r6
    4690:	mov	r0, r4
    4692:	strb.w	r3, [r5, #1060]	; 0x424
    4696:	str.w	r8, [r5, #1064]	; 0x428
    469a:	bl	395c <MTPD::getObjectPropsSupported(unsigned long)>
    469e:	ldr.w	r3, [r5, #1064]	; 0x428
    46a2:	add	r1, sp, #24
    46a4:	mov	r0, r4
    46a6:	adds	r3, #12
    46a8:	movs	r2, #12
    46aa:	str	r3, [sp, #24]
    46ac:	movs	r3, #2
    46ae:	strh.w	r3, [sp, #28]
    46b2:	ldrh	r3, [r4, #38]	; 0x26
    46b4:	strh.w	r3, [sp, #30]
    46b8:	ldr	r3, [r4, #40]	; 0x28
    46ba:	str.w	r8, [r5, #1064]	; 0x428
    46be:	strb.w	r8, [r5, #1060]	; 0x424
    46c2:	str	r3, [sp, #32]
    { if (write_get_length_) 
    46c4:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    46c8:	mov	r1, r6
    46ca:	mov	r0, r4
    46cc:	bl	395c <MTPD::getObjectPropsSupported(unsigned long)>
    46d0:	b.n	432c <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    46d2:	mov.w	sl, #0
    46d6:	movs	r3, #1
    46d8:	mov	r2, r8
    46da:	mov	r1, r6
    46dc:	mov	r0, r4
    46de:	strb.w	r3, [r5, #1060]	; 0x424
    46e2:	str.w	sl, [r5, #1064]	; 0x428
    46e6:	bl	3b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    46ea:	ldr.w	r3, [r5, #1064]	; 0x428
    46ee:	add	r1, sp, #24
    46f0:	mov	r0, r4
    46f2:	adds	r3, #12
    46f4:	movs	r2, #12
    46f6:	str	r3, [sp, #24]
    46f8:	movs	r3, #2
    46fa:	strh.w	r3, [sp, #28]
    46fe:	ldrh	r3, [r4, #38]	; 0x26
    4700:	strh.w	r3, [sp, #30]
    4704:	ldr	r3, [r4, #40]	; 0x28
    4706:	str.w	sl, [r5, #1064]	; 0x428
    470a:	strb.w	sl, [r5, #1060]	; 0x424
    470e:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4710:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4714:	mov	r2, r8
    4716:	mov	r1, r6
    4718:	mov	r0, r4
    471a:	bl	3b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    471e:	b.n	432c <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4720:	mov.w	sl, #0
    4724:	movs	r3, #1
    4726:	mov	r2, r8
    4728:	mov	r1, r6
    472a:	mov	r0, r4
    472c:	strb.w	r3, [r5, #1060]	; 0x424
    4730:	str.w	sl, [r5, #1064]	; 0x428
    4734:	bl	398c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4738:	ldr.w	r3, [r5, #1064]	; 0x428
    473c:	add	r1, sp, #24
    473e:	mov	r0, r4
    4740:	adds	r3, #12
    4742:	movs	r2, #12
    4744:	str	r3, [sp, #24]
    4746:	movs	r3, #2
    4748:	strh.w	r3, [sp, #28]
    474c:	ldrh	r3, [r4, #38]	; 0x26
    474e:	strh.w	r3, [sp, #30]
    4752:	ldr	r3, [r4, #40]	; 0x28
    4754:	str.w	sl, [r5, #1064]	; 0x428
    4758:	strb.w	sl, [r5, #1060]	; 0x424
    475c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    475e:	bl	350c <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4762:	mov	r2, r8
    4764:	mov	r1, r6
    4766:	mov	r0, r4
    4768:	bl	398c <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    476c:	b.n	432c <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    476e:	mov	r2, r8
    4770:	mov	r1, r6
    4772:	mov	r0, r4
    4774:	bl	4168 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4778:	mov	r7, r0
              break;
    477a:	b.n	45fe <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    477c:	movw	r7, #8212	; 0x2014
    4780:	b.n	4346 <MTPD::loop()+0x1aa>
    4782:	nop

00004784 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4784:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4786:	cbz	r3, 47be <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4788:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    478a:	movw	r5, #513	; 0x201
    478e:	str	r5, [r4, #16]
    4790:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4792:	cbz	r1, 47c0 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4794:	ldrb.w	r5, [r1], #1
    4798:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    479a:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    479c:	str	r5, [r6, #100]	; 0x64
    479e:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    47a0:	ldr	r6, [r5, #112]	; 0x70
    47a2:	lsls	r6, r6, #30
    47a4:	bmi.n	47b0 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    47a6:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    47a8:	cbz	r2, 47ae <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    47aa:	strb.w	r5, [r2], #1
				count_read--;
    47ae:	subs	r4, #1
    47b0:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    47b2:	ldr	r5, [r5, #20]
    47b4:	lsls	r5, r5, #31
    47b6:	bpl.n	479e <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    47b8:	cmp	r3, #0
    47ba:	bne.n	4792 <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    47bc:	cbnz	r4, 47c6 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    47be:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    47c0:	ldrb.w	r5, [r0, #60]	; 0x3c
    47c4:	b.n	4798 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    47c6:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    47c8:	ldr	r1, [r3, #112]	; 0x70
    47ca:	lsls	r1, r1, #30
    47cc:	bmi.n	47bc <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    47ce:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    47d0:	cbz	r2, 47d6 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    47d2:	strb.w	r3, [r2], #1
			count_read--;
    47d6:	subs	r4, #1
    47d8:	b.n	47bc <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

000047da <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    47da:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    47dc:	ldr	r2, [r3, #0]
    47de:	ldr	r1, [r2, #0]
    47e0:	ldr	r2, [r3, #4]
    47e2:	tst	r1, r2
void SPIClass::end() {
    47e4:	push	{r4, lr}
    47e6:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    47e8:	beq.n	4820 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    47ea:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    47ec:	movs	r1, #0
    47ee:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    47f0:	movs	r1, #5
    47f2:	ldrb	r2, [r0, #16]
    47f4:	add	r3, r2
    47f6:	ldrb	r0, [r3, #16]
    47f8:	bl	ad94 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    47fc:	ldrb	r2, [r4, #17]
    47fe:	ldr	r3, [r4, #4]
    4800:	movs	r1, #5
    4802:	add	r3, r2
    4804:	ldrb.w	r0, [r3, #36]	; 0x24
    4808:	bl	ad94 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    480c:	ldr	r3, [r4, #4]
    480e:	ldrb	r2, [r4, #18]
    4810:	movs	r1, #5
    4812:	add	r3, r2
	}
}
    4814:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4818:	ldrb.w	r0, [r3, #56]	; 0x38
    481c:	b.w	ad94 <pinMode>
}
    4820:	pop	{r4, pc}

00004822 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    4822:	mov	r3, r0
    size_t n = end - str;
    4824:	subs	r0, r2, r1
    if (cp < 0X80) {
    4826:	cmp	r3, #127	; 0x7f
    4828:	bhi.n	4836 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    482a:	cmp	r0, #0
    482c:	beq.n	48b2 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    482e:	mov	r0, r1
    4830:	strb.w	r3, [r0], #1
    4834:	bx	lr
    } else if (cp < 0X800) {
    4836:	cmp.w	r3, #2048	; 0x800
    483a:	bcs.n	4858 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    483c:	cmp	r0, #1
    483e:	bls.n	48b0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    4840:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4842:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    4846:	mov	r0, r1
    4848:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    484c:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    4850:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4854:	strb	r3, [r1, #1]
    4856:	bx	lr
    } else if (cp < 0X10000) {
    4858:	cmp.w	r3, #65536	; 0x10000
    485c:	bcs.n	4882 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    485e:	cmp	r0, #2
    4860:	bls.n	48b0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    4862:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4864:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    4866:	orn	r2, r2, #31
    486a:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    486c:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4870:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    4874:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4878:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    487c:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    487e:	strb	r3, [r1, #2]
    4880:	bx	lr
       if (n < 4) goto fail;
    4882:	cmp	r0, #3
    4884:	bls.n	48b0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    4886:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4888:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    488a:	orn	r2, r2, #15
    488e:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    4890:	ubfx	r2, r3, #12, #6
    4894:	orn	r2, r2, #127	; 0x7f
    4898:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    489a:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    489e:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    48a2:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    48a6:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    48aa:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    48ac:	strb	r3, [r1, #3]
    48ae:	bx	lr
    return nullptr;
    48b0:	movs	r0, #0
  }
    48b2:	bx	lr

000048b4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    48b4:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    48b6:	push	{r4, r5, lr}
    48b8:	mov	r5, r0
    if (str >= end) {
    48ba:	bcs.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    48bc:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    48be:	ldrsb.w	r0, [r0]
    48c2:	cmp	r0, #0
    48c4:	blt.n	48cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    48c6:	adds	r0, r5, #1
      *rtn = ch;
    48c8:	str	r3, [r2, #0]
  }
    48ca:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    48cc:	and.w	r0, r3, #224	; 0xe0
    48d0:	cmp	r0, #192	; 0xc0
    48d2:	bne.n	4912 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    48d4:	and.w	r3, r3, #31
      n = 2;
    48d8:	movs	r4, #2
    if ((str + n) > end) {
    48da:	adds	r0, r5, r4
    48dc:	cmp	r0, r1
    48de:	bhi.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    48e0:	adds	r5, #1
      ch = str[i];
    48e2:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    48e6:	and.w	r4, r1, #192	; 0xc0
    48ea:	cmp	r4, #128	; 0x80
    48ec:	bne.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    48ee:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    48f2:	cmp	r5, r0
      cp |= ch & 0X3F;
    48f4:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    48f8:	bne.n	48e2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    48fa:	sub.w	r4, r3, #128	; 0x80
    48fe:	ldr	r1, [pc, #56]	; (4938 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    4900:	cmp	r4, r1
    4902:	bhi.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    4904:	sub.w	r1, r3, #55296	; 0xd800
    4908:	cmp.w	r1, #2048	; 0x800
    490c:	bcc.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    490e:	str	r3, [r2, #0]
    return str + n;
    4910:	b.n	48ca <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    4912:	and.w	r0, r3, #240	; 0xf0
    4916:	cmp	r0, #224	; 0xe0
    4918:	bne.n	4922 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    491a:	and.w	r3, r3, #15
      n = 3;
    491e:	movs	r4, #3
    4920:	b.n	48da <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    4922:	and.w	r0, r3, #248	; 0xf8
    4926:	cmp	r0, #240	; 0xf0
    4928:	bne.n	4932 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    492a:	and.w	r3, r3, #7
      n = 4;
    492e:	movs	r4, #4
    4930:	b.n	48da <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    4932:	movs	r0, #0
    4934:	b.n	48ca <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    4936:	nop
    4938:	.word	0x0010ff7f

0000493c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    493c:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    493e:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    4940:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    4942:	lsls	r2, r3, #31
    4944:	bpl.n	4986 <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    4946:	ldr	r0, [r0, #4]
    4948:	add.w	r2, r4, #16
    494c:	ldr	r1, [r4, #12]
    494e:	ldr	r3, [r0, #0]
    4950:	str	r2, [sp, #4]
    4952:	ldr	r3, [r3, #36]	; 0x24
    4954:	blx	r3
    4956:	ldr	r2, [sp, #4]
    4958:	mov	r5, r0
    495a:	cbnz	r0, 4964 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    495c:	movs	r5, #0
}
    495e:	mov	r0, r5
    4960:	add	sp, #8
    4962:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    4964:	ldrb	r3, [r4, #0]
    4966:	lsls	r3, r3, #30
    4968:	bmi.n	4974 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    496a:	ldrb	r3, [r4, #0]
    496c:	bic.w	r3, r3, #1
    4970:	strb	r3, [r4, #0]
    4972:	b.n	495e <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    4974:	adds	r0, r4, #4
    4976:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    4978:	ldr	r3, [r0, #0]
    497a:	add	r1, r6
    497c:	ldr	r3, [r3, #36]	; 0x24
    497e:	blx	r3
    4980:	cmp	r0, #0
    4982:	bne.n	496a <FsCache::sync()+0x2e>
    4984:	b.n	495c <FsCache::sync()+0x20>
  return true;
    4986:	movs	r5, #1
    4988:	b.n	495e <FsCache::sync()+0x22>

0000498a <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    498a:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    498c:	push	{r4, r5, r6, lr}
    498e:	mov	r4, r0
    4990:	mov	r6, r1
    4992:	mov	r5, r2
  if (!m_blockDev) {
    4994:	cbnz	r3, 499a <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    4996:	movs	r0, #0
}
    4998:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    499a:	ldr	r3, [r0, #12]
    499c:	cmp	r3, r1
    499e:	beq.n	49b2 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    49a0:	bl	493c <FsCache::sync()>
    49a4:	cmp	r0, #0
    49a6:	beq.n	4996 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    49a8:	lsls	r3, r5, #29
    49aa:	bpl.n	49c2 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    49ac:	movs	r3, #0
    m_sector = sector;
    49ae:	str	r6, [r4, #12]
    m_status = 0;
    49b0:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    49b2:	ldrb	r3, [r4, #0]
    49b4:	and.w	r5, r5, #3
    49b8:	mov	r0, r4
    49ba:	orrs	r3, r5
    49bc:	strb.w	r3, [r0], #16
  return m_buffer;
    49c0:	b.n	4998 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    49c2:	ldr	r0, [r4, #4]
    49c4:	add.w	r2, r4, #16
    49c8:	mov	r1, r6
    49ca:	ldr	r3, [r0, #0]
    49cc:	ldr	r3, [r3, #16]
    49ce:	blx	r3
    49d0:	cmp	r0, #0
    49d2:	bne.n	49ac <FsCache::prepare(unsigned long, unsigned char)+0x22>
    49d4:	b.n	4996 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

000049d8 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    49d8:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    49da:	push	{r4, r5, lr}
  if (chr < 127) {
    49dc:	bhi.n	4a2e <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    49de:	sub.w	r3, r0, #97	; 0x61
    49e2:	cmp	r3, #25
    49e4:	ite	hi
    49e6:	movhi	r3, #0
    49e8:	movls	r3, #1
    49ea:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    49ee:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    49f0:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    49f2:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    49f6:	ldrh.w	r5, [r1, r2, lsl #2]
    49fa:	cmp	r5, r0
    mid = left + (right - left)/2;
    49fc:	ite	hi
    49fe:	movhi	r4, r2
    4a00:	movls	r3, r2
  while (right - left > 1) {
    4a02:	subs	r2, r4, r3
    4a04:	cmp	r2, #1
    4a06:	bhi.n	49f2 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    4a08:	uxth	r2, r3
    4a0a:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    4a0e:	cmp	r0, r3
    4a10:	bcc.n	4a6e <toUpcase(unsigned short)+0x96>
    4a12:	add.w	r1, r1, r2, lsl #2
    4a16:	subs	r3, r0, r3
    4a18:	ldrb	r2, [r1, #3]
    4a1a:	cmp	r3, r2
    4a1c:	bge.n	4a6e <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    4a1e:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    4a22:	cmp	r2, #1
    4a24:	bne.n	4a36 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    4a26:	and.w	r3, r3, #1
    4a2a:	subs	r3, r0, r3
    4a2c:	b.n	49ee <toUpcase(unsigned short)+0x16>
  size_t right = size;
    4a2e:	movs	r4, #53	; 0x35
  size_t left = 0;
    4a30:	movs	r3, #0
    4a32:	ldr	r1, [pc, #68]	; (4a78 <toUpcase(unsigned short)+0xa0>)
    4a34:	b.n	4a02 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    4a36:	cbz	r2, 4a40 <toUpcase(unsigned short)+0x68>
    4a38:	uxth	r2, r2
    4a3a:	add	r2, r0
    4a3c:	uxth	r0, r2
    4a3e:	b.n	49f0 <toUpcase(unsigned short)+0x18>
    4a40:	movw	r2, #58272	; 0xe3a0
    4a44:	b.n	4a3a <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    4a46:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    4a4a:	ldrh.w	r5, [r1, r2, lsl #2]
    4a4e:	cmp	r5, r0
    mid = left + (right - left)/2;
    4a50:	ite	hi
    4a52:	movhi	r4, r2
    4a54:	movls	r3, r2
  while (right - left > 1) {
    4a56:	subs	r2, r4, r3
    4a58:	cmp	r2, #1
    4a5a:	bhi.n	4a46 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    4a5c:	uxth	r3, r3
    4a5e:	ldrh.w	r2, [r1, r3, lsl #2]
    4a62:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    4a64:	itt	eq
    4a66:	addeq.w	r1, r1, r3, lsl #2
    4a6a:	ldrheq	r0, [r1, #2]
    4a6c:	b.n	49f0 <toUpcase(unsigned short)+0x18>
    4a6e:	movs	r4, #75	; 0x4b
    4a70:	movs	r3, #0
    4a72:	ldr	r1, [pc, #8]	; (4a7c <toUpcase(unsigned short)+0xa4>)
    4a74:	b.n	4a56 <toUpcase(unsigned short)+0x7e>
    4a76:	nop
    4a78:	.word	0x200079fc
    4a7c:	.word	0x20007898

00004a80 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    4a80:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    4a82:	push	{r0, r1, r4, lr}
    4a84:	mov	r4, r0
  if (ls) {
    4a86:	cbz	r3, 4a92 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    4a88:	movs	r2, #0
    4a8a:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    4a8c:	mov	r0, r3
    4a8e:	add	sp, #8
    4a90:	pop	{r4, pc}
  } else if (next >= end) {
    4a92:	ldrd	r0, r1, [r0, #4]
    4a96:	cmp	r0, r1
    4a98:	bcs.n	4a8c <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    4a9a:	add	r2, sp, #4
    4a9c:	bl	48b4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    4aa0:	cbnz	r0, 4aa8 <FsName::get16()+0x28>
  return 0XFFFF;
    4aa2:	movw	r3, #65535	; 0xffff
    4aa6:	b.n	4a8c <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    4aa8:	ldr	r2, [sp, #4]
    next = ptr;
    4aaa:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    4aac:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    4ab0:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    4ab2:	bcc.n	4a8c <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    4ab4:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    4ab8:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    4aba:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    4abe:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    4ac2:	strh	r3, [r4, #12]
    4ac4:	uxth	r3, r2
    4ac6:	b.n	4a8c <FsName::get16()+0xc>

00004ac8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    4ac8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4acc:	mov	r6, r2
    4ace:	mov	r5, r1
    4ad0:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    4ad4:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4ad6:	ldrh.w	r4, [r5, #2]!
    4ada:	cbnz	r3, 4aee <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    4adc:	ldrd	r2, r3, [r6, #4]
    4ae0:	cmp	r2, r3
    4ae2:	bne.n	4aee <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    4ae4:	clz	r0, r4
    4ae8:	lsrs	r0, r0, #5
}
    4aea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    4aee:	mov	r0, r6
    4af0:	bl	4a80 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    4af4:	bl	49d8 <toUpcase(unsigned short)>
    4af8:	mov	r7, r0
    4afa:	mov	r0, r4
    4afc:	bl	49d8 <toUpcase(unsigned short)>
    4b00:	cmp	r7, r0
    4b02:	bne.n	4b0c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    4b04:	cmp	r5, r8
    4b06:	bne.n	4ad4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    4b08:	movs	r0, #1
    4b0a:	b.n	4aea <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    4b0c:	movs	r0, #0
    4b0e:	b.n	4aea <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00004b10 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    4b10:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    4b14:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    4b18:	mov	sl, r0
    4b1a:	mov	r8, r1
  if (!isOpen()) {
    4b1c:	cmp	r3, #0
    4b1e:	beq.n	4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b20:	subs	r2, #1
  char* str = name;
    4b22:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b24:	mov.w	r9, #2
  uint16_t hs = 0;
    4b28:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b2a:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b2c:	ldrb.w	r3, [sl, #48]	; 0x30
    4b30:	cmp	r3, r9
    4b32:	bcc.n	4b9c <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    4b34:	movs	r2, #0
    4b36:	mov	r1, r9
    4b38:	mov	r0, sl
    4b3a:	bl	4c22 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    4b3e:	cbz	r0, 4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b40:	ldrb	r3, [r0, #0]
    4b42:	cmp	r3, #193	; 0xc1
    4b44:	bne.n	4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b46:	mov	r6, r0
    4b48:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    4b4c:	ldr	r3, [pc, #108]	; (4bbc <ExFatFile::getName8(char*, unsigned int)+0xac>)
    4b4e:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    4b52:	cbz	r5, 4b8c <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    4b54:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    4b58:	uxth	r2, r2
    4b5a:	cmp.w	r2, #1024	; 0x400
    4b5e:	bcs.n	4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    4b60:	and.w	r5, r3, r5, lsl #10
    4b64:	ubfx	r0, r0, #0, #10
    4b68:	orrs	r0, r5
    4b6a:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b6e:	mov	r1, r4
    4b70:	mov	r2, r7
    4b72:	bl	4822 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    4b76:	mov	r4, r0
    4b78:	cbz	r0, 4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b7a:	movs	r5, #0
    4b7c:	ldr	r3, [pc, #60]	; (4bbc <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    4b7e:	cmp	fp, r6
    4b80:	bne.n	4b4e <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b82:	add.w	r9, r9, #1
    4b86:	uxtb.w	r9, r9
    4b8a:	b.n	4b2c <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    4b8c:	add.w	r2, r0, #10240	; 0x2800
    4b90:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    4b92:	cmp.w	r2, #2048	; 0x800
    4b96:	bcc.n	4ba8 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    4b98:	cmp	r0, #0
    4b9a:	bne.n	4b6e <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    4b9c:	movs	r3, #0
  return str - name;
    4b9e:	sub.w	r0, r4, r8
  *str = '\0';
    4ba2:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    4ba4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    4ba8:	cmp.w	r2, #1024	; 0x400
    4bac:	bcs.n	4bb2 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4bae:	mov	r5, r0
    4bb0:	b.n	4b7e <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    4bb2:	movs	r0, #0
    4bb4:	strb.w	r0, [r8]
  return 0;
    4bb8:	b.n	4ba4 <ExFatFile::getName8(char*, unsigned int)+0x94>
    4bba:	nop
    4bbc:	.word	0x000ffc00

00004bc0 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    4bc0:	movs	r0, #0
    next = begin;
    4bc2:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    4bc4:	push	{r4, r5, r6, lr}
    4bc6:	mov	r4, r1
  uint16_t hash = 0;
    4bc8:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    4bca:	movw	r5, #65535	; 0xffff
    4bce:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    4bd0:	strh	r0, [r1, #12]
    return !ls && next == end;
    4bd2:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    4bd4:	str	r0, [r4, #16]
    4bd6:	cbnz	r3, 4c14 <ExFatFile::hashName(ExName_t*)+0x54>
    4bd8:	ldrd	r2, r3, [r4, #4]
    4bdc:	cmp	r2, r3
    4bde:	bne.n	4c14 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    4be0:	subs	r0, #1
  fname->nameHash = hash;
    4be2:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    4be4:	cmp	r0, #254	; 0xfe
    4be6:	ite	hi
    4be8:	movhi	r0, #0
    4bea:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    4bec:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    4bee:	bl	49d8 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4bf2:	lsls	r3, r6, #15
    4bf4:	orr.w	r3, r3, r6, lsr #1
    4bf8:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4bfc:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4bfe:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4c00:	ubfx	r3, r3, #1, #15
    4c04:	orr.w	r3, r3, r2, lsl #15
    4c08:	uxtah	r3, r0, r3
    fname->nameLength++;
    4c0c:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4c0e:	uxth	r6, r3
    fname->nameLength++;
    4c10:	adds	r0, #1
    4c12:	b.n	4bd2 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    4c14:	mov	r0, r4
    4c16:	bl	4a80 <FsName::get16()>
    if (u == 0XFFFF) {
    4c1a:	cmp	r0, r5
    4c1c:	bne.n	4bee <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    4c1e:	movs	r0, #0
    4c20:	b.n	4bec <ExFatFile::hashName(ExName_t*)+0x2c>

00004c22 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c22:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    4c24:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c28:	sub	sp, #20
    4c2a:	mov	r4, r0
    4c2c:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    4c2e:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c30:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    4c32:	ldmia.w	r3, {r0, r1, r2}
    4c36:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    4c3a:	lsls	r2, r7, #5
    4c3c:	mov	r1, r5
    4c3e:	ldr	r0, [r4, #32]
    4c40:	bl	55d6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4c44:	cmp	r0, #1
    4c46:	bne.n	4c56 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    4c48:	mov	r2, r6
    4c4a:	mov	r1, r5
    4c4c:	ldr	r0, [r4, #32]
    4c4e:	bl	553c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    4c52:	add	sp, #20
    4c54:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    4c56:	movs	r0, #0
    4c58:	b.n	4c52 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00004c5a <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    4c5a:	push	{r4, lr}
    4c5c:	mov	r4, r0
  bool rtn = sync();
    4c5e:	bl	5af8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4c62:	movs	r3, #0
    4c64:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4c68:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    4c6c:	pop	{r4, pc}

00004c6e <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4c6e:	push	{r3, r4, r5, lr}
    4c70:	mov	r5, r1
  if (isOpen()) {
    4c72:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4c76:	mov	r4, r0
  if (isOpen()) {
    4c78:	cbnz	r1, 4c90 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4c7a:	movs	r2, #56	; 0x38
    4c7c:	bl	9444 <memset>
  m_attributes = FILE_ATTR_ROOT;
    4c80:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4c82:	movs	r0, #1
  m_vol = vol;
    4c84:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    4c86:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    4c8a:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    4c8e:	pop	{r3, r4, r5, pc}
  return false;
    4c90:	movs	r0, #0
    4c92:	b.n	4c8e <ExFatFile::openRoot(ExFatVolume*)+0x20>

00004c94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    4c94:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    4c96:	mov	r5, r1
    4c98:	ldrb.w	r4, [r1], #1
    4c9c:	cmp	r4, #32
    4c9e:	beq.n	4c96 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    4ca0:	ldr	r7, [pc, #108]	; (4d10 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    4ca2:	str	r5, [r2, #0]
  fname->end = path;
    4ca4:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    4ca6:	mov	r6, r5
    4ca8:	ldrb.w	r4, [r6], #1
    4cac:	cbz	r4, 4cb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    4cae:	cmp	r4, #47	; 0x2f
    4cb0:	bne.n	4cca <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    4cb2:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    4cb4:	ldrb.w	r1, [r5], #1
    4cb8:	cmp	r1, #32
    4cba:	beq.n	4cb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    4cbc:	cmp	r1, #47	; 0x2f
    4cbe:	beq.n	4cb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    4cc0:	str	r4, [r3, #0]
  return hashName(fname);
    4cc2:	mov	r1, r2

 fail:
  return false;
}
    4cc4:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    4cc6:	b.w	4bc0 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    4cca:	cmp	r4, #60	; 0x3c
    4ccc:	bhi.n	4cf4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    4cce:	cmp	r4, #33	; 0x21
    4cd0:	bhi.n	4ce0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    4cd2:	subs	r1, r4, #1
    4cd4:	cmp	r1, #30
    4cd6:	bls.n	4cee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    4cd8:	cmp	r4, #32
    4cda:	bne.n	4d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    4cdc:	mov	r5, r6
    4cde:	b.n	4ca6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    4ce0:	sub.w	r1, r4, #34	; 0x22
    4ce4:	uxtb	r1, r1
    4ce6:	lsr.w	r1, r7, r1
    4cea:	lsls	r1, r1, #31
    4cec:	bpl.n	4d0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    4cee:	movs	r0, #0
    4cf0:	pop	{r4, r5, r6, r7}
    4cf2:	bx	lr
    4cf4:	cmp	r4, #92	; 0x5c
    4cf6:	beq.n	4cee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    4cf8:	bhi.n	4d04 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    4cfa:	subs	r4, #62	; 0x3e
    4cfc:	cmp	r4, #1
    4cfe:	bls.n	4cee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    4d00:	str	r6, [r2, #8]
    4d02:	b.n	4cdc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    4d04:	cmp	r4, #124	; 0x7c
    4d06:	beq.n	4cee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    4d08:	b.n	4d00 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    4d0a:	cmp	r4, #46	; 0x2e
    4d0c:	b.n	4cda <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    4d0e:	nop
    4d10:	.word	0x05002101

00004d14 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4d14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d18:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    4d1c:	ldrb.w	r3, [r0, #51]	; 0x33
    4d20:	sub	sp, #12
    4d22:	mov	r4, r0
    4d24:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4d26:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    4d28:	mov	r6, r2
  if (!isReadable()) {
    4d2a:	bpl.n	4df4 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4d2c:	lsls	r0, r3, #25
    4d2e:	bmi.n	4d38 <ExFatFile::read(void*, unsigned int)+0x24>
    4d30:	ldrb.w	r3, [r4, #49]	; 0x31
    4d34:	lsls	r1, r3, #28
    4d36:	bpl.n	4d50 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    4d38:	ldrd	r2, r3, [r4]
    4d3c:	ldrd	r1, r0, [r4, #16]
    4d40:	adds	r5, r6, r2
    4d42:	adc.w	r3, r3, #0
    4d46:	cmp	r1, r5
    4d48:	sbcs.w	r3, r0, r3
    4d4c:	bcs.n	4d50 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    4d4e:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4d50:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4d54:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4d56:	vmov	s16, r3
    4d5a:	b.n	4e40 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4d5c:	ldr	r0, [r4, #32]
    4d5e:	ldrd	r3, r2, [r4]
    4d62:	ldr.w	r7, [r0, #1080]	; 0x438
    4d66:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4d68:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    4d6c:	cbnz	r7, 4d82 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    4d6e:	orrs	r3, r2
    4d70:	bne.n	4dcc <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4d72:	ldrb.w	r3, [r4, #49]	; 0x31
    4d76:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    4d78:	ite	mi
    4d7a:	ldrmi.w	r3, [r0, #1076]	; 0x434
    4d7e:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    4d80:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d82:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4d86:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d88:	ldr	r2, [r4, #24]
    4d8a:	ldrb.w	r1, [fp, #1093]	; 0x445
    4d8e:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d90:	ldr.w	r2, [fp, #1068]	; 0x42c
    4d94:	lsls	r5, r1
    4d96:	add.w	r5, r5, r7, lsr #9
    4d9a:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    4d9c:	cmp.w	sl, #0
    4da0:	bne.n	4e06 <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    4da2:	cmp.w	r8, #512	; 0x200
    4da6:	bcc.n	4e06 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    4da8:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    4dac:	cmp	r5, r2
    4dae:	beq.n	4e06 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4db0:	cmp.w	r8, #1024	; 0x400
    4db4:	bcs.n	4e54 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    4db6:	ldr.w	r0, [fp, #532]	; 0x214
    4dba:	mov	r2, r9
    4dbc:	mov	r1, r5
    4dbe:	ldr	r3, [r0, #0]
    4dc0:	ldr	r3, [r3, #16]
    4dc2:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    4dc4:	cbz	r0, 4df4 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    4dc6:	mov.w	r7, #512	; 0x200
    4dca:	b.n	4e2c <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    4dcc:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    4dd0:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    4dd2:	lsls	r3, r3, #25
    4dd4:	bpl.n	4ddc <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    4dd6:	adds	r1, #1
    4dd8:	str	r1, [r4, #24]
    4dda:	b.n	4d82 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4ddc:	vmov	r2, s16
    4de0:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    4de4:	cmp	r0, #0
    4de6:	blt.n	4df4 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    4de8:	bne.n	4d82 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    4dea:	ldrb.w	r3, [r4, #49]	; 0x31
    4dee:	tst.w	r3, #80	; 0x50
    4df2:	bne.n	4e46 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    4df4:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    4df8:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    4dfc:	orr.w	r3, r3, #2
    4e00:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    4e04:	b.n	4e4a <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    4e06:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    4e0a:	movs	r2, #0
    4e0c:	mov	r1, r5
    4e0e:	add.w	r0, fp, #528	; 0x210
    4e12:	cmp	r7, r8
    4e14:	it	cs
    4e16:	movcs	r7, r8
    4e18:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4e1c:	cmp	r0, #0
    4e1e:	beq.n	4df4 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    4e20:	add.w	r1, r0, sl
    4e24:	mov	r2, r7
    4e26:	mov	r0, r9
    4e28:	bl	9488 <memcpy>
    dst += n;
    4e2c:	add	r9, r7
    toRead -= n;
    4e2e:	sub.w	r8, r8, r7
    m_curPosition += n;
    4e32:	ldrd	r3, r2, [r4]
    4e36:	adds	r3, r3, r7
    4e38:	adc.w	r2, r2, #0
    4e3c:	strd	r3, r2, [r4]
  while (toRead) {
    4e40:	cmp.w	r8, #0
    4e44:	bne.n	4d5c <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    4e46:	sub.w	r0, r6, r8
}
    4e4a:	add	sp, #12
    4e4c:	vpop	{d8}
    4e50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    4e54:	movs	r3, #1
    4e56:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    4e58:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4e5c:	subs	r3, r3, r0
    4e5e:	cmp	r3, r1
    4e60:	it	cs
    4e62:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    4e64:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    4e66:	mov.w	r7, r3, lsl #9
    4e6a:	bls.n	4e82 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    4e6c:	ldr.w	r0, [fp, #532]	; 0x214
    4e70:	mov	r1, r5
    4e72:	ldr	r2, [r0, #0]
    4e74:	ldr.w	fp, [r2, #20]
    4e78:	mov	r2, r9
    4e7a:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    4e7c:	cmp	r0, #0
    4e7e:	bne.n	4e2c <ExFatFile::read(void*, unsigned int)+0x118>
    4e80:	b.n	4df4 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    4e82:	adds	r1, r5, r3
    4e84:	cmp	r2, r1
    4e86:	bcs.n	4e6c <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    4e88:	add.w	r0, fp, #528	; 0x210
    4e8c:	str	r3, [sp, #4]
    4e8e:	bl	493c <FsCache::sync()>
    4e92:	ldr	r3, [sp, #4]
    4e94:	cmp	r0, #0
    4e96:	bne.n	4e6c <ExFatFile::read(void*, unsigned int)+0x158>
    4e98:	b.n	4df4 <ExFatFile::read(void*, unsigned int)+0xe0>

00004e9a <ExFatFile::peek()>:
int ExFatFile::peek() {
    4e9a:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4e9c:	movs	r2, #1
    4e9e:	add.w	r1, sp, #7
    4ea2:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    4ea4:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    4ea6:	ldrd	r6, r7, [r0]
    4eaa:	bl	4d14 <ExFatFile::read(void*, unsigned int)>
    4eae:	cmp	r0, #1
  m_curCluster = curCluster;
    4eb0:	str	r5, [r4, #24]
    4eb2:	ite	eq
    4eb4:	ldrbeq.w	r0, [sp, #7]
    4eb8:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    4ebc:	strd	r6, r7, [r4]
}
    4ec0:	add	sp, #12
    4ec2:	pop	{r4, r5, r6, r7, pc}

00004ec4 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4ec4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    4ec8:	ldrb.w	ip, [r0, #49]	; 0x31
    4ecc:	mov	r4, r0
    4ece:	mov	r6, r2
    4ed0:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4ed2:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    4ed6:	cmp.w	ip, #0
    4eda:	beq.n	4f94 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4edc:	ldrd	r0, r3, [r0]
    4ee0:	cmp	r3, r7
    4ee2:	it	eq
    4ee4:	cmpeq	r0, r2
    4ee6:	beq.n	4ef6 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    4ee8:	orrs.w	r2, r6, r7
    4eec:	bne.n	4efa <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    4eee:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    4ef0:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    4ef2:	strd	r6, r7, [r4]
    return true;
    4ef6:	movs	r0, #1
    4ef8:	b.n	4f9a <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    4efa:	tst.w	ip, #8
    4efe:	beq.n	4f0a <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    4f00:	ldrd	r1, r2, [r4, #16]
    4f04:	cmp	r1, r6
    4f06:	sbcs	r2, r7
    4f08:	bcc.n	4f94 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4f0a:	ldr.w	lr, [r4, #32]
    4f0e:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4f10:	ldrb.w	r1, [lr, #1093]	; 0x445
    4f14:	adc.w	sl, r7, #4294967295
    4f18:	adds	r1, #9
    4f1a:	uxtb	r1, r1
    4f1c:	rsb	r9, r1, #32
    4f20:	sub.w	r2, r1, #32
    4f24:	lsrs	r5, r1
    4f26:	lsl.w	r9, sl, r9
    4f2a:	lsr.w	r2, sl, r2
    4f2e:	sub.w	sl, r1, #32
    4f32:	orr.w	r5, r5, r9
    4f36:	rsb	r9, r1, #32
    4f3a:	orrs	r5, r2
  if (isContiguous()) {
    4f3c:	ldrb.w	r2, [r4, #51]	; 0x33
    4f40:	tst.w	r2, #64	; 0x40
    4f44:	beq.n	4f4c <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    4f46:	ldr	r3, [r4, #28]
    4f48:	add	r3, r5
    4f4a:	b.n	4ef0 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4f4c:	adds.w	fp, r0, #4294967295
    4f50:	adc.w	r2, r3, #4294967295
    4f54:	lsr.w	r1, fp, r1
    4f58:	lsl.w	r9, r2, r9
    4f5c:	lsr.w	r2, r2, sl
    4f60:	orr.w	r1, r1, r9
    4f64:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    4f66:	cmp	r5, r1
    4f68:	bcc.n	4f6e <ExFatFile::seekSet(unsigned long long)+0xaa>
    4f6a:	orrs	r3, r0
    4f6c:	bne.n	4f9e <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4f6e:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    4f72:	ite	ne
    4f74:	ldrne.w	r3, [lr, #1076]	; 0x434
    4f78:	ldreq	r3, [r4, #28]
    4f7a:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4f7c:	add.w	r9, r4, #24
  while (nNew--) {
    4f80:	cmp	r5, #0
    4f82:	beq.n	4ef2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4f84:	mov	r2, r9
    4f86:	ldr	r1, [r4, #24]
    4f88:	ldr	r0, [r4, #32]
    4f8a:	subs	r5, #1
    4f8c:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4f90:	cmp	r0, #0
    4f92:	bgt.n	4f80 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    4f94:	movs	r0, #0
  m_curCluster = tmp;
    4f96:	str.w	r8, [r4, #24]
}
    4f9a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    4f9e:	subs	r5, r5, r1
    4fa0:	b.n	4f7c <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00004fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    4fa4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fa8:	mov	sl, r3
    4faa:	ldrb.w	r3, [r0, #49]	; 0x31
    4fae:	sub	sp, #52	; 0x34
    4fb0:	mov	r4, r0
    4fb2:	mov	r6, r1
    4fb4:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    4fb6:	cmp	r3, #0
    4fb8:	bne.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    4fba:	ldrb.w	r3, [r1, #49]	; 0x31
    4fbe:	tst.w	r3, #80	; 0x50
    4fc2:	beq.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    4fc4:	and.w	r9, sl, #3
    4fc8:	cmp.w	r9, #3
    4fcc:	beq.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4fce:	add.w	r9, r9, #1
    4fd2:	and.w	r3, sl, #8
    4fd6:	orr.w	r9, r9, r3
  if (fname) {
    4fda:	cmp	r2, #0
    4fdc:	beq.n	5050 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    4fde:	ldr	r7, [r2, #16]
    4fe0:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4fe2:	movs	r2, #0
    4fe4:	mov	r0, r1
    4fe6:	adds	r7, #14
    4fe8:	udiv	r7, r7, r3
    4fec:	adds	r7, #2
    4fee:	movs	r3, #0
    4ff0:	uxtb	r7, r7
    4ff2:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    4ff6:	mov.w	fp, #0
    4ffa:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    4ffc:	movs	r2, #32
    4ffe:	add	r1, sp, #16
    5000:	mov	r0, r6
    5002:	bl	4d14 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5006:	cmp	r0, #0
    5008:	beq.w	5192 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    500c:	cmp	r0, #32
    500e:	bne.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5010:	ldrsb.w	r1, [sp, #16]
    5014:	ldrb.w	r2, [sp, #16]
    5018:	cmp	r1, #0
    501a:	blt.n	505a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    501c:	cmp.w	fp, #0
    5020:	bne.n	502e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5022:	ldr	r1, [r6, #0]
    5024:	sub.w	r3, r1, #32
    5028:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    502a:	ldr	r3, [r6, #24]
    502c:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    502e:	cmp	fp, r7
        freeCount++;
    5030:	itt	cc
    5032:	addcc.w	r3, fp, #1
    5036:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    503a:	cbnz	r2, 5054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    503c:	cmp	r5, #0
    503e:	bne.w	5192 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5042:	mov.w	r8, #0
    5046:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    504a:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    504e:	b.n	5126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5050:	movs	r7, #3
    5052:	b.n	4ff6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5054:	movs	r0, #0
    5056:	mov	r8, r0
    5058:	b.n	4ffc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    505a:	cmp.w	r8, #0
    505e:	bne.n	50b0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5060:	cmp	fp, r7
    5062:	it	cc
    5064:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5068:	cmp	r2, #133	; 0x85
    506a:	bne.n	5054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    506c:	movs	r2, #56	; 0x38
    506e:	mov	r1, r8
    5070:	mov	r0, r4
    5072:	bl	9444 <memset>
      m_setCount = dirFile->setCount;
    5076:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    507a:	ldrb.w	r1, [sp, #20]
      inSet = true;
    507e:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5080:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5084:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5088:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    508a:	it	pl
    508c:	orrpl.w	r2, r2, #8
    5090:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5094:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5096:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5098:	ldr	r2, [r6, #24]
    509a:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    509c:	ldr	r2, [r6, #0]
    509e:	subs	r2, #32
    50a0:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    50a2:	ldrb.w	r2, [r6, #51]	; 0x33
    50a6:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    50aa:	strb.w	r2, [r4, #44]	; 0x2c
    50ae:	b.n	5056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    50b0:	cmp	r2, #192	; 0xc0
    50b2:	bne.n	5156 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    50b4:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    50b8:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    50bc:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    50be:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    50c2:	it	mi
    50c4:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    50c8:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    50cc:	it	mi
    50ce:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    50d2:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    50d4:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    50d8:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    50da:	strd	r0, r1, [r4, #8]
      if (!fname) {
    50de:	cbnz	r5, 512e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    50e0:	tst.w	sl, #2048	; 0x800
    50e4:	bne.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    50e6:	tst.w	sl, #17408	; 0x4400
    50ea:	bne.n	50f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    50ec:	ldrb.w	r3, [r4, #51]	; 0x33
    50f0:	lsls	r0, r3, #30
    50f2:	bpl.n	5100 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    50f4:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    50f8:	lsls	r1, r3, #27
    50fa:	bmi.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    50fc:	lsls	r2, r3, #31
    50fe:	bmi.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5100:	tst.w	sl, #1024	; 0x400
    5104:	beq.n	5180 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5106:	ldrb.w	r3, [r4, #51]	; 0x33
    510a:	lsls	r3, r3, #30
    510c:	bpl.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    510e:	movs	r2, #0
    5110:	movs	r3, #0
    5112:	mov	r0, r4
    5114:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
    5118:	cmp	r0, #0
    511a:	beq.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    511c:	mov	r0, r4
    511e:	bl	5d84 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5122:	cmp	r0, #0
    5124:	beq.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5126:	mov	r0, r8
    5128:	add	sp, #52	; 0x34
    512a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    512e:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5130:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5134:	ldr	r1, [r5, #16]
    next = begin;
    5136:	str	r2, [r5, #4]
    5138:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    513c:	strh	r3, [r5, #12]
    513e:	cmp	r1, r2
    5140:	bne.n	5054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5142:	ldrh	r0, [r5, #20]
    5144:	ldrh.w	r2, [sp, #20]
    5148:	sub.w	ip, r0, r2
    514c:	rsbs	r0, ip, #0
    5150:	adc.w	r0, r0, ip
    5154:	b.n	5056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5156:	cmp	r2, #193	; 0xc1
    5158:	bne.w	5054 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    515c:	mov	r2, r5
    515e:	add	r1, sp, #16
    5160:	mov	r0, r4
    5162:	bl	4ac8 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5166:	cmp	r0, #0
    5168:	beq.w	5056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    516c:	ldrh	r2, [r5, #12]
    516e:	cmp	r2, #0
    5170:	bne.w	5056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5174:	ldrd	r1, r2, [r5, #4]
    5178:	cmp	r1, r2
    517a:	bne.w	5056 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    517e:	b.n	50e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5180:	tst.w	sl, #16384	; 0x4000
    5184:	beq.n	5126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5186:	mov	r0, r4
    5188:	ldrd	r2, r3, [r4, #16]
    518c:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
    5190:	b.n	5122 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5192:	tst.w	sl, #512	; 0x200
    5196:	beq.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    519a:	tst.w	r9, #2
    519e:	beq.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    51a2:	cmp	r5, #0
    51a4:	beq.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    51a8:	cmp	fp, r7
    51aa:	bcc.n	51fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    51ac:	movs	r2, #56	; 0x38
    51ae:	movs	r1, #0
    51b0:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    51b2:	ldrb.w	r8, [r6, #51]	; 0x33
    51b6:	bl	9444 <memset>
  ExFatVolume* volume() const {return m_vol;}
    51ba:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    51bc:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    51c0:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    51c4:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    51c6:	movs	r3, #8
  m_dirPos = freePos;
    51c8:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    51cc:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    51d0:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    51d4:	mov.w	r8, #0
  m_dirPos = freePos;
    51d8:	ldr	r3, [sp, #0]
    51da:	str	r3, [r4, #36]	; 0x24
    51dc:	ldr	r3, [sp, #4]
    51de:	str	r3, [r4, #40]	; 0x28
    next = begin;
    51e0:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    51e2:	strh.w	r8, [r5, #12]
    next = begin;
    51e6:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    51e8:	uxtb.w	fp, r8
    51ec:	cmp	r7, fp
    51ee:	bhi.n	523e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    51f0:	mov	r0, r4
    51f2:	bl	5af8 <ExFatFile::sync()>
    51f6:	mov	r8, r0
    51f8:	b.n	5126 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    51fa:	movs	r2, #32
    51fc:	add	r1, sp, #16
    51fe:	mov	r0, r6
    5200:	bl	4d14 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5204:	cbnz	r0, 521c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5206:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5208:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    520c:	bl	5b3a <ExFatFile::addDirCluster()>
    5210:	cmp	r0, #0
    5212:	beq.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5216:	str.w	r8, [r6, #24]
      continue;
    521a:	b.n	51a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    521c:	cmp	r0, #32
    521e:	bne.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5222:	cmp.w	fp, #0
    5226:	bne.n	5234 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5228:	ldr	r2, [r6, #0]
    522a:	sub.w	r3, r2, #32
    522e:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5230:	ldr	r3, [r6, #24]
    5232:	str	r3, [sp, #0]
    freeCount++;
    5234:	add.w	r3, fp, #1
    5238:	uxtb.w	fp, r3
    523c:	b.n	51a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    523e:	movs	r2, #1
    5240:	mov	r1, fp
    5242:	mov	r0, r4
    5244:	bl	4c22 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5248:	mov	r6, r0
    524a:	cmp	r0, #0
    524c:	beq.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5250:	ldrsb.w	r2, [r0]
    5254:	cmp	r2, #0
    5256:	blt.w	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    525a:	movs	r2, #32
    525c:	movs	r1, #0
    525e:	bl	9444 <memset>
    if (i == 0) {
    5262:	cmp.w	fp, #0
    5266:	bne.n	52aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5268:	movs	r3, #133	; 0x85
    526a:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    526c:	ldr	r3, [pc, #128]	; (52f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    526e:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5272:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5276:	ldr	r3, [r3, #0]
    5278:	cbz	r3, 529e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    527a:	add.w	r2, sp, #11
    527e:	add.w	r1, sp, #14
    5282:	add	r0, sp, #12
    5284:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5286:	ldrh.w	r3, [sp, #12]
    528a:	strh	r3, [r6, #10]
    528c:	ldrh.w	r3, [sp, #14]
    5290:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5292:	ldrb.w	r3, [sp, #11]
    5296:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5298:	add.w	r8, r8, #1
    529c:	b.n	51e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    529e:	movw	r3, #22561	; 0x5821
    52a2:	strh	r3, [r6, #10]
    52a4:	strh	r3, [r6, #14]
    52a6:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    52a8:	b.n	5298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    52aa:	cmp.w	fp, #1
    52ae:	bne.n	52ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    52b0:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    52b4:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    52b6:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    52ba:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    52bc:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    52c0:	ldr	r3, [r5, #16]
    52c2:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    52c4:	ldrh	r3, [r5, #20]
    52c6:	strh	r3, [r6, #4]
}
    52c8:	b.n	5298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    52ca:	movs	r3, #193	; 0xc1
    52cc:	add.w	fp, r6, #30
    52d0:	strb	r3, [r6, #0]
    return !ls && next == end;
    52d2:	ldrh	r2, [r5, #12]
    52d4:	cbnz	r2, 52de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    52d6:	ldrd	r1, r2, [r5, #4]
    52da:	cmp	r1, r2
    52dc:	beq.n	5298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    52de:	mov	r0, r5
    52e0:	bl	4a80 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    52e4:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    52e8:	cmp	fp, r6
    52ea:	bne.n	52d2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    52ec:	b.n	5298 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    52ee:	nop
    52f0:	.word	0x20026dfc

000052f4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    52f4:	push	{r4, r5, r6, r7, lr}
    52f6:	mov	r7, r3
    52f8:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    52fa:	movs	r3, #0
    52fc:	mov	r5, r0
    52fe:	mov	r4, r1
    5300:	str	r2, [sp, #4]
    5302:	str	r3, [sp, #80]	; 0x50
class FsName {
    5304:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5308:	ldrb.w	r3, [r0, #49]	; 0x31
    530c:	cbz	r3, 5314 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    530e:	movs	r0, #0
}
    5310:	add	sp, #92	; 0x5c
    5312:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    5314:	ldrb.w	r1, [r1, #49]	; 0x31
    5318:	tst.w	r1, #80	; 0x50
    531c:	beq.n	530e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    531e:	ldrb	r1, [r2, #0]
    5320:	cmp	r1, #47	; 0x2f
    5322:	bne.n	535e <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    5324:	mov	r0, r2
    while (isDirSeparator(*path)) {
    5326:	ldrb.w	r1, [r2], #1
    532a:	cmp	r1, #47	; 0x2f
    532c:	beq.n	5340 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    532e:	cbz	r3, 5332 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5330:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5332:	ldr	r4, [r4, #32]
    if (*path == 0) {
    5334:	cbnz	r1, 5344 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    5336:	mov	r1, r4
    5338:	mov	r0, r5
    533a:	bl	4c6e <ExFatFile::openRoot(ExFatVolume*)>
    533e:	b.n	5310 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5340:	movs	r3, #1
    5342:	b.n	5324 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    5344:	movs	r2, #56	; 0x38
    5346:	movs	r1, #0
    5348:	add	r0, sp, #32
    534a:	bl	9444 <memset>
  m_attributes = FILE_ATTR_ROOT;
    534e:	movs	r3, #64	; 0x40
  m_vol = vol;
    5350:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    5352:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    5354:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5358:	movs	r3, #1
    535a:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    535e:	add	r3, sp, #4
    5360:	add	r2, sp, #8
    5362:	ldr	r1, [sp, #4]
    5364:	mov	r0, r5
    5366:	bl	4c94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    536a:	cmp	r0, #0
    536c:	beq.n	530e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    536e:	ldr	r3, [sp, #4]
    5370:	ldrb	r3, [r3, #0]
    5372:	cbz	r3, 53ac <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5374:	movs	r3, #0
    5376:	add	r2, sp, #8
    5378:	mov	r1, r4
    537a:	mov	r0, r5
    537c:	bl	4fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5380:	cmp	r0, #0
    5382:	beq.n	530e <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    5384:	add	r6, sp, #32
    5386:	mov	r2, r5
    5388:	add.w	ip, r5, #48	; 0x30
    538c:	mov	r4, r6
    538e:	ldr	r0, [r2, #0]
    5390:	adds	r2, #8
    5392:	ldr.w	r1, [r2, #-4]
    5396:	mov	r3, r6
    5398:	cmp	r2, ip
    539a:	stmia	r3!, {r0, r1}
    539c:	mov	r6, r3
    539e:	bne.n	538e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    53a0:	ldr	r0, [r2, #0]
    53a2:	str	r0, [r3, #0]
    close();
    53a4:	mov	r0, r5
    53a6:	bl	4c5a <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    53aa:	b.n	535e <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    53ac:	mov	r3, r7
    53ae:	add	r2, sp, #8
    53b0:	mov	r1, r4
    53b2:	mov	r0, r5
    53b4:	bl	4fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    53b8:	b.n	5310 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

000053ba <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    53ba:	cbz	r1, 53c4 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    53bc:	add.w	r1, r1, #1096	; 0x448
    53c0:	b.w	52f4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    53c4:	mov	r0, r1
    53c6:	bx	lr

000053c8 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    53c8:	mov	r3, r2
    53ca:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    53cc:	ldrb.w	r2, [r0, #49]	; 0x31
    53d0:	cbnz	r2, 53ec <ExFatFile::openNext(ExFatFile*, int)+0x24>
    53d2:	ldrb.w	r2, [r1, #49]	; 0x31
    53d6:	tst.w	r2, #80	; 0x50
    53da:	beq.n	53ec <ExFatFile::openNext(ExFatFile*, int)+0x24>
    53dc:	ldr	r2, [r1, #0]
    53de:	ands.w	r2, r2, #31
    53e2:	bne.n	53ec <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    53e4:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    53e8:	b.w	4fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    53ec:	movs	r0, #0
    53ee:	ldr.w	r4, [sp], #4
    53f2:	bx	lr

000053f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    53f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53f8:	mov	r7, r0
    53fa:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    53fc:	mov	sl, r1
    53fe:	cbz	r1, 5434 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    5400:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    5402:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    5406:	movs	r4, #1
    start = 0;
    5408:	cmp	r3, r5
    540a:	it	ls
    540c:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    540e:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    5412:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    5416:	mov	r8, r5
  uint32_t endAlloc = start;
    5418:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    541a:	lsls	r4, r3
    541c:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    541e:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    5422:	movs	r2, #0
    5424:	mov	r0, r7
    5426:	add.w	r1, r1, r6, lsr #12
    542a:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    542e:	cbnz	r0, 5462 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5430:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5434:	ldr.w	r5, [r0, #1056]	; 0x420
    5438:	b.n	5402 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    543a:	mov	r8, r6
        if (endAlloc == start) {
    543c:	cmp	r5, r6
    543e:	beq.n	5498 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5440:	ldr.w	r2, [r7, #1072]	; 0x430
    5444:	cmp	r2, r6
    5446:	bls.n	548c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5448:	lsls	r4, r4, #1
    544a:	ands.w	r4, r4, #255	; 0xff
    544e:	bne.n	5466 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5450:	add.w	r3, r9, #1
    5454:	movs	r4, #1
    i = 0;
    5456:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    545a:	cmp.w	r3, #512	; 0x200
    545e:	bcs.n	541e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5460:	mov	r9, r3
        if (!(mask & cache[i])) {
    5462:	ldrb.w	r3, [r0, r9]
    5466:	tst	r3, r4
        endAlloc++;
    5468:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    546c:	bne.n	543a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    546e:	sub.w	r2, r6, r8
    5472:	cmp	r2, fp
    5474:	bne.n	543c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    5476:	cmp.w	sl, #0
    547a:	bne.n	5486 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    547c:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5480:	it	eq
    5482:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    5486:	add.w	r0, r8, #2
    548a:	b.n	5430 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    548c:	mov.w	r8, #0
          i = sectorSize;
    5490:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    5494:	mov	r6, r8
    5496:	b.n	5450 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5498:	movs	r0, #1
    549a:	b.n	5430 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

0000549c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    549c:	subs	r1, #2
                                  uint32_t count, bool value) {
    549e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54a2:	mov	r5, r0
    54a4:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    54a6:	ldr.w	r0, [r0, #1072]	; 0x430
    54aa:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    54ac:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    54ae:	cmp	r3, r0
    54b0:	bhi.n	5532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    54b2:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    54b6:	cbz	r7, 5528 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    54b8:	cmp	r1, r2
    54ba:	bhi.n	54ca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    54bc:	cmp	r3, r2
    54be:	bls.n	54ca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    54c0:	cmp	r3, r0
    54c2:	it	cs
    54c4:	movcs	r3, #0
    54c6:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    54ca:	and.w	r3, r1, #7
    54ce:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    54d2:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    54d6:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    54da:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    54de:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    54e2:	add.w	r8, r3, r1, lsr #12
    54e6:	movs	r2, #1
    54e8:	mov	r1, r8
    54ea:	mov	r0, r5
    54ec:	add	r8, r2
    54ee:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    54f2:	cbz	r0, 5532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    54f4:	adds	r3, r0, r4
    54f6:	mov	r1, r9
    54f8:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    54fc:	ldrb	r2, [r3, #0]
    54fe:	tst	r2, r1
    5500:	ite	ne
    5502:	movne	r4, #1
    5504:	moveq	r4, #0
    5506:	cmp	r4, r7
    5508:	beq.n	5532 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    550a:	eors	r2, r1
        if (--count == 0) {
    550c:	subs	r6, #1
        cache[i] ^= mask;
    550e:	strb	r2, [r3, #0]
        if (--count == 0) {
    5510:	beq.n	5538 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    5512:	lsls	r1, r1, #1
    5514:	ands.w	r1, r1, #255	; 0xff
    5518:	bne.n	54fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    551a:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    551c:	mov	r4, r1
    551e:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    5520:	cmp	r0, r3
      mask = 1;
    5522:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    5524:	bne.n	54fc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    5526:	b.n	54e6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    5528:	cmp	r1, r2
      m_bitmapStart = start;
    552a:	it	cc
    552c:	strcc.w	r1, [r5, #1056]	; 0x420
    5530:	b.n	54ca <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    5532:	movs	r0, #0
}
    5534:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    5538:	movs	r0, #1
    553a:	b.n	5534 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

0000553c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    553c:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    553e:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5542:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5544:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    5546:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    554a:	ldrb.w	r5, [r0, #565]	; 0x235
    554e:	ands	r1, r3
    5550:	ldr	r3, [r4, #0]
    5552:	subs	r3, #2
    5554:	lsls	r3, r5
    5556:	add.w	r3, r3, r1, lsr #9
    555a:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    555e:	add	r1, r3
    5560:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5564:	cbz	r0, 556e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    5566:	ldr	r3, [r4, #4]
    5568:	ubfx	r3, r3, #0, #9
    556c:	add	r0, r3
}
    556e:	pop	{r3, r4, r5, pc}

00005570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5570:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5572:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5576:	mov	r4, r1
    5578:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    557a:	adds	r3, #1
    557c:	cmp	r3, r1
    557e:	bcs.n	5586 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    5580:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    5584:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5586:	ldr.w	r1, [r0, #1060]	; 0x424
    558a:	movs	r2, #0
    558c:	add.w	r0, r0, #528	; 0x210
    5590:	add.w	r1, r1, r4, lsr #7
    5594:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5598:	cmp	r0, #0
    559a:	beq.n	5580 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    559c:	lsls	r4, r4, #2
    559e:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    55a2:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    55a4:	adds	r2, r3, #1
  return 1;
    55a6:	itet	ne
    55a8:	movne	r0, #1
    return 0;
    55aa:	moveq	r0, #0
  *value = next;
    55ac:	strne	r3, [r5, #0]
  return 1;
    55ae:	b.n	5584 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

000055b0 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    55b0:	push	{r0, r1, r2, r4, r5, lr}
    55b2:	mov	r5, r0
  uint32_t n = 0;
    55b4:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    55b6:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    55b8:	add	r2, sp, #4
    55ba:	ldr	r1, [sp, #4]
    55bc:	mov	r0, r5
    55be:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    55c2:	cmp	r0, #0
    55c4:	blt.n	55d2 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    55c6:	add.w	r4, r4, #1
  } while (status);
    55ca:	bne.n	55b8 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    55cc:	mov	r0, r4
    55ce:	add	sp, #12
    55d0:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    55d2:	movs	r4, #0
    55d4:	b.n	55cc <ExFatPartition::chainSize(unsigned long)+0x1c>

000055d6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55d6:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55d8:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55da:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55dc:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55e0:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55e2:	ands	r4, r3
    55e4:	add	r4, r2
  pos->position += offset;
    55e6:	add	r2, r3
    55e8:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    55ea:	ldrb.w	r3, [r0, #1093]	; 0x445
    55ee:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    55f0:	uxtb	r3, r3
    55f2:	lsrs	r4, r3
  while (tmp--) {
    55f4:	cbnz	r4, 55fa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    55f6:	movs	r0, #1
    55f8:	b.n	5614 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    55fa:	ldrb	r3, [r5, #8]
      pos->cluster++;
    55fc:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    55fe:	cbz	r3, 5608 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    5600:	adds	r1, #1
    5602:	str	r1, [r5, #0]
    5604:	subs	r4, #1
    5606:	b.n	55f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    5608:	mov	r2, r5
    560a:	mov	r0, r6
    560c:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    5610:	cmp	r0, #1
    5612:	beq.n	5604 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    5614:	pop	{r4, r5, r6, pc}

00005616 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5616:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5618:	push	{r3, r4, r5, lr}
    561a:	mov	r4, r1
    561c:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    561e:	bhi.n	5624 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5620:	movs	r0, #0
}
    5622:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5624:	ldr.w	r3, [r0, #1072]	; 0x430
    5628:	adds	r3, #1
    562a:	cmp	r3, r1
    562c:	bcc.n	5620 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    562e:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    5632:	movs	r2, #1
    5634:	add.w	r0, r0, #528	; 0x210
    5638:	add.w	r1, r1, r4, lsr #7
    563c:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5640:	cmp	r0, #0
    5642:	beq.n	5620 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    5644:	lsls	r4, r4, #2
    5646:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    564a:	str	r5, [r0, r4]
  return true;
    564c:	movs	r0, #1
    564e:	b.n	5622 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00005650 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5650:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5654:	mov	r7, r0
    5656:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    5658:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    565a:	add	r2, sp, #4
    565c:	mov	r1, r4
    565e:	mov	r0, r7
    5660:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    5664:	subs	r6, r0, #0
    5666:	bge.n	5672 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    5668:	movs	r5, #0
}
    566a:	mov	r0, r5
    566c:	add	sp, #8
    566e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    5672:	movs	r2, #0
    5674:	mov	r1, r4
    5676:	mov	r0, r7
    5678:	bl	5616 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    567c:	mov	r5, r0
    567e:	cmp	r0, #0
    5680:	beq.n	5668 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    5682:	adds	r2, r4, #1
    5684:	cbz	r6, 568c <ExFatPartition::freeChain(unsigned long)+0x3c>
    5686:	ldr	r3, [sp, #4]
    5688:	cmp	r3, r2
    568a:	beq.n	56a2 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    568c:	movs	r3, #0
    568e:	sub.w	r2, r2, r8
    5692:	mov	r1, r8
    5694:	mov	r0, r7
    5696:	bl	549c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    569a:	cmp	r0, #0
    569c:	beq.n	5668 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    569e:	ldr.w	r8, [sp, #4]
    cluster = next;
    56a2:	ldr	r4, [sp, #4]
  } while (status);
    56a4:	cmp	r6, #0
    56a6:	bne.n	565a <ExFatPartition::freeChain(unsigned long)+0xa>
    56a8:	b.n	566a <ExFatPartition::freeChain(unsigned long)+0x1a>

000056aa <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    56aa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    56ae:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    56b0:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    56b2:	ldr.w	r7, [r0, #1068]	; 0x42c
    56b6:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    56ba:	mov	r5, r4
    56bc:	mov	r1, r7
    56be:	movs	r2, #0
    56c0:	mov	r0, r8
    56c2:	adds	r7, #1
    56c4:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    56c8:	cbz	r0, 56e6 <ExFatPartition::freeClusterCount()+0x3c>
    56ca:	subs	r0, #1
    56cc:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    56d0:	ldrb.w	r1, [r0, #1]!
    56d4:	cmp	r1, #255	; 0xff
    56d6:	bne.n	56ea <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    56d8:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    56da:	adds	r5, #8
      if (nc >= m_clusterCount) {
    56dc:	ldr.w	r3, [r6, #1072]	; 0x430
    56e0:	cmp	r3, r5
    56e2:	bhi.n	5704 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    56e4:	subs	r0, r3, r4
      }
    }
  }
}
    56e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    56ea:	cmp	r1, #0
    56ec:	beq.n	56da <ExFatPartition::freeClusterCount()+0x30>
    56ee:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56f0:	movs	r3, #1
          if ((mask & cache[i])) {
    56f2:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56f4:	mov.w	r3, r3, lsl #1
            usedCount++;
    56f8:	it	ne
    56fa:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56fc:	subs	r2, #1
    56fe:	uxtb	r3, r3
    5700:	bne.n	56f2 <ExFatPartition::freeClusterCount()+0x48>
    5702:	b.n	56da <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    5704:	cmp	r5, ip
    5706:	bne.n	56d0 <ExFatPartition::freeClusterCount()+0x26>
    5708:	b.n	56bc <ExFatPartition::freeClusterCount()+0x12>
	...

0000570c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    570c:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    570e:	mov.w	r3, #4294967295
    5712:	mov	r6, r2
    5714:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5718:	movs	r2, #0
  m_blockDev = dev;
    571a:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    571e:	mov	r4, r0
    m_blockDev = blockDev;
    5720:	str	r1, [r0, #4]
    5722:	str.w	r1, [r0, #532]	; 0x214
    5726:	mov	r1, r2
  m_fatType = 0;
    5728:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    572c:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    572e:	str	r3, [r0, #12]
    m_status = 0;
    5730:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5734:	str.w	r3, [r0, #540]	; 0x21c
    5738:	mov	r0, r7
    573a:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    573e:	cmp	r6, #4
    5740:	mov	r5, r0
    5742:	bls.n	5748 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    5744:	movs	r0, #0
}
    5746:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    5748:	cmp	r0, #0
    574a:	beq.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    574c:	cbz	r6, 577c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    574e:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    5750:	add.w	r3, r0, r3, lsl #4
    5754:	ldrb.w	r2, [r3, #446]	; 0x1be
    5758:	ands.w	r2, r2, #127	; 0x7f
    575c:	bne.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    575e:	ldrb.w	r3, [r3, #450]	; 0x1c2
    5762:	cmp	r3, #0
    5764:	beq.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    5766:	add.w	r6, r0, r6, lsl #4
    576a:	mov	r0, r7
    576c:	ldr.w	r6, [r6, #438]	; 0x1b6
    5770:	mov	r1, r6
    5772:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5776:	mov	r5, r0
    5778:	cmp	r0, #0
    577a:	beq.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    577c:	ldr	r1, [pc, #104]	; (57e8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    577e:	movs	r2, #5
    5780:	adds	r0, r5, #3
    5782:	bl	da64 <strncmp>
    5786:	mov	r1, r0
    5788:	cmp	r0, #0
    578a:	bne.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    578c:	ldrb.w	r3, [r5, #108]	; 0x6c
    5790:	cmp	r3, #9
    5792:	bne.n	5744 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5794:	ldr	r3, [r5, #80]	; 0x50
    5796:	add	r3, r6
    5798:	str.w	r3, [r4, #1060]	; 0x424
    579c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    579e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    57a2:	ldr	r3, [r5, #88]	; 0x58
    57a4:	add	r3, r6
    57a6:	str.w	r3, [r4, #1068]	; 0x42c
    57aa:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    57ac:	str.w	r3, [r4, #1072]	; 0x430
    57b0:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    57b2:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    57b6:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57ba:	movs	r5, #1
  m_bitmapStart = 0;
    57bc:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    57c0:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    57c2:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57c6:	adds	r3, #9
  bitmapFind(0, 1);
    57c8:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57ca:	lsl.w	r3, r5, r3
    57ce:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    57d2:	subs	r3, #1
    57d4:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    57d8:	bl	53f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    57dc:	movs	r3, #64	; 0x40
  return true;
    57de:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    57e0:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    57e4:	b.n	5746 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    57e6:	nop
    57e8:	.word	0x20007ec3

000057ec <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    57ec:	push	{r4, lr}
    57ee:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    57f0:	ldr.w	r1, [r0, #1076]	; 0x434
    57f4:	bl	55b0 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    57f8:	ldrb.w	r3, [r4, #1093]	; 0x445
    57fc:	adds	r3, #9
  return nc << bytesPerClusterShift();
    57fe:	uxtb	r3, r3
}
    5800:	lsls	r0, r3
    5802:	pop	{r4, pc}

00005804 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    5804:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    5806:	add.w	r4, r0, #1096	; 0x448
    580a:	sub	sp, #56	; 0x38
    580c:	movs	r3, #0
    580e:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    5810:	mov	r0, sp
    5812:	mov	r1, r4
    5814:	str	r3, [sp, #48]	; 0x30
    5816:	bl	52f4 <ExFatFile::open(ExFatFile*, char const*, int)>
    581a:	mov	r5, r0
    581c:	cbz	r0, 5846 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    581e:	ldrb.w	r3, [sp, #49]	; 0x31
    5822:	ands.w	r3, r3, #80	; 0x50
    5826:	beq.n	584c <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    5828:	mov	r2, sp
    582a:	mov	r3, r4
    582c:	add	r6, sp, #48	; 0x30
    582e:	mov	r4, r2
    5830:	adds	r3, #8
    5832:	ldmia	r4!, {r0, r1}
    5834:	cmp	r4, r6
    5836:	str.w	r0, [r3, #-8]
    583a:	str.w	r1, [r3, #-4]
    583e:	mov	r2, r4
    5840:	bne.n	582e <ExFatVolume::chdir(char const*)+0x2a>
    5842:	ldr	r0, [r4, #0]
    5844:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    5846:	mov	r0, r5
    5848:	add	sp, #56	; 0x38
    584a:	pop	{r4, r5, r6, pc}
  return false;
    584c:	mov	r5, r3
    584e:	b.n	5846 <ExFatVolume::chdir(char const*)+0x42>

00005850 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    5850:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5852:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5854:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5856:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5858:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    585a:	orr.w	r2, r2, r1, lsr #1
    585e:	ldrb	r1, [r0, r3]
    5860:	uxtah	r2, r1, r2
    5864:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5866:	bne.n	587a <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    5868:	cmp	r4, #133	; 0x85
    586a:	ite	ne
    586c:	movne	r2, #1
    586e:	moveq	r2, #3
    5870:	add	r3, r2
    5872:	cmp	r3, #31
    5874:	bls.n	5856 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    5876:	mov	r0, r1
    5878:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    587a:	movs	r2, #1
    587c:	b.n	5870 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

0000587e <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    587e:	push	{r4, lr}
    5880:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5882:	bl	493c <FsCache::sync()>
    5886:	cbz	r0, 58a0 <ExFatPartition::cacheSync()+0x22>
    5888:	add.w	r0, r4, #528	; 0x210
    588c:	bl	493c <FsCache::sync()>
    5890:	cbz	r0, 58a0 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    5892:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5896:	ldr	r3, [r0, #0]
  }
    5898:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    589c:	ldr	r3, [r3, #32]
    589e:	bx	r3
  }
    58a0:	movs	r0, #0
    58a2:	pop	{r4, pc}

000058a4 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    58a4:	push	{r3, r4, r5, r6, r7, lr}
    58a6:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    58a8:	ldr	r0, [r0, #32]
    58aa:	ldr	r1, [r4, #24]
    58ac:	cbz	r1, 58b0 <ExFatFile::addCluster()+0xc>
    58ae:	adds	r1, #1
    58b0:	movs	r2, #1
    58b2:	bl	53f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    58b6:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    58b8:	mov	r5, r0
  if (find < 2) {
    58ba:	bhi.n	58c2 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    58bc:	movs	r6, #0
}
    58be:	mov	r0, r6
    58c0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    58c2:	movs	r3, #1
    58c4:	mov	r1, r0
    58c6:	ldr	r0, [r4, #32]
    58c8:	mov	r2, r3
    58ca:	bl	549c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    58ce:	mov	r6, r0
    58d0:	cmp	r0, #0
    58d2:	beq.n	58bc <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    58d4:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58d6:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    58da:	cbnz	r2, 58e8 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58dc:	orr.w	r3, r3, #64	; 0x40
    58e0:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    58e4:	str	r5, [r4, #24]
  return true;
    58e6:	b.n	58be <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    58e8:	lsls	r1, r3, #25
    58ea:	bmi.n	5910 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    58ec:	mov.w	r2, #4294967295
    58f0:	mov	r1, r5
    58f2:	ldr	r0, [r4, #32]
    58f4:	bl	5616 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58f8:	cmp	r0, #0
    58fa:	beq.n	58bc <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    58fc:	ldr	r1, [r4, #24]
    58fe:	cmp	r1, #0
    5900:	beq.n	58e4 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    5902:	mov	r2, r5
    5904:	ldr	r0, [r4, #32]
    5906:	bl	5616 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    590a:	cmp	r0, #0
    590c:	bne.n	58e4 <ExFatFile::addCluster()+0x40>
    590e:	b.n	58bc <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    5910:	adds	r2, #1
    5912:	cmp	r2, r5
    5914:	beq.n	58e4 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5916:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    591a:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    591c:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5920:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    5922:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5924:	cmp	r3, r1
    5926:	bls.n	58ec <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    5928:	adds	r7, r1, #1
    592a:	mov	r2, r7
    592c:	bl	5616 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5930:	cmp	r0, #0
    5932:	beq.n	58bc <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5934:	mov	r1, r7
    5936:	b.n	5920 <ExFatFile::addCluster()+0x7c>

00005938 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    5938:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    593a:	ldrb.w	r3, [r0, #51]	; 0x33
    593e:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    5940:	lsls	r2, r3, #30
    5942:	bmi.n	5948 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    5944:	movs	r0, #0
}
    5946:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    5948:	ldr	r1, [r0, #28]
    594a:	cbnz	r1, 5982 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    594c:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    594e:	movs	r2, #1
    5950:	uxtb	r1, r5
    5952:	mov	r0, r4
    5954:	bl	4c22 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5958:	cmp	r0, #0
    595a:	beq.n	5944 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    595c:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    595e:	adds	r5, #1
    cache[0] &= 0x7F;
    5960:	and.w	r3, r3, #127	; 0x7f
    5964:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5966:	uxtb	r3, r5
    5968:	ldrb.w	r2, [r4, #48]	; 0x30
    596c:	cmp	r2, r3
    596e:	bcs.n	594e <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    5970:	movs	r3, #0
  return m_vol->cacheSync();
    5972:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    5974:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5978:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    597c:	bl	587e <ExFatPartition::cacheSync()>
    5980:	b.n	5946 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    5982:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5984:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    5986:	bpl.n	59be <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5988:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    598c:	ldrd	r2, r5, [r4, #8]
    5990:	adds	r3, #9
    5992:	subs	r2, #1
    5994:	uxtb	r3, r3
    5996:	adc.w	r5, r5, #4294967295
    599a:	rsb	r7, r3, #32
    599e:	sub.w	r6, r3, #32
    59a2:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    59a4:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    59a6:	lsl.w	r7, r5, r7
    59aa:	lsr.w	r6, r5, r6
    59ae:	orrs	r2, r7
    59b0:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    59b2:	adds	r2, #1
    59b4:	bl	549c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    59b8:	cmp	r0, #0
    59ba:	bne.n	594c <ExFatFile::remove()+0x14>
    59bc:	b.n	5944 <ExFatFile::remove()+0xc>
    59be:	bl	5650 <ExFatPartition::freeChain(unsigned long)>
    59c2:	b.n	59b8 <ExFatFile::remove()+0x80>

000059c4 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    59c4:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    59c6:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    59ca:	sub	sp, #32
    59cc:	mov	r4, r0
  if (!isSubDir()) {
    59ce:	lsls	r3, r3, #27
    59d0:	bmi.n	59d8 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    59d2:	movs	r0, #0
}
    59d4:	add	sp, #32
    59d6:	pop	{r4, pc}
    seekSet(0);
    59d8:	movs	r2, #0
    59da:	movs	r3, #0
    59dc:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    59e0:	movs	r2, #32
    59e2:	mov	r1, sp
    59e4:	mov	r0, r4
    59e6:	bl	4d14 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    59ea:	cbz	r0, 5a00 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    59ec:	cmp	r0, #32
    59ee:	bne.n	59d2 <ExFatFile::rmdir()+0xe>
    59f0:	ldrsb.w	r2, [sp]
    59f4:	ldrb.w	r3, [sp]
    59f8:	cmp	r2, #0
    59fa:	blt.n	59d2 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    59fc:	cmp	r3, #0
    59fe:	bne.n	59e0 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    5a00:	movs	r3, #8
  return remove();
    5a02:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    5a04:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    5a08:	ldrb.w	r3, [r4, #51]	; 0x33
    5a0c:	orr.w	r3, r3, #2
    5a10:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    5a14:	bl	5938 <ExFatFile::remove()>
    5a18:	b.n	59d4 <ExFatFile::rmdir()+0x10>
	...

00005a1c <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5a1c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5a20:	movs	r7, #0
    5a22:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5a24:	ldr.w	r8, [pc, #204]	; 5af4 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    5a28:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5a2a:	movs	r2, #0
    5a2c:	uxtb	r1, r7
    5a2e:	mov	r0, r4
    5a30:	bl	4c22 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5a34:	mov	r5, r0
    5a36:	cmp	r0, #0
    5a38:	beq.n	5ab6 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    5a3a:	ldrb	r3, [r0, #0]
    5a3c:	cmp	r3, #192	; 0xc0
    5a3e:	beq.n	5aca <ExFatFile::syncDir()+0xae>
    5a40:	cmp	r3, #193	; 0xc1
    5a42:	beq.n	5a88 <ExFatFile::syncDir()+0x6c>
    5a44:	cmp	r3, #133	; 0x85
    5a46:	bne.n	5ab6 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5a48:	ldrb.w	r3, [r4, #49]	; 0x31
    5a4c:	and.w	r3, r3, #55	; 0x37
    5a50:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5a52:	ldr.w	r3, [r8]
    5a56:	cbz	r3, 5a7a <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5a58:	add.w	r2, sp, #3
    5a5c:	add.w	r1, sp, #6
    5a60:	add	r0, sp, #4
    5a62:	blx	r3
          df->modifyTimeMs = ms10;
    5a64:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    5a68:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    5a6c:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    5a6e:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a72:	strh	r2, [r5, #12]
    5a74:	strh	r3, [r5, #14]
    5a76:	strh	r2, [r5, #16]
    5a78:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5a7a:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5a7c:	ldrb.w	r3, [r2, #528]	; 0x210
    5a80:	orr.w	r3, r3, #1
    5a84:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a88:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    5a8a:	mov	r1, r6
    5a8c:	mov	r0, r5
    5a8e:	bl	5850 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a92:	ldrb.w	r2, [r4, #48]	; 0x30
    5a96:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    5a98:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a9a:	cmp	r2, r3
    5a9c:	bcs.n	5a2a <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5a9e:	movs	r2, #1
    5aa0:	add.w	r1, r4, #36	; 0x24
    5aa4:	ldr	r0, [r4, #32]
    5aa6:	bl	553c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5aaa:	cbz	r0, 5ab6 <ExFatFile::syncDir()+0x9a>
    5aac:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5aae:	ldr	r0, [r4, #32]
    5ab0:	bl	587e <ExFatPartition::cacheSync()>
    5ab4:	cbnz	r0, 5ac4 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5ab6:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    5aba:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5abc:	orr.w	r3, r3, #1
    5ac0:	strb.w	r3, [r4, #50]	; 0x32
}
    5ac4:	add	sp, #8
    5ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    5aca:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5ace:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    5ad0:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5ad2:	ite	mi
    5ad4:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5ad8:	andpl.w	r3, r3, #253	; 0xfd
    5adc:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    5ade:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5ae2:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    5ae6:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5ae8:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    5aea:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    5aee:	strd	r2, r3, [r0, #24]
    5af2:	b.n	5a7a <ExFatFile::syncDir()+0x5e>
    5af4:	.word	0x20026dfc

00005af8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5af8:	push	{r4, lr}
  if (!isOpen()) {
    5afa:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    5afe:	mov	r4, r0
  if (!isOpen()) {
    5b00:	cbnz	r3, 5b06 <ExFatFile::sync()+0xe>
    return true;
    5b02:	movs	r0, #1
}
    5b04:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5b06:	ldrsb.w	r2, [r0, #51]	; 0x33
    5b0a:	ldrb.w	r3, [r0, #51]	; 0x33
    5b0e:	cmp	r2, #0
    5b10:	bge.n	5b22 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5b12:	and.w	r3, r3, #127	; 0x7f
    5b16:	strb.w	r3, [r0, #51]	; 0x33
}
    5b1a:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    5b1e:	b.w	5a1c <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    5b22:	ldr	r0, [r0, #32]
    5b24:	bl	587e <ExFatPartition::cacheSync()>
    5b28:	cmp	r0, #0
    5b2a:	bne.n	5b02 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    5b2c:	ldrb.w	r3, [r4, #50]	; 0x32
    5b30:	orr.w	r3, r3, #1
    5b34:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5b38:	b.n	5b04 <ExFatFile::sync()+0xc>

00005b3a <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5b3a:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b3c:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    5b40:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b42:	lsls	r2, r3, #25
    5b44:	bpl.n	5bc6 <ExFatFile::addDirCluster()+0x8c>
    5b46:	ldr	r0, [r0, #32]
    5b48:	bl	57ec <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5b4c:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    5b4e:	ldr.w	r3, [r3, #1084]	; 0x43c
    5b52:	add	r0, r3
  if (dl >= 0X4000000) {
    5b54:	cmp.w	r0, #67108864	; 0x4000000
    5b58:	bcs.n	5be6 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    5b5a:	mov	r0, r4
    5b5c:	bl	58a4 <ExFatFile::addCluster()>
    5b60:	cmp	r0, #0
    5b62:	beq.n	5be6 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    5b64:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5b66:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    5b68:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5b6a:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    5b6c:	ldrb.w	r2, [r3, #1093]	; 0x445
    5b70:	subs	r5, #2
    5b72:	ldr.w	r3, [r3, #1068]	; 0x42c
    5b76:	lsls	r5, r2
    5b78:	add	r5, r3
    5b7a:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5b7c:	ldrb.w	r3, [r0, #1093]	; 0x445
    5b80:	lsl.w	r3, r7, r3
    5b84:	cmp	r6, r3
    5b86:	bcc.n	5bca <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    5b88:	ldrb.w	r3, [r4, #49]	; 0x31
    5b8c:	lsls	r3, r3, #25
    5b8e:	bmi.n	5bbc <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b90:	ldrb.w	r3, [r4, #51]	; 0x33
    5b94:	orn	r3, r3, #127	; 0x7f
    5b98:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5b9c:	ldr.w	r2, [r0, #1084]	; 0x43c
    5ba0:	ldrd	r3, r1, [r4, #8]
    5ba4:	adds	r3, r3, r2
    5ba6:	adc.w	r1, r1, #0
    5baa:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5bae:	ldrd	r3, r1, [r4, #16]
    5bb2:	adds	r3, r3, r2
    5bb4:	adc.w	r1, r1, #0
    5bb8:	strd	r3, r1, [r4, #16]
  return sync();
    5bbc:	mov	r0, r4
}
    5bbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    5bc2:	b.w	5af8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5bc6:	ldr	r0, [r0, #8]
    5bc8:	b.n	5b4c <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    5bca:	movs	r2, #5
    5bcc:	adds	r1, r5, r6
    5bce:	add.w	r0, r0, #528	; 0x210
    5bd2:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5bd6:	cbz	r0, 5be6 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    5bd8:	mov.w	r2, #512	; 0x200
    5bdc:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5bde:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    5be0:	bl	9444 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5be4:	b.n	5b7a <ExFatFile::addDirCluster()+0x40>
}
    5be6:	movs	r0, #0
    5be8:	pop	{r3, r4, r5, r6, r7, pc}

00005bea <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5bea:	push	{r4, lr}
  if (!parent->isDir()) {
    5bec:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5bf0:	mov	r4, r0
  if (!parent->isDir()) {
    5bf2:	tst.w	r3, #80	; 0x50
    5bf6:	beq.n	5c2e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5bf8:	movw	r3, #2562	; 0xa02
    5bfc:	bl	4fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c00:	cbz	r0, 5c2e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    5c02:	movs	r3, #16
  if (!addDirCluster()) {
    5c04:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    5c06:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    5c0a:	bl	5b3a <ExFatFile::addDirCluster()>
    5c0e:	cbz	r0, 5c2e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    5c10:	ldr	r3, [r4, #24]
    5c12:	mov	r0, r4
    5c14:	movs	r2, #0
    5c16:	str	r3, [r4, #28]
    5c18:	movs	r3, #0
    5c1a:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5c1e:	movs	r3, #193	; 0xc1
  return sync();
    5c20:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5c22:	strb.w	r3, [r4, #51]	; 0x33
}
    5c26:	ldmia.w	sp!, {r4, lr}
  return sync();
    5c2a:	b.w	5af8 <ExFatFile::sync()>
}
    5c2e:	movs	r0, #0
    5c30:	pop	{r4, pc}

00005c32 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5c32:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c36:	mov	r8, r3
    5c38:	sub	sp, #88	; 0x58
    5c3a:	movs	r3, #0
    5c3c:	mov	r5, r0
    5c3e:	mov	r4, r1
    5c40:	str	r2, [sp, #4]
    5c42:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    5c46:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    5c48:	ldrb.w	r3, [r0, #49]	; 0x31
    5c4c:	cbz	r3, 5c56 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    5c4e:	movs	r0, #0
}
    5c50:	add	sp, #88	; 0x58
    5c52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    5c56:	ldrb.w	r3, [r1, #49]	; 0x31
    5c5a:	tst.w	r3, #80	; 0x50
    5c5e:	beq.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    5c60:	ldrb	r3, [r2, #0]
    5c62:	cmp	r3, #47	; 0x2f
    5c64:	bne.n	5c7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    5c66:	ldr	r2, [sp, #4]
    5c68:	ldrb	r3, [r2, #0]
    5c6a:	cmp	r3, #47	; 0x2f
    5c6c:	beq.n	5cc8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5c6e:	ldr	r1, [r4, #32]
    5c70:	add	r0, sp, #32
    5c72:	bl	4c6e <ExFatFile::openRoot(ExFatVolume*)>
    5c76:	cmp	r0, #0
    5c78:	beq.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    5c7a:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    5c7c:	add	r3, sp, #4
    5c7e:	add	r2, sp, #8
    5c80:	ldr	r1, [sp, #4]
    5c82:	mov	r0, r5
    5c84:	bl	4c94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5c88:	cmp	r0, #0
    5c8a:	beq.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    5c8c:	ldr	r3, [sp, #4]
    5c8e:	ldrb	r3, [r3, #0]
    5c90:	cbz	r3, 5ce4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    5c92:	movs	r3, #0
    5c94:	add	r2, sp, #8
    5c96:	mov	r1, r4
    5c98:	mov	r0, r5
    5c9a:	bl	4fa4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c9e:	cbz	r0, 5cce <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    5ca0:	add	r6, sp, #32
    5ca2:	mov	r2, r5
    5ca4:	add.w	r3, r5, #48	; 0x30
    5ca8:	mov	r4, r6
    5caa:	ldr	r0, [r2, #0]
    5cac:	adds	r2, #8
    5cae:	ldr.w	r1, [r2, #-4]
    5cb2:	mov	r7, r6
    5cb4:	cmp	r2, r3
    5cb6:	stmia	r7!, {r0, r1}
    5cb8:	mov	r6, r7
    5cba:	bne.n	5caa <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    5cbc:	ldr	r0, [r2, #0]
    5cbe:	str	r0, [r7, #0]
    close();
    5cc0:	mov	r0, r5
    5cc2:	bl	4c5a <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5cc6:	b.n	5c7c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    5cc8:	adds	r2, #1
    5cca:	str	r2, [sp, #4]
    5ccc:	b.n	5c66 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    5cce:	cmp.w	r8, #0
    5cd2:	beq.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    5cd4:	add	r2, sp, #8
    5cd6:	mov	r1, r4
    5cd8:	mov	r0, r5
    5cda:	bl	5bea <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5cde:	cmp	r0, #0
    5ce0:	bne.n	5ca0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    5ce2:	b.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    5ce4:	add	r2, sp, #8
    5ce6:	mov	r1, r4
    5ce8:	mov	r0, r5
    5cea:	bl	5bea <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5cee:	b.n	5c50 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00005cf0 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5cf0:	push	{r4, r5, r6, r7, lr}
    5cf2:	mov	r4, r0
    5cf4:	sub	sp, #116	; 0x74
    5cf6:	movs	r0, #0
    5cf8:	str	r0, [sp, #48]	; 0x30
    5cfa:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    5cfc:	ldrb.w	r0, [r4, #49]	; 0x31
    5d00:	tst.w	r0, #24
    5d04:	bne.n	5d0c <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    5d06:	movs	r0, #0
}
    5d08:	add	sp, #116	; 0x74
    5d0a:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    5d0c:	ldr	r0, [r4, #32]
    5d0e:	ldr	r3, [r1, #32]
    5d10:	cmp	r0, r3
    5d12:	bne.n	5d06 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5d14:	movw	r3, #2561	; 0xa01
    5d18:	mov	r0, sp
    5d1a:	bl	52f4 <ExFatFile::open(ExFatFile*, char const*, int)>
    5d1e:	cmp	r0, #0
    5d20:	beq.n	5d06 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    5d22:	add	r2, sp, #56	; 0x38
    5d24:	mov	r3, r4
    5d26:	add.w	r7, r4, #48	; 0x30
    5d2a:	mov	r6, r2
    5d2c:	ldr	r0, [r3, #0]
    5d2e:	adds	r3, #8
    5d30:	ldr.w	r1, [r3, #-4]
    5d34:	mov	r5, r2
    5d36:	cmp	r3, r7
    5d38:	stmia	r5!, {r0, r1}
    5d3a:	mov	r2, r5
    5d3c:	bne.n	5d2c <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    5d3e:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    5d40:	add	r2, sp, #36	; 0x24
    5d42:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    5d46:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    5d48:	ldmia	r2, {r0, r1, r2}
    5d4a:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    5d4e:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    5d52:	mov	r0, r4
  m_setCount = file.m_setCount;
    5d54:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5d58:	ldrb.w	r3, [r4, #51]	; 0x33
    5d5c:	orn	r3, r3, #127	; 0x7f
    5d60:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5d64:	bl	5af8 <ExFatFile::sync()>
    5d68:	cmp	r0, #0
    5d6a:	beq.n	5d06 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    5d6c:	movs	r3, #0
  return oldFile.remove();
    5d6e:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    5d70:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5d72:	movs	r3, #2
    5d74:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5d78:	movs	r3, #8
    5d7a:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5d7e:	bl	5938 <ExFatFile::remove()>
    5d82:	b.n	5d08 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00005d84 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5d84:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5d86:	ldrb.w	r2, [r0, #51]	; 0x33
    5d8a:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5d8c:	lsls	r3, r2, #30
    5d8e:	bmi.n	5d96 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5d90:	movs	r0, #0
}
    5d92:	add	sp, #12
    5d94:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    5d96:	ldr	r3, [r0, #28]
    5d98:	cmp	r3, #0
    5d9a:	beq.n	5e4a <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    5d9c:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    5da0:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    5da2:	beq.n	5e14 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5da4:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5da6:	ldrb.w	r5, [r0, #1093]	; 0x445
    5daa:	ldrd	r2, r6, [r4, #8]
    5dae:	adds	r5, #9
    5db0:	subs	r2, #1
    5db2:	uxtb	r5, r5
    5db4:	adc.w	r6, r6, #4294967295
    5db8:	rsb	ip, r5, #32
    5dbc:	sub.w	r7, r5, #32
    5dc0:	lsrs	r2, r5
    5dc2:	lsl.w	ip, r6, ip
    5dc6:	lsr.w	r7, r6, r7
    5dca:	orr.w	r2, r2, ip
    5dce:	orrs	r2, r7
    5dd0:	adds	r2, #1
    if (m_curCluster) {
    5dd2:	cbz	r1, 5e00 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    5dd4:	subs	r3, #1
      toFree = m_curCluster + 1;
    5dd6:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5dd8:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    5dda:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5ddc:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5dde:	cbnz	r2, 5e06 <ExFatFile::truncate()+0x82>
  return sync();
    5de0:	mov	r0, r4
  m_dataLength = m_curPosition;
    5de2:	ldrd	r2, r3, [r4]
    5de6:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    5dea:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5dee:	ldrb.w	r3, [r4, #51]	; 0x33
    5df2:	orn	r3, r3, #127	; 0x7f
    5df6:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5dfa:	bl	5af8 <ExFatFile::sync()>
    5dfe:	b.n	5d92 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    5e00:	str	r3, [sp, #4]
      m_firstCluster = 0;
    5e02:	str	r1, [r4, #28]
    5e04:	b.n	5dde <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5e06:	movs	r3, #0
    5e08:	ldr	r1, [sp, #4]
    5e0a:	bl	549c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    5e0e:	cmp	r0, #0
    5e10:	bne.n	5de0 <ExFatFile::truncate()+0x5c>
    5e12:	b.n	5d90 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    5e14:	cbz	r1, 5e44 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    5e16:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5e18:	add	r2, sp, #4
    5e1a:	ldr	r0, [r0, #32]
    5e1c:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5e20:	cmp	r0, #0
    5e22:	blt.n	5d90 <ExFatFile::truncate()+0xc>
      if (fg) {
    5e24:	beq.n	5e36 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5e26:	mov.w	r2, #4294967295
    5e2a:	ldr	r1, [r4, #24]
    5e2c:	ldr	r0, [r4, #32]
    5e2e:	bl	5616 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e32:	cmp	r0, #0
    5e34:	beq.n	5d90 <ExFatFile::truncate()+0xc>
    if (toFree) {
    5e36:	ldr	r1, [sp, #4]
    5e38:	cmp	r1, #0
    5e3a:	beq.n	5de0 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    5e3c:	ldr	r0, [r4, #32]
    5e3e:	bl	5650 <ExFatPartition::freeChain(unsigned long)>
    5e42:	b.n	5e0e <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    5e44:	str	r3, [sp, #4]
      m_firstCluster = 0;
    5e46:	str	r1, [r0, #28]
    5e48:	b.n	5e36 <ExFatFile::truncate()+0xb2>
      return true;
    5e4a:	movs	r0, #1
    5e4c:	b.n	5d92 <ExFatFile::truncate()+0xe>
	...

00005e50 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5e50:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e54:	ldrb.w	r3, [r0, #51]	; 0x33
    5e58:	mov	r8, r1
    5e5a:	mov	r4, r0
    5e5c:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5e5e:	lsls	r1, r3, #30
    5e60:	bpl.n	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5e62:	lsls	r2, r3, #28
    5e64:	bmi.n	5e94 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    5e66:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e68:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5e6c:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5e70:	ldrd	r5, r3, [r4]
  while (toWrite) {
    5e74:	cbnz	r7, 5eb2 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5e76:	ldrd	r1, r2, [r4, #8]
    5e7a:	cmp	r1, r5
    5e7c:	sbcs	r2, r3
    5e7e:	bcs.w	6044 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    5e82:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e86:	ldrb.w	r3, [r4, #51]	; 0x33
    5e8a:	orn	r3, r3, #127	; 0x7f
    5e8e:	strb.w	r3, [r4, #51]	; 0x33
    5e92:	b.n	604e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    5e94:	ldrd	r2, r3, [r0, #16]
    5e98:	bl	4ec4 <ExFatFile::seekSet(unsigned long long)>
    5e9c:	cmp	r0, #0
    5e9e:	bne.n	5e66 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5ea0:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    5ea4:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    5ea8:	orr.w	r3, r3, #1
    5eac:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    5eb0:	b.n	604e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5eb2:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5eb4:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5eb6:	ldr.w	r3, [r0, #1080]	; 0x438
    5eba:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5ebc:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    5ec0:	cbnz	r5, 5f0c <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    5ec2:	cmp	r1, #0
    5ec4:	beq.n	5f72 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    5ec6:	ldrb.w	r3, [r4, #51]	; 0x33
    5eca:	lsls	r3, r3, #25
    5ecc:	bpl.n	5f64 <ExFatFile::write(void const*, unsigned int)+0x114>
    5ece:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    5ed2:	ldrd	r3, r2, [r4, #8]
    5ed6:	adds	r0, #9
    5ed8:	subs	r3, #1
    5eda:	uxtb	r0, r0
    5edc:	adc.w	r2, r2, #4294967295
    5ee0:	rsb	lr, r0, #32
    5ee4:	sub.w	ip, r0, #32
    5ee8:	lsrs	r3, r0
    5eea:	lsl.w	lr, r2, lr
    5eee:	lsr.w	ip, r2, ip
    5ef2:	ldr	r2, [r4, #28]
    5ef4:	orr.w	r3, r3, lr
    5ef8:	orr.w	r3, r3, ip
    5efc:	add	r3, r2
          if (m_curCluster < lc) {
    5efe:	cmp	r3, r1
    5f00:	bhi.n	5f5e <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    5f02:	mov	r0, r4
    5f04:	bl	58a4 <ExFatFile::addCluster()>
    5f08:	cmp	r0, #0
    5f0a:	beq.n	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    5f0c:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5f10:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    5f12:	ldr	r1, [r4, #24]
    5f14:	ldrb.w	r2, [ip, #1093]	; 0x445
    5f18:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5f1a:	ldr.w	r0, [ip, #1068]	; 0x42c
    5f1e:	lsls	r1, r2
    5f20:	add.w	r1, r1, r5, lsr #9
    5f24:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5f26:	cbnz	r6, 5f8a <ExFatFile::write(void const*, unsigned int)+0x13a>
    5f28:	cmp.w	r7, #512	; 0x200
    5f2c:	bcc.n	5f8a <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    5f2e:	cmp.w	r7, #1024	; 0x400
    5f32:	ldr.w	lr, [ip, #540]	; 0x21c
    5f36:	ldr.w	r0, [ip, #532]	; 0x214
    5f3a:	bcs.n	6012 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    5f3c:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    5f3e:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    5f40:	ittt	eq
    5f42:	moveq.w	r3, #4294967295
    m_status = 0;
    5f46:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5f4a:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    5f4e:	ldr	r3, [r0, #0]
    5f50:	ldr	r3, [r3, #36]	; 0x24
    5f52:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5f54:	cmp	r0, #0
    5f56:	beq.n	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    5f58:	mov.w	r5, #512	; 0x200
    5f5c:	b.n	5fde <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    5f5e:	adds	r1, #1
    5f60:	str	r1, [r4, #24]
        if (fg == 0) {
    5f62:	b.n	5f0c <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5f64:	mov	r2, sl
    5f66:	bl	5570 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5f6a:	cmp	r0, #0
    5f6c:	blt.n	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    5f6e:	beq.n	5f02 <ExFatFile::write(void const*, unsigned int)+0xb2>
    5f70:	b.n	5f0c <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    5f72:	ldr	r3, [r4, #28]
    5f74:	cbnz	r3, 5f86 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    5f76:	mov	r0, r4
    5f78:	bl	58a4 <ExFatFile::addCluster()>
    5f7c:	cmp	r0, #0
    5f7e:	beq.n	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    5f80:	ldr	r3, [r4, #24]
    5f82:	str	r3, [r4, #28]
    5f84:	b.n	5f0c <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    5f86:	str	r3, [r4, #24]
    5f88:	b.n	5f0c <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    5f8a:	rsb	r5, r6, #512	; 0x200
    5f8e:	cmp	r5, r7
    5f90:	it	cs
    5f92:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5f94:	cmp	r6, #0
    5f96:	bne.n	600e <ExFatFile::write(void const*, unsigned int)+0x1be>
    5f98:	ldr	r3, [r4, #20]
    5f9a:	ldr	r0, [r4, #0]
    5f9c:	str	r3, [sp, #4]
    5f9e:	ldr	r3, [r4, #16]
    5fa0:	ldr	r2, [r4, #4]
    5fa2:	cmp	r0, r3
    5fa4:	ldr	r3, [sp, #4]
    5fa6:	sbcs.w	r3, r2, r3
    5faa:	bcc.n	600e <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5fac:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    5fae:	add.w	r0, ip, #528	; 0x210
    5fb2:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5fb6:	cmp	r0, #0
    5fb8:	beq.w	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    5fbc:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5fbe:	add	r6, r5
      memcpy(dst, src, n);
    5fc0:	mov	r2, r5
    5fc2:	mov	r1, r8
    5fc4:	bl	9488 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5fc8:	cmp.w	r6, #512	; 0x200
    5fcc:	ldr	r0, [r4, #32]
    5fce:	bne.n	5fde <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    5fd0:	add.w	r0, r0, #528	; 0x210
    5fd4:	bl	493c <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5fd8:	cmp	r0, #0
    5fda:	beq.w	5ea0 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    5fde:	add	r8, r5
    toWrite -= n;
    5fe0:	subs	r7, r7, r5
    m_curPosition += n;
    5fe2:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5fe6:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5fea:	adds	r3, r5, r3
    5fec:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    5ff0:	cmp	r0, r3
    5ff2:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5ff4:	itt	cc
    5ff6:	ldrbcc.w	r1, [r4, #51]	; 0x33
    5ffa:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    5ffe:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6002:	itt	cc
    6004:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6008:	strdcc	r3, r2, [r4, #16]
    600c:	b.n	5e70 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    600e:	movs	r2, #1
    6010:	b.n	5fae <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6012:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6016:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6018:	lsrs	r2, r7, #9
    601a:	cmp	r3, r2
    601c:	it	cs
    601e:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6020:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    6022:	mov.w	r5, r3, lsl #9
    6026:	bhi.n	603a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6028:	adds	r2, r1, r3
    602a:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    602c:	ittt	hi
    602e:	movhi.w	r2, #4294967295
    m_status = 0;
    6032:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6036:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    603a:	ldr	r2, [r0, #0]
    603c:	ldr	r6, [r2, #40]	; 0x28
    603e:	mov	r2, r8
    6040:	blx	r6
    6042:	b.n	5fd8 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6044:	ldr	r3, [pc, #16]	; (6058 <ExFatFile::write(void const*, unsigned int)+0x208>)
    6046:	ldr	r3, [r3, #0]
    6048:	cmp	r3, #0
    604a:	bne.w	5e86 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    604e:	mov	r0, r9
    6050:	add	sp, #12
    6052:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6056:	nop
    6058:	.word	0x20026dfc

0000605c <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    605c:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    605e:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6060:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6062:	bl	654e <FatFile::seekSet(unsigned long)>
    6066:	cbz	r0, 6074 <FatFile::cacheDir(unsigned short)+0x18>
    6068:	mov	r0, r4
    606a:	movs	r1, #0
  }
    606c:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6070:	b.w	6510 <FatFile::readDirCache(bool)>
  }
    6074:	pop	{r4, pc}

00006076 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6076:	cmp	r2, #4
    6078:	bhi.n	6084 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    607a:	add.w	r2, r1, r2, lsl #1
    607e:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6082:	bx	lr
  } else if (i < 11) {
    6084:	cmp	r2, #10
    6086:	bhi.n	6090 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6088:	add.w	r2, r1, r2, lsl #1
    608c:	ldrh	r0, [r2, #4]
    608e:	bx	lr
  } else if (i < 13) {
    6090:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6092:	itte	ls
    6094:	addls.w	r2, r1, r2, lsl #1
    6098:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    609a:	movhi	r0, #0
}
    609c:	bx	lr

0000609e <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    609e:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    60a0:	ldrb	r4, [r0, #0]
    60a2:	mov	r5, r1
    60a4:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    60a6:	cbz	r4, 6118 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    60a8:	ands.w	r4, r4, #96	; 0x60
    60ac:	beq.n	60be <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    60ae:	cmp	r2, #1
    60b0:	bls.n	6118 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    60b2:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    60b4:	movs	r0, #1
    name[0] = '/';
    60b6:	strb	r3, [r1, #0]
    name[1] = '\0';
    60b8:	movs	r3, #0
    60ba:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    60bc:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    60be:	mov	r1, r4
    60c0:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    60c4:	cbz	r0, 6118 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    60c6:	mov	r6, r0
    60c8:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    60ca:	movs	r2, #8
    if (i == 8) {
    60cc:	cmp	r1, #8
      if (*ptr == ' ') {
    60ce:	ldrb	r3, [r6, #0]
    if (i == 8) {
    60d0:	bne.n	60ea <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    60d2:	cmp	r3, #32
    60d4:	beq.n	6110 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    60d6:	movs	r2, #16
      c = '.';
    60d8:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    60da:	mov	ip, r4
    60dc:	adds	r4, #1
    60de:	cmp	r4, r7
    60e0:	bcs.n	6118 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    60e2:	uxtb	r4, r4
    60e4:	strb.w	r3, [r5, ip]
    60e8:	b.n	610a <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    60ea:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    60ee:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    60f0:	cmp.w	ip, #25
    60f4:	bhi.n	6106 <FatFile::getSFN(char*, unsigned int)+0x68>
    60f6:	ldrb.w	ip, [r0, #12]
    60fa:	tst.w	r2, ip
    60fe:	beq.n	60da <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6100:	adds	r3, #32
    6102:	uxtb	r3, r3
    6104:	b.n	60da <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    6106:	cmp	r3, #32
    6108:	bne.n	60da <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    610a:	adds	r1, #1
    610c:	cmp	r1, #12
    610e:	bne.n	60cc <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6110:	movs	r3, #0
    6112:	mov	r0, r4
    6114:	strb	r3, [r5, r4]
  return j;
    6116:	b.n	60bc <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6118:	movs	r0, #0
    611a:	strb	r0, [r5, #0]
  return 0;
    611c:	b.n	60bc <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006120 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6120:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6124:	movs	r5, #0
    6126:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6128:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    612a:	mov	r6, r0
    612c:	mov	r8, r1
    612e:	mov	r7, r2
    6130:	str	r5, [sp, #4]
  if (!isOpen()) {
    6132:	cbz	r3, 614e <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6134:	ldrb	r3, [r0, #3]
    6136:	cbnz	r3, 6142 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6138:	bl	609e <FatFile::getSFN(char*, unsigned int)>
}
    613c:	add	sp, #44	; 0x2c
    613e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6142:	mov	r1, r0
    6144:	add	r0, sp, #4
    6146:	bl	6336 <FatFile::openCluster(FatFile*)>
    614a:	cmp	r0, #0
    614c:	bne.n	61fa <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    614e:	movs	r0, #0
    6150:	strb.w	r0, [r8]
  return 0;
    6154:	b.n	613c <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6156:	ldrh	r1, [r6, #4]
    6158:	add	r0, sp, #4
    615a:	sub.w	r1, r1, r9
    615e:	uxth	r1, r1
    6160:	bl	605c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6164:	mov	sl, r0
    6166:	cmp	r0, #0
    6168:	beq.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    616a:	ldrb	r3, [r0, #11]
    616c:	cmp	r3, #15
    616e:	bne.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    6170:	ldrb	r3, [r0, #0]
    6172:	and.w	r3, r3, #31
    6176:	cmp	fp, r3
    6178:	bne.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    617a:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    617e:	uxtb.w	r2, fp
    6182:	mov	r1, sl
    6184:	mov	r0, r6
    6186:	bl	6076 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    618a:	cbz	r5, 61d6 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    618c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6190:	uxth	r2, r2
    6192:	cmp.w	r2, #1024	; 0x400
    6196:	bcs.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6198:	ldr	r3, [pc, #108]	; (6208 <FatFile::getName8(char*, unsigned int)+0xe8>)
    619a:	ubfx	r0, r0, #0, #10
    619e:	and.w	r5, r3, r5, lsl #10
    61a2:	orrs	r0, r5
    61a4:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    61a8:	mov	r1, r4
    61aa:	mov	r2, r7
    61ac:	bl	4822 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    61b0:	mov	r4, r0
    61b2:	cmp	r0, #0
    61b4:	beq.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    61b6:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    61b8:	add.w	fp, fp, #1
    61bc:	cmp.w	fp, #13
    61c0:	bne.n	617e <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    61c2:	add.w	r9, r9, #1
    61c6:	uxth.w	r9, r9
    61ca:	uxtb.w	fp, r9
    61ce:	ldrb	r3, [r6, #3]
    61d0:	cmp	r3, fp
    61d2:	bcs.n	6156 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    61d4:	b.n	61e6 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    61d6:	add.w	r2, r0, #10240	; 0x2800
    61da:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    61dc:	cmp.w	r2, #2048	; 0x800
    61e0:	bcc.n	61f0 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    61e2:	cmp	r0, #0
    61e4:	bne.n	61a8 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    61e6:	movs	r3, #0
  return str - name;
    61e8:	sub.w	r0, r4, r8
  *str = '\0';
    61ec:	strb	r3, [r4, #0]
  return str - name;
    61ee:	b.n	613c <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    61f0:	cmp.w	r2, #1024	; 0x400
    61f4:	bcs.n	614e <FatFile::getName8(char*, unsigned int)+0x2e>
    61f6:	mov	r5, r0
    61f8:	b.n	61b8 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    61fa:	subs	r7, #1
  char* str = name;
    61fc:	mov	r4, r8
    61fe:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6202:	add	r7, r8
    6204:	b.n	61ca <FatFile::getName8(char*, unsigned int)+0xaa>
    6206:	nop
    6208:	.word	0x000ffc00

0000620c <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    620c:	b.w	6120 <FatFile::getName8(char*, unsigned int)>

00006210 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6210:	push	{r3, r4, r5, lr}
    6212:	mov	r5, r1
    6214:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6216:	movs	r2, #36	; 0x24
    6218:	movs	r1, #0
    621a:	bl	9444 <memset>

  m_vol = vol;
    621e:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6220:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6222:	cmp	r3, #16
    6224:	beq.n	622e <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6226:	cmp	r3, #32
    6228:	beq.n	6238 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    622a:	cmp	r3, #12
    622c:	bne.n	623c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    622e:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6230:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6232:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6234:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6236:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6238:	movs	r3, #64	; 0x40
    623a:	b.n	6230 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    623c:	movs	r0, #0
    623e:	b.n	6236 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006240 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6240:	push	{r4, lr}
    6242:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6244:	adds	r0, #40	; 0x28
    6246:	bl	493c <FsCache::sync()>
    624a:	cbz	r0, 6262 <FatPartition::cacheSync()+0x22>
    624c:	add.w	r0, r4, #568	; 0x238
    6250:	bl	493c <FsCache::sync()>
    6254:	cbz	r0, 6262 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6256:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6258:	ldr	r3, [r0, #0]
  }
    625a:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    625e:	ldr	r3, [r3, #32]
    6260:	bx	r3
  }
    6262:	movs	r0, #0
    6264:	pop	{r4, pc}

00006266 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6266:	mov	r2, r0
bool FatFile::addCluster() {
    6268:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    626a:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    626e:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6270:	ldr	r0, [r0, #8]
    6272:	mov	r1, r5
    6274:	bl	6fa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6278:	cbz	r0, 628c <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    627a:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    627c:	cbnz	r5, 628e <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    627e:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6282:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6284:	ldrb	r3, [r4, #2]
    6286:	orn	r3, r3, #127	; 0x7f
    628a:	strb	r3, [r4, #2]
}
    628c:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    628e:	adds	r5, #1
    6290:	ldr	r2, [r4, #16]
    6292:	cmp	r2, r5
    6294:	beq.n	6284 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6296:	bic.w	r3, r3, #64	; 0x40
    629a:	b.n	6282 <FatFile::addCluster()+0x1c>

0000629c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    629c:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    629e:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    62a0:	mov	r4, r0
  if (isRootFixed()) {
    62a2:	ands.w	r5, r5, #32
    62a6:	beq.n	62ae <FatFile::addDirCluster()+0x12>
  return false;
    62a8:	movs	r6, #0
}
    62aa:	mov	r0, r6
    62ac:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    62ae:	ldr	r2, [r0, #20]
    62b0:	ldr	r3, [pc, #84]	; (6308 <FatFile::addDirCluster()+0x6c>)
    62b2:	cmp	r2, r3
    62b4:	bcs.n	62a8 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    62b6:	bl	6266 <FatFile::addCluster()>
    62ba:	mov	r6, r0
    62bc:	cmp	r0, #0
    62be:	beq.n	62a8 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    62c0:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    62c2:	ldr	r3, [r4, #16]
    62c4:	ldrb	r1, [r2, #6]
    62c6:	subs	r3, #2
    62c8:	ldr	r7, [r2, #20]
    62ca:	lsls	r3, r1
    62cc:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    62ce:	ldr	r0, [r4, #8]
    62d0:	uxtb	r1, r5
    62d2:	ldrb	r3, [r0, #4]
    62d4:	cmp	r3, r1
    62d6:	bhi.n	62ea <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    62d8:	ldrb	r2, [r0, #6]
    62da:	mov.w	r3, #512	; 0x200
    62de:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    62e0:	ldr	r2, [r4, #20]
    62e2:	uxtah	r3, r2, r3
    62e6:	str	r3, [r4, #20]
  return true;
    62e8:	b.n	62aa <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    62ea:	movs	r2, #5
    62ec:	add	r1, r7
    62ee:	adds	r0, #40	; 0x28
    if (!pc) {
    62f0:	adds	r5, #1
    62f2:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    62f6:	cmp	r0, #0
    62f8:	beq.n	62a8 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    62fa:	mov.w	r2, #512	; 0x200
    62fe:	movs	r1, #0
    6300:	bl	9444 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6304:	b.n	62ce <FatFile::addDirCluster()+0x32>
    6306:	nop
    6308:	.word	0x001ffe00

0000630c <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    630c:	push	{r4, lr}
    630e:	mov	r4, r0
    6310:	ldr	r0, [r0, #8]
    6312:	mov	r2, r1
    6314:	adds	r0, #40	; 0x28
    6316:	ldr	r1, [r4, #24]
    6318:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    631c:	cbz	r0, 6328 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    631e:	ldrh	r3, [r4, #4]
    6320:	and.w	r3, r3, #15
    6324:	add.w	r0, r0, r3, lsl #5
}
    6328:	pop	{r4, pc}

0000632a <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    632a:	ldrb	r3, [r0, #0]
    632c:	cbnz	r3, 6332 <FatFile::openRoot(FatVolume*)+0x8>
    632e:	b.w	6210 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    6332:	movs	r0, #0
    6334:	bx	lr

00006336 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    6336:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6338:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    633a:	mov	r4, r0
    633c:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    633e:	cbnz	r3, 634a <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6340:	ldr	r1, [r1, #8]
}
    6342:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    6346:	b.w	632a <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    634a:	movs	r2, #36	; 0x24
    634c:	movs	r1, #0
    634e:	bl	9444 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6352:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6354:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6356:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6358:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    635a:	ldr	r3, [r5, #8]
    635c:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    635e:	ldr	r3, [r5, #12]
    6360:	str	r3, [r4, #32]
}
    6362:	pop	{r3, r4, r5, pc}

00006364 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6364:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6368:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    636c:	ldrb	r3, [r0, #2]
    636e:	mov	r4, r0
    6370:	sub	sp, #12
    6372:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6374:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    6376:	mov	r5, r2
  if (!isReadable()) {
    6378:	bpl.n	645e <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    637a:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    637c:	lsls	r1, r3, #28
    637e:	bpl.n	63a8 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6380:	ldr	r3, [r4, #28]
    6382:	ldr	r2, [r4, #20]
    6384:	subs	r3, r3, r2
    6386:	cmp	r5, r3
    6388:	it	cs
    638a:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    638c:	add.w	r3, r4, #16
  toRead = nbyte;
    6390:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    6392:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6396:	vmov	s16, r3
  while (toRead) {
    639a:	cbnz	r6, 63ba <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    639c:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    639e:	add	sp, #12
    63a0:	vpop	{d8}
    63a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    63a8:	lsls	r2, r3, #26
    63aa:	bpl.n	638c <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    63ac:	ldr	r3, [r4, #8]
    63ae:	ldrh	r2, [r3, #10]
    63b0:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    63b2:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    63b6:	uxth	r3, r3
    63b8:	b.n	6386 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    63ba:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    63bc:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    63be:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    63c0:	ldr	r0, [r4, #8]
    63c2:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    63c6:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    63ca:	bpl.n	6404 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    63cc:	ldr	r2, [r0, #32]
    63ce:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    63d0:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    63d4:	cmp.w	fp, #0
    63d8:	bne.n	646c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    63da:	cmp.w	r6, #512	; 0x200
    63de:	bcc.n	646c <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    63e0:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    63e4:	cmp	r1, r2
    63e6:	beq.n	646c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    63e8:	cmp.w	r6, #1024	; 0x400
    63ec:	bcs.n	649c <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    63ee:	ldr.w	r0, [sl, #44]	; 0x2c
    63f2:	mov	r2, r8
    63f4:	ldr	r3, [r0, #0]
    63f6:	ldr	r3, [r3, #16]
    63f8:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    63fa:	cmp	r0, #0
    63fc:	beq.n	645e <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    63fe:	mov.w	r7, #512	; 0x200
    6402:	b.n	6490 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    6404:	ldrb.w	r9, [r0, #5]
    6408:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    640c:	cmp.w	fp, #0
    6410:	bne.n	6424 <FatFile::read(void*, unsigned int)+0xc0>
    6412:	cmp.w	r9, #0
    6416:	bne.n	6424 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6418:	cbnz	r7, 6436 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    641a:	lsls	r2, r2, #25
    return m_rootDirStart;
    641c:	ite	mi
    641e:	ldrmi	r2, [r0, #32]
    6420:	ldrpl	r2, [r4, #32]
    6422:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6424:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6426:	ldr	r1, [r4, #16]
    6428:	ldrb	r0, [r2, #6]
    642a:	subs	r1, #2
    642c:	ldr	r2, [r2, #20]
    642e:	lsls	r1, r0
    6430:	add	r1, r2
    6432:	add	r1, r9
    6434:	b.n	63d0 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    6436:	lsls	r3, r2, #28
          m_curCluster++;
    6438:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    643a:	bpl.n	6448 <FatFile::read(void*, unsigned int)+0xe4>
    643c:	ldrb	r2, [r4, #2]
    643e:	lsls	r7, r2, #25
    6440:	bpl.n	6448 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    6442:	adds	r1, #1
    6444:	str	r1, [r4, #16]
    6446:	b.n	6424 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6448:	vmov	r2, s16
    644c:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6450:	cmp	r0, #0
    6452:	blt.n	645e <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    6454:	bne.n	6424 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    6456:	ldrb	r3, [r4, #0]
    6458:	tst.w	r3, #112	; 0x70
    645c:	bne.n	639c <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    645e:	ldrb	r3, [r4, #1]
  return -1;
    6460:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6464:	orr.w	r3, r3, #2
    6468:	strb	r3, [r4, #1]
  return -1;
    646a:	b.n	639e <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    646c:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6470:	movs	r2, #0
    6472:	add.w	r0, sl, #40	; 0x28
    6476:	cmp	r7, r6
    6478:	it	cs
    647a:	movcs	r7, r6
    647c:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6480:	cmp	r0, #0
    6482:	beq.n	645e <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6484:	add.w	r1, r0, fp
    6488:	mov	r2, r7
    648a:	mov	r0, r8
    648c:	bl	9488 <memcpy>
    m_curPosition += n;
    6490:	ldr	r3, [r4, #20]
    dst += n;
    6492:	add	r8, r7
    toRead -= n;
    6494:	subs	r6, r6, r7
    m_curPosition += n;
    6496:	add	r3, r7
    6498:	str	r3, [r4, #20]
    toRead -= n;
    649a:	b.n	639a <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    649c:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    649e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    64a0:	lsls	r0, r0, #26
    64a2:	bmi.n	64b2 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    64a4:	ldrb.w	r0, [sl, #4]
    64a8:	sub.w	r0, r0, r9
    64ac:	cmp	r3, r0
    64ae:	it	cs
    64b0:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    64b2:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    64b4:	mov.w	r7, r3, lsl #9
    64b8:	bls.n	64ce <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    64ba:	ldr.w	r0, [sl, #44]	; 0x2c
    64be:	ldr	r2, [r0, #0]
    64c0:	ldr.w	sl, [r2, #20]
    64c4:	mov	r2, r8
    64c6:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    64c8:	cmp	r0, #0
    64ca:	bne.n	6490 <FatFile::read(void*, unsigned int)+0x12c>
    64cc:	b.n	645e <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    64ce:	adds	r0, r1, r3
    64d0:	cmp	r2, r0
    64d2:	bcs.n	64ba <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    64d4:	add.w	r0, sl, #40	; 0x28
    64d8:	strd	r1, r3, [sp]
    64dc:	bl	493c <FsCache::sync()>
    64e0:	ldrd	r1, r3, [sp]
    64e4:	cmp	r0, #0
    64e6:	bne.n	64ba <FatFile::read(void*, unsigned int)+0x156>
    64e8:	b.n	645e <FatFile::read(void*, unsigned int)+0xfa>

000064ea <FatFile::peek()>:
int FatFile::peek() {
    64ea:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    64ec:	movs	r2, #1
    64ee:	add.w	r1, sp, #7
    64f2:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    64f4:	ldrd	r5, r6, [r0, #16]
    64f8:	bl	6364 <FatFile::read(void*, unsigned int)>
    64fc:	cmp	r0, #1
    64fe:	ite	eq
    6500:	ldrbeq.w	r0, [sp, #7]
    6504:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    6508:	strd	r5, r6, [r4, #16]
}
    650c:	add	sp, #8
    650e:	pop	{r4, r5, r6, pc}

00006510 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6510:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    6512:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6516:	push	{r0, r1, r2, r4, r5, lr}
    6518:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    651a:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    651e:	beq.n	6522 <FatFile::readDirCache(bool)+0x12>
    6520:	cbnz	r1, 654a <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    6522:	movs	r2, #1
    6524:	add.w	r1, sp, #7
    6528:	mov	r0, r4
    652a:	bl	6364 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    652e:	sxtb	r0, r0
    6530:	cmp	r0, #1
    6532:	beq.n	653a <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    6534:	movs	r0, #0
}
    6536:	add	sp, #12
    6538:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    653a:	ldr	r3, [r4, #20]
    653c:	adds	r3, #31
    return m_buffer;
    653e:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    6540:	str	r3, [r4, #20]
    6542:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6544:	add.w	r0, r0, r5, lsl #5
    6548:	b.n	6536 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    654a:	adds	r3, #32
    654c:	b.n	653e <FatFile::readDirCache(bool)+0x2e>

0000654e <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    654e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6552:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    6554:	ldrb	r1, [r0, #0]
    6556:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6558:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    655a:	cbz	r1, 657e <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    655c:	ldr	r0, [r0, #20]
    655e:	cmp	r0, r5
    6560:	beq.n	6570 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    6562:	cbnz	r5, 6574 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    6564:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6566:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    6568:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    656a:	bic.w	r3, r3, #32
    656e:	strb	r3, [r4, #2]
    return true;
    6570:	movs	r0, #1
    6572:	b.n	6582 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    6574:	lsls	r3, r1, #28
    6576:	bpl.n	6586 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    6578:	ldr	r3, [r4, #28]
    657a:	cmp	r3, r5
    657c:	bcs.n	6596 <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    657e:	movs	r0, #0
  m_curCluster = tmp;
    6580:	str	r7, [r4, #16]
}
    6582:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    6586:	lsls	r6, r1, #26
    6588:	bpl.n	6596 <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    658a:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    658c:	ldrh	r3, [r3, #10]
    658e:	cmp.w	r5, r3, lsl #5
    6592:	bhi.n	657e <FatFile::seekSet(unsigned long)+0x30>
    6594:	b.n	6566 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6596:	ldr.w	ip, [r4, #8]
    659a:	subs	r6, r5, #1
  if (isContiguous()) {
    659c:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    659e:	ldrb.w	r3, [ip, #6]
    65a2:	lsls	r2, r2, #25
    65a4:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    65a8:	uxtb	r3, r3
    65aa:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    65ae:	bpl.n	65b8 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    65b0:	ldr	r3, [r4, #32]
    65b2:	add	r3, r6
    65b4:	str	r3, [r4, #16]
    goto done;
    65b6:	b.n	6566 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    65b8:	subs	r2, r0, #1
    65ba:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    65be:	cmp	r6, r3
    65c0:	bcc.n	65c4 <FatFile::seekSet(unsigned long)+0x76>
    65c2:	cbnz	r0, 65ea <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    65c4:	lsls	r3, r1, #25
    return m_rootDirStart;
    65c6:	ite	mi
    65c8:	ldrmi.w	r3, [ip, #32]
    65cc:	ldrpl	r3, [r4, #32]
    65ce:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65d0:	add.w	r8, r4, #16
  while (nNew--) {
    65d4:	cmp	r6, #0
    65d6:	beq.n	6566 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65d8:	mov	r2, r8
    65da:	ldr	r1, [r4, #16]
    65dc:	ldr	r0, [r4, #8]
    65de:	subs	r6, #1
    65e0:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
    65e4:	cmp	r0, #0
    65e6:	bgt.n	65d4 <FatFile::seekSet(unsigned long)+0x86>
    65e8:	b.n	657e <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    65ea:	subs	r6, r6, r3
    65ec:	b.n	65d0 <FatFile::seekSet(unsigned long)+0x82>

000065ee <FatFile::rmdir()>:
bool FatFile::rmdir() {
    65ee:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    65f0:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    65f2:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    65f4:	lsls	r2, r3, #27
    65f6:	bpl.n	660c <FatFile::rmdir()+0x1e>
    seekSet(0);
    65f8:	movs	r1, #0
    65fa:	bl	654e <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    65fe:	movs	r1, #1
    6600:	mov	r0, r4
    6602:	bl	6510 <FatFile::readDirCache(bool)>
    if (!dir) {
    6606:	cbnz	r0, 6610 <FatFile::rmdir()+0x22>
      if (!getError()) {
    6608:	ldrb	r3, [r4, #1]
    660a:	cbz	r3, 6624 <FatFile::rmdir()+0x36>
}
    660c:	movs	r0, #0
    660e:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    6610:	ldrb	r3, [r0, #0]
    6612:	cbz	r3, 6624 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6614:	cmp	r3, #229	; 0xe5
    6616:	beq.n	65fe <FatFile::rmdir()+0x10>
    6618:	cmp	r3, #46	; 0x2e
    661a:	beq.n	65fe <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    661c:	ldrb	r3, [r0, #11]
    661e:	lsls	r3, r3, #28
    6620:	bmi.n	65fe <FatFile::rmdir()+0x10>
    6622:	b.n	660c <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    6624:	movs	r3, #8
  return remove();
    6626:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6628:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    662a:	ldrb	r3, [r4, #2]
    662c:	orr.w	r3, r3, #2
    6630:	strb	r3, [r4, #2]
}
    6632:	ldmia.w	sp!, {r4, lr}
  return remove();
    6636:	b.w	78cc <FatFile::remove()>

0000663a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    663a:	push	{r3, r4, r5, r6, r7, lr}
    663c:	mov	r7, r1
    663e:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    6640:	movs	r1, #0
    6642:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6644:	mov	r4, r0
    6646:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    6648:	bl	9444 <memset>
  m_vol = dirFile->m_vol;
    664c:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    664e:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    6650:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    6652:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    6656:	str	r3, [r4, #12]
    6658:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    665c:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    665e:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6662:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    6664:	lsls	r1, r2, #28
    6666:	bmi.n	66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6668:	and.w	r2, r2, #23
    666c:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    666e:	ldrb	r1, [r3, #11]
    6670:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    6674:	itt	eq
    6676:	orreq.w	r2, r2, #8
    667a:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    667c:	ldrb.w	r2, [sp, #24]
    6680:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6682:	and.w	r2, r5, #3
    6686:	cmp	r2, #1
    6688:	beq.n	66ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    668a:	cmp	r2, #2
    668c:	beq.n	66d2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    668e:	cbnz	r2, 66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    6690:	lsls	r2, r5, #21
    6692:	bmi.n	66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6694:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    6696:	lsls	r7, r2, #30
    6698:	bpl.n	66a4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    669a:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    669c:	lsls	r6, r1, #27
    669e:	bmi.n	66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    66a0:	lsls	r1, r1, #31
    66a2:	bmi.n	66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    66a4:	and.w	r1, r5, #8
    66a8:	orrs	r2, r1
    66aa:	strb	r2, [r4, #2]
    return m_sector;
    66ac:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    66ae:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    66b0:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    66b2:	ldrh	r2, [r3, #20]
    66b4:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    66b8:	lsls	r2, r5, #21
    66ba:	bpl.n	66e6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66bc:	cbnz	r1, 66d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66be:	ldrb	r3, [r4, #2]
    66c0:	orn	r3, r3, #127	; 0x7f
    66c4:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66c6:	lsls	r3, r5, #17
    66c8:	bmi.n	66ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    66ca:	movs	r0, #1
}
    66cc:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    66ce:	movs	r2, #2
    66d0:	b.n	6696 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    66d2:	movs	r2, #3
    66d4:	b.n	6696 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66d6:	bl	7022 <FatPartition::freeChain(unsigned long)>
    66da:	cmp	r0, #0
    66dc:	bne.n	66be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    66de:	movs	r0, #0
    66e0:	strb	r0, [r4, #0]
  m_flags = 0;
    66e2:	strb	r0, [r4, #2]
  return false;
    66e4:	b.n	66cc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    66e6:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    66e8:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    66ea:	str	r3, [r4, #28]
    66ec:	b.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66ee:	ldr	r1, [r4, #28]
    66f0:	mov	r0, r4
    66f2:	bl	654e <FatFile::seekSet(unsigned long)>
    66f6:	cmp	r0, #0
    66f8:	bne.n	66ca <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    66fa:	b.n	66de <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

000066fc <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6700:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    6702:	ldrb	r2, [r0, #0]
    6704:	sub	sp, #20
    6706:	mov	r7, r0
    6708:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    670a:	cmp	r2, #0
    670c:	bne.n	6794 <FatFile::openNext(FatFile*, int)+0x98>
    670e:	ldrb	r2, [r1, #0]
    6710:	tst.w	r2, #112	; 0x70
    6714:	beq.n	6794 <FatFile::openNext(FatFile*, int)+0x98>
    6716:	ldr	r4, [r1, #20]
    6718:	ands.w	r4, r4, #31
    671c:	bne.n	6794 <FatFile::openNext(FatFile*, int)+0x98>
    671e:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    6720:	movs	r1, #0
    6722:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    6724:	ldr.w	r8, [r6, #20]
    6728:	str	r3, [sp, #12]
    672a:	bl	6510 <FatFile::readDirCache(bool)>
    if (!dir) {
    672e:	cbz	r0, 6794 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    6730:	ldrb	r1, [r0, #0]
    6732:	cbz	r1, 6794 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    6734:	cmp	r1, #46	; 0x2e
    6736:	ldr	r3, [sp, #12]
    6738:	beq.n	677e <FatFile::openNext(FatFile*, int)+0x82>
    673a:	cmp	r1, #229	; 0xe5
    673c:	beq.n	677e <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    673e:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    6740:	ands.w	ip, r2, #8
    6744:	bne.n	6782 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    6746:	cbz	r4, 676a <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6748:	subs	r1, r0, #1
    674a:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    674e:	mov.w	r2, ip, lsl #7
    6752:	ldrb.w	r0, [r1, #1]!
    6756:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    675a:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    675c:	uxtab	r2, r0, r2
    6760:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    6764:	bne.n	674e <FatFile::openNext(FatFile*, int)+0x52>
    6766:	cmp	r9, ip
    6768:	bne.n	6794 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    676a:	ubfx	r2, r8, #5, #16
    676e:	mov	r1, r6
    6770:	mov	r0, r7
    6772:	str	r4, [sp, #0]
    6774:	bl	663a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    6778:	add	sp, #20
    677a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    677e:	movs	r4, #0
    6780:	b.n	6720 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    6782:	cmp	r2, #15
    6784:	bne.n	677e <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    6786:	lsls	r2, r1, #25
    6788:	bpl.n	6720 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    678a:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    678e:	ldrb.w	r9, [r0, #13]
    6792:	b.n	6720 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    6794:	movs	r0, #0
    6796:	b.n	6778 <FatFile::openNext(FatFile*, int)+0x7c>

00006798 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    6798:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    679a:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    679c:	mov	r4, r0
  if (!isOpen()) {
    679e:	cmp	r3, #0
    67a0:	beq.n	680e <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    67a2:	ldrsb.w	r3, [r0, #2]
    67a6:	cmp	r3, #0
    67a8:	bge.n	6802 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    67aa:	movs	r1, #1
    67ac:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    67b0:	mov	r5, r0
    67b2:	cbnz	r0, 67c2 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    67b4:	ldrb	r3, [r4, #1]
  return false;
    67b6:	movs	r0, #0
  m_error |= WRITE_ERROR;
    67b8:	orr.w	r3, r3, #1
    67bc:	strb	r3, [r4, #1]
}
    67be:	add	sp, #12
    67c0:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    67c2:	ldrb	r3, [r0, #0]
    67c4:	cmp	r3, #229	; 0xe5
    67c6:	beq.n	67b4 <FatFile::sync()+0x1c>
    if (isFile()) {
    67c8:	ldrb	r3, [r4, #0]
    67ca:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    67cc:	itt	mi
    67ce:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    67d0:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    67d2:	ldr	r3, [r4, #32]
    67d4:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    67d6:	lsrs	r3, r3, #16
    67d8:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    67da:	ldr	r3, [pc, #56]	; (6814 <FatFile::sync()+0x7c>)
    67dc:	ldr	r3, [r3, #0]
    67de:	cbz	r3, 67fa <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    67e0:	add.w	r2, sp, #3
    67e4:	add.w	r1, sp, #6
    67e8:	add	r0, sp, #4
    67ea:	blx	r3
      setLe16(dir->modifyDate, date);
    67ec:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    67f0:	strh	r3, [r5, #24]
    67f2:	strh	r3, [r5, #18]
    67f4:	ldrh.w	r3, [sp, #6]
    67f8:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    67fa:	ldrb	r3, [r4, #2]
    67fc:	and.w	r3, r3, #127	; 0x7f
    6800:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    6802:	ldr	r0, [r4, #8]
    6804:	bl	6240 <FatPartition::cacheSync()>
    6808:	cmp	r0, #0
    680a:	beq.n	67b4 <FatFile::sync()+0x1c>
    680c:	b.n	67be <FatFile::sync()+0x26>
    return true;
    680e:	movs	r0, #1
    6810:	b.n	67be <FatFile::sync()+0x26>
    6812:	nop
    6814:	.word	0x20026dfc

00006818 <FatFile::close()>:
bool FatFile::close() {
    6818:	push	{r4, lr}
    681a:	mov	r4, r0
  bool rtn = sync();
    681c:	bl	6798 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6820:	movs	r3, #0
    6822:	strb	r3, [r4, #0]
  m_flags = 0;
    6824:	strb	r3, [r4, #2]
}
    6826:	pop	{r4, pc}

00006828 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    6828:	push	{r4, r5, r6, r7, lr}
    682a:	mov	r7, r3
    682c:	sub	sp, #84	; 0x54
  FatFile() {}
    682e:	movs	r3, #0
    6830:	mov	r6, r0
    6832:	mov	r4, r1
    6834:	str	r2, [sp, #4]
    6836:	str	r3, [sp, #8]
    6838:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    683c:	ldrb	r3, [r0, #0]
    683e:	cbz	r3, 6846 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    6840:	movs	r0, #0
}
    6842:	add	sp, #84	; 0x54
    6844:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    6846:	ldrb	r3, [r1, #0]
    6848:	tst.w	r3, #112	; 0x70
    684c:	beq.n	6840 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    684e:	ldrb	r3, [r2, #0]
    6850:	cmp	r3, #47	; 0x2f
    6852:	bne.n	687a <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    6854:	ldr	r2, [sp, #4]
    6856:	ldrb	r3, [r2, #0]
    6858:	cmp	r3, #47	; 0x2f
    685a:	beq.n	6868 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    685c:	ldr	r1, [r4, #8]
    if (*path == 0) {
    685e:	cbnz	r3, 686e <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    6860:	mov	r0, r6
    6862:	bl	632a <FatFile::openRoot(FatVolume*)>
    6866:	b.n	6842 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    6868:	adds	r2, #1
    686a:	str	r2, [sp, #4]
    686c:	b.n	6854 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    686e:	add	r0, sp, #8
    6870:	bl	6210 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6874:	cmp	r0, #0
    6876:	beq.n	6840 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    6878:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    687a:	add	r3, sp, #4
    687c:	add	r2, sp, #44	; 0x2c
    687e:	ldr	r1, [sp, #4]
    6880:	mov	r0, r6
    6882:	bl	7820 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    6886:	cmp	r0, #0
    6888:	beq.n	6840 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    688a:	ldr	r3, [sp, #4]
    688c:	ldrb	r3, [r3, #0]
    688e:	cbz	r3, 68b8 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    6890:	movs	r3, #0
    6892:	add	r2, sp, #44	; 0x2c
    6894:	mov	r1, r4
    6896:	mov	r0, r6
    6898:	bl	759c <FatFile::open(FatFile*, FatLfn_t*, int)>
    689c:	cmp	r0, #0
    689e:	beq.n	6840 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    68a0:	mov	r5, r6
    68a2:	add	r4, sp, #8
    68a4:	ldmia	r5!, {r0, r1, r2, r3}
    68a6:	stmia	r4!, {r0, r1, r2, r3}
    68a8:	ldmia	r5!, {r0, r1, r2, r3}
    68aa:	stmia	r4!, {r0, r1, r2, r3}
    68ac:	ldr	r3, [r5, #0]
    close();
    68ae:	mov	r0, r6
    tmpDir = *this;
    68b0:	str	r3, [r4, #0]
    close();
    68b2:	bl	6818 <FatFile::close()>
  while (1) {
    68b6:	b.n	6878 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    68b8:	mov	r3, r7
    68ba:	add	r2, sp, #44	; 0x2c
    68bc:	mov	r1, r4
    68be:	mov	r0, r6
    68c0:	bl	759c <FatFile::open(FatFile*, FatLfn_t*, int)>
    68c4:	b.n	6842 <FatFile::open(FatFile*, char const*, int)+0x1a>

000068c6 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    68c6:	cbz	r1, 68d0 <FatFile::open(FatVolume*, char const*, int)+0xa>
    68c8:	add.w	r1, r1, #1096	; 0x448
    68cc:	b.w	6828 <FatFile::open(FatFile*, char const*, int)>
}
    68d0:	mov	r0, r1
    68d2:	bx	lr

000068d4 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    68d4:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    68d6:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    68d8:	sub	sp, #36	; 0x24
    68da:	mov	r4, r0
    68dc:	mov	r6, r1
  if (!parent->isDir()) {
    68de:	tst.w	r3, #112	; 0x70
    68e2:	bne.n	68ea <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    68e4:	movs	r0, #0
}
    68e6:	add	sp, #36	; 0x24
    68e8:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    68ea:	movw	r3, #2562	; 0xa02
    68ee:	bl	759c <FatFile::open(FatFile*, FatLfn_t*, int)>
    68f2:	cmp	r0, #0
    68f4:	beq.n	68e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    68f6:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    68f8:	movs	r5, #16
  if (!addDirCluster()) {
    68fa:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    68fc:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    68fe:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    6900:	bl	629c <FatFile::addDirCluster()>
    6904:	cmp	r0, #0
    6906:	beq.n	68e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    6908:	ldr	r3, [r4, #16]
    seekSet(0);
    690a:	movs	r1, #0
    690c:	mov	r0, r4
    690e:	str	r3, [r4, #32]
    6910:	bl	654e <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    6914:	mov	r0, r4
    6916:	bl	6798 <FatFile::sync()>
    691a:	cmp	r0, #0
    691c:	beq.n	68e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    691e:	mov	r1, r7
    6920:	mov	r0, r4
    6922:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6926:	cmp	r0, #0
    6928:	beq.n	68e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    692a:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    692c:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    692e:	mov	r3, r0
    6930:	add.w	ip, r0, #32
    6934:	mov	r5, r2
    6936:	ldr	r0, [r3, #0]
    6938:	adds	r3, #8
    693a:	ldr.w	r1, [r3, #-4]
    693e:	mov	r7, r2
    6940:	cmp	r3, ip
    6942:	stmia	r7!, {r0, r1}
    6944:	mov	r2, r7
    6946:	bne.n	6936 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    6948:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    694c:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    694e:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    6950:	movs	r2, #1
    dot.name[i] = ' ';
    6952:	str.w	r3, [sp, #1]
    6956:	adds	r0, #40	; 0x28
    6958:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    695c:	subs	r1, #2
    695e:	strh.w	r3, [sp, #9]
    6962:	ldrb.w	r3, [r0, #-34]
    6966:	lsls	r1, r3
    6968:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    696c:	add	r1, r3
    696e:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6972:	mov	r3, r0
    6974:	cmp	r0, #0
    6976:	beq.n	68e4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    6978:	movs	r2, #46	; 0x2e
    697a:	mov	ip, r5
    697c:	mov	r7, r0
    697e:	add.w	lr, sp, #32
    6982:	strb.w	r2, [sp]
    6986:	mov	r2, ip
    6988:	adds	r7, #8
    698a:	ldmia	r2!, {r0, r1}
    698c:	cmp	r2, lr
    698e:	str.w	r0, [r7, #-8]
    6992:	str.w	r1, [r7, #-4]
    6996:	mov	ip, r2
    6998:	bne.n	6986 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    699a:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    699c:	adds	r3, #32
  dot.name[1] = '.';
    699e:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    69a2:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    69a4:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    69a6:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    69a8:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    69ac:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    69ae:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    69b2:	mov	r5, r2
    69b4:	adds	r3, #8
    69b6:	ldmia	r5!, {r0, r1}
    69b8:	cmp	r5, r6
    69ba:	str.w	r0, [r3, #-8]
    69be:	str.w	r1, [r3, #-4]
    69c2:	mov	r2, r5
    69c4:	bne.n	69b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    69c6:	ldr	r0, [r4, #8]
    69c8:	bl	6240 <FatPartition::cacheSync()>
    69cc:	b.n	68e6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

000069ce <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    69ce:	push	{r4, r5, r6, r7, lr}
    69d0:	mov	r7, r3
    69d2:	sub	sp, #84	; 0x54
    69d4:	movs	r3, #0
    69d6:	mov	r6, r0
    69d8:	mov	r4, r1
    69da:	str	r2, [sp, #4]
    69dc:	strh.w	r3, [sp, #20]
  FatFile() {}
    69e0:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    69e2:	ldrb	r3, [r0, #0]
    69e4:	cbz	r3, 69ec <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    69e6:	movs	r0, #0
}
    69e8:	add	sp, #84	; 0x54
    69ea:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    69ec:	ldrb	r3, [r1, #0]
    69ee:	tst.w	r3, #112	; 0x70
    69f2:	beq.n	69e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    69f4:	ldrb	r3, [r2, #0]
    69f6:	cmp	r3, #47	; 0x2f
    69f8:	bne.n	6a10 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    69fa:	ldr	r2, [sp, #4]
    69fc:	ldrb	r3, [r2, #0]
    69fe:	cmp	r3, #47	; 0x2f
    6a00:	beq.n	6a4c <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    6a02:	ldr	r1, [r4, #8]
    6a04:	add	r0, sp, #44	; 0x2c
    6a06:	bl	6210 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6a0a:	cmp	r0, #0
    6a0c:	beq.n	69e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    6a0e:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    6a10:	add	r3, sp, #4
    6a12:	add	r2, sp, #8
    6a14:	ldr	r1, [sp, #4]
    6a16:	mov	r0, r6
    6a18:	bl	7820 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    6a1c:	cmp	r0, #0
    6a1e:	beq.n	69e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    6a20:	ldr	r3, [sp, #4]
    6a22:	ldrb	r3, [r3, #0]
    6a24:	cbz	r3, 6a66 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    6a26:	movs	r3, #0
    6a28:	add	r2, sp, #8
    6a2a:	mov	r1, r4
    6a2c:	mov	r0, r6
    6a2e:	bl	759c <FatFile::open(FatFile*, FatLfn_t*, int)>
    6a32:	cbz	r0, 6a52 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    6a34:	mov	r5, r6
    6a36:	add	r4, sp, #44	; 0x2c
    6a38:	ldmia	r5!, {r0, r1, r2, r3}
    6a3a:	stmia	r4!, {r0, r1, r2, r3}
    6a3c:	ldmia	r5!, {r0, r1, r2, r3}
    6a3e:	stmia	r4!, {r0, r1, r2, r3}
    6a40:	ldr	r3, [r5, #0]
    close();
    6a42:	mov	r0, r6
    tmpDir = *this;
    6a44:	str	r3, [r4, #0]
    close();
    6a46:	bl	6818 <FatFile::close()>
  while (1) {
    6a4a:	b.n	6a0e <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    6a4c:	adds	r2, #1
    6a4e:	str	r2, [sp, #4]
    6a50:	b.n	69fa <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    6a52:	cmp	r7, #0
    6a54:	beq.n	69e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    6a56:	add	r2, sp, #8
    6a58:	mov	r1, r4
    6a5a:	mov	r0, r6
    6a5c:	bl	68d4 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    6a60:	cmp	r0, #0
    6a62:	bne.n	6a34 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    6a64:	b.n	69e6 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    6a66:	add	r2, sp, #8
    6a68:	mov	r1, r4
    6a6a:	mov	r0, r6
    6a6c:	bl	68d4 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    6a70:	b.n	69e8 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00006a72 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a72:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    6a76:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a78:	sub	sp, #108	; 0x6c
    6a7a:	mov.w	r9, #0
    6a7e:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    6a80:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a84:	mov	r7, r1
    6a86:	mov	r8, r2
    6a88:	str.w	r9, [sp, #32]
    6a8c:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    6a90:	bne.n	6a9a <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    6a92:	movs	r0, #0
}
    6a94:	add	sp, #108	; 0x6c
    6a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    6a9a:	ldr	r2, [r0, #8]
    6a9c:	ldr	r3, [r1, #8]
    6a9e:	cmp	r2, r3
    6aa0:	bne.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    6aa2:	mov	r6, r4
  sync();
    6aa4:	bl	6798 <FatFile::sync()>
  oldFile = *this;
    6aa8:	add	r5, sp, #68	; 0x44
    6aaa:	ldmia	r6!, {r0, r1, r2, r3}
    6aac:	stmia	r5!, {r0, r1, r2, r3}
    6aae:	ldmia	r6!, {r0, r1, r2, r3}
    6ab0:	stmia	r5!, {r0, r1, r2, r3}
    6ab2:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6ab4:	mov	r1, r9
    6ab6:	mov	r0, r4
  oldFile = *this;
    6ab8:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6aba:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6abe:	cmp	r0, #0
    6ac0:	beq.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    6ac2:	mov	r2, sp
    6ac4:	mov	r3, r0
    6ac6:	add.w	ip, r0, #32
    6aca:	mov	r5, r2
    6acc:	ldr	r0, [r3, #0]
    6ace:	adds	r3, #8
    6ad0:	ldr.w	r1, [r3, #-4]
    6ad4:	mov	r6, r2
    6ad6:	cmp	r3, ip
    6ad8:	stmia	r6!, {r0, r1}
    6ada:	mov	r2, r6
    6adc:	bne.n	6acc <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    6ade:	ldrb	r3, [r4, #0]
    6ae0:	add	r6, sp, #32
    6ae2:	ands.w	r3, r3, #8
    6ae6:	beq.n	6afe <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6ae8:	movw	r3, #2561	; 0xa01
    6aec:	mov	r2, r8
    6aee:	mov	r1, r7
    6af0:	mov	r0, r6
    6af2:	bl	6828 <FatFile::open(FatFile*, char const*, int)>
    6af6:	cmp	r0, #0
    6af8:	beq.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    6afa:	movs	r7, #0
    6afc:	b.n	6b0e <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    6afe:	mov	r2, r8
    6b00:	mov	r1, r7
    6b02:	mov	r0, r6
    6b04:	bl	69ce <FatFile::mkdir(FatFile*, char const*, bool)>
    6b08:	cmp	r0, #0
    6b0a:	beq.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    6b0c:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    6b0e:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6b10:	movs	r1, #1
    6b12:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    6b14:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    6b16:	ldrh.w	r3, [sp, #36]	; 0x24
    6b1a:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    6b1c:	ldrb.w	r3, [sp, #35]	; 0x23
    6b20:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    6b22:	ldr	r3, [sp, #44]	; 0x2c
    6b24:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    6b26:	movs	r3, #0
    6b28:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    6b2c:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6b30:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6b34:	cmp	r0, #0
    6b36:	beq.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    6b38:	add.w	r3, sp, #13
    6b3c:	add.w	r2, r0, #13
    6b40:	add.w	r1, sp, #29
    6b44:	ldr.w	ip, [r3], #4
    6b48:	cmp	r3, r1
    6b4a:	str.w	ip, [r2], #4
    6b4e:	bne.n	6b44 <FatFile::rename(FatFile*, char const*)+0xd2>
    6b50:	ldrh	r1, [r3, #0]
    6b52:	strh	r1, [r2, #0]
    6b54:	ldrb	r3, [r3, #2]
    6b56:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    6b58:	ldrb.w	r3, [sp, #11]
    6b5c:	strb	r3, [r0, #11]
  if (dirCluster) {
    6b5e:	cmp	r7, #0
    6b60:	beq.n	6bde <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6b62:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b64:	subs	r3, r7, #2
    6b66:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    6b68:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b6a:	ldr.w	r1, [r0, #-20]
    6b6e:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6b70:	movs	r2, #0
    6b72:	add	r1, r3
    6b74:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6b78:	cmp	r0, #0
    6b7a:	beq.n	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    6b7c:	add.w	r2, r0, #32
    6b80:	mov	lr, r5
    6b82:	add.w	r3, r0, #64	; 0x40
    6b86:	ldr	r0, [r2, #0]
    6b88:	adds	r2, #8
    6b8a:	ldr.w	r1, [r2, #-4]
    6b8e:	mov	ip, lr
    6b90:	cmp	r2, r3
    6b92:	stmia.w	ip!, {r0, r1}
    6b96:	mov	lr, ip
    6b98:	bne.n	6b86 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    6b9a:	mov	r1, r7
    6b9c:	ldr	r0, [r4, #8]
    6b9e:	bl	7022 <FatPartition::freeChain(unsigned long)>
    6ba2:	cmp	r0, #0
    6ba4:	beq.w	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6ba8:	ldr	r0, [r4, #8]
    6baa:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6bac:	ldr	r1, [r4, #32]
    6bae:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    6bb0:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6bb2:	subs	r1, #2
    6bb4:	lsls	r1, r3
    6bb6:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    6bba:	add	r1, r3
    6bbc:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6bc0:	cmp	r0, #0
    6bc2:	beq.w	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    6bc6:	add.w	r3, r0, #32
    6bca:	mov	r2, r5
    6bcc:	adds	r3, #8
    6bce:	ldmia	r2!, {r0, r1}
    6bd0:	cmp	r2, r6
    6bd2:	str.w	r0, [r3, #-8]
    6bd6:	str.w	r1, [r3, #-4]
    6bda:	mov	r5, r2
    6bdc:	bne.n	6bca <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    6bde:	movs	r3, #0
  if (!oldFile.remove()) {
    6be0:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6be2:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6be4:	movs	r3, #2
    6be6:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6bea:	movs	r3, #8
    6bec:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6bf0:	bl	78cc <FatFile::remove()>
    6bf4:	cmp	r0, #0
    6bf6:	beq.w	6a92 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    6bfa:	ldr	r0, [r4, #8]
    6bfc:	bl	6240 <FatPartition::cacheSync()>
    6c00:	b.n	6a94 <FatFile::rename(FatFile*, char const*)+0x22>
	...

00006c04 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6c04:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6c08:	ldrb	r3, [r0, #2]
    6c0a:	mov	r4, r0
    6c0c:	mov	r9, r1
    6c0e:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6c10:	lsls	r5, r3, #30
    6c12:	bpl.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6c14:	lsls	r1, r3, #28
    6c16:	bmi.n	6c40 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6c18:	ldr	r3, [r4, #20]
    6c1a:	adds	r3, r3, r7
    6c1c:	bcs.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
    6c1e:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c20:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6c24:	ldr	r3, [r4, #20]
  while (nToWrite) {
    6c26:	cmp.w	r8, #0
    6c2a:	bne.n	6c56 <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6c2c:	ldr	r2, [r4, #28]
    6c2e:	cmp	r2, r3
    6c30:	bcs.w	6d92 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6c34:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c36:	ldrb	r3, [r4, #2]
    6c38:	orn	r3, r3, #127	; 0x7f
    6c3c:	strb	r3, [r4, #2]
    6c3e:	b.n	6d9c <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    6c40:	ldr	r1, [r0, #28]
    6c42:	bl	654e <FatFile::seekSet(unsigned long)>
    6c46:	cmp	r0, #0
    6c48:	bne.n	6c18 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6c4a:	ldrb	r3, [r4, #1]
  return 0;
    6c4c:	movs	r7, #0
  m_error |= WRITE_ERROR;
    6c4e:	orr.w	r3, r3, #1
    6c52:	strb	r3, [r4, #1]
  return 0;
    6c54:	b.n	6d9c <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6c56:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6c58:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    6c5c:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    6c5e:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6c60:	ands.w	r6, r6, r3, lsr #9
    6c64:	bne.n	6c7c <FatFile::write(void const*, unsigned int)+0x78>
    6c66:	cbnz	r5, 6c7c <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    6c68:	cmp	r1, #0
    6c6a:	beq.n	6ce4 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    6c6c:	ldrb	r2, [r4, #2]
    6c6e:	lsls	r2, r2, #25
    6c70:	bpl.n	6ccc <FatFile::write(void const*, unsigned int)+0xc8>
    6c72:	ldr	r2, [r4, #28]
    6c74:	cmp	r2, r3
    6c76:	bls.n	6ccc <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    6c78:	adds	r1, #1
    6c7a:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6c7c:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6c80:	ldr	r1, [r4, #16]
    6c82:	ldrb.w	r3, [ip, #6]
    6c86:	subs	r1, #2
    6c88:	lsls	r1, r3
    6c8a:	ldr.w	r3, [ip, #20]
    6c8e:	add	r1, r3
                      + sectorOfCluster;
    6c90:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6c92:	cmp	r5, #0
    6c94:	bne.n	6cfc <FatFile::write(void const*, unsigned int)+0xf8>
    6c96:	cmp.w	r8, #512	; 0x200
    6c9a:	bcc.n	6cfc <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6c9c:	cmp.w	r8, #1024	; 0x400
    6ca0:	ldr.w	r2, [ip, #52]	; 0x34
    6ca4:	ldr.w	r0, [ip, #44]	; 0x2c
    6ca8:	bcs.n	6d5c <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    6caa:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    6cac:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    6cae:	ittt	eq
    6cb0:	moveq.w	r3, #4294967295
    m_status = 0;
    6cb4:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6cb8:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    6cbc:	ldr	r3, [r0, #0]
    6cbe:	ldr	r3, [r3, #36]	; 0x24
    6cc0:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6cc2:	cmp	r0, #0
    6cc4:	beq.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    6cc6:	mov.w	r6, #512	; 0x200
    6cca:	b.n	6d46 <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6ccc:	mov	r2, sl
    6cce:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6cd2:	cmp	r0, #0
    6cd4:	blt.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    6cd6:	bne.n	6c7c <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    6cd8:	mov	r0, r4
    6cda:	bl	6266 <FatFile::addCluster()>
    6cde:	cmp	r0, #0
    6ce0:	bne.n	6c7c <FatFile::write(void const*, unsigned int)+0x78>
    6ce2:	b.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    6ce4:	ldr	r3, [r4, #32]
    6ce6:	cbnz	r3, 6cf8 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    6ce8:	mov	r0, r4
    6cea:	bl	6266 <FatFile::addCluster()>
    6cee:	cmp	r0, #0
    6cf0:	beq.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    6cf2:	ldr	r3, [r4, #16]
    6cf4:	str	r3, [r4, #32]
    6cf6:	b.n	6c7c <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    6cf8:	str	r3, [r4, #16]
    6cfa:	b.n	6c7c <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    6cfc:	rsb	r6, r5, #512	; 0x200
    6d00:	cmp	r6, r8
    6d02:	it	cs
    6d04:	movcs	r6, r8
      if (sectorOffset == 0 &&
    6d06:	cbnz	r5, 6d54 <FatFile::write(void const*, unsigned int)+0x150>
    6d08:	ldr	r2, [r4, #20]
    6d0a:	ldr	r3, [r4, #28]
    6d0c:	cmp	r2, r3
    6d0e:	bcs.n	6d58 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6d10:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6d12:	tst.w	r3, #32
    6d16:	ite	eq
    6d18:	moveq	r2, #1
    6d1a:	movne	r2, #5
    return m_cache.prepare(sector, options);
    6d1c:	add.w	r0, ip, #40	; 0x28
    6d20:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6d24:	cmp	r0, #0
    6d26:	beq.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    6d28:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d2a:	add	r5, r6
      memcpy(dst, src, n);
    6d2c:	mov	r2, r6
    6d2e:	mov	r1, r9
    6d30:	bl	9488 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d34:	cmp.w	r5, #512	; 0x200
    6d38:	ldr	r0, [r4, #8]
    6d3a:	bne.n	6d46 <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    6d3c:	adds	r0, #40	; 0x28
    6d3e:	bl	493c <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6d42:	cmp	r0, #0
    6d44:	beq.n	6c4a <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    6d46:	ldr	r3, [r4, #20]
    src += n;
    6d48:	add	r9, r6
    nToWrite -= n;
    6d4a:	sub.w	r8, r8, r6
    m_curPosition += n;
    6d4e:	add	r3, r6
    6d50:	str	r3, [r4, #20]
    nToWrite -= n;
    6d52:	b.n	6c24 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6d54:	movs	r2, #1
    6d56:	b.n	6d1c <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6d58:	movs	r2, #5
    6d5a:	b.n	6d1c <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6d5c:	ldrb.w	r3, [ip, #4]
    6d60:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6d62:	mov.w	r6, r8, lsr #9
    6d66:	cmp	r3, r6
    6d68:	it	cs
    6d6a:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    6d6c:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    6d6e:	mov.w	r6, r3, lsl #9
    6d72:	bhi.n	6d88 <FatFile::write(void const*, unsigned int)+0x184>
    6d74:	add.w	lr, r1, r3
    6d78:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    6d7a:	ittt	hi
    6d7c:	movhi.w	r2, #4294967295
    m_status = 0;
    6d80:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6d84:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    6d88:	ldr	r2, [r0, #0]
    6d8a:	ldr	r5, [r2, #40]	; 0x28
    6d8c:	mov	r2, r9
    6d8e:	blx	r5
    6d90:	b.n	6d42 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    6d92:	ldr	r3, [pc, #16]	; (6da4 <FatFile::write(void const*, unsigned int)+0x1a0>)
    6d94:	ldr	r3, [r3, #0]
    6d96:	cmp	r3, #0
    6d98:	bne.w	6c36 <FatFile::write(void const*, unsigned int)+0x32>
}
    6d9c:	mov	r0, r7
    6d9e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6da2:	nop
    6da4:	.word	0x20026dfc

00006da8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    6da8:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    6daa:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    6dae:	push	{r4, r5, lr}
    6db0:	mov	r4, r3
    6db2:	it	cs
    6db4:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    6db8:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    6dbc:	cmp	r1, r5
    6dbe:	bcc.n	6dc6 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6dc0:	subs	r3, r3, r4
    6dc2:	str	r3, [r2, #0]
}
    6dc4:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    6dc6:	ldrh.w	r0, [r1], #2
    6dca:	cmp	r0, #0
    6dcc:	bne.n	6dbc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    6dce:	ldr	r0, [r2, #4]
    6dd0:	adds	r0, #1
    6dd2:	str	r0, [r2, #4]
    6dd4:	b.n	6dbc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00006dd6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    6dd6:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    6dd8:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    6dda:	push	{r4, r5, lr}
    6ddc:	mov	r4, r3
    6dde:	it	cs
    6de0:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    6de2:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    6de6:	cmp	r1, r5
    6de8:	bcc.n	6df0 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6dea:	subs	r3, r3, r4
    6dec:	str	r3, [r2, #0]
}
    6dee:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    6df0:	ldr.w	r0, [r1], #4
    6df4:	cmp	r0, #0
    6df6:	bne.n	6de6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    6df8:	ldr	r0, [r2, #4]
    6dfa:	adds	r0, #1
    6dfc:	str	r0, [r2, #4]
    6dfe:	b.n	6de6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00006e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e00:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    6e02:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6e06:	cmp	r3, #2
    6e08:	it	eq
    6e0a:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    6e0e:	b.w	498a <FsCache::prepare(unsigned long, unsigned char)>

00006e12 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6e12:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6e14:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e18:	mov	r6, r0
    6e1a:	mov	r4, r1
    6e1c:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    6e1e:	bhi.n	6e28 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    6e20:	mov.w	r0, #4294967295
}
    6e24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    6e28:	ldr	r3, [r0, #28]
    6e2a:	cmp	r3, r1
    6e2c:	bcc.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    6e2e:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    6e30:	cmp	r3, #32
    6e32:	bne.n	6e5a <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6e34:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e36:	movs	r2, #0
    6e38:	add.w	r1, r1, r4, lsr #7
    6e3c:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e40:	cmp	r0, #0
    6e42:	beq.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6e44:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    6e46:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6e4a:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    6e4c:	ldr	r2, [r6, #28]
    6e4e:	cmp	r2, r3
  return 1;
    6e50:	itet	cs
    6e52:	movcs	r0, #1
    return 0;
    6e54:	movcc	r0, #0
  *value = next;
    6e56:	strcs	r3, [r7, #0]
  return 1;
    6e58:	b.n	6e24 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    6e5a:	cmp	r3, #16
    6e5c:	bne.n	6e7a <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6e5e:	ubfx	r1, r1, #8, #8
    6e62:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e64:	movs	r2, #0
    6e66:	add	r1, r3
    6e68:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e6c:	cmp	r0, #0
    6e6e:	beq.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6e70:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    6e72:	and.w	r4, r4, #510	; 0x1fe
    6e76:	ldrh	r3, [r0, r4]
    6e78:	b.n	6e4c <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    6e7a:	cmp	r3, #12
    6e7c:	bne.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    6e7e:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6e82:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e84:	movs	r2, #0
    index += index >> 1;
    6e86:	uxtah	r8, r8, r1
    6e8a:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6e8e:	ubfx	r8, r8, #9, #7
    6e92:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e94:	mov	r1, r8
    6e96:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e9a:	cmp	r0, #0
    6e9c:	beq.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    6e9e:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    6ea2:	ldrb	r5, [r0, r3]
    index++;
    6ea4:	adds	r3, #1
    if (index == m_bytesPerSector) {
    6ea6:	cmp.w	r3, #512	; 0x200
    6eaa:	bne.n	6ebe <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    6eac:	movs	r2, #0
    6eae:	add.w	r1, r8, #1
    6eb2:	mov	r0, r6
    6eb4:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    6eb8:	cmp	r0, #0
    6eba:	beq.n	6e20 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    6ebc:	movs	r3, #0
    tmp |= pc[index] << 8;
    6ebe:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6ec0:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    6ec2:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6ec6:	ite	mi
    6ec8:	lsrmi	r3, r3, #4
    6eca:	ubfxpl	r3, r3, #0, #12
    6ece:	b.n	6e4c <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00006ed0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6ed0:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6ed2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ed6:	mov	r8, r0
    6ed8:	mov	r4, r1
    6eda:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    6edc:	bhi.n	6ee4 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    6ede:	movs	r0, #0
}
    6ee0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    6ee4:	ldr	r3, [r0, #28]
    6ee6:	cmp	r3, r1
    6ee8:	bcc.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    6eea:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    6eec:	cmp	r3, #32
    6eee:	bne.n	6f0c <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6ef0:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6ef2:	movs	r2, #1
    6ef4:	add.w	r1, r1, r4, lsr #7
    6ef8:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6efc:	cmp	r0, #0
    6efe:	beq.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6f00:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    6f02:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6f06:	str	r5, [r0, r4]
    return true;
    6f08:	movs	r0, #1
    6f0a:	b.n	6ee0 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    6f0c:	cmp	r3, #16
    6f0e:	bne.n	6f2c <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6f10:	ubfx	r1, r1, #8, #8
    6f14:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f16:	movs	r2, #1
    6f18:	add	r1, r3
    6f1a:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6f1e:	cmp	r0, #0
    6f20:	beq.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6f22:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    6f24:	and.w	r4, r4, #510	; 0x1fe
    6f28:	strh	r5, [r0, r4]
    return true;
    6f2a:	b.n	6f08 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    6f2c:	cmp	r3, #12
    6f2e:	bne.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    6f30:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6f34:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f36:	movs	r2, #1
    index += index >> 1;
    6f38:	uxtah	r7, r7, r1
    6f3c:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6f3e:	ubfx	r7, r7, #9, #7
    6f42:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f44:	mov	r1, r7
    6f46:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6f4a:	cmp	r0, #0
    6f4c:	beq.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    6f4e:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    6f52:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f56:	itt	ne
    6f58:	lslne	r2, r5, #4
    6f5a:	ldrbne	r1, [r0, r3]
    6f5c:	add.w	r6, r0, r3
    index++;
    6f60:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f64:	ittet	ne
    6f66:	andne.w	r2, r2, #240	; 0xf0
    6f6a:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    6f6e:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f70:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    6f72:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    6f76:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    6f78:	bne.n	6f8a <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f7a:	movs	r2, #1
    6f7c:	mov	r0, r8
    6f7e:	adds	r1, r7, r2
    6f80:	bl	6e00 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    6f84:	cmp	r0, #0
    6f86:	beq.n	6ede <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    6f88:	movs	r3, #0
    tmp = value >> 4;
    6f8a:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6f8e:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    6f90:	cbnz	r4, 6f9c <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6f92:	ldrb	r3, [r0, r3]
    6f94:	bic.w	r3, r3, #15
    6f98:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    6f9c:	strb	r5, [r2, #0]
    6f9e:	b.n	6f08 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00006fa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6fa0:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6fa4:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6fa6:	mov	r5, r0
    6fa8:	mov	r6, r1
    6faa:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6fac:	cmp	r4, r1
    6fae:	bcc.n	6fb4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    6fb0:	movs	r7, #1
    6fb2:	b.n	6fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6fb4:	mov	r4, r1
    setStart = false;
    6fb6:	movs	r7, #0
    find++;
    6fb8:	adds	r4, #1
    if (find > m_lastCluster) {
    6fba:	ldr	r3, [r5, #28]
    6fbc:	cmp	r3, r4
    6fbe:	bcs.n	6fc6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    6fc0:	cbnz	r7, 6ff4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    6fc2:	ldr	r4, [r5, #12]
    6fc4:	b.n	6fb0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    6fc6:	cmp	r6, r4
    6fc8:	beq.n	6ff4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    6fca:	add	r2, sp, #4
    6fcc:	mov	r1, r4
    6fce:	mov	r0, r5
    6fd0:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6fd4:	cmp	r0, #0
    6fd6:	blt.n	6ff4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    6fd8:	beq.n	6fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6fda:	ldr	r3, [sp, #4]
    6fdc:	cmp	r3, #0
    6fde:	bne.n	6fb8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    6fe0:	cbz	r7, 6fe4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    6fe2:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6fe4:	mvn.w	r2, #4026531840	; 0xf0000000
    6fe8:	mov	r1, r4
    6fea:	mov	r0, r5
    6fec:	bl	6ed0 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6ff0:	mov	r7, r0
    6ff2:	cbnz	r0, 6ffe <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    6ff4:	movs	r7, #0
}
    6ff6:	mov	r0, r7
    6ff8:	add	sp, #8
    6ffa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    6ffe:	cbnz	r6, 700c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7000:	ldr	r3, [r5, #36]	; 0x24
    7002:	cmp	r3, #0
    7004:	bge.n	701c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    7006:	str.w	r4, [r8]
  return true;
    700a:	b.n	6ff6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    700c:	mov	r2, r4
    700e:	mov	r1, r6
    7010:	mov	r0, r5
    7012:	bl	6ed0 <FatPartition::fatPut(unsigned long, unsigned long)>
    7016:	cmp	r0, #0
    7018:	bne.n	7000 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    701a:	b.n	6ff4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    701c:	subs	r3, #1
    701e:	str	r3, [r5, #36]	; 0x24
    7020:	b.n	7006 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00007022 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7022:	push	{r0, r1, r4, r5, r6, lr}
    7024:	mov	r5, r0
    7026:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7028:	add	r2, sp, #4
    702a:	mov	r1, r4
    702c:	mov	r0, r5
    702e:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7032:	subs	r6, r0, #0
    7034:	blt.n	7062 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7036:	movs	r2, #0
    7038:	mov	r1, r4
    703a:	mov	r0, r5
    703c:	bl	6ed0 <FatPartition::fatPut(unsigned long, unsigned long)>
    7040:	cbz	r0, 7062 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7042:	ldr	r3, [r5, #36]	; 0x24
    7044:	cmp	r3, #0
      m_freeClusterCount += change;
    7046:	itt	ge
    7048:	addge	r3, #1
    704a:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    704c:	ldr	r3, [r5, #12]
    704e:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7050:	itt	hi
    7052:	addhi.w	r4, r4, #4294967295
    7056:	strhi	r4, [r5, #12]
    cluster = next;
    7058:	ldr	r4, [sp, #4]
  } while (fg);
    705a:	cmp	r6, #0
    705c:	bne.n	7028 <FatPartition::freeChain(unsigned long)+0x6>
}
    705e:	add	sp, #8
    7060:	pop	{r4, r5, r6, pc}
  return false;
    7062:	movs	r0, #0
    7064:	b.n	705e <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007068 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7068:	push	{r4, r5, r6, r7, lr}
    706a:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    706c:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    706e:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7070:	cmp	r0, #0
    7072:	bge.n	70e6 <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7074:	ldrb	r3, [r4, #7]
    7076:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7078:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    707a:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    707c:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7080:	beq.n	70ea <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    7082:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7086:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7088:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    708a:	strd	r6, r5, [sp, #16]
    708e:	bmi.n	70ee <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7090:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    7092:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7094:	ldr	r0, [r4, #0]
    7096:	add	r6, sp, #16
    7098:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    709c:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    709e:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    70a2:	ldr	r1, [r4, #24]
    70a4:	ldr	r5, [r0, #0]
    70a6:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    70aa:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    70ae:	bne.n	7100 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    70b0:	str	r6, [sp, #4]
    70b2:	ldr	r6, [pc, #84]	; (7108 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    70b4:	str	r6, [sp, #0]
    70b6:	ldr	r5, [r5, #24]
    70b8:	blx	r5
    70ba:	cbz	r0, 70d0 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    70bc:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    70be:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    70c0:	b.n	70e6 <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    70c2:	add	r2, sp, #16
    70c4:	mov	r1, r7
    70c6:	mov	r0, r4
    70c8:	bl	6e12 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    70cc:	cmp	r0, #0
    70ce:	bge.n	70d6 <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    70d0:	mov.w	r0, #4294967295
    70d4:	b.n	70e6 <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    70d6:	beq.n	70de <FatPartition::freeClusterCount()+0x76>
    70d8:	ldr	r3, [sp, #16]
    70da:	cbnz	r3, 70de <FatPartition::freeClusterCount()+0x76>
        free++;
    70dc:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    70de:	adds	r7, #1
    70e0:	cmp	r7, r6
    70e2:	bcc.n	70c2 <FatPartition::freeClusterCount()+0x5a>
    return free;
    70e4:	mov	r0, r5
}
    70e6:	add	sp, #28
    70e8:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    70ea:	movs	r7, #2
    70ec:	b.n	70e0 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    70ee:	add.w	r0, r4, #568	; 0x238
    70f2:	str	r3, [sp, #12]
    70f4:	bl	493c <FsCache::sync()>
    70f8:	ldr	r3, [sp, #12]
    70fa:	cmp	r0, #0
    70fc:	bne.n	7090 <FatPartition::freeClusterCount()+0x28>
    70fe:	b.n	70d0 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7100:	str	r6, [sp, #4]
    7102:	ldr	r6, [pc, #8]	; (710c <FatPartition::freeClusterCount()+0xa4>)
    7104:	b.n	70b4 <FatPartition::freeClusterCount()+0x4c>
    7106:	nop
    7108:	.word	0x00006dd7
    710c:	.word	0x00006da9

00007110 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7110:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7112:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7114:	mov	r4, r0
  m_blockDev = dev;
    7116:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7118:	mov	r5, r2
  m_fatType = 0;
    711a:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    711c:	movs	r0, #1
  m_cache.init(dev);
    711e:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7122:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7124:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7126:	mov.w	r0, #4294967295
    m_status = 0;
    712a:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    712e:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7130:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7134:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7138:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    713c:	cbz	r2, 7172 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    713e:	cmp	r2, #4
    7140:	bls.n	7146 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7142:	movs	r0, #0
}
    7144:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7146:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    714a:	mov	r2, r3
    714c:	mov	r1, r3
    714e:	mov	r0, r6
    7150:	subs	r5, #1
    7152:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
    7156:	add.w	r3, r0, #446	; 0x1be
    715a:	lsls	r2, r5, #4
    715c:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7160:	cmp	r0, #0
    7162:	beq.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7164:	ldrb	r1, [r5, #4]
    7166:	cmp	r1, #0
    7168:	beq.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    716a:	ldrb	r3, [r3, r2]
    716c:	lsls	r3, r3, #25
    716e:	bne.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7170:	ldr	r5, [r5, #8]
    7172:	movs	r2, #0
    7174:	mov	r1, r5
    7176:	mov	r0, r6
    7178:	bl	498a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    717c:	cmp	r0, #0
    717e:	beq.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7180:	ldrh.w	r3, [r0, #11]
    7184:	cmp.w	r3, #512	; 0x200
    7188:	bne.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    718a:	ldrb	r3, [r0, #16]
    718c:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    718e:	subs	r3, #1
    7190:	cmp	r3, #1
    7192:	bhi.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7194:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7196:	movs	r6, #9
    7198:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    719a:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    719c:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    719e:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    71a0:	movs	r3, #1
    71a2:	cmp	r1, r3
    71a4:	bne.n	720e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    71a6:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    71a8:	ldrh	r3, [r0, #22]
    71aa:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    71ac:	cbnz	r3, 71b2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    71ae:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    71b0:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    71b2:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    71b4:	ldrh.w	r1, [r0, #17]
    71b8:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71ba:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    71bc:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    71be:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    71c0:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71c2:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    71c4:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71c8:	mla	r3, r6, r7, r3
    71cc:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    71ce:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    71d2:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    71d6:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    71d8:	cbnz	r1, 71dc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    71da:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    71dc:	subs	r5, r5, r3
    71de:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    71e0:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    71e2:	adds	r3, r5, #1
    71e4:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    71e6:	mov.w	r3, #4294967295
    71ea:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    71ec:	movw	r3, #4084	; 0xff4
    71f0:	cmp	r5, r3
    71f2:	bls.n	7220 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    71f4:	movw	r3, #65524	; 0xfff4
    71f8:	cmp	r5, r3
    71fa:	bls.n	7224 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    71fc:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    71fe:	str	r3, [r4, #32]
    7200:	movs	r3, #32
  return true;
    7202:	movs	r0, #1
    m_fatType = 12;
    7204:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7206:	str	r6, [r4, #48]	; 0x30
    7208:	str.w	r6, [r4, #576]	; 0x240
  return true;
    720c:	b.n	7144 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    720e:	subs	r6, #1
    7210:	bne.n	7216 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7212:	strb	r2, [r4, #6]
    7214:	b.n	7142 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7216:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7218:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    721a:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    721c:	uxtb	r3, r3
    721e:	b.n	71a2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7220:	movs	r3, #12
    7222:	b.n	7202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7224:	movs	r3, #16
    7226:	b.n	7202 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007228 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7228:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    722a:	add.w	r4, r0, #1096	; 0x448
    722e:	sub	sp, #40	; 0x28
  FatFile() {}
    7230:	movs	r3, #0
    7232:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7234:	add	r0, sp, #4
    7236:	mov	r1, r4
    7238:	str	r3, [sp, #4]
    723a:	bl	6828 <FatFile::open(FatFile*, char const*, int)>
    723e:	mov	r6, r0
    7240:	cbz	r0, 725e <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7242:	ldrb.w	r3, [sp, #4]
    7246:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    724a:	itett	ne
    724c:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    724e:	moveq	r6, r3
  m_vwd = dir;
    7250:	ldmiane	r5!, {r0, r1, r2, r3}
    7252:	stmiane	r4!, {r0, r1, r2, r3}
    7254:	itttt	ne
    7256:	ldmiane	r5!, {r0, r1, r2, r3}
    7258:	stmiane	r4!, {r0, r1, r2, r3}
    725a:	ldrne	r3, [r5, #0]
    725c:	strne	r3, [r4, #0]
}
    725e:	mov	r0, r6
    7260:	add	sp, #40	; 0x28
    7262:	pop	{r4, r5, r6, pc}

00007264 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7264:	subs	r1, r0, #1
    7266:	add.w	r3, r0, #10
    uint8_t sum = 0;
    726a:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    726c:	lsls	r2, r0, #7
    726e:	orr.w	r2, r2, r0, lsr #1
    7272:	ldrb.w	r0, [r1, #1]!
    7276:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    727a:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    727c:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    727e:	bne.n	726c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7280:	bx	lr

00007282 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7282:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7286:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7288:	sub	sp, #52	; 0x34
    728a:	mov	r6, r2
    728c:	mov	r7, r0
    728e:	mov	r9, r1
    7290:	mov	r8, r3
  FatFile dir = *this;
    7292:	add	r4, sp, #12
    7294:	ldmia	r5!, {r0, r1, r2, r3}
    7296:	stmia	r4!, {r0, r1, r2, r3}
    7298:	ldmia	r5!, {r0, r1, r2, r3}
    729a:	stmia	r4!, {r0, r1, r2, r3}
    729c:	ldr	r3, [r5, #0]
    729e:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    72a0:	movs	r4, #1
    next = begin;
    72a2:	ldr	r3, [r6, #0]
    72a4:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    72a6:	movs	r3, #0
    72a8:	strh	r3, [r6, #12]
    72aa:	cmp	r4, r8
    72ac:	bls.n	72b2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    72ae:	movs	r0, #1
    72b0:	b.n	72c4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    72b2:	sub.w	r1, r9, r4
    72b6:	add	r0, sp, #12
    72b8:	uxth	r1, r1
    72ba:	bl	605c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    72be:	mov	sl, r0
    72c0:	cbnz	r0, 72ca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    72c2:	movs	r0, #0
}
    72c4:	add	sp, #52	; 0x34
    72c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72ca:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    72cc:	uxtb	r2, r5
    72ce:	mov	r1, sl
    72d0:	mov	r0, r7
    72d2:	bl	6076 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    72d6:	ldrh	r3, [r6, #12]
    72d8:	mov	fp, r0
    72da:	cbnz	r3, 72ec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    72dc:	ldrd	r2, r3, [r6, #4]
    72e0:	cmp	r2, r3
    72e2:	bne.n	72ec <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    72e4:	clz	r0, r0
    72e8:	lsrs	r0, r0, #5
    72ea:	b.n	72c4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    72ec:	mov	r0, r6
    72ee:	bl	4a80 <FsName::get16()>
    72f2:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    72f4:	mov	r0, fp
    72f6:	bl	49d8 <toUpcase(unsigned short)>
    72fa:	ldr	r3, [sp, #4]
    72fc:	mov	fp, r0
    72fe:	mov	r0, r3
    7300:	bl	49d8 <toUpcase(unsigned short)>
    7304:	cmp	fp, r0
    7306:	bne.n	72c2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    7308:	adds	r5, #1
    730a:	cmp	r5, #13
    730c:	bne.n	72cc <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    730e:	adds	r4, #1
    7310:	uxtb	r4, r4
    7312:	b.n	72aa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00007314 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7314:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7318:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    731a:	sub	sp, #52	; 0x34
    731c:	mov	r4, r2
    731e:	mov	r9, r1
    7320:	mov	r7, r3
  FatFile dir = *this;
    7322:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7324:	mov.w	sl, #15
  FatFile dir = *this;
    7328:	ldmia	r5!, {r0, r1, r2, r3}
    732a:	stmia	r6!, {r0, r1, r2, r3}
    732c:	ldmia	r5!, {r0, r1, r2, r3}
    732e:	stmia	r6!, {r0, r1, r2, r3}
    7330:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7332:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7336:	movs	r5, #1
  FatFile dir = *this;
    7338:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    733a:	bl	7264 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    733e:	movs	r6, #0
    next = begin;
    7340:	ldr	r3, [r4, #0]
    7342:	mov	r8, r0
    7344:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    7346:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7348:	cmp	r5, r7
    734a:	bls.n	7354 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    734c:	movs	r0, #1

 fail:
  return false;
}
    734e:	add	sp, #52	; 0x34
    7350:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7354:	sub.w	r1, r9, r5
    7358:	add	r0, sp, #12
    735a:	uxth	r1, r1
    735c:	bl	605c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7360:	cmp	r0, #0
    7362:	beq.n	734e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    7364:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7366:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7368:	mov.w	r1, #0
    736c:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7370:	ldrb.w	r3, [r2, #40]	; 0x28
    7374:	orr.w	r3, r3, #1
    7378:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    737c:	ite	eq
    737e:	orreq.w	r3, r5, #64	; 0x40
    7382:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7384:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7388:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    738a:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    738c:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7390:	strh	r1, [r0, #26]
    return !ls && next == end;
    7392:	ldrh	r0, [r4, #12]
    7394:	cbnz	r0, 73c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    7396:	ldrd	r2, r3, [r4, #4]
    739a:	cmp	r2, r3
    739c:	bne.n	73c2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    739e:	cbz	r6, 73ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    73a0:	adds	r6, #1
    73a2:	movw	r0, #65535	; 0xffff
    73a6:	uxtb	r6, r6
  if (i < 5) {
    73a8:	cmp	r1, #4
    73aa:	uxtb	r3, r1
    73ac:	bhi.n	73d2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    73ae:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    73b2:	adds	r1, #1
    73b4:	add.w	fp, fp, #2
    73b8:	cmp	r1, #13
    73ba:	bne.n	7392 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    73bc:	adds	r5, #1
    73be:	uxtb	r5, r5
    73c0:	b.n	7348 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    73c2:	mov	r0, r4
    73c4:	str	r1, [sp, #4]
    73c6:	bl	4a80 <FsName::get16()>
    73ca:	ldr	r1, [sp, #4]
    73cc:	b.n	73a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    73ce:	movs	r6, #1
    73d0:	b.n	73a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    73d2:	cmp	r3, #10
    73d4:	ite	ls
    73d6:	strhls.w	r0, [fp, #3]
    73da:	strhhi.w	r0, [fp, #5]
}
    73de:	b.n	73b2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

000073e0 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    73e0:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    73e2:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    73e6:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    73ea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    73ee:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    73f0:	mov	r5, r0
    fname->sfn[k] = ' ';
    73f2:	str.w	r1, [r0, #22]
    73f6:	str	r1, [r2, #4]
    73f8:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    73fc:	ldrb	r0, [r3, #0]
    73fe:	subs	r0, #46	; 0x2e
    7400:	it	ne
    7402:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7404:	mov	r7, r3
    7406:	ldrb.w	r2, [r3], #1
    740a:	cmp	r2, #46	; 0x2e
    740c:	beq.n	7404 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    740e:	subs	r3, r6, #1
    7410:	cmp	r3, r7
    7412:	mov	lr, r3
    7414:	bls.n	741e <FatFile::makeSFN(FatLfn_t*)+0x3e>
    7416:	ldrb.w	r2, [r3], #-1
    741a:	cmp	r2, #46	; 0x2e
    741c:	bne.n	7410 <FatFile::makeSFN(FatLfn_t*)+0x30>
    741e:	movs	r2, #0
    7420:	mov.w	ip, #7
    7424:	mov.w	r9, #8
    7428:	mov	r1, r2
    742a:	mov	r8, r2
    742c:	b.n	7444 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    742e:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7430:	cmp	r3, #46	; 0x2e
    7432:	bne.n	7460 <FatFile::makeSFN(FatLfn_t*)+0x80>
    7434:	cmp	lr, r7
    7436:	bne.n	747c <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7438:	mov.w	ip, #10
      i = 8;    // Place for extension.
    743c:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    743e:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    7442:	adds	r7, #1
    7444:	cmp	r7, r6
    7446:	bcc.n	742e <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7448:	ldrb	r3, [r5, #22]
    744a:	cmp	r3, #32
    744c:	beq.n	7500 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    744e:	cmp	r0, #0
    7450:	beq.n	74ec <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7452:	tst.w	r8, r2
    7456:	it	ne
    7458:	movne	r2, #2
    745a:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    745c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7460:	cmp	r3, #34	; 0x22
    7462:	beq.n	747c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7464:	cmp	r3, #124	; 0x7c
    7466:	beq.n	747c <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7468:	sub.w	r4, r3, #91	; 0x5b
    746c:	cmp	r4, #2
    746e:	bls.n	747c <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7470:	sub.w	r4, r3, #42	; 0x2a
    7474:	cmp	r4, #5
    7476:	bhi.n	7486 <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7478:	cmp	r3, #45	; 0x2d
    747a:	beq.n	74a2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    747c:	cmp	r1, ip
    747e:	bhi.n	74a6 <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7480:	movs	r0, #0
        c = '_';
    7482:	movs	r3, #95	; 0x5f
    7484:	b.n	74c8 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    7486:	sub.w	r4, r3, #58	; 0x3a
    748a:	cmp	r4, #5
    748c:	bls.n	7496 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    748e:	sub.w	r4, r3, #33	; 0x21
    7492:	cmp	r4, #93	; 0x5d
    7494:	bls.n	74a2 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    7496:	and.w	r3, r3, #192	; 0xc0
    749a:	cmp	r3, #128	; 0x80
    749c:	bne.n	747c <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    749e:	movs	r0, #0
    74a0:	b.n	7442 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    74a2:	cmp	r1, ip
    74a4:	bls.n	74b6 <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    74a6:	cmp.w	ip, #10
    74aa:	beq.n	74e8 <FatFile::makeSFN(FatLfn_t*)+0x108>
    74ac:	cmp	lr, r7
    74ae:	bcc.n	74e8 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    74b0:	add.w	r7, lr, #4294967295
        continue;
    74b4:	b.n	749e <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    74b6:	sub.w	r4, r3, #97	; 0x61
    74ba:	cmp	r4, #25
    74bc:	bhi.n	74da <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    74be:	subs	r3, #32
        lc |= bit;
    74c0:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    74c4:	uxtb	r3, r3
        lc |= bit;
    74c6:	uxtb	r2, r2
      fname->sfn[i++] = c;
    74c8:	adds	r4, r1, #1
    74ca:	add	r1, r5
    74cc:	uxtb	r4, r4
    74ce:	strb	r3, [r1, #22]
      if (i < 7) {
    74d0:	cmp	r4, #6
    74d2:	bhi.n	74d6 <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    74d4:	strb	r4, [r5, #20]
    74d6:	mov	r1, r4
    74d8:	b.n	7442 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    74da:	sub.w	r4, r3, #65	; 0x41
    74de:	cmp	r4, #25
        uc |= bit;
    74e0:	it	ls
    74e2:	orrls.w	r8, r9, r8
    74e6:	b.n	74c8 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    74e8:	movs	r0, #0
    74ea:	b.n	7448 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    74ec:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    74ee:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    74f0:	movs	r1, #126	; 0x7e
    74f2:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    74f4:	strb	r2, [r5, #21]
  return true;
    74f6:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    74f8:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    74fa:	movs	r1, #49	; 0x31
    74fc:	strb	r1, [r3, #23]
    74fe:	b.n	745c <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    7500:	movs	r0, #0
    7502:	b.n	745c <FatFile::makeSFN(FatLfn_t*)+0x7c>

00007504 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7504:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7508:	mov	r7, r0
    750a:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    750c:	ldrb	r6, [r1, #20]
    750e:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    7510:	mov.w	sl, #0
	return systick_millis_count;
    7514:	ldr.w	r8, [pc, #128]	; 7598 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7518:	add.w	r9, r1, #22
    751c:	ldr.w	r3, [r8]
    7520:	cmp	r6, #3
    hex += millis();
    7522:	add	r3, sl
    7524:	it	cs
    7526:	movcs	r6, #3
    7528:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    752c:	adds	r3, r6, #4
    752e:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7530:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7534:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7536:	subs	r3, #1
      hex >>= 4;
    7538:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    753c:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    753e:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7540:	ite	ls
    7542:	addls	r2, #48	; 0x30
    7544:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7546:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7548:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    754a:	bne.n	7530 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    754c:	adds	r3, r5, r6
    754e:	movs	r2, #126	; 0x7e
    seekSet(0);
    7550:	movs	r1, #0
    7552:	mov	r0, r7
    7554:	strb	r2, [r3, #22]
    7556:	bl	654e <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    755a:	movs	r1, #1
    755c:	mov	r0, r7
    755e:	bl	6510 <FatFile::readDirCache(bool)>
      if (!dir) {
    7562:	mov	r1, r0
    7564:	cbnz	r0, 7572 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    7566:	ldrb	r0, [r7, #1]
    7568:	clz	r0, r0
    756c:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    756e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    7572:	ldrb	r3, [r0, #0]
    7574:	cbz	r3, 7594 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7576:	ldrb	r3, [r0, #11]
    7578:	lsls	r3, r3, #28
    757a:	bmi.n	755a <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    757c:	movs	r2, #11
    757e:	mov	r0, r9
    7580:	bl	d860 <memcmp>
    7584:	cmp	r0, #0
    7586:	bne.n	755a <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7588:	subs	r0, r4, #1
    758a:	ands.w	r4, r0, #255	; 0xff
    758e:	bne.n	751c <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    7590:	mov	r0, r4
 fail:
    7592:	b.n	756e <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    7594:	movs	r0, #1
    7596:	b.n	756e <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    7598:	.word	0x20027b40

0000759c <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    759c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    75a0:	vpush	{d8}
    75a4:	sub	sp, #44	; 0x2c
    75a6:	mov	r5, r1
    75a8:	mov	r7, r2
    75aa:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    75ac:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    75ae:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    75b0:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    75b2:	ldrb	r3, [r1, #0]
    75b4:	tst.w	r3, #112	; 0x70
    75b8:	bne.n	75c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    75ba:	movs	r0, #0
}
    75bc:	add	sp, #44	; 0x2c
    75be:	vpop	{d8}
    75c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    75c6:	ldr	r3, [sp, #28]
    75c8:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    75ca:	cmp	r3, #0
    75cc:	bne.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    75ce:	ldr	r3, [r2, #16]
    75d0:	movs	r2, #13
    seekSet(0);
    75d2:	movs	r1, #0
    75d4:	mov	r0, r5
    75d6:	adds	r3, #12
  uint8_t checksum = 0;
    75d8:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    75dc:	udiv	r3, r3, r2
    75e0:	uxtb	r3, r3
  uint8_t order = 0;
    75e2:	mov	r8, sl
  uint8_t freeFound = 0;
    75e4:	mov	r4, sl
  bool fnameFound = false;
    75e6:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    75e8:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    75ea:	ldrb	r3, [r7, #21]
    75ec:	lsls	r2, r3, #30
    75ee:	itett	ne
    75f0:	ldrne	r3, [sp, #24]
    75f2:	moveq	r3, #1
    75f4:	addne.w	r9, r3, #1
    75f8:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    75fc:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    75fe:	str	r3, [sp, #8]
    7600:	bl	654e <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7604:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    7608:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    760c:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7610:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    7612:	movs	r1, #0
    7614:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7616:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    761a:	bl	6510 <FatFile::readDirCache(bool)>
    if (!dir) {
    761e:	cmp	r0, #0
    7620:	bne.n	76e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    7622:	ldrb	r3, [r5, #1]
    7624:	cmp	r3, #0
    7626:	bne.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7628:	ldr	r3, [sp, #16]
    762a:	lsls	r2, r3, #22
    762c:	bpl.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    762e:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    7632:	subs	r3, #1
    7634:	cmp	r3, #1
    7636:	bhi.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    7638:	ldr	r3, [sp, #12]
    763a:	cmp	r4, #0
    763c:	it	eq
    763e:	moveq	r3, r6
    7640:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    7642:	ldr	r3, [sp, #8]
    7644:	cmp	r4, r3
    7646:	bcc.w	77ca <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    764a:	cmp.w	fp, #0
    764e:	bne.w	7800 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    7652:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7654:	mov	r2, r7
    7656:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    7658:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    765a:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    765c:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    7660:	uxtab	r6, r3, r6
    7664:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7666:	mov	r3, fp
    7668:	mov	r1, r6
    766a:	bl	7314 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    766e:	cmp	r0, #0
    7670:	beq.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    7672:	mov	r1, r6
    7674:	mov	r0, r5
    7676:	bl	605c <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    767a:	mov	r4, r0
    767c:	cmp	r0, #0
    767e:	beq.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    7680:	movs	r2, #32
    7682:	movs	r1, #0
    7684:	bl	9444 <memset>
  memcpy(dir->name, fname->sfn, 11);
    7688:	ldr.w	r3, [r7, #22]
    768c:	str	r3, [r4, #0]
    768e:	ldr.w	r3, [r7, #26]
    7692:	str	r3, [r4, #4]
    7694:	ldrh	r3, [r7, #30]
    7696:	strh	r3, [r4, #8]
    7698:	ldrb.w	r3, [r7, #32]
    769c:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    769e:	ldrb	r3, [r7, #21]
    76a0:	and.w	r3, r3, #24
    76a4:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    76a6:	ldr	r3, [pc, #372]	; (781c <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    76a8:	ldr	r3, [r3, #0]
    76aa:	cmp	r3, #0
    76ac:	beq.w	7810 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    76b0:	add.w	r2, sp, #35	; 0x23
    76b4:	add.w	r1, sp, #38	; 0x26
    76b8:	add	r0, sp, #36	; 0x24
    76ba:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    76bc:	ldrh.w	r3, [sp, #36]	; 0x24
    76c0:	strh	r3, [r4, #16]
    76c2:	ldrh.w	r3, [sp, #38]	; 0x26
    76c6:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    76c8:	ldrb.w	r3, [sp, #35]	; 0x23
    76cc:	strb	r3, [r4, #13]
    76ce:	ldr	r3, [sp, #20]
    76d0:	ldr	r2, [sp, #20]
    76d2:	ldrb.w	r3, [r3, #40]	; 0x28
    76d6:	orr.w	r3, r3, #1
    76da:	strb.w	r3, [r2, #40]	; 0x28
  }
    76de:	b.n	77b8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    76e0:	mov.w	fp, #1
    76e4:	b.n	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    76e6:	ldrb	r2, [r0, #0]
    76e8:	cmp	r2, #229	; 0xe5
    76ea:	beq.n	76ee <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    76ec:	cbnz	r2, 7710 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    76ee:	ldr	r3, [sp, #12]
    76f0:	cmp	r4, #0
    76f2:	it	eq
    76f4:	moveq	r3, r6
    76f6:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    76f8:	ldr	r3, [sp, #8]
    76fa:	cmp	r4, r3
        freeFound++;
    76fc:	itt	cc
    76fe:	addcc	r4, #1
    7700:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    7702:	cmp	r2, #0
    7704:	beq.n	7628 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7706:	cmp	r2, #229	; 0xe5
    7708:	bne.n	7718 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    770a:	mov.w	r9, #0
    770e:	b.n	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    7710:	ldr	r3, [sp, #8]
    7712:	cmp	r4, r3
    7714:	it	cc
    7716:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7718:	cmp	r2, #46	; 0x2e
    771a:	beq.n	770a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    771c:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    771e:	cmp	r1, #15
    7720:	bne.n	7776 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    7722:	cmp.w	r9, #0
    7726:	bne.n	7762 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    7728:	and.w	r8, r2, #31
        if (order != nameOrd ||
    772c:	ldr	r3, [sp, #24]
    772e:	cmp	r3, r8
    7730:	bne.w	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    7734:	ands.w	r9, r2, #64	; 0x40
    7738:	beq.w	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    773c:	ldrb.w	sl, [r0, #13]
    7740:	mov	r9, r3
      if (order == 1) {
    7742:	cmp.w	r8, #1
    7746:	bne.w	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    774a:	adds	r1, r6, #1
    774c:	mov	r3, r9
    774e:	mov	r2, r7
    7750:	mov	r0, r5
    7752:	uxth	r1, r1
    7754:	bl	7282 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    7758:	cmp	r0, #0
    775a:	it	eq
    775c:	moveq.w	r9, #0
    7760:	b.n	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    7762:	add.w	r8, r8, #4294967295
    7766:	uxtb.w	r8, r8
    776a:	cmp	r2, r8
    776c:	bne.n	770a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    776e:	ldrb	r2, [r0, #13]
    7770:	cmp	r2, sl
    7772:	beq.n	7742 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    7774:	b.n	770a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    7776:	lsls	r3, r1, #28
    7778:	bmi.n	770a <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    777a:	cmp.w	r9, #0
    777e:	beq.n	7796 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7780:	cmp.w	r8, #1
    7784:	bne.w	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    7788:	bl	7264 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    778c:	cmp	r0, sl
    778e:	bne.w	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    7792:	mov	fp, r9
    7794:	b.n	77b0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7796:	movs	r2, #11
    7798:	vmov	r1, s16
    779c:	bl	d860 <memcmp>
    77a0:	cmp	r0, #0
    77a2:	bne.w	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    77a6:	ldrb.w	fp, [r7, #21]
    77aa:	ands.w	fp, fp, #1
    77ae:	bne.n	76e0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    77b0:	ldr	r3, [sp, #16]
    77b2:	lsls	r1, r3, #20
    77b4:	bmi.w	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    77b8:	ldr	r3, [sp, #16]
    77ba:	mov	r2, r6
    77bc:	mov	r1, r5
    77be:	ldr	r0, [sp, #28]
    77c0:	str.w	fp, [sp]
    77c4:	bl	663a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    77c8:	b.n	75bc <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    77ca:	movs	r1, #0
    77cc:	mov	r0, r5
    77ce:	bl	6510 <FatFile::readDirCache(bool)>
    if (!dir) {
    77d2:	cbnz	r0, 77fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    77d4:	ldrb	r3, [r5, #1]
    77d6:	cmp	r3, #0
    77d8:	bne.w	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    77dc:	mov	r0, r5
    77de:	bl	629c <FatFile::addDirCluster()>
    77e2:	cmp	r0, #0
    77e4:	beq.w	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    77e8:	ldr	r3, [sp, #20]
    77ea:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    77ec:	add.w	r3, r4, r3, lsl #4
    77f0:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    77f2:	ldr	r3, [sp, #8]
    77f4:	cmp	r3, r4
    77f6:	bhi.n	77dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    77f8:	b.n	764a <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    77fa:	adds	r4, #1
    77fc:	uxtb	r4, r4
    77fe:	b.n	7642 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    7800:	mov	r1, r7
    7802:	mov	r0, r5
    7804:	bl	7504 <FatFile::makeUniqueSfn(FatLfn_t*)>
    7808:	cmp	r0, #0
    780a:	bne.w	7652 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    780e:	b.n	75ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    7810:	movw	r3, #22561	; 0x5821
    7814:	strh	r3, [r4, #16]
    7816:	strh	r3, [r4, #24]
    7818:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    781a:	b.n	76ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    781c:	.word	0x20026dfc

00007820 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7820:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7822:	mov	r4, r2
    7824:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    7826:	mov	r0, r1
    7828:	ldrb.w	r3, [r1], #1
    782c:	cmp	r3, #32
    782e:	beq.n	7826 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    7830:	movs	r5, #0
    7832:	ldr	r7, [pc, #148]	; (78c8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    7834:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    7836:	ldrb	r3, [r0, #0]
    7838:	cbnz	r3, 7888 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    783a:	ldr	r3, [r4, #16]
    783c:	subs	r3, #1
    783e:	cmp	r3, #254	; 0xfe
    7840:	bhi.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    7842:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    7844:	ldrb.w	r3, [r0], #1
    7848:	cmp	r3, #32
    784a:	beq.n	7842 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    784c:	cmp	r3, #47	; 0x2f
    784e:	beq.n	7842 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    7850:	mov	r0, r4
  *ptr = path;
    7852:	str	r2, [r6, #0]

 fail:
  return false;
}
    7854:	add	sp, #12
    7856:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    785a:	b.w	73e0 <FatFile::makeSFN(FatLfn_t*)>
    785e:	subs	r1, #34	; 0x22
    7860:	uxtb	r1, r1
    7862:	lsr.w	r1, r7, r1
    7866:	lsls	r2, r1, #31
    7868:	bpl.n	78c2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    786a:	movs	r0, #0
    786c:	add	sp, #12
    786e:	pop	{r4, r5, r6, r7, pc}
    7870:	cmp	r1, #92	; 0x5c
    7872:	beq.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    7874:	bhi.n	7882 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    7876:	subs	r1, #62	; 0x3e
    7878:	cmp	r1, #1
    787a:	bls.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    787c:	str	r5, [r4, #16]
      fname->end = path;
    787e:	str	r0, [r4, #8]
    7880:	b.n	7836 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    7882:	cmp	r1, #124	; 0x7c
    7884:	beq.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    7886:	b.n	787c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    7888:	cmp	r3, #47	; 0x2f
    788a:	beq.n	783a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    788c:	add	r2, sp, #4
    788e:	adds	r1, r0, #4
    7890:	bl	48b4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    7894:	cmp	r0, #0
    7896:	beq.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    7898:	ldr	r3, [sp, #4]
    789a:	cmp.w	r3, #65536	; 0x10000
    789e:	ite	cc
    78a0:	movcc	r2, #1
    78a2:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    78a4:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    78a6:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    78a8:	bhi.n	787c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    78aa:	cmp	r3, #60	; 0x3c
    78ac:	uxtb	r1, r3
    78ae:	bhi.n	7870 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    78b0:	cmp	r1, #33	; 0x21
    78b2:	bhi.n	785e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    78b4:	cmp	r1, #31
    78b6:	bls.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    78b8:	cmp	r3, #46	; 0x2e
    78ba:	beq.n	7836 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    78bc:	cmp	r3, #32
    78be:	beq.n	7836 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    78c0:	b.n	787c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    78c2:	cmp	r3, #46	; 0x2e
    78c4:	b.n	78be <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    78c6:	nop
    78c8:	.word	0x05002101

000078cc <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    78cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    78d0:	movs	r3, #0
    78d2:	sub	sp, #40	; 0x28
    78d4:	mov	r4, r0
    78d6:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    78d8:	ldrb	r3, [r0, #2]
    78da:	lsls	r2, r3, #30
    78dc:	bmi.n	78e6 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    78de:	movs	r0, #0
}
    78e0:	add	sp, #40	; 0x28
    78e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    78e6:	ldr	r1, [r0, #32]
    78e8:	cmp	r1, #0
    78ea:	bne.n	7978 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78ec:	movs	r1, #1
    78ee:	mov	r0, r4
    78f0:	bl	630c <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    78f4:	mov	r5, r0
    78f6:	cmp	r0, #0
    78f8:	beq.n	78de <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    78fa:	bl	7264 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    78fe:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    7900:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    7902:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    7904:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    7906:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    7908:	ldr	r0, [r4, #8]
  m_flags = 0;
    790a:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    790c:	bl	6240 <FatPartition::cacheSync()>
    7910:	cmp	r0, #0
    7912:	beq.n	78de <FatFile::remove()+0x12>
  if (!isLFN()) {
    7914:	ldrb	r3, [r4, #3]
    7916:	cmp	r3, #0
    7918:	beq.n	78e0 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    791a:	mov	r1, r4
    791c:	add	r0, sp, #4
    791e:	bl	6336 <FatFile::openCluster(FatFile*)>
    7922:	cmp	r0, #0
    7924:	beq.n	78de <FatFile::remove()+0x12>
    7926:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7928:	uxtb.w	r8, r5
    792c:	ldrb	r3, [r4, #3]
    792e:	cmp	r3, r8
    7930:	bcc.n	78de <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    7932:	ldrh	r1, [r4, #4]
    7934:	add	r0, sp, #4
    7936:	subs	r1, r1, r5
    7938:	uxth	r1, r1
    793a:	bl	605c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    793e:	cmp	r0, #0
    7940:	beq.n	78de <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7942:	ldrb	r3, [r0, #11]
    7944:	cmp	r3, #15
    7946:	bne.n	78de <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    7948:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    794a:	and.w	r3, r2, #31
    794e:	cmp	r3, r8
    7950:	bne.n	78de <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    7952:	ldrb	r3, [r0, #13]
    7954:	cmp	r3, r6
    7956:	bne.n	78de <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    7958:	strb	r7, [r0, #0]
    if (last) {
    795a:	adds	r5, #1
    m_vol->cacheDirty();
    795c:	ldr	r1, [r4, #8]
    if (last) {
    795e:	uxth	r5, r5
    7960:	ldrb.w	r3, [r1, #40]	; 0x28
    7964:	orr.w	r3, r3, #1
    7968:	strb.w	r3, [r1, #40]	; 0x28
    796c:	lsls	r3, r2, #25
    796e:	bpl.n	7928 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    7970:	ldr	r0, [r4, #8]
    7972:	bl	6240 <FatPartition::cacheSync()>
    7976:	b.n	78e0 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7978:	ldr	r0, [r0, #8]
    797a:	bl	7022 <FatPartition::freeChain(unsigned long)>
    797e:	cmp	r0, #0
    7980:	bne.n	78ec <FatFile::remove()+0x20>
    7982:	b.n	78de <FatFile::remove()+0x12>

00007984 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    7984:	push	{r4, lr}
    7986:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7988:	ldr	r0, [r0, #56]	; 0x38
    798a:	cbz	r0, 7998 <FsBaseFile::close()+0x14>
    798c:	bl	6818 <FatFile::close()>
    7990:	cbz	r0, 7998 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    7992:	movs	r3, #0
    7994:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    7996:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    7998:	ldr	r0, [r4, #60]	; 0x3c
    799a:	cbnz	r0, 79a0 <FsBaseFile::close()+0x1c>
  return false;
    799c:	movs	r0, #0
    799e:	b.n	7996 <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    79a0:	bl	4c5a <ExFatFile::close()>
    79a4:	cmp	r0, #0
    79a6:	beq.n	799c <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    79a8:	movs	r3, #0
    79aa:	str	r3, [r4, #60]	; 0x3c
    return true;
    79ac:	b.n	7996 <FsBaseFile::close()+0x12>

000079ae <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    79ae:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    79b0:	push	{r4, r5, r6, lr}
    79b2:	mov	r6, r0
    79b4:	mov	r5, r1
  if (this == &from) return *this;
    79b6:	beq.n	79e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    79b8:	bl	7984 <FsBaseFile::close()>
  if (from.m_fFile) {
    79bc:	ldr	r4, [r5, #56]	; 0x38
    79be:	cbz	r4, 79e4 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    79c0:	mov	r1, r6
    79c2:	movs	r0, #36	; 0x24
    79c4:	bl	7be0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    79c8:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    79ca:	mov	r4, r0
    79cc:	strh	r3, [r0, #0]
    79ce:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    79d0:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    79d2:	ldr	r5, [r5, #56]	; 0x38
    79d4:	ldmia	r5!, {r0, r1, r2, r3}
    79d6:	stmia	r4!, {r0, r1, r2, r3}
    79d8:	ldmia	r5!, {r0, r1, r2, r3}
    79da:	stmia	r4!, {r0, r1, r2, r3}
    79dc:	ldr	r3, [r5, #0]
    79de:	str	r3, [r4, #0]
}
    79e0:	mov	r0, r6
    79e2:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    79e4:	ldr	r3, [r5, #60]	; 0x3c
    79e6:	cmp	r3, #0
    79e8:	beq.n	79e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    79ea:	mov	r1, r6
    79ec:	movs	r0, #56	; 0x38
    79ee:	bl	7be0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    79f2:	strb.w	r4, [r0, #49]	; 0x31
    79f6:	strh	r4, [r0, #50]	; 0x32
    79f8:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    79fa:	ldr	r3, [r5, #60]	; 0x3c
    79fc:	add.w	r2, r3, #52	; 0x34
    7a00:	ldr.w	r1, [r3], #4
    7a04:	cmp	r3, r2
    7a06:	str.w	r1, [r0], #4
    7a0a:	bne.n	7a00 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    7a0c:	b.n	79e0 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00007a0e <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    7a0e:	push	{r0, r1, r4, r5, r6, lr}
    7a10:	mov	r4, r0
  if (!vol) {
    7a12:	mov	r5, r1
    7a14:	cbnz	r1, 7a1c <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    7a16:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7a18:	add	sp, #8
    7a1a:	pop	{r4, r5, r6, pc}
    7a1c:	strd	r2, r3, [sp]
  close();
    7a20:	bl	7984 <FsBaseFile::close()>
  if (vol->m_fVol) {
    7a24:	ldr.w	r6, [r5, #1152]	; 0x480
    7a28:	ldrd	r2, r3, [sp]
    7a2c:	cbz	r6, 7a54 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    7a2e:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    7a30:	mov	r1, r4
    7a32:	movs	r0, #36	; 0x24
    7a34:	bl	7be0 <operator new(unsigned int, unsigned long*)>
    7a38:	strh	r6, [r0, #0]
    7a3a:	strb	r6, [r0, #2]
    7a3c:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7a3e:	ldr.w	r1, [r5, #1152]	; 0x480
    7a42:	ldrd	r2, r3, [sp]
    7a46:	bl	68c6 <FatFile::open(FatVolume*, char const*, int)>
    7a4a:	cbz	r0, 7a50 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    7a4c:	movs	r0, #1
    7a4e:	b.n	7a18 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    7a50:	str	r0, [r4, #56]	; 0x38
    7a52:	b.n	7a18 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    7a54:	ldr.w	r1, [r5, #1156]	; 0x484
    7a58:	strd	r2, r3, [sp]
    7a5c:	cmp	r1, #0
    7a5e:	beq.n	7a16 <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    7a60:	mov	r1, r4
    7a62:	movs	r0, #56	; 0x38
    7a64:	bl	7be0 <operator new(unsigned int, unsigned long*)>
    7a68:	strb.w	r6, [r0, #49]	; 0x31
    7a6c:	strh	r6, [r0, #50]	; 0x32
    7a6e:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7a70:	ldr.w	r1, [r5, #1156]	; 0x484
    7a74:	ldrd	r2, r3, [sp]
    7a78:	bl	53ba <ExFatFile::open(ExFatVolume*, char const*, int)>
    7a7c:	cmp	r0, #0
    7a7e:	bne.n	7a4c <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    7a80:	str	r0, [r4, #60]	; 0x3c
    7a82:	b.n	7a18 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00007a84 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7a84:	push	{r0, r1, r4, r5, r6, lr}
    7a86:	mov	r5, r1
    7a88:	str	r2, [sp, #4]
    7a8a:	mov	r4, r0
  close();
    7a8c:	bl	7984 <FsBaseFile::close()>
  if (dir->m_fFile) {
    7a90:	ldr	r6, [r5, #56]	; 0x38
    7a92:	ldr	r2, [sp, #4]
    7a94:	cbz	r6, 7aba <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    7a96:	mov	r1, r4
    7a98:	movs	r0, #36	; 0x24
    7a9a:	bl	7be0 <operator new(unsigned int, unsigned long*)>
    7a9e:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7aa0:	ldr	r2, [sp, #4]
    7aa2:	strh	r1, [r0, #0]
    7aa4:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7aa6:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7aa8:	ldr	r1, [r5, #56]	; 0x38
    7aaa:	bl	66fc <FatFile::openNext(FatFile*, int)>
    7aae:	cbz	r0, 7ab6 <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    7ab0:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7ab2:	add	sp, #8
    7ab4:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    7ab6:	str	r0, [r4, #56]	; 0x38
    7ab8:	b.n	7ab2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    7aba:	ldr	r0, [r5, #60]	; 0x3c
    7abc:	str	r2, [sp, #4]
    7abe:	cmp	r0, #0
    7ac0:	beq.n	7ab2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    7ac2:	mov	r1, r4
    7ac4:	movs	r0, #56	; 0x38
    7ac6:	bl	7be0 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7aca:	ldr	r2, [sp, #4]
    7acc:	strb.w	r6, [r0, #49]	; 0x31
    7ad0:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7ad2:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7ad4:	ldr	r1, [r5, #60]	; 0x3c
    7ad6:	bl	53c8 <ExFatFile::openNext(ExFatFile*, int)>
    7ada:	cmp	r0, #0
    7adc:	bne.n	7ab0 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    7ade:	str	r0, [r4, #60]	; 0x3c
    7ae0:	b.n	7ab2 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00007ae4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7ae4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7ae8:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7aea:	mov	r4, r0
    7aec:	mov	r6, r3
  m_blockDev = blockDev;
    7aee:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    7af2:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    7af6:	mov	r1, r0
    7af8:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7afc:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    7afe:	bl	7be0 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7b02:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    7b04:	strb.w	r7, [r0, #1092]	; 0x444
    7b08:	mov	r5, r0
    7b0a:	strb.w	r7, [r0, #1145]	; 0x479
    7b0e:	strh.w	r7, [r0, #1146]	; 0x47a
    7b12:	str.w	r0, [r4, #1156]	; 0x484
    7b16:	ldr.w	r1, [r4, #1160]	; 0x488
    7b1a:	ldr.w	r8, [pc, #152]	; 7bb4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    7b1e:	bl	570c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7b22:	cbz	r0, 7b54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7b24:	add.w	r7, r5, #1096	; 0x448
    7b28:	mov	r0, r7
    7b2a:	bl	4c5a <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7b2e:	mov	r1, r5
    7b30:	mov	r0, r7
    7b32:	bl	4c6e <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7b36:	cbz	r0, 7b54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    7b38:	ldr	r3, [pc, #112]	; (7bac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    7b3a:	ldr	r2, [r3, #0]
    7b3c:	cbnz	r2, 7b40 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    7b3e:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    7b40:	cmp.w	r9, #0
    7b44:	bne.n	7b4c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    7b46:	ldr.w	r3, [r8]
    7b4a:	cbnz	r3, 7b50 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    7b4c:	str.w	r4, [r8]
  }
  return true;
    7b50:	movs	r0, #1
    7b52:	b.n	7ba6 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    7b54:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    7b56:	mov	r1, r4
    7b58:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    7b5c:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7b60:	bl	7be0 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    7b64:	movs	r3, #2
    7b66:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    7b68:	mov	r2, r6
    7b6a:	strb	r3, [r0, #8]
    7b6c:	mov	r5, r0
    7b6e:	strh.w	r7, [r0, #1096]	; 0x448
    7b72:	strb.w	r7, [r0, #1098]	; 0x44a
    7b76:	str.w	r0, [r4, #1152]	; 0x480
    7b7a:	ldr.w	r1, [r4, #1160]	; 0x488
    7b7e:	bl	7110 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7b82:	cbz	r0, 7b9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7b84:	add.w	r6, r5, #1096	; 0x448
    7b88:	mov	r0, r6
    7b8a:	bl	6818 <FatFile::close()>
    return m_vwd.openRoot(this);
    7b8e:	mov	r1, r5
    7b90:	mov	r0, r6
    7b92:	bl	632a <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7b96:	cbz	r0, 7b9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    7b98:	ldr	r3, [pc, #20]	; (7bb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    7b9a:	b.n	7b3a <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    7b9c:	movs	r0, #0
    7b9e:	str.w	r0, [r8]
  m_fVol = nullptr;
    7ba2:	str.w	r0, [r4, #1152]	; 0x480
}
    7ba6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7baa:	nop
    7bac:	.word	0x20026e00
    7bb0:	.word	0x20026e38
    7bb4:	.word	0x20026e34

00007bb8 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7bb8:	push	{r3, r4, r5, lr}
    7bba:	mov	r4, r0
    7bbc:	mov.w	r5, #1000	; 0x3e8
    7bc0:	movs	r0, #0
    7bc2:	strd	r0, r5, [r4, #4]
    7bc6:	strb	r0, [r4, #12]
    7bc8:	ldr	r5, [pc, #16]	; (7bdc <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    7bca:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7bce:	mov	r0, r4
    7bd0:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7bd4:	bl	7a0e <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7bd8:	mov	r0, r4
    7bda:	pop	{r3, r4, r5, pc}
    7bdc:	.word	0x20000548

00007be0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7be0:	mov	r0, r1
    7be2:	bx	lr

00007be4 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    7be4:	mov.w	r0, #4294967295
    7be8:	bx	lr

00007bea <SharedSpiCard::errorCode() const>:
  }
    7bea:	ldrb	r0, [r0, #17]
    7bec:	bx	lr

00007bee <SharedSpiCard::errorData() const>:
  }
    7bee:	ldrb	r0, [r0, #20]
    7bf0:	bx	lr

00007bf2 <SharedSpiCard::type() const>:
  }
    7bf2:	ldrb	r0, [r0, #21]
    7bf4:	bx	lr

00007bf6 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    7bf6:	movs	r0, #1
    7bf8:	bx	lr

00007bfa <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    7bfa:	ldrb	r0, [r0, #28]
    7bfc:	bx	lr

00007bfe <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    7bfe:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    7c00:	push	{r4}
  return readSectors(sector, dst, 1);
    7c02:	ldr	r4, [r3, #20]
    7c04:	movs	r3, #1
    7c06:	mov	ip, r4
}
    7c08:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    7c0c:	bx	ip

00007c0e <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7c0e:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    7c10:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7c12:	mov	r4, r0
    7c14:	mov	r5, r1
  if (!syncDevice()) {
    7c16:	ldr	r3, [r3, #32]
    7c18:	blx	r3
    7c1a:	cbz	r0, 7c1e <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    7c1c:	strb	r5, [r4, #28]
  return true;
}
    7c1e:	pop	{r3, r4, r5, pc}

00007c20 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c20:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c24:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c26:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c28:	mov	r4, r0
    7c2a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c2c:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c2e:	mov	r6, r2
    7c30:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c34:	bne.n	7c3c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    7c36:	ldr	r3, [r0, #24]
    7c38:	cmp	r3, r1
    7c3a:	beq.n	7c50 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    7c3c:	ldr	r3, [r4, #0]
    7c3e:	mov	r1, r5
    7c40:	mov	r0, r4
    7c42:	ldr	r3, [r3, #96]	; 0x60
    7c44:	blx	r3
    7c46:	cbnz	r0, 7c4e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    7c48:	movs	r0, #0
}
    7c4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    7c4e:	str	r5, [r4, #24]
    7c50:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    7c54:	cmp	r5, r8
    7c56:	bne.n	7c70 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    7c58:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7c5a:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    7c5c:	add	r3, r6
    7c5e:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7c60:	cmp	r0, #0
    7c62:	bne.n	7c4a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    7c64:	ldr	r3, [r4, #0]
    7c66:	mov	r0, r4
    7c68:	ldr	r3, [r3, #100]	; 0x64
}
    7c6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    7c6e:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    7c70:	mov	r1, r9
    7c72:	mov	r0, r5
    7c74:	blx	r7
    if (!writeData(src)) {
    7c76:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    7c78:	mov	r1, r0
    if (!writeData(src)) {
    7c7a:	mov	r0, r4
    7c7c:	ldr	r3, [r3, #92]	; 0x5c
    7c7e:	adds	r5, #1
    7c80:	blx	r3
    7c82:	cmp	r0, #0
    7c84:	bne.n	7c54 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    7c86:	b.n	7c48 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00007c88 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7c88:	bx	lr

00007c8a <SharedSpiCard::end()>:
    m_spiDriver.end();
    7c8a:	adds	r0, #4
    7c8c:	b.w	93c4 <SdSpiArduinoDriver::end()>

00007c90 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7c90:	push	{r4, lr}
    7c92:	mov	r4, r0
    7c94:	movs	r1, #32
    7c96:	bl	b7ac <operator delete(void*, unsigned int)>
    7c9a:	mov	r0, r4
    7c9c:	pop	{r4, pc}

00007c9e <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    7c9e:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7ca0:	ldr	r3, [r0, #0]
    7ca2:	mov	r1, sp
    7ca4:	ldr	r3, [r3, #76]	; 0x4c
    7ca6:	blx	r3
    7ca8:	cbz	r0, 7cf0 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7caa:	ldrb.w	r3, [sp]
    7cae:	ands.w	r3, r3, #192	; 0xc0
    7cb2:	bne.n	7cf6 <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7cb4:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7cb8:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7cbc:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7cc0:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7cc4:	lsls	r0, r0, #2
    7cc6:	orr.w	r0, r0, r3, lsl #10
    7cca:	ldrb.w	r3, [sp, #8]
    7cce:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7cd2:	ldrb.w	r3, [sp, #9]
    7cd6:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cda:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    7cdc:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cde:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7ce2:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ce6:	and.w	r2, r2, #15
    7cea:	add	r3, r2
    7cec:	subs	r3, #7
    7cee:	lsls	r0, r3
}
    7cf0:	add	sp, #20
    7cf2:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    7cf6:	cmp	r3, #64	; 0x40
    7cf8:	bne.n	7d18 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7cfa:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7cfe:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7d02:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7d04:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7d08:	add.w	r0, r0, r3, lsl #16
    7d0c:	ldrb.w	r3, [sp, #8]
    7d10:	add.w	r0, r0, r3, lsl #8
    7d14:	lsls	r0, r0, #10
    7d16:	b.n	7cf0 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7d18:	movs	r0, #0
    7d1a:	b.n	7cf0 <SharedSpiCard::sectorCount()+0x52>

00007d1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d20:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d22:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d24:	mov	r4, r0
    7d26:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d28:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d2a:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d2c:	bne.n	7d34 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    7d2e:	ldr	r3, [r0, #24]
    7d30:	cmp	r3, r1
    7d32:	beq.n	7d48 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    7d34:	ldr	r3, [r4, #0]
    7d36:	mov	r1, r5
    7d38:	mov	r0, r4
    7d3a:	ldr	r3, [r3, #96]	; 0x60
    7d3c:	blx	r3
    7d3e:	cbnz	r0, 7d46 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    7d40:	movs	r0, #0
}
    7d42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    7d46:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d48:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d4a:	cmp	r6, r5
    7d4c:	add.w	r1, r7, r5, lsl #9
    7d50:	bne.n	7d6a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    7d52:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d54:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    7d56:	add	r3, r6
    7d58:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d5a:	cmp	r0, #0
    7d5c:	bne.n	7d42 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    7d5e:	ldr	r3, [r4, #0]
    7d60:	mov	r0, r4
    7d62:	ldr	r3, [r3, #100]	; 0x64
}
    7d64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    7d68:	bx	r3
    if (!writeData(src)) {
    7d6a:	ldr	r3, [r4, #0]
    7d6c:	mov	r0, r4
    7d6e:	ldr	r3, [r3, #92]	; 0x5c
    7d70:	blx	r3
    7d72:	cmp	r0, #0
    7d74:	beq.n	7d40 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d76:	adds	r5, #1
    7d78:	b.n	7d4a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00007d7a <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    7d7a:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    7d7c:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    7d7e:	mov	r4, r0
  if (!m_spiActive) {
    7d80:	cbnz	r6, 7d9e <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    7d82:	adds	r5, r0, #4
    7d84:	mov	r0, r5
    7d86:	bl	9368 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    7d8a:	mov	r1, r6
    7d8c:	ldrb	r0, [r4, #16]
    7d8e:	bl	943e <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d92:	movs	r1, #255	; 0xff
    7d94:	mov	r0, r5
    7d96:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    7d9a:	movs	r3, #1
    7d9c:	strb	r3, [r4, #18]
}
    7d9e:	pop	{r4, r5, r6, pc}

00007da0 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    7da0:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    7da2:	push	{r0, r1, r4, lr}
    7da4:	mov	r4, r0
  if (m_spiActive) {
    7da6:	cbz	r3, 7dc4 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    7da8:	movs	r1, #1
    7daa:	ldrb	r0, [r0, #16]
    7dac:	bl	943e <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7db0:	adds	r0, r4, #4
    7db2:	movs	r1, #255	; 0xff
    7db4:	str	r0, [sp, #4]
    7db6:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7dba:	ldr	r0, [sp, #4]
    7dbc:	bl	9376 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7dc0:	movs	r3, #0
    7dc2:	strb	r3, [r4, #18]
}
    7dc4:	add	sp, #8
    7dc6:	pop	{r4, pc}

00007dc8 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7dc8:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    7dca:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    7dcc:	mov	r4, r0
  if (m_state == READ_STATE) {
    7dce:	cmp	r3, #1
    7dd0:	beq.n	7df4 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    7dd2:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    7dd4:	cbnz	r6, 7dda <SharedSpiCard::isBusy()+0x12>
    spiStart();
    7dd6:	bl	7d7a <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    7dda:	adds	r0, r4, #4
    7ddc:	bl	93ca <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7de0:	subs.w	r5, r0, #255	; 0xff
    7de4:	it	ne
    7de6:	movne	r5, #1
  if (!spiActive) {
    7de8:	cbnz	r6, 7df0 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    7dea:	mov	r0, r4
    7dec:	bl	7da0 <SharedSpiCard::spiStop()>
}
    7df0:	mov	r0, r5
    7df2:	pop	{r4, r5, r6, pc}
    return false;
    7df4:	movs	r5, #0
    7df6:	b.n	7df0 <SharedSpiCard::isBusy()+0x28>

00007df8 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7df8:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7dfa:	ldr	r7, [pc, #96]	; (7e5c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    7dfc:	mov	r4, r0
    7dfe:	adds	r6, r0, #4
    7e00:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    7e02:	add.w	r5, r5, #300	; 0x12c
    7e06:	uxth	r5, r5
    7e08:	mov	r0, r6
    7e0a:	strd	r1, r2, [sp]
    7e0e:	bl	93ca <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7e12:	cmp	r0, #255	; 0xff
    7e14:	strb	r0, [r4, #20]
    7e16:	ldrd	r1, r2, [sp]
    7e1a:	beq.n	7e3c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    7e1c:	cmp	r0, #254	; 0xfe
    7e1e:	bne.n	7e52 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    7e20:	mov	r0, r6
    7e22:	bl	93d4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7e26:	strb	r0, [r4, #20]
    7e28:	cbnz	r0, 7e56 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    7e2a:	mov	r0, r6
    7e2c:	bl	93ca <SdSpiArduinoDriver::receive()>
    7e30:	mov	r0, r6
    7e32:	bl	93ca <SdSpiArduinoDriver::receive()>
  return true;
    7e36:	movs	r0, #1
}
    7e38:	add	sp, #12
    7e3a:	pop	{r4, r5, r6, r7, pc}
    7e3c:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    7e3e:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7e40:	lsls	r3, r3, #16
    7e42:	bpl.n	7e08 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    7e44:	movs	r3, #29
  spiStop();
    7e46:	mov	r0, r4
    m_errorCode = code;
    7e48:	strb	r3, [r4, #17]
    7e4a:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    7e4e:	movs	r0, #0
    7e50:	b.n	7e38 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    7e52:	movs	r3, #24
    7e54:	b.n	7e46 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    7e56:	movs	r3, #37	; 0x25
    7e58:	b.n	7e46 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    7e5a:	nop
    7e5c:	.word	0x20027b40

00007e60 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    7e60:	mov.w	r2, #512	; 0x200
    7e64:	b.w	7df8 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00007e68 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    7e68:	push	{r4, r5, r6, lr}
    7e6a:	ldr	r6, [pc, #36]	; (7e90 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    7e6c:	adds	r5, r0, #4
    7e6e:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    7e70:	add	r1, r3
    7e72:	uxth	r4, r1
    7e74:	mov	r0, r5
    7e76:	bl	93ca <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7e7a:	cmp	r0, #255	; 0xff
    7e7c:	bne.n	7e82 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    7e7e:	movs	r0, #1
}
    7e80:	pop	{r4, r5, r6, pc}
    7e82:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    7e84:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7e86:	lsls	r3, r3, #16
    7e88:	bpl.n	7e74 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    7e8a:	movs	r0, #0
    7e8c:	b.n	7e80 <SharedSpiCard::waitReady(unsigned short)+0x18>
    7e8e:	nop
    7e90:	.word	0x20027b40

00007e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    7e94:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e96:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7e9a:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e9c:	mov	r4, r0
    7e9e:	str	r2, [sp, #4]
    7ea0:	mov	r5, r1
  if (!syncDevice()) {
    7ea2:	blx	r3
    7ea4:	cmp	r0, #0
    7ea6:	beq.n	7f1a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    7ea8:	ldrb	r3, [r4, #18]
    7eaa:	cbnz	r3, 7eb2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    7eac:	mov	r0, r4
    7eae:	bl	7d7a <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    7eb2:	cmp	r5, #12
    7eb4:	bne.n	7f08 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    7eb6:	adds	r6, r4, #4
    7eb8:	movs	r7, #3
    spiSend(pa[i]);
    7eba:	add.w	r8, sp, #4
    7ebe:	orr.w	r1, r5, #64	; 0x40
    7ec2:	mov	r0, r6
    7ec4:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    7ec8:	ldrb.w	r1, [r8, r7]
    7ecc:	mov	r0, r6
    7ece:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7ed2:	subs	r7, #1
    7ed4:	bcs.n	7ec8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ed6:	cmp	r5, #0
    7ed8:	mov	r0, r6
    return m_spiDriver.receive();
    7eda:	mov.w	r5, #10
    m_spiDriver.send(data);
    7ede:	ite	eq
    7ee0:	moveq	r1, #149	; 0x95
    7ee2:	movne	r1, #135	; 0x87
    7ee4:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7ee8:	mov	r0, r6
    7eea:	bl	93ca <SdSpiArduinoDriver::receive()>
    7eee:	mov	r0, r6
    7ef0:	bl	93ca <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7ef4:	lsls	r3, r0, #24
    m_status = spiReceive();
    7ef6:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    7ef8:	bpl.n	7f02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    7efa:	subs	r5, #1
    7efc:	uxth	r5, r5
    7efe:	cmp	r5, #0
    7f00:	bne.n	7eee <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    7f02:	add	sp, #8
    7f04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    7f08:	mov.w	r1, #300	; 0x12c
    7f0c:	mov	r0, r4
    7f0e:	bl	7e68 <SharedSpiCard::waitReady(unsigned short)>
    7f12:	cmp	r0, #0
    7f14:	bne.n	7eb6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    7f16:	cmp	r5, #0
    7f18:	beq.n	7eb6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    7f1a:	movs	r0, #255	; 0xff
    7f1c:	b.n	7f02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00007f1e <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f1e:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7f20:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f22:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7f24:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f26:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    7f28:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f2c:	cbz	r0, 7f3c <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    7f2e:	movs	r3, #18
  spiStop();
    7f30:	mov	r0, r4
    7f32:	strb	r3, [r4, #17]
    7f34:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    7f38:	movs	r0, #0
}
    7f3a:	pop	{r3, r4, r5, r6, r7, pc}
    7f3c:	adds	r6, r5, #4
    return m_spiDriver.receive();
    7f3e:	adds	r7, r4, #4
    7f40:	mov	r0, r7
    7f42:	bl	93ca <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7f46:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7f4a:	cmp	r6, r5
    7f4c:	bne.n	7f40 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    7f4e:	mov	r0, r4
    7f50:	bl	7da0 <SharedSpiCard::spiStop()>
    7f54:	movs	r0, #1
    7f56:	b.n	7f3a <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00007f58 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f58:	push	{r3, r4, r5, lr}
    7f5a:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    7f5c:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f5e:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    7f60:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f64:	cbz	r0, 7f74 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    7f66:	movs	r3, #27
    7f68:	strb	r3, [r4, #17]
  spiStop();
    7f6a:	mov	r0, r4
  return false;
    7f6c:	movs	r5, #0
  spiStop();
    7f6e:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    7f72:	b.n	7f8a <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    7f74:	mov	r1, r5
    7f76:	movs	r2, #16
    7f78:	mov	r0, r4
    7f7a:	bl	7df8 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7f7e:	mov	r5, r0
    7f80:	cmp	r0, #0
    7f82:	beq.n	7f6a <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    7f84:	mov	r0, r4
    7f86:	bl	7da0 <SharedSpiCard::spiStop()>
}
    7f8a:	mov	r0, r5
    7f8c:	pop	{r3, r4, r5, pc}

00007f8e <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    7f8e:	mov	r2, r1
    return readRegister(CMD9, csd);
    7f90:	movs	r1, #9
    7f92:	b.w	7f58 <SharedSpiCard::readRegister(unsigned char, void*)>

00007f96 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    7f96:	mov	r2, r1
    return readRegister(CMD10, cid);
    7f98:	movs	r1, #10
    7f9a:	b.w	7f58 <SharedSpiCard::readRegister(unsigned char, void*)>

00007f9e <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    7f9e:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7fa0:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    7fa2:	mov	r5, r1
    7fa4:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7fa6:	ldr	r3, [r3, #88]	; 0x58
    7fa8:	blx	r3
    7faa:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    7fac:	mov.w	r1, #18
    7fb0:	mov	r0, r4
    sector <<= 9;
    7fb2:	it	ne
    7fb4:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    7fb6:	mov	r2, r5
    7fb8:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fbc:	cbz	r0, 7fcc <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    7fbe:	movs	r3, #12
  spiStop();
    7fc0:	mov	r0, r4
    7fc2:	strb	r3, [r4, #17]
    7fc4:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    7fc8:	movs	r0, #0
}
    7fca:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    7fcc:	movs	r0, #1
    7fce:	strb	r0, [r4, #19]
  return true;
    7fd0:	b.n	7fca <SharedSpiCard::readStart(unsigned long)+0x2c>

00007fd2 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7fd2:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    7fd4:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    7fd6:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7fd8:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7fda:	mov	r2, r4
  m_state = IDLE_STATE;
    7fdc:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    7fde:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fe2:	cbz	r0, 7ff2 <SharedSpiCard::readStop()+0x20>
    7fe4:	movs	r3, #9
  spiStop();
    7fe6:	mov	r0, r5
    7fe8:	strb	r3, [r5, #17]
    7fea:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    7fee:	mov	r0, r4
}
    7ff0:	pop	{r3, r4, r5, pc}
  spiStop();
    7ff2:	mov	r0, r5
    7ff4:	bl	7da0 <SharedSpiCard::spiStop()>
  return true;
    7ff8:	movs	r0, #1
    7ffa:	b.n	7ff0 <SharedSpiCard::readStop()+0x1e>

00007ffc <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7ffc:	ldrb	r2, [r0, #19]
    7ffe:	cmp	r2, #2
    8000:	bne.n	8008 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8002:	ldr	r3, [r0, #0]
    8004:	ldr	r3, [r3, #100]	; 0x64
    8006:	bx	r3
  if (m_state == READ_STATE) {
    8008:	cmp	r2, #1
    800a:	bne.n	8010 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    800c:	b.w	7fd2 <SharedSpiCard::readStop()>
}
    8010:	movs	r0, #1
    8012:	bx	lr

00008014 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8014:	push	{r3, r4, r5, r6, r7, lr}
    8016:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8018:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    801a:	mov	r4, r0
    801c:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    801e:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8020:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8022:	bne.n	802a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8024:	ldr	r3, [r0, #24]
    8026:	cmp	r3, r1
    8028:	beq.n	803a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    802a:	mov	r1, r5
    802c:	mov	r0, r4
    802e:	bl	7f9e <SharedSpiCard::readStart(unsigned long)>
    8032:	cbnz	r0, 8038 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8034:	movs	r0, #0
}
    8036:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8038:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    803a:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    803c:	cmp	r5, r6
    803e:	add.w	r1, r7, r5, lsl #9
    8042:	bne.n	805a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8044:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8046:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8048:	add	r3, r5
    804a:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    804c:	cmp	r0, #0
    804e:	bne.n	8036 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8050:	mov	r0, r4
}
    8052:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8056:	b.w	7fd2 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    805a:	mov	r0, r4
    805c:	bl	7e60 <SharedSpiCard::readData(unsigned char*)>
    8060:	cmp	r0, #0
    8062:	beq.n	8034 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8064:	adds	r5, #1
    8066:	b.n	803c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008068 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8068:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    806c:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    806e:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8070:	mov	r4, r0
    8072:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8074:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8076:	mov	r7, r2
    8078:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    807c:	bne.n	8084 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    807e:	ldr	r3, [r0, #24]
    8080:	cmp	r3, r1
    8082:	beq.n	8096 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8084:	mov	r1, r5
    8086:	mov	r0, r4
    8088:	bl	7f9e <SharedSpiCard::readStart(unsigned long)>
    808c:	cbnz	r0, 8094 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    808e:	movs	r0, #0
}
    8090:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8094:	str	r5, [r4, #24]
    8096:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    809a:	cmp	r5, r8
    809c:	bne.n	80b4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    809e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    80a0:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    80a2:	add	r3, r6
    80a4:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    80a6:	cmp	r0, #0
    80a8:	bne.n	8090 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    80aa:	mov	r0, r4
}
    80ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    80b0:	b.w	7fd2 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    80b4:	mov	r1, r7
    80b6:	mov	r0, r4
    80b8:	bl	7e60 <SharedSpiCard::readData(unsigned char*)>
    80bc:	cmp	r0, #0
    80be:	beq.n	808e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    80c0:	mov	r0, r5
    80c2:	mov	r2, sl
    80c4:	mov	r1, r7
    80c6:	adds	r5, #1
    80c8:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    80ca:	b.n	809a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

000080cc <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    80cc:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    80ce:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    80d0:	mov	r5, r1
    80d2:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    80d4:	ldr	r3, [r3, #88]	; 0x58
    80d6:	blx	r3
    80d8:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    80da:	mov.w	r1, #25
    80de:	mov	r0, r4
    sector <<= 9;
    80e0:	it	ne
    80e2:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    80e4:	mov	r2, r5
    80e6:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    80ea:	cbz	r0, 80fa <SharedSpiCard::writeStart(unsigned long)+0x2e>
    80ec:	movs	r3, #14
  spiStop();
    80ee:	mov	r0, r4
    80f0:	strb	r3, [r4, #17]
    80f2:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    80f6:	movs	r0, #0
}
    80f8:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    80fa:	movs	r3, #2
  return true;
    80fc:	movs	r0, #1
  m_state = WRITE_STATE;
    80fe:	strb	r3, [r4, #19]
  return true;
    8100:	b.n	80f8 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008102 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8102:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8104:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8106:	mov	r6, r1
  if (!readCSD(&csd)) {
    8108:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    810a:	mov	r4, r0
  if (!readCSD(&csd)) {
    810c:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    810e:	mov	r5, r2
  if (!readCSD(&csd)) {
    8110:	blx	r3
    8112:	cbz	r0, 8136 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8114:	ldrb.w	r3, [sp, #10]
    8118:	lsls	r2, r3, #25
    811a:	bmi.n	8140 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    811c:	and.w	r3, r3, #63	; 0x3f
    8120:	ldrb.w	r2, [sp, #11]
    8124:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8126:	orr.w	r3, r3, r2, lsr #7
    812a:	adds	r2, r5, #1
    812c:	orrs	r2, r6
    812e:	tst	r3, r2
    8130:	beq.n	8140 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8132:	movs	r3, #39	; 0x27
    8134:	strb	r3, [r4, #17]
  spiStop();
    8136:	mov	r0, r4
  return false;
    8138:	movs	r5, #0
  spiStop();
    813a:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    813e:	b.n	818e <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8140:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8142:	movs	r1, #32
    8144:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8146:	cmp	r3, #3
    firstSector <<= 9;
    8148:	itt	ne
    814a:	lslne	r6, r6, #9
    lastSector <<= 9;
    814c:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    814e:	mov	r2, r6
    8150:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8154:	cbz	r0, 815a <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8156:	movs	r3, #38	; 0x26
    8158:	b.n	8134 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    815a:	mov	r2, r5
    815c:	movs	r1, #33	; 0x21
    815e:	mov	r0, r4
    8160:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8164:	mov	r2, r0
    8166:	cmp	r0, #0
    8168:	bne.n	8156 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    816a:	movs	r1, #38	; 0x26
    816c:	mov	r0, r4
    816e:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8172:	cmp	r0, #0
    8174:	bne.n	8156 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8176:	movw	r1, #10000	; 0x2710
    817a:	mov	r0, r4
    817c:	bl	7e68 <SharedSpiCard::waitReady(unsigned short)>
    8180:	mov	r5, r0
    8182:	cbnz	r0, 8188 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8184:	movs	r3, #40	; 0x28
    8186:	b.n	8134 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8188:	mov	r0, r4
    818a:	bl	7da0 <SharedSpiCard::spiStop()>
}
    818e:	mov	r0, r5
    8190:	add	sp, #16
    8192:	pop	{r4, r5, r6, pc}

00008194 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8194:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8196:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    819a:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    819c:	bl	7e68 <SharedSpiCard::waitReady(unsigned short)>
    81a0:	mov	r5, r0
    81a2:	cbnz	r0, 81b2 <SharedSpiCard::writeStop()+0x1e>
    81a4:	movs	r3, #30
  spiStop();
    81a6:	mov	r0, r4
    81a8:	strb	r3, [r4, #17]
    81aa:	bl	7da0 <SharedSpiCard::spiStop()>
}
    81ae:	mov	r0, r5
    81b0:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    81b2:	movs	r1, #253	; 0xfd
    81b4:	adds	r0, r4, #4
    81b6:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    81ba:	mov	r0, r4
    81bc:	bl	7da0 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    81c0:	movs	r3, #0
    81c2:	strb	r3, [r4, #19]
  return true;
    81c4:	b.n	81ae <SharedSpiCard::writeStop()+0x1a>

000081c6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    81c6:	push	{r0, r1, r2, r4, r5, lr}
    81c8:	mov	r5, r2
    81ca:	mov	r4, r0
    81cc:	adds	r0, #4
    81ce:	str	r0, [sp, #4]
    81d0:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    81d4:	mov.w	r2, #512	; 0x200
    81d8:	mov	r1, r5
    81da:	ldr	r0, [sp, #4]
    81dc:	bl	93fe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    81e0:	movs	r1, #255	; 0xff
    81e2:	ldr	r0, [sp, #4]
    81e4:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    81e8:	movs	r1, #255	; 0xff
    81ea:	ldr	r0, [sp, #4]
    81ec:	bl	93f6 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    81f0:	ldr	r0, [sp, #4]
    81f2:	bl	93ca <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    81f6:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    81f8:	and.w	r0, r0, #31
    81fc:	cmp	r0, #5
    81fe:	beq.n	8210 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8200:	movs	r3, #32
  spiStop();
    8202:	mov	r0, r4
    8204:	strb	r3, [r4, #17]
    8206:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    820a:	movs	r0, #0
}
    820c:	add	sp, #12
    820e:	pop	{r4, r5, pc}
  return true;
    8210:	movs	r0, #1
    8212:	b.n	820c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008214 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8214:	push	{r0, r1, r4, lr}
    8216:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8218:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    821c:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    821e:	bl	7e68 <SharedSpiCard::waitReady(unsigned short)>
    8222:	ldr	r2, [sp, #4]
    8224:	cbnz	r0, 8234 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8226:	movs	r3, #36	; 0x24
    8228:	strb	r3, [r4, #17]
  spiStop();
    822a:	mov	r0, r4
    822c:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    8230:	movs	r0, #0
    8232:	b.n	8240 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8234:	movs	r1, #252	; 0xfc
    8236:	mov	r0, r4
    8238:	bl	81c6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    823c:	cmp	r0, #0
    823e:	beq.n	822a <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8240:	add	sp, #8
    8242:	pop	{r4, pc}

00008244 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8244:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8246:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8248:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    824a:	mov	r5, r1
    824c:	mov	r4, r0
    824e:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8250:	blx	r3
    8252:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8254:	mov.w	r1, #24
    8258:	mov	r0, r4
    sector <<= 9;
    825a:	it	ne
    825c:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    825e:	mov	r2, r5
    8260:	bl	7e94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8264:	cbz	r0, 8274 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8266:	movs	r3, #13
    8268:	strb	r3, [r4, #17]
  spiStop();
    826a:	mov	r0, r4
  return false;
    826c:	movs	r5, #0
  spiStop();
    826e:	bl	7da0 <SharedSpiCard::spiStop()>
  return false;
    8272:	b.n	828a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    8274:	mov	r2, r6
    8276:	movs	r1, #254	; 0xfe
    8278:	mov	r0, r4
    827a:	bl	81c6 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    827e:	mov	r5, r0
    8280:	cmp	r0, #0
    8282:	beq.n	826a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    8284:	mov	r0, r4
    8286:	bl	7da0 <SharedSpiCard::spiStop()>
}
    828a:	mov	r0, r5
    828c:	pop	{r4, r5, r6, pc}

0000828e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    828e:	push	{r4}
  if (m_dedicatedSpi) {
    8290:	ldrb	r4, [r0, #28]
    8292:	cbz	r4, 82a2 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8294:	ldr	r3, [r0, #0]
    8296:	ldr	r4, [r3, #40]	; 0x28
    8298:	movs	r3, #1
    829a:	mov	ip, r4
}
    829c:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    82a0:	bx	ip
}
    82a2:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    82a6:	b.w	8244 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000082aa <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    82aa:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    82ae:	ldr	r5, [sp, #32]
    82b0:	mov	r6, r0
    82b2:	mov	r4, r1
    82b4:	mov	r7, r2
    82b6:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    82ba:	cmp	r4, r8
    82bc:	bne.n	82c4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    82be:	movs	r0, #1
  }
    82c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    82c4:	ldr	r3, [r6, #0]
    82c6:	mov	r2, r7
    82c8:	mov	r1, r4
    82ca:	mov	r0, r6
    82cc:	ldr	r3, [r3, #16]
    82ce:	add.w	r9, r4, #1
    82d2:	blx	r3
    82d4:	cmp	r0, #0
    82d6:	beq.n	82c0 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    82d8:	mov	r0, r4
    82da:	ldr	r2, [sp, #36]	; 0x24
    82dc:	mov	r1, r7
    82de:	mov	r4, r9
    82e0:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    82e2:	b.n	82ba <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

000082e4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    82e4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82e8:	mov	r5, r0
    82ea:	mov	r4, r1
    82ec:	mov	r7, r3
    82ee:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    82f0:	cmp	r4, r6
    82f2:	bne.n	82f8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    82f4:	movs	r0, #1
    82f6:	b.n	8312 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    82f8:	ldr	r3, [r5, #0]
    82fa:	mov	r0, r4
    82fc:	ldr	r1, [sp, #24]
    82fe:	ldr.w	r8, [r3, #36]	; 0x24
    8302:	blx	r7
    8304:	mov	r1, r4
    8306:	mov	r2, r0
    8308:	mov	r0, r5
    830a:	adds	r4, #1
    830c:	blx	r8
    830e:	cmp	r0, #0
    8310:	bne.n	82f0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    8312:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008316 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8316:	movs	r0, #0
    8318:	bx	lr

0000831a <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    831a:	movs	r0, #0
    831c:	bx	lr

0000831e <SdCardInterface::setDedicatedSpi(bool)>:
  }
    831e:	movs	r0, #0
    8320:	bx	lr

00008322 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8322:	bx	lr

00008324 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8324:	ldr	r3, [pc, #28]	; (8344 <sdIrs()+0x20>)
    8326:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8328:	ldr	r2, [pc, #28]	; (8348 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    832a:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    832c:	ldr	r0, [r3, #48]	; 0x30
    832e:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8330:	ldr	r2, [r2, #0]
    8332:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8334:	ldr	r2, [r3, #72]	; 0x48
    8336:	bic.w	r2, r2, #129	; 0x81
    833a:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    833c:	ldr	r3, [pc, #12]	; (834c <sdIrs()+0x28>)
    833e:	strb	r1, [r3, #0]
}
    8340:	bx	lr
    8342:	nop
    8344:	.word	0x402c0000
    8348:	.word	0x20026df8
    834c:	.word	0x20027c84

00008350 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8350:	ldr	r3, [pc, #24]	; (836c <gpioMux(unsigned char)+0x1c>)
    8352:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8356:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    835a:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    835e:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8362:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8366:	str.w	r0, [r3, #456]	; 0x1c8
}
    836a:	bx	lr
    836c:	.word	0x401f8000

00008370 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8370:	ldr	r3, [pc, #12]	; (8380 <isBusyCommandComplete()+0x10>)
    8372:	ldr	r0, [pc, #16]	; (8384 <isBusyCommandComplete()+0x14>)
    8374:	ldr	r3, [r3, #48]	; 0x30
    8376:	ands	r0, r3
}
    8378:	clz	r0, r0
    837c:	lsrs	r0, r0, #5
    837e:	bx	lr
    8380:	.word	0x402c0000
    8384:	.word	0x000f0001

00008388 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8388:	ldr	r3, [pc, #8]	; (8394 <isBusyCommandInhibit()+0xc>)
    838a:	ldr	r0, [r3, #36]	; 0x24
}
    838c:	and.w	r0, r0, #1
    8390:	bx	lr
    8392:	nop
    8394:	.word	0x402c0000

00008398 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8398:	ldr	r3, [pc, #12]	; (83a8 <isBusyDat()+0x10>)
    839a:	ldr	r0, [r3, #36]	; 0x24
    839c:	eor.w	r0, r0, #16777216	; 0x1000000
}
    83a0:	ubfx	r0, r0, #24, #1
    83a4:	bx	lr
    83a6:	nop
    83a8:	.word	0x402c0000

000083ac <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    83ac:	ldr	r3, [pc, #4]	; (83b4 <isBusyDMA()+0x8>)
    83ae:	ldrb	r0, [r3, #0]
}
    83b0:	bx	lr
    83b2:	nop
    83b4:	.word	0x20027c84

000083b8 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    83b8:	ldr	r3, [pc, #12]	; (83c8 <isBusyFifoRead()+0x10>)
    83ba:	ldr	r0, [r3, #36]	; 0x24
    83bc:	eor.w	r0, r0, #2048	; 0x800
}
    83c0:	ubfx	r0, r0, #11, #1
    83c4:	bx	lr
    83c6:	nop
    83c8:	.word	0x402c0000

000083cc <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    83cc:	ldr	r3, [pc, #12]	; (83dc <isBusyFifoWrite()+0x10>)
    83ce:	ldr	r0, [r3, #36]	; 0x24
    83d0:	eor.w	r0, r0, #1024	; 0x400
}
    83d4:	ubfx	r0, r0, #10, #1
    83d8:	bx	lr
    83da:	nop
    83dc:	.word	0x402c0000

000083e0 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    83e0:	ldr	r3, [pc, #12]	; (83f0 <isBusyTransferComplete()+0x10>)
    83e2:	ldr	r0, [pc, #16]	; (83f4 <isBusyTransferComplete()+0x14>)
    83e4:	ldr	r3, [r3, #48]	; 0x30
    83e6:	ands	r0, r3
}
    83e8:	clz	r0, r0
    83ec:	lsrs	r0, r0, #5
    83ee:	bx	lr
    83f0:	.word	0x402c0000
    83f4:	.word	0x117f0002

000083f8 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    83f8:	mov.w	r3, #1000	; 0x3e8
    83fc:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    83fe:	ldr	r3, [pc, #140]	; (848c <setSdclk(unsigned long)+0x94>)
    8400:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8402:	sub.w	r3, r3, #147456	; 0x24000
    8406:	ldr.w	r1, [r3, #256]	; 0x100
    840a:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    840c:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8410:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8414:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8416:	udiv	r1, r1, r3
    841a:	ldr	r3, [pc, #116]	; (8490 <setSdclk(unsigned long)+0x98>)
    841c:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8420:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8422:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    8426:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8428:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    842a:	lsls	r4, r2, #4
    842c:	udiv	r4, r3, r4
    8430:	cmp	r4, r0
    8432:	bls.n	8438 <setSdclk(unsigned long)+0x40>
    8434:	subs	r1, #1
    8436:	bne.n	843e <setSdclk(unsigned long)+0x46>
    8438:	mov	r4, r2
    843a:	movs	r1, #1
    843c:	b.n	8446 <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    843e:	lsls	r2, r2, #1
    8440:	b.n	842a <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8442:	adds	r1, #1
    8444:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8446:	udiv	r5, r3, r4
    844a:	cmp	r5, r0
    844c:	bls.n	8456 <setSdclk(unsigned long)+0x5e>
    844e:	cmp	r1, #16
    8450:	add.w	r5, r2, r4
    8454:	bne.n	8442 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8456:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    845a:	subs	r1, #1
  sdclkfs >>= 1;
    845c:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    845e:	muls	r4, r0
    8460:	ldr	r0, [pc, #48]	; (8494 <setSdclk(unsigned long)+0x9c>)
    8462:	udiv	r3, r3, r4
    8466:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8468:	ldr	r0, [pc, #44]	; (8498 <setSdclk(unsigned long)+0xa0>)
    846a:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    846c:	bic.w	r3, r3, #1044480	; 0xff000
    8470:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8474:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8478:	orr.w	r3, r3, r2, lsl #8
    847c:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8480:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8482:	ldr	r3, [r0, #36]	; 0x24
    8484:	lsls	r3, r3, #28
    8486:	bpl.n	8482 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8488:	pop	{r4, r5, pc}
    848a:	nop
    848c:	.word	0x400fc000
    8490:	.word	0x5e69ec00
    8494:	.word	0x2000cdd0
    8498:	.word	0x402c0000

0000849c <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    849c:	ldr	r3, [pc, #4]	; (84a4 <SdioCard::errorCode() const+0x8>)
    849e:	ldrb	r0, [r3, #0]
    84a0:	bx	lr
    84a2:	nop
    84a4:	.word	0x20008f34

000084a8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    84a8:	ldr	r3, [pc, #4]	; (84b0 <SdioCard::errorData() const+0x8>)
    84aa:	ldr	r0, [r3, #0]
}
    84ac:	bx	lr
    84ae:	nop
    84b0:	.word	0x20026df8

000084b4 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    84b4:	ldr	r3, [pc, #20]	; (84cc <SdioCard::readCID(CID*)+0x18>)
    84b6:	add.w	r2, r3, #16
    84ba:	ldr.w	r0, [r3], #4
    84be:	cmp	r3, r2
    84c0:	str.w	r0, [r1], #4
    84c4:	bne.n	84ba <SdioCard::readCID(CID*)+0x6>
  return true;
}
    84c6:	movs	r0, #1
    84c8:	bx	lr
    84ca:	nop
    84cc:	.word	0x20027bc4

000084d0 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    84d0:	ldr	r3, [pc, #20]	; (84e8 <SdioCard::readCSD(csd_t*)+0x18>)
    84d2:	add.w	r2, r3, #16
    84d6:	ldr.w	r0, [r3], #4
    84da:	cmp	r3, r2
    84dc:	str.w	r0, [r1], #4
    84e0:	bne.n	84d6 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    84e2:	movs	r0, #1
    84e4:	bx	lr
    84e6:	nop
    84e8:	.word	0x20027bd4

000084ec <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    84ec:	ldr	r3, [pc, #8]	; (84f8 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    84ee:	movs	r0, #1
  *ocr = m_ocr;
    84f0:	ldr	r3, [r3, #0]
    84f2:	str	r3, [r1, #0]
}
    84f4:	bx	lr
    84f6:	nop
    84f8:	.word	0x200267ec

000084fc <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    84fc:	bx	lr
	...

00008500 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    8500:	push	{r3, r4, r5, r6, r7, lr}
    8502:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8504:	ldr	r7, [pc, #24]	; (8520 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    8506:	bl	a984 <micros>
    850a:	mov	r6, r0
  while (fcn()) {
    850c:	blx	r5
    850e:	mov	r4, r0
    8510:	cbz	r0, 851c <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8512:	bl	a984 <micros>
    8516:	subs	r0, r0, r6
    8518:	cmp	r0, r7
    851a:	bls.n	850c <waitTimeout(bool (*)())+0xc>
}
    851c:	mov	r0, r4
    851e:	pop	{r3, r4, r5, r6, r7, pc}
    8520:	.word	0x000f4240

00008524 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    8524:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8528:	ldr	r7, [pc, #44]	; (8558 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    852a:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    852c:	ldr.w	r8, [pc, #44]	; 855c <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    8530:	str	r0, [r7, #0]
  uint32_t m = micros();
    8532:	bl	a984 <micros>
    8536:	mov	r6, r0
  while (fcn()) {
    8538:	blx	r5
    853a:	mov	r4, r0
    853c:	cbnz	r0, 8548 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    853e:	movs	r3, #0
}
    8540:	mov	r0, r4
      m_busyFcn = 0;
    8542:	str	r3, [r7, #0]
}
    8544:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8548:	bl	a984 <micros>
    854c:	subs	r0, r0, r6
    854e:	cmp	r0, r8
    8550:	bhi.n	853e <yieldTimeout(bool (*)())+0x1a>
    yield();
    8552:	bl	b280 <yield>
    8556:	b.n	8538 <yieldTimeout(bool (*)())+0x14>
    8558:	.word	0x20026df4
    855c:	.word	0x000f4240

00008560 <SdioCard::~SdioCard()>:
    8560:	push	{r4, lr}
    8562:	mov	r4, r0
    8564:	movs	r1, #12
    8566:	bl	b7ac <operator delete(void*, unsigned int)>
    856a:	mov	r0, r4
    856c:	pop	{r4, pc}
	...

00008570 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    8570:	push	{r3, lr}
    gpioMux(0);
    8572:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8574:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    8578:	bl	8350 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    857c:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8580:	ldr	r3, [pc, #24]	; (859c <enableGPIO(bool) [clone .part.0]+0x2c>)
    8582:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8586:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    858a:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    858e:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8592:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8596:	str.w	r2, [r3, #952]	; 0x3b8
}
    859a:	pop	{r3, pc}
    859c:	.word	0x401f8000

000085a0 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    85a0:	ldr	r3, [pc, #184]	; (865c <initSDHC()+0xbc>)
    gpioMux(5);
    85a2:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    85a4:	ldr.w	r2, [r3, #256]	; 0x100
    85a8:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    85ac:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    85ae:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    85b2:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    85b6:	ldr	r4, [pc, #168]	; (8660 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    85b8:	bic.w	r2, r2, #63	; 0x3f
    85bc:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    85c0:	ldr.w	r2, [r3, #256]	; 0x100
    85c4:	orr.w	r2, r2, #24
    85c8:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    85cc:	ldr.w	r2, [r3, #256]	; 0x100
    85d0:	bic.w	r2, r2, #128	; 0x80
    85d4:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    85d8:	add.w	r3, r3, #147456	; 0x24000
    85dc:	ldr.w	r2, [r3, #128]	; 0x80
    85e0:	orr.w	r2, r2, #12
    85e4:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    85e8:	ldr	r2, [r3, #36]	; 0x24
    85ea:	bic.w	r2, r2, #14336	; 0x3800
    85ee:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    85f0:	ldr	r2, [r3, #28]
    85f2:	orr.w	r2, r2, #65536	; 0x10000
    85f6:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    85f8:	ldr	r2, [r3, #36]	; 0x24
    85fa:	orr.w	r2, r2, #2048	; 0x800
    85fe:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    8600:	bl	8350 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    8604:	ldr	r3, [r4, #72]	; 0x48
    8606:	orr.w	r3, r3, #2147483648	; 0x80000000
    860a:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    860c:	ldr	r3, [r4, #44]	; 0x2c
    860e:	orr.w	r3, r3, #16777216	; 0x1000000
    8612:	orr.w	r3, r3, #32768	; 0x8000
    8616:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8618:	ldr	r3, [r4, #44]	; 0x2c
    861a:	lsls	r2, r3, #7
    861c:	bmi.n	8618 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    861e:	mov.w	r0, #400	; 0x190
    8622:	bl	83f8 <setSdclk(unsigned long)>
  if (enable) {
    8626:	bl	8570 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    862a:	ldr	r3, [pc, #56]	; (8664 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    862c:	ldr	r2, [pc, #56]	; (8668 <initSDHC()+0xc8>)
    862e:	str	r3, [r4, #52]	; 0x34
    8630:	ldr	r3, [pc, #56]	; (866c <initSDHC()+0xcc>)
    8632:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8636:	ldr	r3, [pc, #56]	; (8670 <initSDHC()+0xd0>)
    8638:	movs	r2, #96	; 0x60
    863a:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    863e:	mov.w	r3, #3758153728	; 0xe000e000
    8642:	mov.w	r2, #16384	; 0x4000
    8646:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    864a:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    864c:	ldr	r2, [pc, #16]	; (8660 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    864e:	orr.w	r3, r3, #134217728	; 0x8000000
    8652:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8654:	ldr	r3, [r2, #44]	; 0x2c
    8656:	lsls	r3, r3, #4
    8658:	bmi.n	8654 <initSDHC()+0xb4>
}
    865a:	pop	{r4, pc}
    865c:	.word	0x400d8000
    8660:	.word	0x402c0000
    8664:	.word	0x117f000b
    8668:	.word	0x00008325
    866c:	.word	0x20009000
    8670:	.word	0xe000e400

00008674 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    8674:	ldr	r3, [pc, #16]	; (8688 <SdioCard::type() const+0x14>)
    8676:	ldrb	r3, [r3, #0]
    8678:	cbz	r3, 8684 <SdioCard::type() const+0x10>
    867a:	ldr	r3, [pc, #16]	; (868c <SdioCard::type() const+0x18>)
    867c:	ldrb	r0, [r3, #0]
    867e:	adds	r0, #2
    8680:	uxtb	r0, r0
    8682:	bx	lr
    8684:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    8686:	bx	lr
    8688:	.word	0x20027bc1
    868c:	.word	0x20027bc2

00008690 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8690:	push	{r3, r4, r5, lr}
    8692:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    8694:	ldr	r0, [pc, #80]	; (86e8 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8696:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    8698:	bl	8500 <waitTimeout(bool (*)())>
    869c:	cbnz	r0, 86de <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    869e:	ldr	r3, [pc, #76]	; (86ec <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    86a0:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    86a2:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    86a4:	bpl.n	86b6 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    86a6:	ldr	r2, [r3, #72]	; 0x48
    86a8:	bic.w	r2, r2, #255	; 0xff
    86ac:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    86ae:	uxtb	r2, r4
    86b0:	ldr	r1, [r3, #72]	; 0x48
    86b2:	orrs	r2, r1
    86b4:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    86b6:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    86ba:	ldr	r5, [pc, #48]	; (86ec <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    86bc:	ldr	r0, [pc, #48]	; (86f0 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    86be:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    86c0:	bl	8500 <waitTimeout(bool (*)())>
    86c4:	cbnz	r0, 86de <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    86c6:	ldr	r2, [r5, #48]	; 0x30
    86c8:	ldr	r3, [pc, #40]	; (86f4 <cardCommand(unsigned long, unsigned long)+0x64>)
    86ca:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    86cc:	ldr	r2, [r3, #0]
    86ce:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86d0:	ldr	r2, [r3, #0]
    86d2:	lsls	r2, r2, #31
    86d4:	bpl.n	86de <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    86d6:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86d8:	tst.w	r3, #983040	; 0xf0000
    86dc:	beq.n	86e2 <cardCommand(unsigned long, unsigned long)+0x52>
    86de:	movs	r0, #0
}
    86e0:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86e2:	movs	r0, #1
    86e4:	b.n	86e0 <cardCommand(unsigned long, unsigned long)+0x50>
    86e6:	nop
    86e8:	.word	0x00008389
    86ec:	.word	0x402c0000
    86f0:	.word	0x00008371
    86f4:	.word	0x20026df8

000086f8 <statusCMD13()>:
static uint32_t statusCMD13() {
    86f8:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    86fa:	ldr	r3, [pc, #16]	; (870c <statusCMD13()+0x14>)
    86fc:	ldr	r0, [pc, #16]	; (8710 <statusCMD13()+0x18>)
    86fe:	ldr	r1, [r3, #0]
    8700:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8704:	cbz	r0, 870a <statusCMD13()+0x12>
    8706:	ldr	r3, [pc, #12]	; (8714 <statusCMD13()+0x1c>)
    8708:	ldr	r0, [r3, #16]
}
    870a:	pop	{r3, pc}
    870c:	.word	0x200267f0
    8710:	.word	0x0d1a0000
    8714:	.word	0x402c0000

00008718 <isBusyCMD13()>:
static bool isBusyCMD13() {
    8718:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    871a:	bl	86f8 <statusCMD13()>
    871e:	eor.w	r0, r0, #256	; 0x100
}
    8722:	ubfx	r0, r0, #8, #1
    8726:	pop	{r3, pc}

00008728 <SdioCard::status()>:
  return statusCMD13();
    8728:	b.w	86f8 <statusCMD13()>

0000872c <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    872c:	ldr	r3, [pc, #76]	; (877c <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    872e:	push	{r4, r5, lr}
    8730:	mov	r4, r1
    8732:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    8734:	ldr	r1, [r3, #0]
    8736:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    873a:	cbz	r0, 8778 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    873c:	ldr	r3, [pc, #64]	; (8780 <readReg16(unsigned long, void*)+0x54>)
    873e:	add.w	r5, r4, #15
    8742:	ldr	r2, [r3, #16]
    8744:	str	r2, [sp, #0]
    8746:	ldr	r2, [r3, #20]
    8748:	str	r2, [sp, #4]
    874a:	ldr	r2, [r3, #24]
    874c:	str	r2, [sp, #8]
    874e:	ldr	r3, [r3, #28]
    8750:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    8752:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8754:	bic.w	r2, r3, #3
    8758:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    875c:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    875e:	adds	r2, #16
    8760:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    8762:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8764:	add	r2, sp
    8766:	ldr.w	r2, [r2, #-16]
    876a:	lsr.w	r2, r2, r1
    876e:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    8772:	bne.n	8754 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    8774:	movs	r3, #0
    8776:	strb	r3, [r4, #15]
}
    8778:	add	sp, #20
    877a:	pop	{r4, r5, pc}
    877c:	.word	0x200267f0
    8780:	.word	0x402c0000

00008784 <waitDmaStatus()>:
static bool waitDmaStatus() {
    8784:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    8786:	ldr	r0, [pc, #32]	; (87a8 <waitDmaStatus()+0x24>)
    8788:	bl	8524 <yieldTimeout(bool (*)())>
    878c:	cbnz	r0, 87a4 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    878e:	ldr	r3, [pc, #28]	; (87ac <waitDmaStatus()+0x28>)
    8790:	ldr	r2, [r3, #0]
    8792:	lsls	r2, r2, #30
    8794:	bpl.n	87a2 <waitDmaStatus()+0x1e>
    8796:	ldr	r2, [r3, #0]
    8798:	ldr	r3, [pc, #20]	; (87b0 <waitDmaStatus()+0x2c>)
    879a:	tst	r2, r3
    879c:	ite	eq
    879e:	moveq	r0, #1
    87a0:	movne	r0, #0
}
    87a2:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    87a4:	movs	r0, #0
    87a6:	b.n	87a2 <waitDmaStatus()+0x1e>
    87a8:	.word	0x000083ad
    87ac:	.word	0x20026df8
    87b0:	.word	0x117f0000

000087b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    87b4:	push	{r3, r4, r5, r6, r7, lr}
    87b6:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    87b8:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    87ba:	mov	r7, r0
    87bc:	mov	r4, r1
    87be:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    87c0:	bne.n	87c4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    87c2:	cbnz	r5, 87d6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    87c4:	ldr	r3, [pc, #96]	; (8828 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    87c6:	movs	r2, #37	; 0x25
    87c8:	strb	r2, [r3, #0]
  m_errorLine = line;
    87ca:	movw	r2, #501	; 0x1f5
    87ce:	ldr	r3, [pc, #92]	; (882c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    87d0:	str	r2, [r3, #0]
}
    87d2:	movs	r0, #0
    87d4:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    87d6:	ldr	r0, [pc, #88]	; (8830 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    87d8:	bl	8524 <yieldTimeout(bool (*)())>
    87dc:	cbz	r0, 87ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    87de:	ldr	r3, [pc, #72]	; (8828 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    87e0:	movs	r2, #10
    87e2:	strb	r2, [r3, #0]
  m_errorLine = line;
    87e4:	mov.w	r2, #504	; 0x1f8
    87e8:	ldr	r3, [pc, #64]	; (882c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    87ea:	b.n	87d0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    87ec:	ldr	r3, [pc, #68]	; (8834 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    87ee:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    87f0:	ldr	r1, [pc, #68]	; (8838 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    87f2:	strb	r2, [r3, #0]
  m_irqstat = 0;
    87f4:	ldr	r3, [pc, #68]	; (883c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    87f6:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    87f8:	ldr	r3, [pc, #68]	; (8840 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    87fa:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    87fc:	and.w	r3, r3, r5, lsl #16
    8800:	orr.w	r3, r3, #512	; 0x200
    8804:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8806:	ldr	r3, [pc, #60]	; (8844 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    8808:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    880a:	ldr	r3, [pc, #60]	; (8848 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    880c:	ldrb	r3, [r3, #0]
    880e:	cbnz	r3, 8812 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    8810:	lsls	r4, r4, #9
    8812:	mov	r1, r4
    8814:	mov	r0, r7
    8816:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    881a:	cmp	r0, #0
    881c:	beq.n	87d2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    881e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    8822:	b.w	8784 <waitDmaStatus()>
    8826:	nop
    8828:	.word	0x20008f34
    882c:	.word	0x20024dd8
    8830:	.word	0x00008719
    8834:	.word	0x20027c84
    8838:	.word	0x402c0000
    883c:	.word	0x20026df8
    8840:	.word	0x1fff0000
    8844:	.word	0x117f0002
    8848:	.word	0x20027bc2

0000884c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    884c:	push	{r3, r4, r5, r6, r7, lr}
    884e:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    8850:	ldrb	r0, [r0, #8]
    8852:	mov	r4, r1
    8854:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    8856:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8858:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    885a:	bmi.n	887a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    885c:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    885e:	cmp	r4, r6
    8860:	beq.n	8884 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    8862:	ldr	r3, [r7, #0]
    8864:	mov	r2, r5
    8866:	mov	r1, r4
    8868:	mov	r0, r7
    886a:	ldr	r3, [r3, #16]
    886c:	adds	r4, #1
    886e:	add.w	r5, r5, #512	; 0x200
    8872:	blx	r3
    8874:	cmp	r0, #0
    8876:	bne.n	885e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    8878:	b.n	8896 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    887a:	lsls	r0, r2, #30
    887c:	beq.n	88a2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    887e:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8880:	cmp	r4, r6
    8882:	bne.n	8888 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    8884:	movs	r0, #1
    8886:	b.n	8898 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    8888:	ldr	r3, [r7, #0]
    888a:	mov	r2, r5
    888c:	mov	r1, r4
    888e:	mov	r0, r7
    8890:	ldr	r3, [r3, #16]
    8892:	blx	r3
    8894:	cbnz	r0, 889a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    8896:	movs	r0, #0
}
    8898:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    889a:	adds	r4, #1
    889c:	add.w	r5, r5, #512	; 0x200
    88a0:	b.n	8880 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    88a2:	ldr	r0, [pc, #24]	; (88bc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    88a4:	bl	87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    88a8:	cmp	r0, #0
    88aa:	bne.n	8884 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    88ac:	ldr	r3, [pc, #16]	; (88c0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    88ae:	movs	r2, #12
    88b0:	strb	r2, [r3, #0]
  m_errorLine = line;
    88b2:	movw	r2, #929	; 0x3a1
    88b6:	ldr	r3, [pc, #12]	; (88c4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    88b8:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    88ba:	b.n	8898 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    88bc:	.word	0x123a0037
    88c0:	.word	0x20008f34
    88c4:	.word	0x20024dd8

000088c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    88c8:	push	{r3, r4, r5, r6, r7, lr}
    88ca:	mov	r7, r0
    88cc:	ldrb	r0, [r0, #8]
    88ce:	mov	r4, r1
    88d0:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    88d2:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    88d4:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    88d6:	bmi.n	88f6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    88d8:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    88da:	cmp	r4, r6
    88dc:	beq.n	8900 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    88de:	ldr	r3, [r7, #0]
    88e0:	mov	r2, r5
    88e2:	mov	r1, r4
    88e4:	mov	r0, r7
    88e6:	ldr	r3, [r3, #36]	; 0x24
    88e8:	adds	r4, #1
    88ea:	add.w	r5, r5, #512	; 0x200
    88ee:	blx	r3
    88f0:	cmp	r0, #0
    88f2:	bne.n	88da <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    88f4:	b.n	8912 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    88f6:	lsls	r0, r2, #30
    88f8:	beq.n	891e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    88fa:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    88fc:	cmp	r4, r6
    88fe:	bne.n	8904 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    8900:	movs	r0, #1
    8902:	b.n	8914 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    8904:	ldr	r3, [r7, #0]
    8906:	mov	r2, r5
    8908:	mov	r1, r4
    890a:	mov	r0, r7
    890c:	ldr	r3, [r3, #36]	; 0x24
    890e:	blx	r3
    8910:	cbnz	r0, 8916 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    8912:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    8914:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    8916:	adds	r4, #1
    8918:	add.w	r5, r5, #512	; 0x200
    891c:	b.n	88fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    891e:	ldr	r0, [pc, #24]	; (8938 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    8920:	bl	87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8924:	cmp	r0, #0
    8926:	bne.n	8900 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    8928:	ldr	r3, [pc, #16]	; (893c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    892a:	movs	r2, #14
    892c:	strb	r2, [r3, #0]
  m_errorLine = line;
    892e:	movw	r2, #1085	; 0x43d
    8932:	ldr	r3, [pc, #12]	; (8940 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    8934:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    8936:	b.n	8914 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    8938:	.word	0x193a0027
    893c:	.word	0x20008f34
    8940:	.word	0x20024dd8

00008944 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    8944:	ldr	r2, [pc, #88]	; (89a0 <SdioCard::sectorCount()+0x5c>)
    8946:	ldrb	r3, [r2, #0]
    8948:	ands.w	r3, r3, #192	; 0xc0
    894c:	bne.n	8980 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    894e:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8950:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8952:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    8956:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8958:	lsls	r0, r0, #2
    895a:	orr.w	r0, r0, r3, lsl #10
    895e:	ldrb	r3, [r2, #8]
    8960:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8964:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8966:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8968:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    896c:	adds	r0, #1
    896e:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    8972:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8974:	orr.w	r3, r3, r1, lsr #7
    8978:	add	r3, r2
    897a:	subs	r3, #7
    897c:	lsls	r0, r3
    897e:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    8980:	cmp	r3, #64	; 0x40
    8982:	bne.n	899c <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8984:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8986:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8988:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    898a:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    898e:	add.w	r0, r0, r3, lsl #16
    8992:	ldrb	r3, [r2, #8]
    8994:	add.w	r0, r0, r3, lsl #8
    8998:	lsls	r0, r0, #10
    899a:	bx	lr
  } else {
    return 0;
    899c:	movs	r0, #0
}
    899e:	bx	lr
    89a0:	.word	0x20027bd4

000089a4 <SdioCard::isBusy()>:
    89a4:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    89a6:	lsls	r3, r3, #31
    89a8:	bpl.n	89bc <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    89aa:	ldr	r3, [pc, #40]	; (89d4 <SdioCard::isBusy()+0x30>)
    89ac:	ldr	r3, [r3, #0]
    89ae:	cbz	r3, 89b2 <SdioCard::isBusy()+0xe>
    89b0:	bx	r3
    89b2:	ldr	r3, [pc, #36]	; (89d8 <SdioCard::isBusy()+0x34>)
    89b4:	ldrb	r0, [r3, #0]
    89b6:	cbz	r0, 89d2 <SdioCard::isBusy()+0x2e>
    89b8:	b.w	8718 <isBusyCMD13()>
    if (m_transferActive) {
    89bc:	ldr	r3, [pc, #28]	; (89dc <SdioCard::isBusy()+0x38>)
    89be:	ldrb	r3, [r3, #0]
    89c0:	cbz	r3, 89c6 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    89c2:	b.w	83e0 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    89c6:	ldr	r3, [pc, #24]	; (89e0 <SdioCard::isBusy()+0x3c>)
    89c8:	ldr	r0, [r3, #36]	; 0x24
    89ca:	eor.w	r0, r0, #16777216	; 0x1000000
    89ce:	ubfx	r0, r0, #24, #1
}
    89d2:	bx	lr
    89d4:	.word	0x20026df4
    89d8:	.word	0x20027bc0
    89dc:	.word	0x20027bc3
    89e0:	.word	0x402c0000

000089e4 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    89e4:	push	{r3, r4, r5, lr}
    89e6:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    89e8:	ldr	r2, [pc, #160]	; (8a8c <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    89ea:	ldrb	r3, [r2, #10]
    89ec:	ands.w	r4, r3, #64	; 0x40
    89f0:	bne.n	8a18 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    89f2:	and.w	r3, r3, #63	; 0x3f
    89f6:	ldrb	r2, [r2, #11]
    89f8:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    89fa:	orr.w	r3, r3, r2, lsr #7
    89fe:	adds	r2, r5, #1
    8a00:	orrs	r2, r1
    8a02:	tst	r3, r2
    8a04:	beq.n	8a18 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    8a06:	ldr	r3, [pc, #136]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a08:	movs	r2, #39	; 0x27
    8a0a:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a0c:	movw	r2, #770	; 0x302
    8a10:	ldr	r3, [pc, #128]	; (8a94 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a12:	str	r2, [r3, #0]
}
    8a14:	mov	r0, r4
    8a16:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    8a18:	ldr	r3, [pc, #124]	; (8a98 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    8a1a:	ldrb	r3, [r3, #0]
    8a1c:	cbnz	r3, 8a22 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    8a1e:	lsls	r1, r1, #9
    lastSector <<= 9;
    8a20:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8a22:	ldr	r0, [pc, #120]	; (8a9c <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8a24:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8a28:	mov	r4, r0
    8a2a:	cbnz	r0, 8a3a <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    8a2c:	ldr	r3, [pc, #96]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a2e:	movs	r2, #15
    8a30:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a32:	movw	r2, #778	; 0x30a
    8a36:	ldr	r3, [pc, #92]	; (8a94 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a38:	b.n	8a12 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8a3a:	mov	r1, r5
    8a3c:	ldr	r0, [pc, #96]	; (8aa0 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8a3e:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8a42:	mov	r4, r0
    8a44:	cbnz	r0, 8a54 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    8a46:	ldr	r3, [pc, #72]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a48:	movs	r2, #16
    8a4a:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a4c:	movw	r2, #781	; 0x30d
    8a50:	ldr	r3, [pc, #64]	; (8a94 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a52:	b.n	8a12 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8a54:	movs	r1, #0
    8a56:	ldr	r0, [pc, #76]	; (8aa4 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8a58:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8a5c:	mov	r4, r0
    8a5e:	cbnz	r0, 8a6e <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    8a60:	ldr	r3, [pc, #44]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a62:	movs	r2, #17
    8a64:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a66:	mov.w	r2, #784	; 0x310
    8a6a:	ldr	r3, [pc, #40]	; (8a94 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a6c:	b.n	8a12 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    8a6e:	ldr	r0, [pc, #56]	; (8aa8 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8a70:	bl	8500 <waitTimeout(bool (*)())>
    8a74:	cmp	r0, #0
    8a76:	beq.n	8a14 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    8a78:	ldr	r3, [pc, #20]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a7a:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8a7c:	movs	r4, #0
  m_errorCode = code;
    8a7e:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a80:	movw	r2, #787	; 0x313
    8a84:	ldr	r3, [pc, #12]	; (8a94 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a86:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8a88:	b.n	8a14 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    8a8a:	nop
    8a8c:	.word	0x20027bd4
    8a90:	.word	0x20008f34
    8a94:	.word	0x20024dd8
    8a98:	.word	0x20027bc2
    8a9c:	.word	0x201a0000
    8aa0:	.word	0x211a0000
    8aa4:	.word	0x261b0000
    8aa8:	.word	0x00008719

00008aac <waitTransferComplete()>:
static bool waitTransferComplete() {
    8aac:	push	{r4, lr}
  if (!m_transferActive) {
    8aae:	ldr	r4, [pc, #60]	; (8aec <waitTransferComplete()+0x40>)
    8ab0:	ldrb	r3, [r4, #0]
    8ab2:	cbnz	r3, 8ab8 <waitTransferComplete()+0xc>
    return true;
    8ab4:	movs	r0, #1
}
    8ab6:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    8ab8:	ldr	r0, [pc, #52]	; (8af0 <waitTransferComplete()+0x44>)
    8aba:	bl	8500 <waitTimeout(bool (*)())>
  m_transferActive = false;
    8abe:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    8ac0:	ldr	r2, [pc, #48]	; (8af4 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    8ac2:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    8ac4:	ldr	r1, [r2, #48]	; 0x30
    8ac6:	ldr	r3, [pc, #48]	; (8af8 <waitTransferComplete()+0x4c>)
    8ac8:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8aca:	ldr	r1, [r3, #0]
    8acc:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8ace:	cbnz	r0, 8ad8 <waitTransferComplete()+0x2c>
    8ad0:	ldr	r2, [r3, #0]
    8ad2:	ldr	r3, [pc, #40]	; (8afc <waitTransferComplete()+0x50>)
    8ad4:	tst	r2, r3
    8ad6:	beq.n	8ab4 <waitTransferComplete()+0x8>
  m_errorCode = code;
    8ad8:	ldr	r3, [pc, #36]	; (8b00 <waitTransferComplete()+0x54>)
    8ada:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8adc:	movs	r0, #0
  m_errorCode = code;
    8ade:	strb	r2, [r3, #0]
  m_errorLine = line;
    8ae0:	movw	r2, #634	; 0x27a
    8ae4:	ldr	r3, [pc, #28]	; (8b04 <waitTransferComplete()+0x58>)
    8ae6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8ae8:	b.n	8ab6 <waitTransferComplete()+0xa>
    8aea:	nop
    8aec:	.word	0x20027bc3
    8af0:	.word	0x000083e1
    8af4:	.word	0x402c0000
    8af8:	.word	0x20026df8
    8afc:	.word	0x117f0000
    8b00:	.word	0x20008f34
    8b04:	.word	0x20024dd8

00008b08 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8b08:	push	{r4, r5, r6, r7, lr}
    8b0a:	ldrb	r5, [r0, #8]
    8b0c:	sub.w	sp, sp, #516	; 0x204
    8b10:	mov	r4, r0
    8b12:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    8b14:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8b18:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    8b1a:	beq.n	8b54 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    8b1c:	lsls	r3, r2, #30
    8b1e:	beq.n	8b2e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    8b20:	mov	r1, r6
      ptr = aligned;
    8b22:	mov	r6, sp
      memcpy(aligned, src, 512);
    8b24:	mov.w	r2, #512	; 0x200
    8b28:	mov	r0, sp
    8b2a:	bl	9488 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8b2e:	movs	r3, #1
    8b30:	mov	r2, r6
    8b32:	mov	r1, r7
    8b34:	ldr	r0, [pc, #104]	; (8ba0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    8b36:	bl	87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8b3a:	mov	r5, r0
    8b3c:	cbnz	r0, 8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    8b3e:	ldr	r3, [pc, #100]	; (8ba4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    8b40:	movs	r2, #13
    8b42:	strb	r2, [r3, #0]
  m_errorLine = line;
    8b44:	movw	r2, #1041	; 0x411
    8b48:	ldr	r3, [pc, #92]	; (8ba8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    8b4a:	str	r2, [r3, #0]
}
    8b4c:	mov	r0, r5
    8b4e:	add.w	sp, sp, #516	; 0x204
    8b52:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    8b54:	bl	8aac <waitTransferComplete()>
    8b58:	cmp	r0, #0
    8b5a:	beq.n	8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8b5c:	ldrb	r3, [r4, #9]
    8b5e:	cmp	r3, #2
    8b60:	bne.n	8b68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    8b62:	ldr	r3, [r4, #4]
    8b64:	cmp	r3, r7
    8b66:	beq.n	8b88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    8b68:	ldr	r3, [r4, #0]
    8b6a:	mov	r0, r4
    8b6c:	ldr	r3, [r3, #32]
    8b6e:	blx	r3
    8b70:	cmp	r0, #0
    8b72:	beq.n	8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    8b74:	ldr	r3, [r4, #0]
    8b76:	mov	r1, r7
    8b78:	mov	r0, r4
    8b7a:	ldr	r3, [r3, #96]	; 0x60
    8b7c:	blx	r3
    8b7e:	cmp	r0, #0
    8b80:	beq.n	8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    8b82:	movs	r3, #2
      m_curSector = sector;
    8b84:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    8b86:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    8b88:	ldr	r3, [r4, #0]
    8b8a:	mov	r1, r6
    8b8c:	mov	r0, r4
    8b8e:	ldr	r3, [r3, #92]	; 0x5c
    8b90:	blx	r3
    8b92:	cmp	r0, #0
    8b94:	beq.n	8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    8b96:	ldr	r3, [r4, #4]
  return true;
    8b98:	mov	r5, r0
    m_curSector++;
    8b9a:	adds	r3, #1
    8b9c:	str	r3, [r4, #4]
    8b9e:	b.n	8b4c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    8ba0:	.word	0x183a0001
    8ba4:	.word	0x20008f34
    8ba8:	.word	0x20024dd8

00008bac <SdioCard::readStop()>:
bool SdioCard::readStop() {
    8bac:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8bae:	ldr	r4, [pc, #92]	; (8c0c <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8bb0:	movs	r1, #0
    8bb2:	ldr	r0, [pc, #92]	; (8c10 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8bb4:	ldr	r3, [r4, #40]	; 0x28
    8bb6:	bic.w	r3, r3, #65536	; 0x10000
    8bba:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8bbc:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8bc0:	mov	r5, r0
    8bc2:	cbnz	r0, 8bd6 <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    8bc4:	ldr	r3, [pc, #76]	; (8c14 <SdioCard::readStop()+0x68>)
    8bc6:	movs	r2, #9
    8bc8:	strb	r2, [r3, #0]
  m_errorLine = line;
    8bca:	movw	r2, #573	; 0x23d
    8bce:	ldr	r3, [pc, #72]	; (8c18 <SdioCard::readStop()+0x6c>)
    8bd0:	str	r2, [r3, #0]
}
    8bd2:	mov	r0, r5
    8bd4:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    8bd6:	ldr	r0, [pc, #68]	; (8c1c <SdioCard::readStop()+0x70>)
    8bd8:	bl	8524 <yieldTimeout(bool (*)())>
    8bdc:	cbz	r0, 8bf0 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    8bde:	ldr	r3, [pc, #52]	; (8c14 <SdioCard::readStop()+0x68>)
    8be0:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8be2:	movs	r5, #0
  m_errorCode = code;
    8be4:	strb	r2, [r3, #0]
  m_errorLine = line;
    8be6:	mov.w	r2, #576	; 0x240
    8bea:	ldr	r3, [pc, #44]	; (8c18 <SdioCard::readStop()+0x6c>)
    8bec:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    8bee:	b.n	8bd2 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8bf0:	ldr	r3, [r4, #36]	; 0x24
    8bf2:	lsls	r3, r3, #30
    8bf4:	bpl.n	8bd2 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    8bf6:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8bf8:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8bfa:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8bfc:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8c00:	orr.w	r2, r2, #67108864	; 0x4000000
    8c04:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    8c06:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    8c08:	str	r3, [r4, #40]	; 0x28
    8c0a:	b.n	8bd2 <SdioCard::readStop()+0x26>
    8c0c:	.word	0x402c0000
    8c10:	.word	0x0cdb0000
    8c14:	.word	0x20008f34
    8c18:	.word	0x20024dd8
    8c1c:	.word	0x00008399

00008c20 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    8c20:	push	{r4, r5, r6, lr}
    8c22:	mov	r4, r1
  if (!waitTransferComplete()) {
    8c24:	bl	8aac <waitTransferComplete()>
    8c28:	mov	r5, r0
    8c2a:	cbz	r0, 8c64 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8c2c:	ldr	r3, [pc, #100]	; (8c94 <SdioCard::writeData(unsigned char const*)+0x74>)
    8c2e:	ldr	r2, [r3, #36]	; 0x24
    8c30:	lsls	r2, r2, #23
    8c32:	bmi.n	8c44 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8c34:	ldr	r2, [r3, #40]	; 0x28
    8c36:	bic.w	r2, r2, #65536	; 0x10000
    8c3a:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8c3c:	ldr	r2, [r3, #40]	; 0x28
    8c3e:	orr.w	r2, r2, #131072	; 0x20000
    8c42:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c44:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8c46:	ldr	r0, [pc, #80]	; (8c98 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c48:	orr.w	r2, r2, #65536	; 0x10000
    8c4c:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8c4e:	bl	8500 <waitTimeout(bool (*)())>
    8c52:	cbz	r0, 8c68 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    8c54:	ldr	r3, [pc, #68]	; (8c9c <SdioCard::writeData(unsigned char const*)+0x7c>)
    8c56:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8c58:	movs	r5, #0
  m_errorCode = code;
    8c5a:	strb	r2, [r3, #0]
  m_errorLine = line;
    8c5c:	mov.w	r2, #1016	; 0x3f8
    8c60:	ldr	r3, [pc, #60]	; (8ca0 <SdioCard::writeData(unsigned char const*)+0x80>)
    8c62:	str	r2, [r3, #0]
}
    8c64:	mov	r0, r5
    8c66:	pop	{r4, r5, r6, pc}
    8c68:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8c6c:	ldr	r2, [pc, #36]	; (8c94 <SdioCard::writeData(unsigned char const*)+0x74>)
    8c6e:	ldr	r3, [r2, #36]	; 0x24
    8c70:	lsls	r3, r3, #21
    8c72:	bpl.n	8c6e <SdioCard::writeData(unsigned char const*)+0x4e>
    8c74:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c76:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    8c7a:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c7e:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    8c80:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c82:	bne.n	8c7a <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    8c84:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8c86:	cmp	r4, r1
    8c88:	bne.n	8c6e <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    8c8a:	ldr	r3, [pc, #24]	; (8ca4 <SdioCard::writeData(unsigned char const*)+0x84>)
    8c8c:	movs	r2, #1
    8c8e:	strb	r2, [r3, #0]
  return true;
    8c90:	b.n	8c64 <SdioCard::writeData(unsigned char const*)+0x44>
    8c92:	nop
    8c94:	.word	0x402c0000
    8c98:	.word	0x000083cd
    8c9c:	.word	0x20008f34
    8ca0:	.word	0x20024dd8
    8ca4:	.word	0x20027bc3

00008ca8 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8ca8:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8caa:	ldr	r0, [pc, #80]	; (8cfc <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    8cac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8cae:	bl	8524 <yieldTimeout(bool (*)())>
    8cb2:	cbz	r0, 8cc6 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    8cb4:	ldr	r3, [pc, #72]	; (8d00 <SdioCard::writeStart(unsigned long)+0x58>)
    8cb6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8cb8:	movs	r0, #0
  m_errorCode = code;
    8cba:	strb	r2, [r3, #0]
  m_errorLine = line;
    8cbc:	movw	r2, #1099	; 0x44b
    8cc0:	ldr	r3, [pc, #64]	; (8d04 <SdioCard::writeStart(unsigned long)+0x5c>)
    8cc2:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8cc4:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8cc6:	ldr	r3, [pc, #64]	; (8d08 <SdioCard::writeStart(unsigned long)+0x60>)
    8cc8:	ldr	r2, [r3, #40]	; 0x28
    8cca:	bic.w	r2, r2, #65536	; 0x10000
    8cce:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8cd0:	mov.w	r2, #512	; 0x200
    8cd4:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8cd6:	ldr	r3, [pc, #52]	; (8d0c <SdioCard::writeStart(unsigned long)+0x64>)
    8cd8:	ldrb	r3, [r3, #0]
    8cda:	cbnz	r3, 8cde <SdioCard::writeStart(unsigned long)+0x36>
    8cdc:	lsls	r4, r4, #9
    8cde:	mov	r1, r4
    8ce0:	ldr	r0, [pc, #44]	; (8d10 <SdioCard::writeStart(unsigned long)+0x68>)
    8ce2:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8ce6:	cmp	r0, #0
    8ce8:	bne.n	8cc4 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    8cea:	ldr	r3, [pc, #20]	; (8d00 <SdioCard::writeStart(unsigned long)+0x58>)
    8cec:	movs	r2, #14
    8cee:	strb	r2, [r3, #0]
  m_errorLine = line;
    8cf0:	movw	r2, #1111	; 0x457
    8cf4:	ldr	r3, [pc, #12]	; (8d04 <SdioCard::writeStart(unsigned long)+0x5c>)
    8cf6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    8cf8:	b.n	8cc4 <SdioCard::writeStart(unsigned long)+0x1c>
    8cfa:	nop
    8cfc:	.word	0x00008719
    8d00:	.word	0x20008f34
    8d04:	.word	0x20024dd8
    8d08:	.word	0x402c0000
    8d0c:	.word	0x20027bc2
    8d10:	.word	0x193a0020

00008d14 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8d14:	push	{r3, r4, r5, lr}
    8d16:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    8d18:	ldr	r0, [pc, #96]	; (8d7c <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8d1a:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    8d1c:	bl	8500 <waitTimeout(bool (*)())>
    8d20:	cbz	r0, 8d34 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    8d22:	ldr	r3, [pc, #92]	; (8d80 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d24:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8d26:	movs	r0, #0
  m_errorCode = code;
    8d28:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d2a:	mov.w	r2, #408	; 0x198
    8d2e:	ldr	r3, [pc, #84]	; (8d84 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d30:	str	r2, [r3, #0]
}
    8d32:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    8d34:	ldr	r3, [pc, #80]	; (8d88 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    8d36:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d38:	mov	r1, r4
  m_dmaBusy = true;
    8d3a:	strb	r2, [r3, #0]
  m_irqstat = 0;
    8d3c:	ldr	r3, [pc, #76]	; (8d8c <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d3e:	ldr	r2, [pc, #80]	; (8d90 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    8d40:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    8d42:	ldr	r3, [pc, #80]	; (8d94 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d44:	ldr	r0, [pc, #80]	; (8d98 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    8d46:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d48:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d4a:	ldr	r2, [pc, #80]	; (8d9c <cardCMD6(unsigned long, unsigned char*)+0x88>)
    8d4c:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d4e:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8d52:	cbnz	r0, 8d64 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    8d54:	ldr	r3, [pc, #40]	; (8d80 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d56:	movs	r2, #4
    8d58:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d5a:	movw	r2, #415	; 0x19f
    8d5e:	ldr	r3, [pc, #36]	; (8d84 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d60:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    8d62:	b.n	8d32 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    8d64:	bl	8784 <waitDmaStatus()>
    8d68:	cmp	r0, #0
    8d6a:	bne.n	8d32 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    8d6c:	ldr	r3, [pc, #16]	; (8d80 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d6e:	movs	r2, #37	; 0x25
    8d70:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d72:	mov.w	r2, #418	; 0x1a2
    8d76:	ldr	r3, [pc, #12]	; (8d84 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d78:	b.n	8d60 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    8d7a:	nop
    8d7c:	.word	0x00008719
    8d80:	.word	0x20008f34
    8d84:	.word	0x20024dd8
    8d88:	.word	0x20027c84
    8d8c:	.word	0x20026df8
    8d90:	.word	0x00010040
    8d94:	.word	0x402c0000
    8d98:	.word	0x063a0011
    8d9c:	.word	0x117f0002

00008da0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    8da0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    8da4:	movs	r4, #0
  m_initDone = false;
    8da6:	ldr	r7, [pc, #524]	; (8fb4 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    8da8:	ldr	r5, [pc, #524]	; (8fb8 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    8daa:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    8dac:	ldr.w	r8, [pc, #584]	; 8ff8 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    8db0:	ldr	r6, [pc, #520]	; (8fbc <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    8db2:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8db4:	strb	r4, [r0, #9]
  m_initDone = false;
    8db6:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    8db8:	strb	r4, [r5, #0]
  m_highCapacity = false;
    8dba:	strb.w	r4, [r8]
  m_version2 = false;
    8dbe:	strb	r4, [r6, #0]
  initSDHC();
    8dc0:	bl	85a0 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8dc4:	mov	r1, r4
    8dc6:	mov	r0, r4
    8dc8:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8dcc:	mov	r4, r0
    8dce:	cbnz	r0, 8de4 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    8dd0:	movs	r3, #1
  m_errorLine = line;
    8dd2:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    8dd6:	strb	r3, [r5, #0]
  m_errorLine = line;
    8dd8:	ldr	r3, [pc, #484]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8dda:	str	r2, [r3, #0]
}
    8ddc:	mov	r0, r4
    8dde:	add	sp, #68	; 0x44
    8de0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8de4:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8de6:	ldr.w	r9, [pc, #532]	; 8ffc <SdioCard::begin(SdioConfig)+0x25c>
    8dea:	mov.w	r1, #426	; 0x1aa
    8dee:	mov	r0, r9
    8df0:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8df4:	cbz	r0, 8e18 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    8df6:	ldr	r3, [pc, #460]	; (8fc4 <SdioCard::begin(SdioConfig)+0x224>)
    8df8:	ldr	r3, [r3, #16]
    8dfa:	cmp.w	r3, #426	; 0x1aa
    8dfe:	beq.n	8e10 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    8e00:	movs	r3, #6
  m_errorLine = line;
    8e02:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    8e06:	strb	r3, [r5, #0]
  m_errorLine = line;
    8e08:	ldr	r3, [pc, #436]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    8e0a:	movs	r4, #0
  m_errorLine = line;
    8e0c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    8e0e:	b.n	8ddc <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    8e10:	movs	r3, #1
    8e12:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8e14:	ldr	r6, [pc, #432]	; (8fc8 <SdioCard::begin(SdioConfig)+0x228>)
    8e16:	b.n	8e38 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8e18:	subs	r4, #1
    8e1a:	bne.n	8dea <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    8e1c:	ldrb	r3, [r6, #0]
    8e1e:	cmp	r3, #0
    8e20:	bne.n	8e14 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    8e22:	bl	85a0 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    8e26:	mov	r1, r4
    8e28:	mov	r0, r4
    8e2a:	bl	8690 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8e2e:	ldrb	r3, [r6, #0]
    8e30:	cmp	r3, #0
    8e32:	bne.n	8e14 <SdioCard::begin(SdioConfig)+0x74>
    8e34:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    8e38:	bl	a984 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e3c:	ldr.w	r9, [pc, #428]	; 8fec <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    8e40:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e42:	ldr.w	sl, [pc, #444]	; 9000 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8e46:	ldr.w	fp, [pc, #444]	; 9004 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e4a:	movs	r1, #0
    8e4c:	mov	r0, r9
    8e4e:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8e52:	cbnz	r0, 8e60 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    8e54:	movs	r3, #23
  m_errorLine = line;
    8e56:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    8e5a:	strb	r3, [r5, #0]
  m_errorLine = line;
    8e5c:	ldr	r3, [pc, #352]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8e5e:	b.n	8e0a <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e60:	mov	r1, r6
    8e62:	mov	r0, sl
    8e64:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8e68:	cmp	r0, #0
    8e6a:	beq.n	8e54 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8e6c:	bl	a984 <micros>
    8e70:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8e72:	cmp	r0, fp
    8e74:	bhi.n	8e54 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8e76:	ldr	r3, [pc, #332]	; (8fc4 <SdioCard::begin(SdioConfig)+0x224>)
    8e78:	ldr	r2, [r3, #16]
    8e7a:	cmp	r2, #0
    8e7c:	bge.n	8e4a <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    8e7e:	ldr	r1, [r3, #16]
    8e80:	ldr	r2, [pc, #328]	; (8fcc <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e82:	ldr	r0, [pc, #332]	; (8fd0 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    8e84:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e86:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    8e88:	ldr	r3, [r3, #16]
    8e8a:	lsls	r2, r3, #1
    m_highCapacity = true;
    8e8c:	itt	mi
    8e8e:	movmi	r3, #1
    8e90:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e94:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8e98:	mov	r4, r0
    8e9a:	cbnz	r0, 8ea8 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    8e9c:	movs	r3, #2
  m_errorLine = line;
    8e9e:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    8ea2:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ea4:	ldr	r3, [pc, #280]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8ea6:	b.n	8dda <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8ea8:	movs	r1, #0
    8eaa:	ldr	r0, [pc, #296]	; (8fd4 <SdioCard::begin(SdioConfig)+0x234>)
    8eac:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8eb0:	mov	r4, r0
    8eb2:	cbnz	r0, 8ec0 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    8eb4:	movs	r3, #3
  m_errorLine = line;
    8eb6:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    8eba:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ebc:	ldr	r3, [pc, #256]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8ebe:	b.n	8dda <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8ec0:	ldr	r6, [pc, #256]	; (8fc4 <SdioCard::begin(SdioConfig)+0x224>)
    8ec2:	ldr.w	r8, [pc, #324]	; 9008 <SdioCard::begin(SdioConfig)+0x268>
    8ec6:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8ec8:	ldr	r1, [pc, #268]	; (8fd8 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8eca:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8ecc:	ldr	r0, [pc, #268]	; (8fdc <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8ece:	lsls	r3, r3, #16
    8ed0:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8ed4:	bl	872c <readReg16(unsigned long, void*)>
    8ed8:	mov	r4, r0
    8eda:	cbnz	r0, 8ee8 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    8edc:	movs	r3, #7
  m_errorLine = line;
    8ede:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    8ee2:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ee4:	ldr	r3, [pc, #216]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8ee6:	b.n	8dda <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8ee8:	ldr	r1, [pc, #244]	; (8fe0 <SdioCard::begin(SdioConfig)+0x240>)
    8eea:	ldr	r0, [pc, #248]	; (8fe4 <SdioCard::begin(SdioConfig)+0x244>)
    8eec:	bl	872c <readReg16(unsigned long, void*)>
    8ef0:	mov	r4, r0
    8ef2:	cbnz	r0, 8f00 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    8ef4:	movs	r3, #8
  m_errorLine = line;
    8ef6:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    8efa:	strb	r3, [r5, #0]
  m_errorLine = line;
    8efc:	ldr	r3, [pc, #192]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8efe:	b.n	8dda <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8f00:	ldr.w	r1, [r8]
    8f04:	ldr	r0, [pc, #224]	; (8fe8 <SdioCard::begin(SdioConfig)+0x248>)
    8f06:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8f0a:	mov	r4, r0
    8f0c:	cbnz	r0, 8f1a <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    8f0e:	movs	r3, #5
  m_errorLine = line;
    8f10:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    8f14:	strb	r3, [r5, #0]
  m_errorLine = line;
    8f16:	ldr	r3, [pc, #168]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8f18:	b.n	8dda <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8f1a:	ldr.w	r1, [r8]
    8f1e:	ldr	r0, [pc, #204]	; (8fec <SdioCard::begin(SdioConfig)+0x24c>)
    8f20:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8f24:	cbz	r0, 8f6e <SdioCard::begin(SdioConfig)+0x1ce>
    8f26:	movs	r1, #2
    8f28:	ldr	r0, [pc, #196]	; (8ff0 <SdioCard::begin(SdioConfig)+0x250>)
    8f2a:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    8f2e:	mov	r4, r0
    8f30:	cbz	r0, 8f6e <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8f32:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    8f34:	mov	r1, sp
    8f36:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8f3a:	bic.w	r3, r3, #6
    8f3e:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8f40:	ldr	r3, [r6, #40]	; 0x28
    8f42:	orr.w	r3, r3, #2
    8f46:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8f48:	mov.w	r3, #1048592	; 0x100010
    8f4c:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    8f4e:	bl	8d14 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    8f52:	cbnz	r0, 8f7a <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    8f54:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    8f58:	movs	r0, #5
    8f5a:	bl	8350 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    8f5e:	mov	r0, r2
    8f60:	bl	83f8 <setSdclk(unsigned long)>
  if (enable) {
    8f64:	bl	8570 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    8f68:	movs	r3, #1
    8f6a:	strb	r3, [r7, #0]
  return true;
    8f6c:	b.n	8ddc <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    8f6e:	movs	r3, #20
  m_errorLine = line;
    8f70:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    8f74:	strb	r3, [r5, #0]
  m_errorLine = line;
    8f76:	ldr	r3, [pc, #72]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    8f78:	b.n	8e0a <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    8f7a:	ldrb.w	r3, [sp, #13]
    8f7e:	lsls	r3, r3, #30
    8f80:	bpl.n	8f54 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    8f82:	ldr	r6, [pc, #60]	; (8fc0 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    8f84:	mov	r1, sp
    8f86:	ldr	r0, [pc, #108]	; (8ff4 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    8f88:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    8f8c:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    8f90:	bl	8d14 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    8f94:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    8f98:	cbz	r0, 8fa2 <SdioCard::begin(SdioConfig)+0x202>
    8f9a:	and.w	r3, r3, #15
    8f9e:	cmp	r3, #1
    8fa0:	beq.n	8fac <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    8fa2:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    8fa6:	str.w	r8, [r6]
    8faa:	b.n	8f54 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    8fac:	movw	r2, #50000	; 0xc350
    8fb0:	b.n	8f58 <SdioCard::begin(SdioConfig)+0x1b8>
    8fb2:	nop
    8fb4:	.word	0x20027bc0
    8fb8:	.word	0x20008f34
    8fbc:	.word	0x20027bc1
    8fc0:	.word	0x20024dd8
    8fc4:	.word	0x402c0000
    8fc8:	.word	0x40300000
    8fcc:	.word	0x200267ec
    8fd0:	.word	0x02090000
    8fd4:	.word	0x031a0000
    8fd8:	.word	0x20027bd4
    8fdc:	.word	0x09090000
    8fe0:	.word	0x20027bc4
    8fe4:	.word	0x0a090000
    8fe8:	.word	0x071b0000
    8fec:	.word	0x371a0000
    8ff0:	.word	0x061a0000
    8ff4:	.word	0x80fffff1
    8ff8:	.word	0x20027bc2
    8ffc:	.word	0x081a0000
    9000:	.word	0x29020000
    9004:	.word	0x000f4240
    9008:	.word	0x200267f0

0000900c <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    900c:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    900e:	ldr	r3, [pc, #148]	; (90a4 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9010:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9012:	ldr	r2, [r3, #36]	; 0x24
    9014:	lsls	r0, r2, #22
    9016:	bmi.n	9034 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9018:	ldr	r2, [r3, #40]	; 0x28
    901a:	bic.w	r2, r2, #65536	; 0x10000
    901e:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9020:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9022:	ldr	r2, [r3, #40]	; 0x28
    9024:	orr.w	r2, r2, #131072	; 0x20000
    9028:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    902a:	ldr	r2, [r3, #40]	; 0x28
    902c:	orr.w	r2, r2, #65536	; 0x10000
    9030:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9032:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9034:	ldr	r0, [pc, #112]	; (90a8 <SdioCard::readData(unsigned char*)+0x9c>)
    9036:	bl	8500 <waitTimeout(bool (*)())>
    903a:	cbz	r0, 904e <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    903c:	ldr	r3, [pc, #108]	; (90ac <SdioCard::readData(unsigned char*)+0xa0>)
    903e:	movs	r2, #26
    9040:	strb	r2, [r3, #0]
  m_errorLine = line;
    9042:	movw	r2, #854	; 0x356
    9046:	ldr	r3, [pc, #104]	; (90b0 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9048:	movs	r0, #0
  m_errorLine = line;
    904a:	str	r2, [r3, #0]
}
    904c:	pop	{r3, r4, r5, pc}
    904e:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9052:	ldr	r5, [pc, #80]	; (90a4 <SdioCard::readData(unsigned char*)+0x98>)
    9054:	ldr	r3, [r5, #36]	; 0x24
    9056:	lsls	r1, r3, #20
    9058:	bpl.n	9054 <SdioCard::readData(unsigned char*)+0x48>
    905a:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    905c:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9060:	ldr	r0, [r5, #32]
    9062:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9066:	cmp	r3, r1
    9068:	bne.n	9060 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    906a:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    906c:	cmp	r4, r2
    906e:	bne.n	9054 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9070:	ldr	r0, [pc, #64]	; (90b4 <SdioCard::readData(unsigned char*)+0xa8>)
    9072:	bl	8500 <waitTimeout(bool (*)())>
    9076:	cbz	r0, 9086 <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9078:	ldr	r3, [pc, #48]	; (90ac <SdioCard::readData(unsigned char*)+0xa0>)
    907a:	movs	r2, #29
    907c:	strb	r2, [r3, #0]
  m_errorLine = line;
    907e:	movw	r2, #865	; 0x361
    9082:	ldr	r3, [pc, #44]	; (90b0 <SdioCard::readData(unsigned char*)+0xa4>)
    9084:	b.n	9048 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9086:	ldr	r2, [r5, #48]	; 0x30
    9088:	ldr	r3, [pc, #44]	; (90b8 <SdioCard::readData(unsigned char*)+0xac>)
    908a:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    908c:	ldr	r2, [r3, #0]
    908e:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9090:	ldr	r2, [r3, #0]
    9092:	lsls	r2, r2, #30
    9094:	bpl.n	904c <SdioCard::readData(unsigned char*)+0x40>
    9096:	ldr	r2, [r3, #0]
    9098:	ldr	r3, [pc, #32]	; (90bc <SdioCard::readData(unsigned char*)+0xb0>)
    909a:	tst	r2, r3
    909c:	ite	eq
    909e:	moveq	r0, #1
    90a0:	movne	r0, #0
    90a2:	b.n	904c <SdioCard::readData(unsigned char*)+0x40>
    90a4:	.word	0x402c0000
    90a8:	.word	0x000083b9
    90ac:	.word	0x20008f34
    90b0:	.word	0x20024dd8
    90b4:	.word	0x000083e1
    90b8:	.word	0x20026df8
    90bc:	.word	0x117f0000

000090c0 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    90c0:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    90c2:	ldr	r0, [pc, #80]	; (9114 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    90c4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    90c6:	bl	8524 <yieldTimeout(bool (*)())>
    90ca:	cbz	r0, 90de <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    90cc:	ldr	r3, [pc, #72]	; (9118 <SdioCard::readStart(unsigned long)+0x58>)
    90ce:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    90d0:	movs	r0, #0
  m_errorCode = code;
    90d2:	strb	r2, [r3, #0]
  m_errorLine = line;
    90d4:	movw	r2, #945	; 0x3b1
    90d8:	ldr	r3, [pc, #64]	; (911c <SdioCard::readStart(unsigned long)+0x5c>)
    90da:	str	r2, [r3, #0]
}
    90dc:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    90de:	ldr	r3, [pc, #64]	; (9120 <SdioCard::readStart(unsigned long)+0x60>)
    90e0:	ldr	r2, [r3, #40]	; 0x28
    90e2:	orr.w	r2, r2, #65536	; 0x10000
    90e6:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    90e8:	mov.w	r2, #512	; 0x200
    90ec:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90ee:	ldr	r3, [pc, #52]	; (9124 <SdioCard::readStart(unsigned long)+0x64>)
    90f0:	ldrb	r3, [r3, #0]
    90f2:	cbnz	r3, 90f6 <SdioCard::readStart(unsigned long)+0x36>
    90f4:	lsls	r4, r4, #9
    90f6:	mov	r1, r4
    90f8:	ldr	r0, [pc, #44]	; (9128 <SdioCard::readStart(unsigned long)+0x68>)
    90fa:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    90fe:	cmp	r0, #0
    9100:	bne.n	90dc <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9102:	ldr	r3, [pc, #20]	; (9118 <SdioCard::readStart(unsigned long)+0x58>)
    9104:	movs	r2, #12
    9106:	strb	r2, [r3, #0]
  m_errorLine = line;
    9108:	movw	r2, #957	; 0x3bd
    910c:	ldr	r3, [pc, #12]	; (911c <SdioCard::readStart(unsigned long)+0x5c>)
    910e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9110:	b.n	90dc <SdioCard::readStart(unsigned long)+0x1c>
    9112:	nop
    9114:	.word	0x00008719
    9118:	.word	0x20008f34
    911c:	.word	0x20024dd8
    9120:	.word	0x402c0000
    9124:	.word	0x20027bc2
    9128:	.word	0x123a0030

0000912c <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    912c:	push	{r4, r5, r6, r7, lr}
    912e:	ldrb	r5, [r0, #8]
    9130:	sub.w	sp, sp, #516	; 0x204
    9134:	mov	r4, r0
    9136:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9138:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    913c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    913e:	beq.n	9180 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9140:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9142:	ldr	r0, [pc, #132]	; (91c8 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9144:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9148:	ite	eq
    914a:	moveq	r4, r2
    914c:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    914e:	mov	r2, r4
    9150:	bl	87b4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9154:	mov	r5, r0
    9156:	cbnz	r0, 916e <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9158:	ldr	r3, [pc, #112]	; (91cc <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    915a:	movs	r2, #11
    915c:	strb	r2, [r3, #0]
  m_errorLine = line;
    915e:	mov.w	r2, #884	; 0x374
    9162:	ldr	r3, [pc, #108]	; (91d0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9164:	str	r2, [r3, #0]
}
    9166:	mov	r0, r5
    9168:	add.w	sp, sp, #516	; 0x204
    916c:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    916e:	cmp	r4, r6
    9170:	beq.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9172:	mov.w	r2, #512	; 0x200
    9176:	mov	r1, sp
    9178:	mov	r0, r6
    917a:	bl	9488 <memcpy>
    917e:	b.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9180:	bl	8aac <waitTransferComplete()>
    9184:	cmp	r0, #0
    9186:	beq.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9188:	ldrb	r3, [r4, #9]
    918a:	cmp	r3, #1
    918c:	bne.n	9194 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    918e:	ldr	r3, [r4, #4]
    9190:	cmp	r3, r7
    9192:	beq.n	91b2 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9194:	ldr	r3, [r4, #0]
    9196:	mov	r0, r4
    9198:	ldr	r3, [r3, #32]
    919a:	blx	r3
    919c:	cmp	r0, #0
    919e:	beq.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    91a0:	mov	r1, r7
    91a2:	mov	r0, r4
    91a4:	bl	90c0 <SdioCard::readStart(unsigned long)>
    91a8:	cmp	r0, #0
    91aa:	beq.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    91ac:	movs	r3, #1
      m_curSector = sector;
    91ae:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    91b0:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    91b2:	mov	r1, r6
    91b4:	mov	r0, r4
    91b6:	bl	900c <SdioCard::readData(unsigned char*)>
    91ba:	cmp	r0, #0
    91bc:	beq.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    91be:	ldr	r3, [r4, #4]
  return true;
    91c0:	mov	r5, r0
    m_curSector++;
    91c2:	adds	r3, #1
    91c4:	str	r3, [r4, #4]
    91c6:	b.n	9166 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    91c8:	.word	0x113a0011
    91cc:	.word	0x20008f34
    91d0:	.word	0x20024dd8

000091d4 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    91d4:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91d6:	ldr	r2, [pc, #76]	; (9224 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    91d8:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    91da:	mov	r6, r1
  m_curState = IDLE_STATE;
    91dc:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91de:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91e0:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91e2:	ldr	r0, [pc, #68]	; (9228 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91e4:	bic.w	r3, r3, #65536	; 0x10000
    91e8:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91ea:	bl	8690 <cardCommand(unsigned long, unsigned long)>
    91ee:	mov	r4, r0
    91f0:	cbnz	r0, 9204 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    91f2:	ldr	r3, [pc, #56]	; (922c <SdioCard::stopTransmission(bool)+0x58>)
    91f4:	movs	r2, #9
    91f6:	strb	r2, [r3, #0]
  m_errorLine = line;
    91f8:	movw	r2, #979	; 0x3d3
    91fc:	ldr	r3, [pc, #48]	; (9230 <SdioCard::stopTransmission(bool)+0x5c>)
    91fe:	str	r2, [r3, #0]
}
    9200:	mov	r0, r4
    9202:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9204:	cmp	r6, #0
    9206:	beq.n	9200 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9208:	ldr	r0, [pc, #40]	; (9234 <SdioCard::stopTransmission(bool)+0x60>)
    920a:	bl	8524 <yieldTimeout(bool (*)())>
    920e:	cmp	r0, #0
    9210:	beq.n	9200 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9212:	ldr	r3, [pc, #24]	; (922c <SdioCard::stopTransmission(bool)+0x58>)
    9214:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9216:	mov	r4, r5
  m_errorCode = code;
    9218:	strb	r2, [r3, #0]
  m_errorLine = line;
    921a:	movw	r2, #983	; 0x3d7
    921e:	ldr	r3, [pc, #16]	; (9230 <SdioCard::stopTransmission(bool)+0x5c>)
    9220:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9222:	b.n	9200 <SdioCard::stopTransmission(bool)+0x2c>
    9224:	.word	0x402c0000
    9228:	.word	0x0cdb0000
    922c:	.word	0x20008f34
    9230:	.word	0x20024dd8
    9234:	.word	0x00008399

00009238 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9238:	push	{r4, lr}
    923a:	mov	r4, r0
  if (!waitTransferComplete()) {
    923c:	bl	8aac <waitTransferComplete()>
    9240:	cbz	r0, 9252 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9242:	ldrb	r3, [r4, #9]
    9244:	cbz	r3, 9252 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9246:	mov	r0, r4
    9248:	movs	r1, #1
}
    924a:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    924e:	b.w	91d4 <SdioCard::stopTransmission(bool)>
}
    9252:	pop	{r4, pc}

00009254 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9254:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9256:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9258:	tst.w	r3, #2031616	; 0x1f0000
    925c:	beq.n	9256 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    925e:	ldr	r0, [r0, #116]	; 0x74
	}
    9260:	uxtb	r0, r0
    9262:	bx	lr

00009264 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9264:	push	{r0, r1, r2, r4, r5, lr}
    9266:	add	r3, sp, #8
    9268:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    926c:	ldrb	r2, [r0, #19]
    926e:	mov	r3, r1
    9270:	cmp	r2, #0
    9272:	beq.n	92e8 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    9274:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9276:	ldrb	r2, [r0, #19]
    9278:	lsls	r1, r2, #31
    927a:	bpl.n	928e <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    927c:	mov.w	r4, #3758153728	; 0xe000e000
    9280:	ldr	r5, [r0, #20]
    9282:	ldr.w	r1, [r4, #384]	; 0x180
    9286:	ands	r1, r5
    9288:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    928a:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    928e:	lsls	r5, r2, #30
    9290:	bpl.n	92a4 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9292:	mov.w	r4, #3758153728	; 0xe000e000
    9296:	ldr	r5, [r0, #24]
    9298:	ldr.w	r1, [r4, #388]	; 0x184
    929c:	ands	r1, r5
    929e:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    92a0:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    92a4:	lsls	r4, r2, #29
    92a6:	bpl.n	92ba <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    92a8:	mov.w	r4, #3758153728	; 0xe000e000
    92ac:	ldr	r5, [r0, #28]
    92ae:	ldr.w	r1, [r4, #392]	; 0x188
    92b2:	ands	r1, r5
    92b4:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    92b6:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    92ba:	lsls	r1, r2, #28
    92bc:	bpl.n	92d0 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    92be:	mov.w	r4, #3758153728	; 0xe000e000
    92c2:	ldr	r5, [r0, #32]
    92c4:	ldr.w	r1, [r4, #396]	; 0x18c
    92c8:	ands	r1, r5
    92ca:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    92cc:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    92d0:	lsls	r2, r2, #27
    92d2:	bpl.n	92e6 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    92d4:	mov.w	r1, #3758153728	; 0xe000e000
    92d8:	ldr	r4, [r0, #36]	; 0x24
    92da:	ldr.w	r2, [r1, #400]	; 0x190
    92de:	ands	r2, r4
    92e0:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    92e2:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    92e6:	cpsie	i
		if (settings.clock() != _clock) {
    92e8:	ldr	r2, [r0, #8]
    92ea:	cmp	r3, r2
    92ec:	beq.n	933c <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    92ee:	ldr	r2, [pc, #112]	; (9360 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    92f0:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    92f2:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    92f4:	ldr	r1, [pc, #108]	; (9364 <SPIClass::beginTransaction(SPISettings)+0x100>)
    92f6:	ubfx	r4, r2, #4, #2
    92fa:	ubfx	r2, r2, #26, #3
    92fe:	ldr.w	r4, [r1, r4, lsl #2]
    9302:	adds	r2, #1
    9304:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    9308:	cbz	r3, 9356 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    930a:	cmp	r3, r1
    930c:	bhi.n	9326 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    930e:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    9312:	udiv	r1, r1, r2
    9316:	cmp	r3, r1
    9318:	bcs.n	931c <SPIClass::beginTransaction(SPISettings)+0xb8>
    931a:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    931c:	cmp.w	r2, #258	; 0x102
    9320:	bcs.n	932a <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    9322:	cmp	r2, #2
    9324:	bhi.n	932e <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    9326:	movs	r3, #0
    9328:	b.n	9330 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    932a:	movw	r2, #257	; 0x101
				div = d-2;
    932e:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9330:	lsrs	r1, r3, #1
    9332:	lsls	r2, r1, #16
    9334:	orr.w	r2, r2, r1, lsl #8
    9338:	orrs	r3, r2
    933a:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    933c:	ldr	r3, [r0, #0]
		port().CR = 0;
    933e:	movs	r2, #0
    9340:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9342:	movs	r2, #3
    9344:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9346:	ldr	r2, [r0, #12]
    9348:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    934a:	ldr	r2, [sp, #4]
    934c:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    934e:	movs	r2, #1
    9350:	str	r2, [r3, #16]
	}
    9352:	add	sp, #12
    9354:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    9356:	cmp	r4, r2
    9358:	bcc.n	9330 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    935a:	mov	r2, r1
    935c:	b.n	931a <SPIClass::beginTransaction(SPISettings)+0xb6>
    935e:	nop
    9360:	.word	0x400fc000
    9364:	.word	0x200005d4

00009368 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9368:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    936c:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    936e:	ldr	r0, [r0, #0]
    9370:	bl	9264 <SPIClass::beginTransaction(SPISettings)>
}
    9374:	pop	{r3, pc}

00009376 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9376:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9378:	ldrb	r2, [r3, #19]
    937a:	cbz	r2, 93c2 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    937c:	lsls	r0, r2, #31
    937e:	bpl.n	938a <SdSpiArduinoDriver::deactivate()+0x14>
    9380:	ldr	r0, [r3, #40]	; 0x28
    9382:	mov.w	r1, #3758153728	; 0xe000e000
    9386:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    938a:	lsls	r1, r2, #30
    938c:	bpl.n	9398 <SdSpiArduinoDriver::deactivate()+0x22>
    938e:	ldr	r0, [r3, #44]	; 0x2c
    9390:	mov.w	r1, #3758153728	; 0xe000e000
    9394:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9398:	lsls	r0, r2, #29
    939a:	bpl.n	93a6 <SdSpiArduinoDriver::deactivate()+0x30>
    939c:	ldr	r0, [r3, #48]	; 0x30
    939e:	mov.w	r1, #3758153728	; 0xe000e000
    93a2:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    93a6:	lsls	r1, r2, #28
    93a8:	bpl.n	93b4 <SdSpiArduinoDriver::deactivate()+0x3e>
    93aa:	ldr	r0, [r3, #52]	; 0x34
    93ac:	mov.w	r1, #3758153728	; 0xe000e000
    93b0:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    93b4:	lsls	r2, r2, #27
    93b6:	bpl.n	93c2 <SdSpiArduinoDriver::deactivate()+0x4c>
    93b8:	ldr	r2, [r3, #56]	; 0x38
    93ba:	mov.w	r3, #3758153728	; 0xe000e000
    93be:	str.w	r2, [r3, #272]	; 0x110
}
    93c2:	bx	lr

000093c4 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    93c4:	ldr	r0, [r0, #0]
    93c6:	b.w	47da <SPIClass::end()>

000093ca <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    93ca:	ldr	r3, [r0, #0]
    93cc:	movs	r1, #255	; 0xff
    93ce:	ldr	r0, [r3, #0]
    93d0:	b.w	9254 <SPIClass::transfer(unsigned char) [clone .isra.0]>

000093d4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    93d4:	push	{r0, r1, r2, r4, r5, lr}
    93d6:	mov	r4, r1
    93d8:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    93da:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    93dc:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    93de:	mov	r0, r4
    93e0:	bl	9444 <memset>
		transfer(buf, buf, count);
    93e4:	ldr	r0, [r5, #0]
    93e6:	ldr	r3, [sp, #4]
    93e8:	mov	r2, r4
    93ea:	mov	r1, r4
    93ec:	bl	4784 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    93f0:	movs	r0, #0
    93f2:	add	sp, #12
    93f4:	pop	{r4, r5, pc}

000093f6 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    93f6:	ldr	r3, [r0, #0]
    93f8:	ldr	r0, [r3, #0]
    93fa:	b.w	9254 <SPIClass::transfer(unsigned char) [clone .isra.0]>

000093fe <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    93fe:	subs	r3, r2, #1
    9400:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9404:	push	{r4, r5, r6, lr}
    9406:	mov	r6, r0
    9408:	sub.w	sp, sp, #512	; 0x200
    940c:	mov	r4, r1
    940e:	mov	r5, r2
  if (0 < count && count <= 512) {
    9410:	bcc.n	9426 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    9412:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9414:	cmp	r4, r5
    9416:	beq.n	9438 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9418:	ldr	r3, [r6, #0]
    941a:	ldrb.w	r1, [r4], #1
    941e:	ldr	r0, [r3, #0]
    9420:	bl	9254 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    9424:	b.n	9414 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    9426:	mov	r0, sp
    9428:	bl	9488 <memcpy>
    942c:	mov	r2, sp
    942e:	mov	r3, r5
    9430:	ldr	r0, [r6, #0]
    9432:	mov	r1, r2
    9434:	bl	4784 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9438:	add.w	sp, sp, #512	; 0x200
    943c:	pop	{r4, r5, r6, pc}

0000943e <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    943e:	b.w	ad54 <digitalWrite>
	...

00009444 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    9444:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    9446:	cbz	r2, 9484 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9448:	cmp	r2, #16
    blt     .L_bytewise
    944a:	blt.n	947c <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    944c:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9450:	cbz	r3, 9460 <memset+0x1c>
    rsb     r3, #8
    9452:	rsb	r3, r3, #8
    subs    r2, r3
    9456:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9458:	subs	r3, #1
    strb    r1, [r0], #1
    945a:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    945e:	bgt.n	9458 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9460:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    9462:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    9466:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    946a:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    946c:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    946e:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9470:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    9474:	bgt.n	946e <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    9476:	ands.w	r2, r2, #7
    beq     .L_done
    947a:	beq.n	9484 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    947c:	subs	r2, #1
    strb    r1, [r0], #1
    947e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    9482:	bgt.n	947c <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    9484:	pop	{r0, pc}
    9486:	nop

00009488 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9488:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    948a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    948e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9492:	bne.n	9570 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9494:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9496:	bcc.n	951c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9498:	ldr.w	r3, [r1], #4
    949c:	str.w	r3, [r0], #4
    94a0:	ldr.w	r3, [r1], #4
    94a4:	str.w	r3, [r0], #4
    94a8:	ldr.w	r3, [r1], #4
    94ac:	str.w	r3, [r0], #4
    94b0:	ldr.w	r3, [r1], #4
    94b4:	str.w	r3, [r0], #4
    94b8:	ldr.w	r3, [r1], #4
    94bc:	str.w	r3, [r0], #4
    94c0:	ldr.w	r3, [r1], #4
    94c4:	str.w	r3, [r0], #4
    94c8:	ldr.w	r3, [r1], #4
    94cc:	str.w	r3, [r0], #4
    94d0:	ldr.w	r3, [r1], #4
    94d4:	str.w	r3, [r0], #4
    94d8:	ldr.w	r3, [r1], #4
    94dc:	str.w	r3, [r0], #4
    94e0:	ldr.w	r3, [r1], #4
    94e4:	str.w	r3, [r0], #4
    94e8:	ldr.w	r3, [r1], #4
    94ec:	str.w	r3, [r0], #4
    94f0:	ldr.w	r3, [r1], #4
    94f4:	str.w	r3, [r0], #4
    94f8:	ldr.w	r3, [r1], #4
    94fc:	str.w	r3, [r0], #4
    9500:	ldr.w	r3, [r1], #4
    9504:	str.w	r3, [r0], #4
    9508:	ldr.w	r3, [r1], #4
    950c:	str.w	r3, [r0], #4
    9510:	ldr.w	r3, [r1], #4
    9514:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9518:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    951a:	bcs.n	9498 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    951c:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    951e:	bcc.n	9544 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9520:	ldr.w	r3, [r1], #4
    9524:	str.w	r3, [r0], #4
    9528:	ldr.w	r3, [r1], #4
    952c:	str.w	r3, [r0], #4
    9530:	ldr.w	r3, [r1], #4
    9534:	str.w	r3, [r0], #4
    9538:	ldr.w	r3, [r1], #4
    953c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9540:	subs	r2, #16
	bhs	.Lmid_block_loop
    9542:	bcs.n	9520 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9544:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9546:	bcc.n	9554 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9548:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    954c:	str.w	r3, [r0], #4
	subs	r2, #4
    9550:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9552:	bcs.n	9548 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9554:	adds	r2, #4
	beq	.Ldone
    9556:	beq.n	956a <memcpy+0xe2>

	lsls	r2, r2, #31
    9558:	lsls	r2, r2, #31
	itt ne
    955a:	itt	ne
	ldrbne  r3, [r1], #1
    955c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9560:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9564:	bcc.n	956a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9566:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9568:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    956a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    956c:	bx	lr
    956e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9570:	cmp	r2, #8
	blo	.Lbyte_copy
    9572:	bcc.n	959c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9574:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9576:	beq.n	9494 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9578:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    957c:	beq.n	9494 <memcpy+0xc>

	rsb	r3, #4
    957e:	rsb	r3, r3, #4
	subs	r2, r3
    9582:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9584:	lsls	r3, r3, #31
	itt ne
    9586:	itt	ne
	ldrbne  r3, [r1], #1
    9588:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    958c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9590:	bcc.n	9494 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9592:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9596:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    959a:	b.n	9494 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    959c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    959e:	bcc.n	9554 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    95a0:	subs	r2, #1
	ldrb    r3, [r1], #1
    95a2:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    95a6:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    95aa:	bcs.n	95a0 <memcpy+0x118>

	ldrb	r3, [r1]
    95ac:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    95ae:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    95b0:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    95b2:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    95b4:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    95b6:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    95b8:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    95ba:	bx	lr

000095bc <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    95bc:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    95be:	ldr	r4, [pc, #80]	; (9610 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95c0:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95c4:	ldr	r5, [pc, #76]	; (9614 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95c6:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    95ca:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95ce:	ldr	r7, [pc, #72]	; (9618 <rx_queue_transfer+0x5c>)
    95d0:	add.w	r5, r5, r0, lsl #5
{
    95d4:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95d6:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95da:	mov	r1, r4
    95dc:	ldrh	r2, [r7, #0]
    95de:	mov	r0, r5
    95e0:	bl	a660 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    95e4:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    95e6:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    95e8:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    95ec:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    95f0:	adds	r4, #32
	} while (location < end_addr);
    95f2:	cmp	r3, r4
    95f4:	bhi.n	95ec <rx_queue_transfer+0x30>
	asm("dsb");
    95f6:	dsb	sy
	asm("isb");
    95fa:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    95fe:	movs	r0, #3
    9600:	mov	r1, r5
    9602:	bl	a6b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9606:	mov.w	r3, #131072	; 0x20000
    960a:	str.w	r3, [r6, #268]	; 0x10c
}
    960e:	pop	{r3, r4, r5, r6, r7, pc}
    9610:	.word	0x20200800
    9614:	.word	0x2000b740
    9618:	.word	0x20027bb6

0000961c <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    961c:	ldr	r3, [r0, #4]
    961e:	ldr	r2, [pc, #136]	; (96a8 <rx_event+0x8c>)
    9620:	ubfx	r3, r3, #16, #15
{
    9624:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9628:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    962a:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    962c:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    962e:	cmp	r4, #0
    9630:	ble.n	967a <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    9632:	ldr	r2, [pc, #120]	; (96ac <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9634:	uxth.w	sl, r4
		if (head != rx_tail) {
    9638:	ldr	r0, [pc, #116]	; (96b0 <rx_event+0x94>)
		uint32_t head = rx_head;
    963a:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    963c:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    963e:	uxtb	r3, r1
		if (head != rx_tail) {
    9640:	ldr.w	r8, [pc, #128]	; 96c4 <rx_event+0xa8>
    9644:	cmp	r1, r0
    9646:	ldr	r7, [pc, #108]	; (96b4 <rx_event+0x98>)
    9648:	ldr	r1, [pc, #108]	; (96b8 <rx_event+0x9c>)
    964a:	beq.n	9684 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    964c:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    9650:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9654:	rsb	r0, r6, #512	; 0x200
    9658:	cmp	r4, r0
    965a:	bhi.n	9684 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    965c:	ldr	r3, [pc, #92]	; (96bc <rx_event+0xa0>)
    965e:	add.w	r0, r6, r9, lsl #9
    9662:	mov	r2, r4
				rx_count[ii] = count + len;
    9664:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9666:	add.w	r1, r3, r5, lsl #9
    966a:	add	r0, r3
    966c:	bl	9488 <memcpy>
				rx_available += len;
    9670:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    9672:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    9676:	add	r3, r4
    9678:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    967a:	mov	r0, r5
	}
}
    967c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    9680:	b.w	95bc <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    9684:	adds	r3, #1
		rx_index[i] = 0;
    9686:	movs	r6, #0
    9688:	ldr	r0, [pc, #52]	; (96c0 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    968a:	cmp	r3, #9
		rx_count[i] = len;
    968c:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    9690:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9694:	it	cs
    9696:	movcs	r3, r6
		rx_list[head] = i;
    9698:	strb	r5, [r1, r3]
		rx_head = head;
    969a:	uxtb	r3, r3
    969c:	strb	r3, [r2, #0]
		rx_available += len;
    969e:	ldr	r3, [r7, #0]
    96a0:	add	r4, r3
    96a2:	str	r4, [r7, #0]
}
    96a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    96a8:	.word	0x20027bb6
    96ac:	.word	0x20027d12
    96b0:	.word	0x20027d22
    96b4:	.word	0x20027484
    96b8:	.word	0x20027d14
    96bc:	.word	0x20200800
    96c0:	.word	0x20027ba6
    96c4:	.word	0x20027b96

000096c8 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    96c8:	ldr	r3, [pc, #112]	; (973c <usb_serial_flush_callback+0x74>)
{
    96ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    96ce:	ldrb	r2, [r3, #0]
    96d0:	and.w	r3, r2, #255	; 0xff
    96d4:	cbnz	r2, 9736 <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    96d6:	ldr	r2, [pc, #104]	; (9740 <usb_serial_flush_callback+0x78>)
    96d8:	ldrb	r2, [r2, #0]
    96da:	cbz	r2, 9736 <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    96dc:	ldr	r7, [pc, #100]	; (9744 <usb_serial_flush_callback+0x7c>)
    96de:	ldrh	r5, [r7, #0]
    96e0:	cbz	r5, 9736 <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    96e2:	ldr	r6, [pc, #100]	; (9748 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    96e4:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    96e8:	ldr	r1, [pc, #96]	; (974c <usb_serial_flush_callback+0x84>)
    96ea:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    96ec:	ldr	r4, [pc, #96]	; (9750 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    96ee:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    96f2:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    96f6:	mov	r2, r5
    96f8:	mov	r0, r8
    96fa:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    96fc:	add	r5, r4
    96fe:	bl	a660 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    9702:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9706:	mov.w	r3, #3758153728	; 0xe000e000
    970a:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    970e:	adds	r4, #32
	} while (location < end_addr);
    9710:	cmp	r5, r4
    9712:	bhi.n	970a <usb_serial_flush_callback+0x42>
	asm("dsb");
    9714:	dsb	sy
	asm("isb");
    9718:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    971c:	movs	r0, #3
    971e:	mov	r1, r8
    9720:	bl	a68c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9724:	ldrb	r3, [r6, #0]
    9726:	movs	r2, #0
    9728:	adds	r3, #1
	tx_available = 0;
    972a:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    972c:	uxtb	r3, r3
    972e:	cmp	r3, #3
    9730:	ite	ls
    9732:	strbls	r3, [r6, #0]
    9734:	strbhi	r2, [r6, #0]
}
    9736:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    973a:	nop
    973c:	.word	0x20027d28
    9740:	.word	0x20027d2a
    9744:	.word	0x20027bba
    9748:	.word	0x20027d26
    974c:	.word	0x2000b8c0
    9750:	.word	0x20201800

00009754 <usb_serial_reset>:
}
    9754:	bx	lr
	...

00009758 <usb_serial_configure>:
	if (usb_high_speed) {
    9758:	ldr	r3, [pc, #180]	; (9810 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    975a:	movs	r2, #128	; 0x80
    975c:	movs	r1, #0
    975e:	ldr	r0, [pc, #180]	; (9814 <usb_serial_configure+0xbc>)
{
    9760:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    9762:	ldrb	r3, [r3, #0]
	tx_head = 0;
    9764:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    9766:	ldr	r5, [pc, #176]	; (9818 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    9768:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    976a:	ldr	r6, [pc, #176]	; (981c <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    976c:	ite	eq
    976e:	moveq	r3, #64	; 0x40
    9770:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    9774:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9776:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9778:	bl	9444 <memset>
	tx_head = 0;
    977c:	ldr	r3, [pc, #160]	; (9820 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    977e:	mov.w	r2, #256	; 0x100
    9782:	mov	r1, r4
    9784:	ldr	r0, [pc, #156]	; (9824 <usb_serial_configure+0xcc>)
	tx_head = 0;
    9786:	strb	r4, [r3, #0]
	tx_available = 0;
    9788:	ldr	r3, [pc, #156]	; (9828 <usb_serial_configure+0xd0>)
    978a:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    978c:	bl	9444 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9790:	movs	r2, #16
    9792:	mov	r1, r4
    9794:	ldr	r0, [pc, #148]	; (982c <usb_serial_configure+0xd4>)
    9796:	bl	9444 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    979a:	movs	r2, #16
    979c:	mov	r1, r4
    979e:	ldr	r0, [pc, #144]	; (9830 <usb_serial_configure+0xd8>)
    97a0:	bl	9444 <memset>
	rx_head = 0;
    97a4:	ldr	r3, [pc, #140]	; (9834 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    97a6:	mov	r2, r4
    97a8:	movs	r1, #16
	rx_head = 0;
    97aa:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    97ac:	movs	r0, #2
	rx_tail = 0;
    97ae:	ldr	r3, [pc, #136]	; (9838 <usb_serial_configure+0xe0>)
    97b0:	strb	r4, [r3, #0]
	rx_available = 0;
    97b2:	ldr	r3, [pc, #136]	; (983c <usb_serial_configure+0xe4>)
    97b4:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    97b6:	mov	r3, r4
    97b8:	bl	a620 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    97bc:	ldr	r3, [pc, #128]	; (9840 <usb_serial_configure+0xe8>)
    97be:	mov	r2, r4
    97c0:	ldrh	r1, [r6, #0]
    97c2:	movs	r0, #3
    97c4:	bl	a5e0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    97c8:	mov	r3, r4
    97ca:	movs	r2, #1
    97cc:	ldrh	r1, [r5, #0]
    97ce:	movs	r0, #3
    97d0:	bl	a620 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    97d4:	mov	r0, r4
    97d6:	adds	r4, #1
    97d8:	bl	95bc <rx_queue_transfer>
    97dc:	cmp	r4, #8
    97de:	bne.n	97d4 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    97e0:	ldr	r3, [pc, #96]	; (9844 <usb_serial_configure+0xec>)
    97e2:	ldr	r2, [pc, #100]	; (9848 <usb_serial_configure+0xf0>)
    97e4:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    97e6:	movs	r2, #0
    97e8:	ldr	r3, [pc, #96]	; (984c <usb_serial_configure+0xf4>)
    97ea:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    97ee:	movs	r2, #74	; 0x4a
    97f0:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    97f4:	ldr.w	r2, [r3, #328]	; 0x148
    97f8:	orr.w	r2, r2, #16777216	; 0x1000000
    97fc:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    9800:	ldr	r3, [pc, #76]	; (9850 <usb_serial_configure+0xf8>)
    9802:	cbz	r3, 980e <usb_serial_configure+0xb6>
    9804:	ldr	r2, [pc, #76]	; (9854 <usb_serial_configure+0xfc>)
    9806:	ldrb	r3, [r2, #0]
    9808:	orr.w	r3, r3, #1
    980c:	strb	r3, [r2, #0]
}
    980e:	pop	{r4, r5, r6, pc}
    9810:	.word	0x20027d2b
    9814:	.word	0x2000b8c0
    9818:	.word	0x20027bbc
    981c:	.word	0x20027bb6
    9820:	.word	0x20027d26
    9824:	.word	0x2000b740
    9828:	.word	0x20027bba
    982c:	.word	0x20027b96
    9830:	.word	0x20027ba6
    9834:	.word	0x20027d12
    9838:	.word	0x20027d22
    983c:	.word	0x20027484
    9840:	.word	0x0000961d
    9844:	.word	0x20027b60
    9848:	.word	0x000096c9
    984c:	.word	0x402e0000
    9850:	.word	0x00000000
    9854:	.word	0x20027d2d

00009858 <usb_serial_read>:
{
    9858:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    985c:	mov.w	r3, #3758153728	; 0xe000e000
    9860:	mov.w	r2, #131072	; 0x20000
{
    9864:	mov	r7, r0
    9866:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9868:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    986c:	movs	r5, #0
	uint32_t tail = rx_tail;
    986e:	ldr	r3, [pc, #160]	; (9910 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    9870:	ldr.w	fp, [pc, #176]	; 9924 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    9874:	ldrb	r4, [r3, #0]
    9876:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    9878:	cmp	r5, r8
    987a:	bcs.n	9884 <usb_serial_read+0x2c>
    987c:	ldr	r3, [pc, #148]	; (9914 <usb_serial_read+0xbc>)
    987e:	ldrb	r2, [r3, #0]
    9880:	cmp	r2, r4
    9882:	bne.n	9898 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9884:	mov.w	r3, #3758153728	; 0xe000e000
    9888:	mov.w	r2, #131072	; 0x20000
}
    988c:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    988e:	str.w	r2, [r3, #268]	; 0x10c
}
    9892:	add	sp, #12
    9894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    9898:	adds	r4, #1
		uint32_t i = rx_list[tail];
    989a:	ldr	r3, [pc, #124]	; (9918 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    989c:	ldr	r0, [pc, #124]	; (991c <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    989e:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    98a2:	cmp	r4, #9
    98a4:	ldr.w	sl, [pc, #128]	; 9928 <usb_serial_read+0xd0>
    98a8:	it	cs
    98aa:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    98ac:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    98b0:	ldrh.w	r1, [fp, r9, lsl #1]
    98b4:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98b8:	ldr	r0, [pc, #100]	; (9920 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    98ba:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98bc:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    98c0:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98c2:	add	r1, r0
		if (avail > len) {
    98c4:	bcs.n	98ec <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98c6:	mov	r0, r7
    98c8:	str	r2, [sp, #4]
    98ca:	bl	9488 <memcpy>
			rx_available -= len;
    98ce:	ldr.w	r1, [sl]
			rx_index[i] += len;
    98d2:	ldr	r2, [sp, #4]
			rx_available -= len;
    98d4:	sub.w	r1, r1, r8
    98d8:	add	r1, r5
    98da:	mov	r5, r8
    98dc:	str.w	r1, [sl]
			rx_index[i] += len;
    98e0:	ldrh.w	r1, [fp, r9, lsl #1]
    98e4:	add	r2, r1
    98e6:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    98ea:	b.n	9878 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    98ec:	mov	r2, r6
    98ee:	mov	r0, r7
    98f0:	bl	9488 <memcpy>
			rx_available -= avail;
    98f4:	ldr.w	r2, [sl]
			rx_tail = tail;
    98f8:	ldr	r3, [pc, #20]	; (9910 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    98fa:	mov	r0, r9
			rx_available -= avail;
    98fc:	subs	r2, r2, r6
			p += avail;
    98fe:	add	r7, r6
			count += avail;
    9900:	add	r5, r6
			rx_available -= avail;
    9902:	str.w	r2, [sl]
			rx_tail = tail;
    9906:	uxtb	r2, r4
    9908:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    990a:	bl	95bc <rx_queue_transfer>
    990e:	b.n	9878 <usb_serial_read+0x20>
    9910:	.word	0x20027d22
    9914:	.word	0x20027d12
    9918:	.word	0x20027d14
    991c:	.word	0x20027b96
    9920:	.word	0x20200800
    9924:	.word	0x20027ba6
    9928:	.word	0x20027484

0000992c <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    992c:	ldr	r3, [pc, #44]	; (995c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    992e:	ldr	r1, [pc, #48]	; (9960 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    9930:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    9932:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    9934:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    9936:	cmp	r2, r1
    9938:	beq.n	9956 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    993a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    993c:	ldr	r2, [pc, #36]	; (9964 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    993e:	cmp	r3, #9
    9940:	it	cs
    9942:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    9944:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    9946:	ldr	r3, [pc, #32]	; (9968 <usb_serial_peekchar+0x3c>)
    9948:	ldrh.w	r1, [r3, r2, lsl #1]
    994c:	ldr	r3, [pc, #28]	; (996c <usb_serial_peekchar+0x40>)
    994e:	add.w	r3, r3, r2, lsl #9
    9952:	ldrb	r0, [r3, r1]
    9954:	bx	lr
	if (tail == rx_head) return -1;
    9956:	mov.w	r0, #4294967295
}
    995a:	bx	lr
    995c:	.word	0x20027d22
    9960:	.word	0x20027d12
    9964:	.word	0x20027d14
    9968:	.word	0x20027ba6
    996c:	.word	0x20200800

00009970 <usb_serial_available>:
	uint32_t n = rx_available;
    9970:	ldr	r3, [pc, #12]	; (9980 <usb_serial_available+0x10>)
{
    9972:	push	{r4, lr}
	uint32_t n = rx_available;
    9974:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    9976:	cbnz	r4, 997c <usb_serial_available+0xc>
    9978:	bl	b280 <yield>
}
    997c:	mov	r0, r4
    997e:	pop	{r4, pc}
    9980:	.word	0x20027484

00009984 <usb_serial_flush_input>:
{
    9984:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    9988:	ldr	r5, [pc, #64]	; (99cc <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    998a:	ldr	r7, [pc, #68]	; (99d0 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    998c:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    998e:	ldr.w	r8, [pc, #80]	; 99e0 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    9992:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    9994:	ldr	r6, [pc, #60]	; (99d4 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    9996:	ldrb	r3, [r7, #0]
    9998:	cmp	r3, r4
    999a:	bne.n	99a0 <usb_serial_flush_input+0x1c>
}
    999c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    99a0:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    99a2:	ldr	r2, [pc, #52]	; (99d8 <usb_serial_flush_input+0x54>)
    99a4:	ldr	r1, [pc, #52]	; (99dc <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    99a6:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    99a8:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    99aa:	it	cs
    99ac:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    99ae:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    99b2:	ldrh.w	r2, [r2, r0, lsl #1]
    99b6:	ldrh.w	r1, [r1, r0, lsl #1]
    99ba:	subs	r2, r2, r1
    99bc:	subs	r3, r3, r2
    99be:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    99c0:	bl	95bc <rx_queue_transfer>
		rx_tail = tail;
    99c4:	uxtb	r3, r4
    99c6:	strb	r3, [r5, #0]
    99c8:	b.n	9996 <usb_serial_flush_input+0x12>
    99ca:	nop
    99cc:	.word	0x20027d22
    99d0:	.word	0x20027d12
    99d4:	.word	0x20027484
    99d8:	.word	0x20027b96
    99dc:	.word	0x20027ba6
    99e0:	.word	0x20027d14

000099e4 <usb_serial_getchar>:
{
    99e4:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    99e6:	movs	r1, #1
    99e8:	add.w	r0, sp, #7
    99ec:	bl	9858 <usb_serial_read>
    99f0:	cbz	r0, 99fc <usb_serial_getchar+0x18>
    99f2:	ldrb.w	r0, [sp, #7]
}
    99f6:	add	sp, #12
    99f8:	ldr.w	pc, [sp], #4
	return -1;
    99fc:	mov.w	r0, #4294967295
    9a00:	b.n	99f6 <usb_serial_getchar+0x12>
	...

00009a04 <usb_serial_write>:
	if (!usb_configuration) return 0;
    9a04:	ldr	r3, [pc, #356]	; (9b6c <usb_serial_write+0x168>)
{
    9a06:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    9a0a:	ldrb	r3, [r3, #0]
{
    9a0c:	mov	r6, r0
    9a0e:	mov	r5, r1
	if (!usb_configuration) return 0;
    9a10:	and.w	r4, r3, #255	; 0xff
    9a14:	cmp	r3, #0
    9a16:	beq.w	9b2a <usb_serial_write+0x126>
	uint32_t sent=0;
    9a1a:	movs	r4, #0
		tx_noautoflush = 1;
    9a1c:	ldr.w	fp, [pc, #360]	; 9b88 <usb_serial_write+0x184>
	while (size > 0) {
    9a20:	cmp	r5, #0
    9a22:	beq.w	9b2a <usb_serial_write+0x126>
		tx_noautoflush = 1;
    9a26:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9a28:	ldr.w	r9, [pc, #352]	; 9b8c <usb_serial_write+0x188>
		while (!tx_available) {
    9a2c:	ldr	r7, [pc, #320]	; (9b70 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    9a2e:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    9a32:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    9a36:	ldr	r3, [pc, #316]	; (9b74 <usb_serial_write+0x170>)
    9a38:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    9a3c:	movs	r3, #0
		int waiting=0;
    9a3e:	mov	r8, r3
		while (!tx_available) {
    9a40:	ldrh	r1, [r7, #0]
    9a42:	cbnz	r1, 9a62 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    9a44:	mov	r0, sl
    9a46:	strd	r3, r1, [sp]
    9a4a:	bl	a6cc <usb_transfer_status>
			if (!(status & 0x80)) {
    9a4e:	ands.w	r0, r0, #128	; 0x80
    9a52:	ldr	r2, [pc, #292]	; (9b78 <usb_serial_write+0x174>)
    9a54:	ldrd	r3, r1, [sp]
    9a58:	bne.n	9b06 <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    9a5a:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    9a5e:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    9a60:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a62:	ldrh.w	r8, [r7]
    9a66:	ldrb.w	r3, [r9]
    9a6a:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    9a6e:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a70:	mov.w	r2, r3, lsl #11
    9a74:	add.w	r0, r0, r3, lsl #11
    9a78:	ldr	r3, [pc, #256]	; (9b7c <usb_serial_write+0x178>)
    9a7a:	str	r2, [sp, #0]
    9a7c:	add	r0, r3
		if (size >= tx_available) {
    9a7e:	bhi.n	9b4c <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    9a80:	mov	r2, r8
    9a82:	mov	r1, r6
    9a84:	bl	9488 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a88:	ldr	r2, [sp, #0]
    9a8a:	ldr	r3, [pc, #240]	; (9b7c <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a8c:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a8e:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a90:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a92:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a94:	mov.w	r2, #2048	; 0x800
    9a98:	mov	r1, r8
    9a9a:	bl	a660 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9a9e:	mov	r1, r8
	asm("dsb");
    9aa0:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    9aa4:	add.w	r2, r8, #2048	; 0x800
    9aa8:	add.w	r3, r8, #32
    9aac:	cmp	r3, r2
    9aae:	ite	hi
    9ab0:	movhi	r3, #1
    9ab2:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9ab4:	mov.w	r2, #3758153728	; 0xe000e000
    9ab8:	add.w	r3, r8, r3, lsl #5
    9abc:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    9ac0:	adds	r1, #32
	} while (location < end_addr);
    9ac2:	cmp	r1, r3
    9ac4:	bne.n	9abc <usb_serial_write+0xb8>
	asm("dsb");
    9ac6:	dsb	sy
	asm("isb");
    9aca:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9ace:	movs	r0, #3
    9ad0:	mov	r1, sl
    9ad2:	bl	a68c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9ad6:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    9ada:	ldr	r2, [pc, #164]	; (9b80 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    9adc:	adds	r3, #1
    9ade:	uxtb	r3, r3
    9ae0:	cmp	r3, #3
    9ae2:	it	hi
    9ae4:	movhi	r3, #0
    9ae6:	strb.w	r3, [r9]
			size -= tx_available;
    9aea:	ldrh	r3, [r7, #0]
    9aec:	subs	r5, r5, r3
			sent += tx_available;
    9aee:	add	r4, r3
			data += tx_available;
    9af0:	add	r6, r3
			tx_available = 0;
    9af2:	movs	r3, #0
    9af4:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    9af6:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9afa:	dsb	sy
		tx_noautoflush = 0;
    9afe:	movs	r3, #0
    9b00:	strb.w	r3, [fp]
    9b04:	b.n	9a20 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    9b06:	dsb	sy
			tx_noautoflush = 0;
    9b0a:	strb.w	r1, [fp]
			if (!waiting) {
    9b0e:	cmp.w	r8, #0
    9b12:	bne.n	9b18 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    9b14:	ldr	r3, [pc, #108]	; (9b84 <usb_serial_write+0x180>)
    9b16:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    9b18:	ldrb	r1, [r2, #0]
    9b1a:	cbnz	r1, 9b2a <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9b1c:	ldr	r1, [pc, #100]	; (9b84 <usb_serial_write+0x180>)
    9b1e:	ldr	r1, [r1, #0]
    9b20:	subs	r1, r1, r3
    9b22:	cmp	r1, #120	; 0x78
    9b24:	bls.n	9b32 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    9b26:	movs	r3, #1
    9b28:	strb	r3, [r2, #0]
}
    9b2a:	mov	r0, r4
    9b2c:	add	sp, #12
    9b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    9b32:	ldr	r1, [pc, #56]	; (9b6c <usb_serial_write+0x168>)
    9b34:	ldrb	r1, [r1, #0]
    9b36:	cmp	r1, #0
    9b38:	beq.n	9b2a <usb_serial_write+0x126>
			tx_noautoflush = 1;
    9b3a:	mov.w	r8, #1
    9b3e:	str	r3, [sp, #0]
			yield();
    9b40:	bl	b280 <yield>
			tx_noautoflush = 1;
    9b44:	ldr	r3, [sp, #0]
    9b46:	strb.w	r8, [fp]
    9b4a:	b.n	9a40 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    9b4c:	mov	r2, r5
    9b4e:	mov	r1, r6
    9b50:	bl	9488 <memcpy>
			tx_available -= size;
    9b54:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9b58:	ldr	r3, [pc, #36]	; (9b80 <usb_serial_write+0x17c>)
    9b5a:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    9b5e:	add	r4, r5
			tx_available -= size;
    9b60:	strh.w	r8, [r7]
			size = 0;
    9b64:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9b66:	str.w	r2, [r3, #132]	; 0x84
}
    9b6a:	b.n	9afa <usb_serial_write+0xf6>
    9b6c:	.word	0x20027d2a
    9b70:	.word	0x20027bba
    9b74:	.word	0x2000b8c0
    9b78:	.word	0x20027d25
    9b7c:	.word	0x20201800
    9b80:	.word	0x402e0000
    9b84:	.word	0x20027b40
    9b88:	.word	0x20027d28
    9b8c:	.word	0x20027d26

00009b90 <usb_serial_putchar>:
{
    9b90:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    9b92:	movs	r1, #1
{
    9b94:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    9b98:	add.w	r0, sp, #7
    9b9c:	bl	9a04 <usb_serial_write>
}
    9ba0:	add	sp, #12
    9ba2:	ldr.w	pc, [sp], #4
	...

00009ba8 <usb_serial_write_buffer_free>:
{
    9ba8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9bac:	movs	r4, #0
	tx_noautoflush = 1;
    9bae:	ldr	r7, [pc, #56]	; (9be8 <usb_serial_write_buffer_free+0x40>)
    9bb0:	movs	r3, #1
    9bb2:	ldr	r6, [pc, #56]	; (9bec <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    9bb4:	mov	r5, r4
		if (i == tx_head) continue;
    9bb6:	ldr.w	r8, [pc, #56]	; 9bf0 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    9bba:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    9bbc:	ldrb.w	r3, [r8]
    9bc0:	cmp	r3, r4
    9bc2:	beq.n	9bd2 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9bc4:	mov	r0, r6
    9bc6:	bl	a6cc <usb_transfer_status>
    9bca:	lsls	r3, r0, #24
    9bcc:	it	pl
    9bce:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    9bd2:	adds	r4, #1
    9bd4:	adds	r6, #32
    9bd6:	cmp	r4, #4
    9bd8:	bne.n	9bbc <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    9bda:	dsb	sy
	tx_noautoflush = 0;
    9bde:	movs	r3, #0
}
    9be0:	mov	r0, r5
	tx_noautoflush = 0;
    9be2:	strb	r3, [r7, #0]
}
    9be4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9be8:	.word	0x20027d28
    9bec:	.word	0x2000b8c0
    9bf0:	.word	0x20027d26

00009bf4 <usb_serial_flush_output>:
{
    9bf4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9bf8:	ldr	r3, [pc, #116]	; (9c70 <usb_serial_flush_output+0x7c>)
    9bfa:	ldrb	r3, [r3, #0]
    9bfc:	cbz	r3, 9c6c <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    9bfe:	ldr.w	r8, [pc, #132]	; 9c84 <usb_serial_flush_output+0x90>
    9c02:	ldrh.w	r5, [r8]
    9c06:	cbz	r5, 9c6c <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    9c08:	ldr	r7, [pc, #104]	; (9c74 <usb_serial_flush_output+0x80>)
    9c0a:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    9c0c:	ldr	r6, [pc, #104]	; (9c78 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    9c0e:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    9c12:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    9c14:	ldr	r2, [pc, #100]	; (9c7c <usb_serial_flush_output+0x88>)
    9c16:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c18:	ldr	r4, [pc, #100]	; (9c80 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9c1a:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c1e:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c20:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c24:	movs	r3, #0
    9c26:	mov	r0, r9
    9c28:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    9c2a:	add	r5, r4
    9c2c:	bl	a660 <usb_prepare_transfer>
	asm("dsb");
    9c30:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9c34:	mov.w	r3, #3758153728	; 0xe000e000
    9c38:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9c3c:	adds	r4, #32
	} while (location < end_addr);
    9c3e:	cmp	r5, r4
    9c40:	bhi.n	9c38 <usb_serial_flush_output+0x44>
	asm("dsb");
    9c42:	dsb	sy
	asm("isb");
    9c46:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9c4a:	movs	r0, #3
    9c4c:	mov	r1, r9
    9c4e:	bl	a68c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9c52:	ldrb	r3, [r6, #0]
    9c54:	movs	r2, #0
    9c56:	adds	r3, #1
	tx_available = 0;
    9c58:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    9c5c:	uxtb	r3, r3
    9c5e:	cmp	r3, #3
    9c60:	ite	ls
    9c62:	strbls	r3, [r6, #0]
    9c64:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    9c66:	dsb	sy
	tx_noautoflush = 0;
    9c6a:	strb	r2, [r7, #0]
}
    9c6c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c70:	.word	0x20027d2a
    9c74:	.word	0x20027d28
    9c78:	.word	0x20027d26
    9c7c:	.word	0x2000b8c0
    9c80:	.word	0x20201800
    9c84:	.word	0x20027bba

00009c88 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9c88:	ldr	r3, [pc, #512]	; (9e8c <set_arm_clock+0x204>)
{
    9c8a:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9c8c:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    9c8e:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    9c90:	sub.w	r3, r3, #507904	; 0x7c000
    9c94:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    9c96:	ldr	r3, [pc, #504]	; (9e90 <set_arm_clock+0x208>)
    9c98:	cmp	r0, r3
    9c9a:	bls.w	9e5c <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    9c9e:	ldr	r3, [pc, #500]	; (9e94 <set_arm_clock+0x20c>)
    9ca0:	cmp	r0, r3
    9ca2:	bls.w	9e6e <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    9ca6:	ldr	r2, [pc, #496]	; (9e98 <set_arm_clock+0x210>)
    9ca8:	subs	r3, r0, r3
    9caa:	udiv	r3, r3, r2
    9cae:	movs	r2, #25
    9cb0:	muls	r3, r2
    9cb2:	movw	r2, #1575	; 0x627
    9cb6:	addw	r3, r3, #1250	; 0x4e2
    9cba:	cmp	r3, r2
    9cbc:	it	cs
    9cbe:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9cc0:	ldr	r6, [pc, #456]	; (9e8c <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9cc2:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9cc6:	ldr.w	r2, [r6, #128]	; 0x80
    9cca:	orr.w	r2, r2, #192	; 0xc0
    9cce:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9cd2:	movs	r2, #25
    9cd4:	udiv	r2, r3, r2
    9cd8:	and.w	r3, r4, #31
    9cdc:	cmp	r3, r2
    9cde:	bcs.n	9cf0 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9ce0:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9ce4:	ldr	r3, [pc, #436]	; (9e9c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9ce6:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    9ce8:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9cea:	ldr	r6, [r3, #0]
    9cec:	cmp	r6, #0
    9cee:	bge.n	9cea <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    9cf0:	ands.w	r3, r1, #33554432	; 0x2000000
    9cf4:	bne.n	9d48 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    9cf6:	ldr	r6, [pc, #424]	; (9ea0 <set_arm_clock+0x218>)
    9cf8:	ldr	r7, [pc, #424]	; (9ea4 <set_arm_clock+0x21c>)
    9cfa:	ldr	r6, [r6, #16]
    9cfc:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    9cfe:	cmp	r6, r7
    9d00:	itee	eq
    9d02:	moveq	r6, #3
    9d04:	movne	r6, #0
    9d06:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    9d08:	lsls	r7, r6, #27
    9d0a:	eor.w	r6, r1, r6, lsl #27
    9d0e:	tst.w	r6, #939524096	; 0x38000000
    9d12:	beq.n	9d1e <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    9d14:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    9d18:	ldr	r6, [pc, #368]	; (9e8c <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    9d1a:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    9d1c:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    9d1e:	lsls	r6, r3, #12
    9d20:	eor.w	r3, r5, r3, lsl #12
    9d24:	tst.w	r3, #12288	; 0x3000
    9d28:	beq.n	9d3a <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    9d2a:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    9d2e:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    9d30:	ldr	r5, [pc, #344]	; (9e8c <set_arm_clock+0x204>)
    9d32:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    9d34:	ldr	r3, [r5, #72]	; 0x48
    9d36:	lsls	r6, r3, #28
    9d38:	bmi.n	9d34 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    9d3a:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    9d3e:	ldr	r3, [pc, #332]	; (9e8c <set_arm_clock+0x204>)
    9d40:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9d42:	ldr	r5, [r3, #72]	; 0x48
    9d44:	lsls	r5, r5, #26
    9d46:	bmi.n	9d42 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    9d48:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    9d4a:	ldr	r7, [pc, #348]	; (9ea8 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    9d4c:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    9d4e:	mul.w	r3, r6, r5
    9d52:	muls	r3, r0
    9d54:	cmp	r3, r7
    9d56:	bls.w	9e74 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d5a:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    9d5e:	ldr	r0, [pc, #332]	; (9eac <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d60:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    9d64:	cmp	r3, r0
    9d66:	ldr	r0, [pc, #328]	; (9eb0 <set_arm_clock+0x228>)
    9d68:	bhi.w	9e88 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d6c:	udiv	r3, r3, r0
    9d70:	cmp	r3, #54	; 0x36
    9d72:	it	cc
    9d74:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d76:	ldr	r7, [pc, #296]	; (9ea0 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d78:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d7a:	ldr.w	lr, [pc, #344]	; 9ed4 <set_arm_clock+0x24c>
    9d7e:	ldr.w	ip, [r7]
    9d82:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    9d86:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d8a:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    9d8e:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d92:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d94:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d98:	beq.n	9dae <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9d9a:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    9d9e:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9da2:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    9da6:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9da8:	ldr	r3, [r7, #0]
    9daa:	cmp	r3, #0
    9dac:	bge.n	9da8 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    9dae:	ldr	r3, [pc, #220]	; (9e8c <set_arm_clock+0x204>)
    9db0:	subs	r5, #1
    9db2:	ldr	r7, [r3, #16]
    9db4:	and.w	r7, r7, #7
    9db8:	cmp	r7, r5
    9dba:	beq.n	9dc4 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9dbc:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9dbe:	ldr	r5, [r3, #72]	; 0x48
    9dc0:	lsls	r7, r5, #15
    9dc2:	bmi.n	9dbe <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9dc4:	subs	r3, r6, #1
    9dc6:	lsls	r5, r3, #10
    9dc8:	eor.w	r3, r1, r3, lsl #10
    9dcc:	tst.w	r3, #7168	; 0x1c00
    9dd0:	beq.n	9de6 <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9dd2:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    9dd6:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9dda:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    9ddc:	ldr	r3, [pc, #172]	; (9e8c <set_arm_clock+0x204>)
    9dde:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9de0:	ldr	r5, [r3, #72]	; 0x48
    9de2:	lsls	r5, r5, #30
    9de4:	bmi.n	9de0 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9de6:	ldr	r3, [pc, #204]	; (9eb4 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    9de8:	ldr	r5, [pc, #204]	; (9eb8 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9dea:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    9dec:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9dee:	itet	ls
    9df0:	ldrls	r5, [pc, #200]	; (9ebc <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    9df2:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9df4:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    9df8:	subs	r6, r3, #1
    9dfa:	lsls	r5, r6, #8
    9dfc:	eor.w	r6, r1, r6, lsl #8
    9e00:	tst.w	r6, #768	; 0x300
    9e04:	ldr	r6, [pc, #132]	; (9e8c <set_arm_clock+0x204>)
    9e06:	beq.n	9e14 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    9e08:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    9e0c:	and.w	r5, r5, #768	; 0x300
    9e10:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9e12:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9e14:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9e16:	ldr	r5, [pc, #116]	; (9e8c <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9e18:	bic.w	r1, r1, #33554432	; 0x2000000
    9e1c:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9e1e:	ldr	r1, [r5, #72]	; 0x48
    9e20:	lsls	r1, r1, #26
    9e22:	bmi.n	9e1e <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    9e24:	ldr	r1, [pc, #152]	; (9ec0 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    9e26:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    9e2a:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    9e2c:	ldr	r1, [pc, #148]	; (9ec4 <set_arm_clock+0x23c>)
    9e2e:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    9e30:	mov.w	r3, #4294967295
    9e34:	ldr	r1, [pc, #144]	; (9ec8 <set_arm_clock+0x240>)
    9e36:	udiv	r1, r0, r1
    9e3a:	udiv	r3, r3, r1
    9e3e:	ldr	r1, [pc, #140]	; (9ecc <set_arm_clock+0x244>)
    9e40:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    9e42:	and.w	r3, r4, #31
    9e46:	cmp	r2, r3
    9e48:	bcs.n	9e5a <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9e4a:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9e4e:	ldr	r3, [pc, #76]	; (9e9c <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9e50:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    9e52:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9e54:	ldr	r2, [r3, #0]
    9e56:	cmp	r2, #0
    9e58:	bge.n	9e54 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    9e5a:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    9e5c:	ldr	r6, [pc, #112]	; (9ed0 <set_arm_clock+0x248>)
    9e5e:	movw	r3, #1150	; 0x47e
    9e62:	movw	r2, #950	; 0x3b6
    9e66:	cmp	r0, r6
    9e68:	it	ls
    9e6a:	movls	r3, r2
    9e6c:	b.n	9cc0 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    9e6e:	movw	r3, #1250	; 0x4e2
    9e72:	b.n	9cc0 <set_arm_clock+0x38>
		if (div_arm < 8) {
    9e74:	cmp	r5, #8
    9e76:	beq.n	9e7c <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    9e78:	adds	r5, #1
    9e7a:	b.n	9d4e <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    9e7c:	cmp	r6, #4
    9e7e:	bhi.w	9d5a <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    9e82:	adds	r6, #1
				div_arm = 1;
    9e84:	movs	r5, #1
    9e86:	b.n	9d4e <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    9e88:	movs	r3, #108	; 0x6c
    9e8a:	b.n	9d76 <set_arm_clock+0xee>
    9e8c:	.word	0x400fc000
    9e90:	.word	0x1f78a400
    9e94:	.word	0x23c34600
    9e98:	.word	0x01ab3f00
    9e9c:	.word	0x40080000
    9ea0:	.word	0x400d8000
    9ea4:	.word	0x80003040
    9ea8:	.word	0x269fb1ff
    9eac:	.word	0x4df67eff
    9eb0:	.word	0x00b71b00
    9eb4:	.word	0x08f0d17f
    9eb8:	.word	0x2cb4177f
    9ebc:	.word	0x08f0d180
    9ec0:	.word	0x20008940
    9ec4:	.word	0x2000893c
    9ec8:	.word	0x000f4240
    9ecc:	.word	0x200274ac
    9ed0:	.word	0x016e3600
    9ed4:	.word	0x8001307f

00009ed8 <endpoint0_receive>:
{
    9ed8:	push	{r4, r5, lr}
    9eda:	ldr	r4, [pc, #136]	; (9f64 <endpoint0_receive+0x8c>)
	if (len > 0) {
    9edc:	cbz	r1, 9f20 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9ede:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    9ee0:	ldr	r3, [pc, #132]	; (9f68 <endpoint0_receive+0x90>)
    9ee2:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9ee4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9ee8:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9eea:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9eec:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9eee:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    9ef2:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9ef4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9ef6:	add.w	r1, r0, #8192	; 0x2000
    9efa:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9efc:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9f00:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9f04:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9f06:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    9f08:	movs	r3, #0
    9f0a:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    9f0c:	ldr	r3, [pc, #92]	; (9f6c <endpoint0_receive+0x94>)
    9f0e:	ldr.w	r1, [r3, #432]	; 0x1b0
    9f12:	orrs	r1, r5
    9f14:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9f18:	ldr.w	r1, [r3, #432]	; 0x1b0
    9f1c:	cmp	r1, #0
    9f1e:	bne.n	9f18 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    9f20:	ldr	r3, [pc, #76]	; (9f70 <endpoint0_receive+0x98>)
    9f22:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9f24:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9f26:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    9f2a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9f2c:	movw	r1, #32896	; 0x8080
    9f30:	it	eq
    9f32:	moveq	r1, #128	; 0x80
    9f34:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    9f36:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    9f38:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    9f3c:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9f3e:	mov.w	r1, #65537	; 0x10001
    9f42:	ldr	r3, [pc, #40]	; (9f6c <endpoint0_receive+0x94>)
    9f44:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9f48:	ldr.w	r1, [r3, #432]	; 0x1b0
    9f4c:	orr.w	r1, r1, #65536	; 0x10000
    9f50:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9f54:	ldr	r1, [pc, #28]	; (9f74 <endpoint0_receive+0x9c>)
    9f56:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    9f58:	ldr.w	r2, [r3, #432]	; 0x1b0
    9f5c:	cmp	r2, #0
    9f5e:	bne.n	9f58 <endpoint0_receive+0x80>
}
    9f60:	pop	{r4, r5, pc}
    9f62:	nop
    9f64:	.word	0x20000000
    9f68:	.word	0x200092e0
    9f6c:	.word	0x402e0000
    9f70:	.word	0x200092c0
    9f74:	.word	0x20027368

00009f78 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9f78:	ldr	r3, [r0, #56]	; 0x38
{
    9f7a:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    9f7c:	cbz	r3, 9f86 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9f7e:	ldr	r3, [r2, #4]
    9f80:	orr.w	r3, r3, #32768	; 0x8000
    9f84:	str	r3, [r2, #4]
	}
	__disable_irq();
    9f86:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    9f88:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    9f8a:	ldr	r3, [pc, #96]	; (9fec <schedule_transfer+0x74>)
    9f8c:	cbz	r4, 9fd8 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    9f8e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9f90:	ldr.w	r4, [r3, #432]	; 0x1b0
    9f94:	tst	r4, r1
    9f96:	bne.n	9fd2 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    9f98:	ldr	r6, [pc, #84]	; (9ff0 <schedule_transfer+0x78>)
    9f9a:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    9f9c:	ldr.w	r4, [r3, #320]	; 0x140
    9fa0:	orr.w	r4, r4, #16384	; 0x4000
    9fa4:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    9fa8:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9fac:	ldr.w	r5, [r3, #320]	; 0x140
    9fb0:	lsls	r5, r5, #17
    9fb2:	bmi.n	9fbe <schedule_transfer+0x46>
    9fb4:	ldr	r5, [r6, #4]
    9fb6:	subs	r5, r5, r7
    9fb8:	cmp.w	r5, #2400	; 0x960
    9fbc:	bcc.n	9f9c <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9fbe:	ands	r4, r1
    9fc0:	bne.n	9fd2 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    9fc2:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    9fc6:	ldr	r4, [pc, #36]	; (9fec <schedule_transfer+0x74>)
    9fc8:	ldr.w	r3, [r4, #432]	; 0x1b0
    9fcc:	orrs	r3, r1
    9fce:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    9fd2:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9fd4:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9fd6:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    9fd8:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    9fdc:	ldr.w	r4, [r3, #432]	; 0x1b0
    9fe0:	orrs	r1, r4
    9fe2:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    9fe6:	str	r2, [r0, #48]	; 0x30
    9fe8:	b.n	9fd2 <schedule_transfer+0x5a>
    9fea:	nop
    9fec:	.word	0x402e0000
    9ff0:	.word	0xe0001000

00009ff4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9ff4:	push	{r4, r5, r6, lr}
    9ff6:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9ff8:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    9ffa:	cbz	r0, a00c <run_callbacks+0x18>
    9ffc:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    9ffe:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a000:	ldr	r3, [r2, #4]
    a002:	ands.w	r3, r3, #128	; 0x80
    a006:	beq.n	a00e <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a008:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a00a:	cbnz	r5, a01c <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    a00c:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    a00e:	ldr	r2, [r2, #0]
		count++;
    a010:	adds	r5, #1
		if ((uint32_t)t == 1) {
    a012:	cmp	r2, #1
    a014:	bne.n	a000 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    a016:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    a01a:	b.n	a00a <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    a01c:	ldr	r6, [r0, #0]
		count--;
    a01e:	subs	r5, #1
		ep->callback_function(first);
    a020:	ldr	r3, [r4, #56]	; 0x38
    a022:	blx	r3
		first = next;
    a024:	mov	r0, r6
    a026:	b.n	a00a <run_callbacks+0x16>

0000a028 <usb_endpoint_config>:
{
    a028:	push	{r4, r5, r6, lr}
    a02a:	mov	r4, r0
    a02c:	mov	r6, r1
    a02e:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    a030:	movs	r1, #0
    a032:	movs	r2, #60	; 0x3c
    a034:	adds	r0, #4
    a036:	bl	9444 <memset>
	qh->next = 1; // Terminate bit = 1
    a03a:	movs	r3, #1
	qh->config = config;
    a03c:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    a03e:	str	r3, [r4, #8]
	qh->callback_function = callback;
    a040:	str	r5, [r4, #56]	; 0x38
}
    a042:	pop	{r4, r5, r6, pc}

0000a044 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    a044:	ldr	r2, [pc, #124]	; (a0c4 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a046:	push	{r4, lr}
	if (len > 0) {
    a048:	cbz	r1, a08e <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a04a:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a04c:	ldr	r3, [pc, #120]	; (a0c8 <endpoint0_transmit.constprop.0+0x84>)
    a04e:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a050:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a054:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a056:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a058:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a05a:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a05e:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a060:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a062:	add.w	r1, r0, #8192	; 0x2000
    a066:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a068:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a06c:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a070:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a072:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a074:	movs	r3, #0
    a076:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a078:	ldr	r3, [pc, #80]	; (a0cc <endpoint0_transmit.constprop.0+0x88>)
    a07a:	ldr.w	r1, [r3, #432]	; 0x1b0
    a07e:	orr.w	r1, r1, #65536	; 0x10000
    a082:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a086:	ldr.w	r1, [r3, #432]	; 0x1b0
    a08a:	cmp	r1, #0
    a08c:	bne.n	a086 <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    a08e:	ldr	r3, [pc, #64]	; (a0d0 <endpoint0_transmit.constprop.0+0x8c>)
    a090:	movs	r1, #1
    a092:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a094:	movs	r1, #128	; 0x80
    a096:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a098:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    a09a:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    a09e:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a0a0:	mov.w	r2, #65537	; 0x10001
    a0a4:	ldr	r3, [pc, #36]	; (a0cc <endpoint0_transmit.constprop.0+0x88>)
    a0a6:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a0aa:	ldr.w	r2, [r3, #432]	; 0x1b0
    a0ae:	orr.w	r2, r2, #1
    a0b2:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a0b6:	ldr	r2, [pc, #28]	; (a0d4 <endpoint0_transmit.constprop.0+0x90>)
    a0b8:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a0ba:	ldr.w	r2, [r3, #432]	; 0x1b0
    a0be:	cmp	r2, #0
    a0c0:	bne.n	a0ba <endpoint0_transmit.constprop.0+0x76>
}
    a0c2:	pop	{r4, pc}
    a0c4:	.word	0x20000000
    a0c8:	.word	0x200092e0
    a0cc:	.word	0x402e0000
    a0d0:	.word	0x200092c0
    a0d4:	.word	0x20027368

0000a0d8 <usb_start_sof_interrupts>:
	__disable_irq();
    a0d8:	cpsid	i
	sof_usage |= (1 << interface);
    a0da:	ldr	r2, [pc, #40]	; (a104 <usb_start_sof_interrupts+0x2c>)
    a0dc:	movs	r3, #1
    a0de:	lsl.w	r0, r3, r0
    a0e2:	ldrb	r3, [r2, #0]
    a0e4:	orrs	r0, r3
    a0e6:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    a0e8:	ldr	r2, [pc, #28]	; (a108 <usb_start_sof_interrupts+0x30>)
    a0ea:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    a0ee:	lsls	r1, r3, #24
    a0f0:	bmi.n	a0fe <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a0f2:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a0f4:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a0f6:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a0fa:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    a0fe:	cpsie	i
}
    a100:	bx	lr
    a102:	nop
    a104:	.word	0x20027d24
    a108:	.word	0x402e0000

0000a10c <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    a10c:	movs	r3, #1
    a10e:	ldr	r2, [pc, #32]	; (a130 <usb_stop_sof_interrupts+0x24>)
    a110:	lsl.w	r0, r3, r0
    a114:	ldrb	r3, [r2, #0]
    a116:	bic.w	r0, r3, r0
    a11a:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    a11c:	cbnz	r0, a12c <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    a11e:	ldr	r2, [pc, #20]	; (a134 <usb_stop_sof_interrupts+0x28>)
    a120:	ldr.w	r3, [r2, #328]	; 0x148
    a124:	bic.w	r3, r3, #128	; 0x80
    a128:	str.w	r3, [r2, #328]	; 0x148
}
    a12c:	bx	lr
    a12e:	nop
    a130:	.word	0x20027d24
    a134:	.word	0x402e0000

0000a138 <usb_isr>:
{
    a138:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    a13c:	ldr	r4, [pc, #676]	; (a3e4 <usb_isr+0x2ac>)
    a13e:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a142:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    a144:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a148:	bmi.n	a1b0 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    a14a:	lsls	r1, r6, #25
    a14c:	bmi.w	a576 <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    a150:	lsls	r4, r6, #7
    a152:	bpl.n	a15c <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a154:	ldr	r3, [pc, #656]	; (a3e8 <usb_isr+0x2b0>)
    a156:	ldr	r3, [r3, #0]
    a158:	cbz	r3, a15c <usb_isr+0x24>
    a15a:	blx	r3
	if (status & USB_USBSTS_TI1) {
    a15c:	lsls	r0, r6, #6
    a15e:	bpl.n	a168 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a160:	ldr	r3, [pc, #648]	; (a3ec <usb_isr+0x2b4>)
    a162:	ldr	r3, [r3, #0]
    a164:	cbz	r3, a168 <usb_isr+0x30>
    a166:	blx	r3
	if (status & USB_USBSTS_PCI) {
    a168:	lsls	r1, r6, #29
    a16a:	bpl.n	a17e <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a16c:	ldr	r3, [pc, #628]	; (a3e4 <usb_isr+0x2ac>)
    a16e:	ldr	r2, [pc, #640]	; (a3f0 <usb_isr+0x2b8>)
    a170:	ldr.w	r3, [r3, #388]	; 0x184
    a174:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    a178:	it	ne
    a17a:	movne	r3, #1
			usb_high_speed = 0;
    a17c:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a17e:	ldr	r3, [pc, #612]	; (a3e4 <usb_isr+0x2ac>)
    a180:	ldr.w	r3, [r3, #328]	; 0x148
    a184:	lsls	r2, r3, #24
    a186:	bpl.w	a5a6 <usb_isr+0x46e>
    a18a:	lsls	r3, r6, #24
    a18c:	bpl.w	a5a6 <usb_isr+0x46e>
		if (usb_reboot_timer) {
    a190:	ldr	r2, [pc, #608]	; (a3f4 <usb_isr+0x2bc>)
    a192:	ldrb	r3, [r2, #0]
    a194:	cmp	r3, #0
    a196:	beq.w	a5a6 <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    a19a:	subs	r3, #1
    a19c:	uxtb	r3, r3
    a19e:	strb	r3, [r2, #0]
    a1a0:	cmp	r3, #0
    a1a2:	bne.w	a5a6 <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    a1a6:	movs	r0, #3
    a1a8:	bl	a10c <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    a1ac:	bl	16558 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a1b0:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a1b4:	ldr	r7, [pc, #576]	; (a3f8 <usb_isr+0x2c0>)
		while (setupstatus) {
    a1b6:	cmp	r3, #0
    a1b8:	bne.n	a242 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a1ba:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    a1be:	cmp	r5, #0
    a1c0:	beq.n	a14a <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    a1c2:	ldr	r2, [pc, #568]	; (a3fc <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    a1c4:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a1c8:	ldr	r1, [r2, #0]
    a1ca:	tst	r5, r1
    a1cc:	beq.n	a204 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    a1ce:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a1d0:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    a1d4:	ldr	r2, [pc, #552]	; (a400 <usb_isr+0x2c8>)
    a1d6:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a1d8:	ldrh	r2, [r2, #0]
    a1da:	cmp	r2, r1
    a1dc:	bne.w	a538 <usb_isr+0x400>
    a1e0:	uxth	r3, r3
    a1e2:	cbnz	r3, a204 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a1e4:	ldr	r2, [pc, #540]	; (a404 <usb_isr+0x2cc>)
    a1e6:	ldr	r3, [pc, #544]	; (a408 <usb_isr+0x2d0>)
    a1e8:	ldr	r0, [r2, #0]
    a1ea:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    a1ec:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a1ee:	ldrb	r2, [r2, #6]
    a1f0:	str	r0, [r3, #0]
    a1f2:	strh	r1, [r3, #4]
    a1f4:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    a1f6:	bne.n	a204 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    a1f8:	movs	r0, #3
    a1fa:	bl	a0d8 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    a1fe:	ldr	r3, [pc, #500]	; (a3f4 <usb_isr+0x2bc>)
    a200:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    a202:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    a204:	ldr	r3, [pc, #516]	; (a40c <usb_isr+0x2d4>)
    a206:	ldr	r3, [r3, #0]
			if (completestatus) {
    a208:	ands	r5, r3
    a20a:	beq.n	a14a <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    a20c:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a20e:	ldr.w	r8, [pc, #512]	; a410 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    a212:	mov.w	r9, #1
				while (tx) {
    a216:	cmp	r4, #0
    a218:	bne.w	a55a <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    a21c:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a21e:	ldr	r7, [pc, #496]	; (a410 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    a220:	mov.w	r8, #1
				while(rx) {
    a224:	cmp	r5, #0
    a226:	beq.n	a14a <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    a228:	rbit	r4, r5
    a22c:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a230:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    a234:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a238:	bl	9ff4 <run_callbacks>
					rx &= ~(1<<p);
    a23c:	bic.w	r5, r5, r4
    a240:	b.n	a224 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    a242:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    a246:	ldr	r3, [pc, #456]	; (a410 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    a248:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a24c:	ldr.w	r2, [r4, #320]	; 0x140
    a250:	orr.w	r2, r2, #8192	; 0x2000
    a254:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a258:	ldr.w	r2, [r4, #320]	; 0x140
    a25c:	lsls	r2, r2, #18
    a25e:	bpl.n	a24c <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a260:	ldr.w	r2, [r4, #320]	; 0x140
    a264:	bic.w	r2, r2, #8192	; 0x2000
    a268:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a26c:	mov.w	r2, #65537	; 0x10001
    a270:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a274:	ldr.w	r2, [r4, #436]	; 0x1b4
    a278:	ands.w	r8, r2, #65537	; 0x10001
    a27c:	bne.n	a274 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    a27e:	uxth	r1, r5
    a280:	ldr	r2, [pc, #376]	; (a3fc <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    a282:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    a286:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    a28a:	beq.w	a3c6 <usb_isr+0x28e>
    a28e:	bhi.n	a326 <usb_isr+0x1ee>
    a290:	movw	r2, #770	; 0x302
    a294:	cmp	r1, r2
    a296:	beq.w	a46a <usb_isr+0x332>
    a29a:	bhi.n	a2ba <usb_isr+0x182>
    a29c:	cmp	r1, #130	; 0x82
    a29e:	beq.w	a434 <usb_isr+0x2fc>
    a2a2:	cmp.w	r1, #258	; 0x102
    a2a6:	beq.w	a490 <usb_isr+0x358>
    a2aa:	cmp	r1, #128	; 0x80
    a2ac:	beq.w	a3d6 <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a2b0:	mov.w	r3, #65537	; 0x10001
    a2b4:	str.w	r3, [r4, #448]	; 0x1c0
    a2b8:	b.n	a3c0 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    a2ba:	cmp.w	r1, #1280	; 0x500
    a2be:	beq.n	a3aa <usb_isr+0x272>
    a2c0:	sub.w	r1, r1, #1664	; 0x680
    a2c4:	cmp	r1, #1
    a2c6:	bhi.n	a2b0 <usb_isr+0x178>
    a2c8:	ldr	r2, [pc, #328]	; (a414 <usb_isr+0x2dc>)
    a2ca:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a2ce:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a2d2:	ldr	r1, [r2, #4]
    a2d4:	cmp	r1, #0
    a2d6:	beq.n	a2b0 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a2d8:	ldrh.w	lr, [r2]
    a2dc:	mov	r0, r5
    a2de:	cmp	lr, r5
    a2e0:	bne.w	a500 <usb_isr+0x3c8>
    a2e4:	ldrh.w	lr, [r2, #2]
    a2e8:	cmp	lr, ip
    a2ea:	bne.w	a500 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    a2ee:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    a2f0:	mov.w	r8, r3, lsr #16
    a2f4:	ldr	r3, [pc, #288]	; (a418 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    a2f6:	cmp	r5, #3
					datalen = *(list->addr);
    a2f8:	ite	eq
    a2fa:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    a2fc:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    a2fe:	cmp	r8, r2
    a300:	it	cs
    a302:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    a304:	cmp.w	r0, #512	; 0x200
    a308:	bne.w	a4b2 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    a30c:	ldr	r2, [pc, #224]	; (a3f0 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a30e:	ldr	r1, [pc, #268]	; (a41c <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    a310:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    a312:	mov	r2, r8
    a314:	ldr	r0, [pc, #264]	; (a420 <usb_isr+0x2e8>)
    a316:	cmp	r5, #0
    a318:	it	ne
    a31a:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    a31c:	mov	r0, r3
    a31e:	bl	9488 <memcpy>
    a322:	mov	r3, r0
    a324:	b.n	a4d4 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    a326:	movw	r2, #8993	; 0x2321
    a32a:	cmp	r1, r2
    a32c:	beq.n	a370 <usb_isr+0x238>
    a32e:	bhi.n	a37c <usb_isr+0x244>
    a330:	movw	r2, #8225	; 0x2021
    a334:	cmp	r1, r2
    a336:	beq.w	a51e <usb_isr+0x3e6>
    a33a:	movw	r2, #8737	; 0x2221
    a33e:	cmp	r1, r2
    a340:	beq.w	a504 <usb_isr+0x3cc>
    a344:	cmp.w	r1, #2304	; 0x900
    a348:	bne.n	a2b0 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    a34a:	ldr	r3, [pc, #216]	; (a424 <usb_isr+0x2ec>)
    a34c:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a350:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    a354:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a356:	ldr	r3, [pc, #208]	; (a428 <usb_isr+0x2f0>)
    a358:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a35c:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a360:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a364:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    a368:	bl	9758 <usb_serial_configure>
		usb_mtp_configure();
    a36c:	bl	afac <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    a370:	movs	r2, #0
    a372:	mov	r1, r2
    a374:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a376:	bl	9ed8 <endpoint0_receive>
			return;
    a37a:	b.n	a3c0 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    a37c:	movw	r2, #25633	; 0x6421
    a380:	cmp	r1, r2
    a382:	beq.w	a532 <usb_isr+0x3fa>
    a386:	movw	r2, #26529	; 0x67a1
    a38a:	cmp	r1, r2
    a38c:	bne.n	a2b0 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    a38e:	cmp.w	r3, #262144	; 0x40000
    a392:	bcc.n	a2b0 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    a394:	ldr	r3, [pc, #148]	; (a42c <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    a396:	movs	r1, #4
    a398:	ldr	r0, [pc, #104]	; (a404 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    a39a:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    a39c:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    a39e:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    a3a0:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    a3a2:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    a3a6:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    a3a8:	b.n	a3d0 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a3aa:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    a3ac:	mov	r2, r8
    a3ae:	mov	r1, r8
    a3b0:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a3b2:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    a3b4:	bl	9ed8 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a3b8:	orr.w	r5, r5, #16777216	; 0x1000000
    a3bc:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a3c0:	ldr.w	r3, [r4, #428]	; 0x1ac
    a3c4:	b.n	a1b6 <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    a3c6:	ldr	r3, [pc, #92]	; (a424 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a3c8:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    a3ca:	ldr	r0, [pc, #100]	; (a430 <usb_isr+0x2f8>)
    a3cc:	ldrb	r3, [r3, #0]
    a3ce:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a3d0:	bl	a044 <endpoint0_transmit.constprop.0>
				return;
    a3d4:	b.n	a3c0 <usb_isr+0x288>
		reply_buffer[0] = 0;
    a3d6:	ldr	r0, [pc, #88]	; (a430 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    a3d8:	movs	r1, #2
		reply_buffer[0] = 0;
    a3da:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    a3de:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a3e2:	b.n	a3d0 <usb_isr+0x298>
    a3e4:	.word	0x402e0000
    a3e8:	.word	0x20027b60
    a3ec:	.word	0x20027b64
    a3f0:	.word	0x20027d2b
    a3f4:	.word	0x20027d2c
    a3f8:	.word	0x402e01c0
    a3fc:	.word	0x20027368
    a400:	.word	0x2000b9c0
    a404:	.word	0x20027d01
    a408:	.word	0x20027b54
    a40c:	.word	0x2002736c
    a410:	.word	0x20000000
    a414:	.word	0x20007800
    a418:	.word	0x20204800
    a41c:	.word	0x600023fc
    a420:	.word	0x60002465
    a424:	.word	0x20027d2a
    a428:	.word	0x00cc0002
    a42c:	.word	0x20008f47
    a430:	.word	0x20027d0a
		endpoint = setup.wIndex & 0x7F;
    a434:	uxth	r0, r3
		if (endpoint > 7) break;
    a436:	ands.w	r3, r3, #120	; 0x78
    a43a:	bne.w	a2b0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a43e:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a442:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a444:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    a448:	ldr	r2, [pc, #352]	; (a5ac <usb_isr+0x474>)
    a44a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a44c:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a44e:	bpl.n	a464 <usb_isr+0x32c>
    a450:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    a454:	it	ne
    a456:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    a458:	mov.w	r1, #2
    a45c:	ldr	r0, [pc, #332]	; (a5ac <usb_isr+0x474>)
			reply_buffer[0] = 1;
    a45e:	it	ne
    a460:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a462:	b.n	a3d0 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a464:	tst.w	r1, #1
    a468:	b.n	a454 <usb_isr+0x31c>
		if (endpoint > 7) break;
    a46a:	tst.w	r3, #120	; 0x78
    a46e:	uxth	r2, r3
    a470:	bne.w	a2b0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a474:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    a478:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a47c:	ldr.w	r2, [r7, r3, lsl #2]
    a480:	ite	ne
    a482:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a486:	orreq.w	r2, r2, #1
    a48a:	str.w	r2, [r7, r3, lsl #2]
    a48e:	b.n	a370 <usb_isr+0x238>
		if (endpoint > 7) break;
    a490:	tst.w	r3, #120	; 0x78
    a494:	uxth	r2, r3
    a496:	bne.w	a2b0 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a49a:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    a49e:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a4a2:	ldr.w	r2, [r7, r3, lsl #2]
    a4a6:	ite	ne
    a4a8:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a4ac:	biceq.w	r2, r2, #1
    a4b0:	b.n	a48a <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    a4b2:	cmp.w	r0, #1792	; 0x700
    a4b6:	bne.n	a4fc <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    a4b8:	ldr	r2, [pc, #244]	; (a5b0 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a4ba:	ldr	r0, [pc, #248]	; (a5b4 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    a4bc:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    a4be:	mov	r2, r8
    a4c0:	ldr	r1, [pc, #244]	; (a5b8 <usb_isr+0x480>)
    a4c2:	cmp	r5, #0
    a4c4:	it	ne
    a4c6:	movne	r1, r0
    a4c8:	mov	r0, r3
    a4ca:	bl	9488 <memcpy>
					usb_descriptor_buffer[1] = 7;
    a4ce:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    a4d0:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    a4d2:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a4d4:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a4d8:	add.w	r0, r3, r8
	asm("dsb");
    a4dc:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a4e0:	mov.w	r3, #3758153728	; 0xe000e000
    a4e4:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    a4e8:	adds	r5, #32
	} while (location < end_addr);
    a4ea:	cmp	r0, r5
    a4ec:	bhi.n	a4e4 <usb_isr+0x3ac>
	asm("dsb");
    a4ee:	dsb	sy
	asm("isb");
    a4f2:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a4f6:	ldr	r0, [pc, #196]	; (a5bc <usb_isr+0x484>)
    a4f8:	mov	r1, r8
    a4fa:	b.n	a3d0 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    a4fc:	mov	r2, r8
    a4fe:	b.n	a31c <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a500:	adds	r2, #12
    a502:	b.n	a2d2 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a504:	uxth	r3, r3
    a506:	cmp	r3, #0
    a508:	bne.w	a370 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a50c:	ldr	r3, [pc, #176]	; (a5c0 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a50e:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a512:	ldr	r2, [r3, #0]
    a514:	ldr	r3, [pc, #172]	; (a5c4 <usb_isr+0x48c>)
    a516:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a518:	ldr	r3, [pc, #172]	; (a5c8 <usb_isr+0x490>)
    a51a:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    a51c:	b.n	a370 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    a51e:	lsrs	r1, r3, #16
    a520:	cmp	r1, #7
		if (setup.wLength == 6) {
    a522:	bne.w	a2b0 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    a526:	ldr	r2, [pc, #164]	; (a5cc <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a528:	ldr	r0, [pc, #164]	; (a5d0 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    a52a:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a52e:	movs	r2, #1
    a530:	b.n	a376 <usb_isr+0x23e>
		if (setup.wLength == 6) {
    a532:	lsrs	r1, r3, #16
    a534:	cmp	r1, #6
    a536:	b.n	a522 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    a538:	movw	r3, #25633	; 0x6421
    a53c:	cmp	r2, r3
    a53e:	bne.w	a204 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    a542:	ldr	r3, [pc, #140]	; (a5d0 <usb_isr+0x498>)
    a544:	ldrb	r2, [r3, #0]
    a546:	cmp	r2, #1
    a548:	bne.w	a204 <usb_isr+0xcc>
    a54c:	ldrb	r3, [r3, #1]
    a54e:	cmp	r3, #64	; 0x40
    a550:	bne.w	a204 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    a554:	ldr	r3, [pc, #124]	; (a5d4 <usb_isr+0x49c>)
    a556:	movs	r2, #25
    a558:	b.n	a202 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    a55a:	rbit	r7, r4
    a55e:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a562:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    a566:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a56a:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    a56c:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a570:	bl	9ff4 <run_callbacks>
					tx &= ~(1<<p);
    a574:	b.n	a216 <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a576:	ldr	r3, [pc, #96]	; (a5d8 <usb_isr+0x4a0>)
    a578:	ldr.w	r2, [r3, #428]	; 0x1ac
    a57c:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a580:	ldr.w	r2, [r3, #444]	; 0x1bc
    a584:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a588:	ldr.w	r4, [r3, #432]	; 0x1b0
    a58c:	cmp	r4, #0
    a58e:	bne.n	a588 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a590:	mov.w	r2, #4294967295
    a594:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a598:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    a59c:	bl	9754 <usb_serial_reset>
		endpointN_notify_mask = 0;
    a5a0:	ldr	r3, [pc, #56]	; (a5dc <usb_isr+0x4a4>)
    a5a2:	str	r4, [r3, #0]
    a5a4:	b.n	a150 <usb_isr+0x18>
}
    a5a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a5aa:	nop
    a5ac:	.word	0x20027d0a
    a5b0:	.word	0x20027d2b
    a5b4:	.word	0x600023fc
    a5b8:	.word	0x60002465
    a5bc:	.word	0x20204800
    a5c0:	.word	0x20027b40
    a5c4:	.word	0x20027b5c
    a5c8:	.word	0x20027d29
    a5cc:	.word	0x2000b9c0
    a5d0:	.word	0x20027d01
    a5d4:	.word	0x20008f47
    a5d8:	.word	0x402e0000
    a5dc:	.word	0x2002736c

0000a5e0 <usb_config_rx>:
{
    a5e0:	push	{r4, r5, r6, lr}
    a5e2:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a5e4:	subs	r3, r0, #2
{
    a5e6:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a5e8:	cmp	r3, #3
    a5ea:	bhi.n	a614 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a5ec:	clz	r4, r2
    a5f0:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a5f2:	ldr	r0, [pc, #36]	; (a618 <usb_config_rx+0x38>)
    a5f4:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a5f6:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a5f8:	add.w	r0, r0, r5, lsl #7
    a5fc:	orr.w	r1, r1, r4, lsl #29
    a600:	bl	a028 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    a604:	cbz	r6, a614 <usb_config_rx+0x34>
    a606:	ldr	r2, [pc, #20]	; (a61c <usb_config_rx+0x3c>)
    a608:	movs	r3, #1
    a60a:	lsl.w	r0, r3, r5
    a60e:	ldr	r3, [r2, #0]
    a610:	orrs	r0, r3
    a612:	str	r0, [r2, #0]
}
    a614:	pop	{r4, r5, r6, pc}
    a616:	nop
    a618:	.word	0x20000000
    a61c:	.word	0x2002736c

0000a620 <usb_config_tx>:
{
    a620:	push	{r4, r5, r6, lr}
    a622:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a624:	subs	r3, r0, #2
{
    a626:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a628:	cmp	r3, #3
    a62a:	bhi.n	a656 <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a62c:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a630:	ldr	r0, [pc, #36]	; (a658 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a632:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a634:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a636:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a638:	add.w	r0, r0, r4, lsl #7
    a63c:	orr.w	r1, r1, r5, lsl #29
    a640:	adds	r0, #64	; 0x40
    a642:	bl	a028 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    a646:	cbz	r6, a656 <usb_config_tx+0x36>
    a648:	ldr	r2, [pc, #16]	; (a65c <usb_config_tx+0x3c>)
    a64a:	adds	r4, #16
    a64c:	movs	r3, #1
    a64e:	ldr	r1, [r2, #0]
    a650:	lsls	r3, r4
    a652:	orrs	r3, r1
    a654:	str	r3, [r2, #0]
}
    a656:	pop	{r4, r5, r6, pc}
    a658:	.word	0x20000000
    a65c:	.word	0x2002736c

0000a660 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    a660:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    a662:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    a664:	orr.w	r2, r2, #128	; 0x80
    a668:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    a66a:	add.w	r2, r1, #4096	; 0x1000
    a66e:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    a670:	add.w	r2, r1, #8192	; 0x2000
{
    a674:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    a676:	str	r2, [r0, #16]
	transfer->next = 1;
    a678:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    a67a:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    a67e:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    a682:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    a684:	str	r2, [r0, #20]
	transfer->callback_param = param;
    a686:	strd	r1, r3, [r0, #24]
}
    a68a:	pop	{r4, pc}

0000a68c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a68c:	subs	r3, r0, #2
{
    a68e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a690:	cmp	r3, #3
    a692:	bhi.n	a6aa <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a694:	ldr	r3, [pc, #20]	; (a6ac <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    a696:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a69a:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    a69e:	movs	r3, #1
    a6a0:	adds	r0, #64	; 0x40
    a6a2:	lsl.w	r1, r3, r1
    a6a6:	b.w	9f78 <schedule_transfer>
}
    a6aa:	bx	lr
    a6ac:	.word	0x20000000

0000a6b0 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a6b0:	subs	r3, r0, #2
{
    a6b2:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a6b4:	cmp	r3, #3
    a6b6:	bhi.n	a6c6 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    a6b8:	movs	r1, #1
    a6ba:	ldr	r3, [pc, #12]	; (a6c8 <usb_receive+0x18>)
    a6bc:	lsls	r1, r0
    a6be:	add.w	r0, r3, r0, lsl #7
    a6c2:	b.w	9f78 <schedule_transfer>
}
    a6c6:	bx	lr
    a6c8:	.word	0x20000000

0000a6cc <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    a6cc:	ldr	r2, [pc, #32]	; (a6f0 <usb_transfer_status+0x24>)
{
    a6ce:	mov	r1, r0
	cmd = USB1_USBCMD;
    a6d0:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    a6d4:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    a6d6:	orr.w	r3, r3, #16384	; 0x4000
    a6da:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    a6de:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    a6e0:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    a6e4:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    a6e6:	tst.w	r3, #16384	; 0x4000
    a6ea:	beq.n	a6d4 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    a6ec:	bx	lr
    a6ee:	nop
    a6f0:	.word	0x402e0000

0000a6f4 <ultoa>:
{
    a6f4:	push	{r4, r5, r6, lr}
	int i=0, j;
    a6f6:	movs	r4, #0
		digit = val % radix;
    a6f8:	udiv	r5, r0, r2
    a6fc:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a700:	uxtb	r3, r6
    a702:	cmp	r6, #9
    a704:	ite	ls
    a706:	addls	r3, #48	; 0x30
    a708:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    a70a:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a70c:	uxtb	r3, r3
    a70e:	strb	r3, [r1, r4]
		if (val == 0) break;
    a710:	bhi.n	a718 <ultoa+0x24>
		i++;
    a712:	adds	r4, #1
		val /= radix;
    a714:	mov	r0, r5
		digit = val % radix;
    a716:	b.n	a6f8 <ultoa+0x4>
	buf[i + 1] = 0;
    a718:	adds	r3, r1, r4
    a71a:	movs	r2, #0
    a71c:	subs	r0, r1, #1
    a71e:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    a720:	subs	r5, r4, r2
    a722:	cmp	r2, r5
    a724:	blt.n	a72a <ultoa+0x36>
}
    a726:	mov	r0, r1
    a728:	pop	{r4, r5, r6, pc}
		t = buf[j];
    a72a:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    a72e:	adds	r2, #1
		buf[j] = buf[i];
    a730:	ldrb	r6, [r3, #0]
    a732:	strb	r6, [r0, #0]
		buf[i] = t;
    a734:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    a738:	b.n	a720 <ultoa+0x2c>
	...

0000a73c <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    a73c:	vcmp.f32	s0, s0
{
    a740:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    a744:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    a748:	eor.w	r5, r0, r0, asr #31
{
    a74c:	mov	r7, r0
    a74e:	mov	r6, r1
    a750:	mov	r4, r2
	int awidth = abs(width);
    a752:	sub.w	r5, r5, r0, asr #31
{
    a756:	vpush	{d8}
    a75a:	vmov.f32	s16, s0
    a75e:	sub	sp, #20
	if (isnanf(val)) {
    a760:	bvc.n	a7c0 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    a762:	vcmpe.f32	s0, #0.0
    a766:	vmrs	APSR_nzcv, fpscr
    a76a:	ite	mi
    a76c:	movmi	r3, #4
    a76e:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    a770:	cmp	r3, r5
    a772:	ite	lt
    a774:	sublt	r5, r5, r3
    a776:	movge	r5, #0
		if (width<0) {
    a778:	cmp	r0, #0
    a77a:	bge.n	a78a <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    a77c:	mov	r2, r5
    a77e:	mov	r0, r4
    a780:	add	r4, r5
    a782:	movs	r5, #0
    a784:	movs	r1, #32
    a786:	bl	9444 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    a78a:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    a78e:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    a790:	cmp	r3, #0
    a792:	itt	lt
    a794:	movlt	r3, #45	; 0x2d
    a796:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    a79a:	movs	r3, #65	; 0x41
    a79c:	strb	r2, [r4, #0]
    a79e:	strb	r3, [r4, #1]
    a7a0:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    a7a2:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a7a4:	strb	r2, [r4, #2]
			*buf++ = ' ';
    a7a6:	movs	r1, #32
    a7a8:	mov	r2, r5
    a7aa:	bl	9444 <memset>
			awidth--;
		}
		*buf = 0;
    a7ae:	movs	r2, #0
			*buf++ = ' ';
    a7b0:	mov	r3, r0
    a7b2:	add	r0, r5
		*buf = 0;
    a7b4:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    a7b6:	add	sp, #20
    a7b8:	vpop	{d8}
    a7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    a7c0:	vabs.f32	s15, s0
    a7c4:	vldr	s14, [pc, #432]	; a978 <dtostrf+0x23c>
    a7c8:	vcmp.f32	s15, s14
    a7cc:	vmrs	APSR_nzcv, fpscr
    a7d0:	ble.n	a818 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    a7d2:	vcmpe.f32	s0, #0.0
    a7d6:	vmrs	APSR_nzcv, fpscr
    a7da:	ite	mi
    a7dc:	movmi	r3, #4
    a7de:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    a7e0:	cmp	r3, r5
    a7e2:	ite	lt
    a7e4:	sublt	r5, r5, r3
    a7e6:	movge	r5, #0
		if (width<0) {
    a7e8:	cmp	r0, #0
    a7ea:	bge.n	a7fa <dtostrf+0xbe>
				*buf++ = ' ';
    a7ec:	mov	r2, r5
    a7ee:	mov	r0, r4
    a7f0:	add	r4, r5
    a7f2:	movs	r5, #0
    a7f4:	movs	r1, #32
    a7f6:	bl	9444 <memset>
		if (val<0) *buf++ = '-';
    a7fa:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a7fe:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    a800:	vmrs	APSR_nzcv, fpscr
    a804:	itt	mi
    a806:	movmi	r3, #45	; 0x2d
    a808:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a80c:	movs	r3, #73	; 0x49
    a80e:	strb	r3, [r4, #0]
    a810:	movs	r3, #78	; 0x4e
    a812:	strb	r3, [r4, #1]
    a814:	adds	r3, r4, #3
    a816:	b.n	a7a2 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    a818:	add	r2, sp, #8
    a81a:	add	r1, sp, #4
    a81c:	mov	r0, r6
    a81e:	bl	d410 <fcvtf>
	if (precision == 0 && decpt == 0) {
    a822:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    a824:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    a826:	orrs.w	r2, r6, r3
    a82a:	bne.n	a8ca <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    a82c:	ldrb	r1, [r0, #0]
    a82e:	ldr	r3, [pc, #332]	; (a97c <dtostrf+0x240>)
    a830:	ldr	r2, [pc, #332]	; (a980 <dtostrf+0x244>)
    a832:	cmp	r1, #52	; 0x34
    a834:	ite	ls
    a836:	movls	r8, r2
    a838:	movhi	r8, r3
		decpt++;
    a83a:	movs	r3, #1
    a83c:	str	r3, [sp, #4]
	reqd = strlen(s);
    a83e:	mov	r0, r8
    a840:	bl	e100 <strlen>
	if (reqd > decpt) reqd++;
    a844:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    a846:	mov	r5, r0
	if (reqd > decpt) reqd++;
    a848:	cmp	r3, r0
    a84a:	it	lt
    a84c:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    a84e:	cmp	r3, #0
    a850:	bne.n	a8da <dtostrf+0x19e>
    a852:	adds	r5, #1
	if (sign) reqd++;
    a854:	ldr.w	fp, [sp, #8]
    a858:	cmp.w	fp, #0
    a85c:	beq.n	a860 <dtostrf+0x124>
    a85e:	adds	r5, #1
	pad = width - reqd;
    a860:	sub.w	sl, r7, r5
	e = p + reqd;
    a864:	add.w	r9, r4, r5
	if (pad > 0) {
    a868:	cmp.w	sl, #0
    a86c:	ble.n	a922 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    a86e:	mov	r2, sl
    a870:	movs	r1, #32
    a872:	mov	r0, r4
		e += pad;
    a874:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    a876:	bl	9444 <memset>
    a87a:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    a87e:	cmp.w	fp, #0
    a882:	beq.n	a88a <dtostrf+0x14e>
    a884:	movs	r3, #45	; 0x2d
    a886:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    a88a:	ldr	r1, [sp, #4]
    a88c:	cmp	r1, #0
    a88e:	bne.n	a926 <dtostrf+0x1ea>
    a890:	cbz	r6, a8a0 <dtostrf+0x164>
		*p++ = '0';
    a892:	mov	r3, r2
    a894:	movs	r1, #48	; 0x30
    a896:	strb.w	r1, [r3], #2
		*p++ = '.';
    a89a:	movs	r1, #46	; 0x2e
    a89c:	strb	r1, [r2, #1]
    a89e:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    a8a0:	movs	r0, #46	; 0x2e
	while (p < e) {
    a8a2:	cmp	r9, r2
		*p++ = *s++;
    a8a4:	mov	r3, r2
	while (p < e) {
    a8a6:	bhi.n	a95c <dtostrf+0x220>
	if (width < 0) {
    a8a8:	cmp	r7, #0
    a8aa:	bge.n	a8c2 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    a8ac:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    a8ae:	movs	r1, #32
		pad = (reqd + width) * -1;
    a8b0:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    a8b2:	mov	r0, r3
    a8b4:	bic.w	r5, r5, r5, asr #31
    a8b8:	mov	r2, r5
    a8ba:	bl	9444 <memset>
    a8be:	mov	r3, r0
    a8c0:	add	r3, r5
	*p = 0;
    a8c2:	movs	r2, #0
	return buf;
    a8c4:	mov	r0, r4
	*p = 0;
    a8c6:	strb	r2, [r3, #0]
	return buf;
    a8c8:	b.n	a7b6 <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    a8ca:	negs	r3, r3
    a8cc:	cmp	r6, r3
		decpt = -precision;
    a8ce:	ittt	lt
    a8d0:	neglt	r3, r6
		s = "0";
    a8d2:	ldrlt.w	r8, [pc, #172]	; a980 <dtostrf+0x244>
		decpt = -precision;
    a8d6:	strlt	r3, [sp, #4]
    a8d8:	b.n	a83e <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    a8da:	bge.n	a854 <dtostrf+0x118>
    a8dc:	cmp	r6, #0
    a8de:	beq.n	a854 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    a8e0:	add	r3, r6
		reqd = precision + 2;
    a8e2:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    a8e4:	cmp	r0, r3
    a8e6:	bls.n	a854 <dtostrf+0x118>
				val *= 10.0f;
    a8e8:	vmov.f32	s15, #36	; 0x41200000  10.0
    a8ec:	mov	r3, r6
    a8ee:	b.n	a8f6 <dtostrf+0x1ba>
    a8f0:	vmul.f32	s16, s16, s15
				newPrecision--;
    a8f4:	subs	r3, #1
			while (newPrecision > 0) {
    a8f6:	cmp	r3, #0
    a8f8:	bgt.n	a8f0 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    a8fa:	cmp	r6, #0
    a8fc:	add	r2, sp, #8
    a8fe:	add	r1, sp, #12
    a900:	vmov.f32	s0, s16
    a904:	ite	ge
    a906:	subge	r0, r6, r6
    a908:	movlt	r0, r6
    a90a:	bl	d410 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    a90e:	ldr	r3, [sp, #4]
    a910:	ldr	r2, [sp, #12]
    a912:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    a914:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    a916:	subs	r2, r2, r3
    a918:	cmp	r2, r1
    a91a:	itt	eq
    a91c:	addeq	r3, #1
    a91e:	streq	r3, [sp, #4]
    a920:	b.n	a854 <dtostrf+0x118>
    a922:	mov	r2, r4
    a924:	b.n	a87e <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    a926:	bge.n	a8a0 <dtostrf+0x164>
    a928:	cmp	r6, #0
    a92a:	beq.n	a8a0 <dtostrf+0x164>
		*p++ = '0';
    a92c:	mov	r3, r2
		*p++ = '.';
    a92e:	movs	r0, #46	; 0x2e
		*p++ = '0';
    a930:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    a934:	movs	r6, #0
		*p++ = '0';
    a936:	strb.w	ip, [r3], #2
		*p++ = '.';
    a93a:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    a93c:	rsb	r0, r1, #2
    a940:	add	r2, r0
		*p++ = '.';
    a942:	mov	r0, r3
		while ( decpt < 0 ) {
    a944:	cmp	r0, r2
    a946:	bne.n	a954 <dtostrf+0x218>
    a948:	subs	r2, r3, r1
    a94a:	cmp	r6, #0
    a94c:	beq.n	a8a0 <dtostrf+0x164>
    a94e:	movs	r3, #0
    a950:	str	r3, [sp, #4]
    a952:	b.n	a8a0 <dtostrf+0x164>
			*p++ = '0';
    a954:	movs	r6, #1
    a956:	strb.w	ip, [r0], #1
    a95a:	b.n	a944 <dtostrf+0x208>
		*p++ = *s++;
    a95c:	ldrb.w	r1, [r8], #1
    a960:	strb.w	r1, [r3], #1
		if (p == e) break;
    a964:	cmp	r9, r3
    a966:	beq.n	a8a8 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    a968:	ldr	r1, [sp, #4]
    a96a:	subs	r1, #1
    a96c:	str	r1, [sp, #4]
    a96e:	cbnz	r1, a974 <dtostrf+0x238>
    a970:	adds	r3, r2, #2
    a972:	strb	r0, [r2, #1]
			*p++ = '0';
    a974:	mov	r2, r3
    a976:	b.n	a8a2 <dtostrf+0x166>
    a978:	.word	0x7f7fffff
    a97c:	.word	0x20007dec
    a980:	.word	0x20007ef7

0000a984 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    a984:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a986:	ldr	r3, [pc, #52]	; (a9bc <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a988:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a98a:	ldr	r6, [pc, #52]	; (a9c0 <micros+0x3c>)
		scc = systick_cycle_count;
    a98c:	ldr	r5, [pc, #52]	; (a9c4 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a98e:	ldrex	r2, [r3]
		smc = systick_millis_count;
    a992:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    a994:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a996:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    a99a:	cmp	r2, #0
    a99c:	bne.n	a98e <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a99e:	ldr	r3, [pc, #40]	; (a9c8 <micros+0x44>)
    a9a0:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a9a2:	ldr	r2, [pc, #40]	; (a9cc <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    a9a4:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a9a6:	ldr	r2, [r2, #0]
    a9a8:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a9ac:	mov.w	r3, #1000	; 0x3e8
    a9b0:	muls	r0, r3
	return usec;
}
    a9b2:	cmp	r2, r3
    a9b4:	ite	ls
    a9b6:	addls	r0, r0, r2
    a9b8:	addhi	r0, r0, r3
    a9ba:	pop	{r4, r5, r6, pc}
    a9bc:	.word	0x20027b44
    a9c0:	.word	0x20027b40
    a9c4:	.word	0x20027b3c
    a9c8:	.word	0xe0001000
    a9cc:	.word	0x200274ac

0000a9d0 <delay>:
{
    a9d0:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    a9d2:	mov	r4, r0
    a9d4:	cbz	r0, a9f8 <delay+0x28>
	start = micros();
    a9d6:	bl	a984 <micros>
    a9da:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    a9dc:	bl	a984 <micros>
    a9e0:	subs	r0, r0, r5
    a9e2:	cmp.w	r0, #1000	; 0x3e8
    a9e6:	bcs.n	a9ee <delay+0x1e>
		yield();
    a9e8:	bl	b280 <yield>
		while ((micros() - start) >= 1000) {
    a9ec:	b.n	a9dc <delay+0xc>
			if (--msec == 0) return;
    a9ee:	subs	r4, #1
    a9f0:	beq.n	a9f8 <delay+0x28>
			start += 1000;
    a9f2:	add.w	r5, r5, #1000	; 0x3e8
    a9f6:	b.n	a9dc <delay+0xc>
}
    a9f8:	pop	{r3, r4, r5, pc}
	...

0000a9fc <unused_interrupt_vector>:
	__disable_irq();
    a9fc:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    a9fe:	mrs	r3, IPSR
	info->ipsr = ipsr;
    aa02:	ldr	r4, [pc, #316]	; (ab40 <unused_interrupt_vector+0x144>)
    aa04:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    aa08:	tst.w	lr, #4
    aa0c:	ite	eq
    aa0e:	mrseq	r2, MSP
    aa12:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    aa16:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    aa1a:	ldr	r7, [pc, #296]	; (ab44 <unused_interrupt_vector+0x148>)
	while (p < end) {
    aa1c:	ldr	r6, [pc, #296]	; (ab48 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    aa1e:	ldr.w	r1, [r3, #3368]	; 0xd28
    aa22:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    aa26:	ldr.w	r1, [r3, #3372]	; 0xd2c
    aa2a:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    aa2e:	ldr.w	r1, [r3, #3380]	; 0xd34
    aa32:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    aa36:	ldr.w	r3, [r3, #3384]	; 0xd38
    aa3a:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    aa3e:	ldr	r3, [r2, #24]
    aa40:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    aa44:	ldr	r3, [r2, #28]
    aa46:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    aa4a:	bl	acf4 <tempmonGetTemp>
    aa4e:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    aa52:	bl	abcc <rtc_get>
	info->len = sizeof(*info) / 4;
    aa56:	movs	r3, #11
	p = (uint32_t *)info;
    aa58:	ldr	r2, [pc, #240]	; (ab4c <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    aa5a:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    aa5e:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    aa62:	mov	r0, r2
	crc = 0xFFFFFFFF;
    aa64:	mov.w	r3, #4294967295
		crc ^= *p++;
    aa68:	ldr	r1, [r2, #0]
    aa6a:	movs	r5, #32
    aa6c:	adds	r2, #4
    aa6e:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    aa70:	and.w	r1, r3, #1
    aa74:	subs	r5, #1
    aa76:	mul.w	r1, r7, r1
    aa7a:	eor.w	r3, r1, r3, lsr #1
    aa7e:	bne.n	aa70 <unused_interrupt_vector+0x74>
	while (p < end) {
    aa80:	cmp	r2, r6
    aa82:	bne.n	aa68 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    aa84:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    aa88:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    aa8c:	mov.w	r3, #3758153728	; 0xe000e000
    aa90:	ldr	r2, [pc, #188]	; (ab50 <unused_interrupt_vector+0x154>)
    aa92:	str.w	r0, [r3, #3952]	; 0xf70
    aa96:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    aa9a:	dsb	sy
	asm("isb");
    aa9e:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aaa2:	ldr	r2, [pc, #176]	; (ab54 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    aaa4:	ldr	r4, [pc, #176]	; (ab58 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aaa6:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    aaa8:	ldr	r0, [pc, #176]	; (ab5c <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aaaa:	orr.w	r3, r3, #12288	; 0x3000
    aaae:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    aab0:	movs	r3, #2
    aab2:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    aab4:	ldr	r3, [r2, #28]
    aab6:	bic.w	r3, r3, #127	; 0x7f
    aaba:	orr.w	r3, r3, #64	; 0x40
    aabe:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    aac0:	ldr	r3, [pc, #156]	; (ab60 <unused_interrupt_vector+0x164>)
    aac2:	ldr	r3, [r3, #0]
    aac4:	cmp	r3, r0
    aac6:	bls.n	aacc <unused_interrupt_vector+0xd0>
    aac8:	bl	9c88 <set_arm_clock>
	PIT_MCR = 0;
    aacc:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    aace:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    aad0:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    aad4:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    aad6:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    aada:	ldr	r3, [pc, #136]	; (ab64 <unused_interrupt_vector+0x168>)
    aadc:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    aae0:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    aae4:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    aae8:	ldr	r4, [pc, #108]	; (ab58 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    aaea:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    aaee:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    aaf2:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    aaf6:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    aafa:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    aafe:	ldr.w	r3, [r4, #268]	; 0x10c
    ab02:	cbz	r3, ab0e <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    ab04:	adds	r5, #1
			PIT_TFLG0 = 1;
    ab06:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    ab0a:	cmp	r5, #79	; 0x4f
    ab0c:	bhi.n	ab14 <unused_interrupt_vector+0x118>
		usb_isr();
    ab0e:	bl	a138 <usb_isr>
		if (PIT_TFLG0) {
    ab12:	b.n	aafe <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    ab14:	ldr	r3, [pc, #80]	; (ab68 <unused_interrupt_vector+0x16c>)
    ab16:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    ab18:	ldr	r1, [pc, #80]	; (ab6c <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    ab1a:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ab1e:	mov.w	r2, #2147483648	; 0x80000000
    ab22:	ldr	r3, [pc, #76]	; (ab70 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    ab24:	ldr	r0, [pc, #76]	; (ab74 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ab26:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ab28:	ldr	r2, [pc, #44]	; (ab58 <unused_interrupt_vector+0x15c>)
    ab2a:	ldr.w	r3, [r2, #268]	; 0x10c
    ab2e:	cbz	r3, ab3c <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    ab30:	mov.w	r3, #3758153728	; 0xe000e000
    ab34:	ldr	r2, [pc, #64]	; (ab78 <unused_interrupt_vector+0x17c>)
    ab36:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ab3a:	b.n	ab3a <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    ab3c:	str	r0, [r1, #48]	; 0x30
    ab3e:	b.n	ab2a <unused_interrupt_vector+0x12e>
    ab40:	.word	0x2027ff00
    ab44:	.word	0xedb88320
    ab48:	.word	0x2027ffa8
    ab4c:	.word	0x2027ff80
    ab50:	.word	0x2027ffa0
    ab54:	.word	0x400fc000
    ab58:	.word	0x40084000
    ab5c:	.word	0x0bcd3d80
    ab60:	.word	0x20008940
    ab64:	.word	0x00249f00
    ab68:	.word	0x402e0000
    ab6c:	.word	0x400f8000
    ab70:	.word	0x400d9000
    ab74:	.word	0x0bad00f1
    ab78:	.word	0x05fa0004

0000ab7c <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    ab7c:	ldr	r2, [pc, #32]	; (aba0 <_sbrk+0x24>)
{
    ab7e:	push	{r3, lr}
    ab80:	mov	r3, r0
        char *prev = __brkval;
    ab82:	ldr	r0, [r2, #0]
        if (incr != 0) {
    ab84:	cbz	r3, ab9a <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    ab86:	add	r3, r0
    ab88:	ldr	r1, [pc, #24]	; (aba4 <_sbrk+0x28>)
    ab8a:	cmp	r3, r1
    ab8c:	bls.n	ab9c <_sbrk+0x20>
                        errno = ENOMEM;
    ab8e:	bl	dc2c <__errno>
    ab92:	movs	r3, #12
    ab94:	str	r3, [r0, #0]
                        return (void *)-1;
    ab96:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ab9a:	pop	{r3, pc}
                __brkval = prev + incr;
    ab9c:	str	r3, [r2, #0]
    ab9e:	b.n	ab9a <_sbrk+0x1e>
    aba0:	.word	0x2000895c
    aba4:	.word	0x20280000

0000aba8 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    aba8:	movs	r0, #0
    abaa:	bx	lr

0000abac <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    abac:	mov.w	r0, #4294967295
    abb0:	bx	lr

0000abb2 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    abb2:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    abb6:	movs	r0, #0
	st->st_mode = S_IFCHR;
    abb8:	str	r3, [r1, #4]
}
    abba:	bx	lr

0000abbc <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    abbc:	movs	r0, #1
    abbe:	bx	lr

0000abc0 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    abc0:	mov.w	r0, #4294967295
    abc4:	bx	lr

0000abc6 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    abc6:	wfi
    abc8:	b.n	abc6 <abort>
	...

0000abcc <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    abcc:	ldr	r2, [pc, #28]	; (abec <rtc_get+0x20>)
    abce:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    abd0:	ldr	r3, [r2, #40]	; 0x28
{
    abd2:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    abd4:	mov	r4, r3
    abd6:	mov	r1, r0
    abd8:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    abda:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    abdc:	cmp	r4, r3
    abde:	bne.n	abd4 <rtc_get+0x8>
    abe0:	cmp	r1, r0
    abe2:	bne.n	abd4 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    abe4:	lsrs	r3, r3, #15
}
    abe6:	orr.w	r0, r3, r0, lsl #17
    abea:	pop	{r4, pc}
    abec:	.word	0x400d4000

0000abf0 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    abf0:	ldr	r3, [pc, #60]	; (ac30 <rtc_set+0x40>)
    abf2:	ldr	r2, [r3, #8]
    abf4:	bic.w	r2, r2, #65537	; 0x10001
    abf8:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    abfa:	ldr	r2, [r3, #8]
    abfc:	lsls	r2, r2, #31
    abfe:	bmi.n	abfa <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    ac00:	ldr	r2, [r3, #56]	; 0x38
    ac02:	bic.w	r2, r2, #1
    ac06:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    ac08:	ldr	r3, [pc, #36]	; (ac30 <rtc_set+0x40>)
    ac0a:	ldr	r2, [r3, #56]	; 0x38
    ac0c:	lsls	r1, r2, #31
    ac0e:	bmi.n	ac0a <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    ac10:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    ac12:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    ac14:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    ac16:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    ac18:	ldr	r2, [r3, #56]	; 0x38
    ac1a:	orr.w	r2, r2, #1
    ac1e:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    ac20:	ldr	r2, [r3, #56]	; 0x38
    ac22:	lsls	r2, r2, #31
    ac24:	bpl.n	ac20 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    ac26:	ldr	r2, [r3, #8]
    ac28:	orr.w	r2, r2, #65537	; 0x10001
    ac2c:	str	r2, [r3, #8]
}
    ac2e:	bx	lr
    ac30:	.word	0x400d4000

0000ac34 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    ac34:	ldr	r3, [r0, #0]
    ac36:	cbz	r3, ac4e <smalloc_verify_pool+0x1a>
    ac38:	ldr	r0, [r0, #4]
    ac3a:	cbz	r0, ac50 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    ac3c:	movs	r3, #12
    ac3e:	udiv	r2, r0, r3
    ac42:	mls	r0, r3, r2, r0
    ac46:	clz	r0, r0
    ac4a:	lsrs	r0, r0, #5
    ac4c:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    ac4e:	mov	r0, r3
	return 1;
}
    ac50:	bx	lr

0000ac52 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    ac52:	push	{r4, lr}
    ac54:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    ac56:	bl	ac34 <smalloc_verify_pool>
    ac5a:	mov	r4, r0
    ac5c:	cbz	r0, ac64 <sm_align_pool+0x12>
    ac5e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    ac60:	mov	r0, r4
    ac62:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    ac64:	ldr	r3, [r1, #4]
    ac66:	movs	r0, #12
    ac68:	udiv	r2, r3, r0
    ac6c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    ac70:	cbz	r2, ac76 <sm_align_pool+0x24>
    ac72:	subs	r3, r3, r2
    ac74:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ac76:	ldr	r3, [r1, #4]
    ac78:	cmp	r3, #240	; 0xf0
    ac7a:	bhi.n	ac5e <sm_align_pool+0xc>
		errno = ENOSPC;
    ac7c:	bl	dc2c <__errno>
    ac80:	movs	r3, #28
    ac82:	str	r3, [r0, #0]
		return 0;
    ac84:	b.n	ac60 <sm_align_pool+0xe>

0000ac86 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ac86:	push	{r4, r5, r6, lr}
    ac88:	mov	r6, r3
	if (!spool) {
    ac8a:	mov	r4, r0
    ac8c:	cbnz	r0, ac9c <sm_set_pool+0x16>
		errno = EINVAL;
    ac8e:	bl	dc2c <__errno>
		return 0;
    ac92:	mov	r5, r4
		errno = EINVAL;
    ac94:	movs	r3, #22
    ac96:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ac98:	mov	r0, r5
    ac9a:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    ac9c:	cbz	r1, aca0 <sm_set_pool+0x1a>
    ac9e:	cbnz	r2, acd0 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    aca0:	mov	r0, r4
    aca2:	bl	ac34 <smalloc_verify_pool>
    aca6:	mov	r5, r0
    aca8:	cbz	r0, acc6 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    acaa:	ldr	r3, [r4, #8]
    acac:	cbz	r3, acb8 <sm_set_pool+0x32>
    acae:	ldr	r2, [r4, #4]
    acb0:	movs	r1, #0
    acb2:	ldr	r0, [r4, #0]
    acb4:	bl	9444 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    acb8:	movs	r2, #16
    acba:	movs	r1, #0
    acbc:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    acbe:	bl	9444 <memset>
	return 1;
    acc2:	movs	r5, #1
    acc4:	b.n	ac98 <sm_set_pool+0x12>
		errno = EINVAL;
    acc6:	bl	dc2c <__errno>
    acca:	movs	r3, #22
    accc:	str	r3, [r0, #0]
		return 0;
    acce:	b.n	ac98 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    acd0:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    acd2:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    acd6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    acd8:	bl	ac52 <sm_align_pool>
    acdc:	mov	r5, r0
    acde:	cmp	r0, #0
    ace0:	beq.n	ac98 <sm_set_pool+0x12>
	if (do_zero) {
    ace2:	cmp	r6, #0
    ace4:	beq.n	acc2 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    ace6:	ldr	r2, [r4, #4]
    ace8:	movs	r1, #0
    acea:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    acec:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    acee:	b.n	acbe <sm_set_pool+0x38>

0000acf0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    acf0:	b.w	a9fc <unused_interrupt_vector>

0000acf4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    acf4:	ldr	r3, [pc, #72]	; (ad40 <tempmonGetTemp+0x4c>)
    acf6:	ldr.w	r2, [r3, #128]	; 0x80
    acfa:	lsls	r2, r2, #29
    acfc:	bpl.n	acf6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    acfe:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ad02:	ldr	r2, [pc, #64]	; (ad44 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ad04:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ad08:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ad0c:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    ad10:	ldr	r3, [pc, #52]	; (ad48 <tempmonGetTemp+0x54>)
    ad12:	vcvt.f32.u32	s0, s0
    ad16:	vldr	s14, [r3]
    ad1a:	vcvt.f32.s32	s15, s15
    ad1e:	ldr	r3, [pc, #44]	; (ad4c <tempmonGetTemp+0x58>)
    ad20:	vcvt.f32.u32	s14, s14
    ad24:	vsub.f32	s15, s15, s14
    ad28:	vldr	s14, [r3]
    ad2c:	ldr	r3, [pc, #32]	; (ad50 <tempmonGetTemp+0x5c>)
    ad2e:	vmul.f32	s15, s15, s14
    ad32:	vldr	s13, [r3]
    ad36:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    ad3a:	vsub.f32	s0, s0, s14
    ad3e:	bx	lr
    ad40:	.word	0x400d8100
    ad44:	.word	0x200274a0
    ad48:	.word	0x2002749c
    ad4c:	.word	0x200274a4
    ad50:	.word	0x200274a8

0000ad54 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ad54:	cmp	r0, #54	; 0x36
{
    ad56:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ad58:	bhi.n	ad72 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    ad5a:	lsls	r2, r0, #4
    ad5c:	ldr	r3, [pc, #40]	; (ad88 <digitalWrite+0x34>)
    ad5e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    ad62:	ldr	r3, [r3, r2]
	mask = p->mask;
    ad64:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    ad66:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    ad68:	tst	r4, r2
    ad6a:	beq.n	ad7a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    ad6c:	cbz	r1, ad74 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    ad6e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ad72:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    ad74:	str.w	r2, [r3, #136]	; 0x88
    ad78:	b.n	ad72 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ad7a:	ldr	r3, [r0, #8]
		if (val) {
    ad7c:	cbz	r1, ad84 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ad7e:	ldr	r2, [pc, #12]	; (ad8c <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ad80:	str	r2, [r3, #0]
    ad82:	b.n	ad72 <digitalWrite+0x1e>
    ad84:	ldr	r2, [pc, #8]	; (ad90 <digitalWrite+0x3c>)
    ad86:	b.n	ad80 <digitalWrite+0x2c>
    ad88:	.word	0x20007418
    ad8c:	.word	0x0001f038
    ad90:	.word	0x00013038

0000ad94 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ad94:	cmp	r0, #54	; 0x36
{
    ad96:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ad98:	bhi.n	adca <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    ad9a:	ldr	r3, [pc, #76]	; (ade8 <pinMode+0x54>)
    ad9c:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ad9e:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ada0:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    ada2:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ada6:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ada8:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    adac:	beq.n	adb2 <pinMode+0x1e>
    adae:	cmp	r1, #4
    adb0:	bne.n	adcc <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    adb2:	orrs	r4, r5
		if (mode == OUTPUT) {
    adb4:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    adb6:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    adb8:	bne.n	adbe <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    adba:	movs	r2, #56	; 0x38
    adbc:	b.n	adc2 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    adbe:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    adc2:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    adc4:	movs	r2, #21
    adc6:	ldr	r3, [r0, #4]
    adc8:	str	r2, [r3, #0]
}
    adca:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    adcc:	bic.w	r4, r4, r5
    add0:	str	r4, [r2, #4]
		if (mode == INPUT) {
    add2:	cmp	r1, #0
    add4:	beq.n	adba <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    add6:	cmp	r1, #2
    add8:	bne.n	adde <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    adda:	ldr	r2, [pc, #16]	; (adec <pinMode+0x58>)
    addc:	b.n	adc2 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    adde:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ade0:	ite	eq
    ade2:	ldreq	r2, [pc, #12]	; (adf0 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ade4:	ldrne	r2, [pc, #12]	; (adf4 <pinMode+0x60>)
    ade6:	b.n	adc2 <pinMode+0x2e>
    ade8:	.word	0x20007418
    adec:	.word	0x0001f038
    adf0:	.word	0x00013038
    adf4:	.word	0x00010038

0000adf8 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    adf8:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    adfc:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    adfe:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    ae02:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    ae04:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    ae06:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    ae0a:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ae0e:	ldrh.w	r3, [r0, #392]	; 0x188
    ae12:	uxth	r3, r3
{
    ae14:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ae16:	orr.w	r3, r3, #240	; 0xf0
    ae1a:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae1c:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae20:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ae24:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ae28:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae2c:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    ae30:	adds	r2, #1
    ae32:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae34:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae36:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    ae38:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ae3a:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ae3c:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    ae3e:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ae40:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    ae42:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    ae44:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    ae46:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    ae48:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    ae4a:	bne.n	ae2c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae4c:	ldrh.w	r3, [r0, #392]	; 0x188
    ae50:	uxth	r3, r3
    ae52:	orr.w	r3, r3, #15
    ae56:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ae5a:	ldrh.w	r3, [r0, #392]	; 0x188
    ae5e:	uxth	r3, r3
    ae60:	orr.w	r3, r3, #3840	; 0xf00
    ae64:	strh.w	r3, [r0, #392]	; 0x188
}
    ae68:	pop	{r4, r5, r6, r7, pc}

0000ae6a <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ae6a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ae6c:	mov.w	ip, #15
{
    ae70:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    ae72:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ae74:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ae78:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ae7c:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ae80:	add.w	r3, r0, r2, lsl #5
    ae84:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    ae86:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ae88:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ae8a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ae8c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ae8e:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ae92:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ae94:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ae96:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    ae98:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ae9a:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ae9c:	bne.n	ae80 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    ae9e:	pop	{r4, r5, r6, r7, pc}

0000aea0 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    aea0:	ldr	r2, [pc, #84]	; (aef8 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    aea2:	ldr	r0, [pc, #88]	; (aefc <pwm_init+0x5c>)
{
    aea4:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    aea6:	ldr	r3, [r2, #120]	; 0x78
    aea8:	orr.w	r3, r3, #16711680	; 0xff0000
    aeac:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    aeae:	ldr.w	r3, [r2, #128]	; 0x80
    aeb2:	orr.w	r3, r3, #4227858432	; 0xfc000000
    aeb6:	orr.w	r3, r3, #196608	; 0x30000
    aeba:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    aebe:	bl	adf8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    aec2:	add.w	r0, r0, #16384	; 0x4000
    aec6:	bl	adf8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    aeca:	add.w	r0, r0, #16384	; 0x4000
    aece:	bl	adf8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    aed2:	add.w	r0, r0, #16384	; 0x4000
    aed6:	bl	adf8 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    aeda:	sub.w	r0, r0, #2146304	; 0x20c000
    aede:	bl	ae6a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    aee2:	add.w	r0, r0, #16384	; 0x4000
    aee6:	bl	ae6a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    aeea:	add.w	r0, r0, #16384	; 0x4000
}
    aeee:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    aef2:	b.w	ae6a <quadtimer_init>
    aef6:	nop
    aef8:	.word	0x400fc000
    aefc:	.word	0x403dc000

0000af00 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    af00:	ldr	r2, [pc, #8]	; (af0c <txEvent_event+0xc>)
    af02:	ldr	r3, [r2, #0]
    af04:	adds	r3, #1
    af06:	str	r3, [r2, #0]
    af08:	bx	lr
    af0a:	nop
    af0c:	.word	0x200273fc

0000af10 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    af10:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    af12:	ldr	r4, [pc, #40]	; (af3c <rx_event+0x2c>)
	int i = t->callback_param;
    af14:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    af16:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    af18:	ldr	r2, [pc, #36]	; (af40 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    af1a:	adds	r3, #1
    af1c:	cmp	r3, #5
    af1e:	it	cs
    af20:	movcs	r3, #0
	rx_list[head] = i;
    af22:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    af24:	ldr	r1, [r0, #4]
    af26:	ldr	r2, [pc, #28]	; (af44 <rx_event+0x34>)
    af28:	ubfx	r1, r1, #16, #15
    af2c:	ldrh	r2, [r2, #0]
    af2e:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    af30:	ldr	r1, [pc, #20]	; (af48 <rx_event+0x38>)
    af32:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    af36:	uxtb	r3, r3
    af38:	strb	r3, [r4, #0]
}
    af3a:	pop	{r4, pc}
    af3c:	.word	0x20027d13
    af40:	.word	0x20027d1d
    af44:	.word	0x20027bb8
    af48:	.word	0x20027488

0000af4c <rx_queue_transfer>:
{
    af4c:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    af4e:	ldr	r1, [pc, #80]	; (afa0 <rx_queue_transfer+0x54>)
{
    af50:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    af52:	ldr	r7, [pc, #80]	; (afa4 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    af54:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    af58:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    af5a:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    af5c:	add	r0, r1
	asm("dsb");
    af5e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    af62:	mov.w	r4, #3758153728	; 0xe000e000
    af66:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    af6a:	adds	r2, #32
	} while (location < end_addr);
    af6c:	cmp	r0, r2
    af6e:	bhi.n	af66 <rx_queue_transfer+0x1a>
	asm("dsb");
    af70:	dsb	sy
	asm("isb");
    af74:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af78:	ldr	r5, [pc, #44]	; (afa8 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af7a:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af7e:	ldrh	r2, [r7, #0]
    af80:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af84:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af88:	mov	r0, r5
    af8a:	bl	a660 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    af8e:	mov	r1, r5
    af90:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af92:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    af96:	bl	a6b0 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    af9a:	str.w	r6, [r4, #268]	; 0x10c
}
    af9e:	pop	{r3, r4, r5, r6, r7, pc}
    afa0:	.word	0x20203800
    afa4:	.word	0x20027bb8
    afa8:	.word	0x2000b840

0000afac <usb_mtp_configure>:
	if (usb_high_speed) {
    afac:	ldr	r3, [pc, #120]	; (b028 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    afae:	movs	r2, #128	; 0x80
    afb0:	movs	r1, #0
    afb2:	ldr	r0, [pc, #120]	; (b02c <usb_mtp_configure+0x80>)
{
    afb4:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    afb6:	ldrb	r3, [r3, #0]
	tx_head = 0;
    afb8:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    afba:	ldr	r6, [pc, #116]	; (b030 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    afbc:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    afbe:	ldr	r3, [pc, #116]	; (b034 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    afc0:	ite	eq
    afc2:	moveq	r5, #64	; 0x40
    afc4:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    afc8:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    afca:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    afcc:	bl	9444 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afd0:	movs	r2, #128	; 0x80
    afd2:	movs	r1, #0
    afd4:	ldr	r0, [pc, #96]	; (b038 <usb_mtp_configure+0x8c>)
    afd6:	bl	9444 <memset>
	tx_head = 0;
    afda:	ldr	r3, [pc, #96]	; (b03c <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afdc:	mov	r2, r4
    afde:	mov	r1, r5
	tx_head = 0;
    afe0:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afe2:	movs	r0, #4
	rx_head = 0;
    afe4:	ldr	r3, [pc, #88]	; (b040 <usb_mtp_configure+0x94>)
    afe6:	strb	r4, [r3, #0]
	rx_tail = 0;
    afe8:	ldr	r3, [pc, #88]	; (b044 <usb_mtp_configure+0x98>)
    afea:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afec:	mov	r3, r4
    afee:	bl	a620 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    aff2:	mov	r2, r4
    aff4:	ldrh	r1, [r6, #0]
    aff6:	movs	r0, #4
    aff8:	ldr	r3, [pc, #76]	; (b048 <usb_mtp_configure+0x9c>)
    affa:	bl	a5e0 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    affe:	mov	r2, r4
    b000:	ldr	r3, [pc, #72]	; (b04c <usb_mtp_configure+0xa0>)
    b002:	movs	r1, #32
    b004:	movs	r0, #5
    b006:	bl	a620 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b00a:	mov	r0, r4
    b00c:	bl	af4c <rx_queue_transfer>
    b010:	movs	r0, #1
    b012:	bl	af4c <rx_queue_transfer>
    b016:	movs	r0, #2
    b018:	bl	af4c <rx_queue_transfer>
    b01c:	movs	r0, #3
}
    b01e:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b022:	b.w	af4c <rx_queue_transfer>
    b026:	nop
    b028:	.word	0x20027d2b
    b02c:	.word	0x2000b940
    b030:	.word	0x20027bb8
    b034:	.word	0x20027bbe
    b038:	.word	0x2000b840
    b03c:	.word	0x20027d27
    b040:	.word	0x20027d13
    b044:	.word	0x20027d23
    b048:	.word	0x0000af11
    b04c:	.word	0x0000af01

0000b050 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    b050:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    b054:	ldr	r7, [pc, #112]	; (b0c8 <usb_mtp_recv+0x78>)
{
    b056:	mov	r5, r1
	uint32_t tail = rx_tail;
    b058:	ldr	r6, [pc, #112]	; (b0cc <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    b05a:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    b05e:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    b060:	ldr.w	r9, [pc, #120]	; b0dc <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    b064:	uxtb	r4, r3
		if (tail != rx_head) break;
    b066:	ldr.w	sl, [pc, #120]	; b0e0 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    b06a:	ldrb.w	r3, [r9]
    b06e:	cbz	r3, b0bc <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    b070:	ldrb.w	r3, [sl]
    b074:	cmp	r4, r3
    b076:	bne.n	b08c <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    b078:	ldr	r3, [r7, #0]
    b07a:	str	r0, [sp, #4]
    b07c:	sub.w	r3, r3, r8
    b080:	cmp	r3, r5
    b082:	bcs.n	b0c2 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    b084:	bl	b280 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    b088:	ldr	r0, [sp, #4]
    b08a:	b.n	b06a <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    b08c:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    b08e:	ldr	r2, [pc, #64]	; (b0d0 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    b090:	ldr	r1, [pc, #64]	; (b0d4 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    b092:	cmp	r3, #5
    b094:	it	cs
    b096:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    b098:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    b09a:	ldr	r2, [pc, #60]	; (b0d8 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    b09c:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    b0a0:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    b0a4:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    b0a6:	mov	r2, r4
	rx_tail = tail;
    b0a8:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    b0aa:	bl	9488 <memcpy>
	rx_queue_transfer(i);
    b0ae:	mov	r0, r5
    b0b0:	bl	af4c <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    b0b4:	mov	r0, r4
    b0b6:	add	sp, #8
    b0b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    b0bc:	mov.w	r4, #4294967295
    b0c0:	b.n	b0b4 <usb_mtp_recv+0x64>
			return 0;
    b0c2:	movs	r4, #0
    b0c4:	b.n	b0b4 <usb_mtp_recv+0x64>
    b0c6:	nop
    b0c8:	.word	0x20027b40
    b0cc:	.word	0x20027d23
    b0d0:	.word	0x20027d1d
    b0d4:	.word	0x20203800
    b0d8:	.word	0x20027488
    b0dc:	.word	0x20027d2a
    b0e0:	.word	0x20027d13

0000b0e4 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    b0e4:	ldr	r3, [pc, #28]	; (b104 <usb_mtp_available+0x20>)
    b0e6:	ldrb	r3, [r3, #0]
    b0e8:	and.w	r0, r3, #255	; 0xff
    b0ec:	cbz	r3, b102 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    b0ee:	ldr	r3, [pc, #24]	; (b108 <usb_mtp_available+0x24>)
    b0f0:	ldrb	r2, [r3, #0]
    b0f2:	ldr	r3, [pc, #24]	; (b10c <usb_mtp_available+0x28>)
    b0f4:	ldrb	r3, [r3, #0]
    b0f6:	cmp	r2, r3
    b0f8:	beq.n	b100 <usb_mtp_available+0x1c>
    b0fa:	ldr	r3, [pc, #20]	; (b110 <usb_mtp_available+0x2c>)
    b0fc:	ldrh	r0, [r3, #0]
    b0fe:	bx	lr
	if (!usb_configuration) return 0;
    b100:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    b102:	bx	lr
    b104:	.word	0x20027d2a
    b108:	.word	0x20027d13
    b10c:	.word	0x20027d23
    b110:	.word	0x20027bb8

0000b114 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    b114:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    b118:	ldr	r6, [pc, #164]	; (b1c0 <usb_mtp_send+0xac>)
{
    b11a:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    b11c:	ldr	r7, [pc, #164]	; (b1c4 <usb_mtp_send+0xb0>)
{
    b11e:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    b120:	ldrb	r3, [r6, #0]
{
    b122:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    b124:	ldr.w	r9, [pc, #168]	; b1d0 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    b128:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    b12c:	ldr.w	fp, [pc, #164]	; b1d4 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    b130:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    b134:	ldrb.w	r3, [fp]
    b138:	cmp	r3, #0
    b13a:	beq.n	b1b4 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    b13c:	mov	r0, r7
    b13e:	bl	a6cc <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    b142:	lsls	r3, r0, #24
    b144:	bpl.n	b158 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    b146:	ldr.w	r3, [r9]
    b14a:	sub.w	r3, r3, sl
    b14e:	cmp	r3, r5
    b150:	bhi.n	b1ba <usb_mtp_send+0xa6>
		yield();
    b152:	bl	b280 <yield>
	while (1) {
    b156:	b.n	b134 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b158:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    b15a:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b15c:	ldr	r5, [pc, #104]	; (b1c8 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    b15e:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b160:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    b164:	mov	r0, r5
    b166:	bl	9488 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    b16a:	ldr	r2, [pc, #96]	; (b1cc <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b16c:	mov	r3, r5
    b16e:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b170:	add	r2, r5
	asm("dsb");
    b172:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b176:	mov.w	r1, #3758153728	; 0xe000e000
    b17a:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    b17e:	adds	r3, #32
	} while (location < end_addr);
    b180:	cmp	r2, r3
    b182:	bhi.n	b17a <usb_mtp_send+0x66>
	asm("dsb");
    b184:	dsb	sy
	asm("isb");
    b188:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    b18c:	movs	r3, #0
    b18e:	mov	r2, r4
    b190:	mov	r1, r5
    b192:	mov	r0, r7
    b194:	bl	a660 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    b198:	movs	r0, #4
    b19a:	mov	r1, r7
    b19c:	bl	a68c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b1a0:	ldrb	r3, [r6, #0]
	return len;
    b1a2:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    b1a4:	adds	r3, #1
    b1a6:	uxtb	r3, r3
    b1a8:	cmp	r3, #3
    b1aa:	it	hi
    b1ac:	movhi	r3, #0
    b1ae:	strb	r3, [r6, #0]
}
    b1b0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    b1b4:	mov.w	r0, #4294967295
    b1b8:	b.n	b1b0 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    b1ba:	movs	r0, #0
    b1bc:	b.n	b1b0 <usb_mtp_send+0x9c>
    b1be:	nop
    b1c0:	.word	0x20027d27
    b1c4:	.word	0x2000b940
    b1c8:	.word	0x20204000
    b1cc:	.word	0x20027bbe
    b1d0:	.word	0x20027b40
    b1d4:	.word	0x20027d2a

0000b1d8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1d8:	ldr	r3, [pc, #68]	; (b220 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    b1da:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1dc:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    b1e0:	ldr	r3, [pc, #64]	; (b224 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1e2:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    b1e6:	cmp	r0, r3
{
    b1e8:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    b1ea:	it	cc
    b1ec:	movcc	r3, #10
{
    b1ee:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    b1f0:	it	cc
    b1f2:	mulcc	r0, r3
	ultoa(num, buf, 10);
    b1f4:	add	r1, sp, #4
    b1f6:	bl	a6f4 <ultoa>
	for (i=0; i<10; i++) {
    b1fa:	ldr	r0, [pc, #44]	; (b228 <usb_init_serialnumber+0x50>)
    b1fc:	add	r2, sp, #4
    b1fe:	movs	r1, #0
    b200:	mov	r5, r0
		char c = buf[i];
    b202:	ldrb.w	r4, [r2], #1
		if (!c) break;
    b206:	mov	r3, r1
	for (i=0; i<10; i++) {
    b208:	adds	r1, #1
		if (!c) break;
    b20a:	cbz	r4, b216 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    b20c:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    b20e:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    b212:	bne.n	b202 <usb_init_serialnumber+0x2a>
    b214:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b216:	adds	r3, #1
    b218:	lsls	r3, r3, #1
    b21a:	strb	r3, [r5, #0]
}
    b21c:	add	sp, #20
    b21e:	pop	{r4, r5, pc}
    b220:	.word	0x401f4400
    b224:	.word	0x00989680
    b228:	.word	0x20008f1e

0000b22c <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b22c:	ldr	r1, [pc, #68]	; (b274 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    b22e:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    b230:	ldr	r3, [r1, #0]
    b232:	cbz	r3, b248 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b234:	mrs	r3, IPSR
		if (ipsr != 0) return;
    b238:	cbnz	r3, b248 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b23a:	mrs	r2, PRIMASK
		__disable_irq();
    b23e:	cpsid	i
		EventResponder *first = firstYield;
    b240:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    b242:	cbnz	r0, b24a <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b244:	cbnz	r2, b248 <EventResponder::runFromYield()+0x1c>
    b246:	cpsie	i
	}
    b248:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    b24a:	ldr	r4, [pc, #44]	; (b278 <EventResponder::runFromYield()+0x4c>)
    b24c:	ldrb	r5, [r4, #0]
    b24e:	cmp	r5, #0
    b250:	bne.n	b244 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    b252:	movs	r3, #1
    b254:	strb	r3, [r4, #0]
		firstYield = first->_next;
    b256:	ldr	r3, [r0, #20]
    b258:	str	r3, [r1, #0]
		if (firstYield) {
    b25a:	cbz	r3, b26e <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    b25c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    b25e:	cbnz	r2, b262 <EventResponder::runFromYield()+0x36>
    b260:	cpsie	i
		first->_triggered = false;
    b262:	movs	r5, #0
		(*(first->_function))(*first);
    b264:	ldr	r3, [r0, #8]
		first->_triggered = false;
    b266:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b268:	blx	r3
		runningFromYield = false;
    b26a:	strb	r5, [r4, #0]
    b26c:	b.n	b248 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    b26e:	ldr	r1, [pc, #12]	; (b27c <EventResponder::runFromYield()+0x50>)
    b270:	str	r3, [r1, #0]
    b272:	b.n	b25e <EventResponder::runFromYield()+0x32>
    b274:	.word	0x20026e04
    b278:	.word	0x20027c85
    b27c:	.word	0x20026e10

0000b280 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    b280:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    b284:	ldr	r3, [pc, #92]	; (b2e4 <yield+0x64>)
    b286:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    b288:	cbz	r4, b2b2 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    b28a:	ldr	r5, [pc, #92]	; (b2e8 <yield+0x68>)
    b28c:	ldrb	r3, [r5, #0]
    b28e:	cbnz	r3, b2b2 <yield+0x32>
	running = 1;
    b290:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    b292:	lsls	r1, r4, #31
	running = 1;
    b294:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    b296:	bpl.n	b2a2 <yield+0x22>
    b298:	bl	9970 <usb_serial_available>
		if (Serial.available()) serialEvent();
    b29c:	cbz	r0, b2a2 <yield+0x22>
    b29e:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    b2a2:	lsls	r2, r4, #30
    b2a4:	bmi.n	b2d8 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    b2a6:	movs	r3, #0
    b2a8:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    b2aa:	lsls	r3, r4, #29
    b2ac:	bpl.n	b2b2 <yield+0x32>
		EventResponder::runFromYield();
    b2ae:	bl	b22c <EventResponder::runFromYield()>
	}
};
    b2b2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    b2b6:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b2ba:	ldr	r3, [r7, #0]
    b2bc:	mov	r0, r7
    b2be:	ldr	r3, [r3, #16]
    b2c0:	blx	r3
    b2c2:	cbz	r0, b2ca <yield+0x4a>
    b2c4:	ldr	r3, [r7, #20]
    b2c6:	ldr	r3, [r3, #8]
    b2c8:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b2ca:	adds	r6, #1
    b2cc:	ldrb.w	r2, [r8]
    b2d0:	uxtb	r3, r6
    b2d2:	cmp	r2, r3
    b2d4:	bhi.n	b2b6 <yield+0x36>
    b2d6:	b.n	b2a6 <yield+0x26>
    b2d8:	movs	r6, #0
    b2da:	ldr.w	r8, [pc, #16]	; b2ec <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    b2de:	ldr.w	r9, [pc, #16]	; b2f0 <yield+0x70>
    b2e2:	b.n	b2cc <yield+0x4c>
    b2e4:	.word	0x20027d2d
    b2e8:	.word	0x20027c87
    b2ec:	.word	0x20027c86
    b2f0:	.word	0x20026e14

0000b2f4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b2f4:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b2f6:	ldr	r5, [pc, #44]	; (b324 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b2f8:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    b2fa:	ldr	r6, [pc, #44]	; (b328 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b2fc:	mrs	r2, PRIMASK
		__disable_irq();
    b300:	cpsid	i
		EventResponder *first = firstInterrupt;
    b302:	ldr	r0, [r5, #0]
		if (first) {
    b304:	cbz	r0, b31e <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    b306:	ldr	r3, [r0, #20]
    b308:	str	r3, [r5, #0]
			if (firstInterrupt) {
    b30a:	cbz	r3, b31a <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    b30c:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    b30e:	cbnz	r2, b312 <EventResponder::runFromInterrupt()+0x1e>
    b310:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    b312:	ldr	r3, [r0, #8]
			first->_triggered = false;
    b314:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    b316:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    b318:	b.n	b2fc <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    b31a:	str	r3, [r6, #0]
    b31c:	b.n	b30e <EventResponder::runFromInterrupt()+0x1a>
    b31e:	cbnz	r2, b322 <EventResponder::runFromInterrupt()+0x2e>
    b320:	cpsie	i
}
    b322:	pop	{r4, r5, r6, pc}
    b324:	.word	0x20026e0c
    b328:	.word	0x20026e08

0000b32c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b32c:	b.w	b2f4 <EventResponder::runFromInterrupt()>

0000b330 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b330:	ldr	r3, [pc, #16]	; (b344 <systick_isr+0x14>)
    b332:	ldr	r2, [r3, #4]
    b334:	ldr	r3, [pc, #16]	; (b348 <systick_isr+0x18>)
    b336:	str	r2, [r3, #0]
	systick_millis_count++;
    b338:	ldr	r2, [pc, #16]	; (b34c <systick_isr+0x1c>)
    b33a:	ldr	r3, [r2, #0]
    b33c:	adds	r3, #1
    b33e:	str	r3, [r2, #0]
}
    b340:	bx	lr
    b342:	nop
    b344:	.word	0xe0001000
    b348:	.word	0x20027b3c
    b34c:	.word	0x20027b40

0000b350 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    b350:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    b352:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    b354:	ldr	r4, [pc, #136]	; (b3e0 <DMAChannel::begin(bool)+0x90>)
    b356:	cbnz	r1, b37c <DMAChannel::begin(bool)+0x2c>
    b358:	ldr	r1, [r0, #0]
    b35a:	cbz	r1, b37c <DMAChannel::begin(bool)+0x2c>
    b35c:	ldrb	r3, [r0, #4]
    b35e:	cmp	r3, #15
    b360:	bhi.n	b37c <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    b362:	ldrh	r2, [r4, #0]
    b364:	asrs	r2, r3
    b366:	lsls	r2, r2, #31
    b368:	bpl.n	b37c <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    b36a:	add.w	r3, r3, #33554432	; 0x2000000
    b36e:	add.w	r3, r3, #29824	; 0x7480
    b372:	cmp.w	r1, r3, lsl #5
    b376:	bne.n	b37c <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    b378:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    b37a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    b37c:	ldrh	r1, [r4, #0]
    b37e:	movs	r3, #0
    b380:	asr.w	r2, r1, r3
    b384:	ands.w	r2, r2, #1
    b388:	bne.n	b3d0 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    b38a:	movs	r5, #1
    b38c:	lsls	r5, r3
    b38e:	orrs	r1, r5
    b390:	strh	r1, [r4, #0]
			__enable_irq();
    b392:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b394:	ldr	r5, [pc, #76]	; (b3e4 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    b396:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b398:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    b39c:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b39e:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b3a0:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b3a4:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b3a8:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b3aa:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b3ac:	movw	r5, #1154	; 0x482
    b3b0:	ldr	r1, [pc, #52]	; (b3e8 <DMAChannel::begin(bool)+0x98>)
    b3b2:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    b3b4:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    b3b6:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    b3b8:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    b3ba:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b3bc:	str	r3, [r0, #0]
	*p++ = 0;
    b3be:	strd	r2, r2, [r3]
	*p++ = 0;
    b3c2:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    b3c6:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    b3ca:	strd	r2, r2, [r3, #24]
    b3ce:	b.n	b37a <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    b3d0:	adds	r3, #1
    b3d2:	cmp	r3, #16
    b3d4:	bne.n	b380 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    b3d6:	cpsie	i
			TCD = (TCD_t *)0;
    b3d8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    b3da:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    b3dc:	str	r2, [r0, #0]
			return; // no more channels available
    b3de:	b.n	b37a <DMAChannel::begin(bool)+0x2a>
    b3e0:	.word	0x20027b90
    b3e4:	.word	0x400fc000
    b3e8:	.word	0x400e8000

0000b3ec <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    b3ec:	ldrb	r3, [r0, #4]
    b3ee:	cmp	r3, #15
    b3f0:	bhi.n	b412 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    b3f2:	ldr	r2, [pc, #32]	; (b414 <DMAChannel::release()+0x28>)
    b3f4:	strb	r3, [r2, #26]
	__disable_irq();
    b3f6:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    b3f8:	ldr	r1, [pc, #28]	; (b418 <DMAChannel::release()+0x2c>)
    b3fa:	movs	r2, #1
    b3fc:	ldrb	r3, [r0, #4]
    b3fe:	lsls	r2, r3
    b400:	ldrh	r3, [r1, #0]
    b402:	bic.w	r3, r3, r2
    b406:	strh	r3, [r1, #0]
	__enable_irq();
    b408:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    b40a:	movs	r3, #16
    b40c:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    b40e:	movs	r3, #0
    b410:	str	r3, [r0, #0]
}
    b412:	bx	lr
    b414:	.word	0x400e8000
    b418:	.word	0x20027b90

0000b41c <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    b41c:	push	{r3, lr}
    b41e:	bl	caa <Print::write(char const*)>
    b422:	pop	{r3, pc}

0000b424 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    b424:	movs	r3, #0
    b426:	movs	r2, #10
    b428:	b.w	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000b42c <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    b42c:	movs	r3, #0
    b42e:	uxtb	r2, r2
    b430:	b.w	b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000b434 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    b434:	push	{r3, r4, r5, lr}
    b436:	mov	r5, r0
    b438:	bl	b42c <Print::print(unsigned long, int)>
    b43c:	mov	r4, r0
    b43e:	mov	r0, r5
    b440:	bl	b588 <Print::println()>
    b444:	add	r0, r4
    b446:	pop	{r3, r4, r5, pc}

0000b448 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    b448:	movs	r2, #0
    b44a:	movs	r3, #1
    b44c:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    b44e:	push	{r4, lr}
		while (len > 0) {
    b450:	cmp	r1, #0
    b452:	sub.w	r4, r0, r1
    b456:	bgt.n	b460 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    b458:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    b45a:	orr.w	r0, r3, r2, lsl #16
    b45e:	pop	{r4, pc}
			a += *p++;
    b460:	ldrh	r4, [r4, #0]
			len -= 2;
    b462:	subs	r1, #2
			a += *p++;
    b464:	uxtah	r3, r3, r4
			b += a;
    b468:	add	r2, r3
			len -= 2;
    b46a:	b.n	b450 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000b46c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    b46c:	b.w	9984 <usb_serial_flush_input>

0000b470 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    b470:	b.w	992c <usb_serial_peekchar>

0000b474 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    b474:	b.w	99e4 <usb_serial_getchar>

0000b478 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    b478:	b.w	9970 <usb_serial_available>

0000b47c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b47c:	b.w	9bf4 <usb_serial_flush_output>

0000b480 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b480:	b.w	9ba8 <usb_serial_write_buffer_free>

0000b484 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b484:	mov	r0, r1
    b486:	mov	r1, r2
    b488:	b.w	9a04 <usb_serial_write>

0000b48c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b48c:	mov	r0, r1
    b48e:	b.w	9b90 <usb_serial_putchar>

0000b492 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b492:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b494:	bl	74c <setup>
	while (1) {
		loop();
    b498:	bl	248 <loop>
		yield();
    b49c:	bl	b280 <yield>
	while (1) {
    b4a0:	b.n	b498 <main+0x6>
	...

0000b4a4 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    b4a4:	push	{r4, r5, r6, lr}
    b4a6:	ldr	r5, [pc, #36]	; (b4cc <Stream::timedRead()+0x28>)
    b4a8:	mov	r4, r0
    b4aa:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    b4ac:	ldr	r3, [r4, #0]
    b4ae:	mov	r0, r4
    b4b0:	ldr	r3, [r3, #20]
    b4b2:	blx	r3
    if (c >= 0) return c;
    b4b4:	cmp	r0, #0
    b4b6:	bge.n	b4ca <Stream::timedRead()+0x26>
    yield();
    b4b8:	bl	b280 <yield>
    b4bc:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    b4be:	ldr	r2, [r4, #8]
    b4c0:	subs	r3, r3, r6
    b4c2:	cmp	r3, r2
    b4c4:	bcc.n	b4ac <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    b4c6:	mov.w	r0, #4294967295
}
    b4ca:	pop	{r4, r5, r6, pc}
    b4cc:	.word	0x20027b40

0000b4d0 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    b4d0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4d4:	mov	r6, r0
    b4d6:	mov	r7, r1
    b4d8:	mov	r4, r3
	if (buffer == nullptr) return 0;
    b4da:	mov	r5, r2
    b4dc:	cbz	r2, b50e <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    b4de:	cbz	r3, b500 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    b4e0:	add.w	r8, r3, #4294967295
	size_t index = 0;
    b4e4:	movs	r4, #0
	while (index < length) {
    b4e6:	cmp	r4, r8
    b4e8:	bcs.n	b4fc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    b4ea:	mov	r0, r6
    b4ec:	bl	b4a4 <Stream::timedRead()>
		if (c == terminator) break;
    b4f0:	cmp	r7, r0
    b4f2:	beq.n	b4fc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    b4f4:	cmp	r0, #0
    b4f6:	bge.n	b506 <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    b4f8:	movs	r3, #1
    b4fa:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    b4fc:	movs	r3, #0
    b4fe:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    b500:	mov	r0, r4
    b502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    b506:	adds	r4, #1
		*buffer++ = (char)c;
    b508:	strb.w	r0, [r5], #1
		index++;
    b50c:	b.n	b4e6 <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    b50e:	mov	r4, r2
    b510:	b.n	b500 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000b512 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b512:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    b514:	push	{r4, r5, r6, r7, lr}
		base = 10;
    b516:	it	eq
    b518:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    b51a:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    b51c:	cbnz	r1, b54a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    b51e:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    b520:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    b522:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    b526:	cbz	r3, b538 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    b528:	subs	r3, r4, #1
		buf[i] = '-';
    b52a:	add	r2, sp, #40	; 0x28
		i--;
    b52c:	uxtb	r4, r3
		buf[i] = '-';
    b52e:	uxtab	r3, r2, r3
    b532:	movs	r2, #45	; 0x2d
    b534:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b538:	ldr	r3, [r0, #0]
    b53a:	add	r1, sp, #4
    b53c:	rsb	r2, r4, #34	; 0x22
    b540:	ldr	r3, [r3, #4]
    b542:	add	r1, r4
    b544:	blx	r3
}
    b546:	add	sp, #44	; 0x2c
    b548:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    b54a:	movs	r4, #33	; 0x21
			digit = n % base;
    b54c:	udiv	r6, r1, r2
    b550:	mls	r7, r2, r6, r1
    b554:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b556:	cmp	r7, #9
    b558:	add.w	r7, r4, #40	; 0x28
    b55c:	ite	ls
    b55e:	addls	r5, #48	; 0x30
    b560:	addhi	r5, #55	; 0x37
    b562:	add	r7, sp
			if (n == 0) break;
    b564:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b566:	uxtb	r5, r5
    b568:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    b56c:	bhi.n	b526 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    b56e:	subs	r4, #1
			n /= base;
    b570:	mov	r1, r6
			i--;
    b572:	uxtb	r4, r4
			digit = n % base;
    b574:	b.n	b54c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000b576 <Print::print(long)>:
	if (n < 0) {
    b576:	cmp	r1, #0
		n = -n;
    b578:	mov.w	r2, #10
    b57c:	itte	lt
    b57e:	neglt	r1, r1
		sign = '-';
    b580:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    b582:	movge	r3, #0
	if (base == 0) {
    b584:	b.w	b512 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000b588 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    b588:	movw	r3, #2573	; 0xa0d
{
    b58c:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    b58e:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    b592:	movs	r2, #2
    b594:	ldr	r3, [r0, #0]
    b596:	add	r1, sp, #4
    b598:	ldr	r3, [r3, #4]
    b59a:	blx	r3
}
    b59c:	add	sp, #12
    b59e:	ldr.w	pc, [sp], #4
	...

0000b5a4 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    b5a4:	ldr	r3, [pc, #20]	; (b5bc <_write+0x18>)
    b5a6:	cmp	r0, #2
    b5a8:	it	hi
    b5aa:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b5ac:	ldr	r0, [r3, #0]
{
    b5ae:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b5b0:	ldr	r4, [r0, #4]
    b5b2:	mov	r0, r3
    b5b4:	mov	r3, r4
}
    b5b6:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b5ba:	bx	r3
    b5bc:	.word	0x20008944

0000b5c0 <Print::printf(char const*, ...)>:
{
    b5c0:	push	{r1, r2, r3}
    b5c2:	push	{r0, r1, lr}
    b5c4:	add	r2, sp, #12
    b5c6:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    b5ca:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    b5cc:	bl	d7e0 <vdprintf>
}
    b5d0:	add	sp, #8
    b5d2:	ldr.w	lr, [sp], #4
    b5d6:	add	sp, #12
    b5d8:	bx	lr

0000b5da <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    b5da:	push	{r4, r5}
	if (base == 0) {
    b5dc:	cbnz	r2, b5e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    b5de:	ldr	r3, [r0, #0]
    b5e0:	uxtb	r1, r1
    b5e2:	ldr	r3, [r3, #0]
}
    b5e4:	pop	{r4, r5}
		return write((uint8_t)n);
    b5e6:	bx	r3
}
    b5e8:	pop	{r4, r5}
    b5ea:	b.w	b512 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000b5ee <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    b5ee:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5f2:	sub	sp, #72	; 0x48
    b5f4:	mov	r8, r0
    b5f6:	mov	r7, r2
    b5f8:	mov	r6, r3
    b5fa:	ldrb.w	r9, [sp, #104]	; 0x68
    b5fe:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    b602:	cmp.w	r9, #1
    b606:	bls.n	b67a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    b608:	orrs.w	r3, r2, r6
    b60c:	bne.n	b644 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    b60e:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    b610:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    b612:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    b616:	cmp.w	sl, #0
    b61a:	beq.n	b62c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    b61c:	subs	r3, r5, #1
		buf[i] = '-';
    b61e:	add	r2, sp, #72	; 0x48
		i--;
    b620:	uxtb	r5, r3
		buf[i] = '-';
    b622:	uxtab	r3, r2, r3
    b626:	movs	r2, #45	; 0x2d
    b628:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    b62c:	ldr.w	r3, [r8]
    b630:	add	r1, sp, #4
    b632:	rsb	r2, r5, #66	; 0x42
    b636:	mov	r0, r8
    b638:	ldr	r3, [r3, #4]
    b63a:	add	r1, r5
    b63c:	blx	r3
}
    b63e:	add	sp, #72	; 0x48
    b640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    b644:	movs	r5, #65	; 0x41
			digit = n % base;
    b646:	mov	r1, r6
    b648:	mov	r2, r9
    b64a:	movs	r3, #0
    b64c:	mov	r0, r7
    b64e:	bl	b7bc <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b652:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    b656:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b658:	add	r3, sp
    b65a:	cmp	r4, #9
    b65c:	ite	ls
    b65e:	addls	r4, #48	; 0x30
    b660:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    b662:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b664:	uxtb	r4, r4
			if (n == 0) break;
    b666:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b66a:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    b66e:	bcc.n	b616 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    b670:	subs	r5, #1
			n /= base;
    b672:	mov	r7, r0
    b674:	mov	r6, r1
			i--;
    b676:	uxtb	r5, r5
			digit = n % base;
    b678:	b.n	b646 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    b67a:	movs	r0, #0
    b67c:	b.n	b63e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000b680 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    b680:	vcmp.f64	d0, d0
{
    b684:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    b686:	vmrs	APSR_nzcv, fpscr
{
    b68a:	mov	r6, r0
    b68c:	mov	r5, r1
    b68e:	vpush	{d8-d9}
    b692:	sub	sp, #28
	if (isnan(number)) return print("nan");
    b694:	bvc.n	b6a8 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    b696:	ldr	r1, [pc, #264]	; (b7a0 <Print::printFloat(double, unsigned char)+0x120>)
    b698:	bl	caa <Print::write(char const*)>
    b69c:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    b69e:	mov	r0, r4
    b6a0:	add	sp, #28
    b6a2:	vpop	{d8-d9}
    b6a6:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    b6a8:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    b6ac:	vldr	d6, [pc, #208]	; b780 <Print::printFloat(double, unsigned char)+0x100>
    b6b0:	vcmp.f64	d7, d6
    b6b4:	vmrs	APSR_nzcv, fpscr
    b6b8:	ble.n	b6be <Print::printFloat(double, unsigned char)+0x3e>
    b6ba:	ldr	r1, [pc, #232]	; (b7a4 <Print::printFloat(double, unsigned char)+0x124>)
    b6bc:	b.n	b698 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    b6be:	vldr	d7, [pc, #200]	; b788 <Print::printFloat(double, unsigned char)+0x108>
    b6c2:	vcmpe.f64	d0, d7
    b6c6:	vmrs	APSR_nzcv, fpscr
    b6ca:	ble.n	b6d2 <Print::printFloat(double, unsigned char)+0x52>
    b6cc:	ldr	r1, [pc, #216]	; (b7a8 <Print::printFloat(double, unsigned char)+0x128>)
    b6ce:	mov	r0, r6
    b6d0:	b.n	b698 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    b6d2:	vldr	d7, [pc, #188]	; b790 <Print::printFloat(double, unsigned char)+0x110>
    b6d6:	vcmpe.f64	d0, d7
    b6da:	vmrs	APSR_nzcv, fpscr
    b6de:	bmi.n	b6cc <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    b6e0:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    b6e4:	movs	r2, #0
	double rounding = 0.5;
    b6e6:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    b6ea:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    b6ee:	vldr	d6, [pc, #168]	; b798 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    b6f2:	itte	mi
    b6f4:	vnegmi.f64	d0, d0
		sign = 1;
    b6f8:	movmi	r3, #1
	uint8_t sign=0;
    b6fa:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    b6fc:	uxtb	r1, r2
    b6fe:	cmp	r5, r1
    b700:	bhi.n	b750 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    b702:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    b706:	movs	r2, #10
    b708:	mov	r0, r6
    b70a:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    b70e:	vmov	r1, s18
    b712:	bl	b512 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    b716:	mov	r4, r0
	if (digits > 0) {
    b718:	cmp	r5, #0
    b71a:	beq.n	b69e <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    b71c:	vcvt.f64.u32	d0, s18
    b720:	cmp	r5, #15
    b722:	add	r0, sp, #8
			remainder *= 10.0;
    b724:	vmov.f64	d6, #36	; 0x41200000  10.0
    b728:	it	cs
    b72a:	movcs	r5, #15
		buf[0] = '.';
    b72c:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    b72e:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    b732:	mov	r1, r0
    b734:	mov	r2, r5
    b736:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    b73a:	subs	r2, #1
    b73c:	uxtb	r2, r2
    b73e:	cmp	r2, #255	; 0xff
    b740:	bne.n	b758 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    b742:	adds	r5, #1
    b744:	ldr	r3, [r6, #0]
    b746:	mov	r0, r6
    b748:	ldr	r3, [r3, #4]
    b74a:	uxtb	r2, r5
    b74c:	blx	r3
    b74e:	b.n	b69e <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    b750:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    b754:	adds	r2, #1
    b756:	b.n	b6fc <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    b758:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    b75c:	vcvt.u32.f64	s15, d0
    b760:	vstr	s15, [sp, #4]
    b764:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    b768:	vmov	s15, r3
			buf[count++] = '0' + n;
    b76c:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    b770:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    b774:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    b778:	vsub.f64	d0, d0, d7
    b77c:	b.n	b73a <Print::printFloat(double, unsigned char)+0xba>
    b77e:	nop
    b780:	.word	0xffffffff
    b784:	.word	0x7fefffff
    b788:	.word	0xe0000000
    b78c:	.word	0x41efffff
    b790:	.word	0xe0000000
    b794:	.word	0xc1efffff
    b798:	.word	0xa0000000
    b79c:	.word	0x3fb99999
    b7a0:	.word	0x20007f12
    b7a4:	.word	0x20007f16
    b7a8:	.word	0x20007f1a

0000b7ac <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    b7ac:	b.w	bac8 <free>

0000b7b0 <__aeabi_atexit>:
    b7b0:	mov	r3, r0
    b7b2:	mov	r0, r1
    b7b4:	mov	r1, r3
    b7b6:	b.w	d404 <__cxa_atexit>
    b7ba:	nop

0000b7bc <__aeabi_uldivmod>:
    b7bc:	cbnz	r3, b7d4 <__aeabi_uldivmod+0x18>
    b7be:	cbnz	r2, b7d4 <__aeabi_uldivmod+0x18>
    b7c0:	cmp	r1, #0
    b7c2:	it	eq
    b7c4:	cmpeq	r0, #0
    b7c6:	itt	ne
    b7c8:	movne.w	r1, #4294967295
    b7cc:	movne.w	r0, #4294967295
    b7d0:	b.w	bab4 <__aeabi_idiv0>
    b7d4:	sub.w	ip, sp, #8
    b7d8:	strd	ip, lr, [sp, #-16]!
    b7dc:	bl	b7ec <__udivmoddi4>
    b7e0:	ldr.w	lr, [sp, #4]
    b7e4:	ldrd	r2, r3, [sp, #8]
    b7e8:	add	sp, #16
    b7ea:	bx	lr

0000b7ec <__udivmoddi4>:
    b7ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7f0:	ldr	r6, [sp, #32]
    b7f2:	mov	r5, r1
    b7f4:	mov	r4, r0
    b7f6:	mov	r7, r1
    b7f8:	cmp	r3, #0
    b7fa:	bne.n	b892 <__udivmoddi4+0xa6>
    b7fc:	cmp	r2, r1
    b7fe:	mov	ip, r2
    b800:	bls.n	b8ce <__udivmoddi4+0xe2>
    b802:	clz	r3, r2
    b806:	cbz	r3, b81a <__udivmoddi4+0x2e>
    b808:	lsl.w	ip, r2, r3
    b80c:	rsb	r2, r3, #32
    b810:	lsls	r7, r3
    b812:	lsr.w	r2, r0, r2
    b816:	orrs	r7, r2
    b818:	lsls	r4, r3
    b81a:	mov.w	lr, ip, lsr #16
    b81e:	uxth.w	r5, ip
    b822:	udiv	r1, r7, lr
    b826:	lsrs	r2, r4, #16
    b828:	mls	r7, lr, r1, r7
    b82c:	orr.w	r2, r2, r7, lsl #16
    b830:	mul.w	r0, r1, r5
    b834:	cmp	r0, r2
    b836:	bls.n	b84e <__udivmoddi4+0x62>
    b838:	adds.w	r2, ip, r2
    b83c:	add.w	r7, r1, #4294967295
    b840:	bcs.w	ba7c <__udivmoddi4+0x290>
    b844:	cmp	r0, r2
    b846:	bls.w	ba7c <__udivmoddi4+0x290>
    b84a:	subs	r1, #2
    b84c:	add	r2, ip
    b84e:	subs	r2, r2, r0
    b850:	uxth	r4, r4
    b852:	udiv	r0, r2, lr
    b856:	mls	r2, lr, r0, r2
    b85a:	orr.w	r4, r4, r2, lsl #16
    b85e:	mul.w	r5, r0, r5
    b862:	cmp	r5, r4
    b864:	bls.n	b87c <__udivmoddi4+0x90>
    b866:	adds.w	r4, ip, r4
    b86a:	add.w	r2, r0, #4294967295
    b86e:	bcs.w	ba80 <__udivmoddi4+0x294>
    b872:	cmp	r5, r4
    b874:	bls.w	ba80 <__udivmoddi4+0x294>
    b878:	add	r4, ip
    b87a:	subs	r0, #2
    b87c:	orr.w	r0, r0, r1, lsl #16
    b880:	subs	r4, r4, r5
    b882:	movs	r1, #0
    b884:	cbz	r6, b88e <__udivmoddi4+0xa2>
    b886:	lsrs	r4, r3
    b888:	movs	r3, #0
    b88a:	strd	r4, r3, [r6]
    b88e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b892:	cmp	r3, r1
    b894:	bls.n	b8a8 <__udivmoddi4+0xbc>
    b896:	cmp	r6, #0
    b898:	beq.w	ba76 <__udivmoddi4+0x28a>
    b89c:	movs	r1, #0
    b89e:	strd	r0, r5, [r6]
    b8a2:	mov	r0, r1
    b8a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b8a8:	clz	r1, r3
    b8ac:	cmp	r1, #0
    b8ae:	bne.n	b944 <__udivmoddi4+0x158>
    b8b0:	cmp	r3, r5
    b8b2:	bcc.n	b8ba <__udivmoddi4+0xce>
    b8b4:	cmp	r2, r0
    b8b6:	bhi.w	baaa <__udivmoddi4+0x2be>
    b8ba:	subs	r4, r0, r2
    b8bc:	sbc.w	r2, r5, r3
    b8c0:	movs	r0, #1
    b8c2:	mov	r7, r2
    b8c4:	cmp	r6, #0
    b8c6:	beq.n	b88e <__udivmoddi4+0xa2>
    b8c8:	strd	r4, r7, [r6]
    b8cc:	b.n	b88e <__udivmoddi4+0xa2>
    b8ce:	cbnz	r2, b8d2 <__udivmoddi4+0xe6>
    b8d0:	udf	#255	; 0xff
    b8d2:	clz	r3, r2
    b8d6:	cmp	r3, #0
    b8d8:	bne.w	b9fc <__udivmoddi4+0x210>
    b8dc:	subs	r2, r1, r2
    b8de:	mov.w	r7, ip, lsr #16
    b8e2:	uxth.w	lr, ip
    b8e6:	movs	r1, #1
    b8e8:	udiv	r5, r2, r7
    b8ec:	mls	r0, r7, r5, r2
    b8f0:	lsrs	r2, r4, #16
    b8f2:	orr.w	r2, r2, r0, lsl #16
    b8f6:	mul.w	r0, lr, r5
    b8fa:	cmp	r0, r2
    b8fc:	bls.n	b910 <__udivmoddi4+0x124>
    b8fe:	adds.w	r2, ip, r2
    b902:	add.w	r8, r5, #4294967295
    b906:	bcs.n	b90e <__udivmoddi4+0x122>
    b908:	cmp	r0, r2
    b90a:	bhi.w	baa4 <__udivmoddi4+0x2b8>
    b90e:	mov	r5, r8
    b910:	subs	r2, r2, r0
    b912:	uxth	r4, r4
    b914:	udiv	r0, r2, r7
    b918:	mls	r2, r7, r0, r2
    b91c:	orr.w	r4, r4, r2, lsl #16
    b920:	mul.w	lr, lr, r0
    b924:	cmp	lr, r4
    b926:	bls.n	b93a <__udivmoddi4+0x14e>
    b928:	adds.w	r4, ip, r4
    b92c:	add.w	r2, r0, #4294967295
    b930:	bcs.n	b938 <__udivmoddi4+0x14c>
    b932:	cmp	lr, r4
    b934:	bhi.w	baae <__udivmoddi4+0x2c2>
    b938:	mov	r0, r2
    b93a:	sub.w	r4, r4, lr
    b93e:	orr.w	r0, r0, r5, lsl #16
    b942:	b.n	b884 <__udivmoddi4+0x98>
    b944:	rsb	r7, r1, #32
    b948:	lsls	r3, r1
    b94a:	lsr.w	ip, r2, r7
    b94e:	orr.w	ip, ip, r3
    b952:	lsl.w	r4, r5, r1
    b956:	lsr.w	r3, r0, r7
    b95a:	lsrs	r5, r7
    b95c:	mov.w	r9, ip, lsr #16
    b960:	orrs	r3, r4
    b962:	udiv	r8, r5, r9
    b966:	uxth.w	lr, ip
    b96a:	mls	r5, r9, r8, r5
    b96e:	lsrs	r4, r3, #16
    b970:	orr.w	r4, r4, r5, lsl #16
    b974:	mul.w	r5, r8, lr
    b978:	cmp	r5, r4
    b97a:	lsl.w	r2, r2, r1
    b97e:	lsl.w	r0, r0, r1
    b982:	bls.n	b99c <__udivmoddi4+0x1b0>
    b984:	adds.w	r4, ip, r4
    b988:	add.w	sl, r8, #4294967295
    b98c:	bcs.w	baa0 <__udivmoddi4+0x2b4>
    b990:	cmp	r5, r4
    b992:	bls.w	baa0 <__udivmoddi4+0x2b4>
    b996:	sub.w	r8, r8, #2
    b99a:	add	r4, ip
    b99c:	subs	r4, r4, r5
    b99e:	uxth	r5, r3
    b9a0:	udiv	r3, r4, r9
    b9a4:	mls	r4, r9, r3, r4
    b9a8:	orr.w	r4, r5, r4, lsl #16
    b9ac:	mul.w	lr, r3, lr
    b9b0:	cmp	lr, r4
    b9b2:	bls.n	b9c6 <__udivmoddi4+0x1da>
    b9b4:	adds.w	r4, ip, r4
    b9b8:	add.w	r5, r3, #4294967295
    b9bc:	bcs.n	ba98 <__udivmoddi4+0x2ac>
    b9be:	cmp	lr, r4
    b9c0:	bls.n	ba98 <__udivmoddi4+0x2ac>
    b9c2:	subs	r3, #2
    b9c4:	add	r4, ip
    b9c6:	orr.w	r3, r3, r8, lsl #16
    b9ca:	umull	r9, r5, r3, r2
    b9ce:	sub.w	r4, r4, lr
    b9d2:	cmp	r4, r5
    b9d4:	mov	r8, r9
    b9d6:	mov	lr, r5
    b9d8:	bcc.n	ba88 <__udivmoddi4+0x29c>
    b9da:	beq.n	ba84 <__udivmoddi4+0x298>
    b9dc:	cbz	r6, b9f4 <__udivmoddi4+0x208>
    b9de:	subs.w	r2, r0, r8
    b9e2:	sbc.w	r4, r4, lr
    b9e6:	lsl.w	r7, r4, r7
    b9ea:	lsrs	r2, r1
    b9ec:	lsrs	r4, r1
    b9ee:	orrs	r7, r2
    b9f0:	strd	r7, r4, [r6]
    b9f4:	mov	r0, r3
    b9f6:	movs	r1, #0
    b9f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9fc:	rsb	r1, r3, #32
    ba00:	lsl.w	ip, r2, r3
    ba04:	lsr.w	r2, r0, r1
    ba08:	lsr.w	r1, r5, r1
    ba0c:	lsls	r5, r3
    ba0e:	orrs	r2, r5
    ba10:	mov.w	r7, ip, lsr #16
    ba14:	uxth.w	lr, ip
    ba18:	udiv	r0, r1, r7
    ba1c:	mls	r5, r7, r0, r1
    ba20:	lsrs	r1, r2, #16
    ba22:	orr.w	r1, r1, r5, lsl #16
    ba26:	mul.w	r5, r0, lr
    ba2a:	cmp	r5, r1
    ba2c:	lsl.w	r4, r4, r3
    ba30:	bls.n	ba44 <__udivmoddi4+0x258>
    ba32:	adds.w	r1, ip, r1
    ba36:	add.w	r8, r0, #4294967295
    ba3a:	bcs.n	ba9c <__udivmoddi4+0x2b0>
    ba3c:	cmp	r5, r1
    ba3e:	bls.n	ba9c <__udivmoddi4+0x2b0>
    ba40:	subs	r0, #2
    ba42:	add	r1, ip
    ba44:	subs	r1, r1, r5
    ba46:	uxth	r2, r2
    ba48:	udiv	r5, r1, r7
    ba4c:	mls	r1, r7, r5, r1
    ba50:	orr.w	r2, r2, r1, lsl #16
    ba54:	mul.w	r1, r5, lr
    ba58:	cmp	r1, r2
    ba5a:	bls.n	ba6e <__udivmoddi4+0x282>
    ba5c:	adds.w	r2, ip, r2
    ba60:	add.w	r8, r5, #4294967295
    ba64:	bcs.n	ba94 <__udivmoddi4+0x2a8>
    ba66:	cmp	r1, r2
    ba68:	bls.n	ba94 <__udivmoddi4+0x2a8>
    ba6a:	subs	r5, #2
    ba6c:	add	r2, ip
    ba6e:	subs	r2, r2, r1
    ba70:	orr.w	r1, r5, r0, lsl #16
    ba74:	b.n	b8e8 <__udivmoddi4+0xfc>
    ba76:	mov	r1, r6
    ba78:	mov	r0, r6
    ba7a:	b.n	b88e <__udivmoddi4+0xa2>
    ba7c:	mov	r1, r7
    ba7e:	b.n	b84e <__udivmoddi4+0x62>
    ba80:	mov	r0, r2
    ba82:	b.n	b87c <__udivmoddi4+0x90>
    ba84:	cmp	r0, r9
    ba86:	bcs.n	b9dc <__udivmoddi4+0x1f0>
    ba88:	subs.w	r8, r9, r2
    ba8c:	sbc.w	lr, r5, ip
    ba90:	subs	r3, #1
    ba92:	b.n	b9dc <__udivmoddi4+0x1f0>
    ba94:	mov	r5, r8
    ba96:	b.n	ba6e <__udivmoddi4+0x282>
    ba98:	mov	r3, r5
    ba9a:	b.n	b9c6 <__udivmoddi4+0x1da>
    ba9c:	mov	r0, r8
    ba9e:	b.n	ba44 <__udivmoddi4+0x258>
    baa0:	mov	r8, sl
    baa2:	b.n	b99c <__udivmoddi4+0x1b0>
    baa4:	subs	r5, #2
    baa6:	add	r2, ip
    baa8:	b.n	b910 <__udivmoddi4+0x124>
    baaa:	mov	r0, r1
    baac:	b.n	b8c4 <__udivmoddi4+0xd8>
    baae:	add	r4, ip
    bab0:	subs	r0, #2
    bab2:	b.n	b93a <__udivmoddi4+0x14e>

0000bab4 <__aeabi_idiv0>:
    bab4:	bx	lr
    bab6:	nop

0000bab8 <malloc>:
    bab8:	ldr	r3, [pc, #8]	; (bac4 <malloc+0xc>)
    baba:	mov	r1, r0
    babc:	ldr	r0, [r3, #0]
    babe:	b.w	bad8 <_malloc_r>
    bac2:	nop
    bac4:	.word	0x20008eec

0000bac8 <free>:
    bac8:	ldr	r3, [pc, #8]	; (bad4 <free+0xc>)
    baca:	mov	r1, r0
    bacc:	ldr	r0, [r3, #0]
    bace:	b.w	e324 <_free_r>
    bad2:	nop
    bad4:	.word	0x20008eec

0000bad8 <_malloc_r>:
    bad8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    badc:	add.w	r6, r1, #11
    bae0:	cmp	r6, #22
    bae2:	sub	sp, #12
    bae4:	mov	r4, r0
    bae6:	bhi.n	bb32 <_malloc_r+0x5a>
    bae8:	cmp	r1, #16
    baea:	bhi.w	bc62 <_malloc_r+0x18a>
    baee:	bl	c038 <__malloc_lock>
    baf2:	movs	r6, #16
    baf4:	movs	r2, #24
    baf6:	movs	r0, #2
    baf8:	ldr	r7, [pc, #724]	; (bdd0 <_malloc_r+0x2f8>)
    bafa:	add	r2, r7
    bafc:	sub.w	r1, r2, #8
    bb00:	ldr	r3, [r2, #4]
    bb02:	cmp	r3, r1
    bb04:	beq.w	bc7c <_malloc_r+0x1a4>
    bb08:	ldr	r2, [r3, #4]
    bb0a:	ldr	r1, [r3, #12]
    bb0c:	bic.w	r2, r2, #3
    bb10:	add	r2, r3
    bb12:	ldr	r5, [r3, #8]
    bb14:	str	r1, [r5, #12]
    bb16:	str	r5, [r1, #8]
    bb18:	ldr	r1, [r2, #4]
    bb1a:	orr.w	r1, r1, #1
    bb1e:	mov	r0, r4
    bb20:	str	r1, [r2, #4]
    bb22:	add.w	r5, r3, #8
    bb26:	bl	c044 <__malloc_unlock>
    bb2a:	mov	r0, r5
    bb2c:	add	sp, #12
    bb2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb32:	bics.w	r6, r6, #7
    bb36:	bmi.w	bc62 <_malloc_r+0x18a>
    bb3a:	cmp	r1, r6
    bb3c:	bhi.w	bc62 <_malloc_r+0x18a>
    bb40:	bl	c038 <__malloc_lock>
    bb44:	cmp.w	r6, #504	; 0x1f8
    bb48:	bcc.w	be80 <_malloc_r+0x3a8>
    bb4c:	lsrs	r3, r6, #9
    bb4e:	beq.w	bc70 <_malloc_r+0x198>
    bb52:	cmp	r3, #4
    bb54:	bhi.w	be36 <_malloc_r+0x35e>
    bb58:	lsrs	r3, r6, #6
    bb5a:	add.w	r0, r3, #57	; 0x39
    bb5e:	add.w	ip, r3, #56	; 0x38
    bb62:	lsls	r3, r0, #3
    bb64:	ldr	r7, [pc, #616]	; (bdd0 <_malloc_r+0x2f8>)
    bb66:	add	r3, r7
    bb68:	sub.w	r5, r3, #8
    bb6c:	ldr	r3, [r3, #4]
    bb6e:	cmp	r5, r3
    bb70:	bne.n	bb80 <_malloc_r+0xa8>
    bb72:	b.n	bb8e <_malloc_r+0xb6>
    bb74:	cmp	r1, #0
    bb76:	bge.w	bdc8 <_malloc_r+0x2f0>
    bb7a:	ldr	r3, [r3, #12]
    bb7c:	cmp	r5, r3
    bb7e:	beq.n	bb8e <_malloc_r+0xb6>
    bb80:	ldr	r2, [r3, #4]
    bb82:	bic.w	r2, r2, #3
    bb86:	subs	r1, r2, r6
    bb88:	cmp	r1, #15
    bb8a:	ble.n	bb74 <_malloc_r+0x9c>
    bb8c:	mov	r0, ip
    bb8e:	ldr	r5, [r7, #16]
    bb90:	ldr.w	ip, [pc, #592]	; bde4 <_malloc_r+0x30c>
    bb94:	cmp	r5, ip
    bb96:	beq.n	bc92 <_malloc_r+0x1ba>
    bb98:	ldr	r2, [r5, #4]
    bb9a:	bic.w	r2, r2, #3
    bb9e:	subs	r3, r2, r6
    bba0:	cmp	r3, #15
    bba2:	bgt.w	be9c <_malloc_r+0x3c4>
    bba6:	cmp	r3, #0
    bba8:	strd	ip, ip, [r7, #16]
    bbac:	bge.w	be88 <_malloc_r+0x3b0>
    bbb0:	cmp.w	r2, #512	; 0x200
    bbb4:	bcs.w	bdec <_malloc_r+0x314>
    bbb8:	lsrs	r3, r2, #3
    bbba:	ldr	r1, [r7, #4]
    bbbc:	adds	r3, #1
    bbbe:	mov.w	lr, r2, lsr #5
    bbc2:	movs	r2, #1
    bbc4:	lsl.w	r2, r2, lr
    bbc8:	orrs	r2, r1
    bbca:	ldr.w	lr, [r7, r3, lsl #3]
    bbce:	str.w	lr, [r5, #8]
    bbd2:	add.w	r1, r7, r3, lsl #3
    bbd6:	subs	r1, #8
    bbd8:	str	r1, [r5, #12]
    bbda:	str	r2, [r7, #4]
    bbdc:	str.w	r5, [r7, r3, lsl #3]
    bbe0:	str.w	r5, [lr, #12]
    bbe4:	asrs	r3, r0, #2
    bbe6:	movs	r1, #1
    bbe8:	lsls	r1, r3
    bbea:	cmp	r1, r2
    bbec:	bhi.n	bc9e <_malloc_r+0x1c6>
    bbee:	tst	r1, r2
    bbf0:	bne.n	bc00 <_malloc_r+0x128>
    bbf2:	bic.w	r0, r0, #3
    bbf6:	lsls	r1, r1, #1
    bbf8:	tst	r1, r2
    bbfa:	add.w	r0, r0, #4
    bbfe:	beq.n	bbf6 <_malloc_r+0x11e>
    bc00:	add.w	r9, r7, r0, lsl #3
    bc04:	mov	r5, r9
    bc06:	mov	lr, r0
    bc08:	ldr.w	r8, [r5, #12]
    bc0c:	cmp	r5, r8
    bc0e:	bne.n	bc22 <_malloc_r+0x14a>
    bc10:	b.n	be4e <_malloc_r+0x376>
    bc12:	cmp	r3, #0
    bc14:	bge.w	be60 <_malloc_r+0x388>
    bc18:	ldr.w	r8, [r8, #12]
    bc1c:	cmp	r5, r8
    bc1e:	beq.w	be4e <_malloc_r+0x376>
    bc22:	ldr.w	r2, [r8, #4]
    bc26:	bic.w	r2, r2, #3
    bc2a:	subs	r3, r2, r6
    bc2c:	cmp	r3, #15
    bc2e:	ble.n	bc12 <_malloc_r+0x13a>
    bc30:	mov	r0, r4
    bc32:	ldrd	r5, r4, [r8, #8]
    bc36:	add.w	r1, r8, r6
    bc3a:	orr.w	r6, r6, #1
    bc3e:	str.w	r6, [r8, #4]
    bc42:	str	r4, [r5, #12]
    bc44:	str	r5, [r4, #8]
    bc46:	orr.w	r4, r3, #1
    bc4a:	strd	r1, r1, [r7, #16]
    bc4e:	strd	ip, ip, [r1, #8]
    bc52:	str	r4, [r1, #4]
    bc54:	str.w	r3, [r8, r2]
    bc58:	bl	c044 <__malloc_unlock>
    bc5c:	add.w	r5, r8, #8
    bc60:	b.n	bc68 <_malloc_r+0x190>
    bc62:	movs	r3, #12
    bc64:	str	r3, [r4, #0]
    bc66:	movs	r5, #0
    bc68:	mov	r0, r5
    bc6a:	add	sp, #12
    bc6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc70:	mov.w	r3, #512	; 0x200
    bc74:	movs	r0, #64	; 0x40
    bc76:	mov.w	ip, #63	; 0x3f
    bc7a:	b.n	bb64 <_malloc_r+0x8c>
    bc7c:	ldr	r3, [r2, #12]
    bc7e:	cmp	r2, r3
    bc80:	it	eq
    bc82:	addeq	r0, #2
    bc84:	bne.w	bb08 <_malloc_r+0x30>
    bc88:	ldr	r5, [r7, #16]
    bc8a:	ldr.w	ip, [pc, #344]	; bde4 <_malloc_r+0x30c>
    bc8e:	cmp	r5, ip
    bc90:	bne.n	bb98 <_malloc_r+0xc0>
    bc92:	ldr	r2, [r7, #4]
    bc94:	asrs	r3, r0, #2
    bc96:	movs	r1, #1
    bc98:	lsls	r1, r3
    bc9a:	cmp	r1, r2
    bc9c:	bls.n	bbee <_malloc_r+0x116>
    bc9e:	ldr	r5, [r7, #8]
    bca0:	ldr	r3, [r5, #4]
    bca2:	bic.w	r9, r3, #3
    bca6:	cmp	r6, r9
    bca8:	bhi.n	bcb2 <_malloc_r+0x1da>
    bcaa:	sub.w	r3, r9, r6
    bcae:	cmp	r3, #15
    bcb0:	bgt.n	bda8 <_malloc_r+0x2d0>
    bcb2:	ldr.w	fp, [pc, #308]	; bde8 <_malloc_r+0x310>
    bcb6:	ldr	r3, [pc, #284]	; (bdd4 <_malloc_r+0x2fc>)
    bcb8:	ldr.w	r2, [fp]
    bcbc:	ldr	r3, [r3, #0]
    bcbe:	adds	r2, #1
    bcc0:	add	r3, r6
    bcc2:	add.w	sl, r5, r9
    bcc6:	beq.w	bf30 <_malloc_r+0x458>
    bcca:	add.w	r3, r3, #4096	; 0x1000
    bcce:	adds	r3, #15
    bcd0:	bic.w	r8, r3, #4080	; 0xff0
    bcd4:	bic.w	r8, r8, #15
    bcd8:	mov	r1, r8
    bcda:	mov	r0, r4
    bcdc:	bl	dbdc <_sbrk_r>
    bce0:	adds	r1, r0, #1
    bce2:	mov	r2, r0
    bce4:	beq.w	bece <_malloc_r+0x3f6>
    bce8:	cmp	sl, r0
    bcea:	bhi.w	beca <_malloc_r+0x3f2>
    bcee:	ldr	r3, [pc, #232]	; (bdd8 <_malloc_r+0x300>)
    bcf0:	ldr	r1, [r3, #0]
    bcf2:	add	r1, r8
    bcf4:	str	r1, [r3, #0]
    bcf6:	mov	r0, r1
    bcf8:	beq.w	bf98 <_malloc_r+0x4c0>
    bcfc:	ldr.w	r1, [fp]
    bd00:	str	r3, [sp, #4]
    bd02:	adds	r1, #1
    bd04:	ittet	ne
    bd06:	subne.w	r1, r2, sl
    bd0a:	addne	r1, r1, r0
    bd0c:	streq.w	r2, [fp]
    bd10:	strne	r1, [r3, #0]
    bd12:	ands.w	fp, r2, #7
    bd16:	beq.w	bf48 <_malloc_r+0x470>
    bd1a:	rsb	r1, fp, #8
    bd1e:	add	r2, r1
    bd20:	rsb	r1, fp, #4096	; 0x1000
    bd24:	add	r8, r2
    bd26:	adds	r1, #8
    bd28:	sub.w	r1, r1, r8
    bd2c:	ubfx	sl, r1, #0, #12
    bd30:	mov	r1, sl
    bd32:	mov	r0, r4
    bd34:	str	r2, [sp, #0]
    bd36:	bl	dbdc <_sbrk_r>
    bd3a:	adds	r2, r0, #1
    bd3c:	ldrd	r2, r3, [sp]
    bd40:	beq.w	bfe2 <_malloc_r+0x50a>
    bd44:	subs	r0, r0, r2
    bd46:	add.w	r8, r0, sl
    bd4a:	ldr	r1, [r3, #0]
    bd4c:	str	r2, [r7, #8]
    bd4e:	orr.w	r0, r8, #1
    bd52:	add	r1, sl
    bd54:	cmp	r5, r7
    bd56:	str	r0, [r2, #4]
    bd58:	str	r1, [r3, #0]
    bd5a:	beq.w	bfb0 <_malloc_r+0x4d8>
    bd5e:	cmp.w	r9, #15
    bd62:	bls.w	bfb4 <_malloc_r+0x4dc>
    bd66:	ldr	r0, [r5, #4]
    bd68:	sub.w	ip, r9, #12
    bd6c:	bic.w	ip, ip, #7
    bd70:	and.w	r0, r0, #1
    bd74:	orr.w	r0, r0, ip
    bd78:	str	r0, [r5, #4]
    bd7a:	mov.w	lr, #5
    bd7e:	add.w	r0, r5, ip
    bd82:	cmp.w	ip, #15
    bd86:	strd	lr, lr, [r0, #4]
    bd8a:	bhi.w	bff2 <_malloc_r+0x51a>
    bd8e:	ldr	r0, [r2, #4]
    bd90:	mov	r5, r2
    bd92:	ldr	r3, [pc, #72]	; (bddc <_malloc_r+0x304>)
    bd94:	ldr	r2, [r3, #0]
    bd96:	cmp	r2, r1
    bd98:	it	cc
    bd9a:	strcc	r1, [r3, #0]
    bd9c:	ldr	r3, [pc, #64]	; (bde0 <_malloc_r+0x308>)
    bd9e:	ldr	r2, [r3, #0]
    bda0:	cmp	r2, r1
    bda2:	it	cc
    bda4:	strcc	r1, [r3, #0]
    bda6:	b.n	bed2 <_malloc_r+0x3fa>
    bda8:	adds	r2, r5, r6
    bdaa:	orr.w	r3, r3, #1
    bdae:	orr.w	r6, r6, #1
    bdb2:	str	r6, [r5, #4]
    bdb4:	mov	r0, r4
    bdb6:	str	r2, [r7, #8]
    bdb8:	str	r3, [r2, #4]
    bdba:	bl	c044 <__malloc_unlock>
    bdbe:	adds	r5, #8
    bdc0:	mov	r0, r5
    bdc2:	add	sp, #12
    bdc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdc8:	ldr	r1, [r3, #12]
    bdca:	add	r2, r3
    bdcc:	b.n	bb12 <_malloc_r+0x3a>
    bdce:	nop
    bdd0:	.word	0x20008ad0
    bdd4:	.word	0x20027024
    bdd8:	.word	0x20026ff4
    bddc:	.word	0x2002701c
    bde0:	.word	0x20027020
    bde4:	.word	0x20008ad8
    bde8:	.word	0x20008ed8
    bdec:	cmp.w	r2, #2560	; 0xa00
    bdf0:	mov.w	r3, r2, lsr #9
    bdf4:	bcc.n	bebe <_malloc_r+0x3e6>
    bdf6:	cmp	r3, #20
    bdf8:	bhi.w	bf6a <_malloc_r+0x492>
    bdfc:	add.w	r1, r3, #92	; 0x5c
    be00:	lsls	r1, r1, #3
    be02:	adds	r3, #91	; 0x5b
    be04:	add.w	lr, r7, r1
    be08:	ldr	r1, [r7, r1]
    be0a:	sub.w	lr, lr, #8
    be0e:	cmp	lr, r1
    be10:	beq.w	bf36 <_malloc_r+0x45e>
    be14:	ldr	r3, [r1, #4]
    be16:	bic.w	r3, r3, #3
    be1a:	cmp	r3, r2
    be1c:	bls.n	be24 <_malloc_r+0x34c>
    be1e:	ldr	r1, [r1, #8]
    be20:	cmp	lr, r1
    be22:	bne.n	be14 <_malloc_r+0x33c>
    be24:	ldr.w	lr, [r1, #12]
    be28:	ldr	r2, [r7, #4]
    be2a:	strd	r1, lr, [r5, #8]
    be2e:	str.w	r5, [lr, #8]
    be32:	str	r5, [r1, #12]
    be34:	b.n	bbe4 <_malloc_r+0x10c>
    be36:	cmp	r3, #20
    be38:	bls.n	beee <_malloc_r+0x416>
    be3a:	cmp	r3, #84	; 0x54
    be3c:	bhi.w	bf7a <_malloc_r+0x4a2>
    be40:	lsrs	r3, r6, #12
    be42:	add.w	r0, r3, #111	; 0x6f
    be46:	add.w	ip, r3, #110	; 0x6e
    be4a:	lsls	r3, r0, #3
    be4c:	b.n	bb64 <_malloc_r+0x8c>
    be4e:	add.w	lr, lr, #1
    be52:	tst.w	lr, #3
    be56:	add.w	r5, r5, #8
    be5a:	bne.w	bc08 <_malloc_r+0x130>
    be5e:	b.n	bf04 <_malloc_r+0x42c>
    be60:	add	r2, r8
    be62:	mov	r5, r8
    be64:	ldr	r3, [r2, #4]
    be66:	ldr.w	r1, [r8, #12]
    be6a:	orr.w	r3, r3, #1
    be6e:	str	r3, [r2, #4]
    be70:	ldr.w	r3, [r5, #8]!
    be74:	mov	r0, r4
    be76:	str	r1, [r3, #12]
    be78:	str	r3, [r1, #8]
    be7a:	bl	c044 <__malloc_unlock>
    be7e:	b.n	bc68 <_malloc_r+0x190>
    be80:	lsrs	r0, r6, #3
    be82:	add.w	r2, r6, #8
    be86:	b.n	baf8 <_malloc_r+0x20>
    be88:	add	r2, r5
    be8a:	mov	r0, r4
    be8c:	ldr	r3, [r2, #4]
    be8e:	orr.w	r3, r3, #1
    be92:	str	r3, [r2, #4]
    be94:	adds	r5, #8
    be96:	bl	c044 <__malloc_unlock>
    be9a:	b.n	bc68 <_malloc_r+0x190>
    be9c:	adds	r1, r5, r6
    be9e:	mov	r0, r4
    bea0:	orr.w	r6, r6, #1
    bea4:	orr.w	r4, r3, #1
    bea8:	str	r6, [r5, #4]
    beaa:	strd	r1, r1, [r7, #16]
    beae:	strd	ip, ip, [r1, #8]
    beb2:	str	r4, [r1, #4]
    beb4:	str	r3, [r5, r2]
    beb6:	bl	c044 <__malloc_unlock>
    beba:	adds	r5, #8
    bebc:	b.n	bc68 <_malloc_r+0x190>
    bebe:	lsrs	r3, r2, #6
    bec0:	add.w	r1, r3, #57	; 0x39
    bec4:	lsls	r1, r1, #3
    bec6:	adds	r3, #56	; 0x38
    bec8:	b.n	be04 <_malloc_r+0x32c>
    beca:	cmp	r5, r7
    becc:	beq.n	bf8e <_malloc_r+0x4b6>
    bece:	ldr	r5, [r7, #8]
    bed0:	ldr	r0, [r5, #4]
    bed2:	bic.w	r8, r0, #3
    bed6:	cmp	r6, r8
    bed8:	sub.w	r3, r8, r6
    bedc:	bhi.n	bee4 <_malloc_r+0x40c>
    bede:	cmp	r3, #15
    bee0:	bgt.w	bda8 <_malloc_r+0x2d0>
    bee4:	mov	r0, r4
    bee6:	bl	c044 <__malloc_unlock>
    beea:	movs	r5, #0
    beec:	b.n	bc68 <_malloc_r+0x190>
    beee:	add.w	r0, r3, #92	; 0x5c
    bef2:	add.w	ip, r3, #91	; 0x5b
    bef6:	lsls	r3, r0, #3
    bef8:	b.n	bb64 <_malloc_r+0x8c>
    befa:	ldr.w	r3, [r9], #-8
    befe:	cmp	r3, r9
    bf00:	bne.w	c030 <_malloc_r+0x558>
    bf04:	tst.w	r0, #3
    bf08:	add.w	r0, r0, #4294967295
    bf0c:	bne.n	befa <_malloc_r+0x422>
    bf0e:	ldr	r3, [r7, #4]
    bf10:	bic.w	r3, r3, r1
    bf14:	str	r3, [r7, #4]
    bf16:	lsls	r1, r1, #1
    bf18:	cmp	r1, r3
    bf1a:	bhi.w	bc9e <_malloc_r+0x1c6>
    bf1e:	cbnz	r1, bf28 <_malloc_r+0x450>
    bf20:	b.n	bc9e <_malloc_r+0x1c6>
    bf22:	lsls	r1, r1, #1
    bf24:	add.w	lr, lr, #4
    bf28:	tst	r1, r3
    bf2a:	beq.n	bf22 <_malloc_r+0x44a>
    bf2c:	mov	r0, lr
    bf2e:	b.n	bc00 <_malloc_r+0x128>
    bf30:	add.w	r8, r3, #16
    bf34:	b.n	bcd8 <_malloc_r+0x200>
    bf36:	asrs	r2, r3, #2
    bf38:	mov.w	r8, #1
    bf3c:	ldr	r3, [r7, #4]
    bf3e:	lsl.w	r2, r8, r2
    bf42:	orrs	r2, r3
    bf44:	str	r2, [r7, #4]
    bf46:	b.n	be2a <_malloc_r+0x352>
    bf48:	add.w	r1, r2, r8
    bf4c:	negs	r1, r1
    bf4e:	ubfx	sl, r1, #0, #12
    bf52:	mov	r1, sl
    bf54:	mov	r0, r4
    bf56:	str	r2, [sp, #0]
    bf58:	bl	dbdc <_sbrk_r>
    bf5c:	adds	r3, r0, #1
    bf5e:	ldrd	r2, r3, [sp]
    bf62:	bne.w	bd44 <_malloc_r+0x26c>
    bf66:	mov	sl, fp
    bf68:	b.n	bd4a <_malloc_r+0x272>
    bf6a:	cmp	r3, #84	; 0x54
    bf6c:	bhi.n	bfba <_malloc_r+0x4e2>
    bf6e:	lsrs	r3, r2, #12
    bf70:	add.w	r1, r3, #111	; 0x6f
    bf74:	lsls	r1, r1, #3
    bf76:	adds	r3, #110	; 0x6e
    bf78:	b.n	be04 <_malloc_r+0x32c>
    bf7a:	cmp.w	r3, #340	; 0x154
    bf7e:	bhi.n	bfcc <_malloc_r+0x4f4>
    bf80:	lsrs	r3, r6, #15
    bf82:	add.w	r0, r3, #120	; 0x78
    bf86:	add.w	ip, r3, #119	; 0x77
    bf8a:	lsls	r3, r0, #3
    bf8c:	b.n	bb64 <_malloc_r+0x8c>
    bf8e:	ldr	r3, [pc, #164]	; (c034 <_malloc_r+0x55c>)
    bf90:	ldr	r0, [r3, #0]
    bf92:	add	r0, r8
    bf94:	str	r0, [r3, #0]
    bf96:	b.n	bcfc <_malloc_r+0x224>
    bf98:	ubfx	ip, sl, #0, #12
    bf9c:	cmp.w	ip, #0
    bfa0:	bne.w	bcfc <_malloc_r+0x224>
    bfa4:	ldr	r5, [r7, #8]
    bfa6:	add	r8, r9
    bfa8:	orr.w	r0, r8, #1
    bfac:	str	r0, [r5, #4]
    bfae:	b.n	bd92 <_malloc_r+0x2ba>
    bfb0:	mov	r5, r2
    bfb2:	b.n	bd92 <_malloc_r+0x2ba>
    bfb4:	movs	r3, #1
    bfb6:	str	r3, [r2, #4]
    bfb8:	b.n	bee4 <_malloc_r+0x40c>
    bfba:	cmp.w	r3, #340	; 0x154
    bfbe:	bhi.n	c008 <_malloc_r+0x530>
    bfc0:	lsrs	r3, r2, #15
    bfc2:	add.w	r1, r3, #120	; 0x78
    bfc6:	lsls	r1, r1, #3
    bfc8:	adds	r3, #119	; 0x77
    bfca:	b.n	be04 <_malloc_r+0x32c>
    bfcc:	movw	r2, #1364	; 0x554
    bfd0:	cmp	r3, r2
    bfd2:	bhi.n	c01c <_malloc_r+0x544>
    bfd4:	lsrs	r3, r6, #18
    bfd6:	add.w	r0, r3, #125	; 0x7d
    bfda:	add.w	ip, r3, #124	; 0x7c
    bfde:	lsls	r3, r0, #3
    bfe0:	b.n	bb64 <_malloc_r+0x8c>
    bfe2:	sub.w	fp, fp, #8
    bfe6:	add	r8, fp
    bfe8:	sub.w	r8, r8, r2
    bfec:	mov.w	sl, #0
    bff0:	b.n	bd4a <_malloc_r+0x272>
    bff2:	add.w	r1, r5, #8
    bff6:	mov	r0, r4
    bff8:	str	r3, [sp, #0]
    bffa:	bl	e324 <_free_r>
    bffe:	ldr	r5, [r7, #8]
    c000:	ldr	r3, [sp, #0]
    c002:	ldr	r0, [r5, #4]
    c004:	ldr	r1, [r3, #0]
    c006:	b.n	bd92 <_malloc_r+0x2ba>
    c008:	movw	r1, #1364	; 0x554
    c00c:	cmp	r3, r1
    c00e:	bhi.n	c028 <_malloc_r+0x550>
    c010:	lsrs	r3, r2, #18
    c012:	add.w	r1, r3, #125	; 0x7d
    c016:	lsls	r1, r1, #3
    c018:	adds	r3, #124	; 0x7c
    c01a:	b.n	be04 <_malloc_r+0x32c>
    c01c:	mov.w	r3, #1016	; 0x3f8
    c020:	movs	r0, #127	; 0x7f
    c022:	mov.w	ip, #126	; 0x7e
    c026:	b.n	bb64 <_malloc_r+0x8c>
    c028:	mov.w	r1, #1016	; 0x3f8
    c02c:	movs	r3, #126	; 0x7e
    c02e:	b.n	be04 <_malloc_r+0x32c>
    c030:	ldr	r3, [r7, #4]
    c032:	b.n	bf16 <_malloc_r+0x43e>
    c034:	.word	0x20026ff4

0000c038 <__malloc_lock>:
    c038:	ldr	r0, [pc, #4]	; (c040 <__malloc_lock+0x8>)
    c03a:	b.w	dc88 <__retarget_lock_acquire_recursive>
    c03e:	nop
    c040:	.word	0x20026fec

0000c044 <__malloc_unlock>:
    c044:	ldr	r0, [pc, #4]	; (c04c <__malloc_unlock+0x8>)
    c046:	b.w	dc8c <__retarget_lock_release_recursive>
    c04a:	nop
    c04c:	.word	0x20026fec

0000c050 <realloc>:
    c050:	push	{r4}
    c052:	ldr	r4, [pc, #16]	; (c064 <realloc+0x14>)
    c054:	mov	r3, r0
    c056:	mov	r2, r1
    c058:	ldr	r0, [r4, #0]
    c05a:	ldr.w	r4, [sp], #4
    c05e:	mov	r1, r3
    c060:	b.w	c068 <_realloc_r>
    c064:	.word	0x20008eec

0000c068 <_realloc_r>:
    c068:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c06c:	mov	r7, r2
    c06e:	cmp	r1, #0
    c070:	beq.w	c1a4 <_realloc_r+0x13c>
    c074:	mov	r4, r1
    c076:	add.w	r5, r7, #11
    c07a:	mov	r8, r0
    c07c:	bl	c038 <__malloc_lock>
    c080:	cmp	r5, #22
    c082:	ldr.w	r1, [r4, #-4]
    c086:	bhi.n	c140 <_realloc_r+0xd8>
    c088:	movs	r5, #16
    c08a:	mov	r2, r5
    c08c:	cmp	r7, r5
    c08e:	bhi.n	c14a <_realloc_r+0xe2>
    c090:	bic.w	r6, r1, #3
    c094:	cmp	r6, r2
    c096:	sub.w	r9, r4, #8
    c09a:	bge.n	c162 <_realloc_r+0xfa>
    c09c:	ldr	r3, [pc, #752]	; (c390 <_realloc_r+0x328>)
    c09e:	ldr.w	ip, [r3, #8]
    c0a2:	add.w	r0, r9, r6
    c0a6:	cmp	ip, r0
    c0a8:	beq.w	c1da <_realloc_r+0x172>
    c0ac:	ldr.w	ip, [r0, #4]
    c0b0:	bic.w	r3, ip, #1
    c0b4:	add	r3, r0
    c0b6:	ldr	r3, [r3, #4]
    c0b8:	lsls	r3, r3, #31
    c0ba:	bmi.n	c18e <_realloc_r+0x126>
    c0bc:	bic.w	ip, ip, #3
    c0c0:	add.w	r3, r6, ip
    c0c4:	cmp	r3, r2
    c0c6:	bge.n	c158 <_realloc_r+0xf0>
    c0c8:	lsls	r3, r1, #31
    c0ca:	bmi.n	c0ee <_realloc_r+0x86>
    c0cc:	ldr.w	r3, [r4, #-8]
    c0d0:	sub.w	sl, r9, r3
    c0d4:	ldr.w	r3, [sl, #4]
    c0d8:	bic.w	r1, r3, #3
    c0dc:	add	ip, r1
    c0de:	add	ip, r6
    c0e0:	cmp	ip, r2
    c0e2:	bge.w	c308 <_realloc_r+0x2a0>
    c0e6:	adds	r3, r6, r1
    c0e8:	cmp	r3, r2
    c0ea:	bge.w	c2be <_realloc_r+0x256>
    c0ee:	mov	r1, r7
    c0f0:	mov	r0, r8
    c0f2:	bl	bad8 <_malloc_r>
    c0f6:	mov	r7, r0
    c0f8:	cbz	r0, c134 <_realloc_r+0xcc>
    c0fa:	ldr.w	r3, [r4, #-4]
    c0fe:	bic.w	r3, r3, #1
    c102:	add	r3, r9
    c104:	sub.w	r2, r0, #8
    c108:	cmp	r3, r2
    c10a:	beq.w	c2b2 <_realloc_r+0x24a>
    c10e:	subs	r2, r6, #4
    c110:	cmp	r2, #36	; 0x24
    c112:	bhi.w	c300 <_realloc_r+0x298>
    c116:	cmp	r2, #19
    c118:	bhi.w	c274 <_realloc_r+0x20c>
    c11c:	mov	r3, r0
    c11e:	mov	r2, r4
    c120:	ldr	r1, [r2, #0]
    c122:	str	r1, [r3, #0]
    c124:	ldr	r1, [r2, #4]
    c126:	str	r1, [r3, #4]
    c128:	ldr	r2, [r2, #8]
    c12a:	str	r2, [r3, #8]
    c12c:	mov	r1, r4
    c12e:	mov	r0, r8
    c130:	bl	e324 <_free_r>
    c134:	mov	r0, r8
    c136:	bl	c044 <__malloc_unlock>
    c13a:	mov	r0, r7
    c13c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c140:	bic.w	r5, r5, #7
    c144:	cmp	r5, #0
    c146:	mov	r2, r5
    c148:	bge.n	c08c <_realloc_r+0x24>
    c14a:	movs	r3, #12
    c14c:	str.w	r3, [r8]
    c150:	movs	r7, #0
    c152:	mov	r0, r7
    c154:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c158:	mov	r6, r3
    c15a:	ldrd	r2, r3, [r0, #8]
    c15e:	str	r3, [r2, #12]
    c160:	str	r2, [r3, #8]
    c162:	subs	r3, r6, r5
    c164:	cmp	r3, #15
    c166:	bhi.n	c1ae <_realloc_r+0x146>
    c168:	ldr.w	r3, [r9, #4]
    c16c:	and.w	r3, r3, #1
    c170:	orrs	r3, r6
    c172:	add	r6, r9
    c174:	str.w	r3, [r9, #4]
    c178:	ldr	r3, [r6, #4]
    c17a:	orr.w	r3, r3, #1
    c17e:	str	r3, [r6, #4]
    c180:	mov	r0, r8
    c182:	mov	r7, r4
    c184:	bl	c044 <__malloc_unlock>
    c188:	mov	r0, r7
    c18a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c18e:	lsls	r1, r1, #31
    c190:	bmi.n	c0ee <_realloc_r+0x86>
    c192:	ldr.w	r3, [r4, #-8]
    c196:	sub.w	sl, r9, r3
    c19a:	ldr.w	r1, [sl, #4]
    c19e:	bic.w	r1, r1, #3
    c1a2:	b.n	c0e6 <_realloc_r+0x7e>
    c1a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1a8:	mov	r1, r2
    c1aa:	b.w	bad8 <_malloc_r>
    c1ae:	ldr.w	r2, [r9, #4]
    c1b2:	add.w	r1, r9, r5
    c1b6:	and.w	r2, r2, #1
    c1ba:	add	r6, r9
    c1bc:	orr.w	r3, r3, #1
    c1c0:	orrs	r2, r5
    c1c2:	str.w	r2, [r9, #4]
    c1c6:	str	r3, [r1, #4]
    c1c8:	ldr	r3, [r6, #4]
    c1ca:	orr.w	r3, r3, #1
    c1ce:	adds	r1, #8
    c1d0:	str	r3, [r6, #4]
    c1d2:	mov	r0, r8
    c1d4:	bl	e324 <_free_r>
    c1d8:	b.n	c180 <_realloc_r+0x118>
    c1da:	ldr.w	r0, [ip, #4]
    c1de:	bic.w	fp, r0, #3
    c1e2:	add.w	ip, r6, fp
    c1e6:	add.w	r0, r5, #16
    c1ea:	cmp	ip, r0
    c1ec:	bge.n	c28a <_realloc_r+0x222>
    c1ee:	lsls	r1, r1, #31
    c1f0:	bmi.w	c0ee <_realloc_r+0x86>
    c1f4:	ldr.w	r1, [r4, #-8]
    c1f8:	sub.w	sl, r9, r1
    c1fc:	ldr.w	r1, [sl, #4]
    c200:	bic.w	r1, r1, #3
    c204:	add	fp, r1
    c206:	add	fp, r6
    c208:	cmp	r0, fp
    c20a:	bgt.w	c0e6 <_realloc_r+0x7e>
    c20e:	mov	r7, sl
    c210:	ldr.w	r1, [sl, #12]
    c214:	ldr.w	r0, [r7, #8]!
    c218:	subs	r2, r6, #4
    c21a:	cmp	r2, #36	; 0x24
    c21c:	str	r1, [r0, #12]
    c21e:	str	r0, [r1, #8]
    c220:	bhi.w	c3da <_realloc_r+0x372>
    c224:	cmp	r2, #19
    c226:	bls.w	c3d6 <_realloc_r+0x36e>
    c22a:	ldr	r1, [r4, #0]
    c22c:	str.w	r1, [sl, #8]
    c230:	ldr	r1, [r4, #4]
    c232:	str.w	r1, [sl, #12]
    c236:	cmp	r2, #27
    c238:	bhi.w	c3fa <_realloc_r+0x392>
    c23c:	adds	r4, #8
    c23e:	add.w	r2, sl, #16
    c242:	ldr	r1, [r4, #0]
    c244:	str	r1, [r2, #0]
    c246:	ldr	r1, [r4, #4]
    c248:	str	r1, [r2, #4]
    c24a:	ldr	r1, [r4, #8]
    c24c:	str	r1, [r2, #8]
    c24e:	add.w	r1, sl, r5
    c252:	sub.w	r2, fp, r5
    c256:	orr.w	r2, r2, #1
    c25a:	str	r1, [r3, #8]
    c25c:	str	r2, [r1, #4]
    c25e:	ldr.w	r3, [sl, #4]
    c262:	and.w	r3, r3, #1
    c266:	orrs	r3, r5
    c268:	mov	r0, r8
    c26a:	str.w	r3, [sl, #4]
    c26e:	bl	c044 <__malloc_unlock>
    c272:	b.n	c152 <_realloc_r+0xea>
    c274:	ldr	r3, [r4, #0]
    c276:	str	r3, [r0, #0]
    c278:	ldr	r3, [r4, #4]
    c27a:	str	r3, [r0, #4]
    c27c:	cmp	r2, #27
    c27e:	bhi.n	c352 <_realloc_r+0x2ea>
    c280:	add.w	r2, r4, #8
    c284:	add.w	r3, r0, #8
    c288:	b.n	c120 <_realloc_r+0xb8>
    c28a:	add.w	r2, r9, r5
    c28e:	str	r2, [r3, #8]
    c290:	sub.w	r3, ip, r5
    c294:	orr.w	r3, r3, #1
    c298:	str	r3, [r2, #4]
    c29a:	ldr.w	r3, [r4, #-4]
    c29e:	and.w	r3, r3, #1
    c2a2:	orrs	r3, r5
    c2a4:	mov	r0, r8
    c2a6:	str.w	r3, [r4, #-4]
    c2aa:	bl	c044 <__malloc_unlock>
    c2ae:	mov	r7, r4
    c2b0:	b.n	c152 <_realloc_r+0xea>
    c2b2:	ldr.w	r3, [r0, #-4]
    c2b6:	bic.w	r3, r3, #3
    c2ba:	add	r6, r3
    c2bc:	b.n	c162 <_realloc_r+0xfa>
    c2be:	mov	r7, sl
    c2c0:	ldr.w	r1, [sl, #12]
    c2c4:	ldr.w	r0, [r7, #8]!
    c2c8:	subs	r2, r6, #4
    c2ca:	cmp	r2, #36	; 0x24
    c2cc:	str	r1, [r0, #12]
    c2ce:	str	r0, [r1, #8]
    c2d0:	bhi.n	c36c <_realloc_r+0x304>
    c2d2:	cmp	r2, #19
    c2d4:	bls.n	c368 <_realloc_r+0x300>
    c2d6:	ldr	r1, [r4, #0]
    c2d8:	str.w	r1, [sl, #8]
    c2dc:	ldr	r1, [r4, #4]
    c2de:	str.w	r1, [sl, #12]
    c2e2:	cmp	r2, #27
    c2e4:	bhi.n	c394 <_realloc_r+0x32c>
    c2e6:	adds	r4, #8
    c2e8:	add.w	r2, sl, #16
    c2ec:	mov	r6, r3
    c2ee:	ldr	r3, [r4, #0]
    c2f0:	str	r3, [r2, #0]
    c2f2:	ldr	r3, [r4, #4]
    c2f4:	str	r3, [r2, #4]
    c2f6:	ldr	r3, [r4, #8]
    c2f8:	str	r3, [r2, #8]
    c2fa:	mov	r9, sl
    c2fc:	mov	r4, r7
    c2fe:	b.n	c162 <_realloc_r+0xfa>
    c300:	mov	r1, r4
    c302:	bl	d8c0 <memmove>
    c306:	b.n	c12c <_realloc_r+0xc4>
    c308:	ldrd	r1, r3, [r0, #8]
    c30c:	mov	r7, sl
    c30e:	str	r3, [r1, #12]
    c310:	str	r1, [r3, #8]
    c312:	ldr.w	r1, [r7, #8]!
    c316:	ldr.w	r3, [sl, #12]
    c31a:	str	r3, [r1, #12]
    c31c:	subs	r2, r6, #4
    c31e:	cmp	r2, #36	; 0x24
    c320:	str	r1, [r3, #8]
    c322:	bhi.n	c380 <_realloc_r+0x318>
    c324:	cmp	r2, #19
    c326:	bls.n	c37c <_realloc_r+0x314>
    c328:	ldr	r3, [r4, #0]
    c32a:	str.w	r3, [sl, #8]
    c32e:	ldr	r3, [r4, #4]
    c330:	str.w	r3, [sl, #12]
    c334:	cmp	r2, #27
    c336:	bhi.n	c3be <_realloc_r+0x356>
    c338:	adds	r4, #8
    c33a:	add.w	r3, sl, #16
    c33e:	ldr	r2, [r4, #0]
    c340:	str	r2, [r3, #0]
    c342:	ldr	r2, [r4, #4]
    c344:	str	r2, [r3, #4]
    c346:	ldr	r2, [r4, #8]
    c348:	str	r2, [r3, #8]
    c34a:	mov	r6, ip
    c34c:	mov	r9, sl
    c34e:	mov	r4, r7
    c350:	b.n	c162 <_realloc_r+0xfa>
    c352:	ldr	r3, [r4, #8]
    c354:	str	r3, [r0, #8]
    c356:	ldr	r3, [r4, #12]
    c358:	str	r3, [r0, #12]
    c35a:	cmp	r2, #36	; 0x24
    c35c:	beq.n	c3ac <_realloc_r+0x344>
    c35e:	add.w	r2, r4, #16
    c362:	add.w	r3, r0, #16
    c366:	b.n	c120 <_realloc_r+0xb8>
    c368:	mov	r2, r7
    c36a:	b.n	c2ec <_realloc_r+0x284>
    c36c:	mov	r1, r4
    c36e:	mov	r0, r7
    c370:	mov	r6, r3
    c372:	mov	r9, sl
    c374:	bl	d8c0 <memmove>
    c378:	mov	r4, r7
    c37a:	b.n	c162 <_realloc_r+0xfa>
    c37c:	mov	r3, r7
    c37e:	b.n	c33e <_realloc_r+0x2d6>
    c380:	mov	r1, r4
    c382:	mov	r0, r7
    c384:	mov	r6, ip
    c386:	mov	r9, sl
    c388:	bl	d8c0 <memmove>
    c38c:	mov	r4, r7
    c38e:	b.n	c162 <_realloc_r+0xfa>
    c390:	.word	0x20008ad0
    c394:	ldr	r1, [r4, #8]
    c396:	str.w	r1, [sl, #16]
    c39a:	ldr	r1, [r4, #12]
    c39c:	str.w	r1, [sl, #20]
    c3a0:	cmp	r2, #36	; 0x24
    c3a2:	beq.n	c3e6 <_realloc_r+0x37e>
    c3a4:	adds	r4, #16
    c3a6:	add.w	r2, sl, #24
    c3aa:	b.n	c2ec <_realloc_r+0x284>
    c3ac:	ldr	r3, [r4, #16]
    c3ae:	str	r3, [r0, #16]
    c3b0:	ldr	r1, [r4, #20]
    c3b2:	str	r1, [r0, #20]
    c3b4:	add.w	r2, r4, #24
    c3b8:	add.w	r3, r0, #24
    c3bc:	b.n	c120 <_realloc_r+0xb8>
    c3be:	ldr	r3, [r4, #8]
    c3c0:	str.w	r3, [sl, #16]
    c3c4:	ldr	r3, [r4, #12]
    c3c6:	str.w	r3, [sl, #20]
    c3ca:	cmp	r2, #36	; 0x24
    c3cc:	beq.n	c412 <_realloc_r+0x3aa>
    c3ce:	adds	r4, #16
    c3d0:	add.w	r3, sl, #24
    c3d4:	b.n	c33e <_realloc_r+0x2d6>
    c3d6:	mov	r2, r7
    c3d8:	b.n	c242 <_realloc_r+0x1da>
    c3da:	mov	r1, r4
    c3dc:	mov	r0, r7
    c3de:	bl	d8c0 <memmove>
    c3e2:	ldr	r3, [pc, #88]	; (c43c <_realloc_r+0x3d4>)
    c3e4:	b.n	c24e <_realloc_r+0x1e6>
    c3e6:	ldr	r2, [r4, #16]
    c3e8:	str.w	r2, [sl, #24]
    c3ec:	ldr	r2, [r4, #20]
    c3ee:	str.w	r2, [sl, #28]
    c3f2:	adds	r4, #24
    c3f4:	add.w	r2, sl, #32
    c3f8:	b.n	c2ec <_realloc_r+0x284>
    c3fa:	ldr	r1, [r4, #8]
    c3fc:	str.w	r1, [sl, #16]
    c400:	ldr	r1, [r4, #12]
    c402:	str.w	r1, [sl, #20]
    c406:	cmp	r2, #36	; 0x24
    c408:	beq.n	c426 <_realloc_r+0x3be>
    c40a:	adds	r4, #16
    c40c:	add.w	r2, sl, #24
    c410:	b.n	c242 <_realloc_r+0x1da>
    c412:	ldr	r3, [r4, #16]
    c414:	str.w	r3, [sl, #24]
    c418:	ldr	r3, [r4, #20]
    c41a:	str.w	r3, [sl, #28]
    c41e:	adds	r4, #24
    c420:	add.w	r3, sl, #32
    c424:	b.n	c33e <_realloc_r+0x2d6>
    c426:	ldr	r2, [r4, #16]
    c428:	str.w	r2, [sl, #24]
    c42c:	ldr	r2, [r4, #20]
    c42e:	str.w	r2, [sl, #28]
    c432:	adds	r4, #24
    c434:	add.w	r2, sl, #32
    c438:	b.n	c242 <_realloc_r+0x1da>
    c43a:	nop
    c43c:	.word	0x20008ad0

0000c440 <_strtod_l>:
    c440:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c444:	vpush	{d8-d15}
    c448:	sub	sp, #92	; 0x5c
    c44a:	mov	sl, r1
    c44c:	movs	r1, #0
    c44e:	str	r2, [sp, #28]
    c450:	str	r1, [sp, #72]	; 0x48
    c452:	movs	r2, #0
    c454:	movs	r1, #0
    c456:	strd	r1, r2, [sp, #16]
    c45a:	mov	r8, r0
    c45c:	mov	r1, sl
    c45e:	str	r1, [sp, #68]	; 0x44
    c460:	mov	r7, r1
    c462:	ldrb.w	r2, [r1], #1
    c466:	cmp	r2, #45	; 0x2d
    c468:	bhi.n	c528 <_strtod_l+0xe8>
    c46a:	add	r0, pc, #4	; (adr r0, c470 <_strtod_l+0x30>)
    c46c:	ldr.w	pc, [r0, r2, lsl #2]
    c470:	.word	0x0000c611
    c474:	.word	0x0000c529
    c478:	.word	0x0000c529
    c47c:	.word	0x0000c529
    c480:	.word	0x0000c529
    c484:	.word	0x0000c529
    c488:	.word	0x0000c529
    c48c:	.word	0x0000c529
    c490:	.word	0x0000c529
    c494:	.word	0x0000c45f
    c498:	.word	0x0000c45f
    c49c:	.word	0x0000c45f
    c4a0:	.word	0x0000c45f
    c4a4:	.word	0x0000c45f
    c4a8:	.word	0x0000c529
    c4ac:	.word	0x0000c529
    c4b0:	.word	0x0000c529
    c4b4:	.word	0x0000c529
    c4b8:	.word	0x0000c529
    c4bc:	.word	0x0000c529
    c4c0:	.word	0x0000c529
    c4c4:	.word	0x0000c529
    c4c8:	.word	0x0000c529
    c4cc:	.word	0x0000c529
    c4d0:	.word	0x0000c529
    c4d4:	.word	0x0000c529
    c4d8:	.word	0x0000c529
    c4dc:	.word	0x0000c529
    c4e0:	.word	0x0000c529
    c4e4:	.word	0x0000c529
    c4e8:	.word	0x0000c529
    c4ec:	.word	0x0000c529
    c4f0:	.word	0x0000c45f
    c4f4:	.word	0x0000c529
    c4f8:	.word	0x0000c529
    c4fc:	.word	0x0000c529
    c500:	.word	0x0000c529
    c504:	.word	0x0000c529
    c508:	.word	0x0000c529
    c50c:	.word	0x0000c529
    c510:	.word	0x0000c529
    c514:	.word	0x0000c529
    c518:	.word	0x0000c529
    c51c:	.word	0x0000cc4b
    c520:	.word	0x0000c529
    c524:	.word	0x0000cc37
    c528:	movs	r1, #0
    c52a:	str	r1, [sp, #36]	; 0x24
    c52c:	cmp	r2, #48	; 0x30
    c52e:	beq.n	c62c <_strtod_l+0x1ec>
    c530:	movs	r3, #0
    c532:	str	r3, [sp, #32]
    c534:	cmp	r2, #47	; 0x2f
    c536:	mov	r4, r2
    c538:	bls.w	ced6 <_strtod_l+0xa96>
    c53c:	mov.w	r9, #0
    c540:	mov	r0, r7
    c542:	mov	r6, r9
    c544:	mov	r5, r9
    c546:	b.n	c56e <_strtod_l+0x12e>
    c548:	adds	r0, #1
    c54a:	cmp	r5, #8
    c54c:	str	r0, [sp, #68]	; 0x44
    c54e:	it	gt
    c550:	addgt.w	r9, r9, r9, lsl #2
    c554:	ldrb	r4, [r0, #0]
    c556:	itte	gt
    c558:	addgt.w	r2, r2, r9, lsl #1
    c55c:	subgt.w	r9, r2, #48	; 0x30
    c560:	suble.w	r6, r3, #48	; 0x30
    c564:	cmp	r4, #47	; 0x2f
    c566:	add.w	r5, r5, #1
    c56a:	mov	r2, r4
    c56c:	ble.n	c64e <_strtod_l+0x20e>
    c56e:	add.w	r3, r6, r6, lsl #2
    c572:	cmp	r4, #57	; 0x39
    c574:	add.w	r3, r2, r3, lsl #1
    c578:	ble.n	c548 <_strtod_l+0x108>
    c57a:	ldr	r1, [pc, #636]	; (c7f8 <_strtod_l+0x3b8>)
    c57c:	movs	r2, #1
    c57e:	bl	da64 <strncmp>
    c582:	cmp	r0, #0
    c584:	bne.n	c5f6 <_strtod_l+0x1b6>
    c586:	ldr	r3, [sp, #68]	; 0x44
    c588:	mov	r2, r3
    c58a:	adds	r3, #1
    c58c:	str	r3, [sp, #68]	; 0x44
    c58e:	ldrb	r4, [r2, #1]
    c590:	cmp	r5, #0
    c592:	bne.w	d01c <_strtod_l+0xbdc>
    c596:	cmp	r4, #48	; 0x30
    c598:	bne.w	cfe4 <_strtod_l+0xba4>
    c59c:	rsb	r2, r3, #1
    c5a0:	adds	r0, r3, r2
    c5a2:	adds	r3, #1
    c5a4:	str	r3, [sp, #68]	; 0x44
    c5a6:	ldrb	r4, [r3, #0]
    c5a8:	cmp	r4, #48	; 0x30
    c5aa:	beq.n	c5a0 <_strtod_l+0x160>
    c5ac:	sub.w	r3, r4, #49	; 0x31
    c5b0:	cmp	r3, #8
    c5b2:	bhi.w	cbb8 <_strtod_l+0x778>
    c5b6:	ldr	r7, [sp, #68]	; 0x44
    c5b8:	adds	r3, r0, #1
    c5ba:	sub.w	fp, r4, #48	; 0x30
    c5be:	str	r3, [sp, #44]	; 0x2c
    c5c0:	movs	r5, #1
    c5c2:	mov	ip, r7
    c5c4:	mov.w	lr, #0
    c5c8:	add.w	r6, r6, r6, lsl #2
    c5cc:	add.w	r6, fp, r6, lsl #1
    c5d0:	movs	r0, #0
    c5d2:	add.w	r3, ip, #1
    c5d6:	str	r3, [sp, #68]	; 0x44
    c5d8:	ldrb.w	r4, [ip, #1]
    c5dc:	sub.w	r1, r4, #48	; 0x30
    c5e0:	cmp	r1, #9
    c5e2:	bhi.w	cb5c <_strtod_l+0x71c>
    c5e6:	adds	r0, #1
    c5e8:	mov	fp, r1
    c5ea:	cmp	r1, #0
    c5ec:	bne.w	ce8e <_strtod_l+0xa4e>
    c5f0:	ldr.w	ip, [sp, #68]	; 0x44
    c5f4:	b.n	c5d2 <_strtod_l+0x192>
    c5f6:	movs	r0, #0
    c5f8:	cmp	r4, #101	; 0x65
    c5fa:	mov	lr, r5
    c5fc:	str	r0, [sp, #44]	; 0x2c
    c5fe:	mov	ip, r0
    c600:	beq.n	c606 <_strtod_l+0x1c6>
    c602:	cmp	r4, #69	; 0x45
    c604:	bne.n	c668 <_strtod_l+0x228>
    c606:	cmp	r5, #0
    c608:	bne.n	c6e2 <_strtod_l+0x2a2>
    c60a:	ldr	r3, [sp, #32]
    c60c:	orrs	r3, r0
    c60e:	bne.n	c6e0 <_strtod_l+0x2a0>
    c610:	ldr	r3, [sp, #28]
    c612:	vldr	d8, [pc, #476]	; c7f0 <_strtod_l+0x3b0>
    c616:	cbz	r3, c61e <_strtod_l+0x1de>
    c618:	ldr	r3, [sp, #28]
    c61a:	str.w	sl, [r3]
    c61e:	vmov.f64	d0, d8
    c622:	add	sp, #92	; 0x5c
    c624:	vpop	{d8-d15}
    c628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c62c:	ldrb	r2, [r7, #1]
    c62e:	and.w	r2, r2, #223	; 0xdf
    c632:	cmp	r2, #88	; 0x58
    c634:	beq.w	ce50 <_strtod_l+0xa10>
    c638:	adds	r7, #1
    c63a:	str	r7, [sp, #68]	; 0x44
    c63c:	ldrb	r2, [r7, #0]
    c63e:	cmp	r2, #48	; 0x30
    c640:	beq.n	c638 <_strtod_l+0x1f8>
    c642:	cmp	r2, #0
    c644:	beq.w	c7b6 <_strtod_l+0x376>
    c648:	movs	r3, #1
    c64a:	str	r3, [sp, #32]
    c64c:	b.n	c534 <_strtod_l+0xf4>
    c64e:	ldr	r1, [pc, #424]	; (c7f8 <_strtod_l+0x3b8>)
    c650:	movs	r2, #1
    c652:	bl	da64 <strncmp>
    c656:	cmp	r0, #0
    c658:	beq.w	c7dc <_strtod_l+0x39c>
    c65c:	mov	lr, r5
    c65e:	mov.w	ip, #0
    c662:	str.w	ip, [sp, #44]	; 0x2c
    c666:	mov	r0, ip
    c668:	mov.w	fp, #0
    c66c:	cmp	r5, #0
    c66e:	beq.n	c76e <_strtod_l+0x32e>
    c670:	vmov	s15, r6
    c674:	ldr	r3, [sp, #44]	; 0x2c
    c676:	vcvt.f64.u32	d7, s15
    c67a:	sub.w	r3, fp, r3
    c67e:	cmp.w	lr, #0
    c682:	it	eq
    c684:	moveq	lr, r5
    c686:	cmp	r5, #16
    c688:	str	r3, [sp, #40]	; 0x28
    c68a:	mov	r3, r5
    c68c:	it	ge
    c68e:	movge	r3, #16
    c690:	cmp	r5, #9
    c692:	vstr	d7, [sp, #16]
    c696:	ble.n	c6b2 <_strtod_l+0x272>
    c698:	ldr	r2, [pc, #352]	; (c7fc <_strtod_l+0x3bc>)
    c69a:	add.w	r2, r2, r3, lsl #3
    c69e:	vldr	d5, [r2, #-72]	; 0xffffffb8
    c6a2:	vmov	s13, r9
    c6a6:	vcvt.f64.u32	d6, s13
    c6aa:	vfma.f64	d6, d7, d5
    c6ae:	vstr	d6, [sp, #16]
    c6b2:	cmp	r5, #15
    c6b4:	bgt.w	c808 <_strtod_l+0x3c8>
    c6b8:	ldr	r2, [sp, #40]	; 0x28
    c6ba:	cmp	r2, #0
    c6bc:	beq.w	ce88 <_strtod_l+0xa48>
    c6c0:	ldr	r2, [sp, #40]	; 0x28
    c6c2:	ble.w	cd3e <_strtod_l+0x8fe>
    c6c6:	cmp	r2, #22
    c6c8:	ble.w	cffc <_strtod_l+0xbbc>
    c6cc:	ldr	r1, [sp, #40]	; 0x28
    c6ce:	rsb	r2, r5, #37	; 0x25
    c6d2:	cmp	r2, r1
    c6d4:	bge.w	d024 <_strtod_l+0xbe4>
    c6d8:	ldr	r2, [sp, #40]	; 0x28
    c6da:	subs	r3, r5, r3
    c6dc:	add	r3, r2
    c6de:	b.n	c814 <_strtod_l+0x3d4>
    c6e0:	movs	r5, #0
    c6e2:	ldr.w	sl, [sp, #68]	; 0x44
    c6e6:	add.w	r3, sl, #1
    c6ea:	str	r3, [sp, #68]	; 0x44
    c6ec:	ldrb.w	r4, [sl, #1]
    c6f0:	cmp	r4, #43	; 0x2b
    c6f2:	beq.w	cbb2 <_strtod_l+0x772>
    c6f6:	cmp	r4, #45	; 0x2d
    c6f8:	beq.w	caea <_strtod_l+0x6aa>
    c6fc:	movs	r3, #0
    c6fe:	str	r3, [sp, #40]	; 0x28
    c700:	sub.w	r3, r4, #48	; 0x30
    c704:	cmp	r3, #9
    c706:	bhi.w	cae0 <_strtod_l+0x6a0>
    c70a:	cmp	r4, #48	; 0x30
    c70c:	bne.n	c71a <_strtod_l+0x2da>
    c70e:	ldr	r3, [sp, #68]	; 0x44
    c710:	adds	r3, #1
    c712:	str	r3, [sp, #68]	; 0x44
    c714:	ldrb	r4, [r3, #0]
    c716:	cmp	r4, #48	; 0x30
    c718:	beq.n	c710 <_strtod_l+0x2d0>
    c71a:	sub.w	r3, r4, #49	; 0x31
    c71e:	cmp	r3, #8
    c720:	bhi.n	c668 <_strtod_l+0x228>
    c722:	ldr	r2, [sp, #68]	; 0x44
    c724:	str	r2, [sp, #48]	; 0x30
    c726:	adds	r3, r2, #1
    c728:	str	r3, [sp, #68]	; 0x44
    c72a:	sub.w	fp, r4, #48	; 0x30
    c72e:	ldrb	r4, [r2, #1]
    c730:	cmp	r4, #47	; 0x2f
    c732:	bgt.n	c744 <_strtod_l+0x304>
    c734:	b.n	cef4 <_strtod_l+0xab4>
    c736:	adds	r3, #1
    c738:	str	r3, [sp, #68]	; 0x44
    c73a:	ldrb	r4, [r1, #1]
    c73c:	cmp	r4, #47	; 0x2f
    c73e:	sub.w	fp, r2, #48	; 0x30
    c742:	ble.n	c752 <_strtod_l+0x312>
    c744:	add.w	r2, fp, fp, lsl #2
    c748:	cmp	r4, #57	; 0x39
    c74a:	mov	r1, r3
    c74c:	add.w	r2, r4, r2, lsl #1
    c750:	ble.n	c736 <_strtod_l+0x2f6>
    c752:	ldr	r2, [sp, #48]	; 0x30
    c754:	subs	r3, r3, r2
    c756:	cmp	r3, #8
    c758:	ble.w	cef4 <_strtod_l+0xab4>
    c75c:	movw	fp, #19999	; 0x4e1f
    c760:	ldr	r3, [sp, #40]	; 0x28
    c762:	cmp	r3, #0
    c764:	beq.n	c66c <_strtod_l+0x22c>
    c766:	rsb	fp, fp, #0
    c76a:	cmp	r5, #0
    c76c:	bne.n	c670 <_strtod_l+0x230>
    c76e:	ldr	r3, [sp, #32]
    c770:	orrs	r3, r0
    c772:	bne.n	c7b6 <_strtod_l+0x376>
    c774:	cmp.w	ip, #0
    c778:	bne.w	c610 <_strtod_l+0x1d0>
    c77c:	cmp	r4, #105	; 0x69
    c77e:	beq.w	cf20 <_strtod_l+0xae0>
    c782:	bgt.w	cd6c <_strtod_l+0x92c>
    c786:	cmp	r4, #73	; 0x49
    c788:	beq.w	cf20 <_strtod_l+0xae0>
    c78c:	cmp	r4, #78	; 0x4e
    c78e:	bne.w	c610 <_strtod_l+0x1d0>
    c792:	ldr	r1, [pc, #108]	; (c800 <_strtod_l+0x3c0>)
    c794:	add	r0, sp, #68	; 0x44
    c796:	bl	eb68 <__match>
    c79a:	cmp	r0, #0
    c79c:	beq.w	c610 <_strtod_l+0x1d0>
    c7a0:	ldr	r3, [sp, #68]	; 0x44
    c7a2:	ldrb	r3, [r3, #0]
    c7a4:	cmp	r3, #40	; 0x28
    c7a6:	beq.w	d18e <_strtod_l+0xd4e>
    c7aa:	ldr	r0, [pc, #88]	; (c804 <_strtod_l+0x3c4>)
    c7ac:	bl	e1e0 <nan>
    c7b0:	vmov.f64	d8, d0
    c7b4:	b.n	c7ba <_strtod_l+0x37a>
    c7b6:	vldr	d8, [pc, #56]	; c7f0 <_strtod_l+0x3b0>
    c7ba:	ldr	r2, [sp, #28]
    c7bc:	cbz	r2, c7c2 <_strtod_l+0x382>
    c7be:	ldr	r3, [sp, #68]	; 0x44
    c7c0:	str	r3, [r2, #0]
    c7c2:	ldr	r3, [sp, #36]	; 0x24
    c7c4:	cmp	r3, #0
    c7c6:	beq.w	c61e <_strtod_l+0x1de>
    c7ca:	vneg.f64	d8, d8
    c7ce:	vmov.f64	d0, d8
    c7d2:	add	sp, #92	; 0x5c
    c7d4:	vpop	{d8-d15}
    c7d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7dc:	ldr	r3, [sp, #68]	; 0x44
    c7de:	str	r0, [sp, #44]	; 0x2c
    c7e0:	adds	r2, r3, #1
    c7e2:	str	r2, [sp, #68]	; 0x44
    c7e4:	ldrb	r4, [r3, #1]
    c7e6:	mov	lr, r5
    c7e8:	b.n	c5dc <_strtod_l+0x19c>
    c7ea:	nop
    c7ec:	nop.w
	...
    c7f8:	.word	0x20000984
    c7fc:	.word	0x20000328
    c800:	.word	0x20000994
    c804:	.word	0x200005f0
    c808:	ldr	r2, [sp, #40]	; 0x28
    c80a:	subs	r3, r5, r3
    c80c:	add	r3, r2
    c80e:	cmp	r3, #0
    c810:	ble.w	cd74 <_strtod_l+0x934>
    c814:	ands.w	r1, r3, #15
    c818:	beq.n	c830 <_strtod_l+0x3f0>
    c81a:	ldr	r2, [pc, #780]	; (cb28 <_strtod_l+0x6e8>)
    c81c:	add.w	r2, r2, r1, lsl #3
    c820:	vldr	d6, [sp, #16]
    c824:	vldr	d7, [r2]
    c828:	vmul.f64	d7, d7, d6
    c82c:	vstr	d7, [sp, #16]
    c830:	bics.w	r2, r3, #15
    c834:	bne.w	cca8 <_strtod_l+0x868>
    c838:	movs	r3, #0
    c83a:	str	r3, [sp, #32]
    c83c:	str	r6, [sp, #0]
    c83e:	mov	r3, r5
    c840:	mov	r2, lr
    c842:	mov	r1, r7
    c844:	mov	r0, r8
    c846:	bl	ee80 <__s2b>
    c84a:	mov	r9, r0
    c84c:	cmp	r0, #0
    c84e:	beq.w	ce14 <_strtod_l+0x9d4>
    c852:	ldr	r3, [sp, #44]	; 0x2c
    c854:	sub.w	fp, r3, fp
    c858:	ldr	r3, [sp, #40]	; 0x28
    c85a:	vldr	d14, [pc, #676]	; cb00 <_strtod_l+0x6c0>
    c85e:	cmp	r3, #0
    c860:	vldr	d12, [pc, #676]	; cb08 <_strtod_l+0x6c8>
    c864:	vldr	d13, [pc, #680]	; cb10 <_strtod_l+0x6d0>
    c868:	vldr	d11, [pc, #684]	; cb18 <_strtod_l+0x6d8>
    c86c:	ite	lt
    c86e:	movlt	r2, fp
    c870:	movge	r2, #0
    c872:	mov.w	sl, #0
    c876:	bic.w	r3, r3, r3, asr #31
    c87a:	str	r2, [sp, #44]	; 0x2c
    c87c:	str	r3, [sp, #48]	; 0x30
    c87e:	mov	r4, sl
    c880:	ldr.w	r1, [r9, #4]
    c884:	mov	r0, r8
    c886:	bl	ed7c <_Balloc>
    c88a:	mov	r6, r0
    c88c:	cmp	r0, #0
    c88e:	beq.w	caae <_strtod_l+0x66e>
    c892:	ldr.w	r2, [r9, #16]
    c896:	vldr	d8, [sp, #16]
    c89a:	adds	r2, #2
    c89c:	lsls	r2, r2, #2
    c89e:	add.w	r1, r9, #12
    c8a2:	adds	r0, #12
    c8a4:	bl	9488 <memcpy>
    c8a8:	vmov.f64	d0, d8
    c8ac:	add	r2, sp, #80	; 0x50
    c8ae:	add	r1, sp, #76	; 0x4c
    c8b0:	mov	r0, r8
    c8b2:	bl	f5f8 <__d2b>
    c8b6:	str	r0, [sp, #72]	; 0x48
    c8b8:	cmp	r0, #0
    c8ba:	beq.w	ca86 <_strtod_l+0x646>
    c8be:	movs	r1, #1
    c8c0:	mov	r0, r8
    c8c2:	bl	efd0 <__i2b>
    c8c6:	mov	r4, r0
    c8c8:	cmp	r0, #0
    c8ca:	beq.w	caae <_strtod_l+0x66e>
    c8ce:	ldr	r2, [sp, #76]	; 0x4c
    c8d0:	cmp	r2, #0
    c8d2:	blt.w	ca92 <_strtod_l+0x652>
    c8d6:	ldr	r3, [sp, #44]	; 0x2c
    c8d8:	ldr	r7, [sp, #48]	; 0x30
    c8da:	add.w	fp, r2, r3
    c8de:	ldr	r3, [sp, #32]
    c8e0:	ldr	r5, [sp, #80]	; 0x50
    c8e2:	subs	r2, r2, r3
    c8e4:	add	r2, r5
    c8e6:	ldr	r3, [pc, #580]	; (cb2c <_strtod_l+0x6ec>)
    c8e8:	subs	r2, #1
    c8ea:	cmp	r2, r3
    c8ec:	rsb	r5, r5, #54	; 0x36
    c8f0:	bge.w	ca24 <_strtod_l+0x5e4>
    c8f4:	subs	r1, r3, r2
    c8f6:	cmp	r1, #31
    c8f8:	sub.w	r5, r5, r1
    c8fc:	bgt.w	cac6 <_strtod_l+0x686>
    c900:	movs	r2, #1
    c902:	lsl.w	r3, r2, r1
    c906:	str	r3, [sp, #52]	; 0x34
    c908:	movs	r3, #0
    c90a:	str	r3, [sp, #56]	; 0x38
    c90c:	add	r7, r5
    c90e:	ldr	r3, [sp, #32]
    c910:	add	r5, fp
    c912:	cmp	fp, r5
    c914:	mov	r2, fp
    c916:	add	r7, r3
    c918:	it	ge
    c91a:	movge	r2, r5
    c91c:	cmp	r2, r7
    c91e:	it	ge
    c920:	movge	r2, r7
    c922:	cmp	r2, #0
    c924:	ble.n	c92e <_strtod_l+0x4ee>
    c926:	subs	r5, r5, r2
    c928:	subs	r7, r7, r2
    c92a:	sub.w	fp, fp, r2
    c92e:	ldr	r3, [sp, #44]	; 0x2c
    c930:	cmp	r3, #0
    c932:	bgt.w	ca46 <_strtod_l+0x606>
    c936:	cmp	r5, #0
    c938:	bgt.w	ca74 <_strtod_l+0x634>
    c93c:	ldr	r3, [sp, #40]	; 0x28
    c93e:	cmp	r3, #0
    c940:	bgt.w	cab2 <_strtod_l+0x672>
    c944:	cmp	r7, #0
    c946:	bgt.w	ca9c <_strtod_l+0x65c>
    c94a:	cmp.w	fp, #0
    c94e:	ble.n	c962 <_strtod_l+0x522>
    c950:	mov	r1, r4
    c952:	mov	r2, fp
    c954:	mov	r0, r8
    c956:	bl	f248 <__lshift>
    c95a:	mov	r4, r0
    c95c:	cmp	r0, #0
    c95e:	beq.w	caae <_strtod_l+0x66e>
    c962:	ldr	r1, [sp, #72]	; 0x48
    c964:	mov	r2, r6
    c966:	mov	r0, r8
    c968:	bl	f37c <__mdiff>
    c96c:	mov	sl, r0
    c96e:	cmp	r0, #0
    c970:	beq.w	caae <_strtod_l+0x66e>
    c974:	movs	r3, #0
    c976:	ldr	r5, [r0, #12]
    c978:	str	r3, [r0, #12]
    c97a:	mov	r1, r4
    c97c:	bl	f338 <__mcmp>
    c980:	cmp	r0, #0
    c982:	blt.w	d114 <_strtod_l+0xcd4>
    c986:	beq.w	d04c <_strtod_l+0xc0c>
    c98a:	mov	r1, r4
    c98c:	mov	r0, sl
    c98e:	bl	f6cc <__ratio>
    c992:	vmov.f64	d7, #0	; 0x40000000  2.0
    c996:	vcmpe.f64	d0, d7
    c99a:	vmrs	APSR_nzcv, fpscr
    c99e:	bhi.n	ca2e <_strtod_l+0x5ee>
    c9a0:	cmp	r5, #0
    c9a2:	beq.w	cb3c <_strtod_l+0x6fc>
    c9a6:	vmov.f64	d9, #112	; 0x3f800000  1.0
    c9aa:	ldr	r0, [sp, #20]
    c9ac:	ldr	r3, [pc, #384]	; (cb30 <_strtod_l+0x6f0>)
    c9ae:	movs	r2, #0
    c9b0:	ldr	r1, [pc, #384]	; (cb34 <_strtod_l+0x6f4>)
    c9b2:	ldr.w	ip, [pc, #388]	; cb38 <_strtod_l+0x6f8>
    c9b6:	and.w	r7, r0, r1
    c9ba:	cmp	r7, ip
    c9bc:	beq.w	cb68 <_strtod_l+0x728>
    c9c0:	ldr	r1, [sp, #32]
    c9c2:	cbz	r1, c9dc <_strtod_l+0x59c>
    c9c4:	cmp.w	r7, #111149056	; 0x6a00000
    c9c8:	bhi.n	c9dc <_strtod_l+0x59c>
    c9ca:	vcmpe.f64	d9, d11
    c9ce:	vmrs	APSR_nzcv, fpscr
    c9d2:	bls.w	cc82 <_strtod_l+0x842>
    c9d6:	add.w	r1, r3, #112197632	; 0x6b00000
    c9da:	subs	r3, r1, r7
    c9dc:	vmov.f64	d0, d8
    c9e0:	vmov	d10, r2, r3
    c9e4:	bl	f4d0 <__ulp>
    c9e8:	vfma.f64	d8, d10, d0
    c9ec:	vstr	d8, [sp, #16]
    c9f0:	vmov	r3, s17
    c9f4:	ldr	r2, [sp, #32]
    c9f6:	cbnz	r2, ca02 <_strtod_l+0x5c2>
    c9f8:	ldr	r2, [pc, #312]	; (cb34 <_strtod_l+0x6f4>)
    c9fa:	ands	r2, r3
    c9fc:	cmp	r7, r2
    c9fe:	beq.w	cbca <_strtod_l+0x78a>
    ca02:	ldr	r1, [sp, #72]	; 0x48
    ca04:	mov	r0, r8
    ca06:	bl	edc8 <_Bfree>
    ca0a:	mov	r1, r6
    ca0c:	mov	r0, r8
    ca0e:	bl	edc8 <_Bfree>
    ca12:	mov	r1, r4
    ca14:	mov	r0, r8
    ca16:	bl	edc8 <_Bfree>
    ca1a:	mov	r1, sl
    ca1c:	mov	r0, r8
    ca1e:	bl	edc8 <_Bfree>
    ca22:	b.n	c880 <_strtod_l+0x440>
    ca24:	movs	r3, #1
    ca26:	movs	r1, #0
    ca28:	strd	r3, r1, [sp, #52]	; 0x34
    ca2c:	b.n	c90c <_strtod_l+0x4cc>
    ca2e:	vmov.f64	d9, #96	; 0x3f000000  0.5
    ca32:	vmul.f64	d9, d0, d9
    ca36:	cmp	r5, #0
    ca38:	bne.n	cafa <_strtod_l+0x6ba>
    ca3a:	vneg.f64	d7, d9
    ca3e:	ldr	r0, [sp, #20]
    ca40:	vmov	r2, r3, d7
    ca44:	b.n	c9b0 <_strtod_l+0x570>
    ca46:	mov	r1, r4
    ca48:	mov	r2, r3
    ca4a:	mov	r0, r8
    ca4c:	bl	f188 <__pow5mult>
    ca50:	mov	r4, r0
    ca52:	cbz	r0, caae <_strtod_l+0x66e>
    ca54:	mov	r1, r0
    ca56:	ldr	r2, [sp, #72]	; 0x48
    ca58:	mov	r0, r8
    ca5a:	bl	f02c <__multiply>
    ca5e:	cbz	r0, caae <_strtod_l+0x66e>
    ca60:	str	r0, [sp, #60]	; 0x3c
    ca62:	ldr	r1, [sp, #72]	; 0x48
    ca64:	mov	r0, r8
    ca66:	bl	edc8 <_Bfree>
    ca6a:	ldr	r2, [sp, #60]	; 0x3c
    ca6c:	str	r2, [sp, #72]	; 0x48
    ca6e:	cmp	r5, #0
    ca70:	ble.w	c93c <_strtod_l+0x4fc>
    ca74:	ldr	r1, [sp, #72]	; 0x48
    ca76:	mov	r2, r5
    ca78:	mov	r0, r8
    ca7a:	bl	f248 <__lshift>
    ca7e:	str	r0, [sp, #72]	; 0x48
    ca80:	cmp	r0, #0
    ca82:	bne.w	c93c <_strtod_l+0x4fc>
    ca86:	movs	r3, #34	; 0x22
    ca88:	vldr	d8, [pc, #148]	; cb20 <_strtod_l+0x6e0>
    ca8c:	str.w	r3, [r8]
    ca90:	b.n	cc0c <_strtod_l+0x7cc>
    ca92:	ldr	r3, [sp, #48]	; 0x30
    ca94:	ldr.w	fp, [sp, #44]	; 0x2c
    ca98:	subs	r7, r3, r2
    ca9a:	b.n	c8de <_strtod_l+0x49e>
    ca9c:	mov	r1, r6
    ca9e:	mov	r2, r7
    caa0:	mov	r0, r8
    caa2:	bl	f248 <__lshift>
    caa6:	mov	r6, r0
    caa8:	cmp	r0, #0
    caaa:	bne.w	c94a <_strtod_l+0x50a>
    caae:	ldr	r0, [sp, #72]	; 0x48
    cab0:	b.n	ca86 <_strtod_l+0x646>
    cab2:	mov	r1, r6
    cab4:	ldr	r2, [sp, #48]	; 0x30
    cab6:	mov	r0, r8
    cab8:	bl	f188 <__pow5mult>
    cabc:	mov	r6, r0
    cabe:	cmp	r0, #0
    cac0:	bne.w	c944 <_strtod_l+0x504>
    cac4:	b.n	caae <_strtod_l+0x66e>
    cac6:	rsb	r2, r2, #4278190080	; 0xff000000
    caca:	add.w	r2, r2, #16711680	; 0xff0000
    cace:	add.w	r2, r2, #64256	; 0xfb00
    cad2:	movs	r1, #1
    cad4:	adds	r2, #226	; 0xe2
    cad6:	lsl.w	r3, r1, r2
    cada:	strd	r1, r3, [sp, #52]	; 0x34
    cade:	b.n	c90c <_strtod_l+0x4cc>
    cae0:	str.w	sl, [sp, #68]	; 0x44
    cae4:	mov.w	fp, #0
    cae8:	b.n	c66c <_strtod_l+0x22c>
    caea:	movs	r3, #1
    caec:	str	r3, [sp, #40]	; 0x28
    caee:	add.w	r3, sl, #2
    caf2:	str	r3, [sp, #68]	; 0x44
    caf4:	ldrb.w	r4, [sl, #2]
    caf8:	b.n	c700 <_strtod_l+0x2c0>
    cafa:	vmov.f64	d7, d9
    cafe:	b.n	ca3e <_strtod_l+0x5fe>
    cb00:	.word	0x94a03595
    cb04:	.word	0x3fcfffff
    cb08:	.word	0x94a03595
    cb0c:	.word	0x3fdfffff
    cb10:	.word	0x35afe535
    cb14:	.word	0x3fe00000
    cb18:	.word	0xffc00000
    cb1c:	.word	0x41dfffff
    cb20:	.word	0x00000000
    cb24:	.word	0x7ff00000
    cb28:	.word	0x20000328
    cb2c:	.word	0xfffffc02
    cb30:	.word	0x3ff00000
    cb34:	.word	0x7ff00000
    cb38:	.word	0x7fe00000
    cb3c:	ldrd	r1, r2, [sp, #16]
    cb40:	cmp	r1, #0
    cb42:	beq.w	cc50 <_strtod_l+0x810>
    cb46:	ldrd	r1, r2, [sp, #16]
    cb4a:	cmp	r1, #1
    cb4c:	beq.w	cf00 <_strtod_l+0xac0>
    cb50:	mov	r0, r2
    cb52:	ldr	r3, [pc, #732]	; (ce30 <_strtod_l+0x9f0>)
    cb54:	vmov.f64	d9, #112	; 0x3f800000  1.0
    cb58:	movs	r2, #0
    cb5a:	b.n	c9b0 <_strtod_l+0x570>
    cb5c:	cmp	r4, #101	; 0x65
    cb5e:	mov.w	ip, #1
    cb62:	beq.w	c6e2 <_strtod_l+0x2a2>
    cb66:	b.n	c602 <_strtod_l+0x1c2>
    cb68:	vmov	d10, r2, r3
    cb6c:	sub.w	r3, r0, #55574528	; 0x3500000
    cb70:	str	r3, [sp, #20]
    cb72:	vldr	d15, [sp, #16]
    cb76:	vmov.f64	d0, d15
    cb7a:	bl	f4d0 <__ulp>
    cb7e:	ldr	r1, [pc, #692]	; (ce34 <_strtod_l+0x9f4>)
    cb80:	vfma.f64	d15, d10, d0
    cb84:	vmov	r3, s31
    cb88:	ldr	r2, [pc, #684]	; (ce38 <_strtod_l+0x9f8>)
    cb8a:	ands	r1, r3
    cb8c:	cmp	r1, r2
    cb8e:	vstr	d15, [sp, #16]
    cb92:	bls.n	cc7a <_strtod_l+0x83a>
    cb94:	ldr	r3, [pc, #676]	; (ce3c <_strtod_l+0x9fc>)
    cb96:	vmov	r2, s17
    cb9a:	cmp	r2, r3
    cb9c:	bne.n	cba6 <_strtod_l+0x766>
    cb9e:	vmov	r3, s16
    cba2:	adds	r3, #1
    cba4:	beq.n	caae <_strtod_l+0x66e>
    cba6:	ldr	r2, [pc, #660]	; (ce3c <_strtod_l+0x9fc>)
    cba8:	mov.w	r3, #4294967295
    cbac:	strd	r3, r2, [sp, #16]
    cbb0:	b.n	ca02 <_strtod_l+0x5c2>
    cbb2:	movs	r3, #0
    cbb4:	str	r3, [sp, #40]	; 0x28
    cbb6:	b.n	caee <_strtod_l+0x6ae>
    cbb8:	cmp	r4, #101	; 0x65
    cbba:	beq.w	cd5e <_strtod_l+0x91e>
    cbbe:	cmp	r4, #69	; 0x45
    cbc0:	beq.w	cd5e <_strtod_l+0x91e>
    cbc4:	mov.w	ip, #1
    cbc8:	b.n	c76e <_strtod_l+0x32e>
    cbca:	vmov	r0, r1, d9
    cbce:	str	r3, [sp, #52]	; 0x34
    cbd0:	bl	164e4 <__aeabi_d2lz>
    cbd4:	bl	16488 <__aeabi_l2d>
    cbd8:	ldr	r3, [sp, #16]
    cbda:	orrs	r5, r3
    cbdc:	ldr	r3, [sp, #52]	; 0x34
    cbde:	vmov	d7, r0, r1
    cbe2:	ubfx	r3, r3, #0, #20
    cbe6:	orrs	r5, r3
    cbe8:	vsub.f64	d9, d9, d7
    cbec:	beq.w	cd30 <_strtod_l+0x8f0>
    cbf0:	vcmpe.f64	d9, d12
    cbf4:	vmrs	APSR_nzcv, fpscr
    cbf8:	bmi.n	cc06 <_strtod_l+0x7c6>
    cbfa:	vcmpe.f64	d9, d13
    cbfe:	vmrs	APSR_nzcv, fpscr
    cc02:	ble.w	ca02 <_strtod_l+0x5c2>
    cc06:	vldr	d8, [sp, #16]
    cc0a:	ldr	r0, [sp, #72]	; 0x48
    cc0c:	mov	r1, r0
    cc0e:	mov	r0, r8
    cc10:	bl	edc8 <_Bfree>
    cc14:	mov	r1, r6
    cc16:	mov	r0, r8
    cc18:	bl	edc8 <_Bfree>
    cc1c:	mov	r1, r4
    cc1e:	mov	r0, r8
    cc20:	bl	edc8 <_Bfree>
    cc24:	mov	r1, r9
    cc26:	mov	r0, r8
    cc28:	bl	edc8 <_Bfree>
    cc2c:	mov	r1, sl
    cc2e:	mov	r0, r8
    cc30:	bl	edc8 <_Bfree>
    cc34:	b.n	c7ba <_strtod_l+0x37a>
    cc36:	movs	r2, #1
    cc38:	str	r2, [sp, #36]	; 0x24
    cc3a:	adds	r1, r7, #1
    cc3c:	str	r1, [sp, #68]	; 0x44
    cc3e:	ldrb	r2, [r7, #1]
    cc40:	cmp	r2, #0
    cc42:	beq.w	c610 <_strtod_l+0x1d0>
    cc46:	mov	r7, r1
    cc48:	b.n	c52c <_strtod_l+0xec>
    cc4a:	movs	r2, #0
    cc4c:	str	r2, [sp, #36]	; 0x24
    cc4e:	b.n	cc3a <_strtod_l+0x7fa>
    cc50:	ubfx	r3, r2, #0, #20
    cc54:	mov	r0, r2
    cc56:	cmp	r3, #0
    cc58:	bne.w	cb52 <_strtod_l+0x712>
    cc5c:	vmov.f64	d7, #112	; 0x3f800000  1.0
    cc60:	vcmpe.f64	d0, d7
    cc64:	vmrs	APSR_nzcv, fpscr
    cc68:	bmi.w	d012 <_strtod_l+0xbd2>
    cc6c:	vmov.f64	d9, #96	; 0x3f000000  0.5
    cc70:	vmul.f64	d9, d0, d9
    cc74:	vneg.f64	d7, d9
    cc78:	b.n	ca40 <_strtod_l+0x600>
    cc7a:	add.w	r3, r3, #55574528	; 0x3500000
    cc7e:	str	r3, [sp, #20]
    cc80:	b.n	c9f4 <_strtod_l+0x5b4>
    cc82:	vcvt.u32.f64	s18, d9
    cc86:	vmov	r3, s18
    cc8a:	cmp	r3, #1
    cc8c:	it	cc
    cc8e:	movcc	r3, #1
    cc90:	vmov	s18, r3
    cc94:	vcvt.f64.u32	d9, s18
    cc98:	cmp	r5, #0
    cc9a:	bne.w	cf1a <_strtod_l+0xada>
    cc9e:	vneg.f64	d7, d9
    cca2:	vmov	r2, r3, d7
    cca6:	b.n	c9d6 <_strtod_l+0x596>
    cca8:	cmp.w	r2, #308	; 0x134
    ccac:	bgt.w	ce14 <_strtod_l+0x9d4>
    ccb0:	cmp	r2, #16
    ccb2:	mov.w	r3, r2, asr #4
    ccb6:	ble.w	d1c6 <_strtod_l+0xd86>
    ccba:	ldr	r4, [pc, #388]	; (ce40 <_strtod_l+0xa00>)
    ccbc:	vldr	d7, [sp, #16]
    ccc0:	movs	r0, #0
    ccc2:	mov	r2, r4
    ccc4:	mov	r1, r0
    ccc6:	tst.w	r3, #1
    ccca:	add.w	r1, r1, #1
    ccce:	mov.w	r3, r3, asr #1
    ccd2:	beq.n	ccde <_strtod_l+0x89e>
    ccd4:	vldr	d6, [r2]
    ccd8:	movs	r0, #1
    ccda:	vmul.f64	d7, d7, d6
    ccde:	cmp	r3, #1
    cce0:	add.w	r2, r2, #8
    cce4:	bne.n	ccc6 <_strtod_l+0x886>
    cce6:	cbz	r0, ccec <_strtod_l+0x8ac>
    cce8:	vstr	d7, [sp, #16]
    ccec:	ldr	r3, [sp, #20]
    ccee:	sub.w	r3, r3, #55574528	; 0x3500000
    ccf2:	str	r3, [sp, #20]
    ccf4:	add.w	r4, r4, r1, lsl #3
    ccf8:	vldr	d6, [sp, #16]
    ccfc:	vldr	d7, [r4]
    cd00:	ldr	r3, [pc, #304]	; (ce34 <_strtod_l+0x9f4>)
    cd02:	vmul.f64	d7, d7, d6
    cd06:	vmov	r2, s15
    cd0a:	ldr	r1, [pc, #312]	; (ce44 <_strtod_l+0xa04>)
    cd0c:	ands	r3, r2
    cd0e:	cmp	r3, r1
    cd10:	vstr	d7, [sp, #16]
    cd14:	bhi.n	ce14 <_strtod_l+0x9d4>
    cd16:	sub.w	r1, r1, #1048576	; 0x100000
    cd1a:	cmp	r3, r1
    cd1c:	bls.w	d0cc <_strtod_l+0xc8c>
    cd20:	ldr	r4, [pc, #280]	; (ce3c <_strtod_l+0x9fc>)
    cd22:	mov.w	r3, #4294967295
    cd26:	strd	r3, r4, [sp, #16]
    cd2a:	movs	r3, #0
    cd2c:	str	r3, [sp, #32]
    cd2e:	b.n	c83c <_strtod_l+0x3fc>
    cd30:	vcmpe.f64	d9, d14
    cd34:	vmrs	APSR_nzcv, fpscr
    cd38:	bpl.w	ca02 <_strtod_l+0x5c2>
    cd3c:	b.n	cc06 <_strtod_l+0x7c6>
    cd3e:	adds	r2, #22
    cd40:	blt.w	c808 <_strtod_l+0x3c8>
    cd44:	ldr	r3, [sp, #44]	; 0x2c
    cd46:	sub.w	fp, r3, fp
    cd4a:	ldr	r3, [pc, #252]	; (ce48 <_strtod_l+0xa08>)
    cd4c:	add.w	r3, r3, fp, lsl #3
    cd50:	vldr	d7, [r3]
    cd54:	vldr	d6, [sp, #16]
    cd58:	vdiv.f64	d8, d6, d7
    cd5c:	b.n	c7ba <_strtod_l+0x37a>
    cd5e:	mov.w	lr, #0
    cd62:	str.w	lr, [sp, #44]	; 0x2c
    cd66:	mov.w	ip, #1
    cd6a:	b.n	c60a <_strtod_l+0x1ca>
    cd6c:	cmp	r4, #110	; 0x6e
    cd6e:	beq.w	c792 <_strtod_l+0x352>
    cd72:	b.n	c610 <_strtod_l+0x1d0>
    cd74:	beq.w	c838 <_strtod_l+0x3f8>
    cd78:	negs	r3, r3
    cd7a:	ands.w	r1, r3, #15
    cd7e:	beq.n	cd96 <_strtod_l+0x956>
    cd80:	ldr	r2, [pc, #196]	; (ce48 <_strtod_l+0xa08>)
    cd82:	add.w	r2, r2, r1, lsl #3
    cd86:	vldr	d6, [sp, #16]
    cd8a:	vldr	d7, [r2]
    cd8e:	vdiv.f64	d7, d6, d7
    cd92:	vstr	d7, [sp, #16]
    cd96:	asrs	r3, r3, #4
    cd98:	beq.w	c838 <_strtod_l+0x3f8>
    cd9c:	cmp	r3, #31
    cd9e:	bgt.n	ce08 <_strtod_l+0x9c8>
    cda0:	ands.w	r2, r3, #16
    cda4:	it	ne
    cda6:	movne	r2, #106	; 0x6a
    cda8:	vldr	d7, [sp, #16]
    cdac:	str	r2, [sp, #32]
    cdae:	ldr	r2, [pc, #156]	; (ce4c <_strtod_l+0xa0c>)
    cdb0:	movs	r1, #0
    cdb2:	lsls	r0, r3, #31
    cdb4:	bpl.n	cdc0 <_strtod_l+0x980>
    cdb6:	vldr	d6, [r2]
    cdba:	movs	r1, #1
    cdbc:	vmul.f64	d7, d7, d6
    cdc0:	asrs	r3, r3, #1
    cdc2:	add.w	r2, r2, #8
    cdc6:	bne.n	cdb2 <_strtod_l+0x972>
    cdc8:	cbz	r1, cdce <_strtod_l+0x98e>
    cdca:	vstr	d7, [sp, #16]
    cdce:	ldr	r3, [sp, #32]
    cdd0:	cbz	r3, cdf8 <_strtod_l+0x9b8>
    cdd2:	ldrd	r0, r1, [sp, #16]
    cdd6:	ubfx	r2, r1, #20, #11
    cdda:	rsb	r3, r2, #107	; 0x6b
    cdde:	cmp	r3, #0
    cde0:	ble.n	cdf8 <_strtod_l+0x9b8>
    cde2:	cmp	r3, #31
    cde4:	ble.w	d246 <_strtod_l+0xe06>
    cde8:	movs	r0, #0
    cdea:	cmp	r3, #52	; 0x34
    cdec:	str	r0, [sp, #16]
    cdee:	ble.w	d272 <_strtod_l+0xe32>
    cdf2:	mov.w	r3, #57671680	; 0x3700000
    cdf6:	str	r3, [sp, #20]
    cdf8:	vldr	d7, [sp, #16]
    cdfc:	vcmp.f64	d7, #0.0
    ce00:	vmrs	APSR_nzcv, fpscr
    ce04:	bne.w	c83c <_strtod_l+0x3fc>
    ce08:	movs	r3, #34	; 0x22
    ce0a:	vldr	d8, [pc, #20]	; ce20 <_strtod_l+0x9e0>
    ce0e:	str.w	r3, [r8]
    ce12:	b.n	c7ba <_strtod_l+0x37a>
    ce14:	movs	r3, #34	; 0x22
    ce16:	vldr	d8, [pc, #16]	; ce28 <_strtod_l+0x9e8>
    ce1a:	str.w	r3, [r8]
    ce1e:	b.n	c7ba <_strtod_l+0x37a>
	...
    ce2c:	.word	0x7ff00000
    ce30:	.word	0xbff00000
    ce34:	.word	0x7ff00000
    ce38:	.word	0x7c9fffff
    ce3c:	.word	0x7fefffff
    ce40:	.word	0x20000300
    ce44:	.word	0x7ca00000
    ce48:	.word	0x20000328
    ce4c:	.word	0x200003f0
    ce50:	str	r3, [sp, #8]
    ce52:	ldr	r3, [sp, #36]	; 0x24
    ce54:	str	r3, [sp, #4]
    ce56:	add	r3, sp, #72	; 0x48
    ce58:	str	r3, [sp, #0]
    ce5a:	ldr	r2, [pc, #668]	; (d0f8 <_strtod_l+0xcb8>)
    ce5c:	add	r3, sp, #76	; 0x4c
    ce5e:	add	r1, sp, #68	; 0x44
    ce60:	mov	r0, r8
    ce62:	bl	e5d4 <__gethex>
    ce66:	ands.w	r5, r0, #15
    ce6a:	mov	r4, r0
    ce6c:	beq.w	c7b6 <_strtod_l+0x376>
    ce70:	cmp	r5, #6
    ce72:	bne.n	cf5e <_strtod_l+0xb1e>
    ce74:	ldr	r3, [sp, #28]
    ce76:	vldr	d8, [pc, #616]	; d0e0 <_strtod_l+0xca0>
    ce7a:	adds	r7, #1
    ce7c:	cmp	r3, #0
    ce7e:	beq.w	c61e <_strtod_l+0x1de>
    ce82:	str	r7, [r3, #0]
    ce84:	b.w	c61e <_strtod_l+0x1de>
    ce88:	vldr	d8, [sp, #16]
    ce8c:	b.n	c7ba <_strtod_l+0x37a>
    ce8e:	ldr	r3, [sp, #44]	; 0x2c
    ce90:	ldr.w	ip, [sp, #68]	; 0x44
    ce94:	add	r3, r0
    ce96:	str	r3, [sp, #44]	; 0x2c
    ce98:	cmp	r0, #1
    ce9a:	add.w	r3, r5, #1
    ce9e:	mov	r2, r3
    cea0:	beq.n	cecc <_strtod_l+0xa8c>
    cea2:	add	r0, r5
    cea4:	subs	r4, r0, #1
    cea6:	b.n	ceb0 <_strtod_l+0xa70>
    cea8:	lsls	r6, r0, #1
    ceaa:	cmp	r4, r3
    ceac:	beq.n	ceca <_strtod_l+0xa8a>
    ceae:	adds	r3, #1
    ceb0:	mov	r2, r5
    ceb2:	cmp	r2, #8
    ceb4:	mov	r5, r3
    ceb6:	add.w	r0, r6, r6, lsl #2
    ceba:	bls.n	cea8 <_strtod_l+0xa68>
    cebc:	cmp	r3, #16
    cebe:	itt	le
    cec0:	addle.w	r9, r9, r9, lsl #2
    cec4:	movle.w	r9, r9, lsl #1
    cec8:	b.n	ceaa <_strtod_l+0xa6a>
    ceca:	adds	r2, #2
    cecc:	cmp	r5, #8
    cece:	bgt.n	cf4a <_strtod_l+0xb0a>
    ced0:	mov	r5, r2
    ced2:	b.w	c5c8 <_strtod_l+0x188>
    ced6:	ldr	r1, [pc, #548]	; (d0fc <_strtod_l+0xcbc>)
    ced8:	movs	r2, #1
    ceda:	mov	r0, r7
    cedc:	bl	da64 <strncmp>
    cee0:	cmp	r0, #0
    cee2:	beq.w	cfea <_strtod_l+0xbaa>
    cee6:	mov.w	lr, #0
    ceea:	mov	r9, lr
    ceec:	mov	r6, lr
    ceee:	mov	r5, lr
    cef0:	b.w	c65e <_strtod_l+0x21e>
    cef4:	movw	r3, #19999	; 0x4e1f
    cef8:	cmp	fp, r3
    cefa:	it	ge
    cefc:	movge	fp, r3
    cefe:	b.n	c760 <_strtod_l+0x320>
    cf00:	ldrd	r2, r3, [sp, #16]
    cf04:	mov	r0, r3
    cf06:	cmp	r3, #0
    cf08:	bne.w	cb52 <_strtod_l+0x712>
    cf0c:	movs	r3, #34	; 0x22
    cf0e:	vldr	d8, [pc, #464]	; d0e0 <_strtod_l+0xca0>
    cf12:	ldr	r0, [sp, #72]	; 0x48
    cf14:	str.w	r3, [r8]
    cf18:	b.n	cc0c <_strtod_l+0x7cc>
    cf1a:	vmov.f64	d7, d9
    cf1e:	b.n	cca2 <_strtod_l+0x862>
    cf20:	ldr	r1, [pc, #476]	; (d100 <_strtod_l+0xcc0>)
    cf22:	add	r0, sp, #68	; 0x44
    cf24:	bl	eb68 <__match>
    cf28:	cmp	r0, #0
    cf2a:	beq.w	c610 <_strtod_l+0x1d0>
    cf2e:	ldr	r3, [sp, #68]	; 0x44
    cf30:	ldr	r1, [pc, #464]	; (d104 <_strtod_l+0xcc4>)
    cf32:	subs	r3, #1
    cf34:	add	r0, sp, #68	; 0x44
    cf36:	str	r3, [sp, #68]	; 0x44
    cf38:	bl	eb68 <__match>
    cf3c:	cbnz	r0, cf44 <_strtod_l+0xb04>
    cf3e:	ldr	r3, [sp, #68]	; 0x44
    cf40:	adds	r3, #1
    cf42:	str	r3, [sp, #68]	; 0x44
    cf44:	vldr	d8, [pc, #416]	; d0e8 <_strtod_l+0xca8>
    cf48:	b.n	c7ba <_strtod_l+0x37a>
    cf4a:	cmp	r2, #16
    cf4c:	itt	le
    cf4e:	addle.w	r9, r9, r9, lsl #2
    cf52:	addle.w	r9, r1, r9, lsl #1
    cf56:	mov	r5, r2
    cf58:	movs	r0, #0
    cf5a:	b.w	c5d2 <_strtod_l+0x192>
    cf5e:	ldr	r2, [sp, #72]	; 0x48
    cf60:	cbz	r2, cf72 <_strtod_l+0xb32>
    cf62:	movs	r1, #53	; 0x35
    cf64:	add	r0, sp, #80	; 0x50
    cf66:	bl	f730 <__copybits>
    cf6a:	ldr	r1, [sp, #72]	; 0x48
    cf6c:	mov	r0, r8
    cf6e:	bl	edc8 <_Bfree>
    cf72:	subs	r5, #1
    cf74:	ldr	r3, [sp, #76]	; 0x4c
    cf76:	cmp	r5, #4
    cf78:	bhi.w	d29a <_strtod_l+0xe5a>
    cf7c:	tbb	[pc, r5]
    cf80:	.word	0x1f2a2d03
    cf84:	.byte	0x03
    cf85:	.byte	0x00
    cf86:	ldr	r2, [sp, #80]	; 0x50
    cf88:	str	r2, [sp, #16]
    cf8a:	addw	r2, r3, #1075	; 0x433
    cf8e:	ldr	r3, [sp, #84]	; 0x54
    cf90:	bic.w	r3, r3, #1048576	; 0x100000
    cf94:	orr.w	r3, r3, r2, lsl #20
    cf98:	str	r3, [sp, #20]
    cf9a:	lsls	r5, r4, #23
    cf9c:	bpl.n	cfa4 <_strtod_l+0xb64>
    cf9e:	orr.w	r3, r3, #2147483648	; 0x80000000
    cfa2:	str	r3, [sp, #20]
    cfa4:	ldr	r2, [pc, #352]	; (d108 <_strtod_l+0xcc8>)
    cfa6:	ands	r2, r3
    cfa8:	vldr	d8, [sp, #16]
    cfac:	cmp	r2, #0
    cfae:	bne.w	c7ba <_strtod_l+0x37a>
    cfb2:	bl	dc2c <__errno>
    cfb6:	movs	r3, #34	; 0x22
    cfb8:	str	r3, [r0, #0]
    cfba:	b.w	c7ba <_strtod_l+0x37a>
    cfbe:	mov.w	r3, #4294967295
    cfc2:	mvn.w	r6, #2147483648	; 0x80000000
    cfc6:	strd	r3, r6, [sp, #16]
    cfca:	lsls	r3, r4, #23
    cfcc:	bpl.w	ce88 <_strtod_l+0xa48>
    cfd0:	ldr	r3, [sp, #20]
    cfd2:	b.n	cf9e <_strtod_l+0xb5e>
    cfd4:	ldr	r3, [pc, #304]	; (d108 <_strtod_l+0xcc8>)
    cfd6:	str	r3, [sp, #20]
    cfd8:	b.n	cfca <_strtod_l+0xb8a>
    cfda:	ldr	r3, [sp, #80]	; 0x50
    cfdc:	str	r3, [sp, #16]
    cfde:	ldr	r3, [sp, #84]	; 0x54
    cfe0:	str	r3, [sp, #20]
    cfe2:	b.n	cf9a <_strtod_l+0xb5a>
    cfe4:	movs	r0, #0
    cfe6:	b.w	c5ac <_strtod_l+0x16c>
    cfea:	ldr	r3, [sp, #68]	; 0x44
    cfec:	mov	r2, r3
    cfee:	adds	r3, #1
    cff0:	str	r3, [sp, #68]	; 0x44
    cff2:	ldrb	r4, [r2, #1]
    cff4:	mov	r6, r0
    cff6:	mov	r9, r0
    cff8:	b.w	c596 <_strtod_l+0x156>
    cffc:	ldr	r3, [pc, #268]	; (d10c <_strtod_l+0xccc>)
    cffe:	add.w	r3, r3, r2, lsl #3
    d002:	vldr	d8, [r3]
    d006:	vldr	d7, [sp, #16]
    d00a:	vmul.f64	d8, d8, d7
    d00e:	b.w	c7ba <_strtod_l+0x37a>
    d012:	vmov.f64	d7, #224	; 0xbf000000 -0.5
    d016:	vmov.f64	d9, #96	; 0x3f000000  0.5
    d01a:	b.n	ca40 <_strtod_l+0x600>
    d01c:	mov	lr, r5
    d01e:	str	r0, [sp, #44]	; 0x2c
    d020:	b.w	c5dc <_strtod_l+0x19c>
    d024:	ldr	r3, [pc, #228]	; (d10c <_strtod_l+0xccc>)
    d026:	rsb	r5, r5, #15
    d02a:	subs	r2, r1, r5
    d02c:	add.w	r5, r3, r5, lsl #3
    d030:	add.w	r3, r3, r2, lsl #3
    d034:	vldr	d8, [r5]
    d038:	vldr	d7, [r3]
    d03c:	vldr	d6, [sp, #16]
    d040:	vmul.f64	d8, d8, d6
    d044:	vmul.f64	d8, d8, d7
    d048:	b.w	c7ba <_strtod_l+0x37a>
    d04c:	cmp	r5, #0
    d04e:	beq.w	d17c <_strtod_l+0xd3c>
    d052:	ldrd	fp, ip, [sp, #16]
    d056:	ldr	r3, [pc, #184]	; (d110 <_strtod_l+0xcd0>)
    d058:	ubfx	r1, ip, #0, #20
    d05c:	cmp	r1, r3
    d05e:	mov	r2, ip
    d060:	beq.w	d208 <_strtod_l+0xdc8>
    d064:	ldr	r3, [sp, #56]	; 0x38
    d066:	cmp	r3, #0
    d068:	beq.w	d1b6 <_strtod_l+0xd76>
    d06c:	ldrd	r1, r2, [sp, #16]
    d070:	tst	r3, r2
    d072:	mov	r7, r2
    d074:	beq.n	d0ac <_strtod_l+0xc6c>
    d076:	vmov.f64	d0, d8
    d07a:	cmp	r5, #0
    d07c:	beq.w	d1cc <_strtod_l+0xd8c>
    d080:	bl	f4d0 <__ulp>
    d084:	ldr	r3, [sp, #32]
    d086:	cbz	r3, d0a8 <_strtod_l+0xc68>
    d088:	ubfx	r3, r7, #20, #11
    d08c:	rsb	r3, r3, #107	; 0x6b
    d090:	cmp	r3, #0
    d092:	ble.n	d0a8 <_strtod_l+0xc68>
    d094:	lsls	r3, r3, #20
    d096:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d09a:	movs	r0, #0
    d09c:	add.w	r1, r1, #3145728	; 0x300000
    d0a0:	vmov	d7, r0, r1
    d0a4:	vmul.f64	d0, d0, d7
    d0a8:	vadd.f64	d8, d8, d0
    d0ac:	ldr	r3, [sp, #32]
    d0ae:	cbz	r3, d0c8 <_strtod_l+0xc88>
    d0b0:	vldr	d7, [pc, #60]	; d0f0 <_strtod_l+0xcb0>
    d0b4:	ldr	r3, [pc, #80]	; (d108 <_strtod_l+0xcc8>)
    d0b6:	vmul.f64	d8, d8, d7
    d0ba:	vmov	r2, s17
    d0be:	ands	r3, r2
    d0c0:	cbnz	r3, d0c8 <_strtod_l+0xc88>
    d0c2:	movs	r3, #34	; 0x22
    d0c4:	str.w	r3, [r8]
    d0c8:	ldr	r0, [sp, #72]	; 0x48
    d0ca:	b.n	cc0c <_strtod_l+0x7cc>
    d0cc:	add.w	r3, r2, #55574528	; 0x3500000
    d0d0:	str	r3, [sp, #20]
    d0d2:	movs	r3, #0
    d0d4:	str	r3, [sp, #32]
    d0d6:	b.w	c83c <_strtod_l+0x3fc>
    d0da:	nop
    d0dc:	nop.w
	...
    d0ec:	.word	0x7ff00000
    d0f0:	.word	0x00000000
    d0f4:	.word	0x39500000
    d0f8:	.word	0x20007788
    d0fc:	.word	0x20000984
    d100:	.word	0x20000988
    d104:	.word	0x2000098c
    d108:	.word	0x7ff00000
    d10c:	.word	0x20000328
    d110:	.word	0x000fffff
    d114:	ldrd	r1, r2, [sp, #16]
    d118:	orrs	r5, r1
    d11a:	bne.n	d0ac <_strtod_l+0xc6c>
    d11c:	ubfx	r3, r2, #0, #20
    d120:	mov	r7, r2
    d122:	cmp	r3, #0
    d124:	bne.n	d0ac <_strtod_l+0xc6c>
    d126:	bic.w	r3, r2, #2147483648	; 0x80000000
    d12a:	lsrs	r3, r3, #20
    d12c:	lsls	r3, r3, #20
    d12e:	cmp.w	r3, #112197632	; 0x6b00000
    d132:	bls.n	d0ac <_strtod_l+0xc6c>
    d134:	ldr.w	r3, [sl, #20]
    d138:	cbnz	r3, d142 <_strtod_l+0xd02>
    d13a:	ldr.w	r3, [sl, #16]
    d13e:	cmp	r3, #1
    d140:	ble.n	d0ac <_strtod_l+0xc6c>
    d142:	mov	r1, sl
    d144:	movs	r2, #1
    d146:	mov	r0, r8
    d148:	bl	f248 <__lshift>
    d14c:	mov	r1, r4
    d14e:	mov	sl, r0
    d150:	bl	f338 <__mcmp>
    d154:	cmp	r0, #0
    d156:	ble.n	d0ac <_strtod_l+0xc6c>
    d158:	ldr	r3, [sp, #32]
    d15a:	cmp	r3, #0
    d15c:	bne.n	d25c <_strtod_l+0xe1c>
    d15e:	ldr	r3, [pc, #320]	; (d2a0 <_strtod_l+0xe60>)
    d160:	ands	r3, r7
    d162:	sub.w	r3, r3, #1048576	; 0x100000
    d166:	mvn.w	r3, r3, lsr #20
    d16a:	mvn.w	r3, r3, lsl #20
    d16e:	str	r3, [sp, #20]
    d170:	mov.w	r3, #4294967295
    d174:	str	r3, [sp, #16]
    d176:	vldr	d8, [sp, #16]
    d17a:	b.n	d0ac <_strtod_l+0xc6c>
    d17c:	ldrd	r1, r2, [sp, #16]
    d180:	ubfx	r3, r2, #0, #20
    d184:	orrs	r3, r1
    d186:	mov	r7, r2
    d188:	bne.w	d064 <_strtod_l+0xc24>
    d18c:	b.n	d158 <_strtod_l+0xd18>
    d18e:	ldr	r1, [pc, #276]	; (d2a4 <_strtod_l+0xe64>)
    d190:	add	r0, sp, #68	; 0x44
    d192:	add	r2, sp, #80	; 0x50
    d194:	bl	eba0 <__hexnan>
    d198:	cmp	r0, #5
    d19a:	bne.w	c7aa <_strtod_l+0x36a>
    d19e:	ldr	r3, [sp, #84]	; 0x54
    d1a0:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d1a4:	orr.w	r3, r3, #7340032	; 0x700000
    d1a8:	str	r3, [sp, #20]
    d1aa:	ldr	r3, [sp, #80]	; 0x50
    d1ac:	str	r3, [sp, #16]
    d1ae:	vldr	d8, [sp, #16]
    d1b2:	b.w	c7ba <_strtod_l+0x37a>
    d1b6:	ldrd	r0, r1, [sp, #16]
    d1ba:	ldr	r3, [sp, #52]	; 0x34
    d1bc:	tst	r3, r0
    d1be:	beq.w	d0ac <_strtod_l+0xc6c>
    d1c2:	mov	r7, r1
    d1c4:	b.n	d076 <_strtod_l+0xc36>
    d1c6:	ldr	r4, [pc, #224]	; (d2a8 <_strtod_l+0xe68>)
    d1c8:	movs	r1, #0
    d1ca:	b.n	ccec <_strtod_l+0x8ac>
    d1cc:	bl	f4d0 <__ulp>
    d1d0:	ldr	r3, [sp, #32]
    d1d2:	cmp	r3, #0
    d1d4:	beq.n	d282 <_strtod_l+0xe42>
    d1d6:	ubfx	r3, r7, #20, #11
    d1da:	rsb	r3, r3, #107	; 0x6b
    d1de:	cmp	r3, #0
    d1e0:	ble.n	d1f6 <_strtod_l+0xdb6>
    d1e2:	lsls	r3, r3, #20
    d1e4:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d1e8:	add.w	r1, r1, #3145728	; 0x300000
    d1ec:	mov	r0, r5
    d1ee:	vmov	d7, r0, r1
    d1f2:	vmul.f64	d0, d0, d7
    d1f6:	vsub.f64	d8, d8, d0
    d1fa:	vcmp.f64	d8, #0.0
    d1fe:	vmrs	APSR_nzcv, fpscr
    d202:	bne.w	d0b0 <_strtod_l+0xc70>
    d206:	b.n	cf0c <_strtod_l+0xacc>
    d208:	ldr	r3, [sp, #32]
    d20a:	ldr	r1, [sp, #16]
    d20c:	cbz	r3, d256 <_strtod_l+0xe16>
    d20e:	ldr	r3, [pc, #144]	; (d2a0 <_strtod_l+0xe60>)
    d210:	ands	r3, r2
    d212:	cmp.w	r3, #111149056	; 0x6a00000
    d216:	bhi.n	d256 <_strtod_l+0xe16>
    d218:	lsrs	r3, r3, #20
    d21a:	rsb	r3, r3, #107	; 0x6b
    d21e:	mov.w	r0, #4294967295
    d222:	lsl.w	r3, r0, r3
    d226:	cmp	r1, r3
    d228:	bne.w	d064 <_strtod_l+0xc24>
    d22c:	ldr	r3, [pc, #124]	; (d2ac <_strtod_l+0xe6c>)
    d22e:	cmp	r2, r3
    d230:	beq.n	d294 <_strtod_l+0xe54>
    d232:	ldr	r3, [pc, #108]	; (d2a0 <_strtod_l+0xe60>)
    d234:	ands	r3, r2
    d236:	add.w	r3, r3, #1048576	; 0x100000
    d23a:	str	r3, [sp, #20]
    d23c:	movs	r3, #0
    d23e:	str	r3, [sp, #16]
    d240:	vldr	d8, [sp, #16]
    d244:	b.n	d0ac <_strtod_l+0xc6c>
    d246:	mov.w	r2, #4294967295
    d24a:	lsl.w	r3, r2, r3
    d24e:	ldr	r2, [sp, #16]
    d250:	ands	r2, r3
    d252:	str	r2, [sp, #16]
    d254:	b.n	cdf8 <_strtod_l+0x9b8>
    d256:	mov.w	r3, #4294967295
    d25a:	b.n	d226 <_strtod_l+0xde6>
    d25c:	ldr	r3, [pc, #64]	; (d2a0 <_strtod_l+0xe60>)
    d25e:	ands	r3, r7
    d260:	cmp.w	r3, #112197632	; 0x6b00000
    d264:	bgt.w	d162 <_strtod_l+0xd22>
    d268:	cmp.w	r3, #57671680	; 0x3700000
    d26c:	bgt.w	d0b0 <_strtod_l+0xc70>
    d270:	b.n	cf0c <_strtod_l+0xacc>
    d272:	rsb	r2, r2, #75	; 0x4b
    d276:	mov.w	r3, #4294967295
    d27a:	lsls	r3, r2
    d27c:	ands	r3, r1
    d27e:	str	r3, [sp, #20]
    d280:	b.n	cdf8 <_strtod_l+0x9b8>
    d282:	vsub.f64	d8, d8, d0
    d286:	vcmp.f64	d8, #0.0
    d28a:	vmrs	APSR_nzcv, fpscr
    d28e:	bne.w	d0c8 <_strtod_l+0xc88>
    d292:	b.n	cf0c <_strtod_l+0xacc>
    d294:	adds	r1, #1
    d296:	bne.n	d232 <_strtod_l+0xdf2>
    d298:	b.n	caae <_strtod_l+0x66e>
    d29a:	movs	r3, #0
    d29c:	b.n	cf9a <_strtod_l+0xb5a>
    d29e:	nop
    d2a0:	.word	0x7ff00000
    d2a4:	.word	0x2000779c
    d2a8:	.word	0x20000300
    d2ac:	.word	0x7fefffff

0000d2b0 <_strtod_r>:
    d2b0:	ldr	r3, [pc, #4]	; (d2b8 <_strtod_r+0x8>)
    d2b2:	b.w	c440 <_strtod_l>
    d2b6:	nop
    d2b8:	.word	0x20008964

0000d2bc <_strtol_l.constprop.0>:
    d2bc:	cmp	r3, #1
    d2be:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2c2:	beq.n	d346 <_strtol_l.constprop.0+0x8a>
    d2c4:	cmp	r3, #36	; 0x24
    d2c6:	mov	r8, r3
    d2c8:	bhi.n	d346 <_strtol_l.constprop.0+0x8a>
    d2ca:	ldr	r5, [pc, #304]	; (d3fc <_strtol_l.constprop.0+0x140>)
    d2cc:	mov	lr, r1
    d2ce:	mov	r6, lr
    d2d0:	ldrb.w	fp, [lr], #1
    d2d4:	ldrb.w	r4, [r5, fp]
    d2d8:	ands.w	r4, r4, #8
    d2dc:	bne.n	d2ce <_strtol_l.constprop.0+0x12>
    d2de:	cmp.w	fp, #45	; 0x2d
    d2e2:	beq.n	d3ca <_strtol_l.constprop.0+0x10e>
    d2e4:	cmp.w	fp, #43	; 0x2b
    d2e8:	it	eq
    d2ea:	ldrbeq.w	fp, [lr]
    d2ee:	mvn.w	r9, #2147483648	; 0x80000000
    d2f2:	it	eq
    d2f4:	addeq.w	lr, r6, #2
    d2f8:	cmp	r3, #0
    d2fa:	beq.n	d382 <_strtol_l.constprop.0+0xc6>
    d2fc:	cmp	r3, #16
    d2fe:	beq.n	d3b0 <_strtol_l.constprop.0+0xf4>
    d300:	udiv	r7, r9, r8
    d304:	movs	r5, #0
    d306:	mov	r6, r5
    d308:	mls	sl, r8, r7, r9
    d30c:	b.n	d31a <_strtol_l.constprop.0+0x5e>
    d30e:	beq.n	d378 <_strtol_l.constprop.0+0xbc>
    d310:	mla	r6, r8, r6, ip
    d314:	movs	r5, #1
    d316:	ldrb.w	fp, [lr], #1
    d31a:	sub.w	ip, fp, #48	; 0x30
    d31e:	cmp.w	ip, #9
    d322:	bls.n	d332 <_strtol_l.constprop.0+0x76>
    d324:	sub.w	ip, fp, #65	; 0x41
    d328:	cmp.w	ip, #25
    d32c:	bhi.n	d354 <_strtol_l.constprop.0+0x98>
    d32e:	sub.w	ip, fp, #55	; 0x37
    d332:	cmp	r3, ip
    d334:	ble.n	d366 <_strtol_l.constprop.0+0xaa>
    d336:	cmp.w	r5, #4294967295
    d33a:	beq.n	d316 <_strtol_l.constprop.0+0x5a>
    d33c:	cmp	r7, r6
    d33e:	bcs.n	d30e <_strtol_l.constprop.0+0x52>
    d340:	mov.w	r5, #4294967295
    d344:	b.n	d316 <_strtol_l.constprop.0+0x5a>
    d346:	bl	dc2c <__errno>
    d34a:	movs	r3, #22
    d34c:	str	r3, [r0, #0]
    d34e:	movs	r0, #0
    d350:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d354:	sub.w	ip, fp, #97	; 0x61
    d358:	cmp.w	ip, #25
    d35c:	bhi.n	d366 <_strtol_l.constprop.0+0xaa>
    d35e:	sub.w	ip, fp, #87	; 0x57
    d362:	cmp	r3, ip
    d364:	bgt.n	d336 <_strtol_l.constprop.0+0x7a>
    d366:	adds	r3, r5, #1
    d368:	beq.n	d3ba <_strtol_l.constprop.0+0xfe>
    d36a:	cbnz	r4, d390 <_strtol_l.constprop.0+0xd4>
    d36c:	cbz	r2, d372 <_strtol_l.constprop.0+0xb6>
    d36e:	cbnz	r5, d3da <_strtol_l.constprop.0+0x11e>
    d370:	str	r1, [r2, #0]
    d372:	mov	r0, r6
    d374:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d378:	cmp	sl, ip
    d37a:	bge.n	d310 <_strtol_l.constprop.0+0x54>
    d37c:	mov.w	r5, #4294967295
    d380:	b.n	d316 <_strtol_l.constprop.0+0x5a>
    d382:	cmp.w	fp, #48	; 0x30
    d386:	beq.n	d394 <_strtol_l.constprop.0+0xd8>
    d388:	mov.w	r8, #10
    d38c:	mov	r3, r8
    d38e:	b.n	d300 <_strtol_l.constprop.0+0x44>
    d390:	negs	r6, r6
    d392:	b.n	d36c <_strtol_l.constprop.0+0xb0>
    d394:	ldrb.w	r3, [lr]
    d398:	and.w	r3, r3, #223	; 0xdf
    d39c:	cmp	r3, #88	; 0x58
    d39e:	bne.n	d3e4 <_strtol_l.constprop.0+0x128>
    d3a0:	mov.w	r8, #16
    d3a4:	ldrb.w	fp, [lr, #1]
    d3a8:	mov	r3, r8
    d3aa:	add.w	lr, lr, #2
    d3ae:	b.n	d300 <_strtol_l.constprop.0+0x44>
    d3b0:	cmp.w	fp, #48	; 0x30
    d3b4:	beq.n	d3ec <_strtol_l.constprop.0+0x130>
    d3b6:	mov	r8, r3
    d3b8:	b.n	d300 <_strtol_l.constprop.0+0x44>
    d3ba:	movs	r3, #34	; 0x22
    d3bc:	str	r3, [r0, #0]
    d3be:	cbz	r2, d3de <_strtol_l.constprop.0+0x122>
    d3c0:	add.w	r1, lr, #4294967295
    d3c4:	mov	r6, r9
    d3c6:	str	r1, [r2, #0]
    d3c8:	b.n	d372 <_strtol_l.constprop.0+0xb6>
    d3ca:	ldrb.w	fp, [lr]
    d3ce:	mov.w	r9, #2147483648	; 0x80000000
    d3d2:	add.w	lr, r6, #2
    d3d6:	movs	r4, #1
    d3d8:	b.n	d2f8 <_strtol_l.constprop.0+0x3c>
    d3da:	mov	r9, r6
    d3dc:	b.n	d3c0 <_strtol_l.constprop.0+0x104>
    d3de:	mov	r6, r9
    d3e0:	mov	r0, r6
    d3e2:	b.n	d374 <_strtol_l.constprop.0+0xb8>
    d3e4:	mov.w	r8, #8
    d3e8:	mov	r3, r8
    d3ea:	b.n	d300 <_strtol_l.constprop.0+0x44>
    d3ec:	ldrb.w	r5, [lr]
    d3f0:	and.w	r5, r5, #223	; 0xdf
    d3f4:	cmp	r5, #88	; 0x58
    d3f6:	beq.n	d3a0 <_strtol_l.constprop.0+0xe4>
    d3f8:	mov	r8, r3
    d3fa:	b.n	d300 <_strtol_l.constprop.0+0x44>
    d3fc:	.word	0x20000801

0000d400 <_strtol_r>:
    d400:	b.w	d2bc <_strtol_l.constprop.0>

0000d404 <__cxa_atexit>:
    d404:	mov	r3, r2
    d406:	mov	r2, r1
    d408:	mov	r1, r0
    d40a:	movs	r0, #2
    d40c:	b.w	e1fc <__register_exitproc>

0000d410 <fcvtf>:
    d410:	vcvt.f64.f32	d0, s0
    d414:	movs	r3, #0
    d416:	b.w	f80c <fcvtbuf>
    d41a:	nop

0000d41c <stdio_exit_handler>:
    d41c:	ldr	r2, [pc, #8]	; (d428 <stdio_exit_handler+0xc>)
    d41e:	ldr	r1, [pc, #12]	; (d42c <stdio_exit_handler+0x10>)
    d420:	ldr	r0, [pc, #12]	; (d430 <stdio_exit_handler+0x14>)
    d422:	b.w	d59c <_fwalk_sglue>
    d426:	nop
    d428:	.word	0x20008ee0
    d42c:	.word	0x00012c45
    d430:	.word	0x20008818

0000d434 <cleanup_stdio>:
    d434:	ldr	r3, [pc, #48]	; (d468 <cleanup_stdio+0x34>)
    d436:	ldr	r1, [r0, #4]
    d438:	cmp	r1, r3
    d43a:	push	{r4, lr}
    d43c:	mov	r4, r0
    d43e:	beq.n	d444 <cleanup_stdio+0x10>
    d440:	bl	12c44 <_fclose_r>
    d444:	ldr	r1, [r4, #8]
    d446:	ldr	r3, [pc, #36]	; (d46c <cleanup_stdio+0x38>)
    d448:	cmp	r1, r3
    d44a:	beq.n	d452 <cleanup_stdio+0x1e>
    d44c:	mov	r0, r4
    d44e:	bl	12c44 <_fclose_r>
    d452:	ldr	r1, [r4, #12]
    d454:	ldr	r3, [pc, #24]	; (d470 <cleanup_stdio+0x3c>)
    d456:	cmp	r1, r3
    d458:	beq.n	d464 <cleanup_stdio+0x30>
    d45a:	mov	r0, r4
    d45c:	ldmia.w	sp!, {r4, lr}
    d460:	b.w	12c44 <_fclose_r>
    d464:	pop	{r4, pc}
    d466:	nop
    d468:	.word	0x20027028
    d46c:	.word	0x20027090
    d470:	.word	0x200270f8

0000d474 <global_stdio_init.part.0>:
    d474:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d478:	ldr	r4, [pc, #168]	; (d524 <global_stdio_init.part.0+0xb0>)
    d47a:	ldr	r3, [pc, #172]	; (d528 <global_stdio_init.part.0+0xb4>)
    d47c:	ldr	r0, [pc, #172]	; (d52c <global_stdio_init.part.0+0xb8>)
    d47e:	ldr.w	r9, [pc, #192]	; d540 <global_stdio_init.part.0+0xcc>
    d482:	ldr.w	r8, [pc, #192]	; d544 <global_stdio_init.part.0+0xd0>
    d486:	ldr	r7, [pc, #168]	; (d530 <global_stdio_init.part.0+0xbc>)
    d488:	str	r0, [r3, #0]
    d48a:	movs	r5, #0
    d48c:	movs	r3, #4
    d48e:	movs	r2, #8
    d490:	mov	r1, r5
    d492:	add.w	r0, r4, #92	; 0x5c
    d496:	ldr	r6, [pc, #156]	; (d534 <global_stdio_init.part.0+0xc0>)
    d498:	str	r5, [r4, #100]	; 0x64
    d49a:	strd	r5, r3, [r4, #8]
    d49e:	strd	r5, r5, [r4]
    d4a2:	strd	r5, r5, [r4, #16]
    d4a6:	str	r5, [r4, #24]
    d4a8:	bl	9444 <memset>
    d4ac:	ldr	r3, [pc, #136]	; (d538 <global_stdio_init.part.0+0xc4>)
    d4ae:	str	r3, [r4, #116]	; 0x74
    d4b0:	movs	r2, #8
    d4b2:	mov	r1, r5
    d4b4:	add.w	r0, r4, #196	; 0xc4
    d4b8:	strd	r4, r9, [r4, #28]
    d4bc:	strd	r8, r7, [r4, #36]	; 0x24
    d4c0:	strd	r5, r5, [r4, #104]	; 0x68
    d4c4:	strd	r5, r5, [r4, #120]	; 0x78
    d4c8:	str.w	r5, [r4, #204]	; 0xcc
    d4cc:	str	r5, [r4, #112]	; 0x70
    d4ce:	str.w	r5, [r4, #128]	; 0x80
    d4d2:	str	r6, [r4, #44]	; 0x2c
    d4d4:	bl	9444 <memset>
    d4d8:	ldr	r3, [pc, #96]	; (d53c <global_stdio_init.part.0+0xc8>)
    d4da:	str.w	r3, [r4, #220]	; 0xdc
    d4de:	mov	r1, r5
    d4e0:	add.w	r3, r4, #104	; 0x68
    d4e4:	movs	r2, #8
    d4e6:	add.w	r0, r4, #300	; 0x12c
    d4ea:	str.w	r3, [r4, #132]	; 0x84
    d4ee:	strd	r9, r8, [r4, #136]	; 0x88
    d4f2:	strd	r7, r6, [r4, #144]	; 0x90
    d4f6:	strd	r5, r5, [r4, #208]	; 0xd0
    d4fa:	strd	r5, r5, [r4, #224]	; 0xe0
    d4fe:	str.w	r5, [r4, #308]	; 0x134
    d502:	str.w	r5, [r4, #216]	; 0xd8
    d506:	str.w	r5, [r4, #232]	; 0xe8
    d50a:	bl	9444 <memset>
    d50e:	add.w	r3, r4, #208	; 0xd0
    d512:	strd	r9, r8, [r4, #240]	; 0xf0
    d516:	strd	r7, r6, [r4, #248]	; 0xf8
    d51a:	str.w	r3, [r4, #236]	; 0xec
    d51e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d522:	nop
    d524:	.word	0x20027028
    d528:	.word	0x20027160
    d52c:	.word	0x0000d41d
    d530:	.word	0x0000d76d
    d534:	.word	0x0000d78d
    d538:	.word	0x00010009
    d53c:	.word	0x00020012
    d540:	.word	0x0000d705
    d544:	.word	0x0000d72d

0000d548 <__sinit>:
    d548:	push	{r4, lr}
    d54a:	mov	r4, r0
    d54c:	ldr	r0, [pc, #40]	; (d578 <__sinit+0x30>)
    d54e:	bl	dc88 <__retarget_lock_acquire_recursive>
    d552:	ldr	r3, [r4, #52]	; 0x34
    d554:	cbnz	r3, d560 <__sinit+0x18>
    d556:	ldr	r3, [pc, #36]	; (d57c <__sinit+0x34>)
    d558:	ldr	r2, [pc, #36]	; (d580 <__sinit+0x38>)
    d55a:	ldr	r3, [r3, #0]
    d55c:	str	r2, [r4, #52]	; 0x34
    d55e:	cbz	r3, d56a <__sinit+0x22>
    d560:	ldmia.w	sp!, {r4, lr}
    d564:	ldr	r0, [pc, #16]	; (d578 <__sinit+0x30>)
    d566:	b.w	dc8c <__retarget_lock_release_recursive>
    d56a:	bl	d474 <global_stdio_init.part.0>
    d56e:	ldmia.w	sp!, {r4, lr}
    d572:	ldr	r0, [pc, #4]	; (d578 <__sinit+0x30>)
    d574:	b.w	dc8c <__retarget_lock_release_recursive>
    d578:	.word	0x20026ff0
    d57c:	.word	0x20027160
    d580:	.word	0x0000d435

0000d584 <__sfp_lock_acquire>:
    d584:	ldr	r0, [pc, #4]	; (d58c <__sfp_lock_acquire+0x8>)
    d586:	b.w	dc88 <__retarget_lock_acquire_recursive>
    d58a:	nop
    d58c:	.word	0x20026ff0

0000d590 <__sfp_lock_release>:
    d590:	ldr	r0, [pc, #4]	; (d598 <__sfp_lock_release+0x8>)
    d592:	b.w	dc8c <__retarget_lock_release_recursive>
    d596:	nop
    d598:	.word	0x20026ff0

0000d59c <_fwalk_sglue>:
    d59c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5a0:	mov	r8, r0
    d5a2:	mov	r7, r1
    d5a4:	mov	r6, r2
    d5a6:	mov.w	r9, #0
    d5aa:	ldrd	r5, r4, [r6, #4]
    d5ae:	subs	r5, #1
    d5b0:	bmi.n	d5d6 <_fwalk_sglue+0x3a>
    d5b2:	ldrh	r3, [r4, #12]
    d5b4:	cmp	r3, #1
    d5b6:	add.w	r5, r5, #4294967295
    d5ba:	bls.n	d5ce <_fwalk_sglue+0x32>
    d5bc:	ldrsh.w	r3, [r4, #14]
    d5c0:	adds	r3, #1
    d5c2:	mov	r1, r4
    d5c4:	beq.n	d5ce <_fwalk_sglue+0x32>
    d5c6:	mov	r0, r8
    d5c8:	blx	r7
    d5ca:	orr.w	r9, r9, r0
    d5ce:	adds	r3, r5, #1
    d5d0:	add.w	r4, r4, #104	; 0x68
    d5d4:	bne.n	d5b2 <_fwalk_sglue+0x16>
    d5d6:	ldr	r6, [r6, #0]
    d5d8:	cmp	r6, #0
    d5da:	bne.n	d5aa <_fwalk_sglue+0xe>
    d5dc:	mov	r0, r9
    d5de:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d5e2:	nop

0000d5e4 <snprintf>:
    d5e4:	push	{r2, r3}
    d5e6:	push	{r4, lr}
    d5e8:	ldr	r3, [pc, #124]	; (d668 <snprintf+0x84>)
    d5ea:	cmp	r1, #0
    d5ec:	ldr	r4, [r3, #0]
    d5ee:	sub	sp, #112	; 0x70
    d5f0:	blt.n	d65e <snprintf+0x7a>
    d5f2:	mov.w	r3, #520	; 0x208
    d5f6:	strh.w	r3, [sp, #20]
    d5fa:	str	r0, [sp, #8]
    d5fc:	str	r0, [sp, #24]
    d5fe:	add	r3, sp, #124	; 0x7c
    d600:	beq.n	d634 <snprintf+0x50>
    d602:	subs	r1, #1
    d604:	movw	r2, #65535	; 0xffff
    d608:	str	r1, [sp, #16]
    d60a:	str	r1, [sp, #28]
    d60c:	strh.w	r2, [sp, #22]
    d610:	add	r1, sp, #8
    d612:	ldr	r2, [sp, #120]	; 0x78
    d614:	str	r3, [sp, #4]
    d616:	mov	r0, r4
    d618:	bl	f8b0 <_svfprintf_r>
    d61c:	adds	r2, r0, #1
    d61e:	bge.n	d624 <snprintf+0x40>
    d620:	movs	r3, #139	; 0x8b
    d622:	str	r3, [r4, #0]
    d624:	ldr	r3, [sp, #8]
    d626:	movs	r2, #0
    d628:	strb	r2, [r3, #0]
    d62a:	add	sp, #112	; 0x70
    d62c:	ldmia.w	sp!, {r4, lr}
    d630:	add	sp, #8
    d632:	bx	lr
    d634:	movw	r2, #65535	; 0xffff
    d638:	str	r1, [sp, #16]
    d63a:	str	r1, [sp, #28]
    d63c:	strh.w	r2, [sp, #22]
    d640:	add	r1, sp, #8
    d642:	ldr	r2, [sp, #120]	; 0x78
    d644:	str	r3, [sp, #4]
    d646:	mov	r0, r4
    d648:	bl	f8b0 <_svfprintf_r>
    d64c:	adds	r3, r0, #1
    d64e:	bge.n	d654 <snprintf+0x70>
    d650:	movs	r3, #139	; 0x8b
    d652:	str	r3, [r4, #0]
    d654:	add	sp, #112	; 0x70
    d656:	ldmia.w	sp!, {r4, lr}
    d65a:	add	sp, #8
    d65c:	bx	lr
    d65e:	movs	r3, #139	; 0x8b
    d660:	str	r3, [r4, #0]
    d662:	mov.w	r0, #4294967295
    d666:	b.n	d654 <snprintf+0x70>
    d668:	.word	0x20008eec

0000d66c <sprintf>:
    d66c:	push	{r1, r2, r3}
    d66e:	push	{r4, lr}
    d670:	sub	sp, #116	; 0x74
    d672:	mvn.w	r1, #2147483648	; 0x80000000
    d676:	add	r3, sp, #124	; 0x7c
    d678:	strd	r0, r1, [sp, #24]
    d67c:	str	r1, [sp, #16]
    d67e:	ldr	r1, [pc, #36]	; (d6a4 <sprintf+0x38>)
    d680:	ldr.w	r2, [r3], #4
    d684:	str	r0, [sp, #8]
    d686:	ldr	r4, [pc, #32]	; (d6a8 <sprintf+0x3c>)
    d688:	ldr	r0, [r1, #0]
    d68a:	str	r3, [sp, #4]
    d68c:	add	r1, sp, #8
    d68e:	str	r4, [sp, #20]
    d690:	bl	f8b0 <_svfprintf_r>
    d694:	ldr	r3, [sp, #8]
    d696:	movs	r2, #0
    d698:	strb	r2, [r3, #0]
    d69a:	add	sp, #116	; 0x74
    d69c:	ldmia.w	sp!, {r4, lr}
    d6a0:	add	sp, #12
    d6a2:	bx	lr
    d6a4:	.word	0x20008eec
    d6a8:	.word	0xffff0208

0000d6ac <sscanf>:
    d6ac:	push	{r1, r2, r3}
    d6ae:	push	{r4, lr}
    d6b0:	sub	sp, #124	; 0x7c
    d6b2:	add	r4, sp, #132	; 0x84
    d6b4:	mov.w	r1, #516	; 0x204
    d6b8:	ldr.w	r2, [r4], #4
    d6bc:	str	r2, [sp, #4]
    d6be:	strh.w	r1, [sp, #28]
    d6c2:	str	r0, [sp, #16]
    d6c4:	str	r0, [sp, #32]
    d6c6:	bl	e100 <strlen>
    d6ca:	str	r0, [sp, #20]
    d6cc:	str	r0, [sp, #36]	; 0x24
    d6ce:	ldr	r0, [pc, #44]	; (d6fc <sscanf+0x50>)
    d6d0:	ldr	r1, [pc, #44]	; (d700 <sscanf+0x54>)
    d6d2:	str	r1, [sp, #48]	; 0x30
    d6d4:	movs	r3, #0
    d6d6:	movw	ip, #65535	; 0xffff
    d6da:	str	r3, [sp, #64]	; 0x40
    d6dc:	str	r3, [sp, #84]	; 0x54
    d6de:	ldr	r2, [sp, #4]
    d6e0:	ldr	r0, [r0, #0]
    d6e2:	strh.w	ip, [sp, #30]
    d6e6:	mov	r3, r4
    d6e8:	add	r1, sp, #16
    d6ea:	str	r4, [sp, #12]
    d6ec:	bl	113f4 <__ssvfscanf_r>
    d6f0:	add	sp, #124	; 0x7c
    d6f2:	ldmia.w	sp!, {r4, lr}
    d6f6:	add	sp, #12
    d6f8:	bx	lr
    d6fa:	nop
    d6fc:	.word	0x20008eec
    d700:	.word	0x0000d729

0000d704 <__sread>:
    d704:	push	{r4, lr}
    d706:	mov	r4, r1
    d708:	ldrsh.w	r1, [r1, #14]
    d70c:	bl	dbb0 <_read_r>
    d710:	cmp	r0, #0
    d712:	blt.n	d71c <__sread+0x18>
    d714:	ldr	r3, [r4, #80]	; 0x50
    d716:	add	r3, r0
    d718:	str	r3, [r4, #80]	; 0x50
    d71a:	pop	{r4, pc}
    d71c:	ldrh	r3, [r4, #12]
    d71e:	bic.w	r3, r3, #4096	; 0x1000
    d722:	strh	r3, [r4, #12]
    d724:	pop	{r4, pc}
    d726:	nop

0000d728 <__seofread>:
    d728:	movs	r0, #0
    d72a:	bx	lr

0000d72c <__swrite>:
    d72c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d730:	mov	r4, r1
    d732:	ldrsh.w	r1, [r1, #12]
    d736:	mov	r7, r3
    d738:	lsls	r3, r1, #23
    d73a:	mov	r5, r0
    d73c:	mov	r6, r2
    d73e:	bmi.n	d758 <__swrite+0x2c>
    d740:	bic.w	r1, r1, #4096	; 0x1000
    d744:	strh	r1, [r4, #12]
    d746:	mov	r3, r7
    d748:	ldrsh.w	r1, [r4, #14]
    d74c:	mov	r2, r6
    d74e:	mov	r0, r5
    d750:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d754:	b.w	dc00 <_write_r>
    d758:	ldrsh.w	r1, [r4, #14]
    d75c:	movs	r3, #2
    d75e:	movs	r2, #0
    d760:	bl	db84 <_lseek_r>
    d764:	ldrsh.w	r1, [r4, #12]
    d768:	b.n	d740 <__swrite+0x14>
    d76a:	nop

0000d76c <__sseek>:
    d76c:	push	{r4, lr}
    d76e:	mov	r4, r1
    d770:	ldrsh.w	r1, [r1, #14]
    d774:	bl	db84 <_lseek_r>
    d778:	ldrh	r3, [r4, #12]
    d77a:	adds	r2, r0, #1
    d77c:	itee	eq
    d77e:	biceq.w	r3, r3, #4096	; 0x1000
    d782:	orrne.w	r3, r3, #4096	; 0x1000
    d786:	strne	r0, [r4, #80]	; 0x50
    d788:	strh	r3, [r4, #12]
    d78a:	pop	{r4, pc}

0000d78c <__sclose>:
    d78c:	ldrsh.w	r1, [r1, #14]
    d790:	b.w	db60 <_close_r>

0000d794 <_vdprintf_r>:
    d794:	push	{r4, r5, r6, r7, lr}
    d796:	sub.w	sp, sp, #532	; 0x214
    d79a:	add	r7, sp, #16
    d79c:	str	r3, [sp, #0]
    d79e:	mov	r3, r2
    d7a0:	mov.w	r2, #512	; 0x200
    d7a4:	mov	r6, r1
    d7a6:	str	r2, [sp, #12]
    d7a8:	mov	r1, r7
    d7aa:	add	r2, sp, #12
    d7ac:	mov	r5, r0
    d7ae:	bl	d7fc <_vasnprintf_r>
    d7b2:	cbz	r0, d7d8 <_vdprintf_r+0x44>
    d7b4:	mov	r4, r0
    d7b6:	mov	r2, r0
    d7b8:	ldr	r3, [sp, #12]
    d7ba:	mov	r1, r6
    d7bc:	mov	r0, r5
    d7be:	bl	dc00 <_write_r>
    d7c2:	cmp	r4, r7
    d7c4:	str	r0, [sp, #12]
    d7c6:	beq.n	d7d2 <_vdprintf_r+0x3e>
    d7c8:	mov	r0, r5
    d7ca:	mov	r1, r4
    d7cc:	bl	e324 <_free_r>
    d7d0:	ldr	r0, [sp, #12]
    d7d2:	add.w	sp, sp, #532	; 0x214
    d7d6:	pop	{r4, r5, r6, r7, pc}
    d7d8:	mov.w	r0, #4294967295
    d7dc:	b.n	d7d2 <_vdprintf_r+0x3e>
    d7de:	nop

0000d7e0 <vdprintf>:
    d7e0:	push	{r4}
    d7e2:	ldr	r4, [pc, #20]	; (d7f8 <vdprintf+0x18>)
    d7e4:	mov	ip, r0
    d7e6:	mov	r3, r2
    d7e8:	ldr	r0, [r4, #0]
    d7ea:	ldr.w	r4, [sp], #4
    d7ee:	mov	r2, r1
    d7f0:	mov	r1, ip
    d7f2:	b.w	d794 <_vdprintf_r>
    d7f6:	nop
    d7f8:	.word	0x20008eec

0000d7fc <_vasnprintf_r>:
    d7fc:	push	{r4, r5, lr}
    d7fe:	ldr	r4, [r2, #0]
    d800:	mov	r5, r2
    d802:	sub	sp, #108	; 0x6c
    d804:	mov	r2, r3
    d806:	cbz	r1, d80c <_vasnprintf_r+0x10>
    d808:	cmp	r4, #0
    d80a:	bne.n	d840 <_vasnprintf_r+0x44>
    d80c:	movs	r1, #0
    d80e:	mov.w	r3, #648	; 0x288
    d812:	strh.w	r3, [sp, #12]
    d816:	str	r1, [sp, #0]
    d818:	str	r1, [sp, #16]
    d81a:	movw	r3, #65535	; 0xffff
    d81e:	str	r1, [sp, #8]
    d820:	str	r1, [sp, #20]
    d822:	strh.w	r3, [sp, #14]
    d826:	mov	r1, sp
    d828:	ldr	r3, [sp, #120]	; 0x78
    d82a:	bl	f8b0 <_svfprintf_r>
    d82e:	cmp	r0, #0
    d830:	blt.n	d85a <_vasnprintf_r+0x5e>
    d832:	ldr	r3, [sp, #0]
    d834:	str	r0, [r5, #0]
    d836:	movs	r2, #0
    d838:	strb	r2, [r3, #0]
    d83a:	ldr	r0, [sp, #16]
    d83c:	add	sp, #108	; 0x6c
    d83e:	pop	{r4, r5, pc}
    d840:	mov.w	r3, #1544	; 0x608
    d844:	str	r1, [sp, #0]
    d846:	str	r1, [sp, #16]
    d848:	strh.w	r3, [sp, #12]
    d84c:	mov	r1, r4
    d84e:	bge.n	d81a <_vasnprintf_r+0x1e>
    d850:	movs	r3, #139	; 0x8b
    d852:	str	r3, [r0, #0]
    d854:	movs	r0, #0
    d856:	add	sp, #108	; 0x6c
    d858:	pop	{r4, r5, pc}
    d85a:	movs	r0, #0
    d85c:	b.n	d83c <_vasnprintf_r+0x40>
    d85e:	nop

0000d860 <memcmp>:
    d860:	cmp	r2, #3
    d862:	push	{r4, r5, r6, lr}
    d864:	bls.n	d890 <memcmp+0x30>
    d866:	orr.w	r3, r0, r1
    d86a:	lsls	r3, r3, #30
    d86c:	bne.n	d8b4 <memcmp+0x54>
    d86e:	mov	r4, r0
    d870:	mov	r3, r1
    d872:	mov	r1, r3
    d874:	mov	r0, r4
    d876:	ldr	r6, [r1, #0]
    d878:	ldr	r5, [r0, #0]
    d87a:	cmp	r5, r6
    d87c:	add.w	r4, r4, #4
    d880:	add.w	r3, r3, #4
    d884:	bne.n	d8b4 <memcmp+0x54>
    d886:	subs	r2, #4
    d888:	cmp	r2, #3
    d88a:	mov	r0, r4
    d88c:	mov	r1, r3
    d88e:	bhi.n	d872 <memcmp+0x12>
    d890:	subs	r4, r2, #1
    d892:	cbz	r2, d8bc <memcmp+0x5c>
    d894:	subs	r2, r0, #1
    d896:	subs	r1, #1
    d898:	b.n	d89e <memcmp+0x3e>
    d89a:	adds	r3, r0, r3
    d89c:	beq.n	d8b8 <memcmp+0x58>
    d89e:	ldrb.w	lr, [r2, #1]!
    d8a2:	ldrb.w	ip, [r1, #1]!
    d8a6:	cmp	lr, ip
    d8a8:	sub.w	r3, r4, r2
    d8ac:	beq.n	d89a <memcmp+0x3a>
    d8ae:	sub.w	r0, lr, ip
    d8b2:	pop	{r4, r5, r6, pc}
    d8b4:	subs	r4, r2, #1
    d8b6:	b.n	d894 <memcmp+0x34>
    d8b8:	mov	r0, r3
    d8ba:	pop	{r4, r5, r6, pc}
    d8bc:	mov	r0, r2
    d8be:	pop	{r4, r5, r6, pc}

0000d8c0 <memmove>:
    d8c0:	cmp	r0, r1
    d8c2:	bls.n	d8e0 <memmove+0x20>
    d8c4:	adds	r3, r1, r2
    d8c6:	cmp	r3, r0
    d8c8:	bls.n	d8e0 <memmove+0x20>
    d8ca:	add.w	ip, r0, r2
    d8ce:	cbz	r2, d900 <memmove+0x40>
    d8d0:	mov	r2, ip
    d8d2:	ldrb.w	ip, [r3, #-1]!
    d8d6:	strb.w	ip, [r2, #-1]!
    d8da:	cmp	r1, r3
    d8dc:	bne.n	d8d2 <memmove+0x12>
    d8de:	bx	lr
    d8e0:	cmp	r2, #15
    d8e2:	bhi.n	d902 <memmove+0x42>
    d8e4:	mov	r3, r0
    d8e6:	add.w	ip, r2, #4294967295
    d8ea:	cbz	r2, d900 <memmove+0x40>
    d8ec:	add.w	ip, ip, #1
    d8f0:	subs	r3, #1
    d8f2:	add	ip, r1
    d8f4:	ldrb.w	r2, [r1], #1
    d8f8:	strb.w	r2, [r3, #1]!
    d8fc:	cmp	r1, ip
    d8fe:	bne.n	d8f4 <memmove+0x34>
    d900:	bx	lr
    d902:	orr.w	r3, r0, r1
    d906:	lsls	r3, r3, #30
    d908:	bne.n	d9ac <memmove+0xec>
    d90a:	sub.w	r3, r2, #16
    d90e:	push	{r4, r5, r6, lr}
    d910:	add.w	ip, r1, #32
    d914:	bic.w	r5, r3, #15
    d918:	add.w	lr, r1, #16
    d91c:	add.w	r4, r0, #16
    d920:	add	ip, r5
    d922:	lsrs	r3, r3, #4
    d924:	ldr.w	r5, [lr, #-16]
    d928:	str.w	r5, [r4, #-16]
    d92c:	ldr.w	r5, [lr, #-12]
    d930:	str.w	r5, [r4, #-12]
    d934:	ldr.w	r5, [lr, #-8]
    d938:	str.w	r5, [r4, #-8]
    d93c:	ldr.w	r5, [lr, #-4]
    d940:	str.w	r5, [r4, #-4]
    d944:	add.w	lr, lr, #16
    d948:	cmp	lr, ip
    d94a:	add.w	r4, r4, #16
    d94e:	bne.n	d924 <memmove+0x64>
    d950:	adds	r3, #1
    d952:	tst.w	r2, #12
    d956:	add.w	r1, r1, r3, lsl #4
    d95a:	and.w	r4, r2, #15
    d95e:	add.w	r3, r0, r3, lsl #4
    d962:	beq.n	d9b4 <memmove+0xf4>
    d964:	subs	r4, #4
    d966:	bic.w	r6, r4, #3
    d96a:	mov.w	ip, r4, lsr #2
    d96e:	add	r6, r3
    d970:	subs	r4, r3, #4
    d972:	mov	lr, r1
    d974:	ldr.w	r5, [lr], #4
    d978:	str.w	r5, [r4, #4]!
    d97c:	cmp	r4, r6
    d97e:	bne.n	d974 <memmove+0xb4>
    d980:	add.w	r4, ip, #1
    d984:	and.w	r2, r2, #3
    d988:	add.w	r3, r3, r4, lsl #2
    d98c:	add.w	r1, r1, r4, lsl #2
    d990:	add.w	ip, r2, #4294967295
    d994:	cbz	r2, d9aa <memmove+0xea>
    d996:	add.w	ip, ip, #1
    d99a:	subs	r3, #1
    d99c:	add	ip, r1
    d99e:	ldrb.w	r2, [r1], #1
    d9a2:	strb.w	r2, [r3, #1]!
    d9a6:	cmp	r1, ip
    d9a8:	bne.n	d99e <memmove+0xde>
    d9aa:	pop	{r4, r5, r6, pc}
    d9ac:	add.w	ip, r2, #4294967295
    d9b0:	mov	r3, r0
    d9b2:	b.n	d8ec <memmove+0x2c>
    d9b4:	mov	r2, r4
    d9b6:	b.n	d990 <memmove+0xd0>

0000d9b8 <strlcat>:
    d9b8:	push	{r4, r5, r6, lr}
    d9ba:	cbz	r2, da10 <strlcat+0x58>
    d9bc:	mov	r3, r0
    d9be:	adds	r5, r2, r0
    d9c0:	b.n	d9c8 <strlcat+0x10>
    d9c2:	cmp	r5, r3
    d9c4:	mov	ip, r3
    d9c6:	beq.n	d9d4 <strlcat+0x1c>
    d9c8:	mov	ip, r3
    d9ca:	adds	r3, #1
    d9cc:	ldrb.w	r4, [ip]
    d9d0:	cmp	r4, #0
    d9d2:	bne.n	d9c2 <strlcat+0xa>
    d9d4:	sub.w	r6, ip, r0
    d9d8:	subs	r2, r2, r6
    d9da:	subs	r5, r2, #1
    d9dc:	cbz	r2, da12 <strlcat+0x5a>
    d9de:	ldrb	r4, [r1, #0]
    d9e0:	mov	r3, r1
    d9e2:	cbnz	r4, d9f4 <strlcat+0x3c>
    d9e4:	b.n	da06 <strlcat+0x4e>
    d9e6:	strb.w	r4, [r2], #1
    d9ea:	subs	r5, #1
    d9ec:	mov	ip, r2
    d9ee:	ldrb	r4, [r3, #1]
    d9f0:	adds	r3, #1
    d9f2:	cbz	r4, da02 <strlcat+0x4a>
    d9f4:	mov	r2, ip
    d9f6:	cmp	r5, #0
    d9f8:	bne.n	d9e6 <strlcat+0x2e>
    d9fa:	ldrb	r2, [r3, #1]
    d9fc:	adds	r3, #1
    d9fe:	cmp	r2, #0
    da00:	bne.n	d9ee <strlcat+0x36>
    da02:	subs	r3, r3, r1
    da04:	add	r6, r3
    da06:	movs	r3, #0
    da08:	strb.w	r3, [ip]
    da0c:	mov	r0, r6
    da0e:	pop	{r4, r5, r6, pc}
    da10:	mov	r6, r2
    da12:	mov	r0, r1
    da14:	bl	e100 <strlen>
    da18:	add	r6, r0
    da1a:	mov	r0, r6
    da1c:	pop	{r4, r5, r6, pc}
    da1e:	nop

0000da20 <strlcpy>:
    da20:	cbz	r2, da54 <strlcpy+0x34>
    da22:	add.w	ip, r0, r2
    da26:	push	{lr}
    da28:	mov	r3, r1
    da2a:	add.w	lr, ip, #4294967295
    da2e:	b.n	da3a <strlcpy+0x1a>
    da30:	ldrb.w	r2, [r3], #1
    da34:	strb.w	r2, [r0], #1
    da38:	cbz	r2, da4c <strlcpy+0x2c>
    da3a:	cmp	lr, r0
    da3c:	bne.n	da30 <strlcpy+0x10>
    da3e:	movs	r2, #0
    da40:	strb.w	r2, [ip, #-1]
    da44:	ldrb.w	r2, [r3], #1
    da48:	cmp	r2, #0
    da4a:	bne.n	da44 <strlcpy+0x24>
    da4c:	subs	r1, r3, r1
    da4e:	subs	r0, r1, #1
    da50:	ldr.w	pc, [sp], #4
    da54:	mov	r3, r1
    da56:	ldrb.w	r2, [r3], #1
    da5a:	cmp	r2, #0
    da5c:	bne.n	da56 <strlcpy+0x36>
    da5e:	subs	r1, r3, r1
    da60:	subs	r0, r1, #1
    da62:	bx	lr

0000da64 <strncmp>:
    da64:	cmp	r2, #0
    da66:	beq.n	dae6 <strncmp+0x82>
    da68:	orr.w	r3, r0, r1
    da6c:	lsls	r3, r3, #30
    da6e:	push	{r4, r5, lr}
    da70:	mov	ip, r0
    da72:	bne.n	dad4 <strncmp+0x70>
    da74:	cmp	r2, #3
    da76:	bls.n	dad4 <strncmp+0x70>
    da78:	mov	r3, r1
    da7a:	b.n	da8e <strncmp+0x2a>
    da7c:	subs	r2, #4
    da7e:	mov	ip, r0
    da80:	mov	r1, r3
    da82:	beq.n	dad0 <strncmp+0x6c>
    da84:	tst.w	lr, #2155905152	; 0x80808080
    da88:	bne.n	dad0 <strncmp+0x6c>
    da8a:	cmp	r2, #3
    da8c:	bls.n	dad4 <strncmp+0x70>
    da8e:	ldr	r4, [r0, #0]
    da90:	mov	r1, r3
    da92:	ldr.w	r5, [r3], #4
    da96:	sub.w	lr, r4, #16843009	; 0x1010101
    da9a:	cmp	r4, r5
    da9c:	mov	ip, r0
    da9e:	bic.w	lr, lr, r4
    daa2:	add.w	r0, r0, #4
    daa6:	beq.n	da7c <strncmp+0x18>
    daa8:	ldrb.w	r0, [ip]
    daac:	ldrb	r4, [r1, #0]
    daae:	cmp	r0, r4
    dab0:	bne.n	daea <strncmp+0x86>
    dab2:	mov	lr, ip
    dab4:	cbz	r0, dad2 <strncmp+0x6e>
    dab6:	ldrb.w	r0, [lr, #1]!
    daba:	ldrb.w	r4, [r1, #1]!
    dabe:	sub.w	r3, r2, lr
    dac2:	cmp	r0, r4
    dac4:	add.w	r3, r3, #4294967295
    dac8:	bne.n	daea <strncmp+0x86>
    daca:	adds.w	r3, ip, r3
    dace:	bne.n	dab4 <strncmp+0x50>
    dad0:	movs	r0, #0
    dad2:	pop	{r4, r5, pc}
    dad4:	ldrb.w	r0, [ip]
    dad8:	ldrb	r4, [r1, #0]
    dada:	cmp	r4, r0
    dadc:	bne.n	daea <strncmp+0x86>
    dade:	cmp	r2, #1
    dae0:	beq.n	dad0 <strncmp+0x6c>
    dae2:	mov	lr, ip
    dae4:	b.n	dab4 <strncmp+0x50>
    dae6:	mov	r0, r2
    dae8:	bx	lr
    daea:	subs	r0, r0, r4
    daec:	pop	{r4, r5, pc}
    daee:	nop

0000daf0 <strncpy>:
    daf0:	orr.w	r3, r0, r1
    daf4:	lsls	r3, r3, #30
    daf6:	push	{r4, r5, lr}
    daf8:	bne.n	dafe <strncpy+0xe>
    dafa:	cmp	r2, #3
    dafc:	bhi.n	db1e <strncpy+0x2e>
    dafe:	mov	ip, r0
    db00:	add.w	lr, r1, #4294967295
    db04:	b.n	db16 <strncpy+0x26>
    db06:	ldrb.w	r1, [lr, #1]!
    db0a:	strb.w	r1, [r3], #1
    db0e:	subs	r4, r2, #1
    db10:	cbz	r1, db44 <strncpy+0x54>
    db12:	mov	ip, r3
    db14:	mov	r2, r4
    db16:	mov	r3, ip
    db18:	cmp	r2, #0
    db1a:	bne.n	db06 <strncpy+0x16>
    db1c:	pop	{r4, r5, pc}
    db1e:	mov	r3, r1
    db20:	mov	ip, r0
    db22:	mov	r1, r3
    db24:	ldr.w	r5, [r3], #4
    db28:	sub.w	r4, r5, #16843009	; 0x1010101
    db2c:	bic.w	r4, r4, r5
    db30:	tst.w	r4, #2155905152	; 0x80808080
    db34:	bne.n	db00 <strncpy+0x10>
    db36:	subs	r2, #4
    db38:	cmp	r2, #3
    db3a:	str.w	r5, [ip], #4
    db3e:	mov	r1, r3
    db40:	bhi.n	db22 <strncpy+0x32>
    db42:	b.n	db00 <strncpy+0x10>
    db44:	add	ip, r2
    db46:	cmp	r4, #0
    db48:	beq.n	db1c <strncpy+0x2c>
    db4a:	strb.w	r1, [r3], #1
    db4e:	cmp	r3, ip
    db50:	bne.n	db4a <strncpy+0x5a>
    db52:	pop	{r4, r5, pc}

0000db54 <__locale_mb_cur_max>:
    db54:	ldr	r3, [pc, #4]	; (db5c <__locale_mb_cur_max+0x8>)
    db56:	ldrb.w	r0, [r3, #296]	; 0x128
    db5a:	bx	lr
    db5c:	.word	0x20008964

0000db60 <_close_r>:
    db60:	push	{r3, r4, r5, lr}
    db62:	ldr	r5, [pc, #28]	; (db80 <_close_r+0x20>)
    db64:	movs	r2, #0
    db66:	mov	r4, r0
    db68:	mov	r0, r1
    db6a:	str	r2, [r5, #0]
    db6c:	bl	abac <_close>
    db70:	adds	r3, r0, #1
    db72:	beq.n	db76 <_close_r+0x16>
    db74:	pop	{r3, r4, r5, pc}
    db76:	ldr	r3, [r5, #0]
    db78:	cmp	r3, #0
    db7a:	beq.n	db74 <_close_r+0x14>
    db7c:	str	r3, [r4, #0]
    db7e:	pop	{r3, r4, r5, pc}
    db80:	.word	0x20027370

0000db84 <_lseek_r>:
    db84:	push	{r3, r4, r5, lr}
    db86:	mov	r4, r1
    db88:	ldr	r5, [pc, #32]	; (dbac <_lseek_r+0x28>)
    db8a:	mov	ip, r0
    db8c:	mov	r1, r2
    db8e:	mov	r0, r4
    db90:	mov	r2, r3
    db92:	movs	r3, #0
    db94:	str	r3, [r5, #0]
    db96:	mov	r4, ip
    db98:	bl	abc0 <_lseek>
    db9c:	adds	r3, r0, #1
    db9e:	beq.n	dba2 <_lseek_r+0x1e>
    dba0:	pop	{r3, r4, r5, pc}
    dba2:	ldr	r3, [r5, #0]
    dba4:	cmp	r3, #0
    dba6:	beq.n	dba0 <_lseek_r+0x1c>
    dba8:	str	r3, [r4, #0]
    dbaa:	pop	{r3, r4, r5, pc}
    dbac:	.word	0x20027370

0000dbb0 <_read_r>:
    dbb0:	push	{r3, r4, r5, lr}
    dbb2:	mov	r4, r1
    dbb4:	ldr	r5, [pc, #32]	; (dbd8 <_read_r+0x28>)
    dbb6:	mov	ip, r0
    dbb8:	mov	r1, r2
    dbba:	mov	r0, r4
    dbbc:	mov	r2, r3
    dbbe:	movs	r3, #0
    dbc0:	str	r3, [r5, #0]
    dbc2:	mov	r4, ip
    dbc4:	bl	aba8 <_read>
    dbc8:	adds	r3, r0, #1
    dbca:	beq.n	dbce <_read_r+0x1e>
    dbcc:	pop	{r3, r4, r5, pc}
    dbce:	ldr	r3, [r5, #0]
    dbd0:	cmp	r3, #0
    dbd2:	beq.n	dbcc <_read_r+0x1c>
    dbd4:	str	r3, [r4, #0]
    dbd6:	pop	{r3, r4, r5, pc}
    dbd8:	.word	0x20027370

0000dbdc <_sbrk_r>:
    dbdc:	push	{r3, r4, r5, lr}
    dbde:	ldr	r5, [pc, #28]	; (dbfc <_sbrk_r+0x20>)
    dbe0:	movs	r2, #0
    dbe2:	mov	r4, r0
    dbe4:	mov	r0, r1
    dbe6:	str	r2, [r5, #0]
    dbe8:	bl	ab7c <_sbrk>
    dbec:	adds	r3, r0, #1
    dbee:	beq.n	dbf2 <_sbrk_r+0x16>
    dbf0:	pop	{r3, r4, r5, pc}
    dbf2:	ldr	r3, [r5, #0]
    dbf4:	cmp	r3, #0
    dbf6:	beq.n	dbf0 <_sbrk_r+0x14>
    dbf8:	str	r3, [r4, #0]
    dbfa:	pop	{r3, r4, r5, pc}
    dbfc:	.word	0x20027370

0000dc00 <_write_r>:
    dc00:	push	{r3, r4, r5, lr}
    dc02:	mov	r4, r1
    dc04:	ldr	r5, [pc, #32]	; (dc28 <_write_r+0x28>)
    dc06:	mov	ip, r0
    dc08:	mov	r1, r2
    dc0a:	mov	r0, r4
    dc0c:	mov	r2, r3
    dc0e:	movs	r3, #0
    dc10:	str	r3, [r5, #0]
    dc12:	mov	r4, ip
    dc14:	bl	b5a4 <_write>
    dc18:	adds	r3, r0, #1
    dc1a:	beq.n	dc1e <_write_r+0x1e>
    dc1c:	pop	{r3, r4, r5, pc}
    dc1e:	ldr	r3, [r5, #0]
    dc20:	cmp	r3, #0
    dc22:	beq.n	dc1c <_write_r+0x1c>
    dc24:	str	r3, [r4, #0]
    dc26:	pop	{r3, r4, r5, pc}
    dc28:	.word	0x20027370

0000dc2c <__errno>:
    dc2c:	ldr	r3, [pc, #4]	; (dc34 <__errno+0x8>)
    dc2e:	ldr	r0, [r3, #0]
    dc30:	bx	lr
    dc32:	nop
    dc34:	.word	0x20008eec

0000dc38 <__libc_init_array>:
    dc38:	push	{r4, r5, r6, lr}
    dc3a:	ldr	r6, [pc, #52]	; (dc70 <__libc_init_array+0x38>)
    dc3c:	ldr	r5, [pc, #52]	; (dc74 <__libc_init_array+0x3c>)
    dc3e:	subs	r6, r6, r5
    dc40:	asrs	r6, r6, #2
    dc42:	beq.n	dc52 <__libc_init_array+0x1a>
    dc44:	movs	r4, #0
    dc46:	ldr.w	r3, [r5], #4
    dc4a:	adds	r4, #1
    dc4c:	blx	r3
    dc4e:	cmp	r6, r4
    dc50:	bne.n	dc46 <__libc_init_array+0xe>
    dc52:	ldr	r6, [pc, #36]	; (dc78 <__libc_init_array+0x40>)
    dc54:	ldr	r5, [pc, #36]	; (dc7c <__libc_init_array+0x44>)
    dc56:	subs	r6, r6, r5
    dc58:	bl	16560 <___init_veneer>
    dc5c:	asrs	r6, r6, #2
    dc5e:	beq.n	dc6e <__libc_init_array+0x36>
    dc60:	movs	r4, #0
    dc62:	ldr.w	r3, [r5], #4
    dc66:	adds	r4, #1
    dc68:	blx	r3
    dc6a:	cmp	r6, r4
    dc6c:	bne.n	dc62 <__libc_init_array+0x2a>
    dc6e:	pop	{r4, r5, r6, pc}
    dc70:	.word	0x60002360
    dc74:	.word	0x60002360
    dc78:	.word	0x60002370
    dc7c:	.word	0x60002360

0000dc80 <__retarget_lock_init_recursive>:
    dc80:	bx	lr
    dc82:	nop

0000dc84 <__retarget_lock_close_recursive>:
    dc84:	bx	lr
    dc86:	nop

0000dc88 <__retarget_lock_acquire_recursive>:
    dc88:	bx	lr
    dc8a:	nop

0000dc8c <__retarget_lock_release_recursive>:
    dc8c:	bx	lr
    dc8e:	nop
	...
    dca0:	sub.w	r0, r2, r3
    dca4:	bx	lr
    dca6:	nop

0000dca8 <strcmp>:
    dca8:	ldrb	r2, [r0, #0]
    dcaa:	ldrb	r3, [r1, #0]
    dcac:	cmp	r2, #1
    dcae:	it	cs
    dcb0:	cmpcs	r2, r3
    dcb2:	bne.n	dca0 <__retarget_lock_release_recursive+0x14>
    dcb4:	strd	r4, r5, [sp, #-16]!
    dcb8:	orr.w	r4, r0, r1
    dcbc:	strd	r6, r7, [sp, #8]
    dcc0:	mvn.w	ip, #0
    dcc4:	mov.w	r2, r4, lsl #29
    dcc8:	cbz	r2, dd10 <strcmp+0x68>
    dcca:	eor.w	r4, r0, r1
    dcce:	tst.w	r4, #7
    dcd2:	bne.n	ddaa <strcmp+0x102>
    dcd4:	and.w	r4, r0, #7
    dcd8:	bic.w	r0, r0, #7
    dcdc:	and.w	r5, r4, #3
    dce0:	bic.w	r1, r1, #7
    dce4:	mov.w	r5, r5, lsl #3
    dce8:	ldrd	r2, r3, [r0], #16
    dcec:	tst.w	r4, #4
    dcf0:	ldrd	r6, r7, [r1], #16
    dcf4:	lsl.w	r4, ip, r5
    dcf8:	orn	r2, r2, r4
    dcfc:	orn	r6, r6, r4
    dd00:	beq.n	dd18 <strcmp+0x70>
    dd02:	orn	r3, r3, r4
    dd06:	mov	r2, ip
    dd08:	orn	r7, r7, r4
    dd0c:	mov	r6, ip
    dd0e:	b.n	dd18 <strcmp+0x70>
    dd10:	ldrd	r2, r3, [r0], #16
    dd14:	ldrd	r6, r7, [r1], #16
    dd18:	uadd8	r5, r2, ip
    dd1c:	eor.w	r4, r2, r6
    dd20:	sel	r4, r4, ip
    dd24:	cbnz	r4, dd82 <strcmp+0xda>
    dd26:	uadd8	r5, r3, ip
    dd2a:	eor.w	r5, r3, r7
    dd2e:	sel	r5, r5, ip
    dd32:	cbnz	r5, dd5a <strcmp+0xb2>
    dd34:	ldrd	r2, r3, [r0, #-8]
    dd38:	ldrd	r6, r7, [r1, #-8]
    dd3c:	uadd8	r5, r2, ip
    dd40:	eor.w	r4, r2, r6
    dd44:	sel	r4, r4, ip
    dd48:	uadd8	r5, r3, ip
    dd4c:	eor.w	r5, r3, r7
    dd50:	sel	r5, r5, ip
    dd54:	orrs	r5, r4
    dd56:	beq.n	dd10 <strcmp+0x68>
    dd58:	cbnz	r4, dd82 <strcmp+0xda>
    dd5a:	rev	r5, r5
    dd5c:	clz	r4, r5
    dd60:	bic.w	r4, r4, #7
    dd64:	lsr.w	r1, r7, r4
    dd68:	ldrd	r6, r7, [sp, #8]
    dd6c:	lsr.w	r3, r3, r4
    dd70:	and.w	r0, r3, #255	; 0xff
    dd74:	and.w	r1, r1, #255	; 0xff
    dd78:	ldrd	r4, r5, [sp], #16
    dd7c:	sub.w	r0, r0, r1
    dd80:	bx	lr
    dd82:	rev	r4, r4
    dd84:	clz	r4, r4
    dd88:	bic.w	r4, r4, #7
    dd8c:	lsr.w	r1, r6, r4
    dd90:	ldrd	r6, r7, [sp, #8]
    dd94:	lsr.w	r2, r2, r4
    dd98:	and.w	r0, r2, #255	; 0xff
    dd9c:	and.w	r1, r1, #255	; 0xff
    dda0:	ldrd	r4, r5, [sp], #16
    dda4:	sub.w	r0, r0, r1
    dda8:	bx	lr
    ddaa:	tst.w	r4, #3
    ddae:	bne.n	de2a <strcmp+0x182>
    ddb0:	ands.w	r4, r0, #3
    ddb4:	bne.n	de08 <strcmp+0x160>
    ddb6:	ldr.w	r2, [r0], #8
    ddba:	ldr.w	r3, [r1], #8
    ddbe:	uadd8	r5, r2, ip
    ddc2:	eor.w	r5, r2, r3
    ddc6:	sel	r5, r5, ip
    ddca:	cbnz	r5, dde4 <strcmp+0x13c>
    ddcc:	ldr.w	r2, [r0, #-4]
    ddd0:	ldr.w	r3, [r1, #-4]
    ddd4:	uadd8	r5, r2, ip
    ddd8:	eor.w	r5, r2, r3
    dddc:	sel	r5, r5, ip
    dde0:	cmp	r5, #0
    dde2:	beq.n	ddb6 <strcmp+0x10e>
    dde4:	rev	r5, r5
    dde6:	clz	r4, r5
    ddea:	bic.w	r4, r4, #7
    ddee:	lsr.w	r1, r3, r4
    ddf2:	lsr.w	r2, r2, r4
    ddf6:	and.w	r0, r2, #255	; 0xff
    ddfa:	and.w	r1, r1, #255	; 0xff
    ddfe:	ldrd	r4, r5, [sp], #16
    de02:	sub.w	r0, r0, r1
    de06:	bx	lr
    de08:	mov.w	r4, r4, lsl #3
    de0c:	bic.w	r0, r0, #3
    de10:	ldr.w	r2, [r0], #8
    de14:	bic.w	r1, r1, #3
    de18:	ldr.w	r3, [r1], #8
    de1c:	lsl.w	r4, ip, r4
    de20:	orn	r2, r2, r4
    de24:	orn	r3, r3, r4
    de28:	b.n	ddbe <strcmp+0x116>
    de2a:	ands.w	r4, r0, #3
    de2e:	beq.n	de66 <strcmp+0x1be>
    de30:	sub.w	r1, r1, r4
    de34:	bic.w	r0, r0, #3
    de38:	lsls	r4, r4, #31
    de3a:	ldr.w	r2, [r0], #4
    de3e:	beq.n	de4e <strcmp+0x1a6>
    de40:	bcs.n	de62 <strcmp+0x1ba>
    de42:	ldrb	r3, [r1, #2]
    de44:	uxtb.w	r4, r2, ror #16
    de48:	subs	r4, r4, r3
    de4a:	bne.n	de5a <strcmp+0x1b2>
    de4c:	cbz	r3, de5a <strcmp+0x1b2>
    de4e:	ldrb	r3, [r1, #3]
    de50:	uxtb.w	r4, r2, ror #24
    de54:	subs	r4, r4, r3
    de56:	bne.n	de5a <strcmp+0x1b2>
    de58:	cbnz	r3, de62 <strcmp+0x1ba>
    de5a:	mov	r0, r4
    de5c:	ldr.w	r4, [sp], #16
    de60:	bx	lr
    de62:	add.w	r1, r1, #4
    de66:	ldr.w	r2, [r0], #4
    de6a:	lsls	r4, r1, #31
    de6c:	bic.w	r1, r1, #3
    de70:	ldr.w	r3, [r1], #4
    de74:	bhi.n	df08 <strcmp+0x260>
    de76:	bcs.n	dec2 <strcmp+0x21a>
    de78:	bic.w	r4, r2, #4278190080	; 0xff000000
    de7c:	uadd8	r5, r2, ip
    de80:	eors.w	r5, r4, r3, lsr #8
    de84:	sel	r5, r5, ip
    de88:	bne.n	dea0 <strcmp+0x1f8>
    de8a:	cbnz	r5, dea6 <strcmp+0x1fe>
    de8c:	ldr.w	r3, [r1], #4
    de90:	eor.w	r4, r4, r2
    de94:	cmp.w	r4, r3, lsl #24
    de98:	bne.n	deb8 <strcmp+0x210>
    de9a:	ldr.w	r2, [r0], #4
    de9e:	b.n	de78 <strcmp+0x1d0>
    dea0:	mov.w	r3, r3, lsr #8
    dea4:	b.n	df52 <strcmp+0x2aa>
    dea6:	bics.w	r5, r5, #4278190080	; 0xff000000
    deaa:	bne.n	df48 <strcmp+0x2a0>
    deac:	ldrb	r0, [r1, #0]
    deae:	ldrd	r4, r5, [sp], #16
    deb2:	rsb	r0, r0, #0
    deb6:	bx	lr
    deb8:	mov.w	r2, r2, lsr #24
    debc:	and.w	r3, r3, #255	; 0xff
    dec0:	b.n	df52 <strcmp+0x2aa>
    dec2:	and.w	r4, r2, ip, lsr #16
    dec6:	uadd8	r5, r2, ip
    deca:	eors.w	r5, r4, r3, lsr #16
    dece:	sel	r5, r5, ip
    ded2:	bne.n	deea <strcmp+0x242>
    ded4:	cbnz	r5, def0 <strcmp+0x248>
    ded6:	ldr.w	r3, [r1], #4
    deda:	eor.w	r4, r4, r2
    dede:	cmp.w	r4, r3, lsl #16
    dee2:	bne.n	defe <strcmp+0x256>
    dee4:	ldr.w	r2, [r0], #4
    dee8:	b.n	dec2 <strcmp+0x21a>
    deea:	mov.w	r3, r3, lsr #16
    deee:	b.n	df52 <strcmp+0x2aa>
    def0:	ands.w	r5, r5, ip, lsr #16
    def4:	bne.n	df48 <strcmp+0x2a0>
    def6:	ldrh	r3, [r1, #0]
    def8:	mov.w	r2, r2, lsr #16
    defc:	b.n	df52 <strcmp+0x2aa>
    defe:	mov.w	r2, r2, lsr #16
    df02:	and.w	r3, r3, ip, lsr #16
    df06:	b.n	df52 <strcmp+0x2aa>
    df08:	and.w	r4, r2, #255	; 0xff
    df0c:	uadd8	r5, r2, ip
    df10:	eors.w	r5, r4, r3, lsr #24
    df14:	sel	r5, r5, ip
    df18:	bne.n	df30 <strcmp+0x288>
    df1a:	cbnz	r5, df36 <strcmp+0x28e>
    df1c:	ldr.w	r3, [r1], #4
    df20:	eor.w	r4, r4, r2
    df24:	cmp.w	r4, r3, lsl #8
    df28:	bne.n	df3e <strcmp+0x296>
    df2a:	ldr.w	r2, [r0], #4
    df2e:	b.n	df08 <strcmp+0x260>
    df30:	mov.w	r3, r3, lsr #24
    df34:	b.n	df52 <strcmp+0x2aa>
    df36:	tst.w	r5, #255	; 0xff
    df3a:	bne.n	df48 <strcmp+0x2a0>
    df3c:	ldr	r3, [r1, #0]
    df3e:	mov.w	r2, r2, lsr #8
    df42:	bic.w	r3, r3, #4278190080	; 0xff000000
    df46:	b.n	df52 <strcmp+0x2aa>
    df48:	mov.w	r0, #0
    df4c:	ldrd	r4, r5, [sp], #16
    df50:	bx	lr
    df52:	rev	r2, r2
    df54:	rev	r3, r3
    df56:	uadd8	r4, r2, ip
    df5a:	eor.w	r4, r2, r3
    df5e:	sel	r5, r4, ip
    df62:	clz	r4, r5
    df66:	lsl.w	r2, r2, r4
    df6a:	lsl.w	r3, r3, r4
    df6e:	mov.w	r0, r2, lsr #24
    df72:	ldrd	r4, r5, [sp], #16
    df76:	sub.w	r0, r0, r3, lsr #24
    df7a:	bx	lr

0000df7c <strcpy>:
    df7c:	eor.w	r2, r0, r1
    df80:	mov	ip, r0
    df82:	tst.w	r2, #3
    df86:	bne.n	e028 <strcpy+0xac>
    df88:	tst.w	r1, #3
    df8c:	bne.n	dff4 <strcpy+0x78>
    df8e:	str.w	r4, [sp, #-4]!
    df92:	tst.w	r1, #4
    df96:	ldr.w	r3, [r1], #4
    df9a:	beq.n	dfb4 <strcpy+0x38>
    df9c:	sub.w	r2, r3, #16843009	; 0x1010101
    dfa0:	bics	r2, r3
    dfa2:	tst.w	r2, #2155905152	; 0x80808080
    dfa6:	itt	eq
    dfa8:	streq.w	r3, [ip], #4
    dfac:	ldreq.w	r3, [r1], #4
    dfb0:	bne.n	dfe0 <strcpy+0x64>
    dfb2:	nop
    dfb4:	ldr.w	r4, [r1], #4
    dfb8:	sub.w	r2, r3, #16843009	; 0x1010101
    dfbc:	bics	r2, r3
    dfbe:	tst.w	r2, #2155905152	; 0x80808080
    dfc2:	sub.w	r2, r4, #16843009	; 0x1010101
    dfc6:	bne.n	dfe0 <strcpy+0x64>
    dfc8:	str.w	r3, [ip], #4
    dfcc:	bics	r2, r4
    dfce:	tst.w	r2, #2155905152	; 0x80808080
    dfd2:	itt	eq
    dfd4:	ldreq.w	r3, [r1], #4
    dfd8:	streq.w	r4, [ip], #4
    dfdc:	beq.n	dfb4 <strcpy+0x38>
    dfde:	mov	r3, r4
    dfe0:	strb.w	r3, [ip], #1
    dfe4:	tst.w	r3, #255	; 0xff
    dfe8:	mov.w	r3, r3, ror #8
    dfec:	bne.n	dfe0 <strcpy+0x64>
    dfee:	ldr.w	r4, [sp], #4
    dff2:	bx	lr
    dff4:	tst.w	r1, #1
    dff8:	beq.n	e008 <strcpy+0x8c>
    dffa:	ldrb.w	r2, [r1], #1
    dffe:	strb.w	r2, [ip], #1
    e002:	cmp	r2, #0
    e004:	it	eq
    e006:	bxeq	lr
    e008:	tst.w	r1, #2
    e00c:	beq.n	df8e <strcpy+0x12>
    e00e:	ldrh.w	r2, [r1], #2
    e012:	tst.w	r2, #255	; 0xff
    e016:	itet	ne
    e018:	strhne.w	r2, [ip], #2
    e01c:	strbeq.w	r2, [ip]
    e020:	tstne.w	r2, #65280	; 0xff00
    e024:	bne.n	df8e <strcpy+0x12>
    e026:	bx	lr
    e028:	ldrb.w	r2, [r1], #1
    e02c:	strb.w	r2, [ip], #1
    e030:	cmp	r2, #0
    e032:	bne.n	e028 <strcpy+0xac>
    e034:	bx	lr
    e036:	nop
	...

0000e040 <memchr>:
    e040:	and.w	r1, r1, #255	; 0xff
    e044:	cmp	r2, #16
    e046:	blt.n	e0a0 <memchr+0x60>
    e048:	tst.w	r0, #7
    e04c:	beq.n	e060 <memchr+0x20>
    e04e:	ldrb.w	r3, [r0], #1
    e052:	subs	r2, #1
    e054:	cmp	r3, r1
    e056:	beq.n	e0b4 <memchr+0x74>
    e058:	tst.w	r0, #7
    e05c:	cbz	r2, e0b0 <memchr+0x70>
    e05e:	bne.n	e04e <memchr+0xe>
    e060:	push	{r4, r5, r6, r7}
    e062:	orr.w	r1, r1, r1, lsl #8
    e066:	orr.w	r1, r1, r1, lsl #16
    e06a:	bic.w	r4, r2, #7
    e06e:	mvns.w	r7, #0
    e072:	movs	r3, #0
    e074:	ldrd	r5, r6, [r0], #8
    e078:	subs	r4, #8
    e07a:	eor.w	r5, r5, r1
    e07e:	eor.w	r6, r6, r1
    e082:	uadd8	r5, r5, r7
    e086:	sel	r5, r3, r7
    e08a:	uadd8	r6, r6, r7
    e08e:	sel	r6, r5, r7
    e092:	cbnz	r6, e0b8 <memchr+0x78>
    e094:	bne.n	e074 <memchr+0x34>
    e096:	pop	{r4, r5, r6, r7}
    e098:	and.w	r1, r1, #255	; 0xff
    e09c:	and.w	r2, r2, #7
    e0a0:	cbz	r2, e0b0 <memchr+0x70>
    e0a2:	ldrb.w	r3, [r0], #1
    e0a6:	subs	r2, #1
    e0a8:	eor.w	r3, r3, r1
    e0ac:	cbz	r3, e0b4 <memchr+0x74>
    e0ae:	bne.n	e0a2 <memchr+0x62>
    e0b0:	movs	r0, #0
    e0b2:	bx	lr
    e0b4:	subs	r0, #1
    e0b6:	bx	lr
    e0b8:	cmp	r5, #0
    e0ba:	itte	eq
    e0bc:	moveq	r5, r6
    e0be:	subeq	r0, #3
    e0c0:	subne	r0, #7
    e0c2:	tst.w	r5, #1
    e0c6:	bne.n	e0d8 <memchr+0x98>
    e0c8:	adds	r0, #1
    e0ca:	tst.w	r5, #256	; 0x100
    e0ce:	ittt	eq
    e0d0:	addeq	r0, #1
    e0d2:	tsteq.w	r5, #98304	; 0x18000
    e0d6:	addeq	r0, #1
    e0d8:	pop	{r4, r5, r6, r7}
    e0da:	subs	r0, #1
    e0dc:	bx	lr
    e0de:	nop
	...

0000e100 <strlen>:
    e100:	pld	[r0]
    e104:	strd	r4, r5, [sp, #-8]!
    e108:	bic.w	r1, r0, #7
    e10c:	mvn.w	ip, #0
    e110:	ands.w	r4, r0, #7
    e114:	pld	[r1, #32]
    e118:	bne.w	e1ae <strlen+0xae>
    e11c:	mov.w	r4, #0
    e120:	mvn.w	r0, #7
    e124:	ldrd	r2, r3, [r1]
    e128:	pld	[r1, #64]	; 0x40
    e12c:	add.w	r0, r0, #8
    e130:	uadd8	r2, r2, ip
    e134:	sel	r2, r4, ip
    e138:	uadd8	r3, r3, ip
    e13c:	sel	r3, r2, ip
    e140:	cbnz	r3, e196 <strlen+0x96>
    e142:	ldrd	r2, r3, [r1, #8]
    e146:	uadd8	r2, r2, ip
    e14a:	add.w	r0, r0, #8
    e14e:	sel	r2, r4, ip
    e152:	uadd8	r3, r3, ip
    e156:	sel	r3, r2, ip
    e15a:	cbnz	r3, e196 <strlen+0x96>
    e15c:	ldrd	r2, r3, [r1, #16]
    e160:	uadd8	r2, r2, ip
    e164:	add.w	r0, r0, #8
    e168:	sel	r2, r4, ip
    e16c:	uadd8	r3, r3, ip
    e170:	sel	r3, r2, ip
    e174:	cbnz	r3, e196 <strlen+0x96>
    e176:	ldrd	r2, r3, [r1, #24]
    e17a:	add.w	r1, r1, #32
    e17e:	uadd8	r2, r2, ip
    e182:	add.w	r0, r0, #8
    e186:	sel	r2, r4, ip
    e18a:	uadd8	r3, r3, ip
    e18e:	sel	r3, r2, ip
    e192:	cmp	r3, #0
    e194:	beq.n	e124 <strlen+0x24>
    e196:	cmp	r2, #0
    e198:	itt	eq
    e19a:	addeq	r0, #4
    e19c:	moveq	r2, r3
    e19e:	rev	r2, r2
    e1a0:	clz	r2, r2
    e1a4:	ldrd	r4, r5, [sp], #8
    e1a8:	add.w	r0, r0, r2, lsr #3
    e1ac:	bx	lr
    e1ae:	ldrd	r2, r3, [r1]
    e1b2:	and.w	r5, r4, #3
    e1b6:	rsb	r0, r4, #0
    e1ba:	mov.w	r5, r5, lsl #3
    e1be:	tst.w	r4, #4
    e1c2:	pld	[r1, #64]	; 0x40
    e1c6:	lsl.w	r5, ip, r5
    e1ca:	orn	r2, r2, r5
    e1ce:	itt	ne
    e1d0:	ornne	r3, r3, r5
    e1d4:	movne	r2, ip
    e1d6:	mov.w	r4, #0
    e1da:	b.n	e130 <strlen+0x30>
    e1dc:	movs	r0, r0
	...

0000e1e0 <nan>:
    e1e0:	vldr	d0, [pc, #4]	; e1e8 <nan+0x8>
    e1e4:	bx	lr
    e1e6:	nop
    e1e8:	.word	0x00000000
    e1ec:	.word	0x7ff80000

0000e1f0 <nanf>:
    e1f0:	vldr	s0, [pc, #4]	; e1f8 <nanf+0x8>
    e1f4:	bx	lr
    e1f6:	nop
    e1f8:	.word	0x7fc00000

0000e1fc <__register_exitproc>:
    e1fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e200:	ldr.w	sl, [pc, #124]	; e280 <__register_exitproc+0x84>
    e204:	mov	r6, r0
    e206:	ldr.w	r0, [sl]
    e20a:	mov	r8, r3
    e20c:	mov	r7, r1
    e20e:	mov	r9, r2
    e210:	bl	dc88 <__retarget_lock_acquire_recursive>
    e214:	ldr	r3, [pc, #96]	; (e278 <__register_exitproc+0x7c>)
    e216:	ldr	r4, [r3, #0]
    e218:	cbz	r4, e264 <__register_exitproc+0x68>
    e21a:	ldr	r5, [r4, #4]
    e21c:	cmp	r5, #31
    e21e:	bgt.n	e26a <__register_exitproc+0x6e>
    e220:	cbnz	r6, e23a <__register_exitproc+0x3e>
    e222:	adds	r3, r5, #1
    e224:	adds	r5, #2
    e226:	ldr.w	r0, [sl]
    e22a:	str	r3, [r4, #4]
    e22c:	str.w	r7, [r4, r5, lsl #2]
    e230:	bl	dc8c <__retarget_lock_release_recursive>
    e234:	movs	r0, #0
    e236:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e23a:	add.w	r1, r4, r5, lsl #2
    e23e:	movs	r3, #1
    e240:	str.w	r9, [r1, #136]	; 0x88
    e244:	ldr.w	r2, [r4, #392]	; 0x188
    e248:	lsls	r3, r5
    e24a:	orrs	r2, r3
    e24c:	cmp	r6, #2
    e24e:	str.w	r2, [r4, #392]	; 0x188
    e252:	str.w	r8, [r1, #264]	; 0x108
    e256:	bne.n	e222 <__register_exitproc+0x26>
    e258:	ldr.w	r2, [r4, #396]	; 0x18c
    e25c:	orrs	r2, r3
    e25e:	str.w	r2, [r4, #396]	; 0x18c
    e262:	b.n	e222 <__register_exitproc+0x26>
    e264:	ldr	r4, [pc, #20]	; (e27c <__register_exitproc+0x80>)
    e266:	str	r4, [r3, #0]
    e268:	b.n	e21a <__register_exitproc+0x1e>
    e26a:	ldr.w	r0, [sl]
    e26e:	bl	dc8c <__retarget_lock_release_recursive>
    e272:	mov.w	r0, #4294967295
    e276:	b.n	e236 <__register_exitproc+0x3a>
    e278:	.word	0x20026e54
    e27c:	.word	0x20026e58
    e280:	.word	0x20008958

0000e284 <_malloc_trim_r>:
    e284:	push	{r3, r4, r5, r6, r7, lr}
    e286:	ldr	r7, [pc, #144]	; (e318 <_malloc_trim_r+0x94>)
    e288:	mov	r4, r1
    e28a:	mov	r6, r0
    e28c:	bl	c038 <__malloc_lock>
    e290:	ldr	r3, [r7, #8]
    e292:	ldr	r5, [r3, #4]
    e294:	rsb	r1, r4, #4064	; 0xfe0
    e298:	adds	r1, #15
    e29a:	bic.w	r5, r5, #3
    e29e:	adds	r3, r1, r5
    e2a0:	bic.w	r3, r3, #4080	; 0xff0
    e2a4:	bic.w	r3, r3, #15
    e2a8:	sub.w	r4, r3, #4096	; 0x1000
    e2ac:	cmp.w	r4, #4096	; 0x1000
    e2b0:	blt.n	e2c2 <_malloc_trim_r+0x3e>
    e2b2:	movs	r1, #0
    e2b4:	mov	r0, r6
    e2b6:	bl	dbdc <_sbrk_r>
    e2ba:	ldr	r3, [r7, #8]
    e2bc:	add	r3, r5
    e2be:	cmp	r0, r3
    e2c0:	beq.n	e2cc <_malloc_trim_r+0x48>
    e2c2:	mov	r0, r6
    e2c4:	bl	c044 <__malloc_unlock>
    e2c8:	movs	r0, #0
    e2ca:	pop	{r3, r4, r5, r6, r7, pc}
    e2cc:	negs	r1, r4
    e2ce:	mov	r0, r6
    e2d0:	bl	dbdc <_sbrk_r>
    e2d4:	adds	r0, #1
    e2d6:	beq.n	e2f4 <_malloc_trim_r+0x70>
    e2d8:	ldr	r2, [pc, #64]	; (e31c <_malloc_trim_r+0x98>)
    e2da:	ldr	r3, [r7, #8]
    e2dc:	subs	r5, r5, r4
    e2de:	orr.w	r5, r5, #1
    e2e2:	str	r5, [r3, #4]
    e2e4:	ldr	r3, [r2, #0]
    e2e6:	mov	r0, r6
    e2e8:	subs	r3, r3, r4
    e2ea:	str	r3, [r2, #0]
    e2ec:	bl	c044 <__malloc_unlock>
    e2f0:	movs	r0, #1
    e2f2:	pop	{r3, r4, r5, r6, r7, pc}
    e2f4:	movs	r1, #0
    e2f6:	mov	r0, r6
    e2f8:	bl	dbdc <_sbrk_r>
    e2fc:	ldr	r2, [r7, #8]
    e2fe:	subs	r3, r0, r2
    e300:	cmp	r3, #15
    e302:	ble.n	e2c2 <_malloc_trim_r+0x3e>
    e304:	orr.w	r3, r3, #1
    e308:	str	r3, [r2, #4]
    e30a:	ldr	r3, [pc, #20]	; (e320 <_malloc_trim_r+0x9c>)
    e30c:	ldr	r1, [pc, #12]	; (e31c <_malloc_trim_r+0x98>)
    e30e:	ldr	r3, [r3, #0]
    e310:	subs	r0, r0, r3
    e312:	str	r0, [r1, #0]
    e314:	b.n	e2c2 <_malloc_trim_r+0x3e>
    e316:	nop
    e318:	.word	0x20008ad0
    e31c:	.word	0x20026ff4
    e320:	.word	0x20008ed8

0000e324 <_free_r>:
    e324:	cmp	r1, #0
    e326:	beq.n	e3ec <_free_r+0xc8>
    e328:	push	{r3, r4, r5, r6, r7, lr}
    e32a:	mov	r4, r1
    e32c:	mov	r6, r0
    e32e:	bl	c038 <__malloc_lock>
    e332:	ldr.w	r2, [r4, #-4]
    e336:	ldr	r7, [pc, #492]	; (e524 <_free_r+0x200>)
    e338:	sub.w	r5, r4, #8
    e33c:	bic.w	r1, r2, #1
    e340:	add.w	ip, r5, r1
    e344:	ldr	r0, [r7, #8]
    e346:	ldr.w	r3, [ip, #4]
    e34a:	cmp	r0, ip
    e34c:	bic.w	r3, r3, #3
    e350:	beq.w	e46a <_free_r+0x146>
    e354:	lsls	r2, r2, #31
    e356:	str.w	r3, [ip, #4]
    e35a:	bmi.n	e3c2 <_free_r+0x9e>
    e35c:	ldr.w	r2, [r4, #-8]
    e360:	subs	r5, r5, r2
    e362:	add	r1, r2
    e364:	ldr	r2, [r5, #8]
    e366:	add.w	r0, r7, #8
    e36a:	cmp	r2, r0
    e36c:	beq.n	e444 <_free_r+0x120>
    e36e:	add.w	r4, ip, r3
    e372:	ldr.w	lr, [r4, #4]
    e376:	ldr	r4, [r5, #12]
    e378:	str	r4, [r2, #12]
    e37a:	tst.w	lr, #1
    e37e:	str	r2, [r4, #8]
    e380:	beq.w	e4b2 <_free_r+0x18e>
    e384:	orr.w	r3, r1, #1
    e388:	str	r3, [r5, #4]
    e38a:	str.w	r1, [ip]
    e38e:	cmp.w	r1, #512	; 0x200
    e392:	bcs.n	e400 <_free_r+0xdc>
    e394:	ldr	r0, [r7, #4]
    e396:	lsrs	r3, r1, #3
    e398:	movs	r2, #1
    e39a:	lsrs	r1, r1, #5
    e39c:	adds	r3, #1
    e39e:	lsls	r2, r1
    e3a0:	orrs	r2, r0
    e3a2:	ldr.w	r1, [r7, r3, lsl #3]
    e3a6:	str	r2, [r7, #4]
    e3a8:	add.w	r2, r7, r3, lsl #3
    e3ac:	subs	r2, #8
    e3ae:	strd	r1, r2, [r5, #8]
    e3b2:	str.w	r5, [r7, r3, lsl #3]
    e3b6:	str	r5, [r1, #12]
    e3b8:	mov	r0, r6
    e3ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e3be:	b.w	c044 <__malloc_unlock>
    e3c2:	add.w	r2, ip, r3
    e3c6:	ldr	r2, [r2, #4]
    e3c8:	lsls	r0, r2, #31
    e3ca:	bmi.n	e3ee <_free_r+0xca>
    e3cc:	add	r1, r3
    e3ce:	add.w	r0, r7, #8
    e3d2:	ldr.w	r3, [ip, #8]
    e3d6:	cmp	r3, r0
    e3d8:	beq.n	e4c2 <_free_r+0x19e>
    e3da:	ldr.w	r2, [ip, #12]
    e3de:	str	r2, [r3, #12]
    e3e0:	str	r3, [r2, #8]
    e3e2:	orr.w	r3, r1, #1
    e3e6:	str	r3, [r5, #4]
    e3e8:	str	r1, [r5, r1]
    e3ea:	b.n	e38e <_free_r+0x6a>
    e3ec:	bx	lr
    e3ee:	orr.w	r3, r1, #1
    e3f2:	cmp.w	r1, #512	; 0x200
    e3f6:	str.w	r3, [r4, #-4]
    e3fa:	str.w	r1, [ip]
    e3fe:	bcc.n	e394 <_free_r+0x70>
    e400:	cmp.w	r1, #2560	; 0xa00
    e404:	mov.w	r3, r1, lsr #9
    e408:	bcs.n	e49c <_free_r+0x178>
    e40a:	lsrs	r3, r1, #6
    e40c:	add.w	r0, r3, #57	; 0x39
    e410:	add.w	r2, r3, #56	; 0x38
    e414:	lsls	r3, r0, #3
    e416:	adds	r0, r7, r3
    e418:	ldr	r3, [r7, r3]
    e41a:	subs	r0, #8
    e41c:	cmp	r0, r3
    e41e:	beq.n	e4d4 <_free_r+0x1b0>
    e420:	ldr	r2, [r3, #4]
    e422:	bic.w	r2, r2, #3
    e426:	cmp	r2, r1
    e428:	bls.n	e430 <_free_r+0x10c>
    e42a:	ldr	r3, [r3, #8]
    e42c:	cmp	r0, r3
    e42e:	bne.n	e420 <_free_r+0xfc>
    e430:	ldr	r0, [r3, #12]
    e432:	strd	r3, r0, [r5, #8]
    e436:	str	r5, [r0, #8]
    e438:	str	r5, [r3, #12]
    e43a:	mov	r0, r6
    e43c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e440:	b.w	c044 <__malloc_unlock>
    e444:	add.w	r2, ip, r3
    e448:	ldr	r2, [r2, #4]
    e44a:	lsls	r2, r2, #31
    e44c:	bmi.n	e516 <_free_r+0x1f2>
    e44e:	add	r3, r1
    e450:	ldrd	r1, r2, [ip, #8]
    e454:	str	r2, [r1, #12]
    e456:	str	r1, [r2, #8]
    e458:	orr.w	r2, r3, #1
    e45c:	str	r2, [r5, #4]
    e45e:	mov	r0, r6
    e460:	str	r3, [r5, r3]
    e462:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e466:	b.w	c044 <__malloc_unlock>
    e46a:	add	r3, r1
    e46c:	lsls	r1, r2, #31
    e46e:	bmi.n	e480 <_free_r+0x15c>
    e470:	ldr.w	r2, [r4, #-8]
    e474:	subs	r5, r5, r2
    e476:	add	r3, r2
    e478:	ldrd	r1, r2, [r5, #8]
    e47c:	str	r2, [r1, #12]
    e47e:	str	r1, [r2, #8]
    e480:	orr.w	r2, r3, #1
    e484:	str	r2, [r5, #4]
    e486:	ldr	r2, [pc, #160]	; (e528 <_free_r+0x204>)
    e488:	str	r5, [r7, #8]
    e48a:	ldr	r2, [r2, #0]
    e48c:	cmp	r2, r3
    e48e:	bhi.n	e3b8 <_free_r+0x94>
    e490:	ldr	r3, [pc, #152]	; (e52c <_free_r+0x208>)
    e492:	mov	r0, r6
    e494:	ldr	r1, [r3, #0]
    e496:	bl	e284 <_malloc_trim_r>
    e49a:	b.n	e3b8 <_free_r+0x94>
    e49c:	cmp	r3, #20
    e49e:	bls.n	e4b6 <_free_r+0x192>
    e4a0:	cmp	r3, #84	; 0x54
    e4a2:	bhi.n	e4e4 <_free_r+0x1c0>
    e4a4:	lsrs	r3, r1, #12
    e4a6:	add.w	r0, r3, #111	; 0x6f
    e4aa:	add.w	r2, r3, #110	; 0x6e
    e4ae:	lsls	r3, r0, #3
    e4b0:	b.n	e416 <_free_r+0xf2>
    e4b2:	add	r1, r3
    e4b4:	b.n	e3d2 <_free_r+0xae>
    e4b6:	add.w	r0, r3, #92	; 0x5c
    e4ba:	add.w	r2, r3, #91	; 0x5b
    e4be:	lsls	r3, r0, #3
    e4c0:	b.n	e416 <_free_r+0xf2>
    e4c2:	orr.w	r3, r1, #1
    e4c6:	strd	r5, r5, [r7, #16]
    e4ca:	strd	r0, r0, [r5, #8]
    e4ce:	str	r3, [r5, #4]
    e4d0:	str	r1, [r5, r1]
    e4d2:	b.n	e3b8 <_free_r+0x94>
    e4d4:	ldr	r1, [r7, #4]
    e4d6:	asrs	r2, r2, #2
    e4d8:	movs	r4, #1
    e4da:	lsl.w	r2, r4, r2
    e4de:	orrs	r2, r1
    e4e0:	str	r2, [r7, #4]
    e4e2:	b.n	e432 <_free_r+0x10e>
    e4e4:	cmp.w	r3, #340	; 0x154
    e4e8:	bhi.n	e4f8 <_free_r+0x1d4>
    e4ea:	lsrs	r3, r1, #15
    e4ec:	add.w	r0, r3, #120	; 0x78
    e4f0:	add.w	r2, r3, #119	; 0x77
    e4f4:	lsls	r3, r0, #3
    e4f6:	b.n	e416 <_free_r+0xf2>
    e4f8:	movw	r2, #1364	; 0x554
    e4fc:	cmp	r3, r2
    e4fe:	bhi.n	e50e <_free_r+0x1ea>
    e500:	lsrs	r3, r1, #18
    e502:	add.w	r0, r3, #125	; 0x7d
    e506:	add.w	r2, r3, #124	; 0x7c
    e50a:	lsls	r3, r0, #3
    e50c:	b.n	e416 <_free_r+0xf2>
    e50e:	mov.w	r3, #1016	; 0x3f8
    e512:	movs	r2, #126	; 0x7e
    e514:	b.n	e416 <_free_r+0xf2>
    e516:	orr.w	r3, r1, #1
    e51a:	str	r3, [r5, #4]
    e51c:	str.w	r1, [ip]
    e520:	b.n	e3b8 <_free_r+0x94>
    e522:	nop
    e524:	.word	0x20008ad0
    e528:	.word	0x20008edc
    e52c:	.word	0x20027024

0000e530 <rshift>:
    e530:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e534:	ldr	r4, [r0, #16]
    e536:	cmp.w	r4, r1, asr #5
    e53a:	ble.n	e59c <rshift+0x6c>
    e53c:	add.w	lr, r0, #20
    e540:	asrs	r6, r1, #5
    e542:	ands.w	ip, r1, #31
    e546:	add.w	r5, lr, r4, lsl #2
    e54a:	add.w	r3, lr, r6, lsl #2
    e54e:	beq.n	e5a8 <rshift+0x78>
    e550:	ldr.w	r1, [lr, r6, lsl #2]
    e554:	adds	r3, #4
    e556:	cmp	r5, r3
    e558:	lsr.w	r1, r1, ip
    e55c:	rsb	r8, ip, #32
    e560:	bls.n	e594 <rshift+0x64>
    e562:	mov	r7, lr
    e564:	ldr	r2, [r3, #0]
    e566:	lsl.w	r2, r2, r8
    e56a:	orrs	r2, r1
    e56c:	str.w	r2, [r7], #4
    e570:	ldr.w	r1, [r3], #4
    e574:	cmp	r5, r3
    e576:	lsr.w	r1, r1, ip
    e57a:	bhi.n	e564 <rshift+0x34>
    e57c:	subs	r3, r4, r6
    e57e:	lsls	r3, r3, #2
    e580:	subs	r3, #5
    e582:	lsrs	r3, r3, #2
    e584:	adds	r3, #1
    e586:	add.w	r4, lr, r3, lsl #2
    e58a:	str.w	r1, [lr, r3, lsl #2]
    e58e:	cbz	r1, e5c4 <rshift+0x94>
    e590:	adds	r4, #4
    e592:	b.n	e5c4 <rshift+0x94>
    e594:	str	r1, [r0, #20]
    e596:	mov	r4, lr
    e598:	cmp	r1, #0
    e59a:	bne.n	e590 <rshift+0x60>
    e59c:	movs	r3, #0
    e59e:	str	r3, [r0, #16]
    e5a0:	movs	r3, #0
    e5a2:	str	r3, [r0, #20]
    e5a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5a8:	cmp	r5, r3
    e5aa:	it	hi
    e5ac:	addhi.w	r2, r0, #16
    e5b0:	bls.n	e59c <rshift+0x6c>
    e5b2:	ldr.w	r1, [r3], #4
    e5b6:	str.w	r1, [r2, #4]!
    e5ba:	cmp	r5, r3
    e5bc:	bhi.n	e5b2 <rshift+0x82>
    e5be:	subs	r4, r4, r6
    e5c0:	add.w	r4, lr, r4, lsl #2
    e5c4:	sub.w	r3, r4, lr
    e5c8:	asrs	r3, r3, #2
    e5ca:	cmp	r4, lr
    e5cc:	str	r3, [r0, #16]
    e5ce:	beq.n	e5a0 <rshift+0x70>
    e5d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e5d4 <__gethex>:
    e5d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e5d8:	vpush	{d8}
    e5dc:	ldr	r4, [r1, #0]
    e5de:	mov	fp, r1
    e5e0:	ldrb	r1, [r4, #2]
    e5e2:	sub	sp, #20
    e5e4:	cmp	r1, #48	; 0x30
    e5e6:	vmov	s16, r0
    e5ea:	mov	sl, r2
    e5ec:	str	r3, [sp, #8]
    e5ee:	bne.w	e98e <__gethex+0x3ba>
    e5f2:	mvn.w	r0, #1
    e5f6:	subs	r0, r0, r4
    e5f8:	adds	r2, r4, #3
    e5fa:	adds	r3, r0, r2
    e5fc:	mov	r4, r2
    e5fe:	ldrb.w	r1, [r2], #1
    e602:	cmp	r1, #48	; 0x30
    e604:	beq.n	e5fa <__gethex+0x26>
    e606:	ldr.w	r8, [pc, #768]	; e908 <__gethex+0x334>
    e60a:	ldrb.w	r2, [r8, r1]
    e60e:	cmp	r2, #0
    e610:	beq.w	e7de <__gethex+0x20a>
    e614:	ldrb	r2, [r4, #0]
    e616:	movs	r7, #0
    e618:	ldrb.w	r2, [r8, r2]
    e61c:	mov	r5, r7
    e61e:	mov	r6, r4
    e620:	cbz	r2, e62e <__gethex+0x5a>
    e622:	ldrb.w	r2, [r6, #1]!
    e626:	ldrb.w	r2, [r8, r2]
    e62a:	cmp	r2, #0
    e62c:	bne.n	e622 <__gethex+0x4e>
    e62e:	ldr	r1, [pc, #724]	; (e904 <__gethex+0x330>)
    e630:	str	r3, [sp, #4]
    e632:	movs	r2, #1
    e634:	mov	r0, r6
    e636:	bl	da64 <strncmp>
    e63a:	ldr	r3, [sp, #4]
    e63c:	mov	r9, r0
    e63e:	cmp	r0, #0
    e640:	beq.n	e6de <__gethex+0x10a>
    e642:	cmp	r5, #0
    e644:	bne.n	e6e4 <__gethex+0x110>
    e646:	ldrb	r2, [r6, #0]
    e648:	mov	r9, r5
    e64a:	and.w	r2, r2, #223	; 0xdf
    e64e:	cmp	r2, #80	; 0x50
    e650:	mov	r5, r6
    e652:	beq.n	e6f6 <__gethex+0x122>
    e654:	str.w	r6, [fp]
    e658:	cmp	r7, #0
    e65a:	bne.n	e730 <__gethex+0x15c>
    e65c:	subs	r3, r5, r4
    e65e:	subs	r3, #1
    e660:	cmp	r3, #7
    e662:	mov	r1, r7
    e664:	ble.n	e670 <__gethex+0x9c>
    e666:	asrs	r3, r3, #1
    e668:	cmp	r3, #7
    e66a:	add.w	r1, r1, #1
    e66e:	bgt.n	e666 <__gethex+0x92>
    e670:	vmov	r0, s16
    e674:	bl	ed7c <_Balloc>
    e678:	mov	fp, r0
    e67a:	cmp	r0, #0
    e67c:	beq.w	eb4c <__gethex+0x578>
    e680:	add.w	r6, r0, #20
    e684:	cmp	r4, r5
    e686:	str	r6, [sp, #4]
    e688:	bcs.w	ea30 <__gethex+0x45c>
    e68c:	movs	r7, #0
    e68e:	str.w	r9, [sp, #12]
    e692:	ldr	r1, [pc, #624]	; (e904 <__gethex+0x330>)
    e694:	mov	r9, r4
    e696:	mov	r4, r7
    e698:	b.n	e6b4 <__gethex+0xe0>
    e69a:	cmp	r7, #32
    e69c:	beq.n	e6d2 <__gethex+0xfe>
    e69e:	mov	r0, r7
    e6a0:	adds	r7, #4
    e6a2:	ldrb	r2, [r5, #0]
    e6a4:	ldrb.w	r2, [r8, r2]
    e6a8:	and.w	r2, r2, #15
    e6ac:	lsls	r2, r0
    e6ae:	orrs	r4, r2
    e6b0:	cmp	r5, r9
    e6b2:	beq.n	e744 <__gethex+0x170>
    e6b4:	ldrb.w	r2, [r5, #-1]!
    e6b8:	cmp	r2, #46	; 0x2e
    e6ba:	bne.n	e69a <__gethex+0xc6>
    e6bc:	cmp	r5, r9
    e6be:	bcc.n	e69a <__gethex+0xc6>
    e6c0:	movs	r2, #1
    e6c2:	mov	r0, r5
    e6c4:	bl	da64 <strncmp>
    e6c8:	ldr	r1, [pc, #568]	; (e904 <__gethex+0x330>)
    e6ca:	cmp	r0, #0
    e6cc:	beq.n	e6b0 <__gethex+0xdc>
    e6ce:	cmp	r7, #32
    e6d0:	bne.n	e69e <__gethex+0xca>
    e6d2:	movs	r0, #0
    e6d4:	str.w	r4, [r6], #4
    e6d8:	movs	r7, #4
    e6da:	mov	r4, r0
    e6dc:	b.n	e6a2 <__gethex+0xce>
    e6de:	cmp	r5, #0
    e6e0:	beq.w	e968 <__gethex+0x394>
    e6e4:	ldrb	r2, [r6, #0]
    e6e6:	and.w	r2, r2, #223	; 0xdf
    e6ea:	subs	r5, r5, r6
    e6ec:	cmp	r2, #80	; 0x50
    e6ee:	mov.w	r9, r5, lsl #2
    e6f2:	mov	r5, r6
    e6f4:	bne.n	e654 <__gethex+0x80>
    e6f6:	ldrb	r2, [r5, #1]
    e6f8:	cmp	r2, #43	; 0x2b
    e6fa:	beq.w	e948 <__gethex+0x374>
    e6fe:	cmp	r2, #45	; 0x2d
    e700:	beq.w	e84e <__gethex+0x27a>
    e704:	adds	r6, r5, #1
    e706:	movs	r0, #0
    e708:	ldrb.w	r1, [r8, r2]
    e70c:	subs	r2, r1, #1
    e70e:	cmp	r2, #24
    e710:	bhi.w	e84a <__gethex+0x276>
    e714:	ldrb	r2, [r6, #1]
    e716:	ldrb.w	r2, [r8, r2]
    e71a:	subs	r1, #16
    e71c:	adds	r6, #1
    e71e:	cmp	r2, #0
    e720:	bne.n	e7d8 <__gethex+0x204>
    e722:	cbz	r0, e726 <__gethex+0x152>
    e724:	negs	r1, r1
    e726:	add	r9, r1
    e728:	str.w	r6, [fp]
    e72c:	cmp	r7, #0
    e72e:	beq.n	e65c <__gethex+0x88>
    e730:	cmp	r3, #0
    e732:	ite	ne
    e734:	movne	r5, #0
    e736:	moveq	r5, #6
    e738:	mov	r0, r5
    e73a:	add	sp, #20
    e73c:	vpop	{d8}
    e740:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e744:	ldr.w	r9, [sp, #12]
    e748:	mov	r3, r4
    e74a:	str.w	r3, [r6], #4
    e74e:	mov	r0, r3
    e750:	ldr	r3, [sp, #4]
    e752:	subs	r6, r6, r3
    e754:	asrs	r6, r6, #2
    e756:	str.w	r6, [fp, #16]
    e75a:	bl	ef30 <__hi0bits>
    e75e:	lsls	r6, r6, #5
    e760:	ldr.w	r4, [sl]
    e764:	subs	r0, r6, r0
    e766:	cmp	r0, r4
    e768:	bgt.n	e856 <__gethex+0x282>
    e76a:	blt.w	e94c <__gethex+0x378>
    e76e:	movs	r7, #0
    e770:	ldr.w	r3, [sl, #8]
    e774:	cmp	r3, r9
    e776:	blt.w	ea1c <__gethex+0x448>
    e77a:	ldr.w	r3, [sl, #4]
    e77e:	cmp	r3, r9
    e780:	ble.n	e818 <__gethex+0x244>
    e782:	sub.w	r9, r3, r9
    e786:	cmp	r4, r9
    e788:	bgt.w	e890 <__gethex+0x2bc>
    e78c:	ldr.w	r2, [sl, #12]
    e790:	cmp	r2, #2
    e792:	beq.w	ea60 <__gethex+0x48c>
    e796:	cmp	r2, #3
    e798:	beq.w	ea9e <__gethex+0x4ca>
    e79c:	cmp	r2, #1
    e79e:	beq.w	ea80 <__gethex+0x4ac>
    e7a2:	vmov	r0, s16
    e7a6:	mov	r1, fp
    e7a8:	bl	edc8 <_Bfree>
    e7ac:	movs	r5, #80	; 0x50
    e7ae:	ldr	r2, [sp, #64]	; 0x40
    e7b0:	movs	r3, #0
    e7b2:	mov	r0, r5
    e7b4:	str	r3, [r2, #0]
    e7b6:	add	sp, #20
    e7b8:	vpop	{d8}
    e7bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7c0:	add.w	r1, r1, r1, lsl #2
    e7c4:	add.w	r2, r2, r1, lsl #1
    e7c8:	sub.w	r1, r2, #16
    e7cc:	ldrb.w	r2, [r6, #1]!
    e7d0:	ldrb.w	r2, [r8, r2]
    e7d4:	cmp	r2, #0
    e7d6:	beq.n	e722 <__gethex+0x14e>
    e7d8:	cmp	r2, #25
    e7da:	ble.n	e7c0 <__gethex+0x1ec>
    e7dc:	b.n	e722 <__gethex+0x14e>
    e7de:	ldr	r1, [pc, #292]	; (e904 <__gethex+0x330>)
    e7e0:	str	r3, [sp, #4]
    e7e2:	movs	r2, #1
    e7e4:	mov	r0, r4
    e7e6:	bl	da64 <strncmp>
    e7ea:	ldr	r3, [sp, #4]
    e7ec:	cmp	r0, #0
    e7ee:	bne.n	e8cc <__gethex+0x2f8>
    e7f0:	ldrb	r1, [r4, #1]
    e7f2:	ldrb.w	r2, [r8, r1]
    e7f6:	adds	r5, r4, #1
    e7f8:	cmp	r2, #0
    e7fa:	beq.n	e8d0 <__gethex+0x2fc>
    e7fc:	cmp	r1, #48	; 0x30
    e7fe:	mov	r4, r5
    e800:	bne.n	e80e <__gethex+0x23a>
    e802:	ldrb.w	r3, [r4, #1]!
    e806:	cmp	r3, #48	; 0x30
    e808:	beq.n	e802 <__gethex+0x22e>
    e80a:	ldrb.w	r2, [r8, r3]
    e80e:	clz	r7, r2
    e812:	lsrs	r7, r7, #5
    e814:	movs	r3, #1
    e816:	b.n	e61e <__gethex+0x4a>
    e818:	movs	r5, #1
    e81a:	cbz	r7, e832 <__gethex+0x25e>
    e81c:	ldr.w	r3, [sl, #12]
    e820:	cmp	r3, #2
    e822:	beq.n	e8e0 <__gethex+0x30c>
    e824:	cmp	r3, #3
    e826:	beq.n	e8e8 <__gethex+0x314>
    e828:	cmp	r3, #1
    e82a:	beq.w	e936 <__gethex+0x362>
    e82e:	orr.w	r5, r5, #16
    e832:	ldr	r3, [sp, #64]	; 0x40
    e834:	str.w	fp, [r3]
    e838:	ldr	r3, [sp, #8]
    e83a:	mov	r0, r5
    e83c:	str.w	r9, [r3]
    e840:	add	sp, #20
    e842:	vpop	{d8}
    e846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e84a:	mov	r6, r5
    e84c:	b.n	e654 <__gethex+0x80>
    e84e:	movs	r0, #1
    e850:	ldrb	r2, [r5, #2]
    e852:	adds	r6, r5, #2
    e854:	b.n	e708 <__gethex+0x134>
    e856:	subs	r6, r0, r4
    e858:	mov	r1, r6
    e85a:	mov	r0, fp
    e85c:	bl	f78c <__any_on>
    e860:	mov	r7, r0
    e862:	cbz	r0, e884 <__gethex+0x2b0>
    e864:	subs	r2, r6, #1
    e866:	asrs	r3, r2, #5
    e868:	ldr	r1, [sp, #4]
    e86a:	movs	r7, #1
    e86c:	ldr.w	r1, [r1, r3, lsl #2]
    e870:	and.w	r3, r2, #31
    e874:	lsl.w	r3, r7, r3
    e878:	tst	r3, r1
    e87a:	beq.n	e884 <__gethex+0x2b0>
    e87c:	cmp	r2, r7
    e87e:	bgt.w	ea46 <__gethex+0x472>
    e882:	movs	r7, #2
    e884:	mov	r1, r6
    e886:	mov	r0, fp
    e888:	add	r9, r6
    e88a:	bl	e530 <rshift>
    e88e:	b.n	e770 <__gethex+0x19c>
    e890:	add.w	r5, r9, #4294967295
    e894:	cmp	r7, #0
    e896:	bne.w	ea36 <__gethex+0x462>
    e89a:	cmp	r5, #0
    e89c:	bne.w	ea3a <__gethex+0x466>
    e8a0:	asrs	r3, r5, #5
    e8a2:	ldr	r2, [sp, #4]
    e8a4:	and.w	r5, r5, #31
    e8a8:	ldr.w	r2, [r2, r3, lsl #2]
    e8ac:	movs	r3, #1
    e8ae:	lsls	r3, r5
    e8b0:	tst	r3, r2
    e8b2:	mov	r1, r9
    e8b4:	mov	r0, fp
    e8b6:	it	ne
    e8b8:	orrne.w	r7, r7, #2
    e8bc:	sub.w	r4, r4, r9
    e8c0:	bl	e530 <rshift>
    e8c4:	movs	r5, #2
    e8c6:	ldr.w	r9, [sl, #4]
    e8ca:	b.n	e81a <__gethex+0x246>
    e8cc:	ldrb	r1, [r4, #0]
    e8ce:	mov	r5, r4
    e8d0:	and.w	r1, r1, #223	; 0xdf
    e8d4:	cmp	r1, #80	; 0x50
    e8d6:	beq.w	ea58 <__gethex+0x484>
    e8da:	str.w	r5, [fp]
    e8de:	b.n	e730 <__gethex+0x15c>
    e8e0:	ldr	r3, [sp, #68]	; 0x44
    e8e2:	rsb	r3, r3, #1
    e8e6:	str	r3, [sp, #68]	; 0x44
    e8e8:	ldr	r3, [sp, #68]	; 0x44
    e8ea:	cmp	r3, #0
    e8ec:	beq.n	e82e <__gethex+0x25a>
    e8ee:	ldr.w	r7, [fp, #16]
    e8f2:	ldr.w	r8, [sp, #4]
    e8f6:	lsls	r2, r7, #2
    e8f8:	mov	r3, r8
    e8fa:	str	r2, [sp, #4]
    e8fc:	add.w	r0, r8, r7, lsl #2
    e900:	movs	r1, #0
    e902:	b.n	e914 <__gethex+0x340>
    e904:	.word	0x20000984
    e908:	.word	0x2000069c
    e90c:	cmp	r0, r3
    e90e:	str.w	r1, [r3, #-4]
    e912:	bls.n	e994 <__gethex+0x3c0>
    e914:	mov	r6, r3
    e916:	ldr.w	r2, [r3], #4
    e91a:	cmp.w	r2, #4294967295
    e91e:	beq.n	e90c <__gethex+0x338>
    e920:	adds	r2, #1
    e922:	cmp	r5, #2
    e924:	str	r2, [r6, #0]
    e926:	beq.w	eaa8 <__gethex+0x4d4>
    e92a:	ands.w	r4, r4, #31
    e92e:	bne.w	eb00 <__gethex+0x52c>
    e932:	movs	r5, #33	; 0x21
    e934:	b.n	e832 <__gethex+0x25e>
    e936:	lsls	r2, r7, #30
    e938:	bpl.w	e82e <__gethex+0x25a>
    e93c:	ldr	r3, [sp, #4]
    e93e:	ldr	r3, [r3, #0]
    e940:	orrs	r7, r3
    e942:	lsls	r3, r7, #31
    e944:	bmi.n	e8ee <__gethex+0x31a>
    e946:	b.n	e82e <__gethex+0x25a>
    e948:	movs	r0, #0
    e94a:	b.n	e850 <__gethex+0x27c>
    e94c:	subs	r2, r4, r0
    e94e:	mov	r1, fp
    e950:	vmov	r0, s16
    e954:	sub.w	r9, r9, r2
    e958:	bl	f248 <__lshift>
    e95c:	add.w	r3, r0, #20
    e960:	mov	fp, r0
    e962:	str	r3, [sp, #4]
    e964:	movs	r7, #0
    e966:	b.n	e770 <__gethex+0x19c>
    e968:	ldrb	r2, [r6, #1]
    e96a:	ldrb.w	r0, [r8, r2]
    e96e:	adds	r1, r6, #1
    e970:	cmp	r0, #0
    e972:	beq.w	eab6 <__gethex+0x4e2>
    e976:	mov	r5, r1
    e978:	ldrb.w	r2, [r1, #1]!
    e97c:	ldrb.w	r0, [r8, r2]
    e980:	cmp	r0, #0
    e982:	bne.n	e976 <__gethex+0x3a2>
    e984:	subs	r5, r6, r5
    e986:	mov.w	r9, r5, lsl #2
    e98a:	mov	r6, r1
    e98c:	b.n	e64a <__gethex+0x76>
    e98e:	adds	r4, #2
    e990:	movs	r3, #0
    e992:	b.n	e606 <__gethex+0x32>
    e994:	ldr.w	r3, [fp, #8]
    e998:	cmp	r7, r3
    e99a:	bge.w	eaba <__gethex+0x4e6>
    e99e:	mov	r3, r7
    e9a0:	add.w	r2, fp, r3, lsl #2
    e9a4:	movs	r1, #1
    e9a6:	adds	r3, #1
    e9a8:	cmp	r5, #2
    e9aa:	str.w	r3, [fp, #16]
    e9ae:	str	r1, [r2, #20]
    e9b0:	beq.n	eaa8 <__gethex+0x4d4>
    e9b2:	cmp	r7, r3
    e9b4:	bge.n	e92a <__gethex+0x356>
    e9b6:	cmp	r3, #0
    e9b8:	ble.w	eaf2 <__gethex+0x51e>
    e9bc:	ldr.w	r2, [fp, #20]
    e9c0:	add.w	r3, r8, r3, lsl #2
    e9c4:	add.w	r0, fp, #24
    e9c8:	cmp	r3, r0
    e9ca:	mov.w	r2, r2, lsr #1
    e9ce:	bls.w	eb34 <__gethex+0x560>
    e9d2:	mov	r4, r8
    e9d4:	ldr	r1, [r0, #0]
    e9d6:	orr.w	r2, r2, r1, lsl #31
    e9da:	str.w	r2, [r4], #4
    e9de:	ldr.w	r2, [r0], #4
    e9e2:	cmp	r3, r0
    e9e4:	mov.w	r2, r2, lsr #1
    e9e8:	bhi.n	e9d4 <__gethex+0x400>
    e9ea:	sub.w	r3, r3, fp
    e9ee:	subs	r3, #25
    e9f0:	lsrs	r3, r3, #2
    e9f2:	adds	r3, #1
    e9f4:	str.w	r2, [r8, r3, lsl #2]
    e9f8:	add.w	r3, r8, r3, lsl #2
    e9fc:	cmp	r2, #0
    e9fe:	bne.w	eb3c <__gethex+0x568>
    ea02:	sub.w	r2, r3, r8
    ea06:	asrs	r2, r2, #2
    ea08:	cmp	r3, r8
    ea0a:	str.w	r2, [fp, #16]
    ea0e:	beq.n	eaf8 <__gethex+0x524>
    ea10:	ldr.w	r3, [sl, #8]
    ea14:	add.w	r9, r9, #1
    ea18:	cmp	r3, r9
    ea1a:	bge.n	e932 <__gethex+0x35e>
    ea1c:	vmov	r0, s16
    ea20:	mov	r1, fp
    ea22:	bl	edc8 <_Bfree>
    ea26:	ldr	r2, [sp, #64]	; 0x40
    ea28:	movs	r3, #0
    ea2a:	str	r3, [r2, #0]
    ea2c:	movs	r5, #163	; 0xa3
    ea2e:	b.n	e738 <__gethex+0x164>
    ea30:	ldr	r6, [sp, #4]
    ea32:	movs	r3, #0
    ea34:	b.n	e74a <__gethex+0x176>
    ea36:	movs	r7, #1
    ea38:	b.n	e8a0 <__gethex+0x2cc>
    ea3a:	mov	r1, r5
    ea3c:	mov	r0, fp
    ea3e:	bl	f78c <__any_on>
    ea42:	mov	r7, r0
    ea44:	b.n	e8a0 <__gethex+0x2cc>
    ea46:	subs	r1, r6, #2
    ea48:	mov	r0, fp
    ea4a:	bl	f78c <__any_on>
    ea4e:	cmp	r0, #0
    ea50:	beq.w	e882 <__gethex+0x2ae>
    ea54:	movs	r7, #3
    ea56:	b.n	e884 <__gethex+0x2b0>
    ea58:	mov.w	r9, #0
    ea5c:	movs	r7, #1
    ea5e:	b.n	e6f6 <__gethex+0x122>
    ea60:	ldr	r2, [sp, #68]	; 0x44
    ea62:	cmp	r2, #0
    ea64:	bne.w	e7a2 <__gethex+0x1ce>
    ea68:	ldr	r1, [sp, #8]
    ea6a:	str	r3, [r1, #0]
    ea6c:	ldr	r3, [sp, #4]
    ea6e:	movs	r2, #1
    ea70:	str.w	r2, [fp, #16]
    ea74:	str	r2, [r3, #0]
    ea76:	ldr	r3, [sp, #64]	; 0x40
    ea78:	movs	r5, #98	; 0x62
    ea7a:	str.w	fp, [r3]
    ea7e:	b.n	e738 <__gethex+0x164>
    ea80:	cmp	r4, r9
    ea82:	bne.w	e7a2 <__gethex+0x1ce>
    ea86:	cmp	r4, #1
    ea88:	beq.n	ea68 <__gethex+0x494>
    ea8a:	subs	r1, r4, #1
    ea8c:	mov	r0, fp
    ea8e:	bl	f78c <__any_on>
    ea92:	cmp	r0, #0
    ea94:	beq.w	e7a2 <__gethex+0x1ce>
    ea98:	ldr.w	r3, [sl, #4]
    ea9c:	b.n	ea68 <__gethex+0x494>
    ea9e:	ldr	r2, [sp, #68]	; 0x44
    eaa0:	cmp	r2, #0
    eaa2:	beq.w	e7a2 <__gethex+0x1ce>
    eaa6:	b.n	ea68 <__gethex+0x494>
    eaa8:	ldr.w	r3, [sl]
    eaac:	subs	r3, #1
    eaae:	cmp	r3, r4
    eab0:	beq.n	eb1c <__gethex+0x548>
    eab2:	movs	r5, #34	; 0x22
    eab4:	b.n	e832 <__gethex+0x25e>
    eab6:	mov	r6, r1
    eab8:	b.n	e64a <__gethex+0x76>
    eaba:	ldr.w	r1, [fp, #4]
    eabe:	vmov	r0, s16
    eac2:	adds	r1, #1
    eac4:	bl	ed7c <_Balloc>
    eac8:	mov	r6, r0
    eaca:	cbz	r0, eb40 <__gethex+0x56c>
    eacc:	ldr.w	r3, [fp, #16]
    ead0:	adds	r3, #2
    ead2:	lsls	r2, r3, #2
    ead4:	add.w	r1, fp, #12
    ead8:	adds	r0, #12
    eada:	bl	9488 <memcpy>
    eade:	mov	r1, fp
    eae0:	vmov	r0, s16
    eae4:	bl	edc8 <_Bfree>
    eae8:	add.w	r8, r6, #20
    eaec:	ldr	r3, [r6, #16]
    eaee:	mov	fp, r6
    eaf0:	b.n	e9a0 <__gethex+0x3cc>
    eaf2:	movs	r3, #0
    eaf4:	str.w	r3, [fp, #16]
    eaf8:	movs	r3, #0
    eafa:	str.w	r3, [fp, #20]
    eafe:	b.n	ea10 <__gethex+0x43c>
    eb00:	ldr	r3, [sp, #4]
    eb02:	add	r3, r8
    eb04:	rsb	r4, r4, #32
    eb08:	ldr.w	r0, [r3, #-4]
    eb0c:	bl	ef30 <__hi0bits>
    eb10:	cmp	r0, r4
    eb12:	bge.w	e932 <__gethex+0x35e>
    eb16:	ldr.w	r3, [fp, #16]
    eb1a:	b.n	e9b6 <__gethex+0x3e2>
    eb1c:	asrs	r3, r4, #5
    eb1e:	and.w	r4, r4, #31
    eb22:	ldr.w	r2, [r8, r3, lsl #2]
    eb26:	movs	r3, #1
    eb28:	lsls	r3, r4
    eb2a:	tst	r3, r2
    eb2c:	ite	eq
    eb2e:	moveq	r5, #34	; 0x22
    eb30:	movne	r5, #33	; 0x21
    eb32:	b.n	e832 <__gethex+0x25e>
    eb34:	str.w	r2, [r8]
    eb38:	mov	r3, r8
    eb3a:	cbz	r2, eb58 <__gethex+0x584>
    eb3c:	adds	r3, #4
    eb3e:	b.n	ea02 <__gethex+0x42e>
    eb40:	ldr	r3, [pc, #28]	; (eb60 <__gethex+0x58c>)
    eb42:	ldr	r0, [pc, #32]	; (eb64 <__gethex+0x590>)
    eb44:	mov	r2, r6
    eb46:	movs	r1, #132	; 0x84
    eb48:	bl	13000 <__assert_func>
    eb4c:	ldr	r3, [pc, #16]	; (eb60 <__gethex+0x58c>)
    eb4e:	ldr	r0, [pc, #20]	; (eb64 <__gethex+0x590>)
    eb50:	mov	r2, fp
    eb52:	movs	r1, #228	; 0xe4
    eb54:	bl	13000 <__assert_func>
    eb58:	str.w	r2, [fp, #16]
    eb5c:	b.n	eaf8 <__gethex+0x524>
    eb5e:	nop
    eb60:	.word	0x20000624
    eb64:	.word	0x20000638

0000eb68 <__match>:
    eb68:	push	{r4}
    eb6a:	ldr	r4, [r0, #0]
    eb6c:	b.n	eb82 <__match+0x1a>
    eb6e:	ldrb.w	r3, [r4, #1]!
    eb72:	sub.w	ip, r3, #65	; 0x41
    eb76:	cmp.w	ip, #25
    eb7a:	it	ls
    eb7c:	addls	r3, #32
    eb7e:	cmp	r3, r2
    eb80:	bne.n	eb96 <__match+0x2e>
    eb82:	ldrb.w	r2, [r1], #1
    eb86:	cmp	r2, #0
    eb88:	bne.n	eb6e <__match+0x6>
    eb8a:	adds	r4, #1
    eb8c:	str	r4, [r0, #0]
    eb8e:	movs	r0, #1
    eb90:	ldr.w	r4, [sp], #4
    eb94:	bx	lr
    eb96:	movs	r0, #0
    eb98:	ldr.w	r4, [sp], #4
    eb9c:	bx	lr
    eb9e:	nop

0000eba0 <__hexnan>:
    eba0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eba4:	ldr	r1, [r1, #0]
    eba6:	sub	sp, #20
    eba8:	asrs	r3, r1, #5
    ebaa:	ands.w	r1, r1, #31
    ebae:	str	r0, [sp, #8]
    ebb0:	add.w	r3, r2, r3, lsl #2
    ebb4:	str	r1, [sp, #12]
    ebb6:	bne.w	ecd8 <__hexnan+0x138>
    ebba:	subs	r5, r3, #4
    ebbc:	str	r3, [sp, #4]
    ebbe:	ldr	r3, [sp, #8]
    ebc0:	ldr	r1, [sp, #4]
    ebc2:	ldr	r4, [r3, #0]
    ebc4:	movs	r3, #0
    ebc6:	str.w	r3, [r1, #-4]
    ebca:	ldrb	r1, [r4, #1]
    ebcc:	adds	r4, #1
    ebce:	cmp	r1, #0
    ebd0:	beq.w	ed04 <__hexnan+0x164>
    ebd4:	ldr.w	r9, [pc, #372]	; ed4c <__hexnan+0x1ac>
    ebd8:	mov	r8, r5
    ebda:	mov	ip, r5
    ebdc:	mov	sl, r3
    ebde:	mov	r6, r3
    ebe0:	b.n	ec00 <__hexnan+0x60>
    ebe2:	cmp	r1, #32
    ebe4:	bhi.w	ed00 <__hexnan+0x160>
    ebe8:	cmp	r6, sl
    ebea:	ble.n	ebfa <__hexnan+0x5a>
    ebec:	cmp	ip, r8
    ebee:	bcs.n	ebf4 <__hexnan+0x54>
    ebf0:	cmp	r3, #7
    ebf2:	ble.n	ecac <__hexnan+0x10c>
    ebf4:	cmp	r2, ip
    ebf6:	bcc.n	ec9c <__hexnan+0xfc>
    ebf8:	movs	r3, #8
    ebfa:	ldrb.w	r1, [r4, #1]!
    ebfe:	cbz	r1, ec2a <__hexnan+0x8a>
    ec00:	ldrb.w	r0, [r9, r1]
    ec04:	cmp	r0, #0
    ec06:	beq.n	ebe2 <__hexnan+0x42>
    ec08:	adds	r3, #1
    ec0a:	cmp	r3, #8
    ec0c:	add.w	r6, r6, #1
    ec10:	bgt.n	ec88 <__hexnan+0xe8>
    ec12:	ldr.w	r1, [ip]
    ec16:	lsls	r1, r1, #4
    ec18:	and.w	r0, r0, #15
    ec1c:	orrs	r0, r1
    ec1e:	str.w	r0, [ip]
    ec22:	ldrb.w	r1, [r4, #1]!
    ec26:	cmp	r1, #0
    ec28:	bne.n	ec00 <__hexnan+0x60>
    ec2a:	cmp	r6, #0
    ec2c:	beq.n	ed04 <__hexnan+0x164>
    ec2e:	cmp	ip, r8
    ec30:	bcs.n	ec36 <__hexnan+0x96>
    ec32:	cmp	r3, #7
    ec34:	ble.n	ed20 <__hexnan+0x180>
    ec36:	cmp	r2, ip
    ec38:	bcs.n	ece0 <__hexnan+0x140>
    ec3a:	subs	r1, r2, #4
    ec3c:	mov	r3, ip
    ec3e:	ldr.w	r0, [r3], #4
    ec42:	str.w	r0, [r1, #4]!
    ec46:	cmp	r3, r5
    ec48:	bls.n	ec3e <__hexnan+0x9e>
    ec4a:	sub.w	r3, r5, ip
    ec4e:	bic.w	r3, r3, #3
    ec52:	adds	r1, r5, #1
    ec54:	adds	r3, #4
    ec56:	add.w	ip, ip, #1
    ec5a:	cmp	r1, ip
    ec5c:	it	cc
    ec5e:	movcc	r3, #4
    ec60:	add	r3, r2
    ec62:	movs	r1, #0
    ec64:	str.w	r1, [r3], #4
    ec68:	cmp	r3, r5
    ec6a:	bls.n	ec64 <__hexnan+0xc4>
    ec6c:	ldr	r3, [sp, #4]
    ec6e:	ldr.w	r3, [r3, #-4]
    ec72:	cbnz	r3, ec80 <__hexnan+0xe0>
    ec74:	cmp	r2, r5
    ec76:	beq.n	ed0c <__hexnan+0x16c>
    ec78:	ldr.w	r3, [r5, #-4]!
    ec7c:	cmp	r3, #0
    ec7e:	beq.n	ec74 <__hexnan+0xd4>
    ec80:	movs	r0, #5
    ec82:	add	sp, #20
    ec84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec88:	cmp	r2, ip
    ec8a:	bcs.n	ebfa <__hexnan+0x5a>
    ec8c:	movs	r3, #0
    ec8e:	str.w	r3, [ip, #-4]
    ec92:	mov	r1, r3
    ec94:	sub.w	ip, ip, #4
    ec98:	movs	r3, #1
    ec9a:	b.n	ec18 <__hexnan+0x78>
    ec9c:	movs	r3, #0
    ec9e:	sub.w	r8, ip, #4
    eca2:	str.w	r3, [ip, #-4]
    eca6:	mov	sl, r6
    eca8:	mov	ip, r8
    ecaa:	b.n	ebfa <__hexnan+0x5a>
    ecac:	rsb	r1, r3, #8
    ecb0:	ldr.w	r3, [ip]
    ecb4:	lsls	r1, r1, #2
    ecb6:	rsb	lr, r1, #32
    ecba:	mov	r0, ip
    ecbc:	mov	fp, r3
    ecbe:	ldr	r7, [r0, #4]
    ecc0:	lsl.w	r3, r7, lr
    ecc4:	orr.w	r3, r3, fp
    ecc8:	lsr.w	fp, r7, r1
    eccc:	str	r3, [r0, #0]
    ecce:	str.w	fp, [r0, #4]!
    ecd2:	cmp	r0, r8
    ecd4:	bcc.n	ecbe <__hexnan+0x11e>
    ecd6:	b.n	ebf4 <__hexnan+0x54>
    ecd8:	adds	r1, r3, #4
    ecda:	str	r1, [sp, #4]
    ecdc:	mov	r5, r3
    ecde:	b.n	ebbe <__hexnan+0x1e>
    ece0:	ldr	r3, [sp, #12]
    ece2:	cmp	r3, #0
    ece4:	beq.n	ec6c <__hexnan+0xcc>
    ece6:	ldr	r3, [sp, #12]
    ece8:	ldr	r0, [sp, #4]
    ecea:	rsb	r1, r3, #32
    ecee:	mov.w	r3, #4294967295
    ecf2:	lsrs	r3, r1
    ecf4:	ldr.w	r1, [r0, #-4]
    ecf8:	ands	r3, r1
    ecfa:	str.w	r3, [r0, #-4]
    ecfe:	b.n	ec72 <__hexnan+0xd2>
    ed00:	cmp	r1, #41	; 0x29
    ed02:	beq.n	ed18 <__hexnan+0x178>
    ed04:	movs	r0, #4
    ed06:	add	sp, #20
    ed08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed0c:	movs	r3, #1
    ed0e:	movs	r0, #5
    ed10:	str	r3, [r5, #0]
    ed12:	add	sp, #20
    ed14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed18:	ldr	r1, [sp, #8]
    ed1a:	adds	r4, #1
    ed1c:	str	r4, [r1, #0]
    ed1e:	b.n	ec2a <__hexnan+0x8a>
    ed20:	ldr.w	r1, [ip]
    ed24:	rsb	r3, r3, #8
    ed28:	lsls	r3, r3, #2
    ed2a:	rsb	r7, r3, #32
    ed2e:	mov	r4, ip
    ed30:	mov	r0, r1
    ed32:	ldr	r6, [r4, #4]
    ed34:	lsl.w	r1, r6, r7
    ed38:	orrs	r1, r0
    ed3a:	lsr.w	r0, r6, r3
    ed3e:	str	r1, [r4, #0]
    ed40:	str.w	r0, [r4, #4]!
    ed44:	cmp	r4, r8
    ed46:	bcc.n	ed32 <__hexnan+0x192>
    ed48:	b.n	ec36 <__hexnan+0x96>
    ed4a:	nop
    ed4c:	.word	0x2000069c

0000ed50 <__ascii_mbtowc>:
    ed50:	sub	sp, #8
    ed52:	cbz	r1, ed68 <__ascii_mbtowc+0x18>
    ed54:	cbz	r2, ed6e <__ascii_mbtowc+0x1e>
    ed56:	cbz	r3, ed74 <__ascii_mbtowc+0x24>
    ed58:	ldrb	r3, [r2, #0]
    ed5a:	str	r3, [r1, #0]
    ed5c:	ldrb	r2, [r2, #0]
    ed5e:	subs	r0, r2, #0
    ed60:	it	ne
    ed62:	movne	r0, #1
    ed64:	add	sp, #8
    ed66:	bx	lr
    ed68:	add	r1, sp, #4
    ed6a:	cmp	r2, #0
    ed6c:	bne.n	ed56 <__ascii_mbtowc+0x6>
    ed6e:	mov	r0, r2
    ed70:	add	sp, #8
    ed72:	bx	lr
    ed74:	mvn.w	r0, #1
    ed78:	b.n	ed64 <__ascii_mbtowc+0x14>
    ed7a:	nop

0000ed7c <_Balloc>:
    ed7c:	ldr	r3, [r0, #68]	; 0x44
    ed7e:	push	{r4, r5, r6, lr}
    ed80:	mov	r5, r0
    ed82:	mov	r4, r1
    ed84:	cbz	r3, ed9a <_Balloc+0x1e>
    ed86:	ldr.w	r0, [r3, r4, lsl #2]
    ed8a:	cbz	r0, edae <_Balloc+0x32>
    ed8c:	ldr	r2, [r0, #0]
    ed8e:	str.w	r2, [r3, r4, lsl #2]
    ed92:	movs	r3, #0
    ed94:	strd	r3, r3, [r0, #12]
    ed98:	pop	{r4, r5, r6, pc}
    ed9a:	movs	r2, #33	; 0x21
    ed9c:	movs	r1, #4
    ed9e:	bl	13040 <_calloc_r>
    eda2:	mov	r3, r0
    eda4:	str	r0, [r5, #68]	; 0x44
    eda6:	cmp	r0, #0
    eda8:	bne.n	ed86 <_Balloc+0xa>
    edaa:	movs	r0, #0
    edac:	pop	{r4, r5, r6, pc}
    edae:	movs	r1, #1
    edb0:	lsl.w	r6, r1, r4
    edb4:	adds	r2, r6, #5
    edb6:	lsls	r2, r2, #2
    edb8:	mov	r0, r5
    edba:	bl	13040 <_calloc_r>
    edbe:	cmp	r0, #0
    edc0:	beq.n	edaa <_Balloc+0x2e>
    edc2:	strd	r4, r6, [r0, #4]
    edc6:	b.n	ed92 <_Balloc+0x16>

0000edc8 <_Bfree>:
    edc8:	cbz	r1, edd8 <_Bfree+0x10>
    edca:	ldr	r3, [r0, #68]	; 0x44
    edcc:	ldr	r2, [r1, #4]
    edce:	ldr.w	r0, [r3, r2, lsl #2]
    edd2:	str	r0, [r1, #0]
    edd4:	str.w	r1, [r3, r2, lsl #2]
    edd8:	bx	lr
    edda:	nop

0000eddc <__multadd>:
    eddc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ede0:	ldr	r6, [r1, #16]
    ede2:	mov	r8, r0
    ede4:	mov	r7, r1
    ede6:	mov	r5, r3
    ede8:	add.w	lr, r1, #20
    edec:	movs	r0, #0
    edee:	ldr.w	r1, [lr]
    edf2:	uxth	r4, r1
    edf4:	mla	r3, r2, r4, r5
    edf8:	lsrs	r1, r1, #16
    edfa:	mov.w	ip, r3, lsr #16
    edfe:	mla	ip, r2, r1, ip
    ee02:	adds	r0, #1
    ee04:	uxth	r4, r3
    ee06:	add.w	r4, r4, ip, lsl #16
    ee0a:	cmp	r6, r0
    ee0c:	str.w	r4, [lr], #4
    ee10:	mov.w	r5, ip, lsr #16
    ee14:	bgt.n	edee <__multadd+0x12>
    ee16:	cbz	r5, ee28 <__multadd+0x4c>
    ee18:	ldr	r3, [r7, #8]
    ee1a:	cmp	r3, r6
    ee1c:	ble.n	ee2e <__multadd+0x52>
    ee1e:	add.w	r3, r7, r6, lsl #2
    ee22:	adds	r6, #1
    ee24:	str	r5, [r3, #20]
    ee26:	str	r6, [r7, #16]
    ee28:	mov	r0, r7
    ee2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ee2e:	ldr	r1, [r7, #4]
    ee30:	mov	r0, r8
    ee32:	adds	r1, #1
    ee34:	bl	ed7c <_Balloc>
    ee38:	mov	r4, r0
    ee3a:	cbz	r0, ee6a <__multadd+0x8e>
    ee3c:	ldr	r2, [r7, #16]
    ee3e:	adds	r2, #2
    ee40:	add.w	r1, r7, #12
    ee44:	lsls	r2, r2, #2
    ee46:	adds	r0, #12
    ee48:	bl	9488 <memcpy>
    ee4c:	ldr.w	r3, [r8, #68]	; 0x44
    ee50:	ldr	r2, [r7, #4]
    ee52:	ldr.w	r1, [r3, r2, lsl #2]
    ee56:	str	r1, [r7, #0]
    ee58:	str.w	r7, [r3, r2, lsl #2]
    ee5c:	mov	r7, r4
    ee5e:	add.w	r3, r7, r6, lsl #2
    ee62:	adds	r6, #1
    ee64:	str	r5, [r3, #20]
    ee66:	str	r6, [r7, #16]
    ee68:	b.n	ee28 <__multadd+0x4c>
    ee6a:	ldr	r3, [pc, #12]	; (ee78 <__multadd+0x9c>)
    ee6c:	ldr	r0, [pc, #12]	; (ee7c <__multadd+0xa0>)
    ee6e:	mov	r2, r4
    ee70:	movs	r1, #186	; 0xba
    ee72:	bl	13000 <__assert_func>
    ee76:	nop
    ee78:	.word	0x20000624
    ee7c:	.word	0x2000079c

0000ee80 <__s2b>:
    ee80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee84:	mov	r7, r2
    ee86:	ldr	r2, [pc, #156]	; (ef24 <__s2b+0xa4>)
    ee88:	mov	r6, r3
    ee8a:	adds	r3, #8
    ee8c:	mov	r4, r1
    ee8e:	cmp	r6, #9
    ee90:	smull	r1, r2, r2, r3
    ee94:	mov.w	r3, r3, asr #31
    ee98:	mov	r5, r0
    ee9a:	rsb	r3, r3, r2, asr #1
    ee9e:	ble.n	ef14 <__s2b+0x94>
    eea0:	mov.w	ip, #1
    eea4:	movs	r1, #0
    eea6:	mov.w	ip, ip, lsl #1
    eeaa:	cmp	r3, ip
    eeac:	add.w	r1, r1, #1
    eeb0:	bgt.n	eea6 <__s2b+0x26>
    eeb2:	mov	r0, r5
    eeb4:	bl	ed7c <_Balloc>
    eeb8:	mov	r1, r0
    eeba:	cbz	r0, ef18 <__s2b+0x98>
    eebc:	ldr	r3, [sp, #32]
    eebe:	str	r3, [r0, #20]
    eec0:	cmp	r7, #9
    eec2:	mov.w	r3, #1
    eec6:	str	r3, [r0, #16]
    eec8:	bgt.n	eef0 <__s2b+0x70>
    eeca:	adds	r4, #10
    eecc:	movs	r7, #9
    eece:	cmp	r6, r7
    eed0:	ble.n	eeea <__s2b+0x6a>
    eed2:	subs	r2, r6, r7
    eed4:	adds	r6, r4, r2
    eed6:	ldrb.w	r3, [r4], #1
    eeda:	movs	r2, #10
    eedc:	subs	r3, #48	; 0x30
    eede:	mov	r0, r5
    eee0:	bl	eddc <__multadd>
    eee4:	cmp	r6, r4
    eee6:	mov	r1, r0
    eee8:	bne.n	eed6 <__s2b+0x56>
    eeea:	mov	r0, r1
    eeec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eef0:	add.w	r9, r4, #9
    eef4:	mov	r8, r9
    eef6:	add	r4, r7
    eef8:	ldrb.w	r3, [r8], #1
    eefc:	movs	r2, #10
    eefe:	subs	r3, #48	; 0x30
    ef00:	mov	r0, r5
    ef02:	bl	eddc <__multadd>
    ef06:	cmp	r8, r4
    ef08:	mov	r1, r0
    ef0a:	bne.n	eef8 <__s2b+0x78>
    ef0c:	sub.w	r4, r7, #8
    ef10:	add	r4, r9
    ef12:	b.n	eece <__s2b+0x4e>
    ef14:	movs	r1, #0
    ef16:	b.n	eeb2 <__s2b+0x32>
    ef18:	mov	r2, r1
    ef1a:	ldr	r3, [pc, #12]	; (ef28 <__s2b+0xa8>)
    ef1c:	ldr	r0, [pc, #12]	; (ef2c <__s2b+0xac>)
    ef1e:	movs	r1, #211	; 0xd3
    ef20:	bl	13000 <__assert_func>
    ef24:	.word	0x38e38e39
    ef28:	.word	0x20000624
    ef2c:	.word	0x2000079c

0000ef30 <__hi0bits>:
    ef30:	lsrs	r3, r0, #16
    ef32:	lsls	r3, r3, #16
    ef34:	cbnz	r3, ef6c <__hi0bits+0x3c>
    ef36:	lsls	r0, r0, #16
    ef38:	movs	r3, #16
    ef3a:	tst.w	r0, #4278190080	; 0xff000000
    ef3e:	itt	eq
    ef40:	lsleq	r0, r0, #8
    ef42:	addeq	r3, #8
    ef44:	tst.w	r0, #4026531840	; 0xf0000000
    ef48:	itt	eq
    ef4a:	lsleq	r0, r0, #4
    ef4c:	addeq	r3, #4
    ef4e:	tst.w	r0, #3221225472	; 0xc0000000
    ef52:	itt	eq
    ef54:	lsleq	r0, r0, #2
    ef56:	addeq	r3, #2
    ef58:	cmp	r0, #0
    ef5a:	blt.n	ef68 <__hi0bits+0x38>
    ef5c:	tst.w	r0, #1073741824	; 0x40000000
    ef60:	add.w	r3, r3, #1
    ef64:	it	eq
    ef66:	moveq	r3, #32
    ef68:	mov	r0, r3
    ef6a:	bx	lr
    ef6c:	movs	r3, #0
    ef6e:	b.n	ef3a <__hi0bits+0xa>

0000ef70 <__lo0bits>:
    ef70:	ldr	r3, [r0, #0]
    ef72:	ands.w	r2, r3, #7
    ef76:	beq.n	ef8a <__lo0bits+0x1a>
    ef78:	lsls	r1, r3, #31
    ef7a:	bmi.n	efbc <__lo0bits+0x4c>
    ef7c:	lsls	r2, r3, #30
    ef7e:	bpl.n	efc6 <__lo0bits+0x56>
    ef80:	lsrs	r3, r3, #1
    ef82:	str	r3, [r0, #0]
    ef84:	movs	r2, #1
    ef86:	mov	r0, r2
    ef88:	bx	lr
    ef8a:	uxth	r1, r3
    ef8c:	cbnz	r1, ef92 <__lo0bits+0x22>
    ef8e:	lsrs	r3, r3, #16
    ef90:	movs	r2, #16
    ef92:	uxtb	r1, r3
    ef94:	cbnz	r1, ef9a <__lo0bits+0x2a>
    ef96:	adds	r2, #8
    ef98:	lsrs	r3, r3, #8
    ef9a:	lsls	r1, r3, #28
    ef9c:	itt	eq
    ef9e:	lsreq	r3, r3, #4
    efa0:	addeq	r2, #4
    efa2:	lsls	r1, r3, #30
    efa4:	itt	eq
    efa6:	lsreq	r3, r3, #2
    efa8:	addeq	r2, #2
    efaa:	lsls	r1, r3, #31
    efac:	bmi.n	efb6 <__lo0bits+0x46>
    efae:	lsrs	r3, r3, #1
    efb0:	add.w	r2, r2, #1
    efb4:	beq.n	efc2 <__lo0bits+0x52>
    efb6:	str	r3, [r0, #0]
    efb8:	mov	r0, r2
    efba:	bx	lr
    efbc:	movs	r2, #0
    efbe:	mov	r0, r2
    efc0:	bx	lr
    efc2:	movs	r2, #32
    efc4:	b.n	ef86 <__lo0bits+0x16>
    efc6:	lsrs	r3, r3, #2
    efc8:	movs	r2, #2
    efca:	str	r3, [r0, #0]
    efcc:	mov	r0, r2
    efce:	bx	lr

0000efd0 <__i2b>:
    efd0:	push	{r3, r4, r5, lr}
    efd2:	ldr	r3, [r0, #68]	; 0x44
    efd4:	mov	r4, r0
    efd6:	mov	r5, r1
    efd8:	cbz	r3, efee <__i2b+0x1e>
    efda:	ldr	r0, [r3, #4]
    efdc:	cbz	r0, f00c <__i2b+0x3c>
    efde:	ldr	r2, [r0, #0]
    efe0:	str	r2, [r3, #4]
    efe2:	movs	r2, #0
    efe4:	movs	r3, #1
    efe6:	strd	r3, r5, [r0, #16]
    efea:	str	r2, [r0, #12]
    efec:	pop	{r3, r4, r5, pc}
    efee:	movs	r2, #33	; 0x21
    eff0:	movs	r1, #4
    eff2:	bl	13040 <_calloc_r>
    eff6:	mov	r3, r0
    eff8:	str	r0, [r4, #68]	; 0x44
    effa:	cmp	r0, #0
    effc:	bne.n	efda <__i2b+0xa>
    effe:	ldr	r3, [pc, #36]	; (f024 <__i2b+0x54>)
    f000:	ldr	r0, [pc, #36]	; (f028 <__i2b+0x58>)
    f002:	movs	r2, #0
    f004:	movw	r1, #325	; 0x145
    f008:	bl	13000 <__assert_func>
    f00c:	movs	r2, #28
    f00e:	movs	r1, #1
    f010:	mov	r0, r4
    f012:	bl	13040 <_calloc_r>
    f016:	cmp	r0, #0
    f018:	beq.n	effe <__i2b+0x2e>
    f01a:	movs	r2, #1
    f01c:	movs	r3, #2
    f01e:	strd	r2, r3, [r0, #4]
    f022:	b.n	efe2 <__i2b+0x12>
    f024:	.word	0x20000624
    f028:	.word	0x2000079c

0000f02c <__multiply>:
    f02c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f030:	ldr	r6, [r1, #16]
    f032:	ldr	r5, [r2, #16]
    f034:	cmp	r6, r5
    f036:	sub	sp, #20
    f038:	mov	r8, r1
    f03a:	mov	r4, r2
    f03c:	blt.n	f04a <__multiply+0x1e>
    f03e:	mov	r2, r5
    f040:	mov	r3, r4
    f042:	mov	r5, r6
    f044:	mov	r4, r1
    f046:	mov	r6, r2
    f048:	mov	r8, r3
    f04a:	ldr	r3, [r4, #8]
    f04c:	ldr	r1, [r4, #4]
    f04e:	adds	r7, r5, r6
    f050:	cmp	r3, r7
    f052:	it	lt
    f054:	addlt	r1, #1
    f056:	bl	ed7c <_Balloc>
    f05a:	str	r0, [sp, #4]
    f05c:	cmp	r0, #0
    f05e:	beq.w	f170 <__multiply+0x144>
    f062:	ldr	r3, [sp, #4]
    f064:	add.w	r9, r3, #20
    f068:	add.w	sl, r9, r7, lsl #2
    f06c:	cmp	r9, sl
    f06e:	bcs.n	f07c <__multiply+0x50>
    f070:	mov	r3, r9
    f072:	movs	r2, #0
    f074:	str.w	r2, [r3], #4
    f078:	cmp	sl, r3
    f07a:	bhi.n	f074 <__multiply+0x48>
    f07c:	add.w	r8, r8, #20
    f080:	add.w	fp, r8, r6, lsl #2
    f084:	add.w	r3, r4, #20
    f088:	cmp	r8, fp
    f08a:	mov	r2, r3
    f08c:	add.w	r5, r3, r5, lsl #2
    f090:	bcs.n	f152 <__multiply+0x126>
    f092:	subs	r3, r5, r4
    f094:	subs	r3, #21
    f096:	bic.w	r3, r3, #3
    f09a:	adds	r3, #4
    f09c:	adds	r4, #21
    f09e:	cmp	r5, r4
    f0a0:	it	cc
    f0a2:	movcc	r3, #4
    f0a4:	strd	sl, r7, [sp, #8]
    f0a8:	mov	ip, r5
    f0aa:	mov	r7, r3
    f0ac:	mov	sl, r2
    f0ae:	b.n	f0bc <__multiply+0x90>
    f0b0:	lsrs	r1, r1, #16
    f0b2:	bne.n	f108 <__multiply+0xdc>
    f0b4:	cmp	fp, r8
    f0b6:	add.w	r9, r9, #4
    f0ba:	bls.n	f14e <__multiply+0x122>
    f0bc:	ldr.w	r1, [r8], #4
    f0c0:	uxth	r5, r1
    f0c2:	cmp	r5, #0
    f0c4:	beq.n	f0b0 <__multiply+0x84>
    f0c6:	mov	r6, sl
    f0c8:	mov	r4, r9
    f0ca:	movs	r3, #0
    f0cc:	ldr.w	r1, [r6], #4
    f0d0:	ldr	r2, [r4, #0]
    f0d2:	uxth.w	lr, r1
    f0d6:	uxth	r0, r2
    f0d8:	lsrs	r1, r1, #16
    f0da:	mla	r0, r5, lr, r0
    f0de:	lsrs	r2, r2, #16
    f0e0:	add	r3, r0
    f0e2:	mla	r2, r5, r1, r2
    f0e6:	add.w	r2, r2, r3, lsr #16
    f0ea:	uxth	r3, r3
    f0ec:	orr.w	r3, r3, r2, lsl #16
    f0f0:	cmp	ip, r6
    f0f2:	str.w	r3, [r4], #4
    f0f6:	mov.w	r3, r2, lsr #16
    f0fa:	bhi.n	f0cc <__multiply+0xa0>
    f0fc:	str.w	r3, [r9, r7]
    f100:	ldr.w	r1, [r8, #-4]
    f104:	lsrs	r1, r1, #16
    f106:	beq.n	f0b4 <__multiply+0x88>
    f108:	ldr.w	r3, [r9]
    f10c:	mov	r0, sl
    f10e:	mov	r2, r3
    f110:	mov	r4, r9
    f112:	movs	r6, #0
    f114:	ldrh	r5, [r0, #0]
    f116:	lsrs	r2, r2, #16
    f118:	mla	r2, r1, r5, r2
    f11c:	add	r6, r2
    f11e:	uxth	r3, r3
    f120:	orr.w	r3, r3, r6, lsl #16
    f124:	str.w	r3, [r4], #4
    f128:	ldr.w	r5, [r0], #4
    f12c:	ldr	r2, [r4, #0]
    f12e:	lsrs	r5, r5, #16
    f130:	uxth	r3, r2
    f132:	mla	r3, r1, r5, r3
    f136:	add.w	r3, r3, r6, lsr #16
    f13a:	cmp	ip, r0
    f13c:	mov.w	r6, r3, lsr #16
    f140:	bhi.n	f114 <__multiply+0xe8>
    f142:	cmp	fp, r8
    f144:	str.w	r3, [r9, r7]
    f148:	add.w	r9, r9, #4
    f14c:	bhi.n	f0bc <__multiply+0x90>
    f14e:	ldrd	sl, r7, [sp, #8]
    f152:	cmp	r7, #0
    f154:	bgt.n	f15c <__multiply+0x130>
    f156:	b.n	f164 <__multiply+0x138>
    f158:	subs	r7, #1
    f15a:	beq.n	f164 <__multiply+0x138>
    f15c:	ldr.w	r3, [sl, #-4]!
    f160:	cmp	r3, #0
    f162:	beq.n	f158 <__multiply+0x12c>
    f164:	ldr	r3, [sp, #4]
    f166:	mov	r0, r3
    f168:	str	r7, [r3, #16]
    f16a:	add	sp, #20
    f16c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f170:	ldr	r3, [pc, #12]	; (f180 <__multiply+0x154>)
    f172:	ldr	r0, [pc, #16]	; (f184 <__multiply+0x158>)
    f174:	ldr	r2, [sp, #4]
    f176:	mov.w	r1, #354	; 0x162
    f17a:	bl	13000 <__assert_func>
    f17e:	nop
    f180:	.word	0x20000624
    f184:	.word	0x2000079c

0000f188 <__pow5mult>:
    f188:	ands.w	r3, r2, #3
    f18c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f190:	mov	r4, r2
    f192:	mov	r6, r0
    f194:	bne.n	f1fc <__pow5mult+0x74>
    f196:	mov	r5, r1
    f198:	asrs	r4, r4, #2
    f19a:	beq.n	f1de <__pow5mult+0x56>
    f19c:	ldr.w	r8, [r6, #64]	; 0x40
    f1a0:	cmp.w	r8, #0
    f1a4:	beq.n	f20e <__pow5mult+0x86>
    f1a6:	lsls	r3, r4, #31
    f1a8:	mov.w	r7, #0
    f1ac:	bmi.n	f1be <__pow5mult+0x36>
    f1ae:	asrs	r4, r4, #1
    f1b0:	beq.n	f1de <__pow5mult+0x56>
    f1b2:	ldr.w	r0, [r8]
    f1b6:	cbz	r0, f1e4 <__pow5mult+0x5c>
    f1b8:	mov	r8, r0
    f1ba:	lsls	r3, r4, #31
    f1bc:	bpl.n	f1ae <__pow5mult+0x26>
    f1be:	mov	r2, r8
    f1c0:	mov	r1, r5
    f1c2:	mov	r0, r6
    f1c4:	bl	f02c <__multiply>
    f1c8:	cbz	r5, f1f8 <__pow5mult+0x70>
    f1ca:	ldr	r1, [r5, #4]
    f1cc:	ldr	r3, [r6, #68]	; 0x44
    f1ce:	asrs	r4, r4, #1
    f1d0:	ldr.w	r2, [r3, r1, lsl #2]
    f1d4:	str	r2, [r5, #0]
    f1d6:	str.w	r5, [r3, r1, lsl #2]
    f1da:	mov	r5, r0
    f1dc:	bne.n	f1b2 <__pow5mult+0x2a>
    f1de:	mov	r0, r5
    f1e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1e4:	mov	r2, r8
    f1e6:	mov	r1, r8
    f1e8:	mov	r0, r6
    f1ea:	bl	f02c <__multiply>
    f1ee:	str.w	r0, [r8]
    f1f2:	str	r7, [r0, #0]
    f1f4:	mov	r8, r0
    f1f6:	b.n	f1ba <__pow5mult+0x32>
    f1f8:	mov	r5, r0
    f1fa:	b.n	f1ae <__pow5mult+0x26>
    f1fc:	subs	r3, #1
    f1fe:	ldr	r2, [pc, #60]	; (f23c <__pow5mult+0xb4>)
    f200:	ldr.w	r2, [r2, r3, lsl #2]
    f204:	movs	r3, #0
    f206:	bl	eddc <__multadd>
    f20a:	mov	r5, r0
    f20c:	b.n	f198 <__pow5mult+0x10>
    f20e:	movs	r1, #1
    f210:	mov	r0, r6
    f212:	bl	ed7c <_Balloc>
    f216:	mov	r8, r0
    f218:	cbz	r0, f22c <__pow5mult+0xa4>
    f21a:	movs	r3, #1
    f21c:	movw	r2, #625	; 0x271
    f220:	strd	r3, r2, [r0, #16]
    f224:	movs	r3, #0
    f226:	str	r0, [r6, #64]	; 0x40
    f228:	str	r3, [r0, #0]
    f22a:	b.n	f1a6 <__pow5mult+0x1e>
    f22c:	ldr	r3, [pc, #16]	; (f240 <__pow5mult+0xb8>)
    f22e:	ldr	r0, [pc, #20]	; (f244 <__pow5mult+0xbc>)
    f230:	mov	r2, r8
    f232:	movw	r1, #325	; 0x145
    f236:	bl	13000 <__assert_func>
    f23a:	nop
    f23c:	.word	0x200077b0
    f240:	.word	0x20000624
    f244:	.word	0x2000079c

0000f248 <__lshift>:
    f248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f24c:	mov	r5, r1
    f24e:	mov	r4, r2
    f250:	ldr	r7, [r5, #16]
    f252:	ldr	r3, [r5, #8]
    f254:	ldr	r1, [r1, #4]
    f256:	add.w	r7, r7, r2, asr #5
    f25a:	adds	r6, r7, #1
    f25c:	cmp	r6, r3
    f25e:	mov	r8, r0
    f260:	mov.w	r9, r2, asr #5
    f264:	ble.n	f270 <__lshift+0x28>
    f266:	lsls	r3, r3, #1
    f268:	cmp	r6, r3
    f26a:	add.w	r1, r1, #1
    f26e:	bgt.n	f266 <__lshift+0x1e>
    f270:	mov	r0, r8
    f272:	bl	ed7c <_Balloc>
    f276:	mov	ip, r0
    f278:	cmp	r0, #0
    f27a:	beq.n	f322 <__lshift+0xda>
    f27c:	cmp.w	r9, #0
    f280:	add.w	r2, r0, #20
    f284:	ble.n	f2a4 <__lshift+0x5c>
    f286:	add.w	r1, r9, #5
    f28a:	mov.w	lr, r1, lsl #2
    f28e:	mov	r3, r2
    f290:	add.w	r1, r0, r1, lsl #2
    f294:	movs	r0, #0
    f296:	str.w	r0, [r3], #4
    f29a:	cmp	r3, r1
    f29c:	bne.n	f296 <__lshift+0x4e>
    f29e:	sub.w	r3, lr, #20
    f2a2:	add	r2, r3
    f2a4:	ldr	r1, [r5, #16]
    f2a6:	add.w	r3, r5, #20
    f2aa:	ands.w	lr, r4, #31
    f2ae:	add.w	r1, r3, r1, lsl #2
    f2b2:	beq.n	f312 <__lshift+0xca>
    f2b4:	rsb	r9, lr, #32
    f2b8:	mov	r0, r2
    f2ba:	mov.w	sl, #0
    f2be:	ldr	r4, [r3, #0]
    f2c0:	lsl.w	r4, r4, lr
    f2c4:	orr.w	r4, r4, sl
    f2c8:	str.w	r4, [r0], #4
    f2cc:	ldr.w	r4, [r3], #4
    f2d0:	cmp	r1, r3
    f2d2:	lsr.w	sl, r4, r9
    f2d6:	bhi.n	f2be <__lshift+0x76>
    f2d8:	subs	r3, r1, r5
    f2da:	subs	r3, #21
    f2dc:	bic.w	r3, r3, #3
    f2e0:	adds	r3, #4
    f2e2:	add.w	r0, r5, #21
    f2e6:	cmp	r1, r0
    f2e8:	it	cc
    f2ea:	movcc	r3, #4
    f2ec:	cmp.w	sl, #0
    f2f0:	it	ne
    f2f2:	movne	r7, r6
    f2f4:	str.w	sl, [r2, r3]
    f2f8:	ldr.w	r3, [r8, #68]	; 0x44
    f2fc:	ldr	r2, [r5, #4]
    f2fe:	str.w	r7, [ip, #16]
    f302:	ldr.w	r1, [r3, r2, lsl #2]
    f306:	str	r1, [r5, #0]
    f308:	mov	r0, ip
    f30a:	str.w	r5, [r3, r2, lsl #2]
    f30e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f312:	subs	r2, #4
    f314:	ldr.w	r0, [r3], #4
    f318:	str.w	r0, [r2, #4]!
    f31c:	cmp	r1, r3
    f31e:	bhi.n	f314 <__lshift+0xcc>
    f320:	b.n	f2f8 <__lshift+0xb0>
    f322:	ldr	r3, [pc, #12]	; (f330 <__lshift+0xe8>)
    f324:	ldr	r0, [pc, #12]	; (f334 <__lshift+0xec>)
    f326:	mov	r2, ip
    f328:	mov.w	r1, #478	; 0x1de
    f32c:	bl	13000 <__assert_func>
    f330:	.word	0x20000624
    f334:	.word	0x2000079c

0000f338 <__mcmp>:
    f338:	ldr	r3, [r1, #16]
    f33a:	mov	ip, r0
    f33c:	ldr	r0, [r0, #16]
    f33e:	subs	r0, r0, r3
    f340:	bne.n	f370 <__mcmp+0x38>
    f342:	add.w	ip, ip, #20
    f346:	adds	r1, #20
    f348:	add.w	r2, ip, r3, lsl #2
    f34c:	push	{r4}
    f34e:	add.w	r3, r1, r3, lsl #2
    f352:	b.n	f358 <__mcmp+0x20>
    f354:	cmp	ip, r2
    f356:	bcs.n	f36a <__mcmp+0x32>
    f358:	ldr.w	r4, [r2, #-4]!
    f35c:	ldr.w	r1, [r3, #-4]!
    f360:	cmp	r4, r1
    f362:	beq.n	f354 <__mcmp+0x1c>
    f364:	bcs.n	f372 <__mcmp+0x3a>
    f366:	mov.w	r0, #4294967295
    f36a:	ldr.w	r4, [sp], #4
    f36e:	bx	lr
    f370:	bx	lr
    f372:	movs	r0, #1
    f374:	ldr.w	r4, [sp], #4
    f378:	bx	lr
    f37a:	nop

0000f37c <__mdiff>:
    f37c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f380:	ldr	r7, [r1, #16]
    f382:	ldr	r3, [r2, #16]
    f384:	subs	r7, r7, r3
    f386:	cmp	r7, #0
    f388:	mov	r6, r1
    f38a:	mov	r8, r2
    f38c:	bne.n	f48e <__mdiff+0x112>
    f38e:	add.w	r5, r1, #20
    f392:	adds	r2, #20
    f394:	add.w	r2, r2, r3, lsl #2
    f398:	add.w	r3, r5, r3, lsl #2
    f39c:	b.n	f3a2 <__mdiff+0x26>
    f39e:	cmp	r5, r3
    f3a0:	bcs.n	f494 <__mdiff+0x118>
    f3a2:	ldr.w	r1, [r3, #-4]!
    f3a6:	ldr.w	r4, [r2, #-4]!
    f3aa:	cmp	r1, r4
    f3ac:	beq.n	f39e <__mdiff+0x22>
    f3ae:	bcc.n	f484 <__mdiff+0x108>
    f3b0:	ldr	r1, [r6, #4]
    f3b2:	bl	ed7c <_Balloc>
    f3b6:	mov	r9, r0
    f3b8:	cmp	r0, #0
    f3ba:	beq.n	f4ac <__mdiff+0x130>
    f3bc:	ldr	r5, [r6, #16]
    f3be:	ldr.w	r2, [r8, #16]
    f3c2:	str	r7, [r0, #12]
    f3c4:	add.w	lr, r8, #20
    f3c8:	add.w	r0, r6, #20
    f3cc:	add.w	sl, r9, #20
    f3d0:	add.w	r1, r6, #16
    f3d4:	add.w	r2, lr, r2, lsl #2
    f3d8:	add.w	r7, r0, r5, lsl #2
    f3dc:	mov	r6, sl
    f3de:	mov.w	ip, #0
    f3e2:	ldr.w	r4, [lr], #4
    f3e6:	ldr.w	fp, [r1, #4]!
    f3ea:	uxth	r3, r4
    f3ec:	uxtah	ip, ip, fp
    f3f0:	sub.w	r3, ip, r3
    f3f4:	mov.w	ip, r4, lsr #16
    f3f8:	rsb	ip, ip, fp, lsr #16
    f3fc:	add.w	ip, ip, r3, asr #16
    f400:	uxth	r3, r3
    f402:	orr.w	r3, r3, ip, lsl #16
    f406:	cmp	r2, lr
    f408:	str.w	r3, [r6], #4
    f40c:	mov.w	ip, ip, asr #16
    f410:	bhi.n	f3e2 <__mdiff+0x66>
    f412:	sub.w	r1, r2, r8
    f416:	subs	r1, #21
    f418:	add.w	r8, r8, #21
    f41c:	cmp	r2, r8
    f41e:	bic.w	r4, r1, #3
    f422:	add.w	r4, r4, #4
    f426:	it	cc
    f428:	movcc	r4, #4
    f42a:	add	r0, r4
    f42c:	bic.w	r2, r1, #3
    f430:	it	cc
    f432:	movcc	r2, #0
    f434:	cmp	r7, r0
    f436:	add	r2, sl
    f438:	add	r4, sl
    f43a:	bls.n	f46e <__mdiff+0xf2>
    f43c:	mov	r6, r4
    f43e:	mov	r1, r0
    f440:	ldr.w	r3, [r1], #4
    f444:	uxtah	ip, ip, r3
    f448:	mov.w	r2, ip, asr #16
    f44c:	add.w	r2, r2, r3, lsr #16
    f450:	uxth.w	ip, ip
    f454:	orr.w	r3, ip, r2, lsl #16
    f458:	cmp	r7, r1
    f45a:	str.w	r3, [r6], #4
    f45e:	mov.w	ip, r2, asr #16
    f462:	bhi.n	f440 <__mdiff+0xc4>
    f464:	subs	r7, #1
    f466:	subs	r7, r7, r0
    f468:	bic.w	r7, r7, #3
    f46c:	adds	r2, r4, r7
    f46e:	cbnz	r3, f47a <__mdiff+0xfe>
    f470:	ldr.w	r3, [r2, #-4]!
    f474:	subs	r5, #1
    f476:	cmp	r3, #0
    f478:	beq.n	f470 <__mdiff+0xf4>
    f47a:	str.w	r5, [r9, #16]
    f47e:	mov	r0, r9
    f480:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f484:	mov	r3, r6
    f486:	movs	r7, #1
    f488:	mov	r6, r8
    f48a:	mov	r8, r3
    f48c:	b.n	f3b0 <__mdiff+0x34>
    f48e:	blt.n	f484 <__mdiff+0x108>
    f490:	movs	r7, #0
    f492:	b.n	f3b0 <__mdiff+0x34>
    f494:	movs	r1, #0
    f496:	bl	ed7c <_Balloc>
    f49a:	mov	r9, r0
    f49c:	cbz	r0, f4ba <__mdiff+0x13e>
    f49e:	movs	r2, #1
    f4a0:	movs	r3, #0
    f4a2:	strd	r2, r3, [r9, #16]
    f4a6:	mov	r0, r9
    f4a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4ac:	ldr	r3, [pc, #24]	; (f4c8 <__mdiff+0x14c>)
    f4ae:	ldr	r0, [pc, #28]	; (f4cc <__mdiff+0x150>)
    f4b0:	mov	r2, r9
    f4b2:	movw	r1, #581	; 0x245
    f4b6:	bl	13000 <__assert_func>
    f4ba:	ldr	r3, [pc, #12]	; (f4c8 <__mdiff+0x14c>)
    f4bc:	ldr	r0, [pc, #12]	; (f4cc <__mdiff+0x150>)
    f4be:	mov	r2, r9
    f4c0:	movw	r1, #567	; 0x237
    f4c4:	bl	13000 <__assert_func>
    f4c8:	.word	0x20000624
    f4cc:	.word	0x2000079c

0000f4d0 <__ulp>:
    f4d0:	sub	sp, #8
    f4d2:	vstr	d0, [sp]
    f4d6:	ldr	r3, [pc, #88]	; (f530 <__ulp+0x60>)
    f4d8:	ldr	r2, [sp, #4]
    f4da:	ands	r3, r2
    f4dc:	sub.w	r3, r3, #54525952	; 0x3400000
    f4e0:	cmp	r3, #0
    f4e2:	ble.n	f4f2 <__ulp+0x22>
    f4e4:	movs	r2, #0
    f4e6:	mov	r1, r3
    f4e8:	mov	r0, r2
    f4ea:	vmov	d0, r0, r1
    f4ee:	add	sp, #8
    f4f0:	bx	lr
    f4f2:	negs	r3, r3
    f4f4:	cmp.w	r3, #20971520	; 0x1400000
    f4f8:	mov.w	r2, r3, asr #20
    f4fc:	bge.n	f512 <__ulp+0x42>
    f4fe:	mov.w	r3, #524288	; 0x80000
    f502:	asrs	r3, r2
    f504:	movs	r2, #0
    f506:	mov	r1, r3
    f508:	mov	r0, r2
    f50a:	vmov	d0, r0, r1
    f50e:	add	sp, #8
    f510:	bx	lr
    f512:	sub.w	r3, r2, #20
    f516:	cmp	r3, #30
    f518:	itte	le
    f51a:	movle.w	r2, #2147483648	; 0x80000000
    f51e:	lsrle	r2, r3
    f520:	movgt	r2, #1
    f522:	movs	r3, #0
    f524:	mov	r1, r3
    f526:	mov	r0, r2
    f528:	vmov	d0, r0, r1
    f52c:	add	sp, #8
    f52e:	bx	lr
    f530:	.word	0x7ff00000

0000f534 <__b2d>:
    f534:	push	{r3, r4, r5, r6, r7, lr}
    f536:	ldr	r4, [r0, #16]
    f538:	add.w	r6, r0, #20
    f53c:	add.w	r4, r6, r4, lsl #2
    f540:	subs	r7, r4, #4
    f542:	ldr.w	r5, [r4, #-4]
    f546:	mov	r0, r5
    f548:	bl	ef30 <__hi0bits>
    f54c:	rsb	r3, r0, #32
    f550:	cmp	r0, #10
    f552:	str	r3, [r1, #0]
    f554:	ble.n	f58e <__b2d+0x5a>
    f556:	cmp	r6, r7
    f558:	bcs.n	f572 <__b2d+0x3e>
    f55a:	subs	r0, #11
    f55c:	ldr.w	r1, [r4, #-8]
    f560:	bne.n	f5c0 <__b2d+0x8c>
    f562:	orr.w	r3, r5, #1069547520	; 0x3fc00000
    f566:	orr.w	r3, r3, #3145728	; 0x300000
    f56a:	mov	r2, r1
    f56c:	vmov	d0, r2, r3
    f570:	pop	{r3, r4, r5, r6, r7, pc}
    f572:	subs.w	r1, r0, #11
    f576:	beq.n	f562 <__b2d+0x2e>
    f578:	lsl.w	r1, r5, r1
    f57c:	orr.w	r3, r1, #1069547520	; 0x3fc00000
    f580:	movs	r1, #0
    f582:	orr.w	r3, r3, #3145728	; 0x300000
    f586:	mov	r2, r1
    f588:	vmov	d0, r2, r3
    f58c:	pop	{r3, r4, r5, r6, r7, pc}
    f58e:	rsb	ip, r0, #11
    f592:	lsr.w	r1, r5, ip
    f596:	cmp	r6, r7
    f598:	orr.w	r3, r1, #1069547520	; 0x3fc00000
    f59c:	it	cc
    f59e:	ldrcc.w	r1, [r4, #-8]
    f5a2:	add.w	r0, r0, #21
    f5a6:	ite	cc
    f5a8:	lsrcc.w	r1, r1, ip
    f5ac:	movcs	r1, #0
    f5ae:	lsl.w	r0, r5, r0
    f5b2:	orrs	r1, r0
    f5b4:	orr.w	r3, r3, #3145728	; 0x300000
    f5b8:	mov	r2, r1
    f5ba:	vmov	d0, r2, r3
    f5be:	pop	{r3, r4, r5, r6, r7, pc}
    f5c0:	rsb	ip, r0, #32
    f5c4:	lsls	r5, r0
    f5c6:	lsr.w	r3, r1, ip
    f5ca:	orr.w	r7, r5, r3
    f5ce:	sub.w	r5, r4, #8
    f5d2:	cmp	r6, r5
    f5d4:	lsl.w	r1, r1, r0
    f5d8:	itt	cc
    f5da:	ldrcc.w	r0, [r4, #-12]
    f5de:	lsrcc.w	r0, r0, ip
    f5e2:	orr.w	r3, r7, #1069547520	; 0x3fc00000
    f5e6:	it	cc
    f5e8:	orrcc	r1, r0
    f5ea:	orr.w	r3, r3, #3145728	; 0x300000
    f5ee:	mov	r2, r1
    f5f0:	vmov	d0, r2, r3
    f5f4:	pop	{r3, r4, r5, r6, r7, pc}
    f5f6:	nop

0000f5f8 <__d2b>:
    f5f8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f5fc:	mov	r8, r1
    f5fe:	sub	sp, #12
    f600:	movs	r1, #1
    f602:	vmov	r6, r7, d0
    f606:	mov	r5, r2
    f608:	bl	ed7c <_Balloc>
    f60c:	mov	r4, r0
    f60e:	cmp	r0, #0
    f610:	beq.n	f6b6 <__d2b+0xbe>
    f612:	ubfx	r9, r7, #20, #11
    f616:	ubfx	r3, r7, #0, #20
    f61a:	cmp.w	r9, #0
    f61e:	beq.n	f624 <__d2b+0x2c>
    f620:	orr.w	r3, r3, #1048576	; 0x100000
    f624:	cmp	r6, #0
    f626:	str	r3, [sp, #4]
    f628:	bne.n	f65c <__d2b+0x64>
    f62a:	add	r0, sp, #4
    f62c:	bl	ef70 <__lo0bits>
    f630:	ldr	r2, [sp, #4]
    f632:	str	r2, [r4, #20]
    f634:	movs	r2, #1
    f636:	add.w	r3, r0, #32
    f63a:	str	r2, [r4, #16]
    f63c:	cmp.w	r9, #0
    f640:	beq.n	f68e <__d2b+0x96>
    f642:	subw	r9, r9, #1075	; 0x433
    f646:	add.w	r2, r9, r3
    f64a:	mov	r0, r4
    f64c:	rsb	r3, r3, #53	; 0x35
    f650:	str.w	r2, [r8]
    f654:	str	r3, [r5, #0]
    f656:	add	sp, #12
    f658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f65c:	mov	r0, sp
    f65e:	str	r6, [sp, #0]
    f660:	bl	ef70 <__lo0bits>
    f664:	mov	r3, r0
    f666:	cbz	r0, f6ae <__d2b+0xb6>
    f668:	ldrd	r0, r2, [sp]
    f66c:	rsb	r1, r3, #32
    f670:	lsl.w	r1, r2, r1
    f674:	orrs	r1, r0
    f676:	lsrs	r2, r3
    f678:	str	r1, [r4, #20]
    f67a:	str	r2, [sp, #4]
    f67c:	cmp	r2, #0
    f67e:	str	r2, [r4, #24]
    f680:	ite	ne
    f682:	movne	r2, #2
    f684:	moveq	r2, #1
    f686:	str	r2, [r4, #16]
    f688:	cmp.w	r9, #0
    f68c:	bne.n	f642 <__d2b+0x4a>
    f68e:	subw	r3, r3, #1074	; 0x432
    f692:	str.w	r3, [r8]
    f696:	add.w	r3, r4, r2, lsl #2
    f69a:	ldr	r0, [r3, #16]
    f69c:	bl	ef30 <__hi0bits>
    f6a0:	rsb	r3, r0, r2, lsl #5
    f6a4:	mov	r0, r4
    f6a6:	str	r3, [r5, #0]
    f6a8:	add	sp, #12
    f6aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f6ae:	ldr	r2, [sp, #0]
    f6b0:	str	r2, [r4, #20]
    f6b2:	ldr	r2, [sp, #4]
    f6b4:	b.n	f67c <__d2b+0x84>
    f6b6:	ldr	r3, [pc, #12]	; (f6c4 <__d2b+0xcc>)
    f6b8:	ldr	r0, [pc, #12]	; (f6c8 <__d2b+0xd0>)
    f6ba:	mov	r2, r4
    f6bc:	movw	r1, #783	; 0x30f
    f6c0:	bl	13000 <__assert_func>
    f6c4:	.word	0x20000624
    f6c8:	.word	0x2000079c

0000f6cc <__ratio>:
    f6cc:	push	{r4, r5, r6, r7, lr}
    f6ce:	sub	sp, #12
    f6d0:	mov	r6, r1
    f6d2:	mov	r1, sp
    f6d4:	mov	r7, r0
    f6d6:	bl	f534 <__b2d>
    f6da:	add	r1, sp, #4
    f6dc:	mov	r0, r6
    f6de:	vmov	r4, r5, d0
    f6e2:	vmov.f64	d7, d0
    f6e6:	bl	f534 <__b2d>
    f6ea:	ldr	r3, [r6, #16]
    f6ec:	ldr	r2, [r7, #16]
    f6ee:	subs	r2, r2, r3
    f6f0:	ldrd	r3, r1, [sp]
    f6f4:	subs	r3, r3, r1
    f6f6:	add.w	r3, r3, r2, lsl #5
    f6fa:	cmp	r3, #0
    f6fc:	ble.n	f712 <__ratio+0x46>
    f6fe:	vmov	r2, s15
    f702:	add.w	r5, r2, r3, lsl #20
    f706:	vmov	d7, r4, r5
    f70a:	vdiv.f64	d0, d7, d0
    f70e:	add	sp, #12
    f710:	pop	{r4, r5, r6, r7, pc}
    f712:	vmov	r2, s1
    f716:	vmov	r0, r1, d0
    f71a:	rsb	r3, r3, r3, lsl #12
    f71e:	add.w	r1, r2, r3, lsl #20
    f722:	vmov	d0, r0, r1
    f726:	vdiv.f64	d0, d7, d0
    f72a:	add	sp, #12
    f72c:	pop	{r4, r5, r6, r7, pc}
    f72e:	nop

0000f730 <__copybits>:
    f730:	subs	r1, #1
    f732:	asrs	r1, r1, #5
    f734:	add.w	ip, r1, #1
    f738:	ldr	r1, [r2, #16]
    f73a:	add.w	r3, r2, #20
    f73e:	add.w	r1, r3, r1, lsl #2
    f742:	cmp	r3, r1
    f744:	add.w	ip, r0, ip, lsl #2
    f748:	bcs.n	f77a <__copybits+0x4a>
    f74a:	push	{r4, lr}
    f74c:	sub.w	lr, r0, #4
    f750:	ldr.w	r4, [r3], #4
    f754:	str.w	r4, [lr, #4]!
    f758:	cmp	r1, r3
    f75a:	bhi.n	f750 <__copybits+0x20>
    f75c:	subs	r2, r1, r2
    f75e:	sub.w	r3, r2, #21
    f762:	bic.w	r3, r3, #3
    f766:	adds	r3, #4
    f768:	add	r0, r3
    f76a:	cmp	ip, r0
    f76c:	bls.n	f778 <__copybits+0x48>
    f76e:	movs	r3, #0
    f770:	str.w	r3, [r0], #4
    f774:	cmp	ip, r0
    f776:	bhi.n	f770 <__copybits+0x40>
    f778:	pop	{r4, pc}
    f77a:	cmp	ip, r0
    f77c:	bls.n	f78a <__copybits+0x5a>
    f77e:	movs	r3, #0
    f780:	str.w	r3, [r0], #4
    f784:	cmp	ip, r0
    f786:	bhi.n	f780 <__copybits+0x50>
    f788:	bx	lr
    f78a:	bx	lr

0000f78c <__any_on>:
    f78c:	ldr	r3, [r0, #16]
    f78e:	asrs	r2, r1, #5
    f790:	cmp	r3, r2
    f792:	add.w	r0, r0, #20
    f796:	bge.n	f7ac <__any_on+0x20>
    f798:	add.w	r3, r0, r3, lsl #2
    f79c:	b.n	f7a4 <__any_on+0x18>
    f79e:	ldr.w	r2, [r3, #-4]!
    f7a2:	cbnz	r2, f7d6 <__any_on+0x4a>
    f7a4:	cmp	r3, r0
    f7a6:	bhi.n	f79e <__any_on+0x12>
    f7a8:	movs	r0, #0
    f7aa:	bx	lr
    f7ac:	ble.n	f7d0 <__any_on+0x44>
    f7ae:	ands.w	r1, r1, #31
    f7b2:	beq.n	f7d0 <__any_on+0x44>
    f7b4:	push	{r4}
    f7b6:	ldr.w	r4, [r0, r2, lsl #2]
    f7ba:	add.w	r3, r0, r2, lsl #2
    f7be:	lsr.w	r2, r4, r1
    f7c2:	lsls	r2, r1
    f7c4:	cmp	r4, r2
    f7c6:	beq.n	f7e2 <__any_on+0x56>
    f7c8:	movs	r0, #1
    f7ca:	ldr.w	r4, [sp], #4
    f7ce:	bx	lr
    f7d0:	add.w	r3, r0, r2, lsl #2
    f7d4:	b.n	f7a4 <__any_on+0x18>
    f7d6:	movs	r0, #1
    f7d8:	bx	lr
    f7da:	ldr.w	r2, [r3, #-4]!
    f7de:	cmp	r2, #0
    f7e0:	bne.n	f7c8 <__any_on+0x3c>
    f7e2:	cmp	r3, r0
    f7e4:	bhi.n	f7da <__any_on+0x4e>
    f7e6:	movs	r0, #0
    f7e8:	ldr.w	r4, [sp], #4
    f7ec:	bx	lr
    f7ee:	nop

0000f7f0 <__ascii_wctomb>:
    f7f0:	cbz	r1, f806 <__ascii_wctomb+0x16>
    f7f2:	cmp	r2, #255	; 0xff
    f7f4:	bhi.n	f7fc <__ascii_wctomb+0xc>
    f7f6:	strb	r2, [r1, #0]
    f7f8:	movs	r0, #1
    f7fa:	bx	lr
    f7fc:	movs	r3, #138	; 0x8a
    f7fe:	str	r3, [r0, #0]
    f800:	mov.w	r0, #4294967295
    f804:	bx	lr
    f806:	mov	r0, r1
    f808:	bx	lr
    f80a:	nop

0000f80c <fcvtbuf>:
    f80c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f810:	mov	r6, r1
    f812:	ldr	r1, [pc, #152]	; (f8ac <fcvtbuf+0xa0>)
    f814:	sub	sp, #28
    f816:	ldr	r7, [r1, #0]
    f818:	mov	r4, r0
    f81a:	mov	r8, r2
    f81c:	mov	r5, r3
    f81e:	cbz	r3, f876 <fcvtbuf+0x6a>
    f820:	add	r2, sp, #20
    f822:	mov	r3, r6
    f824:	str	r2, [sp, #4]
    f826:	movs	r1, #3
    f828:	mov	r2, r4
    f82a:	str.w	r8, [sp]
    f82e:	mov	r0, r7
    f830:	bl	131e0 <_dtoa_r>
    f834:	ldr	r3, [sp, #20]
    f836:	ldr	r2, [r6, #0]
    f838:	cmp	r0, r3
    f83a:	mov	ip, r0
    f83c:	rsb	r2, r2, #0
    f840:	mov	r1, r5
    f842:	bcs.n	f858 <fcvtbuf+0x4c>
    f844:	subs	r0, r2, r0
    f846:	ldrb.w	r3, [ip], #1
    f84a:	strb.w	r3, [r1], #1
    f84e:	ldr	r3, [sp, #20]
    f850:	cmp	r3, ip
    f852:	add.w	r2, r0, ip
    f856:	bhi.n	f846 <fcvtbuf+0x3a>
    f858:	cmp	r4, r2
    f85a:	ble.n	f8a6 <fcvtbuf+0x9a>
    f85c:	subs	r2, r4, r2
    f85e:	add	r2, r1
    f860:	movs	r3, #48	; 0x30
    f862:	strb.w	r3, [r1], #1
    f866:	cmp	r1, r2
    f868:	bne.n	f862 <fcvtbuf+0x56>
    f86a:	movs	r3, #0
    f86c:	strb	r3, [r2, #0]
    f86e:	mov	r0, r5
    f870:	add	sp, #28
    f872:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f876:	ldr	r2, [r7, #72]	; 0x48
    f878:	add.w	r3, r0, #35	; 0x23
    f87c:	cmp	r2, r3
    f87e:	ble.n	f884 <fcvtbuf+0x78>
    f880:	ldr	r5, [r7, #76]	; 0x4c
    f882:	b.n	f820 <fcvtbuf+0x14>
    f884:	add.w	r9, r0, #36	; 0x24
    f888:	ldr	r1, [r7, #76]	; 0x4c
    f88a:	mov	r2, r9
    f88c:	mov	r0, r7
    f88e:	vstr	d0, [sp, #8]
    f892:	bl	c068 <_realloc_r>
    f896:	mov	r5, r0
    f898:	cmp	r0, #0
    f89a:	beq.n	f86e <fcvtbuf+0x62>
    f89c:	strd	r9, r0, [r7, #72]	; 0x48
    f8a0:	vldr	d0, [sp, #8]
    f8a4:	b.n	f820 <fcvtbuf+0x14>
    f8a6:	mov	r2, r1
    f8a8:	b.n	f86a <fcvtbuf+0x5e>
    f8aa:	nop
    f8ac:	.word	0x20008eec

0000f8b0 <_svfprintf_r>:
    f8b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f8b4:	vpush	{d8-d11}
    f8b8:	sub	sp, #324	; 0x144
    f8ba:	mov	r4, r1
    f8bc:	vmov	s22, r1
    f8c0:	mov	r8, r2
    f8c2:	str	r3, [sp, #32]
    f8c4:	mov	fp, r0
    f8c6:	bl	12f7c <_localeconv_r>
    f8ca:	ldr	r3, [r0, #0]
    f8cc:	str	r3, [sp, #72]	; 0x48
    f8ce:	mov	r0, r3
    f8d0:	bl	e100 <strlen>
    f8d4:	add	r7, sp, #128	; 0x80
    f8d6:	str	r0, [sp, #64]	; 0x40
    f8d8:	movs	r2, #8
    f8da:	movs	r1, #0
    f8dc:	mov	r0, r7
    f8de:	bl	9444 <memset>
    f8e2:	ldrh	r3, [r4, #12]
    f8e4:	lsls	r3, r3, #24
    f8e6:	bpl.n	f8f0 <_svfprintf_r+0x40>
    f8e8:	ldr	r3, [r4, #16]
    f8ea:	cmp	r3, #0
    f8ec:	beq.w	1079a <_svfprintf_r+0xeea>
    f8f0:	movs	r3, #0
    f8f2:	vldr	d8, [pc, #524]	; fb00 <_svfprintf_r+0x250>
    f8f6:	vldr	d9, [pc, #528]	; fb08 <_svfprintf_r+0x258>
    f8fa:	strd	r3, r3, [sp, #148]	; 0x94
    f8fe:	strd	r3, r3, [sp, #76]	; 0x4c
    f902:	strd	r3, r3, [sp, #84]	; 0x54
    f906:	add	r2, sp, #156	; 0x9c
    f908:	str	r3, [sp, #56]	; 0x38
    f90a:	str	r2, [sp, #144]	; 0x90
    f90c:	mov	sl, r2
    f90e:	str	r3, [sp, #68]	; 0x44
    f910:	str	r3, [sp, #16]
    f912:	mov	r4, r8
    f914:	mov	r9, r4
    f916:	ldr	r3, [pc, #504]	; (fb10 <_svfprintf_r+0x260>)
    f918:	ldr.w	r5, [r3, #228]	; 0xe4
    f91c:	bl	db54 <__locale_mb_cur_max>
    f920:	mov	r2, r9
    f922:	mov	r3, r0
    f924:	add	r1, sp, #112	; 0x70
    f926:	str	r7, [sp, #0]
    f928:	mov	r0, fp
    f92a:	blx	r5
    f92c:	cmp	r0, #0
    f92e:	beq.w	fa92 <_svfprintf_r+0x1e2>
    f932:	blt.w	fa82 <_svfprintf_r+0x1d2>
    f936:	ldr	r2, [sp, #112]	; 0x70
    f938:	cmp	r2, #37	; 0x25
    f93a:	mov	r3, r0
    f93c:	beq.n	f942 <_svfprintf_r+0x92>
    f93e:	add	r9, r3
    f940:	b.n	f916 <_svfprintf_r+0x66>
    f942:	subs.w	r5, r9, r4
    f946:	mov	r6, r0
    f948:	bne.w	fa9a <_svfprintf_r+0x1ea>
    f94c:	movs	r3, #0
    f94e:	mov.w	r2, #4294967295
    f952:	strb.w	r3, [sp, #103]	; 0x67
    f956:	mov	r8, r3
    f958:	str	r3, [sp, #24]
    f95a:	add.w	r9, r9, #1
    f95e:	ldrb.w	r3, [r9]
    f962:	str	r2, [sp, #12]
    f964:	movs	r5, #43	; 0x2b
    f966:	movs	r6, #32
    f968:	add.w	r9, r9, #1
    f96c:	sub.w	r2, r3, #32
    f970:	cmp	r2, #90	; 0x5a
    f972:	bhi.w	fb14 <_svfprintf_r+0x264>
    f976:	tbh	[pc, r2, lsl #1]
    f97a:	.short	0x02e8
    f97c:	.word	0x00cd00cd
    f980:	.word	0x00cd02e3
    f984:	.word	0x00cd00cd
    f988:	.word	0x00cd006a
    f98c:	.word	0x020500cd
    f990:	.word	0x00cd0284
    f994:	.word	0x02c90210
    f998:	.word	0x02bd00cd
    f99c:	.word	0x005b005b
    f9a0:	.word	0x005b005b
    f9a4:	.word	0x005b005b
    f9a8:	.word	0x005b005b
    f9ac:	.word	0x00cd005b
    f9b0:	.word	0x00cd00cd
    f9b4:	.word	0x00cd00cd
    f9b8:	.word	0x00cd00cd
    f9bc:	.word	0x00cd0153
    f9c0:	.word	0x021a0183
    f9c4:	.word	0x01530153
    f9c8:	.word	0x00cd0153
    f9cc:	.word	0x00cd00cd
    f9d0:	.word	0x021500cd
    f9d4:	.word	0x00cd00cd
    f9d8:	.word	0x00cd0296
    f9dc:	.word	0x00cd00cd
    f9e0:	.word	0x00cd01ab
    f9e4:	.word	0x00cd02aa
    f9e8:	.word	0x06e300cd
    f9ec:	.word	0x00cd00cd
    f9f0:	.word	0x00cd00cd
    f9f4:	.word	0x00cd00cd
    f9f8:	.word	0x00cd00cd
    f9fc:	.word	0x00cd0153
    fa00:	.word	0x01de0183
    fa04:	.word	0x01530153
    fa08:	.word	0x02770153
    fa0c:	.word	0x007f01de
    fa10:	.word	0x028900cd
    fa14:	.word	0x025f00cd
    fa18:	.word	0x022f06e0
    fa1c:	.word	0x00cd007f
    fa20:	.word	0x007c01ab
    fa24:	.word	0x00cd06b8
    fa28:	.word	0x06bd00cd
    fa2c:	.word	0x007c00cd
    fa30:	sub.w	r2, r3, #48	; 0x30
    fa34:	movs	r1, #0
    fa36:	ldrb.w	r3, [r9], #1
    fa3a:	add.w	r1, r1, r1, lsl #2
    fa3e:	add.w	r1, r2, r1, lsl #1
    fa42:	sub.w	r2, r3, #48	; 0x30
    fa46:	cmp	r2, #9
    fa48:	bls.n	fa36 <_svfprintf_r+0x186>
    fa4a:	str	r1, [sp, #24]
    fa4c:	b.n	f96c <_svfprintf_r+0xbc>
    fa4e:	mov	r0, fp
    fa50:	bl	12f7c <_localeconv_r>
    fa54:	ldr	r3, [r0, #4]
    fa56:	str	r3, [sp, #84]	; 0x54
    fa58:	mov	r0, r3
    fa5a:	bl	e100 <strlen>
    fa5e:	str	r0, [sp, #88]	; 0x58
    fa60:	mov	r0, fp
    fa62:	bl	12f7c <_localeconv_r>
    fa66:	ldr	r3, [r0, #8]
    fa68:	str	r3, [sp, #76]	; 0x4c
    fa6a:	ldr	r3, [sp, #88]	; 0x58
    fa6c:	cmp	r3, #0
    fa6e:	bne.w	106cc <_svfprintf_r+0xe1c>
    fa72:	ldrb.w	r3, [r9]
    fa76:	b.n	f968 <_svfprintf_r+0xb8>
    fa78:	ldrb.w	r3, [r9]
    fa7c:	orr.w	r8, r8, #32
    fa80:	b.n	f968 <_svfprintf_r+0xb8>
    fa82:	movs	r2, #8
    fa84:	movs	r1, #0
    fa86:	mov	r0, r7
    fa88:	bl	9444 <memset>
    fa8c:	movs	r3, #1
    fa8e:	add	r9, r3
    fa90:	b.n	f916 <_svfprintf_r+0x66>
    fa92:	subs.w	r5, r9, r4
    fa96:	mov	r6, r0
    fa98:	beq.n	fabe <_svfprintf_r+0x20e>
    fa9a:	ldr	r3, [sp, #152]	; 0x98
    fa9c:	add	r3, r5
    fa9e:	str	r3, [sp, #152]	; 0x98
    faa0:	ldr	r3, [sp, #148]	; 0x94
    faa2:	adds	r3, #1
    faa4:	cmp	r3, #7
    faa6:	strd	r4, r5, [sl]
    faaa:	str	r3, [sp, #148]	; 0x94
    faac:	bgt.n	fae8 <_svfprintf_r+0x238>
    faae:	add.w	sl, sl, #8
    fab2:	ldr	r3, [sp, #16]
    fab4:	add	r3, r5
    fab6:	str	r3, [sp, #16]
    fab8:	cmp	r6, #0
    faba:	bne.w	f94c <_svfprintf_r+0x9c>
    fabe:	ldr	r3, [sp, #152]	; 0x98
    fac0:	cmp	r3, #0
    fac2:	bne.w	10edc <_svfprintf_r+0x162c>
    fac6:	vmov	r3, s22
    faca:	ldrsh.w	r3, [r3, #12]
    face:	tst.w	r3, #64	; 0x40
    fad2:	ldr	r3, [sp, #16]
    fad4:	it	ne
    fad6:	movne.w	r3, #4294967295
    fada:	str	r3, [sp, #16]
    fadc:	ldr	r0, [sp, #16]
    fade:	add	sp, #324	; 0x144
    fae0:	vpop	{d8-d11}
    fae4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fae8:	vmov	r1, s22
    faec:	add	r2, sp, #144	; 0x90
    faee:	mov	r0, fp
    faf0:	bl	145c8 <__ssprint_r>
    faf4:	cmp	r0, #0
    faf6:	bne.n	fac6 <_svfprintf_r+0x216>
    faf8:	add.w	sl, sp, #156	; 0x9c
    fafc:	b.n	fab2 <_svfprintf_r+0x202>
    fafe:	nop
	...
    fb08:	.word	0xffffffff
    fb0c:	.word	0x7fefffff
    fb10:	.word	0x20008964
    fb14:	str	r3, [sp, #44]	; 0x2c
    fb16:	cmp	r3, #0
    fb18:	beq.n	fabe <_svfprintf_r+0x20e>
    fb1a:	movs	r1, #0
    fb1c:	strd	r1, r1, [sp, #48]	; 0x30
    fb20:	strb.w	r3, [sp, #220]	; 0xdc
    fb24:	movs	r3, #1
    fb26:	strb.w	r1, [sp, #103]	; 0x67
    fb2a:	str	r3, [sp, #8]
    fb2c:	str	r1, [sp, #28]
    fb2e:	str	r3, [sp, #20]
    fb30:	str	r1, [sp, #12]
    fb32:	str	r1, [sp, #60]	; 0x3c
    fb34:	add	r4, sp, #220	; 0xdc
    fb36:	ands.w	r3, r8, #2
    fb3a:	str	r3, [sp, #36]	; 0x24
    fb3c:	beq.n	fb44 <_svfprintf_r+0x294>
    fb3e:	ldr	r3, [sp, #8]
    fb40:	adds	r3, #2
    fb42:	str	r3, [sp, #8]
    fb44:	ands.w	r3, r8, #132	; 0x84
    fb48:	str	r3, [sp, #40]	; 0x28
    fb4a:	bne.n	fb58 <_svfprintf_r+0x2a8>
    fb4c:	ldr	r3, [sp, #24]
    fb4e:	ldr	r2, [sp, #8]
    fb50:	subs	r5, r3, r2
    fb52:	cmp	r5, #0
    fb54:	bgt.w	1022a <_svfprintf_r+0x97a>
    fb58:	ldr	r2, [sp, #152]	; 0x98
    fb5a:	cbz	r1, fb80 <_svfprintf_r+0x2d0>
    fb5c:	ldr	r1, [sp, #148]	; 0x94
    fb5e:	add.w	r0, sp, #103	; 0x67
    fb62:	adds	r1, #1
    fb64:	adds	r2, #1
    fb66:	str.w	r0, [sl]
    fb6a:	cmp	r1, #7
    fb6c:	mov.w	r0, #1
    fb70:	str	r2, [sp, #152]	; 0x98
    fb72:	str	r1, [sp, #148]	; 0x94
    fb74:	str.w	r0, [sl, #4]
    fb78:	bgt.w	102c0 <_svfprintf_r+0xa10>
    fb7c:	add.w	sl, sl, #8
    fb80:	ldr	r3, [sp, #36]	; 0x24
    fb82:	cbz	r3, fba6 <_svfprintf_r+0x2f6>
    fb84:	ldr	r3, [sp, #148]	; 0x94
    fb86:	add	r1, sp, #104	; 0x68
    fb88:	adds	r3, #1
    fb8a:	adds	r2, #2
    fb8c:	str.w	r1, [sl]
    fb90:	cmp	r3, #7
    fb92:	mov.w	r1, #2
    fb96:	str	r2, [sp, #152]	; 0x98
    fb98:	str	r3, [sp, #148]	; 0x94
    fb9a:	str.w	r1, [sl, #4]
    fb9e:	bgt.w	102e8 <_svfprintf_r+0xa38>
    fba2:	add.w	sl, sl, #8
    fba6:	ldr	r3, [sp, #40]	; 0x28
    fba8:	cmp	r3, #128	; 0x80
    fbaa:	beq.w	10086 <_svfprintf_r+0x7d6>
    fbae:	ldr	r3, [sp, #12]
    fbb0:	ldr	r1, [sp, #20]
    fbb2:	subs	r5, r3, r1
    fbb4:	cmp	r5, #0
    fbb6:	bgt.w	10104 <_svfprintf_r+0x854>
    fbba:	tst.w	r8, #256	; 0x100
    fbbe:	bne.w	ffdc <_svfprintf_r+0x72c>
    fbc2:	ldr	r3, [sp, #20]
    fbc4:	str.w	r3, [sl, #4]
    fbc8:	add	r2, r3
    fbca:	ldr	r3, [sp, #148]	; 0x94
    fbcc:	str.w	r4, [sl]
    fbd0:	adds	r3, #1
    fbd2:	cmp	r3, #7
    fbd4:	str	r2, [sp, #152]	; 0x98
    fbd6:	str	r3, [sp, #148]	; 0x94
    fbd8:	bgt.w	10212 <_svfprintf_r+0x962>
    fbdc:	add.w	sl, sl, #8
    fbe0:	tst.w	r8, #4
    fbe4:	beq.n	fbf2 <_svfprintf_r+0x342>
    fbe6:	ldr	r3, [sp, #24]
    fbe8:	ldr	r1, [sp, #8]
    fbea:	subs	r4, r3, r1
    fbec:	cmp	r4, #0
    fbee:	bgt.w	10302 <_svfprintf_r+0xa52>
    fbf2:	ldr	r3, [sp, #16]
    fbf4:	ldr	r1, [sp, #24]
    fbf6:	ldr	r0, [sp, #8]
    fbf8:	cmp	r1, r0
    fbfa:	ite	ge
    fbfc:	addge	r3, r3, r1
    fbfe:	addlt	r3, r3, r0
    fc00:	str	r3, [sp, #16]
    fc02:	cmp	r2, #0
    fc04:	bne.w	10168 <_svfprintf_r+0x8b8>
    fc08:	movs	r3, #0
    fc0a:	str	r3, [sp, #148]	; 0x94
    fc0c:	ldr	r3, [sp, #28]
    fc0e:	cbz	r3, fc18 <_svfprintf_r+0x368>
    fc10:	ldr	r1, [sp, #28]
    fc12:	mov	r0, fp
    fc14:	bl	e324 <_free_r>
    fc18:	add.w	sl, sp, #156	; 0x9c
    fc1c:	mov	r4, r9
    fc1e:	b.n	f914 <_svfprintf_r+0x64>
    fc20:	str	r3, [sp, #44]	; 0x2c
    fc22:	ldr	r3, [sp, #32]
    fc24:	adds	r3, #7
    fc26:	bic.w	r3, r3, #7
    fc2a:	vldmia	r3!, {d8}
    fc2e:	vabs.f64	d7, d8
    fc32:	vcmp.f64	d7, d9
    fc36:	vmrs	APSR_nzcv, fpscr
    fc3a:	str	r3, [sp, #32]
    fc3c:	ble.w	10612 <_svfprintf_r+0xd62>
    fc40:	vcmpe.f64	d8, #0.0
    fc44:	vmrs	APSR_nzcv, fpscr
    fc48:	bmi.w	10cfe <_svfprintf_r+0x144e>
    fc4c:	ldrb.w	r1, [sp, #103]	; 0x67
    fc50:	ldr	r4, [pc, #684]	; (ff00 <_svfprintf_r+0x650>)
    fc52:	ldr	r3, [pc, #688]	; (ff04 <_svfprintf_r+0x654>)
    fc54:	bic.w	r8, r8, #128	; 0x80
    fc58:	ldr	r2, [sp, #44]	; 0x2c
    fc5a:	cmp	r2, #71	; 0x47
    fc5c:	it	gt
    fc5e:	movgt	r4, r3
    fc60:	movs	r3, #0
    fc62:	strd	r3, r3, [sp, #48]	; 0x30
    fc66:	movs	r2, #3
    fc68:	str	r3, [sp, #28]
    fc6a:	str	r2, [sp, #8]
    fc6c:	str	r2, [sp, #20]
    fc6e:	str	r3, [sp, #12]
    fc70:	str	r3, [sp, #60]	; 0x3c
    fc72:	cmp	r1, #0
    fc74:	beq.w	fb36 <_svfprintf_r+0x286>
    fc78:	ldr	r3, [sp, #8]
    fc7a:	adds	r3, #1
    fc7c:	str	r3, [sp, #8]
    fc7e:	b.n	fb36 <_svfprintf_r+0x286>
    fc80:	cmp	r3, #67	; 0x43
    fc82:	str	r3, [sp, #44]	; 0x2c
    fc84:	beq.n	fc8e <_svfprintf_r+0x3de>
    fc86:	tst.w	r8, #16
    fc8a:	beq.w	10748 <_svfprintf_r+0xe98>
    fc8e:	ldr	r5, [sp, #32]
    fc90:	movs	r2, #8
    fc92:	movs	r1, #0
    fc94:	add	r0, sp, #136	; 0x88
    fc96:	add	r4, sp, #220	; 0xdc
    fc98:	bl	9444 <memset>
    fc9c:	add	r3, sp, #136	; 0x88
    fc9e:	ldr.w	r2, [r5], #4
    fca2:	mov	r1, r4
    fca4:	mov	r0, fp
    fca6:	bl	14374 <_wcrtomb_r>
    fcaa:	mov	r3, r0
    fcac:	adds	r3, #1
    fcae:	str	r0, [sp, #20]
    fcb0:	beq.w	11290 <_svfprintf_r+0x19e0>
    fcb4:	ldr	r3, [sp, #20]
    fcb6:	str	r5, [sp, #32]
    fcb8:	bic.w	r3, r3, r3, asr #31
    fcbc:	str	r3, [sp, #8]
    fcbe:	movs	r1, #0
    fcc0:	strd	r1, r1, [sp, #48]	; 0x30
    fcc4:	strb.w	r1, [sp, #103]	; 0x67
    fcc8:	str	r1, [sp, #28]
    fcca:	str	r1, [sp, #12]
    fccc:	str	r1, [sp, #60]	; 0x3c
    fcce:	b.n	fb36 <_svfprintf_r+0x286>
    fcd0:	str	r3, [sp, #44]	; 0x2c
    fcd2:	ldr	r3, [sp, #32]
    fcd4:	mov	r2, r3
    fcd6:	movs	r3, #0
    fcd8:	strb.w	r3, [sp, #103]	; 0x67
    fcdc:	mov	r3, r2
    fcde:	ldr.w	r4, [r3], #4
    fce2:	str	r3, [sp, #32]
    fce4:	cmp	r4, #0
    fce6:	beq.w	1077a <_svfprintf_r+0xeca>
    fcea:	ldr	r3, [sp, #44]	; 0x2c
    fcec:	cmp	r3, #83	; 0x53
    fcee:	beq.w	10aca <_svfprintf_r+0x121a>
    fcf2:	ands.w	r3, r8, #16
    fcf6:	str	r3, [sp, #48]	; 0x30
    fcf8:	bne.w	10aca <_svfprintf_r+0x121a>
    fcfc:	ldr	r3, [sp, #12]
    fcfe:	adds	r5, r3, #1
    fd00:	beq.w	10ece <_svfprintf_r+0x161e>
    fd04:	ldr	r1, [sp, #48]	; 0x30
    fd06:	mov	r2, r3
    fd08:	mov	r0, r4
    fd0a:	bl	e040 <memchr>
    fd0e:	str	r0, [sp, #28]
    fd10:	cmp	r0, #0
    fd12:	beq.w	11366 <_svfprintf_r+0x1ab6>
    fd16:	ldr	r3, [sp, #28]
    fd18:	subs	r2, r3, r4
    fd1a:	str	r2, [sp, #20]
    fd1c:	ldr	r3, [sp, #48]	; 0x30
    fd1e:	str	r3, [sp, #12]
    fd20:	bic.w	r2, r2, r2, asr #31
    fd24:	str	r3, [sp, #60]	; 0x3c
    fd26:	str	r3, [sp, #52]	; 0x34
    fd28:	str	r3, [sp, #28]
    fd2a:	movs	r3, #115	; 0x73
    fd2c:	ldrb.w	r1, [sp, #103]	; 0x67
    fd30:	str	r2, [sp, #8]
    fd32:	str	r3, [sp, #44]	; 0x2c
    fd34:	b.n	fc72 <_svfprintf_r+0x3c2>
    fd36:	tst.w	r8, #32
    fd3a:	str	r3, [sp, #44]	; 0x2c
    fd3c:	ldr	r3, [sp, #32]
    fd3e:	beq.n	fdbc <_svfprintf_r+0x50c>
    fd40:	adds	r3, #7
    fd42:	bic.w	r3, r3, #7
    fd46:	mov	r2, r3
    fd48:	mov	r1, r2
    fd4a:	ldr	r3, [r3, #4]
    fd4c:	ldr.w	r2, [r1], #8
    fd50:	str	r1, [sp, #32]
    fd52:	mov	r1, r3
    fd54:	cmp	r3, #0
    fd56:	blt.w	10572 <_svfprintf_r+0xcc2>
    fd5a:	ldr	r3, [sp, #12]
    fd5c:	adds	r3, #1
    fd5e:	beq.w	1029e <_svfprintf_r+0x9ee>
    fd62:	bic.w	r0, r8, #128	; 0x80
    fd66:	orrs.w	r3, r2, r1
    fd6a:	str	r0, [sp, #8]
    fd6c:	bne.w	102a2 <_svfprintf_r+0x9f2>
    fd70:	ldr	r3, [sp, #12]
    fd72:	cmp	r3, #0
    fd74:	bne.w	102ac <_svfprintf_r+0x9fc>
    fd78:	mov	r8, r0
    fd7a:	movs	r3, #0
    fd7c:	str	r3, [sp, #12]
    fd7e:	str	r3, [sp, #20]
    fd80:	add	r4, sp, #320	; 0x140
    fd82:	b.n	ff92 <_svfprintf_r+0x6e2>
    fd84:	ldr	r3, [sp, #32]
    fd86:	ldr.w	r2, [r3], #4
    fd8a:	str	r2, [sp, #24]
    fd8c:	cmp	r2, #0
    fd8e:	bge.w	105c4 <_svfprintf_r+0xd14>
    fd92:	ldr	r2, [sp, #24]
    fd94:	str	r3, [sp, #32]
    fd96:	negs	r2, r2
    fd98:	str	r2, [sp, #24]
    fd9a:	ldrb.w	r3, [r9]
    fd9e:	orr.w	r8, r8, #4
    fda2:	b.n	f968 <_svfprintf_r+0xb8>
    fda4:	ldrb.w	r3, [r9]
    fda8:	orr.w	r8, r8, #8
    fdac:	b.n	f968 <_svfprintf_r+0xb8>
    fdae:	orr.w	r8, r8, #16
    fdb2:	tst.w	r8, #32
    fdb6:	str	r3, [sp, #44]	; 0x2c
    fdb8:	ldr	r3, [sp, #32]
    fdba:	bne.n	fd40 <_svfprintf_r+0x490>
    fdbc:	tst.w	r8, #16
    fdc0:	bne.w	105da <_svfprintf_r+0xd2a>
    fdc4:	tst.w	r8, #64	; 0x40
    fdc8:	beq.w	105d2 <_svfprintf_r+0xd22>
    fdcc:	ldrsh.w	r2, [r3], #4
    fdd0:	str	r3, [sp, #32]
    fdd2:	asrs	r1, r2, #31
    fdd4:	mov	r3, r1
    fdd6:	b.n	fd54 <_svfprintf_r+0x4a4>
    fdd8:	ldr	r3, [sp, #32]
    fdda:	orr.w	r2, r8, #2
    fdde:	str	r2, [sp, #8]
    fde0:	ldr.w	r2, [r3], #4
    fde4:	str	r3, [sp, #32]
    fde6:	movw	r3, #30768	; 0x7830
    fdea:	strh.w	r3, [sp, #104]	; 0x68
    fdee:	movs	r0, #120	; 0x78
    fdf0:	ldr	r3, [pc, #276]	; (ff08 <_svfprintf_r+0x658>)
    fdf2:	str	r3, [sp, #68]	; 0x44
    fdf4:	movs	r1, #0
    fdf6:	movs	r3, #2
    fdf8:	str	r0, [sp, #44]	; 0x2c
    fdfa:	movs	r0, #0
    fdfc:	ldr	r4, [sp, #12]
    fdfe:	strb.w	r0, [sp, #103]	; 0x67
    fe02:	adds	r0, r4, #1
    fe04:	beq.w	ff62 <_svfprintf_r+0x6b2>
    fe08:	ldr	r0, [sp, #8]
    fe0a:	bic.w	r8, r0, #128	; 0x80
    fe0e:	orrs.w	r0, r2, r1
    fe12:	bne.w	ff5e <_svfprintf_r+0x6ae>
    fe16:	cmp	r4, #0
    fe18:	bne.w	10b78 <_svfprintf_r+0x12c8>
    fe1c:	cmp	r3, #0
    fe1e:	bne.n	fd7a <_svfprintf_r+0x4ca>
    fe20:	ldr	r3, [sp, #8]
    fe22:	ands.w	r3, r3, #1
    fe26:	str	r3, [sp, #20]
    fe28:	beq.w	105ce <_svfprintf_r+0xd1e>
    fe2c:	movs	r3, #48	; 0x30
    fe2e:	strb.w	r3, [sp, #319]	; 0x13f
    fe32:	addw	r4, sp, #319	; 0x13f
    fe36:	b.n	ff92 <_svfprintf_r+0x6e2>
    fe38:	tst.w	r8, #32
    fe3c:	bne.w	105e8 <_svfprintf_r+0xd38>
    fe40:	tst.w	r8, #16
    fe44:	bne.w	10b86 <_svfprintf_r+0x12d6>
    fe48:	tst.w	r8, #64	; 0x40
    fe4c:	bne.w	10d7e <_svfprintf_r+0x14ce>
    fe50:	tst.w	r8, #512	; 0x200
    fe54:	beq.w	10b86 <_svfprintf_r+0x12d6>
    fe58:	ldr	r3, [sp, #32]
    fe5a:	ldr	r1, [sp, #16]
    fe5c:	ldr.w	r2, [r3], #4
    fe60:	str	r3, [sp, #32]
    fe62:	strb	r1, [r2, #0]
    fe64:	mov	r4, r9
    fe66:	b.n	f914 <_svfprintf_r+0x64>
    fe68:	ldrb.w	r3, [r9]
    fe6c:	cmp	r3, #104	; 0x68
    fe6e:	ittte	eq
    fe70:	ldrbeq.w	r3, [r9, #1]
    fe74:	orreq.w	r8, r8, #512	; 0x200
    fe78:	addeq.w	r9, r9, #1
    fe7c:	orrne.w	r8, r8, #64	; 0x40
    fe80:	b.n	f968 <_svfprintf_r+0xb8>
    fe82:	ldrb.w	r3, [r9]
    fe86:	strb.w	r5, [sp, #103]	; 0x67
    fe8a:	b.n	f968 <_svfprintf_r+0xb8>
    fe8c:	ldrb.w	r3, [r9]
    fe90:	cmp	r3, #108	; 0x6c
    fe92:	ittte	eq
    fe94:	ldrbeq.w	r3, [r9, #1]
    fe98:	orreq.w	r8, r8, #32
    fe9c:	addeq.w	r9, r9, #1
    fea0:	orrne.w	r8, r8, #16
    fea4:	b.n	f968 <_svfprintf_r+0xb8>
    fea6:	str	r3, [sp, #44]	; 0x2c
    fea8:	orr.w	r8, r8, #16
    feac:	ands.w	r1, r8, #32
    feb0:	beq.w	10556 <_svfprintf_r+0xca6>
    feb4:	ldr	r3, [sp, #32]
    feb6:	adds	r3, #7
    feb8:	bic.w	r3, r3, #7
    febc:	ldr	r1, [r3, #4]
    febe:	ldr.w	r2, [r3], #8
    fec2:	str	r3, [sp, #32]
    fec4:	bic.w	r3, r8, #1024	; 0x400
    fec8:	str	r3, [sp, #8]
    feca:	movs	r3, #0
    fecc:	b.n	fdfa <_svfprintf_r+0x54a>
    fece:	str	r3, [sp, #44]	; 0x2c
    fed0:	orr.w	r3, r8, #16
    fed4:	str	r3, [sp, #8]
    fed6:	ldr	r3, [sp, #8]
    fed8:	ands.w	r1, r3, #32
    fedc:	beq.w	10532 <_svfprintf_r+0xc82>
    fee0:	ldr	r3, [sp, #32]
    fee2:	adds	r3, #7
    fee4:	bic.w	r3, r3, #7
    fee8:	ldr	r1, [r3, #4]
    feea:	ldr.w	r2, [r3], #8
    feee:	str	r3, [sp, #32]
    fef0:	movs	r3, #1
    fef2:	b.n	fdfa <_svfprintf_r+0x54a>
    fef4:	ldrb.w	r3, [r9]
    fef8:	orr.w	r8, r8, #128	; 0x80
    fefc:	b.n	f968 <_svfprintf_r+0xb8>
    fefe:	nop
    ff00:	.word	0x20000998
    ff04:	.word	0x2000099c
    ff08:	.word	0x200009a8
    ff0c:	mov	r1, r9
    ff0e:	ldrb.w	r3, [r1], #1
    ff12:	cmp	r3, #42	; 0x2a
    ff14:	beq.w	113aa <_svfprintf_r+0x1afa>
    ff18:	sub.w	r2, r3, #48	; 0x30
    ff1c:	cmp	r2, #9
    ff1e:	mov	r9, r1
    ff20:	it	ls
    ff22:	movls	r1, #0
    ff24:	bhi.w	111b0 <_svfprintf_r+0x1900>
    ff28:	ldrb.w	r3, [r9], #1
    ff2c:	add.w	r1, r1, r1, lsl #2
    ff30:	add.w	r1, r2, r1, lsl #1
    ff34:	sub.w	r2, r3, #48	; 0x30
    ff38:	cmp	r2, #9
    ff3a:	bls.n	ff28 <_svfprintf_r+0x678>
    ff3c:	str	r1, [sp, #12]
    ff3e:	b.n	f96c <_svfprintf_r+0xbc>
    ff40:	ldrb.w	r3, [r9]
    ff44:	orr.w	r8, r8, #1
    ff48:	b.n	f968 <_svfprintf_r+0xb8>
    ff4a:	ldrb.w	r3, [sp, #103]	; 0x67
    ff4e:	cmp	r3, #0
    ff50:	bne.w	fa72 <_svfprintf_r+0x1c2>
    ff54:	ldrb.w	r3, [r9]
    ff58:	strb.w	r6, [sp, #103]	; 0x67
    ff5c:	b.n	f968 <_svfprintf_r+0xb8>
    ff5e:	str.w	r8, [sp, #8]
    ff62:	cmp	r3, #1
    ff64:	beq.w	102a2 <_svfprintf_r+0x9f2>
    ff68:	cmp	r3, #2
    ff6a:	add	r4, sp, #320	; 0x140
    ff6c:	bne.n	ffb0 <_svfprintf_r+0x700>
    ff6e:	ldr	r0, [sp, #68]	; 0x44
    ff70:	and.w	r3, r2, #15
    ff74:	lsrs	r2, r2, #4
    ff76:	ldrb	r3, [r0, r3]
    ff78:	strb.w	r3, [r4, #-1]!
    ff7c:	orr.w	r2, r2, r1, lsl #28
    ff80:	lsrs	r1, r1, #4
    ff82:	orrs.w	r3, r2, r1
    ff86:	bne.n	ff70 <_svfprintf_r+0x6c0>
    ff88:	add	r3, sp, #320	; 0x140
    ff8a:	subs	r3, r3, r4
    ff8c:	ldr.w	r8, [sp, #8]
    ff90:	str	r3, [sp, #20]
    ff92:	ldr	r2, [sp, #20]
    ff94:	ldr	r0, [sp, #12]
    ff96:	ldrb.w	r1, [sp, #103]	; 0x67
    ff9a:	cmp	r2, r0
    ff9c:	mov.w	r3, #0
    ffa0:	it	lt
    ffa2:	movlt	r2, r0
    ffa4:	strd	r3, r3, [sp, #48]	; 0x30
    ffa8:	str	r3, [sp, #28]
    ffaa:	str	r2, [sp, #8]
    ffac:	str	r3, [sp, #60]	; 0x3c
    ffae:	b.n	fc72 <_svfprintf_r+0x3c2>
    ffb0:	and.w	r3, r2, #7
    ffb4:	lsrs	r2, r2, #3
    ffb6:	orr.w	r2, r2, r1, lsl #29
    ffba:	lsrs	r1, r1, #3
    ffbc:	adds	r3, #48	; 0x30
    ffbe:	orrs.w	r5, r2, r1
    ffc2:	mov	r0, r4
    ffc4:	strb.w	r3, [r4, #-1]!
    ffc8:	bne.n	ffb0 <_svfprintf_r+0x700>
    ffca:	ldr	r2, [sp, #8]
    ffcc:	lsls	r1, r2, #31
    ffce:	bmi.w	1046c <_svfprintf_r+0xbbc>
    ffd2:	add	r3, sp, #320	; 0x140
    ffd4:	subs	r3, r3, r4
    ffd6:	mov	r8, r2
    ffd8:	str	r3, [sp, #20]
    ffda:	b.n	ff92 <_svfprintf_r+0x6e2>
    ffdc:	ldr	r3, [sp, #44]	; 0x2c
    ffde:	cmp	r3, #101	; 0x65
    ffe0:	ble.w	1018c <_svfprintf_r+0x8dc>
    ffe4:	vcmp.f64	d8, #0.0
    ffe8:	vmrs	APSR_nzcv, fpscr
    ffec:	bne.w	10372 <_svfprintf_r+0xac2>
    fff0:	ldr	r3, [sp, #148]	; 0x94
    fff2:	ldr	r1, [pc, #744]	; (102dc <_svfprintf_r+0xa2c>)
    fff4:	str.w	r1, [sl]
    fff8:	adds	r3, #1
    fffa:	adds	r2, #1
    fffc:	movs	r1, #1
    fffe:	cmp	r3, #7
   10000:	str	r2, [sp, #152]	; 0x98
   10002:	str	r3, [sp, #148]	; 0x94
   10004:	str.w	r1, [sl, #4]
   10008:	bgt.w	10aae <_svfprintf_r+0x11fe>
   1000c:	add.w	sl, sl, #8
   10010:	ldr	r3, [sp, #108]	; 0x6c
   10012:	ldr	r1, [sp, #56]	; 0x38
   10014:	cmp	r3, r1
   10016:	bge.w	105ba <_svfprintf_r+0xd0a>
   1001a:	ldr	r3, [sp, #64]	; 0x40
   1001c:	ldr	r1, [sp, #72]	; 0x48
   1001e:	add	r2, r3
   10020:	strd	r1, r3, [sl]
   10024:	ldr	r3, [sp, #148]	; 0x94
   10026:	str	r2, [sp, #152]	; 0x98
   10028:	adds	r3, #1
   1002a:	cmp	r3, #7
   1002c:	str	r3, [sp, #148]	; 0x94
   1002e:	bgt.w	10760 <_svfprintf_r+0xeb0>
   10032:	add.w	sl, sl, #8
   10036:	ldr	r3, [sp, #56]	; 0x38
   10038:	subs	r4, r3, #1
   1003a:	cmp	r4, #0
   1003c:	ble.w	fbe0 <_svfprintf_r+0x330>
   10040:	cmp	r4, #16
   10042:	ldr	r3, [sp, #148]	; 0x94
   10044:	ble.w	10b24 <_svfprintf_r+0x1274>
   10048:	vmov	r6, s22
   1004c:	movs	r5, #16
   1004e:	b.n	1005c <_svfprintf_r+0x7ac>
   10050:	add.w	sl, sl, #8
   10054:	subs	r4, #16
   10056:	cmp	r4, #16
   10058:	ble.w	10b24 <_svfprintf_r+0x1274>
   1005c:	adds	r3, #1
   1005e:	ldr	r1, [pc, #640]	; (102e0 <_svfprintf_r+0xa30>)
   10060:	adds	r2, #16
   10062:	cmp	r3, #7
   10064:	strd	r1, r5, [sl]
   10068:	strd	r3, r2, [sp, #148]	; 0x94
   1006c:	ble.n	10050 <_svfprintf_r+0x7a0>
   1006e:	add	r2, sp, #144	; 0x90
   10070:	mov	r1, r6
   10072:	mov	r0, fp
   10074:	bl	145c8 <__ssprint_r>
   10078:	cmp	r0, #0
   1007a:	bne.n	1017a <_svfprintf_r+0x8ca>
   1007c:	ldrd	r3, r2, [sp, #148]	; 0x94
   10080:	add.w	sl, sp, #156	; 0x9c
   10084:	b.n	10054 <_svfprintf_r+0x7a4>
   10086:	ldr	r3, [sp, #24]
   10088:	ldr	r1, [sp, #8]
   1008a:	subs	r5, r3, r1
   1008c:	cmp	r5, #0
   1008e:	ble.w	fbae <_svfprintf_r+0x2fe>
   10092:	cmp	r5, #16
   10094:	ldr	r3, [sp, #148]	; 0x94
   10096:	ble.n	100dc <_svfprintf_r+0x82c>
   10098:	str	r4, [sp, #36]	; 0x24
   1009a:	movs	r6, #16
   1009c:	vmov	r4, s22
   100a0:	b.n	100ac <_svfprintf_r+0x7fc>
   100a2:	subs	r5, #16
   100a4:	cmp	r5, #16
   100a6:	add.w	sl, sl, #8
   100aa:	ble.n	100da <_svfprintf_r+0x82a>
   100ac:	adds	r3, #1
   100ae:	ldr	r1, [pc, #560]	; (102e0 <_svfprintf_r+0xa30>)
   100b0:	adds	r2, #16
   100b2:	cmp	r3, #7
   100b4:	strd	r1, r6, [sl]
   100b8:	strd	r3, r2, [sp, #148]	; 0x94
   100bc:	ble.n	100a2 <_svfprintf_r+0x7f2>
   100be:	add	r2, sp, #144	; 0x90
   100c0:	mov	r1, r4
   100c2:	mov	r0, fp
   100c4:	add.w	sl, sp, #156	; 0x9c
   100c8:	bl	145c8 <__ssprint_r>
   100cc:	cmp	r0, #0
   100ce:	bne.n	1017a <_svfprintf_r+0x8ca>
   100d0:	subs	r5, #16
   100d2:	cmp	r5, #16
   100d4:	ldrd	r3, r2, [sp, #148]	; 0x94
   100d8:	bgt.n	100ac <_svfprintf_r+0x7fc>
   100da:	ldr	r4, [sp, #36]	; 0x24
   100dc:	ldr	r1, [pc, #512]	; (102e0 <_svfprintf_r+0xa30>)
   100de:	str.w	r5, [sl, #4]
   100e2:	adds	r3, #1
   100e4:	add	r2, r5
   100e6:	cmp	r3, #7
   100e8:	strd	r3, r2, [sp, #148]	; 0x94
   100ec:	str.w	r1, [sl]
   100f0:	bgt.w	10b40 <_svfprintf_r+0x1290>
   100f4:	ldr	r3, [sp, #12]
   100f6:	ldr	r1, [sp, #20]
   100f8:	subs	r5, r3, r1
   100fa:	cmp	r5, #0
   100fc:	add.w	sl, sl, #8
   10100:	ble.w	fbba <_svfprintf_r+0x30a>
   10104:	cmp	r5, #16
   10106:	ldr	r3, [sp, #148]	; 0x94
   10108:	ble.n	1014a <_svfprintf_r+0x89a>
   1010a:	mov	r1, sl
   1010c:	movs	r6, #16
   1010e:	vmov	sl, s22
   10112:	b.n	1011e <_svfprintf_r+0x86e>
   10114:	subs	r5, #16
   10116:	cmp	r5, #16
   10118:	add.w	r1, r1, #8
   1011c:	ble.n	10148 <_svfprintf_r+0x898>
   1011e:	adds	r3, #1
   10120:	ldr	r0, [pc, #444]	; (102e0 <_svfprintf_r+0xa30>)
   10122:	adds	r2, #16
   10124:	cmp	r3, #7
   10126:	strd	r0, r6, [r1]
   1012a:	strd	r3, r2, [sp, #148]	; 0x94
   1012e:	ble.n	10114 <_svfprintf_r+0x864>
   10130:	add	r2, sp, #144	; 0x90
   10132:	mov	r1, sl
   10134:	mov	r0, fp
   10136:	bl	145c8 <__ssprint_r>
   1013a:	cbnz	r0, 1017a <_svfprintf_r+0x8ca>
   1013c:	subs	r5, #16
   1013e:	cmp	r5, #16
   10140:	ldrd	r3, r2, [sp, #148]	; 0x94
   10144:	add	r1, sp, #156	; 0x9c
   10146:	bgt.n	1011e <_svfprintf_r+0x86e>
   10148:	mov	sl, r1
   1014a:	adds	r3, #1
   1014c:	ldr	r1, [pc, #400]	; (102e0 <_svfprintf_r+0xa30>)
   1014e:	str.w	r5, [sl, #4]
   10152:	add	r2, r5
   10154:	cmp	r3, #7
   10156:	strd	r3, r2, [sp, #148]	; 0x94
   1015a:	str.w	r1, [sl]
   1015e:	bgt.w	10516 <_svfprintf_r+0xc66>
   10162:	add.w	sl, sl, #8
   10166:	b.n	fbba <_svfprintf_r+0x30a>
   10168:	vmov	r1, s22
   1016c:	add	r2, sp, #144	; 0x90
   1016e:	mov	r0, fp
   10170:	bl	145c8 <__ssprint_r>
   10174:	cmp	r0, #0
   10176:	beq.w	fc08 <_svfprintf_r+0x358>
   1017a:	ldr	r3, [sp, #28]
   1017c:	cmp	r3, #0
   1017e:	beq.w	fac6 <_svfprintf_r+0x216>
   10182:	ldr	r1, [sp, #28]
   10184:	mov	r0, fp
   10186:	bl	e324 <_free_r>
   1018a:	b.n	fac6 <_svfprintf_r+0x216>
   1018c:	ldr	r3, [sp, #56]	; 0x38
   1018e:	cmp	r3, #1
   10190:	ble.w	10488 <_svfprintf_r+0xbd8>
   10194:	ldr	r3, [sp, #148]	; 0x94
   10196:	str.w	r4, [sl]
   1019a:	adds	r3, #1
   1019c:	adds	r2, #1
   1019e:	movs	r1, #1
   101a0:	cmp	r3, #7
   101a2:	str	r2, [sp, #152]	; 0x98
   101a4:	str	r3, [sp, #148]	; 0x94
   101a6:	str.w	r1, [sl, #4]
   101aa:	bgt.w	1059e <_svfprintf_r+0xcee>
   101ae:	add.w	sl, sl, #8
   101b2:	ldr	r1, [sp, #64]	; 0x40
   101b4:	ldr	r0, [sp, #72]	; 0x48
   101b6:	adds	r3, #1
   101b8:	add	r2, r1
   101ba:	cmp	r3, #7
   101bc:	strd	r0, r1, [sl]
   101c0:	strd	r3, r2, [sp, #148]	; 0x94
   101c4:	bgt.w	10582 <_svfprintf_r+0xcd2>
   101c8:	add.w	sl, sl, #8
   101cc:	vcmp.f64	d8, #0.0
   101d0:	vmrs	APSR_nzcv, fpscr
   101d4:	beq.w	104c6 <_svfprintf_r+0xc16>
   101d8:	ldr	r1, [sp, #56]	; 0x38
   101da:	adds	r3, #1
   101dc:	subs	r1, #1
   101de:	adds	r4, #1
   101e0:	add	r2, r1
   101e2:	cmp	r3, #7
   101e4:	str.w	r4, [sl]
   101e8:	str	r3, [sp, #148]	; 0x94
   101ea:	str.w	r1, [sl, #4]
   101ee:	str	r2, [sp, #152]	; 0x98
   101f0:	bgt.w	104aa <_svfprintf_r+0xbfa>
   101f4:	add.w	sl, sl, #8
   101f8:	ldr	r1, [sp, #80]	; 0x50
   101fa:	str.w	r1, [sl, #4]
   101fe:	adds	r3, #1
   10200:	add	r2, r1
   10202:	cmp	r3, #7
   10204:	add	r1, sp, #120	; 0x78
   10206:	strd	r3, r2, [sp, #148]	; 0x94
   1020a:	str.w	r1, [sl]
   1020e:	ble.w	fbdc <_svfprintf_r+0x32c>
   10212:	vmov	r1, s22
   10216:	add	r2, sp, #144	; 0x90
   10218:	mov	r0, fp
   1021a:	bl	145c8 <__ssprint_r>
   1021e:	cmp	r0, #0
   10220:	bne.n	1017a <_svfprintf_r+0x8ca>
   10222:	ldr	r2, [sp, #152]	; 0x98
   10224:	add.w	sl, sp, #156	; 0x9c
   10228:	b.n	fbe0 <_svfprintf_r+0x330>
   1022a:	cmp	r5, #16
   1022c:	ldrd	r1, r2, [sp, #148]	; 0x94
   10230:	ldr	r6, [pc, #176]	; (102e4 <_svfprintf_r+0xa34>)
   10232:	ble.n	1027e <_svfprintf_r+0x9ce>
   10234:	str	r4, [sp, #92]	; 0x5c
   10236:	movs	r3, #16
   10238:	vmov	r4, s22
   1023c:	mov	r0, r1
   1023e:	b.n	1024a <_svfprintf_r+0x99a>
   10240:	subs	r5, #16
   10242:	cmp	r5, #16
   10244:	add.w	sl, sl, #8
   10248:	ble.n	1027a <_svfprintf_r+0x9ca>
   1024a:	adds	r0, #1
   1024c:	adds	r2, #16
   1024e:	cmp	r0, #7
   10250:	strd	r6, r3, [sl]
   10254:	strd	r0, r2, [sp, #148]	; 0x94
   10258:	ble.n	10240 <_svfprintf_r+0x990>
   1025a:	add	r2, sp, #144	; 0x90
   1025c:	mov	r1, r4
   1025e:	mov	r0, fp
   10260:	add.w	sl, sp, #156	; 0x9c
   10264:	bl	145c8 <__ssprint_r>
   10268:	cmp	r0, #0
   1026a:	bne.n	1017a <_svfprintf_r+0x8ca>
   1026c:	subs	r5, #16
   1026e:	cmp	r5, #16
   10270:	ldrd	r0, r2, [sp, #148]	; 0x94
   10274:	mov.w	r3, #16
   10278:	bgt.n	1024a <_svfprintf_r+0x99a>
   1027a:	ldr	r4, [sp, #92]	; 0x5c
   1027c:	mov	r1, r0
   1027e:	adds	r1, #1
   10280:	add	r2, r5
   10282:	cmp	r1, #7
   10284:	strd	r1, r2, [sp, #148]	; 0x94
   10288:	str.w	r6, [sl]
   1028c:	str.w	r5, [sl, #4]
   10290:	bgt.w	10a0e <_svfprintf_r+0x115e>
   10294:	ldrb.w	r1, [sp, #103]	; 0x67
   10298:	add.w	sl, sl, #8
   1029c:	b.n	fb5a <_svfprintf_r+0x2aa>
   1029e:	str.w	r8, [sp, #8]
   102a2:	cmp	r2, #10
   102a4:	sbcs.w	r3, r1, #0
   102a8:	bcs.w	10936 <_svfprintf_r+0x1086>
   102ac:	adds	r2, #48	; 0x30
   102ae:	movs	r3, #1
   102b0:	ldr.w	r8, [sp, #8]
   102b4:	strb.w	r2, [sp, #319]	; 0x13f
   102b8:	str	r3, [sp, #20]
   102ba:	addw	r4, sp, #319	; 0x13f
   102be:	b.n	ff92 <_svfprintf_r+0x6e2>
   102c0:	vmov	r1, s22
   102c4:	add	r2, sp, #144	; 0x90
   102c6:	mov	r0, fp
   102c8:	bl	145c8 <__ssprint_r>
   102cc:	cmp	r0, #0
   102ce:	bne.w	1017a <_svfprintf_r+0x8ca>
   102d2:	ldr	r2, [sp, #152]	; 0x98
   102d4:	add.w	sl, sp, #156	; 0x9c
   102d8:	b.n	fb80 <_svfprintf_r+0x2d0>
   102da:	nop
   102dc:	.word	0x200009d8
   102e0:	.word	0x20007878
   102e4:	.word	0x20002454
   102e8:	vmov	r1, s22
   102ec:	add	r2, sp, #144	; 0x90
   102ee:	mov	r0, fp
   102f0:	bl	145c8 <__ssprint_r>
   102f4:	cmp	r0, #0
   102f6:	bne.w	1017a <_svfprintf_r+0x8ca>
   102fa:	ldr	r2, [sp, #152]	; 0x98
   102fc:	add.w	sl, sp, #156	; 0x9c
   10300:	b.n	fba6 <_svfprintf_r+0x2f6>
   10302:	cmp	r4, #16
   10304:	ldr	r3, [sp, #148]	; 0x94
   10306:	ldr	r6, [pc, #760]	; (10600 <_svfprintf_r+0xd50>)
   10308:	ble.n	1034a <_svfprintf_r+0xa9a>
   1030a:	vmov	r8, s22
   1030e:	movs	r5, #16
   10310:	b.n	1031c <_svfprintf_r+0xa6c>
   10312:	subs	r4, #16
   10314:	cmp	r4, #16
   10316:	add.w	sl, sl, #8
   1031a:	ble.n	1034a <_svfprintf_r+0xa9a>
   1031c:	adds	r3, #1
   1031e:	adds	r2, #16
   10320:	cmp	r3, #7
   10322:	strd	r6, r5, [sl]
   10326:	strd	r3, r2, [sp, #148]	; 0x94
   1032a:	ble.n	10312 <_svfprintf_r+0xa62>
   1032c:	add	r2, sp, #144	; 0x90
   1032e:	mov	r1, r8
   10330:	mov	r0, fp
   10332:	add.w	sl, sp, #156	; 0x9c
   10336:	bl	145c8 <__ssprint_r>
   1033a:	cmp	r0, #0
   1033c:	bne.w	1017a <_svfprintf_r+0x8ca>
   10340:	subs	r4, #16
   10342:	cmp	r4, #16
   10344:	ldrd	r3, r2, [sp, #148]	; 0x94
   10348:	bgt.n	1031c <_svfprintf_r+0xa6c>
   1034a:	adds	r3, #1
   1034c:	add	r2, r4
   1034e:	cmp	r3, #7
   10350:	strd	r6, r4, [sl]
   10354:	strd	r3, r2, [sp, #148]	; 0x94
   10358:	ble.w	fbf2 <_svfprintf_r+0x342>
   1035c:	vmov	r1, s22
   10360:	add	r2, sp, #144	; 0x90
   10362:	mov	r0, fp
   10364:	bl	145c8 <__ssprint_r>
   10368:	cmp	r0, #0
   1036a:	bne.w	1017a <_svfprintf_r+0x8ca>
   1036e:	ldr	r2, [sp, #152]	; 0x98
   10370:	b.n	fbf2 <_svfprintf_r+0x342>
   10372:	ldr	r1, [sp, #108]	; 0x6c
   10374:	cmp	r1, #0
   10376:	ble.w	10a2e <_svfprintf_r+0x117e>
   1037a:	ldr	r6, [sp, #48]	; 0x30
   1037c:	ldr	r3, [sp, #56]	; 0x38
   1037e:	cmp	r6, r3
   10380:	it	ge
   10382:	movge	r6, r3
   10384:	cmp	r6, #0
   10386:	ble.n	103a0 <_svfprintf_r+0xaf0>
   10388:	ldr	r3, [sp, #148]	; 0x94
   1038a:	adds	r3, #1
   1038c:	add	r2, r6
   1038e:	cmp	r3, #7
   10390:	strd	r4, r6, [sl]
   10394:	str	r2, [sp, #152]	; 0x98
   10396:	str	r3, [sp, #148]	; 0x94
   10398:	bgt.w	110ae <_svfprintf_r+0x17fe>
   1039c:	add.w	sl, sl, #8
   103a0:	ldr	r5, [sp, #48]	; 0x30
   103a2:	cmp	r6, #0
   103a4:	it	ge
   103a6:	subge	r5, r5, r6
   103a8:	cmp	r5, #0
   103aa:	bgt.w	107b4 <_svfprintf_r+0xf04>
   103ae:	ldr	r3, [sp, #48]	; 0x30
   103b0:	tst.w	r8, #1024	; 0x400
   103b4:	add	r3, r4
   103b6:	str	r3, [sp, #20]
   103b8:	bne.w	107fa <_svfprintf_r+0xf4a>
   103bc:	ldr	r3, [sp, #108]	; 0x6c
   103be:	ldr	r1, [sp, #56]	; 0x38
   103c0:	cmp	r3, r1
   103c2:	blt.n	103cc <_svfprintf_r+0xb1c>
   103c4:	tst.w	r8, #1
   103c8:	beq.w	10d6a <_svfprintf_r+0x14ba>
   103cc:	ldr	r1, [sp, #64]	; 0x40
   103ce:	ldr	r0, [sp, #72]	; 0x48
   103d0:	add	r2, r1
   103d2:	strd	r0, r1, [sl]
   103d6:	ldr	r1, [sp, #148]	; 0x94
   103d8:	str	r2, [sp, #152]	; 0x98
   103da:	adds	r1, #1
   103dc:	cmp	r1, #7
   103de:	str	r1, [sp, #148]	; 0x94
   103e0:	bgt.w	1112e <_svfprintf_r+0x187e>
   103e4:	add.w	sl, sl, #8
   103e8:	ldr	r1, [sp, #56]	; 0x38
   103ea:	adds	r5, r4, r1
   103ec:	subs	r4, r1, r3
   103ee:	ldr	r3, [sp, #20]
   103f0:	subs	r5, r5, r3
   103f2:	cmp	r5, r4
   103f4:	it	ge
   103f6:	movge	r5, r4
   103f8:	cmp	r5, #0
   103fa:	ble.n	10418 <_svfprintf_r+0xb68>
   103fc:	str.w	r3, [sl]
   10400:	ldr	r3, [sp, #148]	; 0x94
   10402:	str.w	r5, [sl, #4]
   10406:	adds	r3, #1
   10408:	add	r2, r5
   1040a:	cmp	r3, #7
   1040c:	str	r2, [sp, #152]	; 0x98
   1040e:	str	r3, [sp, #148]	; 0x94
   10410:	bgt.w	1118a <_svfprintf_r+0x18da>
   10414:	add.w	sl, sl, #8
   10418:	cmp	r5, #0
   1041a:	it	ge
   1041c:	subge	r4, r4, r5
   1041e:	cmp	r4, #0
   10420:	ble.w	fbe0 <_svfprintf_r+0x330>
   10424:	cmp	r4, #16
   10426:	ldr	r3, [sp, #148]	; 0x94
   10428:	ble.w	10b24 <_svfprintf_r+0x1274>
   1042c:	vmov	r6, s22
   10430:	movs	r5, #16
   10432:	b.n	10440 <_svfprintf_r+0xb90>
   10434:	add.w	sl, sl, #8
   10438:	subs	r4, #16
   1043a:	cmp	r4, #16
   1043c:	ble.w	10b24 <_svfprintf_r+0x1274>
   10440:	adds	r3, #1
   10442:	ldr	r1, [pc, #448]	; (10604 <_svfprintf_r+0xd54>)
   10444:	adds	r2, #16
   10446:	cmp	r3, #7
   10448:	strd	r1, r5, [sl]
   1044c:	strd	r3, r2, [sp, #148]	; 0x94
   10450:	ble.n	10434 <_svfprintf_r+0xb84>
   10452:	add	r2, sp, #144	; 0x90
   10454:	mov	r1, r6
   10456:	mov	r0, fp
   10458:	bl	145c8 <__ssprint_r>
   1045c:	cmp	r0, #0
   1045e:	bne.w	1017a <_svfprintf_r+0x8ca>
   10462:	ldrd	r3, r2, [sp, #148]	; 0x94
   10466:	add.w	sl, sp, #156	; 0x9c
   1046a:	b.n	10438 <_svfprintf_r+0xb88>
   1046c:	cmp	r3, #48	; 0x30
   1046e:	beq.w	ff88 <_svfprintf_r+0x6d8>
   10472:	movs	r3, #48	; 0x30
   10474:	subs	r0, #2
   10476:	strb.w	r3, [r4, #-1]
   1047a:	add	r3, sp, #320	; 0x140
   1047c:	subs	r3, r3, r0
   1047e:	ldr.w	r8, [sp, #8]
   10482:	str	r3, [sp, #20]
   10484:	mov	r4, r0
   10486:	b.n	ff92 <_svfprintf_r+0x6e2>
   10488:	tst.w	r8, #1
   1048c:	bne.w	10194 <_svfprintf_r+0x8e4>
   10490:	ldr	r3, [sp, #148]	; 0x94
   10492:	str.w	r4, [sl]
   10496:	adds	r3, #1
   10498:	adds	r2, #1
   1049a:	movs	r1, #1
   1049c:	cmp	r3, #7
   1049e:	str	r2, [sp, #152]	; 0x98
   104a0:	str	r3, [sp, #148]	; 0x94
   104a2:	str.w	r1, [sl, #4]
   104a6:	ble.w	101f4 <_svfprintf_r+0x944>
   104aa:	vmov	r1, s22
   104ae:	add	r2, sp, #144	; 0x90
   104b0:	mov	r0, fp
   104b2:	bl	145c8 <__ssprint_r>
   104b6:	cmp	r0, #0
   104b8:	bne.w	1017a <_svfprintf_r+0x8ca>
   104bc:	ldrd	r3, r2, [sp, #148]	; 0x94
   104c0:	add.w	sl, sp, #156	; 0x9c
   104c4:	b.n	101f8 <_svfprintf_r+0x948>
   104c6:	ldr	r1, [sp, #56]	; 0x38
   104c8:	subs	r4, r1, #1
   104ca:	cmp	r4, #0
   104cc:	ble.w	101f8 <_svfprintf_r+0x948>
   104d0:	cmp	r4, #16
   104d2:	ble.w	10b98 <_svfprintf_r+0x12e8>
   104d6:	vmov	r6, s22
   104da:	movs	r5, #16
   104dc:	b.n	104ea <_svfprintf_r+0xc3a>
   104de:	add.w	sl, sl, #8
   104e2:	subs	r4, #16
   104e4:	cmp	r4, #16
   104e6:	ble.w	10b98 <_svfprintf_r+0x12e8>
   104ea:	adds	r3, #1
   104ec:	ldr	r1, [pc, #276]	; (10604 <_svfprintf_r+0xd54>)
   104ee:	adds	r2, #16
   104f0:	cmp	r3, #7
   104f2:	strd	r1, r5, [sl]
   104f6:	strd	r3, r2, [sp, #148]	; 0x94
   104fa:	ble.n	104de <_svfprintf_r+0xc2e>
   104fc:	add	r2, sp, #144	; 0x90
   104fe:	mov	r1, r6
   10500:	mov	r0, fp
   10502:	bl	145c8 <__ssprint_r>
   10506:	cmp	r0, #0
   10508:	bne.w	1017a <_svfprintf_r+0x8ca>
   1050c:	ldrd	r3, r2, [sp, #148]	; 0x94
   10510:	add.w	sl, sp, #156	; 0x9c
   10514:	b.n	104e2 <_svfprintf_r+0xc32>
   10516:	vmov	r1, s22
   1051a:	add	r2, sp, #144	; 0x90
   1051c:	mov	r0, fp
   1051e:	bl	145c8 <__ssprint_r>
   10522:	cmp	r0, #0
   10524:	bne.w	1017a <_svfprintf_r+0x8ca>
   10528:	ldr	r2, [sp, #152]	; 0x98
   1052a:	add.w	sl, sp, #156	; 0x9c
   1052e:	b.w	fbba <_svfprintf_r+0x30a>
   10532:	ldr	r3, [sp, #8]
   10534:	ands.w	r3, r3, #16
   10538:	bne.w	106be <_svfprintf_r+0xe0e>
   1053c:	ldr	r2, [sp, #8]
   1053e:	ands.w	r2, r2, #64	; 0x40
   10542:	beq.w	10c3a <_svfprintf_r+0x138a>
   10546:	ldr	r0, [sp, #32]
   10548:	ldr.w	r2, [r0], #4
   1054c:	str	r0, [sp, #32]
   1054e:	mov	r1, r3
   10550:	uxth	r2, r2
   10552:	movs	r3, #1
   10554:	b.n	fdfa <_svfprintf_r+0x54a>
   10556:	ands.w	r3, r8, #16
   1055a:	bne.n	10608 <_svfprintf_r+0xd58>
   1055c:	ands.w	r2, r8, #64	; 0x40
   10560:	beq.w	10c1e <_svfprintf_r+0x136e>
   10564:	ldr	r0, [sp, #32]
   10566:	ldr.w	r2, [r0], #4
   1056a:	str	r0, [sp, #32]
   1056c:	mov	r1, r3
   1056e:	uxth	r2, r2
   10570:	b.n	fec4 <_svfprintf_r+0x614>
   10572:	negs	r2, r2
   10574:	sbc.w	r1, r1, r1, lsl #1
   10578:	str.w	r8, [sp, #8]
   1057c:	movs	r0, #45	; 0x2d
   1057e:	movs	r3, #1
   10580:	b.n	fdfc <_svfprintf_r+0x54c>
   10582:	vmov	r1, s22
   10586:	add	r2, sp, #144	; 0x90
   10588:	mov	r0, fp
   1058a:	bl	145c8 <__ssprint_r>
   1058e:	cmp	r0, #0
   10590:	bne.w	1017a <_svfprintf_r+0x8ca>
   10594:	ldrd	r3, r2, [sp, #148]	; 0x94
   10598:	add.w	sl, sp, #156	; 0x9c
   1059c:	b.n	101cc <_svfprintf_r+0x91c>
   1059e:	vmov	r1, s22
   105a2:	add	r2, sp, #144	; 0x90
   105a4:	mov	r0, fp
   105a6:	bl	145c8 <__ssprint_r>
   105aa:	cmp	r0, #0
   105ac:	bne.w	1017a <_svfprintf_r+0x8ca>
   105b0:	ldrd	r3, r2, [sp, #148]	; 0x94
   105b4:	add.w	sl, sp, #156	; 0x9c
   105b8:	b.n	101b2 <_svfprintf_r+0x902>
   105ba:	tst.w	r8, #1
   105be:	beq.w	fbe0 <_svfprintf_r+0x330>
   105c2:	b.n	1001a <_svfprintf_r+0x76a>
   105c4:	str	r3, [sp, #32]
   105c6:	ldrb.w	r3, [r9]
   105ca:	b.w	f968 <_svfprintf_r+0xb8>
   105ce:	add	r4, sp, #320	; 0x140
   105d0:	b.n	ff92 <_svfprintf_r+0x6e2>
   105d2:	tst.w	r8, #512	; 0x200
   105d6:	bne.w	10d90 <_svfprintf_r+0x14e0>
   105da:	ldr.w	r2, [r3], #4
   105de:	str	r3, [sp, #32]
   105e0:	asrs	r1, r2, #31
   105e2:	mov	r3, r1
   105e4:	b.w	fd54 <_svfprintf_r+0x4a4>
   105e8:	ldr	r3, [sp, #32]
   105ea:	ldr	r0, [sp, #16]
   105ec:	ldr.w	r1, [r3], #4
   105f0:	str	r3, [sp, #32]
   105f2:	asrs	r2, r0, #31
   105f4:	strd	r0, r2, [r1]
   105f8:	mov	r4, r9
   105fa:	b.w	f914 <_svfprintf_r+0x64>
   105fe:	nop
   10600:	.word	0x20002454
   10604:	.word	0x20007878
   10608:	ldr	r3, [sp, #32]
   1060a:	ldr.w	r2, [r3], #4
   1060e:	str	r3, [sp, #32]
   10610:	b.n	fec4 <_svfprintf_r+0x614>
   10612:	vcmp.f64	d8, d8
   10616:	vmrs	APSR_nzcv, fpscr
   1061a:	bvs.w	11346 <_svfprintf_r+0x1a96>
   1061e:	ldr	r3, [sp, #44]	; 0x2c
   10620:	cmp	r3, #97	; 0x61
   10622:	beq.w	110ca <_svfprintf_r+0x181a>
   10626:	cmp	r3, #65	; 0x41
   10628:	beq.w	111ac <_svfprintf_r+0x18fc>
   1062c:	ldr	r3, [sp, #12]
   1062e:	adds	r3, #1
   10630:	ldr	r3, [sp, #44]	; 0x2c
   10632:	bic.w	r5, r3, #32
   10636:	beq.w	10f3a <_svfprintf_r+0x168a>
   1063a:	cmp	r5, #71	; 0x47
   1063c:	bne.n	10648 <_svfprintf_r+0xd98>
   1063e:	ldr	r3, [sp, #12]
   10640:	cmp	r3, #0
   10642:	it	eq
   10644:	moveq	r3, #1
   10646:	str	r3, [sp, #12]
   10648:	vmov	r3, s17
   1064c:	cmp	r3, #0
   1064e:	orr.w	r2, r8, #256	; 0x100
   10652:	mov	r6, r8
   10654:	blt.w	11288 <_svfprintf_r+0x19d8>
   10658:	vmov.f64	d10, d8
   1065c:	movs	r3, #0
   1065e:	mov	r8, r2
   10660:	str	r3, [sp, #36]	; 0x24
   10662:	str	r3, [sp, #28]
   10664:	ldr	r3, [sp, #44]	; 0x2c
   10666:	subs	r3, #65	; 0x41
   10668:	cmp	r3, #37	; 0x25
   1066a:	bhi.w	10d9e <_svfprintf_r+0x14ee>
   1066e:	tbh	[pc, r3, lsl #1]
   10672:	.short	0x046f
   10674:	.word	0x03960396
   10678:	.word	0x04680396
   1067c:	.word	0x0396046c
   10680:	.word	0x03960396
   10684:	.word	0x03960396
   10688:	.word	0x03960396
   1068c:	.word	0x03960396
   10690:	.word	0x03960396
   10694:	.word	0x03960396
   10698:	.word	0x03960396
   1069c:	.word	0x03960396
   106a0:	.word	0x03960396
   106a4:	.word	0x03960396
   106a8:	.word	0x03960396
   106ac:	.word	0x03960396
   106b0:	.word	0x03960396
   106b4:	.word	0x03960396
   106b8:	.word	0x04680396
   106bc:	.short	0x046c
   106be:	ldr	r3, [sp, #32]
   106c0:	ldr.w	r2, [r3], #4
   106c4:	str	r3, [sp, #32]
   106c6:	movs	r3, #1
   106c8:	b.w	fdfa <_svfprintf_r+0x54a>
   106cc:	ldr	r3, [sp, #76]	; 0x4c
   106ce:	cmp	r3, #0
   106d0:	beq.w	fa72 <_svfprintf_r+0x1c2>
   106d4:	ldr	r3, [sp, #76]	; 0x4c
   106d6:	ldrb	r3, [r3, #0]
   106d8:	cmp	r3, #0
   106da:	beq.w	fa72 <_svfprintf_r+0x1c2>
   106de:	ldrb.w	r3, [r9]
   106e2:	orr.w	r8, r8, #1024	; 0x400
   106e6:	b.w	f968 <_svfprintf_r+0xb8>
   106ea:	str	r3, [sp, #44]	; 0x2c
   106ec:	str.w	r8, [sp, #8]
   106f0:	b.w	fed6 <_svfprintf_r+0x626>
   106f4:	str	r3, [sp, #44]	; 0x2c
   106f6:	ldr	r3, [pc, #616]	; (10960 <_svfprintf_r+0x10b0>)
   106f8:	str	r3, [sp, #68]	; 0x44
   106fa:	ands.w	r1, r8, #32
   106fe:	beq.w	1090c <_svfprintf_r+0x105c>
   10702:	ldr	r3, [sp, #32]
   10704:	adds	r3, #7
   10706:	bic.w	r3, r3, #7
   1070a:	ldr	r1, [r3, #4]
   1070c:	ldr.w	r2, [r3], #8
   10710:	str	r3, [sp, #32]
   10712:	tst.w	r8, #1
   10716:	beq.n	1072e <_svfprintf_r+0xe7e>
   10718:	orrs.w	r3, r2, r1
   1071c:	beq.n	1072e <_svfprintf_r+0xe7e>
   1071e:	ldr	r3, [sp, #44]	; 0x2c
   10720:	strb.w	r3, [sp, #105]	; 0x69
   10724:	movs	r3, #48	; 0x30
   10726:	orr.w	r8, r8, #2
   1072a:	strb.w	r3, [sp, #104]	; 0x68
   1072e:	bic.w	r3, r8, #1024	; 0x400
   10732:	str	r3, [sp, #8]
   10734:	movs	r3, #2
   10736:	b.w	fdfa <_svfprintf_r+0x54a>
   1073a:	str	r3, [sp, #44]	; 0x2c
   1073c:	b.w	feac <_svfprintf_r+0x5fc>
   10740:	str	r3, [sp, #44]	; 0x2c
   10742:	ldr	r3, [pc, #544]	; (10964 <_svfprintf_r+0x10b4>)
   10744:	str	r3, [sp, #68]	; 0x44
   10746:	b.n	106fa <_svfprintf_r+0xe4a>
   10748:	ldr	r3, [sp, #32]
   1074a:	movs	r1, #1
   1074c:	ldr.w	r2, [r3], #4
   10750:	str	r1, [sp, #8]
   10752:	strb.w	r2, [sp, #220]	; 0xdc
   10756:	str	r3, [sp, #32]
   10758:	str	r1, [sp, #20]
   1075a:	add	r4, sp, #220	; 0xdc
   1075c:	b.w	fcbe <_svfprintf_r+0x40e>
   10760:	vmov	r1, s22
   10764:	add	r2, sp, #144	; 0x90
   10766:	mov	r0, fp
   10768:	bl	145c8 <__ssprint_r>
   1076c:	cmp	r0, #0
   1076e:	bne.w	1017a <_svfprintf_r+0x8ca>
   10772:	ldr	r2, [sp, #152]	; 0x98
   10774:	add.w	sl, sp, #156	; 0x9c
   10778:	b.n	10036 <_svfprintf_r+0x786>
   1077a:	ldr	r3, [sp, #12]
   1077c:	str	r4, [sp, #28]
   1077e:	cmp	r3, #6
   10780:	mov	r2, r4
   10782:	it	cs
   10784:	movcs	r3, #6
   10786:	str	r4, [sp, #12]
   10788:	mov	r1, r4
   1078a:	strd	r2, r2, [sp, #48]	; 0x30
   1078e:	ldr	r4, [pc, #472]	; (10968 <_svfprintf_r+0x10b8>)
   10790:	str	r3, [sp, #8]
   10792:	str	r3, [sp, #20]
   10794:	str	r2, [sp, #60]	; 0x3c
   10796:	b.w	fc72 <_svfprintf_r+0x3c2>
   1079a:	movs	r1, #64	; 0x40
   1079c:	mov	r0, fp
   1079e:	bl	bad8 <_malloc_r>
   107a2:	str	r0, [r4, #0]
   107a4:	str	r0, [r4, #16]
   107a6:	cmp	r0, #0
   107a8:	beq.w	113ca <_svfprintf_r+0x1b1a>
   107ac:	movs	r3, #64	; 0x40
   107ae:	str	r3, [r4, #20]
   107b0:	b.w	f8f0 <_svfprintf_r+0x40>
   107b4:	cmp	r5, #16
   107b6:	ldr	r3, [sp, #148]	; 0x94
   107b8:	ble.w	10c76 <_svfprintf_r+0x13c6>
   107bc:	mov	r1, sl
   107be:	movs	r6, #16
   107c0:	vmov	sl, s22
   107c4:	b.n	107d0 <_svfprintf_r+0xf20>
   107c6:	adds	r1, #8
   107c8:	subs	r5, #16
   107ca:	cmp	r5, #16
   107cc:	ble.w	10c74 <_svfprintf_r+0x13c4>
   107d0:	adds	r3, #1
   107d2:	ldr	r0, [pc, #408]	; (1096c <_svfprintf_r+0x10bc>)
   107d4:	adds	r2, #16
   107d6:	cmp	r3, #7
   107d8:	strd	r0, r6, [r1]
   107dc:	strd	r3, r2, [sp, #148]	; 0x94
   107e0:	ble.n	107c6 <_svfprintf_r+0xf16>
   107e2:	add	r2, sp, #144	; 0x90
   107e4:	mov	r1, sl
   107e6:	mov	r0, fp
   107e8:	bl	145c8 <__ssprint_r>
   107ec:	cmp	r0, #0
   107ee:	bne.w	1017a <_svfprintf_r+0x8ca>
   107f2:	ldrd	r3, r2, [sp, #148]	; 0x94
   107f6:	add	r1, sp, #156	; 0x9c
   107f8:	b.n	107c8 <_svfprintf_r+0xf18>
   107fa:	ldr	r3, [sp, #56]	; 0x38
   107fc:	str.w	r9, [sp, #36]	; 0x24
   10800:	adds	r3, r4, r3
   10802:	str	r3, [sp, #12]
   10804:	ldr	r3, [sp, #52]	; 0x34
   10806:	str.w	r8, [sp, #40]	; 0x28
   1080a:	ldr	r6, [sp, #76]	; 0x4c
   1080c:	ldr	r5, [sp, #20]
   1080e:	ldr.w	r9, [sp, #88]	; 0x58
   10812:	ldr.w	r8, [sp, #60]	; 0x3c
   10816:	str	r4, [sp, #44]	; 0x2c
   10818:	vmov	r1, s22
   1081c:	mov	r0, sl
   1081e:	cmp	r3, #0
   10820:	beq.n	1088c <_svfprintf_r+0xfdc>
   10822:	cmp.w	r8, #0
   10826:	bne.n	10894 <_svfprintf_r+0xfe4>
   10828:	ldr	r3, [sp, #52]	; 0x34
   1082a:	subs	r3, #1
   1082c:	subs	r6, #1
   1082e:	str	r3, [sp, #52]	; 0x34
   10830:	ldr	r3, [sp, #84]	; 0x54
   10832:	strd	r3, r9, [r0]
   10836:	ldr	r3, [sp, #148]	; 0x94
   10838:	adds	r3, #1
   1083a:	add	r2, r9
   1083c:	cmp	r3, #7
   1083e:	str	r2, [sp, #152]	; 0x98
   10840:	str	r3, [sp, #148]	; 0x94
   10842:	bgt.n	1091e <_svfprintf_r+0x106e>
   10844:	adds	r0, #8
   10846:	ldr	r3, [sp, #12]
   10848:	ldrb.w	ip, [r6]
   1084c:	subs	r3, r3, r5
   1084e:	cmp	r3, ip
   10850:	it	ge
   10852:	movge	r3, ip
   10854:	cmp	r3, #0
   10856:	mov	sl, r3
   10858:	ble.n	10874 <_svfprintf_r+0xfc4>
   1085a:	ldr	r4, [sp, #148]	; 0x94
   1085c:	adds	r4, #1
   1085e:	add	r2, r3
   10860:	cmp	r4, #7
   10862:	strd	r5, r3, [r0]
   10866:	str	r2, [sp, #152]	; 0x98
   10868:	str	r4, [sp, #148]	; 0x94
   1086a:	bgt.w	10b5c <_svfprintf_r+0x12ac>
   1086e:	ldrb.w	ip, [r6]
   10872:	adds	r0, #8
   10874:	cmp.w	sl, #0
   10878:	ite	ge
   1087a:	subge.w	r4, ip, sl
   1087e:	movlt	r4, ip
   10880:	cmp	r4, #0
   10882:	bgt.n	1089a <_svfprintf_r+0xfea>
   10884:	add	r5, ip
   10886:	ldr	r3, [sp, #52]	; 0x34
   10888:	cmp	r3, #0
   1088a:	bne.n	10822 <_svfprintf_r+0xf72>
   1088c:	cmp.w	r8, #0
   10890:	beq.w	10fec <_svfprintf_r+0x173c>
   10894:	add.w	r8, r8, #4294967295
   10898:	b.n	10830 <_svfprintf_r+0xf80>
   1089a:	cmp	r4, #16
   1089c:	ldr.w	ip, [sp, #148]	; 0x94
   108a0:	ble.n	108ec <_svfprintf_r+0x103c>
   108a2:	str	r5, [sp, #20]
   108a4:	mov.w	sl, #16
   108a8:	mov	r3, ip
   108aa:	mov	r5, r1
   108ac:	b.n	108b8 <_svfprintf_r+0x1008>
   108ae:	subs	r4, #16
   108b0:	cmp	r4, #16
   108b2:	add.w	r0, r0, #8
   108b6:	ble.n	108e6 <_svfprintf_r+0x1036>
   108b8:	adds	r3, #1
   108ba:	ldr	r1, [pc, #176]	; (1096c <_svfprintf_r+0x10bc>)
   108bc:	adds	r2, #16
   108be:	cmp	r3, #7
   108c0:	strd	r1, sl, [r0]
   108c4:	strd	r3, r2, [sp, #148]	; 0x94
   108c8:	ble.n	108ae <_svfprintf_r+0xffe>
   108ca:	add	r2, sp, #144	; 0x90
   108cc:	mov	r1, r5
   108ce:	mov	r0, fp
   108d0:	bl	145c8 <__ssprint_r>
   108d4:	cmp	r0, #0
   108d6:	bne.w	1017a <_svfprintf_r+0x8ca>
   108da:	subs	r4, #16
   108dc:	cmp	r4, #16
   108de:	ldrd	r3, r2, [sp, #148]	; 0x94
   108e2:	add	r0, sp, #156	; 0x9c
   108e4:	bgt.n	108b8 <_svfprintf_r+0x1008>
   108e6:	mov	r1, r5
   108e8:	ldr	r5, [sp, #20]
   108ea:	mov	ip, r3
   108ec:	add.w	r3, ip, #1
   108f0:	add	r2, r4
   108f2:	str	r4, [r0, #4]
   108f4:	cmp	r3, #7
   108f6:	ldr	r4, [pc, #116]	; (1096c <_svfprintf_r+0x10bc>)
   108f8:	str	r4, [r0, #0]
   108fa:	strd	r3, r2, [sp, #148]	; 0x94
   108fe:	bgt.w	1108e <_svfprintf_r+0x17de>
   10902:	ldrb.w	ip, [r6]
   10906:	adds	r0, #8
   10908:	add	r5, ip
   1090a:	b.n	10886 <_svfprintf_r+0xfd6>
   1090c:	ands.w	r3, r8, #16
   10910:	beq.w	10a98 <_svfprintf_r+0x11e8>
   10914:	ldr	r3, [sp, #32]
   10916:	ldr.w	r2, [r3], #4
   1091a:	str	r3, [sp, #32]
   1091c:	b.n	10712 <_svfprintf_r+0xe62>
   1091e:	add	r2, sp, #144	; 0x90
   10920:	mov	r0, fp
   10922:	str	r1, [sp, #20]
   10924:	bl	145c8 <__ssprint_r>
   10928:	cmp	r0, #0
   1092a:	bne.w	1017a <_svfprintf_r+0x8ca>
   1092e:	ldr	r2, [sp, #152]	; 0x98
   10930:	ldr	r1, [sp, #20]
   10932:	add	r0, sp, #156	; 0x9c
   10934:	b.n	10846 <_svfprintf_r+0xf96>
   10936:	ldr	r0, [sp, #8]
   10938:	str.w	sl, [sp, #28]
   1093c:	add	r4, sp, #320	; 0x140
   1093e:	and.w	r0, r0, #1024	; 0x400
   10942:	movs	r5, #0
   10944:	vmov	s20, fp
   10948:	ldr	r3, [pc, #36]	; (10970 <_svfprintf_r+0x10c0>)
   1094a:	ldr.w	sl, [sp, #76]	; 0x4c
   1094e:	str.w	r9, [sp, #20]
   10952:	mov	fp, r4
   10954:	mov.w	r8, #5
   10958:	mov	ip, r5
   1095a:	mov	r4, r0
   1095c:	b.n	10980 <_svfprintf_r+0x10d0>
   1095e:	nop
   10960:	.word	0x200009a8
   10964:	.word	0x200009bc
   10968:	.word	0x200009d0
   1096c:	.word	0x20007878
   10970:	.word	0xcccccccd
   10974:	cmp	r2, #10
   10976:	sbcs.w	r1, r1, #0
   1097a:	bcc.n	109ea <_svfprintf_r+0x113a>
   1097c:	mov	r2, r9
   1097e:	mov	r1, r6
   10980:	adds	r0, r2, r1
   10982:	adc.w	r0, r0, #0
   10986:	umull	r5, r6, r3, r0
   1098a:	bic.w	r5, r6, #3
   1098e:	add.w	r5, r5, r6, lsr #2
   10992:	subs	r0, r0, r5
   10994:	subs	r5, r2, r0
   10996:	mov.w	r6, #3435973836	; 0xcccccccc
   1099a:	sbc.w	lr, r1, #0
   1099e:	mul.w	r6, r6, r5
   109a2:	umull	r9, r5, r5, r3
   109a6:	mla	r6, r3, lr, r6
   109aa:	and.w	lr, r9, #1
   109ae:	add	r6, r5
   109b0:	umull	r5, lr, lr, r8
   109b4:	adds	r5, r5, r0
   109b6:	mov.w	r9, r9, lsr #1
   109ba:	adds	r5, #48	; 0x30
   109bc:	strb.w	r5, [fp, #-1]
   109c0:	orr.w	r9, r9, r6, lsl #31
   109c4:	add.w	ip, ip, #1
   109c8:	add.w	fp, fp, #4294967295
   109cc:	lsrs	r6, r6, #1
   109ce:	cmp	r4, #0
   109d0:	beq.n	10974 <_svfprintf_r+0x10c4>
   109d2:	ldrb.w	r0, [sl]
   109d6:	cmp	ip, r0
   109d8:	bne.n	10974 <_svfprintf_r+0x10c4>
   109da:	cmp.w	ip, #255	; 0xff
   109de:	beq.n	10974 <_svfprintf_r+0x10c4>
   109e0:	cmp	r2, #10
   109e2:	sbcs.w	r1, r1, #0
   109e6:	bcs.w	10d08 <_svfprintf_r+0x1458>
   109ea:	mov	r4, fp
   109ec:	add	r3, sp, #320	; 0x140
   109ee:	subs	r3, r3, r4
   109f0:	ldr.w	r9, [sp, #20]
   109f4:	str.w	sl, [sp, #76]	; 0x4c
   109f8:	vmov	fp, s20
   109fc:	ldr.w	sl, [sp, #28]
   10a00:	ldr.w	r8, [sp, #8]
   10a04:	str.w	ip, [sp, #56]	; 0x38
   10a08:	str	r3, [sp, #20]
   10a0a:	b.w	ff92 <_svfprintf_r+0x6e2>
   10a0e:	vmov	r1, s22
   10a12:	add	r2, sp, #144	; 0x90
   10a14:	mov	r0, fp
   10a16:	bl	145c8 <__ssprint_r>
   10a1a:	cmp	r0, #0
   10a1c:	bne.w	1017a <_svfprintf_r+0x8ca>
   10a20:	ldrb.w	r1, [sp, #103]	; 0x67
   10a24:	ldr	r2, [sp, #152]	; 0x98
   10a26:	add.w	sl, sp, #156	; 0x9c
   10a2a:	b.w	fb5a <_svfprintf_r+0x2aa>
   10a2e:	ldr	r3, [sp, #148]	; 0x94
   10a30:	ldr	r0, [pc, #760]	; (10d2c <_svfprintf_r+0x147c>)
   10a32:	str.w	r0, [sl]
   10a36:	adds	r3, #1
   10a38:	adds	r2, #1
   10a3a:	movs	r0, #1
   10a3c:	cmp	r3, #7
   10a3e:	str	r2, [sp, #152]	; 0x98
   10a40:	str	r3, [sp, #148]	; 0x94
   10a42:	str.w	r0, [sl, #4]
   10a46:	bgt.w	10d38 <_svfprintf_r+0x1488>
   10a4a:	add.w	sl, sl, #8
   10a4e:	cmp	r1, #0
   10a50:	bne.w	10bb2 <_svfprintf_r+0x1302>
   10a54:	ldr	r1, [sp, #56]	; 0x38
   10a56:	and.w	r3, r8, #1
   10a5a:	orrs	r3, r1
   10a5c:	beq.w	fbe0 <_svfprintf_r+0x330>
   10a60:	ldr	r3, [sp, #64]	; 0x40
   10a62:	ldr	r1, [sp, #72]	; 0x48
   10a64:	add	r2, r3
   10a66:	strd	r1, r3, [sl]
   10a6a:	ldr	r3, [sp, #148]	; 0x94
   10a6c:	str	r2, [sp, #152]	; 0x98
   10a6e:	adds	r3, #1
   10a70:	cmp	r3, #7
   10a72:	str	r3, [sp, #148]	; 0x94
   10a74:	bgt.w	10f1c <_svfprintf_r+0x166c>
   10a78:	add.w	sl, sl, #8
   10a7c:	ldr	r1, [sp, #56]	; 0x38
   10a7e:	str.w	r4, [sl]
   10a82:	adds	r3, #1
   10a84:	add	r2, r1
   10a86:	cmp	r3, #7
   10a88:	strd	r3, r2, [sp, #148]	; 0x94
   10a8c:	str.w	r1, [sl, #4]
   10a90:	ble.w	fbdc <_svfprintf_r+0x32c>
   10a94:	b.w	10212 <_svfprintf_r+0x962>
   10a98:	ands.w	r2, r8, #64	; 0x40
   10a9c:	beq.w	10c5a <_svfprintf_r+0x13aa>
   10aa0:	ldr	r0, [sp, #32]
   10aa2:	ldr.w	r2, [r0], #4
   10aa6:	str	r0, [sp, #32]
   10aa8:	mov	r1, r3
   10aaa:	uxth	r2, r2
   10aac:	b.n	10712 <_svfprintf_r+0xe62>
   10aae:	vmov	r1, s22
   10ab2:	add	r2, sp, #144	; 0x90
   10ab4:	mov	r0, fp
   10ab6:	bl	145c8 <__ssprint_r>
   10aba:	cmp	r0, #0
   10abc:	bne.w	1017a <_svfprintf_r+0x8ca>
   10ac0:	ldr	r2, [sp, #152]	; 0x98
   10ac2:	add.w	sl, sp, #156	; 0x9c
   10ac6:	b.w	10010 <_svfprintf_r+0x760>
   10aca:	add	r6, sp, #136	; 0x88
   10acc:	movs	r2, #8
   10ace:	movs	r1, #0
   10ad0:	mov	r0, r6
   10ad2:	str	r4, [sp, #116]	; 0x74
   10ad4:	bl	9444 <memset>
   10ad8:	ldr	r3, [sp, #12]
   10ada:	adds	r2, r3, #1
   10adc:	beq.w	10c96 <_svfprintf_r+0x13e6>
   10ae0:	movs	r5, #0
   10ae2:	str.w	r9, [sp, #8]
   10ae6:	str.w	r8, [sp, #28]
   10aea:	mov	r9, r3
   10aec:	mov	r8, r5
   10aee:	b.n	10b0a <_svfprintf_r+0x125a>
   10af0:	add	r1, sp, #220	; 0xdc
   10af2:	mov	r0, fp
   10af4:	bl	14374 <_wcrtomb_r>
   10af8:	adds	r3, r0, #1
   10afa:	add	r0, r8
   10afc:	beq.w	11290 <_svfprintf_r+0x19e0>
   10b00:	cmp	r0, r9
   10b02:	bgt.n	10b16 <_svfprintf_r+0x1266>
   10b04:	beq.w	11338 <_svfprintf_r+0x1a88>
   10b08:	mov	r8, r0
   10b0a:	ldr	r2, [sp, #116]	; 0x74
   10b0c:	ldr	r2, [r2, r5]
   10b0e:	mov	r3, r6
   10b10:	adds	r5, #4
   10b12:	cmp	r2, #0
   10b14:	bne.n	10af0 <_svfprintf_r+0x1240>
   10b16:	str.w	r8, [sp, #20]
   10b1a:	ldr.w	r9, [sp, #8]
   10b1e:	ldr.w	r8, [sp, #28]
   10b22:	b.n	10cb0 <_svfprintf_r+0x1400>
   10b24:	adds	r3, #1
   10b26:	ldr	r1, [pc, #520]	; (10d30 <_svfprintf_r+0x1480>)
   10b28:	str.w	r4, [sl, #4]
   10b2c:	add	r2, r4
   10b2e:	cmp	r3, #7
   10b30:	str.w	r1, [sl]
   10b34:	strd	r3, r2, [sp, #148]	; 0x94
   10b38:	ble.w	fbdc <_svfprintf_r+0x32c>
   10b3c:	b.w	10212 <_svfprintf_r+0x962>
   10b40:	vmov	r1, s22
   10b44:	add	r2, sp, #144	; 0x90
   10b46:	mov	r0, fp
   10b48:	bl	145c8 <__ssprint_r>
   10b4c:	cmp	r0, #0
   10b4e:	bne.w	1017a <_svfprintf_r+0x8ca>
   10b52:	ldr	r2, [sp, #152]	; 0x98
   10b54:	add.w	sl, sp, #156	; 0x9c
   10b58:	b.w	fbae <_svfprintf_r+0x2fe>
   10b5c:	add	r2, sp, #144	; 0x90
   10b5e:	mov	r0, fp
   10b60:	str	r1, [sp, #20]
   10b62:	bl	145c8 <__ssprint_r>
   10b66:	cmp	r0, #0
   10b68:	bne.w	1017a <_svfprintf_r+0x8ca>
   10b6c:	ldrb.w	ip, [r6]
   10b70:	ldr	r2, [sp, #152]	; 0x98
   10b72:	ldr	r1, [sp, #20]
   10b74:	add	r0, sp, #156	; 0x9c
   10b76:	b.n	10874 <_svfprintf_r+0xfc4>
   10b78:	cmp	r3, #1
   10b7a:	str.w	r8, [sp, #8]
   10b7e:	bne.w	ff68 <_svfprintf_r+0x6b8>
   10b82:	b.w	102ac <_svfprintf_r+0x9fc>
   10b86:	ldr	r3, [sp, #32]
   10b88:	ldr	r1, [sp, #16]
   10b8a:	ldr.w	r2, [r3], #4
   10b8e:	mov	r4, r9
   10b90:	str	r1, [r2, #0]
   10b92:	str	r3, [sp, #32]
   10b94:	b.w	f914 <_svfprintf_r+0x64>
   10b98:	adds	r3, #1
   10b9a:	ldr	r1, [pc, #404]	; (10d30 <_svfprintf_r+0x1480>)
   10b9c:	str.w	r4, [sl, #4]
   10ba0:	add	r2, r4
   10ba2:	cmp	r3, #7
   10ba4:	strd	r3, r2, [sp, #148]	; 0x94
   10ba8:	str.w	r1, [sl]
   10bac:	ble.w	101f4 <_svfprintf_r+0x944>
   10bb0:	b.n	104aa <_svfprintf_r+0xbfa>
   10bb2:	ldr	r3, [sp, #64]	; 0x40
   10bb4:	ldr	r0, [sp, #72]	; 0x48
   10bb6:	add	r2, r3
   10bb8:	strd	r0, r3, [sl]
   10bbc:	ldr	r3, [sp, #148]	; 0x94
   10bbe:	str	r2, [sp, #152]	; 0x98
   10bc0:	adds	r3, #1
   10bc2:	cmp	r3, #7
   10bc4:	str	r3, [sp, #148]	; 0x94
   10bc6:	bgt.w	10f1c <_svfprintf_r+0x166c>
   10bca:	add.w	sl, sl, #8
   10bce:	cmp	r1, #0
   10bd0:	bge.w	10a7c <_svfprintf_r+0x11cc>
   10bd4:	negs	r5, r1
   10bd6:	adds	r1, #16
   10bd8:	bge.w	111fa <_svfprintf_r+0x194a>
   10bdc:	vmov	r1, s22
   10be0:	movs	r6, #16
   10be2:	b.n	10bf0 <_svfprintf_r+0x1340>
   10be4:	add.w	sl, sl, #8
   10be8:	subs	r5, #16
   10bea:	cmp	r5, #16
   10bec:	ble.w	111fa <_svfprintf_r+0x194a>
   10bf0:	adds	r3, #1
   10bf2:	ldr	r0, [pc, #316]	; (10d30 <_svfprintf_r+0x1480>)
   10bf4:	adds	r2, #16
   10bf6:	cmp	r3, #7
   10bf8:	strd	r0, r6, [sl]
   10bfc:	strd	r3, r2, [sp, #148]	; 0x94
   10c00:	ble.n	10be4 <_svfprintf_r+0x1334>
   10c02:	add	r2, sp, #144	; 0x90
   10c04:	mov	r0, fp
   10c06:	str	r1, [sp, #12]
   10c08:	bl	145c8 <__ssprint_r>
   10c0c:	cmp	r0, #0
   10c0e:	bne.w	1017a <_svfprintf_r+0x8ca>
   10c12:	ldrd	r3, r2, [sp, #148]	; 0x94
   10c16:	ldr	r1, [sp, #12]
   10c18:	add.w	sl, sp, #156	; 0x9c
   10c1c:	b.n	10be8 <_svfprintf_r+0x1338>
   10c1e:	ldr	r3, [sp, #32]
   10c20:	ands.w	r1, r8, #512	; 0x200
   10c24:	itte	ne
   10c26:	movne	r1, r2
   10c28:	ldrne.w	r2, [r3], #4
   10c2c:	ldreq.w	r2, [r3], #4
   10c30:	str	r3, [sp, #32]
   10c32:	it	ne
   10c34:	uxtbne	r2, r2
   10c36:	b.w	fec4 <_svfprintf_r+0x614>
   10c3a:	ldr	r3, [sp, #8]
   10c3c:	ands.w	r1, r3, #512	; 0x200
   10c40:	ldr	r3, [sp, #32]
   10c42:	itte	ne
   10c44:	movne	r1, r2
   10c46:	ldrne.w	r2, [r3], #4
   10c4a:	ldreq.w	r2, [r3], #4
   10c4e:	str	r3, [sp, #32]
   10c50:	it	ne
   10c52:	uxtbne	r2, r2
   10c54:	movs	r3, #1
   10c56:	b.w	fdfa <_svfprintf_r+0x54a>
   10c5a:	ldr	r3, [sp, #32]
   10c5c:	ands.w	r1, r8, #512	; 0x200
   10c60:	itte	ne
   10c62:	movne	r1, r2
   10c64:	ldrne.w	r2, [r3], #4
   10c68:	ldreq.w	r2, [r3], #4
   10c6c:	str	r3, [sp, #32]
   10c6e:	it	ne
   10c70:	uxtbne	r2, r2
   10c72:	b.n	10712 <_svfprintf_r+0xe62>
   10c74:	mov	sl, r1
   10c76:	adds	r3, #1
   10c78:	ldr	r1, [pc, #180]	; (10d30 <_svfprintf_r+0x1480>)
   10c7a:	str.w	r5, [sl, #4]
   10c7e:	add	r2, r5
   10c80:	cmp	r3, #7
   10c82:	strd	r3, r2, [sp, #148]	; 0x94
   10c86:	str.w	r1, [sl]
   10c8a:	bgt.w	10f00 <_svfprintf_r+0x1650>
   10c8e:	add.w	sl, sl, #8
   10c92:	b.w	103ae <_svfprintf_r+0xafe>
   10c96:	movs	r3, #0
   10c98:	mov	r1, r3
   10c9a:	str	r6, [sp, #0]
   10c9c:	add	r2, sp, #116	; 0x74
   10c9e:	mov	r0, fp
   10ca0:	bl	143c0 <_wcsrtombs_r>
   10ca4:	mov	r3, r0
   10ca6:	adds	r3, #1
   10ca8:	str	r0, [sp, #20]
   10caa:	beq.w	11290 <_svfprintf_r+0x19e0>
   10cae:	str	r4, [sp, #116]	; 0x74
   10cb0:	ldr	r3, [sp, #20]
   10cb2:	cmp	r3, #0
   10cb4:	beq.n	10d54 <_svfprintf_r+0x14a4>
   10cb6:	cmp	r3, #99	; 0x63
   10cb8:	bgt.w	10eec <_svfprintf_r+0x163c>
   10cbc:	movs	r3, #0
   10cbe:	str	r3, [sp, #28]
   10cc0:	add	r4, sp, #220	; 0xdc
   10cc2:	movs	r2, #8
   10cc4:	movs	r1, #0
   10cc6:	mov	r0, r6
   10cc8:	bl	9444 <memset>
   10ccc:	ldr	r5, [sp, #20]
   10cce:	str	r6, [sp, #0]
   10cd0:	mov	r3, r5
   10cd2:	add	r2, sp, #116	; 0x74
   10cd4:	mov	r1, r4
   10cd6:	mov	r0, fp
   10cd8:	bl	143c0 <_wcsrtombs_r>
   10cdc:	cmp	r5, r0
   10cde:	bne.w	113da <_svfprintf_r+0x1b2a>
   10ce2:	ldr	r2, [sp, #20]
   10ce4:	movs	r3, #0
   10ce6:	strb	r3, [r4, r2]
   10ce8:	bic.w	r2, r2, r2, asr #31
   10cec:	strd	r3, r3, [sp, #48]	; 0x30
   10cf0:	ldrb.w	r1, [sp, #103]	; 0x67
   10cf4:	str	r3, [sp, #12]
   10cf6:	str	r2, [sp, #8]
   10cf8:	str	r3, [sp, #60]	; 0x3c
   10cfa:	b.w	fc72 <_svfprintf_r+0x3c2>
   10cfe:	movs	r1, #45	; 0x2d
   10d00:	strb.w	r1, [sp, #103]	; 0x67
   10d04:	b.w	fc50 <_svfprintf_r+0x3a0>
   10d08:	ldr	r3, [sp, #88]	; 0x58
   10d0a:	ldr	r1, [sp, #84]	; 0x54
   10d0c:	sub.w	fp, fp, r3
   10d10:	mov	r2, r3
   10d12:	mov	r0, fp
   10d14:	bl	daf0 <strncpy>
   10d18:	ldrb.w	r2, [sl, #1]
   10d1c:	ldr	r3, [pc, #20]	; (10d34 <_svfprintf_r+0x1484>)
   10d1e:	cbz	r2, 10d24 <_svfprintf_r+0x1474>
   10d20:	add.w	sl, sl, #1
   10d24:	mov.w	ip, #0
   10d28:	b.n	1097c <_svfprintf_r+0x10cc>
   10d2a:	nop
   10d2c:	.word	0x200009d8
   10d30:	.word	0x20007878
   10d34:	.word	0xcccccccd
   10d38:	vmov	r1, s22
   10d3c:	add	r2, sp, #144	; 0x90
   10d3e:	mov	r0, fp
   10d40:	bl	145c8 <__ssprint_r>
   10d44:	cmp	r0, #0
   10d46:	bne.w	1017a <_svfprintf_r+0x8ca>
   10d4a:	ldr	r1, [sp, #108]	; 0x6c
   10d4c:	ldr	r2, [sp, #152]	; 0x98
   10d4e:	add.w	sl, sp, #156	; 0x9c
   10d52:	b.n	10a4e <_svfprintf_r+0x119e>
   10d54:	ldr	r3, [sp, #20]
   10d56:	ldrb.w	r1, [sp, #103]	; 0x67
   10d5a:	str	r3, [sp, #60]	; 0x3c
   10d5c:	strd	r3, r3, [sp, #8]
   10d60:	strd	r3, r3, [sp, #48]	; 0x30
   10d64:	str	r3, [sp, #28]
   10d66:	b.w	fc72 <_svfprintf_r+0x3c2>
   10d6a:	ldr	r1, [sp, #56]	; 0x38
   10d6c:	ldr	r0, [sp, #20]
   10d6e:	adds	r5, r4, r1
   10d70:	subs	r5, r5, r0
   10d72:	subs	r4, r1, r3
   10d74:	cmp	r5, r4
   10d76:	it	ge
   10d78:	movge	r5, r4
   10d7a:	b.w	10418 <_svfprintf_r+0xb68>
   10d7e:	ldr	r3, [sp, #32]
   10d80:	ldr	r1, [sp, #16]
   10d82:	ldr.w	r2, [r3], #4
   10d86:	str	r3, [sp, #32]
   10d88:	strh	r1, [r2, #0]
   10d8a:	mov	r4, r9
   10d8c:	b.w	f914 <_svfprintf_r+0x64>
   10d90:	ldrsb.w	r2, [r3], #4
   10d94:	str	r3, [sp, #32]
   10d96:	asrs	r1, r2, #31
   10d98:	mov	r3, r1
   10d9a:	b.w	fd54 <_svfprintf_r+0x4a4>
   10d9e:	ldr	r2, [sp, #12]
   10da0:	movs	r1, #2
   10da2:	add	r3, sp, #136	; 0x88
   10da4:	str	r3, [sp, #4]
   10da6:	add	r3, sp, #116	; 0x74
   10da8:	str	r3, [sp, #0]
   10daa:	mov	r0, fp
   10dac:	add	r3, sp, #108	; 0x6c
   10dae:	vmov.f64	d0, d10
   10db2:	str	r2, [sp, #8]
   10db4:	bl	131e0 <_dtoa_r>
   10db8:	cmp	r5, #71	; 0x47
   10dba:	ldr	r2, [sp, #8]
   10dbc:	mov	r4, r0
   10dbe:	beq.w	11084 <_svfprintf_r+0x17d4>
   10dc2:	cmp	r5, #70	; 0x46
   10dc4:	add	r0, r2
   10dc6:	bne.n	10dd4 <_svfprintf_r+0x1524>
   10dc8:	ldrb	r3, [r4, #0]
   10dca:	cmp	r3, #48	; 0x30
   10dcc:	beq.w	112ae <_svfprintf_r+0x19fe>
   10dd0:	ldr	r2, [sp, #108]	; 0x6c
   10dd2:	add	r0, r2
   10dd4:	vcmp.f64	d10, #0.0
   10dd8:	vmrs	APSR_nzcv, fpscr
   10ddc:	bne.w	1106c <_svfprintf_r+0x17bc>
   10de0:	mov	r3, r0
   10de2:	subs	r3, r3, r4
   10de4:	str	r3, [sp, #56]	; 0x38
   10de6:	cmp	r5, #71	; 0x47
   10de8:	beq.w	1100c <_svfprintf_r+0x175c>
   10dec:	cmp	r5, #70	; 0x46
   10dee:	beq.w	1115c <_svfprintf_r+0x18ac>
   10df2:	ldr	r3, [sp, #108]	; 0x6c
   10df4:	str	r3, [sp, #48]	; 0x30
   10df6:	ldr	r3, [sp, #48]	; 0x30
   10df8:	cmp	r5, #65	; 0x41
   10dfa:	add.w	r3, r3, #4294967295
   10dfe:	str	r3, [sp, #108]	; 0x6c
   10e00:	beq.w	111ce <_svfprintf_r+0x191e>
   10e04:	ldrb.w	r2, [sp, #44]	; 0x2c
   10e08:	movs	r1, #0
   10e0a:	cmp	r3, #0
   10e0c:	it	lt
   10e0e:	ldrlt	r3, [sp, #48]	; 0x30
   10e10:	strb.w	r2, [sp, #120]	; 0x78
   10e14:	itte	lt
   10e16:	rsblt	r3, r3, #1
   10e1a:	movlt	r2, #45	; 0x2d
   10e1c:	movge	r2, #43	; 0x2b
   10e1e:	cmp	r3, #9
   10e20:	strb.w	r2, [sp, #121]	; 0x79
   10e24:	ble.w	111dc <_svfprintf_r+0x192c>
   10e28:	add.w	r5, sp, #143	; 0x8f
   10e2c:	ldr.w	ip, [pc, #1052]	; 1124c <_svfprintf_r+0x199c>
   10e30:	mov	r2, r5
   10e32:	mov	r0, r2
   10e34:	smull	r2, r1, ip, r3
   10e38:	asrs	r2, r3, #31
   10e3a:	rsb	r2, r2, r1, asr #2
   10e3e:	add.w	r1, r2, r2, lsl #2
   10e42:	sub.w	r1, r3, r1, lsl #1
   10e46:	adds	r1, #48	; 0x30
   10e48:	strb.w	r1, [r0, #-1]
   10e4c:	mov	r1, r3
   10e4e:	cmp	r1, #99	; 0x63
   10e50:	mov	r3, r2
   10e52:	add.w	r2, r0, #4294967295
   10e56:	bgt.n	10e32 <_svfprintf_r+0x1582>
   10e58:	adds	r3, #48	; 0x30
   10e5a:	uxtb	r1, r3
   10e5c:	subs	r3, r0, #2
   10e5e:	cmp	r5, r3
   10e60:	strb.w	r1, [r2, #-1]
   10e64:	bls.w	1137e <_svfprintf_r+0x1ace>
   10e68:	mov	r3, r2
   10e6a:	add.w	r2, sp, #122	; 0x7a
   10e6e:	b.n	10e74 <_svfprintf_r+0x15c4>
   10e70:	ldrb.w	r1, [r3], #1
   10e74:	strb.w	r1, [r2], #1
   10e78:	cmp	r5, r3
   10e7a:	bne.n	10e70 <_svfprintf_r+0x15c0>
   10e7c:	add.w	r3, sp, #145	; 0x91
   10e80:	add.w	r2, sp, #122	; 0x7a
   10e84:	subs	r3, r3, r0
   10e86:	add	r3, r2
   10e88:	add	r2, sp, #120	; 0x78
   10e8a:	subs	r3, r3, r2
   10e8c:	str	r3, [sp, #80]	; 0x50
   10e8e:	ldr	r3, [sp, #56]	; 0x38
   10e90:	ldr	r2, [sp, #80]	; 0x50
   10e92:	cmp	r3, #1
   10e94:	add	r2, r3
   10e96:	str	r2, [sp, #20]
   10e98:	ble.w	112a2 <_svfprintf_r+0x19f2>
   10e9c:	ldr	r3, [sp, #20]
   10e9e:	ldr	r2, [sp, #64]	; 0x40
   10ea0:	add	r3, r2
   10ea2:	str	r3, [sp, #20]
   10ea4:	bic.w	r3, r6, #1024	; 0x400
   10ea8:	ldr	r2, [sp, #20]
   10eaa:	orr.w	r8, r3, #256	; 0x100
   10eae:	movs	r3, #0
   10eb0:	strd	r3, r3, [sp, #48]	; 0x30
   10eb4:	bic.w	r2, r2, r2, asr #31
   10eb8:	str	r3, [sp, #60]	; 0x3c
   10eba:	str	r2, [sp, #8]
   10ebc:	ldr	r3, [sp, #36]	; 0x24
   10ebe:	cmp	r3, #0
   10ec0:	bne.w	11026 <_svfprintf_r+0x1776>
   10ec4:	ldrb.w	r1, [sp, #103]	; 0x67
   10ec8:	str	r3, [sp, #12]
   10eca:	b.w	fc72 <_svfprintf_r+0x3c2>
   10ece:	mov	r0, r4
   10ed0:	bl	e100 <strlen>
   10ed4:	mov	r2, r0
   10ed6:	str	r0, [sp, #20]
   10ed8:	b.w	fd1c <_svfprintf_r+0x46c>
   10edc:	vmov	r1, s22
   10ee0:	add	r2, sp, #144	; 0x90
   10ee2:	mov	r0, fp
   10ee4:	bl	145c8 <__ssprint_r>
   10ee8:	b.w	fac6 <_svfprintf_r+0x216>
   10eec:	adds	r1, r3, #1
   10eee:	mov	r0, fp
   10ef0:	bl	bad8 <_malloc_r>
   10ef4:	mov	r4, r0
   10ef6:	cmp	r0, #0
   10ef8:	beq.w	11290 <_svfprintf_r+0x19e0>
   10efc:	str	r0, [sp, #28]
   10efe:	b.n	10cc2 <_svfprintf_r+0x1412>
   10f00:	vmov	r1, s22
   10f04:	add	r2, sp, #144	; 0x90
   10f06:	mov	r0, fp
   10f08:	bl	145c8 <__ssprint_r>
   10f0c:	cmp	r0, #0
   10f0e:	bne.w	1017a <_svfprintf_r+0x8ca>
   10f12:	ldr	r2, [sp, #152]	; 0x98
   10f14:	add.w	sl, sp, #156	; 0x9c
   10f18:	b.w	103ae <_svfprintf_r+0xafe>
   10f1c:	vmov	r1, s22
   10f20:	add	r2, sp, #144	; 0x90
   10f22:	mov	r0, fp
   10f24:	bl	145c8 <__ssprint_r>
   10f28:	cmp	r0, #0
   10f2a:	bne.w	1017a <_svfprintf_r+0x8ca>
   10f2e:	ldrd	r3, r2, [sp, #148]	; 0x94
   10f32:	ldr	r1, [sp, #108]	; 0x6c
   10f34:	add.w	sl, sp, #156	; 0x9c
   10f38:	b.n	10bce <_svfprintf_r+0x131e>
   10f3a:	movs	r3, #6
   10f3c:	str	r3, [sp, #12]
   10f3e:	b.w	10648 <_svfprintf_r+0xd98>
   10f42:	ldr	r3, [sp, #12]
   10f44:	movs	r1, #2
   10f46:	adds	r2, r3, #1
   10f48:	b.n	10da2 <_svfprintf_r+0x14f2>
   10f4a:	ldr	r2, [sp, #12]
   10f4c:	movs	r1, #3
   10f4e:	b.n	10da2 <_svfprintf_r+0x14f2>
   10f50:	add	r0, sp, #108	; 0x6c
   10f52:	vmov.f64	d0, d10
   10f56:	bl	12f88 <frexp>
   10f5a:	vmov.f64	d7, #64	; 0x3e000000  0.125
   10f5e:	vmul.f64	d0, d0, d7
   10f62:	vcmp.f64	d0, #0.0
   10f66:	vmrs	APSR_nzcv, fpscr
   10f6a:	bne.n	10f70 <_svfprintf_r+0x16c0>
   10f6c:	movs	r3, #1
   10f6e:	str	r3, [sp, #108]	; 0x6c
   10f70:	ldr	r0, [pc, #716]	; (11240 <_svfprintf_r+0x1990>)
   10f72:	ldr	r3, [sp, #12]
   10f74:	vmov.f64	d5, #48	; 0x41800000  16.0
   10f78:	subs	r3, #1
   10f7a:	mov	r2, r4
   10f7c:	b.n	10f88 <_svfprintf_r+0x16d8>
   10f7e:	vcmp.f64	d0, #0.0
   10f82:	vmrs	APSR_nzcv, fpscr
   10f86:	beq.n	10fb0 <_svfprintf_r+0x1700>
   10f88:	vmul.f64	d0, d0, d5
   10f8c:	vcvt.s32.f64	s15, d0
   10f90:	cmp.w	r3, #4294967295
   10f94:	vmov	r1, s15
   10f98:	ldrb	r1, [r0, r1]
   10f9a:	vcvt.f64.s32	d6, s15
   10f9e:	mov	ip, r2
   10fa0:	vsub.f64	d0, d0, d6
   10fa4:	strb.w	r1, [r2], #1
   10fa8:	mov	r1, r3
   10faa:	add.w	r3, r3, #4294967295
   10fae:	bne.n	10f7e <_svfprintf_r+0x16ce>
   10fb0:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10fb4:	vcmpe.f64	d0, d6
   10fb8:	vmrs	APSR_nzcv, fpscr
   10fbc:	bgt.w	11250 <_svfprintf_r+0x19a0>
   10fc0:	vcmp.f64	d0, d6
   10fc4:	vmrs	APSR_nzcv, fpscr
   10fc8:	bne.n	10fd4 <_svfprintf_r+0x1724>
   10fca:	vmov	r3, s15
   10fce:	lsls	r3, r3, #31
   10fd0:	bmi.w	11250 <_svfprintf_r+0x19a0>
   10fd4:	cmp	r1, #0
   10fd6:	blt.n	10fe6 <_svfprintf_r+0x1736>
   10fd8:	adds	r3, r1, #1
   10fda:	add	r3, r2
   10fdc:	movs	r1, #48	; 0x30
   10fde:	strb.w	r1, [r2], #1
   10fe2:	cmp	r3, r2
   10fe4:	bne.n	10fde <_svfprintf_r+0x172e>
   10fe6:	subs	r3, r2, r4
   10fe8:	str	r3, [sp, #56]	; 0x38
   10fea:	b.n	10de6 <_svfprintf_r+0x1536>
   10fec:	ldr	r4, [sp, #44]	; 0x2c
   10fee:	ldr	r3, [sp, #56]	; 0x38
   10ff0:	ldr.w	r9, [sp, #36]	; 0x24
   10ff4:	ldr.w	r8, [sp, #40]	; 0x28
   10ff8:	str	r6, [sp, #76]	; 0x4c
   10ffa:	adds	r3, r4, r3
   10ffc:	cmp	r5, r3
   10ffe:	mov	r1, r5
   11000:	it	cs
   11002:	movcs	r1, r3
   11004:	mov	sl, r0
   11006:	str	r1, [sp, #20]
   11008:	b.w	103bc <_svfprintf_r+0xb0c>
   1100c:	ldr	r3, [sp, #108]	; 0x6c
   1100e:	str	r3, [sp, #48]	; 0x30
   11010:	adds	r2, r3, #3
   11012:	blt.n	1101a <_svfprintf_r+0x176a>
   11014:	ldr	r2, [sp, #12]
   11016:	cmp	r3, r2
   11018:	ble.n	11034 <_svfprintf_r+0x1784>
   1101a:	ldr	r3, [sp, #44]	; 0x2c
   1101c:	subs	r3, #2
   1101e:	str	r3, [sp, #44]	; 0x2c
   11020:	bic.w	r5, r3, #32
   11024:	b.n	10df6 <_svfprintf_r+0x1546>
   11026:	movs	r1, #45	; 0x2d
   11028:	movs	r3, #0
   1102a:	strb.w	r1, [sp, #103]	; 0x67
   1102e:	str	r3, [sp, #12]
   11030:	b.w	fc78 <_svfprintf_r+0x3c8>
   11034:	ldr	r3, [sp, #48]	; 0x30
   11036:	ldr	r2, [sp, #56]	; 0x38
   11038:	cmp	r3, r2
   1103a:	blt.w	111b8 <_svfprintf_r+0x1908>
   1103e:	lsls	r0, r6, #31
   11040:	ldr	r3, [sp, #48]	; 0x30
   11042:	bpl.w	112aa <_svfprintf_r+0x19fa>
   11046:	ldr	r2, [sp, #64]	; 0x40
   11048:	add	r3, r2
   1104a:	str	r3, [sp, #20]
   1104c:	lsls	r1, r6, #21
   1104e:	bpl.n	11058 <_svfprintf_r+0x17a8>
   11050:	ldr	r3, [sp, #48]	; 0x30
   11052:	cmp	r3, #0
   11054:	bgt.w	112c2 <_svfprintf_r+0x1a12>
   11058:	ldr	r3, [sp, #20]
   1105a:	bic.w	r3, r3, r3, asr #31
   1105e:	str	r3, [sp, #8]
   11060:	movs	r3, #103	; 0x67
   11062:	str	r3, [sp, #44]	; 0x2c
   11064:	movs	r3, #0
   11066:	str	r3, [sp, #60]	; 0x3c
   11068:	str	r3, [sp, #52]	; 0x34
   1106a:	b.n	10ebc <_svfprintf_r+0x160c>
   1106c:	ldr	r3, [sp, #136]	; 0x88
   1106e:	cmp	r3, r0
   11070:	bcs.w	10de2 <_svfprintf_r+0x1532>
   11074:	movs	r1, #48	; 0x30
   11076:	adds	r2, r3, #1
   11078:	str	r2, [sp, #136]	; 0x88
   1107a:	strb	r1, [r3, #0]
   1107c:	ldr	r3, [sp, #136]	; 0x88
   1107e:	cmp	r0, r3
   11080:	bhi.n	11076 <_svfprintf_r+0x17c6>
   11082:	b.n	10de2 <_svfprintf_r+0x1532>
   11084:	lsls	r3, r6, #31
   11086:	bmi.w	111d8 <_svfprintf_r+0x1928>
   1108a:	ldr	r3, [sp, #136]	; 0x88
   1108c:	b.n	10de2 <_svfprintf_r+0x1532>
   1108e:	add	r2, sp, #144	; 0x90
   11090:	mov	r0, fp
   11092:	str	r1, [sp, #20]
   11094:	bl	145c8 <__ssprint_r>
   11098:	cmp	r0, #0
   1109a:	bne.w	1017a <_svfprintf_r+0x8ca>
   1109e:	ldrb.w	ip, [r6]
   110a2:	ldr	r2, [sp, #152]	; 0x98
   110a4:	ldr	r1, [sp, #20]
   110a6:	add	r0, sp, #156	; 0x9c
   110a8:	add	r5, ip
   110aa:	b.w	10886 <_svfprintf_r+0xfd6>
   110ae:	vmov	r1, s22
   110b2:	add	r2, sp, #144	; 0x90
   110b4:	mov	r0, fp
   110b6:	bl	145c8 <__ssprint_r>
   110ba:	cmp	r0, #0
   110bc:	bne.w	1017a <_svfprintf_r+0x8ca>
   110c0:	ldr	r2, [sp, #152]	; 0x98
   110c2:	add.w	sl, sp, #156	; 0x9c
   110c6:	b.w	103a0 <_svfprintf_r+0xaf0>
   110ca:	movs	r3, #120	; 0x78
   110cc:	strb.w	r3, [sp, #105]	; 0x69
   110d0:	movs	r3, #48	; 0x30
   110d2:	strb.w	r3, [sp, #104]	; 0x68
   110d6:	ldr	r3, [sp, #12]
   110d8:	cmp	r3, #99	; 0x63
   110da:	orr.w	r6, r8, #2
   110de:	bgt.w	1122e <_svfprintf_r+0x197e>
   110e2:	movs	r3, #0
   110e4:	str	r3, [sp, #28]
   110e6:	add	r4, sp, #220	; 0xdc
   110e8:	vmov	r3, s17
   110ec:	cmp	r3, #0
   110ee:	orr.w	r8, r8, #258	; 0x102
   110f2:	blt.n	1114c <_svfprintf_r+0x189c>
   110f4:	vmov.f64	d10, d8
   110f8:	ldr	r3, [sp, #44]	; 0x2c
   110fa:	bic.w	r5, r3, #32
   110fe:	movs	r3, #0
   11100:	str	r3, [sp, #36]	; 0x24
   11102:	ldr	r3, [sp, #44]	; 0x2c
   11104:	cmp	r3, #97	; 0x61
   11106:	bne.w	10664 <_svfprintf_r+0xdb4>
   1110a:	vmov.f64	d0, d10
   1110e:	add	r0, sp, #108	; 0x6c
   11110:	bl	12f88 <frexp>
   11114:	vmov.f64	d7, #64	; 0x3e000000  0.125
   11118:	vmul.f64	d0, d0, d7
   1111c:	vcmp.f64	d0, #0.0
   11120:	vmrs	APSR_nzcv, fpscr
   11124:	bne.n	1112a <_svfprintf_r+0x187a>
   11126:	movs	r3, #1
   11128:	str	r3, [sp, #108]	; 0x6c
   1112a:	ldr	r0, [pc, #280]	; (11244 <_svfprintf_r+0x1994>)
   1112c:	b.n	10f72 <_svfprintf_r+0x16c2>
   1112e:	vmov	r1, s22
   11132:	add	r2, sp, #144	; 0x90
   11134:	mov	r0, fp
   11136:	bl	145c8 <__ssprint_r>
   1113a:	cmp	r0, #0
   1113c:	bne.w	1017a <_svfprintf_r+0x8ca>
   11140:	ldr	r3, [sp, #108]	; 0x6c
   11142:	ldr	r2, [sp, #152]	; 0x98
   11144:	add.w	sl, sp, #156	; 0x9c
   11148:	b.w	103e8 <_svfprintf_r+0xb38>
   1114c:	ldr	r3, [sp, #44]	; 0x2c
   1114e:	bic.w	r5, r3, #32
   11152:	movs	r3, #45	; 0x2d
   11154:	str	r3, [sp, #36]	; 0x24
   11156:	vneg.f64	d10, d8
   1115a:	b.n	11102 <_svfprintf_r+0x1852>
   1115c:	ldr	r2, [sp, #108]	; 0x6c
   1115e:	str	r2, [sp, #48]	; 0x30
   11160:	cmp	r2, #0
   11162:	and.w	r3, r6, #1
   11166:	ble.w	11384 <_svfprintf_r+0x1ad4>
   1116a:	ldr	r1, [sp, #12]
   1116c:	orrs	r3, r1
   1116e:	bne.w	11310 <_svfprintf_r+0x1a60>
   11172:	ldr	r3, [sp, #48]	; 0x30
   11174:	str	r3, [sp, #20]
   11176:	movs	r3, #102	; 0x66
   11178:	str	r3, [sp, #44]	; 0x2c
   1117a:	lsls	r2, r6, #21
   1117c:	bmi.w	112c6 <_svfprintf_r+0x1a16>
   11180:	ldr	r3, [sp, #20]
   11182:	bic.w	r3, r3, r3, asr #31
   11186:	str	r3, [sp, #8]
   11188:	b.n	11064 <_svfprintf_r+0x17b4>
   1118a:	vmov	r1, s22
   1118e:	add	r2, sp, #144	; 0x90
   11190:	mov	r0, fp
   11192:	bl	145c8 <__ssprint_r>
   11196:	cmp	r0, #0
   11198:	bne.w	1017a <_svfprintf_r+0x8ca>
   1119c:	ldr	r4, [sp, #108]	; 0x6c
   1119e:	ldr	r3, [sp, #56]	; 0x38
   111a0:	ldr	r2, [sp, #152]	; 0x98
   111a2:	subs	r4, r3, r4
   111a4:	add.w	sl, sp, #156	; 0x9c
   111a8:	b.w	10418 <_svfprintf_r+0xb68>
   111ac:	movs	r3, #88	; 0x58
   111ae:	b.n	110cc <_svfprintf_r+0x181c>
   111b0:	movs	r2, #0
   111b2:	str	r2, [sp, #12]
   111b4:	b.w	f96c <_svfprintf_r+0xbc>
   111b8:	ldr	r3, [sp, #56]	; 0x38
   111ba:	ldr	r2, [sp, #64]	; 0x40
   111bc:	adds	r2, r3, r2
   111be:	ldr	r3, [sp, #48]	; 0x30
   111c0:	str	r2, [sp, #20]
   111c2:	cmp	r3, #0
   111c4:	ble.w	1131e <_svfprintf_r+0x1a6e>
   111c8:	movs	r3, #103	; 0x67
   111ca:	str	r3, [sp, #44]	; 0x2c
   111cc:	b.n	1117a <_svfprintf_r+0x18ca>
   111ce:	ldr	r2, [sp, #44]	; 0x2c
   111d0:	adds	r2, #15
   111d2:	uxtb	r2, r2
   111d4:	movs	r1, #1
   111d6:	b.n	10e0a <_svfprintf_r+0x155a>
   111d8:	adds	r0, r4, r2
   111da:	b.n	10dd4 <_svfprintf_r+0x1524>
   111dc:	cmp	r1, #0
   111de:	bne.w	11332 <_svfprintf_r+0x1a82>
   111e2:	movs	r2, #48	; 0x30
   111e4:	strb.w	r2, [sp, #122]	; 0x7a
   111e8:	add.w	r2, sp, #123	; 0x7b
   111ec:	adds	r3, #48	; 0x30
   111ee:	strb.w	r3, [r2], #1
   111f2:	add	r3, sp, #120	; 0x78
   111f4:	subs	r3, r2, r3
   111f6:	str	r3, [sp, #80]	; 0x50
   111f8:	b.n	10e8e <_svfprintf_r+0x15de>
   111fa:	adds	r3, #1
   111fc:	ldr	r1, [pc, #72]	; (11248 <_svfprintf_r+0x1998>)
   111fe:	str.w	r5, [sl, #4]
   11202:	add	r2, r5
   11204:	cmp	r3, #7
   11206:	strd	r3, r2, [sp, #148]	; 0x94
   1120a:	str.w	r1, [sl]
   1120e:	ble.w	10a78 <_svfprintf_r+0x11c8>
   11212:	vmov	r1, s22
   11216:	add	r2, sp, #144	; 0x90
   11218:	mov	r0, fp
   1121a:	bl	145c8 <__ssprint_r>
   1121e:	cmp	r0, #0
   11220:	bne.w	1017a <_svfprintf_r+0x8ca>
   11224:	ldrd	r3, r2, [sp, #148]	; 0x94
   11228:	add.w	sl, sp, #156	; 0x9c
   1122c:	b.n	10a7c <_svfprintf_r+0x11cc>
   1122e:	adds	r1, r3, #1
   11230:	mov	r0, fp
   11232:	bl	bad8 <_malloc_r>
   11236:	mov	r4, r0
   11238:	cbz	r0, 11290 <_svfprintf_r+0x19e0>
   1123a:	str	r0, [sp, #28]
   1123c:	b.n	110e8 <_svfprintf_r+0x1838>
   1123e:	nop
   11240:	.word	0x200009bc
   11244:	.word	0x200009a8
   11248:	.word	0x20007878
   1124c:	.word	0x66666667
   11250:	str.w	ip, [sp, #136]	; 0x88
   11254:	ldrb.w	r1, [r2, #-1]
   11258:	ldrb.w	ip, [r0, #15]
   1125c:	cmp	r1, ip
   1125e:	mov	r3, r2
   11260:	bne.n	11278 <_svfprintf_r+0x19c8>
   11262:	mov.w	lr, #48	; 0x30
   11266:	strb.w	lr, [r3, #-1]
   1126a:	ldr	r3, [sp, #136]	; 0x88
   1126c:	subs	r1, r3, #1
   1126e:	str	r1, [sp, #136]	; 0x88
   11270:	ldrb.w	r1, [r3, #-1]
   11274:	cmp	ip, r1
   11276:	beq.n	11266 <_svfprintf_r+0x19b6>
   11278:	cmp	r1, #57	; 0x39
   1127a:	itet	ne
   1127c:	addne	r1, #1
   1127e:	ldrbeq	r1, [r0, #10]
   11280:	uxtbne	r1, r1
   11282:	strb.w	r1, [r3, #-1]
   11286:	b.n	10fe6 <_svfprintf_r+0x1736>
   11288:	movs	r3, #0
   1128a:	mov	r8, r2
   1128c:	str	r3, [sp, #28]
   1128e:	b.n	11152 <_svfprintf_r+0x18a2>
   11290:	vmov	r2, s22
   11294:	ldrsh.w	r3, [r2, #12]
   11298:	orr.w	r3, r3, #64	; 0x40
   1129c:	strh	r3, [r2, #12]
   1129e:	b.w	face <_svfprintf_r+0x21e>
   112a2:	lsls	r5, r6, #31
   112a4:	bpl.w	10ea4 <_svfprintf_r+0x15f4>
   112a8:	b.n	10e9c <_svfprintf_r+0x15ec>
   112aa:	str	r3, [sp, #20]
   112ac:	b.n	1104c <_svfprintf_r+0x179c>
   112ae:	vcmp.f64	d10, #0.0
   112b2:	vmrs	APSR_nzcv, fpscr
   112b6:	beq.w	10dd0 <_svfprintf_r+0x1520>
   112ba:	rsb	r2, r2, #1
   112be:	str	r2, [sp, #108]	; 0x6c
   112c0:	b.n	10dd2 <_svfprintf_r+0x1522>
   112c2:	movs	r3, #103	; 0x67
   112c4:	str	r3, [sp, #44]	; 0x2c
   112c6:	ldr	r1, [sp, #76]	; 0x4c
   112c8:	ldrb	r3, [r1, #0]
   112ca:	cmp	r3, #255	; 0xff
   112cc:	beq.n	113c2 <_svfprintf_r+0x1b12>
   112ce:	movs	r5, #0
   112d0:	ldr	r2, [sp, #48]	; 0x30
   112d2:	mov	r0, r5
   112d4:	b.n	112de <_svfprintf_r+0x1a2e>
   112d6:	adds	r0, #1
   112d8:	adds	r1, #1
   112da:	cmp	r3, #255	; 0xff
   112dc:	beq.n	112f0 <_svfprintf_r+0x1a40>
   112de:	cmp	r3, r2
   112e0:	bge.n	112f0 <_svfprintf_r+0x1a40>
   112e2:	subs	r2, r2, r3
   112e4:	ldrb	r3, [r1, #1]
   112e6:	cmp	r3, #0
   112e8:	bne.n	112d6 <_svfprintf_r+0x1a26>
   112ea:	ldrb	r3, [r1, #0]
   112ec:	adds	r5, #1
   112ee:	b.n	112da <_svfprintf_r+0x1a2a>
   112f0:	str	r2, [sp, #48]	; 0x30
   112f2:	str	r1, [sp, #76]	; 0x4c
   112f4:	str	r0, [sp, #52]	; 0x34
   112f6:	str	r5, [sp, #60]	; 0x3c
   112f8:	ldr	r2, [sp, #60]	; 0x3c
   112fa:	ldr	r3, [sp, #52]	; 0x34
   112fc:	ldr	r1, [sp, #88]	; 0x58
   112fe:	add	r3, r2
   11300:	ldr	r2, [sp, #20]
   11302:	mla	r3, r1, r3, r2
   11306:	str	r3, [sp, #20]
   11308:	bic.w	r3, r3, r3, asr #31
   1130c:	str	r3, [sp, #8]
   1130e:	b.n	10ebc <_svfprintf_r+0x160c>
   11310:	ldr	r3, [sp, #64]	; 0x40
   11312:	adds	r3, r2, r3
   11314:	add	r1, r3
   11316:	movs	r3, #102	; 0x66
   11318:	str	r1, [sp, #20]
   1131a:	str	r3, [sp, #44]	; 0x2c
   1131c:	b.n	1117a <_svfprintf_r+0x18ca>
   1131e:	rsb	r3, r3, #1
   11322:	add	r2, r3
   11324:	bic.w	r3, r2, r2, asr #31
   11328:	str	r3, [sp, #8]
   1132a:	movs	r3, #103	; 0x67
   1132c:	str	r2, [sp, #20]
   1132e:	str	r3, [sp, #44]	; 0x2c
   11330:	b.n	11064 <_svfprintf_r+0x17b4>
   11332:	add.w	r2, sp, #122	; 0x7a
   11336:	b.n	111ec <_svfprintf_r+0x193c>
   11338:	ldr	r3, [sp, #12]
   1133a:	ldr.w	r9, [sp, #8]
   1133e:	ldr.w	r8, [sp, #28]
   11342:	str	r3, [sp, #20]
   11344:	b.n	10cb0 <_svfprintf_r+0x1400>
   11346:	vmov	r3, s17
   1134a:	cmp	r3, #0
   1134c:	ite	lt
   1134e:	movlt	r1, #45	; 0x2d
   11350:	ldrbge.w	r1, [sp, #103]	; 0x67
   11354:	ldr	r4, [pc, #148]	; (113ec <_svfprintf_r+0x1b3c>)
   11356:	ldr	r3, [pc, #152]	; (113f0 <_svfprintf_r+0x1b40>)
   11358:	it	lt
   1135a:	strblt.w	r1, [sp, #103]	; 0x67
   1135e:	bic.w	r8, r8, #128	; 0x80
   11362:	b.w	fc58 <_svfprintf_r+0x3a8>
   11366:	ldr	r3, [sp, #12]
   11368:	str	r3, [sp, #8]
   1136a:	str	r3, [sp, #20]
   1136c:	movs	r3, #115	; 0x73
   1136e:	ldrb.w	r1, [sp, #103]	; 0x67
   11372:	str	r0, [sp, #12]
   11374:	str	r0, [sp, #60]	; 0x3c
   11376:	str	r0, [sp, #52]	; 0x34
   11378:	str	r3, [sp, #44]	; 0x2c
   1137a:	b.w	fc72 <_svfprintf_r+0x3c2>
   1137e:	movs	r3, #2
   11380:	str	r3, [sp, #80]	; 0x50
   11382:	b.n	10e8e <_svfprintf_r+0x15de>
   11384:	ldr	r2, [sp, #12]
   11386:	orrs	r3, r2
   11388:	bne.n	11396 <_svfprintf_r+0x1ae6>
   1138a:	movs	r3, #1
   1138c:	movs	r2, #102	; 0x66
   1138e:	str	r3, [sp, #8]
   11390:	str	r2, [sp, #44]	; 0x2c
   11392:	str	r3, [sp, #20]
   11394:	b.n	11064 <_svfprintf_r+0x17b4>
   11396:	ldr	r3, [sp, #64]	; 0x40
   11398:	adds	r3, #1
   1139a:	add	r2, r3
   1139c:	bic.w	r3, r2, r2, asr #31
   113a0:	str	r3, [sp, #8]
   113a2:	movs	r3, #102	; 0x66
   113a4:	str	r2, [sp, #20]
   113a6:	str	r3, [sp, #44]	; 0x2c
   113a8:	b.n	11064 <_svfprintf_r+0x17b4>
   113aa:	ldr	r2, [sp, #32]
   113ac:	ldrb.w	r3, [r9, #1]
   113b0:	mov	r9, r1
   113b2:	ldr.w	r1, [r2], #4
   113b6:	str	r2, [sp, #32]
   113b8:	orr.w	r1, r1, r1, asr #31
   113bc:	str	r1, [sp, #12]
   113be:	b.w	f968 <_svfprintf_r+0xb8>
   113c2:	movs	r3, #0
   113c4:	str	r3, [sp, #60]	; 0x3c
   113c6:	str	r3, [sp, #52]	; 0x34
   113c8:	b.n	112f8 <_svfprintf_r+0x1a48>
   113ca:	movs	r3, #12
   113cc:	str.w	r3, [fp]
   113d0:	mov.w	r3, #4294967295
   113d4:	str	r3, [sp, #16]
   113d6:	b.w	fadc <_svfprintf_r+0x22c>
   113da:	vmov	r2, s22
   113de:	ldrh	r3, [r2, #12]
   113e0:	orr.w	r3, r3, #64	; 0x40
   113e4:	strh	r3, [r2, #12]
   113e6:	b.w	1017a <_svfprintf_r+0x8ca>
   113ea:	nop
   113ec:	.word	0x200009a0
   113f0:	.word	0x200009a4

000113f4 <__ssvfscanf_r>:
   113f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f8:	vpush	{d8}
   113fc:	sub.w	sp, sp, #732	; 0x2dc
   11400:	mov	fp, r1
   11402:	ldrsh.w	r1, [r1, #12]
   11406:	add	r7, sp, #8
   11408:	lsls	r4, r1, #18
   1140a:	mov	r9, r0
   1140c:	str	r2, [r7, #76]	; 0x4c
   1140e:	str	r3, [r7, #48]	; 0x30
   11410:	bmi.n	11426 <__ssvfscanf_r+0x32>
   11412:	ldr.w	r3, [fp, #100]	; 0x64
   11416:	orr.w	r1, r1, #8192	; 0x2000
   1141a:	bic.w	r3, r3, #8192	; 0x2000
   1141e:	strh.w	r1, [fp, #12]
   11422:	str.w	r3, [fp, #100]	; 0x64
   11426:	movs	r3, #0
   11428:	mov	r4, r3
   1142a:	movs	r2, #8
   1142c:	mov	r1, r3
   1142e:	add.w	r0, r7, #88	; 0x58
   11432:	str	r3, [r7, #44]	; 0x2c
   11434:	mov	sl, r4
   11436:	bl	9444 <memset>
   1143a:	str	r4, [r7, #64]	; 0x40
   1143c:	str	r4, [r7, #36]	; 0x24
   1143e:	str	r4, [r7, #56]	; 0x38
   11440:	str	r4, [r7, #68]	; 0x44
   11442:	ldr	r3, [pc, #524]	; (11650 <__ssvfscanf_r+0x25c>)
   11444:	ldr.w	r4, [r3, #228]	; 0xe4
   11448:	bl	db54 <__locale_mb_cur_max>
   1144c:	add.w	r2, r7, #88	; 0x58
   11450:	mov	r3, r0
   11452:	str	r2, [sp, #0]
   11454:	add.w	r1, r7, #84	; 0x54
   11458:	ldr	r2, [r7, #76]	; 0x4c
   1145a:	mov	r0, r9
   1145c:	blx	r4
   1145e:	subs	r5, r0, #0
   11460:	ldr	r3, [r7, #76]	; 0x4c
   11462:	blt.n	114cc <__ssvfscanf_r+0xd8>
   11464:	add	r3, r5
   11466:	str	r3, [r7, #76]	; 0x4c
   11468:	ldr	r3, [r7, #84]	; 0x54
   1146a:	mov	r6, r5
   1146c:	cmp	r3, #0
   1146e:	beq.w	115de <__ssvfscanf_r+0x1ea>
   11472:	cmp	r5, #1
   11474:	beq.n	114e8 <__ssvfscanf_r+0xf4>
   11476:	cmp	r3, #37	; 0x25
   11478:	beq.n	114fc <__ssvfscanf_r+0x108>
   1147a:	cmp	r5, #0
   1147c:	beq.n	11442 <__ssvfscanf_r+0x4e>
   1147e:	ldr	r3, [r7, #76]	; 0x4c
   11480:	subs	r6, r3, r6
   11482:	ldr.w	r3, [fp, #4]
   11486:	subs	r4, r6, #1
   11488:	cmp	r3, #0
   1148a:	ble.w	115be <__ssvfscanf_r+0x1ca>
   1148e:	ldr.w	r1, [fp]
   11492:	ldrb.w	ip, [r4, #1]
   11496:	ldrb.w	lr, [r1]
   1149a:	adds	r3, r4, #2
   1149c:	add.w	r0, sl, r3
   114a0:	cmp	lr, ip
   114a2:	add.w	r1, r1, #1
   114a6:	sub.w	r2, r3, r6
   114aa:	add.w	r4, r4, #1
   114ae:	sub.w	r0, r0, r6
   114b2:	bne.w	115de <__ssvfscanf_r+0x1ea>
   114b6:	ldr.w	r3, [fp, #4]
   114ba:	str.w	r1, [fp]
   114be:	subs	r3, #1
   114c0:	cmp	r2, r5
   114c2:	str.w	r3, [fp, #4]
   114c6:	blt.n	11488 <__ssvfscanf_r+0x94>
   114c8:	mov	sl, r0
   114ca:	b.n	11442 <__ssvfscanf_r+0x4e>
   114cc:	adds	r3, #1
   114ce:	str	r3, [r7, #76]	; 0x4c
   114d0:	movs	r2, #8
   114d2:	movw	r3, #65533	; 0xfffd
   114d6:	movs	r1, #0
   114d8:	add.w	r0, r7, #88	; 0x58
   114dc:	str	r3, [r7, #84]	; 0x54
   114de:	bl	9444 <memset>
   114e2:	ldr	r3, [r7, #84]	; 0x54
   114e4:	cmp	r3, #0
   114e6:	beq.n	115de <__ssvfscanf_r+0x1ea>
   114e8:	ldr	r6, [pc, #360]	; (11654 <__ssvfscanf_r+0x260>)
   114ea:	ldrb	r2, [r6, r3]
   114ec:	lsls	r0, r2, #28
   114ee:	bmi.w	11f2a <__ssvfscanf_r+0xb36>
   114f2:	cmp	r3, #37	; 0x25
   114f4:	bne.w	11604 <__ssvfscanf_r+0x210>
   114f8:	movs	r5, #1
   114fa:	mov	r6, r5
   114fc:	ldr	r0, [r7, #76]	; 0x4c
   114fe:	movs	r4, #0
   11500:	ldrb	r2, [r0, #0]
   11502:	mov	r8, r4
   11504:	sub.w	r3, r2, #37	; 0x25
   11508:	adds	r1, r0, #1
   1150a:	cmp	r3, #85	; 0x55
   1150c:	bhi.n	115de <__ssvfscanf_r+0x1ea>
   1150e:	tbh	[pc, r3, lsl #1]
   11512:	.short	0x070a
   11514:	.word	0x00660066
   11518:	.word	0x00660066
   1151c:	.word	0x00660701
   11520:	.word	0x00660066
   11524:	.word	0x00660066
   11528:	.word	0x060c060c
   1152c:	.word	0x060c060c
   11530:	.word	0x060c060c
   11534:	.word	0x060c060c
   11538:	.word	0x060c060c
   1153c:	.word	0x00660066
   11540:	.word	0x00660066
   11544:	.word	0x00660066
   11548:	.word	0x06180066
   1154c:	.word	0x048e0066
   11550:	.word	0x061804c9
   11554:	.word	0x06180618
   11558:	.word	0x00660066
   1155c:	.word	0x00660066
   11560:	.word	0x00660082
   11564:	.word	0x04bf0066
   11568:	.word	0x00660066
   1156c:	.word	0x00890066
   11570:	.word	0x00660066
   11574:	.word	0x00660066
   11578:	.word	0x0066066b
   1157c:	.word	0x06dd0066
   11580:	.word	0x00660066
   11584:	.word	0x00660066
   11588:	.word	0x06180066
   1158c:	.word	0x04900066
   11590:	.word	0x061804cb
   11594:	.word	0x06180618
   11598:	.word	0x06d206be
   1159c:	.word	0x00660082
   115a0:	.word	0x06f306e7
   115a4:	.word	0x04c106ac
   115a8:	.word	0x006606da
   115ac:	.word	0x008b0066
   115b0:	.word	0x06ca007d
   115b4:	.word	0x00660066
   115b8:	.word	0x0066066b
   115bc:	.short	0x007d
   115be:	mov	r1, fp
   115c0:	mov	r0, r9
   115c2:	bl	14748 <__ssrefill_r>
   115c6:	cmp	r0, #0
   115c8:	beq.w	1148e <__ssvfscanf_r+0x9a>
   115cc:	ldr	r3, [r7, #68]	; 0x44
   115ce:	cmp	r3, #0
   115d0:	beq.w	12678 <__ssvfscanf_r+0x1284>
   115d4:	ldrh.w	r3, [fp, #12]
   115d8:	lsls	r2, r3, #25
   115da:	bmi.w	12678 <__ssvfscanf_r+0x1284>
   115de:	ldr	r3, [r7, #64]	; 0x40
   115e0:	cbz	r3, 115f4 <__ssvfscanf_r+0x200>
   115e2:	ldr	r3, [r7, #64]	; 0x40
   115e4:	ldr.w	r8, [r3]
   115e8:	cmp.w	r8, #0
   115ec:	beq.n	115f4 <__ssvfscanf_r+0x200>
   115ee:	mov	r0, r8
   115f0:	bl	bac8 <free>
   115f4:	ldr	r0, [r7, #68]	; 0x44
   115f6:	add.w	r7, r7, #724	; 0x2d4
   115fa:	mov	sp, r7
   115fc:	vpop	{d8}
   11600:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11604:	ldr	r3, [r7, #76]	; 0x4c
   11606:	movs	r5, #1
   11608:	subs	r6, r3, #1
   1160a:	b.n	11482 <__ssvfscanf_r+0x8e>
   1160c:	lsls	r3, r4, #28
   1160e:	bne.n	115de <__ssvfscanf_r+0x1ea>
   11610:	ldrb	r2, [r0, #1]
   11612:	mov	r0, r1
   11614:	b.n	11504 <__ssvfscanf_r+0x110>
   11616:	lsls	r2, r4, #28
   11618:	bne.n	115de <__ssvfscanf_r+0x1ea>
   1161a:	ldrb	r2, [r0, #1]
   1161c:	orr.w	r4, r4, #2
   11620:	mov	r0, r1
   11622:	b.n	11504 <__ssvfscanf_r+0x110>
   11624:	orr.w	r4, r4, #1
   11628:	str	r1, [r7, #76]	; 0x4c
   1162a:	movs	r5, #2
   1162c:	ldr.w	r3, [fp, #4]
   11630:	cmp	r3, #0
   11632:	ble.w	11e46 <__ssvfscanf_r+0xa52>
   11636:	lsls	r0, r4, #25
   11638:	bpl.w	11e5a <__ssvfscanf_r+0xa66>
   1163c:	subs	r3, r5, #1
   1163e:	cmp	r3, #3
   11640:	bhi.w	1281a <__ssvfscanf_r+0x1426>
   11644:	tbh	[pc, r3, lsl #1]
   11648:	.word	0x01f1027b
   1164c:	.word	0x0008014b
   11650:	.word	0x20008964
   11654:	.word	0x20000801
   11658:	mov	r0, r9
   1165a:	bl	12f7c <_localeconv_r>
   1165e:	ldr	r3, [r0, #0]
   11660:	str	r3, [r7, #32]
   11662:	add.w	r3, r8, #4294967295
   11666:	cmp.w	r3, #348	; 0x15c
   1166a:	bls.w	12122 <__ssvfscanf_r+0xd2e>
   1166e:	mvn.w	r5, #348	; 0x15c
   11672:	add.w	r3, r8, r5
   11676:	str	r3, [r7, #16]
   11678:	movw	r8, #349	; 0x15d
   1167c:	movs	r6, #0
   1167e:	add.w	r3, r7, #368	; 0x170
   11682:	vmov	s16, r9
   11686:	strd	r6, r6, [r7, #20]
   1168a:	str	r6, [r7, #60]	; 0x3c
   1168c:	str	r6, [r7, #52]	; 0x34
   1168e:	str	r6, [r7, #28]
   11690:	str	r6, [r7, #72]	; 0x48
   11692:	orr.w	r4, r4, #1920	; 0x780
   11696:	str	r3, [r7, #40]	; 0x28
   11698:	mov	r5, r3
   1169a:	mov	r6, r8
   1169c:	ldr.w	r1, [fp]
   116a0:	ldrb	r2, [r1, #0]
   116a2:	sub.w	r3, r2, #43	; 0x2b
   116a6:	cmp	r3, #78	; 0x4e
   116a8:	bhi.n	1174c <__ssvfscanf_r+0x358>
   116aa:	tbh	[pc, r3, lsl #1]
   116ae:	.short	0x037e
   116b0:	.word	0x037e004f
   116b4:	.word	0x004f004f
   116b8:	.word	0x00a600a3
   116bc:	.word	0x00a600a6
   116c0:	.word	0x00a600a6
   116c4:	.word	0x00a600a6
   116c8:	.word	0x00a600a6
   116cc:	.word	0x004f004f
   116d0:	.word	0x004f004f
   116d4:	.word	0x004f004f
   116d8:	.word	0x0374004f
   116dc:	.word	0x030b030b
   116e0:	.word	0x039e030b
   116e4:	.word	0x004f0394
   116e8:	.word	0x0384004f
   116ec:	.word	0x004f004f
   116f0:	.word	0x004f004f
   116f4:	.word	0x004f035d
   116f8:	.word	0x004f033a
   116fc:	.word	0x004f004f
   11700:	.word	0x004f0333
   11704:	.word	0x004f004f
   11708:	.word	0x036d031e
   1170c:	.word	0x004f004f
   11710:	.word	0x004f004f
   11714:	.word	0x004f004f
   11718:	.word	0x0374004f
   1171c:	.word	0x030b030b
   11720:	.word	0x039e030b
   11724:	.word	0x004f0394
   11728:	.word	0x0384004f
   1172c:	.word	0x004f004f
   11730:	.word	0x004f004f
   11734:	.word	0x004f035d
   11738:	.word	0x004f033a
   1173c:	.word	0x004f004f
   11740:	.word	0x004f0333
   11744:	.word	0x004f004f
   11748:	.word	0x036d031e
   1174c:	lsls	r0, r4, #22
   1174e:	bpl.n	11830 <__ssvfscanf_r+0x43c>
   11750:	ldr	r0, [r7, #32]
   11752:	ldrb	r3, [r0, #0]
   11754:	cmp	r3, r2
   11756:	bne.n	11830 <__ssvfscanf_r+0x43c>
   11758:	strd	r4, r5, [r7, #8]
   1175c:	str	r6, [r7, #4]
   1175e:	mov	r9, r0
   11760:	vmov	r6, s16
   11764:	mov.w	r8, #0
   11768:	mov	r4, fp
   1176a:	b.n	1177c <__ssvfscanf_r+0x388>
   1176c:	str	r1, [r4, #0]
   1176e:	ldrb.w	lr, [r1]
   11772:	ldrb.w	r0, [r9]
   11776:	cmp	lr, r0
   11778:	bne.n	117b4 <__ssvfscanf_r+0x3c0>
   1177a:	mov	sl, fp
   1177c:	ldrb.w	r0, [r9, #1]!
   11780:	mov	r5, r8
   11782:	add.w	fp, sl, #1
   11786:	adds	r1, #1
   11788:	add.w	r8, r8, #1
   1178c:	cmp	r0, #0
   1178e:	beq.w	1245a <__ssvfscanf_r+0x1066>
   11792:	ldr	r0, [r4, #4]
   11794:	subs	r0, #1
   11796:	cmp	r0, #0
   11798:	str	r0, [r4, #4]
   1179a:	bgt.n	1176c <__ssvfscanf_r+0x378>
   1179c:	mov	r1, r4
   1179e:	mov	r0, r6
   117a0:	bl	14748 <__ssrefill_r>
   117a4:	cbnz	r0, 117b4 <__ssvfscanf_r+0x3c0>
   117a6:	ldr	r1, [r4, #0]
   117a8:	ldrb.w	r0, [r9]
   117ac:	ldrb.w	lr, [r1]
   117b0:	cmp	lr, r0
   117b2:	beq.n	1177a <__ssvfscanf_r+0x386>
   117b4:	mov	fp, r4
   117b6:	ldr	r2, [r7, #32]
   117b8:	ldr	r4, [r7, #8]
   117ba:	str	r5, [r7, #16]
   117bc:	mov	r3, r5
   117be:	mov	r9, r6
   117c0:	ldr	r6, [r7, #72]	; 0x48
   117c2:	ldr	r5, [r7, #12]
   117c4:	str	r5, [r7, #72]	; 0x48
   117c6:	adds	r3, #1
   117c8:	mov	r5, fp
   117ca:	add.w	r8, r2, r3
   117ce:	mov	fp, r6
   117d0:	mov	r6, r4
   117d2:	mov	r4, r2
   117d4:	ldrb.w	r1, [r8, #-1]!
   117d8:	mov	r2, r5
   117da:	mov	r0, r9
   117dc:	bl	146c8 <_sungetc_r>
   117e0:	cmp	r4, r8
   117e2:	bne.n	117d4 <__ssvfscanf_r+0x3e0>
   117e4:	ldr	r3, [r7, #16]
   117e6:	mov	r4, r6
   117e8:	sub.w	sl, sl, r3
   117ec:	mov	r6, fp
   117ee:	mov	fp, r5
   117f0:	ldr	r5, [r7, #72]	; 0x48
   117f2:	b.n	11836 <__ssvfscanf_r+0x442>
   117f4:	lsls	r0, r4, #23
   117f6:	bmi.w	121fc <__ssvfscanf_r+0xe08>
   117fa:	ldr	r3, [r7, #72]	; 0x48
   117fc:	ldr	r1, [r7, #60]	; 0x3c
   117fe:	cmn	r1, r3
   11800:	bne.n	11830 <__ssvfscanf_r+0x43c>
   11802:	bic.w	r4, r4, #384	; 0x180
   11806:	strb.w	r2, [r5], #1
   1180a:	subs	r6, #1
   1180c:	ldr.w	r3, [fp, #4]
   11810:	subs	r3, #1
   11812:	cmp	r3, #0
   11814:	add.w	sl, sl, #1
   11818:	str.w	r3, [fp, #4]
   1181c:	ble.w	11efe <__ssvfscanf_r+0xb0a>
   11820:	ldr.w	r3, [fp]
   11824:	adds	r3, #1
   11826:	str.w	r3, [fp]
   1182a:	cmp	r6, #0
   1182c:	bne.w	1169c <__ssvfscanf_r+0x2a8>
   11830:	ldr	r6, [r7, #72]	; 0x48
   11832:	vmov	r9, s16
   11836:	ldr	r3, [r7, #52]	; 0x34
   11838:	cmp	r3, #0
   1183a:	bne.w	11df6 <__ssvfscanf_r+0xa02>
   1183e:	ldr	r3, [r7, #60]	; 0x3c
   11840:	subs	r3, #1
   11842:	cmp	r3, #1
   11844:	bls.w	12874 <__ssvfscanf_r+0x1480>
   11848:	subs	r3, r6, #1
   1184a:	cmp	r3, #6
   1184c:	bls.w	1249e <__ssvfscanf_r+0x10aa>
   11850:	lsls	r3, r4, #23
   11852:	bpl.n	1188c <__ssvfscanf_r+0x498>
   11854:	lsls	r6, r4, #21
   11856:	bmi.w	129c4 <__ssvfscanf_r+0x15d0>
   1185a:	ldrb.w	r1, [r5, #-1]
   1185e:	cmp	r1, #101	; 0x65
   11860:	add.w	r3, r5, #4294967295
   11864:	add.w	r6, sl, #4294967295
   11868:	beq.n	11880 <__ssvfscanf_r+0x48c>
   1186a:	cmp	r1, #69	; 0x45
   1186c:	beq.n	11880 <__ssvfscanf_r+0x48c>
   1186e:	mov	r2, fp
   11870:	mov	r0, r9
   11872:	bl	146c8 <_sungetc_r>
   11876:	ldrb.w	r1, [r5, #-2]
   1187a:	sub.w	r6, sl, #2
   1187e:	subs	r3, r5, #2
   11880:	mov	r2, fp
   11882:	mov	r0, r9
   11884:	mov	sl, r6
   11886:	mov	r5, r3
   11888:	bl	146c8 <_sungetc_r>
   1188c:	ands.w	r2, r4, #16
   11890:	bne.w	11442 <__ssvfscanf_r+0x4e>
   11894:	and.w	r3, r4, #1536	; 0x600
   11898:	cmp.w	r3, #1024	; 0x400
   1189c:	strb	r2, [r5, #0]
   1189e:	beq.w	12246 <__ssvfscanf_r+0xe52>
   118a2:	ldr	r3, [r7, #24]
   118a4:	cmp	r3, #0
   118a6:	bne.w	12702 <__ssvfscanf_r+0x130e>
   118aa:	mov	r0, r9
   118ac:	ldr	r1, [r7, #40]	; 0x28
   118ae:	movs	r2, #0
   118b0:	bl	d2b0 <_strtod_r>
   118b4:	lsls	r0, r4, #31
   118b6:	ldr	r3, [r7, #48]	; 0x30
   118b8:	bmi.w	1244e <__ssvfscanf_r+0x105a>
   118bc:	lsls	r1, r4, #30
   118be:	bmi.w	1244e <__ssvfscanf_r+0x105a>
   118c2:	vcmp.f64	d0, d0
   118c6:	vmrs	APSR_nzcv, fpscr
   118ca:	ldr.w	r4, [r3], #4
   118ce:	bvs.w	126ba <__ssvfscanf_r+0x12c6>
   118d2:	vcvt.f32.f64	s0, d0
   118d6:	str	r3, [r7, #48]	; 0x30
   118d8:	vstr	s0, [r4]
   118dc:	b.n	12024 <__ssvfscanf_r+0xc30>
   118de:	add.w	r3, r8, #4294967295
   118e2:	cmp.w	r3, #348	; 0x15c
   118e6:	bls.w	1202e <__ssvfscanf_r+0xc3a>
   118ea:	mvn.w	r2, #348	; 0x15c
   118ee:	add.w	r3, r8, r2
   118f2:	str	r3, [r7, #60]	; 0x3c
   118f4:	movw	r8, #349	; 0x15d
   118f8:	add.w	r3, r7, #368	; 0x170
   118fc:	movs	r2, #0
   118fe:	ldr	r6, [r7, #56]	; 0x38
   11900:	str	r3, [r7, #40]	; 0x28
   11902:	mov	r1, fp
   11904:	orr.w	r4, r4, #3456	; 0xd80
   11908:	mov	fp, sl
   1190a:	mov	r5, r3
   1190c:	mov	sl, r2
   1190e:	ldr	r2, [r1, #0]
   11910:	ldrb	r0, [r2, #0]
   11912:	sub.w	r3, r0, #43	; 0x2b
   11916:	cmp	r3, #77	; 0x4d
   11918:	bhi.n	119dc <__ssvfscanf_r+0x5e8>
   1191a:	tbh	[pc, r3, lsl #1]
   1191e:	.short	0x0282
   11920:	.word	0x0282005f
   11924:	.word	0x005f005f
   11928:	.word	0x01e002cd
   1192c:	.word	0x01e001e0
   11930:	.word	0x01e001e0
   11934:	.word	0x01e001e0
   11938:	.word	0x026f026f
   1193c:	.word	0x005f005f
   11940:	.word	0x005f005f
   11944:	.word	0x005f005f
   11948:	.word	0x004e005f
   1194c:	.word	0x004e004e
   11950:	.word	0x004e004e
   11954:	.word	0x005f004e
   11958:	.word	0x005f005f
   1195c:	.word	0x005f005f
   11960:	.word	0x005f005f
   11964:	.word	0x005f005f
   11968:	.word	0x005f005f
   1196c:	.word	0x005f005f
   11970:	.word	0x005f005f
   11974:	.word	0x005f005f
   11978:	.word	0x005f0276
   1197c:	.word	0x005f005f
   11980:	.word	0x005f005f
   11984:	.word	0x005f005f
   11988:	.word	0x004e005f
   1198c:	.word	0x004e004e
   11990:	.word	0x004e004e
   11994:	.word	0x005f004e
   11998:	.word	0x005f005f
   1199c:	.word	0x005f005f
   119a0:	.word	0x005f005f
   119a4:	.word	0x005f005f
   119a8:	.word	0x005f005f
   119ac:	.word	0x005f005f
   119b0:	.word	0x005f005f
   119b4:	.word	0x005f005f
   119b8:	.short	0x0276
   119ba:	cmp	r6, #10
   119bc:	ble.n	119dc <__ssvfscanf_r+0x5e8>
   119be:	bic.w	r4, r4, #2944	; 0xb80
   119c2:	ldr	r3, [r1, #4]
   119c4:	strb.w	r0, [r5], #1
   119c8:	subs	r3, #1
   119ca:	cmp	r3, #0
   119cc:	str	r3, [r1, #4]
   119ce:	ble.w	11eec <__ssvfscanf_r+0xaf8>
   119d2:	adds	r2, #1
   119d4:	str	r2, [r1, #0]
   119d6:	subs.w	r8, r8, #1
   119da:	bne.n	1190e <__ssvfscanf_r+0x51a>
   119dc:	lsls	r0, r4, #23
   119de:	mov	r8, sl
   119e0:	str	r6, [r7, #56]	; 0x38
   119e2:	mov	sl, fp
   119e4:	mov	fp, r1
   119e6:	bpl.n	119f8 <__ssvfscanf_r+0x604>
   119e8:	ldr	r3, [r7, #40]	; 0x28
   119ea:	cmp	r5, r3
   119ec:	bhi.w	12234 <__ssvfscanf_r+0xe40>
   119f0:	ldr	r3, [r7, #40]	; 0x28
   119f2:	cmp	r5, r3
   119f4:	beq.w	115de <__ssvfscanf_r+0x1ea>
   119f8:	ands.w	r2, r4, #16
   119fc:	bne.n	11a20 <__ssvfscanf_r+0x62c>
   119fe:	ldr	r1, [r7, #40]	; 0x28
   11a00:	ldr	r3, [r7, #56]	; 0x38
   11a02:	ldr	r6, [r7, #44]	; 0x2c
   11a04:	strb	r2, [r5, #0]
   11a06:	mov	r0, r9
   11a08:	blx	r6
   11a0a:	lsls	r1, r4, #26
   11a0c:	bpl.w	12220 <__ssvfscanf_r+0xe2c>
   11a10:	ldr	r3, [r7, #48]	; 0x30
   11a12:	ldr.w	r2, [r3], #4
   11a16:	str	r0, [r2, #0]
   11a18:	str	r3, [r7, #48]	; 0x30
   11a1a:	ldr	r3, [r7, #68]	; 0x44
   11a1c:	adds	r3, #1
   11a1e:	str	r3, [r7, #68]	; 0x44
   11a20:	ldr	r3, [r7, #40]	; 0x28
   11a22:	subs	r5, r5, r3
   11a24:	add	r5, r8
   11a26:	add	sl, r5
   11a28:	b.n	11442 <__ssvfscanf_r+0x4e>
   11a2a:	cmp.w	r8, #0
   11a2e:	it	eq
   11a30:	moveq.w	r8, #4294967295
   11a34:	lsls	r0, r4, #31
   11a36:	bpl.w	11f64 <__ssvfscanf_r+0xb70>
   11a3a:	ands.w	r3, r4, #16
   11a3e:	str	r3, [r7, #52]	; 0x34
   11a40:	bne.w	1232c <__ssvfscanf_r+0xf38>
   11a44:	lsls	r1, r4, #24
   11a46:	bpl.w	12716 <__ssvfscanf_r+0x1322>
   11a4a:	ldr	r4, [r7, #48]	; 0x30
   11a4c:	ldr.w	r3, [r4], #4
   11a50:	str	r3, [r7, #60]	; 0x3c
   11a52:	cmp	r3, #0
   11a54:	beq.w	115de <__ssvfscanf_r+0x1ea>
   11a58:	movs	r0, #128	; 0x80
   11a5a:	bl	bab8 <malloc>
   11a5e:	str	r0, [r7, #72]	; 0x48
   11a60:	cmp	r0, #0
   11a62:	beq.w	12956 <__ssvfscanf_r+0x1562>
   11a66:	ldr	r3, [r7, #60]	; 0x3c
   11a68:	ldr	r2, [r7, #72]	; 0x48
   11a6a:	str	r2, [r3, #0]
   11a6c:	ldr	r2, [r7, #64]	; 0x40
   11a6e:	ldrh	r5, [r2, #6]
   11a70:	ldrh	r3, [r2, #4]
   11a72:	cmp	r5, r3
   11a74:	bcs.w	1251c <__ssvfscanf_r+0x1128>
   11a78:	ldr	r0, [r2, #0]
   11a7a:	ldr	r3, [r7, #60]	; 0x3c
   11a7c:	str.w	r3, [r0, r5, lsl #2]
   11a80:	ldr	r3, [r7, #64]	; 0x40
   11a82:	str	r4, [r7, #48]	; 0x30
   11a84:	adds	r5, #1
   11a86:	strh	r5, [r3, #6]
   11a88:	ldr	r3, [r7, #72]	; 0x48
   11a8a:	str	r3, [r7, #40]	; 0x28
   11a8c:	movs	r3, #32
   11a8e:	str	r3, [r7, #32]
   11a90:	ldr.w	r3, [fp]
   11a94:	ldr	r6, [pc, #708]	; (11d5c <__ssvfscanf_r+0x968>)
   11a96:	ldrb	r3, [r3, #0]
   11a98:	ldrb	r3, [r6, r3]
   11a9a:	ands.w	r3, r3, #8
   11a9e:	bne.w	12418 <__ssvfscanf_r+0x1024>
   11aa2:	ldr	r4, [r7, #36]	; 0x24
   11aa4:	str	r6, [r7, #36]	; 0x24
   11aa6:	mov	r5, r3
   11aa8:	bl	db54 <__locale_mb_cur_max>
   11aac:	cmp	r0, r5
   11aae:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   11ab2:	ldrd	r3, r2, [fp]
   11ab6:	add.w	r0, r7, #368	; 0x170
   11aba:	ldrb.w	r1, [r3], #1
   11abe:	strb	r1, [r0, r5]
   11ac0:	subs	r2, #1
   11ac2:	cmp	r4, #3
   11ac4:	strd	r3, r2, [fp]
   11ac8:	add.w	r5, r5, #1
   11acc:	add.w	r6, r7, #104	; 0x68
   11ad0:	bne.n	11ad8 <__ssvfscanf_r+0x6e4>
   11ad2:	ldr	r3, [r6, #0]
   11ad4:	cmp	r3, #4
   11ad6:	beq.n	11ae2 <__ssvfscanf_r+0x6ee>
   11ad8:	movs	r2, #8
   11ada:	movs	r1, #0
   11adc:	mov	r0, r6
   11ade:	bl	9444 <memset>
   11ae2:	add.w	r2, r7, #368	; 0x170
   11ae6:	ldr	r1, [r7, #72]	; 0x48
   11ae8:	str	r6, [sp, #0]
   11aea:	mov	r3, r5
   11aec:	mov	r0, r9
   11aee:	bl	14320 <_mbrtowc_r>
   11af2:	adds	r2, r0, #1
   11af4:	mov	r4, r0
   11af6:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   11afa:	cmp	r0, #0
   11afc:	bne.w	123f0 <__ssvfscanf_r+0xffc>
   11b00:	ldr	r3, [r7, #72]	; 0x48
   11b02:	str	r0, [r3, #0]
   11b04:	bl	143d8 <iswspace>
   11b08:	cmp	r0, #0
   11b0a:	bne.w	127c6 <__ssvfscanf_r+0x13d2>
   11b0e:	add	sl, r5
   11b10:	add.w	r8, r8, #4294967295
   11b14:	ldr	r3, [r7, #52]	; 0x34
   11b16:	cmp	r3, #0
   11b18:	bne.w	12782 <__ssvfscanf_r+0x138e>
   11b1c:	ldr	r3, [r7, #72]	; 0x48
   11b1e:	ldr	r2, [r7, #60]	; 0x3c
   11b20:	adds	r3, #4
   11b22:	str	r3, [r7, #72]	; 0x48
   11b24:	cmp	r2, #0
   11b26:	beq.w	12782 <__ssvfscanf_r+0x138e>
   11b2a:	ldr	r2, [r7, #40]	; 0x28
   11b2c:	subs	r5, r3, r2
   11b2e:	ldr	r3, [r7, #32]
   11b30:	cmp.w	r3, r5, asr #2
   11b34:	bls.w	129e4 <__ssvfscanf_r+0x15f0>
   11b38:	ldr	r5, [r7, #52]	; 0x34
   11b3a:	b.w	123f6 <__ssvfscanf_r+0x1002>
   11b3e:	cmp.w	r8, #0
   11b42:	it	eq
   11b44:	moveq.w	r8, #4294967295
   11b48:	lsls	r0, r4, #31
   11b4a:	bpl.w	12044 <__ssvfscanf_r+0xc50>
   11b4e:	ands.w	r3, r4, #16
   11b52:	str	r3, [r7, #40]	; 0x28
   11b54:	bne.w	1233e <__ssvfscanf_r+0xf4a>
   11b58:	lsls	r1, r4, #24
   11b5a:	bpl.w	12738 <__ssvfscanf_r+0x1344>
   11b5e:	ldr	r6, [r7, #48]	; 0x30
   11b60:	ldr.w	r3, [r6], #4
   11b64:	str	r3, [r7, #32]
   11b66:	cmp	r3, #0
   11b68:	beq.w	115de <__ssvfscanf_r+0x1ea>
   11b6c:	movs	r0, #128	; 0x80
   11b6e:	bl	bab8 <malloc>
   11b72:	mov	r4, r0
   11b74:	cmp	r0, #0
   11b76:	beq.w	12956 <__ssvfscanf_r+0x1562>
   11b7a:	ldr	r3, [r7, #32]
   11b7c:	ldr	r2, [r7, #64]	; 0x40
   11b7e:	str	r0, [r3, #0]
   11b80:	ldrh	r5, [r2, #6]
   11b82:	ldrh	r3, [r2, #4]
   11b84:	cmp	r5, r3
   11b86:	bcs.w	12544 <__ssvfscanf_r+0x1150>
   11b8a:	ldr	r0, [r2, #0]
   11b8c:	ldr	r3, [r7, #32]
   11b8e:	str.w	r3, [r0, r5, lsl #2]
   11b92:	ldr	r3, [r7, #64]	; 0x40
   11b94:	str	r6, [r7, #48]	; 0x30
   11b96:	adds	r5, #1
   11b98:	strh	r5, [r3, #6]
   11b9a:	movs	r3, #32
   11b9c:	str	r4, [r7, #28]
   11b9e:	str	r3, [r7, #24]
   11ba0:	ldr	r6, [r7, #36]	; 0x24
   11ba2:	str.w	sl, [r7, #60]	; 0x3c
   11ba6:	movs	r5, #0
   11ba8:	mov	sl, r8
   11baa:	mov	r8, r4
   11bac:	bl	db54 <__locale_mb_cur_max>
   11bb0:	cmp	r0, r5
   11bb2:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   11bb6:	ldrd	r3, r2, [fp]
   11bba:	ldrb.w	r1, [r3], #1
   11bbe:	subs	r2, #1
   11bc0:	add.w	r0, r7, #368	; 0x170
   11bc4:	strd	r3, r2, [fp]
   11bc8:	cmp	r6, #3
   11bca:	add.w	r3, r5, #1
   11bce:	strb	r1, [r0, r5]
   11bd0:	str	r3, [r7, #72]	; 0x48
   11bd2:	add.w	r4, r7, #96	; 0x60
   11bd6:	bne.n	11bde <__ssvfscanf_r+0x7ea>
   11bd8:	ldr	r3, [r4, #0]
   11bda:	cmp	r3, #4
   11bdc:	beq.n	11be8 <__ssvfscanf_r+0x7f4>
   11bde:	movs	r2, #8
   11be0:	movs	r1, #0
   11be2:	mov	r0, r4
   11be4:	bl	9444 <memset>
   11be8:	add.w	r2, r7, #368	; 0x170
   11bec:	ldr	r3, [r7, #72]	; 0x48
   11bee:	str	r4, [sp, #0]
   11bf0:	mov	r1, r8
   11bf2:	mov	r0, r9
   11bf4:	bl	14320 <_mbrtowc_r>
   11bf8:	adds	r2, r0, #1
   11bfa:	mov	r6, r0
   11bfc:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   11c00:	cmp	r0, #0
   11c02:	bne.w	1219a <__ssvfscanf_r+0xda6>
   11c06:	str.w	r0, [r8]
   11c0a:	mov	r5, r0
   11c0c:	add.w	r3, r7, #104	; 0x68
   11c10:	movs	r2, #8
   11c12:	movs	r1, #0
   11c14:	mov	r0, r3
   11c16:	str	r3, [r7, #52]	; 0x34
   11c18:	bl	9444 <memset>
   11c1c:	ldr	r1, [pc, #320]	; (11d60 <__ssvfscanf_r+0x96c>)
   11c1e:	ldr	r3, [r7, #52]	; 0x34
   11c20:	ldr.w	r1, [r1, #224]	; 0xe0
   11c24:	mov	r2, r5
   11c26:	mov	r0, r9
   11c28:	mov	r5, r1
   11c2a:	add.w	r1, r7, #80	; 0x50
   11c2e:	blx	r5
   11c30:	cmp	r0, #1
   11c32:	beq.w	123e0 <__ssvfscanf_r+0xfec>
   11c36:	movs	r2, #0
   11c38:	add.w	r3, r7, #112	; 0x70
   11c3c:	ldrb	r3, [r3, r2]
   11c3e:	cmp	r3, #0
   11c40:	beq.w	12786 <__ssvfscanf_r+0x1392>
   11c44:	ldr	r3, [r7, #60]	; 0x3c
   11c46:	ldr	r2, [r7, #72]	; 0x48
   11c48:	cmp	r6, #3
   11c4a:	add	r3, r2
   11c4c:	str	r3, [r7, #60]	; 0x3c
   11c4e:	beq.w	123e6 <__ssvfscanf_r+0xff2>
   11c52:	add.w	sl, sl, #4294967295
   11c56:	ldr	r3, [r7, #40]	; 0x28
   11c58:	cbnz	r3, 11c72 <__ssvfscanf_r+0x87e>
   11c5a:	ldr	r3, [r7, #32]
   11c5c:	add.w	r8, r8, #4
   11c60:	cbz	r3, 11c72 <__ssvfscanf_r+0x87e>
   11c62:	ldr	r3, [r7, #28]
   11c64:	sub.w	r4, r8, r3
   11c68:	ldr	r3, [r7, #24]
   11c6a:	cmp.w	r3, r4, asr #2
   11c6e:	bls.w	1247c <__ssvfscanf_r+0x1088>
   11c72:	ldr.w	r3, [fp, #4]
   11c76:	cmp	r3, #0
   11c78:	mov.w	r5, #0
   11c7c:	ble.w	121ac <__ssvfscanf_r+0xdb8>
   11c80:	cmp.w	sl, #0
   11c84:	bne.n	11bac <__ssvfscanf_r+0x7b8>
   11c86:	ldr.w	sl, [r7, #60]	; 0x3c
   11c8a:	str	r6, [r7, #36]	; 0x24
   11c8c:	mov	r4, r8
   11c8e:	ldr	r3, [r7, #40]	; 0x28
   11c90:	cmp	r3, #0
   11c92:	bne.w	11442 <__ssvfscanf_r+0x4e>
   11c96:	str	r3, [r4, #0]
   11c98:	ldr	r3, [r7, #32]
   11c9a:	cmp	r3, #0
   11c9c:	beq.w	12024 <__ssvfscanf_r+0xc30>
   11ca0:	ldr	r3, [r7, #28]
   11ca2:	ldr	r2, [r7, #24]
   11ca4:	subs	r1, r4, r3
   11ca6:	asrs	r3, r1, #2
   11ca8:	adds	r3, #1
   11caa:	cmp	r2, r3
   11cac:	bls.w	12024 <__ssvfscanf_r+0xc30>
   11cb0:	ldr	r4, [r7, #32]
   11cb2:	adds	r1, #4
   11cb4:	ldr	r0, [r4, #0]
   11cb6:	bl	c050 <realloc>
   11cba:	cmp	r0, #0
   11cbc:	beq.w	12024 <__ssvfscanf_r+0xc30>
   11cc0:	str	r0, [r4, #0]
   11cc2:	b.n	12024 <__ssvfscanf_r+0xc30>
   11cc4:	lsls	r1, r4, #20
   11cc6:	bpl.w	11830 <__ssvfscanf_r+0x43c>
   11cca:	ldr	r3, [r7, #60]	; 0x3c
   11ccc:	ldr	r1, [r7, #72]	; 0x48
   11cce:	adds	r3, r3, r1
   11cd0:	bne.w	11830 <__ssvfscanf_r+0x43c>
   11cd4:	str	r3, [r7, #72]	; 0x48
   11cd6:	bic.w	r4, r4, #384	; 0x180
   11cda:	str	r3, [r7, #60]	; 0x3c
   11cdc:	b.n	11806 <__ssvfscanf_r+0x412>
   11cde:	ldr	r3, [pc, #132]	; (11d64 <__ssvfscanf_r+0x970>)
   11ce0:	bic.w	r4, r4, #2944	; 0xb80
   11ce4:	ldrsh.w	r6, [r3, r6, lsl #1]
   11ce8:	b.n	119c2 <__ssvfscanf_r+0x5ce>
   11cea:	and.w	r3, r4, #2432	; 0x980
   11cee:	cmp.w	r3, #256	; 0x100
   11cf2:	bne.w	11830 <__ssvfscanf_r+0x43c>
   11cf6:	ldr	r3, [r7, #52]	; 0x34
   11cf8:	cmp	r3, #1
   11cfa:	bne.w	11830 <__ssvfscanf_r+0x43c>
   11cfe:	movs	r3, #48	; 0x30
   11d00:	strb.w	r3, [r5], #1
   11d04:	bic.w	r4, r4, #256	; 0x100
   11d08:	movs	r3, #0
   11d0a:	orr.w	r4, r4, #2048	; 0x800
   11d0e:	subs	r6, #1
   11d10:	str	r3, [r7, #52]	; 0x34
   11d12:	b.n	11806 <__ssvfscanf_r+0x412>
   11d14:	ldr	r3, [r7, #72]	; 0x48
   11d16:	cmp	r3, #6
   11d18:	bne.w	12804 <__ssvfscanf_r+0x1410>
   11d1c:	movs	r3, #7
   11d1e:	str	r3, [r7, #72]	; 0x48
   11d20:	b.n	11806 <__ssvfscanf_r+0x412>
   11d22:	lsls	r3, r4, #20
   11d24:	bpl.w	11830 <__ssvfscanf_r+0x43c>
   11d28:	and.w	r3, r4, #1280	; 0x500
   11d2c:	cmp.w	r3, #1024	; 0x400
   11d30:	beq.n	11d3e <__ssvfscanf_r+0x94a>
   11d32:	lsls	r1, r4, #21
   11d34:	bpl.w	11830 <__ssvfscanf_r+0x43c>
   11d38:	ldr	r3, [r7, #52]	; 0x34
   11d3a:	cmp	r3, #0
   11d3c:	beq.n	11dce <__ssvfscanf_r+0x9da>
   11d3e:	lsls	r3, r4, #22
   11d40:	bmi.n	11d4c <__ssvfscanf_r+0x958>
   11d42:	ldr	r3, [r7, #52]	; 0x34
   11d44:	ldr	r1, [r7, #28]
   11d46:	subs	r3, r3, r1
   11d48:	strd	r5, r3, [r7, #20]
   11d4c:	bic.w	r4, r4, #3968	; 0xf80
   11d50:	movs	r3, #0
   11d52:	orr.w	r4, r4, #384	; 0x180
   11d56:	str	r3, [r7, #52]	; 0x34
   11d58:	b.n	11806 <__ssvfscanf_r+0x412>
   11d5a:	nop
   11d5c:	.word	0x20000801
   11d60:	.word	0x20008964
   11d64:	.word	0x20002430
   11d68:	ldr	r3, [r7, #60]	; 0x3c
   11d6a:	cmp	r3, #0
   11d6c:	beq.w	1216e <__ssvfscanf_r+0xd7a>
   11d70:	ldr	r3, [r7, #60]	; 0x3c
   11d72:	cmp	r3, #2
   11d74:	beq.w	124d8 <__ssvfscanf_r+0x10e4>
   11d78:	ldr	r3, [r7, #72]	; 0x48
   11d7a:	cmp	r3, #1
   11d7c:	beq.w	12162 <__ssvfscanf_r+0xd6e>
   11d80:	cmp	r3, #4
   11d82:	beq.w	12162 <__ssvfscanf_r+0xd6e>
   11d86:	b.n	11830 <__ssvfscanf_r+0x43c>
   11d88:	ldr	r3, [r7, #72]	; 0x48
   11d8a:	cmp	r3, #7
   11d8c:	bne.w	12804 <__ssvfscanf_r+0x1410>
   11d90:	movs	r3, #8
   11d92:	str	r3, [r7, #72]	; 0x48
   11d94:	b.n	11806 <__ssvfscanf_r+0x412>
   11d96:	lsls	r0, r4, #20
   11d98:	bmi.w	1218e <__ssvfscanf_r+0xd9a>
   11d9c:	ldr	r3, [r7, #60]	; 0x3c
   11d9e:	cmp	r3, #1
   11da0:	bne.w	11830 <__ssvfscanf_r+0x43c>
   11da4:	movs	r3, #2
   11da6:	str	r3, [r7, #60]	; 0x3c
   11da8:	b.n	11806 <__ssvfscanf_r+0x412>
   11daa:	lsls	r3, r4, #24
   11dac:	bpl.w	11830 <__ssvfscanf_r+0x43c>
   11db0:	bic.w	r4, r4, #128	; 0x80
   11db4:	b.n	11806 <__ssvfscanf_r+0x412>
   11db6:	ldr	r3, [r7, #72]	; 0x48
   11db8:	cmp	r3, #0
   11dba:	bne.w	12156 <__ssvfscanf_r+0xd62>
   11dbe:	ldr	r3, [r7, #52]	; 0x34
   11dc0:	cbnz	r3, 11df0 <__ssvfscanf_r+0x9fc>
   11dc2:	and.w	r3, r4, #1792	; 0x700
   11dc6:	cmp.w	r3, #1792	; 0x700
   11dca:	beq.w	1280e <__ssvfscanf_r+0x141a>
   11dce:	ldr	r6, [r7, #72]	; 0x48
   11dd0:	vmov	r9, s16
   11dd4:	b.n	1183e <__ssvfscanf_r+0x44a>
   11dd6:	lsls	r1, r4, #20
   11dd8:	bmi.w	1214a <__ssvfscanf_r+0xd56>
   11ddc:	ldr	r3, [r7, #72]	; 0x48
   11dde:	cmp	r3, #2
   11de0:	bne.w	12804 <__ssvfscanf_r+0x1410>
   11de4:	movs	r3, #3
   11de6:	str	r3, [r7, #72]	; 0x48
   11de8:	b.n	11806 <__ssvfscanf_r+0x412>
   11dea:	lsls	r0, r4, #20
   11dec:	bpl.n	11d28 <__ssvfscanf_r+0x934>
   11dee:	b.n	11cca <__ssvfscanf_r+0x8d6>
   11df0:	ldr	r6, [r7, #72]	; 0x48
   11df2:	vmov	r9, s16
   11df6:	bic.w	r4, r4, #256	; 0x100
   11dfa:	b.n	1183e <__ssvfscanf_r+0x44a>
   11dfc:	ldr	r3, [pc, #564]	; (12034 <__ssvfscanf_r+0xc40>)
   11dfe:	ldrsh.w	r6, [r3, r6, lsl #1]
   11e02:	cmp	r6, #8
   11e04:	bgt.w	119be <__ssvfscanf_r+0x5ca>
   11e08:	b.n	119dc <__ssvfscanf_r+0x5e8>
   11e0a:	and.w	r3, r4, #1536	; 0x600
   11e0e:	cmp.w	r3, #512	; 0x200
   11e12:	bne.w	119dc <__ssvfscanf_r+0x5e8>
   11e16:	bic.w	r4, r4, #512	; 0x200
   11e1a:	orr.w	r4, r4, #1280	; 0x500
   11e1e:	movs	r6, #16
   11e20:	b.n	119c2 <__ssvfscanf_r+0x5ce>
   11e22:	lsls	r3, r4, #24
   11e24:	bpl.w	119dc <__ssvfscanf_r+0x5e8>
   11e28:	bic.w	r4, r4, #128	; 0x80
   11e2c:	b.n	119c2 <__ssvfscanf_r+0x5ce>
   11e2e:	orr.w	r4, r4, #1
   11e32:	ldr.w	r3, [fp, #4]
   11e36:	str	r1, [r7, #76]	; 0x4c
   11e38:	cmp	r3, #0
   11e3a:	orr.w	r4, r4, #64	; 0x40
   11e3e:	mov.w	r5, #0
   11e42:	bgt.w	11636 <__ssvfscanf_r+0x242>
   11e46:	mov	r1, fp
   11e48:	mov	r0, r9
   11e4a:	bl	14748 <__ssrefill_r>
   11e4e:	cmp	r0, #0
   11e50:	bne.w	115cc <__ssvfscanf_r+0x1d8>
   11e54:	lsls	r0, r4, #25
   11e56:	bmi.w	1163c <__ssvfscanf_r+0x248>
   11e5a:	ldr.w	r2, [fp]
   11e5e:	ldr	r6, [pc, #472]	; (12038 <__ssvfscanf_r+0xc44>)
   11e60:	ldrb	r3, [r2, #0]
   11e62:	ldrb	r3, [r6, r3]
   11e64:	lsls	r1, r3, #28
   11e66:	bpl.w	1163c <__ssvfscanf_r+0x248>
   11e6a:	ldr.w	r3, [fp, #4]
   11e6e:	subs	r3, #1
   11e70:	cmp	r3, #0
   11e72:	add.w	sl, sl, #1
   11e76:	str.w	r3, [fp, #4]
   11e7a:	add.w	r2, r2, #1
   11e7e:	ble.n	11f16 <__ssvfscanf_r+0xb22>
   11e80:	str.w	r2, [fp]
   11e84:	ldrb	r3, [r2, #0]
   11e86:	ldrb	r3, [r6, r3]
   11e88:	lsls	r1, r3, #28
   11e8a:	bpl.w	1163c <__ssvfscanf_r+0x248>
   11e8e:	b.n	11e6a <__ssvfscanf_r+0xa76>
   11e90:	orr.w	r4, r4, #1
   11e94:	ldr	r3, [pc, #420]	; (1203c <__ssvfscanf_r+0xc48>)
   11e96:	str	r3, [r7, #44]	; 0x2c
   11e98:	movs	r3, #8
   11e9a:	str	r1, [r7, #76]	; 0x4c
   11e9c:	str	r3, [r7, #56]	; 0x38
   11e9e:	movs	r5, #3
   11ea0:	b.w	1162c <__ssvfscanf_r+0x238>
   11ea4:	orr.w	r4, r4, #1
   11ea8:	ldr	r3, [pc, #404]	; (12040 <__ssvfscanf_r+0xc4c>)
   11eaa:	str	r3, [r7, #44]	; 0x2c
   11eac:	movs	r3, #10
   11eae:	str	r1, [r7, #76]	; 0x4c
   11eb0:	str	r3, [r7, #56]	; 0x38
   11eb2:	movs	r5, #3
   11eb4:	b.w	1162c <__ssvfscanf_r+0x238>
   11eb8:	lsls	r3, r4, #20
   11eba:	bpl.w	119c2 <__ssvfscanf_r+0x5ce>
   11ebe:	cbnz	r6, 11ec6 <__ssvfscanf_r+0xad2>
   11ec0:	orr.w	r4, r4, #512	; 0x200
   11ec4:	movs	r6, #8
   11ec6:	lsls	r3, r4, #21
   11ec8:	bmi.w	12218 <__ssvfscanf_r+0xe24>
   11ecc:	ldr	r3, [r7, #60]	; 0x3c
   11ece:	bic.w	r4, r4, #896	; 0x380
   11ed2:	cbz	r3, 11edc <__ssvfscanf_r+0xae8>
   11ed4:	subs	r3, #1
   11ed6:	str	r3, [r7, #60]	; 0x3c
   11ed8:	add.w	r8, r8, #1
   11edc:	ldr	r3, [r1, #4]
   11ede:	subs	r3, #1
   11ee0:	cmp	r3, #0
   11ee2:	add.w	sl, sl, #1
   11ee6:	str	r3, [r1, #4]
   11ee8:	bgt.w	119d2 <__ssvfscanf_r+0x5de>
   11eec:	mov	r0, r9
   11eee:	str	r1, [r7, #72]	; 0x48
   11ef0:	bl	14748 <__ssrefill_r>
   11ef4:	ldr	r1, [r7, #72]	; 0x48
   11ef6:	cmp	r0, #0
   11ef8:	beq.w	119d6 <__ssvfscanf_r+0x5e2>
   11efc:	b.n	119dc <__ssvfscanf_r+0x5e8>
   11efe:	vmov	r0, s16
   11f02:	mov	r1, fp
   11f04:	bl	14748 <__ssrefill_r>
   11f08:	cmp	r0, #0
   11f0a:	bne.w	11830 <__ssvfscanf_r+0x43c>
   11f0e:	cmp	r6, #0
   11f10:	bne.w	1169c <__ssvfscanf_r+0x2a8>
   11f14:	b.n	11830 <__ssvfscanf_r+0x43c>
   11f16:	mov	r1, fp
   11f18:	mov	r0, r9
   11f1a:	bl	14748 <__ssrefill_r>
   11f1e:	cmp	r0, #0
   11f20:	bne.w	115cc <__ssvfscanf_r+0x1d8>
   11f24:	ldr.w	r2, [fp]
   11f28:	b.n	11e60 <__ssvfscanf_r+0xa6c>
   11f2a:	ldr.w	r2, [fp, #4]
   11f2e:	b.n	11f50 <__ssvfscanf_r+0xb5c>
   11f30:	ldr.w	r3, [fp]
   11f34:	ldrb	r2, [r3, #0]
   11f36:	ldrb	r2, [r6, r2]
   11f38:	lsls	r1, r2, #28
   11f3a:	add.w	r3, r3, #1
   11f3e:	bpl.w	11442 <__ssvfscanf_r+0x4e>
   11f42:	ldr.w	r2, [fp, #4]
   11f46:	subs	r2, #1
   11f48:	strd	r3, r2, [fp]
   11f4c:	add.w	sl, sl, #1
   11f50:	cmp	r2, #0
   11f52:	bgt.n	11f30 <__ssvfscanf_r+0xb3c>
   11f54:	mov	r1, fp
   11f56:	mov	r0, r9
   11f58:	bl	14748 <__ssrefill_r>
   11f5c:	cmp	r0, #0
   11f5e:	beq.n	11f30 <__ssvfscanf_r+0xb3c>
   11f60:	b.w	11442 <__ssvfscanf_r+0x4e>
   11f64:	lsls	r1, r4, #27
   11f66:	bmi.w	125fc <__ssvfscanf_r+0x1208>
   11f6a:	ands.w	r4, r4, #128	; 0x80
   11f6e:	beq.w	126c8 <__ssvfscanf_r+0x12d4>
   11f72:	ldr	r4, [r7, #48]	; 0x30
   11f74:	ldr.w	r6, [r4], #4
   11f78:	str	r6, [r7, #72]	; 0x48
   11f7a:	cmp	r6, #0
   11f7c:	beq.w	115de <__ssvfscanf_r+0x1ea>
   11f80:	movs	r0, #32
   11f82:	bl	bab8 <malloc>
   11f86:	mov	r5, r0
   11f88:	cmp	r0, #0
   11f8a:	beq.w	12852 <__ssvfscanf_r+0x145e>
   11f8e:	ldr	r2, [r7, #64]	; 0x40
   11f90:	str	r0, [r6, #0]
   11f92:	ldrh	r3, [r2, #4]
   11f94:	ldrh	r6, [r2, #6]
   11f96:	cmp	r6, r3
   11f98:	bcs.w	124ec <__ssvfscanf_r+0x10f8>
   11f9c:	ldr	r0, [r2, #0]
   11f9e:	ldr	r3, [r7, #72]	; 0x48
   11fa0:	str.w	r3, [r0, r6, lsl #2]
   11fa4:	ldr	r3, [r7, #64]	; 0x40
   11fa6:	str	r4, [r7, #48]	; 0x30
   11fa8:	adds	r6, #1
   11faa:	strh	r6, [r3, #6]
   11fac:	movs	r3, #32
   11fae:	str	r3, [r7, #60]	; 0x3c
   11fb0:	ldr.w	r2, [fp]
   11fb4:	ldr	r6, [pc, #128]	; (12038 <__ssvfscanf_r+0xc44>)
   11fb6:	ldrb	r1, [r2, #0]
   11fb8:	ldrb	r1, [r6, r1]
   11fba:	lsls	r0, r1, #28
   11fbc:	bmi.w	12518 <__ssvfscanf_r+0x1124>
   11fc0:	mov	r3, r6
   11fc2:	mov	r4, r5
   11fc4:	mov	r0, r2
   11fc6:	mov	r6, r5
   11fc8:	ldr.w	r1, [fp, #4]
   11fcc:	ldr	r2, [r7, #72]	; 0x48
   11fce:	subs	r1, #1
   11fd0:	str.w	r1, [fp, #4]
   11fd4:	adds	r1, r0, #1
   11fd6:	str.w	r1, [fp]
   11fda:	mov	r5, r6
   11fdc:	ldrb	r1, [r0, #0]
   11fde:	strb.w	r1, [r5], #1
   11fe2:	cbz	r2, 11fee <__ssvfscanf_r+0xbfa>
   11fe4:	ldr	r2, [r7, #60]	; 0x3c
   11fe6:	subs	r6, r5, r4
   11fe8:	cmp	r6, r2
   11fea:	bcs.w	126e2 <__ssvfscanf_r+0x12ee>
   11fee:	subs.w	r8, r8, #1
   11ff2:	beq.n	1200c <__ssvfscanf_r+0xc18>
   11ff4:	ldr.w	r1, [fp, #4]
   11ff8:	cmp	r1, #0
   11ffa:	mov	r6, r5
   11ffc:	ble.w	1275c <__ssvfscanf_r+0x1368>
   12000:	ldr.w	r0, [fp]
   12004:	ldrb	r1, [r0, #0]
   12006:	ldrb	r1, [r3, r1]
   12008:	lsls	r1, r1, #28
   1200a:	bpl.n	11fc8 <__ssvfscanf_r+0xbd4>
   1200c:	subs	r1, r5, r4
   1200e:	add	sl, r1
   12010:	adds	r1, #1
   12012:	mov.w	r3, #0
   12016:	strb	r3, [r5, #0]
   12018:	ldr	r3, [r7, #72]	; 0x48
   1201a:	cbz	r3, 12024 <__ssvfscanf_r+0xc30>
   1201c:	ldr	r3, [r7, #60]	; 0x3c
   1201e:	cmp	r3, r1
   12020:	bhi.w	1274c <__ssvfscanf_r+0x1358>
   12024:	ldr	r3, [r7, #68]	; 0x44
   12026:	adds	r3, #1
   12028:	str	r3, [r7, #68]	; 0x44
   1202a:	b.w	11442 <__ssvfscanf_r+0x4e>
   1202e:	movs	r3, #0
   12030:	str	r3, [r7, #60]	; 0x3c
   12032:	b.n	118f8 <__ssvfscanf_r+0x504>
   12034:	.word	0x20002430
   12038:	.word	0x20000801
   1203c:	.word	0x0001400d
   12040:	.word	0x0000d401
   12044:	lsls	r6, r4, #27
   12046:	bmi.w	1234c <__ssvfscanf_r+0xf58>
   1204a:	ands.w	r4, r4, #128	; 0x80
   1204e:	beq.w	1272c <__ssvfscanf_r+0x1338>
   12052:	ldr	r4, [r7, #48]	; 0x30
   12054:	ldr.w	r6, [r4], #4
   12058:	str	r6, [r7, #72]	; 0x48
   1205a:	cmp	r6, #0
   1205c:	beq.w	115de <__ssvfscanf_r+0x1ea>
   12060:	movs	r0, #32
   12062:	bl	bab8 <malloc>
   12066:	mov	r5, r0
   12068:	cmp	r0, #0
   1206a:	beq.w	12852 <__ssvfscanf_r+0x145e>
   1206e:	ldr	r2, [r7, #64]	; 0x40
   12070:	str	r0, [r6, #0]
   12072:	ldrh	r3, [r2, #4]
   12074:	ldrh	r6, [r2, #6]
   12076:	cmp	r6, r3
   12078:	bcs.w	12570 <__ssvfscanf_r+0x117c>
   1207c:	ldr	r0, [r2, #0]
   1207e:	ldr	r3, [r7, #72]	; 0x48
   12080:	str.w	r3, [r0, r6, lsl #2]
   12084:	ldr	r3, [r7, #64]	; 0x40
   12086:	str	r4, [r7, #48]	; 0x30
   12088:	adds	r6, #1
   1208a:	strh	r6, [r3, #6]
   1208c:	movs	r4, #32
   1208e:	ldr.w	r2, [fp]
   12092:	add.w	r3, r7, #112	; 0x70
   12096:	mov	r1, r3
   12098:	ldrb	r3, [r2, #0]
   1209a:	ldrb	r3, [r1, r3]
   1209c:	cmp	r3, #0
   1209e:	beq.w	115de <__ssvfscanf_r+0x1ea>
   120a2:	vmov	s16, r9
   120a6:	ldr.w	r9, [r7, #72]	; 0x48
   120aa:	str.w	sl, [r7, #60]	; 0x3c
   120ae:	mov	r6, r5
   120b0:	mov	sl, r4
   120b2:	mov	r0, r2
   120b4:	mov	r4, r1
   120b6:	ldr.w	r1, [fp, #4]
   120ba:	adds	r3, r0, #1
   120bc:	subs	r1, #1
   120be:	strd	r3, r1, [fp]
   120c2:	mov	r1, r5
   120c4:	ldrb	r0, [r0, #0]
   120c6:	strb.w	r0, [r1], #1
   120ca:	cmp.w	r9, #0
   120ce:	beq.n	120d6 <__ssvfscanf_r+0xce2>
   120d0:	subs	r5, r1, r6
   120d2:	cmp	r5, sl
   120d4:	bcs.n	121cc <__ssvfscanf_r+0xdd8>
   120d6:	mov	r5, r1
   120d8:	subs.w	r8, r8, #1
   120dc:	beq.n	120f4 <__ssvfscanf_r+0xd00>
   120de:	ldr.w	r1, [fp, #4]
   120e2:	cmp	r1, #0
   120e4:	ble.w	123bc <__ssvfscanf_r+0xfc8>
   120e8:	ldr.w	r0, [fp]
   120ec:	ldrb	r1, [r0, #0]
   120ee:	ldrb	r1, [r4, r1]
   120f0:	cmp	r1, #0
   120f2:	bne.n	120b6 <__ssvfscanf_r+0xcc2>
   120f4:	mov	r4, sl
   120f6:	vmov	r9, s16
   120fa:	ldr.w	sl, [r7, #60]	; 0x3c
   120fe:	subs	r6, r5, r6
   12100:	beq.w	115de <__ssvfscanf_r+0x1ea>
   12104:	mov.w	r3, #0
   12108:	strb	r3, [r5, #0]
   1210a:	ldr	r3, [r7, #72]	; 0x48
   1210c:	cbz	r3, 12116 <__ssvfscanf_r+0xd22>
   1210e:	adds	r1, r6, #1
   12110:	cmp	r4, r1
   12112:	bhi.w	12770 <__ssvfscanf_r+0x137c>
   12116:	ldr	r3, [r7, #68]	; 0x44
   12118:	adds	r3, #1
   1211a:	add	sl, r6
   1211c:	str	r3, [r7, #68]	; 0x44
   1211e:	b.w	11442 <__ssvfscanf_r+0x4e>
   12122:	movs	r3, #0
   12124:	str	r3, [r7, #16]
   12126:	b.w	1167c <__ssvfscanf_r+0x288>
   1212a:	tst.w	r4, #143	; 0x8f
   1212e:	bne.w	115de <__ssvfscanf_r+0x1ea>
   12132:	add.w	r8, r8, r8, lsl #2
   12136:	add.w	r8, r2, r8, lsl #1
   1213a:	sub.w	r8, r8, #48	; 0x30
   1213e:	b.w	11610 <__ssvfscanf_r+0x21c>
   12142:	str	r1, [r7, #76]	; 0x4c
   12144:	movs	r5, #4
   12146:	b.w	1162c <__ssvfscanf_r+0x238>
   1214a:	ldr	r3, [r7, #60]	; 0x3c
   1214c:	ldr	r1, [r7, #72]	; 0x48
   1214e:	adds	r3, r3, r1
   12150:	bne.w	11ddc <__ssvfscanf_r+0x9e8>
   12154:	b.n	11cd4 <__ssvfscanf_r+0x8e0>
   12156:	ldr	r3, [r7, #72]	; 0x48
   12158:	cmp	r3, #3
   1215a:	beq.n	12162 <__ssvfscanf_r+0xd6e>
   1215c:	cmp	r3, #5
   1215e:	bne.w	11830 <__ssvfscanf_r+0x43c>
   12162:	ldr	r3, [r7, #72]	; 0x48
   12164:	adds	r3, #1
   12166:	uxtb	r3, r3
   12168:	str	r3, [r7, #72]	; 0x48
   1216a:	b.w	11806 <__ssvfscanf_r+0x412>
   1216e:	ldr	r3, [r7, #52]	; 0x34
   12170:	cmp	r3, #0
   12172:	bne.w	11d78 <__ssvfscanf_r+0x984>
   12176:	and.w	r3, r4, #1792	; 0x700
   1217a:	cmp.w	r3, #1792	; 0x700
   1217e:	bne.w	11d78 <__ssvfscanf_r+0x984>
   12182:	movs	r3, #1
   12184:	bic.w	r4, r4, #1920	; 0x780
   12188:	str	r3, [r7, #60]	; 0x3c
   1218a:	b.w	11806 <__ssvfscanf_r+0x412>
   1218e:	ldr	r3, [r7, #60]	; 0x3c
   12190:	ldr	r1, [r7, #72]	; 0x48
   12192:	adds	r3, r3, r1
   12194:	bne.w	11d9c <__ssvfscanf_r+0x9a8>
   12198:	b.n	11cd4 <__ssvfscanf_r+0x8e0>
   1219a:	adds	r3, r0, #2
   1219c:	bne.w	12a56 <__ssvfscanf_r+0x1662>
   121a0:	ldr.w	r3, [fp, #4]
   121a4:	ldr	r5, [r7, #72]	; 0x48
   121a6:	cmp	r3, #0
   121a8:	bgt.w	11bac <__ssvfscanf_r+0x7b8>
   121ac:	mov	r1, fp
   121ae:	mov	r0, r9
   121b0:	bl	14748 <__ssrefill_r>
   121b4:	cmp	r0, #0
   121b6:	beq.w	11c80 <__ssvfscanf_r+0x88c>
   121ba:	ldr.w	sl, [r7, #60]	; 0x3c
   121be:	str	r6, [r7, #36]	; 0x24
   121c0:	mov	r4, r8
   121c2:	cmp	r5, #0
   121c4:	beq.w	11c8e <__ssvfscanf_r+0x89a>
   121c8:	b.w	115cc <__ssvfscanf_r+0x1d8>
   121cc:	mov.w	sl, sl, lsl #1
   121d0:	mov	r0, r6
   121d2:	mov	r1, sl
   121d4:	bl	c050 <realloc>
   121d8:	mov	r6, r0
   121da:	cmp	r0, #0
   121dc:	beq.w	12852 <__ssvfscanf_r+0x145e>
   121e0:	add	r5, r0
   121e2:	str.w	r0, [r9]
   121e6:	b.n	120d8 <__ssvfscanf_r+0xce4>
   121e8:	orr.w	r4, r4, #512	; 0x200
   121ec:	ldr	r3, [pc, #752]	; (124e0 <__ssvfscanf_r+0x10ec>)
   121ee:	str	r3, [r7, #44]	; 0x2c
   121f0:	movs	r3, #16
   121f2:	str	r1, [r7, #76]	; 0x4c
   121f4:	str	r3, [r7, #56]	; 0x38
   121f6:	movs	r5, #3
   121f8:	b.w	1162c <__ssvfscanf_r+0x238>
   121fc:	ldr	r3, [r7, #52]	; 0x34
   121fe:	adds	r3, #1
   12200:	str	r3, [r7, #52]	; 0x34
   12202:	ldr	r3, [r7, #16]
   12204:	bic.w	r4, r4, #128	; 0x80
   12208:	cmp	r3, #0
   1220a:	beq.w	1180a <__ssvfscanf_r+0x416>
   1220e:	ldr	r3, [r7, #16]
   12210:	subs	r3, #1
   12212:	str	r3, [r7, #16]
   12214:	b.w	1180c <__ssvfscanf_r+0x418>
   12218:	bic.w	r4, r4, #1408	; 0x580
   1221c:	b.w	119c2 <__ssvfscanf_r+0x5ce>
   12220:	lsls	r2, r4, #28
   12222:	bpl.w	125b4 <__ssvfscanf_r+0x11c0>
   12226:	ldr	r3, [r7, #48]	; 0x30
   12228:	ldr.w	r2, [r3], #4
   1222c:	str	r3, [r7, #48]	; 0x30
   1222e:	strb	r0, [r2, #0]
   12230:	b.w	11a1a <__ssvfscanf_r+0x626>
   12234:	ldrb.w	r1, [r5, #-1]
   12238:	mov	r2, fp
   1223a:	mov	r0, r9
   1223c:	subs	r5, #1
   1223e:	bl	146c8 <_sungetc_r>
   12242:	b.w	119f0 <__ssvfscanf_r+0x5fc>
   12246:	ldr	r3, [r7, #28]
   12248:	ldr	r2, [r7, #52]	; 0x34
   1224a:	cmp	r3, r2
   1224c:	beq.w	118aa <__ssvfscanf_r+0x4b6>
   12250:	subs	r2, r3, r2
   12252:	addw	r3, r7, #707	; 0x2c3
   12256:	cmp	r5, r3
   12258:	it	cs
   1225a:	addwcs	r5, r7, #706	; 0x2c2
   1225e:	ldr	r1, [pc, #644]	; (124e4 <__ssvfscanf_r+0x10f0>)
   12260:	mov	r0, r5
   12262:	bl	d66c <sprintf>
   12266:	b.w	118aa <__ssvfscanf_r+0x4b6>
   1226a:	lsls	r2, r4, #27
   1226c:	bmi.w	124d2 <__ssvfscanf_r+0x10de>
   12270:	lsls	r3, r4, #28
   12272:	bmi.w	125ea <__ssvfscanf_r+0x11f6>
   12276:	lsls	r6, r4, #29
   12278:	bpl.w	127e4 <__ssvfscanf_r+0x13f0>
   1227c:	ldr	r3, [r7, #48]	; 0x30
   1227e:	str	r1, [r7, #76]	; 0x4c
   12280:	ldr.w	r2, [r3], #4
   12284:	str	r3, [r7, #48]	; 0x30
   12286:	strh.w	sl, [r2]
   1228a:	b.w	11442 <__ssvfscanf_r+0x4e>
   1228e:	lsls	r3, r4, #28
   12290:	bne.w	115de <__ssvfscanf_r+0x1ea>
   12294:	ldrb	r2, [r0, #1]
   12296:	cmp	r2, #104	; 0x68
   12298:	beq.w	125a8 <__ssvfscanf_r+0x11b4>
   1229c:	orr.w	r4, r4, #4
   122a0:	mov	r0, r1
   122a2:	b.w	11504 <__ssvfscanf_r+0x110>
   122a6:	ldr	r3, [pc, #568]	; (124e0 <__ssvfscanf_r+0x10ec>)
   122a8:	str	r3, [r7, #44]	; 0x2c
   122aa:	movs	r3, #10
   122ac:	str	r1, [r7, #76]	; 0x4c
   122ae:	str	r3, [r7, #56]	; 0x38
   122b0:	movs	r5, #3
   122b2:	b.w	1162c <__ssvfscanf_r+0x238>
   122b6:	ldr	r3, [pc, #560]	; (124e8 <__ssvfscanf_r+0x10f4>)
   122b8:	str	r3, [r7, #44]	; 0x2c
   122ba:	movs	r3, #0
   122bc:	str	r1, [r7, #76]	; 0x4c
   122be:	str	r3, [r7, #56]	; 0x38
   122c0:	movs	r5, #3
   122c2:	b.w	1162c <__ssvfscanf_r+0x238>
   122c6:	orr.w	r4, r4, #544	; 0x220
   122ca:	b.n	121ec <__ssvfscanf_r+0xdf8>
   122cc:	add.w	r0, r7, #112	; 0x70
   122d0:	bl	12e90 <__sccl>
   122d4:	orr.w	r4, r4, #64	; 0x40
   122d8:	str	r0, [r7, #76]	; 0x4c
   122da:	movs	r5, #1
   122dc:	b.w	1162c <__ssvfscanf_r+0x238>
   122e0:	lsls	r2, r4, #28
   122e2:	bne.w	115de <__ssvfscanf_r+0x1ea>
   122e6:	ldrb	r2, [r0, #1]
   122e8:	cmp	r2, #108	; 0x6c
   122ea:	beq.w	1259c <__ssvfscanf_r+0x11a8>
   122ee:	orr.w	r4, r4, #1
   122f2:	mov	r0, r1
   122f4:	b.w	11504 <__ssvfscanf_r+0x110>
   122f8:	ands.w	r3, r4, #143	; 0x8f
   122fc:	bne.w	115de <__ssvfscanf_r+0x1ea>
   12300:	ldr	r2, [r7, #64]	; 0x40
   12302:	cmp	r2, #0
   12304:	beq.w	126d6 <__ssvfscanf_r+0x12e2>
   12308:	ldrb	r2, [r0, #1]
   1230a:	orr.w	r4, r4, #128	; 0x80
   1230e:	mov	r0, r1
   12310:	b.w	11504 <__ssvfscanf_r+0x110>
   12314:	orrs.w	r8, r8, r4
   12318:	bne.w	115de <__ssvfscanf_r+0x1ea>
   1231c:	ldrb	r2, [r0, #1]
   1231e:	movs	r4, #16
   12320:	mov	r0, r1
   12322:	b.w	11504 <__ssvfscanf_r+0x110>
   12326:	str	r1, [r7, #76]	; 0x4c
   12328:	b.w	1147a <__ssvfscanf_r+0x86>
   1232c:	movs	r3, #0
   1232e:	str	r3, [r7, #32]
   12330:	str	r3, [r7, #40]	; 0x28
   12332:	str	r3, [r7, #60]	; 0x3c
   12334:	add.w	r3, r7, #84	; 0x54
   12338:	str	r3, [r7, #72]	; 0x48
   1233a:	b.w	11a90 <__ssvfscanf_r+0x69c>
   1233e:	movs	r3, #0
   12340:	strd	r3, r3, [r7, #24]
   12344:	str	r3, [r7, #32]
   12346:	add.w	r4, r7, #84	; 0x54
   1234a:	b.n	11ba0 <__ssvfscanf_r+0x7ac>
   1234c:	ldr.w	r3, [fp]
   12350:	add.w	r2, r7, #112	; 0x70
   12354:	mov	r1, r2
   12356:	ldrb	r2, [r3, #0]
   12358:	ldrb	r2, [r1, r2]
   1235a:	cmp	r2, #0
   1235c:	beq.w	115de <__ssvfscanf_r+0x1ea>
   12360:	adds	r3, #1
   12362:	str.w	r3, [fp]
   12366:	ldr.w	r3, [fp, #4]
   1236a:	cmp.w	r8, #1
   1236e:	add.w	r3, r3, #4294967295
   12372:	str.w	r3, [fp, #4]
   12376:	it	ne
   12378:	movne	r4, r1
   1237a:	bne.n	123a6 <__ssvfscanf_r+0xfb2>
   1237c:	b.w	11a26 <__ssvfscanf_r+0x632>
   12380:	ldr.w	r3, [fp]
   12384:	ldrb	r2, [r3, #0]
   12386:	ldrb	r2, [r4, r2]
   12388:	adds	r3, #1
   1238a:	cmp	r2, #0
   1238c:	beq.w	11a26 <__ssvfscanf_r+0x632>
   12390:	str.w	r3, [fp]
   12394:	ldr.w	r3, [fp, #4]
   12398:	adds	r5, #1
   1239a:	subs	r3, #1
   1239c:	cmp	r5, r8
   1239e:	str.w	r3, [fp, #4]
   123a2:	beq.w	11a26 <__ssvfscanf_r+0x632>
   123a6:	cmp	r3, #0
   123a8:	bgt.n	12380 <__ssvfscanf_r+0xf8c>
   123aa:	mov	r1, fp
   123ac:	mov	r0, r9
   123ae:	bl	14748 <__ssrefill_r>
   123b2:	cmp	r0, #0
   123b4:	beq.n	12380 <__ssvfscanf_r+0xf8c>
   123b6:	add	sl, r5
   123b8:	b.w	11442 <__ssvfscanf_r+0x4e>
   123bc:	vmov	r0, s16
   123c0:	mov	r1, fp
   123c2:	bl	14748 <__ssrefill_r>
   123c6:	cmp	r0, #0
   123c8:	beq.w	120e8 <__ssvfscanf_r+0xcf4>
   123cc:	cmp	r5, r6
   123ce:	mov	r4, sl
   123d0:	vmov	r9, s16
   123d4:	ldr.w	sl, [r7, #60]	; 0x3c
   123d8:	bne.w	120fe <__ssvfscanf_r+0xd0a>
   123dc:	b.w	115cc <__ssvfscanf_r+0x1d8>
   123e0:	ldrb.w	r2, [r7, #80]	; 0x50
   123e4:	b.n	11c38 <__ssvfscanf_r+0x844>
   123e6:	ldr	r3, [r4, #0]
   123e8:	cmp	r3, #4
   123ea:	bne.w	11c52 <__ssvfscanf_r+0x85e>
   123ee:	b.n	11c56 <__ssvfscanf_r+0x862>
   123f0:	adds	r3, r0, #2
   123f2:	bne.w	12a68 <__ssvfscanf_r+0x1674>
   123f6:	ldr.w	r3, [fp, #4]
   123fa:	cmp	r3, #0
   123fc:	ble.w	127ae <__ssvfscanf_r+0x13ba>
   12400:	ldr.w	r3, [fp]
   12404:	ldr	r2, [r7, #36]	; 0x24
   12406:	ldrb	r3, [r3, #0]
   12408:	ldrb	r3, [r2, r3]
   1240a:	lsls	r0, r3, #28
   1240c:	bmi.n	12416 <__ssvfscanf_r+0x1022>
   1240e:	cmp.w	r8, #0
   12412:	bne.w	11aa8 <__ssvfscanf_r+0x6b4>
   12416:	str	r4, [r7, #36]	; 0x24
   12418:	ldr	r3, [r7, #52]	; 0x34
   1241a:	cmp	r3, #0
   1241c:	bne.w	11442 <__ssvfscanf_r+0x4e>
   12420:	ldr	r2, [r7, #72]	; 0x48
   12422:	str	r3, [r2, #0]
   12424:	ldr	r3, [r7, #60]	; 0x3c
   12426:	cmp	r3, #0
   12428:	beq.w	12024 <__ssvfscanf_r+0xc30>
   1242c:	ldr	r3, [r7, #40]	; 0x28
   1242e:	subs	r1, r2, r3
   12430:	asrs	r3, r1, #2
   12432:	ldr	r2, [r7, #32]
   12434:	adds	r3, #1
   12436:	cmp	r2, r3
   12438:	bls.w	12024 <__ssvfscanf_r+0xc30>
   1243c:	ldr	r4, [r7, #60]	; 0x3c
   1243e:	adds	r1, #4
   12440:	ldr	r0, [r4, #0]
   12442:	bl	c050 <realloc>
   12446:	cmp	r0, #0
   12448:	bne.w	11cc0 <__ssvfscanf_r+0x8cc>
   1244c:	b.n	12024 <__ssvfscanf_r+0xc30>
   1244e:	ldr.w	r2, [r3], #4
   12452:	vstr	d0, [r2]
   12456:	str	r3, [r7, #48]	; 0x30
   12458:	b.n	12024 <__ssvfscanf_r+0xc30>
   1245a:	ldr	r5, [r7, #12]
   1245c:	ldr	r1, [r7, #32]
   1245e:	ldr	r6, [r7, #4]
   12460:	mov	r0, r5
   12462:	mov	r2, r8
   12464:	mov	fp, r4
   12466:	ldr	r4, [r7, #8]
   12468:	bl	12f18 <stpncpy>
   1246c:	ldr	r3, [r7, #52]	; 0x34
   1246e:	str	r3, [r7, #28]
   12470:	bic.w	r4, r4, #640	; 0x280
   12474:	subs	r6, #1
   12476:	mov	r5, r0
   12478:	b.w	1180c <__ssvfscanf_r+0x418>
   1247c:	ldr	r0, [r7, #28]
   1247e:	lsls	r1, r3, #3
   12480:	mov	r5, r3
   12482:	bl	c050 <realloc>
   12486:	str	r0, [r7, #28]
   12488:	cmp	r0, #0
   1248a:	beq.w	12956 <__ssvfscanf_r+0x1562>
   1248e:	ldr	r2, [r7, #32]
   12490:	lsls	r3, r5, #1
   12492:	add.w	r8, r0, r4
   12496:	str	r0, [r2, #0]
   12498:	str	r3, [r7, #24]
   1249a:	b.w	11c72 <__ssvfscanf_r+0x87e>
   1249e:	cmp	r6, #2
   124a0:	bls.w	12a2c <__ssvfscanf_r+0x1638>
   124a4:	cmp	r6, #3
   124a6:	beq.w	11850 <__ssvfscanf_r+0x45c>
   124aa:	subs	r6, #4
   124ac:	uxtb.w	r8, r6
   124b0:	mvn.w	r3, r8
   124b4:	adds	r6, r5, r3
   124b6:	ldrb.w	r1, [r5, #-1]!
   124ba:	mov	r2, fp
   124bc:	mov	r0, r9
   124be:	bl	146c8 <_sungetc_r>
   124c2:	cmp	r6, r5
   124c4:	bne.n	124b6 <__ssvfscanf_r+0x10c2>
   124c6:	add.w	sl, sl, #4294967295
   124ca:	sub.w	sl, sl, r8
   124ce:	b.w	11850 <__ssvfscanf_r+0x45c>
   124d2:	str	r1, [r7, #76]	; 0x4c
   124d4:	b.w	11442 <__ssvfscanf_r+0x4e>
   124d8:	movs	r3, #3
   124da:	str	r3, [r7, #60]	; 0x3c
   124dc:	b.w	11806 <__ssvfscanf_r+0x412>
   124e0:	.word	0x0001400d
   124e4:	.word	0x200007f8
   124e8:	.word	0x0000d401
   124ec:	movw	r2, #65526	; 0xfff6
   124f0:	cmp	r3, r2
   124f2:	bhi.w	12a24 <__ssvfscanf_r+0x1630>
   124f6:	ldr	r2, [r7, #64]	; 0x40
   124f8:	adds	r3, #8
   124fa:	uxth	r3, r3
   124fc:	ldr	r0, [r2, #0]
   124fe:	str	r0, [r7, #60]	; 0x3c
   12500:	lsls	r1, r3, #2
   12502:	str	r3, [r7, #52]	; 0x34
   12504:	bl	c050 <realloc>
   12508:	cmp	r0, #0
   1250a:	beq.w	12a04 <__ssvfscanf_r+0x1610>
   1250e:	ldr	r2, [r7, #64]	; 0x40
   12510:	ldr	r3, [r7, #52]	; 0x34
   12512:	strh	r3, [r2, #4]
   12514:	str	r0, [r2, #0]
   12516:	b.n	11f9e <__ssvfscanf_r+0xbaa>
   12518:	movs	r1, #1
   1251a:	b.n	12012 <__ssvfscanf_r+0xc1e>
   1251c:	movw	r2, #65526	; 0xfff6
   12520:	cmp	r3, r2
   12522:	bhi.w	12a4c <__ssvfscanf_r+0x1658>
   12526:	adds	r3, #8
   12528:	uxth	r6, r3
   1252a:	ldr	r3, [r7, #64]	; 0x40
   1252c:	lsls	r1, r6, #2
   1252e:	ldr	r0, [r3, #0]
   12530:	bl	c050 <realloc>
   12534:	ldr	r3, [r7, #64]	; 0x40
   12536:	cmp	r0, #0
   12538:	beq.w	129b8 <__ssvfscanf_r+0x15c4>
   1253c:	strh	r6, [r3, #4]
   1253e:	str	r0, [r3, #0]
   12540:	b.w	11a7a <__ssvfscanf_r+0x686>
   12544:	movw	r2, #65526	; 0xfff6
   12548:	cmp	r3, r2
   1254a:	bhi.w	12a4c <__ssvfscanf_r+0x1658>
   1254e:	ldr	r2, [r7, #64]	; 0x40
   12550:	adds	r3, #8
   12552:	uxth	r3, r3
   12554:	lsls	r1, r3, #2
   12556:	ldr	r0, [r2, #0]
   12558:	str	r3, [r7, #72]	; 0x48
   1255a:	bl	c050 <realloc>
   1255e:	ldr	r3, [r7, #72]	; 0x48
   12560:	cmp	r0, #0
   12562:	beq.w	129b6 <__ssvfscanf_r+0x15c2>
   12566:	ldr	r2, [r7, #64]	; 0x40
   12568:	strh	r3, [r2, #4]
   1256a:	str	r0, [r2, #0]
   1256c:	b.w	11b8c <__ssvfscanf_r+0x798>
   12570:	movw	r2, #65526	; 0xfff6
   12574:	cmp	r3, r2
   12576:	bhi.w	12a24 <__ssvfscanf_r+0x1630>
   1257a:	ldr	r2, [r7, #64]	; 0x40
   1257c:	adds	r3, #8
   1257e:	uxth	r3, r3
   12580:	ldr	r0, [r2, #0]
   12582:	str	r0, [r7, #60]	; 0x3c
   12584:	lsls	r1, r3, #2
   12586:	str	r3, [r7, #52]	; 0x34
   12588:	bl	c050 <realloc>
   1258c:	cmp	r0, #0
   1258e:	beq.w	12a04 <__ssvfscanf_r+0x1610>
   12592:	ldr	r2, [r7, #64]	; 0x40
   12594:	ldr	r3, [r7, #52]	; 0x34
   12596:	strh	r3, [r2, #4]
   12598:	str	r0, [r2, #0]
   1259a:	b.n	1207e <__ssvfscanf_r+0xc8a>
   1259c:	ldrb	r2, [r0, #2]
   1259e:	orr.w	r4, r4, #2
   125a2:	adds	r0, #2
   125a4:	b.w	11504 <__ssvfscanf_r+0x110>
   125a8:	ldrb	r2, [r0, #2]
   125aa:	orr.w	r4, r4, #8
   125ae:	adds	r0, #2
   125b0:	b.w	11504 <__ssvfscanf_r+0x110>
   125b4:	lsls	r3, r4, #29
   125b6:	bmi.n	1266a <__ssvfscanf_r+0x1276>
   125b8:	ands.w	r2, r4, #1
   125bc:	bne.w	11a10 <__ssvfscanf_r+0x61c>
   125c0:	lsls	r6, r4, #30
   125c2:	bpl.w	11a10 <__ssvfscanf_r+0x61c>
   125c6:	ldr	r3, [pc, #716]	; (12894 <__ssvfscanf_r+0x14a0>)
   125c8:	ldr	r1, [r7, #44]	; 0x2c
   125ca:	cmp	r1, r3
   125cc:	mov	r0, r9
   125ce:	ldr	r3, [r7, #56]	; 0x38
   125d0:	ldr	r1, [r7, #40]	; 0x28
   125d2:	beq.w	12a50 <__ssvfscanf_r+0x165c>
   125d6:	bl	1417c <_strtoll_r>
   125da:	ldr	r3, [r7, #48]	; 0x30
   125dc:	ldr.w	r2, [r3], #4
   125e0:	str	r3, [r7, #48]	; 0x30
   125e2:	strd	r0, r1, [r2]
   125e6:	b.w	11a1a <__ssvfscanf_r+0x626>
   125ea:	ldr	r3, [r7, #48]	; 0x30
   125ec:	str	r1, [r7, #76]	; 0x4c
   125ee:	ldr.w	r2, [r3], #4
   125f2:	str	r3, [r7, #48]	; 0x30
   125f4:	strb.w	sl, [r2]
   125f8:	b.w	11442 <__ssvfscanf_r+0x4e>
   125fc:	ldr.w	r3, [fp]
   12600:	ldr	r6, [pc, #660]	; (12898 <__ssvfscanf_r+0x14a4>)
   12602:	ldrb	r2, [r3, #0]
   12604:	ldrb	r2, [r6, r2]
   12606:	lsls	r2, r2, #28
   12608:	bmi.w	11442 <__ssvfscanf_r+0x4e>
   1260c:	adds	r3, #1
   1260e:	str.w	r3, [fp]
   12612:	ldr.w	r3, [fp, #4]
   12616:	cmp.w	r8, #1
   1261a:	add.w	r3, r3, #4294967295
   1261e:	str.w	r3, [fp, #4]
   12622:	it	eq
   12624:	addeq.w	sl, sl, #1
   12628:	beq.w	11442 <__ssvfscanf_r+0x4e>
   1262c:	movs	r4, #1
   1262e:	b.n	12654 <__ssvfscanf_r+0x1260>
   12630:	ldr.w	r3, [fp]
   12634:	ldrb	r2, [r3, #0]
   12636:	ldrb	r2, [r6, r2]
   12638:	lsls	r5, r2, #28
   1263a:	add.w	r3, r3, #1
   1263e:	bmi.n	12664 <__ssvfscanf_r+0x1270>
   12640:	str.w	r3, [fp]
   12644:	ldr.w	r3, [fp, #4]
   12648:	adds	r4, #1
   1264a:	subs	r3, #1
   1264c:	cmp	r4, r8
   1264e:	str.w	r3, [fp, #4]
   12652:	beq.n	12664 <__ssvfscanf_r+0x1270>
   12654:	cmp	r3, #0
   12656:	bgt.n	12630 <__ssvfscanf_r+0x123c>
   12658:	mov	r1, fp
   1265a:	mov	r0, r9
   1265c:	bl	14748 <__ssrefill_r>
   12660:	cmp	r0, #0
   12662:	beq.n	12630 <__ssvfscanf_r+0x123c>
   12664:	add	sl, r4
   12666:	b.w	11442 <__ssvfscanf_r+0x4e>
   1266a:	ldr	r3, [r7, #48]	; 0x30
   1266c:	ldr.w	r2, [r3], #4
   12670:	str	r3, [r7, #48]	; 0x30
   12672:	strh	r0, [r2, #0]
   12674:	b.w	11a1a <__ssvfscanf_r+0x626>
   12678:	ldr	r3, [r7, #64]	; 0x40
   1267a:	cmp	r3, #0
   1267c:	beq.w	1295c <__ssvfscanf_r+0x1568>
   12680:	ldr	r3, [r7, #64]	; 0x40
   12682:	ldr.w	r8, [r3]
   12686:	ldrh	r6, [r3, #6]
   12688:	cbz	r6, 126a8 <__ssvfscanf_r+0x12b4>
   1268a:	movs	r4, #0
   1268c:	sub.w	r5, r8, #4
   12690:	mov	r9, r4
   12692:	ldr.w	r3, [r5, #4]!
   12696:	ldr	r0, [r3, #0]
   12698:	bl	bac8 <free>
   1269c:	adds	r4, #1
   1269e:	ldr	r3, [r5, #0]
   126a0:	cmp	r6, r4
   126a2:	str.w	r9, [r3]
   126a6:	bne.n	12692 <__ssvfscanf_r+0x129e>
   126a8:	mov.w	r3, #4294967295
   126ac:	str	r3, [r7, #68]	; 0x44
   126ae:	cmp.w	r8, #0
   126b2:	bne.w	115ee <__ssvfscanf_r+0x1fa>
   126b6:	b.w	115f4 <__ssvfscanf_r+0x200>
   126ba:	ldr	r0, [pc, #480]	; (1289c <__ssvfscanf_r+0x14a8>)
   126bc:	str	r3, [r7, #48]	; 0x30
   126be:	bl	e1f0 <nanf>
   126c2:	vstr	s0, [r4]
   126c6:	b.n	12024 <__ssvfscanf_r+0xc30>
   126c8:	ldr	r2, [r7, #48]	; 0x30
   126ca:	str	r4, [r7, #60]	; 0x3c
   126cc:	ldr.w	r5, [r2], #4
   126d0:	str	r2, [r7, #48]	; 0x30
   126d2:	str	r4, [r7, #72]	; 0x48
   126d4:	b.n	11fb0 <__ssvfscanf_r+0xbbc>
   126d6:	sub	sp, #8
   126d8:	strd	r3, r3, [sp, #8]
   126dc:	add	r3, sp, #8
   126de:	str	r3, [r7, #64]	; 0x40
   126e0:	b.n	12308 <__ssvfscanf_r+0xf14>
   126e2:	str	r3, [r7, #52]	; 0x34
   126e4:	lsls	r3, r2, #1
   126e6:	mov	r0, r4
   126e8:	mov	r1, r3
   126ea:	str	r3, [r7, #60]	; 0x3c
   126ec:	bl	c050 <realloc>
   126f0:	mov	r4, r0
   126f2:	cmp	r0, #0
   126f4:	beq.w	12852 <__ssvfscanf_r+0x145e>
   126f8:	ldr	r3, [r7, #72]	; 0x48
   126fa:	adds	r5, r0, r6
   126fc:	str	r0, [r3, #0]
   126fe:	ldr	r3, [r7, #52]	; 0x34
   12700:	b.n	11fee <__ssvfscanf_r+0xbfa>
   12702:	ldr	r5, [r7, #20]
   12704:	mov	r1, r5
   12706:	movs	r3, #10
   12708:	adds	r1, #1
   1270a:	mov	r0, r9
   1270c:	bl	d400 <_strtol_r>
   12710:	ldr	r3, [r7, #24]
   12712:	subs	r2, r0, r3
   12714:	b.n	12252 <__ssvfscanf_r+0xe5e>
   12716:	ldrd	r3, r2, [r7, #48]	; 0x30
   1271a:	ldr.w	r1, [r3], #4
   1271e:	str	r2, [r7, #32]
   12720:	str	r1, [r7, #72]	; 0x48
   12722:	str	r3, [r7, #48]	; 0x30
   12724:	str	r2, [r7, #40]	; 0x28
   12726:	str	r2, [r7, #60]	; 0x3c
   12728:	b.w	11a90 <__ssvfscanf_r+0x69c>
   1272c:	ldr	r3, [r7, #48]	; 0x30
   1272e:	str	r4, [r7, #72]	; 0x48
   12730:	ldr.w	r5, [r3], #4
   12734:	str	r3, [r7, #48]	; 0x30
   12736:	b.n	1208e <__ssvfscanf_r+0xc9a>
   12738:	ldr	r3, [r7, #48]	; 0x30
   1273a:	ldr	r2, [r7, #40]	; 0x28
   1273c:	ldr.w	r4, [r3], #4
   12740:	str	r2, [r7, #24]
   12742:	strd	r2, r2, [r7, #28]
   12746:	str	r3, [r7, #48]	; 0x30
   12748:	b.w	11ba0 <__ssvfscanf_r+0x7ac>
   1274c:	ldr	r4, [r7, #72]	; 0x48
   1274e:	ldr	r0, [r4, #0]
   12750:	bl	c050 <realloc>
   12754:	cmp	r0, #0
   12756:	bne.w	11cc0 <__ssvfscanf_r+0x8cc>
   1275a:	b.n	12024 <__ssvfscanf_r+0xc30>
   1275c:	mov	r1, fp
   1275e:	mov	r0, r9
   12760:	str	r3, [r7, #52]	; 0x34
   12762:	bl	14748 <__ssrefill_r>
   12766:	ldr	r3, [r7, #52]	; 0x34
   12768:	cmp	r0, #0
   1276a:	beq.w	12000 <__ssvfscanf_r+0xc0c>
   1276e:	b.n	1200c <__ssvfscanf_r+0xc18>
   12770:	ldr	r0, [r3, #0]
   12772:	mov	r4, r3
   12774:	bl	c050 <realloc>
   12778:	cmp	r0, #0
   1277a:	beq.w	12116 <__ssvfscanf_r+0xd22>
   1277e:	str	r0, [r4, #0]
   12780:	b.n	12116 <__ssvfscanf_r+0xd22>
   12782:	movs	r5, #0
   12784:	b.n	123f6 <__ssvfscanf_r+0x1002>
   12786:	ldr	r5, [r7, #72]	; 0x48
   12788:	ldr.w	sl, [r7, #60]	; 0x3c
   1278c:	str	r6, [r7, #36]	; 0x24
   1278e:	mov	r4, r8
   12790:	cmp	r5, #0
   12792:	beq.w	11c8e <__ssvfscanf_r+0x89a>
   12796:	subs	r5, #1
   12798:	add.w	r3, r7, #368	; 0x170
   1279c:	mov	r2, fp
   1279e:	ldrb	r1, [r3, r5]
   127a0:	mov	r0, r9
   127a2:	bl	146c8 <_sungetc_r>
   127a6:	cmp	r5, #0
   127a8:	bne.n	12796 <__ssvfscanf_r+0x13a2>
   127aa:	b.w	11c8e <__ssvfscanf_r+0x89a>
   127ae:	mov	r1, fp
   127b0:	mov	r0, r9
   127b2:	bl	14748 <__ssrefill_r>
   127b6:	cmp	r0, #0
   127b8:	beq.w	12400 <__ssvfscanf_r+0x100c>
   127bc:	str	r4, [r7, #36]	; 0x24
   127be:	cmp	r5, #0
   127c0:	bne.w	115cc <__ssvfscanf_r+0x1d8>
   127c4:	b.n	12418 <__ssvfscanf_r+0x1024>
   127c6:	str	r4, [r7, #36]	; 0x24
   127c8:	cmp	r5, #0
   127ca:	beq.w	12418 <__ssvfscanf_r+0x1024>
   127ce:	subs	r5, #1
   127d0:	add.w	r3, r7, #368	; 0x170
   127d4:	mov	r2, fp
   127d6:	ldrb	r1, [r3, r5]
   127d8:	mov	r0, r9
   127da:	bl	146c8 <_sungetc_r>
   127de:	cmp	r5, #0
   127e0:	bne.n	127ce <__ssvfscanf_r+0x13da>
   127e2:	b.n	12418 <__ssvfscanf_r+0x1024>
   127e4:	lsls	r5, r4, #31
   127e6:	bmi.n	12862 <__ssvfscanf_r+0x146e>
   127e8:	lsls	r4, r4, #30
   127ea:	bpl.n	12862 <__ssvfscanf_r+0x146e>
   127ec:	ldr	r3, [r7, #48]	; 0x30
   127ee:	str	r1, [r7, #76]	; 0x4c
   127f0:	ldr.w	r2, [r3], #4
   127f4:	str	r3, [r7, #48]	; 0x30
   127f6:	mov.w	r3, sl, asr #31
   127fa:	str.w	sl, [r2]
   127fe:	str	r3, [r2, #4]
   12800:	b.w	11442 <__ssvfscanf_r+0x4e>
   12804:	vmov	r9, s16
   12808:	mov	r6, r3
   1280a:	b.w	11836 <__ssvfscanf_r+0x442>
   1280e:	movs	r3, #1
   12810:	bic.w	r4, r4, #1920	; 0x780
   12814:	str	r3, [r7, #72]	; 0x48
   12816:	b.w	11806 <__ssvfscanf_r+0x412>
   1281a:	cmp.w	r8, #1
   1281e:	it	cc
   12820:	movcc.w	r8, #1
   12824:	ands.w	r3, r4, #1
   12828:	bne.n	128a0 <__ssvfscanf_r+0x14ac>
   1282a:	lsls	r5, r4, #27
   1282c:	bmi.w	12a9c <__ssvfscanf_r+0x16a8>
   12830:	lsls	r4, r4, #24
   12832:	bpl.w	12ace <__ssvfscanf_r+0x16da>
   12836:	ldr	r3, [r7, #48]	; 0x30
   12838:	ldr.w	r5, [r3], #4
   1283c:	str	r3, [r7, #72]	; 0x48
   1283e:	cmp	r5, #0
   12840:	beq.w	115de <__ssvfscanf_r+0x1ea>
   12844:	mov	r0, r8
   12846:	bl	bab8 <malloc>
   1284a:	mov	r3, r0
   1284c:	cmp	r0, #0
   1284e:	bne.w	12a0a <__ssvfscanf_r+0x1616>
   12852:	ldr	r3, [r7, #64]	; 0x40
   12854:	cmp	r3, #0
   12856:	beq.w	1295c <__ssvfscanf_r+0x1568>
   1285a:	ldr.w	r8, [r3]
   1285e:	ldrh	r6, [r3, #6]
   12860:	b.n	12688 <__ssvfscanf_r+0x1294>
   12862:	ldr	r3, [r7, #48]	; 0x30
   12864:	str	r1, [r7, #76]	; 0x4c
   12866:	ldr.w	r2, [r3], #4
   1286a:	str.w	sl, [r2]
   1286e:	str	r3, [r7, #48]	; 0x30
   12870:	b.w	11442 <__ssvfscanf_r+0x4e>
   12874:	mov	r3, r5
   12876:	ldr	r5, [r7, #40]	; 0x28
   12878:	cmp	r3, r5
   1287a:	bls.w	115de <__ssvfscanf_r+0x1ea>
   1287e:	mov	r4, r3
   12880:	ldrb.w	r1, [r4, #-1]!
   12884:	mov	r2, fp
   12886:	mov	r0, r9
   12888:	bl	146c8 <_sungetc_r>
   1288c:	cmp	r4, r5
   1288e:	bne.n	12880 <__ssvfscanf_r+0x148c>
   12890:	b.w	115de <__ssvfscanf_r+0x1ea>
   12894:	.word	0x0001400d
   12898:	.word	0x20000801
   1289c:	.word	0x200005f0
   128a0:	ands.w	r3, r4, #16
   128a4:	str	r3, [r7, #52]	; 0x34
   128a6:	beq.n	12966 <__ssvfscanf_r+0x1572>
   128a8:	movs	r5, #0
   128aa:	str	r5, [r7, #60]	; 0x3c
   128ac:	str	r5, [r7, #72]	; 0x48
   128ae:	mov	r6, r5
   128b0:	movs	r4, #0
   128b2:	mov	r3, r9
   128b4:	mov	r9, r8
   128b6:	mov	r8, r5
   128b8:	mov	r5, r4
   128ba:	mov	r4, r3
   128bc:	bl	db54 <__locale_mb_cur_max>
   128c0:	cmp	r0, r5
   128c2:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   128c6:	ldrd	r3, r2, [fp]
   128ca:	ldrb.w	r1, [r3], #1
   128ce:	subs	r2, #1
   128d0:	strd	r3, r2, [fp]
   128d4:	ldr	r2, [r7, #36]	; 0x24
   128d6:	add.w	r0, r7, #368	; 0x170
   128da:	cmp	r2, #3
   128dc:	strb	r1, [r0, r5]
   128de:	add.w	r3, r5, #1
   128e2:	add.w	r5, r7, #104	; 0x68
   128e6:	bne.n	128ee <__ssvfscanf_r+0x14fa>
   128e8:	ldr	r2, [r5, #0]
   128ea:	cmp	r2, #4
   128ec:	beq.n	128fc <__ssvfscanf_r+0x1508>
   128ee:	movs	r2, #8
   128f0:	movs	r1, #0
   128f2:	mov	r0, r5
   128f4:	str	r3, [r7, #40]	; 0x28
   128f6:	bl	9444 <memset>
   128fa:	ldr	r3, [r7, #40]	; 0x28
   128fc:	str	r5, [sp, #0]
   128fe:	add.w	r2, r7, #368	; 0x170
   12902:	mov	r1, r6
   12904:	mov	r0, r4
   12906:	str	r3, [r7, #40]	; 0x28
   12908:	bl	14320 <_mbrtowc_r>
   1290c:	adds	r3, r0, #1
   1290e:	str	r0, [r7, #36]	; 0x24
   12910:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   12914:	ldr	r3, [r7, #40]	; 0x28
   12916:	cmp	r0, #0
   12918:	bne.w	12baa <__ssvfscanf_r+0x17b6>
   1291c:	ldr	r2, [r7, #52]	; 0x34
   1291e:	cbnz	r2, 12922 <__ssvfscanf_r+0x152e>
   12920:	str	r2, [r6, #0]
   12922:	add	sl, r3
   12924:	add.w	r9, r9, #4294967295
   12928:	ldr	r3, [r7, #52]	; 0x34
   1292a:	cmp	r3, #0
   1292c:	bne.w	12c1a <__ssvfscanf_r+0x1826>
   12930:	ldr	r3, [r7, #72]	; 0x48
   12932:	cmp	r3, #0
   12934:	beq.w	12c18 <__ssvfscanf_r+0x1824>
   12938:	ldr	r3, [r7, #60]	; 0x3c
   1293a:	subs	r5, r6, r3
   1293c:	cmp.w	r8, r5, asr #2
   12940:	bhi.w	12c18 <__ssvfscanf_r+0x1824>
   12944:	mov	r0, r3
   12946:	mov.w	r1, r8, lsl #3
   1294a:	bl	c050 <realloc>
   1294e:	str	r0, [r7, #60]	; 0x3c
   12950:	cmp	r0, #0
   12952:	bne.w	12c0e <__ssvfscanf_r+0x181a>
   12956:	ldr	r3, [r7, #64]	; 0x40
   12958:	cmp	r3, #0
   1295a:	bne.n	129b8 <__ssvfscanf_r+0x15c4>
   1295c:	mov.w	r3, #4294967295
   12960:	str	r3, [r7, #68]	; 0x44
   12962:	b.w	115f4 <__ssvfscanf_r+0x200>
   12966:	lsls	r2, r4, #24
   12968:	bpl.w	12a8a <__ssvfscanf_r+0x1696>
   1296c:	ldr	r4, [r7, #48]	; 0x30
   1296e:	ldr.w	r3, [r4], #4
   12972:	str	r3, [r7, #72]	; 0x48
   12974:	cmp	r3, #0
   12976:	beq.w	115de <__ssvfscanf_r+0x1ea>
   1297a:	movs	r0, #128	; 0x80
   1297c:	bl	bab8 <malloc>
   12980:	mov	r6, r0
   12982:	cmp	r0, #0
   12984:	beq.n	12956 <__ssvfscanf_r+0x1562>
   12986:	ldr	r3, [r7, #72]	; 0x48
   12988:	str	r0, [r3, #0]
   1298a:	ldr	r3, [r7, #64]	; 0x40
   1298c:	ldrh	r5, [r3, #6]
   1298e:	ldrh	r2, [r3, #4]
   12990:	cmp	r5, r2
   12992:	bcc.w	12afc <__ssvfscanf_r+0x1708>
   12996:	movw	r1, #65526	; 0xfff6
   1299a:	cmp	r2, r1
   1299c:	bhi.n	12a4c <__ssvfscanf_r+0x1658>
   1299e:	adds	r2, #8
   129a0:	uxth	r3, r2
   129a2:	ldr	r2, [r7, #64]	; 0x40
   129a4:	str	r3, [r7, #60]	; 0x3c
   129a6:	lsls	r1, r3, #2
   129a8:	ldr	r0, [r2, #0]
   129aa:	bl	c050 <realloc>
   129ae:	ldr	r3, [r7, #60]	; 0x3c
   129b0:	cmp	r0, #0
   129b2:	bne.w	12b12 <__ssvfscanf_r+0x171e>
   129b6:	ldr	r3, [r7, #64]	; 0x40
   129b8:	ldrh	r3, [r3, #6]
   129ba:	ldr	r2, [r7, #64]	; 0x40
   129bc:	mov	r6, r3
   129be:	ldr.w	r8, [r2]
   129c2:	b.n	12688 <__ssvfscanf_r+0x1294>
   129c4:	mov	r3, r5
   129c6:	ldr	r5, [r7, #40]	; 0x28
   129c8:	cmp	r3, r5
   129ca:	bls.w	115de <__ssvfscanf_r+0x1ea>
   129ce:	mov	r4, r3
   129d0:	ldrb.w	r1, [r4, #-1]!
   129d4:	mov	r2, fp
   129d6:	mov	r0, r9
   129d8:	bl	146c8 <_sungetc_r>
   129dc:	cmp	r4, r5
   129de:	bne.n	129d0 <__ssvfscanf_r+0x15dc>
   129e0:	b.w	115de <__ssvfscanf_r+0x1ea>
   129e4:	mov	r0, r2
   129e6:	lsls	r1, r3, #3
   129e8:	mov	r6, r3
   129ea:	bl	c050 <realloc>
   129ee:	str	r0, [r7, #40]	; 0x28
   129f0:	cmp	r0, #0
   129f2:	beq.n	12956 <__ssvfscanf_r+0x1562>
   129f4:	adds	r2, r0, r5
   129f6:	str	r2, [r7, #72]	; 0x48
   129f8:	ldr	r2, [r7, #60]	; 0x3c
   129fa:	ldr	r5, [r7, #52]	; 0x34
   129fc:	str	r0, [r2, #0]
   129fe:	lsls	r3, r6, #1
   12a00:	str	r3, [r7, #32]
   12a02:	b.n	123f6 <__ssvfscanf_r+0x1002>
   12a04:	ldr.w	r8, [r7, #60]	; 0x3c
   12a08:	b.n	12688 <__ssvfscanf_r+0x1294>
   12a0a:	ldr	r1, [r7, #64]	; 0x40
   12a0c:	str	r0, [r5, #0]
   12a0e:	ldrh	r6, [r1, #6]
   12a10:	ldrh	r2, [r1, #4]
   12a12:	cmp	r6, r2
   12a14:	bcc.w	12b34 <__ssvfscanf_r+0x1740>
   12a18:	movw	r1, #65526	; 0xfff6
   12a1c:	cmp	r2, r1
   12a1e:	str	r0, [r7, #48]	; 0x30
   12a20:	bls.w	12b6e <__ssvfscanf_r+0x177a>
   12a24:	ldr	r3, [r7, #64]	; 0x40
   12a26:	ldr.w	r8, [r3]
   12a2a:	b.n	12688 <__ssvfscanf_r+0x1294>
   12a2c:	ldr	r2, [r7, #40]	; 0x28
   12a2e:	cmp	r5, r2
   12a30:	bls.w	115de <__ssvfscanf_r+0x1ea>
   12a34:	mov	r4, r5
   12a36:	ldr	r5, [r7, #40]	; 0x28
   12a38:	ldrb.w	r1, [r4, #-1]!
   12a3c:	mov	r2, fp
   12a3e:	mov	r0, r9
   12a40:	bl	146c8 <_sungetc_r>
   12a44:	cmp	r4, r5
   12a46:	bne.n	12a38 <__ssvfscanf_r+0x1644>
   12a48:	b.w	115de <__ssvfscanf_r+0x1ea>
   12a4c:	mov	r3, r5
   12a4e:	b.n	129ba <__ssvfscanf_r+0x15c6>
   12a50:	bl	1431c <_strtoull_r>
   12a54:	b.n	125da <__ssvfscanf_r+0x11e6>
   12a56:	ldr.w	r3, [r8]
   12a5a:	mov	r5, r3
   12a5c:	adds	r3, #1
   12a5e:	bne.w	11c0c <__ssvfscanf_r+0x818>
   12a62:	mov	r2, r5
   12a64:	b.w	11c38 <__ssvfscanf_r+0x844>
   12a68:	ldr	r3, [r7, #72]	; 0x48
   12a6a:	ldr	r0, [r3, #0]
   12a6c:	bl	143d8 <iswspace>
   12a70:	cmp	r0, #0
   12a72:	bne.w	127c6 <__ssvfscanf_r+0x13d2>
   12a76:	cmp	r4, #3
   12a78:	add	sl, r5
   12a7a:	bne.w	11b10 <__ssvfscanf_r+0x71c>
   12a7e:	ldr	r3, [r6, #0]
   12a80:	cmp	r3, #4
   12a82:	bne.w	11b10 <__ssvfscanf_r+0x71c>
   12a86:	b.w	11b14 <__ssvfscanf_r+0x720>
   12a8a:	ldrd	r3, r2, [r7, #48]	; 0x30
   12a8e:	ldr.w	r6, [r3], #4
   12a92:	str	r3, [r7, #48]	; 0x30
   12a94:	mov	r5, r2
   12a96:	str	r2, [r7, #60]	; 0x3c
   12a98:	str	r2, [r7, #72]	; 0x48
   12a9a:	b.n	128b0 <__ssvfscanf_r+0x14bc>
   12a9c:	mov	r4, r3
   12a9e:	ldr.w	r3, [fp, #4]
   12aa2:	cmp	r8, r3
   12aa4:	ble.n	12b1a <__ssvfscanf_r+0x1726>
   12aa6:	ldr.w	r2, [fp]
   12aaa:	add	r2, r3
   12aac:	str.w	r2, [fp]
   12ab0:	mov	r1, fp
   12ab2:	mov	r0, r9
   12ab4:	add	r4, r3
   12ab6:	sub.w	r8, r8, r3
   12aba:	bl	14748 <__ssrefill_r>
   12abe:	cmp	r0, #0
   12ac0:	beq.n	12a9e <__ssvfscanf_r+0x16aa>
   12ac2:	cmp	r4, #0
   12ac4:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   12ac8:	add	sl, r4
   12aca:	b.w	11442 <__ssvfscanf_r+0x4e>
   12ace:	ldr	r5, [r7, #48]	; 0x30
   12ad0:	mov	r3, r8
   12ad2:	ldr	r1, [r5, #0]
   12ad4:	str.w	fp, [sp]
   12ad8:	movs	r2, #1
   12ada:	mov	r0, r9
   12adc:	bl	14784 <_sfread_r>
   12ae0:	mov	r4, r0
   12ae2:	cmp	r0, #0
   12ae4:	beq.w	115cc <__ssvfscanf_r+0x1d8>
   12ae8:	adds	r5, #4
   12aea:	str	r5, [r7, #72]	; 0x48
   12aec:	ldr	r3, [r7, #68]	; 0x44
   12aee:	adds	r3, #1
   12af0:	str	r3, [r7, #68]	; 0x44
   12af2:	ldr	r3, [r7, #72]	; 0x48
   12af4:	str	r3, [r7, #48]	; 0x30
   12af6:	add	sl, r4
   12af8:	b.w	11442 <__ssvfscanf_r+0x4e>
   12afc:	ldr	r0, [r3, #0]
   12afe:	ldr	r3, [r7, #72]	; 0x48
   12b00:	str.w	r3, [r0, r5, lsl #2]
   12b04:	ldr	r3, [r7, #64]	; 0x40
   12b06:	str	r4, [r7, #48]	; 0x30
   12b08:	adds	r5, #1
   12b0a:	strh	r5, [r3, #6]
   12b0c:	str	r6, [r7, #60]	; 0x3c
   12b0e:	movs	r5, #32
   12b10:	b.n	128b0 <__ssvfscanf_r+0x14bc>
   12b12:	ldr	r2, [r7, #64]	; 0x40
   12b14:	strh	r3, [r2, #4]
   12b16:	str	r0, [r2, #0]
   12b18:	b.n	12afe <__ssvfscanf_r+0x170a>
   12b1a:	sub.w	r3, r3, r8
   12b1e:	str.w	r3, [fp, #4]
   12b22:	ldr.w	r3, [fp]
   12b26:	add	r4, r8
   12b28:	add	r3, r8
   12b2a:	str.w	r3, [fp]
   12b2e:	add	sl, r4
   12b30:	b.w	11442 <__ssvfscanf_r+0x4e>
   12b34:	ldr	r2, [r1, #0]
   12b36:	str	r2, [r7, #60]	; 0x3c
   12b38:	ldr	r2, [r7, #60]	; 0x3c
   12b3a:	str.w	r5, [r2, r6, lsl #2]
   12b3e:	ldr	r2, [r7, #64]	; 0x40
   12b40:	adds	r6, #1
   12b42:	uxth	r6, r6
   12b44:	strh	r6, [r2, #6]
   12b46:	mov	r1, r3
   12b48:	str.w	fp, [sp]
   12b4c:	mov	r3, r8
   12b4e:	movs	r2, #1
   12b50:	mov	r0, r9
   12b52:	bl	14784 <_sfread_r>
   12b56:	mov	r4, r0
   12b58:	cbz	r0, 12b92 <__ssvfscanf_r+0x179e>
   12b5a:	cmp	r8, r0
   12b5c:	bls.n	12aec <__ssvfscanf_r+0x16f8>
   12b5e:	ldr	r0, [r5, #0]
   12b60:	mov	r1, r4
   12b62:	bl	c050 <realloc>
   12b66:	cmp	r0, #0
   12b68:	beq.n	12aec <__ssvfscanf_r+0x16f8>
   12b6a:	str	r0, [r5, #0]
   12b6c:	b.n	12aec <__ssvfscanf_r+0x16f8>
   12b6e:	ldr	r3, [r7, #64]	; 0x40
   12b70:	adds	r2, #8
   12b72:	uxth	r4, r2
   12b74:	ldr	r2, [r3, #0]
   12b76:	str	r2, [r7, #52]	; 0x34
   12b78:	mov	r0, r2
   12b7a:	lsls	r1, r4, #2
   12b7c:	bl	c050 <realloc>
   12b80:	ldr	r2, [r7, #52]	; 0x34
   12b82:	str	r0, [r7, #60]	; 0x3c
   12b84:	cmp	r0, #0
   12b86:	beq.n	12c40 <__ssvfscanf_r+0x184c>
   12b88:	ldr	r3, [r7, #64]	; 0x40
   12b8a:	strh	r4, [r3, #4]
   12b8c:	str	r0, [r3, #0]
   12b8e:	ldr	r3, [r7, #48]	; 0x30
   12b90:	b.n	12b38 <__ssvfscanf_r+0x1744>
   12b92:	ldr	r3, [r7, #68]	; 0x44
   12b94:	ldr.w	r8, [r7, #60]	; 0x3c
   12b98:	cmp	r3, #0
   12b9a:	beq.w	12688 <__ssvfscanf_r+0x1294>
   12b9e:	ldrh.w	r3, [fp, #12]
   12ba2:	lsls	r3, r3, #25
   12ba4:	bpl.w	115e2 <__ssvfscanf_r+0x1ee>
   12ba8:	b.n	12680 <__ssvfscanf_r+0x128c>
   12baa:	ldr	r2, [r7, #36]	; 0x24
   12bac:	adds	r2, #2
   12bae:	bne.n	12bec <__ssvfscanf_r+0x17f8>
   12bb0:	ldr.w	r2, [fp, #4]
   12bb4:	cmp	r2, #0
   12bb6:	mov	r5, r3
   12bb8:	bgt.w	128bc <__ssvfscanf_r+0x14c8>
   12bbc:	mov	r1, fp
   12bbe:	mov	r0, r4
   12bc0:	bl	14748 <__ssrefill_r>
   12bc4:	cbnz	r0, 12c00 <__ssvfscanf_r+0x180c>
   12bc6:	cmp.w	r9, #0
   12bca:	bne.w	128bc <__ssvfscanf_r+0x14c8>
   12bce:	mov	r5, r8
   12bd0:	mov	r9, r4
   12bd2:	ldr	r3, [r7, #72]	; 0x48
   12bd4:	cbz	r3, 12be0 <__ssvfscanf_r+0x17ec>
   12bd6:	ldr	r3, [r7, #60]	; 0x3c
   12bd8:	subs	r1, r6, r3
   12bda:	cmp.w	r5, r1, asr #2
   12bde:	bhi.n	12c30 <__ssvfscanf_r+0x183c>
   12be0:	ldr	r3, [r7, #52]	; 0x34
   12be2:	cmp	r3, #0
   12be4:	bne.w	11442 <__ssvfscanf_r+0x4e>
   12be8:	b.w	12024 <__ssvfscanf_r+0xc30>
   12bec:	add	sl, r3
   12bee:	ldr	r3, [r7, #36]	; 0x24
   12bf0:	cmp	r3, #3
   12bf2:	bne.w	12924 <__ssvfscanf_r+0x1530>
   12bf6:	ldr	r3, [r5, #0]
   12bf8:	cmp	r3, #4
   12bfa:	bne.w	12924 <__ssvfscanf_r+0x1530>
   12bfe:	b.n	12928 <__ssvfscanf_r+0x1534>
   12c00:	mov	r9, r4
   12c02:	mov	r4, r5
   12c04:	mov	r5, r8
   12c06:	cmp	r4, #0
   12c08:	beq.n	12bd2 <__ssvfscanf_r+0x17de>
   12c0a:	b.w	115cc <__ssvfscanf_r+0x1d8>
   12c0e:	ldr	r2, [r7, #72]	; 0x48
   12c10:	adds	r6, r0, r5
   12c12:	str	r0, [r2, #0]
   12c14:	mov.w	r8, r8, lsl #1
   12c18:	adds	r6, #4
   12c1a:	ldr.w	r3, [fp, #4]
   12c1e:	cmp	r3, #0
   12c20:	mov.w	r5, #0
   12c24:	ble.n	12bbc <__ssvfscanf_r+0x17c8>
   12c26:	cmp.w	r9, #0
   12c2a:	bne.w	128bc <__ssvfscanf_r+0x14c8>
   12c2e:	b.n	12bce <__ssvfscanf_r+0x17da>
   12c30:	ldr	r4, [r7, #72]	; 0x48
   12c32:	ldr	r0, [r4, #0]
   12c34:	bl	c050 <realloc>
   12c38:	cmp	r0, #0
   12c3a:	beq.n	12be0 <__ssvfscanf_r+0x17ec>
   12c3c:	str	r0, [r4, #0]
   12c3e:	b.n	12be0 <__ssvfscanf_r+0x17ec>
   12c40:	mov	r8, r2
   12c42:	b.n	12688 <__ssvfscanf_r+0x1294>

00012c44 <_fclose_r>:
   12c44:	push	{r4, r5, r6, lr}
   12c46:	cmp	r1, #0
   12c48:	beq.n	12ce2 <_fclose_r+0x9e>
   12c4a:	mov	r6, r0
   12c4c:	mov	r4, r1
   12c4e:	cbz	r0, 12c56 <_fclose_r+0x12>
   12c50:	ldr	r3, [r0, #52]	; 0x34
   12c52:	cmp	r3, #0
   12c54:	beq.n	12ce8 <_fclose_r+0xa4>
   12c56:	ldr	r3, [r4, #100]	; 0x64
   12c58:	lsls	r0, r3, #31
   12c5a:	bpl.n	12cc6 <_fclose_r+0x82>
   12c5c:	ldrsh.w	r3, [r4, #12]
   12c60:	cmp	r3, #0
   12c62:	beq.n	12ce2 <_fclose_r+0x9e>
   12c64:	mov	r1, r4
   12c66:	mov	r0, r6
   12c68:	bl	12d0c <__sflush_r>
   12c6c:	ldr	r3, [r4, #44]	; 0x2c
   12c6e:	mov	r5, r0
   12c70:	cbz	r3, 12c80 <_fclose_r+0x3c>
   12c72:	ldr	r1, [r4, #28]
   12c74:	mov	r0, r6
   12c76:	blx	r3
   12c78:	cmp	r0, #0
   12c7a:	it	lt
   12c7c:	movlt.w	r5, #4294967295
   12c80:	ldrh	r3, [r4, #12]
   12c82:	lsls	r2, r3, #24
   12c84:	bmi.n	12d00 <_fclose_r+0xbc>
   12c86:	ldr	r1, [r4, #48]	; 0x30
   12c88:	cbz	r1, 12c9c <_fclose_r+0x58>
   12c8a:	add.w	r3, r4, #64	; 0x40
   12c8e:	cmp	r1, r3
   12c90:	beq.n	12c98 <_fclose_r+0x54>
   12c92:	mov	r0, r6
   12c94:	bl	e324 <_free_r>
   12c98:	movs	r3, #0
   12c9a:	str	r3, [r4, #48]	; 0x30
   12c9c:	ldr	r1, [r4, #68]	; 0x44
   12c9e:	cbz	r1, 12caa <_fclose_r+0x66>
   12ca0:	mov	r0, r6
   12ca2:	bl	e324 <_free_r>
   12ca6:	movs	r3, #0
   12ca8:	str	r3, [r4, #68]	; 0x44
   12caa:	bl	d584 <__sfp_lock_acquire>
   12cae:	ldr	r3, [r4, #100]	; 0x64
   12cb0:	movs	r2, #0
   12cb2:	lsls	r3, r3, #31
   12cb4:	strh	r2, [r4, #12]
   12cb6:	bpl.n	12cf8 <_fclose_r+0xb4>
   12cb8:	ldr	r0, [r4, #88]	; 0x58
   12cba:	bl	dc84 <__retarget_lock_close_recursive>
   12cbe:	bl	d590 <__sfp_lock_release>
   12cc2:	mov	r0, r5
   12cc4:	pop	{r4, r5, r6, pc}
   12cc6:	ldrh	r3, [r4, #12]
   12cc8:	lsls	r1, r3, #22
   12cca:	bmi.n	12c64 <_fclose_r+0x20>
   12ccc:	ldr	r0, [r4, #88]	; 0x58
   12cce:	bl	dc88 <__retarget_lock_acquire_recursive>
   12cd2:	ldrsh.w	r3, [r4, #12]
   12cd6:	cmp	r3, #0
   12cd8:	bne.n	12c64 <_fclose_r+0x20>
   12cda:	ldr	r5, [r4, #100]	; 0x64
   12cdc:	ands.w	r5, r5, #1
   12ce0:	beq.n	12cee <_fclose_r+0xaa>
   12ce2:	movs	r5, #0
   12ce4:	mov	r0, r5
   12ce6:	pop	{r4, r5, r6, pc}
   12ce8:	bl	d548 <__sinit>
   12cec:	b.n	12c56 <_fclose_r+0x12>
   12cee:	ldr	r0, [r4, #88]	; 0x58
   12cf0:	bl	dc8c <__retarget_lock_release_recursive>
   12cf4:	mov	r0, r5
   12cf6:	pop	{r4, r5, r6, pc}
   12cf8:	ldr	r0, [r4, #88]	; 0x58
   12cfa:	bl	dc8c <__retarget_lock_release_recursive>
   12cfe:	b.n	12cb8 <_fclose_r+0x74>
   12d00:	ldr	r1, [r4, #16]
   12d02:	mov	r0, r6
   12d04:	bl	e324 <_free_r>
   12d08:	b.n	12c86 <_fclose_r+0x42>
   12d0a:	nop

00012d0c <__sflush_r>:
   12d0c:	ldrsh.w	r2, [r1, #12]
   12d10:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d14:	mov	r4, r1
   12d16:	lsls	r1, r2, #28
   12d18:	mov	r8, r0
   12d1a:	bmi.n	12dac <__sflush_r+0xa0>
   12d1c:	ldr	r3, [r4, #4]
   12d1e:	orr.w	r2, r2, #2048	; 0x800
   12d22:	cmp	r3, #0
   12d24:	strh	r2, [r4, #12]
   12d26:	ble.n	12de6 <__sflush_r+0xda>
   12d28:	ldr	r5, [r4, #40]	; 0x28
   12d2a:	cmp	r5, #0
   12d2c:	beq.n	12de0 <__sflush_r+0xd4>
   12d2e:	movs	r3, #0
   12d30:	ldr.w	r6, [r8]
   12d34:	str.w	r3, [r8]
   12d38:	uxth	r3, r2
   12d3a:	ands.w	r2, r2, #4096	; 0x1000
   12d3e:	bne.n	12dee <__sflush_r+0xe2>
   12d40:	movs	r3, #1
   12d42:	ldr	r1, [r4, #28]
   12d44:	mov	r0, r8
   12d46:	blx	r5
   12d48:	adds	r3, r0, #1
   12d4a:	beq.n	12e1c <__sflush_r+0x110>
   12d4c:	ldrh	r3, [r4, #12]
   12d4e:	ldr	r5, [r4, #40]	; 0x28
   12d50:	lsls	r7, r3, #29
   12d52:	bpl.n	12d60 <__sflush_r+0x54>
   12d54:	ldr	r3, [r4, #4]
   12d56:	subs	r0, r0, r3
   12d58:	ldr	r3, [r4, #48]	; 0x30
   12d5a:	cbz	r3, 12d60 <__sflush_r+0x54>
   12d5c:	ldr	r3, [r4, #60]	; 0x3c
   12d5e:	subs	r0, r0, r3
   12d60:	ldr	r1, [r4, #28]
   12d62:	mov	r2, r0
   12d64:	movs	r3, #0
   12d66:	mov	r0, r8
   12d68:	blx	r5
   12d6a:	adds	r1, r0, #1
   12d6c:	bne.n	12df2 <__sflush_r+0xe6>
   12d6e:	ldr.w	r3, [r8]
   12d72:	cmp	r3, #0
   12d74:	beq.n	12df2 <__sflush_r+0xe6>
   12d76:	cmp	r3, #29
   12d78:	beq.n	12d7e <__sflush_r+0x72>
   12d7a:	cmp	r3, #22
   12d7c:	bne.n	12e2c <__sflush_r+0x120>
   12d7e:	ldrh	r3, [r4, #12]
   12d80:	ldr	r2, [r4, #16]
   12d82:	str	r2, [r4, #0]
   12d84:	bic.w	r3, r3, #2048	; 0x800
   12d88:	movs	r1, #0
   12d8a:	str	r1, [r4, #4]
   12d8c:	strh	r3, [r4, #12]
   12d8e:	ldr	r1, [r4, #48]	; 0x30
   12d90:	str.w	r6, [r8]
   12d94:	cbz	r1, 12de0 <__sflush_r+0xd4>
   12d96:	add.w	r3, r4, #64	; 0x40
   12d9a:	cmp	r1, r3
   12d9c:	beq.n	12da4 <__sflush_r+0x98>
   12d9e:	mov	r0, r8
   12da0:	bl	e324 <_free_r>
   12da4:	movs	r0, #0
   12da6:	str	r0, [r4, #48]	; 0x30
   12da8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12dac:	ldr	r6, [r4, #16]
   12dae:	cbz	r6, 12de0 <__sflush_r+0xd4>
   12db0:	uxth	r3, r2
   12db2:	ldr	r5, [r4, #0]
   12db4:	str	r6, [r4, #0]
   12db6:	lsls	r2, r3, #30
   12db8:	ite	eq
   12dba:	ldreq	r3, [r4, #20]
   12dbc:	movne	r3, #0
   12dbe:	subs	r5, r5, r6
   12dc0:	str	r3, [r4, #8]
   12dc2:	b.n	12ddc <__sflush_r+0xd0>
   12dc4:	mov	r3, r5
   12dc6:	mov	r2, r6
   12dc8:	ldr	r1, [r4, #28]
   12dca:	ldr	r7, [r4, #36]	; 0x24
   12dcc:	mov	r0, r8
   12dce:	blx	r7
   12dd0:	subs.w	ip, r0, #0
   12dd4:	sub.w	r5, r5, ip
   12dd8:	add	r6, ip
   12dda:	ble.n	12e0c <__sflush_r+0x100>
   12ddc:	cmp	r5, #0
   12dde:	bgt.n	12dc4 <__sflush_r+0xb8>
   12de0:	movs	r0, #0
   12de2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12de6:	ldr	r3, [r4, #60]	; 0x3c
   12de8:	cmp	r3, #0
   12dea:	bgt.n	12d28 <__sflush_r+0x1c>
   12dec:	b.n	12de0 <__sflush_r+0xd4>
   12dee:	ldr	r0, [r4, #80]	; 0x50
   12df0:	b.n	12d50 <__sflush_r+0x44>
   12df2:	ldrsh.w	r3, [r4, #12]
   12df6:	ldr	r2, [r4, #16]
   12df8:	str	r2, [r4, #0]
   12dfa:	bic.w	r3, r3, #2048	; 0x800
   12dfe:	strh	r3, [r4, #12]
   12e00:	movs	r2, #0
   12e02:	lsls	r3, r3, #19
   12e04:	str	r2, [r4, #4]
   12e06:	bpl.n	12d8e <__sflush_r+0x82>
   12e08:	str	r0, [r4, #80]	; 0x50
   12e0a:	b.n	12d8e <__sflush_r+0x82>
   12e0c:	ldrh	r3, [r4, #12]
   12e0e:	orr.w	r3, r3, #64	; 0x40
   12e12:	mov.w	r0, #4294967295
   12e16:	strh	r3, [r4, #12]
   12e18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12e1c:	ldr.w	r3, [r8]
   12e20:	cmp	r3, #0
   12e22:	beq.n	12d4c <__sflush_r+0x40>
   12e24:	cmp	r3, #29
   12e26:	beq.n	12e36 <__sflush_r+0x12a>
   12e28:	cmp	r3, #22
   12e2a:	beq.n	12e36 <__sflush_r+0x12a>
   12e2c:	ldrh	r3, [r4, #12]
   12e2e:	orr.w	r3, r3, #64	; 0x40
   12e32:	strh	r3, [r4, #12]
   12e34:	b.n	12de2 <__sflush_r+0xd6>
   12e36:	str.w	r6, [r8]
   12e3a:	b.n	12de0 <__sflush_r+0xd4>

00012e3c <_fflush_r>:
   12e3c:	push	{r3, r4, r5, lr}
   12e3e:	mov	r4, r1
   12e40:	mov	r5, r0
   12e42:	cbz	r0, 12e48 <_fflush_r+0xc>
   12e44:	ldr	r3, [r0, #52]	; 0x34
   12e46:	cbz	r3, 12e8a <_fflush_r+0x4e>
   12e48:	ldrsh.w	r0, [r4, #12]
   12e4c:	cbz	r0, 12e72 <_fflush_r+0x36>
   12e4e:	ldr	r3, [r4, #100]	; 0x64
   12e50:	lsls	r3, r3, #31
   12e52:	bmi.n	12e58 <_fflush_r+0x1c>
   12e54:	lsls	r1, r0, #22
   12e56:	bpl.n	12e78 <_fflush_r+0x3c>
   12e58:	mov	r0, r5
   12e5a:	mov	r1, r4
   12e5c:	bl	12d0c <__sflush_r>
   12e60:	ldr	r3, [r4, #100]	; 0x64
   12e62:	lsls	r2, r3, #31
   12e64:	mov	r5, r0
   12e66:	bmi.n	12e6e <_fflush_r+0x32>
   12e68:	ldrh	r3, [r4, #12]
   12e6a:	lsls	r3, r3, #22
   12e6c:	bpl.n	12e80 <_fflush_r+0x44>
   12e6e:	mov	r0, r5
   12e70:	pop	{r3, r4, r5, pc}
   12e72:	mov	r5, r0
   12e74:	mov	r0, r5
   12e76:	pop	{r3, r4, r5, pc}
   12e78:	ldr	r0, [r4, #88]	; 0x58
   12e7a:	bl	dc88 <__retarget_lock_acquire_recursive>
   12e7e:	b.n	12e58 <_fflush_r+0x1c>
   12e80:	ldr	r0, [r4, #88]	; 0x58
   12e82:	bl	dc8c <__retarget_lock_release_recursive>
   12e86:	mov	r0, r5
   12e88:	pop	{r3, r4, r5, pc}
   12e8a:	bl	d548 <__sinit>
   12e8e:	b.n	12e48 <_fflush_r+0xc>

00012e90 <__sccl>:
   12e90:	push	{r4, r5, r6, lr}
   12e92:	ldrb	r4, [r1, #0]
   12e94:	cmp	r4, #94	; 0x5e
   12e96:	mov	lr, r0
   12e98:	beq.n	12ed8 <__sccl+0x48>
   12e9a:	movs	r2, #0
   12e9c:	adds	r0, r1, #1
   12e9e:	mov	ip, r2
   12ea0:	add.w	r3, lr, #4294967295
   12ea4:	add.w	r1, lr, #255	; 0xff
   12ea8:	strb.w	r2, [r3, #1]!
   12eac:	cmp	r3, r1
   12eae:	bne.n	12ea8 <__sccl+0x18>
   12eb0:	cbz	r4, 12ed4 <__sccl+0x44>
   12eb2:	eor.w	r1, ip, #1
   12eb6:	strb.w	r1, [lr, r4]
   12eba:	adds	r5, r0, #1
   12ebc:	ldrb.w	r3, [r5, #-1]
   12ec0:	cmp	r3, #45	; 0x2d
   12ec2:	beq.n	12ee2 <__sccl+0x52>
   12ec4:	cmp	r3, #93	; 0x5d
   12ec6:	beq.n	12ed0 <__sccl+0x40>
   12ec8:	cbz	r3, 12ed2 <__sccl+0x42>
   12eca:	mov	r4, r3
   12ecc:	mov	r0, r5
   12ece:	b.n	12eb6 <__sccl+0x26>
   12ed0:	mov	r0, r5
   12ed2:	pop	{r4, r5, r6, pc}
   12ed4:	subs	r0, #1
   12ed6:	pop	{r4, r5, r6, pc}
   12ed8:	movs	r2, #1
   12eda:	ldrb	r4, [r1, #1]
   12edc:	adds	r0, r1, #2
   12ede:	mov	ip, r2
   12ee0:	b.n	12ea0 <__sccl+0x10>
   12ee2:	ldrb.w	ip, [r0, #1]
   12ee6:	cmp.w	ip, #93	; 0x5d
   12eea:	beq.n	12eca <__sccl+0x3a>
   12eec:	cmp	r4, ip
   12eee:	bgt.n	12eca <__sccl+0x3a>
   12ef0:	adds	r6, r4, #1
   12ef2:	adds	r0, #2
   12ef4:	add.w	r2, lr, r6
   12ef8:	strb.w	r1, [r2], #1
   12efc:	sub.w	r3, r2, lr
   12f00:	subs	r3, #1
   12f02:	cmp	ip, r3
   12f04:	bgt.n	12ef8 <__sccl+0x68>
   12f06:	sub.w	r3, ip, r4
   12f0a:	subs	r3, #1
   12f0c:	cmp	r4, ip
   12f0e:	it	ge
   12f10:	movge	r3, #0
   12f12:	adds	r5, #2
   12f14:	adds	r4, r3, r6
   12f16:	b.n	12ebc <__sccl+0x2c>

00012f18 <stpncpy>:
   12f18:	orr.w	r3, r1, r0
   12f1c:	lsls	r3, r3, #30
   12f1e:	push	{r4, r5}
   12f20:	bne.n	12f26 <stpncpy+0xe>
   12f22:	cmp	r2, #3
   12f24:	bhi.n	12f46 <stpncpy+0x2e>
   12f26:	add.w	ip, r1, #4294967295
   12f2a:	b.n	12f3c <stpncpy+0x24>
   12f2c:	ldrb.w	r1, [ip, #1]!
   12f30:	strb.w	r1, [r3], #1
   12f34:	subs	r4, r2, #1
   12f36:	cbz	r1, 12f6a <stpncpy+0x52>
   12f38:	mov	r2, r4
   12f3a:	mov	r0, r3
   12f3c:	mov	r3, r0
   12f3e:	cmp	r2, #0
   12f40:	bne.n	12f2c <stpncpy+0x14>
   12f42:	pop	{r4, r5}
   12f44:	bx	lr
   12f46:	mov	r3, r1
   12f48:	mov	r1, r3
   12f4a:	ldr.w	r5, [r3], #4
   12f4e:	sub.w	r4, r5, #16843009	; 0x1010101
   12f52:	bic.w	r4, r4, r5
   12f56:	tst.w	r4, #2155905152	; 0x80808080
   12f5a:	bne.n	12f26 <stpncpy+0xe>
   12f5c:	subs	r2, #4
   12f5e:	cmp	r2, #3
   12f60:	str.w	r5, [r0], #4
   12f64:	mov	r1, r3
   12f66:	bhi.n	12f48 <stpncpy+0x30>
   12f68:	b.n	12f26 <stpncpy+0xe>
   12f6a:	add	r2, r0
   12f6c:	cmp	r4, #0
   12f6e:	beq.n	12f42 <stpncpy+0x2a>
   12f70:	strb.w	r1, [r3], #1
   12f74:	cmp	r3, r2
   12f76:	bne.n	12f70 <stpncpy+0x58>
   12f78:	pop	{r4, r5}
   12f7a:	bx	lr

00012f7c <_localeconv_r>:
   12f7c:	ldr	r0, [pc, #0]	; (12f80 <_localeconv_r+0x4>)
   12f7e:	bx	lr
   12f80:	.word	0x20008a54
   12f84:	.word	0x00000000

00012f88 <frexp>:
   12f88:	push	{r4, r5}
   12f8a:	sub	sp, #8
   12f8c:	vstr	d0, [sp]
   12f90:	ldr	r2, [sp, #4]
   12f92:	ldr	r4, [pc, #100]	; (12ff8 <frexp+0x70>)
   12f94:	bic.w	r3, r2, #2147483648	; 0x80000000
   12f98:	movs	r1, #0
   12f9a:	cmp	r3, r4
   12f9c:	str	r1, [r0, #0]
   12f9e:	bgt.n	12fe4 <frexp+0x5c>
   12fa0:	ldr	r4, [sp, #0]
   12fa2:	orrs	r4, r3
   12fa4:	beq.n	12fe4 <frexp+0x5c>
   12fa6:	ldr	r4, [pc, #84]	; (12ffc <frexp+0x74>)
   12fa8:	ands	r4, r2
   12faa:	cbnz	r4, 12fc2 <frexp+0x3a>
   12fac:	vldr	d7, [pc, #64]	; 12ff0 <frexp+0x68>
   12fb0:	vmul.f64	d7, d0, d7
   12fb4:	vstr	d7, [sp]
   12fb8:	ldr	r2, [sp, #4]
   12fba:	mvn.w	r1, #53	; 0x35
   12fbe:	bic.w	r3, r2, #2147483648	; 0x80000000
   12fc2:	bic.w	r2, r2, #2139095040	; 0x7f800000
   12fc6:	ldrd	r4, r5, [sp]
   12fca:	bic.w	r2, r2, #7340032	; 0x700000
   12fce:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   12fd2:	asrs	r3, r3, #20
   12fd4:	orr.w	r5, r5, #2097152	; 0x200000
   12fd8:	subw	r3, r3, #1022	; 0x3fe
   12fdc:	strd	r4, r5, [sp]
   12fe0:	add	r3, r1
   12fe2:	str	r3, [r0, #0]
   12fe4:	vldr	d0, [sp]
   12fe8:	add	sp, #8
   12fea:	pop	{r4, r5}
   12fec:	bx	lr
   12fee:	nop
   12ff0:	.word	0x00000000
   12ff4:	.word	0x43500000
   12ff8:	.word	0x7fefffff
   12ffc:	.word	0x7ff00000

00013000 <__assert_func>:
   13000:	push	{lr}
   13002:	ldr	r4, [pc, #44]	; (13030 <__assert_func+0x30>)
   13004:	ldr	r5, [r4, #0]
   13006:	mov	r4, r2
   13008:	ldr	r6, [r5, #12]
   1300a:	mov	r2, r3
   1300c:	sub	sp, #20
   1300e:	mov	r3, r0
   13010:	mov	r5, r1
   13012:	cbz	r4, 13028 <__assert_func+0x28>
   13014:	ldr	r1, [pc, #28]	; (13034 <__assert_func+0x34>)
   13016:	str	r5, [sp, #0]
   13018:	strd	r1, r4, [sp, #4]
   1301c:	mov	r0, r6
   1301e:	ldr	r1, [pc, #24]	; (13038 <__assert_func+0x38>)
   13020:	bl	145a0 <fiprintf>
   13024:	bl	abc6 <abort>
   13028:	ldr	r1, [pc, #16]	; (1303c <__assert_func+0x3c>)
   1302a:	mov	r4, r1
   1302c:	b.n	13016 <__assert_func+0x16>
   1302e:	nop
   13030:	.word	0x20008eec
   13034:	.word	0x200005e4
   13038:	.word	0x200005f4
   1303c:	.word	0x200005f0

00013040 <_calloc_r>:
   13040:	push	{r3, r4, r5, lr}
   13042:	umull	r1, r4, r1, r2
   13046:	cbnz	r4, 130ac <_calloc_r+0x6c>
   13048:	bl	bad8 <_malloc_r>
   1304c:	mov	r5, r0
   1304e:	cbz	r0, 1308a <_calloc_r+0x4a>
   13050:	ldr.w	r2, [r0, #-4]
   13054:	bic.w	r2, r2, #3
   13058:	subs	r2, #4
   1305a:	cmp	r2, #36	; 0x24
   1305c:	bhi.n	1308e <_calloc_r+0x4e>
   1305e:	cmp	r2, #19
   13060:	bls.n	13098 <_calloc_r+0x58>
   13062:	cmp	r2, #27
   13064:	strd	r4, r4, [r0]
   13068:	bls.n	130a6 <_calloc_r+0x66>
   1306a:	cmp	r2, #36	; 0x24
   1306c:	ite	ne
   1306e:	addne.w	r2, r0, #16
   13072:	addeq.w	r2, r0, #24
   13076:	mov.w	r3, #0
   1307a:	strd	r4, r4, [r0, #8]
   1307e:	itt	eq
   13080:	streq	r4, [r0, #16]
   13082:	streq	r4, [r0, #20]
   13084:	strd	r3, r3, [r2]
   13088:	str	r3, [r2, #8]
   1308a:	mov	r0, r5
   1308c:	pop	{r3, r4, r5, pc}
   1308e:	mov	r1, r4
   13090:	bl	9444 <memset>
   13094:	mov	r0, r5
   13096:	pop	{r3, r4, r5, pc}
   13098:	mov	r2, r0
   1309a:	movs	r3, #0
   1309c:	strd	r3, r3, [r2]
   130a0:	str	r3, [r2, #8]
   130a2:	mov	r0, r5
   130a4:	pop	{r3, r4, r5, pc}
   130a6:	add.w	r2, r0, #8
   130aa:	b.n	1309a <_calloc_r+0x5a>
   130ac:	bl	dc2c <__errno>
   130b0:	movs	r3, #12
   130b2:	movs	r5, #0
   130b4:	str	r3, [r0, #0]
   130b6:	b.n	1308a <_calloc_r+0x4a>

000130b8 <quorem>:
   130b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130bc:	ldr	r3, [r0, #16]
   130be:	ldr	r4, [r1, #16]
   130c0:	cmp	r3, r4
   130c2:	sub	sp, #12
   130c4:	blt.w	131d6 <quorem+0x11e>
   130c8:	subs	r4, #1
   130ca:	add.w	r5, r1, #20
   130ce:	lsls	r3, r4, #2
   130d0:	add.w	r8, r0, #20
   130d4:	str	r3, [sp, #0]
   130d6:	ldr.w	r3, [r5, r4, lsl #2]
   130da:	ldr.w	r2, [r8, r4, lsl #2]
   130de:	adds	r3, #1
   130e0:	mov	r9, r0
   130e2:	cmp	r2, r3
   130e4:	add.w	r0, r8, r4, lsl #2
   130e8:	add.w	r7, r5, r4, lsl #2
   130ec:	str	r0, [sp, #4]
   130ee:	udiv	r6, r2, r3
   130f2:	bcc.n	1316c <quorem+0xb4>
   130f4:	mov.w	ip, #0
   130f8:	mov	lr, r5
   130fa:	mov	r0, r8
   130fc:	mov	sl, ip
   130fe:	mov	r3, ip
   13100:	ldr.w	fp, [lr], #4
   13104:	ldr	r2, [r0, #0]
   13106:	uxth.w	ip, fp
   1310a:	mla	r3, r6, ip, r3
   1310e:	mov.w	ip, r3, lsr #16
   13112:	mov.w	fp, fp, lsr #16
   13116:	mla	ip, r6, fp, ip
   1311a:	uxth	r3, r3
   1311c:	sub.w	r3, sl, r3
   13120:	uxth.w	sl, ip
   13124:	uxtah	r3, r3, r2
   13128:	rsb	r2, sl, r2, lsr #16
   1312c:	add.w	r2, r2, r3, asr #16
   13130:	uxth	r3, r3
   13132:	orr.w	r3, r3, r2, lsl #16
   13136:	cmp	r7, lr
   13138:	str.w	r3, [r0], #4
   1313c:	mov.w	sl, r2, asr #16
   13140:	mov.w	r3, ip, lsr #16
   13144:	bcs.n	13100 <quorem+0x48>
   13146:	ldr	r3, [sp, #0]
   13148:	ldr.w	r3, [r8, r3]
   1314c:	cbnz	r3, 1316c <quorem+0xb4>
   1314e:	ldr	r3, [sp, #4]
   13150:	subs	r3, #4
   13152:	cmp	r8, r3
   13154:	bcc.n	13160 <quorem+0xa8>
   13156:	b.n	13168 <quorem+0xb0>
   13158:	cmp	r8, r3
   1315a:	add.w	r4, r4, #4294967295
   1315e:	bcs.n	13168 <quorem+0xb0>
   13160:	ldr.w	r2, [r3], #-4
   13164:	cmp	r2, #0
   13166:	beq.n	13158 <quorem+0xa0>
   13168:	str.w	r4, [r9, #16]
   1316c:	mov	r0, r9
   1316e:	bl	f338 <__mcmp>
   13172:	cmp	r0, #0
   13174:	blt.n	131ce <quorem+0x116>
   13176:	adds	r6, #1
   13178:	mov	r1, r8
   1317a:	movs	r3, #0
   1317c:	ldr.w	r0, [r5], #4
   13180:	ldr.w	ip, [r1]
   13184:	uxth	r2, r0
   13186:	subs	r2, r3, r2
   13188:	lsrs	r3, r0, #16
   1318a:	uxtah	r2, r2, ip
   1318e:	rsb	r3, r3, ip, lsr #16
   13192:	add.w	r3, r3, r2, asr #16
   13196:	uxth	r2, r2
   13198:	orr.w	r2, r2, r3, lsl #16
   1319c:	cmp	r7, r5
   1319e:	str.w	r2, [r1], #4
   131a2:	mov.w	r3, r3, asr #16
   131a6:	bcs.n	1317c <quorem+0xc4>
   131a8:	ldr.w	r2, [r8, r4, lsl #2]
   131ac:	add.w	r3, r8, r4, lsl #2
   131b0:	cbnz	r2, 131ce <quorem+0x116>
   131b2:	subs	r3, #4
   131b4:	cmp	r8, r3
   131b6:	bcc.n	131c2 <quorem+0x10a>
   131b8:	b.n	131ca <quorem+0x112>
   131ba:	cmp	r8, r3
   131bc:	add.w	r4, r4, #4294967295
   131c0:	bcs.n	131ca <quorem+0x112>
   131c2:	ldr.w	r2, [r3], #-4
   131c6:	cmp	r2, #0
   131c8:	beq.n	131ba <quorem+0x102>
   131ca:	str.w	r4, [r9, #16]
   131ce:	mov	r0, r6
   131d0:	add	sp, #12
   131d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d6:	movs	r0, #0
   131d8:	add	sp, #12
   131da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131de:	nop

000131e0 <_dtoa_r>:
   131e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e4:	vpush	{d8}
   131e8:	sub	sp, #60	; 0x3c
   131ea:	vstr	d0, [sp, #8]
   131ee:	str	r1, [sp, #4]
   131f0:	ldr	r1, [r0, #56]	; 0x38
   131f2:	ldr	r5, [sp, #104]	; 0x68
   131f4:	str	r3, [sp, #20]
   131f6:	vmov	r6, r7, d0
   131fa:	mov	r4, r0
   131fc:	mov	fp, r2
   131fe:	cbz	r1, 13212 <_dtoa_r+0x32>
   13200:	ldr	r2, [r0, #60]	; 0x3c
   13202:	str	r2, [r1, #4]
   13204:	movs	r3, #1
   13206:	lsls	r3, r2
   13208:	str	r3, [r1, #8]
   1320a:	bl	edc8 <_Bfree>
   1320e:	movs	r3, #0
   13210:	str	r3, [r4, #56]	; 0x38
   13212:	subs.w	r8, r7, #0
   13216:	ite	lt
   13218:	movlt	r3, #1
   1321a:	movge	r3, #0
   1321c:	str	r3, [r5, #0]
   1321e:	ldr	r3, [pc, #760]	; (13518 <_dtoa_r+0x338>)
   13220:	itt	lt
   13222:	biclt.w	r8, r8, #2147483648	; 0x80000000
   13226:	strlt.w	r8, [sp, #12]
   1322a:	bics.w	r3, r3, r8
   1322e:	beq.w	13370 <_dtoa_r+0x190>
   13232:	vldr	d8, [sp, #8]
   13236:	vcmp.f64	d8, #0.0
   1323a:	vmrs	APSR_nzcv, fpscr
   1323e:	bne.n	13264 <_dtoa_r+0x84>
   13240:	ldr	r2, [sp, #20]
   13242:	movs	r3, #1
   13244:	str	r3, [r2, #0]
   13246:	ldr	r3, [sp, #108]	; 0x6c
   13248:	cmp	r3, #0
   1324a:	beq.w	136cc <_dtoa_r+0x4ec>
   1324e:	ldr	r3, [pc, #716]	; (1351c <_dtoa_r+0x33c>)
   13250:	ldr	r2, [sp, #108]	; 0x6c
   13252:	str	r3, [r2, #0]
   13254:	subs	r3, #1
   13256:	str	r3, [sp, #0]
   13258:	ldr	r0, [sp, #0]
   1325a:	add	sp, #60	; 0x3c
   1325c:	vpop	{d8}
   13260:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13264:	add	r2, sp, #48	; 0x30
   13266:	add	r1, sp, #52	; 0x34
   13268:	mov	r0, r4
   1326a:	vmov.f64	d0, d8
   1326e:	bl	f5f8 <__d2b>
   13272:	movs.w	r3, r8, lsr #20
   13276:	mov	r5, r0
   13278:	bne.w	133a0 <_dtoa_r+0x1c0>
   1327c:	ldrd	r1, r3, [sp, #48]	; 0x30
   13280:	add	r3, r1
   13282:	addw	r2, r3, #1074	; 0x432
   13286:	cmp	r2, #32
   13288:	ble.w	13880 <_dtoa_r+0x6a0>
   1328c:	rsb	r2, r2, #64	; 0x40
   13290:	lsl.w	r8, r8, r2
   13294:	addw	r2, r3, #1042	; 0x412
   13298:	lsrs	r6, r2
   1329a:	orr.w	r2, r8, r6
   1329e:	vmov	s14, r2
   132a2:	vcvt.f64.u32	d7, s14
   132a6:	subs	r0, r3, #1
   132a8:	vmov	r6, s15
   132ac:	vmov	r2, r3, d7
   132b0:	mov.w	sl, #1
   132b4:	sub.w	r3, r6, #32505856	; 0x1f00000
   132b8:	vldr	d3, [pc, #580]	; 13500 <_dtoa_r+0x320>
   132bc:	vldr	d7, [pc, #584]	; 13508 <_dtoa_r+0x328>
   132c0:	vldr	d5, [pc, #588]	; 13510 <_dtoa_r+0x330>
   132c4:	vmov	s13, r0
   132c8:	vmov	d2, r2, r3
   132cc:	vcvt.f64.s32	d4, s13
   132d0:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   132d4:	vsub.f64	d6, d2, d6
   132d8:	vfma.f64	d7, d6, d3
   132dc:	vfma.f64	d7, d4, d5
   132e0:	vcvt.s32.f64	s13, d7
   132e4:	vcmpe.f64	d7, #0.0
   132e8:	vmrs	APSR_nzcv, fpscr
   132ec:	vmov	r7, s13
   132f0:	bpl.n	13304 <_dtoa_r+0x124>
   132f2:	vcvt.f64.s32	d6, s13
   132f6:	vcmp.f64	d6, d7
   132fa:	vmrs	APSR_nzcv, fpscr
   132fe:	it	ne
   13300:	addne.w	r7, r7, #4294967295
   13304:	cmp	r7, #22
   13306:	bhi.w	13594 <_dtoa_r+0x3b4>
   1330a:	ldr	r3, [pc, #532]	; (13520 <_dtoa_r+0x340>)
   1330c:	add.w	r3, r3, r7, lsl #3
   13310:	vldr	d7, [r3]
   13314:	vcmpe.f64	d8, d7
   13318:	vmrs	APSR_nzcv, fpscr
   1331c:	bpl.n	133ce <_dtoa_r+0x1ee>
   1331e:	subs	r1, r1, r0
   13320:	movs	r3, #0
   13322:	subs.w	r8, r1, #1
   13326:	add.w	r7, r7, #4294967295
   1332a:	str	r3, [sp, #40]	; 0x28
   1332c:	bmi.w	135a2 <_dtoa_r+0x3c2>
   13330:	movs	r3, #0
   13332:	str	r3, [sp, #24]
   13334:	cmp	r7, #0
   13336:	bge.n	133de <_dtoa_r+0x1fe>
   13338:	ldr	r3, [sp, #24]
   1333a:	str	r7, [sp, #16]
   1333c:	subs	r3, r3, r7
   1333e:	str	r3, [sp, #24]
   13340:	negs	r3, r7
   13342:	str	r3, [sp, #32]
   13344:	ldr	r3, [sp, #4]
   13346:	cmp	r3, #9
   13348:	mov.w	r7, #0
   1334c:	bhi.n	133ec <_dtoa_r+0x20c>
   1334e:	cmp	r3, #5
   13350:	ble.w	1388e <_dtoa_r+0x6ae>
   13354:	subs	r3, #4
   13356:	str	r3, [sp, #4]
   13358:	movs	r6, #0
   1335a:	ldr	r3, [sp, #4]
   1335c:	subs	r2, r3, #2
   1335e:	cmp	r2, #3
   13360:	bhi.w	135ae <_dtoa_r+0x3ce>
   13364:	tbh	[pc, r2, lsl #1]
   13368:	.word	0x03a703aa
   1336c:	.word	0x037e039d
   13370:	ldr	r2, [sp, #20]
   13372:	ubfx	r8, r8, #0, #20
   13376:	movw	r3, #9999	; 0x270f
   1337a:	orrs.w	r8, r8, r6
   1337e:	str	r3, [r2, #0]
   13380:	bne.n	133c0 <_dtoa_r+0x1e0>
   13382:	ldr	r3, [sp, #108]	; 0x6c
   13384:	cmp	r3, #0
   13386:	beq.w	13eac <_dtoa_r+0xccc>
   1338a:	ldr	r3, [pc, #408]	; (13524 <_dtoa_r+0x344>)
   1338c:	str	r3, [sp, #0]
   1338e:	adds	r3, #8
   13390:	ldr	r2, [sp, #108]	; 0x6c
   13392:	ldr	r0, [sp, #0]
   13394:	str	r3, [r2, #0]
   13396:	add	sp, #60	; 0x3c
   13398:	vpop	{d8}
   1339c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133a0:	vmov	r6, s17
   133a4:	ubfx	r6, r6, #0, #20
   133a8:	subw	r0, r3, #1023	; 0x3ff
   133ac:	vmov	r2, r3, d8
   133b0:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   133b4:	ldr	r1, [sp, #48]	; 0x30
   133b6:	mov.w	sl, #0
   133ba:	orr.w	r3, r3, #3145728	; 0x300000
   133be:	b.n	132b8 <_dtoa_r+0xd8>
   133c0:	ldr	r3, [sp, #108]	; 0x6c
   133c2:	cmp	r3, #0
   133c4:	bne.w	13a3e <_dtoa_r+0x85e>
   133c8:	ldr	r3, [pc, #348]	; (13528 <_dtoa_r+0x348>)
   133ca:	str	r3, [sp, #0]
   133cc:	b.n	13258 <_dtoa_r+0x78>
   133ce:	subs	r1, r1, r0
   133d0:	movs	r3, #0
   133d2:	subs.w	r8, r1, #1
   133d6:	str	r3, [sp, #40]	; 0x28
   133d8:	bmi.w	135a2 <_dtoa_r+0x3c2>
   133dc:	str	r3, [sp, #24]
   133de:	movs	r3, #0
   133e0:	str	r3, [sp, #32]
   133e2:	ldr	r3, [sp, #4]
   133e4:	str	r7, [sp, #16]
   133e6:	cmp	r3, #9
   133e8:	add	r8, r7
   133ea:	bls.n	1334e <_dtoa_r+0x16e>
   133ec:	movs	r3, #0
   133ee:	movs	r6, #1
   133f0:	str	r3, [sp, #4]
   133f2:	str	r6, [sp, #28]
   133f4:	mov.w	r9, #4294967295
   133f8:	mov	fp, r3
   133fa:	movs	r1, #0
   133fc:	str	r1, [r4, #60]	; 0x3c
   133fe:	str.w	r9, [sp, #44]	; 0x2c
   13402:	mov	r0, r4
   13404:	bl	ed7c <_Balloc>
   13408:	str	r0, [sp, #0]
   1340a:	cmp	r0, #0
   1340c:	beq.w	13e90 <_dtoa_r+0xcb0>
   13410:	ldr	r3, [sp, #0]
   13412:	str	r3, [r4, #56]	; 0x38
   13414:	cmp.w	r9, #14
   13418:	bhi.w	135d4 <_dtoa_r+0x3f4>
   1341c:	cmp	r6, #0
   1341e:	beq.w	135d4 <_dtoa_r+0x3f4>
   13422:	ldr	r3, [sp, #16]
   13424:	cmp	r3, #0
   13426:	ble.w	13be6 <_dtoa_r+0xa06>
   1342a:	ldr	r2, [pc, #244]	; (13520 <_dtoa_r+0x340>)
   1342c:	and.w	r1, r3, #15
   13430:	add.w	r2, r2, r1, lsl #3
   13434:	vldr	d7, [r2]
   13438:	asrs	r2, r3, #4
   1343a:	lsls	r3, r3, #23
   1343c:	bpl.w	13b44 <_dtoa_r+0x964>
   13440:	ldr	r1, [pc, #232]	; (1352c <_dtoa_r+0x34c>)
   13442:	vldr	d6, [r1, #32]
   13446:	and.w	r2, r2, #15
   1344a:	movs	r0, #3
   1344c:	vdiv.f64	d5, d8, d6
   13450:	cbz	r2, 1346a <_dtoa_r+0x28a>
   13452:	ldr	r1, [pc, #216]	; (1352c <_dtoa_r+0x34c>)
   13454:	lsls	r6, r2, #31
   13456:	bpl.n	13462 <_dtoa_r+0x282>
   13458:	vldr	d6, [r1]
   1345c:	adds	r0, #1
   1345e:	vmul.f64	d7, d7, d6
   13462:	asrs	r2, r2, #1
   13464:	add.w	r1, r1, #8
   13468:	bne.n	13454 <_dtoa_r+0x274>
   1346a:	vdiv.f64	d6, d5, d7
   1346e:	ldr	r3, [sp, #40]	; 0x28
   13470:	cbz	r3, 13482 <_dtoa_r+0x2a2>
   13472:	vmov.f64	d7, #112	; 0x3f800000  1.0
   13476:	vcmpe.f64	d6, d7
   1347a:	vmrs	APSR_nzcv, fpscr
   1347e:	bmi.w	13dde <_dtoa_r+0xbfe>
   13482:	vmov	s15, r0
   13486:	vcvt.f64.s32	d5, s15
   1348a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1348e:	vfma.f64	d7, d5, d6
   13492:	vmov	r2, s15
   13496:	vmov	r0, r1, d7
   1349a:	sub.w	r1, r2, #54525952	; 0x3400000
   1349e:	cmp.w	r9, #0
   134a2:	beq.w	13bb6 <_dtoa_r+0x9d6>
   134a6:	ldr	r6, [sp, #16]
   134a8:	mov	r2, r9
   134aa:	ldr	r3, [sp, #28]
   134ac:	cmp	r3, #0
   134ae:	beq.w	13d40 <_dtoa_r+0xb60>
   134b2:	vmov.f64	d3, #96	; 0x3f000000  0.5
   134b6:	ldr	r3, [pc, #104]	; (13520 <_dtoa_r+0x340>)
   134b8:	vcvt.s32.f64	s9, d6
   134bc:	add.w	ip, r3, r2, lsl #3
   134c0:	vcvt.f64.s32	d7, s9
   134c4:	vsub.f64	d7, d6, d7
   134c8:	vldr	d6, [ip, #-8]
   134cc:	vdiv.f64	d5, d3, d6
   134d0:	vmov	d6, r0, r1
   134d4:	vmov	r0, s9
   134d8:	vsub.f64	d5, d5, d6
   134dc:	ldr	r1, [sp, #0]
   134de:	vcmpe.f64	d5, d7
   134e2:	adds	r0, #48	; 0x30
   134e4:	vmrs	APSR_nzcv, fpscr
   134e8:	strb.w	r0, [r1], #1
   134ec:	bgt.w	13e48 <_dtoa_r+0xc68>
   134f0:	vmov.f64	d2, #112	; 0x3f800000  1.0
   134f4:	vmov.f64	d4, #36	; 0x41200000  10.0
   134f8:	mov.w	ip, #0
   134fc:	b.n	13562 <_dtoa_r+0x382>
   134fe:	nop
   13500:	.word	0x636f4361
   13504:	.word	0x3fd287a7
   13508:	.word	0x8b60c8b3
   1350c:	.word	0x3fc68a28
   13510:	.word	0x509f79fb
   13514:	.word	0x3fd34413
   13518:	.word	0x7ff00000
   1351c:	.word	0x200009d9
   13520:	.word	0x20000328
   13524:	.word	0x20000904
   13528:	.word	0x20000910
   1352c:	.word	0x20000300
   13530:	add.w	ip, ip, #1
   13534:	cmp	ip, r2
   13536:	bge.n	135d4 <_dtoa_r+0x3f4>
   13538:	vmul.f64	d7, d7, d4
   1353c:	vmul.f64	d5, d5, d4
   13540:	vcvt.s32.f64	s13, d7
   13544:	vmov	r3, s13
   13548:	vcvt.f64.s32	d3, s13
   1354c:	adds	r3, #48	; 0x30
   1354e:	vsub.f64	d7, d7, d3
   13552:	vcmpe.f64	d7, d5
   13556:	vmrs	APSR_nzcv, fpscr
   1355a:	strb.w	r3, [r1], #1
   1355e:	bmi.w	13e48 <_dtoa_r+0xc68>
   13562:	vsub.f64	d6, d2, d7
   13566:	vcmpe.f64	d6, d5
   1356a:	vmrs	APSR_nzcv, fpscr
   1356e:	bpl.n	13530 <_dtoa_r+0x350>
   13570:	ldr	r2, [sp, #0]
   13572:	str	r6, [sp, #16]
   13574:	b.n	1357c <_dtoa_r+0x39c>
   13576:	cmp	r2, r1
   13578:	beq.w	13e1c <_dtoa_r+0xc3c>
   1357c:	mov	r9, r1
   1357e:	ldrb.w	r3, [r1, #-1]!
   13582:	cmp	r3, #57	; 0x39
   13584:	beq.n	13576 <_dtoa_r+0x396>
   13586:	adds	r3, #1
   13588:	uxtb	r3, r3
   1358a:	strb	r3, [r1, #0]
   1358c:	ldr	r3, [sp, #16]
   1358e:	adds	r3, #1
   13590:	str	r3, [sp, #16]
   13592:	b.n	13840 <_dtoa_r+0x660>
   13594:	subs	r1, r1, r0
   13596:	movs	r3, #1
   13598:	subs.w	r8, r1, #1
   1359c:	str	r3, [sp, #40]	; 0x28
   1359e:	bpl.w	13330 <_dtoa_r+0x150>
   135a2:	rsb	r3, r1, #1
   135a6:	str	r3, [sp, #24]
   135a8:	mov.w	r8, #0
   135ac:	b.n	13334 <_dtoa_r+0x154>
   135ae:	movs	r6, #0
   135b0:	str	r6, [r4, #60]	; 0x3c
   135b2:	mov	r1, r6
   135b4:	mov	r0, r4
   135b6:	bl	ed7c <_Balloc>
   135ba:	str	r0, [sp, #0]
   135bc:	cmp	r0, #0
   135be:	beq.w	13e90 <_dtoa_r+0xcb0>
   135c2:	ldr	r3, [sp, #0]
   135c4:	str	r3, [r4, #56]	; 0x38
   135c6:	mov.w	r3, #4294967295
   135ca:	str	r3, [sp, #44]	; 0x2c
   135cc:	mov	r9, r3
   135ce:	movs	r3, #1
   135d0:	mov	fp, r6
   135d2:	str	r3, [sp, #28]
   135d4:	ldr	r2, [sp, #52]	; 0x34
   135d6:	cmp	r2, #0
   135d8:	blt.n	13686 <_dtoa_r+0x4a6>
   135da:	ldr	r1, [sp, #16]
   135dc:	cmp	r1, #14
   135de:	bgt.n	13686 <_dtoa_r+0x4a6>
   135e0:	ldr	r3, [pc, #732]	; (138c0 <_dtoa_r+0x6e0>)
   135e2:	cmp.w	fp, #0
   135e6:	add.w	r3, r3, r1, lsl #3
   135ea:	vldr	d6, [r3]
   135ee:	bge.n	1361c <_dtoa_r+0x43c>
   135f0:	cmp.w	r9, #0
   135f4:	bgt.n	1361c <_dtoa_r+0x43c>
   135f6:	bne.w	13bde <_dtoa_r+0x9fe>
   135fa:	vmov.f64	d7, #20	; 0x40a00000  5.0
   135fe:	vmul.f64	d7, d6, d7
   13602:	vcmpe.f64	d8, d7
   13606:	vmrs	APSR_nzcv, fpscr
   1360a:	mov	sl, r9
   1360c:	mov	r6, r9
   1360e:	bhi.w	13aec <_dtoa_r+0x90c>
   13612:	ldr.w	r8, [sp]
   13616:	mvn.w	fp, fp
   1361a:	b.n	13afe <_dtoa_r+0x91e>
   1361c:	vdiv.f64	d7, d8, d6
   13620:	vcvt.s32.f64	s14, d7
   13624:	ldr	r1, [sp, #0]
   13626:	vmov	r3, s14
   1362a:	cmp.w	r9, #1
   1362e:	add.w	r3, r3, #48	; 0x30
   13632:	vcvt.f64.s32	d5, s14
   13636:	strb.w	r3, [r1], #1
   1363a:	vfms.f64	d8, d5, d6
   1363e:	beq.w	13caa <_dtoa_r+0xaca>
   13642:	vmov.f64	d4, #36	; 0x41200000  10.0
   13646:	movs	r3, #1
   13648:	b.n	1366e <_dtoa_r+0x48e>
   1364a:	vdiv.f64	d7, d8, d6
   1364e:	vcvt.s32.f64	s14, d7
   13652:	adds	r3, #1
   13654:	vmov	r2, s14
   13658:	cmp	r3, r9
   1365a:	add.w	r2, r2, #48	; 0x30
   1365e:	vcvt.f64.s32	d5, s14
   13662:	strb.w	r2, [r1], #1
   13666:	vfms.f64	d8, d5, d6
   1366a:	beq.w	13caa <_dtoa_r+0xaca>
   1366e:	vmul.f64	d8, d8, d4
   13672:	vcmp.f64	d8, #0.0
   13676:	vmrs	APSR_nzcv, fpscr
   1367a:	bne.n	1364a <_dtoa_r+0x46a>
   1367c:	ldr	r3, [sp, #16]
   1367e:	adds	r3, #1
   13680:	str	r3, [sp, #16]
   13682:	mov	r9, r1
   13684:	b.n	13840 <_dtoa_r+0x660>
   13686:	ldr	r3, [sp, #28]
   13688:	cbz	r3, 136dc <_dtoa_r+0x4fc>
   1368a:	ldr	r3, [sp, #4]
   1368c:	cmp	r3, #1
   1368e:	ble.w	13b7e <_dtoa_r+0x99e>
   13692:	ldr	r3, [sp, #32]
   13694:	add.w	sl, r9, #4294967295
   13698:	cmp	r3, sl
   1369a:	bge.w	13b1c <_dtoa_r+0x93c>
   1369e:	ldr	r3, [sp, #32]
   136a0:	str.w	sl, [sp, #32]
   136a4:	sub.w	r2, sl, r3
   136a8:	add	r7, r2
   136aa:	mov.w	sl, #0
   136ae:	cmp.w	r9, #0
   136b2:	blt.w	13d00 <_dtoa_r+0xb20>
   136b6:	ldr	r3, [sp, #24]
   136b8:	str	r3, [sp, #36]	; 0x24
   136ba:	add	r3, r9
   136bc:	add	r8, r9
   136be:	str	r3, [sp, #24]
   136c0:	movs	r1, #1
   136c2:	mov	r0, r4
   136c4:	bl	efd0 <__i2b>
   136c8:	mov	r6, r0
   136ca:	b.n	136e6 <_dtoa_r+0x506>
   136cc:	ldr	r3, [pc, #500]	; (138c4 <_dtoa_r+0x6e4>)
   136ce:	str	r3, [sp, #0]
   136d0:	ldr	r0, [sp, #0]
   136d2:	add	sp, #60	; 0x3c
   136d4:	vpop	{d8}
   136d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136dc:	ldr	r3, [sp, #24]
   136de:	ldr.w	sl, [sp, #32]
   136e2:	ldr	r6, [sp, #28]
   136e4:	str	r3, [sp, #36]	; 0x24
   136e6:	ldr	r3, [sp, #36]	; 0x24
   136e8:	cbz	r3, 13706 <_dtoa_r+0x526>
   136ea:	cmp.w	r8, #0
   136ee:	ble.n	13706 <_dtoa_r+0x526>
   136f0:	cmp	r3, r8
   136f2:	ldr	r1, [sp, #24]
   136f4:	mov	r2, r3
   136f6:	it	ge
   136f8:	movge	r2, r8
   136fa:	subs	r1, r1, r2
   136fc:	subs	r3, r3, r2
   136fe:	str	r1, [sp, #24]
   13700:	str	r3, [sp, #36]	; 0x24
   13702:	sub.w	r8, r8, r2
   13706:	ldr	r3, [sp, #32]
   13708:	cbz	r3, 13724 <_dtoa_r+0x544>
   1370a:	ldr	r3, [sp, #28]
   1370c:	cmp	r3, #0
   1370e:	beq.w	13c60 <_dtoa_r+0xa80>
   13712:	cmp.w	sl, #0
   13716:	bgt.w	13b22 <_dtoa_r+0x942>
   1371a:	ldr	r3, [sp, #32]
   1371c:	subs.w	r2, r3, sl
   13720:	bne.w	13d22 <_dtoa_r+0xb42>
   13724:	movs	r1, #1
   13726:	mov	r0, r4
   13728:	bl	efd0 <__i2b>
   1372c:	cmp	r7, #0
   1372e:	mov	sl, r0
   13730:	bgt.w	13892 <_dtoa_r+0x6b2>
   13734:	ldr	r3, [sp, #4]
   13736:	cmp	r3, #1
   13738:	ble.w	13a4a <_dtoa_r+0x86a>
   1373c:	movs	r3, #0
   1373e:	str	r3, [sp, #32]
   13740:	movs	r0, #1
   13742:	cmp	r7, #0
   13744:	bne.w	138aa <_dtoa_r+0x6ca>
   13748:	add	r0, r8
   1374a:	ands.w	r0, r0, #31
   1374e:	beq.w	13a46 <_dtoa_r+0x866>
   13752:	rsb	r2, r0, #32
   13756:	cmp	r2, #4
   13758:	bgt.w	1386c <_dtoa_r+0x68c>
   1375c:	bne.w	13b4c <_dtoa_r+0x96c>
   13760:	ldr	r3, [sp, #24]
   13762:	cmp	r3, #0
   13764:	ble.n	13772 <_dtoa_r+0x592>
   13766:	mov	r1, r5
   13768:	mov	r2, r3
   1376a:	mov	r0, r4
   1376c:	bl	f248 <__lshift>
   13770:	mov	r5, r0
   13772:	cmp.w	r8, #0
   13776:	ble.n	13784 <_dtoa_r+0x5a4>
   13778:	mov	r1, sl
   1377a:	mov	r2, r8
   1377c:	mov	r0, r4
   1377e:	bl	f248 <__lshift>
   13782:	mov	sl, r0
   13784:	ldr	r3, [sp, #40]	; 0x28
   13786:	cmp	r3, #0
   13788:	bne.w	13a0a <_dtoa_r+0x82a>
   1378c:	cmp.w	r9, #0
   13790:	ble.w	139de <_dtoa_r+0x7fe>
   13794:	ldr	r3, [sp, #28]
   13796:	cmp	r3, #0
   13798:	bne.w	138e2 <_dtoa_r+0x702>
   1379c:	ldr	r3, [sp, #16]
   1379e:	adds	r3, #1
   137a0:	str	r3, [sp, #16]
   137a2:	ldr.w	r8, [sp]
   137a6:	movs	r7, #1
   137a8:	b.n	137ba <_dtoa_r+0x5da>
   137aa:	mov	r1, r5
   137ac:	movs	r3, #0
   137ae:	movs	r2, #10
   137b0:	mov	r0, r4
   137b2:	bl	eddc <__multadd>
   137b6:	adds	r7, #1
   137b8:	mov	r5, r0
   137ba:	mov	r1, sl
   137bc:	mov	r0, r5
   137be:	bl	130b8 <quorem>
   137c2:	cmp	r9, r7
   137c4:	add.w	r0, r0, #48	; 0x30
   137c8:	strb.w	r0, [r8], #1
   137cc:	bgt.n	137aa <_dtoa_r+0x5ca>
   137ce:	cmp.w	r9, #0
   137d2:	ldr	r2, [sp, #0]
   137d4:	ite	gt
   137d6:	movgt	fp, r9
   137d8:	movle.w	fp, #1
   137dc:	mov	r3, r0
   137de:	add	fp, r2
   137e0:	movs	r7, #0
   137e2:	mov	r1, r5
   137e4:	movs	r2, #1
   137e6:	mov	r0, r4
   137e8:	str	r3, [sp, #4]
   137ea:	bl	f248 <__lshift>
   137ee:	mov	r1, sl
   137f0:	mov	r5, r0
   137f2:	bl	f338 <__mcmp>
   137f6:	cmp	r0, #0
   137f8:	ble.w	13b5a <_dtoa_r+0x97a>
   137fc:	ldrb.w	r3, [fp, #-1]
   13800:	ldr	r2, [sp, #0]
   13802:	add.w	fp, fp, #4294967295
   13806:	b.n	13812 <_dtoa_r+0x632>
   13808:	cmp	r2, fp
   1380a:	beq.w	13b70 <_dtoa_r+0x990>
   1380e:	ldrb.w	r3, [fp, #-1]!
   13812:	cmp	r3, #57	; 0x39
   13814:	add.w	r9, fp, #1
   13818:	beq.n	13808 <_dtoa_r+0x628>
   1381a:	adds	r3, #1
   1381c:	strb.w	r3, [fp]
   13820:	mov	r1, sl
   13822:	mov	r0, r4
   13824:	bl	edc8 <_Bfree>
   13828:	cbz	r6, 13840 <_dtoa_r+0x660>
   1382a:	cbz	r7, 13838 <_dtoa_r+0x658>
   1382c:	cmp	r7, r6
   1382e:	beq.n	13838 <_dtoa_r+0x658>
   13830:	mov	r1, r7
   13832:	mov	r0, r4
   13834:	bl	edc8 <_Bfree>
   13838:	mov	r1, r6
   1383a:	mov	r0, r4
   1383c:	bl	edc8 <_Bfree>
   13840:	mov	r1, r5
   13842:	mov	r0, r4
   13844:	bl	edc8 <_Bfree>
   13848:	movs	r3, #0
   1384a:	strb.w	r3, [r9]
   1384e:	ldrd	r2, r3, [sp, #16]
   13852:	str	r2, [r3, #0]
   13854:	ldr	r3, [sp, #108]	; 0x6c
   13856:	cmp	r3, #0
   13858:	beq.w	13258 <_dtoa_r+0x78>
   1385c:	ldr	r0, [sp, #0]
   1385e:	str.w	r9, [r3]
   13862:	add	sp, #60	; 0x3c
   13864:	vpop	{d8}
   13868:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1386c:	rsb	r0, r0, #28
   13870:	ldr	r3, [sp, #24]
   13872:	add	r3, r0
   13874:	str	r3, [sp, #24]
   13876:	ldr	r3, [sp, #36]	; 0x24
   13878:	add	r3, r0
   1387a:	str	r3, [sp, #36]	; 0x24
   1387c:	add	r8, r0
   1387e:	b.n	13760 <_dtoa_r+0x580>
   13880:	rsb	r2, r2, #32
   13884:	lsl.w	r2, r6, r2
   13888:	vmov	s14, r2
   1388c:	b.n	132a2 <_dtoa_r+0xc2>
   1388e:	movs	r6, #1
   13890:	b.n	1335a <_dtoa_r+0x17a>
   13892:	mov	r1, r0
   13894:	mov	r2, r7
   13896:	mov	r0, r4
   13898:	bl	f188 <__pow5mult>
   1389c:	ldr	r3, [sp, #4]
   1389e:	cmp	r3, #1
   138a0:	mov	sl, r0
   138a2:	ble.w	13c30 <_dtoa_r+0xa50>
   138a6:	movs	r3, #0
   138a8:	str	r3, [sp, #32]
   138aa:	ldr.w	r2, [sl, #16]
   138ae:	add.w	r2, sl, r2, lsl #2
   138b2:	ldr	r0, [r2, #16]
   138b4:	bl	ef30 <__hi0bits>
   138b8:	rsb	r0, r0, #32
   138bc:	b.n	13748 <_dtoa_r+0x568>
   138be:	nop
   138c0:	.word	0x20000328
   138c4:	.word	0x200009d8
   138c8:	mov	r1, r6
   138ca:	movs	r3, #0
   138cc:	movs	r2, #10
   138ce:	mov	r0, r4
   138d0:	bl	eddc <__multadd>
   138d4:	ldr	r3, [sp, #44]	; 0x2c
   138d6:	cmp	r3, #0
   138d8:	mov	r6, r0
   138da:	ble.w	13e7a <_dtoa_r+0xc9a>
   138de:	str	r7, [sp, #16]
   138e0:	mov	r9, r3
   138e2:	ldr	r3, [sp, #36]	; 0x24
   138e4:	cmp	r3, #0
   138e6:	ble.n	138f4 <_dtoa_r+0x714>
   138e8:	mov	r1, r6
   138ea:	mov	r2, r3
   138ec:	mov	r0, r4
   138ee:	bl	f248 <__lshift>
   138f2:	mov	r6, r0
   138f4:	ldr	r3, [sp, #32]
   138f6:	cmp	r3, #0
   138f8:	bne.w	13cd2 <_dtoa_r+0xaf2>
   138fc:	mov	r8, r6
   138fe:	ldr	r3, [sp, #8]
   13900:	ldr	r7, [sp, #0]
   13902:	and.w	r2, r3, #1
   13906:	subs	r3, r7, #1
   13908:	add	r3, r9
   1390a:	str	r3, [sp, #32]
   1390c:	ldr	r3, [sp, #4]
   1390e:	str	r2, [sp, #40]	; 0x28
   13910:	orrs	r3, r2
   13912:	str	r3, [sp, #36]	; 0x24
   13914:	mov	r1, sl
   13916:	mov	r0, r5
   13918:	bl	130b8 <quorem>
   1391c:	mov	r1, r6
   1391e:	mov	fp, r0
   13920:	mov	r0, r5
   13922:	bl	f338 <__mcmp>
   13926:	mov	r2, r8
   13928:	mov	r1, sl
   1392a:	mov	r9, r0
   1392c:	mov	r0, r4
   1392e:	bl	f37c <__mdiff>
   13932:	ldr	r2, [r0, #12]
   13934:	mov	r1, r0
   13936:	add.w	r3, fp, #48	; 0x30
   1393a:	cmp	r2, #0
   1393c:	bne.n	139c4 <_dtoa_r+0x7e4>
   1393e:	strd	r0, r3, [sp, #24]
   13942:	mov	r0, r5
   13944:	bl	f338 <__mcmp>
   13948:	ldr	r1, [sp, #24]
   1394a:	str	r0, [sp, #8]
   1394c:	mov	r0, r4
   1394e:	bl	edc8 <_Bfree>
   13952:	ldr	r2, [sp, #8]
   13954:	ldr	r3, [sp, #28]
   13956:	cbnz	r2, 13960 <_dtoa_r+0x780>
   13958:	ldr	r1, [sp, #36]	; 0x24
   1395a:	cmp	r1, #0
   1395c:	beq.w	13e5c <_dtoa_r+0xc7c>
   13960:	cmp.w	r9, #0
   13964:	blt.w	13c6e <_dtoa_r+0xa8e>
   13968:	ldr	r1, [sp, #4]
   1396a:	orr.w	r9, r9, r1
   1396e:	ldr	r1, [sp, #40]	; 0x28
   13970:	orrs.w	r9, r1, r9
   13974:	beq.w	13c6e <_dtoa_r+0xa8e>
   13978:	cmp	r2, #0
   1397a:	bgt.w	13d0a <_dtoa_r+0xb2a>
   1397e:	ldr	r2, [sp, #32]
   13980:	strb	r3, [r7, #0]
   13982:	add.w	r9, r7, #1
   13986:	cmp	r7, r2
   13988:	mov	fp, r9
   1398a:	beq.w	13d16 <_dtoa_r+0xb36>
   1398e:	mov	r1, r5
   13990:	movs	r3, #0
   13992:	movs	r2, #10
   13994:	mov	r0, r4
   13996:	bl	eddc <__multadd>
   1399a:	cmp	r6, r8
   1399c:	mov	r5, r0
   1399e:	mov	r1, r6
   139a0:	mov.w	r3, #0
   139a4:	mov.w	r2, #10
   139a8:	mov	r0, r4
   139aa:	beq.n	139d2 <_dtoa_r+0x7f2>
   139ac:	bl	eddc <__multadd>
   139b0:	mov	r1, r8
   139b2:	mov	r6, r0
   139b4:	movs	r3, #0
   139b6:	movs	r2, #10
   139b8:	mov	r0, r4
   139ba:	bl	eddc <__multadd>
   139be:	mov	r7, r9
   139c0:	mov	r8, r0
   139c2:	b.n	13914 <_dtoa_r+0x734>
   139c4:	mov	r0, r4
   139c6:	str	r3, [sp, #8]
   139c8:	bl	edc8 <_Bfree>
   139cc:	ldr	r3, [sp, #8]
   139ce:	movs	r2, #1
   139d0:	b.n	13960 <_dtoa_r+0x780>
   139d2:	bl	eddc <__multadd>
   139d6:	mov	r7, r9
   139d8:	mov	r6, r0
   139da:	mov	r8, r0
   139dc:	b.n	13914 <_dtoa_r+0x734>
   139de:	ldr	r3, [sp, #4]
   139e0:	cmp	r3, #2
   139e2:	bgt.n	13ac8 <_dtoa_r+0x8e8>
   139e4:	ldr	r3, [sp, #28]
   139e6:	cmp	r3, #0
   139e8:	bne.w	138e2 <_dtoa_r+0x702>
   139ec:	ldr	r3, [sp, #16]
   139ee:	mov	r1, sl
   139f0:	adds	r3, #1
   139f2:	mov	r0, r5
   139f4:	str	r3, [sp, #16]
   139f6:	bl	130b8 <quorem>
   139fa:	ldr.w	fp, [sp]
   139fe:	add.w	r3, r0, #48	; 0x30
   13a02:	strb.w	r3, [fp], #1
   13a06:	movs	r7, #0
   13a08:	b.n	137e2 <_dtoa_r+0x602>
   13a0a:	mov	r1, sl
   13a0c:	mov	r0, r5
   13a0e:	bl	f338 <__mcmp>
   13a12:	cmp	r0, #0
   13a14:	bge.w	1378c <_dtoa_r+0x5ac>
   13a18:	mov	r1, r5
   13a1a:	movs	r3, #0
   13a1c:	movs	r2, #10
   13a1e:	mov	r0, r4
   13a20:	bl	eddc <__multadd>
   13a24:	ldr	r3, [sp, #16]
   13a26:	subs	r7, r3, #1
   13a28:	ldr	r3, [sp, #28]
   13a2a:	mov	r5, r0
   13a2c:	cmp	r3, #0
   13a2e:	bne.w	138c8 <_dtoa_r+0x6e8>
   13a32:	ldr	r3, [sp, #44]	; 0x2c
   13a34:	cmp	r3, #0
   13a36:	ble.w	13e6a <_dtoa_r+0xc8a>
   13a3a:	mov	r9, r3
   13a3c:	b.n	137a2 <_dtoa_r+0x5c2>
   13a3e:	ldr	r3, [pc, #752]	; (13d30 <_dtoa_r+0xb50>)
   13a40:	str	r3, [sp, #0]
   13a42:	adds	r3, #3
   13a44:	b.n	13390 <_dtoa_r+0x1b0>
   13a46:	movs	r0, #28
   13a48:	b.n	13870 <_dtoa_r+0x690>
   13a4a:	ldrd	r0, r1, [sp, #8]
   13a4e:	cmp	r0, #0
   13a50:	bne.w	1373c <_dtoa_r+0x55c>
   13a54:	ubfx	r2, r1, #0, #20
   13a58:	cmp	r2, #0
   13a5a:	beq.w	13c46 <_dtoa_r+0xa66>
   13a5e:	ldr	r3, [sp, #8]
   13a60:	str	r3, [sp, #32]
   13a62:	b.n	13740 <_dtoa_r+0x560>
   13a64:	movs	r3, #1
   13a66:	str	r3, [sp, #28]
   13a68:	ldr	r3, [sp, #16]
   13a6a:	add	r3, fp
   13a6c:	add.w	r9, r3, #1
   13a70:	cmp.w	r9, #1
   13a74:	mov	ip, r9
   13a76:	str	r3, [sp, #44]	; 0x2c
   13a78:	it	lt
   13a7a:	movlt.w	ip, #1
   13a7e:	movs	r1, #0
   13a80:	cmp.w	ip, #23
   13a84:	str	r1, [r4, #60]	; 0x3c
   13a86:	ble.w	13402 <_dtoa_r+0x222>
   13a8a:	movs	r0, #1
   13a8c:	movs	r2, #4
   13a8e:	lsls	r2, r2, #1
   13a90:	add.w	r3, r2, #20
   13a94:	cmp	r3, ip
   13a96:	mov	r1, r0
   13a98:	add.w	r0, r0, #1
   13a9c:	bls.n	13a8e <_dtoa_r+0x8ae>
   13a9e:	str	r1, [r4, #60]	; 0x3c
   13aa0:	b.n	13402 <_dtoa_r+0x222>
   13aa2:	movs	r3, #1
   13aa4:	str	r3, [sp, #28]
   13aa6:	cmp.w	fp, #0
   13aaa:	ble.n	13b52 <_dtoa_r+0x972>
   13aac:	str.w	fp, [sp, #44]	; 0x2c
   13ab0:	mov	r9, fp
   13ab2:	mov	ip, fp
   13ab4:	b.n	13a7e <_dtoa_r+0x89e>
   13ab6:	movs	r3, #0
   13ab8:	str	r3, [sp, #28]
   13aba:	b.n	13a68 <_dtoa_r+0x888>
   13abc:	movs	r3, #0
   13abe:	str	r3, [sp, #28]
   13ac0:	b.n	13aa6 <_dtoa_r+0x8c6>
   13ac2:	ldr.w	r9, [sp, #44]	; 0x2c
   13ac6:	str	r7, [sp, #16]
   13ac8:	cmp.w	r9, #0
   13acc:	bne.w	13612 <_dtoa_r+0x432>
   13ad0:	mov	r1, sl
   13ad2:	mov	r3, r9
   13ad4:	movs	r2, #5
   13ad6:	mov	r0, r4
   13ad8:	bl	eddc <__multadd>
   13adc:	mov	r1, r0
   13ade:	mov	sl, r0
   13ae0:	mov	r0, r5
   13ae2:	bl	f338 <__mcmp>
   13ae6:	cmp	r0, #0
   13ae8:	ble.w	13612 <_dtoa_r+0x432>
   13aec:	ldr	r3, [sp, #16]
   13aee:	add.w	fp, r3, #1
   13af2:	ldr	r3, [sp, #0]
   13af4:	movs	r2, #49	; 0x31
   13af6:	mov	r8, r3
   13af8:	strb.w	r2, [r3], #1
   13afc:	str	r3, [sp, #0]
   13afe:	mov	r1, sl
   13b00:	mov	r0, r4
   13b02:	bl	edc8 <_Bfree>
   13b06:	add.w	r3, fp, #1
   13b0a:	ldr.w	r9, [sp]
   13b0e:	str	r3, [sp, #16]
   13b10:	str.w	r8, [sp]
   13b14:	cmp	r6, #0
   13b16:	bne.w	13838 <_dtoa_r+0x658>
   13b1a:	b.n	13840 <_dtoa_r+0x660>
   13b1c:	sub.w	sl, r3, sl
   13b20:	b.n	136ae <_dtoa_r+0x4ce>
   13b22:	mov	r1, r6
   13b24:	mov	r2, sl
   13b26:	mov	r0, r4
   13b28:	bl	f188 <__pow5mult>
   13b2c:	mov	r2, r5
   13b2e:	mov	r1, r0
   13b30:	mov	r6, r0
   13b32:	mov	r0, r4
   13b34:	bl	f02c <__multiply>
   13b38:	mov	r1, r5
   13b3a:	mov	r5, r0
   13b3c:	mov	r0, r4
   13b3e:	bl	edc8 <_Bfree>
   13b42:	b.n	1371a <_dtoa_r+0x53a>
   13b44:	movs	r0, #2
   13b46:	vmov.f64	d5, d8
   13b4a:	b.n	13450 <_dtoa_r+0x270>
   13b4c:	rsb	r0, r0, #60	; 0x3c
   13b50:	b.n	13870 <_dtoa_r+0x690>
   13b52:	mov.w	fp, #1
   13b56:	mov	r9, fp
   13b58:	b.n	133fa <_dtoa_r+0x21a>
   13b5a:	bne.n	13b64 <_dtoa_r+0x984>
   13b5c:	ldr	r3, [sp, #4]
   13b5e:	lsls	r3, r3, #31
   13b60:	bmi.w	137fc <_dtoa_r+0x61c>
   13b64:	mov	r9, fp
   13b66:	ldrb.w	r3, [fp, #-1]!
   13b6a:	cmp	r3, #48	; 0x30
   13b6c:	beq.n	13b64 <_dtoa_r+0x984>
   13b6e:	b.n	13820 <_dtoa_r+0x640>
   13b70:	ldr	r3, [sp, #16]
   13b72:	ldr	r2, [sp, #0]
   13b74:	adds	r3, #1
   13b76:	str	r3, [sp, #16]
   13b78:	movs	r3, #49	; 0x31
   13b7a:	strb	r3, [r2, #0]
   13b7c:	b.n	13820 <_dtoa_r+0x640>
   13b7e:	cmp.w	sl, #0
   13b82:	beq.w	13dcc <_dtoa_r+0xbec>
   13b86:	addw	r2, r2, #1075	; 0x433
   13b8a:	ldr	r3, [sp, #24]
   13b8c:	str	r3, [sp, #36]	; 0x24
   13b8e:	add	r3, r2
   13b90:	ldr.w	sl, [sp, #32]
   13b94:	str	r3, [sp, #24]
   13b96:	add	r8, r2
   13b98:	b.n	136c0 <_dtoa_r+0x4e0>
   13b9a:	vmov	s15, r0
   13b9e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   13ba2:	vcvt.f64.s32	d7, s15
   13ba6:	vfma.f64	d5, d6, d7
   13baa:	vmov	r2, s11
   13bae:	vmov	r0, r1, d5
   13bb2:	sub.w	r1, r2, #54525952	; 0x3400000
   13bb6:	vmov	d5, r0, r1
   13bba:	vmov.f64	d7, #20	; 0x40a00000  5.0
   13bbe:	vsub.f64	d7, d6, d7
   13bc2:	vcmpe.f64	d7, d5
   13bc6:	vmrs	APSR_nzcv, fpscr
   13bca:	bgt.w	13e3c <_dtoa_r+0xc5c>
   13bce:	vneg.f64	d5, d5
   13bd2:	vcmpe.f64	d7, d5
   13bd6:	vmrs	APSR_nzcv, fpscr
   13bda:	bpl.w	135d4 <_dtoa_r+0x3f4>
   13bde:	mov.w	sl, #0
   13be2:	mov	r6, sl
   13be4:	b.n	13612 <_dtoa_r+0x432>
   13be6:	beq.w	13dd4 <_dtoa_r+0xbf4>
   13bea:	ldr	r3, [sp, #16]
   13bec:	ldr	r1, [pc, #324]	; (13d34 <_dtoa_r+0xb54>)
   13bee:	negs	r2, r3
   13bf0:	and.w	r0, r2, #15
   13bf4:	add.w	r1, r1, r0, lsl #3
   13bf8:	vldr	d6, [r1]
   13bfc:	asrs	r2, r2, #4
   13bfe:	vmul.f64	d6, d8, d6
   13c02:	beq.w	13e8a <_dtoa_r+0xcaa>
   13c06:	vmov.f64	d7, d6
   13c0a:	ldr	r1, [pc, #300]	; (13d38 <_dtoa_r+0xb58>)
   13c0c:	movs	r6, #0
   13c0e:	movs	r0, #2
   13c10:	lsls	r3, r2, #31
   13c12:	bpl.n	13c20 <_dtoa_r+0xa40>
   13c14:	vldr	d5, [r1]
   13c18:	adds	r0, #1
   13c1a:	movs	r6, #1
   13c1c:	vmul.f64	d7, d7, d5
   13c20:	asrs	r2, r2, #1
   13c22:	add.w	r1, r1, #8
   13c26:	bne.n	13c10 <_dtoa_r+0xa30>
   13c28:	cmp	r6, #0
   13c2a:	vseleq.f64	d6, d6, d7
   13c2e:	b.n	1346e <_dtoa_r+0x28e>
   13c30:	ldr	r3, [sp, #8]
   13c32:	cmp	r3, #0
   13c34:	bne.w	138a6 <_dtoa_r+0x6c6>
   13c38:	ldrd	r0, r1, [sp, #8]
   13c3c:	ubfx	r2, r1, #0, #20
   13c40:	cmp	r2, #0
   13c42:	bne.w	13eb4 <_dtoa_r+0xcd4>
   13c46:	ldr	r2, [pc, #244]	; (13d3c <_dtoa_r+0xb5c>)
   13c48:	ands	r2, r1
   13c4a:	cmp	r2, #0
   13c4c:	beq.w	13e44 <_dtoa_r+0xc64>
   13c50:	ldr	r3, [sp, #24]
   13c52:	adds	r3, #1
   13c54:	str	r3, [sp, #24]
   13c56:	movs	r3, #1
   13c58:	add.w	r8, r8, #1
   13c5c:	str	r3, [sp, #32]
   13c5e:	b.n	13740 <_dtoa_r+0x560>
   13c60:	mov	r1, r5
   13c62:	ldr	r2, [sp, #32]
   13c64:	mov	r0, r4
   13c66:	bl	f188 <__pow5mult>
   13c6a:	mov	r5, r0
   13c6c:	b.n	13724 <_dtoa_r+0x544>
   13c6e:	cmp	r2, #0
   13c70:	ble.n	13c98 <_dtoa_r+0xab8>
   13c72:	mov	r1, r5
   13c74:	movs	r2, #1
   13c76:	mov	r0, r4
   13c78:	str	r3, [sp, #4]
   13c7a:	bl	f248 <__lshift>
   13c7e:	mov	r1, sl
   13c80:	mov	r5, r0
   13c82:	bl	f338 <__mcmp>
   13c86:	cmp	r0, #0
   13c88:	ldr	r3, [sp, #4]
   13c8a:	ble.w	13e50 <_dtoa_r+0xc70>
   13c8e:	cmp	r3, #57	; 0x39
   13c90:	beq.w	13e28 <_dtoa_r+0xc48>
   13c94:	add.w	r3, fp, #49	; 0x31
   13c98:	mov	r9, r7
   13c9a:	strb.w	r3, [r9], #1
   13c9e:	ldr	r3, [sp, #16]
   13ca0:	adds	r3, #1
   13ca2:	mov	r7, r6
   13ca4:	str	r3, [sp, #16]
   13ca6:	mov	r6, r8
   13ca8:	b.n	13820 <_dtoa_r+0x640>
   13caa:	vadd.f64	d8, d8, d8
   13cae:	vcmpe.f64	d8, d6
   13cb2:	vmrs	APSR_nzcv, fpscr
   13cb6:	bgt.n	13cce <_dtoa_r+0xaee>
   13cb8:	vcmp.f64	d8, d6
   13cbc:	vmrs	APSR_nzcv, fpscr
   13cc0:	bne.w	1367c <_dtoa_r+0x49c>
   13cc4:	vmov	r3, s14
   13cc8:	lsls	r0, r3, #31
   13cca:	bpl.w	1367c <_dtoa_r+0x49c>
   13cce:	ldr	r2, [sp, #0]
   13cd0:	b.n	1357c <_dtoa_r+0x39c>
   13cd2:	ldr	r1, [r6, #4]
   13cd4:	mov	r0, r4
   13cd6:	bl	ed7c <_Balloc>
   13cda:	mov	r7, r0
   13cdc:	cmp	r0, #0
   13cde:	beq.w	13e9e <_dtoa_r+0xcbe>
   13ce2:	ldr	r3, [r6, #16]
   13ce4:	adds	r3, #2
   13ce6:	lsls	r2, r3, #2
   13ce8:	add.w	r1, r6, #12
   13cec:	adds	r0, #12
   13cee:	bl	9488 <memcpy>
   13cf2:	mov	r1, r7
   13cf4:	movs	r2, #1
   13cf6:	mov	r0, r4
   13cf8:	bl	f248 <__lshift>
   13cfc:	mov	r8, r0
   13cfe:	b.n	138fe <_dtoa_r+0x71e>
   13d00:	ldr	r3, [sp, #24]
   13d02:	sub.w	r3, r3, r9
   13d06:	str	r3, [sp, #36]	; 0x24
   13d08:	b.n	136c0 <_dtoa_r+0x4e0>
   13d0a:	cmp	r3, #57	; 0x39
   13d0c:	beq.w	13e28 <_dtoa_r+0xc48>
   13d10:	mov	r9, r7
   13d12:	adds	r3, #1
   13d14:	b.n	13c9a <_dtoa_r+0xaba>
   13d16:	ldr	r2, [sp, #16]
   13d18:	adds	r2, #1
   13d1a:	mov	r7, r6
   13d1c:	str	r2, [sp, #16]
   13d1e:	mov	r6, r8
   13d20:	b.n	137e2 <_dtoa_r+0x602>
   13d22:	mov	r1, r5
   13d24:	mov	r0, r4
   13d26:	bl	f188 <__pow5mult>
   13d2a:	mov	r5, r0
   13d2c:	b.n	13724 <_dtoa_r+0x544>
   13d2e:	nop
   13d30:	.word	0x20000910
   13d34:	.word	0x20000328
   13d38:	.word	0x20000300
   13d3c:	.word	0x7ff00000
   13d40:	ldr	r3, [pc, #376]	; (13ebc <_dtoa_r+0xcdc>)
   13d42:	vcvt.s32.f64	s11, d6
   13d46:	add.w	ip, r3, r2, lsl #3
   13d4a:	vldr	d3, [ip, #-8]
   13d4e:	vcvt.f64.s32	d7, s11
   13d52:	vsub.f64	d7, d6, d7
   13d56:	vmov	d6, r0, r1
   13d5a:	vmov	r1, s11
   13d5e:	vmul.f64	d3, d3, d6
   13d62:	ldr	r0, [sp, #0]
   13d64:	adds	r1, #48	; 0x30
   13d66:	cmp	r2, #1
   13d68:	strb.w	r1, [r0], #1
   13d6c:	beq.w	13e76 <_dtoa_r+0xc96>
   13d70:	vmov.f64	d4, #36	; 0x41200000  10.0
   13d74:	ldr	r3, [sp, #0]
   13d76:	adds	r1, r3, r2
   13d78:	vmul.f64	d7, d7, d4
   13d7c:	vcvt.s32.f64	s13, d7
   13d80:	vmov	r3, s13
   13d84:	adds	r3, #48	; 0x30
   13d86:	strb.w	r3, [r0], #1
   13d8a:	cmp	r1, r0
   13d8c:	vcvt.f64.s32	d5, s13
   13d90:	vsub.f64	d7, d7, d5
   13d94:	bne.n	13d78 <_dtoa_r+0xb98>
   13d96:	vmov.f64	d6, #96	; 0x3f000000  0.5
   13d9a:	vadd.f64	d5, d3, d6
   13d9e:	vcmpe.f64	d5, d7
   13da2:	vmrs	APSR_nzcv, fpscr
   13da6:	bmi.w	13570 <_dtoa_r+0x390>
   13daa:	vsub.f64	d6, d6, d3
   13dae:	vcmpe.f64	d6, d7
   13db2:	vmrs	APSR_nzcv, fpscr
   13db6:	ble.w	135d4 <_dtoa_r+0x3f4>
   13dba:	mov	r9, r1
   13dbc:	subs	r1, #1
   13dbe:	ldrb.w	r3, [r9, #-1]
   13dc2:	cmp	r3, #48	; 0x30
   13dc4:	beq.n	13dba <_dtoa_r+0xbda>
   13dc6:	adds	r3, r6, #1
   13dc8:	str	r3, [sp, #16]
   13dca:	b.n	13840 <_dtoa_r+0x660>
   13dcc:	ldr	r2, [sp, #48]	; 0x30
   13dce:	rsb	r2, r2, #54	; 0x36
   13dd2:	b.n	13b8a <_dtoa_r+0x9aa>
   13dd4:	movs	r0, #2
   13dd6:	vmov.f64	d6, d8
   13dda:	b.w	1346e <_dtoa_r+0x28e>
   13dde:	cmp.w	r9, #0
   13de2:	beq.w	13b9a <_dtoa_r+0x9ba>
   13de6:	ldr	r2, [sp, #44]	; 0x2c
   13de8:	cmp	r2, #0
   13dea:	ble.w	135d4 <_dtoa_r+0x3f4>
   13dee:	vmov.f64	d4, #36	; 0x41200000  10.0
   13df2:	vmul.f64	d6, d6, d4
   13df6:	adds	r0, #1
   13df8:	vmov	s15, r0
   13dfc:	ldr	r3, [sp, #16]
   13dfe:	vcvt.f64.s32	d5, s15
   13e02:	vmov.f64	d7, #28	; 0x40e00000  7.0
   13e06:	vfma.f64	d7, d6, d5
   13e0a:	vmov	ip, s15
   13e0e:	vmov	r0, r1, d7
   13e12:	subs	r6, r3, #1
   13e14:	sub.w	r1, ip, #54525952	; 0x3400000
   13e18:	b.w	134aa <_dtoa_r+0x2ca>
   13e1c:	ldr	r3, [sp, #16]
   13e1e:	adds	r3, #1
   13e20:	str	r3, [sp, #16]
   13e22:	movs	r3, #49	; 0x31
   13e24:	b.w	1358a <_dtoa_r+0x3aa>
   13e28:	ldr	r3, [sp, #16]
   13e2a:	mov	fp, r7
   13e2c:	adds	r3, #1
   13e2e:	str	r3, [sp, #16]
   13e30:	movs	r3, #57	; 0x39
   13e32:	mov	r7, r6
   13e34:	strb.w	r3, [fp], #1
   13e38:	mov	r6, r8
   13e3a:	b.n	13800 <_dtoa_r+0x620>
   13e3c:	mov.w	sl, #0
   13e40:	mov	r6, sl
   13e42:	b.n	13aec <_dtoa_r+0x90c>
   13e44:	str	r2, [sp, #32]
   13e46:	b.n	13740 <_dtoa_r+0x560>
   13e48:	adds	r3, r6, #1
   13e4a:	str	r3, [sp, #16]
   13e4c:	mov	r9, r1
   13e4e:	b.n	13840 <_dtoa_r+0x660>
   13e50:	bne.w	13c98 <_dtoa_r+0xab8>
   13e54:	lsls	r2, r3, #31
   13e56:	bpl.w	13c98 <_dtoa_r+0xab8>
   13e5a:	b.n	13c8e <_dtoa_r+0xaae>
   13e5c:	cmp	r3, #57	; 0x39
   13e5e:	beq.n	13e28 <_dtoa_r+0xc48>
   13e60:	cmp.w	r9, #0
   13e64:	bgt.w	13c94 <_dtoa_r+0xab4>
   13e68:	b.n	13c98 <_dtoa_r+0xab8>
   13e6a:	ldr	r3, [sp, #4]
   13e6c:	cmp	r3, #2
   13e6e:	bgt.w	13ac2 <_dtoa_r+0x8e2>
   13e72:	str	r7, [sp, #16]
   13e74:	b.n	139ec <_dtoa_r+0x80c>
   13e76:	mov	r1, r0
   13e78:	b.n	13d96 <_dtoa_r+0xbb6>
   13e7a:	ldr	r3, [sp, #4]
   13e7c:	cmp	r3, #2
   13e7e:	bgt.w	13ac2 <_dtoa_r+0x8e2>
   13e82:	ldr.w	r9, [sp, #44]	; 0x2c
   13e86:	str	r7, [sp, #16]
   13e88:	b.n	138e2 <_dtoa_r+0x702>
   13e8a:	movs	r0, #2
   13e8c:	b.w	1346e <_dtoa_r+0x28e>
   13e90:	ldr	r3, [pc, #44]	; (13ec0 <_dtoa_r+0xce0>)
   13e92:	ldr	r0, [pc, #48]	; (13ec4 <_dtoa_r+0xce4>)
   13e94:	movs	r2, #0
   13e96:	movw	r1, #431	; 0x1af
   13e9a:	bl	13000 <__assert_func>
   13e9e:	ldr	r3, [pc, #32]	; (13ec0 <_dtoa_r+0xce0>)
   13ea0:	ldr	r0, [pc, #32]	; (13ec4 <_dtoa_r+0xce4>)
   13ea2:	mov	r2, r7
   13ea4:	movw	r1, #751	; 0x2ef
   13ea8:	bl	13000 <__assert_func>
   13eac:	ldr	r3, [pc, #24]	; (13ec8 <_dtoa_r+0xce8>)
   13eae:	str	r3, [sp, #0]
   13eb0:	b.w	13258 <_dtoa_r+0x78>
   13eb4:	ldr	r3, [sp, #8]
   13eb6:	str	r3, [sp, #32]
   13eb8:	b.n	138aa <_dtoa_r+0x6ca>
   13eba:	nop
   13ebc:	.word	0x20000328
   13ec0:	.word	0x20000624
   13ec4:	.word	0x20000914
   13ec8:	.word	0x20000904

00013ecc <_strtoul_l.constprop.0>:
   13ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13ed0:	mov	r7, r0
   13ed2:	ldr	r0, [pc, #304]	; (14004 <_strtoul_l.constprop.0+0x138>)
   13ed4:	mov	r6, r1
   13ed6:	mov	r5, r6
   13ed8:	ldrb.w	lr, [r6], #1
   13edc:	ldrb.w	ip, [r0, lr]
   13ee0:	ands.w	ip, ip, #8
   13ee4:	bne.n	13ed6 <_strtoul_l.constprop.0+0xa>
   13ee6:	cmp.w	lr, #45	; 0x2d
   13eea:	beq.n	13fa2 <_strtoul_l.constprop.0+0xd6>
   13eec:	cmp.w	lr, #43	; 0x2b
   13ef0:	ittte	eq
   13ef2:	ldrbeq.w	lr, [r6]
   13ef6:	moveq	r4, ip
   13ef8:	addeq	r6, r5, #2
   13efa:	movne	r4, ip
   13efc:	cbz	r3, 13f16 <_strtoul_l.constprop.0+0x4a>
   13efe:	cmp	r3, #16
   13f00:	beq.n	13fac <_strtoul_l.constprop.0+0xe0>
   13f02:	mov.w	r8, #4294967295
   13f06:	udiv	r8, r8, r3
   13f0a:	mul.w	sl, r3, r8
   13f0e:	mvn.w	sl, sl
   13f12:	mov	r9, r3
   13f14:	b.n	13f28 <_strtoul_l.constprop.0+0x5c>
   13f16:	cmp.w	lr, #48	; 0x30
   13f1a:	beq.n	13fd2 <_strtoul_l.constprop.0+0x106>
   13f1c:	movs	r3, #10
   13f1e:	ldr.w	r8, [pc, #232]	; 14008 <_strtoul_l.constprop.0+0x13c>
   13f22:	mov.w	sl, #5
   13f26:	mov	r9, r3
   13f28:	movs	r5, #0
   13f2a:	mov	r0, r5
   13f2c:	b.n	13f3a <_strtoul_l.constprop.0+0x6e>
   13f2e:	beq.n	13f8a <_strtoul_l.constprop.0+0xbe>
   13f30:	mla	r0, r9, r0, ip
   13f34:	movs	r5, #1
   13f36:	ldrb.w	lr, [r6], #1
   13f3a:	sub.w	ip, lr, #48	; 0x30
   13f3e:	cmp.w	ip, #9
   13f42:	bls.n	13f52 <_strtoul_l.constprop.0+0x86>
   13f44:	sub.w	ip, lr, #65	; 0x41
   13f48:	cmp.w	ip, #25
   13f4c:	bhi.n	13f66 <_strtoul_l.constprop.0+0x9a>
   13f4e:	sub.w	ip, lr, #55	; 0x37
   13f52:	cmp	r3, ip
   13f54:	ble.n	13f78 <_strtoul_l.constprop.0+0xac>
   13f56:	cmp.w	r5, #4294967295
   13f5a:	beq.n	13f36 <_strtoul_l.constprop.0+0x6a>
   13f5c:	cmp	r0, r8
   13f5e:	bls.n	13f2e <_strtoul_l.constprop.0+0x62>
   13f60:	mov.w	r5, #4294967295
   13f64:	b.n	13f36 <_strtoul_l.constprop.0+0x6a>
   13f66:	sub.w	ip, lr, #97	; 0x61
   13f6a:	cmp.w	ip, #25
   13f6e:	bhi.n	13f78 <_strtoul_l.constprop.0+0xac>
   13f70:	sub.w	ip, lr, #87	; 0x57
   13f74:	cmp	r3, ip
   13f76:	bgt.n	13f56 <_strtoul_l.constprop.0+0x8a>
   13f78:	adds	r3, r5, #1
   13f7a:	beq.n	13f94 <_strtoul_l.constprop.0+0xc8>
   13f7c:	cbz	r4, 13f80 <_strtoul_l.constprop.0+0xb4>
   13f7e:	negs	r0, r0
   13f80:	cbz	r2, 13f86 <_strtoul_l.constprop.0+0xba>
   13f82:	cbnz	r5, 13f9e <_strtoul_l.constprop.0+0xd2>
   13f84:	str	r1, [r2, #0]
   13f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f8a:	cmp	ip, sl
   13f8c:	ble.n	13f30 <_strtoul_l.constprop.0+0x64>
   13f8e:	mov.w	r5, #4294967295
   13f92:	b.n	13f36 <_strtoul_l.constprop.0+0x6a>
   13f94:	movs	r3, #34	; 0x22
   13f96:	str	r3, [r7, #0]
   13f98:	mov	r0, r5
   13f9a:	cmp	r2, #0
   13f9c:	beq.n	13f86 <_strtoul_l.constprop.0+0xba>
   13f9e:	subs	r1, r6, #1
   13fa0:	b.n	13f84 <_strtoul_l.constprop.0+0xb8>
   13fa2:	ldrb.w	lr, [r6]
   13fa6:	movs	r4, #1
   13fa8:	adds	r6, r5, #2
   13faa:	b.n	13efc <_strtoul_l.constprop.0+0x30>
   13fac:	cmp.w	lr, #48	; 0x30
   13fb0:	bne.n	13ff6 <_strtoul_l.constprop.0+0x12a>
   13fb2:	ldrb	r0, [r6, #0]
   13fb4:	and.w	r0, r0, #223	; 0xdf
   13fb8:	cmp	r0, #88	; 0x58
   13fba:	bne.n	13fea <_strtoul_l.constprop.0+0x11e>
   13fbc:	mov.w	r9, #16
   13fc0:	ldrb.w	lr, [r6, #1]
   13fc4:	mov.w	sl, #15
   13fc8:	adds	r6, #2
   13fca:	mvn.w	r8, #4026531840	; 0xf0000000
   13fce:	mov	r3, r9
   13fd0:	b.n	13f28 <_strtoul_l.constprop.0+0x5c>
   13fd2:	ldrb	r3, [r6, #0]
   13fd4:	and.w	r3, r3, #223	; 0xdf
   13fd8:	cmp	r3, #88	; 0x58
   13fda:	beq.n	13fbc <_strtoul_l.constprop.0+0xf0>
   13fdc:	movs	r3, #8
   13fde:	mov.w	sl, #7
   13fe2:	mvn.w	r8, #3758096384	; 0xe0000000
   13fe6:	mov	r9, r3
   13fe8:	b.n	13f28 <_strtoul_l.constprop.0+0x5c>
   13fea:	mov	r9, r3
   13fec:	mvn.w	r8, #4026531840	; 0xf0000000
   13ff0:	mov.w	sl, #15
   13ff4:	b.n	13f28 <_strtoul_l.constprop.0+0x5c>
   13ff6:	mov.w	sl, #15
   13ffa:	mvn.w	r8, #4026531840	; 0xf0000000
   13ffe:	mov	r9, r3
   14000:	b.n	13f28 <_strtoul_l.constprop.0+0x5c>
   14002:	nop
   14004:	.word	0x20000801
   14008:	.word	0x19999999

0001400c <_strtoul_r>:
   1400c:	b.w	13ecc <_strtoul_l.constprop.0>

00014010 <_strtoll_l.constprop.0>:
   14010:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14014:	sub	sp, #20
   14016:	mov	r7, r3
   14018:	ldr	r3, [pc, #348]	; (14178 <_strtoll_l.constprop.0+0x168>)
   1401a:	str	r0, [sp, #12]
   1401c:	mov	sl, r1
   1401e:	str	r2, [sp, #0]
   14020:	mov	r5, r1
   14022:	mov	r2, r5
   14024:	ldrb.w	r4, [r5], #1
   14028:	ldrb	r6, [r3, r4]
   1402a:	ands.w	r6, r6, #8
   1402e:	bne.n	14022 <_strtoll_l.constprop.0+0x12>
   14030:	cmp	r4, #45	; 0x2d
   14032:	beq.n	14120 <_strtoll_l.constprop.0+0x110>
   14034:	cmp	r4, #43	; 0x2b
   14036:	ittet	eq
   14038:	ldrbeq	r4, [r5, #0]
   1403a:	streq	r6, [sp, #8]
   1403c:	strne	r6, [sp, #8]
   1403e:	addeq	r5, r2, #2
   14040:	mov.w	r6, #4294967295
   14044:	mvn.w	fp, #2147483648	; 0x80000000
   14048:	cbz	r7, 14056 <_strtoll_l.constprop.0+0x46>
   1404a:	cmp	r7, #16
   1404c:	beq.n	1412e <_strtoll_l.constprop.0+0x11e>
   1404e:	mov	r8, r7
   14050:	mov.w	r9, r7, asr #31
   14054:	b.n	14062 <_strtoll_l.constprop.0+0x52>
   14056:	cmp	r4, #48	; 0x30
   14058:	beq.n	14144 <_strtoll_l.constprop.0+0x134>
   1405a:	mov.w	r8, #10
   1405e:	mov	r9, r7
   14060:	mov	r7, r8
   14062:	mov	r2, r8
   14064:	mov	r3, r9
   14066:	mov	r0, r6
   14068:	mov	r1, fp
   1406a:	bl	b7bc <__aeabi_uldivmod>
   1406e:	movs	r3, #0
   14070:	str	r2, [sp, #4]
   14072:	mov	ip, r0
   14074:	mov	r2, r1
   14076:	mov	r0, r3
   14078:	mov	r1, r3
   1407a:	b.n	140a0 <_strtoll_l.constprop.0+0x90>
   1407c:	cmp	r2, r1
   1407e:	it	eq
   14080:	cmpeq	ip, r0
   14082:	beq.n	14100 <_strtoll_l.constprop.0+0xf0>
   14084:	mul.w	r3, r0, r9
   14088:	mla	r3, r8, r1, r3
   1408c:	umull	r0, r1, r0, r8
   14090:	add	r3, r1
   14092:	adds.w	r0, lr, r0
   14096:	adc.w	r1, r3, lr, asr #31
   1409a:	movs	r3, #1
   1409c:	ldrb.w	r4, [r5], #1
   140a0:	sub.w	lr, r4, #48	; 0x30
   140a4:	cmp.w	lr, #9
   140a8:	bls.n	140b8 <_strtoll_l.constprop.0+0xa8>
   140aa:	sub.w	lr, r4, #65	; 0x41
   140ae:	cmp.w	lr, #25
   140b2:	bhi.n	140ce <_strtoll_l.constprop.0+0xbe>
   140b4:	sub.w	lr, r4, #55	; 0x37
   140b8:	cmp	r7, lr
   140ba:	ble.n	140e0 <_strtoll_l.constprop.0+0xd0>
   140bc:	adds	r4, r3, #1
   140be:	beq.n	1409c <_strtoll_l.constprop.0+0x8c>
   140c0:	cmp	ip, r0
   140c2:	sbcs.w	r3, r2, r1
   140c6:	bcs.n	1407c <_strtoll_l.constprop.0+0x6c>
   140c8:	mov.w	r3, #4294967295
   140cc:	b.n	1409c <_strtoll_l.constprop.0+0x8c>
   140ce:	sub.w	lr, r4, #97	; 0x61
   140d2:	cmp.w	lr, #25
   140d6:	bhi.n	140e0 <_strtoll_l.constprop.0+0xd0>
   140d8:	sub.w	lr, r4, #87	; 0x57
   140dc:	cmp	r7, lr
   140de:	bgt.n	140bc <_strtoll_l.constprop.0+0xac>
   140e0:	adds	r2, r3, #1
   140e2:	beq.n	1410c <_strtoll_l.constprop.0+0xfc>
   140e4:	ldr	r2, [sp, #8]
   140e6:	cbz	r2, 140ee <_strtoll_l.constprop.0+0xde>
   140e8:	negs	r0, r0
   140ea:	sbc.w	r1, r1, r1, lsl #1
   140ee:	ldr	r2, [sp, #0]
   140f0:	cbz	r2, 140fa <_strtoll_l.constprop.0+0xea>
   140f2:	cbnz	r3, 1415e <_strtoll_l.constprop.0+0x14e>
   140f4:	ldr	r3, [sp, #0]
   140f6:	str.w	sl, [r3]
   140fa:	add	sp, #20
   140fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	ldr	r3, [sp, #4]
   14102:	cmp	r3, lr
   14104:	bge.n	14084 <_strtoll_l.constprop.0+0x74>
   14106:	mov.w	r3, #4294967295
   1410a:	b.n	1409c <_strtoll_l.constprop.0+0x8c>
   1410c:	ldr	r2, [sp, #12]
   1410e:	movs	r3, #34	; 0x22
   14110:	str	r3, [r2, #0]
   14112:	ldr	r3, [sp, #0]
   14114:	cbz	r3, 14164 <_strtoll_l.constprop.0+0x154>
   14116:	add.w	sl, r5, #4294967295
   1411a:	mov	r0, r6
   1411c:	mov	r1, fp
   1411e:	b.n	140f4 <_strtoll_l.constprop.0+0xe4>
   14120:	movs	r3, #1
   14122:	ldrb	r4, [r5, #0]
   14124:	str	r3, [sp, #8]
   14126:	adds	r5, r2, #2
   14128:	mov.w	fp, #2147483648	; 0x80000000
   1412c:	b.n	14048 <_strtoll_l.constprop.0+0x38>
   1412e:	cmp	r4, #48	; 0x30
   14130:	bne.n	1413c <_strtoll_l.constprop.0+0x12c>
   14132:	ldrb	r3, [r5, #0]
   14134:	and.w	r3, r3, #223	; 0xdf
   14138:	cmp	r3, #88	; 0x58
   1413a:	beq.n	1414e <_strtoll_l.constprop.0+0x13e>
   1413c:	mov	r8, r7
   1413e:	mov.w	r9, #0
   14142:	b.n	14062 <_strtoll_l.constprop.0+0x52>
   14144:	ldrb	r3, [r5, #0]
   14146:	and.w	r3, r3, #223	; 0xdf
   1414a:	cmp	r3, #88	; 0x58
   1414c:	bne.n	1416e <_strtoll_l.constprop.0+0x15e>
   1414e:	mov.w	r8, #16
   14152:	ldrb	r4, [r5, #1]
   14154:	mov.w	r9, #0
   14158:	adds	r5, #2
   1415a:	mov	r7, r8
   1415c:	b.n	14062 <_strtoll_l.constprop.0+0x52>
   1415e:	mov	r6, r0
   14160:	mov	fp, r1
   14162:	b.n	14116 <_strtoll_l.constprop.0+0x106>
   14164:	mov	r0, r6
   14166:	mov	r1, fp
   14168:	add	sp, #20
   1416a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1416e:	mov.w	r8, #8
   14172:	mov	r9, r7
   14174:	mov	r7, r8
   14176:	b.n	14062 <_strtoll_l.constprop.0+0x52>
   14178:	.word	0x20000801

0001417c <_strtoll_r>:
   1417c:	b.w	14010 <_strtoll_l.constprop.0>

00014180 <_strtoull_l.constprop.0>:
   14180:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14184:	sub	sp, #20
   14186:	mov	fp, r1
   14188:	str	r2, [sp, #4]
   1418a:	ldr	r2, [pc, #392]	; (14314 <_strtoull_l.constprop.0+0x194>)
   1418c:	str	r0, [sp, #12]
   1418e:	mov	r6, r3
   14190:	mov	r5, r1
   14192:	mov	r1, r5
   14194:	ldrb.w	r4, [r5], #1
   14198:	ldrb	r3, [r2, r4]
   1419a:	ands.w	r3, r3, #8
   1419e:	bne.n	14192 <_strtoull_l.constprop.0+0x12>
   141a0:	cmp	r4, #45	; 0x2d
   141a2:	beq.w	142aa <_strtoull_l.constprop.0+0x12a>
   141a6:	cmp	r4, #43	; 0x2b
   141a8:	ittte	eq
   141aa:	ldrbeq	r4, [r5, #0]
   141ac:	streq	r3, [sp, #8]
   141ae:	addeq	r5, r1, #2
   141b0:	strne	r3, [sp, #8]
   141b2:	cbz	r6, 141e4 <_strtoull_l.constprop.0+0x64>
   141b4:	cmp	r6, #16
   141b6:	beq.n	142b4 <_strtoull_l.constprop.0+0x134>
   141b8:	mov.w	sl, r6, asr #31
   141bc:	mov	r2, r6
   141be:	mov	r3, sl
   141c0:	mov.w	r0, #4294967295
   141c4:	mov.w	r1, #4294967295
   141c8:	bl	b7bc <__aeabi_uldivmod>
   141cc:	mov	r2, r6
   141ce:	mov	r7, r0
   141d0:	mov	r8, r1
   141d2:	mov	r3, sl
   141d4:	mov.w	r0, #4294967295
   141d8:	mov.w	r1, #4294967295
   141dc:	mov	r9, r6
   141de:	bl	b7bc <__aeabi_uldivmod>
   141e2:	b.n	141fa <_strtoull_l.constprop.0+0x7a>
   141e4:	cmp	r4, #48	; 0x30
   141e6:	beq.n	142dc <_strtoull_l.constprop.0+0x15c>
   141e8:	mov.w	r9, #10
   141ec:	ldr.w	r8, [pc, #296]	; 14318 <_strtoull_l.constprop.0+0x198>
   141f0:	mov	sl, r6
   141f2:	movs	r2, #5
   141f4:	mov.w	r7, #2576980377	; 0x99999999
   141f8:	mov	r6, r9
   141fa:	mov.w	ip, #0
   141fe:	mov	r0, ip
   14200:	mov	r1, ip
   14202:	b.n	14228 <_strtoull_l.constprop.0+0xa8>
   14204:	cmp	r1, r8
   14206:	it	eq
   14208:	cmpeq	r0, r7
   1420a:	beq.n	1428a <_strtoull_l.constprop.0+0x10a>
   1420c:	mul.w	r4, r0, sl
   14210:	mla	r1, r9, r1, r4
   14214:	umull	r0, r4, r0, r9
   14218:	add	r1, r4
   1421a:	adds	r0, r3, r0
   1421c:	adc.w	r1, r1, r3, asr #31
   14220:	mov.w	ip, #1
   14224:	ldrb.w	r4, [r5], #1
   14228:	sub.w	r3, r4, #48	; 0x30
   1422c:	cmp	r3, #9
   1422e:	bls.n	1423c <_strtoull_l.constprop.0+0xbc>
   14230:	sub.w	r3, r4, #65	; 0x41
   14234:	cmp	r3, #25
   14236:	bhi.n	14254 <_strtoull_l.constprop.0+0xd4>
   14238:	sub.w	r3, r4, #55	; 0x37
   1423c:	cmp	r6, r3
   1423e:	ble.n	14264 <_strtoull_l.constprop.0+0xe4>
   14240:	cmp.w	ip, #4294967295
   14244:	beq.n	14224 <_strtoull_l.constprop.0+0xa4>
   14246:	cmp	r7, r0
   14248:	sbcs.w	r4, r8, r1
   1424c:	bcs.n	14204 <_strtoull_l.constprop.0+0x84>
   1424e:	mov.w	ip, #4294967295
   14252:	b.n	14224 <_strtoull_l.constprop.0+0xa4>
   14254:	sub.w	r3, r4, #97	; 0x61
   14258:	cmp	r3, #25
   1425a:	bhi.n	14264 <_strtoull_l.constprop.0+0xe4>
   1425c:	sub.w	r3, r4, #87	; 0x57
   14260:	cmp	r6, r3
   14262:	bgt.n	14240 <_strtoull_l.constprop.0+0xc0>
   14264:	cmp.w	ip, #4294967295
   14268:	beq.n	14294 <_strtoull_l.constprop.0+0x114>
   1426a:	ldr	r3, [sp, #8]
   1426c:	cbz	r3, 14274 <_strtoull_l.constprop.0+0xf4>
   1426e:	negs	r0, r0
   14270:	sbc.w	r1, r1, r1, lsl #1
   14274:	ldr	r3, [sp, #4]
   14276:	cbz	r3, 14284 <_strtoull_l.constprop.0+0x104>
   14278:	cmp.w	ip, #0
   1427c:	bne.n	142a4 <_strtoull_l.constprop.0+0x124>
   1427e:	ldr	r3, [sp, #4]
   14280:	str.w	fp, [r3]
   14284:	add	sp, #20
   14286:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1428a:	cmp	r3, r2
   1428c:	ble.n	1420c <_strtoull_l.constprop.0+0x8c>
   1428e:	mov.w	ip, #4294967295
   14292:	b.n	14224 <_strtoull_l.constprop.0+0xa4>
   14294:	ldr	r2, [sp, #12]
   14296:	movs	r3, #34	; 0x22
   14298:	str	r3, [r2, #0]
   1429a:	ldr	r3, [sp, #4]
   1429c:	mov	r0, ip
   1429e:	mov	r1, ip
   142a0:	cmp	r3, #0
   142a2:	beq.n	14284 <_strtoull_l.constprop.0+0x104>
   142a4:	add.w	fp, r5, #4294967295
   142a8:	b.n	1427e <_strtoull_l.constprop.0+0xfe>
   142aa:	movs	r3, #1
   142ac:	ldrb	r4, [r5, #0]
   142ae:	str	r3, [sp, #8]
   142b0:	adds	r5, r1, #2
   142b2:	b.n	141b2 <_strtoull_l.constprop.0+0x32>
   142b4:	cmp	r4, #48	; 0x30
   142b6:	bne.n	14300 <_strtoull_l.constprop.0+0x180>
   142b8:	ldrb	r3, [r5, #0]
   142ba:	and.w	r3, r3, #223	; 0xdf
   142be:	cmp	r3, #88	; 0x58
   142c0:	bne.n	142fa <_strtoull_l.constprop.0+0x17a>
   142c2:	mov.w	r9, #16
   142c6:	ldrb	r4, [r5, #1]
   142c8:	movs	r2, #15
   142ca:	adds	r5, #2
   142cc:	mov.w	r7, #4294967295
   142d0:	mvn.w	r8, #4026531840	; 0xf0000000
   142d4:	mov.w	sl, #0
   142d8:	mov	r6, r9
   142da:	b.n	141fa <_strtoull_l.constprop.0+0x7a>
   142dc:	ldrb	r3, [r5, #0]
   142de:	and.w	r3, r3, #223	; 0xdf
   142e2:	cmp	r3, #88	; 0x58
   142e4:	beq.n	142c2 <_strtoull_l.constprop.0+0x142>
   142e6:	mov.w	r9, #8
   142ea:	mov	sl, r6
   142ec:	movs	r2, #7
   142ee:	mov.w	r7, #4294967295
   142f2:	mvn.w	r8, #3758096384	; 0xe0000000
   142f6:	mov	r6, r9
   142f8:	b.n	141fa <_strtoull_l.constprop.0+0x7a>
   142fa:	mov.w	sl, #0
   142fe:	b.n	141bc <_strtoull_l.constprop.0+0x3c>
   14300:	movs	r2, #15
   14302:	mov.w	r7, #4294967295
   14306:	mvn.w	r8, #4026531840	; 0xf0000000
   1430a:	mov	r9, r6
   1430c:	mov.w	sl, #0
   14310:	b.n	141fa <_strtoull_l.constprop.0+0x7a>
   14312:	nop
   14314:	.word	0x20000801
   14318:	.word	0x19999999

0001431c <_strtoull_r>:
   1431c:	b.w	14180 <_strtoull_l.constprop.0>

00014320 <_mbrtowc_r>:
   14320:	push	{r4, r5, r6, lr}
   14322:	sub	sp, #8
   14324:	mov	r4, r0
   14326:	ldr	r5, [sp, #24]
   14328:	cbz	r5, 14340 <_mbrtowc_r+0x20>
   1432a:	cbz	r2, 14348 <_mbrtowc_r+0x28>
   1432c:	ldr	r0, [pc, #60]	; (1436c <_mbrtowc_r+0x4c>)
   1432e:	str	r5, [sp, #0]
   14330:	ldr.w	r6, [r0, #228]	; 0xe4
   14334:	mov	r0, r4
   14336:	blx	r6
   14338:	adds	r3, r0, #1
   1433a:	beq.n	1435e <_mbrtowc_r+0x3e>
   1433c:	add	sp, #8
   1433e:	pop	{r4, r5, r6, pc}
   14340:	add.w	r5, r0, #244	; 0xf4
   14344:	cmp	r2, #0
   14346:	bne.n	1432c <_mbrtowc_r+0xc>
   14348:	ldr	r3, [pc, #32]	; (1436c <_mbrtowc_r+0x4c>)
   1434a:	str	r5, [sp, #0]
   1434c:	ldr.w	r6, [r3, #228]	; 0xe4
   14350:	mov	r1, r2
   14352:	movs	r3, #1
   14354:	ldr	r2, [pc, #24]	; (14370 <_mbrtowc_r+0x50>)
   14356:	mov	r0, r4
   14358:	blx	r6
   1435a:	adds	r3, r0, #1
   1435c:	bne.n	1433c <_mbrtowc_r+0x1c>
   1435e:	movs	r2, #0
   14360:	movs	r3, #138	; 0x8a
   14362:	str	r2, [r5, #0]
   14364:	str	r3, [r4, #0]
   14366:	add	sp, #8
   14368:	pop	{r4, r5, r6, pc}
   1436a:	nop
   1436c:	.word	0x20008964
   14370:	.word	0x200005f0

00014374 <_wcrtomb_r>:
   14374:	push	{r4, r5, r6, lr}
   14376:	mov	r5, r0
   14378:	sub	sp, #16
   1437a:	cbz	r3, 14394 <_wcrtomb_r+0x20>
   1437c:	mov	r4, r3
   1437e:	cbz	r1, 1439c <_wcrtomb_r+0x28>
   14380:	ldr	r3, [pc, #56]	; (143bc <_wcrtomb_r+0x48>)
   14382:	mov	r0, r5
   14384:	ldr.w	r6, [r3, #224]	; 0xe0
   14388:	mov	r3, r4
   1438a:	blx	r6
   1438c:	adds	r3, r0, #1
   1438e:	beq.n	143b0 <_wcrtomb_r+0x3c>
   14390:	add	sp, #16
   14392:	pop	{r4, r5, r6, pc}
   14394:	add.w	r4, r0, #260	; 0x104
   14398:	cmp	r1, #0
   1439a:	bne.n	14380 <_wcrtomb_r+0xc>
   1439c:	ldr	r2, [pc, #28]	; (143bc <_wcrtomb_r+0x48>)
   1439e:	mov	r3, r4
   143a0:	ldr.w	r6, [r2, #224]	; 0xe0
   143a4:	mov	r0, r5
   143a6:	mov	r2, r1
   143a8:	add	r1, sp, #4
   143aa:	blx	r6
   143ac:	adds	r3, r0, #1
   143ae:	bne.n	14390 <_wcrtomb_r+0x1c>
   143b0:	movs	r2, #0
   143b2:	movs	r3, #138	; 0x8a
   143b4:	str	r2, [r4, #0]
   143b6:	str	r3, [r5, #0]
   143b8:	add	sp, #16
   143ba:	pop	{r4, r5, r6, pc}
   143bc:	.word	0x20008964

000143c0 <_wcsrtombs_r>:
   143c0:	push	{r4, lr}
   143c2:	sub	sp, #8
   143c4:	ldr	r4, [sp, #16]
   143c6:	strd	r3, r4, [sp]
   143ca:	mov.w	r3, #4294967295
   143ce:	bl	15f10 <_wcsnrtombs_r>
   143d2:	add	sp, #8
   143d4:	pop	{r4, pc}
   143d6:	nop

000143d8 <iswspace>:
   143d8:	movs	r1, #0
   143da:	b.w	143e0 <iswspace_l>
   143de:	nop

000143e0 <iswspace_l>:
   143e0:	push	{r4, lr}
   143e2:	bl	1453c <_jp2uc_l>
   143e6:	mov	r4, r0
   143e8:	bl	15f34 <category>
   143ec:	sub.w	r3, r0, #26
   143f0:	uxtb	r3, r3
   143f2:	cmp	r3, #2
   143f4:	bls.n	14404 <iswspace_l+0x24>
   143f6:	sub.w	r0, r4, #9
   143fa:	cmp	r0, #4
   143fc:	ite	hi
   143fe:	movhi	r0, #0
   14400:	movls	r0, #1
   14402:	pop	{r4, pc}
   14404:	movs	r0, #1
   14406:	pop	{r4, pc}

00014408 <__jp2uc>:
   14408:	cmp	r1, #2
   1440a:	beq.n	14472 <__jp2uc+0x6a>
   1440c:	cmp	r1, #3
   1440e:	ubfx	r3, r0, #8, #8
   14412:	ittte	ne
   14414:	subne.w	r2, r0, #128	; 0x80
   14418:	eorne.w	r3, r3, #128	; 0x80
   1441c:	uxtbne	r2, r2
   1441e:	uxtbeq	r2, r0
   14420:	add.w	r1, r3, #80	; 0x50
   14424:	uxtb	r1, r1
   14426:	cmp	r1, #31
   14428:	bhi.n	14438 <__jp2uc+0x30>
   1442a:	movw	r1, #53203	; 0xcfd3
   1442e:	cmp	r0, r1
   14430:	bls.n	14506 <__jp2uc+0xfe>
   14432:	mov.w	r0, #4294967295
   14436:	bx	lr
   14438:	add.w	r1, r3, #48	; 0x30
   1443c:	uxtb	r1, r1
   1443e:	cmp	r1, #36	; 0x24
   14440:	bhi.n	14460 <__jp2uc+0x58>
   14442:	movw	r1, #62630	; 0xf4a6
   14446:	cmp	r0, r1
   14448:	bhi.n	14432 <__jp2uc+0x2a>
   1444a:	subs	r3, #208	; 0xd0
   1444c:	rsb	r3, r3, r3, lsl #7
   14450:	sub.w	r0, r2, #161	; 0xa1
   14454:	add.w	r0, r0, r3, lsl #1
   14458:	ldr	r2, [pc, #192]	; (1451c <__jp2uc+0x114>)
   1445a:	ldrh.w	r0, [r2, r0, lsl #1]
   1445e:	bx	lr
   14460:	subs	r3, #161	; 0xa1
   14462:	cmp	r3, #7
   14464:	bhi.n	14432 <__jp2uc+0x2a>
   14466:	tbb	[pc, r3]
   1446a:	.short	0x3e48
   1446c:	.word	0x25292e34
   14470:	.short	0x1921
   14472:	uxtb	r2, r0
   14474:	cmp	r2, #158	; 0x9e
   14476:	ubfx	r1, r0, #8, #8
   1447a:	bls.n	14494 <__jp2uc+0x8c>
   1447c:	adds	r2, #35	; 0x23
   1447e:	uxtb	r2, r2
   14480:	movs	r3, #128	; 0x80
   14482:	cmp	r1, #159	; 0x9f
   14484:	ite	ls
   14486:	subls	r1, #112	; 0x70
   14488:	addhi	r1, #80	; 0x50
   1448a:	add.w	r3, r3, r1, lsl #1
   1448e:	and.w	r3, r3, #255	; 0xff
   14492:	b.n	14420 <__jp2uc+0x18>
   14494:	subs	r2, #126	; 0x7e
   14496:	uxtb	r2, r2
   14498:	movs	r3, #127	; 0x7f
   1449a:	b.n	14482 <__jp2uc+0x7a>
   1449c:	cmp	r2, #192	; 0xc0
   1449e:	bhi.n	14432 <__jp2uc+0x2a>
   144a0:	ldr	r3, [pc, #124]	; (14520 <__jp2uc+0x118>)
   144a2:	sub.w	r0, r2, #161	; 0xa1
   144a6:	ldrh.w	r0, [r3, r0, lsl #1]
   144aa:	bx	lr
   144ac:	cmp	r2, #241	; 0xf1
   144ae:	bhi.n	14432 <__jp2uc+0x2a>
   144b0:	ldr	r3, [pc, #112]	; (14524 <__jp2uc+0x11c>)
   144b2:	b.n	144e8 <__jp2uc+0xe0>
   144b4:	cmp	r2, #216	; 0xd8
   144b6:	bhi.n	14432 <__jp2uc+0x2a>
   144b8:	ldr	r3, [pc, #108]	; (14528 <__jp2uc+0x120>)
   144ba:	b.n	144e8 <__jp2uc+0xe0>
   144bc:	cmp	r2, #246	; 0xf6
   144be:	bhi.n	14432 <__jp2uc+0x2a>
   144c0:	add.w	r0, r2, #12288	; 0x3000
   144c4:	bx	lr
   144c6:	cmp	r2, #243	; 0xf3
   144c8:	bhi.n	14432 <__jp2uc+0x2a>
   144ca:	add.w	r0, r2, #12160	; 0x2f80
   144ce:	adds	r0, #32
   144d0:	bx	lr
   144d2:	ldr	r3, [pc, #88]	; (1452c <__jp2uc+0x124>)
   144d4:	add	r3, r2
   144d6:	ldrb.w	r3, [r3, #-161]
   144da:	cmp	r3, #0
   144dc:	beq.n	14432 <__jp2uc+0x2a>
   144de:	add.w	r0, r2, #65024	; 0xfe00
   144e2:	adds	r0, #96	; 0x60
   144e4:	bx	lr
   144e6:	ldr	r3, [pc, #72]	; (14530 <__jp2uc+0x128>)
   144e8:	sub.w	r0, r2, #161	; 0xa1
   144ec:	ldrh.w	r0, [r3, r0, lsl #1]
   144f0:	cmp	r0, #0
   144f2:	it	eq
   144f4:	moveq.w	r0, #4294967295
   144f8:	bx	lr
   144fa:	ldr	r3, [pc, #56]	; (14534 <__jp2uc+0x12c>)
   144fc:	sub.w	r0, r2, #161	; 0xa1
   14500:	ldrh.w	r0, [r3, r0, lsl #1]
   14504:	bx	lr
   14506:	subs	r3, #176	; 0xb0
   14508:	rsb	r3, r3, r3, lsl #7
   1450c:	sub.w	r0, r2, #161	; 0xa1
   14510:	add.w	r0, r0, r3, lsl #1
   14514:	ldr	r2, [pc, #32]	; (14538 <__jp2uc+0x130>)
   14516:	ldrh.w	r0, [r2, r0, lsl #1]
   1451a:	bx	lr
   1451c:	.word	0x2000599c
   14520:	.word	0x20000cc4
   14524:	.word	0x20000c20
   14528:	.word	0x20000bb0
   1452c:	.word	0x20000b54
   14530:	.word	0x20000a98
   14534:	.word	0x200009dc
   14538:	.word	0x20000d04

0001453c <_jp2uc_l>:
   1453c:	push	{r3, r4, r5, lr}
   1453e:	mov	r5, r0
   14540:	cbz	r1, 14572 <_jp2uc_l+0x36>
   14542:	add.w	r4, r1, #298	; 0x12a
   14546:	ldr	r1, [pc, #72]	; (14590 <_jp2uc_l+0x54>)
   14548:	mov	r0, r4
   1454a:	bl	dca8 <strcmp>
   1454e:	cbnz	r0, 1455c <_jp2uc_l+0x20>
   14550:	mov	r0, r5
   14552:	movs	r1, #1
   14554:	ldmia.w	sp!, {r3, r4, r5, lr}
   14558:	b.w	14408 <__jp2uc>
   1455c:	ldr	r1, [pc, #52]	; (14594 <_jp2uc_l+0x58>)
   1455e:	mov	r0, r4
   14560:	bl	dca8 <strcmp>
   14564:	cbnz	r0, 14576 <_jp2uc_l+0x3a>
   14566:	mov	r0, r5
   14568:	movs	r1, #2
   1456a:	ldmia.w	sp!, {r3, r4, r5, lr}
   1456e:	b.w	14408 <__jp2uc>
   14572:	ldr	r4, [pc, #36]	; (14598 <_jp2uc_l+0x5c>)
   14574:	b.n	14546 <_jp2uc_l+0xa>
   14576:	ldr	r1, [pc, #36]	; (1459c <_jp2uc_l+0x60>)
   14578:	mov	r0, r4
   1457a:	bl	dca8 <strcmp>
   1457e:	cbnz	r0, 1458c <_jp2uc_l+0x50>
   14580:	mov	r0, r5
   14582:	movs	r1, #3
   14584:	ldmia.w	sp!, {r3, r4, r5, lr}
   14588:	b.w	14408 <__jp2uc>
   1458c:	mov	r0, r5
   1458e:	pop	{r3, r4, r5, pc}
   14590:	.word	0x20000970
   14594:	.word	0x20000974
   14598:	.word	0x20008a8e
   1459c:	.word	0x2000097c

000145a0 <fiprintf>:
   145a0:	push	{r1, r2, r3}
   145a2:	push	{r4, lr}
   145a4:	sub	sp, #12
   145a6:	add	r3, sp, #20
   145a8:	ldr	r4, [pc, #24]	; (145c4 <fiprintf+0x24>)
   145aa:	ldr.w	r2, [r3], #4
   145ae:	str	r3, [sp, #4]
   145b0:	mov	r1, r0
   145b2:	ldr	r0, [r4, #0]
   145b4:	bl	148b0 <_vfiprintf_r>
   145b8:	add	sp, #12
   145ba:	ldmia.w	sp!, {r4, lr}
   145be:	add	sp, #12
   145c0:	bx	lr
   145c2:	nop
   145c4:	.word	0x20008eec

000145c8 <__ssprint_r>:
   145c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145cc:	ldr	r3, [r2, #8]
   145ce:	ldr	r7, [r2, #0]
   145d0:	sub	sp, #12
   145d2:	mov	sl, r2
   145d4:	cmp	r3, #0
   145d6:	beq.n	146ba <__ssprint_r+0xf2>
   145d8:	mov	r9, r0
   145da:	ldr	r2, [r1, #8]
   145dc:	ldr	r0, [r1, #0]
   145de:	mov	r4, r1
   145e0:	adds	r7, #8
   145e2:	b.n	1466c <__ssprint_r+0xa4>
   145e4:	ldrh	r3, [r4, #12]
   145e6:	tst.w	r3, #1152	; 0x480
   145ea:	beq.n	1464a <__ssprint_r+0x82>
   145ec:	ldrd	r1, r6, [r4, #16]
   145f0:	sub.w	r8, r0, r1
   145f4:	add.w	r6, r6, r6, lsl #1
   145f8:	add.w	r6, r6, r6, lsr #31
   145fc:	add.w	r0, r8, #1
   14600:	asrs	r6, r6, #1
   14602:	add	r0, r5
   14604:	cmp	r0, r6
   14606:	mov	r2, r6
   14608:	itt	hi
   1460a:	movhi	r6, r0
   1460c:	movhi	r2, r6
   1460e:	lsls	r3, r3, #21
   14610:	bpl.n	14682 <__ssprint_r+0xba>
   14612:	mov	r1, r2
   14614:	mov	r0, r9
   14616:	bl	bad8 <_malloc_r>
   1461a:	str	r0, [sp, #4]
   1461c:	cmp	r0, #0
   1461e:	beq.n	14696 <__ssprint_r+0xce>
   14620:	mov	r2, r8
   14622:	ldr	r1, [r4, #16]
   14624:	bl	9488 <memcpy>
   14628:	ldrh	r2, [r4, #12]
   1462a:	ldr	r3, [sp, #4]
   1462c:	bic.w	r2, r2, #1152	; 0x480
   14630:	orr.w	r2, r2, #128	; 0x80
   14634:	strh	r2, [r4, #12]
   14636:	sub.w	r2, r6, r8
   1463a:	add.w	r0, r3, r8
   1463e:	str	r6, [r4, #20]
   14640:	str	r2, [r4, #8]
   14642:	str	r3, [r4, #16]
   14644:	str	r0, [r4, #0]
   14646:	mov	r6, r5
   14648:	mov	r8, r5
   1464a:	mov	r2, r8
   1464c:	mov	r1, fp
   1464e:	bl	d8c0 <memmove>
   14652:	ldr.w	r3, [sl, #8]
   14656:	ldr	r2, [r4, #8]
   14658:	ldr	r0, [r4, #0]
   1465a:	subs	r2, r2, r6
   1465c:	add	r0, r8
   1465e:	subs	r3, r3, r5
   14660:	str	r2, [r4, #8]
   14662:	str	r0, [r4, #0]
   14664:	str.w	r3, [sl, #8]
   14668:	cbz	r3, 146ba <__ssprint_r+0xf2>
   1466a:	adds	r7, #8
   1466c:	ldrd	fp, r5, [r7, #-8]
   14670:	cmp	r5, #0
   14672:	beq.n	1466a <__ssprint_r+0xa2>
   14674:	cmp	r2, r5
   14676:	mov	r6, r2
   14678:	mov	r8, r2
   1467a:	bls.n	145e4 <__ssprint_r+0x1c>
   1467c:	mov	r6, r5
   1467e:	mov	r8, r5
   14680:	b.n	1464a <__ssprint_r+0x82>
   14682:	mov	r0, r9
   14684:	bl	c068 <_realloc_r>
   14688:	mov	r3, r0
   1468a:	cmp	r0, #0
   1468c:	bne.n	14636 <__ssprint_r+0x6e>
   1468e:	ldr	r1, [r4, #16]
   14690:	mov	r0, r9
   14692:	bl	e324 <_free_r>
   14696:	ldrh	r3, [r4, #12]
   14698:	movs	r2, #12
   1469a:	orr.w	r3, r3, #64	; 0x40
   1469e:	str.w	r2, [r9]
   146a2:	mov.w	r0, #4294967295
   146a6:	strh	r3, [r4, #12]
   146a8:	movs	r2, #0
   146aa:	movs	r3, #0
   146ac:	str.w	r2, [sl, #8]
   146b0:	str.w	r3, [sl, #4]
   146b4:	add	sp, #12
   146b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ba:	movs	r0, #0
   146bc:	movs	r3, #0
   146be:	str.w	r3, [sl, #4]
   146c2:	add	sp, #12
   146c4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000146c8 <_sungetc_r>:
   146c8:	push	{r3, r4, r5, lr}
   146ca:	adds	r3, r1, #1
   146cc:	beq.n	14704 <_sungetc_r+0x3c>
   146ce:	ldrh	r3, [r2, #12]
   146d0:	mov	r4, r2
   146d2:	ldr	r2, [r2, #48]	; 0x30
   146d4:	bic.w	r3, r3, #32
   146d8:	strh	r3, [r4, #12]
   146da:	uxtb	r5, r1
   146dc:	cbz	r2, 1470a <_sungetc_r+0x42>
   146de:	ldr	r2, [r4, #4]
   146e0:	ldr	r3, [r4, #52]	; 0x34
   146e2:	cmp	r2, r3
   146e4:	bge.n	146fa <_sungetc_r+0x32>
   146e6:	ldr	r3, [r4, #0]
   146e8:	subs	r2, r3, #1
   146ea:	str	r2, [r4, #0]
   146ec:	strb.w	r5, [r3, #-1]
   146f0:	ldr	r3, [r4, #4]
   146f2:	adds	r3, #1
   146f4:	str	r3, [r4, #4]
   146f6:	mov	r0, r5
   146f8:	pop	{r3, r4, r5, pc}
   146fa:	mov	r1, r4
   146fc:	bl	15bb0 <__submore>
   14700:	cmp	r0, #0
   14702:	beq.n	146e6 <_sungetc_r+0x1e>
   14704:	mov.w	r5, #4294967295
   14708:	b.n	146f6 <_sungetc_r+0x2e>
   1470a:	ldr	r3, [r4, #16]
   1470c:	ldr	r2, [r4, #0]
   1470e:	cbz	r3, 1471c <_sungetc_r+0x54>
   14710:	cmp	r3, r2
   14712:	bcs.n	1471c <_sungetc_r+0x54>
   14714:	ldrb.w	r3, [r2, #-1]
   14718:	cmp	r3, r5
   1471a:	beq.n	1473c <_sungetc_r+0x74>
   1471c:	ldr	r1, [r4, #4]
   1471e:	str	r1, [r4, #60]	; 0x3c
   14720:	mov	r3, r4
   14722:	str	r2, [r4, #56]	; 0x38
   14724:	add.w	r1, r4, #64	; 0x40
   14728:	movs	r2, #3
   1472a:	str	r2, [r4, #52]	; 0x34
   1472c:	str	r1, [r4, #48]	; 0x30
   1472e:	strb.w	r5, [r3, #66]!
   14732:	movs	r2, #1
   14734:	strd	r3, r2, [r4]
   14738:	mov	r0, r5
   1473a:	pop	{r3, r4, r5, pc}
   1473c:	ldr	r3, [r4, #4]
   1473e:	subs	r2, #1
   14740:	adds	r3, #1
   14742:	strd	r2, r3, [r4]
   14746:	b.n	146f6 <_sungetc_r+0x2e>

00014748 <__ssrefill_r>:
   14748:	push	{r4, lr}
   1474a:	mov	r4, r1
   1474c:	ldr	r1, [r1, #48]	; 0x30
   1474e:	cbz	r1, 1476c <__ssrefill_r+0x24>
   14750:	add.w	r3, r4, #64	; 0x40
   14754:	cmp	r1, r3
   14756:	beq.n	1475c <__ssrefill_r+0x14>
   14758:	bl	e324 <_free_r>
   1475c:	ldr	r3, [r4, #60]	; 0x3c
   1475e:	str	r3, [r4, #4]
   14760:	movs	r0, #0
   14762:	str	r0, [r4, #48]	; 0x30
   14764:	cbz	r3, 1476c <__ssrefill_r+0x24>
   14766:	ldr	r3, [r4, #56]	; 0x38
   14768:	str	r3, [r4, #0]
   1476a:	pop	{r4, pc}
   1476c:	ldrh	r3, [r4, #12]
   1476e:	ldr	r1, [r4, #16]
   14770:	movs	r2, #0
   14772:	orr.w	r3, r3, #32
   14776:	strd	r1, r2, [r4]
   1477a:	strh	r3, [r4, #12]
   1477c:	mov.w	r0, #4294967295
   14780:	pop	{r4, pc}
   14782:	nop

00014784 <_sfread_r>:
   14784:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14788:	sub	sp, #20
   1478a:	strd	r3, r2, [sp, #8]
   1478e:	mul.w	r3, r2, r3
   14792:	ldr	r4, [sp, #56]	; 0x38
   14794:	str	r3, [sp, #4]
   14796:	cbz	r3, 14802 <_sfread_r+0x7e>
   14798:	ldr.w	sl, [r4, #4]
   1479c:	ldr	r3, [sp, #4]
   1479e:	cmp	r3, sl
   147a0:	mov	fp, r1
   147a2:	bls.n	14832 <_sfread_r+0xae>
   147a4:	mov	r8, r4
   147a6:	ldr	r5, [sp, #4]
   147a8:	ldr.w	r1, [r8], #64
   147ac:	mov	r7, r0
   147ae:	movs	r6, #0
   147b0:	mov	r2, sl
   147b2:	mov	r0, fp
   147b4:	bl	9488 <memcpy>
   147b8:	ldr	r3, [r4, #0]
   147ba:	ldr	r2, [r4, #48]	; 0x30
   147bc:	add	r3, sl
   147be:	mov	r9, r5
   147c0:	strd	r3, r6, [r4]
   147c4:	mov	r1, r2
   147c6:	mov	r0, r7
   147c8:	add	fp, sl
   147ca:	sub.w	r5, r5, sl
   147ce:	cbz	r2, 1480a <_sfread_r+0x86>
   147d0:	cmp	r2, r8
   147d2:	beq.n	147d8 <_sfread_r+0x54>
   147d4:	bl	e324 <_free_r>
   147d8:	ldr	r3, [r4, #60]	; 0x3c
   147da:	str	r6, [r4, #48]	; 0x30
   147dc:	str	r3, [r4, #4]
   147de:	cbz	r3, 1480a <_sfread_r+0x86>
   147e0:	ldr	r1, [r4, #56]	; 0x38
   147e2:	str	r1, [r4, #0]
   147e4:	cmp	r3, r5
   147e6:	mov	sl, r3
   147e8:	bcc.n	147b0 <_sfread_r+0x2c>
   147ea:	ldr	r3, [sp, #8]
   147ec:	str	r3, [sp, #4]
   147ee:	mov	r2, r5
   147f0:	mov	r0, fp
   147f2:	bl	9488 <memcpy>
   147f6:	ldrd	r3, r2, [r4]
   147fa:	subs	r2, r2, r5
   147fc:	add	r3, r5
   147fe:	strd	r3, r2, [r4]
   14802:	ldr	r0, [sp, #4]
   14804:	add	sp, #20
   14806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1480a:	ldr	r2, [sp, #4]
   1480c:	ldr	r3, [sp, #12]
   1480e:	add	r2, sl
   14810:	sub.w	r2, r2, r9
   14814:	udiv	r3, r2, r3
   14818:	str	r3, [sp, #4]
   1481a:	ldrh	r3, [r4, #12]
   1481c:	ldr	r2, [r4, #16]
   1481e:	ldr	r0, [sp, #4]
   14820:	orr.w	r3, r3, #32
   14824:	strh	r3, [r4, #12]
   14826:	movs	r3, #0
   14828:	strd	r2, r3, [r4]
   1482c:	add	sp, #20
   1482e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14832:	ldr	r1, [r4, #0]
   14834:	mov	r5, r3
   14836:	b.n	147ea <_sfread_r+0x66>

00014838 <__sprint_r.part.0>:
   14838:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1483c:	ldr	r3, [r1, #100]	; 0x64
   1483e:	lsls	r4, r3, #18
   14840:	mov	r8, r2
   14842:	bpl.n	148a0 <__sprint_r.part.0+0x68>
   14844:	ldr	r3, [r2, #8]
   14846:	ldr	r2, [r2, #0]
   14848:	cbz	r3, 1489c <__sprint_r.part.0+0x64>
   1484a:	mov	fp, r1
   1484c:	mov	r6, r0
   1484e:	add.w	r9, r2, #8
   14852:	ldrd	r5, sl, [r9, #-8]
   14856:	movs.w	r7, sl, lsr #2
   1485a:	beq.n	14888 <__sprint_r.part.0+0x50>
   1485c:	subs	r5, #4
   1485e:	movs	r4, #0
   14860:	b.n	14866 <__sprint_r.part.0+0x2e>
   14862:	cmp	r7, r4
   14864:	beq.n	14884 <__sprint_r.part.0+0x4c>
   14866:	ldr.w	r1, [r5, #4]!
   1486a:	mov	r2, fp
   1486c:	mov	r0, r6
   1486e:	bl	15da0 <_fputwc_r>
   14872:	adds	r3, r0, #1
   14874:	add.w	r4, r4, #1
   14878:	bne.n	14862 <__sprint_r.part.0+0x2a>
   1487a:	movs	r3, #0
   1487c:	strd	r3, r3, [r8, #4]
   14880:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14884:	ldr.w	r3, [r8, #8]
   14888:	bic.w	sl, sl, #3
   1488c:	sub.w	r3, r3, sl
   14890:	str.w	r3, [r8, #8]
   14894:	add.w	r9, r9, #8
   14898:	cmp	r3, #0
   1489a:	bne.n	14852 <__sprint_r.part.0+0x1a>
   1489c:	movs	r0, #0
   1489e:	b.n	1487a <__sprint_r.part.0+0x42>
   148a0:	bl	158bc <__sfvwrite_r>
   148a4:	movs	r3, #0
   148a6:	strd	r3, r3, [r8, #4]
   148aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148ae:	nop

000148b0 <_vfiprintf_r>:
   148b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b4:	vpush	{d8}
   148b8:	sub	sp, #276	; 0x114
   148ba:	add.w	sl, sp, #80	; 0x50
   148be:	mov	fp, r0
   148c0:	vmov	s16, r1
   148c4:	mov	r6, r2
   148c6:	movs	r1, #0
   148c8:	movs	r2, #8
   148ca:	mov	r0, sl
   148cc:	mov	r4, r3
   148ce:	str	r3, [sp, #28]
   148d0:	bl	9444 <memset>
   148d4:	cmp.w	fp, #0
   148d8:	beq.n	148e4 <_vfiprintf_r+0x34>
   148da:	ldr.w	r3, [fp, #52]	; 0x34
   148de:	cmp	r3, #0
   148e0:	beq.w	15624 <_vfiprintf_r+0xd74>
   148e4:	vmov	r2, s16
   148e8:	ldr	r3, [r2, #100]	; 0x64
   148ea:	lsls	r3, r3, #31
   148ec:	bpl.w	15316 <_vfiprintf_r+0xa66>
   148f0:	ldrsh.w	r1, [r2, #12]
   148f4:	uxth	r2, r1
   148f6:	lsls	r5, r2, #18
   148f8:	bmi.n	14912 <_vfiprintf_r+0x62>
   148fa:	vmov	r3, s16
   148fe:	orr.w	r1, r1, #8192	; 0x2000
   14902:	strh	r1, [r3, #12]
   14904:	ldr	r3, [r3, #100]	; 0x64
   14906:	uxth	r2, r1
   14908:	vmov	r1, s16
   1490c:	bic.w	r3, r3, #8192	; 0x2000
   14910:	str	r3, [r1, #100]	; 0x64
   14912:	lsls	r0, r2, #28
   14914:	bpl.w	14b22 <_vfiprintf_r+0x272>
   14918:	vmov	r3, s16
   1491c:	ldr	r3, [r3, #16]
   1491e:	cmp	r3, #0
   14920:	beq.w	14b22 <_vfiprintf_r+0x272>
   14924:	and.w	r3, r2, #26
   14928:	cmp	r3, #10
   1492a:	beq.w	14b42 <_vfiprintf_r+0x292>
   1492e:	movs	r3, #0
   14930:	strd	r3, r3, [sp, #100]	; 0x64
   14934:	strd	r3, r3, [sp, #52]	; 0x34
   14938:	add	r2, sp, #108	; 0x6c
   1493a:	str	r3, [sp, #48]	; 0x30
   1493c:	str	r2, [sp, #96]	; 0x60
   1493e:	mov	r9, r2
   14940:	str	r3, [sp, #44]	; 0x2c
   14942:	str	r3, [sp, #20]
   14944:	mov	r8, r6
   14946:	mov	r4, r8
   14948:	ldr	r3, [pc, #672]	; (14bec <_vfiprintf_r+0x33c>)
   1494a:	ldr.w	r5, [r3, #228]	; 0xe4
   1494e:	bl	db54 <__locale_mb_cur_max>
   14952:	mov	r2, r4
   14954:	mov	r3, r0
   14956:	add	r1, sp, #72	; 0x48
   14958:	str.w	sl, [sp]
   1495c:	mov	r0, fp
   1495e:	blx	r5
   14960:	cmp	r0, #0
   14962:	beq.w	14bf0 <_vfiprintf_r+0x340>
   14966:	blt.w	14bdc <_vfiprintf_r+0x32c>
   1496a:	ldr	r2, [sp, #72]	; 0x48
   1496c:	cmp	r2, #37	; 0x25
   1496e:	mov	r3, r0
   14970:	beq.n	14976 <_vfiprintf_r+0xc6>
   14972:	add	r4, r3
   14974:	b.n	14948 <_vfiprintf_r+0x98>
   14976:	subs.w	r6, r4, r8
   1497a:	mov	r5, r0
   1497c:	bne.w	14bf8 <_vfiprintf_r+0x348>
   14980:	movs	r3, #0
   14982:	ldrb	r1, [r4, #1]
   14984:	strb.w	r3, [sp, #67]	; 0x43
   14988:	add.w	r8, r4, #1
   1498c:	str	r3, [sp, #24]
   1498e:	mov.w	r7, #4294967295
   14992:	mov	r6, r3
   14994:	movs	r4, #43	; 0x2b
   14996:	add.w	r8, r8, #1
   1499a:	sub.w	r3, r1, #32
   1499e:	cmp	r3, #90	; 0x5a
   149a0:	bhi.w	14c94 <_vfiprintf_r+0x3e4>
   149a4:	tbh	[pc, r3, lsl #1]
   149a8:	.word	0x017602b5
   149ac:	.word	0x02b00176
   149b0:	.word	0x01760176
   149b4:	.word	0x006a0176
   149b8:	.word	0x01760176
   149bc:	.word	0x028d027d
   149c0:	.word	0x02880176
   149c4:	.word	0x01760297
   149c8:	.word	0x005b0292
   149cc:	.word	0x005b005b
   149d0:	.word	0x005b005b
   149d4:	.word	0x005b005b
   149d8:	.word	0x005b005b
   149dc:	.word	0x01760176
   149e0:	.word	0x01760176
   149e4:	.word	0x01760176
   149e8:	.word	0x01760176
   149ec:	.word	0x025c0176
   149f0:	.word	0x01760084
   149f4:	.word	0x01760176
   149f8:	.word	0x01760176
   149fc:	.word	0x01760176
   14a00:	.word	0x01760176
   14a04:	.word	0x00e80176
   14a08:	.word	0x01760176
   14a0c:	.word	0x02330176
   14a10:	.word	0x02da0176
   14a14:	.word	0x01760176
   14a18:	.word	0x0176058b
   14a1c:	.word	0x01760176
   14a20:	.word	0x01760176
   14a24:	.word	0x01760176
   14a28:	.word	0x01760176
   14a2c:	.word	0x025c0176
   14a30:	.word	0x01760086
   14a34:	.word	0x01760176
   14a38:	.word	0x008602cd
   14a3c:	.word	0x0176007f
   14a40:	.word	0x017602c0
   14a44:	.word	0x00ea02fd
   14a48:	.word	0x007f02ed
   14a4c:	.word	0x02330176
   14a50:	.word	0x0569007c
   14a54:	.word	0x01760176
   14a58:	.word	0x0176056b
   14a5c:	.short	0x007c
   14a5e:	sub.w	r3, r1, #48	; 0x30
   14a62:	movs	r2, #0
   14a64:	ldrb.w	r1, [r8], #1
   14a68:	add.w	r2, r2, r2, lsl #2
   14a6c:	add.w	r2, r3, r2, lsl #1
   14a70:	sub.w	r3, r1, #48	; 0x30
   14a74:	cmp	r3, #9
   14a76:	bls.n	14a64 <_vfiprintf_r+0x1b4>
   14a78:	str	r2, [sp, #24]
   14a7a:	b.n	1499a <_vfiprintf_r+0xea>
   14a7c:	mov	r0, fp
   14a7e:	bl	12f7c <_localeconv_r>
   14a82:	ldr	r3, [r0, #4]
   14a84:	str	r3, [sp, #52]	; 0x34
   14a86:	mov	r0, r3
   14a88:	bl	e100 <strlen>
   14a8c:	str	r0, [sp, #56]	; 0x38
   14a8e:	mov	r5, r0
   14a90:	mov	r0, fp
   14a92:	bl	12f7c <_localeconv_r>
   14a96:	ldr	r3, [r0, #8]
   14a98:	str	r3, [sp, #44]	; 0x2c
   14a9a:	cmp	r5, #0
   14a9c:	bne.w	1544c <_vfiprintf_r+0xb9c>
   14aa0:	ldrb.w	r1, [r8]
   14aa4:	b.n	14996 <_vfiprintf_r+0xe6>
   14aa6:	ldrb.w	r1, [r8]
   14aaa:	orr.w	r6, r6, #32
   14aae:	b.n	14996 <_vfiprintf_r+0xe6>
   14ab0:	orr.w	r6, r6, #16
   14ab4:	lsls	r4, r6, #26
   14ab6:	bpl.w	14dd6 <_vfiprintf_r+0x526>
   14aba:	ldr	r3, [sp, #28]
   14abc:	adds	r3, #7
   14abe:	bic.w	r3, r3, #7
   14ac2:	mov	r2, r3
   14ac4:	ldr	r1, [r3, #4]
   14ac6:	ldr.w	r3, [r2], #8
   14aca:	str	r2, [sp, #28]
   14acc:	mov	r2, r1
   14ace:	cmp	r1, #0
   14ad0:	blt.w	153b4 <_vfiprintf_r+0xb04>
   14ad4:	adds	r1, r7, #1
   14ad6:	beq.w	1561e <_vfiprintf_r+0xd6e>
   14ada:	bic.w	r1, r6, #128	; 0x80
   14ade:	str	r1, [sp, #12]
   14ae0:	orrs.w	r1, r3, r2
   14ae4:	beq.w	15366 <_vfiprintf_r+0xab6>
   14ae8:	cmp	r3, #10
   14aea:	sbcs.w	r1, r2, #0
   14aee:	bcs.w	15574 <_vfiprintf_r+0xcc4>
   14af2:	adds	r3, #48	; 0x30
   14af4:	strb.w	r3, [sp, #271]	; 0x10f
   14af8:	ldr	r6, [sp, #12]
   14afa:	movs	r3, #1
   14afc:	str	r3, [sp, #16]
   14afe:	addw	r4, sp, #271	; 0x10f
   14b02:	ldr	r3, [sp, #16]
   14b04:	cmp	r3, r7
   14b06:	it	lt
   14b08:	movlt	r3, r7
   14b0a:	str	r3, [sp, #12]
   14b0c:	movs	r3, #0
   14b0e:	str	r3, [sp, #32]
   14b10:	ldrb.w	r3, [sp, #67]	; 0x43
   14b14:	cmp	r3, #0
   14b16:	beq.w	14cb0 <_vfiprintf_r+0x400>
   14b1a:	ldr	r3, [sp, #12]
   14b1c:	adds	r3, #1
   14b1e:	str	r3, [sp, #12]
   14b20:	b.n	14cb0 <_vfiprintf_r+0x400>
   14b22:	vmov	r1, s16
   14b26:	mov	r0, fp
   14b28:	vmov	r5, s16
   14b2c:	bl	15c28 <__swsetup_r>
   14b30:	cmp	r0, #0
   14b32:	bne.w	157da <_vfiprintf_r+0xf2a>
   14b36:	ldrh	r2, [r5, #12]
   14b38:	and.w	r3, r2, #26
   14b3c:	cmp	r3, #10
   14b3e:	bne.w	1492e <_vfiprintf_r+0x7e>
   14b42:	vmov	r1, s16
   14b46:	ldrsh.w	r3, [r1, #14]
   14b4a:	cmp	r3, #0
   14b4c:	blt.w	1492e <_vfiprintf_r+0x7e>
   14b50:	ldr	r3, [r1, #100]	; 0x64
   14b52:	lsls	r3, r3, #31
   14b54:	bmi.n	14b5c <_vfiprintf_r+0x2ac>
   14b56:	lsls	r7, r2, #22
   14b58:	bpl.w	15780 <_vfiprintf_r+0xed0>
   14b5c:	vmov	r1, s16
   14b60:	mov	r3, r4
   14b62:	mov	r2, r6
   14b64:	mov	r0, fp
   14b66:	bl	1583c <__sbprintf>
   14b6a:	str	r0, [sp, #20]
   14b6c:	ldr	r0, [sp, #20]
   14b6e:	add	sp, #276	; 0x114
   14b70:	vpop	{d8}
   14b74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b78:	orr.w	r6, r6, #16
   14b7c:	ands.w	r2, r6, #32
   14b80:	beq.w	14df0 <_vfiprintf_r+0x540>
   14b84:	ldr	r3, [sp, #28]
   14b86:	adds	r3, #7
   14b88:	bic.w	r3, r3, #7
   14b8c:	mov	r1, r3
   14b8e:	ldr	r2, [r3, #4]
   14b90:	ldr.w	r3, [r1], #8
   14b94:	str	r1, [sp, #28]
   14b96:	bic.w	r1, r6, #1024	; 0x400
   14b9a:	str	r1, [sp, #12]
   14b9c:	movs	r1, #0
   14b9e:	movs	r0, #0
   14ba0:	strb.w	r0, [sp, #67]	; 0x43
   14ba4:	adds	r0, r7, #1
   14ba6:	beq.w	14fca <_vfiprintf_r+0x71a>
   14baa:	ldr	r0, [sp, #12]
   14bac:	bic.w	r6, r0, #128	; 0x80
   14bb0:	orrs.w	r0, r3, r2
   14bb4:	bne.w	14fc8 <_vfiprintf_r+0x718>
   14bb8:	cmp	r7, #0
   14bba:	bne.w	1562e <_vfiprintf_r+0xd7e>
   14bbe:	cmp	r1, #0
   14bc0:	bne.w	1536e <_vfiprintf_r+0xabe>
   14bc4:	ldr	r3, [sp, #12]
   14bc6:	ands.w	r3, r3, #1
   14bca:	str	r3, [sp, #16]
   14bcc:	beq.w	153f2 <_vfiprintf_r+0xb42>
   14bd0:	movs	r3, #48	; 0x30
   14bd2:	strb.w	r3, [sp, #271]	; 0x10f
   14bd6:	addw	r4, sp, #271	; 0x10f
   14bda:	b.n	14b02 <_vfiprintf_r+0x252>
   14bdc:	movs	r2, #8
   14bde:	movs	r1, #0
   14be0:	mov	r0, sl
   14be2:	bl	9444 <memset>
   14be6:	movs	r3, #1
   14be8:	add	r4, r3
   14bea:	b.n	14948 <_vfiprintf_r+0x98>
   14bec:	.word	0x20008964
   14bf0:	subs.w	r6, r4, r8
   14bf4:	mov	r5, r0
   14bf6:	beq.n	14c30 <_vfiprintf_r+0x380>
   14bf8:	ldr	r3, [sp, #100]	; 0x64
   14bfa:	ldr	r2, [sp, #104]	; 0x68
   14bfc:	adds	r3, #1
   14bfe:	add	r2, r6
   14c00:	cmp	r3, #7
   14c02:	strd	r8, r6, [r9]
   14c06:	str	r2, [sp, #104]	; 0x68
   14c08:	str	r3, [sp, #100]	; 0x64
   14c0a:	ble.n	14c46 <_vfiprintf_r+0x396>
   14c0c:	cmp	r2, #0
   14c0e:	beq.w	1535e <_vfiprintf_r+0xaae>
   14c12:	vmov	r1, s16
   14c16:	add	r2, sp, #96	; 0x60
   14c18:	mov	r0, fp
   14c1a:	bl	14838 <__sprint_r.part.0>
   14c1e:	cbnz	r0, 14c6a <_vfiprintf_r+0x3ba>
   14c20:	add.w	r9, sp, #108	; 0x6c
   14c24:	ldr	r3, [sp, #20]
   14c26:	add	r3, r6
   14c28:	str	r3, [sp, #20]
   14c2a:	cmp	r5, #0
   14c2c:	bne.w	14980 <_vfiprintf_r+0xd0>
   14c30:	ldr	r3, [sp, #104]	; 0x68
   14c32:	cmp	r3, #0
   14c34:	bne.w	157ba <_vfiprintf_r+0xf0a>
   14c38:	vmov	r3, s16
   14c3c:	movs	r2, #0
   14c3e:	ldrsh.w	r3, [r3, #12]
   14c42:	str	r2, [sp, #100]	; 0x64
   14c44:	b.n	14c72 <_vfiprintf_r+0x3c2>
   14c46:	add.w	r9, r9, #8
   14c4a:	b.n	14c24 <_vfiprintf_r+0x374>
   14c4c:	vmov	r1, s16
   14c50:	add	r2, sp, #96	; 0x60
   14c52:	mov	r0, fp
   14c54:	bl	14838 <__sprint_r.part.0>
   14c58:	cmp	r0, #0
   14c5a:	beq.w	14daa <_vfiprintf_r+0x4fa>
   14c5e:	ldr	r3, [sp, #32]
   14c60:	cbz	r3, 14c6a <_vfiprintf_r+0x3ba>
   14c62:	ldr	r1, [sp, #32]
   14c64:	mov	r0, fp
   14c66:	bl	e324 <_free_r>
   14c6a:	vmov	r3, s16
   14c6e:	ldrsh.w	r3, [r3, #12]
   14c72:	vmov	r2, s16
   14c76:	ldr	r2, [r2, #100]	; 0x64
   14c78:	tst.w	r2, #1
   14c7c:	uxth	r2, r3
   14c7e:	beq.w	14dc2 <_vfiprintf_r+0x512>
   14c82:	lsls	r0, r2, #25
   14c84:	bmi.w	157ec <_vfiprintf_r+0xf3c>
   14c88:	ldr	r0, [sp, #20]
   14c8a:	add	sp, #276	; 0x114
   14c8c:	vpop	{d8}
   14c90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c94:	cmp	r1, #0
   14c96:	beq.n	14c30 <_vfiprintf_r+0x380>
   14c98:	movs	r3, #0
   14c9a:	strb.w	r3, [sp, #67]	; 0x43
   14c9e:	movs	r3, #1
   14ca0:	strd	r3, r3, [sp, #12]
   14ca4:	strb.w	r1, [sp, #172]	; 0xac
   14ca8:	add	r4, sp, #172	; 0xac
   14caa:	movs	r3, #0
   14cac:	str	r3, [sp, #32]
   14cae:	mov	r7, r3
   14cb0:	ands.w	r3, r6, #2
   14cb4:	str	r3, [sp, #36]	; 0x24
   14cb6:	beq.n	14cbe <_vfiprintf_r+0x40e>
   14cb8:	ldr	r3, [sp, #12]
   14cba:	adds	r3, #2
   14cbc:	str	r3, [sp, #12]
   14cbe:	ands.w	r3, r6, #132	; 0x84
   14cc2:	str	r3, [sp, #40]	; 0x28
   14cc4:	bne.n	14cd2 <_vfiprintf_r+0x422>
   14cc6:	ldr	r3, [sp, #24]
   14cc8:	ldr	r2, [sp, #12]
   14cca:	subs	r5, r3, r2
   14ccc:	cmp	r5, #0
   14cce:	bgt.w	151c8 <_vfiprintf_r+0x918>
   14cd2:	ldrd	r0, r3, [sp, #100]	; 0x64
   14cd6:	adds	r1, r0, #1
   14cd8:	ldrb.w	r2, [sp, #67]	; 0x43
   14cdc:	cbz	r2, 14d00 <_vfiprintf_r+0x450>
   14cde:	movs	r2, #1
   14ce0:	adds	r3, #1
   14ce2:	str.w	r2, [r9, #4]
   14ce6:	cmp	r1, #7
   14ce8:	add.w	r2, sp, #67	; 0x43
   14cec:	strd	r1, r3, [sp, #100]	; 0x64
   14cf0:	str.w	r2, [r9]
   14cf4:	bgt.w	1518c <_vfiprintf_r+0x8dc>
   14cf8:	mov	r0, r1
   14cfa:	add.w	r9, r9, #8
   14cfe:	adds	r1, #1
   14d00:	ldr	r2, [sp, #36]	; 0x24
   14d02:	cbz	r2, 14d3e <_vfiprintf_r+0x48e>
   14d04:	add	r2, sp, #68	; 0x44
   14d06:	adds	r3, #2
   14d08:	str.w	r2, [r9]
   14d0c:	cmp	r1, #7
   14d0e:	mov.w	r2, #2
   14d12:	strd	r1, r3, [sp, #100]	; 0x64
   14d16:	str.w	r2, [r9, #4]
   14d1a:	ble.w	151be <_vfiprintf_r+0x90e>
   14d1e:	cmp	r3, #0
   14d20:	beq.w	153aa <_vfiprintf_r+0xafa>
   14d24:	vmov	r1, s16
   14d28:	add	r2, sp, #96	; 0x60
   14d2a:	mov	r0, fp
   14d2c:	bl	14838 <__sprint_r.part.0>
   14d30:	cmp	r0, #0
   14d32:	bne.n	14c5e <_vfiprintf_r+0x3ae>
   14d34:	ldrd	r0, r3, [sp, #100]	; 0x64
   14d38:	add.w	r9, sp, #108	; 0x6c
   14d3c:	adds	r1, r0, #1
   14d3e:	ldr	r2, [sp, #40]	; 0x28
   14d40:	cmp	r2, #128	; 0x80
   14d42:	beq.w	1504e <_vfiprintf_r+0x79e>
   14d46:	ldr	r2, [sp, #16]
   14d48:	subs	r5, r7, r2
   14d4a:	cmp	r5, #0
   14d4c:	bgt.w	150fe <_vfiprintf_r+0x84e>
   14d50:	ldr	r2, [sp, #16]
   14d52:	str.w	r4, [r9]
   14d56:	add	r3, r2
   14d58:	cmp	r1, #7
   14d5a:	strd	r1, r3, [sp, #100]	; 0x64
   14d5e:	str.w	r2, [r9, #4]
   14d62:	ble.w	15042 <_vfiprintf_r+0x792>
   14d66:	cmp	r3, #0
   14d68:	beq.w	15256 <_vfiprintf_r+0x9a6>
   14d6c:	vmov	r1, s16
   14d70:	add	r2, sp, #96	; 0x60
   14d72:	mov	r0, fp
   14d74:	bl	14838 <__sprint_r.part.0>
   14d78:	cmp	r0, #0
   14d7a:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   14d7e:	ldr	r3, [sp, #104]	; 0x68
   14d80:	add.w	r9, sp, #108	; 0x6c
   14d84:	lsls	r5, r6, #29
   14d86:	bpl.n	14d94 <_vfiprintf_r+0x4e4>
   14d88:	ldr	r2, [sp, #24]
   14d8a:	ldr	r1, [sp, #12]
   14d8c:	subs	r4, r2, r1
   14d8e:	cmp	r4, #0
   14d90:	bgt.w	1526a <_vfiprintf_r+0x9ba>
   14d94:	ldrd	r2, r1, [sp, #20]
   14d98:	ldr	r0, [sp, #12]
   14d9a:	cmp	r1, r0
   14d9c:	ite	ge
   14d9e:	addge	r2, r2, r1
   14da0:	addlt	r2, r2, r0
   14da2:	str	r2, [sp, #20]
   14da4:	cmp	r3, #0
   14da6:	bne.w	14c4c <_vfiprintf_r+0x39c>
   14daa:	ldr	r1, [sp, #32]
   14dac:	movs	r3, #0
   14dae:	str	r3, [sp, #100]	; 0x64
   14db0:	cmp	r1, #0
   14db2:	beq.w	15048 <_vfiprintf_r+0x798>
   14db6:	mov	r0, fp
   14db8:	bl	e324 <_free_r>
   14dbc:	add.w	r9, sp, #108	; 0x6c
   14dc0:	b.n	14946 <_vfiprintf_r+0x96>
   14dc2:	lsls	r4, r3, #22
   14dc4:	bmi.w	14c82 <_vfiprintf_r+0x3d2>
   14dc8:	vmov	r4, s16
   14dcc:	ldr	r0, [r4, #88]	; 0x58
   14dce:	bl	dc8c <__retarget_lock_release_recursive>
   14dd2:	ldrh	r2, [r4, #12]
   14dd4:	b.n	14c82 <_vfiprintf_r+0x3d2>
   14dd6:	lsls	r0, r6, #27
   14dd8:	ldr	r2, [sp, #28]
   14dda:	bmi.w	1541c <_vfiprintf_r+0xb6c>
   14dde:	lsls	r1, r6, #25
   14de0:	bpl.w	15416 <_vfiprintf_r+0xb66>
   14de4:	ldrsh.w	r3, [r2], #4
   14de8:	str	r2, [sp, #28]
   14dea:	asrs	r2, r3, #31
   14dec:	mov	r1, r2
   14dee:	b.n	14ace <_vfiprintf_r+0x21e>
   14df0:	ands.w	r3, r6, #16
   14df4:	ldr	r1, [sp, #28]
   14df6:	bne.w	1540c <_vfiprintf_r+0xb5c>
   14dfa:	ands.w	r0, r6, #64	; 0x40
   14dfe:	beq.w	15404 <_vfiprintf_r+0xb54>
   14e02:	mov	r2, r3
   14e04:	ldr.w	r3, [r1], #4
   14e08:	str	r1, [sp, #28]
   14e0a:	uxth	r3, r3
   14e0c:	b.n	14b96 <_vfiprintf_r+0x2e6>
   14e0e:	ldr	r3, [sp, #28]
   14e10:	mov	r2, r3
   14e12:	movs	r3, #0
   14e14:	strb.w	r3, [sp, #67]	; 0x43
   14e18:	mov	r3, r2
   14e1a:	ldr.w	r4, [r3], #4
   14e1e:	str	r3, [sp, #12]
   14e20:	cmp	r4, #0
   14e22:	beq.w	1564a <_vfiprintf_r+0xd9a>
   14e26:	cmp	r1, #83	; 0x53
   14e28:	beq.w	154f6 <_vfiprintf_r+0xc46>
   14e2c:	ands.w	r5, r6, #16
   14e30:	bne.w	154f6 <_vfiprintf_r+0xc46>
   14e34:	adds	r3, r7, #1
   14e36:	beq.w	157a0 <_vfiprintf_r+0xef0>
   14e3a:	mov	r2, r7
   14e3c:	mov	r1, r5
   14e3e:	mov	r0, r4
   14e40:	bl	e040 <memchr>
   14e44:	str	r0, [sp, #32]
   14e46:	cmp	r0, #0
   14e48:	beq.w	1578a <_vfiprintf_r+0xeda>
   14e4c:	subs	r3, r0, r4
   14e4e:	ldr	r2, [sp, #12]
   14e50:	str	r3, [sp, #16]
   14e52:	bic.w	r3, r3, r3, asr #31
   14e56:	mov	r7, r5
   14e58:	str	r2, [sp, #28]
   14e5a:	str	r3, [sp, #12]
   14e5c:	str	r5, [sp, #32]
   14e5e:	b.n	14b10 <_vfiprintf_r+0x260>
   14e60:	cmp	r1, #67	; 0x43
   14e62:	beq.n	14e6a <_vfiprintf_r+0x5ba>
   14e64:	lsls	r5, r6, #27
   14e66:	bpl.w	154c4 <_vfiprintf_r+0xc14>
   14e6a:	ldr	r5, [sp, #28]
   14e6c:	movs	r2, #8
   14e6e:	movs	r1, #0
   14e70:	add	r0, sp, #88	; 0x58
   14e72:	add	r4, sp, #172	; 0xac
   14e74:	bl	9444 <memset>
   14e78:	add	r3, sp, #88	; 0x58
   14e7a:	ldr.w	r2, [r5], #4
   14e7e:	mov	r1, r4
   14e80:	mov	r0, fp
   14e82:	bl	14374 <_wcrtomb_r>
   14e86:	mov	r3, r0
   14e88:	adds	r3, #1
   14e8a:	str	r0, [sp, #16]
   14e8c:	beq.w	157f6 <_vfiprintf_r+0xf46>
   14e90:	ldr	r3, [sp, #16]
   14e92:	str	r5, [sp, #28]
   14e94:	bic.w	r3, r3, r3, asr #31
   14e98:	str	r3, [sp, #12]
   14e9a:	movs	r3, #0
   14e9c:	strb.w	r3, [sp, #67]	; 0x43
   14ea0:	b.n	14caa <_vfiprintf_r+0x3fa>
   14ea2:	ldr	r3, [sp, #28]
   14ea4:	ldr.w	r2, [r3], #4
   14ea8:	str	r2, [sp, #24]
   14eaa:	cmp	r2, #0
   14eac:	bge.w	153e8 <_vfiprintf_r+0xb38>
   14eb0:	ldr	r2, [sp, #24]
   14eb2:	negs	r2, r2
   14eb4:	strd	r2, r3, [sp, #24]
   14eb8:	ldrb.w	r1, [r8]
   14ebc:	orr.w	r6, r6, #4
   14ec0:	b.n	14996 <_vfiprintf_r+0xe6>
   14ec2:	ldrb.w	r1, [r8]
   14ec6:	strb.w	r4, [sp, #67]	; 0x43
   14eca:	b.n	14996 <_vfiprintf_r+0xe6>
   14ecc:	ldrb.w	r1, [r8]
   14ed0:	orr.w	r6, r6, #128	; 0x80
   14ed4:	b.n	14996 <_vfiprintf_r+0xe6>
   14ed6:	mov	r2, r8
   14ed8:	ldrb.w	r1, [r2], #1
   14edc:	cmp	r1, #42	; 0x2a
   14ede:	beq.w	1580e <_vfiprintf_r+0xf5e>
   14ee2:	sub.w	r3, r1, #48	; 0x30
   14ee6:	cmp	r3, #9
   14ee8:	mov	r8, r2
   14eea:	mov.w	r7, #0
   14eee:	bhi.w	1499a <_vfiprintf_r+0xea>
   14ef2:	ldrb.w	r1, [r8], #1
   14ef6:	add.w	r7, r7, r7, lsl #2
   14efa:	add.w	r7, r3, r7, lsl #1
   14efe:	sub.w	r3, r1, #48	; 0x30
   14f02:	cmp	r3, #9
   14f04:	bls.n	14ef2 <_vfiprintf_r+0x642>
   14f06:	b.n	1499a <_vfiprintf_r+0xea>
   14f08:	ldrb.w	r1, [r8]
   14f0c:	orr.w	r6, r6, #1
   14f10:	b.n	14996 <_vfiprintf_r+0xe6>
   14f12:	ldrb.w	r3, [sp, #67]	; 0x43
   14f16:	cmp	r3, #0
   14f18:	bne.w	14aa0 <_vfiprintf_r+0x1f0>
   14f1c:	movs	r3, #32
   14f1e:	ldrb.w	r1, [r8]
   14f22:	strb.w	r3, [sp, #67]	; 0x43
   14f26:	b.n	14996 <_vfiprintf_r+0xe6>
   14f28:	ldrb.w	r1, [r8]
   14f2c:	cmp	r1, #108	; 0x6c
   14f2e:	ittte	eq
   14f30:	ldrbeq.w	r1, [r8, #1]
   14f34:	orreq.w	r6, r6, #32
   14f38:	addeq.w	r8, r8, #1
   14f3c:	orrne.w	r6, r6, #16
   14f40:	b.n	14996 <_vfiprintf_r+0xe6>
   14f42:	ldrb.w	r1, [r8]
   14f46:	cmp	r1, #104	; 0x68
   14f48:	ittte	eq
   14f4a:	ldrbeq.w	r1, [r8, #1]
   14f4e:	orreq.w	r6, r6, #512	; 0x200
   14f52:	addeq.w	r8, r8, #1
   14f56:	orrne.w	r6, r6, #64	; 0x40
   14f5a:	b.n	14996 <_vfiprintf_r+0xe6>
   14f5c:	orr.w	r3, r6, #16
   14f60:	str	r3, [sp, #12]
   14f62:	ldr	r3, [sp, #12]
   14f64:	ands.w	r2, r3, #32
   14f68:	beq.w	15378 <_vfiprintf_r+0xac8>
   14f6c:	ldr	r3, [sp, #28]
   14f6e:	adds	r3, #7
   14f70:	bic.w	r3, r3, #7
   14f74:	mov	r1, r3
   14f76:	ldr	r2, [r3, #4]
   14f78:	ldr.w	r3, [r1], #8
   14f7c:	str	r1, [sp, #28]
   14f7e:	movs	r1, #1
   14f80:	b.n	14b9e <_vfiprintf_r+0x2ee>
   14f82:	ldr	r2, [sp, #28]
   14f84:	orr.w	r3, r6, #2
   14f88:	str	r3, [sp, #12]
   14f8a:	ldr.w	r3, [r2], #4
   14f8e:	str	r2, [sp, #28]
   14f90:	movw	r2, #30768	; 0x7830
   14f94:	strh.w	r2, [sp, #68]	; 0x44
   14f98:	ldr	r2, [pc, #736]	; (1527c <_vfiprintf_r+0x9cc>)
   14f9a:	str	r2, [sp, #48]	; 0x30
   14f9c:	movs	r1, #2
   14f9e:	movs	r2, #0
   14fa0:	b.n	14b9e <_vfiprintf_r+0x2ee>
   14fa2:	lsls	r7, r6, #26
   14fa4:	bmi.w	15438 <_vfiprintf_r+0xb88>
   14fa8:	lsls	r5, r6, #27
   14faa:	bmi.w	1563a <_vfiprintf_r+0xd8a>
   14fae:	lsls	r4, r6, #25
   14fb0:	bmi.w	1575e <_vfiprintf_r+0xeae>
   14fb4:	lsls	r0, r6, #22
   14fb6:	bpl.w	1563a <_vfiprintf_r+0xd8a>
   14fba:	ldr	r3, [sp, #28]
   14fbc:	ldr	r1, [sp, #20]
   14fbe:	ldr.w	r2, [r3], #4
   14fc2:	str	r3, [sp, #28]
   14fc4:	strb	r1, [r2, #0]
   14fc6:	b.n	14946 <_vfiprintf_r+0x96>
   14fc8:	str	r6, [sp, #12]
   14fca:	cmp	r1, #1
   14fcc:	beq.w	14ae8 <_vfiprintf_r+0x238>
   14fd0:	cmp	r1, #2
   14fd2:	add	r4, sp, #272	; 0x110
   14fd4:	bne.n	14ffa <_vfiprintf_r+0x74a>
   14fd6:	ldr	r0, [sp, #48]	; 0x30
   14fd8:	and.w	r1, r3, #15
   14fdc:	lsrs	r3, r3, #4
   14fde:	ldrb	r1, [r0, r1]
   14fe0:	strb.w	r1, [r4, #-1]!
   14fe4:	orr.w	r3, r3, r2, lsl #28
   14fe8:	lsrs	r2, r2, #4
   14fea:	orrs.w	r1, r3, r2
   14fee:	bne.n	14fd8 <_vfiprintf_r+0x728>
   14ff0:	ldr	r6, [sp, #12]
   14ff2:	add	r3, sp, #272	; 0x110
   14ff4:	subs	r3, r3, r4
   14ff6:	str	r3, [sp, #16]
   14ff8:	b.n	14b02 <_vfiprintf_r+0x252>
   14ffa:	and.w	r1, r3, #7
   14ffe:	lsrs	r3, r3, #3
   15000:	orr.w	r3, r3, r2, lsl #29
   15004:	lsrs	r2, r2, #3
   15006:	adds	r1, #48	; 0x30
   15008:	orrs.w	r5, r3, r2
   1500c:	mov	r0, r4
   1500e:	strb.w	r1, [r4, #-1]!
   15012:	bne.n	14ffa <_vfiprintf_r+0x74a>
   15014:	ldr	r6, [sp, #12]
   15016:	lsls	r3, r6, #31
   15018:	bpl.n	14ff2 <_vfiprintf_r+0x742>
   1501a:	cmp	r1, #48	; 0x30
   1501c:	beq.n	14ff0 <_vfiprintf_r+0x740>
   1501e:	movs	r3, #48	; 0x30
   15020:	subs	r0, #2
   15022:	strb.w	r3, [r4, #-1]
   15026:	add	r3, sp, #272	; 0x110
   15028:	subs	r3, r3, r0
   1502a:	ldr	r6, [sp, #12]
   1502c:	str	r3, [sp, #16]
   1502e:	mov	r4, r0
   15030:	b.n	14b02 <_vfiprintf_r+0x252>
   15032:	ldr	r3, [sp, #16]
   15034:	str	r4, [sp, #108]	; 0x6c
   15036:	movs	r2, #1
   15038:	str	r3, [sp, #112]	; 0x70
   1503a:	str	r3, [sp, #104]	; 0x68
   1503c:	str	r2, [sp, #100]	; 0x64
   1503e:	add.w	r9, sp, #108	; 0x6c
   15042:	add.w	r9, r9, #8
   15046:	b.n	14d84 <_vfiprintf_r+0x4d4>
   15048:	add.w	r9, sp, #108	; 0x6c
   1504c:	b.n	14946 <_vfiprintf_r+0x96>
   1504e:	ldr	r2, [sp, #24]
   15050:	ldr	r5, [sp, #12]
   15052:	subs	r5, r2, r5
   15054:	cmp	r5, #0
   15056:	ble.w	14d46 <_vfiprintf_r+0x496>
   1505a:	cmp	r5, #16
   1505c:	ble.w	157d6 <_vfiprintf_r+0xf26>
   15060:	str	r4, [sp, #36]	; 0x24
   15062:	vmov	r4, s16
   15066:	b.n	15078 <_vfiprintf_r+0x7c8>
   15068:	add.w	ip, r0, #2
   1506c:	add.w	r9, r9, #8
   15070:	mov	r0, r2
   15072:	subs	r5, #16
   15074:	cmp	r5, #16
   15076:	ble.n	150b6 <_vfiprintf_r+0x806>
   15078:	ldr	r1, [pc, #516]	; (15280 <_vfiprintf_r+0x9d0>)
   1507a:	str.w	r1, [r9]
   1507e:	adds	r2, r0, #1
   15080:	adds	r3, #16
   15082:	movs	r1, #16
   15084:	cmp	r2, #7
   15086:	strd	r2, r3, [sp, #100]	; 0x64
   1508a:	str.w	r1, [r9, #4]
   1508e:	ble.n	15068 <_vfiprintf_r+0x7b8>
   15090:	add	r2, sp, #96	; 0x60
   15092:	cmp	r3, #0
   15094:	beq.n	15180 <_vfiprintf_r+0x8d0>
   15096:	mov	r1, r4
   15098:	mov	r0, fp
   1509a:	add.w	r9, sp, #108	; 0x6c
   1509e:	bl	14838 <__sprint_r.part.0>
   150a2:	cmp	r0, #0
   150a4:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   150a8:	ldrd	r0, r3, [sp, #100]	; 0x64
   150ac:	subs	r5, #16
   150ae:	cmp	r5, #16
   150b0:	add.w	ip, r0, #1
   150b4:	bgt.n	15078 <_vfiprintf_r+0x7c8>
   150b6:	ldr	r4, [sp, #36]	; 0x24
   150b8:	ldr	r2, [pc, #452]	; (15280 <_vfiprintf_r+0x9d0>)
   150ba:	str.w	r5, [r9, #4]
   150be:	add	r3, r5
   150c0:	cmp.w	ip, #7
   150c4:	strd	ip, r3, [sp, #100]	; 0x64
   150c8:	str.w	r2, [r9]
   150cc:	ble.w	153f8 <_vfiprintf_r+0xb48>
   150d0:	cmp	r3, #0
   150d2:	beq.w	15714 <_vfiprintf_r+0xe64>
   150d6:	vmov	r1, s16
   150da:	add	r2, sp, #96	; 0x60
   150dc:	mov	r0, fp
   150de:	bl	14838 <__sprint_r.part.0>
   150e2:	cmp	r0, #0
   150e4:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   150e8:	ldr	r2, [sp, #16]
   150ea:	ldrd	r0, r3, [sp, #100]	; 0x64
   150ee:	subs	r5, r7, r2
   150f0:	cmp	r5, #0
   150f2:	add.w	r1, r0, #1
   150f6:	add.w	r9, sp, #108	; 0x6c
   150fa:	ble.w	14d50 <_vfiprintf_r+0x4a0>
   150fe:	cmp	r5, #16
   15100:	ble.n	15156 <_vfiprintf_r+0x8a6>
   15102:	str	r4, [sp, #36]	; 0x24
   15104:	movs	r7, #16
   15106:	vmov	r4, s16
   1510a:	b.n	1511c <_vfiprintf_r+0x86c>
   1510c:	add.w	ip, r0, #2
   15110:	add.w	r9, r9, #8
   15114:	mov	r0, r2
   15116:	subs	r5, #16
   15118:	cmp	r5, #16
   1511a:	ble.n	15152 <_vfiprintf_r+0x8a2>
   1511c:	adds	r2, r0, #1
   1511e:	ldr	r1, [pc, #352]	; (15280 <_vfiprintf_r+0x9d0>)
   15120:	adds	r3, #16
   15122:	cmp	r2, #7
   15124:	strd	r1, r7, [r9]
   15128:	strd	r2, r3, [sp, #100]	; 0x64
   1512c:	ble.n	1510c <_vfiprintf_r+0x85c>
   1512e:	add	r2, sp, #96	; 0x60
   15130:	cbz	r3, 15174 <_vfiprintf_r+0x8c4>
   15132:	mov	r1, r4
   15134:	mov	r0, fp
   15136:	add.w	r9, sp, #108	; 0x6c
   1513a:	bl	14838 <__sprint_r.part.0>
   1513e:	cmp	r0, #0
   15140:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   15144:	ldrd	r0, r3, [sp, #100]	; 0x64
   15148:	subs	r5, #16
   1514a:	cmp	r5, #16
   1514c:	add.w	ip, r0, #1
   15150:	bgt.n	1511c <_vfiprintf_r+0x86c>
   15152:	ldr	r4, [sp, #36]	; 0x24
   15154:	mov	r1, ip
   15156:	ldr	r2, [pc, #296]	; (15280 <_vfiprintf_r+0x9d0>)
   15158:	str.w	r5, [r9, #4]
   1515c:	add	r3, r5
   1515e:	cmp	r1, #7
   15160:	strd	r1, r3, [sp, #100]	; 0x64
   15164:	str.w	r2, [r9]
   15168:	bgt.w	1533a <_vfiprintf_r+0xa8a>
   1516c:	add.w	r9, r9, #8
   15170:	adds	r1, #1
   15172:	b.n	14d50 <_vfiprintf_r+0x4a0>
   15174:	mov.w	ip, #1
   15178:	mov	r0, r3
   1517a:	add.w	r9, sp, #108	; 0x6c
   1517e:	b.n	15116 <_vfiprintf_r+0x866>
   15180:	mov.w	ip, #1
   15184:	mov	r0, r3
   15186:	add.w	r9, sp, #108	; 0x6c
   1518a:	b.n	15072 <_vfiprintf_r+0x7c2>
   1518c:	cmp	r3, #0
   1518e:	beq.w	1539a <_vfiprintf_r+0xaea>
   15192:	vmov	r1, s16
   15196:	add	r2, sp, #96	; 0x60
   15198:	mov	r0, fp
   1519a:	bl	14838 <__sprint_r.part.0>
   1519e:	cmp	r0, #0
   151a0:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   151a4:	ldrd	r0, r3, [sp, #100]	; 0x64
   151a8:	add.w	r9, sp, #108	; 0x6c
   151ac:	adds	r1, r0, #1
   151ae:	b.n	14d00 <_vfiprintf_r+0x450>
   151b0:	movs	r3, #2
   151b2:	add	r2, sp, #68	; 0x44
   151b4:	str	r3, [sp, #112]	; 0x70
   151b6:	str	r2, [sp, #108]	; 0x6c
   151b8:	movs	r1, #1
   151ba:	add.w	r9, sp, #108	; 0x6c
   151be:	mov	r0, r1
   151c0:	add.w	r9, r9, #8
   151c4:	adds	r1, r0, #1
   151c6:	b.n	14d3e <_vfiprintf_r+0x48e>
   151c8:	cmp	r5, #16
   151ca:	ble.w	15798 <_vfiprintf_r+0xee8>
   151ce:	ldrd	r1, r3, [sp, #100]	; 0x64
   151d2:	str	r4, [sp, #60]	; 0x3c
   151d4:	mov	r0, r1
   151d6:	vmov	r4, s16
   151da:	b.n	151ec <_vfiprintf_r+0x93c>
   151dc:	add.w	ip, r0, #2
   151e0:	add.w	r9, r9, #8
   151e4:	mov	r0, r2
   151e6:	subs	r5, #16
   151e8:	cmp	r5, #16
   151ea:	ble.n	15228 <_vfiprintf_r+0x978>
   151ec:	ldr	r1, [pc, #148]	; (15284 <_vfiprintf_r+0x9d4>)
   151ee:	str.w	r1, [r9]
   151f2:	adds	r2, r0, #1
   151f4:	adds	r3, #16
   151f6:	movs	r1, #16
   151f8:	cmp	r2, #7
   151fa:	strd	r2, r3, [sp, #100]	; 0x64
   151fe:	str.w	r1, [r9, #4]
   15202:	ble.n	151dc <_vfiprintf_r+0x92c>
   15204:	add	r2, sp, #96	; 0x60
   15206:	cbz	r3, 1524a <_vfiprintf_r+0x99a>
   15208:	mov	r1, r4
   1520a:	mov	r0, fp
   1520c:	add.w	r9, sp, #108	; 0x6c
   15210:	bl	14838 <__sprint_r.part.0>
   15214:	cmp	r0, #0
   15216:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   1521a:	ldrd	r0, r3, [sp, #100]	; 0x64
   1521e:	subs	r5, #16
   15220:	cmp	r5, #16
   15222:	add.w	ip, r0, #1
   15226:	bgt.n	151ec <_vfiprintf_r+0x93c>
   15228:	ldr	r4, [sp, #60]	; 0x3c
   1522a:	mov	r0, ip
   1522c:	ldr	r2, [pc, #84]	; (15284 <_vfiprintf_r+0x9d4>)
   1522e:	str.w	r5, [r9, #4]
   15232:	add	r3, r5
   15234:	cmp	r0, #7
   15236:	strd	r0, r3, [sp, #100]	; 0x64
   1523a:	str.w	r2, [r9]
   1523e:	bgt.w	153c4 <_vfiprintf_r+0xb14>
   15242:	add.w	r9, r9, #8
   15246:	adds	r1, r0, #1
   15248:	b.n	14cd8 <_vfiprintf_r+0x428>
   1524a:	mov	r0, r3
   1524c:	mov.w	ip, #1
   15250:	add.w	r9, sp, #108	; 0x6c
   15254:	b.n	151e6 <_vfiprintf_r+0x936>
   15256:	lsls	r6, r6, #29
   15258:	str	r3, [sp, #100]	; 0x64
   1525a:	bpl.n	15304 <_vfiprintf_r+0xa54>
   1525c:	ldr	r2, [sp, #24]
   1525e:	ldr	r1, [sp, #12]
   15260:	subs	r4, r2, r1
   15262:	cmp	r4, #0
   15264:	ble.n	15304 <_vfiprintf_r+0xa54>
   15266:	add.w	r9, sp, #108	; 0x6c
   1526a:	cmp	r4, #16
   1526c:	ble.w	157d0 <_vfiprintf_r+0xf20>
   15270:	ldr	r1, [sp, #100]	; 0x64
   15272:	vmov	r6, s16
   15276:	movs	r5, #16
   15278:	b.n	15296 <_vfiprintf_r+0x9e6>
   1527a:	nop
   1527c:	.word	0x200009a8
   15280:	.word	0x20007888
   15284:	.word	0x20002464
   15288:	adds	r0, r1, #2
   1528a:	add.w	r9, r9, #8
   1528e:	mov	r1, r2
   15290:	subs	r4, #16
   15292:	cmp	r4, #16
   15294:	ble.n	152cc <_vfiprintf_r+0xa1c>
   15296:	adds	r2, r1, #1
   15298:	ldr	r0, [pc, #716]	; (15568 <_vfiprintf_r+0xcb8>)
   1529a:	adds	r3, #16
   1529c:	cmp	r2, #7
   1529e:	strd	r0, r5, [r9]
   152a2:	strd	r2, r3, [sp, #100]	; 0x64
   152a6:	ble.n	15288 <_vfiprintf_r+0x9d8>
   152a8:	add	r2, sp, #96	; 0x60
   152aa:	cbz	r3, 152fa <_vfiprintf_r+0xa4a>
   152ac:	mov	r1, r6
   152ae:	mov	r0, fp
   152b0:	bl	14838 <__sprint_r.part.0>
   152b4:	cmp	r0, #0
   152b6:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   152ba:	ldrd	r1, r3, [sp, #100]	; 0x64
   152be:	subs	r4, #16
   152c0:	cmp	r4, #16
   152c2:	add.w	r0, r1, #1
   152c6:	add.w	r9, sp, #108	; 0x6c
   152ca:	bgt.n	15296 <_vfiprintf_r+0x9e6>
   152cc:	ldr	r2, [pc, #664]	; (15568 <_vfiprintf_r+0xcb8>)
   152ce:	str.w	r4, [r9, #4]
   152d2:	add	r3, r4
   152d4:	cmp	r0, #7
   152d6:	strd	r0, r3, [sp, #100]	; 0x64
   152da:	str.w	r2, [r9]
   152de:	ble.w	14d94 <_vfiprintf_r+0x4e4>
   152e2:	cbz	r3, 15304 <_vfiprintf_r+0xa54>
   152e4:	vmov	r1, s16
   152e8:	add	r2, sp, #96	; 0x60
   152ea:	mov	r0, fp
   152ec:	bl	14838 <__sprint_r.part.0>
   152f0:	cmp	r0, #0
   152f2:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   152f6:	ldr	r3, [sp, #104]	; 0x68
   152f8:	b.n	14d94 <_vfiprintf_r+0x4e4>
   152fa:	movs	r0, #1
   152fc:	mov	r1, r3
   152fe:	add.w	r9, sp, #108	; 0x6c
   15302:	b.n	15290 <_vfiprintf_r+0x9e0>
   15304:	ldrd	r3, r2, [sp, #20]
   15308:	ldr	r1, [sp, #12]
   1530a:	cmp	r2, r1
   1530c:	ite	ge
   1530e:	addge	r3, r3, r2
   15310:	addlt	r3, r3, r1
   15312:	str	r3, [sp, #20]
   15314:	b.n	14daa <_vfiprintf_r+0x4fa>
   15316:	ldrsh.w	r1, [r2, #12]
   1531a:	lsls	r7, r1, #22
   1531c:	vmov	r3, s16
   15320:	uxth	r2, r1
   15322:	bmi.w	148f6 <_vfiprintf_r+0x46>
   15326:	vmov	r5, s16
   1532a:	ldr	r0, [r3, #88]	; 0x58
   1532c:	bl	dc88 <__retarget_lock_acquire_recursive>
   15330:	ldrsh.w	r1, [r5, #12]
   15334:	uxth	r2, r1
   15336:	b.w	148f6 <_vfiprintf_r+0x46>
   1533a:	cmp	r3, #0
   1533c:	beq.w	15032 <_vfiprintf_r+0x782>
   15340:	vmov	r1, s16
   15344:	add	r2, sp, #96	; 0x60
   15346:	mov	r0, fp
   15348:	bl	14838 <__sprint_r.part.0>
   1534c:	cmp	r0, #0
   1534e:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   15352:	ldr	r1, [sp, #100]	; 0x64
   15354:	ldr	r3, [sp, #104]	; 0x68
   15356:	adds	r1, #1
   15358:	add.w	r9, sp, #108	; 0x6c
   1535c:	b.n	14d50 <_vfiprintf_r+0x4a0>
   1535e:	str	r2, [sp, #100]	; 0x64
   15360:	add.w	r9, sp, #108	; 0x6c
   15364:	b.n	14c24 <_vfiprintf_r+0x374>
   15366:	cmp	r7, #0
   15368:	bne.w	14af2 <_vfiprintf_r+0x242>
   1536c:	ldr	r6, [sp, #12]
   1536e:	movs	r7, #0
   15370:	str	r7, [sp, #16]
   15372:	add	r4, sp, #272	; 0x110
   15374:	b.w	14b02 <_vfiprintf_r+0x252>
   15378:	ldr	r3, [sp, #12]
   1537a:	ands.w	r3, r3, #16
   1537e:	bne.n	1542a <_vfiprintf_r+0xb7a>
   15380:	ldr	r2, [sp, #12]
   15382:	ands.w	r0, r2, #64	; 0x40
   15386:	beq.w	15660 <_vfiprintf_r+0xdb0>
   1538a:	ldr	r1, [sp, #28]
   1538c:	mov	r2, r3
   1538e:	ldr.w	r3, [r1], #4
   15392:	str	r1, [sp, #28]
   15394:	uxth	r3, r3
   15396:	movs	r1, #1
   15398:	b.n	14b9e <_vfiprintf_r+0x2ee>
   1539a:	ldr	r2, [sp, #36]	; 0x24
   1539c:	cmp	r2, #0
   1539e:	bne.n	1546a <_vfiprintf_r+0xbba>
   153a0:	mov	r0, r3
   153a2:	movs	r1, #1
   153a4:	add.w	r9, sp, #108	; 0x6c
   153a8:	b.n	14d3e <_vfiprintf_r+0x48e>
   153aa:	movs	r1, #1
   153ac:	mov	r0, r3
   153ae:	add.w	r9, sp, #108	; 0x6c
   153b2:	b.n	14d3e <_vfiprintf_r+0x48e>
   153b4:	negs	r3, r3
   153b6:	sbc.w	r2, r2, r2, lsl #1
   153ba:	str	r6, [sp, #12]
   153bc:	movs	r0, #45	; 0x2d
   153be:	movs	r1, #1
   153c0:	b.w	14ba0 <_vfiprintf_r+0x2f0>
   153c4:	cmp	r3, #0
   153c6:	beq.w	154da <_vfiprintf_r+0xc2a>
   153ca:	vmov	r1, s16
   153ce:	add	r2, sp, #96	; 0x60
   153d0:	mov	r0, fp
   153d2:	bl	14838 <__sprint_r.part.0>
   153d6:	cmp	r0, #0
   153d8:	bne.w	14c5e <_vfiprintf_r+0x3ae>
   153dc:	ldrd	r0, r3, [sp, #100]	; 0x64
   153e0:	add.w	r9, sp, #108	; 0x6c
   153e4:	adds	r1, r0, #1
   153e6:	b.n	14cd8 <_vfiprintf_r+0x428>
   153e8:	ldrb.w	r1, [r8]
   153ec:	str	r3, [sp, #28]
   153ee:	b.w	14996 <_vfiprintf_r+0xe6>
   153f2:	add	r4, sp, #272	; 0x110
   153f4:	b.w	14b02 <_vfiprintf_r+0x252>
   153f8:	add.w	r9, r9, #8
   153fc:	add.w	r1, ip, #1
   15400:	mov	r0, ip
   15402:	b.n	14d46 <_vfiprintf_r+0x496>
   15404:	ands.w	r2, r6, #512	; 0x200
   15408:	bne.w	1573a <_vfiprintf_r+0xe8a>
   1540c:	ldr.w	r3, [r1], #4
   15410:	str	r1, [sp, #28]
   15412:	b.w	14b96 <_vfiprintf_r+0x2e6>
   15416:	lsls	r3, r6, #22
   15418:	bmi.w	1572c <_vfiprintf_r+0xe7c>
   1541c:	ldr.w	r3, [r2], #4
   15420:	str	r2, [sp, #28]
   15422:	asrs	r2, r3, #31
   15424:	mov	r1, r2
   15426:	b.w	14ace <_vfiprintf_r+0x21e>
   1542a:	ldr	r1, [sp, #28]
   1542c:	ldr.w	r3, [r1], #4
   15430:	str	r1, [sp, #28]
   15432:	movs	r1, #1
   15434:	b.w	14b9e <_vfiprintf_r+0x2ee>
   15438:	ldr	r3, [sp, #28]
   1543a:	ldr	r0, [sp, #20]
   1543c:	ldr.w	r1, [r3], #4
   15440:	str	r3, [sp, #28]
   15442:	asrs	r2, r0, #31
   15444:	strd	r0, r2, [r1]
   15448:	b.w	14946 <_vfiprintf_r+0x96>
   1544c:	ldr	r3, [sp, #44]	; 0x2c
   1544e:	cmp	r3, #0
   15450:	beq.w	14aa0 <_vfiprintf_r+0x1f0>
   15454:	ldr	r3, [sp, #44]	; 0x2c
   15456:	ldrb	r3, [r3, #0]
   15458:	cmp	r3, #0
   1545a:	beq.w	14aa0 <_vfiprintf_r+0x1f0>
   1545e:	ldrb.w	r1, [r8]
   15462:	orr.w	r6, r6, #1024	; 0x400
   15466:	b.w	14996 <_vfiprintf_r+0xe6>
   1546a:	movs	r3, #2
   1546c:	add	r2, sp, #68	; 0x44
   1546e:	str	r3, [sp, #112]	; 0x70
   15470:	str	r2, [sp, #108]	; 0x6c
   15472:	movs	r0, #1
   15474:	add.w	r9, sp, #108	; 0x6c
   15478:	b.n	151c0 <_vfiprintf_r+0x910>
   1547a:	str	r6, [sp, #12]
   1547c:	b.n	14f62 <_vfiprintf_r+0x6b2>
   1547e:	ldr	r3, [pc, #236]	; (1556c <_vfiprintf_r+0xcbc>)
   15480:	str	r3, [sp, #48]	; 0x30
   15482:	ands.w	r2, r6, #32
   15486:	beq.n	1553c <_vfiprintf_r+0xc8c>
   15488:	ldr	r3, [sp, #28]
   1548a:	adds	r3, #7
   1548c:	bic.w	r3, r3, #7
   15490:	mov	r0, r3
   15492:	ldr	r2, [r3, #4]
   15494:	ldr.w	r3, [r0], #8
   15498:	str	r0, [sp, #28]
   1549a:	lsls	r4, r6, #31
   1549c:	bpl.n	154b2 <_vfiprintf_r+0xc02>
   1549e:	orrs.w	r0, r3, r2
   154a2:	beq.n	154b2 <_vfiprintf_r+0xc02>
   154a4:	strb.w	r1, [sp, #69]	; 0x45
   154a8:	movs	r1, #48	; 0x30
   154aa:	orr.w	r6, r6, #2
   154ae:	strb.w	r1, [sp, #68]	; 0x44
   154b2:	bic.w	r1, r6, #1024	; 0x400
   154b6:	str	r1, [sp, #12]
   154b8:	movs	r1, #2
   154ba:	b.w	14b9e <_vfiprintf_r+0x2ee>
   154be:	ldr	r3, [pc, #176]	; (15570 <_vfiprintf_r+0xcc0>)
   154c0:	str	r3, [sp, #48]	; 0x30
   154c2:	b.n	15482 <_vfiprintf_r+0xbd2>
   154c4:	ldr	r3, [sp, #28]
   154c6:	movs	r1, #1
   154c8:	ldr.w	r2, [r3], #4
   154cc:	str	r1, [sp, #12]
   154ce:	strb.w	r2, [sp, #172]	; 0xac
   154d2:	str	r3, [sp, #28]
   154d4:	str	r1, [sp, #16]
   154d6:	add	r4, sp, #172	; 0xac
   154d8:	b.n	14e9a <_vfiprintf_r+0x5ea>
   154da:	ldrb.w	r2, [sp, #67]	; 0x43
   154de:	cmp	r2, #0
   154e0:	bne.w	15748 <_vfiprintf_r+0xe98>
   154e4:	ldr	r2, [sp, #36]	; 0x24
   154e6:	cmp	r2, #0
   154e8:	bne.w	151b0 <_vfiprintf_r+0x900>
   154ec:	mov	r0, r3
   154ee:	movs	r1, #1
   154f0:	add.w	r9, sp, #108	; 0x6c
   154f4:	b.n	14d46 <_vfiprintf_r+0x496>
   154f6:	movs	r1, #0
   154f8:	movs	r2, #8
   154fa:	add	r0, sp, #88	; 0x58
   154fc:	str	r4, [sp, #76]	; 0x4c
   154fe:	bl	9444 <memset>
   15502:	adds	r1, r7, #1
   15504:	beq.w	15680 <_vfiprintf_r+0xdd0>
   15508:	movs	r5, #0
   1550a:	str	r4, [sp, #28]
   1550c:	mov	r4, r5
   1550e:	b.n	1552a <_vfiprintf_r+0xc7a>
   15510:	add	r1, sp, #172	; 0xac
   15512:	mov	r0, fp
   15514:	bl	14374 <_wcrtomb_r>
   15518:	adds	r2, r0, #1
   1551a:	add	r0, r4
   1551c:	beq.w	157f6 <_vfiprintf_r+0xf46>
   15520:	cmp	r0, r7
   15522:	bgt.n	15536 <_vfiprintf_r+0xc86>
   15524:	beq.w	15808 <_vfiprintf_r+0xf58>
   15528:	mov	r4, r0
   1552a:	ldr	r2, [sp, #76]	; 0x4c
   1552c:	ldr	r2, [r2, r5]
   1552e:	add	r3, sp, #88	; 0x58
   15530:	adds	r5, #4
   15532:	cmp	r2, #0
   15534:	bne.n	15510 <_vfiprintf_r+0xc60>
   15536:	str	r4, [sp, #16]
   15538:	ldr	r4, [sp, #28]
   1553a:	b.n	1569c <_vfiprintf_r+0xdec>
   1553c:	ands.w	r3, r6, #16
   15540:	ldr	r0, [sp, #28]
   15542:	bne.n	1555e <_vfiprintf_r+0xcae>
   15544:	ands.w	r4, r6, #64	; 0x40
   15548:	beq.n	15556 <_vfiprintf_r+0xca6>
   1554a:	mov	r2, r3
   1554c:	ldr.w	r3, [r0], #4
   15550:	str	r0, [sp, #28]
   15552:	uxth	r3, r3
   15554:	b.n	1549a <_vfiprintf_r+0xbea>
   15556:	ands.w	r2, r6, #512	; 0x200
   1555a:	bne.w	15720 <_vfiprintf_r+0xe70>
   1555e:	ldr.w	r3, [r0], #4
   15562:	str	r0, [sp, #28]
   15564:	b.n	1549a <_vfiprintf_r+0xbea>
   15566:	nop
   15568:	.word	0x20002464
   1556c:	.word	0x200009a8
   15570:	.word	0x200009bc
   15574:	ldr	r1, [sp, #12]
   15576:	str	r7, [sp, #16]
   15578:	add	r4, sp, #272	; 0x110
   1557a:	mov	lr, r3
   1557c:	vmov	s17, fp
   15580:	and.w	r6, r1, #1024	; 0x400
   15584:	mov.w	ip, #0
   15588:	mov	r3, r4
   1558a:	b.n	1559a <_vfiprintf_r+0xcea>
   1558c:	cmp.w	lr, #10
   15590:	sbcs.w	r2, r2, #0
   15594:	bcc.n	1560a <_vfiprintf_r+0xd5a>
   15596:	mov	lr, r4
   15598:	mov	r2, r5
   1559a:	ldr	r1, [pc, #664]	; (15834 <_vfiprintf_r+0xf84>)
   1559c:	adds.w	r0, lr, r2
   155a0:	adc.w	r0, r0, #0
   155a4:	mov	r7, r1
   155a6:	umull	r1, r4, r1, r0
   155aa:	bic.w	r1, r4, #3
   155ae:	add.w	r1, r1, r4, lsr #2
   155b2:	subs	r0, r0, r1
   155b4:	subs.w	r1, lr, r0
   155b8:	mov.w	r5, #3435973836	; 0xcccccccc
   155bc:	sbc.w	r4, r2, #0
   155c0:	mul.w	r5, r5, r1
   155c4:	mla	r5, r7, r4, r5
   155c8:	umull	r4, r1, r1, r7
   155cc:	add	r5, r1
   155ce:	movs	r7, #5
   155d0:	and.w	r1, r4, #1
   155d4:	umull	r1, fp, r1, r7
   155d8:	adds	r1, r1, r0
   155da:	lsrs	r4, r4, #1
   155dc:	adds	r1, #48	; 0x30
   155de:	strb.w	r1, [r3, #-1]
   155e2:	orr.w	r4, r4, r5, lsl #31
   155e6:	add.w	ip, ip, #1
   155ea:	subs	r3, #1
   155ec:	lsrs	r5, r5, #1
   155ee:	cmp	r6, #0
   155f0:	beq.n	1558c <_vfiprintf_r+0xcdc>
   155f2:	ldr	r1, [sp, #44]	; 0x2c
   155f4:	ldrb	r1, [r1, #0]
   155f6:	cmp	r1, ip
   155f8:	bne.n	1558c <_vfiprintf_r+0xcdc>
   155fa:	cmp.w	ip, #255	; 0xff
   155fe:	beq.n	1558c <_vfiprintf_r+0xcdc>
   15600:	cmp.w	lr, #10
   15604:	sbcs.w	r2, r2, #0
   15608:	bcs.n	156e4 <_vfiprintf_r+0xe34>
   1560a:	mov	r4, r3
   1560c:	add	r3, sp, #272	; 0x110
   1560e:	subs	r3, r3, r4
   15610:	ldr	r7, [sp, #16]
   15612:	ldr	r6, [sp, #12]
   15614:	str	r3, [sp, #16]
   15616:	vmov	fp, s17
   1561a:	b.w	14b02 <_vfiprintf_r+0x252>
   1561e:	str	r6, [sp, #12]
   15620:	b.w	14ae8 <_vfiprintf_r+0x238>
   15624:	mov	r0, fp
   15626:	bl	d548 <__sinit>
   1562a:	b.w	148e4 <_vfiprintf_r+0x34>
   1562e:	cmp	r1, #1
   15630:	str	r6, [sp, #12]
   15632:	bne.w	14fd0 <_vfiprintf_r+0x720>
   15636:	b.w	14af2 <_vfiprintf_r+0x242>
   1563a:	ldr	r3, [sp, #28]
   1563c:	ldr	r1, [sp, #20]
   1563e:	ldr.w	r2, [r3], #4
   15642:	str	r1, [r2, #0]
   15644:	str	r3, [sp, #28]
   15646:	b.w	14946 <_vfiprintf_r+0x96>
   1564a:	cmp	r7, #6
   1564c:	mov	r3, r7
   1564e:	ldr	r2, [sp, #12]
   15650:	ldr	r4, [pc, #484]	; (15838 <_vfiprintf_r+0xf88>)
   15652:	str	r2, [sp, #28]
   15654:	it	cs
   15656:	movcs	r3, #6
   15658:	str	r3, [sp, #16]
   1565a:	str	r3, [sp, #12]
   1565c:	b.w	14caa <_vfiprintf_r+0x3fa>
   15660:	ldr	r3, [sp, #12]
   15662:	ldr	r1, [sp, #28]
   15664:	ands.w	r2, r3, #512	; 0x200
   15668:	ite	ne
   1566a:	ldrne.w	r3, [r1], #4
   1566e:	ldreq.w	r3, [r1], #4
   15672:	str	r1, [sp, #28]
   15674:	itt	ne
   15676:	movne	r2, r0
   15678:	uxtbne	r3, r3
   1567a:	movs	r1, #1
   1567c:	b.w	14b9e <_vfiprintf_r+0x2ee>
   15680:	add	r3, sp, #88	; 0x58
   15682:	str	r3, [sp, #0]
   15684:	movs	r3, #0
   15686:	mov	r1, r3
   15688:	add	r2, sp, #76	; 0x4c
   1568a:	mov	r0, fp
   1568c:	bl	143c0 <_wcsrtombs_r>
   15690:	mov	r3, r0
   15692:	adds	r3, #1
   15694:	str	r0, [sp, #16]
   15696:	beq.w	157f6 <_vfiprintf_r+0xf46>
   1569a:	str	r4, [sp, #76]	; 0x4c
   1569c:	ldr	r3, [sp, #16]
   1569e:	cmp	r3, #0
   156a0:	beq.n	15704 <_vfiprintf_r+0xe54>
   156a2:	cmp	r3, #99	; 0x63
   156a4:	bgt.n	1576e <_vfiprintf_r+0xebe>
   156a6:	movs	r3, #0
   156a8:	str	r3, [sp, #32]
   156aa:	add	r4, sp, #172	; 0xac
   156ac:	movs	r2, #8
   156ae:	movs	r1, #0
   156b0:	add	r0, sp, #88	; 0x58
   156b2:	bl	9444 <memset>
   156b6:	ldr	r5, [sp, #16]
   156b8:	add	r3, sp, #88	; 0x58
   156ba:	str	r3, [sp, #0]
   156bc:	add	r2, sp, #76	; 0x4c
   156be:	mov	r3, r5
   156c0:	mov	r1, r4
   156c2:	mov	r0, fp
   156c4:	bl	143c0 <_wcsrtombs_r>
   156c8:	cmp	r5, r0
   156ca:	bne.w	15824 <_vfiprintf_r+0xf74>
   156ce:	ldr	r3, [sp, #12]
   156d0:	ldr	r2, [sp, #16]
   156d2:	str	r3, [sp, #28]
   156d4:	movs	r3, #0
   156d6:	strb	r3, [r4, r2]
   156d8:	mov	r7, r3
   156da:	bic.w	r3, r2, r2, asr #31
   156de:	str	r3, [sp, #12]
   156e0:	b.w	14b10 <_vfiprintf_r+0x260>
   156e4:	ldr	r2, [sp, #56]	; 0x38
   156e6:	ldr	r1, [sp, #52]	; 0x34
   156e8:	subs	r3, r3, r2
   156ea:	mov	r0, r3
   156ec:	str	r3, [sp, #32]
   156ee:	bl	daf0 <strncpy>
   156f2:	ldr	r1, [sp, #44]	; 0x2c
   156f4:	ldr	r3, [sp, #32]
   156f6:	ldrb	r2, [r1, #1]
   156f8:	cbz	r2, 156fe <_vfiprintf_r+0xe4e>
   156fa:	adds	r1, #1
   156fc:	str	r1, [sp, #44]	; 0x2c
   156fe:	mov.w	ip, #0
   15702:	b.n	15596 <_vfiprintf_r+0xce6>
   15704:	ldr	r3, [sp, #12]
   15706:	str	r3, [sp, #28]
   15708:	ldr	r3, [sp, #16]
   1570a:	str	r3, [sp, #12]
   1570c:	mov	r7, r3
   1570e:	str	r3, [sp, #32]
   15710:	b.w	14b10 <_vfiprintf_r+0x260>
   15714:	movs	r1, #1
   15716:	mov	r0, r3
   15718:	add.w	r9, sp, #108	; 0x6c
   1571c:	b.w	14d46 <_vfiprintf_r+0x496>
   15720:	ldr.w	r3, [r0], #4
   15724:	str	r0, [sp, #28]
   15726:	mov	r2, r4
   15728:	uxtb	r3, r3
   1572a:	b.n	1549a <_vfiprintf_r+0xbea>
   1572c:	ldrsb.w	r3, [r2], #4
   15730:	str	r2, [sp, #28]
   15732:	asrs	r2, r3, #31
   15734:	mov	r1, r2
   15736:	b.w	14ace <_vfiprintf_r+0x21e>
   1573a:	ldr.w	r3, [r1], #4
   1573e:	str	r1, [sp, #28]
   15740:	mov	r2, r0
   15742:	uxtb	r3, r3
   15744:	b.w	14b96 <_vfiprintf_r+0x2e6>
   15748:	movs	r3, #1
   1574a:	str	r3, [sp, #112]	; 0x70
   1574c:	movs	r1, #1
   1574e:	add.w	r3, sp, #67	; 0x43
   15752:	str	r3, [sp, #108]	; 0x6c
   15754:	add.w	r9, sp, #108	; 0x6c
   15758:	mov	r3, r1
   1575a:	b.w	14cf8 <_vfiprintf_r+0x448>
   1575e:	ldr	r3, [sp, #28]
   15760:	ldr	r1, [sp, #20]
   15762:	ldr.w	r2, [r3], #4
   15766:	str	r3, [sp, #28]
   15768:	strh	r1, [r2, #0]
   1576a:	b.w	14946 <_vfiprintf_r+0x96>
   1576e:	adds	r1, r3, #1
   15770:	mov	r0, fp
   15772:	bl	bad8 <_malloc_r>
   15776:	mov	r4, r0
   15778:	cmp	r0, #0
   1577a:	beq.n	157f6 <_vfiprintf_r+0xf46>
   1577c:	str	r0, [sp, #32]
   1577e:	b.n	156ac <_vfiprintf_r+0xdfc>
   15780:	ldr	r0, [r1, #88]	; 0x58
   15782:	bl	dc8c <__retarget_lock_release_recursive>
   15786:	b.w	14b5c <_vfiprintf_r+0x2ac>
   1578a:	ldr	r3, [sp, #12]
   1578c:	str	r3, [sp, #28]
   1578e:	strd	r7, r7, [sp, #12]
   15792:	ldr	r7, [sp, #32]
   15794:	b.w	14b10 <_vfiprintf_r+0x260>
   15798:	ldr	r0, [sp, #100]	; 0x64
   1579a:	ldr	r3, [sp, #104]	; 0x68
   1579c:	adds	r0, #1
   1579e:	b.n	1522c <_vfiprintf_r+0x97c>
   157a0:	ldr	r3, [sp, #12]
   157a2:	str	r3, [sp, #28]
   157a4:	mov	r0, r4
   157a6:	bl	e100 <strlen>
   157aa:	bic.w	r3, r0, r0, asr #31
   157ae:	mov	r7, r5
   157b0:	str	r0, [sp, #16]
   157b2:	str	r3, [sp, #12]
   157b4:	str	r5, [sp, #32]
   157b6:	b.w	14b10 <_vfiprintf_r+0x260>
   157ba:	vmov	r1, s16
   157be:	add	r2, sp, #96	; 0x60
   157c0:	mov	r0, fp
   157c2:	bl	14838 <__sprint_r.part.0>
   157c6:	cmp	r0, #0
   157c8:	beq.w	14c38 <_vfiprintf_r+0x388>
   157cc:	b.w	14c6a <_vfiprintf_r+0x3ba>
   157d0:	ldr	r0, [sp, #100]	; 0x64
   157d2:	adds	r0, #1
   157d4:	b.n	152cc <_vfiprintf_r+0xa1c>
   157d6:	mov	ip, r1
   157d8:	b.n	150b8 <_vfiprintf_r+0x808>
   157da:	ldr	r3, [r5, #100]	; 0x64
   157dc:	lsls	r1, r3, #31
   157de:	bmi.n	157ec <_vfiprintf_r+0xf3c>
   157e0:	ldrh	r3, [r5, #12]
   157e2:	lsls	r2, r3, #22
   157e4:	bmi.n	157ec <_vfiprintf_r+0xf3c>
   157e6:	ldr	r0, [r5, #88]	; 0x58
   157e8:	bl	dc8c <__retarget_lock_release_recursive>
   157ec:	mov.w	r3, #4294967295
   157f0:	str	r3, [sp, #20]
   157f2:	b.w	14c88 <_vfiprintf_r+0x3d8>
   157f6:	vmov	r2, s16
   157fa:	ldrsh.w	r3, [r2, #12]
   157fe:	orr.w	r3, r3, #64	; 0x40
   15802:	strh	r3, [r2, #12]
   15804:	b.w	14c72 <_vfiprintf_r+0x3c2>
   15808:	ldr	r4, [sp, #28]
   1580a:	str	r7, [sp, #16]
   1580c:	b.n	1569c <_vfiprintf_r+0xdec>
   1580e:	ldr	r3, [sp, #28]
   15810:	ldrb.w	r1, [r8, #1]
   15814:	ldr.w	r7, [r3], #4
   15818:	str	r3, [sp, #28]
   1581a:	mov	r8, r2
   1581c:	orr.w	r7, r7, r7, asr #31
   15820:	b.w	14996 <_vfiprintf_r+0xe6>
   15824:	vmov	r2, s16
   15828:	ldrh	r3, [r2, #12]
   1582a:	orr.w	r3, r3, #64	; 0x40
   1582e:	strh	r3, [r2, #12]
   15830:	b.w	14c5e <_vfiprintf_r+0x3ae>
   15834:	.word	0xcccccccd
   15838:	.word	0x200009d0

0001583c <__sbprintf>:
   1583c:	push	{r4, r5, r6, lr}
   1583e:	mov	r4, r1
   15840:	ldrh	r1, [r1, #12]
   15842:	sub.w	sp, sp, #1136	; 0x470
   15846:	bic.w	r1, r1, #2
   1584a:	strh.w	r1, [sp, #20]
   1584e:	ldr	r1, [r4, #100]	; 0x64
   15850:	str	r1, [sp, #108]	; 0x6c
   15852:	ldrh	r1, [r4, #14]
   15854:	strh.w	r1, [sp, #22]
   15858:	ldr	r1, [r4, #28]
   1585a:	str	r1, [sp, #36]	; 0x24
   1585c:	ldr	r1, [r4, #36]	; 0x24
   1585e:	str	r1, [sp, #44]	; 0x2c
   15860:	add	r1, sp, #112	; 0x70
   15862:	str	r1, [sp, #8]
   15864:	str	r1, [sp, #24]
   15866:	mov.w	r1, #1024	; 0x400
   1586a:	mov	r6, r0
   1586c:	str	r1, [sp, #16]
   1586e:	str	r1, [sp, #28]
   15870:	add	r0, sp, #96	; 0x60
   15872:	movs	r1, #0
   15874:	strd	r3, r2, [sp]
   15878:	str	r1, [sp, #32]
   1587a:	bl	dc80 <__retarget_lock_init_recursive>
   1587e:	ldrd	r3, r2, [sp]
   15882:	add	r1, sp, #8
   15884:	mov	r0, r6
   15886:	bl	148b0 <_vfiprintf_r>
   1588a:	subs	r5, r0, #0
   1588c:	blt.n	1589e <__sbprintf+0x62>
   1588e:	add	r1, sp, #8
   15890:	mov	r0, r6
   15892:	bl	12e3c <_fflush_r>
   15896:	cmp	r0, #0
   15898:	it	ne
   1589a:	movne.w	r5, #4294967295
   1589e:	ldrh.w	r3, [sp, #20]
   158a2:	lsls	r3, r3, #25
   158a4:	bpl.n	158ae <__sbprintf+0x72>
   158a6:	ldrh	r3, [r4, #12]
   158a8:	orr.w	r3, r3, #64	; 0x40
   158ac:	strh	r3, [r4, #12]
   158ae:	ldr	r0, [sp, #96]	; 0x60
   158b0:	bl	dc84 <__retarget_lock_close_recursive>
   158b4:	mov	r0, r5
   158b6:	add.w	sp, sp, #1136	; 0x470
   158ba:	pop	{r4, r5, r6, pc}

000158bc <__sfvwrite_r>:
   158bc:	ldr	r3, [r2, #8]
   158be:	cmp	r3, #0
   158c0:	beq.w	159ce <__sfvwrite_r+0x112>
   158c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158c8:	ldrsh.w	r3, [r1, #12]
   158cc:	mov	r4, r1
   158ce:	lsls	r1, r3, #28
   158d0:	mov	r8, r0
   158d2:	sub	sp, #12
   158d4:	mov	r7, r2
   158d6:	uxth	r0, r3
   158d8:	bpl.n	15926 <__sfvwrite_r+0x6a>
   158da:	ldr	r3, [r4, #16]
   158dc:	cbz	r3, 15926 <__sfvwrite_r+0x6a>
   158de:	ands.w	r3, r0, #2
   158e2:	ldr	r5, [r7, #0]
   158e4:	beq.n	15942 <__sfvwrite_r+0x86>
   158e6:	mov.w	sl, #0
   158ea:	ldr.w	fp, [pc, #704]	; 15bac <__sfvwrite_r+0x2f0>
   158ee:	mov	r6, sl
   158f0:	mov	r9, r7
   158f2:	cmp	r6, fp
   158f4:	mov	r3, r6
   158f6:	mov	r2, sl
   158f8:	it	cs
   158fa:	movcs	r3, fp
   158fc:	mov	r0, r8
   158fe:	cmp	r6, #0
   15900:	beq.n	159a8 <__sfvwrite_r+0xec>
   15902:	ldr	r1, [r4, #28]
   15904:	ldr	r7, [r4, #36]	; 0x24
   15906:	blx	r7
   15908:	cmp	r0, #0
   1590a:	ble.n	159ba <__sfvwrite_r+0xfe>
   1590c:	ldr.w	r3, [r9, #8]
   15910:	subs	r3, r3, r0
   15912:	add	sl, r0
   15914:	subs	r6, r6, r0
   15916:	str.w	r3, [r9, #8]
   1591a:	cmp	r3, #0
   1591c:	bne.n	158f2 <__sfvwrite_r+0x36>
   1591e:	movs	r0, #0
   15920:	add	sp, #12
   15922:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15926:	mov	r1, r4
   15928:	mov	r0, r8
   1592a:	bl	15c28 <__swsetup_r>
   1592e:	cmp	r0, #0
   15930:	bne.w	15ba4 <__sfvwrite_r+0x2e8>
   15934:	ldrsh.w	r3, [r4, #12]
   15938:	ldr	r5, [r7, #0]
   1593a:	uxth	r0, r3
   1593c:	ands.w	r3, r0, #2
   15940:	bne.n	158e6 <__sfvwrite_r+0x2a>
   15942:	ands.w	r9, r0, #1
   15946:	bne.n	159d2 <__sfvwrite_r+0x116>
   15948:	mov	r6, r9
   1594a:	str	r7, [sp, #0]
   1594c:	cbz	r6, 159a0 <__sfvwrite_r+0xe4>
   1594e:	lsls	r2, r0, #22
   15950:	ldr.w	fp, [r4, #8]
   15954:	bpl.w	15a62 <__sfvwrite_r+0x1a6>
   15958:	cmp	fp, r6
   1595a:	mov	r2, fp
   1595c:	bhi.w	15ac8 <__sfvwrite_r+0x20c>
   15960:	tst.w	r0, #1152	; 0x480
   15964:	bne.w	15aea <__sfvwrite_r+0x22e>
   15968:	ldr	r0, [r4, #0]
   1596a:	str	r2, [sp, #4]
   1596c:	mov	r1, r9
   1596e:	bl	d8c0 <memmove>
   15972:	ldr	r3, [r4, #8]
   15974:	ldr	r2, [sp, #4]
   15976:	sub.w	r1, r3, fp
   1597a:	ldr	r3, [r4, #0]
   1597c:	str	r1, [r4, #8]
   1597e:	add	r3, r2
   15980:	mov	sl, r6
   15982:	str	r3, [r4, #0]
   15984:	movs	r6, #0
   15986:	ldr	r2, [sp, #0]
   15988:	ldr	r3, [r2, #8]
   1598a:	sub.w	r3, r3, sl
   1598e:	add	r9, sl
   15990:	str	r3, [r2, #8]
   15992:	cmp	r3, #0
   15994:	beq.n	1591e <__sfvwrite_r+0x62>
   15996:	ldrsh.w	r0, [r4, #12]
   1599a:	uxth	r0, r0
   1599c:	cmp	r6, #0
   1599e:	bne.n	1594e <__sfvwrite_r+0x92>
   159a0:	ldrd	r9, r6, [r5]
   159a4:	adds	r5, #8
   159a6:	b.n	1594c <__sfvwrite_r+0x90>
   159a8:	ldrd	sl, r6, [r5]
   159ac:	adds	r5, #8
   159ae:	b.n	158f2 <__sfvwrite_r+0x36>
   159b0:	mov	r1, r4
   159b2:	mov	r0, r8
   159b4:	bl	12e3c <_fflush_r>
   159b8:	cbz	r0, 15a1e <__sfvwrite_r+0x162>
   159ba:	ldrsh.w	r3, [r4, #12]
   159be:	orr.w	r3, r3, #64	; 0x40
   159c2:	mov.w	r0, #4294967295
   159c6:	strh	r3, [r4, #12]
   159c8:	add	sp, #12
   159ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159ce:	movs	r0, #0
   159d0:	bx	lr
   159d2:	mov	r6, r3
   159d4:	mov	sl, r7
   159d6:	mov	r9, r3
   159d8:	mov	r0, r3
   159da:	str	r5, [sp, #0]
   159dc:	mov	r7, r3
   159de:	cbz	r6, 15a3a <__sfvwrite_r+0x17e>
   159e0:	cmp	r0, #0
   159e2:	beq.n	15a4a <__sfvwrite_r+0x18e>
   159e4:	mov	r2, r9
   159e6:	ldrd	r1, r3, [r4, #16]
   159ea:	ldr	r0, [r4, #0]
   159ec:	ldr	r5, [r4, #8]
   159ee:	cmp	r2, r6
   159f0:	it	cs
   159f2:	movcs	r2, r6
   159f4:	cmp	r0, r1
   159f6:	bls.n	15a02 <__sfvwrite_r+0x146>
   159f8:	add.w	fp, r5, r3
   159fc:	cmp	r2, fp
   159fe:	bgt.w	15b50 <__sfvwrite_r+0x294>
   15a02:	cmp	r3, r2
   15a04:	bgt.n	15ad0 <__sfvwrite_r+0x214>
   15a06:	ldr	r1, [r4, #28]
   15a08:	ldr	r5, [r4, #36]	; 0x24
   15a0a:	mov	r2, r7
   15a0c:	mov	r0, r8
   15a0e:	blx	r5
   15a10:	subs.w	fp, r0, #0
   15a14:	ble.n	159ba <__sfvwrite_r+0xfe>
   15a16:	subs.w	r9, r9, fp
   15a1a:	beq.n	159b0 <__sfvwrite_r+0xf4>
   15a1c:	movs	r0, #1
   15a1e:	ldr.w	r3, [sl, #8]
   15a22:	sub.w	r3, r3, fp
   15a26:	add	r7, fp
   15a28:	sub.w	r6, r6, fp
   15a2c:	str.w	r3, [sl, #8]
   15a30:	cmp	r3, #0
   15a32:	beq.w	1591e <__sfvwrite_r+0x62>
   15a36:	cmp	r6, #0
   15a38:	bne.n	159e0 <__sfvwrite_r+0x124>
   15a3a:	ldr	r2, [sp, #0]
   15a3c:	ldr	r6, [r2, #4]
   15a3e:	mov	r3, r2
   15a40:	adds	r2, #8
   15a42:	str	r2, [sp, #0]
   15a44:	cmp	r6, #0
   15a46:	beq.n	15a3a <__sfvwrite_r+0x17e>
   15a48:	ldr	r7, [r3, #0]
   15a4a:	mov	r2, r6
   15a4c:	movs	r1, #10
   15a4e:	mov	r0, r7
   15a50:	bl	e040 <memchr>
   15a54:	cmp	r0, #0
   15a56:	beq.w	15b92 <__sfvwrite_r+0x2d6>
   15a5a:	adds	r0, #1
   15a5c:	sub.w	r9, r0, r7
   15a60:	b.n	159e4 <__sfvwrite_r+0x128>
   15a62:	ldr	r0, [r4, #0]
   15a64:	ldr	r3, [r4, #16]
   15a66:	cmp	r0, r3
   15a68:	bhi.n	15a98 <__sfvwrite_r+0x1dc>
   15a6a:	ldr	r2, [r4, #20]
   15a6c:	cmp	r2, r6
   15a6e:	bhi.n	15a98 <__sfvwrite_r+0x1dc>
   15a70:	mvn.w	r3, #2147483648	; 0x80000000
   15a74:	cmp	r3, r6
   15a76:	it	cs
   15a78:	movcs	r3, r6
   15a7a:	ldr	r1, [r4, #28]
   15a7c:	sdiv	r3, r3, r2
   15a80:	ldr	r7, [r4, #36]	; 0x24
   15a82:	mul.w	r3, r2, r3
   15a86:	mov	r0, r8
   15a88:	mov	r2, r9
   15a8a:	blx	r7
   15a8c:	subs.w	sl, r0, #0
   15a90:	ble.n	159ba <__sfvwrite_r+0xfe>
   15a92:	sub.w	r6, r6, sl
   15a96:	b.n	15986 <__sfvwrite_r+0xca>
   15a98:	cmp	fp, r6
   15a9a:	mov	sl, fp
   15a9c:	it	cs
   15a9e:	movcs	sl, r6
   15aa0:	mov	r2, sl
   15aa2:	mov	r1, r9
   15aa4:	bl	d8c0 <memmove>
   15aa8:	ldr	r3, [r4, #8]
   15aaa:	ldr	r2, [r4, #0]
   15aac:	sub.w	r3, r3, sl
   15ab0:	add	r2, sl
   15ab2:	str	r3, [r4, #8]
   15ab4:	str	r2, [r4, #0]
   15ab6:	cmp	r3, #0
   15ab8:	bne.n	15a92 <__sfvwrite_r+0x1d6>
   15aba:	mov	r1, r4
   15abc:	mov	r0, r8
   15abe:	bl	12e3c <_fflush_r>
   15ac2:	cmp	r0, #0
   15ac4:	beq.n	15a92 <__sfvwrite_r+0x1d6>
   15ac6:	b.n	159ba <__sfvwrite_r+0xfe>
   15ac8:	ldr	r0, [r4, #0]
   15aca:	mov	fp, r6
   15acc:	mov	r2, r6
   15ace:	b.n	1596a <__sfvwrite_r+0xae>
   15ad0:	mov	r1, r7
   15ad2:	str	r2, [sp, #4]
   15ad4:	bl	d8c0 <memmove>
   15ad8:	ldr	r2, [sp, #4]
   15ada:	ldr	r3, [r4, #8]
   15adc:	subs	r3, r3, r2
   15ade:	str	r3, [r4, #8]
   15ae0:	ldr	r3, [r4, #0]
   15ae2:	add	r3, r2
   15ae4:	str	r3, [r4, #0]
   15ae6:	mov	fp, r2
   15ae8:	b.n	15a16 <__sfvwrite_r+0x15a>
   15aea:	ldr	r3, [r4, #0]
   15aec:	ldr	r1, [r4, #16]
   15aee:	sub.w	fp, r3, r1
   15af2:	ldr	r3, [r4, #20]
   15af4:	add.w	sl, r3, r3, lsl #1
   15af8:	add.w	sl, sl, sl, lsr #31
   15afc:	add.w	r3, fp, #1
   15b00:	mov.w	sl, sl, asr #1
   15b04:	add	r3, r6
   15b06:	cmp	r3, sl
   15b08:	mov	r2, sl
   15b0a:	itt	hi
   15b0c:	movhi	sl, r3
   15b0e:	movhi	r2, sl
   15b10:	lsls	r3, r0, #21
   15b12:	bpl.n	15b6e <__sfvwrite_r+0x2b2>
   15b14:	mov	r1, r2
   15b16:	mov	r0, r8
   15b18:	bl	bad8 <_malloc_r>
   15b1c:	cmp	r0, #0
   15b1e:	beq.n	15b98 <__sfvwrite_r+0x2dc>
   15b20:	mov	r2, fp
   15b22:	ldr	r1, [r4, #16]
   15b24:	str	r0, [sp, #4]
   15b26:	bl	9488 <memcpy>
   15b2a:	ldrh	r2, [r4, #12]
   15b2c:	ldr	r3, [sp, #4]
   15b2e:	bic.w	r2, r2, #1152	; 0x480
   15b32:	orr.w	r2, r2, #128	; 0x80
   15b36:	strh	r2, [r4, #12]
   15b38:	add.w	r0, r3, fp
   15b3c:	str	r3, [r4, #16]
   15b3e:	sub.w	r3, sl, fp
   15b42:	str.w	sl, [r4, #20]
   15b46:	str	r3, [r4, #8]
   15b48:	str	r0, [r4, #0]
   15b4a:	mov	fp, r6
   15b4c:	mov	r2, r6
   15b4e:	b.n	1596a <__sfvwrite_r+0xae>
   15b50:	mov	r1, r7
   15b52:	mov	r2, fp
   15b54:	bl	d8c0 <memmove>
   15b58:	ldr	r3, [r4, #0]
   15b5a:	add	r3, fp
   15b5c:	str	r3, [r4, #0]
   15b5e:	mov	r1, r4
   15b60:	mov	r0, r8
   15b62:	bl	12e3c <_fflush_r>
   15b66:	cmp	r0, #0
   15b68:	beq.w	15a16 <__sfvwrite_r+0x15a>
   15b6c:	b.n	159ba <__sfvwrite_r+0xfe>
   15b6e:	mov	r0, r8
   15b70:	bl	c068 <_realloc_r>
   15b74:	mov	r3, r0
   15b76:	cmp	r0, #0
   15b78:	bne.n	15b38 <__sfvwrite_r+0x27c>
   15b7a:	ldr	r1, [r4, #16]
   15b7c:	mov	r0, r8
   15b7e:	bl	e324 <_free_r>
   15b82:	ldrsh.w	r3, [r4, #12]
   15b86:	movs	r2, #12
   15b88:	bic.w	r3, r3, #128	; 0x80
   15b8c:	str.w	r2, [r8]
   15b90:	b.n	159be <__sfvwrite_r+0x102>
   15b92:	adds	r2, r6, #1
   15b94:	mov	r9, r2
   15b96:	b.n	159e6 <__sfvwrite_r+0x12a>
   15b98:	movs	r2, #12
   15b9a:	ldrsh.w	r3, [r4, #12]
   15b9e:	str.w	r2, [r8]
   15ba2:	b.n	159be <__sfvwrite_r+0x102>
   15ba4:	mov.w	r0, #4294967295
   15ba8:	b.n	15920 <__sfvwrite_r+0x64>
   15baa:	nop
   15bac:	.word	0x7ffffc00

00015bb0 <__submore>:
   15bb0:	add.w	r3, r1, #64	; 0x40
   15bb4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bb8:	mov	r4, r1
   15bba:	ldr	r1, [r1, #48]	; 0x30
   15bbc:	cmp	r1, r3
   15bbe:	beq.n	15bea <__submore+0x3a>
   15bc0:	ldr	r6, [r4, #52]	; 0x34
   15bc2:	lsls	r7, r6, #1
   15bc4:	mov	r2, r7
   15bc6:	bl	c068 <_realloc_r>
   15bca:	mov	r5, r0
   15bcc:	cbz	r0, 15c20 <__submore+0x70>
   15bce:	add.w	r8, r0, r6
   15bd2:	mov	r1, r0
   15bd4:	mov	r2, r6
   15bd6:	mov	r0, r8
   15bd8:	bl	9488 <memcpy>
   15bdc:	strd	r5, r7, [r4, #48]	; 0x30
   15be0:	str.w	r8, [r4]
   15be4:	movs	r0, #0
   15be6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15bea:	mov.w	r1, #1024	; 0x400
   15bee:	bl	bad8 <_malloc_r>
   15bf2:	cbz	r0, 15c20 <__submore+0x70>
   15bf4:	ldrb.w	r3, [r4, #66]	; 0x42
   15bf8:	mov.w	r2, #1024	; 0x400
   15bfc:	strd	r0, r2, [r4, #48]	; 0x30
   15c00:	strb.w	r3, [r0, #1023]	; 0x3ff
   15c04:	ldrb.w	r3, [r4, #65]	; 0x41
   15c08:	strb.w	r3, [r0, #1022]	; 0x3fe
   15c0c:	ldrb.w	r2, [r4, #64]	; 0x40
   15c10:	strb.w	r2, [r0, #1021]	; 0x3fd
   15c14:	addw	r3, r0, #1021	; 0x3fd
   15c18:	str	r3, [r4, #0]
   15c1a:	movs	r0, #0
   15c1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15c20:	mov.w	r0, #4294967295
   15c24:	b.n	15be6 <__submore+0x36>
   15c26:	nop

00015c28 <__swsetup_r>:
   15c28:	push	{r3, r4, r5, lr}
   15c2a:	ldr	r3, [pc, #196]	; (15cf0 <__swsetup_r+0xc8>)
   15c2c:	ldr	r3, [r3, #0]
   15c2e:	mov	r5, r0
   15c30:	mov	r4, r1
   15c32:	cbz	r3, 15c3a <__swsetup_r+0x12>
   15c34:	ldr	r2, [r3, #52]	; 0x34
   15c36:	cmp	r2, #0
   15c38:	beq.n	15cd8 <__swsetup_r+0xb0>
   15c3a:	ldrsh.w	r3, [r4, #12]
   15c3e:	lsls	r0, r3, #28
   15c40:	uxth	r2, r3
   15c42:	bpl.n	15c7e <__swsetup_r+0x56>
   15c44:	ldr	r1, [r4, #16]
   15c46:	cbz	r1, 15c94 <__swsetup_r+0x6c>
   15c48:	ands.w	r0, r2, #1
   15c4c:	beq.n	15c5e <__swsetup_r+0x36>
   15c4e:	movs	r0, #0
   15c50:	str	r0, [r4, #8]
   15c52:	ldr	r0, [r4, #20]
   15c54:	negs	r0, r0
   15c56:	str	r0, [r4, #24]
   15c58:	cbz	r1, 15c6a <__swsetup_r+0x42>
   15c5a:	movs	r0, #0
   15c5c:	pop	{r3, r4, r5, pc}
   15c5e:	lsls	r5, r2, #30
   15c60:	it	pl
   15c62:	ldrpl	r0, [r4, #20]
   15c64:	str	r0, [r4, #8]
   15c66:	cmp	r1, #0
   15c68:	bne.n	15c5a <__swsetup_r+0x32>
   15c6a:	lsls	r2, r2, #24
   15c6c:	it	pl
   15c6e:	movpl	r0, r1
   15c70:	bpl.n	15c5c <__swsetup_r+0x34>
   15c72:	orr.w	r3, r3, #64	; 0x40
   15c76:	strh	r3, [r4, #12]
   15c78:	mov.w	r0, #4294967295
   15c7c:	pop	{r3, r4, r5, pc}
   15c7e:	lsls	r1, r2, #27
   15c80:	bpl.n	15ce0 <__swsetup_r+0xb8>
   15c82:	lsls	r2, r2, #29
   15c84:	bmi.n	15cb0 <__swsetup_r+0x88>
   15c86:	ldr	r1, [r4, #16]
   15c88:	orr.w	r3, r3, #8
   15c8c:	strh	r3, [r4, #12]
   15c8e:	uxth	r2, r3
   15c90:	cmp	r1, #0
   15c92:	bne.n	15c48 <__swsetup_r+0x20>
   15c94:	and.w	r0, r2, #640	; 0x280
   15c98:	cmp.w	r0, #512	; 0x200
   15c9c:	beq.n	15c48 <__swsetup_r+0x20>
   15c9e:	mov	r1, r4
   15ca0:	mov	r0, r5
   15ca2:	bl	15f94 <__smakebuf_r>
   15ca6:	ldrsh.w	r3, [r4, #12]
   15caa:	ldr	r1, [r4, #16]
   15cac:	uxth	r2, r3
   15cae:	b.n	15c48 <__swsetup_r+0x20>
   15cb0:	ldr	r1, [r4, #48]	; 0x30
   15cb2:	cbz	r1, 15cca <__swsetup_r+0xa2>
   15cb4:	add.w	r2, r4, #64	; 0x40
   15cb8:	cmp	r1, r2
   15cba:	beq.n	15cc6 <__swsetup_r+0x9e>
   15cbc:	mov	r0, r5
   15cbe:	bl	e324 <_free_r>
   15cc2:	ldrsh.w	r3, [r4, #12]
   15cc6:	movs	r2, #0
   15cc8:	str	r2, [r4, #48]	; 0x30
   15cca:	ldr	r1, [r4, #16]
   15ccc:	movs	r2, #0
   15cce:	strd	r1, r2, [r4]
   15cd2:	bic.w	r3, r3, #36	; 0x24
   15cd6:	b.n	15c88 <__swsetup_r+0x60>
   15cd8:	mov	r0, r3
   15cda:	bl	d548 <__sinit>
   15cde:	b.n	15c3a <__swsetup_r+0x12>
   15ce0:	movs	r2, #9
   15ce2:	orr.w	r3, r3, #64	; 0x40
   15ce6:	str	r2, [r5, #0]
   15ce8:	mov.w	r0, #4294967295
   15cec:	strh	r3, [r4, #12]
   15cee:	pop	{r3, r4, r5, pc}
   15cf0:	.word	0x20008eec

00015cf4 <__fputwc>:
   15cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15cf8:	sub	sp, #8
   15cfa:	mov	sl, r0
   15cfc:	mov	r8, r1
   15cfe:	mov	r4, r2
   15d00:	bl	db54 <__locale_mb_cur_max>
   15d04:	cmp	r0, #1
   15d06:	bne.n	15d10 <__fputwc+0x1c>
   15d08:	add.w	r3, r8, #4294967295
   15d0c:	cmp	r3, #254	; 0xfe
   15d0e:	bls.n	15d7e <__fputwc+0x8a>
   15d10:	add.w	r9, sp, #4
   15d14:	mov	r2, r8
   15d16:	add.w	r3, r4, #92	; 0x5c
   15d1a:	mov	r1, r9
   15d1c:	mov	r0, sl
   15d1e:	bl	14374 <_wcrtomb_r>
   15d22:	adds	r2, r0, #1
   15d24:	mov	r6, r0
   15d26:	beq.n	15d8e <__fputwc+0x9a>
   15d28:	cbz	r0, 15d74 <__fputwc+0x80>
   15d2a:	ldrb.w	ip, [sp, #4]
   15d2e:	movs	r5, #0
   15d30:	b.n	15d46 <__fputwc+0x52>
   15d32:	ldr	r3, [r4, #0]
   15d34:	adds	r2, r3, #1
   15d36:	str	r2, [r4, #0]
   15d38:	strb.w	ip, [r3]
   15d3c:	adds	r5, #1
   15d3e:	cmp	r5, r6
   15d40:	bcs.n	15d74 <__fputwc+0x80>
   15d42:	ldrb.w	ip, [r9, #1]!
   15d46:	ldr	r3, [r4, #8]
   15d48:	subs	r3, #1
   15d4a:	cmp	r3, #0
   15d4c:	str	r3, [r4, #8]
   15d4e:	bge.n	15d32 <__fputwc+0x3e>
   15d50:	ldr	r7, [r4, #24]
   15d52:	cmp	r3, r7
   15d54:	mov	r1, ip
   15d56:	mov	r2, r4
   15d58:	mov	r0, sl
   15d5a:	blt.n	15d62 <__fputwc+0x6e>
   15d5c:	cmp.w	ip, #10
   15d60:	bne.n	15d32 <__fputwc+0x3e>
   15d62:	bl	1606c <__swbuf_r>
   15d66:	adds	r3, r0, #1
   15d68:	bne.n	15d3c <__fputwc+0x48>
   15d6a:	mov	r6, r0
   15d6c:	mov	r0, r6
   15d6e:	add	sp, #8
   15d70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d74:	mov	r6, r8
   15d76:	mov	r0, r6
   15d78:	add	sp, #8
   15d7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d7e:	uxtb.w	ip, r8
   15d82:	strb.w	ip, [sp, #4]
   15d86:	mov	r6, r0
   15d88:	add.w	r9, sp, #4
   15d8c:	b.n	15d2e <__fputwc+0x3a>
   15d8e:	ldrh	r3, [r4, #12]
   15d90:	mov	r0, r6
   15d92:	orr.w	r3, r3, #64	; 0x40
   15d96:	strh	r3, [r4, #12]
   15d98:	add	sp, #8
   15d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d9e:	nop

00015da0 <_fputwc_r>:
   15da0:	push	{r4, r5, lr}
   15da2:	ldr	r3, [r2, #100]	; 0x64
   15da4:	tst.w	r3, #1
   15da8:	ldrsh.w	r3, [r2, #12]
   15dac:	mov	r4, r2
   15dae:	sub	sp, #12
   15db0:	mov	r5, r0
   15db2:	uxth	r2, r3
   15db4:	bne.n	15dba <_fputwc_r+0x1a>
   15db6:	lsls	r0, r3, #22
   15db8:	bpl.n	15df4 <_fputwc_r+0x54>
   15dba:	lsls	r0, r2, #18
   15dbc:	bmi.n	15dcc <_fputwc_r+0x2c>
   15dbe:	ldr	r2, [r4, #100]	; 0x64
   15dc0:	orr.w	r3, r3, #8192	; 0x2000
   15dc4:	orr.w	r2, r2, #8192	; 0x2000
   15dc8:	strh	r3, [r4, #12]
   15dca:	str	r2, [r4, #100]	; 0x64
   15dcc:	mov	r2, r4
   15dce:	mov	r0, r5
   15dd0:	bl	15cf4 <__fputwc>
   15dd4:	ldr	r3, [r4, #100]	; 0x64
   15dd6:	lsls	r2, r3, #31
   15dd8:	mov	r5, r0
   15dda:	bmi.n	15de2 <_fputwc_r+0x42>
   15ddc:	ldrh	r3, [r4, #12]
   15dde:	lsls	r3, r3, #22
   15de0:	bpl.n	15de8 <_fputwc_r+0x48>
   15de2:	mov	r0, r5
   15de4:	add	sp, #12
   15de6:	pop	{r4, r5, pc}
   15de8:	ldr	r0, [r4, #88]	; 0x58
   15dea:	bl	dc8c <__retarget_lock_release_recursive>
   15dee:	mov	r0, r5
   15df0:	add	sp, #12
   15df2:	pop	{r4, r5, pc}
   15df4:	ldr	r0, [r4, #88]	; 0x58
   15df6:	str	r1, [sp, #4]
   15df8:	bl	dc88 <__retarget_lock_acquire_recursive>
   15dfc:	ldrsh.w	r3, [r4, #12]
   15e00:	ldr	r1, [sp, #4]
   15e02:	uxth	r2, r3
   15e04:	b.n	15dba <_fputwc_r+0x1a>
   15e06:	nop

00015e08 <_wcsnrtombs_l>:
   15e08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e0c:	sub	sp, #44	; 0x2c
   15e0e:	ldrd	r8, sl, [sp, #84]	; 0x54
   15e12:	ldr	r7, [sp, #80]	; 0x50
   15e14:	str	r1, [sp, #12]
   15e16:	mov	r9, r0
   15e18:	str	r2, [sp, #20]
   15e1a:	mov	r6, r3
   15e1c:	cmp.w	r8, #0
   15e20:	beq.n	15edc <_wcsnrtombs_l+0xd4>
   15e22:	ldr	r3, [sp, #12]
   15e24:	cmp	r3, #0
   15e26:	beq.n	15ee6 <_wcsnrtombs_l+0xde>
   15e28:	ldr	r3, [sp, #20]
   15e2a:	ldr	r5, [r3, #0]
   15e2c:	cmp	r7, #0
   15e2e:	beq.n	15f06 <_wcsnrtombs_l+0xfe>
   15e30:	subs	r4, r6, #1
   15e32:	cbz	r6, 15e88 <_wcsnrtombs_l+0x80>
   15e34:	ldr	r3, [sp, #12]
   15e36:	str	r3, [sp, #16]
   15e38:	subs	r5, #4
   15e3a:	movs	r6, #0
   15e3c:	str	r5, [sp, #4]
   15e3e:	b.n	15e58 <_wcsnrtombs_l+0x50>
   15e40:	ldr	r3, [sp, #12]
   15e42:	cbnz	r3, 15e90 <_wcsnrtombs_l+0x88>
   15e44:	ldr	r3, [sp, #4]
   15e46:	ldr	r2, [r3, #0]
   15e48:	cmp	r2, #0
   15e4a:	beq.n	15ec2 <_wcsnrtombs_l+0xba>
   15e4c:	cmp	ip, r7
   15e4e:	bcs.n	15f0a <_wcsnrtombs_l+0x102>
   15e50:	subs	r4, #1
   15e52:	adds	r3, r4, #1
   15e54:	mov	r6, ip
   15e56:	beq.n	15e88 <_wcsnrtombs_l+0x80>
   15e58:	ldr.w	r3, [r8]
   15e5c:	str	r3, [sp, #8]
   15e5e:	ldr	r3, [sp, #4]
   15e60:	ldr.w	r5, [sl, #224]	; 0xe0
   15e64:	ldr.w	r2, [r3, #4]!
   15e68:	str	r3, [sp, #4]
   15e6a:	add	r1, sp, #28
   15e6c:	mov	r3, r8
   15e6e:	mov	r0, r9
   15e70:	ldr.w	fp, [r8, #4]
   15e74:	blx	r5
   15e76:	adds	r2, r0, #1
   15e78:	beq.n	15ef0 <_wcsnrtombs_l+0xe8>
   15e7a:	add.w	ip, r0, r6
   15e7e:	cmp	ip, r7
   15e80:	bls.n	15e40 <_wcsnrtombs_l+0x38>
   15e82:	ldr	r3, [sp, #8]
   15e84:	strd	r3, fp, [r8]
   15e88:	mov	r0, r6
   15e8a:	add	sp, #44	; 0x2c
   15e8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e90:	cmp	r0, #0
   15e92:	ble.n	15eb2 <_wcsnrtombs_l+0xaa>
   15e94:	ldr	r3, [sp, #16]
   15e96:	ldr	r5, [sp, #4]
   15e98:	add	r0, r3
   15e9a:	subs	r2, r3, #1
   15e9c:	add	r1, sp, #28
   15e9e:	add.w	lr, r0, #4294967295
   15ea2:	ldrb.w	r3, [r1], #1
   15ea6:	strb.w	r3, [r2, #1]!
   15eaa:	cmp	r2, lr
   15eac:	bne.n	15ea2 <_wcsnrtombs_l+0x9a>
   15eae:	str	r5, [sp, #4]
   15eb0:	str	r0, [sp, #16]
   15eb2:	ldr	r3, [sp, #20]
   15eb4:	ldr	r2, [r3, #0]
   15eb6:	adds	r2, #4
   15eb8:	str	r2, [r3, #0]
   15eba:	ldr	r3, [sp, #4]
   15ebc:	ldr	r2, [r3, #0]
   15ebe:	cmp	r2, #0
   15ec0:	bne.n	15e4c <_wcsnrtombs_l+0x44>
   15ec2:	ldr	r3, [sp, #12]
   15ec4:	cbz	r3, 15eca <_wcsnrtombs_l+0xc2>
   15ec6:	ldr	r3, [sp, #20]
   15ec8:	str	r2, [r3, #0]
   15eca:	add.w	r6, ip, #4294967295
   15ece:	movs	r2, #0
   15ed0:	mov	r0, r6
   15ed2:	str.w	r2, [r8]
   15ed6:	add	sp, #44	; 0x2c
   15ed8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15edc:	ldr	r3, [sp, #12]
   15ede:	add.w	r8, r0, #268	; 0x10c
   15ee2:	cmp	r3, #0
   15ee4:	bne.n	15e28 <_wcsnrtombs_l+0x20>
   15ee6:	ldr	r3, [sp, #20]
   15ee8:	mov.w	r7, #4294967295
   15eec:	ldr	r5, [r3, #0]
   15eee:	b.n	15e30 <_wcsnrtombs_l+0x28>
   15ef0:	mov	r6, r0
   15ef2:	movs	r1, #138	; 0x8a
   15ef4:	movs	r2, #0
   15ef6:	mov	r0, r6
   15ef8:	str.w	r1, [r9]
   15efc:	str.w	r2, [r8]
   15f00:	add	sp, #44	; 0x2c
   15f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f06:	mov	r6, r7
   15f08:	b.n	15e88 <_wcsnrtombs_l+0x80>
   15f0a:	mov	r6, ip
   15f0c:	b.n	15e88 <_wcsnrtombs_l+0x80>
   15f0e:	nop

00015f10 <_wcsnrtombs_r>:
   15f10:	push	{r4, lr}
   15f12:	sub	sp, #16
   15f14:	ldr	r4, [pc, #20]	; (15f2c <_wcsnrtombs_r+0x1c>)
   15f16:	ldr	r0, [sp, #24]
   15f18:	str	r0, [sp, #0]
   15f1a:	ldr	r0, [sp, #28]
   15f1c:	str	r0, [sp, #4]
   15f1e:	ldr	r0, [pc, #16]	; (15f30 <_wcsnrtombs_r+0x20>)
   15f20:	ldr	r0, [r0, #0]
   15f22:	str	r4, [sp, #8]
   15f24:	bl	15e08 <_wcsnrtombs_l>
   15f28:	add	sp, #16
   15f2a:	pop	{r4, pc}
   15f2c:	.word	0x20008964
   15f30:	.word	0x20008eec

00015f34 <category>:
   15f34:	ldr	r3, [pc, #84]	; (15f8c <category+0x58>)
   15f36:	cmp	r0, r3
   15f38:	bhi.n	15f82 <category+0x4e>
   15f3a:	push	{r4, r5, r6, lr}
   15f3c:	ldr	r6, [pc, #80]	; (15f90 <category+0x5c>)
   15f3e:	mov.w	lr, #0
   15f42:	movw	r4, #2267	; 0x8db
   15f46:	b.n	15f50 <category+0x1c>
   15f48:	add.w	lr, r2, #1
   15f4c:	cmp	lr, r4
   15f4e:	bgt.n	15f7e <category+0x4a>
   15f50:	add.w	r2, r4, lr
   15f54:	bic.w	r3, r2, #1
   15f58:	add.w	r3, r3, r2, asr #1
   15f5c:	add.w	r3, r6, r3, lsl #1
   15f60:	asrs	r2, r2, #1
   15f62:	ldrb	r1, [r3, #1]
   15f64:	ldrh	r5, [r3, #2]
   15f66:	ldrh.w	ip, [r3, #4]
   15f6a:	orr.w	r1, r1, r5, lsl #8
   15f6e:	add	ip, r1
   15f70:	cmp	r0, ip
   15f72:	bhi.n	15f48 <category+0x14>
   15f74:	cmp	r0, r1
   15f76:	bcs.n	15f86 <category+0x52>
   15f78:	subs	r4, r2, #1
   15f7a:	cmp	lr, r4
   15f7c:	ble.n	15f50 <category+0x1c>
   15f7e:	movs	r0, #255	; 0xff
   15f80:	pop	{r4, r5, r6, pc}
   15f82:	movs	r0, #255	; 0xff
   15f84:	bx	lr
   15f86:	ldrb	r0, [r3, #0]
   15f88:	pop	{r4, r5, r6, pc}
   15f8a:	nop
   15f8c:	.word	0x000e01ef
   15f90:	.word	0x20002474

00015f94 <__smakebuf_r>:
   15f94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f98:	ldrh	r3, [r1, #12]
   15f9a:	mov	r4, r1
   15f9c:	lsls	r1, r3, #30
   15f9e:	sub	sp, #88	; 0x58
   15fa0:	bpl.n	15fb4 <__smakebuf_r+0x20>
   15fa2:	add.w	r3, r4, #67	; 0x43
   15fa6:	movs	r2, #1
   15fa8:	strd	r3, r2, [r4, #16]
   15fac:	str	r3, [r4, #0]
   15fae:	add	sp, #88	; 0x58
   15fb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fb4:	ldrsh.w	r1, [r4, #14]
   15fb8:	cmp	r1, #0
   15fba:	mov	r6, r0
   15fbc:	blt.n	1600a <__smakebuf_r+0x76>
   15fbe:	mov	r2, sp
   15fc0:	bl	1611c <_fstat_r>
   15fc4:	cmp	r0, #0
   15fc6:	blt.n	16008 <__smakebuf_r+0x74>
   15fc8:	ldr	r5, [sp, #4]
   15fca:	and.w	r5, r5, #61440	; 0xf000
   15fce:	sub.w	r5, r5, #8192	; 0x2000
   15fd2:	clz	r5, r5
   15fd6:	mov.w	r8, #1024	; 0x400
   15fda:	lsrs	r5, r5, #5
   15fdc:	mov.w	r7, #2048	; 0x800
   15fe0:	mov	r1, r8
   15fe2:	mov	r0, r6
   15fe4:	bl	bad8 <_malloc_r>
   15fe8:	cbz	r0, 16024 <__smakebuf_r+0x90>
   15fea:	ldrsh.w	r3, [r4, #12]
   15fee:	str.w	r8, [r4, #20]
   15ff2:	orr.w	r3, r3, #128	; 0x80
   15ff6:	str	r0, [r4, #0]
   15ff8:	str	r0, [r4, #16]
   15ffa:	strh	r3, [r4, #12]
   15ffc:	cbnz	r5, 1604c <__smakebuf_r+0xb8>
   15ffe:	orrs	r3, r7
   16000:	strh	r3, [r4, #12]
   16002:	add	sp, #88	; 0x58
   16004:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16008:	ldrh	r3, [r4, #12]
   1600a:	ands.w	r5, r3, #128	; 0x80
   1600e:	beq.n	16044 <__smakebuf_r+0xb0>
   16010:	mov.w	r8, #64	; 0x40
   16014:	movs	r5, #0
   16016:	mov	r1, r8
   16018:	mov	r0, r6
   1601a:	mov	r7, r5
   1601c:	bl	bad8 <_malloc_r>
   16020:	cmp	r0, #0
   16022:	bne.n	15fea <__smakebuf_r+0x56>
   16024:	ldrsh.w	r3, [r4, #12]
   16028:	lsls	r2, r3, #22
   1602a:	bmi.n	15fae <__smakebuf_r+0x1a>
   1602c:	bic.w	r3, r3, #3
   16030:	add.w	r2, r4, #67	; 0x43
   16034:	orr.w	r3, r3, #2
   16038:	movs	r1, #1
   1603a:	strd	r2, r1, [r4, #16]
   1603e:	strh	r3, [r4, #12]
   16040:	str	r2, [r4, #0]
   16042:	b.n	15fae <__smakebuf_r+0x1a>
   16044:	mov.w	r8, #1024	; 0x400
   16048:	mov	r7, r5
   1604a:	b.n	15fe0 <__smakebuf_r+0x4c>
   1604c:	ldrsh.w	r1, [r4, #14]
   16050:	mov	r0, r6
   16052:	bl	16148 <_isatty_r>
   16056:	cbnz	r0, 1605e <__smakebuf_r+0xca>
   16058:	ldrsh.w	r3, [r4, #12]
   1605c:	b.n	15ffe <__smakebuf_r+0x6a>
   1605e:	ldrh	r3, [r4, #12]
   16060:	bic.w	r3, r3, #3
   16064:	orr.w	r3, r3, #1
   16068:	sxth	r3, r3
   1606a:	b.n	15ffe <__smakebuf_r+0x6a>

0001606c <__swbuf_r>:
   1606c:	push	{r3, r4, r5, r6, r7, lr}
   1606e:	mov	r5, r1
   16070:	mov	r4, r2
   16072:	mov	r6, r0
   16074:	cbz	r0, 1607c <__swbuf_r+0x10>
   16076:	ldr	r3, [r0, #52]	; 0x34
   16078:	cmp	r3, #0
   1607a:	beq.n	16116 <__swbuf_r+0xaa>
   1607c:	ldrsh.w	r2, [r4, #12]
   16080:	ldr	r3, [r4, #24]
   16082:	str	r3, [r4, #8]
   16084:	lsls	r7, r2, #28
   16086:	uxth	r0, r2
   16088:	bpl.n	160c2 <__swbuf_r+0x56>
   1608a:	ldr	r3, [r4, #16]
   1608c:	cbz	r3, 160c2 <__swbuf_r+0x56>
   1608e:	uxtb	r5, r5
   16090:	lsls	r1, r0, #18
   16092:	mov	r7, r5
   16094:	bpl.n	160dc <__swbuf_r+0x70>
   16096:	ldr	r2, [r4, #0]
   16098:	ldr	r1, [r4, #20]
   1609a:	subs	r3, r2, r3
   1609c:	cmp	r1, r3
   1609e:	ble.n	160f4 <__swbuf_r+0x88>
   160a0:	adds	r3, #1
   160a2:	ldr	r1, [r4, #8]
   160a4:	subs	r1, #1
   160a6:	str	r1, [r4, #8]
   160a8:	adds	r1, r2, #1
   160aa:	str	r1, [r4, #0]
   160ac:	strb	r5, [r2, #0]
   160ae:	ldr	r2, [r4, #20]
   160b0:	cmp	r2, r3
   160b2:	beq.n	16104 <__swbuf_r+0x98>
   160b4:	ldrh	r3, [r4, #12]
   160b6:	lsls	r3, r3, #31
   160b8:	bpl.n	160be <__swbuf_r+0x52>
   160ba:	cmp	r5, #10
   160bc:	beq.n	16104 <__swbuf_r+0x98>
   160be:	mov	r0, r7
   160c0:	pop	{r3, r4, r5, r6, r7, pc}
   160c2:	mov	r1, r4
   160c4:	mov	r0, r6
   160c6:	bl	15c28 <__swsetup_r>
   160ca:	cbnz	r0, 16110 <__swbuf_r+0xa4>
   160cc:	ldrsh.w	r2, [r4, #12]
   160d0:	ldr	r3, [r4, #16]
   160d2:	uxth	r0, r2
   160d4:	uxtb	r5, r5
   160d6:	lsls	r1, r0, #18
   160d8:	mov	r7, r5
   160da:	bmi.n	16096 <__swbuf_r+0x2a>
   160dc:	orr.w	r2, r2, #8192	; 0x2000
   160e0:	strh	r2, [r4, #12]
   160e2:	ldr	r2, [r4, #100]	; 0x64
   160e4:	ldr	r1, [r4, #20]
   160e6:	bic.w	r2, r2, #8192	; 0x2000
   160ea:	str	r2, [r4, #100]	; 0x64
   160ec:	ldr	r2, [r4, #0]
   160ee:	subs	r3, r2, r3
   160f0:	cmp	r1, r3
   160f2:	bgt.n	160a0 <__swbuf_r+0x34>
   160f4:	mov	r1, r4
   160f6:	mov	r0, r6
   160f8:	bl	12e3c <_fflush_r>
   160fc:	cbnz	r0, 16110 <__swbuf_r+0xa4>
   160fe:	ldr	r2, [r4, #0]
   16100:	movs	r3, #1
   16102:	b.n	160a2 <__swbuf_r+0x36>
   16104:	mov	r1, r4
   16106:	mov	r0, r6
   16108:	bl	12e3c <_fflush_r>
   1610c:	cmp	r0, #0
   1610e:	beq.n	160be <__swbuf_r+0x52>
   16110:	mov.w	r7, #4294967295
   16114:	b.n	160be <__swbuf_r+0x52>
   16116:	bl	d548 <__sinit>
   1611a:	b.n	1607c <__swbuf_r+0x10>

0001611c <_fstat_r>:
   1611c:	push	{r4, r5, r6, lr}
   1611e:	mov	r4, r1
   16120:	ldr	r5, [pc, #32]	; (16144 <_fstat_r+0x28>)
   16122:	mov	r3, r0
   16124:	movs	r6, #0
   16126:	mov	r0, r4
   16128:	mov	r1, r2
   1612a:	mov	r4, r3
   1612c:	str	r6, [r5, #0]
   1612e:	bl	abb2 <_fstat>
   16132:	adds	r3, r0, #1
   16134:	beq.n	16138 <_fstat_r+0x1c>
   16136:	pop	{r4, r5, r6, pc}
   16138:	ldr	r3, [r5, #0]
   1613a:	cmp	r3, #0
   1613c:	beq.n	16136 <_fstat_r+0x1a>
   1613e:	str	r3, [r4, #0]
   16140:	pop	{r4, r5, r6, pc}
   16142:	nop
   16144:	.word	0x20027370

00016148 <_isatty_r>:
   16148:	push	{r3, r4, r5, lr}
   1614a:	ldr	r5, [pc, #28]	; (16168 <_isatty_r+0x20>)
   1614c:	movs	r2, #0
   1614e:	mov	r4, r0
   16150:	mov	r0, r1
   16152:	str	r2, [r5, #0]
   16154:	bl	abbc <_isatty>
   16158:	adds	r3, r0, #1
   1615a:	beq.n	1615e <_isatty_r+0x16>
   1615c:	pop	{r3, r4, r5, pc}
   1615e:	ldr	r3, [r5, #0]
   16160:	cmp	r3, #0
   16162:	beq.n	1615c <_isatty_r+0x14>
   16164:	str	r3, [r4, #0]
   16166:	pop	{r3, r4, r5, pc}
   16168:	.word	0x20027370

0001616c <__aeabi_drsub>:
   1616c:	eor.w	r1, r1, #2147483648	; 0x80000000
   16170:	b.n	16178 <__adddf3>
   16172:	nop

00016174 <__aeabi_dsub>:
   16174:	eor.w	r3, r3, #2147483648	; 0x80000000

00016178 <__adddf3>:
   16178:	push	{r4, r5, lr}
   1617a:	mov.w	r4, r1, lsl #1
   1617e:	mov.w	r5, r3, lsl #1
   16182:	teq	r4, r5
   16186:	it	eq
   16188:	teqeq	r0, r2
   1618c:	itttt	ne
   1618e:	orrsne.w	ip, r4, r0
   16192:	orrsne.w	ip, r5, r2
   16196:	mvnsne.w	ip, r4, asr #21
   1619a:	mvnsne.w	ip, r5, asr #21
   1619e:	beq.w	16366 <__adddf3+0x1ee>
   161a2:	mov.w	r4, r4, lsr #21
   161a6:	rsbs	r5, r4, r5, lsr #21
   161aa:	it	lt
   161ac:	neglt	r5, r5
   161ae:	ble.n	161ca <__adddf3+0x52>
   161b0:	add	r4, r5
   161b2:	eor.w	r2, r0, r2
   161b6:	eor.w	r3, r1, r3
   161ba:	eor.w	r0, r2, r0
   161be:	eor.w	r1, r3, r1
   161c2:	eor.w	r2, r0, r2
   161c6:	eor.w	r3, r1, r3
   161ca:	cmp	r5, #54	; 0x36
   161cc:	it	hi
   161ce:	pophi	{r4, r5, pc}
   161d0:	tst.w	r1, #2147483648	; 0x80000000
   161d4:	mov.w	r1, r1, lsl #12
   161d8:	mov.w	ip, #1048576	; 0x100000
   161dc:	orr.w	r1, ip, r1, lsr #12
   161e0:	beq.n	161e8 <__adddf3+0x70>
   161e2:	negs	r0, r0
   161e4:	sbc.w	r1, r1, r1, lsl #1
   161e8:	tst.w	r3, #2147483648	; 0x80000000
   161ec:	mov.w	r3, r3, lsl #12
   161f0:	orr.w	r3, ip, r3, lsr #12
   161f4:	beq.n	161fc <__adddf3+0x84>
   161f6:	negs	r2, r2
   161f8:	sbc.w	r3, r3, r3, lsl #1
   161fc:	teq	r4, r5
   16200:	beq.w	16352 <__adddf3+0x1da>
   16204:	sub.w	r4, r4, #1
   16208:	rsbs	lr, r5, #32
   1620c:	blt.n	1622a <__adddf3+0xb2>
   1620e:	lsl.w	ip, r2, lr
   16212:	lsr.w	r2, r2, r5
   16216:	adds	r0, r0, r2
   16218:	adc.w	r1, r1, #0
   1621c:	lsl.w	r2, r3, lr
   16220:	adds	r0, r0, r2
   16222:	asr.w	r3, r3, r5
   16226:	adcs	r1, r3
   16228:	b.n	16248 <__adddf3+0xd0>
   1622a:	sub.w	r5, r5, #32
   1622e:	add.w	lr, lr, #32
   16232:	cmp	r2, #1
   16234:	lsl.w	ip, r3, lr
   16238:	it	cs
   1623a:	orrcs.w	ip, ip, #2
   1623e:	asr.w	r3, r3, r5
   16242:	adds	r0, r0, r3
   16244:	adcs.w	r1, r1, r3, asr #31
   16248:	and.w	r5, r1, #2147483648	; 0x80000000
   1624c:	bpl.n	1625e <__adddf3+0xe6>
   1624e:	mov.w	lr, #0
   16252:	rsbs	ip, ip, #0
   16256:	sbcs.w	r0, lr, r0
   1625a:	sbc.w	r1, lr, r1
   1625e:	cmp.w	r1, #1048576	; 0x100000
   16262:	bcc.n	1629c <__adddf3+0x124>
   16264:	cmp.w	r1, #2097152	; 0x200000
   16268:	bcc.n	16284 <__adddf3+0x10c>
   1626a:	lsrs	r1, r1, #1
   1626c:	movs.w	r0, r0, rrx
   16270:	mov.w	ip, ip, rrx
   16274:	add.w	r4, r4, #1
   16278:	mov.w	r2, r4, lsl #21
   1627c:	cmn.w	r2, #4194304	; 0x400000
   16280:	bcs.w	163b8 <__adddf3+0x240>
   16284:	cmp.w	ip, #2147483648	; 0x80000000
   16288:	it	eq
   1628a:	movseq.w	ip, r0, lsr #1
   1628e:	adcs.w	r0, r0, #0
   16292:	adc.w	r1, r1, r4, lsl #20
   16296:	orr.w	r1, r1, r5
   1629a:	pop	{r4, r5, pc}
   1629c:	movs.w	ip, ip, lsl #1
   162a0:	adcs	r0, r0
   162a2:	adc.w	r1, r1, r1
   162a6:	subs	r4, #1
   162a8:	it	cs
   162aa:	cmpcs.w	r1, #1048576	; 0x100000
   162ae:	bcs.n	16284 <__adddf3+0x10c>
   162b0:	teq	r1, #0
   162b4:	itt	eq
   162b6:	moveq	r1, r0
   162b8:	moveq	r0, #0
   162ba:	clz	r3, r1
   162be:	it	eq
   162c0:	addeq	r3, #32
   162c2:	sub.w	r3, r3, #11
   162c6:	subs.w	r2, r3, #32
   162ca:	bge.n	162e6 <__adddf3+0x16e>
   162cc:	adds	r2, #12
   162ce:	ble.n	162e2 <__adddf3+0x16a>
   162d0:	add.w	ip, r2, #20
   162d4:	rsb	r2, r2, #12
   162d8:	lsl.w	r0, r1, ip
   162dc:	lsr.w	r1, r1, r2
   162e0:	b.n	162fc <__adddf3+0x184>
   162e2:	add.w	r2, r2, #20
   162e6:	it	le
   162e8:	rsble	ip, r2, #32
   162ec:	lsl.w	r1, r1, r2
   162f0:	lsr.w	ip, r0, ip
   162f4:	itt	le
   162f6:	orrle.w	r1, r1, ip
   162fa:	lslle	r0, r2
   162fc:	subs	r4, r4, r3
   162fe:	ittt	ge
   16300:	addge.w	r1, r1, r4, lsl #20
   16304:	orrge	r1, r5
   16306:	popge	{r4, r5, pc}
   16308:	mvn.w	r4, r4
   1630c:	subs	r4, #31
   1630e:	bge.n	1634a <__adddf3+0x1d2>
   16310:	adds	r4, #12
   16312:	bgt.n	16332 <__adddf3+0x1ba>
   16314:	add.w	r4, r4, #20
   16318:	rsb	r2, r4, #32
   1631c:	lsr.w	r0, r0, r4
   16320:	lsl.w	r3, r1, r2
   16324:	orr.w	r0, r0, r3
   16328:	lsr.w	r3, r1, r4
   1632c:	orr.w	r1, r5, r3
   16330:	pop	{r4, r5, pc}
   16332:	rsb	r4, r4, #12
   16336:	rsb	r2, r4, #32
   1633a:	lsr.w	r0, r0, r2
   1633e:	lsl.w	r3, r1, r4
   16342:	orr.w	r0, r0, r3
   16346:	mov	r1, r5
   16348:	pop	{r4, r5, pc}
   1634a:	lsr.w	r0, r1, r4
   1634e:	mov	r1, r5
   16350:	pop	{r4, r5, pc}
   16352:	teq	r4, #0
   16356:	eor.w	r3, r3, #1048576	; 0x100000
   1635a:	itte	eq
   1635c:	eoreq.w	r1, r1, #1048576	; 0x100000
   16360:	addeq	r4, #1
   16362:	subne	r5, #1
   16364:	b.n	16204 <__adddf3+0x8c>
   16366:	mvns.w	ip, r4, asr #21
   1636a:	it	ne
   1636c:	mvnsne.w	ip, r5, asr #21
   16370:	beq.n	163c6 <__adddf3+0x24e>
   16372:	teq	r4, r5
   16376:	it	eq
   16378:	teqeq	r0, r2
   1637c:	beq.n	1638a <__adddf3+0x212>
   1637e:	orrs.w	ip, r4, r0
   16382:	itt	eq
   16384:	moveq	r1, r3
   16386:	moveq	r0, r2
   16388:	pop	{r4, r5, pc}
   1638a:	teq	r1, r3
   1638e:	ittt	ne
   16390:	movne	r1, #0
   16392:	movne	r0, #0
   16394:	popne	{r4, r5, pc}
   16396:	movs.w	ip, r4, lsr #21
   1639a:	bne.n	163a8 <__adddf3+0x230>
   1639c:	lsls	r0, r0, #1
   1639e:	adcs	r1, r1
   163a0:	it	cs
   163a2:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   163a6:	pop	{r4, r5, pc}
   163a8:	adds.w	r4, r4, #4194304	; 0x400000
   163ac:	itt	cc
   163ae:	addcc.w	r1, r1, #1048576	; 0x100000
   163b2:	popcc	{r4, r5, pc}
   163b4:	and.w	r5, r1, #2147483648	; 0x80000000
   163b8:	orr.w	r1, r5, #2130706432	; 0x7f000000
   163bc:	orr.w	r1, r1, #15728640	; 0xf00000
   163c0:	mov.w	r0, #0
   163c4:	pop	{r4, r5, pc}
   163c6:	mvns.w	ip, r4, asr #21
   163ca:	itte	ne
   163cc:	movne	r1, r3
   163ce:	movne	r0, r2
   163d0:	mvnseq.w	ip, r5, asr #21
   163d4:	itt	ne
   163d6:	movne	r3, r1
   163d8:	movne	r2, r0
   163da:	orrs.w	r4, r0, r1, lsl #12
   163de:	itte	eq
   163e0:	orrseq.w	r5, r2, r3, lsl #12
   163e4:	teqeq	r1, r3
   163e8:	orrne.w	r1, r1, #524288	; 0x80000
   163ec:	pop	{r4, r5, pc}
   163ee:	nop

000163f0 <__aeabi_ui2d>:
   163f0:	teq	r0, #0
   163f4:	itt	eq
   163f6:	moveq	r1, #0
   163f8:	bxeq	lr
   163fa:	push	{r4, r5, lr}
   163fc:	mov.w	r4, #1024	; 0x400
   16400:	add.w	r4, r4, #50	; 0x32
   16404:	mov.w	r5, #0
   16408:	mov.w	r1, #0
   1640c:	b.n	162b0 <__adddf3+0x138>
   1640e:	nop

00016410 <__aeabi_i2d>:
   16410:	teq	r0, #0
   16414:	itt	eq
   16416:	moveq	r1, #0
   16418:	bxeq	lr
   1641a:	push	{r4, r5, lr}
   1641c:	mov.w	r4, #1024	; 0x400
   16420:	add.w	r4, r4, #50	; 0x32
   16424:	ands.w	r5, r0, #2147483648	; 0x80000000
   16428:	it	mi
   1642a:	negmi	r0, r0
   1642c:	mov.w	r1, #0
   16430:	b.n	162b0 <__adddf3+0x138>
   16432:	nop

00016434 <__aeabi_f2d>:
   16434:	lsls	r2, r0, #1
   16436:	mov.w	r1, r2, asr #3
   1643a:	mov.w	r1, r1, rrx
   1643e:	mov.w	r0, r2, lsl #28
   16442:	itttt	ne
   16444:	andsne.w	r3, r2, #4278190080	; 0xff000000
   16448:	teqne	r3, #4278190080	; 0xff000000
   1644c:	eorne.w	r1, r1, #939524096	; 0x38000000
   16450:	bxne	lr
   16452:	bics.w	r2, r2, #4278190080	; 0xff000000
   16456:	it	eq
   16458:	bxeq	lr
   1645a:	teq	r3, #4278190080	; 0xff000000
   1645e:	itt	eq
   16460:	orreq.w	r1, r1, #524288	; 0x80000
   16464:	bxeq	lr
   16466:	push	{r4, r5, lr}
   16468:	mov.w	r4, #896	; 0x380
   1646c:	and.w	r5, r1, #2147483648	; 0x80000000
   16470:	bic.w	r1, r1, #2147483648	; 0x80000000
   16474:	b.n	162b0 <__adddf3+0x138>
   16476:	nop

00016478 <__aeabi_ul2d>:
   16478:	orrs.w	r2, r0, r1
   1647c:	it	eq
   1647e:	bxeq	lr
   16480:	push	{r4, r5, lr}
   16482:	mov.w	r5, #0
   16486:	b.n	1649e <__aeabi_l2d+0x16>

00016488 <__aeabi_l2d>:
   16488:	orrs.w	r2, r0, r1
   1648c:	it	eq
   1648e:	bxeq	lr
   16490:	push	{r4, r5, lr}
   16492:	ands.w	r5, r1, #2147483648	; 0x80000000
   16496:	bpl.n	1649e <__aeabi_l2d+0x16>
   16498:	negs	r0, r0
   1649a:	sbc.w	r1, r1, r1, lsl #1
   1649e:	mov.w	r4, #1024	; 0x400
   164a2:	add.w	r4, r4, #50	; 0x32
   164a6:	movs.w	ip, r1, lsr #22
   164aa:	beq.w	1625e <__adddf3+0xe6>
   164ae:	mov.w	r2, #3
   164b2:	movs.w	ip, ip, lsr #3
   164b6:	it	ne
   164b8:	addne	r2, #3
   164ba:	movs.w	ip, ip, lsr #3
   164be:	it	ne
   164c0:	addne	r2, #3
   164c2:	add.w	r2, r2, ip, lsr #3
   164c6:	rsb	r3, r2, #32
   164ca:	lsl.w	ip, r0, r3
   164ce:	lsr.w	r0, r0, r2
   164d2:	lsl.w	lr, r1, r3
   164d6:	orr.w	r0, r0, lr
   164da:	lsr.w	r1, r1, r2
   164de:	add	r4, r2
   164e0:	b.n	1625e <__adddf3+0xe6>
   164e2:	nop

000164e4 <__aeabi_d2lz>:
   164e4:	push	{r3, lr}
   164e6:	mov	r2, r0
   164e8:	mov	r3, r1
   164ea:	vmov	d7, r2, r3
   164ee:	vcmpe.f64	d7, #0.0
   164f2:	vmrs	APSR_nzcv, fpscr
   164f6:	bmi.n	16500 <__aeabi_d2lz+0x1c>
   164f8:	ldmia.w	sp!, {r3, lr}
   164fc:	b.w	16518 <__aeabi_d2ulz>
   16500:	vneg.f64	d7, d7
   16504:	vmov	r0, r1, d7
   16508:	bl	16518 <__aeabi_d2ulz>
   1650c:	negs	r0, r0
   1650e:	sbc.w	r1, r1, r1, lsl #1
   16512:	pop	{r3, pc}
   16514:	movs	r0, r0
	...

00016518 <__aeabi_d2ulz>:
   16518:	vldr	d6, [pc, #44]	; 16548 <__aeabi_d2ulz+0x30>
   1651c:	vmov	d7, r0, r1
   16520:	vldr	d5, [pc, #44]	; 16550 <__aeabi_d2ulz+0x38>
   16524:	vmul.f64	d6, d7, d6
   16528:	vcvt.u32.f64	s12, d6
   1652c:	vcvt.f64.u32	d4, s12
   16530:	vfms.f64	d7, d4, d5
   16534:	vcvt.u32.f64	s15, d7
   16538:	vmov	r1, s12
   1653c:	vmov	r0, s15
   16540:	bx	lr
   16542:	nop
   16544:	nop.w
   16548:	.word	0x00000000
   1654c:	.word	0x3df00000
   16550:	.word	0x00000000
   16554:	.word	0x41f00000

00016558 <___reboot_Teensyduino__veneer>:
   16558:	ldr.w	pc, [pc]	; 1655c <___reboot_Teensyduino__veneer+0x4>
   1655c:	.word	0x60001741

00016560 <___init_veneer>:
   16560:	ldr.w	pc, [pc]	; 16564 <___init_veneer+0x4>
   16564:	.word	0x600022c5

00016568 <___ZN16CrashReportClasscvbEv_veneer>:
   16568:	ldr.w	pc, [pc]	; 1656c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1656c:	.word	0x60002269

00016570 <___Z14set_audioClockilm_veneer>:
   16570:	ldr.w	pc, [pc]	; 16574 <___Z14set_audioClockilm_veneer+0x4>
   16574:	.word	0x60002371

00016578 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   16578:	ldr.w	pc, [pc]	; 1657c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1657c:	.word	0x60001dc5

00016580 <__usb_init_veneer>:
   16580:	ldr.w	pc, [pc]	; 16584 <__usb_init_veneer+0x4>
   16584:	.word	0x6000165d
	...

Disassembly of section .fini:

00016590 <_fini>:
   16590:	push	{r3, r4, r5, r6, r7, lr}
   16592:	nop

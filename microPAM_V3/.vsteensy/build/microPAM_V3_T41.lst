
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00011c20 l    d  .fini	00000000 .fini
00011c24 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60016a14 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000a820 l     F .text.itcm	000000a0 endpoint0_receive
0000a8c0 l     F .text.itcm	0000007c schedule_transfer
0000a93c l     F .text.itcm	00000034 run_callbacks
0000a970 l     F .text.itcm	0000001c usb_endpoint_config
0000a98c l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
200215b9 l     O .bss	00000008 endpoint0_buffer
20020b9c l     O .bss	00000004 endpoint0_notify_mask
20007dc0 l     O .bss	00000008 endpoint0_setupdata
20020ba0 l     O .bss	00000004 endpointN_notify_mask
200215c3 l     O .bss	00000008 reply_buffer
200215dd l     O .bss	00000001 sof_usage
200215e5 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20020cd0 l     O .bss	00000004 s_hotCount
20020cd4 l     O .bss	00000004 s_hotTemp
20020cd8 l     O .bss	00000004 s_hot_ROOM
20020cdc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
200215b8 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20020c38 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000698 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
20007dcc l     O .bss	00000004 guard variable for loop::status
20020840 l     O .bss	00000004 loop::t0
200213c0 l     O .bss	00000002 loop::mxb
200213c2 l     O .bss	00000002 loop::status
20020844 l     O .bss	00000004 loop::loopCount
20001060 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008e0 l     F .text.itcm	000000b8 acq_isr()
00000c44 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
2001ffdc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
0000285a l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
0000287a l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00002882 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
000028a6 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000028aa l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20007dd0 l     O .bss	0000c000 diskBuffer
20013fdc l     O .bss	0000c000 tempBuffer0
00003128 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
20013dd0 l     O .bss	00000200 fileHeader
2002149a l     O .bss	00000050 dirName
200203f4 l     O .bss	00000200 wav_hdr
200214ea l     O .bss	00000050 fileName
2002083c l     O .bss	00000004 checkEndOfFile(short)::dta
2002153e l     O .bss	00000050 timeStamp()::date_time
200020bc l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
200022d1 l     O .data	00000012 device_descriptor
6000271e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c92 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cb8 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cf4 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010f8 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001688 l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000017f0 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b58 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001eb0 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ec2 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001ed8 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001efc l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001f00 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f14 l     F .text.itcm	00000038 menuGetLine()
00001f4c l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f68 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
200213a0 l     O .bss	00000020 store
2002158e l     O .bss	00000028 menuGetLine()::buffer
20001088 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00480000 data_buffer
20013fd4 l     O .bss	00000004 queue_busy
200201e4 l     O .bss	00000004 head
200201e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
2001ffe4 l     O .bss	00000200 dout
200201f4 l     O .bss	00000200 outData
200205f4 l     O .bss	00000200 tempData
20020848 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
0000349c l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
20001054 l     O .data	00000004 regs
20001058 l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
00000000 l    df *ABS*	00000000 MTP.cpp
0000384c l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003864 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
000042d6 l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2002084c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20020850 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000b5c l     O .data	00000014 propertyList
20000b70 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000a30 l     O .data	0000012c lookupTable
20000b98 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006124 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006ae4 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00007bac l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00008c6c l     F .text.itcm	0000002c sdIrs()
00008c98 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008cb8 l     F .text.itcm	00000018 isBusyCommandComplete()
00008cd0 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008ce0 l     F .text.itcm	00000014 isBusyDat()
00008cf4 l     F .text.itcm	0000000c isBusyDMA()
00008d00 l     F .text.itcm	00000014 isBusyFifoRead()
00008d14 l     F .text.itcm	00000014 isBusyFifoWrite()
00008d28 l     F .text.itcm	00000018 isBusyTransferComplete()
00008d40 l     F .text.itcm	000000a4 setSdclk(unsigned long)
00008e48 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00008e6c l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00008eb8 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00008ee8 l     F .text.itcm	000000d4 initSDHC()
00008fd8 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00009040 l     F .text.itcm	00000020 statusCMD13()
00009060 l     F .text.itcm	00000010 isBusyCMD13()
00009074 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
000090cc l     F .text.itcm	00000030 waitDmaStatus()
000090fc l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
000093f4 l     F .text.itcm	0000005c waitTransferComplete()
0000965c l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20021476 l     O .bss	00000001 m_initDone
20013fd0 l     O .bss	00000004 m_sdClkKhz
20021477 l     O .bss	00000001 m_version2
20013fd8 l     O .bss	00000004 m_errorLine
20021478 l     O .bss	00000001 m_highCapacity
20021479 l     O .bss	00000001 m_transferActive
2002147a l     O .bss	00000010 m_cid
2002148a l     O .bss	00000010 m_csd
200201ec l     O .bss	00000004 m_ocr
200201f0 l     O .bss	00000004 m_rca
200207f4 l     O .bss	00000004 m_busyFcn
2002153a l     O .bss	00000001 m_dmaBusy
200207f8 l     O .bss	00000004 m_irqstat
200022d0 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
00009b9c l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
00009f04 l     F .text.itcm	00000060 rx_queue_transfer
20004b40 l     O .bss	00001000 rx_buffer
00009f64 l     F .text.itcm	000000ac rx_event
0000a010 l     F .text.itcm	0000008c usb_serial_flush_callback
20005dc0 l     O .bss	00002000 txbuffer
20020cb8 l     O .bss	00000004 rx_available
200213cc l     O .bss	00000010 rx_count
200215cb l     O .bss	00000001 rx_head
200213dc l     O .bss	00000010 rx_index
200215cd l     O .bss	00000009 rx_list
200213ec l     O .bss	00000002 rx_packet_size
200215db l     O .bss	00000001 rx_tail
20005b40 l     O .bss	00000100 rx_transfer
200215de l     O .bss	00000001 transmit_previous_timeout
20021470 l     O .bss	00000002 tx_available
200215df l     O .bss	00000001 tx_head
200215e1 l     O .bss	00000001 tx_noautoflush
20021472 l     O .bss	00000002 tx_packet_size
20005cc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000b538 l     F .text.itcm	00000058 flash_wait
200215c2 l     O .bss	00000001 initialized
200213f0 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000bbd0 l     F .text.itcm	00000010 txEvent_event
0000bbe0 l     F .text.itcm	0000003c rx_event
0000bc1c l     F .text.itcm	00000060 rx_queue_transfer
200215cc l     O .bss	00000001 rx_head
200215d6 l     O .bss	00000005 rx_list
20020cbc l     O .bss	00000014 rx_list_transfer_len
200213ee l     O .bss	00000002 rx_packet_size
200215dc l     O .bss	00000001 rx_tail
20005c40 l     O .bss	00000080 rx_transfer
200215e0 l     O .bss	00000001 tx_head
20021474 l     O .bss	00000002 tx_packet_size
20005d40 l     O .bss	00000080 tx_transfer
20200800 l     O .bss.dma	00000800 rx_buffer
20201000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
2002153d l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c1e2 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000c7a8 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000c94a l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d4f0 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e2a4 l     F .text.itcm	00000048 std
0000e2ec l     F .text.itcm	00000018 stdio_exit_handler
0000e304 l     F .text.itcm	00000040 cleanup_stdio
0000e344 l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000e92c l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000f5b0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0000fadc l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00011234 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
00011340 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00011be8 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00011bf0 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00011bf8 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00011c00 l     F .text.itcm	00000008 __usb_init_veneer
00011c08 l     F .text.itcm	00000008 ___init_veneer
00011c10 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00011c18 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
60002428 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002430 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002438 l     F .text.code	00000008 __main_veneer
60002440 l     F .text.code	00000008 __pwm_init_veneer
60002448 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002450 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002458 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002460 l     F .text.code	00000008 __memset_veneer
60002468 l     F .text.code	00000008 __delay_veneer
60002470 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002478 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002480 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002488 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002490 l     F .text.code	00000008 __set_arm_clock_veneer
60002498 l     F .text.code	00000008 ____libc_init_array_veneer
600024a0 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
600024a8 l     F .text.code	00000008 __sm_set_pool_veneer
600024b0 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600024b8 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
000105d8 g     F .text.itcm	00000010 _malloc_usable_size_r
00006b14  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000d622 g     F .text.itcm	000000a4 __cvt
0000526c g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010b2 g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
00010cec g     F .text.itcm	000000b4 _scanf_chars
00002734 g     F .text.itcm	00000060 pushData(unsigned long*)
0000a2b8 g     F .text.itcm	00000014 usb_serial_available
00010596 g     F .text.itcm	00000042 __any_on
000117dc g     F .text.itcm	00000020 _isatty_r
0000e84c g     F .text.itcm	00000010 strcpy
000076f0 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000e768 g     F .text.itcm	00000024 _lseek_r
00009194 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bf50  w    F .text.itcm	00000074 yield
000085d8  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20020c58 g     O .bss	00000060 proc_stat
2002139c g     O .bss	00000004 usb_timer1_callback
000039e4 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00003a3c g     F .text.itcm	00000014 MTPD::write32(unsigned long)
0000754c g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c2be g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200211b8 g     O .bss	000001b8 storage
60002630 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200213ca g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003846 g     F .text.itcm	00000002 rtcXferTime()
00008542  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001e3c g     O .data	00000140 Wire1
00008c2c  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00011b18 g     F .text.itcm	0000005a .hidden __floatdidf
00007d28 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20020c50 g     O .bss	00000004 procCount
00007a58 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200207fc g     O .bss	00000004 FsDateTime::callback
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00007e4c g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00008a14 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c258 g     F .text.itcm	0000001a Print::println()
00004f80 g     F .text.itcm	00000098 TwoWire::isr()
200004b4 g     O .data	00000070 vtable for DedicatedSpiCard
20020c54 g     O .bss	00000004 procMiss
0000e562 g     F .text.itcm	00000024 __sseek
0000e398 g     F .text.itcm	00000030 __sinit
00005798 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010604 g     F .text.itcm	00000094 fcvtbuf
000115c8 g     F .text.itcm	0000007a __swbuf_r
00003902 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000c8e0 g     F .text.itcm	0000000c __malloc_unlock
000037b6 g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
200022a8 g     O .data	00000004 t_4
20020834 g     O .bss	00000004 FsVolume::m_cwv
00003770 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002704 g     F .text.itcm	00000008 getStore()
000070fc g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20007dc8 g     O .bss	00000004 SerNum
2002153c g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008536  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000d4e4 g     F .text.itcm	0000000c _strtod_r
000016b6 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000e58e g     F .text.itcm	0000004a _vdprintf_r
000071de g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000f654 g     F .text.itcm	0000002a __hexdig_fun
00008866 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000b590 g     F .text.itcm	00000044 eeprom_initialize
00003048 g     F .text.itcm	000000e0 saveData(short)
2002146e g     O .bss	00000002 shift
20001ce8 g     O .data	00000004 F_CPU_ACTUAL
0000e66c g     F .text.itcm	00000034 memmove
2002137c g     O .bss	00000004 t_1
000016e4 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20020c2c g     O .bss	00000004 max_stat
0000e404 g     F .text.itcm	00000068 snprintf
00009b1c g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000fc84 g     F .text.itcm	00000080 _Balloc
00000c7e  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
00011c2c g       .ARM.exidx	00000000 __exidx_end
0000796a g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
2002153b g     O .bss	00000001 EventResponder::runningFromYield
00009d12 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
0000842c g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000b9c4 g     F .text.itcm	00000060 tempmonGetTemp
0000b904 g     F .text.itcm	0000001e smalloc_verify_pool
0000e7f4 g     F .text.itcm	0000000c __errno
0000212c g     F .text.itcm	0000009c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2002080c g     O .bss	00000004 EventResponder::firstInterrupt
0000b014 g     F .text.itcm	00000028 usb_transfer_status
00003b92 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000b956 g     F .text.itcm	0000006a sm_set_pool
00002b88 g     F .text.itcm	00000014 newFolder(int)
20020814 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003848 g     F .text.itcm	00000004 rtcGetTimestamp()
20020994 g     O .bss	00000004 __stdio_exit_handler
000004e0  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000060c0 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00011b74 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
000029f8 g     F .text.itcm	00000014 headerUpdate(long)
0000c154  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000117b8 g     F .text.itcm	00000024 _fstat_r
20000614 g     O .data	00000370 digital_pin_to_info_PGM
20020ba4 g     O .bss	00000004 errno
00009d1c g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00005e44 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002568  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
00010da0 g     F .text.itcm	000001e8 _scanf_i
0000e526 g     F .text.itcm	00000004 __seofread
00011c28 g       .text.itcm	00000000 _etext
00008168 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00008df0 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d7a g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003992 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001950 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009450 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00005fe0 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002728 g       *ABS*	00000000 _stextload
0000027c g     F .text.itcm	00000224 loop
0000bac8 g     F .text.itcm	00000072 flexpwm_init
0000b654 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000af28 g     F .text.itcm	00000040 usb_config_rx
00003dcc g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00005568 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009954 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00004d88 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
00003802 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20020808 g     O .bss	00000004 EventResponder::lastInterrupt
000082cc g     F .text.itcm	0000002a FsBaseFile::close()
0000e5d8 g     F .text.itcm	00000014 vdiprintf
00004b52 g     F .text.itcm	00000048 SPIClass::end()
00009dd0 g     F .text.itcm	00000134 memcpy
0000fb28 g     F .text.itcm	00000136 __hexnan
00001714 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00008adc g     F .text.itcm	00000032 SharedSpiCard::writeStop()
000050b4 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
00001562 g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
0000211c g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
00005f24 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
0000141c g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00006dbe g     F .text.itcm	00000026 FatFile::peek()
000021c8 g     F .text.itcm	00000048 menu1(short)
20020c34 g     O .bss	00000004 nbuf
0001074c g     F .text.itcm	000001fc _svfprintf_r
00011aa0 g     F .text.itcm	00000022 .hidden __floatsidf
20021374 g     O .bss	00000004 systick_millis_count
000065c4 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000bdb4 g     F .text.itcm	00000030 usb_mtp_available
000004a0 g     F .text.itcm	00000040 setup1()
00004d54 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000e5ec g     F .text.itcm	00000060 _vasniprintf_r
00004514 g     F .text.itcm	000005e6 MTPD::loop()
0000c48c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200215e3 g     O .bss	00000001 usb_configuration
0000852c  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000b922 g     F .text.itcm	00000034 sm_align_pool
00009b80 g     F .text.itcm	0000001c SdioCard::syncDevice()
00009568 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00006de4 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
000104f0 g     F .text.itcm	00000060 __ratio
000085e6 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002630  w    O .text.progmem	00000018 usb_string_manufacturer_name
200022a4 g     O .data	00000004 t_3
60002608 g     O .text.progmem	00000008 usb_string_mtp
0000c788 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
00003770 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025b8  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000054c  w    O .data	00000024 vtable for FsFile
0000b4fa  w    F .text.itcm	0000000a _fstat
20020998 g     O .bss	00000200 acqBuffer
00004ba6  w    F .text.itcm	0000001e TwoWire::read()
000111cc g     F .text.itcm	0000003c __assert_func
000044e0 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002c9c g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
000082f6 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200211b0 g     O .bss	00000004 sessionID_
00002d50 g     F .text.itcm	00000094 do_hibernate(unsigned long)
00008532  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c68  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
000109c2 g     F .text.itcm	0000003a __ssrefill_r
20021378 g     O .bss	00000004 systick_safe_read
00004c40 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006658 g     F .text.itcm	000000ca ExFatFile::truncate()
200020c4 g     O .data	00000000 .hidden __dso_handle
0000b730 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011a80 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000e740 g     F .text.itcm	00000008 _localeconv_r
2000229c g     O .data	00000004 sd_str
00009cbe g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
0000ff04 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000bc7c g     F .text.itcm	000000a4 usb_mtp_configure
200022b0 g     O .data	00000004 t_on
600026b5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c4bc g     F .text.itcm	000002c8 .hidden __udivmoddi4
00003cf4 g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
000117fc g     F .text.itcm	00000000 .hidden __aeabi_drsub
00009d0c g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006b3a g     F .text.itcm	00000036 FatFile::addCluster()
0000e7b0 g     F .text.itcm	00000020 _sbrk_r
00008fbc g     F .text.itcm	0000001c SdioCard::type() const
00003934 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a32c g     F .text.itcm	0000001e usb_serial_getchar
00000d62  w    F .text.itcm	00000018 FsVolume::clusterCount() const
2002138c g     O .bss	00000008 usb_cdc_line_coding
0000ba24 g     F .text.itcm	00000040 digitalWrite
00007748  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20020810 g     O .bss	00000004 EventResponder::lastYield
00005542 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000e78c g     F .text.itcm	00000024 _read_r
00000cce  w    F .text.itcm	00000024 Print::write(char const*)
20021388 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
000085d0  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20020ba8 g     O .bss	00000010 extmem_smalloc_pool
0000895c g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000ba64 g     F .text.itcm	00000064 pinMode
00001496 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ef8  w    F .text.itcm	0000001c FsFile::FsFile()
0000c350 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011ac4 g     F .text.itcm	00000042 .hidden __extendsfdf2
000109fc g     F .text.itcm	000002f0 __ssvfscanf_r
0000c118  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000eb0  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011808 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20001f7c g     O .data	00000140 Wire2
00003cc4 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003920 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60016c00 g     O .text.csf	00000c00 hab_csf
000039a8 g     F .text.itcm	0000003a MTPD::writestring(char const*)
000079b0 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
000103a8 g     F .text.itcm	00000094 __b2d
00003528 g     F .text.itcm	000001a4 adc_init()
00011c24 g       .ARM.exidx	00000000 __exidx_start
70480000 g       .bss.extram	00000000 _extram_end
000008d4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200022a0 g     O .data	00000004 t_2
0000c0f4  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b504  w    F .text.itcm	00000004 _isatty
20020804 g     O .bss	00000004 EventResponder::firstYield
00000eea g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
00005148 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c8ec g     F .text.itcm	0000005e _realloc_r
0000e800 g     F .text.itcm	00000048 __libc_init_array
0000b084 g     F .text.itcm	00000248 dtostrf
00004b9a  w    F .text.itcm	0000000c TwoWire::available()
00005c8e g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00008dfc g     F .text.itcm	0000001c SdioCard::readCID(CID*)
0000640e g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001556 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001b14 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00003794 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
0000fdd4 g     F .text.itcm	00000094 __s2b
000088de  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b50e  w    F .text.itcm	00000004 abort
00004e6c g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c13c  w    F .text.itcm	00000004 usb_serial_class::clear()
00011a80 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b4c4  w    F .text.itcm	0000002c _sbrk
60014354 g       *ABS*	00000000 _sdataload
00010210 g     F .text.itcm	00000038 __mcmp
0000189a g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
200020c0 g     O .data	00000004 __brkval
200215e2 g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000a09c g     F .text.itcm	00000002 usb_serial_reset
00006be0 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000b7e4 g     F .text.itcm	00000104 eeprom_write_byte
00000fd0  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00011ba8 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000264c g     O .text.progmem	00000069 usb_config_descriptor_12
20000570 g     O .data	00000024 vtable for TwoWire
0000c980 g     F .text.itcm	00000b64 _strtod_l
0000fb00 g     F .text.itcm	00000028 __match
20021620 g       .bss	00000000 _ebss
00009210 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003a50 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
20002294 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000fe68 g     F .text.itcm	00000040 __hi0bits
000054b6 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
00005024 g     F .text.itcm	0000000c lpi2c3_isr()
000064be g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20201880 g       .bss.dma	00000000 _heap_start
00003b68 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200215b6 g     O .bss	00000001 __lock___malloc_recursive_mutex
00001c90 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
000060d8 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002518  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008d4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2002085c g     O .bss	00000138 __sf
20001ce0 g     O .data	00000004 CrashReport
20020ce4 g     O .bss	000004cc sdx
000087dc g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000554 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200026e0 g     O .bss	00000020 endpoint0_transfer_data
0000694a g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
0000521e g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c47c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000bb70 g     F .text.itcm	00000060 pwm_init
0001131c g     F .text.itcm	00000024 fprintf
00011808 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20020bb8 g     O .bss	00000050 file
00004248 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
200022e3 g     O .data	00000001 usb_mtp_status
60017800 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010084 g     F .text.itcm	000000b4 __pow5mult
00006ec2 g     F .text.itcm	0000004c FatFile::rmdir()
200004a8 g     O .data	0000000c vtable for CrashReportClass
00011b08 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00005030 g     F .text.itcm	0000000c lpi2c4_isr()
000078e8 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20020c08 g     O .bss	00000004 haveStore
00008c6a  w    F .text.itcm	00000002 SdioCard::end()
0000e404 g     F .text.itcm	00000068 sniprintf
200026c0 g     O .bss	00000020 endpoint0_transfer_ack
20021394 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000afd4 g     F .text.itcm	00000024 usb_transmit
00000d30  w    F .text.itcm	00000014 Print::println(char const*)
0000c000 g     F .text.itcm	00000020 systick_isr
0000e84a g     F .text.itcm	00000002 __retarget_lock_release_recursive
0000383e g     F .text.itcm	00000004 rtc_get_datetime(datetime_t*)
0000395c g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001cec g     O .data	00000010 Serial
20020c0c g     O .bss	00000020 logBuffer
00010698 g     F .text.itcm	000000b4 __ssputs_r
00002124 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c15c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
000083cc g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
00006178 g     F .text.itcm	00000094 ExFatFile::addCluster()
00008740 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a274 g     F .text.itcm	00000044 usb_serial_peekchar
0001136e g     F .text.itcm	00000024 __sfputs_r
0000e380 g     F .text.itcm	0000000c __sfp_lock_acquire
0000e860 g     F .text.itcm	00000000 memchr
00007818 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000d748  w    F .text.itcm	00000434 _printf_float
0000a5d0 g     F .text.itcm	00000250 set_arm_clock
20021370 g     O .bss	00000004 systick_cycle_count
200022ba g     O .data	00000016 usb_string_serial_number_default
0000f518 g     F .text.itcm	00000098 _free_r
00008a4a g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00008b0e g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
000094f4 g     F .text.itcm	00000074 SdioCard::readStop()
00000d96  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
0000853a  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a36 g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c14c  w    F .text.itcm	00000004 usb_serial_class::flush()
00010948 g     F .text.itcm	0000007a _sungetc_r
00011804 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c144  w    F .text.itcm	00000004 usb_serial_class::read()
00008214 g     F .text.itcm	000000b8 FatFile::remove()
00011b08 g     F .text.itcm	0000006a .hidden __floatundidf
00000ef8  w    F .text.itcm	0000001c FsFile::FsFile()
0000b508  w    F .text.itcm	00000006 _lseek
00003708 g     F .text.itcm	00000068 adcStatus()
00010138 g     F .text.itcm	000000d8 __lshift
00002de4 g     F .text.itcm	00000264 storeData(short)
00007318 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000afa8 g     F .text.itcm	0000002c usb_prepare_transfer
0000853e  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b344 g     F .text.itcm	00000180 unused_interrupt_vector
60001d28 g     F .text.code	0000012c tempmon_init
20021398 g     O .bss	00000004 usb_timer0_callback
00007c5c g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000e5ec g     F .text.itcm	00000060 _vasnprintf_r
00002d3c g     F .text.itcm	00000014 powerDown()
00008568 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00005bc8 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000b5d4 g     F .text.itcm	00000064 eeprom_read_byte
0000e6e6 g     F .text.itcm	00000036 strlcpy
000011dc g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000e71c g     F .text.itcm	00000024 strncmp
00007bca g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00006506 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a2cc g     F .text.itcm	00000060 usb_serial_flush_input
20002290 g     O .data	00000004 fsamp
00005f7e g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001324 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f6c  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
0000ff30 g     F .text.itcm	00000154 __multiply
0000270c g     F .text.itcm	0000001c getDataCount()
0000a4d8 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000e58e g     F .text.itcm	0000004a _vdiprintf_r
00000af8 g     F .text.itcm	00000080 i2s_setup()
00003520 g     F .text.itcm	00000008 adcStart()
0001043c g     F .text.itcm	000000b4 __d2b
00008b5c g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
00008c62  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
00008ea8  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c82  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b78 g     F .text.itcm	000000a4 dma_setup()
00008664 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000088a0 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
000095f0 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00011318 g     F .text.itcm	00000004 _strtoul_r
000034c0 g     F .text.itcm	00000024 usbPowerInit()
0000bde4 g     F .text.itcm	000000c4 usb_mtp_send
0000aa80 g     F .text.itcm	000004a8 usb_isr
0000d5f8 g     F .text.itcm	0000001c __cxa_atexit
000055e8 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000e748 g     F .text.itcm	00000020 _close_r
00008bf2  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011aa0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
0000891a g     F .text.itcm	0000002a SharedSpiCard::readStop()
000051d0 g     F .text.itcm	0000004e FsCache::sync()
0000e64c g     F .text.itcm	00000020 memcmp
20000524  w    O .data	00000028 vtable for usb_serial_class
00009d3e g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000401a g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
00009d86 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20020ce0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e4ac g     F .text.itcm	00000058 sscanf
00011644 g     F .text.itcm	000000b0 __swsetup_r
0000c784  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006298 g     F .text.itcm	00000056 ExFatFile::rmdir()
00003ed8 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d44  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002914 g     F .text.itcm	000000e4 headerInit(long, long, long, int)
000088e6 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010550 g     F .text.itcm	00000046 __copybits
0000427c g     F .text.itcm	00000016 MTPD::read16()
00000c8e g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000e504 g     F .text.itcm	00000022 __sread
0000a53c g     F .text.itcm	00000094 usb_serial_flush_output
0000b638 g     F .text.itcm	0000001c eeprom_read_block
0000c8d4 g     F .text.itcm	0000000c __malloc_lock
000053a4 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002400 g     O .data	000002c0 _VectorsRam
00009d46 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000087b0 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011094 g     F .text.itcm	00000050 _fflush_r
00011208 g     F .text.itcm	0000002c _calloc_r
000041e4 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002a6c g     F .text.itcm	000000c0 makeHeader(long*)
00000f2c  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00007ee4 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200022ac g     O .data	00000004 t_acq
200215e6 g     O .bss	00000001 yield_active_check_flags
000063cc g     F .text.itcm	00000042 ExFatFile::sync()
0000e848 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200215e4 g     O .bss	00000001 usb_high_speed
000073bc g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
000092ec g     F .text.itcm	00000040 SdioCard::isBusy()
0000397c g     F .text.itcm	00000016 MTPD::write8(unsigned char)
00009d8c g     F .text.itcm	00000000 memset
0000c162 g     F .text.itcm	00000010 main
0000d614 g     F .text.itcm	00000006 fcvt
00005cc8 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20201800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00008b8c g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006724 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
20000448 g     O .data	00000060 vtable for MTPStorage_SD
0000430c g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000e6a0 g     F .text.itcm	00000046 strlcat
000071a8 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000e586 g     F .text.itcm	00000008 __sclose
0000bea8 g     F .text.itcm	00000054 usb_init_serialnumber
0000d5f4 g     F .text.itcm	00000004 _strtol_r
600024d0 g       .text.code	00000000 __init_array_end
0000ea40 g     F .text.itcm	00000ad8 _dtoa_r
0000c7e8 g     F .text.itcm	000000ec _malloc_r
00008546 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
000105e8 g     F .text.itcm	0000001a __ascii_wctomb
00011b18 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20020838 g     O .bss	00000004 FatVolume::m_cwv
0000c0ec  w    F .text.itcm	00000008 Print::print(char const*)
00011156 g     F .text.itcm	00000074 __submore
20000604  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c1a0 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004afc g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
66686b4f g       *ABS*	00000000 __rtc_localtime
0000b2cc g     F .text.itcm	0000004c micros
000039f8 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
000062f0 g     F .text.itcm	000000dc ExFatFile::syncDir()
0000503c g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60002648 g     O .text.progmem	00000004 string0
0000a34c g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000aa20 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000df6  w    F .text.itcm	00000050 FsBaseFile::available() const
00008bd6 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c148  w    F .text.itcm	00000004 usb_serial_class::available()
0000e4ac g     F .text.itcm	00000058 siscanf
000042a6 g     F .text.itcm	00000030 MTPD::readstring(char*)
0000706c g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
00006152  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002610  w    O .text.progmem	00000020 usb_string_product_name
000038dc g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b318 g     F .text.itcm	0000002a delay
00011ba8 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200213c6 g     O .bss	00000002 dma_channel_allocated_mask
00000e8e g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00005522 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ec8  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00011c20 g     F .fini	00000000 _fini
00003504 g     F .text.itcm	00000014 acqPower(int)
000028bc  w    F .text.itcm	00000014 FsBaseFile::sync()
00004bdc g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00008710 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
20021380 g     O .bss	00000004 t_off
00005c9c g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e46c g     F .text.itcm	00000040 sprintf
0000c290 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000d6c6 g     F .text.itcm	0000007c __exponent
0000c246 g     F .text.itcm	00000012 Print::print(long)
000070ec g     F .text.itcm	00000010 FatFile::close()
0000b9c0 g     F .text.itcm	00000004 Panic_Temp_isr
00011b74 g     F .text.itcm	00000030 .hidden __fixdfdi
00000998 g     F .text.itcm	00000160 setAudioFrequency(int)
00002728 g     F .text.itcm	0000000c queue_isBusy()
20002298 g     O .data	00000004 sd
0000721e g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00008e44  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000e7d0 g     F .text.itcm	00000024 _write_r
0000932c g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
200022b8 g     O .data	00000002 again
00000258 g     F .text.itcm	00000024 lowPowerInit()
00003158 g     F .text.itcm	000000b4 filing_init()
0000bd20 g     F .text.itcm	00000094 usb_mtp_recv
0000e920 g     F .text.itcm	0000000c nanf
0000db7c g     F .text.itcm	000000da _printf_common
200211b4 g     O .bss	00000004 setup_ready
2000228c g     O .data	00000004 _impure_ptr
0000576e g     F .text.itcm	0000002a ExFatFile::peek()
00010f88 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000befc  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001cfc g     O .data	00000140 Wire
00008500 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e3c8 g     F .text.itcm	0000003c _fwalk_sglue
00008de4 g     F .text.itcm	0000000c SdioCard::errorCode() const
0000719a g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
000027e8 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
0001074c g     F .text.itcm	000001fc _svfiprintf_r
00002c08 g     F .text.itcm	00000094 newFileName(char*)
00000f14  w    F .text.itcm	00000018 FsFile::~FsFile()
00005e10 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000086c2 g     F .text.itcm	00000026 SharedSpiCard::spiStart()
0000188c g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0000fc5e g     F .text.itcm	00000024 __ascii_mbtowc
0001035c g     F .text.itcm	0000004c __ulp
0000aa54 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c0fc  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00004bc4  w    F .text.itcm	00000016 TwoWire::peek()
00004bda  w    F .text.itcm	00000002 TwoWire::flush()
00000788 g     F .text.itcm	0000014c setup
200009b8 g     O .data	00000078 usb_descriptor_list
00009070 g     F .text.itcm	00000004 SdioCard::status()
00001084 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00003944 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
000071fe g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e7c  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003518 g     F .text.itcm	00000008 adcReset()
00000e5a  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000e910 g     F .text.itcm	00000010 nan
00006c38 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004100 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
000109fc g     F .text.itcm	000002f0 __ssvfiscanf_r
00006bfe g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20020800 g     O .bss	00000004 ExFatVolume::m_cwv
000116f4 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00008528 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c0bc g     F .text.itcm	00000030 DMAChannel::release()
00002210 g     F .text.itcm	00000124 loadParameters()
0000a4f0 g     F .text.itcm	0000004c usb_serial_write_buffer_free
000034e4 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20002234 g     O .data	0000000c __sglue
0000a0a0 g     F .text.itcm	00000100 usb_serial_configure
00004c02 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c274  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
00005eea g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
200215c1 g     O .bss	00000001 external_psram_size
00003be4 g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
00008e44  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005314 g     F .text.itcm	00000048 FsName::get16()
000085d0  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000089b0 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00008556 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005454 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006b70 g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c150  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00005018 g     F .text.itcm	0000000c lpi2c1_isr()
0000771e g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c1c g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b03c g     F .text.itcm	00000046 ultoa
00004266 g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200213c4 g     O .bss	00000002 dgain
00008356 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
0000115c g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e52a g     F .text.itcm	00000038 __swrite
0000bfc4 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002620 g     F .text.itcm	000000e4 menu(short)
0000c140  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d61a g     F .text.itcm	00000008 fcvtf
00008c66  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000086e8 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003842 g     F .text.itcm	00000002 rtcSetDate(int, int, int)
0000119a g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
0001131c g     F .text.itcm	00000024 fiprintf
00011394 g     F .text.itcm	00000234 _vfiprintf_r
00003844 g     F .text.itcm	00000002 rtcSetTime(int, int, int)
00009bac  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002700 g     O .bss	00002440 mtpd
00010248 g     F .text.itcm	00000114 __mdiff
00002794 g     F .text.itcm	00000054 pullData(unsigned long*)
00008e34 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000014be g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00005eaa g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
000069f4 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002b2c g     F .text.itcm	0000005c checkEndOfFile(short)
20002240 g     O .data	0000004c _impure_data
00005878 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002a0c g     F .text.itcm	00000060 writeHeader(char*)
00001f84 g     F .text.itcm	00000198 menu3()
0000e38c g     F .text.itcm	0000000c __sfp_lock_release
20020c30 g     O .bss	00000004 mtp_txEventCount
0000c104  w    F .text.itcm	00000014 Print::println(unsigned long, int)
000028d0 g     F .text.itcm	00000044 timeStamp()
000094f4 g     F .text.itcm	00000074 SdioCard::writeStop()
0000e46c g     F .text.itcm	00000040 siprintf
000110e4 g     F .text.itcm	00000072 __sccl
000087a8 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
000054ee g     F .text.itcm	00000014 ExFatFile::close()
20001205 g     O .data	00000101 _ctype_
0000b4f0  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000c784  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001020 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
00004292 g     F .text.itcm	00000014 MTPD::read32()
20001ce4 g     O .data	00000004 F_BUS_ACTUAL
0000bb3a g     F .text.itcm	00000036 quadtimer_init
20020b98 g     O .bss	00000004 disk_count
00007b70 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
0000c174 g     F .text.itcm	0000002c Stream::timedRead()
00011740 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c020 g     F .text.itcm	0000009c DMAChannel::begin(bool)
000085d2  w    F .text.itcm	00000006 SharedSpiCard::end()
0000e900 g     F .text.itcm	00000010 strlen
0000dc58 g     F .text.itcm	00000244 _printf_i
00006c0a g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00006e22 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000f680 g     F .text.itcm	0000045c __gethex
60002610 g     O .text.progmem	00000020 usb_string_product_name_default
20020858 g     O .bss	00000004 __malloc_sbrk_start
000036cc g     F .text.itcm	0000003c setAGain(signed char)
0000e5d8 g     F .text.itcm	00000014 vdprintf
0000928c g     F .text.itcm	00000060 SdioCard::sectorCount()
00006fd0 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
20000594 g     O .data	00000070 vtable for SdioCard
00011ac4 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000012a2 g     F .text.itcm	00000082 MTPStorage_SD::close()
00006ae0 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
00000e46  w    F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)
0000b8e8 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
00008c5e  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001384 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20020854 g     O .bss	00000004 __malloc_free_list
000088d6  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002b9c g     F .text.itcm	0000006c newDirectory(char*)
00009a08 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002334 g     F .text.itcm	000002ec menu2()
00009cb0 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
0000320c g     F .text.itcm	00000290 compress(void*)
00006930  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c8a g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011804 g     F .text.itcm	0000027a .hidden __subdf3
00011394 g     F .text.itcm	00000234 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000aff8 g     F .text.itcm	0000001c usb_receive
00005d70 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
0000128c g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20021384 g     O .bss	00000004 t_rep
0000fea8 g     F .text.itcm	0000005a __lo0bits
00005e84 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
200022b4 g     O .data	00000004 tempDatai
00006f0e g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00017800 g       *ABS*	00000000 _flashimagelen
00008944 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c480 g     F .text.itcm	0000000a __aeabi_atexit
00000f14  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b514 g     F .text.itcm	00000024 rtc_get
0000620c g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000bffc g     F .text.itcm	00000004 pendablesrvreq_isr
000043ec g     F .text.itcm	000000f4 MTPD::SendObject()
200213c8 g     O .bss	00000002 monitor
00001e68 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
200020c8 g     O .data	0000016c __global_locale
000096e8 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00005502 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a1a0 g     F .text.itcm	000000d4 usb_serial_read
200215b7 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c2aa g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000af68 g     F .text.itcm	00000040 usb_config_tx
0000b4f4  w    F .text.itcm	00000006 _close
0000775a g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000c798 g     F .text.itcm	00000010 free
0000de9c  w    F .text.itcm	00000408 _scanf_float
0000535c g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010de g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000fd48 g     F .text.itcm	0000008c __multadd
0000fd04 g     F .text.itcm	00000044 _Bfree
00006972 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
200022ba  w    O .data	00000016 usb_string_serial_number
00009a74 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00008e18 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x20021620

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002490 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002440 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002498 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002438 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00011c28
600015dc:	.word	0x60002728
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x60014354
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000b345
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000bffd
6000160c:	.word	0x0000c001
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20021370
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20021374
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000614
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000614

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000614
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000614

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002480 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	600024b0 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002468 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002460 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000aa81
60001894:	.word	0x20002400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20021620
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	600024a8 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002460 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70480000
60001cc0:	.word	0x200215c1
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20020ba8

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x20020cd4
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x20020cd0
60001e34:	.word	0x401f4400
60001e38:	.word	0x20020cd8
60001e3c:	.word	0x20020cdc
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20002400
60001e50:	.word	0x0000b9c1

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	600024b8 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	60002478 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	60002478 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	60002478 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	60002450 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	600024a0 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	60002488 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	600024a0 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	60002488 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	60002428 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	60002488 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	60002428 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	60002488 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	60002428 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	60002488 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	60002450 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	60002488 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	600024a0 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	60002488 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	600024a0 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002470 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	60002488 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	60002430 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	60002488 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x20001490
600021ec:	.word	0x2000149d
600021f0:	.word	0x200019c6
600021f4:	.word	0x200014c4
600021f8:	.word	0x200014e9
600021fc:	.word	0x200014f2
60002200:	.word	0x200015b8
60002204:	.word	0x200015da
60002208:	.word	0x200015f9
6000220c:	.word	0x20001638
60002210:	.word	0x20001698
60002214:	.word	0x200017d1
60002218:	.word	0x200017f3
6000221c:	.word	0x200018cf
60002220:	.word	0x200018d8
60002224:	.word	0x2000191b
60002228:	.word	0x2000193e
6000222c:	.word	0x20001944
60002230:	.word	0x20001ce8
60002234:	.word	0x000f4240
60002238:	.word	0x20001962
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20001abf
60002248:	.word	0x20001b08
6000224c:	.word	0x20001b49
60002250:	.word	0x20001b71
60002254:	.word	0x20001b9c
60002258:	.word	0x20001bc3
6000225c:	.word	0x20001bed
60002260:	.word	0x20001c0f
60002264:	.word	0x20001c31
60002268:	.word	0x20001c5b
6000226c:	.word	0x20001c7d
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x2000151b
6000227c:	.word	0x2000153d
60002280:	.word	0x20001567
60002284:	.word	0x2000158d
60002288:	.word	0x20021620
6000228c:	.word	0x20001656
60002290:	.word	0x200016b9
60002294:	.word	0x200016e6
60002298:	.word	0x2000172b
6000229c:	.word	0x2000176b
600022a0:	.word	0x2000179f
600022a4:	.word	0x20001817
600022a8:	.word	0x2000184a
600022ac:	.word	0x20001873
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	600024b8 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	60002488 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	60002448 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	60002488 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	60002430 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	60002488 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	60002428 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002458 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x2000188a
60002388:	.word	0x200018b3
6000238c:	.word	0x200018ff
60002390:	.word	0x20001967
60002394:	.word	0x2000197f
60002398:	.word	0x200019c8
6000239c:	.word	0x20001a12
600023a0:	.word	0x20001a37
600023a4:	.word	0x20001a7f
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20001ccf
600023b4:	.word	0x20001a7d
600023b8:	.word	0x20001cc0
600023bc:	.word	0x20001938

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x200215b8

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print5printEmi_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print5printEmi_veneer+0x4>
6000242c:	.word	0x0000c0fd

60002430 <___ZN5Print11printNumberEmhh_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002434:	.word	0x0000c2ab

60002438 <__main_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <__main_veneer+0x4>
6000243c:	.word	0x0000c163

60002440 <__pwm_init_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__pwm_init_veneer+0x4>
60002444:	.word	0x0000bb71

60002448 <___ZN5Print5printEl_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <___ZN5Print5printEl_veneer+0x4>
6000244c:	.word	0x0000c247

60002450 <___ZN5Print7printlnEv_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <___ZN5Print7printlnEv_veneer+0x4>
60002454:	.word	0x0000c259

60002458 <___ZN5Print7printlnEPKc_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <___ZN5Print7printlnEPKc_veneer+0x4>
6000245c:	.word	0x00000d31

60002460 <__memset_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <__memset_veneer+0x4>
60002464:	.word	0x00009d8d

60002468 <__delay_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <__delay_veneer+0x4>
6000246c:	.word	0x0000b319

60002470 <___ZN5Print10printFloatEdh_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print10printFloatEdh_veneer+0x4>
60002474:	.word	0x0000c351

60002478 <___ZN5Print5printEh_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <___ZN5Print5printEh_veneer+0x4>
6000247c:	.word	0x0000c0f5

60002480 <___ZN7TwoWire8setClockEm_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN7TwoWire8setClockEm_veneer+0x4>
60002484:	.word	0x0000503d

60002488 <___ZN5Print5printEPKc_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <___ZN5Print5printEPKc_veneer+0x4>
6000248c:	.word	0x0000c0ed

60002490 <__set_arm_clock_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <__set_arm_clock_veneer+0x4>
60002494:	.word	0x0000a5d1

60002498 <____libc_init_array_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <____libc_init_array_veneer+0x4>
6000249c:	.word	0x0000e801

600024a0 <___ZN5Print7printlnEmi_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN5Print7printlnEmi_veneer+0x4>
600024a4:	.word	0x0000c105

600024a8 <__sm_set_pool_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <__sm_set_pool_veneer+0x4>
600024ac:	.word	0x0000b957

600024b0 <__usb_init_serialnumber_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <__usb_init_serialnumber_veneer+0x4>
600024b4:	.word	0x0000bea9

600024b8 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
600024bc:	.word	0x0000c119

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......E...)1..

Disassembly of section .text.progmem:

600024d0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d4:	ldr	r3, [pc, #60]	; (60002514 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024d6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024da:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024de:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024e8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024ec:	ldr	r2, [r3, #112]	; 0x70
600024ee:	bic.w	r2, r2, #4096	; 0x1000
600024f2:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f4:	ldr	r2, [r3, #112]	; 0x70
600024f6:	cmp	r2, #0
600024f8:	bge.n	600024f4 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fa:	ldr.w	r2, [r3, #368]	; 0x170
600024fe:	bic.w	r2, r2, #8388608	; 0x800000
60002502:	bic.w	r2, r2, #32768	; 0x8000
60002506:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250a:	ldr	r2, [r3, #112]	; 0x70
6000250c:	bic.w	r2, r2, #65536	; 0x10000
60002510:	str	r2, [r3, #112]	; 0x70
  }
60002512:	bx	lr
60002514:	.word	0x400d8000

60002518 <TwoWire::i2c4_hardware>:
60002518:	...@............
60002528:	...@............
	...
60002540:	...........@....
60002550:	................
60002560:	....1P..

60002568 <TwoWire::i2c3_hardware>:
60002568:	p..@............
60002578:	...@....,.......
60002588:	...@............
60002598:	...@....-.......
600025a8:	...@........%P..

600025b8 <TwoWire::i2c1_hardware>:
600025b8:	p..@............
600025c8:	...@............
	...
600025e0:	...........@....
600025f0:	................
60002600:	.....P..

60002608 <usb_string_mtp>:
60002608:	..M.T.P.

60002610 <usb_string_product_name_default>:
60002610:	 .T.e.e.n.s.y. .
60002620:	M.T.P. .D.i.s.k.

60002630 <usb_string_manufacturer_name_default>:
60002630:	..T.e.e.n.s.y.d.
60002640:	u.i.n.o.

60002648 <string0>:
60002648:	....

6000264c <usb_config_descriptor_12>:
6000264c:	..i.....2.......
6000265c:	...........$....
6000266c:	$....$...$......
6000267c:	................
6000268c:	.@......@.......
6000269c:	........@......@
600026ac:	...... ..

600026b5 <usb_config_descriptor_480>:
600026b5:	..i.....2.......
600026c5:	...........$....
600026d5:	$....$...$......
600026e5:	................
600026f5:	................
60002705:	................
60002715:	...... ..

6000271e <qualifier_descriptor>:
6000271e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      36:	bx	lr
      38:	.word	0x200026c0
      3c:	.word	0x200026c0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      40:	.word	0x00000000

00000044 <frame_dummy>:
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20020c38
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60017800

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	706c <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	63cc <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	6c38 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	55e8 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	6dbe <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	576e <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	bf50 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200215e3
     154:	.word	0x200215e2
     158:	.word	0x20021374
     15c:	.word	0x20021394

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	e900 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c258 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	82cc <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	82cc <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	82cc <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000450
     1dc:	.word	0x2000042c

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	754c <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6724 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	b318 <delay>
    usb_init();
     22a:	bl	11c00 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4514 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20002700

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     258:	ldr	r3, [pc, #28]	; (278 <lowPowerInit()+0x20>)
     25a:	ldr	r2, [r3, #100]	; 0x64
     25c:	orr.w	r2, r2, #131072	; 0x20000
     260:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     262:	ldr	r2, [r3, #84]	; 0x54
     264:	bic.w	r2, r2, #35	; 0x23
     268:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     26a:	ldr	r2, [r3, #84]	; 0x54
     26c:	orr.w	r2, r2, #1
     270:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     272:	dsb	sy
  }
     276:	bx	lr
     278:	.word	0x400fc000

0000027c <loop>:
{
     27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     280:	ldr	r6, [pc, #432]	; (434 <loop+0x1b8>)
{
     282:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     284:	ldr	r5, [pc, #432]	; (438 <loop+0x1bc>)
  loopCount++;
     286:	ldr	r3, [r6, #0]
     288:	ldr	r4, [pc, #432]	; (43c <loop+0x1c0>)
     28a:	adds	r3, #1
     28c:	str	r3, [r6, #0]
  nb = getDataCount();
     28e:	bl	270c <getDataCount()>
  if(nb>mxb) mxb=nb;
     292:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r2, [pc, #424]	; (440 <loop+0x1c4>)
  if(nb>mxb) mxb=nb;
     296:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     298:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     29a:	it	cc
     29c:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29e:	tst.w	r3, #1
     2a2:	bne.n	2b8 <loop+0x3c>
     2a4:	ldr	r3, [pc, #412]	; (444 <loop+0x1c8>)
     2a6:	ldr	r3, [r3, #0]
     2a8:	cmp	r3, #1
     2aa:	mov.w	r3, #4294967295
     2ae:	it	ne
     2b0:	movne	r3, #0
     2b2:	strh	r3, [r4, #0]
     2b4:	movs	r3, #1
     2b6:	str	r3, [r2, #0]
  status=menu(status);
     2b8:	ldrh	r0, [r4, #0]
     2ba:	sxth	r0, r0
     2bc:	bl	2620 <menu(short)>
     2c0:	strh	r0, [r4, #0]
    if(status<0)
     2c2:	ldrh	r3, [r4, #0]
     2c4:	lsls	r3, r3, #16
     2c6:	bpl.n	2ce <loop+0x52>
    { mtpd.loop();
     2c8:	ldr	r0, [pc, #380]	; (448 <loop+0x1cc>)
     2ca:	bl	4514 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ce:	ldrh	r3, [r4, #0]
     2d0:	sxth	r3, r3
     2d2:	cmp	r3, #0
     2d4:	ble.n	2de <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d6:	ldr	r3, [pc, #372]	; (44c <loop+0x1d0>)
     2d8:	movs	r2, #8
     2da:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2de:	ldrh	r0, [r4, #0]
     2e0:	sxth	r0, r0
     2e2:	bl	3048 <saveData(short)>
     2e6:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e8:	ldrh	r3, [r4, #0]
     2ea:	sxth	r3, r3
     2ec:	cmp	r3, #0
     2ee:	ble.n	2f8 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2f0:	ldr	r3, [pc, #344]	; (44c <loop+0x1d0>)
     2f2:	movs	r2, #8
     2f4:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f8:	ldr	r3, [pc, #340]	; (450 <loop+0x1d4>)
  if((t1=millis())>(t0+1000))
     2fa:	ldr	r7, [pc, #344]	; (454 <loop+0x1d8>)
     2fc:	ldr	r3, [r3, #0]
     2fe:	str	r3, [sp, #28]
     300:	ldr	r3, [r7, #0]
     302:	ldr	r2, [sp, #28]
     304:	add.w	r3, r3, #1000	; 0x3e8
     308:	cmp	r3, r2
     30a:	bcs.n	3f0 <loop+0x174>
    if(monitor)
     30c:	ldr	r3, [pc, #328]	; (458 <loop+0x1dc>)
     30e:	ldr.w	sl, [pc, #388]	; 494 <loop+0x218>
     312:	ldrsh.w	r3, [r3]
     316:	ldr.w	r9, [pc, #384]	; 498 <loop+0x21c>
     31a:	ldr.w	r8, [pc, #384]	; 49c <loop+0x220>
     31e:	cmp	r3, #0
     320:	beq.n	3da <loop+0x15e>
      rtc_get_datetime(&t);
     322:	add	r0, sp, #32
     324:	bl	383e <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     328:	ldrsb.w	r3, [sp, #36]	; 0x24
     32c:	ldrsh.w	r2, [sp, #32]
     330:	str	r3, [sp, #16]
     332:	ldrsb.w	r3, [sp, #39]	; 0x27
     336:	ldr	r1, [pc, #292]	; (45c <loop+0x1e0>)
     338:	str	r3, [sp, #12]
     33a:	ldrsb.w	r3, [sp, #38]	; 0x26
     33e:	ldr	r0, [pc, #288]	; (460 <loop+0x1e4>)
     340:	str	r3, [sp, #8]
     342:	ldrsb.w	r3, [sp, #37]	; 0x25
     346:	str	r3, [sp, #4]
     348:	ldrsb.w	r3, [sp, #35]	; 0x23
     34c:	str	r3, [sp, #0]
     34e:	ldrsb.w	r3, [sp, #34]	; 0x22
     352:	bl	c290 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     356:	ldr	r1, [pc, #268]	; (464 <loop+0x1e8>)
     358:	ldr	r0, [pc, #260]	; (460 <loop+0x1e4>)
     35a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     35e:	ldr	r1, [r6, #0]
     360:	ldr	r0, [pc, #252]	; (460 <loop+0x1e4>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #256]	; (468 <loop+0x1ec>)
     368:	ldr	r0, [pc, #244]	; (460 <loop+0x1e4>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     36e:	ldr.w	r1, [sl]
     372:	ldr	r0, [pc, #236]	; (460 <loop+0x1e4>)
     374:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     378:	ldr	r1, [pc, #236]	; (468 <loop+0x1ec>)
     37a:	ldr	r0, [pc, #228]	; (460 <loop+0x1e4>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     380:	ldr.w	r1, [r9]
     384:	ldr	r0, [pc, #216]	; (460 <loop+0x1e4>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #220]	; (468 <loop+0x1ec>)
     38c:	ldr	r0, [pc, #208]	; (460 <loop+0x1e4>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     392:	ldrh	r2, [r5, #0]
     394:	ldr	r1, [pc, #212]	; (46c <loop+0x1f0>)
     396:	ldr	r0, [pc, #200]	; (460 <loop+0x1e4>)
     398:	bl	c290 <Print::printf(char const*, ...)>
     39c:	ldr	r1, [pc, #208]	; (470 <loop+0x1f4>)
     39e:	ldr	r0, [pc, #192]	; (460 <loop+0x1e4>)
     3a0:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     3a4:	ldr.w	r1, [r8]
     3a8:	ldr	r0, [pc, #180]	; (460 <loop+0x1e4>)
     3aa:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3ae:	ldr	r1, [pc, #196]	; (474 <loop+0x1f8>)
     3b0:	ldr	r0, [pc, #172]	; (460 <loop+0x1e4>)
     3b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b6:	ldr	r3, [pc, #192]	; (478 <loop+0x1fc>)
     3b8:	ldrh	r4, [r3, #0]
     3ba:	sxth	r4, r4
     3bc:	cbnz	r4, 3f8 <loop+0x17c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3be:	ldr	r3, [pc, #188]	; (47c <loop+0x200>)
     3c0:	ldr	r1, [pc, #188]	; (480 <loop+0x204>)
     3c2:	ldr.w	fp, [pc, #156]	; 460 <loop+0x1e4>
     3c6:	ldr.w	r2, [r3, r4, lsl #2]
     3ca:	adds	r4, #1
     3cc:	mov	r0, fp
     3ce:	bl	c290 <Print::printf(char const*, ...)>
     3d2:	cmp	r4, #8
     3d4:	ldr	r1, [pc, #168]	; (480 <loop+0x204>)
     3d6:	ldr	r3, [pc, #164]	; (47c <loop+0x200>)
     3d8:	bne.n	3c6 <loop+0x14a>
    loopCount=0;
     3da:	movs	r3, #0
     3dc:	str	r3, [r6, #0]
    procCount=0;
     3de:	str.w	r3, [sl]
    procMiss=0;
     3e2:	str.w	r3, [r9]
    mxb=0;
     3e6:	strh	r3, [r5, #0]
    disk_count=0;
     3e8:	str.w	r3, [r8]
    t0=t1;
     3ec:	ldr	r3, [sp, #28]
     3ee:	str	r3, [r7, #0]
  asm("wfi");
     3f0:	wfi
}
     3f2:	add	sp, #44	; 0x2c
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	ldr.w	fp, [pc, #148]	; 490 <loop+0x214>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3fc:	movs	r4, #0
     3fe:	ldr	r1, [pc, #132]	; (484 <loop+0x208>)
     400:	ldr	r3, [pc, #92]	; (460 <loop+0x1e4>)
     402:	adds	r4, #1
     404:	mov	r0, r3
     406:	ldr.w	r2, [fp], #4
     40a:	bl	c290 <Print::printf(char const*, ...)>
     40e:	cmp	r4, #24
     410:	ldr	r3, [pc, #76]	; (460 <loop+0x1e4>)
     412:	ldr	r1, [pc, #112]	; (484 <loop+0x208>)
     414:	bne.n	402 <loop+0x186>
        Serial.printf("%2d",max_stat);
     416:	ldr	r4, [pc, #112]	; (488 <loop+0x20c>)
     418:	mov	r0, r3
     41a:	ldr	r1, [pc, #112]	; (48c <loop+0x210>)
     41c:	ldr	r2, [r4, #0]
     41e:	bl	c290 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     422:	movs	r2, #96	; 0x60
     424:	movs	r1, #0
     426:	ldr	r0, [pc, #104]	; (490 <loop+0x214>)
     428:	bl	9d8c <memset>
        max_stat=0;        
     42c:	movs	r3, #0
     42e:	str	r3, [r4, #0]
     430:	b.n	3da <loop+0x15e>
     432:	nop
     434:	.word	0x20020844
     438:	.word	0x200213c0
     43c:	.word	0x200213c2
     440:	.word	0x20007dcc
     444:	.word	0x20021388
     448:	.word	0x20002700
     44c:	.word	0x42004000
     450:	.word	0x20021374
     454:	.word	0x20020840
     458:	.word	0x200213c8
     45c:	.word	0x200013ec
     460:	.word	0x20001cec
     464:	.word	0x2000140d
     468:	.word	0x20001416
     46c:	.word	0x20001411
     470:	.word	0x20001415
     474:	.word	0x20001418
     478:	.word	0x200213ca
     47c:	.word	0x20020c0c
     480:	.word	0x2000141d
     484:	.word	0x20001422
     488:	.word	0x20020c2c
     48c:	.word	0x20001427
     490:	.word	0x20020c58
     494:	.word	0x20020c50
     498:	.word	0x20020c54
     49c:	.word	0x20020b98

000004a0 <setup1()>:
{ 
     4a0:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a2:	ldr	r4, [pc, #44]	; (4d0 <setup1()+0x30>)
  Serial.println("Setup1");
     4a4:	ldr	r1, [pc, #44]	; (4d4 <setup1()+0x34>)
     4a6:	ldr	r0, [pc, #48]	; (4d8 <setup1()+0x38>)
     4a8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4ac:	ldr	r3, [r4, #0]
     4ae:	cbz	r3, 4c8 <setup1()+0x28>
  i2s_setup();
     4b0:	bl	af8 <i2s_setup()>
  dma_setup();
     4b4:	bl	b78 <dma_setup()>
  adc_init();
     4b8:	bl	3528 <adc_init()>
  Serial.println("Setup1 done");
     4bc:	ldr	r1, [pc, #28]	; (4dc <setup1()+0x3c>)
     4be:	ldr	r0, [pc, #24]	; (4d8 <setup1()+0x38>)
}
     4c0:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4c4:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4c8:	movs	r0, #1
     4ca:	bl	b318 <delay>
     4ce:	b.n	4ac <setup1()+0xc>
     4d0:	.word	0x200211b4
     4d4:	.word	0x20000fe5
     4d8:	.word	0x20001cec
     4dc:	.word	0x20000fec

000004e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4e0:	push	{r4, r5, r6, lr}
     4e2:	mov	r5, r0
     4e4:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e8:	cbnz	r0, 50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ea:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4ec:	ldr.w	r0, [r5, #1152]	; 0x480
     4f0:	cbz	r0, 544 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4f2:	bl	79b0 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4f6:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4f8:	cbz	r6, 50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4fa:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4fe:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     500:	ldr	r3, [r0, #0]
     502:	movs	r1, #0
     504:	ldr	r3, [r3, #68]	; 0x44
     506:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     508:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     50a:	mov	r0, r4
     50c:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     50e:	ldr	r3, [r0, #0]
     510:	ldr	r3, [r3, #60]	; 0x3c
     512:	blx	r3
     514:	cmp	r0, #0
     516:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     518:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     51e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     522:	cbnz	r0, 534 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     524:	movs	r4, #0
     526:	b.n	50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r3, [r3, #64]	; 0x40
     52c:	blx	r3
     52e:	cmp	r0, #0
     530:	bne.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     532:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     534:	ldr	r3, [r0, #0]
     536:	movs	r1, #1
     538:	ldr	r3, [r3, #68]	; 0x44
     53a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     53c:	mov	r6, r0
     53e:	cmp	r0, #0
     540:	bne.n	4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     542:	b.n	524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     544:	ldr.w	r0, [r5, #1156]	; 0x484
     548:	cmp	r0, #0
     54a:	beq.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     54c:	bl	5f7e <ExFatPartition::freeClusterCount()>
     550:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000554 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     554:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     558:	ldr	r4, [pc, #276]	; (670 <storage_configure()+0x11c>)
     55a:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     55c:	movs	r1, #0
     55e:	ldr	r6, [pc, #276]	; (674 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     560:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     564:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     568:	strb.w	r1, [r4, #1224]	; 0x4c8
     56c:	mov	r0, r5
     56e:	bl	96e8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     572:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     574:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     578:	bl	8de4 <SdioCard::errorCode() const>
     57c:	cmp	r0, #0
     57e:	bne.n	622 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     580:	movs	r3, #1
     582:	ldr.w	r1, [r4, #1164]	; 0x48c
     586:	mov	r0, r4
     588:	mov	r2, r3
     58a:	bl	842c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     58e:	cmp	r0, #0
     590:	beq.n	622 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     592:	ldr	r3, [pc, #228]	; (678 <storage_configure()+0x124>)
     594:	ldr	r2, [r3, #4]
     596:	cmp	r2, #19
     598:	ble.n	63e <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     59a:	ldr.w	r3, [r4, #1152]	; 0x480
     59e:	cmp	r3, #0
     5a0:	beq.n	652 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5a2:	ldr	r5, [r3, #28]
     5a4:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5a6:	ldr	r0, [pc, #200]	; (670 <storage_configure()+0x11c>)
     5a8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ac:	ldr.w	r3, [r4, #1152]	; 0x480
     5b0:	mov	r7, r0
     5b2:	cmp	r3, #0
     5b4:	beq.n	660 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5b6:	ldrb	r3, [r3, #6]
     5b8:	mov.w	r4, #512	; 0x200
     5bc:	lsls	r4, r3
     5be:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5c0:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5c2:	mov.w	r8, #10
     5c6:	movs	r6, #0
     5c8:	movs	r2, #0
     5ca:	str	r3, [sp, #0]
     5cc:	movs	r3, #254	; 0xfe
     5ce:	ldr	r1, [pc, #172]	; (67c <storage_configure()+0x128>)
     5d0:	ldr	r0, [pc, #172]	; (680 <storage_configure()+0x12c>)
     5d2:	bl	c290 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5d6:	ldr	r1, [pc, #172]	; (684 <storage_configure()+0x130>)
     5d8:	ldr	r0, [pc, #164]	; (680 <storage_configure()+0x12c>)
     5da:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5de:	mov	r2, r5
     5e0:	mov	r3, r6
     5e2:	ldr	r0, [pc, #156]	; (680 <storage_configure()+0x12c>)
     5e4:	strd	r8, r6, [sp]
     5e8:	bl	c2be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5ec:	ldr	r1, [pc, #152]	; (688 <storage_configure()+0x134>)
     5ee:	ldr	r0, [pc, #144]	; (680 <storage_configure()+0x12c>)
     5f0:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5f4:	mov	r2, r7
     5f6:	mov	r3, r6
     5f8:	ldr	r0, [pc, #132]	; (680 <storage_configure()+0x12c>)
     5fa:	strd	r8, r6, [sp]
     5fe:	bl	c2be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     602:	ldr	r1, [pc, #136]	; (68c <storage_configure()+0x138>)
     604:	ldr	r0, [pc, #120]	; (680 <storage_configure()+0x12c>)
     606:	bl	18c <Print::print(char const*) [clone .isra.0]>
     60a:	lsr.w	r1, r4, r8
     60e:	ldr	r0, [pc, #112]	; (680 <storage_configure()+0x12c>)
     610:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     614:	ldr	r1, [pc, #120]	; (690 <storage_configure()+0x13c>)
     616:	ldr	r0, [pc, #104]	; (680 <storage_configure()+0x12c>)
        }
      }
  }
     618:	add	sp, #8
     61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     61e:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     622:	ldr	r3, [r6, #0]
     624:	movs	r2, #0
     626:	ldr	r1, [pc, #108]	; (694 <storage_configure()+0x140>)
     628:	str	r3, [sp, #0]
     62a:	movs	r3, #254	; 0xfe
     62c:	ldr	r0, [pc, #80]	; (680 <storage_configure()+0x12c>)
     62e:	bl	c290 <Print::printf(char const*, ...)>
     632:	ldr	r0, [pc, #76]	; (680 <storage_configure()+0x12c>)
  }
     634:	add	sp, #8
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     63a:	b.w	c258 <Print::println()>
          sd_name[fsCount] = name;
     63e:	add.w	r1, r3, r2, lsl #2
     642:	ldr	r0, [r6, #0]
     644:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     646:	adds	r1, r2, #1
     648:	str	r1, [r3, #4]
     64a:	add.w	r3, r3, r2, lsl #2
     64e:	str	r4, [r3, #88]	; 0x58
     650:	b.n	59a <storage_configure()+0x46>
     652:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     656:	cmp	r5, #0
     658:	beq.n	5a6 <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     65a:	ldr.w	r5, [r5, #1072]	; 0x430
     65e:	b.n	5a6 <storage_configure()+0x52>
     660:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     664:	cmp	r4, #0
     666:	beq.n	5c0 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     668:	ldr.w	r4, [r4, #1084]	; 0x43c
     66c:	b.n	5c0 <storage_configure()+0x6c>
     66e:	nop
     670:	.word	0x20020ce4
     674:	.word	0x2000229c
     678:	.word	0x200211b8
     67c:	.word	0x20000de9
     680:	.word	0x20001cec
     684:	.word	0x20000e00
     688:	.word	0x20000e13
     68c:	.word	0x20000e24
     690:	.word	0x20000e33
     694:	.word	0x20000dbe

00000698 <_GLOBAL__sub_I_storage>:
  }
     698:	push	{r3, r4, r5, lr}
        fsCount = 0;
     69a:	ldr	r5, [pc, #192]	; (75c <_GLOBAL__sub_I_storage+0xc4>)
     69c:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69e:	ldr	r3, [pc, #192]	; (760 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6a0:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     6a4:	ldr	r1, [pc, #188]	; (764 <_GLOBAL__sub_I_storage+0xcc>)
     6a6:	mov	r0, r5
     6a8:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6aa:	ldr	r3, [pc, #188]	; (768 <_GLOBAL__sub_I_storage+0xd0>)
     6ac:	str.w	r2, [r5, #176]	; 0xb0
     6b0:	str.w	r3, [r5, #168]	; 0xa8
     6b4:	str.w	r3, [r5, #248]	; 0xf8
     6b8:	str.w	r3, [r5, #328]	; 0x148
     6bc:	mvn.w	r3, #1
        fsCount = 0;
     6c0:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6c2:	str.w	r4, [r5, #172]	; 0xac
     6c6:	strb.w	r4, [r5, #180]	; 0xb4
     6ca:	strb.w	r4, [r5, #260]	; 0x104
     6ce:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	str.w	r4, [r5, #416]	; 0x1a0
     6d6:	strh.w	r4, [r5, #428]	; 0x1ac
     6da:	strd	r4, r2, [r5, #252]	; 0xfc
     6de:	strd	r4, r2, [r5, #332]	; 0x14c
     6e2:	ldr	r2, [pc, #136]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     6e4:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6e8:	strd	r4, r4, [r5, #240]	; 0xf0
     6ec:	strd	r4, r4, [r5, #320]	; 0x140
     6f0:	strd	r4, r4, [r5, #400]	; 0x190
     6f4:	strd	r4, r4, [r5, #408]	; 0x198
     6f8:	bl	c480 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6fc:	ldr	r3, [pc, #112]	; (770 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6fe:	ldr	r1, [pc, #116]	; (774 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     700:	mov	r0, r4
     702:	str	r5, [r3, #0]
     704:	add.w	r3, r3, #8192	; 0x2000
     708:	ldr	r2, [pc, #96]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     70a:	str.w	r4, [r3, #1056]	; 0x420
     70e:	strb.w	r4, [r3, #1060]	; 0x424
     712:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     716:	ldr	r3, [pc, #96]	; (778 <_GLOBAL__sub_I_storage+0xe0>)
     718:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     71c:	ldr	r1, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0xe4>)
     71e:	str.w	r4, [r3, #1152]	; 0x480
     722:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     726:	movs	r1, #7
     728:	str.w	r4, [r3, #1156]	; 0x484
     72c:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     730:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     732:	str.w	r4, [r3, #1164]	; 0x48c
     736:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	ldr	r1, [pc, #68]	; (780 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     73c:	strh.w	r4, [r3, #1176]	; 0x498
     740:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     744:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     748:	strb.w	r4, [r3, #1208]	; 0x4b8
     74c:	strb.w	r4, [r3, #1224]	; 0x4c8
     750:	ldr	r1, [pc, #48]	; (784 <_GLOBAL__sub_I_storage+0xec>)
  }
     752:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     756:	b.w	c480 <__aeabi_atexit>
     75a:	nop
     75c:	.word	0x200211b8
     760:	.word	0x20000450
     764:	.word	0x000001a5
     768:	.word	0x20000554
     76c:	.word	0x200020c4
     770:	.word	0x20002700
     774:	.word	0x2000059c
     778:	.word	0x20020ce4
     77c:	.word	0x003d0900
     780:	.word	0x200004bc
     784:	.word	0x0000006d

00000788 <setup>:
{
     788:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     78a:	ldr	r5, [pc, #268]	; (898 <setup+0x110>)
     78c:	sub	sp, #28
    set_arm_clock(24'000'000);
     78e:	ldr	r0, [pc, #268]	; (89c <setup+0x114>)
				if (elapsed > 750) break;
     790:	movw	r7, #750	; 0x2ee
     794:	bl	a5d0 <set_arm_clock>
			if (usb_configuration) {
     798:	ldr	r6, [pc, #260]	; (8a0 <setup+0x118>)
		uint32_t millis_begin = systick_millis_count;
     79a:	ldr	r4, [r5, #0]
		while (!(*this)) {
     79c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7a0:	cbz	r0, 7c8 <setup+0x40>
  uint16_t *params=loadParameters();
     7a2:	bl	2210 <loadParameters()>
  if(params[0]==1)
     7a6:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7a8:	mov	r4, r0
  if(params[0]==1)
     7aa:	cmp	r3, #1
     7ac:	beq.n	7e0 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7ae:	movw	r6, #9999	; 0x270f
     7b2:	ldr	r3, [r5, #0]
     7b4:	cmp	r3, r6
     7b6:	bhi.n	7f4 <setup+0x6c>
     7b8:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7bc:	cmp	r0, #0
     7be:	beq.n	7b2 <setup+0x2a>
     7c0:	ldr	r3, [pc, #224]	; (8a4 <setup+0x11c>)
     7c2:	movs	r2, #1
     7c4:	str	r2, [r3, #0]
     7c6:	b.n	7f4 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7c8:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7ca:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7cc:	subs	r3, r3, r4
			if (usb_configuration) {
     7ce:	cbz	r2, 7dc <setup+0x54>
				if (elapsed > 2000) break;
     7d0:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7d4:	bhi.n	7a2 <setup+0x1a>
			yield();
     7d6:	bl	bf50 <yield>
     7da:	b.n	79c <setup+0x14>
				if (elapsed > 750) break;
     7dc:	cmp	r3, r7
     7de:	b.n	7d4 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7e0:	ldr	r3, [pc, #196]	; (8a8 <setup+0x120>)
     7e2:	ldr	r2, [pc, #200]	; (8ac <setup+0x124>)
     7e4:	ldr	r3, [r3, #0]
     7e6:	ldr	r2, [r2, #0]
     7e8:	cmp	r3, r2
     7ea:	ldr	r2, [pc, #184]	; (8a4 <setup+0x11c>)
     7ec:	ite	hi
     7ee:	movhi	r3, #0
     7f0:	movls	r3, #1
     7f2:	str	r3, [r2, #0]
  Serial.println(version);
     7f4:	ldr	r1, [pc, #184]	; (8b0 <setup+0x128>)
     7f6:	ldr	r0, [pc, #188]	; (8b4 <setup+0x12c>)
     7f8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7fc:	ldr	r1, [pc, #184]	; (8b8 <setup+0x130>)
     7fe:	ldr	r0, [pc, #180]	; (8b4 <setup+0x12c>)
     800:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     804:	ldrh	r1, [r4, #0]
     806:	ldr	r0, [pc, #172]	; (8b4 <setup+0x12c>)
     808:	bl	c246 <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     80c:	ldr	r0, [pc, #164]	; (8b4 <setup+0x12c>)
     80e:	bl	c258 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     812:	ldr	r0, [pc, #168]	; (8bc <setup+0x134>)
     814:	bl	11c18 <___ZN16CrashReportClasscvbEv_veneer>
     818:	cbz	r0, 822 <setup+0x9a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     81a:	ldr	r1, [pc, #152]	; (8b4 <setup+0x12c>)
     81c:	ldr	r0, [pc, #156]	; (8bc <setup+0x134>)
     81e:	bl	11bf8 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     822:	bl	34e4 <usbPowerSetup()>
    lowPowerInit();
     826:	bl	258 <lowPowerInit()>
    storage_configure();
     82a:	bl	554 <storage_configure()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     82e:	add	r0, sp, #16
     830:	bl	383e <rtc_get_datetime(datetime_t*)>
     834:	cbnz	r0, 83e <setup+0xb6>
     836:	ldr	r1, [pc, #136]	; (8c0 <setup+0x138>)
     838:	ldr	r0, [pc, #120]	; (8b4 <setup+0x12c>)
     83a:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     83e:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     842:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     844:	ldrsh.w	r2, [sp, #16]
     848:	str	r3, [sp, #12]
     84a:	ldrsb.w	r3, [sp, #22]
     84e:	ldr	r1, [pc, #116]	; (8c4 <setup+0x13c>)
     850:	str	r3, [sp, #8]
     852:	ldrsb.w	r3, [sp, #21]
     856:	ldr	r0, [pc, #92]	; (8b4 <setup+0x12c>)
     858:	str	r3, [sp, #4]
     85a:	ldrsb.w	r3, [sp, #19]
     85e:	str	r3, [sp, #0]
     860:	ldrsb.w	r3, [sp, #18]
     864:	bl	c290 <Print::printf(char const*, ...)>
  Serial.println();
     868:	ldr	r0, [pc, #72]	; (8b4 <setup+0x12c>)
     86a:	bl	c258 <Print::println()>
  Serial.println("filing_init");
     86e:	ldr	r1, [pc, #88]	; (8c8 <setup+0x140>)
     870:	ldr	r0, [pc, #64]	; (8b4 <setup+0x12c>)
     872:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     876:	bl	3158 <filing_init()>
  setup_ready=1;
     87a:	ldr	r3, [pc, #80]	; (8cc <setup+0x144>)
  Serial.println("Setup done");
     87c:	ldr	r1, [pc, #80]	; (8d0 <setup+0x148>)
     87e:	ldr	r0, [pc, #52]	; (8b4 <setup+0x12c>)
  setup_ready=1;
     880:	str	r4, [r3, #0]
  Serial.println("Setup done");
     882:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     886:	bl	4a0 <setup1()>
    pinMode(13,OUTPUT);
     88a:	mov	r1, r4
     88c:	movs	r0, #13
     88e:	bl	ba64 <pinMode>
}
     892:	add	sp, #28
     894:	pop	{r4, r5, r6, r7, pc}
     896:	nop
     898:	.word	0x20021374
     89c:	.word	0x016e3600
     8a0:	.word	0x200215e3
     8a4:	.word	0x20021388
     8a8:	.word	0x20021384
     8ac:	.word	0x200022b0
     8b0:	.word	0x20001060
     8b4:	.word	0x20001cec
     8b8:	.word	0x2000142b
     8bc:	.word	0x20001ce0
     8c0:	.word	0x20001438
     8c4:	.word	0x2000144d
     8c8:	.word	0x20001474
     8cc:	.word	0x200211b4
     8d0:	.word	0x20001480

000008d4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8d4:	push	{r4, lr}
     8d6:	mov	r4, r0
		release();
     8d8:	bl	c0bc <DMAChannel::release()>
	}
     8dc:	mov	r0, r4
     8de:	pop	{r4, pc}

000008e0 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8e0:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8e2:	ldr	r3, [pc, #148]	; (978 <acq_isr()+0x98>)
     8e4:	ldr	r2, [r3, #0]
     8e6:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8e8:	ldrb	r2, [r3, #4]
     8ea:	ldr	r3, [pc, #144]	; (97c <acq_isr()+0x9c>)
     8ec:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8ee:	ldr	r2, [pc, #144]	; (980 <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8f0:	sub.w	r3, r2, #1024	; 0x400
     8f4:	cmp	r1, r2
     8f6:	it	cc
     8f8:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8fa:	mov	r1, r3
	asm("dsb");
     8fc:	dsb	sy
     900:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     904:	add.w	r2, r3, #1024	; 0x400
     908:	cmp	r2, r0
     90a:	ite	cc
     90c:	movcc	r2, #1
     90e:	movcs	r2, #32
		SCB_CACHE_DCIMVAC = location;
     910:	mov.w	r0, #3758153728	; 0xe000e000
     914:	add.w	r2, r3, r2, lsl #5
     918:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     91c:	adds	r1, #32
	} while (location < end_addr);
     91e:	cmp	r1, r2
     920:	bne.n	918 <acq_isr()+0x38>
	asm("dsb");
     922:	dsb	sy
	asm("isb");
     926:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     92a:	ldr	r1, [pc, #88]	; (984 <acq_isr()+0xa4>)
     92c:	ldr	r4, [pc, #88]	; (988 <acq_isr()+0xa8>)
     92e:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     930:	ldr	r5, [pc, #88]	; (98c <acq_isr()+0xac>)
{ procCount++;
     932:	adds	r2, #1
     934:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     936:	movs	r2, #0
     938:	ldrh	r0, [r5, #0]
     93a:	ldr.w	r1, [r3, r2, lsl #3]
     93e:	adds	r2, #1
     940:	sxth	r0, r0
     942:	cmp	r2, #128	; 0x80
     944:	asr.w	r1, r1, r0
     948:	str.w	r1, [r4], #4
     94c:	bne.n	938 <acq_isr()+0x58>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     94e:	ldr	r2, [pc, #64]	; (990 <acq_isr()+0xb0>)
     950:	ldrh	r3, [r2, #0]
     952:	sxth	r3, r3
     954:	cbnz	r3, 968 <acq_isr()+0x88>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     956:	ldr	r0, [pc, #48]	; (988 <acq_isr()+0xa8>)
     958:	bl	2734 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     95c:	cbnz	r0, 966 <acq_isr()+0x86>
     95e:	ldr	r2, [pc, #52]	; (994 <acq_isr()+0xb4>)
     960:	ldr	r3, [r2, #0]
     962:	adds	r3, #1
     964:	str	r3, [r2, #0]
  }
     966:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     968:	ldrh	r3, [r2, #0]
     96a:	sxth	r3, r3
     96c:	cmp	r3, #1
     96e:	bne.n	966 <acq_isr()+0x86>
   if(!compress((void *)acqBuffer)) procMiss++;
     970:	ldr	r0, [pc, #20]	; (988 <acq_isr()+0xa8>)
     972:	bl	320c <compress(void*)>
     976:	b.n	95c <acq_isr()+0x7c>
     978:	.word	0x2001ffdc
     97c:	.word	0x400e8000
     980:	.word	0x20200400
     984:	.word	0x20020c50
     988:	.word	0x20020998
     98c:	.word	0x2002146e
     990:	.word	0x200213ca
     994:	.word	0x20020c54

00000998 <setAudioFrequency(int)>:
  {
     998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     99c:	ldr.w	r9, [pc, #332]	; aec <setAudioFrequency(int)+0x154>
     9a0:	movs	r2, #5
     9a2:	mov	r5, r0
     9a4:	ldr	r1, [pc, #312]	; (ae0 <setAudioFrequency(int)+0x148>)
     9a6:	ldr.w	r3, [r9]
     9aa:	mov	r0, r9
     9ac:	ldr	r3, [r3, #4]
     9ae:	vpush	{d8}
     9b2:	sub	sp, #12
     9b4:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9b6:	movs	r1, #128	; 0x80
     9b8:	mov	r0, r9
     9ba:	bl	c246 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9be:	mov	r0, r9
     9c0:	bl	c258 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9c4:	movs	r3, #26
     9c6:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9c8:	ldr	r0, [pc, #280]	; (ae4 <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9ca:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9cc:	mov	r2, r1
        n1=0;
     9ce:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d0:	mul.w	ip, r0, r3
        {   n1++; 
     9d4:	mov	r6, r4
     9d6:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d8:	sdiv	r8, ip, r2
     9dc:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9e0:	cmp	r7, #64	; 0x40
     9e2:	ble.n	9f0 <setAudioFrequency(int)+0x58>
     9e4:	cmp	r4, #9
     9e6:	add	r2, r1
     9e8:	bne.n	9d4 <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     9ea:	cmp	r3, #54	; 0x36
     9ec:	bne.n	9ca <setAudioFrequency(int)+0x32>
     9ee:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9f0:	mov	r2, r5
     9f2:	ldr	r1, [pc, #244]	; (ae8 <setAudioFrequency(int)+0x150>)
     9f4:	ldr	r0, [pc, #244]	; (aec <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9f6:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9fa:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9fc:	strd	r4, r7, [sp]
     a00:	bl	c290 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a04:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a08:	ldr.w	r3, [r9]
     a0c:	movs	r2, #3
     a0e:	vcvt.f64.s32	d7, s15
     a12:	ldr	r1, [pc, #220]	; (af0 <setAudioFrequency(int)+0x158>)
     a14:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a16:	and.w	r6, r6, #448	; 0x1c0
     a1a:	ldr	r0, [pc, #208]	; (aec <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a1c:	vldr	d6, [pc, #168]	; ac8 <setAudioFrequency(int)+0x130>
     a20:	vmul.f64	d7, d7, d6
     a24:	vmov	s13, r4
     a28:	vcvt.f64.s32	d6, s13
     a2c:	vmul.f64	d7, d7, d6
     a30:	vmov	s13, r7
     a34:	vcvt.f64.s32	d6, s13
     a38:	vmul.f64	d7, d7, d6
     a3c:	vldr	d6, [pc, #144]	; ad0 <setAudioFrequency(int)+0x138>
     a40:	vdiv.f64	d8, d7, d6
     a44:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a46:	movs	r1, #2
     a48:	ldr	r0, [pc, #160]	; (aec <setAudioFrequency(int)+0x154>)
     a4a:	vmov.f64	d0, d8
     a4e:	bl	c350 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a52:	ldr	r0, [pc, #152]	; (aec <setAudioFrequency(int)+0x154>)
     a54:	bl	c258 <Print::println()>
    int c0 = C;
     a58:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a5c:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a60:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a64:	mul.w	r3, r2, r0
     a68:	vmov	s14, r3
     a6c:	vldr	d6, [pc, #104]	; ad8 <setAudioFrequency(int)+0x140>
     a70:	vcvt.f64.s32	d7, s14
     a74:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a78:	vcvt.s32.f64	s15, d7
     a7c:	vmov	r1, s15
     a80:	bl	11bf0 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a84:	ldr	r2, [pc, #108]	; (af4 <setAudioFrequency(int)+0x15c>)
     a86:	ldr	r3, [r2, #28]
     a88:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a8c:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a90:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a92:	ldr	r3, [r2, #40]	; 0x28
     a94:	bic.w	r3, r3, #510	; 0x1fe
     a98:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a9c:	orr.w	r3, r3, r8
     aa0:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     aa2:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     aa4:	sub.w	r2, r2, #327680	; 0x50000
     aa8:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     aaa:	bic.w	r3, r3, #524288	; 0x80000
     aae:	bic.w	r3, r3, #7
     ab2:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ab6:	str	r3, [r2, #4]
  }
     ab8:	add	sp, #12
     aba:	vpop	{d8}
     abe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     ac2:	nop
     ac4:	nop.w
     ac8:	.word	0x00000000
     acc:	.word	0x40600000
     ad0:	.word	0x00000000
     ad4:	.word	0x4176e360
     ad8:	.word	0x00000000
     adc:	.word	0x40c38800
     ae0:	.word	0x20000d97
     ae4:	.word	0x016e3600
     ae8:	.word	0x20000d9d
     aec:	.word	0x20001cec
     af0:	.word	0x20000dba
     af4:	.word	0x400fc000

00000af8 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     af8:	ldr	r2, [pc, #100]	; (b60 <i2s_setup()+0x68>)
     afa:	ldr	r3, [r2, #124]	; 0x7c
  {
     afc:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     afe:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b02:	ldr	r4, [pc, #96]	; (b64 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b04:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b06:	ldr.w	r3, [r4, #136]	; 0x88
     b0a:	cmp	r3, #0
     b0c:	blt.n	b5e <i2s_setup()+0x66>
    int fs = fsamp;
     b0e:	ldr	r3, [pc, #88]	; (b68 <i2s_setup()+0x70>)
     b10:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b12:	bl	998 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b16:	ldr	r3, [pc, #84]	; (b6c <i2s_setup()+0x74>)
     b18:	movs	r2, #3
     b1a:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b1e:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b22:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b26:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b2a:	movs	r2, #2
     b2c:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b30:	movs	r3, #0
     b32:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b36:	movs	r3, #4
     b38:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b3c:	mov.w	r3, #83886080	; 0x5000000
     b40:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b44:	mov.w	r3, #65536	; 0x10000
     b48:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b4c:	adds	r3, #27
     b4e:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b52:	ldr	r3, [pc, #28]	; (b70 <i2s_setup()+0x78>)
     b54:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b58:	ldr	r3, [pc, #24]	; (b74 <i2s_setup()+0x7c>)
     b5a:	str.w	r3, [r4, #136]	; 0x88
  }
     b5e:	pop	{r4, pc}
     b60:	.word	0x400fc000
     b64:	.word	0x40384000
     b68:	.word	0x20002290
     b6c:	.word	0x401f8000
     b70:	.word	0x1f1f1f00
     b74:	.word	0x92000001

00000b78 <dma_setup()>:
  {
     b78:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b7a:	ldr	r4, [pc, #128]	; (bfc <dma_setup()+0x84>)
     b7c:	movs	r1, #1
     b7e:	mov	r0, r4
     b80:	bl	c020 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b84:	ldr	r3, [r4, #0]
     b86:	ldr	r2, [pc, #120]	; (c00 <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b88:	ldr	r1, [pc, #120]	; (c04 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b8a:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b8c:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b8e:	ldr	r0, [pc, #120]	; (c08 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b90:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b92:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b94:	ldr	r0, [pc, #116]	; (c0c <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b96:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b9a:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     b9e:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ba0:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     ba2:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     ba6:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     ba8:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     baa:	ldrh	r2, [r3, #22]
     bac:	uxth	r2, r2
     bae:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     bb0:	movs	r2, #6
     bb2:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bb4:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bb6:	ldr	r2, [pc, #88]	; (c10 <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bb8:	lsls	r3, r3, #2
     bba:	add.w	r3, r3, #1073741824	; 0x40000000
     bbe:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bc2:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bc4:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bc6:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bc8:	ldr	r2, [pc, #72]	; (c14 <dma_setup()+0x9c>)
     bca:	add.w	r1, r3, #16
     bce:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bd2:	asrs	r2, r3, #5
     bd4:	and.w	r0, r3, #31
     bd8:	movs	r1, #1
     bda:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bde:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     be2:	lsls	r1, r0
     be4:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     be6:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bea:	lsls	r2, r2, #2
     bec:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bee:	movs	r2, #96	; 0x60
     bf0:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bf2:	ldr	r3, [pc, #36]	; (c18 <dma_setup()+0xa0>)
     bf4:	ldrb	r2, [r4, #4]
     bf6:	strb	r2, [r3, #27]
  }
     bf8:	pop	{r4, pc}
     bfa:	nop
     bfc:	.word	0x2001ffdc
     c00:	.word	0x403840a0
     c04:	.word	0x02020000
     c08:	.word	0x20200000
     c0c:	.word	0x000008e1
     c10:	.word	0x80000013
     c14:	.word	0x20002400
     c18:	.word	0x400e8000

00000c1c <acqModifyFrequency(unsigned long)>:
  {
     c1c:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c1e:	ldr	r4, [pc, #32]	; (c40 <acqModifyFrequency(unsigned long)+0x24>)
     c20:	ldr.w	r3, [r4, #136]	; 0x88
     c24:	bic.w	r3, r3, #2415919104	; 0x90000000
     c28:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c2c:	bl	998 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c30:	ldr.w	r3, [r4, #136]	; 0x88
     c34:	orr.w	r3, r3, #2415919104	; 0x90000000
     c38:	str.w	r3, [r4, #136]	; 0x88
  }
     c3c:	pop	{r4, pc}
     c3e:	nop
     c40:	.word	0x40384000

00000c44 <_GLOBAL__sub_I_procCount>:
		begin();
     c44:	ldr	r0, [pc, #20]	; (c5c <_GLOBAL__sub_I_procCount+0x18>)
     c46:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c48:	push	{r3, lr}
     c4a:	bl	c020 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c4e:	ldr	r2, [pc, #16]	; (c60 <_GLOBAL__sub_I_procCount+0x1c>)
     c50:	ldr	r1, [pc, #16]	; (c64 <_GLOBAL__sub_I_procCount+0x20>)
     c52:	ldr	r0, [pc, #8]	; (c5c <_GLOBAL__sub_I_procCount+0x18>)
}
     c54:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c58:	b.w	c480 <__aeabi_atexit>
     c5c:	.word	0x2001ffdc
     c60:	.word	0x200020c4
     c64:	.word	0x000008d5

00000c68 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c68:	ldr	r3, [r0, #4]
     c6a:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c6c:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c6e:	bgt.n	c7c <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c70:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c74:	adds	r3, #1
          sd_name[fsCount] = name;
     c76:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c78:	str	r3, [r0, #4]
     c7a:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c7c:	pop	{r4, pc}

00000c7e <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = O_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c7e:	ldr	r0, [r0, #4]
     c80:	bx	lr

00000c82 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c82:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c86:	ldr	r0, [r1, #8]
     c88:	bx	lr

00000c8a <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c8a:	movs	r0, #0
     c8c:	bx	lr

00000c8e <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c8e:	movs	r0, #1
     c90:	bx	lr

00000c92 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c92:	push	{r4}
    *name = 0;
     c94:	movs	r4, #0
     c96:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c98:	ldr	r3, [r0, #56]	; 0x38
     c9a:	cbz	r3, ca6 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     c9c:	mov	r0, r3
  }
     c9e:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     ca2:	b.w	6ae0 <FatFile::getName(char*, unsigned int)>
     ca6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     ca8:	cbz	r0, cb2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     caa:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cae:	b.w	53a4 <ExFatFile::getName8(char*, unsigned int)>
     cb2:	ldr.w	r4, [sp], #4
     cb6:	bx	lr

00000cb8 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cb8:	push	{r4, lr}
     cba:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cbc:	movs	r3, #0
     cbe:	movs	r2, #10
     cc0:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cc4:	mov	r0, r4
     cc6:	ldmia.w	sp!, {r4, lr}
     cca:	b.w	c258 <Print::println()>

00000cce <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cce:	push	{r0, r1, r4, lr}
     cd0:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cd2:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cd4:	cbz	r1, cee <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     cd6:	str	r1, [sp, #4]
     cd8:	bl	e900 <strlen>
     cdc:	ldr	r3, [r4, #0]
     cde:	mov	r2, r0
     ce0:	ldr	r1, [sp, #4]
     ce2:	mov	r0, r4
     ce4:	ldr	r3, [r3, #4]
     ce6:	add	sp, #8
     ce8:	ldmia.w	sp!, {r4, lr}
     cec:	bx	r3
     cee:	add	sp, #8
     cf0:	pop	{r4, pc}
	...

00000cf4 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cf4:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cf6:	ldr	r4, [pc, #44]	; (d24 <dbgPrint(unsigned short)+0x30>)
     cf8:	mov	r5, r0
     cfa:	ldr	r1, [pc, #44]	; (d28 <dbgPrint(unsigned short)+0x34>)
     cfc:	mov	r0, r4
     cfe:	bl	cce <Print::write(char const*)>
     d02:	ldr	r1, [pc, #40]	; (d2c <dbgPrint(unsigned short)+0x38>)
     d04:	mov	r0, r4
     d06:	bl	cce <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d0a:	movs	r0, #46	; 0x2e
     d0c:	bl	a4d8 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d10:	mov	r1, r5
     d12:	mov	r0, r4
     d14:	bl	c246 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d18:	mov	r0, r4
  }
     d1a:	ldmia.w	sp!, {r3, r4, r5, lr}
     d1e:	b.w	c258 <Print::println()>
     d22:	nop
     d24:	.word	0x20001cec
     d28:	.word	0x200010b0
     d2c:	.word	0x200010bb

00000d30 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d30:	push	{r3, r4, r5, lr}
     d32:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d34:	bl	cce <Print::write(char const*)>
     d38:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d3a:	mov	r0, r5
     d3c:	bl	c258 <Print::println()>
     d40:	add	r0, r4
     d42:	pop	{r3, r4, r5, pc}

00000d44 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d44:	ldr.w	r3, [r0, #1152]	; 0x480
     d48:	cbz	r3, d56 <FsVolume::bytesPerCluster() const+0x12>
     d4a:	ldrb	r3, [r3, #6]
     d4c:	mov.w	r0, #512	; 0x200
     d50:	lsls	r0, r3
     d52:	uxth	r0, r0
     d54:	bx	lr
     d56:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d5a:	cbz	r0, d60 <FsVolume::bytesPerCluster() const+0x1c>
     d5c:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d60:	bx	lr

00000d62 <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d62:	ldr.w	r3, [r0, #1152]	; 0x480
     d66:	cbz	r3, d6e <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d68:	ldr	r0, [r3, #28]
     d6a:	subs	r0, #1
     d6c:	bx	lr
     d6e:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d72:	cbz	r0, d78 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d74:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d78:	bx	lr

00000d7a <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d7a:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d7e:	push	{r3, r4, r5, lr}
     d80:	ldr	r5, [r1, #88]	; 0x58
     d82:	mov	r0, r5
     d84:	bl	d62 <FsVolume::clusterCount() const>
     d88:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d8a:	mov	r0, r5
     d8c:	bl	d44 <FsVolume::bytesPerCluster() const>
     d90:	umull	r0, r1, r4, r0
     d94:	pop	{r3, r4, r5, pc}

00000d96 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d96:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d9a:	push	{r4, r5, lr}
     d9c:	mov	r5, r1
     d9e:	sub	sp, #68	; 0x44
     da0:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     da2:	cbz	r3, dc8 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     da4:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     da6:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     daa:	add	r0, sp, #8
     dac:	mov	r3, r2
     dae:	str	r2, [sp, #8]
     db0:	mov	r2, r5
     db2:	str	r1, [sp, #4]
     db4:	bl	70fc <FatFile::open(FatFile*, char const*, int)>
     db8:	ldr	r1, [sp, #4]
     dba:	cbz	r0, dc4 <FsVolume::rename(char const*, char const*)+0x2e>
     dbc:	mov	r2, r4
     dbe:	add	r0, sp, #8
     dc0:	bl	73bc <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dc4:	add	sp, #68	; 0x44
     dc6:	pop	{r4, r5, pc}
     dc8:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dcc:	cmp	r0, #0
     dce:	beq.n	dc4 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     dd0:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dd4:	mov	r2, r5
     dd6:	add	r0, sp, #8
  ExFatFile() {}
     dd8:	str	r3, [sp, #56]	; 0x38
     dda:	str	r1, [sp, #4]
     ddc:	bl	5bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
     de0:	ldr	r1, [sp, #4]
     de2:	cbnz	r0, de8 <FsVolume::rename(char const*, char const*)+0x52>
     de4:	movs	r0, #0
     de6:	b.n	dc4 <FsVolume::rename(char const*, char const*)+0x2e>
     de8:	mov	r2, r4
     dea:	add	r0, sp, #8
     dec:	bl	65c4 <ExFatFile::rename(ExFatFile*, char const*)>
     df0:	cmp	r0, #0
     df2:	beq.n	de4 <FsVolume::rename(char const*, char const*)+0x4e>
     df4:	b.n	dc4 <FsVolume::rename(char const*, char const*)+0x2e>

00000df6 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     df6:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     df8:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     dfa:	cbz	r3, e14 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     dfc:	ldrb	r0, [r3, #0]
     dfe:	ands.w	r0, r0, #8
     e02:	ittt	ne
     e04:	ldrne	r0, [r3, #28]
     e06:	ldrne	r3, [r3, #20]
     e08:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e0a:	cmp	r0, #0
     e0c:	it	lt
     e0e:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e12:	pop	{r4, pc}
     e14:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e16:	cmp	r0, #0
     e18:	beq.n	e12 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e1a:	ldrb.w	r3, [r0, #49]	; 0x31
     e1e:	ands.w	r3, r3, #8
     e22:	beq.n	e42 <FsBaseFile::available() const+0x4c>
     e24:	ldrd	r1, r3, [r0, #16]
     e28:	ldrd	r2, r4, [r0]
     e2c:	subs	r0, r1, r2
     e2e:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e32:	cmp.w	r0, #2147483648	; 0x80000000
     e36:	sbcs.w	r3, r3, #0
     e3a:	it	cs
     e3c:	mvncs.w	r0, #2147483648	; 0x80000000
     e40:	b.n	e12 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e42:	mov	r0, r3
     e44:	b.n	e32 <FsBaseFile::available() const+0x3c>

00000e46 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     e46:	ldr	r3, [r0, #56]	; 0x38
     e48:	cbz	r3, e50 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0xa>
     e4a:	mov	r0, r3
     e4c:	b.w	71de <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     e50:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     e52:	cbz	r0, e58 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
     e54:	b.w	5502 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     e58:	bx	lr

00000e5a <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e5a:	ldr	r3, [r0, #56]	; 0x38
     e5c:	cbz	r3, e6c <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e5e:	ldrb	r3, [r3, #0]
     e60:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e64:	ite	ne
     e66:	movne	r0, #1
     e68:	moveq	r0, #0
  }
     e6a:	bx	lr
     e6c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e6e:	cmp	r0, #0
     e70:	beq.n	e6a <FsBaseFile::isDir() const+0x10>
     e72:	ldrb.w	r3, [r0, #49]	; 0x31
     e76:	tst.w	r3, #80	; 0x50
     e7a:	b.n	e64 <FsBaseFile::isDir() const+0xa>

00000e7c <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e7c:	ldr	r3, [r0, #56]	; 0x38
     e7e:	cbnz	r3, e8a <FsBaseFile::isOpen() const+0xe>
     e80:	ldr	r0, [r0, #60]	; 0x3c
     e82:	subs	r0, #0
     e84:	it	ne
     e86:	movne	r0, #1
     e88:	bx	lr
     e8a:	movs	r0, #1
     e8c:	bx	lr

00000e8e <MTPStorage_SD::CloseIndex()>:
  {
     e8e:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e90:	add.w	r5, r0, #184	; 0xb8
  {
     e94:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e96:	mov	r0, r5
     e98:	bl	e7c <FsBaseFile::isOpen() const>
     e9c:	cbz	r0, ea4 <MTPStorage_SD::CloseIndex()+0x16>
     e9e:	mov	r0, r5
     ea0:	bl	82cc <FsBaseFile::close()>
    index_generated = false;
     ea4:	movs	r3, #0
     ea6:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     eaa:	str.w	r3, [r4, #424]	; 0x1a8
  }
     eae:	pop	{r3, r4, r5, pc}

00000eb0 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     eb0:	ldr	r3, [r0, #56]	; 0x38
     eb2:	cbz	r3, eba <FsBaseFile::read(void*, unsigned int)+0xa>
     eb4:	mov	r0, r3
     eb6:	b.w	6c38 <FatFile::read(void*, unsigned int)>
     eba:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ebc:	cbz	r0, ec2 <FsBaseFile::read(void*, unsigned int)+0x12>
     ebe:	b.w	55e8 <ExFatFile::read(void*, unsigned int)>
  }
     ec2:	mov.w	r0, #4294967295
     ec6:	bx	lr

00000ec8 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     ec8:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eca:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     ecc:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ece:	cbz	r5, eda <FsBaseFile::seekSet(unsigned long long)+0x12>
     ed0:	cbnz	r3, ee4 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     ed2:	mov	r0, r5
  }
     ed4:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ed6:	b.w	6e22 <FatFile::seekSet(unsigned long)>
     eda:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     edc:	cbz	r0, ee4 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     ede:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     ee0:	b.w	5798 <ExFatFile::seekSet(unsigned long long)>
  }
     ee4:	movs	r0, #0
     ee6:	pop	{r4, r5}
     ee8:	bx	lr

00000eea <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     eea:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     eec:	add.w	r0, r0, #264	; 0x108
     ef0:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     ef4:	pop	{r3, pc}
	...

00000ef8 <FsFile::FsFile()>:
     ef8:	movs	r2, #0
     efa:	mov.w	r1, #1000	; 0x3e8
     efe:	strb	r2, [r0, #12]
     f00:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f04:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f08:	ldr	r2, [pc, #4]	; (f10 <FsFile::FsFile()+0x18>)
     f0a:	str	r2, [r0, #0]
     f0c:	bx	lr
     f0e:	nop
     f10:	.word	0x20000554

00000f14 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f14:	ldr	r3, [pc, #16]	; (f28 <FsFile::~FsFile()+0x14>)
     f16:	push	{r4, lr}
     f18:	mov	r4, r0
     f1a:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f1e:	bl	82cc <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f22:	mov	r0, r4
     f24:	pop	{r4, pc}
     f26:	nop
     f28:	.word	0x2000042c

00000f2c <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f2c:	add.w	r1, r0, r1, lsl #2
     f30:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f32:	ldr.w	r1, [r3, #1152]	; 0x480
     f36:	push	{lr}
     f38:	sub	sp, #60	; 0x3c
     f3a:	cbz	r1, f52 <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f3c:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f3e:	add.w	r1, r1, #1096	; 0x448
     f42:	mov	r0, sp
     f44:	str	r3, [sp, #0]
     f46:	movs	r3, #1
     f48:	bl	7318 <FatFile::mkdir(FatFile*, char const*, bool)>
     f4c:	add	sp, #60	; 0x3c
     f4e:	ldr.w	pc, [sp], #4
     f52:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f56:	cmp	r0, #0
     f58:	beq.n	f4c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f5a:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f5c:	movs	r3, #1
     f5e:	add.w	r1, r0, #1096	; 0x448
     f62:	mov	r0, sp
     f64:	bl	6506 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f68:	b.n	f4c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f6c <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f6c:	push	{r4, r5, lr}
     f6e:	mov	r4, r0
     f70:	sub	sp, #68	; 0x44
     f72:	mov	r5, r1
     f74:	ldr	r0, [pc, #84]	; (fcc <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f76:	mov	r1, r2
     f78:	str	r2, [sp, #4]
     f7a:	bl	d30 <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f7e:	ldr	r2, [sp, #4]
     f80:	add.w	r1, r4, r5, lsl #2
     f84:	ldr	r3, [r1, #84]	; 0x54
     f86:	ldr.w	r1, [r3, #1152]	; 0x480
     f8a:	cbz	r1, fa4 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f8c:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f8e:	add	r0, sp, #8
     f90:	str	r3, [sp, #8]
     f92:	movs	r3, #1
     f94:	bl	719a <FatFile::open(FatVolume*, char const*, int)>
     f98:	cbz	r0, fa0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f9a:	add	r0, sp, #8
     f9c:	bl	8214 <FatFile::remove()>
     fa0:	add	sp, #68	; 0x44
     fa2:	pop	{r4, r5, pc}
     fa4:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fa8:	cmp	r0, #0
     faa:	beq.n	fa0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fac:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fae:	movs	r3, #1
     fb0:	mov	r1, r0
     fb2:	add	r0, sp, #8
     fb4:	bl	5c8e <ExFatFile::open(ExFatVolume*, char const*, int)>
     fb8:	cbnz	r0, fbe <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fba:	movs	r0, #0
     fbc:	b.n	fa0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fbe:	add	r0, sp, #8
     fc0:	bl	620c <ExFatFile::remove()>
     fc4:	cmp	r0, #0
     fc6:	beq.n	fba <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fc8:	b.n	fa0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fca:	nop
     fcc:	.word	0x20001cec

00000fd0 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fd0:	add.w	r1, r0, r1, lsl #2
     fd4:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fd6:	ldr.w	r1, [r3, #1152]	; 0x480
     fda:	push	{lr}
     fdc:	sub	sp, #60	; 0x3c
     fde:	cbz	r1, ff8 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fe0:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fe2:	mov	r0, sp
     fe4:	str	r3, [sp, #0]
     fe6:	bl	719a <FatFile::open(FatVolume*, char const*, int)>
     fea:	cbz	r0, ff2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fec:	mov	r0, sp
     fee:	bl	6ec2 <FatFile::rmdir()>
     ff2:	add	sp, #60	; 0x3c
     ff4:	ldr.w	pc, [sp], #4
     ff8:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     ffc:	cmp	r0, #0
     ffe:	beq.n	ff2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1000:	mov	r3, r1
    1002:	str	r1, [sp, #48]	; 0x30
    1004:	mov	r1, r0
    1006:	mov	r0, sp
    1008:	bl	5c8e <ExFatFile::open(ExFatVolume*, char const*, int)>
    100c:	cbnz	r0, 1012 <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    100e:	movs	r0, #0
    1010:	b.n	ff2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    1012:	mov	r0, sp
    1014:	bl	6298 <ExFatFile::rmdir()>
    1018:	cmp	r0, #0
    101a:	beq.n	100e <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    101c:	b.n	ff2 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00001020 <MTPStorage_SD::OpenIndex()>:
  { 
    1020:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    1022:	add.w	r5, r0, #184	; 0xb8
  { 
    1026:	sub	sp, #84	; 0x54
    1028:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    102a:	mov	r0, r5
    102c:	bl	e7c <FsBaseFile::isOpen() const>
    1030:	cbnz	r0, 1072 <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1032:	ldr	r2, [pc, #68]	; (1078 <MTPStorage_SD::OpenIndex()+0x58>)
    1034:	movw	r3, #514	; 0x202
    1038:	ldr	r1, [r4, #88]	; 0x58
    103a:	mov	r0, sp
    103c:	bl	8500 <FsVolume::open(char const*, int)>
class Print
    1040:	ldr	r3, [sp, #4]
    1042:	add	r1, sp, #16
    1044:	mov	r0, r5
    1046:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    104a:	ldr	r3, [sp, #8]
    104c:	str.w	r3, [r4, #176]	; 0xb0
    1050:	ldrb.w	r3, [sp, #12]
    1054:	strb.w	r3, [r4, #180]	; 0xb4
    1058:	bl	82f6 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    105c:	mov	r0, sp
    105e:	bl	f14 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    1062:	mov	r0, r5
    1064:	bl	e7c <FsBaseFile::isOpen() const>
    1068:	cbnz	r0, 1072 <MTPStorage_SD::OpenIndex()+0x52>
    106a:	ldr	r1, [pc, #16]	; (107c <MTPStorage_SD::OpenIndex()+0x5c>)
    106c:	ldr	r0, [pc, #16]	; (1080 <MTPStorage_SD::OpenIndex()+0x60>)
    106e:	bl	d30 <Print::println(char const*)>
  }
    1072:	add	sp, #84	; 0x54
    1074:	pop	{r4, r5, pc}
    1076:	nop
    1078:	.word	0x200010e7
    107c:	.word	0x200010f5
    1080:	.word	0x20001cec

00001084 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1084:	push	{r4, lr}
    1086:	mov	r4, r0
    if(!index_.isOpen()) return;
    1088:	adds	r0, #184	; 0xb8
    108a:	bl	e7c <FsBaseFile::isOpen() const>
    108e:	cbz	r0, 10b0 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1090:	ldr	r3, [r4, #0]
    1092:	mov	r0, r4
    1094:	ldr	r3, [r3, #64]	; 0x40
    1096:	blx	r3
    all_scanned_ = false;
    1098:	movs	r3, #0
    OpenIndex();
    109a:	mov	r0, r4
    all_scanned_ = false;
    109c:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    10a0:	mvn.w	r3, #1
    10a4:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10a8:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10ac:	b.w	1020 <MTPStorage_SD::OpenIndex()>
  }
    10b0:	pop	{r4, pc}

000010b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    10b2:	push	{r0, r1, r4, r5, r6, lr}
    10b4:	mov	r4, r0
    10b6:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10b8:	mov.w	r6, #280	; 0x118
  { OpenIndex();
    10bc:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10be:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10c0:	bl	1020 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10c4:	mul.w	r2, r6, r5
    10c8:	movs	r3, #0
    10ca:	mov	r0, r4
    10cc:	bl	ec8 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    10d0:	mov	r2, r6
    10d2:	ldr	r1, [sp, #4]
    10d4:	mov	r0, r4
    10d6:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10da:	add	sp, #8
    10dc:	pop	{r4, r5, r6, pc}

000010de <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10de:	push	{r4, lr}
    10e0:	ldr.w	r4, [r0, #424]	; 0x1a8
    10e4:	mov	r2, r1
    10e6:	adds	r1, r4, #1
    10e8:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10ec:	mov	r1, r4
    10ee:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10f2:	mov	r0, r4
    10f4:	pop	{r4, pc}
	...

000010f8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10f8:	movs	r3, #1
    sd_remove(0,indexFile);
    10fa:	ldr	r2, [pc, #88]	; (1154 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10fc:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10fe:	push	{r4, r5, r6, r7, lr}
    1100:	mov	r4, r0
    index_generated = true;
    1102:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1106:	sub	sp, #284	; 0x11c
    sd_remove(0,indexFile);
    1108:	adds	r0, #4
    110a:	bl	f6c <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    110e:	movs	r5, #0
    num_storage = sd_getFSCount();
    1110:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    1112:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    1116:	ldr	r7, [pc, #64]	; (1158 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    1118:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    111c:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    1120:	ldr.w	r3, [r4, #408]	; 0x198
    1124:	cmp	r5, r3
    1126:	blt.n	112c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1128:	add	sp, #284	; 0x11c
    112a:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    112c:	movs	r3, #0
      strcpy(r.name, "/");
    112e:	mov	r1, r7
    1130:	add	r0, sp, #24
      r.store = ii; // 
    1132:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1136:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1138:	adds	r5, #1
      r.sibling = 0;
    113a:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    113e:	movs	r3, #1
    1140:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1144:	bl	e84c <strcpy>
      AppendIndexRecord(r);
    1148:	mov	r1, sp
    114a:	mov	r0, r4
    114c:	bl	10de <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1150:	b.n	1120 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    1152:	nop
    1154:	.word	0x200010e7
    1158:	.word	0x20000d95

0000115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    115c:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    115e:	mov.w	r7, #280	; 0x118
  {
    1162:	mov	r4, r1
    1164:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1166:	movs	r1, #0
    1168:	mov	r2, r7
  {
    116a:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    116c:	bl	9d8c <memset>
    if (i > index_entries_) 
    1170:	ldr.w	r3, [r4, #424]	; 0x1a8
    1174:	cmp	r3, r6
    1176:	bcc.n	1196 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1178:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    117a:	adds	r4, #184	; 0xb8
    OpenIndex();
    117c:	bl	1020 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1180:	mul.w	r2, r7, r6
    1184:	movs	r3, #0
    1186:	mov	r0, r4
    1188:	bl	ec8 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    118c:	mov	r2, r7
    118e:	mov	r1, r5
    1190:	mov	r0, r4
    1192:	bl	eb0 <FsBaseFile::read(void*, unsigned int)>
  }
    1196:	mov	r0, r5
    1198:	pop	{r3, r4, r5, r6, r7, pc}

0000119a <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    119a:	push	{r4, r5, lr}
    119c:	mov	r4, r0
    119e:	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    11a0:	ldr.w	r5, [r4, #432]	; 0x1b0
    11a4:	cbz	r5, 11c4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    11a6:	mov	r2, r5
    11a8:	mov	r1, r4
    11aa:	mov	r0, sp
    11ac:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    11b0:	ldrb.w	r3, [r4, #436]	; 0x1b4
    11b4:	cbz	r3, 11ca <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    11b6:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11b8:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11bc:	ldrb.w	r3, [sp, #24]
    11c0:	cmp	r3, #0
    11c2:	beq.n	11a0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11c4:	mov	r0, r5
    11c6:	add	sp, #284	; 0x11c
    11c8:	pop	{r4, r5, pc}
      { next_++;
    11ca:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11ce:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    11d2:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    11d4:	cmp	r1, r2
    11d6:	it	cc
    11d8:	movcc	r3, r1
    11da:	b.n	11b8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011dc <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    11dc:	push	{r4, r5, lr}
    11de:	sub	sp, #308	; 0x134
    11e0:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11e2:	mov	r2, r1
    11e4:	mov	r1, r0
    11e6:	add	r0, sp, #24
  {
    11e8:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11ea:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11ee:	add	r1, sp, #48	; 0x30
    11f0:	mov	r0, r5
    11f2:	bl	e84c <strcpy>
    *parent = r.parent;
    11f6:	ldr	r3, [sp, #320]	; 0x140
    11f8:	ldr	r2, [sp, #24]
    11fa:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11fc:	ldrb.w	r3, [sp, #36]	; 0x24
    1200:	cmp	r3, #0
    1202:	bne.n	1280 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    1204:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    1206:	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    120a:	ldrh.w	r2, [sp, #38]	; 0x26
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    120e:	and.w	r0, r1, #31
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1212:	str	r3, [r4, #0]
    *store = r.store;
    1214:	ldr	r3, [sp, #324]	; 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1216:	lsls	r0, r0, #1
    *store = r.store;
    1218:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    121a:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    121e:	str	r0, [sp, #16]
    1220:	ubfx	r0, r1, #5, #6
    1224:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    1226:	lsrs	r3, r2, #9
    1228:	str	r0, [sp, #12]
    122a:	str	r1, [sp, #8]
    122c:	and.w	r1, r2, #31
    1230:	ubfx	r2, r2, #5, #4
    1234:	addw	r3, r3, #1980	; 0x7bc
    1238:	str	r1, [sp, #4]
    123a:	movs	r1, #32
    123c:	str	r2, [sp, #0]
    123e:	ldr	r0, [sp, #328]	; 0x148
    1240:	ldr	r2, [pc, #68]	; (1288 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1242:	bl	e404 <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1246:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    124a:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    124e:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    1252:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1254:	lsls	r0, r0, #1
    1256:	addw	r3, r3, #1980	; 0x7bc
    125a:	str	r0, [sp, #16]
    125c:	ubfx	r0, r1, #5, #6
    1260:	lsrs	r1, r1, #11
    1262:	str	r0, [sp, #12]
    1264:	str	r1, [sp, #8]
    1266:	and.w	r1, r2, #31
    126a:	ubfx	r2, r2, #5, #4
    126e:	ldr	r0, [sp, #332]	; 0x14c
    1270:	str	r1, [sp, #4]
    1272:	movs	r1, #32
    1274:	str	r2, [sp, #0]
    1276:	ldr	r2, [pc, #16]	; (1288 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1278:	bl	e404 <sniprintf>
  }
    127c:	add	sp, #308	; 0x134
    127e:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1280:	mov.w	r3, #4294967295
    1284:	b.n	1206 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    1286:	nop
    1288:	.word	0x200010cd

0000128c <MTPStorage_SD::GetSize(unsigned long)>:
  {
    128c:	push	{lr}
    128e:	sub	sp, #284	; 0x11c
    1290:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    1292:	mov	r1, r0
    1294:	mov	r0, sp
    1296:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    129a:	ldr	r0, [sp, #4]
    129c:	add	sp, #284	; 0x11c
    129e:	ldr.w	pc, [sp], #4

000012a2 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    12a2:	ldr.w	r3, [r0, #320]	; 0x140
  {
    12a6:	push	{r4, r5, r6, lr}
    12a8:	mov	r4, r0
    12aa:	sub	sp, #288	; 0x120
    12ac:	cbz	r3, 1318 <MTPStorage_SD::close()+0x76>
    12ae:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    12b0:	add.w	r6, r4, #264	; 0x108
    12b4:	add.w	r2, sp, #2
    12b8:	mov	r1, sp
    12ba:	mov	r0, r6
    12bc:	bl	e46 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    12c0:	add.w	r2, sp, #6
    12c4:	add	r1, sp, #4
    12c6:	mov	r0, r6
    12c8:	bl	e46 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    12cc:	mov	r0, r6
    12ce:	bl	82cc <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    12d2:	ldr.w	r2, [r4, #420]	; 0x1a4
    12d6:	mov	r1, r4
    12d8:	add	r0, sp, #8
    12da:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    12de:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    12e2:	add	r2, sp, #8
    12e4:	ldr.w	r1, [r4, #420]	; 0x1a4
    r.cpdate=cpdate;
    12e8:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    12ec:	mov	r0, r4
    r.cptime=cptime;
    12ee:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    12f2:	str	r5, [sp, #12]
    r.cptime=cptime;
    12f4:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    12f8:	ldrh.w	r3, [sp, #4]
    12fc:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    1300:	ldrh.w	r3, [sp, #6]
    1304:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    1308:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    130c:	mvn.w	r3, #1
    1310:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1314:	add	sp, #288	; 0x120
    1316:	pop	{r4, r5, r6, pc}
    1318:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    131c:	cmp	r5, #0
    131e:	beq.n	12b0 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    1320:	ldr	r5, [r5, #16]
    1322:	b.n	12b0 <MTPStorage_SD::close()+0xe>

00001324 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1324:	push	{r4, r5, r6, lr}
    1326:	sub	sp, #280	; 0x118
    1328:	mov	r6, r0
    132a:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    132c:	mov	r2, r1
    132e:	mov	r1, r0
    1330:	mov	r0, sp
  {
    1332:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1334:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1338:	ldr	r1, [sp, #0]
    133a:	adds	r3, r1, #1
    133c:	bne.n	134e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    133e:	ldr	r1, [pc, #64]	; (1380 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1340:	mov	r0, r4
    1342:	bl	e84c <strcpy>
      return tmp.store;
    1346:	ldrh.w	r0, [sp, #14]
  }
    134a:	add	sp, #280	; 0x118
    134c:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    134e:	mov	r3, r5
    1350:	mov	r2, r4
    1352:	mov	r0, r6
    1354:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1358:	mov	r0, r4
    135a:	bl	e900 <strlen>
    135e:	add	r0, r4
    1360:	ldrb.w	r3, [r0, #-1]
    1364:	cmp	r3, #47	; 0x2f
    1366:	beq.n	1372 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1368:	mov	r2, r5
    136a:	ldr	r1, [pc, #20]	; (1380 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    136c:	mov	r0, r4
    136e:	bl	e6a0 <strlcat>
      strlcat(out, tmp.name,len);
    1372:	mov	r2, r5
    1374:	add	r1, sp, #24
    1376:	mov	r0, r4
    1378:	bl	e6a0 <strlcat>
    137c:	b.n	1346 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    137e:	nop
    1380:	.word	0x20000d95

00001384 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1384:	push	{r4, r5, r6, r7, lr}
    1386:	subw	sp, sp, #1052	; 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    138a:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    138e:	mov	r4, r0
    1390:	mov	r5, r1
    1392:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1394:	mov	r2, sp
    1396:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    139a:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    139c:	mov	r6, r0
    Serial.println(oldName);
    139e:	ldr	r0, [pc, #120]	; (1418 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13a0:	bl	d30 <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    13a4:	mov	r2, r5
    13a6:	mov	r1, r4
    13a8:	add	r0, sp, #768	; 0x300
    13aa:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    13ae:	mov.w	r2, #256	; 0x100
    13b2:	add	r1, sp, #792	; 0x318
    13b4:	add	r0, sp, #512	; 0x200
    13b6:	bl	e6e6 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    13ba:	mov.w	r2, #256	; 0x100
    13be:	mov	r1, r7
    13c0:	add	r0, sp, #792	; 0x318
    13c2:	bl	e6e6 <strlcpy>
    WriteIndexRecord(handle, p1);
    13c6:	add	r2, sp, #768	; 0x300
    13c8:	mov	r1, r5
    13ca:	mov	r0, r4
    13cc:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    13d0:	mov.w	r3, #256	; 0x100
    13d4:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    13d6:	add.w	r6, r4, r6, lsl #2
    13da:	add.w	r2, sp, r3
    13de:	mov	r0, r4
    13e0:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    13e4:	add	r1, sp, #256	; 0x100
    13e6:	ldr	r0, [pc, #48]	; (1418 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13e8:	bl	d30 <Print::println(char const*)>
    13ec:	ldr	r0, [r6, #88]	; 0x58
    13ee:	add	r2, sp, #256	; 0x100
    13f0:	mov	r1, sp
    13f2:	bl	d96 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    13f6:	mov	r6, r0
    13f8:	cbnz	r0, 1410 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    13fa:	mov.w	r2, #256	; 0x100
    13fe:	add	r1, sp, #512	; 0x200
    1400:	add	r0, sp, #792	; 0x318
    1402:	bl	e6e6 <strlcpy>
    WriteIndexRecord(handle, p1);
    1406:	add	r2, sp, #768	; 0x300
    1408:	mov	r1, r5
    140a:	mov	r0, r4
    140c:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1410:	mov	r0, r6
    1412:	addw	sp, sp, #1052	; 0x41c
    1416:	pop	{r4, r5, r6, r7, pc}
    1418:	.word	0x20001cec

0000141c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    141c:	ldr.w	r3, [r0, #420]	; 0x1a4
    1420:	cmp	r3, r1
  {
    1422:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1426:	mov	r4, r0
    1428:	sub	sp, #336	; 0x150
    142a:	mov	r6, r1
    142c:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    142e:	bne.n	1438 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1430:	ldr.w	r3, [r0, #416]	; 0x1a0
    1434:	cmp	r3, r2
    1436:	beq.n	1490 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1438:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    143c:	mov.w	r3, #256	; 0x100
    1440:	add	r2, sp, #80	; 0x50
    1442:	mov	r1, r6
    1444:	mov	r0, r4
    1446:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    144a:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    144c:	mov	r0, r8
    144e:	bl	e7c <FsBaseFile::isOpen() const>
    1452:	cbz	r0, 145a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1454:	mov	r0, r8
    1456:	bl	82cc <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    145a:	add.w	r7, r4, r7, lsl #2
    145e:	add	r2, sp, #80	; 0x50
    1460:	mov	r3, r5
    1462:	mov	r0, sp
    1464:	ldr	r1, [r7, #88]	; 0x58
    1466:	bl	8500 <FsVolume::open(char const*, int)>
    146a:	ldr	r3, [sp, #4]
    146c:	add	r1, sp, #16
    146e:	mov	r0, r8
    1470:	str.w	r3, [r4, #252]	; 0xfc
    1474:	ldr	r3, [sp, #8]
    1476:	str.w	r3, [r4, #256]	; 0x100
    147a:	ldrb.w	r3, [sp, #12]
    147e:	strb.w	r3, [r4, #260]	; 0x104
    1482:	bl	82f6 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1486:	mov	r0, sp
    1488:	bl	f14 <FsFile::~FsFile()>
    mode_ = mode;
    148c:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    1490:	add	sp, #336	; 0x150
    1492:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001496 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    1496:	push	{r4, r5, r6, lr}
    1498:	mov	r4, r0
    149a:	mov	r6, r2
    149c:	mov	r5, r3
    OpenFileByIndex(handle);
    149e:	movs	r2, #0
    file_.seekSet(pos);
    14a0:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    14a4:	bl	141c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    14a8:	mov	r2, r6
    14aa:	movs	r3, #0
    14ac:	mov	r0, r4
    14ae:	bl	ec8 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    14b2:	ldr	r2, [sp, #16]
    14b4:	mov	r1, r5
    14b6:	mov	r0, r4
    14b8:	bl	eb0 <FsBaseFile::read(void*, unsigned int)>
  }
    14bc:	pop	{r4, r5, r6, pc}

000014be <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    14be:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14c2:	cmp.w	r2, #4294967295
    14c6:	ite	ne
    14c8:	movne	r8, r2
    14ca:	moveq	r8, r1
  {
    14cc:	sub.w	sp, sp, #816	; 0x330
    14d0:	mov	r4, r0
    14d2:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    14d4:	mov	r2, r8
    14d6:	mov	r1, r0
    14d8:	add	r0, sp, #256	; 0x100
  {
    14da:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    14dc:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    14e0:	mov.w	r2, #256	; 0x100
    14e4:	ldr	r1, [sp, #840]	; 0x348
    14e6:	add	r0, sp, #560	; 0x230
    14e8:	bl	e6e6 <strlcpy>
    r.store = p.store;
    14ec:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.sibling = p.child;
    14f0:	ldr	r2, [sp, #260]	; 0x104
    ret = p.child = AppendIndexRecord(r);
    14f2:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    14f4:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    14f8:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    14fa:	mov	r0, r4
    r.sibling = p.child;
    14fc:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    14fe:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    1500:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    1504:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    1508:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    150c:	movs	r3, #1
    150e:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    1512:	bl	10de <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    1516:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1518:	mov	r5, r0
    151a:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    151c:	mov	r1, r8
    151e:	mov	r0, r4
    1520:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1524:	cbz	r7, 1548 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1526:	mov	r2, sp
    1528:	mov	r1, r5
    152a:	mov.w	r3, #256	; 0x100
    152e:	mov	r0, r4
    1530:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1534:	mov	r2, sp
    1536:	mov	r1, r6
    1538:	adds	r0, r4, #4
    153a:	bl	f2c <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    153e:	mov	r0, r5
    1540:	add.w	sp, sp, #816	; 0x330
    1544:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    1548:	movw	r2, #514	; 0x202
    154c:	mov	r1, r5
    154e:	mov	r0, r4
    1550:	bl	141c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1554:	b.n	153e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001556 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1556:	ldrb.w	r3, [r0, #428]	; 0x1ac
    155a:	cbnz	r3, 1560 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    155c:	b.w	10f8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1560:	bx	lr

00001562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    1562:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1566:	cmp.w	r2, #4294967295
    156a:	ite	ne
    156c:	movne	r6, r2
    156e:	moveq	r6, r1
    1570:	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    1574:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1576:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1578:	mov	r2, r6
    157a:	mov	r0, sp
    157c:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1580:	ldrb.w	r3, [sp, #12]
    1584:	cmp	r3, #0
    1586:	beq.n	1680 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    1588:	ldrb.w	r5, [sp, #13]
    158c:	cmp	r5, #0
    158e:	bne.n	1680 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    1590:	add.w	r8, r4, #264	; 0x108
      OpenFileByIndex(i);
    1594:	mov	r0, r4
    1596:	mov	r2, r5
    1598:	mov	r1, r6
    159a:	bl	141c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    159e:	mov	r0, r8
    15a0:	bl	e7c <FsBaseFile::isOpen() const>
    15a4:	cmp	r0, #0
    15a6:	beq.n	1680 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    15a8:	mov	r9, r5
    FsFile tmpFile;
    15aa:	add	r0, sp, #280	; 0x118
    15ac:	add.w	r7, r4, #344	; 0x158
    15b0:	bl	ef8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15b4:	movs	r2, #0
    15b6:	mov	r1, r8
    15b8:	add	r0, sp, #296	; 0x128
    15ba:	bl	83cc <FsBaseFile::openNext(FsBaseFile*, int)>
    15be:	ldr	r3, [sp, #284]	; 0x11c
    15c0:	add	r1, sp, #296	; 0x128
    15c2:	mov	r0, r7
    15c4:	str.w	r3, [r4, #332]	; 0x14c
    15c8:	ldr	r3, [sp, #288]	; 0x120
    15ca:	str.w	r3, [r4, #336]	; 0x150
    15ce:	ldrb.w	r3, [sp, #292]	; 0x124
    15d2:	strb.w	r3, [r4, #340]	; 0x154
    15d6:	bl	82f6 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    15da:	add	r0, sp, #280	; 0x118
    15dc:	bl	f14 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    15e0:	mov	r0, r7
    15e2:	bl	e7c <FsBaseFile::isOpen() const>
    15e6:	cmp	r0, #0
    15e8:	beq.n	166e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    15ea:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    15ee:	mov	r0, r7
        r.parent = i;
    15f0:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    15f2:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    15f6:	str	r5, [sp, #288]	; 0x120
    15f8:	bl	e5a <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    15fc:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1600:	cbnz	r0, 1656 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    1602:	ldr.w	r3, [r4, #400]	; 0x190
    1606:	cbz	r3, 164a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    1608:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    160a:	mov.w	r2, #256	; 0x100
    160e:	add	r1, sp, #304	; 0x130
    1610:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1612:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1614:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    1618:	bl	c92 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    161c:	add.w	r2, sp, #298	; 0x12a
    1620:	add	r1, sp, #296	; 0x128
    1622:	mov	r0, r7
    1624:	bl	e46 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1628:	ldr.w	r0, [r4, #400]	; 0x190
    162c:	cbz	r0, 165a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    162e:	add.w	r2, sp, #302	; 0x12e
    1632:	add	r1, sp, #300	; 0x12c
    1634:	bl	71fe <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    1638:	add	r1, sp, #280	; 0x118
    163a:	mov	r0, r4
    163c:	bl	10de <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1640:	mov	r5, r0
        child_.close();
    1642:	mov	r0, r7
    1644:	bl	82cc <FsBaseFile::close()>
      }
    1648:	b.n	15aa <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    164a:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    164e:	cmp	r3, #0
    1650:	beq.n	160a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1652:	ldr	r3, [r3, #16]
    1654:	b.n	160a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1656:	movs	r3, #0
    1658:	b.n	160a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    165a:	ldr.w	r0, [r4, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    165e:	cmp	r0, #0
    1660:	beq.n	1638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1662:	add.w	r2, sp, #302	; 0x12e
    1666:	add	r1, sp, #300	; 0x12c
    1668:	bl	5522 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    166c:	b.n	1638 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    166e:	movs	r3, #1
      WriteIndexRecord(i, record);
    1670:	mov	r2, sp
    1672:	mov	r1, r6
    1674:	mov	r0, r4
      record.scanned = true;
    1676:	strb.w	r3, [sp, #13]
      record.child = sibling;
    167a:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    167c:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1680:	add.w	sp, sp, #564	; 0x234
    1684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001688 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1688:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    168a:	cmp.w	r2, #4294967295
    168e:	it	eq
    1690:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1692:	sub	sp, #288	; 0x120
    1694:	mov	r4, r0
      ScanDir(store, parent);
    1696:	str	r2, [sp, #4]
    1698:	bl	1562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    169c:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    169e:	ldr	r2, [sp, #4]
    16a0:	mov	r1, r4
    16a2:	add	r0, sp, #8
      follow_sibling_ = true;
    16a4:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    16a8:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    16ac:	ldr	r3, [sp, #12]
    16ae:	str.w	r3, [r4, #432]	; 0x1b0
  }
    16b2:	add	sp, #288	; 0x120
    16b4:	pop	{r4, pc}

000016b6 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    16b6:	push	{r4, r5, r6, lr}
    16b8:	ldrb.w	r4, [r0, #429]	; 0x1ad
    16bc:	mov	r5, r0
    16be:	mov	r6, r1
    16c0:	cbnz	r4, 16d4 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16c2:	movs	r3, #1
    16c4:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    16c8:	bl	1556 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16cc:	ldr.w	r3, [r5, #424]	; 0x1a8
    16d0:	cmp	r4, r3
    16d2:	bcc.n	16d6 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    16d4:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16d6:	mov	r2, r4
    16d8:	mov	r1, r6
    16da:	mov	r0, r5
    16dc:	adds	r4, #1
    16de:	bl	1562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    16e2:	b.n	16cc <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000016e4 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    16e4:	push	{r4, r5, r6, lr}
    16e6:	mov	r5, r2
    16e8:	mov	r4, r0
    16ea:	mov	r6, r1
    GenerateIndex(store);
    16ec:	bl	1556 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    16f0:	cbz	r5, 1700 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    16f2:	mov	r2, r5
    16f4:	mov	r1, r6
    16f6:	mov	r0, r4
  }
    16f8:	ldmia.w	sp!, {r4, r5, r6, lr}
    16fc:	b.w	1688 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    1700:	mov	r1, r6
    1702:	mov	r0, r4
    1704:	bl	16b6 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    1708:	movs	r3, #1
      follow_sibling_ = false;
    170a:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    170e:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1712:	pop	{r4, r5, r6, pc}

00001714 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    1714:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1718:	mov	r4, r1
    171a:	sub.w	sp, sp, #764	; 0x2fc
    171e:	add.w	r1, r0, r1, lsl #2
    1722:	mov	r6, r0
  FsFile f1=sd_open(store,file,O_READ);
    1724:	adds	r7, r0, #4
    1726:	movs	r3, #0
    1728:	add	r0, sp, #8
    172a:	ldr	r1, [r1, #88]	; 0x58
{ 
    172c:	mov	r5, r2
    172e:	bl	8500 <FsVolume::open(char const*, int)>
    1732:	add	r0, sp, #24
    1734:	bl	e5a <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1738:	cmp	r0, #0
    173a:	beq.n	17de <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    173c:	ldr.w	r9, [pc, #172]	; 17ec <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1740:	add	r0, sp, #88	; 0x58
    1742:	bl	ef8 <FsFile::FsFile()>
    FsFile tmpFile;
    1746:	add	r0, sp, #168	; 0xa8
    1748:	bl	ef8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    174c:	movs	r2, #0
    174e:	add	r1, sp, #24
    1750:	add	r0, sp, #184	; 0xb8
    1752:	bl	83cc <FsBaseFile::openNext(FsBaseFile*, int)>
    1756:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1758:	add	r1, sp, #184	; 0xb8
    175a:	add	r0, sp, #104	; 0x68
    175c:	str	r3, [sp, #92]	; 0x5c
    175e:	ldr	r3, [sp, #176]	; 0xb0
    1760:	str	r3, [sp, #96]	; 0x60
    1762:	ldrb.w	r3, [sp, #180]	; 0xb4
    1766:	strb.w	r3, [sp, #100]	; 0x64
    176a:	bl	82f6 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    176e:	add	r0, sp, #104	; 0x68
    1770:	bl	e7c <FsBaseFile::isOpen() const>
    1774:	mov	r8, r0
    while(f2=f1.openNextFile())
    1776:	add	r0, sp, #168	; 0xa8
    1778:	bl	f14 <FsFile::~FsFile()>
    177c:	cmp.w	r8, #0
    1780:	bne.n	17a0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    1782:	mov	r2, r5
    1784:	mov	r1, r4
    1786:	mov	r0, r7
    1788:	bl	fd0 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    178c:	add	r0, sp, #88	; 0x58
    178e:	bl	f14 <FsFile::~FsFile()>
}
    1792:	add	r0, sp, #8
    1794:	bl	f14 <FsFile::~FsFile()>
    1798:	add.w	sp, sp, #764	; 0x2fc
    179c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    17a0:	add.w	r8, sp, #504	; 0x1f8
    17a4:	mov.w	r2, #256	; 0x100
    17a8:	add	r0, sp, #104	; 0x68
    17aa:	mov	r1, r8
    17ac:	bl	c92 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    17b0:	mov	r2, r9
    17b2:	mov.w	r1, #256	; 0x100
    17b6:	mov	r3, r5
    17b8:	add	r0, sp, #248	; 0xf8
    17ba:	str.w	r8, [sp]
    17be:	bl	e404 <sniprintf>
    return BaseFile::isDir();
    17c2:	add	r0, sp, #104	; 0x68
    17c4:	bl	e5a <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17c8:	add	r2, sp, #248	; 0xf8
    17ca:	mov	r1, r4
    17cc:	cbz	r0, 17d6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17ce:	mov	r0, r6
    17d0:	bl	1714 <MTPStorage_SD::removeFile(unsigned long, char*)>
    17d4:	b.n	1746 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    17d6:	mov	r0, r7
    17d8:	bl	f6c <mSD_Base::sd_remove(unsigned long, char const*)>
    17dc:	b.n	1746 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    17de:	mov	r2, r5
    17e0:	mov	r1, r4
    17e2:	mov	r0, r7
    17e4:	bl	f6c <mSD_Base::sd_remove(unsigned long, char const*)>
    17e8:	b.n	1792 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    17ea:	nop
    17ec:	.word	0x200010c7

000017f0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    17f0:	push	{r4, r5, r6, r7, lr}
    17f2:	subw	sp, sp, #1380	; 0x564
    17f6:	mov	r4, r0
    17f8:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    17fa:	mov.w	r3, #256	; 0x100
    17fe:	add	r2, sp, #280	; 0x118
    1800:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    1804:	mov	r2, r5
    1806:	mov	r1, r4
    1808:	add	r0, sp, #536	; 0x218
    180a:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    180e:	add	r2, sp, #280	; 0x118
    1810:	ldrh.w	r1, [sp, #550]	; 0x226
    1814:	mov	r0, r4
    1816:	bl	1714 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    181a:	movs	r3, #0
    WriteIndexRecord(object, r);
    181c:	add	r2, sp, #536	; 0x218
    181e:	mov	r1, r5
    1820:	mov	r0, r4
    r.name[0]=0;
    1822:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    1826:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    182a:	ldr	r2, [sp, #536]	; 0x218
    182c:	mov	r1, r4
    182e:	add	r0, sp, #816	; 0x330
    1830:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1834:	ldr	r6, [sp, #820]	; 0x334
    1836:	cmp	r5, r6
    1838:	bne.n	184e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    183a:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    183c:	add	r2, sp, #816	; 0x330
    183e:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    1840:	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(is, x);
    1842:	mov	r0, r4
    1844:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1848:	addw	sp, sp, #1380	; 0x564
    184c:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    184e:	mov	r2, r6
    1850:	mov	r1, r4
    1852:	add.w	r0, sp, #1096	; 0x448
    1856:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    185a:	ldr.w	r7, [sp, #1104]	; 0x450
    185e:	cmp	r5, r7
    1860:	bne.n	1870 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    1862:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1864:	add.w	r2, sp, #1096	; 0x448
    1868:	mov	r1, r6
      x.sibling = r.sibling;
    186a:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    186e:	b.n	1842 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1870:	mov	r2, r7
    1872:	mov	r1, r4
    1874:	mov	r0, sp
    1876:	mov	r6, r7
    1878:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    187c:	mov.w	r2, #280	; 0x118
    1880:	mov	r1, sp
    1882:	add.w	r0, sp, #1096	; 0x448
    1886:	bl	9dd0 <memcpy>
    188a:	b.n	185a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

0000188c <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    188c:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    188e:	adds	r3, r1, #1
    1890:	beq.n	1896 <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    1892:	bl	17f0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    1896:	movs	r0, #1
    1898:	pop	{r3, pc}

0000189a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    189a:	push	{r4, r5, r6, lr}
    189c:	add.w	r1, r0, r1, lsl #2
    18a0:	sub.w	sp, sp, #2208	; 0x8a0
    18a4:	mov	r5, r0
    18a6:	mov	r6, r3
    18a8:	ldr	r1, [r1, #84]	; 0x54
    18aa:	movs	r3, #0
    18ac:	mov	r0, sp
    18ae:	bl	8500 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18b2:	add	r0, sp, #16
    18b4:	bl	e7c <FsBaseFile::isOpen() const>
    18b8:	mov	r4, r0
    18ba:	cbnz	r0, 18d2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18bc:	movw	r0, #690	; 0x2b2
    18c0:	bl	cf4 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18c4:	mov	r0, sp
    18c6:	bl	f14 <FsFile::~FsFile()>
    18ca:	mov	r0, r4
    18cc:	add.w	sp, sp, #2208	; 0x8a0
    18d0:	pop	{r4, r5, r6, pc}
    18d2:	add.w	r5, r5, r6, lsl #2
    18d6:	movw	r3, #514	; 0x202
    18da:	ldr.w	r2, [sp, #2224]	; 0x8b0
    18de:	add	r0, sp, #80	; 0x50
    18e0:	ldr	r1, [r5, #84]	; 0x54
    18e2:	bl	8500 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    18e6:	add	r0, sp, #96	; 0x60
    18e8:	bl	e7c <FsBaseFile::isOpen() const>
    18ec:	mov	r4, r0
    18ee:	cbnz	r0, 1906 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    18f0:	add	r0, sp, #16
    18f2:	bl	82cc <FsBaseFile::close()>
    18f6:	movw	r0, #693	; 0x2b5
    18fa:	bl	cf4 <dbgPrint(unsigned short)>
}
    18fe:	add	r0, sp, #80	; 0x50
    1900:	bl	f14 <FsFile::~FsFile()>
    1904:	b.n	18c4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    1906:	mov.w	r5, #4294967295
    return BaseFile::available();
    190a:	add	r0, sp, #16
    190c:	bl	df6 <FsBaseFile::available() const>
  while(f1.available()>0)
    1910:	cmp	r0, #0
    1912:	ble.n	1934 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    1914:	mov.w	r2, #2048	; 0x800
    1918:	add	r1, sp, #160	; 0xa0
    191a:	add	r0, sp, #16
    191c:	bl	eb0 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1920:	subs	r5, r0, #0
    1922:	blt.n	1934 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1924:	mov	r2, r5
    1926:	add	r1, sp, #160	; 0xa0
    1928:	add	r0, sp, #96	; 0x60
    192a:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    192e:	cmp.w	r5, #2048	; 0x800
    1932:	bge.n	190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1934:	add	r0, sp, #16
    1936:	bl	82cc <FsBaseFile::close()>
  f2.close();
    193a:	add	r0, sp, #96	; 0x60
    193c:	bl	82cc <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1940:	cmp	r5, #0
    1942:	bge.n	18fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1944:	movw	r0, #705	; 0x2c1
    1948:	movs	r4, #0
    194a:	bl	cf4 <dbgPrint(unsigned short)>
    194e:	b.n	18fe <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001950 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1950:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1954:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1958:	cmp.w	r3, #4294967295
    195c:	ite	ne
    195e:	movne	r8, r3
    1960:	moveq	r8, r2
  { 
    1962:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1964:	mov	r2, r1
  { 
    1966:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1968:	mov	r1, r0
    196a:	add	r0, sp, #520	; 0x208
    196c:	add	r6, sp, #544	; 0x220
    196e:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1972:	mov	r2, r8
    1974:	mov	r1, r4
    1976:	add	r0, sp, #800	; 0x320
    1978:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    197c:	ldrb.w	r5, [sp, #532]	; 0x214
    1980:	cbz	r5, 19c6 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    1982:	ldrh.w	r1, [sp, #534]	; 0x216
    1986:	mov	r2, r7
    1988:	mov	r0, r4
    198a:	adds	r1, #1
    198c:	bl	1562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1990:	ldrb.w	r3, [sp, #532]	; 0x214
    1994:	ldr	r2, [r4, #0]
    1996:	mov	r0, r4
    1998:	subs	r3, #0
    199a:	str	r6, [sp, #0]
    199c:	ldrh.w	r1, [sp, #814]	; 0x32e
    19a0:	ldr	r5, [r2, #44]	; 0x2c
    19a2:	it	ne
    19a4:	movne	r3, #1
    19a6:	mov	r2, r8
    19a8:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    19aa:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19ac:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    19ae:	ldrh.w	r2, [sp, #814]	; 0x32e
    19b2:	ldr	r6, [r3, #84]	; 0x54
    19b4:	mov	r1, r7
    19b6:	mov	r3, r0
    19b8:	mov	r0, r4
    19ba:	blx	r6
  }
    19bc:	mov	r0, r5
    19be:	add.w	sp, sp, #1360	; 0x550
    19c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19c6:	mov.w	r2, #256	; 0x100
    19ca:	mov	r1, r6
    19cc:	add.w	r0, sp, #1104	; 0x450
    19d0:	bl	e6e6 <strlcpy>
      r.store = p2.store;
    19d4:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    19d8:	add.w	r1, sp, #1080	; 0x438
    19dc:	mov	r0, r4
      r.store = p2.store;
    19de:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    19e2:	ldr	r3, [sp, #804]	; 0x324
      r.child = 0;
    19e4:	str.w	r5, [sp, #1084]	; 0x43c
      r.sibling = p2.child;
    19e8:	str.w	r3, [sp, #1088]	; 0x440
      r.isdir = 0;
    19ec:	strh.w	r5, [sp, #1092]	; 0x444
      r.parent = newParent;
    19f0:	str.w	r8, [sp, #1080]	; 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    19f4:	bl	10de <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    19f8:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    19fa:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    19fc:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    19fe:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1a00:	mov	r0, r4
    1a02:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a06:	add	r2, sp, #8
    1a08:	mov	r1, r7
    1a0a:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a0e:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a10:	mov	r0, r4
    1a12:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1a16:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a18:	mov	r2, r7
    1a1a:	mov	r1, r5
    1a1c:	mov.w	r3, #256	; 0x100
    1a20:	mov	r0, r4
    1a22:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a26:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a28:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a2a:	mov	r1, r6
    1a2c:	adds	r0, r4, #4
    1a2e:	str	r7, [sp, #0]
    1a30:	bl	189a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a34:	b.n	19bc <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a36 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a36:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a3a:	subw	sp, sp, #1644	; 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a3e:	cmp.w	r3, #4294967295
    1a42:	ite	ne
    1a44:	movne	r7, r3
    1a46:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a48:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a4a:	mov	r2, r1
    1a4c:	mov	r1, r0
    1a4e:	add	r0, sp, #520	; 0x208
    1a50:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a54:	mov	r2, r7
    1a56:	mov	r1, r4
    1a58:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a5a:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a5e:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a60:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a64:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a66:	cbnz	r6, 1a7e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a68:	mov	r0, r4
    1a6a:	add	r2, sp, #800	; 0x320
    1a6c:	mov	r1, r7
  p2.child=iy;
    1a6e:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1a70:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a74:	movs	r0, #1
    1a76:	addw	sp, sp, #1644	; 0x66c
    1a7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1a7e:	mov	r2, r6
    1a80:	mov	r1, r4
    1a82:	add.w	r0, sp, #1080	; 0x438
    1a86:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a8a:	mov.w	r2, #280	; 0x118
    1a8e:	add.w	r1, sp, #1080	; 0x438
    1a92:	add.w	r0, sp, #1360	; 0x550
    1a96:	bl	9dd0 <memcpy>
    py.store = p2.store;
    1a9a:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1a9e:	add.w	r1, sp, #1360	; 0x550
    1aa2:	mov	r0, r4
    py.store = p2.store;
    1aa4:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1aa8:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1aac:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1ab0:	bl	10de <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1ab4:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1ab6:	mov.w	r3, #256	; 0x100
    1aba:	add	r2, sp, #8
    1abc:	mov	r1, r6
    1abe:	mov	r0, r4
    1ac0:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1ac4:	add	r2, sp, #264	; 0x108
    1ac6:	mov.w	r3, #256	; 0x100
    1aca:	mov	r1, r5
    1acc:	mov	r0, r4
    1ace:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1ad2:	ldrb.w	r1, [sp, #1372]	; 0x55c
      sd_mkdir(py.store,newfilename);
    1ad6:	adds	r0, r4, #4
    1ad8:	ldrh.w	r3, [sp, #1374]	; 0x55e
    if(py.isdir) 
    1adc:	add	r2, sp, #264	; 0x108
    1ade:	cbz	r1, 1b08 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    1ae0:	mov	r1, r3
    1ae2:	bl	f2c <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1ae6:	mov	r2, r6
    1ae8:	mov	r1, r8
    1aea:	mov	r0, r4
    1aec:	bl	1562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1af0:	ldr	r3, [r4, #0]
    1af2:	ldrh.w	r2, [sp, #814]	; 0x32e
    1af6:	mov	r1, r6
    1af8:	ldr.w	r9, [r3, #84]	; 0x54
    1afc:	mov	r0, r4
    1afe:	mov	r3, r5
    1b00:	blx	r9
    ix = px.sibling;
    1b02:	ldr.w	r6, [sp, #1088]	; 0x440
    1b06:	b.n	1a66 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1b08:	str	r2, [sp, #0]
    1b0a:	mov	r1, r8
    1b0c:	add	r2, sp, #8
    1b0e:	bl	189a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b12:	b.n	1b02 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001b14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b14:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b18:	ldr.w	r8, [sp, #32]
    1b1c:	mov	r6, r1
    1b1e:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b20:	mov	r1, r3
    1b22:	mov	r2, r8
    1b24:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b26:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b28:	bl	f2c <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b2c:	ldr	r3, [sp, #4]
    1b2e:	mov	r4, r0
    1b30:	cbz	r0, 1b46 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b32:	mov	r2, r7
    1b34:	mov	r1, r6
    1b36:	mov	r0, r5
    1b38:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b3c:	add	sp, #8
    1b3e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b42:	b.w	1b58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b46:	movw	r0, #715	; 0x2cb
    1b4a:	bl	cf4 <dbgPrint(unsigned short)>
}
    1b4e:	mov	r0, r4
    1b50:	add	sp, #8
    1b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b5c:	mov	r6, r1
    1b5e:	sub.w	sp, sp, #680	; 0x2a8
    1b62:	add.w	r1, r0, r1, lsl #2
    1b66:	mov	r5, r0
    1b68:	mov	r8, r3
    1b6a:	add	r0, sp, #8
    1b6c:	movs	r3, #0
    1b6e:	ldr	r1, [r1, #84]	; 0x54
    1b70:	mov	r7, r2
    1b72:	bl	8500 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b76:	add	r0, sp, #24
    1b78:	bl	e7c <FsBaseFile::isOpen() const>
    1b7c:	mov	r4, r0
    1b7e:	cmp	r0, #0
    1b80:	beq.n	1c36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b82:	ldr	r4, [pc, #264]	; (1c8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1b84:	mov.w	r2, #256	; 0x100
    1b88:	mov	r1, r7
    1b8a:	add	r0, sp, #168	; 0xa8
    1b8c:	bl	e6e6 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b90:	add	r0, sp, #168	; 0xa8
    1b92:	bl	e900 <strlen>
    1b96:	add	r3, sp, #168	; 0xa8
    1b98:	add	r0, r3
    1b9a:	ldrb.w	r3, [r0, #-1]
    1b9e:	cmp	r3, #47	; 0x2f
    1ba0:	beq.n	1bae <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1ba2:	mov.w	r2, #256	; 0x100
    1ba6:	mov	r1, r4
    1ba8:	add	r0, sp, #168	; 0xa8
    1baa:	bl	e6a0 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1bae:	mov.w	r2, #256	; 0x100
    1bb2:	ldr	r1, [sp, #704]	; 0x2c0
    1bb4:	add	r0, sp, #424	; 0x1a8
    1bb6:	bl	e6e6 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bba:	add	r0, sp, #424	; 0x1a8
    1bbc:	bl	e900 <strlen>
    1bc0:	add	r3, sp, #424	; 0x1a8
    1bc2:	add	r0, r3
    1bc4:	ldrb.w	r3, [r0, #-1]
    1bc8:	cmp	r3, #47	; 0x2f
    1bca:	beq.n	1bd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bcc:	mov.w	r2, #256	; 0x100
    1bd0:	mov	r1, r4
    1bd2:	add	r0, sp, #424	; 0x1a8
    1bd4:	bl	e6a0 <strlcat>
    FsFile tmpFile;
    1bd8:	add	r0, sp, #88	; 0x58
    1bda:	bl	ef8 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1bde:	movs	r2, #0
    1be0:	add	r1, sp, #24
    1be2:	add	r0, sp, #104	; 0x68
    1be4:	bl	83cc <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1be8:	add	r0, sp, #104	; 0x68
    1bea:	bl	e7c <FsBaseFile::isOpen() const>
    1bee:	cmp	r0, #0
    1bf0:	beq.n	1c76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1bf2:	mov.w	r2, #256	; 0x100
    1bf6:	add	r1, sp, #168	; 0xa8
    1bf8:	add	r0, sp, #104	; 0x68
    1bfa:	bl	c92 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1bfe:	mov.w	r2, #256	; 0x100
    1c02:	add	r1, sp, #424	; 0x1a8
    1c04:	add	r0, sp, #104	; 0x68
    1c06:	bl	c92 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c0a:	add	r0, sp, #104	; 0x68
    1c0c:	bl	e5a <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c10:	add	r3, sp, #424	; 0x1a8
    1c12:	add	r2, sp, #168	; 0xa8
    1c14:	mov	r1, r6
    1c16:	str	r3, [sp, #0]
    1c18:	mov	r3, r8
        if(f2.isDirectory())
    1c1a:	cbz	r0, 1c4e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c1c:	mov	r0, r5
    1c1e:	bl	1b14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c22:	cbnz	r0, 1c6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c24:	movw	r0, #738	; 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c28:	bl	cf4 <dbgPrint(unsigned short)>
    }
    1c2c:	add	r0, sp, #88	; 0x58
    1c2e:	movs	r4, #0
    1c30:	bl	f14 <FsFile::~FsFile()>
    1c34:	b.n	1c3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c36:	movw	r0, #718	; 0x2ce
    1c3a:	bl	cf4 <dbgPrint(unsigned short)>
}
    1c3e:	add	r0, sp, #8
    1c40:	bl	f14 <FsFile::~FsFile()>
    1c44:	mov	r0, r4
    1c46:	add.w	sp, sp, #680	; 0x2a8
    1c4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c4e:	mov	r0, r5
    1c50:	bl	189a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c54:	cbnz	r0, 1c5c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c56:	movw	r0, #742	; 0x2e6
    1c5a:	b.n	1c28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c5c:	add	r2, sp, #168	; 0xa8
    1c5e:	mov	r1, r6
    1c60:	mov	r0, r5
    1c62:	bl	f6c <mSD_Base::sd_remove(unsigned long, char const*)>
    1c66:	cbnz	r0, 1c6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c68:	movw	r0, #743	; 0x2e7
    1c6c:	b.n	1c28 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c6e:	add	r0, sp, #88	; 0x58
    1c70:	bl	f14 <FsFile::~FsFile()>
    1c74:	b.n	1b84 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1c76:	add	r0, sp, #88	; 0x58
    1c78:	bl	f14 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1c7c:	mov	r2, r7
    1c7e:	mov	r1, r6
    1c80:	mov	r0, r5
    1c82:	bl	fd0 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1c86:	mov	r4, r0
    1c88:	b.n	1c3e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1c8a:	nop
    1c8c:	.word	0x20000d95

00001c90 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1c90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c94:	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1c98:	cmp.w	r3, #4294967295
    1c9c:	ite	ne
    1c9e:	movne	r7, r3
    1ca0:	moveq	r7, r2
  { 
    1ca2:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1ca4:	mov	r2, r1
  { 
    1ca6:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1ca8:	mov	r1, r0
    1caa:	add	r0, sp, #800	; 0x320
    1cac:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1cb0:	mov	r2, r7
    1cb2:	mov	r1, r4
    1cb4:	add.w	r0, sp, #1080	; 0x438
    1cb8:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cbc:	ldr	r2, [sp, #800]	; 0x320
    1cbe:	mov	r1, r4
    1cc0:	add.w	r0, sp, #1360	; 0x550
    1cc4:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1cc8:	ldrb.w	r3, [sp, #812]	; 0x32c
    1ccc:	cbz	r3, 1cea <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cce:	ldrb.w	r3, [sp, #813]	; 0x32d
    1cd2:	cbnz	r3, 1cea <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1cd4:	mov	r2, r5
    1cd6:	ldrh.w	r1, [sp, #814]	; 0x32e
    1cda:	mov	r0, r4
    1cdc:	bl	1562 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1ce0:	add	r2, sp, #800	; 0x320
    1ce2:	mov	r1, r5
    1ce4:	mov	r0, r4
    1ce6:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1cea:	mov.w	r2, #280	; 0x118
    1cee:	add	r1, sp, #800	; 0x320
    1cf0:	add.w	r0, sp, #1640	; 0x668
    1cf4:	bl	9dd0 <memcpy>
    Record p2o = p2;
    1cf8:	mov.w	r2, #280	; 0x118
    1cfc:	add.w	r1, sp, #1080	; 0x438
    1d00:	add.w	r0, sp, #1920	; 0x780
    1d04:	bl	9dd0 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d08:	mov.w	r3, #256	; 0x100
    1d0c:	add	r2, sp, #288	; 0x120
    1d0e:	mov	r1, r5
    1d10:	mov	r0, r4
    1d12:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d16:	ldr.w	r8, [sp, #1364]	; 0x554
    1d1a:	cmp	r8, r5
    1d1c:	bne.n	1d94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d1e:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d20:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d24:	add.w	r2, sp, #1360	; 0x550
    1d28:	ldr	r1, [sp, #800]	; 0x320
    1d2a:	mov	r0, r4
        p3.child = p1.sibling;
    1d2c:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d30:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d34:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d38:	add	r2, sp, #800	; 0x320
    1d3a:	mov	r1, r5
    1d3c:	mov	r0, r4
      p1.store = p2.store;
    1d3e:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d42:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d46:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d48:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d4a:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d4e:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d52:	add.w	r2, sp, #1080	; 0x438
    1d56:	mov	r1, r7
    1d58:	mov	r0, r4
    1d5a:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d5e:	mov.w	r3, #256	; 0x100
    1d62:	mov	r1, r5
    1d64:	add	r2, sp, #544	; 0x220
    1d66:	mov	r0, r4
    1d68:	bl	1324 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d6c:	ldrh.w	r1, [sp, #1654]	; 0x676
    1d70:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1d74:	cmp	r1, r3
    1d76:	bne.n	1e24 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1d78:	add.w	r3, r4, r1, lsl #2
    1d7c:	add	r2, sp, #544	; 0x220
    1d7e:	add	r1, sp, #288	; 0x120
    1d80:	ldr	r0, [r3, #88]	; 0x58
    1d82:	bl	d96 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d86:	cbz	r0, 1df4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1d88:	movs	r6, #1
  }
    1d8a:	mov	r0, r6
    1d8c:	addw	sp, sp, #2764	; 0xacc
    1d90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1d94:	mov	r2, r8
    1d96:	mov	r1, r4
    1d98:	add	r0, sp, #8
    1d9a:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1d9e:	mov.w	r2, #280	; 0x118
    1da2:	add	r1, sp, #8
    1da4:	add.w	r0, sp, #2480	; 0x9b0
    1da8:	bl	9dd0 <memcpy>
        pxo = px;
    1dac:	mov.w	r2, #280	; 0x118
    1db0:	add.w	r1, sp, #2480	; 0x9b0
    1db4:	addw	r0, sp, #2200	; 0x898
    1db8:	bl	9dd0 <memcpy>
        while(handle != px.sibling)
    1dbc:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1dc0:	cmp	r6, r5
    1dc2:	bne.n	1dd8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1dc4:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1dc6:	add.w	r2, sp, #2480	; 0x9b0
    1dca:	mov	r1, r8
    1dcc:	mov	r0, r4
        px.sibling = p1.sibling;
    1dce:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1dd2:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1dd6:	b.n	1d34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1dd8:	mov	r2, r6
    1dda:	mov	r1, r4
    1ddc:	add	r0, sp, #8
    1dde:	mov	r8, r6
    1de0:	bl	115c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1de4:	mov.w	r2, #280	; 0x118
    1de8:	add	r1, sp, #8
    1dea:	add.w	r0, sp, #2480	; 0x9b0
    1dee:	bl	9dd0 <memcpy>
          pxo = px;
    1df2:	b.n	1dac <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1df4:	movw	r0, #579	; 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1df8:	bl	cf4 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1dfc:	addw	r2, sp, #2200	; 0x898
    1e00:	mov	r1, r8
    1e02:	mov	r0, r4
    1e04:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e08:	add.w	r2, sp, #1640	; 0x668
    1e0c:	mov	r1, r5
    1e0e:	mov	r0, r4
    1e10:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e14:	add.w	r2, sp, #1920	; 0x780
    1e18:	mov	r1, r7
    1e1a:	mov	r0, r4
    return false;
    1e1c:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e1e:	bl	10b2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e22:	b.n	1d8a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e24:	ldrb.w	r2, [sp, #1652]	; 0x674
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e28:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1e2c:	cbnz	r2, 1e52 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e2e:	add	r2, sp, #544	; 0x220
    1e30:	mov	r0, r9
    1e32:	str	r2, [sp, #0]
    1e34:	add	r2, sp, #288	; 0x120
    1e36:	bl	189a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e3a:	mov	r6, r0
    1e3c:	cbz	r0, 1e4c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e3e:	add	r2, sp, #288	; 0x120
    1e40:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e44:	mov	r0, r9
    1e46:	bl	f6c <mSD_Base::sd_remove(unsigned long, char const*)>
    1e4a:	b.n	1d8a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e4c:	movw	r0, #583	; 0x247
    1e50:	b.n	1df8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e52:	add	r2, sp, #544	; 0x220
    1e54:	mov	r0, r9
    1e56:	str	r2, [sp, #0]
    1e58:	add	r2, sp, #288	; 0x120
    1e5a:	bl	1b14 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e5e:	cmp	r0, #0
    1e60:	bne.n	1d88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e62:	movw	r0, #587	; 0x24b
    1e66:	b.n	1df8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e68 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e68:	push	{r4, r5, r6, lr}
    1e6a:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e6e:	ldr	r4, [pc, #60]	; (1eac <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1e70:	ldr	r0, [r5, #88]	; 0x58
    1e72:	bl	d62 <FsVolume::clusterCount() const>
    1e76:	mov	r1, r0
    1e78:	mov	r0, r4
    1e7a:	bl	cb8 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1e7e:	ldr	r0, [r5, #88]	; 0x58
    1e80:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e84:	mov	r1, r0
    1e86:	mov	r0, r4
    1e88:	bl	cb8 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1e8c:	ldr	r6, [r5, #88]	; 0x58
    1e8e:	mov	r0, r6
    1e90:	bl	d62 <FsVolume::clusterCount() const>
    1e94:	mov	r4, r0
    1e96:	mov	r0, r6
    1e98:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e9c:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1e9e:	ldr	r0, [r5, #88]	; 0x58
    1ea0:	bl	d44 <FsVolume::bytesPerCluster() const>
    1ea4:	umull	r0, r1, r4, r0
    1ea8:	pop	{r4, r5, r6, pc}
    1eaa:	nop
    1eac:	.word	0x20001cec

00001eb0 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1eb0:	push	{r4, lr}
    1eb2:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1eb4:	bl	c246 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1eb8:	mov	r0, r4
    1eba:	ldmia.w	sp!, {r4, lr}
    1ebe:	b.w	c258 <Print::println()>

00001ec2 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ec2:	push	{r4, lr}
    1ec4:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1ec6:	movs	r3, #0
    1ec8:	movs	r2, #10
    1eca:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ece:	mov	r0, r4
    1ed0:	ldmia.w	sp!, {r4, lr}
    1ed4:	b.w	c258 <Print::println()>

00001ed8 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1ed8:	push	{r0, r1, r4, lr}
    1eda:	mov	r4, r0
    1edc:	cbz	r1, 1ef8 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1ede:	mov	r0, r1
    1ee0:	str	r1, [sp, #4]
    1ee2:	bl	e900 <strlen>
    1ee6:	ldr	r3, [r4, #0]
    1ee8:	mov	r2, r0
    1eea:	ldr	r1, [sp, #4]
    1eec:	ldr	r3, [r3, #4]
    1eee:	mov	r0, r4
    1ef0:	add	sp, #8
    1ef2:	ldmia.w	sp!, {r4, lr}
    1ef6:	bx	r3
    1ef8:	add	sp, #8
    1efa:	pop	{r4, pc}

00001efc <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1efc:	b.w	1ed8 <Print::write(char const*) [clone .isra.0]>

00001f00 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1f00:	push	{r4, lr}
    1f02:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f04:	bl	1ed8 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f08:	mov	r0, r4
    1f0a:	ldmia.w	sp!, {r4, lr}
    1f0e:	b.w	c258 <Print::println()>
	...

00001f14 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f14:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f16:	bl	a2b8 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f1a:	cmp	r0, #0
    1f1c:	beq.n	1f16 <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f1e:	ldr	r4, [pc, #36]	; (1f44 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f20:	movw	r3, #5000	; 0x1388
    1f24:	ldr	r5, [pc, #32]	; (1f48 <menuGetLine()+0x34>)
    1f26:	movs	r1, #13
    1f28:	mov	r2, r4
    1f2a:	str	r3, [r5, #8]
    1f2c:	mov	r0, r5
    1f2e:	movs	r3, #40	; 0x28
    1f30:	bl	c1a0 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f34:	movs	r3, #0
  Serial.println(buffer);
    1f36:	mov	r1, r4
  buffer[count]=0;
    1f38:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f3a:	mov	r0, r5
    1f3c:	bl	1f00 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f40:	mov	r0, r4
    1f42:	pop	{r3, r4, r5, pc}
    1f44:	.word	0x2002158e
    1f48:	.word	0x20001cec

00001f4c <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f4c:	push	{r0, r1, r4, lr}
    1f4e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f50:	bl	1f14 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f54:	add	r2, sp, #4
    1f56:	ldr	r1, [pc, #12]	; (1f64 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f58:	bl	e4ac <siscanf>
    1f5c:	ldr	r3, [sp, #4]
    1f5e:	str	r3, [r4, #0]
  return 1;
}
    1f60:	add	sp, #8
    1f62:	pop	{r4, pc}
    1f64:	.word	0x2000140a

00001f68 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f68:	push	{r0, r1, r4, lr}
    1f6a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f6c:	bl	1f14 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f70:	add	r2, sp, #4
    1f72:	ldr	r1, [pc, #12]	; (1f80 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f74:	bl	e4ac <siscanf>
    1f78:	ldr	r3, [sp, #4]
    1f7a:	strh	r3, [r4, #0]
}
    1f7c:	add	sp, #8
    1f7e:	pop	{r4, pc}
    1f80:	.word	0x2000140a

00001f84 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1f84:	push	{r4, lr}
    1f86:	sub	sp, #32
    1f88:	bl	a2b8 <usb_serial_available>

    while(!Serial.available()) ;
    1f8c:	cmp	r0, #0
    1f8e:	beq.n	1f88 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1f90:	bl	a32c <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1f94:	uxtb	r0, r0
    if(ch=='d') // set date
    1f96:	cmp	r0, #100	; 0x64
    1f98:	bne.n	1fc6 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1f9a:	bl	1f14 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f9e:	add	r3, sp, #28
    1fa0:	add	r2, sp, #20
    1fa2:	ldr	r1, [pc, #324]	; (20e8 <menu3()+0x164>)
    1fa4:	str	r3, [sp, #8]
    1fa6:	add.w	r3, sp, #19
    1faa:	str	r3, [sp, #4]
    1fac:	add	r3, sp, #24
    1fae:	str	r3, [sp, #0]
    1fb0:	add.w	r3, sp, #18
    1fb4:	bl	e4ac <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1fb8:	ldr	r0, [sp, #20]
    1fba:	ldrd	r1, r2, [sp, #24]
    1fbe:	bl	3842 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1fc2:	add	sp, #32
    1fc4:	pop	{r4, pc}
    else if(ch=='t') // set time
    1fc6:	cmp	r0, #52	; 0x34
    1fc8:	bhi.n	1fde <menu3()+0x5a>
    1fca:	cmp	r0, #48	; 0x30
    1fcc:	bls.n	1fc2 <menu3()+0x3e>
    1fce:	subs	r0, #50	; 0x32
    1fd0:	cmp	r0, #2
    1fd2:	bhi.w	20d8 <menu3()+0x154>
    1fd6:	tbb	[pc, r0]
    1fda:	.short	0x8381
    1fdc:	.byte	0x85
    1fdd:	.byte	0x00
    1fde:	subs	r0, #97	; 0x61
    1fe0:	uxtb	r3, r0
    1fe2:	cmp	r3, #22
    1fe4:	bhi.n	1fc2 <menu3()+0x3e>
    1fe6:	cmp	r0, #22
    1fe8:	bhi.n	1fc2 <menu3()+0x3e>
    1fea:	add	r3, pc, #4	; (adr r3, 1ff0 <menu3()+0x6c>)
    1fec:	ldr.w	pc, [r3, r0, lsl #2]
    1ff0:	.word	0x00002077
    1ff4:	.word	0x00001fc3
    1ff8:	.word	0x000020b3
    1ffc:	.word	0x00001fc3
    2000:	.word	0x00001fc3
    2004:	.word	0x0000208b
    2008:	.word	0x000020bf
    200c:	.word	0x00001fc3
    2010:	.word	0x00001fc3
    2014:	.word	0x00001fc3
    2018:	.word	0x00001fc3
    201c:	.word	0x00001fc3
    2020:	.word	0x00001fc3
    2024:	.word	0x00001fc3
    2028:	.word	0x00002083
    202c:	.word	0x00001fc3
    2030:	.word	0x00001fc3
    2034:	.word	0x00002087
    2038:	.word	0x0000209f
    203c:	.word	0x0000204d
    2040:	.word	0x00001fc3
    2044:	.word	0x00001fc3
    2048:	.word	0x000020d5
{ char *buffer=menuGetLine();
    204c:	bl	1f14 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2050:	add	r3, sp, #28
    2052:	add	r2, sp, #20
    2054:	ldr	r1, [pc, #144]	; (20e8 <menu3()+0x164>)
    2056:	str	r3, [sp, #8]
    2058:	add.w	r3, sp, #19
    205c:	str	r3, [sp, #4]
    205e:	add	r3, sp, #24
    2060:	str	r3, [sp, #0]
    2062:	add.w	r3, sp, #18
    2066:	bl	e4ac <siscanf>
      rtcSetTime(hour,minutes,seconds);
    206a:	ldr	r0, [sp, #20]
    206c:	ldrd	r1, r2, [sp, #24]
    2070:	bl	3844 <rtcSetTime(int, int, int)>
    2074:	b.n	1fc2 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    2076:	ldr	r0, [pc, #116]	; (20ec <menu3()+0x168>)
}
    2078:	add	sp, #32
    207a:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    207e:	b.w	1f4c <menuGetInt32(long*) [clone .isra.0]>
    2082:	ldr	r0, [pc, #108]	; (20f0 <menu3()+0x16c>)
    2084:	b.n	2078 <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    2086:	ldr	r0, [pc, #108]	; (20f4 <menu3()+0x170>)
    2088:	b.n	2078 <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    208a:	ldr	r4, [pc, #108]	; (20f8 <menu3()+0x174>)
    208c:	mov	r0, r4
    208e:	bl	1f4c <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    2092:	ldr	r0, [r4, #0]
}
    2094:	add	sp, #32
    2096:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    209a:	b.w	c1c <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    209e:	ldr	r4, [pc, #92]	; (20fc <menu3()+0x178>)
    20a0:	mov	r0, r4
    20a2:	bl	1f68 <menuGetInt16(short*) [clone .isra.0]>
    20a6:	ldrh	r3, [r4, #0]
    20a8:	lsls	r3, r3, #16
    20aa:	bpl.n	1fc2 <menu3()+0x3e>
    20ac:	movs	r3, #0
    20ae:	strh	r3, [r4, #0]
    20b0:	b.n	1fc2 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    20b2:	ldr	r0, [pc, #76]	; (2100 <menu3()+0x17c>)
}
    20b4:	add	sp, #32
    20b6:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    20ba:	b.w	1f68 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    20be:	ldr	r4, [pc, #68]	; (2104 <menu3()+0x180>)
    20c0:	mov	r0, r4
    20c2:	bl	1f68 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    20c6:	ldrh	r0, [r4, #0]
    20c8:	sxtb	r0, r0
}
    20ca:	add	sp, #32
    20cc:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    20d0:	b.w	36cc <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    20d4:	ldr	r0, [pc, #48]	; (2108 <menu3()+0x184>)
    20d6:	b.n	20b4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    20d8:	ldr	r0, [pc, #48]	; (210c <menu3()+0x188>)
    20da:	b.n	20b4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    20dc:	ldr	r0, [pc, #48]	; (2110 <menu3()+0x18c>)
    20de:	b.n	20b4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    20e0:	ldr	r0, [pc, #48]	; (2114 <menu3()+0x190>)
    20e2:	b.n	20b4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    20e4:	ldr	r0, [pc, #48]	; (2118 <menu3()+0x194>)
    20e6:	b.n	20b4 <menu3()+0x130>
    20e8:	.word	0x20000fda
    20ec:	.word	0x200022ac
    20f0:	.word	0x200022b0
    20f4:	.word	0x20021384
    20f8:	.word	0x20002290
    20fc:	.word	0x2002146e
    2100:	.word	0x200213ca
    2104:	.word	0x200022b8
    2108:	.word	0x200213a0
    210c:	.word	0x2002137c
    2110:	.word	0x200022a0
    2114:	.word	0x200022a4
    2118:	.word	0x200022a8

0000211c <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    211c:	lsls	r2, r1, #1
    211e:	movs	r1, #0
    2120:	b.w	b8e8 <eeprom_write_block>

00002124 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2124:	lsls	r2, r1, #1
    2126:	movs	r1, #0
    2128:	b.w	b638 <eeprom_read_block>

0000212c <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    212c:	ldr	r3, [pc, #96]	; (2190 <saveParameters()+0x64>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    212e:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    2132:	ldr	r0, [pc, #96]	; (2194 <saveParameters()+0x68>)
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
  store[15] = 0;

  storeConfig(store, 16);
    2134:	movs	r1, #16
  store[1]  = t_acq;
    2136:	ldr	r3, [r3, #0]
    2138:	strh	r3, [r0, #2]
  store[2]  = t_on;
    213a:	ldr	r3, [pc, #92]	; (2198 <saveParameters()+0x6c>)
    213c:	ldr	r3, [r3, #0]
    213e:	strh	r3, [r0, #4]
  store[3]  = t_off;
    2140:	ldr	r3, [pc, #88]	; (219c <saveParameters()+0x70>)
    2142:	ldr	r3, [r3, #0]
    2144:	strh	r3, [r0, #6]
  store[4]  = t_rep;
    2146:	ldr	r3, [pc, #88]	; (21a0 <saveParameters()+0x74>)
    2148:	ldr	r3, [r3, #0]
    214a:	strh	r3, [r0, #8]
  store[5]  = proc;
    214c:	ldr	r3, [pc, #84]	; (21a4 <saveParameters()+0x78>)
    214e:	ldrh	r3, [r3, #0]
    2150:	strh	r3, [r0, #10]
  store[6]  = shift;
    2152:	ldr	r3, [pc, #84]	; (21a8 <saveParameters()+0x7c>)
    2154:	ldrh	r3, [r3, #0]
    2156:	strh	r3, [r0, #12]
  store[7]  = t_1;
    2158:	ldr	r3, [pc, #80]	; (21ac <saveParameters()+0x80>)
    215a:	ldr	r3, [r3, #0]
    215c:	strh	r3, [r0, #14]
  store[8]  = t_2;
    215e:	ldr	r3, [pc, #80]	; (21b0 <saveParameters()+0x84>)
    2160:	ldr	r3, [r3, #0]
    2162:	strh	r3, [r0, #16]
  store[9]  = t_3;
    2164:	ldr	r3, [pc, #76]	; (21b4 <saveParameters()+0x88>)
    2166:	ldr	r3, [r3, #0]
    2168:	strh	r3, [r0, #18]
  store[10] = t_4;
    216a:	ldr	r3, [pc, #76]	; (21b8 <saveParameters()+0x8c>)
    216c:	ldr	r3, [r3, #0]
    216e:	strh	r3, [r0, #20]
  store[11] = fsamp/1000;
    2170:	ldr	r3, [pc, #72]	; (21bc <saveParameters()+0x90>)
    2172:	ldr	r3, [r3, #0]
    2174:	sdiv	r3, r3, r2
    2178:	strh	r3, [r0, #22]
  store[12] = again;
    217a:	ldr	r3, [pc, #68]	; (21c0 <saveParameters()+0x94>)
    217c:	ldrh	r3, [r3, #0]
    217e:	strh	r3, [r0, #24]
  store[13] = dgain;
    2180:	ldr	r3, [pc, #64]	; (21c4 <saveParameters()+0x98>)
    2182:	ldrh	r3, [r3, #0]
    2184:	strh	r3, [r0, #26]
  store[14] = 0;
    2186:	movs	r3, #0
    2188:	strh	r3, [r0, #28]
  store[15] = 0;
    218a:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    218c:	b.w	211c <storeConfig(unsigned short*, int)>
    2190:	.word	0x200022ac
    2194:	.word	0x200213a0
    2198:	.word	0x200022b0
    219c:	.word	0x20021380
    21a0:	.word	0x20021384
    21a4:	.word	0x200213ca
    21a8:	.word	0x2002146e
    21ac:	.word	0x2002137c
    21b0:	.word	0x200022a0
    21b4:	.word	0x200022a4
    21b8:	.word	0x200022a8
    21bc:	.word	0x20002290
    21c0:	.word	0x200022b8
    21c4:	.word	0x200213c4

000021c8 <menu1(short)>:
{   // have ':'
    21c8:	push	{r4, lr}
    21ca:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    21cc:	bl	a2b8 <usb_serial_available>
    while(!Serial.available()) ;
    21d0:	cmp	r0, #0
    21d2:	beq.n	21cc <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21d4:	bl	a32c <usb_serial_getchar>
    ch=Serial.read();
    21d8:	uxtb	r3, r0
    if(ch=='w') 
    21da:	cmp	r3, #119	; 0x77
    21dc:	bne.n	21ee <menu1(short)+0x26>
    { Serial.println("Save parameters");
    21de:	ldr	r1, [pc, #36]	; (2204 <menu1(short)+0x3c>)
    21e0:	ldr	r0, [pc, #36]	; (2208 <menu1(short)+0x40>)
    21e2:	bl	1f00 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    21e6:	bl	212c <saveParameters()>
}
    21ea:	mov	r0, r4
    21ec:	pop	{r4, pc}
    else if(ch=='m') // control monitor (needed for gui)
    21ee:	cmp	r3, #109	; 0x6d
    21f0:	bne.n	21fa <menu1(short)+0x32>
      menuGetInt16((int16_t *)&monitor);
    21f2:	ldr	r0, [pc, #24]	; (220c <menu1(short)+0x44>)
    21f4:	bl	1f68 <menuGetInt16(short*) [clone .isra.0]>
    21f8:	b.n	21ea <menu1(short)+0x22>
    else if(ch=='c') // transfer internal rtc to external rtc
    21fa:	cmp	r3, #99	; 0x63
    21fc:	bne.n	21ea <menu1(short)+0x22>
    { rtcXferTime();
    21fe:	bl	3846 <rtcXferTime()>
    2202:	b.n	21ea <menu1(short)+0x22>
    2204:	.word	0x20000e95
    2208:	.word	0x20001cec
    220c:	.word	0x200213c8

00002210 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2210:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2214:	ldr	r4, [pc, #228]	; (22fc <loadParameters()+0xec>)
    2216:	movs	r1, #16
    2218:	ldr.w	sl, [pc, #264]	; 2324 <loadParameters()+0x114>
    221c:	mov	r0, r4
    221e:	ldr.w	r9, [pc, #264]	; 2328 <loadParameters()+0x118>
    2222:	bl	2124 <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    2226:	ldrh	r3, [r4, #0]
    2228:	ldr.w	lr, [pc, #256]	; 232c <loadParameters()+0x11c>
    222c:	cmp	r3, #1
    222e:	ldr.w	ip, [pc, #256]	; 2330 <loadParameters()+0x120>
    2232:	ldr	r7, [pc, #204]	; (2300 <loadParameters()+0xf0>)
    2234:	ldr	r6, [pc, #204]	; (2304 <loadParameters()+0xf4>)
    2236:	ldr	r2, [pc, #208]	; (2308 <loadParameters()+0xf8>)
    2238:	ldr	r5, [pc, #208]	; (230c <loadParameters()+0xfc>)
    223a:	ldr	r0, [pc, #212]	; (2310 <loadParameters()+0x100>)
    223c:	ldr	r1, [pc, #212]	; (2314 <loadParameters()+0x104>)
    223e:	bne.n	2296 <loadParameters()+0x86>
  {
    t_acq   = store[1];
    2240:	ldrh	r3, [r4, #2]
    2242:	str.w	r3, [sl]
    t_on    = store[2];
    2246:	ldrh	r3, [r4, #4]
    2248:	str.w	r3, [r9]
    t_off   = store[3];
    224c:	ldrh	r3, [r4, #6]
    224e:	str.w	r3, [lr]
    t_rep   = store[4];
    2252:	ldrh	r3, [r4, #8]
    2254:	str.w	r3, [ip]
    proc    = store[5];
    2258:	ldrsh.w	r3, [r4, #10]
    225c:	strh	r3, [r7, #0]
    shift   = store[6];
    225e:	ldrsh.w	r3, [r4, #12]
    2262:	strh	r3, [r6, #0]
    t_1     = store[7];
    2264:	ldrh	r3, [r4, #14]
    2266:	str	r3, [r2, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    2268:	mov.w	r2, #1000	; 0x3e8
    t_2     = store[8];
    226c:	ldrh	r3, [r4, #16]
    226e:	str	r3, [r5, #0]
    t_3     = store[9];
    2270:	ldrh	r3, [r4, #18]
    2272:	str	r3, [r0, #0]
    t_4     = store[10];
    2274:	ldrh	r3, [r4, #20]
    2276:	str	r3, [r1, #0]
    fsamp   = store[11]*1000;
    2278:	ldrh	r3, [r4, #22]
    227a:	muls	r3, r2
    227c:	ldr	r2, [pc, #152]	; (2318 <loadParameters()+0x108>)
    227e:	str	r3, [r2, #0]
    again   = store[12];
    2280:	ldrsh.w	r2, [r4, #24]
    2284:	ldr	r3, [pc, #148]	; (231c <loadParameters()+0x10c>)
    2286:	strh	r2, [r3, #0]
    dgain   = store[13];
    2288:	ldrsh.w	r2, [r4, #26]
    228c:	ldr	r3, [pc, #144]	; (2320 <loadParameters()+0x110>)
    228e:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    2290:	ldr	r0, [pc, #104]	; (22fc <loadParameters()+0xec>)
    2292:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    2296:	mov.w	r8, #20
    store[0]  = 0;
    229a:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    229c:	str.w	r8, [sl]
    22a0:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    22a4:	mov.w	r8, #60	; 0x3c
    store[0]  = 0;
    22a8:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    22aa:	str.w	r8, [r9]
    store[3]  = t_off    = T_OFF;
    22ae:	str.w	r3, [lr]
    store[4]  = t_rep    = T_REP;
    22b2:	str.w	r3, [ip]
    store[5]  = proc     = PROC_MODE;
    22b6:	strh	r3, [r7, #0]
    store[6]  = shift    = SHIFT;
    22b8:	strh	r3, [r6, #0]
    store[7]  = t_1      = T_1;
    22ba:	str	r3, [r2, #0]
    store[8]  = t_2      = T_2;
    22bc:	movs	r2, #12
    store[2]  = t_on     = T_ON;
    22be:	strh.w	r8, [r4, #4]
    store[8]  = t_2      = T_2;
    22c2:	str	r2, [r5, #0]
    22c4:	strh	r2, [r4, #16]
    store[9]  = t_3      = T_3;
    22c6:	str	r2, [r0, #0]
    22c8:	strh	r2, [r4, #18]
    store[10] = t_4      = T_4;
    22ca:	movs	r2, #24
    store[3]  = t_off    = T_OFF;
    22cc:	strh	r3, [r4, #6]
    store[10] = t_4      = T_4;
    22ce:	str	r2, [r1, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    22d0:	movw	r1, #48000	; 0xbb80
    store[10] = t_4      = T_4;
    22d4:	strh	r2, [r4, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    22d6:	ldr	r2, [pc, #64]	; (2318 <loadParameters()+0x108>)
    store[4]  = t_rep    = T_REP;
    22d8:	strh	r3, [r4, #8]
    store[11] = (fsamp   = FSAMP)/1000; 
    22da:	str	r1, [r2, #0]
    22dc:	movs	r2, #48	; 0x30
    store[12] = again    = AGAIN;
    22de:	ldr	r1, [pc, #60]	; (231c <loadParameters()+0x10c>)
    store[11] = (fsamp   = FSAMP)/1000; 
    22e0:	strh	r2, [r4, #22]
    store[12] = again    = AGAIN;
    22e2:	movs	r2, #10
    store[5]  = proc     = PROC_MODE;
    22e4:	strh	r3, [r4, #10]
    store[12] = again    = AGAIN;
    22e6:	strh	r2, [r1, #0]
    22e8:	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    22ea:	ldr	r2, [pc, #52]	; (2320 <loadParameters()+0x110>)
    store[6]  = shift    = SHIFT;
    22ec:	strh	r3, [r4, #12]
    store[7]  = t_1      = T_1;
    22ee:	strh	r3, [r4, #14]
    store[13] = dgain    = DGAIN;
    22f0:	strh	r3, [r2, #0]
    22f2:	strh	r3, [r4, #26]
    store[14] = 0;
    22f4:	strh	r3, [r4, #28]
    store[15] = 0; 
    22f6:	strh	r3, [r4, #30]
    22f8:	b.n	2290 <loadParameters()+0x80>
    22fa:	nop
    22fc:	.word	0x200213a0
    2300:	.word	0x200213ca
    2304:	.word	0x2002146e
    2308:	.word	0x2002137c
    230c:	.word	0x200022a0
    2310:	.word	0x200022a4
    2314:	.word	0x200022a8
    2318:	.word	0x20002290
    231c:	.word	0x200022b8
    2320:	.word	0x200213c4
    2324:	.word	0x200022ac
    2328:	.word	0x200022b0
    232c:	.word	0x20021380
    2330:	.word	0x20021384

00002334 <menu2()>:
{   // have '?'
    2334:	push	{r4, lr}
    2336:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    2338:	bl	a2b8 <usb_serial_available>
    while(!Serial.available()) ;
    233c:	cmp	r0, #0
    233e:	beq.n	2338 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2340:	bl	a32c <usb_serial_getchar>
    ch=Serial.read();
    2344:	uxtb	r0, r0
    if(ch=='p') // get parameters
    2346:	cmp	r0, #112	; 0x70
    2348:	bne.w	2466 <menu2()+0x132>
      Serial.println();
    234c:	ldr	r0, [pc, #588]	; (259c <menu2()+0x268>)
    234e:	bl	c258 <Print::println()>
      Serial.println(version);
    2352:	ldr	r1, [pc, #588]	; (25a0 <menu2()+0x26c>)
    2354:	ldr	r0, [pc, #580]	; (259c <menu2()+0x268>)
    2356:	bl	1f00 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    235a:	add	r0, sp, #24
    235c:	bl	383e <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2360:	ldrsb.w	r3, [sp, #28]
    2364:	ldrsh.w	r2, [sp, #24]
    2368:	str	r3, [sp, #16]
    236a:	ldrsb.w	r3, [sp, #31]
    236e:	ldr	r1, [pc, #564]	; (25a4 <menu2()+0x270>)
    2370:	str	r3, [sp, #12]
    2372:	ldrsb.w	r3, [sp, #30]
    2376:	ldr	r0, [pc, #548]	; (259c <menu2()+0x268>)
    2378:	str	r3, [sp, #8]
    237a:	ldrsb.w	r3, [sp, #29]
    237e:	str	r3, [sp, #4]
    2380:	ldrsb.w	r3, [sp, #27]
    2384:	str	r3, [sp, #0]
    2386:	ldrsb.w	r3, [sp, #26]
    238a:	bl	c290 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    238e:	bl	3848 <rtcGetTimestamp()>
    2392:	mov	r1, r0
    2394:	ldr	r0, [pc, #516]	; (259c <menu2()+0x268>)
    2396:	bl	1f00 <Print::println(char const*) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    239a:	ldr	r1, [pc, #524]	; (25a8 <menu2()+0x274>)
    239c:	ldr	r0, [pc, #508]	; (259c <menu2()+0x268>)
    239e:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    23a2:	ldr	r3, [pc, #520]	; (25ac <menu2()+0x278>)
    23a4:	ldr	r0, [pc, #500]	; (259c <menu2()+0x268>)
    23a6:	ldr	r1, [r3, #0]
    23a8:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    23ac:	ldr	r1, [pc, #512]	; (25b0 <menu2()+0x27c>)
    23ae:	ldr	r0, [pc, #492]	; (259c <menu2()+0x268>)
    23b0:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    23b4:	ldr	r3, [pc, #508]	; (25b4 <menu2()+0x280>)
    23b6:	ldr	r0, [pc, #484]	; (259c <menu2()+0x268>)
    23b8:	ldr	r1, [r3, #0]
    23ba:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23be:	ldr	r1, [pc, #504]	; (25b8 <menu2()+0x284>)
    23c0:	ldr	r0, [pc, #472]	; (259c <menu2()+0x268>)
    23c2:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    23c6:	ldr	r3, [pc, #500]	; (25bc <menu2()+0x288>)
    23c8:	ldr	r0, [pc, #464]	; (259c <menu2()+0x268>)
    23ca:	ldr	r1, [r3, #0]
    23cc:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    23d0:	ldr	r1, [pc, #492]	; (25c0 <menu2()+0x28c>)
    23d2:	ldr	r0, [pc, #456]	; (259c <menu2()+0x268>)
    23d4:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    23d8:	ldr	r3, [pc, #488]	; (25c4 <menu2()+0x290>)
	size_t println(long n)				{ return print(n) + println(); }
    23da:	ldr	r0, [pc, #448]	; (259c <menu2()+0x268>)
    23dc:	ldr	r1, [r3, #0]
    23de:	bl	c246 <Print::print(long)>
    23e2:	ldr	r0, [pc, #440]	; (259c <menu2()+0x268>)
    23e4:	bl	c258 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    23e8:	ldr	r1, [pc, #476]	; (25c8 <menu2()+0x294>)
    23ea:	ldr	r0, [pc, #432]	; (259c <menu2()+0x268>)
    23ec:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    23f0:	ldr	r3, [pc, #472]	; (25cc <menu2()+0x298>)
    23f2:	ldr	r0, [pc, #424]	; (259c <menu2()+0x268>)
    23f4:	ldrh	r1, [r3, #0]
    23f6:	sxth	r1, r1
    23f8:	bl	1eb0 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    23fc:	ldr	r1, [pc, #464]	; (25d0 <menu2()+0x29c>)
    23fe:	ldr	r0, [pc, #412]	; (259c <menu2()+0x268>)
    2400:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2404:	ldr	r3, [pc, #460]	; (25d4 <menu2()+0x2a0>)
    2406:	ldr	r0, [pc, #404]	; (259c <menu2()+0x268>)
    2408:	ldrh	r1, [r3, #0]
    240a:	sxth	r1, r1
    240c:	bl	1eb0 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2410:	ldr	r1, [pc, #452]	; (25d8 <menu2()+0x2a4>)
    2412:	ldr	r0, [pc, #392]	; (259c <menu2()+0x268>)
    2414:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2418:	ldr	r3, [pc, #448]	; (25dc <menu2()+0x2a8>)
    241a:	ldr	r0, [pc, #384]	; (259c <menu2()+0x268>)
    241c:	ldrh	r1, [r3, #0]
    241e:	sxth	r1, r1
    2420:	bl	1eb0 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    2424:	ldr	r1, [pc, #440]	; (25e0 <menu2()+0x2ac>)
    2426:	ldr	r0, [pc, #372]	; (259c <menu2()+0x268>)
    2428:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    242c:	ldr	r3, [pc, #436]	; (25e4 <menu2()+0x2b0>)
    242e:	ldr	r0, [pc, #364]	; (259c <menu2()+0x268>)
    2430:	ldr	r1, [r3, #0]
    2432:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    2436:	ldr	r1, [pc, #432]	; (25e8 <menu2()+0x2b4>)
    2438:	ldr	r0, [pc, #352]	; (259c <menu2()+0x268>)
    243a:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    243e:	ldr	r3, [pc, #428]	; (25ec <menu2()+0x2b8>)
    2440:	ldr	r0, [pc, #344]	; (259c <menu2()+0x268>)
    2442:	ldr	r1, [r3, #0]
    2444:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    2448:	ldr	r1, [pc, #420]	; (25f0 <menu2()+0x2bc>)
    244a:	ldr	r0, [pc, #336]	; (259c <menu2()+0x268>)
    244c:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2450:	ldr	r3, [pc, #416]	; (25f4 <menu2()+0x2c0>)
    2452:	ldr	r0, [pc, #328]	; (259c <menu2()+0x268>)
    2454:	ldr	r1, [r3, #0]
    2456:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    245a:	ldr	r1, [pc, #412]	; (25f8 <menu2()+0x2c4>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    245c:	ldr	r0, [pc, #316]	; (259c <menu2()+0x268>)
    245e:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2462:	ldr	r3, [pc, #408]	; (25fc <menu2()+0x2c8>)
    2464:	b.n	24f0 <menu2()+0x1bc>
    else if(ch=='d') // get date
    2466:	cmp	r0, #52	; 0x34
    2468:	bhi.n	249c <menu2()+0x168>
    246a:	cmp	r0, #48	; 0x30
    246c:	bls.n	24a4 <menu2()+0x170>
    246e:	subs	r0, #50	; 0x32
    2470:	cmp	r0, #2
    2472:	bhi.n	255a <menu2()+0x226>
    2474:	tbb	[pc, r0]
    2478:	.short	0x7d77
    247a:	.byte	0x83
    247b:	.byte	0x00
    247c:	cmp	r0, #22
    247e:	bhi.n	24a4 <menu2()+0x170>
    2480:	tbb	[pc, r0]
    2484:	.word	0x165f1031
    2488:	.word	0x10654710
    248c:	.word	0x10101010
    2490:	.word	0x103b1010
    2494:	.word	0x25544110
    2498:	.short	0x1010
    249a:	.byte	0x7f
    249b:	.byte	0x00
    249c:	subs	r0, #97	; 0x61
    249e:	uxtb	r3, r0
    24a0:	cmp	r3, #22
    24a2:	bls.n	247c <menu2()+0x148>
        virtual int available() { return usb_serial_available(); }
    24a4:	bl	a2b8 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    24a8:	cmp	r0, #0
    24aa:	bne.n	2594 <menu2()+0x260>
}
    24ac:	add	sp, #32
    24ae:	pop	{r4, pc}
      rtc_get_datetime(&t);
    24b0:	add	r0, sp, #24
    24b2:	bl	383e <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    24b6:	ldrsb.w	r3, [sp, #27]
    24ba:	ldrsh.w	r2, [sp, #24]
    24be:	str	r3, [sp, #0]
    24c0:	ldr	r1, [pc, #316]	; (2600 <menu2()+0x2cc>)
    24c2:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    24c6:	ldr	r0, [pc, #212]	; (259c <menu2()+0x268>)
    24c8:	bl	c290 <Print::printf(char const*, ...)>
    24cc:	b.n	24a4 <menu2()+0x170>
      rtc_get_datetime(&t);
    24ce:	add	r0, sp, #24
    24d0:	bl	383e <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    24d4:	ldrsb.w	r3, [sp, #31]
    24d8:	ldrsb.w	r2, [sp, #29]
    24dc:	str	r3, [sp, #0]
    24de:	ldr	r1, [pc, #292]	; (2604 <menu2()+0x2d0>)
    24e0:	ldrsb.w	r3, [sp, #30]
    24e4:	b.n	24c6 <menu2()+0x192>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    24e6:	ldr	r1, [pc, #192]	; (25a8 <menu2()+0x274>)
    24e8:	ldr	r0, [pc, #176]	; (259c <menu2()+0x268>)
    24ea:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    24ee:	ldr	r3, [pc, #188]	; (25ac <menu2()+0x278>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    24f0:	ldr	r1, [r3, #0]
    24f2:	ldr	r0, [pc, #168]	; (259c <menu2()+0x268>)
    24f4:	bl	1ec2 <Print::println(unsigned long) [clone .isra.0]>
    24f8:	b.n	24a4 <menu2()+0x170>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    24fa:	ldr	r1, [pc, #268]	; (2608 <menu2()+0x2d4>)
    24fc:	ldr	r0, [pc, #156]	; (259c <menu2()+0x268>)
    24fe:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2502:	ldr	r3, [pc, #176]	; (25b4 <menu2()+0x280>)
    2504:	b.n	24f0 <menu2()+0x1bc>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    2506:	ldr	r1, [pc, #176]	; (25b8 <menu2()+0x284>)
    2508:	ldr	r0, [pc, #144]	; (259c <menu2()+0x268>)
    250a:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    250e:	ldr	r3, [pc, #172]	; (25bc <menu2()+0x288>)
    2510:	b.n	24f0 <menu2()+0x1bc>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2512:	ldr	r1, [pc, #172]	; (25c0 <menu2()+0x28c>)
    2514:	ldr	r0, [pc, #132]	; (259c <menu2()+0x268>)
    2516:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    251a:	ldr	r3, [pc, #168]	; (25c4 <menu2()+0x290>)
    251c:	ldr	r0, [pc, #124]	; (259c <menu2()+0x268>)
    251e:	ldr	r1, [r3, #0]
    2520:	bl	c246 <Print::print(long)>
    2524:	ldr	r0, [pc, #116]	; (259c <menu2()+0x268>)
    2526:	bl	c258 <Print::println()>
    252a:	b.n	24a4 <menu2()+0x170>
      Serial.print("shift (s) = "); Serial.println(shift);
    252c:	ldr	r1, [pc, #152]	; (25c8 <menu2()+0x294>)
    252e:	ldr	r0, [pc, #108]	; (259c <menu2()+0x268>)
    2530:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2534:	ldr	r3, [pc, #148]	; (25cc <menu2()+0x298>)
      Serial.print("again (g) = "); Serial.println(again);
    2536:	ldrh	r1, [r3, #0]
    2538:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    253a:	ldr	r0, [pc, #96]	; (259c <menu2()+0x268>)
    253c:	bl	1eb0 <Print::println(int) [clone .isra.0]>
    2540:	b.n	24a4 <menu2()+0x170>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2542:	ldr	r1, [pc, #140]	; (25d0 <menu2()+0x29c>)
    2544:	ldr	r0, [pc, #84]	; (259c <menu2()+0x268>)
    2546:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    254a:	ldr	r3, [pc, #136]	; (25d4 <menu2()+0x2a0>)
    254c:	b.n	2536 <menu2()+0x202>
      Serial.print("again (g) = "); Serial.println(again);
    254e:	ldr	r1, [pc, #136]	; (25d8 <menu2()+0x2a4>)
    2550:	ldr	r0, [pc, #72]	; (259c <menu2()+0x268>)
    2552:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2556:	ldr	r3, [pc, #132]	; (25dc <menu2()+0x2a8>)
    2558:	b.n	2536 <menu2()+0x202>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    255a:	ldr	r1, [pc, #176]	; (260c <menu2()+0x2d8>)
    255c:	ldr	r0, [pc, #60]	; (259c <menu2()+0x268>)
    255e:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2562:	ldr	r3, [pc, #128]	; (25e4 <menu2()+0x2b0>)
    2564:	b.n	24f0 <menu2()+0x1bc>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    2566:	ldr	r1, [pc, #168]	; (2610 <menu2()+0x2dc>)
    2568:	ldr	r0, [pc, #48]	; (259c <menu2()+0x268>)
    256a:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    256e:	ldr	r3, [pc, #124]	; (25ec <menu2()+0x2b8>)
    2570:	b.n	24f0 <menu2()+0x1bc>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    2572:	ldr	r1, [pc, #160]	; (2614 <menu2()+0x2e0>)
    2574:	ldr	r0, [pc, #36]	; (259c <menu2()+0x268>)
    2576:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    257a:	ldr	r3, [pc, #120]	; (25f4 <menu2()+0x2c0>)
    257c:	b.n	24f0 <menu2()+0x1bc>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    257e:	ldr	r1, [pc, #152]	; (2618 <menu2()+0x2e4>)
    2580:	b.n	245c <menu2()+0x128>
    { uint16_t *params=loadParameters();
    2582:	bl	2210 <loadParameters()>
    2586:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2588:	ldr	r1, [pc, #144]	; (261c <menu2()+0x2e8>)
    258a:	ldr	r0, [pc, #16]	; (259c <menu2()+0x268>)
    258c:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2590:	ldrh	r1, [r4, #0]
    2592:	b.n	253a <menu2()+0x206>
        virtual int read() { return usb_serial_getchar(); }
    2594:	bl	a32c <usb_serial_getchar>
    2598:	b.n	24a4 <menu2()+0x170>
    259a:	nop
    259c:	.word	0x20001cec
    25a0:	.word	0x20001088
    25a4:	.word	0x20000ea5
    25a8:	.word	0x20000ecb
    25ac:	.word	0x200022ac
    25b0:	.word	0x20000ed8
    25b4:	.word	0x200022b0
    25b8:	.word	0x20000ee5
    25bc:	.word	0x20021384
    25c0:	.word	0x20000ef2
    25c4:	.word	0x20002290
    25c8:	.word	0x20000eff
    25cc:	.word	0x2002146e
    25d0:	.word	0x20000f0c
    25d4:	.word	0x200213ca
    25d8:	.word	0x20000f19
    25dc:	.word	0x200022b8
    25e0:	.word	0x20000f26
    25e4:	.word	0x2002137c
    25e8:	.word	0x20000f33
    25ec:	.word	0x200022a0
    25f0:	.word	0x20000f40
    25f4:	.word	0x200022a4
    25f8:	.word	0x20000f4d
    25fc:	.word	0x200022a8
    2600:	.word	0x20000f5a
    2604:	.word	0x20000f74
    2608:	.word	0x20000f8f
    260c:	.word	0x20000f9c
    2610:	.word	0x20000fa8
    2614:	.word	0x20000fb4
    2618:	.word	0x20000fc0
    261c:	.word	0x20000fcc

00002620 <menu(short)>:
{
    2620:	push	{r3, r4, r5, lr}
    2622:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2624:	bl	a2b8 <usb_serial_available>
  if(Serial.available())
    2628:	cmp	r0, #0
    262a:	beq.n	26e8 <menu(short)+0xc8>
        virtual int read() { return usb_serial_getchar(); }
    262c:	bl	a32c <usb_serial_getchar>
    char ch=Serial.read();
    2630:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2632:	cmp	r1, #115	; 0x73
    2634:	bne.n	2648 <menu(short)+0x28>
    2636:	movs	r4, #0
    2638:	ldr	r1, [pc, #176]	; (26ec <menu(short)+0xcc>)
    263a:	ldr	r0, [pc, #180]	; (26f0 <menu(short)+0xd0>)
    263c:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    2640:	bl	3708 <adcStatus()>
	size_t print(char c)				{ return write((uint8_t)c); }
    2644:	ldr	r5, [pc, #168]	; (26f0 <menu(short)+0xd0>)
    2646:	b.n	26e0 <menu(short)+0xc0>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2648:	cmp	r1, #101	; 0x65
    264a:	beq.n	26a4 <menu(short)+0x84>
    264c:	bhi.n	267a <menu(short)+0x5a>
    264e:	cmp	r1, #63	; 0x3f
    2650:	beq.n	26c6 <menu(short)+0xa6>
    2652:	bhi.n	2670 <menu(short)+0x50>
    2654:	cmp	r1, #33	; 0x21
    2656:	beq.n	26cc <menu(short)+0xac>
    2658:	cmp	r1, #58	; 0x3a
    265a:	beq.n	26bc <menu(short)+0x9c>
    265c:	ldr	r5, [pc, #144]	; (26f0 <menu(short)+0xd0>)
    265e:	ldr	r3, [r5, #0]
    2660:	mov	r0, r5
    2662:	ldr	r3, [r3, #0]
    2664:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2666:	ldr	r1, [pc, #140]	; (26f4 <menu(short)+0xd4>)
    2668:	mov	r0, r5
    266a:	bl	1f00 <Print::println(char const*) [clone .isra.0]>
    266e:	b.n	2644 <menu(short)+0x24>
    2670:	cmp	r1, #98	; 0x62
    2672:	bne.n	265c <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    2674:	bl	248 <reboot()>
    2678:	b.n	2644 <menu(short)+0x24>
    267a:	cmp	r1, #114	; 0x72
    267c:	beq.n	26b0 <menu(short)+0x90>
    267e:	cmp	r1, #120	; 0x78
    2680:	beq.n	26b6 <menu(short)+0x96>
    2682:	cmp	r1, #109	; 0x6d
    2684:	bne.n	265c <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    2686:	ldr	r5, [pc, #112]	; (26f8 <menu(short)+0xd8>)
    2688:	ldr	r1, [pc, #112]	; (26fc <menu(short)+0xdc>)
    268a:	ldrh	r3, [r5, #0]
    268c:	ldr	r0, [pc, #96]	; (26f0 <menu(short)+0xd0>)
    268e:	rsb	r3, r3, #1
    2692:	strh	r3, [r5, #0]
    2694:	bl	1efc <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2698:	ldrsh.w	r1, [r5]
    269c:	ldr	r0, [pc, #80]	; (26f0 <menu(short)+0xd0>)
    269e:	bl	c246 <Print::print(long)>
    26a2:	b.n	2644 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    26a4:	ldr	r1, [pc, #88]	; (2700 <menu(short)+0xe0>)
    26a6:	movs	r4, #5
    26a8:	ldr	r0, [pc, #68]	; (26f0 <menu(short)+0xd0>)
    26aa:	bl	1efc <Print::print(char const*) [clone .isra.0]>
    26ae:	b.n	2644 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    26b0:	bl	218 <resetUSB()>
    26b4:	b.n	2644 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    26b6:	bl	2d3c <powerDown()>
    26ba:	b.n	2644 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    26bc:	mov	r0, r4
    26be:	bl	21c8 <menu1(short)>
    26c2:	mov	r4, r0
    26c4:	b.n	2644 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    26c6:	bl	2334 <menu2()>
    26ca:	b.n	2644 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    26cc:	bl	1f84 <menu3()>
    26d0:	b.n	2644 <menu(short)+0x24>
    26d2:	bl	a32c <usb_serial_getchar>
	size_t print(char c)				{ return write((uint8_t)c); }
    26d6:	ldr	r3, [r5, #0]
    26d8:	uxtb	r1, r0
    26da:	ldr	r0, [pc, #20]	; (26f0 <menu(short)+0xd0>)
    26dc:	ldr	r3, [r3, #0]
    26de:	blx	r3
        virtual int available() { return usb_serial_available(); }
    26e0:	bl	a2b8 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    26e4:	cmp	r0, #0
    26e6:	bne.n	26d2 <menu(short)+0xb2>
}
    26e8:	mov	r0, r4
    26ea:	pop	{r3, r4, r5, pc}
    26ec:	.word	0x20000e3a
    26f0:	.word	0x20001cec
    26f4:	.word	0x20000e54
    26f8:	.word	0x200213c8
    26fc:	.word	0x20000e49
    2700:	.word	0x20000e42

00002704 <getStore()>:

uint16_t *getStore(void) {return store;}
    2704:	ldr	r0, [pc, #0]	; (2708 <getStore()+0x4>)
    2706:	bx	lr
    2708:	.word	0x200213a0

0000270c <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    270c:	ldr	r3, [pc, #16]	; (2720 <getDataCount()+0x14>)
    270e:	ldr	r0, [r3, #0]
    2710:	ldr	r3, [pc, #16]	; (2724 <getDataCount()+0x18>)
    2712:	ldr	r3, [r3, #0]
    2714:	subs	r0, r0, r3
    2716:	it	mi
    2718:	addmi.w	r0, r0, #9216	; 0x2400
    271c:	uxth	r0, r0
    271e:	bx	lr
    2720:	.word	0x200201e8
    2724:	.word	0x200201e4

00002728 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2728:	ldr	r3, [pc, #4]	; (2730 <queue_isBusy()+0x8>)
    272a:	ldr	r0, [r3, #0]
    272c:	bx	lr
    272e:	nop
    2730:	.word	0x20013fd4

00002734 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2734:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    2736:	movs	r4, #1
    2738:	ldr	r5, [pc, #72]	; (2784 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    273a:	ldr	r6, [pc, #76]	; (2788 <pushData(unsigned long*)+0x54>)
    273c:	mov.w	r7, #9216	; 0x2400
    queue_busy=1;
    2740:	str	r4, [r5, #0]
  {
    2742:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2744:	ldr	r3, [r6, #0]
    2746:	ldr	r2, [pc, #68]	; (278c <pushData(unsigned long*)+0x58>)
    2748:	add	r3, r4
    274a:	ldr	r2, [r2, #0]
    274c:	sdiv	r0, r3, r7
    2750:	mls	r3, r7, r0, r3
    2754:	cmp	r3, r2
    2756:	bne.n	275e <pushData(unsigned long*)+0x2a>
    2758:	movs	r0, #0
    275a:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    275c:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    275e:	ldr	r3, [pc, #48]	; (2790 <pushData(unsigned long*)+0x5c>)
    2760:	mov.w	r2, #512	; 0x200
    2764:	ldr	r0, [r6, #0]
    2766:	add.w	r0, r3, r0, lsl #9
    276a:	bl	9dd0 <memcpy>
    tail = (tail+1)%MAXBUF;
    276e:	ldr	r3, [r6, #0]
    return 1; // signal success.
    2770:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    2772:	adds	r3, #1
    2774:	sdiv	r2, r3, r7
    2778:	mls	r3, r7, r2, r3
    277c:	str	r3, [r6, #0]
    queue_busy=0;
    277e:	movs	r3, #0
    2780:	str	r3, [r5, #0]
    return 1; // signal success.
    2782:	b.n	275c <pushData(unsigned long*)+0x28>
    2784:	.word	0x20013fd4
    2788:	.word	0x200201e8
    278c:	.word	0x200201e4
    2790:	.word	0x70000000

00002794 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    2794:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2796:	ldr	r3, [pc, #64]	; (27d8 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    2798:	movs	r4, #1
    279a:	ldr	r6, [pc, #64]	; (27dc <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    279c:	ldr	r5, [pc, #64]	; (27e0 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    279e:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27a0:	ldr	r2, [r5, #0]
    27a2:	ldr	r3, [r3, #0]
    27a4:	cmp	r2, r3
    27a6:	bne.n	27ae <pullData(unsigned long*)+0x1a>
    27a8:	movs	r0, #0
    27aa:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    27ac:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    27ae:	ldr	r3, [pc, #52]	; (27e4 <pullData(unsigned long*)+0x50>)
    27b0:	mov.w	r2, #512	; 0x200
    27b4:	ldr	r1, [r5, #0]
    27b6:	add.w	r1, r3, r1, lsl #9
    27ba:	bl	9dd0 <memcpy>
    head = (head+1)%MAXBUF;
    27be:	ldr	r3, [r5, #0]
    27c0:	mov.w	r2, #9216	; 0x2400
    return 1; // signal success.
    27c4:	mov	r0, r4
    head = (head+1)%MAXBUF;
    27c6:	adds	r3, #1
    27c8:	sdiv	r1, r3, r2
    27cc:	mls	r3, r2, r1, r3
    27d0:	str	r3, [r5, #0]
    queue_busy=0;
    27d2:	movs	r3, #0
    27d4:	str	r3, [r6, #0]
    return 1; // signal success.
    27d6:	b.n	27ac <pullData(unsigned long*)+0x18>
    27d8:	.word	0x200201e8
    27dc:	.word	0x20013fd4
    27e0:	.word	0x200201e4
    27e4:	.word	0x70000000

000027e8 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    27e8:	push	{r0, r1, r4, r5, r6, lr}
    27ea:	mov	r6, r0
    rtc_get_datetime(&t);
    27ec:	mov	r0, sp
{
    27ee:	mov	r5, r2
    27f0:	mov	r4, r1
    rtc_get_datetime(&t);
    27f2:	bl	383e <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    27f6:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    27fa:	ldrsb.w	r3, [sp, #3]
    27fe:	subw	r2, r2, #1980	; 0x7bc
    2802:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2804:	cmp	r2, #127	; 0x7f
    2806:	bhi.n	2852 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2808:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    280c:	cmp	r1, #12
    280e:	bhi.n	2852 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2810:	uxtb	r3, r3
    2812:	cmp	r3, #31
    2814:	bhi.n	2852 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2816:	orr.w	r3, r3, r1, lsl #5
    281a:	orr.w	r3, r3, r2, lsl #9
    281e:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2820:	ldrb.w	r1, [sp, #5]
    2824:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2828:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    282a:	strh	r3, [r6, #0]
    282c:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    282e:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2832:	cmp	r3, #59	; 0x3b
    2834:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2836:	uxtb	r2, r2
    2838:	cmp	r2, #59	; 0x3b
    283a:	bhi.n	2856 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    283c:	lsls	r3, r3, #5
    283e:	orr.w	r3, r3, r1, lsl #11
    2842:	orr.w	r3, r3, r2, lsr #1
    2846:	uxth	r3, r3
    2848:	strh	r3, [r4, #0]
    *ms10 = 0;
    284a:	movs	r3, #0
    284c:	strb	r3, [r5, #0]
}
    284e:	add	sp, #8
    2850:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2852:	movs	r3, #0
    2854:	b.n	2820 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2856:	movs	r3, #0
    2858:	b.n	2848 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000285a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    285a:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    285c:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    285e:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2860:	cbz	r5, 286c <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2862:	cbnz	r3, 2876 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2864:	mov	r0, r5
  }
    2866:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2868:	b.w	6e22 <FatFile::seekSet(unsigned long)>
    286c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    286e:	cbz	r0, 2876 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    2870:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    2872:	b.w	5798 <ExFatFile::seekSet(unsigned long long)>
  }
    2876:	pop	{r4, r5}
    2878:	bx	lr

0000287a <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    287a:	movs	r3, #0
    287c:	movs	r2, #10
    287e:	b.w	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00002882 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2882:	push	{r0, r1, r4, lr}
    2884:	mov	r4, r0
    2886:	cbz	r1, 28a2 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    2888:	mov	r0, r1
    288a:	str	r1, [sp, #4]
    288c:	bl	e900 <strlen>
    2890:	ldr	r3, [r4, #0]
    2892:	mov	r2, r0
    2894:	ldr	r1, [sp, #4]
    2896:	ldr	r3, [r3, #4]
    2898:	mov	r0, r4
    289a:	add	sp, #8
    289c:	ldmia.w	sp!, {r4, lr}
    28a0:	bx	r3
    28a2:	add	sp, #8
    28a4:	pop	{r4, pc}

000028a6 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    28a6:	b.w	2882 <Print::write(char const*) [clone .isra.0]>

000028aa <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    28aa:	push	{r4, lr}
    28ac:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    28ae:	bl	2882 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    28b2:	mov	r0, r4
    28b4:	ldmia.w	sp!, {r4, lr}
    28b8:	b.w	c258 <Print::println()>

000028bc <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    28bc:	ldr	r3, [r0, #56]	; 0x38
    28be:	cbz	r3, 28c6 <FsBaseFile::sync()+0xa>
    28c0:	mov	r0, r3
    28c2:	b.w	706c <FatFile::sync()>
    28c6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    28c8:	cbz	r0, 28ce <FsBaseFile::sync()+0x12>
    28ca:	b.w	63cc <ExFatFile::sync()>
  }
    28ce:	bx	lr

000028d0 <timeStamp()>:
{
    28d0:	push	{r4, lr}
    28d2:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    28d4:	ldr	r4, [pc, #52]	; (290c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    28d6:	add	r0, sp, #16
    28d8:	bl	383e <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    28dc:	ldrsb.w	r3, [sp, #23]
    28e0:	ldrsh.w	r2, [sp, #16]
    28e4:	mov	r0, r4
    28e6:	str	r3, [sp, #12]
    28e8:	ldrsb.w	r3, [sp, #22]
    28ec:	ldr	r1, [pc, #32]	; (2910 <timeStamp()+0x40>)
    28ee:	str	r3, [sp, #8]
    28f0:	ldrsb.w	r3, [sp, #21]
    28f4:	str	r3, [sp, #4]
    28f6:	ldrsb.w	r3, [sp, #19]
    28fa:	str	r3, [sp, #0]
    28fc:	ldrsb.w	r3, [sp, #18]
    2900:	bl	e46c <siprintf>
}
    2904:	mov	r0, r4
    2906:	add	sp, #24
    2908:	pop	{r4, pc}
    290a:	nop
    290c:	.word	0x2002153e
    2910:	.word	0x20000cd7

00002914 <headerInit(long, long, long, int)>:
{
    2914:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2916:	ldr	r4, [pc, #196]	; (29dc <headerInit(long, long, long, int)+0xc8>)
  int nbytes=nbits/8;
    2918:	cmp	r2, #0
    291a:	str	r3, [sp, #4]
    291c:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    291e:	ldr	r3, [pc, #192]	; (29e0 <headerInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2920:	it	lt
    2922:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2924:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    2926:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    2928:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    292a:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    292e:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2930:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2932:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    2936:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2938:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    293a:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    293c:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2940:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2944:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    2946:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    294a:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    294e:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2950:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2954:	ldr	r1, [pc, #140]	; (29e4 <headerInit(long, long, long, int)+0xd0>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    2956:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    2958:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    295a:	add.w	r3, r3, #1090519040	; 0x41000000
    295e:	subw	r3, r3, #3074	; 0xc02
    2962:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    2966:	add.w	r3, r3, #218107136	; 0xd000d00
    296a:	add.w	r3, r3, #15859712	; 0xf20000
    296e:	adds	r3, #5
    2970:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2972:	mov.w	r3, #504	; 0x1f8
    2976:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    2978:	movs	r3, #16
    297a:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    297c:	mov.w	r3, #460	; 0x1cc
    2980:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2982:	movs	r3, #0
    2984:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    2988:	movs	r3, #1
    298a:	strh	r3, [r4, #20]
    298c:	ldr	r3, [pc, #88]	; (29e8 <headerInit(long, long, long, int)+0xd4>)
    298e:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    2990:	bl	e84c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2994:	bl	28d0 <timeStamp()>
    2998:	mov	r1, r0
    299a:	add.w	r0, r4, #48	; 0x30
    299e:	bl	e84c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    29a2:	ldr	r2, [sp, #4]
    29a4:	ldr	r1, [pc, #68]	; (29ec <headerInit(long, long, long, int)+0xd8>)
    29a6:	add.w	r0, r4, #64	; 0x40
    29aa:	bl	e46c <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    29ae:	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    29b0:	bl	2704 <getStore()>
    29b4:	adds	r4, #80	; 0x50
    29b6:	mov	r3, r0
    29b8:	add.w	r5, r0, #32
    29bc:	ldr	r0, [r3, #0]
    29be:	adds	r3, #8
    29c0:	ldr.w	r1, [r3, #-4]
    29c4:	mov	r2, r4
    29c6:	cmp	r3, r5
    29c8:	stmia	r2!, {r0, r1}
    29ca:	mov	r4, r2
    29cc:	bne.n	29bc <headerInit(long, long, long, int)+0xa8>
  strcpy(&wav_hdr.info[68]," end");
    29ce:	ldr	r1, [pc, #32]	; (29f0 <headerInit(long, long, long, int)+0xdc>)
    29d0:	ldr	r0, [pc, #32]	; (29f4 <headerInit(long, long, long, int)+0xe0>)
    29d2:	bl	e84c <strcpy>
}
    29d6:	ldr	r0, [pc, #4]	; (29dc <headerInit(long, long, long, int)+0xc8>)
    29d8:	add	sp, #12
    29da:	pop	{r4, r5, r6, r7, pc}
    29dc:	.word	0x200203f4
    29e0:	.word	0x46464952
    29e4:	.word	0x20000cc6
    29e8:	.word	0x20021374
    29ec:	.word	0x20000ccb
    29f0:	.word	0x20000cd0
    29f4:	.word	0x20020464

000029f8 <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    29f8:	ldr	r3, [pc, #12]	; (2a08 <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    29fa:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    29fc:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2a00:	add	r2, r0
}
    2a02:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2a04:	str	r2, [r3, #4]
}
    2a06:	bx	lr
    2a08:	.word	0x200203f4

00002a0c <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2a0c:	ldr	r3, [pc, #76]	; (2a5c <writeHeader(char*)+0x50>)
    2a0e:	ldr	r2, [r3, #72]	; 0x48
{ 
    2a10:	push	{r4, r5, r6, lr}
    2a12:	mov	r6, r0
    2a14:	cbz	r2, 2a4a <writeHeader(char*)+0x3e>
    2a16:	ldr	r4, [r2, #20]
    2a18:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2a1a:	mov	r2, r4
    2a1c:	mov	r3, r5
    2a1e:	ldr	r1, [pc, #64]	; (2a60 <writeHeader(char*)+0x54>)
    2a20:	ldr	r0, [pc, #64]	; (2a64 <writeHeader(char*)+0x58>)
    2a22:	bl	c290 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2a26:	movs	r3, #0
    2a28:	movs	r2, #0
    2a2a:	ldr	r0, [pc, #60]	; (2a68 <writeHeader(char*)+0x5c>)
    2a2c:	bl	285a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2a30:	mov.w	r2, #512	; 0x200
    2a34:	mov	r1, r6
    2a36:	ldr	r0, [pc, #36]	; (2a5c <writeHeader(char*)+0x50>)
    2a38:	bl	1f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2a3c:	mov	r2, r4
    2a3e:	mov	r3, r5
    2a40:	ldr	r0, [pc, #36]	; (2a68 <writeHeader(char*)+0x5c>)
}
    2a42:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2a46:	b.w	285a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2a4a:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2a4c:	cbz	r3, 2a54 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2a4e:	ldrd	r4, r5, [r3]
    2a52:	b.n	2a1a <writeHeader(char*)+0xe>
    2a54:	mov	r4, r3
    2a56:	mov	r5, r3
    2a58:	b.n	2a1a <writeHeader(char*)+0xe>
    2a5a:	nop
    2a5c:	.word	0x20020bb8
    2a60:	.word	0x20000d6f
    2a64:	.word	0x20001cec
    2a68:	.word	0x20020bc8

00002a6c <makeHeader(long*)>:
{
    2a6c:	push	{r4, lr}
    2a6e:	sub	sp, #32
    2a70:	mov	r4, r0
    rtc_get_datetime(&t);
    2a72:	add	r0, sp, #24
    2a74:	bl	383e <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2a78:	ldrsb.w	r3, [sp, #31]
    2a7c:	ldr	r2, [pc, #124]	; (2afc <makeHeader(long*)+0x90>)
    2a7e:	mov	r0, r4
    2a80:	str	r3, [sp, #16]
    2a82:	ldrsb.w	r3, [sp, #30]
    2a86:	ldr	r1, [pc, #120]	; (2b00 <makeHeader(long*)+0x94>)
    2a88:	str	r3, [sp, #12]
    2a8a:	ldrsb.w	r3, [sp, #29]
    2a8e:	str	r3, [sp, #8]
    2a90:	ldrsb.w	r3, [sp, #27]
    2a94:	str	r3, [sp, #4]
    2a96:	ldrsb.w	r3, [sp, #26]
    2a9a:	str	r3, [sp, #0]
    2a9c:	ldrsh.w	r3, [sp, #24]
    2aa0:	bl	e46c <siprintf>
    header[5] = 20;          // SW version
    2aa4:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2aa6:	movs	r0, #1
    header[5] = 20;          // SW version
    2aa8:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2aaa:	ldr	r3, [pc, #88]	; (2b04 <makeHeader(long*)+0x98>)
    header[8] = NCHAN_ACQ;
    2aac:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    2aae:	ldr	r3, [r3, #0]
    2ab0:	str	r3, [r4, #24]
    header[7] = fsamp;
    2ab2:	ldr	r3, [pc, #84]	; (2b08 <makeHeader(long*)+0x9c>)
    2ab4:	ldr	r3, [r3, #0]
    2ab6:	str	r3, [r4, #28]
    header[9] = t_acq;
    2ab8:	ldr	r3, [pc, #80]	; (2b0c <makeHeader(long*)+0xa0>)
    2aba:	ldr	r3, [r3, #0]
    2abc:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    2abe:	ldr	r3, [pc, #80]	; (2b10 <makeHeader(long*)+0xa4>)
    2ac0:	ldr	r3, [r3, #0]
    2ac2:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2ac4:	ldr	r3, [pc, #76]	; (2b14 <makeHeader(long*)+0xa8>)
    2ac6:	ldr	r3, [r3, #0]
    2ac8:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2aca:	ldr	r3, [pc, #76]	; (2b18 <makeHeader(long*)+0xac>)
    2acc:	ldrh	r3, [r3, #0]
    2ace:	sxth	r3, r3
    2ad0:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2ad2:	ldr	r3, [pc, #72]	; (2b1c <makeHeader(long*)+0xb0>)
    2ad4:	ldrh	r3, [r3, #0]
    2ad6:	sxth	r3, r3
    2ad8:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2ada:	ldr	r3, [pc, #68]	; (2b20 <makeHeader(long*)+0xb4>)
    2adc:	ldrh	r3, [r3, #0]
    2ade:	sxth	r3, r3
    2ae0:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2ae2:	ldr	r3, [pc, #64]	; (2b24 <makeHeader(long*)+0xb8>)
    2ae4:	ldrh	r3, [r3, #0]
    2ae6:	sxth	r3, r3
    2ae8:	str	r3, [r4, #60]	; 0x3c
    2aea:	ldr	r3, [pc, #60]	; (2b28 <makeHeader(long*)+0xbc>)
    2aec:	ldr	r3, [r3, #0]
    header[16] = millis();
    2aee:	str	r3, [r4, #64]	; 0x40
    header[127]=0x55555555;
    2af0:	mov.w	r3, #1431655765	; 0x55555555
    2af4:	str.w	r3, [r4, #508]	; 0x1fc
}
    2af8:	add	sp, #32
    2afa:	pop	{r4, pc}
    2afc:	.word	0x20000cc6
    2b00:	.word	0x20000cd5
    2b04:	.word	0x20007dc8
    2b08:	.word	0x20002290
    2b0c:	.word	0x200022ac
    2b10:	.word	0x200022b0
    2b14:	.word	0x20021384
    2b18:	.word	0x200213ca
    2b1c:	.word	0x2002146e
    2b20:	.word	0x200022b8
    2b24:	.word	0x200213c4
    2b28:	.word	0x20021374

00002b2c <checkEndOfFile(short)>:
  if(state==RUNNING)
    2b2c:	cmp	r0, #2
{ 
    2b2e:	push	{r4, lr}
    2b30:	mov	r4, r0
  if(state==RUNNING)
    2b32:	bne.n	2b5c <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2b34:	bl	b514 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2b38:	ldr	r3, [pc, #60]	; (2b78 <checkEndOfFile(short)+0x4c>)
    2b3a:	ldr	r2, [r3, #0]
    2b3c:	udiv	r3, r0, r2
    2b40:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b44:	ldr	r2, [pc, #52]	; (2b7c <checkEndOfFile(short)+0x50>)
    2b46:	ldr	r1, [r2, #0]
    dta = dt1;
    2b48:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b4a:	cmp	r3, r1
    2b4c:	bcs.n	2b5c <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2b4e:	ldr	r3, [pc, #48]	; (2b80 <checkEndOfFile(short)+0x54>)
    2b50:	ldr	r2, [pc, #48]	; (2b84 <checkEndOfFile(short)+0x58>)
    2b52:	ldr	r4, [r3, #0]
    2b54:	ldr	r1, [r2, #0]
    2b56:	cmp	r4, r1
    2b58:	bhi.n	2b60 <checkEndOfFile(short)+0x34>
    2b5a:	movs	r4, #3
}
    2b5c:	mov	r0, r4
    2b5e:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    2b60:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b62:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    2b64:	udiv	r2, r0, r3
    2b68:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b6c:	cmp	r0, r4
    2b6e:	ite	cc
    2b70:	movcc	r4, #3
    2b72:	movcs	r4, #4
    2b74:	b.n	2b5c <checkEndOfFile(short)+0x30>
    2b76:	nop
    2b78:	.word	0x200022ac
    2b7c:	.word	0x2002083c
    2b80:	.word	0x20021384
    2b84:	.word	0x200022b0

00002b88 <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2b88:	ldr	r3, [pc, #12]	; (2b98 <newFolder(int)+0x10>)
    2b8a:	ldr	r2, [r3, #0]
    2b8c:	cmp	r2, r0
  d0=d;
    2b8e:	itte	ne
    2b90:	strne	r0, [r3, #0]
  return 1;
    2b92:	movne	r0, #1
  if(d==d0) return 0; // same day
    2b94:	moveq	r0, #0
}
    2b96:	bx	lr
    2b98:	.word	0x200020bc

00002b9c <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2b9c:	push	{r4, lr}
    2b9e:	sub	sp, #24
    2ba0:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2ba2:	add	r0, sp, #16
    2ba4:	bl	383e <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2ba8:	ldrsb.w	r1, [sp, #21]
    2bac:	mov	r0, r1
    2bae:	bl	2b88 <newFolder(int)>
    2bb2:	cbz	r0, 2bee <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2bb4:	ldrsb.w	r3, [sp, #19]
    2bb8:	mov	r0, r4
    2bba:	ldr	r2, [pc, #56]	; (2bf4 <newDirectory(char*)+0x58>)
    2bbc:	str	r3, [sp, #8]
    2bbe:	ldrsb.w	r3, [sp, #18]
    2bc2:	str	r1, [sp, #12]
    2bc4:	str	r3, [sp, #4]
    2bc6:	ldrsh.w	r3, [sp, #16]
    2bca:	ldr	r1, [pc, #44]	; (2bf8 <newDirectory(char*)+0x5c>)
    2bcc:	str	r3, [sp, #0]
    2bce:	ldr	r3, [pc, #44]	; (2bfc <newDirectory(char*)+0x60>)
    2bd0:	ldr	r3, [r3, #0]
    2bd2:	bl	e46c <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2bd6:	ldr	r0, [pc, #40]	; (2c00 <newDirectory(char*)+0x64>)
    2bd8:	bl	c258 <Print::println()>
    2bdc:	ldr	r1, [pc, #36]	; (2c04 <newDirectory(char*)+0x68>)
    2bde:	ldr	r0, [pc, #32]	; (2c00 <newDirectory(char*)+0x64>)
    2be0:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
    2be4:	ldr	r0, [pc, #24]	; (2c00 <newDirectory(char*)+0x64>)
    2be6:	mov	r1, r4
    2be8:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2bec:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2bee:	add	sp, #24
    2bf0:	pop	{r4, pc}
    2bf2:	nop
    2bf4:	.word	0x20000d7a
    2bf8:	.word	0x20000d7c
    2bfc:	.word	0x20007dc8
    2c00:	.word	0x20001cec
    2c04:	.word	0x2000140e

00002c08 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2c08:	push	{r4, r5, r6, r7, lr}
    2c0a:	sub	sp, #36	; 0x24
    2c0c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2c0e:	add	r0, sp, #24
    2c10:	bl	383e <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2c14:	ldr	r3, [pc, #104]	; (2c80 <newFileName(char*)+0x78>)
    2c16:	ldrsb.w	r7, [sp, #31]
    2c1a:	ldrh	r2, [r3, #0]
    2c1c:	ldrsb.w	r6, [sp, #30]
    2c20:	ldrsb.w	r5, [sp, #29]
    2c24:	sxth	r2, r2
    2c26:	ldrsb.w	r0, [sp, #27]
    2c2a:	ldrsb.w	r1, [sp, #26]
    2c2e:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c32:	str	r1, [sp, #0]
    2c34:	strd	r6, r7, [sp, #12]
    2c38:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2c3c:	cbnz	r2, 2c78 <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c3e:	ldr	r2, [pc, #68]	; (2c84 <newFileName(char*)+0x7c>)
    2c40:	ldr	r1, [pc, #68]	; (2c88 <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c42:	mov	r0, r4
    2c44:	bl	e46c <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2c48:	ldr	r0, [pc, #64]	; (2c8c <newFileName(char*)+0x84>)
    2c4a:	bl	c258 <Print::println()>
    2c4e:	ldr	r1, [pc, #64]	; (2c90 <newFileName(char*)+0x88>)
    2c50:	ldr	r0, [pc, #56]	; (2c8c <newFileName(char*)+0x84>)
    2c52:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
    2c56:	mov	r1, r4
    2c58:	ldr	r0, [pc, #48]	; (2c8c <newFileName(char*)+0x84>)
    2c5a:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2c5e:	ldr	r1, [pc, #52]	; (2c94 <newFileName(char*)+0x8c>)
    2c60:	ldr	r0, [pc, #40]	; (2c8c <newFileName(char*)+0x84>)
    2c62:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
    2c66:	bl	b2cc <micros>
    2c6a:	mov	r1, r0
    2c6c:	ldr	r0, [pc, #28]	; (2c8c <newFileName(char*)+0x84>)
    2c6e:	bl	287a <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2c72:	movs	r0, #1
    2c74:	add	sp, #36	; 0x24
    2c76:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c78:	ldr	r2, [pc, #8]	; (2c84 <newFileName(char*)+0x7c>)
    2c7a:	ldr	r1, [pc, #28]	; (2c98 <newFileName(char*)+0x90>)
    2c7c:	b.n	2c42 <newFileName(char*)+0x3a>
    2c7e:	nop
    2c80:	.word	0x200213ca
    2c84:	.word	0x200013ab
    2c88:	.word	0x20000d2f
    2c8c:	.word	0x20001cec
    2c90:	.word	0x2000140e
    2c94:	.word	0x20001416
    2c98:	.word	0x20000d4f

00002c9c <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2c9c:	ldr	r2, [pc, #132]	; (2d24 <getAlarmTime(unsigned long)+0x88>)
    2c9e:	udiv	r3, r0, r2
    2ca2:	mls	r3, r2, r3, r0
    2ca6:	mov.w	r2, #3600	; 0xe10
    2caa:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2cae:	ldr	r2, [pc, #120]	; (2d28 <getAlarmTime(unsigned long)+0x8c>)
    2cb0:	ldr	r1, [r2, #0]
    2cb2:	cmp	r1, r3
{   // estimate the wakup-time in seconds 
    2cb4:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2cb6:	bhi.n	2cc0 <getAlarmTime(unsigned long)+0x24>
    2cb8:	ldr	r1, [pc, #112]	; (2d2c <getAlarmTime(unsigned long)+0x90>)
    2cba:	ldr	r1, [r1, #0]
    2cbc:	cmp	r1, r3
    2cbe:	bhi.n	2ce8 <getAlarmTime(unsigned long)+0x4c>
    2cc0:	ldr	r5, [pc, #108]	; (2d30 <getAlarmTime(unsigned long)+0x94>)
    2cc2:	ldr	r1, [r5, #0]
    2cc4:	cmp	r1, r3
    2cc6:	bhi.n	2cd0 <getAlarmTime(unsigned long)+0x34>
    2cc8:	ldr	r1, [pc, #104]	; (2d34 <getAlarmTime(unsigned long)+0x98>)
    2cca:	ldr	r1, [r1, #0]
    2ccc:	cmp	r1, r3
    2cce:	bhi.n	2ce8 <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2cd0:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2cd2:	ldr	r1, [pc, #80]	; (2d24 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2cd4:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2cd6:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2cda:	bhi.n	2cf8 <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2cdc:	ldr	r6, [pc, #76]	; (2d2c <getAlarmTime(unsigned long)+0x90>)
    2cde:	ldr	r6, [r6, #0]
    2ce0:	cmp	r6, r3
    2ce2:	bhi.n	2d06 <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2ce4:	ldr	r0, [r5, #0]
    2ce6:	b.n	2cfa <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2ce8:	ldr	r2, [pc, #76]	; (2d38 <getAlarmTime(unsigned long)+0x9c>)
    2cea:	ldr	r3, [r2, #0]
    2cec:	udiv	r3, r0, r3
    2cf0:	ldr	r0, [r2, #0]
    2cf2:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2cf6:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2cf8:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2cfa:	mov.w	r3, #3600	; 0xe10
    2cfe:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d00:	mla	r0, r1, r4, r0
    2d04:	b.n	2cf6 <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2d06:	ldr	r5, [pc, #44]	; (2d34 <getAlarmTime(unsigned long)+0x98>)
    2d08:	ldr	r6, [r5, #0]
    2d0a:	cmp	r6, r3
    2d0c:	bhi.n	2cf6 <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d0e:	ldr	r0, [r2, #0]
    2d10:	ldr	r3, [r5, #0]
    2d12:	subs	r0, r0, r3
    2d14:	mov.w	r3, #3600	; 0xe10
    2d18:	muls	r0, r3
    2d1a:	add.w	r0, r0, #86016	; 0x15000
    2d1e:	add.w	r0, r0, #384	; 0x180
    2d22:	b.n	2d00 <getAlarmTime(unsigned long)+0x64>
    2d24:	.word	0x00015180
    2d28:	.word	0x2002137c
    2d2c:	.word	0x200022a0
    2d30:	.word	0x200022a4
    2d34:	.word	0x200022a8
    2d38:	.word	0x20021384

00002d3c <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2d3c:	ldr	r2, [pc, #12]	; (2d4c <powerDown()+0x10>)
    2d3e:	ldr	r3, [r2, #56]	; 0x38
    2d40:	orr.w	r3, r3, #64	; 0x40
    2d44:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2d46:	wfi
    2d48:	b.n	2d46 <powerDown()+0xa>
    2d4a:	nop
    2d4c:	.word	0x400d4000

00002d50 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d50:	ldr	r3, [pc, #132]	; (2dd8 <do_hibernate(unsigned long)+0x88>)
{
    2d52:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d54:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2d56:	ldr	r2, [r3, #76]	; 0x4c
    2d58:	orr.w	r2, r2, #1
    2d5c:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2d5e:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2d62:	ldr	r2, [r3, #56]	; 0x38
    2d64:	bic.w	r2, r2, #2
    2d68:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2d6a:	ldr	r2, [r3, #56]	; 0x38
    2d6c:	ands.w	r2, r2, #2
    2d70:	bne.n	2d6a <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2d72:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2d74:	ldr	r2, [r3, #88]	; 0x58
    2d76:	cmp	r2, #0
    2d78:	bne.n	2d74 <do_hibernate(unsigned long)+0x24>

    __disable_irq();
    2d7a:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2d7c:	ldr	r5, [pc, #88]	; (2dd8 <do_hibernate(unsigned long)+0x88>)
    2d7e:	ldr	r3, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2d80:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2d82:	ldr	r1, [r5, #84]	; 0x54
    2d84:	ldr	r2, [r5, #80]	; 0x50
    2d86:	cmp	r1, r4
    2d88:	bne.n	2d7e <do_hibernate(unsigned long)+0x2e>
    2d8a:	cmp	r2, r3
    2d8c:	bne.n	2d7e <do_hibernate(unsigned long)+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2d8e:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" ");
    2d90:	ldr	r0, [pc, #72]	; (2ddc <do_hibernate(unsigned long)+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2d92:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" ");
    2d96:	mov	r1, r4
    2d98:	bl	287a <Print::print(unsigned long) [clone .isra.0]>
    2d9c:	ldr	r1, [pc, #64]	; (2de0 <do_hibernate(unsigned long)+0x90>)
    2d9e:	ldr	r0, [pc, #60]	; (2ddc <do_hibernate(unsigned long)+0x8c>)
    2da0:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    2da4:	mov	r0, r4
    2da6:	bl	2c9c <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2daa:	mov	r1, r0
    2dac:	mov	r4, r0
    2dae:	ldr	r0, [pc, #44]	; (2ddc <do_hibernate(unsigned long)+0x8c>)
    2db0:	bl	287a <Print::print(unsigned long) [clone .isra.0]>
    2db4:	ldr	r0, [pc, #36]	; (2ddc <do_hibernate(unsigned long)+0x8c>)
    2db6:	bl	c258 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    2dba:	ldr	r3, [pc, #28]	; (2dd8 <do_hibernate(unsigned long)+0x88>)
    SNVS_LPTAR = secs;
    2dbc:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2dbe:	ldr	r2, [r3, #88]	; 0x58
    2dc0:	cmp	r2, r4
    2dc2:	bne.n	2dbe <do_hibernate(unsigned long)+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2dc4:	orr.w	r6, r6, #2
    2dc8:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2dca:	ldr	r2, [r3, #56]	; 0x38
    2dcc:	lsls	r2, r2, #30
    2dce:	bpl.n	2dca <do_hibernate(unsigned long)+0x7a>

    __enable_irq();
    2dd0:	cpsie	i
  
    //
    powerDown(); 
    2dd2:	bl	2d3c <powerDown()>
    2dd6:	nop
    2dd8:	.word	0x400d4000
    2ddc:	.word	0x20001cec
    2de0:	.word	0x20001416

00002de4 <storeData(short)>:
{
    2de4:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2de6:	mov	r4, r0
{
    2de8:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2dea:	cmp	r0, #0
    2dec:	bne.w	2ef6 <storeData(short)+0x112>
        if(newDirectory(dirName))
    2df0:	ldr	r0, [pc, #512]	; (2ff4 <storeData(short)+0x210>)
    2df2:	bl	2b9c <newDirectory(char*)>
    2df6:	cmp	r0, #0
    2df8:	beq.n	2e94 <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2dfa:	ldr	r5, [pc, #508]	; (2ff8 <storeData(short)+0x214>)
    2dfc:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2dfe:	ldr.w	r1, [r3, #1152]	; 0x480
    2e02:	cbz	r1, 2e32 <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    2e04:	mov	r3, r4
    2e06:	ldr	r2, [pc, #492]	; (2ff4 <storeData(short)+0x210>)
    2e08:	mov	r0, sp
    2e0a:	str	r4, [sp, #0]
    2e0c:	bl	719a <FatFile::open(FatVolume*, char const*, int)>
    2e10:	cbnz	r0, 2e70 <storeData(short)+0x8c>
    2e12:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2e14:	ldr.w	r1, [r3, #1152]	; 0x480
    2e18:	cbnz	r1, 2e4a <storeData(short)+0x66>
    2e1a:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2e1e:	cbz	r0, 2e5e <storeData(short)+0x7a>
  ExFatFile() {}
    2e20:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2e22:	movs	r3, #1
    2e24:	add.w	r1, r0, #1096	; 0x448
    2e28:	ldr	r2, [pc, #456]	; (2ff4 <storeData(short)+0x210>)
    2e2a:	mov	r0, sp
    2e2c:	bl	6506 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2e30:	b.n	2e5c <storeData(short)+0x78>
    2e32:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2e36:	cmp	r0, #0
    2e38:	beq.n	2e12 <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    2e3a:	mov	r3, r1
    2e3c:	str	r1, [sp, #48]	; 0x30
    2e3e:	ldr	r2, [pc, #436]	; (2ff4 <storeData(short)+0x210>)
    2e40:	mov	r1, r0
    2e42:	mov	r0, sp
    2e44:	bl	5c8e <ExFatFile::open(ExFatVolume*, char const*, int)>
    2e48:	b.n	2e10 <storeData(short)+0x2c>
    2e4a:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2e4c:	ldr	r2, [pc, #420]	; (2ff4 <storeData(short)+0x210>)
    2e4e:	add.w	r1, r1, #1096	; 0x448
    2e52:	mov	r0, sp
    2e54:	str	r3, [sp, #0]
    2e56:	movs	r3, #1
    2e58:	bl	7318 <FatFile::mkdir(FatFile*, char const*, bool)>
    2e5c:	cbnz	r0, 2e70 <storeData(short)+0x8c>
    2e5e:	ldr	r1, [pc, #412]	; (2ffc <storeData(short)+0x218>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2e60:	ldr	r0, [pc, #412]	; (3000 <storeData(short)+0x21c>)
    2e62:	bl	28aa <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2e66:	mov.w	r4, #4294967295
}
    2e6a:	mov	r0, r4
    2e6c:	add	sp, #84	; 0x54
    2e6e:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2e70:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2e72:	ldr.w	r0, [r3, #1152]	; 0x480
    2e76:	cbz	r0, 2e84 <storeData(short)+0xa0>
    2e78:	ldr	r1, [pc, #376]	; (2ff4 <storeData(short)+0x210>)
    2e7a:	bl	7b70 <FatVolume::chdir(char const*)>
    2e7e:	cbnz	r0, 2e94 <storeData(short)+0xb0>
    2e80:	ldr	r1, [pc, #384]	; (3004 <storeData(short)+0x220>)
    2e82:	b.n	2e60 <storeData(short)+0x7c>
    2e84:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2e88:	cmp	r0, #0
    2e8a:	beq.n	2e80 <storeData(short)+0x9c>
    2e8c:	ldr	r1, [pc, #356]	; (2ff4 <storeData(short)+0x210>)
    2e8e:	bl	60d8 <ExFatVolume::chdir(char const*)>
    2e92:	b.n	2e7e <storeData(short)+0x9a>
        if(newFileName(fileName))
    2e94:	ldr	r0, [pc, #368]	; (3008 <storeData(short)+0x224>)
    2e96:	bl	2c08 <newFileName(char*)>
    2e9a:	cmp	r0, #0
    2e9c:	beq.n	2e66 <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    2e9e:	ldr	r1, [pc, #344]	; (2ff8 <storeData(short)+0x214>)
    2ea0:	movw	r3, #16898	; 0x4202
    2ea4:	ldr	r2, [pc, #352]	; (3008 <storeData(short)+0x224>)
    2ea6:	mov	r0, sp
    2ea8:	ldr	r1, [r1, #0]
    2eaa:	bl	8500 <FsVolume::open(char const*, int)>
class Print
    2eae:	ldr	r4, [pc, #348]	; (300c <storeData(short)+0x228>)
    2eb0:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2eb2:	add	r1, sp, #16
    2eb4:	add.w	r0, r4, #16
    2eb8:	str	r3, [r4, #4]
class Stream : public Print
    2eba:	ldr	r3, [sp, #8]
    2ebc:	str	r3, [r4, #8]
    2ebe:	ldrb.w	r3, [sp, #12]
    2ec2:	strb	r3, [r4, #12]
    2ec4:	bl	82f6 <FsBaseFile::operator=(FsBaseFile const&)>
    2ec8:	mov	r0, sp
    2eca:	bl	f14 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ece:	ldr	r3, [r4, #72]	; 0x48
    2ed0:	cbz	r3, 2eec <storeData(short)+0x108>
    {   nbuf=0;
    2ed2:	ldr	r3, [pc, #316]	; (3010 <storeData(short)+0x22c>)
    2ed4:	movs	r2, #0
    2ed6:	str	r2, [r3, #0]
        if(proc==0)
    2ed8:	ldr	r3, [pc, #312]	; (3014 <storeData(short)+0x230>)
    2eda:	ldrh	r3, [r3, #0]
    2edc:	sxth	r3, r3
    2ede:	cmp	r3, #0
    2ee0:	beq.n	2f50 <storeData(short)+0x16c>
          makeHeader(fileHeader);
    2ee2:	ldr	r0, [pc, #308]	; (3018 <storeData(short)+0x234>)
    2ee4:	bl	2a6c <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2ee8:	ldr	r1, [pc, #300]	; (3018 <storeData(short)+0x234>)
    2eea:	b.n	2f62 <storeData(short)+0x17e>
    2eec:	ldr	r3, [r4, #76]	; 0x4c
    2eee:	cmp	r3, #0
    2ef0:	bne.n	2ed2 <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    2ef2:	ldr	r1, [pc, #296]	; (301c <storeData(short)+0x238>)
    2ef4:	b.n	2e60 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    2ef6:	cmp	r0, #1
    2ef8:	beq.n	2ed2 <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    2efa:	cmp	r0, #2
    2efc:	beq.n	2f72 <storeData(short)+0x18e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2efe:	subs	r3, r4, #3
    2f00:	uxth	r3, r3
    2f02:	cmp	r3, #2
    2f04:	bhi.n	2e6a <storeData(short)+0x86>
    2f06:	ldr	r3, [pc, #260]	; (300c <storeData(short)+0x228>)
    2f08:	ldr	r2, [r3, #72]	; 0x48
    2f0a:	cbnz	r2, 2f10 <storeData(short)+0x12c>
    2f0c:	ldr	r3, [r3, #76]	; 0x4c
    2f0e:	cbz	r3, 2f30 <storeData(short)+0x14c>
        {   if(proc==0)
    2f10:	ldr	r3, [pc, #256]	; (3014 <storeData(short)+0x230>)
    2f12:	ldrh	r3, [r3, #0]
    2f14:	sxth	r3, r3
    2f16:	cbnz	r3, 2f2a <storeData(short)+0x146>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2f18:	ldr	r3, [pc, #244]	; (3010 <storeData(short)+0x22c>)
    2f1a:	mov.w	r0, #49152	; 0xc000
    2f1e:	ldr	r3, [r3, #0]
    2f20:	muls	r0, r3
    2f22:	bl	29f8 <headerUpdate(long)>
              writeHeader(hdr);
    2f26:	bl	2a0c <writeHeader(char*)>
            file.close();
    2f2a:	ldr	r0, [pc, #244]	; (3020 <storeData(short)+0x23c>)
    2f2c:	bl	82cc <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2f30:	cmp	r4, #4
    2f32:	bne.n	2fe0 <storeData(short)+0x1fc>
        { if( t_rep > t_on) 
    2f34:	ldr	r4, [pc, #236]	; (3024 <storeData(short)+0x240>)
    2f36:	ldr	r3, [pc, #240]	; (3028 <storeData(short)+0x244>)
    2f38:	ldr	r2, [r4, #0]
    2f3a:	ldr	r3, [r3, #0]
    2f3c:	cmp	r2, r3
    2f3e:	bls.n	2fee <storeData(short)+0x20a>
            adcReset();
    2f40:	bl	3518 <adcReset()>
            acqPower(LOW);
    2f44:	movs	r0, #0
    2f46:	bl	3504 <acqPower(int)>
            do_hibernate(t_rep);
    2f4a:	ldr	r0, [r4, #0]
    2f4c:	bl	2d50 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2f50:	ldr	r3, [pc, #216]	; (302c <storeData(short)+0x248>)
    2f52:	movs	r1, #1
    2f54:	movs	r2, #32
    2f56:	ldr	r0, [r3, #0]
    2f58:	ldr	r3, [pc, #212]	; (3030 <storeData(short)+0x24c>)
    2f5a:	ldr	r3, [r3, #0]
    2f5c:	bl	2914 <headerInit(long, long, long, int)>
    2f60:	mov	r1, r0
    return BaseFile::write(buffer, size);
    2f62:	mov.w	r2, #512	; 0x200
    2f66:	ldr	r0, [pc, #184]	; (3020 <storeData(short)+0x23c>)
    2f68:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    2f6c:	cmp.w	r0, #512	; 0x200
    2f70:	blt.n	2fdc <storeData(short)+0x1f8>
    2f72:	mov.w	r2, #49152	; 0xc000
    2f76:	ldr	r1, [pc, #188]	; (3034 <storeData(short)+0x250>)
    2f78:	ldr	r0, [pc, #164]	; (3020 <storeData(short)+0x23c>)
    2f7a:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2f7e:	cmp.w	r0, #49152	; 0xc000
    2f82:	mov	r4, r0
    2f84:	ldr	r5, [pc, #136]	; (3010 <storeData(short)+0x22c>)
    2f86:	bcs.n	2fd2 <storeData(short)+0x1ee>
        { Serial.print(">"); 
    2f88:	ldr	r1, [pc, #172]	; (3038 <storeData(short)+0x254>)
    2f8a:	ldr	r0, [pc, #116]	; (3000 <storeData(short)+0x21c>)
    2f8c:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    2f90:	mov	r1, r4
    2f92:	ldr	r0, [pc, #108]	; (3000 <storeData(short)+0x21c>)
          status=DOCLOSE; 
    2f94:	movs	r4, #3
          Serial.print(nd); 
    2f96:	bl	287a <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    2f9a:	ldr	r1, [pc, #160]	; (303c <storeData(short)+0x258>)
    2f9c:	ldr	r0, [pc, #96]	; (3000 <storeData(short)+0x21c>)
    2f9e:	bl	28a6 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2fa2:	movs	r1, #2
    2fa4:	ldr	r0, [pc, #88]	; (3000 <storeData(short)+0x21c>)
    2fa6:	bl	c246 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2faa:	ldr	r0, [pc, #84]	; (3000 <storeData(short)+0x21c>)
    2fac:	bl	c258 <Print::println()>
        disk_count++;
    2fb0:	ldr	r2, [pc, #140]	; (3040 <storeData(short)+0x25c>)
    2fb2:	ldr	r3, [r2, #0]
    2fb4:	adds	r3, #1
    2fb6:	str	r3, [r2, #0]
    2fb8:	mov.w	r2, #1000	; 0x3e8
    2fbc:	ldr	r3, [r5, #0]
    2fbe:	udiv	r1, r3, r2
    2fc2:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2fc6:	cmp	r3, #0
    2fc8:	bne.n	2efe <storeData(short)+0x11a>
    BaseFile::sync();
    2fca:	ldr	r0, [pc, #84]	; (3020 <storeData(short)+0x23c>)
    2fcc:	bl	28bc <FsBaseFile::sync()>
  }
    2fd0:	b.n	2efe <storeData(short)+0x11a>
          nbuf++;
    2fd2:	ldr	r3, [r5, #0]
    2fd4:	movs	r4, #2
    2fd6:	adds	r3, #1
    2fd8:	str	r3, [r5, #0]
    2fda:	b.n	2fb0 <storeData(short)+0x1cc>
        { status = DOCLOSE;
    2fdc:	movs	r4, #3
    2fde:	b.n	2efe <storeData(short)+0x11a>
        else if(status==DOCLOSE)
    2fe0:	cmp	r4, #3
    2fe2:	beq.n	2fee <storeData(short)+0x20a>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2fe4:	ldr	r3, [pc, #92]	; (3044 <storeData(short)+0x260>)
    2fe6:	movs	r2, #8
    2fe8:	str.w	r2, [r3, #136]	; 0x88
    2fec:	b.n	2e66 <storeData(short)+0x82>
            status = CLOSED;   // do not hibernate
    2fee:	movs	r4, #0
    2ff0:	b.n	2e6a <storeData(short)+0x86>
    2ff2:	nop
    2ff4:	.word	0x2002149a
    2ff8:	.word	0x20002298
    2ffc:	.word	0x20001028
    3000:	.word	0x20001cec
    3004:	.word	0x20001034
    3008:	.word	0x200214ea
    300c:	.word	0x20020bb8
    3010:	.word	0x20020c34
    3014:	.word	0x200213ca
    3018:	.word	0x20013dd0
    301c:	.word	0x20001040
    3020:	.word	0x20020bc8
    3024:	.word	0x20021384
    3028:	.word	0x200022b0
    302c:	.word	0x20002290
    3030:	.word	0x20007dc8
    3034:	.word	0x20007dd0
    3038:	.word	0x20001052
    303c:	.word	0x20001416
    3040:	.word	0x20020b98
    3044:	.word	0x42004000

00003048 <saveData(short)>:
    if(status==STOPPED) 
    3048:	adds	r3, r0, #1
{
    304a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    304e:	mov	r4, r0
    if(status==STOPPED) 
    3050:	bne.n	307a <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    3052:	bl	2728 <queue_isBusy()>
    3056:	mov	r5, r0
    3058:	cmp	r0, #0
    305a:	bne.n	3052 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    305c:	ldr	r0, [pc, #180]	; (3114 <saveData(short)+0xcc>)
    305e:	bl	2794 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3062:	ldr	r3, [pc, #176]	; (3114 <saveData(short)+0xcc>)
    3064:	ldr	r2, [pc, #176]	; (3118 <saveData(short)+0xd0>)
    3066:	ldr.w	r1, [r3], #4
    306a:	str.w	r1, [r2, r5, lsl #2]
    306e:	adds	r5, #1
    3070:	cmp	r5, #8
    3072:	bne.n	3066 <saveData(short)+0x1e>
}
    3074:	mov	r0, r4
    3076:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    307a:	cmp	r0, #0
    307c:	blt.n	3074 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    307e:	bl	2b2c <checkEndOfFile(short)>
    3082:	mov	r4, r0
    if(getDataCount() >= NDBL)
    3084:	bl	270c <getDataCount()>
    3088:	cmp	r0, #95	; 0x5f
    308a:	bls.n	3074 <saveData(short)+0x2c>
      if(proc==0)
    308c:	ldr	r3, [pc, #140]	; (311c <saveData(short)+0xd4>)
    308e:	ldrh	r5, [r3, #0]
    3090:	sxth	r5, r5
    3092:	cbnz	r5, 30e0 <saveData(short)+0x98>
    3094:	ldr	r7, [pc, #124]	; (3114 <saveData(short)+0xcc>)
    3096:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3098:	bl	2728 <queue_isBusy()>
    309c:	mov	r6, r0
    309e:	cmp	r0, #0
    30a0:	bne.n	3098 <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    30a2:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    30a4:	mov	r0, r8
    30a6:	bl	2794 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    30aa:	add.w	r8, r8, #512	; 0x200
    30ae:	cmp	r5, #96	; 0x60
    30b0:	bne.n	3098 <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    30b2:	ldr	r3, [pc, #100]	; (3118 <saveData(short)+0xd0>)
    30b4:	ldr.w	r2, [r7], #4
    30b8:	str.w	r2, [r3, r6, lsl #2]
    30bc:	adds	r6, #1
    30be:	cmp	r6, #8
    30c0:	bne.n	30b4 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    30c2:	mov.w	r2, #49152	; 0xc000
    30c6:	ldr	r1, [pc, #76]	; (3114 <saveData(short)+0xcc>)
    30c8:	ldr	r0, [pc, #84]	; (3120 <saveData(short)+0xd8>)
    30ca:	bl	9dd0 <memcpy>
      if(haveStore)
    30ce:	ldr	r3, [pc, #84]	; (3124 <saveData(short)+0xdc>)
    30d0:	ldr	r3, [r3, #0]
    30d2:	cmp	r3, #0
    30d4:	beq.n	3074 <saveData(short)+0x2c>
        status=storeData(status);
    30d6:	mov	r0, r4
}
    30d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    30dc:	b.w	2de4 <storeData(short)>
    30e0:	ldr	r6, [pc, #60]	; (3120 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    30e2:	movs	r7, #0
      if(proc==0)
    30e4:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    30e6:	bl	2728 <queue_isBusy()>
    30ea:	mov	r5, r0
    30ec:	cmp	r0, #0
    30ee:	bne.n	30e6 <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    30f0:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    30f2:	mov	r0, r8
    30f4:	bl	2794 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    30f8:	add.w	r8, r8, #512	; 0x200
    30fc:	cmp	r7, #96	; 0x60
    30fe:	bne.n	30e6 <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3100:	ldr	r3, [pc, #20]	; (3118 <saveData(short)+0xd0>)
    3102:	ldr.w	r2, [r6], #4
    3106:	str.w	r2, [r3, r5, lsl #2]
    310a:	adds	r5, #1
    310c:	cmp	r5, #8
    310e:	bne.n	3102 <saveData(short)+0xba>
    3110:	b.n	30ce <saveData(short)+0x86>
    3112:	nop
    3114:	.word	0x20013fdc
    3118:	.word	0x20020c0c
    311c:	.word	0x200213ca
    3120:	.word	0x20007dd0
    3124:	.word	0x20020c08

00003128 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    3128:	ldr	r0, [pc, #28]	; (3148 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    312a:	movs	r3, #0
    312c:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3130:	ldr	r1, [pc, #24]	; (314c <_GLOBAL__sub_I_t_acq+0x24>)
    3132:	strb	r3, [r0, #12]
    3134:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    3138:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    313c:	ldr	r3, [pc, #16]	; (3150 <_GLOBAL__sub_I_t_acq+0x28>)
    313e:	ldr	r2, [pc, #20]	; (3154 <_GLOBAL__sub_I_t_acq+0x2c>)
    3140:	str	r3, [r0, #0]
    3142:	b.w	c480 <__aeabi_atexit>
    3146:	nop
    3148:	.word	0x20020bb8
    314c:	.word	0x00000f15
    3150:	.word	0x20000554
    3154:	.word	0x200020c4

00003158 <filing_init()>:
{
    3158:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    315c:	ldr	r3, [pc, #132]	; (31e4 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    315e:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3160:	ldr	r2, [pc, #132]	; (31e8 <filing_init()+0x90>)
    3162:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    3166:	ldr.w	r9, [pc, #156]	; 3204 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    316a:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    316e:	ldr.w	r8, [pc, #152]	; 3208 <filing_init()+0xb0>
    3172:	ldr	r7, [pc, #120]	; (31ec <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3174:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    3176:	ldr	r3, [pc, #120]	; (31f0 <filing_init()+0x98>)
    3178:	ldr	r2, [pc, #120]	; (31f4 <filing_init()+0x9c>)
    317a:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    317c:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    3180:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    3182:	movs	r1, #0
    3184:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    3188:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    318c:	strb.w	r1, [r5, #1224]	; 0x4c8
    3190:	mov	r0, r6
    3192:	bl	96e8 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    3196:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    3198:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    319c:	bl	8de4 <SdioCard::errorCode() const>
    31a0:	cbnz	r0, 31c4 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    31a2:	movs	r3, #1
    31a4:	ldr.w	r1, [r5, #1164]	; 0x48c
    31a8:	mov	r0, r5
    31aa:	mov	r2, r3
    31ac:	bl	842c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    31b0:	cbz	r0, 31c4 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    31b2:	ldr	r0, [pc, #56]	; (31ec <filing_init()+0x94>)
    31b4:	ldr	r1, [pc, #64]	; (31f8 <filing_init()+0xa0>)
    31b6:	bl	28aa <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    31ba:	movs	r0, #1
    31bc:	ldr	r3, [pc, #60]	; (31fc <filing_init()+0xa4>)
    31be:	str	r0, [r3, #0]
}
    31c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    31c4:	mov	r1, r8
    31c6:	mov	r0, r7
    31c8:	bl	28aa <Print::println(char const*) [clone .isra.0]>
      delay(100);
    31cc:	movs	r0, #100	; 0x64
    31ce:	bl	b318 <delay>
  for(int ii=0; ii<5;ii++)
    31d2:	subs	r4, #1
    31d4:	bne.n	317c <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    31d6:	ldr	r0, [pc, #20]	; (31ec <filing_init()+0x94>)
    31d8:	ldr	r1, [pc, #36]	; (3200 <filing_init()+0xa8>)
    31da:	bl	28aa <Print::println(char const*) [clone .isra.0]>
  return 0;
    31de:	mov	r0, r4
    31e0:	b.n	31c0 <filing_init()+0x68>
    31e2:	nop
    31e4:	.word	0x401f4400
    31e8:	.word	0x20007dc8
    31ec:	.word	0x20001cec
    31f0:	.word	0x200207fc
    31f4:	.word	0x000027e9
    31f8:	.word	0x20000cf1
    31fc:	.word	0x20020c08
    3200:	.word	0x20000d13
    3204:	.word	0x20002298
    3208:	.word	0x20000d03

0000320c <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    320c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3210:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3212:	bl	b514 <rtc_get>
    3216:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    3218:	bl	b2cc <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    321c:	ldr	r3, [pc, #604]	; (347c <compress(void*)+0x270>)
  t1 = micros();
    321e:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3220:	movs	r2, #0
    3222:	ldr	r3, [r3, #0]
    3224:	ldr.w	r1, [r4, r2, lsl #2]
    3228:	str.w	r1, [r3, r2, lsl #2]
    322c:	adds	r2, #1
    322e:	cmp	r2, #128	; 0x80
    3230:	bne.n	3224 <compress(void*)+0x18>
    3232:	subs	r4, #4
    3234:	add.w	r0, r3, #508	; 0x1fc
    3238:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    323a:	ldr.w	r1, [r2, #4]!
    323e:	ldr.w	r5, [r4, #4]!
    3242:	cmp	r0, r2
    3244:	sub.w	r1, r1, r5
    3248:	str	r1, [r2, #0]
    324a:	bne.n	323a <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    324c:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    324e:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3252:	cmp	r1, #0
    3254:	it	lt
    3256:	neglt	r1, r1
    3258:	cmp	r2, r1
    325a:	it	lt
    325c:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    325e:	cmp	r0, r3
    3260:	bne.n	324e <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3262:	movs	r4, #2
    3264:	movs	r1, #1
    3266:	subs	r3, r4, #1
    3268:	lsl.w	r3, r1, r3
    326c:	cmp	r3, r2
    326e:	bgt.n	3276 <compress(void*)+0x6a>
    3270:	adds	r4, #1
    3272:	cmp	r4, #24
    3274:	bne.n	3266 <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    3276:	ldr	r2, [pc, #520]	; (3480 <compress(void*)+0x274>)
    3278:	subs	r1, r4, #1
    327a:	ldr.w	r8, [pc, #536]	; 3494 <compress(void*)+0x288>
    327e:	ldr.w	r3, [r2, r1, lsl #2]
    3282:	mov	fp, r8
    3284:	adds	r3, #1
    3286:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    328a:	ldr	r3, [pc, #504]	; (3484 <compress(void*)+0x278>)
    328c:	ldr	r2, [r3, #0]
    328e:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3290:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    3292:	it	hi
    3294:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    3296:	movs	r3, #1
    3298:	lsl.w	r0, r3, r4
    329c:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    329e:	ldr.w	r1, [r2, #4]!
    32a2:	adds	r3, #1
    32a4:	ands	r1, r0
    32a6:	cmp	r3, #128	; 0x80
    32a8:	str	r1, [r2, #0]
    32aa:	bne.n	329e <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32ac:	ldr	r5, [pc, #472]	; (3488 <compress(void*)+0x27c>)
    32ae:	mov.w	r2, #512	; 0x200
    32b2:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    32b4:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32b8:	mov	r0, r5
    32ba:	bl	9d8c <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    32be:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    32c2:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    32c4:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    32c8:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    32ca:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    32ce:	ldr	r2, [pc, #444]	; (348c <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32d0:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    32d2:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    32d4:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    32d8:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32dc:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    32e0:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    32e2:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32e4:	str	r3, [r5, #24]
    32e6:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    32e8:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    32ec:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    32ee:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    32f0:	str.w	r3, [fp]
  int nx = MBIT;
    32f4:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    32f6:	str	r0, [r5, #20]
  {   nx -= nb;
    32f8:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    32fc:	ldr.w	sl, [r5, r1, lsl #2]
    3300:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3304:	cmp.w	lr, #0
    3308:	ble.n	3352 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    330a:	lsl.w	r2, r2, lr
    330e:	mov	r3, lr
    3310:	orr.w	r2, r2, sl
    3314:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3318:	add.w	ip, ip, #1
    331c:	cmp.w	ip, #128	; 0x80
    3320:	bne.n	32f8 <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3322:	ldr.w	r8, [pc, #372]	; 3498 <compress(void*)+0x28c>
    3326:	ldr.w	r4, [r8]
    332a:	add.w	r9, r4, r6
    332e:	cmp.w	r9, #128	; 0x80
    3332:	bgt.n	3382 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3334:	ldr	r0, [pc, #344]	; (3490 <compress(void*)+0x284>)
    3336:	lsls	r2, r6, #2
    3338:	ldr	r1, [pc, #332]	; (3488 <compress(void*)+0x27c>)
    333a:	add.w	r0, r0, r4, lsl #2
    333e:	bl	9dd0 <memcpy>
    3342:	str.w	r9, [r8]
  int ret=1;
    3346:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    334a:	mov	r0, r9
    334c:	add	sp, #12
    334e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3352:	add.w	r9, r1, #1
      else if(nx==0) 
    3356:	bne.n	3366 <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    3358:	orr.w	r2, sl, r2
          nx=MBIT;
    335c:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    335e:	str.w	r2, [r5, r1, lsl #2]
    3362:	mov	r1, r9
    3364:	b.n	3318 <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3366:	subs	r3, r4, r3
    3368:	lsr.w	r3, r2, r3
    336c:	orr.w	r3, r3, sl
    3370:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3374:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3378:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    337a:	lsls	r2, r3
    337c:	str.w	r2, [r5, r9, lsl #2]
    3380:	b.n	3318 <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    3382:	cmp	r4, #122	; 0x7a
    3384:	ble.n	33d0 <compress(void*)+0x1c4>
    3386:	movs	r2, #0
    3388:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    338a:	ldr	r1, [pc, #260]	; (3490 <compress(void*)+0x284>)
    338c:	mov	r0, r2
    338e:	cmp	r3, #127	; 0x7f
    3390:	bls.n	33c6 <compress(void*)+0x1ba>
    3392:	cmp	r4, #128	; 0x80
    3394:	rsb	r3, r4, #128	; 0x80
    3398:	it	gt
    339a:	movgt	r3, #0
    339c:	add	r3, r4
    339e:	cbz	r2, 33a4 <compress(void*)+0x198>
    33a0:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    33a4:	ldr	r0, [pc, #232]	; (3490 <compress(void*)+0x284>)
    33a6:	bl	2734 <pushData(unsigned long*)>
    33aa:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33ae:	mov.w	r2, r6, lsl #2
    33b2:	ldr	r1, [pc, #212]	; (3488 <compress(void*)+0x27c>)
    33b4:	ldr	r0, [pc, #216]	; (3490 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    33b6:	it	ne
    33b8:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33bc:	bl	9dd0 <memcpy>
    33c0:	str.w	r6, [r8]
    33c4:	b.n	334a <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    33c6:	str.w	r0, [r1, r3, lsl #2]
    33ca:	movs	r2, #1
    33cc:	adds	r3, #1
    33ce:	b.n	338e <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    33d0:	rsb	r3, r4, #122	; 0x7a
    33d4:	ldr	r1, [pc, #176]	; (3488 <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    33d6:	ldr	r2, [pc, #184]	; (3490 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    33d8:	orr.w	r3, r3, r0, lsl #16
    33dc:	mov	r0, r1
    33de:	str	r3, [r5, #20]
    33e0:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    33e2:	ldr.w	ip, [r0], #4
    33e6:	str.w	ip, [r2, r3, lsl #2]
    33ea:	adds	r3, #1
    33ec:	cmp	r3, #128	; 0x80
    33ee:	bne.n	33e2 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    33f0:	ldr	r0, [pc, #156]	; (3490 <compress(void*)+0x284>)
    33f2:	rsb	sl, r4, #128	; 0x80
    33f6:	str	r1, [sp, #4]
    33f8:	str.w	r3, [r8]
    33fc:	bl	2734 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3400:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3402:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    3406:	subs.w	r9, r0, #0
    340a:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    340c:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3410:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3414:	it	ne
    3416:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    341a:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    341c:	lsls	r3, r3, #16
    341e:	orrs	r3, r7
    3420:	ldr	r7, [pc, #108]	; (3490 <compress(void*)+0x284>)
    3422:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3424:	mov	r2, r7
    3426:	movs	r3, #0
    3428:	str.w	r3, [r8]
    342c:	subs	r0, #1
    342e:	bne.n	345e <compress(void*)+0x252>
    3430:	cbz	r3, 3438 <compress(void*)+0x22c>
    3432:	movs	r3, #6
    3434:	str.w	r3, [r8]
    3438:	ldr.w	r1, [r8]
    343c:	movs	r3, #0
    343e:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3442:	cmp	sl, r6
    3444:	blt.n	346a <compress(void*)+0x25e>
    3446:	subs	r4, #128	; 0x80
    3448:	add	r4, r6
    344a:	cmp	r6, fp
    344c:	it	lt
    344e:	movlt	r4, #0
    3450:	add	r4, r1
    3452:	cmp	r3, #0
    3454:	beq.w	334a <compress(void*)+0x13e>
    3458:	str.w	r4, [r8]
  return ret;
    345c:	b.n	334a <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    345e:	ldr.w	r3, [r1], #4
    3462:	str.w	r3, [r7], #4
    3466:	movs	r3, #1
    3468:	b.n	342c <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    346a:	ldr.w	r3, [r5, sl, lsl #2]
    346e:	add.w	sl, sl, #1
    3472:	str.w	r3, [r2], #4
    3476:	movs	r3, #1
    3478:	b.n	3442 <compress(void*)+0x236>
    347a:	nop
    347c:	.word	0x200022b4
    3480:	.word	0x20020c58
    3484:	.word	0x20020c2c
    3488:	.word	0x200201f4
    348c:	.word	0x2002146e
    3490:	.word	0x2001ffe4
    3494:	.word	0x200205f4
    3498:	.word	0x20020848

0000349c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    349c:	push	{r0, r1, r4, lr}
    349e:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    34a0:	cbz	r1, 34bc <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    34a2:	mov	r0, r1
    34a4:	str	r1, [sp, #4]
    34a6:	bl	e900 <strlen>
    34aa:	ldr	r3, [r4, #0]
    34ac:	mov	r2, r0
    34ae:	ldr	r1, [sp, #4]
    34b0:	ldr	r3, [r3, #4]
    34b2:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    34b4:	add	sp, #8
    34b6:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    34ba:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    34bc:	add	sp, #8
    34be:	pop	{r4, pc}

000034c0 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    34c0:	ldr	r3, [pc, #24]	; (34dc <usbPowerInit()+0x1c>)
    34c2:	movs	r2, #5
    34c4:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    34c8:	movs	r2, #8
    34ca:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    34ce:	ldr	r2, [pc, #16]	; (34e0 <usbPowerInit()+0x20>)
    34d0:	ldr	r3, [r2, #4]
    34d2:	orr.w	r3, r3, #67108864	; 0x4000000
    34d6:	str	r3, [r2, #4]
    }
    34d8:	bx	lr
    34da:	nop
    34dc:	.word	0x401f8000
    34e0:	.word	0x42008000

000034e4 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    34e4:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    34e6:	bl	34c0 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    34ea:	ldr	r3, [pc, #20]	; (3500 <usbPowerSetup()+0x1c>)
    34ec:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    34f0:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    34f4:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    34f8:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    34fc:	b.w	b318 <delay>
    3500:	.word	0x42008000

00003504 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3504:	uxtb	r1, r0
    3506:	movs	r0, #33	; 0x21
    {   
    3508:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    350a:	bl	ba24 <digitalWrite>
            delay(100);
    350e:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3510:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3514:	b.w	b318 <delay>

00003518 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    3518:	movs	r1, #0
    351a:	movs	r0, #32
    351c:	b.w	ba24 <digitalWrite>

00003520 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3520:	movs	r1, #1
    3522:	movs	r0, #32
    3524:	b.w	ba24 <digitalWrite>

00003528 <adc_init()>:
    }


    void adc_init(void)
    {
    3528:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    352c:	movs	r1, #1
    352e:	movs	r0, #33	; 0x21
    3530:	bl	ba64 <pinMode>
        #endif
        acqPower(HIGH);
    3534:	movs	r0, #1
    3536:	bl	3504 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    353a:	movs	r1, #1
    353c:	movs	r0, #32
    353e:	bl	ba64 <pinMode>
        adcReset();
    3542:	bl	3518 <adcReset()>
        delay(100);
    3546:	movs	r0, #100	; 0x64
    3548:	bl	b318 <delay>
        adcStart();
    354c:	bl	3520 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3550:	ldr	r2, [pc, #332]	; (36a0 <adc_init()+0x178>)
    3552:	ldr	r1, [pc, #336]	; (36a4 <adc_init()+0x17c>)
    3554:	add	r0, sp, #4
    3556:	bl	3770 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    355a:	movs	r1, #76	; 0x4c
    355c:	add	r0, sp, #4
    355e:	bl	3794 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3562:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3564:	cmp	r0, #0
    3566:	beq.w	369a <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    356a:	ldr	r1, [pc, #316]	; (36a8 <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    356c:	ldr	r0, [pc, #316]	; (36ac <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    356e:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    3570:	bl	c290 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    3574:	movs	r3, #129	; 0x81
    3576:	movs	r2, #2
    3578:	movs	r1, #76	; 0x4c
    357a:	add	r0, sp, #4
    357c:	ldr	r5, [pc, #304]	; (36b0 <adc_init()+0x188>)
    357e:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    3582:	movs	r3, #48	; 0x30
    3584:	movs	r2, #7
    3586:	movs	r1, #76	; 0x4c
    3588:	add	r0, sp, #4
    358a:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    358e:	movs	r3, #0
    3590:	movs	r2, #8
    3592:	movs	r1, #76	; 0x4c
    3594:	add	r0, sp, #4
    3596:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    359a:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    359c:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    359e:	ldrb.w	r3, [r5], #1
    35a2:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    35a4:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35a6:	add	r0, sp, #4
    35a8:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    35ac:	cmp	r4, #15
    35ae:	bne.n	359a <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35b0:	movs	r3, #48	; 0x30
    35b2:	movs	r2, #115	; 0x73
    35b4:	movs	r1, #76	; 0x4c
    35b6:	add	r0, sp, #4
    35b8:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35bc:	movs	r3, #32
    35be:	movs	r2, #116	; 0x74
    35c0:	movs	r1, #76	; 0x4c
    35c2:	add	r0, sp, #4
    35c4:	ldr	r6, [pc, #236]	; (36b4 <adc_init()+0x18c>)
    35c6:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    35ca:	movs	r3, #224	; 0xe0
    35cc:	movs	r2, #117	; 0x75
    35ce:	movs	r1, #76	; 0x4c
    35d0:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    35d2:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    35d4:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    35d8:	ldr.w	r8, [pc, #236]	; 36c8 <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    35dc:	movs	r3, #37	; 0x25
    35de:	movs	r2, #107	; 0x6b
    35e0:	movs	r1, #76	; 0x4c
    35e2:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    35e4:	ldr	r7, [pc, #208]	; (36b8 <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    35e6:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    35ea:	movs	r3, #96	; 0x60
    35ec:	movs	r2, #59	; 0x3b
    35ee:	movs	r1, #76	; 0x4c
    35f0:	add	r0, sp, #4
    35f2:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    35f6:	ldrb.w	r4, [r6], #1
    35fa:	movs	r3, #136	; 0x88
    35fc:	movs	r1, #76	; 0x4c
    35fe:	add	r0, sp, #4
    3600:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3602:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3604:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3608:	ldrh.w	r3, [r8]
    360c:	adds	r2, r4, #1
    360e:	movs	r1, #76	; 0x4c
    3610:	uxtb	r3, r3
    3612:	add	r0, sp, #4
    3614:	uxtb	r2, r2
    3616:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    361a:	ldrh	r3, [r7, #0]
    361c:	adds	r2, r4, #2
    361e:	movs	r1, #76	; 0x4c
    3620:	subs	r3, #55	; 0x37
    3622:	add	r0, sp, #4
    3624:	uxtb	r2, r2
    3626:	uxtb	r3, r3
    3628:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    362c:	adds	r2, r4, #3
    362e:	movs	r3, #128	; 0x80
    3630:	movs	r1, #76	; 0x4c
    3632:	uxtb	r2, r2
    3634:	add	r0, sp, #4
    3636:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    363a:	adds	r2, r4, #4
    363c:	movs	r3, #0
    363e:	movs	r1, #76	; 0x4c
    3640:	uxtb	r2, r2
    3642:	add	r0, sp, #4
    3644:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3648:	cmp	r5, #4
    364a:	bne.n	35f6 <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    364c:	ldr	r1, [pc, #108]	; (36bc <adc_init()+0x194>)
    364e:	ldr	r0, [pc, #92]	; (36ac <adc_init()+0x184>)
    3650:	bl	349c <Print::print(char const*) [clone .isra.0]>
    3654:	movs	r2, #21
    3656:	movs	r1, #76	; 0x4c
    3658:	add	r0, sp, #4
    365a:	bl	37b6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    365e:	movs	r3, #0
    3660:	mov	r1, r0
    3662:	movs	r2, #16
    3664:	ldr	r0, [pc, #68]	; (36ac <adc_init()+0x184>)
    3666:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    366a:	ldr	r0, [pc, #64]	; (36ac <adc_init()+0x184>)
    366c:	bl	c258 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    3670:	ldr	r1, [pc, #76]	; (36c0 <adc_init()+0x198>)
    3672:	ldr	r0, [pc, #56]	; (36ac <adc_init()+0x184>)
    3674:	bl	349c <Print::print(char const*) [clone .isra.0]>
    3678:	movs	r2, #118	; 0x76
    367a:	movs	r1, #76	; 0x4c
    367c:	add	r0, sp, #4
    367e:	bl	37b6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3682:	movs	r3, #0
    3684:	mov	r1, r0
    3686:	movs	r2, #16
    3688:	ldr	r0, [pc, #32]	; (36ac <adc_init()+0x184>)
    368a:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    368e:	ldr	r0, [pc, #28]	; (36ac <adc_init()+0x184>)
    3690:	bl	c258 <Print::println()>
            
        }
    }
    3694:	add	sp, #8
    3696:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    369a:	ldr	r1, [pc, #40]	; (36c4 <adc_init()+0x19c>)
    369c:	b.n	356c <adc_init()+0x44>
    369e:	nop
    36a0:	.word	0x000186a0
    36a4:	.word	0x20001e3c
    36a8:	.word	0x20000ff8
    36ac:	.word	0x20001cec
    36b0:	.word	0x20001058
    36b4:	.word	0x20001054
    36b8:	.word	0x200213c4
    36bc:	.word	0x20001019
    36c0:	.word	0x20001021
    36c4:	.word	0x20001002
    36c8:	.word	0x200022b8

000036cc <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    36cc:	push	{r0, r1, r4, r5, r6, lr}
    36ce:	mov	r4, r0
    36d0:	ldr	r6, [pc, #40]	; (36fc <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    36d2:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    36d4:	ldr	r2, [pc, #40]	; (3700 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36d6:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    36d8:	ldr	r1, [pc, #40]	; (3704 <setAGain(signed char)+0x38>)
    36da:	add	r0, sp, #4
    36dc:	bl	3770 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36e0:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    36e4:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    36e6:	mov	r3, r4
    36e8:	movs	r1, #76	; 0x4c
    36ea:	adds	r2, #1
    36ec:	add	r0, sp, #4
    36ee:	uxtb	r2, r2
    36f0:	bl	3802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    36f4:	cmp	r5, #4
    36f6:	bne.n	36e0 <setAGain(signed char)+0x14>
            }
    }
    36f8:	add	sp, #8
    36fa:	pop	{r4, r5, r6, pc}
    36fc:	.word	0x20001054
    3700:	.word	0x000186a0
    3704:	.word	0x20001e3c

00003708 <adcStatus()>:
    void adcStatus(void)
    {
    3708:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    370a:	ldr	r4, [pc, #80]	; (375c <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    370c:	add	r0, sp, #4
    370e:	ldr	r2, [pc, #80]	; (3760 <adcStatus()+0x58>)
    3710:	ldr	r1, [pc, #80]	; (3764 <adcStatus()+0x5c>)
    3712:	bl	3770 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3716:	mov	r0, r4
    3718:	ldr	r1, [pc, #76]	; (3768 <adcStatus()+0x60>)
    371a:	bl	349c <Print::print(char const*) [clone .isra.0]>
    371e:	movs	r2, #21
    3720:	movs	r1, #76	; 0x4c
    3722:	add	r0, sp, #4
    3724:	bl	37b6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3728:	movs	r3, #0
    372a:	mov	r1, r0
    372c:	movs	r2, #16
    372e:	mov	r0, r4
    3730:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3734:	mov	r0, r4
    3736:	ldr	r1, [pc, #52]	; (376c <adcStatus()+0x64>)
    3738:	bl	349c <Print::print(char const*) [clone .isra.0]>
    373c:	movs	r2, #118	; 0x76
    373e:	movs	r1, #76	; 0x4c
    3740:	add	r0, sp, #4
    3742:	bl	37b6 <i2c_class::read(unsigned char, unsigned char)>
    3746:	movs	r3, #0
    3748:	mov	r1, r0
    374a:	movs	r2, #16
    374c:	mov	r0, r4
    374e:	bl	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3752:	mov	r0, r4
    3754:	bl	c258 <Print::println()>
    }
    3758:	add	sp, #8
    375a:	pop	{r4, pc}
    375c:	.word	0x20001cec
    3760:	.word	0x000186a0
    3764:	.word	0x20001e3c
    3768:	.word	0x20001018
    376c:	.word	0x20001020

00003770 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3770:	push	{r0, r1, r2, r4, r5, lr}
    3772:	mov	r4, r1
    {   this->wire = wire;
    3774:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3776:	mov	r5, r0
        wire->begin();
    3778:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    377a:	str	r2, [sp, #4]
        wire->begin();
    377c:	bl	11c10 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    3780:	movs	r0, #100	; 0x64
    3782:	bl	b318 <delay>
        wire->setClock(speed);
    3786:	mov	r0, r4
    3788:	ldr	r1, [sp, #4]
    378a:	bl	503c <TwoWire::setClock(unsigned long)>
    }
    378e:	mov	r0, r5
    3790:	add	sp, #12
    3792:	pop	{r4, r5, pc}

00003794 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    3794:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    3796:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    3798:	ldr	r3, [r0, #0]
    379a:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    379e:	movs	r1, #1
    37a0:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    37a4:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    37a8:	ldr	r0, [r0, #0]
    37aa:	bl	4d88 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    37ae:	clz	r0, r0
    37b2:	lsrs	r0, r0, #5
    37b4:	pop	{r3, pc}

000037b6 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    37b6:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    37b8:	ldr	r3, [r0, #0]
		transmitting = 1;
    37ba:	movs	r6, #1
    { 
    37bc:	mov	r5, r1
		txBuffer[0] = (address << 1);
    37be:	lsls	r1, r1, #1
		transmitting = 1;
    37c0:	strb.w	r6, [r3, #304]	; 0x130
    37c4:	mov	r4, r0
		txBuffer[0] = (address << 1);
    37c6:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    37ca:	mov	r1, r2
		txBufferLength = 1;
    37cc:	strb.w	r6, [r3, #303]	; 0x12f
    37d0:	ldr	r0, [r0, #0]
    37d2:	ldr	r3, [r0, #0]
    37d4:	ldr	r3, [r3, #0]
    37d6:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    37d8:	movs	r1, #0
    37da:	ldr	r0, [r4, #0]
    37dc:	bl	4d88 <TwoWire::endTransmission(unsigned char)>
    37e0:	cbz	r0, 37e6 <i2c_class::read(unsigned char, unsigned char)+0x30>
    37e2:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    37e4:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    37e6:	mov	r3, r6
    37e8:	mov	r2, r6
    37ea:	mov	r1, r5
    37ec:	ldr	r0, [r4, #0]
    37ee:	bl	4e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    37f2:	cmp	r0, #0
    37f4:	beq.n	37e2 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    37f6:	ldr	r0, [r4, #0]
    37f8:	ldr	r3, [r0, #0]
    37fa:	ldr	r3, [r3, #20]
    37fc:	blx	r3
        return val;
    37fe:	uxtb	r0, r0
    3800:	b.n	37e4 <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003802 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    3802:	push	{r4, r5, r6, lr}
    3804:	mov	r4, r0
		transmitting = 1;
    3806:	movs	r5, #1
    3808:	mov	r6, r3
        wire->beginTransmission(addr);
    380a:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    380c:	lsls	r0, r1, #1
        wire->write(reg);
    380e:	mov	r1, r2
		transmitting = 1;
    3810:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3814:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    3818:	strb.w	r0, [r3, #165]	; 0xa5
    381c:	ldr	r0, [r4, #0]
    381e:	ldr	r3, [r0, #0]
    3820:	ldr	r3, [r3, #0]
    3822:	blx	r3
        wire->write(val);
    3824:	ldr	r0, [r4, #0]
    3826:	mov	r1, r6
    3828:	ldr	r3, [r0, #0]
    382a:	ldr	r3, [r3, #0]
    382c:	blx	r3
		return endTransmission(1);
    382e:	mov	r1, r5
    3830:	ldr	r0, [r4, #0]
    3832:	bl	4d88 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    3836:	clz	r0, r0
    383a:	lsrs	r0, r0, #5
    383c:	pop	{r4, r5, r6, pc}

0000383e <rtc_get_datetime(datetime_t*)>:
    383e:	movs	r0, #1
    3840:	bx	lr

00003842 <rtcSetDate(int, int, int)>:
    int16_t rtcSetup(uint8_t sda, uint8_t scl)  { return 1;  }

    bool rtc_get_datetime(datetime_t *t) { return 1;  }
    bool rtc_set_datetime(datetime_t *t) { return 1;  }

    void rtcSetDate(int year,int month,int day) {}
    3842:	bx	lr

00003844 <rtcSetTime(int, int, int)>:
    3844:	bx	lr

00003846 <rtcXferTime()>:
    void rtcSetTime(int hour,int minutes,int seconds) {}

    void rtcXferTime(void) {}
    3846:	bx	lr

00003848 <rtcGetTimestamp()>:

    char * rtcGetTimestamp(void) {return 0;}
    3848:	movs	r0, #0
    384a:	bx	lr

0000384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    384c:	push	{r3, r4, r5, lr}
    384e:	mov	r4, r0
    3850:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3852:	movs	r2, #60	; 0x3c
    3854:	mov	r1, r5
    3856:	mov	r0, r4
    3858:	bl	bde4 <usb_mtp_send>
    385c:	cmp	r0, #0
    385e:	ble.n	3852 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3860:	pop	{r3, r4, r5, pc}
	...

00003864 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    3864:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3868:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    386a:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    386e:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3870:	ldr.w	r3, [r1, #1064]	; 0x428
    3874:	cbnz	r3, 387e <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3876:	add.w	r2, r0, #544	; 0x220
    387a:	ldr	r4, [pc, #92]	; (38d8 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    387c:	str	r2, [r4, #0]
        write_length_ += len;
    387e:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3880:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3884:	add.w	r9, r0, #1056	; 0x420
    3888:	ldr.w	sl, [pc, #76]	; 38d8 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    388c:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3890:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    3894:	cmp	r6, r8
    3896:	bgt.n	389c <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3898:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    389c:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    38a0:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    38a4:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    38a6:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    38aa:	mov	r0, r3
    38ac:	cmp	r5, r2
    38ae:	it	ge
    38b0:	movge	r5, r2
    38b2:	mov	r2, r5
          pos += to_copy;
    38b4:	add	r8, r5
          memcpy(dst,src,to_copy);
    38b6:	bl	9dd0 <memcpy>
    38ba:	mov	r3, r0
          src += to_copy;
    38bc:	add	r7, r5
          dst += to_copy;
    38be:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38c0:	cmp	r9, r3
          dst += to_copy;
    38c2:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38c6:	bne.n	3894 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    38c8:	mov.w	r1, #512	; 0x200
    38cc:	mov	r0, r4
    38ce:	bl	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    38d2:	str.w	r4, [sl]
    38d6:	b.n	3894 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    38d8:	.word	0x20020850

000038dc <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    38dc:	push	{r4, r5, r6, lr}
    38de:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    38e0:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    38e2:	subs	r4, r1, #1
    int num = 0;
    38e4:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    38e6:	ldr	r3, [r0, #0]
    38e8:	mov	r1, r4
    38ea:	ldr	r3, [r3, #28]
    38ec:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    38ee:	ldr	r0, [r5, #0]
    38f0:	mov	r1, r4
    38f2:	ldr	r3, [r0, #0]
    38f4:	ldr	r3, [r3, #32]
    38f6:	blx	r3
    38f8:	cbnz	r0, 38fe <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    38fa:	mov	r0, r6
    38fc:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    38fe:	adds	r6, #1
    3900:	b.n	38ee <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003902 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3902:	ldr	r0, [r0, #0]
    3904:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3906:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3908:	ldr	r4, [r0, #0]
    390a:	ldr	r4, [r4, #76]	; 0x4c
    390c:	blx	r4
    }
    390e:	movw	r2, #8193	; 0x2001
    3912:	movw	r3, #8197	; 0x2005
    3916:	cmp	r0, #0
    3918:	ite	ne
    391a:	movne	r0, r2
    391c:	moveq	r0, r3
    391e:	pop	{r4, pc}

00003920 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3920:	ldr	r0, [r0, #0]
    3922:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3924:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    3926:	ldr	r4, [r0, #0]
    3928:	ldr	r4, [r4, #80]	; 0x50
    392a:	mov	ip, r4
    }
    392c:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3930:	bx	ip
	...

00003934 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3934:	ldr	r3, [pc, #8]	; (3940 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3936:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3938:	str	r1, [r3, #0]
      storage_->ResetIndex();
    393a:	ldr	r3, [r0, #0]
    393c:	ldr	r3, [r3, #68]	; 0x44
    393e:	bx	r3
    3940:	.word	0x200211b0

00003944 <MTPD::pull_packet(unsigned char*)>:
    {
    3944:	push	{r4, lr}
    3946:	mov	r4, r1
      while(!usb_mtp_available());
    3948:	bl	bdb4 <usb_mtp_available>
    394c:	cmp	r0, #0
    394e:	beq.n	3948 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    3950:	mov	r0, r4
    3952:	movs	r1, #60	; 0x3c
    }
    3954:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3958:	b.w	bd20 <usb_mtp_recv>

0000395c <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    395c:	add.w	r3, r0, #8192	; 0x2000
    3960:	push	{r4, r5}
    3962:	ldrb.w	r5, [r3, #1060]	; 0x424
    3966:	cbz	r5, 3976 <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3968:	ldr.w	r1, [r3, #1064]	; 0x428
    396c:	add	r1, r2
    }
    396e:	pop	{r4, r5}
        write_length_ += len;
    3970:	str.w	r1, [r3, #1064]	; 0x428
    }
    3974:	bx	lr
    3976:	pop	{r4, r5}
    3978:	b.w	3864 <MTPD::write(char const*, int) [clone .part.0]>

0000397c <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    397c:	push	{r0, r1, r2, lr}
    397e:	movs	r2, #1
    3980:	strb.w	r1, [sp, #7]
    3984:	add.w	r1, sp, #7
    3988:	bl	395c <MTPD::write(char const*, int)>
    398c:	add	sp, #12
    398e:	ldr.w	pc, [sp], #4

00003992 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3992:	push	{r0, r1, r2, lr}
    3994:	movs	r2, #2
    3996:	strh.w	r1, [sp, #6]
    399a:	add.w	r1, sp, #6
    399e:	bl	395c <MTPD::write(char const*, int)>
    39a2:	add	sp, #12
    39a4:	ldr.w	pc, [sp], #4

000039a8 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    39a8:	push	{r3, r4, r5, lr}
    39aa:	mov	r4, r1
    if (*str) 
    39ac:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    39ae:	mov	r5, r0
    if (*str) 
    39b0:	cbz	r1, 39da <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    39b2:	mov	r0, r4
    39b4:	subs	r4, #1
    39b6:	bl	e900 <strlen>
    39ba:	adds	r0, #1
    39bc:	uxtb	r1, r0
    39be:	mov	r0, r5
    39c0:	bl	397c <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    39c4:	ldrb.w	r1, [r4, #1]!
    39c8:	mov	r0, r5
    39ca:	cbnz	r1, 39d4 <MTPD::writestring(char const*)+0x2c>
  }
    39cc:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    39d0:	b.w	3992 <MTPD::write16(unsigned short)>
    39d4:	bl	3992 <MTPD::write16(unsigned short)>
    39d8:	b.n	39c4 <MTPD::writestring(char const*)+0x1c>
  }
    39da:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    39de:	b.w	397c <MTPD::write8(unsigned char)>
	...

000039e4 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    39e4:	movw	r3, #54274	; 0xd402
    39e8:	cmp	r1, r3
    39ea:	bne.n	39f2 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    39ec:	ldr	r1, [pc, #4]	; (39f4 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    39ee:	b.w	39a8 <MTPD::writestring(char const*)>
  }
    39f2:	bx	lr
    39f4:	.word	0x20001143

000039f8 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    39f8:	movw	r3, #54274	; 0xd402
    39fc:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    39fe:	push	{r4, lr}
    3a00:	mov	r4, r0
    switch (prop) {
    3a02:	bne.n	3a36 <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3a04:	bl	3992 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3a08:	mov	r0, r4
    3a0a:	movw	r1, #65535	; 0xffff
    3a0e:	bl	3992 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3a12:	mov	r0, r4
    3a14:	movs	r1, #0
    3a16:	bl	397c <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    3a1a:	mov	r0, r4
    3a1c:	ldr	r1, [pc, #24]	; (3a38 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3a1e:	bl	39a8 <MTPD::writestring(char const*)>
    3a22:	mov	r0, r4
    3a24:	ldr	r1, [pc, #16]	; (3a38 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3a26:	bl	39a8 <MTPD::writestring(char const*)>
        write8(0);       // no form
    3a2a:	mov	r0, r4
    3a2c:	movs	r1, #0
  }
    3a2e:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3a32:	b.w	397c <MTPD::write8(unsigned char)>
  }
    3a36:	pop	{r4, pc}
    3a38:	.word	0x20001143

00003a3c <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    3a3c:	push	{r0, r1, r2, lr}
    3a3e:	movs	r2, #4
    3a40:	str	r1, [sp, #4]
    3a42:	add.w	r1, sp, r2
    3a46:	bl	395c <MTPD::write(char const*, int)>
    3a4a:	add	sp, #12
    3a4c:	ldr.w	pc, [sp], #4

00003a50 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    3a50:	push	{r4, r5, r6, lr}
    3a52:	mov	r4, r0
    3a54:	sub	sp, #24
    write16(100);  // MTP version
    3a56:	movs	r1, #100	; 0x64
    3a58:	ldr	r6, [pc, #240]	; (3b4c <MTPD::WriteDescriptor()+0xfc>)
    3a5a:	bl	3992 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3a5e:	movs	r1, #6
    3a60:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3a62:	movs	r5, #0
    write32(6);    // MTP extension
    3a64:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3a68:	movs	r1, #100	; 0x64
    3a6a:	mov	r0, r4
    3a6c:	bl	3992 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3a70:	ldr	r1, [pc, #220]	; (3b50 <MTPD::WriteDescriptor()+0x100>)
    3a72:	mov	r0, r4
    3a74:	bl	39a8 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3a78:	movs	r1, #0
    3a7a:	mov	r0, r4
    3a7c:	bl	3992 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3a80:	movs	r1, #20
    3a82:	mov	r0, r4
    3a84:	bl	3a3c <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3a88:	adds	r5, #1
    3a8a:	ldrh.w	r1, [r6], #2
    3a8e:	mov	r0, r4
    3a90:	bl	3992 <MTPD::write16(unsigned short)>
    3a94:	cmp	r5, #20
    3a96:	bne.n	3a88 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3a98:	movs	r1, #4
    3a9a:	mov	r0, r4
    3a9c:	bl	3a3c <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3aa0:	movw	r1, #16388	; 0x4004
    3aa4:	mov	r0, r4
    3aa6:	bl	3992 <MTPD::write16(unsigned short)>
    3aaa:	movw	r1, #16389	; 0x4005
    3aae:	mov	r0, r4
    3ab0:	bl	3992 <MTPD::write16(unsigned short)>
    3ab4:	movw	r1, #16395	; 0x400b
    3ab8:	mov	r0, r4
    3aba:	bl	3992 <MTPD::write16(unsigned short)>
    3abe:	movw	r1, #16396	; 0x400c
    3ac2:	mov	r0, r4
    3ac4:	bl	3992 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3ac8:	movs	r1, #1
    3aca:	mov	r0, r4
    3acc:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3ad0:	movw	r1, #54274	; 0xd402
    3ad4:	mov	r0, r4
    3ad6:	bl	3992 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3ada:	movs	r1, #0
    3adc:	mov	r0, r4
    3ade:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3ae2:	movs	r1, #2
    3ae4:	mov	r0, r4
    3ae6:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3aea:	mov.w	r1, #12288	; 0x3000
    3aee:	mov	r0, r4
    3af0:	bl	3992 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3af4:	movw	r1, #12289	; 0x3001
    3af8:	mov	r0, r4
    3afa:	bl	3992 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3afe:	ldr	r1, [pc, #84]	; (3b54 <MTPD::WriteDescriptor()+0x104>)
    3b00:	mov	r0, r4
    3b02:	bl	39a8 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3b06:	ldr	r1, [pc, #80]	; (3b58 <MTPD::WriteDescriptor()+0x108>)
    3b08:	mov	r0, r4
    3b0a:	bl	39a8 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3b0e:	vldr	s0, [pc, #76]	; 3b5c <MTPD::WriteDescriptor()+0x10c>
    3b12:	add	r2, sp, #4
    3b14:	movs	r1, #2
    3b16:	movs	r0, #3
    3b18:	bl	b084 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3b1c:	mov	r2, r5
    3b1e:	ldr	r1, [pc, #64]	; (3b60 <MTPD::WriteDescriptor()+0x110>)
    3b20:	add	r0, sp, #4
    3b22:	bl	e6a0 <strlcat>
    writestring( buf );    
    3b26:	add	r1, sp, #4
    3b28:	mov	r0, r4
    3b2a:	bl	39a8 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3b2e:	ldr	r1, [pc, #52]	; (3b64 <MTPD::WriteDescriptor()+0x114>)
    3b30:	add	r2, sp, #4
    writestring( buf );    
    3b32:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3b34:	ldrh.w	r0, [r1, #2]!
    3b38:	subs	r3, #1
    3b3a:	strb.w	r0, [r2], #1
    3b3e:	bne.n	3b34 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3b40:	add	r1, sp, #4
    3b42:	mov	r0, r4
    3b44:	bl	39a8 <MTPD::writestring(char const*)>
  }
    3b48:	add	sp, #24
    3b4a:	pop	{r4, r5, r6, pc}
    3b4c:	.word	0x20000b70
    3b50:	.word	0x2000111f
    3b54:	.word	0x20001133
    3b58:	.word	0x20001143
    3b5c:	.word	0x3fcb851f
    3b60:	.word	0x20001138
    3b64:	.word	0x200022ba

00003b68 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3b68:	push	{r4, r5, r6, lr}
    3b6a:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3b6c:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3b6e:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3b70:	ldr	r3, [r0, #0]
    3b72:	ldr	r3, [r3, #4]
    3b74:	blx	r3
    write32(num); // number of storages (disks)
    3b76:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3b78:	mov	r5, r0
    write32(num); // number of storages (disks)
    3b7a:	mov	r0, r4
    3b7c:	bl	3a3c <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3b80:	cmp	r6, r5
    3b82:	bne.n	3b86 <MTPD::WriteStorageIDs()+0x1e>
  }
    3b84:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3b86:	adds	r6, #1
    3b88:	mov	r0, r4
    3b8a:	mov	r1, r6
    3b8c:	bl	3a3c <MTPD::write32(unsigned long)>
    3b90:	b.n	3b80 <MTPD::WriteStorageIDs()+0x18>

00003b92 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3b92:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    3b94:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3b98:	mov	r4, r0
    3b9a:	mov	r6, r2
    if (write_get_length_) {
    3b9c:	ldrb.w	r3, [r7, #1060]	; 0x424
    3ba0:	cbz	r3, 3bb0 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    3ba2:	bl	38dc <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    3ba6:	adds	r0, #1
      write_length_ *= 4;
    3ba8:	lsls	r0, r0, #2
    3baa:	str.w	r0, [r7, #1064]	; 0x428
  }
    3bae:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3bb0:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    3bb2:	bl	38dc <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3bb6:	mov	r1, r0
    3bb8:	mov	r0, r4
    3bba:	bl	3a3c <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    3bbe:	ldr	r0, [r4, #0]
    3bc0:	mov	r2, r6
    3bc2:	mov	r1, r5
    3bc4:	ldr	r3, [r0, #0]
    3bc6:	ldr	r3, [r3, #28]
    3bc8:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    3bca:	ldr	r0, [r4, #0]
    3bcc:	mov	r1, r5
    3bce:	ldr	r3, [r0, #0]
    3bd0:	ldr	r3, [r3, #32]
    3bd2:	blx	r3
    3bd4:	mov	r1, r0
    3bd6:	cmp	r0, #0
    3bd8:	beq.n	3bae <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    3bda:	mov	r0, r4
    3bdc:	bl	3a3c <MTPD::write32(unsigned long)>
    3be0:	b.n	3bca <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00003be4 <MTPD::GetObjectInfo(unsigned long)>:
  {
    3be4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3be8:	mov	r4, r0
    3bea:	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    3bec:	ldr	r0, [r0, #0]
    3bee:	add	r5, sp, #96	; 0x60
    3bf0:	add	r6, sp, #32
    3bf2:	ldr	r3, [r0, #0]
    3bf4:	add.w	r8, sp, #22
    3bf8:	add	r7, sp, #28
    3bfa:	add	r2, sp, #160	; 0xa0
    3bfc:	str	r5, [sp, #12]
    3bfe:	str	r6, [sp, #8]
    3c00:	str.w	r8, [sp, #4]
    3c04:	str	r7, [sp, #0]
    3c06:	ldr.w	r9, [r3, #36]	; 0x24
    3c0a:	add	r3, sp, #24
    3c0c:	blx	r9
    uint32_t storage = Store2Storage(store);
    3c0e:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    3c12:	mov	r0, r4
    3c14:	adds	r1, #1
    3c16:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    3c1a:	ldr	r3, [sp, #24]
    3c1c:	movw	r1, #12289	; 0x3001
    3c20:	mov	r0, r4
    3c22:	adds	r3, #1
    3c24:	it	ne
    3c26:	movne	r1, #0
    3c28:	bl	3992 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    3c2c:	mov	r0, r4
    3c2e:	movs	r1, #0
    3c30:	bl	3992 <MTPD::write16(unsigned short)>
    write32(size); // size
    3c34:	ldr	r1, [sp, #24]
    3c36:	mov	r0, r4
    3c38:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    3c3c:	mov	r0, r4
    3c3e:	movs	r1, #0
    3c40:	bl	3992 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    3c44:	mov	r0, r4
    3c46:	movs	r1, #0
    3c48:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    3c4c:	mov	r0, r4
    3c4e:	movs	r1, #0
    3c50:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    3c54:	mov	r0, r4
    3c56:	movs	r1, #0
    3c58:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0); // pix width
    3c5c:	mov	r0, r4
    3c5e:	movs	r1, #0
    3c60:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0); // pix height
    3c64:	mov	r0, r4
    3c66:	movs	r1, #0
    3c68:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    3c6c:	mov	r0, r4
    3c6e:	movs	r1, #0
    3c70:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(parent); // parent
    3c74:	ldr	r1, [sp, #28]
    3c76:	mov	r0, r4
    3c78:	bl	3a3c <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    3c7c:	ldr	r1, [sp, #24]
    3c7e:	mov	r0, r4
    3c80:	adds	r3, r1, #1
    3c82:	negs	r1, r3
    3c84:	adcs	r1, r3
    3c86:	bl	3992 <MTPD::write16(unsigned short)>
    write32(0); // association description
    3c8a:	mov	r0, r4
    3c8c:	movs	r1, #0
    3c8e:	bl	3a3c <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    3c92:	mov	r0, r4
    3c94:	movs	r1, #0
    3c96:	bl	3a3c <MTPD::write32(unsigned long)>
    writestring(filename);
    3c9a:	add	r1, sp, #160	; 0xa0
    3c9c:	mov	r0, r4
    3c9e:	bl	39a8 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    3ca2:	mov	r1, r6
    3ca4:	mov	r0, r4
    3ca6:	bl	39a8 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    3caa:	mov	r1, r5
    3cac:	mov	r0, r4
    3cae:	bl	39a8 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    3cb2:	ldr	r1, [pc, #12]	; (3cc0 <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    3cb4:	mov	r0, r4
    3cb6:	bl	39a8 <MTPD::writestring(char const*)>
  }
    3cba:	add	sp, #420	; 0x1a4
    3cbc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3cc0:	.word	0x20000db9

00003cc4 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    3cc4:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    3cc6:	ldr	r6, [pc, #36]	; (3cec <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3cc8:	movs	r4, #0
    3cca:	ldr	r7, [pc, #36]	; (3cf0 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    3ccc:	mov	r5, r0
      write32(propertyListNum);
    3cce:	ldr	r1, [r6, #0]
    3cd0:	bl	3a3c <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3cd4:	ldr	r3, [r6, #0]
    3cd6:	cmp	r3, r4
    3cd8:	bhi.n	3cdc <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    3cda:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3cdc:	ldrh.w	r1, [r7], #2
    3ce0:	mov	r0, r5
    3ce2:	adds	r4, #1
    3ce4:	bl	3992 <MTPD::write16(unsigned short)>
    3ce8:	b.n	3cd4 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    3cea:	nop
    3cec:	.word	0x20002294
    3cf0:	.word	0x20000b5c

00003cf4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    3cf4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cf8:	mov	r4, r0
    3cfa:	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3cfc:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    3cfe:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3d00:	add.w	r8, sp, #22
    3d04:	add.w	r9, sp, #96	; 0x60
    3d08:	ldr	r3, [r0, #0]
    3d0a:	add.w	sl, sp, #32
    3d0e:	add	r6, sp, #28
    3d10:	str.w	r8, [sp, #4]
    3d14:	add	r2, sp, #160	; 0xa0
    3d16:	str.w	r9, [sp, #12]
    3d1a:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    3d1e:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    3d20:	str	r6, [sp, #0]
    3d22:	ldr.w	fp, [r3, #36]	; 0x24
    3d26:	add	r3, sp, #24
    3d28:	blx	fp
      switch(p2)
    3d2a:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    3d2e:	ldrh.w	r3, [sp, #22]
      switch(p2)
    3d32:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    3d34:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    3d36:	add.w	r8, r3, #1
      switch(p2)
    3d3a:	bhi.n	3d5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    3d3c:	cmp.w	r5, #56320	; 0xdc00
    3d40:	bls.n	3d6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    3d42:	sub.w	r5, r5, #56320	; 0xdc00
    3d46:	subs	r5, #1
    3d48:	cmp	r5, #10
    3d4a:	bhi.n	3d6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    3d4c:	tbb	[pc, r5]
    3d50:	.word	0x39201611
    3d54:	.word	0x27220e0e
    3d58:	.short	0x0e29
    3d5a:	.byte	0x2b
    3d5b:	.byte	0x00
    3d5c:	movw	r3, #56385	; 0xdc41
    3d60:	cmp	r5, r3
    3d62:	beq.n	3db0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    3d64:	movw	r3, #56388	; 0xdc44
    3d68:	cmp	r5, r3
    3d6a:	beq.n	3d94 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    3d6c:	add	sp, #420	; 0x1a4
    3d6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    3d72:	mov	r1, r8
          write32(0);
    3d74:	mov	r0, r4
    3d76:	bl	3a3c <MTPD::write32(unsigned long)>
    }
    3d7a:	b.n	3d6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    3d7c:	adds	r1, #1
    3d7e:	movw	r1, #12289	; 0x3001
    3d82:	it	ne
    3d84:	movne.w	r1, #12288	; 0x3000
          write16(0);
    3d88:	mov	r0, r4
    3d8a:	bl	3992 <MTPD::write16(unsigned short)>
          break;
    3d8e:	b.n	3d6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    3d90:	movs	r1, #0
    3d92:	b.n	3d88 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    3d94:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    3d96:	mov	r0, r4
    3d98:	bl	39a8 <MTPD::writestring(char const*)>
          break;
    3d9c:	b.n	3d6c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    3d9e:	mov	r1, sl
    3da0:	b.n	3d96 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    3da2:	mov	r1, r9
    3da4:	b.n	3d96 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    3da6:	ldr	r1, [r6, #0]
    3da8:	cmp	r3, r1
    3daa:	it	eq
    3dac:	moveq	r1, #0
    3dae:	b.n	3d74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    3db0:	mov	r1, r7
    3db2:	mov	r0, r4
    3db4:	bl	3a3c <MTPD::write32(unsigned long)>
          write32(parent);
    3db8:	ldr	r1, [r6, #0]
    3dba:	mov	r0, r4
    3dbc:	bl	3a3c <MTPD::write32(unsigned long)>
          write32(storage);
    3dc0:	mov	r1, r8
    3dc2:	mov	r0, r4
    3dc4:	bl	3a3c <MTPD::write32(unsigned long)>
          write32(0);
    3dc8:	movs	r1, #0
    3dca:	b.n	3d74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00003dcc <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    3dcc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dd0:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3dd2:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    3dd4:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    3dd6:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3dd8:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3dda:	mov.w	fp, #0
    3dde:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    3de0:	ldr	r6, [pc, #228]	; (3ec8 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    3de2:	ldr	r3, [r3, #20]
    3de4:	blx	r3
    3de6:	cmp	r0, #0
    3de8:	mov	r0, r4
    3dea:	ite	ne
    3dec:	movne	r1, #1
    3dee:	moveq	r1, #4
    3df0:	bl	3992 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    3df4:	ldr	r0, [r4, #0]
    3df6:	mov	r1, r7
    3df8:	ldr	r3, [r0, #0]
    3dfa:	ldr	r3, [r3, #24]
    3dfc:	blx	r3
    3dfe:	adds	r0, #1
    3e00:	uxth	r1, r0
    3e02:	mov	r0, r4
    3e04:	bl	3992 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    3e08:	mov	r0, r4
    3e0a:	movs	r1, #0
    3e0c:	bl	3992 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    3e10:	ldr	r0, [r4, #0]
    3e12:	mov	r1, r7
    3e14:	ldr	r3, [r0, #0]
    3e16:	ldr	r3, [r3, #12]
    3e18:	blx	r3
    3e1a:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    3e1c:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    3e1e:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    3e20:	mov	r1, r7
    3e22:	ldr	r3, [r0, #0]
    3e24:	ldr	r3, [r3, #16]
    3e26:	blx	r3
    3e28:	ldr	r3, [r6, #0]
    3e2a:	mov	r9, r0
    3e2c:	mov	sl, r1
    3e2e:	ldr	r3, [r3, #4]
    3e30:	movs	r2, #5
    3e32:	ldr	r1, [pc, #152]	; (3ecc <MTPD::GetStorageInfo(unsigned long)+0x100>)
    3e34:	mov	r0, r6
    3e36:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3e38:	movs	r3, #10
    3e3a:	mov	r2, r5
    3e3c:	mov	r0, r6
    3e3e:	strd	r3, fp, [sp]
    3e42:	mov	r3, r8
    3e44:	bl	c2be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3e48:	mov	r0, r6
    3e4a:	bl	c258 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    3e4e:	ldr	r3, [r6, #0]
    3e50:	ldr	r1, [pc, #124]	; (3ed0 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    3e52:	movs	r2, #5
    3e54:	ldr	r3, [r3, #4]
    3e56:	mov	r0, r6
    3e58:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3e5a:	movs	r3, #10
    3e5c:	mov	r2, r9
    3e5e:	mov	r0, r6
    3e60:	str	r3, [sp, #0]
    3e62:	mov	r3, sl
    3e64:	str.w	fp, [sp, #4]
    3e68:	bl	c2be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3e6c:	mov	r0, r6
    3e6e:	bl	c258 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3e72:	movs	r2, #8
    3e74:	mov	r0, r4
    3e76:	add.w	r1, sp, r2
    3e7a:	strd	r5, r8, [sp, #8]
    3e7e:	bl	395c <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    3e82:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3e86:	mov.w	r2, #8
    3e8a:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    3e8c:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3e90:	add.w	r1, sp, r2
    3e94:	strd	r5, r3, [sp, #8]
    3e98:	bl	395c <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    3e9c:	mov	r0, r4
    3e9e:	mov.w	r1, #4294967295
    3ea2:	bl	3a3c <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    3ea6:	ldr	r0, [r4, #0]
    3ea8:	mov	r1, r7
    3eaa:	ldr	r3, [r0, #0]
    3eac:	ldr	r3, [r3, #8]
    3eae:	blx	r3
    3eb0:	mov	r1, r0
    writestring(name);  // storage descriptor
    3eb2:	mov	r0, r4
    3eb4:	bl	39a8 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    3eb8:	ldr	r1, [pc, #24]	; (3ed4 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    3eba:	mov	r0, r4
  }
    3ebc:	add	sp, #20
    3ebe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    3ec2:	b.w	39a8 <MTPD::writestring(char const*)>
    3ec6:	nop
    3ec8:	.word	0x20001cec
    3ecc:	.word	0x20001113
    3ed0:	.word	0x20001119
    3ed4:	.word	0x20000db9

00003ed8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    3ed8:	movw	r2, #56331	; 0xdc0b
    3edc:	cmp	r1, r2
    {
    3ede:	push	{r0, r1, r4, r6, r7, lr}
    3ee0:	mov	r4, r0
      switch(p1)
    3ee2:	bhi.n	3f04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    3ee4:	cmp.w	r1, #56320	; 0xdc00
    3ee8:	bls.n	3f14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3eea:	sub.w	r3, r1, #56320	; 0xdc00
    3eee:	subs	r3, #1
    3ef0:	cmp	r3, #10
    3ef2:	bhi.n	3f14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3ef4:	tbb	[pc, r3]
    3ef8:	.word	0x413e2210
    3efc:	.word	0x69570e0e
    3f00:	.short	0x0e75
    3f02:	.byte	0x78
    3f03:	.byte	0x00
    3f04:	movw	r2, #56385	; 0xdc41
    3f08:	cmp	r1, r2
    3f0a:	beq.n	3fee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    3f0c:	movw	r2, #56388	; 0xdc44
    3f10:	cmp	r1, r2
    3f12:	beq.n	3fd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    3f14:	add	sp, #8
    3f16:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    3f18:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    3f1c:	mov	r0, r4
    3f1e:	bl	3992 <MTPD::write16(unsigned short)>
          write16(6);
    3f22:	mov	r0, r4
    3f24:	movs	r1, #6
    3f26:	bl	3992 <MTPD::write16(unsigned short)>
          write8(0); //get
    3f2a:	mov	r0, r4
    3f2c:	movs	r1, #0
    3f2e:	bl	397c <MTPD::write8(unsigned char)>
          write32(0);
    3f32:	movs	r1, #0
    3f34:	mov	r0, r4
    3f36:	bl	3a3c <MTPD::write32(unsigned long)>
          write32(0);
    3f3a:	b.n	3f5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    3f3c:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    3f40:	mov	r0, r4
    3f42:	bl	3992 <MTPD::write16(unsigned short)>
          write16(0x004);
    3f46:	movs	r1, #4
    3f48:	mov	r0, r4
    3f4a:	bl	3992 <MTPD::write16(unsigned short)>
          write8(0); //get
    3f4e:	movs	r1, #0
    3f50:	mov	r0, r4
    3f52:	bl	397c <MTPD::write8(unsigned char)>
          write16(0);
    3f56:	movs	r1, #0
    3f58:	mov	r0, r4
    3f5a:	bl	3992 <MTPD::write16(unsigned short)>
          write32(0);
    3f5e:	mov	r0, r4
    3f60:	movs	r1, #0
    3f62:	bl	3a3c <MTPD::write32(unsigned long)>
          write8(0);
    3f66:	movs	r1, #0
    3f68:	mov	r0, r4
    }
    3f6a:	add	sp, #8
    3f6c:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    3f70:	b.w	397c <MTPD::write8(unsigned char)>
          write16(0xDC03);
    3f74:	movw	r1, #56323	; 0xdc03
    3f78:	b.n	3f40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    3f7a:	movw	r1, #56324	; 0xdc04
    3f7e:	bl	3992 <MTPD::write16(unsigned short)>
          write16(0x008);
    3f82:	movs	r1, #8
    3f84:	mov	r0, r4
    3f86:	bl	3992 <MTPD::write16(unsigned short)>
          write8(0); //get
    3f8a:	movs	r1, #0
    3f8c:	mov	r0, r4
    3f8e:	bl	397c <MTPD::write8(unsigned char)>
          write64(0);
    3f92:	movs	r2, #0
    3f94:	movs	r3, #0
    3f96:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3f9a:	movs	r2, #8
    3f9c:	mov	r1, sp
    3f9e:	mov	r0, r4
    3fa0:	bl	395c <MTPD::write(char const*, int)>
          write32(0);
    3fa4:	b.n	3f5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    3fa6:	movw	r1, #56327	; 0xdc07
    3faa:	bl	3992 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3fae:	movw	r1, #65535	; 0xffff
    3fb2:	mov	r0, r4
    3fb4:	bl	3992 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    3fb8:	movs	r1, #1
          write8(0); //get
    3fba:	mov	r0, r4
    3fbc:	bl	397c <MTPD::write8(unsigned char)>
          write8(0);
    3fc0:	movs	r1, #0
    3fc2:	mov	r0, r4
    3fc4:	bl	397c <MTPD::write8(unsigned char)>
    3fc8:	b.n	3f5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    3fca:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    3fce:	mov	r0, r4
          write16(0xDC44);
    3fd0:	bl	3992 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3fd4:	movw	r1, #65535	; 0xffff
    3fd8:	mov	r0, r4
    3fda:	bl	3992 <MTPD::write16(unsigned short)>
          write8(0); //get
    3fde:	movs	r1, #0
    3fe0:	b.n	3fba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    3fe2:	movw	r1, #56329	; 0xdc09
    3fe6:	b.n	3fce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    3fe8:	movw	r1, #56331	; 0xdc0b
    3fec:	b.n	3f1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    3fee:	bl	3992 <MTPD::write16(unsigned short)>
          write16(0x0A);
    3ff2:	movs	r1, #10
    3ff4:	mov	r0, r4
    3ff6:	movs	r6, #0
    3ff8:	bl	3992 <MTPD::write16(unsigned short)>
          write8(0); //get
    3ffc:	movs	r7, #0
    3ffe:	movs	r1, #0
    4000:	mov	r0, r4
    4002:	bl	397c <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4006:	movs	r2, #8
    4008:	mov	r1, sp
    400a:	mov	r0, r4
    400c:	strd	r6, r7, [sp]
    4010:	bl	395c <MTPD::write(char const*, int)>
          write64(0);
    4014:	strd	r6, r7, [sp]
    4018:	b.n	3f9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

0000401a <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    401a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    401e:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    4020:	ldr	r0, [r0, #0]
    4022:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    4024:	add.w	r5, r6, #8192	; 0x2000
    {
    4028:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    402c:	ldr	r3, [r3, #40]	; 0x28
    {
    402e:	sub	sp, #20
    4030:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4034:	blx	r3
      if (write_get_length_) {
    4036:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    403a:	mov	r8, r0
      if (write_get_length_) {
    403c:	cbz	r4, 4052 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    403e:	ldr.w	r3, [r5, #1064]	; 0x428
    4042:	add	r3, r0
    4044:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    4048:	add	sp, #20
    404a:	vpop	{d8}
    404e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4052:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4056:	movs	r7, #12
    4058:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    405c:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4060:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    4064:	str	r4, [sp, #12]
        while(pos<size)
    4066:	ldr	r3, [sp, #12]
    4068:	cmp	r3, r8
    406a:	bcc.n	4086 <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    406c:	cmp	r7, #0
    406e:	beq.n	4048 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4070:	mov.w	r1, #512	; 0x200
    4074:	add.w	r0, r6, #544	; 0x220
    }
    4078:	add	sp, #20
    407a:	vpop	{d8}
    407e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4082:	b.w	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    4086:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    408a:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    408c:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4090:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    4094:	bne.n	40b8 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4096:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    4098:	cmp.w	r9, #8192	; 0x2000
    409c:	it	cc
    409e:	movcc	r3, r9
    40a0:	vmov	r1, s16
    40a4:	ldr	r2, [r0, #0]
    40a6:	str	r3, [sp, #0]
    40a8:	ldr	r3, [r2, #48]	; 0x30
    40aa:	ldr	r2, [sp, #12]
    40ac:	mov	r4, r3
    40ae:	mov	r3, fp
    40b0:	blx	r4
            disk_pos=0;
    40b2:	movs	r3, #0
    40b4:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    40b8:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    40bc:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40c0:	add.w	r0, sl, r7
    40c4:	cmp	r9, r3
    40c6:	it	cs
    40c8:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    40ca:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40ce:	add	r1, fp
    40d0:	cmp	r9, r3
    40d2:	it	cs
    40d4:	movcs	r9, r3
    40d6:	mov	r2, r9
          len += to_copy;
    40d8:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    40da:	bl	9dd0 <memcpy>
          disk_pos += to_copy;
    40de:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    40e2:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    40e6:	add	r3, r9
    40e8:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    40ec:	ldr	r3, [sp, #12]
    40ee:	add	r3, r9
    40f0:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    40f2:	bne.n	4066 <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    40f4:	mov	r1, r7
    40f6:	mov	r0, sl
            len=0;
    40f8:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    40fa:	bl	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    40fe:	b.n	4066 <MTPD::GetObject(unsigned long)+0x4c>

00004100 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4100:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4104:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4106:	ldr	r0, [r0, #0]
    {
    4108:	mov	r4, r3
    410a:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    410c:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    410e:	add.w	r5, r8, #8192	; 0x2000
    {
    4112:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    4116:	ldr	r3, [r3, #40]	; 0x28
    {
    4118:	sub	sp, #20
    411a:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    411e:	blx	r3
      size -= offset;
    4120:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    4122:	cmp.w	r4, #4294967295
    4126:	it	eq
    4128:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    412a:	cmp	r4, r0
    412c:	mov	r3, r4
    412e:	it	cs
    4130:	movcs	r3, r0
    4132:	str	r3, [sp, #8]
      if (write_get_length_) {
    4134:	ldrb.w	r3, [r5, #1060]	; 0x424
    4138:	str	r3, [sp, #12]
    413a:	cbz	r3, 4154 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    413c:	ldr.w	r3, [r5, #1064]	; 0x428
    4140:	ldr	r2, [sp, #8]
    4142:	add	r3, r2
    4144:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    4148:	ldr	r0, [sp, #8]
    414a:	add	sp, #20
    414c:	vpop	{d8}
    4150:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4154:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4158:	movs	r7, #12
    415a:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    415e:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4162:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    4166:	ldr	r3, [sp, #8]
    4168:	cmp	r3, r6
    416a:	bls.n	4148 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    416c:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4170:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    4172:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4176:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    417a:	bne.n	41a0 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    417c:	ldr.w	r0, [r8]
    4180:	cmp.w	r9, #8192	; 0x2000
    4184:	it	cc
    4186:	movcc	r3, r9
    4188:	vmov	r1, s16
    418c:	ldr	r2, [r0, #0]
    418e:	str	r3, [sp, #0]
    4190:	ldr	r3, [r2, #48]	; 0x30
    4192:	mov	r2, r6
    4194:	mov	r4, r3
    4196:	mov	r3, fp
    4198:	blx	r4
            disk_pos=0;
    419a:	ldr	r3, [sp, #12]
    419c:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    41a0:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    41a4:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    41a8:	add.w	r0, sl, r7
    41ac:	cmp	r9, r3
    41ae:	it	cs
    41b0:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    41b2:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    41b6:	add	r1, fp
    41b8:	cmp	r9, r3
    41ba:	it	cs
    41bc:	movcs	r9, r3
    41be:	mov	r2, r9
          len += to_copy;
    41c0:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    41c2:	bl	9dd0 <memcpy>
          disk_pos += to_copy;
    41c6:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    41ca:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    41ce:	add	r6, r9
          disk_pos += to_copy;
    41d0:	add	r3, r9
    41d2:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    41d6:	bne.n	4166 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    41d8:	mov	r1, r7
    41da:	mov	r0, sl
            len=0;
    41dc:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    41de:	bl	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    41e2:	b.n	4166 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

000041e4 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    41e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41e8:	mov	r8, r0
    41ea:	mov	r5, r1
      static int index=0;
      if(!size) 
    41ec:	mov	r4, r2
    41ee:	ldr.w	fp, [pc, #84]	; 4244 <MTPD::read(char*, unsigned long)+0x60>
    41f2:	cbz	r2, 423a <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    41f4:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    41f8:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    41fc:	ldr.w	r6, [fp]
    4200:	rsb	r7, r6, #512	; 0x200
    4204:	cmp	r7, r4
    4206:	it	cs
    4208:	movcs	r7, r4
        if (data) {
    420a:	cbz	r5, 421a <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    420c:	mov	r0, r5
          data += to_copy;
    420e:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4210:	mov	r2, r7
    4212:	add.w	r1, r9, r6
    4216:	bl	9dd0 <memcpy>
        index += to_copy;
    421a:	add	r6, r7
        size -= to_copy;
    421c:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    421e:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4222:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    4226:	bne.n	4234 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4228:	mov	r1, r9
    422a:	mov	r0, r8
    422c:	bl	3944 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4230:	str.w	sl, [fp]
      while (size) {
    4234:	cmp	r4, #0
    4236:	bne.n	41fc <MTPD::read(char*, unsigned long)+0x18>
    4238:	b.n	423e <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    423a:	str.w	r2, [fp]
        }
      }
    }
    423e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4242:	nop
    4244:	.word	0x2002084c

00004248 <MTPD::ReadMTPHeader()>:
  {
    4248:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    424a:	movs	r2, #12
    424c:	add	r1, sp, #4
    424e:	bl	41e4 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4252:	ldrh.w	r3, [sp, #8]
    4256:	cmp	r3, #2
      return header.len - 12;
    4258:	itet	eq
    425a:	ldreq	r0, [sp, #4]
      return 0;
    425c:	movne	r0, #0
      return header.len - 12;
    425e:	subeq	r0, #12
  }
    4260:	add	sp, #20
    4262:	ldr.w	pc, [sp], #4

00004266 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4266:	push	{r0, r1, r2, lr}
    4268:	movs	r2, #1
    426a:	add.w	r1, sp, #7
    426e:	bl	41e4 <MTPD::read(char*, unsigned long)>
    4272:	ldrb.w	r0, [sp, #7]
    4276:	add	sp, #12
    4278:	ldr.w	pc, [sp], #4

0000427c <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    427c:	push	{r0, r1, r2, lr}
    427e:	movs	r2, #2
    4280:	add.w	r1, sp, #6
    4284:	bl	41e4 <MTPD::read(char*, unsigned long)>
    4288:	ldrh.w	r0, [sp, #6]
    428c:	add	sp, #12
    428e:	ldr.w	pc, [sp], #4

00004292 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4292:	push	{r0, r1, r2, lr}
    4294:	movs	r2, #4
    4296:	add.w	r1, sp, r2
    429a:	bl	41e4 <MTPD::read(char*, unsigned long)>
    429e:	ldr	r0, [sp, #4]
    42a0:	add	sp, #12
    42a2:	ldr.w	pc, [sp], #4

000042a6 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    42a6:	push	{r4, r5, r6, lr}
    42a8:	mov	r5, r1
    42aa:	mov	r6, r0
    int len = read8();
    42ac:	bl	4266 <MTPD::read8()>
    if (!buffer) {
    42b0:	cbz	r5, 42ba <MTPD::readstring(char*)+0x14>
    42b2:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    42b4:	cmp	r5, r4
    42b6:	bne.n	42ca <MTPD::readstring(char*)+0x24>
  }
    42b8:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    42ba:	sxth	r2, r0
    42bc:	mov	r1, r5
    42be:	mov	r0, r6
    42c0:	lsls	r2, r2, #1
  }
    42c2:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    42c6:	b.w	41e4 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    42ca:	mov	r0, r6
    42cc:	bl	427c <MTPD::read16()>
    42d0:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    42d4:	b.n	42b4 <MTPD::readstring(char*)+0xe>

000042d6 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    42d6:	push	{r4, r5, lr}
    42d8:	mov	r4, r0
    42da:	sub	sp, #260	; 0x104
    42dc:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    42de:	bl	4248 <MTPD::ReadMTPHeader()>
        readstring(filename);
    42e2:	mov	r1, sp
    42e4:	mov	r0, r4
    42e6:	bl	42a6 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    42ea:	ldr	r0, [r4, #0]
    42ec:	mov	r2, sp
    42ee:	mov	r1, r5
    42f0:	ldr	r3, [r0, #0]
    42f2:	ldr	r3, [r3, #72]	; 0x48
    42f4:	blx	r3
      }
      else
        return 0x2005;
    }
    42f6:	movw	r2, #8193	; 0x2001
    42fa:	movw	r3, #8197	; 0x2005
    42fe:	cmp	r0, #0
    4300:	ite	ne
    4302:	movne	r0, r2
    4304:	moveq	r0, r3
    4306:	add	sp, #260	; 0x104
    4308:	pop	{r4, r5, pc}
	...

0000430c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    430c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4310:	mov	r4, r0
    4312:	sub	sp, #268	; 0x10c
    4314:	mov	r6, r1
      pull_packet(rx_data_buffer);
    4316:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    431a:	mov	r7, r2
      pull_packet(rx_data_buffer);
    431c:	bl	3944 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4320:	movs	r2, #0
    4322:	ldr	r3, [pc, #196]	; (43e8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    4324:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4326:	add.w	r9, sp, #8
        index=0;
    432a:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    432c:	bl	4248 <MTPD::ReadMTPHeader()>
    4330:	mov	r5, r0
      read32(); len -=4; // storage
    4332:	mov	r0, r4
    4334:	bl	4292 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4338:	mov	r0, r4
    433a:	bl	427c <MTPD::read16()>
    433e:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4342:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4344:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    4346:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4348:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    434a:	rsbs	r8, r3, #0
    434e:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4352:	bl	427c <MTPD::read16()>
      read32(); len -=4; // size
    4356:	mov	r0, r4
    4358:	bl	4292 <MTPD::read32()>
      read16(); len -=2; // thumb format
    435c:	mov	r0, r4
    435e:	bl	427c <MTPD::read16()>
      read32(); len -=4; // thumb size
    4362:	mov	r0, r4
    4364:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // thumb width
    4368:	mov	r0, r4
    436a:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // thumb height
    436e:	mov	r0, r4
    4370:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // pix width
    4374:	mov	r0, r4
    4376:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // pix height
    437a:	mov	r0, r4
    437c:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // bit depth
    4380:	mov	r0, r4
    4382:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // parent
    4386:	mov	r0, r4
    4388:	bl	4292 <MTPD::read32()>
      read16(); len -=2; // association type
    438c:	mov	r0, r4
    438e:	bl	427c <MTPD::read16()>
      read32(); len -=4; // association description
    4392:	mov	r0, r4
    4394:	bl	4292 <MTPD::read32()>
      read32(); len -=4; // sequence number
    4398:	mov	r0, r4
    439a:	bl	4292 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    439e:	mov	r1, r9
    43a0:	mov	r0, r4
    43a2:	bl	42a6 <MTPD::readstring(char*)>
    43a6:	mov	r0, r9
    43a8:	bl	e900 <strlen>
    43ac:	adds	r0, #1
    43ae:	sub.w	r5, r5, r0, lsl #1
    43b2:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    43b4:	cmp	r5, #3
    43b6:	bgt.n	43d2 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    43b8:	cbnz	r5, 43dc <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    43ba:	ldr	r0, [r4, #0]
    43bc:	mov	r2, r7
    43be:	mov	r1, r6
    43c0:	ldr	r3, [r0, #0]
    43c2:	str.w	r9, [sp]
    43c6:	ldr	r4, [r3, #44]	; 0x2c
    43c8:	mov	r3, r8
    43ca:	blx	r4
    }
    43cc:	add	sp, #268	; 0x10c
    43ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    43d2:	mov	r0, r4
    43d4:	subs	r5, #4
    43d6:	bl	4292 <MTPD::read32()>
    43da:	b.n	43b4 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    43dc:	mov	r0, r4
    43de:	subs	r5, #1
    43e0:	bl	4266 <MTPD::read8()>
    43e4:	b.n	43b8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    43e6:	nop
    43e8:	.word	0x2002084c

000043ec <MTPD::SendObject()>:
    { 
    43ec:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    43f0:	add.w	r9, r0, #32
    { 
    43f4:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    43f6:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    43fa:	mov	r1, r9
      disk_pos=0;
    43fc:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4400:	bl	3944 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4404:	ldr	r3, [pc, #212]	; (44dc <MTPD::SendObject()+0xf0>)
    4406:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4408:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    440a:	add.w	fp, r4, #1056	; 0x420
        index=0;
    440e:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4410:	bl	4248 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4414:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4416:	mov	r7, r0
      disk_pos=0;
    4418:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    441c:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    441e:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4422:	bgt.n	4438 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4424:	ldr	r0, [r4, #0]
    4426:	ldr	r2, [r0, #0]
      if(disk_pos)
    4428:	cmp	r3, #0
    442a:	bne.n	44c6 <MTPD::SendObject()+0xda>
      storage_->close();
    442c:	ldr	r0, [r4, #0]
    442e:	ldr	r3, [r0, #0]
    4430:	ldr	r3, [r3, #56]	; 0x38
    4432:	blx	r3
      return true;
    4434:	movs	r0, #1
    4436:	b.n	4480 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4438:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    443c:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4440:	add.w	r0, fp, r3
    4444:	add.w	r1, r9, sl
    4448:	cmp	r8, r7
    444a:	it	cs
    444c:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    444e:	cmp	r5, r8
    4450:	it	cs
    4452:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4454:	mov	r2, r5
    4456:	bl	9dd0 <memcpy>
        disk_pos += to_copy;
    445a:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    445e:	subs	r3, r7, r5
        disk_pos += to_copy;
    4460:	add	r2, r5
        len -= to_copy;
    4462:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    4464:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    4468:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    446c:	bne.n	44b2 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    446e:	ldr	r0, [r4, #0]
    4470:	mov	r1, fp
    4472:	ldr	r3, [r0, #0]
    4474:	ldr	r3, [r3, #52]	; 0x34
    4476:	blx	r3
    4478:	cmp.w	r0, #8192	; 0x2000
    447c:	bcs.n	4486 <MTPD::SendObject()+0x9a>
    447e:	movs	r0, #0
    }
    4480:	add	sp, #12
    4482:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    4486:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4488:	subs.w	r2, r8, r5
          disk_pos =0;
    448c:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4490:	beq.n	44b2 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4492:	add.w	r1, sl, r5
    4496:	mov	r0, fp
    4498:	str	r2, [sp, #4]
    449a:	add	r1, r9
    449c:	bl	9dd0 <memcpy>
            disk_pos += bytes;
    44a0:	ldr.w	r3, [r6, #1056]	; 0x420
    44a4:	ldr	r2, [sp, #4]
    44a6:	add	r3, r2
    44a8:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    44ac:	sub.w	r3, r7, r8
    44b0:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    44b2:	ldr	r3, [sp, #4]
    44b4:	cbz	r3, 44c2 <MTPD::SendObject()+0xd6>
          index=0;
    44b6:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    44ba:	mov	r1, r9
    44bc:	mov	r0, r4
    44be:	bl	3944 <MTPD::pull_packet(unsigned char*)>
          index=0;
    44c2:	ldr	r7, [sp, #4]
    44c4:	b.n	441c <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    44c6:	ldr	r5, [r2, #52]	; 0x34
    44c8:	add.w	r1, r4, #1056	; 0x420
    44cc:	mov	r2, r3
    44ce:	blx	r5
    44d0:	ldr.w	r3, [r6, #1056]	; 0x420
    44d4:	cmp	r0, r3
    44d6:	bcs.n	442c <MTPD::SendObject()+0x40>
    44d8:	b.n	447e <MTPD::SendObject()+0x92>
    44da:	nop
    44dc:	.word	0x2002084c

000044e0 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    44e0:	push	{r4, r5, r6, lr}
    44e2:	mov	r5, r1
    44e4:	add.w	r1, r0, #32
    44e8:	mov	r6, r2
    44ea:	mov	r4, r0
    44ec:	bl	3944 <MTPD::pull_packet(unsigned char*)>
        index=0;
    44f0:	ldr	r3, [pc, #28]	; (4510 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    44f2:	movs	r2, #0
    44f4:	str	r2, [r3, #0]
      if(p2==0xDC07)
    44f6:	movw	r3, #56327	; 0xdc07
    44fa:	cmp	r6, r3
    44fc:	bne.n	450a <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    44fe:	mov	r1, r5
    4500:	mov	r0, r4
    }
    4502:	ldmia.w	sp!, {r4, r5, r6, lr}
    4506:	b.w	42d6 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    450a:	movw	r0, #8197	; 0x2005
    450e:	pop	{r4, r5, r6, pc}
    4510:	.word	0x2002084c

00004514 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4514:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4518:	sub	sp, #60	; 0x3c
    451a:	mov	r4, r0
    451c:	bl	bdb4 <usb_mtp_available>
    4520:	cmp	r0, #0
    4522:	beq.w	497c <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    4526:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    452a:	movs	r1, #60	; 0x3c
    452c:	mov	r0, fp
    452e:	bl	bd20 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4532:	cmp	r0, #0
    4534:	beq.w	497c <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4538:	ldr	r3, [r4, #40]	; 0x28
    453a:	ldr	r1, [pc, #756]	; (4830 <MTPD::loop()+0x31c>)
    453c:	str	r3, [sp, #4]
    453e:	ldrh	r3, [r4, #36]	; 0x24
    4540:	ldr	r0, [pc, #752]	; (4834 <MTPD::loop()+0x320>)
    4542:	str	r3, [sp, #0]
    4544:	ldr	r3, [r4, #32]
    4546:	ldrh	r2, [r4, #38]	; 0x26
    4548:	bl	c290 <Print::printf(char const*, ...)>
    454c:	ldr	r3, [r4, #32]
    454e:	cmp	r3, #12
    4550:	bls.n	455c <MTPD::loop()+0x48>
    4552:	ldr	r2, [r4, #44]	; 0x2c
    4554:	ldr	r1, [pc, #736]	; (4838 <MTPD::loop()+0x324>)
    4556:	ldr	r0, [pc, #732]	; (4834 <MTPD::loop()+0x320>)
    4558:	bl	c290 <Print::printf(char const*, ...)>
    455c:	ldr	r3, [r4, #32]
    455e:	cmp	r3, #16
    4560:	bls.n	456c <MTPD::loop()+0x58>
    4562:	ldr	r2, [r4, #48]	; 0x30
    4564:	ldr	r1, [pc, #720]	; (4838 <MTPD::loop()+0x324>)
    4566:	ldr	r0, [pc, #716]	; (4834 <MTPD::loop()+0x320>)
    4568:	bl	c290 <Print::printf(char const*, ...)>
    456c:	ldr	r3, [r4, #32]
    456e:	cmp	r3, #20
    4570:	bls.n	457c <MTPD::loop()+0x68>
    4572:	ldr	r2, [r4, #52]	; 0x34
    4574:	ldr	r1, [pc, #704]	; (4838 <MTPD::loop()+0x324>)
    4576:	ldr	r0, [pc, #700]	; (4834 <MTPD::loop()+0x320>)
    4578:	bl	c290 <Print::printf(char const*, ...)>
    457c:	ldr	r1, [pc, #700]	; (483c <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    457e:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4582:	ldr	r0, [pc, #688]	; (4834 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    4584:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4588:	bl	c290 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    458c:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    458e:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4590:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    4592:	mov	r6, r3
        int op = CONTAINER->op;
    4594:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    4596:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    459a:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    459c:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    459e:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    45a2:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    45a6:	movw	r1, #8197	; 0x2005
    45aa:	cmp	r0, #2
    45ac:	it	eq
    45ae:	moveq	r7, r1

        switch (op)
    45b0:	movw	r0, #4123	; 0x101b
    45b4:	cmp	r2, r0
    45b6:	bhi.n	4640 <MTPD::loop()+0x12c>
    45b8:	cmp.w	r2, #4096	; 0x1000
    45bc:	bhi.n	45c4 <MTPD::loop()+0xb0>
    45be:	movw	r7, #8197	; 0x2005
    45c2:	b.n	46be <MTPD::loop()+0x1aa>
    45c4:	sub.w	r2, r2, #4096	; 0x1000
    45c8:	subs	r2, #1
    45ca:	cmp	r2, #26
    45cc:	bhi.n	45be <MTPD::loop()+0xaa>
    45ce:	add	r1, pc, #4	; (adr r1, 45d4 <MTPD::loop()+0xc0>)
    45d0:	ldr.w	pc, [r1, r2, lsl #2]
    45d4:	.word	0x00004663
    45d8:	.word	0x000046b7
    45dc:	.word	0x00004977
    45e0:	.word	0x000046ed
    45e4:	.word	0x00004731
    45e8:	.word	0x0000477b
    45ec:	.word	0x00004791
    45f0:	.word	0x000047e7
    45f4:	.word	0x00004841
    45f8:	.word	0x000045bf
    45fc:	.word	0x0000488b
    4600:	.word	0x000048a9
    4604:	.word	0x000048bd
    4608:	.word	0x000045bf
    460c:	.word	0x000045bf
    4610:	.word	0x000045bf
    4614:	.word	0x000045bf
    4618:	.word	0x000045bf
    461c:	.word	0x000045bf
    4620:	.word	0x000048d3
    4624:	.word	0x0000491d
    4628:	.word	0x000045bf
    462c:	.word	0x000045bf
    4630:	.word	0x000045bf
    4634:	.word	0x00004967
    4638:	.word	0x00004983
    463c:	.word	0x000049ad
    4640:	add.w	r3, r2, #26496	; 0x6780
    4644:	adds	r3, #127	; 0x7f
    4646:	uxth	r3, r3
    4648:	cmp	r3, #3
    464a:	bhi.n	45be <MTPD::loop()+0xaa>
    464c:	sub.w	r2, r2, #38912	; 0x9800
    4650:	subs	r2, #2
    4652:	cmp	r2, #2
    4654:	bhi.w	4a00 <MTPD::loop()+0x4ec>
    4658:	tbh	[pc, r2, lsl #1]
    465c:	.word	0x021e01f7
    4660:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4662:	movs	r6, #0
    4664:	movs	r3, #1
    4666:	mov	r0, r4
    4668:	strb.w	r3, [r5, #1060]	; 0x424
    466c:	str.w	r6, [r5, #1064]	; 0x428
    4670:	bl	3a50 <MTPD::WriteDescriptor()>
    4674:	ldr.w	r3, [r5, #1064]	; 0x428
    4678:	mov	r0, r4
    467a:	movs	r2, #12
    467c:	adds	r3, #12
    467e:	add	r1, sp, #24
    4680:	str	r3, [sp, #24]
    4682:	movs	r3, #2
    4684:	strh.w	r3, [sp, #28]
    4688:	ldrh	r3, [r4, #38]	; 0x26
    468a:	strh.w	r3, [sp, #30]
    468e:	ldr	r3, [r4, #40]	; 0x28
    4690:	str.w	r6, [r5, #1064]	; 0x428
    4694:	strb.w	r6, [r5, #1060]	; 0x424
    4698:	str	r3, [sp, #32]
    { if (write_get_length_) 
    469a:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    469e:	mov	r0, r4
    46a0:	bl	3a50 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    46a4:	ldr	r1, [sp, #24]
    46a6:	ubfx	r1, r1, #0, #9
    46aa:	cbz	r1, 46be <MTPD::loop()+0x1aa>
    46ac:	add.w	r0, r4, #544	; 0x220
    46b0:	bl	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    46b4:	b.n	46be <MTPD::loop()+0x1aa>
            openSession(p1);
    46b6:	mov	r1, r6
    46b8:	mov	r0, r4
    46ba:	bl	3934 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    46be:	movs	r3, #3
            CONTAINER->len=len;
    46c0:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    46c4:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    46c6:	mov	r1, fp
            CONTAINER->type=3;
    46c8:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    46ca:	mov	r2, r9
            CONTAINER->transaction_id=id;
    46cc:	ldr	r3, [sp, #16]
    46ce:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    46d0:	ldr	r3, [sp, #12]
    46d2:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    46d4:	add.w	r4, r4, #544	; 0x220
    46d8:	mov	r0, r4
    46da:	bl	9dd0 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    46de:	mov	r1, r9
    46e0:	mov	r0, r4
        }
      }
    }
    46e2:	add	sp, #60	; 0x3c
    46e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    46e8:	b.w	384c <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    46ec:	movs	r6, #0
    46ee:	movs	r3, #1
    46f0:	mov	r0, r4
    46f2:	strb.w	r3, [r5, #1060]	; 0x424
    46f6:	str.w	r6, [r5, #1064]	; 0x428
    46fa:	bl	3b68 <MTPD::WriteStorageIDs()>
    46fe:	ldr.w	r3, [r5, #1064]	; 0x428
    4702:	mov	r0, r4
    4704:	movs	r2, #12
    4706:	adds	r3, #12
    4708:	add	r1, sp, #24
    470a:	str	r3, [sp, #24]
    470c:	movs	r3, #2
    470e:	strh.w	r3, [sp, #28]
    4712:	ldrh	r3, [r4, #38]	; 0x26
    4714:	strh.w	r3, [sp, #30]
    4718:	ldr	r3, [r4, #40]	; 0x28
    471a:	str.w	r6, [r5, #1064]	; 0x428
    471e:	strb.w	r6, [r5, #1060]	; 0x424
    4722:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4724:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4728:	mov	r0, r4
    472a:	bl	3b68 <MTPD::WriteStorageIDs()>
    472e:	b.n	46a4 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4730:	mov.w	r8, #0
    4734:	movs	r3, #1
    4736:	mov	r1, r6
    4738:	mov	r0, r4
    473a:	strb.w	r3, [r5, #1060]	; 0x424
    473e:	str.w	r8, [r5, #1064]	; 0x428
    4742:	bl	3dcc <MTPD::GetStorageInfo(unsigned long)>
    4746:	ldr.w	r3, [r5, #1064]	; 0x428
    474a:	add	r1, sp, #24
    474c:	mov	r0, r4
    474e:	adds	r3, #12
    4750:	movs	r2, #12
    4752:	str	r3, [sp, #24]
    4754:	movs	r3, #2
    4756:	strh.w	r3, [sp, #28]
    475a:	ldrh	r3, [r4, #38]	; 0x26
    475c:	strh.w	r3, [sp, #30]
    4760:	ldr	r3, [r4, #40]	; 0x28
    4762:	str.w	r8, [r5, #1064]	; 0x428
    4766:	strb.w	r8, [r5, #1060]	; 0x424
    476a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    476c:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4770:	mov	r1, r6
    4772:	mov	r0, r4
    4774:	bl	3dcc <MTPD::GetStorageInfo(unsigned long)>
    4778:	b.n	46a4 <MTPD::loop()+0x190>
            if (p2) 
    477a:	cmp.w	r8, #0
    477e:	bne.w	4af4 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    4782:	mov	r2, r3
    4784:	mov	r1, r6
    4786:	mov	r0, r4
    4788:	bl	38dc <MTPD::GetNumObjects(unsigned long, unsigned long)>
    478c:	str	r0, [sp, #12]
    478e:	b.n	46be <MTPD::loop()+0x1aa>
            if (p2) 
    4790:	cmp.w	r8, #0
    4794:	bne.w	4af4 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4798:	movs	r2, #1
    479a:	mov	r1, r6
    479c:	mov	r0, r4
    479e:	str.w	r8, [r5, #1064]	; 0x428
    47a2:	strb.w	r2, [r5, #1060]	; 0x424
    47a6:	mov	r2, r3
    47a8:	str	r3, [sp, #20]
    47aa:	bl	3b92 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    47ae:	ldr.w	r2, [r5, #1064]	; 0x428
    47b2:	add	r1, sp, #24
    47b4:	mov	r0, r4
    47b6:	adds	r2, #12
    47b8:	str	r2, [sp, #24]
    47ba:	movs	r2, #2
    47bc:	strh.w	r2, [sp, #28]
    47c0:	ldrh	r2, [r4, #38]	; 0x26
    47c2:	strh.w	r2, [sp, #30]
    47c6:	ldr	r2, [r4, #40]	; 0x28
    47c8:	str.w	r8, [r5, #1064]	; 0x428
    47cc:	str	r2, [sp, #32]
    47ce:	movs	r2, #12
    47d0:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    47d4:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    47d8:	ldr	r3, [sp, #20]
    47da:	mov	r1, r6
    47dc:	mov	r0, r4
    47de:	mov	r2, r3
    47e0:	bl	3b92 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    47e4:	b.n	46a4 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    47e6:	mov.w	r8, #0
    47ea:	movs	r3, #1
    47ec:	mov	r1, r6
    47ee:	mov	r0, r4
    47f0:	strb.w	r3, [r5, #1060]	; 0x424
    47f4:	str.w	r8, [r5, #1064]	; 0x428
    47f8:	bl	3be4 <MTPD::GetObjectInfo(unsigned long)>
    47fc:	ldr.w	r3, [r5, #1064]	; 0x428
    4800:	add	r1, sp, #24
    4802:	mov	r0, r4
    4804:	adds	r3, #12
    4806:	movs	r2, #12
    4808:	str	r3, [sp, #24]
    480a:	movs	r3, #2
    480c:	strh.w	r3, [sp, #28]
    4810:	ldrh	r3, [r4, #38]	; 0x26
    4812:	strh.w	r3, [sp, #30]
    4816:	ldr	r3, [r4, #40]	; 0x28
    4818:	str.w	r8, [r5, #1064]	; 0x428
    481c:	strb.w	r8, [r5, #1060]	; 0x424
    4820:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4822:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4826:	mov	r1, r6
    4828:	mov	r0, r4
    482a:	bl	3be4 <MTPD::GetObjectInfo(unsigned long)>
    482e:	b.n	46a4 <MTPD::loop()+0x190>
    4830:	.word	0x2000114a
    4834:	.word	0x20001cec
    4838:	.word	0x20001158
    483c:	.word	0x20000db7
            TRANSMIT(GetObject(p1));
    4840:	mov.w	r8, #0
    4844:	movs	r3, #1
    4846:	mov	r1, r6
    4848:	mov	r0, r4
    484a:	strb.w	r3, [r5, #1060]	; 0x424
    484e:	str.w	r8, [r5, #1064]	; 0x428
    4852:	bl	401a <MTPD::GetObject(unsigned long)>
    4856:	ldr.w	r3, [r5, #1064]	; 0x428
    485a:	add	r1, sp, #24
    485c:	mov	r0, r4
    485e:	adds	r3, #12
    4860:	movs	r2, #12
    4862:	str	r3, [sp, #24]
    4864:	movs	r3, #2
    4866:	strh.w	r3, [sp, #28]
    486a:	ldrh	r3, [r4, #38]	; 0x26
    486c:	strh.w	r3, [sp, #30]
    4870:	ldr	r3, [r4, #40]	; 0x28
    4872:	str.w	r8, [r5, #1064]	; 0x428
    4876:	strb.w	r8, [r5, #1060]	; 0x424
    487a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    487c:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4880:	mov	r1, r6
    4882:	mov	r0, r4
    4884:	bl	401a <MTPD::GetObject(unsigned long)>
    4888:	b.n	46a4 <MTPD::loop()+0x190>
              if (p2) {
    488a:	cmp.w	r8, #0
    488e:	bne.w	4af4 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    4892:	ldr	r0, [r4, #0]
    4894:	mov	r1, r6
    4896:	ldr	r3, [r0, #0]
    4898:	ldr	r3, [r3, #60]	; 0x3c
    489a:	blx	r3
                  return_code = 0x2012; // partial deletion
    489c:	movw	r3, #8210	; 0x2012
    48a0:	cmp	r0, #0
    48a2:	it	eq
    48a4:	moveq	r7, r3
    48a6:	b.n	46be <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    48a8:	mov	r2, r8
    48aa:	mov	r1, r6
    48ac:	mov	r0, r4
              len = 12 + 3 * 4;
    48ae:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    48b2:	bl	430c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    48b6:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    48ba:	b.n	46be <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    48bc:	mov	r0, r4
    48be:	mov.w	r9, #12
    48c2:	bl	43ec <MTPD::SendObject()>
    48c6:	movw	r3, #8197	; 0x2005
    48ca:	cmp	r0, #0
    48cc:	it	eq
    48ce:	moveq	r7, r3
    48d0:	b.n	46be <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    48d2:	mov.w	r8, #0
    48d6:	movs	r3, #1
    48d8:	mov	r1, r6
    48da:	mov	r0, r4
    48dc:	strb.w	r3, [r5, #1060]	; 0x424
    48e0:	str.w	r8, [r5, #1064]	; 0x428
    48e4:	bl	39f8 <MTPD::GetDevicePropDesc(unsigned long)>
    48e8:	ldr.w	r3, [r5, #1064]	; 0x428
    48ec:	add	r1, sp, #24
    48ee:	mov	r0, r4
    48f0:	adds	r3, #12
    48f2:	movs	r2, #12
    48f4:	str	r3, [sp, #24]
    48f6:	movs	r3, #2
    48f8:	strh.w	r3, [sp, #28]
    48fc:	ldrh	r3, [r4, #38]	; 0x26
    48fe:	strh.w	r3, [sp, #30]
    4902:	ldr	r3, [r4, #40]	; 0x28
    4904:	str.w	r8, [r5, #1064]	; 0x428
    4908:	strb.w	r8, [r5, #1060]	; 0x424
    490c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    490e:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4912:	mov	r1, r6
    4914:	mov	r0, r4
    4916:	bl	39f8 <MTPD::GetDevicePropDesc(unsigned long)>
    491a:	b.n	46a4 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    491c:	mov.w	r8, #0
    4920:	movs	r3, #1
    4922:	mov	r1, r6
    4924:	mov	r0, r4
    4926:	strb.w	r3, [r5, #1060]	; 0x424
    492a:	str.w	r8, [r5, #1064]	; 0x428
    492e:	bl	39e4 <MTPD::GetDevicePropValue(unsigned long)>
    4932:	ldr.w	r3, [r5, #1064]	; 0x428
    4936:	add	r1, sp, #24
    4938:	mov	r0, r4
    493a:	adds	r3, #12
    493c:	movs	r2, #12
    493e:	str	r3, [sp, #24]
    4940:	movs	r3, #2
    4942:	strh.w	r3, [sp, #28]
    4946:	ldrh	r3, [r4, #38]	; 0x26
    4948:	strh.w	r3, [sp, #30]
    494c:	ldr	r3, [r4, #40]	; 0x28
    494e:	str.w	r8, [r5, #1064]	; 0x428
    4952:	strb.w	r8, [r5, #1060]	; 0x424
    4956:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4958:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    495c:	mov	r1, r6
    495e:	mov	r0, r4
    4960:	bl	39e4 <MTPD::GetDevicePropValue(unsigned long)>
    4964:	b.n	46a4 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    4966:	mov	r2, r8
    4968:	mov	r1, r6
    496a:	mov	r0, r4
              len = 12;
    496c:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    4970:	bl	3902 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    4974:	mov	r7, r0
        if(return_code)
    4976:	cmp	r7, #0
    4978:	bne.w	46be <MTPD::loop()+0x1aa>
    }
    497c:	add	sp, #60	; 0x3c
    497e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    4982:	mov	r2, r8
    4984:	mov	r1, r6
    4986:	mov	r0, r4
              if(!return_code) 
    4988:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    498c:	bl	3920 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4990:	cmp	r0, #0
    4992:	itete	eq
    4994:	moveq	r3, r6
    4996:	movne	r3, r0
    4998:	moveq.w	r9, #12
    499c:	movne.w	r9, #16
    49a0:	str	r3, [sp, #12]
    49a2:	movw	r3, #8193	; 0x2001
    49a6:	it	ne
    49a8:	movne	r7, r3
    49aa:	b.n	46be <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    49ac:	mov.w	sl, #0
    49b0:	movs	r2, #1
    49b2:	mov	r1, r6
    49b4:	mov	r0, r4
    49b6:	strb.w	r2, [r5, #1060]	; 0x424
    49ba:	mov	r2, r8
    49bc:	str.w	sl, [r5, #1064]	; 0x428
    49c0:	str	r3, [sp, #20]
    49c2:	bl	4100 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    49c6:	ldr.w	r2, [r5, #1064]	; 0x428
    49ca:	add	r1, sp, #24
    49cc:	adds	r2, #12
    49ce:	str	r2, [sp, #24]
    49d0:	movs	r2, #2
    49d2:	strh.w	r2, [sp, #28]
    49d6:	ldrh	r2, [r4, #38]	; 0x26
    49d8:	strh.w	r2, [sp, #30]
    49dc:	ldr	r2, [r4, #40]	; 0x28
    49de:	str.w	sl, [r5, #1064]	; 0x428
    49e2:	strb.w	sl, [r5, #1060]	; 0x424
    49e6:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    49ea:	mov	r0, r4
    49ec:	movs	r2, #32
    49ee:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    49f2:	ldr	r3, [sp, #20]
    49f4:	mov	r2, r8
    49f6:	mov	r1, r6
    49f8:	mov	r0, r4
    49fa:	bl	4100 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    49fe:	b.n	46a4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4a00:	mov.w	r8, #0
    4a04:	movs	r3, #1
    4a06:	mov	r1, r6
    4a08:	mov	r0, r4
    4a0a:	strb.w	r3, [r5, #1060]	; 0x424
    4a0e:	str.w	r8, [r5, #1064]	; 0x428
    4a12:	bl	3cc4 <MTPD::getObjectPropsSupported(unsigned long)>
    4a16:	ldr.w	r3, [r5, #1064]	; 0x428
    4a1a:	add	r1, sp, #24
    4a1c:	mov	r0, r4
    4a1e:	adds	r3, #12
    4a20:	movs	r2, #12
    4a22:	str	r3, [sp, #24]
    4a24:	movs	r3, #2
    4a26:	strh.w	r3, [sp, #28]
    4a2a:	ldrh	r3, [r4, #38]	; 0x26
    4a2c:	strh.w	r3, [sp, #30]
    4a30:	ldr	r3, [r4, #40]	; 0x28
    4a32:	str.w	r8, [r5, #1064]	; 0x428
    4a36:	strb.w	r8, [r5, #1060]	; 0x424
    4a3a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4a3c:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4a40:	mov	r1, r6
    4a42:	mov	r0, r4
    4a44:	bl	3cc4 <MTPD::getObjectPropsSupported(unsigned long)>
    4a48:	b.n	46a4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4a4a:	mov.w	sl, #0
    4a4e:	movs	r3, #1
    4a50:	mov	r2, r8
    4a52:	mov	r1, r6
    4a54:	mov	r0, r4
    4a56:	strb.w	r3, [r5, #1060]	; 0x424
    4a5a:	str.w	sl, [r5, #1064]	; 0x428
    4a5e:	bl	3ed8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4a62:	ldr.w	r3, [r5, #1064]	; 0x428
    4a66:	add	r1, sp, #24
    4a68:	mov	r0, r4
    4a6a:	adds	r3, #12
    4a6c:	movs	r2, #12
    4a6e:	str	r3, [sp, #24]
    4a70:	movs	r3, #2
    4a72:	strh.w	r3, [sp, #28]
    4a76:	ldrh	r3, [r4, #38]	; 0x26
    4a78:	strh.w	r3, [sp, #30]
    4a7c:	ldr	r3, [r4, #40]	; 0x28
    4a7e:	str.w	sl, [r5, #1064]	; 0x428
    4a82:	strb.w	sl, [r5, #1060]	; 0x424
    4a86:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4a88:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4a8c:	mov	r2, r8
    4a8e:	mov	r1, r6
    4a90:	mov	r0, r4
    4a92:	bl	3ed8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4a96:	b.n	46a4 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4a98:	mov.w	sl, #0
    4a9c:	movs	r3, #1
    4a9e:	mov	r2, r8
    4aa0:	mov	r1, r6
    4aa2:	mov	r0, r4
    4aa4:	strb.w	r3, [r5, #1060]	; 0x424
    4aa8:	str.w	sl, [r5, #1064]	; 0x428
    4aac:	bl	3cf4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4ab0:	ldr.w	r3, [r5, #1064]	; 0x428
    4ab4:	add	r1, sp, #24
    4ab6:	mov	r0, r4
    4ab8:	adds	r3, #12
    4aba:	movs	r2, #12
    4abc:	str	r3, [sp, #24]
    4abe:	movs	r3, #2
    4ac0:	strh.w	r3, [sp, #28]
    4ac4:	ldrh	r3, [r4, #38]	; 0x26
    4ac6:	strh.w	r3, [sp, #30]
    4aca:	ldr	r3, [r4, #40]	; 0x28
    4acc:	str.w	sl, [r5, #1064]	; 0x428
    4ad0:	strb.w	sl, [r5, #1060]	; 0x424
    4ad4:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ad6:	bl	3864 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4ada:	mov	r2, r8
    4adc:	mov	r1, r6
    4ade:	mov	r0, r4
    4ae0:	bl	3cf4 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4ae4:	b.n	46a4 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4ae6:	mov	r2, r8
    4ae8:	mov	r1, r6
    4aea:	mov	r0, r4
    4aec:	bl	44e0 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4af0:	mov	r7, r0
              break;
    4af2:	b.n	4976 <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4af4:	movw	r7, #8212	; 0x2014
    4af8:	b.n	46be <MTPD::loop()+0x1aa>
    4afa:	nop

00004afc <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4afc:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4afe:	cbz	r3, 4b36 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4b00:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4b02:	movw	r5, #513	; 0x201
    4b06:	str	r5, [r4, #16]
    4b08:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4b0a:	cbz	r1, 4b38 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4b0c:	ldrb.w	r5, [r1], #1
    4b10:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4b12:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4b14:	str	r5, [r6, #100]	; 0x64
    4b16:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4b18:	ldr	r6, [r5, #112]	; 0x70
    4b1a:	lsls	r6, r6, #30
    4b1c:	bmi.n	4b28 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b1e:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4b20:	cbz	r2, 4b26 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b22:	strb.w	r5, [r2], #1
				count_read--;
    4b26:	subs	r4, #1
    4b28:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4b2a:	ldr	r5, [r5, #20]
    4b2c:	lsls	r5, r5, #31
    4b2e:	bpl.n	4b16 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4b30:	cmp	r3, #0
    4b32:	bne.n	4b0a <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4b34:	cbnz	r4, 4b3e <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4b36:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4b38:	ldrb.w	r5, [r0, #60]	; 0x3c
    4b3c:	b.n	4b10 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4b3e:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4b40:	ldr	r1, [r3, #112]	; 0x70
    4b42:	lsls	r1, r1, #30
    4b44:	bmi.n	4b34 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b46:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4b48:	cbz	r2, 4b4e <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4b4a:	strb.w	r3, [r2], #1
			count_read--;
    4b4e:	subs	r4, #1
    4b50:	b.n	4b34 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004b52 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4b52:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4b54:	ldr	r2, [r3, #0]
    4b56:	ldr	r1, [r2, #0]
    4b58:	ldr	r2, [r3, #4]
    4b5a:	tst	r1, r2
void SPIClass::end() {
    4b5c:	push	{r4, lr}
    4b5e:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4b60:	beq.n	4b98 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4b62:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    4b64:	movs	r1, #0
    4b66:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4b68:	movs	r1, #5
    4b6a:	ldrb	r2, [r0, #16]
    4b6c:	add	r3, r2
    4b6e:	ldrb	r0, [r3, #16]
    4b70:	bl	ba64 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4b74:	ldrb	r2, [r4, #17]
    4b76:	ldr	r3, [r4, #4]
    4b78:	movs	r1, #5
    4b7a:	add	r3, r2
    4b7c:	ldrb.w	r0, [r3, #36]	; 0x24
    4b80:	bl	ba64 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4b84:	ldr	r3, [r4, #4]
    4b86:	ldrb	r2, [r4, #18]
    4b88:	movs	r1, #5
    4b8a:	add	r3, r2
	}
}
    4b8c:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4b90:	ldrb.w	r0, [r3, #56]	; 0x38
    4b94:	b.w	ba64 <pinMode>
}
    4b98:	pop	{r4, pc}

00004b9a <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    4b9a:	ldrb.w	r2, [r0, #163]	; 0xa3
    4b9e:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    4ba2:	subs	r0, r2, r0
    4ba4:	bx	lr

00004ba6 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4ba6:	ldrb.w	r3, [r0, #162]	; 0xa2
    4baa:	ldrb.w	r2, [r0, #163]	; 0xa3
    4bae:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    4bb0:	itttt	hi
    4bb2:	addhi	r2, r3, #1
    4bb4:	strbhi.w	r2, [r0, #162]	; 0xa2
    4bb8:	addhi	r0, r0, r3
    4bba:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4bbc:	it	ls
    4bbe:	movls.w	r0, #4294967295
	}
    4bc2:	bx	lr

00004bc4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4bc4:	ldrb.w	r3, [r0, #162]	; 0xa2
    4bc8:	ldrb.w	r2, [r0, #163]	; 0xa3
    4bcc:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    4bce:	itte	hi
    4bd0:	addhi	r0, r0, r3
    4bd2:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    4bd4:	movls.w	r0, #4294967295
	}
    4bd8:	bx	lr

00004bda <TwoWire::flush()>:
	virtual void flush(void) {
	}
    4bda:	bx	lr

00004bdc <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    4bdc:	ldrh.w	r3, [r0, #304]	; 0x130
    4be0:	cbz	r3, 4bee <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    4be2:	ldrb.w	r3, [r0, #303]	; 0x12f
    4be6:	cmp	r3, #136	; 0x88
    4be8:	bls.n	4bf2 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    4bea:	movs	r3, #1
    4bec:	str	r3, [r0, #4]
			return 0;
    4bee:	movs	r0, #0
    4bf0:	bx	lr
		txBuffer[txBufferLength++] = data;
    4bf2:	adds	r2, r3, #1
    4bf4:	strb.w	r2, [r0, #303]	; 0x12f
    4bf8:	add	r0, r3
    4bfa:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    4bfe:	movs	r0, #1
    4c00:	bx	lr

00004c02 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    4c02:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    4c04:	ldrh.w	r3, [r0, #304]	; 0x130
{
    4c08:	mov	r5, r0
    4c0a:	mov	r4, r2
	if (transmitting || slave_mode) {
    4c0c:	cbz	r3, 4c3a <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    4c0e:	ldrb.w	r3, [r0, #303]	; 0x12f
    4c12:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    4c16:	cmp	r4, r2
    4c18:	ittt	hi
    4c1a:	movhi	r0, #1
    4c1c:	movhi	r4, r2
    4c1e:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    4c20:	add.w	r0, r5, #165	; 0xa5
    4c24:	mov	r2, r4
    4c26:	add	r0, r3
    4c28:	bl	9dd0 <memcpy>
		txBufferLength += quantity;
    4c2c:	ldrb.w	r3, [r5, #303]	; 0x12f
    4c30:	add	r3, r4
    4c32:	strb.w	r3, [r5, #303]	; 0x12f
}
    4c36:	mov	r0, r4
    4c38:	pop	{r3, r4, r5, pc}
	return 0;
    4c3a:	mov	r4, r3
    4c3c:	b.n	4c36 <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

00004c40 <TwoWire::force_clock()>:
{
    4c40:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4c44:	ldr	r1, [r0, #20]
{
    4c46:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4c48:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4c4a:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4c4e:	ldr	r4, [pc, #244]	; (4d44 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    4c50:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4c54:	ldr.w	r8, [pc, #244]	; 4d4c <TwoWire::force_clock()+0x10c>
    4c58:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4c5a:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4c5c:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4c5e:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4c62:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    4c66:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    4c68:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4c6c:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4c70:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    4c74:	lsls	r7, r3, #4
    4c76:	add.w	r3, r4, r3, lsl #4
    4c7a:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4c7c:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    4c80:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4c84:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4c86:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4c88:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4c8c:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    4c8e:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    4c90:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4c92:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    4c96:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    4c9a:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4c9c:	ldr	r4, [pc, #168]	; (4d48 <TwoWire::force_clock()+0x108>)
    4c9e:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ca0:	ldr.w	lr, [pc, #172]	; 4d50 <TwoWire::force_clock()+0x110>
    4ca4:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    4ca6:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ca8:	ldr.w	r3, [lr]
    4cac:	udiv	r3, r3, r8
    4cb0:	mov.w	r8, #10
    4cb4:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4cb8:	ldr.w	r8, [r4, #4]
    4cbc:	sub.w	r8, r8, r7
    4cc0:	cmp	r3, r8
    4cc2:	bhi.n	4cb8 <TwoWire::force_clock()+0x78>
    4cc4:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    4cc6:	ldr	r7, [pc, #128]	; (4d48 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4cc8:	ldr.w	sl, [pc, #128]	; 4d4c <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    4ccc:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    4cce:	tst.w	r4, ip
    4cd2:	beq.n	4cda <TwoWire::force_clock()+0x9a>
    4cd4:	ldr	r4, [r0, #8]
    4cd6:	tst	r4, r5
    4cd8:	bne.n	4d3e <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    4cda:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    4cde:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4ce2:	ldr.w	r4, [lr]
    4ce6:	udiv	r4, r4, sl
    4cea:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4cee:	ldr.w	r8, [r7, #4]
    4cf2:	sub.w	r8, r8, fp
    4cf6:	cmp	r4, r8
    4cf8:	bhi.n	4cee <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    4cfa:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    4cfe:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4d02:	ldr.w	r4, [lr]
    4d06:	udiv	r4, r4, sl
    4d0a:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4d0e:	ldr.w	r8, [r7, #4]
    4d12:	sub.w	r8, r8, fp
    4d16:	cmp	r4, r8
    4d18:	bhi.n	4d0e <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    4d1a:	subs	r3, #1
    4d1c:	bne.n	4ccc <TwoWire::force_clock()+0x8c>
	bool ret = false;
    4d1e:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4d20:	ldrb	r3, [r2, #24]
    4d22:	add.w	r3, r1, r3, lsl #4
    4d26:	ldr	r3, [r3, #12]
    4d28:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    4d2c:	ldrb	r3, [r2, #25]
    4d2e:	ldr	r2, [sp, #4]
    4d30:	add.w	r1, r1, r3, lsl #4
    4d34:	ldr	r3, [r1, #44]	; 0x2c
    4d36:	str	r3, [r2, #0]
}
    4d38:	add	sp, #12
    4d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    4d3e:	movs	r0, #1
    4d40:	b.n	4d20 <TwoWire::force_clock()+0xe0>
    4d42:	nop
    4d44:	.word	0x20000614
    4d48:	.word	0xe0001000
    4d4c:	.word	0x000f4240
    4d50:	.word	0x20001ce8

00004d54 <TwoWire::wait_idle()>:
	return systick_millis_count;
    4d54:	ldr	r2, [pc, #44]	; (4d84 <TwoWire::wait_idle()+0x30>)
{
    4d56:	push	{r4, lr}
    4d58:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4d5a:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    4d5c:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    4d5e:	tst.w	r3, #33554432	; 0x2000000
    4d62:	bne.n	4d6e <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    4d64:	mov.w	r3, #32512	; 0x7f00
	return true;
    4d68:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    4d6a:	str	r3, [r4, #20]
}
    4d6c:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    4d6e:	lsls	r3, r3, #7
    4d70:	bmi.n	4d64 <TwoWire::wait_idle()+0x10>
    4d72:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    4d74:	subs	r3, r3, r1
		if (timeout > 16) {
    4d76:	cmp	r3, #16
    4d78:	bls.n	4d5c <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    4d7a:	bl	4c40 <TwoWire::force_clock()>
    4d7e:	cmp	r0, #0
    4d80:	bne.n	4d64 <TwoWire::wait_idle()+0x10>
    4d82:	b.n	4d6c <TwoWire::wait_idle()+0x18>
    4d84:	.word	0x20021374

00004d88 <TwoWire::endTransmission(unsigned char)>:
{
    4d88:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    4d8c:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    4d90:	mov	r7, r0
    4d92:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4d94:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    4d96:	cmp.w	r8, #0
    4d9a:	beq.n	4dfa <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    4d9c:	bl	4d54 <TwoWire::wait_idle()>
    4da0:	cbz	r0, 4dfa <TwoWire::endTransmission(unsigned char)+0x72>
    4da2:	ldr.w	r9, [pc, #196]	; 4e68 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    4da6:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4da8:	mov.w	fp, #512	; 0x200
    4dac:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    4db0:	cmp	r6, r8
    4db2:	bhi.n	4dec <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4db4:	ldr	r3, [r4, #92]	; 0x5c
    4db6:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    4dba:	cmp	r3, #3
    4dbc:	bhi.n	4dec <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    4dbe:	cbnz	r6, 4dd2 <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4dc0:	ldrb.w	r2, [r7, #165]	; 0xa5
    4dc4:	orr.w	r2, r2, #1024	; 0x400
    4dc8:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    4dca:	movs	r2, #1
				fifo_used++;
    4dcc:	adds	r3, #1
    4dce:	mov	r6, r2
    4dd0:	b.n	4dba <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    4dd2:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4dd4:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    4dd8:	bcs.n	4de4 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4dda:	add	r6, r7
    4ddc:	ldrb.w	r1, [r6, #165]	; 0xa5
    4de0:	str	r1, [r4, #96]	; 0x60
    4de2:	b.n	4dcc <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4de4:	cbz	r5, 4dea <TwoWire::endTransmission(unsigned char)+0x62>
    4de6:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4dea:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    4dec:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    4dee:	lsls	r2, r3, #20
    4df0:	bpl.n	4dfe <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4df2:	ldr	r3, [r4, #16]
    4df4:	orr.w	r3, r3, #768	; 0x300
    4df8:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    4dfa:	movs	r5, #4
    4dfc:	b.n	4e0c <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    4dfe:	lsls	r0, r3, #19
    4e00:	bpl.n	4e12 <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e02:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    4e04:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e06:	orr.w	r3, r3, #768	; 0x300
    4e0a:	str	r3, [r4, #16]
}
    4e0c:	mov	r0, r5
    4e0e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    4e12:	lsls	r1, r3, #21
    4e14:	bpl.n	4e28 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e16:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    4e18:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e1a:	orr.w	r3, r3, #768	; 0x300
    4e1e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    4e20:	mov.w	r3, #512	; 0x200
    4e24:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    4e26:	b.n	4e0c <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    4e28:	lsls	r2, r3, #18
    4e2a:	bmi.n	4e38 <TwoWire::endTransmission(unsigned char)+0xb0>
    4e2c:	ldr.w	r2, [r9]
    4e30:	sub.w	r2, r2, sl
    4e34:	cmp	r2, #50	; 0x32
    4e36:	bls.n	4e48 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4e38:	ldr	r3, [r4, #16]
    4e3a:	orr.w	r3, r3, #768	; 0x300
    4e3e:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4e40:	mov.w	r3, #512	; 0x200
    4e44:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    4e46:	b.n	4dfa <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    4e48:	cmp	r6, r8
    4e4a:	bls.n	4e5c <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4e4c:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4e4e:	ands.w	r2, r2, #7
    4e52:	bne.n	4e5c <TwoWire::endTransmission(unsigned char)+0xd4>
    4e54:	lsls	r3, r3, #22
    4e56:	bmi.n	4e62 <TwoWire::endTransmission(unsigned char)+0xda>
    4e58:	cmp	r5, #0
    4e5a:	beq.n	4e0c <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    4e5c:	bl	bf50 <yield>
	}
    4e60:	b.n	4db0 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    4e62:	mov	r5, r2
    4e64:	b.n	4e0c <TwoWire::endTransmission(unsigned char)+0x84>
    4e66:	nop
    4e68:	.word	0x20021374

00004e6c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    4e6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e70:	mov	r7, r0
    4e72:	mov	r6, r1
    4e74:	mov	r9, r2
    4e76:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4e78:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    4e7a:	bl	4d54 <TwoWire::wait_idle()>
    4e7e:	cmp	r0, #0
    4e80:	beq.n	4f78 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    4e82:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    4e84:	cmp.w	r9, #1
    4e88:	ldr.w	sl, [pc, #240]	; 4f7c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    4e8c:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4e90:	uxtb	r6, r6
    4e92:	it	cc
    4e94:	movcc.w	r9, #1
    4e98:	ldr.w	fp, [sl]
    4e9c:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    4ea0:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4ea4:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    4ea8:	cmp	r4, #2
    4eaa:	bhi.n	4eca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4eac:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4eae:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4eb2:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    4eb6:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4eba:	orr.w	r2, r2, #256	; 0x100
    4ebe:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    4ec0:	subs	r0, r3, r4
    4ec2:	cmp	r0, #3
    4ec4:	bhi.n	4eca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    4ec6:	cmp	r4, #3
    4ec8:	bne.n	4ef8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    4eca:	ldrb.w	r3, [r7, #163]	; 0xa3
    4ece:	cmp	r3, #135	; 0x87
    4ed0:	bls.n	4f12 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    4ed2:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    4ed4:	lsls	r1, r3, #20
    4ed6:	bpl.n	4f34 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4ed8:	ldr	r3, [r5, #16]
    4eda:	orr.w	r3, r3, #768	; 0x300
    4ede:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4ee0:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    4ee2:	tst.w	r3, #458752	; 0x70000
    4ee6:	beq.n	4ef0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    4ee8:	ldr	r3, [r5, #16]
    4eea:	orr.w	r3, r3, #512	; 0x200
    4eee:	str	r3, [r5, #16]
	return rxBufferLength;
    4ef0:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    4ef4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    4ef8:	cbnz	r4, 4f00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    4efa:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    4efc:	adds	r4, #1
				tx_fifo--;
    4efe:	b.n	4ec0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    4f00:	cmp	r4, #1
    4f02:	bne.n	4f08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    4f04:	str	r2, [r5, #96]	; 0x60
    4f06:	b.n	4efc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    4f08:	cmp.w	r8, #0
    4f0c:	beq.n	4efc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    4f0e:	str	r1, [r5, #96]	; 0x60
    4f10:	b.n	4efc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    4f12:	ldr	r2, [r5, #92]	; 0x5c
    4f14:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    4f18:	cmp	r2, #0
    4f1a:	beq.n	4ed2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    4f1c:	ldrb.w	r3, [r7, #163]	; 0xa3
    4f20:	cmp	r3, #135	; 0x87
    4f22:	bhi.n	4ed2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    4f24:	ldr	r1, [r5, #112]	; 0x70
    4f26:	adds	r0, r3, #1
    4f28:	add	r3, r7
				rx_fifo--;
    4f2a:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    4f2c:	strb.w	r0, [r7, #163]	; 0xa3
    4f30:	strb	r1, [r3, #26]
				rx_fifo--;
    4f32:	b.n	4f18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    4f34:	tst.w	r3, #9216	; 0x2400
    4f38:	bne.n	4f46 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    4f3a:	ldr.w	r2, [sl]
    4f3e:	sub.w	r2, r2, fp
    4f42:	cmp	r2, #50	; 0x32
    4f44:	bls.n	4f56 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4f46:	ldr	r3, [r5, #16]
    4f48:	orr.w	r3, r3, #768	; 0x300
    4f4c:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    4f4e:	mov.w	r3, #512	; 0x200
    4f52:	str	r3, [r5, #96]	; 0x60
			break;
    4f54:	b.n	4ee0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    4f56:	ldrb.w	r2, [r7, #163]	; 0xa3
    4f5a:	cmp	r2, r9
    4f5c:	bcc.n	4f72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    4f5e:	cmp	r4, #2
    4f60:	bls.n	4f72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    4f62:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    4f64:	lsls	r2, r2, #29
    4f66:	bne.n	4f72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    4f68:	lsls	r3, r3, #22
    4f6a:	bmi.n	4ee0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    4f6c:	cmp.w	r8, #0
    4f70:	beq.n	4ee0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    4f72:	bl	bf50 <yield>
	}
    4f76:	b.n	4ea8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    4f78:	movs	r0, #4
    4f7a:	b.n	4ef4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    4f7c:	.word	0x20021374

00004f80 <TwoWire::isr()>:
{
    4f80:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    4f82:	ldr	r6, [r0, #16]
{
    4f84:	mov	r4, r0
	uint32_t status = port->SSR;
    4f86:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    4f8a:	ands.w	r3, r5, #3840	; 0xf00
    4f8e:	beq.n	4f94 <TwoWire::isr()+0x14>
    4f90:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    4f94:	lsls	r0, r5, #30
    4f96:	bpl.n	4fb8 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    4f98:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    4f9c:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    4f9e:	itt	mi
    4fa0:	movmi	r3, #0
    4fa2:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    4fa6:	ldrb.w	r3, [r4, #163]	; 0xa3
    4faa:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    4fac:	itttt	ls
    4fae:	addls	r1, r3, #1
    4fb0:	addls	r3, r3, r4
    4fb2:	strbls.w	r1, [r4, #163]	; 0xa3
    4fb6:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    4fb8:	lsls	r2, r5, #31
    4fba:	bpl.n	4ff6 <TwoWire::isr()+0x76>
		if (!transmitting) {
    4fbc:	ldrb.w	r3, [r4, #304]	; 0x130
    4fc0:	cbnz	r3, 4fd6 <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    4fc2:	ldr.w	r3, [r4, #312]	; 0x138
    4fc6:	cbz	r3, 4fca <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    4fc8:	blx	r3
			txBufferIndex = 0;
    4fca:	movs	r3, #0
    4fcc:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    4fd0:	movs	r3, #1
    4fd2:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    4fd6:	ldrb.w	r3, [r4, #302]	; 0x12e
    4fda:	ldrb.w	r2, [r4, #303]	; 0x12f
    4fde:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    4fe0:	ittet	hi
    4fe2:	addhi	r2, r3, #1
    4fe4:	addhi	r3, r3, r4
			port->STDR = 0;
    4fe6:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    4fe8:	strbhi.w	r2, [r4, #302]	; 0x12e
    4fec:	it	hi
    4fee:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    4ff2:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    4ff6:	lsls	r3, r5, #22
    4ff8:	bpl.n	5016 <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    4ffa:	ldrb.w	r0, [r4, #163]	; 0xa3
    4ffe:	cbz	r0, 5008 <TwoWire::isr()+0x88>
    5000:	ldr.w	r3, [r4, #316]	; 0x13c
    5004:	cbz	r3, 5008 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    5006:	blx	r3
		rxBufferIndex = 0;
    5008:	movs	r3, #0
    500a:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    500e:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    5012:	strb.w	r3, [r4, #304]	; 0x130
}
    5016:	pop	{r4, r5, r6, pc}

00005018 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    5018:	ldr	r0, [pc, #4]	; (5020 <lpi2c1_isr()+0x8>)
    501a:	b.w	4f80 <TwoWire::isr()>
    501e:	nop
    5020:	.word	0x20001cfc

00005024 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    5024:	ldr	r0, [pc, #4]	; (502c <lpi2c3_isr()+0x8>)
    5026:	b.w	4f80 <TwoWire::isr()>
    502a:	nop
    502c:	.word	0x20001e3c

00005030 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    5030:	ldr	r0, [pc, #4]	; (5038 <lpi2c4_isr()+0x8>)
    5032:	b.w	4f80 <TwoWire::isr()>
    5036:	nop
    5038:	.word	0x20001f7c

0000503c <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    503c:	ldr	r3, [r0, #16]
	port->MCR = 0;
    503e:	movs	r2, #0
	if (frequency < 400000) {
    5040:	ldr	r0, [pc, #76]	; (5090 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    5042:	str	r2, [r3, #16]
	if (frequency < 400000) {
    5044:	cmp	r1, r0
    5046:	bhi.n	506e <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5048:	ldr	r2, [pc, #72]	; (5094 <TwoWire::setClock(unsigned long)+0x58>)
    504a:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    504c:	movs	r2, #1
    504e:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    5050:	ldr	r2, [pc, #68]	; (5098 <TwoWire::setClock(unsigned long)+0x5c>)
    5052:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    5054:	mov.w	r2, #180224	; 0x2c000
    5058:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    505a:	ldr	r2, [r3, #72]	; 0x48
    505c:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    505e:	movs	r2, #0
    5060:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    5062:	mov.w	r2, #65537	; 0x10001
    5066:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    5068:	movs	r2, #1
    506a:	str	r2, [r3, #16]
}
    506c:	bx	lr
	} else if (frequency < 1000000) {
    506e:	ldr	r0, [pc, #44]	; (509c <TwoWire::setClock(unsigned long)+0x60>)
    5070:	cmp	r1, r0
    5072:	ldr	r1, [pc, #44]	; (50a0 <TwoWire::setClock(unsigned long)+0x64>)
    5074:	bhi.n	5084 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    5076:	ldr	r0, [pc, #44]	; (50a4 <TwoWire::setClock(unsigned long)+0x68>)
    5078:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    507a:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    507c:	ldr	r2, [pc, #40]	; (50a8 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    507e:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    5080:	str	r1, [r3, #44]	; 0x2c
    5082:	b.n	505a <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    5084:	ldr	r0, [pc, #36]	; (50ac <TwoWire::setClock(unsigned long)+0x70>)
    5086:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5088:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    508a:	ldr	r2, [pc, #36]	; (50b0 <TwoWire::setClock(unsigned long)+0x74>)
    508c:	b.n	507e <TwoWire::setClock(unsigned long)+0x42>
    508e:	nop
    5090:	.word	0x00061a7f
    5094:	.word	0x1928373b
    5098:	.word	0x05050bb8
    509c:	.word	0x000f423f
    50a0:	.word	0x00057f00
    50a4:	.word	0x0c121a1c
    50a8:	.word	0x02020e10
    50ac:	.word	0x0407090a
    50b0:	.word	0x01010960

000050b4 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    50b4:	mov	r3, r0
    size_t n = end - str;
    50b6:	subs	r0, r2, r1
    if (cp < 0X80) {
    50b8:	cmp	r3, #127	; 0x7f
    50ba:	bhi.n	50c8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    50bc:	cmp	r0, #0
    50be:	beq.n	5144 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    50c0:	mov	r0, r1
    50c2:	strb.w	r3, [r0], #1
    50c6:	bx	lr
    } else if (cp < 0X800) {
    50c8:	cmp.w	r3, #2048	; 0x800
    50cc:	bcs.n	50ea <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    50ce:	cmp	r0, #1
    50d0:	bls.n	5142 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    50d2:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    50d4:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    50d8:	mov	r0, r1
    50da:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    50de:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    50e2:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    50e6:	strb	r3, [r1, #1]
    50e8:	bx	lr
    } else if (cp < 0X10000) {
    50ea:	cmp.w	r3, #65536	; 0x10000
    50ee:	bcs.n	5114 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    50f0:	cmp	r0, #2
    50f2:	bls.n	5142 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    50f4:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    50f6:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    50f8:	orn	r2, r2, #31
    50fc:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    50fe:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5102:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5106:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    510a:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    510e:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5110:	strb	r3, [r1, #2]
    5112:	bx	lr
       if (n < 4) goto fail;
    5114:	cmp	r0, #3
    5116:	bls.n	5142 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5118:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    511a:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    511c:	orn	r2, r2, #15
    5120:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5122:	ubfx	r2, r3, #12, #6
    5126:	orn	r2, r2, #127	; 0x7f
    512a:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    512c:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5130:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5134:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5138:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    513c:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    513e:	strb	r3, [r1, #3]
    5140:	bx	lr
    return nullptr;
    5142:	movs	r0, #0
  }
    5144:	bx	lr
	...

00005148 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5148:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    514a:	push	{r4, r5, lr}
    514c:	mov	r5, r0
    if (str >= end) {
    514e:	bcs.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5150:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    5152:	ldrsb.w	r0, [r0]
    5156:	cmp	r0, #0
    5158:	blt.n	5160 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    515a:	adds	r0, r5, #1
      *rtn = ch;
    515c:	str	r3, [r2, #0]
  }
    515e:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5160:	and.w	r0, r3, #224	; 0xe0
    5164:	cmp	r0, #192	; 0xc0
    5166:	bne.n	51a6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5168:	and.w	r3, r3, #31
      n = 2;
    516c:	movs	r4, #2
    if ((str + n) > end) {
    516e:	adds	r0, r5, r4
    5170:	cmp	r0, r1
    5172:	bhi.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    5174:	adds	r5, #1
      ch = str[i];
    5176:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    517a:	and.w	r4, r1, #192	; 0xc0
    517e:	cmp	r4, #128	; 0x80
    5180:	bne.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    5182:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    5186:	cmp	r5, r0
      cp |= ch & 0X3F;
    5188:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    518c:	bne.n	5176 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    518e:	sub.w	r4, r3, #128	; 0x80
    5192:	ldr	r1, [pc, #56]	; (51cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    5194:	cmp	r4, r1
    5196:	bhi.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    5198:	sub.w	r1, r3, #55296	; 0xd800
    519c:	cmp.w	r1, #2048	; 0x800
    51a0:	bcc.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    51a2:	str	r3, [r2, #0]
    return str + n;
    51a4:	b.n	515e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    51a6:	and.w	r0, r3, #240	; 0xf0
    51aa:	cmp	r0, #224	; 0xe0
    51ac:	bne.n	51b6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    51ae:	and.w	r3, r3, #15
      n = 3;
    51b2:	movs	r4, #3
    51b4:	b.n	516e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    51b6:	and.w	r0, r3, #248	; 0xf8
    51ba:	cmp	r0, #240	; 0xf0
    51bc:	bne.n	51c6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    51be:	and.w	r3, r3, #7
      n = 4;
    51c2:	movs	r4, #4
    51c4:	b.n	516e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    51c6:	movs	r0, #0
    51c8:	b.n	515e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    51ca:	nop
    51cc:	.word	0x0010ff7f

000051d0 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    51d0:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    51d2:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    51d4:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    51d6:	lsls	r2, r3, #31
    51d8:	bpl.n	521a <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    51da:	ldr	r0, [r0, #4]
    51dc:	add.w	r2, r4, #16
    51e0:	ldr	r1, [r4, #12]
    51e2:	ldr	r3, [r0, #0]
    51e4:	str	r2, [sp, #4]
    51e6:	ldr	r3, [r3, #36]	; 0x24
    51e8:	blx	r3
    51ea:	ldr	r2, [sp, #4]
    51ec:	mov	r5, r0
    51ee:	cbnz	r0, 51f8 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    51f0:	movs	r5, #0
}
    51f2:	mov	r0, r5
    51f4:	add	sp, #8
    51f6:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    51f8:	ldrb	r3, [r4, #0]
    51fa:	lsls	r3, r3, #30
    51fc:	bmi.n	5208 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    51fe:	ldrb	r3, [r4, #0]
    5200:	bic.w	r3, r3, #1
    5204:	strb	r3, [r4, #0]
    5206:	b.n	51f2 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5208:	adds	r0, r4, #4
    520a:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    520c:	ldr	r3, [r0, #0]
    520e:	add	r1, r6
    5210:	ldr	r3, [r3, #36]	; 0x24
    5212:	blx	r3
    5214:	cmp	r0, #0
    5216:	bne.n	51fe <FsCache::sync()+0x2e>
    5218:	b.n	51f0 <FsCache::sync()+0x20>
  return true;
    521a:	movs	r5, #1
    521c:	b.n	51f2 <FsCache::sync()+0x22>

0000521e <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    521e:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5220:	push	{r4, r5, r6, lr}
    5222:	mov	r4, r0
    5224:	mov	r6, r1
    5226:	mov	r5, r2
  if (!m_blockDev) {
    5228:	cbnz	r3, 522e <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    522a:	movs	r0, #0
}
    522c:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    522e:	ldr	r3, [r0, #12]
    5230:	cmp	r3, r1
    5232:	beq.n	5246 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5234:	bl	51d0 <FsCache::sync()>
    5238:	cmp	r0, #0
    523a:	beq.n	522a <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    523c:	lsls	r3, r5, #29
    523e:	bpl.n	5256 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5240:	movs	r3, #0
    m_sector = sector;
    5242:	str	r6, [r4, #12]
    m_status = 0;
    5244:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    5246:	ldrb	r3, [r4, #0]
    5248:	and.w	r5, r5, #3
    524c:	mov	r0, r4
    524e:	orrs	r3, r5
    5250:	strb.w	r3, [r0], #16
  return m_buffer;
    5254:	b.n	522c <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    5256:	ldr	r0, [r4, #4]
    5258:	add.w	r2, r4, #16
    525c:	mov	r1, r6
    525e:	ldr	r3, [r0, #0]
    5260:	ldr	r3, [r3, #16]
    5262:	blx	r3
    5264:	cmp	r0, #0
    5266:	bne.n	5240 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5268:	b.n	522a <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

0000526c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    526c:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    526e:	push	{r4, r5, lr}
  if (chr < 127) {
    5270:	bhi.n	52c2 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    5272:	sub.w	r3, r0, #97	; 0x61
    5276:	cmp	r3, #25
    5278:	ite	hi
    527a:	movhi	r3, #0
    527c:	movls	r3, #1
    527e:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5282:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5284:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    5286:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    528a:	ldrh.w	r5, [r1, r2, lsl #2]
    528e:	cmp	r5, r0
    mid = left + (right - left)/2;
    5290:	ite	hi
    5292:	movhi	r4, r2
    5294:	movls	r3, r2
  while (right - left > 1) {
    5296:	subs	r2, r4, r3
    5298:	cmp	r2, #1
    529a:	bhi.n	5286 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    529c:	uxth	r2, r3
    529e:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    52a2:	cmp	r0, r3
    52a4:	bcc.n	5302 <toUpcase(unsigned short)+0x96>
    52a6:	add.w	r1, r1, r2, lsl #2
    52aa:	subs	r3, r0, r3
    52ac:	ldrb	r2, [r1, #3]
    52ae:	cmp	r3, r2
    52b0:	bge.n	5302 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    52b2:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    52b6:	cmp	r2, #1
    52b8:	bne.n	52ca <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    52ba:	and.w	r3, r3, #1
    52be:	subs	r3, r0, r3
    52c0:	b.n	5282 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    52c2:	movs	r4, #53	; 0x35
  size_t left = 0;
    52c4:	movs	r3, #0
    52c6:	ldr	r1, [pc, #68]	; (530c <toUpcase(unsigned short)+0xa0>)
    52c8:	b.n	5296 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    52ca:	cbz	r2, 52d4 <toUpcase(unsigned short)+0x68>
    52cc:	uxth	r2, r2
    52ce:	add	r2, r0
    52d0:	uxth	r0, r2
    52d2:	b.n	5284 <toUpcase(unsigned short)+0x18>
    52d4:	movw	r2, #58272	; 0xe3a0
    52d8:	b.n	52ce <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    52da:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    52de:	ldrh.w	r5, [r1, r2, lsl #2]
    52e2:	cmp	r5, r0
    mid = left + (right - left)/2;
    52e4:	ite	hi
    52e6:	movhi	r4, r2
    52e8:	movls	r3, r2
  while (right - left > 1) {
    52ea:	subs	r2, r4, r3
    52ec:	cmp	r2, #1
    52ee:	bhi.n	52da <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    52f0:	uxth	r3, r3
    52f2:	ldrh.w	r2, [r1, r3, lsl #2]
    52f6:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    52f8:	itt	eq
    52fa:	addeq.w	r1, r1, r3, lsl #2
    52fe:	ldrheq	r0, [r1, #2]
    5300:	b.n	5284 <toUpcase(unsigned short)+0x18>
    5302:	movs	r4, #75	; 0x4b
    5304:	movs	r3, #0
    5306:	ldr	r1, [pc, #8]	; (5310 <toUpcase(unsigned short)+0xa4>)
    5308:	b.n	52ea <toUpcase(unsigned short)+0x7e>
    530a:	nop
    530c:	.word	0x20000b98
    5310:	.word	0x20000a30

00005314 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5314:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    5316:	push	{r0, r1, r4, lr}
    5318:	mov	r4, r0
  if (ls) {
    531a:	cbz	r3, 5326 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    531c:	movs	r2, #0
    531e:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5320:	mov	r0, r3
    5322:	add	sp, #8
    5324:	pop	{r4, pc}
  } else if (next >= end) {
    5326:	ldrd	r0, r1, [r0, #4]
    532a:	cmp	r0, r1
    532c:	bcs.n	5320 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    532e:	add	r2, sp, #4
    5330:	bl	5148 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5334:	cbnz	r0, 533c <FsName::get16()+0x28>
  return 0XFFFF;
    5336:	movw	r3, #65535	; 0xffff
    533a:	b.n	5320 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    533c:	ldr	r2, [sp, #4]
    next = ptr;
    533e:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5340:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5344:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    5346:	bcc.n	5320 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5348:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    534c:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    534e:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5352:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    5356:	strh	r3, [r4, #12]
    5358:	uxth	r3, r2
    535a:	b.n	5320 <FsName::get16()+0xc>

0000535c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    535c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5360:	mov	r6, r2
    5362:	mov	r5, r1
    5364:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5368:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    536a:	ldrh.w	r4, [r5, #2]!
    536e:	cbnz	r3, 5382 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5370:	ldrd	r2, r3, [r6, #4]
    5374:	cmp	r2, r3
    5376:	bne.n	5382 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    5378:	clz	r0, r4
    537c:	lsrs	r0, r0, #5
}
    537e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5382:	mov	r0, r6
    5384:	bl	5314 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5388:	bl	526c <toUpcase(unsigned short)>
    538c:	mov	r7, r0
    538e:	mov	r0, r4
    5390:	bl	526c <toUpcase(unsigned short)>
    5394:	cmp	r7, r0
    5396:	bne.n	53a0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5398:	cmp	r5, r8
    539a:	bne.n	5368 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    539c:	movs	r0, #1
    539e:	b.n	537e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    53a0:	movs	r0, #0
    53a2:	b.n	537e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

000053a4 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    53a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    53a8:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    53ac:	mov	sl, r0
    53ae:	mov	r8, r1
  if (!isOpen()) {
    53b0:	cmp	r3, #0
    53b2:	beq.n	5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    53b4:	subs	r2, #1
  char* str = name;
    53b6:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    53b8:	mov.w	r9, #2
  uint16_t hs = 0;
    53bc:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    53be:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    53c0:	ldrb.w	r3, [sl, #48]	; 0x30
    53c4:	cmp	r3, r9
    53c6:	bcc.n	5430 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    53c8:	movs	r2, #0
    53ca:	mov	r1, r9
    53cc:	mov	r0, sl
    53ce:	bl	54b6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    53d2:	cbz	r0, 5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    53d4:	ldrb	r3, [r0, #0]
    53d6:	cmp	r3, #193	; 0xc1
    53d8:	bne.n	5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    53da:	mov	r6, r0
    53dc:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    53e0:	ldr	r3, [pc, #108]	; (5450 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    53e2:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    53e6:	cbz	r5, 5420 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    53e8:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    53ec:	uxth	r2, r2
    53ee:	cmp.w	r2, #1024	; 0x400
    53f2:	bcs.n	5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    53f4:	and.w	r5, r3, r5, lsl #10
    53f8:	ubfx	r0, r0, #0, #10
    53fc:	orrs	r0, r5
    53fe:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5402:	mov	r1, r4
    5404:	mov	r2, r7
    5406:	bl	50b4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    540a:	mov	r4, r0
    540c:	cbz	r0, 5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    540e:	movs	r5, #0
    5410:	ldr	r3, [pc, #60]	; (5450 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5412:	cmp	fp, r6
    5414:	bne.n	53e2 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5416:	add.w	r9, r9, #1
    541a:	uxtb.w	r9, r9
    541e:	b.n	53c0 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5420:	add.w	r2, r0, #10240	; 0x2800
    5424:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    5426:	cmp.w	r2, #2048	; 0x800
    542a:	bcc.n	543c <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    542c:	cmp	r0, #0
    542e:	bne.n	5402 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5430:	movs	r3, #0
  return str - name;
    5432:	sub.w	r0, r4, r8
  *str = '\0';
    5436:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5438:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    543c:	cmp.w	r2, #1024	; 0x400
    5440:	bcs.n	5446 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5442:	mov	r5, r0
    5444:	b.n	5412 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    5446:	movs	r0, #0
    5448:	strb.w	r0, [r8]
  return 0;
    544c:	b.n	5438 <ExFatFile::getName8(char*, unsigned int)+0x94>
    544e:	nop
    5450:	.word	0x000ffc00

00005454 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5454:	movs	r0, #0
    next = begin;
    5456:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5458:	push	{r4, r5, r6, lr}
    545a:	mov	r4, r1
  uint16_t hash = 0;
    545c:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    545e:	movw	r5, #65535	; 0xffff
    5462:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5464:	strh	r0, [r1, #12]
    return !ls && next == end;
    5466:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5468:	str	r0, [r4, #16]
    546a:	cbnz	r3, 54a8 <ExFatFile::hashName(ExName_t*)+0x54>
    546c:	ldrd	r2, r3, [r4, #4]
    5470:	cmp	r2, r3
    5472:	bne.n	54a8 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5474:	subs	r0, #1
  fname->nameHash = hash;
    5476:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5478:	cmp	r0, #254	; 0xfe
    547a:	ite	hi
    547c:	movhi	r0, #0
    547e:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5480:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5482:	bl	526c <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5486:	lsls	r3, r6, #15
    5488:	orr.w	r3, r3, r6, lsr #1
    548c:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5490:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5492:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5494:	ubfx	r3, r3, #1, #15
    5498:	orr.w	r3, r3, r2, lsl #15
    549c:	uxtah	r3, r0, r3
    fname->nameLength++;
    54a0:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    54a2:	uxth	r6, r3
    fname->nameLength++;
    54a4:	adds	r0, #1
    54a6:	b.n	5466 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    54a8:	mov	r0, r4
    54aa:	bl	5314 <FsName::get16()>
    if (u == 0XFFFF) {
    54ae:	cmp	r0, r5
    54b0:	bne.n	5482 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    54b2:	movs	r0, #0
    54b4:	b.n	5480 <ExFatFile::hashName(ExName_t*)+0x2c>

000054b6 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    54b6:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    54b8:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    54bc:	sub	sp, #20
    54be:	mov	r4, r0
    54c0:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    54c2:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    54c4:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    54c6:	ldmia.w	r3, {r0, r1, r2}
    54ca:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    54ce:	lsls	r2, r7, #5
    54d0:	mov	r1, r5
    54d2:	ldr	r0, [r4, #32]
    54d4:	bl	5eaa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    54d8:	cmp	r0, #1
    54da:	bne.n	54ea <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    54dc:	mov	r2, r6
    54de:	mov	r1, r5
    54e0:	ldr	r0, [r4, #32]
    54e2:	bl	5e10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    54e6:	add	sp, #20
    54e8:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    54ea:	movs	r0, #0
    54ec:	b.n	54e6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

000054ee <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    54ee:	push	{r4, lr}
    54f0:	mov	r4, r0
  bool rtn = sync();
    54f2:	bl	63cc <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    54f6:	movs	r3, #0
    54f8:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    54fc:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5500:	pop	{r4, pc}

00005502 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5502:	push	{r3, r4, r5, lr}
    5504:	mov	r5, r1
    5506:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5508:	add.w	r1, r0, #36	; 0x24
    550c:	movs	r2, #0
    550e:	ldr	r0, [r0, #32]
    5510:	bl	5e10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5514:	cbz	r0, 5520 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    5516:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5518:	strh	r3, [r5, #0]
    551a:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    551c:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    551e:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5520:	pop	{r3, r4, r5, pc}

00005522 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5522:	push	{r3, r4, r5, lr}
    5524:	mov	r5, r1
    5526:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5528:	add.w	r1, r0, #36	; 0x24
    552c:	movs	r2, #0
    552e:	ldr	r0, [r0, #32]
    5530:	bl	5e10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5534:	cbz	r0, 5540 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    5536:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5538:	strh	r3, [r5, #0]
    553a:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    553c:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    553e:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5540:	pop	{r3, r4, r5, pc}

00005542 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5542:	push	{r3, r4, r5, lr}
    5544:	mov	r5, r1
  if (isOpen()) {
    5546:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    554a:	mov	r4, r0
  if (isOpen()) {
    554c:	cbnz	r1, 5564 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    554e:	movs	r2, #56	; 0x38
    5550:	bl	9d8c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5554:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5556:	movs	r0, #1
  m_vol = vol;
    5558:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    555a:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    555e:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    5562:	pop	{r3, r4, r5, pc}
  return false;
    5564:	movs	r0, #0
    5566:	b.n	5562 <ExFatFile::openRoot(ExFatVolume*)+0x20>

00005568 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5568:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    556a:	mov	r5, r1
    556c:	ldrb.w	r4, [r1], #1
    5570:	cmp	r4, #32
    5572:	beq.n	556a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    5574:	ldr	r7, [pc, #108]	; (55e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    5576:	str	r5, [r2, #0]
  fname->end = path;
    5578:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    557a:	mov	r6, r5
    557c:	ldrb.w	r4, [r6], #1
    5580:	cbz	r4, 5586 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5582:	cmp	r4, #47	; 0x2f
    5584:	bne.n	559e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    5586:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5588:	ldrb.w	r1, [r5], #1
    558c:	cmp	r1, #32
    558e:	beq.n	5586 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5590:	cmp	r1, #47	; 0x2f
    5592:	beq.n	5586 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5594:	str	r4, [r3, #0]
  return hashName(fname);
    5596:	mov	r1, r2

 fail:
  return false;
}
    5598:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    559a:	b.w	5454 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    559e:	cmp	r4, #60	; 0x3c
    55a0:	bhi.n	55c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    55a2:	cmp	r4, #33	; 0x21
    55a4:	bhi.n	55b4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    55a6:	subs	r1, r4, #1
    55a8:	cmp	r1, #30
    55aa:	bls.n	55c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    55ac:	cmp	r4, #32
    55ae:	bne.n	55d4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    55b0:	mov	r5, r6
    55b2:	b.n	557a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    55b4:	sub.w	r1, r4, #34	; 0x22
    55b8:	uxtb	r1, r1
    55ba:	lsr.w	r1, r7, r1
    55be:	lsls	r1, r1, #31
    55c0:	bpl.n	55de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    55c2:	movs	r0, #0
    55c4:	pop	{r4, r5, r6, r7}
    55c6:	bx	lr
    55c8:	cmp	r4, #92	; 0x5c
    55ca:	beq.n	55c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    55cc:	bhi.n	55d8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    55ce:	subs	r4, #62	; 0x3e
    55d0:	cmp	r4, #1
    55d2:	bls.n	55c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    55d4:	str	r6, [r2, #8]
    55d6:	b.n	55b0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    55d8:	cmp	r4, #124	; 0x7c
    55da:	beq.n	55c2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    55dc:	b.n	55d4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    55de:	cmp	r4, #46	; 0x2e
    55e0:	b.n	55ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    55e2:	nop
    55e4:	.word	0x05002101

000055e8 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    55e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55ec:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    55f0:	ldrb.w	r3, [r0, #51]	; 0x33
    55f4:	sub	sp, #12
    55f6:	mov	r4, r0
    55f8:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    55fa:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    55fc:	mov	r6, r2
  if (!isReadable()) {
    55fe:	bpl.n	56c8 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5600:	lsls	r0, r3, #25
    5602:	bmi.n	560c <ExFatFile::read(void*, unsigned int)+0x24>
    5604:	ldrb.w	r3, [r4, #49]	; 0x31
    5608:	lsls	r1, r3, #28
    560a:	bpl.n	5624 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    560c:	ldrd	r2, r3, [r4]
    5610:	ldrd	r1, r0, [r4, #16]
    5614:	adds	r5, r6, r2
    5616:	adc.w	r3, r3, #0
    561a:	cmp	r1, r5
    561c:	sbcs.w	r3, r0, r3
    5620:	bcs.n	5624 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5622:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5624:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5628:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    562a:	vmov	s16, r3
    562e:	b.n	5714 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5630:	ldr	r0, [r4, #32]
    5632:	ldrd	r3, r2, [r4]
    5636:	ldr.w	r7, [r0, #1080]	; 0x438
    563a:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    563c:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5640:	cbnz	r7, 5656 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5642:	orrs	r3, r2
    5644:	bne.n	56a0 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5646:	ldrb.w	r3, [r4, #49]	; 0x31
    564a:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    564c:	ite	mi
    564e:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5652:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5654:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5656:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    565a:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    565c:	ldr	r2, [r4, #24]
    565e:	ldrb.w	r1, [fp, #1093]	; 0x445
    5662:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5664:	ldr.w	r2, [fp, #1068]	; 0x42c
    5668:	lsls	r5, r1
    566a:	add.w	r5, r5, r7, lsr #9
    566e:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5670:	cmp.w	sl, #0
    5674:	bne.n	56da <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5676:	cmp.w	r8, #512	; 0x200
    567a:	bcc.n	56da <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    567c:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5680:	cmp	r5, r2
    5682:	beq.n	56da <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5684:	cmp.w	r8, #1024	; 0x400
    5688:	bcs.n	5728 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    568a:	ldr.w	r0, [fp, #532]	; 0x214
    568e:	mov	r2, r9
    5690:	mov	r1, r5
    5692:	ldr	r3, [r0, #0]
    5694:	ldr	r3, [r3, #16]
    5696:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5698:	cbz	r0, 56c8 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    569a:	mov.w	r7, #512	; 0x200
    569e:	b.n	5700 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    56a0:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    56a4:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    56a6:	lsls	r3, r3, #25
    56a8:	bpl.n	56b0 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    56aa:	adds	r1, #1
    56ac:	str	r1, [r4, #24]
    56ae:	b.n	5656 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    56b0:	vmov	r2, s16
    56b4:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    56b8:	cmp	r0, #0
    56ba:	blt.n	56c8 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    56bc:	bne.n	5656 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    56be:	ldrb.w	r3, [r4, #49]	; 0x31
    56c2:	tst.w	r3, #80	; 0x50
    56c6:	bne.n	571a <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    56c8:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    56cc:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    56d0:	orr.w	r3, r3, #2
    56d4:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    56d8:	b.n	571e <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    56da:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    56de:	movs	r2, #0
    56e0:	mov	r1, r5
    56e2:	add.w	r0, fp, #528	; 0x210
    56e6:	cmp	r7, r8
    56e8:	it	cs
    56ea:	movcs	r7, r8
    56ec:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    56f0:	cmp	r0, #0
    56f2:	beq.n	56c8 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    56f4:	add.w	r1, r0, sl
    56f8:	mov	r2, r7
    56fa:	mov	r0, r9
    56fc:	bl	9dd0 <memcpy>
    dst += n;
    5700:	add	r9, r7
    toRead -= n;
    5702:	sub.w	r8, r8, r7
    m_curPosition += n;
    5706:	ldrd	r3, r2, [r4]
    570a:	adds	r3, r3, r7
    570c:	adc.w	r2, r2, #0
    5710:	strd	r3, r2, [r4]
  while (toRead) {
    5714:	cmp.w	r8, #0
    5718:	bne.n	5630 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    571a:	sub.w	r0, r6, r8
}
    571e:	add	sp, #12
    5720:	vpop	{d8}
    5724:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5728:	movs	r3, #1
    572a:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    572c:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5730:	subs	r3, r3, r0
    5732:	cmp	r3, r1
    5734:	it	cs
    5736:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5738:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    573a:	mov.w	r7, r3, lsl #9
    573e:	bls.n	5756 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5740:	ldr.w	r0, [fp, #532]	; 0x214
    5744:	mov	r1, r5
    5746:	ldr	r2, [r0, #0]
    5748:	ldr.w	fp, [r2, #20]
    574c:	mov	r2, r9
    574e:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5750:	cmp	r0, #0
    5752:	bne.n	5700 <ExFatFile::read(void*, unsigned int)+0x118>
    5754:	b.n	56c8 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    5756:	adds	r1, r5, r3
    5758:	cmp	r2, r1
    575a:	bcs.n	5740 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    575c:	add.w	r0, fp, #528	; 0x210
    5760:	str	r3, [sp, #4]
    5762:	bl	51d0 <FsCache::sync()>
    5766:	ldr	r3, [sp, #4]
    5768:	cmp	r0, #0
    576a:	bne.n	5740 <ExFatFile::read(void*, unsigned int)+0x158>
    576c:	b.n	56c8 <ExFatFile::read(void*, unsigned int)+0xe0>

0000576e <ExFatFile::peek()>:
int ExFatFile::peek() {
    576e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5770:	movs	r2, #1
    5772:	add.w	r1, sp, #7
    5776:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5778:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    577a:	ldrd	r6, r7, [r0]
    577e:	bl	55e8 <ExFatFile::read(void*, unsigned int)>
    5782:	cmp	r0, #1
  m_curCluster = curCluster;
    5784:	str	r5, [r4, #24]
    5786:	ite	eq
    5788:	ldrbeq.w	r0, [sp, #7]
    578c:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5790:	strd	r6, r7, [r4]
}
    5794:	add	sp, #12
    5796:	pop	{r4, r5, r6, r7, pc}

00005798 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5798:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    579c:	ldrb.w	ip, [r0, #49]	; 0x31
    57a0:	mov	r4, r0
    57a2:	mov	r6, r2
    57a4:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    57a6:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    57aa:	cmp.w	ip, #0
    57ae:	beq.n	5868 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    57b0:	ldrd	r0, r3, [r0]
    57b4:	cmp	r3, r7
    57b6:	it	eq
    57b8:	cmpeq	r0, r2
    57ba:	beq.n	57ca <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    57bc:	orrs.w	r2, r6, r7
    57c0:	bne.n	57ce <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    57c2:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    57c4:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    57c6:	strd	r6, r7, [r4]
    return true;
    57ca:	movs	r0, #1
    57cc:	b.n	586e <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    57ce:	tst.w	ip, #8
    57d2:	beq.n	57de <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    57d4:	ldrd	r1, r2, [r4, #16]
    57d8:	cmp	r1, r6
    57da:	sbcs	r2, r7
    57dc:	bcc.n	5868 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    57de:	ldr.w	lr, [r4, #32]
    57e2:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    57e4:	ldrb.w	r1, [lr, #1093]	; 0x445
    57e8:	adc.w	sl, r7, #4294967295
    57ec:	adds	r1, #9
    57ee:	uxtb	r1, r1
    57f0:	rsb	r9, r1, #32
    57f4:	sub.w	r2, r1, #32
    57f8:	lsrs	r5, r1
    57fa:	lsl.w	r9, sl, r9
    57fe:	lsr.w	r2, sl, r2
    5802:	sub.w	sl, r1, #32
    5806:	orr.w	r5, r5, r9
    580a:	rsb	r9, r1, #32
    580e:	orrs	r5, r2
  if (isContiguous()) {
    5810:	ldrb.w	r2, [r4, #51]	; 0x33
    5814:	tst.w	r2, #64	; 0x40
    5818:	beq.n	5820 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    581a:	ldr	r3, [r4, #28]
    581c:	add	r3, r5
    581e:	b.n	57c4 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5820:	adds.w	fp, r0, #4294967295
    5824:	adc.w	r2, r3, #4294967295
    5828:	lsr.w	r1, fp, r1
    582c:	lsl.w	r9, r2, r9
    5830:	lsr.w	r2, r2, sl
    5834:	orr.w	r1, r1, r9
    5838:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    583a:	cmp	r5, r1
    583c:	bcc.n	5842 <ExFatFile::seekSet(unsigned long long)+0xaa>
    583e:	orrs	r3, r0
    5840:	bne.n	5872 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5842:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5846:	ite	ne
    5848:	ldrne.w	r3, [lr, #1076]	; 0x434
    584c:	ldreq	r3, [r4, #28]
    584e:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5850:	add.w	r9, r4, #24
  while (nNew--) {
    5854:	cmp	r5, #0
    5856:	beq.n	57c6 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5858:	mov	r2, r9
    585a:	ldr	r1, [r4, #24]
    585c:	ldr	r0, [r4, #32]
    585e:	subs	r5, #1
    5860:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5864:	cmp	r0, #0
    5866:	bgt.n	5854 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    5868:	movs	r0, #0
  m_curCluster = tmp;
    586a:	str.w	r8, [r4, #24]
}
    586e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5872:	subs	r5, r5, r1
    5874:	b.n	5850 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00005878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5878:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    587c:	mov	sl, r3
    587e:	ldrb.w	r3, [r0, #49]	; 0x31
    5882:	sub	sp, #52	; 0x34
    5884:	mov	r4, r0
    5886:	mov	r6, r1
    5888:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    588a:	cmp	r3, #0
    588c:	bne.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    588e:	ldrb.w	r3, [r1, #49]	; 0x31
    5892:	tst.w	r3, #80	; 0x50
    5896:	beq.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5898:	and.w	r9, sl, #3
    589c:	cmp.w	r9, #3
    58a0:	beq.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    58a2:	add.w	r9, r9, #1
    58a6:	and.w	r3, sl, #8
    58aa:	orr.w	r9, r9, r3
  if (fname) {
    58ae:	cmp	r2, #0
    58b0:	beq.n	5924 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    58b2:	ldr	r7, [r2, #16]
    58b4:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    58b6:	movs	r2, #0
    58b8:	mov	r0, r1
    58ba:	adds	r7, #14
    58bc:	udiv	r7, r7, r3
    58c0:	adds	r7, #2
    58c2:	movs	r3, #0
    58c4:	uxtb	r7, r7
    58c6:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    58ca:	mov.w	fp, #0
    58ce:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    58d0:	movs	r2, #32
    58d2:	add	r1, sp, #16
    58d4:	mov	r0, r6
    58d6:	bl	55e8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    58da:	cmp	r0, #0
    58dc:	beq.w	5a66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    58e0:	cmp	r0, #32
    58e2:	bne.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    58e4:	ldrsb.w	r1, [sp, #16]
    58e8:	ldrb.w	r2, [sp, #16]
    58ec:	cmp	r1, #0
    58ee:	blt.n	592e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    58f0:	cmp.w	fp, #0
    58f4:	bne.n	5902 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    58f6:	ldr	r1, [r6, #0]
    58f8:	sub.w	r3, r1, #32
    58fc:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    58fe:	ldr	r3, [r6, #24]
    5900:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5902:	cmp	fp, r7
        freeCount++;
    5904:	itt	cc
    5906:	addcc.w	r3, fp, #1
    590a:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    590e:	cbnz	r2, 5928 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5910:	cmp	r5, #0
    5912:	bne.w	5a66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5916:	mov.w	r8, #0
    591a:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    591e:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5922:	b.n	59fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5924:	movs	r7, #3
    5926:	b.n	58ca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5928:	movs	r0, #0
    592a:	mov	r8, r0
    592c:	b.n	58d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    592e:	cmp.w	r8, #0
    5932:	bne.n	5984 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5934:	cmp	fp, r7
    5936:	it	cc
    5938:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    593c:	cmp	r2, #133	; 0x85
    593e:	bne.n	5928 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5940:	movs	r2, #56	; 0x38
    5942:	mov	r1, r8
    5944:	mov	r0, r4
    5946:	bl	9d8c <memset>
      m_setCount = dirFile->setCount;
    594a:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    594e:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5952:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5954:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5958:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    595c:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    595e:	it	pl
    5960:	orrpl.w	r2, r2, #8
    5964:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5968:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    596a:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    596c:	ldr	r2, [r6, #24]
    596e:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5970:	ldr	r2, [r6, #0]
    5972:	subs	r2, #32
    5974:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5976:	ldrb.w	r2, [r6, #51]	; 0x33
    597a:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    597e:	strb.w	r2, [r4, #44]	; 0x2c
    5982:	b.n	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5984:	cmp	r2, #192	; 0xc0
    5986:	bne.n	5a2a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5988:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    598c:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5990:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5992:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5996:	it	mi
    5998:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    599c:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    59a0:	it	mi
    59a2:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    59a6:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    59a8:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    59ac:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    59ae:	strd	r0, r1, [r4, #8]
      if (!fname) {
    59b2:	cbnz	r5, 5a02 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    59b4:	tst.w	sl, #2048	; 0x800
    59b8:	bne.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    59ba:	tst.w	sl, #17408	; 0x4400
    59be:	bne.n	59c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    59c0:	ldrb.w	r3, [r4, #51]	; 0x33
    59c4:	lsls	r0, r3, #30
    59c6:	bpl.n	59d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    59c8:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    59cc:	lsls	r1, r3, #27
    59ce:	bmi.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    59d0:	lsls	r2, r3, #31
    59d2:	bmi.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    59d4:	tst.w	sl, #1024	; 0x400
    59d8:	beq.n	5a54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    59da:	ldrb.w	r3, [r4, #51]	; 0x33
    59de:	lsls	r3, r3, #30
    59e0:	bpl.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    59e2:	movs	r2, #0
    59e4:	movs	r3, #0
    59e6:	mov	r0, r4
    59e8:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
    59ec:	cmp	r0, #0
    59ee:	beq.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    59f0:	mov	r0, r4
    59f2:	bl	6658 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    59f6:	cmp	r0, #0
    59f8:	beq.n	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    59fa:	mov	r0, r8
    59fc:	add	sp, #52	; 0x34
    59fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5a02:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5a04:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5a08:	ldr	r1, [r5, #16]
    next = begin;
    5a0a:	str	r2, [r5, #4]
    5a0c:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5a10:	strh	r3, [r5, #12]
    5a12:	cmp	r1, r2
    5a14:	bne.n	5928 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5a16:	ldrh	r0, [r5, #20]
    5a18:	ldrh.w	r2, [sp, #20]
    5a1c:	sub.w	ip, r0, r2
    5a20:	rsbs	r0, ip, #0
    5a24:	adc.w	r0, r0, ip
    5a28:	b.n	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5a2a:	cmp	r2, #193	; 0xc1
    5a2c:	bne.w	5928 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5a30:	mov	r2, r5
    5a32:	add	r1, sp, #16
    5a34:	mov	r0, r4
    5a36:	bl	535c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5a3a:	cmp	r0, #0
    5a3c:	beq.w	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5a40:	ldrh	r2, [r5, #12]
    5a42:	cmp	r2, #0
    5a44:	bne.w	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5a48:	ldrd	r1, r2, [r5, #4]
    5a4c:	cmp	r1, r2
    5a4e:	bne.w	592a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5a52:	b.n	59b4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5a54:	tst.w	sl, #16384	; 0x4000
    5a58:	beq.n	59fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5a5a:	mov	r0, r4
    5a5c:	ldrd	r2, r3, [r4, #16]
    5a60:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
    5a64:	b.n	59f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5a66:	tst.w	sl, #512	; 0x200
    5a6a:	beq.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5a6e:	tst.w	r9, #2
    5a72:	beq.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5a76:	cmp	r5, #0
    5a78:	beq.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5a7c:	cmp	fp, r7
    5a7e:	bcc.n	5ace <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5a80:	movs	r2, #56	; 0x38
    5a82:	movs	r1, #0
    5a84:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5a86:	ldrb.w	r8, [r6, #51]	; 0x33
    5a8a:	bl	9d8c <memset>
  ExFatVolume* volume() const {return m_vol;}
    5a8e:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5a90:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5a94:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    5a98:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    5a9a:	movs	r3, #8
  m_dirPos = freePos;
    5a9c:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    5aa0:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    5aa4:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    5aa8:	mov.w	r8, #0
  m_dirPos = freePos;
    5aac:	ldr	r3, [sp, #0]
    5aae:	str	r3, [r4, #36]	; 0x24
    5ab0:	ldr	r3, [sp, #4]
    5ab2:	str	r3, [r4, #40]	; 0x28
    next = begin;
    5ab4:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    5ab6:	strh.w	r8, [r5, #12]
    next = begin;
    5aba:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5abc:	uxtb.w	fp, r8
    5ac0:	cmp	r7, fp
    5ac2:	bhi.n	5b12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    5ac4:	mov	r0, r4
    5ac6:	bl	63cc <ExFatFile::sync()>
    5aca:	mov	r8, r0
    5acc:	b.n	59fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    5ace:	movs	r2, #32
    5ad0:	add	r1, sp, #16
    5ad2:	mov	r0, r6
    5ad4:	bl	55e8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5ad8:	cbnz	r0, 5af0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5ada:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5adc:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    5ae0:	bl	640e <ExFatFile::addDirCluster()>
    5ae4:	cmp	r0, #0
    5ae6:	beq.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5aea:	str.w	r8, [r6, #24]
      continue;
    5aee:	b.n	5a7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5af0:	cmp	r0, #32
    5af2:	bne.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5af6:	cmp.w	fp, #0
    5afa:	bne.n	5b08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5afc:	ldr	r2, [r6, #0]
    5afe:	sub.w	r3, r2, #32
    5b02:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5b04:	ldr	r3, [r6, #24]
    5b06:	str	r3, [sp, #0]
    freeCount++;
    5b08:	add.w	r3, fp, #1
    5b0c:	uxtb.w	fp, r3
    5b10:	b.n	5a7c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5b12:	movs	r2, #1
    5b14:	mov	r1, fp
    5b16:	mov	r0, r4
    5b18:	bl	54b6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5b1c:	mov	r6, r0
    5b1e:	cmp	r0, #0
    5b20:	beq.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5b24:	ldrsb.w	r2, [r0]
    5b28:	cmp	r2, #0
    5b2a:	blt.w	5916 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5b2e:	movs	r2, #32
    5b30:	movs	r1, #0
    5b32:	bl	9d8c <memset>
    if (i == 0) {
    5b36:	cmp.w	fp, #0
    5b3a:	bne.n	5b7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5b3c:	movs	r3, #133	; 0x85
    5b3e:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5b40:	ldr	r3, [pc, #128]	; (5bc4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5b42:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5b46:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5b4a:	ldr	r3, [r3, #0]
    5b4c:	cbz	r3, 5b72 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5b4e:	add.w	r2, sp, #11
    5b52:	add.w	r1, sp, #14
    5b56:	add	r0, sp, #12
    5b58:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5b5a:	ldrh.w	r3, [sp, #12]
    5b5e:	strh	r3, [r6, #10]
    5b60:	ldrh.w	r3, [sp, #14]
    5b64:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5b66:	ldrb.w	r3, [sp, #11]
    5b6a:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5b6c:	add.w	r8, r8, #1
    5b70:	b.n	5abc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5b72:	movw	r3, #22561	; 0x5821
    5b76:	strh	r3, [r6, #10]
    5b78:	strh	r3, [r6, #14]
    5b7a:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5b7c:	b.n	5b6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5b7e:	cmp.w	fp, #1
    5b82:	bne.n	5b9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5b84:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    5b88:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    5b8a:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    5b8e:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5b90:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    5b94:	ldr	r3, [r5, #16]
    5b96:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    5b98:	ldrh	r3, [r5, #20]
    5b9a:	strh	r3, [r6, #4]
}
    5b9c:	b.n	5b6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    5b9e:	movs	r3, #193	; 0xc1
    5ba0:	add.w	fp, r6, #30
    5ba4:	strb	r3, [r6, #0]
    return !ls && next == end;
    5ba6:	ldrh	r2, [r5, #12]
    5ba8:	cbnz	r2, 5bb2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    5baa:	ldrd	r1, r2, [r5, #4]
    5bae:	cmp	r1, r2
    5bb0:	beq.n	5b6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    5bb2:	mov	r0, r5
    5bb4:	bl	5314 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    5bb8:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    5bbc:	cmp	fp, r6
    5bbe:	bne.n	5ba6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    5bc0:	b.n	5b6c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    5bc2:	nop
    5bc4:	.word	0x200207fc

00005bc8 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    5bc8:	push	{r4, r5, r6, r7, lr}
    5bca:	mov	r7, r3
    5bcc:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    5bce:	movs	r3, #0
    5bd0:	mov	r5, r0
    5bd2:	mov	r4, r1
    5bd4:	str	r2, [sp, #4]
    5bd6:	str	r3, [sp, #80]	; 0x50
class FsName {
    5bd8:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    5bdc:	ldrb.w	r3, [r0, #49]	; 0x31
    5be0:	cbz	r3, 5be8 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    5be2:	movs	r0, #0
}
    5be4:	add	sp, #92	; 0x5c
    5be6:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    5be8:	ldrb.w	r1, [r1, #49]	; 0x31
    5bec:	tst.w	r1, #80	; 0x50
    5bf0:	beq.n	5be2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    5bf2:	ldrb	r1, [r2, #0]
    5bf4:	cmp	r1, #47	; 0x2f
    5bf6:	bne.n	5c32 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    5bf8:	mov	r0, r2
    while (isDirSeparator(*path)) {
    5bfa:	ldrb.w	r1, [r2], #1
    5bfe:	cmp	r1, #47	; 0x2f
    5c00:	beq.n	5c14 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    5c02:	cbz	r3, 5c06 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5c04:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5c06:	ldr	r4, [r4, #32]
    if (*path == 0) {
    5c08:	cbnz	r1, 5c18 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    5c0a:	mov	r1, r4
    5c0c:	mov	r0, r5
    5c0e:	bl	5542 <ExFatFile::openRoot(ExFatVolume*)>
    5c12:	b.n	5be4 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5c14:	movs	r3, #1
    5c16:	b.n	5bf8 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    5c18:	movs	r2, #56	; 0x38
    5c1a:	movs	r1, #0
    5c1c:	add	r0, sp, #32
    5c1e:	bl	9d8c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5c22:	movs	r3, #64	; 0x40
  m_vol = vol;
    5c24:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    5c26:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    5c28:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5c2c:	movs	r3, #1
    5c2e:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    5c32:	add	r3, sp, #4
    5c34:	add	r2, sp, #8
    5c36:	ldr	r1, [sp, #4]
    5c38:	mov	r0, r5
    5c3a:	bl	5568 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5c3e:	cmp	r0, #0
    5c40:	beq.n	5be2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    5c42:	ldr	r3, [sp, #4]
    5c44:	ldrb	r3, [r3, #0]
    5c46:	cbz	r3, 5c80 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    5c48:	movs	r3, #0
    5c4a:	add	r2, sp, #8
    5c4c:	mov	r1, r4
    5c4e:	mov	r0, r5
    5c50:	bl	5878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c54:	cmp	r0, #0
    5c56:	beq.n	5be2 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    5c58:	add	r6, sp, #32
    5c5a:	mov	r2, r5
    5c5c:	add.w	ip, r5, #48	; 0x30
    5c60:	mov	r4, r6
    5c62:	ldr	r0, [r2, #0]
    5c64:	adds	r2, #8
    5c66:	ldr.w	r1, [r2, #-4]
    5c6a:	mov	r3, r6
    5c6c:	cmp	r2, ip
    5c6e:	stmia	r3!, {r0, r1}
    5c70:	mov	r6, r3
    5c72:	bne.n	5c62 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    5c74:	ldr	r0, [r2, #0]
    5c76:	str	r0, [r3, #0]
    close();
    5c78:	mov	r0, r5
    5c7a:	bl	54ee <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5c7e:	b.n	5c32 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    5c80:	mov	r3, r7
    5c82:	add	r2, sp, #8
    5c84:	mov	r1, r4
    5c86:	mov	r0, r5
    5c88:	bl	5878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c8c:	b.n	5be4 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

00005c8e <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    5c8e:	cbz	r1, 5c98 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    5c90:	add.w	r1, r1, #1096	; 0x448
    5c94:	b.w	5bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    5c98:	mov	r0, r1
    5c9a:	bx	lr

00005c9c <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    5c9c:	mov	r3, r2
    5c9e:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    5ca0:	ldrb.w	r2, [r0, #49]	; 0x31
    5ca4:	cbnz	r2, 5cc0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5ca6:	ldrb.w	r2, [r1, #49]	; 0x31
    5caa:	tst.w	r2, #80	; 0x50
    5cae:	beq.n	5cc0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    5cb0:	ldr	r2, [r1, #0]
    5cb2:	ands.w	r2, r2, #31
    5cb6:	bne.n	5cc0 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    5cb8:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    5cbc:	b.w	5878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    5cc0:	movs	r0, #0
    5cc2:	ldr.w	r4, [sp], #4
    5cc6:	bx	lr

00005cc8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    5cc8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ccc:	mov	r7, r0
    5cce:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5cd0:	mov	sl, r1
    5cd2:	cbz	r1, 5d08 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    5cd4:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    5cd6:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    5cda:	movs	r4, #1
    start = 0;
    5cdc:	cmp	r3, r5
    5cde:	it	ls
    5ce0:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    5ce2:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    5ce6:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    5cea:	mov	r8, r5
  uint32_t endAlloc = start;
    5cec:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    5cee:	lsls	r4, r3
    5cf0:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    5cf2:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    5cf6:	movs	r2, #0
    5cf8:	mov	r0, r7
    5cfa:	add.w	r1, r1, r6, lsr #12
    5cfe:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5d02:	cbnz	r0, 5d36 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5d04:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    5d08:	ldr.w	r5, [r0, #1056]	; 0x420
    5d0c:	b.n	5cd6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    5d0e:	mov	r8, r6
        if (endAlloc == start) {
    5d10:	cmp	r5, r6
    5d12:	beq.n	5d6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5d14:	ldr.w	r2, [r7, #1072]	; 0x430
    5d18:	cmp	r2, r6
    5d1a:	bls.n	5d60 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5d1c:	lsls	r4, r4, #1
    5d1e:	ands.w	r4, r4, #255	; 0xff
    5d22:	bne.n	5d3a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5d24:	add.w	r3, r9, #1
    5d28:	movs	r4, #1
    i = 0;
    5d2a:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    5d2e:	cmp.w	r3, #512	; 0x200
    5d32:	bcs.n	5cf2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5d34:	mov	r9, r3
        if (!(mask & cache[i])) {
    5d36:	ldrb.w	r3, [r0, r9]
    5d3a:	tst	r3, r4
        endAlloc++;
    5d3c:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    5d40:	bne.n	5d0e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    5d42:	sub.w	r2, r6, r8
    5d46:	cmp	r2, fp
    5d48:	bne.n	5d10 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    5d4a:	cmp.w	sl, #0
    5d4e:	bne.n	5d5a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    5d50:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5d54:	it	eq
    5d56:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    5d5a:	add.w	r0, r8, #2
    5d5e:	b.n	5d04 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    5d60:	mov.w	r8, #0
          i = sectorSize;
    5d64:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    5d68:	mov	r6, r8
    5d6a:	b.n	5d24 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5d6c:	movs	r0, #1
    5d6e:	b.n	5d04 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00005d70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    5d70:	subs	r1, #2
                                  uint32_t count, bool value) {
    5d72:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d76:	mov	r5, r0
    5d78:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5d7a:	ldr.w	r0, [r0, #1072]	; 0x430
    5d7e:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    5d80:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    5d82:	cmp	r3, r0
    5d84:	bhi.n	5e06 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5d86:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    5d8a:	cbz	r7, 5dfc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5d8c:	cmp	r1, r2
    5d8e:	bhi.n	5d9e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    5d90:	cmp	r3, r2
    5d92:	bls.n	5d9e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5d94:	cmp	r3, r0
    5d96:	it	cs
    5d98:	movcs	r3, #0
    5d9a:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    5d9e:	and.w	r3, r1, #7
    5da2:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    5da6:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    5daa:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    5dae:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    5db2:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    5db6:	add.w	r8, r3, r1, lsr #12
    5dba:	movs	r2, #1
    5dbc:	mov	r1, r8
    5dbe:	mov	r0, r5
    5dc0:	add	r8, r2
    5dc2:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    5dc6:	cbz	r0, 5e06 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    5dc8:	adds	r3, r0, r4
    5dca:	mov	r1, r9
    5dcc:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    5dd0:	ldrb	r2, [r3, #0]
    5dd2:	tst	r2, r1
    5dd4:	ite	ne
    5dd6:	movne	r4, #1
    5dd8:	moveq	r4, #0
    5dda:	cmp	r4, r7
    5ddc:	beq.n	5e06 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    5dde:	eors	r2, r1
        if (--count == 0) {
    5de0:	subs	r6, #1
        cache[i] ^= mask;
    5de2:	strb	r2, [r3, #0]
        if (--count == 0) {
    5de4:	beq.n	5e0c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    5de6:	lsls	r1, r1, #1
    5de8:	ands.w	r1, r1, #255	; 0xff
    5dec:	bne.n	5dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    5dee:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    5df0:	mov	r4, r1
    5df2:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    5df4:	cmp	r0, r3
      mask = 1;
    5df6:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    5df8:	bne.n	5dd0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    5dfa:	b.n	5dba <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    5dfc:	cmp	r1, r2
      m_bitmapStart = start;
    5dfe:	it	cc
    5e00:	strcc.w	r1, [r5, #1056]	; 0x420
    5e04:	b.n	5d9e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    5e06:	movs	r0, #0
}
    5e08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    5e0c:	movs	r0, #1
    5e0e:	b.n	5e08 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00005e10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5e10:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5e12:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5e16:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5e18:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    5e1a:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    5e1e:	ldrb.w	r5, [r0, #565]	; 0x235
    5e22:	ands	r1, r3
    5e24:	ldr	r3, [r4, #0]
    5e26:	subs	r3, #2
    5e28:	lsls	r3, r5
    5e2a:	add.w	r3, r3, r1, lsr #9
    5e2e:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    5e32:	add	r1, r3
    5e34:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    5e38:	cbz	r0, 5e42 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    5e3a:	ldr	r3, [r4, #4]
    5e3c:	ubfx	r3, r3, #0, #9
    5e40:	add	r0, r3
}
    5e42:	pop	{r3, r4, r5, pc}

00005e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5e44:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5e46:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5e4a:	mov	r4, r1
    5e4c:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    5e4e:	adds	r3, #1
    5e50:	cmp	r3, r1
    5e52:	bcs.n	5e5a <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    5e54:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    5e58:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5e5a:	ldr.w	r1, [r0, #1060]	; 0x424
    5e5e:	movs	r2, #0
    5e60:	add.w	r0, r0, #528	; 0x210
    5e64:	add.w	r1, r1, r4, lsr #7
    5e68:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5e6c:	cmp	r0, #0
    5e6e:	beq.n	5e54 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    5e70:	lsls	r4, r4, #2
    5e72:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    5e76:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    5e78:	adds	r2, r3, #1
  return 1;
    5e7a:	itet	ne
    5e7c:	movne	r0, #1
    return 0;
    5e7e:	moveq	r0, #0
  *value = next;
    5e80:	strne	r3, [r5, #0]
  return 1;
    5e82:	b.n	5e58 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00005e84 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5e84:	push	{r0, r1, r2, r4, r5, lr}
    5e86:	mov	r5, r0
  uint32_t n = 0;
    5e88:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5e8a:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    5e8c:	add	r2, sp, #4
    5e8e:	ldr	r1, [sp, #4]
    5e90:	mov	r0, r5
    5e92:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    5e96:	cmp	r0, #0
    5e98:	blt.n	5ea6 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    5e9a:	add.w	r4, r4, #1
  } while (status);
    5e9e:	bne.n	5e8c <ExFatPartition::chainSize(unsigned long)+0x8>
}
    5ea0:	mov	r0, r4
    5ea2:	add	sp, #12
    5ea4:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    5ea6:	movs	r4, #0
    5ea8:	b.n	5ea0 <ExFatPartition::chainSize(unsigned long)+0x1c>

00005eaa <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5eaa:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5eac:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5eae:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5eb0:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5eb4:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    5eb6:	ands	r4, r3
    5eb8:	add	r4, r2
  pos->position += offset;
    5eba:	add	r2, r3
    5ebc:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5ebe:	ldrb.w	r3, [r0, #1093]	; 0x445
    5ec2:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    5ec4:	uxtb	r3, r3
    5ec6:	lsrs	r4, r3
  while (tmp--) {
    5ec8:	cbnz	r4, 5ece <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    5eca:	movs	r0, #1
    5ecc:	b.n	5ee8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    5ece:	ldrb	r3, [r5, #8]
      pos->cluster++;
    5ed0:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    5ed2:	cbz	r3, 5edc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    5ed4:	adds	r1, #1
    5ed6:	str	r1, [r5, #0]
    5ed8:	subs	r4, #1
    5eda:	b.n	5ec8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    5edc:	mov	r2, r5
    5ede:	mov	r0, r6
    5ee0:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    5ee4:	cmp	r0, #1
    5ee6:	beq.n	5ed8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    5ee8:	pop	{r4, r5, r6, pc}

00005eea <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5eea:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5eec:	push	{r3, r4, r5, lr}
    5eee:	mov	r4, r1
    5ef0:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5ef2:	bhi.n	5ef8 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5ef4:	movs	r0, #0
}
    5ef6:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5ef8:	ldr.w	r3, [r0, #1072]	; 0x430
    5efc:	adds	r3, #1
    5efe:	cmp	r3, r1
    5f00:	bcc.n	5ef4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5f02:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    5f06:	movs	r2, #1
    5f08:	add.w	r0, r0, #528	; 0x210
    5f0c:	add.w	r1, r1, r4, lsr #7
    5f10:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5f14:	cmp	r0, #0
    5f16:	beq.n	5ef4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    5f18:	lsls	r4, r4, #2
    5f1a:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5f1e:	str	r5, [r0, r4]
  return true;
    5f20:	movs	r0, #1
    5f22:	b.n	5ef6 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00005f24 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5f24:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5f28:	mov	r7, r0
    5f2a:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    5f2c:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    5f2e:	add	r2, sp, #4
    5f30:	mov	r1, r4
    5f32:	mov	r0, r7
    5f34:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    5f38:	subs	r6, r0, #0
    5f3a:	bge.n	5f46 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    5f3c:	movs	r5, #0
}
    5f3e:	mov	r0, r5
    5f40:	add	sp, #8
    5f42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    5f46:	movs	r2, #0
    5f48:	mov	r1, r4
    5f4a:	mov	r0, r7
    5f4c:	bl	5eea <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5f50:	mov	r5, r0
    5f52:	cmp	r0, #0
    5f54:	beq.n	5f3c <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    5f56:	adds	r2, r4, #1
    5f58:	cbz	r6, 5f60 <ExFatPartition::freeChain(unsigned long)+0x3c>
    5f5a:	ldr	r3, [sp, #4]
    5f5c:	cmp	r3, r2
    5f5e:	beq.n	5f76 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5f60:	movs	r3, #0
    5f62:	sub.w	r2, r2, r8
    5f66:	mov	r1, r8
    5f68:	mov	r0, r7
    5f6a:	bl	5d70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5f6e:	cmp	r0, #0
    5f70:	beq.n	5f3c <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    5f72:	ldr.w	r8, [sp, #4]
    cluster = next;
    5f76:	ldr	r4, [sp, #4]
  } while (status);
    5f78:	cmp	r6, #0
    5f7a:	bne.n	5f2e <ExFatPartition::freeChain(unsigned long)+0xa>
    5f7c:	b.n	5f3e <ExFatPartition::freeChain(unsigned long)+0x1a>

00005f7e <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    5f7e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    5f82:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    5f84:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    5f86:	ldr.w	r7, [r0, #1068]	; 0x42c
    5f8a:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    5f8e:	mov	r5, r4
    5f90:	mov	r1, r7
    5f92:	movs	r2, #0
    5f94:	mov	r0, r8
    5f96:	adds	r7, #1
    5f98:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5f9c:	cbz	r0, 5fba <ExFatPartition::freeClusterCount()+0x3c>
    5f9e:	subs	r0, #1
    5fa0:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    5fa4:	ldrb.w	r1, [r0, #1]!
    5fa8:	cmp	r1, #255	; 0xff
    5faa:	bne.n	5fbe <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    5fac:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    5fae:	adds	r5, #8
      if (nc >= m_clusterCount) {
    5fb0:	ldr.w	r3, [r6, #1072]	; 0x430
    5fb4:	cmp	r3, r5
    5fb6:	bhi.n	5fd8 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    5fb8:	subs	r0, r3, r4
      }
    }
  }
}
    5fba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    5fbe:	cmp	r1, #0
    5fc0:	beq.n	5fae <ExFatPartition::freeClusterCount()+0x30>
    5fc2:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5fc4:	movs	r3, #1
          if ((mask & cache[i])) {
    5fc6:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5fc8:	mov.w	r3, r3, lsl #1
            usedCount++;
    5fcc:	it	ne
    5fce:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    5fd0:	subs	r2, #1
    5fd2:	uxtb	r3, r3
    5fd4:	bne.n	5fc6 <ExFatPartition::freeClusterCount()+0x48>
    5fd6:	b.n	5fae <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    5fd8:	cmp	r5, ip
    5fda:	bne.n	5fa4 <ExFatPartition::freeClusterCount()+0x26>
    5fdc:	b.n	5f90 <ExFatPartition::freeClusterCount()+0x12>
	...

00005fe0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5fe0:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    5fe2:	mov.w	r3, #4294967295
    5fe6:	mov	r6, r2
    5fe8:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5fec:	movs	r2, #0
  m_blockDev = dev;
    5fee:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5ff2:	mov	r4, r0
    m_blockDev = blockDev;
    5ff4:	str	r1, [r0, #4]
    5ff6:	str.w	r1, [r0, #532]	; 0x214
    5ffa:	mov	r1, r2
  m_fatType = 0;
    5ffc:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6000:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6002:	str	r3, [r0, #12]
    m_status = 0;
    6004:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6008:	str.w	r3, [r0, #540]	; 0x21c
    600c:	mov	r0, r7
    600e:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6012:	cmp	r6, #4
    6014:	mov	r5, r0
    6016:	bls.n	601c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6018:	movs	r0, #0
}
    601a:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    601c:	cmp	r0, #0
    601e:	beq.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    6020:	cbz	r6, 6050 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    6022:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6024:	add.w	r3, r0, r3, lsl #4
    6028:	ldrb.w	r2, [r3, #446]	; 0x1be
    602c:	ands.w	r2, r2, #127	; 0x7f
    6030:	bne.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    6032:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6036:	cmp	r3, #0
    6038:	beq.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    603a:	add.w	r6, r0, r6, lsl #4
    603e:	mov	r0, r7
    6040:	ldr.w	r6, [r6, #438]	; 0x1b6
    6044:	mov	r1, r6
    6046:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    604a:	mov	r5, r0
    604c:	cmp	r0, #0
    604e:	beq.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6050:	ldr	r1, [pc, #104]	; (60bc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6052:	movs	r2, #5
    6054:	adds	r0, r5, #3
    6056:	bl	e71c <strncmp>
    605a:	mov	r1, r0
    605c:	cmp	r0, #0
    605e:	bne.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6060:	ldrb.w	r3, [r5, #108]	; 0x6c
    6064:	cmp	r3, #9
    6066:	bne.n	6018 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6068:	ldr	r3, [r5, #80]	; 0x50
    606a:	add	r3, r6
    606c:	str.w	r3, [r4, #1060]	; 0x424
    6070:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6072:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6076:	ldr	r3, [r5, #88]	; 0x58
    6078:	add	r3, r6
    607a:	str.w	r3, [r4, #1068]	; 0x42c
    607e:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6080:	str.w	r3, [r4, #1072]	; 0x430
    6084:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6086:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    608a:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    608e:	movs	r5, #1
  m_bitmapStart = 0;
    6090:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6094:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6096:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    609a:	adds	r3, #9
  bitmapFind(0, 1);
    609c:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    609e:	lsl.w	r3, r5, r3
    60a2:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    60a6:	subs	r3, #1
    60a8:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    60ac:	bl	5cc8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    60b0:	movs	r3, #64	; 0x40
  return true;
    60b2:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    60b4:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    60b8:	b.n	601a <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    60ba:	nop
    60bc:	.word	0x2000110d

000060c0 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    60c0:	push	{r4, lr}
    60c2:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    60c4:	ldr.w	r1, [r0, #1076]	; 0x434
    60c8:	bl	5e84 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    60cc:	ldrb.w	r3, [r4, #1093]	; 0x445
    60d0:	adds	r3, #9
  return nc << bytesPerClusterShift();
    60d2:	uxtb	r3, r3
}
    60d4:	lsls	r0, r3
    60d6:	pop	{r4, pc}

000060d8 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    60d8:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    60da:	add.w	r4, r0, #1096	; 0x448
    60de:	sub	sp, #56	; 0x38
    60e0:	movs	r3, #0
    60e2:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    60e4:	mov	r0, sp
    60e6:	mov	r1, r4
    60e8:	str	r3, [sp, #48]	; 0x30
    60ea:	bl	5bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
    60ee:	mov	r5, r0
    60f0:	cbz	r0, 611a <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    60f2:	ldrb.w	r3, [sp, #49]	; 0x31
    60f6:	ands.w	r3, r3, #80	; 0x50
    60fa:	beq.n	6120 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    60fc:	mov	r2, sp
    60fe:	mov	r3, r4
    6100:	add	r6, sp, #48	; 0x30
    6102:	mov	r4, r2
    6104:	adds	r3, #8
    6106:	ldmia	r4!, {r0, r1}
    6108:	cmp	r4, r6
    610a:	str.w	r0, [r3, #-8]
    610e:	str.w	r1, [r3, #-4]
    6112:	mov	r2, r4
    6114:	bne.n	6102 <ExFatVolume::chdir(char const*)+0x2a>
    6116:	ldr	r0, [r4, #0]
    6118:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    611a:	mov	r0, r5
    611c:	add	sp, #56	; 0x38
    611e:	pop	{r4, r5, r6, pc}
  return false;
    6120:	mov	r5, r3
    6122:	b.n	611a <ExFatVolume::chdir(char const*)+0x42>

00006124 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6124:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6126:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6128:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    612a:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    612c:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    612e:	orr.w	r2, r2, r1, lsr #1
    6132:	ldrb	r1, [r0, r3]
    6134:	uxtah	r2, r1, r2
    6138:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    613a:	bne.n	614e <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    613c:	cmp	r4, #133	; 0x85
    613e:	ite	ne
    6140:	movne	r2, #1
    6142:	moveq	r2, #3
    6144:	add	r3, r2
    6146:	cmp	r3, #31
    6148:	bls.n	612a <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    614a:	mov	r0, r1
    614c:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    614e:	movs	r2, #1
    6150:	b.n	6144 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006152 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6152:	push	{r4, lr}
    6154:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6156:	bl	51d0 <FsCache::sync()>
    615a:	cbz	r0, 6174 <ExFatPartition::cacheSync()+0x22>
    615c:	add.w	r0, r4, #528	; 0x210
    6160:	bl	51d0 <FsCache::sync()>
    6164:	cbz	r0, 6174 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6166:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    616a:	ldr	r3, [r0, #0]
  }
    616c:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6170:	ldr	r3, [r3, #32]
    6172:	bx	r3
  }
    6174:	movs	r0, #0
    6176:	pop	{r4, pc}

00006178 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6178:	push	{r3, r4, r5, r6, r7, lr}
    617a:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    617c:	ldr	r0, [r0, #32]
    617e:	ldr	r1, [r4, #24]
    6180:	cbz	r1, 6184 <ExFatFile::addCluster()+0xc>
    6182:	adds	r1, #1
    6184:	movs	r2, #1
    6186:	bl	5cc8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    618a:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    618c:	mov	r5, r0
  if (find < 2) {
    618e:	bhi.n	6196 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6190:	movs	r6, #0
}
    6192:	mov	r0, r6
    6194:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6196:	movs	r3, #1
    6198:	mov	r1, r0
    619a:	ldr	r0, [r4, #32]
    619c:	mov	r2, r3
    619e:	bl	5d70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    61a2:	mov	r6, r0
    61a4:	cmp	r0, #0
    61a6:	beq.n	6190 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    61a8:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    61aa:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    61ae:	cbnz	r2, 61bc <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    61b0:	orr.w	r3, r3, #64	; 0x40
    61b4:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    61b8:	str	r5, [r4, #24]
  return true;
    61ba:	b.n	6192 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    61bc:	lsls	r1, r3, #25
    61be:	bmi.n	61e4 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    61c0:	mov.w	r2, #4294967295
    61c4:	mov	r1, r5
    61c6:	ldr	r0, [r4, #32]
    61c8:	bl	5eea <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61cc:	cmp	r0, #0
    61ce:	beq.n	6190 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    61d0:	ldr	r1, [r4, #24]
    61d2:	cmp	r1, #0
    61d4:	beq.n	61b8 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    61d6:	mov	r2, r5
    61d8:	ldr	r0, [r4, #32]
    61da:	bl	5eea <ExFatPartition::fatPut(unsigned long, unsigned long)>
    61de:	cmp	r0, #0
    61e0:	bne.n	61b8 <ExFatFile::addCluster()+0x40>
    61e2:	b.n	6190 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    61e4:	adds	r2, #1
    61e6:	cmp	r2, r5
    61e8:	beq.n	61b8 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    61ea:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    61ee:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    61f0:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    61f4:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    61f6:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    61f8:	cmp	r3, r1
    61fa:	bls.n	61c0 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    61fc:	adds	r7, r1, #1
    61fe:	mov	r2, r7
    6200:	bl	5eea <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6204:	cmp	r0, #0
    6206:	beq.n	6190 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6208:	mov	r1, r7
    620a:	b.n	61f4 <ExFatFile::addCluster()+0x7c>

0000620c <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    620c:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    620e:	ldrb.w	r3, [r0, #51]	; 0x33
    6212:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6214:	lsls	r2, r3, #30
    6216:	bmi.n	621c <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6218:	movs	r0, #0
}
    621a:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    621c:	ldr	r1, [r0, #28]
    621e:	cbnz	r1, 6256 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6220:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6222:	movs	r2, #1
    6224:	uxtb	r1, r5
    6226:	mov	r0, r4
    6228:	bl	54b6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    622c:	cmp	r0, #0
    622e:	beq.n	6218 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6230:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6232:	adds	r5, #1
    cache[0] &= 0x7F;
    6234:	and.w	r3, r3, #127	; 0x7f
    6238:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    623a:	uxtb	r3, r5
    623c:	ldrb.w	r2, [r4, #48]	; 0x30
    6240:	cmp	r2, r3
    6242:	bcs.n	6222 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6244:	movs	r3, #0
  return m_vol->cacheSync();
    6246:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6248:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    624c:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6250:	bl	6152 <ExFatPartition::cacheSync()>
    6254:	b.n	621a <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    6256:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6258:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    625a:	bpl.n	6292 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    625c:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6260:	ldrd	r2, r5, [r4, #8]
    6264:	adds	r3, #9
    6266:	subs	r2, #1
    6268:	uxtb	r3, r3
    626a:	adc.w	r5, r5, #4294967295
    626e:	rsb	r7, r3, #32
    6272:	sub.w	r6, r3, #32
    6276:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6278:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    627a:	lsl.w	r7, r5, r7
    627e:	lsr.w	r6, r5, r6
    6282:	orrs	r2, r7
    6284:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6286:	adds	r2, #1
    6288:	bl	5d70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    628c:	cmp	r0, #0
    628e:	bne.n	6220 <ExFatFile::remove()+0x14>
    6290:	b.n	6218 <ExFatFile::remove()+0xc>
    6292:	bl	5f24 <ExFatPartition::freeChain(unsigned long)>
    6296:	b.n	628c <ExFatFile::remove()+0x80>

00006298 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6298:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    629a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    629e:	sub	sp, #32
    62a0:	mov	r4, r0
  if (!isSubDir()) {
    62a2:	lsls	r3, r3, #27
    62a4:	bmi.n	62ac <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    62a6:	movs	r0, #0
}
    62a8:	add	sp, #32
    62aa:	pop	{r4, pc}
    seekSet(0);
    62ac:	movs	r2, #0
    62ae:	movs	r3, #0
    62b0:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    62b4:	movs	r2, #32
    62b6:	mov	r1, sp
    62b8:	mov	r0, r4
    62ba:	bl	55e8 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    62be:	cbz	r0, 62d4 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    62c0:	cmp	r0, #32
    62c2:	bne.n	62a6 <ExFatFile::rmdir()+0xe>
    62c4:	ldrsb.w	r2, [sp]
    62c8:	ldrb.w	r3, [sp]
    62cc:	cmp	r2, #0
    62ce:	blt.n	62a6 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    62d0:	cmp	r3, #0
    62d2:	bne.n	62b4 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    62d4:	movs	r3, #8
  return remove();
    62d6:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    62d8:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    62dc:	ldrb.w	r3, [r4, #51]	; 0x33
    62e0:	orr.w	r3, r3, #2
    62e4:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    62e8:	bl	620c <ExFatFile::remove()>
    62ec:	b.n	62a8 <ExFatFile::rmdir()+0x10>
	...

000062f0 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    62f0:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    62f4:	movs	r7, #0
    62f6:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    62f8:	ldr.w	r8, [pc, #204]	; 63c8 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    62fc:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    62fe:	movs	r2, #0
    6300:	uxtb	r1, r7
    6302:	mov	r0, r4
    6304:	bl	54b6 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6308:	mov	r5, r0
    630a:	cmp	r0, #0
    630c:	beq.n	638a <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    630e:	ldrb	r3, [r0, #0]
    6310:	cmp	r3, #192	; 0xc0
    6312:	beq.n	639e <ExFatFile::syncDir()+0xae>
    6314:	cmp	r3, #193	; 0xc1
    6316:	beq.n	635c <ExFatFile::syncDir()+0x6c>
    6318:	cmp	r3, #133	; 0x85
    631a:	bne.n	638a <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    631c:	ldrb.w	r3, [r4, #49]	; 0x31
    6320:	and.w	r3, r3, #55	; 0x37
    6324:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6326:	ldr.w	r3, [r8]
    632a:	cbz	r3, 634e <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    632c:	add.w	r2, sp, #3
    6330:	add.w	r1, sp, #6
    6334:	add	r0, sp, #4
    6336:	blx	r3
          df->modifyTimeMs = ms10;
    6338:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    633c:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6340:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6342:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6346:	strh	r2, [r5, #12]
    6348:	strh	r3, [r5, #14]
    634a:	strh	r2, [r5, #16]
    634c:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    634e:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6350:	ldrb.w	r3, [r2, #528]	; 0x210
    6354:	orr.w	r3, r3, #1
    6358:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    635c:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    635e:	mov	r1, r6
    6360:	mov	r0, r5
    6362:	bl	6124 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6366:	ldrb.w	r2, [r4, #48]	; 0x30
    636a:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    636c:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    636e:	cmp	r2, r3
    6370:	bcs.n	62fe <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6372:	movs	r2, #1
    6374:	add.w	r1, r4, #36	; 0x24
    6378:	ldr	r0, [r4, #32]
    637a:	bl	5e10 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    637e:	cbz	r0, 638a <ExFatFile::syncDir()+0x9a>
    6380:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6382:	ldr	r0, [r4, #32]
    6384:	bl	6152 <ExFatPartition::cacheSync()>
    6388:	cbnz	r0, 6398 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    638a:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    638e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6390:	orr.w	r3, r3, #1
    6394:	strb.w	r3, [r4, #50]	; 0x32
}
    6398:	add	sp, #8
    639a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    639e:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    63a2:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    63a4:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    63a6:	ite	mi
    63a8:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    63ac:	andpl.w	r3, r3, #253	; 0xfd
    63b0:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    63b2:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    63b6:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    63ba:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    63bc:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    63be:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    63c2:	strd	r2, r3, [r0, #24]
    63c6:	b.n	634e <ExFatFile::syncDir()+0x5e>
    63c8:	.word	0x200207fc

000063cc <ExFatFile::sync()>:
bool ExFatFile::sync() {
    63cc:	push	{r4, lr}
  if (!isOpen()) {
    63ce:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    63d2:	mov	r4, r0
  if (!isOpen()) {
    63d4:	cbnz	r3, 63da <ExFatFile::sync()+0xe>
    return true;
    63d6:	movs	r0, #1
}
    63d8:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    63da:	ldrsb.w	r2, [r0, #51]	; 0x33
    63de:	ldrb.w	r3, [r0, #51]	; 0x33
    63e2:	cmp	r2, #0
    63e4:	bge.n	63f6 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    63e6:	and.w	r3, r3, #127	; 0x7f
    63ea:	strb.w	r3, [r0, #51]	; 0x33
}
    63ee:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    63f2:	b.w	62f0 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    63f6:	ldr	r0, [r0, #32]
    63f8:	bl	6152 <ExFatPartition::cacheSync()>
    63fc:	cmp	r0, #0
    63fe:	bne.n	63d6 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6400:	ldrb.w	r3, [r4, #50]	; 0x32
    6404:	orr.w	r3, r3, #1
    6408:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    640c:	b.n	63d8 <ExFatFile::sync()+0xc>

0000640e <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    640e:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6410:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6414:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6416:	lsls	r2, r3, #25
    6418:	bpl.n	649a <ExFatFile::addDirCluster()+0x8c>
    641a:	ldr	r0, [r0, #32]
    641c:	bl	60c0 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6420:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6422:	ldr.w	r3, [r3, #1084]	; 0x43c
    6426:	add	r0, r3
  if (dl >= 0X4000000) {
    6428:	cmp.w	r0, #67108864	; 0x4000000
    642c:	bcs.n	64ba <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    642e:	mov	r0, r4
    6430:	bl	6178 <ExFatFile::addCluster()>
    6434:	cmp	r0, #0
    6436:	beq.n	64ba <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6438:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    643a:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    643c:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    643e:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6440:	ldrb.w	r2, [r3, #1093]	; 0x445
    6444:	subs	r5, #2
    6446:	ldr.w	r3, [r3, #1068]	; 0x42c
    644a:	lsls	r5, r2
    644c:	add	r5, r3
    644e:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6450:	ldrb.w	r3, [r0, #1093]	; 0x445
    6454:	lsl.w	r3, r7, r3
    6458:	cmp	r6, r3
    645a:	bcc.n	649e <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    645c:	ldrb.w	r3, [r4, #49]	; 0x31
    6460:	lsls	r3, r3, #25
    6462:	bmi.n	6490 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6464:	ldrb.w	r3, [r4, #51]	; 0x33
    6468:	orn	r3, r3, #127	; 0x7f
    646c:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6470:	ldr.w	r2, [r0, #1084]	; 0x43c
    6474:	ldrd	r3, r1, [r4, #8]
    6478:	adds	r3, r3, r2
    647a:	adc.w	r1, r1, #0
    647e:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6482:	ldrd	r3, r1, [r4, #16]
    6486:	adds	r3, r3, r2
    6488:	adc.w	r1, r1, #0
    648c:	strd	r3, r1, [r4, #16]
  return sync();
    6490:	mov	r0, r4
}
    6492:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    6496:	b.w	63cc <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    649a:	ldr	r0, [r0, #8]
    649c:	b.n	6420 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    649e:	movs	r2, #5
    64a0:	adds	r1, r5, r6
    64a2:	add.w	r0, r0, #528	; 0x210
    64a6:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    64aa:	cbz	r0, 64ba <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    64ac:	mov.w	r2, #512	; 0x200
    64b0:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    64b2:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    64b4:	bl	9d8c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    64b8:	b.n	644e <ExFatFile::addDirCluster()+0x40>
}
    64ba:	movs	r0, #0
    64bc:	pop	{r3, r4, r5, r6, r7, pc}

000064be <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    64be:	push	{r4, lr}
  if (!parent->isDir()) {
    64c0:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    64c4:	mov	r4, r0
  if (!parent->isDir()) {
    64c6:	tst.w	r3, #80	; 0x50
    64ca:	beq.n	6502 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    64cc:	movw	r3, #2562	; 0xa02
    64d0:	bl	5878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    64d4:	cbz	r0, 6502 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    64d6:	movs	r3, #16
  if (!addDirCluster()) {
    64d8:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    64da:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    64de:	bl	640e <ExFatFile::addDirCluster()>
    64e2:	cbz	r0, 6502 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    64e4:	ldr	r3, [r4, #24]
    64e6:	mov	r0, r4
    64e8:	movs	r2, #0
    64ea:	str	r3, [r4, #28]
    64ec:	movs	r3, #0
    64ee:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    64f2:	movs	r3, #193	; 0xc1
  return sync();
    64f4:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    64f6:	strb.w	r3, [r4, #51]	; 0x33
}
    64fa:	ldmia.w	sp!, {r4, lr}
  return sync();
    64fe:	b.w	63cc <ExFatFile::sync()>
}
    6502:	movs	r0, #0
    6504:	pop	{r4, pc}

00006506 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6506:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    650a:	mov	r8, r3
    650c:	sub	sp, #88	; 0x58
    650e:	movs	r3, #0
    6510:	mov	r5, r0
    6512:	mov	r4, r1
    6514:	str	r2, [sp, #4]
    6516:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    651a:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    651c:	ldrb.w	r3, [r0, #49]	; 0x31
    6520:	cbz	r3, 652a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6522:	movs	r0, #0
}
    6524:	add	sp, #88	; 0x58
    6526:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    652a:	ldrb.w	r3, [r1, #49]	; 0x31
    652e:	tst.w	r3, #80	; 0x50
    6532:	beq.n	6522 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6534:	ldrb	r3, [r2, #0]
    6536:	cmp	r3, #47	; 0x2f
    6538:	bne.n	6550 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    653a:	ldr	r2, [sp, #4]
    653c:	ldrb	r3, [r2, #0]
    653e:	cmp	r3, #47	; 0x2f
    6540:	beq.n	659c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6542:	ldr	r1, [r4, #32]
    6544:	add	r0, sp, #32
    6546:	bl	5542 <ExFatFile::openRoot(ExFatVolume*)>
    654a:	cmp	r0, #0
    654c:	beq.n	6522 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    654e:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6550:	add	r3, sp, #4
    6552:	add	r2, sp, #8
    6554:	ldr	r1, [sp, #4]
    6556:	mov	r0, r5
    6558:	bl	5568 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    655c:	cmp	r0, #0
    655e:	beq.n	6522 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6560:	ldr	r3, [sp, #4]
    6562:	ldrb	r3, [r3, #0]
    6564:	cbz	r3, 65b8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6566:	movs	r3, #0
    6568:	add	r2, sp, #8
    656a:	mov	r1, r4
    656c:	mov	r0, r5
    656e:	bl	5878 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6572:	cbz	r0, 65a2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    6574:	add	r6, sp, #32
    6576:	mov	r2, r5
    6578:	add.w	r3, r5, #48	; 0x30
    657c:	mov	r4, r6
    657e:	ldr	r0, [r2, #0]
    6580:	adds	r2, #8
    6582:	ldr.w	r1, [r2, #-4]
    6586:	mov	r7, r6
    6588:	cmp	r2, r3
    658a:	stmia	r7!, {r0, r1}
    658c:	mov	r6, r7
    658e:	bne.n	657e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6590:	ldr	r0, [r2, #0]
    6592:	str	r0, [r7, #0]
    close();
    6594:	mov	r0, r5
    6596:	bl	54ee <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    659a:	b.n	6550 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    659c:	adds	r2, #1
    659e:	str	r2, [sp, #4]
    65a0:	b.n	653a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    65a2:	cmp.w	r8, #0
    65a6:	beq.n	6522 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    65a8:	add	r2, sp, #8
    65aa:	mov	r1, r4
    65ac:	mov	r0, r5
    65ae:	bl	64be <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    65b2:	cmp	r0, #0
    65b4:	bne.n	6574 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    65b6:	b.n	6522 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    65b8:	add	r2, sp, #8
    65ba:	mov	r1, r4
    65bc:	mov	r0, r5
    65be:	bl	64be <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    65c2:	b.n	6524 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

000065c4 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    65c4:	push	{r4, r5, r6, r7, lr}
    65c6:	mov	r4, r0
    65c8:	sub	sp, #116	; 0x74
    65ca:	movs	r0, #0
    65cc:	str	r0, [sp, #48]	; 0x30
    65ce:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    65d0:	ldrb.w	r0, [r4, #49]	; 0x31
    65d4:	tst.w	r0, #24
    65d8:	bne.n	65e0 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    65da:	movs	r0, #0
}
    65dc:	add	sp, #116	; 0x74
    65de:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    65e0:	ldr	r0, [r4, #32]
    65e2:	ldr	r3, [r1, #32]
    65e4:	cmp	r0, r3
    65e6:	bne.n	65da <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    65e8:	movw	r3, #2561	; 0xa01
    65ec:	mov	r0, sp
    65ee:	bl	5bc8 <ExFatFile::open(ExFatFile*, char const*, int)>
    65f2:	cmp	r0, #0
    65f4:	beq.n	65da <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    65f6:	add	r2, sp, #56	; 0x38
    65f8:	mov	r3, r4
    65fa:	add.w	r7, r4, #48	; 0x30
    65fe:	mov	r6, r2
    6600:	ldr	r0, [r3, #0]
    6602:	adds	r3, #8
    6604:	ldr.w	r1, [r3, #-4]
    6608:	mov	r5, r2
    660a:	cmp	r3, r7
    660c:	stmia	r5!, {r0, r1}
    660e:	mov	r2, r5
    6610:	bne.n	6600 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6612:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6614:	add	r2, sp, #36	; 0x24
    6616:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    661a:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    661c:	ldmia	r2, {r0, r1, r2}
    661e:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6622:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6626:	mov	r0, r4
  m_setCount = file.m_setCount;
    6628:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    662c:	ldrb.w	r3, [r4, #51]	; 0x33
    6630:	orn	r3, r3, #127	; 0x7f
    6634:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6638:	bl	63cc <ExFatFile::sync()>
    663c:	cmp	r0, #0
    663e:	beq.n	65da <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6640:	movs	r3, #0
  return oldFile.remove();
    6642:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6644:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6646:	movs	r3, #2
    6648:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    664c:	movs	r3, #8
    664e:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6652:	bl	620c <ExFatFile::remove()>
    6656:	b.n	65dc <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006658 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6658:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    665a:	ldrb.w	r2, [r0, #51]	; 0x33
    665e:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6660:	lsls	r3, r2, #30
    6662:	bmi.n	666a <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6664:	movs	r0, #0
}
    6666:	add	sp, #12
    6668:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    666a:	ldr	r3, [r0, #28]
    666c:	cmp	r3, #0
    666e:	beq.n	671e <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6670:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    6674:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    6676:	beq.n	66e8 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6678:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    667a:	ldrb.w	r5, [r0, #1093]	; 0x445
    667e:	ldrd	r2, r6, [r4, #8]
    6682:	adds	r5, #9
    6684:	subs	r2, #1
    6686:	uxtb	r5, r5
    6688:	adc.w	r6, r6, #4294967295
    668c:	rsb	ip, r5, #32
    6690:	sub.w	r7, r5, #32
    6694:	lsrs	r2, r5
    6696:	lsl.w	ip, r6, ip
    669a:	lsr.w	r7, r6, r7
    669e:	orr.w	r2, r2, ip
    66a2:	orrs	r2, r7
    66a4:	adds	r2, #1
    if (m_curCluster) {
    66a6:	cbz	r1, 66d4 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    66a8:	subs	r3, #1
      toFree = m_curCluster + 1;
    66aa:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    66ac:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    66ae:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    66b0:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    66b2:	cbnz	r2, 66da <ExFatFile::truncate()+0x82>
  return sync();
    66b4:	mov	r0, r4
  m_dataLength = m_curPosition;
    66b6:	ldrd	r2, r3, [r4]
    66ba:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    66be:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    66c2:	ldrb.w	r3, [r4, #51]	; 0x33
    66c6:	orn	r3, r3, #127	; 0x7f
    66ca:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    66ce:	bl	63cc <ExFatFile::sync()>
    66d2:	b.n	6666 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    66d4:	str	r3, [sp, #4]
      m_firstCluster = 0;
    66d6:	str	r1, [r4, #28]
    66d8:	b.n	66b2 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    66da:	movs	r3, #0
    66dc:	ldr	r1, [sp, #4]
    66de:	bl	5d70 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    66e2:	cmp	r0, #0
    66e4:	bne.n	66b4 <ExFatFile::truncate()+0x5c>
    66e6:	b.n	6664 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    66e8:	cbz	r1, 6718 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    66ea:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    66ec:	add	r2, sp, #4
    66ee:	ldr	r0, [r0, #32]
    66f0:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    66f4:	cmp	r0, #0
    66f6:	blt.n	6664 <ExFatFile::truncate()+0xc>
      if (fg) {
    66f8:	beq.n	670a <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    66fa:	mov.w	r2, #4294967295
    66fe:	ldr	r1, [r4, #24]
    6700:	ldr	r0, [r4, #32]
    6702:	bl	5eea <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6706:	cmp	r0, #0
    6708:	beq.n	6664 <ExFatFile::truncate()+0xc>
    if (toFree) {
    670a:	ldr	r1, [sp, #4]
    670c:	cmp	r1, #0
    670e:	beq.n	66b4 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6710:	ldr	r0, [r4, #32]
    6712:	bl	5f24 <ExFatPartition::freeChain(unsigned long)>
    6716:	b.n	66e2 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6718:	str	r3, [sp, #4]
      m_firstCluster = 0;
    671a:	str	r1, [r0, #28]
    671c:	b.n	670a <ExFatFile::truncate()+0xb2>
      return true;
    671e:	movs	r0, #1
    6720:	b.n	6666 <ExFatFile::truncate()+0xe>
	...

00006724 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6724:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6728:	ldrb.w	r3, [r0, #51]	; 0x33
    672c:	mov	r8, r1
    672e:	mov	r4, r0
    6730:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6732:	lsls	r1, r3, #30
    6734:	bpl.n	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6736:	lsls	r2, r3, #28
    6738:	bmi.n	6768 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    673a:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    673c:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6740:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6744:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6748:	cbnz	r7, 6786 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    674a:	ldrd	r1, r2, [r4, #8]
    674e:	cmp	r1, r5
    6750:	sbcs	r2, r3
    6752:	bcs.w	6918 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    6756:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    675a:	ldrb.w	r3, [r4, #51]	; 0x33
    675e:	orn	r3, r3, #127	; 0x7f
    6762:	strb.w	r3, [r4, #51]	; 0x33
    6766:	b.n	6922 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6768:	ldrd	r2, r3, [r0, #16]
    676c:	bl	5798 <ExFatFile::seekSet(unsigned long long)>
    6770:	cmp	r0, #0
    6772:	bne.n	673a <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6774:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    6778:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    677c:	orr.w	r3, r3, #1
    6780:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6784:	b.n	6922 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6786:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6788:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    678a:	ldr.w	r3, [r0, #1080]	; 0x438
    678e:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6790:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6794:	cbnz	r5, 67e0 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    6796:	cmp	r1, #0
    6798:	beq.n	6846 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    679a:	ldrb.w	r3, [r4, #51]	; 0x33
    679e:	lsls	r3, r3, #25
    67a0:	bpl.n	6838 <ExFatFile::write(void const*, unsigned int)+0x114>
    67a2:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    67a6:	ldrd	r3, r2, [r4, #8]
    67aa:	adds	r0, #9
    67ac:	subs	r3, #1
    67ae:	uxtb	r0, r0
    67b0:	adc.w	r2, r2, #4294967295
    67b4:	rsb	lr, r0, #32
    67b8:	sub.w	ip, r0, #32
    67bc:	lsrs	r3, r0
    67be:	lsl.w	lr, r2, lr
    67c2:	lsr.w	ip, r2, ip
    67c6:	ldr	r2, [r4, #28]
    67c8:	orr.w	r3, r3, lr
    67cc:	orr.w	r3, r3, ip
    67d0:	add	r3, r2
          if (m_curCluster < lc) {
    67d2:	cmp	r3, r1
    67d4:	bhi.n	6832 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    67d6:	mov	r0, r4
    67d8:	bl	6178 <ExFatFile::addCluster()>
    67dc:	cmp	r0, #0
    67de:	beq.n	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    67e0:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    67e4:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    67e6:	ldr	r1, [r4, #24]
    67e8:	ldrb.w	r2, [ip, #1093]	; 0x445
    67ec:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    67ee:	ldr.w	r0, [ip, #1068]	; 0x42c
    67f2:	lsls	r1, r2
    67f4:	add.w	r1, r1, r5, lsr #9
    67f8:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    67fa:	cbnz	r6, 685e <ExFatFile::write(void const*, unsigned int)+0x13a>
    67fc:	cmp.w	r7, #512	; 0x200
    6800:	bcc.n	685e <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6802:	cmp.w	r7, #1024	; 0x400
    6806:	ldr.w	lr, [ip, #540]	; 0x21c
    680a:	ldr.w	r0, [ip, #532]	; 0x214
    680e:	bcs.n	68e6 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    6810:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    6812:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    6814:	ittt	eq
    6816:	moveq.w	r3, #4294967295
    m_status = 0;
    681a:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    681e:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    6822:	ldr	r3, [r0, #0]
    6824:	ldr	r3, [r3, #36]	; 0x24
    6826:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6828:	cmp	r0, #0
    682a:	beq.n	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    682c:	mov.w	r5, #512	; 0x200
    6830:	b.n	68b2 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    6832:	adds	r1, #1
    6834:	str	r1, [r4, #24]
        if (fg == 0) {
    6836:	b.n	67e0 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6838:	mov	r2, sl
    683a:	bl	5e44 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    683e:	cmp	r0, #0
    6840:	blt.n	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    6842:	beq.n	67d6 <ExFatFile::write(void const*, unsigned int)+0xb2>
    6844:	b.n	67e0 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    6846:	ldr	r3, [r4, #28]
    6848:	cbnz	r3, 685a <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    684a:	mov	r0, r4
    684c:	bl	6178 <ExFatFile::addCluster()>
    6850:	cmp	r0, #0
    6852:	beq.n	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6854:	ldr	r3, [r4, #24]
    6856:	str	r3, [r4, #28]
    6858:	b.n	67e0 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    685a:	str	r3, [r4, #24]
    685c:	b.n	67e0 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    685e:	rsb	r5, r6, #512	; 0x200
    6862:	cmp	r5, r7
    6864:	it	cs
    6866:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6868:	cmp	r6, #0
    686a:	bne.n	68e2 <ExFatFile::write(void const*, unsigned int)+0x1be>
    686c:	ldr	r3, [r4, #20]
    686e:	ldr	r0, [r4, #0]
    6870:	str	r3, [sp, #4]
    6872:	ldr	r3, [r4, #16]
    6874:	ldr	r2, [r4, #4]
    6876:	cmp	r0, r3
    6878:	ldr	r3, [sp, #4]
    687a:	sbcs.w	r3, r2, r3
    687e:	bcc.n	68e2 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6880:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6882:	add.w	r0, ip, #528	; 0x210
    6886:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    688a:	cmp	r0, #0
    688c:	beq.w	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6890:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6892:	add	r6, r5
      memcpy(dst, src, n);
    6894:	mov	r2, r5
    6896:	mov	r1, r8
    6898:	bl	9dd0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    689c:	cmp.w	r6, #512	; 0x200
    68a0:	ldr	r0, [r4, #32]
    68a2:	bne.n	68b2 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    68a4:	add.w	r0, r0, #528	; 0x210
    68a8:	bl	51d0 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    68ac:	cmp	r0, #0
    68ae:	beq.w	6774 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    68b2:	add	r8, r5
    toWrite -= n;
    68b4:	subs	r7, r7, r5
    m_curPosition += n;
    68b6:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    68ba:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    68be:	adds	r3, r5, r3
    68c0:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    68c4:	cmp	r0, r3
    68c6:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    68c8:	itt	cc
    68ca:	ldrbcc.w	r1, [r4, #51]	; 0x33
    68ce:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    68d2:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    68d6:	itt	cc
    68d8:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    68dc:	strdcc	r3, r2, [r4, #16]
    68e0:	b.n	6744 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    68e2:	movs	r2, #1
    68e4:	b.n	6882 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    68e6:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    68ea:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    68ec:	lsrs	r2, r7, #9
    68ee:	cmp	r3, r2
    68f0:	it	cs
    68f2:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    68f4:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    68f6:	mov.w	r5, r3, lsl #9
    68fa:	bhi.n	690e <ExFatFile::write(void const*, unsigned int)+0x1ea>
    68fc:	adds	r2, r1, r3
    68fe:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6900:	ittt	hi
    6902:	movhi.w	r2, #4294967295
    m_status = 0;
    6906:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    690a:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    690e:	ldr	r2, [r0, #0]
    6910:	ldr	r6, [r2, #40]	; 0x28
    6912:	mov	r2, r8
    6914:	blx	r6
    6916:	b.n	68ac <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6918:	ldr	r3, [pc, #16]	; (692c <ExFatFile::write(void const*, unsigned int)+0x208>)
    691a:	ldr	r3, [r3, #0]
    691c:	cmp	r3, #0
    691e:	bne.w	675a <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6922:	mov	r0, r9
    6924:	add	sp, #12
    6926:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    692a:	nop
    692c:	.word	0x200207fc

00006930 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6930:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6932:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6934:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6936:	bl	6e22 <FatFile::seekSet(unsigned long)>
    693a:	cbz	r0, 6948 <FatFile::cacheDir(unsigned short)+0x18>
    693c:	mov	r0, r4
    693e:	movs	r1, #0
  }
    6940:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6944:	b.w	6de4 <FatFile::readDirCache(bool)>
  }
    6948:	pop	{r4, pc}

0000694a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    694a:	cmp	r2, #4
    694c:	bhi.n	6958 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    694e:	add.w	r2, r1, r2, lsl #1
    6952:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6956:	bx	lr
  } else if (i < 11) {
    6958:	cmp	r2, #10
    695a:	bhi.n	6964 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    695c:	add.w	r2, r1, r2, lsl #1
    6960:	ldrh	r0, [r2, #4]
    6962:	bx	lr
  } else if (i < 13) {
    6964:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6966:	itte	ls
    6968:	addls.w	r2, r1, r2, lsl #1
    696c:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    696e:	movhi	r0, #0
}
    6970:	bx	lr

00006972 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6972:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6974:	ldrb	r4, [r0, #0]
    6976:	mov	r5, r1
    6978:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    697a:	cbz	r4, 69ec <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    697c:	ands.w	r4, r4, #96	; 0x60
    6980:	beq.n	6992 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6982:	cmp	r2, #1
    6984:	bls.n	69ec <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6986:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    6988:	movs	r0, #1
    name[0] = '/';
    698a:	strb	r3, [r1, #0]
    name[1] = '\0';
    698c:	movs	r3, #0
    698e:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6990:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6992:	mov	r1, r4
    6994:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6998:	cbz	r0, 69ec <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    699a:	mov	r6, r0
    699c:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    699e:	movs	r2, #8
    if (i == 8) {
    69a0:	cmp	r1, #8
      if (*ptr == ' ') {
    69a2:	ldrb	r3, [r6, #0]
    if (i == 8) {
    69a4:	bne.n	69be <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    69a6:	cmp	r3, #32
    69a8:	beq.n	69e4 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    69aa:	movs	r2, #16
      c = '.';
    69ac:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    69ae:	mov	ip, r4
    69b0:	adds	r4, #1
    69b2:	cmp	r4, r7
    69b4:	bcs.n	69ec <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    69b6:	uxtb	r4, r4
    69b8:	strb.w	r3, [r5, ip]
    69bc:	b.n	69de <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    69be:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    69c2:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    69c4:	cmp.w	ip, #25
    69c8:	bhi.n	69da <FatFile::getSFN(char*, unsigned int)+0x68>
    69ca:	ldrb.w	ip, [r0, #12]
    69ce:	tst.w	r2, ip
    69d2:	beq.n	69ae <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    69d4:	adds	r3, #32
    69d6:	uxtb	r3, r3
    69d8:	b.n	69ae <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    69da:	cmp	r3, #32
    69dc:	bne.n	69ae <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    69de:	adds	r1, #1
    69e0:	cmp	r1, #12
    69e2:	bne.n	69a0 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    69e4:	movs	r3, #0
    69e6:	mov	r0, r4
    69e8:	strb	r3, [r5, r4]
  return j;
    69ea:	b.n	6990 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    69ec:	movs	r0, #0
    69ee:	strb	r0, [r5, #0]
  return 0;
    69f0:	b.n	6990 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

000069f4 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    69f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    69f8:	movs	r5, #0
    69fa:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    69fc:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    69fe:	mov	r6, r0
    6a00:	mov	r8, r1
    6a02:	mov	r7, r2
    6a04:	str	r5, [sp, #4]
  if (!isOpen()) {
    6a06:	cbz	r3, 6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6a08:	ldrb	r3, [r0, #3]
    6a0a:	cbnz	r3, 6a16 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6a0c:	bl	6972 <FatFile::getSFN(char*, unsigned int)>
}
    6a10:	add	sp, #44	; 0x2c
    6a12:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6a16:	mov	r1, r0
    6a18:	add	r0, sp, #4
    6a1a:	bl	6c0a <FatFile::openCluster(FatFile*)>
    6a1e:	cmp	r0, #0
    6a20:	bne.n	6ace <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6a22:	movs	r0, #0
    6a24:	strb.w	r0, [r8]
  return 0;
    6a28:	b.n	6a10 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6a2a:	ldrh	r1, [r6, #4]
    6a2c:	add	r0, sp, #4
    6a2e:	sub.w	r1, r1, r9
    6a32:	uxth	r1, r1
    6a34:	bl	6930 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6a38:	mov	sl, r0
    6a3a:	cmp	r0, #0
    6a3c:	beq.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6a3e:	ldrb	r3, [r0, #11]
    6a40:	cmp	r3, #15
    6a42:	bne.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    6a44:	ldrb	r3, [r0, #0]
    6a46:	and.w	r3, r3, #31
    6a4a:	cmp	fp, r3
    6a4c:	bne.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    6a4e:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6a52:	uxtb.w	r2, fp
    6a56:	mov	r1, sl
    6a58:	mov	r0, r6
    6a5a:	bl	694a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6a5e:	cbz	r5, 6aaa <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6a60:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6a64:	uxth	r2, r2
    6a66:	cmp.w	r2, #1024	; 0x400
    6a6a:	bcs.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6a6c:	ldr	r3, [pc, #108]	; (6adc <FatFile::getName8(char*, unsigned int)+0xe8>)
    6a6e:	ubfx	r0, r0, #0, #10
    6a72:	and.w	r5, r3, r5, lsl #10
    6a76:	orrs	r0, r5
    6a78:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6a7c:	mov	r1, r4
    6a7e:	mov	r2, r7
    6a80:	bl	50b4 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6a84:	mov	r4, r0
    6a86:	cmp	r0, #0
    6a88:	beq.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    6a8a:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6a8c:	add.w	fp, fp, #1
    6a90:	cmp.w	fp, #13
    6a94:	bne.n	6a52 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6a96:	add.w	r9, r9, #1
    6a9a:	uxth.w	r9, r9
    6a9e:	uxtb.w	fp, r9
    6aa2:	ldrb	r3, [r6, #3]
    6aa4:	cmp	r3, fp
    6aa6:	bcs.n	6a2a <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    6aa8:	b.n	6aba <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    6aaa:	add.w	r2, r0, #10240	; 0x2800
    6aae:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6ab0:	cmp.w	r2, #2048	; 0x800
    6ab4:	bcc.n	6ac4 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    6ab6:	cmp	r0, #0
    6ab8:	bne.n	6a7c <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    6aba:	movs	r3, #0
  return str - name;
    6abc:	sub.w	r0, r4, r8
  *str = '\0';
    6ac0:	strb	r3, [r4, #0]
  return str - name;
    6ac2:	b.n	6a10 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    6ac4:	cmp.w	r2, #1024	; 0x400
    6ac8:	bcs.n	6a22 <FatFile::getName8(char*, unsigned int)+0x2e>
    6aca:	mov	r5, r0
    6acc:	b.n	6a8c <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6ace:	subs	r7, #1
  char* str = name;
    6ad0:	mov	r4, r8
    6ad2:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6ad6:	add	r7, r8
    6ad8:	b.n	6a9e <FatFile::getName8(char*, unsigned int)+0xaa>
    6ada:	nop
    6adc:	.word	0x000ffc00

00006ae0 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6ae0:	b.w	69f4 <FatFile::getName8(char*, unsigned int)>

00006ae4 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6ae4:	push	{r3, r4, r5, lr}
    6ae6:	mov	r5, r1
    6ae8:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6aea:	movs	r2, #36	; 0x24
    6aec:	movs	r1, #0
    6aee:	bl	9d8c <memset>

  m_vol = vol;
    6af2:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6af4:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6af6:	cmp	r3, #16
    6af8:	beq.n	6b02 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6afa:	cmp	r3, #32
    6afc:	beq.n	6b0c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6afe:	cmp	r3, #12
    6b00:	bne.n	6b10 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6b02:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6b04:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6b06:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6b08:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6b0a:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6b0c:	movs	r3, #64	; 0x40
    6b0e:	b.n	6b04 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6b10:	movs	r0, #0
    6b12:	b.n	6b0a <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006b14 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6b14:	push	{r4, lr}
    6b16:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6b18:	adds	r0, #40	; 0x28
    6b1a:	bl	51d0 <FsCache::sync()>
    6b1e:	cbz	r0, 6b36 <FatPartition::cacheSync()+0x22>
    6b20:	add.w	r0, r4, #568	; 0x238
    6b24:	bl	51d0 <FsCache::sync()>
    6b28:	cbz	r0, 6b36 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6b2a:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6b2c:	ldr	r3, [r0, #0]
  }
    6b2e:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6b32:	ldr	r3, [r3, #32]
    6b34:	bx	r3
  }
    6b36:	movs	r0, #0
    6b38:	pop	{r4, pc}

00006b3a <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6b3a:	mov	r2, r0
bool FatFile::addCluster() {
    6b3c:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6b3e:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6b42:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6b44:	ldr	r0, [r0, #8]
    6b46:	mov	r1, r5
    6b48:	bl	78e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6b4c:	cbz	r0, 6b60 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6b4e:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6b50:	cbnz	r5, 6b62 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6b52:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6b56:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6b58:	ldrb	r3, [r4, #2]
    6b5a:	orn	r3, r3, #127	; 0x7f
    6b5e:	strb	r3, [r4, #2]
}
    6b60:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6b62:	adds	r5, #1
    6b64:	ldr	r2, [r4, #16]
    6b66:	cmp	r2, r5
    6b68:	beq.n	6b58 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6b6a:	bic.w	r3, r3, #64	; 0x40
    6b6e:	b.n	6b56 <FatFile::addCluster()+0x1c>

00006b70 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6b70:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6b72:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6b74:	mov	r4, r0
  if (isRootFixed()) {
    6b76:	ands.w	r5, r5, #32
    6b7a:	beq.n	6b82 <FatFile::addDirCluster()+0x12>
  return false;
    6b7c:	movs	r6, #0
}
    6b7e:	mov	r0, r6
    6b80:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6b82:	ldr	r2, [r0, #20]
    6b84:	ldr	r3, [pc, #84]	; (6bdc <FatFile::addDirCluster()+0x6c>)
    6b86:	cmp	r2, r3
    6b88:	bcs.n	6b7c <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    6b8a:	bl	6b3a <FatFile::addCluster()>
    6b8e:	mov	r6, r0
    6b90:	cmp	r0, #0
    6b92:	beq.n	6b7c <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    6b94:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b96:	ldr	r3, [r4, #16]
    6b98:	ldrb	r1, [r2, #6]
    6b9a:	subs	r3, #2
    6b9c:	ldr	r7, [r2, #20]
    6b9e:	lsls	r3, r1
    6ba0:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6ba2:	ldr	r0, [r4, #8]
    6ba4:	uxtb	r1, r5
    6ba6:	ldrb	r3, [r0, #4]
    6ba8:	cmp	r3, r1
    6baa:	bhi.n	6bbe <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    6bac:	ldrb	r2, [r0, #6]
    6bae:	mov.w	r3, #512	; 0x200
    6bb2:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    6bb4:	ldr	r2, [r4, #20]
    6bb6:	uxtah	r3, r2, r3
    6bba:	str	r3, [r4, #20]
  return true;
    6bbc:	b.n	6b7e <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    6bbe:	movs	r2, #5
    6bc0:	add	r1, r7
    6bc2:	adds	r0, #40	; 0x28
    if (!pc) {
    6bc4:	adds	r5, #1
    6bc6:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    6bca:	cmp	r0, #0
    6bcc:	beq.n	6b7c <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    6bce:	mov.w	r2, #512	; 0x200
    6bd2:	movs	r1, #0
    6bd4:	bl	9d8c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    6bd8:	b.n	6ba2 <FatFile::addDirCluster()+0x32>
    6bda:	nop
    6bdc:	.word	0x001ffe00

00006be0 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    6be0:	push	{r4, lr}
    6be2:	mov	r4, r0
    6be4:	ldr	r0, [r0, #8]
    6be6:	mov	r2, r1
    6be8:	adds	r0, #40	; 0x28
    6bea:	ldr	r1, [r4, #24]
    6bec:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6bf0:	cbz	r0, 6bfc <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    6bf2:	ldrh	r3, [r4, #4]
    6bf4:	and.w	r3, r3, #15
    6bf8:	add.w	r0, r0, r3, lsl #5
}
    6bfc:	pop	{r4, pc}

00006bfe <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    6bfe:	ldrb	r3, [r0, #0]
    6c00:	cbnz	r3, 6c06 <FatFile::openRoot(FatVolume*)+0x8>
    6c02:	b.w	6ae4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    6c06:	movs	r0, #0
    6c08:	bx	lr

00006c0a <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    6c0a:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6c0c:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6c0e:	mov	r4, r0
    6c10:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    6c12:	cbnz	r3, 6c1e <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6c14:	ldr	r1, [r1, #8]
}
    6c16:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    6c1a:	b.w	6bfe <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    6c1e:	movs	r2, #36	; 0x24
    6c20:	movs	r1, #0
    6c22:	bl	9d8c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    6c26:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    6c28:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    6c2a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6c2c:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    6c2e:	ldr	r3, [r5, #8]
    6c30:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6c32:	ldr	r3, [r5, #12]
    6c34:	str	r3, [r4, #32]
}
    6c36:	pop	{r3, r4, r5, pc}

00006c38 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    6c38:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c3c:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6c40:	ldrb	r3, [r0, #2]
    6c42:	mov	r4, r0
    6c44:	sub	sp, #12
    6c46:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    6c48:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    6c4a:	mov	r5, r2
  if (!isReadable()) {
    6c4c:	bpl.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    6c4e:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6c50:	lsls	r1, r3, #28
    6c52:	bpl.n	6c7c <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6c54:	ldr	r3, [r4, #28]
    6c56:	ldr	r2, [r4, #20]
    6c58:	subs	r3, r3, r2
    6c5a:	cmp	r5, r3
    6c5c:	it	cs
    6c5e:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c60:	add.w	r3, r4, #16
  toRead = nbyte;
    6c64:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    6c66:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c6a:	vmov	s16, r3
  while (toRead) {
    6c6e:	cbnz	r6, 6c8e <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6c70:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6c72:	add	sp, #12
    6c74:	vpop	{d8}
    6c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    6c7c:	lsls	r2, r3, #26
    6c7e:	bpl.n	6c60 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6c80:	ldr	r3, [r4, #8]
    6c82:	ldrh	r2, [r3, #10]
    6c84:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    6c86:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    6c8a:	uxth	r3, r3
    6c8c:	b.n	6c5a <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    6c8e:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6c90:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    6c92:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    6c94:	ldr	r0, [r4, #8]
    6c96:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    6c9a:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    6c9e:	bpl.n	6cd8 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    6ca0:	ldr	r2, [r0, #32]
    6ca2:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6ca4:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    6ca8:	cmp.w	fp, #0
    6cac:	bne.n	6d40 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    6cae:	cmp.w	r6, #512	; 0x200
    6cb2:	bcc.n	6d40 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    6cb4:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    6cb8:	cmp	r1, r2
    6cba:	beq.n	6d40 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6cbc:	cmp.w	r6, #1024	; 0x400
    6cc0:	bcs.n	6d70 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    6cc2:	ldr.w	r0, [sl, #44]	; 0x2c
    6cc6:	mov	r2, r8
    6cc8:	ldr	r3, [r0, #0]
    6cca:	ldr	r3, [r3, #16]
    6ccc:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6cce:	cmp	r0, #0
    6cd0:	beq.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    6cd2:	mov.w	r7, #512	; 0x200
    6cd6:	b.n	6d64 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    6cd8:	ldrb.w	r9, [r0, #5]
    6cdc:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    6ce0:	cmp.w	fp, #0
    6ce4:	bne.n	6cf8 <FatFile::read(void*, unsigned int)+0xc0>
    6ce6:	cmp.w	r9, #0
    6cea:	bne.n	6cf8 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6cec:	cbnz	r7, 6d0a <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6cee:	lsls	r2, r2, #25
    return m_rootDirStart;
    6cf0:	ite	mi
    6cf2:	ldrmi	r2, [r0, #32]
    6cf4:	ldrpl	r2, [r4, #32]
    6cf6:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    6cf8:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6cfa:	ldr	r1, [r4, #16]
    6cfc:	ldrb	r0, [r2, #6]
    6cfe:	subs	r1, #2
    6d00:	ldr	r2, [r2, #20]
    6d02:	lsls	r1, r0
    6d04:	add	r1, r2
    6d06:	add	r1, r9
    6d08:	b.n	6ca4 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    6d0a:	lsls	r3, r2, #28
          m_curCluster++;
    6d0c:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    6d0e:	bpl.n	6d1c <FatFile::read(void*, unsigned int)+0xe4>
    6d10:	ldrb	r2, [r4, #2]
    6d12:	lsls	r7, r2, #25
    6d14:	bpl.n	6d1c <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    6d16:	adds	r1, #1
    6d18:	str	r1, [r4, #16]
    6d1a:	b.n	6cf8 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6d1c:	vmov	r2, s16
    6d20:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6d24:	cmp	r0, #0
    6d26:	blt.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    6d28:	bne.n	6cf8 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    6d2a:	ldrb	r3, [r4, #0]
    6d2c:	tst.w	r3, #112	; 0x70
    6d30:	bne.n	6c70 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    6d32:	ldrb	r3, [r4, #1]
  return -1;
    6d34:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    6d38:	orr.w	r3, r3, #2
    6d3c:	strb	r3, [r4, #1]
  return -1;
    6d3e:	b.n	6c72 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    6d40:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6d44:	movs	r2, #0
    6d46:	add.w	r0, sl, #40	; 0x28
    6d4a:	cmp	r7, r6
    6d4c:	it	cs
    6d4e:	movcs	r7, r6
    6d50:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6d54:	cmp	r0, #0
    6d56:	beq.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    6d58:	add.w	r1, r0, fp
    6d5c:	mov	r2, r7
    6d5e:	mov	r0, r8
    6d60:	bl	9dd0 <memcpy>
    m_curPosition += n;
    6d64:	ldr	r3, [r4, #20]
    dst += n;
    6d66:	add	r8, r7
    toRead -= n;
    6d68:	subs	r6, r6, r7
    m_curPosition += n;
    6d6a:	add	r3, r7
    6d6c:	str	r3, [r4, #20]
    toRead -= n;
    6d6e:	b.n	6c6e <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    6d70:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6d72:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6d74:	lsls	r0, r0, #26
    6d76:	bmi.n	6d86 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    6d78:	ldrb.w	r0, [sl, #4]
    6d7c:	sub.w	r0, r0, r9
    6d80:	cmp	r3, r0
    6d82:	it	cs
    6d84:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    6d86:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    6d88:	mov.w	r7, r3, lsl #9
    6d8c:	bls.n	6da2 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    6d8e:	ldr.w	r0, [sl, #44]	; 0x2c
    6d92:	ldr	r2, [r0, #0]
    6d94:	ldr.w	sl, [r2, #20]
    6d98:	mov	r2, r8
    6d9a:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    6d9c:	cmp	r0, #0
    6d9e:	bne.n	6d64 <FatFile::read(void*, unsigned int)+0x12c>
    6da0:	b.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    6da2:	adds	r0, r1, r3
    6da4:	cmp	r2, r0
    6da6:	bcs.n	6d8e <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    6da8:	add.w	r0, sl, #40	; 0x28
    6dac:	strd	r1, r3, [sp]
    6db0:	bl	51d0 <FsCache::sync()>
    6db4:	ldrd	r1, r3, [sp]
    6db8:	cmp	r0, #0
    6dba:	bne.n	6d8e <FatFile::read(void*, unsigned int)+0x156>
    6dbc:	b.n	6d32 <FatFile::read(void*, unsigned int)+0xfa>

00006dbe <FatFile::peek()>:
int FatFile::peek() {
    6dbe:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    6dc0:	movs	r2, #1
    6dc2:	add.w	r1, sp, #7
    6dc6:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6dc8:	ldrd	r5, r6, [r0, #16]
    6dcc:	bl	6c38 <FatFile::read(void*, unsigned int)>
    6dd0:	cmp	r0, #1
    6dd2:	ite	eq
    6dd4:	ldrbeq.w	r0, [sp, #7]
    6dd8:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    6ddc:	strd	r5, r6, [r4, #16]
}
    6de0:	add	sp, #8
    6de2:	pop	{r4, r5, r6, pc}

00006de4 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6de4:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    6de6:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6dea:	push	{r0, r1, r2, r4, r5, lr}
    6dec:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6dee:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6df2:	beq.n	6df6 <FatFile::readDirCache(bool)+0x12>
    6df4:	cbnz	r1, 6e1e <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    6df6:	movs	r2, #1
    6df8:	add.w	r1, sp, #7
    6dfc:	mov	r0, r4
    6dfe:	bl	6c38 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    6e02:	sxtb	r0, r0
    6e04:	cmp	r0, #1
    6e06:	beq.n	6e0e <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    6e08:	movs	r0, #0
}
    6e0a:	add	sp, #12
    6e0c:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    6e0e:	ldr	r3, [r4, #20]
    6e10:	adds	r3, #31
    return m_buffer;
    6e12:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    6e14:	str	r3, [r4, #20]
    6e16:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6e18:	add.w	r0, r0, r5, lsl #5
    6e1c:	b.n	6e0a <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    6e1e:	adds	r3, #32
    6e20:	b.n	6e12 <FatFile::readDirCache(bool)+0x2e>

00006e22 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6e22:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e26:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    6e28:	ldrb	r1, [r0, #0]
    6e2a:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6e2c:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    6e2e:	cbz	r1, 6e52 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6e30:	ldr	r0, [r0, #20]
    6e32:	cmp	r0, r5
    6e34:	beq.n	6e44 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    6e36:	cbnz	r5, 6e48 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    6e38:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6e3a:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    6e3c:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6e3e:	bic.w	r3, r3, #32
    6e42:	strb	r3, [r4, #2]
    return true;
    6e44:	movs	r0, #1
    6e46:	b.n	6e56 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    6e48:	lsls	r3, r1, #28
    6e4a:	bpl.n	6e5a <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    6e4c:	ldr	r3, [r4, #28]
    6e4e:	cmp	r3, r5
    6e50:	bcs.n	6e6a <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6e52:	movs	r0, #0
  m_curCluster = tmp;
    6e54:	str	r7, [r4, #16]
}
    6e56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    6e5a:	lsls	r6, r1, #26
    6e5c:	bpl.n	6e6a <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    6e5e:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    6e60:	ldrh	r3, [r3, #10]
    6e62:	cmp.w	r5, r3, lsl #5
    6e66:	bhi.n	6e52 <FatFile::seekSet(unsigned long)+0x30>
    6e68:	b.n	6e3a <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6e6a:	ldr.w	ip, [r4, #8]
    6e6e:	subs	r6, r5, #1
  if (isContiguous()) {
    6e70:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6e72:	ldrb.w	r3, [ip, #6]
    6e76:	lsls	r2, r2, #25
    6e78:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6e7c:	uxtb	r3, r3
    6e7e:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    6e82:	bpl.n	6e8c <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    6e84:	ldr	r3, [r4, #32]
    6e86:	add	r3, r6
    6e88:	str	r3, [r4, #16]
    goto done;
    6e8a:	b.n	6e3a <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    6e8c:	subs	r2, r0, #1
    6e8e:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    6e92:	cmp	r6, r3
    6e94:	bcc.n	6e98 <FatFile::seekSet(unsigned long)+0x76>
    6e96:	cbnz	r0, 6ebe <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6e98:	lsls	r3, r1, #25
    return m_rootDirStart;
    6e9a:	ite	mi
    6e9c:	ldrmi.w	r3, [ip, #32]
    6ea0:	ldrpl	r3, [r4, #32]
    6ea2:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6ea4:	add.w	r8, r4, #16
  while (nNew--) {
    6ea8:	cmp	r6, #0
    6eaa:	beq.n	6e3a <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6eac:	mov	r2, r8
    6eae:	ldr	r1, [r4, #16]
    6eb0:	ldr	r0, [r4, #8]
    6eb2:	subs	r6, #1
    6eb4:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
    6eb8:	cmp	r0, #0
    6eba:	bgt.n	6ea8 <FatFile::seekSet(unsigned long)+0x86>
    6ebc:	b.n	6e52 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    6ebe:	subs	r6, r6, r3
    6ec0:	b.n	6ea4 <FatFile::seekSet(unsigned long)+0x82>

00006ec2 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    6ec2:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6ec4:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    6ec6:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    6ec8:	lsls	r2, r3, #27
    6eca:	bpl.n	6ee0 <FatFile::rmdir()+0x1e>
    seekSet(0);
    6ecc:	movs	r1, #0
    6ece:	bl	6e22 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    6ed2:	movs	r1, #1
    6ed4:	mov	r0, r4
    6ed6:	bl	6de4 <FatFile::readDirCache(bool)>
    if (!dir) {
    6eda:	cbnz	r0, 6ee4 <FatFile::rmdir()+0x22>
      if (!getError()) {
    6edc:	ldrb	r3, [r4, #1]
    6ede:	cbz	r3, 6ef8 <FatFile::rmdir()+0x36>
}
    6ee0:	movs	r0, #0
    6ee2:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    6ee4:	ldrb	r3, [r0, #0]
    6ee6:	cbz	r3, 6ef8 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6ee8:	cmp	r3, #229	; 0xe5
    6eea:	beq.n	6ed2 <FatFile::rmdir()+0x10>
    6eec:	cmp	r3, #46	; 0x2e
    6eee:	beq.n	6ed2 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    6ef0:	ldrb	r3, [r0, #11]
    6ef2:	lsls	r3, r3, #28
    6ef4:	bmi.n	6ed2 <FatFile::rmdir()+0x10>
    6ef6:	b.n	6ee0 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    6ef8:	movs	r3, #8
  return remove();
    6efa:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6efc:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6efe:	ldrb	r3, [r4, #2]
    6f00:	orr.w	r3, r3, #2
    6f04:	strb	r3, [r4, #2]
}
    6f06:	ldmia.w	sp!, {r4, lr}
  return remove();
    6f0a:	b.w	8214 <FatFile::remove()>

00006f0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6f0e:	push	{r3, r4, r5, r6, r7, lr}
    6f10:	mov	r7, r1
    6f12:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    6f14:	movs	r1, #0
    6f16:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    6f18:	mov	r4, r0
    6f1a:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    6f1c:	bl	9d8c <memset>
  m_vol = dirFile->m_vol;
    6f20:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    6f22:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    6f24:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    6f26:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    6f2a:	str	r3, [r4, #12]
    6f2c:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    6f30:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    6f32:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6f36:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    6f38:	lsls	r1, r2, #28
    6f3a:	bmi.n	6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6f3c:	and.w	r2, r2, #23
    6f40:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    6f42:	ldrb	r1, [r3, #11]
    6f44:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    6f48:	itt	eq
    6f4a:	orreq.w	r2, r2, #8
    6f4e:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    6f50:	ldrb.w	r2, [sp, #24]
    6f54:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    6f56:	and.w	r2, r5, #3
    6f5a:	cmp	r2, #1
    6f5c:	beq.n	6fa2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    6f5e:	cmp	r2, #2
    6f60:	beq.n	6fa6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    6f62:	cbnz	r2, 6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    6f64:	lsls	r2, r5, #21
    6f66:	bmi.n	6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6f68:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    6f6a:	lsls	r7, r2, #30
    6f6c:	bpl.n	6f78 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6f6e:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    6f70:	lsls	r6, r1, #27
    6f72:	bmi.n	6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6f74:	lsls	r1, r1, #31
    6f76:	bmi.n	6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6f78:	and.w	r1, r5, #8
    6f7c:	orrs	r2, r1
    6f7e:	strb	r2, [r4, #2]
    return m_sector;
    6f80:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    6f82:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    6f84:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    6f86:	ldrh	r2, [r3, #20]
    6f88:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    6f8c:	lsls	r2, r5, #21
    6f8e:	bpl.n	6fba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6f90:	cbnz	r1, 6faa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6f92:	ldrb	r3, [r4, #2]
    6f94:	orn	r3, r3, #127	; 0x7f
    6f98:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6f9a:	lsls	r3, r5, #17
    6f9c:	bmi.n	6fc2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    6f9e:	movs	r0, #1
}
    6fa0:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    6fa2:	movs	r2, #2
    6fa4:	b.n	6f6a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    6fa6:	movs	r2, #3
    6fa8:	b.n	6f6a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    6faa:	bl	796a <FatPartition::freeChain(unsigned long)>
    6fae:	cmp	r0, #0
    6fb0:	bne.n	6f92 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    6fb2:	movs	r0, #0
    6fb4:	strb	r0, [r4, #0]
  m_flags = 0;
    6fb6:	strb	r0, [r4, #2]
  return false;
    6fb8:	b.n	6fa0 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    6fba:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    6fbc:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    6fbe:	str	r3, [r4, #28]
    6fc0:	b.n	6f9a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6fc2:	ldr	r1, [r4, #28]
    6fc4:	mov	r0, r4
    6fc6:	bl	6e22 <FatFile::seekSet(unsigned long)>
    6fca:	cmp	r0, #0
    6fcc:	bne.n	6f9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    6fce:	b.n	6fb2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00006fd0 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    6fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6fd4:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    6fd6:	ldrb	r2, [r0, #0]
    6fd8:	sub	sp, #20
    6fda:	mov	r7, r0
    6fdc:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    6fde:	cmp	r2, #0
    6fe0:	bne.n	7068 <FatFile::openNext(FatFile*, int)+0x98>
    6fe2:	ldrb	r2, [r1, #0]
    6fe4:	tst.w	r2, #112	; 0x70
    6fe8:	beq.n	7068 <FatFile::openNext(FatFile*, int)+0x98>
    6fea:	ldr	r4, [r1, #20]
    6fec:	ands.w	r4, r4, #31
    6ff0:	bne.n	7068 <FatFile::openNext(FatFile*, int)+0x98>
    6ff2:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    6ff4:	movs	r1, #0
    6ff6:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    6ff8:	ldr.w	r8, [r6, #20]
    6ffc:	str	r3, [sp, #12]
    6ffe:	bl	6de4 <FatFile::readDirCache(bool)>
    if (!dir) {
    7002:	cbz	r0, 7068 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    7004:	ldrb	r1, [r0, #0]
    7006:	cbz	r1, 7068 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7008:	cmp	r1, #46	; 0x2e
    700a:	ldr	r3, [sp, #12]
    700c:	beq.n	7052 <FatFile::openNext(FatFile*, int)+0x82>
    700e:	cmp	r1, #229	; 0xe5
    7010:	beq.n	7052 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7012:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7014:	ands.w	ip, r2, #8
    7018:	bne.n	7056 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    701a:	cbz	r4, 703e <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    701c:	subs	r1, r0, #1
    701e:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7022:	mov.w	r2, ip, lsl #7
    7026:	ldrb.w	r0, [r1, #1]!
    702a:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    702e:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7030:	uxtab	r2, r0, r2
    7034:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7038:	bne.n	7022 <FatFile::openNext(FatFile*, int)+0x52>
    703a:	cmp	r9, ip
    703c:	bne.n	7068 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    703e:	ubfx	r2, r8, #5, #16
    7042:	mov	r1, r6
    7044:	mov	r0, r7
    7046:	str	r4, [sp, #0]
    7048:	bl	6f0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    704c:	add	sp, #20
    704e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    7052:	movs	r4, #0
    7054:	b.n	6ff4 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    7056:	cmp	r2, #15
    7058:	bne.n	7052 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    705a:	lsls	r2, r1, #25
    705c:	bpl.n	6ff4 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    705e:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    7062:	ldrb.w	r9, [r0, #13]
    7066:	b.n	6ff4 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7068:	movs	r0, #0
    706a:	b.n	704c <FatFile::openNext(FatFile*, int)+0x7c>

0000706c <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    706c:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    706e:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    7070:	mov	r4, r0
  if (!isOpen()) {
    7072:	cmp	r3, #0
    7074:	beq.n	70e2 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7076:	ldrsb.w	r3, [r0, #2]
    707a:	cmp	r3, #0
    707c:	bge.n	70d6 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    707e:	movs	r1, #1
    7080:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7084:	mov	r5, r0
    7086:	cbnz	r0, 7096 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7088:	ldrb	r3, [r4, #1]
  return false;
    708a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    708c:	orr.w	r3, r3, #1
    7090:	strb	r3, [r4, #1]
}
    7092:	add	sp, #12
    7094:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7096:	ldrb	r3, [r0, #0]
    7098:	cmp	r3, #229	; 0xe5
    709a:	beq.n	7088 <FatFile::sync()+0x1c>
    if (isFile()) {
    709c:	ldrb	r3, [r4, #0]
    709e:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    70a0:	itt	mi
    70a2:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    70a4:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    70a6:	ldr	r3, [r4, #32]
    70a8:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    70aa:	lsrs	r3, r3, #16
    70ac:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    70ae:	ldr	r3, [pc, #56]	; (70e8 <FatFile::sync()+0x7c>)
    70b0:	ldr	r3, [r3, #0]
    70b2:	cbz	r3, 70ce <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    70b4:	add.w	r2, sp, #3
    70b8:	add.w	r1, sp, #6
    70bc:	add	r0, sp, #4
    70be:	blx	r3
      setLe16(dir->modifyDate, date);
    70c0:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    70c4:	strh	r3, [r5, #24]
    70c6:	strh	r3, [r5, #18]
    70c8:	ldrh.w	r3, [sp, #6]
    70cc:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    70ce:	ldrb	r3, [r4, #2]
    70d0:	and.w	r3, r3, #127	; 0x7f
    70d4:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    70d6:	ldr	r0, [r4, #8]
    70d8:	bl	6b14 <FatPartition::cacheSync()>
    70dc:	cmp	r0, #0
    70de:	beq.n	7088 <FatFile::sync()+0x1c>
    70e0:	b.n	7092 <FatFile::sync()+0x26>
    return true;
    70e2:	movs	r0, #1
    70e4:	b.n	7092 <FatFile::sync()+0x26>
    70e6:	nop
    70e8:	.word	0x200207fc

000070ec <FatFile::close()>:
bool FatFile::close() {
    70ec:	push	{r4, lr}
    70ee:	mov	r4, r0
  bool rtn = sync();
    70f0:	bl	706c <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    70f4:	movs	r3, #0
    70f6:	strb	r3, [r4, #0]
  m_flags = 0;
    70f8:	strb	r3, [r4, #2]
}
    70fa:	pop	{r4, pc}

000070fc <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    70fc:	push	{r4, r5, r6, r7, lr}
    70fe:	mov	r7, r3
    7100:	sub	sp, #84	; 0x54
  FatFile() {}
    7102:	movs	r3, #0
    7104:	mov	r6, r0
    7106:	mov	r4, r1
    7108:	str	r2, [sp, #4]
    710a:	str	r3, [sp, #8]
    710c:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7110:	ldrb	r3, [r0, #0]
    7112:	cbz	r3, 711a <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7114:	movs	r0, #0
}
    7116:	add	sp, #84	; 0x54
    7118:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    711a:	ldrb	r3, [r1, #0]
    711c:	tst.w	r3, #112	; 0x70
    7120:	beq.n	7114 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7122:	ldrb	r3, [r2, #0]
    7124:	cmp	r3, #47	; 0x2f
    7126:	bne.n	714e <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7128:	ldr	r2, [sp, #4]
    712a:	ldrb	r3, [r2, #0]
    712c:	cmp	r3, #47	; 0x2f
    712e:	beq.n	713c <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7130:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7132:	cbnz	r3, 7142 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7134:	mov	r0, r6
    7136:	bl	6bfe <FatFile::openRoot(FatVolume*)>
    713a:	b.n	7116 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    713c:	adds	r2, #1
    713e:	str	r2, [sp, #4]
    7140:	b.n	7128 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7142:	add	r0, sp, #8
    7144:	bl	6ae4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7148:	cmp	r0, #0
    714a:	beq.n	7114 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    714c:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    714e:	add	r3, sp, #4
    7150:	add	r2, sp, #44	; 0x2c
    7152:	ldr	r1, [sp, #4]
    7154:	mov	r0, r6
    7156:	bl	8168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    715a:	cmp	r0, #0
    715c:	beq.n	7114 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    715e:	ldr	r3, [sp, #4]
    7160:	ldrb	r3, [r3, #0]
    7162:	cbz	r3, 718c <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7164:	movs	r3, #0
    7166:	add	r2, sp, #44	; 0x2c
    7168:	mov	r1, r4
    716a:	mov	r0, r6
    716c:	bl	7ee4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7170:	cmp	r0, #0
    7172:	beq.n	7114 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    7174:	mov	r5, r6
    7176:	add	r4, sp, #8
    7178:	ldmia	r5!, {r0, r1, r2, r3}
    717a:	stmia	r4!, {r0, r1, r2, r3}
    717c:	ldmia	r5!, {r0, r1, r2, r3}
    717e:	stmia	r4!, {r0, r1, r2, r3}
    7180:	ldr	r3, [r5, #0]
    close();
    7182:	mov	r0, r6
    tmpDir = *this;
    7184:	str	r3, [r4, #0]
    close();
    7186:	bl	70ec <FatFile::close()>
  while (1) {
    718a:	b.n	714c <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    718c:	mov	r3, r7
    718e:	add	r2, sp, #44	; 0x2c
    7190:	mov	r1, r4
    7192:	mov	r0, r6
    7194:	bl	7ee4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7198:	b.n	7116 <FatFile::open(FatFile*, char const*, int)+0x1a>

0000719a <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    719a:	cbz	r1, 71a4 <FatFile::open(FatVolume*, char const*, int)+0xa>
    719c:	add.w	r1, r1, #1096	; 0x448
    71a0:	b.w	70fc <FatFile::open(FatFile*, char const*, int)>
}
    71a4:	mov	r0, r1
    71a6:	bx	lr

000071a8 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    71a8:	push	{r4, r5, r6, lr}
    71aa:	mov	r6, r0
    71ac:	mov	r4, r1
  if (!sync()) {
    71ae:	bl	706c <FatFile::sync()>
    71b2:	mov	r5, r0
    71b4:	cbnz	r0, 71bc <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    71b6:	movs	r5, #0
}
    71b8:	mov	r0, r5
    71ba:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    71bc:	movs	r1, #0
    71be:	mov	r0, r6
    71c0:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    71c4:	mov	r3, r0
    71c6:	cmp	r0, #0
    71c8:	beq.n	71b6 <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    71ca:	mov	r1, r4
    71cc:	add.w	r2, r0, #32
    71d0:	ldr.w	r0, [r3], #4
    71d4:	cmp	r3, r2
    71d6:	str.w	r0, [r1], #4
    71da:	bne.n	71d0 <FatFile::dirEntry(DirFat_t*)+0x28>
    71dc:	b.n	71b8 <FatFile::dirEntry(DirFat_t*)+0x10>

000071de <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    71de:	push	{r4, r5, lr}
    71e0:	sub	sp, #36	; 0x24
    71e2:	mov	r5, r1
    71e4:	mov	r4, r2
  if (!dirEntry(&dir)) {
    71e6:	mov	r1, sp
    71e8:	bl	71a8 <FatFile::dirEntry(DirFat_t*)>
    71ec:	cbz	r0, 71fa <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    71ee:	ldrh.w	r3, [sp, #16]
    71f2:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    71f4:	ldrh.w	r3, [sp, #14]
    71f8:	strh	r3, [r4, #0]
}
    71fa:	add	sp, #36	; 0x24
    71fc:	pop	{r4, r5, pc}

000071fe <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    71fe:	push	{r4, r5, lr}
    7200:	sub	sp, #36	; 0x24
    7202:	mov	r5, r1
    7204:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7206:	mov	r1, sp
    7208:	bl	71a8 <FatFile::dirEntry(DirFat_t*)>
    720c:	cbz	r0, 721a <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    720e:	ldrh.w	r3, [sp, #24]
    7212:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7214:	ldrh.w	r3, [sp, #22]
    7218:	strh	r3, [r4, #0]
}
    721a:	add	sp, #36	; 0x24
    721c:	pop	{r4, r5, pc}

0000721e <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    721e:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7220:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7222:	sub	sp, #36	; 0x24
    7224:	mov	r4, r0
    7226:	mov	r6, r1
  if (!parent->isDir()) {
    7228:	tst.w	r3, #112	; 0x70
    722c:	bne.n	7234 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    722e:	movs	r0, #0
}
    7230:	add	sp, #36	; 0x24
    7232:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7234:	movw	r3, #2562	; 0xa02
    7238:	bl	7ee4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    723c:	cmp	r0, #0
    723e:	beq.n	722e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    7240:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7242:	movs	r5, #16
  if (!addDirCluster()) {
    7244:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7246:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7248:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    724a:	bl	6b70 <FatFile::addDirCluster()>
    724e:	cmp	r0, #0
    7250:	beq.n	722e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    7252:	ldr	r3, [r4, #16]
    seekSet(0);
    7254:	movs	r1, #0
    7256:	mov	r0, r4
    7258:	str	r3, [r4, #32]
    725a:	bl	6e22 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    725e:	mov	r0, r4
    7260:	bl	706c <FatFile::sync()>
    7264:	cmp	r0, #0
    7266:	beq.n	722e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7268:	mov	r1, r7
    726a:	mov	r0, r4
    726c:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7270:	cmp	r0, #0
    7272:	beq.n	722e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    7274:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7276:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7278:	mov	r3, r0
    727a:	add.w	ip, r0, #32
    727e:	mov	r5, r2
    7280:	ldr	r0, [r3, #0]
    7282:	adds	r3, #8
    7284:	ldr.w	r1, [r3, #-4]
    7288:	mov	r7, r2
    728a:	cmp	r3, ip
    728c:	stmia	r7!, {r0, r1}
    728e:	mov	r2, r7
    7290:	bne.n	7280 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7292:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    7296:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7298:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    729a:	movs	r2, #1
    dot.name[i] = ' ';
    729c:	str.w	r3, [sp, #1]
    72a0:	adds	r0, #40	; 0x28
    72a2:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    72a6:	subs	r1, #2
    72a8:	strh.w	r3, [sp, #9]
    72ac:	ldrb.w	r3, [r0, #-34]
    72b0:	lsls	r1, r3
    72b2:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    72b6:	add	r1, r3
    72b8:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    72bc:	mov	r3, r0
    72be:	cmp	r0, #0
    72c0:	beq.n	722e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    72c2:	movs	r2, #46	; 0x2e
    72c4:	mov	ip, r5
    72c6:	mov	r7, r0
    72c8:	add.w	lr, sp, #32
    72cc:	strb.w	r2, [sp]
    72d0:	mov	r2, ip
    72d2:	adds	r7, #8
    72d4:	ldmia	r2!, {r0, r1}
    72d6:	cmp	r2, lr
    72d8:	str.w	r0, [r7, #-8]
    72dc:	str.w	r1, [r7, #-4]
    72e0:	mov	ip, r2
    72e2:	bne.n	72d0 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    72e4:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    72e6:	adds	r3, #32
  dot.name[1] = '.';
    72e8:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    72ec:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    72ee:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    72f0:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    72f2:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    72f6:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    72f8:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    72fc:	mov	r5, r2
    72fe:	adds	r3, #8
    7300:	ldmia	r5!, {r0, r1}
    7302:	cmp	r5, r6
    7304:	str.w	r0, [r3, #-8]
    7308:	str.w	r1, [r3, #-4]
    730c:	mov	r2, r5
    730e:	bne.n	72fc <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7310:	ldr	r0, [r4, #8]
    7312:	bl	6b14 <FatPartition::cacheSync()>
    7316:	b.n	7230 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007318 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7318:	push	{r4, r5, r6, r7, lr}
    731a:	mov	r7, r3
    731c:	sub	sp, #84	; 0x54
    731e:	movs	r3, #0
    7320:	mov	r6, r0
    7322:	mov	r4, r1
    7324:	str	r2, [sp, #4]
    7326:	strh.w	r3, [sp, #20]
  FatFile() {}
    732a:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    732c:	ldrb	r3, [r0, #0]
    732e:	cbz	r3, 7336 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7330:	movs	r0, #0
}
    7332:	add	sp, #84	; 0x54
    7334:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    7336:	ldrb	r3, [r1, #0]
    7338:	tst.w	r3, #112	; 0x70
    733c:	beq.n	7330 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    733e:	ldrb	r3, [r2, #0]
    7340:	cmp	r3, #47	; 0x2f
    7342:	bne.n	735a <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    7344:	ldr	r2, [sp, #4]
    7346:	ldrb	r3, [r2, #0]
    7348:	cmp	r3, #47	; 0x2f
    734a:	beq.n	7396 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    734c:	ldr	r1, [r4, #8]
    734e:	add	r0, sp, #44	; 0x2c
    7350:	bl	6ae4 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7354:	cmp	r0, #0
    7356:	beq.n	7330 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7358:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    735a:	add	r3, sp, #4
    735c:	add	r2, sp, #8
    735e:	ldr	r1, [sp, #4]
    7360:	mov	r0, r6
    7362:	bl	8168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7366:	cmp	r0, #0
    7368:	beq.n	7330 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    736a:	ldr	r3, [sp, #4]
    736c:	ldrb	r3, [r3, #0]
    736e:	cbz	r3, 73b0 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    7370:	movs	r3, #0
    7372:	add	r2, sp, #8
    7374:	mov	r1, r4
    7376:	mov	r0, r6
    7378:	bl	7ee4 <FatFile::open(FatFile*, FatLfn_t*, int)>
    737c:	cbz	r0, 739c <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    737e:	mov	r5, r6
    7380:	add	r4, sp, #44	; 0x2c
    7382:	ldmia	r5!, {r0, r1, r2, r3}
    7384:	stmia	r4!, {r0, r1, r2, r3}
    7386:	ldmia	r5!, {r0, r1, r2, r3}
    7388:	stmia	r4!, {r0, r1, r2, r3}
    738a:	ldr	r3, [r5, #0]
    close();
    738c:	mov	r0, r6
    tmpDir = *this;
    738e:	str	r3, [r4, #0]
    close();
    7390:	bl	70ec <FatFile::close()>
  while (1) {
    7394:	b.n	7358 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    7396:	adds	r2, #1
    7398:	str	r2, [sp, #4]
    739a:	b.n	7344 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    739c:	cmp	r7, #0
    739e:	beq.n	7330 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    73a0:	add	r2, sp, #8
    73a2:	mov	r1, r4
    73a4:	mov	r0, r6
    73a6:	bl	721e <FatFile::mkdir(FatFile*, FatLfn_t*)>
    73aa:	cmp	r0, #0
    73ac:	bne.n	737e <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    73ae:	b.n	7330 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    73b0:	add	r2, sp, #8
    73b2:	mov	r1, r4
    73b4:	mov	r0, r6
    73b6:	bl	721e <FatFile::mkdir(FatFile*, FatLfn_t*)>
    73ba:	b.n	7332 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

000073bc <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    73bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    73c0:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    73c2:	sub	sp, #108	; 0x6c
    73c4:	mov.w	r9, #0
    73c8:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    73ca:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    73ce:	mov	r7, r1
    73d0:	mov	r8, r2
    73d2:	str.w	r9, [sp, #32]
    73d6:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    73da:	bne.n	73e4 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    73dc:	movs	r0, #0
}
    73de:	add	sp, #108	; 0x6c
    73e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    73e4:	ldr	r2, [r0, #8]
    73e6:	ldr	r3, [r1, #8]
    73e8:	cmp	r2, r3
    73ea:	bne.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    73ec:	mov	r6, r4
  sync();
    73ee:	bl	706c <FatFile::sync()>
  oldFile = *this;
    73f2:	add	r5, sp, #68	; 0x44
    73f4:	ldmia	r6!, {r0, r1, r2, r3}
    73f6:	stmia	r5!, {r0, r1, r2, r3}
    73f8:	ldmia	r6!, {r0, r1, r2, r3}
    73fa:	stmia	r5!, {r0, r1, r2, r3}
    73fc:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    73fe:	mov	r1, r9
    7400:	mov	r0, r4
  oldFile = *this;
    7402:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7404:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7408:	cmp	r0, #0
    740a:	beq.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    740c:	mov	r2, sp
    740e:	mov	r3, r0
    7410:	add.w	ip, r0, #32
    7414:	mov	r5, r2
    7416:	ldr	r0, [r3, #0]
    7418:	adds	r3, #8
    741a:	ldr.w	r1, [r3, #-4]
    741e:	mov	r6, r2
    7420:	cmp	r3, ip
    7422:	stmia	r6!, {r0, r1}
    7424:	mov	r2, r6
    7426:	bne.n	7416 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7428:	ldrb	r3, [r4, #0]
    742a:	add	r6, sp, #32
    742c:	ands.w	r3, r3, #8
    7430:	beq.n	7448 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7432:	movw	r3, #2561	; 0xa01
    7436:	mov	r2, r8
    7438:	mov	r1, r7
    743a:	mov	r0, r6
    743c:	bl	70fc <FatFile::open(FatFile*, char const*, int)>
    7440:	cmp	r0, #0
    7442:	beq.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    7444:	movs	r7, #0
    7446:	b.n	7458 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7448:	mov	r2, r8
    744a:	mov	r1, r7
    744c:	mov	r0, r6
    744e:	bl	7318 <FatFile::mkdir(FatFile*, char const*, bool)>
    7452:	cmp	r0, #0
    7454:	beq.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    7456:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7458:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    745a:	movs	r1, #1
    745c:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    745e:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7460:	ldrh.w	r3, [sp, #36]	; 0x24
    7464:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7466:	ldrb.w	r3, [sp, #35]	; 0x23
    746a:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    746c:	ldr	r3, [sp, #44]	; 0x2c
    746e:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7470:	movs	r3, #0
    7472:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    7476:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    747a:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    747e:	cmp	r0, #0
    7480:	beq.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7482:	add.w	r3, sp, #13
    7486:	add.w	r2, r0, #13
    748a:	add.w	r1, sp, #29
    748e:	ldr.w	ip, [r3], #4
    7492:	cmp	r3, r1
    7494:	str.w	ip, [r2], #4
    7498:	bne.n	748e <FatFile::rename(FatFile*, char const*)+0xd2>
    749a:	ldrh	r1, [r3, #0]
    749c:	strh	r1, [r2, #0]
    749e:	ldrb	r3, [r3, #2]
    74a0:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    74a2:	ldrb.w	r3, [sp, #11]
    74a6:	strb	r3, [r0, #11]
  if (dirCluster) {
    74a8:	cmp	r7, #0
    74aa:	beq.n	7528 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    74ac:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74ae:	subs	r3, r7, #2
    74b0:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    74b2:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74b4:	ldr.w	r1, [r0, #-20]
    74b8:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    74ba:	movs	r2, #0
    74bc:	add	r1, r3
    74be:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    74c2:	cmp	r0, #0
    74c4:	beq.n	73dc <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    74c6:	add.w	r2, r0, #32
    74ca:	mov	lr, r5
    74cc:	add.w	r3, r0, #64	; 0x40
    74d0:	ldr	r0, [r2, #0]
    74d2:	adds	r2, #8
    74d4:	ldr.w	r1, [r2, #-4]
    74d8:	mov	ip, lr
    74da:	cmp	r2, r3
    74dc:	stmia.w	ip!, {r0, r1}
    74e0:	mov	lr, ip
    74e2:	bne.n	74d0 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    74e4:	mov	r1, r7
    74e6:	ldr	r0, [r4, #8]
    74e8:	bl	796a <FatPartition::freeChain(unsigned long)>
    74ec:	cmp	r0, #0
    74ee:	beq.w	73dc <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    74f2:	ldr	r0, [r4, #8]
    74f4:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74f6:	ldr	r1, [r4, #32]
    74f8:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    74fa:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    74fc:	subs	r1, #2
    74fe:	lsls	r1, r3
    7500:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7504:	add	r1, r3
    7506:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    750a:	cmp	r0, #0
    750c:	beq.w	73dc <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7510:	add.w	r3, r0, #32
    7514:	mov	r2, r5
    7516:	adds	r3, #8
    7518:	ldmia	r2!, {r0, r1}
    751a:	cmp	r2, r6
    751c:	str.w	r0, [r3, #-8]
    7520:	str.w	r1, [r3, #-4]
    7524:	mov	r5, r2
    7526:	bne.n	7514 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7528:	movs	r3, #0
  if (!oldFile.remove()) {
    752a:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    752c:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    752e:	movs	r3, #2
    7530:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7534:	movs	r3, #8
    7536:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    753a:	bl	8214 <FatFile::remove()>
    753e:	cmp	r0, #0
    7540:	beq.w	73dc <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    7544:	ldr	r0, [r4, #8]
    7546:	bl	6b14 <FatPartition::cacheSync()>
    754a:	b.n	73de <FatFile::rename(FatFile*, char const*)+0x22>

0000754c <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    754c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7550:	ldrb	r3, [r0, #2]
    7552:	mov	r4, r0
    7554:	mov	r9, r1
    7556:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7558:	lsls	r5, r3, #30
    755a:	bpl.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    755c:	lsls	r1, r3, #28
    755e:	bmi.n	7588 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7560:	ldr	r3, [r4, #20]
    7562:	adds	r3, r3, r7
    7564:	bcs.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
    7566:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7568:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    756c:	ldr	r3, [r4, #20]
  while (nToWrite) {
    756e:	cmp.w	r8, #0
    7572:	bne.n	759e <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7574:	ldr	r2, [r4, #28]
    7576:	cmp	r2, r3
    7578:	bcs.w	76da <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    757c:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    757e:	ldrb	r3, [r4, #2]
    7580:	orn	r3, r3, #127	; 0x7f
    7584:	strb	r3, [r4, #2]
    7586:	b.n	76e4 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7588:	ldr	r1, [r0, #28]
    758a:	bl	6e22 <FatFile::seekSet(unsigned long)>
    758e:	cmp	r0, #0
    7590:	bne.n	7560 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7592:	ldrb	r3, [r4, #1]
  return 0;
    7594:	movs	r7, #0
  m_error |= WRITE_ERROR;
    7596:	orr.w	r3, r3, #1
    759a:	strb	r3, [r4, #1]
  return 0;
    759c:	b.n	76e4 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    759e:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    75a0:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    75a4:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    75a6:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    75a8:	ands.w	r6, r6, r3, lsr #9
    75ac:	bne.n	75c4 <FatFile::write(void const*, unsigned int)+0x78>
    75ae:	cbnz	r5, 75c4 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    75b0:	cmp	r1, #0
    75b2:	beq.n	762c <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    75b4:	ldrb	r2, [r4, #2]
    75b6:	lsls	r2, r2, #25
    75b8:	bpl.n	7614 <FatFile::write(void const*, unsigned int)+0xc8>
    75ba:	ldr	r2, [r4, #28]
    75bc:	cmp	r2, r3
    75be:	bls.n	7614 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    75c0:	adds	r1, #1
    75c2:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    75c4:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    75c8:	ldr	r1, [r4, #16]
    75ca:	ldrb.w	r3, [ip, #6]
    75ce:	subs	r1, #2
    75d0:	lsls	r1, r3
    75d2:	ldr.w	r3, [ip, #20]
    75d6:	add	r1, r3
                      + sectorOfCluster;
    75d8:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    75da:	cmp	r5, #0
    75dc:	bne.n	7644 <FatFile::write(void const*, unsigned int)+0xf8>
    75de:	cmp.w	r8, #512	; 0x200
    75e2:	bcc.n	7644 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    75e4:	cmp.w	r8, #1024	; 0x400
    75e8:	ldr.w	r2, [ip, #52]	; 0x34
    75ec:	ldr.w	r0, [ip, #44]	; 0x2c
    75f0:	bcs.n	76a4 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    75f2:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    75f4:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    75f6:	ittt	eq
    75f8:	moveq.w	r3, #4294967295
    m_status = 0;
    75fc:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7600:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7604:	ldr	r3, [r0, #0]
    7606:	ldr	r3, [r3, #36]	; 0x24
    7608:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    760a:	cmp	r0, #0
    760c:	beq.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    760e:	mov.w	r6, #512	; 0x200
    7612:	b.n	768e <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7614:	mov	r2, sl
    7616:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    761a:	cmp	r0, #0
    761c:	blt.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    761e:	bne.n	75c4 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7620:	mov	r0, r4
    7622:	bl	6b3a <FatFile::addCluster()>
    7626:	cmp	r0, #0
    7628:	bne.n	75c4 <FatFile::write(void const*, unsigned int)+0x78>
    762a:	b.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    762c:	ldr	r3, [r4, #32]
    762e:	cbnz	r3, 7640 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7630:	mov	r0, r4
    7632:	bl	6b3a <FatFile::addCluster()>
    7636:	cmp	r0, #0
    7638:	beq.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    763a:	ldr	r3, [r4, #16]
    763c:	str	r3, [r4, #32]
    763e:	b.n	75c4 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    7640:	str	r3, [r4, #16]
    7642:	b.n	75c4 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    7644:	rsb	r6, r5, #512	; 0x200
    7648:	cmp	r6, r8
    764a:	it	cs
    764c:	movcs	r6, r8
      if (sectorOffset == 0 &&
    764e:	cbnz	r5, 769c <FatFile::write(void const*, unsigned int)+0x150>
    7650:	ldr	r2, [r4, #20]
    7652:	ldr	r3, [r4, #28]
    7654:	cmp	r2, r3
    7656:	bcs.n	76a0 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7658:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    765a:	tst.w	r3, #32
    765e:	ite	eq
    7660:	moveq	r2, #1
    7662:	movne	r2, #5
    return m_cache.prepare(sector, options);
    7664:	add.w	r0, ip, #40	; 0x28
    7668:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    766c:	cmp	r0, #0
    766e:	beq.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7670:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7672:	add	r5, r6
      memcpy(dst, src, n);
    7674:	mov	r2, r6
    7676:	mov	r1, r9
    7678:	bl	9dd0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    767c:	cmp.w	r5, #512	; 0x200
    7680:	ldr	r0, [r4, #8]
    7682:	bne.n	768e <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    7684:	adds	r0, #40	; 0x28
    7686:	bl	51d0 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    768a:	cmp	r0, #0
    768c:	beq.n	7592 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    768e:	ldr	r3, [r4, #20]
    src += n;
    7690:	add	r9, r6
    nToWrite -= n;
    7692:	sub.w	r8, r8, r6
    m_curPosition += n;
    7696:	add	r3, r6
    7698:	str	r3, [r4, #20]
    nToWrite -= n;
    769a:	b.n	756c <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    769c:	movs	r2, #1
    769e:	b.n	7664 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    76a0:	movs	r2, #5
    76a2:	b.n	7664 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    76a4:	ldrb.w	r3, [ip, #4]
    76a8:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    76aa:	mov.w	r6, r8, lsr #9
    76ae:	cmp	r3, r6
    76b0:	it	cs
    76b2:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    76b4:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    76b6:	mov.w	r6, r3, lsl #9
    76ba:	bhi.n	76d0 <FatFile::write(void const*, unsigned int)+0x184>
    76bc:	add.w	lr, r1, r3
    76c0:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    76c2:	ittt	hi
    76c4:	movhi.w	r2, #4294967295
    m_status = 0;
    76c8:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    76cc:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    76d0:	ldr	r2, [r0, #0]
    76d2:	ldr	r5, [r2, #40]	; 0x28
    76d4:	mov	r2, r9
    76d6:	blx	r5
    76d8:	b.n	768a <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    76da:	ldr	r3, [pc, #16]	; (76ec <FatFile::write(void const*, unsigned int)+0x1a0>)
    76dc:	ldr	r3, [r3, #0]
    76de:	cmp	r3, #0
    76e0:	bne.w	757e <FatFile::write(void const*, unsigned int)+0x32>
}
    76e4:	mov	r0, r7
    76e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    76ea:	nop
    76ec:	.word	0x200207fc

000076f0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    76f0:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    76f2:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    76f6:	push	{r4, r5, lr}
    76f8:	mov	r4, r3
    76fa:	it	cs
    76fc:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7700:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7704:	cmp	r1, r5
    7706:	bcc.n	770e <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7708:	subs	r3, r3, r4
    770a:	str	r3, [r2, #0]
}
    770c:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    770e:	ldrh.w	r0, [r1], #2
    7712:	cmp	r0, #0
    7714:	bne.n	7704 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7716:	ldr	r0, [r2, #4]
    7718:	adds	r0, #1
    771a:	str	r0, [r2, #4]
    771c:	b.n	7704 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

0000771e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    771e:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7720:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7722:	push	{r4, r5, lr}
    7724:	mov	r4, r3
    7726:	it	cs
    7728:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    772a:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    772e:	cmp	r1, r5
    7730:	bcc.n	7738 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7732:	subs	r3, r3, r4
    7734:	str	r3, [r2, #0]
}
    7736:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7738:	ldr.w	r0, [r1], #4
    773c:	cmp	r0, #0
    773e:	bne.n	772e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7740:	ldr	r0, [r2, #4]
    7742:	adds	r0, #1
    7744:	str	r0, [r2, #4]
    7746:	b.n	772e <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7748:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    774a:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    774e:	cmp	r3, #2
    7750:	it	eq
    7752:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7756:	b.w	521e <FsCache::prepare(unsigned long, unsigned char)>

0000775a <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    775a:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    775c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7760:	mov	r6, r0
    7762:	mov	r4, r1
    7764:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7766:	bhi.n	7770 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7768:	mov.w	r0, #4294967295
}
    776c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7770:	ldr	r3, [r0, #28]
    7772:	cmp	r3, r1
    7774:	bcc.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7776:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7778:	cmp	r3, #32
    777a:	bne.n	77a2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    777c:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    777e:	movs	r2, #0
    7780:	add.w	r1, r1, r4, lsr #7
    7784:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7788:	cmp	r0, #0
    778a:	beq.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    778c:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    778e:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7792:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7794:	ldr	r2, [r6, #28]
    7796:	cmp	r2, r3
  return 1;
    7798:	itet	cs
    779a:	movcs	r0, #1
    return 0;
    779c:	movcc	r0, #0
  *value = next;
    779e:	strcs	r3, [r7, #0]
  return 1;
    77a0:	b.n	776c <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    77a2:	cmp	r3, #16
    77a4:	bne.n	77c2 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    77a6:	ubfx	r1, r1, #8, #8
    77aa:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    77ac:	movs	r2, #0
    77ae:	add	r1, r3
    77b0:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    77b4:	cmp	r0, #0
    77b6:	beq.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    77b8:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    77ba:	and.w	r4, r4, #510	; 0x1fe
    77be:	ldrh	r3, [r0, r4]
    77c0:	b.n	7794 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    77c2:	cmp	r3, #12
    77c4:	bne.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    77c6:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    77ca:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    77cc:	movs	r2, #0
    index += index >> 1;
    77ce:	uxtah	r8, r8, r1
    77d2:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    77d6:	ubfx	r8, r8, #9, #7
    77da:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    77dc:	mov	r1, r8
    77de:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    77e2:	cmp	r0, #0
    77e4:	beq.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    77e6:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    77ea:	ldrb	r5, [r0, r3]
    index++;
    77ec:	adds	r3, #1
    if (index == m_bytesPerSector) {
    77ee:	cmp.w	r3, #512	; 0x200
    77f2:	bne.n	7806 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    77f4:	movs	r2, #0
    77f6:	add.w	r1, r8, #1
    77fa:	mov	r0, r6
    77fc:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7800:	cmp	r0, #0
    7802:	beq.n	7768 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7804:	movs	r3, #0
    tmp |= pc[index] << 8;
    7806:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7808:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    780a:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    780e:	ite	mi
    7810:	lsrmi	r3, r3, #4
    7812:	ubfxpl	r3, r3, #0, #12
    7816:	b.n	7794 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007818 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7818:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    781a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    781e:	mov	r8, r0
    7820:	mov	r4, r1
    7822:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7824:	bhi.n	782c <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7826:	movs	r0, #0
}
    7828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    782c:	ldr	r3, [r0, #28]
    782e:	cmp	r3, r1
    7830:	bcc.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7832:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7834:	cmp	r3, #32
    7836:	bne.n	7854 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7838:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    783a:	movs	r2, #1
    783c:	add.w	r1, r1, r4, lsr #7
    7840:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7844:	cmp	r0, #0
    7846:	beq.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7848:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    784a:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    784e:	str	r5, [r0, r4]
    return true;
    7850:	movs	r0, #1
    7852:	b.n	7828 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7854:	cmp	r3, #16
    7856:	bne.n	7874 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7858:	ubfx	r1, r1, #8, #8
    785c:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    785e:	movs	r2, #1
    7860:	add	r1, r3
    7862:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7866:	cmp	r0, #0
    7868:	beq.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    786a:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    786c:	and.w	r4, r4, #510	; 0x1fe
    7870:	strh	r5, [r0, r4]
    return true;
    7872:	b.n	7850 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7874:	cmp	r3, #12
    7876:	bne.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7878:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    787c:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    787e:	movs	r2, #1
    index += index >> 1;
    7880:	uxtah	r7, r7, r1
    7884:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7886:	ubfx	r7, r7, #9, #7
    788a:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    788c:	mov	r1, r7
    788e:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7892:	cmp	r0, #0
    7894:	beq.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7896:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    789a:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    789e:	itt	ne
    78a0:	lslne	r2, r5, #4
    78a2:	ldrbne	r1, [r0, r3]
    78a4:	add.w	r6, r0, r3
    index++;
    78a8:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    78ac:	ittet	ne
    78ae:	andne.w	r2, r2, #240	; 0xf0
    78b2:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    78b6:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    78b8:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    78ba:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    78be:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    78c0:	bne.n	78d2 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    78c2:	movs	r2, #1
    78c4:	mov	r0, r8
    78c6:	adds	r1, r7, r2
    78c8:	bl	7748 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    78cc:	cmp	r0, #0
    78ce:	beq.n	7826 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    78d0:	movs	r3, #0
    tmp = value >> 4;
    78d2:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    78d6:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    78d8:	cbnz	r4, 78e4 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    78da:	ldrb	r3, [r0, r3]
    78dc:	bic.w	r3, r3, #15
    78e0:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    78e4:	strb	r5, [r2, #0]
    78e6:	b.n	7850 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

000078e8 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    78e8:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    78ec:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    78ee:	mov	r5, r0
    78f0:	mov	r6, r1
    78f2:	mov	r8, r2
  if (m_allocSearchStart < current) {
    78f4:	cmp	r4, r1
    78f6:	bcc.n	78fc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    78f8:	movs	r7, #1
    78fa:	b.n	7900 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    78fc:	mov	r4, r1
    setStart = false;
    78fe:	movs	r7, #0
    find++;
    7900:	adds	r4, #1
    if (find > m_lastCluster) {
    7902:	ldr	r3, [r5, #28]
    7904:	cmp	r3, r4
    7906:	bcs.n	790e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7908:	cbnz	r7, 793c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    790a:	ldr	r4, [r5, #12]
    790c:	b.n	78f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    790e:	cmp	r6, r4
    7910:	beq.n	793c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    7912:	add	r2, sp, #4
    7914:	mov	r1, r4
    7916:	mov	r0, r5
    7918:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    791c:	cmp	r0, #0
    791e:	blt.n	793c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    7920:	beq.n	7900 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7922:	ldr	r3, [sp, #4]
    7924:	cmp	r3, #0
    7926:	bne.n	7900 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    7928:	cbz	r7, 792c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    792a:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    792c:	mvn.w	r2, #4026531840	; 0xf0000000
    7930:	mov	r1, r4
    7932:	mov	r0, r5
    7934:	bl	7818 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7938:	mov	r7, r0
    793a:	cbnz	r0, 7946 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    793c:	movs	r7, #0
}
    793e:	mov	r0, r7
    7940:	add	sp, #8
    7942:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    7946:	cbnz	r6, 7954 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7948:	ldr	r3, [r5, #36]	; 0x24
    794a:	cmp	r3, #0
    794c:	bge.n	7964 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    794e:	str.w	r4, [r8]
  return true;
    7952:	b.n	793e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    7954:	mov	r2, r4
    7956:	mov	r1, r6
    7958:	mov	r0, r5
    795a:	bl	7818 <FatPartition::fatPut(unsigned long, unsigned long)>
    795e:	cmp	r0, #0
    7960:	bne.n	7948 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7962:	b.n	793c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7964:	subs	r3, #1
    7966:	str	r3, [r5, #36]	; 0x24
    7968:	b.n	794e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

0000796a <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    796a:	push	{r0, r1, r4, r5, r6, lr}
    796c:	mov	r5, r0
    796e:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7970:	add	r2, sp, #4
    7972:	mov	r1, r4
    7974:	mov	r0, r5
    7976:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    797a:	subs	r6, r0, #0
    797c:	blt.n	79aa <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    797e:	movs	r2, #0
    7980:	mov	r1, r4
    7982:	mov	r0, r5
    7984:	bl	7818 <FatPartition::fatPut(unsigned long, unsigned long)>
    7988:	cbz	r0, 79aa <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    798a:	ldr	r3, [r5, #36]	; 0x24
    798c:	cmp	r3, #0
      m_freeClusterCount += change;
    798e:	itt	ge
    7990:	addge	r3, #1
    7992:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7994:	ldr	r3, [r5, #12]
    7996:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7998:	itt	hi
    799a:	addhi.w	r4, r4, #4294967295
    799e:	strhi	r4, [r5, #12]
    cluster = next;
    79a0:	ldr	r4, [sp, #4]
  } while (fg);
    79a2:	cmp	r6, #0
    79a4:	bne.n	7970 <FatPartition::freeChain(unsigned long)+0x6>
}
    79a6:	add	sp, #8
    79a8:	pop	{r4, r5, r6, pc}
  return false;
    79aa:	movs	r0, #0
    79ac:	b.n	79a6 <FatPartition::freeChain(unsigned long)+0x3c>
	...

000079b0 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    79b0:	push	{r4, r5, r6, r7, lr}
    79b2:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    79b4:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    79b6:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    79b8:	cmp	r0, #0
    79ba:	bge.n	7a2e <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    79bc:	ldrb	r3, [r4, #7]
    79be:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    79c0:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    79c2:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    79c4:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    79c8:	beq.n	7a32 <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    79ca:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    79ce:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    79d0:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    79d2:	strd	r6, r5, [sp, #16]
    79d6:	bmi.n	7a36 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    79d8:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    79da:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    79dc:	ldr	r0, [r4, #0]
    79de:	add	r6, sp, #16
    79e0:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    79e4:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    79e6:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    79ea:	ldr	r1, [r4, #24]
    79ec:	ldr	r5, [r0, #0]
    79ee:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    79f2:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    79f6:	bne.n	7a48 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    79f8:	str	r6, [sp, #4]
    79fa:	ldr	r6, [pc, #84]	; (7a50 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    79fc:	str	r6, [sp, #0]
    79fe:	ldr	r5, [r5, #24]
    7a00:	blx	r5
    7a02:	cbz	r0, 7a18 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7a04:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7a06:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7a08:	b.n	7a2e <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    7a0a:	add	r2, sp, #16
    7a0c:	mov	r1, r7
    7a0e:	mov	r0, r4
    7a10:	bl	775a <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7a14:	cmp	r0, #0
    7a16:	bge.n	7a1e <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    7a18:	mov.w	r0, #4294967295
    7a1c:	b.n	7a2e <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    7a1e:	beq.n	7a26 <FatPartition::freeClusterCount()+0x76>
    7a20:	ldr	r3, [sp, #16]
    7a22:	cbnz	r3, 7a26 <FatPartition::freeClusterCount()+0x76>
        free++;
    7a24:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7a26:	adds	r7, #1
    7a28:	cmp	r7, r6
    7a2a:	bcc.n	7a0a <FatPartition::freeClusterCount()+0x5a>
    return free;
    7a2c:	mov	r0, r5
}
    7a2e:	add	sp, #28
    7a30:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7a32:	movs	r7, #2
    7a34:	b.n	7a28 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    7a36:	add.w	r0, r4, #568	; 0x238
    7a3a:	str	r3, [sp, #12]
    7a3c:	bl	51d0 <FsCache::sync()>
    7a40:	ldr	r3, [sp, #12]
    7a42:	cmp	r0, #0
    7a44:	bne.n	79d8 <FatPartition::freeClusterCount()+0x28>
    7a46:	b.n	7a18 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7a48:	str	r6, [sp, #4]
    7a4a:	ldr	r6, [pc, #8]	; (7a54 <FatPartition::freeClusterCount()+0xa4>)
    7a4c:	b.n	79fc <FatPartition::freeClusterCount()+0x4c>
    7a4e:	nop
    7a50:	.word	0x0000771f
    7a54:	.word	0x000076f1

00007a58 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a58:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7a5a:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7a5c:	mov	r4, r0
  m_blockDev = dev;
    7a5e:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7a60:	mov	r5, r2
  m_fatType = 0;
    7a62:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7a64:	movs	r0, #1
  m_cache.init(dev);
    7a66:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7a6a:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7a6c:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7a6e:	mov.w	r0, #4294967295
    m_status = 0;
    7a72:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7a76:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7a78:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7a7c:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7a80:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7a84:	cbz	r2, 7aba <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7a86:	cmp	r2, #4
    7a88:	bls.n	7a8e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7a8a:	movs	r0, #0
}
    7a8c:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7a8e:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7a92:	mov	r2, r3
    7a94:	mov	r1, r3
    7a96:	mov	r0, r6
    7a98:	subs	r5, #1
    7a9a:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
    7a9e:	add.w	r3, r0, #446	; 0x1be
    7aa2:	lsls	r2, r5, #4
    7aa4:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7aa8:	cmp	r0, #0
    7aaa:	beq.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7aac:	ldrb	r1, [r5, #4]
    7aae:	cmp	r1, #0
    7ab0:	beq.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7ab2:	ldrb	r3, [r3, r2]
    7ab4:	lsls	r3, r3, #25
    7ab6:	bne.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7ab8:	ldr	r5, [r5, #8]
    7aba:	movs	r2, #0
    7abc:	mov	r1, r5
    7abe:	mov	r0, r6
    7ac0:	bl	521e <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7ac4:	cmp	r0, #0
    7ac6:	beq.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7ac8:	ldrh.w	r3, [r0, #11]
    7acc:	cmp.w	r3, #512	; 0x200
    7ad0:	bne.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7ad2:	ldrb	r3, [r0, #16]
    7ad4:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7ad6:	subs	r3, #1
    7ad8:	cmp	r3, #1
    7ada:	bhi.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7adc:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7ade:	movs	r6, #9
    7ae0:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7ae2:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7ae4:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7ae6:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7ae8:	movs	r3, #1
    7aea:	cmp	r1, r3
    7aec:	bne.n	7b56 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    7aee:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7af0:	ldrh	r3, [r0, #22]
    7af2:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7af4:	cbnz	r3, 7afa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7af6:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7af8:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7afa:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    7afc:	ldrh.w	r1, [r0, #17]
    7b00:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7b02:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7b04:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7b06:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7b08:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7b0a:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7b0c:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7b10:	mla	r3, r6, r7, r3
    7b14:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    7b16:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    7b1a:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    7b1e:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    7b20:	cbnz	r1, 7b24 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    7b22:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7b24:	subs	r5, r5, r3
    7b26:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    7b28:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    7b2a:	adds	r3, r5, #1
    7b2c:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    7b2e:	mov.w	r3, #4294967295
    7b32:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    7b34:	movw	r3, #4084	; 0xff4
    7b38:	cmp	r5, r3
    7b3a:	bls.n	7b68 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    7b3c:	movw	r3, #65524	; 0xfff4
    7b40:	cmp	r5, r3
    7b42:	bls.n	7b6c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    7b44:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7b46:	str	r3, [r4, #32]
    7b48:	movs	r3, #32
  return true;
    7b4a:	movs	r0, #1
    m_fatType = 12;
    7b4c:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7b4e:	str	r6, [r4, #48]	; 0x30
    7b50:	str.w	r6, [r4, #576]	; 0x240
  return true;
    7b54:	b.n	7a8c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    7b56:	subs	r6, #1
    7b58:	bne.n	7b5e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7b5a:	strb	r2, [r4, #6]
    7b5c:	b.n	7a8a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7b5e:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7b60:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7b62:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7b64:	uxtb	r3, r3
    7b66:	b.n	7aea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7b68:	movs	r3, #12
    7b6a:	b.n	7b4a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7b6c:	movs	r3, #16
    7b6e:	b.n	7b4a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007b70 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7b70:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7b72:	add.w	r4, r0, #1096	; 0x448
    7b76:	sub	sp, #40	; 0x28
  FatFile() {}
    7b78:	movs	r3, #0
    7b7a:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    7b7c:	add	r0, sp, #4
    7b7e:	mov	r1, r4
    7b80:	str	r3, [sp, #4]
    7b82:	bl	70fc <FatFile::open(FatFile*, char const*, int)>
    7b86:	mov	r6, r0
    7b88:	cbz	r0, 7ba6 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    7b8a:	ldrb.w	r3, [sp, #4]
    7b8e:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7b92:	itett	ne
    7b94:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7b96:	moveq	r6, r3
  m_vwd = dir;
    7b98:	ldmiane	r5!, {r0, r1, r2, r3}
    7b9a:	stmiane	r4!, {r0, r1, r2, r3}
    7b9c:	itttt	ne
    7b9e:	ldmiane	r5!, {r0, r1, r2, r3}
    7ba0:	stmiane	r4!, {r0, r1, r2, r3}
    7ba2:	ldrne	r3, [r5, #0]
    7ba4:	strne	r3, [r4, #0]
}
    7ba6:	mov	r0, r6
    7ba8:	add	sp, #40	; 0x28
    7baa:	pop	{r4, r5, r6, pc}

00007bac <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    7bac:	subs	r1, r0, #1
    7bae:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7bb2:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7bb4:	lsls	r2, r0, #7
    7bb6:	orr.w	r2, r2, r0, lsr #1
    7bba:	ldrb.w	r0, [r1, #1]!
    7bbe:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7bc2:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7bc4:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7bc6:	bne.n	7bb4 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7bc8:	bx	lr

00007bca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7bca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7bce:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7bd0:	sub	sp, #52	; 0x34
    7bd2:	mov	r6, r2
    7bd4:	mov	r7, r0
    7bd6:	mov	r9, r1
    7bd8:	mov	r8, r3
  FatFile dir = *this;
    7bda:	add	r4, sp, #12
    7bdc:	ldmia	r5!, {r0, r1, r2, r3}
    7bde:	stmia	r4!, {r0, r1, r2, r3}
    7be0:	ldmia	r5!, {r0, r1, r2, r3}
    7be2:	stmia	r4!, {r0, r1, r2, r3}
    7be4:	ldr	r3, [r5, #0]
    7be6:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7be8:	movs	r4, #1
    next = begin;
    7bea:	ldr	r3, [r6, #0]
    7bec:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    7bee:	movs	r3, #0
    7bf0:	strh	r3, [r6, #12]
    7bf2:	cmp	r4, r8
    7bf4:	bls.n	7bfa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7bf6:	movs	r0, #1
    7bf8:	b.n	7c0c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7bfa:	sub.w	r1, r9, r4
    7bfe:	add	r0, sp, #12
    7c00:	uxth	r1, r1
    7c02:	bl	6930 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7c06:	mov	sl, r0
    7c08:	cbnz	r0, 7c12 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    7c0a:	movs	r0, #0
}
    7c0c:	add	sp, #52	; 0x34
    7c0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7c12:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    7c14:	uxtb	r2, r5
    7c16:	mov	r1, sl
    7c18:	mov	r0, r7
    7c1a:	bl	694a <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    7c1e:	ldrh	r3, [r6, #12]
    7c20:	mov	fp, r0
    7c22:	cbnz	r3, 7c34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    7c24:	ldrd	r2, r3, [r6, #4]
    7c28:	cmp	r2, r3
    7c2a:	bne.n	7c34 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    7c2c:	clz	r0, r0
    7c30:	lsrs	r0, r0, #5
    7c32:	b.n	7c0c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    7c34:	mov	r0, r6
    7c36:	bl	5314 <FsName::get16()>
    7c3a:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    7c3c:	mov	r0, fp
    7c3e:	bl	526c <toUpcase(unsigned short)>
    7c42:	ldr	r3, [sp, #4]
    7c44:	mov	fp, r0
    7c46:	mov	r0, r3
    7c48:	bl	526c <toUpcase(unsigned short)>
    7c4c:	cmp	fp, r0
    7c4e:	bne.n	7c0a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    7c50:	adds	r5, #1
    7c52:	cmp	r5, #13
    7c54:	bne.n	7c14 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7c56:	adds	r4, #1
    7c58:	uxtb	r4, r4
    7c5a:	b.n	7bf2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00007c5c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7c5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7c60:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7c62:	sub	sp, #52	; 0x34
    7c64:	mov	r4, r2
    7c66:	mov	r9, r1
    7c68:	mov	r7, r3
  FatFile dir = *this;
    7c6a:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7c6c:	mov.w	sl, #15
  FatFile dir = *this;
    7c70:	ldmia	r5!, {r0, r1, r2, r3}
    7c72:	stmia	r6!, {r0, r1, r2, r3}
    7c74:	ldmia	r5!, {r0, r1, r2, r3}
    7c76:	stmia	r6!, {r0, r1, r2, r3}
    7c78:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7c7a:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7c7e:	movs	r5, #1
  FatFile dir = *this;
    7c80:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7c82:	bl	7bac <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    7c86:	movs	r6, #0
    next = begin;
    7c88:	ldr	r3, [r4, #0]
    7c8a:	mov	r8, r0
    7c8c:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    7c8e:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7c90:	cmp	r5, r7
    7c92:	bls.n	7c9c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7c94:	movs	r0, #1

 fail:
  return false;
}
    7c96:	add	sp, #52	; 0x34
    7c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    7c9c:	sub.w	r1, r9, r5
    7ca0:	add	r0, sp, #12
    7ca2:	uxth	r1, r1
    7ca4:	bl	6930 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7ca8:	cmp	r0, #0
    7caa:	beq.n	7c96 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    7cac:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7cae:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7cb0:	mov.w	r1, #0
    7cb4:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7cb8:	ldrb.w	r3, [r2, #40]	; 0x28
    7cbc:	orr.w	r3, r3, #1
    7cc0:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7cc4:	ite	eq
    7cc6:	orreq.w	r3, r5, #64	; 0x40
    7cca:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    7ccc:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7cd0:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7cd2:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    7cd4:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7cd8:	strh	r1, [r0, #26]
    return !ls && next == end;
    7cda:	ldrh	r0, [r4, #12]
    7cdc:	cbnz	r0, 7d0a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    7cde:	ldrd	r2, r3, [r4, #4]
    7ce2:	cmp	r2, r3
    7ce4:	bne.n	7d0a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    7ce6:	cbz	r6, 7d16 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    7ce8:	adds	r6, #1
    7cea:	movw	r0, #65535	; 0xffff
    7cee:	uxtb	r6, r6
  if (i < 5) {
    7cf0:	cmp	r1, #4
    7cf2:	uxtb	r3, r1
    7cf4:	bhi.n	7d1a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    7cf6:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    7cfa:	adds	r1, #1
    7cfc:	add.w	fp, fp, #2
    7d00:	cmp	r1, #13
    7d02:	bne.n	7cda <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7d04:	adds	r5, #1
    7d06:	uxtb	r5, r5
    7d08:	b.n	7c90 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    7d0a:	mov	r0, r4
    7d0c:	str	r1, [sp, #4]
    7d0e:	bl	5314 <FsName::get16()>
    7d12:	ldr	r1, [sp, #4]
    7d14:	b.n	7cf0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    7d16:	movs	r6, #1
    7d18:	b.n	7cf0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    7d1a:	cmp	r3, #10
    7d1c:	ite	ls
    7d1e:	strhls.w	r0, [fp, #3]
    7d22:	strhhi.w	r0, [fp, #5]
}
    7d26:	b.n	7cfa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00007d28 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    7d28:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    7d2a:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    7d2e:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    7d32:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    7d36:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    7d38:	mov	r5, r0
    fname->sfn[k] = ' ';
    7d3a:	str.w	r1, [r0, #22]
    7d3e:	str	r1, [r2, #4]
    7d40:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    7d44:	ldrb	r0, [r3, #0]
    7d46:	subs	r0, #46	; 0x2e
    7d48:	it	ne
    7d4a:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    7d4c:	mov	r7, r3
    7d4e:	ldrb.w	r2, [r3], #1
    7d52:	cmp	r2, #46	; 0x2e
    7d54:	beq.n	7d4c <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    7d56:	subs	r3, r6, #1
    7d58:	cmp	r3, r7
    7d5a:	mov	lr, r3
    7d5c:	bls.n	7d66 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    7d5e:	ldrb.w	r2, [r3], #-1
    7d62:	cmp	r2, #46	; 0x2e
    7d64:	bne.n	7d58 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7d66:	movs	r2, #0
    7d68:	mov.w	ip, #7
    7d6c:	mov.w	r9, #8
    7d70:	mov	r1, r2
    7d72:	mov	r8, r2
    7d74:	b.n	7d8c <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    7d76:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7d78:	cmp	r3, #46	; 0x2e
    7d7a:	bne.n	7da8 <FatFile::makeSFN(FatLfn_t*)+0x80>
    7d7c:	cmp	lr, r7
    7d7e:	bne.n	7dc4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7d80:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7d84:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7d86:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    7d8a:	adds	r7, #1
    7d8c:	cmp	r7, r6
    7d8e:	bcc.n	7d76 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7d90:	ldrb	r3, [r5, #22]
    7d92:	cmp	r3, #32
    7d94:	beq.n	7e48 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7d96:	cmp	r0, #0
    7d98:	beq.n	7e34 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    7d9a:	tst.w	r8, r2
    7d9e:	it	ne
    7da0:	movne	r2, #2
    7da2:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    7da4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7da8:	cmp	r3, #34	; 0x22
    7daa:	beq.n	7dc4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7dac:	cmp	r3, #124	; 0x7c
    7dae:	beq.n	7dc4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7db0:	sub.w	r4, r3, #91	; 0x5b
    7db4:	cmp	r4, #2
    7db6:	bls.n	7dc4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7db8:	sub.w	r4, r3, #42	; 0x2a
    7dbc:	cmp	r4, #5
    7dbe:	bhi.n	7dce <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7dc0:	cmp	r3, #45	; 0x2d
    7dc2:	beq.n	7dea <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    7dc4:	cmp	r1, ip
    7dc6:	bhi.n	7dee <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7dc8:	movs	r0, #0
        c = '_';
    7dca:	movs	r3, #95	; 0x5f
    7dcc:	b.n	7e10 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    7dce:	sub.w	r4, r3, #58	; 0x3a
    7dd2:	cmp	r4, #5
    7dd4:	bls.n	7dde <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    7dd6:	sub.w	r4, r3, #33	; 0x21
    7dda:	cmp	r4, #93	; 0x5d
    7ddc:	bls.n	7dea <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    7dde:	and.w	r3, r3, #192	; 0xc0
    7de2:	cmp	r3, #128	; 0x80
    7de4:	bne.n	7dc4 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    7de6:	movs	r0, #0
    7de8:	b.n	7d8a <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    7dea:	cmp	r1, ip
    7dec:	bls.n	7dfe <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    7dee:	cmp.w	ip, #10
    7df2:	beq.n	7e30 <FatFile::makeSFN(FatLfn_t*)+0x108>
    7df4:	cmp	lr, r7
    7df6:	bcc.n	7e30 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    7df8:	add.w	r7, lr, #4294967295
        continue;
    7dfc:	b.n	7de6 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    7dfe:	sub.w	r4, r3, #97	; 0x61
    7e02:	cmp	r4, #25
    7e04:	bhi.n	7e22 <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    7e06:	subs	r3, #32
        lc |= bit;
    7e08:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    7e0c:	uxtb	r3, r3
        lc |= bit;
    7e0e:	uxtb	r2, r2
      fname->sfn[i++] = c;
    7e10:	adds	r4, r1, #1
    7e12:	add	r1, r5
    7e14:	uxtb	r4, r4
    7e16:	strb	r3, [r1, #22]
      if (i < 7) {
    7e18:	cmp	r4, #6
    7e1a:	bhi.n	7e1e <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    7e1c:	strb	r4, [r5, #20]
    7e1e:	mov	r1, r4
    7e20:	b.n	7d8a <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    7e22:	sub.w	r4, r3, #65	; 0x41
    7e26:	cmp	r4, #25
        uc |= bit;
    7e28:	it	ls
    7e2a:	orrls.w	r8, r9, r8
    7e2e:	b.n	7e10 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    7e30:	movs	r0, #0
    7e32:	b.n	7d90 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    7e34:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7e36:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    7e38:	movs	r1, #126	; 0x7e
    7e3a:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    7e3c:	strb	r2, [r5, #21]
  return true;
    7e3e:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    7e40:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    7e42:	movs	r1, #49	; 0x31
    7e44:	strb	r1, [r3, #23]
    7e46:	b.n	7da4 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    7e48:	movs	r0, #0
    7e4a:	b.n	7da4 <FatFile::makeSFN(FatLfn_t*)+0x7c>

00007e4c <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    7e4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7e50:	mov	r7, r0
    7e52:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    7e54:	ldrb	r6, [r1, #20]
    7e56:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    7e58:	mov.w	sl, #0
    7e5c:	ldr.w	r8, [pc, #128]	; 7ee0 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7e60:	add.w	r9, r1, #22
    7e64:	ldr.w	r3, [r8]
    7e68:	cmp	r6, #3
    hex += millis();
    7e6a:	add	r3, sl
    7e6c:	it	cs
    7e6e:	movcs	r6, #3
    7e70:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7e74:	adds	r3, r6, #4
    7e76:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7e78:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7e7c:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7e7e:	subs	r3, #1
      hex >>= 4;
    7e80:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7e84:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7e86:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7e88:	ite	ls
    7e8a:	addls	r2, #48	; 0x30
    7e8c:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7e8e:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7e90:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7e92:	bne.n	7e78 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    7e94:	adds	r3, r5, r6
    7e96:	movs	r2, #126	; 0x7e
    seekSet(0);
    7e98:	movs	r1, #0
    7e9a:	mov	r0, r7
    7e9c:	strb	r2, [r3, #22]
    7e9e:	bl	6e22 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7ea2:	movs	r1, #1
    7ea4:	mov	r0, r7
    7ea6:	bl	6de4 <FatFile::readDirCache(bool)>
      if (!dir) {
    7eaa:	mov	r1, r0
    7eac:	cbnz	r0, 7eba <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    7eae:	ldrb	r0, [r7, #1]
    7eb0:	clz	r0, r0
    7eb4:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    7eb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    7eba:	ldrb	r3, [r0, #0]
    7ebc:	cbz	r3, 7edc <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7ebe:	ldrb	r3, [r0, #11]
    7ec0:	lsls	r3, r3, #28
    7ec2:	bmi.n	7ea2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    7ec4:	movs	r2, #11
    7ec6:	mov	r0, r9
    7ec8:	bl	e64c <memcmp>
    7ecc:	cmp	r0, #0
    7ece:	bne.n	7ea2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7ed0:	subs	r0, r4, #1
    7ed2:	ands.w	r4, r0, #255	; 0xff
    7ed6:	bne.n	7e64 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    7ed8:	mov	r0, r4
 fail:
    7eda:	b.n	7eb6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    7edc:	movs	r0, #1
    7ede:	b.n	7eb6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    7ee0:	.word	0x20021374

00007ee4 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7ee4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7ee8:	vpush	{d8}
    7eec:	sub	sp, #44	; 0x2c
    7eee:	mov	r5, r1
    7ef0:	mov	r7, r2
    7ef2:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    7ef4:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7ef6:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    7ef8:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    7efa:	ldrb	r3, [r1, #0]
    7efc:	tst.w	r3, #112	; 0x70
    7f00:	bne.n	7f0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    7f02:	movs	r0, #0
}
    7f04:	add	sp, #44	; 0x2c
    7f06:	vpop	{d8}
    7f0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    7f0e:	ldr	r3, [sp, #28]
    7f10:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    7f12:	cmp	r3, #0
    7f14:	bne.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    7f16:	ldr	r3, [r2, #16]
    7f18:	movs	r2, #13
    seekSet(0);
    7f1a:	movs	r1, #0
    7f1c:	mov	r0, r5
    7f1e:	adds	r3, #12
  uint8_t checksum = 0;
    7f20:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    7f24:	udiv	r3, r3, r2
    7f28:	uxtb	r3, r3
  uint8_t order = 0;
    7f2a:	mov	r8, sl
  uint8_t freeFound = 0;
    7f2c:	mov	r4, sl
  bool fnameFound = false;
    7f2e:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    7f30:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7f32:	ldrb	r3, [r7, #21]
    7f34:	lsls	r2, r3, #30
    7f36:	itett	ne
    7f38:	ldrne	r3, [sp, #24]
    7f3a:	moveq	r3, #1
    7f3c:	addne.w	r9, r3, #1
    7f40:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    7f44:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    7f46:	str	r3, [sp, #8]
    7f48:	bl	6e22 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7f4c:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    7f50:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    7f54:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7f58:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    7f5a:	movs	r1, #0
    7f5c:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    7f5e:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    7f62:	bl	6de4 <FatFile::readDirCache(bool)>
    if (!dir) {
    7f66:	cmp	r0, #0
    7f68:	bne.n	802e <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    7f6a:	ldrb	r3, [r5, #1]
    7f6c:	cmp	r3, #0
    7f6e:	bne.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7f70:	ldr	r3, [sp, #16]
    7f72:	lsls	r2, r3, #22
    7f74:	bpl.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    7f76:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    7f7a:	subs	r3, #1
    7f7c:	cmp	r3, #1
    7f7e:	bhi.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    7f80:	ldr	r3, [sp, #12]
    7f82:	cmp	r4, #0
    7f84:	it	eq
    7f86:	moveq	r3, r6
    7f88:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    7f8a:	ldr	r3, [sp, #8]
    7f8c:	cmp	r4, r3
    7f8e:	bcc.w	8112 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    7f92:	cmp.w	fp, #0
    7f96:	bne.w	8148 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    7f9a:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7f9c:	mov	r2, r7
    7f9e:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    7fa0:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    7fa2:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    7fa4:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    7fa8:	uxtab	r6, r3, r6
    7fac:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    7fae:	mov	r3, fp
    7fb0:	mov	r1, r6
    7fb2:	bl	7c5c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7fb6:	cmp	r0, #0
    7fb8:	beq.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    7fba:	mov	r1, r6
    7fbc:	mov	r0, r5
    7fbe:	bl	6930 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    7fc2:	mov	r4, r0
    7fc4:	cmp	r0, #0
    7fc6:	beq.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    7fc8:	movs	r2, #32
    7fca:	movs	r1, #0
    7fcc:	bl	9d8c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7fd0:	ldr.w	r3, [r7, #22]
    7fd4:	str	r3, [r4, #0]
    7fd6:	ldr.w	r3, [r7, #26]
    7fda:	str	r3, [r4, #4]
    7fdc:	ldrh	r3, [r7, #30]
    7fde:	strh	r3, [r4, #8]
    7fe0:	ldrb.w	r3, [r7, #32]
    7fe4:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7fe6:	ldrb	r3, [r7, #21]
    7fe8:	and.w	r3, r3, #24
    7fec:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    7fee:	ldr	r3, [pc, #372]	; (8164 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    7ff0:	ldr	r3, [r3, #0]
    7ff2:	cmp	r3, #0
    7ff4:	beq.w	8158 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    7ff8:	add.w	r2, sp, #35	; 0x23
    7ffc:	add.w	r1, sp, #38	; 0x26
    8000:	add	r0, sp, #36	; 0x24
    8002:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8004:	ldrh.w	r3, [sp, #36]	; 0x24
    8008:	strh	r3, [r4, #16]
    800a:	ldrh.w	r3, [sp, #38]	; 0x26
    800e:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8010:	ldrb.w	r3, [sp, #35]	; 0x23
    8014:	strb	r3, [r4, #13]
    8016:	ldr	r3, [sp, #20]
    8018:	ldr	r2, [sp, #20]
    801a:	ldrb.w	r3, [r3, #40]	; 0x28
    801e:	orr.w	r3, r3, #1
    8022:	strb.w	r3, [r2, #40]	; 0x28
  }
    8026:	b.n	8100 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    8028:	mov.w	fp, #1
    802c:	b.n	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    802e:	ldrb	r2, [r0, #0]
    8030:	cmp	r2, #229	; 0xe5
    8032:	beq.n	8036 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    8034:	cbnz	r2, 8058 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8036:	ldr	r3, [sp, #12]
    8038:	cmp	r4, #0
    803a:	it	eq
    803c:	moveq	r3, r6
    803e:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    8040:	ldr	r3, [sp, #8]
    8042:	cmp	r4, r3
        freeFound++;
    8044:	itt	cc
    8046:	addcc	r4, #1
    8048:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    804a:	cmp	r2, #0
    804c:	beq.n	7f70 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    804e:	cmp	r2, #229	; 0xe5
    8050:	bne.n	8060 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    8052:	mov.w	r9, #0
    8056:	b.n	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    8058:	ldr	r3, [sp, #8]
    805a:	cmp	r4, r3
    805c:	it	cc
    805e:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8060:	cmp	r2, #46	; 0x2e
    8062:	beq.n	8052 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8064:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    8066:	cmp	r1, #15
    8068:	bne.n	80be <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    806a:	cmp.w	r9, #0
    806e:	bne.n	80aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    8070:	and.w	r8, r2, #31
        if (order != nameOrd ||
    8074:	ldr	r3, [sp, #24]
    8076:	cmp	r3, r8
    8078:	bne.w	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    807c:	ands.w	r9, r2, #64	; 0x40
    8080:	beq.w	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    8084:	ldrb.w	sl, [r0, #13]
    8088:	mov	r9, r3
      if (order == 1) {
    808a:	cmp.w	r8, #1
    808e:	bne.w	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8092:	adds	r1, r6, #1
    8094:	mov	r3, r9
    8096:	mov	r2, r7
    8098:	mov	r0, r5
    809a:	uxth	r1, r1
    809c:	bl	7bca <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    80a0:	cmp	r0, #0
    80a2:	it	eq
    80a4:	moveq.w	r9, #0
    80a8:	b.n	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    80aa:	add.w	r8, r8, #4294967295
    80ae:	uxtb.w	r8, r8
    80b2:	cmp	r2, r8
    80b4:	bne.n	8052 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    80b6:	ldrb	r2, [r0, #13]
    80b8:	cmp	r2, sl
    80ba:	beq.n	808a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    80bc:	b.n	8052 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    80be:	lsls	r3, r1, #28
    80c0:	bmi.n	8052 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    80c2:	cmp.w	r9, #0
    80c6:	beq.n	80de <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    80c8:	cmp.w	r8, #1
    80cc:	bne.w	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    80d0:	bl	7bac <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    80d4:	cmp	r0, sl
    80d6:	bne.w	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    80da:	mov	fp, r9
    80dc:	b.n	80f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    80de:	movs	r2, #11
    80e0:	vmov	r1, s16
    80e4:	bl	e64c <memcmp>
    80e8:	cmp	r0, #0
    80ea:	bne.w	7f58 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    80ee:	ldrb.w	fp, [r7, #21]
    80f2:	ands.w	fp, fp, #1
    80f6:	bne.n	8028 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    80f8:	ldr	r3, [sp, #16]
    80fa:	lsls	r1, r3, #20
    80fc:	bmi.w	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8100:	ldr	r3, [sp, #16]
    8102:	mov	r2, r6
    8104:	mov	r1, r5
    8106:	ldr	r0, [sp, #28]
    8108:	str.w	fp, [sp]
    810c:	bl	6f0e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8110:	b.n	7f04 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    8112:	movs	r1, #0
    8114:	mov	r0, r5
    8116:	bl	6de4 <FatFile::readDirCache(bool)>
    if (!dir) {
    811a:	cbnz	r0, 8142 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    811c:	ldrb	r3, [r5, #1]
    811e:	cmp	r3, #0
    8120:	bne.w	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    8124:	mov	r0, r5
    8126:	bl	6b70 <FatFile::addDirCluster()>
    812a:	cmp	r0, #0
    812c:	beq.w	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8130:	ldr	r3, [sp, #20]
    8132:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    8134:	add.w	r3, r4, r3, lsl #4
    8138:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    813a:	ldr	r3, [sp, #8]
    813c:	cmp	r3, r4
    813e:	bhi.n	8124 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    8140:	b.n	7f92 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    8142:	adds	r4, #1
    8144:	uxtb	r4, r4
    8146:	b.n	7f8a <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8148:	mov	r1, r7
    814a:	mov	r0, r5
    814c:	bl	7e4c <FatFile::makeUniqueSfn(FatLfn_t*)>
    8150:	cmp	r0, #0
    8152:	bne.w	7f9a <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    8156:	b.n	7f02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8158:	movw	r3, #22561	; 0x5821
    815c:	strh	r3, [r4, #16]
    815e:	strh	r3, [r4, #24]
    8160:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8162:	b.n	8016 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    8164:	.word	0x200207fc

00008168 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8168:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    816a:	mov	r4, r2
    816c:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    816e:	mov	r0, r1
    8170:	ldrb.w	r3, [r1], #1
    8174:	cmp	r3, #32
    8176:	beq.n	816e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8178:	movs	r5, #0
    817a:	ldr	r7, [pc, #148]	; (8210 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    817c:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    817e:	ldrb	r3, [r0, #0]
    8180:	cbnz	r3, 81d0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8182:	ldr	r3, [r4, #16]
    8184:	subs	r3, #1
    8186:	cmp	r3, #254	; 0xfe
    8188:	bhi.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    818a:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    818c:	ldrb.w	r3, [r0], #1
    8190:	cmp	r3, #32
    8192:	beq.n	818a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8194:	cmp	r3, #47	; 0x2f
    8196:	beq.n	818a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8198:	mov	r0, r4
  *ptr = path;
    819a:	str	r2, [r6, #0]

 fail:
  return false;
}
    819c:	add	sp, #12
    819e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    81a2:	b.w	7d28 <FatFile::makeSFN(FatLfn_t*)>
    81a6:	subs	r1, #34	; 0x22
    81a8:	uxtb	r1, r1
    81aa:	lsr.w	r1, r7, r1
    81ae:	lsls	r2, r1, #31
    81b0:	bpl.n	820a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    81b2:	movs	r0, #0
    81b4:	add	sp, #12
    81b6:	pop	{r4, r5, r6, r7, pc}
    81b8:	cmp	r1, #92	; 0x5c
    81ba:	beq.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    81bc:	bhi.n	81ca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    81be:	subs	r1, #62	; 0x3e
    81c0:	cmp	r1, #1
    81c2:	bls.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    81c4:	str	r5, [r4, #16]
      fname->end = path;
    81c6:	str	r0, [r4, #8]
    81c8:	b.n	817e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    81ca:	cmp	r1, #124	; 0x7c
    81cc:	beq.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    81ce:	b.n	81c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    81d0:	cmp	r3, #47	; 0x2f
    81d2:	beq.n	8182 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    81d4:	add	r2, sp, #4
    81d6:	adds	r1, r0, #4
    81d8:	bl	5148 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    81dc:	cmp	r0, #0
    81de:	beq.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    81e0:	ldr	r3, [sp, #4]
    81e2:	cmp.w	r3, #65536	; 0x10000
    81e6:	ite	cc
    81e8:	movcc	r2, #1
    81ea:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    81ec:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    81ee:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    81f0:	bhi.n	81c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    81f2:	cmp	r3, #60	; 0x3c
    81f4:	uxtb	r1, r3
    81f6:	bhi.n	81b8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    81f8:	cmp	r1, #33	; 0x21
    81fa:	bhi.n	81a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    81fc:	cmp	r1, #31
    81fe:	bls.n	81b2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8200:	cmp	r3, #46	; 0x2e
    8202:	beq.n	817e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8204:	cmp	r3, #32
    8206:	beq.n	817e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8208:	b.n	81c4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    820a:	cmp	r3, #46	; 0x2e
    820c:	b.n	8206 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    820e:	nop
    8210:	.word	0x05002101

00008214 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8214:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8218:	movs	r3, #0
    821a:	sub	sp, #40	; 0x28
    821c:	mov	r4, r0
    821e:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8220:	ldrb	r3, [r0, #2]
    8222:	lsls	r2, r3, #30
    8224:	bmi.n	822e <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8226:	movs	r0, #0
}
    8228:	add	sp, #40	; 0x28
    822a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    822e:	ldr	r1, [r0, #32]
    8230:	cmp	r1, #0
    8232:	bne.n	82c0 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8234:	movs	r1, #1
    8236:	mov	r0, r4
    8238:	bl	6be0 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    823c:	mov	r5, r0
    823e:	cmp	r0, #0
    8240:	beq.n	8226 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    8242:	bl	7bac <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    8246:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8248:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    824a:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    824c:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    824e:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8250:	ldr	r0, [r4, #8]
  m_flags = 0;
    8252:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    8254:	bl	6b14 <FatPartition::cacheSync()>
    8258:	cmp	r0, #0
    825a:	beq.n	8226 <FatFile::remove()+0x12>
  if (!isLFN()) {
    825c:	ldrb	r3, [r4, #3]
    825e:	cmp	r3, #0
    8260:	beq.n	8228 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    8262:	mov	r1, r4
    8264:	add	r0, sp, #4
    8266:	bl	6c0a <FatFile::openCluster(FatFile*)>
    826a:	cmp	r0, #0
    826c:	beq.n	8226 <FatFile::remove()+0x12>
    826e:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8270:	uxtb.w	r8, r5
    8274:	ldrb	r3, [r4, #3]
    8276:	cmp	r3, r8
    8278:	bcc.n	8226 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    827a:	ldrh	r1, [r4, #4]
    827c:	add	r0, sp, #4
    827e:	subs	r1, r1, r5
    8280:	uxth	r1, r1
    8282:	bl	6930 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8286:	cmp	r0, #0
    8288:	beq.n	8226 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    828a:	ldrb	r3, [r0, #11]
    828c:	cmp	r3, #15
    828e:	bne.n	8226 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8290:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8292:	and.w	r3, r2, #31
    8296:	cmp	r3, r8
    8298:	bne.n	8226 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    829a:	ldrb	r3, [r0, #13]
    829c:	cmp	r3, r6
    829e:	bne.n	8226 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    82a0:	strb	r7, [r0, #0]
    if (last) {
    82a2:	adds	r5, #1
    m_vol->cacheDirty();
    82a4:	ldr	r1, [r4, #8]
    if (last) {
    82a6:	uxth	r5, r5
    82a8:	ldrb.w	r3, [r1, #40]	; 0x28
    82ac:	orr.w	r3, r3, #1
    82b0:	strb.w	r3, [r1, #40]	; 0x28
    82b4:	lsls	r3, r2, #25
    82b6:	bpl.n	8270 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    82b8:	ldr	r0, [r4, #8]
    82ba:	bl	6b14 <FatPartition::cacheSync()>
    82be:	b.n	8228 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    82c0:	ldr	r0, [r0, #8]
    82c2:	bl	796a <FatPartition::freeChain(unsigned long)>
    82c6:	cmp	r0, #0
    82c8:	bne.n	8234 <FatFile::remove()+0x20>
    82ca:	b.n	8226 <FatFile::remove()+0x12>

000082cc <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    82cc:	push	{r4, lr}
    82ce:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    82d0:	ldr	r0, [r0, #56]	; 0x38
    82d2:	cbz	r0, 82e0 <FsBaseFile::close()+0x14>
    82d4:	bl	70ec <FatFile::close()>
    82d8:	cbz	r0, 82e0 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    82da:	movs	r3, #0
    82dc:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    82de:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    82e0:	ldr	r0, [r4, #60]	; 0x3c
    82e2:	cbnz	r0, 82e8 <FsBaseFile::close()+0x1c>
  return false;
    82e4:	movs	r0, #0
    82e6:	b.n	82de <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    82e8:	bl	54ee <ExFatFile::close()>
    82ec:	cmp	r0, #0
    82ee:	beq.n	82e4 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    82f0:	movs	r3, #0
    82f2:	str	r3, [r4, #60]	; 0x3c
    return true;
    82f4:	b.n	82de <FsBaseFile::close()+0x12>

000082f6 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    82f6:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    82f8:	push	{r4, r5, r6, lr}
    82fa:	mov	r6, r0
    82fc:	mov	r5, r1
  if (this == &from) return *this;
    82fe:	beq.n	8328 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8300:	bl	82cc <FsBaseFile::close()>
  if (from.m_fFile) {
    8304:	ldr	r4, [r5, #56]	; 0x38
    8306:	cbz	r4, 832c <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8308:	mov	r1, r6
    830a:	movs	r0, #36	; 0x24
    830c:	bl	8528 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8310:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8312:	mov	r4, r0
    8314:	strh	r3, [r0, #0]
    8316:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8318:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    831a:	ldr	r5, [r5, #56]	; 0x38
    831c:	ldmia	r5!, {r0, r1, r2, r3}
    831e:	stmia	r4!, {r0, r1, r2, r3}
    8320:	ldmia	r5!, {r0, r1, r2, r3}
    8322:	stmia	r4!, {r0, r1, r2, r3}
    8324:	ldr	r3, [r5, #0]
    8326:	str	r3, [r4, #0]
}
    8328:	mov	r0, r6
    832a:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    832c:	ldr	r3, [r5, #60]	; 0x3c
    832e:	cmp	r3, #0
    8330:	beq.n	8328 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    8332:	mov	r1, r6
    8334:	movs	r0, #56	; 0x38
    8336:	bl	8528 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    833a:	strb.w	r4, [r0, #49]	; 0x31
    833e:	strh	r4, [r0, #50]	; 0x32
    8340:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8342:	ldr	r3, [r5, #60]	; 0x3c
    8344:	add.w	r2, r3, #52	; 0x34
    8348:	ldr.w	r1, [r3], #4
    834c:	cmp	r3, r2
    834e:	str.w	r1, [r0], #4
    8352:	bne.n	8348 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    8354:	b.n	8328 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00008356 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8356:	push	{r0, r1, r4, r5, r6, lr}
    8358:	mov	r4, r0
  if (!vol) {
    835a:	mov	r5, r1
    835c:	cbnz	r1, 8364 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    835e:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8360:	add	sp, #8
    8362:	pop	{r4, r5, r6, pc}
    8364:	strd	r2, r3, [sp]
  close();
    8368:	bl	82cc <FsBaseFile::close()>
  if (vol->m_fVol) {
    836c:	ldr.w	r6, [r5, #1152]	; 0x480
    8370:	ldrd	r2, r3, [sp]
    8374:	cbz	r6, 839c <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    8376:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8378:	mov	r1, r4
    837a:	movs	r0, #36	; 0x24
    837c:	bl	8528 <operator new(unsigned int, unsigned long*)>
    8380:	strh	r6, [r0, #0]
    8382:	strb	r6, [r0, #2]
    8384:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    8386:	ldr.w	r1, [r5, #1152]	; 0x480
    838a:	ldrd	r2, r3, [sp]
    838e:	bl	719a <FatFile::open(FatVolume*, char const*, int)>
    8392:	cbz	r0, 8398 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8394:	movs	r0, #1
    8396:	b.n	8360 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8398:	str	r0, [r4, #56]	; 0x38
    839a:	b.n	8360 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    839c:	ldr.w	r1, [r5, #1156]	; 0x484
    83a0:	strd	r2, r3, [sp]
    83a4:	cmp	r1, #0
    83a6:	beq.n	835e <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    83a8:	mov	r1, r4
    83aa:	movs	r0, #56	; 0x38
    83ac:	bl	8528 <operator new(unsigned int, unsigned long*)>
    83b0:	strb.w	r6, [r0, #49]	; 0x31
    83b4:	strh	r6, [r0, #50]	; 0x32
    83b6:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    83b8:	ldr.w	r1, [r5, #1156]	; 0x484
    83bc:	ldrd	r2, r3, [sp]
    83c0:	bl	5c8e <ExFatFile::open(ExFatVolume*, char const*, int)>
    83c4:	cmp	r0, #0
    83c6:	bne.n	8394 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    83c8:	str	r0, [r4, #60]	; 0x3c
    83ca:	b.n	8360 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

000083cc <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    83cc:	push	{r0, r1, r4, r5, r6, lr}
    83ce:	mov	r5, r1
    83d0:	str	r2, [sp, #4]
    83d2:	mov	r4, r0
  close();
    83d4:	bl	82cc <FsBaseFile::close()>
  if (dir->m_fFile) {
    83d8:	ldr	r6, [r5, #56]	; 0x38
    83da:	ldr	r2, [sp, #4]
    83dc:	cbz	r6, 8402 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    83de:	mov	r1, r4
    83e0:	movs	r0, #36	; 0x24
    83e2:	bl	8528 <operator new(unsigned int, unsigned long*)>
    83e6:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    83e8:	ldr	r2, [sp, #4]
    83ea:	strh	r1, [r0, #0]
    83ec:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    83ee:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    83f0:	ldr	r1, [r5, #56]	; 0x38
    83f2:	bl	6fd0 <FatFile::openNext(FatFile*, int)>
    83f6:	cbz	r0, 83fe <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    83f8:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    83fa:	add	sp, #8
    83fc:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    83fe:	str	r0, [r4, #56]	; 0x38
    8400:	b.n	83fa <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8402:	ldr	r0, [r5, #60]	; 0x3c
    8404:	str	r2, [sp, #4]
    8406:	cmp	r0, #0
    8408:	beq.n	83fa <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    840a:	mov	r1, r4
    840c:	movs	r0, #56	; 0x38
    840e:	bl	8528 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8412:	ldr	r2, [sp, #4]
    8414:	strb.w	r6, [r0, #49]	; 0x31
    8418:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    841a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    841c:	ldr	r1, [r5, #60]	; 0x3c
    841e:	bl	5c9c <ExFatFile::openNext(ExFatFile*, int)>
    8422:	cmp	r0, #0
    8424:	bne.n	83f8 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    8426:	str	r0, [r4, #60]	; 0x3c
    8428:	b.n	83fa <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

0000842c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    842c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8430:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8432:	mov	r4, r0
    8434:	mov	r6, r3
  m_blockDev = blockDev;
    8436:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    843a:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    843e:	mov	r1, r0
    8440:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8444:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    8446:	bl	8528 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    844a:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    844c:	strb.w	r7, [r0, #1092]	; 0x444
    8450:	mov	r5, r0
    8452:	strb.w	r7, [r0, #1145]	; 0x479
    8456:	strh.w	r7, [r0, #1146]	; 0x47a
    845a:	str.w	r0, [r4, #1156]	; 0x484
    845e:	ldr.w	r1, [r4, #1160]	; 0x488
    8462:	ldr.w	r8, [pc, #152]	; 84fc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    8466:	bl	5fe0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    846a:	cbz	r0, 849c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    846c:	add.w	r7, r5, #1096	; 0x448
    8470:	mov	r0, r7
    8472:	bl	54ee <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8476:	mov	r1, r5
    8478:	mov	r0, r7
    847a:	bl	5542 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    847e:	cbz	r0, 849c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8480:	ldr	r3, [pc, #112]	; (84f4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8482:	ldr	r2, [r3, #0]
    8484:	cbnz	r2, 8488 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    8486:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8488:	cmp.w	r9, #0
    848c:	bne.n	8494 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    848e:	ldr.w	r3, [r8]
    8492:	cbnz	r3, 8498 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8494:	str.w	r4, [r8]
  }
  return true;
    8498:	movs	r0, #1
    849a:	b.n	84ee <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    849c:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    849e:	mov	r1, r4
    84a0:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    84a4:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    84a8:	bl	8528 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    84ac:	movs	r3, #2
    84ae:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    84b0:	mov	r2, r6
    84b2:	strb	r3, [r0, #8]
    84b4:	mov	r5, r0
    84b6:	strh.w	r7, [r0, #1096]	; 0x448
    84ba:	strb.w	r7, [r0, #1098]	; 0x44a
    84be:	str.w	r0, [r4, #1152]	; 0x480
    84c2:	ldr.w	r1, [r4, #1160]	; 0x488
    84c6:	bl	7a58 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    84ca:	cbz	r0, 84e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    84cc:	add.w	r6, r5, #1096	; 0x448
    84d0:	mov	r0, r6
    84d2:	bl	70ec <FatFile::close()>
    return m_vwd.openRoot(this);
    84d6:	mov	r1, r5
    84d8:	mov	r0, r6
    84da:	bl	6bfe <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    84de:	cbz	r0, 84e4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    84e0:	ldr	r3, [pc, #20]	; (84f8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    84e2:	b.n	8482 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    84e4:	movs	r0, #0
    84e6:	str.w	r0, [r8]
  m_fVol = nullptr;
    84ea:	str.w	r0, [r4, #1152]	; 0x480
}
    84ee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    84f2:	nop
    84f4:	.word	0x20020800
    84f8:	.word	0x20020838
    84fc:	.word	0x20020834

00008500 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8500:	push	{r3, r4, r5, lr}
    8502:	mov	r4, r0
    8504:	mov.w	r5, #1000	; 0x3e8
    8508:	movs	r0, #0
    850a:	strd	r0, r5, [r4, #4]
    850e:	strb	r0, [r4, #12]
    8510:	ldr	r5, [pc, #16]	; (8524 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8512:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8516:	mov	r0, r4
    8518:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    851c:	bl	8356 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8520:	mov	r0, r4
    8522:	pop	{r3, r4, r5, pc}
    8524:	.word	0x20000554

00008528 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8528:	mov	r0, r1
    852a:	bx	lr

0000852c <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    852c:	mov.w	r0, #4294967295
    8530:	bx	lr

00008532 <SharedSpiCard::errorCode() const>:
  }
    8532:	ldrb	r0, [r0, #17]
    8534:	bx	lr

00008536 <SharedSpiCard::errorData() const>:
  }
    8536:	ldrb	r0, [r0, #20]
    8538:	bx	lr

0000853a <SharedSpiCard::type() const>:
  }
    853a:	ldrb	r0, [r0, #21]
    853c:	bx	lr

0000853e <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    853e:	movs	r0, #1
    8540:	bx	lr

00008542 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    8542:	ldrb	r0, [r0, #28]
    8544:	bx	lr

00008546 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8546:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8548:	push	{r4}
  return readSectors(sector, dst, 1);
    854a:	ldr	r4, [r3, #20]
    854c:	movs	r3, #1
    854e:	mov	ip, r4
}
    8550:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    8554:	bx	ip

00008556 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8556:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8558:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    855a:	mov	r4, r0
    855c:	mov	r5, r1
  if (!syncDevice()) {
    855e:	ldr	r3, [r3, #32]
    8560:	blx	r3
    8562:	cbz	r0, 8566 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    8564:	strb	r5, [r4, #28]
  return true;
}
    8566:	pop	{r3, r4, r5, pc}

00008568 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8568:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    856c:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    856e:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8570:	mov	r4, r0
    8572:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8574:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8576:	mov	r6, r2
    8578:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    857c:	bne.n	8584 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    857e:	ldr	r3, [r0, #24]
    8580:	cmp	r3, r1
    8582:	beq.n	8598 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8584:	ldr	r3, [r4, #0]
    8586:	mov	r1, r5
    8588:	mov	r0, r4
    858a:	ldr	r3, [r3, #96]	; 0x60
    858c:	blx	r3
    858e:	cbnz	r0, 8596 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8590:	movs	r0, #0
}
    8592:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8596:	str	r5, [r4, #24]
    8598:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    859c:	cmp	r5, r8
    859e:	bne.n	85b8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    85a0:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    85a2:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    85a4:	add	r3, r6
    85a6:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    85a8:	cmp	r0, #0
    85aa:	bne.n	8592 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    85ac:	ldr	r3, [r4, #0]
    85ae:	mov	r0, r4
    85b0:	ldr	r3, [r3, #100]	; 0x64
}
    85b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    85b6:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    85b8:	mov	r1, r9
    85ba:	mov	r0, r5
    85bc:	blx	r7
    if (!writeData(src)) {
    85be:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    85c0:	mov	r1, r0
    if (!writeData(src)) {
    85c2:	mov	r0, r4
    85c4:	ldr	r3, [r3, #92]	; 0x5c
    85c6:	adds	r5, #1
    85c8:	blx	r3
    85ca:	cmp	r0, #0
    85cc:	bne.n	859c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    85ce:	b.n	8590 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

000085d0 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    85d0:	bx	lr

000085d2 <SharedSpiCard::end()>:
    m_spiDriver.end();
    85d2:	adds	r0, #4
    85d4:	b.w	9d0c <SdSpiArduinoDriver::end()>

000085d8 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    85d8:	push	{r4, lr}
    85da:	mov	r4, r0
    85dc:	movs	r1, #32
    85de:	bl	c47c <operator delete(void*, unsigned int)>
    85e2:	mov	r0, r4
    85e4:	pop	{r4, pc}

000085e6 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    85e6:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    85e8:	ldr	r3, [r0, #0]
    85ea:	mov	r1, sp
    85ec:	ldr	r3, [r3, #76]	; 0x4c
    85ee:	blx	r3
    85f0:	cbz	r0, 8638 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    85f2:	ldrb.w	r3, [sp]
    85f6:	ands.w	r3, r3, #192	; 0xc0
    85fa:	bne.n	863e <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    85fc:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8600:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8604:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8608:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    860c:	lsls	r0, r0, #2
    860e:	orr.w	r0, r0, r3, lsl #10
    8612:	ldrb.w	r3, [sp, #8]
    8616:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    861a:	ldrb.w	r3, [sp, #9]
    861e:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8622:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8624:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8626:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    862a:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    862e:	and.w	r2, r2, #15
    8632:	add	r3, r2
    8634:	subs	r3, #7
    8636:	lsls	r0, r3
}
    8638:	add	sp, #20
    863a:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    863e:	cmp	r3, #64	; 0x40
    8640:	bne.n	8660 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8642:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8646:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    864a:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    864c:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8650:	add.w	r0, r0, r3, lsl #16
    8654:	ldrb.w	r3, [sp, #8]
    8658:	add.w	r0, r0, r3, lsl #8
    865c:	lsls	r0, r0, #10
    865e:	b.n	8638 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8660:	movs	r0, #0
    8662:	b.n	8638 <SharedSpiCard::sectorCount()+0x52>

00008664 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8664:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8668:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    866a:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    866c:	mov	r4, r0
    866e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8670:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8672:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8674:	bne.n	867c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8676:	ldr	r3, [r0, #24]
    8678:	cmp	r3, r1
    867a:	beq.n	8690 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    867c:	ldr	r3, [r4, #0]
    867e:	mov	r1, r5
    8680:	mov	r0, r4
    8682:	ldr	r3, [r3, #96]	; 0x60
    8684:	blx	r3
    8686:	cbnz	r0, 868e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8688:	movs	r0, #0
}
    868a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    868e:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8690:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8692:	cmp	r6, r5
    8694:	add.w	r1, r7, r5, lsl #9
    8698:	bne.n	86b2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    869a:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    869c:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    869e:	add	r3, r6
    86a0:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    86a2:	cmp	r0, #0
    86a4:	bne.n	868a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    86a6:	ldr	r3, [r4, #0]
    86a8:	mov	r0, r4
    86aa:	ldr	r3, [r3, #100]	; 0x64
}
    86ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    86b0:	bx	r3
    if (!writeData(src)) {
    86b2:	ldr	r3, [r4, #0]
    86b4:	mov	r0, r4
    86b6:	ldr	r3, [r3, #92]	; 0x5c
    86b8:	blx	r3
    86ba:	cmp	r0, #0
    86bc:	beq.n	8688 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    86be:	adds	r5, #1
    86c0:	b.n	8692 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

000086c2 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    86c2:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    86c4:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    86c6:	mov	r4, r0
  if (!m_spiActive) {
    86c8:	cbnz	r6, 86e6 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    86ca:	adds	r5, r0, #4
    86cc:	mov	r0, r5
    86ce:	bl	9cb0 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    86d2:	mov	r1, r6
    86d4:	ldrb	r0, [r4, #16]
    86d6:	bl	9d86 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86da:	movs	r1, #255	; 0xff
    86dc:	mov	r0, r5
    86de:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    86e2:	movs	r3, #1
    86e4:	strb	r3, [r4, #18]
}
    86e6:	pop	{r4, r5, r6, pc}

000086e8 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    86e8:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    86ea:	push	{r0, r1, r4, lr}
    86ec:	mov	r4, r0
  if (m_spiActive) {
    86ee:	cbz	r3, 870c <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    86f0:	movs	r1, #1
    86f2:	ldrb	r0, [r0, #16]
    86f4:	bl	9d86 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    86f8:	adds	r0, r4, #4
    86fa:	movs	r1, #255	; 0xff
    86fc:	str	r0, [sp, #4]
    86fe:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8702:	ldr	r0, [sp, #4]
    8704:	bl	9cbe <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8708:	movs	r3, #0
    870a:	strb	r3, [r4, #18]
}
    870c:	add	sp, #8
    870e:	pop	{r4, pc}

00008710 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8710:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8712:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8714:	mov	r4, r0
  if (m_state == READ_STATE) {
    8716:	cmp	r3, #1
    8718:	beq.n	873c <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    871a:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    871c:	cbnz	r6, 8722 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    871e:	bl	86c2 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8722:	adds	r0, r4, #4
    8724:	bl	9d12 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8728:	subs.w	r5, r0, #255	; 0xff
    872c:	it	ne
    872e:	movne	r5, #1
  if (!spiActive) {
    8730:	cbnz	r6, 8738 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8732:	mov	r0, r4
    8734:	bl	86e8 <SharedSpiCard::spiStop()>
}
    8738:	mov	r0, r5
    873a:	pop	{r4, r5, r6, pc}
    return false;
    873c:	movs	r5, #0
    873e:	b.n	8738 <SharedSpiCard::isBusy()+0x28>

00008740 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8740:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8742:	ldr	r7, [pc, #96]	; (87a4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    8744:	mov	r4, r0
    8746:	adds	r6, r0, #4
    8748:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    874a:	add.w	r5, r5, #300	; 0x12c
    874e:	uxth	r5, r5
    8750:	mov	r0, r6
    8752:	strd	r1, r2, [sp]
    8756:	bl	9d12 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    875a:	cmp	r0, #255	; 0xff
    875c:	strb	r0, [r4, #20]
    875e:	ldrd	r1, r2, [sp]
    8762:	beq.n	8784 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    8764:	cmp	r0, #254	; 0xfe
    8766:	bne.n	879a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8768:	mov	r0, r6
    876a:	bl	9d1c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    876e:	strb	r0, [r4, #20]
    8770:	cbnz	r0, 879e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    8772:	mov	r0, r6
    8774:	bl	9d12 <SdSpiArduinoDriver::receive()>
    8778:	mov	r0, r6
    877a:	bl	9d12 <SdSpiArduinoDriver::receive()>
  return true;
    877e:	movs	r0, #1
}
    8780:	add	sp, #12
    8782:	pop	{r4, r5, r6, r7, pc}
    8784:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8786:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8788:	lsls	r3, r3, #16
    878a:	bpl.n	8750 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    878c:	movs	r3, #29
  spiStop();
    878e:	mov	r0, r4
    m_errorCode = code;
    8790:	strb	r3, [r4, #17]
    8792:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8796:	movs	r0, #0
    8798:	b.n	8780 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    879a:	movs	r3, #24
    879c:	b.n	878e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    879e:	movs	r3, #37	; 0x25
    87a0:	b.n	878e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    87a2:	nop
    87a4:	.word	0x20021374

000087a8 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    87a8:	mov.w	r2, #512	; 0x200
    87ac:	b.w	8740 <SharedSpiCard::readData(unsigned char*, unsigned int)>

000087b0 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    87b0:	push	{r4, r5, r6, lr}
    87b2:	ldr	r6, [pc, #36]	; (87d8 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    87b4:	adds	r5, r0, #4
    87b6:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    87b8:	add	r1, r3
    87ba:	uxth	r4, r1
    87bc:	mov	r0, r5
    87be:	bl	9d12 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    87c2:	cmp	r0, #255	; 0xff
    87c4:	bne.n	87ca <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    87c6:	movs	r0, #1
}
    87c8:	pop	{r4, r5, r6, pc}
    87ca:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    87cc:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    87ce:	lsls	r3, r3, #16
    87d0:	bpl.n	87bc <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    87d2:	movs	r0, #0
    87d4:	b.n	87c8 <SharedSpiCard::waitReady(unsigned short)+0x18>
    87d6:	nop
    87d8:	.word	0x20021374

000087dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    87dc:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    87de:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    87e2:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    87e4:	mov	r4, r0
    87e6:	str	r2, [sp, #4]
    87e8:	mov	r5, r1
  if (!syncDevice()) {
    87ea:	blx	r3
    87ec:	cmp	r0, #0
    87ee:	beq.n	8862 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    87f0:	ldrb	r3, [r4, #18]
    87f2:	cbnz	r3, 87fa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    87f4:	mov	r0, r4
    87f6:	bl	86c2 <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    87fa:	cmp	r5, #12
    87fc:	bne.n	8850 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    87fe:	adds	r6, r4, #4
    8800:	movs	r7, #3
    spiSend(pa[i]);
    8802:	add.w	r8, sp, #4
    8806:	orr.w	r1, r5, #64	; 0x40
    880a:	mov	r0, r6
    880c:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    8810:	ldrb.w	r1, [r8, r7]
    8814:	mov	r0, r6
    8816:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    881a:	subs	r7, #1
    881c:	bcs.n	8810 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    881e:	cmp	r5, #0
    8820:	mov	r0, r6
    return m_spiDriver.receive();
    8822:	mov.w	r5, #10
    m_spiDriver.send(data);
    8826:	ite	eq
    8828:	moveq	r1, #149	; 0x95
    882a:	movne	r1, #135	; 0x87
    882c:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8830:	mov	r0, r6
    8832:	bl	9d12 <SdSpiArduinoDriver::receive()>
    8836:	mov	r0, r6
    8838:	bl	9d12 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    883c:	lsls	r3, r0, #24
    m_status = spiReceive();
    883e:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8840:	bpl.n	884a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8842:	subs	r5, #1
    8844:	uxth	r5, r5
    8846:	cmp	r5, #0
    8848:	bne.n	8836 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    884a:	add	sp, #8
    884c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8850:	mov.w	r1, #300	; 0x12c
    8854:	mov	r0, r4
    8856:	bl	87b0 <SharedSpiCard::waitReady(unsigned short)>
    885a:	cmp	r0, #0
    885c:	bne.n	87fe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    885e:	cmp	r5, #0
    8860:	beq.n	87fe <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8862:	movs	r0, #255	; 0xff
    8864:	b.n	884a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008866 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8866:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8868:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    886a:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    886c:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    886e:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8870:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8874:	cbz	r0, 8884 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8876:	movs	r3, #18
  spiStop();
    8878:	mov	r0, r4
    887a:	strb	r3, [r4, #17]
    887c:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8880:	movs	r0, #0
}
    8882:	pop	{r3, r4, r5, r6, r7, pc}
    8884:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8886:	adds	r7, r4, #4
    8888:	mov	r0, r7
    888a:	bl	9d12 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    888e:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8892:	cmp	r6, r5
    8894:	bne.n	8888 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8896:	mov	r0, r4
    8898:	bl	86e8 <SharedSpiCard::spiStop()>
    889c:	movs	r0, #1
    889e:	b.n	8882 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

000088a0 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    88a0:	push	{r3, r4, r5, lr}
    88a2:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    88a4:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    88a6:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    88a8:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    88ac:	cbz	r0, 88bc <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    88ae:	movs	r3, #27
    88b0:	strb	r3, [r4, #17]
  spiStop();
    88b2:	mov	r0, r4
  return false;
    88b4:	movs	r5, #0
  spiStop();
    88b6:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    88ba:	b.n	88d2 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    88bc:	mov	r1, r5
    88be:	movs	r2, #16
    88c0:	mov	r0, r4
    88c2:	bl	8740 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    88c6:	mov	r5, r0
    88c8:	cmp	r0, #0
    88ca:	beq.n	88b2 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    88cc:	mov	r0, r4
    88ce:	bl	86e8 <SharedSpiCard::spiStop()>
}
    88d2:	mov	r0, r5
    88d4:	pop	{r3, r4, r5, pc}

000088d6 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    88d6:	mov	r2, r1
    return readRegister(CMD9, csd);
    88d8:	movs	r1, #9
    88da:	b.w	88a0 <SharedSpiCard::readRegister(unsigned char, void*)>

000088de <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    88de:	mov	r2, r1
    return readRegister(CMD10, cid);
    88e0:	movs	r1, #10
    88e2:	b.w	88a0 <SharedSpiCard::readRegister(unsigned char, void*)>

000088e6 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    88e6:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    88e8:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    88ea:	mov	r5, r1
    88ec:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    88ee:	ldr	r3, [r3, #88]	; 0x58
    88f0:	blx	r3
    88f2:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    88f4:	mov.w	r1, #18
    88f8:	mov	r0, r4
    sector <<= 9;
    88fa:	it	ne
    88fc:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    88fe:	mov	r2, r5
    8900:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8904:	cbz	r0, 8914 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8906:	movs	r3, #12
  spiStop();
    8908:	mov	r0, r4
    890a:	strb	r3, [r4, #17]
    890c:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8910:	movs	r0, #0
}
    8912:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8914:	movs	r0, #1
    8916:	strb	r0, [r4, #19]
  return true;
    8918:	b.n	8912 <SharedSpiCard::readStart(unsigned long)+0x2c>

0000891a <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    891a:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    891c:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    891e:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8920:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8922:	mov	r2, r4
  m_state = IDLE_STATE;
    8924:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8926:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    892a:	cbz	r0, 893a <SharedSpiCard::readStop()+0x20>
    892c:	movs	r3, #9
  spiStop();
    892e:	mov	r0, r5
    8930:	strb	r3, [r5, #17]
    8932:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8936:	mov	r0, r4
}
    8938:	pop	{r3, r4, r5, pc}
  spiStop();
    893a:	mov	r0, r5
    893c:	bl	86e8 <SharedSpiCard::spiStop()>
  return true;
    8940:	movs	r0, #1
    8942:	b.n	8938 <SharedSpiCard::readStop()+0x1e>

00008944 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8944:	ldrb	r2, [r0, #19]
    8946:	cmp	r2, #2
    8948:	bne.n	8950 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    894a:	ldr	r3, [r0, #0]
    894c:	ldr	r3, [r3, #100]	; 0x64
    894e:	bx	r3
  if (m_state == READ_STATE) {
    8950:	cmp	r2, #1
    8952:	bne.n	8958 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8954:	b.w	891a <SharedSpiCard::readStop()>
}
    8958:	movs	r0, #1
    895a:	bx	lr

0000895c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    895c:	push	{r3, r4, r5, r6, r7, lr}
    895e:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8960:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8962:	mov	r4, r0
    8964:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8966:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8968:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    896a:	bne.n	8972 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    896c:	ldr	r3, [r0, #24]
    896e:	cmp	r3, r1
    8970:	beq.n	8982 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8972:	mov	r1, r5
    8974:	mov	r0, r4
    8976:	bl	88e6 <SharedSpiCard::readStart(unsigned long)>
    897a:	cbnz	r0, 8980 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    897c:	movs	r0, #0
}
    897e:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8980:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8982:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8984:	cmp	r5, r6
    8986:	add.w	r1, r7, r5, lsl #9
    898a:	bne.n	89a2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    898c:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    898e:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8990:	add	r3, r5
    8992:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8994:	cmp	r0, #0
    8996:	bne.n	897e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8998:	mov	r0, r4
}
    899a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    899e:	b.w	891a <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    89a2:	mov	r0, r4
    89a4:	bl	87a8 <SharedSpiCard::readData(unsigned char*)>
    89a8:	cmp	r0, #0
    89aa:	beq.n	897c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    89ac:	adds	r5, #1
    89ae:	b.n	8984 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

000089b0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    89b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89b4:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    89b6:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    89b8:	mov	r4, r0
    89ba:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    89bc:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    89be:	mov	r7, r2
    89c0:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    89c4:	bne.n	89cc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    89c6:	ldr	r3, [r0, #24]
    89c8:	cmp	r3, r1
    89ca:	beq.n	89de <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    89cc:	mov	r1, r5
    89ce:	mov	r0, r4
    89d0:	bl	88e6 <SharedSpiCard::readStart(unsigned long)>
    89d4:	cbnz	r0, 89dc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    89d6:	movs	r0, #0
}
    89d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    89dc:	str	r5, [r4, #24]
    89de:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    89e2:	cmp	r5, r8
    89e4:	bne.n	89fc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    89e6:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    89e8:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    89ea:	add	r3, r6
    89ec:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    89ee:	cmp	r0, #0
    89f0:	bne.n	89d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    89f2:	mov	r0, r4
}
    89f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    89f8:	b.w	891a <SharedSpiCard::readStop()>
    if (readData(dst)) {
    89fc:	mov	r1, r7
    89fe:	mov	r0, r4
    8a00:	bl	87a8 <SharedSpiCard::readData(unsigned char*)>
    8a04:	cmp	r0, #0
    8a06:	beq.n	89d6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8a08:	mov	r0, r5
    8a0a:	mov	r2, sl
    8a0c:	mov	r1, r7
    8a0e:	adds	r5, #1
    8a10:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8a12:	b.n	89e2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008a14 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8a14:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8a16:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8a18:	mov	r5, r1
    8a1a:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8a1c:	ldr	r3, [r3, #88]	; 0x58
    8a1e:	blx	r3
    8a20:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8a22:	mov.w	r1, #25
    8a26:	mov	r0, r4
    sector <<= 9;
    8a28:	it	ne
    8a2a:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8a2c:	mov	r2, r5
    8a2e:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8a32:	cbz	r0, 8a42 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8a34:	movs	r3, #14
  spiStop();
    8a36:	mov	r0, r4
    8a38:	strb	r3, [r4, #17]
    8a3a:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8a3e:	movs	r0, #0
}
    8a40:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8a42:	movs	r3, #2
  return true;
    8a44:	movs	r0, #1
  m_state = WRITE_STATE;
    8a46:	strb	r3, [r4, #19]
  return true;
    8a48:	b.n	8a40 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008a4a <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8a4a:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8a4c:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8a4e:	mov	r6, r1
  if (!readCSD(&csd)) {
    8a50:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8a52:	mov	r4, r0
  if (!readCSD(&csd)) {
    8a54:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8a56:	mov	r5, r2
  if (!readCSD(&csd)) {
    8a58:	blx	r3
    8a5a:	cbz	r0, 8a7e <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8a5c:	ldrb.w	r3, [sp, #10]
    8a60:	lsls	r2, r3, #25
    8a62:	bmi.n	8a88 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8a64:	and.w	r3, r3, #63	; 0x3f
    8a68:	ldrb.w	r2, [sp, #11]
    8a6c:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8a6e:	orr.w	r3, r3, r2, lsr #7
    8a72:	adds	r2, r5, #1
    8a74:	orrs	r2, r6
    8a76:	tst	r3, r2
    8a78:	beq.n	8a88 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8a7a:	movs	r3, #39	; 0x27
    8a7c:	strb	r3, [r4, #17]
  spiStop();
    8a7e:	mov	r0, r4
  return false;
    8a80:	movs	r5, #0
  spiStop();
    8a82:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8a86:	b.n	8ad6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8a88:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8a8a:	movs	r1, #32
    8a8c:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8a8e:	cmp	r3, #3
    firstSector <<= 9;
    8a90:	itt	ne
    8a92:	lslne	r6, r6, #9
    lastSector <<= 9;
    8a94:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8a96:	mov	r2, r6
    8a98:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8a9c:	cbz	r0, 8aa2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8a9e:	movs	r3, #38	; 0x26
    8aa0:	b.n	8a7c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8aa2:	mov	r2, r5
    8aa4:	movs	r1, #33	; 0x21
    8aa6:	mov	r0, r4
    8aa8:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8aac:	mov	r2, r0
    8aae:	cmp	r0, #0
    8ab0:	bne.n	8a9e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8ab2:	movs	r1, #38	; 0x26
    8ab4:	mov	r0, r4
    8ab6:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8aba:	cmp	r0, #0
    8abc:	bne.n	8a9e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8abe:	movw	r1, #10000	; 0x2710
    8ac2:	mov	r0, r4
    8ac4:	bl	87b0 <SharedSpiCard::waitReady(unsigned short)>
    8ac8:	mov	r5, r0
    8aca:	cbnz	r0, 8ad0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8acc:	movs	r3, #40	; 0x28
    8ace:	b.n	8a7c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8ad0:	mov	r0, r4
    8ad2:	bl	86e8 <SharedSpiCard::spiStop()>
}
    8ad6:	mov	r0, r5
    8ad8:	add	sp, #16
    8ada:	pop	{r4, r5, r6, pc}

00008adc <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8adc:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8ade:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8ae2:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8ae4:	bl	87b0 <SharedSpiCard::waitReady(unsigned short)>
    8ae8:	mov	r5, r0
    8aea:	cbnz	r0, 8afa <SharedSpiCard::writeStop()+0x1e>
    8aec:	movs	r3, #30
  spiStop();
    8aee:	mov	r0, r4
    8af0:	strb	r3, [r4, #17]
    8af2:	bl	86e8 <SharedSpiCard::spiStop()>
}
    8af6:	mov	r0, r5
    8af8:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    8afa:	movs	r1, #253	; 0xfd
    8afc:	adds	r0, r4, #4
    8afe:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8b02:	mov	r0, r4
    8b04:	bl	86e8 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8b08:	movs	r3, #0
    8b0a:	strb	r3, [r4, #19]
  return true;
    8b0c:	b.n	8af6 <SharedSpiCard::writeStop()+0x1a>

00008b0e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8b0e:	push	{r0, r1, r2, r4, r5, lr}
    8b10:	mov	r5, r2
    8b12:	mov	r4, r0
    8b14:	adds	r0, #4
    8b16:	str	r0, [sp, #4]
    8b18:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8b1c:	mov.w	r2, #512	; 0x200
    8b20:	mov	r1, r5
    8b22:	ldr	r0, [sp, #4]
    8b24:	bl	9d46 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8b28:	movs	r1, #255	; 0xff
    8b2a:	ldr	r0, [sp, #4]
    8b2c:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    8b30:	movs	r1, #255	; 0xff
    8b32:	ldr	r0, [sp, #4]
    8b34:	bl	9d3e <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8b38:	ldr	r0, [sp, #4]
    8b3a:	bl	9d12 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    8b3e:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8b40:	and.w	r0, r0, #31
    8b44:	cmp	r0, #5
    8b46:	beq.n	8b58 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8b48:	movs	r3, #32
  spiStop();
    8b4a:	mov	r0, r4
    8b4c:	strb	r3, [r4, #17]
    8b4e:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8b52:	movs	r0, #0
}
    8b54:	add	sp, #12
    8b56:	pop	{r4, r5, pc}
  return true;
    8b58:	movs	r0, #1
    8b5a:	b.n	8b54 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008b5c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8b5c:	push	{r0, r1, r4, lr}
    8b5e:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8b60:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8b64:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8b66:	bl	87b0 <SharedSpiCard::waitReady(unsigned short)>
    8b6a:	ldr	r2, [sp, #4]
    8b6c:	cbnz	r0, 8b7c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8b6e:	movs	r3, #36	; 0x24
    8b70:	strb	r3, [r4, #17]
  spiStop();
    8b72:	mov	r0, r4
    8b74:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8b78:	movs	r0, #0
    8b7a:	b.n	8b88 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8b7c:	movs	r1, #252	; 0xfc
    8b7e:	mov	r0, r4
    8b80:	bl	8b0e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8b84:	cmp	r0, #0
    8b86:	beq.n	8b72 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8b88:	add	sp, #8
    8b8a:	pop	{r4, pc}

00008b8c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    8b8c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8b8e:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8b90:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8b92:	mov	r5, r1
    8b94:	mov	r4, r0
    8b96:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8b98:	blx	r3
    8b9a:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    8b9c:	mov.w	r1, #24
    8ba0:	mov	r0, r4
    sector <<= 9;
    8ba2:	it	ne
    8ba4:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8ba6:	mov	r2, r5
    8ba8:	bl	87dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8bac:	cbz	r0, 8bbc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    8bae:	movs	r3, #13
    8bb0:	strb	r3, [r4, #17]
  spiStop();
    8bb2:	mov	r0, r4
  return false;
    8bb4:	movs	r5, #0
  spiStop();
    8bb6:	bl	86e8 <SharedSpiCard::spiStop()>
  return false;
    8bba:	b.n	8bd2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    8bbc:	mov	r2, r6
    8bbe:	movs	r1, #254	; 0xfe
    8bc0:	mov	r0, r4
    8bc2:	bl	8b0e <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8bc6:	mov	r5, r0
    8bc8:	cmp	r0, #0
    8bca:	beq.n	8bb2 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    8bcc:	mov	r0, r4
    8bce:	bl	86e8 <SharedSpiCard::spiStop()>
}
    8bd2:	mov	r0, r5
    8bd4:	pop	{r4, r5, r6, pc}

00008bd6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8bd6:	push	{r4}
  if (m_dedicatedSpi) {
    8bd8:	ldrb	r4, [r0, #28]
    8bda:	cbz	r4, 8bea <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    8bdc:	ldr	r3, [r0, #0]
    8bde:	ldr	r4, [r3, #40]	; 0x28
    8be0:	movs	r3, #1
    8be2:	mov	ip, r4
}
    8be4:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8be8:	bx	ip
}
    8bea:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    8bee:	b.w	8b8c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00008bf2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8bf2:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8bf6:	ldr	r5, [sp, #32]
    8bf8:	mov	r6, r0
    8bfa:	mov	r4, r1
    8bfc:	mov	r7, r2
    8bfe:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8c02:	cmp	r4, r8
    8c04:	bne.n	8c0c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    8c06:	movs	r0, #1
  }
    8c08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    8c0c:	ldr	r3, [r6, #0]
    8c0e:	mov	r2, r7
    8c10:	mov	r1, r4
    8c12:	mov	r0, r6
    8c14:	ldr	r3, [r3, #16]
    8c16:	add.w	r9, r4, #1
    8c1a:	blx	r3
    8c1c:	cmp	r0, #0
    8c1e:	beq.n	8c08 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    8c20:	mov	r0, r4
    8c22:	ldr	r2, [sp, #36]	; 0x24
    8c24:	mov	r1, r7
    8c26:	mov	r4, r9
    8c28:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    8c2a:	b.n	8c02 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00008c2c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    8c2c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c30:	mov	r5, r0
    8c32:	mov	r4, r1
    8c34:	mov	r7, r3
    8c36:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    8c38:	cmp	r4, r6
    8c3a:	bne.n	8c40 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    8c3c:	movs	r0, #1
    8c3e:	b.n	8c5a <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    8c40:	ldr	r3, [r5, #0]
    8c42:	mov	r0, r4
    8c44:	ldr	r1, [sp, #24]
    8c46:	ldr.w	r8, [r3, #36]	; 0x24
    8c4a:	blx	r7
    8c4c:	mov	r1, r4
    8c4e:	mov	r2, r0
    8c50:	mov	r0, r5
    8c52:	adds	r4, #1
    8c54:	blx	r8
    8c56:	cmp	r0, #0
    8c58:	bne.n	8c38 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    8c5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008c5e <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    8c5e:	movs	r0, #0
    8c60:	bx	lr

00008c62 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8c62:	movs	r0, #0
    8c64:	bx	lr

00008c66 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8c66:	movs	r0, #0
    8c68:	bx	lr

00008c6a <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    8c6a:	bx	lr

00008c6c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    8c6c:	ldr	r3, [pc, #28]	; (8c8c <sdIrs()+0x20>)
    8c6e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8c70:	ldr	r2, [pc, #28]	; (8c90 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    8c72:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8c74:	ldr	r0, [r3, #48]	; 0x30
    8c76:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8c78:	ldr	r2, [r2, #0]
    8c7a:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    8c7c:	ldr	r2, [r3, #72]	; 0x48
    8c7e:	bic.w	r2, r2, #129	; 0x81
    8c82:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8c84:	ldr	r3, [pc, #12]	; (8c94 <sdIrs()+0x28>)
    8c86:	strb	r1, [r3, #0]
}
    8c88:	bx	lr
    8c8a:	nop
    8c8c:	.word	0x402c0000
    8c90:	.word	0x200207f8
    8c94:	.word	0x2002153a

00008c98 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8c98:	ldr	r3, [pc, #24]	; (8cb4 <gpioMux(unsigned char)+0x1c>)
    8c9a:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    8c9e:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8ca2:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8ca6:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    8caa:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    8cae:	str.w	r0, [r3, #456]	; 0x1c8
}
    8cb2:	bx	lr
    8cb4:	.word	0x401f8000

00008cb8 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8cb8:	ldr	r3, [pc, #12]	; (8cc8 <isBusyCommandComplete()+0x10>)
    8cba:	ldr	r0, [pc, #16]	; (8ccc <isBusyCommandComplete()+0x14>)
    8cbc:	ldr	r3, [r3, #48]	; 0x30
    8cbe:	ands	r0, r3
}
    8cc0:	clz	r0, r0
    8cc4:	lsrs	r0, r0, #5
    8cc6:	bx	lr
    8cc8:	.word	0x402c0000
    8ccc:	.word	0x000f0001

00008cd0 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8cd0:	ldr	r3, [pc, #8]	; (8cdc <isBusyCommandInhibit()+0xc>)
    8cd2:	ldr	r0, [r3, #36]	; 0x24
}
    8cd4:	and.w	r0, r0, #1
    8cd8:	bx	lr
    8cda:	nop
    8cdc:	.word	0x402c0000

00008ce0 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8ce0:	ldr	r3, [pc, #12]	; (8cf0 <isBusyDat()+0x10>)
    8ce2:	ldr	r0, [r3, #36]	; 0x24
    8ce4:	eor.w	r0, r0, #16777216	; 0x1000000
}
    8ce8:	ubfx	r0, r0, #24, #1
    8cec:	bx	lr
    8cee:	nop
    8cf0:	.word	0x402c0000

00008cf4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8cf4:	ldr	r3, [pc, #4]	; (8cfc <isBusyDMA()+0x8>)
    8cf6:	ldrb	r0, [r3, #0]
}
    8cf8:	bx	lr
    8cfa:	nop
    8cfc:	.word	0x2002153a

00008d00 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    8d00:	ldr	r3, [pc, #12]	; (8d10 <isBusyFifoRead()+0x10>)
    8d02:	ldr	r0, [r3, #36]	; 0x24
    8d04:	eor.w	r0, r0, #2048	; 0x800
}
    8d08:	ubfx	r0, r0, #11, #1
    8d0c:	bx	lr
    8d0e:	nop
    8d10:	.word	0x402c0000

00008d14 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    8d14:	ldr	r3, [pc, #12]	; (8d24 <isBusyFifoWrite()+0x10>)
    8d16:	ldr	r0, [r3, #36]	; 0x24
    8d18:	eor.w	r0, r0, #1024	; 0x400
}
    8d1c:	ubfx	r0, r0, #10, #1
    8d20:	bx	lr
    8d22:	nop
    8d24:	.word	0x402c0000

00008d28 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    8d28:	ldr	r3, [pc, #12]	; (8d38 <isBusyTransferComplete()+0x10>)
    8d2a:	ldr	r0, [pc, #16]	; (8d3c <isBusyTransferComplete()+0x14>)
    8d2c:	ldr	r3, [r3, #48]	; 0x30
    8d2e:	ands	r0, r3
}
    8d30:	clz	r0, r0
    8d34:	lsrs	r0, r0, #5
    8d36:	bx	lr
    8d38:	.word	0x402c0000
    8d3c:	.word	0x117f0002

00008d40 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    8d40:	mov.w	r3, #1000	; 0x3e8
    8d44:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8d46:	ldr	r3, [pc, #140]	; (8dd4 <setSdclk(unsigned long)+0x94>)
    8d48:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8d4a:	sub.w	r3, r3, #147456	; 0x24000
    8d4e:	ldr.w	r1, [r3, #256]	; 0x100
    8d52:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8d54:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8d58:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    8d5c:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8d5e:	udiv	r1, r1, r3
    8d62:	ldr	r3, [pc, #116]	; (8dd8 <setSdclk(unsigned long)+0x98>)
    8d64:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8d68:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    8d6a:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    8d6e:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8d70:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8d72:	lsls	r4, r2, #4
    8d74:	udiv	r4, r3, r4
    8d78:	cmp	r4, r0
    8d7a:	bls.n	8d80 <setSdclk(unsigned long)+0x40>
    8d7c:	subs	r1, #1
    8d7e:	bne.n	8d86 <setSdclk(unsigned long)+0x46>
    8d80:	mov	r4, r2
    8d82:	movs	r1, #1
    8d84:	b.n	8d8e <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    8d86:	lsls	r2, r2, #1
    8d88:	b.n	8d72 <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    8d8a:	adds	r1, #1
    8d8c:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    8d8e:	udiv	r5, r3, r4
    8d92:	cmp	r5, r0
    8d94:	bls.n	8d9e <setSdclk(unsigned long)+0x5e>
    8d96:	cmp	r1, #16
    8d98:	add.w	r5, r2, r4
    8d9c:	bne.n	8d8a <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8d9e:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    8da2:	subs	r1, #1
  sdclkfs >>= 1;
    8da4:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8da6:	muls	r4, r0
    8da8:	ldr	r0, [pc, #48]	; (8ddc <setSdclk(unsigned long)+0x9c>)
    8daa:	udiv	r3, r3, r4
    8dae:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8db0:	ldr	r0, [pc, #44]	; (8de0 <setSdclk(unsigned long)+0xa0>)
    8db2:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    8db4:	bic.w	r3, r3, #1044480	; 0xff000
    8db8:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8dbc:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8dc0:	orr.w	r3, r3, r2, lsl #8
    8dc4:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8dc8:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    8dca:	ldr	r3, [r0, #36]	; 0x24
    8dcc:	lsls	r3, r3, #28
    8dce:	bpl.n	8dca <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8dd0:	pop	{r4, r5, pc}
    8dd2:	nop
    8dd4:	.word	0x400fc000
    8dd8:	.word	0x5e69ec00
    8ddc:	.word	0x20013fd0
    8de0:	.word	0x402c0000

00008de4 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    8de4:	ldr	r3, [pc, #4]	; (8dec <SdioCard::errorCode() const+0x8>)
    8de6:	ldrb	r0, [r3, #0]
    8de8:	bx	lr
    8dea:	nop
    8dec:	.word	0x200022d0

00008df0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8df0:	ldr	r3, [pc, #4]	; (8df8 <SdioCard::errorData() const+0x8>)
    8df2:	ldr	r0, [r3, #0]
}
    8df4:	bx	lr
    8df6:	nop
    8df8:	.word	0x200207f8

00008dfc <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    8dfc:	ldr	r3, [pc, #20]	; (8e14 <SdioCard::readCID(CID*)+0x18>)
    8dfe:	add.w	r2, r3, #16
    8e02:	ldr.w	r0, [r3], #4
    8e06:	cmp	r3, r2
    8e08:	str.w	r0, [r1], #4
    8e0c:	bne.n	8e02 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    8e0e:	movs	r0, #1
    8e10:	bx	lr
    8e12:	nop
    8e14:	.word	0x2002147a

00008e18 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    8e18:	ldr	r3, [pc, #20]	; (8e30 <SdioCard::readCSD(csd_t*)+0x18>)
    8e1a:	add.w	r2, r3, #16
    8e1e:	ldr.w	r0, [r3], #4
    8e22:	cmp	r3, r2
    8e24:	str.w	r0, [r1], #4
    8e28:	bne.n	8e1e <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    8e2a:	movs	r0, #1
    8e2c:	bx	lr
    8e2e:	nop
    8e30:	.word	0x2002148a

00008e34 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    8e34:	ldr	r3, [pc, #8]	; (8e40 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    8e36:	movs	r0, #1
  *ocr = m_ocr;
    8e38:	ldr	r3, [r3, #0]
    8e3a:	str	r3, [r1, #0]
}
    8e3c:	bx	lr
    8e3e:	nop
    8e40:	.word	0x200201ec

00008e44 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    8e44:	bx	lr
	...

00008e48 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    8e48:	push	{r3, r4, r5, r6, r7, lr}
    8e4a:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e4c:	ldr	r7, [pc, #24]	; (8e68 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    8e4e:	bl	b2cc <micros>
    8e52:	mov	r6, r0
  while (fcn()) {
    8e54:	blx	r5
    8e56:	mov	r4, r0
    8e58:	cbz	r0, 8e64 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e5a:	bl	b2cc <micros>
    8e5e:	subs	r0, r0, r6
    8e60:	cmp	r0, r7
    8e62:	bls.n	8e54 <waitTimeout(bool (*)())+0xc>
}
    8e64:	mov	r0, r4
    8e66:	pop	{r3, r4, r5, r6, r7, pc}
    8e68:	.word	0x000f4240

00008e6c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    8e6c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8e70:	ldr	r7, [pc, #44]	; (8ea0 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    8e72:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e74:	ldr.w	r8, [pc, #44]	; 8ea4 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    8e78:	str	r0, [r7, #0]
  uint32_t m = micros();
    8e7a:	bl	b2cc <micros>
    8e7e:	mov	r6, r0
  while (fcn()) {
    8e80:	blx	r5
    8e82:	mov	r4, r0
    8e84:	cbnz	r0, 8e90 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    8e86:	movs	r3, #0
}
    8e88:	mov	r0, r4
      m_busyFcn = 0;
    8e8a:	str	r3, [r7, #0]
}
    8e8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8e90:	bl	b2cc <micros>
    8e94:	subs	r0, r0, r6
    8e96:	cmp	r0, r8
    8e98:	bhi.n	8e86 <yieldTimeout(bool (*)())+0x1a>
    yield();
    8e9a:	bl	bf50 <yield>
    8e9e:	b.n	8e80 <yieldTimeout(bool (*)())+0x14>
    8ea0:	.word	0x200207f4
    8ea4:	.word	0x000f4240

00008ea8 <SdioCard::~SdioCard()>:
    8ea8:	push	{r4, lr}
    8eaa:	mov	r4, r0
    8eac:	movs	r1, #12
    8eae:	bl	c47c <operator delete(void*, unsigned int)>
    8eb2:	mov	r0, r4
    8eb4:	pop	{r4, pc}
	...

00008eb8 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    8eb8:	push	{r3, lr}
    gpioMux(0);
    8eba:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8ebc:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    8ec0:	bl	8c98 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8ec4:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8ec8:	ldr	r3, [pc, #24]	; (8ee4 <enableGPIO(bool) [clone .part.0]+0x2c>)
    8eca:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    8ece:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8ed2:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8ed6:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    8eda:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    8ede:	str.w	r2, [r3, #952]	; 0x3b8
}
    8ee2:	pop	{r3, pc}
    8ee4:	.word	0x401f8000

00008ee8 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8ee8:	ldr	r3, [pc, #184]	; (8fa4 <initSDHC()+0xbc>)
    gpioMux(5);
    8eea:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8eec:	ldr.w	r2, [r3, #256]	; 0x100
    8ef0:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    8ef4:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8ef6:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8efa:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    8efe:	ldr	r4, [pc, #168]	; (8fa8 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    8f00:	bic.w	r2, r2, #63	; 0x3f
    8f04:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    8f08:	ldr.w	r2, [r3, #256]	; 0x100
    8f0c:	orr.w	r2, r2, #24
    8f10:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    8f14:	ldr.w	r2, [r3, #256]	; 0x100
    8f18:	bic.w	r2, r2, #128	; 0x80
    8f1c:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    8f20:	add.w	r3, r3, #147456	; 0x24000
    8f24:	ldr.w	r2, [r3, #128]	; 0x80
    8f28:	orr.w	r2, r2, #12
    8f2c:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    8f30:	ldr	r2, [r3, #36]	; 0x24
    8f32:	bic.w	r2, r2, #14336	; 0x3800
    8f36:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    8f38:	ldr	r2, [r3, #28]
    8f3a:	orr.w	r2, r2, #65536	; 0x10000
    8f3e:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    8f40:	ldr	r2, [r3, #36]	; 0x24
    8f42:	orr.w	r2, r2, #2048	; 0x800
    8f46:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    8f48:	bl	8c98 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    8f4c:	ldr	r3, [r4, #72]	; 0x48
    8f4e:	orr.w	r3, r3, #2147483648	; 0x80000000
    8f52:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    8f54:	ldr	r3, [r4, #44]	; 0x2c
    8f56:	orr.w	r3, r3, #16777216	; 0x1000000
    8f5a:	orr.w	r3, r3, #32768	; 0x8000
    8f5e:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8f60:	ldr	r3, [r4, #44]	; 0x2c
    8f62:	lsls	r2, r3, #7
    8f64:	bmi.n	8f60 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8f66:	mov.w	r0, #400	; 0x190
    8f6a:	bl	8d40 <setSdclk(unsigned long)>
  if (enable) {
    8f6e:	bl	8eb8 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8f72:	ldr	r3, [pc, #56]	; (8fac <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    8f74:	ldr	r2, [pc, #56]	; (8fb0 <initSDHC()+0xc8>)
    8f76:	str	r3, [r4, #52]	; 0x34
    8f78:	ldr	r3, [pc, #56]	; (8fb4 <initSDHC()+0xcc>)
    8f7a:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    8f7e:	ldr	r3, [pc, #56]	; (8fb8 <initSDHC()+0xd0>)
    8f80:	movs	r2, #96	; 0x60
    8f82:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8f86:	mov.w	r3, #3758153728	; 0xe000e000
    8f8a:	mov.w	r2, #16384	; 0x4000
    8f8e:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8f92:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8f94:	ldr	r2, [pc, #16]	; (8fa8 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8f96:	orr.w	r3, r3, #134217728	; 0x8000000
    8f9a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8f9c:	ldr	r3, [r2, #44]	; 0x2c
    8f9e:	lsls	r3, r3, #4
    8fa0:	bmi.n	8f9c <initSDHC()+0xb4>
}
    8fa2:	pop	{r4, pc}
    8fa4:	.word	0x400d8000
    8fa8:	.word	0x402c0000
    8fac:	.word	0x117f000b
    8fb0:	.word	0x00008c6d
    8fb4:	.word	0x20002400
    8fb8:	.word	0xe000e400

00008fbc <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    8fbc:	ldr	r3, [pc, #16]	; (8fd0 <SdioCard::type() const+0x14>)
    8fbe:	ldrb	r3, [r3, #0]
    8fc0:	cbz	r3, 8fcc <SdioCard::type() const+0x10>
    8fc2:	ldr	r3, [pc, #16]	; (8fd4 <SdioCard::type() const+0x18>)
    8fc4:	ldrb	r0, [r3, #0]
    8fc6:	adds	r0, #2
    8fc8:	uxtb	r0, r0
    8fca:	bx	lr
    8fcc:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    8fce:	bx	lr
    8fd0:	.word	0x20021477
    8fd4:	.word	0x20021478

00008fd8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8fd8:	push	{r3, r4, r5, lr}
    8fda:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    8fdc:	ldr	r0, [pc, #80]	; (9030 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8fde:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    8fe0:	bl	8e48 <waitTimeout(bool (*)())>
    8fe4:	cbnz	r0, 9026 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    8fe6:	ldr	r3, [pc, #76]	; (9034 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8fe8:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    8fea:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8fec:	bpl.n	8ffe <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    8fee:	ldr	r2, [r3, #72]	; 0x48
    8ff0:	bic.w	r2, r2, #255	; 0xff
    8ff4:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8ff6:	uxtb	r2, r4
    8ff8:	ldr	r1, [r3, #72]	; 0x48
    8ffa:	orrs	r2, r1
    8ffc:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    8ffe:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    9002:	ldr	r5, [pc, #48]	; (9034 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    9004:	ldr	r0, [pc, #48]	; (9038 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    9006:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    9008:	bl	8e48 <waitTimeout(bool (*)())>
    900c:	cbnz	r0, 9026 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    900e:	ldr	r2, [r5, #48]	; 0x30
    9010:	ldr	r3, [pc, #40]	; (903c <cardCommand(unsigned long, unsigned long)+0x64>)
    9012:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9014:	ldr	r2, [r3, #0]
    9016:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9018:	ldr	r2, [r3, #0]
    901a:	lsls	r2, r2, #31
    901c:	bpl.n	9026 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    901e:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9020:	tst.w	r3, #983040	; 0xf0000
    9024:	beq.n	902a <cardCommand(unsigned long, unsigned long)+0x52>
    9026:	movs	r0, #0
}
    9028:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    902a:	movs	r0, #1
    902c:	b.n	9028 <cardCommand(unsigned long, unsigned long)+0x50>
    902e:	nop
    9030:	.word	0x00008cd1
    9034:	.word	0x402c0000
    9038:	.word	0x00008cb9
    903c:	.word	0x200207f8

00009040 <statusCMD13()>:
static uint32_t statusCMD13() {
    9040:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9042:	ldr	r3, [pc, #16]	; (9054 <statusCMD13()+0x14>)
    9044:	ldr	r0, [pc, #16]	; (9058 <statusCMD13()+0x18>)
    9046:	ldr	r1, [r3, #0]
    9048:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    904c:	cbz	r0, 9052 <statusCMD13()+0x12>
    904e:	ldr	r3, [pc, #12]	; (905c <statusCMD13()+0x1c>)
    9050:	ldr	r0, [r3, #16]
}
    9052:	pop	{r3, pc}
    9054:	.word	0x200201f0
    9058:	.word	0x0d1a0000
    905c:	.word	0x402c0000

00009060 <isBusyCMD13()>:
static bool isBusyCMD13() {
    9060:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9062:	bl	9040 <statusCMD13()>
    9066:	eor.w	r0, r0, #256	; 0x100
}
    906a:	ubfx	r0, r0, #8, #1
    906e:	pop	{r3, pc}

00009070 <SdioCard::status()>:
  return statusCMD13();
    9070:	b.w	9040 <statusCMD13()>

00009074 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9074:	ldr	r3, [pc, #76]	; (90c4 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9076:	push	{r4, r5, lr}
    9078:	mov	r4, r1
    907a:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    907c:	ldr	r1, [r3, #0]
    907e:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9082:	cbz	r0, 90c0 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9084:	ldr	r3, [pc, #64]	; (90c8 <readReg16(unsigned long, void*)+0x54>)
    9086:	add.w	r5, r4, #15
    908a:	ldr	r2, [r3, #16]
    908c:	str	r2, [sp, #0]
    908e:	ldr	r2, [r3, #20]
    9090:	str	r2, [sp, #4]
    9092:	ldr	r2, [r3, #24]
    9094:	str	r2, [sp, #8]
    9096:	ldr	r3, [r3, #28]
    9098:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    909a:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    909c:	bic.w	r2, r3, #3
    90a0:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    90a4:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    90a6:	adds	r2, #16
    90a8:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    90aa:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    90ac:	add	r2, sp
    90ae:	ldr.w	r2, [r2, #-16]
    90b2:	lsr.w	r2, r2, r1
    90b6:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    90ba:	bne.n	909c <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    90bc:	movs	r3, #0
    90be:	strb	r3, [r4, #15]
}
    90c0:	add	sp, #20
    90c2:	pop	{r4, r5, pc}
    90c4:	.word	0x200201f0
    90c8:	.word	0x402c0000

000090cc <waitDmaStatus()>:
static bool waitDmaStatus() {
    90cc:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    90ce:	ldr	r0, [pc, #32]	; (90f0 <waitDmaStatus()+0x24>)
    90d0:	bl	8e6c <yieldTimeout(bool (*)())>
    90d4:	cbnz	r0, 90ec <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    90d6:	ldr	r3, [pc, #28]	; (90f4 <waitDmaStatus()+0x28>)
    90d8:	ldr	r2, [r3, #0]
    90da:	lsls	r2, r2, #30
    90dc:	bpl.n	90ea <waitDmaStatus()+0x1e>
    90de:	ldr	r2, [r3, #0]
    90e0:	ldr	r3, [pc, #20]	; (90f8 <waitDmaStatus()+0x2c>)
    90e2:	tst	r2, r3
    90e4:	ite	eq
    90e6:	moveq	r0, #1
    90e8:	movne	r0, #0
}
    90ea:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    90ec:	movs	r0, #0
    90ee:	b.n	90ea <waitDmaStatus()+0x1e>
    90f0:	.word	0x00008cf5
    90f4:	.word	0x200207f8
    90f8:	.word	0x117f0000

000090fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    90fc:	push	{r3, r4, r5, r6, r7, lr}
    90fe:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9100:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    9102:	mov	r7, r0
    9104:	mov	r4, r1
    9106:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9108:	bne.n	910c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    910a:	cbnz	r5, 911e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    910c:	ldr	r3, [pc, #96]	; (9170 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    910e:	movs	r2, #37	; 0x25
    9110:	strb	r2, [r3, #0]
  m_errorLine = line;
    9112:	movw	r2, #501	; 0x1f5
    9116:	ldr	r3, [pc, #92]	; (9174 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9118:	str	r2, [r3, #0]
}
    911a:	movs	r0, #0
    911c:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    911e:	ldr	r0, [pc, #88]	; (9178 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    9120:	bl	8e6c <yieldTimeout(bool (*)())>
    9124:	cbz	r0, 9134 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9126:	ldr	r3, [pc, #72]	; (9170 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9128:	movs	r2, #10
    912a:	strb	r2, [r3, #0]
  m_errorLine = line;
    912c:	mov.w	r2, #504	; 0x1f8
    9130:	ldr	r3, [pc, #64]	; (9174 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9132:	b.n	9118 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    9134:	ldr	r3, [pc, #68]	; (917c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    9136:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    9138:	ldr	r1, [pc, #68]	; (9180 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    913a:	strb	r2, [r3, #0]
  m_irqstat = 0;
    913c:	ldr	r3, [pc, #68]	; (9184 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    913e:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9140:	ldr	r3, [pc, #68]	; (9188 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    9142:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9144:	and.w	r3, r3, r5, lsl #16
    9148:	orr.w	r3, r3, #512	; 0x200
    914c:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    914e:	ldr	r3, [pc, #60]	; (918c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9150:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9152:	ldr	r3, [pc, #60]	; (9190 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    9154:	ldrb	r3, [r3, #0]
    9156:	cbnz	r3, 915a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9158:	lsls	r4, r4, #9
    915a:	mov	r1, r4
    915c:	mov	r0, r7
    915e:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9162:	cmp	r0, #0
    9164:	beq.n	911a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9166:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    916a:	b.w	90cc <waitDmaStatus()>
    916e:	nop
    9170:	.word	0x200022d0
    9174:	.word	0x20013fd8
    9178:	.word	0x00009061
    917c:	.word	0x2002153a
    9180:	.word	0x402c0000
    9184:	.word	0x200207f8
    9188:	.word	0x1fff0000
    918c:	.word	0x117f0002
    9190:	.word	0x20021478

00009194 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9194:	push	{r3, r4, r5, r6, r7, lr}
    9196:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9198:	ldrb	r0, [r0, #8]
    919a:	mov	r4, r1
    919c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    919e:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    91a0:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    91a2:	bmi.n	91c2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    91a4:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    91a6:	cmp	r4, r6
    91a8:	beq.n	91cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    91aa:	ldr	r3, [r7, #0]
    91ac:	mov	r2, r5
    91ae:	mov	r1, r4
    91b0:	mov	r0, r7
    91b2:	ldr	r3, [r3, #16]
    91b4:	adds	r4, #1
    91b6:	add.w	r5, r5, #512	; 0x200
    91ba:	blx	r3
    91bc:	cmp	r0, #0
    91be:	bne.n	91a6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    91c0:	b.n	91de <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    91c2:	lsls	r0, r2, #30
    91c4:	beq.n	91ea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    91c6:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    91c8:	cmp	r4, r6
    91ca:	bne.n	91d0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    91cc:	movs	r0, #1
    91ce:	b.n	91e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    91d0:	ldr	r3, [r7, #0]
    91d2:	mov	r2, r5
    91d4:	mov	r1, r4
    91d6:	mov	r0, r7
    91d8:	ldr	r3, [r3, #16]
    91da:	blx	r3
    91dc:	cbnz	r0, 91e2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    91de:	movs	r0, #0
}
    91e0:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    91e2:	adds	r4, #1
    91e4:	add.w	r5, r5, #512	; 0x200
    91e8:	b.n	91c8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    91ea:	ldr	r0, [pc, #24]	; (9204 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    91ec:	bl	90fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    91f0:	cmp	r0, #0
    91f2:	bne.n	91cc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    91f4:	ldr	r3, [pc, #16]	; (9208 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    91f6:	movs	r2, #12
    91f8:	strb	r2, [r3, #0]
  m_errorLine = line;
    91fa:	movw	r2, #929	; 0x3a1
    91fe:	ldr	r3, [pc, #12]	; (920c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9200:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9202:	b.n	91e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9204:	.word	0x123a0037
    9208:	.word	0x200022d0
    920c:	.word	0x20013fd8

00009210 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9210:	push	{r3, r4, r5, r6, r7, lr}
    9212:	mov	r7, r0
    9214:	ldrb	r0, [r0, #8]
    9216:	mov	r4, r1
    9218:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    921a:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    921c:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    921e:	bmi.n	923e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9220:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9222:	cmp	r4, r6
    9224:	beq.n	9248 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    9226:	ldr	r3, [r7, #0]
    9228:	mov	r2, r5
    922a:	mov	r1, r4
    922c:	mov	r0, r7
    922e:	ldr	r3, [r3, #36]	; 0x24
    9230:	adds	r4, #1
    9232:	add.w	r5, r5, #512	; 0x200
    9236:	blx	r3
    9238:	cmp	r0, #0
    923a:	bne.n	9222 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    923c:	b.n	925a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    923e:	lsls	r0, r2, #30
    9240:	beq.n	9266 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    9242:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9244:	cmp	r4, r6
    9246:	bne.n	924c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9248:	movs	r0, #1
    924a:	b.n	925c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    924c:	ldr	r3, [r7, #0]
    924e:	mov	r2, r5
    9250:	mov	r1, r4
    9252:	mov	r0, r7
    9254:	ldr	r3, [r3, #36]	; 0x24
    9256:	blx	r3
    9258:	cbnz	r0, 925e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    925a:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    925c:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    925e:	adds	r4, #1
    9260:	add.w	r5, r5, #512	; 0x200
    9264:	b.n	9244 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9266:	ldr	r0, [pc, #24]	; (9280 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9268:	bl	90fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    926c:	cmp	r0, #0
    926e:	bne.n	9248 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9270:	ldr	r3, [pc, #16]	; (9284 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    9272:	movs	r2, #14
    9274:	strb	r2, [r3, #0]
  m_errorLine = line;
    9276:	movw	r2, #1085	; 0x43d
    927a:	ldr	r3, [pc, #12]	; (9288 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    927c:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    927e:	b.n	925c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9280:	.word	0x193a0027
    9284:	.word	0x200022d0
    9288:	.word	0x20013fd8

0000928c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    928c:	ldr	r2, [pc, #88]	; (92e8 <SdioCard::sectorCount()+0x5c>)
    928e:	ldrb	r3, [r2, #0]
    9290:	ands.w	r3, r3, #192	; 0xc0
    9294:	bne.n	92c8 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9296:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9298:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    929a:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    929e:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    92a0:	lsls	r0, r0, #2
    92a2:	orr.w	r0, r0, r3, lsl #10
    92a6:	ldrb	r3, [r2, #8]
    92a8:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    92ac:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    92ae:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    92b0:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    92b4:	adds	r0, #1
    92b6:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    92ba:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    92bc:	orr.w	r3, r3, r1, lsr #7
    92c0:	add	r3, r2
    92c2:	subs	r3, #7
    92c4:	lsls	r0, r3
    92c6:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    92c8:	cmp	r3, #64	; 0x40
    92ca:	bne.n	92e4 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    92cc:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    92ce:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    92d0:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    92d2:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    92d6:	add.w	r0, r0, r3, lsl #16
    92da:	ldrb	r3, [r2, #8]
    92dc:	add.w	r0, r0, r3, lsl #8
    92e0:	lsls	r0, r0, #10
    92e2:	bx	lr
  } else {
    return 0;
    92e4:	movs	r0, #0
}
    92e6:	bx	lr
    92e8:	.word	0x2002148a

000092ec <SdioCard::isBusy()>:
    92ec:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    92ee:	lsls	r3, r3, #31
    92f0:	bpl.n	9304 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    92f2:	ldr	r3, [pc, #40]	; (931c <SdioCard::isBusy()+0x30>)
    92f4:	ldr	r3, [r3, #0]
    92f6:	cbz	r3, 92fa <SdioCard::isBusy()+0xe>
    92f8:	bx	r3
    92fa:	ldr	r3, [pc, #36]	; (9320 <SdioCard::isBusy()+0x34>)
    92fc:	ldrb	r0, [r3, #0]
    92fe:	cbz	r0, 931a <SdioCard::isBusy()+0x2e>
    9300:	b.w	9060 <isBusyCMD13()>
    if (m_transferActive) {
    9304:	ldr	r3, [pc, #28]	; (9324 <SdioCard::isBusy()+0x38>)
    9306:	ldrb	r3, [r3, #0]
    9308:	cbz	r3, 930e <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    930a:	b.w	8d28 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    930e:	ldr	r3, [pc, #24]	; (9328 <SdioCard::isBusy()+0x3c>)
    9310:	ldr	r0, [r3, #36]	; 0x24
    9312:	eor.w	r0, r0, #16777216	; 0x1000000
    9316:	ubfx	r0, r0, #24, #1
}
    931a:	bx	lr
    931c:	.word	0x200207f4
    9320:	.word	0x20021476
    9324:	.word	0x20021479
    9328:	.word	0x402c0000

0000932c <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    932c:	push	{r3, r4, r5, lr}
    932e:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9330:	ldr	r2, [pc, #160]	; (93d4 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9332:	ldrb	r3, [r2, #10]
    9334:	ands.w	r4, r3, #64	; 0x40
    9338:	bne.n	9360 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    933a:	and.w	r3, r3, #63	; 0x3f
    933e:	ldrb	r2, [r2, #11]
    9340:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9342:	orr.w	r3, r3, r2, lsr #7
    9346:	adds	r2, r5, #1
    9348:	orrs	r2, r1
    934a:	tst	r3, r2
    934c:	beq.n	9360 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    934e:	ldr	r3, [pc, #136]	; (93d8 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9350:	movs	r2, #39	; 0x27
    9352:	strb	r2, [r3, #0]
  m_errorLine = line;
    9354:	movw	r2, #770	; 0x302
    9358:	ldr	r3, [pc, #128]	; (93dc <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    935a:	str	r2, [r3, #0]
}
    935c:	mov	r0, r4
    935e:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9360:	ldr	r3, [pc, #124]	; (93e0 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    9362:	ldrb	r3, [r3, #0]
    9364:	cbnz	r3, 936a <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    9366:	lsls	r1, r1, #9
    lastSector <<= 9;
    9368:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    936a:	ldr	r0, [pc, #120]	; (93e4 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    936c:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9370:	mov	r4, r0
    9372:	cbnz	r0, 9382 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    9374:	ldr	r3, [pc, #96]	; (93d8 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9376:	movs	r2, #15
    9378:	strb	r2, [r3, #0]
  m_errorLine = line;
    937a:	movw	r2, #778	; 0x30a
    937e:	ldr	r3, [pc, #92]	; (93dc <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9380:	b.n	935a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9382:	mov	r1, r5
    9384:	ldr	r0, [pc, #96]	; (93e8 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    9386:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    938a:	mov	r4, r0
    938c:	cbnz	r0, 939c <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    938e:	ldr	r3, [pc, #72]	; (93d8 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9390:	movs	r2, #16
    9392:	strb	r2, [r3, #0]
  m_errorLine = line;
    9394:	movw	r2, #781	; 0x30d
    9398:	ldr	r3, [pc, #64]	; (93dc <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    939a:	b.n	935a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    939c:	movs	r1, #0
    939e:	ldr	r0, [pc, #76]	; (93ec <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    93a0:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    93a4:	mov	r4, r0
    93a6:	cbnz	r0, 93b6 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    93a8:	ldr	r3, [pc, #44]	; (93d8 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    93aa:	movs	r2, #17
    93ac:	strb	r2, [r3, #0]
  m_errorLine = line;
    93ae:	mov.w	r2, #784	; 0x310
    93b2:	ldr	r3, [pc, #40]	; (93dc <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    93b4:	b.n	935a <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    93b6:	ldr	r0, [pc, #56]	; (93f0 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    93b8:	bl	8e48 <waitTimeout(bool (*)())>
    93bc:	cmp	r0, #0
    93be:	beq.n	935c <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    93c0:	ldr	r3, [pc, #20]	; (93d8 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    93c2:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    93c4:	movs	r4, #0
  m_errorCode = code;
    93c6:	strb	r2, [r3, #0]
  m_errorLine = line;
    93c8:	movw	r2, #787	; 0x313
    93cc:	ldr	r3, [pc, #12]	; (93dc <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    93ce:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    93d0:	b.n	935c <SdioCard::erase(unsigned long, unsigned long)+0x30>
    93d2:	nop
    93d4:	.word	0x2002148a
    93d8:	.word	0x200022d0
    93dc:	.word	0x20013fd8
    93e0:	.word	0x20021478
    93e4:	.word	0x201a0000
    93e8:	.word	0x211a0000
    93ec:	.word	0x261b0000
    93f0:	.word	0x00009061

000093f4 <waitTransferComplete()>:
static bool waitTransferComplete() {
    93f4:	push	{r4, lr}
  if (!m_transferActive) {
    93f6:	ldr	r4, [pc, #60]	; (9434 <waitTransferComplete()+0x40>)
    93f8:	ldrb	r3, [r4, #0]
    93fa:	cbnz	r3, 9400 <waitTransferComplete()+0xc>
    return true;
    93fc:	movs	r0, #1
}
    93fe:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9400:	ldr	r0, [pc, #52]	; (9438 <waitTransferComplete()+0x44>)
    9402:	bl	8e48 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9406:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9408:	ldr	r2, [pc, #48]	; (943c <waitTransferComplete()+0x48>)
  m_transferActive = false;
    940a:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    940c:	ldr	r1, [r2, #48]	; 0x30
    940e:	ldr	r3, [pc, #48]	; (9440 <waitTransferComplete()+0x4c>)
    9410:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9412:	ldr	r1, [r3, #0]
    9414:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9416:	cbnz	r0, 9420 <waitTransferComplete()+0x2c>
    9418:	ldr	r2, [r3, #0]
    941a:	ldr	r3, [pc, #40]	; (9444 <waitTransferComplete()+0x50>)
    941c:	tst	r2, r3
    941e:	beq.n	93fc <waitTransferComplete()+0x8>
  m_errorCode = code;
    9420:	ldr	r3, [pc, #36]	; (9448 <waitTransferComplete()+0x54>)
    9422:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9424:	movs	r0, #0
  m_errorCode = code;
    9426:	strb	r2, [r3, #0]
  m_errorLine = line;
    9428:	movw	r2, #634	; 0x27a
    942c:	ldr	r3, [pc, #28]	; (944c <waitTransferComplete()+0x58>)
    942e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9430:	b.n	93fe <waitTransferComplete()+0xa>
    9432:	nop
    9434:	.word	0x20021479
    9438:	.word	0x00008d29
    943c:	.word	0x402c0000
    9440:	.word	0x200207f8
    9444:	.word	0x117f0000
    9448:	.word	0x200022d0
    944c:	.word	0x20013fd8

00009450 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9450:	push	{r4, r5, r6, r7, lr}
    9452:	ldrb	r5, [r0, #8]
    9454:	sub.w	sp, sp, #516	; 0x204
    9458:	mov	r4, r0
    945a:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    945c:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9460:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9462:	beq.n	949c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    9464:	lsls	r3, r2, #30
    9466:	beq.n	9476 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9468:	mov	r1, r6
      ptr = aligned;
    946a:	mov	r6, sp
      memcpy(aligned, src, 512);
    946c:	mov.w	r2, #512	; 0x200
    9470:	mov	r0, sp
    9472:	bl	9dd0 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9476:	movs	r3, #1
    9478:	mov	r2, r6
    947a:	mov	r1, r7
    947c:	ldr	r0, [pc, #104]	; (94e8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    947e:	bl	90fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9482:	mov	r5, r0
    9484:	cbnz	r0, 9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9486:	ldr	r3, [pc, #100]	; (94ec <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9488:	movs	r2, #13
    948a:	strb	r2, [r3, #0]
  m_errorLine = line;
    948c:	movw	r2, #1041	; 0x411
    9490:	ldr	r3, [pc, #92]	; (94f0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9492:	str	r2, [r3, #0]
}
    9494:	mov	r0, r5
    9496:	add.w	sp, sp, #516	; 0x204
    949a:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    949c:	bl	93f4 <waitTransferComplete()>
    94a0:	cmp	r0, #0
    94a2:	beq.n	9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    94a4:	ldrb	r3, [r4, #9]
    94a6:	cmp	r3, #2
    94a8:	bne.n	94b0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    94aa:	ldr	r3, [r4, #4]
    94ac:	cmp	r3, r7
    94ae:	beq.n	94d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    94b0:	ldr	r3, [r4, #0]
    94b2:	mov	r0, r4
    94b4:	ldr	r3, [r3, #32]
    94b6:	blx	r3
    94b8:	cmp	r0, #0
    94ba:	beq.n	9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    94bc:	ldr	r3, [r4, #0]
    94be:	mov	r1, r7
    94c0:	mov	r0, r4
    94c2:	ldr	r3, [r3, #96]	; 0x60
    94c4:	blx	r3
    94c6:	cmp	r0, #0
    94c8:	beq.n	9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    94ca:	movs	r3, #2
      m_curSector = sector;
    94cc:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    94ce:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    94d0:	ldr	r3, [r4, #0]
    94d2:	mov	r1, r6
    94d4:	mov	r0, r4
    94d6:	ldr	r3, [r3, #92]	; 0x5c
    94d8:	blx	r3
    94da:	cmp	r0, #0
    94dc:	beq.n	9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    94de:	ldr	r3, [r4, #4]
  return true;
    94e0:	mov	r5, r0
    m_curSector++;
    94e2:	adds	r3, #1
    94e4:	str	r3, [r4, #4]
    94e6:	b.n	9494 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    94e8:	.word	0x183a0001
    94ec:	.word	0x200022d0
    94f0:	.word	0x20013fd8

000094f4 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    94f4:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    94f6:	ldr	r4, [pc, #92]	; (9554 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    94f8:	movs	r1, #0
    94fa:	ldr	r0, [pc, #92]	; (9558 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    94fc:	ldr	r3, [r4, #40]	; 0x28
    94fe:	bic.w	r3, r3, #65536	; 0x10000
    9502:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9504:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9508:	mov	r5, r0
    950a:	cbnz	r0, 951e <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    950c:	ldr	r3, [pc, #76]	; (955c <SdioCard::readStop()+0x68>)
    950e:	movs	r2, #9
    9510:	strb	r2, [r3, #0]
  m_errorLine = line;
    9512:	movw	r2, #573	; 0x23d
    9516:	ldr	r3, [pc, #72]	; (9560 <SdioCard::readStop()+0x6c>)
    9518:	str	r2, [r3, #0]
}
    951a:	mov	r0, r5
    951c:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    951e:	ldr	r0, [pc, #68]	; (9564 <SdioCard::readStop()+0x70>)
    9520:	bl	8e6c <yieldTimeout(bool (*)())>
    9524:	cbz	r0, 9538 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    9526:	ldr	r3, [pc, #52]	; (955c <SdioCard::readStop()+0x68>)
    9528:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    952a:	movs	r5, #0
  m_errorCode = code;
    952c:	strb	r2, [r3, #0]
  m_errorLine = line;
    952e:	mov.w	r2, #576	; 0x240
    9532:	ldr	r3, [pc, #44]	; (9560 <SdioCard::readStop()+0x6c>)
    9534:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9536:	b.n	951a <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9538:	ldr	r3, [r4, #36]	; 0x24
    953a:	lsls	r3, r3, #30
    953c:	bpl.n	951a <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    953e:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9540:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9542:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9544:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9548:	orr.w	r2, r2, #67108864	; 0x4000000
    954c:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    954e:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9550:	str	r3, [r4, #40]	; 0x28
    9552:	b.n	951a <SdioCard::readStop()+0x26>
    9554:	.word	0x402c0000
    9558:	.word	0x0cdb0000
    955c:	.word	0x200022d0
    9560:	.word	0x20013fd8
    9564:	.word	0x00008ce1

00009568 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    9568:	push	{r4, r5, r6, lr}
    956a:	mov	r4, r1
  if (!waitTransferComplete()) {
    956c:	bl	93f4 <waitTransferComplete()>
    9570:	mov	r5, r0
    9572:	cbz	r0, 95ac <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    9574:	ldr	r3, [pc, #100]	; (95dc <SdioCard::writeData(unsigned char const*)+0x74>)
    9576:	ldr	r2, [r3, #36]	; 0x24
    9578:	lsls	r2, r2, #23
    957a:	bmi.n	958c <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    957c:	ldr	r2, [r3, #40]	; 0x28
    957e:	bic.w	r2, r2, #65536	; 0x10000
    9582:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9584:	ldr	r2, [r3, #40]	; 0x28
    9586:	orr.w	r2, r2, #131072	; 0x20000
    958a:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    958c:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    958e:	ldr	r0, [pc, #80]	; (95e0 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9590:	orr.w	r2, r2, #65536	; 0x10000
    9594:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9596:	bl	8e48 <waitTimeout(bool (*)())>
    959a:	cbz	r0, 95b0 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    959c:	ldr	r3, [pc, #68]	; (95e4 <SdioCard::writeData(unsigned char const*)+0x7c>)
    959e:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    95a0:	movs	r5, #0
  m_errorCode = code;
    95a2:	strb	r2, [r3, #0]
  m_errorLine = line;
    95a4:	mov.w	r2, #1016	; 0x3f8
    95a8:	ldr	r3, [pc, #60]	; (95e8 <SdioCard::writeData(unsigned char const*)+0x80>)
    95aa:	str	r2, [r3, #0]
}
    95ac:	mov	r0, r5
    95ae:	pop	{r4, r5, r6, pc}
    95b0:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    95b4:	ldr	r2, [pc, #36]	; (95dc <SdioCard::writeData(unsigned char const*)+0x74>)
    95b6:	ldr	r3, [r2, #36]	; 0x24
    95b8:	lsls	r3, r3, #21
    95ba:	bpl.n	95b6 <SdioCard::writeData(unsigned char const*)+0x4e>
    95bc:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    95be:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    95c2:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    95c6:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    95c8:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    95ca:	bne.n	95c2 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    95cc:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    95ce:	cmp	r4, r1
    95d0:	bne.n	95b6 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    95d2:	ldr	r3, [pc, #24]	; (95ec <SdioCard::writeData(unsigned char const*)+0x84>)
    95d4:	movs	r2, #1
    95d6:	strb	r2, [r3, #0]
  return true;
    95d8:	b.n	95ac <SdioCard::writeData(unsigned char const*)+0x44>
    95da:	nop
    95dc:	.word	0x402c0000
    95e0:	.word	0x00008d15
    95e4:	.word	0x200022d0
    95e8:	.word	0x20013fd8
    95ec:	.word	0x20021479

000095f0 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    95f0:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    95f2:	ldr	r0, [pc, #80]	; (9644 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    95f4:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    95f6:	bl	8e6c <yieldTimeout(bool (*)())>
    95fa:	cbz	r0, 960e <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    95fc:	ldr	r3, [pc, #72]	; (9648 <SdioCard::writeStart(unsigned long)+0x58>)
    95fe:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9600:	movs	r0, #0
  m_errorCode = code;
    9602:	strb	r2, [r3, #0]
  m_errorLine = line;
    9604:	movw	r2, #1099	; 0x44b
    9608:	ldr	r3, [pc, #64]	; (964c <SdioCard::writeStart(unsigned long)+0x5c>)
    960a:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    960c:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    960e:	ldr	r3, [pc, #64]	; (9650 <SdioCard::writeStart(unsigned long)+0x60>)
    9610:	ldr	r2, [r3, #40]	; 0x28
    9612:	bic.w	r2, r2, #65536	; 0x10000
    9616:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9618:	mov.w	r2, #512	; 0x200
    961c:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    961e:	ldr	r3, [pc, #52]	; (9654 <SdioCard::writeStart(unsigned long)+0x64>)
    9620:	ldrb	r3, [r3, #0]
    9622:	cbnz	r3, 9626 <SdioCard::writeStart(unsigned long)+0x36>
    9624:	lsls	r4, r4, #9
    9626:	mov	r1, r4
    9628:	ldr	r0, [pc, #44]	; (9658 <SdioCard::writeStart(unsigned long)+0x68>)
    962a:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    962e:	cmp	r0, #0
    9630:	bne.n	960c <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9632:	ldr	r3, [pc, #20]	; (9648 <SdioCard::writeStart(unsigned long)+0x58>)
    9634:	movs	r2, #14
    9636:	strb	r2, [r3, #0]
  m_errorLine = line;
    9638:	movw	r2, #1111	; 0x457
    963c:	ldr	r3, [pc, #12]	; (964c <SdioCard::writeStart(unsigned long)+0x5c>)
    963e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    9640:	b.n	960c <SdioCard::writeStart(unsigned long)+0x1c>
    9642:	nop
    9644:	.word	0x00009061
    9648:	.word	0x200022d0
    964c:	.word	0x20013fd8
    9650:	.word	0x402c0000
    9654:	.word	0x20021478
    9658:	.word	0x193a0020

0000965c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    965c:	push	{r3, r4, r5, lr}
    965e:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9660:	ldr	r0, [pc, #96]	; (96c4 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9662:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9664:	bl	8e48 <waitTimeout(bool (*)())>
    9668:	cbz	r0, 967c <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    966a:	ldr	r3, [pc, #92]	; (96c8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    966c:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    966e:	movs	r0, #0
  m_errorCode = code;
    9670:	strb	r2, [r3, #0]
  m_errorLine = line;
    9672:	mov.w	r2, #408	; 0x198
    9676:	ldr	r3, [pc, #84]	; (96cc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9678:	str	r2, [r3, #0]
}
    967a:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    967c:	ldr	r3, [pc, #80]	; (96d0 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    967e:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9680:	mov	r1, r4
  m_dmaBusy = true;
    9682:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9684:	ldr	r3, [pc, #76]	; (96d4 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9686:	ldr	r2, [pc, #80]	; (96d8 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9688:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    968a:	ldr	r3, [pc, #80]	; (96dc <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    968c:	ldr	r0, [pc, #80]	; (96e0 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    968e:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9690:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9692:	ldr	r2, [pc, #80]	; (96e4 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    9694:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9696:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    969a:	cbnz	r0, 96ac <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    969c:	ldr	r3, [pc, #40]	; (96c8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    969e:	movs	r2, #4
    96a0:	strb	r2, [r3, #0]
  m_errorLine = line;
    96a2:	movw	r2, #415	; 0x19f
    96a6:	ldr	r3, [pc, #36]	; (96cc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    96a8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    96aa:	b.n	967a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    96ac:	bl	90cc <waitDmaStatus()>
    96b0:	cmp	r0, #0
    96b2:	bne.n	967a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    96b4:	ldr	r3, [pc, #16]	; (96c8 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    96b6:	movs	r2, #37	; 0x25
    96b8:	strb	r2, [r3, #0]
  m_errorLine = line;
    96ba:	mov.w	r2, #418	; 0x1a2
    96be:	ldr	r3, [pc, #12]	; (96cc <cardCMD6(unsigned long, unsigned char*)+0x70>)
    96c0:	b.n	96a8 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    96c2:	nop
    96c4:	.word	0x00009061
    96c8:	.word	0x200022d0
    96cc:	.word	0x20013fd8
    96d0:	.word	0x2002153a
    96d4:	.word	0x200207f8
    96d8:	.word	0x00010040
    96dc:	.word	0x402c0000
    96e0:	.word	0x063a0011
    96e4:	.word	0x117f0002

000096e8 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    96e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    96ec:	movs	r4, #0
  m_initDone = false;
    96ee:	ldr	r7, [pc, #524]	; (98fc <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    96f0:	ldr	r5, [pc, #524]	; (9900 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    96f2:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    96f4:	ldr.w	r8, [pc, #584]	; 9940 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    96f8:	ldr	r6, [pc, #520]	; (9904 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    96fa:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    96fc:	strb	r4, [r0, #9]
  m_initDone = false;
    96fe:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9700:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9702:	strb.w	r4, [r8]
  m_version2 = false;
    9706:	strb	r4, [r6, #0]
  initSDHC();
    9708:	bl	8ee8 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    970c:	mov	r1, r4
    970e:	mov	r0, r4
    9710:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9714:	mov	r4, r0
    9716:	cbnz	r0, 972c <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    9718:	movs	r3, #1
  m_errorLine = line;
    971a:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    971e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9720:	ldr	r3, [pc, #484]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    9722:	str	r2, [r3, #0]
}
    9724:	mov	r0, r4
    9726:	add	sp, #68	; 0x44
    9728:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    972c:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    972e:	ldr.w	r9, [pc, #532]	; 9944 <SdioCard::begin(SdioConfig)+0x25c>
    9732:	mov.w	r1, #426	; 0x1aa
    9736:	mov	r0, r9
    9738:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    973c:	cbz	r0, 9760 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    973e:	ldr	r3, [pc, #460]	; (990c <SdioCard::begin(SdioConfig)+0x224>)
    9740:	ldr	r3, [r3, #16]
    9742:	cmp.w	r3, #426	; 0x1aa
    9746:	beq.n	9758 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9748:	movs	r3, #6
  m_errorLine = line;
    974a:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    974e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9750:	ldr	r3, [pc, #436]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    9752:	movs	r4, #0
  m_errorLine = line;
    9754:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9756:	b.n	9724 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9758:	movs	r3, #1
    975a:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    975c:	ldr	r6, [pc, #432]	; (9910 <SdioCard::begin(SdioConfig)+0x228>)
    975e:	b.n	9780 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9760:	subs	r4, #1
    9762:	bne.n	9732 <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    9764:	ldrb	r3, [r6, #0]
    9766:	cmp	r3, #0
    9768:	bne.n	975c <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    976a:	bl	8ee8 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    976e:	mov	r1, r4
    9770:	mov	r0, r4
    9772:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9776:	ldrb	r3, [r6, #0]
    9778:	cmp	r3, #0
    977a:	bne.n	975c <SdioCard::begin(SdioConfig)+0x74>
    977c:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9780:	bl	b2cc <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9784:	ldr.w	r9, [pc, #428]	; 9934 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9788:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    978a:	ldr.w	sl, [pc, #444]	; 9948 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    978e:	ldr.w	fp, [pc, #444]	; 994c <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9792:	movs	r1, #0
    9794:	mov	r0, r9
    9796:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    979a:	cbnz	r0, 97a8 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    979c:	movs	r3, #23
  m_errorLine = line;
    979e:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    97a2:	strb	r3, [r5, #0]
  m_errorLine = line;
    97a4:	ldr	r3, [pc, #352]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    97a6:	b.n	9752 <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    97a8:	mov	r1, r6
    97aa:	mov	r0, sl
    97ac:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    97b0:	cmp	r0, #0
    97b2:	beq.n	979c <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    97b4:	bl	b2cc <micros>
    97b8:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    97ba:	cmp	r0, fp
    97bc:	bhi.n	979c <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    97be:	ldr	r3, [pc, #332]	; (990c <SdioCard::begin(SdioConfig)+0x224>)
    97c0:	ldr	r2, [r3, #16]
    97c2:	cmp	r2, #0
    97c4:	bge.n	9792 <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    97c6:	ldr	r1, [r3, #16]
    97c8:	ldr	r2, [pc, #328]	; (9914 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    97ca:	ldr	r0, [pc, #332]	; (9918 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    97cc:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    97ce:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    97d0:	ldr	r3, [r3, #16]
    97d2:	lsls	r2, r3, #1
    m_highCapacity = true;
    97d4:	itt	mi
    97d6:	movmi	r3, #1
    97d8:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    97dc:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    97e0:	mov	r4, r0
    97e2:	cbnz	r0, 97f0 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    97e4:	movs	r3, #2
  m_errorLine = line;
    97e6:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    97ea:	strb	r3, [r5, #0]
  m_errorLine = line;
    97ec:	ldr	r3, [pc, #280]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    97ee:	b.n	9722 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    97f0:	movs	r1, #0
    97f2:	ldr	r0, [pc, #296]	; (991c <SdioCard::begin(SdioConfig)+0x234>)
    97f4:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    97f8:	mov	r4, r0
    97fa:	cbnz	r0, 9808 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    97fc:	movs	r3, #3
  m_errorLine = line;
    97fe:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9802:	strb	r3, [r5, #0]
  m_errorLine = line;
    9804:	ldr	r3, [pc, #256]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    9806:	b.n	9722 <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9808:	ldr	r6, [pc, #256]	; (990c <SdioCard::begin(SdioConfig)+0x224>)
    980a:	ldr.w	r8, [pc, #324]	; 9950 <SdioCard::begin(SdioConfig)+0x268>
    980e:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9810:	ldr	r1, [pc, #268]	; (9920 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9812:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9814:	ldr	r0, [pc, #268]	; (9924 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9816:	lsls	r3, r3, #16
    9818:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    981c:	bl	9074 <readReg16(unsigned long, void*)>
    9820:	mov	r4, r0
    9822:	cbnz	r0, 9830 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    9824:	movs	r3, #7
  m_errorLine = line;
    9826:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    982a:	strb	r3, [r5, #0]
  m_errorLine = line;
    982c:	ldr	r3, [pc, #216]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    982e:	b.n	9722 <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9830:	ldr	r1, [pc, #244]	; (9928 <SdioCard::begin(SdioConfig)+0x240>)
    9832:	ldr	r0, [pc, #248]	; (992c <SdioCard::begin(SdioConfig)+0x244>)
    9834:	bl	9074 <readReg16(unsigned long, void*)>
    9838:	mov	r4, r0
    983a:	cbnz	r0, 9848 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    983c:	movs	r3, #8
  m_errorLine = line;
    983e:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9842:	strb	r3, [r5, #0]
  m_errorLine = line;
    9844:	ldr	r3, [pc, #192]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    9846:	b.n	9722 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9848:	ldr.w	r1, [r8]
    984c:	ldr	r0, [pc, #224]	; (9930 <SdioCard::begin(SdioConfig)+0x248>)
    984e:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9852:	mov	r4, r0
    9854:	cbnz	r0, 9862 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9856:	movs	r3, #5
  m_errorLine = line;
    9858:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    985c:	strb	r3, [r5, #0]
  m_errorLine = line;
    985e:	ldr	r3, [pc, #168]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    9860:	b.n	9722 <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9862:	ldr.w	r1, [r8]
    9866:	ldr	r0, [pc, #204]	; (9934 <SdioCard::begin(SdioConfig)+0x24c>)
    9868:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    986c:	cbz	r0, 98b6 <SdioCard::begin(SdioConfig)+0x1ce>
    986e:	movs	r1, #2
    9870:	ldr	r0, [pc, #196]	; (9938 <SdioCard::begin(SdioConfig)+0x250>)
    9872:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9876:	mov	r4, r0
    9878:	cbz	r0, 98b6 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    987a:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    987c:	mov	r1, sp
    987e:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9882:	bic.w	r3, r3, #6
    9886:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9888:	ldr	r3, [r6, #40]	; 0x28
    988a:	orr.w	r3, r3, #2
    988e:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9890:	mov.w	r3, #1048592	; 0x100010
    9894:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9896:	bl	965c <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    989a:	cbnz	r0, 98c2 <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    989c:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    98a0:	movs	r0, #5
    98a2:	bl	8c98 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    98a6:	mov	r0, r2
    98a8:	bl	8d40 <setSdclk(unsigned long)>
  if (enable) {
    98ac:	bl	8eb8 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    98b0:	movs	r3, #1
    98b2:	strb	r3, [r7, #0]
  return true;
    98b4:	b.n	9724 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    98b6:	movs	r3, #20
  m_errorLine = line;
    98b8:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    98bc:	strb	r3, [r5, #0]
  m_errorLine = line;
    98be:	ldr	r3, [pc, #72]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    98c0:	b.n	9752 <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    98c2:	ldrb.w	r3, [sp, #13]
    98c6:	lsls	r3, r3, #30
    98c8:	bpl.n	989c <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    98ca:	ldr	r6, [pc, #60]	; (9908 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    98cc:	mov	r1, sp
    98ce:	ldr	r0, [pc, #108]	; (993c <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    98d0:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    98d4:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    98d8:	bl	965c <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    98dc:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    98e0:	cbz	r0, 98ea <SdioCard::begin(SdioConfig)+0x202>
    98e2:	and.w	r3, r3, #15
    98e6:	cmp	r3, #1
    98e8:	beq.n	98f4 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    98ea:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    98ee:	str.w	r8, [r6]
    98f2:	b.n	989c <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    98f4:	movw	r2, #50000	; 0xc350
    98f8:	b.n	98a0 <SdioCard::begin(SdioConfig)+0x1b8>
    98fa:	nop
    98fc:	.word	0x20021476
    9900:	.word	0x200022d0
    9904:	.word	0x20021477
    9908:	.word	0x20013fd8
    990c:	.word	0x402c0000
    9910:	.word	0x40300000
    9914:	.word	0x200201ec
    9918:	.word	0x02090000
    991c:	.word	0x031a0000
    9920:	.word	0x2002148a
    9924:	.word	0x09090000
    9928:	.word	0x2002147a
    992c:	.word	0x0a090000
    9930:	.word	0x071b0000
    9934:	.word	0x371a0000
    9938:	.word	0x061a0000
    993c:	.word	0x80fffff1
    9940:	.word	0x20021478
    9944:	.word	0x081a0000
    9948:	.word	0x29020000
    994c:	.word	0x000f4240
    9950:	.word	0x200201f0

00009954 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9954:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9956:	ldr	r3, [pc, #148]	; (99ec <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9958:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    995a:	ldr	r2, [r3, #36]	; 0x24
    995c:	lsls	r0, r2, #22
    995e:	bmi.n	997c <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9960:	ldr	r2, [r3, #40]	; 0x28
    9962:	bic.w	r2, r2, #65536	; 0x10000
    9966:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9968:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    996a:	ldr	r2, [r3, #40]	; 0x28
    996c:	orr.w	r2, r2, #131072	; 0x20000
    9970:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9972:	ldr	r2, [r3, #40]	; 0x28
    9974:	orr.w	r2, r2, #65536	; 0x10000
    9978:	str	r2, [r3, #40]	; 0x28
    interrupts();
    997a:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    997c:	ldr	r0, [pc, #112]	; (99f0 <SdioCard::readData(unsigned char*)+0x9c>)
    997e:	bl	8e48 <waitTimeout(bool (*)())>
    9982:	cbz	r0, 9996 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9984:	ldr	r3, [pc, #108]	; (99f4 <SdioCard::readData(unsigned char*)+0xa0>)
    9986:	movs	r2, #26
    9988:	strb	r2, [r3, #0]
  m_errorLine = line;
    998a:	movw	r2, #854	; 0x356
    998e:	ldr	r3, [pc, #104]	; (99f8 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9990:	movs	r0, #0
  m_errorLine = line;
    9992:	str	r2, [r3, #0]
}
    9994:	pop	{r3, r4, r5, pc}
    9996:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    999a:	ldr	r5, [pc, #80]	; (99ec <SdioCard::readData(unsigned char*)+0x98>)
    999c:	ldr	r3, [r5, #36]	; 0x24
    999e:	lsls	r1, r3, #20
    99a0:	bpl.n	999c <SdioCard::readData(unsigned char*)+0x48>
    99a2:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    99a4:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    99a8:	ldr	r0, [r5, #32]
    99aa:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    99ae:	cmp	r3, r1
    99b0:	bne.n	99a8 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    99b2:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    99b4:	cmp	r4, r2
    99b6:	bne.n	999c <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    99b8:	ldr	r0, [pc, #64]	; (99fc <SdioCard::readData(unsigned char*)+0xa8>)
    99ba:	bl	8e48 <waitTimeout(bool (*)())>
    99be:	cbz	r0, 99ce <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    99c0:	ldr	r3, [pc, #48]	; (99f4 <SdioCard::readData(unsigned char*)+0xa0>)
    99c2:	movs	r2, #29
    99c4:	strb	r2, [r3, #0]
  m_errorLine = line;
    99c6:	movw	r2, #865	; 0x361
    99ca:	ldr	r3, [pc, #44]	; (99f8 <SdioCard::readData(unsigned char*)+0xa4>)
    99cc:	b.n	9990 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    99ce:	ldr	r2, [r5, #48]	; 0x30
    99d0:	ldr	r3, [pc, #44]	; (9a00 <SdioCard::readData(unsigned char*)+0xac>)
    99d2:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    99d4:	ldr	r2, [r3, #0]
    99d6:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    99d8:	ldr	r2, [r3, #0]
    99da:	lsls	r2, r2, #30
    99dc:	bpl.n	9994 <SdioCard::readData(unsigned char*)+0x40>
    99de:	ldr	r2, [r3, #0]
    99e0:	ldr	r3, [pc, #32]	; (9a04 <SdioCard::readData(unsigned char*)+0xb0>)
    99e2:	tst	r2, r3
    99e4:	ite	eq
    99e6:	moveq	r0, #1
    99e8:	movne	r0, #0
    99ea:	b.n	9994 <SdioCard::readData(unsigned char*)+0x40>
    99ec:	.word	0x402c0000
    99f0:	.word	0x00008d01
    99f4:	.word	0x200022d0
    99f8:	.word	0x20013fd8
    99fc:	.word	0x00008d29
    9a00:	.word	0x200207f8
    9a04:	.word	0x117f0000

00009a08 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9a08:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9a0a:	ldr	r0, [pc, #80]	; (9a5c <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    9a0c:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9a0e:	bl	8e6c <yieldTimeout(bool (*)())>
    9a12:	cbz	r0, 9a26 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9a14:	ldr	r3, [pc, #72]	; (9a60 <SdioCard::readStart(unsigned long)+0x58>)
    9a16:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9a18:	movs	r0, #0
  m_errorCode = code;
    9a1a:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a1c:	movw	r2, #945	; 0x3b1
    9a20:	ldr	r3, [pc, #64]	; (9a64 <SdioCard::readStart(unsigned long)+0x5c>)
    9a22:	str	r2, [r3, #0]
}
    9a24:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9a26:	ldr	r3, [pc, #64]	; (9a68 <SdioCard::readStart(unsigned long)+0x60>)
    9a28:	ldr	r2, [r3, #40]	; 0x28
    9a2a:	orr.w	r2, r2, #65536	; 0x10000
    9a2e:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9a30:	mov.w	r2, #512	; 0x200
    9a34:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9a36:	ldr	r3, [pc, #52]	; (9a6c <SdioCard::readStart(unsigned long)+0x64>)
    9a38:	ldrb	r3, [r3, #0]
    9a3a:	cbnz	r3, 9a3e <SdioCard::readStart(unsigned long)+0x36>
    9a3c:	lsls	r4, r4, #9
    9a3e:	mov	r1, r4
    9a40:	ldr	r0, [pc, #44]	; (9a70 <SdioCard::readStart(unsigned long)+0x68>)
    9a42:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9a46:	cmp	r0, #0
    9a48:	bne.n	9a24 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9a4a:	ldr	r3, [pc, #20]	; (9a60 <SdioCard::readStart(unsigned long)+0x58>)
    9a4c:	movs	r2, #12
    9a4e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a50:	movw	r2, #957	; 0x3bd
    9a54:	ldr	r3, [pc, #12]	; (9a64 <SdioCard::readStart(unsigned long)+0x5c>)
    9a56:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9a58:	b.n	9a24 <SdioCard::readStart(unsigned long)+0x1c>
    9a5a:	nop
    9a5c:	.word	0x00009061
    9a60:	.word	0x200022d0
    9a64:	.word	0x20013fd8
    9a68:	.word	0x402c0000
    9a6c:	.word	0x20021478
    9a70:	.word	0x123a0030

00009a74 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9a74:	push	{r4, r5, r6, r7, lr}
    9a76:	ldrb	r5, [r0, #8]
    9a78:	sub.w	sp, sp, #516	; 0x204
    9a7c:	mov	r4, r0
    9a7e:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9a80:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9a84:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9a86:	beq.n	9ac8 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9a88:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9a8a:	ldr	r0, [pc, #132]	; (9b10 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9a8c:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9a90:	ite	eq
    9a92:	moveq	r4, r2
    9a94:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9a96:	mov	r2, r4
    9a98:	bl	90fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9a9c:	mov	r5, r0
    9a9e:	cbnz	r0, 9ab6 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9aa0:	ldr	r3, [pc, #112]	; (9b14 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9aa2:	movs	r2, #11
    9aa4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9aa6:	mov.w	r2, #884	; 0x374
    9aaa:	ldr	r3, [pc, #108]	; (9b18 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9aac:	str	r2, [r3, #0]
}
    9aae:	mov	r0, r5
    9ab0:	add.w	sp, sp, #516	; 0x204
    9ab4:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9ab6:	cmp	r4, r6
    9ab8:	beq.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9aba:	mov.w	r2, #512	; 0x200
    9abe:	mov	r1, sp
    9ac0:	mov	r0, r6
    9ac2:	bl	9dd0 <memcpy>
    9ac6:	b.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9ac8:	bl	93f4 <waitTransferComplete()>
    9acc:	cmp	r0, #0
    9ace:	beq.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9ad0:	ldrb	r3, [r4, #9]
    9ad2:	cmp	r3, #1
    9ad4:	bne.n	9adc <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9ad6:	ldr	r3, [r4, #4]
    9ad8:	cmp	r3, r7
    9ada:	beq.n	9afa <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9adc:	ldr	r3, [r4, #0]
    9ade:	mov	r0, r4
    9ae0:	ldr	r3, [r3, #32]
    9ae2:	blx	r3
    9ae4:	cmp	r0, #0
    9ae6:	beq.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9ae8:	mov	r1, r7
    9aea:	mov	r0, r4
    9aec:	bl	9a08 <SdioCard::readStart(unsigned long)>
    9af0:	cmp	r0, #0
    9af2:	beq.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9af4:	movs	r3, #1
      m_curSector = sector;
    9af6:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9af8:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9afa:	mov	r1, r6
    9afc:	mov	r0, r4
    9afe:	bl	9954 <SdioCard::readData(unsigned char*)>
    9b02:	cmp	r0, #0
    9b04:	beq.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9b06:	ldr	r3, [r4, #4]
  return true;
    9b08:	mov	r5, r0
    m_curSector++;
    9b0a:	adds	r3, #1
    9b0c:	str	r3, [r4, #4]
    9b0e:	b.n	9aae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    9b10:	.word	0x113a0011
    9b14:	.word	0x200022d0
    9b18:	.word	0x20013fd8

00009b1c <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9b1c:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b1e:	ldr	r2, [pc, #76]	; (9b6c <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    9b20:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    9b22:	mov	r6, r1
  m_curState = IDLE_STATE;
    9b24:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b26:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b28:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b2a:	ldr	r0, [pc, #68]	; (9b70 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9b2c:	bic.w	r3, r3, #65536	; 0x10000
    9b30:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9b32:	bl	8fd8 <cardCommand(unsigned long, unsigned long)>
    9b36:	mov	r4, r0
    9b38:	cbnz	r0, 9b4c <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9b3a:	ldr	r3, [pc, #56]	; (9b74 <SdioCard::stopTransmission(bool)+0x58>)
    9b3c:	movs	r2, #9
    9b3e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b40:	movw	r2, #979	; 0x3d3
    9b44:	ldr	r3, [pc, #48]	; (9b78 <SdioCard::stopTransmission(bool)+0x5c>)
    9b46:	str	r2, [r3, #0]
}
    9b48:	mov	r0, r4
    9b4a:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9b4c:	cmp	r6, #0
    9b4e:	beq.n	9b48 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9b50:	ldr	r0, [pc, #40]	; (9b7c <SdioCard::stopTransmission(bool)+0x60>)
    9b52:	bl	8e6c <yieldTimeout(bool (*)())>
    9b56:	cmp	r0, #0
    9b58:	beq.n	9b48 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9b5a:	ldr	r3, [pc, #24]	; (9b74 <SdioCard::stopTransmission(bool)+0x58>)
    9b5c:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9b5e:	mov	r4, r5
  m_errorCode = code;
    9b60:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b62:	movw	r2, #983	; 0x3d7
    9b66:	ldr	r3, [pc, #16]	; (9b78 <SdioCard::stopTransmission(bool)+0x5c>)
    9b68:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9b6a:	b.n	9b48 <SdioCard::stopTransmission(bool)+0x2c>
    9b6c:	.word	0x402c0000
    9b70:	.word	0x0cdb0000
    9b74:	.word	0x200022d0
    9b78:	.word	0x20013fd8
    9b7c:	.word	0x00008ce1

00009b80 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9b80:	push	{r4, lr}
    9b82:	mov	r4, r0
  if (!waitTransferComplete()) {
    9b84:	bl	93f4 <waitTransferComplete()>
    9b88:	cbz	r0, 9b9a <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    9b8a:	ldrb	r3, [r4, #9]
    9b8c:	cbz	r3, 9b9a <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    9b8e:	mov	r0, r4
    9b90:	movs	r1, #1
}
    9b92:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9b96:	b.w	9b1c <SdioCard::stopTransmission(bool)>
}
    9b9a:	pop	{r4, pc}

00009b9c <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    9b9c:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    9b9e:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9ba0:	tst.w	r3, #2031616	; 0x1f0000
    9ba4:	beq.n	9b9e <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9ba6:	ldr	r0, [r0, #116]	; 0x74
	}
    9ba8:	uxtb	r0, r0
    9baa:	bx	lr

00009bac <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    9bac:	push	{r0, r1, r2, r4, r5, lr}
    9bae:	add	r3, sp, #8
    9bb0:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9bb4:	ldrb	r2, [r0, #19]
    9bb6:	mov	r3, r1
    9bb8:	cmp	r2, #0
    9bba:	beq.n	9c30 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    9bbc:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    9bbe:	ldrb	r2, [r0, #19]
    9bc0:	lsls	r1, r2, #31
    9bc2:	bpl.n	9bd6 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9bc4:	mov.w	r4, #3758153728	; 0xe000e000
    9bc8:	ldr	r5, [r0, #20]
    9bca:	ldr.w	r1, [r4, #384]	; 0x180
    9bce:	ands	r1, r5
    9bd0:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9bd2:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    9bd6:	lsls	r5, r2, #30
    9bd8:	bpl.n	9bec <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    9bda:	mov.w	r4, #3758153728	; 0xe000e000
    9bde:	ldr	r5, [r0, #24]
    9be0:	ldr.w	r1, [r4, #388]	; 0x184
    9be4:	ands	r1, r5
    9be6:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9be8:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    9bec:	lsls	r4, r2, #29
    9bee:	bpl.n	9c02 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9bf0:	mov.w	r4, #3758153728	; 0xe000e000
    9bf4:	ldr	r5, [r0, #28]
    9bf6:	ldr.w	r1, [r4, #392]	; 0x188
    9bfa:	ands	r1, r5
    9bfc:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    9bfe:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    9c02:	lsls	r1, r2, #28
    9c04:	bpl.n	9c18 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    9c06:	mov.w	r4, #3758153728	; 0xe000e000
    9c0a:	ldr	r5, [r0, #32]
    9c0c:	ldr.w	r1, [r4, #396]	; 0x18c
    9c10:	ands	r1, r5
    9c12:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    9c14:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    9c18:	lsls	r2, r2, #27
    9c1a:	bpl.n	9c2e <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    9c1c:	mov.w	r1, #3758153728	; 0xe000e000
    9c20:	ldr	r4, [r0, #36]	; 0x24
    9c22:	ldr.w	r2, [r1, #400]	; 0x190
    9c26:	ands	r2, r4
    9c28:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    9c2a:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    9c2e:	cpsie	i
		if (settings.clock() != _clock) {
    9c30:	ldr	r2, [r0, #8]
    9c32:	cmp	r3, r2
    9c34:	beq.n	9c84 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    9c36:	ldr	r2, [pc, #112]	; (9ca8 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    9c38:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    9c3a:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9c3c:	ldr	r1, [pc, #108]	; (9cac <SPIClass::beginTransaction(SPISettings)+0x100>)
    9c3e:	ubfx	r4, r2, #4, #2
    9c42:	ubfx	r2, r2, #26, #3
    9c46:	ldr.w	r4, [r1, r4, lsl #2]
    9c4a:	adds	r2, #1
    9c4c:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    9c50:	cbz	r3, 9c9e <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    9c52:	cmp	r3, r1
    9c54:	bhi.n	9c6e <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    9c56:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    9c5a:	udiv	r1, r1, r2
    9c5e:	cmp	r3, r1
    9c60:	bcs.n	9c64 <SPIClass::beginTransaction(SPISettings)+0xb8>
    9c62:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    9c64:	cmp.w	r2, #258	; 0x102
    9c68:	bcs.n	9c72 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    9c6a:	cmp	r2, #2
    9c6c:	bhi.n	9c76 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    9c6e:	movs	r3, #0
    9c70:	b.n	9c78 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    9c72:	movw	r2, #257	; 0x101
				div = d-2;
    9c76:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9c78:	lsrs	r1, r3, #1
    9c7a:	lsls	r2, r1, #16
    9c7c:	orr.w	r2, r2, r1, lsl #8
    9c80:	orrs	r3, r2
    9c82:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9c84:	ldr	r3, [r0, #0]
		port().CR = 0;
    9c86:	movs	r2, #0
    9c88:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    9c8a:	movs	r2, #3
    9c8c:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    9c8e:	ldr	r2, [r0, #12]
    9c90:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    9c92:	ldr	r2, [sp, #4]
    9c94:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9c96:	movs	r2, #1
    9c98:	str	r2, [r3, #16]
	}
    9c9a:	add	sp, #12
    9c9c:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    9c9e:	cmp	r4, r2
    9ca0:	bcc.n	9c78 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9ca2:	mov	r2, r1
    9ca4:	b.n	9c62 <SPIClass::beginTransaction(SPISettings)+0xb6>
    9ca6:	nop
    9ca8:	.word	0x400fc000
    9cac:	.word	0x20000604

00009cb0 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9cb0:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    9cb4:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    9cb6:	ldr	r0, [r0, #0]
    9cb8:	bl	9bac <SPIClass::beginTransaction(SPISettings)>
}
    9cbc:	pop	{r3, pc}

00009cbe <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    9cbe:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9cc0:	ldrb	r2, [r3, #19]
    9cc2:	cbz	r2, 9d0a <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9cc4:	lsls	r0, r2, #31
    9cc6:	bpl.n	9cd2 <SdSpiArduinoDriver::deactivate()+0x14>
    9cc8:	ldr	r0, [r3, #40]	; 0x28
    9cca:	mov.w	r1, #3758153728	; 0xe000e000
    9cce:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9cd2:	lsls	r1, r2, #30
    9cd4:	bpl.n	9ce0 <SdSpiArduinoDriver::deactivate()+0x22>
    9cd6:	ldr	r0, [r3, #44]	; 0x2c
    9cd8:	mov.w	r1, #3758153728	; 0xe000e000
    9cdc:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9ce0:	lsls	r0, r2, #29
    9ce2:	bpl.n	9cee <SdSpiArduinoDriver::deactivate()+0x30>
    9ce4:	ldr	r0, [r3, #48]	; 0x30
    9ce6:	mov.w	r1, #3758153728	; 0xe000e000
    9cea:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    9cee:	lsls	r1, r2, #28
    9cf0:	bpl.n	9cfc <SdSpiArduinoDriver::deactivate()+0x3e>
    9cf2:	ldr	r0, [r3, #52]	; 0x34
    9cf4:	mov.w	r1, #3758153728	; 0xe000e000
    9cf8:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    9cfc:	lsls	r2, r2, #27
    9cfe:	bpl.n	9d0a <SdSpiArduinoDriver::deactivate()+0x4c>
    9d00:	ldr	r2, [r3, #56]	; 0x38
    9d02:	mov.w	r3, #3758153728	; 0xe000e000
    9d06:	str.w	r2, [r3, #272]	; 0x110
}
    9d0a:	bx	lr

00009d0c <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    9d0c:	ldr	r0, [r0, #0]
    9d0e:	b.w	4b52 <SPIClass::end()>

00009d12 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    9d12:	ldr	r3, [r0, #0]
    9d14:	movs	r1, #255	; 0xff
    9d16:	ldr	r0, [r3, #0]
    9d18:	b.w	9b9c <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009d1c <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9d1c:	push	{r0, r1, r2, r4, r5, lr}
    9d1e:	mov	r4, r1
    9d20:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    9d22:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    9d24:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    9d26:	mov	r0, r4
    9d28:	bl	9d8c <memset>
		transfer(buf, buf, count);
    9d2c:	ldr	r0, [r5, #0]
    9d2e:	ldr	r3, [sp, #4]
    9d30:	mov	r2, r4
    9d32:	mov	r1, r4
    9d34:	bl	4afc <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    9d38:	movs	r0, #0
    9d3a:	add	sp, #12
    9d3c:	pop	{r4, r5, pc}

00009d3e <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    9d3e:	ldr	r3, [r0, #0]
    9d40:	ldr	r0, [r3, #0]
    9d42:	b.w	9b9c <SPIClass::transfer(unsigned char) [clone .isra.0]>

00009d46 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    9d46:	subs	r3, r2, #1
    9d48:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    9d4c:	push	{r4, r5, r6, lr}
    9d4e:	mov	r6, r0
    9d50:	sub.w	sp, sp, #512	; 0x200
    9d54:	mov	r4, r1
    9d56:	mov	r5, r2
  if (0 < count && count <= 512) {
    9d58:	bcc.n	9d6e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    9d5a:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    9d5c:	cmp	r4, r5
    9d5e:	beq.n	9d80 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9d60:	ldr	r3, [r6, #0]
    9d62:	ldrb.w	r1, [r4], #1
    9d66:	ldr	r0, [r3, #0]
    9d68:	bl	9b9c <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    9d6c:	b.n	9d5c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    9d6e:	mov	r0, sp
    9d70:	bl	9dd0 <memcpy>
    9d74:	mov	r2, sp
    9d76:	mov	r3, r5
    9d78:	ldr	r0, [r6, #0]
    9d7a:	mov	r1, r2
    9d7c:	bl	4afc <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9d80:	add.w	sp, sp, #512	; 0x200
    9d84:	pop	{r4, r5, r6, pc}

00009d86 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9d86:	b.w	ba24 <digitalWrite>
	...

00009d8c <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    9d8c:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    9d8e:	cbz	r2, 9dcc <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9d90:	cmp	r2, #16
    blt     .L_bytewise
    9d92:	blt.n	9dc4 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    9d94:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9d98:	cbz	r3, 9da8 <memset+0x1c>
    rsb     r3, #8
    9d9a:	rsb	r3, r3, #8
    subs    r2, r3
    9d9e:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9da0:	subs	r3, #1
    strb    r1, [r0], #1
    9da2:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    9da6:	bgt.n	9da0 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9da8:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    9daa:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    9dae:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    9db2:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    9db4:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    9db6:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9db8:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    9dbc:	bgt.n	9db6 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    9dbe:	ands.w	r2, r2, #7
    beq     .L_done
    9dc2:	beq.n	9dcc <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    9dc4:	subs	r2, #1
    strb    r1, [r0], #1
    9dc6:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    9dca:	bgt.n	9dc4 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    9dcc:	pop	{r0, pc}
    9dce:	nop

00009dd0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9dd0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9dd2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9dd6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9dda:	bne.n	9eb8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9ddc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9dde:	bcc.n	9e64 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9de0:	ldr.w	r3, [r1], #4
    9de4:	str.w	r3, [r0], #4
    9de8:	ldr.w	r3, [r1], #4
    9dec:	str.w	r3, [r0], #4
    9df0:	ldr.w	r3, [r1], #4
    9df4:	str.w	r3, [r0], #4
    9df8:	ldr.w	r3, [r1], #4
    9dfc:	str.w	r3, [r0], #4
    9e00:	ldr.w	r3, [r1], #4
    9e04:	str.w	r3, [r0], #4
    9e08:	ldr.w	r3, [r1], #4
    9e0c:	str.w	r3, [r0], #4
    9e10:	ldr.w	r3, [r1], #4
    9e14:	str.w	r3, [r0], #4
    9e18:	ldr.w	r3, [r1], #4
    9e1c:	str.w	r3, [r0], #4
    9e20:	ldr.w	r3, [r1], #4
    9e24:	str.w	r3, [r0], #4
    9e28:	ldr.w	r3, [r1], #4
    9e2c:	str.w	r3, [r0], #4
    9e30:	ldr.w	r3, [r1], #4
    9e34:	str.w	r3, [r0], #4
    9e38:	ldr.w	r3, [r1], #4
    9e3c:	str.w	r3, [r0], #4
    9e40:	ldr.w	r3, [r1], #4
    9e44:	str.w	r3, [r0], #4
    9e48:	ldr.w	r3, [r1], #4
    9e4c:	str.w	r3, [r0], #4
    9e50:	ldr.w	r3, [r1], #4
    9e54:	str.w	r3, [r0], #4
    9e58:	ldr.w	r3, [r1], #4
    9e5c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9e60:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9e62:	bcs.n	9de0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9e64:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9e66:	bcc.n	9e8c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9e68:	ldr.w	r3, [r1], #4
    9e6c:	str.w	r3, [r0], #4
    9e70:	ldr.w	r3, [r1], #4
    9e74:	str.w	r3, [r0], #4
    9e78:	ldr.w	r3, [r1], #4
    9e7c:	str.w	r3, [r0], #4
    9e80:	ldr.w	r3, [r1], #4
    9e84:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9e88:	subs	r2, #16
	bhs	.Lmid_block_loop
    9e8a:	bcs.n	9e68 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9e8c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    9e8e:	bcc.n	9e9c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9e90:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9e94:	str.w	r3, [r0], #4
	subs	r2, #4
    9e98:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9e9a:	bcs.n	9e90 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9e9c:	adds	r2, #4
	beq	.Ldone
    9e9e:	beq.n	9eb2 <memcpy+0xe2>

	lsls	r2, r2, #31
    9ea0:	lsls	r2, r2, #31
	itt ne
    9ea2:	itt	ne
	ldrbne  r3, [r1], #1
    9ea4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9ea8:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9eac:	bcc.n	9eb2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    9eae:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9eb0:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9eb2:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9eb4:	bx	lr
    9eb6:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9eb8:	cmp	r2, #8
	blo	.Lbyte_copy
    9eba:	bcc.n	9ee4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    9ebc:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    9ebe:	beq.n	9ddc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9ec0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9ec4:	beq.n	9ddc <memcpy+0xc>

	rsb	r3, #4
    9ec6:	rsb	r3, r3, #4
	subs	r2, r3
    9eca:	subs	r2, r2, r3

	lsls    r3, r3, #31
    9ecc:	lsls	r3, r3, #31
	itt ne
    9ece:	itt	ne
	ldrbne  r3, [r1], #1
    9ed0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9ed4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9ed8:	bcc.n	9ddc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    9eda:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    9ede:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9ee2:	b.n	9ddc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9ee4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9ee6:	bcc.n	9e9c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9ee8:	subs	r2, #1
	ldrb    r3, [r1], #1
    9eea:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9eee:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9ef2:	bcs.n	9ee8 <memcpy+0x118>

	ldrb	r3, [r1]
    9ef4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9ef6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9ef8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9efa:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9efc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9efe:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9f00:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9f02:	bx	lr

00009f04 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9f04:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9f06:	ldr	r4, [pc, #80]	; (9f58 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9f08:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9f0c:	ldr	r5, [pc, #76]	; (9f5c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9f0e:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9f12:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9f16:	ldr	r7, [pc, #72]	; (9f60 <rx_queue_transfer+0x5c>)
    9f18:	add.w	r5, r5, r0, lsl #5
{
    9f1c:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9f1e:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9f22:	mov	r1, r4
    9f24:	ldrh	r2, [r7, #0]
    9f26:	mov	r0, r5
    9f28:	bl	afa8 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    9f2c:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9f2e:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9f30:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9f34:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    9f38:	adds	r4, #32
	} while (location < end_addr);
    9f3a:	cmp	r3, r4
    9f3c:	bhi.n	9f34 <rx_queue_transfer+0x30>
	asm("dsb");
    9f3e:	dsb	sy
	asm("isb");
    9f42:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9f46:	movs	r0, #3
    9f48:	mov	r1, r5
    9f4a:	bl	aff8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9f4e:	mov.w	r3, #131072	; 0x20000
    9f52:	str.w	r3, [r6, #268]	; 0x10c
}
    9f56:	pop	{r3, r4, r5, r6, r7, pc}
    9f58:	.word	0x20004b40
    9f5c:	.word	0x20005b40
    9f60:	.word	0x200213ec

00009f64 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9f64:	ldr	r3, [r0, #4]
    9f66:	ldr	r2, [pc, #136]	; (9ff0 <rx_event+0x8c>)
    9f68:	ubfx	r3, r3, #16, #15
{
    9f6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9f70:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9f72:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9f74:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9f76:	cmp	r4, #0
    9f78:	ble.n	9fc2 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    9f7a:	ldr	r2, [pc, #120]	; (9ff4 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9f7c:	uxth.w	sl, r4
		if (head != rx_tail) {
    9f80:	ldr	r0, [pc, #116]	; (9ff8 <rx_event+0x94>)
		uint32_t head = rx_head;
    9f82:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    9f84:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9f86:	uxtb	r3, r1
		if (head != rx_tail) {
    9f88:	ldr.w	r8, [pc, #128]	; a00c <rx_event+0xa8>
    9f8c:	cmp	r1, r0
    9f8e:	ldr	r7, [pc, #108]	; (9ffc <rx_event+0x98>)
    9f90:	ldr	r1, [pc, #108]	; (a000 <rx_event+0x9c>)
    9f92:	beq.n	9fcc <rx_event+0x68>
			uint32_t ii = rx_list[head];
    9f94:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    9f98:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9f9c:	rsb	r0, r6, #512	; 0x200
    9fa0:	cmp	r4, r0
    9fa2:	bhi.n	9fcc <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9fa4:	ldr	r3, [pc, #92]	; (a004 <rx_event+0xa0>)
    9fa6:	add.w	r0, r6, r9, lsl #9
    9faa:	mov	r2, r4
				rx_count[ii] = count + len;
    9fac:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9fae:	add.w	r1, r3, r5, lsl #9
    9fb2:	add	r0, r3
    9fb4:	bl	9dd0 <memcpy>
				rx_available += len;
    9fb8:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    9fba:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    9fbe:	add	r3, r4
    9fc0:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9fc2:	mov	r0, r5
	}
}
    9fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    9fc8:	b.w	9f04 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    9fcc:	adds	r3, #1
		rx_index[i] = 0;
    9fce:	movs	r6, #0
    9fd0:	ldr	r0, [pc, #52]	; (a008 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    9fd2:	cmp	r3, #9
		rx_count[i] = len;
    9fd4:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    9fd8:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    9fdc:	it	cs
    9fde:	movcs	r3, r6
		rx_list[head] = i;
    9fe0:	strb	r5, [r1, r3]
		rx_head = head;
    9fe2:	uxtb	r3, r3
    9fe4:	strb	r3, [r2, #0]
		rx_available += len;
    9fe6:	ldr	r3, [r7, #0]
    9fe8:	add	r4, r3
    9fea:	str	r4, [r7, #0]
}
    9fec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ff0:	.word	0x200213ec
    9ff4:	.word	0x200215cb
    9ff8:	.word	0x200215db
    9ffc:	.word	0x20020cb8
    a000:	.word	0x200215cd
    a004:	.word	0x20004b40
    a008:	.word	0x200213dc
    a00c:	.word	0x200213cc

0000a010 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a010:	ldr	r3, [pc, #112]	; (a084 <usb_serial_flush_callback+0x74>)
{
    a012:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a016:	ldrb	r2, [r3, #0]
    a018:	and.w	r3, r2, #255	; 0xff
    a01c:	cbnz	r2, a07e <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a01e:	ldr	r2, [pc, #104]	; (a088 <usb_serial_flush_callback+0x78>)
    a020:	ldrb	r2, [r2, #0]
    a022:	cbz	r2, a07e <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a024:	ldr	r7, [pc, #100]	; (a08c <usb_serial_flush_callback+0x7c>)
    a026:	ldrh	r5, [r7, #0]
    a028:	cbz	r5, a07e <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a02a:	ldr	r6, [pc, #100]	; (a090 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a02c:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a030:	ldr	r1, [pc, #96]	; (a094 <usb_serial_flush_callback+0x84>)
    a032:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a034:	ldr	r4, [pc, #96]	; (a098 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a036:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a03a:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a03e:	mov	r2, r5
    a040:	mov	r0, r8
    a042:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a044:	add	r5, r4
    a046:	bl	afa8 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a04a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a04e:	mov.w	r3, #3758153728	; 0xe000e000
    a052:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a056:	adds	r4, #32
	} while (location < end_addr);
    a058:	cmp	r5, r4
    a05a:	bhi.n	a052 <usb_serial_flush_callback+0x42>
	asm("dsb");
    a05c:	dsb	sy
	asm("isb");
    a060:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a064:	movs	r0, #3
    a066:	mov	r1, r8
    a068:	bl	afd4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a06c:	ldrb	r3, [r6, #0]
    a06e:	movs	r2, #0
    a070:	adds	r3, #1
	tx_available = 0;
    a072:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a074:	uxtb	r3, r3
    a076:	cmp	r3, #3
    a078:	ite	ls
    a07a:	strbls	r3, [r6, #0]
    a07c:	strbhi	r2, [r6, #0]
}
    a07e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a082:	nop
    a084:	.word	0x200215e1
    a088:	.word	0x200215e3
    a08c:	.word	0x20021470
    a090:	.word	0x200215df
    a094:	.word	0x20005cc0
    a098:	.word	0x20005dc0

0000a09c <usb_serial_reset>:
}
    a09c:	bx	lr
	...

0000a0a0 <usb_serial_configure>:
	if (usb_high_speed) {
    a0a0:	ldr	r3, [pc, #180]	; (a158 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0a2:	movs	r2, #128	; 0x80
    a0a4:	movs	r1, #0
    a0a6:	ldr	r0, [pc, #180]	; (a15c <usb_serial_configure+0xbc>)
{
    a0a8:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a0aa:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a0ac:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a0ae:	ldr	r5, [pc, #176]	; (a160 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a0b0:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a0b2:	ldr	r6, [pc, #176]	; (a164 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a0b4:	ite	eq
    a0b6:	moveq	r3, #64	; 0x40
    a0b8:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a0bc:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a0be:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0c0:	bl	9d8c <memset>
	tx_head = 0;
    a0c4:	ldr	r3, [pc, #160]	; (a168 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0c6:	mov.w	r2, #256	; 0x100
    a0ca:	mov	r1, r4
    a0cc:	ldr	r0, [pc, #156]	; (a16c <usb_serial_configure+0xcc>)
	tx_head = 0;
    a0ce:	strb	r4, [r3, #0]
	tx_available = 0;
    a0d0:	ldr	r3, [pc, #156]	; (a170 <usb_serial_configure+0xd0>)
    a0d2:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0d4:	bl	9d8c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a0d8:	movs	r2, #16
    a0da:	mov	r1, r4
    a0dc:	ldr	r0, [pc, #148]	; (a174 <usb_serial_configure+0xd4>)
    a0de:	bl	9d8c <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a0e2:	movs	r2, #16
    a0e4:	mov	r1, r4
    a0e6:	ldr	r0, [pc, #144]	; (a178 <usb_serial_configure+0xd8>)
    a0e8:	bl	9d8c <memset>
	rx_head = 0;
    a0ec:	ldr	r3, [pc, #140]	; (a17c <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0ee:	mov	r2, r4
    a0f0:	movs	r1, #16
	rx_head = 0;
    a0f2:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0f4:	movs	r0, #2
	rx_tail = 0;
    a0f6:	ldr	r3, [pc, #136]	; (a180 <usb_serial_configure+0xe0>)
    a0f8:	strb	r4, [r3, #0]
	rx_available = 0;
    a0fa:	ldr	r3, [pc, #136]	; (a184 <usb_serial_configure+0xe4>)
    a0fc:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a0fe:	mov	r3, r4
    a100:	bl	af68 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a104:	ldr	r3, [pc, #128]	; (a188 <usb_serial_configure+0xe8>)
    a106:	mov	r2, r4
    a108:	ldrh	r1, [r6, #0]
    a10a:	movs	r0, #3
    a10c:	bl	af28 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a110:	mov	r3, r4
    a112:	movs	r2, #1
    a114:	ldrh	r1, [r5, #0]
    a116:	movs	r0, #3
    a118:	bl	af68 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a11c:	mov	r0, r4
    a11e:	adds	r4, #1
    a120:	bl	9f04 <rx_queue_transfer>
    a124:	cmp	r4, #8
    a126:	bne.n	a11c <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a128:	ldr	r3, [pc, #96]	; (a18c <usb_serial_configure+0xec>)
    a12a:	ldr	r2, [pc, #100]	; (a190 <usb_serial_configure+0xf0>)
    a12c:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a12e:	movs	r2, #0
    a130:	ldr	r3, [pc, #96]	; (a194 <usb_serial_configure+0xf4>)
    a132:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a136:	movs	r2, #74	; 0x4a
    a138:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a13c:	ldr.w	r2, [r3, #328]	; 0x148
    a140:	orr.w	r2, r2, #16777216	; 0x1000000
    a144:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a148:	ldr	r3, [pc, #76]	; (a198 <usb_serial_configure+0xf8>)
    a14a:	cbz	r3, a156 <usb_serial_configure+0xb6>
    a14c:	ldr	r2, [pc, #76]	; (a19c <usb_serial_configure+0xfc>)
    a14e:	ldrb	r3, [r2, #0]
    a150:	orr.w	r3, r3, #1
    a154:	strb	r3, [r2, #0]
}
    a156:	pop	{r4, r5, r6, pc}
    a158:	.word	0x200215e4
    a15c:	.word	0x20005cc0
    a160:	.word	0x20021472
    a164:	.word	0x200213ec
    a168:	.word	0x200215df
    a16c:	.word	0x20005b40
    a170:	.word	0x20021470
    a174:	.word	0x200213cc
    a178:	.word	0x200213dc
    a17c:	.word	0x200215cb
    a180:	.word	0x200215db
    a184:	.word	0x20020cb8
    a188:	.word	0x00009f65
    a18c:	.word	0x20021398
    a190:	.word	0x0000a011
    a194:	.word	0x402e0000
    a198:	.word	0x00000000
    a19c:	.word	0x200215e6

0000a1a0 <usb_serial_read>:
{
    a1a0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1a4:	mov.w	r3, #3758153728	; 0xe000e000
    a1a8:	mov.w	r2, #131072	; 0x20000
{
    a1ac:	mov	r7, r0
    a1ae:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a1b0:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a1b4:	movs	r5, #0
	uint32_t tail = rx_tail;
    a1b6:	ldr	r3, [pc, #160]	; (a258 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a1b8:	ldr.w	fp, [pc, #176]	; a26c <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a1bc:	ldrb	r4, [r3, #0]
    a1be:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a1c0:	cmp	r5, r8
    a1c2:	bcs.n	a1cc <usb_serial_read+0x2c>
    a1c4:	ldr	r3, [pc, #148]	; (a25c <usb_serial_read+0xbc>)
    a1c6:	ldrb	r2, [r3, #0]
    a1c8:	cmp	r2, r4
    a1ca:	bne.n	a1e0 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a1cc:	mov.w	r3, #3758153728	; 0xe000e000
    a1d0:	mov.w	r2, #131072	; 0x20000
}
    a1d4:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a1d6:	str.w	r2, [r3, #268]	; 0x10c
}
    a1da:	add	sp, #12
    a1dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a1e0:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a1e2:	ldr	r3, [pc, #124]	; (a260 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a1e4:	ldr	r0, [pc, #124]	; (a264 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a1e6:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a1ea:	cmp	r4, #9
    a1ec:	ldr.w	sl, [pc, #128]	; a270 <usb_serial_read+0xd0>
    a1f0:	it	cs
    a1f2:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a1f4:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a1f8:	ldrh.w	r1, [fp, r9, lsl #1]
    a1fc:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a200:	ldr	r0, [pc, #100]	; (a268 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a202:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a204:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a208:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a20a:	add	r1, r0
		if (avail > len) {
    a20c:	bcs.n	a234 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a20e:	mov	r0, r7
    a210:	str	r2, [sp, #4]
    a212:	bl	9dd0 <memcpy>
			rx_available -= len;
    a216:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a21a:	ldr	r2, [sp, #4]
			rx_available -= len;
    a21c:	sub.w	r1, r1, r8
    a220:	add	r1, r5
    a222:	mov	r5, r8
    a224:	str.w	r1, [sl]
			rx_index[i] += len;
    a228:	ldrh.w	r1, [fp, r9, lsl #1]
    a22c:	add	r2, r1
    a22e:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a232:	b.n	a1c0 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a234:	mov	r2, r6
    a236:	mov	r0, r7
    a238:	bl	9dd0 <memcpy>
			rx_available -= avail;
    a23c:	ldr.w	r2, [sl]
			rx_tail = tail;
    a240:	ldr	r3, [pc, #20]	; (a258 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a242:	mov	r0, r9
			rx_available -= avail;
    a244:	subs	r2, r2, r6
			p += avail;
    a246:	add	r7, r6
			count += avail;
    a248:	add	r5, r6
			rx_available -= avail;
    a24a:	str.w	r2, [sl]
			rx_tail = tail;
    a24e:	uxtb	r2, r4
    a250:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a252:	bl	9f04 <rx_queue_transfer>
    a256:	b.n	a1c0 <usb_serial_read+0x20>
    a258:	.word	0x200215db
    a25c:	.word	0x200215cb
    a260:	.word	0x200215cd
    a264:	.word	0x200213cc
    a268:	.word	0x20004b40
    a26c:	.word	0x200213dc
    a270:	.word	0x20020cb8

0000a274 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a274:	ldr	r3, [pc, #44]	; (a2a4 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a276:	ldr	r1, [pc, #48]	; (a2a8 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a278:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a27a:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a27c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a27e:	cmp	r2, r1
    a280:	beq.n	a29e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a282:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a284:	ldr	r2, [pc, #36]	; (a2ac <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a286:	cmp	r3, #9
    a288:	it	cs
    a28a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a28c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a28e:	ldr	r3, [pc, #32]	; (a2b0 <usb_serial_peekchar+0x3c>)
    a290:	ldrh.w	r1, [r3, r2, lsl #1]
    a294:	ldr	r3, [pc, #28]	; (a2b4 <usb_serial_peekchar+0x40>)
    a296:	add.w	r3, r3, r2, lsl #9
    a29a:	ldrb	r0, [r3, r1]
    a29c:	bx	lr
	if (tail == rx_head) return -1;
    a29e:	mov.w	r0, #4294967295
}
    a2a2:	bx	lr
    a2a4:	.word	0x200215db
    a2a8:	.word	0x200215cb
    a2ac:	.word	0x200215cd
    a2b0:	.word	0x200213dc
    a2b4:	.word	0x20004b40

0000a2b8 <usb_serial_available>:
	uint32_t n = rx_available;
    a2b8:	ldr	r3, [pc, #12]	; (a2c8 <usb_serial_available+0x10>)
{
    a2ba:	push	{r4, lr}
	uint32_t n = rx_available;
    a2bc:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a2be:	cbnz	r4, a2c4 <usb_serial_available+0xc>
    a2c0:	bl	bf50 <yield>
}
    a2c4:	mov	r0, r4
    a2c6:	pop	{r4, pc}
    a2c8:	.word	0x20020cb8

0000a2cc <usb_serial_flush_input>:
{
    a2cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a2d0:	ldr	r5, [pc, #64]	; (a314 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a2d2:	ldr	r7, [pc, #68]	; (a318 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a2d4:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a2d6:	ldr.w	r8, [pc, #80]	; a328 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a2da:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a2dc:	ldr	r6, [pc, #60]	; (a31c <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a2de:	ldrb	r3, [r7, #0]
    a2e0:	cmp	r3, r4
    a2e2:	bne.n	a2e8 <usb_serial_flush_input+0x1c>
}
    a2e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a2e8:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a2ea:	ldr	r2, [pc, #52]	; (a320 <usb_serial_flush_input+0x54>)
    a2ec:	ldr	r1, [pc, #52]	; (a324 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a2ee:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a2f0:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a2f2:	it	cs
    a2f4:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a2f6:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a2fa:	ldrh.w	r2, [r2, r0, lsl #1]
    a2fe:	ldrh.w	r1, [r1, r0, lsl #1]
    a302:	subs	r2, r2, r1
    a304:	subs	r3, r3, r2
    a306:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a308:	bl	9f04 <rx_queue_transfer>
		rx_tail = tail;
    a30c:	uxtb	r3, r4
    a30e:	strb	r3, [r5, #0]
    a310:	b.n	a2de <usb_serial_flush_input+0x12>
    a312:	nop
    a314:	.word	0x200215db
    a318:	.word	0x200215cb
    a31c:	.word	0x20020cb8
    a320:	.word	0x200213cc
    a324:	.word	0x200213dc
    a328:	.word	0x200215cd

0000a32c <usb_serial_getchar>:
{
    a32c:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a32e:	movs	r1, #1
    a330:	add.w	r0, sp, #7
    a334:	bl	a1a0 <usb_serial_read>
    a338:	cbz	r0, a344 <usb_serial_getchar+0x18>
    a33a:	ldrb.w	r0, [sp, #7]
}
    a33e:	add	sp, #12
    a340:	ldr.w	pc, [sp], #4
	return -1;
    a344:	mov.w	r0, #4294967295
    a348:	b.n	a33e <usb_serial_getchar+0x12>
	...

0000a34c <usb_serial_write>:
	if (!usb_configuration) return 0;
    a34c:	ldr	r3, [pc, #356]	; (a4b4 <usb_serial_write+0x168>)
{
    a34e:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a352:	ldrb	r3, [r3, #0]
{
    a354:	mov	r6, r0
    a356:	mov	r5, r1
	if (!usb_configuration) return 0;
    a358:	and.w	r4, r3, #255	; 0xff
    a35c:	cmp	r3, #0
    a35e:	beq.w	a472 <usb_serial_write+0x126>
	uint32_t sent=0;
    a362:	movs	r4, #0
		tx_noautoflush = 1;
    a364:	ldr.w	fp, [pc, #360]	; a4d0 <usb_serial_write+0x184>
	while (size > 0) {
    a368:	cmp	r5, #0
    a36a:	beq.w	a472 <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a36e:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a370:	ldr.w	r9, [pc, #352]	; a4d4 <usb_serial_write+0x188>
		while (!tx_available) {
    a374:	ldr	r7, [pc, #320]	; (a4b8 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a376:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a37a:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a37e:	ldr	r3, [pc, #316]	; (a4bc <usb_serial_write+0x170>)
    a380:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a384:	movs	r3, #0
		int waiting=0;
    a386:	mov	r8, r3
		while (!tx_available) {
    a388:	ldrh	r1, [r7, #0]
    a38a:	cbnz	r1, a3aa <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a38c:	mov	r0, sl
    a38e:	strd	r3, r1, [sp]
    a392:	bl	b014 <usb_transfer_status>
			if (!(status & 0x80)) {
    a396:	ands.w	r0, r0, #128	; 0x80
    a39a:	ldr	r2, [pc, #292]	; (a4c0 <usb_serial_write+0x174>)
    a39c:	ldrd	r3, r1, [sp]
    a3a0:	bne.n	a44e <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a3a2:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a3a6:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a3a8:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a3aa:	ldrh.w	r8, [r7]
    a3ae:	ldrb.w	r3, [r9]
    a3b2:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a3b6:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a3b8:	mov.w	r2, r3, lsl #11
    a3bc:	add.w	r0, r0, r3, lsl #11
    a3c0:	ldr	r3, [pc, #256]	; (a4c4 <usb_serial_write+0x178>)
    a3c2:	str	r2, [sp, #0]
    a3c4:	add	r0, r3
		if (size >= tx_available) {
    a3c6:	bhi.n	a494 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a3c8:	mov	r2, r8
    a3ca:	mov	r1, r6
    a3cc:	bl	9dd0 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3d0:	ldr	r2, [sp, #0]
    a3d2:	ldr	r3, [pc, #240]	; (a4c4 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a3d4:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3d6:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a3d8:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a3da:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a3dc:	mov.w	r2, #2048	; 0x800
    a3e0:	mov	r1, r8
    a3e2:	bl	afa8 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a3e6:	mov	r1, r8
	asm("dsb");
    a3e8:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a3ec:	add.w	r2, r8, #2048	; 0x800
    a3f0:	add.w	r3, r8, #32
    a3f4:	cmp	r3, r2
    a3f6:	ite	hi
    a3f8:	movhi	r3, #1
    a3fa:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a3fc:	mov.w	r2, #3758153728	; 0xe000e000
    a400:	add.w	r3, r8, r3, lsl #5
    a404:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a408:	adds	r1, #32
	} while (location < end_addr);
    a40a:	cmp	r1, r3
    a40c:	bne.n	a404 <usb_serial_write+0xb8>
	asm("dsb");
    a40e:	dsb	sy
	asm("isb");
    a412:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a416:	movs	r0, #3
    a418:	mov	r1, sl
    a41a:	bl	afd4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a41e:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a422:	ldr	r2, [pc, #164]	; (a4c8 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a424:	adds	r3, #1
    a426:	uxtb	r3, r3
    a428:	cmp	r3, #3
    a42a:	it	hi
    a42c:	movhi	r3, #0
    a42e:	strb.w	r3, [r9]
			size -= tx_available;
    a432:	ldrh	r3, [r7, #0]
    a434:	subs	r5, r5, r3
			sent += tx_available;
    a436:	add	r4, r3
			data += tx_available;
    a438:	add	r6, r3
			tx_available = 0;
    a43a:	movs	r3, #0
    a43c:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a43e:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a442:	dsb	sy
		tx_noautoflush = 0;
    a446:	movs	r3, #0
    a448:	strb.w	r3, [fp]
    a44c:	b.n	a368 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a44e:	dsb	sy
			tx_noautoflush = 0;
    a452:	strb.w	r1, [fp]
			if (!waiting) {
    a456:	cmp.w	r8, #0
    a45a:	bne.n	a460 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a45c:	ldr	r3, [pc, #108]	; (a4cc <usb_serial_write+0x180>)
    a45e:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a460:	ldrb	r1, [r2, #0]
    a462:	cbnz	r1, a472 <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a464:	ldr	r1, [pc, #100]	; (a4cc <usb_serial_write+0x180>)
    a466:	ldr	r1, [r1, #0]
    a468:	subs	r1, r1, r3
    a46a:	cmp	r1, #120	; 0x78
    a46c:	bls.n	a47a <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a46e:	movs	r3, #1
    a470:	strb	r3, [r2, #0]
}
    a472:	mov	r0, r4
    a474:	add	sp, #12
    a476:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a47a:	ldr	r1, [pc, #56]	; (a4b4 <usb_serial_write+0x168>)
    a47c:	ldrb	r1, [r1, #0]
    a47e:	cmp	r1, #0
    a480:	beq.n	a472 <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a482:	mov.w	r8, #1
    a486:	str	r3, [sp, #0]
			yield();
    a488:	bl	bf50 <yield>
			tx_noautoflush = 1;
    a48c:	ldr	r3, [sp, #0]
    a48e:	strb.w	r8, [fp]
    a492:	b.n	a388 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a494:	mov	r2, r5
    a496:	mov	r1, r6
    a498:	bl	9dd0 <memcpy>
			tx_available -= size;
    a49c:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a4a0:	ldr	r3, [pc, #36]	; (a4c8 <usb_serial_write+0x17c>)
    a4a2:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a4a6:	add	r4, r5
			tx_available -= size;
    a4a8:	strh.w	r8, [r7]
			size = 0;
    a4ac:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a4ae:	str.w	r2, [r3, #132]	; 0x84
}
    a4b2:	b.n	a442 <usb_serial_write+0xf6>
    a4b4:	.word	0x200215e3
    a4b8:	.word	0x20021470
    a4bc:	.word	0x20005cc0
    a4c0:	.word	0x200215de
    a4c4:	.word	0x20005dc0
    a4c8:	.word	0x402e0000
    a4cc:	.word	0x20021374
    a4d0:	.word	0x200215e1
    a4d4:	.word	0x200215df

0000a4d8 <usb_serial_putchar>:
{
    a4d8:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a4da:	movs	r1, #1
{
    a4dc:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a4e0:	add.w	r0, sp, #7
    a4e4:	bl	a34c <usb_serial_write>
}
    a4e8:	add	sp, #12
    a4ea:	ldr.w	pc, [sp], #4
	...

0000a4f0 <usb_serial_write_buffer_free>:
{
    a4f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a4f4:	movs	r4, #0
	tx_noautoflush = 1;
    a4f6:	ldr	r7, [pc, #56]	; (a530 <usb_serial_write_buffer_free+0x40>)
    a4f8:	movs	r3, #1
    a4fa:	ldr	r6, [pc, #56]	; (a534 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a4fc:	mov	r5, r4
		if (i == tx_head) continue;
    a4fe:	ldr.w	r8, [pc, #56]	; a538 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a502:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a504:	ldrb.w	r3, [r8]
    a508:	cmp	r3, r4
    a50a:	beq.n	a51a <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a50c:	mov	r0, r6
    a50e:	bl	b014 <usb_transfer_status>
    a512:	lsls	r3, r0, #24
    a514:	it	pl
    a516:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a51a:	adds	r4, #1
    a51c:	adds	r6, #32
    a51e:	cmp	r4, #4
    a520:	bne.n	a504 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a522:	dsb	sy
	tx_noautoflush = 0;
    a526:	movs	r3, #0
}
    a528:	mov	r0, r5
	tx_noautoflush = 0;
    a52a:	strb	r3, [r7, #0]
}
    a52c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a530:	.word	0x200215e1
    a534:	.word	0x20005cc0
    a538:	.word	0x200215df

0000a53c <usb_serial_flush_output>:
{
    a53c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a540:	ldr	r3, [pc, #116]	; (a5b8 <usb_serial_flush_output+0x7c>)
    a542:	ldrb	r3, [r3, #0]
    a544:	cbz	r3, a5b4 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a546:	ldr.w	r8, [pc, #132]	; a5cc <usb_serial_flush_output+0x90>
    a54a:	ldrh.w	r5, [r8]
    a54e:	cbz	r5, a5b4 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a550:	ldr	r7, [pc, #104]	; (a5bc <usb_serial_flush_output+0x80>)
    a552:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a554:	ldr	r6, [pc, #104]	; (a5c0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a556:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a55a:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a55c:	ldr	r2, [pc, #100]	; (a5c4 <usb_serial_flush_output+0x88>)
    a55e:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a560:	ldr	r4, [pc, #100]	; (a5c8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a562:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a566:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a568:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a56c:	movs	r3, #0
    a56e:	mov	r0, r9
    a570:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a572:	add	r5, r4
    a574:	bl	afa8 <usb_prepare_transfer>
	asm("dsb");
    a578:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a57c:	mov.w	r3, #3758153728	; 0xe000e000
    a580:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a584:	adds	r4, #32
	} while (location < end_addr);
    a586:	cmp	r5, r4
    a588:	bhi.n	a580 <usb_serial_flush_output+0x44>
	asm("dsb");
    a58a:	dsb	sy
	asm("isb");
    a58e:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a592:	movs	r0, #3
    a594:	mov	r1, r9
    a596:	bl	afd4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a59a:	ldrb	r3, [r6, #0]
    a59c:	movs	r2, #0
    a59e:	adds	r3, #1
	tx_available = 0;
    a5a0:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a5a4:	uxtb	r3, r3
    a5a6:	cmp	r3, #3
    a5a8:	ite	ls
    a5aa:	strbls	r3, [r6, #0]
    a5ac:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    a5ae:	dsb	sy
	tx_noautoflush = 0;
    a5b2:	strb	r2, [r7, #0]
}
    a5b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a5b8:	.word	0x200215e3
    a5bc:	.word	0x200215e1
    a5c0:	.word	0x200215df
    a5c4:	.word	0x20005cc0
    a5c8:	.word	0x20005dc0
    a5cc:	.word	0x20021470

0000a5d0 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5d0:	ldr	r3, [pc, #512]	; (a7d4 <set_arm_clock+0x204>)
{
    a5d2:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a5d4:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a5d6:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a5d8:	sub.w	r3, r3, #507904	; 0x7c000
    a5dc:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a5de:	ldr	r3, [pc, #504]	; (a7d8 <set_arm_clock+0x208>)
    a5e0:	cmp	r0, r3
    a5e2:	bls.w	a7a4 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a5e6:	ldr	r3, [pc, #500]	; (a7dc <set_arm_clock+0x20c>)
    a5e8:	cmp	r0, r3
    a5ea:	bls.w	a7b6 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a5ee:	ldr	r2, [pc, #496]	; (a7e0 <set_arm_clock+0x210>)
    a5f0:	subs	r3, r0, r3
    a5f2:	udiv	r3, r3, r2
    a5f6:	movs	r2, #25
    a5f8:	muls	r3, r2
    a5fa:	movw	r2, #1575	; 0x627
    a5fe:	addw	r3, r3, #1250	; 0x4e2
    a602:	cmp	r3, r2
    a604:	it	cs
    a606:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a608:	ldr	r6, [pc, #456]	; (a7d4 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a60a:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a60e:	ldr.w	r2, [r6, #128]	; 0x80
    a612:	orr.w	r2, r2, #192	; 0xc0
    a616:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a61a:	movs	r2, #25
    a61c:	udiv	r2, r3, r2
    a620:	and.w	r3, r4, #31
    a624:	cmp	r3, r2
    a626:	bcs.n	a638 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a628:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a62c:	ldr	r3, [pc, #436]	; (a7e4 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a62e:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    a630:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a632:	ldr	r6, [r3, #0]
    a634:	cmp	r6, #0
    a636:	bge.n	a632 <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a638:	ands.w	r3, r1, #33554432	; 0x2000000
    a63c:	bne.n	a690 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a63e:	ldr	r6, [pc, #424]	; (a7e8 <set_arm_clock+0x218>)
    a640:	ldr	r7, [pc, #424]	; (a7ec <set_arm_clock+0x21c>)
    a642:	ldr	r6, [r6, #16]
    a644:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    a646:	cmp	r6, r7
    a648:	itee	eq
    a64a:	moveq	r6, #3
    a64c:	movne	r6, #0
    a64e:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a650:	lsls	r7, r6, #27
    a652:	eor.w	r6, r1, r6, lsl #27
    a656:	tst.w	r6, #939524096	; 0x38000000
    a65a:	beq.n	a666 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a65c:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    a660:	ldr	r6, [pc, #368]	; (a7d4 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a662:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    a664:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a666:	lsls	r6, r3, #12
    a668:	eor.w	r3, r5, r3, lsl #12
    a66c:	tst.w	r3, #12288	; 0x3000
    a670:	beq.n	a682 <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a672:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a676:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    a678:	ldr	r5, [pc, #344]	; (a7d4 <set_arm_clock+0x204>)
    a67a:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a67c:	ldr	r3, [r5, #72]	; 0x48
    a67e:	lsls	r6, r3, #28
    a680:	bmi.n	a67c <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a682:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a686:	ldr	r3, [pc, #332]	; (a7d4 <set_arm_clock+0x204>)
    a688:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a68a:	ldr	r5, [r3, #72]	; 0x48
    a68c:	lsls	r5, r5, #26
    a68e:	bmi.n	a68a <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a690:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a692:	ldr	r7, [pc, #348]	; (a7f0 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    a694:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    a696:	mul.w	r3, r6, r5
    a69a:	muls	r3, r0
    a69c:	cmp	r3, r7
    a69e:	bls.w	a7bc <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6a2:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    a6a6:	ldr	r0, [pc, #332]	; (a7f4 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6a8:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    a6ac:	cmp	r3, r0
    a6ae:	ldr	r0, [pc, #328]	; (a7f8 <set_arm_clock+0x228>)
    a6b0:	bhi.w	a7d0 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a6b4:	udiv	r3, r3, r0
    a6b8:	cmp	r3, #54	; 0x36
    a6ba:	it	cc
    a6bc:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6be:	ldr	r7, [pc, #296]	; (a7e8 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6c0:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6c2:	ldr.w	lr, [pc, #344]	; a81c <set_arm_clock+0x24c>
    a6c6:	ldr.w	ip, [r7]
    a6ca:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a6ce:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6d2:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    a6d6:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6da:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    a6dc:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a6e0:	beq.n	a6f6 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a6e2:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a6e6:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a6ea:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a6ee:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a6f0:	ldr	r3, [r7, #0]
    a6f2:	cmp	r3, #0
    a6f4:	bge.n	a6f0 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a6f6:	ldr	r3, [pc, #220]	; (a7d4 <set_arm_clock+0x204>)
    a6f8:	subs	r5, #1
    a6fa:	ldr	r7, [r3, #16]
    a6fc:	and.w	r7, r7, #7
    a700:	cmp	r7, r5
    a702:	beq.n	a70c <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a704:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a706:	ldr	r5, [r3, #72]	; 0x48
    a708:	lsls	r7, r5, #15
    a70a:	bmi.n	a706 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a70c:	subs	r3, r6, #1
    a70e:	lsls	r5, r3, #10
    a710:	eor.w	r3, r1, r3, lsl #10
    a714:	tst.w	r3, #7168	; 0x1c00
    a718:	beq.n	a72e <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a71a:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a71e:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a722:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    a724:	ldr	r3, [pc, #172]	; (a7d4 <set_arm_clock+0x204>)
    a726:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a728:	ldr	r5, [r3, #72]	; 0x48
    a72a:	lsls	r5, r5, #30
    a72c:	bmi.n	a728 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a72e:	ldr	r3, [pc, #204]	; (a7fc <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    a730:	ldr	r5, [pc, #204]	; (a800 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a732:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    a734:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a736:	itet	ls
    a738:	ldrls	r5, [pc, #200]	; (a804 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    a73a:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a73c:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a740:	subs	r6, r3, #1
    a742:	lsls	r5, r6, #8
    a744:	eor.w	r6, r1, r6, lsl #8
    a748:	tst.w	r6, #768	; 0x300
    a74c:	ldr	r6, [pc, #132]	; (a7d4 <set_arm_clock+0x204>)
    a74e:	beq.n	a75c <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a750:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a754:	and.w	r5, r5, #768	; 0x300
    a758:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a75a:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a75c:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a75e:	ldr	r5, [pc, #116]	; (a7d4 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a760:	bic.w	r1, r1, #33554432	; 0x2000000
    a764:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a766:	ldr	r1, [r5, #72]	; 0x48
    a768:	lsls	r1, r1, #26
    a76a:	bmi.n	a766 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    a76c:	ldr	r1, [pc, #152]	; (a808 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    a76e:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    a772:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    a774:	ldr	r1, [pc, #148]	; (a80c <set_arm_clock+0x23c>)
    a776:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a778:	mov.w	r3, #4294967295
    a77c:	ldr	r1, [pc, #144]	; (a810 <set_arm_clock+0x240>)
    a77e:	udiv	r1, r0, r1
    a782:	udiv	r3, r3, r1
    a786:	ldr	r1, [pc, #140]	; (a814 <set_arm_clock+0x244>)
    a788:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a78a:	and.w	r3, r4, #31
    a78e:	cmp	r2, r3
    a790:	bcs.n	a7a2 <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a792:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a796:	ldr	r3, [pc, #76]	; (a7e4 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a798:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    a79a:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a79c:	ldr	r2, [r3, #0]
    a79e:	cmp	r2, #0
    a7a0:	bge.n	a79c <set_arm_clock+0x1cc>
	}

	return frequency;
}
    a7a2:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    a7a4:	ldr	r6, [pc, #112]	; (a818 <set_arm_clock+0x248>)
    a7a6:	movw	r3, #1150	; 0x47e
    a7aa:	movw	r2, #950	; 0x3b6
    a7ae:	cmp	r0, r6
    a7b0:	it	ls
    a7b2:	movls	r3, r2
    a7b4:	b.n	a608 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    a7b6:	movw	r3, #1250	; 0x4e2
    a7ba:	b.n	a608 <set_arm_clock+0x38>
		if (div_arm < 8) {
    a7bc:	cmp	r5, #8
    a7be:	beq.n	a7c4 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    a7c0:	adds	r5, #1
    a7c2:	b.n	a696 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    a7c4:	cmp	r6, #4
    a7c6:	bhi.w	a6a2 <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    a7ca:	adds	r6, #1
				div_arm = 1;
    a7cc:	movs	r5, #1
    a7ce:	b.n	a696 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    a7d0:	movs	r3, #108	; 0x6c
    a7d2:	b.n	a6be <set_arm_clock+0xee>
    a7d4:	.word	0x400fc000
    a7d8:	.word	0x1f78a400
    a7dc:	.word	0x23c34600
    a7e0:	.word	0x01ab3f00
    a7e4:	.word	0x40080000
    a7e8:	.word	0x400d8000
    a7ec:	.word	0x80003040
    a7f0:	.word	0x269fb1ff
    a7f4:	.word	0x4df67eff
    a7f8:	.word	0x00b71b00
    a7fc:	.word	0x08f0d17f
    a800:	.word	0x2cb4177f
    a804:	.word	0x08f0d180
    a808:	.word	0x20001ce8
    a80c:	.word	0x20001ce4
    a810:	.word	0x000f4240
    a814:	.word	0x20020ce0
    a818:	.word	0x016e3600
    a81c:	.word	0x8001307f

0000a820 <endpoint0_receive>:
{
    a820:	push	{r4, r5, lr}
    a822:	ldr	r4, [pc, #136]	; (a8ac <endpoint0_receive+0x8c>)
	if (len > 0) {
    a824:	cbz	r1, a868 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a826:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a828:	ldr	r3, [pc, #132]	; (a8b0 <endpoint0_receive+0x90>)
    a82a:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a82c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a830:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    a832:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a834:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a836:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a83a:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a83c:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a83e:	add.w	r1, r0, #8192	; 0x2000
    a842:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a844:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a848:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a84c:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a84e:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    a850:	movs	r3, #0
    a852:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    a854:	ldr	r3, [pc, #92]	; (a8b4 <endpoint0_receive+0x94>)
    a856:	ldr.w	r1, [r3, #432]	; 0x1b0
    a85a:	orrs	r1, r5
    a85c:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a860:	ldr.w	r1, [r3, #432]	; 0x1b0
    a864:	cmp	r1, #0
    a866:	bne.n	a860 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    a868:	ldr	r3, [pc, #76]	; (a8b8 <endpoint0_receive+0x98>)
    a86a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a86c:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a86e:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    a872:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a874:	movw	r1, #32896	; 0x8080
    a878:	it	eq
    a87a:	moveq	r1, #128	; 0x80
    a87c:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a87e:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    a880:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    a884:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a886:	mov.w	r1, #65537	; 0x10001
    a88a:	ldr	r3, [pc, #40]	; (a8b4 <endpoint0_receive+0x94>)
    a88c:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    a890:	ldr.w	r1, [r3, #432]	; 0x1b0
    a894:	orr.w	r1, r1, #65536	; 0x10000
    a898:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    a89c:	ldr	r1, [pc, #28]	; (a8bc <endpoint0_receive+0x9c>)
    a89e:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    a8a0:	ldr.w	r2, [r3, #432]	; 0x1b0
    a8a4:	cmp	r2, #0
    a8a6:	bne.n	a8a0 <endpoint0_receive+0x80>
}
    a8a8:	pop	{r4, r5, pc}
    a8aa:	nop
    a8ac:	.word	0x20000000
    a8b0:	.word	0x200026e0
    a8b4:	.word	0x402e0000
    a8b8:	.word	0x200026c0
    a8bc:	.word	0x20020b9c

0000a8c0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    a8c0:	ldr	r3, [r0, #56]	; 0x38
{
    a8c2:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    a8c4:	cbz	r3, a8ce <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    a8c6:	ldr	r3, [r2, #4]
    a8c8:	orr.w	r3, r3, #32768	; 0x8000
    a8cc:	str	r3, [r2, #4]
	}
	__disable_irq();
    a8ce:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    a8d0:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    a8d2:	ldr	r3, [pc, #96]	; (a934 <schedule_transfer+0x74>)
    a8d4:	cbz	r4, a920 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    a8d6:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    a8d8:	ldr.w	r4, [r3, #432]	; 0x1b0
    a8dc:	tst	r4, r1
    a8de:	bne.n	a91a <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    a8e0:	ldr	r6, [pc, #84]	; (a938 <schedule_transfer+0x78>)
    a8e2:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    a8e4:	ldr.w	r4, [r3, #320]	; 0x140
    a8e8:	orr.w	r4, r4, #16384	; 0x4000
    a8ec:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    a8f0:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    a8f4:	ldr.w	r5, [r3, #320]	; 0x140
    a8f8:	lsls	r5, r5, #17
    a8fa:	bmi.n	a906 <schedule_transfer+0x46>
    a8fc:	ldr	r5, [r6, #4]
    a8fe:	subs	r5, r5, r7
    a900:	cmp.w	r5, #2400	; 0x960
    a904:	bcc.n	a8e4 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    a906:	ands	r4, r1
    a908:	bne.n	a91a <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    a90a:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    a90e:	ldr	r4, [pc, #36]	; (a934 <schedule_transfer+0x74>)
    a910:	ldr.w	r3, [r4, #432]	; 0x1b0
    a914:	orrs	r3, r1
    a916:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    a91a:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    a91c:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    a91e:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    a920:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    a924:	ldr.w	r4, [r3, #432]	; 0x1b0
    a928:	orrs	r1, r4
    a92a:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    a92e:	str	r2, [r0, #48]	; 0x30
    a930:	b.n	a91a <schedule_transfer+0x5a>
    a932:	nop
    a934:	.word	0x402e0000
    a938:	.word	0xe0001000

0000a93c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    a93c:	push	{r4, r5, r6, lr}
    a93e:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    a940:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    a942:	cbz	r0, a954 <run_callbacks+0x18>
    a944:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    a946:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    a948:	ldr	r3, [r2, #4]
    a94a:	ands.w	r3, r3, #128	; 0x80
    a94e:	beq.n	a956 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    a950:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    a952:	cbnz	r5, a964 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    a954:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    a956:	ldr	r2, [r2, #0]
		count++;
    a958:	adds	r5, #1
		if ((uint32_t)t == 1) {
    a95a:	cmp	r2, #1
    a95c:	bne.n	a948 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    a95e:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    a962:	b.n	a952 <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    a964:	ldr	r6, [r0, #0]
		count--;
    a966:	subs	r5, #1
		ep->callback_function(first);
    a968:	ldr	r3, [r4, #56]	; 0x38
    a96a:	blx	r3
		first = next;
    a96c:	mov	r0, r6
    a96e:	b.n	a952 <run_callbacks+0x16>

0000a970 <usb_endpoint_config>:
{
    a970:	push	{r4, r5, r6, lr}
    a972:	mov	r4, r0
    a974:	mov	r6, r1
    a976:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    a978:	movs	r1, #0
    a97a:	movs	r2, #60	; 0x3c
    a97c:	adds	r0, #4
    a97e:	bl	9d8c <memset>
	qh->next = 1; // Terminate bit = 1
    a982:	movs	r3, #1
	qh->config = config;
    a984:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    a986:	str	r3, [r4, #8]
	qh->callback_function = callback;
    a988:	str	r5, [r4, #56]	; 0x38
}
    a98a:	pop	{r4, r5, r6, pc}

0000a98c <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    a98c:	ldr	r2, [pc, #124]	; (aa0c <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a98e:	push	{r4, lr}
	if (len > 0) {
    a990:	cbz	r1, a9d6 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a992:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a994:	ldr	r3, [pc, #120]	; (aa10 <endpoint0_transmit.constprop.0+0x84>)
    a996:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a998:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a99c:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a99e:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a9a0:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a9a2:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a9a6:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a9a8:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a9aa:	add.w	r1, r0, #8192	; 0x2000
    a9ae:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a9b0:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a9b4:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a9b8:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a9ba:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a9bc:	movs	r3, #0
    a9be:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a9c0:	ldr	r3, [pc, #80]	; (aa14 <endpoint0_transmit.constprop.0+0x88>)
    a9c2:	ldr.w	r1, [r3, #432]	; 0x1b0
    a9c6:	orr.w	r1, r1, #65536	; 0x10000
    a9ca:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a9ce:	ldr.w	r1, [r3, #432]	; 0x1b0
    a9d2:	cmp	r1, #0
    a9d4:	bne.n	a9ce <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    a9d6:	ldr	r3, [pc, #64]	; (aa18 <endpoint0_transmit.constprop.0+0x8c>)
    a9d8:	movs	r1, #1
    a9da:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a9dc:	movs	r1, #128	; 0x80
    a9de:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a9e0:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    a9e2:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    a9e6:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a9e8:	mov.w	r2, #65537	; 0x10001
    a9ec:	ldr	r3, [pc, #36]	; (aa14 <endpoint0_transmit.constprop.0+0x88>)
    a9ee:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a9f2:	ldr.w	r2, [r3, #432]	; 0x1b0
    a9f6:	orr.w	r2, r2, #1
    a9fa:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a9fe:	ldr	r2, [pc, #28]	; (aa1c <endpoint0_transmit.constprop.0+0x90>)
    aa00:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    aa02:	ldr.w	r2, [r3, #432]	; 0x1b0
    aa06:	cmp	r2, #0
    aa08:	bne.n	aa02 <endpoint0_transmit.constprop.0+0x76>
}
    aa0a:	pop	{r4, pc}
    aa0c:	.word	0x20000000
    aa10:	.word	0x200026e0
    aa14:	.word	0x402e0000
    aa18:	.word	0x200026c0
    aa1c:	.word	0x20020b9c

0000aa20 <usb_start_sof_interrupts>:
	__disable_irq();
    aa20:	cpsid	i
	sof_usage |= (1 << interface);
    aa22:	ldr	r2, [pc, #40]	; (aa4c <usb_start_sof_interrupts+0x2c>)
    aa24:	movs	r3, #1
    aa26:	lsl.w	r0, r3, r0
    aa2a:	ldrb	r3, [r2, #0]
    aa2c:	orrs	r0, r3
    aa2e:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    aa30:	ldr	r2, [pc, #28]	; (aa50 <usb_start_sof_interrupts+0x30>)
    aa32:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    aa36:	lsls	r1, r3, #24
    aa38:	bmi.n	aa46 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aa3a:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aa3c:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aa3e:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aa42:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    aa46:	cpsie	i
}
    aa48:	bx	lr
    aa4a:	nop
    aa4c:	.word	0x200215dd
    aa50:	.word	0x402e0000

0000aa54 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    aa54:	movs	r3, #1
    aa56:	ldr	r2, [pc, #32]	; (aa78 <usb_stop_sof_interrupts+0x24>)
    aa58:	lsl.w	r0, r3, r0
    aa5c:	ldrb	r3, [r2, #0]
    aa5e:	bic.w	r0, r3, r0
    aa62:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    aa64:	cbnz	r0, aa74 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    aa66:	ldr	r2, [pc, #20]	; (aa7c <usb_stop_sof_interrupts+0x28>)
    aa68:	ldr.w	r3, [r2, #328]	; 0x148
    aa6c:	bic.w	r3, r3, #128	; 0x80
    aa70:	str.w	r3, [r2, #328]	; 0x148
}
    aa74:	bx	lr
    aa76:	nop
    aa78:	.word	0x200215dd
    aa7c:	.word	0x402e0000

0000aa80 <usb_isr>:
{
    aa80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    aa84:	ldr	r4, [pc, #676]	; (ad2c <usb_isr+0x2ac>)
    aa86:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aa8a:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    aa8c:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    aa90:	bmi.n	aaf8 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    aa92:	lsls	r1, r6, #25
    aa94:	bmi.w	aebe <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    aa98:	lsls	r4, r6, #7
    aa9a:	bpl.n	aaa4 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    aa9c:	ldr	r3, [pc, #656]	; (ad30 <usb_isr+0x2b0>)
    aa9e:	ldr	r3, [r3, #0]
    aaa0:	cbz	r3, aaa4 <usb_isr+0x24>
    aaa2:	blx	r3
	if (status & USB_USBSTS_TI1) {
    aaa4:	lsls	r0, r6, #6
    aaa6:	bpl.n	aab0 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    aaa8:	ldr	r3, [pc, #648]	; (ad34 <usb_isr+0x2b4>)
    aaaa:	ldr	r3, [r3, #0]
    aaac:	cbz	r3, aab0 <usb_isr+0x30>
    aaae:	blx	r3
	if (status & USB_USBSTS_PCI) {
    aab0:	lsls	r1, r6, #29
    aab2:	bpl.n	aac6 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    aab4:	ldr	r3, [pc, #628]	; (ad2c <usb_isr+0x2ac>)
    aab6:	ldr	r2, [pc, #640]	; (ad38 <usb_isr+0x2b8>)
    aab8:	ldr.w	r3, [r3, #388]	; 0x184
    aabc:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    aac0:	it	ne
    aac2:	movne	r3, #1
			usb_high_speed = 0;
    aac4:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    aac6:	ldr	r3, [pc, #612]	; (ad2c <usb_isr+0x2ac>)
    aac8:	ldr.w	r3, [r3, #328]	; 0x148
    aacc:	lsls	r2, r3, #24
    aace:	bpl.w	aeee <usb_isr+0x46e>
    aad2:	lsls	r3, r6, #24
    aad4:	bpl.w	aeee <usb_isr+0x46e>
		if (usb_reboot_timer) {
    aad8:	ldr	r2, [pc, #608]	; (ad3c <usb_isr+0x2bc>)
    aada:	ldrb	r3, [r2, #0]
    aadc:	cmp	r3, #0
    aade:	beq.w	aeee <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    aae2:	subs	r3, #1
    aae4:	uxtb	r3, r3
    aae6:	strb	r3, [r2, #0]
    aae8:	cmp	r3, #0
    aaea:	bne.w	aeee <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    aaee:	movs	r0, #3
    aaf0:	bl	aa54 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    aaf4:	bl	11be8 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    aaf8:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    aafc:	ldr	r7, [pc, #576]	; (ad40 <usb_isr+0x2c0>)
		while (setupstatus) {
    aafe:	cmp	r3, #0
    ab00:	bne.n	ab8a <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    ab02:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    ab06:	cmp	r5, #0
    ab08:	beq.n	aa92 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    ab0a:	ldr	r2, [pc, #568]	; (ad44 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    ab0c:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    ab10:	ldr	r1, [r2, #0]
    ab12:	tst	r5, r1
    ab14:	beq.n	ab4c <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    ab16:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab18:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    ab1c:	ldr	r2, [pc, #552]	; (ad48 <usb_isr+0x2c8>)
    ab1e:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    ab20:	ldrh	r2, [r2, #0]
    ab22:	cmp	r2, r1
    ab24:	bne.w	ae80 <usb_isr+0x400>
    ab28:	uxth	r3, r3
    ab2a:	cbnz	r3, ab4c <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab2c:	ldr	r2, [pc, #540]	; (ad4c <usb_isr+0x2cc>)
    ab2e:	ldr	r3, [pc, #544]	; (ad50 <usb_isr+0x2d0>)
    ab30:	ldr	r0, [r2, #0]
    ab32:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    ab34:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    ab36:	ldrb	r2, [r2, #6]
    ab38:	str	r0, [r3, #0]
    ab3a:	strh	r1, [r3, #4]
    ab3c:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    ab3e:	bne.n	ab4c <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    ab40:	movs	r0, #3
    ab42:	bl	aa20 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    ab46:	ldr	r3, [pc, #500]	; (ad3c <usb_isr+0x2bc>)
    ab48:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    ab4a:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    ab4c:	ldr	r3, [pc, #516]	; (ad54 <usb_isr+0x2d4>)
    ab4e:	ldr	r3, [r3, #0]
			if (completestatus) {
    ab50:	ands	r5, r3
    ab52:	beq.n	aa92 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    ab54:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    ab56:	ldr.w	r8, [pc, #512]	; ad58 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    ab5a:	mov.w	r9, #1
				while (tx) {
    ab5e:	cmp	r4, #0
    ab60:	bne.w	aea2 <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    ab64:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    ab66:	ldr	r7, [pc, #496]	; (ad58 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    ab68:	mov.w	r8, #1
				while(rx) {
    ab6c:	cmp	r5, #0
    ab6e:	beq.n	aa92 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    ab70:	rbit	r4, r5
    ab74:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    ab78:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    ab7c:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    ab80:	bl	a93c <run_callbacks>
					rx &= ~(1<<p);
    ab84:	bic.w	r5, r5, r4
    ab88:	b.n	ab6c <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    ab8a:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    ab8e:	ldr	r3, [pc, #456]	; (ad58 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    ab90:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    ab94:	ldr.w	r2, [r4, #320]	; 0x140
    ab98:	orr.w	r2, r2, #8192	; 0x2000
    ab9c:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    aba0:	ldr.w	r2, [r4, #320]	; 0x140
    aba4:	lsls	r2, r2, #18
    aba6:	bpl.n	ab94 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    aba8:	ldr.w	r2, [r4, #320]	; 0x140
    abac:	bic.w	r2, r2, #8192	; 0x2000
    abb0:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    abb4:	mov.w	r2, #65537	; 0x10001
    abb8:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    abbc:	ldr.w	r2, [r4, #436]	; 0x1b4
    abc0:	ands.w	r8, r2, #65537	; 0x10001
    abc4:	bne.n	abbc <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    abc6:	uxth	r1, r5
    abc8:	ldr	r2, [pc, #376]	; (ad44 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    abca:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    abce:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    abd2:	beq.w	ad0e <usb_isr+0x28e>
    abd6:	bhi.n	ac6e <usb_isr+0x1ee>
    abd8:	movw	r2, #770	; 0x302
    abdc:	cmp	r1, r2
    abde:	beq.w	adb2 <usb_isr+0x332>
    abe2:	bhi.n	ac02 <usb_isr+0x182>
    abe4:	cmp	r1, #130	; 0x82
    abe6:	beq.w	ad7c <usb_isr+0x2fc>
    abea:	cmp.w	r1, #258	; 0x102
    abee:	beq.w	add8 <usb_isr+0x358>
    abf2:	cmp	r1, #128	; 0x80
    abf4:	beq.w	ad1e <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    abf8:	mov.w	r3, #65537	; 0x10001
    abfc:	str.w	r3, [r4, #448]	; 0x1c0
    ac00:	b.n	ad08 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    ac02:	cmp.w	r1, #1280	; 0x500
    ac06:	beq.n	acf2 <usb_isr+0x272>
    ac08:	sub.w	r1, r1, #1664	; 0x680
    ac0c:	cmp	r1, #1
    ac0e:	bhi.n	abf8 <usb_isr+0x178>
    ac10:	ldr	r2, [pc, #328]	; (ad5c <usb_isr+0x2dc>)
    ac12:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ac16:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ac1a:	ldr	r1, [r2, #4]
    ac1c:	cmp	r1, #0
    ac1e:	beq.n	abf8 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ac20:	ldrh.w	lr, [r2]
    ac24:	mov	r0, r5
    ac26:	cmp	lr, r5
    ac28:	bne.w	ae48 <usb_isr+0x3c8>
    ac2c:	ldrh.w	lr, [r2, #2]
    ac30:	cmp	lr, ip
    ac32:	bne.w	ae48 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    ac36:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    ac38:	mov.w	r8, r3, lsr #16
    ac3c:	ldr	r3, [pc, #288]	; (ad60 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    ac3e:	cmp	r5, #3
					datalen = *(list->addr);
    ac40:	ite	eq
    ac42:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    ac44:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    ac46:	cmp	r8, r2
    ac48:	it	cs
    ac4a:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    ac4c:	cmp.w	r0, #512	; 0x200
    ac50:	bne.w	adfa <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac54:	ldr	r2, [pc, #224]	; (ad38 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ac56:	ldr	r1, [pc, #268]	; (ad64 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    ac58:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    ac5a:	mov	r2, r8
    ac5c:	ldr	r0, [pc, #264]	; (ad68 <usb_isr+0x2e8>)
    ac5e:	cmp	r5, #0
    ac60:	it	ne
    ac62:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ac64:	mov	r0, r3
    ac66:	bl	9dd0 <memcpy>
    ac6a:	mov	r3, r0
    ac6c:	b.n	ae1c <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    ac6e:	movw	r2, #8993	; 0x2321
    ac72:	cmp	r1, r2
    ac74:	beq.n	acb8 <usb_isr+0x238>
    ac76:	bhi.n	acc4 <usb_isr+0x244>
    ac78:	movw	r2, #8225	; 0x2021
    ac7c:	cmp	r1, r2
    ac7e:	beq.w	ae66 <usb_isr+0x3e6>
    ac82:	movw	r2, #8737	; 0x2221
    ac86:	cmp	r1, r2
    ac88:	beq.w	ae4c <usb_isr+0x3cc>
    ac8c:	cmp.w	r1, #2304	; 0x900
    ac90:	bne.n	abf8 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    ac92:	ldr	r3, [pc, #216]	; (ad6c <usb_isr+0x2ec>)
    ac94:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    ac98:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    ac9c:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    ac9e:	ldr	r3, [pc, #208]	; (ad70 <usb_isr+0x2f0>)
    aca0:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    aca4:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    aca8:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    acac:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    acb0:	bl	a0a0 <usb_serial_configure>
		usb_mtp_configure();
    acb4:	bl	bc7c <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    acb8:	movs	r2, #0
    acba:	mov	r1, r2
    acbc:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    acbe:	bl	a820 <endpoint0_receive>
			return;
    acc2:	b.n	ad08 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    acc4:	movw	r2, #25633	; 0x6421
    acc8:	cmp	r1, r2
    acca:	beq.w	ae7a <usb_isr+0x3fa>
    acce:	movw	r2, #26529	; 0x67a1
    acd2:	cmp	r1, r2
    acd4:	bne.n	abf8 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    acd6:	cmp.w	r3, #262144	; 0x40000
    acda:	bcc.n	abf8 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    acdc:	ldr	r3, [pc, #148]	; (ad74 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    acde:	movs	r1, #4
    ace0:	ldr	r0, [pc, #104]	; (ad4c <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    ace2:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    ace4:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    ace6:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    ace8:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    acea:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    acee:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    acf0:	b.n	ad18 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    acf2:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    acf4:	mov	r2, r8
    acf6:	mov	r1, r8
    acf8:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    acfa:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    acfc:	bl	a820 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    ad00:	orr.w	r5, r5, #16777216	; 0x1000000
    ad04:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    ad08:	ldr.w	r3, [r4, #428]	; 0x1ac
    ad0c:	b.n	aafe <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    ad0e:	ldr	r3, [pc, #92]	; (ad6c <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    ad10:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    ad12:	ldr	r0, [pc, #100]	; (ad78 <usb_isr+0x2f8>)
    ad14:	ldrb	r3, [r3, #0]
    ad16:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ad18:	bl	a98c <endpoint0_transmit.constprop.0>
				return;
    ad1c:	b.n	ad08 <usb_isr+0x288>
		reply_buffer[0] = 0;
    ad1e:	ldr	r0, [pc, #88]	; (ad78 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    ad20:	movs	r1, #2
		reply_buffer[0] = 0;
    ad22:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    ad26:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    ad2a:	b.n	ad18 <usb_isr+0x298>
    ad2c:	.word	0x402e0000
    ad30:	.word	0x20021398
    ad34:	.word	0x2002139c
    ad38:	.word	0x200215e4
    ad3c:	.word	0x200215e5
    ad40:	.word	0x402e01c0
    ad44:	.word	0x20020b9c
    ad48:	.word	0x20007dc0
    ad4c:	.word	0x200215b9
    ad50:	.word	0x2002138c
    ad54:	.word	0x20020ba0
    ad58:	.word	0x20000000
    ad5c:	.word	0x200009b8
    ad60:	.word	0x20201800
    ad64:	.word	0x6000264c
    ad68:	.word	0x600026b5
    ad6c:	.word	0x200215e3
    ad70:	.word	0x00cc0002
    ad74:	.word	0x200022e3
    ad78:	.word	0x200215c3
		endpoint = setup.wIndex & 0x7F;
    ad7c:	uxth	r0, r3
		if (endpoint > 7) break;
    ad7e:	ands.w	r3, r3, #120	; 0x78
    ad82:	bne.w	abf8 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    ad86:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ad8a:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    ad8c:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    ad90:	ldr	r2, [pc, #352]	; (aef4 <usb_isr+0x474>)
    ad92:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    ad94:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    ad96:	bpl.n	adac <usb_isr+0x32c>
    ad98:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    ad9c:	it	ne
    ad9e:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    ada0:	mov.w	r1, #2
    ada4:	ldr	r0, [pc, #332]	; (aef4 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    ada6:	it	ne
    ada8:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    adaa:	b.n	ad18 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    adac:	tst.w	r1, #1
    adb0:	b.n	ad9c <usb_isr+0x31c>
		if (endpoint > 7) break;
    adb2:	tst.w	r3, #120	; 0x78
    adb6:	uxth	r2, r3
    adb8:	bne.w	abf8 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    adbc:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    adc0:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    adc4:	ldr.w	r2, [r7, r3, lsl #2]
    adc8:	ite	ne
    adca:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    adce:	orreq.w	r2, r2, #1
    add2:	str.w	r2, [r7, r3, lsl #2]
    add6:	b.n	acb8 <usb_isr+0x238>
		if (endpoint > 7) break;
    add8:	tst.w	r3, #120	; 0x78
    addc:	uxth	r2, r3
    adde:	bne.w	abf8 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    ade2:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    ade6:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    adea:	ldr.w	r2, [r7, r3, lsl #2]
    adee:	ite	ne
    adf0:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    adf4:	biceq.w	r2, r2, #1
    adf8:	b.n	add2 <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    adfa:	cmp.w	r0, #1792	; 0x700
    adfe:	bne.n	ae44 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    ae00:	ldr	r2, [pc, #244]	; (aef8 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    ae02:	ldr	r0, [pc, #248]	; (aefc <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    ae04:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    ae06:	mov	r2, r8
    ae08:	ldr	r1, [pc, #244]	; (af00 <usb_isr+0x480>)
    ae0a:	cmp	r5, #0
    ae0c:	it	ne
    ae0e:	movne	r1, r0
    ae10:	mov	r0, r3
    ae12:	bl	9dd0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    ae16:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    ae18:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    ae1a:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    ae1c:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    ae20:	add.w	r0, r3, r8
	asm("dsb");
    ae24:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    ae28:	mov.w	r3, #3758153728	; 0xe000e000
    ae2c:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    ae30:	adds	r5, #32
	} while (location < end_addr);
    ae32:	cmp	r0, r5
    ae34:	bhi.n	ae2c <usb_isr+0x3ac>
	asm("dsb");
    ae36:	dsb	sy
	asm("isb");
    ae3a:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    ae3e:	ldr	r0, [pc, #196]	; (af04 <usb_isr+0x484>)
    ae40:	mov	r1, r8
    ae42:	b.n	ad18 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    ae44:	mov	r2, r8
    ae46:	b.n	ac64 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    ae48:	adds	r2, #12
    ae4a:	b.n	ac1a <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    ae4c:	uxth	r3, r3
    ae4e:	cmp	r3, #0
    ae50:	bne.w	acb8 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ae54:	ldr	r3, [pc, #176]	; (af08 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    ae56:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ae5a:	ldr	r2, [r3, #0]
    ae5c:	ldr	r3, [pc, #172]	; (af0c <usb_isr+0x48c>)
    ae5e:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ae60:	ldr	r3, [pc, #172]	; (af10 <usb_isr+0x490>)
    ae62:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    ae64:	b.n	acb8 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    ae66:	lsrs	r1, r3, #16
    ae68:	cmp	r1, #7
		if (setup.wLength == 6) {
    ae6a:	bne.w	abf8 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    ae6e:	ldr	r2, [pc, #164]	; (af14 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ae70:	ldr	r0, [pc, #164]	; (af18 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    ae72:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    ae76:	movs	r2, #1
    ae78:	b.n	acbe <usb_isr+0x23e>
		if (setup.wLength == 6) {
    ae7a:	lsrs	r1, r3, #16
    ae7c:	cmp	r1, #6
    ae7e:	b.n	ae6a <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    ae80:	movw	r3, #25633	; 0x6421
    ae84:	cmp	r2, r3
    ae86:	bne.w	ab4c <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    ae8a:	ldr	r3, [pc, #140]	; (af18 <usb_isr+0x498>)
    ae8c:	ldrb	r2, [r3, #0]
    ae8e:	cmp	r2, #1
    ae90:	bne.w	ab4c <usb_isr+0xcc>
    ae94:	ldrb	r3, [r3, #1]
    ae96:	cmp	r3, #64	; 0x40
    ae98:	bne.w	ab4c <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    ae9c:	ldr	r3, [pc, #124]	; (af1c <usb_isr+0x49c>)
    ae9e:	movs	r2, #25
    aea0:	b.n	ab4a <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    aea2:	rbit	r7, r4
    aea6:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    aeaa:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    aeae:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    aeb2:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    aeb4:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    aeb8:	bl	a93c <run_callbacks>
					tx &= ~(1<<p);
    aebc:	b.n	ab5e <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    aebe:	ldr	r3, [pc, #96]	; (af20 <usb_isr+0x4a0>)
    aec0:	ldr.w	r2, [r3, #428]	; 0x1ac
    aec4:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    aec8:	ldr.w	r2, [r3, #444]	; 0x1bc
    aecc:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    aed0:	ldr.w	r4, [r3, #432]	; 0x1b0
    aed4:	cmp	r4, #0
    aed6:	bne.n	aed0 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    aed8:	mov.w	r2, #4294967295
    aedc:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    aee0:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    aee4:	bl	a09c <usb_serial_reset>
		endpointN_notify_mask = 0;
    aee8:	ldr	r3, [pc, #56]	; (af24 <usb_isr+0x4a4>)
    aeea:	str	r4, [r3, #0]
    aeec:	b.n	aa98 <usb_isr+0x18>
}
    aeee:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aef2:	nop
    aef4:	.word	0x200215c3
    aef8:	.word	0x200215e4
    aefc:	.word	0x6000264c
    af00:	.word	0x600026b5
    af04:	.word	0x20201800
    af08:	.word	0x20021374
    af0c:	.word	0x20021394
    af10:	.word	0x200215e2
    af14:	.word	0x20007dc0
    af18:	.word	0x200215b9
    af1c:	.word	0x200022e3
    af20:	.word	0x402e0000
    af24:	.word	0x20020ba0

0000af28 <usb_config_rx>:
{
    af28:	push	{r4, r5, r6, lr}
    af2a:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    af2c:	subs	r3, r0, #2
{
    af2e:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    af30:	cmp	r3, #3
    af32:	bhi.n	af5c <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    af34:	clz	r4, r2
    af38:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    af3a:	ldr	r0, [pc, #36]	; (af60 <usb_config_rx+0x38>)
    af3c:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    af3e:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    af40:	add.w	r0, r0, r5, lsl #7
    af44:	orr.w	r1, r1, r4, lsl #29
    af48:	bl	a970 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    af4c:	cbz	r6, af5c <usb_config_rx+0x34>
    af4e:	ldr	r2, [pc, #20]	; (af64 <usb_config_rx+0x3c>)
    af50:	movs	r3, #1
    af52:	lsl.w	r0, r3, r5
    af56:	ldr	r3, [r2, #0]
    af58:	orrs	r0, r3
    af5a:	str	r0, [r2, #0]
}
    af5c:	pop	{r4, r5, r6, pc}
    af5e:	nop
    af60:	.word	0x20000000
    af64:	.word	0x20020ba0

0000af68 <usb_config_tx>:
{
    af68:	push	{r4, r5, r6, lr}
    af6a:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    af6c:	subs	r3, r0, #2
{
    af6e:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    af70:	cmp	r3, #3
    af72:	bhi.n	af9e <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    af74:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    af78:	ldr	r0, [pc, #36]	; (afa0 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    af7a:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    af7c:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    af7e:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    af80:	add.w	r0, r0, r4, lsl #7
    af84:	orr.w	r1, r1, r5, lsl #29
    af88:	adds	r0, #64	; 0x40
    af8a:	bl	a970 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    af8e:	cbz	r6, af9e <usb_config_tx+0x36>
    af90:	ldr	r2, [pc, #16]	; (afa4 <usb_config_tx+0x3c>)
    af92:	adds	r4, #16
    af94:	movs	r3, #1
    af96:	ldr	r1, [r2, #0]
    af98:	lsls	r3, r4
    af9a:	orrs	r3, r1
    af9c:	str	r3, [r2, #0]
}
    af9e:	pop	{r4, r5, r6, pc}
    afa0:	.word	0x20000000
    afa4:	.word	0x20020ba0

0000afa8 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    afa8:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    afaa:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    afac:	orr.w	r2, r2, #128	; 0x80
    afb0:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    afb2:	add.w	r2, r1, #4096	; 0x1000
    afb6:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    afb8:	add.w	r2, r1, #8192	; 0x2000
{
    afbc:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    afbe:	str	r2, [r0, #16]
	transfer->next = 1;
    afc0:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    afc2:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    afc6:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    afca:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    afcc:	str	r2, [r0, #20]
	transfer->callback_param = param;
    afce:	strd	r1, r3, [r0, #24]
}
    afd2:	pop	{r4, pc}

0000afd4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    afd4:	subs	r3, r0, #2
{
    afd6:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    afd8:	cmp	r3, #3
    afda:	bhi.n	aff2 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    afdc:	ldr	r3, [pc, #20]	; (aff4 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    afde:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    afe2:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    afe6:	movs	r3, #1
    afe8:	adds	r0, #64	; 0x40
    afea:	lsl.w	r1, r3, r1
    afee:	b.w	a8c0 <schedule_transfer>
}
    aff2:	bx	lr
    aff4:	.word	0x20000000

0000aff8 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    aff8:	subs	r3, r0, #2
{
    affa:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    affc:	cmp	r3, #3
    affe:	bhi.n	b00e <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b000:	movs	r1, #1
    b002:	ldr	r3, [pc, #12]	; (b010 <usb_receive+0x18>)
    b004:	lsls	r1, r0
    b006:	add.w	r0, r3, r0, lsl #7
    b00a:	b.w	a8c0 <schedule_transfer>
}
    b00e:	bx	lr
    b010:	.word	0x20000000

0000b014 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b014:	ldr	r2, [pc, #32]	; (b038 <usb_transfer_status+0x24>)
{
    b016:	mov	r1, r0
	cmd = USB1_USBCMD;
    b018:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b01c:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b01e:	orr.w	r3, r3, #16384	; 0x4000
    b022:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b026:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b028:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b02c:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b02e:	tst.w	r3, #16384	; 0x4000
    b032:	beq.n	b01c <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b034:	bx	lr
    b036:	nop
    b038:	.word	0x402e0000

0000b03c <ultoa>:
{
    b03c:	push	{r4, r5, r6, lr}
	int i=0, j;
    b03e:	movs	r4, #0
		digit = val % radix;
    b040:	udiv	r5, r0, r2
    b044:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b048:	uxtb	r3, r6
    b04a:	cmp	r6, #9
    b04c:	ite	ls
    b04e:	addls	r3, #48	; 0x30
    b050:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b052:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b054:	uxtb	r3, r3
    b056:	strb	r3, [r1, r4]
		if (val == 0) break;
    b058:	bhi.n	b060 <ultoa+0x24>
		i++;
    b05a:	adds	r4, #1
		val /= radix;
    b05c:	mov	r0, r5
		digit = val % radix;
    b05e:	b.n	b040 <ultoa+0x4>
	buf[i + 1] = 0;
    b060:	adds	r3, r1, r4
    b062:	movs	r2, #0
    b064:	subs	r0, r1, #1
    b066:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b068:	subs	r5, r4, r2
    b06a:	cmp	r2, r5
    b06c:	blt.n	b072 <ultoa+0x36>
}
    b06e:	mov	r0, r1
    b070:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b072:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b076:	adds	r2, #1
		buf[j] = buf[i];
    b078:	ldrb	r6, [r3, #0]
    b07a:	strb	r6, [r0, #0]
		buf[i] = t;
    b07c:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b080:	b.n	b068 <ultoa+0x2c>
	...

0000b084 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b084:	vcmp.f32	s0, s0
{
    b088:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b08c:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b090:	eor.w	r5, r0, r0, asr #31
{
    b094:	mov	r7, r0
    b096:	mov	r6, r1
    b098:	mov	r4, r2
	int awidth = abs(width);
    b09a:	sub.w	r5, r5, r0, asr #31
{
    b09e:	vpush	{d8}
    b0a2:	vmov.f32	s16, s0
    b0a6:	sub	sp, #20
	if (isnanf(val)) {
    b0a8:	bvc.n	b108 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b0aa:	vcmpe.f32	s0, #0.0
    b0ae:	vmrs	APSR_nzcv, fpscr
    b0b2:	ite	mi
    b0b4:	movmi	r3, #4
    b0b6:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b0b8:	cmp	r3, r5
    b0ba:	ite	lt
    b0bc:	sublt	r5, r5, r3
    b0be:	movge	r5, #0
		if (width<0) {
    b0c0:	cmp	r0, #0
    b0c2:	bge.n	b0d2 <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b0c4:	mov	r2, r5
    b0c6:	mov	r0, r4
    b0c8:	add	r4, r5
    b0ca:	movs	r5, #0
    b0cc:	movs	r1, #32
    b0ce:	bl	9d8c <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b0d2:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b0d6:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b0d8:	cmp	r3, #0
    b0da:	itt	lt
    b0dc:	movlt	r3, #45	; 0x2d
    b0de:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b0e2:	movs	r3, #65	; 0x41
    b0e4:	strb	r2, [r4, #0]
    b0e6:	strb	r3, [r4, #1]
    b0e8:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b0ea:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b0ec:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b0ee:	movs	r1, #32
    b0f0:	mov	r2, r5
    b0f2:	bl	9d8c <memset>
			awidth--;
		}
		*buf = 0;
    b0f6:	movs	r2, #0
			*buf++ = ' ';
    b0f8:	mov	r3, r0
    b0fa:	add	r0, r5
		*buf = 0;
    b0fc:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b0fe:	add	sp, #20
    b100:	vpop	{d8}
    b104:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b108:	vabs.f32	s15, s0
    b10c:	vldr	s14, [pc, #432]	; b2c0 <dtostrf+0x23c>
    b110:	vcmp.f32	s15, s14
    b114:	vmrs	APSR_nzcv, fpscr
    b118:	ble.n	b160 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b11a:	vcmpe.f32	s0, #0.0
    b11e:	vmrs	APSR_nzcv, fpscr
    b122:	ite	mi
    b124:	movmi	r3, #4
    b126:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b128:	cmp	r3, r5
    b12a:	ite	lt
    b12c:	sublt	r5, r5, r3
    b12e:	movge	r5, #0
		if (width<0) {
    b130:	cmp	r0, #0
    b132:	bge.n	b142 <dtostrf+0xbe>
				*buf++ = ' ';
    b134:	mov	r2, r5
    b136:	mov	r0, r4
    b138:	add	r4, r5
    b13a:	movs	r5, #0
    b13c:	movs	r1, #32
    b13e:	bl	9d8c <memset>
		if (val<0) *buf++ = '-';
    b142:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b146:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b148:	vmrs	APSR_nzcv, fpscr
    b14c:	itt	mi
    b14e:	movmi	r3, #45	; 0x2d
    b150:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b154:	movs	r3, #73	; 0x49
    b156:	strb	r3, [r4, #0]
    b158:	movs	r3, #78	; 0x4e
    b15a:	strb	r3, [r4, #1]
    b15c:	adds	r3, r4, #3
    b15e:	b.n	b0ea <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b160:	add	r2, sp, #8
    b162:	add	r1, sp, #4
    b164:	mov	r0, r6
    b166:	bl	d61a <fcvtf>
	if (precision == 0 && decpt == 0) {
    b16a:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b16c:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b16e:	orrs.w	r2, r6, r3
    b172:	bne.n	b212 <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b174:	ldrb	r1, [r0, #0]
    b176:	ldr	r3, [pc, #332]	; (b2c4 <dtostrf+0x240>)
    b178:	ldr	r2, [pc, #332]	; (b2c8 <dtostrf+0x244>)
    b17a:	cmp	r1, #52	; 0x34
    b17c:	ite	ls
    b17e:	movls	r8, r2
    b180:	movhi	r8, r3
		decpt++;
    b182:	movs	r3, #1
    b184:	str	r3, [sp, #4]
	reqd = strlen(s);
    b186:	mov	r0, r8
    b188:	bl	e900 <strlen>
	if (reqd > decpt) reqd++;
    b18c:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b18e:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b190:	cmp	r3, r0
    b192:	it	lt
    b194:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b196:	cmp	r3, #0
    b198:	bne.n	b222 <dtostrf+0x19e>
    b19a:	adds	r5, #1
	if (sign) reqd++;
    b19c:	ldr.w	fp, [sp, #8]
    b1a0:	cmp.w	fp, #0
    b1a4:	beq.n	b1a8 <dtostrf+0x124>
    b1a6:	adds	r5, #1
	pad = width - reqd;
    b1a8:	sub.w	sl, r7, r5
	e = p + reqd;
    b1ac:	add.w	r9, r4, r5
	if (pad > 0) {
    b1b0:	cmp.w	sl, #0
    b1b4:	ble.n	b26a <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b1b6:	mov	r2, sl
    b1b8:	movs	r1, #32
    b1ba:	mov	r0, r4
		e += pad;
    b1bc:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b1be:	bl	9d8c <memset>
    b1c2:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b1c6:	cmp.w	fp, #0
    b1ca:	beq.n	b1d2 <dtostrf+0x14e>
    b1cc:	movs	r3, #45	; 0x2d
    b1ce:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b1d2:	ldr	r1, [sp, #4]
    b1d4:	cmp	r1, #0
    b1d6:	bne.n	b26e <dtostrf+0x1ea>
    b1d8:	cbz	r6, b1e8 <dtostrf+0x164>
		*p++ = '0';
    b1da:	mov	r3, r2
    b1dc:	movs	r1, #48	; 0x30
    b1de:	strb.w	r1, [r3], #2
		*p++ = '.';
    b1e2:	movs	r1, #46	; 0x2e
    b1e4:	strb	r1, [r2, #1]
    b1e6:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b1e8:	movs	r0, #46	; 0x2e
	while (p < e) {
    b1ea:	cmp	r9, r2
		*p++ = *s++;
    b1ec:	mov	r3, r2
	while (p < e) {
    b1ee:	bhi.n	b2a4 <dtostrf+0x220>
	if (width < 0) {
    b1f0:	cmp	r7, #0
    b1f2:	bge.n	b20a <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b1f4:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b1f6:	movs	r1, #32
		pad = (reqd + width) * -1;
    b1f8:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b1fa:	mov	r0, r3
    b1fc:	bic.w	r5, r5, r5, asr #31
    b200:	mov	r2, r5
    b202:	bl	9d8c <memset>
    b206:	mov	r3, r0
    b208:	add	r3, r5
	*p = 0;
    b20a:	movs	r2, #0
	return buf;
    b20c:	mov	r0, r4
	*p = 0;
    b20e:	strb	r2, [r3, #0]
	return buf;
    b210:	b.n	b0fe <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b212:	negs	r3, r3
    b214:	cmp	r6, r3
		decpt = -precision;
    b216:	ittt	lt
    b218:	neglt	r3, r6
		s = "0";
    b21a:	ldrlt.w	r8, [pc, #172]	; b2c8 <dtostrf+0x244>
		decpt = -precision;
    b21e:	strlt	r3, [sp, #4]
    b220:	b.n	b186 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b222:	bge.n	b19c <dtostrf+0x118>
    b224:	cmp	r6, #0
    b226:	beq.n	b19c <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b228:	add	r3, r6
		reqd = precision + 2;
    b22a:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b22c:	cmp	r0, r3
    b22e:	bls.n	b19c <dtostrf+0x118>
				val *= 10.0f;
    b230:	vmov.f32	s15, #36	; 0x41200000  10.0
    b234:	mov	r3, r6
    b236:	b.n	b23e <dtostrf+0x1ba>
    b238:	vmul.f32	s16, s16, s15
				newPrecision--;
    b23c:	subs	r3, #1
			while (newPrecision > 0) {
    b23e:	cmp	r3, #0
    b240:	bgt.n	b238 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b242:	cmp	r6, #0
    b244:	add	r2, sp, #8
    b246:	add	r1, sp, #12
    b248:	vmov.f32	s0, s16
    b24c:	ite	ge
    b24e:	subge	r0, r6, r6
    b250:	movlt	r0, r6
    b252:	bl	d61a <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b256:	ldr	r3, [sp, #4]
    b258:	ldr	r2, [sp, #12]
    b25a:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b25c:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b25e:	subs	r2, r2, r3
    b260:	cmp	r2, r1
    b262:	itt	eq
    b264:	addeq	r3, #1
    b266:	streq	r3, [sp, #4]
    b268:	b.n	b19c <dtostrf+0x118>
    b26a:	mov	r2, r4
    b26c:	b.n	b1c6 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b26e:	bge.n	b1e8 <dtostrf+0x164>
    b270:	cmp	r6, #0
    b272:	beq.n	b1e8 <dtostrf+0x164>
		*p++ = '0';
    b274:	mov	r3, r2
		*p++ = '.';
    b276:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b278:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b27c:	movs	r6, #0
		*p++ = '0';
    b27e:	strb.w	ip, [r3], #2
		*p++ = '.';
    b282:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b284:	rsb	r0, r1, #2
    b288:	add	r2, r0
		*p++ = '.';
    b28a:	mov	r0, r3
		while ( decpt < 0 ) {
    b28c:	cmp	r0, r2
    b28e:	bne.n	b29c <dtostrf+0x218>
    b290:	subs	r2, r3, r1
    b292:	cmp	r6, #0
    b294:	beq.n	b1e8 <dtostrf+0x164>
    b296:	movs	r3, #0
    b298:	str	r3, [sp, #4]
    b29a:	b.n	b1e8 <dtostrf+0x164>
			*p++ = '0';
    b29c:	movs	r6, #1
    b29e:	strb.w	ip, [r0], #1
    b2a2:	b.n	b28c <dtostrf+0x208>
		*p++ = *s++;
    b2a4:	ldrb.w	r1, [r8], #1
    b2a8:	strb.w	r1, [r3], #1
		if (p == e) break;
    b2ac:	cmp	r9, r3
    b2ae:	beq.n	b1f0 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b2b0:	ldr	r1, [sp, #4]
    b2b2:	subs	r1, #1
    b2b4:	str	r1, [sp, #4]
    b2b6:	cbnz	r1, b2bc <dtostrf+0x238>
    b2b8:	adds	r3, r2, #2
    b2ba:	strb	r0, [r2, #1]
			*p++ = '0';
    b2bc:	mov	r2, r3
    b2be:	b.n	b1ea <dtostrf+0x166>
    b2c0:	.word	0x7f7fffff
    b2c4:	.word	0x20000fea
    b2c8:	.word	0x20001141

0000b2cc <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b2cc:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b2ce:	ldr	r3, [pc, #52]	; (b304 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b2d0:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b2d2:	ldr	r6, [pc, #52]	; (b308 <micros+0x3c>)
		scc = systick_cycle_count;
    b2d4:	ldr	r5, [pc, #52]	; (b30c <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b2d6:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b2da:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b2dc:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b2de:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b2e2:	cmp	r2, #0
    b2e4:	bne.n	b2d6 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b2e6:	ldr	r3, [pc, #40]	; (b310 <micros+0x44>)
    b2e8:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b2ea:	ldr	r2, [pc, #40]	; (b314 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b2ec:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b2ee:	ldr	r2, [r2, #0]
    b2f0:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b2f4:	mov.w	r3, #1000	; 0x3e8
    b2f8:	muls	r0, r3
	return usec;
}
    b2fa:	cmp	r2, r3
    b2fc:	ite	ls
    b2fe:	addls	r0, r0, r2
    b300:	addhi	r0, r0, r3
    b302:	pop	{r4, r5, r6, pc}
    b304:	.word	0x20021378
    b308:	.word	0x20021374
    b30c:	.word	0x20021370
    b310:	.word	0xe0001000
    b314:	.word	0x20020ce0

0000b318 <delay>:
{
    b318:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b31a:	mov	r4, r0
    b31c:	cbz	r0, b340 <delay+0x28>
	start = micros();
    b31e:	bl	b2cc <micros>
    b322:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b324:	bl	b2cc <micros>
    b328:	subs	r0, r0, r5
    b32a:	cmp.w	r0, #1000	; 0x3e8
    b32e:	bcs.n	b336 <delay+0x1e>
		yield();
    b330:	bl	bf50 <yield>
		while ((micros() - start) >= 1000) {
    b334:	b.n	b324 <delay+0xc>
			if (--msec == 0) return;
    b336:	subs	r4, #1
    b338:	beq.n	b340 <delay+0x28>
			start += 1000;
    b33a:	add.w	r5, r5, #1000	; 0x3e8
    b33e:	b.n	b324 <delay+0xc>
}
    b340:	pop	{r3, r4, r5, pc}
	...

0000b344 <unused_interrupt_vector>:
	__disable_irq();
    b344:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b346:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b34a:	ldr	r4, [pc, #316]	; (b488 <unused_interrupt_vector+0x144>)
    b34c:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b350:	tst.w	lr, #4
    b354:	ite	eq
    b356:	mrseq	r2, MSP
    b35a:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b35e:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b362:	ldr	r7, [pc, #296]	; (b48c <unused_interrupt_vector+0x148>)
	while (p < end) {
    b364:	ldr	r6, [pc, #296]	; (b490 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b366:	ldr.w	r1, [r3, #3368]	; 0xd28
    b36a:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b36e:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b372:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b376:	ldr.w	r1, [r3, #3380]	; 0xd34
    b37a:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b37e:	ldr.w	r3, [r3, #3384]	; 0xd38
    b382:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b386:	ldr	r3, [r2, #24]
    b388:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b38c:	ldr	r3, [r2, #28]
    b38e:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b392:	bl	b9c4 <tempmonGetTemp>
    b396:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b39a:	bl	b514 <rtc_get>
	info->len = sizeof(*info) / 4;
    b39e:	movs	r3, #11
	p = (uint32_t *)info;
    b3a0:	ldr	r2, [pc, #240]	; (b494 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b3a2:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b3a6:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b3aa:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b3ac:	mov.w	r3, #4294967295
		crc ^= *p++;
    b3b0:	ldr	r1, [r2, #0]
    b3b2:	movs	r5, #32
    b3b4:	adds	r2, #4
    b3b6:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b3b8:	and.w	r1, r3, #1
    b3bc:	subs	r5, #1
    b3be:	mul.w	r1, r7, r1
    b3c2:	eor.w	r3, r1, r3, lsr #1
    b3c6:	bne.n	b3b8 <unused_interrupt_vector+0x74>
	while (p < end) {
    b3c8:	cmp	r2, r6
    b3ca:	bne.n	b3b0 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b3cc:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b3d0:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b3d4:	mov.w	r3, #3758153728	; 0xe000e000
    b3d8:	ldr	r2, [pc, #188]	; (b498 <unused_interrupt_vector+0x154>)
    b3da:	str.w	r0, [r3, #3952]	; 0xf70
    b3de:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b3e2:	dsb	sy
	asm("isb");
    b3e6:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3ea:	ldr	r2, [pc, #176]	; (b49c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b3ec:	ldr	r4, [pc, #176]	; (b4a0 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3ee:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b3f0:	ldr	r0, [pc, #176]	; (b4a4 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b3f2:	orr.w	r3, r3, #12288	; 0x3000
    b3f6:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b3f8:	movs	r3, #2
    b3fa:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b3fc:	ldr	r3, [r2, #28]
    b3fe:	bic.w	r3, r3, #127	; 0x7f
    b402:	orr.w	r3, r3, #64	; 0x40
    b406:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b408:	ldr	r3, [pc, #156]	; (b4a8 <unused_interrupt_vector+0x164>)
    b40a:	ldr	r3, [r3, #0]
    b40c:	cmp	r3, r0
    b40e:	bls.n	b414 <unused_interrupt_vector+0xd0>
    b410:	bl	a5d0 <set_arm_clock>
	PIT_MCR = 0;
    b414:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b416:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b418:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b41c:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b41e:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b422:	ldr	r3, [pc, #136]	; (b4ac <unused_interrupt_vector+0x168>)
    b424:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b428:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b42c:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b430:	ldr	r4, [pc, #108]	; (b4a0 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b432:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b436:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b43a:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b43e:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b442:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b446:	ldr.w	r3, [r4, #268]	; 0x10c
    b44a:	cbz	r3, b456 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b44c:	adds	r5, #1
			PIT_TFLG0 = 1;
    b44e:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b452:	cmp	r5, #79	; 0x4f
    b454:	bhi.n	b45c <unused_interrupt_vector+0x118>
		usb_isr();
    b456:	bl	aa80 <usb_isr>
		if (PIT_TFLG0) {
    b45a:	b.n	b446 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b45c:	ldr	r3, [pc, #80]	; (b4b0 <unused_interrupt_vector+0x16c>)
    b45e:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b460:	ldr	r1, [pc, #80]	; (b4b4 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b462:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b466:	mov.w	r2, #2147483648	; 0x80000000
    b46a:	ldr	r3, [pc, #76]	; (b4b8 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b46c:	ldr	r0, [pc, #76]	; (b4bc <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b46e:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b470:	ldr	r2, [pc, #44]	; (b4a0 <unused_interrupt_vector+0x15c>)
    b472:	ldr.w	r3, [r2, #268]	; 0x10c
    b476:	cbz	r3, b484 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b478:	mov.w	r3, #3758153728	; 0xe000e000
    b47c:	ldr	r2, [pc, #64]	; (b4c0 <unused_interrupt_vector+0x17c>)
    b47e:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b482:	b.n	b482 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b484:	str	r0, [r1, #48]	; 0x30
    b486:	b.n	b472 <unused_interrupt_vector+0x12e>
    b488:	.word	0x2027ff00
    b48c:	.word	0xedb88320
    b490:	.word	0x2027ffa8
    b494:	.word	0x2027ff80
    b498:	.word	0x2027ffa0
    b49c:	.word	0x400fc000
    b4a0:	.word	0x40084000
    b4a4:	.word	0x0bcd3d80
    b4a8:	.word	0x20001ce8
    b4ac:	.word	0x00249f00
    b4b0:	.word	0x402e0000
    b4b4:	.word	0x400f8000
    b4b8:	.word	0x400d9000
    b4bc:	.word	0x0bad00f1
    b4c0:	.word	0x05fa0004

0000b4c4 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b4c4:	ldr	r2, [pc, #32]	; (b4e8 <_sbrk+0x24>)
{
    b4c6:	push	{r3, lr}
    b4c8:	mov	r3, r0
        char *prev = __brkval;
    b4ca:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b4cc:	cbz	r3, b4e2 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b4ce:	add	r3, r0
    b4d0:	ldr	r1, [pc, #24]	; (b4ec <_sbrk+0x28>)
    b4d2:	cmp	r3, r1
    b4d4:	bls.n	b4e4 <_sbrk+0x20>
                        errno = ENOMEM;
    b4d6:	bl	e7f4 <__errno>
    b4da:	movs	r3, #12
    b4dc:	str	r3, [r0, #0]
                        return (void *)-1;
    b4de:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b4e2:	pop	{r3, pc}
                __brkval = prev + incr;
    b4e4:	str	r3, [r2, #0]
    b4e6:	b.n	b4e2 <_sbrk+0x1e>
    b4e8:	.word	0x200020c0
    b4ec:	.word	0x20280000

0000b4f0 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b4f0:	movs	r0, #0
    b4f2:	bx	lr

0000b4f4 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b4f4:	mov.w	r0, #4294967295
    b4f8:	bx	lr

0000b4fa <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b4fa:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b4fe:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b500:	str	r3, [r1, #4]
}
    b502:	bx	lr

0000b504 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b504:	movs	r0, #1
    b506:	bx	lr

0000b508 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b508:	mov.w	r0, #4294967295
    b50c:	bx	lr

0000b50e <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b50e:	wfi
    b510:	b.n	b50e <abort>
	...

0000b514 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b514:	ldr	r2, [pc, #28]	; (b534 <rtc_get+0x20>)
    b516:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b518:	ldr	r3, [r2, #40]	; 0x28
{
    b51a:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b51c:	mov	r4, r3
    b51e:	mov	r1, r0
    b520:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b522:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b524:	cmp	r4, r3
    b526:	bne.n	b51c <rtc_get+0x8>
    b528:	cmp	r1, r0
    b52a:	bne.n	b51c <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b52c:	lsrs	r3, r3, #15
}
    b52e:	orr.w	r0, r3, r0, lsl #17
    b532:	pop	{r4, pc}
    b534:	.word	0x400d4000

0000b538 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b538:	ldr	r3, [pc, #68]	; (b580 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    b53a:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b53c:	ldr	r2, [pc, #68]	; (b584 <flash_wait+0x4c>)
{
    b53e:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    b540:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b544:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b546:	ldr	r5, [pc, #64]	; (b588 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    b548:	ldr	r4, [pc, #64]	; (b58c <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    b54a:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    b54e:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    b552:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    b556:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b55a:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    b55e:	ldr	r0, [r3, #20]
    b560:	lsls	r0, r0, #31
    b562:	bpl.n	b55e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b564:	str	r2, [r3, #20]
	} while (status & 1);
    b566:	ldrb	r0, [r4, #0]
    b568:	lsls	r0, r0, #31
    b56a:	bmi.n	b54e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    b56c:	ldr	r2, [r3, #0]
    b56e:	orr.w	r2, r2, #1
    b572:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    b574:	ldr	r2, [pc, #8]	; (b580 <flash_wait+0x48>)
    b576:	ldr	r3, [r2, #0]
    b578:	lsls	r3, r3, #31
    b57a:	bmi.n	b576 <flash_wait+0x3e>
	__enable_irq();
    b57c:	cpsie	i
}
    b57e:	pop	{r4, r5, pc}
    b580:	.word	0x402a8000
    b584:	.word	0x24010405
    b588:	.word	0x000f0001
    b58c:	.word	0x402a8100

0000b590 <eeprom_initialize>:
{
    b590:	push	{r4, r5, lr}
    b592:	ldr	r3, [pc, #52]	; (b5c8 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    b594:	movw	r5, #65535	; 0xffff
    b598:	ldr	r4, [pc, #48]	; (b5cc <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b59a:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    b59e:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    b5a0:	ldrh	r0, [r1, #0]
    b5a2:	adds	r1, #2
    b5a4:	cmp	r0, r5
    b5a6:	beq.n	b5b0 <eeprom_initialize+0x20>
			index++;
    b5a8:	adds	r2, #1
		} while (p < end);
    b5aa:	cmp	r1, r3
			index++;
    b5ac:	uxth	r2, r2
		} while (p < end);
    b5ae:	bcc.n	b5a0 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b5b0:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    b5b4:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    b5b8:	cmp.w	r3, #1619001344	; 0x60800000
    b5bc:	bne.n	b59a <eeprom_initialize+0xa>
	initialized = 1;
    b5be:	ldr	r3, [pc, #16]	; (b5d0 <eeprom_initialize+0x40>)
    b5c0:	movs	r2, #1
    b5c2:	strb	r2, [r3, #0]
}
    b5c4:	pop	{r4, r5, pc}
    b5c6:	nop
    b5c8:	.word	0x607c1000
    b5cc:	.word	0x200213f0
    b5d0:	.word	0x200215c2

0000b5d4 <eeprom_read_byte>:
{
    b5d4:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    b5d6:	movw	r3, #4283	; 0x10bb
{
    b5da:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    b5dc:	cmp	r0, r3
    b5de:	bhi.n	b62c <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    b5e0:	ldr	r3, [pc, #76]	; (b630 <eeprom_read_byte+0x5c>)
    b5e2:	ldrb	r3, [r3, #0]
    b5e4:	cbnz	r3, b5ea <eeprom_read_byte+0x16>
    b5e6:	bl	b590 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    b5ea:	lsrs	r2, r4, #2
    b5ec:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b5ee:	ldr	r0, [pc, #68]	; (b634 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b5f0:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    b5f4:	udiv	r3, r2, r3
    b5f8:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b5fc:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    b600:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b602:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    b606:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    b60a:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b60c:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    b610:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b612:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    b614:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    b618:	cmp	r3, r2
    b61a:	bcc.n	b61e <eeprom_read_byte+0x4a>
}
    b61c:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    b61e:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    b622:	uxtb	r5, r1
    b624:	cmp	r5, r4
    b626:	it	eq
    b628:	lsreq	r0, r1, #8
    b62a:	b.n	b618 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    b62c:	movs	r0, #255	; 0xff
    b62e:	b.n	b61c <eeprom_read_byte+0x48>
    b630:	.word	0x200215c2
    b634:	.word	0x200213f0

0000b638 <eeprom_read_block>:
{
    b638:	push	{r4, r5, r6, lr}
    b63a:	mov	r4, r0
    b63c:	adds	r5, r1, r2
    b63e:	mov	r0, r1
	while (len--) {
    b640:	cmp	r0, r5
    b642:	bne.n	b646 <eeprom_read_block+0xe>
}
    b644:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    b646:	adds	r6, r0, #1
    b648:	bl	b5d4 <eeprom_read_byte>
    b64c:	strb.w	r0, [r4], #1
    b650:	mov	r0, r6
    b652:	b.n	b640 <eeprom_read_block+0x8>

0000b654 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    b654:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b658:	mov	r5, r1
    b65a:	mov	r4, r2
	__disable_irq();
    b65c:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b65e:	ldr	r3, [pc, #192]	; (b720 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b660:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b664:	ldr	r2, [pc, #188]	; (b724 <eepromemu_flash_write+0xd0>)
    b666:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b668:	movs	r2, #2
    b66a:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    b66c:	movs	r2, #0
    b66e:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b672:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    b676:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    b678:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b67c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b680:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b684:	mov.w	r2, #983040	; 0xf0000
    b688:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b68c:	movs	r2, #1
    b68e:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b692:	bic.w	r2, r0, #31
	asm("dsb");
    b696:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    b69a:	mov.w	r6, #3758153728	; 0xe000e000
    b69e:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    b6a2:	adds	r2, #32
	} while (location < end_addr);
    b6a4:	cmp	r1, r2
    b6a6:	bhi.n	b69e <eepromemu_flash_write+0x4a>
	asm("dsb");
    b6a8:	dsb	sy
	asm("isb");
    b6ac:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b6b0:	ldr	r2, [r3, #20]
    b6b2:	lsls	r6, r2, #31
    b6b4:	bpl.n	b6b0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b6b6:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b6b8:	ldr	r1, [pc, #108]	; (b728 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b6ba:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b6be:	ldr	r7, [pc, #96]	; (b720 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b6c0:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    b6c2:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b6c6:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b6ca:	ldr.w	r8, [pc, #96]	; b72c <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    b6ce:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b6d2:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    b6d4:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b6d8:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    b6dc:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    b6e0:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b6e4:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    b6e8:	ldr	r3, [r7, #20]
    b6ea:	lsls	r2, r3, #31
    b6ec:	bpl.n	b6fa <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    b6ee:	movs	r3, #65	; 0x41
    b6f0:	str	r3, [r7, #20]
	flash_wait();
}
    b6f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    b6f6:	b.w	b538 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    b6fa:	lsls	r1, r3, #25
    b6fc:	bpl.n	b6e8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b6fe:	cmp	r4, #8
    b700:	bhi.n	b71a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    b702:	cbz	r4, b714 <eepromemu_flash_write+0xc0>
    b704:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b706:	mov	r1, r5
				len -= wrlen;
    b708:	subs	r4, r4, r6
				src += wrlen;
    b70a:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    b70c:	mov	r2, r6
    b70e:	mov	r0, r8
    b710:	bl	9dd0 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    b714:	movs	r3, #64	; 0x40
    b716:	str	r3, [r7, #20]
    b718:	b.n	b6e8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    b71a:	movs	r6, #8
    b71c:	b.n	b706 <eepromemu_flash_write+0xb2>
    b71e:	nop
    b720:	.word	0x402a8000
    b724:	.word	0x5af05af0
    b728:	.word	0x08180432
    b72c:	.word	0x402a8180

0000b730 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    b730:	push	{r4}
	__disable_irq();
    b732:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    b734:	ldr	r3, [pc, #156]	; (b7d4 <eepromemu_flash_erase_sector+0xa4>)
    b736:	ldr	r2, [pc, #160]	; (b7d8 <eepromemu_flash_erase_sector+0xa8>)
    b738:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    b73a:	movs	r2, #2
    b73c:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    b73e:	movw	r2, #1030	; 0x406
    b742:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    b746:	movs	r2, #0
    b748:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    b74c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    b750:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    b754:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b758:	mov.w	r2, #983040	; 0xf0000
    b75c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b760:	movs	r2, #1
    b762:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    b766:	bic.w	r2, r0, #4080	; 0xff0
    b76a:	bic.w	r2, r2, #15
	asm("dsb");
    b76e:	dsb	sy
    b772:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    b776:	add.w	r1, r2, #4096	; 0x1000
    b77a:	cmp	r1, r4
    b77c:	ite	cc
    b77e:	movcc	r1, #1
    b780:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    b782:	mov.w	r4, #3758153728	; 0xe000e000
    b786:	add.w	r1, r2, r1, lsl #5
    b78a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    b78e:	adds	r2, #32
	} while (location < end_addr);
    b790:	cmp	r2, r1
    b792:	bne.n	b78a <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    b794:	dsb	sy
	asm("isb");
    b798:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b79c:	ldr	r2, [r3, #20]
    b79e:	lsls	r1, r2, #31
    b7a0:	bpl.n	b79c <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b7a2:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b7a4:	ldr	r2, [pc, #52]	; (b7dc <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b7a6:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    b7a8:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    b7ac:	ldr	r2, [pc, #48]	; (b7e0 <eepromemu_flash_erase_sector+0xb0>)
    b7ae:	ands	r2, r0
    b7b0:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    b7b4:	mov.w	r2, #983040	; 0xf0000
    b7b8:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    b7bc:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    b7c0:	ldr	r3, [pc, #16]	; (b7d4 <eepromemu_flash_erase_sector+0xa4>)
    b7c2:	ldr	r2, [r3, #20]
    b7c4:	lsls	r2, r2, #31
    b7c6:	bpl.n	b7c2 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b7c8:	movs	r2, #1
	flash_wait();
}
    b7ca:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    b7ce:	str	r2, [r3, #20]
	flash_wait();
    b7d0:	b.w	b538 <flash_wait>
    b7d4:	.word	0x402a8000
    b7d8:	.word	0x5af05af0
    b7dc:	.word	0x08180420
    b7e0:	.word	0x00fff000

0000b7e4 <eeprom_write_byte>:
	if (addr > E2END) return;
    b7e4:	movw	r3, #4283	; 0x10bb
    b7e8:	cmp	r0, r3
{
    b7ea:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7ee:	mov	r4, r0
    b7f0:	sub	sp, #264	; 0x108
    b7f2:	mov	r9, r1
	if (addr > E2END) return;
    b7f4:	bhi.n	b856 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    b7f6:	ldr	r3, [pc, #232]	; (b8e0 <eeprom_write_byte+0xfc>)
    b7f8:	ldrb	r3, [r3, #0]
    b7fa:	cbnz	r3, b800 <eeprom_write_byte+0x1c>
    b7fc:	bl	b590 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    b800:	lsrs	r6, r4, #2
    b802:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    b804:	ldr	r7, [pc, #220]	; (b8e4 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b806:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    b80a:	udiv	r3, r6, r3
    b80e:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    b812:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    b816:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    b818:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b81a:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    b81e:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b822:	add.w	r5, r5, #1984	; 0x7c0
    b826:	lsls	r5, r5, #12
    b828:	mov	r8, r5
	end = p + sector_index[sector];
    b82a:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    b82e:	mov	r3, r5
	while (p < end) {
    b830:	cmp	r3, r0
    b832:	bcc.n	b85c <eeprom_write_byte+0x78>
	if (data == olddata) return;
    b834:	cmp	r2, r9
    b836:	beq.n	b856 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    b838:	cmp.w	sl, #2048	; 0x800
    b83c:	bcs.n	b86c <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    b83e:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    b842:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    b846:	movs	r2, #2
    b848:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    b84a:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    b84e:	bl	b654 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    b852:	strh.w	sl, [r7, r6, lsl #1]
}
    b856:	add	sp, #264	; 0x108
    b858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    b85c:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    b860:	uxtb.w	ip, r1
    b864:	cmp	ip, r4
    b866:	it	eq
    b868:	lsreq	r2, r1, #8
    b86a:	b.n	b830 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    b86c:	mov.w	r2, #256	; 0x100
    b870:	movs	r1, #255	; 0xff
    b872:	add	r0, sp, #8
    b874:	bl	9d8c <memset>
		while (p < end) {
    b878:	cmn.w	r5, #4096	; 0x1000
    b87c:	movw	r3, #2049	; 0x801
    b880:	it	cs
    b882:	movcs	r3, #1
    b884:	add.w	r3, r5, r3, lsl #1
    b888:	mov	r1, r5
    b88a:	adds	r5, #2
    b88c:	cmp	r5, r3
    b88e:	bne.n	b8d2 <eeprom_write_byte+0xee>
		buf[offset] = data;
    b890:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    b892:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    b894:	mov	r0, r8
		buf[offset] = data;
    b896:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    b89a:	add	r4, sp, #8
		index = 0;
    b89c:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    b89e:	bl	b730 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    b8a2:	ldrb.w	r3, [r4], #1
    b8a6:	cmp	r3, #255	; 0xff
    b8a8:	beq.n	b8c4 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    b8aa:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    b8ae:	movs	r2, #2
    b8b0:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    b8b4:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    b8b8:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    b8bc:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    b8c0:	bl	b654 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    b8c4:	adds	r5, #1
    b8c6:	cmp.w	r5, #256	; 0x100
    b8ca:	bne.n	b8a2 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    b8cc:	strh.w	r9, [r7, r6, lsl #1]
    b8d0:	b.n	b856 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    b8d2:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    b8d4:	add	r0, sp, #8
    b8d6:	ldrb	r1, [r1, #0]
    b8d8:	lsrs	r2, r2, #8
    b8da:	strb	r2, [r0, r1]
    b8dc:	b.n	b888 <eeprom_write_byte+0xa4>
    b8de:	nop
    b8e0:	.word	0x200215c2
    b8e4:	.word	0x200213f0

0000b8e8 <eeprom_write_block>:
{
    b8e8:	push	{r4, r5, r6, lr}
    b8ea:	mov	r4, r0
    b8ec:	mov	r0, r1
	while (len--) {
    b8ee:	adds	r5, r4, r2
    b8f0:	cmp	r4, r5
    b8f2:	bne.n	b8f6 <eeprom_write_block+0xe>
}
    b8f4:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    b8f6:	adds	r6, r0, #1
    b8f8:	ldrb.w	r1, [r4], #1
    b8fc:	bl	b7e4 <eeprom_write_byte>
    b900:	mov	r0, r6
    b902:	b.n	b8f0 <eeprom_write_block+0x8>

0000b904 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    b904:	ldr	r3, [r0, #0]
    b906:	cbz	r3, b91e <smalloc_verify_pool+0x1a>
    b908:	ldr	r0, [r0, #4]
    b90a:	cbz	r0, b920 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    b90c:	movs	r3, #12
    b90e:	udiv	r2, r0, r3
    b912:	mls	r0, r3, r2, r0
    b916:	clz	r0, r0
    b91a:	lsrs	r0, r0, #5
    b91c:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    b91e:	mov	r0, r3
	return 1;
}
    b920:	bx	lr

0000b922 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    b922:	push	{r4, lr}
    b924:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    b926:	bl	b904 <smalloc_verify_pool>
    b92a:	mov	r4, r0
    b92c:	cbz	r0, b934 <sm_align_pool+0x12>
    b92e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    b930:	mov	r0, r4
    b932:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    b934:	ldr	r3, [r1, #4]
    b936:	movs	r0, #12
    b938:	udiv	r2, r3, r0
    b93c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    b940:	cbz	r2, b946 <sm_align_pool+0x24>
    b942:	subs	r3, r3, r2
    b944:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    b946:	ldr	r3, [r1, #4]
    b948:	cmp	r3, #240	; 0xf0
    b94a:	bhi.n	b92e <sm_align_pool+0xc>
		errno = ENOSPC;
    b94c:	bl	e7f4 <__errno>
    b950:	movs	r3, #28
    b952:	str	r3, [r0, #0]
		return 0;
    b954:	b.n	b930 <sm_align_pool+0xe>

0000b956 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    b956:	push	{r4, r5, r6, lr}
    b958:	mov	r6, r3
	if (!spool) {
    b95a:	mov	r4, r0
    b95c:	cbnz	r0, b96c <sm_set_pool+0x16>
		errno = EINVAL;
    b95e:	bl	e7f4 <__errno>
		return 0;
    b962:	mov	r5, r4
		errno = EINVAL;
    b964:	movs	r3, #22
    b966:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    b968:	mov	r0, r5
    b96a:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    b96c:	cbz	r1, b970 <sm_set_pool+0x1a>
    b96e:	cbnz	r2, b9a0 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    b970:	mov	r0, r4
    b972:	bl	b904 <smalloc_verify_pool>
    b976:	mov	r5, r0
    b978:	cbz	r0, b996 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    b97a:	ldr	r3, [r4, #8]
    b97c:	cbz	r3, b988 <sm_set_pool+0x32>
    b97e:	ldr	r2, [r4, #4]
    b980:	movs	r1, #0
    b982:	ldr	r0, [r4, #0]
    b984:	bl	9d8c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    b988:	movs	r2, #16
    b98a:	movs	r1, #0
    b98c:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    b98e:	bl	9d8c <memset>
	return 1;
    b992:	movs	r5, #1
    b994:	b.n	b968 <sm_set_pool+0x12>
		errno = EINVAL;
    b996:	bl	e7f4 <__errno>
    b99a:	movs	r3, #22
    b99c:	str	r3, [r0, #0]
		return 0;
    b99e:	b.n	b968 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    b9a0:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    b9a2:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    b9a6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    b9a8:	bl	b922 <sm_align_pool>
    b9ac:	mov	r5, r0
    b9ae:	cmp	r0, #0
    b9b0:	beq.n	b968 <sm_set_pool+0x12>
	if (do_zero) {
    b9b2:	cmp	r6, #0
    b9b4:	beq.n	b992 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    b9b6:	ldr	r2, [r4, #4]
    b9b8:	movs	r1, #0
    b9ba:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    b9bc:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    b9be:	b.n	b98e <sm_set_pool+0x38>

0000b9c0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    b9c0:	b.w	b344 <unused_interrupt_vector>

0000b9c4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    b9c4:	ldr	r3, [pc, #72]	; (ba10 <tempmonGetTemp+0x4c>)
    b9c6:	ldr.w	r2, [r3, #128]	; 0x80
    b9ca:	lsls	r2, r2, #29
    b9cc:	bpl.n	b9c6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b9ce:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b9d2:	ldr	r2, [pc, #64]	; (ba14 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b9d4:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b9d8:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    b9dc:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    b9e0:	ldr	r3, [pc, #52]	; (ba18 <tempmonGetTemp+0x54>)
    b9e2:	vcvt.f32.u32	s0, s0
    b9e6:	vldr	s14, [r3]
    b9ea:	vcvt.f32.s32	s15, s15
    b9ee:	ldr	r3, [pc, #44]	; (ba1c <tempmonGetTemp+0x58>)
    b9f0:	vcvt.f32.u32	s14, s14
    b9f4:	vsub.f32	s15, s15, s14
    b9f8:	vldr	s14, [r3]
    b9fc:	ldr	r3, [pc, #32]	; (ba20 <tempmonGetTemp+0x5c>)
    b9fe:	vmul.f32	s15, s15, s14
    ba02:	vldr	s13, [r3]
    ba06:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    ba0a:	vsub.f32	s0, s0, s14
    ba0e:	bx	lr
    ba10:	.word	0x400d8100
    ba14:	.word	0x20020cd4
    ba18:	.word	0x20020cd0
    ba1c:	.word	0x20020cd8
    ba20:	.word	0x20020cdc

0000ba24 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ba24:	cmp	r0, #54	; 0x36
{
    ba26:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ba28:	bhi.n	ba42 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    ba2a:	lsls	r2, r0, #4
    ba2c:	ldr	r3, [pc, #40]	; (ba58 <digitalWrite+0x34>)
    ba2e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    ba32:	ldr	r3, [r3, r2]
	mask = p->mask;
    ba34:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    ba36:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    ba38:	tst	r4, r2
    ba3a:	beq.n	ba4a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    ba3c:	cbz	r1, ba44 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    ba3e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ba42:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    ba44:	str.w	r2, [r3, #136]	; 0x88
    ba48:	b.n	ba42 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ba4a:	ldr	r3, [r0, #8]
		if (val) {
    ba4c:	cbz	r1, ba54 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ba4e:	ldr	r2, [pc, #12]	; (ba5c <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ba50:	str	r2, [r3, #0]
    ba52:	b.n	ba42 <digitalWrite+0x1e>
    ba54:	ldr	r2, [pc, #8]	; (ba60 <digitalWrite+0x3c>)
    ba56:	b.n	ba50 <digitalWrite+0x2c>
    ba58:	.word	0x20000614
    ba5c:	.word	0x0001f038
    ba60:	.word	0x00013038

0000ba64 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ba64:	cmp	r0, #54	; 0x36
{
    ba66:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ba68:	bhi.n	ba9a <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    ba6a:	ldr	r3, [pc, #76]	; (bab8 <pinMode+0x54>)
    ba6c:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ba6e:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ba70:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    ba72:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ba76:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ba78:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ba7c:	beq.n	ba82 <pinMode+0x1e>
    ba7e:	cmp	r1, #4
    ba80:	bne.n	ba9c <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ba82:	orrs	r4, r5
		if (mode == OUTPUT) {
    ba84:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ba86:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    ba88:	bne.n	ba8e <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ba8a:	movs	r2, #56	; 0x38
    ba8c:	b.n	ba92 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ba8e:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    ba92:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    ba94:	movs	r2, #21
    ba96:	ldr	r3, [r0, #4]
    ba98:	str	r2, [r3, #0]
}
    ba9a:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ba9c:	bic.w	r4, r4, r5
    baa0:	str	r4, [r2, #4]
		if (mode == INPUT) {
    baa2:	cmp	r1, #0
    baa4:	beq.n	ba8a <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    baa6:	cmp	r1, #2
    baa8:	bne.n	baae <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    baaa:	ldr	r2, [pc, #16]	; (babc <pinMode+0x58>)
    baac:	b.n	ba92 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    baae:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bab0:	ite	eq
    bab2:	ldreq	r2, [pc, #12]	; (bac0 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bab4:	ldrne	r2, [pc, #12]	; (bac4 <pinMode+0x60>)
    bab6:	b.n	ba92 <pinMode+0x2e>
    bab8:	.word	0x20000614
    babc:	.word	0x0001f038
    bac0:	.word	0x00013038
    bac4:	.word	0x00010038

0000bac8 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bac8:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bacc:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bace:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    bad2:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bad4:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    bad6:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    bada:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bade:	ldrh.w	r3, [r0, #392]	; 0x188
    bae2:	uxth	r3, r3
{
    bae4:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bae6:	orr.w	r3, r3, #240	; 0xf0
    baea:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    baec:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    baf0:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    baf4:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    baf8:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bafc:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    bb00:	adds	r2, #1
    bb02:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bb04:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bb06:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    bb08:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bb0a:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bb0c:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    bb0e:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bb10:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    bb12:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    bb14:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    bb16:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    bb18:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    bb1a:	bne.n	bafc <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bb1c:	ldrh.w	r3, [r0, #392]	; 0x188
    bb20:	uxth	r3, r3
    bb22:	orr.w	r3, r3, #15
    bb26:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bb2a:	ldrh.w	r3, [r0, #392]	; 0x188
    bb2e:	uxth	r3, r3
    bb30:	orr.w	r3, r3, #3840	; 0xf00
    bb34:	strh.w	r3, [r0, #392]	; 0x188
}
    bb38:	pop	{r4, r5, r6, r7, pc}

0000bb3a <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    bb3a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bb3c:	mov.w	ip, #15
{
    bb40:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    bb42:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bb44:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bb48:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bb4c:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    bb50:	add.w	r3, r0, r2, lsl #5
    bb54:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    bb56:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    bb58:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    bb5a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    bb5c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    bb5e:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    bb62:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    bb64:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    bb66:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    bb68:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    bb6a:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    bb6c:	bne.n	bb50 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    bb6e:	pop	{r4, r5, r6, r7, pc}

0000bb70 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bb70:	ldr	r2, [pc, #84]	; (bbc8 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    bb72:	ldr	r0, [pc, #88]	; (bbcc <pwm_init+0x5c>)
{
    bb74:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    bb76:	ldr	r3, [r2, #120]	; 0x78
    bb78:	orr.w	r3, r3, #16711680	; 0xff0000
    bb7c:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    bb7e:	ldr.w	r3, [r2, #128]	; 0x80
    bb82:	orr.w	r3, r3, #4227858432	; 0xfc000000
    bb86:	orr.w	r3, r3, #196608	; 0x30000
    bb8a:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    bb8e:	bl	bac8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    bb92:	add.w	r0, r0, #16384	; 0x4000
    bb96:	bl	bac8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    bb9a:	add.w	r0, r0, #16384	; 0x4000
    bb9e:	bl	bac8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    bba2:	add.w	r0, r0, #16384	; 0x4000
    bba6:	bl	bac8 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    bbaa:	sub.w	r0, r0, #2146304	; 0x20c000
    bbae:	bl	bb3a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    bbb2:	add.w	r0, r0, #16384	; 0x4000
    bbb6:	bl	bb3a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    bbba:	add.w	r0, r0, #16384	; 0x4000
}
    bbbe:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    bbc2:	b.w	bb3a <quadtimer_init>
    bbc6:	nop
    bbc8:	.word	0x400fc000
    bbcc:	.word	0x403dc000

0000bbd0 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    bbd0:	ldr	r2, [pc, #8]	; (bbdc <txEvent_event+0xc>)
    bbd2:	ldr	r3, [r2, #0]
    bbd4:	adds	r3, #1
    bbd6:	str	r3, [r2, #0]
    bbd8:	bx	lr
    bbda:	nop
    bbdc:	.word	0x20020c30

0000bbe0 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    bbe0:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    bbe2:	ldr	r4, [pc, #40]	; (bc0c <rx_event+0x2c>)
	int i = t->callback_param;
    bbe4:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    bbe6:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    bbe8:	ldr	r2, [pc, #36]	; (bc10 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    bbea:	adds	r3, #1
    bbec:	cmp	r3, #5
    bbee:	it	cs
    bbf0:	movcs	r3, #0
	rx_list[head] = i;
    bbf2:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    bbf4:	ldr	r1, [r0, #4]
    bbf6:	ldr	r2, [pc, #28]	; (bc14 <rx_event+0x34>)
    bbf8:	ubfx	r1, r1, #16, #15
    bbfc:	ldrh	r2, [r2, #0]
    bbfe:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    bc00:	ldr	r1, [pc, #20]	; (bc18 <rx_event+0x38>)
    bc02:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    bc06:	uxtb	r3, r3
    bc08:	strb	r3, [r4, #0]
}
    bc0a:	pop	{r4, pc}
    bc0c:	.word	0x200215cc
    bc10:	.word	0x200215d6
    bc14:	.word	0x200213ee
    bc18:	.word	0x20020cbc

0000bc1c <rx_queue_transfer>:
{
    bc1c:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    bc1e:	ldr	r1, [pc, #80]	; (bc70 <rx_queue_transfer+0x54>)
{
    bc20:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    bc22:	ldr	r7, [pc, #80]	; (bc74 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    bc24:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    bc28:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bc2a:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    bc2c:	add	r0, r1
	asm("dsb");
    bc2e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bc32:	mov.w	r4, #3758153728	; 0xe000e000
    bc36:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    bc3a:	adds	r2, #32
	} while (location < end_addr);
    bc3c:	cmp	r0, r2
    bc3e:	bhi.n	bc36 <rx_queue_transfer+0x1a>
	asm("dsb");
    bc40:	dsb	sy
	asm("isb");
    bc44:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bc48:	ldr	r5, [pc, #44]	; (bc78 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bc4a:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bc4e:	ldrh	r2, [r7, #0]
    bc50:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bc54:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    bc58:	mov	r0, r5
    bc5a:	bl	afa8 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    bc5e:	mov	r1, r5
    bc60:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    bc62:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    bc66:	bl	aff8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    bc6a:	str.w	r6, [r4, #268]	; 0x10c
}
    bc6e:	pop	{r3, r4, r5, r6, r7, pc}
    bc70:	.word	0x20200800
    bc74:	.word	0x200213ee
    bc78:	.word	0x20005c40

0000bc7c <usb_mtp_configure>:
	if (usb_high_speed) {
    bc7c:	ldr	r3, [pc, #120]	; (bcf8 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bc7e:	movs	r2, #128	; 0x80
    bc80:	movs	r1, #0
    bc82:	ldr	r0, [pc, #120]	; (bcfc <usb_mtp_configure+0x80>)
{
    bc84:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    bc86:	ldrb	r3, [r3, #0]
	tx_head = 0;
    bc88:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    bc8a:	ldr	r6, [pc, #116]	; (bd00 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    bc8c:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    bc8e:	ldr	r3, [pc, #116]	; (bd04 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    bc90:	ite	eq
    bc92:	moveq	r5, #64	; 0x40
    bc94:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    bc98:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    bc9a:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    bc9c:	bl	9d8c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    bca0:	movs	r2, #128	; 0x80
    bca2:	movs	r1, #0
    bca4:	ldr	r0, [pc, #96]	; (bd08 <usb_mtp_configure+0x8c>)
    bca6:	bl	9d8c <memset>
	tx_head = 0;
    bcaa:	ldr	r3, [pc, #96]	; (bd0c <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bcac:	mov	r2, r4
    bcae:	mov	r1, r5
	tx_head = 0;
    bcb0:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bcb2:	movs	r0, #4
	rx_head = 0;
    bcb4:	ldr	r3, [pc, #88]	; (bd10 <usb_mtp_configure+0x94>)
    bcb6:	strb	r4, [r3, #0]
	rx_tail = 0;
    bcb8:	ldr	r3, [pc, #88]	; (bd14 <usb_mtp_configure+0x98>)
    bcba:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    bcbc:	mov	r3, r4
    bcbe:	bl	af68 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    bcc2:	mov	r2, r4
    bcc4:	ldrh	r1, [r6, #0]
    bcc6:	movs	r0, #4
    bcc8:	ldr	r3, [pc, #76]	; (bd18 <usb_mtp_configure+0x9c>)
    bcca:	bl	af28 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    bcce:	mov	r2, r4
    bcd0:	ldr	r3, [pc, #72]	; (bd1c <usb_mtp_configure+0xa0>)
    bcd2:	movs	r1, #32
    bcd4:	movs	r0, #5
    bcd6:	bl	af68 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bcda:	mov	r0, r4
    bcdc:	bl	bc1c <rx_queue_transfer>
    bce0:	movs	r0, #1
    bce2:	bl	bc1c <rx_queue_transfer>
    bce6:	movs	r0, #2
    bce8:	bl	bc1c <rx_queue_transfer>
    bcec:	movs	r0, #3
}
    bcee:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    bcf2:	b.w	bc1c <rx_queue_transfer>
    bcf6:	nop
    bcf8:	.word	0x200215e4
    bcfc:	.word	0x20005d40
    bd00:	.word	0x200213ee
    bd04:	.word	0x20021474
    bd08:	.word	0x20005c40
    bd0c:	.word	0x200215e0
    bd10:	.word	0x200215cc
    bd14:	.word	0x200215dc
    bd18:	.word	0x0000bbe1
    bd1c:	.word	0x0000bbd1

0000bd20 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    bd20:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    bd24:	ldr	r7, [pc, #112]	; (bd98 <usb_mtp_recv+0x78>)
{
    bd26:	mov	r5, r1
	uint32_t tail = rx_tail;
    bd28:	ldr	r6, [pc, #112]	; (bd9c <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    bd2a:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    bd2e:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bd30:	ldr.w	r9, [pc, #120]	; bdac <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    bd34:	uxtb	r4, r3
		if (tail != rx_head) break;
    bd36:	ldr.w	sl, [pc, #120]	; bdb0 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bd3a:	ldrb.w	r3, [r9]
    bd3e:	cbz	r3, bd8c <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    bd40:	ldrb.w	r3, [sl]
    bd44:	cmp	r4, r3
    bd46:	bne.n	bd5c <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    bd48:	ldr	r3, [r7, #0]
    bd4a:	str	r0, [sp, #4]
    bd4c:	sub.w	r3, r3, r8
    bd50:	cmp	r3, r5
    bd52:	bcs.n	bd92 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    bd54:	bl	bf50 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    bd58:	ldr	r0, [sp, #4]
    bd5a:	b.n	bd3a <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    bd5c:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    bd5e:	ldr	r2, [pc, #64]	; (bda0 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    bd60:	ldr	r1, [pc, #64]	; (bda4 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    bd62:	cmp	r3, #5
    bd64:	it	cs
    bd66:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    bd68:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    bd6a:	ldr	r2, [pc, #60]	; (bda8 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    bd6c:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    bd70:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    bd74:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    bd76:	mov	r2, r4
	rx_tail = tail;
    bd78:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    bd7a:	bl	9dd0 <memcpy>
	rx_queue_transfer(i);
    bd7e:	mov	r0, r5
    bd80:	bl	bc1c <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    bd84:	mov	r0, r4
    bd86:	add	sp, #8
    bd88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    bd8c:	mov.w	r4, #4294967295
    bd90:	b.n	bd84 <usb_mtp_recv+0x64>
			return 0;
    bd92:	movs	r4, #0
    bd94:	b.n	bd84 <usb_mtp_recv+0x64>
    bd96:	nop
    bd98:	.word	0x20021374
    bd9c:	.word	0x200215dc
    bda0:	.word	0x200215d6
    bda4:	.word	0x20200800
    bda8:	.word	0x20020cbc
    bdac:	.word	0x200215e3
    bdb0:	.word	0x200215cc

0000bdb4 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    bdb4:	ldr	r3, [pc, #28]	; (bdd4 <usb_mtp_available+0x20>)
    bdb6:	ldrb	r3, [r3, #0]
    bdb8:	and.w	r0, r3, #255	; 0xff
    bdbc:	cbz	r3, bdd2 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    bdbe:	ldr	r3, [pc, #24]	; (bdd8 <usb_mtp_available+0x24>)
    bdc0:	ldrb	r2, [r3, #0]
    bdc2:	ldr	r3, [pc, #24]	; (bddc <usb_mtp_available+0x28>)
    bdc4:	ldrb	r3, [r3, #0]
    bdc6:	cmp	r2, r3
    bdc8:	beq.n	bdd0 <usb_mtp_available+0x1c>
    bdca:	ldr	r3, [pc, #20]	; (bde0 <usb_mtp_available+0x2c>)
    bdcc:	ldrh	r0, [r3, #0]
    bdce:	bx	lr
	if (!usb_configuration) return 0;
    bdd0:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    bdd2:	bx	lr
    bdd4:	.word	0x200215e3
    bdd8:	.word	0x200215cc
    bddc:	.word	0x200215dc
    bde0:	.word	0x200213ee

0000bde4 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    bde4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    bde8:	ldr	r6, [pc, #164]	; (be90 <usb_mtp_send+0xac>)
{
    bdea:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    bdec:	ldr	r7, [pc, #164]	; (be94 <usb_mtp_send+0xb0>)
{
    bdee:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    bdf0:	ldrb	r3, [r6, #0]
{
    bdf2:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    bdf4:	ldr.w	r9, [pc, #168]	; bea0 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    bdf8:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    bdfc:	ldr.w	fp, [pc, #164]	; bea4 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    be00:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    be04:	ldrb.w	r3, [fp]
    be08:	cmp	r3, #0
    be0a:	beq.n	be84 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    be0c:	mov	r0, r7
    be0e:	bl	b014 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    be12:	lsls	r3, r0, #24
    be14:	bpl.n	be28 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    be16:	ldr.w	r3, [r9]
    be1a:	sub.w	r3, r3, sl
    be1e:	cmp	r3, r5
    be20:	bhi.n	be8a <usb_mtp_send+0xa6>
		yield();
    be22:	bl	bf50 <yield>
	while (1) {
    be26:	b.n	be04 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    be28:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    be2a:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    be2c:	ldr	r5, [pc, #104]	; (be98 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    be2e:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    be30:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    be34:	mov	r0, r5
    be36:	bl	9dd0 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    be3a:	ldr	r2, [pc, #96]	; (be9c <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    be3c:	mov	r3, r5
    be3e:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    be40:	add	r2, r5
	asm("dsb");
    be42:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    be46:	mov.w	r1, #3758153728	; 0xe000e000
    be4a:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    be4e:	adds	r3, #32
	} while (location < end_addr);
    be50:	cmp	r2, r3
    be52:	bhi.n	be4a <usb_mtp_send+0x66>
	asm("dsb");
    be54:	dsb	sy
	asm("isb");
    be58:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    be5c:	movs	r3, #0
    be5e:	mov	r2, r4
    be60:	mov	r1, r5
    be62:	mov	r0, r7
    be64:	bl	afa8 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    be68:	movs	r0, #4
    be6a:	mov	r1, r7
    be6c:	bl	afd4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    be70:	ldrb	r3, [r6, #0]
	return len;
    be72:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    be74:	adds	r3, #1
    be76:	uxtb	r3, r3
    be78:	cmp	r3, #3
    be7a:	it	hi
    be7c:	movhi	r3, #0
    be7e:	strb	r3, [r6, #0]
}
    be80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    be84:	mov.w	r0, #4294967295
    be88:	b.n	be80 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    be8a:	movs	r0, #0
    be8c:	b.n	be80 <usb_mtp_send+0x9c>
    be8e:	nop
    be90:	.word	0x200215e0
    be94:	.word	0x20005d40
    be98:	.word	0x20201000
    be9c:	.word	0x20021474
    bea0:	.word	0x20021374
    bea4:	.word	0x200215e3

0000bea8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    bea8:	ldr	r3, [pc, #68]	; (bef0 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    beaa:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    beac:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    beb0:	ldr	r3, [pc, #64]	; (bef4 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    beb2:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    beb6:	cmp	r0, r3
{
    beb8:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    beba:	it	cc
    bebc:	movcc	r3, #10
{
    bebe:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    bec0:	it	cc
    bec2:	mulcc	r0, r3
	ultoa(num, buf, 10);
    bec4:	add	r1, sp, #4
    bec6:	bl	b03c <ultoa>
	for (i=0; i<10; i++) {
    beca:	ldr	r0, [pc, #44]	; (bef8 <usb_init_serialnumber+0x50>)
    becc:	add	r2, sp, #4
    bece:	movs	r1, #0
    bed0:	mov	r5, r0
		char c = buf[i];
    bed2:	ldrb.w	r4, [r2], #1
		if (!c) break;
    bed6:	mov	r3, r1
	for (i=0; i<10; i++) {
    bed8:	adds	r1, #1
		if (!c) break;
    beda:	cbz	r4, bee6 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    bedc:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    bede:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    bee2:	bne.n	bed2 <usb_init_serialnumber+0x2a>
    bee4:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bee6:	adds	r3, #1
    bee8:	lsls	r3, r3, #1
    beea:	strb	r3, [r5, #0]
}
    beec:	add	sp, #20
    beee:	pop	{r4, r5, pc}
    bef0:	.word	0x401f4400
    bef4:	.word	0x00989680
    bef8:	.word	0x200022ba

0000befc <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    befc:	ldr	r1, [pc, #68]	; (bf44 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    befe:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    bf00:	ldr	r3, [r1, #0]
    bf02:	cbz	r3, bf18 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    bf04:	mrs	r3, IPSR
		if (ipsr != 0) return;
    bf08:	cbnz	r3, bf18 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bf0a:	mrs	r2, PRIMASK
		__disable_irq();
    bf0e:	cpsid	i
		EventResponder *first = firstYield;
    bf10:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    bf12:	cbnz	r0, bf1a <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    bf14:	cbnz	r2, bf18 <EventResponder::runFromYield()+0x1c>
    bf16:	cpsie	i
	}
    bf18:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    bf1a:	ldr	r4, [pc, #44]	; (bf48 <EventResponder::runFromYield()+0x4c>)
    bf1c:	ldrb	r5, [r4, #0]
    bf1e:	cmp	r5, #0
    bf20:	bne.n	bf14 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    bf22:	movs	r3, #1
    bf24:	strb	r3, [r4, #0]
		firstYield = first->_next;
    bf26:	ldr	r3, [r0, #20]
    bf28:	str	r3, [r1, #0]
		if (firstYield) {
    bf2a:	cbz	r3, bf3e <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    bf2c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    bf2e:	cbnz	r2, bf32 <EventResponder::runFromYield()+0x36>
    bf30:	cpsie	i
		first->_triggered = false;
    bf32:	movs	r5, #0
		(*(first->_function))(*first);
    bf34:	ldr	r3, [r0, #8]
		first->_triggered = false;
    bf36:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    bf38:	blx	r3
		runningFromYield = false;
    bf3a:	strb	r5, [r4, #0]
    bf3c:	b.n	bf18 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    bf3e:	ldr	r1, [pc, #12]	; (bf4c <EventResponder::runFromYield()+0x50>)
    bf40:	str	r3, [r1, #0]
    bf42:	b.n	bf2e <EventResponder::runFromYield()+0x32>
    bf44:	.word	0x20020804
    bf48:	.word	0x2002153b
    bf4c:	.word	0x20020810

0000bf50 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    bf50:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    bf54:	ldr	r3, [pc, #92]	; (bfb4 <yield+0x64>)
    bf56:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    bf58:	cbz	r4, bf82 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    bf5a:	ldr	r5, [pc, #92]	; (bfb8 <yield+0x68>)
    bf5c:	ldrb	r3, [r5, #0]
    bf5e:	cbnz	r3, bf82 <yield+0x32>
	running = 1;
    bf60:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    bf62:	lsls	r1, r4, #31
	running = 1;
    bf64:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    bf66:	bpl.n	bf72 <yield+0x22>
    bf68:	bl	a2b8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    bf6c:	cbz	r0, bf72 <yield+0x22>
    bf6e:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    bf72:	lsls	r2, r4, #30
    bf74:	bmi.n	bfa8 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    bf76:	movs	r3, #0
    bf78:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    bf7a:	lsls	r3, r4, #29
    bf7c:	bpl.n	bf82 <yield+0x32>
		EventResponder::runFromYield();
    bf7e:	bl	befc <EventResponder::runFromYield()>
	}
};
    bf82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    bf86:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    bf8a:	ldr	r3, [r7, #0]
    bf8c:	mov	r0, r7
    bf8e:	ldr	r3, [r3, #16]
    bf90:	blx	r3
    bf92:	cbz	r0, bf9a <yield+0x4a>
    bf94:	ldr	r3, [r7, #20]
    bf96:	ldr	r3, [r3, #8]
    bf98:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bf9a:	adds	r6, #1
    bf9c:	ldrb.w	r2, [r8]
    bfa0:	uxtb	r3, r6
    bfa2:	cmp	r2, r3
    bfa4:	bhi.n	bf86 <yield+0x36>
    bfa6:	b.n	bf76 <yield+0x26>
    bfa8:	movs	r6, #0
    bfaa:	ldr.w	r8, [pc, #16]	; bfbc <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    bfae:	ldr.w	r9, [pc, #16]	; bfc0 <yield+0x70>
    bfb2:	b.n	bf9c <yield+0x4c>
    bfb4:	.word	0x200215e6
    bfb8:	.word	0x2002153d
    bfbc:	.word	0x2002153c
    bfc0:	.word	0x20020814

0000bfc4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    bfc4:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    bfc6:	ldr	r5, [pc, #44]	; (bff4 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    bfc8:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    bfca:	ldr	r6, [pc, #44]	; (bff8 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    bfcc:	mrs	r2, PRIMASK
		__disable_irq();
    bfd0:	cpsid	i
		EventResponder *first = firstInterrupt;
    bfd2:	ldr	r0, [r5, #0]
		if (first) {
    bfd4:	cbz	r0, bfee <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    bfd6:	ldr	r3, [r0, #20]
    bfd8:	str	r3, [r5, #0]
			if (firstInterrupt) {
    bfda:	cbz	r3, bfea <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    bfdc:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    bfde:	cbnz	r2, bfe2 <EventResponder::runFromInterrupt()+0x1e>
    bfe0:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    bfe2:	ldr	r3, [r0, #8]
			first->_triggered = false;
    bfe4:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    bfe6:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    bfe8:	b.n	bfcc <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    bfea:	str	r3, [r6, #0]
    bfec:	b.n	bfde <EventResponder::runFromInterrupt()+0x1a>
    bfee:	cbnz	r2, bff2 <EventResponder::runFromInterrupt()+0x2e>
    bff0:	cpsie	i
}
    bff2:	pop	{r4, r5, r6, pc}
    bff4:	.word	0x2002080c
    bff8:	.word	0x20020808

0000bffc <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    bffc:	b.w	bfc4 <EventResponder::runFromInterrupt()>

0000c000 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c000:	ldr	r3, [pc, #16]	; (c014 <systick_isr+0x14>)
    c002:	ldr	r2, [r3, #4]
    c004:	ldr	r3, [pc, #16]	; (c018 <systick_isr+0x18>)
    c006:	str	r2, [r3, #0]
	systick_millis_count++;
    c008:	ldr	r2, [pc, #16]	; (c01c <systick_isr+0x1c>)
    c00a:	ldr	r3, [r2, #0]
    c00c:	adds	r3, #1
    c00e:	str	r3, [r2, #0]
}
    c010:	bx	lr
    c012:	nop
    c014:	.word	0xe0001000
    c018:	.word	0x20021370
    c01c:	.word	0x20021374

0000c020 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c020:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c022:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c024:	ldr	r4, [pc, #136]	; (c0b0 <DMAChannel::begin(bool)+0x90>)
    c026:	cbnz	r1, c04c <DMAChannel::begin(bool)+0x2c>
    c028:	ldr	r1, [r0, #0]
    c02a:	cbz	r1, c04c <DMAChannel::begin(bool)+0x2c>
    c02c:	ldrb	r3, [r0, #4]
    c02e:	cmp	r3, #15
    c030:	bhi.n	c04c <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c032:	ldrh	r2, [r4, #0]
    c034:	asrs	r2, r3
    c036:	lsls	r2, r2, #31
    c038:	bpl.n	c04c <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c03a:	add.w	r3, r3, #33554432	; 0x2000000
    c03e:	add.w	r3, r3, #29824	; 0x7480
    c042:	cmp.w	r1, r3, lsl #5
    c046:	bne.n	c04c <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c048:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c04a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c04c:	ldrh	r1, [r4, #0]
    c04e:	movs	r3, #0
    c050:	asr.w	r2, r1, r3
    c054:	ands.w	r2, r2, #1
    c058:	bne.n	c0a0 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c05a:	movs	r5, #1
    c05c:	lsls	r5, r3
    c05e:	orrs	r1, r5
    c060:	strh	r1, [r4, #0]
			__enable_irq();
    c062:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c064:	ldr	r5, [pc, #76]	; (c0b4 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c066:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c068:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c06c:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c06e:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c070:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c074:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c078:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c07a:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c07c:	movw	r5, #1154	; 0x482
    c080:	ldr	r1, [pc, #52]	; (c0b8 <DMAChannel::begin(bool)+0x98>)
    c082:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c084:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c086:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c088:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c08a:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c08c:	str	r3, [r0, #0]
	*p++ = 0;
    c08e:	strd	r2, r2, [r3]
	*p++ = 0;
    c092:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c096:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c09a:	strd	r2, r2, [r3, #24]
    c09e:	b.n	c04a <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c0a0:	adds	r3, #1
    c0a2:	cmp	r3, #16
    c0a4:	bne.n	c050 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c0a6:	cpsie	i
			TCD = (TCD_t *)0;
    c0a8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c0aa:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c0ac:	str	r2, [r0, #0]
			return; // no more channels available
    c0ae:	b.n	c04a <DMAChannel::begin(bool)+0x2a>
    c0b0:	.word	0x200213c6
    c0b4:	.word	0x400fc000
    c0b8:	.word	0x400e8000

0000c0bc <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c0bc:	ldrb	r3, [r0, #4]
    c0be:	cmp	r3, #15
    c0c0:	bhi.n	c0e2 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c0c2:	ldr	r2, [pc, #32]	; (c0e4 <DMAChannel::release()+0x28>)
    c0c4:	strb	r3, [r2, #26]
	__disable_irq();
    c0c6:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c0c8:	ldr	r1, [pc, #28]	; (c0e8 <DMAChannel::release()+0x2c>)
    c0ca:	movs	r2, #1
    c0cc:	ldrb	r3, [r0, #4]
    c0ce:	lsls	r2, r3
    c0d0:	ldrh	r3, [r1, #0]
    c0d2:	bic.w	r3, r3, r2
    c0d6:	strh	r3, [r1, #0]
	__enable_irq();
    c0d8:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c0da:	movs	r3, #16
    c0dc:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c0de:	movs	r3, #0
    c0e0:	str	r3, [r0, #0]
}
    c0e2:	bx	lr
    c0e4:	.word	0x400e8000
    c0e8:	.word	0x200213c6

0000c0ec <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c0ec:	push	{r3, lr}
    c0ee:	bl	cce <Print::write(char const*)>
    c0f2:	pop	{r3, pc}

0000c0f4 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c0f4:	movs	r3, #0
    c0f6:	movs	r2, #10
    c0f8:	b.w	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c0fc <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c0fc:	movs	r3, #0
    c0fe:	uxtb	r2, r2
    c100:	b.w	c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c104 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c104:	push	{r3, r4, r5, lr}
    c106:	mov	r5, r0
    c108:	bl	c0fc <Print::print(unsigned long, int)>
    c10c:	mov	r4, r0
    c10e:	mov	r0, r5
    c110:	bl	c258 <Print::println()>
    c114:	add	r0, r4
    c116:	pop	{r3, r4, r5, pc}

0000c118 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c118:	movs	r2, #0
    c11a:	movs	r3, #1
    c11c:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c11e:	push	{r4, lr}
		while (len > 0) {
    c120:	cmp	r1, #0
    c122:	sub.w	r4, r0, r1
    c126:	bgt.n	c130 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c128:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c12a:	orr.w	r0, r3, r2, lsl #16
    c12e:	pop	{r4, pc}
			a += *p++;
    c130:	ldrh	r4, [r4, #0]
			len -= 2;
    c132:	subs	r1, #2
			a += *p++;
    c134:	uxtah	r3, r3, r4
			b += a;
    c138:	add	r2, r3
			len -= 2;
    c13a:	b.n	c120 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c13c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c13c:	b.w	a2cc <usb_serial_flush_input>

0000c140 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c140:	b.w	a274 <usb_serial_peekchar>

0000c144 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c144:	b.w	a32c <usb_serial_getchar>

0000c148 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c148:	b.w	a2b8 <usb_serial_available>

0000c14c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c14c:	b.w	a53c <usb_serial_flush_output>

0000c150 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c150:	b.w	a4f0 <usb_serial_write_buffer_free>

0000c154 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c154:	mov	r0, r1
    c156:	mov	r1, r2
    c158:	b.w	a34c <usb_serial_write>

0000c15c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c15c:	mov	r0, r1
    c15e:	b.w	a4d8 <usb_serial_putchar>

0000c162 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c162:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c164:	bl	788 <setup>
	while (1) {
		loop();
    c168:	bl	27c <loop>
		yield();
    c16c:	bl	bf50 <yield>
	while (1) {
    c170:	b.n	c168 <main+0x6>
	...

0000c174 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c174:	push	{r4, r5, r6, lr}
    c176:	ldr	r5, [pc, #36]	; (c19c <Stream::timedRead()+0x28>)
    c178:	mov	r4, r0
    c17a:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c17c:	ldr	r3, [r4, #0]
    c17e:	mov	r0, r4
    c180:	ldr	r3, [r3, #20]
    c182:	blx	r3
    if (c >= 0) return c;
    c184:	cmp	r0, #0
    c186:	bge.n	c19a <Stream::timedRead()+0x26>
    yield();
    c188:	bl	bf50 <yield>
    c18c:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c18e:	ldr	r2, [r4, #8]
    c190:	subs	r3, r3, r6
    c192:	cmp	r3, r2
    c194:	bcc.n	c17c <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c196:	mov.w	r0, #4294967295
}
    c19a:	pop	{r4, r5, r6, pc}
    c19c:	.word	0x20021374

0000c1a0 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c1a0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1a4:	mov	r6, r0
    c1a6:	mov	r7, r1
    c1a8:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c1aa:	mov	r5, r2
    c1ac:	cbz	r2, c1de <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c1ae:	cbz	r3, c1d0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c1b0:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c1b4:	movs	r4, #0
	while (index < length) {
    c1b6:	cmp	r4, r8
    c1b8:	bcs.n	c1cc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c1ba:	mov	r0, r6
    c1bc:	bl	c174 <Stream::timedRead()>
		if (c == terminator) break;
    c1c0:	cmp	r7, r0
    c1c2:	beq.n	c1cc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c1c4:	cmp	r0, #0
    c1c6:	bge.n	c1d6 <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c1c8:	movs	r3, #1
    c1ca:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c1cc:	movs	r3, #0
    c1ce:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c1d0:	mov	r0, r4
    c1d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c1d6:	adds	r4, #1
		*buffer++ = (char)c;
    c1d8:	strb.w	r0, [r5], #1
		index++;
    c1dc:	b.n	c1b6 <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c1de:	mov	r4, r2
    c1e0:	b.n	c1d0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c1e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c1e2:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c1e4:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c1e6:	it	eq
    c1e8:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c1ea:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c1ec:	cbnz	r1, c21a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c1ee:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c1f0:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c1f2:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c1f6:	cbz	r3, c208 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c1f8:	subs	r3, r4, #1
		buf[i] = '-';
    c1fa:	add	r2, sp, #40	; 0x28
		i--;
    c1fc:	uxtb	r4, r3
		buf[i] = '-';
    c1fe:	uxtab	r3, r2, r3
    c202:	movs	r2, #45	; 0x2d
    c204:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c208:	ldr	r3, [r0, #0]
    c20a:	add	r1, sp, #4
    c20c:	rsb	r2, r4, #34	; 0x22
    c210:	ldr	r3, [r3, #4]
    c212:	add	r1, r4
    c214:	blx	r3
}
    c216:	add	sp, #44	; 0x2c
    c218:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c21a:	movs	r4, #33	; 0x21
			digit = n % base;
    c21c:	udiv	r6, r1, r2
    c220:	mls	r7, r2, r6, r1
    c224:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c226:	cmp	r7, #9
    c228:	add.w	r7, r4, #40	; 0x28
    c22c:	ite	ls
    c22e:	addls	r5, #48	; 0x30
    c230:	addhi	r5, #55	; 0x37
    c232:	add	r7, sp
			if (n == 0) break;
    c234:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c236:	uxtb	r5, r5
    c238:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c23c:	bhi.n	c1f6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c23e:	subs	r4, #1
			n /= base;
    c240:	mov	r1, r6
			i--;
    c242:	uxtb	r4, r4
			digit = n % base;
    c244:	b.n	c21c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c246 <Print::print(long)>:
	if (n < 0) {
    c246:	cmp	r1, #0
		n = -n;
    c248:	mov.w	r2, #10
    c24c:	itte	lt
    c24e:	neglt	r1, r1
		sign = '-';
    c250:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c252:	movge	r3, #0
	if (base == 0) {
    c254:	b.w	c1e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c258 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c258:	movw	r3, #2573	; 0xa0d
{
    c25c:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c25e:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c262:	movs	r2, #2
    c264:	ldr	r3, [r0, #0]
    c266:	add	r1, sp, #4
    c268:	ldr	r3, [r3, #4]
    c26a:	blx	r3
}
    c26c:	add	sp, #12
    c26e:	ldr.w	pc, [sp], #4
	...

0000c274 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c274:	ldr	r3, [pc, #20]	; (c28c <_write+0x18>)
    c276:	cmp	r0, #2
    c278:	it	hi
    c27a:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c27c:	ldr	r0, [r3, #0]
{
    c27e:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c280:	ldr	r4, [r0, #4]
    c282:	mov	r0, r3
    c284:	mov	r3, r4
}
    c286:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c28a:	bx	r3
    c28c:	.word	0x20001cec

0000c290 <Print::printf(char const*, ...)>:
{
    c290:	push	{r1, r2, r3}
    c292:	push	{r0, r1, lr}
    c294:	add	r2, sp, #12
    c296:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c29a:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c29c:	bl	e5d8 <vdiprintf>
}
    c2a0:	add	sp, #8
    c2a2:	ldr.w	lr, [sp], #4
    c2a6:	add	sp, #12
    c2a8:	bx	lr

0000c2aa <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c2aa:	push	{r4, r5}
	if (base == 0) {
    c2ac:	cbnz	r2, c2b8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c2ae:	ldr	r3, [r0, #0]
    c2b0:	uxtb	r1, r1
    c2b2:	ldr	r3, [r3, #0]
}
    c2b4:	pop	{r4, r5}
		return write((uint8_t)n);
    c2b6:	bx	r3
}
    c2b8:	pop	{r4, r5}
    c2ba:	b.w	c1e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c2be <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c2be:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c2c2:	sub	sp, #72	; 0x48
    c2c4:	mov	r8, r0
    c2c6:	mov	r7, r2
    c2c8:	mov	r6, r3
    c2ca:	ldrb.w	r9, [sp, #104]	; 0x68
    c2ce:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c2d2:	cmp.w	r9, #1
    c2d6:	bls.n	c34a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c2d8:	orrs.w	r3, r2, r6
    c2dc:	bne.n	c314 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c2de:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c2e0:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c2e2:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c2e6:	cmp.w	sl, #0
    c2ea:	beq.n	c2fc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c2ec:	subs	r3, r5, #1
		buf[i] = '-';
    c2ee:	add	r2, sp, #72	; 0x48
		i--;
    c2f0:	uxtb	r5, r3
		buf[i] = '-';
    c2f2:	uxtab	r3, r2, r3
    c2f6:	movs	r2, #45	; 0x2d
    c2f8:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c2fc:	ldr.w	r3, [r8]
    c300:	add	r1, sp, #4
    c302:	rsb	r2, r5, #66	; 0x42
    c306:	mov	r0, r8
    c308:	ldr	r3, [r3, #4]
    c30a:	add	r1, r5
    c30c:	blx	r3
}
    c30e:	add	sp, #72	; 0x48
    c310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c314:	movs	r5, #65	; 0x41
			digit = n % base;
    c316:	mov	r1, r6
    c318:	mov	r2, r9
    c31a:	movs	r3, #0
    c31c:	mov	r0, r7
    c31e:	bl	c48c <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c322:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c326:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c328:	add	r3, sp
    c32a:	cmp	r4, #9
    c32c:	ite	ls
    c32e:	addls	r4, #48	; 0x30
    c330:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c332:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c334:	uxtb	r4, r4
			if (n == 0) break;
    c336:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c33a:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c33e:	bcc.n	c2e6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c340:	subs	r5, #1
			n /= base;
    c342:	mov	r7, r0
    c344:	mov	r6, r1
			i--;
    c346:	uxtb	r5, r5
			digit = n % base;
    c348:	b.n	c316 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c34a:	movs	r0, #0
    c34c:	b.n	c30e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000c350 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c350:	vcmp.f64	d0, d0
{
    c354:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c356:	vmrs	APSR_nzcv, fpscr
{
    c35a:	mov	r6, r0
    c35c:	mov	r5, r1
    c35e:	vpush	{d8-d9}
    c362:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c364:	bvc.n	c378 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c366:	ldr	r1, [pc, #264]	; (c470 <Print::printFloat(double, unsigned char)+0x120>)
    c368:	bl	cce <Print::write(char const*)>
    c36c:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c36e:	mov	r0, r4
    c370:	add	sp, #28
    c372:	vpop	{d8-d9}
    c376:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c378:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c37c:	vldr	d6, [pc, #208]	; c450 <Print::printFloat(double, unsigned char)+0x100>
    c380:	vcmp.f64	d7, d6
    c384:	vmrs	APSR_nzcv, fpscr
    c388:	ble.n	c38e <Print::printFloat(double, unsigned char)+0x3e>
    c38a:	ldr	r1, [pc, #232]	; (c474 <Print::printFloat(double, unsigned char)+0x124>)
    c38c:	b.n	c368 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c38e:	vldr	d7, [pc, #200]	; c458 <Print::printFloat(double, unsigned char)+0x108>
    c392:	vcmpe.f64	d0, d7
    c396:	vmrs	APSR_nzcv, fpscr
    c39a:	ble.n	c3a2 <Print::printFloat(double, unsigned char)+0x52>
    c39c:	ldr	r1, [pc, #216]	; (c478 <Print::printFloat(double, unsigned char)+0x128>)
    c39e:	mov	r0, r6
    c3a0:	b.n	c368 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c3a2:	vldr	d7, [pc, #188]	; c460 <Print::printFloat(double, unsigned char)+0x110>
    c3a6:	vcmpe.f64	d0, d7
    c3aa:	vmrs	APSR_nzcv, fpscr
    c3ae:	bmi.n	c39c <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c3b0:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c3b4:	movs	r2, #0
	double rounding = 0.5;
    c3b6:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c3ba:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c3be:	vldr	d6, [pc, #168]	; c468 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c3c2:	itte	mi
    c3c4:	vnegmi.f64	d0, d0
		sign = 1;
    c3c8:	movmi	r3, #1
	uint8_t sign=0;
    c3ca:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c3cc:	uxtb	r1, r2
    c3ce:	cmp	r5, r1
    c3d0:	bhi.n	c420 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c3d2:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c3d6:	movs	r2, #10
    c3d8:	mov	r0, r6
    c3da:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c3de:	vmov	r1, s18
    c3e2:	bl	c1e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c3e6:	mov	r4, r0
	if (digits > 0) {
    c3e8:	cmp	r5, #0
    c3ea:	beq.n	c36e <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c3ec:	vcvt.f64.u32	d0, s18
    c3f0:	cmp	r5, #15
    c3f2:	add	r0, sp, #8
			remainder *= 10.0;
    c3f4:	vmov.f64	d6, #36	; 0x41200000  10.0
    c3f8:	it	cs
    c3fa:	movcs	r5, #15
		buf[0] = '.';
    c3fc:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c3fe:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c402:	mov	r1, r0
    c404:	mov	r2, r5
    c406:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c40a:	subs	r2, #1
    c40c:	uxtb	r2, r2
    c40e:	cmp	r2, #255	; 0xff
    c410:	bne.n	c428 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c412:	adds	r5, #1
    c414:	ldr	r3, [r6, #0]
    c416:	mov	r0, r6
    c418:	ldr	r3, [r3, #4]
    c41a:	uxtb	r2, r5
    c41c:	blx	r3
    c41e:	b.n	c36e <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c420:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c424:	adds	r2, #1
    c426:	b.n	c3cc <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c428:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c42c:	vcvt.u32.f64	s15, d0
    c430:	vstr	s15, [sp, #4]
    c434:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c438:	vmov	s15, r3
			buf[count++] = '0' + n;
    c43c:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c440:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c444:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c448:	vsub.f64	d0, d0, d7
    c44c:	b.n	c40a <Print::printFloat(double, unsigned char)+0xba>
    c44e:	nop
    c450:	.word	0xffffffff
    c454:	.word	0x7fefffff
    c458:	.word	0xe0000000
    c45c:	.word	0x41efffff
    c460:	.word	0xe0000000
    c464:	.word	0xc1efffff
    c468:	.word	0xa0000000
    c46c:	.word	0x3fb99999
    c470:	.word	0x2000115c
    c474:	.word	0x20001160
    c478:	.word	0x20001164

0000c47c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c47c:	b.w	c798 <free>

0000c480 <__aeabi_atexit>:
    c480:	mov	r3, r1
    c482:	mov	r1, r0
    c484:	mov	r0, r3
    c486:	b.w	d5f8 <__cxa_atexit>
	...

0000c48c <__aeabi_uldivmod>:
    c48c:	cbnz	r3, c4a4 <__aeabi_uldivmod+0x18>
    c48e:	cbnz	r2, c4a4 <__aeabi_uldivmod+0x18>
    c490:	cmp	r1, #0
    c492:	it	eq
    c494:	cmpeq	r0, #0
    c496:	itt	ne
    c498:	movne.w	r1, #4294967295
    c49c:	movne.w	r0, #4294967295
    c4a0:	b.w	c784 <__aeabi_idiv0>
    c4a4:	sub.w	ip, sp, #8
    c4a8:	strd	ip, lr, [sp, #-16]!
    c4ac:	bl	c4bc <__udivmoddi4>
    c4b0:	ldr.w	lr, [sp, #4]
    c4b4:	ldrd	r2, r3, [sp, #8]
    c4b8:	add	sp, #16
    c4ba:	bx	lr

0000c4bc <__udivmoddi4>:
    c4bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4c0:	ldr	r6, [sp, #32]
    c4c2:	mov	r5, r1
    c4c4:	mov	r4, r0
    c4c6:	mov	r7, r1
    c4c8:	cmp	r3, #0
    c4ca:	bne.n	c562 <__udivmoddi4+0xa6>
    c4cc:	cmp	r2, r1
    c4ce:	mov	ip, r2
    c4d0:	bls.n	c59e <__udivmoddi4+0xe2>
    c4d2:	clz	r3, r2
    c4d6:	cbz	r3, c4ea <__udivmoddi4+0x2e>
    c4d8:	lsl.w	ip, r2, r3
    c4dc:	rsb	r2, r3, #32
    c4e0:	lsls	r7, r3
    c4e2:	lsr.w	r2, r0, r2
    c4e6:	orrs	r7, r2
    c4e8:	lsls	r4, r3
    c4ea:	mov.w	lr, ip, lsr #16
    c4ee:	uxth.w	r5, ip
    c4f2:	udiv	r1, r7, lr
    c4f6:	lsrs	r2, r4, #16
    c4f8:	mls	r7, lr, r1, r7
    c4fc:	orr.w	r2, r2, r7, lsl #16
    c500:	mul.w	r0, r1, r5
    c504:	cmp	r0, r2
    c506:	bls.n	c51e <__udivmoddi4+0x62>
    c508:	adds.w	r2, ip, r2
    c50c:	add.w	r7, r1, #4294967295
    c510:	bcs.w	c74c <__udivmoddi4+0x290>
    c514:	cmp	r0, r2
    c516:	bls.w	c74c <__udivmoddi4+0x290>
    c51a:	subs	r1, #2
    c51c:	add	r2, ip
    c51e:	subs	r2, r2, r0
    c520:	uxth	r4, r4
    c522:	udiv	r0, r2, lr
    c526:	mls	r2, lr, r0, r2
    c52a:	orr.w	r4, r4, r2, lsl #16
    c52e:	mul.w	r5, r0, r5
    c532:	cmp	r5, r4
    c534:	bls.n	c54c <__udivmoddi4+0x90>
    c536:	adds.w	r4, ip, r4
    c53a:	add.w	r2, r0, #4294967295
    c53e:	bcs.w	c750 <__udivmoddi4+0x294>
    c542:	cmp	r5, r4
    c544:	bls.w	c750 <__udivmoddi4+0x294>
    c548:	add	r4, ip
    c54a:	subs	r0, #2
    c54c:	orr.w	r0, r0, r1, lsl #16
    c550:	subs	r4, r4, r5
    c552:	movs	r1, #0
    c554:	cbz	r6, c55e <__udivmoddi4+0xa2>
    c556:	lsrs	r4, r3
    c558:	movs	r3, #0
    c55a:	strd	r4, r3, [r6]
    c55e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c562:	cmp	r3, r1
    c564:	bls.n	c578 <__udivmoddi4+0xbc>
    c566:	cmp	r6, #0
    c568:	beq.w	c746 <__udivmoddi4+0x28a>
    c56c:	movs	r1, #0
    c56e:	strd	r0, r5, [r6]
    c572:	mov	r0, r1
    c574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c578:	clz	r1, r3
    c57c:	cmp	r1, #0
    c57e:	bne.n	c614 <__udivmoddi4+0x158>
    c580:	cmp	r3, r5
    c582:	bcc.n	c58a <__udivmoddi4+0xce>
    c584:	cmp	r2, r0
    c586:	bhi.w	c77a <__udivmoddi4+0x2be>
    c58a:	subs	r4, r0, r2
    c58c:	sbc.w	r2, r5, r3
    c590:	movs	r0, #1
    c592:	mov	r7, r2
    c594:	cmp	r6, #0
    c596:	beq.n	c55e <__udivmoddi4+0xa2>
    c598:	strd	r4, r7, [r6]
    c59c:	b.n	c55e <__udivmoddi4+0xa2>
    c59e:	cbnz	r2, c5a2 <__udivmoddi4+0xe6>
    c5a0:	udf	#255	; 0xff
    c5a2:	clz	r3, r2
    c5a6:	cmp	r3, #0
    c5a8:	bne.w	c6cc <__udivmoddi4+0x210>
    c5ac:	subs	r2, r1, r2
    c5ae:	mov.w	r7, ip, lsr #16
    c5b2:	uxth.w	lr, ip
    c5b6:	movs	r1, #1
    c5b8:	udiv	r5, r2, r7
    c5bc:	mls	r0, r7, r5, r2
    c5c0:	lsrs	r2, r4, #16
    c5c2:	orr.w	r2, r2, r0, lsl #16
    c5c6:	mul.w	r0, lr, r5
    c5ca:	cmp	r0, r2
    c5cc:	bls.n	c5e0 <__udivmoddi4+0x124>
    c5ce:	adds.w	r2, ip, r2
    c5d2:	add.w	r8, r5, #4294967295
    c5d6:	bcs.n	c5de <__udivmoddi4+0x122>
    c5d8:	cmp	r0, r2
    c5da:	bhi.w	c774 <__udivmoddi4+0x2b8>
    c5de:	mov	r5, r8
    c5e0:	subs	r2, r2, r0
    c5e2:	uxth	r4, r4
    c5e4:	udiv	r0, r2, r7
    c5e8:	mls	r2, r7, r0, r2
    c5ec:	orr.w	r4, r4, r2, lsl #16
    c5f0:	mul.w	lr, lr, r0
    c5f4:	cmp	lr, r4
    c5f6:	bls.n	c60a <__udivmoddi4+0x14e>
    c5f8:	adds.w	r4, ip, r4
    c5fc:	add.w	r2, r0, #4294967295
    c600:	bcs.n	c608 <__udivmoddi4+0x14c>
    c602:	cmp	lr, r4
    c604:	bhi.w	c77e <__udivmoddi4+0x2c2>
    c608:	mov	r0, r2
    c60a:	sub.w	r4, r4, lr
    c60e:	orr.w	r0, r0, r5, lsl #16
    c612:	b.n	c554 <__udivmoddi4+0x98>
    c614:	rsb	r7, r1, #32
    c618:	lsls	r3, r1
    c61a:	lsr.w	ip, r2, r7
    c61e:	orr.w	ip, ip, r3
    c622:	lsl.w	r4, r5, r1
    c626:	lsr.w	r3, r0, r7
    c62a:	lsrs	r5, r7
    c62c:	mov.w	r9, ip, lsr #16
    c630:	orrs	r3, r4
    c632:	udiv	r8, r5, r9
    c636:	uxth.w	lr, ip
    c63a:	mls	r5, r9, r8, r5
    c63e:	lsrs	r4, r3, #16
    c640:	orr.w	r4, r4, r5, lsl #16
    c644:	mul.w	r5, r8, lr
    c648:	cmp	r5, r4
    c64a:	lsl.w	r2, r2, r1
    c64e:	lsl.w	r0, r0, r1
    c652:	bls.n	c66c <__udivmoddi4+0x1b0>
    c654:	adds.w	r4, ip, r4
    c658:	add.w	sl, r8, #4294967295
    c65c:	bcs.w	c770 <__udivmoddi4+0x2b4>
    c660:	cmp	r5, r4
    c662:	bls.w	c770 <__udivmoddi4+0x2b4>
    c666:	sub.w	r8, r8, #2
    c66a:	add	r4, ip
    c66c:	subs	r4, r4, r5
    c66e:	uxth	r5, r3
    c670:	udiv	r3, r4, r9
    c674:	mls	r4, r9, r3, r4
    c678:	orr.w	r4, r5, r4, lsl #16
    c67c:	mul.w	lr, r3, lr
    c680:	cmp	lr, r4
    c682:	bls.n	c696 <__udivmoddi4+0x1da>
    c684:	adds.w	r4, ip, r4
    c688:	add.w	r5, r3, #4294967295
    c68c:	bcs.n	c768 <__udivmoddi4+0x2ac>
    c68e:	cmp	lr, r4
    c690:	bls.n	c768 <__udivmoddi4+0x2ac>
    c692:	subs	r3, #2
    c694:	add	r4, ip
    c696:	orr.w	r3, r3, r8, lsl #16
    c69a:	umull	r9, r5, r3, r2
    c69e:	sub.w	r4, r4, lr
    c6a2:	cmp	r4, r5
    c6a4:	mov	r8, r9
    c6a6:	mov	lr, r5
    c6a8:	bcc.n	c758 <__udivmoddi4+0x29c>
    c6aa:	beq.n	c754 <__udivmoddi4+0x298>
    c6ac:	cbz	r6, c6c4 <__udivmoddi4+0x208>
    c6ae:	subs.w	r2, r0, r8
    c6b2:	sbc.w	r4, r4, lr
    c6b6:	lsl.w	r7, r4, r7
    c6ba:	lsrs	r2, r1
    c6bc:	lsrs	r4, r1
    c6be:	orrs	r7, r2
    c6c0:	strd	r7, r4, [r6]
    c6c4:	mov	r0, r3
    c6c6:	movs	r1, #0
    c6c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6cc:	rsb	r1, r3, #32
    c6d0:	lsl.w	ip, r2, r3
    c6d4:	lsr.w	r2, r0, r1
    c6d8:	lsr.w	r1, r5, r1
    c6dc:	lsls	r5, r3
    c6de:	orrs	r2, r5
    c6e0:	mov.w	r7, ip, lsr #16
    c6e4:	uxth.w	lr, ip
    c6e8:	udiv	r0, r1, r7
    c6ec:	mls	r5, r7, r0, r1
    c6f0:	lsrs	r1, r2, #16
    c6f2:	orr.w	r1, r1, r5, lsl #16
    c6f6:	mul.w	r5, r0, lr
    c6fa:	cmp	r5, r1
    c6fc:	lsl.w	r4, r4, r3
    c700:	bls.n	c714 <__udivmoddi4+0x258>
    c702:	adds.w	r1, ip, r1
    c706:	add.w	r8, r0, #4294967295
    c70a:	bcs.n	c76c <__udivmoddi4+0x2b0>
    c70c:	cmp	r5, r1
    c70e:	bls.n	c76c <__udivmoddi4+0x2b0>
    c710:	subs	r0, #2
    c712:	add	r1, ip
    c714:	subs	r1, r1, r5
    c716:	uxth	r2, r2
    c718:	udiv	r5, r1, r7
    c71c:	mls	r1, r7, r5, r1
    c720:	orr.w	r2, r2, r1, lsl #16
    c724:	mul.w	r1, r5, lr
    c728:	cmp	r1, r2
    c72a:	bls.n	c73e <__udivmoddi4+0x282>
    c72c:	adds.w	r2, ip, r2
    c730:	add.w	r8, r5, #4294967295
    c734:	bcs.n	c764 <__udivmoddi4+0x2a8>
    c736:	cmp	r1, r2
    c738:	bls.n	c764 <__udivmoddi4+0x2a8>
    c73a:	subs	r5, #2
    c73c:	add	r2, ip
    c73e:	subs	r2, r2, r1
    c740:	orr.w	r1, r5, r0, lsl #16
    c744:	b.n	c5b8 <__udivmoddi4+0xfc>
    c746:	mov	r1, r6
    c748:	mov	r0, r6
    c74a:	b.n	c55e <__udivmoddi4+0xa2>
    c74c:	mov	r1, r7
    c74e:	b.n	c51e <__udivmoddi4+0x62>
    c750:	mov	r0, r2
    c752:	b.n	c54c <__udivmoddi4+0x90>
    c754:	cmp	r0, r9
    c756:	bcs.n	c6ac <__udivmoddi4+0x1f0>
    c758:	subs.w	r8, r9, r2
    c75c:	sbc.w	lr, r5, ip
    c760:	subs	r3, #1
    c762:	b.n	c6ac <__udivmoddi4+0x1f0>
    c764:	mov	r5, r8
    c766:	b.n	c73e <__udivmoddi4+0x282>
    c768:	mov	r3, r5
    c76a:	b.n	c696 <__udivmoddi4+0x1da>
    c76c:	mov	r0, r8
    c76e:	b.n	c714 <__udivmoddi4+0x258>
    c770:	mov	r8, sl
    c772:	b.n	c66c <__udivmoddi4+0x1b0>
    c774:	subs	r5, #2
    c776:	add	r2, ip
    c778:	b.n	c5e0 <__udivmoddi4+0x124>
    c77a:	mov	r0, r1
    c77c:	b.n	c594 <__udivmoddi4+0xd8>
    c77e:	add	r4, ip
    c780:	subs	r0, #2
    c782:	b.n	c60a <__udivmoddi4+0x14e>

0000c784 <__aeabi_idiv0>:
    c784:	bx	lr
    c786:	nop

0000c788 <malloc>:
    c788:	ldr	r3, [pc, #8]	; (c794 <malloc+0xc>)
    c78a:	mov	r1, r0
    c78c:	ldr	r0, [r3, #0]
    c78e:	b.w	c7e8 <_malloc_r>
    c792:	nop
    c794:	.word	0x2000228c

0000c798 <free>:
    c798:	ldr	r3, [pc, #8]	; (c7a4 <free+0xc>)
    c79a:	mov	r1, r0
    c79c:	ldr	r0, [r3, #0]
    c79e:	b.w	f518 <_free_r>
    c7a2:	nop
    c7a4:	.word	0x2000228c

0000c7a8 <sbrk_aligned>:
    c7a8:	push	{r4, r5, r6, lr}
    c7aa:	ldr	r6, [pc, #56]	; (c7e4 <sbrk_aligned+0x3c>)
    c7ac:	mov	r4, r1
    c7ae:	ldr	r1, [r6, #0]
    c7b0:	mov	r5, r0
    c7b2:	cbnz	r1, c7ba <sbrk_aligned+0x12>
    c7b4:	bl	e7b0 <_sbrk_r>
    c7b8:	str	r0, [r6, #0]
    c7ba:	mov	r1, r4
    c7bc:	mov	r0, r5
    c7be:	bl	e7b0 <_sbrk_r>
    c7c2:	adds	r3, r0, #1
    c7c4:	beq.n	c7dc <sbrk_aligned+0x34>
    c7c6:	adds	r4, r0, #3
    c7c8:	bic.w	r4, r4, #3
    c7cc:	cmp	r0, r4
    c7ce:	beq.n	c7e0 <sbrk_aligned+0x38>
    c7d0:	subs	r1, r4, r0
    c7d2:	mov	r0, r5
    c7d4:	bl	e7b0 <_sbrk_r>
    c7d8:	adds	r0, #1
    c7da:	bne.n	c7e0 <sbrk_aligned+0x38>
    c7dc:	mov.w	r4, #4294967295
    c7e0:	mov	r0, r4
    c7e2:	pop	{r4, r5, r6, pc}
    c7e4:	.word	0x20020858

0000c7e8 <_malloc_r>:
    c7e8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c7ec:	adds	r5, r1, #3
    c7ee:	bic.w	r5, r5, #3
    c7f2:	adds	r5, #8
    c7f4:	cmp	r5, #12
    c7f6:	it	cc
    c7f8:	movcc	r5, #12
    c7fa:	cmp	r5, #0
    c7fc:	mov	r7, r0
    c7fe:	blt.n	c804 <_malloc_r+0x1c>
    c800:	cmp	r1, r5
    c802:	bls.n	c810 <_malloc_r+0x28>
    c804:	movs	r3, #12
    c806:	str	r3, [r7, #0]
    c808:	movs	r6, #0
    c80a:	mov	r0, r6
    c80c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c810:	ldr	r6, [pc, #188]	; (c8d0 <_malloc_r+0xe8>)
    c812:	bl	c8d4 <__malloc_lock>
    c816:	ldr	r3, [r6, #0]
    c818:	mov	r4, r3
    c81a:	cbnz	r4, c86e <_malloc_r+0x86>
    c81c:	mov	r1, r5
    c81e:	mov	r0, r7
    c820:	bl	c7a8 <sbrk_aligned>
    c824:	adds	r3, r0, #1
    c826:	mov	r4, r0
    c828:	bne.n	c8ca <_malloc_r+0xe2>
    c82a:	ldr	r4, [r6, #0]
    c82c:	mov	r6, r4
    c82e:	cmp	r6, #0
    c830:	bne.n	c8b8 <_malloc_r+0xd0>
    c832:	cmp	r4, #0
    c834:	beq.n	c8be <_malloc_r+0xd6>
    c836:	ldr	r3, [r4, #0]
    c838:	mov	r1, r6
    c83a:	mov	r0, r7
    c83c:	add.w	r8, r4, r3
    c840:	bl	e7b0 <_sbrk_r>
    c844:	cmp	r8, r0
    c846:	bne.n	c8be <_malloc_r+0xd6>
    c848:	ldr	r3, [r4, #0]
    c84a:	adds	r5, #3
    c84c:	subs	r5, r5, r3
    c84e:	bic.w	r5, r5, #3
    c852:	adds	r5, #8
    c854:	cmp	r5, #12
    c856:	it	cc
    c858:	movcc	r5, #12
    c85a:	mov	r1, r5
    c85c:	mov	r0, r7
    c85e:	bl	c7a8 <sbrk_aligned>
    c862:	adds	r0, #1
    c864:	beq.n	c8be <_malloc_r+0xd6>
    c866:	ldr	r3, [r4, #0]
    c868:	add	r3, r5
    c86a:	str	r3, [r4, #0]
    c86c:	b.n	c88c <_malloc_r+0xa4>
    c86e:	ldr	r2, [r4, #0]
    c870:	subs	r2, r2, r5
    c872:	bmi.n	c8b2 <_malloc_r+0xca>
    c874:	cmp	r2, #11
    c876:	bls.n	c8a6 <_malloc_r+0xbe>
    c878:	adds	r1, r4, r5
    c87a:	cmp	r3, r4
    c87c:	str	r5, [r4, #0]
    c87e:	it	ne
    c880:	strne	r1, [r3, #4]
    c882:	ldr	r3, [r4, #4]
    c884:	it	eq
    c886:	streq	r1, [r6, #0]
    c888:	str	r2, [r4, r5]
    c88a:	str	r3, [r1, #4]
    c88c:	mov	r0, r7
    c88e:	add.w	r6, r4, #11
    c892:	bl	c8e0 <__malloc_unlock>
    c896:	bic.w	r6, r6, #7
    c89a:	adds	r3, r4, #4
    c89c:	subs	r2, r6, r3
    c89e:	beq.n	c80a <_malloc_r+0x22>
    c8a0:	subs	r3, r3, r6
    c8a2:	str	r3, [r4, r2]
    c8a4:	b.n	c80a <_malloc_r+0x22>
    c8a6:	ldr	r2, [r4, #4]
    c8a8:	cmp	r3, r4
    c8aa:	ite	eq
    c8ac:	streq	r2, [r6, #0]
    c8ae:	strne	r2, [r3, #4]
    c8b0:	b.n	c88c <_malloc_r+0xa4>
    c8b2:	mov	r3, r4
    c8b4:	ldr	r4, [r4, #4]
    c8b6:	b.n	c81a <_malloc_r+0x32>
    c8b8:	mov	r4, r6
    c8ba:	ldr	r6, [r6, #4]
    c8bc:	b.n	c82e <_malloc_r+0x46>
    c8be:	movs	r3, #12
    c8c0:	str	r3, [r7, #0]
    c8c2:	mov	r0, r7
    c8c4:	bl	c8e0 <__malloc_unlock>
    c8c8:	b.n	c80a <_malloc_r+0x22>
    c8ca:	str	r5, [r4, #0]
    c8cc:	b.n	c88c <_malloc_r+0xa4>
    c8ce:	nop
    c8d0:	.word	0x20020854

0000c8d4 <__malloc_lock>:
    c8d4:	ldr	r0, [pc, #4]	; (c8dc <__malloc_lock+0x8>)
    c8d6:	b.w	e848 <__retarget_lock_acquire_recursive>
    c8da:	nop
    c8dc:	.word	0x200215b6

0000c8e0 <__malloc_unlock>:
    c8e0:	ldr	r0, [pc, #4]	; (c8e8 <__malloc_unlock+0x8>)
    c8e2:	b.w	e84a <__retarget_lock_release_recursive>
    c8e6:	nop
    c8e8:	.word	0x200215b6

0000c8ec <_realloc_r>:
    c8ec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8f0:	mov	r8, r0
    c8f2:	mov	r4, r2
    c8f4:	mov	r6, r1
    c8f6:	cbnz	r1, c902 <_realloc_r+0x16>
    c8f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c8fc:	mov	r1, r2
    c8fe:	b.w	c7e8 <_malloc_r>
    c902:	cbnz	r2, c910 <_realloc_r+0x24>
    c904:	bl	f518 <_free_r>
    c908:	mov	r5, r4
    c90a:	mov	r0, r5
    c90c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c910:	bl	105d8 <_malloc_usable_size_r>
    c914:	cmp	r4, r0
    c916:	mov	r7, r0
    c918:	bhi.n	c920 <_realloc_r+0x34>
    c91a:	cmp.w	r4, r0, lsr #1
    c91e:	bhi.n	c946 <_realloc_r+0x5a>
    c920:	mov	r1, r4
    c922:	mov	r0, r8
    c924:	bl	c7e8 <_malloc_r>
    c928:	mov	r5, r0
    c92a:	cmp	r0, #0
    c92c:	beq.n	c90a <_realloc_r+0x1e>
    c92e:	cmp	r4, r7
    c930:	mov	r2, r4
    c932:	mov	r1, r6
    c934:	it	cs
    c936:	movcs	r2, r7
    c938:	bl	9dd0 <memcpy>
    c93c:	mov	r1, r6
    c93e:	mov	r0, r8
    c940:	bl	f518 <_free_r>
    c944:	b.n	c90a <_realloc_r+0x1e>
    c946:	mov	r5, r6
    c948:	b.n	c90a <_realloc_r+0x1e>

0000c94a <sulp>:
    c94a:	push	{r4, r5, r6, lr}
    c94c:	mov	r4, r0
    c94e:	mov	r5, r1
    c950:	mov	r6, r2
    c952:	vmov	d0, r4, r5
    c956:	bl	1035c <__ulp>
    c95a:	cbz	r6, c97c <sulp+0x32>
    c95c:	ubfx	r3, r5, #20, #11
    c960:	rsb	r3, r3, #107	; 0x6b
    c964:	cmp	r3, #0
    c966:	ble.n	c97c <sulp+0x32>
    c968:	lsls	r3, r3, #20
    c96a:	add.w	r1, r3, #1069547520	; 0x3fc00000
    c96e:	movs	r0, #0
    c970:	add.w	r1, r1, #3145728	; 0x300000
    c974:	vmov	d7, r0, r1
    c978:	vmul.f64	d0, d0, d7
    c97c:	pop	{r4, r5, r6, pc}
	...

0000c980 <_strtod_l>:
    c980:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c984:	vpush	{d8-d14}
    c988:	sub	sp, #92	; 0x5c
    c98a:	mov	r4, r0
    c98c:	str	r2, [sp, #52]	; 0x34
    c98e:	movs	r2, #0
    c990:	str	r2, [sp, #72]	; 0x48
    c992:	mov	sl, r1
    c994:	mov.w	r8, #0
    c998:	mov.w	r9, #0
    c99c:	mov	r2, r1
    c99e:	str	r2, [sp, #68]	; 0x44
    c9a0:	ldrb	r1, [r2, #0]
    c9a2:	cmp	r1, #43	; 0x2b
    c9a4:	beq.n	ca40 <_strtod_l+0xc0>
    c9a6:	bhi.n	ca1c <_strtod_l+0x9c>
    c9a8:	cmp	r1, #13
    c9aa:	bhi.n	ca14 <_strtod_l+0x94>
    c9ac:	cmp	r1, #8
    c9ae:	bhi.n	ca18 <_strtod_l+0x98>
    c9b0:	cmp	r1, #0
    c9b2:	beq.n	ca2e <_strtod_l+0xae>
    c9b4:	movs	r2, #0
    c9b6:	str	r2, [sp, #32]
    c9b8:	ldr	r6, [sp, #68]	; 0x44
    c9ba:	ldrb	r2, [r6, #0]
    c9bc:	cmp	r2, #48	; 0x30
    c9be:	bne.w	cb32 <_strtod_l+0x1b2>
    c9c2:	ldrb	r2, [r6, #1]
    c9c4:	and.w	r2, r2, #223	; 0xdf
    c9c8:	cmp	r2, #88	; 0x58
    c9ca:	bne.n	caae <_strtod_l+0x12e>
    c9cc:	str	r3, [sp, #8]
    c9ce:	ldr	r3, [sp, #32]
    c9d0:	str	r3, [sp, #4]
    c9d2:	add	r3, sp, #72	; 0x48
    c9d4:	str	r3, [sp, #0]
    c9d6:	ldr	r2, [pc, #580]	; (cc1c <_strtod_l+0x29c>)
    c9d8:	add	r3, sp, #76	; 0x4c
    c9da:	add	r1, sp, #68	; 0x44
    c9dc:	mov	r0, r4
    c9de:	bl	f680 <__gethex>
    c9e2:	ands.w	r7, r0, #15
    c9e6:	mov	r5, r0
    c9e8:	beq.n	c9f6 <_strtod_l+0x76>
    c9ea:	cmp	r7, #6
    c9ec:	bne.n	ca44 <_strtod_l+0xc4>
    c9ee:	adds	r6, #1
    c9f0:	movs	r3, #0
    c9f2:	str	r6, [sp, #68]	; 0x44
    c9f4:	str	r3, [sp, #32]
    c9f6:	ldr	r3, [sp, #52]	; 0x34
    c9f8:	cmp	r3, #0
    c9fa:	bne.w	d4a8 <_strtod_l+0xb28>
    c9fe:	ldr	r3, [sp, #32]
    ca00:	vmov	d0, r8, r9
    ca04:	cbz	r3, ca3a <_strtod_l+0xba>
    ca06:	vneg.f64	d0, d0
    ca0a:	add	sp, #92	; 0x5c
    ca0c:	vpop	{d8-d14}
    ca10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca14:	cmp	r1, #32
    ca16:	bne.n	c9b4 <_strtod_l+0x34>
    ca18:	adds	r2, #1
    ca1a:	b.n	c99e <_strtod_l+0x1e>
    ca1c:	cmp	r1, #45	; 0x2d
    ca1e:	bne.n	c9b4 <_strtod_l+0x34>
    ca20:	movs	r1, #1
    ca22:	str	r1, [sp, #32]
    ca24:	adds	r1, r2, #1
    ca26:	str	r1, [sp, #68]	; 0x44
    ca28:	ldrb	r2, [r2, #1]
    ca2a:	cmp	r2, #0
    ca2c:	bne.n	c9b8 <_strtod_l+0x38>
    ca2e:	ldr	r3, [sp, #52]	; 0x34
    ca30:	str.w	sl, [sp, #68]	; 0x44
    ca34:	cmp	r3, #0
    ca36:	bne.w	d4a4 <_strtod_l+0xb24>
    ca3a:	vmov	d0, r8, r9
    ca3e:	b.n	ca0a <_strtod_l+0x8a>
    ca40:	movs	r1, #0
    ca42:	b.n	ca22 <_strtod_l+0xa2>
    ca44:	ldr	r2, [sp, #72]	; 0x48
    ca46:	cbz	r2, ca58 <_strtod_l+0xd8>
    ca48:	movs	r1, #53	; 0x35
    ca4a:	add	r0, sp, #80	; 0x50
    ca4c:	bl	10550 <__copybits>
    ca50:	ldr	r1, [sp, #72]	; 0x48
    ca52:	mov	r0, r4
    ca54:	bl	fd04 <_Bfree>
    ca58:	subs	r3, r7, #1
    ca5a:	ldr	r2, [sp, #76]	; 0x4c
    ca5c:	cmp	r3, #4
    ca5e:	bhi.n	ca6e <_strtod_l+0xee>
    ca60:	tbb	[pc, r3]
    ca64:	.word	0x201d0314
    ca68:	.byte	0x14
    ca69:	.byte	0x00
    ca6a:	ldrd	r8, r9, [sp, #80]	; 0x50
    ca6e:	lsls	r3, r5, #23
    ca70:	it	mi
    ca72:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    ca76:	bic.w	r3, r9, #2147483648	; 0x80000000
    ca7a:	lsrs	r3, r3, #20
    ca7c:	lsls	r3, r3, #20
    ca7e:	cmp	r3, #0
    ca80:	bne.n	c9f6 <_strtod_l+0x76>
    ca82:	bl	e7f4 <__errno>
    ca86:	movs	r3, #34	; 0x22
    ca88:	str	r3, [r0, #0]
    ca8a:	b.n	c9f6 <_strtod_l+0x76>
    ca8c:	ldrd	r8, r3, [sp, #80]	; 0x50
    ca90:	addw	r2, r2, #1075	; 0x433
    ca94:	bic.w	r3, r3, #1048576	; 0x100000
    ca98:	orr.w	r9, r3, r2, lsl #20
    ca9c:	b.n	ca6e <_strtod_l+0xee>
    ca9e:	ldr.w	r9, [pc, #388]	; cc24 <_strtod_l+0x2a4>
    caa2:	b.n	ca6e <_strtod_l+0xee>
    caa4:	mvn.w	r9, #2147483648	; 0x80000000
    caa8:	mov.w	r8, #4294967295
    caac:	b.n	ca6e <_strtod_l+0xee>
    caae:	ldr	r3, [sp, #68]	; 0x44
    cab0:	adds	r2, r3, #1
    cab2:	str	r2, [sp, #68]	; 0x44
    cab4:	ldrb	r3, [r3, #1]
    cab6:	cmp	r3, #48	; 0x30
    cab8:	beq.n	caae <_strtod_l+0x12e>
    caba:	cmp	r3, #0
    cabc:	beq.n	c9f6 <_strtod_l+0x76>
    cabe:	movs	r3, #1
    cac0:	str	r3, [sp, #24]
    cac2:	ldr	r3, [sp, #68]	; 0x44
    cac4:	str	r3, [sp, #36]	; 0x24
    cac6:	movs	r3, #0
    cac8:	str	r3, [sp, #20]
    caca:	str	r3, [sp, #28]
    cacc:	mov	r6, r3
    cace:	movs	r2, #10
    cad0:	ldr	r0, [sp, #68]	; 0x44
    cad2:	ldrb	r5, [r0, #0]
    cad4:	sub.w	r3, r5, #48	; 0x30
    cad8:	uxtb	r1, r3
    cada:	cmp	r1, #9
    cadc:	bls.n	cb36 <_strtod_l+0x1b6>
    cade:	ldr	r1, [pc, #320]	; (cc20 <_strtod_l+0x2a0>)
    cae0:	movs	r2, #1
    cae2:	bl	e71c <strncmp>
    cae6:	cmp	r0, #0
    cae8:	beq.n	cb56 <_strtod_l+0x1d6>
    caea:	movs	r0, #0
    caec:	mov	r2, r5
    caee:	mov	r3, r6
    caf0:	mov	fp, r0
    caf2:	mov	r1, r0
    caf4:	cmp	r2, #101	; 0x65
    caf6:	beq.n	cafc <_strtod_l+0x17c>
    caf8:	cmp	r2, #69	; 0x45
    cafa:	bne.n	cb2e <_strtod_l+0x1ae>
    cafc:	cbnz	r3, cb06 <_strtod_l+0x186>
    cafe:	ldr	r3, [sp, #24]
    cb00:	orrs	r3, r0
    cb02:	beq.n	ca2e <_strtod_l+0xae>
    cb04:	movs	r3, #0
    cb06:	ldr.w	sl, [sp, #68]	; 0x44
    cb0a:	add.w	r2, sl, #1
    cb0e:	str	r2, [sp, #68]	; 0x44
    cb10:	ldrb.w	r2, [sl, #1]
    cb14:	cmp	r2, #43	; 0x2b
    cb16:	beq.n	cc04 <_strtod_l+0x284>
    cb18:	cmp	r2, #45	; 0x2d
    cb1a:	beq.n	cc14 <_strtod_l+0x294>
    cb1c:	mov.w	lr, #0
    cb20:	sub.w	r5, r2, #48	; 0x30
    cb24:	cmp	r5, #9
    cb26:	bls.w	cc30 <_strtod_l+0x2b0>
    cb2a:	str.w	sl, [sp, #68]	; 0x44
    cb2e:	movs	r5, #0
    cb30:	b.n	cc70 <_strtod_l+0x2f0>
    cb32:	movs	r3, #0
    cb34:	b.n	cac0 <_strtod_l+0x140>
    cb36:	cmp	r6, #8
    cb38:	itete	le
    cb3a:	ldrle	r1, [sp, #28]
    cb3c:	ldrgt	r1, [sp, #20]
    cb3e:	mlale	r3, r2, r1, r3
    cb42:	mlagt	r3, r2, r1, r3
    cb46:	add.w	r0, r0, #1
    cb4a:	ite	le
    cb4c:	strle	r3, [sp, #28]
    cb4e:	strgt	r3, [sp, #20]
    cb50:	adds	r6, #1
    cb52:	str	r0, [sp, #68]	; 0x44
    cb54:	b.n	cad0 <_strtod_l+0x150>
    cb56:	ldr	r3, [sp, #68]	; 0x44
    cb58:	adds	r2, r3, #1
    cb5a:	str	r2, [sp, #68]	; 0x44
    cb5c:	ldrb	r2, [r3, #1]
    cb5e:	cbz	r6, cbcc <_strtod_l+0x24c>
    cb60:	mov	fp, r0
    cb62:	mov	r3, r6
    cb64:	sub.w	r1, r2, #48	; 0x30
    cb68:	cmp	r1, #9
    cb6a:	bls.n	cb92 <_strtod_l+0x212>
    cb6c:	movs	r1, #1
    cb6e:	b.n	caf4 <_strtod_l+0x174>
    cb70:	ldr	r3, [sp, #68]	; 0x44
    cb72:	adds	r2, r3, #1
    cb74:	str	r2, [sp, #68]	; 0x44
    cb76:	ldrb	r2, [r3, #1]
    cb78:	adds	r0, #1
    cb7a:	cmp	r2, #48	; 0x30
    cb7c:	beq.n	cb70 <_strtod_l+0x1f0>
    cb7e:	sub.w	r3, r2, #49	; 0x31
    cb82:	cmp	r3, #8
    cb84:	bhi.w	d4b2 <_strtod_l+0xb32>
    cb88:	ldr	r3, [sp, #68]	; 0x44
    cb8a:	str	r3, [sp, #36]	; 0x24
    cb8c:	mov	fp, r0
    cb8e:	movs	r0, #0
    cb90:	mov	r3, r0
    cb92:	subs	r2, #48	; 0x30
    cb94:	add.w	r1, r0, #1
    cb98:	beq.n	cbc0 <_strtod_l+0x240>
    cb9a:	add	fp, r1
    cb9c:	add.w	ip, r0, r3
    cba0:	mov	r1, r3
    cba2:	movs	r5, #10
    cba4:	cmp	r1, ip
    cba6:	bne.n	cbd0 <_strtod_l+0x250>
    cba8:	adds	r1, r3, r0
    cbaa:	cmp	r1, #8
    cbac:	add.w	r3, r3, #1
    cbb0:	add	r3, r0
    cbb2:	bgt.n	cbec <_strtod_l+0x26c>
    cbb4:	ldr	r0, [sp, #28]
    cbb6:	movs	r1, #10
    cbb8:	mla	r2, r1, r0, r2
    cbbc:	str	r2, [sp, #28]
    cbbe:	movs	r1, #0
    cbc0:	ldr	r2, [sp, #68]	; 0x44
    cbc2:	adds	r0, r2, #1
    cbc4:	str	r0, [sp, #68]	; 0x44
    cbc6:	ldrb	r2, [r2, #1]
    cbc8:	mov	r0, r1
    cbca:	b.n	cb64 <_strtod_l+0x1e4>
    cbcc:	mov	r0, r6
    cbce:	b.n	cb7a <_strtod_l+0x1fa>
    cbd0:	cmp	r1, #8
    cbd2:	add.w	r1, r1, #1
    cbd6:	bgt.n	cbe0 <_strtod_l+0x260>
    cbd8:	ldr	r7, [sp, #28]
    cbda:	muls	r7, r5
    cbdc:	str	r7, [sp, #28]
    cbde:	b.n	cba4 <_strtod_l+0x224>
    cbe0:	cmp	r1, #16
    cbe2:	ittt	le
    cbe4:	ldrle	r7, [sp, #20]
    cbe6:	mulle	r7, r5
    cbe8:	strle	r7, [sp, #20]
    cbea:	b.n	cba4 <_strtod_l+0x224>
    cbec:	cmp	r3, #16
    cbee:	itttt	le
    cbf0:	ldrle	r0, [sp, #20]
    cbf2:	movle	r1, #10
    cbf4:	mlale	r2, r1, r0, r2
    cbf8:	strle	r2, [sp, #20]
    cbfa:	b.n	cbbe <_strtod_l+0x23e>
    cbfc:	mov.w	fp, #0
    cc00:	movs	r1, #1
    cc02:	b.n	cafe <_strtod_l+0x17e>
    cc04:	mov.w	lr, #0
    cc08:	add.w	r2, sl, #2
    cc0c:	str	r2, [sp, #68]	; 0x44
    cc0e:	ldrb.w	r2, [sl, #2]
    cc12:	b.n	cb20 <_strtod_l+0x1a0>
    cc14:	mov.w	lr, #1
    cc18:	b.n	cc08 <_strtod_l+0x288>
    cc1a:	nop
    cc1c:	.word	0x20000984
    cc20:	.word	0x20000d11
    cc24:	.word	0x7ff00000
    cc28:	ldr	r2, [sp, #68]	; 0x44
    cc2a:	adds	r5, r2, #1
    cc2c:	str	r5, [sp, #68]	; 0x44
    cc2e:	ldrb	r2, [r2, #1]
    cc30:	cmp	r2, #48	; 0x30
    cc32:	beq.n	cc28 <_strtod_l+0x2a8>
    cc34:	sub.w	r5, r2, #49	; 0x31
    cc38:	cmp	r5, #8
    cc3a:	bhi.w	cb2e <_strtod_l+0x1ae>
    cc3e:	sub.w	ip, r2, #48	; 0x30
    cc42:	ldr	r2, [sp, #68]	; 0x44
    cc44:	str	r2, [sp, #40]	; 0x28
    cc46:	ldr	r2, [sp, #68]	; 0x44
    cc48:	adds	r5, r2, #1
    cc4a:	str	r5, [sp, #68]	; 0x44
    cc4c:	ldrb	r2, [r2, #1]
    cc4e:	sub.w	r7, r2, #48	; 0x30
    cc52:	cmp	r7, #9
    cc54:	bls.n	ccc6 <_strtod_l+0x346>
    cc56:	ldr	r7, [sp, #40]	; 0x28
    cc58:	subs	r5, r5, r7
    cc5a:	cmp	r5, #8
    cc5c:	movw	r5, #19999	; 0x4e1f
    cc60:	bgt.n	cc68 <_strtod_l+0x2e8>
    cc62:	cmp	r5, ip
    cc64:	it	ge
    cc66:	movge	r5, ip
    cc68:	cmp.w	lr, #0
    cc6c:	beq.n	cc70 <_strtod_l+0x2f0>
    cc6e:	negs	r5, r5
    cc70:	cmp	r3, #0
    cc72:	bne.n	cd10 <_strtod_l+0x390>
    cc74:	ldr	r3, [sp, #24]
    cc76:	orrs	r3, r0
    cc78:	bne.w	c9f6 <_strtod_l+0x76>
    cc7c:	cmp	r1, #0
    cc7e:	bne.w	ca2e <_strtod_l+0xae>
    cc82:	cmp	r2, #105	; 0x69
    cc84:	beq.n	ccd6 <_strtod_l+0x356>
    cc86:	bgt.n	ccd2 <_strtod_l+0x352>
    cc88:	cmp	r2, #73	; 0x49
    cc8a:	beq.n	ccd6 <_strtod_l+0x356>
    cc8c:	cmp	r2, #78	; 0x4e
    cc8e:	bne.w	ca2e <_strtod_l+0xae>
    cc92:	ldr	r1, [pc, #596]	; (cee8 <_strtod_l+0x568>)
    cc94:	add	r0, sp, #68	; 0x44
    cc96:	bl	fb00 <__match>
    cc9a:	cmp	r0, #0
    cc9c:	beq.w	ca2e <_strtod_l+0xae>
    cca0:	ldr	r3, [sp, #68]	; 0x44
    cca2:	ldrb	r3, [r3, #0]
    cca4:	cmp	r3, #40	; 0x28
    cca6:	bne.n	cd04 <_strtod_l+0x384>
    cca8:	ldr	r1, [pc, #576]	; (ceec <_strtod_l+0x56c>)
    ccaa:	add	r2, sp, #80	; 0x50
    ccac:	add	r0, sp, #68	; 0x44
    ccae:	bl	fb28 <__hexnan>
    ccb2:	cmp	r0, #5
    ccb4:	bne.n	cd04 <_strtod_l+0x384>
    ccb6:	ldr	r3, [sp, #84]	; 0x54
    ccb8:	ldr.w	r8, [sp, #80]	; 0x50
    ccbc:	orr.w	r9, r3, #2139095040	; 0x7f800000
    ccc0:	orr.w	r9, r9, #7340032	; 0x700000
    ccc4:	b.n	c9f6 <_strtod_l+0x76>
    ccc6:	movs	r5, #10
    ccc8:	mla	ip, r5, ip, r2
    cccc:	sub.w	ip, ip, #48	; 0x30
    ccd0:	b.n	cc46 <_strtod_l+0x2c6>
    ccd2:	cmp	r2, #110	; 0x6e
    ccd4:	b.n	cc8e <_strtod_l+0x30e>
    ccd6:	ldr	r1, [pc, #536]	; (cef0 <_strtod_l+0x570>)
    ccd8:	add	r0, sp, #68	; 0x44
    ccda:	bl	fb00 <__match>
    ccde:	cmp	r0, #0
    cce0:	beq.w	ca2e <_strtod_l+0xae>
    cce4:	ldr	r3, [sp, #68]	; 0x44
    cce6:	ldr	r1, [pc, #524]	; (cef4 <_strtod_l+0x574>)
    cce8:	subs	r3, #1
    ccea:	add	r0, sp, #68	; 0x44
    ccec:	str	r3, [sp, #68]	; 0x44
    ccee:	bl	fb00 <__match>
    ccf2:	cbnz	r0, ccfa <_strtod_l+0x37a>
    ccf4:	ldr	r3, [sp, #68]	; 0x44
    ccf6:	adds	r3, #1
    ccf8:	str	r3, [sp, #68]	; 0x44
    ccfa:	ldr.w	r9, [pc, #524]	; cf08 <_strtod_l+0x588>
    ccfe:	mov.w	r8, #0
    cd02:	b.n	c9f6 <_strtod_l+0x76>
    cd04:	ldr	r0, [pc, #496]	; (cef8 <_strtod_l+0x578>)
    cd06:	bl	e910 <nan>
    cd0a:	vmov	r8, r9, d0
    cd0e:	b.n	c9f6 <_strtod_l+0x76>
    cd10:	vldr	s15, [sp, #28]
    cd14:	sub.w	r2, r5, fp
    cd18:	vcvt.f64.u32	d7, s15
    cd1c:	cmp	r6, #0
    cd1e:	it	eq
    cd20:	moveq	r6, r3
    cd22:	cmp	r3, #16
    cd24:	str	r2, [sp, #24]
    cd26:	mov	r2, r3
    cd28:	it	ge
    cd2a:	movge	r2, #16
    cd2c:	cmp	r3, #9
    cd2e:	vmov	r8, r9, d7
    cd32:	ble.n	cd4e <_strtod_l+0x3ce>
    cd34:	ldr	r1, [pc, #452]	; (cefc <_strtod_l+0x57c>)
    cd36:	vldr	s13, [sp, #20]
    cd3a:	add.w	r1, r1, r2, lsl #3
    cd3e:	vldr	d5, [r1, #-72]	; 0xffffffb8
    cd42:	vcvt.f64.u32	d6, s13
    cd46:	vfma.f64	d6, d7, d5
    cd4a:	vmov	r8, r9, d6
    cd4e:	cmp	r3, #15
    cd50:	bgt.n	cdc2 <_strtod_l+0x442>
    cd52:	ldr	r1, [sp, #24]
    cd54:	cmp	r1, #0
    cd56:	beq.w	c9f6 <_strtod_l+0x76>
    cd5a:	ble.n	cda4 <_strtod_l+0x424>
    cd5c:	cmp	r1, #22
    cd5e:	bgt.n	cd78 <_strtod_l+0x3f8>
    cd60:	ldr	r3, [pc, #408]	; (cefc <_strtod_l+0x57c>)
    cd62:	add.w	r3, r3, r1, lsl #3
    cd66:	vldr	d7, [r3]
    cd6a:	vmov	d6, r8, r9
    cd6e:	vmul.f64	d7, d7, d6
    cd72:	vmov	r8, r9, d7
    cd76:	b.n	c9f6 <_strtod_l+0x76>
    cd78:	ldr	r0, [sp, #24]
    cd7a:	rsb	r1, r3, #37	; 0x25
    cd7e:	cmp	r1, r0
    cd80:	blt.n	cdc2 <_strtod_l+0x442>
    cd82:	ldr	r2, [pc, #376]	; (cefc <_strtod_l+0x57c>)
    cd84:	rsb	r3, r3, #15
    cd88:	add.w	r1, r2, r3, lsl #3
    cd8c:	vldr	d7, [r1]
    cd90:	vmov	d6, r8, r9
    cd94:	subs	r3, r0, r3
    cd96:	add.w	r2, r2, r3, lsl #3
    cd9a:	vmul.f64	d7, d7, d6
    cd9e:	vldr	d6, [r2]
    cda2:	b.n	cd6e <_strtod_l+0x3ee>
    cda4:	ldr	r1, [sp, #24]
    cda6:	adds	r1, #22
    cda8:	blt.n	cdc2 <_strtod_l+0x442>
    cdaa:	ldr	r3, [pc, #336]	; (cefc <_strtod_l+0x57c>)
    cdac:	sub.w	r5, fp, r5
    cdb0:	add.w	r5, r3, r5, lsl #3
    cdb4:	vldr	d7, [r5]
    cdb8:	vmov	d6, r8, r9
    cdbc:	vdiv.f64	d7, d6, d7
    cdc0:	b.n	cd72 <_strtod_l+0x3f2>
    cdc2:	ldr	r1, [sp, #24]
    cdc4:	subs	r2, r3, r2
    cdc6:	add	r2, r1
    cdc8:	cmp	r2, #0
    cdca:	ble.n	ceaa <_strtod_l+0x52a>
    cdcc:	ands.w	r0, r2, #15
    cdd0:	beq.n	cde8 <_strtod_l+0x468>
    cdd2:	ldr	r1, [pc, #296]	; (cefc <_strtod_l+0x57c>)
    cdd4:	add.w	r1, r1, r0, lsl #3
    cdd8:	vldr	d7, [r1]
    cddc:	vmov	d6, r8, r9
    cde0:	vmul.f64	d7, d7, d6
    cde4:	vmov	r8, r9, d7
    cde8:	bics.w	r2, r2, #15
    cdec:	beq.n	ce8c <_strtod_l+0x50c>
    cdee:	cmp.w	r2, #308	; 0x134
    cdf2:	ble.n	ce3a <_strtod_l+0x4ba>
    cdf4:	movs	r5, #0
    cdf6:	mov	r6, r5
    cdf8:	str	r5, [sp, #28]
    cdfa:	mov	r7, r5
    cdfc:	movs	r3, #34	; 0x22
    cdfe:	ldr.w	r9, [pc, #264]	; cf08 <_strtod_l+0x588>
    ce02:	str	r3, [r4, #0]
    ce04:	mov.w	r8, #0
    ce08:	ldr	r3, [sp, #28]
    ce0a:	cmp	r3, #0
    ce0c:	beq.w	c9f6 <_strtod_l+0x76>
    ce10:	ldr	r1, [sp, #72]	; 0x48
    ce12:	mov	r0, r4
    ce14:	bl	fd04 <_Bfree>
    ce18:	mov	r1, r7
    ce1a:	mov	r0, r4
    ce1c:	bl	fd04 <_Bfree>
    ce20:	mov	r1, r6
    ce22:	mov	r0, r4
    ce24:	bl	fd04 <_Bfree>
    ce28:	ldr	r1, [sp, #28]
    ce2a:	mov	r0, r4
    ce2c:	bl	fd04 <_Bfree>
    ce30:	mov	r1, r5
    ce32:	mov	r0, r4
    ce34:	bl	fd04 <_Bfree>
    ce38:	b.n	c9f6 <_strtod_l+0x76>
    ce3a:	movs	r0, #0
    ce3c:	vmov	d7, r8, r9
    ce40:	ldr	r7, [pc, #188]	; (cf00 <_strtod_l+0x580>)
    ce42:	asrs	r2, r2, #4
    ce44:	mov	r1, r0
    ce46:	cmp	r2, #1
    ce48:	bgt.n	ce92 <_strtod_l+0x512>
    ce4a:	cbz	r0, ce50 <_strtod_l+0x4d0>
    ce4c:	vmov	r8, r9, d7
    ce50:	ldr	r2, [pc, #172]	; (cf00 <_strtod_l+0x580>)
    ce52:	ldr	r0, [pc, #176]	; (cf04 <_strtod_l+0x584>)
    ce54:	add.w	r2, r2, r1, lsl #3
    ce58:	vldr	d7, [r2]
    ce5c:	sub.w	r9, r9, #55574528	; 0x3500000
    ce60:	vmov	d6, r8, r9
    ce64:	ldr	r2, [pc, #160]	; (cf08 <_strtod_l+0x588>)
    ce66:	vmul.f64	d7, d7, d6
    ce6a:	vmov	r1, s15
    ce6e:	ands	r2, r1
    ce70:	cmp	r2, r0
    ce72:	vmov	r8, r9, d7
    ce76:	bhi.n	cdf4 <_strtod_l+0x474>
    ce78:	sub.w	r0, r0, #1048576	; 0x100000
    ce7c:	cmp	r2, r0
    ce7e:	itte	hi
    ce80:	ldrhi.w	r9, [pc, #136]	; cf0c <_strtod_l+0x58c>
    ce84:	movhi.w	r8, #4294967295
    ce88:	addls.w	r9, r1, #55574528	; 0x3500000
    ce8c:	movs	r2, #0
    ce8e:	str	r2, [sp, #20]
    ce90:	b.n	cf80 <_strtod_l+0x600>
    ce92:	tst.w	r2, #1
    ce96:	beq.n	cea2 <_strtod_l+0x522>
    ce98:	vldr	d6, [r7]
    ce9c:	movs	r0, #1
    ce9e:	vmul.f64	d7, d7, d6
    cea2:	adds	r1, #1
    cea4:	asrs	r2, r2, #1
    cea6:	adds	r7, #8
    cea8:	b.n	ce46 <_strtod_l+0x4c6>
    ceaa:	beq.n	ce8c <_strtod_l+0x50c>
    ceac:	negs	r2, r2
    ceae:	ands.w	r0, r2, #15
    ceb2:	beq.n	ceca <_strtod_l+0x54a>
    ceb4:	ldr	r1, [pc, #68]	; (cefc <_strtod_l+0x57c>)
    ceb6:	add.w	r1, r1, r0, lsl #3
    ceba:	vldr	d7, [r1]
    cebe:	vmov	d6, r8, r9
    cec2:	vdiv.f64	d7, d6, d7
    cec6:	vmov	r8, r9, d7
    ceca:	asrs	r2, r2, #4
    cecc:	beq.n	ce8c <_strtod_l+0x50c>
    cece:	cmp	r2, #31
    ced0:	ble.n	cf10 <_strtod_l+0x590>
    ced2:	movs	r5, #0
    ced4:	mov	r6, r5
    ced6:	str	r5, [sp, #28]
    ced8:	mov	r7, r5
    ceda:	movs	r3, #34	; 0x22
    cedc:	mov.w	r8, #0
    cee0:	mov.w	r9, #0
    cee4:	str	r3, [r4, #0]
    cee6:	b.n	ce08 <_strtod_l+0x488>
    cee8:	.word	0x20001bea
    ceec:	.word	0x20000998
    cef0:	.word	0x20001161
    cef4:	.word	0x20001309
    cef8:	.word	0x20000db9
    cefc:	.word	0x20000328
    cf00:	.word	0x20000300
    cf04:	.word	0x7ca00000
    cf08:	.word	0x7ff00000
    cf0c:	.word	0x7fefffff
    cf10:	ands.w	r1, r2, #16
    cf14:	it	ne
    cf16:	movne	r1, #106	; 0x6a
    cf18:	str	r1, [sp, #20]
    cf1a:	vmov	d7, r8, r9
    cf1e:	ldr	r1, [pc, #760]	; (d218 <_strtod_l+0x898>)
    cf20:	movs	r0, #0
    cf22:	lsls	r7, r2, #31
    cf24:	bpl.n	cf30 <_strtod_l+0x5b0>
    cf26:	vldr	d6, [r1]
    cf2a:	movs	r0, #1
    cf2c:	vmul.f64	d7, d7, d6
    cf30:	asrs	r2, r2, #1
    cf32:	add.w	r1, r1, #8
    cf36:	bne.n	cf22 <_strtod_l+0x5a2>
    cf38:	cbz	r0, cf3e <_strtod_l+0x5be>
    cf3a:	vmov	r8, r9, d7
    cf3e:	ldr	r2, [sp, #20]
    cf40:	cbz	r2, cf72 <_strtod_l+0x5f2>
    cf42:	ubfx	r1, r9, #20, #11
    cf46:	rsb	r2, r1, #107	; 0x6b
    cf4a:	cmp	r2, #0
    cf4c:	mov	r0, r9
    cf4e:	ble.n	cf72 <_strtod_l+0x5f2>
    cf50:	cmp	r2, #31
    cf52:	ble.w	d1ae <_strtod_l+0x82e>
    cf56:	cmp	r2, #52	; 0x34
    cf58:	ittt	le
    cf5a:	movle.w	r2, #4294967295
    cf5e:	rsble	r1, r1, #75	; 0x4b
    cf62:	lslle	r2, r1
    cf64:	mov.w	r8, #0
    cf68:	ite	gt
    cf6a:	movgt.w	r9, #57671680	; 0x3700000
    cf6e:	andle.w	r9, r2, r0
    cf72:	vmov	d7, r8, r9
    cf76:	vcmp.f64	d7, #0.0
    cf7a:	vmrs	APSR_nzcv, fpscr
    cf7e:	beq.n	ced2 <_strtod_l+0x552>
    cf80:	ldr	r2, [sp, #28]
    cf82:	str	r2, [sp, #0]
    cf84:	ldr	r1, [sp, #36]	; 0x24
    cf86:	mov	r2, r6
    cf88:	mov	r0, r4
    cf8a:	bl	fdd4 <__s2b>
    cf8e:	str	r0, [sp, #28]
    cf90:	cmp	r0, #0
    cf92:	beq.w	cdf4 <_strtod_l+0x474>
    cf96:	ldr	r2, [sp, #24]
    cf98:	cmp	r2, #0
    cf9a:	sub.w	r3, fp, r5
    cf9e:	vldr	d9, [pc, #600]	; d1f8 <_strtod_l+0x878>
    cfa2:	it	ge
    cfa4:	movge	r3, #0
    cfa6:	vldr	d10, [pc, #600]	; d200 <_strtod_l+0x880>
    cfaa:	vldr	d11, [pc, #604]	; d208 <_strtod_l+0x888>
    cfae:	str	r3, [sp, #36]	; 0x24
    cfb0:	movs	r5, #0
    cfb2:	bic.w	r3, r2, r2, asr #31
    cfb6:	str	r3, [sp, #48]	; 0x30
    cfb8:	mov	r6, r5
    cfba:	ldr	r3, [sp, #28]
    cfbc:	mov	r0, r4
    cfbe:	ldr	r1, [r3, #4]
    cfc0:	bl	fc84 <_Balloc>
    cfc4:	mov	r7, r0
    cfc6:	cmp	r0, #0
    cfc8:	beq.w	cdfc <_strtod_l+0x47c>
    cfcc:	ldr	r3, [sp, #28]
    cfce:	ldr	r2, [r3, #16]
    cfd0:	adds	r2, #2
    cfd2:	add.w	r1, r3, #12
    cfd6:	lsls	r2, r2, #2
    cfd8:	adds	r0, #12
    cfda:	bl	9dd0 <memcpy>
    cfde:	vmov	d0, r8, r9
    cfe2:	add	r2, sp, #80	; 0x50
    cfe4:	add	r1, sp, #76	; 0x4c
    cfe6:	mov	r0, r4
    cfe8:	bl	1043c <__d2b>
    cfec:	vmov	d8, r8, r9
    cff0:	str	r0, [sp, #72]	; 0x48
    cff2:	cmp	r0, #0
    cff4:	beq.w	cdfc <_strtod_l+0x47c>
    cff8:	movs	r1, #1
    cffa:	mov	r0, r4
    cffc:	bl	ff04 <__i2b>
    d000:	mov	r6, r0
    d002:	cmp	r0, #0
    d004:	beq.w	cdfc <_strtod_l+0x47c>
    d008:	ldr	r3, [sp, #76]	; 0x4c
    d00a:	ldr	r1, [sp, #80]	; 0x50
    d00c:	cmp	r3, #0
    d00e:	itete	ge
    d010:	ldrge	r2, [sp, #36]	; 0x24
    d012:	ldrlt	r2, [sp, #48]	; 0x30
    d014:	ldrge.w	sl, [sp, #48]	; 0x30
    d018:	ldrlt.w	fp, [sp, #36]	; 0x24
    d01c:	ite	ge
    d01e:	addge.w	fp, r3, r2
    d022:	sublt.w	sl, r2, r3
    d026:	ldr	r2, [sp, #20]
    d028:	subs	r3, r3, r2
    d02a:	add	r3, r1
    d02c:	ldr	r2, [pc, #492]	; (d21c <_strtod_l+0x89c>)
    d02e:	subs	r3, #1
    d030:	cmp	r3, r2
    d032:	rsb	r1, r1, #54	; 0x36
    d036:	bge.w	d1d4 <_strtod_l+0x854>
    d03a:	subs	r2, r2, r3
    d03c:	cmp	r2, #31
    d03e:	sub.w	r1, r1, r2
    d042:	mov.w	r0, #1
    d046:	bgt.w	d1bc <_strtod_l+0x83c>
    d04a:	lsl.w	r3, r0, r2
    d04e:	str	r3, [sp, #44]	; 0x2c
    d050:	movs	r3, #0
    d052:	str	r3, [sp, #40]	; 0x28
    d054:	add.w	r3, fp, r1
    d058:	ldr	r2, [sp, #20]
    d05a:	cmp	fp, r3
    d05c:	add	sl, r1
    d05e:	add	sl, r2
    d060:	mov	r2, fp
    d062:	it	ge
    d064:	movge	r2, r3
    d066:	cmp	r2, sl
    d068:	it	ge
    d06a:	movge	r2, sl
    d06c:	cmp	r2, #0
    d06e:	ittt	gt
    d070:	subgt	r3, r3, r2
    d072:	subgt.w	sl, sl, r2
    d076:	subgt.w	fp, fp, r2
    d07a:	ldr	r2, [sp, #36]	; 0x24
    d07c:	cmp	r2, #0
    d07e:	ble.n	d0b2 <_strtod_l+0x732>
    d080:	mov	r1, r6
    d082:	mov	r0, r4
    d084:	str	r3, [sp, #60]	; 0x3c
    d086:	bl	10084 <__pow5mult>
    d08a:	mov	r6, r0
    d08c:	cmp	r0, #0
    d08e:	beq.w	cdfc <_strtod_l+0x47c>
    d092:	mov	r1, r0
    d094:	ldr	r2, [sp, #72]	; 0x48
    d096:	mov	r0, r4
    d098:	bl	ff30 <__multiply>
    d09c:	str	r0, [sp, #56]	; 0x38
    d09e:	cmp	r0, #0
    d0a0:	beq.w	cdfc <_strtod_l+0x47c>
    d0a4:	ldr	r1, [sp, #72]	; 0x48
    d0a6:	mov	r0, r4
    d0a8:	bl	fd04 <_Bfree>
    d0ac:	ldr	r2, [sp, #56]	; 0x38
    d0ae:	ldr	r3, [sp, #60]	; 0x3c
    d0b0:	str	r2, [sp, #72]	; 0x48
    d0b2:	cmp	r3, #0
    d0b4:	bgt.w	d1de <_strtod_l+0x85e>
    d0b8:	ldr	r3, [sp, #24]
    d0ba:	cmp	r3, #0
    d0bc:	ble.n	d0d0 <_strtod_l+0x750>
    d0be:	mov	r1, r7
    d0c0:	ldr	r2, [sp, #48]	; 0x30
    d0c2:	mov	r0, r4
    d0c4:	bl	10084 <__pow5mult>
    d0c8:	mov	r7, r0
    d0ca:	cmp	r0, #0
    d0cc:	beq.w	cdfc <_strtod_l+0x47c>
    d0d0:	cmp.w	sl, #0
    d0d4:	ble.n	d0e8 <_strtod_l+0x768>
    d0d6:	mov	r1, r7
    d0d8:	mov	r2, sl
    d0da:	mov	r0, r4
    d0dc:	bl	10138 <__lshift>
    d0e0:	mov	r7, r0
    d0e2:	cmp	r0, #0
    d0e4:	beq.w	cdfc <_strtod_l+0x47c>
    d0e8:	cmp.w	fp, #0
    d0ec:	ble.n	d100 <_strtod_l+0x780>
    d0ee:	mov	r1, r6
    d0f0:	mov	r2, fp
    d0f2:	mov	r0, r4
    d0f4:	bl	10138 <__lshift>
    d0f8:	mov	r6, r0
    d0fa:	cmp	r0, #0
    d0fc:	beq.w	cdfc <_strtod_l+0x47c>
    d100:	ldr	r1, [sp, #72]	; 0x48
    d102:	mov	r2, r7
    d104:	mov	r0, r4
    d106:	bl	10248 <__mdiff>
    d10a:	mov	r5, r0
    d10c:	cmp	r0, #0
    d10e:	beq.w	cdfc <_strtod_l+0x47c>
    d112:	movs	r3, #0
    d114:	ldr.w	sl, [r0, #12]
    d118:	str	r3, [r0, #12]
    d11a:	mov	r1, r6
    d11c:	bl	10210 <__mcmp>
    d120:	cmp	r0, #0
    d122:	bge.n	d224 <_strtod_l+0x8a4>
    d124:	orrs.w	sl, sl, r8
    d128:	bne.w	d276 <_strtod_l+0x8f6>
    d12c:	ubfx	r3, r9, #0, #20
    d130:	cmp	r3, #0
    d132:	bne.w	d276 <_strtod_l+0x8f6>
    d136:	bic.w	r3, r9, #2147483648	; 0x80000000
    d13a:	lsrs	r3, r3, #20
    d13c:	lsls	r3, r3, #20
    d13e:	cmp.w	r3, #112197632	; 0x6b00000
    d142:	bls.w	d276 <_strtod_l+0x8f6>
    d146:	ldr	r3, [r5, #20]
    d148:	cbnz	r3, d152 <_strtod_l+0x7d2>
    d14a:	ldr	r3, [r5, #16]
    d14c:	cmp	r3, #1
    d14e:	ble.w	d276 <_strtod_l+0x8f6>
    d152:	mov	r1, r5
    d154:	movs	r2, #1
    d156:	mov	r0, r4
    d158:	bl	10138 <__lshift>
    d15c:	mov	r1, r6
    d15e:	mov	r5, r0
    d160:	bl	10210 <__mcmp>
    d164:	cmp	r0, #0
    d166:	ble.w	d276 <_strtod_l+0x8f6>
    d16a:	ldr	r1, [sp, #20]
    d16c:	ldr	r2, [pc, #176]	; (d220 <_strtod_l+0x8a0>)
    d16e:	mov	r3, r9
    d170:	cmp	r1, #0
    d172:	beq.w	d2b4 <_strtod_l+0x934>
    d176:	and.w	r1, r2, r9
    d17a:	cmp.w	r1, #112197632	; 0x6b00000
    d17e:	bgt.w	d2b4 <_strtod_l+0x934>
    d182:	cmp.w	r1, #57671680	; 0x3700000
    d186:	ble.w	ceda <_strtod_l+0x55a>
    d18a:	vldr	d7, [pc, #132]	; d210 <_strtod_l+0x890>
    d18e:	vmov	d6, r8, r9
    d192:	ldr	r3, [pc, #140]	; (d220 <_strtod_l+0x8a0>)
    d194:	vmul.f64	d7, d6, d7
    d198:	vmov	r2, s15
    d19c:	ands	r3, r2
    d19e:	vmov	r8, r9, d7
    d1a2:	cmp	r3, #0
    d1a4:	bne.w	ce10 <_strtod_l+0x490>
    d1a8:	movs	r3, #34	; 0x22
    d1aa:	str	r3, [r4, #0]
    d1ac:	b.n	ce10 <_strtod_l+0x490>
    d1ae:	mov.w	r1, #4294967295
    d1b2:	lsl.w	r2, r1, r2
    d1b6:	and.w	r8, r2, r8
    d1ba:	b.n	cf72 <_strtod_l+0x5f2>
    d1bc:	rsb	r3, r3, #4278190080	; 0xff000000
    d1c0:	add.w	r3, r3, #16711680	; 0xff0000
    d1c4:	add.w	r3, r3, #64256	; 0xfb00
    d1c8:	adds	r3, #226	; 0xe2
    d1ca:	lsl.w	r3, r0, r3
    d1ce:	strd	r3, r0, [sp, #40]	; 0x28
    d1d2:	b.n	d054 <_strtod_l+0x6d4>
    d1d4:	movs	r2, #0
    d1d6:	movs	r3, #1
    d1d8:	strd	r2, r3, [sp, #40]	; 0x28
    d1dc:	b.n	d054 <_strtod_l+0x6d4>
    d1de:	ldr	r1, [sp, #72]	; 0x48
    d1e0:	mov	r2, r3
    d1e2:	mov	r0, r4
    d1e4:	bl	10138 <__lshift>
    d1e8:	str	r0, [sp, #72]	; 0x48
    d1ea:	cmp	r0, #0
    d1ec:	bne.w	d0b8 <_strtod_l+0x738>
    d1f0:	b.n	cdfc <_strtod_l+0x47c>
    d1f2:	nop
    d1f4:	nop.w
    d1f8:	.word	0x94a03595
    d1fc:	.word	0x3fcfffff
    d200:	.word	0x94a03595
    d204:	.word	0x3fdfffff
    d208:	.word	0x35afe535
    d20c:	.word	0x3fe00000
    d210:	.word	0x00000000
    d214:	.word	0x39500000
    d218:	.word	0x200003f0
    d21c:	.word	0xfffffc02
    d220:	.word	0x7ff00000
    d224:	mov	fp, r9
    d226:	bne.n	d2e8 <_strtod_l+0x968>
    d228:	ubfx	r3, r9, #0, #20
    d22c:	cmp.w	sl, #0
    d230:	beq.n	d288 <_strtod_l+0x908>
    d232:	ldr	r2, [pc, #668]	; (d4d0 <_strtod_l+0xb50>)
    d234:	cmp	r3, r2
    d236:	bne.n	d290 <_strtod_l+0x910>
    d238:	ldr	r3, [sp, #20]
    d23a:	mov	r2, r8
    d23c:	cbz	r3, d27e <_strtod_l+0x8fe>
    d23e:	ldr	r3, [pc, #660]	; (d4d4 <_strtod_l+0xb54>)
    d240:	and.w	r3, r9, r3
    d244:	cmp.w	r3, #111149056	; 0x6a00000
    d248:	mov.w	r1, #4294967295
    d24c:	bhi.n	d284 <_strtod_l+0x904>
    d24e:	lsrs	r3, r3, #20
    d250:	rsb	r3, r3, #107	; 0x6b
    d254:	lsl.w	r3, r1, r3
    d258:	cmp	r2, r3
    d25a:	bne.n	d290 <_strtod_l+0x910>
    d25c:	ldr	r3, [pc, #632]	; (d4d8 <_strtod_l+0xb58>)
    d25e:	cmp	fp, r3
    d260:	bne.n	d268 <_strtod_l+0x8e8>
    d262:	adds	r2, #1
    d264:	beq.w	cdfc <_strtod_l+0x47c>
    d268:	ldr	r3, [pc, #616]	; (d4d4 <_strtod_l+0xb54>)
    d26a:	and.w	r3, fp, r3
    d26e:	add.w	r9, r3, #1048576	; 0x100000
    d272:	mov.w	r8, #0
    d276:	ldr	r3, [sp, #20]
    d278:	cmp	r3, #0
    d27a:	bne.n	d18a <_strtod_l+0x80a>
    d27c:	b.n	ce10 <_strtod_l+0x490>
    d27e:	mov.w	r3, #4294967295
    d282:	b.n	d258 <_strtod_l+0x8d8>
    d284:	mov	r3, r1
    d286:	b.n	d258 <_strtod_l+0x8d8>
    d288:	orrs.w	r3, r3, r8
    d28c:	beq.w	d16a <_strtod_l+0x7ea>
    d290:	ldr	r3, [sp, #40]	; 0x28
    d292:	cbz	r3, d2c8 <_strtod_l+0x948>
    d294:	tst.w	r3, fp
    d298:	beq.n	d276 <_strtod_l+0x8f6>
    d29a:	ldr	r2, [sp, #20]
    d29c:	mov	r0, r8
    d29e:	mov	r1, r9
    d2a0:	cmp.w	sl, #0
    d2a4:	beq.n	d2d0 <_strtod_l+0x950>
    d2a6:	bl	c94a <sulp>
    d2aa:	vadd.f64	d7, d8, d0
    d2ae:	vmov	r8, r9, d7
    d2b2:	b.n	d276 <_strtod_l+0x8f6>
    d2b4:	ands	r3, r2
    d2b6:	sub.w	r3, r3, #1048576	; 0x100000
    d2ba:	mvn.w	r9, r3, lsr #20
    d2be:	mvn.w	r9, r9, lsl #20
    d2c2:	mov.w	r8, #4294967295
    d2c6:	b.n	d276 <_strtod_l+0x8f6>
    d2c8:	ldr	r3, [sp, #44]	; 0x2c
    d2ca:	tst.w	r3, r8
    d2ce:	b.n	d298 <_strtod_l+0x918>
    d2d0:	bl	c94a <sulp>
    d2d4:	vsub.f64	d0, d8, d0
    d2d8:	vcmp.f64	d0, #0.0
    d2dc:	vmrs	APSR_nzcv, fpscr
    d2e0:	vmov	r8, r9, d0
    d2e4:	bne.n	d276 <_strtod_l+0x8f6>
    d2e6:	b.n	ceda <_strtod_l+0x55a>
    d2e8:	mov	r1, r6
    d2ea:	mov	r0, r5
    d2ec:	bl	104f0 <__ratio>
    d2f0:	vmov.f64	d7, #0	; 0x40000000  2.0
    d2f4:	vcmpe.f64	d0, d7
    d2f8:	vmrs	APSR_nzcv, fpscr
    d2fc:	bhi.n	d3be <_strtod_l+0xa3e>
    d2fe:	cmp.w	sl, #0
    d302:	bne.n	d3d2 <_strtod_l+0xa52>
    d304:	cmp.w	r8, #0
    d308:	bne.n	d3a6 <_strtod_l+0xa26>
    d30a:	ubfx	r3, r9, #0, #20
    d30e:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d312:	cmp	r3, #0
    d314:	bne.n	d3dc <_strtod_l+0xa5c>
    d316:	vcmpe.f64	d0, d13
    d31a:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d31e:	vmrs	APSR_nzcv, fpscr
    d322:	bmi.n	d328 <_strtod_l+0x9a8>
    d324:	vmul.f64	d13, d0, d13
    d328:	vneg.f64	d12, d13
    d32c:	ldr	r0, [pc, #420]	; (d4d4 <_strtod_l+0xb54>)
    d32e:	ldr.w	ip, [pc, #432]	; d4e0 <_strtod_l+0xb60>
    d332:	and.w	r1, fp, r0
    d336:	cmp	r1, ip
    d338:	vmov	r2, r3, d12
    d33c:	bne.n	d434 <_strtod_l+0xab4>
    d33e:	sub.w	r9, fp, #55574528	; 0x3500000
    d342:	vmov	d0, r8, r9
    d346:	str	r1, [sp, #40]	; 0x28
    d348:	bl	1035c <__ulp>
    d34c:	vmov	d14, r8, r9
    d350:	ldr	r0, [pc, #384]	; (d4d4 <_strtod_l+0xb54>)
    d352:	vfma.f64	d14, d0, d12
    d356:	vmov	r3, s29
    d35a:	ldr	r2, [pc, #384]	; (d4dc <_strtod_l+0xb5c>)
    d35c:	ldr	r1, [sp, #40]	; 0x28
    d35e:	ands	r0, r3
    d360:	cmp	r0, r2
    d362:	vmov	r8, r9, d14
    d366:	bls.n	d3e2 <_strtod_l+0xa62>
    d368:	vmov	r2, s17
    d36c:	ldr	r3, [pc, #360]	; (d4d8 <_strtod_l+0xb58>)
    d36e:	cmp	r2, r3
    d370:	bne.n	d37c <_strtod_l+0x9fc>
    d372:	vmov	r3, s16
    d376:	adds	r3, #1
    d378:	beq.w	cdfc <_strtod_l+0x47c>
    d37c:	ldr.w	r9, [pc, #344]	; d4d8 <_strtod_l+0xb58>
    d380:	mov.w	r8, #4294967295
    d384:	ldr	r1, [sp, #72]	; 0x48
    d386:	mov	r0, r4
    d388:	bl	fd04 <_Bfree>
    d38c:	mov	r1, r7
    d38e:	mov	r0, r4
    d390:	bl	fd04 <_Bfree>
    d394:	mov	r1, r6
    d396:	mov	r0, r4
    d398:	bl	fd04 <_Bfree>
    d39c:	mov	r1, r5
    d39e:	mov	r0, r4
    d3a0:	bl	fd04 <_Bfree>
    d3a4:	b.n	cfba <_strtod_l+0x63a>
    d3a6:	cmp.w	r8, #1
    d3aa:	bne.n	d3b4 <_strtod_l+0xa34>
    d3ac:	cmp.w	r9, #0
    d3b0:	beq.w	ceda <_strtod_l+0x55a>
    d3b4:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d3b8:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d3bc:	b.n	d32c <_strtod_l+0x9ac>
    d3be:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d3c2:	vmul.f64	d13, d0, d13
    d3c6:	cmp.w	sl, #0
    d3ca:	beq.n	d328 <_strtod_l+0x9a8>
    d3cc:	vmov.f64	d12, d13
    d3d0:	b.n	d32c <_strtod_l+0x9ac>
    d3d2:	vmov.f64	d12, #112	; 0x3f800000  1.0
    d3d6:	vmov.f64	d13, d12
    d3da:	b.n	d32c <_strtod_l+0x9ac>
    d3dc:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d3e0:	b.n	d32c <_strtod_l+0x9ac>
    d3e2:	add.w	r9, r3, #55574528	; 0x3500000
    d3e6:	ldr	r3, [sp, #20]
    d3e8:	mov	fp, r9
    d3ea:	cmp	r3, #0
    d3ec:	bne.n	d384 <_strtod_l+0xa04>
    d3ee:	bic.w	r3, r9, #2147483648	; 0x80000000
    d3f2:	lsrs	r3, r3, #20
    d3f4:	lsls	r3, r3, #20
    d3f6:	cmp	r1, r3
    d3f8:	bne.n	d384 <_strtod_l+0xa04>
    d3fa:	vmov	r0, r1, d13
    d3fe:	bl	11b74 <__aeabi_d2lz>
    d402:	bl	11b18 <__aeabi_l2d>
    d406:	ubfx	fp, r9, #0, #20
    d40a:	vmov	d7, r0, r1
    d40e:	orr.w	fp, fp, r8
    d412:	orrs.w	fp, fp, sl
    d416:	vsub.f64	d13, d13, d7
    d41a:	beq.n	d496 <_strtod_l+0xb16>
    d41c:	vcmpe.f64	d13, d10
    d420:	vmrs	APSR_nzcv, fpscr
    d424:	bmi.w	ce10 <_strtod_l+0x490>
    d428:	vcmpe.f64	d13, d11
    d42c:	vmrs	APSR_nzcv, fpscr
    d430:	ble.n	d384 <_strtod_l+0xa04>
    d432:	b.n	ce10 <_strtod_l+0x490>
    d434:	ldr	r0, [sp, #20]
    d436:	cbz	r0, d476 <_strtod_l+0xaf6>
    d438:	cmp.w	r1, #111149056	; 0x6a00000
    d43c:	bhi.n	d476 <_strtod_l+0xaf6>
    d43e:	vldr	d7, [pc, #136]	; d4c8 <_strtod_l+0xb48>
    d442:	vcmpe.f64	d13, d7
    d446:	vmrs	APSR_nzcv, fpscr
    d44a:	bhi.n	d470 <_strtod_l+0xaf0>
    d44c:	vcvt.u32.f64	s26, d13
    d450:	vmov	r3, s26
    d454:	cmp	r3, #1
    d456:	it	cc
    d458:	movcc	r3, #1
    d45a:	vmov	s26, r3
    d45e:	vcvt.f64.u32	d13, s26
    d462:	cmp.w	sl, #0
    d466:	bne.n	d490 <_strtod_l+0xb10>
    d468:	vneg.f64	d7, d13
    d46c:	vmov	r2, r3, d7
    d470:	add.w	r0, r3, #112197632	; 0x6b00000
    d474:	subs	r3, r0, r1
    d476:	vmov.f64	d0, d8
    d47a:	vmov	d12, r2, r3
    d47e:	str	r1, [sp, #40]	; 0x28
    d480:	bl	1035c <__ulp>
    d484:	ldr	r1, [sp, #40]	; 0x28
    d486:	vfma.f64	d8, d12, d0
    d48a:	vmov	r8, r9, d8
    d48e:	b.n	d3e6 <_strtod_l+0xa66>
    d490:	vmov.f64	d7, d13
    d494:	b.n	d46c <_strtod_l+0xaec>
    d496:	vcmpe.f64	d13, d9
    d49a:	vmrs	APSR_nzcv, fpscr
    d49e:	bpl.w	d384 <_strtod_l+0xa04>
    d4a2:	b.n	ce10 <_strtod_l+0x490>
    d4a4:	movs	r3, #0
    d4a6:	str	r3, [sp, #32]
    d4a8:	ldr	r2, [sp, #52]	; 0x34
    d4aa:	ldr	r3, [sp, #68]	; 0x44
    d4ac:	str	r3, [r2, #0]
    d4ae:	b.w	c9fe <_strtod_l+0x7e>
    d4b2:	cmp	r2, #101	; 0x65
    d4b4:	beq.w	cbfc <_strtod_l+0x27c>
    d4b8:	cmp	r2, #69	; 0x45
    d4ba:	beq.w	cbfc <_strtod_l+0x27c>
    d4be:	movs	r1, #1
    d4c0:	b.w	cc74 <_strtod_l+0x2f4>
    d4c4:	nop.w
    d4c8:	.word	0xffc00000
    d4cc:	.word	0x41dfffff
    d4d0:	.word	0x000fffff
    d4d4:	.word	0x7ff00000
    d4d8:	.word	0x7fefffff
    d4dc:	.word	0x7c9fffff
    d4e0:	.word	0x7fe00000

0000d4e4 <_strtod_r>:
    d4e4:	ldr	r3, [pc, #4]	; (d4ec <_strtod_r+0x8>)
    d4e6:	b.w	c980 <_strtod_l>
    d4ea:	nop
    d4ec:	.word	0x200020c8

0000d4f0 <_strtol_l.constprop.0>:
    d4f0:	cmp	r3, #1
    d4f2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d4f6:	beq.n	d4fc <_strtol_l.constprop.0+0xc>
    d4f8:	cmp	r3, #36	; 0x24
    d4fa:	bls.n	d50a <_strtol_l.constprop.0+0x1a>
    d4fc:	bl	e7f4 <__errno>
    d500:	movs	r3, #22
    d502:	str	r3, [r0, #0]
    d504:	movs	r0, #0
    d506:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d50a:	ldr.w	ip, [pc, #228]	; d5f0 <_strtol_l.constprop.0+0x100>
    d50e:	mov	r5, r1
    d510:	mov	r6, r5
    d512:	ldrb.w	r4, [r5], #1
    d516:	ldrb.w	r7, [ip, r4]
    d51a:	ands.w	r7, r7, #8
    d51e:	bne.n	d510 <_strtol_l.constprop.0+0x20>
    d520:	cmp	r4, #45	; 0x2d
    d522:	bne.n	d58a <_strtol_l.constprop.0+0x9a>
    d524:	ldrb	r4, [r5, #0]
    d526:	movs	r7, #1
    d528:	adds	r5, r6, #2
    d52a:	cmp	r3, #0
    d52c:	beq.n	d5e6 <_strtol_l.constprop.0+0xf6>
    d52e:	cmp	r3, #16
    d530:	bne.n	d546 <_strtol_l.constprop.0+0x56>
    d532:	cmp	r4, #48	; 0x30
    d534:	bne.n	d546 <_strtol_l.constprop.0+0x56>
    d536:	ldrb	r4, [r5, #0]
    d538:	and.w	r4, r4, #223	; 0xdf
    d53c:	cmp	r4, #88	; 0x58
    d53e:	bne.n	d5dc <_strtol_l.constprop.0+0xec>
    d540:	ldrb	r4, [r5, #1]
    d542:	movs	r3, #16
    d544:	adds	r5, #2
    d546:	add.w	r8, r7, #2147483648	; 0x80000000
    d54a:	add.w	r8, r8, #4294967295
    d54e:	mov.w	lr, #0
    d552:	udiv	r9, r8, r3
    d556:	mov	r6, lr
    d558:	mls	sl, r3, r9, r8
    d55c:	sub.w	ip, r4, #48	; 0x30
    d560:	cmp.w	ip, #9
    d564:	bhi.n	d594 <_strtol_l.constprop.0+0xa4>
    d566:	mov	r4, ip
    d568:	cmp	r3, r4
    d56a:	ble.n	d5b6 <_strtol_l.constprop.0+0xc6>
    d56c:	cmp.w	lr, #4294967295
    d570:	beq.n	d584 <_strtol_l.constprop.0+0x94>
    d572:	cmp	r9, r6
    d574:	bcc.n	d5b0 <_strtol_l.constprop.0+0xc0>
    d576:	bne.n	d57c <_strtol_l.constprop.0+0x8c>
    d578:	cmp	sl, r4
    d57a:	blt.n	d5b0 <_strtol_l.constprop.0+0xc0>
    d57c:	mla	r6, r6, r3, r4
    d580:	mov.w	lr, #1
    d584:	ldrb.w	r4, [r5], #1
    d588:	b.n	d55c <_strtol_l.constprop.0+0x6c>
    d58a:	cmp	r4, #43	; 0x2b
    d58c:	itt	eq
    d58e:	ldrbeq	r4, [r5, #0]
    d590:	addeq	r5, r6, #2
    d592:	b.n	d52a <_strtol_l.constprop.0+0x3a>
    d594:	sub.w	ip, r4, #65	; 0x41
    d598:	cmp.w	ip, #25
    d59c:	bhi.n	d5a2 <_strtol_l.constprop.0+0xb2>
    d59e:	subs	r4, #55	; 0x37
    d5a0:	b.n	d568 <_strtol_l.constprop.0+0x78>
    d5a2:	sub.w	ip, r4, #97	; 0x61
    d5a6:	cmp.w	ip, #25
    d5aa:	bhi.n	d5b6 <_strtol_l.constprop.0+0xc6>
    d5ac:	subs	r4, #87	; 0x57
    d5ae:	b.n	d568 <_strtol_l.constprop.0+0x78>
    d5b0:	mov.w	lr, #4294967295
    d5b4:	b.n	d584 <_strtol_l.constprop.0+0x94>
    d5b6:	cmp.w	lr, #4294967295
    d5ba:	bne.n	d5c8 <_strtol_l.constprop.0+0xd8>
    d5bc:	movs	r3, #34	; 0x22
    d5be:	str	r3, [r0, #0]
    d5c0:	mov	r6, r8
    d5c2:	cbnz	r2, d5d6 <_strtol_l.constprop.0+0xe6>
    d5c4:	mov	r0, r6
    d5c6:	b.n	d506 <_strtol_l.constprop.0+0x16>
    d5c8:	cbz	r7, d5cc <_strtol_l.constprop.0+0xdc>
    d5ca:	negs	r6, r6
    d5cc:	cmp	r2, #0
    d5ce:	beq.n	d5c4 <_strtol_l.constprop.0+0xd4>
    d5d0:	cmp.w	lr, #0
    d5d4:	beq.n	d5d8 <_strtol_l.constprop.0+0xe8>
    d5d6:	subs	r1, r5, #1
    d5d8:	str	r1, [r2, #0]
    d5da:	b.n	d5c4 <_strtol_l.constprop.0+0xd4>
    d5dc:	movs	r4, #48	; 0x30
    d5de:	cmp	r3, #0
    d5e0:	bne.n	d546 <_strtol_l.constprop.0+0x56>
    d5e2:	movs	r3, #8
    d5e4:	b.n	d546 <_strtol_l.constprop.0+0x56>
    d5e6:	cmp	r4, #48	; 0x30
    d5e8:	beq.n	d536 <_strtol_l.constprop.0+0x46>
    d5ea:	movs	r3, #10
    d5ec:	b.n	d546 <_strtol_l.constprop.0+0x56>
    d5ee:	nop
    d5f0:	.word	0x20001206

0000d5f4 <_strtol_r>:
    d5f4:	b.w	d4f0 <_strtol_l.constprop.0>

0000d5f8 <__cxa_atexit>:
    d5f8:	push	{r4, lr}
    d5fa:	ldr	r4, [pc, #20]	; (d610 <__cxa_atexit+0x18>)
    d5fc:	mov	r3, r2
    d5fe:	cbz	r4, d60c <__cxa_atexit+0x14>
    d600:	mov	r2, r1
    d602:	mov	r1, r0
    d604:	movs	r0, #2
    d606:	nop.w
    d60a:	pop	{r4, pc}
    d60c:	mov	r0, r4
    d60e:	b.n	d60a <__cxa_atexit+0x12>
    d610:	.word	0x00000000

0000d614 <fcvt>:
    d614:	movs	r3, #0
    d616:	b.w	10604 <fcvtbuf>

0000d61a <fcvtf>:
    d61a:	vcvt.f64.f32	d0, s0
    d61e:	b.w	d614 <fcvt>

0000d622 <__cvt>:
    d622:	push	{r4, r5, r6, r7, lr}
    d624:	vpush	{d8}
    d628:	vmov.f64	d8, d0
    d62c:	sub	sp, #20
    d62e:	mov	r7, r2
    d630:	ldr	r5, [sp, #52]	; 0x34
    d632:	ldr	r6, [sp, #48]	; 0x30
    d634:	vmov	r2, s17
    d638:	bic.w	r5, r5, #32
    d63c:	cmp	r2, #0
    d63e:	itet	lt
    d640:	movlt	r2, #45	; 0x2d
    d642:	movge	r2, #0
    d644:	vneglt.f64	d8, d0
    d648:	cmp	r5, #70	; 0x46
    d64a:	mov	r4, r1
    d64c:	strb	r2, [r3, #0]
    d64e:	beq.n	d65a <__cvt+0x38>
    d650:	cmp	r5, #69	; 0x45
    d652:	bne.n	d656 <__cvt+0x34>
    d654:	adds	r4, #1
    d656:	movs	r1, #2
    d658:	b.n	d65c <__cvt+0x3a>
    d65a:	movs	r1, #3
    d65c:	add	r3, sp, #12
    d65e:	str	r3, [sp, #4]
    d660:	add	r3, sp, #8
    d662:	str	r3, [sp, #0]
    d664:	mov	r2, r4
    d666:	mov	r3, r6
    d668:	vmov.f64	d0, d8
    d66c:	bl	ea40 <_dtoa_r>
    d670:	cmp	r5, #71	; 0x47
    d672:	bne.n	d678 <__cvt+0x56>
    d674:	lsls	r3, r7, #31
    d676:	bpl.n	d6ae <__cvt+0x8c>
    d678:	cmp	r5, #70	; 0x46
    d67a:	add.w	r2, r0, r4
    d67e:	bne.n	d69a <__cvt+0x78>
    d680:	ldrb	r3, [r0, #0]
    d682:	cmp	r3, #48	; 0x30
    d684:	bne.n	d696 <__cvt+0x74>
    d686:	vcmp.f64	d8, #0.0
    d68a:	vmrs	APSR_nzcv, fpscr
    d68e:	itt	ne
    d690:	rsbne	r4, r4, #1
    d694:	strne	r4, [r6, #0]
    d696:	ldr	r3, [r6, #0]
    d698:	add	r2, r3
    d69a:	vcmp.f64	d8, #0.0
    d69e:	vmrs	APSR_nzcv, fpscr
    d6a2:	it	eq
    d6a4:	streq	r2, [sp, #12]
    d6a6:	movs	r1, #48	; 0x30
    d6a8:	ldr	r3, [sp, #12]
    d6aa:	cmp	r3, r2
    d6ac:	bcc.n	d6be <__cvt+0x9c>
    d6ae:	ldr	r3, [sp, #12]
    d6b0:	ldr	r2, [sp, #56]	; 0x38
    d6b2:	subs	r3, r3, r0
    d6b4:	str	r3, [r2, #0]
    d6b6:	add	sp, #20
    d6b8:	vpop	{d8}
    d6bc:	pop	{r4, r5, r6, r7, pc}
    d6be:	adds	r4, r3, #1
    d6c0:	str	r4, [sp, #12]
    d6c2:	strb	r1, [r3, #0]
    d6c4:	b.n	d6a8 <__cvt+0x86>

0000d6c6 <__exponent>:
    d6c6:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d6c8:	mov	r3, r0
    d6ca:	cmp	r1, #0
    d6cc:	it	lt
    d6ce:	neglt	r1, r1
    d6d0:	strb.w	r2, [r3], #2
    d6d4:	ite	lt
    d6d6:	movlt	r2, #45	; 0x2d
    d6d8:	movge	r2, #43	; 0x2b
    d6da:	cmp	r1, #9
    d6dc:	strb	r2, [r0, #1]
    d6de:	ble.n	d736 <__exponent+0x70>
    d6e0:	add.w	r2, sp, #7
    d6e4:	mov	r7, r2
    d6e6:	movs	r6, #10
    d6e8:	mov	ip, r2
    d6ea:	sdiv	r5, r1, r6
    d6ee:	mls	r4, r6, r5, r1
    d6f2:	adds	r4, #48	; 0x30
    d6f4:	strb.w	r4, [ip, #-1]
    d6f8:	mov	r4, r1
    d6fa:	cmp	r4, #99	; 0x63
    d6fc:	add.w	r2, r2, #4294967295
    d700:	mov	r1, r5
    d702:	bgt.n	d6e8 <__exponent+0x22>
    d704:	adds	r1, #48	; 0x30
    d706:	sub.w	r4, ip, #2
    d70a:	strb.w	r1, [r2, #-1]
    d70e:	adds	r1, r0, #1
    d710:	mov	r2, r4
    d712:	cmp	r2, r7
    d714:	bcc.n	d72c <__exponent+0x66>
    d716:	add.w	r2, sp, #9
    d71a:	sub.w	r2, r2, ip
    d71e:	cmp	r4, r7
    d720:	it	hi
    d722:	movhi	r2, #0
    d724:	add	r3, r2
    d726:	subs	r0, r3, r0
    d728:	add	sp, #12
    d72a:	pop	{r4, r5, r6, r7, pc}
    d72c:	ldrb.w	r5, [r2], #1
    d730:	strb.w	r5, [r1, #1]!
    d734:	b.n	d712 <__exponent+0x4c>
    d736:	movs	r3, #48	; 0x30
    d738:	adds	r1, #48	; 0x30
    d73a:	strb	r3, [r0, #2]
    d73c:	strb	r1, [r0, #3]
    d73e:	adds	r3, r0, #4
    d740:	b.n	d726 <__exponent+0x60>
    d742:	movs	r0, r0
    d744:	movs	r0, r0
	...

0000d748 <_printf_float>:
    d748:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d74c:	sub	sp, #44	; 0x2c
    d74e:	mov	r4, r1
    d750:	ldr.w	r8, [sp, #80]	; 0x50
    d754:	mov	r6, r2
    d756:	mov	r7, r3
    d758:	mov	r5, r0
    d75a:	bl	e740 <_localeconv_r>
    d75e:	ldr.w	fp, [r0]
    d762:	mov	r0, fp
    d764:	bl	e900 <strlen>
    d768:	movs	r3, #0
    d76a:	str	r3, [sp, #32]
    d76c:	ldr.w	r3, [r8]
    d770:	ldrb.w	r9, [r4, #24]
    d774:	ldr	r2, [r4, #0]
    d776:	adds	r3, #7
    d778:	bic.w	r3, r3, #7
    d77c:	add.w	r1, r3, #8
    d780:	str.w	r1, [r8]
    d784:	vldr	d0, [r3]
    d788:	vldr	d6, [pc, #604]	; d9e8 <_printf_float+0x2a0>
    d78c:	vabs.f64	d7, d0
    d790:	vcmp.f64	d7, d6
    d794:	vmrs	APSR_nzcv, fpscr
    d798:	vstr	d0, [r4, #72]	; 0x48
    d79c:	mov	sl, r0
    d79e:	ble.n	d7ea <_printf_float+0xa2>
    d7a0:	vcmpe.f64	d0, #0.0
    d7a4:	vmrs	APSR_nzcv, fpscr
    d7a8:	bpl.n	d7b0 <_printf_float+0x68>
    d7aa:	movs	r3, #45	; 0x2d
    d7ac:	strb.w	r3, [r4, #67]	; 0x43
    d7b0:	ldr	r1, [pc, #572]	; (d9f0 <_printf_float+0x2a8>)
    d7b2:	ldr	r3, [pc, #576]	; (d9f4 <_printf_float+0x2ac>)
    d7b4:	cmp.w	r9, #71	; 0x47
    d7b8:	ite	ls
    d7ba:	movls	r8, r1
    d7bc:	movhi	r8, r3
    d7be:	movs	r3, #3
    d7c0:	str	r3, [r4, #16]
    d7c2:	bic.w	r2, r2, #4
    d7c6:	movs	r3, #0
    d7c8:	str	r2, [r4, #0]
    d7ca:	str	r3, [sp, #16]
    d7cc:	str	r7, [sp, #0]
    d7ce:	mov	r3, r6
    d7d0:	add	r2, sp, #36	; 0x24
    d7d2:	mov	r1, r4
    d7d4:	mov	r0, r5
    d7d6:	bl	db7c <_printf_common>
    d7da:	adds	r0, #1
    d7dc:	bne.w	d8f4 <_printf_float+0x1ac>
    d7e0:	mov.w	r0, #4294967295
    d7e4:	add	sp, #44	; 0x2c
    d7e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d7ea:	vcmp.f64	d0, d0
    d7ee:	vmrs	APSR_nzcv, fpscr
    d7f2:	bvc.n	d808 <_printf_float+0xc0>
    d7f4:	vmov	r3, s1
    d7f8:	cmp	r3, #0
    d7fa:	itt	lt
    d7fc:	movlt	r3, #45	; 0x2d
    d7fe:	strblt.w	r3, [r4, #67]	; 0x43
    d802:	ldr	r1, [pc, #500]	; (d9f8 <_printf_float+0x2b0>)
    d804:	ldr	r3, [pc, #500]	; (d9fc <_printf_float+0x2b4>)
    d806:	b.n	d7b4 <_printf_float+0x6c>
    d808:	ldr	r3, [r4, #4]
    d80a:	and.w	r1, r9, #223	; 0xdf
    d80e:	str	r1, [sp, #16]
    d810:	adds	r1, r3, #1
    d812:	bne.n	d88e <_printf_float+0x146>
    d814:	movs	r3, #6
    d816:	str	r3, [r4, #4]
    d818:	movs	r3, #0
    d81a:	str	r3, [sp, #12]
    d81c:	add	r3, sp, #32
    d81e:	strd	r9, r3, [sp, #4]
    d822:	orr.w	r2, r2, #1024	; 0x400
    d826:	add	r3, sp, #28
    d828:	ldr	r1, [r4, #4]
    d82a:	str	r3, [sp, #0]
    d82c:	str	r2, [r4, #0]
    d82e:	add.w	r3, sp, #27
    d832:	mov	r0, r5
    d834:	bl	d622 <__cvt>
    d838:	ldr	r3, [sp, #16]
    d83a:	ldr	r1, [sp, #28]
    d83c:	cmp	r3, #71	; 0x47
    d83e:	mov	r8, r0
    d840:	bne.n	d854 <_printf_float+0x10c>
    d842:	adds	r0, r1, #3
    d844:	blt.n	d84c <_printf_float+0x104>
    d846:	ldr	r3, [r4, #4]
    d848:	cmp	r1, r3
    d84a:	ble.n	d8d0 <_printf_float+0x188>
    d84c:	sub.w	r9, r9, #2
    d850:	uxtb.w	r9, r9
    d854:	cmp.w	r9, #101	; 0x65
    d858:	bhi.n	d89c <_printf_float+0x154>
    d85a:	subs	r1, #1
    d85c:	mov	r2, r9
    d85e:	add.w	r0, r4, #80	; 0x50
    d862:	str	r1, [sp, #28]
    d864:	bl	d6c6 <__exponent>
    d868:	ldr	r2, [sp, #32]
    d86a:	str	r0, [sp, #16]
    d86c:	adds	r3, r2, r0
    d86e:	cmp	r2, #1
    d870:	str	r3, [r4, #16]
    d872:	bgt.n	d87a <_printf_float+0x132>
    d874:	ldr	r2, [r4, #0]
    d876:	lsls	r2, r2, #31
    d878:	bpl.n	d87e <_printf_float+0x136>
    d87a:	adds	r3, #1
    d87c:	str	r3, [r4, #16]
    d87e:	ldrb.w	r3, [sp, #27]
    d882:	cmp	r3, #0
    d884:	beq.n	d7cc <_printf_float+0x84>
    d886:	movs	r3, #45	; 0x2d
    d888:	strb.w	r3, [r4, #67]	; 0x43
    d88c:	b.n	d7cc <_printf_float+0x84>
    d88e:	ldr	r1, [sp, #16]
    d890:	cmp	r1, #71	; 0x47
    d892:	bne.n	d818 <_printf_float+0xd0>
    d894:	cmp	r3, #0
    d896:	bne.n	d818 <_printf_float+0xd0>
    d898:	movs	r3, #1
    d89a:	b.n	d816 <_printf_float+0xce>
    d89c:	cmp.w	r9, #102	; 0x66
    d8a0:	bne.n	d8d4 <_printf_float+0x18c>
    d8a2:	cmp	r1, #0
    d8a4:	ldr	r3, [r4, #4]
    d8a6:	ble.n	d8c0 <_printf_float+0x178>
    d8a8:	str	r1, [r4, #16]
    d8aa:	cbnz	r3, d8b2 <_printf_float+0x16a>
    d8ac:	ldr	r2, [r4, #0]
    d8ae:	lsls	r0, r2, #31
    d8b0:	bpl.n	d8b8 <_printf_float+0x170>
    d8b2:	adds	r3, #1
    d8b4:	add	r3, r1
    d8b6:	str	r3, [r4, #16]
    d8b8:	movs	r3, #0
    d8ba:	str	r1, [r4, #88]	; 0x58
    d8bc:	str	r3, [sp, #16]
    d8be:	b.n	d87e <_printf_float+0x136>
    d8c0:	cbnz	r3, d8c8 <_printf_float+0x180>
    d8c2:	ldr	r2, [r4, #0]
    d8c4:	lsls	r2, r2, #31
    d8c6:	bpl.n	d8cc <_printf_float+0x184>
    d8c8:	adds	r3, #2
    d8ca:	b.n	d8b6 <_printf_float+0x16e>
    d8cc:	movs	r3, #1
    d8ce:	b.n	d8b6 <_printf_float+0x16e>
    d8d0:	mov.w	r9, #103	; 0x67
    d8d4:	ldr	r3, [sp, #32]
    d8d6:	cmp	r1, r3
    d8d8:	blt.n	d8e6 <_printf_float+0x19e>
    d8da:	ldr	r3, [r4, #0]
    d8dc:	str	r1, [r4, #16]
    d8de:	lsls	r0, r3, #31
    d8e0:	bpl.n	d8b8 <_printf_float+0x170>
    d8e2:	adds	r3, r1, #1
    d8e4:	b.n	d8b6 <_printf_float+0x16e>
    d8e6:	cmp	r1, #0
    d8e8:	ite	le
    d8ea:	rsble	r2, r1, #2
    d8ee:	movgt	r2, #1
    d8f0:	add	r3, r2
    d8f2:	b.n	d8b6 <_printf_float+0x16e>
    d8f4:	ldr	r3, [r4, #0]
    d8f6:	lsls	r2, r3, #21
    d8f8:	bmi.n	d90a <_printf_float+0x1c2>
    d8fa:	ldr	r3, [r4, #16]
    d8fc:	mov	r2, r8
    d8fe:	mov	r1, r6
    d900:	mov	r0, r5
    d902:	blx	r7
    d904:	adds	r0, #1
    d906:	bne.n	d95e <_printf_float+0x216>
    d908:	b.n	d7e0 <_printf_float+0x98>
    d90a:	cmp.w	r9, #101	; 0x65
    d90e:	bls.w	dad2 <_printf_float+0x38a>
    d912:	vldr	d7, [r4, #72]	; 0x48
    d916:	vcmp.f64	d7, #0.0
    d91a:	vmrs	APSR_nzcv, fpscr
    d91e:	bne.n	d988 <_printf_float+0x240>
    d920:	ldr	r2, [pc, #220]	; (da00 <_printf_float+0x2b8>)
    d922:	movs	r3, #1
    d924:	mov	r1, r6
    d926:	mov	r0, r5
    d928:	blx	r7
    d92a:	adds	r0, #1
    d92c:	beq.w	d7e0 <_printf_float+0x98>
    d930:	ldrd	r2, r3, [sp, #28]
    d934:	cmp	r2, r3
    d936:	blt.n	d93e <_printf_float+0x1f6>
    d938:	ldr	r3, [r4, #0]
    d93a:	lsls	r0, r3, #31
    d93c:	bpl.n	d95e <_printf_float+0x216>
    d93e:	mov	r3, sl
    d940:	mov	r2, fp
    d942:	mov	r1, r6
    d944:	mov	r0, r5
    d946:	blx	r7
    d948:	adds	r0, #1
    d94a:	beq.w	d7e0 <_printf_float+0x98>
    d94e:	mov.w	r8, #0
    d952:	add.w	r9, r4, #26
    d956:	ldr	r3, [sp, #32]
    d958:	subs	r3, #1
    d95a:	cmp	r3, r8
    d95c:	bgt.n	d972 <_printf_float+0x22a>
    d95e:	ldr	r3, [r4, #0]
    d960:	lsls	r3, r3, #30
    d962:	bmi.w	db72 <_printf_float+0x42a>
    d966:	ldr	r0, [r4, #12]
    d968:	ldr	r3, [sp, #36]	; 0x24
    d96a:	cmp	r0, r3
    d96c:	it	lt
    d96e:	movlt	r0, r3
    d970:	b.n	d7e4 <_printf_float+0x9c>
    d972:	movs	r3, #1
    d974:	mov	r2, r9
    d976:	mov	r1, r6
    d978:	mov	r0, r5
    d97a:	blx	r7
    d97c:	adds	r0, #1
    d97e:	beq.w	d7e0 <_printf_float+0x98>
    d982:	add.w	r8, r8, #1
    d986:	b.n	d956 <_printf_float+0x20e>
    d988:	ldr	r3, [sp, #28]
    d98a:	cmp	r3, #0
    d98c:	bgt.n	da04 <_printf_float+0x2bc>
    d98e:	ldr	r2, [pc, #112]	; (da00 <_printf_float+0x2b8>)
    d990:	movs	r3, #1
    d992:	mov	r1, r6
    d994:	mov	r0, r5
    d996:	blx	r7
    d998:	adds	r0, #1
    d99a:	beq.w	d7e0 <_printf_float+0x98>
    d99e:	ldrd	r3, r2, [sp, #28]
    d9a2:	orrs	r3, r2
    d9a4:	bne.n	d9ac <_printf_float+0x264>
    d9a6:	ldr	r3, [r4, #0]
    d9a8:	lsls	r1, r3, #31
    d9aa:	bpl.n	d95e <_printf_float+0x216>
    d9ac:	mov	r3, sl
    d9ae:	mov	r2, fp
    d9b0:	mov	r1, r6
    d9b2:	mov	r0, r5
    d9b4:	blx	r7
    d9b6:	adds	r0, #1
    d9b8:	beq.w	d7e0 <_printf_float+0x98>
    d9bc:	mov.w	r9, #0
    d9c0:	add.w	sl, r4, #26
    d9c4:	ldr	r3, [sp, #28]
    d9c6:	negs	r3, r3
    d9c8:	cmp	r3, r9
    d9ca:	bgt.n	d9d0 <_printf_float+0x288>
    d9cc:	ldr	r3, [sp, #32]
    d9ce:	b.n	d8fc <_printf_float+0x1b4>
    d9d0:	movs	r3, #1
    d9d2:	mov	r2, sl
    d9d4:	mov	r1, r6
    d9d6:	mov	r0, r5
    d9d8:	blx	r7
    d9da:	adds	r0, #1
    d9dc:	beq.w	d7e0 <_printf_float+0x98>
    d9e0:	add.w	r9, r9, #1
    d9e4:	b.n	d9c4 <_printf_float+0x27c>
    d9e6:	nop
    d9e8:	.word	0xffffffff
    d9ec:	.word	0x7fefffff
    d9f0:	.word	0x20001394
    d9f4:	.word	0x20001160
    d9f8:	.word	0x20001398
    d9fc:	.word	0x2000115c
    da00:	.word	0x20001141
    da04:	ldr	r2, [sp, #32]
    da06:	ldr	r3, [r4, #88]	; 0x58
    da08:	cmp	r2, r3
    da0a:	it	ge
    da0c:	movge	r2, r3
    da0e:	cmp	r2, #0
    da10:	mov	r9, r2
    da12:	bgt.n	da86 <_printf_float+0x33e>
    da14:	movs	r3, #0
    da16:	str	r3, [sp, #20]
    da18:	bic.w	r9, r9, r9, asr #31
    da1c:	add.w	r2, r4, #26
    da20:	ldr	r3, [r4, #88]	; 0x58
    da22:	ldr	r1, [sp, #20]
    da24:	str	r3, [sp, #16]
    da26:	sub.w	r3, r3, r9
    da2a:	cmp	r3, r1
    da2c:	bgt.n	da96 <_printf_float+0x34e>
    da2e:	ldrd	r2, r3, [sp, #28]
    da32:	cmp	r2, r3
    da34:	blt.n	dab0 <_printf_float+0x368>
    da36:	ldr	r3, [r4, #0]
    da38:	lsls	r2, r3, #31
    da3a:	bmi.n	dab0 <_printf_float+0x368>
    da3c:	ldrd	r3, r2, [sp, #28]
    da40:	sub.w	r9, r2, r3
    da44:	ldr	r3, [sp, #16]
    da46:	subs	r2, r2, r3
    da48:	cmp	r9, r2
    da4a:	it	ge
    da4c:	movge	r9, r2
    da4e:	cmp.w	r9, #0
    da52:	bgt.n	dac0 <_printf_float+0x378>
    da54:	mov.w	r8, #0
    da58:	bic.w	r9, r9, r9, asr #31
    da5c:	add.w	sl, r4, #26
    da60:	ldrd	r2, r3, [sp, #28]
    da64:	subs	r3, r3, r2
    da66:	sub.w	r3, r3, r9
    da6a:	cmp	r3, r8
    da6c:	ble.w	d95e <_printf_float+0x216>
    da70:	movs	r3, #1
    da72:	mov	r2, sl
    da74:	mov	r1, r6
    da76:	mov	r0, r5
    da78:	blx	r7
    da7a:	adds	r0, #1
    da7c:	beq.w	d7e0 <_printf_float+0x98>
    da80:	add.w	r8, r8, #1
    da84:	b.n	da60 <_printf_float+0x318>
    da86:	mov	r3, r2
    da88:	mov	r1, r6
    da8a:	mov	r2, r8
    da8c:	mov	r0, r5
    da8e:	blx	r7
    da90:	adds	r0, #1
    da92:	bne.n	da14 <_printf_float+0x2cc>
    da94:	b.n	d7e0 <_printf_float+0x98>
    da96:	movs	r3, #1
    da98:	mov	r1, r6
    da9a:	mov	r0, r5
    da9c:	str	r2, [sp, #16]
    da9e:	blx	r7
    daa0:	adds	r0, #1
    daa2:	beq.w	d7e0 <_printf_float+0x98>
    daa6:	ldr	r3, [sp, #20]
    daa8:	ldr	r2, [sp, #16]
    daaa:	adds	r3, #1
    daac:	str	r3, [sp, #20]
    daae:	b.n	da20 <_printf_float+0x2d8>
    dab0:	mov	r3, sl
    dab2:	mov	r2, fp
    dab4:	mov	r1, r6
    dab6:	mov	r0, r5
    dab8:	blx	r7
    daba:	adds	r0, #1
    dabc:	bne.n	da3c <_printf_float+0x2f4>
    dabe:	b.n	d7e0 <_printf_float+0x98>
    dac0:	ldr	r2, [sp, #16]
    dac2:	mov	r3, r9
    dac4:	add	r2, r8
    dac6:	mov	r1, r6
    dac8:	mov	r0, r5
    daca:	blx	r7
    dacc:	adds	r0, #1
    dace:	bne.n	da54 <_printf_float+0x30c>
    dad0:	b.n	d7e0 <_printf_float+0x98>
    dad2:	ldr	r2, [sp, #32]
    dad4:	cmp	r2, #1
    dad6:	bgt.n	dadc <_printf_float+0x394>
    dad8:	lsls	r3, r3, #31
    dada:	bpl.n	db4c <_printf_float+0x404>
    dadc:	movs	r3, #1
    dade:	mov	r2, r8
    dae0:	mov	r1, r6
    dae2:	mov	r0, r5
    dae4:	blx	r7
    dae6:	adds	r0, #1
    dae8:	beq.w	d7e0 <_printf_float+0x98>
    daec:	mov	r3, sl
    daee:	mov	r2, fp
    daf0:	mov	r1, r6
    daf2:	mov	r0, r5
    daf4:	blx	r7
    daf6:	adds	r0, #1
    daf8:	beq.w	d7e0 <_printf_float+0x98>
    dafc:	vldr	d7, [r4, #72]	; 0x48
    db00:	vcmp.f64	d7, #0.0
    db04:	vmrs	APSR_nzcv, fpscr
    db08:	ldr	r3, [sp, #32]
    db0a:	beq.n	db42 <_printf_float+0x3fa>
    db0c:	subs	r3, #1
    db0e:	add.w	r2, r8, #1
    db12:	mov	r1, r6
    db14:	mov	r0, r5
    db16:	blx	r7
    db18:	adds	r0, #1
    db1a:	bne.n	db3a <_printf_float+0x3f2>
    db1c:	b.n	d7e0 <_printf_float+0x98>
    db1e:	movs	r3, #1
    db20:	mov	r2, r9
    db22:	mov	r1, r6
    db24:	mov	r0, r5
    db26:	blx	r7
    db28:	adds	r0, #1
    db2a:	beq.w	d7e0 <_printf_float+0x98>
    db2e:	add.w	r8, r8, #1
    db32:	ldr	r3, [sp, #32]
    db34:	subs	r3, #1
    db36:	cmp	r3, r8
    db38:	bgt.n	db1e <_printf_float+0x3d6>
    db3a:	ldr	r3, [sp, #16]
    db3c:	add.w	r2, r4, #80	; 0x50
    db40:	b.n	d8fe <_printf_float+0x1b6>
    db42:	mov.w	r8, #0
    db46:	add.w	r9, r4, #26
    db4a:	b.n	db32 <_printf_float+0x3ea>
    db4c:	movs	r3, #1
    db4e:	mov	r2, r8
    db50:	b.n	db12 <_printf_float+0x3ca>
    db52:	movs	r3, #1
    db54:	mov	r2, r9
    db56:	mov	r1, r6
    db58:	mov	r0, r5
    db5a:	blx	r7
    db5c:	adds	r0, #1
    db5e:	beq.w	d7e0 <_printf_float+0x98>
    db62:	add.w	r8, r8, #1
    db66:	ldr	r3, [r4, #12]
    db68:	ldr	r1, [sp, #36]	; 0x24
    db6a:	subs	r3, r3, r1
    db6c:	cmp	r3, r8
    db6e:	bgt.n	db52 <_printf_float+0x40a>
    db70:	b.n	d966 <_printf_float+0x21e>
    db72:	mov.w	r8, #0
    db76:	add.w	r9, r4, #25
    db7a:	b.n	db66 <_printf_float+0x41e>

0000db7c <_printf_common>:
    db7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db80:	mov	r6, r2
    db82:	mov	r9, r3
    db84:	ldr	r2, [r1, #8]
    db86:	ldr	r3, [r1, #16]
    db88:	ldr.w	r8, [sp, #32]
    db8c:	cmp	r3, r2
    db8e:	it	lt
    db90:	movlt	r3, r2
    db92:	str	r3, [r6, #0]
    db94:	ldrb.w	r2, [r1, #67]	; 0x43
    db98:	mov	r7, r0
    db9a:	mov	r4, r1
    db9c:	cbz	r2, dba2 <_printf_common+0x26>
    db9e:	adds	r3, #1
    dba0:	str	r3, [r6, #0]
    dba2:	ldr	r3, [r4, #0]
    dba4:	lsls	r1, r3, #26
    dba6:	ittt	mi
    dba8:	ldrmi	r3, [r6, #0]
    dbaa:	addmi	r3, #2
    dbac:	strmi	r3, [r6, #0]
    dbae:	ldr	r5, [r4, #0]
    dbb0:	ands.w	r5, r5, #6
    dbb4:	bne.n	dbc4 <_printf_common+0x48>
    dbb6:	add.w	sl, r4, #25
    dbba:	ldr	r3, [r4, #12]
    dbbc:	ldr	r2, [r6, #0]
    dbbe:	subs	r3, r3, r2
    dbc0:	cmp	r3, r5
    dbc2:	bgt.n	dc12 <_printf_common+0x96>
    dbc4:	ldrb.w	r2, [r4, #67]	; 0x43
    dbc8:	subs	r3, r2, #0
    dbca:	ldr	r2, [r4, #0]
    dbcc:	it	ne
    dbce:	movne	r3, #1
    dbd0:	lsls	r2, r2, #26
    dbd2:	bmi.n	dc2c <_printf_common+0xb0>
    dbd4:	add.w	r2, r4, #67	; 0x43
    dbd8:	mov	r1, r9
    dbda:	mov	r0, r7
    dbdc:	blx	r8
    dbde:	adds	r0, #1
    dbe0:	beq.n	dc20 <_printf_common+0xa4>
    dbe2:	ldr	r3, [r4, #0]
    dbe4:	ldr	r2, [r4, #16]
    dbe6:	and.w	r3, r3, #6
    dbea:	cmp	r3, #4
    dbec:	ittt	eq
    dbee:	ldreq	r5, [r4, #12]
    dbf0:	ldreq	r3, [r6, #0]
    dbf2:	subeq	r5, r5, r3
    dbf4:	ldr	r3, [r4, #8]
    dbf6:	ite	eq
    dbf8:	biceq.w	r5, r5, r5, asr #31
    dbfc:	movne	r5, #0
    dbfe:	cmp	r3, r2
    dc00:	itt	gt
    dc02:	subgt	r3, r3, r2
    dc04:	addgt	r5, r5, r3
    dc06:	movs	r6, #0
    dc08:	adds	r4, #26
    dc0a:	cmp	r5, r6
    dc0c:	bne.n	dc44 <_printf_common+0xc8>
    dc0e:	movs	r0, #0
    dc10:	b.n	dc24 <_printf_common+0xa8>
    dc12:	movs	r3, #1
    dc14:	mov	r2, sl
    dc16:	mov	r1, r9
    dc18:	mov	r0, r7
    dc1a:	blx	r8
    dc1c:	adds	r0, #1
    dc1e:	bne.n	dc28 <_printf_common+0xac>
    dc20:	mov.w	r0, #4294967295
    dc24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dc28:	adds	r5, #1
    dc2a:	b.n	dbba <_printf_common+0x3e>
    dc2c:	adds	r1, r4, r3
    dc2e:	adds	r2, r3, #1
    dc30:	movs	r0, #48	; 0x30
    dc32:	strb.w	r0, [r1, #67]	; 0x43
    dc36:	add	r2, r4
    dc38:	ldrb.w	r1, [r4, #69]	; 0x45
    dc3c:	strb.w	r1, [r2, #67]	; 0x43
    dc40:	adds	r3, #2
    dc42:	b.n	dbd4 <_printf_common+0x58>
    dc44:	movs	r3, #1
    dc46:	mov	r2, r4
    dc48:	mov	r1, r9
    dc4a:	mov	r0, r7
    dc4c:	blx	r8
    dc4e:	adds	r0, #1
    dc50:	beq.n	dc20 <_printf_common+0xa4>
    dc52:	adds	r6, #1
    dc54:	b.n	dc0a <_printf_common+0x8e>
	...

0000dc58 <_printf_i>:
    dc58:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    dc5c:	ldrb	r7, [r1, #24]
    dc5e:	ldr	r5, [sp, #48]	; 0x30
    dc60:	cmp	r7, #120	; 0x78
    dc62:	mov	r9, r2
    dc64:	mov	r8, r0
    dc66:	mov	r4, r1
    dc68:	mov	sl, r3
    dc6a:	add.w	r2, r1, #67	; 0x43
    dc6e:	bhi.n	dc80 <_printf_i+0x28>
    dc70:	cmp	r7, #98	; 0x62
    dc72:	bhi.n	dc8a <_printf_i+0x32>
    dc74:	cmp	r7, #0
    dc76:	beq.w	de22 <_printf_i+0x1ca>
    dc7a:	cmp	r7, #88	; 0x58
    dc7c:	beq.w	de00 <_printf_i+0x1a8>
    dc80:	add.w	r5, r4, #66	; 0x42
    dc84:	strb.w	r7, [r4, #66]	; 0x42
    dc88:	b.n	dd00 <_printf_i+0xa8>
    dc8a:	sub.w	r3, r7, #99	; 0x63
    dc8e:	cmp	r3, #21
    dc90:	bhi.n	dc80 <_printf_i+0x28>
    dc92:	add	r1, pc, #4	; (adr r1, dc98 <_printf_i+0x40>)
    dc94:	ldr.w	pc, [r1, r3, lsl #2]
    dc98:	.word	0x0000dcf1
    dc9c:	.word	0x0000dd05
    dca0:	.word	0x0000dc81
    dca4:	.word	0x0000dc81
    dca8:	.word	0x0000dc81
    dcac:	.word	0x0000dc81
    dcb0:	.word	0x0000dd05
    dcb4:	.word	0x0000dc81
    dcb8:	.word	0x0000dc81
    dcbc:	.word	0x0000dc81
    dcc0:	.word	0x0000dc81
    dcc4:	.word	0x0000de09
    dcc8:	.word	0x0000dd31
    dccc:	.word	0x0000ddc3
    dcd0:	.word	0x0000dc81
    dcd4:	.word	0x0000dc81
    dcd8:	.word	0x0000de2b
    dcdc:	.word	0x0000dc81
    dce0:	.word	0x0000dd31
    dce4:	.word	0x0000dc81
    dce8:	.word	0x0000dc81
    dcec:	.word	0x0000ddcb
    dcf0:	ldr	r3, [r5, #0]
    dcf2:	adds	r2, r3, #4
    dcf4:	ldr	r3, [r3, #0]
    dcf6:	str	r2, [r5, #0]
    dcf8:	add.w	r5, r4, #66	; 0x42
    dcfc:	strb.w	r3, [r4, #66]	; 0x42
    dd00:	movs	r3, #1
    dd02:	b.n	de44 <_printf_i+0x1ec>
    dd04:	ldr	r0, [r4, #0]
    dd06:	ldr	r3, [r5, #0]
    dd08:	lsls	r7, r0, #24
    dd0a:	add.w	r1, r3, #4
    dd0e:	str	r1, [r5, #0]
    dd10:	bpl.n	dd16 <_printf_i+0xbe>
    dd12:	ldr	r6, [r3, #0]
    dd14:	b.n	dd1e <_printf_i+0xc6>
    dd16:	lsls	r6, r0, #25
    dd18:	bpl.n	dd12 <_printf_i+0xba>
    dd1a:	ldrsh.w	r6, [r3]
    dd1e:	cmp	r6, #0
    dd20:	bge.n	dd2a <_printf_i+0xd2>
    dd22:	movs	r3, #45	; 0x2d
    dd24:	negs	r6, r6
    dd26:	strb.w	r3, [r4, #67]	; 0x43
    dd2a:	ldr	r0, [pc, #360]	; (de94 <_printf_i+0x23c>)
    dd2c:	movs	r3, #10
    dd2e:	b.n	dd56 <_printf_i+0xfe>
    dd30:	ldr	r3, [r5, #0]
    dd32:	ldr	r0, [r4, #0]
    dd34:	adds	r1, r3, #4
    dd36:	str	r1, [r5, #0]
    dd38:	lsls	r5, r0, #24
    dd3a:	bpl.n	dd40 <_printf_i+0xe8>
    dd3c:	ldr	r6, [r3, #0]
    dd3e:	b.n	dd46 <_printf_i+0xee>
    dd40:	lsls	r1, r0, #25
    dd42:	bpl.n	dd3c <_printf_i+0xe4>
    dd44:	ldrh	r6, [r3, #0]
    dd46:	ldr	r0, [pc, #332]	; (de94 <_printf_i+0x23c>)
    dd48:	cmp	r7, #111	; 0x6f
    dd4a:	ite	eq
    dd4c:	moveq	r3, #8
    dd4e:	movne	r3, #10
    dd50:	movs	r1, #0
    dd52:	strb.w	r1, [r4, #67]	; 0x43
    dd56:	ldr	r5, [r4, #4]
    dd58:	str	r5, [r4, #8]
    dd5a:	cmp	r5, #0
    dd5c:	ittt	ge
    dd5e:	ldrge	r1, [r4, #0]
    dd60:	bicge.w	r1, r1, #4
    dd64:	strge	r1, [r4, #0]
    dd66:	cbnz	r6, dd6c <_printf_i+0x114>
    dd68:	cmp	r5, #0
    dd6a:	beq.n	de04 <_printf_i+0x1ac>
    dd6c:	mov	r5, r2
    dd6e:	udiv	r1, r6, r3
    dd72:	mls	r7, r3, r1, r6
    dd76:	ldrb	r7, [r0, r7]
    dd78:	strb.w	r7, [r5, #-1]!
    dd7c:	mov	r7, r6
    dd7e:	cmp	r3, r7
    dd80:	mov	r6, r1
    dd82:	bls.n	dd6e <_printf_i+0x116>
    dd84:	cmp	r3, #8
    dd86:	bne.n	dda0 <_printf_i+0x148>
    dd88:	ldr	r3, [r4, #0]
    dd8a:	lsls	r6, r3, #31
    dd8c:	bpl.n	dda0 <_printf_i+0x148>
    dd8e:	ldr	r3, [r4, #16]
    dd90:	ldr	r1, [r4, #4]
    dd92:	cmp	r1, r3
    dd94:	ittt	le
    dd96:	movle	r3, #48	; 0x30
    dd98:	strble.w	r3, [r5, #-1]
    dd9c:	addle.w	r5, r5, #4294967295
    dda0:	subs	r2, r2, r5
    dda2:	str	r2, [r4, #16]
    dda4:	str.w	sl, [sp]
    dda8:	mov	r3, r9
    ddaa:	add	r2, sp, #12
    ddac:	mov	r1, r4
    ddae:	mov	r0, r8
    ddb0:	bl	db7c <_printf_common>
    ddb4:	adds	r0, #1
    ddb6:	bne.n	de4e <_printf_i+0x1f6>
    ddb8:	mov.w	r0, #4294967295
    ddbc:	add	sp, #16
    ddbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ddc2:	ldr	r3, [r4, #0]
    ddc4:	orr.w	r3, r3, #32
    ddc8:	str	r3, [r4, #0]
    ddca:	ldr	r0, [pc, #204]	; (de98 <_printf_i+0x240>)
    ddcc:	movs	r7, #120	; 0x78
    ddce:	strb.w	r7, [r4, #69]	; 0x45
    ddd2:	ldr	r3, [r4, #0]
    ddd4:	ldr	r1, [r5, #0]
    ddd6:	lsls	r7, r3, #24
    ddd8:	ldr.w	r6, [r1], #4
    dddc:	bmi.n	dde4 <_printf_i+0x18c>
    ddde:	lsls	r7, r3, #25
    dde0:	it	mi
    dde2:	uxthmi	r6, r6
    dde4:	lsls	r7, r3, #31
    dde6:	it	mi
    dde8:	orrmi.w	r3, r3, #32
    ddec:	str	r1, [r5, #0]
    ddee:	it	mi
    ddf0:	strmi	r3, [r4, #0]
    ddf2:	cbnz	r6, ddfc <_printf_i+0x1a4>
    ddf4:	ldr	r3, [r4, #0]
    ddf6:	bic.w	r3, r3, #32
    ddfa:	str	r3, [r4, #0]
    ddfc:	movs	r3, #16
    ddfe:	b.n	dd50 <_printf_i+0xf8>
    de00:	ldr	r0, [pc, #144]	; (de94 <_printf_i+0x23c>)
    de02:	b.n	ddce <_printf_i+0x176>
    de04:	mov	r5, r2
    de06:	b.n	dd84 <_printf_i+0x12c>
    de08:	ldr	r3, [r5, #0]
    de0a:	ldr	r6, [r4, #0]
    de0c:	ldr	r1, [r4, #20]
    de0e:	adds	r0, r3, #4
    de10:	str	r0, [r5, #0]
    de12:	lsls	r5, r6, #24
    de14:	ldr	r3, [r3, #0]
    de16:	bpl.n	de1c <_printf_i+0x1c4>
    de18:	str	r1, [r3, #0]
    de1a:	b.n	de22 <_printf_i+0x1ca>
    de1c:	lsls	r0, r6, #25
    de1e:	bpl.n	de18 <_printf_i+0x1c0>
    de20:	strh	r1, [r3, #0]
    de22:	movs	r3, #0
    de24:	str	r3, [r4, #16]
    de26:	mov	r5, r2
    de28:	b.n	dda4 <_printf_i+0x14c>
    de2a:	ldr	r3, [r5, #0]
    de2c:	adds	r2, r3, #4
    de2e:	str	r2, [r5, #0]
    de30:	ldr	r5, [r3, #0]
    de32:	ldr	r2, [r4, #4]
    de34:	movs	r1, #0
    de36:	mov	r0, r5
    de38:	bl	e860 <memchr>
    de3c:	cbz	r0, de42 <_printf_i+0x1ea>
    de3e:	subs	r0, r0, r5
    de40:	str	r0, [r4, #4]
    de42:	ldr	r3, [r4, #4]
    de44:	str	r3, [r4, #16]
    de46:	movs	r3, #0
    de48:	strb.w	r3, [r4, #67]	; 0x43
    de4c:	b.n	dda4 <_printf_i+0x14c>
    de4e:	ldr	r3, [r4, #16]
    de50:	mov	r2, r5
    de52:	mov	r1, r9
    de54:	mov	r0, r8
    de56:	blx	sl
    de58:	adds	r0, #1
    de5a:	beq.n	ddb8 <_printf_i+0x160>
    de5c:	ldr	r3, [r4, #0]
    de5e:	lsls	r3, r3, #30
    de60:	bmi.n	de8a <_printf_i+0x232>
    de62:	ldr	r0, [r4, #12]
    de64:	ldr	r3, [sp, #12]
    de66:	cmp	r0, r3
    de68:	it	lt
    de6a:	movlt	r0, r3
    de6c:	b.n	ddbc <_printf_i+0x164>
    de6e:	movs	r3, #1
    de70:	mov	r2, r6
    de72:	mov	r1, r9
    de74:	mov	r0, r8
    de76:	blx	sl
    de78:	adds	r0, #1
    de7a:	beq.n	ddb8 <_printf_i+0x160>
    de7c:	adds	r5, #1
    de7e:	ldr	r3, [r4, #12]
    de80:	ldr	r1, [sp, #12]
    de82:	subs	r3, r3, r1
    de84:	cmp	r3, r5
    de86:	bgt.n	de6e <_printf_i+0x216>
    de88:	b.n	de62 <_printf_i+0x20a>
    de8a:	movs	r5, #0
    de8c:	add.w	r6, r4, #25
    de90:	b.n	de7e <_printf_i+0x226>
    de92:	nop
    de94:	.word	0x2000139c
    de98:	.word	0x200013ad

0000de9c <_scanf_float>:
    de9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dea0:	sub	sp, #28
    dea2:	mov	r7, r2
    dea4:	str	r3, [sp, #12]
    dea6:	ldr	r3, [r1, #8]
    dea8:	subs	r2, r3, #1
    deaa:	cmp.w	r2, #348	; 0x15c
    deae:	ittte	hi
    deb0:	mvnhi.w	r5, #348	; 0x15c
    deb4:	addhi	r3, r3, r5
    deb6:	strhi	r3, [sp, #8]
    deb8:	movls	r3, #0
    deba:	itte	hi
    debc:	movwhi	r3, #349	; 0x15d
    dec0:	strhi	r3, [r1, #8]
    dec2:	strls	r3, [sp, #8]
    dec4:	ldr	r3, [r1, #0]
    dec6:	mov	fp, r1
    dec8:	movs	r5, #0
    deca:	orr.w	r3, r3, #1920	; 0x780
    dece:	str.w	r3, [fp], #28
    ded2:	strd	r5, r5, [sp, #16]
    ded6:	mov	r8, r0
    ded8:	mov	r4, r1
    deda:	mov	r6, fp
    dedc:	mov	sl, r5
    dede:	mov	r9, r5
    dee0:	str	r5, [sp, #4]
    dee2:	ldr	r2, [r4, #8]
    dee4:	cbz	r2, defc <_scanf_float+0x60>
    dee6:	ldr	r3, [r7, #0]
    dee8:	ldrb	r3, [r3, #0]
    deea:	cmp	r3, #78	; 0x4e
    deec:	bhi.n	dfb8 <_scanf_float+0x11c>
    deee:	cmp	r3, #64	; 0x40
    def0:	bhi.n	df6c <_scanf_float+0xd0>
    def2:	sub.w	r1, r3, #43	; 0x2b
    def6:	uxtb	r0, r1
    def8:	cmp	r0, #14
    defa:	bls.n	df72 <_scanf_float+0xd6>
    defc:	cmp.w	r9, #0
    df00:	beq.n	df0a <_scanf_float+0x6e>
    df02:	ldr	r3, [r4, #0]
    df04:	bic.w	r3, r3, #256	; 0x100
    df08:	str	r3, [r4, #0]
    df0a:	add.w	sl, sl, #4294967295
    df0e:	cmp.w	sl, #1
    df12:	bhi.w	e13c <_scanf_float+0x2a0>
    df16:	cmp	r6, fp
    df18:	bhi.w	e126 <_scanf_float+0x28a>
    df1c:	movs	r5, #1
    df1e:	mov	r0, r5
    df20:	add	sp, #28
    df22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df26:	sub.w	r2, r3, #97	; 0x61
    df2a:	cmp	r2, #13
    df2c:	bhi.n	defc <_scanf_float+0x60>
    df2e:	add	r1, pc, #4	; (adr r1, df34 <_scanf_float+0x98>)
    df30:	ldr.w	pc, [r1, r2, lsl #2]
    df34:	.word	0x0000e073
    df38:	.word	0x0000defd
    df3c:	.word	0x0000defd
    df40:	.word	0x0000defd
    df44:	.word	0x0000e0d3
    df48:	.word	0x0000e0ab
    df4c:	.word	0x0000defd
    df50:	.word	0x0000defd
    df54:	.word	0x0000e081
    df58:	.word	0x0000defd
    df5c:	.word	0x0000defd
    df60:	.word	0x0000defd
    df64:	.word	0x0000defd
    df68:	.word	0x0000e039
    df6c:	sub.w	r2, r3, #65	; 0x41
    df70:	b.n	df2a <_scanf_float+0x8e>
    df72:	cmp	r1, #14
    df74:	bhi.n	defc <_scanf_float+0x60>
    df76:	add	r0, pc, #4	; (adr r0, df7c <_scanf_float+0xe0>)
    df78:	ldr.w	pc, [r0, r1, lsl #2]
    df7c:	.word	0x0000e02b
    df80:	.word	0x0000defd
    df84:	.word	0x0000e02b
    df88:	.word	0x0000e0bf
    df8c:	.word	0x0000defd
    df90:	.word	0x0000dfd9
    df94:	.word	0x0000e015
    df98:	.word	0x0000e015
    df9c:	.word	0x0000e015
    dfa0:	.word	0x0000e015
    dfa4:	.word	0x0000e015
    dfa8:	.word	0x0000e015
    dfac:	.word	0x0000e015
    dfb0:	.word	0x0000e015
    dfb4:	.word	0x0000e015
    dfb8:	cmp	r3, #110	; 0x6e
    dfba:	bhi.n	dfd0 <_scanf_float+0x134>
    dfbc:	cmp	r3, #96	; 0x60
    dfbe:	bhi.n	df26 <_scanf_float+0x8a>
    dfc0:	cmp	r3, #84	; 0x54
    dfc2:	beq.n	e0b4 <_scanf_float+0x218>
    dfc4:	cmp	r3, #89	; 0x59
    dfc6:	bne.n	defc <_scanf_float+0x60>
    dfc8:	cmp	r5, #7
    dfca:	bne.n	defc <_scanf_float+0x60>
    dfcc:	movs	r5, #8
    dfce:	b.n	e024 <_scanf_float+0x188>
    dfd0:	cmp	r3, #116	; 0x74
    dfd2:	beq.n	e0b4 <_scanf_float+0x218>
    dfd4:	cmp	r3, #121	; 0x79
    dfd6:	b.n	dfc6 <_scanf_float+0x12a>
    dfd8:	ldr	r1, [r4, #0]
    dfda:	lsls	r0, r1, #23
    dfdc:	bpl.n	e014 <_scanf_float+0x178>
    dfde:	ldr	r3, [sp, #8]
    dfe0:	bic.w	r1, r1, #128	; 0x80
    dfe4:	str	r1, [r4, #0]
    dfe6:	add.w	r9, r9, #1
    dfea:	cbz	r3, dff4 <_scanf_float+0x158>
    dfec:	subs	r3, #1
    dfee:	adds	r2, #1
    dff0:	str	r3, [sp, #8]
    dff2:	str	r2, [r4, #8]
    dff4:	ldr	r3, [r4, #8]
    dff6:	subs	r3, #1
    dff8:	str	r3, [r4, #8]
    dffa:	ldr	r3, [r4, #16]
    dffc:	adds	r3, #1
    dffe:	str	r3, [r4, #16]
    e000:	ldr	r3, [r7, #4]
    e002:	subs	r3, #1
    e004:	cmp	r3, #0
    e006:	str	r3, [r7, #4]
    e008:	ble.w	e114 <_scanf_float+0x278>
    e00c:	ldr	r3, [r7, #0]
    e00e:	adds	r3, #1
    e010:	str	r3, [r7, #0]
    e012:	b.n	dee2 <_scanf_float+0x46>
    e014:	cmn.w	sl, r5
    e018:	bne.w	defc <_scanf_float+0x60>
    e01c:	ldr	r2, [r4, #0]
    e01e:	bic.w	r2, r2, #384	; 0x180
    e022:	str	r2, [r4, #0]
    e024:	strb.w	r3, [r6], #1
    e028:	b.n	dff4 <_scanf_float+0x158>
    e02a:	ldr	r2, [r4, #0]
    e02c:	lsls	r0, r2, #24
    e02e:	bpl.w	defc <_scanf_float+0x60>
    e032:	bic.w	r2, r2, #128	; 0x80
    e036:	b.n	e022 <_scanf_float+0x186>
    e038:	cmp.w	sl, #0
    e03c:	bne.n	e05c <_scanf_float+0x1c0>
    e03e:	cmp.w	r9, #0
    e042:	bne.n	e062 <_scanf_float+0x1c6>
    e044:	ldr	r2, [r4, #0]
    e046:	and.w	r1, r2, #1792	; 0x700
    e04a:	cmp.w	r1, #1792	; 0x700
    e04e:	bne.n	e062 <_scanf_float+0x1c6>
    e050:	bic.w	r2, r2, #1920	; 0x780
    e054:	str	r2, [r4, #0]
    e056:	mov.w	sl, #1
    e05a:	b.n	e024 <_scanf_float+0x188>
    e05c:	cmp.w	sl, #2
    e060:	beq.n	e10e <_scanf_float+0x272>
    e062:	cmp	r5, #1
    e064:	beq.n	e06c <_scanf_float+0x1d0>
    e066:	cmp	r5, #4
    e068:	bne.w	defc <_scanf_float+0x60>
    e06c:	adds	r5, #1
    e06e:	uxtb	r5, r5
    e070:	b.n	e024 <_scanf_float+0x188>
    e072:	cmp.w	sl, #1
    e076:	bne.w	defc <_scanf_float+0x60>
    e07a:	mov.w	sl, #2
    e07e:	b.n	e024 <_scanf_float+0x188>
    e080:	cbnz	r5, e0a2 <_scanf_float+0x206>
    e082:	cmp.w	r9, #0
    e086:	bne.w	df02 <_scanf_float+0x66>
    e08a:	ldr	r2, [r4, #0]
    e08c:	and.w	r1, r2, #1792	; 0x700
    e090:	cmp.w	r1, #1792	; 0x700
    e094:	bne.w	df0a <_scanf_float+0x6e>
    e098:	bic.w	r2, r2, #1920	; 0x780
    e09c:	str	r2, [r4, #0]
    e09e:	movs	r5, #1
    e0a0:	b.n	e024 <_scanf_float+0x188>
    e0a2:	cmp	r5, #3
    e0a4:	beq.n	e06c <_scanf_float+0x1d0>
    e0a6:	cmp	r5, #5
    e0a8:	b.n	e068 <_scanf_float+0x1cc>
    e0aa:	cmp	r5, #2
    e0ac:	bne.w	defc <_scanf_float+0x60>
    e0b0:	movs	r5, #3
    e0b2:	b.n	e024 <_scanf_float+0x188>
    e0b4:	cmp	r5, #6
    e0b6:	bne.w	defc <_scanf_float+0x60>
    e0ba:	movs	r5, #7
    e0bc:	b.n	e024 <_scanf_float+0x188>
    e0be:	ldr	r2, [r4, #0]
    e0c0:	lsls	r1, r2, #22
    e0c2:	bpl.w	defc <_scanf_float+0x60>
    e0c6:	bic.w	r2, r2, #640	; 0x280
    e0ca:	str	r2, [r4, #0]
    e0cc:	str.w	r9, [sp, #4]
    e0d0:	b.n	e024 <_scanf_float+0x188>
    e0d2:	ldr	r2, [r4, #0]
    e0d4:	and.w	r1, r2, #1280	; 0x500
    e0d8:	cmp.w	r1, #1024	; 0x400
    e0dc:	beq.n	e0ec <_scanf_float+0x250>
    e0de:	lsls	r0, r2, #21
    e0e0:	bpl.w	defc <_scanf_float+0x60>
    e0e4:	cmp.w	r9, #0
    e0e8:	beq.w	df0a <_scanf_float+0x6e>
    e0ec:	lsls	r1, r2, #22
    e0ee:	it	pl
    e0f0:	ldrpl	r1, [sp, #4]
    e0f2:	bic.w	r2, r2, #1920	; 0x780
    e0f6:	it	pl
    e0f8:	subpl.w	r1, r9, r1
    e0fc:	orr.w	r2, r2, #384	; 0x180
    e100:	it	pl
    e102:	strdpl	r1, r6, [sp, #16]
    e106:	str	r2, [r4, #0]
    e108:	mov.w	r9, #0
    e10c:	b.n	e024 <_scanf_float+0x188>
    e10e:	mov.w	sl, #3
    e112:	b.n	e024 <_scanf_float+0x188>
    e114:	ldr.w	r3, [r4, #384]	; 0x180
    e118:	mov	r1, r7
    e11a:	mov	r0, r8
    e11c:	blx	r3
    e11e:	cmp	r0, #0
    e120:	beq.w	dee2 <_scanf_float+0x46>
    e124:	b.n	defc <_scanf_float+0x60>
    e126:	ldr.w	r3, [r4, #380]	; 0x17c
    e12a:	ldrb.w	r1, [r6, #-1]!
    e12e:	mov	r2, r7
    e130:	mov	r0, r8
    e132:	blx	r3
    e134:	ldr	r3, [r4, #16]
    e136:	subs	r3, #1
    e138:	str	r3, [r4, #16]
    e13a:	b.n	df16 <_scanf_float+0x7a>
    e13c:	subs	r3, r5, #1
    e13e:	cmp	r3, #6
    e140:	bhi.n	e18e <_scanf_float+0x2f2>
    e142:	cmp	r5, #2
    e144:	bhi.n	e1b4 <_scanf_float+0x318>
    e146:	cmp	r6, fp
    e148:	bls.w	df1c <_scanf_float+0x80>
    e14c:	ldr.w	r3, [r4, #380]	; 0x17c
    e150:	ldrb.w	r1, [r6, #-1]!
    e154:	mov	r2, r7
    e156:	mov	r0, r8
    e158:	blx	r3
    e15a:	ldr	r3, [r4, #16]
    e15c:	subs	r3, #1
    e15e:	str	r3, [r4, #16]
    e160:	b.n	e146 <_scanf_float+0x2aa>
    e162:	ldr	r0, [sp, #8]
    e164:	ldr.w	r3, [r4, #380]	; 0x17c
    e168:	ldrb.w	r1, [r0, #-1]!
    e16c:	str	r0, [sp, #8]
    e16e:	mov	r2, r7
    e170:	mov	r0, r8
    e172:	blx	r3
    e174:	ldr	r3, [r4, #16]
    e176:	subs	r3, #1
    e178:	str	r3, [r4, #16]
    e17a:	add.w	sl, sl, #4294967295
    e17e:	uxtb.w	sl, sl
    e182:	cmp.w	sl, #2
    e186:	bne.n	e162 <_scanf_float+0x2c6>
    e188:	subs	r5, #3
    e18a:	uxtb	r5, r5
    e18c:	subs	r6, r6, r5
    e18e:	ldr	r3, [r4, #0]
    e190:	lsls	r2, r3, #23
    e192:	bpl.n	e1f4 <_scanf_float+0x358>
    e194:	lsls	r3, r3, #21
    e196:	bpl.n	e1ba <_scanf_float+0x31e>
    e198:	cmp	r6, fp
    e19a:	bls.w	df1c <_scanf_float+0x80>
    e19e:	ldr.w	r3, [r4, #380]	; 0x17c
    e1a2:	ldrb.w	r1, [r6, #-1]!
    e1a6:	mov	r2, r7
    e1a8:	mov	r0, r8
    e1aa:	blx	r3
    e1ac:	ldr	r3, [r4, #16]
    e1ae:	subs	r3, #1
    e1b0:	str	r3, [r4, #16]
    e1b2:	b.n	e198 <_scanf_float+0x2fc>
    e1b4:	mov	sl, r5
    e1b6:	str	r6, [sp, #8]
    e1b8:	b.n	e17a <_scanf_float+0x2de>
    e1ba:	ldrb.w	r1, [r6, #-1]
    e1be:	ldr	r3, [r4, #16]
    e1c0:	cmp	r1, #101	; 0x65
    e1c2:	add.w	r3, r3, #4294967295
    e1c6:	add.w	r5, r6, #4294967295
    e1ca:	str	r3, [r4, #16]
    e1cc:	beq.n	e1e8 <_scanf_float+0x34c>
    e1ce:	cmp	r1, #69	; 0x45
    e1d0:	beq.n	e1e8 <_scanf_float+0x34c>
    e1d2:	ldr.w	r3, [r4, #380]	; 0x17c
    e1d6:	mov	r2, r7
    e1d8:	mov	r0, r8
    e1da:	blx	r3
    e1dc:	ldr	r3, [r4, #16]
    e1de:	ldrb.w	r1, [r6, #-2]
    e1e2:	subs	r3, #1
    e1e4:	subs	r5, r6, #2
    e1e6:	str	r3, [r4, #16]
    e1e8:	ldr.w	r3, [r4, #380]	; 0x17c
    e1ec:	mov	r2, r7
    e1ee:	mov	r0, r8
    e1f0:	blx	r3
    e1f2:	mov	r6, r5
    e1f4:	ldr	r5, [r4, #0]
    e1f6:	ands.w	r5, r5, #16
    e1fa:	bne.n	e298 <_scanf_float+0x3fc>
    e1fc:	strb	r5, [r6, #0]
    e1fe:	ldr	r3, [r4, #0]
    e200:	and.w	r3, r3, #1536	; 0x600
    e204:	cmp.w	r3, #1024	; 0x400
    e208:	bne.n	e240 <_scanf_float+0x3a4>
    e20a:	ldr	r3, [sp, #4]
    e20c:	cmp	r3, r9
    e20e:	sub.w	r2, r3, r9
    e212:	bne.n	e25a <_scanf_float+0x3be>
    e214:	movs	r2, #0
    e216:	mov	r1, fp
    e218:	mov	r0, r8
    e21a:	bl	d4e4 <_strtod_r>
    e21e:	ldr	r3, [sp, #12]
    e220:	ldr	r1, [r4, #0]
    e222:	ldr	r3, [r3, #0]
    e224:	tst.w	r1, #2
    e228:	add.w	r2, r3, #4
    e22c:	beq.n	e270 <_scanf_float+0x3d4>
    e22e:	ldr	r1, [sp, #12]
    e230:	str	r2, [r1, #0]
    e232:	ldr	r3, [r3, #0]
    e234:	vstr	d0, [r3]
    e238:	ldr	r3, [r4, #12]
    e23a:	adds	r3, #1
    e23c:	str	r3, [r4, #12]
    e23e:	b.n	df1e <_scanf_float+0x82>
    e240:	ldr	r3, [sp, #16]
    e242:	cmp	r3, #0
    e244:	beq.n	e214 <_scanf_float+0x378>
    e246:	ldr	r1, [sp, #20]
    e248:	movs	r3, #10
    e24a:	mov	r2, r5
    e24c:	adds	r1, #1
    e24e:	mov	r0, r8
    e250:	bl	d5f4 <_strtol_r>
    e254:	ldr	r3, [sp, #16]
    e256:	ldr	r6, [sp, #20]
    e258:	subs	r2, r0, r3
    e25a:	addw	r3, r4, #367	; 0x16f
    e25e:	cmp	r6, r3
    e260:	it	cs
    e262:	addcs.w	r6, r4, #366	; 0x16e
    e266:	ldr	r1, [pc, #52]	; (e29c <_scanf_float+0x400>)
    e268:	mov	r0, r6
    e26a:	bl	e46c <siprintf>
    e26e:	b.n	e214 <_scanf_float+0x378>
    e270:	tst.w	r1, #4
    e274:	ldr	r1, [sp, #12]
    e276:	str	r2, [r1, #0]
    e278:	bne.n	e232 <_scanf_float+0x396>
    e27a:	vcmp.f64	d0, d0
    e27e:	vmrs	APSR_nzcv, fpscr
    e282:	ldr	r6, [r3, #0]
    e284:	bvc.n	e292 <_scanf_float+0x3f6>
    e286:	ldr	r0, [pc, #24]	; (e2a0 <_scanf_float+0x404>)
    e288:	bl	e920 <nanf>
    e28c:	vstr	s0, [r6]
    e290:	b.n	e238 <_scanf_float+0x39c>
    e292:	vcvt.f32.f64	s0, d0
    e296:	b.n	e28c <_scanf_float+0x3f0>
    e298:	movs	r5, #0
    e29a:	b.n	df1e <_scanf_float+0x82>
    e29c:	.word	0x200013be
    e2a0:	.word	0x20000db9

0000e2a4 <std>:
    e2a4:	movs	r3, #0
    e2a6:	push	{r4, lr}
    e2a8:	mov	r4, r0
    e2aa:	strd	r3, r3, [r0]
    e2ae:	strd	r3, r3, [r0, #16]
    e2b2:	str	r3, [r0, #8]
    e2b4:	strh	r1, [r0, #12]
    e2b6:	str	r3, [r0, #100]	; 0x64
    e2b8:	strh	r2, [r0, #14]
    e2ba:	str	r3, [r0, #24]
    e2bc:	mov	r1, r3
    e2be:	movs	r2, #8
    e2c0:	adds	r0, #92	; 0x5c
    e2c2:	bl	9d8c <memset>
    e2c6:	ldr	r3, [pc, #20]	; (e2dc <std+0x38>)
    e2c8:	str	r3, [r4, #36]	; 0x24
    e2ca:	ldr	r3, [pc, #20]	; (e2e0 <std+0x3c>)
    e2cc:	str	r3, [r4, #40]	; 0x28
    e2ce:	ldr	r3, [pc, #20]	; (e2e4 <std+0x40>)
    e2d0:	str	r3, [r4, #44]	; 0x2c
    e2d2:	ldr	r3, [pc, #20]	; (e2e8 <std+0x44>)
    e2d4:	str	r4, [r4, #32]
    e2d6:	str	r3, [r4, #48]	; 0x30
    e2d8:	pop	{r4, pc}
    e2da:	nop
    e2dc:	.word	0x0000e505
    e2e0:	.word	0x0000e52b
    e2e4:	.word	0x0000e563
    e2e8:	.word	0x0000e587

0000e2ec <stdio_exit_handler>:
    e2ec:	ldr	r2, [pc, #8]	; (e2f8 <stdio_exit_handler+0xc>)
    e2ee:	ldr	r1, [pc, #12]	; (e2fc <stdio_exit_handler+0x10>)
    e2f0:	ldr	r0, [pc, #12]	; (e300 <stdio_exit_handler+0x14>)
    e2f2:	b.w	e3c8 <_fwalk_sglue>
    e2f6:	nop
    e2f8:	.word	0x20002234
    e2fc:	.word	0x00011095
    e300:	.word	0x20002240

0000e304 <cleanup_stdio>:
    e304:	ldr	r1, [r0, #4]
    e306:	ldr	r3, [pc, #48]	; (e338 <cleanup_stdio+0x34>)
    e308:	cmp	r1, r3
    e30a:	push	{r4, lr}
    e30c:	mov	r4, r0
    e30e:	beq.n	e314 <cleanup_stdio+0x10>
    e310:	bl	11094 <_fflush_r>
    e314:	ldr	r1, [r4, #8]
    e316:	ldr	r3, [pc, #36]	; (e33c <cleanup_stdio+0x38>)
    e318:	cmp	r1, r3
    e31a:	beq.n	e322 <cleanup_stdio+0x1e>
    e31c:	mov	r0, r4
    e31e:	bl	11094 <_fflush_r>
    e322:	ldr	r1, [r4, #12]
    e324:	ldr	r3, [pc, #24]	; (e340 <cleanup_stdio+0x3c>)
    e326:	cmp	r1, r3
    e328:	beq.n	e334 <cleanup_stdio+0x30>
    e32a:	mov	r0, r4
    e32c:	ldmia.w	sp!, {r4, lr}
    e330:	b.w	11094 <_fflush_r>
    e334:	pop	{r4, pc}
    e336:	nop
    e338:	.word	0x2002085c
    e33c:	.word	0x200208c4
    e340:	.word	0x2002092c

0000e344 <global_stdio_init.part.0>:
    e344:	push	{r4, lr}
    e346:	ldr	r3, [pc, #44]	; (e374 <global_stdio_init.part.0+0x30>)
    e348:	ldr	r4, [pc, #44]	; (e378 <global_stdio_init.part.0+0x34>)
    e34a:	ldr	r2, [pc, #48]	; (e37c <global_stdio_init.part.0+0x38>)
    e34c:	str	r2, [r3, #0]
    e34e:	mov	r0, r4
    e350:	movs	r2, #0
    e352:	movs	r1, #4
    e354:	bl	e2a4 <std>
    e358:	add.w	r0, r4, #104	; 0x68
    e35c:	movs	r2, #1
    e35e:	movs	r1, #9
    e360:	bl	e2a4 <std>
    e364:	add.w	r0, r4, #208	; 0xd0
    e368:	movs	r2, #2
    e36a:	ldmia.w	sp!, {r4, lr}
    e36e:	movs	r1, #18
    e370:	b.w	e2a4 <std>
    e374:	.word	0x20020994
    e378:	.word	0x2002085c
    e37c:	.word	0x0000e2ed

0000e380 <__sfp_lock_acquire>:
    e380:	ldr	r0, [pc, #4]	; (e388 <__sfp_lock_acquire+0x8>)
    e382:	b.w	e848 <__retarget_lock_acquire_recursive>
    e386:	nop
    e388:	.word	0x200215b7

0000e38c <__sfp_lock_release>:
    e38c:	ldr	r0, [pc, #4]	; (e394 <__sfp_lock_release+0x8>)
    e38e:	b.w	e84a <__retarget_lock_release_recursive>
    e392:	nop
    e394:	.word	0x200215b7

0000e398 <__sinit>:
    e398:	push	{r4, lr}
    e39a:	mov	r4, r0
    e39c:	bl	e380 <__sfp_lock_acquire>
    e3a0:	ldr	r3, [r4, #32]
    e3a2:	cbz	r3, e3ac <__sinit+0x14>
    e3a4:	ldmia.w	sp!, {r4, lr}
    e3a8:	b.w	e38c <__sfp_lock_release>
    e3ac:	ldr	r3, [pc, #16]	; (e3c0 <__sinit+0x28>)
    e3ae:	str	r3, [r4, #32]
    e3b0:	ldr	r3, [pc, #16]	; (e3c4 <__sinit+0x2c>)
    e3b2:	ldr	r3, [r3, #0]
    e3b4:	cmp	r3, #0
    e3b6:	bne.n	e3a4 <__sinit+0xc>
    e3b8:	bl	e344 <global_stdio_init.part.0>
    e3bc:	b.n	e3a4 <__sinit+0xc>
    e3be:	nop
    e3c0:	.word	0x0000e305
    e3c4:	.word	0x20020994

0000e3c8 <_fwalk_sglue>:
    e3c8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e3cc:	mov	r7, r0
    e3ce:	mov	r8, r1
    e3d0:	mov	r4, r2
    e3d2:	movs	r6, #0
    e3d4:	ldrd	r9, r5, [r4, #4]
    e3d8:	subs.w	r9, r9, #1
    e3dc:	bpl.n	e3ea <_fwalk_sglue+0x22>
    e3de:	ldr	r4, [r4, #0]
    e3e0:	cmp	r4, #0
    e3e2:	bne.n	e3d4 <_fwalk_sglue+0xc>
    e3e4:	mov	r0, r6
    e3e6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e3ea:	ldrh	r3, [r5, #12]
    e3ec:	cmp	r3, #1
    e3ee:	bls.n	e400 <_fwalk_sglue+0x38>
    e3f0:	ldrsh.w	r3, [r5, #14]
    e3f4:	adds	r3, #1
    e3f6:	beq.n	e400 <_fwalk_sglue+0x38>
    e3f8:	mov	r1, r5
    e3fa:	mov	r0, r7
    e3fc:	blx	r8
    e3fe:	orrs	r6, r0
    e400:	adds	r5, #104	; 0x68
    e402:	b.n	e3d8 <_fwalk_sglue+0x10>

0000e404 <sniprintf>:
    e404:	push	{r2, r3}
    e406:	push	{r4, r5, lr}
    e408:	ldr	r3, [pc, #92]	; (e468 <sniprintf+0x64>)
    e40a:	subs	r4, r1, #0
    e40c:	ldr	r5, [r3, #0]
    e40e:	sub	sp, #116	; 0x74
    e410:	bge.n	e424 <sniprintf+0x20>
    e412:	movs	r3, #139	; 0x8b
    e414:	str	r3, [r5, #0]
    e416:	mov.w	r0, #4294967295
    e41a:	add	sp, #116	; 0x74
    e41c:	ldmia.w	sp!, {r4, r5, lr}
    e420:	add	sp, #8
    e422:	bx	lr
    e424:	mov.w	r3, #520	; 0x208
    e428:	strh.w	r3, [sp, #20]
    e42c:	ite	ne
    e42e:	addne.w	r3, r4, #4294967295
    e432:	moveq	r3, r4
    e434:	str	r3, [sp, #16]
    e436:	str	r3, [sp, #28]
    e438:	movw	r3, #65535	; 0xffff
    e43c:	str	r0, [sp, #8]
    e43e:	str	r0, [sp, #24]
    e440:	strh.w	r3, [sp, #22]
    e444:	ldr	r2, [sp, #128]	; 0x80
    e446:	add	r3, sp, #132	; 0x84
    e448:	add	r1, sp, #8
    e44a:	mov	r0, r5
    e44c:	str	r3, [sp, #4]
    e44e:	bl	1074c <_svfiprintf_r>
    e452:	adds	r3, r0, #1
    e454:	itt	lt
    e456:	movlt	r3, #139	; 0x8b
    e458:	strlt	r3, [r5, #0]
    e45a:	cmp	r4, #0
    e45c:	beq.n	e41a <sniprintf+0x16>
    e45e:	ldr	r3, [sp, #8]
    e460:	movs	r2, #0
    e462:	strb	r2, [r3, #0]
    e464:	b.n	e41a <sniprintf+0x16>
    e466:	nop
    e468:	.word	0x2000228c

0000e46c <siprintf>:
    e46c:	push	{r1, r2, r3}
    e46e:	push	{lr}
    e470:	sub	sp, #112	; 0x70
    e472:	add	r3, sp, #116	; 0x74
    e474:	str	r0, [sp, #8]
    e476:	str	r0, [sp, #24]
    e478:	mvn.w	r1, #2147483648	; 0x80000000
    e47c:	ldr	r0, [pc, #36]	; (e4a4 <siprintf+0x38>)
    e47e:	str	r1, [sp, #28]
    e480:	str	r1, [sp, #16]
    e482:	ldr	r1, [pc, #36]	; (e4a8 <siprintf+0x3c>)
    e484:	ldr.w	r2, [r3], #4
    e488:	str	r1, [sp, #20]
    e48a:	ldr	r0, [r0, #0]
    e48c:	str	r3, [sp, #4]
    e48e:	add	r1, sp, #8
    e490:	bl	1074c <_svfiprintf_r>
    e494:	ldr	r3, [sp, #8]
    e496:	movs	r2, #0
    e498:	strb	r2, [r3, #0]
    e49a:	add	sp, #112	; 0x70
    e49c:	ldr.w	lr, [sp], #4
    e4a0:	add	sp, #12
    e4a2:	bx	lr
    e4a4:	.word	0x2000228c
    e4a8:	.word	0xffff0208

0000e4ac <siscanf>:
    e4ac:	push	{r1, r2, r3}
    e4ae:	push	{r4, lr}
    e4b0:	sub	sp, #124	; 0x7c
    e4b2:	add	r4, sp, #132	; 0x84
    e4b4:	mov.w	r1, #516	; 0x204
    e4b8:	ldr.w	r2, [r4], #4
    e4bc:	str	r2, [sp, #4]
    e4be:	strh.w	r1, [sp, #28]
    e4c2:	str	r0, [sp, #16]
    e4c4:	str	r0, [sp, #32]
    e4c6:	bl	e900 <strlen>
    e4ca:	ldr	r3, [pc, #48]	; (e4fc <siscanf+0x50>)
    e4cc:	str	r0, [sp, #20]
    e4ce:	str	r0, [sp, #36]	; 0x24
    e4d0:	str	r3, [sp, #52]	; 0x34
    e4d2:	ldr	r0, [pc, #44]	; (e500 <siscanf+0x54>)
    e4d4:	ldr	r2, [sp, #4]
    e4d6:	ldr	r0, [r0, #0]
    e4d8:	str	r4, [sp, #12]
    e4da:	movs	r3, #0
    e4dc:	str	r3, [sp, #68]	; 0x44
    e4de:	str	r3, [sp, #88]	; 0x58
    e4e0:	movw	r3, #65535	; 0xffff
    e4e4:	strh.w	r3, [sp, #30]
    e4e8:	add	r1, sp, #16
    e4ea:	mov	r3, r4
    e4ec:	bl	109fc <__ssvfiscanf_r>
    e4f0:	add	sp, #124	; 0x7c
    e4f2:	ldmia.w	sp!, {r4, lr}
    e4f6:	add	sp, #12
    e4f8:	bx	lr
    e4fa:	nop
    e4fc:	.word	0x0000e527
    e500:	.word	0x2000228c

0000e504 <__sread>:
    e504:	push	{r4, lr}
    e506:	mov	r4, r1
    e508:	ldrsh.w	r1, [r1, #14]
    e50c:	bl	e78c <_read_r>
    e510:	cmp	r0, #0
    e512:	itete	ge
    e514:	ldrge	r3, [r4, #84]	; 0x54
    e516:	ldrhlt	r3, [r4, #12]
    e518:	addge	r3, r3, r0
    e51a:	biclt.w	r3, r3, #4096	; 0x1000
    e51e:	ite	ge
    e520:	strge	r3, [r4, #84]	; 0x54
    e522:	strhlt	r3, [r4, #12]
    e524:	pop	{r4, pc}

0000e526 <__seofread>:
    e526:	movs	r0, #0
    e528:	bx	lr

0000e52a <__swrite>:
    e52a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e52e:	mov	r7, r3
    e530:	ldrh	r3, [r1, #12]
    e532:	lsls	r3, r3, #23
    e534:	mov	r5, r0
    e536:	mov	r4, r1
    e538:	mov	r6, r2
    e53a:	bpl.n	e548 <__swrite+0x1e>
    e53c:	ldrsh.w	r1, [r1, #14]
    e540:	movs	r3, #2
    e542:	movs	r2, #0
    e544:	bl	e768 <_lseek_r>
    e548:	ldrh	r3, [r4, #12]
    e54a:	ldrsh.w	r1, [r4, #14]
    e54e:	bic.w	r3, r3, #4096	; 0x1000
    e552:	strh	r3, [r4, #12]
    e554:	mov	r2, r6
    e556:	mov	r3, r7
    e558:	mov	r0, r5
    e55a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e55e:	b.w	e7d0 <_write_r>

0000e562 <__sseek>:
    e562:	push	{r4, lr}
    e564:	mov	r4, r1
    e566:	ldrsh.w	r1, [r1, #14]
    e56a:	bl	e768 <_lseek_r>
    e56e:	adds	r3, r0, #1
    e570:	ldrh	r3, [r4, #12]
    e572:	itete	ne
    e574:	strne	r0, [r4, #84]	; 0x54
    e576:	biceq.w	r3, r3, #4096	; 0x1000
    e57a:	orrne.w	r3, r3, #4096	; 0x1000
    e57e:	strheq	r3, [r4, #12]
    e580:	it	ne
    e582:	strhne	r3, [r4, #12]
    e584:	pop	{r4, pc}

0000e586 <__sclose>:
    e586:	ldrsh.w	r1, [r1, #14]
    e58a:	b.w	e748 <_close_r>

0000e58e <_vdiprintf_r>:
    e58e:	push	{r4, r5, r6, r7, lr}
    e590:	sub.w	sp, sp, #532	; 0x214
    e594:	mov	r6, r1
    e596:	add	r7, sp, #16
    e598:	mov.w	r1, #512	; 0x200
    e59c:	str	r1, [sp, #12]
    e59e:	str	r3, [sp, #0]
    e5a0:	mov	r1, r7
    e5a2:	mov	r3, r2
    e5a4:	add	r2, sp, #12
    e5a6:	mov	r5, r0
    e5a8:	bl	e5ec <_vasniprintf_r>
    e5ac:	mov	r4, r0
    e5ae:	cbz	r0, e5d2 <_vdiprintf_r+0x44>
    e5b0:	mov	r2, r0
    e5b2:	ldr	r3, [sp, #12]
    e5b4:	mov	r1, r6
    e5b6:	mov	r0, r5
    e5b8:	bl	e7d0 <_write_r>
    e5bc:	cmp	r4, r7
    e5be:	str	r0, [sp, #12]
    e5c0:	beq.n	e5ca <_vdiprintf_r+0x3c>
    e5c2:	mov	r1, r4
    e5c4:	mov	r0, r5
    e5c6:	bl	f518 <_free_r>
    e5ca:	ldr	r0, [sp, #12]
    e5cc:	add.w	sp, sp, #532	; 0x214
    e5d0:	pop	{r4, r5, r6, r7, pc}
    e5d2:	mov.w	r0, #4294967295
    e5d6:	b.n	e5cc <_vdiprintf_r+0x3e>

0000e5d8 <vdiprintf>:
    e5d8:	mov	r3, r2
    e5da:	mov	r2, r1
    e5dc:	mov	r1, r0
    e5de:	ldr	r0, [pc, #8]	; (e5e8 <vdiprintf+0x10>)
    e5e0:	ldr	r0, [r0, #0]
    e5e2:	b.w	e58e <_vdiprintf_r>
    e5e6:	nop
    e5e8:	.word	0x2000228c

0000e5ec <_vasniprintf_r>:
    e5ec:	push	{r4, r5, lr}
    e5ee:	mov	r5, r2
    e5f0:	sub	sp, #108	; 0x6c
    e5f2:	ldr	r4, [r5, #0]
    e5f4:	mov	r2, r3
    e5f6:	cbz	r1, e61c <_vasniprintf_r+0x30>
    e5f8:	cmp	r4, #0
    e5fa:	itee	ne
    e5fc:	movne.w	r3, #1544	; 0x608
    e600:	moveq.w	r3, #648	; 0x288
    e604:	moveq	r1, #0
    e606:	cmp	r4, #0
    e608:	strh.w	r3, [sp, #12]
    e60c:	str	r1, [sp, #0]
    e60e:	str	r1, [sp, #16]
    e610:	bge.n	e624 <_vasniprintf_r+0x38>
    e612:	movs	r3, #139	; 0x8b
    e614:	str	r3, [r0, #0]
    e616:	movs	r0, #0
    e618:	add	sp, #108	; 0x6c
    e61a:	pop	{r4, r5, pc}
    e61c:	mov.w	r3, #648	; 0x288
    e620:	mov	r4, r1
    e622:	b.n	e606 <_vasniprintf_r+0x1a>
    e624:	movw	r3, #65535	; 0xffff
    e628:	strh.w	r3, [sp, #14]
    e62c:	mov	r1, sp
    e62e:	ldr	r3, [sp, #120]	; 0x78
    e630:	str	r4, [sp, #8]
    e632:	str	r4, [sp, #20]
    e634:	bl	1074c <_svfiprintf_r>
    e638:	subs	r3, r0, #0
    e63a:	itt	ge
    e63c:	strge	r3, [r5, #0]
    e63e:	ldrge	r3, [sp, #0]
    e640:	mov.w	r0, #0
    e644:	itt	ge
    e646:	strbge	r0, [r3, #0]
    e648:	ldrge	r0, [sp, #16]
    e64a:	b.n	e618 <_vasniprintf_r+0x2c>

0000e64c <memcmp>:
    e64c:	push	{r4, lr}
    e64e:	subs	r1, #1
    e650:	add	r2, r0
    e652:	cmp	r0, r2
    e654:	bne.n	e65a <memcmp+0xe>
    e656:	movs	r0, #0
    e658:	b.n	e666 <memcmp+0x1a>
    e65a:	ldrb	r3, [r0, #0]
    e65c:	ldrb.w	r4, [r1, #1]!
    e660:	cmp	r3, r4
    e662:	beq.n	e668 <memcmp+0x1c>
    e664:	subs	r0, r3, r4
    e666:	pop	{r4, pc}
    e668:	adds	r0, #1
    e66a:	b.n	e652 <memcmp+0x6>

0000e66c <memmove>:
    e66c:	cmp	r0, r1
    e66e:	push	{r4, lr}
    e670:	add.w	r4, r1, r2
    e674:	bls.n	e67c <memmove+0x10>
    e676:	cmp	r4, r0
    e678:	mov	r3, r4
    e67a:	bhi.n	e68c <memmove+0x20>
    e67c:	subs	r3, r0, #1
    e67e:	cmp	r1, r4
    e680:	beq.n	e694 <memmove+0x28>
    e682:	ldrb.w	r2, [r1], #1
    e686:	strb.w	r2, [r3, #1]!
    e68a:	b.n	e67e <memmove+0x12>
    e68c:	add	r2, r0
    e68e:	mov	r1, r0
    e690:	cmp	r2, r1
    e692:	bne.n	e696 <memmove+0x2a>
    e694:	pop	{r4, pc}
    e696:	ldrb.w	r4, [r3, #-1]!
    e69a:	strb.w	r4, [r2, #-1]!
    e69e:	b.n	e690 <memmove+0x24>

0000e6a0 <strlcat>:
    e6a0:	push	{r4, r5, r6, lr}
    e6a2:	mov	r4, r0
    e6a4:	adds	r6, r2, r0
    e6a6:	cmp	r4, r6
    e6a8:	mov	r3, r4
    e6aa:	bne.n	e6be <strlcat+0x1e>
    e6ac:	subs	r4, r3, r0
    e6ae:	subs	r2, r2, r4
    e6b0:	subs	r6, r2, #1
    e6b2:	cbnz	r2, e6c8 <strlcat+0x28>
    e6b4:	mov	r0, r1
    e6b6:	bl	e900 <strlen>
    e6ba:	add	r0, r4
    e6bc:	pop	{r4, r5, r6, pc}
    e6be:	ldrb	r5, [r3, #0]
    e6c0:	adds	r4, #1
    e6c2:	cmp	r5, #0
    e6c4:	bne.n	e6a6 <strlcat+0x6>
    e6c6:	b.n	e6ac <strlcat+0xc>
    e6c8:	mov	r5, r1
    e6ca:	mov	r2, r5
    e6cc:	ldrb.w	r0, [r5], #1
    e6d0:	cbnz	r0, e6da <strlcat+0x3a>
    e6d2:	subs	r2, r2, r1
    e6d4:	strb	r0, [r3, #0]
    e6d6:	adds	r0, r2, r4
    e6d8:	b.n	e6bc <strlcat+0x1c>
    e6da:	cmp	r6, #0
    e6dc:	beq.n	e6ca <strlcat+0x2a>
    e6de:	strb.w	r0, [r3], #1
    e6e2:	subs	r6, #1
    e6e4:	b.n	e6ca <strlcat+0x2a>

0000e6e6 <strlcpy>:
    e6e6:	push	{r4, lr}
    e6e8:	cbz	r2, e710 <strlcpy+0x2a>
    e6ea:	add	r2, r1
    e6ec:	mov	r3, r1
    e6ee:	mov	r4, r3
    e6f0:	adds	r3, #1
    e6f2:	cmp	r3, r2
    e6f4:	bne.n	e6fe <strlcpy+0x18>
    e6f6:	movs	r3, #0
    e6f8:	strb	r3, [r0, #0]
    e6fa:	mov	r3, r4
    e6fc:	b.n	e712 <strlcpy+0x2c>
    e6fe:	ldrb.w	r4, [r3, #-1]
    e702:	strb.w	r4, [r0], #1
    e706:	cmp	r4, #0
    e708:	bne.n	e6ee <strlcpy+0x8>
    e70a:	subs	r1, r3, r1
    e70c:	subs	r0, r1, #1
    e70e:	pop	{r4, pc}
    e710:	mov	r3, r1
    e712:	ldrb.w	r2, [r3], #1
    e716:	cmp	r2, #0
    e718:	bne.n	e712 <strlcpy+0x2c>
    e71a:	b.n	e70a <strlcpy+0x24>

0000e71c <strncmp>:
    e71c:	push	{r4, lr}
    e71e:	cbz	r2, e73c <strncmp+0x20>
    e720:	subs	r1, #1
    e722:	adds	r4, r0, r2
    e724:	ldrb.w	r2, [r0], #1
    e728:	ldrb.w	r3, [r1, #1]!
    e72c:	cmp	r2, r3
    e72e:	bne.n	e738 <strncmp+0x1c>
    e730:	cmp	r0, r4
    e732:	beq.n	e738 <strncmp+0x1c>
    e734:	cmp	r2, #0
    e736:	bne.n	e724 <strncmp+0x8>
    e738:	subs	r0, r2, r3
    e73a:	pop	{r4, pc}
    e73c:	mov	r0, r2
    e73e:	b.n	e73a <strncmp+0x1e>

0000e740 <_localeconv_r>:
    e740:	ldr	r0, [pc, #0]	; (e744 <_localeconv_r+0x4>)
    e742:	bx	lr
    e744:	.word	0x200021b8

0000e748 <_close_r>:
    e748:	push	{r3, r4, r5, lr}
    e74a:	ldr	r5, [pc, #24]	; (e764 <_close_r+0x1c>)
    e74c:	movs	r3, #0
    e74e:	mov	r4, r0
    e750:	mov	r0, r1
    e752:	str	r3, [r5, #0]
    e754:	bl	b4f4 <_close>
    e758:	adds	r3, r0, #1
    e75a:	bne.n	e762 <_close_r+0x1a>
    e75c:	ldr	r3, [r5, #0]
    e75e:	cbz	r3, e762 <_close_r+0x1a>
    e760:	str	r3, [r4, #0]
    e762:	pop	{r3, r4, r5, pc}
    e764:	.word	0x20020ba4

0000e768 <_lseek_r>:
    e768:	push	{r3, r4, r5, lr}
    e76a:	ldr	r5, [pc, #28]	; (e788 <_lseek_r+0x20>)
    e76c:	mov	r4, r0
    e76e:	mov	r0, r1
    e770:	mov	r1, r2
    e772:	movs	r2, #0
    e774:	str	r2, [r5, #0]
    e776:	mov	r2, r3
    e778:	bl	b508 <_lseek>
    e77c:	adds	r3, r0, #1
    e77e:	bne.n	e786 <_lseek_r+0x1e>
    e780:	ldr	r3, [r5, #0]
    e782:	cbz	r3, e786 <_lseek_r+0x1e>
    e784:	str	r3, [r4, #0]
    e786:	pop	{r3, r4, r5, pc}
    e788:	.word	0x20020ba4

0000e78c <_read_r>:
    e78c:	push	{r3, r4, r5, lr}
    e78e:	ldr	r5, [pc, #28]	; (e7ac <_read_r+0x20>)
    e790:	mov	r4, r0
    e792:	mov	r0, r1
    e794:	mov	r1, r2
    e796:	movs	r2, #0
    e798:	str	r2, [r5, #0]
    e79a:	mov	r2, r3
    e79c:	bl	b4f0 <_read>
    e7a0:	adds	r3, r0, #1
    e7a2:	bne.n	e7aa <_read_r+0x1e>
    e7a4:	ldr	r3, [r5, #0]
    e7a6:	cbz	r3, e7aa <_read_r+0x1e>
    e7a8:	str	r3, [r4, #0]
    e7aa:	pop	{r3, r4, r5, pc}
    e7ac:	.word	0x20020ba4

0000e7b0 <_sbrk_r>:
    e7b0:	push	{r3, r4, r5, lr}
    e7b2:	ldr	r5, [pc, #24]	; (e7cc <_sbrk_r+0x1c>)
    e7b4:	movs	r3, #0
    e7b6:	mov	r4, r0
    e7b8:	mov	r0, r1
    e7ba:	str	r3, [r5, #0]
    e7bc:	bl	b4c4 <_sbrk>
    e7c0:	adds	r3, r0, #1
    e7c2:	bne.n	e7ca <_sbrk_r+0x1a>
    e7c4:	ldr	r3, [r5, #0]
    e7c6:	cbz	r3, e7ca <_sbrk_r+0x1a>
    e7c8:	str	r3, [r4, #0]
    e7ca:	pop	{r3, r4, r5, pc}
    e7cc:	.word	0x20020ba4

0000e7d0 <_write_r>:
    e7d0:	push	{r3, r4, r5, lr}
    e7d2:	ldr	r5, [pc, #28]	; (e7f0 <_write_r+0x20>)
    e7d4:	mov	r4, r0
    e7d6:	mov	r0, r1
    e7d8:	mov	r1, r2
    e7da:	movs	r2, #0
    e7dc:	str	r2, [r5, #0]
    e7de:	mov	r2, r3
    e7e0:	bl	c274 <_write>
    e7e4:	adds	r3, r0, #1
    e7e6:	bne.n	e7ee <_write_r+0x1e>
    e7e8:	ldr	r3, [r5, #0]
    e7ea:	cbz	r3, e7ee <_write_r+0x1e>
    e7ec:	str	r3, [r4, #0]
    e7ee:	pop	{r3, r4, r5, pc}
    e7f0:	.word	0x20020ba4

0000e7f4 <__errno>:
    e7f4:	ldr	r3, [pc, #4]	; (e7fc <__errno+0x8>)
    e7f6:	ldr	r0, [r3, #0]
    e7f8:	bx	lr
    e7fa:	nop
    e7fc:	.word	0x2000228c

0000e800 <__libc_init_array>:
    e800:	push	{r4, r5, r6, lr}
    e802:	ldr	r5, [pc, #52]	; (e838 <__libc_init_array+0x38>)
    e804:	ldr	r4, [pc, #52]	; (e83c <__libc_init_array+0x3c>)
    e806:	subs	r4, r4, r5
    e808:	asrs	r4, r4, #2
    e80a:	movs	r6, #0
    e80c:	cmp	r6, r4
    e80e:	bne.n	e824 <__libc_init_array+0x24>
    e810:	ldr	r5, [pc, #44]	; (e840 <__libc_init_array+0x40>)
    e812:	ldr	r4, [pc, #48]	; (e844 <__libc_init_array+0x44>)
    e814:	bl	11c08 <___init_veneer>
    e818:	subs	r4, r4, r5
    e81a:	asrs	r4, r4, #2
    e81c:	movs	r6, #0
    e81e:	cmp	r6, r4
    e820:	bne.n	e82e <__libc_init_array+0x2e>
    e822:	pop	{r4, r5, r6, pc}
    e824:	ldr.w	r3, [r5], #4
    e828:	blx	r3
    e82a:	adds	r6, #1
    e82c:	b.n	e80c <__libc_init_array+0xc>
    e82e:	ldr.w	r3, [r5], #4
    e832:	blx	r3
    e834:	adds	r6, #1
    e836:	b.n	e81e <__libc_init_array+0x1e>
    e838:	.word	0x600024c0
    e83c:	.word	0x600024c0
    e840:	.word	0x600024c0
    e844:	.word	0x600024d0

0000e848 <__retarget_lock_acquire_recursive>:
    e848:	bx	lr

0000e84a <__retarget_lock_release_recursive>:
    e84a:	bx	lr

0000e84c <strcpy>:
    e84c:	mov	r3, r0
    e84e:	ldrb.w	r2, [r1], #1
    e852:	strb.w	r2, [r3], #1
    e856:	cmp	r2, #0
    e858:	bne.n	e84e <strcpy+0x2>
    e85a:	bx	lr
    e85c:	movs	r0, r0
	...

0000e860 <memchr>:
    e860:	and.w	r1, r1, #255	; 0xff
    e864:	cmp	r2, #16
    e866:	blt.n	e8c0 <memchr+0x60>
    e868:	tst.w	r0, #7
    e86c:	beq.n	e880 <memchr+0x20>
    e86e:	ldrb.w	r3, [r0], #1
    e872:	subs	r2, #1
    e874:	cmp	r3, r1
    e876:	beq.n	e8d4 <memchr+0x74>
    e878:	tst.w	r0, #7
    e87c:	cbz	r2, e8d0 <memchr+0x70>
    e87e:	bne.n	e86e <memchr+0xe>
    e880:	push	{r4, r5, r6, r7}
    e882:	orr.w	r1, r1, r1, lsl #8
    e886:	orr.w	r1, r1, r1, lsl #16
    e88a:	bic.w	r4, r2, #7
    e88e:	mvns.w	r7, #0
    e892:	movs	r3, #0
    e894:	ldrd	r5, r6, [r0], #8
    e898:	subs	r4, #8
    e89a:	eor.w	r5, r5, r1
    e89e:	eor.w	r6, r6, r1
    e8a2:	uadd8	r5, r5, r7
    e8a6:	sel	r5, r3, r7
    e8aa:	uadd8	r6, r6, r7
    e8ae:	sel	r6, r5, r7
    e8b2:	cbnz	r6, e8d8 <memchr+0x78>
    e8b4:	bne.n	e894 <memchr+0x34>
    e8b6:	pop	{r4, r5, r6, r7}
    e8b8:	and.w	r1, r1, #255	; 0xff
    e8bc:	and.w	r2, r2, #7
    e8c0:	cbz	r2, e8d0 <memchr+0x70>
    e8c2:	ldrb.w	r3, [r0], #1
    e8c6:	subs	r2, #1
    e8c8:	eor.w	r3, r3, r1
    e8cc:	cbz	r3, e8d4 <memchr+0x74>
    e8ce:	bne.n	e8c2 <memchr+0x62>
    e8d0:	movs	r0, #0
    e8d2:	bx	lr
    e8d4:	subs	r0, #1
    e8d6:	bx	lr
    e8d8:	cmp	r5, #0
    e8da:	itte	eq
    e8dc:	moveq	r5, r6
    e8de:	subeq	r0, #3
    e8e0:	subne	r0, #7
    e8e2:	tst.w	r5, #1
    e8e6:	bne.n	e8f8 <memchr+0x98>
    e8e8:	adds	r0, #1
    e8ea:	tst.w	r5, #256	; 0x100
    e8ee:	ittt	eq
    e8f0:	addeq	r0, #1
    e8f2:	tsteq.w	r5, #98304	; 0x18000
    e8f6:	addeq	r0, #1
    e8f8:	pop	{r4, r5, r6, r7}
    e8fa:	subs	r0, #1
    e8fc:	bx	lr
    e8fe:	nop

0000e900 <strlen>:
    e900:	mov	r3, r0
    e902:	ldrb.w	r2, [r3], #1
    e906:	cmp	r2, #0
    e908:	bne.n	e902 <strlen+0x2>
    e90a:	subs	r0, r3, r0
    e90c:	subs	r0, #1
    e90e:	bx	lr

0000e910 <nan>:
    e910:	vldr	d0, [pc, #4]	; e918 <nan+0x8>
    e914:	bx	lr
    e916:	nop
    e918:	.word	0x00000000
    e91c:	.word	0x7ff80000

0000e920 <nanf>:
    e920:	vldr	s0, [pc, #4]	; e928 <nanf+0x8>
    e924:	bx	lr
    e926:	nop
    e928:	.word	0x7fc00000

0000e92c <quorem>:
    e92c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e930:	ldr	r3, [r0, #16]
    e932:	ldr	r4, [r1, #16]
    e934:	cmp	r3, r4
    e936:	mov	r7, r0
    e938:	blt.n	ea38 <quorem+0x10c>
    e93a:	subs	r4, #1
    e93c:	add.w	r8, r1, #20
    e940:	add.w	r5, r0, #20
    e944:	add.w	r3, r5, r4, lsl #2
    e948:	str	r3, [sp, #4]
    e94a:	ldr.w	r3, [r8, r4, lsl #2]
    e94e:	ldr.w	r2, [r5, r4, lsl #2]
    e952:	adds	r3, #1
    e954:	cmp	r2, r3
    e956:	mov.w	fp, r4, lsl #2
    e95a:	add.w	r9, r8, r4, lsl #2
    e95e:	udiv	r6, r2, r3
    e962:	bcc.n	e9c8 <quorem+0x9c>
    e964:	mov.w	lr, #0
    e968:	mov	r0, r8
    e96a:	mov	ip, r5
    e96c:	mov	sl, lr
    e96e:	ldr.w	r2, [r0], #4
    e972:	uxth	r3, r2
    e974:	mla	r3, r6, r3, lr
    e978:	mov.w	lr, r2, lsr #16
    e97c:	lsrs	r2, r3, #16
    e97e:	uxth	r3, r3
    e980:	sub.w	r3, sl, r3
    e984:	ldr.w	sl, [ip]
    e988:	uxtah	r3, r3, sl
    e98c:	mla	r2, r6, lr, r2
    e990:	str	r3, [sp, #0]
    e992:	ldr	r3, [sp, #0]
    e994:	mov.w	lr, r2, lsr #16
    e998:	uxth	r2, r2
    e99a:	rsb	r2, r2, sl, lsr #16
    e99e:	add.w	r2, r2, r3, asr #16
    e9a2:	ldrh.w	r3, [sp]
    e9a6:	cmp	r9, r0
    e9a8:	orr.w	r3, r3, r2, lsl #16
    e9ac:	str.w	r3, [ip], #4
    e9b0:	mov.w	sl, r2, asr #16
    e9b4:	bcs.n	e96e <quorem+0x42>
    e9b6:	ldr.w	r3, [r5, fp]
    e9ba:	cbnz	r3, e9c8 <quorem+0x9c>
    e9bc:	ldr	r3, [sp, #4]
    e9be:	subs	r3, #4
    e9c0:	cmp	r5, r3
    e9c2:	mov	r2, r3
    e9c4:	bcc.n	ea20 <quorem+0xf4>
    e9c6:	str	r4, [r7, #16]
    e9c8:	mov	r0, r7
    e9ca:	bl	10210 <__mcmp>
    e9ce:	cmp	r0, #0
    e9d0:	blt.n	ea18 <quorem+0xec>
    e9d2:	adds	r6, #1
    e9d4:	mov	r1, r5
    e9d6:	movs	r0, #0
    e9d8:	ldr.w	r2, [r8], #4
    e9dc:	ldr.w	ip, [r1]
    e9e0:	uxth	r3, r2
    e9e2:	subs	r3, r0, r3
    e9e4:	lsrs	r2, r2, #16
    e9e6:	uxtah	r3, r3, ip
    e9ea:	rsb	r2, r2, ip, lsr #16
    e9ee:	add.w	r2, r2, r3, asr #16
    e9f2:	uxth	r3, r3
    e9f4:	orr.w	r3, r3, r2, lsl #16
    e9f8:	cmp	r9, r8
    e9fa:	str.w	r3, [r1], #4
    e9fe:	mov.w	r0, r2, asr #16
    ea02:	bcs.n	e9d8 <quorem+0xac>
    ea04:	ldr.w	r2, [r5, r4, lsl #2]
    ea08:	add.w	r3, r5, r4, lsl #2
    ea0c:	cbnz	r2, ea18 <quorem+0xec>
    ea0e:	subs	r3, #4
    ea10:	cmp	r5, r3
    ea12:	mov	r2, r3
    ea14:	bcc.n	ea2c <quorem+0x100>
    ea16:	str	r4, [r7, #16]
    ea18:	mov	r0, r6
    ea1a:	add	sp, #12
    ea1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea20:	ldr	r2, [r2, #0]
    ea22:	subs	r3, #4
    ea24:	cmp	r2, #0
    ea26:	bne.n	e9c6 <quorem+0x9a>
    ea28:	subs	r4, #1
    ea2a:	b.n	e9c0 <quorem+0x94>
    ea2c:	ldr	r2, [r2, #0]
    ea2e:	subs	r3, #4
    ea30:	cmp	r2, #0
    ea32:	bne.n	ea16 <quorem+0xea>
    ea34:	subs	r4, #1
    ea36:	b.n	ea10 <quorem+0xe4>
    ea38:	movs	r0, #0
    ea3a:	b.n	ea1a <quorem+0xee>
    ea3c:	movs	r0, r0
	...

0000ea40 <_dtoa_r>:
    ea40:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea44:	vpush	{d8}
    ea48:	ldr	r5, [r0, #28]
    ea4a:	sub	sp, #68	; 0x44
    ea4c:	vstr	d0, [sp, #8]
    ea50:	vmov	r8, r9, d0
    ea54:	ldr	r4, [sp, #112]	; 0x70
    ea56:	str	r1, [sp, #24]
    ea58:	mov	r6, r0
    ea5a:	str	r2, [sp, #32]
    ea5c:	str	r3, [sp, #48]	; 0x30
    ea5e:	cbnz	r5, ea7e <_dtoa_r+0x3e>
    ea60:	movs	r0, #16
    ea62:	bl	c788 <malloc>
    ea66:	mov	r2, r0
    ea68:	str	r0, [r6, #28]
    ea6a:	cbnz	r0, ea76 <_dtoa_r+0x36>
    ea6c:	ldr	r3, [pc, #664]	; (ed08 <_dtoa_r+0x2c8>)
    ea6e:	movs	r1, #239	; 0xef
    ea70:	ldr	r0, [pc, #664]	; (ed0c <_dtoa_r+0x2cc>)
    ea72:	bl	111cc <__assert_func>
    ea76:	strd	r5, r5, [r0, #4]
    ea7a:	str	r5, [r0, #0]
    ea7c:	str	r5, [r0, #12]
    ea7e:	ldr	r3, [r6, #28]
    ea80:	ldr	r1, [r3, #0]
    ea82:	cbz	r1, ea9a <_dtoa_r+0x5a>
    ea84:	ldr	r2, [r3, #4]
    ea86:	str	r2, [r1, #4]
    ea88:	movs	r3, #1
    ea8a:	lsls	r3, r2
    ea8c:	str	r3, [r1, #8]
    ea8e:	mov	r0, r6
    ea90:	bl	fd04 <_Bfree>
    ea94:	ldr	r3, [r6, #28]
    ea96:	movs	r2, #0
    ea98:	str	r2, [r3, #0]
    ea9a:	subs.w	r3, r9, #0
    ea9e:	ittet	lt
    eaa0:	biclt.w	r3, r3, #2147483648	; 0x80000000
    eaa4:	strlt	r3, [sp, #12]
    eaa6:	movge	r3, #0
    eaa8:	movlt	r2, #1
    eaaa:	ite	ge
    eaac:	strge	r3, [r4, #0]
    eaae:	strlt	r2, [r4, #0]
    eab0:	ldr	r3, [pc, #604]	; (ed10 <_dtoa_r+0x2d0>)
    eab2:	ldr	r4, [sp, #12]
    eab4:	bics	r3, r4
    eab6:	bne.n	eaf2 <_dtoa_r+0xb2>
    eab8:	ldr	r2, [sp, #48]	; 0x30
    eaba:	movw	r3, #9999	; 0x270f
    eabe:	str	r3, [r2, #0]
    eac0:	ubfx	r3, r4, #0, #20
    eac4:	orrs.w	r3, r3, r8
    eac8:	beq.w	f4c2 <_dtoa_r+0xa82>
    eacc:	ldr	r3, [sp, #116]	; 0x74
    eace:	cbnz	r3, eaea <_dtoa_r+0xaa>
    ead0:	ldr	r3, [pc, #576]	; (ed14 <_dtoa_r+0x2d4>)
    ead2:	b.n	eb16 <_dtoa_r+0xd6>
    ead4:	ldr	r3, [pc, #576]	; (ed18 <_dtoa_r+0x2d8>)
    ead6:	str	r3, [sp, #4]
    ead8:	adds	r3, #8
    eada:	ldr	r2, [sp, #116]	; 0x74
    eadc:	str	r3, [r2, #0]
    eade:	ldr	r0, [sp, #4]
    eae0:	add	sp, #68	; 0x44
    eae2:	vpop	{d8}
    eae6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaea:	ldr	r3, [pc, #552]	; (ed14 <_dtoa_r+0x2d4>)
    eaec:	str	r3, [sp, #4]
    eaee:	adds	r3, #3
    eaf0:	b.n	eada <_dtoa_r+0x9a>
    eaf2:	vldr	d8, [sp, #8]
    eaf6:	vcmp.f64	d8, #0.0
    eafa:	vmrs	APSR_nzcv, fpscr
    eafe:	bne.n	eb1a <_dtoa_r+0xda>
    eb00:	ldr	r2, [sp, #48]	; 0x30
    eb02:	movs	r3, #1
    eb04:	str	r3, [r2, #0]
    eb06:	ldr	r3, [sp, #116]	; 0x74
    eb08:	cmp	r3, #0
    eb0a:	beq.w	f4bc <_dtoa_r+0xa7c>
    eb0e:	ldr	r3, [pc, #524]	; (ed1c <_dtoa_r+0x2dc>)
    eb10:	ldr	r2, [sp, #116]	; 0x74
    eb12:	str	r3, [r2, #0]
    eb14:	subs	r3, #1
    eb16:	str	r3, [sp, #4]
    eb18:	b.n	eade <_dtoa_r+0x9e>
    eb1a:	add	r2, sp, #56	; 0x38
    eb1c:	add	r1, sp, #60	; 0x3c
    eb1e:	mov	r0, r6
    eb20:	vmov.f64	d0, d8
    eb24:	bl	1043c <__d2b>
    eb28:	ubfx	r3, r4, #20, #11
    eb2c:	ldr	r2, [sp, #56]	; 0x38
    eb2e:	mov	r5, r0
    eb30:	cmp	r3, #0
    eb32:	beq.n	ebc2 <_dtoa_r+0x182>
    eb34:	vmov.f64	d7, d8
    eb38:	vmov	r1, s17
    eb3c:	ubfx	r1, r1, #0, #20
    eb40:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    eb44:	orr.w	r1, r1, #3145728	; 0x300000
    eb48:	subw	r3, r3, #1023	; 0x3ff
    eb4c:	movs	r0, #0
    eb4e:	vmov	s15, r1
    eb52:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    eb56:	vldr	d5, [pc, #408]	; ecf0 <_dtoa_r+0x2b0>
    eb5a:	vsub.f64	d7, d7, d6
    eb5e:	vldr	d6, [pc, #408]	; ecf8 <_dtoa_r+0x2b8>
    eb62:	vfma.f64	d6, d7, d5
    eb66:	vldr	d5, [pc, #408]	; ed00 <_dtoa_r+0x2c0>
    eb6a:	vmov	s15, r3
    eb6e:	vcvt.f64.s32	d4, s15
    eb72:	vmov.f64	d7, d6
    eb76:	vfma.f64	d7, d4, d5
    eb7a:	vcvt.s32.f64	s13, d7
    eb7e:	vcmpe.f64	d7, #0.0
    eb82:	vmrs	APSR_nzcv, fpscr
    eb86:	vmov	fp, s13
    eb8a:	str	r0, [sp, #36]	; 0x24
    eb8c:	bpl.n	eba0 <_dtoa_r+0x160>
    eb8e:	vcvt.f64.s32	d6, s13
    eb92:	vcmp.f64	d6, d7
    eb96:	vmrs	APSR_nzcv, fpscr
    eb9a:	it	ne
    eb9c:	addne.w	fp, fp, #4294967295
    eba0:	cmp.w	fp, #22
    eba4:	bhi.n	ebfe <_dtoa_r+0x1be>
    eba6:	ldr	r1, [pc, #376]	; (ed20 <_dtoa_r+0x2e0>)
    eba8:	add.w	r1, r1, fp, lsl #3
    ebac:	vldr	d7, [r1]
    ebb0:	vcmpe.f64	d8, d7
    ebb4:	vmrs	APSR_nzcv, fpscr
    ebb8:	bpl.n	ebbe <_dtoa_r+0x17e>
    ebba:	add.w	fp, fp, #4294967295
    ebbe:	movs	r1, #0
    ebc0:	b.n	ec00 <_dtoa_r+0x1c0>
    ebc2:	ldr	r3, [sp, #60]	; 0x3c
    ebc4:	add	r3, r2
    ebc6:	addw	r1, r3, #1074	; 0x432
    ebca:	cmp	r1, #32
    ebcc:	itttt	gt
    ebce:	rsbgt	r1, r1, #64	; 0x40
    ebd2:	lslgt	r4, r1
    ebd4:	addwgt	r1, r3, #1042	; 0x412
    ebd8:	lsrgt.w	r1, r8, r1
    ebdc:	itet	le
    ebde:	rsble	r1, r1, #32
    ebe2:	orrgt	r1, r4
    ebe4:	lslle.w	r1, r8, r1
    ebe8:	vmov	s15, r1
    ebec:	vcvt.f64.u32	d7, s15
    ebf0:	subs	r3, #1
    ebf2:	vmov	r1, s15
    ebf6:	movs	r0, #1
    ebf8:	sub.w	r1, r1, #32505856	; 0x1f00000
    ebfc:	b.n	eb4e <_dtoa_r+0x10e>
    ebfe:	movs	r1, #1
    ec00:	subs	r2, r2, r3
    ec02:	subs	r3, r2, #1
    ec04:	str	r3, [sp, #20]
    ec06:	ittet	mi
    ec08:	rsbmi	r3, r2, #1
    ec0c:	strmi	r3, [sp, #16]
    ec0e:	movpl	r3, #0
    ec10:	movmi	r3, #0
    ec12:	ite	mi
    ec14:	strmi	r3, [sp, #20]
    ec16:	strpl	r3, [sp, #16]
    ec18:	cmp.w	fp, #0
    ec1c:	str	r1, [sp, #44]	; 0x2c
    ec1e:	blt.n	ec52 <_dtoa_r+0x212>
    ec20:	ldr	r3, [sp, #20]
    ec22:	str.w	fp, [sp, #40]	; 0x28
    ec26:	add	r3, fp
    ec28:	str	r3, [sp, #20]
    ec2a:	movs	r3, #0
    ec2c:	ldr	r2, [sp, #24]
    ec2e:	cmp	r2, #9
    ec30:	bhi.n	ecc4 <_dtoa_r+0x284>
    ec32:	cmp	r2, #5
    ec34:	itt	gt
    ec36:	subgt	r2, #4
    ec38:	strgt	r2, [sp, #24]
    ec3a:	ldr	r2, [sp, #24]
    ec3c:	sub.w	r2, r2, #2
    ec40:	ite	gt
    ec42:	movgt	r4, #0
    ec44:	movle	r4, #1
    ec46:	cmp	r2, #3
    ec48:	bhi.n	ecda <_dtoa_r+0x29a>
    ec4a:	tbb	[pc, r2]
    ec4e:	.short	0x2d0b
    ec50:	.short	0x392b
    ec52:	ldr	r3, [sp, #16]
    ec54:	movs	r2, #0
    ec56:	sub.w	r3, r3, fp
    ec5a:	str	r3, [sp, #16]
    ec5c:	str	r2, [sp, #40]	; 0x28
    ec5e:	rsb	r3, fp, #0
    ec62:	b.n	ec2c <_dtoa_r+0x1ec>
    ec64:	movs	r2, #0
    ec66:	str	r2, [sp, #28]
    ec68:	ldr	r2, [sp, #32]
    ec6a:	cmp	r2, #0
    ec6c:	bgt.n	ece0 <_dtoa_r+0x2a0>
    ec6e:	mov.w	sl, #1
    ec72:	mov	r9, sl
    ec74:	mov	r2, sl
    ec76:	str.w	sl, [sp, #32]
    ec7a:	ldr	r7, [r6, #28]
    ec7c:	movs	r1, #0
    ec7e:	movs	r0, #4
    ec80:	add.w	ip, r0, #20
    ec84:	cmp	ip, r2
    ec86:	bls.n	ecea <_dtoa_r+0x2aa>
    ec88:	str	r1, [r7, #4]
    ec8a:	mov	r0, r6
    ec8c:	str	r3, [sp, #52]	; 0x34
    ec8e:	bl	fc84 <_Balloc>
    ec92:	ldr	r3, [sp, #52]	; 0x34
    ec94:	str	r0, [sp, #4]
    ec96:	mov	r2, r0
    ec98:	cmp	r0, #0
    ec9a:	bne.n	ed28 <_dtoa_r+0x2e8>
    ec9c:	ldr	r3, [pc, #132]	; (ed24 <_dtoa_r+0x2e4>)
    ec9e:	movw	r1, #431	; 0x1af
    eca2:	b.n	ea70 <_dtoa_r+0x30>
    eca4:	movs	r2, #1
    eca6:	b.n	ec66 <_dtoa_r+0x226>
    eca8:	movs	r2, #0
    ecaa:	str	r2, [sp, #28]
    ecac:	ldr	r2, [sp, #32]
    ecae:	add.w	sl, fp, r2
    ecb2:	add.w	r9, sl, #1
    ecb6:	mov	r2, r9
    ecb8:	cmp	r2, #1
    ecba:	it	lt
    ecbc:	movlt	r2, #1
    ecbe:	b.n	ec7a <_dtoa_r+0x23a>
    ecc0:	movs	r2, #1
    ecc2:	b.n	ecaa <_dtoa_r+0x26a>
    ecc4:	movs	r4, #1
    ecc6:	movs	r2, #0
    ecc8:	strd	r2, r4, [sp, #24]
    eccc:	mov.w	sl, #4294967295
    ecd0:	movs	r1, #0
    ecd2:	mov	r9, sl
    ecd4:	movs	r2, #18
    ecd6:	str	r1, [sp, #32]
    ecd8:	b.n	ec7a <_dtoa_r+0x23a>
    ecda:	movs	r2, #1
    ecdc:	str	r2, [sp, #28]
    ecde:	b.n	eccc <_dtoa_r+0x28c>
    ece0:	ldr.w	sl, [sp, #32]
    ece4:	mov	r9, sl
    ece6:	mov	r2, sl
    ece8:	b.n	ec7a <_dtoa_r+0x23a>
    ecea:	adds	r1, #1
    ecec:	lsls	r0, r0, #1
    ecee:	b.n	ec80 <_dtoa_r+0x240>
    ecf0:	.word	0x636f4361
    ecf4:	.word	0x3fd287a7
    ecf8:	.word	0x8b60c8b3
    ecfc:	.word	0x3fc68a28
    ed00:	.word	0x509f79fb
    ed04:	.word	0x3fd34413
    ed08:	.word	0x20001313
    ed0c:	.word	0x2000132a
    ed10:	.word	0x7ff00000
    ed14:	.word	0x2000130f
    ed18:	.word	0x20001306
    ed1c:	.word	0x20001142
    ed20:	.word	0x20000328
    ed24:	.word	0x20001383
    ed28:	ldr	r2, [r6, #28]
    ed2a:	ldr	r1, [sp, #4]
    ed2c:	str	r1, [r2, #0]
    ed2e:	cmp.w	r9, #14
    ed32:	bhi.n	ee0e <_dtoa_r+0x3ce>
    ed34:	cmp	r4, #0
    ed36:	beq.n	ee0e <_dtoa_r+0x3ce>
    ed38:	cmp.w	fp, #0
    ed3c:	ble.w	ee80 <_dtoa_r+0x440>
    ed40:	ldr	r2, [pc, #772]	; (f048 <_dtoa_r+0x608>)
    ed42:	and.w	r1, fp, #15
    ed46:	add.w	r2, r2, r1, lsl #3
    ed4a:	tst.w	fp, #256	; 0x100
    ed4e:	vldr	d7, [r2]
    ed52:	mov.w	r2, fp, asr #4
    ed56:	beq.w	ee68 <_dtoa_r+0x428>
    ed5a:	ldr	r1, [pc, #752]	; (f04c <_dtoa_r+0x60c>)
    ed5c:	vldr	d6, [r1, #32]
    ed60:	vdiv.f64	d6, d8, d6
    ed64:	vstr	d6, [sp, #8]
    ed68:	and.w	r2, r2, #15
    ed6c:	movs	r1, #3
    ed6e:	ldr	r0, [pc, #732]	; (f04c <_dtoa_r+0x60c>)
    ed70:	cmp	r2, #0
    ed72:	bne.n	ee6c <_dtoa_r+0x42c>
    ed74:	vldr	d6, [sp, #8]
    ed78:	vdiv.f64	d7, d6, d7
    ed7c:	vstr	d7, [sp, #8]
    ed80:	ldr	r2, [sp, #44]	; 0x2c
    ed82:	vldr	d7, [sp, #8]
    ed86:	cmp	r2, #0
    ed88:	beq.w	eecc <_dtoa_r+0x48c>
    ed8c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    ed90:	vcmpe.f64	d7, d6
    ed94:	vmrs	APSR_nzcv, fpscr
    ed98:	bpl.w	eecc <_dtoa_r+0x48c>
    ed9c:	cmp.w	r9, #0
    eda0:	beq.w	eecc <_dtoa_r+0x48c>
    eda4:	cmp.w	sl, #0
    eda8:	ble.n	ee0a <_dtoa_r+0x3ca>
    edaa:	vmov.f64	d6, #36	; 0x41200000  10.0
    edae:	vmul.f64	d7, d7, d6
    edb2:	vstr	d7, [sp, #8]
    edb6:	add.w	r2, fp, #4294967295
    edba:	adds	r1, #1
    edbc:	mov	r4, sl
    edbe:	vldr	d6, [sp, #8]
    edc2:	vmov.f64	d5, #28	; 0x40e00000  7.0
    edc6:	vmov	s15, r1
    edca:	vcvt.f64.s32	d7, s15
    edce:	vfma.f64	d5, d7, d6
    edd2:	vmov	r7, s11
    edd6:	vmov	r0, r1, d5
    edda:	sub.w	r1, r7, #54525952	; 0x3400000
    edde:	cmp	r4, #0
    ede0:	bne.n	eed2 <_dtoa_r+0x492>
    ede2:	vmov.f64	d7, #20	; 0x40a00000  5.0
    ede6:	vsub.f64	d6, d6, d7
    edea:	vmov	d7, r0, r1
    edee:	vcmpe.f64	d6, d7
    edf2:	vmrs	APSR_nzcv, fpscr
    edf6:	bgt.w	f2ce <_dtoa_r+0x88e>
    edfa:	vneg.f64	d7, d7
    edfe:	vcmpe.f64	d6, d7
    ee02:	vmrs	APSR_nzcv, fpscr
    ee06:	bmi.w	f2ca <_dtoa_r+0x88a>
    ee0a:	vstr	d8, [sp, #8]
    ee0e:	ldr	r2, [sp, #60]	; 0x3c
    ee10:	cmp	r2, #0
    ee12:	blt.w	f050 <_dtoa_r+0x610>
    ee16:	cmp.w	fp, #14
    ee1a:	bgt.w	f050 <_dtoa_r+0x610>
    ee1e:	ldr	r3, [pc, #552]	; (f048 <_dtoa_r+0x608>)
    ee20:	add.w	r3, r3, fp, lsl #3
    ee24:	vldr	d6, [r3]
    ee28:	ldr	r3, [sp, #32]
    ee2a:	cmp	r3, #0
    ee2c:	bge.w	ef9e <_dtoa_r+0x55e>
    ee30:	cmp.w	r9, #0
    ee34:	bgt.w	ef9e <_dtoa_r+0x55e>
    ee38:	bne.w	f2c8 <_dtoa_r+0x888>
    ee3c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    ee40:	vmul.f64	d6, d6, d7
    ee44:	vldr	d7, [sp, #8]
    ee48:	vcmpe.f64	d6, d7
    ee4c:	vmrs	APSR_nzcv, fpscr
    ee50:	mov	r4, r9
    ee52:	mov	r7, r9
    ee54:	bge.w	f290 <_dtoa_r+0x850>
    ee58:	ldr.w	r8, [sp, #4]
    ee5c:	movs	r3, #49	; 0x31
    ee5e:	strb.w	r3, [r8], #1
    ee62:	add.w	fp, fp, #1
    ee66:	b.n	f29a <_dtoa_r+0x85a>
    ee68:	movs	r1, #2
    ee6a:	b.n	ed6e <_dtoa_r+0x32e>
    ee6c:	lsls	r4, r2, #31
    ee6e:	bpl.n	ee7a <_dtoa_r+0x43a>
    ee70:	vldr	d6, [r0]
    ee74:	adds	r1, #1
    ee76:	vmul.f64	d7, d7, d6
    ee7a:	asrs	r2, r2, #1
    ee7c:	adds	r0, #8
    ee7e:	b.n	ed70 <_dtoa_r+0x330>
    ee80:	beq.n	eec8 <_dtoa_r+0x488>
    ee82:	rsb	r2, fp, #0
    ee86:	ldr	r1, [pc, #448]	; (f048 <_dtoa_r+0x608>)
    ee88:	and.w	r0, r2, #15
    ee8c:	add.w	r1, r1, r0, lsl #3
    ee90:	vldr	d7, [r1]
    ee94:	vmul.f64	d7, d8, d7
    ee98:	vstr	d7, [sp, #8]
    ee9c:	ldr	r0, [pc, #428]	; (f04c <_dtoa_r+0x60c>)
    ee9e:	asrs	r2, r2, #4
    eea0:	movs	r4, #0
    eea2:	movs	r1, #2
    eea4:	cbnz	r2, eeb2 <_dtoa_r+0x472>
    eea6:	cmp	r4, #0
    eea8:	beq.w	ed80 <_dtoa_r+0x340>
    eeac:	vstr	d7, [sp, #8]
    eeb0:	b.n	ed80 <_dtoa_r+0x340>
    eeb2:	lsls	r7, r2, #31
    eeb4:	bpl.n	eec2 <_dtoa_r+0x482>
    eeb6:	vldr	d6, [r0]
    eeba:	adds	r1, #1
    eebc:	movs	r4, #1
    eebe:	vmul.f64	d7, d7, d6
    eec2:	asrs	r2, r2, #1
    eec4:	adds	r0, #8
    eec6:	b.n	eea4 <_dtoa_r+0x464>
    eec8:	movs	r1, #2
    eeca:	b.n	ed80 <_dtoa_r+0x340>
    eecc:	mov	r2, fp
    eece:	mov	r4, r9
    eed0:	b.n	edbe <_dtoa_r+0x37e>
    eed2:	vmov	d7, r0, r1
    eed6:	ldr	r1, [pc, #368]	; (f048 <_dtoa_r+0x608>)
    eed8:	add.w	r1, r1, r4, lsl #3
    eedc:	vldr	d4, [r1, #-8]
    eee0:	ldr	r1, [sp, #4]
    eee2:	add	r4, r1
    eee4:	ldr	r1, [sp, #28]
    eee6:	cbz	r1, ef3e <_dtoa_r+0x4fe>
    eee8:	vmov.f64	d3, #96	; 0x3f000000  0.5
    eeec:	vmov.f64	d2, #112	; 0x3f800000  1.0
    eef0:	ldr.w	r8, [sp, #4]
    eef4:	vdiv.f64	d5, d3, d4
    eef8:	vmov.f64	d3, #36	; 0x41200000  10.0
    eefc:	vsub.f64	d7, d5, d7
    ef00:	vcvt.s32.f64	s9, d6
    ef04:	vmov	r1, s9
    ef08:	vcvt.f64.s32	d5, s9
    ef0c:	adds	r1, #48	; 0x30
    ef0e:	vsub.f64	d6, d6, d5
    ef12:	vcmpe.f64	d6, d7
    ef16:	vmrs	APSR_nzcv, fpscr
    ef1a:	strb.w	r1, [r8], #1
    ef1e:	bmi.n	ef94 <_dtoa_r+0x554>
    ef20:	vsub.f64	d5, d2, d6
    ef24:	vcmpe.f64	d5, d7
    ef28:	vmrs	APSR_nzcv, fpscr
    ef2c:	bmi.n	f014 <_dtoa_r+0x5d4>
    ef2e:	cmp	r8, r4
    ef30:	beq.w	ee0a <_dtoa_r+0x3ca>
    ef34:	vmul.f64	d7, d7, d3
    ef38:	vmul.f64	d6, d6, d3
    ef3c:	b.n	ef00 <_dtoa_r+0x4c0>
    ef3e:	ldr.w	r8, [sp, #4]
    ef42:	vmul.f64	d7, d7, d4
    ef46:	mov	r0, r4
    ef48:	vmov.f64	d3, #36	; 0x41200000  10.0
    ef4c:	vcvt.s32.f64	s9, d6
    ef50:	vmov	r1, s9
    ef54:	adds	r1, #48	; 0x30
    ef56:	strb.w	r1, [r8], #1
    ef5a:	cmp	r8, r4
    ef5c:	vcvt.f64.s32	d5, s9
    ef60:	vsub.f64	d6, d6, d5
    ef64:	bne.n	ef98 <_dtoa_r+0x558>
    ef66:	vmov.f64	d5, #96	; 0x3f000000  0.5
    ef6a:	vadd.f64	d4, d7, d5
    ef6e:	vcmpe.f64	d6, d4
    ef72:	vmrs	APSR_nzcv, fpscr
    ef76:	bgt.n	f014 <_dtoa_r+0x5d4>
    ef78:	vsub.f64	d5, d5, d7
    ef7c:	vcmpe.f64	d6, d5
    ef80:	vmrs	APSR_nzcv, fpscr
    ef84:	bpl.w	ee0a <_dtoa_r+0x3ca>
    ef88:	mov	r8, r0
    ef8a:	subs	r0, #1
    ef8c:	ldrb.w	r3, [r8, #-1]
    ef90:	cmp	r3, #48	; 0x30
    ef92:	beq.n	ef88 <_dtoa_r+0x548>
    ef94:	mov	fp, r2
    ef96:	b.n	efee <_dtoa_r+0x5ae>
    ef98:	vmul.f64	d6, d6, d3
    ef9c:	b.n	ef4c <_dtoa_r+0x50c>
    ef9e:	vldr	d7, [sp, #8]
    efa2:	vmov.f64	d4, #36	; 0x41200000  10.0
    efa6:	ldr.w	r8, [sp, #4]
    efaa:	vdiv.f64	d5, d7, d6
    efae:	vcvt.s32.f64	s10, d5
    efb2:	vmov	r3, s10
    efb6:	adds	r3, #48	; 0x30
    efb8:	strb.w	r3, [r8], #1
    efbc:	ldr	r3, [sp, #4]
    efbe:	sub.w	r3, r8, r3
    efc2:	cmp	r9, r3
    efc4:	vcvt.f64.s32	d3, s10
    efc8:	vfms.f64	d7, d3, d6
    efcc:	bne.n	f036 <_dtoa_r+0x5f6>
    efce:	vadd.f64	d7, d7, d7
    efd2:	vcmpe.f64	d7, d6
    efd6:	vmrs	APSR_nzcv, fpscr
    efda:	bgt.n	f012 <_dtoa_r+0x5d2>
    efdc:	vcmp.f64	d7, d6
    efe0:	vmrs	APSR_nzcv, fpscr
    efe4:	bne.n	efee <_dtoa_r+0x5ae>
    efe6:	vmov	r3, s10
    efea:	lsls	r1, r3, #31
    efec:	bmi.n	f012 <_dtoa_r+0x5d2>
    efee:	mov	r1, r5
    eff0:	mov	r0, r6
    eff2:	bl	fd04 <_Bfree>
    eff6:	movs	r3, #0
    eff8:	ldr	r2, [sp, #48]	; 0x30
    effa:	strb.w	r3, [r8]
    effe:	add.w	r3, fp, #1
    f002:	str	r3, [r2, #0]
    f004:	ldr	r3, [sp, #116]	; 0x74
    f006:	cmp	r3, #0
    f008:	beq.w	eade <_dtoa_r+0x9e>
    f00c:	str.w	r8, [r3]
    f010:	b.n	eade <_dtoa_r+0x9e>
    f012:	mov	r2, fp
    f014:	mov	r3, r8
    f016:	mov	r8, r3
    f018:	ldrb.w	r1, [r3, #-1]!
    f01c:	cmp	r1, #57	; 0x39
    f01e:	bne.n	f02e <_dtoa_r+0x5ee>
    f020:	ldr	r1, [sp, #4]
    f022:	cmp	r1, r3
    f024:	bne.n	f016 <_dtoa_r+0x5d6>
    f026:	ldr	r0, [sp, #4]
    f028:	movs	r1, #48	; 0x30
    f02a:	adds	r2, #1
    f02c:	strb	r1, [r0, #0]
    f02e:	ldrb	r1, [r3, #0]
    f030:	adds	r1, #1
    f032:	strb	r1, [r3, #0]
    f034:	b.n	ef94 <_dtoa_r+0x554>
    f036:	vmul.f64	d7, d7, d4
    f03a:	vcmp.f64	d7, #0.0
    f03e:	vmrs	APSR_nzcv, fpscr
    f042:	bne.n	efaa <_dtoa_r+0x56a>
    f044:	b.n	efee <_dtoa_r+0x5ae>
    f046:	nop
    f048:	.word	0x20000328
    f04c:	.word	0x20000300
    f050:	ldr	r1, [sp, #28]
    f052:	cmp	r1, #0
    f054:	beq.w	f1f8 <_dtoa_r+0x7b8>
    f058:	ldr	r1, [sp, #24]
    f05a:	cmp	r1, #1
    f05c:	bgt.w	f1c8 <_dtoa_r+0x788>
    f060:	ldr	r1, [sp, #36]	; 0x24
    f062:	cmp	r1, #0
    f064:	beq.w	f1c0 <_dtoa_r+0x780>
    f068:	addw	r2, r2, #1075	; 0x433
    f06c:	ldr.w	r8, [sp, #16]
    f070:	mov	r4, r3
    f072:	str	r3, [sp, #36]	; 0x24
    f074:	ldr	r3, [sp, #16]
    f076:	add	r3, r2
    f078:	str	r3, [sp, #16]
    f07a:	ldr	r3, [sp, #20]
    f07c:	movs	r1, #1
    f07e:	add	r3, r2
    f080:	mov	r0, r6
    f082:	str	r3, [sp, #20]
    f084:	bl	ff04 <__i2b>
    f088:	ldr	r3, [sp, #36]	; 0x24
    f08a:	mov	r7, r0
    f08c:	cmp.w	r8, #0
    f090:	beq.n	f0ae <_dtoa_r+0x66e>
    f092:	ldr	r2, [sp, #20]
    f094:	cmp	r2, #0
    f096:	ble.n	f0ae <_dtoa_r+0x66e>
    f098:	cmp	r2, r8
    f09a:	ldr	r1, [sp, #16]
    f09c:	it	ge
    f09e:	movge	r2, r8
    f0a0:	subs	r1, r1, r2
    f0a2:	str	r1, [sp, #16]
    f0a4:	ldr	r1, [sp, #20]
    f0a6:	sub.w	r8, r8, r2
    f0aa:	subs	r2, r1, r2
    f0ac:	str	r2, [sp, #20]
    f0ae:	cbz	r3, f0f2 <_dtoa_r+0x6b2>
    f0b0:	ldr	r2, [sp, #28]
    f0b2:	cmp	r2, #0
    f0b4:	beq.w	f202 <_dtoa_r+0x7c2>
    f0b8:	cmp	r4, #0
    f0ba:	ble.n	f0e4 <_dtoa_r+0x6a4>
    f0bc:	mov	r1, r7
    f0be:	mov	r2, r4
    f0c0:	mov	r0, r6
    f0c2:	str	r3, [sp, #52]	; 0x34
    f0c4:	bl	10084 <__pow5mult>
    f0c8:	mov	r2, r5
    f0ca:	mov	r1, r0
    f0cc:	mov	r7, r0
    f0ce:	mov	r0, r6
    f0d0:	bl	ff30 <__multiply>
    f0d4:	mov	r1, r5
    f0d6:	str	r0, [sp, #36]	; 0x24
    f0d8:	mov	r0, r6
    f0da:	bl	fd04 <_Bfree>
    f0de:	ldr	r2, [sp, #36]	; 0x24
    f0e0:	ldr	r3, [sp, #52]	; 0x34
    f0e2:	mov	r5, r2
    f0e4:	subs	r2, r3, r4
    f0e6:	beq.n	f0f2 <_dtoa_r+0x6b2>
    f0e8:	mov	r1, r5
    f0ea:	mov	r0, r6
    f0ec:	bl	10084 <__pow5mult>
    f0f0:	mov	r5, r0
    f0f2:	movs	r1, #1
    f0f4:	mov	r0, r6
    f0f6:	bl	ff04 <__i2b>
    f0fa:	ldr	r3, [sp, #40]	; 0x28
    f0fc:	cmp	r3, #0
    f0fe:	mov	r4, r0
    f100:	ble.w	f206 <_dtoa_r+0x7c6>
    f104:	mov	r2, r3
    f106:	mov	r1, r0
    f108:	mov	r0, r6
    f10a:	bl	10084 <__pow5mult>
    f10e:	ldr	r3, [sp, #24]
    f110:	cmp	r3, #1
    f112:	mov	r4, r0
    f114:	ble.n	f20c <_dtoa_r+0x7cc>
    f116:	movs	r3, #0
    f118:	str	r3, [sp, #36]	; 0x24
    f11a:	ldr	r2, [r4, #16]
    f11c:	add.w	r2, r4, r2, lsl #2
    f120:	ldr	r0, [r2, #16]
    f122:	bl	fe68 <__hi0bits>
    f126:	rsb	r0, r0, #32
    f12a:	ldr	r3, [sp, #20]
    f12c:	add	r0, r3
    f12e:	ands.w	r0, r0, #31
    f132:	beq.w	f25c <_dtoa_r+0x81c>
    f136:	rsb	r2, r0, #32
    f13a:	cmp	r2, #4
    f13c:	ble.w	f24a <_dtoa_r+0x80a>
    f140:	ldr	r3, [sp, #16]
    f142:	rsb	r0, r0, #28
    f146:	add	r3, r0
    f148:	str	r3, [sp, #16]
    f14a:	ldr	r3, [sp, #20]
    f14c:	add	r8, r0
    f14e:	add	r3, r0
    f150:	str	r3, [sp, #20]
    f152:	ldr	r3, [sp, #16]
    f154:	cmp	r3, #0
    f156:	ble.n	f164 <_dtoa_r+0x724>
    f158:	mov	r1, r5
    f15a:	mov	r2, r3
    f15c:	mov	r0, r6
    f15e:	bl	10138 <__lshift>
    f162:	mov	r5, r0
    f164:	ldr	r3, [sp, #20]
    f166:	cmp	r3, #0
    f168:	ble.n	f176 <_dtoa_r+0x736>
    f16a:	mov	r1, r4
    f16c:	mov	r2, r3
    f16e:	mov	r0, r6
    f170:	bl	10138 <__lshift>
    f174:	mov	r4, r0
    f176:	ldr	r3, [sp, #44]	; 0x2c
    f178:	cmp	r3, #0
    f17a:	beq.n	f260 <_dtoa_r+0x820>
    f17c:	mov	r1, r4
    f17e:	mov	r0, r5
    f180:	bl	10210 <__mcmp>
    f184:	cmp	r0, #0
    f186:	bge.n	f260 <_dtoa_r+0x820>
    f188:	movs	r3, #0
    f18a:	mov	r1, r5
    f18c:	movs	r2, #10
    f18e:	mov	r0, r6
    f190:	bl	fd48 <__multadd>
    f194:	ldr	r3, [sp, #28]
    f196:	add.w	fp, fp, #4294967295
    f19a:	mov	r5, r0
    f19c:	cmp	r3, #0
    f19e:	beq.w	f4d0 <_dtoa_r+0xa90>
    f1a2:	mov	r1, r7
    f1a4:	movs	r3, #0
    f1a6:	movs	r2, #10
    f1a8:	mov	r0, r6
    f1aa:	bl	fd48 <__multadd>
    f1ae:	cmp.w	sl, #0
    f1b2:	mov	r7, r0
    f1b4:	bgt.w	f2de <_dtoa_r+0x89e>
    f1b8:	ldr	r3, [sp, #24]
    f1ba:	cmp	r3, #2
    f1bc:	bgt.n	f26e <_dtoa_r+0x82e>
    f1be:	b.n	f2de <_dtoa_r+0x89e>
    f1c0:	ldr	r2, [sp, #56]	; 0x38
    f1c2:	rsb	r2, r2, #54	; 0x36
    f1c6:	b.n	f06c <_dtoa_r+0x62c>
    f1c8:	add.w	r4, r9, #4294967295
    f1cc:	cmp	r3, r4
    f1ce:	itttt	lt
    f1d0:	sublt	r2, r4, r3
    f1d2:	ldrlt	r3, [sp, #40]	; 0x28
    f1d4:	addlt	r3, r3, r2
    f1d6:	strlt	r3, [sp, #40]	; 0x28
    f1d8:	itee	ge
    f1da:	subge	r4, r3, r4
    f1dc:	movlt	r3, r4
    f1de:	movlt	r4, #0
    f1e0:	cmp.w	r9, #0
    f1e4:	itete	lt
    f1e6:	ldrlt	r2, [sp, #16]
    f1e8:	ldrge.w	r8, [sp, #16]
    f1ec:	sublt.w	r8, r2, r9
    f1f0:	movge	r2, r9
    f1f2:	it	lt
    f1f4:	movlt	r2, #0
    f1f6:	b.n	f072 <_dtoa_r+0x632>
    f1f8:	ldr.w	r8, [sp, #16]
    f1fc:	ldr	r7, [sp, #28]
    f1fe:	mov	r4, r3
    f200:	b.n	f08c <_dtoa_r+0x64c>
    f202:	mov	r2, r3
    f204:	b.n	f0e8 <_dtoa_r+0x6a8>
    f206:	ldr	r3, [sp, #24]
    f208:	cmp	r3, #1
    f20a:	bgt.n	f23e <_dtoa_r+0x7fe>
    f20c:	ldr	r3, [sp, #8]
    f20e:	cbnz	r3, f23e <_dtoa_r+0x7fe>
    f210:	ldr	r3, [sp, #12]
    f212:	ubfx	r2, r3, #0, #20
    f216:	cbnz	r2, f242 <_dtoa_r+0x802>
    f218:	bic.w	r2, r3, #2147483648	; 0x80000000
    f21c:	lsrs	r2, r2, #20
    f21e:	lsls	r2, r2, #20
    f220:	cbz	r2, f246 <_dtoa_r+0x806>
    f222:	ldr	r3, [sp, #16]
    f224:	adds	r3, #1
    f226:	str	r3, [sp, #16]
    f228:	ldr	r3, [sp, #20]
    f22a:	adds	r3, #1
    f22c:	str	r3, [sp, #20]
    f22e:	movs	r3, #1
    f230:	str	r3, [sp, #36]	; 0x24
    f232:	ldr	r3, [sp, #40]	; 0x28
    f234:	cmp	r3, #0
    f236:	bne.w	f11a <_dtoa_r+0x6da>
    f23a:	movs	r0, #1
    f23c:	b.n	f12a <_dtoa_r+0x6ea>
    f23e:	movs	r3, #0
    f240:	b.n	f230 <_dtoa_r+0x7f0>
    f242:	ldr	r3, [sp, #8]
    f244:	b.n	f230 <_dtoa_r+0x7f0>
    f246:	str	r2, [sp, #36]	; 0x24
    f248:	b.n	f232 <_dtoa_r+0x7f2>
    f24a:	beq.n	f152 <_dtoa_r+0x712>
    f24c:	ldr	r3, [sp, #16]
    f24e:	adds	r2, #28
    f250:	add	r3, r2
    f252:	str	r3, [sp, #16]
    f254:	ldr	r3, [sp, #20]
    f256:	add	r8, r2
    f258:	add	r3, r2
    f25a:	b.n	f150 <_dtoa_r+0x710>
    f25c:	mov	r2, r0
    f25e:	b.n	f24c <_dtoa_r+0x80c>
    f260:	cmp.w	r9, #0
    f264:	bgt.n	f2d4 <_dtoa_r+0x894>
    f266:	ldr	r3, [sp, #24]
    f268:	cmp	r3, #2
    f26a:	ble.n	f2d4 <_dtoa_r+0x894>
    f26c:	mov	sl, r9
    f26e:	cmp.w	sl, #0
    f272:	bne.n	f290 <_dtoa_r+0x850>
    f274:	mov	r1, r4
    f276:	mov	r3, sl
    f278:	movs	r2, #5
    f27a:	mov	r0, r6
    f27c:	bl	fd48 <__multadd>
    f280:	mov	r1, r0
    f282:	mov	r4, r0
    f284:	mov	r0, r5
    f286:	bl	10210 <__mcmp>
    f28a:	cmp	r0, #0
    f28c:	bgt.w	ee58 <_dtoa_r+0x418>
    f290:	ldr	r3, [sp, #32]
    f292:	ldr.w	r8, [sp, #4]
    f296:	mvn.w	fp, r3
    f29a:	mov.w	r9, #0
    f29e:	mov	r1, r4
    f2a0:	mov	r0, r6
    f2a2:	bl	fd04 <_Bfree>
    f2a6:	cmp	r7, #0
    f2a8:	beq.w	efee <_dtoa_r+0x5ae>
    f2ac:	cmp.w	r9, #0
    f2b0:	beq.n	f2be <_dtoa_r+0x87e>
    f2b2:	cmp	r9, r7
    f2b4:	beq.n	f2be <_dtoa_r+0x87e>
    f2b6:	mov	r1, r9
    f2b8:	mov	r0, r6
    f2ba:	bl	fd04 <_Bfree>
    f2be:	mov	r1, r7
    f2c0:	mov	r0, r6
    f2c2:	bl	fd04 <_Bfree>
    f2c6:	b.n	efee <_dtoa_r+0x5ae>
    f2c8:	movs	r4, #0
    f2ca:	mov	r7, r4
    f2cc:	b.n	f290 <_dtoa_r+0x850>
    f2ce:	mov	fp, r2
    f2d0:	mov	r7, r4
    f2d2:	b.n	ee58 <_dtoa_r+0x418>
    f2d4:	ldr	r3, [sp, #28]
    f2d6:	mov	sl, r9
    f2d8:	cmp	r3, #0
    f2da:	beq.w	f4de <_dtoa_r+0xa9e>
    f2de:	cmp.w	r8, #0
    f2e2:	ble.n	f2f0 <_dtoa_r+0x8b0>
    f2e4:	mov	r1, r7
    f2e6:	mov	r2, r8
    f2e8:	mov	r0, r6
    f2ea:	bl	10138 <__lshift>
    f2ee:	mov	r7, r0
    f2f0:	ldr	r3, [sp, #36]	; 0x24
    f2f2:	cmp	r3, #0
    f2f4:	beq.n	f3b2 <_dtoa_r+0x972>
    f2f6:	ldr	r1, [r7, #4]
    f2f8:	mov	r0, r6
    f2fa:	bl	fc84 <_Balloc>
    f2fe:	mov	r8, r0
    f300:	cbnz	r0, f30e <_dtoa_r+0x8ce>
    f302:	ldr	r3, [pc, #520]	; (f50c <_dtoa_r+0xacc>)
    f304:	mov	r2, r0
    f306:	movw	r1, #751	; 0x2ef
    f30a:	b.w	ea70 <_dtoa_r+0x30>
    f30e:	ldr	r2, [r7, #16]
    f310:	adds	r2, #2
    f312:	lsls	r2, r2, #2
    f314:	add.w	r1, r7, #12
    f318:	adds	r0, #12
    f31a:	bl	9dd0 <memcpy>
    f31e:	movs	r2, #1
    f320:	mov	r1, r8
    f322:	mov	r0, r6
    f324:	bl	10138 <__lshift>
    f328:	ldr	r3, [sp, #4]
    f32a:	adds	r3, #1
    f32c:	str	r3, [sp, #16]
    f32e:	ldr	r3, [sp, #4]
    f330:	add	r3, sl
    f332:	str	r3, [sp, #32]
    f334:	ldr	r3, [sp, #8]
    f336:	and.w	r3, r3, #1
    f33a:	mov	r9, r7
    f33c:	str	r3, [sp, #28]
    f33e:	mov	r7, r0
    f340:	ldr	r3, [sp, #16]
    f342:	mov	r1, r4
    f344:	subs	r3, #1
    f346:	mov	r0, r5
    f348:	str	r3, [sp, #8]
    f34a:	bl	e92c <quorem>
    f34e:	mov	r3, r0
    f350:	adds	r3, #48	; 0x30
    f352:	str	r0, [sp, #20]
    f354:	mov	r1, r9
    f356:	mov	r0, r5
    f358:	str	r3, [sp, #36]	; 0x24
    f35a:	bl	10210 <__mcmp>
    f35e:	mov	r2, r7
    f360:	mov	sl, r0
    f362:	mov	r1, r4
    f364:	mov	r0, r6
    f366:	bl	10248 <__mdiff>
    f36a:	ldr	r2, [r0, #12]
    f36c:	ldr	r3, [sp, #36]	; 0x24
    f36e:	mov	r8, r0
    f370:	cbnz	r2, f3b6 <_dtoa_r+0x976>
    f372:	mov	r1, r0
    f374:	mov	r0, r5
    f376:	bl	10210 <__mcmp>
    f37a:	ldr	r3, [sp, #36]	; 0x24
    f37c:	mov	r2, r0
    f37e:	mov	r1, r8
    f380:	mov	r0, r6
    f382:	strd	r3, r2, [sp, #36]	; 0x24
    f386:	bl	fd04 <_Bfree>
    f38a:	ldr	r3, [sp, #24]
    f38c:	ldr	r2, [sp, #40]	; 0x28
    f38e:	ldr.w	r8, [sp, #16]
    f392:	orr.w	r1, r3, r2
    f396:	ldr	r3, [sp, #28]
    f398:	orrs	r1, r3
    f39a:	ldr	r3, [sp, #36]	; 0x24
    f39c:	bne.n	f3ba <_dtoa_r+0x97a>
    f39e:	cmp	r3, #57	; 0x39
    f3a0:	beq.n	f3f6 <_dtoa_r+0x9b6>
    f3a2:	cmp.w	sl, #0
    f3a6:	ble.n	f3ac <_dtoa_r+0x96c>
    f3a8:	ldr	r3, [sp, #20]
    f3aa:	adds	r3, #49	; 0x31
    f3ac:	ldr	r2, [sp, #8]
    f3ae:	strb	r3, [r2, #0]
    f3b0:	b.n	f29e <_dtoa_r+0x85e>
    f3b2:	mov	r0, r7
    f3b4:	b.n	f328 <_dtoa_r+0x8e8>
    f3b6:	movs	r2, #1
    f3b8:	b.n	f37e <_dtoa_r+0x93e>
    f3ba:	cmp.w	sl, #0
    f3be:	blt.n	f3ce <_dtoa_r+0x98e>
    f3c0:	ldr	r1, [sp, #24]
    f3c2:	orr.w	sl, r1, sl
    f3c6:	ldr	r1, [sp, #28]
    f3c8:	orrs.w	sl, sl, r1
    f3cc:	bne.n	f410 <_dtoa_r+0x9d0>
    f3ce:	cmp	r2, #0
    f3d0:	ble.n	f3ac <_dtoa_r+0x96c>
    f3d2:	mov	r1, r5
    f3d4:	movs	r2, #1
    f3d6:	mov	r0, r6
    f3d8:	str	r3, [sp, #16]
    f3da:	bl	10138 <__lshift>
    f3de:	mov	r1, r4
    f3e0:	mov	r5, r0
    f3e2:	bl	10210 <__mcmp>
    f3e6:	cmp	r0, #0
    f3e8:	ldr	r3, [sp, #16]
    f3ea:	bgt.n	f3f2 <_dtoa_r+0x9b2>
    f3ec:	bne.n	f3ac <_dtoa_r+0x96c>
    f3ee:	lsls	r2, r3, #31
    f3f0:	bpl.n	f3ac <_dtoa_r+0x96c>
    f3f2:	cmp	r3, #57	; 0x39
    f3f4:	bne.n	f3a8 <_dtoa_r+0x968>
    f3f6:	ldr	r2, [sp, #8]
    f3f8:	movs	r3, #57	; 0x39
    f3fa:	strb	r3, [r2, #0]
    f3fc:	mov	r3, r8
    f3fe:	mov	r8, r3
    f400:	subs	r3, #1
    f402:	ldrb.w	r2, [r8, #-1]
    f406:	cmp	r2, #57	; 0x39
    f408:	beq.n	f4ae <_dtoa_r+0xa6e>
    f40a:	adds	r2, #1
    f40c:	strb	r2, [r3, #0]
    f40e:	b.n	f29e <_dtoa_r+0x85e>
    f410:	cmp	r2, #0
    f412:	ble.n	f41c <_dtoa_r+0x9dc>
    f414:	cmp	r3, #57	; 0x39
    f416:	beq.n	f3f6 <_dtoa_r+0x9b6>
    f418:	adds	r3, #1
    f41a:	b.n	f3ac <_dtoa_r+0x96c>
    f41c:	ldr	r2, [sp, #16]
    f41e:	ldr	r1, [sp, #32]
    f420:	strb.w	r3, [r2, #-1]
    f424:	cmp	r2, r1
    f426:	beq.n	f480 <_dtoa_r+0xa40>
    f428:	mov	r1, r5
    f42a:	movs	r3, #0
    f42c:	movs	r2, #10
    f42e:	mov	r0, r6
    f430:	bl	fd48 <__multadd>
    f434:	cmp	r9, r7
    f436:	mov	r5, r0
    f438:	mov.w	r3, #0
    f43c:	mov.w	r2, #10
    f440:	mov	r1, r9
    f442:	mov	r0, r6
    f444:	bne.n	f456 <_dtoa_r+0xa16>
    f446:	bl	fd48 <__multadd>
    f44a:	mov	r9, r0
    f44c:	mov	r7, r0
    f44e:	ldr	r3, [sp, #16]
    f450:	adds	r3, #1
    f452:	str	r3, [sp, #16]
    f454:	b.n	f340 <_dtoa_r+0x900>
    f456:	bl	fd48 <__multadd>
    f45a:	mov	r1, r7
    f45c:	mov	r9, r0
    f45e:	movs	r3, #0
    f460:	movs	r2, #10
    f462:	mov	r0, r6
    f464:	bl	fd48 <__multadd>
    f468:	mov	r7, r0
    f46a:	b.n	f44e <_dtoa_r+0xa0e>
    f46c:	cmp.w	sl, #0
    f470:	ldr	r2, [sp, #4]
    f472:	ite	gt
    f474:	movgt	r8, sl
    f476:	movle.w	r8, #1
    f47a:	add	r8, r2
    f47c:	mov.w	r9, #0
    f480:	mov	r1, r5
    f482:	movs	r2, #1
    f484:	mov	r0, r6
    f486:	str	r3, [sp, #8]
    f488:	bl	10138 <__lshift>
    f48c:	mov	r1, r4
    f48e:	mov	r5, r0
    f490:	bl	10210 <__mcmp>
    f494:	cmp	r0, #0
    f496:	bgt.n	f3fc <_dtoa_r+0x9bc>
    f498:	bne.n	f4a0 <_dtoa_r+0xa60>
    f49a:	ldr	r3, [sp, #8]
    f49c:	lsls	r3, r3, #31
    f49e:	bmi.n	f3fc <_dtoa_r+0x9bc>
    f4a0:	mov	r3, r8
    f4a2:	mov	r8, r3
    f4a4:	ldrb.w	r2, [r3, #-1]!
    f4a8:	cmp	r2, #48	; 0x30
    f4aa:	beq.n	f4a2 <_dtoa_r+0xa62>
    f4ac:	b.n	f29e <_dtoa_r+0x85e>
    f4ae:	ldr	r2, [sp, #4]
    f4b0:	cmp	r2, r3
    f4b2:	bne.n	f3fe <_dtoa_r+0x9be>
    f4b4:	add.w	fp, fp, #1
    f4b8:	movs	r3, #49	; 0x31
    f4ba:	b.n	f3ae <_dtoa_r+0x96e>
    f4bc:	ldr	r3, [pc, #80]	; (f510 <_dtoa_r+0xad0>)
    f4be:	b.w	eb16 <_dtoa_r+0xd6>
    f4c2:	ldr	r3, [sp, #116]	; 0x74
    f4c4:	cmp	r3, #0
    f4c6:	bne.w	ead4 <_dtoa_r+0x94>
    f4ca:	ldr	r3, [pc, #72]	; (f514 <_dtoa_r+0xad4>)
    f4cc:	b.w	eb16 <_dtoa_r+0xd6>
    f4d0:	cmp.w	sl, #0
    f4d4:	bgt.n	f4de <_dtoa_r+0xa9e>
    f4d6:	ldr	r3, [sp, #24]
    f4d8:	cmp	r3, #2
    f4da:	bgt.w	f26e <_dtoa_r+0x82e>
    f4de:	ldr.w	r8, [sp, #4]
    f4e2:	mov	r1, r4
    f4e4:	mov	r0, r5
    f4e6:	bl	e92c <quorem>
    f4ea:	add.w	r3, r0, #48	; 0x30
    f4ee:	strb.w	r3, [r8], #1
    f4f2:	ldr	r2, [sp, #4]
    f4f4:	sub.w	r2, r8, r2
    f4f8:	cmp	sl, r2
    f4fa:	ble.n	f46c <_dtoa_r+0xa2c>
    f4fc:	mov	r1, r5
    f4fe:	movs	r3, #0
    f500:	movs	r2, #10
    f502:	mov	r0, r6
    f504:	bl	fd48 <__multadd>
    f508:	mov	r5, r0
    f50a:	b.n	f4e2 <_dtoa_r+0xaa2>
    f50c:	.word	0x20001383
    f510:	.word	0x20001141
    f514:	.word	0x20001306

0000f518 <_free_r>:
    f518:	push	{r0, r1, r2, r4, r5, lr}
    f51a:	cmp	r1, #0
    f51c:	beq.n	f5a8 <_free_r+0x90>
    f51e:	ldr.w	r3, [r1, #-4]
    f522:	str	r0, [sp, #4]
    f524:	cmp	r3, #0
    f526:	sub.w	r4, r1, #4
    f52a:	it	lt
    f52c:	addlt	r4, r4, r3
    f52e:	bl	c8d4 <__malloc_lock>
    f532:	ldr	r2, [pc, #120]	; (f5ac <_free_r+0x94>)
    f534:	ldr	r0, [sp, #4]
    f536:	ldr	r3, [r2, #0]
    f538:	cbnz	r3, f548 <_free_r+0x30>
    f53a:	str	r3, [r4, #4]
    f53c:	str	r4, [r2, #0]
    f53e:	add	sp, #12
    f540:	ldmia.w	sp!, {r4, r5, lr}
    f544:	b.w	c8e0 <__malloc_unlock>
    f548:	cmp	r3, r4
    f54a:	bls.n	f55e <_free_r+0x46>
    f54c:	ldr	r5, [r4, #0]
    f54e:	adds	r1, r4, r5
    f550:	cmp	r3, r1
    f552:	itttt	eq
    f554:	ldreq	r1, [r3, #0]
    f556:	ldreq	r3, [r3, #4]
    f558:	addeq	r1, r1, r5
    f55a:	streq	r1, [r4, #0]
    f55c:	b.n	f53a <_free_r+0x22>
    f55e:	mov	r2, r3
    f560:	ldr	r3, [r3, #4]
    f562:	cbz	r3, f568 <_free_r+0x50>
    f564:	cmp	r3, r4
    f566:	bls.n	f55e <_free_r+0x46>
    f568:	ldr	r1, [r2, #0]
    f56a:	adds	r5, r2, r1
    f56c:	cmp	r5, r4
    f56e:	bne.n	f588 <_free_r+0x70>
    f570:	ldr	r4, [r4, #0]
    f572:	add	r1, r4
    f574:	adds	r4, r2, r1
    f576:	cmp	r3, r4
    f578:	str	r1, [r2, #0]
    f57a:	bne.n	f53e <_free_r+0x26>
    f57c:	ldr	r4, [r3, #0]
    f57e:	ldr	r3, [r3, #4]
    f580:	str	r3, [r2, #4]
    f582:	add	r4, r1
    f584:	str	r4, [r2, #0]
    f586:	b.n	f53e <_free_r+0x26>
    f588:	bls.n	f590 <_free_r+0x78>
    f58a:	movs	r3, #12
    f58c:	str	r3, [r0, #0]
    f58e:	b.n	f53e <_free_r+0x26>
    f590:	ldr	r5, [r4, #0]
    f592:	adds	r1, r4, r5
    f594:	cmp	r3, r1
    f596:	itt	eq
    f598:	ldreq	r1, [r3, #0]
    f59a:	ldreq	r3, [r3, #4]
    f59c:	str	r3, [r4, #4]
    f59e:	itt	eq
    f5a0:	addeq	r1, r1, r5
    f5a2:	streq	r1, [r4, #0]
    f5a4:	str	r4, [r2, #4]
    f5a6:	b.n	f53e <_free_r+0x26>
    f5a8:	add	sp, #12
    f5aa:	pop	{r4, r5, pc}
    f5ac:	.word	0x20020854

0000f5b0 <rshift>:
    f5b0:	ldr	r3, [r0, #16]
    f5b2:	cmp.w	r3, r1, asr #5
    f5b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f5ba:	mov.w	r2, r1, asr #5
    f5be:	add.w	r4, r0, #20
    f5c2:	ble.n	f650 <rshift+0xa0>
    f5c4:	ands.w	r1, r1, #31
    f5c8:	add.w	r6, r4, r3, lsl #2
    f5cc:	add.w	r5, r4, r2, lsl #2
    f5d0:	bne.n	f5ec <rshift+0x3c>
    f5d2:	add.w	r7, r0, #16
    f5d6:	mov	r1, r5
    f5d8:	cmp	r1, r6
    f5da:	bcc.n	f646 <rshift+0x96>
    f5dc:	subs	r3, r3, r2
    f5de:	lsls	r3, r3, #2
    f5e0:	subs	r2, r5, #3
    f5e2:	cmp	r6, r2
    f5e4:	it	cc
    f5e6:	movcc	r3, #0
    f5e8:	add	r3, r4
    f5ea:	b.n	f618 <rshift+0x68>
    f5ec:	ldr.w	r7, [r4, r2, lsl #2]
    f5f0:	rsb	r8, r1, #32
    f5f4:	lsrs	r7, r1
    f5f6:	add.w	lr, r5, #4
    f5fa:	mov	r9, r4
    f5fc:	cmp	r6, lr
    f5fe:	mov	ip, lr
    f600:	bhi.n	f62e <rshift+0x7e>
    f602:	subs	r2, r3, r2
    f604:	lsls	r2, r2, #2
    f606:	subs	r2, #4
    f608:	adds	r5, #1
    f60a:	cmp	r6, r5
    f60c:	it	cc
    f60e:	movcc	r2, #0
    f610:	adds	r3, r4, r2
    f612:	str	r7, [r4, r2]
    f614:	cbz	r7, f618 <rshift+0x68>
    f616:	adds	r3, #4
    f618:	subs	r2, r3, r4
    f61a:	cmp	r3, r4
    f61c:	mov.w	r2, r2, asr #2
    f620:	it	eq
    f622:	moveq	r3, #0
    f624:	str	r2, [r0, #16]
    f626:	it	eq
    f628:	streq	r3, [r0, #20]
    f62a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f62e:	ldr.w	ip, [ip]
    f632:	lsl.w	ip, ip, r8
    f636:	orr.w	r7, ip, r7
    f63a:	str.w	r7, [r9], #4
    f63e:	ldr.w	r7, [lr], #4
    f642:	lsrs	r7, r1
    f644:	b.n	f5fc <rshift+0x4c>
    f646:	ldr.w	ip, [r1], #4
    f64a:	str.w	ip, [r7, #4]!
    f64e:	b.n	f5d8 <rshift+0x28>
    f650:	mov	r3, r4
    f652:	b.n	f618 <rshift+0x68>

0000f654 <__hexdig_fun>:
    f654:	sub.w	r3, r0, #48	; 0x30
    f658:	cmp	r3, #9
    f65a:	bhi.n	f662 <__hexdig_fun+0xe>
    f65c:	subs	r0, #32
    f65e:	uxtb	r0, r0
    f660:	bx	lr
    f662:	sub.w	r3, r0, #97	; 0x61
    f666:	cmp	r3, #5
    f668:	bhi.n	f66e <__hexdig_fun+0x1a>
    f66a:	subs	r0, #71	; 0x47
    f66c:	b.n	f65e <__hexdig_fun+0xa>
    f66e:	sub.w	r3, r0, #65	; 0x41
    f672:	cmp	r3, #5
    f674:	bhi.n	f67a <__hexdig_fun+0x26>
    f676:	subs	r0, #39	; 0x27
    f678:	b.n	f65e <__hexdig_fun+0xa>
    f67a:	movs	r0, #0
    f67c:	bx	lr
	...

0000f680 <__gethex>:
    f680:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f684:	mov	r7, r2
    f686:	ldr	r2, [r1, #0]
    f688:	sub	sp, #20
    f68a:	add.w	fp, r2, #2
    f68e:	rsb	r2, r2, #4278255360	; 0xff00ff00
    f692:	add.w	r2, r2, #16711680	; 0xff0000
    f696:	mov	r9, r0
    f698:	mov	sl, r1
    f69a:	str	r3, [sp, #8]
    f69c:	adds	r2, #254	; 0xfe
    f69e:	add.w	r3, r2, fp
    f6a2:	mov	r8, fp
    f6a4:	ldrb.w	r0, [fp], #1
    f6a8:	str	r3, [sp, #4]
    f6aa:	cmp	r0, #48	; 0x30
    f6ac:	beq.n	f69e <__gethex+0x1e>
    f6ae:	bl	f654 <__hexdig_fun>
    f6b2:	mov	r4, r0
    f6b4:	cmp	r0, #0
    f6b6:	bne.n	f72a <__gethex+0xaa>
    f6b8:	ldr	r1, [pc, #668]	; (f958 <__gethex+0x2d8>)
    f6ba:	movs	r2, #1
    f6bc:	mov	r0, r8
    f6be:	bl	e71c <strncmp>
    f6c2:	mov	r6, r0
    f6c4:	cmp	r0, #0
    f6c6:	bne.n	f79c <__gethex+0x11c>
    f6c8:	ldrb.w	r0, [r8, #1]
    f6cc:	mov	r5, fp
    f6ce:	bl	f654 <__hexdig_fun>
    f6d2:	cmp	r0, #0
    f6d4:	beq.n	f7a0 <__gethex+0x120>
    f6d6:	mov	r2, fp
    f6d8:	ldrb	r0, [r2, #0]
    f6da:	cmp	r0, #48	; 0x30
    f6dc:	mov	r8, r2
    f6de:	add.w	r2, r2, #1
    f6e2:	beq.n	f6d8 <__gethex+0x58>
    f6e4:	bl	f654 <__hexdig_fun>
    f6e8:	movs	r3, #1
    f6ea:	clz	r4, r0
    f6ee:	lsrs	r4, r4, #5
    f6f0:	mov	r6, fp
    f6f2:	str	r3, [sp, #4]
    f6f4:	mov	r2, r8
    f6f6:	mov	r5, r2
    f6f8:	adds	r2, #1
    f6fa:	ldrb	r0, [r5, #0]
    f6fc:	bl	f654 <__hexdig_fun>
    f700:	cmp	r0, #0
    f702:	bne.n	f6f6 <__gethex+0x76>
    f704:	ldr	r1, [pc, #592]	; (f958 <__gethex+0x2d8>)
    f706:	movs	r2, #1
    f708:	mov	r0, r5
    f70a:	bl	e71c <strncmp>
    f70e:	cbnz	r0, f730 <__gethex+0xb0>
    f710:	cbnz	r6, f724 <__gethex+0xa4>
    f712:	adds	r6, r5, #1
    f714:	mov	r2, r6
    f716:	mov	r5, r2
    f718:	adds	r2, #1
    f71a:	ldrb	r0, [r5, #0]
    f71c:	bl	f654 <__hexdig_fun>
    f720:	cmp	r0, #0
    f722:	bne.n	f716 <__gethex+0x96>
    f724:	subs	r3, r6, r5
    f726:	lsls	r6, r3, #2
    f728:	b.n	f734 <__gethex+0xb4>
    f72a:	movs	r4, #0
    f72c:	mov	r6, r4
    f72e:	b.n	f6f4 <__gethex+0x74>
    f730:	cmp	r6, #0
    f732:	bne.n	f724 <__gethex+0xa4>
    f734:	ldrb	r3, [r5, #0]
    f736:	and.w	r3, r3, #223	; 0xdf
    f73a:	cmp	r3, #80	; 0x50
    f73c:	bne.n	f7ba <__gethex+0x13a>
    f73e:	ldrb	r3, [r5, #1]
    f740:	cmp	r3, #43	; 0x2b
    f742:	beq.n	f7a4 <__gethex+0x124>
    f744:	cmp	r3, #45	; 0x2d
    f746:	beq.n	f7ac <__gethex+0x12c>
    f748:	adds	r1, r5, #1
    f74a:	mov.w	fp, #0
    f74e:	ldrb	r0, [r1, #0]
    f750:	bl	f654 <__hexdig_fun>
    f754:	subs	r2, r0, #1
    f756:	uxtb	r2, r2
    f758:	cmp	r2, #24
    f75a:	bhi.n	f7ba <__gethex+0x13a>
    f75c:	sub.w	r2, r0, #16
    f760:	ldrb.w	r0, [r1, #1]!
    f764:	bl	f654 <__hexdig_fun>
    f768:	add.w	ip, r0, #4294967295
    f76c:	uxtb.w	ip, ip
    f770:	cmp.w	ip, #24
    f774:	bls.n	f7b2 <__gethex+0x132>
    f776:	cmp.w	fp, #0
    f77a:	beq.n	f77e <__gethex+0xfe>
    f77c:	negs	r2, r2
    f77e:	add	r6, r2
    f780:	str.w	r1, [sl]
    f784:	cbz	r4, f7be <__gethex+0x13e>
    f786:	ldr	r3, [sp, #4]
    f788:	cmp	r3, #0
    f78a:	ite	ne
    f78c:	movne.w	r8, #0
    f790:	moveq.w	r8, #6
    f794:	mov	r0, r8
    f796:	add	sp, #20
    f798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f79c:	mov	r5, r8
    f79e:	mov	r6, r4
    f7a0:	movs	r4, #1
    f7a2:	b.n	f734 <__gethex+0xb4>
    f7a4:	mov.w	fp, #0
    f7a8:	adds	r1, r5, #2
    f7aa:	b.n	f74e <__gethex+0xce>
    f7ac:	mov.w	fp, #1
    f7b0:	b.n	f7a8 <__gethex+0x128>
    f7b2:	movs	r3, #10
    f7b4:	mla	r0, r3, r2, r0
    f7b8:	b.n	f75c <__gethex+0xdc>
    f7ba:	mov	r1, r5
    f7bc:	b.n	f780 <__gethex+0x100>
    f7be:	sub.w	r3, r5, r8
    f7c2:	subs	r3, #1
    f7c4:	mov	r1, r4
    f7c6:	cmp	r3, #7
    f7c8:	bgt.n	f7e0 <__gethex+0x160>
    f7ca:	mov	r0, r9
    f7cc:	bl	fc84 <_Balloc>
    f7d0:	mov	r4, r0
    f7d2:	cbnz	r0, f7e6 <__gethex+0x166>
    f7d4:	ldr	r3, [pc, #388]	; (f95c <__gethex+0x2dc>)
    f7d6:	mov	r2, r0
    f7d8:	movs	r1, #228	; 0xe4
    f7da:	ldr	r0, [pc, #388]	; (f960 <__gethex+0x2e0>)
    f7dc:	bl	111cc <__assert_func>
    f7e0:	adds	r1, #1
    f7e2:	asrs	r3, r3, #1
    f7e4:	b.n	f7c6 <__gethex+0x146>
    f7e6:	add.w	sl, r0, #20
    f7ea:	movs	r3, #0
    f7ec:	ldr	r1, [pc, #360]	; (f958 <__gethex+0x2d8>)
    f7ee:	str.w	sl, [sp, #4]
    f7f2:	mov	fp, r3
    f7f4:	cmp	r8, r5
    f7f6:	bcc.n	f87e <__gethex+0x1fe>
    f7f8:	ldr	r0, [sp, #4]
    f7fa:	str.w	fp, [r0], #4
    f7fe:	sub.w	r0, r0, sl
    f802:	asrs	r0, r0, #2
    f804:	str	r0, [r4, #16]
    f806:	mov.w	r8, r0, lsl #5
    f80a:	mov	r0, fp
    f80c:	bl	fe68 <__hi0bits>
    f810:	ldr	r5, [r7, #0]
    f812:	sub.w	r0, r8, r0
    f816:	cmp	r0, r5
    f818:	ble.n	f8ce <__gethex+0x24e>
    f81a:	sub.w	r8, r0, r5
    f81e:	mov	r1, r8
    f820:	mov	r0, r4
    f822:	bl	10596 <__any_on>
    f826:	mov	fp, r0
    f828:	cbz	r0, f85a <__gethex+0x1da>
    f82a:	add.w	r3, r8, #4294967295
    f82e:	asrs	r1, r3, #5
    f830:	and.w	r2, r3, #31
    f834:	ldr.w	r1, [sl, r1, lsl #2]
    f838:	mov.w	fp, #1
    f83c:	lsl.w	r2, fp, r2
    f840:	tst	r2, r1
    f842:	beq.n	f85a <__gethex+0x1da>
    f844:	cmp	r3, fp
    f846:	ble.n	f856 <__gethex+0x1d6>
    f848:	sub.w	r1, r8, #2
    f84c:	mov	r0, r4
    f84e:	bl	10596 <__any_on>
    f852:	cmp	r0, #0
    f854:	bne.n	f8c8 <__gethex+0x248>
    f856:	mov.w	fp, #2
    f85a:	mov	r1, r8
    f85c:	mov	r0, r4
    f85e:	bl	f5b0 <rshift>
    f862:	add	r6, r8
    f864:	ldr	r3, [r7, #8]
    f866:	cmp	r3, r6
    f868:	bge.n	f8ee <__gethex+0x26e>
    f86a:	mov	r1, r4
    f86c:	mov	r0, r9
    f86e:	bl	fd04 <_Bfree>
    f872:	ldr	r2, [sp, #56]	; 0x38
    f874:	movs	r3, #0
    f876:	str	r3, [r2, #0]
    f878:	mov.w	r8, #163	; 0xa3
    f87c:	b.n	f794 <__gethex+0x114>
    f87e:	ldrb.w	r2, [r5, #-1]!
    f882:	cmp	r2, #46	; 0x2e
    f884:	beq.n	f8b0 <__gethex+0x230>
    f886:	cmp	r3, #32
    f888:	bne.n	f898 <__gethex+0x218>
    f88a:	ldr	r3, [sp, #4]
    f88c:	str.w	fp, [r3], #4
    f890:	mov.w	fp, #0
    f894:	str	r3, [sp, #4]
    f896:	mov	r3, fp
    f898:	ldrb	r0, [r5, #0]
    f89a:	str	r3, [sp, #12]
    f89c:	bl	f654 <__hexdig_fun>
    f8a0:	ldr	r3, [sp, #12]
    f8a2:	and.w	r0, r0, #15
    f8a6:	lsls	r0, r3
    f8a8:	orr.w	fp, fp, r0
    f8ac:	adds	r3, #4
    f8ae:	b.n	f7f4 <__gethex+0x174>
    f8b0:	cmp	r8, r5
    f8b2:	bhi.n	f886 <__gethex+0x206>
    f8b4:	movs	r2, #1
    f8b6:	mov	r0, r5
    f8b8:	str	r3, [sp, #12]
    f8ba:	bl	e71c <strncmp>
    f8be:	ldr	r1, [pc, #152]	; (f958 <__gethex+0x2d8>)
    f8c0:	ldr	r3, [sp, #12]
    f8c2:	cmp	r0, #0
    f8c4:	bne.n	f886 <__gethex+0x206>
    f8c6:	b.n	f7f4 <__gethex+0x174>
    f8c8:	mov.w	fp, #3
    f8cc:	b.n	f85a <__gethex+0x1da>
    f8ce:	bge.n	f8e8 <__gethex+0x268>
    f8d0:	sub.w	r8, r5, r0
    f8d4:	mov	r1, r4
    f8d6:	mov	r2, r8
    f8d8:	mov	r0, r9
    f8da:	bl	10138 <__lshift>
    f8de:	sub.w	r6, r6, r8
    f8e2:	mov	r4, r0
    f8e4:	add.w	sl, r0, #20
    f8e8:	mov.w	fp, #0
    f8ec:	b.n	f864 <__gethex+0x1e4>
    f8ee:	ldr	r3, [r7, #4]
    f8f0:	cmp	r3, r6
    f8f2:	ble.n	f9dc <__gethex+0x35c>
    f8f4:	subs	r6, r3, r6
    f8f6:	cmp	r5, r6
    f8f8:	bgt.n	f964 <__gethex+0x2e4>
    f8fa:	ldr	r3, [r7, #12]
    f8fc:	cmp	r3, #2
    f8fe:	beq.n	f948 <__gethex+0x2c8>
    f900:	cmp	r3, #3
    f902:	beq.n	f950 <__gethex+0x2d0>
    f904:	cmp	r3, #1
    f906:	bne.n	f934 <__gethex+0x2b4>
    f908:	cmp	r5, r6
    f90a:	bne.n	f934 <__gethex+0x2b4>
    f90c:	cmp	r5, #1
    f90e:	bne.n	f928 <__gethex+0x2a8>
    f910:	ldr	r2, [sp, #8]
    f912:	ldr	r3, [r7, #4]
    f914:	str	r3, [r2, #0]
    f916:	movs	r3, #1
    f918:	str	r3, [r4, #16]
    f91a:	str.w	r3, [sl]
    f91e:	ldr	r3, [sp, #56]	; 0x38
    f920:	mov.w	r8, #98	; 0x62
    f924:	str	r4, [r3, #0]
    f926:	b.n	f794 <__gethex+0x114>
    f928:	subs	r1, r5, #1
    f92a:	mov	r0, r4
    f92c:	bl	10596 <__any_on>
    f930:	cmp	r0, #0
    f932:	bne.n	f910 <__gethex+0x290>
    f934:	mov	r1, r4
    f936:	mov	r0, r9
    f938:	bl	fd04 <_Bfree>
    f93c:	ldr	r2, [sp, #56]	; 0x38
    f93e:	movs	r3, #0
    f940:	str	r3, [r2, #0]
    f942:	mov.w	r8, #80	; 0x50
    f946:	b.n	f794 <__gethex+0x114>
    f948:	ldr	r3, [sp, #60]	; 0x3c
    f94a:	cmp	r3, #0
    f94c:	bne.n	f934 <__gethex+0x2b4>
    f94e:	b.n	f910 <__gethex+0x290>
    f950:	ldr	r3, [sp, #60]	; 0x3c
    f952:	cmp	r3, #0
    f954:	bne.n	f910 <__gethex+0x290>
    f956:	b.n	f934 <__gethex+0x2b4>
    f958:	.word	0x20000d11
    f95c:	.word	0x20001383
    f960:	.word	0x200011a4
    f964:	add.w	r8, r6, #4294967295
    f968:	cmp.w	fp, #0
    f96c:	bne.n	f9d6 <__gethex+0x356>
    f96e:	cmp.w	r8, #0
    f972:	beq.n	f97e <__gethex+0x2fe>
    f974:	mov	r1, r8
    f976:	mov	r0, r4
    f978:	bl	10596 <__any_on>
    f97c:	mov	fp, r0
    f97e:	mov.w	r2, r8, asr #5
    f982:	movs	r3, #1
    f984:	ldr.w	r2, [sl, r2, lsl #2]
    f988:	and.w	r8, r8, #31
    f98c:	lsl.w	r3, r3, r8
    f990:	tst	r3, r2
    f992:	mov	r1, r6
    f994:	mov	r0, r4
    f996:	it	ne
    f998:	orrne.w	fp, fp, #2
    f99c:	subs	r5, r5, r6
    f99e:	bl	f5b0 <rshift>
    f9a2:	ldr	r6, [r7, #4]
    f9a4:	mov.w	r8, #2
    f9a8:	cmp.w	fp, #0
    f9ac:	beq.n	fa44 <__gethex+0x3c4>
    f9ae:	ldr	r3, [r7, #12]
    f9b0:	cmp	r3, #2
    f9b2:	beq.n	f9e2 <__gethex+0x362>
    f9b4:	cmp	r3, #3
    f9b6:	beq.n	f9ea <__gethex+0x36a>
    f9b8:	cmp	r3, #1
    f9ba:	bne.n	f9d0 <__gethex+0x350>
    f9bc:	tst.w	fp, #2
    f9c0:	beq.n	f9d0 <__gethex+0x350>
    f9c2:	ldr.w	r3, [sl]
    f9c6:	orr.w	fp, fp, r3
    f9ca:	tst.w	fp, #1
    f9ce:	bne.n	f9f0 <__gethex+0x370>
    f9d0:	orr.w	r8, r8, #16
    f9d4:	b.n	fa44 <__gethex+0x3c4>
    f9d6:	mov.w	fp, #1
    f9da:	b.n	f97e <__gethex+0x2fe>
    f9dc:	mov.w	r8, #1
    f9e0:	b.n	f9a8 <__gethex+0x328>
    f9e2:	ldr	r3, [sp, #60]	; 0x3c
    f9e4:	rsb	r3, r3, #1
    f9e8:	str	r3, [sp, #60]	; 0x3c
    f9ea:	ldr	r3, [sp, #60]	; 0x3c
    f9ec:	cmp	r3, #0
    f9ee:	beq.n	f9d0 <__gethex+0x350>
    f9f0:	ldr.w	fp, [r4, #16]
    f9f4:	add.w	r2, r4, #20
    f9f8:	mov.w	r3, fp, lsl #2
    f9fc:	str	r3, [sp, #4]
    f9fe:	add.w	r0, r2, fp, lsl #2
    fa02:	movs	r3, #0
    fa04:	mov	ip, r2
    fa06:	ldr.w	r1, [r2], #4
    fa0a:	cmp.w	r1, #4294967295
    fa0e:	beq.n	fa4e <__gethex+0x3ce>
    fa10:	adds	r1, #1
    fa12:	str.w	r1, [ip]
    fa16:	cmp.w	r8, #2
    fa1a:	add.w	r2, r4, #20
    fa1e:	bne.n	fa9c <__gethex+0x41c>
    fa20:	ldr	r3, [r7, #0]
    fa22:	subs	r3, #1
    fa24:	cmp	r3, r5
    fa26:	bne.n	fa40 <__gethex+0x3c0>
    fa28:	asrs	r1, r5, #5
    fa2a:	movs	r3, #1
    fa2c:	and.w	r5, r5, #31
    fa30:	lsl.w	r5, r3, r5
    fa34:	ldr.w	r3, [r2, r1, lsl #2]
    fa38:	tst	r5, r3
    fa3a:	it	ne
    fa3c:	movne.w	r8, #1
    fa40:	orr.w	r8, r8, #32
    fa44:	ldr	r3, [sp, #56]	; 0x38
    fa46:	str	r4, [r3, #0]
    fa48:	ldr	r3, [sp, #8]
    fa4a:	str	r6, [r3, #0]
    fa4c:	b.n	f794 <__gethex+0x114>
    fa4e:	cmp	r0, r2
    fa50:	str.w	r3, [r2, #-4]
    fa54:	bhi.n	fa04 <__gethex+0x384>
    fa56:	ldr	r2, [r4, #8]
    fa58:	cmp	fp, r2
    fa5a:	blt.n	fa8c <__gethex+0x40c>
    fa5c:	ldr	r1, [r4, #4]
    fa5e:	mov	r0, r9
    fa60:	adds	r1, #1
    fa62:	bl	fc84 <_Balloc>
    fa66:	mov	sl, r0
    fa68:	cbnz	r0, fa72 <__gethex+0x3f2>
    fa6a:	ldr	r3, [pc, #108]	; (fad8 <__gethex+0x458>)
    fa6c:	mov	r2, r0
    fa6e:	movs	r1, #132	; 0x84
    fa70:	b.n	f7da <__gethex+0x15a>
    fa72:	ldr	r2, [r4, #16]
    fa74:	adds	r2, #2
    fa76:	add.w	r1, r4, #12
    fa7a:	lsls	r2, r2, #2
    fa7c:	adds	r0, #12
    fa7e:	bl	9dd0 <memcpy>
    fa82:	mov	r1, r4
    fa84:	mov	r0, r9
    fa86:	bl	fd04 <_Bfree>
    fa8a:	mov	r4, sl
    fa8c:	ldr	r2, [r4, #16]
    fa8e:	adds	r1, r2, #1
    fa90:	add.w	r2, r4, r2, lsl #2
    fa94:	str	r1, [r4, #16]
    fa96:	movs	r1, #1
    fa98:	str	r1, [r2, #20]
    fa9a:	b.n	fa16 <__gethex+0x396>
    fa9c:	ldr	r1, [r4, #16]
    fa9e:	cmp	r1, fp
    faa0:	ble.n	faba <__gethex+0x43a>
    faa2:	movs	r1, #1
    faa4:	mov	r0, r4
    faa6:	bl	f5b0 <rshift>
    faaa:	ldr	r3, [r7, #8]
    faac:	adds	r6, #1
    faae:	cmp	r3, r6
    fab0:	blt.w	f86a <__gethex+0x1ea>
    fab4:	mov.w	r8, #1
    fab8:	b.n	fa40 <__gethex+0x3c0>
    faba:	ands.w	r5, r5, #31
    fabe:	beq.n	fab4 <__gethex+0x434>
    fac0:	ldr	r3, [sp, #4]
    fac2:	add	r2, r3
    fac4:	rsb	r5, r5, #32
    fac8:	ldr.w	r0, [r2, #-4]
    facc:	bl	fe68 <__hi0bits>
    fad0:	cmp	r0, r5
    fad2:	blt.n	faa2 <__gethex+0x422>
    fad4:	b.n	fab4 <__gethex+0x434>
    fad6:	nop
    fad8:	.word	0x20001383

0000fadc <L_shift>:
    fadc:	rsb	r2, r2, #8
    fae0:	lsls	r2, r2, #2
    fae2:	push	{r4, r5, r6, lr}
    fae4:	rsb	r6, r2, #32
    fae8:	ldr	r3, [r0, #4]
    faea:	ldr	r4, [r0, #0]
    faec:	lsl.w	r5, r3, r6
    faf0:	orrs	r4, r5
    faf2:	lsrs	r3, r2
    faf4:	str	r4, [r0, #0]
    faf6:	str.w	r3, [r0, #4]!
    fafa:	cmp	r0, r1
    fafc:	bcc.n	fae8 <L_shift+0xc>
    fafe:	pop	{r4, r5, r6, pc}

0000fb00 <__match>:
    fb00:	push	{r4, r5, lr}
    fb02:	ldr	r3, [r0, #0]
    fb04:	adds	r3, #1
    fb06:	ldrb.w	r4, [r1], #1
    fb0a:	cbnz	r4, fb12 <__match+0x12>
    fb0c:	str	r3, [r0, #0]
    fb0e:	movs	r0, #1
    fb10:	pop	{r4, r5, pc}
    fb12:	ldrb.w	r2, [r3], #1
    fb16:	sub.w	r5, r2, #65	; 0x41
    fb1a:	cmp	r5, #25
    fb1c:	it	ls
    fb1e:	addls	r2, #32
    fb20:	cmp	r2, r4
    fb22:	beq.n	fb06 <__match+0x6>
    fb24:	movs	r0, #0
    fb26:	b.n	fb10 <__match+0x10>

0000fb28 <__hexnan>:
    fb28:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb2c:	ldr	r3, [r1, #0]
    fb2e:	ldr	r1, [r0, #0]
    fb30:	asrs	r6, r3, #5
    fb32:	add.w	r6, r2, r6, lsl #2
    fb36:	ands.w	r3, r3, #31
    fb3a:	sub	sp, #28
    fb3c:	it	ne
    fb3e:	addne	r6, #4
    fb40:	movs	r5, #0
    fb42:	subs	r7, r6, #4
    fb44:	mov	sl, r0
    fb46:	mov	r8, r2
    fb48:	str	r3, [sp, #4]
    fb4a:	str.w	r5, [r6, #-4]
    fb4e:	mov	r9, r7
    fb50:	mov	r4, r7
    fb52:	str	r5, [sp, #8]
    fb54:	mov	fp, r5
    fb56:	ldrb	r2, [r1, #1]
    fb58:	adds	r3, r1, #1
    fb5a:	str	r3, [sp, #12]
    fb5c:	cbz	r2, fbb0 <__hexnan+0x88>
    fb5e:	mov	r0, r2
    fb60:	str	r1, [sp, #20]
    fb62:	str	r2, [sp, #16]
    fb64:	bl	f654 <__hexdig_fun>
    fb68:	cmp	r0, #0
    fb6a:	bne.n	fc0c <__hexnan+0xe4>
    fb6c:	ldr	r2, [sp, #16]
    fb6e:	ldr	r1, [sp, #20]
    fb70:	cmp	r2, #32
    fb72:	bhi.n	fba6 <__hexnan+0x7e>
    fb74:	ldr	r3, [sp, #8]
    fb76:	cmp	fp, r3
    fb78:	ble.n	fba2 <__hexnan+0x7a>
    fb7a:	cmp	r4, r9
    fb7c:	bcs.n	fb8c <__hexnan+0x64>
    fb7e:	cmp	r5, #7
    fb80:	bgt.n	fb8c <__hexnan+0x64>
    fb82:	mov	r2, r5
    fb84:	mov	r1, r9
    fb86:	mov	r0, r4
    fb88:	bl	fadc <L_shift>
    fb8c:	cmp	r4, r8
    fb8e:	bls.n	fc32 <__hexnan+0x10a>
    fb90:	movs	r3, #0
    fb92:	sub.w	r9, r4, #4
    fb96:	str.w	r3, [r4, #-4]
    fb9a:	str.w	fp, [sp, #8]
    fb9e:	mov	r4, r9
    fba0:	mov	r5, r3
    fba2:	ldr	r1, [sp, #12]
    fba4:	b.n	fb56 <__hexnan+0x2e>
    fba6:	cmp	r2, #41	; 0x29
    fba8:	bne.n	fc56 <__hexnan+0x12e>
    fbaa:	adds	r1, #2
    fbac:	str.w	r1, [sl]
    fbb0:	cmp.w	fp, #0
    fbb4:	beq.n	fc56 <__hexnan+0x12e>
    fbb6:	cmp	r4, r9
    fbb8:	bcs.n	fbc8 <__hexnan+0xa0>
    fbba:	cmp	r5, #7
    fbbc:	bgt.n	fbc8 <__hexnan+0xa0>
    fbbe:	mov	r2, r5
    fbc0:	mov	r1, r9
    fbc2:	mov	r0, r4
    fbc4:	bl	fadc <L_shift>
    fbc8:	cmp	r4, r8
    fbca:	bls.n	fc36 <__hexnan+0x10e>
    fbcc:	sub.w	r2, r8, #4
    fbd0:	mov	r3, r4
    fbd2:	ldr.w	r1, [r3], #4
    fbd6:	str.w	r1, [r2, #4]!
    fbda:	cmp	r7, r3
    fbdc:	bcs.n	fbd2 <__hexnan+0xaa>
    fbde:	subs	r3, r7, r4
    fbe0:	bic.w	r3, r3, #3
    fbe4:	adds	r3, #4
    fbe6:	subs	r6, #3
    fbe8:	adds	r4, #1
    fbea:	cmp	r6, r4
    fbec:	it	cc
    fbee:	movcc	r3, #4
    fbf0:	add	r3, r8
    fbf2:	movs	r2, #0
    fbf4:	str.w	r2, [r3], #4
    fbf8:	cmp	r7, r3
    fbfa:	bcs.n	fbf4 <__hexnan+0xcc>
    fbfc:	ldr	r3, [r7, #0]
    fbfe:	cbnz	r3, fc08 <__hexnan+0xe0>
    fc00:	cmp	r7, r8
    fc02:	bne.n	fc52 <__hexnan+0x12a>
    fc04:	movs	r3, #1
    fc06:	str	r3, [r7, #0]
    fc08:	movs	r0, #5
    fc0a:	b.n	fc58 <__hexnan+0x130>
    fc0c:	adds	r5, #1
    fc0e:	cmp	r5, #8
    fc10:	add.w	fp, fp, #1
    fc14:	ble.n	fc24 <__hexnan+0xfc>
    fc16:	cmp	r4, r8
    fc18:	bls.n	fba2 <__hexnan+0x7a>
    fc1a:	movs	r3, #0
    fc1c:	str.w	r3, [r4, #-4]
    fc20:	movs	r5, #1
    fc22:	subs	r4, #4
    fc24:	ldr	r2, [r4, #0]
    fc26:	and.w	r0, r0, #15
    fc2a:	orr.w	r0, r0, r2, lsl #4
    fc2e:	str	r0, [r4, #0]
    fc30:	b.n	fba2 <__hexnan+0x7a>
    fc32:	movs	r5, #8
    fc34:	b.n	fba2 <__hexnan+0x7a>
    fc36:	ldr	r3, [sp, #4]
    fc38:	cmp	r3, #0
    fc3a:	beq.n	fbfc <__hexnan+0xd4>
    fc3c:	rsb	r3, r3, #32
    fc40:	mov.w	r2, #4294967295
    fc44:	lsrs	r2, r3
    fc46:	ldr.w	r3, [r6, #-4]
    fc4a:	ands	r3, r2
    fc4c:	str.w	r3, [r6, #-4]
    fc50:	b.n	fbfc <__hexnan+0xd4>
    fc52:	subs	r7, #4
    fc54:	b.n	fbfc <__hexnan+0xd4>
    fc56:	movs	r0, #4
    fc58:	add	sp, #28
    fc5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fc5e <__ascii_mbtowc>:
    fc5e:	sub	sp, #8
    fc60:	cbnz	r1, fc64 <__ascii_mbtowc+0x6>
    fc62:	add	r1, sp, #4
    fc64:	cbz	r2, fc78 <__ascii_mbtowc+0x1a>
    fc66:	cbz	r3, fc7c <__ascii_mbtowc+0x1e>
    fc68:	ldrb	r3, [r2, #0]
    fc6a:	str	r3, [r1, #0]
    fc6c:	ldrb	r2, [r2, #0]
    fc6e:	subs	r0, r2, #0
    fc70:	it	ne
    fc72:	movne	r0, #1
    fc74:	add	sp, #8
    fc76:	bx	lr
    fc78:	mov	r0, r2
    fc7a:	b.n	fc74 <__ascii_mbtowc+0x16>
    fc7c:	mvn.w	r0, #1
    fc80:	b.n	fc74 <__ascii_mbtowc+0x16>
	...

0000fc84 <_Balloc>:
    fc84:	push	{r4, r5, r6, lr}
    fc86:	ldr	r6, [r0, #28]
    fc88:	mov	r4, r0
    fc8a:	mov	r5, r1
    fc8c:	cbnz	r6, fcac <_Balloc+0x28>
    fc8e:	movs	r0, #16
    fc90:	bl	c788 <malloc>
    fc94:	mov	r2, r0
    fc96:	str	r0, [r4, #28]
    fc98:	cbnz	r0, fca4 <_Balloc+0x20>
    fc9a:	ldr	r3, [pc, #96]	; (fcfc <_Balloc+0x78>)
    fc9c:	ldr	r0, [pc, #96]	; (fd00 <_Balloc+0x7c>)
    fc9e:	movs	r1, #107	; 0x6b
    fca0:	bl	111cc <__assert_func>
    fca4:	strd	r6, r6, [r0, #4]
    fca8:	str	r6, [r0, #0]
    fcaa:	str	r6, [r0, #12]
    fcac:	ldr	r6, [r4, #28]
    fcae:	ldr	r3, [r6, #12]
    fcb0:	cbz	r3, fcd4 <_Balloc+0x50>
    fcb2:	ldr	r3, [r4, #28]
    fcb4:	ldr	r3, [r3, #12]
    fcb6:	ldr.w	r0, [r3, r5, lsl #2]
    fcba:	cbnz	r0, fcec <_Balloc+0x68>
    fcbc:	movs	r1, #1
    fcbe:	lsl.w	r6, r1, r5
    fcc2:	adds	r2, r6, #5
    fcc4:	lsls	r2, r2, #2
    fcc6:	mov	r0, r4
    fcc8:	bl	11208 <_calloc_r>
    fccc:	cbz	r0, fce8 <_Balloc+0x64>
    fcce:	strd	r5, r6, [r0, #4]
    fcd2:	b.n	fcf2 <_Balloc+0x6e>
    fcd4:	movs	r2, #33	; 0x21
    fcd6:	movs	r1, #4
    fcd8:	mov	r0, r4
    fcda:	bl	11208 <_calloc_r>
    fcde:	ldr	r3, [r4, #28]
    fce0:	str	r0, [r6, #12]
    fce2:	ldr	r3, [r3, #12]
    fce4:	cmp	r3, #0
    fce6:	bne.n	fcb2 <_Balloc+0x2e>
    fce8:	movs	r0, #0
    fcea:	pop	{r4, r5, r6, pc}
    fcec:	ldr	r2, [r0, #0]
    fcee:	str.w	r2, [r3, r5, lsl #2]
    fcf2:	movs	r3, #0
    fcf4:	strd	r3, r3, [r0, #12]
    fcf8:	b.n	fcea <_Balloc+0x66>
    fcfa:	nop
    fcfc:	.word	0x20001313
    fd00:	.word	0x20000c6c

0000fd04 <_Bfree>:
    fd04:	push	{r4, r5, r6, lr}
    fd06:	ldr	r6, [r0, #28]
    fd08:	mov	r5, r0
    fd0a:	mov	r4, r1
    fd0c:	cbnz	r6, fd2c <_Bfree+0x28>
    fd0e:	movs	r0, #16
    fd10:	bl	c788 <malloc>
    fd14:	mov	r2, r0
    fd16:	str	r0, [r5, #28]
    fd18:	cbnz	r0, fd24 <_Bfree+0x20>
    fd1a:	ldr	r3, [pc, #36]	; (fd40 <_Bfree+0x3c>)
    fd1c:	ldr	r0, [pc, #36]	; (fd44 <_Bfree+0x40>)
    fd1e:	movs	r1, #143	; 0x8f
    fd20:	bl	111cc <__assert_func>
    fd24:	strd	r6, r6, [r0, #4]
    fd28:	str	r6, [r0, #0]
    fd2a:	str	r6, [r0, #12]
    fd2c:	cbz	r4, fd3e <_Bfree+0x3a>
    fd2e:	ldr	r3, [r5, #28]
    fd30:	ldr	r2, [r4, #4]
    fd32:	ldr	r3, [r3, #12]
    fd34:	ldr.w	r1, [r3, r2, lsl #2]
    fd38:	str	r1, [r4, #0]
    fd3a:	str.w	r4, [r3, r2, lsl #2]
    fd3e:	pop	{r4, r5, r6, pc}
    fd40:	.word	0x20001313
    fd44:	.word	0x20000c6c

0000fd48 <__multadd>:
    fd48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd4c:	ldr	r5, [r1, #16]
    fd4e:	mov	r7, r0
    fd50:	mov	r4, r1
    fd52:	mov	r6, r3
    fd54:	add.w	ip, r1, #20
    fd58:	movs	r0, #0
    fd5a:	ldr.w	r3, [ip]
    fd5e:	uxth	r1, r3
    fd60:	mla	r1, r2, r1, r6
    fd64:	lsrs	r6, r3, #16
    fd66:	lsrs	r3, r1, #16
    fd68:	mla	r3, r2, r6, r3
    fd6c:	uxth	r1, r1
    fd6e:	adds	r0, #1
    fd70:	add.w	r1, r1, r3, lsl #16
    fd74:	cmp	r5, r0
    fd76:	str.w	r1, [ip], #4
    fd7a:	mov.w	r6, r3, lsr #16
    fd7e:	bgt.n	fd5a <__multadd+0x12>
    fd80:	cbz	r6, fdc6 <__multadd+0x7e>
    fd82:	ldr	r3, [r4, #8]
    fd84:	cmp	r3, r5
    fd86:	bgt.n	fdbc <__multadd+0x74>
    fd88:	ldr	r1, [r4, #4]
    fd8a:	mov	r0, r7
    fd8c:	adds	r1, #1
    fd8e:	bl	fc84 <_Balloc>
    fd92:	mov	r8, r0
    fd94:	cbnz	r0, fda2 <__multadd+0x5a>
    fd96:	mov	r2, r0
    fd98:	ldr	r3, [pc, #48]	; (fdcc <__multadd+0x84>)
    fd9a:	ldr	r0, [pc, #52]	; (fdd0 <__multadd+0x88>)
    fd9c:	movs	r1, #186	; 0xba
    fd9e:	bl	111cc <__assert_func>
    fda2:	ldr	r2, [r4, #16]
    fda4:	adds	r2, #2
    fda6:	add.w	r1, r4, #12
    fdaa:	lsls	r2, r2, #2
    fdac:	adds	r0, #12
    fdae:	bl	9dd0 <memcpy>
    fdb2:	mov	r1, r4
    fdb4:	mov	r0, r7
    fdb6:	bl	fd04 <_Bfree>
    fdba:	mov	r4, r8
    fdbc:	add.w	r3, r4, r5, lsl #2
    fdc0:	adds	r5, #1
    fdc2:	str	r6, [r3, #20]
    fdc4:	str	r5, [r4, #16]
    fdc6:	mov	r0, r4
    fdc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fdcc:	.word	0x20001383
    fdd0:	.word	0x20000c6c

0000fdd4 <__s2b>:
    fdd4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fdd8:	mov	r4, r1
    fdda:	mov	r5, r2
    fddc:	mov	r7, r3
    fdde:	movs	r2, #9
    fde0:	adds	r3, #8
    fde2:	mov	r6, r0
    fde4:	sdiv	r3, r3, r2
    fde8:	movs	r1, #0
    fdea:	movs	r2, #1
    fdec:	cmp	r2, r3
    fdee:	blt.n	fe04 <__s2b+0x30>
    fdf0:	mov	r0, r6
    fdf2:	bl	fc84 <_Balloc>
    fdf6:	cbnz	r0, fe0a <__s2b+0x36>
    fdf8:	mov	r2, r0
    fdfa:	ldr	r3, [pc, #100]	; (fe60 <__s2b+0x8c>)
    fdfc:	ldr	r0, [pc, #100]	; (fe64 <__s2b+0x90>)
    fdfe:	movs	r1, #211	; 0xd3
    fe00:	bl	111cc <__assert_func>
    fe04:	lsls	r2, r2, #1
    fe06:	adds	r1, #1
    fe08:	b.n	fdec <__s2b+0x18>
    fe0a:	ldr	r3, [sp, #32]
    fe0c:	str	r3, [r0, #20]
    fe0e:	cmp	r5, #9
    fe10:	mov.w	r3, #1
    fe14:	str	r3, [r0, #16]
    fe16:	ble.n	fe46 <__s2b+0x72>
    fe18:	add.w	r9, r4, #9
    fe1c:	mov	r8, r9
    fe1e:	add	r4, r5
    fe20:	ldrb.w	r3, [r8], #1
    fe24:	mov	r1, r0
    fe26:	subs	r3, #48	; 0x30
    fe28:	movs	r2, #10
    fe2a:	mov	r0, r6
    fe2c:	bl	fd48 <__multadd>
    fe30:	cmp	r8, r4
    fe32:	bne.n	fe20 <__s2b+0x4c>
    fe34:	sub.w	r4, r5, #8
    fe38:	add	r4, r9
    fe3a:	subs	r5, r5, r4
    fe3c:	adds	r3, r4, r5
    fe3e:	cmp	r3, r7
    fe40:	blt.n	fe4c <__s2b+0x78>
    fe42:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe46:	adds	r4, #10
    fe48:	movs	r5, #9
    fe4a:	b.n	fe3a <__s2b+0x66>
    fe4c:	ldrb.w	r3, [r4], #1
    fe50:	mov	r1, r0
    fe52:	subs	r3, #48	; 0x30
    fe54:	movs	r2, #10
    fe56:	mov	r0, r6
    fe58:	bl	fd48 <__multadd>
    fe5c:	b.n	fe3c <__s2b+0x68>
    fe5e:	nop
    fe60:	.word	0x20001383
    fe64:	.word	0x20000c6c

0000fe68 <__hi0bits>:
    fe68:	lsrs	r3, r0, #16
    fe6a:	lsls	r3, r3, #16
    fe6c:	cbnz	r3, fea4 <__hi0bits+0x3c>
    fe6e:	lsls	r0, r0, #16
    fe70:	movs	r3, #16
    fe72:	tst.w	r0, #4278190080	; 0xff000000
    fe76:	itt	eq
    fe78:	lsleq	r0, r0, #8
    fe7a:	addeq	r3, #8
    fe7c:	tst.w	r0, #4026531840	; 0xf0000000
    fe80:	itt	eq
    fe82:	lsleq	r0, r0, #4
    fe84:	addeq	r3, #4
    fe86:	tst.w	r0, #3221225472	; 0xc0000000
    fe8a:	itt	eq
    fe8c:	lsleq	r0, r0, #2
    fe8e:	addeq	r3, #2
    fe90:	cmp	r0, #0
    fe92:	blt.n	fea0 <__hi0bits+0x38>
    fe94:	tst.w	r0, #1073741824	; 0x40000000
    fe98:	add.w	r3, r3, #1
    fe9c:	it	eq
    fe9e:	moveq	r3, #32
    fea0:	mov	r0, r3
    fea2:	bx	lr
    fea4:	movs	r3, #0
    fea6:	b.n	fe72 <__hi0bits+0xa>

0000fea8 <__lo0bits>:
    fea8:	ldr	r3, [r0, #0]
    feaa:	ands.w	r2, r3, #7
    feae:	beq.n	feca <__lo0bits+0x22>
    feb0:	lsls	r1, r3, #31
    feb2:	bmi.n	fefa <__lo0bits+0x52>
    feb4:	lsls	r2, r3, #30
    feb6:	itett	mi
    feb8:	lsrmi	r3, r3, #1
    feba:	lsrpl	r3, r3, #2
    febc:	strmi	r3, [r0, #0]
    febe:	movmi	r2, #1
    fec0:	itt	pl
    fec2:	strpl	r3, [r0, #0]
    fec4:	movpl	r2, #2
    fec6:	mov	r0, r2
    fec8:	bx	lr
    feca:	uxth	r1, r3
    fecc:	cbnz	r1, fed2 <__lo0bits+0x2a>
    fece:	lsrs	r3, r3, #16
    fed0:	movs	r2, #16
    fed2:	uxtb	r1, r3
    fed4:	cbnz	r1, feda <__lo0bits+0x32>
    fed6:	adds	r2, #8
    fed8:	lsrs	r3, r3, #8
    feda:	lsls	r1, r3, #28
    fedc:	itt	eq
    fede:	lsreq	r3, r3, #4
    fee0:	addeq	r2, #4
    fee2:	lsls	r1, r3, #30
    fee4:	itt	eq
    fee6:	lsreq	r3, r3, #2
    fee8:	addeq	r2, #2
    feea:	lsls	r1, r3, #31
    feec:	bmi.n	fef6 <__lo0bits+0x4e>
    feee:	lsrs	r3, r3, #1
    fef0:	add.w	r2, r2, #1
    fef4:	beq.n	fefe <__lo0bits+0x56>
    fef6:	str	r3, [r0, #0]
    fef8:	b.n	fec6 <__lo0bits+0x1e>
    fefa:	movs	r2, #0
    fefc:	b.n	fec6 <__lo0bits+0x1e>
    fefe:	movs	r2, #32
    ff00:	b.n	fec6 <__lo0bits+0x1e>
	...

0000ff04 <__i2b>:
    ff04:	push	{r4, lr}
    ff06:	mov	r4, r1
    ff08:	movs	r1, #1
    ff0a:	bl	fc84 <_Balloc>
    ff0e:	mov	r2, r0
    ff10:	cbnz	r0, ff1e <__i2b+0x1a>
    ff12:	ldr	r3, [pc, #20]	; (ff28 <__i2b+0x24>)
    ff14:	ldr	r0, [pc, #20]	; (ff2c <__i2b+0x28>)
    ff16:	movw	r1, #325	; 0x145
    ff1a:	bl	111cc <__assert_func>
    ff1e:	movs	r3, #1
    ff20:	str	r4, [r0, #20]
    ff22:	str	r3, [r0, #16]
    ff24:	pop	{r4, pc}
    ff26:	nop
    ff28:	.word	0x20001383
    ff2c:	.word	0x20000c6c

0000ff30 <__multiply>:
    ff30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff34:	mov	r9, r2
    ff36:	ldr	r2, [r1, #16]
    ff38:	ldr.w	r3, [r9, #16]
    ff3c:	cmp	r2, r3
    ff3e:	it	lt
    ff40:	movlt	r3, r1
    ff42:	mov	r4, r1
    ff44:	itt	lt
    ff46:	movlt	r4, r9
    ff48:	movlt	r9, r3
    ff4a:	ldr	r7, [r4, #16]
    ff4c:	ldr.w	sl, [r9, #16]
    ff50:	ldr	r3, [r4, #8]
    ff52:	ldr	r1, [r4, #4]
    ff54:	add.w	r6, r7, sl
    ff58:	cmp	r3, r6
    ff5a:	sub	sp, #20
    ff5c:	it	lt
    ff5e:	addlt	r1, #1
    ff60:	bl	fc84 <_Balloc>
    ff64:	cbnz	r0, ff74 <__multiply+0x44>
    ff66:	mov	r2, r0
    ff68:	ldr	r3, [pc, #272]	; (1007c <__multiply+0x14c>)
    ff6a:	ldr	r0, [pc, #276]	; (10080 <__multiply+0x150>)
    ff6c:	mov.w	r1, #354	; 0x162
    ff70:	bl	111cc <__assert_func>
    ff74:	add.w	r5, r0, #20
    ff78:	add.w	r8, r5, r6, lsl #2
    ff7c:	mov	r3, r5
    ff7e:	movs	r2, #0
    ff80:	cmp	r3, r8
    ff82:	bcc.n	ffc8 <__multiply+0x98>
    ff84:	add.w	r3, r4, #20
    ff88:	add.w	r7, r3, r7, lsl #2
    ff8c:	add.w	r3, r9, #20
    ff90:	add.w	r2, r3, sl, lsl #2
    ff94:	str	r2, [sp, #8]
    ff96:	subs	r2, r7, r4
    ff98:	subs	r2, #21
    ff9a:	bic.w	r2, r2, #3
    ff9e:	adds	r2, #4
    ffa0:	add.w	r1, r4, #21
    ffa4:	cmp	r7, r1
    ffa6:	it	cc
    ffa8:	movcc	r2, #4
    ffaa:	str	r2, [sp, #4]
    ffac:	ldr	r2, [sp, #8]
    ffae:	str	r3, [sp, #12]
    ffb0:	cmp	r2, r3
    ffb2:	bhi.n	ffce <__multiply+0x9e>
    ffb4:	cmp	r6, #0
    ffb6:	ble.n	ffc0 <__multiply+0x90>
    ffb8:	ldr.w	r3, [r8, #-4]!
    ffbc:	cmp	r3, #0
    ffbe:	beq.n	10078 <__multiply+0x148>
    ffc0:	str	r6, [r0, #16]
    ffc2:	add	sp, #20
    ffc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ffc8:	str.w	r2, [r3], #4
    ffcc:	b.n	ff80 <__multiply+0x50>
    ffce:	ldrh.w	sl, [r3]
    ffd2:	cmp.w	sl, #0
    ffd6:	beq.n	10022 <__multiply+0xf2>
    ffd8:	add.w	lr, r4, #20
    ffdc:	mov	r9, r5
    ffde:	mov.w	ip, #0
    ffe2:	ldr.w	r2, [lr], #4
    ffe6:	ldr.w	r1, [r9]
    ffea:	uxth.w	fp, r2
    ffee:	uxth	r1, r1
    fff0:	mla	r1, sl, fp, r1
    fff4:	mov.w	fp, r2, lsr #16
    fff8:	ldr.w	r2, [r9]
    fffc:	add	r1, ip
    fffe:	mov.w	ip, r2, lsr #16
   10002:	mla	r2, sl, fp, ip
   10006:	add.w	r2, r2, r1, lsr #16
   1000a:	uxth	r1, r1
   1000c:	orr.w	r1, r1, r2, lsl #16
   10010:	cmp	r7, lr
   10012:	str.w	r1, [r9], #4
   10016:	mov.w	ip, r2, lsr #16
   1001a:	bhi.n	ffe2 <__multiply+0xb2>
   1001c:	ldr	r2, [sp, #4]
   1001e:	str.w	ip, [r5, r2]
   10022:	ldr	r2, [sp, #12]
   10024:	ldrh.w	r9, [r2, #2]
   10028:	adds	r3, #4
   1002a:	cmp.w	r9, #0
   1002e:	beq.n	10074 <__multiply+0x144>
   10030:	ldr	r1, [r5, #0]
   10032:	add.w	ip, r4, #20
   10036:	mov	lr, r5
   10038:	mov.w	sl, #0
   1003c:	ldrh.w	fp, [ip]
   10040:	ldrh.w	r2, [lr, #2]
   10044:	mla	r2, r9, fp, r2
   10048:	add	r2, sl
   1004a:	uxth	r1, r1
   1004c:	orr.w	r1, r1, r2, lsl #16
   10050:	str.w	r1, [lr], #4
   10054:	ldr.w	r1, [ip], #4
   10058:	mov.w	sl, r1, lsr #16
   1005c:	ldrh.w	r1, [lr]
   10060:	mla	r1, r9, sl, r1
   10064:	add.w	r1, r1, r2, lsr #16
   10068:	cmp	r7, ip
   1006a:	mov.w	sl, r1, lsr #16
   1006e:	bhi.n	1003c <__multiply+0x10c>
   10070:	ldr	r2, [sp, #4]
   10072:	str	r1, [r5, r2]
   10074:	adds	r5, #4
   10076:	b.n	ffac <__multiply+0x7c>
   10078:	subs	r6, #1
   1007a:	b.n	ffb4 <__multiply+0x84>
   1007c:	.word	0x20001383
   10080:	.word	0x20000c6c

00010084 <__pow5mult>:
   10084:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10088:	mov	r5, r2
   1008a:	ands.w	r2, r2, #3
   1008e:	mov	r6, r0
   10090:	mov	r7, r1
   10092:	beq.n	100a4 <__pow5mult+0x20>
   10094:	ldr	r4, [pc, #148]	; (1012c <__pow5mult+0xa8>)
   10096:	subs	r2, #1
   10098:	movs	r3, #0
   1009a:	ldr.w	r2, [r4, r2, lsl #2]
   1009e:	bl	fd48 <__multadd>
   100a2:	mov	r7, r0
   100a4:	asrs	r5, r5, #2
   100a6:	beq.n	10124 <__pow5mult+0xa0>
   100a8:	ldr	r4, [r6, #28]
   100aa:	cbnz	r4, 100cc <__pow5mult+0x48>
   100ac:	movs	r0, #16
   100ae:	bl	c788 <malloc>
   100b2:	mov	r2, r0
   100b4:	str	r0, [r6, #28]
   100b6:	cbnz	r0, 100c4 <__pow5mult+0x40>
   100b8:	ldr	r3, [pc, #116]	; (10130 <__pow5mult+0xac>)
   100ba:	ldr	r0, [pc, #120]	; (10134 <__pow5mult+0xb0>)
   100bc:	movw	r1, #435	; 0x1b3
   100c0:	bl	111cc <__assert_func>
   100c4:	strd	r4, r4, [r0, #4]
   100c8:	str	r4, [r0, #0]
   100ca:	str	r4, [r0, #12]
   100cc:	ldr.w	r8, [r6, #28]
   100d0:	ldr.w	r4, [r8, #8]
   100d4:	cbnz	r4, 100ea <__pow5mult+0x66>
   100d6:	movw	r1, #625	; 0x271
   100da:	mov	r0, r6
   100dc:	bl	ff04 <__i2b>
   100e0:	movs	r3, #0
   100e2:	str.w	r0, [r8, #8]
   100e6:	mov	r4, r0
   100e8:	str	r3, [r0, #0]
   100ea:	mov.w	r9, #0
   100ee:	lsls	r3, r5, #31
   100f0:	bpl.n	10108 <__pow5mult+0x84>
   100f2:	mov	r1, r7
   100f4:	mov	r2, r4
   100f6:	mov	r0, r6
   100f8:	bl	ff30 <__multiply>
   100fc:	mov	r1, r7
   100fe:	mov	r8, r0
   10100:	mov	r0, r6
   10102:	bl	fd04 <_Bfree>
   10106:	mov	r7, r8
   10108:	asrs	r5, r5, #1
   1010a:	beq.n	10124 <__pow5mult+0xa0>
   1010c:	ldr	r0, [r4, #0]
   1010e:	cbnz	r0, 10120 <__pow5mult+0x9c>
   10110:	mov	r2, r4
   10112:	mov	r1, r4
   10114:	mov	r0, r6
   10116:	bl	ff30 <__multiply>
   1011a:	str	r0, [r4, #0]
   1011c:	str.w	r9, [r0]
   10120:	mov	r4, r0
   10122:	b.n	100ee <__pow5mult+0x6a>
   10124:	mov	r0, r7
   10126:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1012a:	nop
   1012c:	.word	0x200009ac
   10130:	.word	0x20001313
   10134:	.word	0x20000c6c

00010138 <__lshift>:
   10138:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1013c:	mov	r4, r1
   1013e:	ldr	r1, [r1, #4]
   10140:	ldr	r3, [r4, #16]
   10142:	add.w	r8, r3, r2, asr #5
   10146:	ldr	r3, [r4, #8]
   10148:	mov	r7, r0
   1014a:	mov	r9, r2
   1014c:	mov.w	sl, r2, asr #5
   10150:	add.w	r6, r8, #1
   10154:	cmp	r3, r6
   10156:	blt.n	10170 <__lshift+0x38>
   10158:	mov	r0, r7
   1015a:	bl	fc84 <_Balloc>
   1015e:	mov	r5, r0
   10160:	cbnz	r0, 10176 <__lshift+0x3e>
   10162:	mov	r2, r0
   10164:	ldr	r3, [pc, #160]	; (10208 <__lshift+0xd0>)
   10166:	ldr	r0, [pc, #164]	; (1020c <__lshift+0xd4>)
   10168:	mov.w	r1, #478	; 0x1de
   1016c:	bl	111cc <__assert_func>
   10170:	adds	r1, #1
   10172:	lsls	r3, r3, #1
   10174:	b.n	10154 <__lshift+0x1c>
   10176:	movs	r3, #0
   10178:	add.w	r1, r0, #20
   1017c:	add.w	r2, r0, #16
   10180:	mov	r0, r3
   10182:	cmp	r3, sl
   10184:	blt.n	101ee <__lshift+0xb6>
   10186:	ldr	r0, [r4, #16]
   10188:	bic.w	sl, sl, sl, asr #31
   1018c:	add.w	r3, r4, #20
   10190:	ands.w	r9, r9, #31
   10194:	add.w	r1, r1, sl, lsl #2
   10198:	add.w	ip, r3, r0, lsl #2
   1019c:	beq.n	101f6 <__lshift+0xbe>
   1019e:	rsb	lr, r9, #32
   101a2:	mov	sl, r1
   101a4:	movs	r2, #0
   101a6:	ldr	r0, [r3, #0]
   101a8:	lsl.w	r0, r0, r9
   101ac:	orrs	r0, r2
   101ae:	str.w	r0, [sl], #4
   101b2:	ldr.w	r2, [r3], #4
   101b6:	cmp	ip, r3
   101b8:	lsr.w	r2, r2, lr
   101bc:	bhi.n	101a6 <__lshift+0x6e>
   101be:	sub.w	r3, ip, r4
   101c2:	subs	r3, #21
   101c4:	bic.w	r3, r3, #3
   101c8:	adds	r3, #4
   101ca:	add.w	r0, r4, #21
   101ce:	cmp	ip, r0
   101d0:	it	cc
   101d2:	movcc	r3, #4
   101d4:	str	r2, [r1, r3]
   101d6:	cbz	r2, 101dc <__lshift+0xa4>
   101d8:	add.w	r6, r8, #2
   101dc:	subs	r6, #1
   101de:	mov	r0, r7
   101e0:	str	r6, [r5, #16]
   101e2:	mov	r1, r4
   101e4:	bl	fd04 <_Bfree>
   101e8:	mov	r0, r5
   101ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101ee:	str.w	r0, [r2, #4]!
   101f2:	adds	r3, #1
   101f4:	b.n	10182 <__lshift+0x4a>
   101f6:	subs	r1, #4
   101f8:	ldr.w	r2, [r3], #4
   101fc:	str.w	r2, [r1, #4]!
   10200:	cmp	ip, r3
   10202:	bhi.n	101f8 <__lshift+0xc0>
   10204:	b.n	101dc <__lshift+0xa4>
   10206:	nop
   10208:	.word	0x20001383
   1020c:	.word	0x20000c6c

00010210 <__mcmp>:
   10210:	push	{r4, r5, lr}
   10212:	ldr	r2, [r0, #16]
   10214:	ldr	r4, [r1, #16]
   10216:	subs	r2, r2, r4
   10218:	bne.n	10238 <__mcmp+0x28>
   1021a:	add.w	r3, r0, #20
   1021e:	adds	r1, #20
   10220:	add.w	r0, r3, r4, lsl #2
   10224:	add.w	r1, r1, r4, lsl #2
   10228:	ldr.w	r5, [r0, #-4]!
   1022c:	ldr.w	r4, [r1, #-4]!
   10230:	cmp	r5, r4
   10232:	beq.n	1023c <__mcmp+0x2c>
   10234:	bcc.n	10242 <__mcmp+0x32>
   10236:	movs	r2, #1
   10238:	mov	r0, r2
   1023a:	pop	{r4, r5, pc}
   1023c:	cmp	r3, r0
   1023e:	bcc.n	10228 <__mcmp+0x18>
   10240:	b.n	10238 <__mcmp+0x28>
   10242:	mov.w	r2, #4294967295
   10246:	b.n	10238 <__mcmp+0x28>

00010248 <__mdiff>:
   10248:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1024c:	mov	r4, r1
   1024e:	mov	r6, r0
   10250:	mov	r1, r2
   10252:	mov	r0, r4
   10254:	mov	r8, r2
   10256:	bl	10210 <__mcmp>
   1025a:	subs	r5, r0, #0
   1025c:	bne.n	10280 <__mdiff+0x38>
   1025e:	mov	r1, r5
   10260:	mov	r0, r6
   10262:	bl	fc84 <_Balloc>
   10266:	cbnz	r0, 10276 <__mdiff+0x2e>
   10268:	ldr	r3, [pc, #232]	; (10354 <__mdiff+0x10c>)
   1026a:	mov	r2, r0
   1026c:	movw	r1, #567	; 0x237
   10270:	ldr	r0, [pc, #228]	; (10358 <__mdiff+0x110>)
   10272:	bl	111cc <__assert_func>
   10276:	movs	r3, #1
   10278:	strd	r3, r5, [r0, #16]
   1027c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10280:	itt	ge
   10282:	movge	r3, r8
   10284:	movge	r8, r4
   10286:	mov	r0, r6
   10288:	ldr.w	r1, [r8, #4]
   1028c:	itte	ge
   1028e:	movge	r4, r3
   10290:	movge	r5, #0
   10292:	movlt	r5, #1
   10294:	bl	fc84 <_Balloc>
   10298:	cbnz	r0, 102a4 <__mdiff+0x5c>
   1029a:	ldr	r3, [pc, #184]	; (10354 <__mdiff+0x10c>)
   1029c:	mov	r2, r0
   1029e:	movw	r1, #581	; 0x245
   102a2:	b.n	10270 <__mdiff+0x28>
   102a4:	ldr.w	r7, [r8, #16]
   102a8:	ldr	r6, [r4, #16]
   102aa:	str	r5, [r0, #12]
   102ac:	add.w	r9, r4, #20
   102b0:	add.w	r5, r8, #20
   102b4:	add.w	lr, r0, #20
   102b8:	add.w	ip, r5, r7, lsl #2
   102bc:	add.w	r6, r9, r6, lsl #2
   102c0:	add.w	r2, r8, #16
   102c4:	mov	sl, lr
   102c6:	movs	r1, #0
   102c8:	ldr.w	r3, [r9], #4
   102cc:	ldr.w	fp, [r2, #4]!
   102d0:	uxtah	r8, r1, fp
   102d4:	uxth	r1, r3
   102d6:	lsrs	r3, r3, #16
   102d8:	sub.w	r8, r8, r1
   102dc:	rsb	r3, r3, fp, lsr #16
   102e0:	add.w	r3, r3, r8, asr #16
   102e4:	uxth.w	r8, r8
   102e8:	asrs	r1, r3, #16
   102ea:	cmp	r6, r9
   102ec:	orr.w	r3, r8, r3, lsl #16
   102f0:	str.w	r3, [sl], #4
   102f4:	bhi.n	102c8 <__mdiff+0x80>
   102f6:	subs	r3, r6, r4
   102f8:	subs	r3, #21
   102fa:	bic.w	r3, r3, #3
   102fe:	adds	r3, #4
   10300:	adds	r4, #21
   10302:	cmp	r6, r4
   10304:	it	cc
   10306:	movcc	r3, #4
   10308:	add	r5, r3
   1030a:	add	r3, lr
   1030c:	mov	lr, r3
   1030e:	mov	r6, r5
   10310:	cmp	r6, ip
   10312:	bcc.n	10332 <__mdiff+0xea>
   10314:	add.w	r2, ip, #3
   10318:	subs	r2, r2, r5
   1031a:	bic.w	r2, r2, #3
   1031e:	subs	r5, #3
   10320:	cmp	ip, r5
   10322:	it	cc
   10324:	movcc	r2, #0
   10326:	add	r3, r2
   10328:	ldr.w	r2, [r3, #-4]!
   1032c:	cbz	r2, 1034e <__mdiff+0x106>
   1032e:	str	r7, [r0, #16]
   10330:	b.n	1027c <__mdiff+0x34>
   10332:	ldr.w	r8, [r6], #4
   10336:	uxtah	r2, r1, r8
   1033a:	asrs	r4, r2, #16
   1033c:	add.w	r4, r4, r8, lsr #16
   10340:	uxth	r2, r2
   10342:	orr.w	r2, r2, r4, lsl #16
   10346:	str.w	r2, [lr], #4
   1034a:	asrs	r1, r4, #16
   1034c:	b.n	10310 <__mdiff+0xc8>
   1034e:	subs	r7, #1
   10350:	b.n	10328 <__mdiff+0xe0>
   10352:	nop
   10354:	.word	0x20001383
   10358:	.word	0x20000c6c

0001035c <__ulp>:
   1035c:	sub	sp, #8
   1035e:	vstr	d0, [sp]
   10362:	ldr	r2, [sp, #4]
   10364:	ldr	r3, [pc, #60]	; (103a4 <__ulp+0x48>)
   10366:	ands	r3, r2
   10368:	sub.w	r3, r3, #54525952	; 0x3400000
   1036c:	cmp	r3, #0
   1036e:	bgt.n	10382 <__ulp+0x26>
   10370:	negs	r3, r3
   10372:	cmp.w	r3, #20971520	; 0x1400000
   10376:	mov.w	r2, r3, asr #20
   1037a:	bge.n	10386 <__ulp+0x2a>
   1037c:	mov.w	r3, #524288	; 0x80000
   10380:	asrs	r3, r2
   10382:	movs	r2, #0
   10384:	b.n	10398 <__ulp+0x3c>
   10386:	sub.w	r3, r2, #20
   1038a:	cmp	r3, #30
   1038c:	itte	le
   1038e:	movle.w	r2, #2147483648	; 0x80000000
   10392:	lsrle	r2, r3
   10394:	movgt	r2, #1
   10396:	movs	r3, #0
   10398:	mov	r1, r3
   1039a:	mov	r0, r2
   1039c:	vmov	d0, r0, r1
   103a0:	add	sp, #8
   103a2:	bx	lr
   103a4:	.word	0x7ff00000

000103a8 <__b2d>:
   103a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103ac:	ldr	r6, [r0, #16]
   103ae:	add.w	r8, r0, #20
   103b2:	add.w	r6, r8, r6, lsl #2
   103b6:	subs	r7, r6, #4
   103b8:	ldr.w	r2, [r6, #-4]
   103bc:	mov	r0, r2
   103be:	bl	fe68 <__hi0bits>
   103c2:	rsb	r3, r0, #32
   103c6:	cmp	r0, #10
   103c8:	str	r3, [r1, #0]
   103ca:	ldr	r1, [pc, #108]	; (10438 <__b2d+0x90>)
   103cc:	bgt.n	103fa <__b2d+0x52>
   103ce:	rsb	ip, r0, #11
   103d2:	lsr.w	r3, r2, ip
   103d6:	cmp	r8, r7
   103d8:	orr.w	r5, r3, r1
   103dc:	ite	cc
   103de:	ldrcc.w	r3, [r6, #-8]
   103e2:	movcs	r3, #0
   103e4:	adds	r0, #21
   103e6:	lsl.w	r0, r2, r0
   103ea:	lsr.w	r3, r3, ip
   103ee:	orrs	r3, r0
   103f0:	mov	r4, r3
   103f2:	vmov	d0, r4, r5
   103f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103fa:	cmp	r8, r7
   103fc:	itte	cc
   103fe:	ldrcc.w	r3, [r6, #-8]
   10402:	subcc.w	r7, r6, #8
   10406:	movcs	r3, #0
   10408:	subs	r0, #11
   1040a:	beq.n	10432 <__b2d+0x8a>
   1040c:	rsb	r1, r0, #32
   10410:	lsr.w	r4, r3, r1
   10414:	lsls	r2, r0
   10416:	orrs	r2, r4
   10418:	cmp	r7, r8
   1041a:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   1041e:	ite	hi
   10420:	ldrhi.w	r2, [r7, #-4]
   10424:	movls	r2, #0
   10426:	lsls	r3, r0
   10428:	lsrs	r2, r1
   1042a:	orr.w	r5, r5, #3145728	; 0x300000
   1042e:	orrs	r3, r2
   10430:	b.n	103f0 <__b2d+0x48>
   10432:	orr.w	r5, r2, r1
   10436:	b.n	103f0 <__b2d+0x48>
   10438:	.word	0x3ff00000

0001043c <__d2b>:
   1043c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10440:	mov	r7, r1
   10442:	movs	r1, #1
   10444:	vmov	r8, r9, d0
   10448:	mov	r6, r2
   1044a:	bl	fc84 <_Balloc>
   1044e:	mov	r4, r0
   10450:	cbnz	r0, 10460 <__d2b+0x24>
   10452:	mov	r2, r0
   10454:	ldr	r3, [pc, #144]	; (104e8 <__d2b+0xac>)
   10456:	ldr	r0, [pc, #148]	; (104ec <__d2b+0xb0>)
   10458:	movw	r1, #783	; 0x30f
   1045c:	bl	111cc <__assert_func>
   10460:	ubfx	r5, r9, #20, #11
   10464:	ubfx	r3, r9, #0, #20
   10468:	cbnz	r5, 104b6 <__d2b+0x7a>
   1046a:	str	r3, [sp, #4]
   1046c:	subs.w	r3, r8, #0
   10470:	beq.n	104c0 <__d2b+0x84>
   10472:	mov	r0, sp
   10474:	str	r3, [sp, #0]
   10476:	bl	fea8 <__lo0bits>
   1047a:	ldrd	r1, r2, [sp]
   1047e:	cbz	r0, 104bc <__d2b+0x80>
   10480:	rsb	r3, r0, #32
   10484:	lsl.w	r3, r2, r3
   10488:	orrs	r3, r1
   1048a:	lsrs	r2, r0
   1048c:	str	r3, [r4, #20]
   1048e:	str	r2, [sp, #4]
   10490:	ldr	r3, [sp, #4]
   10492:	str	r3, [r4, #24]
   10494:	cmp	r3, #0
   10496:	ite	ne
   10498:	movne	r2, #2
   1049a:	moveq	r2, #1
   1049c:	str	r2, [r4, #16]
   1049e:	cbz	r5, 104d0 <__d2b+0x94>
   104a0:	subw	r5, r5, #1075	; 0x433
   104a4:	add	r5, r0
   104a6:	str	r5, [r7, #0]
   104a8:	rsb	r0, r0, #53	; 0x35
   104ac:	str	r0, [r6, #0]
   104ae:	mov	r0, r4
   104b0:	add	sp, #12
   104b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   104b6:	orr.w	r3, r3, #1048576	; 0x100000
   104ba:	b.n	1046a <__d2b+0x2e>
   104bc:	str	r1, [r4, #20]
   104be:	b.n	10490 <__d2b+0x54>
   104c0:	add	r0, sp, #4
   104c2:	bl	fea8 <__lo0bits>
   104c6:	ldr	r3, [sp, #4]
   104c8:	str	r3, [r4, #20]
   104ca:	adds	r0, #32
   104cc:	movs	r2, #1
   104ce:	b.n	1049c <__d2b+0x60>
   104d0:	add.w	r3, r4, r2, lsl #2
   104d4:	subw	r0, r0, #1074	; 0x432
   104d8:	str	r0, [r7, #0]
   104da:	ldr	r0, [r3, #16]
   104dc:	bl	fe68 <__hi0bits>
   104e0:	rsb	r0, r0, r2, lsl #5
   104e4:	b.n	104ac <__d2b+0x70>
   104e6:	nop
   104e8:	.word	0x20001383
   104ec:	.word	0x20000c6c

000104f0 <__ratio>:
   104f0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104f4:	mov	r8, r1
   104f6:	mov	r1, sp
   104f8:	mov	r9, r0
   104fa:	bl	103a8 <__b2d>
   104fe:	add	r1, sp, #4
   10500:	mov	r0, r8
   10502:	vmov	r4, r5, d0
   10506:	vmov	sl, s0
   1050a:	bl	103a8 <__b2d>
   1050e:	ldr.w	r3, [r8, #16]
   10512:	ldr.w	r2, [r9, #16]
   10516:	subs	r2, r2, r3
   10518:	ldrd	r3, r1, [sp]
   1051c:	subs	r3, r3, r1
   1051e:	add.w	r3, r3, r2, lsl #5
   10522:	vmov	r6, r7, d0
   10526:	cmp	r3, #0
   10528:	itet	le
   1052a:	rsble	r3, r3, r3, lsl #12
   1052e:	movgt	r2, r5
   10530:	movle	r2, r7
   10532:	mov	fp, r5
   10534:	itet	le
   10536:	addle.w	r3, r2, r3, lsl #20
   1053a:	addgt.w	fp, r2, r3, lsl #20
   1053e:	vmovle	s1, r3
   10542:	vmov	d7, sl, fp
   10546:	vdiv.f64	d0, d7, d0
   1054a:	add	sp, #12
   1054c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010550 <__copybits>:
   10550:	subs	r1, #1
   10552:	push	{r4, r5, r6, lr}
   10554:	asrs	r1, r1, #5
   10556:	ldr	r4, [r2, #16]
   10558:	adds	r1, #1
   1055a:	add.w	r3, r2, #20
   1055e:	add.w	r1, r0, r1, lsl #2
   10562:	add.w	r4, r3, r4, lsl #2
   10566:	subs	r5, r0, #4
   10568:	cmp	r3, r4
   1056a:	bcc.n	10586 <__copybits+0x36>
   1056c:	subs	r3, r4, r2
   1056e:	subs	r3, #17
   10570:	bic.w	r3, r3, #3
   10574:	adds	r2, #17
   10576:	cmp	r2, r4
   10578:	it	hi
   1057a:	movhi	r3, #0
   1057c:	add	r0, r3
   1057e:	movs	r3, #0
   10580:	cmp	r0, r1
   10582:	bcc.n	10590 <__copybits+0x40>
   10584:	pop	{r4, r5, r6, pc}
   10586:	ldr.w	r6, [r3], #4
   1058a:	str.w	r6, [r5, #4]!
   1058e:	b.n	10568 <__copybits+0x18>
   10590:	str.w	r3, [r0], #4
   10594:	b.n	10580 <__copybits+0x30>

00010596 <__any_on>:
   10596:	add.w	r2, r0, #20
   1059a:	ldr	r0, [r0, #16]
   1059c:	asrs	r3, r1, #5
   1059e:	cmp	r0, r3
   105a0:	push	{r4, lr}
   105a2:	blt.n	105c8 <__any_on+0x32>
   105a4:	ble.n	105bc <__any_on+0x26>
   105a6:	ands.w	r1, r1, #31
   105aa:	beq.n	105bc <__any_on+0x26>
   105ac:	ldr.w	r4, [r2, r3, lsl #2]
   105b0:	lsr.w	r0, r4, r1
   105b4:	lsl.w	r1, r0, r1
   105b8:	cmp	r4, r1
   105ba:	bne.n	105d4 <__any_on+0x3e>
   105bc:	add.w	r3, r2, r3, lsl #2
   105c0:	cmp	r3, r2
   105c2:	bhi.n	105cc <__any_on+0x36>
   105c4:	movs	r0, #0
   105c6:	pop	{r4, pc}
   105c8:	mov	r3, r0
   105ca:	b.n	105bc <__any_on+0x26>
   105cc:	ldr.w	r1, [r3, #-4]!
   105d0:	cmp	r1, #0
   105d2:	beq.n	105c0 <__any_on+0x2a>
   105d4:	movs	r0, #1
   105d6:	b.n	105c6 <__any_on+0x30>

000105d8 <_malloc_usable_size_r>:
   105d8:	ldr.w	r3, [r1, #-4]
   105dc:	subs	r0, r3, #4
   105de:	cmp	r3, #0
   105e0:	itt	lt
   105e2:	ldrlt	r3, [r1, r0]
   105e4:	addlt	r0, r0, r3
   105e6:	bx	lr

000105e8 <__ascii_wctomb>:
   105e8:	cbz	r1, 105fe <__ascii_wctomb+0x16>
   105ea:	cmp	r2, #255	; 0xff
   105ec:	ittet	hi
   105ee:	movhi	r3, #138	; 0x8a
   105f0:	strhi	r3, [r0, #0]
   105f2:	strbls	r2, [r1, #0]
   105f4:	movhi.w	r0, #4294967295
   105f8:	it	ls
   105fa:	movls	r0, #1
   105fc:	bx	lr
   105fe:	mov	r0, r1
   10600:	bx	lr
	...

00010604 <fcvtbuf>:
   10604:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10608:	mov	r8, r2
   1060a:	ldr	r2, [pc, #136]	; (10694 <fcvtbuf+0x90>)
   1060c:	sub	sp, #28
   1060e:	ldr	r6, [r2, #0]
   10610:	mov	r5, r0
   10612:	mov	r7, r1
   10614:	mov	r4, r3
   10616:	cbnz	r3, 10642 <fcvtbuf+0x3e>
   10618:	ldr	r2, [r6, #40]	; 0x28
   1061a:	ldr	r1, [r6, #44]	; 0x2c
   1061c:	add.w	r3, r0, #35	; 0x23
   10620:	cmp	r2, r3
   10622:	bgt.n	10640 <fcvtbuf+0x3c>
   10624:	add.w	r9, r0, #36	; 0x24
   10628:	mov	r2, r9
   1062a:	mov	r0, r6
   1062c:	vstr	d0, [sp, #8]
   10630:	bl	c8ec <_realloc_r>
   10634:	mov	r4, r0
   10636:	cbz	r0, 1067c <fcvtbuf+0x78>
   10638:	strd	r9, r0, [r6, #40]	; 0x28
   1063c:	vldr	d0, [sp, #8]
   10640:	ldr	r4, [r6, #44]	; 0x2c
   10642:	add	r3, sp, #20
   10644:	strd	r8, r3, [sp]
   10648:	mov	r2, r5
   1064a:	mov	r3, r7
   1064c:	movs	r1, #3
   1064e:	mov	r0, r6
   10650:	bl	ea40 <_dtoa_r>
   10654:	ldr	r3, [r7, #0]
   10656:	negs	r3, r3
   10658:	mov	r2, r4
   1065a:	subs	r3, r3, r4
   1065c:	ldr	r1, [sp, #20]
   1065e:	cmp	r1, r0
   10660:	add.w	r6, r2, r3
   10664:	bhi.n	10684 <fcvtbuf+0x80>
   10666:	mov	r1, r2
   10668:	movs	r7, #48	; 0x30
   1066a:	adds	r0, r1, r3
   1066c:	cmp	r5, r0
   1066e:	bgt.n	1068e <fcvtbuf+0x8a>
   10670:	subs	r3, r5, r6
   10672:	cmp	r5, r6
   10674:	it	lt
   10676:	movlt	r3, #0
   10678:	movs	r1, #0
   1067a:	strb	r1, [r2, r3]
   1067c:	mov	r0, r4
   1067e:	add	sp, #28
   10680:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10684:	ldrb.w	r1, [r0], #1
   10688:	strb.w	r1, [r2], #1
   1068c:	b.n	1065c <fcvtbuf+0x58>
   1068e:	strb.w	r7, [r1], #1
   10692:	b.n	1066a <fcvtbuf+0x66>
   10694:	.word	0x2000228c

00010698 <__ssputs_r>:
   10698:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1069c:	ldr	r6, [r1, #8]
   1069e:	mov	r7, r3
   106a0:	cmp	r6, r7
   106a2:	ldr	r3, [r1, #0]
   106a4:	mov	sl, r0
   106a6:	mov	r4, r1
   106a8:	mov	r8, r2
   106aa:	bhi.n	10706 <__ssputs_r+0x6e>
   106ac:	ldrh	r2, [r1, #12]
   106ae:	tst.w	r2, #1152	; 0x480
   106b2:	beq.n	10702 <__ssputs_r+0x6a>
   106b4:	ldr	r5, [r4, #20]
   106b6:	ldr	r1, [r1, #16]
   106b8:	add.w	r5, r5, r5, lsl #1
   106bc:	sub.w	r9, r3, r1
   106c0:	add.w	r5, r5, r5, lsr #31
   106c4:	adds	r3, r7, #1
   106c6:	add	r3, r9
   106c8:	asrs	r5, r5, #1
   106ca:	cmp	r5, r3
   106cc:	it	cc
   106ce:	movcc	r5, r3
   106d0:	lsls	r3, r2, #21
   106d2:	bpl.n	10724 <__ssputs_r+0x8c>
   106d4:	mov	r1, r5
   106d6:	bl	c7e8 <_malloc_r>
   106da:	mov	r6, r0
   106dc:	cbz	r0, 10738 <__ssputs_r+0xa0>
   106de:	ldr	r1, [r4, #16]
   106e0:	mov	r2, r9
   106e2:	bl	9dd0 <memcpy>
   106e6:	ldrh	r3, [r4, #12]
   106e8:	bic.w	r3, r3, #1152	; 0x480
   106ec:	orr.w	r3, r3, #128	; 0x80
   106f0:	strh	r3, [r4, #12]
   106f2:	str	r6, [r4, #16]
   106f4:	str	r5, [r4, #20]
   106f6:	add	r6, r9
   106f8:	sub.w	r5, r5, r9
   106fc:	str	r6, [r4, #0]
   106fe:	str	r5, [r4, #8]
   10700:	mov	r6, r7
   10702:	cmp	r6, r7
   10704:	bls.n	10708 <__ssputs_r+0x70>
   10706:	mov	r6, r7
   10708:	ldr	r0, [r4, #0]
   1070a:	mov	r2, r6
   1070c:	mov	r1, r8
   1070e:	bl	e66c <memmove>
   10712:	ldr	r3, [r4, #8]
   10714:	subs	r3, r3, r6
   10716:	str	r3, [r4, #8]
   10718:	ldr	r3, [r4, #0]
   1071a:	add	r3, r6
   1071c:	str	r3, [r4, #0]
   1071e:	movs	r0, #0
   10720:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10724:	mov	r2, r5
   10726:	bl	c8ec <_realloc_r>
   1072a:	mov	r6, r0
   1072c:	cmp	r0, #0
   1072e:	bne.n	106f2 <__ssputs_r+0x5a>
   10730:	ldr	r1, [r4, #16]
   10732:	mov	r0, sl
   10734:	bl	f518 <_free_r>
   10738:	movs	r3, #12
   1073a:	str.w	r3, [sl]
   1073e:	ldrh	r3, [r4, #12]
   10740:	orr.w	r3, r3, #64	; 0x40
   10744:	strh	r3, [r4, #12]
   10746:	mov.w	r0, #4294967295
   1074a:	b.n	10720 <__ssputs_r+0x88>

0001074c <_svfiprintf_r>:
   1074c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10750:	mov	r8, r3
   10752:	ldrh	r3, [r1, #12]
   10754:	lsls	r3, r3, #24
   10756:	sub	sp, #116	; 0x74
   10758:	mov	r7, r0
   1075a:	mov	r5, r1
   1075c:	mov	r4, r2
   1075e:	bpl.n	1077e <_svfiprintf_r+0x32>
   10760:	ldr	r3, [r1, #16]
   10762:	cbnz	r3, 1077e <_svfiprintf_r+0x32>
   10764:	movs	r1, #64	; 0x40
   10766:	bl	c7e8 <_malloc_r>
   1076a:	str	r0, [r5, #0]
   1076c:	str	r0, [r5, #16]
   1076e:	cbnz	r0, 1077a <_svfiprintf_r+0x2e>
   10770:	movs	r3, #12
   10772:	str	r3, [r7, #0]
   10774:	mov.w	r0, #4294967295
   10778:	b.n	1091c <_svfiprintf_r+0x1d0>
   1077a:	movs	r3, #64	; 0x40
   1077c:	str	r3, [r5, #20]
   1077e:	movs	r3, #0
   10780:	str	r3, [sp, #36]	; 0x24
   10782:	movs	r3, #32
   10784:	strb.w	r3, [sp, #41]	; 0x29
   10788:	str.w	r8, [sp, #12]
   1078c:	movs	r3, #48	; 0x30
   1078e:	ldr.w	r8, [pc, #420]	; 10934 <_svfiprintf_r+0x1e8>
   10792:	strb.w	r3, [sp, #42]	; 0x2a
   10796:	mov.w	r9, #1
   1079a:	mov	r3, r4
   1079c:	mov	sl, r3
   1079e:	ldrb.w	r2, [r3], #1
   107a2:	cbz	r2, 107a8 <_svfiprintf_r+0x5c>
   107a4:	cmp	r2, #37	; 0x25
   107a6:	bne.n	1079c <_svfiprintf_r+0x50>
   107a8:	subs.w	fp, sl, r4
   107ac:	beq.n	107c6 <_svfiprintf_r+0x7a>
   107ae:	mov	r3, fp
   107b0:	mov	r2, r4
   107b2:	mov	r1, r5
   107b4:	mov	r0, r7
   107b6:	bl	10698 <__ssputs_r>
   107ba:	adds	r0, #1
   107bc:	beq.w	10912 <_svfiprintf_r+0x1c6>
   107c0:	ldr	r2, [sp, #36]	; 0x24
   107c2:	add	r2, fp
   107c4:	str	r2, [sp, #36]	; 0x24
   107c6:	ldrb.w	r3, [sl]
   107ca:	cmp	r3, #0
   107cc:	beq.w	10912 <_svfiprintf_r+0x1c6>
   107d0:	movs	r3, #0
   107d2:	mov.w	r2, #4294967295
   107d6:	strd	r2, r3, [sp, #20]
   107da:	add.w	sl, sl, #1
   107de:	str	r3, [sp, #16]
   107e0:	str	r3, [sp, #28]
   107e2:	strb.w	r3, [sp, #83]	; 0x53
   107e6:	str	r3, [sp, #104]	; 0x68
   107e8:	mov	r4, sl
   107ea:	movs	r2, #5
   107ec:	ldrb.w	r1, [r4], #1
   107f0:	ldr	r0, [pc, #320]	; (10934 <_svfiprintf_r+0x1e8>)
   107f2:	bl	e860 <memchr>
   107f6:	ldr	r2, [sp, #16]
   107f8:	cbnz	r0, 10832 <_svfiprintf_r+0xe6>
   107fa:	lsls	r0, r2, #27
   107fc:	itt	mi
   107fe:	movmi	r3, #32
   10800:	strbmi.w	r3, [sp, #83]	; 0x53
   10804:	lsls	r1, r2, #28
   10806:	itt	mi
   10808:	movmi	r3, #43	; 0x2b
   1080a:	strbmi.w	r3, [sp, #83]	; 0x53
   1080e:	ldrb.w	r3, [sl]
   10812:	cmp	r3, #42	; 0x2a
   10814:	beq.n	10842 <_svfiprintf_r+0xf6>
   10816:	ldr	r2, [sp, #28]
   10818:	mov	r4, sl
   1081a:	movs	r0, #0
   1081c:	mov.w	ip, #10
   10820:	mov	r1, r4
   10822:	ldrb.w	r3, [r1], #1
   10826:	subs	r3, #48	; 0x30
   10828:	cmp	r3, #9
   1082a:	bls.n	108c8 <_svfiprintf_r+0x17c>
   1082c:	cbz	r0, 1085c <_svfiprintf_r+0x110>
   1082e:	str	r2, [sp, #28]
   10830:	b.n	1085c <_svfiprintf_r+0x110>
   10832:	sub.w	r3, r0, r8
   10836:	lsl.w	r3, r9, r3
   1083a:	orrs	r3, r2
   1083c:	str	r3, [sp, #16]
   1083e:	mov	sl, r4
   10840:	b.n	107e8 <_svfiprintf_r+0x9c>
   10842:	ldr	r3, [sp, #12]
   10844:	adds	r1, r3, #4
   10846:	ldr	r3, [r3, #0]
   10848:	str	r1, [sp, #12]
   1084a:	cmp	r3, #0
   1084c:	ittet	lt
   1084e:	neglt	r3, r3
   10850:	orrlt.w	r2, r2, #2
   10854:	strge	r3, [sp, #28]
   10856:	strlt	r3, [sp, #28]
   10858:	it	lt
   1085a:	strlt	r2, [sp, #16]
   1085c:	ldrb	r3, [r4, #0]
   1085e:	cmp	r3, #46	; 0x2e
   10860:	bne.n	1087c <_svfiprintf_r+0x130>
   10862:	ldrb	r3, [r4, #1]
   10864:	cmp	r3, #42	; 0x2a
   10866:	bne.n	108d2 <_svfiprintf_r+0x186>
   10868:	ldr	r3, [sp, #12]
   1086a:	adds	r2, r3, #4
   1086c:	ldr	r3, [r3, #0]
   1086e:	str	r2, [sp, #12]
   10870:	cmp	r3, #0
   10872:	it	lt
   10874:	movlt.w	r3, #4294967295
   10878:	adds	r4, #2
   1087a:	str	r3, [sp, #20]
   1087c:	ldr.w	sl, [pc, #196]	; 10944 <_svfiprintf_r+0x1f8>
   10880:	ldrb	r1, [r4, #0]
   10882:	movs	r2, #3
   10884:	mov	r0, sl
   10886:	bl	e860 <memchr>
   1088a:	cbz	r0, 1089c <_svfiprintf_r+0x150>
   1088c:	ldr	r3, [sp, #16]
   1088e:	sub.w	r0, r0, sl
   10892:	movs	r2, #64	; 0x40
   10894:	lsls	r2, r0
   10896:	orrs	r3, r2
   10898:	adds	r4, #1
   1089a:	str	r3, [sp, #16]
   1089c:	ldrb.w	r1, [r4], #1
   108a0:	ldr	r0, [pc, #148]	; (10938 <_svfiprintf_r+0x1ec>)
   108a2:	strb.w	r1, [sp, #40]	; 0x28
   108a6:	movs	r2, #6
   108a8:	bl	e860 <memchr>
   108ac:	cmp	r0, #0
   108ae:	beq.n	10922 <_svfiprintf_r+0x1d6>
   108b0:	ldr	r3, [pc, #136]	; (1093c <_svfiprintf_r+0x1f0>)
   108b2:	cbnz	r3, 108fc <_svfiprintf_r+0x1b0>
   108b4:	ldr	r3, [sp, #12]
   108b6:	adds	r3, #7
   108b8:	bic.w	r3, r3, #7
   108bc:	adds	r3, #8
   108be:	str	r3, [sp, #12]
   108c0:	ldr	r3, [sp, #36]	; 0x24
   108c2:	add	r3, r6
   108c4:	str	r3, [sp, #36]	; 0x24
   108c6:	b.n	1079a <_svfiprintf_r+0x4e>
   108c8:	mla	r2, ip, r2, r3
   108cc:	mov	r4, r1
   108ce:	movs	r0, #1
   108d0:	b.n	10820 <_svfiprintf_r+0xd4>
   108d2:	movs	r3, #0
   108d4:	adds	r4, #1
   108d6:	str	r3, [sp, #20]
   108d8:	mov	r1, r3
   108da:	mov.w	ip, #10
   108de:	mov	r0, r4
   108e0:	ldrb.w	r2, [r0], #1
   108e4:	subs	r2, #48	; 0x30
   108e6:	cmp	r2, #9
   108e8:	bls.n	108f2 <_svfiprintf_r+0x1a6>
   108ea:	cmp	r3, #0
   108ec:	beq.n	1087c <_svfiprintf_r+0x130>
   108ee:	str	r1, [sp, #20]
   108f0:	b.n	1087c <_svfiprintf_r+0x130>
   108f2:	mla	r1, ip, r1, r2
   108f6:	mov	r4, r0
   108f8:	movs	r3, #1
   108fa:	b.n	108de <_svfiprintf_r+0x192>
   108fc:	add	r3, sp, #12
   108fe:	str	r3, [sp, #0]
   10900:	mov	r2, r5
   10902:	ldr	r3, [pc, #60]	; (10940 <_svfiprintf_r+0x1f4>)
   10904:	add	r1, sp, #16
   10906:	mov	r0, r7
   10908:	bl	d748 <_printf_float>
   1090c:	adds	r2, r0, #1
   1090e:	mov	r6, r0
   10910:	bne.n	108c0 <_svfiprintf_r+0x174>
   10912:	ldrh	r3, [r5, #12]
   10914:	lsls	r3, r3, #25
   10916:	bmi.w	10774 <_svfiprintf_r+0x28>
   1091a:	ldr	r0, [sp, #36]	; 0x24
   1091c:	add	sp, #116	; 0x74
   1091e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10922:	add	r3, sp, #12
   10924:	str	r3, [sp, #0]
   10926:	mov	r2, r5
   10928:	ldr	r3, [pc, #20]	; (10940 <_svfiprintf_r+0x1f4>)
   1092a:	add	r1, sp, #16
   1092c:	mov	r0, r7
   1092e:	bl	dc58 <_printf_i>
   10932:	b.n	1090c <_svfiprintf_r+0x1c0>
   10934:	.word	0x200013db
   10938:	.word	0x200013e5
   1093c:	.word	0x0000d749
   10940:	.word	0x00010699
   10944:	.word	0x200013e1

00010948 <_sungetc_r>:
   10948:	push	{r3, r4, r5, lr}
   1094a:	adds	r3, r1, #1
   1094c:	mov	r4, r2
   1094e:	bne.n	10958 <_sungetc_r+0x10>
   10950:	mov.w	r5, #4294967295
   10954:	mov	r0, r5
   10956:	pop	{r3, r4, r5, pc}
   10958:	ldrh	r3, [r2, #12]
   1095a:	bic.w	r3, r3, #32
   1095e:	strh	r3, [r2, #12]
   10960:	ldr	r3, [r4, #52]	; 0x34
   10962:	ldr	r2, [r2, #4]
   10964:	uxtb	r5, r1
   10966:	cbz	r3, 1098c <_sungetc_r+0x44>
   10968:	ldr	r3, [r4, #56]	; 0x38
   1096a:	cmp	r3, r2
   1096c:	ble.n	10980 <_sungetc_r+0x38>
   1096e:	ldr	r3, [r4, #0]
   10970:	subs	r2, r3, #1
   10972:	str	r2, [r4, #0]
   10974:	strb.w	r5, [r3, #-1]
   10978:	ldr	r3, [r4, #4]
   1097a:	adds	r3, #1
   1097c:	str	r3, [r4, #4]
   1097e:	b.n	10954 <_sungetc_r+0xc>
   10980:	mov	r1, r4
   10982:	bl	11156 <__submore>
   10986:	cmp	r0, #0
   10988:	beq.n	1096e <_sungetc_r+0x26>
   1098a:	b.n	10950 <_sungetc_r+0x8>
   1098c:	ldr	r1, [r4, #16]
   1098e:	ldr	r3, [r4, #0]
   10990:	cbz	r1, 109a8 <_sungetc_r+0x60>
   10992:	cmp	r1, r3
   10994:	bcs.n	109a8 <_sungetc_r+0x60>
   10996:	ldrb.w	r1, [r3, #-1]
   1099a:	cmp	r1, r5
   1099c:	bne.n	109a8 <_sungetc_r+0x60>
   1099e:	subs	r3, #1
   109a0:	adds	r2, #1
   109a2:	str	r3, [r4, #0]
   109a4:	str	r2, [r4, #4]
   109a6:	b.n	10954 <_sungetc_r+0xc>
   109a8:	strd	r3, r2, [r4, #60]	; 0x3c
   109ac:	add.w	r3, r4, #68	; 0x44
   109b0:	str	r3, [r4, #52]	; 0x34
   109b2:	movs	r3, #3
   109b4:	str	r3, [r4, #56]	; 0x38
   109b6:	mov	r3, r4
   109b8:	strb.w	r5, [r3, #70]!
   109bc:	str	r3, [r4, #0]
   109be:	movs	r3, #1
   109c0:	b.n	1097c <_sungetc_r+0x34>

000109c2 <__ssrefill_r>:
   109c2:	push	{r4, lr}
   109c4:	mov	r4, r1
   109c6:	ldr	r1, [r1, #52]	; 0x34
   109c8:	cbz	r1, 109e6 <__ssrefill_r+0x24>
   109ca:	add.w	r3, r4, #68	; 0x44
   109ce:	cmp	r1, r3
   109d0:	beq.n	109d6 <__ssrefill_r+0x14>
   109d2:	bl	f518 <_free_r>
   109d6:	ldr	r3, [r4, #64]	; 0x40
   109d8:	str	r3, [r4, #4]
   109da:	movs	r0, #0
   109dc:	str	r0, [r4, #52]	; 0x34
   109de:	cbz	r3, 109e6 <__ssrefill_r+0x24>
   109e0:	ldr	r3, [r4, #60]	; 0x3c
   109e2:	str	r3, [r4, #0]
   109e4:	pop	{r4, pc}
   109e6:	ldr	r3, [r4, #16]
   109e8:	str	r3, [r4, #0]
   109ea:	movs	r3, #0
   109ec:	str	r3, [r4, #4]
   109ee:	ldrh	r3, [r4, #12]
   109f0:	orr.w	r3, r3, #32
   109f4:	strh	r3, [r4, #12]
   109f6:	mov.w	r0, #4294967295
   109fa:	b.n	109e4 <__ssrefill_r+0x22>

000109fc <__ssvfiscanf_r>:
   109fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10a00:	mov	r4, r1
   10a02:	sub.w	sp, sp, #648	; 0x288
   10a06:	movs	r1, #0
   10a08:	strd	r1, r1, [sp, #272]	; 0x110
   10a0c:	ldr	r1, [pc, #664]	; (10ca8 <__ssvfiscanf_r+0x2ac>)
   10a0e:	str	r1, [sp, #640]	; 0x280
   10a10:	add.w	r8, sp, #4
   10a14:	ldr	r1, [pc, #660]	; (10cac <__ssvfiscanf_r+0x2b0>)
   10a16:	ldr	r7, [pc, #664]	; (10cb0 <__ssvfiscanf_r+0x2b4>)
   10a18:	ldr.w	r9, [pc, #664]	; 10cb4 <__ssvfiscanf_r+0x2b8>
   10a1c:	str.w	r8, [sp, #280]	; 0x118
   10a20:	mov	r6, r0
   10a22:	str	r1, [sp, #644]	; 0x284
   10a24:	str	r3, [sp, #0]
   10a26:	ldrb	r3, [r2, #0]
   10a28:	cmp	r3, #0
   10a2a:	beq.w	10ce2 <__ssvfiscanf_r+0x2e6>
   10a2e:	ldrb	r1, [r7, r3]
   10a30:	ands.w	r1, r1, #8
   10a34:	add.w	r5, r2, #1
   10a38:	beq.n	10a6e <__ssvfiscanf_r+0x72>
   10a3a:	ldr	r3, [r4, #4]
   10a3c:	cmp	r3, #0
   10a3e:	ble.n	10a60 <__ssvfiscanf_r+0x64>
   10a40:	ldr	r3, [r4, #0]
   10a42:	ldrb	r2, [r3, #0]
   10a44:	ldrb	r2, [r7, r2]
   10a46:	lsls	r2, r2, #28
   10a48:	bmi.n	10a4e <__ssvfiscanf_r+0x52>
   10a4a:	mov	r2, r5
   10a4c:	b.n	10a26 <__ssvfiscanf_r+0x2a>
   10a4e:	ldr	r2, [sp, #276]	; 0x114
   10a50:	adds	r2, #1
   10a52:	str	r2, [sp, #276]	; 0x114
   10a54:	ldr	r2, [r4, #4]
   10a56:	adds	r3, #1
   10a58:	subs	r2, #1
   10a5a:	str	r2, [r4, #4]
   10a5c:	str	r3, [r4, #0]
   10a5e:	b.n	10a3a <__ssvfiscanf_r+0x3e>
   10a60:	ldr	r3, [sp, #644]	; 0x284
   10a62:	mov	r1, r4
   10a64:	mov	r0, r6
   10a66:	blx	r3
   10a68:	cmp	r0, #0
   10a6a:	beq.n	10a40 <__ssvfiscanf_r+0x44>
   10a6c:	b.n	10a4a <__ssvfiscanf_r+0x4e>
   10a6e:	cmp	r3, #37	; 0x25
   10a70:	beq.n	10a98 <__ssvfiscanf_r+0x9c>
   10a72:	mov	sl, r3
   10a74:	ldr	r3, [r4, #4]
   10a76:	cmp	r3, #0
   10a78:	ble.w	10b9e <__ssvfiscanf_r+0x1a2>
   10a7c:	ldr	r2, [r4, #0]
   10a7e:	ldrb	r3, [r2, #0]
   10a80:	cmp	r3, sl
   10a82:	bne.w	10ce2 <__ssvfiscanf_r+0x2e6>
   10a86:	ldr	r3, [r4, #4]
   10a88:	subs	r3, #1
   10a8a:	str	r3, [r4, #4]
   10a8c:	ldr	r3, [sp, #276]	; 0x114
   10a8e:	adds	r2, #1
   10a90:	adds	r3, #1
   10a92:	str	r2, [r4, #0]
   10a94:	str	r3, [sp, #276]	; 0x114
   10a96:	b.n	10a4a <__ssvfiscanf_r+0x4e>
   10a98:	str	r1, [sp, #260]	; 0x104
   10a9a:	str	r1, [sp, #268]	; 0x10c
   10a9c:	ldrb	r3, [r2, #1]
   10a9e:	cmp	r3, #42	; 0x2a
   10aa0:	ittt	eq
   10aa2:	moveq	r3, #16
   10aa4:	addeq	r5, r2, #2
   10aa6:	streq	r3, [sp, #260]	; 0x104
   10aa8:	movs	r2, #10
   10aaa:	mov	sl, r5
   10aac:	ldrb.w	r1, [sl], #1
   10ab0:	sub.w	r3, r1, #48	; 0x30
   10ab4:	cmp	r3, #9
   10ab6:	bls.n	10af2 <__ssvfiscanf_r+0xf6>
   10ab8:	ldr	r0, [pc, #504]	; (10cb4 <__ssvfiscanf_r+0x2b8>)
   10aba:	movs	r2, #3
   10abc:	bl	e860 <memchr>
   10ac0:	cbz	r0, 10ad2 <__ssvfiscanf_r+0xd6>
   10ac2:	ldr	r2, [sp, #260]	; 0x104
   10ac4:	sub.w	r0, r0, r9
   10ac8:	movs	r3, #1
   10aca:	lsls	r3, r0
   10acc:	orrs	r3, r2
   10ace:	str	r3, [sp, #260]	; 0x104
   10ad0:	mov	r5, sl
   10ad2:	ldrb.w	r3, [r5], #1
   10ad6:	cmp	r3, #120	; 0x78
   10ad8:	bhi.n	10ae8 <__ssvfiscanf_r+0xec>
   10ada:	cmp	r3, #87	; 0x57
   10adc:	bhi.n	10b00 <__ssvfiscanf_r+0x104>
   10ade:	cmp	r3, #37	; 0x25
   10ae0:	beq.n	10a72 <__ssvfiscanf_r+0x76>
   10ae2:	bhi.n	10b94 <__ssvfiscanf_r+0x198>
   10ae4:	cmp	r3, #0
   10ae6:	beq.n	10bb4 <__ssvfiscanf_r+0x1b8>
   10ae8:	movs	r3, #3
   10aea:	str	r3, [sp, #284]	; 0x11c
   10aec:	movs	r3, #10
   10aee:	str	r3, [sp, #264]	; 0x108
   10af0:	b.n	10be0 <__ssvfiscanf_r+0x1e4>
   10af2:	ldr	r3, [sp, #268]	; 0x10c
   10af4:	mla	r1, r2, r3, r1
   10af8:	subs	r1, #48	; 0x30
   10afa:	str	r1, [sp, #268]	; 0x10c
   10afc:	mov	r5, sl
   10afe:	b.n	10aaa <__ssvfiscanf_r+0xae>
   10b00:	sub.w	r2, r3, #88	; 0x58
   10b04:	cmp	r2, #32
   10b06:	bhi.n	10ae8 <__ssvfiscanf_r+0xec>
   10b08:	add	r1, pc, #4	; (adr r1, 10b10 <__ssvfiscanf_r+0x114>)
   10b0a:	ldr.w	pc, [r1, r2, lsl #2]
   10b0e:	nop
   10b10:	.word	0x00010bc3
   10b14:	.word	0x00010ae9
   10b18:	.word	0x00010ae9
   10b1c:	.word	0x00010c21
   10b20:	.word	0x00010ae9
   10b24:	.word	0x00010ae9
   10b28:	.word	0x00010ae9
   10b2c:	.word	0x00010ae9
   10b30:	.word	0x00010ae9
   10b34:	.word	0x00010ae9
   10b38:	.word	0x00010ae9
   10b3c:	.word	0x00010c37
   10b40:	.word	0x00010c1d
   10b44:	.word	0x00010b9b
   10b48:	.word	0x00010b9b
   10b4c:	.word	0x00010b9b
   10b50:	.word	0x00010ae9
   10b54:	.word	0x00010bd9
   10b58:	.word	0x00010ae9
   10b5c:	.word	0x00010ae9
   10b60:	.word	0x00010ae9
   10b64:	.word	0x00010ae9
   10b68:	.word	0x00010c47
   10b6c:	.word	0x00010c15
   10b70:	.word	0x00010bbb
   10b74:	.word	0x00010ae9
   10b78:	.word	0x00010ae9
   10b7c:	.word	0x00010c43
   10b80:	.word	0x00010ae9
   10b84:	.word	0x00010c1d
   10b88:	.word	0x00010ae9
   10b8c:	.word	0x00010ae9
   10b90:	.word	0x00010bc3
   10b94:	subs	r3, #69	; 0x45
   10b96:	cmp	r3, #2
   10b98:	bhi.n	10ae8 <__ssvfiscanf_r+0xec>
   10b9a:	movs	r3, #5
   10b9c:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10b9e:	ldr	r3, [sp, #644]	; 0x284
   10ba0:	mov	r1, r4
   10ba2:	mov	r0, r6
   10ba4:	blx	r3
   10ba6:	cmp	r0, #0
   10ba8:	beq.w	10a7c <__ssvfiscanf_r+0x80>
   10bac:	ldr	r0, [sp, #272]	; 0x110
   10bae:	cmp	r0, #0
   10bb0:	bne.w	10cce <__ssvfiscanf_r+0x2d2>
   10bb4:	mov.w	r0, #4294967295
   10bb8:	b.n	10cda <__ssvfiscanf_r+0x2de>
   10bba:	ldr	r2, [sp, #260]	; 0x104
   10bbc:	orr.w	r2, r2, #32
   10bc0:	str	r2, [sp, #260]	; 0x104
   10bc2:	ldr	r2, [sp, #260]	; 0x104
   10bc4:	orr.w	r2, r2, #512	; 0x200
   10bc8:	str	r2, [sp, #260]	; 0x104
   10bca:	movs	r2, #16
   10bcc:	cmp	r3, #111	; 0x6f
   10bce:	str	r2, [sp, #264]	; 0x108
   10bd0:	ite	cc
   10bd2:	movcc	r3, #3
   10bd4:	movcs	r3, #4
   10bd6:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10bd8:	movs	r3, #0
   10bda:	str	r3, [sp, #264]	; 0x108
   10bdc:	movs	r3, #3
   10bde:	str	r3, [sp, #284]	; 0x11c
   10be0:	ldr	r3, [r4, #4]
   10be2:	cmp	r3, #0
   10be4:	ble.n	10c62 <__ssvfiscanf_r+0x266>
   10be6:	ldr	r3, [sp, #260]	; 0x104
   10be8:	lsls	r1, r3, #25
   10bea:	bmi.n	10bf6 <__ssvfiscanf_r+0x1fa>
   10bec:	ldr	r3, [r4, #0]
   10bee:	ldrb	r2, [r3, #0]
   10bf0:	ldrb	r2, [r7, r2]
   10bf2:	lsls	r2, r2, #28
   10bf4:	bmi.n	10c70 <__ssvfiscanf_r+0x274>
   10bf6:	ldr	r3, [sp, #284]	; 0x11c
   10bf8:	cmp	r3, #2
   10bfa:	bgt.n	10c94 <__ssvfiscanf_r+0x298>
   10bfc:	mov	r3, sp
   10bfe:	mov	r2, r4
   10c00:	add	r1, sp, #260	; 0x104
   10c02:	mov	r0, r6
   10c04:	bl	10cec <_scanf_chars>
   10c08:	cmp	r0, #1
   10c0a:	beq.n	10ce2 <__ssvfiscanf_r+0x2e6>
   10c0c:	cmp	r0, #2
   10c0e:	bne.w	10a4a <__ssvfiscanf_r+0x4e>
   10c12:	b.n	10bac <__ssvfiscanf_r+0x1b0>
   10c14:	movs	r3, #8
   10c16:	str	r3, [sp, #264]	; 0x108
   10c18:	movs	r3, #4
   10c1a:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10c1c:	movs	r2, #10
   10c1e:	b.n	10bcc <__ssvfiscanf_r+0x1d0>
   10c20:	mov	r1, r5
   10c22:	mov	r0, r8
   10c24:	bl	110e4 <__sccl>
   10c28:	ldr	r3, [sp, #260]	; 0x104
   10c2a:	orr.w	r3, r3, #64	; 0x40
   10c2e:	str	r3, [sp, #260]	; 0x104
   10c30:	mov	r5, r0
   10c32:	movs	r3, #1
   10c34:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10c36:	ldr	r3, [sp, #260]	; 0x104
   10c38:	orr.w	r3, r3, #64	; 0x40
   10c3c:	str	r3, [sp, #260]	; 0x104
   10c3e:	movs	r3, #0
   10c40:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10c42:	movs	r3, #2
   10c44:	b.n	10bde <__ssvfiscanf_r+0x1e2>
   10c46:	ldr	r0, [sp, #260]	; 0x104
   10c48:	lsls	r3, r0, #27
   10c4a:	bmi.w	10a4a <__ssvfiscanf_r+0x4e>
   10c4e:	ldr	r3, [sp, #0]
   10c50:	ldr	r2, [sp, #276]	; 0x114
   10c52:	adds	r1, r3, #4
   10c54:	str	r1, [sp, #0]
   10c56:	ldr	r3, [r3, #0]
   10c58:	lsls	r0, r0, #31
   10c5a:	ite	mi
   10c5c:	strhmi	r2, [r3, #0]
   10c5e:	strpl	r2, [r3, #0]
   10c60:	b.n	10a4a <__ssvfiscanf_r+0x4e>
   10c62:	ldr	r3, [sp, #644]	; 0x284
   10c64:	mov	r1, r4
   10c66:	mov	r0, r6
   10c68:	blx	r3
   10c6a:	cmp	r0, #0
   10c6c:	beq.n	10be6 <__ssvfiscanf_r+0x1ea>
   10c6e:	b.n	10bac <__ssvfiscanf_r+0x1b0>
   10c70:	ldr	r2, [sp, #276]	; 0x114
   10c72:	adds	r2, #1
   10c74:	str	r2, [sp, #276]	; 0x114
   10c76:	ldr	r2, [r4, #4]
   10c78:	subs	r2, #1
   10c7a:	cmp	r2, #0
   10c7c:	str	r2, [r4, #4]
   10c7e:	ble.n	10c86 <__ssvfiscanf_r+0x28a>
   10c80:	adds	r3, #1
   10c82:	str	r3, [r4, #0]
   10c84:	b.n	10bec <__ssvfiscanf_r+0x1f0>
   10c86:	ldr	r3, [sp, #644]	; 0x284
   10c88:	mov	r1, r4
   10c8a:	mov	r0, r6
   10c8c:	blx	r3
   10c8e:	cmp	r0, #0
   10c90:	beq.n	10bec <__ssvfiscanf_r+0x1f0>
   10c92:	b.n	10bac <__ssvfiscanf_r+0x1b0>
   10c94:	cmp	r3, #4
   10c96:	bgt.n	10cb8 <__ssvfiscanf_r+0x2bc>
   10c98:	mov	r3, sp
   10c9a:	mov	r2, r4
   10c9c:	add	r1, sp, #260	; 0x104
   10c9e:	mov	r0, r6
   10ca0:	bl	10da0 <_scanf_i>
   10ca4:	b.n	10c08 <__ssvfiscanf_r+0x20c>
   10ca6:	nop
   10ca8:	.word	0x00010949
   10cac:	.word	0x000109c3
   10cb0:	.word	0x20001206
   10cb4:	.word	0x200013e1
   10cb8:	ldr	r3, [pc, #44]	; (10ce8 <__ssvfiscanf_r+0x2ec>)
   10cba:	cmp	r3, #0
   10cbc:	beq.w	10a4a <__ssvfiscanf_r+0x4e>
   10cc0:	mov	r3, sp
   10cc2:	mov	r2, r4
   10cc4:	add	r1, sp, #260	; 0x104
   10cc6:	mov	r0, r6
   10cc8:	bl	de9c <_scanf_float>
   10ccc:	b.n	10c08 <__ssvfiscanf_r+0x20c>
   10cce:	ldrh	r3, [r4, #12]
   10cd0:	tst.w	r3, #64	; 0x40
   10cd4:	it	ne
   10cd6:	movne.w	r0, #4294967295
   10cda:	add.w	sp, sp, #648	; 0x288
   10cde:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10ce2:	ldr	r0, [sp, #272]	; 0x110
   10ce4:	b.n	10cda <__ssvfiscanf_r+0x2de>
   10ce6:	nop
   10ce8:	.word	0x0000de9d

00010cec <_scanf_chars>:
   10cec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10cf0:	mov	r5, r2
   10cf2:	ldr	r2, [r1, #8]
   10cf4:	mov	r8, r0
   10cf6:	mov	r4, r1
   10cf8:	cbnz	r2, 10d08 <_scanf_chars+0x1c>
   10cfa:	ldr	r2, [r1, #24]
   10cfc:	cmp	r2, #0
   10cfe:	ite	eq
   10d00:	moveq	r2, #1
   10d02:	movne.w	r2, #4294967295
   10d06:	str	r2, [r1, #8]
   10d08:	ldr	r2, [r4, #0]
   10d0a:	ldr.w	r9, [pc, #144]	; 10d9c <_scanf_chars+0xb0>
   10d0e:	lsls	r1, r2, #27
   10d10:	itttt	pl
   10d12:	ldrpl	r2, [r3, #0]
   10d14:	addpl	r1, r2, #4
   10d16:	strpl	r1, [r3, #0]
   10d18:	ldrpl	r6, [r2, #0]
   10d1a:	movs	r7, #0
   10d1c:	ldr	r0, [r4, #24]
   10d1e:	cbz	r0, 10d44 <_scanf_chars+0x58>
   10d20:	cmp	r0, #1
   10d22:	bne.n	10d34 <_scanf_chars+0x48>
   10d24:	ldr	r2, [r5, #0]
   10d26:	ldrb	r1, [r2, #0]
   10d28:	ldr	r2, [r4, #20]
   10d2a:	ldrb	r2, [r2, r1]
   10d2c:	cbnz	r2, 10d44 <_scanf_chars+0x58>
   10d2e:	cmp	r7, #0
   10d30:	beq.n	10d96 <_scanf_chars+0xaa>
   10d32:	b.n	10d7a <_scanf_chars+0x8e>
   10d34:	cmp	r0, #2
   10d36:	bne.n	10d7a <_scanf_chars+0x8e>
   10d38:	ldr	r3, [r5, #0]
   10d3a:	ldrb	r3, [r3, #0]
   10d3c:	ldrb.w	r3, [r9, r3]
   10d40:	lsls	r3, r3, #28
   10d42:	bmi.n	10d7a <_scanf_chars+0x8e>
   10d44:	ldr	r3, [r4, #0]
   10d46:	lsls	r2, r3, #27
   10d48:	ittt	pl
   10d4a:	ldrpl	r3, [r5, #0]
   10d4c:	ldrbpl	r3, [r3, #0]
   10d4e:	strbpl.w	r3, [r6], #1
   10d52:	ldr	r2, [r5, #0]
   10d54:	ldr	r3, [r5, #4]
   10d56:	adds	r2, #1
   10d58:	str	r2, [r5, #0]
   10d5a:	ldr	r2, [r4, #8]
   10d5c:	subs	r3, #1
   10d5e:	subs	r2, #1
   10d60:	str	r3, [r5, #4]
   10d62:	adds	r7, #1
   10d64:	str	r2, [r4, #8]
   10d66:	cbz	r2, 10d7a <_scanf_chars+0x8e>
   10d68:	cmp	r3, #0
   10d6a:	bgt.n	10d1c <_scanf_chars+0x30>
   10d6c:	ldr.w	r3, [r4, #384]	; 0x180
   10d70:	mov	r1, r5
   10d72:	mov	r0, r8
   10d74:	blx	r3
   10d76:	cmp	r0, #0
   10d78:	beq.n	10d1c <_scanf_chars+0x30>
   10d7a:	ldr	r3, [r4, #0]
   10d7c:	ands.w	r3, r3, #16
   10d80:	bne.n	10d8e <_scanf_chars+0xa2>
   10d82:	ldr	r2, [r4, #12]
   10d84:	adds	r2, #1
   10d86:	str	r2, [r4, #12]
   10d88:	ldr	r2, [r4, #24]
   10d8a:	cbz	r2, 10d8e <_scanf_chars+0xa2>
   10d8c:	strb	r3, [r6, #0]
   10d8e:	ldr	r3, [r4, #16]
   10d90:	add	r3, r7
   10d92:	str	r3, [r4, #16]
   10d94:	movs	r0, #0
   10d96:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d9a:	nop
   10d9c:	.word	0x20001206

00010da0 <_scanf_i>:
   10da0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10da4:	mov	r8, r3
   10da6:	ldr	r3, [pc, #464]	; (10f78 <_scanf_i+0x1d8>)
   10da8:	mov	r4, r1
   10daa:	mov	sl, r0
   10dac:	mov	r6, r2
   10dae:	ldmia.w	r3, {r0, r1, r2}
   10db2:	sub	sp, #28
   10db4:	add	r3, sp, #12
   10db6:	stmia.w	r3, {r0, r1, r2}
   10dba:	ldr	r3, [pc, #448]	; (10f7c <_scanf_i+0x1dc>)
   10dbc:	ldr	r1, [r4, #24]
   10dbe:	ldr	r2, [pc, #448]	; (10f80 <_scanf_i+0x1e0>)
   10dc0:	cmp	r1, #3
   10dc2:	it	ne
   10dc4:	movne	r2, r3
   10dc6:	ldr	r3, [r4, #8]
   10dc8:	str	r2, [sp, #4]
   10dca:	subs	r2, r3, #1
   10dcc:	cmp.w	r2, #348	; 0x15c
   10dd0:	it	hi
   10dd2:	mvnhi.w	r5, #348	; 0x15c
   10dd6:	mov	r7, r4
   10dd8:	ittt	hi
   10dda:	addhi.w	r9, r3, r5
   10dde:	movwhi	r3, #349	; 0x15d
   10de2:	strhi	r3, [r4, #8]
   10de4:	ldr.w	r3, [r7], #28
   10de8:	orr.w	r3, r3, #3328	; 0xd00
   10dec:	it	ls
   10dee:	movls.w	r9, #0
   10df2:	str	r3, [r4, #0]
   10df4:	mov	r5, r7
   10df6:	mov.w	fp, #0
   10dfa:	ldr	r1, [r6, #0]
   10dfc:	add	r3, sp, #12
   10dfe:	ldrb	r1, [r1, #0]
   10e00:	ldr.w	r0, [r3, fp, lsl #2]
   10e04:	movs	r2, #2
   10e06:	bl	e860 <memchr>
   10e0a:	cbz	r0, 10e58 <_scanf_i+0xb8>
   10e0c:	cmp.w	fp, #1
   10e10:	bne.n	10ec6 <_scanf_i+0x126>
   10e12:	ldr	r2, [r4, #4]
   10e14:	cbnz	r2, 10e22 <_scanf_i+0x82>
   10e16:	ldr	r2, [r4, #0]
   10e18:	movs	r3, #8
   10e1a:	orr.w	r2, r2, #512	; 0x200
   10e1e:	str	r3, [r4, #4]
   10e20:	str	r2, [r4, #0]
   10e22:	ldr	r2, [r4, #0]
   10e24:	bic.w	r2, r2, #1280	; 0x500
   10e28:	str	r2, [r4, #0]
   10e2a:	ldr	r2, [r4, #8]
   10e2c:	subs	r1, r2, #1
   10e2e:	str	r1, [r4, #8]
   10e30:	cbz	r2, 10e58 <_scanf_i+0xb8>
   10e32:	ldr	r2, [r6, #0]
   10e34:	adds	r1, r2, #1
   10e36:	str	r1, [r6, #0]
   10e38:	ldrb	r2, [r2, #0]
   10e3a:	strb.w	r2, [r5], #1
   10e3e:	ldr	r2, [r6, #4]
   10e40:	subs	r2, #1
   10e42:	cmp	r2, #0
   10e44:	str	r2, [r6, #4]
   10e46:	bgt.n	10e58 <_scanf_i+0xb8>
   10e48:	ldr.w	r2, [r4, #384]	; 0x180
   10e4c:	mov	r1, r6
   10e4e:	mov	r0, sl
   10e50:	blx	r2
   10e52:	cmp	r0, #0
   10e54:	bne.w	10f62 <_scanf_i+0x1c2>
   10e58:	add.w	fp, fp, #1
   10e5c:	cmp.w	fp, #3
   10e60:	bne.n	10dfa <_scanf_i+0x5a>
   10e62:	ldr	r3, [r4, #4]
   10e64:	cbnz	r3, 10e6a <_scanf_i+0xca>
   10e66:	movs	r3, #10
   10e68:	str	r3, [r4, #4]
   10e6a:	ldr	r3, [r4, #4]
   10e6c:	ldr	r1, [pc, #276]	; (10f84 <_scanf_i+0x1e4>)
   10e6e:	ldr	r0, [r4, #20]
   10e70:	subs	r1, r1, r3
   10e72:	bl	110e4 <__sccl>
   10e76:	mov.w	fp, #0
   10e7a:	ldr	r3, [r4, #8]
   10e7c:	ldr	r2, [r4, #0]
   10e7e:	cmp	r3, #0
   10e80:	beq.n	10efe <_scanf_i+0x15e>
   10e82:	ldr	r1, [r6, #0]
   10e84:	ldr	r0, [r4, #20]
   10e86:	ldrb.w	ip, [r1]
   10e8a:	ldrb.w	r0, [r0, ip]
   10e8e:	cmp	r0, #0
   10e90:	beq.n	10efe <_scanf_i+0x15e>
   10e92:	cmp.w	ip, #48	; 0x30
   10e96:	bne.n	10ee2 <_scanf_i+0x142>
   10e98:	lsls	r0, r2, #20
   10e9a:	bpl.n	10ee2 <_scanf_i+0x142>
   10e9c:	add.w	fp, fp, #1
   10ea0:	cmp.w	r9, #0
   10ea4:	beq.n	10eae <_scanf_i+0x10e>
   10ea6:	adds	r3, #1
   10ea8:	add.w	r9, r9, #4294967295
   10eac:	str	r3, [r4, #8]
   10eae:	ldr	r3, [r6, #4]
   10eb0:	subs	r3, #1
   10eb2:	cmp	r3, #0
   10eb4:	str	r3, [r6, #4]
   10eb6:	ble.n	10ef0 <_scanf_i+0x150>
   10eb8:	ldr	r3, [r6, #0]
   10eba:	adds	r3, #1
   10ebc:	str	r3, [r6, #0]
   10ebe:	ldr	r3, [r4, #8]
   10ec0:	subs	r3, #1
   10ec2:	str	r3, [r4, #8]
   10ec4:	b.n	10e7a <_scanf_i+0xda>
   10ec6:	cmp.w	fp, #2
   10eca:	bne.n	10e2a <_scanf_i+0x8a>
   10ecc:	ldr	r2, [r4, #0]
   10ece:	and.w	r1, r2, #1536	; 0x600
   10ed2:	cmp.w	r1, #512	; 0x200
   10ed6:	bne.n	10e58 <_scanf_i+0xb8>
   10ed8:	movs	r3, #16
   10eda:	str	r3, [r4, #4]
   10edc:	orr.w	r2, r2, #256	; 0x100
   10ee0:	b.n	10e28 <_scanf_i+0x88>
   10ee2:	bic.w	r2, r2, #2304	; 0x900
   10ee6:	str	r2, [r4, #0]
   10ee8:	ldrb	r3, [r1, #0]
   10eea:	strb.w	r3, [r5], #1
   10eee:	b.n	10eae <_scanf_i+0x10e>
   10ef0:	ldr.w	r3, [r4, #384]	; 0x180
   10ef4:	mov	r1, r6
   10ef6:	mov	r0, sl
   10ef8:	blx	r3
   10efa:	cmp	r0, #0
   10efc:	beq.n	10ebe <_scanf_i+0x11e>
   10efe:	ldr	r3, [r4, #0]
   10f00:	lsls	r1, r3, #23
   10f02:	bpl.n	10f20 <_scanf_i+0x180>
   10f04:	cmp	r5, r7
   10f06:	bls.n	10f1c <_scanf_i+0x17c>
   10f08:	ldrb.w	r1, [r5, #-1]
   10f0c:	ldr.w	r3, [r4, #380]	; 0x17c
   10f10:	mov	r2, r6
   10f12:	mov	r0, sl
   10f14:	blx	r3
   10f16:	add.w	r9, r5, #4294967295
   10f1a:	mov	r5, r9
   10f1c:	cmp	r5, r7
   10f1e:	beq.n	10f72 <_scanf_i+0x1d2>
   10f20:	ldr	r2, [r4, #0]
   10f22:	ands.w	r2, r2, #16
   10f26:	bne.n	10f50 <_scanf_i+0x1b0>
   10f28:	strb	r2, [r5, #0]
   10f2a:	ldr	r3, [r4, #4]
   10f2c:	ldr	r6, [sp, #4]
   10f2e:	mov	r1, r7
   10f30:	mov	r0, sl
   10f32:	blx	r6
   10f34:	ldr.w	r3, [r8]
   10f38:	ldr	r1, [r4, #0]
   10f3a:	adds	r2, r3, #4
   10f3c:	str.w	r2, [r8]
   10f40:	tst.w	r1, #32
   10f44:	ldr	r3, [r3, #0]
   10f46:	beq.n	10f68 <_scanf_i+0x1c8>
   10f48:	str	r0, [r3, #0]
   10f4a:	ldr	r3, [r4, #12]
   10f4c:	adds	r3, #1
   10f4e:	str	r3, [r4, #12]
   10f50:	ldr	r3, [r4, #16]
   10f52:	subs	r5, r5, r7
   10f54:	add	r5, fp
   10f56:	add	r3, r5
   10f58:	str	r3, [r4, #16]
   10f5a:	movs	r0, #0
   10f5c:	add	sp, #28
   10f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f62:	mov.w	fp, #0
   10f66:	b.n	10efe <_scanf_i+0x15e>
   10f68:	lsls	r2, r1, #31
   10f6a:	ite	mi
   10f6c:	strhmi	r0, [r3, #0]
   10f6e:	strpl	r0, [r3, #0]
   10f70:	b.n	10f4a <_scanf_i+0x1aa>
   10f72:	movs	r0, #1
   10f74:	b.n	10f5c <_scanf_i+0x1bc>
   10f76:	nop
   10f78:	.word	0x20000418
   10f7c:	.word	0x00011319
   10f80:	.word	0x0000d5f5
   10f84:	.word	0x200013d3

00010f88 <__sflush_r>:
   10f88:	ldrh	r2, [r1, #12]
   10f8a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f8e:	mov	r5, r0
   10f90:	lsls	r0, r2, #28
   10f92:	mov	r4, r1
   10f94:	bmi.n	11048 <__sflush_r+0xc0>
   10f96:	ldr	r3, [r1, #4]
   10f98:	cmp	r3, #0
   10f9a:	bgt.n	10fa8 <__sflush_r+0x20>
   10f9c:	ldr	r3, [r1, #64]	; 0x40
   10f9e:	cmp	r3, #0
   10fa0:	bgt.n	10fa8 <__sflush_r+0x20>
   10fa2:	movs	r0, #0
   10fa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fa8:	ldr	r6, [r4, #44]	; 0x2c
   10faa:	cmp	r6, #0
   10fac:	beq.n	10fa2 <__sflush_r+0x1a>
   10fae:	movs	r3, #0
   10fb0:	ands.w	r2, r2, #4096	; 0x1000
   10fb4:	ldr	r7, [r5, #0]
   10fb6:	ldr	r1, [r4, #32]
   10fb8:	str	r3, [r5, #0]
   10fba:	beq.n	11022 <__sflush_r+0x9a>
   10fbc:	ldr	r0, [r4, #84]	; 0x54
   10fbe:	ldrh	r3, [r4, #12]
   10fc0:	lsls	r2, r3, #29
   10fc2:	bpl.n	10fd0 <__sflush_r+0x48>
   10fc4:	ldr	r3, [r4, #4]
   10fc6:	subs	r0, r0, r3
   10fc8:	ldr	r3, [r4, #52]	; 0x34
   10fca:	cbz	r3, 10fd0 <__sflush_r+0x48>
   10fcc:	ldr	r3, [r4, #64]	; 0x40
   10fce:	subs	r0, r0, r3
   10fd0:	movs	r3, #0
   10fd2:	mov	r2, r0
   10fd4:	ldr	r6, [r4, #44]	; 0x2c
   10fd6:	ldr	r1, [r4, #32]
   10fd8:	mov	r0, r5
   10fda:	blx	r6
   10fdc:	adds	r3, r0, #1
   10fde:	ldrh	r3, [r4, #12]
   10fe0:	bne.n	10ff0 <__sflush_r+0x68>
   10fe2:	ldr	r1, [r5, #0]
   10fe4:	cmp	r1, #29
   10fe6:	bhi.n	11040 <__sflush_r+0xb8>
   10fe8:	ldr	r2, [pc, #164]	; (11090 <__sflush_r+0x108>)
   10fea:	asrs	r2, r1
   10fec:	lsls	r6, r2, #31
   10fee:	bmi.n	11040 <__sflush_r+0xb8>
   10ff0:	movs	r2, #0
   10ff2:	str	r2, [r4, #4]
   10ff4:	lsls	r1, r3, #19
   10ff6:	ldr	r2, [r4, #16]
   10ff8:	str	r2, [r4, #0]
   10ffa:	bpl.n	11006 <__sflush_r+0x7e>
   10ffc:	adds	r2, r0, #1
   10ffe:	bne.n	11004 <__sflush_r+0x7c>
   11000:	ldr	r3, [r5, #0]
   11002:	cbnz	r3, 11006 <__sflush_r+0x7e>
   11004:	str	r0, [r4, #84]	; 0x54
   11006:	ldr	r1, [r4, #52]	; 0x34
   11008:	str	r7, [r5, #0]
   1100a:	cmp	r1, #0
   1100c:	beq.n	10fa2 <__sflush_r+0x1a>
   1100e:	add.w	r3, r4, #68	; 0x44
   11012:	cmp	r1, r3
   11014:	beq.n	1101c <__sflush_r+0x94>
   11016:	mov	r0, r5
   11018:	bl	f518 <_free_r>
   1101c:	movs	r0, #0
   1101e:	str	r0, [r4, #52]	; 0x34
   11020:	b.n	10fa4 <__sflush_r+0x1c>
   11022:	movs	r3, #1
   11024:	mov	r0, r5
   11026:	blx	r6
   11028:	adds	r1, r0, #1
   1102a:	bne.n	10fbe <__sflush_r+0x36>
   1102c:	ldr	r3, [r5, #0]
   1102e:	cmp	r3, #0
   11030:	beq.n	10fbe <__sflush_r+0x36>
   11032:	cmp	r3, #29
   11034:	beq.n	1103a <__sflush_r+0xb2>
   11036:	cmp	r3, #22
   11038:	bne.n	1103e <__sflush_r+0xb6>
   1103a:	str	r7, [r5, #0]
   1103c:	b.n	10fa2 <__sflush_r+0x1a>
   1103e:	ldrh	r3, [r4, #12]
   11040:	orr.w	r3, r3, #64	; 0x40
   11044:	strh	r3, [r4, #12]
   11046:	b.n	10fa4 <__sflush_r+0x1c>
   11048:	ldr	r7, [r1, #16]
   1104a:	cmp	r7, #0
   1104c:	beq.n	10fa2 <__sflush_r+0x1a>
   1104e:	lsls	r3, r2, #30
   11050:	ldr	r6, [r1, #0]
   11052:	it	eq
   11054:	ldreq	r3, [r1, #20]
   11056:	str	r7, [r1, #0]
   11058:	it	ne
   1105a:	movne	r3, #0
   1105c:	sub.w	r8, r6, r7
   11060:	str	r3, [r1, #8]
   11062:	cmp.w	r8, #0
   11066:	ble.n	10fa2 <__sflush_r+0x1a>
   11068:	ldr	r1, [r4, #32]
   1106a:	ldr	r6, [r4, #40]	; 0x28
   1106c:	mov	r3, r8
   1106e:	mov	r2, r7
   11070:	mov	r0, r5
   11072:	blx	r6
   11074:	cmp	r0, #0
   11076:	bgt.n	11086 <__sflush_r+0xfe>
   11078:	ldrh	r3, [r4, #12]
   1107a:	orr.w	r3, r3, #64	; 0x40
   1107e:	strh	r3, [r4, #12]
   11080:	mov.w	r0, #4294967295
   11084:	b.n	10fa4 <__sflush_r+0x1c>
   11086:	add	r7, r0
   11088:	sub.w	r8, r8, r0
   1108c:	b.n	11062 <__sflush_r+0xda>
   1108e:	nop
   11090:	.word	0xdfbffffe

00011094 <_fflush_r>:
   11094:	push	{r3, r4, r5, lr}
   11096:	ldr	r3, [r1, #16]
   11098:	mov	r5, r0
   1109a:	mov	r4, r1
   1109c:	cbnz	r3, 110a4 <_fflush_r+0x10>
   1109e:	movs	r5, #0
   110a0:	mov	r0, r5
   110a2:	pop	{r3, r4, r5, pc}
   110a4:	cbz	r0, 110ae <_fflush_r+0x1a>
   110a6:	ldr	r3, [r0, #32]
   110a8:	cbnz	r3, 110ae <_fflush_r+0x1a>
   110aa:	bl	e398 <__sinit>
   110ae:	ldrsh.w	r3, [r4, #12]
   110b2:	cmp	r3, #0
   110b4:	beq.n	1109e <_fflush_r+0xa>
   110b6:	ldr	r2, [r4, #100]	; 0x64
   110b8:	lsls	r0, r2, #31
   110ba:	bmi.n	110c6 <_fflush_r+0x32>
   110bc:	lsls	r1, r3, #22
   110be:	bmi.n	110c6 <_fflush_r+0x32>
   110c0:	ldr	r0, [r4, #88]	; 0x58
   110c2:	bl	e848 <__retarget_lock_acquire_recursive>
   110c6:	mov	r0, r5
   110c8:	mov	r1, r4
   110ca:	bl	10f88 <__sflush_r>
   110ce:	ldr	r3, [r4, #100]	; 0x64
   110d0:	lsls	r2, r3, #31
   110d2:	mov	r5, r0
   110d4:	bmi.n	110a0 <_fflush_r+0xc>
   110d6:	ldrh	r3, [r4, #12]
   110d8:	lsls	r3, r3, #22
   110da:	bmi.n	110a0 <_fflush_r+0xc>
   110dc:	ldr	r0, [r4, #88]	; 0x58
   110de:	bl	e84a <__retarget_lock_release_recursive>
   110e2:	b.n	110a0 <_fflush_r+0xc>

000110e4 <__sccl>:
   110e4:	push	{r4, r5, r6, lr}
   110e6:	ldrb	r3, [r1, #0]
   110e8:	mov	r4, r0
   110ea:	cmp	r3, #94	; 0x5e
   110ec:	itete	eq
   110ee:	ldrbeq	r3, [r1, #1]
   110f0:	addne	r2, r1, #1
   110f2:	addeq	r2, r1, #2
   110f4:	movne	r1, #0
   110f6:	it	eq
   110f8:	moveq	r1, #1
   110fa:	subs	r0, #1
   110fc:	add.w	r5, r4, #255	; 0xff
   11100:	strb.w	r1, [r0, #1]!
   11104:	cmp	r0, r5
   11106:	bne.n	11100 <__sccl+0x1c>
   11108:	cbnz	r3, 1110e <__sccl+0x2a>
   1110a:	subs	r0, r2, #1
   1110c:	pop	{r4, r5, r6, pc}
   1110e:	eor.w	r1, r1, #1
   11112:	strb	r1, [r4, r3]
   11114:	mov	r0, r2
   11116:	mov	r2, r0
   11118:	ldrb.w	r5, [r2], #1
   1111c:	cmp	r5, #45	; 0x2d
   1111e:	beq.n	1112c <__sccl+0x48>
   11120:	cmp	r5, #93	; 0x5d
   11122:	beq.n	11152 <__sccl+0x6e>
   11124:	cmp	r5, #0
   11126:	beq.n	1110c <__sccl+0x28>
   11128:	mov	r3, r5
   1112a:	b.n	11112 <__sccl+0x2e>
   1112c:	ldrb	r6, [r0, #1]
   1112e:	cmp	r6, #93	; 0x5d
   11130:	beq.n	11128 <__sccl+0x44>
   11132:	cmp	r3, r6
   11134:	bgt.n	11128 <__sccl+0x44>
   11136:	adds	r0, #2
   11138:	mov	r2, r3
   1113a:	adds	r2, #1
   1113c:	cmp	r6, r2
   1113e:	strb	r1, [r4, r2]
   11140:	bgt.n	1113a <__sccl+0x56>
   11142:	subs	r2, r6, r3
   11144:	subs	r2, #1
   11146:	adds	r5, r3, #1
   11148:	cmp	r3, r6
   1114a:	it	ge
   1114c:	movge	r2, #0
   1114e:	adds	r3, r5, r2
   11150:	b.n	11116 <__sccl+0x32>
   11152:	mov	r0, r2
   11154:	b.n	1110c <__sccl+0x28>

00011156 <__submore>:
   11156:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1115a:	mov	r4, r1
   1115c:	ldr	r1, [r1, #52]	; 0x34
   1115e:	add.w	r3, r4, #68	; 0x44
   11162:	cmp	r1, r3
   11164:	bne.n	111a2 <__submore+0x4c>
   11166:	mov.w	r1, #1024	; 0x400
   1116a:	bl	c7e8 <_malloc_r>
   1116e:	cbnz	r0, 11178 <__submore+0x22>
   11170:	mov.w	r0, #4294967295
   11174:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11178:	mov.w	r3, #1024	; 0x400
   1117c:	str	r3, [r4, #56]	; 0x38
   1117e:	ldrb.w	r3, [r4, #70]	; 0x46
   11182:	str	r0, [r4, #52]	; 0x34
   11184:	strb.w	r3, [r0, #1023]	; 0x3ff
   11188:	ldrb.w	r3, [r4, #69]	; 0x45
   1118c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11190:	ldrb.w	r3, [r4, #68]	; 0x44
   11194:	strb.w	r3, [r0, #1021]	; 0x3fd
   11198:	addw	r0, r0, #1021	; 0x3fd
   1119c:	str	r0, [r4, #0]
   1119e:	movs	r0, #0
   111a0:	b.n	11174 <__submore+0x1e>
   111a2:	ldr	r6, [r4, #56]	; 0x38
   111a4:	lsls	r7, r6, #1
   111a6:	mov	r2, r7
   111a8:	bl	c8ec <_realloc_r>
   111ac:	mov	r5, r0
   111ae:	cmp	r0, #0
   111b0:	beq.n	11170 <__submore+0x1a>
   111b2:	add.w	r8, r0, r6
   111b6:	mov	r1, r0
   111b8:	mov	r2, r6
   111ba:	mov	r0, r8
   111bc:	bl	9dd0 <memcpy>
   111c0:	strd	r5, r7, [r4, #52]	; 0x34
   111c4:	str.w	r8, [r4]
   111c8:	b.n	1119e <__submore+0x48>
	...

000111cc <__assert_func>:
   111cc:	push	{r0, r1, r2, r3, r4, lr}
   111ce:	mov	r4, r2
   111d0:	mov	r2, r3
   111d2:	ldr	r3, [pc, #36]	; (111f8 <__assert_func+0x2c>)
   111d4:	ldr	r3, [r3, #0]
   111d6:	mov	r5, r0
   111d8:	ldr	r0, [r3, #12]
   111da:	cbz	r4, 111f0 <__assert_func+0x24>
   111dc:	ldr	r3, [pc, #28]	; (111fc <__assert_func+0x30>)
   111de:	str	r1, [sp, #0]
   111e0:	strd	r3, r4, [sp, #4]
   111e4:	ldr	r1, [pc, #24]	; (11200 <__assert_func+0x34>)
   111e6:	mov	r3, r5
   111e8:	bl	1131c <fiprintf>
   111ec:	bl	b50e <abort>
   111f0:	ldr	r3, [pc, #16]	; (11204 <__assert_func+0x38>)
   111f2:	mov	r4, r3
   111f4:	b.n	111de <__assert_func+0x12>
   111f6:	nop
   111f8:	.word	0x2000228c
   111fc:	.word	0x20001168
   11200:	.word	0x20001175
   11204:	.word	0x20000db9

00011208 <_calloc_r>:
   11208:	push	{r0, r1, r2, r4, r5, lr}
   1120a:	umull	r2, r4, r1, r2
   1120e:	cbnz	r4, 11224 <_calloc_r+0x1c>
   11210:	mov	r1, r2
   11212:	str	r2, [sp, #4]
   11214:	bl	c7e8 <_malloc_r>
   11218:	ldr	r2, [sp, #4]
   1121a:	mov	r5, r0
   1121c:	cbnz	r0, 1122c <_calloc_r+0x24>
   1121e:	mov	r0, r5
   11220:	add	sp, #12
   11222:	pop	{r4, r5, pc}
   11224:	movs	r2, #12
   11226:	str	r2, [r0, #0]
   11228:	movs	r5, #0
   1122a:	b.n	1121e <_calloc_r+0x16>
   1122c:	mov	r1, r4
   1122e:	bl	9d8c <memset>
   11232:	b.n	1121e <_calloc_r+0x16>

00011234 <_strtoul_l.constprop.0>:
   11234:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11238:	ldr	r7, [pc, #216]	; (11314 <_strtoul_l.constprop.0+0xe0>)
   1123a:	mov	lr, r0
   1123c:	mov	r5, r1
   1123e:	mov	r0, r5
   11240:	ldrb.w	r4, [r5], #1
   11244:	ldrb	r6, [r7, r4]
   11246:	ands.w	r6, r6, #8
   1124a:	bne.n	1123e <_strtoul_l.constprop.0+0xa>
   1124c:	cmp	r4, #45	; 0x2d
   1124e:	bne.n	112b2 <_strtoul_l.constprop.0+0x7e>
   11250:	ldrb	r4, [r5, #0]
   11252:	movs	r6, #1
   11254:	adds	r5, r0, #2
   11256:	cmp	r3, #0
   11258:	beq.n	1130a <_strtoul_l.constprop.0+0xd6>
   1125a:	cmp	r3, #16
   1125c:	bne.n	11272 <_strtoul_l.constprop.0+0x3e>
   1125e:	cmp	r4, #48	; 0x30
   11260:	bne.n	11272 <_strtoul_l.constprop.0+0x3e>
   11262:	ldrb	r0, [r5, #0]
   11264:	and.w	r0, r0, #223	; 0xdf
   11268:	cmp	r0, #88	; 0x58
   1126a:	bne.n	11300 <_strtoul_l.constprop.0+0xcc>
   1126c:	ldrb	r4, [r5, #1]
   1126e:	movs	r3, #16
   11270:	adds	r5, #2
   11272:	mov.w	r8, #4294967295
   11276:	movs	r7, #0
   11278:	udiv	r8, r8, r3
   1127c:	mul.w	r9, r3, r8
   11280:	mvn.w	r9, r9
   11284:	mov	r0, r7
   11286:	sub.w	ip, r4, #48	; 0x30
   1128a:	cmp.w	ip, #9
   1128e:	bhi.n	112bc <_strtoul_l.constprop.0+0x88>
   11290:	mov	r4, ip
   11292:	cmp	r3, r4
   11294:	ble.n	112de <_strtoul_l.constprop.0+0xaa>
   11296:	cmp.w	r7, #4294967295
   1129a:	beq.n	112ac <_strtoul_l.constprop.0+0x78>
   1129c:	cmp	r8, r0
   1129e:	bcc.n	112d8 <_strtoul_l.constprop.0+0xa4>
   112a0:	bne.n	112a6 <_strtoul_l.constprop.0+0x72>
   112a2:	cmp	r9, r4
   112a4:	blt.n	112d8 <_strtoul_l.constprop.0+0xa4>
   112a6:	mla	r0, r0, r3, r4
   112aa:	movs	r7, #1
   112ac:	ldrb.w	r4, [r5], #1
   112b0:	b.n	11286 <_strtoul_l.constprop.0+0x52>
   112b2:	cmp	r4, #43	; 0x2b
   112b4:	itt	eq
   112b6:	ldrbeq	r4, [r5, #0]
   112b8:	addeq	r5, r0, #2
   112ba:	b.n	11256 <_strtoul_l.constprop.0+0x22>
   112bc:	sub.w	ip, r4, #65	; 0x41
   112c0:	cmp.w	ip, #25
   112c4:	bhi.n	112ca <_strtoul_l.constprop.0+0x96>
   112c6:	subs	r4, #55	; 0x37
   112c8:	b.n	11292 <_strtoul_l.constprop.0+0x5e>
   112ca:	sub.w	ip, r4, #97	; 0x61
   112ce:	cmp.w	ip, #25
   112d2:	bhi.n	112de <_strtoul_l.constprop.0+0xaa>
   112d4:	subs	r4, #87	; 0x57
   112d6:	b.n	11292 <_strtoul_l.constprop.0+0x5e>
   112d8:	mov.w	r7, #4294967295
   112dc:	b.n	112ac <_strtoul_l.constprop.0+0x78>
   112de:	adds	r3, r7, #1
   112e0:	bne.n	112f0 <_strtoul_l.constprop.0+0xbc>
   112e2:	movs	r3, #34	; 0x22
   112e4:	str.w	r3, [lr]
   112e8:	mov	r0, r7
   112ea:	cbnz	r2, 112fa <_strtoul_l.constprop.0+0xc6>
   112ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   112f0:	cbz	r6, 112f4 <_strtoul_l.constprop.0+0xc0>
   112f2:	negs	r0, r0
   112f4:	cmp	r2, #0
   112f6:	beq.n	112ec <_strtoul_l.constprop.0+0xb8>
   112f8:	cbz	r7, 112fc <_strtoul_l.constprop.0+0xc8>
   112fa:	subs	r1, r5, #1
   112fc:	str	r1, [r2, #0]
   112fe:	b.n	112ec <_strtoul_l.constprop.0+0xb8>
   11300:	movs	r4, #48	; 0x30
   11302:	cmp	r3, #0
   11304:	bne.n	11272 <_strtoul_l.constprop.0+0x3e>
   11306:	movs	r3, #8
   11308:	b.n	11272 <_strtoul_l.constprop.0+0x3e>
   1130a:	cmp	r4, #48	; 0x30
   1130c:	beq.n	11262 <_strtoul_l.constprop.0+0x2e>
   1130e:	movs	r3, #10
   11310:	b.n	11272 <_strtoul_l.constprop.0+0x3e>
   11312:	nop
   11314:	.word	0x20001206

00011318 <_strtoul_r>:
   11318:	b.w	11234 <_strtoul_l.constprop.0>

0001131c <fiprintf>:
   1131c:	push	{r1, r2, r3}
   1131e:	push	{r0, r1, lr}
   11320:	mov	r1, r0
   11322:	add	r3, sp, #12
   11324:	ldr	r0, [pc, #20]	; (1133c <fiprintf+0x20>)
   11326:	ldr.w	r2, [r3], #4
   1132a:	ldr	r0, [r0, #0]
   1132c:	str	r3, [sp, #4]
   1132e:	bl	11394 <_vfiprintf_r>
   11332:	add	sp, #8
   11334:	ldr.w	lr, [sp], #4
   11338:	add	sp, #12
   1133a:	bx	lr
   1133c:	.word	0x2000228c

00011340 <__sfputc_r>:
   11340:	ldr	r3, [r2, #8]
   11342:	subs	r3, #1
   11344:	cmp	r3, #0
   11346:	push	{r4}
   11348:	str	r3, [r2, #8]
   1134a:	bge.n	1135e <__sfputc_r+0x1e>
   1134c:	ldr	r4, [r2, #24]
   1134e:	cmp	r3, r4
   11350:	blt.n	11356 <__sfputc_r+0x16>
   11352:	cmp	r1, #10
   11354:	bne.n	1135e <__sfputc_r+0x1e>
   11356:	ldr.w	r4, [sp], #4
   1135a:	b.w	115c8 <__swbuf_r>
   1135e:	ldr	r3, [r2, #0]
   11360:	adds	r0, r3, #1
   11362:	str	r0, [r2, #0]
   11364:	strb	r1, [r3, #0]
   11366:	mov	r0, r1
   11368:	ldr.w	r4, [sp], #4
   1136c:	bx	lr

0001136e <__sfputs_r>:
   1136e:	push	{r3, r4, r5, r6, r7, lr}
   11370:	mov	r6, r0
   11372:	mov	r7, r1
   11374:	mov	r4, r2
   11376:	adds	r5, r2, r3
   11378:	cmp	r4, r5
   1137a:	bne.n	11380 <__sfputs_r+0x12>
   1137c:	movs	r0, #0
   1137e:	b.n	11390 <__sfputs_r+0x22>
   11380:	ldrb.w	r1, [r4], #1
   11384:	mov	r2, r7
   11386:	mov	r0, r6
   11388:	bl	11340 <__sfputc_r>
   1138c:	adds	r3, r0, #1
   1138e:	bne.n	11378 <__sfputs_r+0xa>
   11390:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011394 <_vfiprintf_r>:
   11394:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11398:	mov	r5, r1
   1139a:	sub	sp, #116	; 0x74
   1139c:	mov	r4, r2
   1139e:	mov	r8, r3
   113a0:	mov	r6, r0
   113a2:	cbz	r0, 113ac <_vfiprintf_r+0x18>
   113a4:	ldr	r3, [r0, #32]
   113a6:	cbnz	r3, 113ac <_vfiprintf_r+0x18>
   113a8:	bl	e398 <__sinit>
   113ac:	ldr	r3, [r5, #100]	; 0x64
   113ae:	lsls	r1, r3, #31
   113b0:	bmi.n	113be <_vfiprintf_r+0x2a>
   113b2:	ldrh	r3, [r5, #12]
   113b4:	lsls	r2, r3, #22
   113b6:	bmi.n	113be <_vfiprintf_r+0x2a>
   113b8:	ldr	r0, [r5, #88]	; 0x58
   113ba:	bl	e848 <__retarget_lock_acquire_recursive>
   113be:	ldrh	r3, [r5, #12]
   113c0:	lsls	r3, r3, #28
   113c2:	bpl.n	113c8 <_vfiprintf_r+0x34>
   113c4:	ldr	r3, [r5, #16]
   113c6:	cbnz	r3, 113f0 <_vfiprintf_r+0x5c>
   113c8:	mov	r1, r5
   113ca:	mov	r0, r6
   113cc:	bl	11644 <__swsetup_r>
   113d0:	cbz	r0, 113f0 <_vfiprintf_r+0x5c>
   113d2:	ldr	r3, [r5, #100]	; 0x64
   113d4:	lsls	r4, r3, #31
   113d6:	bpl.n	113e2 <_vfiprintf_r+0x4e>
   113d8:	mov.w	r0, #4294967295
   113dc:	add	sp, #116	; 0x74
   113de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113e2:	ldrh	r3, [r5, #12]
   113e4:	lsls	r0, r3, #22
   113e6:	bmi.n	113d8 <_vfiprintf_r+0x44>
   113e8:	ldr	r0, [r5, #88]	; 0x58
   113ea:	bl	e84a <__retarget_lock_release_recursive>
   113ee:	b.n	113d8 <_vfiprintf_r+0x44>
   113f0:	movs	r3, #0
   113f2:	str	r3, [sp, #36]	; 0x24
   113f4:	movs	r3, #32
   113f6:	strb.w	r3, [sp, #41]	; 0x29
   113fa:	str.w	r8, [sp, #12]
   113fe:	movs	r3, #48	; 0x30
   11400:	ldr.w	r8, [pc, #432]	; 115b4 <_vfiprintf_r+0x220>
   11404:	strb.w	r3, [sp, #42]	; 0x2a
   11408:	mov.w	r9, #1
   1140c:	mov	r3, r4
   1140e:	mov	sl, r3
   11410:	ldrb.w	r2, [r3], #1
   11414:	cbz	r2, 1141a <_vfiprintf_r+0x86>
   11416:	cmp	r2, #37	; 0x25
   11418:	bne.n	1140e <_vfiprintf_r+0x7a>
   1141a:	subs.w	fp, sl, r4
   1141e:	beq.n	11438 <_vfiprintf_r+0xa4>
   11420:	mov	r3, fp
   11422:	mov	r2, r4
   11424:	mov	r1, r5
   11426:	mov	r0, r6
   11428:	bl	1136e <__sfputs_r>
   1142c:	adds	r0, #1
   1142e:	beq.w	11584 <_vfiprintf_r+0x1f0>
   11432:	ldr	r2, [sp, #36]	; 0x24
   11434:	add	r2, fp
   11436:	str	r2, [sp, #36]	; 0x24
   11438:	ldrb.w	r3, [sl]
   1143c:	cmp	r3, #0
   1143e:	beq.w	11584 <_vfiprintf_r+0x1f0>
   11442:	movs	r3, #0
   11444:	mov.w	r2, #4294967295
   11448:	strd	r2, r3, [sp, #20]
   1144c:	add.w	sl, sl, #1
   11450:	str	r3, [sp, #16]
   11452:	str	r3, [sp, #28]
   11454:	strb.w	r3, [sp, #83]	; 0x53
   11458:	str	r3, [sp, #104]	; 0x68
   1145a:	mov	r4, sl
   1145c:	movs	r2, #5
   1145e:	ldrb.w	r1, [r4], #1
   11462:	ldr	r0, [pc, #336]	; (115b4 <_vfiprintf_r+0x220>)
   11464:	bl	e860 <memchr>
   11468:	ldr	r2, [sp, #16]
   1146a:	cbnz	r0, 114a4 <_vfiprintf_r+0x110>
   1146c:	lsls	r1, r2, #27
   1146e:	itt	mi
   11470:	movmi	r3, #32
   11472:	strbmi.w	r3, [sp, #83]	; 0x53
   11476:	lsls	r3, r2, #28
   11478:	itt	mi
   1147a:	movmi	r3, #43	; 0x2b
   1147c:	strbmi.w	r3, [sp, #83]	; 0x53
   11480:	ldrb.w	r3, [sl]
   11484:	cmp	r3, #42	; 0x2a
   11486:	beq.n	114b4 <_vfiprintf_r+0x120>
   11488:	ldr	r2, [sp, #28]
   1148a:	mov	r4, sl
   1148c:	movs	r0, #0
   1148e:	mov.w	ip, #10
   11492:	mov	r1, r4
   11494:	ldrb.w	r3, [r1], #1
   11498:	subs	r3, #48	; 0x30
   1149a:	cmp	r3, #9
   1149c:	bls.n	1153a <_vfiprintf_r+0x1a6>
   1149e:	cbz	r0, 114ce <_vfiprintf_r+0x13a>
   114a0:	str	r2, [sp, #28]
   114a2:	b.n	114ce <_vfiprintf_r+0x13a>
   114a4:	sub.w	r3, r0, r8
   114a8:	lsl.w	r3, r9, r3
   114ac:	orrs	r3, r2
   114ae:	str	r3, [sp, #16]
   114b0:	mov	sl, r4
   114b2:	b.n	1145a <_vfiprintf_r+0xc6>
   114b4:	ldr	r3, [sp, #12]
   114b6:	adds	r1, r3, #4
   114b8:	ldr	r3, [r3, #0]
   114ba:	str	r1, [sp, #12]
   114bc:	cmp	r3, #0
   114be:	ittet	lt
   114c0:	neglt	r3, r3
   114c2:	orrlt.w	r2, r2, #2
   114c6:	strge	r3, [sp, #28]
   114c8:	strlt	r3, [sp, #28]
   114ca:	it	lt
   114cc:	strlt	r2, [sp, #16]
   114ce:	ldrb	r3, [r4, #0]
   114d0:	cmp	r3, #46	; 0x2e
   114d2:	bne.n	114ee <_vfiprintf_r+0x15a>
   114d4:	ldrb	r3, [r4, #1]
   114d6:	cmp	r3, #42	; 0x2a
   114d8:	bne.n	11544 <_vfiprintf_r+0x1b0>
   114da:	ldr	r3, [sp, #12]
   114dc:	adds	r2, r3, #4
   114de:	ldr	r3, [r3, #0]
   114e0:	str	r2, [sp, #12]
   114e2:	cmp	r3, #0
   114e4:	it	lt
   114e6:	movlt.w	r3, #4294967295
   114ea:	adds	r4, #2
   114ec:	str	r3, [sp, #20]
   114ee:	ldr.w	sl, [pc, #212]	; 115c4 <_vfiprintf_r+0x230>
   114f2:	ldrb	r1, [r4, #0]
   114f4:	movs	r2, #3
   114f6:	mov	r0, sl
   114f8:	bl	e860 <memchr>
   114fc:	cbz	r0, 1150e <_vfiprintf_r+0x17a>
   114fe:	ldr	r3, [sp, #16]
   11500:	sub.w	r0, r0, sl
   11504:	movs	r2, #64	; 0x40
   11506:	lsls	r2, r0
   11508:	orrs	r3, r2
   1150a:	adds	r4, #1
   1150c:	str	r3, [sp, #16]
   1150e:	ldrb.w	r1, [r4], #1
   11512:	ldr	r0, [pc, #164]	; (115b8 <_vfiprintf_r+0x224>)
   11514:	strb.w	r1, [sp, #40]	; 0x28
   11518:	movs	r2, #6
   1151a:	bl	e860 <memchr>
   1151e:	cmp	r0, #0
   11520:	beq.n	115a2 <_vfiprintf_r+0x20e>
   11522:	ldr	r3, [pc, #152]	; (115bc <_vfiprintf_r+0x228>)
   11524:	cbnz	r3, 1156e <_vfiprintf_r+0x1da>
   11526:	ldr	r3, [sp, #12]
   11528:	adds	r3, #7
   1152a:	bic.w	r3, r3, #7
   1152e:	adds	r3, #8
   11530:	str	r3, [sp, #12]
   11532:	ldr	r3, [sp, #36]	; 0x24
   11534:	add	r3, r7
   11536:	str	r3, [sp, #36]	; 0x24
   11538:	b.n	1140c <_vfiprintf_r+0x78>
   1153a:	mla	r2, ip, r2, r3
   1153e:	mov	r4, r1
   11540:	movs	r0, #1
   11542:	b.n	11492 <_vfiprintf_r+0xfe>
   11544:	movs	r3, #0
   11546:	adds	r4, #1
   11548:	str	r3, [sp, #20]
   1154a:	mov	r1, r3
   1154c:	mov.w	ip, #10
   11550:	mov	r0, r4
   11552:	ldrb.w	r2, [r0], #1
   11556:	subs	r2, #48	; 0x30
   11558:	cmp	r2, #9
   1155a:	bls.n	11564 <_vfiprintf_r+0x1d0>
   1155c:	cmp	r3, #0
   1155e:	beq.n	114ee <_vfiprintf_r+0x15a>
   11560:	str	r1, [sp, #20]
   11562:	b.n	114ee <_vfiprintf_r+0x15a>
   11564:	mla	r1, ip, r1, r2
   11568:	mov	r4, r0
   1156a:	movs	r3, #1
   1156c:	b.n	11550 <_vfiprintf_r+0x1bc>
   1156e:	add	r3, sp, #12
   11570:	str	r3, [sp, #0]
   11572:	mov	r2, r5
   11574:	ldr	r3, [pc, #72]	; (115c0 <_vfiprintf_r+0x22c>)
   11576:	add	r1, sp, #16
   11578:	mov	r0, r6
   1157a:	bl	d748 <_printf_float>
   1157e:	mov	r7, r0
   11580:	adds	r0, r7, #1
   11582:	bne.n	11532 <_vfiprintf_r+0x19e>
   11584:	ldr	r3, [r5, #100]	; 0x64
   11586:	lsls	r1, r3, #31
   11588:	bmi.n	11596 <_vfiprintf_r+0x202>
   1158a:	ldrh	r3, [r5, #12]
   1158c:	lsls	r2, r3, #22
   1158e:	bmi.n	11596 <_vfiprintf_r+0x202>
   11590:	ldr	r0, [r5, #88]	; 0x58
   11592:	bl	e84a <__retarget_lock_release_recursive>
   11596:	ldrh	r3, [r5, #12]
   11598:	lsls	r3, r3, #25
   1159a:	bmi.w	113d8 <_vfiprintf_r+0x44>
   1159e:	ldr	r0, [sp, #36]	; 0x24
   115a0:	b.n	113dc <_vfiprintf_r+0x48>
   115a2:	add	r3, sp, #12
   115a4:	str	r3, [sp, #0]
   115a6:	mov	r2, r5
   115a8:	ldr	r3, [pc, #20]	; (115c0 <_vfiprintf_r+0x22c>)
   115aa:	add	r1, sp, #16
   115ac:	mov	r0, r6
   115ae:	bl	dc58 <_printf_i>
   115b2:	b.n	1157e <_vfiprintf_r+0x1ea>
   115b4:	.word	0x200013db
   115b8:	.word	0x200013e5
   115bc:	.word	0x0000d749
   115c0:	.word	0x0001136f
   115c4:	.word	0x200013e1

000115c8 <__swbuf_r>:
   115c8:	push	{r3, r4, r5, r6, r7, lr}
   115ca:	mov	r6, r1
   115cc:	mov	r4, r2
   115ce:	mov	r5, r0
   115d0:	cbz	r0, 115da <__swbuf_r+0x12>
   115d2:	ldr	r3, [r0, #32]
   115d4:	cbnz	r3, 115da <__swbuf_r+0x12>
   115d6:	bl	e398 <__sinit>
   115da:	ldr	r3, [r4, #24]
   115dc:	str	r3, [r4, #8]
   115de:	ldrh	r3, [r4, #12]
   115e0:	lsls	r2, r3, #28
   115e2:	bpl.n	11630 <__swbuf_r+0x68>
   115e4:	ldr	r3, [r4, #16]
   115e6:	cbz	r3, 11630 <__swbuf_r+0x68>
   115e8:	ldr	r3, [r4, #0]
   115ea:	ldr	r2, [r4, #16]
   115ec:	subs	r0, r3, r2
   115ee:	ldr	r3, [r4, #20]
   115f0:	uxtb	r6, r6
   115f2:	cmp	r3, r0
   115f4:	mov	r7, r6
   115f6:	bgt.n	11602 <__swbuf_r+0x3a>
   115f8:	mov	r1, r4
   115fa:	mov	r0, r5
   115fc:	bl	11094 <_fflush_r>
   11600:	cbnz	r0, 1163c <__swbuf_r+0x74>
   11602:	ldr	r3, [r4, #8]
   11604:	subs	r3, #1
   11606:	str	r3, [r4, #8]
   11608:	ldr	r3, [r4, #0]
   1160a:	adds	r2, r3, #1
   1160c:	str	r2, [r4, #0]
   1160e:	strb	r6, [r3, #0]
   11610:	ldr	r2, [r4, #20]
   11612:	adds	r3, r0, #1
   11614:	cmp	r2, r3
   11616:	beq.n	11622 <__swbuf_r+0x5a>
   11618:	ldrh	r3, [r4, #12]
   1161a:	lsls	r3, r3, #31
   1161c:	bpl.n	1162c <__swbuf_r+0x64>
   1161e:	cmp	r6, #10
   11620:	bne.n	1162c <__swbuf_r+0x64>
   11622:	mov	r1, r4
   11624:	mov	r0, r5
   11626:	bl	11094 <_fflush_r>
   1162a:	cbnz	r0, 1163c <__swbuf_r+0x74>
   1162c:	mov	r0, r7
   1162e:	pop	{r3, r4, r5, r6, r7, pc}
   11630:	mov	r1, r4
   11632:	mov	r0, r5
   11634:	bl	11644 <__swsetup_r>
   11638:	cmp	r0, #0
   1163a:	beq.n	115e8 <__swbuf_r+0x20>
   1163c:	mov.w	r7, #4294967295
   11640:	b.n	1162c <__swbuf_r+0x64>
	...

00011644 <__swsetup_r>:
   11644:	push	{r3, r4, r5, lr}
   11646:	ldr	r3, [pc, #168]	; (116f0 <__swsetup_r+0xac>)
   11648:	mov	r5, r0
   1164a:	ldr	r0, [r3, #0]
   1164c:	mov	r4, r1
   1164e:	cbz	r0, 11658 <__swsetup_r+0x14>
   11650:	ldr	r3, [r0, #32]
   11652:	cbnz	r3, 11658 <__swsetup_r+0x14>
   11654:	bl	e398 <__sinit>
   11658:	ldrh	r3, [r4, #12]
   1165a:	ldrsh.w	r2, [r4, #12]
   1165e:	lsls	r0, r3, #28
   11660:	bmi.n	116a8 <__swsetup_r+0x64>
   11662:	lsls	r1, r3, #27
   11664:	bmi.n	11676 <__swsetup_r+0x32>
   11666:	movs	r3, #9
   11668:	str	r3, [r5, #0]
   1166a:	orr.w	r3, r2, #64	; 0x40
   1166e:	strh	r3, [r4, #12]
   11670:	mov.w	r0, #4294967295
   11674:	b.n	116e0 <__swsetup_r+0x9c>
   11676:	lsls	r0, r3, #29
   11678:	bpl.n	116a0 <__swsetup_r+0x5c>
   1167a:	ldr	r1, [r4, #52]	; 0x34
   1167c:	cbz	r1, 11690 <__swsetup_r+0x4c>
   1167e:	add.w	r3, r4, #68	; 0x44
   11682:	cmp	r1, r3
   11684:	beq.n	1168c <__swsetup_r+0x48>
   11686:	mov	r0, r5
   11688:	bl	f518 <_free_r>
   1168c:	movs	r3, #0
   1168e:	str	r3, [r4, #52]	; 0x34
   11690:	ldrh	r3, [r4, #12]
   11692:	bic.w	r3, r3, #36	; 0x24
   11696:	strh	r3, [r4, #12]
   11698:	movs	r3, #0
   1169a:	str	r3, [r4, #4]
   1169c:	ldr	r3, [r4, #16]
   1169e:	str	r3, [r4, #0]
   116a0:	ldrh	r3, [r4, #12]
   116a2:	orr.w	r3, r3, #8
   116a6:	strh	r3, [r4, #12]
   116a8:	ldr	r3, [r4, #16]
   116aa:	cbnz	r3, 116c0 <__swsetup_r+0x7c>
   116ac:	ldrh	r3, [r4, #12]
   116ae:	and.w	r3, r3, #640	; 0x280
   116b2:	cmp.w	r3, #512	; 0x200
   116b6:	beq.n	116c0 <__swsetup_r+0x7c>
   116b8:	mov	r1, r4
   116ba:	mov	r0, r5
   116bc:	bl	11740 <__smakebuf_r>
   116c0:	ldrh	r0, [r4, #12]
   116c2:	ldrsh.w	r2, [r4, #12]
   116c6:	ands.w	r3, r0, #1
   116ca:	beq.n	116e2 <__swsetup_r+0x9e>
   116cc:	movs	r3, #0
   116ce:	str	r3, [r4, #8]
   116d0:	ldr	r3, [r4, #20]
   116d2:	negs	r3, r3
   116d4:	str	r3, [r4, #24]
   116d6:	ldr	r3, [r4, #16]
   116d8:	cbnz	r3, 116ec <__swsetup_r+0xa8>
   116da:	ands.w	r0, r0, #128	; 0x80
   116de:	bne.n	1166a <__swsetup_r+0x26>
   116e0:	pop	{r3, r4, r5, pc}
   116e2:	lsls	r1, r0, #30
   116e4:	it	pl
   116e6:	ldrpl	r3, [r4, #20]
   116e8:	str	r3, [r4, #8]
   116ea:	b.n	116d6 <__swsetup_r+0x92>
   116ec:	movs	r0, #0
   116ee:	b.n	116e0 <__swsetup_r+0x9c>
   116f0:	.word	0x2000228c

000116f4 <__swhatbuf_r>:
   116f4:	push	{r4, r5, r6, lr}
   116f6:	mov	r4, r1
   116f8:	ldrsh.w	r1, [r1, #14]
   116fc:	cmp	r1, #0
   116fe:	sub	sp, #88	; 0x58
   11700:	mov	r5, r2
   11702:	mov	r6, r3
   11704:	bge.n	11722 <__swhatbuf_r+0x2e>
   11706:	ldrh	r3, [r4, #12]
   11708:	tst.w	r3, #128	; 0x80
   1170c:	mov.w	r1, #0
   11710:	ite	eq
   11712:	moveq.w	r3, #1024	; 0x400
   11716:	movne	r3, #64	; 0x40
   11718:	movs	r0, #0
   1171a:	str	r1, [r6, #0]
   1171c:	str	r3, [r5, #0]
   1171e:	add	sp, #88	; 0x58
   11720:	pop	{r4, r5, r6, pc}
   11722:	mov	r2, sp
   11724:	bl	117b8 <_fstat_r>
   11728:	cmp	r0, #0
   1172a:	blt.n	11706 <__swhatbuf_r+0x12>
   1172c:	ldr	r1, [sp, #4]
   1172e:	and.w	r1, r1, #61440	; 0xf000
   11732:	sub.w	r3, r1, #8192	; 0x2000
   11736:	negs	r1, r3
   11738:	adcs	r1, r3
   1173a:	mov.w	r3, #1024	; 0x400
   1173e:	b.n	11718 <__swhatbuf_r+0x24>

00011740 <__smakebuf_r>:
   11740:	ldrh	r3, [r1, #12]
   11742:	push	{r0, r1, r4, r5, r6, lr}
   11744:	lsls	r5, r3, #30
   11746:	mov	r6, r0
   11748:	mov	r4, r1
   1174a:	bpl.n	1175c <__smakebuf_r+0x1c>
   1174c:	add.w	r3, r4, #71	; 0x47
   11750:	str	r3, [r4, #0]
   11752:	str	r3, [r4, #16]
   11754:	movs	r3, #1
   11756:	str	r3, [r4, #20]
   11758:	add	sp, #8
   1175a:	pop	{r4, r5, r6, pc}
   1175c:	add	r3, sp, #4
   1175e:	mov	r2, sp
   11760:	bl	116f4 <__swhatbuf_r>
   11764:	ldr	r1, [sp, #0]
   11766:	mov	r5, r0
   11768:	mov	r0, r6
   1176a:	bl	c7e8 <_malloc_r>
   1176e:	cbnz	r0, 11784 <__smakebuf_r+0x44>
   11770:	ldrsh.w	r3, [r4, #12]
   11774:	lsls	r2, r3, #22
   11776:	bmi.n	11758 <__smakebuf_r+0x18>
   11778:	bic.w	r3, r3, #3
   1177c:	orr.w	r3, r3, #2
   11780:	strh	r3, [r4, #12]
   11782:	b.n	1174c <__smakebuf_r+0xc>
   11784:	ldrh	r3, [r4, #12]
   11786:	str	r0, [r4, #0]
   11788:	orr.w	r3, r3, #128	; 0x80
   1178c:	strh	r3, [r4, #12]
   1178e:	ldr	r3, [sp, #0]
   11790:	str	r3, [r4, #20]
   11792:	ldr	r3, [sp, #4]
   11794:	str	r0, [r4, #16]
   11796:	cbz	r3, 117b0 <__smakebuf_r+0x70>
   11798:	ldrsh.w	r1, [r4, #14]
   1179c:	mov	r0, r6
   1179e:	bl	117dc <_isatty_r>
   117a2:	cbz	r0, 117b0 <__smakebuf_r+0x70>
   117a4:	ldrh	r3, [r4, #12]
   117a6:	bic.w	r3, r3, #3
   117aa:	orr.w	r3, r3, #1
   117ae:	strh	r3, [r4, #12]
   117b0:	ldrh	r3, [r4, #12]
   117b2:	orrs	r5, r3
   117b4:	strh	r5, [r4, #12]
   117b6:	b.n	11758 <__smakebuf_r+0x18>

000117b8 <_fstat_r>:
   117b8:	push	{r3, r4, r5, lr}
   117ba:	ldr	r5, [pc, #28]	; (117d8 <_fstat_r+0x20>)
   117bc:	movs	r3, #0
   117be:	mov	r4, r0
   117c0:	mov	r0, r1
   117c2:	mov	r1, r2
   117c4:	str	r3, [r5, #0]
   117c6:	bl	b4fa <_fstat>
   117ca:	adds	r3, r0, #1
   117cc:	bne.n	117d4 <_fstat_r+0x1c>
   117ce:	ldr	r3, [r5, #0]
   117d0:	cbz	r3, 117d4 <_fstat_r+0x1c>
   117d2:	str	r3, [r4, #0]
   117d4:	pop	{r3, r4, r5, pc}
   117d6:	nop
   117d8:	.word	0x20020ba4

000117dc <_isatty_r>:
   117dc:	push	{r3, r4, r5, lr}
   117de:	ldr	r5, [pc, #24]	; (117f8 <_isatty_r+0x1c>)
   117e0:	movs	r3, #0
   117e2:	mov	r4, r0
   117e4:	mov	r0, r1
   117e6:	str	r3, [r5, #0]
   117e8:	bl	b504 <_isatty>
   117ec:	adds	r3, r0, #1
   117ee:	bne.n	117f6 <_isatty_r+0x1a>
   117f0:	ldr	r3, [r5, #0]
   117f2:	cbz	r3, 117f6 <_isatty_r+0x1a>
   117f4:	str	r3, [r4, #0]
   117f6:	pop	{r3, r4, r5, pc}
   117f8:	.word	0x20020ba4

000117fc <__aeabi_drsub>:
   117fc:	eor.w	r1, r1, #2147483648	; 0x80000000
   11800:	b.n	11808 <__adddf3>
   11802:	nop

00011804 <__aeabi_dsub>:
   11804:	eor.w	r3, r3, #2147483648	; 0x80000000

00011808 <__adddf3>:
   11808:	push	{r4, r5, lr}
   1180a:	mov.w	r4, r1, lsl #1
   1180e:	mov.w	r5, r3, lsl #1
   11812:	teq	r4, r5
   11816:	it	eq
   11818:	teqeq	r0, r2
   1181c:	itttt	ne
   1181e:	orrsne.w	ip, r4, r0
   11822:	orrsne.w	ip, r5, r2
   11826:	mvnsne.w	ip, r4, asr #21
   1182a:	mvnsne.w	ip, r5, asr #21
   1182e:	beq.w	119f6 <__adddf3+0x1ee>
   11832:	mov.w	r4, r4, lsr #21
   11836:	rsbs	r5, r4, r5, lsr #21
   1183a:	it	lt
   1183c:	neglt	r5, r5
   1183e:	ble.n	1185a <__adddf3+0x52>
   11840:	add	r4, r5
   11842:	eor.w	r2, r0, r2
   11846:	eor.w	r3, r1, r3
   1184a:	eor.w	r0, r2, r0
   1184e:	eor.w	r1, r3, r1
   11852:	eor.w	r2, r0, r2
   11856:	eor.w	r3, r1, r3
   1185a:	cmp	r5, #54	; 0x36
   1185c:	it	hi
   1185e:	pophi	{r4, r5, pc}
   11860:	tst.w	r1, #2147483648	; 0x80000000
   11864:	mov.w	r1, r1, lsl #12
   11868:	mov.w	ip, #1048576	; 0x100000
   1186c:	orr.w	r1, ip, r1, lsr #12
   11870:	beq.n	11878 <__adddf3+0x70>
   11872:	negs	r0, r0
   11874:	sbc.w	r1, r1, r1, lsl #1
   11878:	tst.w	r3, #2147483648	; 0x80000000
   1187c:	mov.w	r3, r3, lsl #12
   11880:	orr.w	r3, ip, r3, lsr #12
   11884:	beq.n	1188c <__adddf3+0x84>
   11886:	negs	r2, r2
   11888:	sbc.w	r3, r3, r3, lsl #1
   1188c:	teq	r4, r5
   11890:	beq.w	119e2 <__adddf3+0x1da>
   11894:	sub.w	r4, r4, #1
   11898:	rsbs	lr, r5, #32
   1189c:	blt.n	118ba <__adddf3+0xb2>
   1189e:	lsl.w	ip, r2, lr
   118a2:	lsr.w	r2, r2, r5
   118a6:	adds	r0, r0, r2
   118a8:	adc.w	r1, r1, #0
   118ac:	lsl.w	r2, r3, lr
   118b0:	adds	r0, r0, r2
   118b2:	asr.w	r3, r3, r5
   118b6:	adcs	r1, r3
   118b8:	b.n	118d8 <__adddf3+0xd0>
   118ba:	sub.w	r5, r5, #32
   118be:	add.w	lr, lr, #32
   118c2:	cmp	r2, #1
   118c4:	lsl.w	ip, r3, lr
   118c8:	it	cs
   118ca:	orrcs.w	ip, ip, #2
   118ce:	asr.w	r3, r3, r5
   118d2:	adds	r0, r0, r3
   118d4:	adcs.w	r1, r1, r3, asr #31
   118d8:	and.w	r5, r1, #2147483648	; 0x80000000
   118dc:	bpl.n	118ee <__adddf3+0xe6>
   118de:	mov.w	lr, #0
   118e2:	rsbs	ip, ip, #0
   118e6:	sbcs.w	r0, lr, r0
   118ea:	sbc.w	r1, lr, r1
   118ee:	cmp.w	r1, #1048576	; 0x100000
   118f2:	bcc.n	1192c <__adddf3+0x124>
   118f4:	cmp.w	r1, #2097152	; 0x200000
   118f8:	bcc.n	11914 <__adddf3+0x10c>
   118fa:	lsrs	r1, r1, #1
   118fc:	movs.w	r0, r0, rrx
   11900:	mov.w	ip, ip, rrx
   11904:	add.w	r4, r4, #1
   11908:	mov.w	r2, r4, lsl #21
   1190c:	cmn.w	r2, #4194304	; 0x400000
   11910:	bcs.w	11a48 <__adddf3+0x240>
   11914:	cmp.w	ip, #2147483648	; 0x80000000
   11918:	it	eq
   1191a:	movseq.w	ip, r0, lsr #1
   1191e:	adcs.w	r0, r0, #0
   11922:	adc.w	r1, r1, r4, lsl #20
   11926:	orr.w	r1, r1, r5
   1192a:	pop	{r4, r5, pc}
   1192c:	movs.w	ip, ip, lsl #1
   11930:	adcs	r0, r0
   11932:	adc.w	r1, r1, r1
   11936:	subs	r4, #1
   11938:	it	cs
   1193a:	cmpcs.w	r1, #1048576	; 0x100000
   1193e:	bcs.n	11914 <__adddf3+0x10c>
   11940:	teq	r1, #0
   11944:	itt	eq
   11946:	moveq	r1, r0
   11948:	moveq	r0, #0
   1194a:	clz	r3, r1
   1194e:	it	eq
   11950:	addeq	r3, #32
   11952:	sub.w	r3, r3, #11
   11956:	subs.w	r2, r3, #32
   1195a:	bge.n	11976 <__adddf3+0x16e>
   1195c:	adds	r2, #12
   1195e:	ble.n	11972 <__adddf3+0x16a>
   11960:	add.w	ip, r2, #20
   11964:	rsb	r2, r2, #12
   11968:	lsl.w	r0, r1, ip
   1196c:	lsr.w	r1, r1, r2
   11970:	b.n	1198c <__adddf3+0x184>
   11972:	add.w	r2, r2, #20
   11976:	it	le
   11978:	rsble	ip, r2, #32
   1197c:	lsl.w	r1, r1, r2
   11980:	lsr.w	ip, r0, ip
   11984:	itt	le
   11986:	orrle.w	r1, r1, ip
   1198a:	lslle	r0, r2
   1198c:	subs	r4, r4, r3
   1198e:	ittt	ge
   11990:	addge.w	r1, r1, r4, lsl #20
   11994:	orrge	r1, r5
   11996:	popge	{r4, r5, pc}
   11998:	mvn.w	r4, r4
   1199c:	subs	r4, #31
   1199e:	bge.n	119da <__adddf3+0x1d2>
   119a0:	adds	r4, #12
   119a2:	bgt.n	119c2 <__adddf3+0x1ba>
   119a4:	add.w	r4, r4, #20
   119a8:	rsb	r2, r4, #32
   119ac:	lsr.w	r0, r0, r4
   119b0:	lsl.w	r3, r1, r2
   119b4:	orr.w	r0, r0, r3
   119b8:	lsr.w	r3, r1, r4
   119bc:	orr.w	r1, r5, r3
   119c0:	pop	{r4, r5, pc}
   119c2:	rsb	r4, r4, #12
   119c6:	rsb	r2, r4, #32
   119ca:	lsr.w	r0, r0, r2
   119ce:	lsl.w	r3, r1, r4
   119d2:	orr.w	r0, r0, r3
   119d6:	mov	r1, r5
   119d8:	pop	{r4, r5, pc}
   119da:	lsr.w	r0, r1, r4
   119de:	mov	r1, r5
   119e0:	pop	{r4, r5, pc}
   119e2:	teq	r4, #0
   119e6:	eor.w	r3, r3, #1048576	; 0x100000
   119ea:	itte	eq
   119ec:	eoreq.w	r1, r1, #1048576	; 0x100000
   119f0:	addeq	r4, #1
   119f2:	subne	r5, #1
   119f4:	b.n	11894 <__adddf3+0x8c>
   119f6:	mvns.w	ip, r4, asr #21
   119fa:	it	ne
   119fc:	mvnsne.w	ip, r5, asr #21
   11a00:	beq.n	11a56 <__adddf3+0x24e>
   11a02:	teq	r4, r5
   11a06:	it	eq
   11a08:	teqeq	r0, r2
   11a0c:	beq.n	11a1a <__adddf3+0x212>
   11a0e:	orrs.w	ip, r4, r0
   11a12:	itt	eq
   11a14:	moveq	r1, r3
   11a16:	moveq	r0, r2
   11a18:	pop	{r4, r5, pc}
   11a1a:	teq	r1, r3
   11a1e:	ittt	ne
   11a20:	movne	r1, #0
   11a22:	movne	r0, #0
   11a24:	popne	{r4, r5, pc}
   11a26:	movs.w	ip, r4, lsr #21
   11a2a:	bne.n	11a38 <__adddf3+0x230>
   11a2c:	lsls	r0, r0, #1
   11a2e:	adcs	r1, r1
   11a30:	it	cs
   11a32:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11a36:	pop	{r4, r5, pc}
   11a38:	adds.w	r4, r4, #4194304	; 0x400000
   11a3c:	itt	cc
   11a3e:	addcc.w	r1, r1, #1048576	; 0x100000
   11a42:	popcc	{r4, r5, pc}
   11a44:	and.w	r5, r1, #2147483648	; 0x80000000
   11a48:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11a4c:	orr.w	r1, r1, #15728640	; 0xf00000
   11a50:	mov.w	r0, #0
   11a54:	pop	{r4, r5, pc}
   11a56:	mvns.w	ip, r4, asr #21
   11a5a:	itte	ne
   11a5c:	movne	r1, r3
   11a5e:	movne	r0, r2
   11a60:	mvnseq.w	ip, r5, asr #21
   11a64:	itt	ne
   11a66:	movne	r3, r1
   11a68:	movne	r2, r0
   11a6a:	orrs.w	r4, r0, r1, lsl #12
   11a6e:	itte	eq
   11a70:	orrseq.w	r5, r2, r3, lsl #12
   11a74:	teqeq	r1, r3
   11a78:	orrne.w	r1, r1, #524288	; 0x80000
   11a7c:	pop	{r4, r5, pc}
   11a7e:	nop

00011a80 <__aeabi_ui2d>:
   11a80:	teq	r0, #0
   11a84:	itt	eq
   11a86:	moveq	r1, #0
   11a88:	bxeq	lr
   11a8a:	push	{r4, r5, lr}
   11a8c:	mov.w	r4, #1024	; 0x400
   11a90:	add.w	r4, r4, #50	; 0x32
   11a94:	mov.w	r5, #0
   11a98:	mov.w	r1, #0
   11a9c:	b.n	11940 <__adddf3+0x138>
   11a9e:	nop

00011aa0 <__aeabi_i2d>:
   11aa0:	teq	r0, #0
   11aa4:	itt	eq
   11aa6:	moveq	r1, #0
   11aa8:	bxeq	lr
   11aaa:	push	{r4, r5, lr}
   11aac:	mov.w	r4, #1024	; 0x400
   11ab0:	add.w	r4, r4, #50	; 0x32
   11ab4:	ands.w	r5, r0, #2147483648	; 0x80000000
   11ab8:	it	mi
   11aba:	negmi	r0, r0
   11abc:	mov.w	r1, #0
   11ac0:	b.n	11940 <__adddf3+0x138>
   11ac2:	nop

00011ac4 <__aeabi_f2d>:
   11ac4:	lsls	r2, r0, #1
   11ac6:	mov.w	r1, r2, asr #3
   11aca:	mov.w	r1, r1, rrx
   11ace:	mov.w	r0, r2, lsl #28
   11ad2:	itttt	ne
   11ad4:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11ad8:	teqne	r3, #4278190080	; 0xff000000
   11adc:	eorne.w	r1, r1, #939524096	; 0x38000000
   11ae0:	bxne	lr
   11ae2:	bics.w	r2, r2, #4278190080	; 0xff000000
   11ae6:	it	eq
   11ae8:	bxeq	lr
   11aea:	teq	r3, #4278190080	; 0xff000000
   11aee:	itt	eq
   11af0:	orreq.w	r1, r1, #524288	; 0x80000
   11af4:	bxeq	lr
   11af6:	push	{r4, r5, lr}
   11af8:	mov.w	r4, #896	; 0x380
   11afc:	and.w	r5, r1, #2147483648	; 0x80000000
   11b00:	bic.w	r1, r1, #2147483648	; 0x80000000
   11b04:	b.n	11940 <__adddf3+0x138>
   11b06:	nop

00011b08 <__aeabi_ul2d>:
   11b08:	orrs.w	r2, r0, r1
   11b0c:	it	eq
   11b0e:	bxeq	lr
   11b10:	push	{r4, r5, lr}
   11b12:	mov.w	r5, #0
   11b16:	b.n	11b2e <__aeabi_l2d+0x16>

00011b18 <__aeabi_l2d>:
   11b18:	orrs.w	r2, r0, r1
   11b1c:	it	eq
   11b1e:	bxeq	lr
   11b20:	push	{r4, r5, lr}
   11b22:	ands.w	r5, r1, #2147483648	; 0x80000000
   11b26:	bpl.n	11b2e <__aeabi_l2d+0x16>
   11b28:	negs	r0, r0
   11b2a:	sbc.w	r1, r1, r1, lsl #1
   11b2e:	mov.w	r4, #1024	; 0x400
   11b32:	add.w	r4, r4, #50	; 0x32
   11b36:	movs.w	ip, r1, lsr #22
   11b3a:	beq.w	118ee <__adddf3+0xe6>
   11b3e:	mov.w	r2, #3
   11b42:	movs.w	ip, ip, lsr #3
   11b46:	it	ne
   11b48:	addne	r2, #3
   11b4a:	movs.w	ip, ip, lsr #3
   11b4e:	it	ne
   11b50:	addne	r2, #3
   11b52:	add.w	r2, r2, ip, lsr #3
   11b56:	rsb	r3, r2, #32
   11b5a:	lsl.w	ip, r0, r3
   11b5e:	lsr.w	r0, r0, r2
   11b62:	lsl.w	lr, r1, r3
   11b66:	orr.w	r0, r0, lr
   11b6a:	lsr.w	r1, r1, r2
   11b6e:	add	r4, r2
   11b70:	b.n	118ee <__adddf3+0xe6>
   11b72:	nop

00011b74 <__aeabi_d2lz>:
   11b74:	push	{r3, lr}
   11b76:	mov	r2, r0
   11b78:	mov	r3, r1
   11b7a:	vmov	d7, r2, r3
   11b7e:	vcmpe.f64	d7, #0.0
   11b82:	vmrs	APSR_nzcv, fpscr
   11b86:	bmi.n	11b90 <__aeabi_d2lz+0x1c>
   11b88:	ldmia.w	sp!, {r3, lr}
   11b8c:	b.w	11ba8 <__aeabi_d2ulz>
   11b90:	vneg.f64	d7, d7
   11b94:	vmov	r0, r1, d7
   11b98:	bl	11ba8 <__aeabi_d2ulz>
   11b9c:	negs	r0, r0
   11b9e:	sbc.w	r1, r1, r1, lsl #1
   11ba2:	pop	{r3, pc}
   11ba4:	movs	r0, r0
	...

00011ba8 <__aeabi_d2ulz>:
   11ba8:	vldr	d6, [pc, #44]	; 11bd8 <__aeabi_d2ulz+0x30>
   11bac:	vmov	d7, r0, r1
   11bb0:	vldr	d5, [pc, #44]	; 11be0 <__aeabi_d2ulz+0x38>
   11bb4:	vmul.f64	d6, d7, d6
   11bb8:	vcvt.u32.f64	s12, d6
   11bbc:	vcvt.f64.u32	d4, s12
   11bc0:	vfms.f64	d7, d4, d5
   11bc4:	vcvt.u32.f64	s15, d7
   11bc8:	vmov	r1, s12
   11bcc:	vmov	r0, s15
   11bd0:	bx	lr
   11bd2:	nop
   11bd4:	nop.w
   11bd8:	.word	0x00000000
   11bdc:	.word	0x3df00000
   11be0:	.word	0x00000000
   11be4:	.word	0x41f00000

00011be8 <___reboot_Teensyduino__veneer>:
   11be8:	ldr.w	pc, [pc]	; 11bec <___reboot_Teensyduino__veneer+0x4>
   11bec:	.word	0x60001899

00011bf0 <___Z14set_audioClockilm_veneer>:
   11bf0:	ldr.w	pc, [pc]	; 11bf4 <___Z14set_audioClockilm_veneer+0x4>
   11bf4:	.word	0x600024d1

00011bf8 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   11bf8:	ldr.w	pc, [pc]	; 11bfc <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   11bfc:	.word	0x60001f1d

00011c00 <__usb_init_veneer>:
   11c00:	ldr.w	pc, [pc]	; 11c04 <__usb_init_veneer+0x4>
   11c04:	.word	0x600017b5

00011c08 <___init_veneer>:
   11c08:	ldr.w	pc, [pc]	; 11c0c <___init_veneer+0x4>
   11c0c:	.word	0x6000241d

00011c10 <___ZN7TwoWire5beginEv_veneer>:
   11c10:	ldr.w	pc, [pc]	; 11c14 <___ZN7TwoWire5beginEv_veneer+0x4>
   11c14:	.word	0x6000176d

00011c18 <___ZN16CrashReportClasscvbEv_veneer>:
   11c18:	ldr.w	pc, [pc]	; 11c1c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   11c1c:	.word	0x600023c1

Disassembly of section .fini:

00011c20 <_fini>:
   11c20:	push	{r3, r4, r5, r6, r7, lr}
   11c22:	nop


.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d4 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00012630 l    d  .fini	00000000 .fini
00012634 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017428 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000b1ec l     F .text.itcm	000000a0 endpoint0_receive
0000b28c l     F .text.itcm	0000007c schedule_transfer
0000b308 l     F .text.itcm	00000034 run_callbacks
0000b33c l     F .text.itcm	0000001c usb_endpoint_config
0000b358 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
200215e5 l     O .bss	00000008 endpoint0_buffer
20020b9c l     O .bss	00000004 endpoint0_notify_mask
20007dc0 l     O .bss	00000008 endpoint0_setupdata
20020ba0 l     O .bss	00000004 endpointN_notify_mask
200215ef l     O .bss	00000008 reply_buffer
20021609 l     O .bss	00000001 sof_usage
20021611 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20020cdc l     O .bss	00000004 s_hotCount
20020ce0 l     O .bss	00000004 s_hotTemp
20020ce4 l     O .bss	00000004 s_hot_ROOM
20020ce8 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
200215e4 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20020c38 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000698 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
20007dcc l     O .bss	00000004 guard variable for loop::status
20020840 l     O .bss	00000004 loop::t0
200213cc l     O .bss	00000002 loop::mxb
200213ce l     O .bss	00000002 loop::status
20020844 l     O .bss	00000004 loop::loopCount
200010b4 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
00000910 l     F .text.itcm	000000b8 acq_isr()
00000c74 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
2001ffdc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
0000288a l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000028aa l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
000028b2 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
000028d6 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000028da l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20007dd0 l     O .bss	0000c000 diskBuffer
20013fdc l     O .bss	0000c000 tempBuffer0
00003158 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
20013dd0 l     O .bss	00000200 fileHeader
200214a6 l     O .bss	00000050 dirName
200203f4 l     O .bss	00000200 wav_hdr
200214f6 l     O .bss	00000050 fileName
2002083c l     O .bss	00000004 checkEndOfFile(short)::dta
2002154a l     O .bss	00000050 timeStamp()::date_time
20002188 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 RTC.cpp
0000386e l     F .text.itcm	00000026 Print::println(char const*) [clone .isra.0]
00003bbc l     F .text.itcm	0000000c _GLOBAL__sub_I__Z7initRTChh
2000111b l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 usb_desc.c
2000239d l     O .data	00000012 device_descriptor
60002722 l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000cc2 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000ce8 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000d24 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00001128 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
000016b8 l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
00001820 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b88 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001ee0 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ef2 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001f08 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001f2c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001f30 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f44 l     F .text.itcm	00000038 menuGetLine()
00001f7c l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f98 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
200213ac l     O .bss	00000020 store
2002159a l     O .bss	00000028 menuGetLine()::buffer
200010dc l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00480000 data_buffer
20013fd4 l     O .bss	00000004 queue_busy
200201e4 l     O .bss	00000004 head
200201e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
2001ffe4 l     O .bss	00000200 dout
200201f4 l     O .bss	00000200 outData
200205f4 l     O .bss	00000200 tempData
20020848 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000034cc l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
200010a8 l     O .data	00000004 regs
200010ac l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RV-3028-C7.cpp
00003f6c l     F .text.itcm	0000000a RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]
0000419c l     F .text.itcm	00000030 RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]
200215c2 l     O .bss	00000020 RV3028::stringTimeStamp()::timeStamp
00000000 l    df *ABS*	00000000 MTP.cpp
0000421a l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00004230 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00004ca2 l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2002084c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20020850 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000b5c l     O .data	00000014 propertyList
20000b70 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000a30 l     O .data	0000012c lookupTable
20000b98 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006af0 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000074b0 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00008578 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00009638 l     F .text.itcm	0000002c sdIrs()
00009664 l     F .text.itcm	00000020 gpioMux(unsigned char)
00009684 l     F .text.itcm	00000018 isBusyCommandComplete()
0000969c l     F .text.itcm	00000010 isBusyCommandInhibit()
000096ac l     F .text.itcm	00000014 isBusyDat()
000096c0 l     F .text.itcm	0000000c isBusyDMA()
000096cc l     F .text.itcm	00000014 isBusyFifoRead()
000096e0 l     F .text.itcm	00000014 isBusyFifoWrite()
000096f4 l     F .text.itcm	00000018 isBusyTransferComplete()
0000970c l     F .text.itcm	000000a4 setSdclk(unsigned long)
00009814 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00009838 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00009884 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
000098b4 l     F .text.itcm	000000d4 initSDHC()
000099a4 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00009a0c l     F .text.itcm	00000020 statusCMD13()
00009a2c l     F .text.itcm	00000010 isBusyCMD13()
00009a40 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009a98 l     F .text.itcm	00000030 waitDmaStatus()
00009ac8 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009dc0 l     F .text.itcm	0000005c waitTransferComplete()
0000a028 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20021482 l     O .bss	00000001 m_initDone
20013fd0 l     O .bss	00000004 m_sdClkKhz
20021483 l     O .bss	00000001 m_version2
20013fd8 l     O .bss	00000004 m_errorLine
20021484 l     O .bss	00000001 m_highCapacity
20021485 l     O .bss	00000001 m_transferActive
20021486 l     O .bss	00000010 m_cid
20021496 l     O .bss	00000010 m_csd
200201ec l     O .bss	00000004 m_ocr
200201f0 l     O .bss	00000004 m_rca
200207f4 l     O .bss	00000004 m_busyFcn
20021546 l     O .bss	00000001 m_dmaBusy
200207f8 l     O .bss	00000004 m_irqstat
2000239c l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000a568 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a8d0 l     F .text.itcm	00000060 rx_queue_transfer
20004b40 l     O .bss	00001000 rx_buffer
0000a930 l     F .text.itcm	000000ac rx_event
0000a9dc l     F .text.itcm	0000008c usb_serial_flush_callback
20005dc0 l     O .bss	00002000 txbuffer
20020cc4 l     O .bss	00000004 rx_available
200213d8 l     O .bss	00000010 rx_count
200215f7 l     O .bss	00000001 rx_head
200213e8 l     O .bss	00000010 rx_index
200215f9 l     O .bss	00000009 rx_list
200213f8 l     O .bss	00000002 rx_packet_size
20021607 l     O .bss	00000001 rx_tail
20005b40 l     O .bss	00000100 rx_transfer
2002160a l     O .bss	00000001 transmit_previous_timeout
2002147c l     O .bss	00000002 tx_available
2002160b l     O .bss	00000001 tx_head
2002160d l     O .bss	00000001 tx_noautoflush
2002147e l     O .bss	00000002 tx_packet_size
20005cc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000bf48 l     F .text.itcm	00000058 flash_wait
200215ee l     O .bss	00000001 initialized
200213fc l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c5e0 l     F .text.itcm	00000010 txEvent_event
0000c5f0 l     F .text.itcm	0000003c rx_event
0000c62c l     F .text.itcm	00000060 rx_queue_transfer
200215f8 l     O .bss	00000001 rx_head
20021602 l     O .bss	00000005 rx_list
20020cc8 l     O .bss	00000014 rx_list_transfer_len
200213fa l     O .bss	00000002 rx_packet_size
20021608 l     O .bss	00000001 rx_tail
20005c40 l     O .bss	00000080 rx_transfer
2002160c l     O .bss	00000001 tx_head
20021480 l     O .bss	00000002 tx_packet_size
20005d40 l     O .bss	00000080 tx_transfer
20200800 l     O .bss.dma	00000800 rx_buffer
20201000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20021549 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000cbf2 l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000d1b8 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000d35a l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000df00 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000ecb4 l     F .text.itcm	00000048 std
0000ecfc l     F .text.itcm	00000018 stdio_exit_handler
0000ed14 l     F .text.itcm	00000040 cleanup_stdio
0000ed54 l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000f33c l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000ffc0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
000104ec l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00011c44 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
00011d50 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
000125f8 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00012600 l     F .text.itcm	00000008 __usb_init_veneer
00012608 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00012610 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00012618 l     F .text.itcm	00000008 ___init_veneer
00012620 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00012628 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60002428 l     F .text.code	00000008 __set_arm_clock_veneer
60002430 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002438 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002440 l     F .text.code	00000008 __memset_veneer
60002448 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
60002450 l     F .text.code	00000008 ____libc_init_array_veneer
60002458 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002460 l     F .text.code	00000008 __pwm_init_veneer
60002468 l     F .text.code	00000008 __sm_set_pool_veneer
60002470 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002478 l     F .text.code	00000008 __delay_veneer
60002480 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002488 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002490 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002498 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
600024a0 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
600024a8 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
600024b8 l     F .text.code	00000008 __main_veneer
00010fe8 g     F .text.itcm	00000010 _malloc_usable_size_r
000074e0  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d4 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000e032 g     F .text.itcm	000000a4 __cvt
00005c38 g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010e2 g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000116fc g     F .text.itcm	000000b4 _scanf_chars
00002764 g     F .text.itcm	00000060 pushData(unsigned long*)
0000ac84 g     F .text.itcm	00000014 usb_serial_available
00010fa6 g     F .text.itcm	00000042 __any_on
000121ec g     F .text.itcm	00000020 _isatty_r
0000f25c g     F .text.itcm	00000010 strcpy
000080bc g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000f178 g     F .text.itcm	00000024 _lseek_r
00009b60 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c960  w    F .text.itcm	00000074 yield
00008fa4  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20020c58 g     O .bss	00000060 proc_stat
200213a8 g     O .bss	00000004 usb_timer1_callback
000043b0 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00004408 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00007f18 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000ccce g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200211c4 g     O .bss	000001b8 storage
60002634 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200213d6 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003b08 g     F .text.itcm	0000005c rtcXferTime()
00008f0e  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001f08 g     O .data	00000140 Wire1
000095f8  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00012528 g     F .text.itcm	0000005a .hidden __floatdidf
000086f4 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20020c50 g     O .bss	00000004 procCount
00008424 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200207fc g     O .bss	00000004 FsDateTime::callback
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00008818 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
000093e0 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000cc68 g     F .text.itcm	0000001a Print::println()
0000594c g     F .text.itcm	00000098 TwoWire::isr()
200004b4 g     O .data	00000070 vtable for DedicatedSpiCard
20020c54 g     O .bss	00000004 procMiss
0000ef72 g     F .text.itcm	00000024 __sseek
0000eda8 g     F .text.itcm	00000030 __sinit
00006164 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00011014 g     F .text.itcm	00000094 fcvtbuf
00011fd8 g     F .text.itcm	0000007a __swbuf_r
000042ce g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000d2f0 g     F .text.itcm	0000000c __malloc_unlock
000037e6 g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
20002374 g     O .data	00000004 t_4
20020834 g     O .bss	00000004 FsVolume::m_cwv
000037a0 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002734 g     F .text.itcm	00000008 getStore()
00007ac8 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20007dc8 g     O .bss	00000004 SerNum
20021548 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00008f02  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000def4 g     F .text.itcm	0000000c _strtod_r
000016e6 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000ef9e g     F .text.itcm	0000004a _vdprintf_r
00007baa g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
00010064 g     F .text.itcm	0000002a __hexdig_fun
00009232 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000bfa0 g     F .text.itcm	00000044 eeprom_initialize
00003078 g     F .text.itcm	000000e0 saveData(short)
2002147a g     O .bss	00000002 shift
20001db4 g     O .data	00000004 F_CPU_ACTUAL
0000f07c g     F .text.itcm	00000034 memmove
20021388 g     O .bss	00000004 t_1
00001714 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20020c2c g     O .bss	00000004 max_stat
0000ee14 g     F .text.itcm	00000068 snprintf
0000a4e8 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
00010694 g     F .text.itcm	00000080 _Balloc
00000cae  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001263c g       .ARM.exidx	00000000 __exidx_end
00008336 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20021547 g     O .bss	00000001 EventResponder::runningFromYield
0000a6de g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008df8 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000c3d4 g     F .text.itcm	00000060 tempmonGetTemp
0000c314 g     F .text.itcm	0000001e smalloc_verify_pool
0000f204 g     F .text.itcm	0000000c __errno
0000215c g     F .text.itcm	0000009c saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2002080c g     O .bss	00000004 EventResponder::firstInterrupt
0000b9e0 g     F .text.itcm	00000028 usb_transfer_status
0000455e g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000406c g     F .text.itcm	00000082 RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)
0000c366 g     F .text.itcm	0000006a sm_set_pool
00002bb8 g     F .text.itcm	00000014 newFolder(int)
20020814 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003b8c g     F .text.itcm	00000030 rtcGetTimestamp()
20020994 g     O .bss	00000004 __stdio_exit_handler
000004e0  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00006a8c g     F .text.itcm	00000018 ExFatPartition::rootLength()
00012584 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
00002a28 g     F .text.itcm	00000014 headerUpdate(long)
0000cb64  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000121c8 g     F .text.itcm	00000024 _fstat_r
20000614 g     O .data	00000370 digital_pin_to_info_PGM
20020ba4 g     O .bss	00000004 errno
0000a6e8 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006810 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
6000256c  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
000117b0 g     F .text.itcm	000001e8 _scanf_i
0000ef36 g     F .text.itcm	00000004 __seofread
00012638 g       .text.itcm	00000000 _etext
00008b34 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
000097bc g     F .text.itcm	0000000c SdioCard::errorData() const
00000daa g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003ab2 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
0000435e g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001980 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009e1c g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
000069ac g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
00003e1a g     F .text.itcm	0000007c RV3028::set24Hour()
6000272c g       *ABS*	00000000 _stextload
0000027c g     F .text.itcm	00000224 loop
0000c4d8 g     F .text.itcm	00000072 flexpwm_init
0000c064 g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b8f4 g     F .text.itcm	00000040 usb_config_rx
00004798 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00003c24 g     F .text.itcm	0000001a RV3028::isPM()
00005f34 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000a320 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00003bc8 g     F .text.itcm	00000002 RV3028::RV3028()
00005754 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
00003832 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20020808 g     O .bss	00000004 EventResponder::lastInterrupt
00003c40 g     F .text.itcm	00000130 RV3028::stringTimeStamp()
00008c98 g     F .text.itcm	0000002a FsBaseFile::close()
0000efe8 g     F .text.itcm	00000014 vdiprintf
0000551e g     F .text.itcm	00000048 SPIClass::end()
0000a79c g     F .text.itcm	00000134 memcpy
00010538 g     F .text.itcm	00000136 __hexnan
00001744 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
000094a8 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00005a80 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
00001592 g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
0000214c g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
000068f0 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
0000144c g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
0000778a g     F .text.itcm	00000026 FatFile::peek()
000021f8 g     F .text.itcm	00000048 menu1(short)
20020c34 g     O .bss	00000004 nbuf
0001115c g     F .text.itcm	000001fc _svfprintf_r
000124b0 g     F .text.itcm	00000022 .hidden __floatsidf
20021380 g     O .bss	00000004 systick_millis_count
00006f90 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c7c4 g     F .text.itcm	00000030 usb_mtp_available
000004a0 g     F .text.itcm	00000040 setup1()
00005720 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000effc g     F .text.itcm	00000060 _vasniprintf_r
00004ee0 g     F .text.itcm	000005e6 MTPD::loop()
0000ce9c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
2002160f g     O .bss	00000001 usb_configuration
00008ef8  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000c332 g     F .text.itcm	00000034 sm_align_pool
0000a54c g     F .text.itcm	0000001c SdioCard::syncDevice()
00009f34 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
000077b0 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00010f00 g     F .text.itcm	00000060 __ratio
00008fb2 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002634  w    O .text.progmem	00000018 usb_string_manufacturer_name
20002370 g     O .data	00000004 t_3
6000260c g     O .text.progmem	00000008 usb_string_mtp
0000d198 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
000037a0 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025bc  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000054c  w    O .data	00000024 vtable for FsFile
0000bec6  w    F .text.itcm	0000000a _fstat
20020998 g     O .bss	00000200 acqBuffer
00005572  w    F .text.itcm	0000001e TwoWire::read()
00011bdc g     F .text.itcm	0000003c __assert_func
00004eac g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002ccc g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
00008cc2 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200211bc g     O .bss	00000004 sessionID_
00002d80 g     F .text.itcm	00000094 do_hibernate(unsigned long)
00008efe  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c98  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
0000bf04 g     F .text.itcm	00000044 rtc_set
000113d2 g     F .text.itcm	0000003a __ssrefill_r
20021384 g     O .bss	00000004 systick_safe_read
0000560c g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00007024 g     F .text.itcm	000000ca ExFatFile::truncate()
20002190 g     O .data	00000000 .hidden __dso_handle
0000c140 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00012490 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000f150 g     F .text.itcm	00000008 _localeconv_r
20002368 g     O .data	00000004 sd_str
0000a68a g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010914 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000c68c g     F .text.itcm	000000a4 usb_mtp_configure
2000237c g     O .data	00000004 t_on
600026b9 g     O .text.progmem	00000069 usb_config_descriptor_480
0000cecc g     F .text.itcm	000002c8 .hidden __udivmoddi4
000046c0 g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0001220c g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a6d8 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00007506 g     F .text.itcm	00000036 FatFile::addCluster()
0000f1c0 g     F .text.itcm	00000020 _sbrk_r
00009988 g     F .text.itcm	0000001c SdioCard::type() const
00004300 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000acf8 g     F .text.itcm	0000001e usb_serial_getchar
00000d92  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20021398 g     O .bss	00000008 usb_cdc_line_coding
0000c434 g     F .text.itcm	00000040 digitalWrite
00008114  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20020810 g     O .bss	00000004 EventResponder::lastYield
00005f0e g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000f19c g     F .text.itcm	00000024 _read_r
00000cfe  w    F .text.itcm	00000024 Print::write(char const*)
20021394 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008f9c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20020ba8 g     O .bss	00000010 extmem_smalloc_pool
00009328 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c474 g     F .text.itcm	00000064 pinMode
000014c6 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000f28  w    F .text.itcm	0000001c FsFile::FsFile()
0000cd60 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
000124d4 g     F .text.itcm	00000042 .hidden __extendsfdf2
0001140c g     F .text.itcm	000002f0 __ssvfscanf_r
0000cb28  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000ee0  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00012218 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20002048 g     O .data	00000140 Wire2
00004690 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
000042ec g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017800 g     O .text.csf	00000c00 hab_csf
00004374 g     F .text.itcm	0000003a MTPD::writestring(char const*)
0000837c g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00010db8 g     F .text.itcm	00000094 __b2d
00003558 g     F .text.itcm	000001a4 adc_init()
00012634 g       .ARM.exidx	00000000 __exidx_start
70480000 g       .bss.extram	00000000 _extram_end
00000904  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2000236c g     O .data	00000004 t_2
0000cb04  w    F .text.itcm	00000008 Print::print(unsigned char)
0000bed0  w    F .text.itcm	00000004 _isatty
20020804 g     O .bss	00000004 EventResponder::firstYield
00000f1a g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
00005b14 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d2fc g     F .text.itcm	0000005e _realloc_r
0000f210 g     F .text.itcm	00000048 __libc_init_array
0000ba50 g     F .text.itcm	00000248 dtostrf
00005566  w    F .text.itcm	0000000c TwoWire::available()
0000665a g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
000097c8 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00006dda g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001586 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00003c16 g     F .text.itcm	0000000e RV3028::is12Hour()
00001b44 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
000037c4 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
000107e4 g     F .text.itcm	00000094 __s2b
000092aa  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000beda  w    F .text.itcm	00000004 abort
00005838 g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000cb4c  w    F .text.itcm	00000004 usb_serial_class::clear()
00012490 g     F .text.itcm	0000001e .hidden __floatunsidf
0000be90  w    F .text.itcm	0000002c _sbrk
60014d68 g       *ABS*	00000000 _sdataload
00010c20 g     F .text.itcm	00000038 __mcmp
000018ca g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000218c g     O .data	00000004 __brkval
2002160e g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000aa68 g     F .text.itcm	00000002 usb_serial_reset
000075ac g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00003bca g     F .text.itcm	0000004c RV3028::readRegister(unsigned char)
0000c1f4 g     F .text.itcm	00000104 eeprom_write_byte
00001000  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
000125b8 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
60002650 g     O .text.progmem	00000069 usb_config_descriptor_12
20000570 g     O .data	00000024 vtable for TwoWire
0000d390 g     F .text.itcm	00000b64 _strtod_l
00010510 g     F .text.itcm	00000028 __match
20021640 g       .bss	00000000 _ebss
00009bdc g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000441c g     F .text.itcm	00000118 MTPD::WriteDescriptor()
00003f76 g     F .text.itcm	000000ae RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
20002360 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00010878 g     F .text.itcm	00000040 __hi0bits
00005e82 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
000059f0 g     F .text.itcm	0000000c lpi2c3_isr()
00006e8a g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20201880 g       .bss.dma	00000000 _heap_start
00004534 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200215e2 g     O .bss	00000001 __lock___malloc_recursive_mutex
000041cc g     F .text.itcm	0000004e RV3028::begin(TwoWire&, bool, bool, bool)
00001cc0 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006aa4 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
6000251c  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
00000904  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2002085c g     O .bss	00000138 __sf
20001dac g     O .data	00000004 CrashReport
20020cf0 g     O .bss	000004cc sdx
000091a8 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000554 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200026e0 g     O .bss	00000020 endpoint0_transfer_data
00007316 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00005bea g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000ce8c g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000c580 g     F .text.itcm	00000060 pwm_init
00011d2c g     F .text.itcm	00000024 fprintf
00012218 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20020bb8 g     O .bss	00000050 file
00004c14 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
200023af g     O .data	00000001 usb_mtp_status
60018400 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010a94 g     F .text.itcm	000000b4 __pow5mult
0000788e g     F .text.itcm	0000004c FatFile::rmdir()
200004a8 g     O .data	0000000c vtable for CrashReportClass
00012518 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
000059fc g     F .text.itcm	0000000c lpi2c4_isr()
000082b4 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20020c08 g     O .bss	00000004 haveStore
00009636  w    F .text.itcm	00000002 SdioCard::end()
0000ee14 g     F .text.itcm	00000068 sniprintf
200026c0 g     O .bss	00000020 endpoint0_transfer_ack
200213a0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b9a0 g     F .text.itcm	00000024 usb_transmit
00000d60  w    F .text.itcm	00000014 Print::println(char const*)
0000ca10 g     F .text.itcm	00000020 systick_isr
0000f25a g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003a9c g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00004328 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001db8 g     O .data	00000010 Serial
20020c0c g     O .bss	00000020 logBuffer
000110a8 g     F .text.itcm	000000b4 __ssputs_r
00002154 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
00003eea g     F .text.itcm	00000028 RV3028::updateTime()
0000cb6c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008d98 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
00006b44 g     F .text.itcm	00000094 ExFatFile::addCluster()
0000910c g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000ac40 g     F .text.itcm	00000044 usb_serial_peekchar
00011d7e g     F .text.itcm	00000024 __sfputs_r
0000ed90 g     F .text.itcm	0000000c __sfp_lock_acquire
0000f270 g     F .text.itcm	00000000 memchr
000081e4 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000e158  w    F .text.itcm	00000434 _printf_float
0000af9c g     F .text.itcm	00000250 set_arm_clock
2002137c g     O .bss	00000004 systick_cycle_count
20002386 g     O .data	00000016 usb_string_serial_number_default
0000ff28 g     F .text.itcm	00000098 _free_r
00009416 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
000094da g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009ec0 g     F .text.itcm	00000074 SdioCard::readStop()
00000dc6  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00008f06  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a66 g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000cb5c  w    F .text.itcm	00000004 usb_serial_class::flush()
00011358 g     F .text.itcm	0000007a _sungetc_r
00012214 g     F .text.itcm	0000027a .hidden __aeabi_dsub
00003d70 g     F .text.itcm	0000003a RV3028::writeRegister(unsigned char, unsigned char)
0000cb54  w    F .text.itcm	00000004 usb_serial_class::read()
00008be0 g     F .text.itcm	000000b8 FatFile::remove()
00012518 g     F .text.itcm	0000006a .hidden __floatundidf
00000f28  w    F .text.itcm	0000001c FsFile::FsFile()
0000bed4  w    F .text.itcm	00000006 _lseek
00003738 g     F .text.itcm	00000068 adcStatus()
00010b48 g     F .text.itcm	000000d8 __lshift
00004182 g     F .text.itcm	0000001a RV3028::disableTrickleCharge()
00002e14 g     F .text.itcm	00000264 storeData(short)
00007ce4 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b974 g     F .text.itcm	0000002c usb_prepare_transfer
00008f0a  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000bd10 g     F .text.itcm	00000180 unused_interrupt_vector
60001d28 g     F .text.code	0000012c tempmon_init
200213a4 g     O .bss	00000004 usb_timer0_callback
00008628 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000effc g     F .text.itcm	00000060 _vasnprintf_r
00002d6c g     F .text.itcm	00000014 powerDown()
00008f34 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00006594 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000bfe4 g     F .text.itcm	00000064 eeprom_read_byte
0000f0f6 g     F .text.itcm	00000036 strlcpy
0000120c g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000f12c g     F .text.itcm	00000024 strncmp
00008596 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00006ed2 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000403c g     F .text.itcm	00000030 RV3028::waitforEEPROM()
0000ac98 g     F .text.itcm	00000060 usb_serial_flush_input
2000235c g     O .data	00000004 fsamp
0000694a g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001354 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f9c  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
00010940 g     F .text.itcm	00000154 __multiply
0000273c g     F .text.itcm	0000001c getDataCount()
0000aea4 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000ef9e g     F .text.itcm	0000004a _vdiprintf_r
00000b28 g     F .text.itcm	00000080 i2s_setup()
00003550 g     F .text.itcm	00000008 adcStart()
00010e4c g     F .text.itcm	000000b4 __d2b
00009528 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
0000962e  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
00009874  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000cb2  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000ba8 g     F .text.itcm	000000a4 dma_setup()
00009030 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
0000926c g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009fbc g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00011d28 g     F .text.itcm	00000004 _strtoul_r
000034f0 g     F .text.itcm	00000024 usbPowerInit()
0000c7f4 g     F .text.itcm	000000c4 usb_mtp_send
0000b44c g     F .text.itcm	000004a8 usb_isr
0000e008 g     F .text.itcm	0000001c __cxa_atexit
00005fb4 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000f158 g     F .text.itcm	00000020 _close_r
000095be  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
000124b0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
000092e6 g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005b9c g     F .text.itcm	0000004e FsCache::sync()
0000f05c g     F .text.itcm	00000020 memcmp
20000524  w    O .data	00000028 vtable for usb_serial_class
0000a70a g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
000049e6 g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
0000a752 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20020cec g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000eebc g     F .text.itcm	00000058 sscanf
00012054 g     F .text.itcm	000000b0 __swsetup_r
0000d194  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006c64 g     F .text.itcm	00000056 ExFatFile::rmdir()
000048a4 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d74  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002944 g     F .text.itcm	000000e4 headerInit(long, long, long, int)
000092b2 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010f60 g     F .text.itcm	00000046 __copybits
00004c48 g     F .text.itcm	00000016 MTPD::read16()
00000cbe g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
00003a5c g     F .text.itcm	00000040 rtcSetup(unsigned char, unsigned char)
0000ef14 g     F .text.itcm	00000022 __sread
0000af08 g     F .text.itcm	00000094 usb_serial_flush_output
0000c048 g     F .text.itcm	0000001c eeprom_read_block
0000d2e4 g     F .text.itcm	0000000c __malloc_lock
00005d70 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20020cb8 g     O .bss	0000000c rtc
20002400 g     O .data	000002c0 _VectorsRam
0000a712 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
0000917c g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011aa4 g     F .text.itcm	00000050 _fflush_r
00011c18 g     F .text.itcm	0000002c _calloc_r
00004bb0 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002a9c g     F .text.itcm	000000c0 makeHeader(long*)
00000f5c  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
000088b0 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
20002378 g     O .data	00000004 t_acq
20021612 g     O .bss	00000001 yield_active_check_flags
00006d98 g     F .text.itcm	00000042 ExFatFile::sync()
0000f258 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
20021610 g     O .bss	00000001 usb_high_speed
00007d88 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009cb8 g     F .text.itcm	00000040 SdioCard::isBusy()
00004348 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a758 g     F .text.itcm	00000000 memset
0000cb72 g     F .text.itcm	00000010 main
0000e024 g     F .text.itcm	00000006 fcvt
00006694 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20201800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00009558 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
000070f0 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
20000448 g     O .data	00000060 vtable for MTPStorage_SD
00004cd8 g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000f0b0 g     F .text.itcm	00000046 strlcat
00007b74 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000ef96 g     F .text.itcm	00000008 __sclose
0000c8b8 g     F .text.itcm	00000054 usb_init_serialnumber
0000e004 g     F .text.itcm	00000004 _strtol_r
600024d4 g       .text.code	00000000 __init_array_end
0000f450 g     F .text.itcm	00000ad8 _dtoa_r
0000d1f8 g     F .text.itcm	000000ec _malloc_r
00008f12 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010ff8 g     F .text.itcm	0000001a __ascii_wctomb
00012528 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20020838 g     O .bss	00000004 FatVolume::m_cwv
0000cafc  w    F .text.itcm	00000008 Print::print(char const*)
00011b66 g     F .text.itcm	00000074 __submore
20000604  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000cbb0 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
000054c8 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
6666f340 g       *ABS*	00000000 __rtc_localtime
0000bc98 g     F .text.itcm	0000004c micros
000043c4 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006cbc g     F .text.itcm	000000dc ExFatFile::syncDir()
00005a08 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
6000264c g     O .text.progmem	00000004 string0
0000ad18 g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000b3ec g     F .text.itcm	00000034 usb_start_sof_interrupts
00000e26  w    F .text.itcm	00000050 FsBaseFile::available() const
000095a2 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
00003daa g     F .text.itcm	00000070 RV3028::set12Hour()
0000cb58  w    F .text.itcm	00000004 usb_serial_class::available()
0000eebc g     F .text.itcm	00000058 siscanf
00004c72 g     F .text.itcm	00000030 MTPD::readstring(char*)
00007a38 g     F .text.itcm	00000080 FatFile::sync()
000040ee g     F .text.itcm	00000094 RV3028::readConfigEEPROM_RAMmirror(unsigned char)
20000000 g     O .data	00000300 endpoint_queue_head
00006b1e  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002614  w    O .text.progmem	00000020 usb_string_product_name
000042a8 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000bce4 g     F .text.itcm	0000002a delay
000125b8 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200213d2 g     O .bss	00000002 dma_channel_allocated_mask
00000ebe g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00005eee g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ef8  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00012630 g     F .fini	00000000 _fini
00003534 g     F .text.itcm	00000014 acqPower(int)
000028ec  w    F .text.itcm	00000014 FsBaseFile::sync()
000055a8 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
000090dc g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
2002138c g     O .bss	00000004 t_off
00006668 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000ee7c g     F .text.itcm	00000040 sprintf
0000cca0 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000e0d6 g     F .text.itcm	0000007c __exponent
0000cc56 g     F .text.itcm	00000012 Print::print(long)
00007ab8 g     F .text.itcm	00000010 FatFile::close()
0000c3d0 g     F .text.itcm	00000004 Panic_Temp_isr
00012584 g     F .text.itcm	00000030 .hidden __fixdfdi
000009c8 g     F .text.itcm	00000160 setAudioFrequency(int)
00002758 g     F .text.itcm	0000000c queue_isBusy()
20002364 g     O .data	00000004 sd
00007bea g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00009810  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000f1e0 g     F .text.itcm	00000024 _write_r
00009cf8 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
20002384 g     O .data	00000002 again
00000258 g     F .text.itcm	00000024 lowPowerInit()
00003188 g     F .text.itcm	000000b4 filing_init()
0000c730 g     F .text.itcm	00000094 usb_mtp_recv
0000f330 g     F .text.itcm	0000000c nanf
0000e58c g     F .text.itcm	000000da _printf_common
200211c0 g     O .bss	00000004 setup_ready
20002358 g     O .data	00000004 _impure_ptr
0000613a g     F .text.itcm	0000002a ExFatFile::peek()
00011998 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c90c  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001dc8 g     O .data	00000140 Wire
00008ecc g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000edd8 g     F .text.itcm	0000003c _fwalk_sglue
000097b0 g     F .text.itcm	0000000c SdioCard::errorCode() const
00007b66 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002818 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
0001115c g     F .text.itcm	000001fc _svfiprintf_r
00002c38 g     F .text.itcm	00000094 newFileName(char*)
00003bc8 g     F .text.itcm	00000002 RV3028::RV3028()
00000f44  w    F .text.itcm	00000018 FsFile::~FsFile()
000067dc g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
0000908e g     F .text.itcm	00000026 SharedSpiCard::spiStart()
000018bc g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0001066e g     F .text.itcm	00000024 __ascii_mbtowc
00010d6c g     F .text.itcm	0000004c __ulp
0000b420 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000cb0c  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00005590  w    F .text.itcm	00000016 TwoWire::peek()
000055a6  w    F .text.itcm	00000002 TwoWire::flush()
00000788 g     F .text.itcm	0000017c setup
200009b8 g     O .data	00000078 usb_descriptor_list
00009a3c g     F .text.itcm	00000004 SdioCard::status()
000010b4 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00004310 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00007bca g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000eac  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003548 g     F .text.itcm	00000008 adcReset()
00000e8a  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000f320 g     F .text.itcm	00000010 nan
00007604 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004acc g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
0001140c g     F .text.itcm	000002f0 __ssvfiscanf_r
000075ca g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20020800 g     O .bss	00000004 ExFatVolume::m_cwv
00012104 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00008ef4 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000cacc g     F .text.itcm	00000030 DMAChannel::release()
00003f28 g     F .text.itcm	00000044 RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)
00002240 g     F .text.itcm	00000124 loadParameters()
0000aebc g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003514 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20002300 g     O .data	0000000c __sglue
0000aa6c g     F .text.itcm	00000100 usb_serial_configure
000055ce g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000cc84  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
000068b6 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
200215ed g     O .bss	00000001 external_psram_size
000045b0 g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
00009810  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005ce0 g     F .text.itcm	00000048 FsName::get16()
00008f9c  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
0000937c g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00008f22 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005e20 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
0000753c g     F .text.itcm	00000070 FatFile::addDirCluster()
0000cb60  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000059e4 g     F .text.itcm	0000000c lpi2c1_isr()
000080ea g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c4c g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000ba08 g     F .text.itcm	00000046 ultoa
00004c32 g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200213d0 g     O .bss	00000002 dgain
00008d22 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
0000118c g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000ef3a g     F .text.itcm	00000038 __swrite
0000c9d4 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002650 g     F .text.itcm	000000e4 menu(short)
0000cb50  w    F .text.itcm	00000004 usb_serial_class::peek()
0000e02a g     F .text.itcm	00000008 fcvtf
00009632  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000090b4 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003ac0 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
000011ca g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00011d2c g     F .text.itcm	00000024 fiprintf
00011da4 g     F .text.itcm	00000234 _vfiprintf_r
00003ae4 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000a578  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002700 g     O .bss	00002440 mtpd
00010c58 g     F .text.itcm	00000114 __mdiff
000027c4 g     F .text.itcm	00000054 pullData(unsigned long*)
00009800 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000014ee g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
00006876 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00004024 g     F .text.itcm	00000016 RV3028::setUNIX(unsigned long)
000073c0 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002b5c g     F .text.itcm	0000005c checkEndOfFile(short)
2000230c g     O .data	0000004c _impure_data
00006244 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002a3c g     F .text.itcm	00000060 writeHeader(char*)
00001fb4 g     F .text.itcm	00000198 menu3()
0000ed9c g     F .text.itcm	0000000c __sfp_lock_release
20020c30 g     O .bss	00000004 mtp_txEventCount
0000cb14  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00002900 g     F .text.itcm	00000044 timeStamp()
00009ec0 g     F .text.itcm	00000074 SdioCard::writeStop()
0000ee7c g     F .text.itcm	00000040 siprintf
00011af4 g     F .text.itcm	00000072 __sccl
00009174 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005eba g     F .text.itcm	00000014 ExFatFile::close()
200012c2 g     O .data	00000101 _ctype_
0000bebc  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000d194  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00001050 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
00004c5e g     F .text.itcm	00000014 MTPD::read32()
20001db0 g     O .data	00000004 F_BUS_ACTUAL
0000c54a g     F .text.itcm	00000036 quadtimer_init
20020b98 g     O .bss	00000004 disk_count
00003894 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
0000853c g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00003990 g     F .text.itcm	000000cc date2time(datetime_t*)
0000cb84 g     F .text.itcm	0000002c Stream::timedRead()
00012150 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000ca30 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008f9e  w    F .text.itcm	00000006 SharedSpiCard::end()
0000f310 g     F .text.itcm	00000010 strlen
0000e668 g     F .text.itcm	00000244 _printf_i
000075d6 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
000077ee g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
00010090 g     F .text.itcm	0000045c __gethex
60002614 g     O .text.progmem	00000020 usb_string_product_name_default
20020858 g     O .bss	00000004 __malloc_sbrk_start
000036fc g     F .text.itcm	0000003c setAGain(signed char)
0000efe8 g     F .text.itcm	00000014 vdprintf
00003e96 g     F .text.itcm	00000054 RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)
00009c58 g     F .text.itcm	00000060 SdioCard::sectorCount()
0000799c g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
00003f12 g     F .text.itcm	00000016 RV3028::getUNIX()
6000193e  w    F .text.code	00000002 startup_middle_hook
20000594 g     O .data	00000070 vtable for SdioCard
000124d4 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000012d2 g     F .text.itcm	00000082 MTPStorage_SD::close()
000074ac g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
00000e76  w    F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)
0000c2f8 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
0000962a  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000013b4 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20020854 g     O .bss	00000004 __malloc_free_list
000092a2  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002bcc g     F .text.itcm	0000006c newDirectory(char*)
0000a3d4 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
00002364 g     F .text.itcm	000002ec menu2()
0000a67c g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
0000323c g     F .text.itcm	00000290 compress(void*)
000072fc  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000cba g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00012214 g     F .text.itcm	0000027a .hidden __subdf3
00011da4 g     F .text.itcm	00000234 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000b9c4 g     F .text.itcm	0000001c usb_receive
0000673c g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
000012bc g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20021390 g     O .bss	00000004 t_rep
000108b8 g     F .text.itcm	0000005a __lo0bits
00006850 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
20002380 g     O .data	00000004 tempDatai
000078da g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018400 g       *ABS*	00000000 _flashimagelen
00009310 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000ce90 g     F .text.itcm	0000000a __aeabi_atexit
00000f44  w    F .text.itcm	00000018 FsFile::~FsFile()
0000bee0 g     F .text.itcm	00000024 rtc_get
00006bd8 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000ca0c g     F .text.itcm	00000004 pendablesrvreq_isr
00003b64 g     F .text.itcm	00000028 rtcSync()
00004db8 g     F .text.itcm	000000f4 MTPD::SendObject()
200213d4 g     O .bss	00000002 monitor
00001e98 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20002194 g     O .data	0000016c __global_locale
0000a0b4 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00005ece g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000ab6c g     F .text.itcm	000000d4 usb_serial_read
200215e3 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000ccba g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b934 g     F .text.itcm	00000040 usb_config_tx
0000bec0  w    F .text.itcm	00000006 _close
00008126 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000d1a8 g     F .text.itcm	00000010 free
0000e8ac  w    F .text.itcm	00000408 _scanf_float
00005d28 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000110e g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
00010758 g     F .text.itcm	0000008c __multadd
00010714 g     F .text.itcm	00000044 _Bfree
0000733e g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20002386  w    O .data	00000016 usb_string_serial_number
0000a440 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
000097e4 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x20021640

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002428 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002460 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002450 <____libc_init_array_veneer>
	main();
600015ca:	bl	600024b8 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00012638
600015dc:	.word	0x6000272c
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x60014d68
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000bd11
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000ca0d
6000160c:	.word	0x0000ca11
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x2002137c
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20021380
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000614
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000614

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000614
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000614

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002458 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	60002490 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002478 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002440 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000b44d
60001894:	.word	0x20002400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20021640
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002468 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002440 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70480000
60001cc0:	.word	0x200215ed
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20020ba8

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x20020ce0
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x20020cdc
60001e34:	.word	0x401f4400
60001e38:	.word	0x20020ce4
60001e3c:	.word	0x20020ce8
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20002400
60001e50:	.word	0x0000c3d1

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	600024a0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	600024a8 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	600024a8 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	600024a8 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	60002448 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002480 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	60002430 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002480 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	60002430 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	60002498 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	60002430 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	60002498 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	60002430 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	60002498 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	60002430 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	60002448 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	60002430 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002480 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	60002430 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002480 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	600024b0 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	60002430 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	60002438 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	60002430 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x2000155f
600021ec:	.word	0x2000156c
600021f0:	.word	0x20001a95
600021f4:	.word	0x20001593
600021f8:	.word	0x200015b8
600021fc:	.word	0x200015c1
60002200:	.word	0x20001687
60002204:	.word	0x200016a9
60002208:	.word	0x200016c8
6000220c:	.word	0x20001707
60002210:	.word	0x20001767
60002214:	.word	0x200018a0
60002218:	.word	0x200018c2
6000221c:	.word	0x2000199e
60002220:	.word	0x200019a7
60002224:	.word	0x200019ea
60002228:	.word	0x20001a0d
6000222c:	.word	0x20001a13
60002230:	.word	0x20001db4
60002234:	.word	0x000f4240
60002238:	.word	0x20001a31
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20001b8e
60002248:	.word	0x20001bd7
6000224c:	.word	0x20001c18
60002250:	.word	0x20001c40
60002254:	.word	0x20001c6b
60002258:	.word	0x20001c92
6000225c:	.word	0x20001cbc
60002260:	.word	0x20001cde
60002264:	.word	0x20001d00
60002268:	.word	0x20001d2a
6000226c:	.word	0x20001d4c
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x200015ea
6000227c:	.word	0x2000160c
60002280:	.word	0x20001636
60002284:	.word	0x2000165c
60002288:	.word	0x20021640
6000228c:	.word	0x20001725
60002290:	.word	0x20001788
60002294:	.word	0x200017b5
60002298:	.word	0x200017fa
6000229c:	.word	0x2000183a
600022a0:	.word	0x2000186e
600022a4:	.word	0x200018e6
600022a8:	.word	0x20001919
600022ac:	.word	0x20001942
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	600024a0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	60002430 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	60002488 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	60002430 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	60002438 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	60002430 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	60002498 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x20001959
60002388:	.word	0x20001982
6000238c:	.word	0x200019ce
60002390:	.word	0x20001a36
60002394:	.word	0x20001a4e
60002398:	.word	0x20001a97
6000239c:	.word	0x20001ae1
600023a0:	.word	0x20001b06
600023a4:	.word	0x20001b4e
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20001d9e
600023b4:	.word	0x20001b4c
600023b8:	.word	0x20001d8f
600023bc:	.word	0x20001a07

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x200215e4

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <__set_arm_clock_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <__set_arm_clock_veneer+0x4>
6000242c:	.word	0x0000af9d

60002430 <___ZN5Print5printEPKc_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print5printEPKc_veneer+0x4>
60002434:	.word	0x0000cafd

60002438 <___ZN5Print11printNumberEmhh_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <___ZN5Print11printNumberEmhh_veneer+0x4>
6000243c:	.word	0x0000ccbb

60002440 <__memset_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__memset_veneer+0x4>
60002444:	.word	0x0000a759

60002448 <___ZN5Print7printlnEv_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <___ZN5Print7printlnEv_veneer+0x4>
6000244c:	.word	0x0000cc69

60002450 <____libc_init_array_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <____libc_init_array_veneer+0x4>
60002454:	.word	0x0000f211

60002458 <___ZN7TwoWire8setClockEm_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <___ZN7TwoWire8setClockEm_veneer+0x4>
6000245c:	.word	0x00005a09

60002460 <__pwm_init_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <__pwm_init_veneer+0x4>
60002464:	.word	0x0000c581

60002468 <__sm_set_pool_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <__sm_set_pool_veneer+0x4>
6000246c:	.word	0x0000c367

60002470 <___ZN5Print7printlnEPKc_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print7printlnEPKc_veneer+0x4>
60002474:	.word	0x00000d61

60002478 <__delay_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <__delay_veneer+0x4>
6000247c:	.word	0x0000bce5

60002480 <___ZN5Print7printlnEmi_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN5Print7printlnEmi_veneer+0x4>
60002484:	.word	0x0000cb15

60002488 <___ZN5Print5printEl_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <___ZN5Print5printEl_veneer+0x4>
6000248c:	.word	0x0000cc57

60002490 <__usb_init_serialnumber_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <__usb_init_serialnumber_veneer+0x4>
60002494:	.word	0x0000c8b9

60002498 <___ZN5Print5printEmi_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN5Print5printEmi_veneer+0x4>
6000249c:	.word	0x0000cb0d

600024a0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
600024a4:	.word	0x0000cb29

600024a8 <___ZN5Print5printEh_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <___ZN5Print5printEh_veneer+0x4>
600024ac:	.word	0x0000cb05

600024b0 <___ZN5Print10printFloatEdh_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <___ZN5Print10printFloatEdh_veneer+0x4>
600024b4:	.word	0x0000cd61

600024b8 <__main_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <__main_veneer+0x4>
600024bc:	.word	0x0000cb73

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......u...Y1..
600024d0:	.;..

Disassembly of section .text.progmem:

600024d4 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d4:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d8:	ldr	r3, [pc, #60]	; (60002518 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024da:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024de:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024e2:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e6:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e8:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024ec:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024f0:	ldr	r2, [r3, #112]	; 0x70
600024f2:	bic.w	r2, r2, #4096	; 0x1000
600024f6:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f8:	ldr	r2, [r3, #112]	; 0x70
600024fa:	cmp	r2, #0
600024fc:	bge.n	600024f8 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fe:	ldr.w	r2, [r3, #368]	; 0x170
60002502:	bic.w	r2, r2, #8388608	; 0x800000
60002506:	bic.w	r2, r2, #32768	; 0x8000
6000250a:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250e:	ldr	r2, [r3, #112]	; 0x70
60002510:	bic.w	r2, r2, #65536	; 0x10000
60002514:	str	r2, [r3, #112]	; 0x70
  }
60002516:	bx	lr
60002518:	.word	0x400d8000

6000251c <TwoWire::i2c4_hardware>:
6000251c:	...@............
6000252c:	...@............
	...
60002544:	...........@....
60002554:	................
60002564:	.....Y..

6000256c <TwoWire::i2c3_hardware>:
6000256c:	p..@............
6000257c:	...@....,.......
6000258c:	...@............
6000259c:	...@....-.......
600025ac:	...@.........Y..

600025bc <TwoWire::i2c1_hardware>:
600025bc:	p..@............
600025cc:	...@............
	...
600025e4:	...........@....
600025f4:	................
60002604:	.....Y..

6000260c <usb_string_mtp>:
6000260c:	..M.T.P.

60002614 <usb_string_product_name_default>:
60002614:	 .T.e.e.n.s.y. .
60002624:	M.T.P. .D.i.s.k.

60002634 <usb_string_manufacturer_name_default>:
60002634:	..T.e.e.n.s.y.d.
60002644:	u.i.n.o.

6000264c <string0>:
6000264c:	....

60002650 <usb_config_descriptor_12>:
60002650:	..i.....2.......
60002660:	...........$....
60002670:	$....$...$......
60002680:	................
60002690:	.@......@.......
600026a0:	........@......@
600026b0:	...... ..

600026b9 <usb_config_descriptor_480>:
600026b9:	..i.....2.......
600026c9:	...........$....
600026d9:	$....$...$......
600026e9:	................
600026f9:	................
60002709:	................
60002719:	...... ..

60002722 <qualifier_descriptor>:
60002722:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200026c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200026c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20020c38
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60018400

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	7a38 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6d98 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	7604 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	5fb4 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	778a <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	613a <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c960 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x2002160f
     154:	.word	0x2002160e
     158:	.word	0x20021380
     15c:	.word	0x200213a0

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	f310 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	cc68 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	8c98 <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	8c98 <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	8c98 <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000450
     1dc:	.word	0x2000042c

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	7f18 <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	70f0 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	bce4 <delay>
    usb_init();
     22a:	bl	12600 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4ee0 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20002700

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     258:	ldr	r3, [pc, #28]	; (278 <lowPowerInit()+0x20>)
     25a:	ldr	r2, [r3, #100]	; 0x64
     25c:	orr.w	r2, r2, #131072	; 0x20000
     260:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     262:	ldr	r2, [r3, #84]	; 0x54
     264:	bic.w	r2, r2, #35	; 0x23
     268:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     26a:	ldr	r2, [r3, #84]	; 0x54
     26c:	orr.w	r2, r2, #1
     270:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     272:	dsb	sy
  }
     276:	bx	lr
     278:	.word	0x400fc000

0000027c <loop>:
{
     27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     280:	ldr	r6, [pc, #432]	; (434 <loop+0x1b8>)
{
     282:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     284:	ldr	r5, [pc, #432]	; (438 <loop+0x1bc>)
  loopCount++;
     286:	ldr	r3, [r6, #0]
     288:	ldr	r4, [pc, #432]	; (43c <loop+0x1c0>)
     28a:	adds	r3, #1
     28c:	str	r3, [r6, #0]
  nb = getDataCount();
     28e:	bl	273c <getDataCount()>
  if(nb>mxb) mxb=nb;
     292:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r2, [pc, #424]	; (440 <loop+0x1c4>)
  if(nb>mxb) mxb=nb;
     296:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     298:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     29a:	it	cc
     29c:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29e:	tst.w	r3, #1
     2a2:	bne.n	2b8 <loop+0x3c>
     2a4:	ldr	r3, [pc, #412]	; (444 <loop+0x1c8>)
     2a6:	ldr	r3, [r3, #0]
     2a8:	cmp	r3, #1
     2aa:	mov.w	r3, #4294967295
     2ae:	it	ne
     2b0:	movne	r3, #0
     2b2:	strh	r3, [r4, #0]
     2b4:	movs	r3, #1
     2b6:	str	r3, [r2, #0]
  status=menu(status);
     2b8:	ldrh	r0, [r4, #0]
     2ba:	sxth	r0, r0
     2bc:	bl	2650 <menu(short)>
     2c0:	strh	r0, [r4, #0]
    if(status<0)
     2c2:	ldrh	r3, [r4, #0]
     2c4:	lsls	r3, r3, #16
     2c6:	bpl.n	2ce <loop+0x52>
    { mtpd.loop();
     2c8:	ldr	r0, [pc, #380]	; (448 <loop+0x1cc>)
     2ca:	bl	4ee0 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ce:	ldrh	r3, [r4, #0]
     2d0:	sxth	r3, r3
     2d2:	cmp	r3, #0
     2d4:	ble.n	2de <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d6:	ldr	r3, [pc, #372]	; (44c <loop+0x1d0>)
     2d8:	movs	r2, #8
     2da:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2de:	ldrh	r0, [r4, #0]
     2e0:	sxth	r0, r0
     2e2:	bl	3078 <saveData(short)>
     2e6:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e8:	ldrh	r3, [r4, #0]
     2ea:	sxth	r3, r3
     2ec:	cmp	r3, #0
     2ee:	ble.n	2f8 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2f0:	ldr	r3, [pc, #344]	; (44c <loop+0x1d0>)
     2f2:	movs	r2, #8
     2f4:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f8:	ldr	r3, [pc, #340]	; (450 <loop+0x1d4>)
  if((t1=millis())>(t0+1000))
     2fa:	ldr	r7, [pc, #344]	; (454 <loop+0x1d8>)
     2fc:	ldr	r3, [r3, #0]
     2fe:	str	r3, [sp, #28]
     300:	ldr	r3, [r7, #0]
     302:	ldr	r2, [sp, #28]
     304:	add.w	r3, r3, #1000	; 0x3e8
     308:	cmp	r3, r2
     30a:	bcs.n	3f0 <loop+0x174>
    if(monitor)
     30c:	ldr	r3, [pc, #328]	; (458 <loop+0x1dc>)
     30e:	ldr.w	sl, [pc, #388]	; 494 <loop+0x218>
     312:	ldrsh.w	r3, [r3]
     316:	ldr.w	r9, [pc, #384]	; 498 <loop+0x21c>
     31a:	ldr.w	r8, [pc, #384]	; 49c <loop+0x220>
     31e:	cmp	r3, #0
     320:	beq.n	3da <loop+0x15e>
      rtc_get_datetime(&t);
     322:	add	r0, sp, #32
     324:	bl	3a9c <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     328:	ldrsb.w	r3, [sp, #36]	; 0x24
     32c:	ldrsh.w	r2, [sp, #32]
     330:	str	r3, [sp, #16]
     332:	ldrsb.w	r3, [sp, #39]	; 0x27
     336:	ldr	r1, [pc, #292]	; (45c <loop+0x1e0>)
     338:	str	r3, [sp, #12]
     33a:	ldrsb.w	r3, [sp, #38]	; 0x26
     33e:	ldr	r0, [pc, #288]	; (460 <loop+0x1e4>)
     340:	str	r3, [sp, #8]
     342:	ldrsb.w	r3, [sp, #37]	; 0x25
     346:	str	r3, [sp, #4]
     348:	ldrsb.w	r3, [sp, #35]	; 0x23
     34c:	str	r3, [sp, #0]
     34e:	ldrsb.w	r3, [sp, #34]	; 0x22
     352:	bl	cca0 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     356:	ldr	r1, [pc, #268]	; (464 <loop+0x1e8>)
     358:	ldr	r0, [pc, #260]	; (460 <loop+0x1e4>)
     35a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     35e:	ldr	r1, [r6, #0]
     360:	ldr	r0, [pc, #252]	; (460 <loop+0x1e4>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #256]	; (468 <loop+0x1ec>)
     368:	ldr	r0, [pc, #244]	; (460 <loop+0x1e4>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     36e:	ldr.w	r1, [sl]
     372:	ldr	r0, [pc, #236]	; (460 <loop+0x1e4>)
     374:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     378:	ldr	r1, [pc, #236]	; (468 <loop+0x1ec>)
     37a:	ldr	r0, [pc, #228]	; (460 <loop+0x1e4>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     380:	ldr.w	r1, [r9]
     384:	ldr	r0, [pc, #216]	; (460 <loop+0x1e4>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #220]	; (468 <loop+0x1ec>)
     38c:	ldr	r0, [pc, #208]	; (460 <loop+0x1e4>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     392:	ldrh	r2, [r5, #0]
     394:	ldr	r1, [pc, #212]	; (46c <loop+0x1f0>)
     396:	ldr	r0, [pc, #200]	; (460 <loop+0x1e4>)
     398:	bl	cca0 <Print::printf(char const*, ...)>
     39c:	ldr	r1, [pc, #208]	; (470 <loop+0x1f4>)
     39e:	ldr	r0, [pc, #192]	; (460 <loop+0x1e4>)
     3a0:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     3a4:	ldr.w	r1, [r8]
     3a8:	ldr	r0, [pc, #180]	; (460 <loop+0x1e4>)
     3aa:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3ae:	ldr	r1, [pc, #196]	; (474 <loop+0x1f8>)
     3b0:	ldr	r0, [pc, #172]	; (460 <loop+0x1e4>)
     3b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b6:	ldr	r3, [pc, #192]	; (478 <loop+0x1fc>)
     3b8:	ldrh	r4, [r3, #0]
     3ba:	sxth	r4, r4
     3bc:	cbnz	r4, 3f8 <loop+0x17c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3be:	ldr	r3, [pc, #188]	; (47c <loop+0x200>)
     3c0:	ldr	r1, [pc, #188]	; (480 <loop+0x204>)
     3c2:	ldr.w	fp, [pc, #156]	; 460 <loop+0x1e4>
     3c6:	ldr.w	r2, [r3, r4, lsl #2]
     3ca:	adds	r4, #1
     3cc:	mov	r0, fp
     3ce:	bl	cca0 <Print::printf(char const*, ...)>
     3d2:	cmp	r4, #8
     3d4:	ldr	r1, [pc, #168]	; (480 <loop+0x204>)
     3d6:	ldr	r3, [pc, #164]	; (47c <loop+0x200>)
     3d8:	bne.n	3c6 <loop+0x14a>
    loopCount=0;
     3da:	movs	r3, #0
     3dc:	str	r3, [r6, #0]
    procCount=0;
     3de:	str.w	r3, [sl]
    procMiss=0;
     3e2:	str.w	r3, [r9]
    mxb=0;
     3e6:	strh	r3, [r5, #0]
    disk_count=0;
     3e8:	str.w	r3, [r8]
    t0=t1;
     3ec:	ldr	r3, [sp, #28]
     3ee:	str	r3, [r7, #0]
  asm("wfi");
     3f0:	wfi
}
     3f2:	add	sp, #44	; 0x2c
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	ldr.w	fp, [pc, #148]	; 490 <loop+0x214>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3fc:	movs	r4, #0
     3fe:	ldr	r1, [pc, #132]	; (484 <loop+0x208>)
     400:	ldr	r3, [pc, #92]	; (460 <loop+0x1e4>)
     402:	adds	r4, #1
     404:	mov	r0, r3
     406:	ldr.w	r2, [fp], #4
     40a:	bl	cca0 <Print::printf(char const*, ...)>
     40e:	cmp	r4, #24
     410:	ldr	r3, [pc, #76]	; (460 <loop+0x1e4>)
     412:	ldr	r1, [pc, #112]	; (484 <loop+0x208>)
     414:	bne.n	402 <loop+0x186>
        Serial.printf("%2d",max_stat);
     416:	ldr	r4, [pc, #112]	; (488 <loop+0x20c>)
     418:	mov	r0, r3
     41a:	ldr	r1, [pc, #112]	; (48c <loop+0x210>)
     41c:	ldr	r2, [r4, #0]
     41e:	bl	cca0 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     422:	movs	r2, #96	; 0x60
     424:	movs	r1, #0
     426:	ldr	r0, [pc, #104]	; (490 <loop+0x214>)
     428:	bl	a758 <memset>
        max_stat=0;        
     42c:	movs	r3, #0
     42e:	str	r3, [r4, #0]
     430:	b.n	3da <loop+0x15e>
     432:	nop
     434:	.word	0x20020844
     438:	.word	0x200213cc
     43c:	.word	0x200213ce
     440:	.word	0x20007dcc
     444:	.word	0x20021394
     448:	.word	0x20002700
     44c:	.word	0x42004000
     450:	.word	0x20021380
     454:	.word	0x20020840
     458:	.word	0x200213d4
     45c:	.word	0x200014a9
     460:	.word	0x20001db8
     464:	.word	0x200014ca
     468:	.word	0x200014d3
     46c:	.word	0x200014ce
     470:	.word	0x200014d2
     474:	.word	0x200014d5
     478:	.word	0x200213d6
     47c:	.word	0x20020c0c
     480:	.word	0x200014da
     484:	.word	0x200014df
     488:	.word	0x20020c2c
     48c:	.word	0x200014e4
     490:	.word	0x20020c58
     494:	.word	0x20020c50
     498:	.word	0x20020c54
     49c:	.word	0x20020b98

000004a0 <setup1()>:
{ 
     4a0:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a2:	ldr	r4, [pc, #44]	; (4d0 <setup1()+0x30>)
  Serial.println("Setup1");
     4a4:	ldr	r1, [pc, #44]	; (4d4 <setup1()+0x34>)
     4a6:	ldr	r0, [pc, #48]	; (4d8 <setup1()+0x38>)
     4a8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4ac:	ldr	r3, [r4, #0]
     4ae:	cbz	r3, 4c8 <setup1()+0x28>
  i2s_setup();
     4b0:	bl	b28 <i2s_setup()>
  dma_setup();
     4b4:	bl	ba8 <dma_setup()>
  adc_init();
     4b8:	bl	3558 <adc_init()>
  Serial.println("Setup1 done");
     4bc:	ldr	r1, [pc, #28]	; (4dc <setup1()+0x3c>)
     4be:	ldr	r0, [pc, #24]	; (4d8 <setup1()+0x38>)
}
     4c0:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4c4:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4c8:	movs	r0, #1
     4ca:	bl	bce4 <delay>
     4ce:	b.n	4ac <setup1()+0xc>
     4d0:	.word	0x200211c0
     4d4:	.word	0x20001020
     4d8:	.word	0x20001db8
     4dc:	.word	0x20001027

000004e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4e0:	push	{r4, r5, r6, lr}
     4e2:	mov	r5, r0
     4e4:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e8:	cbnz	r0, 50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ea:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4ec:	ldr.w	r0, [r5, #1152]	; 0x480
     4f0:	cbz	r0, 544 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4f2:	bl	837c <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4f6:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4f8:	cbz	r6, 50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4fa:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4fe:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     500:	ldr	r3, [r0, #0]
     502:	movs	r1, #0
     504:	ldr	r3, [r3, #68]	; 0x44
     506:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     508:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     50a:	mov	r0, r4
     50c:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     50e:	ldr	r3, [r0, #0]
     510:	ldr	r3, [r3, #60]	; 0x3c
     512:	blx	r3
     514:	cmp	r0, #0
     516:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     518:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     51e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     522:	cbnz	r0, 534 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     524:	movs	r4, #0
     526:	b.n	50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r3, [r3, #64]	; 0x40
     52c:	blx	r3
     52e:	cmp	r0, #0
     530:	bne.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     532:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     534:	ldr	r3, [r0, #0]
     536:	movs	r1, #1
     538:	ldr	r3, [r3, #68]	; 0x44
     53a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     53c:	mov	r6, r0
     53e:	cmp	r0, #0
     540:	bne.n	4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     542:	b.n	524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     544:	ldr.w	r0, [r5, #1156]	; 0x484
     548:	cmp	r0, #0
     54a:	beq.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     54c:	bl	694a <ExFatPartition::freeClusterCount()>
     550:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000554 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     554:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     558:	ldr	r4, [pc, #276]	; (670 <storage_configure()+0x11c>)
     55a:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     55c:	movs	r1, #0
     55e:	ldr	r6, [pc, #276]	; (674 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     560:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     564:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     568:	strb.w	r1, [r4, #1224]	; 0x4c8
     56c:	mov	r0, r5
     56e:	bl	a0b4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     572:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     574:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     578:	bl	97b0 <SdioCard::errorCode() const>
     57c:	cmp	r0, #0
     57e:	bne.n	622 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     580:	movs	r3, #1
     582:	ldr.w	r1, [r4, #1164]	; 0x48c
     586:	mov	r0, r4
     588:	mov	r2, r3
     58a:	bl	8df8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     58e:	cmp	r0, #0
     590:	beq.n	622 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     592:	ldr	r3, [pc, #228]	; (678 <storage_configure()+0x124>)
     594:	ldr	r2, [r3, #4]
     596:	cmp	r2, #19
     598:	ble.n	63e <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     59a:	ldr.w	r3, [r4, #1152]	; 0x480
     59e:	cmp	r3, #0
     5a0:	beq.n	652 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5a2:	ldr	r5, [r3, #28]
     5a4:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5a6:	ldr	r0, [pc, #200]	; (670 <storage_configure()+0x11c>)
     5a8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ac:	ldr.w	r3, [r4, #1152]	; 0x480
     5b0:	mov	r7, r0
     5b2:	cmp	r3, #0
     5b4:	beq.n	660 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5b6:	ldrb	r3, [r3, #6]
     5b8:	mov.w	r4, #512	; 0x200
     5bc:	lsls	r4, r3
     5be:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5c0:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5c2:	mov.w	r8, #10
     5c6:	movs	r6, #0
     5c8:	movs	r2, #0
     5ca:	str	r3, [sp, #0]
     5cc:	movs	r3, #254	; 0xfe
     5ce:	ldr	r1, [pc, #172]	; (67c <storage_configure()+0x128>)
     5d0:	ldr	r0, [pc, #172]	; (680 <storage_configure()+0x12c>)
     5d2:	bl	cca0 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5d6:	ldr	r1, [pc, #172]	; (684 <storage_configure()+0x130>)
     5d8:	ldr	r0, [pc, #164]	; (680 <storage_configure()+0x12c>)
     5da:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5de:	mov	r2, r5
     5e0:	mov	r3, r6
     5e2:	ldr	r0, [pc, #156]	; (680 <storage_configure()+0x12c>)
     5e4:	strd	r8, r6, [sp]
     5e8:	bl	ccce <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5ec:	ldr	r1, [pc, #152]	; (688 <storage_configure()+0x134>)
     5ee:	ldr	r0, [pc, #144]	; (680 <storage_configure()+0x12c>)
     5f0:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5f4:	mov	r2, r7
     5f6:	mov	r3, r6
     5f8:	ldr	r0, [pc, #132]	; (680 <storage_configure()+0x12c>)
     5fa:	strd	r8, r6, [sp]
     5fe:	bl	ccce <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     602:	ldr	r1, [pc, #136]	; (68c <storage_configure()+0x138>)
     604:	ldr	r0, [pc, #120]	; (680 <storage_configure()+0x12c>)
     606:	bl	18c <Print::print(char const*) [clone .isra.0]>
     60a:	lsr.w	r1, r4, r8
     60e:	ldr	r0, [pc, #112]	; (680 <storage_configure()+0x12c>)
     610:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     614:	ldr	r1, [pc, #120]	; (690 <storage_configure()+0x13c>)
     616:	ldr	r0, [pc, #104]	; (680 <storage_configure()+0x12c>)
        }
      }
  }
     618:	add	sp, #8
     61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     61e:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     622:	ldr	r3, [r6, #0]
     624:	movs	r2, #0
     626:	ldr	r1, [pc, #108]	; (694 <storage_configure()+0x140>)
     628:	str	r3, [sp, #0]
     62a:	movs	r3, #254	; 0xfe
     62c:	ldr	r0, [pc, #80]	; (680 <storage_configure()+0x12c>)
     62e:	bl	cca0 <Print::printf(char const*, ...)>
     632:	ldr	r0, [pc, #76]	; (680 <storage_configure()+0x12c>)
  }
     634:	add	sp, #8
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     63a:	b.w	cc68 <Print::println()>
          sd_name[fsCount] = name;
     63e:	add.w	r1, r3, r2, lsl #2
     642:	ldr	r0, [r6, #0]
     644:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     646:	adds	r1, r2, #1
     648:	str	r1, [r3, #4]
     64a:	add.w	r3, r3, r2, lsl #2
     64e:	str	r4, [r3, #88]	; 0x58
     650:	b.n	59a <storage_configure()+0x46>
     652:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     656:	cmp	r5, #0
     658:	beq.n	5a6 <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     65a:	ldr.w	r5, [r5, #1072]	; 0x430
     65e:	b.n	5a6 <storage_configure()+0x52>
     660:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     664:	cmp	r4, #0
     666:	beq.n	5c0 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     668:	ldr.w	r4, [r4, #1084]	; 0x43c
     66c:	b.n	5c0 <storage_configure()+0x6c>
     66e:	nop
     670:	.word	0x20020cf0
     674:	.word	0x20002368
     678:	.word	0x200211c4
     67c:	.word	0x20000e24
     680:	.word	0x20001db8
     684:	.word	0x20000e3b
     688:	.word	0x20000e4e
     68c:	.word	0x20000e5f
     690:	.word	0x20000e6e
     694:	.word	0x20000df9

00000698 <_GLOBAL__sub_I_storage>:
  }
     698:	push	{r3, r4, r5, lr}
        fsCount = 0;
     69a:	ldr	r5, [pc, #192]	; (75c <_GLOBAL__sub_I_storage+0xc4>)
     69c:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69e:	ldr	r3, [pc, #192]	; (760 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6a0:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     6a4:	ldr	r1, [pc, #188]	; (764 <_GLOBAL__sub_I_storage+0xcc>)
     6a6:	mov	r0, r5
     6a8:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6aa:	ldr	r3, [pc, #188]	; (768 <_GLOBAL__sub_I_storage+0xd0>)
     6ac:	str.w	r2, [r5, #176]	; 0xb0
     6b0:	str.w	r3, [r5, #168]	; 0xa8
     6b4:	str.w	r3, [r5, #248]	; 0xf8
     6b8:	str.w	r3, [r5, #328]	; 0x148
     6bc:	mvn.w	r3, #1
        fsCount = 0;
     6c0:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6c2:	str.w	r4, [r5, #172]	; 0xac
     6c6:	strb.w	r4, [r5, #180]	; 0xb4
     6ca:	strb.w	r4, [r5, #260]	; 0x104
     6ce:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	str.w	r4, [r5, #416]	; 0x1a0
     6d6:	strh.w	r4, [r5, #428]	; 0x1ac
     6da:	strd	r4, r2, [r5, #252]	; 0xfc
     6de:	strd	r4, r2, [r5, #332]	; 0x14c
     6e2:	ldr	r2, [pc, #136]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     6e4:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6e8:	strd	r4, r4, [r5, #240]	; 0xf0
     6ec:	strd	r4, r4, [r5, #320]	; 0x140
     6f0:	strd	r4, r4, [r5, #400]	; 0x190
     6f4:	strd	r4, r4, [r5, #408]	; 0x198
     6f8:	bl	ce90 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6fc:	ldr	r3, [pc, #112]	; (770 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6fe:	ldr	r1, [pc, #116]	; (774 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     700:	mov	r0, r4
     702:	str	r5, [r3, #0]
     704:	add.w	r3, r3, #8192	; 0x2000
     708:	ldr	r2, [pc, #96]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     70a:	str.w	r4, [r3, #1056]	; 0x420
     70e:	strb.w	r4, [r3, #1060]	; 0x424
     712:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     716:	ldr	r3, [pc, #96]	; (778 <_GLOBAL__sub_I_storage+0xe0>)
     718:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     71c:	ldr	r1, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0xe4>)
     71e:	str.w	r4, [r3, #1152]	; 0x480
     722:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     726:	movs	r1, #7
     728:	str.w	r4, [r3, #1156]	; 0x484
     72c:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     730:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     732:	str.w	r4, [r3, #1164]	; 0x48c
     736:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	ldr	r1, [pc, #68]	; (780 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     73c:	strh.w	r4, [r3, #1176]	; 0x498
     740:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     744:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     748:	strb.w	r4, [r3, #1208]	; 0x4b8
     74c:	strb.w	r4, [r3, #1224]	; 0x4c8
     750:	ldr	r1, [pc, #48]	; (784 <_GLOBAL__sub_I_storage+0xec>)
  }
     752:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     756:	b.w	ce90 <__aeabi_atexit>
     75a:	nop
     75c:	.word	0x200211c4
     760:	.word	0x20000450
     764:	.word	0x000001a5
     768:	.word	0x20000554
     76c:	.word	0x20002190
     770:	.word	0x20002700
     774:	.word	0x2000059c
     778:	.word	0x20020cf0
     77c:	.word	0x003d0900
     780:	.word	0x200004bc
     784:	.word	0x0000006d

00000788 <setup>:
{
     788:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     78a:	ldr	r5, [pc, #308]	; (8c0 <setup+0x138>)
     78c:	sub	sp, #28
    set_arm_clock(24'000'000);
     78e:	ldr	r0, [pc, #308]	; (8c4 <setup+0x13c>)
				if (elapsed > 750) break;
     790:	movw	r7, #750	; 0x2ee
     794:	bl	af9c <set_arm_clock>
			if (usb_configuration) {
     798:	ldr	r6, [pc, #300]	; (8c8 <setup+0x140>)
		uint32_t millis_begin = systick_millis_count;
     79a:	ldr	r4, [r5, #0]
		while (!(*this)) {
     79c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7a0:	cbz	r0, 7c8 <setup+0x40>
  uint16_t *params=loadParameters();
     7a2:	bl	2240 <loadParameters()>
  if(params[0]==1)
     7a6:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7a8:	mov	r4, r0
  if(params[0]==1)
     7aa:	cmp	r3, #1
     7ac:	beq.n	7e0 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7ae:	movw	r6, #9999	; 0x270f
     7b2:	ldr	r3, [r5, #0]
     7b4:	cmp	r3, r6
     7b6:	bhi.n	7f4 <setup+0x6c>
     7b8:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7bc:	cmp	r0, #0
     7be:	beq.n	7b2 <setup+0x2a>
     7c0:	ldr	r3, [pc, #264]	; (8cc <setup+0x144>)
     7c2:	movs	r2, #1
     7c4:	str	r2, [r3, #0]
     7c6:	b.n	7f4 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7c8:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7ca:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7cc:	subs	r3, r3, r4
			if (usb_configuration) {
     7ce:	cbz	r2, 7dc <setup+0x54>
				if (elapsed > 2000) break;
     7d0:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7d4:	bhi.n	7a2 <setup+0x1a>
			yield();
     7d6:	bl	c960 <yield>
     7da:	b.n	79c <setup+0x14>
				if (elapsed > 750) break;
     7dc:	cmp	r3, r7
     7de:	b.n	7d4 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7e0:	ldr	r3, [pc, #236]	; (8d0 <setup+0x148>)
     7e2:	ldr	r2, [pc, #240]	; (8d4 <setup+0x14c>)
     7e4:	ldr	r3, [r3, #0]
     7e6:	ldr	r2, [r2, #0]
     7e8:	cmp	r3, r2
     7ea:	ldr	r2, [pc, #224]	; (8cc <setup+0x144>)
     7ec:	ite	hi
     7ee:	movhi	r3, #0
     7f0:	movls	r3, #1
     7f2:	str	r3, [r2, #0]
  Serial.println(version);
     7f4:	ldr	r1, [pc, #224]	; (8d8 <setup+0x150>)
     7f6:	ldr	r0, [pc, #228]	; (8dc <setup+0x154>)
     7f8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7fc:	ldr	r1, [pc, #224]	; (8e0 <setup+0x158>)
     7fe:	ldr	r0, [pc, #220]	; (8dc <setup+0x154>)
     800:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     804:	ldrh	r1, [r4, #0]
     806:	ldr	r0, [pc, #212]	; (8dc <setup+0x154>)
     808:	bl	cc56 <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     80c:	ldr	r0, [pc, #204]	; (8dc <setup+0x154>)
     80e:	bl	cc68 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     812:	ldr	r0, [pc, #208]	; (8e4 <setup+0x15c>)
     814:	bl	12620 <___ZN16CrashReportClasscvbEv_veneer>
     818:	cbz	r0, 822 <setup+0x9a>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     81a:	ldr	r1, [pc, #192]	; (8dc <setup+0x154>)
     81c:	ldr	r0, [pc, #196]	; (8e4 <setup+0x15c>)
     81e:	bl	12608 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     822:	bl	3514 <usbPowerSetup()>
    lowPowerInit();
     826:	bl	258 <lowPowerInit()>
    storage_configure();
     82a:	bl	554 <storage_configure()>
  Serial.println("rtcSetup");
     82e:	ldr	r1, [pc, #184]	; (8e8 <setup+0x160>)
     830:	ldr	r0, [pc, #168]	; (8dc <setup+0x154>)
     832:	bl	190 <Print::println(char const*) [clone .isra.0]>
  rtcSetup();
     836:	movs	r1, #19
     838:	movs	r0, #18
     83a:	bl	3a5c <rtcSetup(unsigned char, unsigned char)>
    rtcSync();
     83e:	bl	3b64 <rtcSync()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     842:	add	r0, sp, #16
     844:	bl	3a9c <rtc_get_datetime(datetime_t*)>
     848:	cbnz	r0, 852 <setup+0xca>
     84a:	ldr	r1, [pc, #160]	; (8ec <setup+0x164>)
     84c:	ldr	r0, [pc, #140]	; (8dc <setup+0x154>)
     84e:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     852:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     856:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     858:	ldrsh.w	r2, [sp, #16]
     85c:	str	r3, [sp, #12]
     85e:	ldrsb.w	r3, [sp, #22]
     862:	ldr	r1, [pc, #140]	; (8f0 <setup+0x168>)
     864:	str	r3, [sp, #8]
     866:	ldrsb.w	r3, [sp, #21]
     86a:	ldr	r0, [pc, #112]	; (8dc <setup+0x154>)
     86c:	str	r3, [sp, #4]
     86e:	ldrsb.w	r3, [sp, #19]
     872:	str	r3, [sp, #0]
     874:	ldrsb.w	r3, [sp, #18]
     878:	bl	cca0 <Print::printf(char const*, ...)>
  Serial.println();
     87c:	ldr	r0, [pc, #92]	; (8dc <setup+0x154>)
     87e:	bl	cc68 <Print::println()>
    Serial.print("RV3028: ");
     882:	ldr	r1, [pc, #112]	; (8f4 <setup+0x16c>)
     884:	ldr	r0, [pc, #84]	; (8dc <setup+0x154>)
     886:	bl	18c <Print::print(char const*) [clone .isra.0]>
    Serial.println(rtcGetTimestamp());
     88a:	bl	3b8c <rtcGetTimestamp()>
     88e:	mov	r1, r0
     890:	ldr	r0, [pc, #72]	; (8dc <setup+0x154>)
     892:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.println("filing_init");
     896:	ldr	r1, [pc, #96]	; (8f8 <setup+0x170>)
     898:	ldr	r0, [pc, #64]	; (8dc <setup+0x154>)
     89a:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     89e:	bl	3188 <filing_init()>
  setup_ready=1;
     8a2:	ldr	r3, [pc, #88]	; (8fc <setup+0x174>)
  Serial.println("Setup done");
     8a4:	ldr	r1, [pc, #88]	; (900 <setup+0x178>)
     8a6:	ldr	r0, [pc, #52]	; (8dc <setup+0x154>)
  setup_ready=1;
     8a8:	str	r4, [r3, #0]
  Serial.println("Setup done");
     8aa:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     8ae:	bl	4a0 <setup1()>
    pinMode(13,OUTPUT);
     8b2:	mov	r1, r4
     8b4:	movs	r0, #13
     8b6:	bl	c474 <pinMode>
}
     8ba:	add	sp, #28
     8bc:	pop	{r4, r5, r6, r7, pc}
     8be:	nop
     8c0:	.word	0x20021380
     8c4:	.word	0x016e3600
     8c8:	.word	0x2002160f
     8cc:	.word	0x20021394
     8d0:	.word	0x20021390
     8d4:	.word	0x2000237c
     8d8:	.word	0x200010b4
     8dc:	.word	0x20001db8
     8e0:	.word	0x200014e8
     8e4:	.word	0x20001dac
     8e8:	.word	0x200014f5
     8ec:	.word	0x200014fe
     8f0:	.word	0x20001513
     8f4:	.word	0x2000153a
     8f8:	.word	0x20001543
     8fc:	.word	0x200211c0
     900:	.word	0x2000154f

00000904 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     904:	push	{r4, lr}
     906:	mov	r4, r0
		release();
     908:	bl	cacc <DMAChannel::release()>
	}
     90c:	mov	r0, r4
     90e:	pop	{r4, pc}

00000910 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     910:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     912:	ldr	r3, [pc, #148]	; (9a8 <acq_isr()+0x98>)
     914:	ldr	r2, [r3, #0]
     916:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     918:	ldrb	r2, [r3, #4]
     91a:	ldr	r3, [pc, #144]	; (9ac <acq_isr()+0x9c>)
     91c:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     91e:	ldr	r2, [pc, #144]	; (9b0 <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     920:	sub.w	r3, r2, #1024	; 0x400
     924:	cmp	r1, r2
     926:	it	cc
     928:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     92a:	mov	r1, r3
	asm("dsb");
     92c:	dsb	sy
     930:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     934:	add.w	r2, r3, #1024	; 0x400
     938:	cmp	r2, r0
     93a:	ite	cc
     93c:	movcc	r2, #1
     93e:	movcs	r2, #32
		SCB_CACHE_DCIMVAC = location;
     940:	mov.w	r0, #3758153728	; 0xe000e000
     944:	add.w	r2, r3, r2, lsl #5
     948:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     94c:	adds	r1, #32
	} while (location < end_addr);
     94e:	cmp	r1, r2
     950:	bne.n	948 <acq_isr()+0x38>
	asm("dsb");
     952:	dsb	sy
	asm("isb");
     956:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     95a:	ldr	r1, [pc, #88]	; (9b4 <acq_isr()+0xa4>)
     95c:	ldr	r4, [pc, #88]	; (9b8 <acq_isr()+0xa8>)
     95e:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     960:	ldr	r5, [pc, #88]	; (9bc <acq_isr()+0xac>)
{ procCount++;
     962:	adds	r2, #1
     964:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     966:	movs	r2, #0
     968:	ldrh	r0, [r5, #0]
     96a:	ldr.w	r1, [r3, r2, lsl #3]
     96e:	adds	r2, #1
     970:	sxth	r0, r0
     972:	cmp	r2, #128	; 0x80
     974:	asr.w	r1, r1, r0
     978:	str.w	r1, [r4], #4
     97c:	bne.n	968 <acq_isr()+0x58>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     97e:	ldr	r2, [pc, #64]	; (9c0 <acq_isr()+0xb0>)
     980:	ldrh	r3, [r2, #0]
     982:	sxth	r3, r3
     984:	cbnz	r3, 998 <acq_isr()+0x88>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     986:	ldr	r0, [pc, #48]	; (9b8 <acq_isr()+0xa8>)
     988:	bl	2764 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     98c:	cbnz	r0, 996 <acq_isr()+0x86>
     98e:	ldr	r2, [pc, #52]	; (9c4 <acq_isr()+0xb4>)
     990:	ldr	r3, [r2, #0]
     992:	adds	r3, #1
     994:	str	r3, [r2, #0]
  }
     996:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     998:	ldrh	r3, [r2, #0]
     99a:	sxth	r3, r3
     99c:	cmp	r3, #1
     99e:	bne.n	996 <acq_isr()+0x86>
   if(!compress((void *)acqBuffer)) procMiss++;
     9a0:	ldr	r0, [pc, #20]	; (9b8 <acq_isr()+0xa8>)
     9a2:	bl	323c <compress(void*)>
     9a6:	b.n	98c <acq_isr()+0x7c>
     9a8:	.word	0x2001ffdc
     9ac:	.word	0x400e8000
     9b0:	.word	0x20200400
     9b4:	.word	0x20020c50
     9b8:	.word	0x20020998
     9bc:	.word	0x2002147a
     9c0:	.word	0x200213d6
     9c4:	.word	0x20020c54

000009c8 <setAudioFrequency(int)>:
  {
     9c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     9cc:	ldr.w	r9, [pc, #332]	; b1c <setAudioFrequency(int)+0x154>
     9d0:	movs	r2, #5
     9d2:	mov	r5, r0
     9d4:	ldr	r1, [pc, #312]	; (b10 <setAudioFrequency(int)+0x148>)
     9d6:	ldr.w	r3, [r9]
     9da:	mov	r0, r9
     9dc:	ldr	r3, [r3, #4]
     9de:	vpush	{d8}
     9e2:	sub	sp, #12
     9e4:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9e6:	movs	r1, #128	; 0x80
     9e8:	mov	r0, r9
     9ea:	bl	cc56 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9ee:	mov	r0, r9
     9f0:	bl	cc68 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9f4:	movs	r3, #26
     9f6:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9f8:	ldr	r0, [pc, #280]	; (b14 <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9fa:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9fc:	mov	r2, r1
        n1=0;
     9fe:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a00:	mul.w	ip, r0, r3
        {   n1++; 
     a04:	mov	r6, r4
     a06:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     a08:	sdiv	r8, ip, r2
     a0c:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     a10:	cmp	r7, #64	; 0x40
     a12:	ble.n	a20 <setAudioFrequency(int)+0x58>
     a14:	cmp	r4, #9
     a16:	add	r2, r1
     a18:	bne.n	a04 <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     a1a:	cmp	r3, #54	; 0x36
     a1c:	bne.n	9fa <setAudioFrequency(int)+0x32>
     a1e:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a20:	mov	r2, r5
     a22:	ldr	r1, [pc, #244]	; (b18 <setAudioFrequency(int)+0x150>)
     a24:	ldr	r0, [pc, #244]	; (b1c <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a26:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a2a:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a2c:	strd	r4, r7, [sp]
     a30:	bl	cca0 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a34:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a38:	ldr.w	r3, [r9]
     a3c:	movs	r2, #3
     a3e:	vcvt.f64.s32	d7, s15
     a42:	ldr	r1, [pc, #220]	; (b20 <setAudioFrequency(int)+0x158>)
     a44:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a46:	and.w	r6, r6, #448	; 0x1c0
     a4a:	ldr	r0, [pc, #208]	; (b1c <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a4c:	vldr	d6, [pc, #168]	; af8 <setAudioFrequency(int)+0x130>
     a50:	vmul.f64	d7, d7, d6
     a54:	vmov	s13, r4
     a58:	vcvt.f64.s32	d6, s13
     a5c:	vmul.f64	d7, d7, d6
     a60:	vmov	s13, r7
     a64:	vcvt.f64.s32	d6, s13
     a68:	vmul.f64	d7, d7, d6
     a6c:	vldr	d6, [pc, #144]	; b00 <setAudioFrequency(int)+0x138>
     a70:	vdiv.f64	d8, d7, d6
     a74:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a76:	movs	r1, #2
     a78:	ldr	r0, [pc, #160]	; (b1c <setAudioFrequency(int)+0x154>)
     a7a:	vmov.f64	d0, d8
     a7e:	bl	cd60 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a82:	ldr	r0, [pc, #152]	; (b1c <setAudioFrequency(int)+0x154>)
     a84:	bl	cc68 <Print::println()>
    int c0 = C;
     a88:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a8c:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a90:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a94:	mul.w	r3, r2, r0
     a98:	vmov	s14, r3
     a9c:	vldr	d6, [pc, #104]	; b08 <setAudioFrequency(int)+0x140>
     aa0:	vcvt.f64.s32	d7, s14
     aa4:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     aa8:	vcvt.s32.f64	s15, d7
     aac:	vmov	r1, s15
     ab0:	bl	12610 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     ab4:	ldr	r2, [pc, #108]	; (b24 <setAudioFrequency(int)+0x15c>)
     ab6:	ldr	r3, [r2, #28]
     ab8:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     abc:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     ac0:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     ac2:	ldr	r3, [r2, #40]	; 0x28
     ac4:	bic.w	r3, r3, #510	; 0x1fe
     ac8:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     acc:	orr.w	r3, r3, r8
     ad0:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     ad2:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ad4:	sub.w	r2, r2, #327680	; 0x50000
     ad8:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     ada:	bic.w	r3, r3, #524288	; 0x80000
     ade:	bic.w	r3, r3, #7
     ae2:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ae6:	str	r3, [r2, #4]
  }
     ae8:	add	sp, #12
     aea:	vpop	{d8}
     aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     af2:	nop
     af4:	nop.w
     af8:	.word	0x00000000
     afc:	.word	0x40600000
     b00:	.word	0x00000000
     b04:	.word	0x4176e360
     b08:	.word	0x00000000
     b0c:	.word	0x40c38800
     b10:	.word	0x20000dd2
     b14:	.word	0x016e3600
     b18:	.word	0x20000dd8
     b1c:	.word	0x20001db8
     b20:	.word	0x20000df5
     b24:	.word	0x400fc000

00000b28 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b28:	ldr	r2, [pc, #100]	; (b90 <i2s_setup()+0x68>)
     b2a:	ldr	r3, [r2, #124]	; 0x7c
  {
     b2c:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b2e:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b32:	ldr	r4, [pc, #96]	; (b94 <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b34:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b36:	ldr.w	r3, [r4, #136]	; 0x88
     b3a:	cmp	r3, #0
     b3c:	blt.n	b8e <i2s_setup()+0x66>
    int fs = fsamp;
     b3e:	ldr	r3, [pc, #88]	; (b98 <i2s_setup()+0x70>)
     b40:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b42:	bl	9c8 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b46:	ldr	r3, [pc, #84]	; (b9c <i2s_setup()+0x74>)
     b48:	movs	r2, #3
     b4a:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b4e:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b52:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b56:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b5a:	movs	r2, #2
     b5c:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b60:	movs	r3, #0
     b62:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b66:	movs	r3, #4
     b68:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b6c:	mov.w	r3, #83886080	; 0x5000000
     b70:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b74:	mov.w	r3, #65536	; 0x10000
     b78:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b7c:	adds	r3, #27
     b7e:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b82:	ldr	r3, [pc, #28]	; (ba0 <i2s_setup()+0x78>)
     b84:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b88:	ldr	r3, [pc, #24]	; (ba4 <i2s_setup()+0x7c>)
     b8a:	str.w	r3, [r4, #136]	; 0x88
  }
     b8e:	pop	{r4, pc}
     b90:	.word	0x400fc000
     b94:	.word	0x40384000
     b98:	.word	0x2000235c
     b9c:	.word	0x401f8000
     ba0:	.word	0x1f1f1f00
     ba4:	.word	0x92000001

00000ba8 <dma_setup()>:
  {
     ba8:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     baa:	ldr	r4, [pc, #128]	; (c2c <dma_setup()+0x84>)
     bac:	movs	r1, #1
     bae:	mov	r0, r4
     bb0:	bl	ca30 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     bb4:	ldr	r3, [r4, #0]
     bb6:	ldr	r2, [pc, #120]	; (c30 <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     bb8:	ldr	r1, [pc, #120]	; (c34 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     bba:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     bbc:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     bbe:	ldr	r0, [pc, #120]	; (c38 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     bc0:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     bc2:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bc4:	ldr	r0, [pc, #116]	; (c3c <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     bc6:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     bca:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     bce:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     bd0:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bd2:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     bd6:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bd8:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     bda:	ldrh	r2, [r3, #22]
     bdc:	uxth	r2, r2
     bde:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     be0:	movs	r2, #6
     be2:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     be4:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     be6:	ldr	r2, [pc, #88]	; (c40 <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     be8:	lsls	r3, r3, #2
     bea:	add.w	r3, r3, #1073741824	; 0x40000000
     bee:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bf2:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bf4:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bf6:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bf8:	ldr	r2, [pc, #72]	; (c44 <dma_setup()+0x9c>)
     bfa:	add.w	r1, r3, #16
     bfe:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c02:	asrs	r2, r3, #5
     c04:	and.w	r0, r3, #31
     c08:	movs	r1, #1
     c0a:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c0e:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c12:	lsls	r1, r0
     c14:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c16:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     c1a:	lsls	r2, r2, #2
     c1c:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     c1e:	movs	r2, #96	; 0x60
     c20:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     c22:	ldr	r3, [pc, #36]	; (c48 <dma_setup()+0xa0>)
     c24:	ldrb	r2, [r4, #4]
     c26:	strb	r2, [r3, #27]
  }
     c28:	pop	{r4, pc}
     c2a:	nop
     c2c:	.word	0x2001ffdc
     c30:	.word	0x403840a0
     c34:	.word	0x02020000
     c38:	.word	0x20200000
     c3c:	.word	0x00000911
     c40:	.word	0x80000013
     c44:	.word	0x20002400
     c48:	.word	0x400e8000

00000c4c <acqModifyFrequency(unsigned long)>:
  {
     c4c:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c4e:	ldr	r4, [pc, #32]	; (c70 <acqModifyFrequency(unsigned long)+0x24>)
     c50:	ldr.w	r3, [r4, #136]	; 0x88
     c54:	bic.w	r3, r3, #2415919104	; 0x90000000
     c58:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c5c:	bl	9c8 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c60:	ldr.w	r3, [r4, #136]	; 0x88
     c64:	orr.w	r3, r3, #2415919104	; 0x90000000
     c68:	str.w	r3, [r4, #136]	; 0x88
  }
     c6c:	pop	{r4, pc}
     c6e:	nop
     c70:	.word	0x40384000

00000c74 <_GLOBAL__sub_I_procCount>:
		begin();
     c74:	ldr	r0, [pc, #20]	; (c8c <_GLOBAL__sub_I_procCount+0x18>)
     c76:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c78:	push	{r3, lr}
     c7a:	bl	ca30 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c7e:	ldr	r2, [pc, #16]	; (c90 <_GLOBAL__sub_I_procCount+0x1c>)
     c80:	ldr	r1, [pc, #16]	; (c94 <_GLOBAL__sub_I_procCount+0x20>)
     c82:	ldr	r0, [pc, #8]	; (c8c <_GLOBAL__sub_I_procCount+0x18>)
}
     c84:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c88:	b.w	ce90 <__aeabi_atexit>
     c8c:	.word	0x2001ffdc
     c90:	.word	0x20002190
     c94:	.word	0x00000905

00000c98 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c98:	ldr	r3, [r0, #4]
     c9a:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c9c:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c9e:	bgt.n	cac <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     ca0:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     ca4:	adds	r3, #1
          sd_name[fsCount] = name;
     ca6:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     ca8:	str	r3, [r0, #4]
     caa:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     cac:	pop	{r4, pc}

00000cae <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     cae:	ldr	r0, [r0, #4]
     cb0:	bx	lr

00000cb2 <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     cb2:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     cb6:	ldr	r0, [r1, #8]
     cb8:	bx	lr

00000cba <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     cba:	movs	r0, #0
     cbc:	bx	lr

00000cbe <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     cbe:	movs	r0, #1
     cc0:	bx	lr

00000cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     cc2:	push	{r4}
    *name = 0;
     cc4:	movs	r4, #0
     cc6:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     cc8:	ldr	r3, [r0, #56]	; 0x38
     cca:	cbz	r3, cd6 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     ccc:	mov	r0, r3
  }
     cce:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     cd2:	b.w	74ac <FatFile::getName(char*, unsigned int)>
     cd6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     cd8:	cbz	r0, ce2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     cda:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cde:	b.w	5d70 <ExFatFile::getName8(char*, unsigned int)>
     ce2:	ldr.w	r4, [sp], #4
     ce6:	bx	lr

00000ce8 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ce8:	push	{r4, lr}
     cea:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cec:	movs	r3, #0
     cee:	movs	r2, #10
     cf0:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cf4:	mov	r0, r4
     cf6:	ldmia.w	sp!, {r4, lr}
     cfa:	b.w	cc68 <Print::println()>

00000cfe <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cfe:	push	{r0, r1, r4, lr}
     d00:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     d02:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     d04:	cbz	r1, d1e <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     d06:	str	r1, [sp, #4]
     d08:	bl	f310 <strlen>
     d0c:	ldr	r3, [r4, #0]
     d0e:	mov	r2, r0
     d10:	ldr	r1, [sp, #4]
     d12:	mov	r0, r4
     d14:	ldr	r3, [r3, #4]
     d16:	add	sp, #8
     d18:	ldmia.w	sp!, {r4, lr}
     d1c:	bx	r3
     d1e:	add	sp, #8
     d20:	pop	{r4, pc}
	...

00000d24 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     d24:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     d26:	ldr	r4, [pc, #44]	; (d54 <dbgPrint(unsigned short)+0x30>)
     d28:	mov	r5, r0
     d2a:	ldr	r1, [pc, #44]	; (d58 <dbgPrint(unsigned short)+0x34>)
     d2c:	mov	r0, r4
     d2e:	bl	cfe <Print::write(char const*)>
     d32:	ldr	r1, [pc, #40]	; (d5c <dbgPrint(unsigned short)+0x38>)
     d34:	mov	r0, r4
     d36:	bl	cfe <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d3a:	movs	r0, #46	; 0x2e
     d3c:	bl	aea4 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d40:	mov	r1, r5
     d42:	mov	r0, r4
     d44:	bl	cc56 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d48:	mov	r0, r4
  }
     d4a:	ldmia.w	sp!, {r3, r4, r5, lr}
     d4e:	b.w	cc68 <Print::println()>
     d52:	nop
     d54:	.word	0x20001db8
     d58:	.word	0x20001104
     d5c:	.word	0x2000110f

00000d60 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d60:	push	{r3, r4, r5, lr}
     d62:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d64:	bl	cfe <Print::write(char const*)>
     d68:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d6a:	mov	r0, r5
     d6c:	bl	cc68 <Print::println()>
     d70:	add	r0, r4
     d72:	pop	{r3, r4, r5, pc}

00000d74 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d74:	ldr.w	r3, [r0, #1152]	; 0x480
     d78:	cbz	r3, d86 <FsVolume::bytesPerCluster() const+0x12>
     d7a:	ldrb	r3, [r3, #6]
     d7c:	mov.w	r0, #512	; 0x200
     d80:	lsls	r0, r3
     d82:	uxth	r0, r0
     d84:	bx	lr
     d86:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d8a:	cbz	r0, d90 <FsVolume::bytesPerCluster() const+0x1c>
     d8c:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d90:	bx	lr

00000d92 <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d92:	ldr.w	r3, [r0, #1152]	; 0x480
     d96:	cbz	r3, d9e <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d98:	ldr	r0, [r3, #28]
     d9a:	subs	r0, #1
     d9c:	bx	lr
     d9e:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     da2:	cbz	r0, da8 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     da4:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     da8:	bx	lr

00000daa <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     daa:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     dae:	push	{r3, r4, r5, lr}
     db0:	ldr	r5, [r1, #88]	; 0x58
     db2:	mov	r0, r5
     db4:	bl	d92 <FsVolume::clusterCount() const>
     db8:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     dba:	mov	r0, r5
     dbc:	bl	d74 <FsVolume::bytesPerCluster() const>
     dc0:	umull	r0, r1, r4, r0
     dc4:	pop	{r3, r4, r5, pc}

00000dc6 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     dc6:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     dca:	push	{r4, r5, lr}
     dcc:	mov	r5, r1
     dce:	sub	sp, #68	; 0x44
     dd0:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     dd2:	cbz	r3, df8 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     dd4:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     dd6:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     dda:	add	r0, sp, #8
     ddc:	mov	r3, r2
     dde:	str	r2, [sp, #8]
     de0:	mov	r2, r5
     de2:	str	r1, [sp, #4]
     de4:	bl	7ac8 <FatFile::open(FatFile*, char const*, int)>
     de8:	ldr	r1, [sp, #4]
     dea:	cbz	r0, df4 <FsVolume::rename(char const*, char const*)+0x2e>
     dec:	mov	r2, r4
     dee:	add	r0, sp, #8
     df0:	bl	7d88 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     df4:	add	sp, #68	; 0x44
     df6:	pop	{r4, r5, pc}
     df8:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dfc:	cmp	r0, #0
     dfe:	beq.n	df4 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     e00:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     e04:	mov	r2, r5
     e06:	add	r0, sp, #8
  ExFatFile() {}
     e08:	str	r3, [sp, #56]	; 0x38
     e0a:	str	r1, [sp, #4]
     e0c:	bl	6594 <ExFatFile::open(ExFatFile*, char const*, int)>
     e10:	ldr	r1, [sp, #4]
     e12:	cbnz	r0, e18 <FsVolume::rename(char const*, char const*)+0x52>
     e14:	movs	r0, #0
     e16:	b.n	df4 <FsVolume::rename(char const*, char const*)+0x2e>
     e18:	mov	r2, r4
     e1a:	add	r0, sp, #8
     e1c:	bl	6f90 <ExFatFile::rename(ExFatFile*, char const*)>
     e20:	cmp	r0, #0
     e22:	beq.n	e14 <FsVolume::rename(char const*, char const*)+0x4e>
     e24:	b.n	df4 <FsVolume::rename(char const*, char const*)+0x2e>

00000e26 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     e26:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     e28:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     e2a:	cbz	r3, e44 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     e2c:	ldrb	r0, [r3, #0]
     e2e:	ands.w	r0, r0, #8
     e32:	ittt	ne
     e34:	ldrne	r0, [r3, #28]
     e36:	ldrne	r3, [r3, #20]
     e38:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e3a:	cmp	r0, #0
     e3c:	it	lt
     e3e:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e42:	pop	{r4, pc}
     e44:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e46:	cmp	r0, #0
     e48:	beq.n	e42 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e4a:	ldrb.w	r3, [r0, #49]	; 0x31
     e4e:	ands.w	r3, r3, #8
     e52:	beq.n	e72 <FsBaseFile::available() const+0x4c>
     e54:	ldrd	r1, r3, [r0, #16]
     e58:	ldrd	r2, r4, [r0]
     e5c:	subs	r0, r1, r2
     e5e:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e62:	cmp.w	r0, #2147483648	; 0x80000000
     e66:	sbcs.w	r3, r3, #0
     e6a:	it	cs
     e6c:	mvncs.w	r0, #2147483648	; 0x80000000
     e70:	b.n	e42 <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e72:	mov	r0, r3
     e74:	b.n	e62 <FsBaseFile::available() const+0x3c>

00000e76 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     e76:	ldr	r3, [r0, #56]	; 0x38
     e78:	cbz	r3, e80 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0xa>
     e7a:	mov	r0, r3
     e7c:	b.w	7baa <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     e80:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     e82:	cbz	r0, e88 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
     e84:	b.w	5ece <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     e88:	bx	lr

00000e8a <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e8a:	ldr	r3, [r0, #56]	; 0x38
     e8c:	cbz	r3, e9c <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e8e:	ldrb	r3, [r3, #0]
     e90:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e94:	ite	ne
     e96:	movne	r0, #1
     e98:	moveq	r0, #0
  }
     e9a:	bx	lr
     e9c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e9e:	cmp	r0, #0
     ea0:	beq.n	e9a <FsBaseFile::isDir() const+0x10>
     ea2:	ldrb.w	r3, [r0, #49]	; 0x31
     ea6:	tst.w	r3, #80	; 0x50
     eaa:	b.n	e94 <FsBaseFile::isDir() const+0xa>

00000eac <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     eac:	ldr	r3, [r0, #56]	; 0x38
     eae:	cbnz	r3, eba <FsBaseFile::isOpen() const+0xe>
     eb0:	ldr	r0, [r0, #60]	; 0x3c
     eb2:	subs	r0, #0
     eb4:	it	ne
     eb6:	movne	r0, #1
     eb8:	bx	lr
     eba:	movs	r0, #1
     ebc:	bx	lr

00000ebe <MTPStorage_SD::CloseIndex()>:
  {
     ebe:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     ec0:	add.w	r5, r0, #184	; 0xb8
  {
     ec4:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     ec6:	mov	r0, r5
     ec8:	bl	eac <FsBaseFile::isOpen() const>
     ecc:	cbz	r0, ed4 <MTPStorage_SD::CloseIndex()+0x16>
     ece:	mov	r0, r5
     ed0:	bl	8c98 <FsBaseFile::close()>
    index_generated = false;
     ed4:	movs	r3, #0
     ed6:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     eda:	str.w	r3, [r4, #424]	; 0x1a8
  }
     ede:	pop	{r3, r4, r5, pc}

00000ee0 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     ee0:	ldr	r3, [r0, #56]	; 0x38
     ee2:	cbz	r3, eea <FsBaseFile::read(void*, unsigned int)+0xa>
     ee4:	mov	r0, r3
     ee6:	b.w	7604 <FatFile::read(void*, unsigned int)>
     eea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     eec:	cbz	r0, ef2 <FsBaseFile::read(void*, unsigned int)+0x12>
     eee:	b.w	5fb4 <ExFatFile::read(void*, unsigned int)>
  }
     ef2:	mov.w	r0, #4294967295
     ef6:	bx	lr

00000ef8 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     ef8:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     efa:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     efc:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     efe:	cbz	r5, f0a <FsBaseFile::seekSet(unsigned long long)+0x12>
     f00:	cbnz	r3, f14 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     f02:	mov	r0, r5
  }
     f04:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     f06:	b.w	77ee <FatFile::seekSet(unsigned long)>
     f0a:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     f0c:	cbz	r0, f14 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     f0e:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     f10:	b.w	6164 <ExFatFile::seekSet(unsigned long long)>
  }
     f14:	movs	r0, #0
     f16:	pop	{r4, r5}
     f18:	bx	lr

00000f1a <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     f1a:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     f1c:	add.w	r0, r0, #264	; 0x108
     f20:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     f24:	pop	{r3, pc}
	...

00000f28 <FsFile::FsFile()>:
     f28:	movs	r2, #0
     f2a:	mov.w	r1, #1000	; 0x3e8
     f2e:	strb	r2, [r0, #12]
     f30:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f34:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f38:	ldr	r2, [pc, #4]	; (f40 <FsFile::FsFile()+0x18>)
     f3a:	str	r2, [r0, #0]
     f3c:	bx	lr
     f3e:	nop
     f40:	.word	0x20000554

00000f44 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f44:	ldr	r3, [pc, #16]	; (f58 <FsFile::~FsFile()+0x14>)
     f46:	push	{r4, lr}
     f48:	mov	r4, r0
     f4a:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f4e:	bl	8c98 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f52:	mov	r0, r4
     f54:	pop	{r4, pc}
     f56:	nop
     f58:	.word	0x2000042c

00000f5c <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f5c:	add.w	r1, r0, r1, lsl #2
     f60:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f62:	ldr.w	r1, [r3, #1152]	; 0x480
     f66:	push	{lr}
     f68:	sub	sp, #60	; 0x3c
     f6a:	cbz	r1, f82 <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f6c:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f6e:	add.w	r1, r1, #1096	; 0x448
     f72:	mov	r0, sp
     f74:	str	r3, [sp, #0]
     f76:	movs	r3, #1
     f78:	bl	7ce4 <FatFile::mkdir(FatFile*, char const*, bool)>
     f7c:	add	sp, #60	; 0x3c
     f7e:	ldr.w	pc, [sp], #4
     f82:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f86:	cmp	r0, #0
     f88:	beq.n	f7c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f8a:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f8c:	movs	r3, #1
     f8e:	add.w	r1, r0, #1096	; 0x448
     f92:	mov	r0, sp
     f94:	bl	6ed2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f98:	b.n	f7c <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f9c <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f9c:	push	{r4, r5, lr}
     f9e:	mov	r4, r0
     fa0:	sub	sp, #68	; 0x44
     fa2:	mov	r5, r1
     fa4:	ldr	r0, [pc, #84]	; (ffc <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     fa6:	mov	r1, r2
     fa8:	str	r2, [sp, #4]
     faa:	bl	d60 <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     fae:	ldr	r2, [sp, #4]
     fb0:	add.w	r1, r4, r5, lsl #2
     fb4:	ldr	r3, [r1, #84]	; 0x54
     fb6:	ldr.w	r1, [r3, #1152]	; 0x480
     fba:	cbz	r1, fd4 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     fbc:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fbe:	add	r0, sp, #8
     fc0:	str	r3, [sp, #8]
     fc2:	movs	r3, #1
     fc4:	bl	7b66 <FatFile::open(FatVolume*, char const*, int)>
     fc8:	cbz	r0, fd0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fca:	add	r0, sp, #8
     fcc:	bl	8be0 <FatFile::remove()>
     fd0:	add	sp, #68	; 0x44
     fd2:	pop	{r4, r5, pc}
     fd4:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fd8:	cmp	r0, #0
     fda:	beq.n	fd0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fdc:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fde:	movs	r3, #1
     fe0:	mov	r1, r0
     fe2:	add	r0, sp, #8
     fe4:	bl	665a <ExFatFile::open(ExFatVolume*, char const*, int)>
     fe8:	cbnz	r0, fee <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fea:	movs	r0, #0
     fec:	b.n	fd0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fee:	add	r0, sp, #8
     ff0:	bl	6bd8 <ExFatFile::remove()>
     ff4:	cmp	r0, #0
     ff6:	beq.n	fea <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     ff8:	b.n	fd0 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     ffa:	nop
     ffc:	.word	0x20001db8

00001000 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    1000:	add.w	r1, r0, r1, lsl #2
    1004:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    1006:	ldr.w	r1, [r3, #1152]	; 0x480
    100a:	push	{lr}
    100c:	sub	sp, #60	; 0x3c
    100e:	cbz	r1, 1028 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
    1010:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1012:	mov	r0, sp
    1014:	str	r3, [sp, #0]
    1016:	bl	7b66 <FatFile::open(FatVolume*, char const*, int)>
    101a:	cbz	r0, 1022 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    101c:	mov	r0, sp
    101e:	bl	788e <FatFile::rmdir()>
    1022:	add	sp, #60	; 0x3c
    1024:	ldr.w	pc, [sp], #4
    1028:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    102c:	cmp	r0, #0
    102e:	beq.n	1022 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1030:	mov	r3, r1
    1032:	str	r1, [sp, #48]	; 0x30
    1034:	mov	r1, r0
    1036:	mov	r0, sp
    1038:	bl	665a <ExFatFile::open(ExFatVolume*, char const*, int)>
    103c:	cbnz	r0, 1042 <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    103e:	movs	r0, #0
    1040:	b.n	1022 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    1042:	mov	r0, sp
    1044:	bl	6c64 <ExFatFile::rmdir()>
    1048:	cmp	r0, #0
    104a:	beq.n	103e <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    104c:	b.n	1022 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00001050 <MTPStorage_SD::OpenIndex()>:
  { 
    1050:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    1052:	add.w	r5, r0, #184	; 0xb8
  { 
    1056:	sub	sp, #84	; 0x54
    1058:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    105a:	mov	r0, r5
    105c:	bl	eac <FsBaseFile::isOpen() const>
    1060:	cbnz	r0, 10a2 <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1062:	ldr	r2, [pc, #68]	; (10a8 <MTPStorage_SD::OpenIndex()+0x58>)
    1064:	movw	r3, #514	; 0x202
    1068:	ldr	r1, [r4, #88]	; 0x58
    106a:	mov	r0, sp
    106c:	bl	8ecc <FsVolume::open(char const*, int)>
class Print
    1070:	ldr	r3, [sp, #4]
    1072:	add	r1, sp, #16
    1074:	mov	r0, r5
    1076:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    107a:	ldr	r3, [sp, #8]
    107c:	str.w	r3, [r4, #176]	; 0xb0
    1080:	ldrb.w	r3, [sp, #12]
    1084:	strb.w	r3, [r4, #180]	; 0xb4
    1088:	bl	8cc2 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    108c:	mov	r0, sp
    108e:	bl	f44 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    1092:	mov	r0, r5
    1094:	bl	eac <FsBaseFile::isOpen() const>
    1098:	cbnz	r0, 10a2 <MTPStorage_SD::OpenIndex()+0x52>
    109a:	ldr	r1, [pc, #16]	; (10ac <MTPStorage_SD::OpenIndex()+0x5c>)
    109c:	ldr	r0, [pc, #16]	; (10b0 <MTPStorage_SD::OpenIndex()+0x60>)
    109e:	bl	d60 <Print::println(char const*)>
  }
    10a2:	add	sp, #84	; 0x54
    10a4:	pop	{r4, r5, pc}
    10a6:	nop
    10a8:	.word	0x20001147
    10ac:	.word	0x20001155
    10b0:	.word	0x20001db8

000010b4 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    10b4:	push	{r4, lr}
    10b6:	mov	r4, r0
    if(!index_.isOpen()) return;
    10b8:	adds	r0, #184	; 0xb8
    10ba:	bl	eac <FsBaseFile::isOpen() const>
    10be:	cbz	r0, 10e0 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    10c0:	ldr	r3, [r4, #0]
    10c2:	mov	r0, r4
    10c4:	ldr	r3, [r3, #64]	; 0x40
    10c6:	blx	r3
    all_scanned_ = false;
    10c8:	movs	r3, #0
    OpenIndex();
    10ca:	mov	r0, r4
    all_scanned_ = false;
    10cc:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    10d0:	mvn.w	r3, #1
    10d4:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10d8:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10dc:	b.w	1050 <MTPStorage_SD::OpenIndex()>
  }
    10e0:	pop	{r4, pc}

000010e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    10e2:	push	{r0, r1, r4, r5, r6, lr}
    10e4:	mov	r4, r0
    10e6:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10e8:	mov.w	r6, #280	; 0x118
  { OpenIndex();
    10ec:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10ee:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10f0:	bl	1050 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10f4:	mul.w	r2, r6, r5
    10f8:	movs	r3, #0
    10fa:	mov	r0, r4
    10fc:	bl	ef8 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    1100:	mov	r2, r6
    1102:	ldr	r1, [sp, #4]
    1104:	mov	r0, r4
    1106:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    110a:	add	sp, #8
    110c:	pop	{r4, r5, r6, pc}

0000110e <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    110e:	push	{r4, lr}
    1110:	ldr.w	r4, [r0, #424]	; 0x1a8
    1114:	mov	r2, r1
    1116:	adds	r1, r4, #1
    1118:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    111c:	mov	r1, r4
    111e:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1122:	mov	r0, r4
    1124:	pop	{r4, pc}
	...

00001128 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    1128:	movs	r3, #1
    sd_remove(0,indexFile);
    112a:	ldr	r2, [pc, #88]	; (1184 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    112c:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    112e:	push	{r4, r5, r6, r7, lr}
    1130:	mov	r4, r0
    index_generated = true;
    1132:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1136:	sub	sp, #284	; 0x11c
    sd_remove(0,indexFile);
    1138:	adds	r0, #4
    113a:	bl	f9c <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    113e:	movs	r5, #0
    num_storage = sd_getFSCount();
    1140:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    1142:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    1146:	ldr	r7, [pc, #64]	; (1188 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    1148:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    114c:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    1150:	ldr.w	r3, [r4, #408]	; 0x198
    1154:	cmp	r5, r3
    1156:	blt.n	115c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1158:	add	sp, #284	; 0x11c
    115a:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    115c:	movs	r3, #0
      strcpy(r.name, "/");
    115e:	mov	r1, r7
    1160:	add	r0, sp, #24
      r.store = ii; // 
    1162:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1166:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1168:	adds	r5, #1
      r.sibling = 0;
    116a:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    116e:	movs	r3, #1
    1170:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1174:	bl	f25c <strcpy>
      AppendIndexRecord(r);
    1178:	mov	r1, sp
    117a:	mov	r0, r4
    117c:	bl	110e <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1180:	b.n	1150 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    1182:	nop
    1184:	.word	0x20001147
    1188:	.word	0x20000dbb

0000118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    118c:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    118e:	mov.w	r7, #280	; 0x118
  {
    1192:	mov	r4, r1
    1194:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1196:	movs	r1, #0
    1198:	mov	r2, r7
  {
    119a:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    119c:	bl	a758 <memset>
    if (i > index_entries_) 
    11a0:	ldr.w	r3, [r4, #424]	; 0x1a8
    11a4:	cmp	r3, r6
    11a6:	bcc.n	11c6 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    11a8:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    11aa:	adds	r4, #184	; 0xb8
    OpenIndex();
    11ac:	bl	1050 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    11b0:	mul.w	r2, r7, r6
    11b4:	movs	r3, #0
    11b6:	mov	r0, r4
    11b8:	bl	ef8 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    11bc:	mov	r2, r7
    11be:	mov	r1, r5
    11c0:	mov	r0, r4
    11c2:	bl	ee0 <FsBaseFile::read(void*, unsigned int)>
  }
    11c6:	mov	r0, r5
    11c8:	pop	{r3, r4, r5, r6, r7, pc}

000011ca <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    11ca:	push	{r4, r5, lr}
    11cc:	mov	r4, r0
    11ce:	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    11d0:	ldr.w	r5, [r4, #432]	; 0x1b0
    11d4:	cbz	r5, 11f4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    11d6:	mov	r2, r5
    11d8:	mov	r1, r4
    11da:	mov	r0, sp
    11dc:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    11e0:	ldrb.w	r3, [r4, #436]	; 0x1b4
    11e4:	cbz	r3, 11fa <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    11e6:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11e8:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11ec:	ldrb.w	r3, [sp, #24]
    11f0:	cmp	r3, #0
    11f2:	beq.n	11d0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11f4:	mov	r0, r5
    11f6:	add	sp, #284	; 0x11c
    11f8:	pop	{r4, r5, pc}
      { next_++;
    11fa:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11fe:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    1202:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    1204:	cmp	r1, r2
    1206:	it	cc
    1208:	movcc	r3, r1
    120a:	b.n	11e8 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

0000120c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    120c:	push	{r4, r5, lr}
    120e:	sub	sp, #308	; 0x134
    1210:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    1212:	mov	r2, r1
    1214:	mov	r1, r0
    1216:	add	r0, sp, #24
  {
    1218:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    121a:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    121e:	add	r1, sp, #48	; 0x30
    1220:	mov	r0, r5
    1222:	bl	f25c <strcpy>
    *parent = r.parent;
    1226:	ldr	r3, [sp, #320]	; 0x140
    1228:	ldr	r2, [sp, #24]
    122a:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    122c:	ldrb.w	r3, [sp, #36]	; 0x24
    1230:	cmp	r3, #0
    1232:	bne.n	12b0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    1234:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    1236:	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    123a:	ldrh.w	r2, [sp, #38]	; 0x26
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    123e:	and.w	r0, r1, #31
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1242:	str	r3, [r4, #0]
    *store = r.store;
    1244:	ldr	r3, [sp, #324]	; 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1246:	lsls	r0, r0, #1
    *store = r.store;
    1248:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    124a:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    124e:	str	r0, [sp, #16]
    1250:	ubfx	r0, r1, #5, #6
    1254:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    1256:	lsrs	r3, r2, #9
    1258:	str	r0, [sp, #12]
    125a:	str	r1, [sp, #8]
    125c:	and.w	r1, r2, #31
    1260:	ubfx	r2, r2, #5, #4
    1264:	addw	r3, r3, #1980	; 0x7bc
    1268:	str	r1, [sp, #4]
    126a:	movs	r1, #32
    126c:	str	r2, [sp, #0]
    126e:	ldr	r0, [sp, #328]	; 0x148
    1270:	ldr	r2, [pc, #68]	; (12b8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1272:	bl	ee14 <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1276:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    127a:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    127e:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    1282:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1284:	lsls	r0, r0, #1
    1286:	addw	r3, r3, #1980	; 0x7bc
    128a:	str	r0, [sp, #16]
    128c:	ubfx	r0, r1, #5, #6
    1290:	lsrs	r1, r1, #11
    1292:	str	r0, [sp, #12]
    1294:	str	r1, [sp, #8]
    1296:	and.w	r1, r2, #31
    129a:	ubfx	r2, r2, #5, #4
    129e:	ldr	r0, [sp, #332]	; 0x14c
    12a0:	str	r1, [sp, #4]
    12a2:	movs	r1, #32
    12a4:	str	r2, [sp, #0]
    12a6:	ldr	r2, [pc, #16]	; (12b8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    12a8:	bl	ee14 <sniprintf>
  }
    12ac:	add	sp, #308	; 0x134
    12ae:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    12b0:	mov.w	r3, #4294967295
    12b4:	b.n	1236 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    12b6:	nop
    12b8:	.word	0x2000112d

000012bc <MTPStorage_SD::GetSize(unsigned long)>:
  {
    12bc:	push	{lr}
    12be:	sub	sp, #284	; 0x11c
    12c0:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    12c2:	mov	r1, r0
    12c4:	mov	r0, sp
    12c6:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    12ca:	ldr	r0, [sp, #4]
    12cc:	add	sp, #284	; 0x11c
    12ce:	ldr.w	pc, [sp], #4

000012d2 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    12d2:	ldr.w	r3, [r0, #320]	; 0x140
  {
    12d6:	push	{r4, r5, r6, lr}
    12d8:	mov	r4, r0
    12da:	sub	sp, #288	; 0x120
    12dc:	cbz	r3, 1348 <MTPStorage_SD::close()+0x76>
    12de:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    12e0:	add.w	r6, r4, #264	; 0x108
    12e4:	add.w	r2, sp, #2
    12e8:	mov	r1, sp
    12ea:	mov	r0, r6
    12ec:	bl	e76 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    12f0:	add.w	r2, sp, #6
    12f4:	add	r1, sp, #4
    12f6:	mov	r0, r6
    12f8:	bl	e76 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    12fc:	mov	r0, r6
    12fe:	bl	8c98 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    1302:	ldr.w	r2, [r4, #420]	; 0x1a4
    1306:	mov	r1, r4
    1308:	add	r0, sp, #8
    130a:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    130e:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    1312:	add	r2, sp, #8
    1314:	ldr.w	r1, [r4, #420]	; 0x1a4
    r.cpdate=cpdate;
    1318:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    131c:	mov	r0, r4
    r.cptime=cptime;
    131e:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    1322:	str	r5, [sp, #12]
    r.cptime=cptime;
    1324:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    1328:	ldrh.w	r3, [sp, #4]
    132c:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    1330:	ldrh.w	r3, [sp, #6]
    1334:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    1338:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    133c:	mvn.w	r3, #1
    1340:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1344:	add	sp, #288	; 0x120
    1346:	pop	{r4, r5, r6, pc}
    1348:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    134c:	cmp	r5, #0
    134e:	beq.n	12e0 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    1350:	ldr	r5, [r5, #16]
    1352:	b.n	12e0 <MTPStorage_SD::close()+0xe>

00001354 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1354:	push	{r4, r5, r6, lr}
    1356:	sub	sp, #280	; 0x118
    1358:	mov	r6, r0
    135a:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    135c:	mov	r2, r1
    135e:	mov	r1, r0
    1360:	mov	r0, sp
  {
    1362:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1364:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1368:	ldr	r1, [sp, #0]
    136a:	adds	r3, r1, #1
    136c:	bne.n	137e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    136e:	ldr	r1, [pc, #64]	; (13b0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1370:	mov	r0, r4
    1372:	bl	f25c <strcpy>
      return tmp.store;
    1376:	ldrh.w	r0, [sp, #14]
  }
    137a:	add	sp, #280	; 0x118
    137c:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    137e:	mov	r3, r5
    1380:	mov	r2, r4
    1382:	mov	r0, r6
    1384:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1388:	mov	r0, r4
    138a:	bl	f310 <strlen>
    138e:	add	r0, r4
    1390:	ldrb.w	r3, [r0, #-1]
    1394:	cmp	r3, #47	; 0x2f
    1396:	beq.n	13a2 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1398:	mov	r2, r5
    139a:	ldr	r1, [pc, #20]	; (13b0 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    139c:	mov	r0, r4
    139e:	bl	f0b0 <strlcat>
      strlcat(out, tmp.name,len);
    13a2:	mov	r2, r5
    13a4:	add	r1, sp, #24
    13a6:	mov	r0, r4
    13a8:	bl	f0b0 <strlcat>
    13ac:	b.n	1376 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    13ae:	nop
    13b0:	.word	0x20000dbb

000013b4 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    13b4:	push	{r4, r5, r6, r7, lr}
    13b6:	subw	sp, sp, #1052	; 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13ba:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    13be:	mov	r4, r0
    13c0:	mov	r5, r1
    13c2:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13c4:	mov	r2, sp
    13c6:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    13ca:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13cc:	mov	r6, r0
    Serial.println(oldName);
    13ce:	ldr	r0, [pc, #120]	; (1448 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13d0:	bl	d60 <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    13d4:	mov	r2, r5
    13d6:	mov	r1, r4
    13d8:	add	r0, sp, #768	; 0x300
    13da:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    13de:	mov.w	r2, #256	; 0x100
    13e2:	add	r1, sp, #792	; 0x318
    13e4:	add	r0, sp, #512	; 0x200
    13e6:	bl	f0f6 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    13ea:	mov.w	r2, #256	; 0x100
    13ee:	mov	r1, r7
    13f0:	add	r0, sp, #792	; 0x318
    13f2:	bl	f0f6 <strlcpy>
    WriteIndexRecord(handle, p1);
    13f6:	add	r2, sp, #768	; 0x300
    13f8:	mov	r1, r5
    13fa:	mov	r0, r4
    13fc:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1400:	mov.w	r3, #256	; 0x100
    1404:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1406:	add.w	r6, r4, r6, lsl #2
    140a:	add.w	r2, sp, r3
    140e:	mov	r0, r4
    1410:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    1414:	add	r1, sp, #256	; 0x100
    1416:	ldr	r0, [pc, #48]	; (1448 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1418:	bl	d60 <Print::println(char const*)>
    141c:	ldr	r0, [r6, #88]	; 0x58
    141e:	add	r2, sp, #256	; 0x100
    1420:	mov	r1, sp
    1422:	bl	dc6 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1426:	mov	r6, r0
    1428:	cbnz	r0, 1440 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    142a:	mov.w	r2, #256	; 0x100
    142e:	add	r1, sp, #512	; 0x200
    1430:	add	r0, sp, #792	; 0x318
    1432:	bl	f0f6 <strlcpy>
    WriteIndexRecord(handle, p1);
    1436:	add	r2, sp, #768	; 0x300
    1438:	mov	r1, r5
    143a:	mov	r0, r4
    143c:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1440:	mov	r0, r6
    1442:	addw	sp, sp, #1052	; 0x41c
    1446:	pop	{r4, r5, r6, r7, pc}
    1448:	.word	0x20001db8

0000144c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    144c:	ldr.w	r3, [r0, #420]	; 0x1a4
    1450:	cmp	r3, r1
  {
    1452:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1456:	mov	r4, r0
    1458:	sub	sp, #336	; 0x150
    145a:	mov	r6, r1
    145c:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    145e:	bne.n	1468 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    1460:	ldr.w	r3, [r0, #416]	; 0x1a0
    1464:	cmp	r3, r2
    1466:	beq.n	14c0 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1468:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    146c:	mov.w	r3, #256	; 0x100
    1470:	add	r2, sp, #80	; 0x50
    1472:	mov	r1, r6
    1474:	mov	r0, r4
    1476:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    147a:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    147c:	mov	r0, r8
    147e:	bl	eac <FsBaseFile::isOpen() const>
    1482:	cbz	r0, 148a <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1484:	mov	r0, r8
    1486:	bl	8c98 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    148a:	add.w	r7, r4, r7, lsl #2
    148e:	add	r2, sp, #80	; 0x50
    1490:	mov	r3, r5
    1492:	mov	r0, sp
    1494:	ldr	r1, [r7, #88]	; 0x58
    1496:	bl	8ecc <FsVolume::open(char const*, int)>
    149a:	ldr	r3, [sp, #4]
    149c:	add	r1, sp, #16
    149e:	mov	r0, r8
    14a0:	str.w	r3, [r4, #252]	; 0xfc
    14a4:	ldr	r3, [sp, #8]
    14a6:	str.w	r3, [r4, #256]	; 0x100
    14aa:	ldrb.w	r3, [sp, #12]
    14ae:	strb.w	r3, [r4, #260]	; 0x104
    14b2:	bl	8cc2 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    14b6:	mov	r0, sp
    14b8:	bl	f44 <FsFile::~FsFile()>
    mode_ = mode;
    14bc:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    14c0:	add	sp, #336	; 0x150
    14c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000014c6 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    14c6:	push	{r4, r5, r6, lr}
    14c8:	mov	r4, r0
    14ca:	mov	r6, r2
    14cc:	mov	r5, r3
    OpenFileByIndex(handle);
    14ce:	movs	r2, #0
    file_.seekSet(pos);
    14d0:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    14d4:	bl	144c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    14d8:	mov	r2, r6
    14da:	movs	r3, #0
    14dc:	mov	r0, r4
    14de:	bl	ef8 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    14e2:	ldr	r2, [sp, #16]
    14e4:	mov	r1, r5
    14e6:	mov	r0, r4
    14e8:	bl	ee0 <FsBaseFile::read(void*, unsigned int)>
  }
    14ec:	pop	{r4, r5, r6, pc}

000014ee <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    14ee:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14f2:	cmp.w	r2, #4294967295
    14f6:	ite	ne
    14f8:	movne	r8, r2
    14fa:	moveq	r8, r1
  {
    14fc:	sub.w	sp, sp, #816	; 0x330
    1500:	mov	r4, r0
    1502:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    1504:	mov	r2, r8
    1506:	mov	r1, r0
    1508:	add	r0, sp, #256	; 0x100
  {
    150a:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    150c:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    1510:	mov.w	r2, #256	; 0x100
    1514:	ldr	r1, [sp, #840]	; 0x348
    1516:	add	r0, sp, #560	; 0x230
    1518:	bl	f0f6 <strlcpy>
    r.store = p.store;
    151c:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.sibling = p.child;
    1520:	ldr	r2, [sp, #260]	; 0x104
    ret = p.child = AppendIndexRecord(r);
    1522:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    1524:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    1528:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    152a:	mov	r0, r4
    r.sibling = p.child;
    152c:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    152e:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    1530:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    1534:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    1538:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    153c:	movs	r3, #1
    153e:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    1542:	bl	110e <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    1546:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1548:	mov	r5, r0
    154a:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    154c:	mov	r1, r8
    154e:	mov	r0, r4
    1550:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1554:	cbz	r7, 1578 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1556:	mov	r2, sp
    1558:	mov	r1, r5
    155a:	mov.w	r3, #256	; 0x100
    155e:	mov	r0, r4
    1560:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1564:	mov	r2, sp
    1566:	mov	r1, r6
    1568:	adds	r0, r4, #4
    156a:	bl	f5c <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    156e:	mov	r0, r5
    1570:	add.w	sp, sp, #816	; 0x330
    1574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    1578:	movw	r2, #514	; 0x202
    157c:	mov	r1, r5
    157e:	mov	r0, r4
    1580:	bl	144c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1584:	b.n	156e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001586 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1586:	ldrb.w	r3, [r0, #428]	; 0x1ac
    158a:	cbnz	r3, 1590 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    158c:	b.w	1128 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1590:	bx	lr

00001592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    1592:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1596:	cmp.w	r2, #4294967295
    159a:	ite	ne
    159c:	movne	r6, r2
    159e:	moveq	r6, r1
    15a0:	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    15a4:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    15a6:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    15a8:	mov	r2, r6
    15aa:	mov	r0, sp
    15ac:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    15b0:	ldrb.w	r3, [sp, #12]
    15b4:	cmp	r3, #0
    15b6:	beq.n	16b0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    15b8:	ldrb.w	r5, [sp, #13]
    15bc:	cmp	r5, #0
    15be:	bne.n	16b0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    15c0:	add.w	r8, r4, #264	; 0x108
      OpenFileByIndex(i);
    15c4:	mov	r0, r4
    15c6:	mov	r2, r5
    15c8:	mov	r1, r6
    15ca:	bl	144c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    15ce:	mov	r0, r8
    15d0:	bl	eac <FsBaseFile::isOpen() const>
    15d4:	cmp	r0, #0
    15d6:	beq.n	16b0 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    15d8:	mov	r9, r5
    FsFile tmpFile;
    15da:	add	r0, sp, #280	; 0x118
    15dc:	add.w	r7, r4, #344	; 0x158
    15e0:	bl	f28 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15e4:	movs	r2, #0
    15e6:	mov	r1, r8
    15e8:	add	r0, sp, #296	; 0x128
    15ea:	bl	8d98 <FsBaseFile::openNext(FsBaseFile*, int)>
    15ee:	ldr	r3, [sp, #284]	; 0x11c
    15f0:	add	r1, sp, #296	; 0x128
    15f2:	mov	r0, r7
    15f4:	str.w	r3, [r4, #332]	; 0x14c
    15f8:	ldr	r3, [sp, #288]	; 0x120
    15fa:	str.w	r3, [r4, #336]	; 0x150
    15fe:	ldrb.w	r3, [sp, #292]	; 0x124
    1602:	strb.w	r3, [r4, #340]	; 0x154
    1606:	bl	8cc2 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    160a:	add	r0, sp, #280	; 0x118
    160c:	bl	f44 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    1610:	mov	r0, r7
    1612:	bl	eac <FsBaseFile::isOpen() const>
    1616:	cmp	r0, #0
    1618:	beq.n	169e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    161a:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    161e:	mov	r0, r7
        r.parent = i;
    1620:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    1622:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    1626:	str	r5, [sp, #288]	; 0x120
    1628:	bl	e8a <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    162c:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1630:	cbnz	r0, 1686 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    1632:	ldr.w	r3, [r4, #400]	; 0x190
    1636:	cbz	r3, 167a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    1638:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    163a:	mov.w	r2, #256	; 0x100
    163e:	add	r1, sp, #304	; 0x130
    1640:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1642:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1644:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    1648:	bl	cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    164c:	add.w	r2, sp, #298	; 0x12a
    1650:	add	r1, sp, #296	; 0x128
    1652:	mov	r0, r7
    1654:	bl	e76 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1658:	ldr.w	r0, [r4, #400]	; 0x190
    165c:	cbz	r0, 168a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    165e:	add.w	r2, sp, #302	; 0x12e
    1662:	add	r1, sp, #300	; 0x12c
    1664:	bl	7bca <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    1668:	add	r1, sp, #280	; 0x118
    166a:	mov	r0, r4
    166c:	bl	110e <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1670:	mov	r5, r0
        child_.close();
    1672:	mov	r0, r7
    1674:	bl	8c98 <FsBaseFile::close()>
      }
    1678:	b.n	15da <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    167a:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    167e:	cmp	r3, #0
    1680:	beq.n	163a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1682:	ldr	r3, [r3, #16]
    1684:	b.n	163a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1686:	movs	r3, #0
    1688:	b.n	163a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    168a:	ldr.w	r0, [r4, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    168e:	cmp	r0, #0
    1690:	beq.n	1668 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    1692:	add.w	r2, sp, #302	; 0x12e
    1696:	add	r1, sp, #300	; 0x12c
    1698:	bl	5eee <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    169c:	b.n	1668 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    169e:	movs	r3, #1
      WriteIndexRecord(i, record);
    16a0:	mov	r2, sp
    16a2:	mov	r1, r6
    16a4:	mov	r0, r4
      record.scanned = true;
    16a6:	strb.w	r3, [sp, #13]
      record.child = sibling;
    16aa:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    16ac:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    16b0:	add.w	sp, sp, #564	; 0x234
    16b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000016b8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    16b8:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    16ba:	cmp.w	r2, #4294967295
    16be:	it	eq
    16c0:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    16c2:	sub	sp, #288	; 0x120
    16c4:	mov	r4, r0
      ScanDir(store, parent);
    16c6:	str	r2, [sp, #4]
    16c8:	bl	1592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    16cc:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    16ce:	ldr	r2, [sp, #4]
    16d0:	mov	r1, r4
    16d2:	add	r0, sp, #8
      follow_sibling_ = true;
    16d4:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    16d8:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    16dc:	ldr	r3, [sp, #12]
    16de:	str.w	r3, [r4, #432]	; 0x1b0
  }
    16e2:	add	sp, #288	; 0x120
    16e4:	pop	{r4, pc}

000016e6 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    16e6:	push	{r4, r5, r6, lr}
    16e8:	ldrb.w	r4, [r0, #429]	; 0x1ad
    16ec:	mov	r5, r0
    16ee:	mov	r6, r1
    16f0:	cbnz	r4, 1704 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16f2:	movs	r3, #1
    16f4:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    16f8:	bl	1586 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16fc:	ldr.w	r3, [r5, #424]	; 0x1a8
    1700:	cmp	r4, r3
    1702:	bcc.n	1706 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    1704:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    1706:	mov	r2, r4
    1708:	mov	r1, r6
    170a:	mov	r0, r5
    170c:	adds	r4, #1
    170e:	bl	1592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    1712:	b.n	16fc <MTPStorage_SD::ScanAll(unsigned long)+0x16>

00001714 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    1714:	push	{r4, r5, r6, lr}
    1716:	mov	r5, r2
    1718:	mov	r4, r0
    171a:	mov	r6, r1
    GenerateIndex(store);
    171c:	bl	1586 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    1720:	cbz	r5, 1730 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    1722:	mov	r2, r5
    1724:	mov	r1, r6
    1726:	mov	r0, r4
  }
    1728:	ldmia.w	sp!, {r4, r5, r6, lr}
    172c:	b.w	16b8 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    1730:	mov	r1, r6
    1732:	mov	r0, r4
    1734:	bl	16e6 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    1738:	movs	r3, #1
      follow_sibling_ = false;
    173a:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    173e:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1742:	pop	{r4, r5, r6, pc}

00001744 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    1744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1748:	mov	r4, r1
    174a:	sub.w	sp, sp, #764	; 0x2fc
    174e:	add.w	r1, r0, r1, lsl #2
    1752:	mov	r6, r0
  FsFile f1=sd_open(store,file,0);
    1754:	adds	r7, r0, #4
    1756:	movs	r3, #0
    1758:	add	r0, sp, #8
    175a:	ldr	r1, [r1, #88]	; 0x58
{ 
    175c:	mov	r5, r2
    175e:	bl	8ecc <FsVolume::open(char const*, int)>
    1762:	add	r0, sp, #24
    1764:	bl	e8a <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1768:	cmp	r0, #0
    176a:	beq.n	180e <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    176c:	ldr.w	r9, [pc, #172]	; 181c <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1770:	add	r0, sp, #88	; 0x58
    1772:	bl	f28 <FsFile::FsFile()>
    FsFile tmpFile;
    1776:	add	r0, sp, #168	; 0xa8
    1778:	bl	f28 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    177c:	movs	r2, #0
    177e:	add	r1, sp, #24
    1780:	add	r0, sp, #184	; 0xb8
    1782:	bl	8d98 <FsBaseFile::openNext(FsBaseFile*, int)>
    1786:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1788:	add	r1, sp, #184	; 0xb8
    178a:	add	r0, sp, #104	; 0x68
    178c:	str	r3, [sp, #92]	; 0x5c
    178e:	ldr	r3, [sp, #176]	; 0xb0
    1790:	str	r3, [sp, #96]	; 0x60
    1792:	ldrb.w	r3, [sp, #180]	; 0xb4
    1796:	strb.w	r3, [sp, #100]	; 0x64
    179a:	bl	8cc2 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    179e:	add	r0, sp, #104	; 0x68
    17a0:	bl	eac <FsBaseFile::isOpen() const>
    17a4:	mov	r8, r0
    while(f2=f1.openNextFile())
    17a6:	add	r0, sp, #168	; 0xa8
    17a8:	bl	f44 <FsFile::~FsFile()>
    17ac:	cmp.w	r8, #0
    17b0:	bne.n	17d0 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    17b2:	mov	r2, r5
    17b4:	mov	r1, r4
    17b6:	mov	r0, r7
    17b8:	bl	1000 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    17bc:	add	r0, sp, #88	; 0x58
    17be:	bl	f44 <FsFile::~FsFile()>
}
    17c2:	add	r0, sp, #8
    17c4:	bl	f44 <FsFile::~FsFile()>
    17c8:	add.w	sp, sp, #764	; 0x2fc
    17cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    17d0:	add.w	r8, sp, #504	; 0x1f8
    17d4:	mov.w	r2, #256	; 0x100
    17d8:	add	r0, sp, #104	; 0x68
    17da:	mov	r1, r8
    17dc:	bl	cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    17e0:	mov	r2, r9
    17e2:	mov.w	r1, #256	; 0x100
    17e6:	mov	r3, r5
    17e8:	add	r0, sp, #248	; 0xf8
    17ea:	str.w	r8, [sp]
    17ee:	bl	ee14 <sniprintf>
    return BaseFile::isDir();
    17f2:	add	r0, sp, #104	; 0x68
    17f4:	bl	e8a <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17f8:	add	r2, sp, #248	; 0xf8
    17fa:	mov	r1, r4
    17fc:	cbz	r0, 1806 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17fe:	mov	r0, r6
    1800:	bl	1744 <MTPStorage_SD::removeFile(unsigned long, char*)>
    1804:	b.n	1776 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    1806:	mov	r0, r7
    1808:	bl	f9c <mSD_Base::sd_remove(unsigned long, char const*)>
    180c:	b.n	1776 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    180e:	mov	r2, r5
    1810:	mov	r1, r4
    1812:	mov	r0, r7
    1814:	bl	f9c <mSD_Base::sd_remove(unsigned long, char const*)>
    1818:	b.n	17c2 <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    181a:	nop
    181c:	.word	0x20001127

00001820 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    1820:	push	{r4, r5, r6, r7, lr}
    1822:	subw	sp, sp, #1380	; 0x564
    1826:	mov	r4, r0
    1828:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    182a:	mov.w	r3, #256	; 0x100
    182e:	add	r2, sp, #280	; 0x118
    1830:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    1834:	mov	r2, r5
    1836:	mov	r1, r4
    1838:	add	r0, sp, #536	; 0x218
    183a:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    183e:	add	r2, sp, #280	; 0x118
    1840:	ldrh.w	r1, [sp, #550]	; 0x226
    1844:	mov	r0, r4
    1846:	bl	1744 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    184a:	movs	r3, #0
    WriteIndexRecord(object, r);
    184c:	add	r2, sp, #536	; 0x218
    184e:	mov	r1, r5
    1850:	mov	r0, r4
    r.name[0]=0;
    1852:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    1856:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    185a:	ldr	r2, [sp, #536]	; 0x218
    185c:	mov	r1, r4
    185e:	add	r0, sp, #816	; 0x330
    1860:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1864:	ldr	r6, [sp, #820]	; 0x334
    1866:	cmp	r5, r6
    1868:	bne.n	187e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    186a:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    186c:	add	r2, sp, #816	; 0x330
    186e:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    1870:	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(is, x);
    1872:	mov	r0, r4
    1874:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1878:	addw	sp, sp, #1380	; 0x564
    187c:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    187e:	mov	r2, r6
    1880:	mov	r1, r4
    1882:	add.w	r0, sp, #1096	; 0x448
    1886:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    188a:	ldr.w	r7, [sp, #1104]	; 0x450
    188e:	cmp	r5, r7
    1890:	bne.n	18a0 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    1892:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1894:	add.w	r2, sp, #1096	; 0x448
    1898:	mov	r1, r6
      x.sibling = r.sibling;
    189a:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    189e:	b.n	1872 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    18a0:	mov	r2, r7
    18a2:	mov	r1, r4
    18a4:	mov	r0, sp
    18a6:	mov	r6, r7
    18a8:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    18ac:	mov.w	r2, #280	; 0x118
    18b0:	mov	r1, sp
    18b2:	add.w	r0, sp, #1096	; 0x448
    18b6:	bl	a79c <memcpy>
    18ba:	b.n	188a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

000018bc <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    18bc:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    18be:	adds	r3, r1, #1
    18c0:	beq.n	18c6 <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    18c2:	bl	1820 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    18c6:	movs	r0, #1
    18c8:	pop	{r3, pc}

000018ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    18ca:	push	{r4, r5, r6, lr}
    18cc:	add.w	r1, r0, r1, lsl #2
    18d0:	sub.w	sp, sp, #2208	; 0x8a0
    18d4:	mov	r5, r0
    18d6:	mov	r6, r3
    18d8:	ldr	r1, [r1, #84]	; 0x54
    18da:	movs	r3, #0
    18dc:	mov	r0, sp
    18de:	bl	8ecc <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,FILE_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18e2:	add	r0, sp, #16
    18e4:	bl	eac <FsBaseFile::isOpen() const>
    18e8:	mov	r4, r0
    18ea:	cbnz	r0, 1902 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18ec:	movw	r0, #690	; 0x2b2
    18f0:	bl	d24 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18f4:	mov	r0, sp
    18f6:	bl	f44 <FsFile::~FsFile()>
    18fa:	mov	r0, r4
    18fc:	add.w	sp, sp, #2208	; 0x8a0
    1900:	pop	{r4, r5, r6, pc}
    1902:	add.w	r5, r5, r6, lsl #2
    1906:	movw	r3, #514	; 0x202
    190a:	ldr.w	r2, [sp, #2224]	; 0x8b0
    190e:	add	r0, sp, #80	; 0x50
    1910:	ldr	r1, [r5, #84]	; 0x54
    1912:	bl	8ecc <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    1916:	add	r0, sp, #96	; 0x60
    1918:	bl	eac <FsBaseFile::isOpen() const>
    191c:	mov	r4, r0
    191e:	cbnz	r0, 1936 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    1920:	add	r0, sp, #16
    1922:	bl	8c98 <FsBaseFile::close()>
    1926:	movw	r0, #693	; 0x2b5
    192a:	bl	d24 <dbgPrint(unsigned short)>
}
    192e:	add	r0, sp, #80	; 0x50
    1930:	bl	f44 <FsFile::~FsFile()>
    1934:	b.n	18f4 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    1936:	mov.w	r5, #4294967295
    return BaseFile::available();
    193a:	add	r0, sp, #16
    193c:	bl	e26 <FsBaseFile::available() const>
  while(f1.available()>0)
    1940:	cmp	r0, #0
    1942:	ble.n	1964 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    1944:	mov.w	r2, #2048	; 0x800
    1948:	add	r1, sp, #160	; 0xa0
    194a:	add	r0, sp, #16
    194c:	bl	ee0 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1950:	subs	r5, r0, #0
    1952:	blt.n	1964 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1954:	mov	r2, r5
    1956:	add	r1, sp, #160	; 0xa0
    1958:	add	r0, sp, #96	; 0x60
    195a:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    195e:	cmp.w	r5, #2048	; 0x800
    1962:	bge.n	193a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1964:	add	r0, sp, #16
    1966:	bl	8c98 <FsBaseFile::close()>
  f2.close();
    196a:	add	r0, sp, #96	; 0x60
    196c:	bl	8c98 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1970:	cmp	r5, #0
    1972:	bge.n	192e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1974:	movw	r0, #705	; 0x2c1
    1978:	movs	r4, #0
    197a:	bl	d24 <dbgPrint(unsigned short)>
    197e:	b.n	192e <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001980 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1980:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1984:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1988:	cmp.w	r3, #4294967295
    198c:	ite	ne
    198e:	movne	r8, r3
    1990:	moveq	r8, r2
  { 
    1992:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1994:	mov	r2, r1
  { 
    1996:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1998:	mov	r1, r0
    199a:	add	r0, sp, #520	; 0x208
    199c:	add	r6, sp, #544	; 0x220
    199e:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    19a2:	mov	r2, r8
    19a4:	mov	r1, r4
    19a6:	add	r0, sp, #800	; 0x320
    19a8:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    19ac:	ldrb.w	r5, [sp, #532]	; 0x214
    19b0:	cbz	r5, 19f6 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    19b2:	ldrh.w	r1, [sp, #534]	; 0x216
    19b6:	mov	r2, r7
    19b8:	mov	r0, r4
    19ba:	adds	r1, #1
    19bc:	bl	1592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19c0:	ldrb.w	r3, [sp, #532]	; 0x214
    19c4:	ldr	r2, [r4, #0]
    19c6:	mov	r0, r4
    19c8:	subs	r3, #0
    19ca:	str	r6, [sp, #0]
    19cc:	ldrh.w	r1, [sp, #814]	; 0x32e
    19d0:	ldr	r5, [r2, #44]	; 0x2c
    19d2:	it	ne
    19d4:	movne	r3, #1
    19d6:	mov	r2, r8
    19d8:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    19da:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19dc:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    19de:	ldrh.w	r2, [sp, #814]	; 0x32e
    19e2:	ldr	r6, [r3, #84]	; 0x54
    19e4:	mov	r1, r7
    19e6:	mov	r3, r0
    19e8:	mov	r0, r4
    19ea:	blx	r6
  }
    19ec:	mov	r0, r5
    19ee:	add.w	sp, sp, #1360	; 0x550
    19f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19f6:	mov.w	r2, #256	; 0x100
    19fa:	mov	r1, r6
    19fc:	add.w	r0, sp, #1104	; 0x450
    1a00:	bl	f0f6 <strlcpy>
      r.store = p2.store;
    1a04:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    1a08:	add.w	r1, sp, #1080	; 0x438
    1a0c:	mov	r0, r4
      r.store = p2.store;
    1a0e:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    1a12:	ldr	r3, [sp, #804]	; 0x324
      r.child = 0;
    1a14:	str.w	r5, [sp, #1084]	; 0x43c
      r.sibling = p2.child;
    1a18:	str.w	r3, [sp, #1088]	; 0x440
      r.isdir = 0;
    1a1c:	strh.w	r5, [sp, #1092]	; 0x444
      r.parent = newParent;
    1a20:	str.w	r8, [sp, #1080]	; 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    1a24:	bl	110e <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1a28:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    1a2a:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1a2c:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    1a2e:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1a30:	mov	r0, r4
    1a32:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a36:	add	r2, sp, #8
    1a38:	mov	r1, r7
    1a3a:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a3e:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a40:	mov	r0, r4
    1a42:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1a46:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a48:	mov	r2, r7
    1a4a:	mov	r1, r5
    1a4c:	mov.w	r3, #256	; 0x100
    1a50:	mov	r0, r4
    1a52:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a56:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a58:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a5a:	mov	r1, r6
    1a5c:	adds	r0, r4, #4
    1a5e:	str	r7, [sp, #0]
    1a60:	bl	18ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a64:	b.n	19ec <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a66 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a66:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a6a:	subw	sp, sp, #1644	; 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a6e:	cmp.w	r3, #4294967295
    1a72:	ite	ne
    1a74:	movne	r7, r3
    1a76:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a78:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a7a:	mov	r2, r1
    1a7c:	mov	r1, r0
    1a7e:	add	r0, sp, #520	; 0x208
    1a80:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a84:	mov	r2, r7
    1a86:	mov	r1, r4
    1a88:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a8a:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a8e:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a90:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a94:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a96:	cbnz	r6, 1aae <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a98:	mov	r0, r4
    1a9a:	add	r2, sp, #800	; 0x320
    1a9c:	mov	r1, r7
  p2.child=iy;
    1a9e:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1aa0:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1aa4:	movs	r0, #1
    1aa6:	addw	sp, sp, #1644	; 0x66c
    1aaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1aae:	mov	r2, r6
    1ab0:	mov	r1, r4
    1ab2:	add.w	r0, sp, #1080	; 0x438
    1ab6:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1aba:	mov.w	r2, #280	; 0x118
    1abe:	add.w	r1, sp, #1080	; 0x438
    1ac2:	add.w	r0, sp, #1360	; 0x550
    1ac6:	bl	a79c <memcpy>
    py.store = p2.store;
    1aca:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1ace:	add.w	r1, sp, #1360	; 0x550
    1ad2:	mov	r0, r4
    py.store = p2.store;
    1ad4:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1ad8:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1adc:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1ae0:	bl	110e <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1ae4:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1ae6:	mov.w	r3, #256	; 0x100
    1aea:	add	r2, sp, #8
    1aec:	mov	r1, r6
    1aee:	mov	r0, r4
    1af0:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1af4:	add	r2, sp, #264	; 0x108
    1af6:	mov.w	r3, #256	; 0x100
    1afa:	mov	r1, r5
    1afc:	mov	r0, r4
    1afe:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1b02:	ldrb.w	r1, [sp, #1372]	; 0x55c
      sd_mkdir(py.store,newfilename);
    1b06:	adds	r0, r4, #4
    1b08:	ldrh.w	r3, [sp, #1374]	; 0x55e
    if(py.isdir) 
    1b0c:	add	r2, sp, #264	; 0x108
    1b0e:	cbz	r1, 1b38 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    1b10:	mov	r1, r3
    1b12:	bl	f5c <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1b16:	mov	r2, r6
    1b18:	mov	r1, r8
    1b1a:	mov	r0, r4
    1b1c:	bl	1592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1b20:	ldr	r3, [r4, #0]
    1b22:	ldrh.w	r2, [sp, #814]	; 0x32e
    1b26:	mov	r1, r6
    1b28:	ldr.w	r9, [r3, #84]	; 0x54
    1b2c:	mov	r0, r4
    1b2e:	mov	r3, r5
    1b30:	blx	r9
    ix = px.sibling;
    1b32:	ldr.w	r6, [sp, #1088]	; 0x440
    1b36:	b.n	1a96 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1b38:	str	r2, [sp, #0]
    1b3a:	mov	r1, r8
    1b3c:	add	r2, sp, #8
    1b3e:	bl	18ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b42:	b.n	1b32 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001b44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b44:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b48:	ldr.w	r8, [sp, #32]
    1b4c:	mov	r6, r1
    1b4e:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b50:	mov	r1, r3
    1b52:	mov	r2, r8
    1b54:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b56:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b58:	bl	f5c <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b5c:	ldr	r3, [sp, #4]
    1b5e:	mov	r4, r0
    1b60:	cbz	r0, 1b76 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b62:	mov	r2, r7
    1b64:	mov	r1, r6
    1b66:	mov	r0, r5
    1b68:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b6c:	add	sp, #8
    1b6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b72:	b.w	1b88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b76:	movw	r0, #715	; 0x2cb
    1b7a:	bl	d24 <dbgPrint(unsigned short)>
}
    1b7e:	mov	r0, r4
    1b80:	add	sp, #8
    1b82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b8c:	mov	r6, r1
    1b8e:	sub.w	sp, sp, #680	; 0x2a8
    1b92:	add.w	r1, r0, r1, lsl #2
    1b96:	mov	r5, r0
    1b98:	mov	r8, r3
    1b9a:	add	r0, sp, #8
    1b9c:	movs	r3, #0
    1b9e:	ldr	r1, [r1, #84]	; 0x54
    1ba0:	mov	r7, r2
    1ba2:	bl	8ecc <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1ba6:	add	r0, sp, #24
    1ba8:	bl	eac <FsBaseFile::isOpen() const>
    1bac:	mov	r4, r0
    1bae:	cmp	r0, #0
    1bb0:	beq.n	1c66 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1bb2:	ldr	r4, [pc, #264]	; (1cbc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1bb4:	mov.w	r2, #256	; 0x100
    1bb8:	mov	r1, r7
    1bba:	add	r0, sp, #168	; 0xa8
    1bbc:	bl	f0f6 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1bc0:	add	r0, sp, #168	; 0xa8
    1bc2:	bl	f310 <strlen>
    1bc6:	add	r3, sp, #168	; 0xa8
    1bc8:	add	r0, r3
    1bca:	ldrb.w	r3, [r0, #-1]
    1bce:	cmp	r3, #47	; 0x2f
    1bd0:	beq.n	1bde <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1bd2:	mov.w	r2, #256	; 0x100
    1bd6:	mov	r1, r4
    1bd8:	add	r0, sp, #168	; 0xa8
    1bda:	bl	f0b0 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1bde:	mov.w	r2, #256	; 0x100
    1be2:	ldr	r1, [sp, #704]	; 0x2c0
    1be4:	add	r0, sp, #424	; 0x1a8
    1be6:	bl	f0f6 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bea:	add	r0, sp, #424	; 0x1a8
    1bec:	bl	f310 <strlen>
    1bf0:	add	r3, sp, #424	; 0x1a8
    1bf2:	add	r0, r3
    1bf4:	ldrb.w	r3, [r0, #-1]
    1bf8:	cmp	r3, #47	; 0x2f
    1bfa:	beq.n	1c08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bfc:	mov.w	r2, #256	; 0x100
    1c00:	mov	r1, r4
    1c02:	add	r0, sp, #424	; 0x1a8
    1c04:	bl	f0b0 <strlcat>
    FsFile tmpFile;
    1c08:	add	r0, sp, #88	; 0x58
    1c0a:	bl	f28 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1c0e:	movs	r2, #0
    1c10:	add	r1, sp, #24
    1c12:	add	r0, sp, #104	; 0x68
    1c14:	bl	8d98 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1c18:	add	r0, sp, #104	; 0x68
    1c1a:	bl	eac <FsBaseFile::isOpen() const>
    1c1e:	cmp	r0, #0
    1c20:	beq.n	1ca6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1c22:	mov.w	r2, #256	; 0x100
    1c26:	add	r1, sp, #168	; 0xa8
    1c28:	add	r0, sp, #104	; 0x68
    1c2a:	bl	cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1c2e:	mov.w	r2, #256	; 0x100
    1c32:	add	r1, sp, #424	; 0x1a8
    1c34:	add	r0, sp, #104	; 0x68
    1c36:	bl	cc2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c3a:	add	r0, sp, #104	; 0x68
    1c3c:	bl	e8a <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c40:	add	r3, sp, #424	; 0x1a8
    1c42:	add	r2, sp, #168	; 0xa8
    1c44:	mov	r1, r6
    1c46:	str	r3, [sp, #0]
    1c48:	mov	r3, r8
        if(f2.isDirectory())
    1c4a:	cbz	r0, 1c7e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c4c:	mov	r0, r5
    1c4e:	bl	1b44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c52:	cbnz	r0, 1c9e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c54:	movw	r0, #738	; 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c58:	bl	d24 <dbgPrint(unsigned short)>
    }
    1c5c:	add	r0, sp, #88	; 0x58
    1c5e:	movs	r4, #0
    1c60:	bl	f44 <FsFile::~FsFile()>
    1c64:	b.n	1c6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c66:	movw	r0, #718	; 0x2ce
    1c6a:	bl	d24 <dbgPrint(unsigned short)>
}
    1c6e:	add	r0, sp, #8
    1c70:	bl	f44 <FsFile::~FsFile()>
    1c74:	mov	r0, r4
    1c76:	add.w	sp, sp, #680	; 0x2a8
    1c7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c7e:	mov	r0, r5
    1c80:	bl	18ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c84:	cbnz	r0, 1c8c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c86:	movw	r0, #742	; 0x2e6
    1c8a:	b.n	1c58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c8c:	add	r2, sp, #168	; 0xa8
    1c8e:	mov	r1, r6
    1c90:	mov	r0, r5
    1c92:	bl	f9c <mSD_Base::sd_remove(unsigned long, char const*)>
    1c96:	cbnz	r0, 1c9e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c98:	movw	r0, #743	; 0x2e7
    1c9c:	b.n	1c58 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c9e:	add	r0, sp, #88	; 0x58
    1ca0:	bl	f44 <FsFile::~FsFile()>
    1ca4:	b.n	1bb4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1ca6:	add	r0, sp, #88	; 0x58
    1ca8:	bl	f44 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1cac:	mov	r2, r7
    1cae:	mov	r1, r6
    1cb0:	mov	r0, r5
    1cb2:	bl	1000 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1cb6:	mov	r4, r0
    1cb8:	b.n	1c6e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1cba:	nop
    1cbc:	.word	0x20000dbb

00001cc0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1cc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cc4:	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1cc8:	cmp.w	r3, #4294967295
    1ccc:	ite	ne
    1cce:	movne	r7, r3
    1cd0:	moveq	r7, r2
  { 
    1cd2:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1cd4:	mov	r2, r1
  { 
    1cd6:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1cd8:	mov	r1, r0
    1cda:	add	r0, sp, #800	; 0x320
    1cdc:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1ce0:	mov	r2, r7
    1ce2:	mov	r1, r4
    1ce4:	add.w	r0, sp, #1080	; 0x438
    1ce8:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cec:	ldr	r2, [sp, #800]	; 0x320
    1cee:	mov	r1, r4
    1cf0:	add.w	r0, sp, #1360	; 0x550
    1cf4:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1cf8:	ldrb.w	r3, [sp, #812]	; 0x32c
    1cfc:	cbz	r3, 1d1a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cfe:	ldrb.w	r3, [sp, #813]	; 0x32d
    1d02:	cbnz	r3, 1d1a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1d04:	mov	r2, r5
    1d06:	ldrh.w	r1, [sp, #814]	; 0x32e
    1d0a:	mov	r0, r4
    1d0c:	bl	1592 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1d10:	add	r2, sp, #800	; 0x320
    1d12:	mov	r1, r5
    1d14:	mov	r0, r4
    1d16:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1d1a:	mov.w	r2, #280	; 0x118
    1d1e:	add	r1, sp, #800	; 0x320
    1d20:	add.w	r0, sp, #1640	; 0x668
    1d24:	bl	a79c <memcpy>
    Record p2o = p2;
    1d28:	mov.w	r2, #280	; 0x118
    1d2c:	add.w	r1, sp, #1080	; 0x438
    1d30:	add.w	r0, sp, #1920	; 0x780
    1d34:	bl	a79c <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d38:	mov.w	r3, #256	; 0x100
    1d3c:	add	r2, sp, #288	; 0x120
    1d3e:	mov	r1, r5
    1d40:	mov	r0, r4
    1d42:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d46:	ldr.w	r8, [sp, #1364]	; 0x554
    1d4a:	cmp	r8, r5
    1d4c:	bne.n	1dc4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d4e:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d50:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d54:	add.w	r2, sp, #1360	; 0x550
    1d58:	ldr	r1, [sp, #800]	; 0x320
    1d5a:	mov	r0, r4
        p3.child = p1.sibling;
    1d5c:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d60:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d64:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d68:	add	r2, sp, #800	; 0x320
    1d6a:	mov	r1, r5
    1d6c:	mov	r0, r4
      p1.store = p2.store;
    1d6e:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d72:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d76:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d78:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d7a:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d7e:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d82:	add.w	r2, sp, #1080	; 0x438
    1d86:	mov	r1, r7
    1d88:	mov	r0, r4
    1d8a:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d8e:	mov.w	r3, #256	; 0x100
    1d92:	mov	r1, r5
    1d94:	add	r2, sp, #544	; 0x220
    1d96:	mov	r0, r4
    1d98:	bl	1354 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d9c:	ldrh.w	r1, [sp, #1654]	; 0x676
    1da0:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1da4:	cmp	r1, r3
    1da6:	bne.n	1e54 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1da8:	add.w	r3, r4, r1, lsl #2
    1dac:	add	r2, sp, #544	; 0x220
    1dae:	add	r1, sp, #288	; 0x120
    1db0:	ldr	r0, [r3, #88]	; 0x58
    1db2:	bl	dc6 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1db6:	cbz	r0, 1e24 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1db8:	movs	r6, #1
  }
    1dba:	mov	r0, r6
    1dbc:	addw	sp, sp, #2764	; 0xacc
    1dc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1dc4:	mov	r2, r8
    1dc6:	mov	r1, r4
    1dc8:	add	r0, sp, #8
    1dca:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1dce:	mov.w	r2, #280	; 0x118
    1dd2:	add	r1, sp, #8
    1dd4:	add.w	r0, sp, #2480	; 0x9b0
    1dd8:	bl	a79c <memcpy>
        pxo = px;
    1ddc:	mov.w	r2, #280	; 0x118
    1de0:	add.w	r1, sp, #2480	; 0x9b0
    1de4:	addw	r0, sp, #2200	; 0x898
    1de8:	bl	a79c <memcpy>
        while(handle != px.sibling)
    1dec:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1df0:	cmp	r6, r5
    1df2:	bne.n	1e08 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1df4:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1df6:	add.w	r2, sp, #2480	; 0x9b0
    1dfa:	mov	r1, r8
    1dfc:	mov	r0, r4
        px.sibling = p1.sibling;
    1dfe:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1e02:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1e06:	b.n	1d64 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1e08:	mov	r2, r6
    1e0a:	mov	r1, r4
    1e0c:	add	r0, sp, #8
    1e0e:	mov	r8, r6
    1e10:	bl	118c <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1e14:	mov.w	r2, #280	; 0x118
    1e18:	add	r1, sp, #8
    1e1a:	add.w	r0, sp, #2480	; 0x9b0
    1e1e:	bl	a79c <memcpy>
          pxo = px;
    1e22:	b.n	1ddc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e24:	movw	r0, #579	; 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e28:	bl	d24 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1e2c:	addw	r2, sp, #2200	; 0x898
    1e30:	mov	r1, r8
    1e32:	mov	r0, r4
    1e34:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e38:	add.w	r2, sp, #1640	; 0x668
    1e3c:	mov	r1, r5
    1e3e:	mov	r0, r4
    1e40:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e44:	add.w	r2, sp, #1920	; 0x780
    1e48:	mov	r1, r7
    1e4a:	mov	r0, r4
    return false;
    1e4c:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e4e:	bl	10e2 <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e52:	b.n	1dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e54:	ldrb.w	r2, [sp, #1652]	; 0x674
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e58:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1e5c:	cbnz	r2, 1e82 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e5e:	add	r2, sp, #544	; 0x220
    1e60:	mov	r0, r9
    1e62:	str	r2, [sp, #0]
    1e64:	add	r2, sp, #288	; 0x120
    1e66:	bl	18ca <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e6a:	mov	r6, r0
    1e6c:	cbz	r0, 1e7c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e6e:	add	r2, sp, #288	; 0x120
    1e70:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e74:	mov	r0, r9
    1e76:	bl	f9c <mSD_Base::sd_remove(unsigned long, char const*)>
    1e7a:	b.n	1dba <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e7c:	movw	r0, #583	; 0x247
    1e80:	b.n	1e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e82:	add	r2, sp, #544	; 0x220
    1e84:	mov	r0, r9
    1e86:	str	r2, [sp, #0]
    1e88:	add	r2, sp, #288	; 0x120
    1e8a:	bl	1b44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e8e:	cmp	r0, #0
    1e90:	bne.n	1db8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e92:	movw	r0, #587	; 0x24b
    1e96:	b.n	1e28 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e98 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e98:	push	{r4, r5, r6, lr}
    1e9a:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e9e:	ldr	r4, [pc, #60]	; (1edc <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1ea0:	ldr	r0, [r5, #88]	; 0x58
    1ea2:	bl	d92 <FsVolume::clusterCount() const>
    1ea6:	mov	r1, r0
    1ea8:	mov	r0, r4
    1eaa:	bl	ce8 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1eae:	ldr	r0, [r5, #88]	; 0x58
    1eb0:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1eb4:	mov	r1, r0
    1eb6:	mov	r0, r4
    1eb8:	bl	ce8 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1ebc:	ldr	r6, [r5, #88]	; 0x58
    1ebe:	mov	r0, r6
    1ec0:	bl	d92 <FsVolume::clusterCount() const>
    1ec4:	mov	r4, r0
    1ec6:	mov	r0, r6
    1ec8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1ecc:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1ece:	ldr	r0, [r5, #88]	; 0x58
    1ed0:	bl	d74 <FsVolume::bytesPerCluster() const>
    1ed4:	umull	r0, r1, r4, r0
    1ed8:	pop	{r4, r5, r6, pc}
    1eda:	nop
    1edc:	.word	0x20001db8

00001ee0 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1ee0:	push	{r4, lr}
    1ee2:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1ee4:	bl	cc56 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1ee8:	mov	r0, r4
    1eea:	ldmia.w	sp!, {r4, lr}
    1eee:	b.w	cc68 <Print::println()>

00001ef2 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1ef2:	push	{r4, lr}
    1ef4:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1ef6:	movs	r3, #0
    1ef8:	movs	r2, #10
    1efa:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1efe:	mov	r0, r4
    1f00:	ldmia.w	sp!, {r4, lr}
    1f04:	b.w	cc68 <Print::println()>

00001f08 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1f08:	push	{r0, r1, r4, lr}
    1f0a:	mov	r4, r0
    1f0c:	cbz	r1, 1f28 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1f0e:	mov	r0, r1
    1f10:	str	r1, [sp, #4]
    1f12:	bl	f310 <strlen>
    1f16:	ldr	r3, [r4, #0]
    1f18:	mov	r2, r0
    1f1a:	ldr	r1, [sp, #4]
    1f1c:	ldr	r3, [r3, #4]
    1f1e:	mov	r0, r4
    1f20:	add	sp, #8
    1f22:	ldmia.w	sp!, {r4, lr}
    1f26:	bx	r3
    1f28:	add	sp, #8
    1f2a:	pop	{r4, pc}

00001f2c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1f2c:	b.w	1f08 <Print::write(char const*) [clone .isra.0]>

00001f30 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1f30:	push	{r4, lr}
    1f32:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f34:	bl	1f08 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f38:	mov	r0, r4
    1f3a:	ldmia.w	sp!, {r4, lr}
    1f3e:	b.w	cc68 <Print::println()>
	...

00001f44 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f44:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f46:	bl	ac84 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f4a:	cmp	r0, #0
    1f4c:	beq.n	1f46 <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f4e:	ldr	r4, [pc, #36]	; (1f74 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f50:	movw	r3, #5000	; 0x1388
    1f54:	ldr	r5, [pc, #32]	; (1f78 <menuGetLine()+0x34>)
    1f56:	movs	r1, #13
    1f58:	mov	r2, r4
    1f5a:	str	r3, [r5, #8]
    1f5c:	mov	r0, r5
    1f5e:	movs	r3, #40	; 0x28
    1f60:	bl	cbb0 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f64:	movs	r3, #0
  Serial.println(buffer);
    1f66:	mov	r1, r4
  buffer[count]=0;
    1f68:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f6a:	mov	r0, r5
    1f6c:	bl	1f30 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f70:	mov	r0, r4
    1f72:	pop	{r3, r4, r5, pc}
    1f74:	.word	0x2002159a
    1f78:	.word	0x20001db8

00001f7c <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f7c:	push	{r0, r1, r4, lr}
    1f7e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f80:	bl	1f44 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f84:	add	r2, sp, #4
    1f86:	ldr	r1, [pc, #12]	; (1f94 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f88:	bl	eebc <siscanf>
    1f8c:	ldr	r3, [sp, #4]
    1f8e:	str	r3, [r4, #0]
  return 1;
}
    1f90:	add	sp, #8
    1f92:	pop	{r4, pc}
    1f94:	.word	0x200014c7

00001f98 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f98:	push	{r0, r1, r4, lr}
    1f9a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f9c:	bl	1f44 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1fa0:	add	r2, sp, #4
    1fa2:	ldr	r1, [pc, #12]	; (1fb0 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1fa4:	bl	eebc <siscanf>
    1fa8:	ldr	r3, [sp, #4]
    1faa:	strh	r3, [r4, #0]
}
    1fac:	add	sp, #8
    1fae:	pop	{r4, pc}
    1fb0:	.word	0x200014c7

00001fb4 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1fb4:	push	{r4, lr}
    1fb6:	sub	sp, #32
    1fb8:	bl	ac84 <usb_serial_available>

    while(!Serial.available()) ;
    1fbc:	cmp	r0, #0
    1fbe:	beq.n	1fb8 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1fc0:	bl	acf8 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1fc4:	uxtb	r0, r0
    if(ch=='d') // set date
    1fc6:	cmp	r0, #100	; 0x64
    1fc8:	bne.n	1ff6 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1fca:	bl	1f44 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1fce:	add	r3, sp, #28
    1fd0:	add	r2, sp, #20
    1fd2:	ldr	r1, [pc, #324]	; (2118 <menu3()+0x164>)
    1fd4:	str	r3, [sp, #8]
    1fd6:	add.w	r3, sp, #19
    1fda:	str	r3, [sp, #4]
    1fdc:	add	r3, sp, #24
    1fde:	str	r3, [sp, #0]
    1fe0:	add.w	r3, sp, #18
    1fe4:	bl	eebc <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1fe8:	ldr	r0, [sp, #20]
    1fea:	ldrd	r1, r2, [sp, #24]
    1fee:	bl	3ac0 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1ff2:	add	sp, #32
    1ff4:	pop	{r4, pc}
    else if(ch=='t') // set time
    1ff6:	cmp	r0, #52	; 0x34
    1ff8:	bhi.n	200e <menu3()+0x5a>
    1ffa:	cmp	r0, #48	; 0x30
    1ffc:	bls.n	1ff2 <menu3()+0x3e>
    1ffe:	subs	r0, #50	; 0x32
    2000:	cmp	r0, #2
    2002:	bhi.w	2108 <menu3()+0x154>
    2006:	tbb	[pc, r0]
    200a:	.short	0x8381
    200c:	.byte	0x85
    200d:	.byte	0x00
    200e:	subs	r0, #97	; 0x61
    2010:	uxtb	r3, r0
    2012:	cmp	r3, #22
    2014:	bhi.n	1ff2 <menu3()+0x3e>
    2016:	cmp	r0, #22
    2018:	bhi.n	1ff2 <menu3()+0x3e>
    201a:	add	r3, pc, #4	; (adr r3, 2020 <menu3()+0x6c>)
    201c:	ldr.w	pc, [r3, r0, lsl #2]
    2020:	.word	0x000020a7
    2024:	.word	0x00001ff3
    2028:	.word	0x000020e3
    202c:	.word	0x00001ff3
    2030:	.word	0x00001ff3
    2034:	.word	0x000020bb
    2038:	.word	0x000020ef
    203c:	.word	0x00001ff3
    2040:	.word	0x00001ff3
    2044:	.word	0x00001ff3
    2048:	.word	0x00001ff3
    204c:	.word	0x00001ff3
    2050:	.word	0x00001ff3
    2054:	.word	0x00001ff3
    2058:	.word	0x000020b3
    205c:	.word	0x00001ff3
    2060:	.word	0x00001ff3
    2064:	.word	0x000020b7
    2068:	.word	0x000020cf
    206c:	.word	0x0000207d
    2070:	.word	0x00001ff3
    2074:	.word	0x00001ff3
    2078:	.word	0x00002105
{ char *buffer=menuGetLine();
    207c:	bl	1f44 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2080:	add	r3, sp, #28
    2082:	add	r2, sp, #20
    2084:	ldr	r1, [pc, #144]	; (2118 <menu3()+0x164>)
    2086:	str	r3, [sp, #8]
    2088:	add.w	r3, sp, #19
    208c:	str	r3, [sp, #4]
    208e:	add	r3, sp, #24
    2090:	str	r3, [sp, #0]
    2092:	add.w	r3, sp, #18
    2096:	bl	eebc <siscanf>
      rtcSetTime(hour,minutes,seconds);
    209a:	ldr	r0, [sp, #20]
    209c:	ldrd	r1, r2, [sp, #24]
    20a0:	bl	3ae4 <rtcSetTime(int, int, int)>
    20a4:	b.n	1ff2 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    20a6:	ldr	r0, [pc, #116]	; (211c <menu3()+0x168>)
}
    20a8:	add	sp, #32
    20aa:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    20ae:	b.w	1f7c <menuGetInt32(long*) [clone .isra.0]>
    20b2:	ldr	r0, [pc, #108]	; (2120 <menu3()+0x16c>)
    20b4:	b.n	20a8 <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    20b6:	ldr	r0, [pc, #108]	; (2124 <menu3()+0x170>)
    20b8:	b.n	20a8 <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    20ba:	ldr	r4, [pc, #108]	; (2128 <menu3()+0x174>)
    20bc:	mov	r0, r4
    20be:	bl	1f7c <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    20c2:	ldr	r0, [r4, #0]
}
    20c4:	add	sp, #32
    20c6:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    20ca:	b.w	c4c <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    20ce:	ldr	r4, [pc, #92]	; (212c <menu3()+0x178>)
    20d0:	mov	r0, r4
    20d2:	bl	1f98 <menuGetInt16(short*) [clone .isra.0]>
    20d6:	ldrh	r3, [r4, #0]
    20d8:	lsls	r3, r3, #16
    20da:	bpl.n	1ff2 <menu3()+0x3e>
    20dc:	movs	r3, #0
    20de:	strh	r3, [r4, #0]
    20e0:	b.n	1ff2 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    20e2:	ldr	r0, [pc, #76]	; (2130 <menu3()+0x17c>)
}
    20e4:	add	sp, #32
    20e6:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    20ea:	b.w	1f98 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    20ee:	ldr	r4, [pc, #68]	; (2134 <menu3()+0x180>)
    20f0:	mov	r0, r4
    20f2:	bl	1f98 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    20f6:	ldrh	r0, [r4, #0]
    20f8:	sxtb	r0, r0
}
    20fa:	add	sp, #32
    20fc:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    2100:	b.w	36fc <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    2104:	ldr	r0, [pc, #48]	; (2138 <menu3()+0x184>)
    2106:	b.n	20e4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    2108:	ldr	r0, [pc, #48]	; (213c <menu3()+0x188>)
    210a:	b.n	20e4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    210c:	ldr	r0, [pc, #48]	; (2140 <menu3()+0x18c>)
    210e:	b.n	20e4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    2110:	ldr	r0, [pc, #48]	; (2144 <menu3()+0x190>)
    2112:	b.n	20e4 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    2114:	ldr	r0, [pc, #48]	; (2148 <menu3()+0x194>)
    2116:	b.n	20e4 <menu3()+0x130>
    2118:	.word	0x20001015
    211c:	.word	0x20002378
    2120:	.word	0x2000237c
    2124:	.word	0x20021390
    2128:	.word	0x2000235c
    212c:	.word	0x2002147a
    2130:	.word	0x200213d6
    2134:	.word	0x20002384
    2138:	.word	0x200213ac
    213c:	.word	0x20021388
    2140:	.word	0x2000236c
    2144:	.word	0x20002370
    2148:	.word	0x20002374

0000214c <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    214c:	lsls	r2, r1, #1
    214e:	movs	r1, #0
    2150:	b.w	c2f8 <eeprom_write_block>

00002154 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2154:	lsls	r2, r1, #1
    2156:	movs	r1, #0
    2158:	b.w	c048 <eeprom_read_block>

0000215c <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    215c:	ldr	r3, [pc, #96]	; (21c0 <saveParameters()+0x64>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    215e:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    2162:	ldr	r0, [pc, #96]	; (21c4 <saveParameters()+0x68>)
  store[12] = again;
  store[13] = dgain;
  store[14] = 0;
  store[15] = 0;

  storeConfig(store, 16);
    2164:	movs	r1, #16
  store[1]  = t_acq;
    2166:	ldr	r3, [r3, #0]
    2168:	strh	r3, [r0, #2]
  store[2]  = t_on;
    216a:	ldr	r3, [pc, #92]	; (21c8 <saveParameters()+0x6c>)
    216c:	ldr	r3, [r3, #0]
    216e:	strh	r3, [r0, #4]
  store[3]  = t_off;
    2170:	ldr	r3, [pc, #88]	; (21cc <saveParameters()+0x70>)
    2172:	ldr	r3, [r3, #0]
    2174:	strh	r3, [r0, #6]
  store[4]  = t_rep;
    2176:	ldr	r3, [pc, #88]	; (21d0 <saveParameters()+0x74>)
    2178:	ldr	r3, [r3, #0]
    217a:	strh	r3, [r0, #8]
  store[5]  = proc;
    217c:	ldr	r3, [pc, #84]	; (21d4 <saveParameters()+0x78>)
    217e:	ldrh	r3, [r3, #0]
    2180:	strh	r3, [r0, #10]
  store[6]  = shift;
    2182:	ldr	r3, [pc, #84]	; (21d8 <saveParameters()+0x7c>)
    2184:	ldrh	r3, [r3, #0]
    2186:	strh	r3, [r0, #12]
  store[7]  = t_1;
    2188:	ldr	r3, [pc, #80]	; (21dc <saveParameters()+0x80>)
    218a:	ldr	r3, [r3, #0]
    218c:	strh	r3, [r0, #14]
  store[8]  = t_2;
    218e:	ldr	r3, [pc, #80]	; (21e0 <saveParameters()+0x84>)
    2190:	ldr	r3, [r3, #0]
    2192:	strh	r3, [r0, #16]
  store[9]  = t_3;
    2194:	ldr	r3, [pc, #76]	; (21e4 <saveParameters()+0x88>)
    2196:	ldr	r3, [r3, #0]
    2198:	strh	r3, [r0, #18]
  store[10] = t_4;
    219a:	ldr	r3, [pc, #76]	; (21e8 <saveParameters()+0x8c>)
    219c:	ldr	r3, [r3, #0]
    219e:	strh	r3, [r0, #20]
  store[11] = fsamp/1000;
    21a0:	ldr	r3, [pc, #72]	; (21ec <saveParameters()+0x90>)
    21a2:	ldr	r3, [r3, #0]
    21a4:	sdiv	r3, r3, r2
    21a8:	strh	r3, [r0, #22]
  store[12] = again;
    21aa:	ldr	r3, [pc, #68]	; (21f0 <saveParameters()+0x94>)
    21ac:	ldrh	r3, [r3, #0]
    21ae:	strh	r3, [r0, #24]
  store[13] = dgain;
    21b0:	ldr	r3, [pc, #64]	; (21f4 <saveParameters()+0x98>)
    21b2:	ldrh	r3, [r3, #0]
    21b4:	strh	r3, [r0, #26]
  store[14] = 0;
    21b6:	movs	r3, #0
    21b8:	strh	r3, [r0, #28]
  store[15] = 0;
    21ba:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    21bc:	b.w	214c <storeConfig(unsigned short*, int)>
    21c0:	.word	0x20002378
    21c4:	.word	0x200213ac
    21c8:	.word	0x2000237c
    21cc:	.word	0x2002138c
    21d0:	.word	0x20021390
    21d4:	.word	0x200213d6
    21d8:	.word	0x2002147a
    21dc:	.word	0x20021388
    21e0:	.word	0x2000236c
    21e4:	.word	0x20002370
    21e8:	.word	0x20002374
    21ec:	.word	0x2000235c
    21f0:	.word	0x20002384
    21f4:	.word	0x200213d0

000021f8 <menu1(short)>:
{   // have ':'
    21f8:	push	{r4, lr}
    21fa:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    21fc:	bl	ac84 <usb_serial_available>
    while(!Serial.available()) ;
    2200:	cmp	r0, #0
    2202:	beq.n	21fc <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2204:	bl	acf8 <usb_serial_getchar>
    ch=Serial.read();
    2208:	uxtb	r3, r0
    if(ch=='w') 
    220a:	cmp	r3, #119	; 0x77
    220c:	bne.n	221e <menu1(short)+0x26>
    { Serial.println("Save parameters");
    220e:	ldr	r1, [pc, #36]	; (2234 <menu1(short)+0x3c>)
    2210:	ldr	r0, [pc, #36]	; (2238 <menu1(short)+0x40>)
    2212:	bl	1f30 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    2216:	bl	215c <saveParameters()>
}
    221a:	mov	r0, r4
    221c:	pop	{r4, pc}
    else if(ch=='m') // control monitor (needed for gui)
    221e:	cmp	r3, #109	; 0x6d
    2220:	bne.n	222a <menu1(short)+0x32>
      menuGetInt16((int16_t *)&monitor);
    2222:	ldr	r0, [pc, #24]	; (223c <menu1(short)+0x44>)
    2224:	bl	1f98 <menuGetInt16(short*) [clone .isra.0]>
    2228:	b.n	221a <menu1(short)+0x22>
    else if(ch=='c') // transfer internal rtc to external rtc
    222a:	cmp	r3, #99	; 0x63
    222c:	bne.n	221a <menu1(short)+0x22>
    { rtcXferTime();
    222e:	bl	3b08 <rtcXferTime()>
    2232:	b.n	221a <menu1(short)+0x22>
    2234:	.word	0x20000ed0
    2238:	.word	0x20001db8
    223c:	.word	0x200213d4

00002240 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2240:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2244:	ldr	r4, [pc, #228]	; (232c <loadParameters()+0xec>)
    2246:	movs	r1, #16
    2248:	ldr.w	sl, [pc, #264]	; 2354 <loadParameters()+0x114>
    224c:	mov	r0, r4
    224e:	ldr.w	r9, [pc, #264]	; 2358 <loadParameters()+0x118>
    2252:	bl	2154 <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    2256:	ldrh	r3, [r4, #0]
    2258:	ldr.w	lr, [pc, #256]	; 235c <loadParameters()+0x11c>
    225c:	cmp	r3, #1
    225e:	ldr.w	ip, [pc, #256]	; 2360 <loadParameters()+0x120>
    2262:	ldr	r7, [pc, #204]	; (2330 <loadParameters()+0xf0>)
    2264:	ldr	r6, [pc, #204]	; (2334 <loadParameters()+0xf4>)
    2266:	ldr	r2, [pc, #208]	; (2338 <loadParameters()+0xf8>)
    2268:	ldr	r5, [pc, #208]	; (233c <loadParameters()+0xfc>)
    226a:	ldr	r0, [pc, #212]	; (2340 <loadParameters()+0x100>)
    226c:	ldr	r1, [pc, #212]	; (2344 <loadParameters()+0x104>)
    226e:	bne.n	22c6 <loadParameters()+0x86>
  {
    t_acq   = store[1];
    2270:	ldrh	r3, [r4, #2]
    2272:	str.w	r3, [sl]
    t_on    = store[2];
    2276:	ldrh	r3, [r4, #4]
    2278:	str.w	r3, [r9]
    t_off   = store[3];
    227c:	ldrh	r3, [r4, #6]
    227e:	str.w	r3, [lr]
    t_rep   = store[4];
    2282:	ldrh	r3, [r4, #8]
    2284:	str.w	r3, [ip]
    proc    = store[5];
    2288:	ldrsh.w	r3, [r4, #10]
    228c:	strh	r3, [r7, #0]
    shift   = store[6];
    228e:	ldrsh.w	r3, [r4, #12]
    2292:	strh	r3, [r6, #0]
    t_1     = store[7];
    2294:	ldrh	r3, [r4, #14]
    2296:	str	r3, [r2, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    2298:	mov.w	r2, #1000	; 0x3e8
    t_2     = store[8];
    229c:	ldrh	r3, [r4, #16]
    229e:	str	r3, [r5, #0]
    t_3     = store[9];
    22a0:	ldrh	r3, [r4, #18]
    22a2:	str	r3, [r0, #0]
    t_4     = store[10];
    22a4:	ldrh	r3, [r4, #20]
    22a6:	str	r3, [r1, #0]
    fsamp   = store[11]*1000;
    22a8:	ldrh	r3, [r4, #22]
    22aa:	muls	r3, r2
    22ac:	ldr	r2, [pc, #152]	; (2348 <loadParameters()+0x108>)
    22ae:	str	r3, [r2, #0]
    again   = store[12];
    22b0:	ldrsh.w	r2, [r4, #24]
    22b4:	ldr	r3, [pc, #148]	; (234c <loadParameters()+0x10c>)
    22b6:	strh	r2, [r3, #0]
    dgain   = store[13];
    22b8:	ldrsh.w	r2, [r4, #26]
    22bc:	ldr	r3, [pc, #144]	; (2350 <loadParameters()+0x110>)
    22be:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    22c0:	ldr	r0, [pc, #104]	; (232c <loadParameters()+0xec>)
    22c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    22c6:	mov.w	r8, #20
    store[0]  = 0;
    22ca:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    22cc:	str.w	r8, [sl]
    22d0:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    22d4:	mov.w	r8, #60	; 0x3c
    store[0]  = 0;
    22d8:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    22da:	str.w	r8, [r9]
    store[3]  = t_off    = T_OFF;
    22de:	str.w	r3, [lr]
    store[4]  = t_rep    = T_REP;
    22e2:	str.w	r3, [ip]
    store[5]  = proc     = PROC_MODE;
    22e6:	strh	r3, [r7, #0]
    store[6]  = shift    = SHIFT;
    22e8:	strh	r3, [r6, #0]
    store[7]  = t_1      = T_1;
    22ea:	str	r3, [r2, #0]
    store[8]  = t_2      = T_2;
    22ec:	movs	r2, #12
    store[2]  = t_on     = T_ON;
    22ee:	strh.w	r8, [r4, #4]
    store[8]  = t_2      = T_2;
    22f2:	str	r2, [r5, #0]
    22f4:	strh	r2, [r4, #16]
    store[9]  = t_3      = T_3;
    22f6:	str	r2, [r0, #0]
    22f8:	strh	r2, [r4, #18]
    store[10] = t_4      = T_4;
    22fa:	movs	r2, #24
    store[3]  = t_off    = T_OFF;
    22fc:	strh	r3, [r4, #6]
    store[10] = t_4      = T_4;
    22fe:	str	r2, [r1, #0]
    store[11] = (fsamp   = FSAMP)/1000; 
    2300:	movw	r1, #48000	; 0xbb80
    store[10] = t_4      = T_4;
    2304:	strh	r2, [r4, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    2306:	ldr	r2, [pc, #64]	; (2348 <loadParameters()+0x108>)
    store[4]  = t_rep    = T_REP;
    2308:	strh	r3, [r4, #8]
    store[11] = (fsamp   = FSAMP)/1000; 
    230a:	str	r1, [r2, #0]
    230c:	movs	r2, #48	; 0x30
    store[12] = again    = AGAIN;
    230e:	ldr	r1, [pc, #60]	; (234c <loadParameters()+0x10c>)
    store[11] = (fsamp   = FSAMP)/1000; 
    2310:	strh	r2, [r4, #22]
    store[12] = again    = AGAIN;
    2312:	movs	r2, #10
    store[5]  = proc     = PROC_MODE;
    2314:	strh	r3, [r4, #10]
    store[12] = again    = AGAIN;
    2316:	strh	r2, [r1, #0]
    2318:	strh	r2, [r4, #24]
    store[13] = dgain    = DGAIN;
    231a:	ldr	r2, [pc, #52]	; (2350 <loadParameters()+0x110>)
    store[6]  = shift    = SHIFT;
    231c:	strh	r3, [r4, #12]
    store[7]  = t_1      = T_1;
    231e:	strh	r3, [r4, #14]
    store[13] = dgain    = DGAIN;
    2320:	strh	r3, [r2, #0]
    2322:	strh	r3, [r4, #26]
    store[14] = 0;
    2324:	strh	r3, [r4, #28]
    store[15] = 0; 
    2326:	strh	r3, [r4, #30]
    2328:	b.n	22c0 <loadParameters()+0x80>
    232a:	nop
    232c:	.word	0x200213ac
    2330:	.word	0x200213d6
    2334:	.word	0x2002147a
    2338:	.word	0x20021388
    233c:	.word	0x2000236c
    2340:	.word	0x20002370
    2344:	.word	0x20002374
    2348:	.word	0x2000235c
    234c:	.word	0x20002384
    2350:	.word	0x200213d0
    2354:	.word	0x20002378
    2358:	.word	0x2000237c
    235c:	.word	0x2002138c
    2360:	.word	0x20021390

00002364 <menu2()>:
{   // have '?'
    2364:	push	{r4, lr}
    2366:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    2368:	bl	ac84 <usb_serial_available>
    while(!Serial.available()) ;
    236c:	cmp	r0, #0
    236e:	beq.n	2368 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2370:	bl	acf8 <usb_serial_getchar>
    ch=Serial.read();
    2374:	uxtb	r0, r0
    if(ch=='p') // get parameters
    2376:	cmp	r0, #112	; 0x70
    2378:	bne.w	2496 <menu2()+0x132>
      Serial.println();
    237c:	ldr	r0, [pc, #588]	; (25cc <menu2()+0x268>)
    237e:	bl	cc68 <Print::println()>
      Serial.println(version);
    2382:	ldr	r1, [pc, #588]	; (25d0 <menu2()+0x26c>)
    2384:	ldr	r0, [pc, #580]	; (25cc <menu2()+0x268>)
    2386:	bl	1f30 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    238a:	add	r0, sp, #24
    238c:	bl	3a9c <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2390:	ldrsb.w	r3, [sp, #28]
    2394:	ldrsh.w	r2, [sp, #24]
    2398:	str	r3, [sp, #16]
    239a:	ldrsb.w	r3, [sp, #31]
    239e:	ldr	r1, [pc, #564]	; (25d4 <menu2()+0x270>)
    23a0:	str	r3, [sp, #12]
    23a2:	ldrsb.w	r3, [sp, #30]
    23a6:	ldr	r0, [pc, #548]	; (25cc <menu2()+0x268>)
    23a8:	str	r3, [sp, #8]
    23aa:	ldrsb.w	r3, [sp, #29]
    23ae:	str	r3, [sp, #4]
    23b0:	ldrsb.w	r3, [sp, #27]
    23b4:	str	r3, [sp, #0]
    23b6:	ldrsb.w	r3, [sp, #26]
    23ba:	bl	cca0 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    23be:	bl	3b8c <rtcGetTimestamp()>
    23c2:	mov	r1, r0
    23c4:	ldr	r0, [pc, #516]	; (25cc <menu2()+0x268>)
    23c6:	bl	1f30 <Print::println(char const*) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    23ca:	ldr	r1, [pc, #524]	; (25d8 <menu2()+0x274>)
    23cc:	ldr	r0, [pc, #508]	; (25cc <menu2()+0x268>)
    23ce:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    23d2:	ldr	r3, [pc, #520]	; (25dc <menu2()+0x278>)
    23d4:	ldr	r0, [pc, #500]	; (25cc <menu2()+0x268>)
    23d6:	ldr	r1, [r3, #0]
    23d8:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    23dc:	ldr	r1, [pc, #512]	; (25e0 <menu2()+0x27c>)
    23de:	ldr	r0, [pc, #492]	; (25cc <menu2()+0x268>)
    23e0:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    23e4:	ldr	r3, [pc, #508]	; (25e4 <menu2()+0x280>)
    23e6:	ldr	r0, [pc, #484]	; (25cc <menu2()+0x268>)
    23e8:	ldr	r1, [r3, #0]
    23ea:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23ee:	ldr	r1, [pc, #504]	; (25e8 <menu2()+0x284>)
    23f0:	ldr	r0, [pc, #472]	; (25cc <menu2()+0x268>)
    23f2:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    23f6:	ldr	r3, [pc, #500]	; (25ec <menu2()+0x288>)
    23f8:	ldr	r0, [pc, #464]	; (25cc <menu2()+0x268>)
    23fa:	ldr	r1, [r3, #0]
    23fc:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2400:	ldr	r1, [pc, #492]	; (25f0 <menu2()+0x28c>)
    2402:	ldr	r0, [pc, #456]	; (25cc <menu2()+0x268>)
    2404:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2408:	ldr	r3, [pc, #488]	; (25f4 <menu2()+0x290>)
	size_t println(long n)				{ return print(n) + println(); }
    240a:	ldr	r0, [pc, #448]	; (25cc <menu2()+0x268>)
    240c:	ldr	r1, [r3, #0]
    240e:	bl	cc56 <Print::print(long)>
    2412:	ldr	r0, [pc, #440]	; (25cc <menu2()+0x268>)
    2414:	bl	cc68 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2418:	ldr	r1, [pc, #476]	; (25f8 <menu2()+0x294>)
    241a:	ldr	r0, [pc, #432]	; (25cc <menu2()+0x268>)
    241c:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2420:	ldr	r3, [pc, #472]	; (25fc <menu2()+0x298>)
    2422:	ldr	r0, [pc, #424]	; (25cc <menu2()+0x268>)
    2424:	ldrh	r1, [r3, #0]
    2426:	sxth	r1, r1
    2428:	bl	1ee0 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    242c:	ldr	r1, [pc, #464]	; (2600 <menu2()+0x29c>)
    242e:	ldr	r0, [pc, #412]	; (25cc <menu2()+0x268>)
    2430:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2434:	ldr	r3, [pc, #460]	; (2604 <menu2()+0x2a0>)
    2436:	ldr	r0, [pc, #404]	; (25cc <menu2()+0x268>)
    2438:	ldrh	r1, [r3, #0]
    243a:	sxth	r1, r1
    243c:	bl	1ee0 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2440:	ldr	r1, [pc, #452]	; (2608 <menu2()+0x2a4>)
    2442:	ldr	r0, [pc, #392]	; (25cc <menu2()+0x268>)
    2444:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2448:	ldr	r3, [pc, #448]	; (260c <menu2()+0x2a8>)
    244a:	ldr	r0, [pc, #384]	; (25cc <menu2()+0x268>)
    244c:	ldrh	r1, [r3, #0]
    244e:	sxth	r1, r1
    2450:	bl	1ee0 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    2454:	ldr	r1, [pc, #440]	; (2610 <menu2()+0x2ac>)
    2456:	ldr	r0, [pc, #372]	; (25cc <menu2()+0x268>)
    2458:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    245c:	ldr	r3, [pc, #436]	; (2614 <menu2()+0x2b0>)
    245e:	ldr	r0, [pc, #364]	; (25cc <menu2()+0x268>)
    2460:	ldr	r1, [r3, #0]
    2462:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    2466:	ldr	r1, [pc, #432]	; (2618 <menu2()+0x2b4>)
    2468:	ldr	r0, [pc, #352]	; (25cc <menu2()+0x268>)
    246a:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    246e:	ldr	r3, [pc, #428]	; (261c <menu2()+0x2b8>)
    2470:	ldr	r0, [pc, #344]	; (25cc <menu2()+0x268>)
    2472:	ldr	r1, [r3, #0]
    2474:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    2478:	ldr	r1, [pc, #420]	; (2620 <menu2()+0x2bc>)
    247a:	ldr	r0, [pc, #336]	; (25cc <menu2()+0x268>)
    247c:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2480:	ldr	r3, [pc, #416]	; (2624 <menu2()+0x2c0>)
    2482:	ldr	r0, [pc, #328]	; (25cc <menu2()+0x268>)
    2484:	ldr	r1, [r3, #0]
    2486:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    248a:	ldr	r1, [pc, #412]	; (2628 <menu2()+0x2c4>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    248c:	ldr	r0, [pc, #316]	; (25cc <menu2()+0x268>)
    248e:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2492:	ldr	r3, [pc, #408]	; (262c <menu2()+0x2c8>)
    2494:	b.n	2520 <menu2()+0x1bc>
    else if(ch=='d') // get date
    2496:	cmp	r0, #52	; 0x34
    2498:	bhi.n	24cc <menu2()+0x168>
    249a:	cmp	r0, #48	; 0x30
    249c:	bls.n	24d4 <menu2()+0x170>
    249e:	subs	r0, #50	; 0x32
    24a0:	cmp	r0, #2
    24a2:	bhi.n	258a <menu2()+0x226>
    24a4:	tbb	[pc, r0]
    24a8:	.short	0x7d77
    24aa:	.byte	0x83
    24ab:	.byte	0x00
    24ac:	cmp	r0, #22
    24ae:	bhi.n	24d4 <menu2()+0x170>
    24b0:	tbb	[pc, r0]
    24b4:	.word	0x165f1031
    24b8:	.word	0x10654710
    24bc:	.word	0x10101010
    24c0:	.word	0x103b1010
    24c4:	.word	0x25544110
    24c8:	.short	0x1010
    24ca:	.byte	0x7f
    24cb:	.byte	0x00
    24cc:	subs	r0, #97	; 0x61
    24ce:	uxtb	r3, r0
    24d0:	cmp	r3, #22
    24d2:	bls.n	24ac <menu2()+0x148>
        virtual int available() { return usb_serial_available(); }
    24d4:	bl	ac84 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    24d8:	cmp	r0, #0
    24da:	bne.n	25c4 <menu2()+0x260>
}
    24dc:	add	sp, #32
    24de:	pop	{r4, pc}
      rtc_get_datetime(&t);
    24e0:	add	r0, sp, #24
    24e2:	bl	3a9c <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    24e6:	ldrsb.w	r3, [sp, #27]
    24ea:	ldrsh.w	r2, [sp, #24]
    24ee:	str	r3, [sp, #0]
    24f0:	ldr	r1, [pc, #316]	; (2630 <menu2()+0x2cc>)
    24f2:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    24f6:	ldr	r0, [pc, #212]	; (25cc <menu2()+0x268>)
    24f8:	bl	cca0 <Print::printf(char const*, ...)>
    24fc:	b.n	24d4 <menu2()+0x170>
      rtc_get_datetime(&t);
    24fe:	add	r0, sp, #24
    2500:	bl	3a9c <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    2504:	ldrsb.w	r3, [sp, #31]
    2508:	ldrsb.w	r2, [sp, #29]
    250c:	str	r3, [sp, #0]
    250e:	ldr	r1, [pc, #292]	; (2634 <menu2()+0x2d0>)
    2510:	ldrsb.w	r3, [sp, #30]
    2514:	b.n	24f6 <menu2()+0x192>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2516:	ldr	r1, [pc, #192]	; (25d8 <menu2()+0x274>)
    2518:	ldr	r0, [pc, #176]	; (25cc <menu2()+0x268>)
    251a:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    251e:	ldr	r3, [pc, #188]	; (25dc <menu2()+0x278>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    2520:	ldr	r1, [r3, #0]
    2522:	ldr	r0, [pc, #168]	; (25cc <menu2()+0x268>)
    2524:	bl	1ef2 <Print::println(unsigned long) [clone .isra.0]>
    2528:	b.n	24d4 <menu2()+0x170>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    252a:	ldr	r1, [pc, #268]	; (2638 <menu2()+0x2d4>)
    252c:	ldr	r0, [pc, #156]	; (25cc <menu2()+0x268>)
    252e:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2532:	ldr	r3, [pc, #176]	; (25e4 <menu2()+0x280>)
    2534:	b.n	2520 <menu2()+0x1bc>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    2536:	ldr	r1, [pc, #176]	; (25e8 <menu2()+0x284>)
    2538:	ldr	r0, [pc, #144]	; (25cc <menu2()+0x268>)
    253a:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    253e:	ldr	r3, [pc, #172]	; (25ec <menu2()+0x288>)
    2540:	b.n	2520 <menu2()+0x1bc>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2542:	ldr	r1, [pc, #172]	; (25f0 <menu2()+0x28c>)
    2544:	ldr	r0, [pc, #132]	; (25cc <menu2()+0x268>)
    2546:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    254a:	ldr	r3, [pc, #168]	; (25f4 <menu2()+0x290>)
    254c:	ldr	r0, [pc, #124]	; (25cc <menu2()+0x268>)
    254e:	ldr	r1, [r3, #0]
    2550:	bl	cc56 <Print::print(long)>
    2554:	ldr	r0, [pc, #116]	; (25cc <menu2()+0x268>)
    2556:	bl	cc68 <Print::println()>
    255a:	b.n	24d4 <menu2()+0x170>
      Serial.print("shift (s) = "); Serial.println(shift);
    255c:	ldr	r1, [pc, #152]	; (25f8 <menu2()+0x294>)
    255e:	ldr	r0, [pc, #108]	; (25cc <menu2()+0x268>)
    2560:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2564:	ldr	r3, [pc, #148]	; (25fc <menu2()+0x298>)
      Serial.print("again (g) = "); Serial.println(again);
    2566:	ldrh	r1, [r3, #0]
    2568:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    256a:	ldr	r0, [pc, #96]	; (25cc <menu2()+0x268>)
    256c:	bl	1ee0 <Print::println(int) [clone .isra.0]>
    2570:	b.n	24d4 <menu2()+0x170>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2572:	ldr	r1, [pc, #140]	; (2600 <menu2()+0x29c>)
    2574:	ldr	r0, [pc, #84]	; (25cc <menu2()+0x268>)
    2576:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    257a:	ldr	r3, [pc, #136]	; (2604 <menu2()+0x2a0>)
    257c:	b.n	2566 <menu2()+0x202>
      Serial.print("again (g) = "); Serial.println(again);
    257e:	ldr	r1, [pc, #136]	; (2608 <menu2()+0x2a4>)
    2580:	ldr	r0, [pc, #72]	; (25cc <menu2()+0x268>)
    2582:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2586:	ldr	r3, [pc, #132]	; (260c <menu2()+0x2a8>)
    2588:	b.n	2566 <menu2()+0x202>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    258a:	ldr	r1, [pc, #176]	; (263c <menu2()+0x2d8>)
    258c:	ldr	r0, [pc, #60]	; (25cc <menu2()+0x268>)
    258e:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2592:	ldr	r3, [pc, #128]	; (2614 <menu2()+0x2b0>)
    2594:	b.n	2520 <menu2()+0x1bc>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    2596:	ldr	r1, [pc, #168]	; (2640 <menu2()+0x2dc>)
    2598:	ldr	r0, [pc, #48]	; (25cc <menu2()+0x268>)
    259a:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    259e:	ldr	r3, [pc, #124]	; (261c <menu2()+0x2b8>)
    25a0:	b.n	2520 <menu2()+0x1bc>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    25a2:	ldr	r1, [pc, #160]	; (2644 <menu2()+0x2e0>)
    25a4:	ldr	r0, [pc, #36]	; (25cc <menu2()+0x268>)
    25a6:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    25aa:	ldr	r3, [pc, #120]	; (2624 <menu2()+0x2c0>)
    25ac:	b.n	2520 <menu2()+0x1bc>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    25ae:	ldr	r1, [pc, #152]	; (2648 <menu2()+0x2e4>)
    25b0:	b.n	248c <menu2()+0x128>
    { uint16_t *params=loadParameters();
    25b2:	bl	2240 <loadParameters()>
    25b6:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    25b8:	ldr	r1, [pc, #144]	; (264c <menu2()+0x2e8>)
    25ba:	ldr	r0, [pc, #16]	; (25cc <menu2()+0x268>)
    25bc:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    25c0:	ldrh	r1, [r4, #0]
    25c2:	b.n	256a <menu2()+0x206>
        virtual int read() { return usb_serial_getchar(); }
    25c4:	bl	acf8 <usb_serial_getchar>
    25c8:	b.n	24d4 <menu2()+0x170>
    25ca:	nop
    25cc:	.word	0x20001db8
    25d0:	.word	0x200010dc
    25d4:	.word	0x20000ee0
    25d8:	.word	0x20000f06
    25dc:	.word	0x20002378
    25e0:	.word	0x20000f13
    25e4:	.word	0x2000237c
    25e8:	.word	0x20000f20
    25ec:	.word	0x20021390
    25f0:	.word	0x20000f2d
    25f4:	.word	0x2000235c
    25f8:	.word	0x20000f3a
    25fc:	.word	0x2002147a
    2600:	.word	0x20000f47
    2604:	.word	0x200213d6
    2608:	.word	0x20000f54
    260c:	.word	0x20002384
    2610:	.word	0x20000f61
    2614:	.word	0x20021388
    2618:	.word	0x20000f6e
    261c:	.word	0x2000236c
    2620:	.word	0x20000f7b
    2624:	.word	0x20002370
    2628:	.word	0x20000f88
    262c:	.word	0x20002374
    2630:	.word	0x20000f95
    2634:	.word	0x20000faf
    2638:	.word	0x20000fca
    263c:	.word	0x20000fd7
    2640:	.word	0x20000fe3
    2644:	.word	0x20000fef
    2648:	.word	0x20000ffb
    264c:	.word	0x20001007

00002650 <menu(short)>:
{
    2650:	push	{r3, r4, r5, lr}
    2652:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2654:	bl	ac84 <usb_serial_available>
  if(Serial.available())
    2658:	cmp	r0, #0
    265a:	beq.n	2718 <menu(short)+0xc8>
        virtual int read() { return usb_serial_getchar(); }
    265c:	bl	acf8 <usb_serial_getchar>
    char ch=Serial.read();
    2660:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2662:	cmp	r1, #115	; 0x73
    2664:	bne.n	2678 <menu(short)+0x28>
    2666:	movs	r4, #0
    2668:	ldr	r1, [pc, #176]	; (271c <menu(short)+0xcc>)
    266a:	ldr	r0, [pc, #180]	; (2720 <menu(short)+0xd0>)
    266c:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    2670:	bl	3738 <adcStatus()>
	size_t print(char c)				{ return write((uint8_t)c); }
    2674:	ldr	r5, [pc, #168]	; (2720 <menu(short)+0xd0>)
    2676:	b.n	2710 <menu(short)+0xc0>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2678:	cmp	r1, #101	; 0x65
    267a:	beq.n	26d4 <menu(short)+0x84>
    267c:	bhi.n	26aa <menu(short)+0x5a>
    267e:	cmp	r1, #63	; 0x3f
    2680:	beq.n	26f6 <menu(short)+0xa6>
    2682:	bhi.n	26a0 <menu(short)+0x50>
    2684:	cmp	r1, #33	; 0x21
    2686:	beq.n	26fc <menu(short)+0xac>
    2688:	cmp	r1, #58	; 0x3a
    268a:	beq.n	26ec <menu(short)+0x9c>
    268c:	ldr	r5, [pc, #144]	; (2720 <menu(short)+0xd0>)
    268e:	ldr	r3, [r5, #0]
    2690:	mov	r0, r5
    2692:	ldr	r3, [r3, #0]
    2694:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2696:	ldr	r1, [pc, #140]	; (2724 <menu(short)+0xd4>)
    2698:	mov	r0, r5
    269a:	bl	1f30 <Print::println(char const*) [clone .isra.0]>
    269e:	b.n	2674 <menu(short)+0x24>
    26a0:	cmp	r1, #98	; 0x62
    26a2:	bne.n	268c <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    26a4:	bl	248 <reboot()>
    26a8:	b.n	2674 <menu(short)+0x24>
    26aa:	cmp	r1, #114	; 0x72
    26ac:	beq.n	26e0 <menu(short)+0x90>
    26ae:	cmp	r1, #120	; 0x78
    26b0:	beq.n	26e6 <menu(short)+0x96>
    26b2:	cmp	r1, #109	; 0x6d
    26b4:	bne.n	268c <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    26b6:	ldr	r5, [pc, #112]	; (2728 <menu(short)+0xd8>)
    26b8:	ldr	r1, [pc, #112]	; (272c <menu(short)+0xdc>)
    26ba:	ldrh	r3, [r5, #0]
    26bc:	ldr	r0, [pc, #96]	; (2720 <menu(short)+0xd0>)
    26be:	rsb	r3, r3, #1
    26c2:	strh	r3, [r5, #0]
    26c4:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    26c8:	ldrsh.w	r1, [r5]
    26cc:	ldr	r0, [pc, #80]	; (2720 <menu(short)+0xd0>)
    26ce:	bl	cc56 <Print::print(long)>
    26d2:	b.n	2674 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    26d4:	ldr	r1, [pc, #88]	; (2730 <menu(short)+0xe0>)
    26d6:	movs	r4, #5
    26d8:	ldr	r0, [pc, #68]	; (2720 <menu(short)+0xd0>)
    26da:	bl	1f2c <Print::print(char const*) [clone .isra.0]>
    26de:	b.n	2674 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    26e0:	bl	218 <resetUSB()>
    26e4:	b.n	2674 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    26e6:	bl	2d6c <powerDown()>
    26ea:	b.n	2674 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    26ec:	mov	r0, r4
    26ee:	bl	21f8 <menu1(short)>
    26f2:	mov	r4, r0
    26f4:	b.n	2674 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    26f6:	bl	2364 <menu2()>
    26fa:	b.n	2674 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    26fc:	bl	1fb4 <menu3()>
    2700:	b.n	2674 <menu(short)+0x24>
    2702:	bl	acf8 <usb_serial_getchar>
	size_t print(char c)				{ return write((uint8_t)c); }
    2706:	ldr	r3, [r5, #0]
    2708:	uxtb	r1, r0
    270a:	ldr	r0, [pc, #20]	; (2720 <menu(short)+0xd0>)
    270c:	ldr	r3, [r3, #0]
    270e:	blx	r3
        virtual int available() { return usb_serial_available(); }
    2710:	bl	ac84 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2714:	cmp	r0, #0
    2716:	bne.n	2702 <menu(short)+0xb2>
}
    2718:	mov	r0, r4
    271a:	pop	{r3, r4, r5, pc}
    271c:	.word	0x20000e75
    2720:	.word	0x20001db8
    2724:	.word	0x20000e8f
    2728:	.word	0x200213d4
    272c:	.word	0x20000e84
    2730:	.word	0x20000e7d

00002734 <getStore()>:

uint16_t *getStore(void) {return store;}
    2734:	ldr	r0, [pc, #0]	; (2738 <getStore()+0x4>)
    2736:	bx	lr
    2738:	.word	0x200213ac

0000273c <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    273c:	ldr	r3, [pc, #16]	; (2750 <getDataCount()+0x14>)
    273e:	ldr	r0, [r3, #0]
    2740:	ldr	r3, [pc, #16]	; (2754 <getDataCount()+0x18>)
    2742:	ldr	r3, [r3, #0]
    2744:	subs	r0, r0, r3
    2746:	it	mi
    2748:	addmi.w	r0, r0, #9216	; 0x2400
    274c:	uxth	r0, r0
    274e:	bx	lr
    2750:	.word	0x200201e8
    2754:	.word	0x200201e4

00002758 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2758:	ldr	r3, [pc, #4]	; (2760 <queue_isBusy()+0x8>)
    275a:	ldr	r0, [r3, #0]
    275c:	bx	lr
    275e:	nop
    2760:	.word	0x20013fd4

00002764 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2764:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    2766:	movs	r4, #1
    2768:	ldr	r5, [pc, #72]	; (27b4 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    276a:	ldr	r6, [pc, #76]	; (27b8 <pushData(unsigned long*)+0x54>)
    276c:	mov.w	r7, #9216	; 0x2400
    queue_busy=1;
    2770:	str	r4, [r5, #0]
  {
    2772:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2774:	ldr	r3, [r6, #0]
    2776:	ldr	r2, [pc, #68]	; (27bc <pushData(unsigned long*)+0x58>)
    2778:	add	r3, r4
    277a:	ldr	r2, [r2, #0]
    277c:	sdiv	r0, r3, r7
    2780:	mls	r3, r7, r0, r3
    2784:	cmp	r3, r2
    2786:	bne.n	278e <pushData(unsigned long*)+0x2a>
    2788:	movs	r0, #0
    278a:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    278c:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    278e:	ldr	r3, [pc, #48]	; (27c0 <pushData(unsigned long*)+0x5c>)
    2790:	mov.w	r2, #512	; 0x200
    2794:	ldr	r0, [r6, #0]
    2796:	add.w	r0, r3, r0, lsl #9
    279a:	bl	a79c <memcpy>
    tail = (tail+1)%MAXBUF;
    279e:	ldr	r3, [r6, #0]
    return 1; // signal success.
    27a0:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    27a2:	adds	r3, #1
    27a4:	sdiv	r2, r3, r7
    27a8:	mls	r3, r7, r2, r3
    27ac:	str	r3, [r6, #0]
    queue_busy=0;
    27ae:	movs	r3, #0
    27b0:	str	r3, [r5, #0]
    return 1; // signal success.
    27b2:	b.n	278c <pushData(unsigned long*)+0x28>
    27b4:	.word	0x20013fd4
    27b8:	.word	0x200201e8
    27bc:	.word	0x200201e4
    27c0:	.word	0x70000000

000027c4 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    27c4:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27c6:	ldr	r3, [pc, #64]	; (2808 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    27c8:	movs	r4, #1
    27ca:	ldr	r6, [pc, #64]	; (280c <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27cc:	ldr	r5, [pc, #64]	; (2810 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    27ce:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    27d0:	ldr	r2, [r5, #0]
    27d2:	ldr	r3, [r3, #0]
    27d4:	cmp	r2, r3
    27d6:	bne.n	27de <pullData(unsigned long*)+0x1a>
    27d8:	movs	r0, #0
    27da:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    27dc:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    27de:	ldr	r3, [pc, #52]	; (2814 <pullData(unsigned long*)+0x50>)
    27e0:	mov.w	r2, #512	; 0x200
    27e4:	ldr	r1, [r5, #0]
    27e6:	add.w	r1, r3, r1, lsl #9
    27ea:	bl	a79c <memcpy>
    head = (head+1)%MAXBUF;
    27ee:	ldr	r3, [r5, #0]
    27f0:	mov.w	r2, #9216	; 0x2400
    return 1; // signal success.
    27f4:	mov	r0, r4
    head = (head+1)%MAXBUF;
    27f6:	adds	r3, #1
    27f8:	sdiv	r1, r3, r2
    27fc:	mls	r3, r2, r1, r3
    2800:	str	r3, [r5, #0]
    queue_busy=0;
    2802:	movs	r3, #0
    2804:	str	r3, [r6, #0]
    return 1; // signal success.
    2806:	b.n	27dc <pullData(unsigned long*)+0x18>
    2808:	.word	0x200201e8
    280c:	.word	0x20013fd4
    2810:	.word	0x200201e4
    2814:	.word	0x70000000

00002818 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2818:	push	{r0, r1, r4, r5, r6, lr}
    281a:	mov	r6, r0
    rtc_get_datetime(&t);
    281c:	mov	r0, sp
{
    281e:	mov	r5, r2
    2820:	mov	r4, r1
    rtc_get_datetime(&t);
    2822:	bl	3a9c <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    2826:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    282a:	ldrsb.w	r3, [sp, #3]
    282e:	subw	r2, r2, #1980	; 0x7bc
    2832:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2834:	cmp	r2, #127	; 0x7f
    2836:	bhi.n	2882 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2838:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    283c:	cmp	r1, #12
    283e:	bhi.n	2882 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2840:	uxtb	r3, r3
    2842:	cmp	r3, #31
    2844:	bhi.n	2882 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2846:	orr.w	r3, r3, r1, lsl #5
    284a:	orr.w	r3, r3, r2, lsl #9
    284e:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2850:	ldrb.w	r1, [sp, #5]
    2854:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2858:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    285a:	strh	r3, [r6, #0]
    285c:	bhi.n	2886 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    285e:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2862:	cmp	r3, #59	; 0x3b
    2864:	bhi.n	2886 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2866:	uxtb	r2, r2
    2868:	cmp	r2, #59	; 0x3b
    286a:	bhi.n	2886 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    286c:	lsls	r3, r3, #5
    286e:	orr.w	r3, r3, r1, lsl #11
    2872:	orr.w	r3, r3, r2, lsr #1
    2876:	uxth	r3, r3
    2878:	strh	r3, [r4, #0]
    *ms10 = 0;
    287a:	movs	r3, #0
    287c:	strb	r3, [r5, #0]
}
    287e:	add	sp, #8
    2880:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2882:	movs	r3, #0
    2884:	b.n	2850 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2886:	movs	r3, #0
    2888:	b.n	2878 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000288a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    288a:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    288c:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    288e:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2890:	cbz	r5, 289c <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2892:	cbnz	r3, 28a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2894:	mov	r0, r5
  }
    2896:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2898:	b.w	77ee <FatFile::seekSet(unsigned long)>
    289c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    289e:	cbz	r0, 28a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    28a0:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    28a2:	b.w	6164 <ExFatFile::seekSet(unsigned long long)>
  }
    28a6:	pop	{r4, r5}
    28a8:	bx	lr

000028aa <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    28aa:	movs	r3, #0
    28ac:	movs	r2, #10
    28ae:	b.w	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000028b2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    28b2:	push	{r0, r1, r4, lr}
    28b4:	mov	r4, r0
    28b6:	cbz	r1, 28d2 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    28b8:	mov	r0, r1
    28ba:	str	r1, [sp, #4]
    28bc:	bl	f310 <strlen>
    28c0:	ldr	r3, [r4, #0]
    28c2:	mov	r2, r0
    28c4:	ldr	r1, [sp, #4]
    28c6:	ldr	r3, [r3, #4]
    28c8:	mov	r0, r4
    28ca:	add	sp, #8
    28cc:	ldmia.w	sp!, {r4, lr}
    28d0:	bx	r3
    28d2:	add	sp, #8
    28d4:	pop	{r4, pc}

000028d6 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    28d6:	b.w	28b2 <Print::write(char const*) [clone .isra.0]>

000028da <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    28da:	push	{r4, lr}
    28dc:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    28de:	bl	28b2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    28e2:	mov	r0, r4
    28e4:	ldmia.w	sp!, {r4, lr}
    28e8:	b.w	cc68 <Print::println()>

000028ec <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    28ec:	ldr	r3, [r0, #56]	; 0x38
    28ee:	cbz	r3, 28f6 <FsBaseFile::sync()+0xa>
    28f0:	mov	r0, r3
    28f2:	b.w	7a38 <FatFile::sync()>
    28f6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    28f8:	cbz	r0, 28fe <FsBaseFile::sync()+0x12>
    28fa:	b.w	6d98 <ExFatFile::sync()>
  }
    28fe:	bx	lr

00002900 <timeStamp()>:
{
    2900:	push	{r4, lr}
    2902:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2904:	ldr	r4, [pc, #52]	; (293c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2906:	add	r0, sp, #16
    2908:	bl	3a9c <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    290c:	ldrsb.w	r3, [sp, #23]
    2910:	ldrsh.w	r2, [sp, #16]
    2914:	mov	r0, r4
    2916:	str	r3, [sp, #12]
    2918:	ldrsb.w	r3, [sp, #22]
    291c:	ldr	r1, [pc, #32]	; (2940 <timeStamp()+0x40>)
    291e:	str	r3, [sp, #8]
    2920:	ldrsb.w	r3, [sp, #21]
    2924:	str	r3, [sp, #4]
    2926:	ldrsb.w	r3, [sp, #19]
    292a:	str	r3, [sp, #0]
    292c:	ldrsb.w	r3, [sp, #18]
    2930:	bl	ee7c <siprintf>
}
    2934:	mov	r0, r4
    2936:	add	sp, #24
    2938:	pop	{r4, pc}
    293a:	nop
    293c:	.word	0x2002154a
    2940:	.word	0x20000cd7

00002944 <headerInit(long, long, long, int)>:
{
    2944:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2946:	ldr	r4, [pc, #196]	; (2a0c <headerInit(long, long, long, int)+0xc8>)
  int nbytes=nbits/8;
    2948:	cmp	r2, #0
    294a:	str	r3, [sp, #4]
    294c:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    294e:	ldr	r3, [pc, #192]	; (2a10 <headerInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2950:	it	lt
    2952:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2954:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    2956:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    2958:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    295a:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    295e:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2960:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2962:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    2966:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2968:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    296a:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    296c:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2970:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2974:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    2976:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    297a:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    297e:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2980:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2984:	ldr	r1, [pc, #140]	; (2a14 <headerInit(long, long, long, int)+0xd0>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    2986:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    2988:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    298a:	add.w	r3, r3, #1090519040	; 0x41000000
    298e:	subw	r3, r3, #3074	; 0xc02
    2992:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    2996:	add.w	r3, r3, #218107136	; 0xd000d00
    299a:	add.w	r3, r3, #15859712	; 0xf20000
    299e:	adds	r3, #5
    29a0:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    29a2:	mov.w	r3, #504	; 0x1f8
    29a6:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    29a8:	movs	r3, #16
    29aa:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    29ac:	mov.w	r3, #460	; 0x1cc
    29b0:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    29b2:	movs	r3, #0
    29b4:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    29b8:	movs	r3, #1
    29ba:	strh	r3, [r4, #20]
    29bc:	ldr	r3, [pc, #88]	; (2a18 <headerInit(long, long, long, int)+0xd4>)
    29be:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    29c0:	bl	f25c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    29c4:	bl	2900 <timeStamp()>
    29c8:	mov	r1, r0
    29ca:	add.w	r0, r4, #48	; 0x30
    29ce:	bl	f25c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    29d2:	ldr	r2, [sp, #4]
    29d4:	ldr	r1, [pc, #68]	; (2a1c <headerInit(long, long, long, int)+0xd8>)
    29d6:	add.w	r0, r4, #64	; 0x40
    29da:	bl	ee7c <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    29de:	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    29e0:	bl	2734 <getStore()>
    29e4:	adds	r4, #80	; 0x50
    29e6:	mov	r3, r0
    29e8:	add.w	r5, r0, #32
    29ec:	ldr	r0, [r3, #0]
    29ee:	adds	r3, #8
    29f0:	ldr.w	r1, [r3, #-4]
    29f4:	mov	r2, r4
    29f6:	cmp	r3, r5
    29f8:	stmia	r2!, {r0, r1}
    29fa:	mov	r4, r2
    29fc:	bne.n	29ec <headerInit(long, long, long, int)+0xa8>
  strcpy(&wav_hdr.info[68]," end");
    29fe:	ldr	r1, [pc, #32]	; (2a20 <headerInit(long, long, long, int)+0xdc>)
    2a00:	ldr	r0, [pc, #32]	; (2a24 <headerInit(long, long, long, int)+0xe0>)
    2a02:	bl	f25c <strcpy>
}
    2a06:	ldr	r0, [pc, #4]	; (2a0c <headerInit(long, long, long, int)+0xc8>)
    2a08:	add	sp, #12
    2a0a:	pop	{r4, r5, r6, r7, pc}
    2a0c:	.word	0x200203f4
    2a10:	.word	0x46464952
    2a14:	.word	0x20000cc6
    2a18:	.word	0x20021380
    2a1c:	.word	0x20000ccb
    2a20:	.word	0x20000cd0
    2a24:	.word	0x20020464

00002a28 <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2a28:	ldr	r3, [pc, #12]	; (2a38 <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2a2a:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2a2c:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2a30:	add	r2, r0
}
    2a32:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2a34:	str	r2, [r3, #4]
}
    2a36:	bx	lr
    2a38:	.word	0x200203f4

00002a3c <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2a3c:	ldr	r3, [pc, #76]	; (2a8c <writeHeader(char*)+0x50>)
    2a3e:	ldr	r2, [r3, #72]	; 0x48
{ 
    2a40:	push	{r4, r5, r6, lr}
    2a42:	mov	r6, r0
    2a44:	cbz	r2, 2a7a <writeHeader(char*)+0x3e>
    2a46:	ldr	r4, [r2, #20]
    2a48:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2a4a:	mov	r2, r4
    2a4c:	mov	r3, r5
    2a4e:	ldr	r1, [pc, #64]	; (2a90 <writeHeader(char*)+0x54>)
    2a50:	ldr	r0, [pc, #64]	; (2a94 <writeHeader(char*)+0x58>)
    2a52:	bl	cca0 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2a56:	movs	r3, #0
    2a58:	movs	r2, #0
    2a5a:	ldr	r0, [pc, #60]	; (2a98 <writeHeader(char*)+0x5c>)
    2a5c:	bl	288a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2a60:	mov.w	r2, #512	; 0x200
    2a64:	mov	r1, r6
    2a66:	ldr	r0, [pc, #36]	; (2a8c <writeHeader(char*)+0x50>)
    2a68:	bl	1f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2a6c:	mov	r2, r4
    2a6e:	mov	r3, r5
    2a70:	ldr	r0, [pc, #36]	; (2a98 <writeHeader(char*)+0x5c>)
}
    2a72:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2a76:	b.w	288a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2a7a:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2a7c:	cbz	r3, 2a84 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2a7e:	ldrd	r4, r5, [r3]
    2a82:	b.n	2a4a <writeHeader(char*)+0xe>
    2a84:	mov	r4, r3
    2a86:	mov	r5, r3
    2a88:	b.n	2a4a <writeHeader(char*)+0xe>
    2a8a:	nop
    2a8c:	.word	0x20020bb8
    2a90:	.word	0x20000d95
    2a94:	.word	0x20001db8
    2a98:	.word	0x20020bc8

00002a9c <makeHeader(long*)>:
{
    2a9c:	push	{r4, lr}
    2a9e:	sub	sp, #32
    2aa0:	mov	r4, r0
    rtc_get_datetime(&t);
    2aa2:	add	r0, sp, #24
    2aa4:	bl	3a9c <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2aa8:	ldrsb.w	r3, [sp, #31]
    2aac:	ldr	r2, [pc, #124]	; (2b2c <makeHeader(long*)+0x90>)
    2aae:	mov	r0, r4
    2ab0:	str	r3, [sp, #16]
    2ab2:	ldrsb.w	r3, [sp, #30]
    2ab6:	ldr	r1, [pc, #120]	; (2b30 <makeHeader(long*)+0x94>)
    2ab8:	str	r3, [sp, #12]
    2aba:	ldrsb.w	r3, [sp, #29]
    2abe:	str	r3, [sp, #8]
    2ac0:	ldrsb.w	r3, [sp, #27]
    2ac4:	str	r3, [sp, #4]
    2ac6:	ldrsb.w	r3, [sp, #26]
    2aca:	str	r3, [sp, #0]
    2acc:	ldrsh.w	r3, [sp, #24]
    2ad0:	bl	ee7c <siprintf>
    header[5] = 20;          // SW version
    2ad4:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2ad6:	movs	r0, #1
    header[5] = 20;          // SW version
    2ad8:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2ada:	ldr	r3, [pc, #88]	; (2b34 <makeHeader(long*)+0x98>)
    header[8] = NCHAN_ACQ;
    2adc:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    2ade:	ldr	r3, [r3, #0]
    2ae0:	str	r3, [r4, #24]
    header[7] = fsamp;
    2ae2:	ldr	r3, [pc, #84]	; (2b38 <makeHeader(long*)+0x9c>)
    2ae4:	ldr	r3, [r3, #0]
    2ae6:	str	r3, [r4, #28]
    header[9] = t_acq;
    2ae8:	ldr	r3, [pc, #80]	; (2b3c <makeHeader(long*)+0xa0>)
    2aea:	ldr	r3, [r3, #0]
    2aec:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    2aee:	ldr	r3, [pc, #80]	; (2b40 <makeHeader(long*)+0xa4>)
    2af0:	ldr	r3, [r3, #0]
    2af2:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2af4:	ldr	r3, [pc, #76]	; (2b44 <makeHeader(long*)+0xa8>)
    2af6:	ldr	r3, [r3, #0]
    2af8:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2afa:	ldr	r3, [pc, #76]	; (2b48 <makeHeader(long*)+0xac>)
    2afc:	ldrh	r3, [r3, #0]
    2afe:	sxth	r3, r3
    2b00:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2b02:	ldr	r3, [pc, #72]	; (2b4c <makeHeader(long*)+0xb0>)
    2b04:	ldrh	r3, [r3, #0]
    2b06:	sxth	r3, r3
    2b08:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2b0a:	ldr	r3, [pc, #68]	; (2b50 <makeHeader(long*)+0xb4>)
    2b0c:	ldrh	r3, [r3, #0]
    2b0e:	sxth	r3, r3
    2b10:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2b12:	ldr	r3, [pc, #64]	; (2b54 <makeHeader(long*)+0xb8>)
    2b14:	ldrh	r3, [r3, #0]
    2b16:	sxth	r3, r3
    2b18:	str	r3, [r4, #60]	; 0x3c
    2b1a:	ldr	r3, [pc, #60]	; (2b58 <makeHeader(long*)+0xbc>)
    2b1c:	ldr	r3, [r3, #0]
    header[16] = millis();
    2b1e:	str	r3, [r4, #64]	; 0x40
    header[127]=0x55555555;
    2b20:	mov.w	r3, #1431655765	; 0x55555555
    2b24:	str.w	r3, [r4, #508]	; 0x1fc
}
    2b28:	add	sp, #32
    2b2a:	pop	{r4, pc}
    2b2c:	.word	0x20000cc6
    2b30:	.word	0x20000cd5
    2b34:	.word	0x20007dc8
    2b38:	.word	0x2000235c
    2b3c:	.word	0x20002378
    2b40:	.word	0x2000237c
    2b44:	.word	0x20021390
    2b48:	.word	0x200213d6
    2b4c:	.word	0x2002147a
    2b50:	.word	0x20002384
    2b54:	.word	0x200213d0
    2b58:	.word	0x20021380

00002b5c <checkEndOfFile(short)>:
  if(state==RUNNING)
    2b5c:	cmp	r0, #2
{ 
    2b5e:	push	{r4, lr}
    2b60:	mov	r4, r0
  if(state==RUNNING)
    2b62:	bne.n	2b8c <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2b64:	bl	bee0 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2b68:	ldr	r3, [pc, #60]	; (2ba8 <checkEndOfFile(short)+0x4c>)
    2b6a:	ldr	r2, [r3, #0]
    2b6c:	udiv	r3, r0, r2
    2b70:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b74:	ldr	r2, [pc, #52]	; (2bac <checkEndOfFile(short)+0x50>)
    2b76:	ldr	r1, [r2, #0]
    dta = dt1;
    2b78:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2b7a:	cmp	r3, r1
    2b7c:	bcs.n	2b8c <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2b7e:	ldr	r3, [pc, #48]	; (2bb0 <checkEndOfFile(short)+0x54>)
    2b80:	ldr	r2, [pc, #48]	; (2bb4 <checkEndOfFile(short)+0x58>)
    2b82:	ldr	r4, [r3, #0]
    2b84:	ldr	r1, [r2, #0]
    2b86:	cmp	r4, r1
    2b88:	bhi.n	2b90 <checkEndOfFile(short)+0x34>
    2b8a:	movs	r4, #3
}
    2b8c:	mov	r0, r4
    2b8e:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    2b90:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b92:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    2b94:	udiv	r2, r0, r3
    2b98:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2b9c:	cmp	r0, r4
    2b9e:	ite	cc
    2ba0:	movcc	r4, #3
    2ba2:	movcs	r4, #4
    2ba4:	b.n	2b8c <checkEndOfFile(short)+0x30>
    2ba6:	nop
    2ba8:	.word	0x20002378
    2bac:	.word	0x2002083c
    2bb0:	.word	0x20021390
    2bb4:	.word	0x2000237c

00002bb8 <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2bb8:	ldr	r3, [pc, #12]	; (2bc8 <newFolder(int)+0x10>)
    2bba:	ldr	r2, [r3, #0]
    2bbc:	cmp	r2, r0
  d0=d;
    2bbe:	itte	ne
    2bc0:	strne	r0, [r3, #0]
  return 1;
    2bc2:	movne	r0, #1
  if(d==d0) return 0; // same day
    2bc4:	moveq	r0, #0
}
    2bc6:	bx	lr
    2bc8:	.word	0x20002188

00002bcc <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2bcc:	push	{r4, lr}
    2bce:	sub	sp, #24
    2bd0:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2bd2:	add	r0, sp, #16
    2bd4:	bl	3a9c <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2bd8:	ldrsb.w	r1, [sp, #21]
    2bdc:	mov	r0, r1
    2bde:	bl	2bb8 <newFolder(int)>
    2be2:	cbz	r0, 2c1e <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2be4:	ldrsb.w	r3, [sp, #19]
    2be8:	mov	r0, r4
    2bea:	ldr	r2, [pc, #56]	; (2c24 <newDirectory(char*)+0x58>)
    2bec:	str	r3, [sp, #8]
    2bee:	ldrsb.w	r3, [sp, #18]
    2bf2:	str	r1, [sp, #12]
    2bf4:	str	r3, [sp, #4]
    2bf6:	ldrsh.w	r3, [sp, #16]
    2bfa:	ldr	r1, [pc, #44]	; (2c28 <newDirectory(char*)+0x5c>)
    2bfc:	str	r3, [sp, #0]
    2bfe:	ldr	r3, [pc, #44]	; (2c2c <newDirectory(char*)+0x60>)
    2c00:	ldr	r3, [r3, #0]
    2c02:	bl	ee7c <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2c06:	ldr	r0, [pc, #40]	; (2c30 <newDirectory(char*)+0x64>)
    2c08:	bl	cc68 <Print::println()>
    2c0c:	ldr	r1, [pc, #36]	; (2c34 <newDirectory(char*)+0x68>)
    2c0e:	ldr	r0, [pc, #32]	; (2c30 <newDirectory(char*)+0x64>)
    2c10:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
    2c14:	ldr	r0, [pc, #24]	; (2c30 <newDirectory(char*)+0x64>)
    2c16:	mov	r1, r4
    2c18:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2c1c:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2c1e:	add	sp, #24
    2c20:	pop	{r4, pc}
    2c22:	nop
    2c24:	.word	0x20000da0
    2c28:	.word	0x20000da2
    2c2c:	.word	0x20007dc8
    2c30:	.word	0x20001db8
    2c34:	.word	0x200014cb

00002c38 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2c38:	push	{r4, r5, r6, r7, lr}
    2c3a:	sub	sp, #36	; 0x24
    2c3c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2c3e:	add	r0, sp, #24
    2c40:	bl	3a9c <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2c44:	ldr	r3, [pc, #104]	; (2cb0 <newFileName(char*)+0x78>)
    2c46:	ldrsb.w	r7, [sp, #31]
    2c4a:	ldrh	r2, [r3, #0]
    2c4c:	ldrsb.w	r6, [sp, #30]
    2c50:	ldrsb.w	r5, [sp, #29]
    2c54:	sxth	r2, r2
    2c56:	ldrsb.w	r0, [sp, #27]
    2c5a:	ldrsb.w	r1, [sp, #26]
    2c5e:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c62:	str	r1, [sp, #0]
    2c64:	strd	r6, r7, [sp, #12]
    2c68:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2c6c:	cbnz	r2, 2ca8 <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c6e:	ldr	r2, [pc, #68]	; (2cb4 <newFileName(char*)+0x7c>)
    2c70:	ldr	r1, [pc, #68]	; (2cb8 <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2c72:	mov	r0, r4
    2c74:	bl	ee7c <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2c78:	ldr	r0, [pc, #64]	; (2cbc <newFileName(char*)+0x84>)
    2c7a:	bl	cc68 <Print::println()>
    2c7e:	ldr	r1, [pc, #64]	; (2cc0 <newFileName(char*)+0x88>)
    2c80:	ldr	r0, [pc, #56]	; (2cbc <newFileName(char*)+0x84>)
    2c82:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
    2c86:	mov	r1, r4
    2c88:	ldr	r0, [pc, #48]	; (2cbc <newFileName(char*)+0x84>)
    2c8a:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2c8e:	ldr	r1, [pc, #52]	; (2cc4 <newFileName(char*)+0x8c>)
    2c90:	ldr	r0, [pc, #40]	; (2cbc <newFileName(char*)+0x84>)
    2c92:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
    2c96:	bl	bc98 <micros>
    2c9a:	mov	r1, r0
    2c9c:	ldr	r0, [pc, #28]	; (2cbc <newFileName(char*)+0x84>)
    2c9e:	bl	28aa <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2ca2:	movs	r0, #1
    2ca4:	add	sp, #36	; 0x24
    2ca6:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2ca8:	ldr	r2, [pc, #8]	; (2cb4 <newFileName(char*)+0x7c>)
    2caa:	ldr	r1, [pc, #28]	; (2cc8 <newFileName(char*)+0x90>)
    2cac:	b.n	2c72 <newFileName(char*)+0x3a>
    2cae:	nop
    2cb0:	.word	0x200213d6
    2cb4:	.word	0x20001468
    2cb8:	.word	0x20000d2f
    2cbc:	.word	0x20001db8
    2cc0:	.word	0x200014cb
    2cc4:	.word	0x200014d3
    2cc8:	.word	0x20000d4f

00002ccc <getAlarmTime(unsigned long)>:
{   // estimate the wakup-time in seconds 
    // input: actual time
    // output: next wakup time
    //
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2ccc:	ldr	r2, [pc, #132]	; (2d54 <getAlarmTime(unsigned long)+0x88>)
    2cce:	udiv	r3, r0, r2
    2cd2:	mls	r3, r2, r3, r0
    2cd6:	mov.w	r2, #3600	; 0xe10
    2cda:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2cde:	ldr	r2, [pc, #120]	; (2d58 <getAlarmTime(unsigned long)+0x8c>)
    2ce0:	ldr	r1, [r2, #0]
    2ce2:	cmp	r1, r3
{   // estimate the wakup-time in seconds 
    2ce4:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2ce6:	bhi.n	2cf0 <getAlarmTime(unsigned long)+0x24>
    2ce8:	ldr	r1, [pc, #112]	; (2d5c <getAlarmTime(unsigned long)+0x90>)
    2cea:	ldr	r1, [r1, #0]
    2cec:	cmp	r1, r3
    2cee:	bhi.n	2d18 <getAlarmTime(unsigned long)+0x4c>
    2cf0:	ldr	r5, [pc, #108]	; (2d60 <getAlarmTime(unsigned long)+0x94>)
    2cf2:	ldr	r1, [r5, #0]
    2cf4:	cmp	r1, r3
    2cf6:	bhi.n	2d00 <getAlarmTime(unsigned long)+0x34>
    2cf8:	ldr	r1, [pc, #104]	; (2d64 <getAlarmTime(unsigned long)+0x98>)
    2cfa:	ldr	r1, [r1, #0]
    2cfc:	cmp	r1, r3
    2cfe:	bhi.n	2d18 <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2d00:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2d02:	ldr	r1, [pc, #80]	; (2d54 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2d04:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2d06:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2d0a:	bhi.n	2d28 <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2d0c:	ldr	r6, [pc, #76]	; (2d5c <getAlarmTime(unsigned long)+0x90>)
    2d0e:	ldr	r6, [r6, #0]
    2d10:	cmp	r6, r3
    2d12:	bhi.n	2d36 <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2d14:	ldr	r0, [r5, #0]
    2d16:	b.n	2d2a <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2d18:	ldr	r2, [pc, #76]	; (2d68 <getAlarmTime(unsigned long)+0x9c>)
    2d1a:	ldr	r3, [r2, #0]
    2d1c:	udiv	r3, r0, r3
    2d20:	ldr	r0, [r2, #0]
    2d22:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2d26:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2d28:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2d2a:	mov.w	r3, #3600	; 0xe10
    2d2e:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d30:	mla	r0, r1, r4, r0
    2d34:	b.n	2d26 <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2d36:	ldr	r5, [pc, #44]	; (2d64 <getAlarmTime(unsigned long)+0x98>)
    2d38:	ldr	r6, [r5, #0]
    2d3a:	cmp	r6, r3
    2d3c:	bhi.n	2d26 <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2d3e:	ldr	r0, [r2, #0]
    2d40:	ldr	r3, [r5, #0]
    2d42:	subs	r0, r0, r3
    2d44:	mov.w	r3, #3600	; 0xe10
    2d48:	muls	r0, r3
    2d4a:	add.w	r0, r0, #86016	; 0x15000
    2d4e:	add.w	r0, r0, #384	; 0x180
    2d52:	b.n	2d30 <getAlarmTime(unsigned long)+0x64>
    2d54:	.word	0x00015180
    2d58:	.word	0x20021388
    2d5c:	.word	0x2000236c
    2d60:	.word	0x20002370
    2d64:	.word	0x20002374
    2d68:	.word	0x20021390

00002d6c <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2d6c:	ldr	r2, [pc, #12]	; (2d7c <powerDown()+0x10>)
    2d6e:	ldr	r3, [r2, #56]	; 0x38
    2d70:	orr.w	r3, r3, #64	; 0x40
    2d74:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2d76:	wfi
    2d78:	b.n	2d76 <powerDown()+0xa>
    2d7a:	nop
    2d7c:	.word	0x400d4000

00002d80 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d80:	ldr	r3, [pc, #132]	; (2e08 <do_hibernate(unsigned long)+0x88>)
{
    2d82:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2d84:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2d86:	ldr	r2, [r3, #76]	; 0x4c
    2d88:	orr.w	r2, r2, #1
    2d8c:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2d8e:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2d92:	ldr	r2, [r3, #56]	; 0x38
    2d94:	bic.w	r2, r2, #2
    2d98:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2d9a:	ldr	r2, [r3, #56]	; 0x38
    2d9c:	ands.w	r2, r2, #2
    2da0:	bne.n	2d9a <do_hibernate(unsigned long)+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2da2:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2da4:	ldr	r2, [r3, #88]	; 0x58
    2da6:	cmp	r2, #0
    2da8:	bne.n	2da4 <do_hibernate(unsigned long)+0x24>

    __disable_irq();
    2daa:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2dac:	ldr	r5, [pc, #88]	; (2e08 <do_hibernate(unsigned long)+0x88>)
    2dae:	ldr	r3, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2db0:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2db2:	ldr	r1, [r5, #84]	; 0x54
    2db4:	ldr	r2, [r5, #80]	; 0x50
    2db6:	cmp	r1, r4
    2db8:	bne.n	2dae <do_hibernate(unsigned long)+0x2e>
    2dba:	cmp	r2, r3
    2dbc:	bne.n	2dae <do_hibernate(unsigned long)+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2dbe:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" ");
    2dc0:	ldr	r0, [pc, #72]	; (2e0c <do_hibernate(unsigned long)+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2dc2:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" ");
    2dc6:	mov	r1, r4
    2dc8:	bl	28aa <Print::print(unsigned long) [clone .isra.0]>
    2dcc:	ldr	r1, [pc, #64]	; (2e10 <do_hibernate(unsigned long)+0x90>)
    2dce:	ldr	r0, [pc, #60]	; (2e0c <do_hibernate(unsigned long)+0x8c>)
    2dd0:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    2dd4:	mov	r0, r4
    2dd6:	bl	2ccc <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    2dda:	mov	r1, r0
    2ddc:	mov	r4, r0
    2dde:	ldr	r0, [pc, #44]	; (2e0c <do_hibernate(unsigned long)+0x8c>)
    2de0:	bl	28aa <Print::print(unsigned long) [clone .isra.0]>
    2de4:	ldr	r0, [pc, #36]	; (2e0c <do_hibernate(unsigned long)+0x8c>)
    2de6:	bl	cc68 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    2dea:	ldr	r3, [pc, #28]	; (2e08 <do_hibernate(unsigned long)+0x88>)
    SNVS_LPTAR = secs;
    2dec:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2dee:	ldr	r2, [r3, #88]	; 0x58
    2df0:	cmp	r2, r4
    2df2:	bne.n	2dee <do_hibernate(unsigned long)+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2df4:	orr.w	r6, r6, #2
    2df8:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2dfa:	ldr	r2, [r3, #56]	; 0x38
    2dfc:	lsls	r2, r2, #30
    2dfe:	bpl.n	2dfa <do_hibernate(unsigned long)+0x7a>

    __enable_irq();
    2e00:	cpsie	i
  
    //
    powerDown(); 
    2e02:	bl	2d6c <powerDown()>
    2e06:	nop
    2e08:	.word	0x400d4000
    2e0c:	.word	0x20001db8
    2e10:	.word	0x200014d3

00002e14 <storeData(short)>:
{
    2e14:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2e16:	mov	r4, r0
{
    2e18:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2e1a:	cmp	r0, #0
    2e1c:	bne.w	2f26 <storeData(short)+0x112>
        if(newDirectory(dirName))
    2e20:	ldr	r0, [pc, #512]	; (3024 <storeData(short)+0x210>)
    2e22:	bl	2bcc <newDirectory(char*)>
    2e26:	cmp	r0, #0
    2e28:	beq.n	2ec4 <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2e2a:	ldr	r5, [pc, #508]	; (3028 <storeData(short)+0x214>)
    2e2c:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2e2e:	ldr.w	r1, [r3, #1152]	; 0x480
    2e32:	cbz	r1, 2e62 <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    2e34:	mov	r3, r4
    2e36:	ldr	r2, [pc, #492]	; (3024 <storeData(short)+0x210>)
    2e38:	mov	r0, sp
    2e3a:	str	r4, [sp, #0]
    2e3c:	bl	7b66 <FatFile::open(FatVolume*, char const*, int)>
    2e40:	cbnz	r0, 2ea0 <storeData(short)+0x8c>
    2e42:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2e44:	ldr.w	r1, [r3, #1152]	; 0x480
    2e48:	cbnz	r1, 2e7a <storeData(short)+0x66>
    2e4a:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2e4e:	cbz	r0, 2e8e <storeData(short)+0x7a>
  ExFatFile() {}
    2e50:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2e52:	movs	r3, #1
    2e54:	add.w	r1, r0, #1096	; 0x448
    2e58:	ldr	r2, [pc, #456]	; (3024 <storeData(short)+0x210>)
    2e5a:	mov	r0, sp
    2e5c:	bl	6ed2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2e60:	b.n	2e8c <storeData(short)+0x78>
    2e62:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2e66:	cmp	r0, #0
    2e68:	beq.n	2e42 <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    2e6a:	mov	r3, r1
    2e6c:	str	r1, [sp, #48]	; 0x30
    2e6e:	ldr	r2, [pc, #436]	; (3024 <storeData(short)+0x210>)
    2e70:	mov	r1, r0
    2e72:	mov	r0, sp
    2e74:	bl	665a <ExFatFile::open(ExFatVolume*, char const*, int)>
    2e78:	b.n	2e40 <storeData(short)+0x2c>
    2e7a:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2e7c:	ldr	r2, [pc, #420]	; (3024 <storeData(short)+0x210>)
    2e7e:	add.w	r1, r1, #1096	; 0x448
    2e82:	mov	r0, sp
    2e84:	str	r3, [sp, #0]
    2e86:	movs	r3, #1
    2e88:	bl	7ce4 <FatFile::mkdir(FatFile*, char const*, bool)>
    2e8c:	cbnz	r0, 2ea0 <storeData(short)+0x8c>
    2e8e:	ldr	r1, [pc, #412]	; (302c <storeData(short)+0x218>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2e90:	ldr	r0, [pc, #412]	; (3030 <storeData(short)+0x21c>)
    2e92:	bl	28da <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2e96:	mov.w	r4, #4294967295
}
    2e9a:	mov	r0, r4
    2e9c:	add	sp, #84	; 0x54
    2e9e:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2ea0:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2ea2:	ldr.w	r0, [r3, #1152]	; 0x480
    2ea6:	cbz	r0, 2eb4 <storeData(short)+0xa0>
    2ea8:	ldr	r1, [pc, #376]	; (3024 <storeData(short)+0x210>)
    2eaa:	bl	853c <FatVolume::chdir(char const*)>
    2eae:	cbnz	r0, 2ec4 <storeData(short)+0xb0>
    2eb0:	ldr	r1, [pc, #384]	; (3034 <storeData(short)+0x220>)
    2eb2:	b.n	2e90 <storeData(short)+0x7c>
    2eb4:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2eb8:	cmp	r0, #0
    2eba:	beq.n	2eb0 <storeData(short)+0x9c>
    2ebc:	ldr	r1, [pc, #356]	; (3024 <storeData(short)+0x210>)
    2ebe:	bl	6aa4 <ExFatVolume::chdir(char const*)>
    2ec2:	b.n	2eae <storeData(short)+0x9a>
        if(newFileName(fileName))
    2ec4:	ldr	r0, [pc, #368]	; (3038 <storeData(short)+0x224>)
    2ec6:	bl	2c38 <newFileName(char*)>
    2eca:	cmp	r0, #0
    2ecc:	beq.n	2e96 <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    2ece:	ldr	r1, [pc, #344]	; (3028 <storeData(short)+0x214>)
    2ed0:	movw	r3, #16898	; 0x4202
    2ed4:	ldr	r2, [pc, #352]	; (3038 <storeData(short)+0x224>)
    2ed6:	mov	r0, sp
    2ed8:	ldr	r1, [r1, #0]
    2eda:	bl	8ecc <FsVolume::open(char const*, int)>
class Print
    2ede:	ldr	r4, [pc, #348]	; (303c <storeData(short)+0x228>)
    2ee0:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2ee2:	add	r1, sp, #16
    2ee4:	add.w	r0, r4, #16
    2ee8:	str	r3, [r4, #4]
class Stream : public Print
    2eea:	ldr	r3, [sp, #8]
    2eec:	str	r3, [r4, #8]
    2eee:	ldrb.w	r3, [sp, #12]
    2ef2:	strb	r3, [r4, #12]
    2ef4:	bl	8cc2 <FsBaseFile::operator=(FsBaseFile const&)>
    2ef8:	mov	r0, sp
    2efa:	bl	f44 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2efe:	ldr	r3, [r4, #72]	; 0x48
    2f00:	cbz	r3, 2f1c <storeData(short)+0x108>
    {   nbuf=0;
    2f02:	ldr	r3, [pc, #316]	; (3040 <storeData(short)+0x22c>)
    2f04:	movs	r2, #0
    2f06:	str	r2, [r3, #0]
        if(proc==0)
    2f08:	ldr	r3, [pc, #312]	; (3044 <storeData(short)+0x230>)
    2f0a:	ldrh	r3, [r3, #0]
    2f0c:	sxth	r3, r3
    2f0e:	cmp	r3, #0
    2f10:	beq.n	2f80 <storeData(short)+0x16c>
          makeHeader(fileHeader);
    2f12:	ldr	r0, [pc, #308]	; (3048 <storeData(short)+0x234>)
    2f14:	bl	2a9c <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2f18:	ldr	r1, [pc, #300]	; (3048 <storeData(short)+0x234>)
    2f1a:	b.n	2f92 <storeData(short)+0x17e>
    2f1c:	ldr	r3, [r4, #76]	; 0x4c
    2f1e:	cmp	r3, #0
    2f20:	bne.n	2f02 <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    2f22:	ldr	r1, [pc, #296]	; (304c <storeData(short)+0x238>)
    2f24:	b.n	2e90 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    2f26:	cmp	r0, #1
    2f28:	beq.n	2f02 <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    2f2a:	cmp	r0, #2
    2f2c:	beq.n	2fa2 <storeData(short)+0x18e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2f2e:	subs	r3, r4, #3
    2f30:	uxth	r3, r3
    2f32:	cmp	r3, #2
    2f34:	bhi.n	2e9a <storeData(short)+0x86>
    2f36:	ldr	r3, [pc, #260]	; (303c <storeData(short)+0x228>)
    2f38:	ldr	r2, [r3, #72]	; 0x48
    2f3a:	cbnz	r2, 2f40 <storeData(short)+0x12c>
    2f3c:	ldr	r3, [r3, #76]	; 0x4c
    2f3e:	cbz	r3, 2f60 <storeData(short)+0x14c>
        {   if(proc==0)
    2f40:	ldr	r3, [pc, #256]	; (3044 <storeData(short)+0x230>)
    2f42:	ldrh	r3, [r3, #0]
    2f44:	sxth	r3, r3
    2f46:	cbnz	r3, 2f5a <storeData(short)+0x146>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2f48:	ldr	r3, [pc, #244]	; (3040 <storeData(short)+0x22c>)
    2f4a:	mov.w	r0, #49152	; 0xc000
    2f4e:	ldr	r3, [r3, #0]
    2f50:	muls	r0, r3
    2f52:	bl	2a28 <headerUpdate(long)>
              writeHeader(hdr);
    2f56:	bl	2a3c <writeHeader(char*)>
            file.close();
    2f5a:	ldr	r0, [pc, #244]	; (3050 <storeData(short)+0x23c>)
    2f5c:	bl	8c98 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2f60:	cmp	r4, #4
    2f62:	bne.n	3010 <storeData(short)+0x1fc>
        { if( t_rep > t_on) 
    2f64:	ldr	r4, [pc, #236]	; (3054 <storeData(short)+0x240>)
    2f66:	ldr	r3, [pc, #240]	; (3058 <storeData(short)+0x244>)
    2f68:	ldr	r2, [r4, #0]
    2f6a:	ldr	r3, [r3, #0]
    2f6c:	cmp	r2, r3
    2f6e:	bls.n	301e <storeData(short)+0x20a>
            adcReset();
    2f70:	bl	3548 <adcReset()>
            acqPower(LOW);
    2f74:	movs	r0, #0
    2f76:	bl	3534 <acqPower(int)>
            do_hibernate(t_rep);
    2f7a:	ldr	r0, [r4, #0]
    2f7c:	bl	2d80 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2f80:	ldr	r3, [pc, #216]	; (305c <storeData(short)+0x248>)
    2f82:	movs	r1, #1
    2f84:	movs	r2, #32
    2f86:	ldr	r0, [r3, #0]
    2f88:	ldr	r3, [pc, #212]	; (3060 <storeData(short)+0x24c>)
    2f8a:	ldr	r3, [r3, #0]
    2f8c:	bl	2944 <headerInit(long, long, long, int)>
    2f90:	mov	r1, r0
    return BaseFile::write(buffer, size);
    2f92:	mov.w	r2, #512	; 0x200
    2f96:	ldr	r0, [pc, #184]	; (3050 <storeData(short)+0x23c>)
    2f98:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    2f9c:	cmp.w	r0, #512	; 0x200
    2fa0:	blt.n	300c <storeData(short)+0x1f8>
    2fa2:	mov.w	r2, #49152	; 0xc000
    2fa6:	ldr	r1, [pc, #188]	; (3064 <storeData(short)+0x250>)
    2fa8:	ldr	r0, [pc, #164]	; (3050 <storeData(short)+0x23c>)
    2faa:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2fae:	cmp.w	r0, #49152	; 0xc000
    2fb2:	mov	r4, r0
    2fb4:	ldr	r5, [pc, #136]	; (3040 <storeData(short)+0x22c>)
    2fb6:	bcs.n	3002 <storeData(short)+0x1ee>
        { Serial.print(">"); 
    2fb8:	ldr	r1, [pc, #172]	; (3068 <storeData(short)+0x254>)
    2fba:	ldr	r0, [pc, #116]	; (3030 <storeData(short)+0x21c>)
    2fbc:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    2fc0:	mov	r1, r4
    2fc2:	ldr	r0, [pc, #108]	; (3030 <storeData(short)+0x21c>)
          status=DOCLOSE; 
    2fc4:	movs	r4, #3
          Serial.print(nd); 
    2fc6:	bl	28aa <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    2fca:	ldr	r1, [pc, #160]	; (306c <storeData(short)+0x258>)
    2fcc:	ldr	r0, [pc, #96]	; (3030 <storeData(short)+0x21c>)
    2fce:	bl	28d6 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2fd2:	movs	r1, #2
    2fd4:	ldr	r0, [pc, #88]	; (3030 <storeData(short)+0x21c>)
    2fd6:	bl	cc56 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2fda:	ldr	r0, [pc, #84]	; (3030 <storeData(short)+0x21c>)
    2fdc:	bl	cc68 <Print::println()>
        disk_count++;
    2fe0:	ldr	r2, [pc, #140]	; (3070 <storeData(short)+0x25c>)
    2fe2:	ldr	r3, [r2, #0]
    2fe4:	adds	r3, #1
    2fe6:	str	r3, [r2, #0]
    2fe8:	mov.w	r2, #1000	; 0x3e8
    2fec:	ldr	r3, [r5, #0]
    2fee:	udiv	r1, r3, r2
    2ff2:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2ff6:	cmp	r3, #0
    2ff8:	bne.n	2f2e <storeData(short)+0x11a>
    BaseFile::sync();
    2ffa:	ldr	r0, [pc, #84]	; (3050 <storeData(short)+0x23c>)
    2ffc:	bl	28ec <FsBaseFile::sync()>
  }
    3000:	b.n	2f2e <storeData(short)+0x11a>
          nbuf++;
    3002:	ldr	r3, [r5, #0]
    3004:	movs	r4, #2
    3006:	adds	r3, #1
    3008:	str	r3, [r5, #0]
    300a:	b.n	2fe0 <storeData(short)+0x1cc>
        { status = DOCLOSE;
    300c:	movs	r4, #3
    300e:	b.n	2f2e <storeData(short)+0x11a>
        else if(status==DOCLOSE)
    3010:	cmp	r4, #3
    3012:	beq.n	301e <storeData(short)+0x20a>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    3014:	ldr	r3, [pc, #92]	; (3074 <storeData(short)+0x260>)
    3016:	movs	r2, #8
    3018:	str.w	r2, [r3, #136]	; 0x88
    301c:	b.n	2e96 <storeData(short)+0x82>
            status = CLOSED;   // do not hibernate
    301e:	movs	r4, #0
    3020:	b.n	2e9a <storeData(short)+0x86>
    3022:	nop
    3024:	.word	0x200214a6
    3028:	.word	0x20002364
    302c:	.word	0x2000107c
    3030:	.word	0x20001db8
    3034:	.word	0x20001088
    3038:	.word	0x200214f6
    303c:	.word	0x20020bb8
    3040:	.word	0x20020c34
    3044:	.word	0x200213d6
    3048:	.word	0x20013dd0
    304c:	.word	0x20001094
    3050:	.word	0x20020bc8
    3054:	.word	0x20021390
    3058:	.word	0x2000237c
    305c:	.word	0x2000235c
    3060:	.word	0x20007dc8
    3064:	.word	0x20007dd0
    3068:	.word	0x200010a6
    306c:	.word	0x200014d3
    3070:	.word	0x20020b98
    3074:	.word	0x42004000

00003078 <saveData(short)>:
    if(status==STOPPED) 
    3078:	adds	r3, r0, #1
{
    307a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    307e:	mov	r4, r0
    if(status==STOPPED) 
    3080:	bne.n	30aa <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    3082:	bl	2758 <queue_isBusy()>
    3086:	mov	r5, r0
    3088:	cmp	r0, #0
    308a:	bne.n	3082 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    308c:	ldr	r0, [pc, #180]	; (3144 <saveData(short)+0xcc>)
    308e:	bl	27c4 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3092:	ldr	r3, [pc, #176]	; (3144 <saveData(short)+0xcc>)
    3094:	ldr	r2, [pc, #176]	; (3148 <saveData(short)+0xd0>)
    3096:	ldr.w	r1, [r3], #4
    309a:	str.w	r1, [r2, r5, lsl #2]
    309e:	adds	r5, #1
    30a0:	cmp	r5, #8
    30a2:	bne.n	3096 <saveData(short)+0x1e>
}
    30a4:	mov	r0, r4
    30a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    30aa:	cmp	r0, #0
    30ac:	blt.n	30a4 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    30ae:	bl	2b5c <checkEndOfFile(short)>
    30b2:	mov	r4, r0
    if(getDataCount() >= NDBL)
    30b4:	bl	273c <getDataCount()>
    30b8:	cmp	r0, #95	; 0x5f
    30ba:	bls.n	30a4 <saveData(short)+0x2c>
      if(proc==0)
    30bc:	ldr	r3, [pc, #140]	; (314c <saveData(short)+0xd4>)
    30be:	ldrh	r5, [r3, #0]
    30c0:	sxth	r5, r5
    30c2:	cbnz	r5, 3110 <saveData(short)+0x98>
    30c4:	ldr	r7, [pc, #124]	; (3144 <saveData(short)+0xcc>)
    30c6:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    30c8:	bl	2758 <queue_isBusy()>
    30cc:	mov	r6, r0
    30ce:	cmp	r0, #0
    30d0:	bne.n	30c8 <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    30d2:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    30d4:	mov	r0, r8
    30d6:	bl	27c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    30da:	add.w	r8, r8, #512	; 0x200
    30de:	cmp	r5, #96	; 0x60
    30e0:	bne.n	30c8 <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    30e2:	ldr	r3, [pc, #100]	; (3148 <saveData(short)+0xd0>)
    30e4:	ldr.w	r2, [r7], #4
    30e8:	str.w	r2, [r3, r6, lsl #2]
    30ec:	adds	r6, #1
    30ee:	cmp	r6, #8
    30f0:	bne.n	30e4 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    30f2:	mov.w	r2, #49152	; 0xc000
    30f6:	ldr	r1, [pc, #76]	; (3144 <saveData(short)+0xcc>)
    30f8:	ldr	r0, [pc, #84]	; (3150 <saveData(short)+0xd8>)
    30fa:	bl	a79c <memcpy>
      if(haveStore)
    30fe:	ldr	r3, [pc, #84]	; (3154 <saveData(short)+0xdc>)
    3100:	ldr	r3, [r3, #0]
    3102:	cmp	r3, #0
    3104:	beq.n	30a4 <saveData(short)+0x2c>
        status=storeData(status);
    3106:	mov	r0, r4
}
    3108:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    310c:	b.w	2e14 <storeData(short)>
    3110:	ldr	r6, [pc, #60]	; (3150 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    3112:	movs	r7, #0
      if(proc==0)
    3114:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3116:	bl	2758 <queue_isBusy()>
    311a:	mov	r5, r0
    311c:	cmp	r0, #0
    311e:	bne.n	3116 <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    3120:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    3122:	mov	r0, r8
    3124:	bl	27c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    3128:	add.w	r8, r8, #512	; 0x200
    312c:	cmp	r7, #96	; 0x60
    312e:	bne.n	3116 <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3130:	ldr	r3, [pc, #20]	; (3148 <saveData(short)+0xd0>)
    3132:	ldr.w	r2, [r6], #4
    3136:	str.w	r2, [r3, r5, lsl #2]
    313a:	adds	r5, #1
    313c:	cmp	r5, #8
    313e:	bne.n	3132 <saveData(short)+0xba>
    3140:	b.n	30fe <saveData(short)+0x86>
    3142:	nop
    3144:	.word	0x20013fdc
    3148:	.word	0x20020c0c
    314c:	.word	0x200213d6
    3150:	.word	0x20007dd0
    3154:	.word	0x20020c08

00003158 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    3158:	ldr	r0, [pc, #28]	; (3178 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    315a:	movs	r3, #0
    315c:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3160:	ldr	r1, [pc, #24]	; (317c <_GLOBAL__sub_I_t_acq+0x24>)
    3162:	strb	r3, [r0, #12]
    3164:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    3168:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    316c:	ldr	r3, [pc, #16]	; (3180 <_GLOBAL__sub_I_t_acq+0x28>)
    316e:	ldr	r2, [pc, #20]	; (3184 <_GLOBAL__sub_I_t_acq+0x2c>)
    3170:	str	r3, [r0, #0]
    3172:	b.w	ce90 <__aeabi_atexit>
    3176:	nop
    3178:	.word	0x20020bb8
    317c:	.word	0x00000f45
    3180:	.word	0x20000554
    3184:	.word	0x20002190

00003188 <filing_init()>:
{
    3188:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    318c:	ldr	r3, [pc, #132]	; (3214 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    318e:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    3190:	ldr	r2, [pc, #132]	; (3218 <filing_init()+0x90>)
    3192:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    3196:	ldr.w	r9, [pc, #156]	; 3234 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    319a:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    319e:	ldr.w	r8, [pc, #152]	; 3238 <filing_init()+0xb0>
    31a2:	ldr	r7, [pc, #120]	; (321c <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    31a4:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    31a6:	ldr	r3, [pc, #120]	; (3220 <filing_init()+0x98>)
    31a8:	ldr	r2, [pc, #120]	; (3224 <filing_init()+0x9c>)
    31aa:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    31ac:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    31b0:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    31b2:	movs	r1, #0
    31b4:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    31b8:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    31bc:	strb.w	r1, [r5, #1224]	; 0x4c8
    31c0:	mov	r0, r6
    31c2:	bl	a0b4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    31c6:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    31c8:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    31cc:	bl	97b0 <SdioCard::errorCode() const>
    31d0:	cbnz	r0, 31f4 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    31d2:	movs	r3, #1
    31d4:	ldr.w	r1, [r5, #1164]	; 0x48c
    31d8:	mov	r0, r5
    31da:	mov	r2, r3
    31dc:	bl	8df8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    31e0:	cbz	r0, 31f4 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    31e2:	ldr	r0, [pc, #56]	; (321c <filing_init()+0x94>)
    31e4:	ldr	r1, [pc, #64]	; (3228 <filing_init()+0xa0>)
    31e6:	bl	28da <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    31ea:	movs	r0, #1
    31ec:	ldr	r3, [pc, #60]	; (322c <filing_init()+0xa4>)
    31ee:	str	r0, [r3, #0]
}
    31f0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    31f4:	mov	r1, r8
    31f6:	mov	r0, r7
    31f8:	bl	28da <Print::println(char const*) [clone .isra.0]>
      delay(100);
    31fc:	movs	r0, #100	; 0x64
    31fe:	bl	bce4 <delay>
  for(int ii=0; ii<5;ii++)
    3202:	subs	r4, #1
    3204:	bne.n	31ac <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    3206:	ldr	r0, [pc, #20]	; (321c <filing_init()+0x94>)
    3208:	ldr	r1, [pc, #36]	; (3230 <filing_init()+0xa8>)
    320a:	bl	28da <Print::println(char const*) [clone .isra.0]>
  return 0;
    320e:	mov	r0, r4
    3210:	b.n	31f0 <filing_init()+0x68>
    3212:	nop
    3214:	.word	0x401f4400
    3218:	.word	0x20007dc8
    321c:	.word	0x20001db8
    3220:	.word	0x200207fc
    3224:	.word	0x00002819
    3228:	.word	0x20000cf1
    322c:	.word	0x20020c08
    3230:	.word	0x20000d13
    3234:	.word	0x20002364
    3238:	.word	0x20000d03

0000323c <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    323c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3240:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3242:	bl	bee0 <rtc_get>
    3246:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    3248:	bl	bc98 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    324c:	ldr	r3, [pc, #604]	; (34ac <compress(void*)+0x270>)
  t1 = micros();
    324e:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3250:	movs	r2, #0
    3252:	ldr	r3, [r3, #0]
    3254:	ldr.w	r1, [r4, r2, lsl #2]
    3258:	str.w	r1, [r3, r2, lsl #2]
    325c:	adds	r2, #1
    325e:	cmp	r2, #128	; 0x80
    3260:	bne.n	3254 <compress(void*)+0x18>
    3262:	subs	r4, #4
    3264:	add.w	r0, r3, #508	; 0x1fc
    3268:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    326a:	ldr.w	r1, [r2, #4]!
    326e:	ldr.w	r5, [r4, #4]!
    3272:	cmp	r0, r2
    3274:	sub.w	r1, r1, r5
    3278:	str	r1, [r2, #0]
    327a:	bne.n	326a <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    327c:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    327e:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3282:	cmp	r1, #0
    3284:	it	lt
    3286:	neglt	r1, r1
    3288:	cmp	r2, r1
    328a:	it	lt
    328c:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    328e:	cmp	r0, r3
    3290:	bne.n	327e <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3292:	movs	r4, #2
    3294:	movs	r1, #1
    3296:	subs	r3, r4, #1
    3298:	lsl.w	r3, r1, r3
    329c:	cmp	r3, r2
    329e:	bgt.n	32a6 <compress(void*)+0x6a>
    32a0:	adds	r4, #1
    32a2:	cmp	r4, #24
    32a4:	bne.n	3296 <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    32a6:	ldr	r2, [pc, #520]	; (34b0 <compress(void*)+0x274>)
    32a8:	subs	r1, r4, #1
    32aa:	ldr.w	r8, [pc, #536]	; 34c4 <compress(void*)+0x288>
    32ae:	ldr.w	r3, [r2, r1, lsl #2]
    32b2:	mov	fp, r8
    32b4:	adds	r3, #1
    32b6:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    32ba:	ldr	r3, [pc, #504]	; (34b4 <compress(void*)+0x278>)
    32bc:	ldr	r2, [r3, #0]
    32be:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    32c0:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    32c2:	it	hi
    32c4:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    32c6:	movs	r3, #1
    32c8:	lsl.w	r0, r3, r4
    32cc:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    32ce:	ldr.w	r1, [r2, #4]!
    32d2:	adds	r3, #1
    32d4:	ands	r1, r0
    32d6:	cmp	r3, #128	; 0x80
    32d8:	str	r1, [r2, #0]
    32da:	bne.n	32ce <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32dc:	ldr	r5, [pc, #472]	; (34b8 <compress(void*)+0x27c>)
    32de:	mov.w	r2, #512	; 0x200
    32e2:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    32e4:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    32e8:	mov	r0, r5
    32ea:	bl	a758 <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    32ee:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    32f2:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    32f4:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    32f8:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    32fa:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    32fe:	ldr	r2, [pc, #444]	; (34bc <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3300:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    3302:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    3304:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    3308:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    330c:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    3310:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    3312:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3314:	str	r3, [r5, #24]
    3316:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3318:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    331c:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    331e:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3320:	str.w	r3, [fp]
  int nx = MBIT;
    3324:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3326:	str	r0, [r5, #20]
  {   nx -= nb;
    3328:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    332c:	ldr.w	sl, [r5, r1, lsl #2]
    3330:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3334:	cmp.w	lr, #0
    3338:	ble.n	3382 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    333a:	lsl.w	r2, r2, lr
    333e:	mov	r3, lr
    3340:	orr.w	r2, r2, sl
    3344:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3348:	add.w	ip, ip, #1
    334c:	cmp.w	ip, #128	; 0x80
    3350:	bne.n	3328 <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3352:	ldr.w	r8, [pc, #372]	; 34c8 <compress(void*)+0x28c>
    3356:	ldr.w	r4, [r8]
    335a:	add.w	r9, r4, r6
    335e:	cmp.w	r9, #128	; 0x80
    3362:	bgt.n	33b2 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3364:	ldr	r0, [pc, #344]	; (34c0 <compress(void*)+0x284>)
    3366:	lsls	r2, r6, #2
    3368:	ldr	r1, [pc, #332]	; (34b8 <compress(void*)+0x27c>)
    336a:	add.w	r0, r0, r4, lsl #2
    336e:	bl	a79c <memcpy>
    3372:	str.w	r9, [r8]
  int ret=1;
    3376:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    337a:	mov	r0, r9
    337c:	add	sp, #12
    337e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3382:	add.w	r9, r1, #1
      else if(nx==0) 
    3386:	bne.n	3396 <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    3388:	orr.w	r2, sl, r2
          nx=MBIT;
    338c:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    338e:	str.w	r2, [r5, r1, lsl #2]
    3392:	mov	r1, r9
    3394:	b.n	3348 <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3396:	subs	r3, r4, r3
    3398:	lsr.w	r3, r2, r3
    339c:	orr.w	r3, r3, sl
    33a0:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    33a4:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    33a8:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    33aa:	lsls	r2, r3
    33ac:	str.w	r2, [r5, r9, lsl #2]
    33b0:	b.n	3348 <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    33b2:	cmp	r4, #122	; 0x7a
    33b4:	ble.n	3400 <compress(void*)+0x1c4>
    33b6:	movs	r2, #0
    33b8:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    33ba:	ldr	r1, [pc, #260]	; (34c0 <compress(void*)+0x284>)
    33bc:	mov	r0, r2
    33be:	cmp	r3, #127	; 0x7f
    33c0:	bls.n	33f6 <compress(void*)+0x1ba>
    33c2:	cmp	r4, #128	; 0x80
    33c4:	rsb	r3, r4, #128	; 0x80
    33c8:	it	gt
    33ca:	movgt	r3, #0
    33cc:	add	r3, r4
    33ce:	cbz	r2, 33d4 <compress(void*)+0x198>
    33d0:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    33d4:	ldr	r0, [pc, #232]	; (34c0 <compress(void*)+0x284>)
    33d6:	bl	2764 <pushData(unsigned long*)>
    33da:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33de:	mov.w	r2, r6, lsl #2
    33e2:	ldr	r1, [pc, #212]	; (34b8 <compress(void*)+0x27c>)
    33e4:	ldr	r0, [pc, #216]	; (34c0 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    33e6:	it	ne
    33e8:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    33ec:	bl	a79c <memcpy>
    33f0:	str.w	r6, [r8]
    33f4:	b.n	337a <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    33f6:	str.w	r0, [r1, r3, lsl #2]
    33fa:	movs	r2, #1
    33fc:	adds	r3, #1
    33fe:	b.n	33be <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3400:	rsb	r3, r4, #122	; 0x7a
    3404:	ldr	r1, [pc, #176]	; (34b8 <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3406:	ldr	r2, [pc, #184]	; (34c0 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3408:	orr.w	r3, r3, r0, lsl #16
    340c:	mov	r0, r1
    340e:	str	r3, [r5, #20]
    3410:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3412:	ldr.w	ip, [r0], #4
    3416:	str.w	ip, [r2, r3, lsl #2]
    341a:	adds	r3, #1
    341c:	cmp	r3, #128	; 0x80
    341e:	bne.n	3412 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    3420:	ldr	r0, [pc, #156]	; (34c0 <compress(void*)+0x284>)
    3422:	rsb	sl, r4, #128	; 0x80
    3426:	str	r1, [sp, #4]
    3428:	str.w	r3, [r8]
    342c:	bl	2764 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3430:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3432:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    3436:	subs.w	r9, r0, #0
    343a:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    343c:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3440:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3444:	it	ne
    3446:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    344a:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    344c:	lsls	r3, r3, #16
    344e:	orrs	r3, r7
    3450:	ldr	r7, [pc, #108]	; (34c0 <compress(void*)+0x284>)
    3452:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3454:	mov	r2, r7
    3456:	movs	r3, #0
    3458:	str.w	r3, [r8]
    345c:	subs	r0, #1
    345e:	bne.n	348e <compress(void*)+0x252>
    3460:	cbz	r3, 3468 <compress(void*)+0x22c>
    3462:	movs	r3, #6
    3464:	str.w	r3, [r8]
    3468:	ldr.w	r1, [r8]
    346c:	movs	r3, #0
    346e:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3472:	cmp	sl, r6
    3474:	blt.n	349a <compress(void*)+0x25e>
    3476:	subs	r4, #128	; 0x80
    3478:	add	r4, r6
    347a:	cmp	r6, fp
    347c:	it	lt
    347e:	movlt	r4, #0
    3480:	add	r4, r1
    3482:	cmp	r3, #0
    3484:	beq.w	337a <compress(void*)+0x13e>
    3488:	str.w	r4, [r8]
  return ret;
    348c:	b.n	337a <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    348e:	ldr.w	r3, [r1], #4
    3492:	str.w	r3, [r7], #4
    3496:	movs	r3, #1
    3498:	b.n	345c <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    349a:	ldr.w	r3, [r5, sl, lsl #2]
    349e:	add.w	sl, sl, #1
    34a2:	str.w	r3, [r2], #4
    34a6:	movs	r3, #1
    34a8:	b.n	3472 <compress(void*)+0x236>
    34aa:	nop
    34ac:	.word	0x20002380
    34b0:	.word	0x20020c58
    34b4:	.word	0x20020c2c
    34b8:	.word	0x200201f4
    34bc:	.word	0x2002147a
    34c0:	.word	0x2001ffe4
    34c4:	.word	0x200205f4
    34c8:	.word	0x20020848

000034cc <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    34cc:	push	{r0, r1, r4, lr}
    34ce:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    34d0:	cbz	r1, 34ec <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    34d2:	mov	r0, r1
    34d4:	str	r1, [sp, #4]
    34d6:	bl	f310 <strlen>
    34da:	ldr	r3, [r4, #0]
    34dc:	mov	r2, r0
    34de:	ldr	r1, [sp, #4]
    34e0:	ldr	r3, [r3, #4]
    34e2:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    34e4:	add	sp, #8
    34e6:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    34ea:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    34ec:	add	sp, #8
    34ee:	pop	{r4, pc}

000034f0 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    34f0:	ldr	r3, [pc, #24]	; (350c <usbPowerInit()+0x1c>)
    34f2:	movs	r2, #5
    34f4:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    34f8:	movs	r2, #8
    34fa:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    34fe:	ldr	r2, [pc, #16]	; (3510 <usbPowerInit()+0x20>)
    3500:	ldr	r3, [r2, #4]
    3502:	orr.w	r3, r3, #67108864	; 0x4000000
    3506:	str	r3, [r2, #4]
    }
    3508:	bx	lr
    350a:	nop
    350c:	.word	0x401f8000
    3510:	.word	0x42008000

00003514 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    3514:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    3516:	bl	34f0 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    351a:	ldr	r3, [pc, #20]	; (3530 <usbPowerSetup()+0x1c>)
    351c:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    3520:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    3524:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    3528:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    352c:	b.w	bce4 <delay>
    3530:	.word	0x42008000

00003534 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3534:	uxtb	r1, r0
    3536:	movs	r0, #33	; 0x21
    {   
    3538:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    353a:	bl	c434 <digitalWrite>
            delay(100);
    353e:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3540:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3544:	b.w	bce4 <delay>

00003548 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    3548:	movs	r1, #0
    354a:	movs	r0, #32
    354c:	b.w	c434 <digitalWrite>

00003550 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3550:	movs	r1, #1
    3552:	movs	r0, #32
    3554:	b.w	c434 <digitalWrite>

00003558 <adc_init()>:
    }


    void adc_init(void)
    {
    3558:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    355c:	movs	r1, #1
    355e:	movs	r0, #33	; 0x21
    3560:	bl	c474 <pinMode>
        #endif
        acqPower(HIGH);
    3564:	movs	r0, #1
    3566:	bl	3534 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    356a:	movs	r1, #1
    356c:	movs	r0, #32
    356e:	bl	c474 <pinMode>
        adcReset();
    3572:	bl	3548 <adcReset()>
        delay(100);
    3576:	movs	r0, #100	; 0x64
    3578:	bl	bce4 <delay>
        adcStart();
    357c:	bl	3550 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3580:	ldr	r2, [pc, #332]	; (36d0 <adc_init()+0x178>)
    3582:	ldr	r1, [pc, #336]	; (36d4 <adc_init()+0x17c>)
    3584:	add	r0, sp, #4
    3586:	bl	37a0 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    358a:	movs	r1, #76	; 0x4c
    358c:	add	r0, sp, #4
    358e:	bl	37c4 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3592:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3594:	cmp	r0, #0
    3596:	beq.w	36ca <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    359a:	ldr	r1, [pc, #316]	; (36d8 <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    359c:	ldr	r0, [pc, #316]	; (36dc <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    359e:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    35a0:	bl	cca0 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    35a4:	movs	r3, #129	; 0x81
    35a6:	movs	r2, #2
    35a8:	movs	r1, #76	; 0x4c
    35aa:	add	r0, sp, #4
    35ac:	ldr	r5, [pc, #304]	; (36e0 <adc_init()+0x188>)
    35ae:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    35b2:	movs	r3, #48	; 0x30
    35b4:	movs	r2, #7
    35b6:	movs	r1, #76	; 0x4c
    35b8:	add	r0, sp, #4
    35ba:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    35be:	movs	r3, #0
    35c0:	movs	r2, #8
    35c2:	movs	r1, #76	; 0x4c
    35c4:	add	r0, sp, #4
    35c6:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35ca:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    35cc:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35ce:	ldrb.w	r3, [r5], #1
    35d2:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    35d4:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    35d6:	add	r0, sp, #4
    35d8:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    35dc:	cmp	r4, #15
    35de:	bne.n	35ca <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35e0:	movs	r3, #48	; 0x30
    35e2:	movs	r2, #115	; 0x73
    35e4:	movs	r1, #76	; 0x4c
    35e6:	add	r0, sp, #4
    35e8:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    35ec:	movs	r3, #32
    35ee:	movs	r2, #116	; 0x74
    35f0:	movs	r1, #76	; 0x4c
    35f2:	add	r0, sp, #4
    35f4:	ldr	r6, [pc, #236]	; (36e4 <adc_init()+0x18c>)
    35f6:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    35fa:	movs	r3, #224	; 0xe0
    35fc:	movs	r2, #117	; 0x75
    35fe:	movs	r1, #76	; 0x4c
    3600:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    3602:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    3604:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3608:	ldr.w	r8, [pc, #236]	; 36f8 <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    360c:	movs	r3, #37	; 0x25
    360e:	movs	r2, #107	; 0x6b
    3610:	movs	r1, #76	; 0x4c
    3612:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3614:	ldr	r7, [pc, #208]	; (36e8 <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    3616:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    361a:	movs	r3, #96	; 0x60
    361c:	movs	r2, #59	; 0x3b
    361e:	movs	r1, #76	; 0x4c
    3620:	add	r0, sp, #4
    3622:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3626:	ldrb.w	r4, [r6], #1
    362a:	movs	r3, #136	; 0x88
    362c:	movs	r1, #76	; 0x4c
    362e:	add	r0, sp, #4
    3630:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3632:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3634:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3638:	ldrh.w	r3, [r8]
    363c:	adds	r2, r4, #1
    363e:	movs	r1, #76	; 0x4c
    3640:	uxtb	r3, r3
    3642:	add	r0, sp, #4
    3644:	uxtb	r2, r2
    3646:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    364a:	ldrh	r3, [r7, #0]
    364c:	adds	r2, r4, #2
    364e:	movs	r1, #76	; 0x4c
    3650:	subs	r3, #55	; 0x37
    3652:	add	r0, sp, #4
    3654:	uxtb	r2, r2
    3656:	uxtb	r3, r3
    3658:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    365c:	adds	r2, r4, #3
    365e:	movs	r3, #128	; 0x80
    3660:	movs	r1, #76	; 0x4c
    3662:	uxtb	r2, r2
    3664:	add	r0, sp, #4
    3666:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    366a:	adds	r2, r4, #4
    366c:	movs	r3, #0
    366e:	movs	r1, #76	; 0x4c
    3670:	uxtb	r2, r2
    3672:	add	r0, sp, #4
    3674:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3678:	cmp	r5, #4
    367a:	bne.n	3626 <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    367c:	ldr	r1, [pc, #108]	; (36ec <adc_init()+0x194>)
    367e:	ldr	r0, [pc, #92]	; (36dc <adc_init()+0x184>)
    3680:	bl	34cc <Print::print(char const*) [clone .isra.0]>
    3684:	movs	r2, #21
    3686:	movs	r1, #76	; 0x4c
    3688:	add	r0, sp, #4
    368a:	bl	37e6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    368e:	movs	r3, #0
    3690:	mov	r1, r0
    3692:	movs	r2, #16
    3694:	ldr	r0, [pc, #68]	; (36dc <adc_init()+0x184>)
    3696:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    369a:	ldr	r0, [pc, #64]	; (36dc <adc_init()+0x184>)
    369c:	bl	cc68 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    36a0:	ldr	r1, [pc, #76]	; (36f0 <adc_init()+0x198>)
    36a2:	ldr	r0, [pc, #56]	; (36dc <adc_init()+0x184>)
    36a4:	bl	34cc <Print::print(char const*) [clone .isra.0]>
    36a8:	movs	r2, #118	; 0x76
    36aa:	movs	r1, #76	; 0x4c
    36ac:	add	r0, sp, #4
    36ae:	bl	37e6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    36b2:	movs	r3, #0
    36b4:	mov	r1, r0
    36b6:	movs	r2, #16
    36b8:	ldr	r0, [pc, #32]	; (36dc <adc_init()+0x184>)
    36ba:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    36be:	ldr	r0, [pc, #28]	; (36dc <adc_init()+0x184>)
    36c0:	bl	cc68 <Print::println()>
            
        }
    }
    36c4:	add	sp, #8
    36c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    36ca:	ldr	r1, [pc, #40]	; (36f4 <adc_init()+0x19c>)
    36cc:	b.n	359c <adc_init()+0x44>
    36ce:	nop
    36d0:	.word	0x000186a0
    36d4:	.word	0x20001f08
    36d8:	.word	0x20001033
    36dc:	.word	0x20001db8
    36e0:	.word	0x200010ac
    36e4:	.word	0x200010a8
    36e8:	.word	0x200213d0
    36ec:	.word	0x2000106d
    36f0:	.word	0x20001075
    36f4:	.word	0x2000103d
    36f8:	.word	0x20002384

000036fc <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    36fc:	push	{r0, r1, r4, r5, r6, lr}
    36fe:	mov	r4, r0
    3700:	ldr	r6, [pc, #40]	; (372c <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    3702:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    3704:	ldr	r2, [pc, #40]	; (3730 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3706:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    3708:	ldr	r1, [pc, #40]	; (3734 <setAGain(signed char)+0x38>)
    370a:	add	r0, sp, #4
    370c:	bl	37a0 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3710:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    3714:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3716:	mov	r3, r4
    3718:	movs	r1, #76	; 0x4c
    371a:	adds	r2, #1
    371c:	add	r0, sp, #4
    371e:	uxtb	r2, r2
    3720:	bl	3832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3724:	cmp	r5, #4
    3726:	bne.n	3710 <setAGain(signed char)+0x14>
            }
    }
    3728:	add	sp, #8
    372a:	pop	{r4, r5, r6, pc}
    372c:	.word	0x200010a8
    3730:	.word	0x000186a0
    3734:	.word	0x20001f08

00003738 <adcStatus()>:
    void adcStatus(void)
    {
    3738:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    373a:	ldr	r4, [pc, #80]	; (378c <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    373c:	add	r0, sp, #4
    373e:	ldr	r2, [pc, #80]	; (3790 <adcStatus()+0x58>)
    3740:	ldr	r1, [pc, #80]	; (3794 <adcStatus()+0x5c>)
    3742:	bl	37a0 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3746:	mov	r0, r4
    3748:	ldr	r1, [pc, #76]	; (3798 <adcStatus()+0x60>)
    374a:	bl	34cc <Print::print(char const*) [clone .isra.0]>
    374e:	movs	r2, #21
    3750:	movs	r1, #76	; 0x4c
    3752:	add	r0, sp, #4
    3754:	bl	37e6 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3758:	movs	r3, #0
    375a:	mov	r1, r0
    375c:	movs	r2, #16
    375e:	mov	r0, r4
    3760:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3764:	mov	r0, r4
    3766:	ldr	r1, [pc, #52]	; (379c <adcStatus()+0x64>)
    3768:	bl	34cc <Print::print(char const*) [clone .isra.0]>
    376c:	movs	r2, #118	; 0x76
    376e:	movs	r1, #76	; 0x4c
    3770:	add	r0, sp, #4
    3772:	bl	37e6 <i2c_class::read(unsigned char, unsigned char)>
    3776:	movs	r3, #0
    3778:	mov	r1, r0
    377a:	movs	r2, #16
    377c:	mov	r0, r4
    377e:	bl	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3782:	mov	r0, r4
    3784:	bl	cc68 <Print::println()>
    }
    3788:	add	sp, #8
    378a:	pop	{r4, pc}
    378c:	.word	0x20001db8
    3790:	.word	0x000186a0
    3794:	.word	0x20001f08
    3798:	.word	0x2000106c
    379c:	.word	0x20001074

000037a0 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    37a0:	push	{r0, r1, r2, r4, r5, lr}
    37a2:	mov	r4, r1
    {   this->wire = wire;
    37a4:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    37a6:	mov	r5, r0
        wire->begin();
    37a8:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    37aa:	str	r2, [sp, #4]
        wire->begin();
    37ac:	bl	125f8 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    37b0:	movs	r0, #100	; 0x64
    37b2:	bl	bce4 <delay>
        wire->setClock(speed);
    37b6:	mov	r0, r4
    37b8:	ldr	r1, [sp, #4]
    37ba:	bl	5a08 <TwoWire::setClock(unsigned long)>
    }
    37be:	mov	r0, r5
    37c0:	add	sp, #12
    37c2:	pop	{r4, r5, pc}

000037c4 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    37c4:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    37c6:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    37c8:	ldr	r3, [r0, #0]
    37ca:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    37ce:	movs	r1, #1
    37d0:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    37d4:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    37d8:	ldr	r0, [r0, #0]
    37da:	bl	5754 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    37de:	clz	r0, r0
    37e2:	lsrs	r0, r0, #5
    37e4:	pop	{r3, pc}

000037e6 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    37e6:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    37e8:	ldr	r3, [r0, #0]
		transmitting = 1;
    37ea:	movs	r6, #1
    { 
    37ec:	mov	r5, r1
		txBuffer[0] = (address << 1);
    37ee:	lsls	r1, r1, #1
		transmitting = 1;
    37f0:	strb.w	r6, [r3, #304]	; 0x130
    37f4:	mov	r4, r0
		txBuffer[0] = (address << 1);
    37f6:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    37fa:	mov	r1, r2
		txBufferLength = 1;
    37fc:	strb.w	r6, [r3, #303]	; 0x12f
    3800:	ldr	r0, [r0, #0]
    3802:	ldr	r3, [r0, #0]
    3804:	ldr	r3, [r3, #0]
    3806:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    3808:	movs	r1, #0
    380a:	ldr	r0, [r4, #0]
    380c:	bl	5754 <TwoWire::endTransmission(unsigned char)>
    3810:	cbz	r0, 3816 <i2c_class::read(unsigned char, unsigned char)+0x30>
    3812:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    3814:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    3816:	mov	r3, r6
    3818:	mov	r2, r6
    381a:	mov	r1, r5
    381c:	ldr	r0, [r4, #0]
    381e:	bl	5838 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    3822:	cmp	r0, #0
    3824:	beq.n	3812 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    3826:	ldr	r0, [r4, #0]
    3828:	ldr	r3, [r0, #0]
    382a:	ldr	r3, [r3, #20]
    382c:	blx	r3
        return val;
    382e:	uxtb	r0, r0
    3830:	b.n	3814 <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003832 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    3832:	push	{r4, r5, r6, lr}
    3834:	mov	r4, r0
		transmitting = 1;
    3836:	movs	r5, #1
    3838:	mov	r6, r3
        wire->beginTransmission(addr);
    383a:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    383c:	lsls	r0, r1, #1
        wire->write(reg);
    383e:	mov	r1, r2
		transmitting = 1;
    3840:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3844:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    3848:	strb.w	r0, [r3, #165]	; 0xa5
    384c:	ldr	r0, [r4, #0]
    384e:	ldr	r3, [r0, #0]
    3850:	ldr	r3, [r3, #0]
    3852:	blx	r3
        wire->write(val);
    3854:	ldr	r0, [r4, #0]
    3856:	mov	r1, r6
    3858:	ldr	r3, [r0, #0]
    385a:	ldr	r3, [r3, #0]
    385c:	blx	r3
		return endTransmission(1);
    385e:	mov	r1, r5
    3860:	ldr	r0, [r4, #0]
    3862:	bl	5754 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    3866:	clz	r0, r0
    386a:	lsrs	r0, r0, #5
    386c:	pop	{r4, r5, r6, pc}

0000386e <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    386e:	push	{r0, r1, r4, lr}
    3870:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3872:	cbz	r1, 3888 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    3874:	mov	r0, r1
    3876:	str	r1, [sp, #4]
    3878:	bl	f310 <strlen>
    387c:	ldr	r3, [r4, #0]
    387e:	mov	r2, r0
    3880:	ldr	r1, [sp, #4]
    3882:	ldr	r3, [r3, #4]
    3884:	mov	r0, r4
    3886:	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3888:	mov	r0, r4
    388a:	add	sp, #8
    388c:	ldmia.w	sp!, {r4, lr}
    3890:	b.w	cc68 <Print::println()>

00003894 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3894:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    3896:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3898:	movw	lr, #365	; 0x16d
    389c:	movs	r6, #100	; 0x64
    389e:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    38a2:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    38a6:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    38aa:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    38ae:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    38b2:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    38b4:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    38b6:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    38b8:	udiv	r2, r3, r0
    38bc:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    38c0:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    38c2:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    38c4:	movs	r3, #7
    38c6:	udiv	r3, r0, r3
    38ca:	rsb	r3, r3, r3, lsl #3
    38ce:	subs	r0, r0, r3
    38d0:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    38d2:	movs	r0, #0
    days = 0;
    38d4:	mov	r4, r0
    38d6:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    38d8:	addw	r3, r3, #1970	; 0x7b2
    38dc:	ands.w	r7, r3, #3
    38e0:	bne.n	3964 <time2date(unsigned long, datetime_t*)+0xd0>
    38e2:	sdiv	r5, r3, r6
    38e6:	mls	r5, r6, r5, r3
    38ea:	cmp	r5, #0
    38ec:	bne.n	396a <time2date(unsigned long, datetime_t*)+0xd6>
    38ee:	sdiv	r5, r3, ip
    38f2:	mls	r5, ip, r5, r3
    38f6:	cmp	r5, #0
    38f8:	ite	ne
    38fa:	movne	r5, lr
    38fc:	moveq.w	r5, #366	; 0x16e
    3900:	add	r4, r5
    3902:	adds	r0, #1
    3904:	cmp	r2, r4
    3906:	bcs.n	38d6 <time2date(unsigned long, datetime_t*)+0x42>
    3908:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    390a:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    390c:	udiv	r6, r3, r0
    3910:	mls	r6, r0, r6, r3
    3914:	mov.w	r0, #400	; 0x190
    3918:	udiv	r5, r3, r0
    391c:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3920:	cbnz	r7, 3970 <time2date(unsigned long, datetime_t*)+0xdc>
    3922:	cbnz	r6, 3976 <time2date(unsigned long, datetime_t*)+0xe2>
    3924:	cmp	r3, #0
    3926:	movw	r0, #365	; 0x16d
    392a:	it	eq
    392c:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    3930:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3932:	ldr.w	ip, [pc, #88]	; 398c <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    3936:	add	r2, r0
    3938:	movs	r0, #0
      if (month==1) { // february
    393a:	cmp	r0, #1
    393c:	uxtb	r5, r0
    393e:	bne.n	397c <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3940:	cbnz	r7, 3982 <time2date(unsigned long, datetime_t*)+0xee>
    3942:	cbnz	r6, 3986 <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3944:	cmp	r3, #0
    3946:	ite	ne
    3948:	movne	r4, #28
    394a:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    394c:	cmp	r4, r2
    394e:	bhi.n	395a <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3950:	adds	r0, #1
        time -= monthLength;
    3952:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3954:	cmp	r0, #12
    3956:	bne.n	393a <time2date(unsigned long, datetime_t*)+0xa6>
    3958:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    395a:	adds	r5, #1
    tm->day = time + 1;     // day of month
    395c:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    395e:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3960:	strb	r2, [r1, #3]
  }
    3962:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3964:	movw	r5, #365	; 0x16d
    3968:	b.n	3900 <time2date(unsigned long, datetime_t*)+0x6c>
    396a:	mov.w	r5, #366	; 0x16e
    396e:	b.n	3900 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3970:	movw	r0, #365	; 0x16d
    3974:	b.n	3930 <time2date(unsigned long, datetime_t*)+0x9c>
    3976:	mov.w	r0, #366	; 0x16e
    397a:	b.n	3930 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    397c:	ldrb.w	r4, [r0, ip]
    3980:	b.n	394c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3982:	movs	r4, #28
    3984:	b.n	394c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3986:	movs	r4, #29
    3988:	b.n	394c <time2date(unsigned long, datetime_t*)+0xb8>
    398a:	nop
    398c:	.word	0x2000111b

00003990 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    3990:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    3992:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    3996:	ldr	r2, [pc, #184]	; (3a50 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    3998:	adds	r3, #78	; 0x4e
    399a:	uxtb	r3, r3
  {
    399c:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    399e:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    39a0:	movs	r5, #100	; 0x64
    39a2:	mov.w	r6, #400	; 0x190
    39a6:	subw	r4, r1, #1970	; 0x7b2
    39aa:	cmp	r3, r4
    39ac:	bgt.n	3a08 <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    39ae:	addw	r3, r3, #1970	; 0x7b2
    39b2:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    39b4:	ldrsb.w	r7, [r0, #2]
    39b8:	ldr	r6, [pc, #152]	; (3a54 <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    39ba:	ldr.w	ip, [pc, #156]	; 3a58 <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    39be:	udiv	r4, r3, r1
    39c2:	mls	r4, r1, r4, r3
    39c6:	mov.w	r1, #400	; 0x190
    39ca:	udiv	r5, r3, r1
    39ce:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    39d2:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    39d4:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    39d8:	cmp	r7, r1
    39da:	bgt.n	3a2c <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    39dc:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    39e0:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    39e4:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    39e8:	rsb	r3, r3, r3, lsl #4
    39ec:	lsls	r3, r3, #2
    seconds+= tm->sec;
    39ee:	mla	r3, r4, r1, r3
    39f2:	ldrsb.w	r1, [r0, #7]
    39f6:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    39f8:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    39fc:	ldr	r0, [pc, #88]	; (3a58 <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    39fe:	subs	r1, #1
    seconds+= tm->sec;
    3a00:	mla	r0, r0, r1, r3
    return seconds; 
  }
    3a04:	add	r0, r2
    3a06:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    3a08:	lsls	r4, r1, #30
    3a0a:	bne.n	3a28 <date2time(datetime_t*)+0x98>
    3a0c:	sdiv	r4, r1, r5
    3a10:	mls	r4, r5, r4, r1
    3a14:	cbnz	r4, 3a20 <date2time(datetime_t*)+0x90>
    3a16:	sdiv	r4, r1, r6
    3a1a:	mls	r4, r6, r4, r1
    3a1e:	cbnz	r4, 3a28 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    3a20:	add.w	r2, r2, #86016	; 0x15000
    3a24:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    3a28:	adds	r1, #1
    3a2a:	b.n	39a6 <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3a2c:	cmp	r1, #2
    3a2e:	bne.n	3a44 <date2time(datetime_t*)+0xb4>
    3a30:	cbnz	r3, 3a44 <date2time(datetime_t*)+0xb4>
    3a32:	cbnz	r4, 3a36 <date2time(datetime_t*)+0xa6>
    3a34:	cbnz	r5, 3a44 <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    3a36:	add.w	r2, r2, #2490368	; 0x260000
    3a3a:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3a3e:	adds	r1, #1
    3a40:	adds	r6, #1
    3a42:	b.n	39d8 <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3a44:	ldrb.w	lr, [r6]
    3a48:	mla	r2, ip, lr, r2
    3a4c:	b.n	3a3e <date2time(datetime_t*)+0xae>
    3a4e:	nop
    3a50:	.word	0x01e13380
    3a54:	.word	0x2000111b
    3a58:	.word	0x00015180

00003a5c <rtcSetup(unsigned char, unsigned char)>:

  #include "RV-3028-C7.h"
  RV3028 rtc;

  int16_t rtcSetup(uint8_t sda, uint8_t scl)
  {
    3a5c:	push	{r0, r1, r2, lr}
    Wire.begin();
    3a5e:	ldr	r0, [pc, #40]	; (3a88 <rtcSetup(unsigned char, unsigned char)+0x2c>)
    3a60:	bl	125f8 <___ZN7TwoWire5beginEv_veneer>
    if (rtc.begin() == false) {
    3a64:	movs	r3, #1
    3a66:	ldr	r1, [pc, #32]	; (3a88 <rtcSetup(unsigned char, unsigned char)+0x2c>)
    3a68:	mov	r2, r3
    3a6a:	ldr	r0, [pc, #32]	; (3a8c <rtcSetup(unsigned char, unsigned char)+0x30>)
    3a6c:	str	r3, [sp, #0]
    3a6e:	bl	41cc <RV3028::begin(TwoWire&, bool, bool, bool)>
    3a72:	cbnz	r0, 3a84 <rtcSetup(unsigned char, unsigned char)+0x28>
    Serial.println("RTC offline!");
    3a74:	ldr	r1, [pc, #24]	; (3a90 <rtcSetup(unsigned char, unsigned char)+0x34>)
    }
    else
    {
      Serial.println("RTC online!");
    3a76:	ldr	r0, [pc, #28]	; (3a94 <rtcSetup(unsigned char, unsigned char)+0x38>)
    3a78:	bl	386e <Print::println(char const*) [clone .isra.0]>
    }

    return 1;
  }
    3a7c:	movs	r0, #1
    3a7e:	add	sp, #12
    3a80:	ldr.w	pc, [sp], #4
      Serial.println("RTC online!");
    3a84:	ldr	r1, [pc, #16]	; (3a98 <rtcSetup(unsigned char, unsigned char)+0x3c>)
    3a86:	b.n	3a76 <rtcSetup(unsigned char, unsigned char)+0x1a>
    3a88:	.word	0x20001dc8
    3a8c:	.word	0x20020cb8
    3a90:	.word	0x20001053
    3a94:	.word	0x20001db8
    3a98:	.word	0x20001060

00003a9c <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3a9c:	push	{r0, r1, r2, lr}
    3a9e:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3aa0:	bl	bee0 <rtc_get>
    3aa4:	ldr	r1, [sp, #4]
    3aa6:	bl	3894 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3aaa:	movs	r0, #1
    3aac:	add	sp, #12
    3aae:	ldr.w	pc, [sp], #4

00003ab2 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3ab2:	push	{r3, lr}
    rtc_set(date2time(t));
    3ab4:	bl	3990 <date2time(datetime_t*)>
    3ab8:	bl	bf04 <rtc_set>
    return 1;
  }
    3abc:	movs	r0, #1
    3abe:	pop	{r3, pc}

00003ac0 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3ac0:	push	{r0, r1, r4, r5, r6, lr}
    3ac2:	mov	r5, r1
    3ac4:	mov	r4, r2
    3ac6:	mov	r6, r0
    rtc_get_datetime(&t);
    3ac8:	mov	r0, sp
    3aca:	bl	3a9c <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3ace:	mov	r0, sp
    t.year=year;
    3ad0:	strh.w	r6, [sp]
    t.month=month;
    3ad4:	strb.w	r5, [sp, #2]
    t.day=day;
    3ad8:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3adc:	bl	3ab2 <rtc_set_datetime(datetime_t*)>
  }
    3ae0:	add	sp, #8
    3ae2:	pop	{r4, r5, r6, pc}

00003ae4 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3ae4:	push	{r0, r1, r4, r5, r6, lr}
    3ae6:	mov	r5, r1
    3ae8:	mov	r4, r2
    3aea:	mov	r6, r0
    rtc_get_datetime(&t);
    3aec:	mov	r0, sp
    3aee:	bl	3a9c <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3af2:	mov	r0, sp
    t.hour=hour;
    3af4:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3af8:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3afc:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3b00:	bl	3ab2 <rtc_set_datetime(datetime_t*)>
  }
    3b04:	add	sp, #8
    3b06:	pop	{r4, r5, r6, pc}

00003b08 <rtcXferTime()>:

  void rtcXferTime(void)
  {
    3b08:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    rtc.setUNIX(rtc_get());
    3b0a:	bl	bee0 <rtc_get>
    3b0e:	mov	r1, r0
    3b10:	ldr	r0, [pc, #68]	; (3b58 <rtcXferTime()+0x50>)
    3b12:	bl	4024 <RV3028::setUNIX(unsigned long)>
    datetime_t t;
    rtc_get_datetime(&t);
    3b16:	add	r0, sp, #16
    3b18:	bl	3a9c <rtc_get_datetime(datetime_t*)>
    if (rtc.setTime(t.sec, t.min, t.hour, t.day, t.day, t.month, t.year) == false) 
    3b1c:	ldrh.w	r2, [sp, #16]
    3b20:	ldrb.w	r3, [sp, #19]
    3b24:	str	r2, [sp, #12]
    3b26:	ldrb.w	r2, [sp, #18]
    3b2a:	str	r3, [sp, #0]
    3b2c:	ldrb.w	r1, [sp, #23]
    3b30:	ldr	r0, [pc, #36]	; (3b58 <rtcXferTime()+0x50>)
    3b32:	strd	r3, r2, [sp, #4]
    3b36:	ldrb.w	r3, [sp, #21]
    3b3a:	ldrb.w	r2, [sp, #22]
    3b3e:	bl	3f76 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
    3b42:	cbnz	r0, 3b52 <rtcXferTime()+0x4a>
    {
          Serial.println("Something went wrong setting the time");
    3b44:	ldr	r1, [pc, #20]	; (3b5c <rtcXferTime()+0x54>)
    3b46:	ldr	r0, [pc, #24]	; (3b60 <rtcXferTime()+0x58>)
    }
  }
    3b48:	add	sp, #28
    3b4a:	ldr.w	lr, [sp], #4
          Serial.println("Something went wrong setting the time");
    3b4e:	b.w	386e <Print::println(char const*) [clone .isra.0]>
  }
    3b52:	add	sp, #28
    3b54:	ldr.w	pc, [sp], #4
    3b58:	.word	0x20020cb8
    3b5c:	.word	0x20000d6f
    3b60:	.word	0x20001db8

00003b64 <rtcSync()>:
  void rtcSync(void)
  {
    3b64:	push	{r4, lr}
    uint32_t to;
    to=rtc_get();
    3b66:	bl	bee0 <rtc_get>
    3b6a:	mov	r4, r0
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    3b6c:	ldr	r0, [pc, #24]	; (3b88 <rtcSync()+0x24>)
    3b6e:	bl	3f12 <RV3028::getUNIX()>
    3b72:	cmp	r0, r4
    3b74:	bls.n	3b84 <rtcSync()+0x20>
    3b76:	ldr	r0, [pc, #16]	; (3b88 <rtcSync()+0x24>)
    3b78:	bl	3f12 <RV3028::getUNIX()>
  }
    3b7c:	ldmia.w	sp!, {r4, lr}
    if (to<rtc.getUNIX()) rtc_set(rtc.getUNIX());
    3b80:	b.w	bf04 <rtc_set>
  }
    3b84:	pop	{r4, pc}
    3b86:	nop
    3b88:	.word	0x20020cb8

00003b8c <rtcGetTimestamp()>:

  char * rtcGetTimestamp(void)
  { 
    3b8c:	push	{r4, lr}
    //PRINT TIME
    if (rtc.updateTime() == false) //Updates the time variables from RTC
    3b8e:	ldr	r0, [pc, #32]	; (3bb0 <rtcGetTimestamp()+0x24>)
    3b90:	bl	3eea <RV3028::updateTime()>
    3b94:	mov	r4, r0
    3b96:	cbz	r0, 3ba2 <rtcGetTimestamp()+0x16>
    {
      Serial.println("RTC failed to update");
      return 0;
    } else {
      return rtc.stringTimeStamp();
    3b98:	ldr	r0, [pc, #20]	; (3bb0 <rtcGetTimestamp()+0x24>)
    }
  }
    3b9a:	ldmia.w	sp!, {r4, lr}
      return rtc.stringTimeStamp();
    3b9e:	b.w	3c40 <RV3028::stringTimeStamp()>
      Serial.println("RTC failed to update");
    3ba2:	ldr	r1, [pc, #16]	; (3bb4 <rtcGetTimestamp()+0x28>)
    3ba4:	ldr	r0, [pc, #16]	; (3bb8 <rtcGetTimestamp()+0x2c>)
    3ba6:	bl	386e <Print::println(char const*) [clone .isra.0]>
  }
    3baa:	mov	r0, r4
    3bac:	pop	{r4, pc}
    3bae:	nop
    3bb0:	.word	0x20020cb8
    3bb4:	.word	0x20000dbd
    3bb8:	.word	0x20001db8

00003bbc <_GLOBAL__sub_I__Z7initRTChh>:
  RV3028 rtc;
    3bbc:	ldr	r0, [pc, #4]	; (3bc4 <_GLOBAL__sub_I__Z7initRTChh+0x8>)
    3bbe:	b.w	3bc8 <RV3028::RV3028()>
    3bc2:	nop
    3bc4:	.word	0x20020cb8

00003bc8 <RV3028::RV3028()>:
#define BUILD_SECOND ((BUILD_SECOND_0 * 10) + BUILD_SECOND_1)

RV3028::RV3028(void)
{

}
    3bc8:	bx	lr

00003bca <RV3028::readRegister(unsigned char)>:
{
	return ((val / 10) * 0x10) + (val % 10);
}

uint8_t RV3028::readRegister(uint8_t addr)
{
    3bca:	push	{r3, r4, r5, lr}
		txBuffer[0] = (address << 1);
    3bcc:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3bce:	ldr	r3, [r0, #8]
		transmitting = 1;
    3bd0:	movs	r5, #1
{
    3bd2:	mov	r4, r0
		txBuffer[0] = (address << 1);
    3bd4:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3bd8:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3bdc:	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3be0:	ldr	r0, [r0, #8]
    3be2:	ldr	r3, [r0, #0]
    3be4:	ldr	r3, [r3, #0]
    3be6:	blx	r3
		return endTransmission(1);
    3be8:	mov	r1, r5
    3bea:	ldr	r0, [r4, #8]
    3bec:	bl	5754 <TwoWire::endTransmission(unsigned char)>
		return requestFrom(address, quantity, (uint8_t)1);
    3bf0:	mov	r3, r5
    3bf2:	mov	r2, r5
    3bf4:	movs	r1, #82	; 0x52
    3bf6:	ldr	r0, [r4, #8]
    3bf8:	bl	5838 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	_i2cPort->endTransmission();

	_i2cPort->requestFrom(RV3028_ADDR, (uint8_t)1);
	if (_i2cPort->available()) {
    3bfc:	ldr	r0, [r4, #8]
    3bfe:	ldr	r3, [r0, #0]
    3c00:	ldr	r3, [r3, #16]
    3c02:	blx	r3
    3c04:	cbz	r0, 3c12 <RV3028::readRegister(unsigned char)+0x48>
		return _i2cPort->read();
    3c06:	ldr	r0, [r4, #8]
    3c08:	ldr	r3, [r0, #0]
    3c0a:	ldr	r3, [r3, #20]
    3c0c:	blx	r3
    3c0e:	uxtb	r0, r0
	}
	else {
		return (0xFF); //Error
	}
}
    3c10:	pop	{r3, r4, r5, pc}
		return (0xFF); //Error
    3c12:	movs	r0, #255	; 0xff
    3c14:	b.n	3c10 <RV3028::readRegister(unsigned char)+0x46>

00003c16 <RV3028::is12Hour()>:
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    3c16:	movs	r1, #16
{
    3c18:	push	{r3, lr}
	uint8_t controlRegister2 = readRegister(RV3028_CTRL2);
    3c1a:	bl	3bca <RV3028::readRegister(unsigned char)>
}
    3c1e:	ubfx	r0, r0, #1, #1
    3c22:	pop	{r3, pc}

00003c24 <RV3028::isPM()>:
{
    3c24:	push	{r3, r4, r5, lr}
    3c26:	mov	r5, r0
	uint8_t hourRegister = readRegister(RV3028_HOURS);
    3c28:	movs	r1, #2
    3c2a:	bl	3bca <RV3028::readRegister(unsigned char)>
    3c2e:	mov	r4, r0
	if (is12Hour() && (hourRegister & (1 << HOURS_AM_PM)))
    3c30:	mov	r0, r5
    3c32:	bl	3c16 <RV3028::is12Hour()>
    3c36:	cbz	r0, 3c3c <RV3028::isPM()+0x18>
    3c38:	ubfx	r0, r4, #5, #1
}
    3c3c:	pop	{r3, r4, r5, pc}
	...

00003c40 <RV3028::stringTimeStamp()>:
{
    3c40:	push	{r4, r5, r6, r7, lr}
    3c42:	sub	sp, #28
    3c44:	mov	r4, r0
	if (is12Hour() == true)
    3c46:	bl	3c16 <RV3028::is12Hour()>
    3c4a:	cmp	r0, #0
    3c4c:	beq.n	3ce4 <RV3028::stringTimeStamp()+0xa4>
		if (isPM()) half = 'P';
    3c4e:	mov	r0, r4
    3c50:	bl	3c24 <RV3028::isPM()>
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c54:	ldrb	r3, [r4, #5]
    3c56:	ldrb	r2, [r4, #6]
		if (isPM()) half = 'P';
    3c58:	cmp	r0, #0
	return ((val / 0x10) * 10) + (val % 0x10);
    3c5a:	mov.w	r6, r3, lsr #4
    3c5e:	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c62:	ldrb	r1, [r4, #4]
		if (isPM()) half = 'P';
    3c64:	it	eq
    3c66:	moveq	r7, #65	; 0x41
	return ((val / 0x10) * 10) + (val % 0x10);
    3c68:	add.w	r6, r6, r6, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c6c:	ldrb	r0, [r4, #2]
    3c6e:	ldrb	r5, [r4, #1]
		if (isPM()) half = 'P';
    3c70:	it	ne
    3c72:	movne	r7, #80	; 0x50
	return ((val / 0x10) * 10) + (val % 0x10);
    3c74:	add.w	r3, r3, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c78:	ldrb	r4, [r4, #0]
	return ((val / 0x10) * 10) + (val % 0x10);
    3c7a:	lsrs	r6, r2, #4
    3c7c:	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c80:	uxtb	r3, r3
    3c82:	str	r7, [sp, #16]
	return ((val / 0x10) * 10) + (val % 0x10);
    3c84:	add.w	r6, r6, r6, lsl #2
    3c88:	add.w	r2, r2, r6, lsl #1
    3c8c:	lsrs	r6, r4, #4
    3c8e:	and.w	r4, r4, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c92:	uxtb	r2, r2
	return ((val / 0x10) * 10) + (val % 0x10);
    3c94:	add.w	r6, r6, r6, lsl #2
    3c98:	add.w	r4, r4, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3c9c:	uxtb	r4, r4
    3c9e:	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    3ca0:	lsrs	r4, r5, #4
    3ca2:	and.w	r5, r5, #15
    3ca6:	add.w	r4, r4, r4, lsl #2
    3caa:	add.w	r5, r5, r4, lsl #1
    3cae:	lsrs	r4, r0, #4
    3cb0:	and.w	r0, r0, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3cb4:	uxtb	r5, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3cb6:	add.w	r4, r4, r4, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3cba:	str	r5, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    3cbc:	add.w	r0, r0, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3cc0:	uxtb	r0, r0
    3cc2:	str	r0, [sp, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3cc4:	lsrs	r0, r1, #4
    3cc6:	and.w	r1, r1, #15
    3cca:	add.w	r0, r0, r0, lsl #2
    3cce:	add.w	r1, r1, r0, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu%cM", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]), half);
    3cd2:	ldr	r0, [pc, #144]	; (3d64 <RV3028::stringTimeStamp()+0x124>)
    3cd4:	uxtb	r1, r1
    3cd6:	str	r1, [sp, #0]
    3cd8:	ldr	r1, [pc, #140]	; (3d68 <RV3028::stringTimeStamp()+0x128>)
    3cda:	bl	ee7c <siprintf>
}
    3cde:	ldr	r0, [pc, #132]	; (3d64 <RV3028::stringTimeStamp()+0x124>)
    3ce0:	add	sp, #28
    3ce2:	pop	{r4, r5, r6, r7, pc}
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3ce4:	ldrb	r3, [r4, #5]
    3ce6:	ldrb	r2, [r4, #6]
	return ((val / 0x10) * 10) + (val % 0x10);
    3ce8:	lsrs	r6, r3, #4
    3cea:	and.w	r3, r3, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3cee:	ldrb	r1, [r4, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3cf0:	add.w	r6, r6, r6, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3cf4:	ldrb	r0, [r4, #2]
    3cf6:	ldrb	r5, [r4, #1]
	return ((val / 0x10) * 10) + (val % 0x10);
    3cf8:	add.w	r3, r3, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3cfc:	ldrb	r4, [r4, #0]
	return ((val / 0x10) * 10) + (val % 0x10);
    3cfe:	lsrs	r6, r2, #4
    3d00:	and.w	r2, r2, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d04:	uxtb	r3, r3
	return ((val / 0x10) * 10) + (val % 0x10);
    3d06:	add.w	r6, r6, r6, lsl #2
    3d0a:	add.w	r2, r2, r6, lsl #1
    3d0e:	lsrs	r6, r4, #4
    3d10:	and.w	r4, r4, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d14:	uxtb	r2, r2
	return ((val / 0x10) * 10) + (val % 0x10);
    3d16:	add.w	r6, r6, r6, lsl #2
    3d1a:	add.w	r4, r4, r6, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d1e:	uxtb	r4, r4
    3d20:	str	r4, [sp, #12]
	return ((val / 0x10) * 10) + (val % 0x10);
    3d22:	lsrs	r4, r5, #4
    3d24:	and.w	r5, r5, #15
    3d28:	add.w	r4, r4, r4, lsl #2
    3d2c:	add.w	r5, r5, r4, lsl #1
    3d30:	lsrs	r4, r0, #4
    3d32:	and.w	r0, r0, #15
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d36:	uxtb	r5, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3d38:	add.w	r4, r4, r4, lsl #2
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d3c:	str	r5, [sp, #8]
	return ((val / 0x10) * 10) + (val % 0x10);
    3d3e:	add.w	r0, r0, r4, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d42:	uxtb	r0, r0
    3d44:	str	r0, [sp, #4]
	return ((val / 0x10) * 10) + (val % 0x10);
    3d46:	lsrs	r0, r1, #4
    3d48:	and.w	r1, r1, #15
    3d4c:	add.w	r0, r0, r0, lsl #2
    3d50:	add.w	r1, r1, r0, lsl #1
		sprintf(timeStamp, "20%02hhu-%02hhu-%02hhu  %02hhu:%02hhu:%02hhu", BCDtoDEC(_time[TIME_YEAR]), BCDtoDEC(_time[TIME_MONTH]), BCDtoDEC(_time[TIME_DATE]), BCDtoDEC(_time[TIME_HOURS]), BCDtoDEC(_time[TIME_MINUTES]), BCDtoDEC(_time[TIME_SECONDS]));
    3d54:	ldr	r0, [pc, #12]	; (3d64 <RV3028::stringTimeStamp()+0x124>)
    3d56:	uxtb	r1, r1
    3d58:	str	r1, [sp, #0]
    3d5a:	ldr	r1, [pc, #16]	; (3d6c <RV3028::stringTimeStamp()+0x12c>)
    3d5c:	bl	ee7c <siprintf>
    3d60:	b.n	3cde <RV3028::stringTimeStamp()+0x9e>
    3d62:	nop
    3d64:	.word	0x200215c2
    3d68:	.word	0x200011c8
    3d6c:	.word	0x200011f8

00003d70 <RV3028::writeRegister(unsigned char, unsigned char)>:

bool RV3028::writeRegister(uint8_t addr, uint8_t val)
{
    3d70:	push	{r4, r5, r6, lr}
	_i2cPort->beginTransmission(RV3028_ADDR);
    3d72:	ldr	r3, [r0, #8]
		transmitting = 1;
    3d74:	movs	r5, #1
{
    3d76:	mov	r6, r2
		txBuffer[0] = (address << 1);
    3d78:	movs	r2, #164	; 0xa4
    3d7a:	mov	r4, r0
		transmitting = 1;
    3d7c:	strb.w	r5, [r3, #304]	; 0x130
		txBuffer[0] = (address << 1);
    3d80:	strb.w	r2, [r3, #165]	; 0xa5
		txBufferLength = 1;
    3d84:	strb.w	r5, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3d88:	ldr	r0, [r0, #8]
    3d8a:	ldr	r3, [r0, #0]
    3d8c:	ldr	r3, [r3, #0]
    3d8e:	blx	r3
	_i2cPort->write(val);
    3d90:	ldr	r0, [r4, #8]
    3d92:	mov	r1, r6
    3d94:	ldr	r3, [r0, #0]
    3d96:	ldr	r3, [r3, #0]
    3d98:	blx	r3
		return endTransmission(1);
    3d9a:	mov	r1, r5
    3d9c:	ldr	r0, [r4, #8]
    3d9e:	bl	5754 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
		return (false); //Error: Sensor did not ack
	return(true);
}
    3da2:	clz	r0, r0
    3da6:	lsrs	r0, r0, #5
    3da8:	pop	{r4, r5, r6, pc}

00003daa <RV3028::set12Hour()>:
{
    3daa:	push	{r4, r5, r6, lr}
    3dac:	mov	r5, r0
	if (is12Hour() == false)
    3dae:	bl	3c16 <RV3028::is12Hour()>
    3db2:	mov	r6, r0
    3db4:	cbnz	r0, 3e18 <RV3028::set12Hour()+0x6e>
		uint8_t hour = BCDtoDEC(readRegister(RV3028_HOURS)); //Get the current hour in the RTC
    3db6:	movs	r1, #2
    3db8:	mov	r0, r5
    3dba:	bl	3bca <RV3028::readRegister(unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    3dbe:	and.w	r4, r0, #15
    3dc2:	lsrs	r3, r0, #4
		uint8_t setting = readRegister(RV3028_CTRL2);
    3dc4:	movs	r1, #16
    3dc6:	mov	r0, r5
	return ((val / 0x10) * 10) + (val % 0x10);
    3dc8:	add.w	r3, r3, r3, lsl #2
    3dcc:	add.w	r4, r4, r3, lsl #1
		uint8_t setting = readRegister(RV3028_CTRL2);
    3dd0:	bl	3bca <RV3028::readRegister(unsigned char)>
		setting |= (1 << CTRL2_12_24);
    3dd4:	orr.w	r0, r0, #2
	return ((val / 0x10) * 10) + (val % 0x10);
    3dd8:	uxtb	r4, r4
		writeRegister(RV3028_CTRL2, setting);
    3dda:	movs	r1, #16
    3ddc:	uxtb	r2, r0
    3dde:	mov	r0, r5
    3de0:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 0)
    3de4:	cbz	r4, 3df4 <RV3028::set12Hour()+0x4a>
		else if (hour == 12)
    3de6:	cmp	r4, #12
    3de8:	beq.n	3df0 <RV3028::set12Hour()+0x46>
		else if (hour > 12)
    3dea:	bls.n	3df6 <RV3028::set12Hour()+0x4c>
			hour -= 12;
    3dec:	subs	r4, #12
    3dee:	uxtb	r4, r4
			pm = true;
    3df0:	movs	r6, #1
    3df2:	b.n	3df6 <RV3028::set12Hour()+0x4c>
			hour += 12;
    3df4:	movs	r4, #12
	return ((val / 10) * 0x10) + (val % 10);
    3df6:	movs	r2, #10
    3df8:	udiv	r3, r4, r2
    3dfc:	mls	r2, r2, r3, r4
    3e00:	add.w	r2, r2, r3, lsl #4
    3e04:	uxtb	r2, r2
		if (pm == true) hour |= (1 << HOURS_AM_PM); //Set AM/PM bit if needed
    3e06:	cbz	r6, 3e0c <RV3028::set12Hour()+0x62>
    3e08:	orr.w	r2, r2, #32
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3e0c:	mov	r0, r5
    3e0e:	movs	r1, #2
}
    3e10:	ldmia.w	sp!, {r4, r5, r6, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3e14:	b.w	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
}
    3e18:	pop	{r4, r5, r6, pc}

00003e1a <RV3028::set24Hour()>:
{
    3e1a:	push	{r4, r5, r6, lr}
    3e1c:	mov	r5, r0
	if (is12Hour() == true)
    3e1e:	bl	3c16 <RV3028::is12Hour()>
    3e22:	mov	r6, r0
    3e24:	cbz	r0, 3e94 <RV3028::set24Hour()+0x7a>
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    3e26:	movs	r1, #2
    3e28:	mov	r0, r5
    3e2a:	bl	3bca <RV3028::readRegister(unsigned char)>
		if (hour & (1 << HOURS_AM_PM)) //Is the AM/PM bit set?
    3e2e:	ands.w	r3, r0, #32
		uint8_t hour = readRegister(RV3028_HOURS); //Get the current 12 hour formatted time in BCD
    3e32:	mov	r4, r0
		uint8_t setting = readRegister(RV3028_CTRL2);
    3e34:	mov.w	r1, #16
			hour &= ~(1 << HOURS_AM_PM); //Clear the bit
    3e38:	it	ne
    3e3a:	andne.w	r4, r0, #223	; 0xdf
		uint8_t setting = readRegister(RV3028_CTRL2);
    3e3e:	mov	r0, r5
		bool pm = false;
    3e40:	it	eq
    3e42:	moveq	r6, r3
		uint8_t setting = readRegister(RV3028_CTRL2);
    3e44:	bl	3bca <RV3028::readRegister(unsigned char)>
		writeRegister(RV3028_CTRL2, setting);
    3e48:	movs	r1, #16
    3e4a:	and.w	r2, r0, #253	; 0xfd
    3e4e:	mov	r0, r5
    3e50:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	return ((val / 0x10) * 10) + (val % 0x10);
    3e54:	and.w	r2, r4, #15
    3e58:	lsrs	r3, r4, #4
    3e5a:	add.w	r3, r3, r3, lsl #2
    3e5e:	add.w	r2, r2, r3, lsl #1
    3e62:	uxtb	r2, r2
		if (pm == true) hour += 12; //2PM becomes 14
    3e64:	cbz	r6, 3e6a <RV3028::set24Hour()+0x50>
    3e66:	adds	r2, #12
    3e68:	uxtb	r2, r2
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    3e6a:	cmp	r2, #12
    3e6c:	beq.n	3e90 <RV3028::set24Hour()+0x76>
		if (hour == 24) hour = 12; //12PM becomes 24, but should really be 12
    3e6e:	cmp	r2, #24
    3e70:	it	eq
    3e72:	moveq	r2, #12
	return ((val / 10) * 0x10) + (val % 10);
    3e74:	movs	r1, #10
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3e76:	mov	r0, r5
	return ((val / 10) * 0x10) + (val % 10);
    3e78:	udiv	r3, r2, r1
    3e7c:	mls	r2, r1, r3, r2
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3e80:	movs	r1, #2
	return ((val / 10) * 0x10) + (val % 10);
    3e82:	add.w	r2, r2, r3, lsl #4
}
    3e86:	ldmia.w	sp!, {r4, r5, r6, lr}
		writeRegister(RV3028_HOURS, hour); //Record this to hours register
    3e8a:	uxtb	r2, r2
    3e8c:	b.w	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
		if (hour == 12) hour = 0; //12AM stays 12, but should really be 0
    3e90:	movs	r2, #0
    3e92:	b.n	3e74 <RV3028::set24Hour()+0x5a>
}
    3e94:	pop	{r4, r5, r6, pc}

00003e96 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:

bool RV3028::readMultipleRegisters(uint8_t addr, uint8_t * dest, uint8_t len)
{
    3e96:	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    3e98:	movs	r7, #1
    3e9a:	mov	r4, r2
    3e9c:	mov	r6, r3
		txBuffer[0] = (address << 1);
    3e9e:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3ea0:	ldr	r3, [r0, #8]
{
    3ea2:	mov	r5, r0
    3ea4:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3ea8:	strb.w	r7, [r3, #304]	; 0x130
		txBufferLength = 1;
    3eac:	strb.w	r7, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3eb0:	ldr	r0, [r0, #8]
    3eb2:	ldr	r3, [r0, #0]
    3eb4:	ldr	r3, [r3, #0]
    3eb6:	blx	r3
		return endTransmission(1);
    3eb8:	mov	r1, r7
    3eba:	ldr	r0, [r5, #8]
    3ebc:	bl	5754 <TwoWire::endTransmission(unsigned char)>
	if (_i2cPort->endTransmission() != 0)
    3ec0:	cbnz	r0, 3ee6 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x50>
		return requestFrom(address, quantity, (uint8_t)1);
    3ec2:	mov	r2, r6
    3ec4:	add	r6, r4
    3ec6:	mov	r3, r7
    3ec8:	movs	r1, #82	; 0x52
    3eca:	ldr	r0, [r5, #8]
    3ecc:	bl	5838 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
		return (false); //Error: Sensor did not ack

	_i2cPort->requestFrom(RV3028_ADDR, len);
	for (uint8_t i = 0; i < len; i++)
    3ed0:	cmp	r6, r4
    3ed2:	bne.n	3ed8 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x42>
    3ed4:	movs	r0, #1
	{
		dest[i] = _i2cPort->read();
	}

	return(true);
}
    3ed6:	pop	{r3, r4, r5, r6, r7, pc}
		dest[i] = _i2cPort->read();
    3ed8:	ldr	r0, [r5, #8]
    3eda:	ldr	r3, [r0, #0]
    3edc:	ldr	r3, [r3, #20]
    3ede:	blx	r3
    3ee0:	strb.w	r0, [r4], #1
	for (uint8_t i = 0; i < len; i++)
    3ee4:	b.n	3ed0 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x3a>
		return (false); //Error: Sensor did not ack
    3ee6:	movs	r0, #0
    3ee8:	b.n	3ed6 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x40>

00003eea <RV3028::updateTime()>:
{
    3eea:	push	{r3, r4, r5, lr}
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    3eec:	mov	r2, r0
    3eee:	movs	r3, #7
    3ef0:	movs	r1, #0
{
    3ef2:	mov	r4, r0
	if (readMultipleRegisters(RV3028_SECONDS, _time, TIME_ARRAY_LENGTH) == false)
    3ef4:	bl	3e96 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
    3ef8:	mov	r5, r0
    3efa:	cbz	r0, 3f0e <RV3028::updateTime()+0x24>
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    3efc:	mov	r0, r4
    3efe:	bl	3c16 <RV3028::is12Hour()>
    3f02:	cbz	r0, 3f0e <RV3028::updateTime()+0x24>
    3f04:	ldrb	r3, [r4, #2]
	return true;
    3f06:	mov	r5, r0
	if (is12Hour()) _time[TIME_HOURS] &= ~(1 << HOURS_AM_PM); //Remove this bit from value
    3f08:	bic.w	r3, r3, #32
    3f0c:	strb	r3, [r4, #2]
}
    3f0e:	mov	r0, r5
    3f10:	pop	{r3, r4, r5, pc}

00003f12 <RV3028::getUNIX()>:
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3f12:	movs	r3, #4
{
    3f14:	push	{r0, r1, r2, lr}
	readMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    3f16:	movs	r1, #27
    3f18:	add.w	r2, sp, r3
    3f1c:	bl	3e96 <RV3028::readMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    3f20:	ldr	r0, [sp, #4]
    3f22:	add	sp, #12
    3f24:	ldr.w	pc, [sp], #4

00003f28 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>:

bool RV3028::writeMultipleRegisters(uint8_t addr, uint8_t * values, uint8_t len)
{
    3f28:	push	{r4, r5, r6, lr}
    3f2a:	mov	r4, r2
    3f2c:	mov	r5, r3
		txBuffer[0] = (address << 1);
    3f2e:	movs	r2, #164	; 0xa4
	_i2cPort->beginTransmission(RV3028_ADDR);
    3f30:	ldr	r3, [r0, #8]
{
    3f32:	mov	r6, r0
    3f34:	add	r5, r4
    3f36:	strb.w	r2, [r3, #165]	; 0xa5
		transmitting = 1;
    3f3a:	movs	r2, #1
    3f3c:	strb.w	r2, [r3, #304]	; 0x130
		txBufferLength = 1;
    3f40:	strb.w	r2, [r3, #303]	; 0x12f
	_i2cPort->write(addr);
    3f44:	ldr	r0, [r0, #8]
    3f46:	ldr	r3, [r0, #0]
    3f48:	ldr	r3, [r3, #0]
    3f4a:	blx	r3
	for (uint8_t i = 0; i < len; i++)
    3f4c:	cmp	r4, r5
	{
		_i2cPort->write(values[i]);
    3f4e:	ldr	r0, [r6, #8]
	for (uint8_t i = 0; i < len; i++)
    3f50:	bne.n	3f60 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x38>
		return endTransmission(1);
    3f52:	movs	r1, #1
    3f54:	bl	5754 <TwoWire::endTransmission(unsigned char)>
	}

	if (_i2cPort->endTransmission() != 0)
		return (false); //Error: Sensor did not ack
	return(true);
}
    3f58:	clz	r0, r0
    3f5c:	lsrs	r0, r0, #5
    3f5e:	pop	{r4, r5, r6, pc}
		_i2cPort->write(values[i]);
    3f60:	ldr	r3, [r0, #0]
    3f62:	ldrb.w	r1, [r4], #1
    3f66:	ldr	r3, [r3, #0]
    3f68:	blx	r3
	for (uint8_t i = 0; i < len; i++)
    3f6a:	b.n	3f4c <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)+0x24>

00003f6c <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>:
bool RV3028::setTime(uint8_t * time, uint8_t len)
    3f6c:	mov	r2, r1
	return writeMultipleRegisters(RV3028_SECONDS, time, len);
    3f6e:	movs	r3, #7
    3f70:	movs	r1, #0
    3f72:	b.w	3f28 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>

00003f76 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
{
    3f76:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((val / 10) * 0x10) + (val % 10);
    3f7a:	movs	r5, #10
{
    3f7c:	ldrb.w	r8, [sp, #24]
    3f80:	ldrb.w	lr, [sp, #28]
    3f84:	mov	r4, r0
    3f86:	ldrb.w	ip, [sp, #32]
    3f8a:	ldrh.w	r6, [sp, #36]	; 0x24
	return ((val / 10) * 0x10) + (val % 10);
    3f8e:	udiv	r7, r1, r5
    3f92:	mls	r1, r5, r7, r1
    3f96:	add.w	r1, r1, r7, lsl #4
	_time[TIME_SECONDS] = DECtoBCD(sec);
    3f9a:	strb	r1, [r0, #0]
	return ((val / 10) * 0x10) + (val % 10);
    3f9c:	udiv	r1, r2, r5
    3fa0:	mls	r2, r5, r1, r2
    3fa4:	add.w	r7, r2, r1, lsl #4
    3fa8:	udiv	r2, r3, r5
	_time[TIME_MINUTES] = DECtoBCD(min);
    3fac:	strb	r7, [r0, #1]
	return ((val / 10) * 0x10) + (val % 10);
    3fae:	mls	r7, r5, r2, r3
    3fb2:	udiv	r3, r8, r5
    3fb6:	mls	r1, r5, r3, r8
    3fba:	add.w	r7, r7, r2, lsl #4
    3fbe:	add.w	r1, r1, r3, lsl #4
	_time[TIME_HOURS] = DECtoBCD(hour);
    3fc2:	strb	r7, [r0, #2]
	return ((val / 10) * 0x10) + (val % 10);
    3fc4:	udiv	r3, lr, r5
    3fc8:	mls	r2, r5, r3, lr
	_time[TIME_WEEKDAY] = DECtoBCD(weekday);
    3fcc:	strb	r1, [r0, #3]
	return ((val / 10) * 0x10) + (val % 10);
    3fce:	add.w	r2, r2, r3, lsl #4
	_time[TIME_DATE] = DECtoBCD(date);
    3fd2:	strb	r2, [r0, #4]
	return ((val / 10) * 0x10) + (val % 10);
    3fd4:	udiv	r2, ip, r5
    3fd8:	mls	r3, r5, r2, ip
    3fdc:	add.w	r3, r3, r2, lsl #4
	_time[TIME_MONTH] = DECtoBCD(month);
    3fe0:	strb	r3, [r0, #5]
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    3fe2:	add.w	r3, r6, #48	; 0x30
    3fe6:	uxtb	r3, r3
	return ((val / 10) * 0x10) + (val % 10);
    3fe8:	udiv	r2, r3, r5
    3fec:	mls	r3, r5, r2, r3
    3ff0:	add.w	r3, r3, r2, lsl #4
	_time[TIME_YEAR] = DECtoBCD(year - 2000);
    3ff4:	strb	r3, [r0, #6]
	if (is12Hour())
    3ff6:	bl	3c16 <RV3028::is12Hour()>
    3ffa:	cbnz	r0, 4008 <RV3028::setTime(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x92>
	if (len != TIME_ARRAY_LENGTH)
    3ffc:	mov	r1, r4
    3ffe:	mov	r0, r4
}
    4000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4004:	b.w	3f6c <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>
		set24Hour();
    4008:	mov	r0, r4
    400a:	bl	3e1a <RV3028::set24Hour()>
	if (len != TIME_ARRAY_LENGTH)
    400e:	mov	r1, r4
    4010:	mov	r0, r4
    4012:	bl	3f6c <RV3028::setTime(unsigned char*, unsigned char) [clone .part.0]>
    4016:	mov	r5, r0
		set12Hour();
    4018:	mov	r0, r4
    401a:	bl	3daa <RV3028::set12Hour()>
}
    401e:	mov	r0, r5
    4020:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004024 <RV3028::setUNIX(unsigned long)>:
	return writeMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    4024:	movs	r3, #4
{
    4026:	push	{r0, r1, r2, lr}
	unix_reg[0] = value;
    4028:	str	r1, [sp, #4]
	return writeMultipleRegisters(RV3028_UNIX_TIME0, unix_reg, 4);
    402a:	add.w	r2, sp, r3
    402e:	movs	r1, #27
    4030:	bl	3f28 <RV3028::writeMultipleRegisters(unsigned char, unsigned char*, unsigned char)>
}
    4034:	add	sp, #12
    4036:	ldr.w	pc, [sp], #4
	...

0000403c <RV3028::waitforEEPROM()>:
	return eepromdata;
}

//True if success, false if timeout occured
bool RV3028::waitforEEPROM()
{
    403c:	push	{r4, r5, r6, lr}
	return systick_millis_count;
    403e:	ldr	r5, [pc, #40]	; (4068 <RV3028::waitforEEPROM()+0x2c>)
    4040:	mov	r6, r0
    4042:	ldr	r4, [r5, #0]
	unsigned long timeout = millis() + 500;
    4044:	add.w	r4, r4, #500	; 0x1f4
	while ((readRegister(RV3028_STATUS) & 1 << STATUS_EEBUSY) && millis() < timeout);
    4048:	movs	r1, #14
    404a:	mov	r0, r6
    404c:	bl	3bca <RV3028::readRegister(unsigned char)>
    4050:	lsls	r3, r0, #24
    4052:	bpl.n	405a <RV3028::waitforEEPROM()+0x1e>
    4054:	ldr	r3, [r5, #0]
    4056:	cmp	r4, r3
    4058:	bhi.n	4048 <RV3028::waitforEEPROM()+0xc>
    405a:	ldr	r0, [r5, #0]

	return millis() < timeout;
}
    405c:	cmp	r4, r0
    405e:	ite	ls
    4060:	movls	r0, #0
    4062:	movhi	r0, #1
    4064:	pop	{r4, r5, r6, pc}
    4066:	nop
    4068:	.word	0x20021380

0000406c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>:
{
    406c:	push	{r3, r4, r5, r6, r7, lr}
    406e:	mov	r4, r0
    4070:	mov	r7, r2
    4072:	mov	r6, r1
	bool success = waitforEEPROM();
    4074:	bl	403c <RV3028::waitforEEPROM()>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    4078:	movs	r1, #15
	bool success = waitforEEPROM();
    407a:	mov	r5, r0
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    407c:	mov	r0, r4
    407e:	bl	3bca <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    4082:	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    4086:	movs	r1, #15
    4088:	uxtb	r2, r0
    408a:	mov	r0, r4
    408c:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
    4090:	cmp	r0, #0
	writeRegister(eepromaddr, val);
    4092:	mov	r2, r7
    4094:	mov	r1, r6
    4096:	mov	r0, r4
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    4098:	it	eq
    409a:	moveq	r5, #0
	writeRegister(eepromaddr, val);
    409c:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    40a0:	movs	r2, #0
    40a2:	movs	r1, #39	; 0x27
    40a4:	mov	r0, r4
    40a6:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_Update);
    40aa:	movs	r2, #17
    40ac:	movs	r1, #39	; 0x27
    40ae:	mov	r0, r4
    40b0:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    40b4:	mov	r0, r4
    40b6:	bl	403c <RV3028::waitforEEPROM()>
    40ba:	cmp	r0, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    40bc:	mov.w	r1, #15
    40c0:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    40c2:	it	eq
    40c4:	moveq	r5, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    40c6:	bl	3bca <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    40ca:	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    40cc:	mov.w	r1, #15
    40d0:	mov	r0, r4
    40d2:	and.w	r2, r2, #247	; 0xf7
	if (ctrl1 == 0x00)success = false;
    40d6:	it	eq
    40d8:	moveq	r5, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    40da:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    40de:	mov	r0, r4
    40e0:	bl	403c <RV3028::waitforEEPROM()>
    40e4:	cmp	r0, #0
}
    40e6:	ite	ne
    40e8:	movne	r0, r5
    40ea:	moveq	r0, #0
    40ec:	pop	{r3, r4, r5, r6, r7, pc}

000040ee <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>:
{
    40ee:	push	{r4, r5, r6, lr}
    40f0:	mov	r4, r0
    40f2:	mov	r6, r1
	bool success = waitforEEPROM();
    40f4:	bl	403c <RV3028::waitforEEPROM()>
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    40f8:	movs	r1, #15
	bool success = waitforEEPROM();
    40fa:	mov	r5, r0
	uint8_t ctrl1 = readRegister(RV3028_CTRL1);
    40fc:	mov	r0, r4
    40fe:	bl	3bca <RV3028::readRegister(unsigned char)>
	ctrl1 |= 1 << CTRL1_EERD;
    4102:	orr.w	r0, r0, #8
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    4106:	movs	r1, #15
    4108:	uxtb	r2, r0
    410a:	mov	r0, r4
    410c:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
    4110:	cmp	r0, #0
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    4112:	mov	r2, r6
    4114:	mov.w	r1, #37	; 0x25
    4118:	mov	r0, r4
	if (!writeRegister(RV3028_CTRL1, ctrl1)) success = false;
    411a:	it	eq
    411c:	moveq	r5, #0
	writeRegister(RV3028_EEPROM_ADDR, eepromaddr);
    411e:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_First);
    4122:	movs	r2, #0
    4124:	movs	r1, #39	; 0x27
    4126:	mov	r0, r4
    4128:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	writeRegister(RV3028_EEPROM_CMD, EEPROMCMD_ReadSingle);
    412c:	movs	r2, #34	; 0x22
    412e:	movs	r1, #39	; 0x27
    4130:	mov	r0, r4
    4132:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!waitforEEPROM()) success = false;
    4136:	mov	r0, r4
    4138:	bl	403c <RV3028::waitforEEPROM()>
    413c:	cmp	r0, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    413e:	mov.w	r1, #38	; 0x26
    4142:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    4144:	it	eq
    4146:	moveq	r5, #0
	uint8_t eepromdata = readRegister(RV3028_EEPROM_DATA);
    4148:	bl	3bca <RV3028::readRegister(unsigned char)>
    414c:	mov	r6, r0
	if (!waitforEEPROM()) success = false;
    414e:	mov	r0, r4
    4150:	bl	403c <RV3028::waitforEEPROM()>
    4154:	cmp	r0, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    4156:	mov.w	r1, #15
    415a:	mov	r0, r4
	if (!waitforEEPROM()) success = false;
    415c:	it	eq
    415e:	moveq	r5, #0
	ctrl1 = readRegister(RV3028_CTRL1);
    4160:	bl	3bca <RV3028::readRegister(unsigned char)>
	if (ctrl1 == 0x00)success = false;
    4164:	subs	r2, r0, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    4166:	mov.w	r1, #15
    416a:	mov	r0, r4
	if (ctrl1 == 0x00)success = false;
    416c:	it	eq
    416e:	moveq	r5, #0
	writeRegister(RV3028_CTRL1, ctrl1);
    4170:	and.w	r2, r2, #247	; 0xf7
    4174:	bl	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (!success) return 0xFF;
    4178:	cmp	r5, #0
}
    417a:	ite	ne
    417c:	movne	r0, r6
    417e:	moveq	r0, #255	; 0xff
    4180:	pop	{r4, r5, r6, pc}

00004182 <RV3028::disableTrickleCharge()>:
{
    4182:	push	{r4, lr}
    4184:	mov	r4, r0
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    4186:	movs	r1, #55	; 0x37
    4188:	bl	40ee <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    418c:	movs	r1, #55	; 0x37
    418e:	and.w	r2, r0, #223	; 0xdf
    4192:	mov	r0, r4
}
    4194:	ldmia.w	sp!, {r4, lr}
	writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup);
    4198:	b.w	406c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>

0000419c <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]>:
bool RV3028::setBackupSwitchoverMode(uint8_t val)
    419c:	push	{r4, r5, r6, lr}
    419e:	mov	r6, r1
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    41a0:	movs	r1, #55	; 0x37
bool RV3028::setBackupSwitchoverMode(uint8_t val)
    41a2:	mov	r5, r0
	uint8_t EEPROMBackup = readConfigEEPROM_RAMmirror(EEPROM_Backup_Register);
    41a4:	bl	40ee <RV3028::readConfigEEPROM_RAMmirror(unsigned char)>
    41a8:	bic.w	r2, r0, #12
    41ac:	mov	r4, r0
	if (!writeConfigEEPROM_RAMmirror(EEPROM_Backup_Register, EEPROMBackup)) success = false;
    41ae:	mov	r0, r5
    41b0:	orr.w	r1, r2, r6, lsl #2
    41b4:	uxtb	r2, r1
    41b6:	movs	r1, #55	; 0x37
    41b8:	orr.w	r2, r2, #16
    41bc:	bl	406c <RV3028::writeConfigEEPROM_RAMmirror(unsigned char, unsigned char)>
    41c0:	cbz	r0, 41ca <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]+0x2e>
	if (EEPROMBackup == 0xFF) success = false;
    41c2:	subs.w	r0, r4, #255	; 0xff
    41c6:	it	ne
    41c8:	movne	r0, #1
}
    41ca:	pop	{r4, r5, r6, pc}

000041cc <RV3028::begin(TwoWire&, bool, bool, bool)>:
{
    41cc:	push	{r3, r4, r5, r6, r7, lr}
    41ce:	mov	r6, r2
    41d0:	mov	r4, r0
	_i2cPort = &wirePort;
    41d2:	str	r1, [r0, #8]
	delay(1);
    41d4:	movs	r0, #1
{
    41d6:	mov	r5, r3
    41d8:	ldrb.w	r7, [sp, #24]
	delay(1);
    41dc:	bl	bce4 <delay>
	if (set_24Hour) { set24Hour(); delay(1); }
    41e0:	cbz	r6, 41ee <RV3028::begin(TwoWire&, bool, bool, bool)+0x22>
    41e2:	mov	r0, r4
    41e4:	bl	3e1a <RV3028::set24Hour()>
    41e8:	movs	r0, #1
    41ea:	bl	bce4 <delay>
	if (disable_TrickleCharge) { disableTrickleCharge(); delay(1); }
    41ee:	cbz	r5, 41fc <RV3028::begin(TwoWire&, bool, bool, bool)+0x30>
    41f0:	mov	r0, r4
    41f2:	bl	4182 <RV3028::disableTrickleCharge()>
    41f6:	movs	r0, #1
    41f8:	bl	bce4 <delay>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    41fc:	cbnz	r7, 420c <RV3028::begin(TwoWire&, bool, bool, bool)+0x40>
    41fe:	mov	r0, r4
    4200:	movs	r2, #0
    4202:	movs	r1, #14
}
    4204:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    4208:	b.w	3d70 <RV3028::writeRegister(unsigned char, unsigned char)>
	if (val > 3)return false;
    420c:	movs	r1, #3
    420e:	mov	r0, r4
    4210:	bl	419c <RV3028::setBackupSwitchoverMode(unsigned char) [clone .part.0]>
	return((set_LevelSwitchingMode ? setBackupSwitchoverMode(3) : true) && writeRegister(RV3028_STATUS, 0x00));
    4214:	cmp	r0, #0
    4216:	bne.n	41fe <RV3028::begin(TwoWire&, bool, bool, bool)+0x32>
}
    4218:	pop	{r3, r4, r5, r6, r7, pc}

0000421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    421a:	push	{r3, r4, r5, lr}
    421c:	mov	r4, r0
    421e:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4220:	movs	r2, #60	; 0x3c
    4222:	mov	r1, r5
    4224:	mov	r0, r4
    4226:	bl	c7f4 <usb_mtp_send>
    422a:	cmp	r0, #0
    422c:	ble.n	4220 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    422e:	pop	{r3, r4, r5, pc}

00004230 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    4230:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4234:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4236:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    423a:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    423c:	ldr.w	r3, [r1, #1064]	; 0x428
    4240:	cbnz	r3, 424a <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    4242:	add.w	r2, r0, #544	; 0x220
    4246:	ldr	r4, [pc, #92]	; (42a4 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    4248:	str	r2, [r4, #0]
        write_length_ += len;
    424a:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    424c:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4250:	add.w	r9, r0, #1056	; 0x420
    4254:	ldr.w	sl, [pc, #76]	; 42a4 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4258:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    425c:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    4260:	cmp	r6, r8
    4262:	bgt.n	4268 <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    4264:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4268:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    426c:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    4270:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4272:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    4276:	mov	r0, r3
    4278:	cmp	r5, r2
    427a:	it	ge
    427c:	movge	r5, r2
    427e:	mov	r2, r5
          pos += to_copy;
    4280:	add	r8, r5
          memcpy(dst,src,to_copy);
    4282:	bl	a79c <memcpy>
    4286:	mov	r3, r0
          src += to_copy;
    4288:	add	r7, r5
          dst += to_copy;
    428a:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    428c:	cmp	r9, r3
          dst += to_copy;
    428e:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4292:	bne.n	4260 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4294:	mov.w	r1, #512	; 0x200
    4298:	mov	r0, r4
    429a:	bl	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    429e:	str.w	r4, [sl]
    42a2:	b.n	4260 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    42a4:	.word	0x20020850

000042a8 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    42a8:	push	{r4, r5, r6, lr}
    42aa:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    42ac:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    42ae:	subs	r4, r1, #1
    int num = 0;
    42b0:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    42b2:	ldr	r3, [r0, #0]
    42b4:	mov	r1, r4
    42b6:	ldr	r3, [r3, #28]
    42b8:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    42ba:	ldr	r0, [r5, #0]
    42bc:	mov	r1, r4
    42be:	ldr	r3, [r0, #0]
    42c0:	ldr	r3, [r3, #32]
    42c2:	blx	r3
    42c4:	cbnz	r0, 42ca <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    42c6:	mov	r0, r6
    42c8:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    42ca:	adds	r6, #1
    42cc:	b.n	42ba <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

000042ce <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    42ce:	ldr	r0, [r0, #0]
    42d0:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    42d2:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    42d4:	ldr	r4, [r0, #0]
    42d6:	ldr	r4, [r4, #76]	; 0x4c
    42d8:	blx	r4
    }
    42da:	movw	r2, #8193	; 0x2001
    42de:	movw	r3, #8197	; 0x2005
    42e2:	cmp	r0, #0
    42e4:	ite	ne
    42e6:	movne	r0, r2
    42e8:	moveq	r0, r3
    42ea:	pop	{r4, pc}

000042ec <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    42ec:	ldr	r0, [r0, #0]
    42ee:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    42f0:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    42f2:	ldr	r4, [r0, #0]
    42f4:	ldr	r4, [r4, #80]	; 0x50
    42f6:	mov	ip, r4
    }
    42f8:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    42fc:	bx	ip
	...

00004300 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    4300:	ldr	r3, [pc, #8]	; (430c <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    4302:	ldr	r0, [r0, #0]
      sessionID_ = id;
    4304:	str	r1, [r3, #0]
      storage_->ResetIndex();
    4306:	ldr	r3, [r0, #0]
    4308:	ldr	r3, [r3, #68]	; 0x44
    430a:	bx	r3
    430c:	.word	0x200211bc

00004310 <MTPD::pull_packet(unsigned char*)>:
    {
    4310:	push	{r4, lr}
    4312:	mov	r4, r1
      while(!usb_mtp_available());
    4314:	bl	c7c4 <usb_mtp_available>
    4318:	cmp	r0, #0
    431a:	beq.n	4314 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    431c:	mov	r0, r4
    431e:	movs	r1, #60	; 0x3c
    }
    4320:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    4324:	b.w	c730 <usb_mtp_recv>

00004328 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    4328:	add.w	r3, r0, #8192	; 0x2000
    432c:	push	{r4, r5}
    432e:	ldrb.w	r5, [r3, #1060]	; 0x424
    4332:	cbz	r5, 4342 <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    4334:	ldr.w	r1, [r3, #1064]	; 0x428
    4338:	add	r1, r2
    }
    433a:	pop	{r4, r5}
        write_length_ += len;
    433c:	str.w	r1, [r3, #1064]	; 0x428
    }
    4340:	bx	lr
    4342:	pop	{r4, r5}
    4344:	b.w	4230 <MTPD::write(char const*, int) [clone .part.0]>

00004348 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    4348:	push	{r0, r1, r2, lr}
    434a:	movs	r2, #1
    434c:	strb.w	r1, [sp, #7]
    4350:	add.w	r1, sp, #7
    4354:	bl	4328 <MTPD::write(char const*, int)>
    4358:	add	sp, #12
    435a:	ldr.w	pc, [sp], #4

0000435e <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    435e:	push	{r0, r1, r2, lr}
    4360:	movs	r2, #2
    4362:	strh.w	r1, [sp, #6]
    4366:	add.w	r1, sp, #6
    436a:	bl	4328 <MTPD::write(char const*, int)>
    436e:	add	sp, #12
    4370:	ldr.w	pc, [sp], #4

00004374 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    4374:	push	{r3, r4, r5, lr}
    4376:	mov	r4, r1
    if (*str) 
    4378:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    437a:	mov	r5, r0
    if (*str) 
    437c:	cbz	r1, 43a6 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    437e:	mov	r0, r4
    4380:	subs	r4, #1
    4382:	bl	f310 <strlen>
    4386:	adds	r0, #1
    4388:	uxtb	r1, r0
    438a:	mov	r0, r5
    438c:	bl	4348 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4390:	ldrb.w	r1, [r4, #1]!
    4394:	mov	r0, r5
    4396:	cbnz	r1, 43a0 <MTPD::writestring(char const*)+0x2c>
  }
    4398:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    439c:	b.w	435e <MTPD::write16(unsigned short)>
    43a0:	bl	435e <MTPD::write16(unsigned short)>
    43a4:	b.n	4390 <MTPD::writestring(char const*)+0x1c>
  }
    43a6:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    43aa:	b.w	4348 <MTPD::write8(unsigned char)>
	...

000043b0 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    43b0:	movw	r3, #54274	; 0xd402
    43b4:	cmp	r1, r3
    43b6:	bne.n	43be <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    43b8:	ldr	r1, [pc, #4]	; (43c0 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    43ba:	b.w	4374 <MTPD::writestring(char const*)>
  }
    43be:	bx	lr
    43c0:	.word	0x200011a3

000043c4 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    43c4:	movw	r3, #54274	; 0xd402
    43c8:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    43ca:	push	{r4, lr}
    43cc:	mov	r4, r0
    switch (prop) {
    43ce:	bne.n	4402 <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    43d0:	bl	435e <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    43d4:	mov	r0, r4
    43d6:	movw	r1, #65535	; 0xffff
    43da:	bl	435e <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    43de:	mov	r0, r4
    43e0:	movs	r1, #0
    43e2:	bl	4348 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    43e6:	mov	r0, r4
    43e8:	ldr	r1, [pc, #24]	; (4404 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    43ea:	bl	4374 <MTPD::writestring(char const*)>
    43ee:	mov	r0, r4
    43f0:	ldr	r1, [pc, #16]	; (4404 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    43f2:	bl	4374 <MTPD::writestring(char const*)>
        write8(0);       // no form
    43f6:	mov	r0, r4
    43f8:	movs	r1, #0
  }
    43fa:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    43fe:	b.w	4348 <MTPD::write8(unsigned char)>
  }
    4402:	pop	{r4, pc}
    4404:	.word	0x200011a3

00004408 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    4408:	push	{r0, r1, r2, lr}
    440a:	movs	r2, #4
    440c:	str	r1, [sp, #4]
    440e:	add.w	r1, sp, r2
    4412:	bl	4328 <MTPD::write(char const*, int)>
    4416:	add	sp, #12
    4418:	ldr.w	pc, [sp], #4

0000441c <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    441c:	push	{r4, r5, r6, lr}
    441e:	mov	r4, r0
    4420:	sub	sp, #24
    write16(100);  // MTP version
    4422:	movs	r1, #100	; 0x64
    4424:	ldr	r6, [pc, #240]	; (4518 <MTPD::WriteDescriptor()+0xfc>)
    4426:	bl	435e <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    442a:	movs	r1, #6
    442c:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    442e:	movs	r5, #0
    write32(6);    // MTP extension
    4430:	bl	4408 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    4434:	movs	r1, #100	; 0x64
    4436:	mov	r0, r4
    4438:	bl	435e <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    443c:	ldr	r1, [pc, #220]	; (451c <MTPD::WriteDescriptor()+0x100>)
    443e:	mov	r0, r4
    4440:	bl	4374 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    4444:	movs	r1, #0
    4446:	mov	r0, r4
    4448:	bl	435e <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    444c:	movs	r1, #20
    444e:	mov	r0, r4
    4450:	bl	4408 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    4454:	adds	r5, #1
    4456:	ldrh.w	r1, [r6], #2
    445a:	mov	r0, r4
    445c:	bl	435e <MTPD::write16(unsigned short)>
    4460:	cmp	r5, #20
    4462:	bne.n	4454 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    4464:	movs	r1, #4
    4466:	mov	r0, r4
    4468:	bl	4408 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    446c:	movw	r1, #16388	; 0x4004
    4470:	mov	r0, r4
    4472:	bl	435e <MTPD::write16(unsigned short)>
    4476:	movw	r1, #16389	; 0x4005
    447a:	mov	r0, r4
    447c:	bl	435e <MTPD::write16(unsigned short)>
    4480:	movw	r1, #16395	; 0x400b
    4484:	mov	r0, r4
    4486:	bl	435e <MTPD::write16(unsigned short)>
    448a:	movw	r1, #16396	; 0x400c
    448e:	mov	r0, r4
    4490:	bl	435e <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    4494:	movs	r1, #1
    4496:	mov	r0, r4
    4498:	bl	4408 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    449c:	movw	r1, #54274	; 0xd402
    44a0:	mov	r0, r4
    44a2:	bl	435e <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    44a6:	movs	r1, #0
    44a8:	mov	r0, r4
    44aa:	bl	4408 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    44ae:	movs	r1, #2
    44b0:	mov	r0, r4
    44b2:	bl	4408 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    44b6:	mov.w	r1, #12288	; 0x3000
    44ba:	mov	r0, r4
    44bc:	bl	435e <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    44c0:	movw	r1, #12289	; 0x3001
    44c4:	mov	r0, r4
    44c6:	bl	435e <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    44ca:	ldr	r1, [pc, #84]	; (4520 <MTPD::WriteDescriptor()+0x104>)
    44cc:	mov	r0, r4
    44ce:	bl	4374 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    44d2:	ldr	r1, [pc, #80]	; (4524 <MTPD::WriteDescriptor()+0x108>)
    44d4:	mov	r0, r4
    44d6:	bl	4374 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    44da:	vldr	s0, [pc, #76]	; 4528 <MTPD::WriteDescriptor()+0x10c>
    44de:	add	r2, sp, #4
    44e0:	movs	r1, #2
    44e2:	movs	r0, #3
    44e4:	bl	ba50 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    44e8:	mov	r2, r5
    44ea:	ldr	r1, [pc, #64]	; (452c <MTPD::WriteDescriptor()+0x110>)
    44ec:	add	r0, sp, #4
    44ee:	bl	f0b0 <strlcat>
    writestring( buf );    
    44f2:	add	r1, sp, #4
    44f4:	mov	r0, r4
    44f6:	bl	4374 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    44fa:	ldr	r1, [pc, #52]	; (4530 <MTPD::WriteDescriptor()+0x114>)
    44fc:	add	r2, sp, #4
    writestring( buf );    
    44fe:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    4500:	ldrh.w	r0, [r1, #2]!
    4504:	subs	r3, #1
    4506:	strb.w	r0, [r2], #1
    450a:	bne.n	4500 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    450c:	add	r1, sp, #4
    450e:	mov	r0, r4
    4510:	bl	4374 <MTPD::writestring(char const*)>
  }
    4514:	add	sp, #24
    4516:	pop	{r4, r5, r6, pc}
    4518:	.word	0x20000b70
    451c:	.word	0x2000117f
    4520:	.word	0x20001193
    4524:	.word	0x200011a3
    4528:	.word	0x3fcb851f
    452c:	.word	0x20001198
    4530:	.word	0x20002386

00004534 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    4534:	push	{r4, r5, r6, lr}
    4536:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    4538:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    453a:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    453c:	ldr	r3, [r0, #0]
    453e:	ldr	r3, [r3, #4]
    4540:	blx	r3
    write32(num); // number of storages (disks)
    4542:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    4544:	mov	r5, r0
    write32(num); // number of storages (disks)
    4546:	mov	r0, r4
    4548:	bl	4408 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    454c:	cmp	r6, r5
    454e:	bne.n	4552 <MTPD::WriteStorageIDs()+0x1e>
  }
    4550:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4552:	adds	r6, #1
    4554:	mov	r0, r4
    4556:	mov	r1, r6
    4558:	bl	4408 <MTPD::write32(unsigned long)>
    455c:	b.n	454c <MTPD::WriteStorageIDs()+0x18>

0000455e <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    455e:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    4560:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    4564:	mov	r4, r0
    4566:	mov	r6, r2
    if (write_get_length_) {
    4568:	ldrb.w	r3, [r7, #1060]	; 0x424
    456c:	cbz	r3, 457c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    456e:	bl	42a8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    4572:	adds	r0, #1
      write_length_ *= 4;
    4574:	lsls	r0, r0, #2
    4576:	str.w	r0, [r7, #1064]	; 0x428
  }
    457a:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    457c:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    457e:	bl	42a8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4582:	mov	r1, r0
    4584:	mov	r0, r4
    4586:	bl	4408 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    458a:	ldr	r0, [r4, #0]
    458c:	mov	r2, r6
    458e:	mov	r1, r5
    4590:	ldr	r3, [r0, #0]
    4592:	ldr	r3, [r3, #28]
    4594:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    4596:	ldr	r0, [r4, #0]
    4598:	mov	r1, r5
    459a:	ldr	r3, [r0, #0]
    459c:	ldr	r3, [r3, #32]
    459e:	blx	r3
    45a0:	mov	r1, r0
    45a2:	cmp	r0, #0
    45a4:	beq.n	457a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    45a6:	mov	r0, r4
    45a8:	bl	4408 <MTPD::write32(unsigned long)>
    45ac:	b.n	4596 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

000045b0 <MTPD::GetObjectInfo(unsigned long)>:
  {
    45b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45b4:	mov	r4, r0
    45b6:	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    45b8:	ldr	r0, [r0, #0]
    45ba:	add	r5, sp, #96	; 0x60
    45bc:	add	r6, sp, #32
    45be:	ldr	r3, [r0, #0]
    45c0:	add.w	r8, sp, #22
    45c4:	add	r7, sp, #28
    45c6:	add	r2, sp, #160	; 0xa0
    45c8:	str	r5, [sp, #12]
    45ca:	str	r6, [sp, #8]
    45cc:	str.w	r8, [sp, #4]
    45d0:	str	r7, [sp, #0]
    45d2:	ldr.w	r9, [r3, #36]	; 0x24
    45d6:	add	r3, sp, #24
    45d8:	blx	r9
    uint32_t storage = Store2Storage(store);
    45da:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    45de:	mov	r0, r4
    45e0:	adds	r1, #1
    45e2:	bl	4408 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    45e6:	ldr	r3, [sp, #24]
    45e8:	movw	r1, #12289	; 0x3001
    45ec:	mov	r0, r4
    45ee:	adds	r3, #1
    45f0:	it	ne
    45f2:	movne	r1, #0
    45f4:	bl	435e <MTPD::write16(unsigned short)>
    write16(0);  // protection
    45f8:	mov	r0, r4
    45fa:	movs	r1, #0
    45fc:	bl	435e <MTPD::write16(unsigned short)>
    write32(size); // size
    4600:	ldr	r1, [sp, #24]
    4602:	mov	r0, r4
    4604:	bl	4408 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    4608:	mov	r0, r4
    460a:	movs	r1, #0
    460c:	bl	435e <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    4610:	mov	r0, r4
    4612:	movs	r1, #0
    4614:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    4618:	mov	r0, r4
    461a:	movs	r1, #0
    461c:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    4620:	mov	r0, r4
    4622:	movs	r1, #0
    4624:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    4628:	mov	r0, r4
    462a:	movs	r1, #0
    462c:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    4630:	mov	r0, r4
    4632:	movs	r1, #0
    4634:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    4638:	mov	r0, r4
    463a:	movs	r1, #0
    463c:	bl	4408 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    4640:	ldr	r1, [sp, #28]
    4642:	mov	r0, r4
    4644:	bl	4408 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    4648:	ldr	r1, [sp, #24]
    464a:	mov	r0, r4
    464c:	adds	r3, r1, #1
    464e:	negs	r1, r3
    4650:	adcs	r1, r3
    4652:	bl	435e <MTPD::write16(unsigned short)>
    write32(0); // association description
    4656:	mov	r0, r4
    4658:	movs	r1, #0
    465a:	bl	4408 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    465e:	mov	r0, r4
    4660:	movs	r1, #0
    4662:	bl	4408 <MTPD::write32(unsigned long)>
    writestring(filename);
    4666:	add	r1, sp, #160	; 0xa0
    4668:	mov	r0, r4
    466a:	bl	4374 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    466e:	mov	r1, r6
    4670:	mov	r0, r4
    4672:	bl	4374 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    4676:	mov	r1, r5
    4678:	mov	r0, r4
    467a:	bl	4374 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    467e:	ldr	r1, [pc, #12]	; (468c <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    4680:	mov	r0, r4
    4682:	bl	4374 <MTPD::writestring(char const*)>
  }
    4686:	add	sp, #420	; 0x1a4
    4688:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    468c:	.word	0x20000df4

00004690 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    4690:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4692:	ldr	r6, [pc, #36]	; (46b8 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4694:	movs	r4, #0
    4696:	ldr	r7, [pc, #36]	; (46bc <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4698:	mov	r5, r0
      write32(propertyListNum);
    469a:	ldr	r1, [r6, #0]
    469c:	bl	4408 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    46a0:	ldr	r3, [r6, #0]
    46a2:	cmp	r3, r4
    46a4:	bhi.n	46a8 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    46a6:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    46a8:	ldrh.w	r1, [r7], #2
    46ac:	mov	r0, r5
    46ae:	adds	r4, #1
    46b0:	bl	435e <MTPD::write16(unsigned short)>
    46b4:	b.n	46a0 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    46b6:	nop
    46b8:	.word	0x20002360
    46bc:	.word	0x20000b5c

000046c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    46c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46c4:	mov	r4, r0
    46c6:	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    46c8:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    46ca:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    46cc:	add.w	r8, sp, #22
    46d0:	add.w	r9, sp, #96	; 0x60
    46d4:	ldr	r3, [r0, #0]
    46d6:	add.w	sl, sp, #32
    46da:	add	r6, sp, #28
    46dc:	str.w	r8, [sp, #4]
    46e0:	add	r2, sp, #160	; 0xa0
    46e2:	str.w	r9, [sp, #12]
    46e6:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    46ea:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    46ec:	str	r6, [sp, #0]
    46ee:	ldr.w	fp, [r3, #36]	; 0x24
    46f2:	add	r3, sp, #24
    46f4:	blx	fp
      switch(p2)
    46f6:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    46fa:	ldrh.w	r3, [sp, #22]
      switch(p2)
    46fe:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    4700:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    4702:	add.w	r8, r3, #1
      switch(p2)
    4706:	bhi.n	4728 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    4708:	cmp.w	r5, #56320	; 0xdc00
    470c:	bls.n	4738 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    470e:	sub.w	r5, r5, #56320	; 0xdc00
    4712:	subs	r5, #1
    4714:	cmp	r5, #10
    4716:	bhi.n	4738 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    4718:	tbb	[pc, r5]
    471c:	.word	0x39201611
    4720:	.word	0x27220e0e
    4724:	.short	0x0e29
    4726:	.byte	0x2b
    4727:	.byte	0x00
    4728:	movw	r3, #56385	; 0xdc41
    472c:	cmp	r5, r3
    472e:	beq.n	477c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    4730:	movw	r3, #56388	; 0xdc44
    4734:	cmp	r5, r3
    4736:	beq.n	4760 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    4738:	add	sp, #420	; 0x1a4
    473a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    473e:	mov	r1, r8
          write32(0);
    4740:	mov	r0, r4
    4742:	bl	4408 <MTPD::write32(unsigned long)>
    }
    4746:	b.n	4738 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    4748:	adds	r1, #1
    474a:	movw	r1, #12289	; 0x3001
    474e:	it	ne
    4750:	movne.w	r1, #12288	; 0x3000
          write16(0);
    4754:	mov	r0, r4
    4756:	bl	435e <MTPD::write16(unsigned short)>
          break;
    475a:	b.n	4738 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    475c:	movs	r1, #0
    475e:	b.n	4754 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    4760:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    4762:	mov	r0, r4
    4764:	bl	4374 <MTPD::writestring(char const*)>
          break;
    4768:	b.n	4738 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    476a:	mov	r1, sl
    476c:	b.n	4762 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    476e:	mov	r1, r9
    4770:	b.n	4762 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    4772:	ldr	r1, [r6, #0]
    4774:	cmp	r3, r1
    4776:	it	eq
    4778:	moveq	r1, #0
    477a:	b.n	4740 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    477c:	mov	r1, r7
    477e:	mov	r0, r4
    4780:	bl	4408 <MTPD::write32(unsigned long)>
          write32(parent);
    4784:	ldr	r1, [r6, #0]
    4786:	mov	r0, r4
    4788:	bl	4408 <MTPD::write32(unsigned long)>
          write32(storage);
    478c:	mov	r1, r8
    478e:	mov	r0, r4
    4790:	bl	4408 <MTPD::write32(unsigned long)>
          write32(0);
    4794:	movs	r1, #0
    4796:	b.n	4740 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00004798 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    4798:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    479c:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    479e:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    47a0:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    47a2:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    47a4:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    47a6:	mov.w	fp, #0
    47aa:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    47ac:	ldr	r6, [pc, #228]	; (4894 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    47ae:	ldr	r3, [r3, #20]
    47b0:	blx	r3
    47b2:	cmp	r0, #0
    47b4:	mov	r0, r4
    47b6:	ite	ne
    47b8:	movne	r1, #1
    47ba:	moveq	r1, #4
    47bc:	bl	435e <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    47c0:	ldr	r0, [r4, #0]
    47c2:	mov	r1, r7
    47c4:	ldr	r3, [r0, #0]
    47c6:	ldr	r3, [r3, #24]
    47c8:	blx	r3
    47ca:	adds	r0, #1
    47cc:	uxth	r1, r0
    47ce:	mov	r0, r4
    47d0:	bl	435e <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    47d4:	mov	r0, r4
    47d6:	movs	r1, #0
    47d8:	bl	435e <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    47dc:	ldr	r0, [r4, #0]
    47de:	mov	r1, r7
    47e0:	ldr	r3, [r0, #0]
    47e2:	ldr	r3, [r3, #12]
    47e4:	blx	r3
    47e6:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    47e8:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    47ea:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    47ec:	mov	r1, r7
    47ee:	ldr	r3, [r0, #0]
    47f0:	ldr	r3, [r3, #16]
    47f2:	blx	r3
    47f4:	ldr	r3, [r6, #0]
    47f6:	mov	r9, r0
    47f8:	mov	sl, r1
    47fa:	ldr	r3, [r3, #4]
    47fc:	movs	r2, #5
    47fe:	ldr	r1, [pc, #152]	; (4898 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    4800:	mov	r0, r6
    4802:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4804:	movs	r3, #10
    4806:	mov	r2, r5
    4808:	mov	r0, r6
    480a:	strd	r3, fp, [sp]
    480e:	mov	r3, r8
    4810:	bl	ccce <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4814:	mov	r0, r6
    4816:	bl	cc68 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    481a:	ldr	r3, [r6, #0]
    481c:	ldr	r1, [pc, #124]	; (489c <MTPD::GetStorageInfo(unsigned long)+0x104>)
    481e:	movs	r2, #5
    4820:	ldr	r3, [r3, #4]
    4822:	mov	r0, r6
    4824:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4826:	movs	r3, #10
    4828:	mov	r2, r9
    482a:	mov	r0, r6
    482c:	str	r3, [sp, #0]
    482e:	mov	r3, sl
    4830:	str.w	fp, [sp, #4]
    4834:	bl	ccce <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4838:	mov	r0, r6
    483a:	bl	cc68 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    483e:	movs	r2, #8
    4840:	mov	r0, r4
    4842:	add.w	r1, sp, r2
    4846:	strd	r5, r8, [sp, #8]
    484a:	bl	4328 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    484e:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4852:	mov.w	r2, #8
    4856:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    4858:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    485c:	add.w	r1, sp, r2
    4860:	strd	r5, r3, [sp, #8]
    4864:	bl	4328 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    4868:	mov	r0, r4
    486a:	mov.w	r1, #4294967295
    486e:	bl	4408 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    4872:	ldr	r0, [r4, #0]
    4874:	mov	r1, r7
    4876:	ldr	r3, [r0, #0]
    4878:	ldr	r3, [r3, #8]
    487a:	blx	r3
    487c:	mov	r1, r0
    writestring(name);  // storage descriptor
    487e:	mov	r0, r4
    4880:	bl	4374 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    4884:	ldr	r1, [pc, #24]	; (48a0 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    4886:	mov	r0, r4
  }
    4888:	add	sp, #20
    488a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    488e:	b.w	4374 <MTPD::writestring(char const*)>
    4892:	nop
    4894:	.word	0x20001db8
    4898:	.word	0x20001173
    489c:	.word	0x20001179
    48a0:	.word	0x20000df4

000048a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    48a4:	movw	r2, #56331	; 0xdc0b
    48a8:	cmp	r1, r2
    {
    48aa:	push	{r0, r1, r4, r6, r7, lr}
    48ac:	mov	r4, r0
      switch(p1)
    48ae:	bhi.n	48d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    48b0:	cmp.w	r1, #56320	; 0xdc00
    48b4:	bls.n	48e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    48b6:	sub.w	r3, r1, #56320	; 0xdc00
    48ba:	subs	r3, #1
    48bc:	cmp	r3, #10
    48be:	bhi.n	48e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    48c0:	tbb	[pc, r3]
    48c4:	.word	0x413e2210
    48c8:	.word	0x69570e0e
    48cc:	.short	0x0e75
    48ce:	.byte	0x78
    48cf:	.byte	0x00
    48d0:	movw	r2, #56385	; 0xdc41
    48d4:	cmp	r1, r2
    48d6:	beq.n	49ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    48d8:	movw	r2, #56388	; 0xdc44
    48dc:	cmp	r1, r2
    48de:	beq.n	499c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    48e0:	add	sp, #8
    48e2:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    48e4:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    48e8:	mov	r0, r4
    48ea:	bl	435e <MTPD::write16(unsigned short)>
          write16(6);
    48ee:	mov	r0, r4
    48f0:	movs	r1, #6
    48f2:	bl	435e <MTPD::write16(unsigned short)>
          write8(0); //get
    48f6:	mov	r0, r4
    48f8:	movs	r1, #0
    48fa:	bl	4348 <MTPD::write8(unsigned char)>
          write32(0);
    48fe:	movs	r1, #0
    4900:	mov	r0, r4
    4902:	bl	4408 <MTPD::write32(unsigned long)>
          write32(0);
    4906:	b.n	492a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    4908:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    490c:	mov	r0, r4
    490e:	bl	435e <MTPD::write16(unsigned short)>
          write16(0x004);
    4912:	movs	r1, #4
    4914:	mov	r0, r4
    4916:	bl	435e <MTPD::write16(unsigned short)>
          write8(0); //get
    491a:	movs	r1, #0
    491c:	mov	r0, r4
    491e:	bl	4348 <MTPD::write8(unsigned char)>
          write16(0);
    4922:	movs	r1, #0
    4924:	mov	r0, r4
    4926:	bl	435e <MTPD::write16(unsigned short)>
          write32(0);
    492a:	mov	r0, r4
    492c:	movs	r1, #0
    492e:	bl	4408 <MTPD::write32(unsigned long)>
          write8(0);
    4932:	movs	r1, #0
    4934:	mov	r0, r4
    }
    4936:	add	sp, #8
    4938:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    493c:	b.w	4348 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    4940:	movw	r1, #56323	; 0xdc03
    4944:	b.n	490c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    4946:	movw	r1, #56324	; 0xdc04
    494a:	bl	435e <MTPD::write16(unsigned short)>
          write16(0x008);
    494e:	movs	r1, #8
    4950:	mov	r0, r4
    4952:	bl	435e <MTPD::write16(unsigned short)>
          write8(0); //get
    4956:	movs	r1, #0
    4958:	mov	r0, r4
    495a:	bl	4348 <MTPD::write8(unsigned char)>
          write64(0);
    495e:	movs	r2, #0
    4960:	movs	r3, #0
    4962:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4966:	movs	r2, #8
    4968:	mov	r1, sp
    496a:	mov	r0, r4
    496c:	bl	4328 <MTPD::write(char const*, int)>
          write32(0);
    4970:	b.n	492a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    4972:	movw	r1, #56327	; 0xdc07
    4976:	bl	435e <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    497a:	movw	r1, #65535	; 0xffff
    497e:	mov	r0, r4
    4980:	bl	435e <MTPD::write16(unsigned short)>
          write8(1); //get/set
    4984:	movs	r1, #1
          write8(0); //get
    4986:	mov	r0, r4
    4988:	bl	4348 <MTPD::write8(unsigned char)>
          write8(0);
    498c:	movs	r1, #0
    498e:	mov	r0, r4
    4990:	bl	4348 <MTPD::write8(unsigned char)>
    4994:	b.n	492a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    4996:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    499a:	mov	r0, r4
          write16(0xDC44);
    499c:	bl	435e <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    49a0:	movw	r1, #65535	; 0xffff
    49a4:	mov	r0, r4
    49a6:	bl	435e <MTPD::write16(unsigned short)>
          write8(0); //get
    49aa:	movs	r1, #0
    49ac:	b.n	4986 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    49ae:	movw	r1, #56329	; 0xdc09
    49b2:	b.n	499a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    49b4:	movw	r1, #56331	; 0xdc0b
    49b8:	b.n	48e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    49ba:	bl	435e <MTPD::write16(unsigned short)>
          write16(0x0A);
    49be:	movs	r1, #10
    49c0:	mov	r0, r4
    49c2:	movs	r6, #0
    49c4:	bl	435e <MTPD::write16(unsigned short)>
          write8(0); //get
    49c8:	movs	r7, #0
    49ca:	movs	r1, #0
    49cc:	mov	r0, r4
    49ce:	bl	4348 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    49d2:	movs	r2, #8
    49d4:	mov	r1, sp
    49d6:	mov	r0, r4
    49d8:	strd	r6, r7, [sp]
    49dc:	bl	4328 <MTPD::write(char const*, int)>
          write64(0);
    49e0:	strd	r6, r7, [sp]
    49e4:	b.n	4966 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

000049e6 <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    49e6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49ea:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    49ec:	ldr	r0, [r0, #0]
    49ee:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    49f0:	add.w	r5, r6, #8192	; 0x2000
    {
    49f4:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    49f8:	ldr	r3, [r3, #40]	; 0x28
    {
    49fa:	sub	sp, #20
    49fc:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4a00:	blx	r3
      if (write_get_length_) {
    4a02:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    4a06:	mov	r8, r0
      if (write_get_length_) {
    4a08:	cbz	r4, 4a1e <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    4a0a:	ldr.w	r3, [r5, #1064]	; 0x428
    4a0e:	add	r3, r0
    4a10:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    4a14:	add	sp, #20
    4a16:	vpop	{d8}
    4a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4a1e:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4a22:	movs	r7, #12
    4a24:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4a28:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4a2c:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    4a30:	str	r4, [sp, #12]
        while(pos<size)
    4a32:	ldr	r3, [sp, #12]
    4a34:	cmp	r3, r8
    4a36:	bcc.n	4a52 <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    4a38:	cmp	r7, #0
    4a3a:	beq.n	4a14 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a3c:	mov.w	r1, #512	; 0x200
    4a40:	add.w	r0, r6, #544	; 0x220
    }
    4a44:	add	sp, #20
    4a46:	vpop	{d8}
    4a4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a4e:	b.w	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    4a52:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4a56:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    4a58:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4a5c:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    4a60:	bne.n	4a84 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4a62:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    4a64:	cmp.w	r9, #8192	; 0x2000
    4a68:	it	cc
    4a6a:	movcc	r3, r9
    4a6c:	vmov	r1, s16
    4a70:	ldr	r2, [r0, #0]
    4a72:	str	r3, [sp, #0]
    4a74:	ldr	r3, [r2, #48]	; 0x30
    4a76:	ldr	r2, [sp, #12]
    4a78:	mov	r4, r3
    4a7a:	mov	r3, fp
    4a7c:	blx	r4
            disk_pos=0;
    4a7e:	movs	r3, #0
    4a80:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4a84:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4a88:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4a8c:	add.w	r0, sl, r7
    4a90:	cmp	r9, r3
    4a92:	it	cs
    4a94:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4a96:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4a9a:	add	r1, fp
    4a9c:	cmp	r9, r3
    4a9e:	it	cs
    4aa0:	movcs	r9, r3
    4aa2:	mov	r2, r9
          len += to_copy;
    4aa4:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4aa6:	bl	a79c <memcpy>
          disk_pos += to_copy;
    4aaa:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4aae:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    4ab2:	add	r3, r9
    4ab4:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    4ab8:	ldr	r3, [sp, #12]
    4aba:	add	r3, r9
    4abc:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    4abe:	bne.n	4a32 <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ac0:	mov	r1, r7
    4ac2:	mov	r0, sl
            len=0;
    4ac4:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ac6:	bl	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4aca:	b.n	4a32 <MTPD::GetObject(unsigned long)+0x4c>

00004acc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4acc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ad0:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4ad2:	ldr	r0, [r0, #0]
    {
    4ad4:	mov	r4, r3
    4ad6:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    4ad8:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    4ada:	add.w	r5, r8, #8192	; 0x2000
    {
    4ade:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    4ae2:	ldr	r3, [r3, #40]	; 0x28
    {
    4ae4:	sub	sp, #20
    4ae6:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4aea:	blx	r3
      size -= offset;
    4aec:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    4aee:	cmp.w	r4, #4294967295
    4af2:	it	eq
    4af4:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    4af6:	cmp	r4, r0
    4af8:	mov	r3, r4
    4afa:	it	cs
    4afc:	movcs	r3, r0
    4afe:	str	r3, [sp, #8]
      if (write_get_length_) {
    4b00:	ldrb.w	r3, [r5, #1060]	; 0x424
    4b04:	str	r3, [sp, #12]
    4b06:	cbz	r3, 4b20 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    4b08:	ldr.w	r3, [r5, #1064]	; 0x428
    4b0c:	ldr	r2, [sp, #8]
    4b0e:	add	r3, r2
    4b10:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    4b14:	ldr	r0, [sp, #8]
    4b16:	add	sp, #20
    4b18:	vpop	{d8}
    4b1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4b20:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    4b24:	movs	r7, #12
    4b26:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b2a:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    4b2e:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    4b32:	ldr	r3, [sp, #8]
    4b34:	cmp	r3, r6
    4b36:	bls.n	4b14 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    4b38:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4b3c:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    4b3e:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4b42:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    4b46:	bne.n	4b6c <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4b48:	ldr.w	r0, [r8]
    4b4c:	cmp.w	r9, #8192	; 0x2000
    4b50:	it	cc
    4b52:	movcc	r3, r9
    4b54:	vmov	r1, s16
    4b58:	ldr	r2, [r0, #0]
    4b5a:	str	r3, [sp, #0]
    4b5c:	ldr	r3, [r2, #48]	; 0x30
    4b5e:	mov	r2, r6
    4b60:	mov	r4, r3
    4b62:	mov	r3, fp
    4b64:	blx	r4
            disk_pos=0;
    4b66:	ldr	r3, [sp, #12]
    4b68:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4b6c:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4b70:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b74:	add.w	r0, sl, r7
    4b78:	cmp	r9, r3
    4b7a:	it	cs
    4b7c:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4b7e:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b82:	add	r1, fp
    4b84:	cmp	r9, r3
    4b86:	it	cs
    4b88:	movcs	r9, r3
    4b8a:	mov	r2, r9
          len += to_copy;
    4b8c:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b8e:	bl	a79c <memcpy>
          disk_pos += to_copy;
    4b92:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4b96:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4b9a:	add	r6, r9
          disk_pos += to_copy;
    4b9c:	add	r3, r9
    4b9e:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4ba2:	bne.n	4b32 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ba4:	mov	r1, r7
    4ba6:	mov	r0, sl
            len=0;
    4ba8:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4baa:	bl	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4bae:	b.n	4b32 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00004bb0 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4bb0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4bb4:	mov	r8, r0
    4bb6:	mov	r5, r1
      static int index=0;
      if(!size) 
    4bb8:	mov	r4, r2
    4bba:	ldr.w	fp, [pc, #84]	; 4c10 <MTPD::read(char*, unsigned long)+0x60>
    4bbe:	cbz	r2, 4c06 <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4bc0:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    4bc4:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4bc8:	ldr.w	r6, [fp]
    4bcc:	rsb	r7, r6, #512	; 0x200
    4bd0:	cmp	r7, r4
    4bd2:	it	cs
    4bd4:	movcs	r7, r4
        if (data) {
    4bd6:	cbz	r5, 4be6 <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4bd8:	mov	r0, r5
          data += to_copy;
    4bda:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4bdc:	mov	r2, r7
    4bde:	add.w	r1, r9, r6
    4be2:	bl	a79c <memcpy>
        index += to_copy;
    4be6:	add	r6, r7
        size -= to_copy;
    4be8:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    4bea:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4bee:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    4bf2:	bne.n	4c00 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4bf4:	mov	r1, r9
    4bf6:	mov	r0, r8
    4bf8:	bl	4310 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4bfc:	str.w	sl, [fp]
      while (size) {
    4c00:	cmp	r4, #0
    4c02:	bne.n	4bc8 <MTPD::read(char*, unsigned long)+0x18>
    4c04:	b.n	4c0a <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    4c06:	str.w	r2, [fp]
        }
      }
    }
    4c0a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4c0e:	nop
    4c10:	.word	0x2002084c

00004c14 <MTPD::ReadMTPHeader()>:
  {
    4c14:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    4c16:	movs	r2, #12
    4c18:	add	r1, sp, #4
    4c1a:	bl	4bb0 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4c1e:	ldrh.w	r3, [sp, #8]
    4c22:	cmp	r3, #2
      return header.len - 12;
    4c24:	itet	eq
    4c26:	ldreq	r0, [sp, #4]
      return 0;
    4c28:	movne	r0, #0
      return header.len - 12;
    4c2a:	subeq	r0, #12
  }
    4c2c:	add	sp, #20
    4c2e:	ldr.w	pc, [sp], #4

00004c32 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4c32:	push	{r0, r1, r2, lr}
    4c34:	movs	r2, #1
    4c36:	add.w	r1, sp, #7
    4c3a:	bl	4bb0 <MTPD::read(char*, unsigned long)>
    4c3e:	ldrb.w	r0, [sp, #7]
    4c42:	add	sp, #12
    4c44:	ldr.w	pc, [sp], #4

00004c48 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c48:	push	{r0, r1, r2, lr}
    4c4a:	movs	r2, #2
    4c4c:	add.w	r1, sp, #6
    4c50:	bl	4bb0 <MTPD::read(char*, unsigned long)>
    4c54:	ldrh.w	r0, [sp, #6]
    4c58:	add	sp, #12
    4c5a:	ldr.w	pc, [sp], #4

00004c5e <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4c5e:	push	{r0, r1, r2, lr}
    4c60:	movs	r2, #4
    4c62:	add.w	r1, sp, r2
    4c66:	bl	4bb0 <MTPD::read(char*, unsigned long)>
    4c6a:	ldr	r0, [sp, #4]
    4c6c:	add	sp, #12
    4c6e:	ldr.w	pc, [sp], #4

00004c72 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    4c72:	push	{r4, r5, r6, lr}
    4c74:	mov	r5, r1
    4c76:	mov	r6, r0
    int len = read8();
    4c78:	bl	4c32 <MTPD::read8()>
    if (!buffer) {
    4c7c:	cbz	r5, 4c86 <MTPD::readstring(char*)+0x14>
    4c7e:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4c80:	cmp	r5, r4
    4c82:	bne.n	4c96 <MTPD::readstring(char*)+0x24>
  }
    4c84:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    4c86:	sxth	r2, r0
    4c88:	mov	r1, r5
    4c8a:	mov	r0, r6
    4c8c:	lsls	r2, r2, #1
  }
    4c8e:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    4c92:	b.w	4bb0 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    4c96:	mov	r0, r6
    4c98:	bl	4c48 <MTPD::read16()>
    4c9c:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4ca0:	b.n	4c80 <MTPD::readstring(char*)+0xe>

00004ca2 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    4ca2:	push	{r4, r5, lr}
    4ca4:	mov	r4, r0
    4ca6:	sub	sp, #260	; 0x104
    4ca8:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4caa:	bl	4c14 <MTPD::ReadMTPHeader()>
        readstring(filename);
    4cae:	mov	r1, sp
    4cb0:	mov	r0, r4
    4cb2:	bl	4c72 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    4cb6:	ldr	r0, [r4, #0]
    4cb8:	mov	r2, sp
    4cba:	mov	r1, r5
    4cbc:	ldr	r3, [r0, #0]
    4cbe:	ldr	r3, [r3, #72]	; 0x48
    4cc0:	blx	r3
      }
      else
        return 0x2005;
    }
    4cc2:	movw	r2, #8193	; 0x2001
    4cc6:	movw	r3, #8197	; 0x2005
    4cca:	cmp	r0, #0
    4ccc:	ite	ne
    4cce:	movne	r0, r2
    4cd0:	moveq	r0, r3
    4cd2:	add	sp, #260	; 0x104
    4cd4:	pop	{r4, r5, pc}
	...

00004cd8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4cd8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4cdc:	mov	r4, r0
    4cde:	sub	sp, #268	; 0x10c
    4ce0:	mov	r6, r1
      pull_packet(rx_data_buffer);
    4ce2:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4ce6:	mov	r7, r2
      pull_packet(rx_data_buffer);
    4ce8:	bl	4310 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4cec:	movs	r2, #0
    4cee:	ldr	r3, [pc, #196]	; (4db4 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    4cf0:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4cf2:	add.w	r9, sp, #8
        index=0;
    4cf6:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    4cf8:	bl	4c14 <MTPD::ReadMTPHeader()>
    4cfc:	mov	r5, r0
      read32(); len -=4; // storage
    4cfe:	mov	r0, r4
    4d00:	bl	4c5e <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4d04:	mov	r0, r4
    4d06:	bl	4c48 <MTPD::read16()>
    4d0a:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4d0e:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4d10:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    4d12:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4d14:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    4d16:	rsbs	r8, r3, #0
    4d1a:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4d1e:	bl	4c48 <MTPD::read16()>
      read32(); len -=4; // size
    4d22:	mov	r0, r4
    4d24:	bl	4c5e <MTPD::read32()>
      read16(); len -=2; // thumb format
    4d28:	mov	r0, r4
    4d2a:	bl	4c48 <MTPD::read16()>
      read32(); len -=4; // thumb size
    4d2e:	mov	r0, r4
    4d30:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // thumb width
    4d34:	mov	r0, r4
    4d36:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // thumb height
    4d3a:	mov	r0, r4
    4d3c:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // pix width
    4d40:	mov	r0, r4
    4d42:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // pix height
    4d46:	mov	r0, r4
    4d48:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // bit depth
    4d4c:	mov	r0, r4
    4d4e:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // parent
    4d52:	mov	r0, r4
    4d54:	bl	4c5e <MTPD::read32()>
      read16(); len -=2; // association type
    4d58:	mov	r0, r4
    4d5a:	bl	4c48 <MTPD::read16()>
      read32(); len -=4; // association description
    4d5e:	mov	r0, r4
    4d60:	bl	4c5e <MTPD::read32()>
      read32(); len -=4; // sequence number
    4d64:	mov	r0, r4
    4d66:	bl	4c5e <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4d6a:	mov	r1, r9
    4d6c:	mov	r0, r4
    4d6e:	bl	4c72 <MTPD::readstring(char*)>
    4d72:	mov	r0, r9
    4d74:	bl	f310 <strlen>
    4d78:	adds	r0, #1
    4d7a:	sub.w	r5, r5, r0, lsl #1
    4d7e:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4d80:	cmp	r5, #3
    4d82:	bgt.n	4d9e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    4d84:	cbnz	r5, 4da8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    4d86:	ldr	r0, [r4, #0]
    4d88:	mov	r2, r7
    4d8a:	mov	r1, r6
    4d8c:	ldr	r3, [r0, #0]
    4d8e:	str.w	r9, [sp]
    4d92:	ldr	r4, [r3, #44]	; 0x2c
    4d94:	mov	r3, r8
    4d96:	blx	r4
    }
    4d98:	add	sp, #268	; 0x10c
    4d9a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4d9e:	mov	r0, r4
    4da0:	subs	r5, #4
    4da2:	bl	4c5e <MTPD::read32()>
    4da6:	b.n	4d80 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4da8:	mov	r0, r4
    4daa:	subs	r5, #1
    4dac:	bl	4c32 <MTPD::read8()>
    4db0:	b.n	4d84 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4db2:	nop
    4db4:	.word	0x2002084c

00004db8 <MTPD::SendObject()>:
    { 
    4db8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4dbc:	add.w	r9, r0, #32
    { 
    4dc0:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4dc2:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4dc6:	mov	r1, r9
      disk_pos=0;
    4dc8:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4dcc:	bl	4310 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4dd0:	ldr	r3, [pc, #212]	; (4ea8 <MTPD::SendObject()+0xf0>)
    4dd2:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4dd4:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4dd6:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4dda:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4ddc:	bl	4c14 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4de0:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4de2:	mov	r7, r0
      disk_pos=0;
    4de4:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4de8:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4dea:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4dee:	bgt.n	4e04 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4df0:	ldr	r0, [r4, #0]
    4df2:	ldr	r2, [r0, #0]
      if(disk_pos)
    4df4:	cmp	r3, #0
    4df6:	bne.n	4e92 <MTPD::SendObject()+0xda>
      storage_->close();
    4df8:	ldr	r0, [r4, #0]
    4dfa:	ldr	r3, [r0, #0]
    4dfc:	ldr	r3, [r3, #56]	; 0x38
    4dfe:	blx	r3
      return true;
    4e00:	movs	r0, #1
    4e02:	b.n	4e4c <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4e04:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4e08:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4e0c:	add.w	r0, fp, r3
    4e10:	add.w	r1, r9, sl
    4e14:	cmp	r8, r7
    4e16:	it	cs
    4e18:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4e1a:	cmp	r5, r8
    4e1c:	it	cs
    4e1e:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4e20:	mov	r2, r5
    4e22:	bl	a79c <memcpy>
        disk_pos += to_copy;
    4e26:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    4e2a:	subs	r3, r7, r5
        disk_pos += to_copy;
    4e2c:	add	r2, r5
        len -= to_copy;
    4e2e:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    4e30:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    4e34:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    4e38:	bne.n	4e7e <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    4e3a:	ldr	r0, [r4, #0]
    4e3c:	mov	r1, fp
    4e3e:	ldr	r3, [r0, #0]
    4e40:	ldr	r3, [r3, #52]	; 0x34
    4e42:	blx	r3
    4e44:	cmp.w	r0, #8192	; 0x2000
    4e48:	bcs.n	4e52 <MTPD::SendObject()+0x9a>
    4e4a:	movs	r0, #0
    }
    4e4c:	add	sp, #12
    4e4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    4e52:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4e54:	subs.w	r2, r8, r5
          disk_pos =0;
    4e58:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4e5c:	beq.n	4e7e <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4e5e:	add.w	r1, sl, r5
    4e62:	mov	r0, fp
    4e64:	str	r2, [sp, #4]
    4e66:	add	r1, r9
    4e68:	bl	a79c <memcpy>
            disk_pos += bytes;
    4e6c:	ldr.w	r3, [r6, #1056]	; 0x420
    4e70:	ldr	r2, [sp, #4]
    4e72:	add	r3, r2
    4e74:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    4e78:	sub.w	r3, r7, r8
    4e7c:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    4e7e:	ldr	r3, [sp, #4]
    4e80:	cbz	r3, 4e8e <MTPD::SendObject()+0xd6>
          index=0;
    4e82:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4e86:	mov	r1, r9
    4e88:	mov	r0, r4
    4e8a:	bl	4310 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4e8e:	ldr	r7, [sp, #4]
    4e90:	b.n	4de8 <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4e92:	ldr	r5, [r2, #52]	; 0x34
    4e94:	add.w	r1, r4, #1056	; 0x420
    4e98:	mov	r2, r3
    4e9a:	blx	r5
    4e9c:	ldr.w	r3, [r6, #1056]	; 0x420
    4ea0:	cmp	r0, r3
    4ea2:	bcs.n	4df8 <MTPD::SendObject()+0x40>
    4ea4:	b.n	4e4a <MTPD::SendObject()+0x92>
    4ea6:	nop
    4ea8:	.word	0x2002084c

00004eac <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4eac:	push	{r4, r5, r6, lr}
    4eae:	mov	r5, r1
    4eb0:	add.w	r1, r0, #32
    4eb4:	mov	r6, r2
    4eb6:	mov	r4, r0
    4eb8:	bl	4310 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4ebc:	ldr	r3, [pc, #28]	; (4edc <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4ebe:	movs	r2, #0
    4ec0:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4ec2:	movw	r3, #56327	; 0xdc07
    4ec6:	cmp	r6, r3
    4ec8:	bne.n	4ed6 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4eca:	mov	r1, r5
    4ecc:	mov	r0, r4
    }
    4ece:	ldmia.w	sp!, {r4, r5, r6, lr}
    4ed2:	b.w	4ca2 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4ed6:	movw	r0, #8197	; 0x2005
    4eda:	pop	{r4, r5, r6, pc}
    4edc:	.word	0x2002084c

00004ee0 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4ee0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ee4:	sub	sp, #60	; 0x3c
    4ee6:	mov	r4, r0
    4ee8:	bl	c7c4 <usb_mtp_available>
    4eec:	cmp	r0, #0
    4eee:	beq.w	5348 <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    4ef2:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    4ef6:	movs	r1, #60	; 0x3c
    4ef8:	mov	r0, fp
    4efa:	bl	c730 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4efe:	cmp	r0, #0
    4f00:	beq.w	5348 <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4f04:	ldr	r3, [r4, #40]	; 0x28
    4f06:	ldr	r1, [pc, #756]	; (51fc <MTPD::loop()+0x31c>)
    4f08:	str	r3, [sp, #4]
    4f0a:	ldrh	r3, [r4, #36]	; 0x24
    4f0c:	ldr	r0, [pc, #752]	; (5200 <MTPD::loop()+0x320>)
    4f0e:	str	r3, [sp, #0]
    4f10:	ldr	r3, [r4, #32]
    4f12:	ldrh	r2, [r4, #38]	; 0x26
    4f14:	bl	cca0 <Print::printf(char const*, ...)>
    4f18:	ldr	r3, [r4, #32]
    4f1a:	cmp	r3, #12
    4f1c:	bls.n	4f28 <MTPD::loop()+0x48>
    4f1e:	ldr	r2, [r4, #44]	; 0x2c
    4f20:	ldr	r1, [pc, #736]	; (5204 <MTPD::loop()+0x324>)
    4f22:	ldr	r0, [pc, #732]	; (5200 <MTPD::loop()+0x320>)
    4f24:	bl	cca0 <Print::printf(char const*, ...)>
    4f28:	ldr	r3, [r4, #32]
    4f2a:	cmp	r3, #16
    4f2c:	bls.n	4f38 <MTPD::loop()+0x58>
    4f2e:	ldr	r2, [r4, #48]	; 0x30
    4f30:	ldr	r1, [pc, #720]	; (5204 <MTPD::loop()+0x324>)
    4f32:	ldr	r0, [pc, #716]	; (5200 <MTPD::loop()+0x320>)
    4f34:	bl	cca0 <Print::printf(char const*, ...)>
    4f38:	ldr	r3, [r4, #32]
    4f3a:	cmp	r3, #20
    4f3c:	bls.n	4f48 <MTPD::loop()+0x68>
    4f3e:	ldr	r2, [r4, #52]	; 0x34
    4f40:	ldr	r1, [pc, #704]	; (5204 <MTPD::loop()+0x324>)
    4f42:	ldr	r0, [pc, #700]	; (5200 <MTPD::loop()+0x320>)
    4f44:	bl	cca0 <Print::printf(char const*, ...)>
    4f48:	ldr	r1, [pc, #700]	; (5208 <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    4f4a:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4f4e:	ldr	r0, [pc, #688]	; (5200 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    4f50:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4f54:	bl	cca0 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    4f58:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    4f5a:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4f5c:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    4f5e:	mov	r6, r3
        int op = CONTAINER->op;
    4f60:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    4f62:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    4f66:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    4f68:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    4f6a:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    4f6e:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    4f72:	movw	r1, #8197	; 0x2005
    4f76:	cmp	r0, #2
    4f78:	it	eq
    4f7a:	moveq	r7, r1

        switch (op)
    4f7c:	movw	r0, #4123	; 0x101b
    4f80:	cmp	r2, r0
    4f82:	bhi.n	500c <MTPD::loop()+0x12c>
    4f84:	cmp.w	r2, #4096	; 0x1000
    4f88:	bhi.n	4f90 <MTPD::loop()+0xb0>
    4f8a:	movw	r7, #8197	; 0x2005
    4f8e:	b.n	508a <MTPD::loop()+0x1aa>
    4f90:	sub.w	r2, r2, #4096	; 0x1000
    4f94:	subs	r2, #1
    4f96:	cmp	r2, #26
    4f98:	bhi.n	4f8a <MTPD::loop()+0xaa>
    4f9a:	add	r1, pc, #4	; (adr r1, 4fa0 <MTPD::loop()+0xc0>)
    4f9c:	ldr.w	pc, [r1, r2, lsl #2]
    4fa0:	.word	0x0000502f
    4fa4:	.word	0x00005083
    4fa8:	.word	0x00005343
    4fac:	.word	0x000050b9
    4fb0:	.word	0x000050fd
    4fb4:	.word	0x00005147
    4fb8:	.word	0x0000515d
    4fbc:	.word	0x000051b3
    4fc0:	.word	0x0000520d
    4fc4:	.word	0x00004f8b
    4fc8:	.word	0x00005257
    4fcc:	.word	0x00005275
    4fd0:	.word	0x00005289
    4fd4:	.word	0x00004f8b
    4fd8:	.word	0x00004f8b
    4fdc:	.word	0x00004f8b
    4fe0:	.word	0x00004f8b
    4fe4:	.word	0x00004f8b
    4fe8:	.word	0x00004f8b
    4fec:	.word	0x0000529f
    4ff0:	.word	0x000052e9
    4ff4:	.word	0x00004f8b
    4ff8:	.word	0x00004f8b
    4ffc:	.word	0x00004f8b
    5000:	.word	0x00005333
    5004:	.word	0x0000534f
    5008:	.word	0x00005379
    500c:	add.w	r3, r2, #26496	; 0x6780
    5010:	adds	r3, #127	; 0x7f
    5012:	uxth	r3, r3
    5014:	cmp	r3, #3
    5016:	bhi.n	4f8a <MTPD::loop()+0xaa>
    5018:	sub.w	r2, r2, #38912	; 0x9800
    501c:	subs	r2, #2
    501e:	cmp	r2, #2
    5020:	bhi.w	53cc <MTPD::loop()+0x4ec>
    5024:	tbh	[pc, r2, lsl #1]
    5028:	.word	0x021e01f7
    502c:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    502e:	movs	r6, #0
    5030:	movs	r3, #1
    5032:	mov	r0, r4
    5034:	strb.w	r3, [r5, #1060]	; 0x424
    5038:	str.w	r6, [r5, #1064]	; 0x428
    503c:	bl	441c <MTPD::WriteDescriptor()>
    5040:	ldr.w	r3, [r5, #1064]	; 0x428
    5044:	mov	r0, r4
    5046:	movs	r2, #12
    5048:	adds	r3, #12
    504a:	add	r1, sp, #24
    504c:	str	r3, [sp, #24]
    504e:	movs	r3, #2
    5050:	strh.w	r3, [sp, #28]
    5054:	ldrh	r3, [r4, #38]	; 0x26
    5056:	strh.w	r3, [sp, #30]
    505a:	ldr	r3, [r4, #40]	; 0x28
    505c:	str.w	r6, [r5, #1064]	; 0x428
    5060:	strb.w	r6, [r5, #1060]	; 0x424
    5064:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5066:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    506a:	mov	r0, r4
    506c:	bl	441c <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5070:	ldr	r1, [sp, #24]
    5072:	ubfx	r1, r1, #0, #9
    5076:	cbz	r1, 508a <MTPD::loop()+0x1aa>
    5078:	add.w	r0, r4, #544	; 0x220
    507c:	bl	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    5080:	b.n	508a <MTPD::loop()+0x1aa>
            openSession(p1);
    5082:	mov	r1, r6
    5084:	mov	r0, r4
    5086:	bl	4300 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    508a:	movs	r3, #3
            CONTAINER->len=len;
    508c:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    5090:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    5092:	mov	r1, fp
            CONTAINER->type=3;
    5094:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    5096:	mov	r2, r9
            CONTAINER->transaction_id=id;
    5098:	ldr	r3, [sp, #16]
    509a:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    509c:	ldr	r3, [sp, #12]
    509e:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    50a0:	add.w	r4, r4, #544	; 0x220
    50a4:	mov	r0, r4
    50a6:	bl	a79c <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    50aa:	mov	r1, r9
    50ac:	mov	r0, r4
        }
      }
    }
    50ae:	add	sp, #60	; 0x3c
    50b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    50b4:	b.w	421a <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    50b8:	movs	r6, #0
    50ba:	movs	r3, #1
    50bc:	mov	r0, r4
    50be:	strb.w	r3, [r5, #1060]	; 0x424
    50c2:	str.w	r6, [r5, #1064]	; 0x428
    50c6:	bl	4534 <MTPD::WriteStorageIDs()>
    50ca:	ldr.w	r3, [r5, #1064]	; 0x428
    50ce:	mov	r0, r4
    50d0:	movs	r2, #12
    50d2:	adds	r3, #12
    50d4:	add	r1, sp, #24
    50d6:	str	r3, [sp, #24]
    50d8:	movs	r3, #2
    50da:	strh.w	r3, [sp, #28]
    50de:	ldrh	r3, [r4, #38]	; 0x26
    50e0:	strh.w	r3, [sp, #30]
    50e4:	ldr	r3, [r4, #40]	; 0x28
    50e6:	str.w	r6, [r5, #1064]	; 0x428
    50ea:	strb.w	r6, [r5, #1060]	; 0x424
    50ee:	str	r3, [sp, #32]
    { if (write_get_length_) 
    50f0:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    50f4:	mov	r0, r4
    50f6:	bl	4534 <MTPD::WriteStorageIDs()>
    50fa:	b.n	5070 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    50fc:	mov.w	r8, #0
    5100:	movs	r3, #1
    5102:	mov	r1, r6
    5104:	mov	r0, r4
    5106:	strb.w	r3, [r5, #1060]	; 0x424
    510a:	str.w	r8, [r5, #1064]	; 0x428
    510e:	bl	4798 <MTPD::GetStorageInfo(unsigned long)>
    5112:	ldr.w	r3, [r5, #1064]	; 0x428
    5116:	add	r1, sp, #24
    5118:	mov	r0, r4
    511a:	adds	r3, #12
    511c:	movs	r2, #12
    511e:	str	r3, [sp, #24]
    5120:	movs	r3, #2
    5122:	strh.w	r3, [sp, #28]
    5126:	ldrh	r3, [r4, #38]	; 0x26
    5128:	strh.w	r3, [sp, #30]
    512c:	ldr	r3, [r4, #40]	; 0x28
    512e:	str.w	r8, [r5, #1064]	; 0x428
    5132:	strb.w	r8, [r5, #1060]	; 0x424
    5136:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5138:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    513c:	mov	r1, r6
    513e:	mov	r0, r4
    5140:	bl	4798 <MTPD::GetStorageInfo(unsigned long)>
    5144:	b.n	5070 <MTPD::loop()+0x190>
            if (p2) 
    5146:	cmp.w	r8, #0
    514a:	bne.w	54c0 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    514e:	mov	r2, r3
    5150:	mov	r1, r6
    5152:	mov	r0, r4
    5154:	bl	42a8 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    5158:	str	r0, [sp, #12]
    515a:	b.n	508a <MTPD::loop()+0x1aa>
            if (p2) 
    515c:	cmp.w	r8, #0
    5160:	bne.w	54c0 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    5164:	movs	r2, #1
    5166:	mov	r1, r6
    5168:	mov	r0, r4
    516a:	str.w	r8, [r5, #1064]	; 0x428
    516e:	strb.w	r2, [r5, #1060]	; 0x424
    5172:	mov	r2, r3
    5174:	str	r3, [sp, #20]
    5176:	bl	455e <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    517a:	ldr.w	r2, [r5, #1064]	; 0x428
    517e:	add	r1, sp, #24
    5180:	mov	r0, r4
    5182:	adds	r2, #12
    5184:	str	r2, [sp, #24]
    5186:	movs	r2, #2
    5188:	strh.w	r2, [sp, #28]
    518c:	ldrh	r2, [r4, #38]	; 0x26
    518e:	strh.w	r2, [sp, #30]
    5192:	ldr	r2, [r4, #40]	; 0x28
    5194:	str.w	r8, [r5, #1064]	; 0x428
    5198:	str	r2, [sp, #32]
    519a:	movs	r2, #12
    519c:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    51a0:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    51a4:	ldr	r3, [sp, #20]
    51a6:	mov	r1, r6
    51a8:	mov	r0, r4
    51aa:	mov	r2, r3
    51ac:	bl	455e <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    51b0:	b.n	5070 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    51b2:	mov.w	r8, #0
    51b6:	movs	r3, #1
    51b8:	mov	r1, r6
    51ba:	mov	r0, r4
    51bc:	strb.w	r3, [r5, #1060]	; 0x424
    51c0:	str.w	r8, [r5, #1064]	; 0x428
    51c4:	bl	45b0 <MTPD::GetObjectInfo(unsigned long)>
    51c8:	ldr.w	r3, [r5, #1064]	; 0x428
    51cc:	add	r1, sp, #24
    51ce:	mov	r0, r4
    51d0:	adds	r3, #12
    51d2:	movs	r2, #12
    51d4:	str	r3, [sp, #24]
    51d6:	movs	r3, #2
    51d8:	strh.w	r3, [sp, #28]
    51dc:	ldrh	r3, [r4, #38]	; 0x26
    51de:	strh.w	r3, [sp, #30]
    51e2:	ldr	r3, [r4, #40]	; 0x28
    51e4:	str.w	r8, [r5, #1064]	; 0x428
    51e8:	strb.w	r8, [r5, #1060]	; 0x424
    51ec:	str	r3, [sp, #32]
    { if (write_get_length_) 
    51ee:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    51f2:	mov	r1, r6
    51f4:	mov	r0, r4
    51f6:	bl	45b0 <MTPD::GetObjectInfo(unsigned long)>
    51fa:	b.n	5070 <MTPD::loop()+0x190>
    51fc:	.word	0x200011aa
    5200:	.word	0x20001db8
    5204:	.word	0x200011b8
    5208:	.word	0x20000df2
            TRANSMIT(GetObject(p1));
    520c:	mov.w	r8, #0
    5210:	movs	r3, #1
    5212:	mov	r1, r6
    5214:	mov	r0, r4
    5216:	strb.w	r3, [r5, #1060]	; 0x424
    521a:	str.w	r8, [r5, #1064]	; 0x428
    521e:	bl	49e6 <MTPD::GetObject(unsigned long)>
    5222:	ldr.w	r3, [r5, #1064]	; 0x428
    5226:	add	r1, sp, #24
    5228:	mov	r0, r4
    522a:	adds	r3, #12
    522c:	movs	r2, #12
    522e:	str	r3, [sp, #24]
    5230:	movs	r3, #2
    5232:	strh.w	r3, [sp, #28]
    5236:	ldrh	r3, [r4, #38]	; 0x26
    5238:	strh.w	r3, [sp, #30]
    523c:	ldr	r3, [r4, #40]	; 0x28
    523e:	str.w	r8, [r5, #1064]	; 0x428
    5242:	strb.w	r8, [r5, #1060]	; 0x424
    5246:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5248:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    524c:	mov	r1, r6
    524e:	mov	r0, r4
    5250:	bl	49e6 <MTPD::GetObject(unsigned long)>
    5254:	b.n	5070 <MTPD::loop()+0x190>
              if (p2) {
    5256:	cmp.w	r8, #0
    525a:	bne.w	54c0 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    525e:	ldr	r0, [r4, #0]
    5260:	mov	r1, r6
    5262:	ldr	r3, [r0, #0]
    5264:	ldr	r3, [r3, #60]	; 0x3c
    5266:	blx	r3
                  return_code = 0x2012; // partial deletion
    5268:	movw	r3, #8210	; 0x2012
    526c:	cmp	r0, #0
    526e:	it	eq
    5270:	moveq	r7, r3
    5272:	b.n	508a <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    5274:	mov	r2, r8
    5276:	mov	r1, r6
    5278:	mov	r0, r4
              len = 12 + 3 * 4;
    527a:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    527e:	bl	4cd8 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    5282:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    5286:	b.n	508a <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    5288:	mov	r0, r4
    528a:	mov.w	r9, #12
    528e:	bl	4db8 <MTPD::SendObject()>
    5292:	movw	r3, #8197	; 0x2005
    5296:	cmp	r0, #0
    5298:	it	eq
    529a:	moveq	r7, r3
    529c:	b.n	508a <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    529e:	mov.w	r8, #0
    52a2:	movs	r3, #1
    52a4:	mov	r1, r6
    52a6:	mov	r0, r4
    52a8:	strb.w	r3, [r5, #1060]	; 0x424
    52ac:	str.w	r8, [r5, #1064]	; 0x428
    52b0:	bl	43c4 <MTPD::GetDevicePropDesc(unsigned long)>
    52b4:	ldr.w	r3, [r5, #1064]	; 0x428
    52b8:	add	r1, sp, #24
    52ba:	mov	r0, r4
    52bc:	adds	r3, #12
    52be:	movs	r2, #12
    52c0:	str	r3, [sp, #24]
    52c2:	movs	r3, #2
    52c4:	strh.w	r3, [sp, #28]
    52c8:	ldrh	r3, [r4, #38]	; 0x26
    52ca:	strh.w	r3, [sp, #30]
    52ce:	ldr	r3, [r4, #40]	; 0x28
    52d0:	str.w	r8, [r5, #1064]	; 0x428
    52d4:	strb.w	r8, [r5, #1060]	; 0x424
    52d8:	str	r3, [sp, #32]
    { if (write_get_length_) 
    52da:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    52de:	mov	r1, r6
    52e0:	mov	r0, r4
    52e2:	bl	43c4 <MTPD::GetDevicePropDesc(unsigned long)>
    52e6:	b.n	5070 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    52e8:	mov.w	r8, #0
    52ec:	movs	r3, #1
    52ee:	mov	r1, r6
    52f0:	mov	r0, r4
    52f2:	strb.w	r3, [r5, #1060]	; 0x424
    52f6:	str.w	r8, [r5, #1064]	; 0x428
    52fa:	bl	43b0 <MTPD::GetDevicePropValue(unsigned long)>
    52fe:	ldr.w	r3, [r5, #1064]	; 0x428
    5302:	add	r1, sp, #24
    5304:	mov	r0, r4
    5306:	adds	r3, #12
    5308:	movs	r2, #12
    530a:	str	r3, [sp, #24]
    530c:	movs	r3, #2
    530e:	strh.w	r3, [sp, #28]
    5312:	ldrh	r3, [r4, #38]	; 0x26
    5314:	strh.w	r3, [sp, #30]
    5318:	ldr	r3, [r4, #40]	; 0x28
    531a:	str.w	r8, [r5, #1064]	; 0x428
    531e:	strb.w	r8, [r5, #1060]	; 0x424
    5322:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5324:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    5328:	mov	r1, r6
    532a:	mov	r0, r4
    532c:	bl	43b0 <MTPD::GetDevicePropValue(unsigned long)>
    5330:	b.n	5070 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    5332:	mov	r2, r8
    5334:	mov	r1, r6
    5336:	mov	r0, r4
              len = 12;
    5338:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    533c:	bl	42ce <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    5340:	mov	r7, r0
        if(return_code)
    5342:	cmp	r7, #0
    5344:	bne.w	508a <MTPD::loop()+0x1aa>
    }
    5348:	add	sp, #60	; 0x3c
    534a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    534e:	mov	r2, r8
    5350:	mov	r1, r6
    5352:	mov	r0, r4
              if(!return_code) 
    5354:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    5358:	bl	42ec <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    535c:	cmp	r0, #0
    535e:	itete	eq
    5360:	moveq	r3, r6
    5362:	movne	r3, r0
    5364:	moveq.w	r9, #12
    5368:	movne.w	r9, #16
    536c:	str	r3, [sp, #12]
    536e:	movw	r3, #8193	; 0x2001
    5372:	it	ne
    5374:	movne	r7, r3
    5376:	b.n	508a <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    5378:	mov.w	sl, #0
    537c:	movs	r2, #1
    537e:	mov	r1, r6
    5380:	mov	r0, r4
    5382:	strb.w	r2, [r5, #1060]	; 0x424
    5386:	mov	r2, r8
    5388:	str.w	sl, [r5, #1064]	; 0x428
    538c:	str	r3, [sp, #20]
    538e:	bl	4acc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    5392:	ldr.w	r2, [r5, #1064]	; 0x428
    5396:	add	r1, sp, #24
    5398:	adds	r2, #12
    539a:	str	r2, [sp, #24]
    539c:	movs	r2, #2
    539e:	strh.w	r2, [sp, #28]
    53a2:	ldrh	r2, [r4, #38]	; 0x26
    53a4:	strh.w	r2, [sp, #30]
    53a8:	ldr	r2, [r4, #40]	; 0x28
    53aa:	str.w	sl, [r5, #1064]	; 0x428
    53ae:	strb.w	sl, [r5, #1060]	; 0x424
    53b2:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    53b6:	mov	r0, r4
    53b8:	movs	r2, #32
    53ba:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    53be:	ldr	r3, [sp, #20]
    53c0:	mov	r2, r8
    53c2:	mov	r1, r6
    53c4:	mov	r0, r4
    53c6:	bl	4acc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    53ca:	b.n	5070 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    53cc:	mov.w	r8, #0
    53d0:	movs	r3, #1
    53d2:	mov	r1, r6
    53d4:	mov	r0, r4
    53d6:	strb.w	r3, [r5, #1060]	; 0x424
    53da:	str.w	r8, [r5, #1064]	; 0x428
    53de:	bl	4690 <MTPD::getObjectPropsSupported(unsigned long)>
    53e2:	ldr.w	r3, [r5, #1064]	; 0x428
    53e6:	add	r1, sp, #24
    53e8:	mov	r0, r4
    53ea:	adds	r3, #12
    53ec:	movs	r2, #12
    53ee:	str	r3, [sp, #24]
    53f0:	movs	r3, #2
    53f2:	strh.w	r3, [sp, #28]
    53f6:	ldrh	r3, [r4, #38]	; 0x26
    53f8:	strh.w	r3, [sp, #30]
    53fc:	ldr	r3, [r4, #40]	; 0x28
    53fe:	str.w	r8, [r5, #1064]	; 0x428
    5402:	strb.w	r8, [r5, #1060]	; 0x424
    5406:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5408:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    540c:	mov	r1, r6
    540e:	mov	r0, r4
    5410:	bl	4690 <MTPD::getObjectPropsSupported(unsigned long)>
    5414:	b.n	5070 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    5416:	mov.w	sl, #0
    541a:	movs	r3, #1
    541c:	mov	r2, r8
    541e:	mov	r1, r6
    5420:	mov	r0, r4
    5422:	strb.w	r3, [r5, #1060]	; 0x424
    5426:	str.w	sl, [r5, #1064]	; 0x428
    542a:	bl	48a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    542e:	ldr.w	r3, [r5, #1064]	; 0x428
    5432:	add	r1, sp, #24
    5434:	mov	r0, r4
    5436:	adds	r3, #12
    5438:	movs	r2, #12
    543a:	str	r3, [sp, #24]
    543c:	movs	r3, #2
    543e:	strh.w	r3, [sp, #28]
    5442:	ldrh	r3, [r4, #38]	; 0x26
    5444:	strh.w	r3, [sp, #30]
    5448:	ldr	r3, [r4, #40]	; 0x28
    544a:	str.w	sl, [r5, #1064]	; 0x428
    544e:	strb.w	sl, [r5, #1060]	; 0x424
    5452:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5454:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    5458:	mov	r2, r8
    545a:	mov	r1, r6
    545c:	mov	r0, r4
    545e:	bl	48a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5462:	b.n	5070 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    5464:	mov.w	sl, #0
    5468:	movs	r3, #1
    546a:	mov	r2, r8
    546c:	mov	r1, r6
    546e:	mov	r0, r4
    5470:	strb.w	r3, [r5, #1060]	; 0x424
    5474:	str.w	sl, [r5, #1064]	; 0x428
    5478:	bl	46c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    547c:	ldr.w	r3, [r5, #1064]	; 0x428
    5480:	add	r1, sp, #24
    5482:	mov	r0, r4
    5484:	adds	r3, #12
    5486:	movs	r2, #12
    5488:	str	r3, [sp, #24]
    548a:	movs	r3, #2
    548c:	strh.w	r3, [sp, #28]
    5490:	ldrh	r3, [r4, #38]	; 0x26
    5492:	strh.w	r3, [sp, #30]
    5496:	ldr	r3, [r4, #40]	; 0x28
    5498:	str.w	sl, [r5, #1064]	; 0x428
    549c:	strb.w	sl, [r5, #1060]	; 0x424
    54a0:	str	r3, [sp, #32]
    { if (write_get_length_) 
    54a2:	bl	4230 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    54a6:	mov	r2, r8
    54a8:	mov	r1, r6
    54aa:	mov	r0, r4
    54ac:	bl	46c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    54b0:	b.n	5070 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    54b2:	mov	r2, r8
    54b4:	mov	r1, r6
    54b6:	mov	r0, r4
    54b8:	bl	4eac <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    54bc:	mov	r7, r0
              break;
    54be:	b.n	5342 <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    54c0:	movw	r7, #8212	; 0x2014
    54c4:	b.n	508a <MTPD::loop()+0x1aa>
    54c6:	nop

000054c8 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    54c8:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    54ca:	cbz	r3, 5502 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    54cc:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    54ce:	movw	r5, #513	; 0x201
    54d2:	str	r5, [r4, #16]
    54d4:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    54d6:	cbz	r1, 5504 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    54d8:	ldrb.w	r5, [r1], #1
    54dc:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    54de:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    54e0:	str	r5, [r6, #100]	; 0x64
    54e2:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    54e4:	ldr	r6, [r5, #112]	; 0x70
    54e6:	lsls	r6, r6, #30
    54e8:	bmi.n	54f4 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    54ea:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    54ec:	cbz	r2, 54f2 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    54ee:	strb.w	r5, [r2], #1
				count_read--;
    54f2:	subs	r4, #1
    54f4:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    54f6:	ldr	r5, [r5, #20]
    54f8:	lsls	r5, r5, #31
    54fa:	bpl.n	54e2 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    54fc:	cmp	r3, #0
    54fe:	bne.n	54d6 <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    5500:	cbnz	r4, 550a <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    5502:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5504:	ldrb.w	r5, [r0, #60]	; 0x3c
    5508:	b.n	54dc <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    550a:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    550c:	ldr	r1, [r3, #112]	; 0x70
    550e:	lsls	r1, r1, #30
    5510:	bmi.n	5500 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    5512:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    5514:	cbz	r2, 551a <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    5516:	strb.w	r3, [r2], #1
			count_read--;
    551a:	subs	r4, #1
    551c:	b.n	5500 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

0000551e <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    551e:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5520:	ldr	r2, [r3, #0]
    5522:	ldr	r1, [r2, #0]
    5524:	ldr	r2, [r3, #4]
    5526:	tst	r1, r2
void SPIClass::end() {
    5528:	push	{r4, lr}
    552a:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    552c:	beq.n	5564 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    552e:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    5530:	movs	r1, #0
    5532:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    5534:	movs	r1, #5
    5536:	ldrb	r2, [r0, #16]
    5538:	add	r3, r2
    553a:	ldrb	r0, [r3, #16]
    553c:	bl	c474 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    5540:	ldrb	r2, [r4, #17]
    5542:	ldr	r3, [r4, #4]
    5544:	movs	r1, #5
    5546:	add	r3, r2
    5548:	ldrb.w	r0, [r3, #36]	; 0x24
    554c:	bl	c474 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5550:	ldr	r3, [r4, #4]
    5552:	ldrb	r2, [r4, #18]
    5554:	movs	r1, #5
    5556:	add	r3, r2
	}
}
    5558:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    555c:	ldrb.w	r0, [r3, #56]	; 0x38
    5560:	b.w	c474 <pinMode>
}
    5564:	pop	{r4, pc}

00005566 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    5566:	ldrb.w	r2, [r0, #163]	; 0xa3
    556a:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    556e:	subs	r0, r2, r0
    5570:	bx	lr

00005572 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5572:	ldrb.w	r3, [r0, #162]	; 0xa2
    5576:	ldrb.w	r2, [r0, #163]	; 0xa3
    557a:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    557c:	itttt	hi
    557e:	addhi	r2, r3, #1
    5580:	strbhi.w	r2, [r0, #162]	; 0xa2
    5584:	addhi	r0, r0, r3
    5586:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5588:	it	ls
    558a:	movls.w	r0, #4294967295
	}
    558e:	bx	lr

00005590 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5590:	ldrb.w	r3, [r0, #162]	; 0xa2
    5594:	ldrb.w	r2, [r0, #163]	; 0xa3
    5598:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    559a:	itte	hi
    559c:	addhi	r0, r0, r3
    559e:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    55a0:	movls.w	r0, #4294967295
	}
    55a4:	bx	lr

000055a6 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    55a6:	bx	lr

000055a8 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    55a8:	ldrh.w	r3, [r0, #304]	; 0x130
    55ac:	cbz	r3, 55ba <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    55ae:	ldrb.w	r3, [r0, #303]	; 0x12f
    55b2:	cmp	r3, #136	; 0x88
    55b4:	bls.n	55be <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    55b6:	movs	r3, #1
    55b8:	str	r3, [r0, #4]
			return 0;
    55ba:	movs	r0, #0
    55bc:	bx	lr
		txBuffer[txBufferLength++] = data;
    55be:	adds	r2, r3, #1
    55c0:	strb.w	r2, [r0, #303]	; 0x12f
    55c4:	add	r0, r3
    55c6:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    55ca:	movs	r0, #1
    55cc:	bx	lr

000055ce <TwoWire::write(unsigned char const*, unsigned int)>:
{
    55ce:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    55d0:	ldrh.w	r3, [r0, #304]	; 0x130
{
    55d4:	mov	r5, r0
    55d6:	mov	r4, r2
	if (transmitting || slave_mode) {
    55d8:	cbz	r3, 5606 <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    55da:	ldrb.w	r3, [r0, #303]	; 0x12f
    55de:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    55e2:	cmp	r4, r2
    55e4:	ittt	hi
    55e6:	movhi	r0, #1
    55e8:	movhi	r4, r2
    55ea:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    55ec:	add.w	r0, r5, #165	; 0xa5
    55f0:	mov	r2, r4
    55f2:	add	r0, r3
    55f4:	bl	a79c <memcpy>
		txBufferLength += quantity;
    55f8:	ldrb.w	r3, [r5, #303]	; 0x12f
    55fc:	add	r3, r4
    55fe:	strb.w	r3, [r5, #303]	; 0x12f
}
    5602:	mov	r0, r4
    5604:	pop	{r3, r4, r5, pc}
	return 0;
    5606:	mov	r4, r3
    5608:	b.n	5602 <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

0000560c <TwoWire::force_clock()>:
{
    560c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5610:	ldr	r1, [r0, #20]
{
    5612:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5614:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5616:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    561a:	ldr	r4, [pc, #244]	; (5710 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    561c:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5620:	ldr.w	r8, [pc, #244]	; 5718 <TwoWire::force_clock()+0x10c>
    5624:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    5626:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    5628:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    562a:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    562e:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    5632:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    5634:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    5638:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    563c:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    5640:	lsls	r7, r3, #4
    5642:	add.w	r3, r4, r3, lsl #4
    5646:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5648:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    564c:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    5650:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5652:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    5654:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5658:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    565a:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    565c:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    565e:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    5662:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    5666:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    5668:	ldr	r4, [pc, #168]	; (5714 <TwoWire::force_clock()+0x108>)
    566a:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    566c:	ldr.w	lr, [pc, #172]	; 571c <TwoWire::force_clock()+0x110>
    5670:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    5672:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5674:	ldr.w	r3, [lr]
    5678:	udiv	r3, r3, r8
    567c:	mov.w	r8, #10
    5680:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5684:	ldr.w	r8, [r4, #4]
    5688:	sub.w	r8, r8, r7
    568c:	cmp	r3, r8
    568e:	bhi.n	5684 <TwoWire::force_clock()+0x78>
    5690:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    5692:	ldr	r7, [pc, #128]	; (5714 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5694:	ldr.w	sl, [pc, #128]	; 5718 <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    5698:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    569a:	tst.w	r4, ip
    569e:	beq.n	56a6 <TwoWire::force_clock()+0x9a>
    56a0:	ldr	r4, [r0, #8]
    56a2:	tst	r4, r5
    56a4:	bne.n	570a <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    56a6:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    56aa:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    56ae:	ldr.w	r4, [lr]
    56b2:	udiv	r4, r4, sl
    56b6:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    56ba:	ldr.w	r8, [r7, #4]
    56be:	sub.w	r8, r8, fp
    56c2:	cmp	r4, r8
    56c4:	bhi.n	56ba <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    56c6:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    56ca:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    56ce:	ldr.w	r4, [lr]
    56d2:	udiv	r4, r4, sl
    56d6:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    56da:	ldr.w	r8, [r7, #4]
    56de:	sub.w	r8, r8, fp
    56e2:	cmp	r4, r8
    56e4:	bhi.n	56da <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    56e6:	subs	r3, #1
    56e8:	bne.n	5698 <TwoWire::force_clock()+0x8c>
	bool ret = false;
    56ea:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    56ec:	ldrb	r3, [r2, #24]
    56ee:	add.w	r3, r1, r3, lsl #4
    56f2:	ldr	r3, [r3, #12]
    56f4:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    56f8:	ldrb	r3, [r2, #25]
    56fa:	ldr	r2, [sp, #4]
    56fc:	add.w	r1, r1, r3, lsl #4
    5700:	ldr	r3, [r1, #44]	; 0x2c
    5702:	str	r3, [r2, #0]
}
    5704:	add	sp, #12
    5706:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    570a:	movs	r0, #1
    570c:	b.n	56ec <TwoWire::force_clock()+0xe0>
    570e:	nop
    5710:	.word	0x20000614
    5714:	.word	0xe0001000
    5718:	.word	0x000f4240
    571c:	.word	0x20001db4

00005720 <TwoWire::wait_idle()>:
	return systick_millis_count;
    5720:	ldr	r2, [pc, #44]	; (5750 <TwoWire::wait_idle()+0x30>)
{
    5722:	push	{r4, lr}
    5724:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5726:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    5728:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    572a:	tst.w	r3, #33554432	; 0x2000000
    572e:	bne.n	573a <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    5730:	mov.w	r3, #32512	; 0x7f00
	return true;
    5734:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    5736:	str	r3, [r4, #20]
}
    5738:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    573a:	lsls	r3, r3, #7
    573c:	bmi.n	5730 <TwoWire::wait_idle()+0x10>
    573e:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    5740:	subs	r3, r3, r1
		if (timeout > 16) {
    5742:	cmp	r3, #16
    5744:	bls.n	5728 <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    5746:	bl	560c <TwoWire::force_clock()>
    574a:	cmp	r0, #0
    574c:	bne.n	5730 <TwoWire::wait_idle()+0x10>
    574e:	b.n	5738 <TwoWire::wait_idle()+0x18>
    5750:	.word	0x20021380

00005754 <TwoWire::endTransmission(unsigned char)>:
{
    5754:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    5758:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    575c:	mov	r7, r0
    575e:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5760:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    5762:	cmp.w	r8, #0
    5766:	beq.n	57c6 <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    5768:	bl	5720 <TwoWire::wait_idle()>
    576c:	cbz	r0, 57c6 <TwoWire::endTransmission(unsigned char)+0x72>
    576e:	ldr.w	r9, [pc, #196]	; 5834 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    5772:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5774:	mov.w	fp, #512	; 0x200
    5778:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    577c:	cmp	r6, r8
    577e:	bhi.n	57b8 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    5780:	ldr	r3, [r4, #92]	; 0x5c
    5782:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    5786:	cmp	r3, #3
    5788:	bhi.n	57b8 <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    578a:	cbnz	r6, 579e <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    578c:	ldrb.w	r2, [r7, #165]	; 0xa5
    5790:	orr.w	r2, r2, #1024	; 0x400
    5794:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    5796:	movs	r2, #1
				fifo_used++;
    5798:	adds	r3, #1
    579a:	mov	r6, r2
    579c:	b.n	5786 <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    579e:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    57a0:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    57a4:	bcs.n	57b0 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    57a6:	add	r6, r7
    57a8:	ldrb.w	r1, [r6, #165]	; 0xa5
    57ac:	str	r1, [r4, #96]	; 0x60
    57ae:	b.n	5798 <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    57b0:	cbz	r5, 57b6 <TwoWire::endTransmission(unsigned char)+0x62>
    57b2:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    57b6:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    57b8:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    57ba:	lsls	r2, r3, #20
    57bc:	bpl.n	57ca <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    57be:	ldr	r3, [r4, #16]
    57c0:	orr.w	r3, r3, #768	; 0x300
    57c4:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    57c6:	movs	r5, #4
    57c8:	b.n	57d8 <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    57ca:	lsls	r0, r3, #19
    57cc:	bpl.n	57de <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    57ce:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    57d0:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    57d2:	orr.w	r3, r3, #768	; 0x300
    57d6:	str	r3, [r4, #16]
}
    57d8:	mov	r0, r5
    57da:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    57de:	lsls	r1, r3, #21
    57e0:	bpl.n	57f4 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    57e2:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    57e4:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    57e6:	orr.w	r3, r3, #768	; 0x300
    57ea:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    57ec:	mov.w	r3, #512	; 0x200
    57f0:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    57f2:	b.n	57d8 <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    57f4:	lsls	r2, r3, #18
    57f6:	bmi.n	5804 <TwoWire::endTransmission(unsigned char)+0xb0>
    57f8:	ldr.w	r2, [r9]
    57fc:	sub.w	r2, r2, sl
    5800:	cmp	r2, #50	; 0x32
    5802:	bls.n	5814 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5804:	ldr	r3, [r4, #16]
    5806:	orr.w	r3, r3, #768	; 0x300
    580a:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    580c:	mov.w	r3, #512	; 0x200
    5810:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    5812:	b.n	57c6 <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    5814:	cmp	r6, r8
    5816:	bls.n	5828 <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5818:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    581a:	ands.w	r2, r2, #7
    581e:	bne.n	5828 <TwoWire::endTransmission(unsigned char)+0xd4>
    5820:	lsls	r3, r3, #22
    5822:	bmi.n	582e <TwoWire::endTransmission(unsigned char)+0xda>
    5824:	cmp	r5, #0
    5826:	beq.n	57d8 <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    5828:	bl	c960 <yield>
	}
    582c:	b.n	577c <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    582e:	mov	r5, r2
    5830:	b.n	57d8 <TwoWire::endTransmission(unsigned char)+0x84>
    5832:	nop
    5834:	.word	0x20021380

00005838 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    5838:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    583c:	mov	r7, r0
    583e:	mov	r6, r1
    5840:	mov	r9, r2
    5842:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5844:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    5846:	bl	5720 <TwoWire::wait_idle()>
    584a:	cmp	r0, #0
    584c:	beq.n	5944 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    584e:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    5850:	cmp.w	r9, #1
    5854:	ldr.w	sl, [pc, #240]	; 5948 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    5858:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    585c:	uxtb	r6, r6
    585e:	it	cc
    5860:	movcc.w	r9, #1
    5864:	ldr.w	fp, [sl]
    5868:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    586c:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5870:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    5874:	cmp	r4, #2
    5876:	bhi.n	5896 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    5878:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    587a:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    587e:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    5882:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5886:	orr.w	r2, r2, #256	; 0x100
    588a:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    588c:	subs	r0, r3, r4
    588e:	cmp	r0, #3
    5890:	bhi.n	5896 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    5892:	cmp	r4, #3
    5894:	bne.n	58c4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    5896:	ldrb.w	r3, [r7, #163]	; 0xa3
    589a:	cmp	r3, #135	; 0x87
    589c:	bls.n	58de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    589e:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    58a0:	lsls	r1, r3, #20
    58a2:	bpl.n	5900 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    58a4:	ldr	r3, [r5, #16]
    58a6:	orr.w	r3, r3, #768	; 0x300
    58aa:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    58ac:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    58ae:	tst.w	r3, #458752	; 0x70000
    58b2:	beq.n	58bc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    58b4:	ldr	r3, [r5, #16]
    58b6:	orr.w	r3, r3, #512	; 0x200
    58ba:	str	r3, [r5, #16]
	return rxBufferLength;
    58bc:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    58c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    58c4:	cbnz	r4, 58cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    58c6:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    58c8:	adds	r4, #1
				tx_fifo--;
    58ca:	b.n	588c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    58cc:	cmp	r4, #1
    58ce:	bne.n	58d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    58d0:	str	r2, [r5, #96]	; 0x60
    58d2:	b.n	58c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    58d4:	cmp.w	r8, #0
    58d8:	beq.n	58c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    58da:	str	r1, [r5, #96]	; 0x60
    58dc:	b.n	58c8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    58de:	ldr	r2, [r5, #92]	; 0x5c
    58e0:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    58e4:	cmp	r2, #0
    58e6:	beq.n	589e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    58e8:	ldrb.w	r3, [r7, #163]	; 0xa3
    58ec:	cmp	r3, #135	; 0x87
    58ee:	bhi.n	589e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    58f0:	ldr	r1, [r5, #112]	; 0x70
    58f2:	adds	r0, r3, #1
    58f4:	add	r3, r7
				rx_fifo--;
    58f6:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    58f8:	strb.w	r0, [r7, #163]	; 0xa3
    58fc:	strb	r1, [r3, #26]
				rx_fifo--;
    58fe:	b.n	58e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    5900:	tst.w	r3, #9216	; 0x2400
    5904:	bne.n	5912 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    5906:	ldr.w	r2, [sl]
    590a:	sub.w	r2, r2, fp
    590e:	cmp	r2, #50	; 0x32
    5910:	bls.n	5922 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5912:	ldr	r3, [r5, #16]
    5914:	orr.w	r3, r3, #768	; 0x300
    5918:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    591a:	mov.w	r3, #512	; 0x200
    591e:	str	r3, [r5, #96]	; 0x60
			break;
    5920:	b.n	58ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    5922:	ldrb.w	r2, [r7, #163]	; 0xa3
    5926:	cmp	r2, r9
    5928:	bcc.n	593e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    592a:	cmp	r4, #2
    592c:	bls.n	593e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    592e:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    5930:	lsls	r2, r2, #29
    5932:	bne.n	593e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    5934:	lsls	r3, r3, #22
    5936:	bmi.n	58ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    5938:	cmp.w	r8, #0
    593c:	beq.n	58ac <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    593e:	bl	c960 <yield>
	}
    5942:	b.n	5874 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    5944:	movs	r0, #4
    5946:	b.n	58c0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    5948:	.word	0x20021380

0000594c <TwoWire::isr()>:
{
    594c:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    594e:	ldr	r6, [r0, #16]
{
    5950:	mov	r4, r0
	uint32_t status = port->SSR;
    5952:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    5956:	ands.w	r3, r5, #3840	; 0xf00
    595a:	beq.n	5960 <TwoWire::isr()+0x14>
    595c:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    5960:	lsls	r0, r5, #30
    5962:	bpl.n	5984 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    5964:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    5968:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    596a:	itt	mi
    596c:	movmi	r3, #0
    596e:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    5972:	ldrb.w	r3, [r4, #163]	; 0xa3
    5976:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    5978:	itttt	ls
    597a:	addls	r1, r3, #1
    597c:	addls	r3, r3, r4
    597e:	strbls.w	r1, [r4, #163]	; 0xa3
    5982:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    5984:	lsls	r2, r5, #31
    5986:	bpl.n	59c2 <TwoWire::isr()+0x76>
		if (!transmitting) {
    5988:	ldrb.w	r3, [r4, #304]	; 0x130
    598c:	cbnz	r3, 59a2 <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    598e:	ldr.w	r3, [r4, #312]	; 0x138
    5992:	cbz	r3, 5996 <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    5994:	blx	r3
			txBufferIndex = 0;
    5996:	movs	r3, #0
    5998:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    599c:	movs	r3, #1
    599e:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    59a2:	ldrb.w	r3, [r4, #302]	; 0x12e
    59a6:	ldrb.w	r2, [r4, #303]	; 0x12f
    59aa:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    59ac:	ittet	hi
    59ae:	addhi	r2, r3, #1
    59b0:	addhi	r3, r3, r4
			port->STDR = 0;
    59b2:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    59b4:	strbhi.w	r2, [r4, #302]	; 0x12e
    59b8:	it	hi
    59ba:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    59be:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    59c2:	lsls	r3, r5, #22
    59c4:	bpl.n	59e2 <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    59c6:	ldrb.w	r0, [r4, #163]	; 0xa3
    59ca:	cbz	r0, 59d4 <TwoWire::isr()+0x88>
    59cc:	ldr.w	r3, [r4, #316]	; 0x13c
    59d0:	cbz	r3, 59d4 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    59d2:	blx	r3
		rxBufferIndex = 0;
    59d4:	movs	r3, #0
    59d6:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    59da:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    59de:	strb.w	r3, [r4, #304]	; 0x130
}
    59e2:	pop	{r4, r5, r6, pc}

000059e4 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    59e4:	ldr	r0, [pc, #4]	; (59ec <lpi2c1_isr()+0x8>)
    59e6:	b.w	594c <TwoWire::isr()>
    59ea:	nop
    59ec:	.word	0x20001dc8

000059f0 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    59f0:	ldr	r0, [pc, #4]	; (59f8 <lpi2c3_isr()+0x8>)
    59f2:	b.w	594c <TwoWire::isr()>
    59f6:	nop
    59f8:	.word	0x20001f08

000059fc <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    59fc:	ldr	r0, [pc, #4]	; (5a04 <lpi2c4_isr()+0x8>)
    59fe:	b.w	594c <TwoWire::isr()>
    5a02:	nop
    5a04:	.word	0x20002048

00005a08 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5a08:	ldr	r3, [r0, #16]
	port->MCR = 0;
    5a0a:	movs	r2, #0
	if (frequency < 400000) {
    5a0c:	ldr	r0, [pc, #76]	; (5a5c <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    5a0e:	str	r2, [r3, #16]
	if (frequency < 400000) {
    5a10:	cmp	r1, r0
    5a12:	bhi.n	5a3a <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5a14:	ldr	r2, [pc, #72]	; (5a60 <TwoWire::setClock(unsigned long)+0x58>)
    5a16:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    5a18:	movs	r2, #1
    5a1a:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    5a1c:	ldr	r2, [pc, #68]	; (5a64 <TwoWire::setClock(unsigned long)+0x5c>)
    5a1e:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    5a20:	mov.w	r2, #180224	; 0x2c000
    5a24:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    5a26:	ldr	r2, [r3, #72]	; 0x48
    5a28:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    5a2a:	movs	r2, #0
    5a2c:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    5a2e:	mov.w	r2, #65537	; 0x10001
    5a32:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    5a34:	movs	r2, #1
    5a36:	str	r2, [r3, #16]
}
    5a38:	bx	lr
	} else if (frequency < 1000000) {
    5a3a:	ldr	r0, [pc, #44]	; (5a68 <TwoWire::setClock(unsigned long)+0x60>)
    5a3c:	cmp	r1, r0
    5a3e:	ldr	r1, [pc, #44]	; (5a6c <TwoWire::setClock(unsigned long)+0x64>)
    5a40:	bhi.n	5a50 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    5a42:	ldr	r0, [pc, #44]	; (5a70 <TwoWire::setClock(unsigned long)+0x68>)
    5a44:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5a46:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    5a48:	ldr	r2, [pc, #40]	; (5a74 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5a4a:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    5a4c:	str	r1, [r3, #44]	; 0x2c
    5a4e:	b.n	5a26 <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    5a50:	ldr	r0, [pc, #36]	; (5a78 <TwoWire::setClock(unsigned long)+0x70>)
    5a52:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5a54:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5a56:	ldr	r2, [pc, #36]	; (5a7c <TwoWire::setClock(unsigned long)+0x74>)
    5a58:	b.n	5a4a <TwoWire::setClock(unsigned long)+0x42>
    5a5a:	nop
    5a5c:	.word	0x00061a7f
    5a60:	.word	0x1928373b
    5a64:	.word	0x05050bb8
    5a68:	.word	0x000f423f
    5a6c:	.word	0x00057f00
    5a70:	.word	0x0c121a1c
    5a74:	.word	0x02020e10
    5a78:	.word	0x0407090a
    5a7c:	.word	0x01010960

00005a80 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    5a80:	mov	r3, r0
    size_t n = end - str;
    5a82:	subs	r0, r2, r1
    if (cp < 0X80) {
    5a84:	cmp	r3, #127	; 0x7f
    5a86:	bhi.n	5a94 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5a88:	cmp	r0, #0
    5a8a:	beq.n	5b10 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5a8c:	mov	r0, r1
    5a8e:	strb.w	r3, [r0], #1
    5a92:	bx	lr
    } else if (cp < 0X800) {
    5a94:	cmp.w	r3, #2048	; 0x800
    5a98:	bcs.n	5ab6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5a9a:	cmp	r0, #1
    5a9c:	bls.n	5b0e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5a9e:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5aa0:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5aa4:	mov	r0, r1
    5aa6:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5aaa:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5aae:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5ab2:	strb	r3, [r1, #1]
    5ab4:	bx	lr
    } else if (cp < 0X10000) {
    5ab6:	cmp.w	r3, #65536	; 0x10000
    5aba:	bcs.n	5ae0 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5abc:	cmp	r0, #2
    5abe:	bls.n	5b0e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5ac0:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5ac2:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5ac4:	orn	r2, r2, #31
    5ac8:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5aca:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5ace:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5ad2:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5ad6:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5ada:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5adc:	strb	r3, [r1, #2]
    5ade:	bx	lr
       if (n < 4) goto fail;
    5ae0:	cmp	r0, #3
    5ae2:	bls.n	5b0e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5ae4:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5ae6:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5ae8:	orn	r2, r2, #15
    5aec:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5aee:	ubfx	r2, r3, #12, #6
    5af2:	orn	r2, r2, #127	; 0x7f
    5af6:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5af8:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5afc:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5b00:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5b04:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5b08:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5b0a:	strb	r3, [r1, #3]
    5b0c:	bx	lr
    return nullptr;
    5b0e:	movs	r0, #0
  }
    5b10:	bx	lr
	...

00005b14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5b14:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    5b16:	push	{r4, r5, lr}
    5b18:	mov	r5, r0
    if (str >= end) {
    5b1a:	bcs.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5b1c:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    5b1e:	ldrsb.w	r0, [r0]
    5b22:	cmp	r0, #0
    5b24:	blt.n	5b2c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    5b26:	adds	r0, r5, #1
      *rtn = ch;
    5b28:	str	r3, [r2, #0]
  }
    5b2a:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5b2c:	and.w	r0, r3, #224	; 0xe0
    5b30:	cmp	r0, #192	; 0xc0
    5b32:	bne.n	5b72 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5b34:	and.w	r3, r3, #31
      n = 2;
    5b38:	movs	r4, #2
    if ((str + n) > end) {
    5b3a:	adds	r0, r5, r4
    5b3c:	cmp	r0, r1
    5b3e:	bhi.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    5b40:	adds	r5, #1
      ch = str[i];
    5b42:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    5b46:	and.w	r4, r1, #192	; 0xc0
    5b4a:	cmp	r4, #128	; 0x80
    5b4c:	bne.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    5b4e:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    5b52:	cmp	r5, r0
      cp |= ch & 0X3F;
    5b54:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    5b58:	bne.n	5b42 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    5b5a:	sub.w	r4, r3, #128	; 0x80
    5b5e:	ldr	r1, [pc, #56]	; (5b98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    5b60:	cmp	r4, r1
    5b62:	bhi.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    5b64:	sub.w	r1, r3, #55296	; 0xd800
    5b68:	cmp.w	r1, #2048	; 0x800
    5b6c:	bcc.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    5b6e:	str	r3, [r2, #0]
    return str + n;
    5b70:	b.n	5b2a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    5b72:	and.w	r0, r3, #240	; 0xf0
    5b76:	cmp	r0, #224	; 0xe0
    5b78:	bne.n	5b82 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    5b7a:	and.w	r3, r3, #15
      n = 3;
    5b7e:	movs	r4, #3
    5b80:	b.n	5b3a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    5b82:	and.w	r0, r3, #248	; 0xf8
    5b86:	cmp	r0, #240	; 0xf0
    5b88:	bne.n	5b92 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5b8a:	and.w	r3, r3, #7
      n = 4;
    5b8e:	movs	r4, #4
    5b90:	b.n	5b3a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    5b92:	movs	r0, #0
    5b94:	b.n	5b2a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5b96:	nop
    5b98:	.word	0x0010ff7f

00005b9c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5b9c:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5b9e:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5ba0:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    5ba2:	lsls	r2, r3, #31
    5ba4:	bpl.n	5be6 <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5ba6:	ldr	r0, [r0, #4]
    5ba8:	add.w	r2, r4, #16
    5bac:	ldr	r1, [r4, #12]
    5bae:	ldr	r3, [r0, #0]
    5bb0:	str	r2, [sp, #4]
    5bb2:	ldr	r3, [r3, #36]	; 0x24
    5bb4:	blx	r3
    5bb6:	ldr	r2, [sp, #4]
    5bb8:	mov	r5, r0
    5bba:	cbnz	r0, 5bc4 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5bbc:	movs	r5, #0
}
    5bbe:	mov	r0, r5
    5bc0:	add	sp, #8
    5bc2:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5bc4:	ldrb	r3, [r4, #0]
    5bc6:	lsls	r3, r3, #30
    5bc8:	bmi.n	5bd4 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5bca:	ldrb	r3, [r4, #0]
    5bcc:	bic.w	r3, r3, #1
    5bd0:	strb	r3, [r4, #0]
    5bd2:	b.n	5bbe <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5bd4:	adds	r0, r4, #4
    5bd6:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5bd8:	ldr	r3, [r0, #0]
    5bda:	add	r1, r6
    5bdc:	ldr	r3, [r3, #36]	; 0x24
    5bde:	blx	r3
    5be0:	cmp	r0, #0
    5be2:	bne.n	5bca <FsCache::sync()+0x2e>
    5be4:	b.n	5bbc <FsCache::sync()+0x20>
  return true;
    5be6:	movs	r5, #1
    5be8:	b.n	5bbe <FsCache::sync()+0x22>

00005bea <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    5bea:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5bec:	push	{r4, r5, r6, lr}
    5bee:	mov	r4, r0
    5bf0:	mov	r6, r1
    5bf2:	mov	r5, r2
  if (!m_blockDev) {
    5bf4:	cbnz	r3, 5bfa <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    5bf6:	movs	r0, #0
}
    5bf8:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    5bfa:	ldr	r3, [r0, #12]
    5bfc:	cmp	r3, r1
    5bfe:	beq.n	5c12 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5c00:	bl	5b9c <FsCache::sync()>
    5c04:	cmp	r0, #0
    5c06:	beq.n	5bf6 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    5c08:	lsls	r3, r5, #29
    5c0a:	bpl.n	5c22 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5c0c:	movs	r3, #0
    m_sector = sector;
    5c0e:	str	r6, [r4, #12]
    m_status = 0;
    5c10:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    5c12:	ldrb	r3, [r4, #0]
    5c14:	and.w	r5, r5, #3
    5c18:	mov	r0, r4
    5c1a:	orrs	r3, r5
    5c1c:	strb.w	r3, [r0], #16
  return m_buffer;
    5c20:	b.n	5bf8 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    5c22:	ldr	r0, [r4, #4]
    5c24:	add.w	r2, r4, #16
    5c28:	mov	r1, r6
    5c2a:	ldr	r3, [r0, #0]
    5c2c:	ldr	r3, [r3, #16]
    5c2e:	blx	r3
    5c30:	cmp	r0, #0
    5c32:	bne.n	5c0c <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5c34:	b.n	5bf6 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

00005c38 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    5c38:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    5c3a:	push	{r4, r5, lr}
  if (chr < 127) {
    5c3c:	bhi.n	5c8e <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    5c3e:	sub.w	r3, r0, #97	; 0x61
    5c42:	cmp	r3, #25
    5c44:	ite	hi
    5c46:	movhi	r3, #0
    5c48:	movls	r3, #1
    5c4a:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5c4e:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5c50:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    5c52:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5c56:	ldrh.w	r5, [r1, r2, lsl #2]
    5c5a:	cmp	r5, r0
    mid = left + (right - left)/2;
    5c5c:	ite	hi
    5c5e:	movhi	r4, r2
    5c60:	movls	r3, r2
  while (right - left > 1) {
    5c62:	subs	r2, r4, r3
    5c64:	cmp	r2, #1
    5c66:	bhi.n	5c52 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    5c68:	uxth	r2, r3
    5c6a:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    5c6e:	cmp	r0, r3
    5c70:	bcc.n	5cce <toUpcase(unsigned short)+0x96>
    5c72:	add.w	r1, r1, r2, lsl #2
    5c76:	subs	r3, r0, r3
    5c78:	ldrb	r2, [r1, #3]
    5c7a:	cmp	r3, r2
    5c7c:	bge.n	5cce <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    5c7e:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    5c82:	cmp	r2, #1
    5c84:	bne.n	5c96 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    5c86:	and.w	r3, r3, #1
    5c8a:	subs	r3, r0, r3
    5c8c:	b.n	5c4e <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5c8e:	movs	r4, #53	; 0x35
  size_t left = 0;
    5c90:	movs	r3, #0
    5c92:	ldr	r1, [pc, #68]	; (5cd8 <toUpcase(unsigned short)+0xa0>)
    5c94:	b.n	5c62 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    5c96:	cbz	r2, 5ca0 <toUpcase(unsigned short)+0x68>
    5c98:	uxth	r2, r2
    5c9a:	add	r2, r0
    5c9c:	uxth	r0, r2
    5c9e:	b.n	5c50 <toUpcase(unsigned short)+0x18>
    5ca0:	movw	r2, #58272	; 0xe3a0
    5ca4:	b.n	5c9a <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    5ca6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5caa:	ldrh.w	r5, [r1, r2, lsl #2]
    5cae:	cmp	r5, r0
    mid = left + (right - left)/2;
    5cb0:	ite	hi
    5cb2:	movhi	r4, r2
    5cb4:	movls	r3, r2
  while (right - left > 1) {
    5cb6:	subs	r2, r4, r3
    5cb8:	cmp	r2, #1
    5cba:	bhi.n	5ca6 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5cbc:	uxth	r3, r3
    5cbe:	ldrh.w	r2, [r1, r3, lsl #2]
    5cc2:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5cc4:	itt	eq
    5cc6:	addeq.w	r1, r1, r3, lsl #2
    5cca:	ldrheq	r0, [r1, #2]
    5ccc:	b.n	5c50 <toUpcase(unsigned short)+0x18>
    5cce:	movs	r4, #75	; 0x4b
    5cd0:	movs	r3, #0
    5cd2:	ldr	r1, [pc, #8]	; (5cdc <toUpcase(unsigned short)+0xa4>)
    5cd4:	b.n	5cb6 <toUpcase(unsigned short)+0x7e>
    5cd6:	nop
    5cd8:	.word	0x20000b98
    5cdc:	.word	0x20000a30

00005ce0 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5ce0:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    5ce2:	push	{r0, r1, r4, lr}
    5ce4:	mov	r4, r0
  if (ls) {
    5ce6:	cbz	r3, 5cf2 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    5ce8:	movs	r2, #0
    5cea:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5cec:	mov	r0, r3
    5cee:	add	sp, #8
    5cf0:	pop	{r4, pc}
  } else if (next >= end) {
    5cf2:	ldrd	r0, r1, [r0, #4]
    5cf6:	cmp	r0, r1
    5cf8:	bcs.n	5cec <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    5cfa:	add	r2, sp, #4
    5cfc:	bl	5b14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5d00:	cbnz	r0, 5d08 <FsName::get16()+0x28>
  return 0XFFFF;
    5d02:	movw	r3, #65535	; 0xffff
    5d06:	b.n	5cec <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    5d08:	ldr	r2, [sp, #4]
    next = ptr;
    5d0a:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5d0c:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5d10:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    5d12:	bcc.n	5cec <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5d14:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5d18:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5d1a:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5d1e:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    5d22:	strh	r3, [r4, #12]
    5d24:	uxth	r3, r2
    5d26:	b.n	5cec <FsName::get16()+0xc>

00005d28 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    5d28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d2c:	mov	r6, r2
    5d2e:	mov	r5, r1
    5d30:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5d34:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5d36:	ldrh.w	r4, [r5, #2]!
    5d3a:	cbnz	r3, 5d4e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5d3c:	ldrd	r2, r3, [r6, #4]
    5d40:	cmp	r2, r3
    5d42:	bne.n	5d4e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    5d44:	clz	r0, r4
    5d48:	lsrs	r0, r0, #5
}
    5d4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5d4e:	mov	r0, r6
    5d50:	bl	5ce0 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5d54:	bl	5c38 <toUpcase(unsigned short)>
    5d58:	mov	r7, r0
    5d5a:	mov	r0, r4
    5d5c:	bl	5c38 <toUpcase(unsigned short)>
    5d60:	cmp	r7, r0
    5d62:	bne.n	5d6c <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5d64:	cmp	r5, r8
    5d66:	bne.n	5d34 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5d68:	movs	r0, #1
    5d6a:	b.n	5d4a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5d6c:	movs	r0, #0
    5d6e:	b.n	5d4a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00005d70 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5d70:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5d74:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5d78:	mov	sl, r0
    5d7a:	mov	r8, r1
  if (!isOpen()) {
    5d7c:	cmp	r3, #0
    5d7e:	beq.n	5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5d80:	subs	r2, #1
  char* str = name;
    5d82:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5d84:	mov.w	r9, #2
  uint16_t hs = 0;
    5d88:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5d8a:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5d8c:	ldrb.w	r3, [sl, #48]	; 0x30
    5d90:	cmp	r3, r9
    5d92:	bcc.n	5dfc <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5d94:	movs	r2, #0
    5d96:	mov	r1, r9
    5d98:	mov	r0, sl
    5d9a:	bl	5e82 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5d9e:	cbz	r0, 5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5da0:	ldrb	r3, [r0, #0]
    5da2:	cmp	r3, #193	; 0xc1
    5da4:	bne.n	5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5da6:	mov	r6, r0
    5da8:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5dac:	ldr	r3, [pc, #108]	; (5e1c <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5dae:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    5db2:	cbz	r5, 5dec <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    5db4:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5db8:	uxth	r2, r2
    5dba:	cmp.w	r2, #1024	; 0x400
    5dbe:	bcs.n	5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5dc0:	and.w	r5, r3, r5, lsl #10
    5dc4:	ubfx	r0, r0, #0, #10
    5dc8:	orrs	r0, r5
    5dca:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5dce:	mov	r1, r4
    5dd0:	mov	r2, r7
    5dd2:	bl	5a80 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5dd6:	mov	r4, r0
    5dd8:	cbz	r0, 5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5dda:	movs	r5, #0
    5ddc:	ldr	r3, [pc, #60]	; (5e1c <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5dde:	cmp	fp, r6
    5de0:	bne.n	5dae <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5de2:	add.w	r9, r9, #1
    5de6:	uxtb.w	r9, r9
    5dea:	b.n	5d8c <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5dec:	add.w	r2, r0, #10240	; 0x2800
    5df0:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    5df2:	cmp.w	r2, #2048	; 0x800
    5df6:	bcc.n	5e08 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    5df8:	cmp	r0, #0
    5dfa:	bne.n	5dce <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5dfc:	movs	r3, #0
  return str - name;
    5dfe:	sub.w	r0, r4, r8
  *str = '\0';
    5e02:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5e04:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    5e08:	cmp.w	r2, #1024	; 0x400
    5e0c:	bcs.n	5e12 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5e0e:	mov	r5, r0
    5e10:	b.n	5dde <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    5e12:	movs	r0, #0
    5e14:	strb.w	r0, [r8]
  return 0;
    5e18:	b.n	5e04 <ExFatFile::getName8(char*, unsigned int)+0x94>
    5e1a:	nop
    5e1c:	.word	0x000ffc00

00005e20 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5e20:	movs	r0, #0
    next = begin;
    5e22:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5e24:	push	{r4, r5, r6, lr}
    5e26:	mov	r4, r1
  uint16_t hash = 0;
    5e28:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    5e2a:	movw	r5, #65535	; 0xffff
    5e2e:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5e30:	strh	r0, [r1, #12]
    return !ls && next == end;
    5e32:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5e34:	str	r0, [r4, #16]
    5e36:	cbnz	r3, 5e74 <ExFatFile::hashName(ExName_t*)+0x54>
    5e38:	ldrd	r2, r3, [r4, #4]
    5e3c:	cmp	r2, r3
    5e3e:	bne.n	5e74 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5e40:	subs	r0, #1
  fname->nameHash = hash;
    5e42:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5e44:	cmp	r0, #254	; 0xfe
    5e46:	ite	hi
    5e48:	movhi	r0, #0
    5e4a:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5e4c:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5e4e:	bl	5c38 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5e52:	lsls	r3, r6, #15
    5e54:	orr.w	r3, r3, r6, lsr #1
    5e58:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5e5c:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5e5e:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5e60:	ubfx	r3, r3, #1, #15
    5e64:	orr.w	r3, r3, r2, lsl #15
    5e68:	uxtah	r3, r0, r3
    fname->nameLength++;
    5e6c:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5e6e:	uxth	r6, r3
    fname->nameLength++;
    5e70:	adds	r0, #1
    5e72:	b.n	5e32 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    5e74:	mov	r0, r4
    5e76:	bl	5ce0 <FsName::get16()>
    if (u == 0XFFFF) {
    5e7a:	cmp	r0, r5
    5e7c:	bne.n	5e4e <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    5e7e:	movs	r0, #0
    5e80:	b.n	5e4c <ExFatFile::hashName(ExName_t*)+0x2c>

00005e82 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5e82:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5e84:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5e88:	sub	sp, #20
    5e8a:	mov	r4, r0
    5e8c:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5e8e:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5e90:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    5e92:	ldmia.w	r3, {r0, r1, r2}
    5e96:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5e9a:	lsls	r2, r7, #5
    5e9c:	mov	r1, r5
    5e9e:	ldr	r0, [r4, #32]
    5ea0:	bl	6876 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5ea4:	cmp	r0, #1
    5ea6:	bne.n	5eb6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5ea8:	mov	r2, r6
    5eaa:	mov	r1, r5
    5eac:	ldr	r0, [r4, #32]
    5eae:	bl	67dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5eb2:	add	sp, #20
    5eb4:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    5eb6:	movs	r0, #0
    5eb8:	b.n	5eb2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005eba <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5eba:	push	{r4, lr}
    5ebc:	mov	r4, r0
  bool rtn = sync();
    5ebe:	bl	6d98 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    5ec2:	movs	r3, #0
    5ec4:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5ec8:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5ecc:	pop	{r4, pc}

00005ece <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5ece:	push	{r3, r4, r5, lr}
    5ed0:	mov	r5, r1
    5ed2:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5ed4:	add.w	r1, r0, #36	; 0x24
    5ed8:	movs	r2, #0
    5eda:	ldr	r0, [r0, #32]
    5edc:	bl	67dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5ee0:	cbz	r0, 5eec <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    5ee2:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    5ee4:	strh	r3, [r5, #0]
    5ee6:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    5ee8:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    5eea:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5eec:	pop	{r3, r4, r5, pc}

00005eee <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    5eee:	push	{r3, r4, r5, lr}
    5ef0:	mov	r5, r1
    5ef2:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    5ef4:	add.w	r1, r0, #36	; 0x24
    5ef8:	movs	r2, #0
    5efa:	ldr	r0, [r0, #32]
    5efc:	bl	67dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5f00:	cbz	r0, 5f0c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    5f02:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    5f04:	strh	r3, [r5, #0]
    5f06:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    5f08:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    5f0a:	strh	r3, [r4, #0]

 fail:
  return false;
}
    5f0c:	pop	{r3, r4, r5, pc}

00005f0e <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5f0e:	push	{r3, r4, r5, lr}
    5f10:	mov	r5, r1
  if (isOpen()) {
    5f12:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    5f16:	mov	r4, r0
  if (isOpen()) {
    5f18:	cbnz	r1, 5f30 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    5f1a:	movs	r2, #56	; 0x38
    5f1c:	bl	a758 <memset>
  m_attributes = FILE_ATTR_ROOT;
    5f20:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    5f22:	movs	r0, #1
  m_vol = vol;
    5f24:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    5f26:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    5f2a:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    5f2e:	pop	{r3, r4, r5, pc}
  return false;
    5f30:	movs	r0, #0
    5f32:	b.n	5f2e <ExFatFile::openRoot(ExFatVolume*)+0x20>

00005f34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    5f34:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    5f36:	mov	r5, r1
    5f38:	ldrb.w	r4, [r1], #1
    5f3c:	cmp	r4, #32
    5f3e:	beq.n	5f36 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    5f40:	ldr	r7, [pc, #108]	; (5fb0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    5f42:	str	r5, [r2, #0]
  fname->end = path;
    5f44:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    5f46:	mov	r6, r5
    5f48:	ldrb.w	r4, [r6], #1
    5f4c:	cbz	r4, 5f52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5f4e:	cmp	r4, #47	; 0x2f
    5f50:	bne.n	5f6a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    5f52:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5f54:	ldrb.w	r1, [r5], #1
    5f58:	cmp	r1, #32
    5f5a:	beq.n	5f52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5f5c:	cmp	r1, #47	; 0x2f
    5f5e:	beq.n	5f52 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5f60:	str	r4, [r3, #0]
  return hashName(fname);
    5f62:	mov	r1, r2

 fail:
  return false;
}
    5f64:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    5f66:	b.w	5e20 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    5f6a:	cmp	r4, #60	; 0x3c
    5f6c:	bhi.n	5f94 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    5f6e:	cmp	r4, #33	; 0x21
    5f70:	bhi.n	5f80 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5f72:	subs	r1, r4, #1
    5f74:	cmp	r1, #30
    5f76:	bls.n	5f8e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    5f78:	cmp	r4, #32
    5f7a:	bne.n	5fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    5f7c:	mov	r5, r6
    5f7e:	b.n	5f46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    5f80:	sub.w	r1, r4, #34	; 0x22
    5f84:	uxtb	r1, r1
    5f86:	lsr.w	r1, r7, r1
    5f8a:	lsls	r1, r1, #31
    5f8c:	bpl.n	5faa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    5f8e:	movs	r0, #0
    5f90:	pop	{r4, r5, r6, r7}
    5f92:	bx	lr
    5f94:	cmp	r4, #92	; 0x5c
    5f96:	beq.n	5f8e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5f98:	bhi.n	5fa4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    5f9a:	subs	r4, #62	; 0x3e
    5f9c:	cmp	r4, #1
    5f9e:	bls.n	5f8e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    5fa0:	str	r6, [r2, #8]
    5fa2:	b.n	5f7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5fa4:	cmp	r4, #124	; 0x7c
    5fa6:	beq.n	5f8e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5fa8:	b.n	5fa0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    5faa:	cmp	r4, #46	; 0x2e
    5fac:	b.n	5f7a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    5fae:	nop
    5fb0:	.word	0x05002101

00005fb4 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5fb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fb8:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5fbc:	ldrb.w	r3, [r0, #51]	; 0x33
    5fc0:	sub	sp, #12
    5fc2:	mov	r4, r0
    5fc4:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5fc6:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    5fc8:	mov	r6, r2
  if (!isReadable()) {
    5fca:	bpl.n	6094 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5fcc:	lsls	r0, r3, #25
    5fce:	bmi.n	5fd8 <ExFatFile::read(void*, unsigned int)+0x24>
    5fd0:	ldrb.w	r3, [r4, #49]	; 0x31
    5fd4:	lsls	r1, r3, #28
    5fd6:	bpl.n	5ff0 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    5fd8:	ldrd	r2, r3, [r4]
    5fdc:	ldrd	r1, r0, [r4, #16]
    5fe0:	adds	r5, r6, r2
    5fe2:	adc.w	r3, r3, #0
    5fe6:	cmp	r1, r5
    5fe8:	sbcs.w	r3, r0, r3
    5fec:	bcs.n	5ff0 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5fee:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5ff0:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5ff4:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5ff6:	vmov	s16, r3
    5ffa:	b.n	60e0 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5ffc:	ldr	r0, [r4, #32]
    5ffe:	ldrd	r3, r2, [r4]
    6002:	ldr.w	r7, [r0, #1080]	; 0x438
    6006:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6008:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    600c:	cbnz	r7, 6022 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    600e:	orrs	r3, r2
    6010:	bne.n	606c <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6012:	ldrb.w	r3, [r4, #49]	; 0x31
    6016:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6018:	ite	mi
    601a:	ldrmi.w	r3, [r0, #1076]	; 0x434
    601e:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    6020:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    6022:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6026:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    6028:	ldr	r2, [r4, #24]
    602a:	ldrb.w	r1, [fp, #1093]	; 0x445
    602e:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6030:	ldr.w	r2, [fp, #1068]	; 0x42c
    6034:	lsls	r5, r1
    6036:	add.w	r5, r5, r7, lsr #9
    603a:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    603c:	cmp.w	sl, #0
    6040:	bne.n	60a6 <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    6042:	cmp.w	r8, #512	; 0x200
    6046:	bcc.n	60a6 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    6048:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    604c:	cmp	r5, r2
    604e:	beq.n	60a6 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6050:	cmp.w	r8, #1024	; 0x400
    6054:	bcs.n	60f4 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    6056:	ldr.w	r0, [fp, #532]	; 0x214
    605a:	mov	r2, r9
    605c:	mov	r1, r5
    605e:	ldr	r3, [r0, #0]
    6060:	ldr	r3, [r3, #16]
    6062:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    6064:	cbz	r0, 6094 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    6066:	mov.w	r7, #512	; 0x200
    606a:	b.n	60cc <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    606c:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    6070:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    6072:	lsls	r3, r3, #25
    6074:	bpl.n	607c <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    6076:	adds	r1, #1
    6078:	str	r1, [r4, #24]
    607a:	b.n	6022 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    607c:	vmov	r2, s16
    6080:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    6084:	cmp	r0, #0
    6086:	blt.n	6094 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    6088:	bne.n	6022 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    608a:	ldrb.w	r3, [r4, #49]	; 0x31
    608e:	tst.w	r3, #80	; 0x50
    6092:	bne.n	60e6 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    6094:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    6098:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    609c:	orr.w	r3, r3, #2
    60a0:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    60a4:	b.n	60ea <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    60a6:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    60aa:	movs	r2, #0
    60ac:	mov	r1, r5
    60ae:	add.w	r0, fp, #528	; 0x210
    60b2:	cmp	r7, r8
    60b4:	it	cs
    60b6:	movcs	r7, r8
    60b8:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    60bc:	cmp	r0, #0
    60be:	beq.n	6094 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    60c0:	add.w	r1, r0, sl
    60c4:	mov	r2, r7
    60c6:	mov	r0, r9
    60c8:	bl	a79c <memcpy>
    dst += n;
    60cc:	add	r9, r7
    toRead -= n;
    60ce:	sub.w	r8, r8, r7
    m_curPosition += n;
    60d2:	ldrd	r3, r2, [r4]
    60d6:	adds	r3, r3, r7
    60d8:	adc.w	r2, r2, #0
    60dc:	strd	r3, r2, [r4]
  while (toRead) {
    60e0:	cmp.w	r8, #0
    60e4:	bne.n	5ffc <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    60e6:	sub.w	r0, r6, r8
}
    60ea:	add	sp, #12
    60ec:	vpop	{d8}
    60f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    60f4:	movs	r3, #1
    60f6:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    60f8:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    60fc:	subs	r3, r3, r0
    60fe:	cmp	r3, r1
    6100:	it	cs
    6102:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    6104:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    6106:	mov.w	r7, r3, lsl #9
    610a:	bls.n	6122 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    610c:	ldr.w	r0, [fp, #532]	; 0x214
    6110:	mov	r1, r5
    6112:	ldr	r2, [r0, #0]
    6114:	ldr.w	fp, [r2, #20]
    6118:	mov	r2, r9
    611a:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    611c:	cmp	r0, #0
    611e:	bne.n	60cc <ExFatFile::read(void*, unsigned int)+0x118>
    6120:	b.n	6094 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    6122:	adds	r1, r5, r3
    6124:	cmp	r2, r1
    6126:	bcs.n	610c <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    6128:	add.w	r0, fp, #528	; 0x210
    612c:	str	r3, [sp, #4]
    612e:	bl	5b9c <FsCache::sync()>
    6132:	ldr	r3, [sp, #4]
    6134:	cmp	r0, #0
    6136:	bne.n	610c <ExFatFile::read(void*, unsigned int)+0x158>
    6138:	b.n	6094 <ExFatFile::read(void*, unsigned int)+0xe0>

0000613a <ExFatFile::peek()>:
int ExFatFile::peek() {
    613a:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    613c:	movs	r2, #1
    613e:	add.w	r1, sp, #7
    6142:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6144:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    6146:	ldrd	r6, r7, [r0]
    614a:	bl	5fb4 <ExFatFile::read(void*, unsigned int)>
    614e:	cmp	r0, #1
  m_curCluster = curCluster;
    6150:	str	r5, [r4, #24]
    6152:	ite	eq
    6154:	ldrbeq.w	r0, [sp, #7]
    6158:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    615c:	strd	r6, r7, [r4]
}
    6160:	add	sp, #12
    6162:	pop	{r4, r5, r6, r7, pc}

00006164 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    6164:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    6168:	ldrb.w	ip, [r0, #49]	; 0x31
    616c:	mov	r4, r0
    616e:	mov	r6, r2
    6170:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6172:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    6176:	cmp.w	ip, #0
    617a:	beq.n	6234 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    617c:	ldrd	r0, r3, [r0]
    6180:	cmp	r3, r7
    6182:	it	eq
    6184:	cmpeq	r0, r2
    6186:	beq.n	6196 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    6188:	orrs.w	r2, r6, r7
    618c:	bne.n	619a <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    618e:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    6190:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    6192:	strd	r6, r7, [r4]
    return true;
    6196:	movs	r0, #1
    6198:	b.n	623a <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    619a:	tst.w	ip, #8
    619e:	beq.n	61aa <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    61a0:	ldrd	r1, r2, [r4, #16]
    61a4:	cmp	r1, r6
    61a6:	sbcs	r2, r7
    61a8:	bcc.n	6234 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    61aa:	ldr.w	lr, [r4, #32]
    61ae:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    61b0:	ldrb.w	r1, [lr, #1093]	; 0x445
    61b4:	adc.w	sl, r7, #4294967295
    61b8:	adds	r1, #9
    61ba:	uxtb	r1, r1
    61bc:	rsb	r9, r1, #32
    61c0:	sub.w	r2, r1, #32
    61c4:	lsrs	r5, r1
    61c6:	lsl.w	r9, sl, r9
    61ca:	lsr.w	r2, sl, r2
    61ce:	sub.w	sl, r1, #32
    61d2:	orr.w	r5, r5, r9
    61d6:	rsb	r9, r1, #32
    61da:	orrs	r5, r2
  if (isContiguous()) {
    61dc:	ldrb.w	r2, [r4, #51]	; 0x33
    61e0:	tst.w	r2, #64	; 0x40
    61e4:	beq.n	61ec <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    61e6:	ldr	r3, [r4, #28]
    61e8:	add	r3, r5
    61ea:	b.n	6190 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    61ec:	adds.w	fp, r0, #4294967295
    61f0:	adc.w	r2, r3, #4294967295
    61f4:	lsr.w	r1, fp, r1
    61f8:	lsl.w	r9, r2, r9
    61fc:	lsr.w	r2, r2, sl
    6200:	orr.w	r1, r1, r9
    6204:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    6206:	cmp	r5, r1
    6208:	bcc.n	620e <ExFatFile::seekSet(unsigned long long)+0xaa>
    620a:	orrs	r3, r0
    620c:	bne.n	623e <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    620e:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6212:	ite	ne
    6214:	ldrne.w	r3, [lr, #1076]	; 0x434
    6218:	ldreq	r3, [r4, #28]
    621a:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    621c:	add.w	r9, r4, #24
  while (nNew--) {
    6220:	cmp	r5, #0
    6222:	beq.n	6192 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6224:	mov	r2, r9
    6226:	ldr	r1, [r4, #24]
    6228:	ldr	r0, [r4, #32]
    622a:	subs	r5, #1
    622c:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    6230:	cmp	r0, #0
    6232:	bgt.n	6220 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6234:	movs	r0, #0
  m_curCluster = tmp;
    6236:	str.w	r8, [r4, #24]
}
    623a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    623e:	subs	r5, r5, r1
    6240:	b.n	621c <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00006244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    6244:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6248:	mov	sl, r3
    624a:	ldrb.w	r3, [r0, #49]	; 0x31
    624e:	sub	sp, #52	; 0x34
    6250:	mov	r4, r0
    6252:	mov	r6, r1
    6254:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    6256:	cmp	r3, #0
    6258:	bne.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    625a:	ldrb.w	r3, [r1, #49]	; 0x31
    625e:	tst.w	r3, #80	; 0x50
    6262:	beq.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    6264:	and.w	r9, sl, #3
    6268:	cmp.w	r9, #3
    626c:	beq.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    626e:	add.w	r9, r9, #1
    6272:	and.w	r3, sl, #8
    6276:	orr.w	r9, r9, r3
  if (fname) {
    627a:	cmp	r2, #0
    627c:	beq.n	62f0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    627e:	ldr	r7, [r2, #16]
    6280:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6282:	movs	r2, #0
    6284:	mov	r0, r1
    6286:	adds	r7, #14
    6288:	udiv	r7, r7, r3
    628c:	adds	r7, #2
    628e:	movs	r3, #0
    6290:	uxtb	r7, r7
    6292:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    6296:	mov.w	fp, #0
    629a:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    629c:	movs	r2, #32
    629e:	add	r1, sp, #16
    62a0:	mov	r0, r6
    62a2:	bl	5fb4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    62a6:	cmp	r0, #0
    62a8:	beq.w	6432 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    62ac:	cmp	r0, #32
    62ae:	bne.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    62b0:	ldrsb.w	r1, [sp, #16]
    62b4:	ldrb.w	r2, [sp, #16]
    62b8:	cmp	r1, #0
    62ba:	blt.n	62fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    62bc:	cmp.w	fp, #0
    62c0:	bne.n	62ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    62c2:	ldr	r1, [r6, #0]
    62c4:	sub.w	r3, r1, #32
    62c8:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    62ca:	ldr	r3, [r6, #24]
    62cc:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    62ce:	cmp	fp, r7
        freeCount++;
    62d0:	itt	cc
    62d2:	addcc.w	r3, fp, #1
    62d6:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    62da:	cbnz	r2, 62f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    62dc:	cmp	r5, #0
    62de:	bne.w	6432 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    62e2:	mov.w	r8, #0
    62e6:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    62ea:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    62ee:	b.n	63c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    62f0:	movs	r7, #3
    62f2:	b.n	6296 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    62f4:	movs	r0, #0
    62f6:	mov	r8, r0
    62f8:	b.n	629c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    62fa:	cmp.w	r8, #0
    62fe:	bne.n	6350 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    6300:	cmp	fp, r7
    6302:	it	cc
    6304:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    6308:	cmp	r2, #133	; 0x85
    630a:	bne.n	62f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    630c:	movs	r2, #56	; 0x38
    630e:	mov	r1, r8
    6310:	mov	r0, r4
    6312:	bl	a758 <memset>
      m_setCount = dirFile->setCount;
    6316:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    631a:	ldrb.w	r1, [sp, #20]
      inSet = true;
    631e:	movs	r0, #1
      m_setCount = dirFile->setCount;
    6320:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    6324:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    6328:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    632a:	it	pl
    632c:	orrpl.w	r2, r2, #8
    6330:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    6334:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    6336:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    6338:	ldr	r2, [r6, #24]
    633a:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    633c:	ldr	r2, [r6, #0]
    633e:	subs	r2, #32
    6340:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6342:	ldrb.w	r2, [r6, #51]	; 0x33
    6346:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    634a:	strb.w	r2, [r4, #44]	; 0x2c
    634e:	b.n	62f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6350:	cmp	r2, #192	; 0xc0
    6352:	bne.n	63f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6354:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    6358:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    635c:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    635e:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    6362:	it	mi
    6364:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    6368:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    636c:	it	mi
    636e:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    6372:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    6374:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    6378:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    637a:	strd	r0, r1, [r4, #8]
      if (!fname) {
    637e:	cbnz	r5, 63ce <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    6380:	tst.w	sl, #2048	; 0x800
    6384:	bne.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    6386:	tst.w	sl, #17408	; 0x4400
    638a:	bne.n	6394 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    638c:	ldrb.w	r3, [r4, #51]	; 0x33
    6390:	lsls	r0, r3, #30
    6392:	bpl.n	63a0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6394:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    6398:	lsls	r1, r3, #27
    639a:	bmi.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    639c:	lsls	r2, r3, #31
    639e:	bmi.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    63a0:	tst.w	sl, #1024	; 0x400
    63a4:	beq.n	6420 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    63a6:	ldrb.w	r3, [r4, #51]	; 0x33
    63aa:	lsls	r3, r3, #30
    63ac:	bpl.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    63ae:	movs	r2, #0
    63b0:	movs	r3, #0
    63b2:	mov	r0, r4
    63b4:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
    63b8:	cmp	r0, #0
    63ba:	beq.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    63bc:	mov	r0, r4
    63be:	bl	7024 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    63c2:	cmp	r0, #0
    63c4:	beq.n	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    63c6:	mov	r0, r8
    63c8:	add	sp, #52	; 0x34
    63ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    63ce:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    63d0:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    63d4:	ldr	r1, [r5, #16]
    next = begin;
    63d6:	str	r2, [r5, #4]
    63d8:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    63dc:	strh	r3, [r5, #12]
    63de:	cmp	r1, r2
    63e0:	bne.n	62f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    63e2:	ldrh	r0, [r5, #20]
    63e4:	ldrh.w	r2, [sp, #20]
    63e8:	sub.w	ip, r0, r2
    63ec:	rsbs	r0, ip, #0
    63f0:	adc.w	r0, r0, ip
    63f4:	b.n	62f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    63f6:	cmp	r2, #193	; 0xc1
    63f8:	bne.w	62f4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    63fc:	mov	r2, r5
    63fe:	add	r1, sp, #16
    6400:	mov	r0, r4
    6402:	bl	5d28 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    6406:	cmp	r0, #0
    6408:	beq.w	62f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    640c:	ldrh	r2, [r5, #12]
    640e:	cmp	r2, #0
    6410:	bne.w	62f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    6414:	ldrd	r1, r2, [r5, #4]
    6418:	cmp	r1, r2
    641a:	bne.w	62f6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    641e:	b.n	6380 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6420:	tst.w	sl, #16384	; 0x4000
    6424:	beq.n	63c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    6426:	mov	r0, r4
    6428:	ldrd	r2, r3, [r4, #16]
    642c:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
    6430:	b.n	63c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    6432:	tst.w	sl, #512	; 0x200
    6436:	beq.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    643a:	tst.w	r9, #2
    643e:	beq.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6442:	cmp	r5, #0
    6444:	beq.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    6448:	cmp	fp, r7
    644a:	bcc.n	649a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    644c:	movs	r2, #56	; 0x38
    644e:	movs	r1, #0
    6450:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6452:	ldrb.w	r8, [r6, #51]	; 0x33
    6456:	bl	a758 <memset>
  ExFatVolume* volume() const {return m_vol;}
    645a:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    645c:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    6460:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    6464:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    6466:	movs	r3, #8
  m_dirPos = freePos;
    6468:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    646c:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    6470:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    6474:	mov.w	r8, #0
  m_dirPos = freePos;
    6478:	ldr	r3, [sp, #0]
    647a:	str	r3, [r4, #36]	; 0x24
    647c:	ldr	r3, [sp, #4]
    647e:	str	r3, [r4, #40]	; 0x28
    next = begin;
    6480:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    6482:	strh.w	r8, [r5, #12]
    next = begin;
    6486:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    6488:	uxtb.w	fp, r8
    648c:	cmp	r7, fp
    648e:	bhi.n	64de <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    6490:	mov	r0, r4
    6492:	bl	6d98 <ExFatFile::sync()>
    6496:	mov	r8, r0
    6498:	b.n	63c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    649a:	movs	r2, #32
    649c:	add	r1, sp, #16
    649e:	mov	r0, r6
    64a0:	bl	5fb4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    64a4:	cbnz	r0, 64bc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    64a6:	mov	r0, r6
      curCluster = dir->m_curCluster;
    64a8:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    64ac:	bl	6dda <ExFatFile::addDirCluster()>
    64b0:	cmp	r0, #0
    64b2:	beq.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    64b6:	str.w	r8, [r6, #24]
      continue;
    64ba:	b.n	6448 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    64bc:	cmp	r0, #32
    64be:	bne.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    64c2:	cmp.w	fp, #0
    64c6:	bne.n	64d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    64c8:	ldr	r2, [r6, #0]
    64ca:	sub.w	r3, r2, #32
    64ce:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    64d0:	ldr	r3, [r6, #24]
    64d2:	str	r3, [sp, #0]
    freeCount++;
    64d4:	add.w	r3, fp, #1
    64d8:	uxtb.w	fp, r3
    64dc:	b.n	6448 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    64de:	movs	r2, #1
    64e0:	mov	r1, fp
    64e2:	mov	r0, r4
    64e4:	bl	5e82 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    64e8:	mov	r6, r0
    64ea:	cmp	r0, #0
    64ec:	beq.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    64f0:	ldrsb.w	r2, [r0]
    64f4:	cmp	r2, #0
    64f6:	blt.w	62e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    64fa:	movs	r2, #32
    64fc:	movs	r1, #0
    64fe:	bl	a758 <memset>
    if (i == 0) {
    6502:	cmp.w	fp, #0
    6506:	bne.n	654a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    6508:	movs	r3, #133	; 0x85
    650a:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    650c:	ldr	r3, [pc, #128]	; (6590 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    650e:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    6512:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    6516:	ldr	r3, [r3, #0]
    6518:	cbz	r3, 653e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    651a:	add.w	r2, sp, #11
    651e:	add.w	r1, sp, #14
    6522:	add	r0, sp, #12
    6524:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6526:	ldrh.w	r3, [sp, #12]
    652a:	strh	r3, [r6, #10]
    652c:	ldrh.w	r3, [sp, #14]
    6530:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    6532:	ldrb.w	r3, [sp, #11]
    6536:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    6538:	add.w	r8, r8, #1
    653c:	b.n	6488 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    653e:	movw	r3, #22561	; 0x5821
    6542:	strh	r3, [r6, #10]
    6544:	strh	r3, [r6, #14]
    6546:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    6548:	b.n	6538 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    654a:	cmp.w	fp, #1
    654e:	bne.n	656a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6550:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    6554:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    6556:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    655a:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    655c:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    6560:	ldr	r3, [r5, #16]
    6562:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    6564:	ldrh	r3, [r5, #20]
    6566:	strh	r3, [r6, #4]
}
    6568:	b.n	6538 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    656a:	movs	r3, #193	; 0xc1
    656c:	add.w	fp, r6, #30
    6570:	strb	r3, [r6, #0]
    return !ls && next == end;
    6572:	ldrh	r2, [r5, #12]
    6574:	cbnz	r2, 657e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    6576:	ldrd	r1, r2, [r5, #4]
    657a:	cmp	r1, r2
    657c:	beq.n	6538 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    657e:	mov	r0, r5
    6580:	bl	5ce0 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    6584:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    6588:	cmp	fp, r6
    658a:	bne.n	6572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    658c:	b.n	6538 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    658e:	nop
    6590:	.word	0x200207fc

00006594 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    6594:	push	{r4, r5, r6, r7, lr}
    6596:	mov	r7, r3
    6598:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    659a:	movs	r3, #0
    659c:	mov	r5, r0
    659e:	mov	r4, r1
    65a0:	str	r2, [sp, #4]
    65a2:	str	r3, [sp, #80]	; 0x50
class FsName {
    65a4:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    65a8:	ldrb.w	r3, [r0, #49]	; 0x31
    65ac:	cbz	r3, 65b4 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    65ae:	movs	r0, #0
}
    65b0:	add	sp, #92	; 0x5c
    65b2:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    65b4:	ldrb.w	r1, [r1, #49]	; 0x31
    65b8:	tst.w	r1, #80	; 0x50
    65bc:	beq.n	65ae <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    65be:	ldrb	r1, [r2, #0]
    65c0:	cmp	r1, #47	; 0x2f
    65c2:	bne.n	65fe <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    65c4:	mov	r0, r2
    while (isDirSeparator(*path)) {
    65c6:	ldrb.w	r1, [r2], #1
    65ca:	cmp	r1, #47	; 0x2f
    65cc:	beq.n	65e0 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    65ce:	cbz	r3, 65d2 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    65d0:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    65d2:	ldr	r4, [r4, #32]
    if (*path == 0) {
    65d4:	cbnz	r1, 65e4 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    65d6:	mov	r1, r4
    65d8:	mov	r0, r5
    65da:	bl	5f0e <ExFatFile::openRoot(ExFatVolume*)>
    65de:	b.n	65b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    65e0:	movs	r3, #1
    65e2:	b.n	65c4 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    65e4:	movs	r2, #56	; 0x38
    65e6:	movs	r1, #0
    65e8:	add	r0, sp, #32
    65ea:	bl	a758 <memset>
  m_attributes = FILE_ATTR_ROOT;
    65ee:	movs	r3, #64	; 0x40
  m_vol = vol;
    65f0:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    65f2:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    65f4:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    65f8:	movs	r3, #1
    65fa:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    65fe:	add	r3, sp, #4
    6600:	add	r2, sp, #8
    6602:	ldr	r1, [sp, #4]
    6604:	mov	r0, r5
    6606:	bl	5f34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    660a:	cmp	r0, #0
    660c:	beq.n	65ae <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    660e:	ldr	r3, [sp, #4]
    6610:	ldrb	r3, [r3, #0]
    6612:	cbz	r3, 664c <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6614:	movs	r3, #0
    6616:	add	r2, sp, #8
    6618:	mov	r1, r4
    661a:	mov	r0, r5
    661c:	bl	6244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6620:	cmp	r0, #0
    6622:	beq.n	65ae <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    6624:	add	r6, sp, #32
    6626:	mov	r2, r5
    6628:	add.w	ip, r5, #48	; 0x30
    662c:	mov	r4, r6
    662e:	ldr	r0, [r2, #0]
    6630:	adds	r2, #8
    6632:	ldr.w	r1, [r2, #-4]
    6636:	mov	r3, r6
    6638:	cmp	r2, ip
    663a:	stmia	r3!, {r0, r1}
    663c:	mov	r6, r3
    663e:	bne.n	662e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    6640:	ldr	r0, [r2, #0]
    6642:	str	r0, [r3, #0]
    close();
    6644:	mov	r0, r5
    6646:	bl	5eba <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    664a:	b.n	65fe <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    664c:	mov	r3, r7
    664e:	add	r2, sp, #8
    6650:	mov	r1, r4
    6652:	mov	r0, r5
    6654:	bl	6244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6658:	b.n	65b0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

0000665a <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    665a:	cbz	r1, 6664 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    665c:	add.w	r1, r1, #1096	; 0x448
    6660:	b.w	6594 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    6664:	mov	r0, r1
    6666:	bx	lr

00006668 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    6668:	mov	r3, r2
    666a:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    666c:	ldrb.w	r2, [r0, #49]	; 0x31
    6670:	cbnz	r2, 668c <ExFatFile::openNext(ExFatFile*, int)+0x24>
    6672:	ldrb.w	r2, [r1, #49]	; 0x31
    6676:	tst.w	r2, #80	; 0x50
    667a:	beq.n	668c <ExFatFile::openNext(ExFatFile*, int)+0x24>
    667c:	ldr	r2, [r1, #0]
    667e:	ands.w	r2, r2, #31
    6682:	bne.n	668c <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    6684:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    6688:	b.w	6244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    668c:	movs	r0, #0
    668e:	ldr.w	r4, [sp], #4
    6692:	bx	lr

00006694 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    6694:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6698:	mov	r7, r0
    669a:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    669c:	mov	sl, r1
    669e:	cbz	r1, 66d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    66a0:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    66a2:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    66a6:	movs	r4, #1
    start = 0;
    66a8:	cmp	r3, r5
    66aa:	it	ls
    66ac:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    66ae:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    66b2:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    66b6:	mov	r8, r5
  uint32_t endAlloc = start;
    66b8:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    66ba:	lsls	r4, r3
    66bc:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    66be:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    66c2:	movs	r2, #0
    66c4:	mov	r0, r7
    66c6:	add.w	r1, r1, r6, lsr #12
    66ca:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    66ce:	cbnz	r0, 6702 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    66d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    66d4:	ldr.w	r5, [r0, #1056]	; 0x420
    66d8:	b.n	66a2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    66da:	mov	r8, r6
        if (endAlloc == start) {
    66dc:	cmp	r5, r6
    66de:	beq.n	6738 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    66e0:	ldr.w	r2, [r7, #1072]	; 0x430
    66e4:	cmp	r2, r6
    66e6:	bls.n	672c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    66e8:	lsls	r4, r4, #1
    66ea:	ands.w	r4, r4, #255	; 0xff
    66ee:	bne.n	6706 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    66f0:	add.w	r3, r9, #1
    66f4:	movs	r4, #1
    i = 0;
    66f6:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    66fa:	cmp.w	r3, #512	; 0x200
    66fe:	bcs.n	66be <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    6700:	mov	r9, r3
        if (!(mask & cache[i])) {
    6702:	ldrb.w	r3, [r0, r9]
    6706:	tst	r3, r4
        endAlloc++;
    6708:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    670c:	bne.n	66da <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    670e:	sub.w	r2, r6, r8
    6712:	cmp	r2, fp
    6714:	bne.n	66dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    6716:	cmp.w	sl, #0
    671a:	bne.n	6726 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    671c:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    6720:	it	eq
    6722:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6726:	add.w	r0, r8, #2
    672a:	b.n	66d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    672c:	mov.w	r8, #0
          i = sectorSize;
    6730:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    6734:	mov	r6, r8
    6736:	b.n	66f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    6738:	movs	r0, #1
    673a:	b.n	66d0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

0000673c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    673c:	subs	r1, #2
                                  uint32_t count, bool value) {
    673e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6742:	mov	r5, r0
    6744:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6746:	ldr.w	r0, [r0, #1072]	; 0x430
    674a:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    674c:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    674e:	cmp	r3, r0
    6750:	bhi.n	67d2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6752:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    6756:	cbz	r7, 67c8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6758:	cmp	r1, r2
    675a:	bhi.n	676a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    675c:	cmp	r3, r2
    675e:	bls.n	676a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6760:	cmp	r3, r0
    6762:	it	cs
    6764:	movcs	r3, #0
    6766:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    676a:	and.w	r3, r1, #7
    676e:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    6772:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    6776:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    677a:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    677e:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    6782:	add.w	r8, r3, r1, lsr #12
    6786:	movs	r2, #1
    6788:	mov	r1, r8
    678a:	mov	r0, r5
    678c:	add	r8, r2
    678e:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    6792:	cbz	r0, 67d2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    6794:	adds	r3, r0, r4
    6796:	mov	r1, r9
    6798:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    679c:	ldrb	r2, [r3, #0]
    679e:	tst	r2, r1
    67a0:	ite	ne
    67a2:	movne	r4, #1
    67a4:	moveq	r4, #0
    67a6:	cmp	r4, r7
    67a8:	beq.n	67d2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    67aa:	eors	r2, r1
        if (--count == 0) {
    67ac:	subs	r6, #1
        cache[i] ^= mask;
    67ae:	strb	r2, [r3, #0]
        if (--count == 0) {
    67b0:	beq.n	67d8 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    67b2:	lsls	r1, r1, #1
    67b4:	ands.w	r1, r1, #255	; 0xff
    67b8:	bne.n	679c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    67ba:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    67bc:	mov	r4, r1
    67be:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    67c0:	cmp	r0, r3
      mask = 1;
    67c2:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    67c4:	bne.n	679c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    67c6:	b.n	6786 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    67c8:	cmp	r1, r2
      m_bitmapStart = start;
    67ca:	it	cc
    67cc:	strcc.w	r1, [r5, #1056]	; 0x420
    67d0:	b.n	676a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    67d2:	movs	r0, #0
}
    67d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    67d8:	movs	r0, #1
    67da:	b.n	67d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

000067dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    67dc:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    67de:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    67e2:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    67e4:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    67e6:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    67ea:	ldrb.w	r5, [r0, #565]	; 0x235
    67ee:	ands	r1, r3
    67f0:	ldr	r3, [r4, #0]
    67f2:	subs	r3, #2
    67f4:	lsls	r3, r5
    67f6:	add.w	r3, r3, r1, lsr #9
    67fa:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    67fe:	add	r1, r3
    6800:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6804:	cbz	r0, 680e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    6806:	ldr	r3, [r4, #4]
    6808:	ubfx	r3, r3, #0, #9
    680c:	add	r0, r3
}
    680e:	pop	{r3, r4, r5, pc}

00006810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6810:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6812:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6816:	mov	r4, r1
    6818:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    681a:	adds	r3, #1
    681c:	cmp	r3, r1
    681e:	bcs.n	6826 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    6820:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6824:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6826:	ldr.w	r1, [r0, #1060]	; 0x424
    682a:	movs	r2, #0
    682c:	add.w	r0, r0, #528	; 0x210
    6830:	add.w	r1, r1, r4, lsr #7
    6834:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6838:	cmp	r0, #0
    683a:	beq.n	6820 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    683c:	lsls	r4, r4, #2
    683e:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6842:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6844:	adds	r2, r3, #1
  return 1;
    6846:	itet	ne
    6848:	movne	r0, #1
    return 0;
    684a:	moveq	r0, #0
  *value = next;
    684c:	strne	r3, [r5, #0]
  return 1;
    684e:	b.n	6824 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00006850 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6850:	push	{r0, r1, r2, r4, r5, lr}
    6852:	mov	r5, r0
  uint32_t n = 0;
    6854:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6856:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    6858:	add	r2, sp, #4
    685a:	ldr	r1, [sp, #4]
    685c:	mov	r0, r5
    685e:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    6862:	cmp	r0, #0
    6864:	blt.n	6872 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    6866:	add.w	r4, r4, #1
  } while (status);
    686a:	bne.n	6858 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    686c:	mov	r0, r4
    686e:	add	sp, #12
    6870:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    6872:	movs	r4, #0
    6874:	b.n	686c <ExFatPartition::chainSize(unsigned long)+0x1c>

00006876 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6876:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6878:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    687a:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    687c:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6880:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6882:	ands	r4, r3
    6884:	add	r4, r2
  pos->position += offset;
    6886:	add	r2, r3
    6888:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    688a:	ldrb.w	r3, [r0, #1093]	; 0x445
    688e:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    6890:	uxtb	r3, r3
    6892:	lsrs	r4, r3
  while (tmp--) {
    6894:	cbnz	r4, 689a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    6896:	movs	r0, #1
    6898:	b.n	68b4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    689a:	ldrb	r3, [r5, #8]
      pos->cluster++;
    689c:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    689e:	cbz	r3, 68a8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    68a0:	adds	r1, #1
    68a2:	str	r1, [r5, #0]
    68a4:	subs	r4, #1
    68a6:	b.n	6894 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    68a8:	mov	r2, r5
    68aa:	mov	r0, r6
    68ac:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    68b0:	cmp	r0, #1
    68b2:	beq.n	68a4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    68b4:	pop	{r4, r5, r6, pc}

000068b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    68b6:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    68b8:	push	{r3, r4, r5, lr}
    68ba:	mov	r4, r1
    68bc:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    68be:	bhi.n	68c4 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    68c0:	movs	r0, #0
}
    68c2:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    68c4:	ldr.w	r3, [r0, #1072]	; 0x430
    68c8:	adds	r3, #1
    68ca:	cmp	r3, r1
    68cc:	bcc.n	68c0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    68ce:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    68d2:	movs	r2, #1
    68d4:	add.w	r0, r0, #528	; 0x210
    68d8:	add.w	r1, r1, r4, lsr #7
    68dc:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    68e0:	cmp	r0, #0
    68e2:	beq.n	68c0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    68e4:	lsls	r4, r4, #2
    68e6:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    68ea:	str	r5, [r0, r4]
  return true;
    68ec:	movs	r0, #1
    68ee:	b.n	68c2 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

000068f0 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    68f0:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    68f4:	mov	r7, r0
    68f6:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    68f8:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    68fa:	add	r2, sp, #4
    68fc:	mov	r1, r4
    68fe:	mov	r0, r7
    6900:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    6904:	subs	r6, r0, #0
    6906:	bge.n	6912 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    6908:	movs	r5, #0
}
    690a:	mov	r0, r5
    690c:	add	sp, #8
    690e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    6912:	movs	r2, #0
    6914:	mov	r1, r4
    6916:	mov	r0, r7
    6918:	bl	68b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    691c:	mov	r5, r0
    691e:	cmp	r0, #0
    6920:	beq.n	6908 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    6922:	adds	r2, r4, #1
    6924:	cbz	r6, 692c <ExFatPartition::freeChain(unsigned long)+0x3c>
    6926:	ldr	r3, [sp, #4]
    6928:	cmp	r3, r2
    692a:	beq.n	6942 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    692c:	movs	r3, #0
    692e:	sub.w	r2, r2, r8
    6932:	mov	r1, r8
    6934:	mov	r0, r7
    6936:	bl	673c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    693a:	cmp	r0, #0
    693c:	beq.n	6908 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    693e:	ldr.w	r8, [sp, #4]
    cluster = next;
    6942:	ldr	r4, [sp, #4]
  } while (status);
    6944:	cmp	r6, #0
    6946:	bne.n	68fa <ExFatPartition::freeChain(unsigned long)+0xa>
    6948:	b.n	690a <ExFatPartition::freeChain(unsigned long)+0x1a>

0000694a <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    694a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    694e:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    6950:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6952:	ldr.w	r7, [r0, #1068]	; 0x42c
    6956:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    695a:	mov	r5, r4
    695c:	mov	r1, r7
    695e:	movs	r2, #0
    6960:	mov	r0, r8
    6962:	adds	r7, #1
    6964:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6968:	cbz	r0, 6986 <ExFatPartition::freeClusterCount()+0x3c>
    696a:	subs	r0, #1
    696c:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    6970:	ldrb.w	r1, [r0, #1]!
    6974:	cmp	r1, #255	; 0xff
    6976:	bne.n	698a <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    6978:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    697a:	adds	r5, #8
      if (nc >= m_clusterCount) {
    697c:	ldr.w	r3, [r6, #1072]	; 0x430
    6980:	cmp	r3, r5
    6982:	bhi.n	69a4 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    6984:	subs	r0, r3, r4
      }
    }
  }
}
    6986:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    698a:	cmp	r1, #0
    698c:	beq.n	697a <ExFatPartition::freeClusterCount()+0x30>
    698e:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6990:	movs	r3, #1
          if ((mask & cache[i])) {
    6992:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6994:	mov.w	r3, r3, lsl #1
            usedCount++;
    6998:	it	ne
    699a:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    699c:	subs	r2, #1
    699e:	uxtb	r3, r3
    69a0:	bne.n	6992 <ExFatPartition::freeClusterCount()+0x48>
    69a2:	b.n	697a <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    69a4:	cmp	r5, ip
    69a6:	bne.n	6970 <ExFatPartition::freeClusterCount()+0x26>
    69a8:	b.n	695c <ExFatPartition::freeClusterCount()+0x12>
	...

000069ac <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    69ac:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    69ae:	mov.w	r3, #4294967295
    69b2:	mov	r6, r2
    69b4:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    69b8:	movs	r2, #0
  m_blockDev = dev;
    69ba:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    69be:	mov	r4, r0
    m_blockDev = blockDev;
    69c0:	str	r1, [r0, #4]
    69c2:	str.w	r1, [r0, #532]	; 0x214
    69c6:	mov	r1, r2
  m_fatType = 0;
    69c8:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    69cc:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    69ce:	str	r3, [r0, #12]
    m_status = 0;
    69d0:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    69d4:	str.w	r3, [r0, #540]	; 0x21c
    69d8:	mov	r0, r7
    69da:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    69de:	cmp	r6, #4
    69e0:	mov	r5, r0
    69e2:	bls.n	69e8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    69e4:	movs	r0, #0
}
    69e6:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    69e8:	cmp	r0, #0
    69ea:	beq.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    69ec:	cbz	r6, 6a1c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    69ee:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    69f0:	add.w	r3, r0, r3, lsl #4
    69f4:	ldrb.w	r2, [r3, #446]	; 0x1be
    69f8:	ands.w	r2, r2, #127	; 0x7f
    69fc:	bne.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    69fe:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6a02:	cmp	r3, #0
    6a04:	beq.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6a06:	add.w	r6, r0, r6, lsl #4
    6a0a:	mov	r0, r7
    6a0c:	ldr.w	r6, [r6, #438]	; 0x1b6
    6a10:	mov	r1, r6
    6a12:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6a16:	mov	r5, r0
    6a18:	cmp	r0, #0
    6a1a:	beq.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6a1c:	ldr	r1, [pc, #104]	; (6a88 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6a1e:	movs	r2, #5
    6a20:	adds	r0, r5, #3
    6a22:	bl	f12c <strncmp>
    6a26:	mov	r1, r0
    6a28:	cmp	r0, #0
    6a2a:	bne.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6a2c:	ldrb.w	r3, [r5, #108]	; 0x6c
    6a30:	cmp	r3, #9
    6a32:	bne.n	69e4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6a34:	ldr	r3, [r5, #80]	; 0x50
    6a36:	add	r3, r6
    6a38:	str.w	r3, [r4, #1060]	; 0x424
    6a3c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6a3e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6a42:	ldr	r3, [r5, #88]	; 0x58
    6a44:	add	r3, r6
    6a46:	str.w	r3, [r4, #1068]	; 0x42c
    6a4a:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6a4c:	str.w	r3, [r4, #1072]	; 0x430
    6a50:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6a52:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6a56:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6a5a:	movs	r5, #1
  m_bitmapStart = 0;
    6a5c:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6a60:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6a62:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6a66:	adds	r3, #9
  bitmapFind(0, 1);
    6a68:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6a6a:	lsl.w	r3, r5, r3
    6a6e:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    6a72:	subs	r3, #1
    6a74:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    6a78:	bl	6694 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6a7c:	movs	r3, #64	; 0x40
  return true;
    6a7e:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    6a80:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    6a84:	b.n	69e6 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    6a86:	nop
    6a88:	.word	0x2000116d

00006a8c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6a8c:	push	{r4, lr}
    6a8e:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6a90:	ldr.w	r1, [r0, #1076]	; 0x434
    6a94:	bl	6850 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6a98:	ldrb.w	r3, [r4, #1093]	; 0x445
    6a9c:	adds	r3, #9
  return nc << bytesPerClusterShift();
    6a9e:	uxtb	r3, r3
}
    6aa0:	lsls	r0, r3
    6aa2:	pop	{r4, pc}

00006aa4 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6aa4:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    6aa6:	add.w	r4, r0, #1096	; 0x448
    6aaa:	sub	sp, #56	; 0x38
    6aac:	movs	r3, #0
    6aae:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    6ab0:	mov	r0, sp
    6ab2:	mov	r1, r4
    6ab4:	str	r3, [sp, #48]	; 0x30
    6ab6:	bl	6594 <ExFatFile::open(ExFatFile*, char const*, int)>
    6aba:	mov	r5, r0
    6abc:	cbz	r0, 6ae6 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6abe:	ldrb.w	r3, [sp, #49]	; 0x31
    6ac2:	ands.w	r3, r3, #80	; 0x50
    6ac6:	beq.n	6aec <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6ac8:	mov	r2, sp
    6aca:	mov	r3, r4
    6acc:	add	r6, sp, #48	; 0x30
    6ace:	mov	r4, r2
    6ad0:	adds	r3, #8
    6ad2:	ldmia	r4!, {r0, r1}
    6ad4:	cmp	r4, r6
    6ad6:	str.w	r0, [r3, #-8]
    6ada:	str.w	r1, [r3, #-4]
    6ade:	mov	r2, r4
    6ae0:	bne.n	6ace <ExFatVolume::chdir(char const*)+0x2a>
    6ae2:	ldr	r0, [r4, #0]
    6ae4:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    6ae6:	mov	r0, r5
    6ae8:	add	sp, #56	; 0x38
    6aea:	pop	{r4, r5, r6, pc}
  return false;
    6aec:	mov	r5, r3
    6aee:	b.n	6ae6 <ExFatVolume::chdir(char const*)+0x42>

00006af0 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6af0:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6af2:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6af4:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6af6:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6af8:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6afa:	orr.w	r2, r2, r1, lsr #1
    6afe:	ldrb	r1, [r0, r3]
    6b00:	uxtah	r2, r1, r2
    6b04:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b06:	bne.n	6b1a <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    6b08:	cmp	r4, #133	; 0x85
    6b0a:	ite	ne
    6b0c:	movne	r2, #1
    6b0e:	moveq	r2, #3
    6b10:	add	r3, r2
    6b12:	cmp	r3, #31
    6b14:	bls.n	6af6 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    6b16:	mov	r0, r1
    6b18:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6b1a:	movs	r2, #1
    6b1c:	b.n	6b10 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006b1e <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6b1e:	push	{r4, lr}
    6b20:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6b22:	bl	5b9c <FsCache::sync()>
    6b26:	cbz	r0, 6b40 <ExFatPartition::cacheSync()+0x22>
    6b28:	add.w	r0, r4, #528	; 0x210
    6b2c:	bl	5b9c <FsCache::sync()>
    6b30:	cbz	r0, 6b40 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6b32:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6b36:	ldr	r3, [r0, #0]
  }
    6b38:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6b3c:	ldr	r3, [r3, #32]
    6b3e:	bx	r3
  }
    6b40:	movs	r0, #0
    6b42:	pop	{r4, pc}

00006b44 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6b44:	push	{r3, r4, r5, r6, r7, lr}
    6b46:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6b48:	ldr	r0, [r0, #32]
    6b4a:	ldr	r1, [r4, #24]
    6b4c:	cbz	r1, 6b50 <ExFatFile::addCluster()+0xc>
    6b4e:	adds	r1, #1
    6b50:	movs	r2, #1
    6b52:	bl	6694 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6b56:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6b58:	mov	r5, r0
  if (find < 2) {
    6b5a:	bhi.n	6b62 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6b5c:	movs	r6, #0
}
    6b5e:	mov	r0, r6
    6b60:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6b62:	movs	r3, #1
    6b64:	mov	r1, r0
    6b66:	ldr	r0, [r4, #32]
    6b68:	mov	r2, r3
    6b6a:	bl	673c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6b6e:	mov	r6, r0
    6b70:	cmp	r0, #0
    6b72:	beq.n	6b5c <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    6b74:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6b76:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    6b7a:	cbnz	r2, 6b88 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6b7c:	orr.w	r3, r3, #64	; 0x40
    6b80:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    6b84:	str	r5, [r4, #24]
  return true;
    6b86:	b.n	6b5e <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6b88:	lsls	r1, r3, #25
    6b8a:	bmi.n	6bb0 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6b8c:	mov.w	r2, #4294967295
    6b90:	mov	r1, r5
    6b92:	ldr	r0, [r4, #32]
    6b94:	bl	68b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6b98:	cmp	r0, #0
    6b9a:	beq.n	6b5c <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6b9c:	ldr	r1, [r4, #24]
    6b9e:	cmp	r1, #0
    6ba0:	beq.n	6b84 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6ba2:	mov	r2, r5
    6ba4:	ldr	r0, [r4, #32]
    6ba6:	bl	68b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6baa:	cmp	r0, #0
    6bac:	bne.n	6b84 <ExFatFile::addCluster()+0x40>
    6bae:	b.n	6b5c <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    6bb0:	adds	r2, #1
    6bb2:	cmp	r2, r5
    6bb4:	beq.n	6b84 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6bb6:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bba:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6bbc:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bc0:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6bc2:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bc4:	cmp	r3, r1
    6bc6:	bls.n	6b8c <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6bc8:	adds	r7, r1, #1
    6bca:	mov	r2, r7
    6bcc:	bl	68b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6bd0:	cmp	r0, #0
    6bd2:	beq.n	6b5c <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6bd4:	mov	r1, r7
    6bd6:	b.n	6bc0 <ExFatFile::addCluster()+0x7c>

00006bd8 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6bd8:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6bda:	ldrb.w	r3, [r0, #51]	; 0x33
    6bde:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6be0:	lsls	r2, r3, #30
    6be2:	bmi.n	6be8 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6be4:	movs	r0, #0
}
    6be6:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    6be8:	ldr	r1, [r0, #28]
    6bea:	cbnz	r1, 6c22 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6bec:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6bee:	movs	r2, #1
    6bf0:	uxtb	r1, r5
    6bf2:	mov	r0, r4
    6bf4:	bl	5e82 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6bf8:	cmp	r0, #0
    6bfa:	beq.n	6be4 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6bfc:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6bfe:	adds	r5, #1
    cache[0] &= 0x7F;
    6c00:	and.w	r3, r3, #127	; 0x7f
    6c04:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6c06:	uxtb	r3, r5
    6c08:	ldrb.w	r2, [r4, #48]	; 0x30
    6c0c:	cmp	r2, r3
    6c0e:	bcs.n	6bee <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6c10:	movs	r3, #0
  return m_vol->cacheSync();
    6c12:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6c14:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6c18:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6c1c:	bl	6b1e <ExFatPartition::cacheSync()>
    6c20:	b.n	6be6 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    6c22:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6c24:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    6c26:	bpl.n	6c5e <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6c28:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6c2c:	ldrd	r2, r5, [r4, #8]
    6c30:	adds	r3, #9
    6c32:	subs	r2, #1
    6c34:	uxtb	r3, r3
    6c36:	adc.w	r5, r5, #4294967295
    6c3a:	rsb	r7, r3, #32
    6c3e:	sub.w	r6, r3, #32
    6c42:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6c44:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6c46:	lsl.w	r7, r5, r7
    6c4a:	lsr.w	r6, r5, r6
    6c4e:	orrs	r2, r7
    6c50:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6c52:	adds	r2, #1
    6c54:	bl	673c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6c58:	cmp	r0, #0
    6c5a:	bne.n	6bec <ExFatFile::remove()+0x14>
    6c5c:	b.n	6be4 <ExFatFile::remove()+0xc>
    6c5e:	bl	68f0 <ExFatPartition::freeChain(unsigned long)>
    6c62:	b.n	6c58 <ExFatFile::remove()+0x80>

00006c64 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6c64:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6c66:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    6c6a:	sub	sp, #32
    6c6c:	mov	r4, r0
  if (!isSubDir()) {
    6c6e:	lsls	r3, r3, #27
    6c70:	bmi.n	6c78 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6c72:	movs	r0, #0
}
    6c74:	add	sp, #32
    6c76:	pop	{r4, pc}
    seekSet(0);
    6c78:	movs	r2, #0
    6c7a:	movs	r3, #0
    6c7c:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    6c80:	movs	r2, #32
    6c82:	mov	r1, sp
    6c84:	mov	r0, r4
    6c86:	bl	5fb4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6c8a:	cbz	r0, 6ca0 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6c8c:	cmp	r0, #32
    6c8e:	bne.n	6c72 <ExFatFile::rmdir()+0xe>
    6c90:	ldrsb.w	r2, [sp]
    6c94:	ldrb.w	r3, [sp]
    6c98:	cmp	r2, #0
    6c9a:	blt.n	6c72 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6c9c:	cmp	r3, #0
    6c9e:	bne.n	6c80 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    6ca0:	movs	r3, #8
  return remove();
    6ca2:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6ca4:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6ca8:	ldrb.w	r3, [r4, #51]	; 0x33
    6cac:	orr.w	r3, r3, #2
    6cb0:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6cb4:	bl	6bd8 <ExFatFile::remove()>
    6cb8:	b.n	6c74 <ExFatFile::rmdir()+0x10>
	...

00006cbc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6cbc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6cc0:	movs	r7, #0
    6cc2:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6cc4:	ldr.w	r8, [pc, #204]	; 6d94 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6cc8:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6cca:	movs	r2, #0
    6ccc:	uxtb	r1, r7
    6cce:	mov	r0, r4
    6cd0:	bl	5e82 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6cd4:	mov	r5, r0
    6cd6:	cmp	r0, #0
    6cd8:	beq.n	6d56 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6cda:	ldrb	r3, [r0, #0]
    6cdc:	cmp	r3, #192	; 0xc0
    6cde:	beq.n	6d6a <ExFatFile::syncDir()+0xae>
    6ce0:	cmp	r3, #193	; 0xc1
    6ce2:	beq.n	6d28 <ExFatFile::syncDir()+0x6c>
    6ce4:	cmp	r3, #133	; 0x85
    6ce6:	bne.n	6d56 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6ce8:	ldrb.w	r3, [r4, #49]	; 0x31
    6cec:	and.w	r3, r3, #55	; 0x37
    6cf0:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6cf2:	ldr.w	r3, [r8]
    6cf6:	cbz	r3, 6d1a <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6cf8:	add.w	r2, sp, #3
    6cfc:	add.w	r1, sp, #6
    6d00:	add	r0, sp, #4
    6d02:	blx	r3
          df->modifyTimeMs = ms10;
    6d04:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    6d08:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6d0c:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6d0e:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6d12:	strh	r2, [r5, #12]
    6d14:	strh	r3, [r5, #14]
    6d16:	strh	r2, [r5, #16]
    6d18:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6d1a:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6d1c:	ldrb.w	r3, [r2, #528]	; 0x210
    6d20:	orr.w	r3, r3, #1
    6d24:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6d28:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6d2a:	mov	r1, r6
    6d2c:	mov	r0, r5
    6d2e:	bl	6af0 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6d32:	ldrb.w	r2, [r4, #48]	; 0x30
    6d36:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    6d38:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6d3a:	cmp	r2, r3
    6d3c:	bcs.n	6cca <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6d3e:	movs	r2, #1
    6d40:	add.w	r1, r4, #36	; 0x24
    6d44:	ldr	r0, [r4, #32]
    6d46:	bl	67dc <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6d4a:	cbz	r0, 6d56 <ExFatFile::syncDir()+0x9a>
    6d4c:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6d4e:	ldr	r0, [r4, #32]
    6d50:	bl	6b1e <ExFatPartition::cacheSync()>
    6d54:	cbnz	r0, 6d64 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6d56:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6d5a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6d5c:	orr.w	r3, r3, #1
    6d60:	strb.w	r3, [r4, #50]	; 0x32
}
    6d64:	add	sp, #8
    6d66:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    6d6a:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6d6e:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    6d70:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6d72:	ite	mi
    6d74:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6d78:	andpl.w	r3, r3, #253	; 0xfd
    6d7c:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6d7e:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6d82:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6d86:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6d88:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6d8a:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6d8e:	strd	r2, r3, [r0, #24]
    6d92:	b.n	6d1a <ExFatFile::syncDir()+0x5e>
    6d94:	.word	0x200207fc

00006d98 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6d98:	push	{r4, lr}
  if (!isOpen()) {
    6d9a:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    6d9e:	mov	r4, r0
  if (!isOpen()) {
    6da0:	cbnz	r3, 6da6 <ExFatFile::sync()+0xe>
    return true;
    6da2:	movs	r0, #1
}
    6da4:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6da6:	ldrsb.w	r2, [r0, #51]	; 0x33
    6daa:	ldrb.w	r3, [r0, #51]	; 0x33
    6dae:	cmp	r2, #0
    6db0:	bge.n	6dc2 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6db2:	and.w	r3, r3, #127	; 0x7f
    6db6:	strb.w	r3, [r0, #51]	; 0x33
}
    6dba:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6dbe:	b.w	6cbc <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    6dc2:	ldr	r0, [r0, #32]
    6dc4:	bl	6b1e <ExFatPartition::cacheSync()>
    6dc8:	cmp	r0, #0
    6dca:	bne.n	6da2 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6dcc:	ldrb.w	r3, [r4, #50]	; 0x32
    6dd0:	orr.w	r3, r3, #1
    6dd4:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6dd8:	b.n	6da4 <ExFatFile::sync()+0xc>

00006dda <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6dda:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6ddc:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6de0:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6de2:	lsls	r2, r3, #25
    6de4:	bpl.n	6e66 <ExFatFile::addDirCluster()+0x8c>
    6de6:	ldr	r0, [r0, #32]
    6de8:	bl	6a8c <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6dec:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6dee:	ldr.w	r3, [r3, #1084]	; 0x43c
    6df2:	add	r0, r3
  if (dl >= 0X4000000) {
    6df4:	cmp.w	r0, #67108864	; 0x4000000
    6df8:	bcs.n	6e86 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    6dfa:	mov	r0, r4
    6dfc:	bl	6b44 <ExFatFile::addCluster()>
    6e00:	cmp	r0, #0
    6e02:	beq.n	6e86 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6e04:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6e06:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6e08:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6e0a:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6e0c:	ldrb.w	r2, [r3, #1093]	; 0x445
    6e10:	subs	r5, #2
    6e12:	ldr.w	r3, [r3, #1068]	; 0x42c
    6e16:	lsls	r5, r2
    6e18:	add	r5, r3
    6e1a:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6e1c:	ldrb.w	r3, [r0, #1093]	; 0x445
    6e20:	lsl.w	r3, r7, r3
    6e24:	cmp	r6, r3
    6e26:	bcc.n	6e6a <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    6e28:	ldrb.w	r3, [r4, #49]	; 0x31
    6e2c:	lsls	r3, r3, #25
    6e2e:	bmi.n	6e5c <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6e30:	ldrb.w	r3, [r4, #51]	; 0x33
    6e34:	orn	r3, r3, #127	; 0x7f
    6e38:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6e3c:	ldr.w	r2, [r0, #1084]	; 0x43c
    6e40:	ldrd	r3, r1, [r4, #8]
    6e44:	adds	r3, r3, r2
    6e46:	adc.w	r1, r1, #0
    6e4a:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6e4e:	ldrd	r3, r1, [r4, #16]
    6e52:	adds	r3, r3, r2
    6e54:	adc.w	r1, r1, #0
    6e58:	strd	r3, r1, [r4, #16]
  return sync();
    6e5c:	mov	r0, r4
}
    6e5e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    6e62:	b.w	6d98 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6e66:	ldr	r0, [r0, #8]
    6e68:	b.n	6dec <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    6e6a:	movs	r2, #5
    6e6c:	adds	r1, r5, r6
    6e6e:	add.w	r0, r0, #528	; 0x210
    6e72:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6e76:	cbz	r0, 6e86 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    6e78:	mov.w	r2, #512	; 0x200
    6e7c:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6e7e:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    6e80:	bl	a758 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6e84:	b.n	6e1a <ExFatFile::addDirCluster()+0x40>
}
    6e86:	movs	r0, #0
    6e88:	pop	{r3, r4, r5, r6, r7, pc}

00006e8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6e8a:	push	{r4, lr}
  if (!parent->isDir()) {
    6e8c:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6e90:	mov	r4, r0
  if (!parent->isDir()) {
    6e92:	tst.w	r3, #80	; 0x50
    6e96:	beq.n	6ece <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6e98:	movw	r3, #2562	; 0xa02
    6e9c:	bl	6244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6ea0:	cbz	r0, 6ece <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    6ea2:	movs	r3, #16
  if (!addDirCluster()) {
    6ea4:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6ea6:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6eaa:	bl	6dda <ExFatFile::addDirCluster()>
    6eae:	cbz	r0, 6ece <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6eb0:	ldr	r3, [r4, #24]
    6eb2:	mov	r0, r4
    6eb4:	movs	r2, #0
    6eb6:	str	r3, [r4, #28]
    6eb8:	movs	r3, #0
    6eba:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6ebe:	movs	r3, #193	; 0xc1
  return sync();
    6ec0:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6ec2:	strb.w	r3, [r4, #51]	; 0x33
}
    6ec6:	ldmia.w	sp!, {r4, lr}
  return sync();
    6eca:	b.w	6d98 <ExFatFile::sync()>
}
    6ece:	movs	r0, #0
    6ed0:	pop	{r4, pc}

00006ed2 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    6ed2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ed6:	mov	r8, r3
    6ed8:	sub	sp, #88	; 0x58
    6eda:	movs	r3, #0
    6edc:	mov	r5, r0
    6ede:	mov	r4, r1
    6ee0:	str	r2, [sp, #4]
    6ee2:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    6ee6:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    6ee8:	ldrb.w	r3, [r0, #49]	; 0x31
    6eec:	cbz	r3, 6ef6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    6eee:	movs	r0, #0
}
    6ef0:	add	sp, #88	; 0x58
    6ef2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    6ef6:	ldrb.w	r3, [r1, #49]	; 0x31
    6efa:	tst.w	r3, #80	; 0x50
    6efe:	beq.n	6eee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    6f00:	ldrb	r3, [r2, #0]
    6f02:	cmp	r3, #47	; 0x2f
    6f04:	bne.n	6f1c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    6f06:	ldr	r2, [sp, #4]
    6f08:	ldrb	r3, [r2, #0]
    6f0a:	cmp	r3, #47	; 0x2f
    6f0c:	beq.n	6f68 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    6f0e:	ldr	r1, [r4, #32]
    6f10:	add	r0, sp, #32
    6f12:	bl	5f0e <ExFatFile::openRoot(ExFatVolume*)>
    6f16:	cmp	r0, #0
    6f18:	beq.n	6eee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    6f1a:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    6f1c:	add	r3, sp, #4
    6f1e:	add	r2, sp, #8
    6f20:	ldr	r1, [sp, #4]
    6f22:	mov	r0, r5
    6f24:	bl	5f34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    6f28:	cmp	r0, #0
    6f2a:	beq.n	6eee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    6f2c:	ldr	r3, [sp, #4]
    6f2e:	ldrb	r3, [r3, #0]
    6f30:	cbz	r3, 6f84 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    6f32:	movs	r3, #0
    6f34:	add	r2, sp, #8
    6f36:	mov	r1, r4
    6f38:	mov	r0, r5
    6f3a:	bl	6244 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6f3e:	cbz	r0, 6f6e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    6f40:	add	r6, sp, #32
    6f42:	mov	r2, r5
    6f44:	add.w	r3, r5, #48	; 0x30
    6f48:	mov	r4, r6
    6f4a:	ldr	r0, [r2, #0]
    6f4c:	adds	r2, #8
    6f4e:	ldr.w	r1, [r2, #-4]
    6f52:	mov	r7, r6
    6f54:	cmp	r2, r3
    6f56:	stmia	r7!, {r0, r1}
    6f58:	mov	r6, r7
    6f5a:	bne.n	6f4a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6f5c:	ldr	r0, [r2, #0]
    6f5e:	str	r0, [r7, #0]
    close();
    6f60:	mov	r0, r5
    6f62:	bl	5eba <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6f66:	b.n	6f1c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    6f68:	adds	r2, #1
    6f6a:	str	r2, [sp, #4]
    6f6c:	b.n	6f06 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    6f6e:	cmp.w	r8, #0
    6f72:	beq.n	6eee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    6f74:	add	r2, sp, #8
    6f76:	mov	r1, r4
    6f78:	mov	r0, r5
    6f7a:	bl	6e8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6f7e:	cmp	r0, #0
    6f80:	bne.n	6f40 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    6f82:	b.n	6eee <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6f84:	add	r2, sp, #8
    6f86:	mov	r1, r4
    6f88:	mov	r0, r5
    6f8a:	bl	6e8a <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6f8e:	b.n	6ef0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00006f90 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6f90:	push	{r4, r5, r6, r7, lr}
    6f92:	mov	r4, r0
    6f94:	sub	sp, #116	; 0x74
    6f96:	movs	r0, #0
    6f98:	str	r0, [sp, #48]	; 0x30
    6f9a:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6f9c:	ldrb.w	r0, [r4, #49]	; 0x31
    6fa0:	tst.w	r0, #24
    6fa4:	bne.n	6fac <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6fa6:	movs	r0, #0
}
    6fa8:	add	sp, #116	; 0x74
    6faa:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6fac:	ldr	r0, [r4, #32]
    6fae:	ldr	r3, [r1, #32]
    6fb0:	cmp	r0, r3
    6fb2:	bne.n	6fa6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6fb4:	movw	r3, #2561	; 0xa01
    6fb8:	mov	r0, sp
    6fba:	bl	6594 <ExFatFile::open(ExFatFile*, char const*, int)>
    6fbe:	cmp	r0, #0
    6fc0:	beq.n	6fa6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6fc2:	add	r2, sp, #56	; 0x38
    6fc4:	mov	r3, r4
    6fc6:	add.w	r7, r4, #48	; 0x30
    6fca:	mov	r6, r2
    6fcc:	ldr	r0, [r3, #0]
    6fce:	adds	r3, #8
    6fd0:	ldr.w	r1, [r3, #-4]
    6fd4:	mov	r5, r2
    6fd6:	cmp	r3, r7
    6fd8:	stmia	r5!, {r0, r1}
    6fda:	mov	r2, r5
    6fdc:	bne.n	6fcc <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6fde:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6fe0:	add	r2, sp, #36	; 0x24
    6fe2:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6fe6:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6fe8:	ldmia	r2, {r0, r1, r2}
    6fea:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6fee:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6ff2:	mov	r0, r4
  m_setCount = file.m_setCount;
    6ff4:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6ff8:	ldrb.w	r3, [r4, #51]	; 0x33
    6ffc:	orn	r3, r3, #127	; 0x7f
    7000:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7004:	bl	6d98 <ExFatFile::sync()>
    7008:	cmp	r0, #0
    700a:	beq.n	6fa6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    700c:	movs	r3, #0
  return oldFile.remove();
    700e:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    7010:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7012:	movs	r3, #2
    7014:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7018:	movs	r3, #8
    701a:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    701e:	bl	6bd8 <ExFatFile::remove()>
    7022:	b.n	6fa8 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00007024 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7024:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7026:	ldrb.w	r2, [r0, #51]	; 0x33
    702a:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    702c:	lsls	r3, r2, #30
    702e:	bmi.n	7036 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    7030:	movs	r0, #0
}
    7032:	add	sp, #12
    7034:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    7036:	ldr	r3, [r0, #28]
    7038:	cmp	r3, #0
    703a:	beq.n	70ea <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    703c:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    7040:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    7042:	beq.n	70b4 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7044:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7046:	ldrb.w	r5, [r0, #1093]	; 0x445
    704a:	ldrd	r2, r6, [r4, #8]
    704e:	adds	r5, #9
    7050:	subs	r2, #1
    7052:	uxtb	r5, r5
    7054:	adc.w	r6, r6, #4294967295
    7058:	rsb	ip, r5, #32
    705c:	sub.w	r7, r5, #32
    7060:	lsrs	r2, r5
    7062:	lsl.w	ip, r6, ip
    7066:	lsr.w	r7, r6, r7
    706a:	orr.w	r2, r2, ip
    706e:	orrs	r2, r7
    7070:	adds	r2, #1
    if (m_curCluster) {
    7072:	cbz	r1, 70a0 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    7074:	subs	r3, #1
      toFree = m_curCluster + 1;
    7076:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    7078:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    707a:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    707c:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    707e:	cbnz	r2, 70a6 <ExFatFile::truncate()+0x82>
  return sync();
    7080:	mov	r0, r4
  m_dataLength = m_curPosition;
    7082:	ldrd	r2, r3, [r4]
    7086:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    708a:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    708e:	ldrb.w	r3, [r4, #51]	; 0x33
    7092:	orn	r3, r3, #127	; 0x7f
    7096:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    709a:	bl	6d98 <ExFatFile::sync()>
    709e:	b.n	7032 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    70a0:	str	r3, [sp, #4]
      m_firstCluster = 0;
    70a2:	str	r1, [r4, #28]
    70a4:	b.n	707e <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    70a6:	movs	r3, #0
    70a8:	ldr	r1, [sp, #4]
    70aa:	bl	673c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    70ae:	cmp	r0, #0
    70b0:	bne.n	7080 <ExFatFile::truncate()+0x5c>
    70b2:	b.n	7030 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    70b4:	cbz	r1, 70e4 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    70b6:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    70b8:	add	r2, sp, #4
    70ba:	ldr	r0, [r0, #32]
    70bc:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    70c0:	cmp	r0, #0
    70c2:	blt.n	7030 <ExFatFile::truncate()+0xc>
      if (fg) {
    70c4:	beq.n	70d6 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    70c6:	mov.w	r2, #4294967295
    70ca:	ldr	r1, [r4, #24]
    70cc:	ldr	r0, [r4, #32]
    70ce:	bl	68b6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    70d2:	cmp	r0, #0
    70d4:	beq.n	7030 <ExFatFile::truncate()+0xc>
    if (toFree) {
    70d6:	ldr	r1, [sp, #4]
    70d8:	cmp	r1, #0
    70da:	beq.n	7080 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    70dc:	ldr	r0, [r4, #32]
    70de:	bl	68f0 <ExFatPartition::freeChain(unsigned long)>
    70e2:	b.n	70ae <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    70e4:	str	r3, [sp, #4]
      m_firstCluster = 0;
    70e6:	str	r1, [r0, #28]
    70e8:	b.n	70d6 <ExFatFile::truncate()+0xb2>
      return true;
    70ea:	movs	r0, #1
    70ec:	b.n	7032 <ExFatFile::truncate()+0xe>
	...

000070f0 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    70f0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70f4:	ldrb.w	r3, [r0, #51]	; 0x33
    70f8:	mov	r8, r1
    70fa:	mov	r4, r0
    70fc:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    70fe:	lsls	r1, r3, #30
    7100:	bpl.n	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7102:	lsls	r2, r3, #28
    7104:	bmi.n	7134 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    7106:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7108:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    710c:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7110:	ldrd	r5, r3, [r4]
  while (toWrite) {
    7114:	cbnz	r7, 7152 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    7116:	ldrd	r1, r2, [r4, #8]
    711a:	cmp	r1, r5
    711c:	sbcs	r2, r3
    711e:	bcs.w	72e4 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    7122:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7126:	ldrb.w	r3, [r4, #51]	; 0x33
    712a:	orn	r3, r3, #127	; 0x7f
    712e:	strb.w	r3, [r4, #51]	; 0x33
    7132:	b.n	72ee <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    7134:	ldrd	r2, r3, [r0, #16]
    7138:	bl	6164 <ExFatFile::seekSet(unsigned long long)>
    713c:	cmp	r0, #0
    713e:	bne.n	7106 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7140:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    7144:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    7148:	orr.w	r3, r3, #1
    714c:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    7150:	b.n	72ee <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7152:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    7154:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7156:	ldr.w	r3, [r0, #1080]	; 0x438
    715a:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    715c:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    7160:	cbnz	r5, 71ac <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    7162:	cmp	r1, #0
    7164:	beq.n	7212 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    7166:	ldrb.w	r3, [r4, #51]	; 0x33
    716a:	lsls	r3, r3, #25
    716c:	bpl.n	7204 <ExFatFile::write(void const*, unsigned int)+0x114>
    716e:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    7172:	ldrd	r3, r2, [r4, #8]
    7176:	adds	r0, #9
    7178:	subs	r3, #1
    717a:	uxtb	r0, r0
    717c:	adc.w	r2, r2, #4294967295
    7180:	rsb	lr, r0, #32
    7184:	sub.w	ip, r0, #32
    7188:	lsrs	r3, r0
    718a:	lsl.w	lr, r2, lr
    718e:	lsr.w	ip, r2, ip
    7192:	ldr	r2, [r4, #28]
    7194:	orr.w	r3, r3, lr
    7198:	orr.w	r3, r3, ip
    719c:	add	r3, r2
          if (m_curCluster < lc) {
    719e:	cmp	r3, r1
    71a0:	bhi.n	71fe <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    71a2:	mov	r0, r4
    71a4:	bl	6b44 <ExFatFile::addCluster()>
    71a8:	cmp	r0, #0
    71aa:	beq.n	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    71ac:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    71b0:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    71b2:	ldr	r1, [r4, #24]
    71b4:	ldrb.w	r2, [ip, #1093]	; 0x445
    71b8:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    71ba:	ldr.w	r0, [ip, #1068]	; 0x42c
    71be:	lsls	r1, r2
    71c0:	add.w	r1, r1, r5, lsr #9
    71c4:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    71c6:	cbnz	r6, 722a <ExFatFile::write(void const*, unsigned int)+0x13a>
    71c8:	cmp.w	r7, #512	; 0x200
    71cc:	bcc.n	722a <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    71ce:	cmp.w	r7, #1024	; 0x400
    71d2:	ldr.w	lr, [ip, #540]	; 0x21c
    71d6:	ldr.w	r0, [ip, #532]	; 0x214
    71da:	bcs.n	72b2 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    71dc:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    71de:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    71e0:	ittt	eq
    71e2:	moveq.w	r3, #4294967295
    m_status = 0;
    71e6:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    71ea:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    71ee:	ldr	r3, [r0, #0]
    71f0:	ldr	r3, [r3, #36]	; 0x24
    71f2:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    71f4:	cmp	r0, #0
    71f6:	beq.n	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    71f8:	mov.w	r5, #512	; 0x200
    71fc:	b.n	727e <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    71fe:	adds	r1, #1
    7200:	str	r1, [r4, #24]
        if (fg == 0) {
    7202:	b.n	71ac <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7204:	mov	r2, sl
    7206:	bl	6810 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    720a:	cmp	r0, #0
    720c:	blt.n	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    720e:	beq.n	71a2 <ExFatFile::write(void const*, unsigned int)+0xb2>
    7210:	b.n	71ac <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    7212:	ldr	r3, [r4, #28]
    7214:	cbnz	r3, 7226 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    7216:	mov	r0, r4
    7218:	bl	6b44 <ExFatFile::addCluster()>
    721c:	cmp	r0, #0
    721e:	beq.n	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    7220:	ldr	r3, [r4, #24]
    7222:	str	r3, [r4, #28]
    7224:	b.n	71ac <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    7226:	str	r3, [r4, #24]
    7228:	b.n	71ac <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    722a:	rsb	r5, r6, #512	; 0x200
    722e:	cmp	r5, r7
    7230:	it	cs
    7232:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7234:	cmp	r6, #0
    7236:	bne.n	72ae <ExFatFile::write(void const*, unsigned int)+0x1be>
    7238:	ldr	r3, [r4, #20]
    723a:	ldr	r0, [r4, #0]
    723c:	str	r3, [sp, #4]
    723e:	ldr	r3, [r4, #16]
    7240:	ldr	r2, [r4, #4]
    7242:	cmp	r0, r3
    7244:	ldr	r3, [sp, #4]
    7246:	sbcs.w	r3, r2, r3
    724a:	bcc.n	72ae <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    724c:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    724e:	add.w	r0, ip, #528	; 0x210
    7252:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7256:	cmp	r0, #0
    7258:	beq.w	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    725c:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    725e:	add	r6, r5
      memcpy(dst, src, n);
    7260:	mov	r2, r5
    7262:	mov	r1, r8
    7264:	bl	a79c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7268:	cmp.w	r6, #512	; 0x200
    726c:	ldr	r0, [r4, #32]
    726e:	bne.n	727e <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    7270:	add.w	r0, r0, #528	; 0x210
    7274:	bl	5b9c <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    7278:	cmp	r0, #0
    727a:	beq.w	7140 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    727e:	add	r8, r5
    toWrite -= n;
    7280:	subs	r7, r7, r5
    m_curPosition += n;
    7282:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    7286:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    728a:	adds	r3, r5, r3
    728c:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    7290:	cmp	r0, r3
    7292:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    7294:	itt	cc
    7296:	ldrbcc.w	r1, [r4, #51]	; 0x33
    729a:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    729e:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    72a2:	itt	cc
    72a4:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    72a8:	strdcc	r3, r2, [r4, #16]
    72ac:	b.n	7110 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    72ae:	movs	r2, #1
    72b0:	b.n	724e <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    72b2:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    72b6:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    72b8:	lsrs	r2, r7, #9
    72ba:	cmp	r3, r2
    72bc:	it	cs
    72be:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    72c0:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    72c2:	mov.w	r5, r3, lsl #9
    72c6:	bhi.n	72da <ExFatFile::write(void const*, unsigned int)+0x1ea>
    72c8:	adds	r2, r1, r3
    72ca:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    72cc:	ittt	hi
    72ce:	movhi.w	r2, #4294967295
    m_status = 0;
    72d2:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    72d6:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    72da:	ldr	r2, [r0, #0]
    72dc:	ldr	r6, [r2, #40]	; 0x28
    72de:	mov	r2, r8
    72e0:	blx	r6
    72e2:	b.n	7278 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    72e4:	ldr	r3, [pc, #16]	; (72f8 <ExFatFile::write(void const*, unsigned int)+0x208>)
    72e6:	ldr	r3, [r3, #0]
    72e8:	cmp	r3, #0
    72ea:	bne.w	7126 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    72ee:	mov	r0, r9
    72f0:	add	sp, #12
    72f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72f6:	nop
    72f8:	.word	0x200207fc

000072fc <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    72fc:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    72fe:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    7300:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7302:	bl	77ee <FatFile::seekSet(unsigned long)>
    7306:	cbz	r0, 7314 <FatFile::cacheDir(unsigned short)+0x18>
    7308:	mov	r0, r4
    730a:	movs	r1, #0
  }
    730c:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7310:	b.w	77b0 <FatFile::readDirCache(bool)>
  }
    7314:	pop	{r4, pc}

00007316 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    7316:	cmp	r2, #4
    7318:	bhi.n	7324 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    731a:	add.w	r2, r1, r2, lsl #1
    731e:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    7322:	bx	lr
  } else if (i < 11) {
    7324:	cmp	r2, #10
    7326:	bhi.n	7330 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    7328:	add.w	r2, r1, r2, lsl #1
    732c:	ldrh	r0, [r2, #4]
    732e:	bx	lr
  } else if (i < 13) {
    7330:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    7332:	itte	ls
    7334:	addls.w	r2, r1, r2, lsl #1
    7338:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    733a:	movhi	r0, #0
}
    733c:	bx	lr

0000733e <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    733e:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    7340:	ldrb	r4, [r0, #0]
    7342:	mov	r5, r1
    7344:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    7346:	cbz	r4, 73b8 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7348:	ands.w	r4, r4, #96	; 0x60
    734c:	beq.n	735e <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    734e:	cmp	r2, #1
    7350:	bls.n	73b8 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    7352:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    7354:	movs	r0, #1
    name[0] = '/';
    7356:	strb	r3, [r1, #0]
    name[1] = '\0';
    7358:	movs	r3, #0
    735a:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    735c:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    735e:	mov	r1, r4
    7360:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7364:	cbz	r0, 73b8 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    7366:	mov	r6, r0
    7368:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    736a:	movs	r2, #8
    if (i == 8) {
    736c:	cmp	r1, #8
      if (*ptr == ' ') {
    736e:	ldrb	r3, [r6, #0]
    if (i == 8) {
    7370:	bne.n	738a <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    7372:	cmp	r3, #32
    7374:	beq.n	73b0 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    7376:	movs	r2, #16
      c = '.';
    7378:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    737a:	mov	ip, r4
    737c:	adds	r4, #1
    737e:	cmp	r4, r7
    7380:	bcs.n	73b8 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    7382:	uxtb	r4, r4
    7384:	strb.w	r3, [r5, ip]
    7388:	b.n	73aa <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    738a:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    738e:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    7390:	cmp.w	ip, #25
    7394:	bhi.n	73a6 <FatFile::getSFN(char*, unsigned int)+0x68>
    7396:	ldrb.w	ip, [r0, #12]
    739a:	tst.w	r2, ip
    739e:	beq.n	737a <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    73a0:	adds	r3, #32
    73a2:	uxtb	r3, r3
    73a4:	b.n	737a <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    73a6:	cmp	r3, #32
    73a8:	bne.n	737a <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    73aa:	adds	r1, #1
    73ac:	cmp	r1, #12
    73ae:	bne.n	736c <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    73b0:	movs	r3, #0
    73b2:	mov	r0, r4
    73b4:	strb	r3, [r5, r4]
  return j;
    73b6:	b.n	735c <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    73b8:	movs	r0, #0
    73ba:	strb	r0, [r5, #0]
  return 0;
    73bc:	b.n	735c <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

000073c0 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    73c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    73c4:	movs	r5, #0
    73c6:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    73c8:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    73ca:	mov	r6, r0
    73cc:	mov	r8, r1
    73ce:	mov	r7, r2
    73d0:	str	r5, [sp, #4]
  if (!isOpen()) {
    73d2:	cbz	r3, 73ee <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    73d4:	ldrb	r3, [r0, #3]
    73d6:	cbnz	r3, 73e2 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    73d8:	bl	733e <FatFile::getSFN(char*, unsigned int)>
}
    73dc:	add	sp, #44	; 0x2c
    73de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    73e2:	mov	r1, r0
    73e4:	add	r0, sp, #4
    73e6:	bl	75d6 <FatFile::openCluster(FatFile*)>
    73ea:	cmp	r0, #0
    73ec:	bne.n	749a <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    73ee:	movs	r0, #0
    73f0:	strb.w	r0, [r8]
  return 0;
    73f4:	b.n	73dc <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    73f6:	ldrh	r1, [r6, #4]
    73f8:	add	r0, sp, #4
    73fa:	sub.w	r1, r1, r9
    73fe:	uxth	r1, r1
    7400:	bl	72fc <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7404:	mov	sl, r0
    7406:	cmp	r0, #0
    7408:	beq.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    740a:	ldrb	r3, [r0, #11]
    740c:	cmp	r3, #15
    740e:	bne.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    7410:	ldrb	r3, [r0, #0]
    7412:	and.w	r3, r3, #31
    7416:	cmp	fp, r3
    7418:	bne.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    741a:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    741e:	uxtb.w	r2, fp
    7422:	mov	r1, sl
    7424:	mov	r0, r6
    7426:	bl	7316 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    742a:	cbz	r5, 7476 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    742c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7430:	uxth	r2, r2
    7432:	cmp.w	r2, #1024	; 0x400
    7436:	bcs.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7438:	ldr	r3, [pc, #108]	; (74a8 <FatFile::getName8(char*, unsigned int)+0xe8>)
    743a:	ubfx	r0, r0, #0, #10
    743e:	and.w	r5, r3, r5, lsl #10
    7442:	orrs	r0, r5
    7444:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7448:	mov	r1, r4
    744a:	mov	r2, r7
    744c:	bl	5a80 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7450:	mov	r4, r0
    7452:	cmp	r0, #0
    7454:	beq.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    7456:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    7458:	add.w	fp, fp, #1
    745c:	cmp.w	fp, #13
    7460:	bne.n	741e <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7462:	add.w	r9, r9, #1
    7466:	uxth.w	r9, r9
    746a:	uxtb.w	fp, r9
    746e:	ldrb	r3, [r6, #3]
    7470:	cmp	r3, fp
    7472:	bcs.n	73f6 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    7474:	b.n	7486 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    7476:	add.w	r2, r0, #10240	; 0x2800
    747a:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    747c:	cmp.w	r2, #2048	; 0x800
    7480:	bcc.n	7490 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    7482:	cmp	r0, #0
    7484:	bne.n	7448 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    7486:	movs	r3, #0
  return str - name;
    7488:	sub.w	r0, r4, r8
  *str = '\0';
    748c:	strb	r3, [r4, #0]
  return str - name;
    748e:	b.n	73dc <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    7490:	cmp.w	r2, #1024	; 0x400
    7494:	bcs.n	73ee <FatFile::getName8(char*, unsigned int)+0x2e>
    7496:	mov	r5, r0
    7498:	b.n	7458 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    749a:	subs	r7, #1
  char* str = name;
    749c:	mov	r4, r8
    749e:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    74a2:	add	r7, r8
    74a4:	b.n	746a <FatFile::getName8(char*, unsigned int)+0xaa>
    74a6:	nop
    74a8:	.word	0x000ffc00

000074ac <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    74ac:	b.w	73c0 <FatFile::getName8(char*, unsigned int)>

000074b0 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    74b0:	push	{r3, r4, r5, lr}
    74b2:	mov	r5, r1
    74b4:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    74b6:	movs	r2, #36	; 0x24
    74b8:	movs	r1, #0
    74ba:	bl	a758 <memset>

  m_vol = vol;
    74be:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    74c0:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    74c2:	cmp	r3, #16
    74c4:	beq.n	74ce <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    74c6:	cmp	r3, #32
    74c8:	beq.n	74d8 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    74ca:	cmp	r3, #12
    74cc:	bne.n	74dc <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    74ce:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    74d0:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    74d2:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    74d4:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    74d6:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    74d8:	movs	r3, #64	; 0x40
    74da:	b.n	74d0 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    74dc:	movs	r0, #0
    74de:	b.n	74d6 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

000074e0 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    74e0:	push	{r4, lr}
    74e2:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    74e4:	adds	r0, #40	; 0x28
    74e6:	bl	5b9c <FsCache::sync()>
    74ea:	cbz	r0, 7502 <FatPartition::cacheSync()+0x22>
    74ec:	add.w	r0, r4, #568	; 0x238
    74f0:	bl	5b9c <FsCache::sync()>
    74f4:	cbz	r0, 7502 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    74f6:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    74f8:	ldr	r3, [r0, #0]
  }
    74fa:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    74fe:	ldr	r3, [r3, #32]
    7500:	bx	r3
  }
    7502:	movs	r0, #0
    7504:	pop	{r4, pc}

00007506 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    7506:	mov	r2, r0
bool FatFile::addCluster() {
    7508:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    750a:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    750e:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7510:	ldr	r0, [r0, #8]
    7512:	mov	r1, r5
    7514:	bl	82b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7518:	cbz	r0, 752c <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    751a:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    751c:	cbnz	r5, 752e <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    751e:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7522:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7524:	ldrb	r3, [r4, #2]
    7526:	orn	r3, r3, #127	; 0x7f
    752a:	strb	r3, [r4, #2]
}
    752c:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    752e:	adds	r5, #1
    7530:	ldr	r2, [r4, #16]
    7532:	cmp	r2, r5
    7534:	beq.n	7524 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7536:	bic.w	r3, r3, #64	; 0x40
    753a:	b.n	7522 <FatFile::addCluster()+0x1c>

0000753c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    753c:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    753e:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    7540:	mov	r4, r0
  if (isRootFixed()) {
    7542:	ands.w	r5, r5, #32
    7546:	beq.n	754e <FatFile::addDirCluster()+0x12>
  return false;
    7548:	movs	r6, #0
}
    754a:	mov	r0, r6
    754c:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    754e:	ldr	r2, [r0, #20]
    7550:	ldr	r3, [pc, #84]	; (75a8 <FatFile::addDirCluster()+0x6c>)
    7552:	cmp	r2, r3
    7554:	bcs.n	7548 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    7556:	bl	7506 <FatFile::addCluster()>
    755a:	mov	r6, r0
    755c:	cmp	r0, #0
    755e:	beq.n	7548 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    7560:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7562:	ldr	r3, [r4, #16]
    7564:	ldrb	r1, [r2, #6]
    7566:	subs	r3, #2
    7568:	ldr	r7, [r2, #20]
    756a:	lsls	r3, r1
    756c:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    756e:	ldr	r0, [r4, #8]
    7570:	uxtb	r1, r5
    7572:	ldrb	r3, [r0, #4]
    7574:	cmp	r3, r1
    7576:	bhi.n	758a <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7578:	ldrb	r2, [r0, #6]
    757a:	mov.w	r3, #512	; 0x200
    757e:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7580:	ldr	r2, [r4, #20]
    7582:	uxtah	r3, r2, r3
    7586:	str	r3, [r4, #20]
  return true;
    7588:	b.n	754a <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    758a:	movs	r2, #5
    758c:	add	r1, r7
    758e:	adds	r0, #40	; 0x28
    if (!pc) {
    7590:	adds	r5, #1
    7592:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    7596:	cmp	r0, #0
    7598:	beq.n	7548 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    759a:	mov.w	r2, #512	; 0x200
    759e:	movs	r1, #0
    75a0:	bl	a758 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    75a4:	b.n	756e <FatFile::addDirCluster()+0x32>
    75a6:	nop
    75a8:	.word	0x001ffe00

000075ac <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    75ac:	push	{r4, lr}
    75ae:	mov	r4, r0
    75b0:	ldr	r0, [r0, #8]
    75b2:	mov	r2, r1
    75b4:	adds	r0, #40	; 0x28
    75b6:	ldr	r1, [r4, #24]
    75b8:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    75bc:	cbz	r0, 75c8 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    75be:	ldrh	r3, [r4, #4]
    75c0:	and.w	r3, r3, #15
    75c4:	add.w	r0, r0, r3, lsl #5
}
    75c8:	pop	{r4, pc}

000075ca <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    75ca:	ldrb	r3, [r0, #0]
    75cc:	cbnz	r3, 75d2 <FatFile::openRoot(FatVolume*)+0x8>
    75ce:	b.w	74b0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    75d2:	movs	r0, #0
    75d4:	bx	lr

000075d6 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    75d6:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    75d8:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    75da:	mov	r4, r0
    75dc:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    75de:	cbnz	r3, 75ea <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    75e0:	ldr	r1, [r1, #8]
}
    75e2:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    75e6:	b.w	75ca <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    75ea:	movs	r2, #36	; 0x24
    75ec:	movs	r1, #0
    75ee:	bl	a758 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    75f2:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    75f4:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    75f6:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    75f8:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    75fa:	ldr	r3, [r5, #8]
    75fc:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    75fe:	ldr	r3, [r5, #12]
    7600:	str	r3, [r4, #32]
}
    7602:	pop	{r3, r4, r5, pc}

00007604 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7604:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7608:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    760c:	ldrb	r3, [r0, #2]
    760e:	mov	r4, r0
    7610:	sub	sp, #12
    7612:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7614:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    7616:	mov	r5, r2
  if (!isReadable()) {
    7618:	bpl.n	76fe <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    761a:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    761c:	lsls	r1, r3, #28
    761e:	bpl.n	7648 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7620:	ldr	r3, [r4, #28]
    7622:	ldr	r2, [r4, #20]
    7624:	subs	r3, r3, r2
    7626:	cmp	r5, r3
    7628:	it	cs
    762a:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    762c:	add.w	r3, r4, #16
  toRead = nbyte;
    7630:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    7632:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7636:	vmov	s16, r3
  while (toRead) {
    763a:	cbnz	r6, 765a <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    763c:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    763e:	add	sp, #12
    7640:	vpop	{d8}
    7644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    7648:	lsls	r2, r3, #26
    764a:	bpl.n	762c <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    764c:	ldr	r3, [r4, #8]
    764e:	ldrh	r2, [r3, #10]
    7650:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    7652:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7656:	uxth	r3, r3
    7658:	b.n	7626 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    765a:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    765c:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    765e:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7660:	ldr	r0, [r4, #8]
    7662:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    7666:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    766a:	bpl.n	76a4 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    766c:	ldr	r2, [r0, #32]
    766e:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7670:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    7674:	cmp.w	fp, #0
    7678:	bne.n	770c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    767a:	cmp.w	r6, #512	; 0x200
    767e:	bcc.n	770c <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    7680:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    7684:	cmp	r1, r2
    7686:	beq.n	770c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7688:	cmp.w	r6, #1024	; 0x400
    768c:	bcs.n	773c <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    768e:	ldr.w	r0, [sl, #44]	; 0x2c
    7692:	mov	r2, r8
    7694:	ldr	r3, [r0, #0]
    7696:	ldr	r3, [r3, #16]
    7698:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    769a:	cmp	r0, #0
    769c:	beq.n	76fe <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    769e:	mov.w	r7, #512	; 0x200
    76a2:	b.n	7730 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    76a4:	ldrb.w	r9, [r0, #5]
    76a8:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    76ac:	cmp.w	fp, #0
    76b0:	bne.n	76c4 <FatFile::read(void*, unsigned int)+0xc0>
    76b2:	cmp.w	r9, #0
    76b6:	bne.n	76c4 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    76b8:	cbnz	r7, 76d6 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    76ba:	lsls	r2, r2, #25
    return m_rootDirStart;
    76bc:	ite	mi
    76be:	ldrmi	r2, [r0, #32]
    76c0:	ldrpl	r2, [r4, #32]
    76c2:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    76c4:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76c6:	ldr	r1, [r4, #16]
    76c8:	ldrb	r0, [r2, #6]
    76ca:	subs	r1, #2
    76cc:	ldr	r2, [r2, #20]
    76ce:	lsls	r1, r0
    76d0:	add	r1, r2
    76d2:	add	r1, r9
    76d4:	b.n	7670 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    76d6:	lsls	r3, r2, #28
          m_curCluster++;
    76d8:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    76da:	bpl.n	76e8 <FatFile::read(void*, unsigned int)+0xe4>
    76dc:	ldrb	r2, [r4, #2]
    76de:	lsls	r7, r2, #25
    76e0:	bpl.n	76e8 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    76e2:	adds	r1, #1
    76e4:	str	r1, [r4, #16]
    76e6:	b.n	76c4 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    76e8:	vmov	r2, s16
    76ec:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    76f0:	cmp	r0, #0
    76f2:	blt.n	76fe <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    76f4:	bne.n	76c4 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    76f6:	ldrb	r3, [r4, #0]
    76f8:	tst.w	r3, #112	; 0x70
    76fc:	bne.n	763c <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    76fe:	ldrb	r3, [r4, #1]
  return -1;
    7700:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7704:	orr.w	r3, r3, #2
    7708:	strb	r3, [r4, #1]
  return -1;
    770a:	b.n	763e <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    770c:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7710:	movs	r2, #0
    7712:	add.w	r0, sl, #40	; 0x28
    7716:	cmp	r7, r6
    7718:	it	cs
    771a:	movcs	r7, r6
    771c:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7720:	cmp	r0, #0
    7722:	beq.n	76fe <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    7724:	add.w	r1, r0, fp
    7728:	mov	r2, r7
    772a:	mov	r0, r8
    772c:	bl	a79c <memcpy>
    m_curPosition += n;
    7730:	ldr	r3, [r4, #20]
    dst += n;
    7732:	add	r8, r7
    toRead -= n;
    7734:	subs	r6, r6, r7
    m_curPosition += n;
    7736:	add	r3, r7
    7738:	str	r3, [r4, #20]
    toRead -= n;
    773a:	b.n	763a <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    773c:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    773e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    7740:	lsls	r0, r0, #26
    7742:	bmi.n	7752 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7744:	ldrb.w	r0, [sl, #4]
    7748:	sub.w	r0, r0, r9
    774c:	cmp	r3, r0
    774e:	it	cs
    7750:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    7752:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    7754:	mov.w	r7, r3, lsl #9
    7758:	bls.n	776e <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    775a:	ldr.w	r0, [sl, #44]	; 0x2c
    775e:	ldr	r2, [r0, #0]
    7760:	ldr.w	sl, [r2, #20]
    7764:	mov	r2, r8
    7766:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7768:	cmp	r0, #0
    776a:	bne.n	7730 <FatFile::read(void*, unsigned int)+0x12c>
    776c:	b.n	76fe <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    776e:	adds	r0, r1, r3
    7770:	cmp	r2, r0
    7772:	bcs.n	775a <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    7774:	add.w	r0, sl, #40	; 0x28
    7778:	strd	r1, r3, [sp]
    777c:	bl	5b9c <FsCache::sync()>
    7780:	ldrd	r1, r3, [sp]
    7784:	cmp	r0, #0
    7786:	bne.n	775a <FatFile::read(void*, unsigned int)+0x156>
    7788:	b.n	76fe <FatFile::read(void*, unsigned int)+0xfa>

0000778a <FatFile::peek()>:
int FatFile::peek() {
    778a:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    778c:	movs	r2, #1
    778e:	add.w	r1, sp, #7
    7792:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    7794:	ldrd	r5, r6, [r0, #16]
    7798:	bl	7604 <FatFile::read(void*, unsigned int)>
    779c:	cmp	r0, #1
    779e:	ite	eq
    77a0:	ldrbeq.w	r0, [sp, #7]
    77a4:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    77a8:	strd	r5, r6, [r4, #16]
}
    77ac:	add	sp, #8
    77ae:	pop	{r4, r5, r6, pc}

000077b0 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    77b0:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    77b2:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    77b6:	push	{r0, r1, r2, r4, r5, lr}
    77b8:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    77ba:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    77be:	beq.n	77c2 <FatFile::readDirCache(bool)+0x12>
    77c0:	cbnz	r1, 77ea <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    77c2:	movs	r2, #1
    77c4:	add.w	r1, sp, #7
    77c8:	mov	r0, r4
    77ca:	bl	7604 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    77ce:	sxtb	r0, r0
    77d0:	cmp	r0, #1
    77d2:	beq.n	77da <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    77d4:	movs	r0, #0
}
    77d6:	add	sp, #12
    77d8:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    77da:	ldr	r3, [r4, #20]
    77dc:	adds	r3, #31
    return m_buffer;
    77de:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    77e0:	str	r3, [r4, #20]
    77e2:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    77e4:	add.w	r0, r0, r5, lsl #5
    77e8:	b.n	77d6 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    77ea:	adds	r3, #32
    77ec:	b.n	77de <FatFile::readDirCache(bool)+0x2e>

000077ee <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    77ee:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77f2:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    77f4:	ldrb	r1, [r0, #0]
    77f6:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    77f8:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    77fa:	cbz	r1, 781e <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    77fc:	ldr	r0, [r0, #20]
    77fe:	cmp	r0, r5
    7800:	beq.n	7810 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    7802:	cbnz	r5, 7814 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    7804:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7806:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    7808:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    780a:	bic.w	r3, r3, #32
    780e:	strb	r3, [r4, #2]
    return true;
    7810:	movs	r0, #1
    7812:	b.n	7822 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7814:	lsls	r3, r1, #28
    7816:	bpl.n	7826 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    7818:	ldr	r3, [r4, #28]
    781a:	cmp	r3, r5
    781c:	bcs.n	7836 <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    781e:	movs	r0, #0
  m_curCluster = tmp;
    7820:	str	r7, [r4, #16]
}
    7822:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    7826:	lsls	r6, r1, #26
    7828:	bpl.n	7836 <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    782a:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    782c:	ldrh	r3, [r3, #10]
    782e:	cmp.w	r5, r3, lsl #5
    7832:	bhi.n	781e <FatFile::seekSet(unsigned long)+0x30>
    7834:	b.n	7806 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7836:	ldr.w	ip, [r4, #8]
    783a:	subs	r6, r5, #1
  if (isContiguous()) {
    783c:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    783e:	ldrb.w	r3, [ip, #6]
    7842:	lsls	r2, r2, #25
    7844:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7848:	uxtb	r3, r3
    784a:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    784e:	bpl.n	7858 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    7850:	ldr	r3, [r4, #32]
    7852:	add	r3, r6
    7854:	str	r3, [r4, #16]
    goto done;
    7856:	b.n	7806 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7858:	subs	r2, r0, #1
    785a:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    785e:	cmp	r6, r3
    7860:	bcc.n	7864 <FatFile::seekSet(unsigned long)+0x76>
    7862:	cbnz	r0, 788a <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7864:	lsls	r3, r1, #25
    return m_rootDirStart;
    7866:	ite	mi
    7868:	ldrmi.w	r3, [ip, #32]
    786c:	ldrpl	r3, [r4, #32]
    786e:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7870:	add.w	r8, r4, #16
  while (nNew--) {
    7874:	cmp	r6, #0
    7876:	beq.n	7806 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7878:	mov	r2, r8
    787a:	ldr	r1, [r4, #16]
    787c:	ldr	r0, [r4, #8]
    787e:	subs	r6, #1
    7880:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
    7884:	cmp	r0, #0
    7886:	bgt.n	7874 <FatFile::seekSet(unsigned long)+0x86>
    7888:	b.n	781e <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    788a:	subs	r6, r6, r3
    788c:	b.n	7870 <FatFile::seekSet(unsigned long)+0x82>

0000788e <FatFile::rmdir()>:
bool FatFile::rmdir() {
    788e:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7890:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    7892:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7894:	lsls	r2, r3, #27
    7896:	bpl.n	78ac <FatFile::rmdir()+0x1e>
    seekSet(0);
    7898:	movs	r1, #0
    789a:	bl	77ee <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    789e:	movs	r1, #1
    78a0:	mov	r0, r4
    78a2:	bl	77b0 <FatFile::readDirCache(bool)>
    if (!dir) {
    78a6:	cbnz	r0, 78b0 <FatFile::rmdir()+0x22>
      if (!getError()) {
    78a8:	ldrb	r3, [r4, #1]
    78aa:	cbz	r3, 78c4 <FatFile::rmdir()+0x36>
}
    78ac:	movs	r0, #0
    78ae:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    78b0:	ldrb	r3, [r0, #0]
    78b2:	cbz	r3, 78c4 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    78b4:	cmp	r3, #229	; 0xe5
    78b6:	beq.n	789e <FatFile::rmdir()+0x10>
    78b8:	cmp	r3, #46	; 0x2e
    78ba:	beq.n	789e <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    78bc:	ldrb	r3, [r0, #11]
    78be:	lsls	r3, r3, #28
    78c0:	bmi.n	789e <FatFile::rmdir()+0x10>
    78c2:	b.n	78ac <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    78c4:	movs	r3, #8
  return remove();
    78c6:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    78c8:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    78ca:	ldrb	r3, [r4, #2]
    78cc:	orr.w	r3, r3, #2
    78d0:	strb	r3, [r4, #2]
}
    78d2:	ldmia.w	sp!, {r4, lr}
  return remove();
    78d6:	b.w	8be0 <FatFile::remove()>

000078da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    78da:	push	{r3, r4, r5, r6, r7, lr}
    78dc:	mov	r7, r1
    78de:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    78e0:	movs	r1, #0
    78e2:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    78e4:	mov	r4, r0
    78e6:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    78e8:	bl	a758 <memset>
  m_vol = dirFile->m_vol;
    78ec:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    78ee:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    78f0:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    78f2:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    78f6:	str	r3, [r4, #12]
    78f8:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    78fc:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    78fe:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7902:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    7904:	lsls	r1, r2, #28
    7906:	bmi.n	797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7908:	and.w	r2, r2, #23
    790c:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    790e:	ldrb	r1, [r3, #11]
    7910:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7914:	itt	eq
    7916:	orreq.w	r2, r2, #8
    791a:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    791c:	ldrb.w	r2, [sp, #24]
    7920:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7922:	and.w	r2, r5, #3
    7926:	cmp	r2, #1
    7928:	beq.n	796e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    792a:	cmp	r2, #2
    792c:	beq.n	7972 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    792e:	cbnz	r2, 797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    7930:	lsls	r2, r5, #21
    7932:	bmi.n	797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7934:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    7936:	lsls	r7, r2, #30
    7938:	bpl.n	7944 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    793a:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    793c:	lsls	r6, r1, #27
    793e:	bmi.n	797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7940:	lsls	r1, r1, #31
    7942:	bmi.n	797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7944:	and.w	r1, r5, #8
    7948:	orrs	r2, r1
    794a:	strb	r2, [r4, #2]
    return m_sector;
    794c:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    794e:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    7950:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7952:	ldrh	r2, [r3, #20]
    7954:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    7958:	lsls	r2, r5, #21
    795a:	bpl.n	7986 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    795c:	cbnz	r1, 7976 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    795e:	ldrb	r3, [r4, #2]
    7960:	orn	r3, r3, #127	; 0x7f
    7964:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7966:	lsls	r3, r5, #17
    7968:	bmi.n	798e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    796a:	movs	r0, #1
}
    796c:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    796e:	movs	r2, #2
    7970:	b.n	7936 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    7972:	movs	r2, #3
    7974:	b.n	7936 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7976:	bl	8336 <FatPartition::freeChain(unsigned long)>
    797a:	cmp	r0, #0
    797c:	bne.n	795e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    797e:	movs	r0, #0
    7980:	strb	r0, [r4, #0]
  m_flags = 0;
    7982:	strb	r0, [r4, #2]
  return false;
    7984:	b.n	796c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    7986:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7988:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    798a:	str	r3, [r4, #28]
    798c:	b.n	7966 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    798e:	ldr	r1, [r4, #28]
    7990:	mov	r0, r4
    7992:	bl	77ee <FatFile::seekSet(unsigned long)>
    7996:	cmp	r0, #0
    7998:	bne.n	796a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    799a:	b.n	797e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

0000799c <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    799c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    79a0:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    79a2:	ldrb	r2, [r0, #0]
    79a4:	sub	sp, #20
    79a6:	mov	r7, r0
    79a8:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    79aa:	cmp	r2, #0
    79ac:	bne.n	7a34 <FatFile::openNext(FatFile*, int)+0x98>
    79ae:	ldrb	r2, [r1, #0]
    79b0:	tst.w	r2, #112	; 0x70
    79b4:	beq.n	7a34 <FatFile::openNext(FatFile*, int)+0x98>
    79b6:	ldr	r4, [r1, #20]
    79b8:	ands.w	r4, r4, #31
    79bc:	bne.n	7a34 <FatFile::openNext(FatFile*, int)+0x98>
    79be:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    79c0:	movs	r1, #0
    79c2:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    79c4:	ldr.w	r8, [r6, #20]
    79c8:	str	r3, [sp, #12]
    79ca:	bl	77b0 <FatFile::readDirCache(bool)>
    if (!dir) {
    79ce:	cbz	r0, 7a34 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    79d0:	ldrb	r1, [r0, #0]
    79d2:	cbz	r1, 7a34 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    79d4:	cmp	r1, #46	; 0x2e
    79d6:	ldr	r3, [sp, #12]
    79d8:	beq.n	7a1e <FatFile::openNext(FatFile*, int)+0x82>
    79da:	cmp	r1, #229	; 0xe5
    79dc:	beq.n	7a1e <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    79de:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    79e0:	ands.w	ip, r2, #8
    79e4:	bne.n	7a22 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    79e6:	cbz	r4, 7a0a <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    79e8:	subs	r1, r0, #1
    79ea:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    79ee:	mov.w	r2, ip, lsl #7
    79f2:	ldrb.w	r0, [r1, #1]!
    79f6:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    79fa:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    79fc:	uxtab	r2, r0, r2
    7a00:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7a04:	bne.n	79ee <FatFile::openNext(FatFile*, int)+0x52>
    7a06:	cmp	r9, ip
    7a08:	bne.n	7a34 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7a0a:	ubfx	r2, r8, #5, #16
    7a0e:	mov	r1, r6
    7a10:	mov	r0, r7
    7a12:	str	r4, [sp, #0]
    7a14:	bl	78da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    7a18:	add	sp, #20
    7a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    7a1e:	movs	r4, #0
    7a20:	b.n	79c0 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    7a22:	cmp	r2, #15
    7a24:	bne.n	7a1e <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7a26:	lsls	r2, r1, #25
    7a28:	bpl.n	79c0 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    7a2a:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    7a2e:	ldrb.w	r9, [r0, #13]
    7a32:	b.n	79c0 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7a34:	movs	r0, #0
    7a36:	b.n	7a18 <FatFile::openNext(FatFile*, int)+0x7c>

00007a38 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7a38:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7a3a:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    7a3c:	mov	r4, r0
  if (!isOpen()) {
    7a3e:	cmp	r3, #0
    7a40:	beq.n	7aae <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7a42:	ldrsb.w	r3, [r0, #2]
    7a46:	cmp	r3, #0
    7a48:	bge.n	7aa2 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7a4a:	movs	r1, #1
    7a4c:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7a50:	mov	r5, r0
    7a52:	cbnz	r0, 7a62 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7a54:	ldrb	r3, [r4, #1]
  return false;
    7a56:	movs	r0, #0
  m_error |= WRITE_ERROR;
    7a58:	orr.w	r3, r3, #1
    7a5c:	strb	r3, [r4, #1]
}
    7a5e:	add	sp, #12
    7a60:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7a62:	ldrb	r3, [r0, #0]
    7a64:	cmp	r3, #229	; 0xe5
    7a66:	beq.n	7a54 <FatFile::sync()+0x1c>
    if (isFile()) {
    7a68:	ldrb	r3, [r4, #0]
    7a6a:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7a6c:	itt	mi
    7a6e:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7a70:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7a72:	ldr	r3, [r4, #32]
    7a74:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7a76:	lsrs	r3, r3, #16
    7a78:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    7a7a:	ldr	r3, [pc, #56]	; (7ab4 <FatFile::sync()+0x7c>)
    7a7c:	ldr	r3, [r3, #0]
    7a7e:	cbz	r3, 7a9a <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    7a80:	add.w	r2, sp, #3
    7a84:	add.w	r1, sp, #6
    7a88:	add	r0, sp, #4
    7a8a:	blx	r3
      setLe16(dir->modifyDate, date);
    7a8c:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7a90:	strh	r3, [r5, #24]
    7a92:	strh	r3, [r5, #18]
    7a94:	ldrh.w	r3, [sp, #6]
    7a98:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7a9a:	ldrb	r3, [r4, #2]
    7a9c:	and.w	r3, r3, #127	; 0x7f
    7aa0:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7aa2:	ldr	r0, [r4, #8]
    7aa4:	bl	74e0 <FatPartition::cacheSync()>
    7aa8:	cmp	r0, #0
    7aaa:	beq.n	7a54 <FatFile::sync()+0x1c>
    7aac:	b.n	7a5e <FatFile::sync()+0x26>
    return true;
    7aae:	movs	r0, #1
    7ab0:	b.n	7a5e <FatFile::sync()+0x26>
    7ab2:	nop
    7ab4:	.word	0x200207fc

00007ab8 <FatFile::close()>:
bool FatFile::close() {
    7ab8:	push	{r4, lr}
    7aba:	mov	r4, r0
  bool rtn = sync();
    7abc:	bl	7a38 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7ac0:	movs	r3, #0
    7ac2:	strb	r3, [r4, #0]
  m_flags = 0;
    7ac4:	strb	r3, [r4, #2]
}
    7ac6:	pop	{r4, pc}

00007ac8 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7ac8:	push	{r4, r5, r6, r7, lr}
    7aca:	mov	r7, r3
    7acc:	sub	sp, #84	; 0x54
  FatFile() {}
    7ace:	movs	r3, #0
    7ad0:	mov	r6, r0
    7ad2:	mov	r4, r1
    7ad4:	str	r2, [sp, #4]
    7ad6:	str	r3, [sp, #8]
    7ad8:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7adc:	ldrb	r3, [r0, #0]
    7ade:	cbz	r3, 7ae6 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7ae0:	movs	r0, #0
}
    7ae2:	add	sp, #84	; 0x54
    7ae4:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    7ae6:	ldrb	r3, [r1, #0]
    7ae8:	tst.w	r3, #112	; 0x70
    7aec:	beq.n	7ae0 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7aee:	ldrb	r3, [r2, #0]
    7af0:	cmp	r3, #47	; 0x2f
    7af2:	bne.n	7b1a <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7af4:	ldr	r2, [sp, #4]
    7af6:	ldrb	r3, [r2, #0]
    7af8:	cmp	r3, #47	; 0x2f
    7afa:	beq.n	7b08 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7afc:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7afe:	cbnz	r3, 7b0e <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7b00:	mov	r0, r6
    7b02:	bl	75ca <FatFile::openRoot(FatVolume*)>
    7b06:	b.n	7ae2 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    7b08:	adds	r2, #1
    7b0a:	str	r2, [sp, #4]
    7b0c:	b.n	7af4 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7b0e:	add	r0, sp, #8
    7b10:	bl	74b0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7b14:	cmp	r0, #0
    7b16:	beq.n	7ae0 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    7b18:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7b1a:	add	r3, sp, #4
    7b1c:	add	r2, sp, #44	; 0x2c
    7b1e:	ldr	r1, [sp, #4]
    7b20:	mov	r0, r6
    7b22:	bl	8b34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7b26:	cmp	r0, #0
    7b28:	beq.n	7ae0 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    7b2a:	ldr	r3, [sp, #4]
    7b2c:	ldrb	r3, [r3, #0]
    7b2e:	cbz	r3, 7b58 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7b30:	movs	r3, #0
    7b32:	add	r2, sp, #44	; 0x2c
    7b34:	mov	r1, r4
    7b36:	mov	r0, r6
    7b38:	bl	88b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b3c:	cmp	r0, #0
    7b3e:	beq.n	7ae0 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    7b40:	mov	r5, r6
    7b42:	add	r4, sp, #8
    7b44:	ldmia	r5!, {r0, r1, r2, r3}
    7b46:	stmia	r4!, {r0, r1, r2, r3}
    7b48:	ldmia	r5!, {r0, r1, r2, r3}
    7b4a:	stmia	r4!, {r0, r1, r2, r3}
    7b4c:	ldr	r3, [r5, #0]
    close();
    7b4e:	mov	r0, r6
    tmpDir = *this;
    7b50:	str	r3, [r4, #0]
    close();
    7b52:	bl	7ab8 <FatFile::close()>
  while (1) {
    7b56:	b.n	7b18 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    7b58:	mov	r3, r7
    7b5a:	add	r2, sp, #44	; 0x2c
    7b5c:	mov	r1, r4
    7b5e:	mov	r0, r6
    7b60:	bl	88b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7b64:	b.n	7ae2 <FatFile::open(FatFile*, char const*, int)+0x1a>

00007b66 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7b66:	cbz	r1, 7b70 <FatFile::open(FatVolume*, char const*, int)+0xa>
    7b68:	add.w	r1, r1, #1096	; 0x448
    7b6c:	b.w	7ac8 <FatFile::open(FatFile*, char const*, int)>
}
    7b70:	mov	r0, r1
    7b72:	bx	lr

00007b74 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7b74:	push	{r4, r5, r6, lr}
    7b76:	mov	r6, r0
    7b78:	mov	r4, r1
  if (!sync()) {
    7b7a:	bl	7a38 <FatFile::sync()>
    7b7e:	mov	r5, r0
    7b80:	cbnz	r0, 7b88 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    7b82:	movs	r5, #0
}
    7b84:	mov	r0, r5
    7b86:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7b88:	movs	r1, #0
    7b8a:	mov	r0, r6
    7b8c:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7b90:	mov	r3, r0
    7b92:	cmp	r0, #0
    7b94:	beq.n	7b82 <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    7b96:	mov	r1, r4
    7b98:	add.w	r2, r0, #32
    7b9c:	ldr.w	r0, [r3], #4
    7ba0:	cmp	r3, r2
    7ba2:	str.w	r0, [r1], #4
    7ba6:	bne.n	7b9c <FatFile::dirEntry(DirFat_t*)+0x28>
    7ba8:	b.n	7b84 <FatFile::dirEntry(DirFat_t*)+0x10>

00007baa <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7baa:	push	{r4, r5, lr}
    7bac:	sub	sp, #36	; 0x24
    7bae:	mov	r5, r1
    7bb0:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7bb2:	mov	r1, sp
    7bb4:	bl	7b74 <FatFile::dirEntry(DirFat_t*)>
    7bb8:	cbz	r0, 7bc6 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7bba:	ldrh.w	r3, [sp, #16]
    7bbe:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7bc0:	ldrh.w	r3, [sp, #14]
    7bc4:	strh	r3, [r4, #0]
}
    7bc6:	add	sp, #36	; 0x24
    7bc8:	pop	{r4, r5, pc}

00007bca <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7bca:	push	{r4, r5, lr}
    7bcc:	sub	sp, #36	; 0x24
    7bce:	mov	r5, r1
    7bd0:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7bd2:	mov	r1, sp
    7bd4:	bl	7b74 <FatFile::dirEntry(DirFat_t*)>
    7bd8:	cbz	r0, 7be6 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7bda:	ldrh.w	r3, [sp, #24]
    7bde:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7be0:	ldrh.w	r3, [sp, #22]
    7be4:	strh	r3, [r4, #0]
}
    7be6:	add	sp, #36	; 0x24
    7be8:	pop	{r4, r5, pc}

00007bea <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7bea:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7bec:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7bee:	sub	sp, #36	; 0x24
    7bf0:	mov	r4, r0
    7bf2:	mov	r6, r1
  if (!parent->isDir()) {
    7bf4:	tst.w	r3, #112	; 0x70
    7bf8:	bne.n	7c00 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    7bfa:	movs	r0, #0
}
    7bfc:	add	sp, #36	; 0x24
    7bfe:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7c00:	movw	r3, #2562	; 0xa02
    7c04:	bl	88b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c08:	cmp	r0, #0
    7c0a:	beq.n	7bfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    7c0c:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7c0e:	movs	r5, #16
  if (!addDirCluster()) {
    7c10:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7c12:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7c14:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    7c16:	bl	753c <FatFile::addDirCluster()>
    7c1a:	cmp	r0, #0
    7c1c:	beq.n	7bfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    7c1e:	ldr	r3, [r4, #16]
    seekSet(0);
    7c20:	movs	r1, #0
    7c22:	mov	r0, r4
    7c24:	str	r3, [r4, #32]
    7c26:	bl	77ee <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7c2a:	mov	r0, r4
    7c2c:	bl	7a38 <FatFile::sync()>
    7c30:	cmp	r0, #0
    7c32:	beq.n	7bfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7c34:	mov	r1, r7
    7c36:	mov	r0, r4
    7c38:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7c3c:	cmp	r0, #0
    7c3e:	beq.n	7bfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    7c40:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7c42:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7c44:	mov	r3, r0
    7c46:	add.w	ip, r0, #32
    7c4a:	mov	r5, r2
    7c4c:	ldr	r0, [r3, #0]
    7c4e:	adds	r3, #8
    7c50:	ldr.w	r1, [r3, #-4]
    7c54:	mov	r7, r2
    7c56:	cmp	r3, ip
    7c58:	stmia	r7!, {r0, r1}
    7c5a:	mov	r2, r7
    7c5c:	bne.n	7c4c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7c5e:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    7c62:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c64:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7c66:	movs	r2, #1
    dot.name[i] = ' ';
    7c68:	str.w	r3, [sp, #1]
    7c6c:	adds	r0, #40	; 0x28
    7c6e:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7c72:	subs	r1, #2
    7c74:	strh.w	r3, [sp, #9]
    7c78:	ldrb.w	r3, [r0, #-34]
    7c7c:	lsls	r1, r3
    7c7e:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7c82:	add	r1, r3
    7c84:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7c88:	mov	r3, r0
    7c8a:	cmp	r0, #0
    7c8c:	beq.n	7bfa <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    7c8e:	movs	r2, #46	; 0x2e
    7c90:	mov	ip, r5
    7c92:	mov	r7, r0
    7c94:	add.w	lr, sp, #32
    7c98:	strb.w	r2, [sp]
    7c9c:	mov	r2, ip
    7c9e:	adds	r7, #8
    7ca0:	ldmia	r2!, {r0, r1}
    7ca2:	cmp	r2, lr
    7ca4:	str.w	r0, [r7, #-8]
    7ca8:	str.w	r1, [r7, #-4]
    7cac:	mov	ip, r2
    7cae:	bne.n	7c9c <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7cb0:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    7cb2:	adds	r3, #32
  dot.name[1] = '.';
    7cb4:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7cb8:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7cba:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7cbc:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7cbe:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7cc2:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7cc4:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7cc8:	mov	r5, r2
    7cca:	adds	r3, #8
    7ccc:	ldmia	r5!, {r0, r1}
    7cce:	cmp	r5, r6
    7cd0:	str.w	r0, [r3, #-8]
    7cd4:	str.w	r1, [r3, #-4]
    7cd8:	mov	r2, r5
    7cda:	bne.n	7cc8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7cdc:	ldr	r0, [r4, #8]
    7cde:	bl	74e0 <FatPartition::cacheSync()>
    7ce2:	b.n	7bfc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007ce4 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7ce4:	push	{r4, r5, r6, r7, lr}
    7ce6:	mov	r7, r3
    7ce8:	sub	sp, #84	; 0x54
    7cea:	movs	r3, #0
    7cec:	mov	r6, r0
    7cee:	mov	r4, r1
    7cf0:	str	r2, [sp, #4]
    7cf2:	strh.w	r3, [sp, #20]
  FatFile() {}
    7cf6:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7cf8:	ldrb	r3, [r0, #0]
    7cfa:	cbz	r3, 7d02 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7cfc:	movs	r0, #0
}
    7cfe:	add	sp, #84	; 0x54
    7d00:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    7d02:	ldrb	r3, [r1, #0]
    7d04:	tst.w	r3, #112	; 0x70
    7d08:	beq.n	7cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    7d0a:	ldrb	r3, [r2, #0]
    7d0c:	cmp	r3, #47	; 0x2f
    7d0e:	bne.n	7d26 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    7d10:	ldr	r2, [sp, #4]
    7d12:	ldrb	r3, [r2, #0]
    7d14:	cmp	r3, #47	; 0x2f
    7d16:	beq.n	7d62 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    7d18:	ldr	r1, [r4, #8]
    7d1a:	add	r0, sp, #44	; 0x2c
    7d1c:	bl	74b0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7d20:	cmp	r0, #0
    7d22:	beq.n	7cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7d24:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7d26:	add	r3, sp, #4
    7d28:	add	r2, sp, #8
    7d2a:	ldr	r1, [sp, #4]
    7d2c:	mov	r0, r6
    7d2e:	bl	8b34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7d32:	cmp	r0, #0
    7d34:	beq.n	7cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    7d36:	ldr	r3, [sp, #4]
    7d38:	ldrb	r3, [r3, #0]
    7d3a:	cbz	r3, 7d7c <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    7d3c:	movs	r3, #0
    7d3e:	add	r2, sp, #8
    7d40:	mov	r1, r4
    7d42:	mov	r0, r6
    7d44:	bl	88b0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7d48:	cbz	r0, 7d68 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    7d4a:	mov	r5, r6
    7d4c:	add	r4, sp, #44	; 0x2c
    7d4e:	ldmia	r5!, {r0, r1, r2, r3}
    7d50:	stmia	r4!, {r0, r1, r2, r3}
    7d52:	ldmia	r5!, {r0, r1, r2, r3}
    7d54:	stmia	r4!, {r0, r1, r2, r3}
    7d56:	ldr	r3, [r5, #0]
    close();
    7d58:	mov	r0, r6
    tmpDir = *this;
    7d5a:	str	r3, [r4, #0]
    close();
    7d5c:	bl	7ab8 <FatFile::close()>
  while (1) {
    7d60:	b.n	7d24 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    7d62:	adds	r2, #1
    7d64:	str	r2, [sp, #4]
    7d66:	b.n	7d10 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7d68:	cmp	r7, #0
    7d6a:	beq.n	7cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7d6c:	add	r2, sp, #8
    7d6e:	mov	r1, r4
    7d70:	mov	r0, r6
    7d72:	bl	7bea <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7d76:	cmp	r0, #0
    7d78:	bne.n	7d4a <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7d7a:	b.n	7cfc <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7d7c:	add	r2, sp, #8
    7d7e:	mov	r1, r4
    7d80:	mov	r0, r6
    7d82:	bl	7bea <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7d86:	b.n	7cfe <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007d88 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7d88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7d8c:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7d8e:	sub	sp, #108	; 0x6c
    7d90:	mov.w	r9, #0
    7d94:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7d96:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7d9a:	mov	r7, r1
    7d9c:	mov	r8, r2
    7d9e:	str.w	r9, [sp, #32]
    7da2:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7da6:	bne.n	7db0 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7da8:	movs	r0, #0
}
    7daa:	add	sp, #108	; 0x6c
    7dac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7db0:	ldr	r2, [r0, #8]
    7db2:	ldr	r3, [r1, #8]
    7db4:	cmp	r2, r3
    7db6:	bne.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7db8:	mov	r6, r4
  sync();
    7dba:	bl	7a38 <FatFile::sync()>
  oldFile = *this;
    7dbe:	add	r5, sp, #68	; 0x44
    7dc0:	ldmia	r6!, {r0, r1, r2, r3}
    7dc2:	stmia	r5!, {r0, r1, r2, r3}
    7dc4:	ldmia	r6!, {r0, r1, r2, r3}
    7dc6:	stmia	r5!, {r0, r1, r2, r3}
    7dc8:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7dca:	mov	r1, r9
    7dcc:	mov	r0, r4
  oldFile = *this;
    7dce:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7dd0:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7dd4:	cmp	r0, #0
    7dd6:	beq.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7dd8:	mov	r2, sp
    7dda:	mov	r3, r0
    7ddc:	add.w	ip, r0, #32
    7de0:	mov	r5, r2
    7de2:	ldr	r0, [r3, #0]
    7de4:	adds	r3, #8
    7de6:	ldr.w	r1, [r3, #-4]
    7dea:	mov	r6, r2
    7dec:	cmp	r3, ip
    7dee:	stmia	r6!, {r0, r1}
    7df0:	mov	r2, r6
    7df2:	bne.n	7de2 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7df4:	ldrb	r3, [r4, #0]
    7df6:	add	r6, sp, #32
    7df8:	ands.w	r3, r3, #8
    7dfc:	beq.n	7e14 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7dfe:	movw	r3, #2561	; 0xa01
    7e02:	mov	r2, r8
    7e04:	mov	r1, r7
    7e06:	mov	r0, r6
    7e08:	bl	7ac8 <FatFile::open(FatFile*, char const*, int)>
    7e0c:	cmp	r0, #0
    7e0e:	beq.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    7e10:	movs	r7, #0
    7e12:	b.n	7e24 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7e14:	mov	r2, r8
    7e16:	mov	r1, r7
    7e18:	mov	r0, r6
    7e1a:	bl	7ce4 <FatFile::mkdir(FatFile*, char const*, bool)>
    7e1e:	cmp	r0, #0
    7e20:	beq.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    7e22:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7e24:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7e26:	movs	r1, #1
    7e28:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    7e2a:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7e2c:	ldrh.w	r3, [sp, #36]	; 0x24
    7e30:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7e32:	ldrb.w	r3, [sp, #35]	; 0x23
    7e36:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7e38:	ldr	r3, [sp, #44]	; 0x2c
    7e3a:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7e3c:	movs	r3, #0
    7e3e:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    7e42:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7e46:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7e4a:	cmp	r0, #0
    7e4c:	beq.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7e4e:	add.w	r3, sp, #13
    7e52:	add.w	r2, r0, #13
    7e56:	add.w	r1, sp, #29
    7e5a:	ldr.w	ip, [r3], #4
    7e5e:	cmp	r3, r1
    7e60:	str.w	ip, [r2], #4
    7e64:	bne.n	7e5a <FatFile::rename(FatFile*, char const*)+0xd2>
    7e66:	ldrh	r1, [r3, #0]
    7e68:	strh	r1, [r2, #0]
    7e6a:	ldrb	r3, [r3, #2]
    7e6c:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7e6e:	ldrb.w	r3, [sp, #11]
    7e72:	strb	r3, [r0, #11]
  if (dirCluster) {
    7e74:	cmp	r7, #0
    7e76:	beq.n	7ef4 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7e78:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7e7a:	subs	r3, r7, #2
    7e7c:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7e7e:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7e80:	ldr.w	r1, [r0, #-20]
    7e84:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7e86:	movs	r2, #0
    7e88:	add	r1, r3
    7e8a:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7e8e:	cmp	r0, #0
    7e90:	beq.n	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    7e92:	add.w	r2, r0, #32
    7e96:	mov	lr, r5
    7e98:	add.w	r3, r0, #64	; 0x40
    7e9c:	ldr	r0, [r2, #0]
    7e9e:	adds	r2, #8
    7ea0:	ldr.w	r1, [r2, #-4]
    7ea4:	mov	ip, lr
    7ea6:	cmp	r2, r3
    7ea8:	stmia.w	ip!, {r0, r1}
    7eac:	mov	lr, ip
    7eae:	bne.n	7e9c <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7eb0:	mov	r1, r7
    7eb2:	ldr	r0, [r4, #8]
    7eb4:	bl	8336 <FatPartition::freeChain(unsigned long)>
    7eb8:	cmp	r0, #0
    7eba:	beq.w	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7ebe:	ldr	r0, [r4, #8]
    7ec0:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7ec2:	ldr	r1, [r4, #32]
    7ec4:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    7ec6:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7ec8:	subs	r1, #2
    7eca:	lsls	r1, r3
    7ecc:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7ed0:	add	r1, r3
    7ed2:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7ed6:	cmp	r0, #0
    7ed8:	beq.w	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7edc:	add.w	r3, r0, #32
    7ee0:	mov	r2, r5
    7ee2:	adds	r3, #8
    7ee4:	ldmia	r2!, {r0, r1}
    7ee6:	cmp	r2, r6
    7ee8:	str.w	r0, [r3, #-8]
    7eec:	str.w	r1, [r3, #-4]
    7ef0:	mov	r5, r2
    7ef2:	bne.n	7ee0 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    7ef4:	movs	r3, #0
  if (!oldFile.remove()) {
    7ef6:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    7ef8:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    7efa:	movs	r3, #2
    7efc:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    7f00:	movs	r3, #8
    7f02:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    7f06:	bl	8be0 <FatFile::remove()>
    7f0a:	cmp	r0, #0
    7f0c:	beq.w	7da8 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    7f10:	ldr	r0, [r4, #8]
    7f12:	bl	74e0 <FatPartition::cacheSync()>
    7f16:	b.n	7daa <FatFile::rename(FatFile*, char const*)+0x22>

00007f18 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    7f18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7f1c:	ldrb	r3, [r0, #2]
    7f1e:	mov	r4, r0
    7f20:	mov	r9, r1
    7f22:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    7f24:	lsls	r5, r3, #30
    7f26:	bpl.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7f28:	lsls	r1, r3, #28
    7f2a:	bmi.n	7f54 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    7f2c:	ldr	r3, [r4, #20]
    7f2e:	adds	r3, r3, r7
    7f30:	bcs.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
    7f32:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7f34:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7f38:	ldr	r3, [r4, #20]
  while (nToWrite) {
    7f3a:	cmp.w	r8, #0
    7f3e:	bne.n	7f6a <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    7f40:	ldr	r2, [r4, #28]
    7f42:	cmp	r2, r3
    7f44:	bcs.w	80a6 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    7f48:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7f4a:	ldrb	r3, [r4, #2]
    7f4c:	orn	r3, r3, #127	; 0x7f
    7f50:	strb	r3, [r4, #2]
    7f52:	b.n	80b0 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7f54:	ldr	r1, [r0, #28]
    7f56:	bl	77ee <FatFile::seekSet(unsigned long)>
    7f5a:	cmp	r0, #0
    7f5c:	bne.n	7f2c <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7f5e:	ldrb	r3, [r4, #1]
  return 0;
    7f60:	movs	r7, #0
  m_error |= WRITE_ERROR;
    7f62:	orr.w	r3, r3, #1
    7f66:	strb	r3, [r4, #1]
  return 0;
    7f68:	b.n	80b0 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7f6a:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7f6c:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    7f70:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    7f72:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7f74:	ands.w	r6, r6, r3, lsr #9
    7f78:	bne.n	7f90 <FatFile::write(void const*, unsigned int)+0x78>
    7f7a:	cbnz	r5, 7f90 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    7f7c:	cmp	r1, #0
    7f7e:	beq.n	7ff8 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    7f80:	ldrb	r2, [r4, #2]
    7f82:	lsls	r2, r2, #25
    7f84:	bpl.n	7fe0 <FatFile::write(void const*, unsigned int)+0xc8>
    7f86:	ldr	r2, [r4, #28]
    7f88:	cmp	r2, r3
    7f8a:	bls.n	7fe0 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7f8c:	adds	r1, #1
    7f8e:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7f90:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7f94:	ldr	r1, [r4, #16]
    7f96:	ldrb.w	r3, [ip, #6]
    7f9a:	subs	r1, #2
    7f9c:	lsls	r1, r3
    7f9e:	ldr.w	r3, [ip, #20]
    7fa2:	add	r1, r3
                      + sectorOfCluster;
    7fa4:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7fa6:	cmp	r5, #0
    7fa8:	bne.n	8010 <FatFile::write(void const*, unsigned int)+0xf8>
    7faa:	cmp.w	r8, #512	; 0x200
    7fae:	bcc.n	8010 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7fb0:	cmp.w	r8, #1024	; 0x400
    7fb4:	ldr.w	r2, [ip, #52]	; 0x34
    7fb8:	ldr.w	r0, [ip, #44]	; 0x2c
    7fbc:	bcs.n	8070 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7fbe:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7fc0:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7fc2:	ittt	eq
    7fc4:	moveq.w	r3, #4294967295
    m_status = 0;
    7fc8:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7fcc:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7fd0:	ldr	r3, [r0, #0]
    7fd2:	ldr	r3, [r3, #36]	; 0x24
    7fd4:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7fd6:	cmp	r0, #0
    7fd8:	beq.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    7fda:	mov.w	r6, #512	; 0x200
    7fde:	b.n	805a <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7fe0:	mov	r2, sl
    7fe2:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7fe6:	cmp	r0, #0
    7fe8:	blt.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    7fea:	bne.n	7f90 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7fec:	mov	r0, r4
    7fee:	bl	7506 <FatFile::addCluster()>
    7ff2:	cmp	r0, #0
    7ff4:	bne.n	7f90 <FatFile::write(void const*, unsigned int)+0x78>
    7ff6:	b.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    7ff8:	ldr	r3, [r4, #32]
    7ffa:	cbnz	r3, 800c <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7ffc:	mov	r0, r4
    7ffe:	bl	7506 <FatFile::addCluster()>
    8002:	cmp	r0, #0
    8004:	beq.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    8006:	ldr	r3, [r4, #16]
    8008:	str	r3, [r4, #32]
    800a:	b.n	7f90 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    800c:	str	r3, [r4, #16]
    800e:	b.n	7f90 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    8010:	rsb	r6, r5, #512	; 0x200
    8014:	cmp	r6, r8
    8016:	it	cs
    8018:	movcs	r6, r8
      if (sectorOffset == 0 &&
    801a:	cbnz	r5, 8068 <FatFile::write(void const*, unsigned int)+0x150>
    801c:	ldr	r2, [r4, #20]
    801e:	ldr	r3, [r4, #28]
    8020:	cmp	r2, r3
    8022:	bcs.n	806c <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    8024:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8026:	tst.w	r3, #32
    802a:	ite	eq
    802c:	moveq	r2, #1
    802e:	movne	r2, #5
    return m_cache.prepare(sector, options);
    8030:	add.w	r0, ip, #40	; 0x28
    8034:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8038:	cmp	r0, #0
    803a:	beq.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    803c:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    803e:	add	r5, r6
      memcpy(dst, src, n);
    8040:	mov	r2, r6
    8042:	mov	r1, r9
    8044:	bl	a79c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8048:	cmp.w	r5, #512	; 0x200
    804c:	ldr	r0, [r4, #8]
    804e:	bne.n	805a <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    8050:	adds	r0, #40	; 0x28
    8052:	bl	5b9c <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8056:	cmp	r0, #0
    8058:	beq.n	7f5e <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    805a:	ldr	r3, [r4, #20]
    src += n;
    805c:	add	r9, r6
    nToWrite -= n;
    805e:	sub.w	r8, r8, r6
    m_curPosition += n;
    8062:	add	r3, r6
    8064:	str	r3, [r4, #20]
    nToWrite -= n;
    8066:	b.n	7f38 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    8068:	movs	r2, #1
    806a:	b.n	8030 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    806c:	movs	r2, #5
    806e:	b.n	8030 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    8070:	ldrb.w	r3, [ip, #4]
    8074:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    8076:	mov.w	r6, r8, lsr #9
    807a:	cmp	r3, r6
    807c:	it	cs
    807e:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    8080:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    8082:	mov.w	r6, r3, lsl #9
    8086:	bhi.n	809c <FatFile::write(void const*, unsigned int)+0x184>
    8088:	add.w	lr, r1, r3
    808c:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    808e:	ittt	hi
    8090:	movhi.w	r2, #4294967295
    m_status = 0;
    8094:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8098:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    809c:	ldr	r2, [r0, #0]
    809e:	ldr	r5, [r2, #40]	; 0x28
    80a0:	mov	r2, r9
    80a2:	blx	r5
    80a4:	b.n	8056 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    80a6:	ldr	r3, [pc, #16]	; (80b8 <FatFile::write(void const*, unsigned int)+0x1a0>)
    80a8:	ldr	r3, [r3, #0]
    80aa:	cmp	r3, #0
    80ac:	bne.w	7f4a <FatFile::write(void const*, unsigned int)+0x32>
}
    80b0:	mov	r0, r7
    80b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80b6:	nop
    80b8:	.word	0x200207fc

000080bc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    80bc:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    80be:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    80c2:	push	{r4, r5, lr}
    80c4:	mov	r4, r3
    80c6:	it	cs
    80c8:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    80cc:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    80d0:	cmp	r1, r5
    80d2:	bcc.n	80da <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    80d4:	subs	r3, r3, r4
    80d6:	str	r3, [r2, #0]
}
    80d8:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    80da:	ldrh.w	r0, [r1], #2
    80de:	cmp	r0, #0
    80e0:	bne.n	80d0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    80e2:	ldr	r0, [r2, #4]
    80e4:	adds	r0, #1
    80e6:	str	r0, [r2, #4]
    80e8:	b.n	80d0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

000080ea <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    80ea:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    80ec:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    80ee:	push	{r4, r5, lr}
    80f0:	mov	r4, r3
    80f2:	it	cs
    80f4:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    80f6:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    80fa:	cmp	r1, r5
    80fc:	bcc.n	8104 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    80fe:	subs	r3, r3, r4
    8100:	str	r3, [r2, #0]
}
    8102:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    8104:	ldr.w	r0, [r1], #4
    8108:	cmp	r0, #0
    810a:	bne.n	80fa <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    810c:	ldr	r0, [r2, #4]
    810e:	adds	r0, #1
    8110:	str	r0, [r2, #4]
    8112:	b.n	80fa <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00008114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    8114:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    8116:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    811a:	cmp	r3, #2
    811c:	it	eq
    811e:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    8122:	b.w	5bea <FsCache::prepare(unsigned long, unsigned char)>

00008126 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    8126:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8128:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    812c:	mov	r6, r0
    812e:	mov	r4, r1
    8130:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    8132:	bhi.n	813c <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    8134:	mov.w	r0, #4294967295
}
    8138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    813c:	ldr	r3, [r0, #28]
    813e:	cmp	r3, r1
    8140:	bcc.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    8142:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    8144:	cmp	r3, #32
    8146:	bne.n	816e <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8148:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    814a:	movs	r2, #0
    814c:	add.w	r1, r1, r4, lsr #7
    8150:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8154:	cmp	r0, #0
    8156:	beq.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    8158:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    815a:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    815e:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    8160:	ldr	r2, [r6, #28]
    8162:	cmp	r2, r3
  return 1;
    8164:	itet	cs
    8166:	movcs	r0, #1
    return 0;
    8168:	movcc	r0, #0
  *value = next;
    816a:	strcs	r3, [r7, #0]
  return 1;
    816c:	b.n	8138 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    816e:	cmp	r3, #16
    8170:	bne.n	818e <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    8172:	ubfx	r1, r1, #8, #8
    8176:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    8178:	movs	r2, #0
    817a:	add	r1, r3
    817c:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8180:	cmp	r0, #0
    8182:	beq.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    8184:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    8186:	and.w	r4, r4, #510	; 0x1fe
    818a:	ldrh	r3, [r0, r4]
    818c:	b.n	8160 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    818e:	cmp	r3, #12
    8190:	bne.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    8192:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8196:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    8198:	movs	r2, #0
    index += index >> 1;
    819a:	uxtah	r8, r8, r1
    819e:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    81a2:	ubfx	r8, r8, #9, #7
    81a6:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    81a8:	mov	r1, r8
    81aa:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    81ae:	cmp	r0, #0
    81b0:	beq.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    81b2:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    81b6:	ldrb	r5, [r0, r3]
    index++;
    81b8:	adds	r3, #1
    if (index == m_bytesPerSector) {
    81ba:	cmp.w	r3, #512	; 0x200
    81be:	bne.n	81d2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    81c0:	movs	r2, #0
    81c2:	add.w	r1, r8, #1
    81c6:	mov	r0, r6
    81c8:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    81cc:	cmp	r0, #0
    81ce:	beq.n	8134 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    81d0:	movs	r3, #0
    tmp |= pc[index] << 8;
    81d2:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    81d4:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    81d6:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    81da:	ite	mi
    81dc:	lsrmi	r3, r3, #4
    81de:	ubfxpl	r3, r3, #0, #12
    81e2:	b.n	8160 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

000081e4 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    81e4:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    81e6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ea:	mov	r8, r0
    81ec:	mov	r4, r1
    81ee:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    81f0:	bhi.n	81f8 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    81f2:	movs	r0, #0
}
    81f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    81f8:	ldr	r3, [r0, #28]
    81fa:	cmp	r3, r1
    81fc:	bcc.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    81fe:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    8200:	cmp	r3, #32
    8202:	bne.n	8220 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8204:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    8206:	movs	r2, #1
    8208:	add.w	r1, r1, r4, lsr #7
    820c:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8210:	cmp	r0, #0
    8212:	beq.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    8214:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    8216:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    821a:	str	r5, [r0, r4]
    return true;
    821c:	movs	r0, #1
    821e:	b.n	81f4 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    8220:	cmp	r3, #16
    8222:	bne.n	8240 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    8224:	ubfx	r1, r1, #8, #8
    8228:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    822a:	movs	r2, #1
    822c:	add	r1, r3
    822e:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8232:	cmp	r0, #0
    8234:	beq.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    8236:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    8238:	and.w	r4, r4, #510	; 0x1fe
    823c:	strh	r5, [r0, r4]
    return true;
    823e:	b.n	821c <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    8240:	cmp	r3, #12
    8242:	bne.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    8244:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8248:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    824a:	movs	r2, #1
    index += index >> 1;
    824c:	uxtah	r7, r7, r1
    8250:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8252:	ubfx	r7, r7, #9, #7
    8256:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    8258:	mov	r1, r7
    825a:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    825e:	cmp	r0, #0
    8260:	beq.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    8262:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    8266:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    826a:	itt	ne
    826c:	lslne	r2, r5, #4
    826e:	ldrbne	r1, [r0, r3]
    8270:	add.w	r6, r0, r3
    index++;
    8274:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    8278:	ittet	ne
    827a:	andne.w	r2, r2, #240	; 0xf0
    827e:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    8282:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    8284:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    8286:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    828a:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    828c:	bne.n	829e <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    828e:	movs	r2, #1
    8290:	mov	r0, r8
    8292:	adds	r1, r7, r2
    8294:	bl	8114 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    8298:	cmp	r0, #0
    829a:	beq.n	81f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    829c:	movs	r3, #0
    tmp = value >> 4;
    829e:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    82a2:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    82a4:	cbnz	r4, 82b0 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    82a6:	ldrb	r3, [r0, r3]
    82a8:	bic.w	r3, r3, #15
    82ac:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    82b0:	strb	r5, [r2, #0]
    82b2:	b.n	821c <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

000082b4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    82b4:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    82b8:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    82ba:	mov	r5, r0
    82bc:	mov	r6, r1
    82be:	mov	r8, r2
  if (m_allocSearchStart < current) {
    82c0:	cmp	r4, r1
    82c2:	bcc.n	82c8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    82c4:	movs	r7, #1
    82c6:	b.n	82cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    82c8:	mov	r4, r1
    setStart = false;
    82ca:	movs	r7, #0
    find++;
    82cc:	adds	r4, #1
    if (find > m_lastCluster) {
    82ce:	ldr	r3, [r5, #28]
    82d0:	cmp	r3, r4
    82d2:	bcs.n	82da <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    82d4:	cbnz	r7, 8308 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    82d6:	ldr	r4, [r5, #12]
    82d8:	b.n	82c4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    82da:	cmp	r6, r4
    82dc:	beq.n	8308 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    82de:	add	r2, sp, #4
    82e0:	mov	r1, r4
    82e2:	mov	r0, r5
    82e4:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    82e8:	cmp	r0, #0
    82ea:	blt.n	8308 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    82ec:	beq.n	82cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    82ee:	ldr	r3, [sp, #4]
    82f0:	cmp	r3, #0
    82f2:	bne.n	82cc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    82f4:	cbz	r7, 82f8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    82f6:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    82f8:	mvn.w	r2, #4026531840	; 0xf0000000
    82fc:	mov	r1, r4
    82fe:	mov	r0, r5
    8300:	bl	81e4 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    8304:	mov	r7, r0
    8306:	cbnz	r0, 8312 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    8308:	movs	r7, #0
}
    830a:	mov	r0, r7
    830c:	add	sp, #8
    830e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    8312:	cbnz	r6, 8320 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    8314:	ldr	r3, [r5, #36]	; 0x24
    8316:	cmp	r3, #0
    8318:	bge.n	8330 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    831a:	str.w	r4, [r8]
  return true;
    831e:	b.n	830a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    8320:	mov	r2, r4
    8322:	mov	r1, r6
    8324:	mov	r0, r5
    8326:	bl	81e4 <FatPartition::fatPut(unsigned long, unsigned long)>
    832a:	cmp	r0, #0
    832c:	bne.n	8314 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    832e:	b.n	8308 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    8330:	subs	r3, #1
    8332:	str	r3, [r5, #36]	; 0x24
    8334:	b.n	831a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00008336 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    8336:	push	{r0, r1, r4, r5, r6, lr}
    8338:	mov	r5, r0
    833a:	mov	r4, r1
    fg = fatGet(cluster, &next);
    833c:	add	r2, sp, #4
    833e:	mov	r1, r4
    8340:	mov	r0, r5
    8342:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8346:	subs	r6, r0, #0
    8348:	blt.n	8376 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    834a:	movs	r2, #0
    834c:	mov	r1, r4
    834e:	mov	r0, r5
    8350:	bl	81e4 <FatPartition::fatPut(unsigned long, unsigned long)>
    8354:	cbz	r0, 8376 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    8356:	ldr	r3, [r5, #36]	; 0x24
    8358:	cmp	r3, #0
      m_freeClusterCount += change;
    835a:	itt	ge
    835c:	addge	r3, #1
    835e:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    8360:	ldr	r3, [r5, #12]
    8362:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    8364:	itt	hi
    8366:	addhi.w	r4, r4, #4294967295
    836a:	strhi	r4, [r5, #12]
    cluster = next;
    836c:	ldr	r4, [sp, #4]
  } while (fg);
    836e:	cmp	r6, #0
    8370:	bne.n	833c <FatPartition::freeChain(unsigned long)+0x6>
}
    8372:	add	sp, #8
    8374:	pop	{r4, r5, r6, pc}
  return false;
    8376:	movs	r0, #0
    8378:	b.n	8372 <FatPartition::freeChain(unsigned long)+0x3c>
	...

0000837c <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    837c:	push	{r4, r5, r6, r7, lr}
    837e:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    8380:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    8382:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    8384:	cmp	r0, #0
    8386:	bge.n	83fa <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    8388:	ldrb	r3, [r4, #7]
    838a:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    838c:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    838e:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    8390:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    8394:	beq.n	83fe <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    8396:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    839a:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    839c:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    839e:	strd	r6, r5, [sp, #16]
    83a2:	bmi.n	8402 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    83a4:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    83a6:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    83a8:	ldr	r0, [r4, #0]
    83aa:	add	r6, sp, #16
    83ac:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    83b0:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    83b2:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    83b6:	ldr	r1, [r4, #24]
    83b8:	ldr	r5, [r0, #0]
    83ba:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    83be:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    83c2:	bne.n	8414 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    83c4:	str	r6, [sp, #4]
    83c6:	ldr	r6, [pc, #84]	; (841c <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    83c8:	str	r6, [sp, #0]
    83ca:	ldr	r5, [r5, #24]
    83cc:	blx	r5
    83ce:	cbz	r0, 83e4 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    83d0:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    83d2:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    83d4:	b.n	83fa <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    83d6:	add	r2, sp, #16
    83d8:	mov	r1, r7
    83da:	mov	r0, r4
    83dc:	bl	8126 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    83e0:	cmp	r0, #0
    83e2:	bge.n	83ea <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    83e4:	mov.w	r0, #4294967295
    83e8:	b.n	83fa <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    83ea:	beq.n	83f2 <FatPartition::freeClusterCount()+0x76>
    83ec:	ldr	r3, [sp, #16]
    83ee:	cbnz	r3, 83f2 <FatPartition::freeClusterCount()+0x76>
        free++;
    83f0:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    83f2:	adds	r7, #1
    83f4:	cmp	r7, r6
    83f6:	bcc.n	83d6 <FatPartition::freeClusterCount()+0x5a>
    return free;
    83f8:	mov	r0, r5
}
    83fa:	add	sp, #28
    83fc:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    83fe:	movs	r7, #2
    8400:	b.n	83f4 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    8402:	add.w	r0, r4, #568	; 0x238
    8406:	str	r3, [sp, #12]
    8408:	bl	5b9c <FsCache::sync()>
    840c:	ldr	r3, [sp, #12]
    840e:	cmp	r0, #0
    8410:	bne.n	83a4 <FatPartition::freeClusterCount()+0x28>
    8412:	b.n	83e4 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    8414:	str	r6, [sp, #4]
    8416:	ldr	r6, [pc, #8]	; (8420 <FatPartition::freeClusterCount()+0xa4>)
    8418:	b.n	83c8 <FatPartition::freeClusterCount()+0x4c>
    841a:	nop
    841c:	.word	0x000080eb
    8420:	.word	0x000080bd

00008424 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8424:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    8426:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8428:	mov	r4, r0
  m_blockDev = dev;
    842a:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    842c:	mov	r5, r2
  m_fatType = 0;
    842e:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    8430:	movs	r0, #1
  m_cache.init(dev);
    8432:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    8436:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    8438:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    843a:	mov.w	r0, #4294967295
    m_status = 0;
    843e:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8442:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    8444:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    8448:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    844c:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    8450:	cbz	r2, 8486 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    8452:	cmp	r2, #4
    8454:	bls.n	845a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    8456:	movs	r0, #0
}
    8458:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    845a:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    845e:	mov	r2, r3
    8460:	mov	r1, r3
    8462:	mov	r0, r6
    8464:	subs	r5, #1
    8466:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
    846a:	add.w	r3, r0, #446	; 0x1be
    846e:	lsls	r2, r5, #4
    8470:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    8474:	cmp	r0, #0
    8476:	beq.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    8478:	ldrb	r1, [r5, #4]
    847a:	cmp	r1, #0
    847c:	beq.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    847e:	ldrb	r3, [r3, r2]
    8480:	lsls	r3, r3, #25
    8482:	bne.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    8484:	ldr	r5, [r5, #8]
    8486:	movs	r2, #0
    8488:	mov	r1, r5
    848a:	mov	r0, r6
    848c:	bl	5bea <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    8490:	cmp	r0, #0
    8492:	beq.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    8494:	ldrh.w	r3, [r0, #11]
    8498:	cmp.w	r3, #512	; 0x200
    849c:	bne.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    849e:	ldrb	r3, [r0, #16]
    84a0:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    84a2:	subs	r3, #1
    84a4:	cmp	r3, #1
    84a6:	bhi.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    84a8:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    84aa:	movs	r6, #9
    84ac:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    84ae:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    84b0:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    84b2:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    84b4:	movs	r3, #1
    84b6:	cmp	r1, r3
    84b8:	bne.n	8522 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    84ba:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    84bc:	ldrh	r3, [r0, #22]
    84be:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    84c0:	cbnz	r3, 84c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    84c2:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    84c4:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    84c6:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    84c8:	ldrh.w	r1, [r0, #17]
    84cc:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    84ce:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    84d0:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    84d2:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    84d4:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    84d6:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    84d8:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    84dc:	mla	r3, r6, r7, r3
    84e0:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    84e2:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    84e6:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    84ea:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    84ec:	cbnz	r1, 84f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    84ee:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    84f0:	subs	r5, r5, r3
    84f2:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    84f4:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    84f6:	adds	r3, r5, #1
    84f8:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    84fa:	mov.w	r3, #4294967295
    84fe:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    8500:	movw	r3, #4084	; 0xff4
    8504:	cmp	r5, r3
    8506:	bls.n	8534 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    8508:	movw	r3, #65524	; 0xfff4
    850c:	cmp	r5, r3
    850e:	bls.n	8538 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    8510:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    8512:	str	r3, [r4, #32]
    8514:	movs	r3, #32
  return true;
    8516:	movs	r0, #1
    m_fatType = 12;
    8518:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    851a:	str	r6, [r4, #48]	; 0x30
    851c:	str.w	r6, [r4, #576]	; 0x240
  return true;
    8520:	b.n	8458 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    8522:	subs	r6, #1
    8524:	bne.n	852a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    8526:	strb	r2, [r4, #6]
    8528:	b.n	8456 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    852a:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    852c:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    852e:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8530:	uxtb	r3, r3
    8532:	b.n	84b6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    8534:	movs	r3, #12
    8536:	b.n	8516 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    8538:	movs	r3, #16
    853a:	b.n	8516 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

0000853c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    853c:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    853e:	add.w	r4, r0, #1096	; 0x448
    8542:	sub	sp, #40	; 0x28
  FatFile() {}
    8544:	movs	r3, #0
    8546:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    8548:	add	r0, sp, #4
    854a:	mov	r1, r4
    854c:	str	r3, [sp, #4]
    854e:	bl	7ac8 <FatFile::open(FatFile*, char const*, int)>
    8552:	mov	r6, r0
    8554:	cbz	r0, 8572 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    8556:	ldrb.w	r3, [sp, #4]
    855a:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    855e:	itett	ne
    8560:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    8562:	moveq	r6, r3
  m_vwd = dir;
    8564:	ldmiane	r5!, {r0, r1, r2, r3}
    8566:	stmiane	r4!, {r0, r1, r2, r3}
    8568:	itttt	ne
    856a:	ldmiane	r5!, {r0, r1, r2, r3}
    856c:	stmiane	r4!, {r0, r1, r2, r3}
    856e:	ldrne	r3, [r5, #0]
    8570:	strne	r3, [r4, #0]
}
    8572:	mov	r0, r6
    8574:	add	sp, #40	; 0x28
    8576:	pop	{r4, r5, r6, pc}

00008578 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    8578:	subs	r1, r0, #1
    857a:	add.w	r3, r0, #10
    uint8_t sum = 0;
    857e:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8580:	lsls	r2, r0, #7
    8582:	orr.w	r2, r2, r0, lsr #1
    8586:	ldrb.w	r0, [r1, #1]!
    858a:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    858e:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8590:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    8592:	bne.n	8580 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    8594:	bx	lr

00008596 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8596:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    859a:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    859c:	sub	sp, #52	; 0x34
    859e:	mov	r6, r2
    85a0:	mov	r7, r0
    85a2:	mov	r9, r1
    85a4:	mov	r8, r3
  FatFile dir = *this;
    85a6:	add	r4, sp, #12
    85a8:	ldmia	r5!, {r0, r1, r2, r3}
    85aa:	stmia	r4!, {r0, r1, r2, r3}
    85ac:	ldmia	r5!, {r0, r1, r2, r3}
    85ae:	stmia	r4!, {r0, r1, r2, r3}
    85b0:	ldr	r3, [r5, #0]
    85b2:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    85b4:	movs	r4, #1
    next = begin;
    85b6:	ldr	r3, [r6, #0]
    85b8:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    85ba:	movs	r3, #0
    85bc:	strh	r3, [r6, #12]
    85be:	cmp	r4, r8
    85c0:	bls.n	85c6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    85c2:	movs	r0, #1
    85c4:	b.n	85d8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    85c6:	sub.w	r1, r9, r4
    85ca:	add	r0, sp, #12
    85cc:	uxth	r1, r1
    85ce:	bl	72fc <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    85d2:	mov	sl, r0
    85d4:	cbnz	r0, 85de <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    85d6:	movs	r0, #0
}
    85d8:	add	sp, #52	; 0x34
    85da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    85de:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    85e0:	uxtb	r2, r5
    85e2:	mov	r1, sl
    85e4:	mov	r0, r7
    85e6:	bl	7316 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    85ea:	ldrh	r3, [r6, #12]
    85ec:	mov	fp, r0
    85ee:	cbnz	r3, 8600 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    85f0:	ldrd	r2, r3, [r6, #4]
    85f4:	cmp	r2, r3
    85f6:	bne.n	8600 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    85f8:	clz	r0, r0
    85fc:	lsrs	r0, r0, #5
    85fe:	b.n	85d8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    8600:	mov	r0, r6
    8602:	bl	5ce0 <FsName::get16()>
    8606:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    8608:	mov	r0, fp
    860a:	bl	5c38 <toUpcase(unsigned short)>
    860e:	ldr	r3, [sp, #4]
    8610:	mov	fp, r0
    8612:	mov	r0, r3
    8614:	bl	5c38 <toUpcase(unsigned short)>
    8618:	cmp	fp, r0
    861a:	bne.n	85d6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    861c:	adds	r5, #1
    861e:	cmp	r5, #13
    8620:	bne.n	85e0 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8622:	adds	r4, #1
    8624:	uxtb	r4, r4
    8626:	b.n	85be <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00008628 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8628:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    862c:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    862e:	sub	sp, #52	; 0x34
    8630:	mov	r4, r2
    8632:	mov	r9, r1
    8634:	mov	r7, r3
  FatFile dir = *this;
    8636:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8638:	mov.w	sl, #15
  FatFile dir = *this;
    863c:	ldmia	r5!, {r0, r1, r2, r3}
    863e:	stmia	r6!, {r0, r1, r2, r3}
    8640:	ldmia	r5!, {r0, r1, r2, r3}
    8642:	stmia	r6!, {r0, r1, r2, r3}
    8644:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    8646:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    864a:	movs	r5, #1
  FatFile dir = *this;
    864c:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    864e:	bl	8578 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    8652:	movs	r6, #0
    next = begin;
    8654:	ldr	r3, [r4, #0]
    8656:	mov	r8, r0
    8658:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    865a:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    865c:	cmp	r5, r7
    865e:	bls.n	8668 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8660:	movs	r0, #1

 fail:
  return false;
}
    8662:	add	sp, #52	; 0x34
    8664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8668:	sub.w	r1, r9, r5
    866c:	add	r0, sp, #12
    866e:	uxth	r1, r1
    8670:	bl	72fc <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8674:	cmp	r0, #0
    8676:	beq.n	8662 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    8678:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    867a:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    867c:	mov.w	r1, #0
    8680:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    8684:	ldrb.w	r3, [r2, #40]	; 0x28
    8688:	orr.w	r3, r3, #1
    868c:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8690:	ite	eq
    8692:	orreq.w	r3, r5, #64	; 0x40
    8696:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8698:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    869c:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    869e:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    86a0:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    86a4:	strh	r1, [r0, #26]
    return !ls && next == end;
    86a6:	ldrh	r0, [r4, #12]
    86a8:	cbnz	r0, 86d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    86aa:	ldrd	r2, r3, [r4, #4]
    86ae:	cmp	r2, r3
    86b0:	bne.n	86d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    86b2:	cbz	r6, 86e2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    86b4:	adds	r6, #1
    86b6:	movw	r0, #65535	; 0xffff
    86ba:	uxtb	r6, r6
  if (i < 5) {
    86bc:	cmp	r1, #4
    86be:	uxtb	r3, r1
    86c0:	bhi.n	86e6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    86c2:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    86c6:	adds	r1, #1
    86c8:	add.w	fp, fp, #2
    86cc:	cmp	r1, #13
    86ce:	bne.n	86a6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    86d0:	adds	r5, #1
    86d2:	uxtb	r5, r5
    86d4:	b.n	865c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    86d6:	mov	r0, r4
    86d8:	str	r1, [sp, #4]
    86da:	bl	5ce0 <FsName::get16()>
    86de:	ldr	r1, [sp, #4]
    86e0:	b.n	86bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    86e2:	movs	r6, #1
    86e4:	b.n	86bc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    86e6:	cmp	r3, #10
    86e8:	ite	ls
    86ea:	strhls.w	r0, [fp, #3]
    86ee:	strhhi.w	r0, [fp, #5]
}
    86f2:	b.n	86c6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

000086f4 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    86f4:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    86f6:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    86fa:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    86fe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    8702:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    8704:	mov	r5, r0
    fname->sfn[k] = ' ';
    8706:	str.w	r1, [r0, #22]
    870a:	str	r1, [r2, #4]
    870c:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8710:	ldrb	r0, [r3, #0]
    8712:	subs	r0, #46	; 0x2e
    8714:	it	ne
    8716:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8718:	mov	r7, r3
    871a:	ldrb.w	r2, [r3], #1
    871e:	cmp	r2, #46	; 0x2e
    8720:	beq.n	8718 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8722:	subs	r3, r6, #1
    8724:	cmp	r3, r7
    8726:	mov	lr, r3
    8728:	bls.n	8732 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    872a:	ldrb.w	r2, [r3], #-1
    872e:	cmp	r2, #46	; 0x2e
    8730:	bne.n	8724 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8732:	movs	r2, #0
    8734:	mov.w	ip, #7
    8738:	mov.w	r9, #8
    873c:	mov	r1, r2
    873e:	mov	r8, r2
    8740:	b.n	8758 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    8742:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    8744:	cmp	r3, #46	; 0x2e
    8746:	bne.n	8774 <FatFile::makeSFN(FatLfn_t*)+0x80>
    8748:	cmp	lr, r7
    874a:	bne.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    874c:	mov.w	ip, #10
      i = 8;    // Place for extension.
    8750:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8752:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8756:	adds	r7, #1
    8758:	cmp	r7, r6
    875a:	bcc.n	8742 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    875c:	ldrb	r3, [r5, #22]
    875e:	cmp	r3, #32
    8760:	beq.n	8814 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    8762:	cmp	r0, #0
    8764:	beq.n	8800 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    8766:	tst.w	r8, r2
    876a:	it	ne
    876c:	movne	r2, #2
    876e:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    8770:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    8774:	cmp	r3, #34	; 0x22
    8776:	beq.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    8778:	cmp	r3, #124	; 0x7c
    877a:	beq.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    877c:	sub.w	r4, r3, #91	; 0x5b
    8780:	cmp	r4, #2
    8782:	bls.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    8784:	sub.w	r4, r3, #42	; 0x2a
    8788:	cmp	r4, #5
    878a:	bhi.n	879a <FatFile::makeSFN(FatLfn_t*)+0xa6>
    878c:	cmp	r3, #45	; 0x2d
    878e:	beq.n	87b6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    8790:	cmp	r1, ip
    8792:	bhi.n	87ba <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    8794:	movs	r0, #0
        c = '_';
    8796:	movs	r3, #95	; 0x5f
    8798:	b.n	87dc <FatFile::makeSFN(FatLfn_t*)+0xe8>
    879a:	sub.w	r4, r3, #58	; 0x3a
    879e:	cmp	r4, #5
    87a0:	bls.n	87aa <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    87a2:	sub.w	r4, r3, #33	; 0x21
    87a6:	cmp	r4, #93	; 0x5d
    87a8:	bls.n	87b6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    87aa:	and.w	r3, r3, #192	; 0xc0
    87ae:	cmp	r3, #128	; 0x80
    87b0:	bne.n	8790 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    87b2:	movs	r0, #0
    87b4:	b.n	8756 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    87b6:	cmp	r1, ip
    87b8:	bls.n	87ca <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    87ba:	cmp.w	ip, #10
    87be:	beq.n	87fc <FatFile::makeSFN(FatLfn_t*)+0x108>
    87c0:	cmp	lr, r7
    87c2:	bcc.n	87fc <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    87c4:	add.w	r7, lr, #4294967295
        continue;
    87c8:	b.n	87b2 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    87ca:	sub.w	r4, r3, #97	; 0x61
    87ce:	cmp	r4, #25
    87d0:	bhi.n	87ee <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    87d2:	subs	r3, #32
        lc |= bit;
    87d4:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    87d8:	uxtb	r3, r3
        lc |= bit;
    87da:	uxtb	r2, r2
      fname->sfn[i++] = c;
    87dc:	adds	r4, r1, #1
    87de:	add	r1, r5
    87e0:	uxtb	r4, r4
    87e2:	strb	r3, [r1, #22]
      if (i < 7) {
    87e4:	cmp	r4, #6
    87e6:	bhi.n	87ea <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    87e8:	strb	r4, [r5, #20]
    87ea:	mov	r1, r4
    87ec:	b.n	8756 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    87ee:	sub.w	r4, r3, #65	; 0x41
    87f2:	cmp	r4, #25
        uc |= bit;
    87f4:	it	ls
    87f6:	orrls.w	r8, r9, r8
    87fa:	b.n	87dc <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    87fc:	movs	r0, #0
    87fe:	b.n	875c <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    8800:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8802:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    8804:	movs	r1, #126	; 0x7e
    8806:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8808:	strb	r2, [r5, #21]
  return true;
    880a:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    880c:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    880e:	movs	r1, #49	; 0x31
    8810:	strb	r1, [r3, #23]
    8812:	b.n	8770 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    8814:	movs	r0, #0
    8816:	b.n	8770 <FatFile::makeSFN(FatLfn_t*)+0x7c>

00008818 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8818:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    881c:	mov	r7, r0
    881e:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8820:	ldrb	r6, [r1, #20]
    8822:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8824:	mov.w	sl, #0
    8828:	ldr.w	r8, [pc, #128]	; 88ac <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    882c:	add.w	r9, r1, #22
    8830:	ldr.w	r3, [r8]
    8834:	cmp	r6, #3
    hex += millis();
    8836:	add	r3, sl
    8838:	it	cs
    883a:	movcs	r6, #3
    883c:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8840:	adds	r3, r6, #4
    8842:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8844:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8848:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    884a:	subs	r3, #1
      hex >>= 4;
    884c:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8850:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8852:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8854:	ite	ls
    8856:	addls	r2, #48	; 0x30
    8858:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    885a:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    885c:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    885e:	bne.n	8844 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    8860:	adds	r3, r5, r6
    8862:	movs	r2, #126	; 0x7e
    seekSet(0);
    8864:	movs	r1, #0
    8866:	mov	r0, r7
    8868:	strb	r2, [r3, #22]
    886a:	bl	77ee <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    886e:	movs	r1, #1
    8870:	mov	r0, r7
    8872:	bl	77b0 <FatFile::readDirCache(bool)>
      if (!dir) {
    8876:	mov	r1, r0
    8878:	cbnz	r0, 8886 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    887a:	ldrb	r0, [r7, #1]
    887c:	clz	r0, r0
    8880:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    8882:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    8886:	ldrb	r3, [r0, #0]
    8888:	cbz	r3, 88a8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    888a:	ldrb	r3, [r0, #11]
    888c:	lsls	r3, r3, #28
    888e:	bmi.n	886e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    8890:	movs	r2, #11
    8892:	mov	r0, r9
    8894:	bl	f05c <memcmp>
    8898:	cmp	r0, #0
    889a:	bne.n	886e <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    889c:	subs	r0, r4, #1
    889e:	ands.w	r4, r0, #255	; 0xff
    88a2:	bne.n	8830 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    88a4:	mov	r0, r4
 fail:
    88a6:	b.n	8882 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    88a8:	movs	r0, #1
    88aa:	b.n	8882 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    88ac:	.word	0x20021380

000088b0 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    88b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88b4:	vpush	{d8}
    88b8:	sub	sp, #44	; 0x2c
    88ba:	mov	r5, r1
    88bc:	mov	r7, r2
    88be:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    88c0:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    88c2:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    88c4:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    88c6:	ldrb	r3, [r1, #0]
    88c8:	tst.w	r3, #112	; 0x70
    88cc:	bne.n	88da <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    88ce:	movs	r0, #0
}
    88d0:	add	sp, #44	; 0x2c
    88d2:	vpop	{d8}
    88d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    88da:	ldr	r3, [sp, #28]
    88dc:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    88de:	cmp	r3, #0
    88e0:	bne.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    88e2:	ldr	r3, [r2, #16]
    88e4:	movs	r2, #13
    seekSet(0);
    88e6:	movs	r1, #0
    88e8:	mov	r0, r5
    88ea:	adds	r3, #12
  uint8_t checksum = 0;
    88ec:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    88f0:	udiv	r3, r3, r2
    88f4:	uxtb	r3, r3
  uint8_t order = 0;
    88f6:	mov	r8, sl
  uint8_t freeFound = 0;
    88f8:	mov	r4, sl
  bool fnameFound = false;
    88fa:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    88fc:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    88fe:	ldrb	r3, [r7, #21]
    8900:	lsls	r2, r3, #30
    8902:	itett	ne
    8904:	ldrne	r3, [sp, #24]
    8906:	moveq	r3, #1
    8908:	addne.w	r9, r3, #1
    890c:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    8910:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8912:	str	r3, [sp, #8]
    8914:	bl	77ee <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8918:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    891c:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8920:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8924:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    8926:	movs	r1, #0
    8928:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    892a:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    892e:	bl	77b0 <FatFile::readDirCache(bool)>
    if (!dir) {
    8932:	cmp	r0, #0
    8934:	bne.n	89fa <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    8936:	ldrb	r3, [r5, #1]
    8938:	cmp	r3, #0
    893a:	bne.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    893c:	ldr	r3, [sp, #16]
    893e:	lsls	r2, r3, #22
    8940:	bpl.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8942:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8946:	subs	r3, #1
    8948:	cmp	r3, #1
    894a:	bhi.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    894c:	ldr	r3, [sp, #12]
    894e:	cmp	r4, #0
    8950:	it	eq
    8952:	moveq	r3, r6
    8954:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    8956:	ldr	r3, [sp, #8]
    8958:	cmp	r4, r3
    895a:	bcc.w	8ade <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    895e:	cmp.w	fp, #0
    8962:	bne.w	8b14 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    8966:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8968:	mov	r2, r7
    896a:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    896c:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    896e:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    8970:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    8974:	uxtab	r6, r3, r6
    8978:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    897a:	mov	r3, fp
    897c:	mov	r1, r6
    897e:	bl	8628 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8982:	cmp	r0, #0
    8984:	beq.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    8986:	mov	r1, r6
    8988:	mov	r0, r5
    898a:	bl	72fc <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    898e:	mov	r4, r0
    8990:	cmp	r0, #0
    8992:	beq.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    8994:	movs	r2, #32
    8996:	movs	r1, #0
    8998:	bl	a758 <memset>
  memcpy(dir->name, fname->sfn, 11);
    899c:	ldr.w	r3, [r7, #22]
    89a0:	str	r3, [r4, #0]
    89a2:	ldr.w	r3, [r7, #26]
    89a6:	str	r3, [r4, #4]
    89a8:	ldrh	r3, [r7, #30]
    89aa:	strh	r3, [r4, #8]
    89ac:	ldrb.w	r3, [r7, #32]
    89b0:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    89b2:	ldrb	r3, [r7, #21]
    89b4:	and.w	r3, r3, #24
    89b8:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    89ba:	ldr	r3, [pc, #372]	; (8b30 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    89bc:	ldr	r3, [r3, #0]
    89be:	cmp	r3, #0
    89c0:	beq.w	8b24 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    89c4:	add.w	r2, sp, #35	; 0x23
    89c8:	add.w	r1, sp, #38	; 0x26
    89cc:	add	r0, sp, #36	; 0x24
    89ce:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    89d0:	ldrh.w	r3, [sp, #36]	; 0x24
    89d4:	strh	r3, [r4, #16]
    89d6:	ldrh.w	r3, [sp, #38]	; 0x26
    89da:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    89dc:	ldrb.w	r3, [sp, #35]	; 0x23
    89e0:	strb	r3, [r4, #13]
    89e2:	ldr	r3, [sp, #20]
    89e4:	ldr	r2, [sp, #20]
    89e6:	ldrb.w	r3, [r3, #40]	; 0x28
    89ea:	orr.w	r3, r3, #1
    89ee:	strb.w	r3, [r2, #40]	; 0x28
  }
    89f2:	b.n	8acc <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    89f4:	mov.w	fp, #1
    89f8:	b.n	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    89fa:	ldrb	r2, [r0, #0]
    89fc:	cmp	r2, #229	; 0xe5
    89fe:	beq.n	8a02 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    8a00:	cbnz	r2, 8a24 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8a02:	ldr	r3, [sp, #12]
    8a04:	cmp	r4, #0
    8a06:	it	eq
    8a08:	moveq	r3, r6
    8a0a:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    8a0c:	ldr	r3, [sp, #8]
    8a0e:	cmp	r4, r3
        freeFound++;
    8a10:	itt	cc
    8a12:	addcc	r4, #1
    8a14:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8a16:	cmp	r2, #0
    8a18:	beq.n	893c <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8a1a:	cmp	r2, #229	; 0xe5
    8a1c:	bne.n	8a2c <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    8a1e:	mov.w	r9, #0
    8a22:	b.n	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    8a24:	ldr	r3, [sp, #8]
    8a26:	cmp	r4, r3
    8a28:	it	cc
    8a2a:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8a2c:	cmp	r2, #46	; 0x2e
    8a2e:	beq.n	8a1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8a30:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    8a32:	cmp	r1, #15
    8a34:	bne.n	8a8a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    8a36:	cmp.w	r9, #0
    8a3a:	bne.n	8a76 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    8a3c:	and.w	r8, r2, #31
        if (order != nameOrd ||
    8a40:	ldr	r3, [sp, #24]
    8a42:	cmp	r3, r8
    8a44:	bne.w	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    8a48:	ands.w	r9, r2, #64	; 0x40
    8a4c:	beq.w	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    8a50:	ldrb.w	sl, [r0, #13]
    8a54:	mov	r9, r3
      if (order == 1) {
    8a56:	cmp.w	r8, #1
    8a5a:	bne.w	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8a5e:	adds	r1, r6, #1
    8a60:	mov	r3, r9
    8a62:	mov	r2, r7
    8a64:	mov	r0, r5
    8a66:	uxth	r1, r1
    8a68:	bl	8596 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8a6c:	cmp	r0, #0
    8a6e:	it	eq
    8a70:	moveq.w	r9, #0
    8a74:	b.n	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8a76:	add.w	r8, r8, #4294967295
    8a7a:	uxtb.w	r8, r8
    8a7e:	cmp	r2, r8
    8a80:	bne.n	8a1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    8a82:	ldrb	r2, [r0, #13]
    8a84:	cmp	r2, sl
    8a86:	beq.n	8a56 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8a88:	b.n	8a1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    8a8a:	lsls	r3, r1, #28
    8a8c:	bmi.n	8a1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    8a8e:	cmp.w	r9, #0
    8a92:	beq.n	8aaa <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8a94:	cmp.w	r8, #1
    8a98:	bne.w	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8a9c:	bl	8578 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8aa0:	cmp	r0, sl
    8aa2:	bne.w	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8aa6:	mov	fp, r9
    8aa8:	b.n	8ac4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8aaa:	movs	r2, #11
    8aac:	vmov	r1, s16
    8ab0:	bl	f05c <memcmp>
    8ab4:	cmp	r0, #0
    8ab6:	bne.w	8924 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8aba:	ldrb.w	fp, [r7, #21]
    8abe:	ands.w	fp, fp, #1
    8ac2:	bne.n	89f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    8ac4:	ldr	r3, [sp, #16]
    8ac6:	lsls	r1, r3, #20
    8ac8:	bmi.w	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8acc:	ldr	r3, [sp, #16]
    8ace:	mov	r2, r6
    8ad0:	mov	r1, r5
    8ad2:	ldr	r0, [sp, #28]
    8ad4:	str.w	fp, [sp]
    8ad8:	bl	78da <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8adc:	b.n	88d0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    8ade:	movs	r1, #0
    8ae0:	mov	r0, r5
    8ae2:	bl	77b0 <FatFile::readDirCache(bool)>
    if (!dir) {
    8ae6:	cbnz	r0, 8b0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    8ae8:	ldrb	r3, [r5, #1]
    8aea:	cmp	r3, #0
    8aec:	bne.w	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    8af0:	mov	r0, r5
    8af2:	bl	753c <FatFile::addDirCluster()>
    8af6:	cmp	r0, #0
    8af8:	beq.w	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8afc:	ldr	r3, [sp, #20]
    8afe:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    8b00:	add.w	r3, r4, r3, lsl #4
    8b04:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8b06:	ldr	r3, [sp, #8]
    8b08:	cmp	r3, r4
    8b0a:	bhi.n	8af0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    8b0c:	b.n	895e <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    8b0e:	adds	r4, #1
    8b10:	uxtb	r4, r4
    8b12:	b.n	8956 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8b14:	mov	r1, r7
    8b16:	mov	r0, r5
    8b18:	bl	8818 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8b1c:	cmp	r0, #0
    8b1e:	bne.w	8966 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    8b22:	b.n	88ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b24:	movw	r3, #22561	; 0x5821
    8b28:	strh	r3, [r4, #16]
    8b2a:	strh	r3, [r4, #24]
    8b2c:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8b2e:	b.n	89e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    8b30:	.word	0x200207fc

00008b34 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8b34:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8b36:	mov	r4, r2
    8b38:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8b3a:	mov	r0, r1
    8b3c:	ldrb.w	r3, [r1], #1
    8b40:	cmp	r3, #32
    8b42:	beq.n	8b3a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8b44:	movs	r5, #0
    8b46:	ldr	r7, [pc, #148]	; (8bdc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    8b48:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    8b4a:	ldrb	r3, [r0, #0]
    8b4c:	cbnz	r3, 8b9c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8b4e:	ldr	r3, [r4, #16]
    8b50:	subs	r3, #1
    8b52:	cmp	r3, #254	; 0xfe
    8b54:	bhi.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8b56:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8b58:	ldrb.w	r3, [r0], #1
    8b5c:	cmp	r3, #32
    8b5e:	beq.n	8b56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8b60:	cmp	r3, #47	; 0x2f
    8b62:	beq.n	8b56 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8b64:	mov	r0, r4
  *ptr = path;
    8b66:	str	r2, [r6, #0]

 fail:
  return false;
}
    8b68:	add	sp, #12
    8b6a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    8b6e:	b.w	86f4 <FatFile::makeSFN(FatLfn_t*)>
    8b72:	subs	r1, #34	; 0x22
    8b74:	uxtb	r1, r1
    8b76:	lsr.w	r1, r7, r1
    8b7a:	lsls	r2, r1, #31
    8b7c:	bpl.n	8bd6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    8b7e:	movs	r0, #0
    8b80:	add	sp, #12
    8b82:	pop	{r4, r5, r6, r7, pc}
    8b84:	cmp	r1, #92	; 0x5c
    8b86:	beq.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8b88:	bhi.n	8b96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    8b8a:	subs	r1, #62	; 0x3e
    8b8c:	cmp	r1, #1
    8b8e:	bls.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    8b90:	str	r5, [r4, #16]
      fname->end = path;
    8b92:	str	r0, [r4, #8]
    8b94:	b.n	8b4a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8b96:	cmp	r1, #124	; 0x7c
    8b98:	beq.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8b9a:	b.n	8b90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8b9c:	cmp	r3, #47	; 0x2f
    8b9e:	beq.n	8b4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8ba0:	add	r2, sp, #4
    8ba2:	adds	r1, r0, #4
    8ba4:	bl	5b14 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8ba8:	cmp	r0, #0
    8baa:	beq.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8bac:	ldr	r3, [sp, #4]
    8bae:	cmp.w	r3, #65536	; 0x10000
    8bb2:	ite	cc
    8bb4:	movcc	r2, #1
    8bb6:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8bb8:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8bba:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8bbc:	bhi.n	8b90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8bbe:	cmp	r3, #60	; 0x3c
    8bc0:	uxtb	r1, r3
    8bc2:	bhi.n	8b84 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8bc4:	cmp	r1, #33	; 0x21
    8bc6:	bhi.n	8b72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    8bc8:	cmp	r1, #31
    8bca:	bls.n	8b7e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8bcc:	cmp	r3, #46	; 0x2e
    8bce:	beq.n	8b4a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8bd0:	cmp	r3, #32
    8bd2:	beq.n	8b4a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8bd4:	b.n	8b90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8bd6:	cmp	r3, #46	; 0x2e
    8bd8:	b.n	8bd2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    8bda:	nop
    8bdc:	.word	0x05002101

00008be0 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8be4:	movs	r3, #0
    8be6:	sub	sp, #40	; 0x28
    8be8:	mov	r4, r0
    8bea:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8bec:	ldrb	r3, [r0, #2]
    8bee:	lsls	r2, r3, #30
    8bf0:	bmi.n	8bfa <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8bf2:	movs	r0, #0
}
    8bf4:	add	sp, #40	; 0x28
    8bf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8bfa:	ldr	r1, [r0, #32]
    8bfc:	cmp	r1, #0
    8bfe:	bne.n	8c8c <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8c00:	movs	r1, #1
    8c02:	mov	r0, r4
    8c04:	bl	75ac <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8c08:	mov	r5, r0
    8c0a:	cmp	r0, #0
    8c0c:	beq.n	8bf2 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    8c0e:	bl	8578 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    8c12:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8c14:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    8c16:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    8c18:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    8c1a:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8c1c:	ldr	r0, [r4, #8]
  m_flags = 0;
    8c1e:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    8c20:	bl	74e0 <FatPartition::cacheSync()>
    8c24:	cmp	r0, #0
    8c26:	beq.n	8bf2 <FatFile::remove()+0x12>
  if (!isLFN()) {
    8c28:	ldrb	r3, [r4, #3]
    8c2a:	cmp	r3, #0
    8c2c:	beq.n	8bf4 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    8c2e:	mov	r1, r4
    8c30:	add	r0, sp, #4
    8c32:	bl	75d6 <FatFile::openCluster(FatFile*)>
    8c36:	cmp	r0, #0
    8c38:	beq.n	8bf2 <FatFile::remove()+0x12>
    8c3a:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8c3c:	uxtb.w	r8, r5
    8c40:	ldrb	r3, [r4, #3]
    8c42:	cmp	r3, r8
    8c44:	bcc.n	8bf2 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8c46:	ldrh	r1, [r4, #4]
    8c48:	add	r0, sp, #4
    8c4a:	subs	r1, r1, r5
    8c4c:	uxth	r1, r1
    8c4e:	bl	72fc <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8c52:	cmp	r0, #0
    8c54:	beq.n	8bf2 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8c56:	ldrb	r3, [r0, #11]
    8c58:	cmp	r3, #15
    8c5a:	bne.n	8bf2 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8c5c:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8c5e:	and.w	r3, r2, #31
    8c62:	cmp	r3, r8
    8c64:	bne.n	8bf2 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8c66:	ldrb	r3, [r0, #13]
    8c68:	cmp	r3, r6
    8c6a:	bne.n	8bf2 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8c6c:	strb	r7, [r0, #0]
    if (last) {
    8c6e:	adds	r5, #1
    m_vol->cacheDirty();
    8c70:	ldr	r1, [r4, #8]
    if (last) {
    8c72:	uxth	r5, r5
    8c74:	ldrb.w	r3, [r1, #40]	; 0x28
    8c78:	orr.w	r3, r3, #1
    8c7c:	strb.w	r3, [r1, #40]	; 0x28
    8c80:	lsls	r3, r2, #25
    8c82:	bpl.n	8c3c <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8c84:	ldr	r0, [r4, #8]
    8c86:	bl	74e0 <FatPartition::cacheSync()>
    8c8a:	b.n	8bf4 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8c8c:	ldr	r0, [r0, #8]
    8c8e:	bl	8336 <FatPartition::freeChain(unsigned long)>
    8c92:	cmp	r0, #0
    8c94:	bne.n	8c00 <FatFile::remove()+0x20>
    8c96:	b.n	8bf2 <FatFile::remove()+0x12>

00008c98 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8c98:	push	{r4, lr}
    8c9a:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8c9c:	ldr	r0, [r0, #56]	; 0x38
    8c9e:	cbz	r0, 8cac <FsBaseFile::close()+0x14>
    8ca0:	bl	7ab8 <FatFile::close()>
    8ca4:	cbz	r0, 8cac <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    8ca6:	movs	r3, #0
    8ca8:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8caa:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8cac:	ldr	r0, [r4, #60]	; 0x3c
    8cae:	cbnz	r0, 8cb4 <FsBaseFile::close()+0x1c>
  return false;
    8cb0:	movs	r0, #0
    8cb2:	b.n	8caa <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8cb4:	bl	5eba <ExFatFile::close()>
    8cb8:	cmp	r0, #0
    8cba:	beq.n	8cb0 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8cbc:	movs	r3, #0
    8cbe:	str	r3, [r4, #60]	; 0x3c
    return true;
    8cc0:	b.n	8caa <FsBaseFile::close()+0x12>

00008cc2 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8cc2:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8cc4:	push	{r4, r5, r6, lr}
    8cc6:	mov	r6, r0
    8cc8:	mov	r5, r1
  if (this == &from) return *this;
    8cca:	beq.n	8cf4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8ccc:	bl	8c98 <FsBaseFile::close()>
  if (from.m_fFile) {
    8cd0:	ldr	r4, [r5, #56]	; 0x38
    8cd2:	cbz	r4, 8cf8 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8cd4:	mov	r1, r6
    8cd6:	movs	r0, #36	; 0x24
    8cd8:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8cdc:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8cde:	mov	r4, r0
    8ce0:	strh	r3, [r0, #0]
    8ce2:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8ce4:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    8ce6:	ldr	r5, [r5, #56]	; 0x38
    8ce8:	ldmia	r5!, {r0, r1, r2, r3}
    8cea:	stmia	r4!, {r0, r1, r2, r3}
    8cec:	ldmia	r5!, {r0, r1, r2, r3}
    8cee:	stmia	r4!, {r0, r1, r2, r3}
    8cf0:	ldr	r3, [r5, #0]
    8cf2:	str	r3, [r4, #0]
}
    8cf4:	mov	r0, r6
    8cf6:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    8cf8:	ldr	r3, [r5, #60]	; 0x3c
    8cfa:	cmp	r3, #0
    8cfc:	beq.n	8cf4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    8cfe:	mov	r1, r6
    8d00:	movs	r0, #56	; 0x38
    8d02:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8d06:	strb.w	r4, [r0, #49]	; 0x31
    8d0a:	strh	r4, [r0, #50]	; 0x32
    8d0c:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8d0e:	ldr	r3, [r5, #60]	; 0x3c
    8d10:	add.w	r2, r3, #52	; 0x34
    8d14:	ldr.w	r1, [r3], #4
    8d18:	cmp	r3, r2
    8d1a:	str.w	r1, [r0], #4
    8d1e:	bne.n	8d14 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    8d20:	b.n	8cf4 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00008d22 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8d22:	push	{r0, r1, r4, r5, r6, lr}
    8d24:	mov	r4, r0
  if (!vol) {
    8d26:	mov	r5, r1
    8d28:	cbnz	r1, 8d30 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    8d2a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8d2c:	add	sp, #8
    8d2e:	pop	{r4, r5, r6, pc}
    8d30:	strd	r2, r3, [sp]
  close();
    8d34:	bl	8c98 <FsBaseFile::close()>
  if (vol->m_fVol) {
    8d38:	ldr.w	r6, [r5, #1152]	; 0x480
    8d3c:	ldrd	r2, r3, [sp]
    8d40:	cbz	r6, 8d68 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    8d42:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8d44:	mov	r1, r4
    8d46:	movs	r0, #36	; 0x24
    8d48:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
    8d4c:	strh	r6, [r0, #0]
    8d4e:	strb	r6, [r0, #2]
    8d50:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    8d52:	ldr.w	r1, [r5, #1152]	; 0x480
    8d56:	ldrd	r2, r3, [sp]
    8d5a:	bl	7b66 <FatFile::open(FatVolume*, char const*, int)>
    8d5e:	cbz	r0, 8d64 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8d60:	movs	r0, #1
    8d62:	b.n	8d2c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8d64:	str	r0, [r4, #56]	; 0x38
    8d66:	b.n	8d2c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    8d68:	ldr.w	r1, [r5, #1156]	; 0x484
    8d6c:	strd	r2, r3, [sp]
    8d70:	cmp	r1, #0
    8d72:	beq.n	8d2a <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    8d74:	mov	r1, r4
    8d76:	movs	r0, #56	; 0x38
    8d78:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
    8d7c:	strb.w	r6, [r0, #49]	; 0x31
    8d80:	strh	r6, [r0, #50]	; 0x32
    8d82:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8d84:	ldr.w	r1, [r5, #1156]	; 0x484
    8d88:	ldrd	r2, r3, [sp]
    8d8c:	bl	665a <ExFatFile::open(ExFatVolume*, char const*, int)>
    8d90:	cmp	r0, #0
    8d92:	bne.n	8d60 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8d94:	str	r0, [r4, #60]	; 0x3c
    8d96:	b.n	8d2c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008d98 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8d98:	push	{r0, r1, r4, r5, r6, lr}
    8d9a:	mov	r5, r1
    8d9c:	str	r2, [sp, #4]
    8d9e:	mov	r4, r0
  close();
    8da0:	bl	8c98 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8da4:	ldr	r6, [r5, #56]	; 0x38
    8da6:	ldr	r2, [sp, #4]
    8da8:	cbz	r6, 8dce <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8daa:	mov	r1, r4
    8dac:	movs	r0, #36	; 0x24
    8dae:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
    8db2:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8db4:	ldr	r2, [sp, #4]
    8db6:	strh	r1, [r0, #0]
    8db8:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8dba:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8dbc:	ldr	r1, [r5, #56]	; 0x38
    8dbe:	bl	799c <FatFile::openNext(FatFile*, int)>
    8dc2:	cbz	r0, 8dca <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8dc4:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8dc6:	add	sp, #8
    8dc8:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    8dca:	str	r0, [r4, #56]	; 0x38
    8dcc:	b.n	8dc6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8dce:	ldr	r0, [r5, #60]	; 0x3c
    8dd0:	str	r2, [sp, #4]
    8dd2:	cmp	r0, #0
    8dd4:	beq.n	8dc6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    8dd6:	mov	r1, r4
    8dd8:	movs	r0, #56	; 0x38
    8dda:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8dde:	ldr	r2, [sp, #4]
    8de0:	strb.w	r6, [r0, #49]	; 0x31
    8de4:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8de6:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8de8:	ldr	r1, [r5, #60]	; 0x3c
    8dea:	bl	6668 <ExFatFile::openNext(ExFatFile*, int)>
    8dee:	cmp	r0, #0
    8df0:	bne.n	8dc4 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    8df2:	str	r0, [r4, #60]	; 0x3c
    8df4:	b.n	8dc6 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00008df8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8df8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8dfc:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8dfe:	mov	r4, r0
    8e00:	mov	r6, r3
  m_blockDev = blockDev;
    8e02:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    8e06:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    8e0a:	mov	r1, r0
    8e0c:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8e10:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    8e12:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8e16:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    8e18:	strb.w	r7, [r0, #1092]	; 0x444
    8e1c:	mov	r5, r0
    8e1e:	strb.w	r7, [r0, #1145]	; 0x479
    8e22:	strh.w	r7, [r0, #1146]	; 0x47a
    8e26:	str.w	r0, [r4, #1156]	; 0x484
    8e2a:	ldr.w	r1, [r4, #1160]	; 0x488
    8e2e:	ldr.w	r8, [pc, #152]	; 8ec8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    8e32:	bl	69ac <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8e36:	cbz	r0, 8e68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8e38:	add.w	r7, r5, #1096	; 0x448
    8e3c:	mov	r0, r7
    8e3e:	bl	5eba <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8e42:	mov	r1, r5
    8e44:	mov	r0, r7
    8e46:	bl	5f0e <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8e4a:	cbz	r0, 8e68 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8e4c:	ldr	r3, [pc, #112]	; (8ec0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8e4e:	ldr	r2, [r3, #0]
    8e50:	cbnz	r2, 8e54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    8e52:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8e54:	cmp.w	r9, #0
    8e58:	bne.n	8e60 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8e5a:	ldr.w	r3, [r8]
    8e5e:	cbnz	r3, 8e64 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8e60:	str.w	r4, [r8]
  }
  return true;
    8e64:	movs	r0, #1
    8e66:	b.n	8eba <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    8e68:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    8e6a:	mov	r1, r4
    8e6c:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    8e70:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    8e74:	bl	8ef4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    8e78:	movs	r3, #2
    8e7a:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8e7c:	mov	r2, r6
    8e7e:	strb	r3, [r0, #8]
    8e80:	mov	r5, r0
    8e82:	strh.w	r7, [r0, #1096]	; 0x448
    8e86:	strb.w	r7, [r0, #1098]	; 0x44a
    8e8a:	str.w	r0, [r4, #1152]	; 0x480
    8e8e:	ldr.w	r1, [r4, #1160]	; 0x488
    8e92:	bl	8424 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8e96:	cbz	r0, 8eb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8e98:	add.w	r6, r5, #1096	; 0x448
    8e9c:	mov	r0, r6
    8e9e:	bl	7ab8 <FatFile::close()>
    return m_vwd.openRoot(this);
    8ea2:	mov	r1, r5
    8ea4:	mov	r0, r6
    8ea6:	bl	75ca <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8eaa:	cbz	r0, 8eb0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8eac:	ldr	r3, [pc, #20]	; (8ec4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8eae:	b.n	8e4e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8eb0:	movs	r0, #0
    8eb2:	str.w	r0, [r8]
  m_fVol = nullptr;
    8eb6:	str.w	r0, [r4, #1152]	; 0x480
}
    8eba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ebe:	nop
    8ec0:	.word	0x20020800
    8ec4:	.word	0x20020838
    8ec8:	.word	0x20020834

00008ecc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8ecc:	push	{r3, r4, r5, lr}
    8ece:	mov	r4, r0
    8ed0:	mov.w	r5, #1000	; 0x3e8
    8ed4:	movs	r0, #0
    8ed6:	strd	r0, r5, [r4, #4]
    8eda:	strb	r0, [r4, #12]
    8edc:	ldr	r5, [pc, #16]	; (8ef0 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8ede:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8ee2:	mov	r0, r4
    8ee4:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    8ee8:	bl	8d22 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    8eec:	mov	r0, r4
    8eee:	pop	{r3, r4, r5, pc}
    8ef0:	.word	0x20000554

00008ef4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    8ef4:	mov	r0, r1
    8ef6:	bx	lr

00008ef8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    8ef8:	mov.w	r0, #4294967295
    8efc:	bx	lr

00008efe <SharedSpiCard::errorCode() const>:
  }
    8efe:	ldrb	r0, [r0, #17]
    8f00:	bx	lr

00008f02 <SharedSpiCard::errorData() const>:
  }
    8f02:	ldrb	r0, [r0, #20]
    8f04:	bx	lr

00008f06 <SharedSpiCard::type() const>:
  }
    8f06:	ldrb	r0, [r0, #21]
    8f08:	bx	lr

00008f0a <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    8f0a:	movs	r0, #1
    8f0c:	bx	lr

00008f0e <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    8f0e:	ldrb	r0, [r0, #28]
    8f10:	bx	lr

00008f12 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    8f12:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    8f14:	push	{r4}
  return readSectors(sector, dst, 1);
    8f16:	ldr	r4, [r3, #20]
    8f18:	movs	r3, #1
    8f1a:	mov	ip, r4
}
    8f1c:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    8f20:	bx	ip

00008f22 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8f22:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    8f24:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    8f26:	mov	r4, r0
    8f28:	mov	r5, r1
  if (!syncDevice()) {
    8f2a:	ldr	r3, [r3, #32]
    8f2c:	blx	r3
    8f2e:	cbz	r0, 8f32 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    8f30:	strb	r5, [r4, #28]
  return true;
}
    8f32:	pop	{r3, r4, r5, pc}

00008f34 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8f34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f38:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8f3a:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8f3c:	mov	r4, r0
    8f3e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8f40:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    8f42:	mov	r6, r2
    8f44:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8f48:	bne.n	8f50 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    8f4a:	ldr	r3, [r0, #24]
    8f4c:	cmp	r3, r1
    8f4e:	beq.n	8f64 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8f50:	ldr	r3, [r4, #0]
    8f52:	mov	r1, r5
    8f54:	mov	r0, r4
    8f56:	ldr	r3, [r3, #96]	; 0x60
    8f58:	blx	r3
    8f5a:	cbnz	r0, 8f62 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8f5c:	movs	r0, #0
}
    8f5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8f62:	str	r5, [r4, #24]
    8f64:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8f68:	cmp	r5, r8
    8f6a:	bne.n	8f84 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8f6c:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8f6e:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8f70:	add	r3, r6
    8f72:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8f74:	cmp	r0, #0
    8f76:	bne.n	8f5e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    8f78:	ldr	r3, [r4, #0]
    8f7a:	mov	r0, r4
    8f7c:	ldr	r3, [r3, #100]	; 0x64
}
    8f7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8f82:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8f84:	mov	r1, r9
    8f86:	mov	r0, r5
    8f88:	blx	r7
    if (!writeData(src)) {
    8f8a:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8f8c:	mov	r1, r0
    if (!writeData(src)) {
    8f8e:	mov	r0, r4
    8f90:	ldr	r3, [r3, #92]	; 0x5c
    8f92:	adds	r5, #1
    8f94:	blx	r3
    8f96:	cmp	r0, #0
    8f98:	bne.n	8f68 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8f9a:	b.n	8f5c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008f9c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8f9c:	bx	lr

00008f9e <SharedSpiCard::end()>:
    m_spiDriver.end();
    8f9e:	adds	r0, #4
    8fa0:	b.w	a6d8 <SdSpiArduinoDriver::end()>

00008fa4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8fa4:	push	{r4, lr}
    8fa6:	mov	r4, r0
    8fa8:	movs	r1, #32
    8faa:	bl	ce8c <operator delete(void*, unsigned int)>
    8fae:	mov	r0, r4
    8fb0:	pop	{r4, pc}

00008fb2 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8fb2:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8fb4:	ldr	r3, [r0, #0]
    8fb6:	mov	r1, sp
    8fb8:	ldr	r3, [r3, #76]	; 0x4c
    8fba:	blx	r3
    8fbc:	cbz	r0, 9004 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8fbe:	ldrb.w	r3, [sp]
    8fc2:	ands.w	r3, r3, #192	; 0xc0
    8fc6:	bne.n	900a <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8fc8:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8fcc:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8fd0:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8fd4:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8fd8:	lsls	r0, r0, #2
    8fda:	orr.w	r0, r0, r3, lsl #10
    8fde:	ldrb.w	r3, [sp, #8]
    8fe2:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8fe6:	ldrb.w	r3, [sp, #9]
    8fea:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8fee:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8ff0:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8ff2:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8ff6:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8ffa:	and.w	r2, r2, #15
    8ffe:	add	r3, r2
    9000:	subs	r3, #7
    9002:	lsls	r0, r3
}
    9004:	add	sp, #20
    9006:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    900a:	cmp	r3, #64	; 0x40
    900c:	bne.n	902c <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    900e:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9012:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9016:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9018:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    901c:	add.w	r0, r0, r3, lsl #16
    9020:	ldrb.w	r3, [sp, #8]
    9024:	add.w	r0, r0, r3, lsl #8
    9028:	lsls	r0, r0, #10
    902a:	b.n	9004 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    902c:	movs	r0, #0
    902e:	b.n	9004 <SharedSpiCard::sectorCount()+0x52>

00009030 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    9030:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9034:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9036:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    9038:	mov	r4, r0
    903a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    903c:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    903e:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9040:	bne.n	9048 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    9042:	ldr	r3, [r0, #24]
    9044:	cmp	r3, r1
    9046:	beq.n	905c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    9048:	ldr	r3, [r4, #0]
    904a:	mov	r1, r5
    904c:	mov	r0, r4
    904e:	ldr	r3, [r3, #96]	; 0x60
    9050:	blx	r3
    9052:	cbnz	r0, 905a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    9054:	movs	r0, #0
}
    9056:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    905a:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    905c:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    905e:	cmp	r6, r5
    9060:	add.w	r1, r7, r5, lsl #9
    9064:	bne.n	907e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    9066:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    9068:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    906a:	add	r3, r6
    906c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    906e:	cmp	r0, #0
    9070:	bne.n	9056 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    9072:	ldr	r3, [r4, #0]
    9074:	mov	r0, r4
    9076:	ldr	r3, [r3, #100]	; 0x64
}
    9078:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    907c:	bx	r3
    if (!writeData(src)) {
    907e:	ldr	r3, [r4, #0]
    9080:	mov	r0, r4
    9082:	ldr	r3, [r3, #92]	; 0x5c
    9084:	blx	r3
    9086:	cmp	r0, #0
    9088:	beq.n	9054 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    908a:	adds	r5, #1
    908c:	b.n	905e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

0000908e <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    908e:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    9090:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    9092:	mov	r4, r0
  if (!m_spiActive) {
    9094:	cbnz	r6, 90b2 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    9096:	adds	r5, r0, #4
    9098:	mov	r0, r5
    909a:	bl	a67c <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    909e:	mov	r1, r6
    90a0:	ldrb	r0, [r4, #16]
    90a2:	bl	a752 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    90a6:	movs	r1, #255	; 0xff
    90a8:	mov	r0, r5
    90aa:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    90ae:	movs	r3, #1
    90b0:	strb	r3, [r4, #18]
}
    90b2:	pop	{r4, r5, r6, pc}

000090b4 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    90b4:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    90b6:	push	{r0, r1, r4, lr}
    90b8:	mov	r4, r0
  if (m_spiActive) {
    90ba:	cbz	r3, 90d8 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    90bc:	movs	r1, #1
    90be:	ldrb	r0, [r0, #16]
    90c0:	bl	a752 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    90c4:	adds	r0, r4, #4
    90c6:	movs	r1, #255	; 0xff
    90c8:	str	r0, [sp, #4]
    90ca:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    90ce:	ldr	r0, [sp, #4]
    90d0:	bl	a68a <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    90d4:	movs	r3, #0
    90d6:	strb	r3, [r4, #18]
}
    90d8:	add	sp, #8
    90da:	pop	{r4, pc}

000090dc <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    90dc:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    90de:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    90e0:	mov	r4, r0
  if (m_state == READ_STATE) {
    90e2:	cmp	r3, #1
    90e4:	beq.n	9108 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    90e6:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    90e8:	cbnz	r6, 90ee <SharedSpiCard::isBusy()+0x12>
    spiStart();
    90ea:	bl	908e <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    90ee:	adds	r0, r4, #4
    90f0:	bl	a6de <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    90f4:	subs.w	r5, r0, #255	; 0xff
    90f8:	it	ne
    90fa:	movne	r5, #1
  if (!spiActive) {
    90fc:	cbnz	r6, 9104 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    90fe:	mov	r0, r4
    9100:	bl	90b4 <SharedSpiCard::spiStop()>
}
    9104:	mov	r0, r5
    9106:	pop	{r4, r5, r6, pc}
    return false;
    9108:	movs	r5, #0
    910a:	b.n	9104 <SharedSpiCard::isBusy()+0x28>

0000910c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    910c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    910e:	ldr	r7, [pc, #96]	; (9170 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    9110:	mov	r4, r0
    9112:	adds	r6, r0, #4
    9114:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    9116:	add.w	r5, r5, #300	; 0x12c
    911a:	uxth	r5, r5
    911c:	mov	r0, r6
    911e:	strd	r1, r2, [sp]
    9122:	bl	a6de <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9126:	cmp	r0, #255	; 0xff
    9128:	strb	r0, [r4, #20]
    912a:	ldrd	r1, r2, [sp]
    912e:	beq.n	9150 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    9130:	cmp	r0, #254	; 0xfe
    9132:	bne.n	9166 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    9134:	mov	r0, r6
    9136:	bl	a6e8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    913a:	strb	r0, [r4, #20]
    913c:	cbnz	r0, 916a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    913e:	mov	r0, r6
    9140:	bl	a6de <SdSpiArduinoDriver::receive()>
    9144:	mov	r0, r6
    9146:	bl	a6de <SdSpiArduinoDriver::receive()>
  return true;
    914a:	movs	r0, #1
}
    914c:	add	sp, #12
    914e:	pop	{r4, r5, r6, r7, pc}
    9150:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9152:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9154:	lsls	r3, r3, #16
    9156:	bpl.n	911c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    9158:	movs	r3, #29
  spiStop();
    915a:	mov	r0, r4
    m_errorCode = code;
    915c:	strb	r3, [r4, #17]
    915e:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9162:	movs	r0, #0
    9164:	b.n	914c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    9166:	movs	r3, #24
    9168:	b.n	915a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    916a:	movs	r3, #37	; 0x25
    916c:	b.n	915a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    916e:	nop
    9170:	.word	0x20021380

00009174 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    9174:	mov.w	r2, #512	; 0x200
    9178:	b.w	910c <SharedSpiCard::readData(unsigned char*, unsigned int)>

0000917c <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    917c:	push	{r4, r5, r6, lr}
    917e:	ldr	r6, [pc, #36]	; (91a4 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    9180:	adds	r5, r0, #4
    9182:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    9184:	add	r1, r3
    9186:	uxth	r4, r1
    9188:	mov	r0, r5
    918a:	bl	a6de <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    918e:	cmp	r0, #255	; 0xff
    9190:	bne.n	9196 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    9192:	movs	r0, #1
}
    9194:	pop	{r4, r5, r6, pc}
    9196:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9198:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    919a:	lsls	r3, r3, #16
    919c:	bpl.n	9188 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    919e:	movs	r0, #0
    91a0:	b.n	9194 <SharedSpiCard::waitReady(unsigned short)+0x18>
    91a2:	nop
    91a4:	.word	0x20021380

000091a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    91a8:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    91aa:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    91ae:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    91b0:	mov	r4, r0
    91b2:	str	r2, [sp, #4]
    91b4:	mov	r5, r1
  if (!syncDevice()) {
    91b6:	blx	r3
    91b8:	cmp	r0, #0
    91ba:	beq.n	922e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    91bc:	ldrb	r3, [r4, #18]
    91be:	cbnz	r3, 91c6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    91c0:	mov	r0, r4
    91c2:	bl	908e <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    91c6:	cmp	r5, #12
    91c8:	bne.n	921c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    91ca:	adds	r6, r4, #4
    91cc:	movs	r7, #3
    spiSend(pa[i]);
    91ce:	add.w	r8, sp, #4
    91d2:	orr.w	r1, r5, #64	; 0x40
    91d6:	mov	r0, r6
    91d8:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    91dc:	ldrb.w	r1, [r8, r7]
    91e0:	mov	r0, r6
    91e2:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    91e6:	subs	r7, #1
    91e8:	bcs.n	91dc <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    91ea:	cmp	r5, #0
    91ec:	mov	r0, r6
    return m_spiDriver.receive();
    91ee:	mov.w	r5, #10
    m_spiDriver.send(data);
    91f2:	ite	eq
    91f4:	moveq	r1, #149	; 0x95
    91f6:	movne	r1, #135	; 0x87
    91f8:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    91fc:	mov	r0, r6
    91fe:	bl	a6de <SdSpiArduinoDriver::receive()>
    9202:	mov	r0, r6
    9204:	bl	a6de <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    9208:	lsls	r3, r0, #24
    m_status = spiReceive();
    920a:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    920c:	bpl.n	9216 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    920e:	subs	r5, #1
    9210:	uxth	r5, r5
    9212:	cmp	r5, #0
    9214:	bne.n	9202 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    9216:	add	sp, #8
    9218:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    921c:	mov.w	r1, #300	; 0x12c
    9220:	mov	r0, r4
    9222:	bl	917c <SharedSpiCard::waitReady(unsigned short)>
    9226:	cmp	r0, #0
    9228:	bne.n	91ca <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    922a:	cmp	r5, #0
    922c:	beq.n	91ca <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    922e:	movs	r0, #255	; 0xff
    9230:	b.n	9216 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00009232 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9232:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    9234:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9236:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    9238:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    923a:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    923c:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9240:	cbz	r0, 9250 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    9242:	movs	r3, #18
  spiStop();
    9244:	mov	r0, r4
    9246:	strb	r3, [r4, #17]
    9248:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    924c:	movs	r0, #0
}
    924e:	pop	{r3, r4, r5, r6, r7, pc}
    9250:	adds	r6, r5, #4
    return m_spiDriver.receive();
    9252:	adds	r7, r4, #4
    9254:	mov	r0, r7
    9256:	bl	a6de <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    925a:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    925e:	cmp	r6, r5
    9260:	bne.n	9254 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    9262:	mov	r0, r4
    9264:	bl	90b4 <SharedSpiCard::spiStop()>
    9268:	movs	r0, #1
    926a:	b.n	924e <SharedSpiCard::readOCR(unsigned long*)+0x1c>

0000926c <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    926c:	push	{r3, r4, r5, lr}
    926e:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    9270:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    9272:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    9274:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9278:	cbz	r0, 9288 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    927a:	movs	r3, #27
    927c:	strb	r3, [r4, #17]
  spiStop();
    927e:	mov	r0, r4
  return false;
    9280:	movs	r5, #0
  spiStop();
    9282:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9286:	b.n	929e <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    9288:	mov	r1, r5
    928a:	movs	r2, #16
    928c:	mov	r0, r4
    928e:	bl	910c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    9292:	mov	r5, r0
    9294:	cmp	r0, #0
    9296:	beq.n	927e <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    9298:	mov	r0, r4
    929a:	bl	90b4 <SharedSpiCard::spiStop()>
}
    929e:	mov	r0, r5
    92a0:	pop	{r3, r4, r5, pc}

000092a2 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    92a2:	mov	r2, r1
    return readRegister(CMD9, csd);
    92a4:	movs	r1, #9
    92a6:	b.w	926c <SharedSpiCard::readRegister(unsigned char, void*)>

000092aa <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    92aa:	mov	r2, r1
    return readRegister(CMD10, cid);
    92ac:	movs	r1, #10
    92ae:	b.w	926c <SharedSpiCard::readRegister(unsigned char, void*)>

000092b2 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    92b2:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    92b4:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    92b6:	mov	r5, r1
    92b8:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    92ba:	ldr	r3, [r3, #88]	; 0x58
    92bc:	blx	r3
    92be:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    92c0:	mov.w	r1, #18
    92c4:	mov	r0, r4
    sector <<= 9;
    92c6:	it	ne
    92c8:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    92ca:	mov	r2, r5
    92cc:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    92d0:	cbz	r0, 92e0 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    92d2:	movs	r3, #12
  spiStop();
    92d4:	mov	r0, r4
    92d6:	strb	r3, [r4, #17]
    92d8:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    92dc:	movs	r0, #0
}
    92de:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    92e0:	movs	r0, #1
    92e2:	strb	r0, [r4, #19]
  return true;
    92e4:	b.n	92de <SharedSpiCard::readStart(unsigned long)+0x2c>

000092e6 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    92e6:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    92e8:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    92ea:	movs	r1, #12
bool SharedSpiCard::readStop() {
    92ec:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    92ee:	mov	r2, r4
  m_state = IDLE_STATE;
    92f0:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    92f2:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    92f6:	cbz	r0, 9306 <SharedSpiCard::readStop()+0x20>
    92f8:	movs	r3, #9
  spiStop();
    92fa:	mov	r0, r5
    92fc:	strb	r3, [r5, #17]
    92fe:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9302:	mov	r0, r4
}
    9304:	pop	{r3, r4, r5, pc}
  spiStop();
    9306:	mov	r0, r5
    9308:	bl	90b4 <SharedSpiCard::spiStop()>
  return true;
    930c:	movs	r0, #1
    930e:	b.n	9304 <SharedSpiCard::readStop()+0x1e>

00009310 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    9310:	ldrb	r2, [r0, #19]
    9312:	cmp	r2, #2
    9314:	bne.n	931c <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    9316:	ldr	r3, [r0, #0]
    9318:	ldr	r3, [r3, #100]	; 0x64
    931a:	bx	r3
  if (m_state == READ_STATE) {
    931c:	cmp	r2, #1
    931e:	bne.n	9324 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    9320:	b.w	92e6 <SharedSpiCard::readStop()>
}
    9324:	movs	r0, #1
    9326:	bx	lr

00009328 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    9328:	push	{r3, r4, r5, r6, r7, lr}
    932a:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    932c:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    932e:	mov	r4, r0
    9330:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    9332:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    9334:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    9336:	bne.n	933e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    9338:	ldr	r3, [r0, #24]
    933a:	cmp	r3, r1
    933c:	beq.n	934e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    933e:	mov	r1, r5
    9340:	mov	r0, r4
    9342:	bl	92b2 <SharedSpiCard::readStart(unsigned long)>
    9346:	cbnz	r0, 934c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    9348:	movs	r0, #0
}
    934a:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    934c:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    934e:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9350:	cmp	r5, r6
    9352:	add.w	r1, r7, r5, lsl #9
    9356:	bne.n	936e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    9358:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    935a:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    935c:	add	r3, r5
    935e:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    9360:	cmp	r0, #0
    9362:	bne.n	934a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    9364:	mov	r0, r4
}
    9366:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    936a:	b.w	92e6 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    936e:	mov	r0, r4
    9370:	bl	9174 <SharedSpiCard::readData(unsigned char*)>
    9374:	cmp	r0, #0
    9376:	beq.n	9348 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9378:	adds	r5, #1
    937a:	b.n	9350 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

0000937c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    937c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9380:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    9382:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    9384:	mov	r4, r0
    9386:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    9388:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    938a:	mov	r7, r2
    938c:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    9390:	bne.n	9398 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    9392:	ldr	r3, [r0, #24]
    9394:	cmp	r3, r1
    9396:	beq.n	93aa <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    9398:	mov	r1, r5
    939a:	mov	r0, r4
    939c:	bl	92b2 <SharedSpiCard::readStart(unsigned long)>
    93a0:	cbnz	r0, 93a8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    93a2:	movs	r0, #0
}
    93a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    93a8:	str	r5, [r4, #24]
    93aa:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    93ae:	cmp	r5, r8
    93b0:	bne.n	93c8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    93b2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    93b4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    93b6:	add	r3, r6
    93b8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    93ba:	cmp	r0, #0
    93bc:	bne.n	93a4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    93be:	mov	r0, r4
}
    93c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    93c4:	b.w	92e6 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    93c8:	mov	r1, r7
    93ca:	mov	r0, r4
    93cc:	bl	9174 <SharedSpiCard::readData(unsigned char*)>
    93d0:	cmp	r0, #0
    93d2:	beq.n	93a2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    93d4:	mov	r0, r5
    93d6:	mov	r2, sl
    93d8:	mov	r1, r7
    93da:	adds	r5, #1
    93dc:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    93de:	b.n	93ae <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

000093e0 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    93e0:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    93e2:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    93e4:	mov	r5, r1
    93e6:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    93e8:	ldr	r3, [r3, #88]	; 0x58
    93ea:	blx	r3
    93ec:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    93ee:	mov.w	r1, #25
    93f2:	mov	r0, r4
    sector <<= 9;
    93f4:	it	ne
    93f6:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    93f8:	mov	r2, r5
    93fa:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    93fe:	cbz	r0, 940e <SharedSpiCard::writeStart(unsigned long)+0x2e>
    9400:	movs	r3, #14
  spiStop();
    9402:	mov	r0, r4
    9404:	strb	r3, [r4, #17]
    9406:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    940a:	movs	r0, #0
}
    940c:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    940e:	movs	r3, #2
  return true;
    9410:	movs	r0, #1
  m_state = WRITE_STATE;
    9412:	strb	r3, [r4, #19]
  return true;
    9414:	b.n	940c <SharedSpiCard::writeStart(unsigned long)+0x2c>

00009416 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9416:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    9418:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    941a:	mov	r6, r1
  if (!readCSD(&csd)) {
    941c:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    941e:	mov	r4, r0
  if (!readCSD(&csd)) {
    9420:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9422:	mov	r5, r2
  if (!readCSD(&csd)) {
    9424:	blx	r3
    9426:	cbz	r0, 944a <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    9428:	ldrb.w	r3, [sp, #10]
    942c:	lsls	r2, r3, #25
    942e:	bmi.n	9454 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    9430:	and.w	r3, r3, #63	; 0x3f
    9434:	ldrb.w	r2, [sp, #11]
    9438:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    943a:	orr.w	r3, r3, r2, lsr #7
    943e:	adds	r2, r5, #1
    9440:	orrs	r2, r6
    9442:	tst	r3, r2
    9444:	beq.n	9454 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    9446:	movs	r3, #39	; 0x27
    9448:	strb	r3, [r4, #17]
  spiStop();
    944a:	mov	r0, r4
  return false;
    944c:	movs	r5, #0
  spiStop();
    944e:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9452:	b.n	94a2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    9454:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    9456:	movs	r1, #32
    9458:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    945a:	cmp	r3, #3
    firstSector <<= 9;
    945c:	itt	ne
    945e:	lslne	r6, r6, #9
    lastSector <<= 9;
    9460:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    9462:	mov	r2, r6
    9464:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    9468:	cbz	r0, 946e <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    946a:	movs	r3, #38	; 0x26
    946c:	b.n	9448 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    946e:	mov	r2, r5
    9470:	movs	r1, #33	; 0x21
    9472:	mov	r0, r4
    9474:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9478:	mov	r2, r0
    947a:	cmp	r0, #0
    947c:	bne.n	946a <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    947e:	movs	r1, #38	; 0x26
    9480:	mov	r0, r4
    9482:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9486:	cmp	r0, #0
    9488:	bne.n	946a <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    948a:	movw	r1, #10000	; 0x2710
    948e:	mov	r0, r4
    9490:	bl	917c <SharedSpiCard::waitReady(unsigned short)>
    9494:	mov	r5, r0
    9496:	cbnz	r0, 949c <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    9498:	movs	r3, #40	; 0x28
    949a:	b.n	9448 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    949c:	mov	r0, r4
    949e:	bl	90b4 <SharedSpiCard::spiStop()>
}
    94a2:	mov	r0, r5
    94a4:	add	sp, #16
    94a6:	pop	{r4, r5, r6, pc}

000094a8 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    94a8:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    94aa:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    94ae:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    94b0:	bl	917c <SharedSpiCard::waitReady(unsigned short)>
    94b4:	mov	r5, r0
    94b6:	cbnz	r0, 94c6 <SharedSpiCard::writeStop()+0x1e>
    94b8:	movs	r3, #30
  spiStop();
    94ba:	mov	r0, r4
    94bc:	strb	r3, [r4, #17]
    94be:	bl	90b4 <SharedSpiCard::spiStop()>
}
    94c2:	mov	r0, r5
    94c4:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    94c6:	movs	r1, #253	; 0xfd
    94c8:	adds	r0, r4, #4
    94ca:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    94ce:	mov	r0, r4
    94d0:	bl	90b4 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    94d4:	movs	r3, #0
    94d6:	strb	r3, [r4, #19]
  return true;
    94d8:	b.n	94c2 <SharedSpiCard::writeStop()+0x1a>

000094da <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    94da:	push	{r0, r1, r2, r4, r5, lr}
    94dc:	mov	r5, r2
    94de:	mov	r4, r0
    94e0:	adds	r0, #4
    94e2:	str	r0, [sp, #4]
    94e4:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    94e8:	mov.w	r2, #512	; 0x200
    94ec:	mov	r1, r5
    94ee:	ldr	r0, [sp, #4]
    94f0:	bl	a712 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    94f4:	movs	r1, #255	; 0xff
    94f6:	ldr	r0, [sp, #4]
    94f8:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    94fc:	movs	r1, #255	; 0xff
    94fe:	ldr	r0, [sp, #4]
    9500:	bl	a70a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9504:	ldr	r0, [sp, #4]
    9506:	bl	a6de <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    950a:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    950c:	and.w	r0, r0, #31
    9510:	cmp	r0, #5
    9512:	beq.n	9524 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    9514:	movs	r3, #32
  spiStop();
    9516:	mov	r0, r4
    9518:	strb	r3, [r4, #17]
    951a:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    951e:	movs	r0, #0
}
    9520:	add	sp, #12
    9522:	pop	{r4, r5, pc}
  return true;
    9524:	movs	r0, #1
    9526:	b.n	9520 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00009528 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    9528:	push	{r0, r1, r4, lr}
    952a:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    952c:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    9530:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9532:	bl	917c <SharedSpiCard::waitReady(unsigned short)>
    9536:	ldr	r2, [sp, #4]
    9538:	cbnz	r0, 9548 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    953a:	movs	r3, #36	; 0x24
    953c:	strb	r3, [r4, #17]
  spiStop();
    953e:	mov	r0, r4
    9540:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9544:	movs	r0, #0
    9546:	b.n	9554 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9548:	movs	r1, #252	; 0xfc
    954a:	mov	r0, r4
    954c:	bl	94da <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9550:	cmp	r0, #0
    9552:	beq.n	953e <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    9554:	add	sp, #8
    9556:	pop	{r4, pc}

00009558 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    9558:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    955a:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    955c:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    955e:	mov	r5, r1
    9560:	mov	r4, r0
    9562:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    9564:	blx	r3
    9566:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    9568:	mov.w	r1, #24
    956c:	mov	r0, r4
    sector <<= 9;
    956e:	it	ne
    9570:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    9572:	mov	r2, r5
    9574:	bl	91a8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9578:	cbz	r0, 9588 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    957a:	movs	r3, #13
    957c:	strb	r3, [r4, #17]
  spiStop();
    957e:	mov	r0, r4
  return false;
    9580:	movs	r5, #0
  spiStop();
    9582:	bl	90b4 <SharedSpiCard::spiStop()>
  return false;
    9586:	b.n	959e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    9588:	mov	r2, r6
    958a:	movs	r1, #254	; 0xfe
    958c:	mov	r0, r4
    958e:	bl	94da <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9592:	mov	r5, r0
    9594:	cmp	r0, #0
    9596:	beq.n	957e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    9598:	mov	r0, r4
    959a:	bl	90b4 <SharedSpiCard::spiStop()>
}
    959e:	mov	r0, r5
    95a0:	pop	{r4, r5, r6, pc}

000095a2 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    95a2:	push	{r4}
  if (m_dedicatedSpi) {
    95a4:	ldrb	r4, [r0, #28]
    95a6:	cbz	r4, 95b6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    95a8:	ldr	r3, [r0, #0]
    95aa:	ldr	r4, [r3, #40]	; 0x28
    95ac:	movs	r3, #1
    95ae:	mov	ip, r4
}
    95b0:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    95b4:	bx	ip
}
    95b6:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    95ba:	b.w	9558 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000095be <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    95be:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    95c2:	ldr	r5, [sp, #32]
    95c4:	mov	r6, r0
    95c6:	mov	r4, r1
    95c8:	mov	r7, r2
    95ca:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    95ce:	cmp	r4, r8
    95d0:	bne.n	95d8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    95d2:	movs	r0, #1
  }
    95d4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    95d8:	ldr	r3, [r6, #0]
    95da:	mov	r2, r7
    95dc:	mov	r1, r4
    95de:	mov	r0, r6
    95e0:	ldr	r3, [r3, #16]
    95e2:	add.w	r9, r4, #1
    95e6:	blx	r3
    95e8:	cmp	r0, #0
    95ea:	beq.n	95d4 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    95ec:	mov	r0, r4
    95ee:	ldr	r2, [sp, #36]	; 0x24
    95f0:	mov	r1, r7
    95f2:	mov	r4, r9
    95f4:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    95f6:	b.n	95ce <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

000095f8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    95f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95fc:	mov	r5, r0
    95fe:	mov	r4, r1
    9600:	mov	r7, r3
    9602:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9604:	cmp	r4, r6
    9606:	bne.n	960c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    9608:	movs	r0, #1
    960a:	b.n	9626 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    960c:	ldr	r3, [r5, #0]
    960e:	mov	r0, r4
    9610:	ldr	r1, [sp, #24]
    9612:	ldr.w	r8, [r3, #36]	; 0x24
    9616:	blx	r7
    9618:	mov	r1, r4
    961a:	mov	r2, r0
    961c:	mov	r0, r5
    961e:	adds	r4, #1
    9620:	blx	r8
    9622:	cmp	r0, #0
    9624:	bne.n	9604 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    9626:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000962a <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    962a:	movs	r0, #0
    962c:	bx	lr

0000962e <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    962e:	movs	r0, #0
    9630:	bx	lr

00009632 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    9632:	movs	r0, #0
    9634:	bx	lr

00009636 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    9636:	bx	lr

00009638 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9638:	ldr	r3, [pc, #28]	; (9658 <sdIrs()+0x20>)
    963a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    963c:	ldr	r2, [pc, #28]	; (965c <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    963e:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    9640:	ldr	r0, [r3, #48]	; 0x30
    9642:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9644:	ldr	r2, [r2, #0]
    9646:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    9648:	ldr	r2, [r3, #72]	; 0x48
    964a:	bic.w	r2, r2, #129	; 0x81
    964e:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    9650:	ldr	r3, [pc, #12]	; (9660 <sdIrs()+0x28>)
    9652:	strb	r1, [r3, #0]
}
    9654:	bx	lr
    9656:	nop
    9658:	.word	0x402c0000
    965c:	.word	0x200207f8
    9660:	.word	0x20021546

00009664 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    9664:	ldr	r3, [pc, #24]	; (9680 <gpioMux(unsigned char)+0x1c>)
    9666:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    966a:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    966e:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    9672:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    9676:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    967a:	str.w	r0, [r3, #456]	; 0x1c8
}
    967e:	bx	lr
    9680:	.word	0x401f8000

00009684 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    9684:	ldr	r3, [pc, #12]	; (9694 <isBusyCommandComplete()+0x10>)
    9686:	ldr	r0, [pc, #16]	; (9698 <isBusyCommandComplete()+0x14>)
    9688:	ldr	r3, [r3, #48]	; 0x30
    968a:	ands	r0, r3
}
    968c:	clz	r0, r0
    9690:	lsrs	r0, r0, #5
    9692:	bx	lr
    9694:	.word	0x402c0000
    9698:	.word	0x000f0001

0000969c <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    969c:	ldr	r3, [pc, #8]	; (96a8 <isBusyCommandInhibit()+0xc>)
    969e:	ldr	r0, [r3, #36]	; 0x24
}
    96a0:	and.w	r0, r0, #1
    96a4:	bx	lr
    96a6:	nop
    96a8:	.word	0x402c0000

000096ac <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    96ac:	ldr	r3, [pc, #12]	; (96bc <isBusyDat()+0x10>)
    96ae:	ldr	r0, [r3, #36]	; 0x24
    96b0:	eor.w	r0, r0, #16777216	; 0x1000000
}
    96b4:	ubfx	r0, r0, #24, #1
    96b8:	bx	lr
    96ba:	nop
    96bc:	.word	0x402c0000

000096c0 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    96c0:	ldr	r3, [pc, #4]	; (96c8 <isBusyDMA()+0x8>)
    96c2:	ldrb	r0, [r3, #0]
}
    96c4:	bx	lr
    96c6:	nop
    96c8:	.word	0x20021546

000096cc <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    96cc:	ldr	r3, [pc, #12]	; (96dc <isBusyFifoRead()+0x10>)
    96ce:	ldr	r0, [r3, #36]	; 0x24
    96d0:	eor.w	r0, r0, #2048	; 0x800
}
    96d4:	ubfx	r0, r0, #11, #1
    96d8:	bx	lr
    96da:	nop
    96dc:	.word	0x402c0000

000096e0 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    96e0:	ldr	r3, [pc, #12]	; (96f0 <isBusyFifoWrite()+0x10>)
    96e2:	ldr	r0, [r3, #36]	; 0x24
    96e4:	eor.w	r0, r0, #1024	; 0x400
}
    96e8:	ubfx	r0, r0, #10, #1
    96ec:	bx	lr
    96ee:	nop
    96f0:	.word	0x402c0000

000096f4 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    96f4:	ldr	r3, [pc, #12]	; (9704 <isBusyTransferComplete()+0x10>)
    96f6:	ldr	r0, [pc, #16]	; (9708 <isBusyTransferComplete()+0x14>)
    96f8:	ldr	r3, [r3, #48]	; 0x30
    96fa:	ands	r0, r3
}
    96fc:	clz	r0, r0
    9700:	lsrs	r0, r0, #5
    9702:	bx	lr
    9704:	.word	0x402c0000
    9708:	.word	0x117f0002

0000970c <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    970c:	mov.w	r3, #1000	; 0x3e8
    9710:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9712:	ldr	r3, [pc, #140]	; (97a0 <setSdclk(unsigned long)+0x94>)
    9714:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9716:	sub.w	r3, r3, #147456	; 0x24000
    971a:	ldr.w	r1, [r3, #256]	; 0x100
    971e:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9720:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9724:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9728:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    972a:	udiv	r1, r1, r3
    972e:	ldr	r3, [pc, #116]	; (97a4 <setSdclk(unsigned long)+0x98>)
    9730:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9734:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9736:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    973a:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    973c:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    973e:	lsls	r4, r2, #4
    9740:	udiv	r4, r3, r4
    9744:	cmp	r4, r0
    9746:	bls.n	974c <setSdclk(unsigned long)+0x40>
    9748:	subs	r1, #1
    974a:	bne.n	9752 <setSdclk(unsigned long)+0x46>
    974c:	mov	r4, r2
    974e:	movs	r1, #1
    9750:	b.n	975a <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    9752:	lsls	r2, r2, #1
    9754:	b.n	973e <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    9756:	adds	r1, #1
    9758:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    975a:	udiv	r5, r3, r4
    975e:	cmp	r5, r0
    9760:	bls.n	976a <setSdclk(unsigned long)+0x5e>
    9762:	cmp	r1, #16
    9764:	add.w	r5, r2, r4
    9768:	bne.n	9756 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    976a:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    976e:	subs	r1, #1
  sdclkfs >>= 1;
    9770:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9772:	muls	r4, r0
    9774:	ldr	r0, [pc, #48]	; (97a8 <setSdclk(unsigned long)+0x9c>)
    9776:	udiv	r3, r3, r4
    977a:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    977c:	ldr	r0, [pc, #44]	; (97ac <setSdclk(unsigned long)+0xa0>)
    977e:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    9780:	bic.w	r3, r3, #1044480	; 0xff000
    9784:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9788:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    978c:	orr.w	r3, r3, r2, lsl #8
    9790:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9794:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    9796:	ldr	r3, [r0, #36]	; 0x24
    9798:	lsls	r3, r3, #28
    979a:	bpl.n	9796 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    979c:	pop	{r4, r5, pc}
    979e:	nop
    97a0:	.word	0x400fc000
    97a4:	.word	0x5e69ec00
    97a8:	.word	0x20013fd0
    97ac:	.word	0x402c0000

000097b0 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    97b0:	ldr	r3, [pc, #4]	; (97b8 <SdioCard::errorCode() const+0x8>)
    97b2:	ldrb	r0, [r3, #0]
    97b4:	bx	lr
    97b6:	nop
    97b8:	.word	0x2000239c

000097bc <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    97bc:	ldr	r3, [pc, #4]	; (97c4 <SdioCard::errorData() const+0x8>)
    97be:	ldr	r0, [r3, #0]
}
    97c0:	bx	lr
    97c2:	nop
    97c4:	.word	0x200207f8

000097c8 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    97c8:	ldr	r3, [pc, #20]	; (97e0 <SdioCard::readCID(CID*)+0x18>)
    97ca:	add.w	r2, r3, #16
    97ce:	ldr.w	r0, [r3], #4
    97d2:	cmp	r3, r2
    97d4:	str.w	r0, [r1], #4
    97d8:	bne.n	97ce <SdioCard::readCID(CID*)+0x6>
  return true;
}
    97da:	movs	r0, #1
    97dc:	bx	lr
    97de:	nop
    97e0:	.word	0x20021486

000097e4 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    97e4:	ldr	r3, [pc, #20]	; (97fc <SdioCard::readCSD(csd_t*)+0x18>)
    97e6:	add.w	r2, r3, #16
    97ea:	ldr.w	r0, [r3], #4
    97ee:	cmp	r3, r2
    97f0:	str.w	r0, [r1], #4
    97f4:	bne.n	97ea <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    97f6:	movs	r0, #1
    97f8:	bx	lr
    97fa:	nop
    97fc:	.word	0x20021496

00009800 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9800:	ldr	r3, [pc, #8]	; (980c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    9802:	movs	r0, #1
  *ocr = m_ocr;
    9804:	ldr	r3, [r3, #0]
    9806:	str	r3, [r1, #0]
}
    9808:	bx	lr
    980a:	nop
    980c:	.word	0x200201ec

00009810 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    9810:	bx	lr
	...

00009814 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    9814:	push	{r3, r4, r5, r6, r7, lr}
    9816:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9818:	ldr	r7, [pc, #24]	; (9834 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    981a:	bl	bc98 <micros>
    981e:	mov	r6, r0
  while (fcn()) {
    9820:	blx	r5
    9822:	mov	r4, r0
    9824:	cbz	r0, 9830 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9826:	bl	bc98 <micros>
    982a:	subs	r0, r0, r6
    982c:	cmp	r0, r7
    982e:	bls.n	9820 <waitTimeout(bool (*)())+0xc>
}
    9830:	mov	r0, r4
    9832:	pop	{r3, r4, r5, r6, r7, pc}
    9834:	.word	0x000f4240

00009838 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    9838:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    983c:	ldr	r7, [pc, #44]	; (986c <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    983e:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9840:	ldr.w	r8, [pc, #44]	; 9870 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    9844:	str	r0, [r7, #0]
  uint32_t m = micros();
    9846:	bl	bc98 <micros>
    984a:	mov	r6, r0
  while (fcn()) {
    984c:	blx	r5
    984e:	mov	r4, r0
    9850:	cbnz	r0, 985c <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    9852:	movs	r3, #0
}
    9854:	mov	r0, r4
      m_busyFcn = 0;
    9856:	str	r3, [r7, #0]
}
    9858:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    985c:	bl	bc98 <micros>
    9860:	subs	r0, r0, r6
    9862:	cmp	r0, r8
    9864:	bhi.n	9852 <yieldTimeout(bool (*)())+0x1a>
    yield();
    9866:	bl	c960 <yield>
    986a:	b.n	984c <yieldTimeout(bool (*)())+0x14>
    986c:	.word	0x200207f4
    9870:	.word	0x000f4240

00009874 <SdioCard::~SdioCard()>:
    9874:	push	{r4, lr}
    9876:	mov	r4, r0
    9878:	movs	r1, #12
    987a:	bl	ce8c <operator delete(void*, unsigned int)>
    987e:	mov	r0, r4
    9880:	pop	{r4, pc}
	...

00009884 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    9884:	push	{r3, lr}
    gpioMux(0);
    9886:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9888:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    988c:	bl	9664 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9890:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9894:	ldr	r3, [pc, #24]	; (98b0 <enableGPIO(bool) [clone .part.0]+0x2c>)
    9896:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    989a:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    989e:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    98a2:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    98a6:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    98aa:	str.w	r2, [r3, #952]	; 0x3b8
}
    98ae:	pop	{r3, pc}
    98b0:	.word	0x401f8000

000098b4 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    98b4:	ldr	r3, [pc, #184]	; (9970 <initSDHC()+0xbc>)
    gpioMux(5);
    98b6:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    98b8:	ldr.w	r2, [r3, #256]	; 0x100
    98bc:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    98c0:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    98c2:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    98c6:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    98ca:	ldr	r4, [pc, #168]	; (9974 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    98cc:	bic.w	r2, r2, #63	; 0x3f
    98d0:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    98d4:	ldr.w	r2, [r3, #256]	; 0x100
    98d8:	orr.w	r2, r2, #24
    98dc:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    98e0:	ldr.w	r2, [r3, #256]	; 0x100
    98e4:	bic.w	r2, r2, #128	; 0x80
    98e8:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    98ec:	add.w	r3, r3, #147456	; 0x24000
    98f0:	ldr.w	r2, [r3, #128]	; 0x80
    98f4:	orr.w	r2, r2, #12
    98f8:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    98fc:	ldr	r2, [r3, #36]	; 0x24
    98fe:	bic.w	r2, r2, #14336	; 0x3800
    9902:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9904:	ldr	r2, [r3, #28]
    9906:	orr.w	r2, r2, #65536	; 0x10000
    990a:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    990c:	ldr	r2, [r3, #36]	; 0x24
    990e:	orr.w	r2, r2, #2048	; 0x800
    9912:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    9914:	bl	9664 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    9918:	ldr	r3, [r4, #72]	; 0x48
    991a:	orr.w	r3, r3, #2147483648	; 0x80000000
    991e:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9920:	ldr	r3, [r4, #44]	; 0x2c
    9922:	orr.w	r3, r3, #16777216	; 0x1000000
    9926:	orr.w	r3, r3, #32768	; 0x8000
    992a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    992c:	ldr	r3, [r4, #44]	; 0x2c
    992e:	lsls	r2, r3, #7
    9930:	bmi.n	992c <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9932:	mov.w	r0, #400	; 0x190
    9936:	bl	970c <setSdclk(unsigned long)>
  if (enable) {
    993a:	bl	9884 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    993e:	ldr	r3, [pc, #56]	; (9978 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9940:	ldr	r2, [pc, #56]	; (997c <initSDHC()+0xc8>)
    9942:	str	r3, [r4, #52]	; 0x34
    9944:	ldr	r3, [pc, #56]	; (9980 <initSDHC()+0xcc>)
    9946:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    994a:	ldr	r3, [pc, #56]	; (9984 <initSDHC()+0xd0>)
    994c:	movs	r2, #96	; 0x60
    994e:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9952:	mov.w	r3, #3758153728	; 0xe000e000
    9956:	mov.w	r2, #16384	; 0x4000
    995a:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    995e:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9960:	ldr	r2, [pc, #16]	; (9974 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9962:	orr.w	r3, r3, #134217728	; 0x8000000
    9966:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9968:	ldr	r3, [r2, #44]	; 0x2c
    996a:	lsls	r3, r3, #4
    996c:	bmi.n	9968 <initSDHC()+0xb4>
}
    996e:	pop	{r4, pc}
    9970:	.word	0x400d8000
    9974:	.word	0x402c0000
    9978:	.word	0x117f000b
    997c:	.word	0x00009639
    9980:	.word	0x20002400
    9984:	.word	0xe000e400

00009988 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9988:	ldr	r3, [pc, #16]	; (999c <SdioCard::type() const+0x14>)
    998a:	ldrb	r3, [r3, #0]
    998c:	cbz	r3, 9998 <SdioCard::type() const+0x10>
    998e:	ldr	r3, [pc, #16]	; (99a0 <SdioCard::type() const+0x18>)
    9990:	ldrb	r0, [r3, #0]
    9992:	adds	r0, #2
    9994:	uxtb	r0, r0
    9996:	bx	lr
    9998:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    999a:	bx	lr
    999c:	.word	0x20021483
    99a0:	.word	0x20021484

000099a4 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    99a4:	push	{r3, r4, r5, lr}
    99a6:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    99a8:	ldr	r0, [pc, #80]	; (99fc <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    99aa:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    99ac:	bl	9814 <waitTimeout(bool (*)())>
    99b0:	cbnz	r0, 99f2 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    99b2:	ldr	r3, [pc, #76]	; (9a00 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    99b4:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    99b6:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    99b8:	bpl.n	99ca <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    99ba:	ldr	r2, [r3, #72]	; 0x48
    99bc:	bic.w	r2, r2, #255	; 0xff
    99c0:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    99c2:	uxtb	r2, r4
    99c4:	ldr	r1, [r3, #72]	; 0x48
    99c6:	orrs	r2, r1
    99c8:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    99ca:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    99ce:	ldr	r5, [pc, #48]	; (9a00 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    99d0:	ldr	r0, [pc, #48]	; (9a04 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    99d2:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    99d4:	bl	9814 <waitTimeout(bool (*)())>
    99d8:	cbnz	r0, 99f2 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    99da:	ldr	r2, [r5, #48]	; 0x30
    99dc:	ldr	r3, [pc, #40]	; (9a08 <cardCommand(unsigned long, unsigned long)+0x64>)
    99de:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    99e0:	ldr	r2, [r3, #0]
    99e2:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    99e4:	ldr	r2, [r3, #0]
    99e6:	lsls	r2, r2, #31
    99e8:	bpl.n	99f2 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    99ea:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    99ec:	tst.w	r3, #983040	; 0xf0000
    99f0:	beq.n	99f6 <cardCommand(unsigned long, unsigned long)+0x52>
    99f2:	movs	r0, #0
}
    99f4:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    99f6:	movs	r0, #1
    99f8:	b.n	99f4 <cardCommand(unsigned long, unsigned long)+0x50>
    99fa:	nop
    99fc:	.word	0x0000969d
    9a00:	.word	0x402c0000
    9a04:	.word	0x00009685
    9a08:	.word	0x200207f8

00009a0c <statusCMD13()>:
static uint32_t statusCMD13() {
    9a0c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9a0e:	ldr	r3, [pc, #16]	; (9a20 <statusCMD13()+0x14>)
    9a10:	ldr	r0, [pc, #16]	; (9a24 <statusCMD13()+0x18>)
    9a12:	ldr	r1, [r3, #0]
    9a14:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9a18:	cbz	r0, 9a1e <statusCMD13()+0x12>
    9a1a:	ldr	r3, [pc, #12]	; (9a28 <statusCMD13()+0x1c>)
    9a1c:	ldr	r0, [r3, #16]
}
    9a1e:	pop	{r3, pc}
    9a20:	.word	0x200201f0
    9a24:	.word	0x0d1a0000
    9a28:	.word	0x402c0000

00009a2c <isBusyCMD13()>:
static bool isBusyCMD13() {
    9a2c:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9a2e:	bl	9a0c <statusCMD13()>
    9a32:	eor.w	r0, r0, #256	; 0x100
}
    9a36:	ubfx	r0, r0, #8, #1
    9a3a:	pop	{r3, pc}

00009a3c <SdioCard::status()>:
  return statusCMD13();
    9a3c:	b.w	9a0c <statusCMD13()>

00009a40 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9a40:	ldr	r3, [pc, #76]	; (9a90 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9a42:	push	{r4, r5, lr}
    9a44:	mov	r4, r1
    9a46:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9a48:	ldr	r1, [r3, #0]
    9a4a:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9a4e:	cbz	r0, 9a8c <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9a50:	ldr	r3, [pc, #64]	; (9a94 <readReg16(unsigned long, void*)+0x54>)
    9a52:	add.w	r5, r4, #15
    9a56:	ldr	r2, [r3, #16]
    9a58:	str	r2, [sp, #0]
    9a5a:	ldr	r2, [r3, #20]
    9a5c:	str	r2, [sp, #4]
    9a5e:	ldr	r2, [r3, #24]
    9a60:	str	r2, [sp, #8]
    9a62:	ldr	r3, [r3, #28]
    9a64:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9a66:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9a68:	bic.w	r2, r3, #3
    9a6c:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    9a70:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9a72:	adds	r2, #16
    9a74:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    9a76:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9a78:	add	r2, sp
    9a7a:	ldr.w	r2, [r2, #-16]
    9a7e:	lsr.w	r2, r2, r1
    9a82:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9a86:	bne.n	9a68 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9a88:	movs	r3, #0
    9a8a:	strb	r3, [r4, #15]
}
    9a8c:	add	sp, #20
    9a8e:	pop	{r4, r5, pc}
    9a90:	.word	0x200201f0
    9a94:	.word	0x402c0000

00009a98 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9a98:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    9a9a:	ldr	r0, [pc, #32]	; (9abc <waitDmaStatus()+0x24>)
    9a9c:	bl	9838 <yieldTimeout(bool (*)())>
    9aa0:	cbnz	r0, 9ab8 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9aa2:	ldr	r3, [pc, #28]	; (9ac0 <waitDmaStatus()+0x28>)
    9aa4:	ldr	r2, [r3, #0]
    9aa6:	lsls	r2, r2, #30
    9aa8:	bpl.n	9ab6 <waitDmaStatus()+0x1e>
    9aaa:	ldr	r2, [r3, #0]
    9aac:	ldr	r3, [pc, #20]	; (9ac4 <waitDmaStatus()+0x2c>)
    9aae:	tst	r2, r3
    9ab0:	ite	eq
    9ab2:	moveq	r0, #1
    9ab4:	movne	r0, #0
}
    9ab6:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9ab8:	movs	r0, #0
    9aba:	b.n	9ab6 <waitDmaStatus()+0x1e>
    9abc:	.word	0x000096c1
    9ac0:	.word	0x200207f8
    9ac4:	.word	0x117f0000

00009ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9ac8:	push	{r3, r4, r5, r6, r7, lr}
    9aca:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9acc:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    9ace:	mov	r7, r0
    9ad0:	mov	r4, r1
    9ad2:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9ad4:	bne.n	9ad8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    9ad6:	cbnz	r5, 9aea <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    9ad8:	ldr	r3, [pc, #96]	; (9b3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9ada:	movs	r2, #37	; 0x25
    9adc:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ade:	movw	r2, #501	; 0x1f5
    9ae2:	ldr	r3, [pc, #92]	; (9b40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9ae4:	str	r2, [r3, #0]
}
    9ae6:	movs	r0, #0
    9ae8:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    9aea:	ldr	r0, [pc, #88]	; (9b44 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    9aec:	bl	9838 <yieldTimeout(bool (*)())>
    9af0:	cbz	r0, 9b00 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9af2:	ldr	r3, [pc, #72]	; (9b3c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9af4:	movs	r2, #10
    9af6:	strb	r2, [r3, #0]
  m_errorLine = line;
    9af8:	mov.w	r2, #504	; 0x1f8
    9afc:	ldr	r3, [pc, #64]	; (9b40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9afe:	b.n	9ae4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    9b00:	ldr	r3, [pc, #68]	; (9b48 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    9b02:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    9b04:	ldr	r1, [pc, #68]	; (9b4c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    9b06:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9b08:	ldr	r3, [pc, #68]	; (9b50 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    9b0a:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9b0c:	ldr	r3, [pc, #68]	; (9b54 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    9b0e:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9b10:	and.w	r3, r3, r5, lsl #16
    9b14:	orr.w	r3, r3, #512	; 0x200
    9b18:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9b1a:	ldr	r3, [pc, #60]	; (9b58 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9b1c:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9b1e:	ldr	r3, [pc, #60]	; (9b5c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    9b20:	ldrb	r3, [r3, #0]
    9b22:	cbnz	r3, 9b26 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9b24:	lsls	r4, r4, #9
    9b26:	mov	r1, r4
    9b28:	mov	r0, r7
    9b2a:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9b2e:	cmp	r0, #0
    9b30:	beq.n	9ae6 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9b32:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    9b36:	b.w	9a98 <waitDmaStatus()>
    9b3a:	nop
    9b3c:	.word	0x2000239c
    9b40:	.word	0x20013fd8
    9b44:	.word	0x00009a2d
    9b48:	.word	0x20021546
    9b4c:	.word	0x402c0000
    9b50:	.word	0x200207f8
    9b54:	.word	0x1fff0000
    9b58:	.word	0x117f0002
    9b5c:	.word	0x20021484

00009b60 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9b60:	push	{r3, r4, r5, r6, r7, lr}
    9b62:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9b64:	ldrb	r0, [r0, #8]
    9b66:	mov	r4, r1
    9b68:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9b6a:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9b6c:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9b6e:	bmi.n	9b8e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9b70:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    9b72:	cmp	r4, r6
    9b74:	beq.n	9b98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    9b76:	ldr	r3, [r7, #0]
    9b78:	mov	r2, r5
    9b7a:	mov	r1, r4
    9b7c:	mov	r0, r7
    9b7e:	ldr	r3, [r3, #16]
    9b80:	adds	r4, #1
    9b82:	add.w	r5, r5, #512	; 0x200
    9b86:	blx	r3
    9b88:	cmp	r0, #0
    9b8a:	bne.n	9b72 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9b8c:	b.n	9baa <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    9b8e:	lsls	r0, r2, #30
    9b90:	beq.n	9bb6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    9b92:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9b94:	cmp	r4, r6
    9b96:	bne.n	9b9c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9b98:	movs	r0, #1
    9b9a:	b.n	9bac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9b9c:	ldr	r3, [r7, #0]
    9b9e:	mov	r2, r5
    9ba0:	mov	r1, r4
    9ba2:	mov	r0, r7
    9ba4:	ldr	r3, [r3, #16]
    9ba6:	blx	r3
    9ba8:	cbnz	r0, 9bae <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    9baa:	movs	r0, #0
}
    9bac:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9bae:	adds	r4, #1
    9bb0:	add.w	r5, r5, #512	; 0x200
    9bb4:	b.n	9b94 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9bb6:	ldr	r0, [pc, #24]	; (9bd0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    9bb8:	bl	9ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9bbc:	cmp	r0, #0
    9bbe:	bne.n	9b98 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9bc0:	ldr	r3, [pc, #16]	; (9bd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    9bc2:	movs	r2, #12
    9bc4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9bc6:	movw	r2, #929	; 0x3a1
    9bca:	ldr	r3, [pc, #12]	; (9bd8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9bcc:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9bce:	b.n	9bac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9bd0:	.word	0x123a0037
    9bd4:	.word	0x2000239c
    9bd8:	.word	0x20013fd8

00009bdc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9bdc:	push	{r3, r4, r5, r6, r7, lr}
    9bde:	mov	r7, r0
    9be0:	ldrb	r0, [r0, #8]
    9be2:	mov	r4, r1
    9be4:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9be6:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9be8:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9bea:	bmi.n	9c0a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9bec:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9bee:	cmp	r4, r6
    9bf0:	beq.n	9c14 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    9bf2:	ldr	r3, [r7, #0]
    9bf4:	mov	r2, r5
    9bf6:	mov	r1, r4
    9bf8:	mov	r0, r7
    9bfa:	ldr	r3, [r3, #36]	; 0x24
    9bfc:	adds	r4, #1
    9bfe:	add.w	r5, r5, #512	; 0x200
    9c02:	blx	r3
    9c04:	cmp	r0, #0
    9c06:	bne.n	9bee <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9c08:	b.n	9c26 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    9c0a:	lsls	r0, r2, #30
    9c0c:	beq.n	9c32 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    9c0e:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9c10:	cmp	r4, r6
    9c12:	bne.n	9c18 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9c14:	movs	r0, #1
    9c16:	b.n	9c28 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    9c18:	ldr	r3, [r7, #0]
    9c1a:	mov	r2, r5
    9c1c:	mov	r1, r4
    9c1e:	mov	r0, r7
    9c20:	ldr	r3, [r3, #36]	; 0x24
    9c22:	blx	r3
    9c24:	cbnz	r0, 9c2a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    9c26:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    9c28:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9c2a:	adds	r4, #1
    9c2c:	add.w	r5, r5, #512	; 0x200
    9c30:	b.n	9c10 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9c32:	ldr	r0, [pc, #24]	; (9c4c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9c34:	bl	9ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9c38:	cmp	r0, #0
    9c3a:	bne.n	9c14 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9c3c:	ldr	r3, [pc, #16]	; (9c50 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    9c3e:	movs	r2, #14
    9c40:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c42:	movw	r2, #1085	; 0x43d
    9c46:	ldr	r3, [pc, #12]	; (9c54 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    9c48:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    9c4a:	b.n	9c28 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9c4c:	.word	0x193a0027
    9c50:	.word	0x2000239c
    9c54:	.word	0x20013fd8

00009c58 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9c58:	ldr	r2, [pc, #88]	; (9cb4 <SdioCard::sectorCount()+0x5c>)
    9c5a:	ldrb	r3, [r2, #0]
    9c5c:	ands.w	r3, r3, #192	; 0xc0
    9c60:	bne.n	9c94 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9c62:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9c64:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9c66:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9c6a:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9c6c:	lsls	r0, r0, #2
    9c6e:	orr.w	r0, r0, r3, lsl #10
    9c72:	ldrb	r3, [r2, #8]
    9c74:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9c78:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9c7a:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9c7c:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c80:	adds	r0, #1
    9c82:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9c86:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9c88:	orr.w	r3, r3, r1, lsr #7
    9c8c:	add	r3, r2
    9c8e:	subs	r3, #7
    9c90:	lsls	r0, r3
    9c92:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9c94:	cmp	r3, #64	; 0x40
    9c96:	bne.n	9cb0 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9c98:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9c9a:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9c9c:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9c9e:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9ca2:	add.w	r0, r0, r3, lsl #16
    9ca6:	ldrb	r3, [r2, #8]
    9ca8:	add.w	r0, r0, r3, lsl #8
    9cac:	lsls	r0, r0, #10
    9cae:	bx	lr
  } else {
    return 0;
    9cb0:	movs	r0, #0
}
    9cb2:	bx	lr
    9cb4:	.word	0x20021496

00009cb8 <SdioCard::isBusy()>:
    9cb8:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9cba:	lsls	r3, r3, #31
    9cbc:	bpl.n	9cd0 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9cbe:	ldr	r3, [pc, #40]	; (9ce8 <SdioCard::isBusy()+0x30>)
    9cc0:	ldr	r3, [r3, #0]
    9cc2:	cbz	r3, 9cc6 <SdioCard::isBusy()+0xe>
    9cc4:	bx	r3
    9cc6:	ldr	r3, [pc, #36]	; (9cec <SdioCard::isBusy()+0x34>)
    9cc8:	ldrb	r0, [r3, #0]
    9cca:	cbz	r0, 9ce6 <SdioCard::isBusy()+0x2e>
    9ccc:	b.w	9a2c <isBusyCMD13()>
    if (m_transferActive) {
    9cd0:	ldr	r3, [pc, #28]	; (9cf0 <SdioCard::isBusy()+0x38>)
    9cd2:	ldrb	r3, [r3, #0]
    9cd4:	cbz	r3, 9cda <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    9cd6:	b.w	96f4 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9cda:	ldr	r3, [pc, #24]	; (9cf4 <SdioCard::isBusy()+0x3c>)
    9cdc:	ldr	r0, [r3, #36]	; 0x24
    9cde:	eor.w	r0, r0, #16777216	; 0x1000000
    9ce2:	ubfx	r0, r0, #24, #1
}
    9ce6:	bx	lr
    9ce8:	.word	0x200207f4
    9cec:	.word	0x20021482
    9cf0:	.word	0x20021485
    9cf4:	.word	0x402c0000

00009cf8 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9cf8:	push	{r3, r4, r5, lr}
    9cfa:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9cfc:	ldr	r2, [pc, #160]	; (9da0 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9cfe:	ldrb	r3, [r2, #10]
    9d00:	ands.w	r4, r3, #64	; 0x40
    9d04:	bne.n	9d2c <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    9d06:	and.w	r3, r3, #63	; 0x3f
    9d0a:	ldrb	r2, [r2, #11]
    9d0c:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9d0e:	orr.w	r3, r3, r2, lsr #7
    9d12:	adds	r2, r5, #1
    9d14:	orrs	r2, r1
    9d16:	tst	r3, r2
    9d18:	beq.n	9d2c <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    9d1a:	ldr	r3, [pc, #136]	; (9da4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9d1c:	movs	r2, #39	; 0x27
    9d1e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d20:	movw	r2, #770	; 0x302
    9d24:	ldr	r3, [pc, #128]	; (9da8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9d26:	str	r2, [r3, #0]
}
    9d28:	mov	r0, r4
    9d2a:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9d2c:	ldr	r3, [pc, #124]	; (9dac <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    9d2e:	ldrb	r3, [r3, #0]
    9d30:	cbnz	r3, 9d36 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    9d32:	lsls	r1, r1, #9
    lastSector <<= 9;
    9d34:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9d36:	ldr	r0, [pc, #120]	; (9db0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    9d38:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9d3c:	mov	r4, r0
    9d3e:	cbnz	r0, 9d4e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    9d40:	ldr	r3, [pc, #96]	; (9da4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9d42:	movs	r2, #15
    9d44:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d46:	movw	r2, #778	; 0x30a
    9d4a:	ldr	r3, [pc, #92]	; (9da8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9d4c:	b.n	9d26 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9d4e:	mov	r1, r5
    9d50:	ldr	r0, [pc, #96]	; (9db4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    9d52:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9d56:	mov	r4, r0
    9d58:	cbnz	r0, 9d68 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    9d5a:	ldr	r3, [pc, #72]	; (9da4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9d5c:	movs	r2, #16
    9d5e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d60:	movw	r2, #781	; 0x30d
    9d64:	ldr	r3, [pc, #64]	; (9da8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9d66:	b.n	9d26 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9d68:	movs	r1, #0
    9d6a:	ldr	r0, [pc, #76]	; (9db8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9d6c:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9d70:	mov	r4, r0
    9d72:	cbnz	r0, 9d82 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9d74:	ldr	r3, [pc, #44]	; (9da4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9d76:	movs	r2, #17
    9d78:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d7a:	mov.w	r2, #784	; 0x310
    9d7e:	ldr	r3, [pc, #40]	; (9da8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9d80:	b.n	9d26 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    9d82:	ldr	r0, [pc, #56]	; (9dbc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9d84:	bl	9814 <waitTimeout(bool (*)())>
    9d88:	cmp	r0, #0
    9d8a:	beq.n	9d28 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9d8c:	ldr	r3, [pc, #20]	; (9da4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9d8e:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d90:	movs	r4, #0
  m_errorCode = code;
    9d92:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d94:	movw	r2, #787	; 0x313
    9d98:	ldr	r3, [pc, #12]	; (9da8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9d9a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9d9c:	b.n	9d28 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9d9e:	nop
    9da0:	.word	0x20021496
    9da4:	.word	0x2000239c
    9da8:	.word	0x20013fd8
    9dac:	.word	0x20021484
    9db0:	.word	0x201a0000
    9db4:	.word	0x211a0000
    9db8:	.word	0x261b0000
    9dbc:	.word	0x00009a2d

00009dc0 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9dc0:	push	{r4, lr}
  if (!m_transferActive) {
    9dc2:	ldr	r4, [pc, #60]	; (9e00 <waitTransferComplete()+0x40>)
    9dc4:	ldrb	r3, [r4, #0]
    9dc6:	cbnz	r3, 9dcc <waitTransferComplete()+0xc>
    return true;
    9dc8:	movs	r0, #1
}
    9dca:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9dcc:	ldr	r0, [pc, #52]	; (9e04 <waitTransferComplete()+0x44>)
    9dce:	bl	9814 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9dd2:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9dd4:	ldr	r2, [pc, #48]	; (9e08 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    9dd6:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9dd8:	ldr	r1, [r2, #48]	; 0x30
    9dda:	ldr	r3, [pc, #48]	; (9e0c <waitTransferComplete()+0x4c>)
    9ddc:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9dde:	ldr	r1, [r3, #0]
    9de0:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9de2:	cbnz	r0, 9dec <waitTransferComplete()+0x2c>
    9de4:	ldr	r2, [r3, #0]
    9de6:	ldr	r3, [pc, #40]	; (9e10 <waitTransferComplete()+0x50>)
    9de8:	tst	r2, r3
    9dea:	beq.n	9dc8 <waitTransferComplete()+0x8>
  m_errorCode = code;
    9dec:	ldr	r3, [pc, #36]	; (9e14 <waitTransferComplete()+0x54>)
    9dee:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9df0:	movs	r0, #0
  m_errorCode = code;
    9df2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9df4:	movw	r2, #634	; 0x27a
    9df8:	ldr	r3, [pc, #28]	; (9e18 <waitTransferComplete()+0x58>)
    9dfa:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9dfc:	b.n	9dca <waitTransferComplete()+0xa>
    9dfe:	nop
    9e00:	.word	0x20021485
    9e04:	.word	0x000096f5
    9e08:	.word	0x402c0000
    9e0c:	.word	0x200207f8
    9e10:	.word	0x117f0000
    9e14:	.word	0x2000239c
    9e18:	.word	0x20013fd8

00009e1c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9e1c:	push	{r4, r5, r6, r7, lr}
    9e1e:	ldrb	r5, [r0, #8]
    9e20:	sub.w	sp, sp, #516	; 0x204
    9e24:	mov	r4, r0
    9e26:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9e28:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9e2c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9e2e:	beq.n	9e68 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    9e30:	lsls	r3, r2, #30
    9e32:	beq.n	9e42 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9e34:	mov	r1, r6
      ptr = aligned;
    9e36:	mov	r6, sp
      memcpy(aligned, src, 512);
    9e38:	mov.w	r2, #512	; 0x200
    9e3c:	mov	r0, sp
    9e3e:	bl	a79c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9e42:	movs	r3, #1
    9e44:	mov	r2, r6
    9e46:	mov	r1, r7
    9e48:	ldr	r0, [pc, #104]	; (9eb4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9e4a:	bl	9ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9e4e:	mov	r5, r0
    9e50:	cbnz	r0, 9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9e52:	ldr	r3, [pc, #100]	; (9eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9e54:	movs	r2, #13
    9e56:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e58:	movw	r2, #1041	; 0x411
    9e5c:	ldr	r3, [pc, #92]	; (9ebc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9e5e:	str	r2, [r3, #0]
}
    9e60:	mov	r0, r5
    9e62:	add.w	sp, sp, #516	; 0x204
    9e66:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    9e68:	bl	9dc0 <waitTransferComplete()>
    9e6c:	cmp	r0, #0
    9e6e:	beq.n	9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9e70:	ldrb	r3, [r4, #9]
    9e72:	cmp	r3, #2
    9e74:	bne.n	9e7c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    9e76:	ldr	r3, [r4, #4]
    9e78:	cmp	r3, r7
    9e7a:	beq.n	9e9c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9e7c:	ldr	r3, [r4, #0]
    9e7e:	mov	r0, r4
    9e80:	ldr	r3, [r3, #32]
    9e82:	blx	r3
    9e84:	cmp	r0, #0
    9e86:	beq.n	9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9e88:	ldr	r3, [r4, #0]
    9e8a:	mov	r1, r7
    9e8c:	mov	r0, r4
    9e8e:	ldr	r3, [r3, #96]	; 0x60
    9e90:	blx	r3
    9e92:	cmp	r0, #0
    9e94:	beq.n	9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9e96:	movs	r3, #2
      m_curSector = sector;
    9e98:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9e9a:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9e9c:	ldr	r3, [r4, #0]
    9e9e:	mov	r1, r6
    9ea0:	mov	r0, r4
    9ea2:	ldr	r3, [r3, #92]	; 0x5c
    9ea4:	blx	r3
    9ea6:	cmp	r0, #0
    9ea8:	beq.n	9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9eaa:	ldr	r3, [r4, #4]
  return true;
    9eac:	mov	r5, r0
    m_curSector++;
    9eae:	adds	r3, #1
    9eb0:	str	r3, [r4, #4]
    9eb2:	b.n	9e60 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9eb4:	.word	0x183a0001
    9eb8:	.word	0x2000239c
    9ebc:	.word	0x20013fd8

00009ec0 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9ec0:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9ec2:	ldr	r4, [pc, #92]	; (9f20 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9ec4:	movs	r1, #0
    9ec6:	ldr	r0, [pc, #92]	; (9f24 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9ec8:	ldr	r3, [r4, #40]	; 0x28
    9eca:	bic.w	r3, r3, #65536	; 0x10000
    9ece:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9ed0:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9ed4:	mov	r5, r0
    9ed6:	cbnz	r0, 9eea <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    9ed8:	ldr	r3, [pc, #76]	; (9f28 <SdioCard::readStop()+0x68>)
    9eda:	movs	r2, #9
    9edc:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ede:	movw	r2, #573	; 0x23d
    9ee2:	ldr	r3, [pc, #72]	; (9f2c <SdioCard::readStop()+0x6c>)
    9ee4:	str	r2, [r3, #0]
}
    9ee6:	mov	r0, r5
    9ee8:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    9eea:	ldr	r0, [pc, #68]	; (9f30 <SdioCard::readStop()+0x70>)
    9eec:	bl	9838 <yieldTimeout(bool (*)())>
    9ef0:	cbz	r0, 9f04 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    9ef2:	ldr	r3, [pc, #52]	; (9f28 <SdioCard::readStop()+0x68>)
    9ef4:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9ef6:	movs	r5, #0
  m_errorCode = code;
    9ef8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9efa:	mov.w	r2, #576	; 0x240
    9efe:	ldr	r3, [pc, #44]	; (9f2c <SdioCard::readStop()+0x6c>)
    9f00:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    9f02:	b.n	9ee6 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    9f04:	ldr	r3, [r4, #36]	; 0x24
    9f06:	lsls	r3, r3, #30
    9f08:	bpl.n	9ee6 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    9f0a:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9f0c:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9f0e:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    9f10:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    9f14:	orr.w	r2, r2, #67108864	; 0x4000000
    9f18:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    9f1a:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    9f1c:	str	r3, [r4, #40]	; 0x28
    9f1e:	b.n	9ee6 <SdioCard::readStop()+0x26>
    9f20:	.word	0x402c0000
    9f24:	.word	0x0cdb0000
    9f28:	.word	0x2000239c
    9f2c:	.word	0x20013fd8
    9f30:	.word	0x000096ad

00009f34 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    9f34:	push	{r4, r5, r6, lr}
    9f36:	mov	r4, r1
  if (!waitTransferComplete()) {
    9f38:	bl	9dc0 <waitTransferComplete()>
    9f3c:	mov	r5, r0
    9f3e:	cbz	r0, 9f78 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    9f40:	ldr	r3, [pc, #100]	; (9fa8 <SdioCard::writeData(unsigned char const*)+0x74>)
    9f42:	ldr	r2, [r3, #36]	; 0x24
    9f44:	lsls	r2, r2, #23
    9f46:	bmi.n	9f58 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9f48:	ldr	r2, [r3, #40]	; 0x28
    9f4a:	bic.w	r2, r2, #65536	; 0x10000
    9f4e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9f50:	ldr	r2, [r3, #40]	; 0x28
    9f52:	orr.w	r2, r2, #131072	; 0x20000
    9f56:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9f58:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9f5a:	ldr	r0, [pc, #80]	; (9fac <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9f5c:	orr.w	r2, r2, #65536	; 0x10000
    9f60:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9f62:	bl	9814 <waitTimeout(bool (*)())>
    9f66:	cbz	r0, 9f7c <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    9f68:	ldr	r3, [pc, #68]	; (9fb0 <SdioCard::writeData(unsigned char const*)+0x7c>)
    9f6a:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9f6c:	movs	r5, #0
  m_errorCode = code;
    9f6e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f70:	mov.w	r2, #1016	; 0x3f8
    9f74:	ldr	r3, [pc, #60]	; (9fb4 <SdioCard::writeData(unsigned char const*)+0x80>)
    9f76:	str	r2, [r3, #0]
}
    9f78:	mov	r0, r5
    9f7a:	pop	{r4, r5, r6, pc}
    9f7c:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    9f80:	ldr	r2, [pc, #36]	; (9fa8 <SdioCard::writeData(unsigned char const*)+0x74>)
    9f82:	ldr	r3, [r2, #36]	; 0x24
    9f84:	lsls	r3, r3, #21
    9f86:	bpl.n	9f82 <SdioCard::writeData(unsigned char const*)+0x4e>
    9f88:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9f8a:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    9f8e:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9f92:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9f94:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9f96:	bne.n	9f8e <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    9f98:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9f9a:	cmp	r4, r1
    9f9c:	bne.n	9f82 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9f9e:	ldr	r3, [pc, #24]	; (9fb8 <SdioCard::writeData(unsigned char const*)+0x84>)
    9fa0:	movs	r2, #1
    9fa2:	strb	r2, [r3, #0]
  return true;
    9fa4:	b.n	9f78 <SdioCard::writeData(unsigned char const*)+0x44>
    9fa6:	nop
    9fa8:	.word	0x402c0000
    9fac:	.word	0x000096e1
    9fb0:	.word	0x2000239c
    9fb4:	.word	0x20013fd8
    9fb8:	.word	0x20021485

00009fbc <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9fbc:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9fbe:	ldr	r0, [pc, #80]	; (a010 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9fc0:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9fc2:	bl	9838 <yieldTimeout(bool (*)())>
    9fc6:	cbz	r0, 9fda <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    9fc8:	ldr	r3, [pc, #72]	; (a014 <SdioCard::writeStart(unsigned long)+0x58>)
    9fca:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9fcc:	movs	r0, #0
  m_errorCode = code;
    9fce:	strb	r2, [r3, #0]
  m_errorLine = line;
    9fd0:	movw	r2, #1099	; 0x44b
    9fd4:	ldr	r3, [pc, #64]	; (a018 <SdioCard::writeStart(unsigned long)+0x5c>)
    9fd6:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9fd8:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9fda:	ldr	r3, [pc, #64]	; (a01c <SdioCard::writeStart(unsigned long)+0x60>)
    9fdc:	ldr	r2, [r3, #40]	; 0x28
    9fde:	bic.w	r2, r2, #65536	; 0x10000
    9fe2:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9fe4:	mov.w	r2, #512	; 0x200
    9fe8:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9fea:	ldr	r3, [pc, #52]	; (a020 <SdioCard::writeStart(unsigned long)+0x64>)
    9fec:	ldrb	r3, [r3, #0]
    9fee:	cbnz	r3, 9ff2 <SdioCard::writeStart(unsigned long)+0x36>
    9ff0:	lsls	r4, r4, #9
    9ff2:	mov	r1, r4
    9ff4:	ldr	r0, [pc, #44]	; (a024 <SdioCard::writeStart(unsigned long)+0x68>)
    9ff6:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    9ffa:	cmp	r0, #0
    9ffc:	bne.n	9fd8 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9ffe:	ldr	r3, [pc, #20]	; (a014 <SdioCard::writeStart(unsigned long)+0x58>)
    a000:	movs	r2, #14
    a002:	strb	r2, [r3, #0]
  m_errorLine = line;
    a004:	movw	r2, #1111	; 0x457
    a008:	ldr	r3, [pc, #12]	; (a018 <SdioCard::writeStart(unsigned long)+0x5c>)
    a00a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    a00c:	b.n	9fd8 <SdioCard::writeStart(unsigned long)+0x1c>
    a00e:	nop
    a010:	.word	0x00009a2d
    a014:	.word	0x2000239c
    a018:	.word	0x20013fd8
    a01c:	.word	0x402c0000
    a020:	.word	0x20021484
    a024:	.word	0x193a0020

0000a028 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a028:	push	{r3, r4, r5, lr}
    a02a:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    a02c:	ldr	r0, [pc, #96]	; (a090 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a02e:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    a030:	bl	9814 <waitTimeout(bool (*)())>
    a034:	cbz	r0, a048 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    a036:	ldr	r3, [pc, #92]	; (a094 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a038:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a03a:	movs	r0, #0
  m_errorCode = code;
    a03c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a03e:	mov.w	r2, #408	; 0x198
    a042:	ldr	r3, [pc, #84]	; (a098 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a044:	str	r2, [r3, #0]
}
    a046:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    a048:	ldr	r3, [pc, #80]	; (a09c <cardCMD6(unsigned long, unsigned char*)+0x74>)
    a04a:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a04c:	mov	r1, r4
  m_dmaBusy = true;
    a04e:	strb	r2, [r3, #0]
  m_irqstat = 0;
    a050:	ldr	r3, [pc, #76]	; (a0a0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a052:	ldr	r2, [pc, #80]	; (a0a4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    a054:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    a056:	ldr	r3, [pc, #80]	; (a0a8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a058:	ldr	r0, [pc, #80]	; (a0ac <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    a05a:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a05c:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a05e:	ldr	r2, [pc, #80]	; (a0b0 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    a060:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a062:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a066:	cbnz	r0, a078 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    a068:	ldr	r3, [pc, #40]	; (a094 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a06a:	movs	r2, #4
    a06c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a06e:	movw	r2, #415	; 0x19f
    a072:	ldr	r3, [pc, #36]	; (a098 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a074:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    a076:	b.n	a046 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    a078:	bl	9a98 <waitDmaStatus()>
    a07c:	cmp	r0, #0
    a07e:	bne.n	a046 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    a080:	ldr	r3, [pc, #16]	; (a094 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a082:	movs	r2, #37	; 0x25
    a084:	strb	r2, [r3, #0]
  m_errorLine = line;
    a086:	mov.w	r2, #418	; 0x1a2
    a08a:	ldr	r3, [pc, #12]	; (a098 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a08c:	b.n	a074 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    a08e:	nop
    a090:	.word	0x00009a2d
    a094:	.word	0x2000239c
    a098:	.word	0x20013fd8
    a09c:	.word	0x20021546
    a0a0:	.word	0x200207f8
    a0a4:	.word	0x00010040
    a0a8:	.word	0x402c0000
    a0ac:	.word	0x063a0011
    a0b0:	.word	0x117f0002

0000a0b4 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    a0b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    a0b8:	movs	r4, #0
  m_initDone = false;
    a0ba:	ldr	r7, [pc, #524]	; (a2c8 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    a0bc:	ldr	r5, [pc, #524]	; (a2cc <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    a0be:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    a0c0:	ldr.w	r8, [pc, #584]	; a30c <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    a0c4:	ldr	r6, [pc, #520]	; (a2d0 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    a0c6:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    a0c8:	strb	r4, [r0, #9]
  m_initDone = false;
    a0ca:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    a0cc:	strb	r4, [r5, #0]
  m_highCapacity = false;
    a0ce:	strb.w	r4, [r8]
  m_version2 = false;
    a0d2:	strb	r4, [r6, #0]
  initSDHC();
    a0d4:	bl	98b4 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    a0d8:	mov	r1, r4
    a0da:	mov	r0, r4
    a0dc:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a0e0:	mov	r4, r0
    a0e2:	cbnz	r0, a0f8 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    a0e4:	movs	r3, #1
  m_errorLine = line;
    a0e6:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    a0ea:	strb	r3, [r5, #0]
  m_errorLine = line;
    a0ec:	ldr	r3, [pc, #484]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a0ee:	str	r2, [r3, #0]
}
    a0f0:	mov	r0, r4
    a0f2:	add	sp, #68	; 0x44
    a0f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0f8:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    a0fa:	ldr.w	r9, [pc, #532]	; a310 <SdioCard::begin(SdioConfig)+0x25c>
    a0fe:	mov.w	r1, #426	; 0x1aa
    a102:	mov	r0, r9
    a104:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a108:	cbz	r0, a12c <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    a10a:	ldr	r3, [pc, #460]	; (a2d8 <SdioCard::begin(SdioConfig)+0x224>)
    a10c:	ldr	r3, [r3, #16]
    a10e:	cmp.w	r3, #426	; 0x1aa
    a112:	beq.n	a124 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    a114:	movs	r3, #6
  m_errorLine = line;
    a116:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    a11a:	strb	r3, [r5, #0]
  m_errorLine = line;
    a11c:	ldr	r3, [pc, #436]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    a11e:	movs	r4, #0
  m_errorLine = line;
    a120:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    a122:	b.n	a0f0 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    a124:	movs	r3, #1
    a126:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a128:	ldr	r6, [pc, #432]	; (a2dc <SdioCard::begin(SdioConfig)+0x228>)
    a12a:	b.n	a14c <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    a12c:	subs	r4, #1
    a12e:	bne.n	a0fe <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    a130:	ldrb	r3, [r6, #0]
    a132:	cmp	r3, #0
    a134:	bne.n	a128 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    a136:	bl	98b4 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    a13a:	mov	r1, r4
    a13c:	mov	r0, r4
    a13e:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a142:	ldrb	r3, [r6, #0]
    a144:	cmp	r3, #0
    a146:	bne.n	a128 <SdioCard::begin(SdioConfig)+0x74>
    a148:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    a14c:	bl	bc98 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a150:	ldr.w	r9, [pc, #428]	; a300 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    a154:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a156:	ldr.w	sl, [pc, #444]	; a314 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a15a:	ldr.w	fp, [pc, #444]	; a318 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a15e:	movs	r1, #0
    a160:	mov	r0, r9
    a162:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a166:	cbnz	r0, a174 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    a168:	movs	r3, #23
  m_errorLine = line;
    a16a:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    a16e:	strb	r3, [r5, #0]
  m_errorLine = line;
    a170:	ldr	r3, [pc, #352]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a172:	b.n	a11e <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a174:	mov	r1, r6
    a176:	mov	r0, sl
    a178:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a17c:	cmp	r0, #0
    a17e:	beq.n	a168 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    a180:	bl	bc98 <micros>
    a184:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a186:	cmp	r0, fp
    a188:	bhi.n	a168 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a18a:	ldr	r3, [pc, #332]	; (a2d8 <SdioCard::begin(SdioConfig)+0x224>)
    a18c:	ldr	r2, [r3, #16]
    a18e:	cmp	r2, #0
    a190:	bge.n	a15e <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    a192:	ldr	r1, [r3, #16]
    a194:	ldr	r2, [pc, #328]	; (a2e0 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a196:	ldr	r0, [pc, #332]	; (a2e4 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    a198:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a19a:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    a19c:	ldr	r3, [r3, #16]
    a19e:	lsls	r2, r3, #1
    m_highCapacity = true;
    a1a0:	itt	mi
    a1a2:	movmi	r3, #1
    a1a4:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a1a8:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a1ac:	mov	r4, r0
    a1ae:	cbnz	r0, a1bc <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    a1b0:	movs	r3, #2
  m_errorLine = line;
    a1b2:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    a1b6:	strb	r3, [r5, #0]
  m_errorLine = line;
    a1b8:	ldr	r3, [pc, #280]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a1ba:	b.n	a0ee <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    a1bc:	movs	r1, #0
    a1be:	ldr	r0, [pc, #296]	; (a2e8 <SdioCard::begin(SdioConfig)+0x234>)
    a1c0:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a1c4:	mov	r4, r0
    a1c6:	cbnz	r0, a1d4 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    a1c8:	movs	r3, #3
  m_errorLine = line;
    a1ca:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    a1ce:	strb	r3, [r5, #0]
  m_errorLine = line;
    a1d0:	ldr	r3, [pc, #256]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a1d2:	b.n	a0ee <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a1d4:	ldr	r6, [pc, #256]	; (a2d8 <SdioCard::begin(SdioConfig)+0x224>)
    a1d6:	ldr.w	r8, [pc, #324]	; a31c <SdioCard::begin(SdioConfig)+0x268>
    a1da:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a1dc:	ldr	r1, [pc, #268]	; (a2ec <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a1de:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a1e0:	ldr	r0, [pc, #268]	; (a2f0 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a1e2:	lsls	r3, r3, #16
    a1e4:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a1e8:	bl	9a40 <readReg16(unsigned long, void*)>
    a1ec:	mov	r4, r0
    a1ee:	cbnz	r0, a1fc <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    a1f0:	movs	r3, #7
  m_errorLine = line;
    a1f2:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    a1f6:	strb	r3, [r5, #0]
  m_errorLine = line;
    a1f8:	ldr	r3, [pc, #216]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a1fa:	b.n	a0ee <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    a1fc:	ldr	r1, [pc, #244]	; (a2f4 <SdioCard::begin(SdioConfig)+0x240>)
    a1fe:	ldr	r0, [pc, #248]	; (a2f8 <SdioCard::begin(SdioConfig)+0x244>)
    a200:	bl	9a40 <readReg16(unsigned long, void*)>
    a204:	mov	r4, r0
    a206:	cbnz	r0, a214 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    a208:	movs	r3, #8
  m_errorLine = line;
    a20a:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    a20e:	strb	r3, [r5, #0]
  m_errorLine = line;
    a210:	ldr	r3, [pc, #192]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a212:	b.n	a0ee <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a214:	ldr.w	r1, [r8]
    a218:	ldr	r0, [pc, #224]	; (a2fc <SdioCard::begin(SdioConfig)+0x248>)
    a21a:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a21e:	mov	r4, r0
    a220:	cbnz	r0, a22e <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    a222:	movs	r3, #5
  m_errorLine = line;
    a224:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    a228:	strb	r3, [r5, #0]
  m_errorLine = line;
    a22a:	ldr	r3, [pc, #168]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a22c:	b.n	a0ee <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a22e:	ldr.w	r1, [r8]
    a232:	ldr	r0, [pc, #204]	; (a300 <SdioCard::begin(SdioConfig)+0x24c>)
    a234:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a238:	cbz	r0, a282 <SdioCard::begin(SdioConfig)+0x1ce>
    a23a:	movs	r1, #2
    a23c:	ldr	r0, [pc, #196]	; (a304 <SdioCard::begin(SdioConfig)+0x250>)
    a23e:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a242:	mov	r4, r0
    a244:	cbz	r0, a282 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a246:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a248:	mov	r1, sp
    a24a:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a24e:	bic.w	r3, r3, #6
    a252:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a254:	ldr	r3, [r6, #40]	; 0x28
    a256:	orr.w	r3, r3, #2
    a25a:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a25c:	mov.w	r3, #1048592	; 0x100010
    a260:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a262:	bl	a028 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a266:	cbnz	r0, a28e <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    a268:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    a26c:	movs	r0, #5
    a26e:	bl	9664 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    a272:	mov	r0, r2
    a274:	bl	970c <setSdclk(unsigned long)>
  if (enable) {
    a278:	bl	9884 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    a27c:	movs	r3, #1
    a27e:	strb	r3, [r7, #0]
  return true;
    a280:	b.n	a0f0 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    a282:	movs	r3, #20
  m_errorLine = line;
    a284:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    a288:	strb	r3, [r5, #0]
  m_errorLine = line;
    a28a:	ldr	r3, [pc, #72]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    a28c:	b.n	a11e <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a28e:	ldrb.w	r3, [sp, #13]
    a292:	lsls	r3, r3, #30
    a294:	bpl.n	a268 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    a296:	ldr	r6, [pc, #60]	; (a2d4 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a298:	mov	r1, sp
    a29a:	ldr	r0, [pc, #108]	; (a308 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    a29c:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    a2a0:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a2a4:	bl	a028 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    a2a8:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    a2ac:	cbz	r0, a2b6 <SdioCard::begin(SdioConfig)+0x202>
    a2ae:	and.w	r3, r3, #15
    a2b2:	cmp	r3, #1
    a2b4:	beq.n	a2c0 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    a2b6:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    a2ba:	str.w	r8, [r6]
    a2be:	b.n	a268 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    a2c0:	movw	r2, #50000	; 0xc350
    a2c4:	b.n	a26c <SdioCard::begin(SdioConfig)+0x1b8>
    a2c6:	nop
    a2c8:	.word	0x20021482
    a2cc:	.word	0x2000239c
    a2d0:	.word	0x20021483
    a2d4:	.word	0x20013fd8
    a2d8:	.word	0x402c0000
    a2dc:	.word	0x40300000
    a2e0:	.word	0x200201ec
    a2e4:	.word	0x02090000
    a2e8:	.word	0x031a0000
    a2ec:	.word	0x20021496
    a2f0:	.word	0x09090000
    a2f4:	.word	0x20021486
    a2f8:	.word	0x0a090000
    a2fc:	.word	0x071b0000
    a300:	.word	0x371a0000
    a304:	.word	0x061a0000
    a308:	.word	0x80fffff1
    a30c:	.word	0x20021484
    a310:	.word	0x081a0000
    a314:	.word	0x29020000
    a318:	.word	0x000f4240
    a31c:	.word	0x200201f0

0000a320 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    a320:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a322:	ldr	r3, [pc, #148]	; (a3b8 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    a324:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a326:	ldr	r2, [r3, #36]	; 0x24
    a328:	lsls	r0, r2, #22
    a32a:	bmi.n	a348 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a32c:	ldr	r2, [r3, #40]	; 0x28
    a32e:	bic.w	r2, r2, #65536	; 0x10000
    a332:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    a334:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a336:	ldr	r2, [r3, #40]	; 0x28
    a338:	orr.w	r2, r2, #131072	; 0x20000
    a33c:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a33e:	ldr	r2, [r3, #40]	; 0x28
    a340:	orr.w	r2, r2, #65536	; 0x10000
    a344:	str	r2, [r3, #40]	; 0x28
    interrupts();
    a346:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    a348:	ldr	r0, [pc, #112]	; (a3bc <SdioCard::readData(unsigned char*)+0x9c>)
    a34a:	bl	9814 <waitTimeout(bool (*)())>
    a34e:	cbz	r0, a362 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    a350:	ldr	r3, [pc, #108]	; (a3c0 <SdioCard::readData(unsigned char*)+0xa0>)
    a352:	movs	r2, #26
    a354:	strb	r2, [r3, #0]
  m_errorLine = line;
    a356:	movw	r2, #854	; 0x356
    a35a:	ldr	r3, [pc, #104]	; (a3c4 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    a35c:	movs	r0, #0
  m_errorLine = line;
    a35e:	str	r2, [r3, #0]
}
    a360:	pop	{r3, r4, r5, pc}
    a362:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    a366:	ldr	r5, [pc, #80]	; (a3b8 <SdioCard::readData(unsigned char*)+0x98>)
    a368:	ldr	r3, [r5, #36]	; 0x24
    a36a:	lsls	r1, r3, #20
    a36c:	bpl.n	a368 <SdioCard::readData(unsigned char*)+0x48>
    a36e:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a370:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    a374:	ldr	r0, [r5, #32]
    a376:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a37a:	cmp	r3, r1
    a37c:	bne.n	a374 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    a37e:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a380:	cmp	r4, r2
    a382:	bne.n	a368 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    a384:	ldr	r0, [pc, #64]	; (a3c8 <SdioCard::readData(unsigned char*)+0xa8>)
    a386:	bl	9814 <waitTimeout(bool (*)())>
    a38a:	cbz	r0, a39a <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    a38c:	ldr	r3, [pc, #48]	; (a3c0 <SdioCard::readData(unsigned char*)+0xa0>)
    a38e:	movs	r2, #29
    a390:	strb	r2, [r3, #0]
  m_errorLine = line;
    a392:	movw	r2, #865	; 0x361
    a396:	ldr	r3, [pc, #44]	; (a3c4 <SdioCard::readData(unsigned char*)+0xa4>)
    a398:	b.n	a35c <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    a39a:	ldr	r2, [r5, #48]	; 0x30
    a39c:	ldr	r3, [pc, #44]	; (a3cc <SdioCard::readData(unsigned char*)+0xac>)
    a39e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a3a0:	ldr	r2, [r3, #0]
    a3a2:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a3a4:	ldr	r2, [r3, #0]
    a3a6:	lsls	r2, r2, #30
    a3a8:	bpl.n	a360 <SdioCard::readData(unsigned char*)+0x40>
    a3aa:	ldr	r2, [r3, #0]
    a3ac:	ldr	r3, [pc, #32]	; (a3d0 <SdioCard::readData(unsigned char*)+0xb0>)
    a3ae:	tst	r2, r3
    a3b0:	ite	eq
    a3b2:	moveq	r0, #1
    a3b4:	movne	r0, #0
    a3b6:	b.n	a360 <SdioCard::readData(unsigned char*)+0x40>
    a3b8:	.word	0x402c0000
    a3bc:	.word	0x000096cd
    a3c0:	.word	0x2000239c
    a3c4:	.word	0x20013fd8
    a3c8:	.word	0x000096f5
    a3cc:	.word	0x200207f8
    a3d0:	.word	0x117f0000

0000a3d4 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    a3d4:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a3d6:	ldr	r0, [pc, #80]	; (a428 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    a3d8:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a3da:	bl	9838 <yieldTimeout(bool (*)())>
    a3de:	cbz	r0, a3f2 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    a3e0:	ldr	r3, [pc, #72]	; (a42c <SdioCard::readStart(unsigned long)+0x58>)
    a3e2:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a3e4:	movs	r0, #0
  m_errorCode = code;
    a3e6:	strb	r2, [r3, #0]
  m_errorLine = line;
    a3e8:	movw	r2, #945	; 0x3b1
    a3ec:	ldr	r3, [pc, #64]	; (a430 <SdioCard::readStart(unsigned long)+0x5c>)
    a3ee:	str	r2, [r3, #0]
}
    a3f0:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a3f2:	ldr	r3, [pc, #64]	; (a434 <SdioCard::readStart(unsigned long)+0x60>)
    a3f4:	ldr	r2, [r3, #40]	; 0x28
    a3f6:	orr.w	r2, r2, #65536	; 0x10000
    a3fa:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a3fc:	mov.w	r2, #512	; 0x200
    a400:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a402:	ldr	r3, [pc, #52]	; (a438 <SdioCard::readStart(unsigned long)+0x64>)
    a404:	ldrb	r3, [r3, #0]
    a406:	cbnz	r3, a40a <SdioCard::readStart(unsigned long)+0x36>
    a408:	lsls	r4, r4, #9
    a40a:	mov	r1, r4
    a40c:	ldr	r0, [pc, #44]	; (a43c <SdioCard::readStart(unsigned long)+0x68>)
    a40e:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a412:	cmp	r0, #0
    a414:	bne.n	a3f0 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    a416:	ldr	r3, [pc, #20]	; (a42c <SdioCard::readStart(unsigned long)+0x58>)
    a418:	movs	r2, #12
    a41a:	strb	r2, [r3, #0]
  m_errorLine = line;
    a41c:	movw	r2, #957	; 0x3bd
    a420:	ldr	r3, [pc, #12]	; (a430 <SdioCard::readStart(unsigned long)+0x5c>)
    a422:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    a424:	b.n	a3f0 <SdioCard::readStart(unsigned long)+0x1c>
    a426:	nop
    a428:	.word	0x00009a2d
    a42c:	.word	0x2000239c
    a430:	.word	0x20013fd8
    a434:	.word	0x402c0000
    a438:	.word	0x20021484
    a43c:	.word	0x123a0030

0000a440 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a440:	push	{r4, r5, r6, r7, lr}
    a442:	ldrb	r5, [r0, #8]
    a444:	sub.w	sp, sp, #516	; 0x204
    a448:	mov	r4, r0
    a44a:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    a44c:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a450:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    a452:	beq.n	a494 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a454:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a456:	ldr	r0, [pc, #132]	; (a4dc <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    a458:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a45c:	ite	eq
    a45e:	moveq	r4, r2
    a460:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a462:	mov	r2, r4
    a464:	bl	9ac8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a468:	mov	r5, r0
    a46a:	cbnz	r0, a482 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    a46c:	ldr	r3, [pc, #112]	; (a4e0 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    a46e:	movs	r2, #11
    a470:	strb	r2, [r3, #0]
  m_errorLine = line;
    a472:	mov.w	r2, #884	; 0x374
    a476:	ldr	r3, [pc, #108]	; (a4e4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    a478:	str	r2, [r3, #0]
}
    a47a:	mov	r0, r5
    a47c:	add.w	sp, sp, #516	; 0x204
    a480:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    a482:	cmp	r4, r6
    a484:	beq.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    a486:	mov.w	r2, #512	; 0x200
    a48a:	mov	r1, sp
    a48c:	mov	r0, r6
    a48e:	bl	a79c <memcpy>
    a492:	b.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    a494:	bl	9dc0 <waitTransferComplete()>
    a498:	cmp	r0, #0
    a49a:	beq.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    a49c:	ldrb	r3, [r4, #9]
    a49e:	cmp	r3, #1
    a4a0:	bne.n	a4a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    a4a2:	ldr	r3, [r4, #4]
    a4a4:	cmp	r3, r7
    a4a6:	beq.n	a4c6 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    a4a8:	ldr	r3, [r4, #0]
    a4aa:	mov	r0, r4
    a4ac:	ldr	r3, [r3, #32]
    a4ae:	blx	r3
    a4b0:	cmp	r0, #0
    a4b2:	beq.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    a4b4:	mov	r1, r7
    a4b6:	mov	r0, r4
    a4b8:	bl	a3d4 <SdioCard::readStart(unsigned long)>
    a4bc:	cmp	r0, #0
    a4be:	beq.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    a4c0:	movs	r3, #1
      m_curSector = sector;
    a4c2:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    a4c4:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    a4c6:	mov	r1, r6
    a4c8:	mov	r0, r4
    a4ca:	bl	a320 <SdioCard::readData(unsigned char*)>
    a4ce:	cmp	r0, #0
    a4d0:	beq.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    a4d2:	ldr	r3, [r4, #4]
  return true;
    a4d4:	mov	r5, r0
    m_curSector++;
    a4d6:	adds	r3, #1
    a4d8:	str	r3, [r4, #4]
    a4da:	b.n	a47a <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    a4dc:	.word	0x113a0011
    a4e0:	.word	0x2000239c
    a4e4:	.word	0x20013fd8

0000a4e8 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    a4e8:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a4ea:	ldr	r2, [pc, #76]	; (a538 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    a4ec:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    a4ee:	mov	r6, r1
  m_curState = IDLE_STATE;
    a4f0:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a4f2:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a4f4:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a4f6:	ldr	r0, [pc, #68]	; (a53c <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a4f8:	bic.w	r3, r3, #65536	; 0x10000
    a4fc:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a4fe:	bl	99a4 <cardCommand(unsigned long, unsigned long)>
    a502:	mov	r4, r0
    a504:	cbnz	r0, a518 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    a506:	ldr	r3, [pc, #56]	; (a540 <SdioCard::stopTransmission(bool)+0x58>)
    a508:	movs	r2, #9
    a50a:	strb	r2, [r3, #0]
  m_errorLine = line;
    a50c:	movw	r2, #979	; 0x3d3
    a510:	ldr	r3, [pc, #48]	; (a544 <SdioCard::stopTransmission(bool)+0x5c>)
    a512:	str	r2, [r3, #0]
}
    a514:	mov	r0, r4
    a516:	pop	{r4, r5, r6, pc}
  if (blocking) {
    a518:	cmp	r6, #0
    a51a:	beq.n	a514 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    a51c:	ldr	r0, [pc, #40]	; (a548 <SdioCard::stopTransmission(bool)+0x60>)
    a51e:	bl	9838 <yieldTimeout(bool (*)())>
    a522:	cmp	r0, #0
    a524:	beq.n	a514 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    a526:	ldr	r3, [pc, #24]	; (a540 <SdioCard::stopTransmission(bool)+0x58>)
    a528:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    a52a:	mov	r4, r5
  m_errorCode = code;
    a52c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a52e:	movw	r2, #983	; 0x3d7
    a532:	ldr	r3, [pc, #16]	; (a544 <SdioCard::stopTransmission(bool)+0x5c>)
    a534:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    a536:	b.n	a514 <SdioCard::stopTransmission(bool)+0x2c>
    a538:	.word	0x402c0000
    a53c:	.word	0x0cdb0000
    a540:	.word	0x2000239c
    a544:	.word	0x20013fd8
    a548:	.word	0x000096ad

0000a54c <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a54c:	push	{r4, lr}
    a54e:	mov	r4, r0
  if (!waitTransferComplete()) {
    a550:	bl	9dc0 <waitTransferComplete()>
    a554:	cbz	r0, a566 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    a556:	ldrb	r3, [r4, #9]
    a558:	cbz	r3, a566 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    a55a:	mov	r0, r4
    a55c:	movs	r1, #1
}
    a55e:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a562:	b.w	a4e8 <SdioCard::stopTransmission(bool)>
}
    a566:	pop	{r4, pc}

0000a568 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    a568:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a56a:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a56c:	tst.w	r3, #2031616	; 0x1f0000
    a570:	beq.n	a56a <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    a572:	ldr	r0, [r0, #116]	; 0x74
	}
    a574:	uxtb	r0, r0
    a576:	bx	lr

0000a578 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    a578:	push	{r0, r1, r2, r4, r5, lr}
    a57a:	add	r3, sp, #8
    a57c:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    a580:	ldrb	r2, [r0, #19]
    a582:	mov	r3, r1
    a584:	cmp	r2, #0
    a586:	beq.n	a5fc <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a588:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a58a:	ldrb	r2, [r0, #19]
    a58c:	lsls	r1, r2, #31
    a58e:	bpl.n	a5a2 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a590:	mov.w	r4, #3758153728	; 0xe000e000
    a594:	ldr	r5, [r0, #20]
    a596:	ldr.w	r1, [r4, #384]	; 0x180
    a59a:	ands	r1, r5
    a59c:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a59e:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a5a2:	lsls	r5, r2, #30
    a5a4:	bpl.n	a5b8 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a5a6:	mov.w	r4, #3758153728	; 0xe000e000
    a5aa:	ldr	r5, [r0, #24]
    a5ac:	ldr.w	r1, [r4, #388]	; 0x184
    a5b0:	ands	r1, r5
    a5b2:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a5b4:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a5b8:	lsls	r4, r2, #29
    a5ba:	bpl.n	a5ce <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a5bc:	mov.w	r4, #3758153728	; 0xe000e000
    a5c0:	ldr	r5, [r0, #28]
    a5c2:	ldr.w	r1, [r4, #392]	; 0x188
    a5c6:	ands	r1, r5
    a5c8:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a5ca:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a5ce:	lsls	r1, r2, #28
    a5d0:	bpl.n	a5e4 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a5d2:	mov.w	r4, #3758153728	; 0xe000e000
    a5d6:	ldr	r5, [r0, #32]
    a5d8:	ldr.w	r1, [r4, #396]	; 0x18c
    a5dc:	ands	r1, r5
    a5de:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a5e0:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a5e4:	lsls	r2, r2, #27
    a5e6:	bpl.n	a5fa <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a5e8:	mov.w	r1, #3758153728	; 0xe000e000
    a5ec:	ldr	r4, [r0, #36]	; 0x24
    a5ee:	ldr.w	r2, [r1, #400]	; 0x190
    a5f2:	ands	r2, r4
    a5f4:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a5f6:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    a5fa:	cpsie	i
		if (settings.clock() != _clock) {
    a5fc:	ldr	r2, [r0, #8]
    a5fe:	cmp	r3, r2
    a600:	beq.n	a650 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a602:	ldr	r2, [pc, #112]	; (a674 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a604:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a606:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a608:	ldr	r1, [pc, #108]	; (a678 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a60a:	ubfx	r4, r2, #4, #2
    a60e:	ubfx	r2, r2, #26, #3
    a612:	ldr.w	r4, [r1, r4, lsl #2]
    a616:	adds	r2, #1
    a618:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a61c:	cbz	r3, a66a <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a61e:	cmp	r3, r1
    a620:	bhi.n	a63a <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a622:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a626:	udiv	r1, r1, r2
    a62a:	cmp	r3, r1
    a62c:	bcs.n	a630 <SPIClass::beginTransaction(SPISettings)+0xb8>
    a62e:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a630:	cmp.w	r2, #258	; 0x102
    a634:	bcs.n	a63e <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a636:	cmp	r2, #2
    a638:	bhi.n	a642 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a63a:	movs	r3, #0
    a63c:	b.n	a644 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a63e:	movw	r2, #257	; 0x101
				div = d-2;
    a642:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a644:	lsrs	r1, r3, #1
    a646:	lsls	r2, r1, #16
    a648:	orr.w	r2, r2, r1, lsl #8
    a64c:	orrs	r3, r2
    a64e:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a650:	ldr	r3, [r0, #0]
		port().CR = 0;
    a652:	movs	r2, #0
    a654:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a656:	movs	r2, #3
    a658:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    a65a:	ldr	r2, [r0, #12]
    a65c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a65e:	ldr	r2, [sp, #4]
    a660:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a662:	movs	r2, #1
    a664:	str	r2, [r3, #16]
	}
    a666:	add	sp, #12
    a668:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a66a:	cmp	r4, r2
    a66c:	bcc.n	a644 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a66e:	mov	r2, r1
    a670:	b.n	a62e <SPIClass::beginTransaction(SPISettings)+0xb6>
    a672:	nop
    a674:	.word	0x400fc000
    a678:	.word	0x20000604

0000a67c <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a67c:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a680:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a682:	ldr	r0, [r0, #0]
    a684:	bl	a578 <SPIClass::beginTransaction(SPISettings)>
}
    a688:	pop	{r3, pc}

0000a68a <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a68a:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a68c:	ldrb	r2, [r3, #19]
    a68e:	cbz	r2, a6d6 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a690:	lsls	r0, r2, #31
    a692:	bpl.n	a69e <SdSpiArduinoDriver::deactivate()+0x14>
    a694:	ldr	r0, [r3, #40]	; 0x28
    a696:	mov.w	r1, #3758153728	; 0xe000e000
    a69a:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a69e:	lsls	r1, r2, #30
    a6a0:	bpl.n	a6ac <SdSpiArduinoDriver::deactivate()+0x22>
    a6a2:	ldr	r0, [r3, #44]	; 0x2c
    a6a4:	mov.w	r1, #3758153728	; 0xe000e000
    a6a8:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a6ac:	lsls	r0, r2, #29
    a6ae:	bpl.n	a6ba <SdSpiArduinoDriver::deactivate()+0x30>
    a6b0:	ldr	r0, [r3, #48]	; 0x30
    a6b2:	mov.w	r1, #3758153728	; 0xe000e000
    a6b6:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a6ba:	lsls	r1, r2, #28
    a6bc:	bpl.n	a6c8 <SdSpiArduinoDriver::deactivate()+0x3e>
    a6be:	ldr	r0, [r3, #52]	; 0x34
    a6c0:	mov.w	r1, #3758153728	; 0xe000e000
    a6c4:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a6c8:	lsls	r2, r2, #27
    a6ca:	bpl.n	a6d6 <SdSpiArduinoDriver::deactivate()+0x4c>
    a6cc:	ldr	r2, [r3, #56]	; 0x38
    a6ce:	mov.w	r3, #3758153728	; 0xe000e000
    a6d2:	str.w	r2, [r3, #272]	; 0x110
}
    a6d6:	bx	lr

0000a6d8 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a6d8:	ldr	r0, [r0, #0]
    a6da:	b.w	551e <SPIClass::end()>

0000a6de <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a6de:	ldr	r3, [r0, #0]
    a6e0:	movs	r1, #255	; 0xff
    a6e2:	ldr	r0, [r3, #0]
    a6e4:	b.w	a568 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a6e8 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a6e8:	push	{r0, r1, r2, r4, r5, lr}
    a6ea:	mov	r4, r1
    a6ec:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a6ee:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a6f0:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a6f2:	mov	r0, r4
    a6f4:	bl	a758 <memset>
		transfer(buf, buf, count);
    a6f8:	ldr	r0, [r5, #0]
    a6fa:	ldr	r3, [sp, #4]
    a6fc:	mov	r2, r4
    a6fe:	mov	r1, r4
    a700:	bl	54c8 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a704:	movs	r0, #0
    a706:	add	sp, #12
    a708:	pop	{r4, r5, pc}

0000a70a <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a70a:	ldr	r3, [r0, #0]
    a70c:	ldr	r0, [r3, #0]
    a70e:	b.w	a568 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a712 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a712:	subs	r3, r2, #1
    a714:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a718:	push	{r4, r5, r6, lr}
    a71a:	mov	r6, r0
    a71c:	sub.w	sp, sp, #512	; 0x200
    a720:	mov	r4, r1
    a722:	mov	r5, r2
  if (0 < count && count <= 512) {
    a724:	bcc.n	a73a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a726:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a728:	cmp	r4, r5
    a72a:	beq.n	a74c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a72c:	ldr	r3, [r6, #0]
    a72e:	ldrb.w	r1, [r4], #1
    a732:	ldr	r0, [r3, #0]
    a734:	bl	a568 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a738:	b.n	a728 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a73a:	mov	r0, sp
    a73c:	bl	a79c <memcpy>
    a740:	mov	r2, sp
    a742:	mov	r3, r5
    a744:	ldr	r0, [r6, #0]
    a746:	mov	r1, r2
    a748:	bl	54c8 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a74c:	add.w	sp, sp, #512	; 0x200
    a750:	pop	{r4, r5, r6, pc}

0000a752 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a752:	b.w	c434 <digitalWrite>
	...

0000a758 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a758:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a75a:	cbz	r2, a798 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a75c:	cmp	r2, #16
    blt     .L_bytewise
    a75e:	blt.n	a790 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a760:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a764:	cbz	r3, a774 <memset+0x1c>
    rsb     r3, #8
    a766:	rsb	r3, r3, #8
    subs    r2, r3
    a76a:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a76c:	subs	r3, #1
    strb    r1, [r0], #1
    a76e:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a772:	bgt.n	a76c <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a774:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a776:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a77a:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a77e:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a780:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a782:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a784:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a788:	bgt.n	a782 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a78a:	ands.w	r2, r2, #7
    beq     .L_done
    a78e:	beq.n	a798 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a790:	subs	r2, #1
    strb    r1, [r0], #1
    a792:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a796:	bgt.n	a790 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a798:	pop	{r0, pc}
    a79a:	nop

0000a79c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a79c:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a79e:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a7a2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a7a6:	bne.n	a884 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a7a8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a7aa:	bcc.n	a830 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a7ac:	ldr.w	r3, [r1], #4
    a7b0:	str.w	r3, [r0], #4
    a7b4:	ldr.w	r3, [r1], #4
    a7b8:	str.w	r3, [r0], #4
    a7bc:	ldr.w	r3, [r1], #4
    a7c0:	str.w	r3, [r0], #4
    a7c4:	ldr.w	r3, [r1], #4
    a7c8:	str.w	r3, [r0], #4
    a7cc:	ldr.w	r3, [r1], #4
    a7d0:	str.w	r3, [r0], #4
    a7d4:	ldr.w	r3, [r1], #4
    a7d8:	str.w	r3, [r0], #4
    a7dc:	ldr.w	r3, [r1], #4
    a7e0:	str.w	r3, [r0], #4
    a7e4:	ldr.w	r3, [r1], #4
    a7e8:	str.w	r3, [r0], #4
    a7ec:	ldr.w	r3, [r1], #4
    a7f0:	str.w	r3, [r0], #4
    a7f4:	ldr.w	r3, [r1], #4
    a7f8:	str.w	r3, [r0], #4
    a7fc:	ldr.w	r3, [r1], #4
    a800:	str.w	r3, [r0], #4
    a804:	ldr.w	r3, [r1], #4
    a808:	str.w	r3, [r0], #4
    a80c:	ldr.w	r3, [r1], #4
    a810:	str.w	r3, [r0], #4
    a814:	ldr.w	r3, [r1], #4
    a818:	str.w	r3, [r0], #4
    a81c:	ldr.w	r3, [r1], #4
    a820:	str.w	r3, [r0], #4
    a824:	ldr.w	r3, [r1], #4
    a828:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a82c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a82e:	bcs.n	a7ac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a830:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a832:	bcc.n	a858 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a834:	ldr.w	r3, [r1], #4
    a838:	str.w	r3, [r0], #4
    a83c:	ldr.w	r3, [r1], #4
    a840:	str.w	r3, [r0], #4
    a844:	ldr.w	r3, [r1], #4
    a848:	str.w	r3, [r0], #4
    a84c:	ldr.w	r3, [r1], #4
    a850:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a854:	subs	r2, #16
	bhs	.Lmid_block_loop
    a856:	bcs.n	a834 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a858:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a85a:	bcc.n	a868 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a85c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a860:	str.w	r3, [r0], #4
	subs	r2, #4
    a864:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a866:	bcs.n	a85c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a868:	adds	r2, #4
	beq	.Ldone
    a86a:	beq.n	a87e <memcpy+0xe2>

	lsls	r2, r2, #31
    a86c:	lsls	r2, r2, #31
	itt ne
    a86e:	itt	ne
	ldrbne  r3, [r1], #1
    a870:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a874:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a878:	bcc.n	a87e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a87a:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a87c:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a87e:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a880:	bx	lr
    a882:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a884:	cmp	r2, #8
	blo	.Lbyte_copy
    a886:	bcc.n	a8b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a888:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a88a:	beq.n	a7a8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a88c:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a890:	beq.n	a7a8 <memcpy+0xc>

	rsb	r3, #4
    a892:	rsb	r3, r3, #4
	subs	r2, r3
    a896:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a898:	lsls	r3, r3, #31
	itt ne
    a89a:	itt	ne
	ldrbne  r3, [r1], #1
    a89c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a8a0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a8a4:	bcc.n	a7a8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a8a6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a8aa:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a8ae:	b.n	a7a8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a8b0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a8b2:	bcc.n	a868 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a8b4:	subs	r2, #1
	ldrb    r3, [r1], #1
    a8b6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a8ba:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a8be:	bcs.n	a8b4 <memcpy+0x118>

	ldrb	r3, [r1]
    a8c0:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a8c2:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a8c4:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a8c6:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a8c8:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a8ca:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a8cc:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a8ce:	bx	lr

0000a8d0 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a8d0:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a8d2:	ldr	r4, [pc, #80]	; (a924 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a8d4:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a8d8:	ldr	r5, [pc, #76]	; (a928 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a8da:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a8de:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a8e2:	ldr	r7, [pc, #72]	; (a92c <rx_queue_transfer+0x5c>)
    a8e4:	add.w	r5, r5, r0, lsl #5
{
    a8e8:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a8ea:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a8ee:	mov	r1, r4
    a8f0:	ldrh	r2, [r7, #0]
    a8f2:	mov	r0, r5
    a8f4:	bl	b974 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a8f8:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a8fa:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a8fc:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a900:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a904:	adds	r4, #32
	} while (location < end_addr);
    a906:	cmp	r3, r4
    a908:	bhi.n	a900 <rx_queue_transfer+0x30>
	asm("dsb");
    a90a:	dsb	sy
	asm("isb");
    a90e:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a912:	movs	r0, #3
    a914:	mov	r1, r5
    a916:	bl	b9c4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a91a:	mov.w	r3, #131072	; 0x20000
    a91e:	str.w	r3, [r6, #268]	; 0x10c
}
    a922:	pop	{r3, r4, r5, r6, r7, pc}
    a924:	.word	0x20004b40
    a928:	.word	0x20005b40
    a92c:	.word	0x200213f8

0000a930 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a930:	ldr	r3, [r0, #4]
    a932:	ldr	r2, [pc, #136]	; (a9bc <rx_event+0x8c>)
    a934:	ubfx	r3, r3, #16, #15
{
    a938:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a93c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a93e:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a940:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a942:	cmp	r4, #0
    a944:	ble.n	a98e <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a946:	ldr	r2, [pc, #120]	; (a9c0 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a948:	uxth.w	sl, r4
		if (head != rx_tail) {
    a94c:	ldr	r0, [pc, #116]	; (a9c4 <rx_event+0x94>)
		uint32_t head = rx_head;
    a94e:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a950:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a952:	uxtb	r3, r1
		if (head != rx_tail) {
    a954:	ldr.w	r8, [pc, #128]	; a9d8 <rx_event+0xa8>
    a958:	cmp	r1, r0
    a95a:	ldr	r7, [pc, #108]	; (a9c8 <rx_event+0x98>)
    a95c:	ldr	r1, [pc, #108]	; (a9cc <rx_event+0x9c>)
    a95e:	beq.n	a998 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a960:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a964:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a968:	rsb	r0, r6, #512	; 0x200
    a96c:	cmp	r4, r0
    a96e:	bhi.n	a998 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a970:	ldr	r3, [pc, #92]	; (a9d0 <rx_event+0xa0>)
    a972:	add.w	r0, r6, r9, lsl #9
    a976:	mov	r2, r4
				rx_count[ii] = count + len;
    a978:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a97a:	add.w	r1, r3, r5, lsl #9
    a97e:	add	r0, r3
    a980:	bl	a79c <memcpy>
				rx_available += len;
    a984:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a986:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a98a:	add	r3, r4
    a98c:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a98e:	mov	r0, r5
	}
}
    a990:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a994:	b.w	a8d0 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a998:	adds	r3, #1
		rx_index[i] = 0;
    a99a:	movs	r6, #0
    a99c:	ldr	r0, [pc, #52]	; (a9d4 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a99e:	cmp	r3, #9
		rx_count[i] = len;
    a9a0:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a9a4:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a9a8:	it	cs
    a9aa:	movcs	r3, r6
		rx_list[head] = i;
    a9ac:	strb	r5, [r1, r3]
		rx_head = head;
    a9ae:	uxtb	r3, r3
    a9b0:	strb	r3, [r2, #0]
		rx_available += len;
    a9b2:	ldr	r3, [r7, #0]
    a9b4:	add	r4, r3
    a9b6:	str	r4, [r7, #0]
}
    a9b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9bc:	.word	0x200213f8
    a9c0:	.word	0x200215f7
    a9c4:	.word	0x20021607
    a9c8:	.word	0x20020cc4
    a9cc:	.word	0x200215f9
    a9d0:	.word	0x20004b40
    a9d4:	.word	0x200213e8
    a9d8:	.word	0x200213d8

0000a9dc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a9dc:	ldr	r3, [pc, #112]	; (aa50 <usb_serial_flush_callback+0x74>)
{
    a9de:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a9e2:	ldrb	r2, [r3, #0]
    a9e4:	and.w	r3, r2, #255	; 0xff
    a9e8:	cbnz	r2, aa4a <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a9ea:	ldr	r2, [pc, #104]	; (aa54 <usb_serial_flush_callback+0x78>)
    a9ec:	ldrb	r2, [r2, #0]
    a9ee:	cbz	r2, aa4a <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a9f0:	ldr	r7, [pc, #100]	; (aa58 <usb_serial_flush_callback+0x7c>)
    a9f2:	ldrh	r5, [r7, #0]
    a9f4:	cbz	r5, aa4a <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a9f6:	ldr	r6, [pc, #100]	; (aa5c <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a9f8:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a9fc:	ldr	r1, [pc, #96]	; (aa60 <usb_serial_flush_callback+0x84>)
    a9fe:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aa00:	ldr	r4, [pc, #96]	; (aa64 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    aa02:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aa06:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    aa0a:	mov	r2, r5
    aa0c:	mov	r0, r8
    aa0e:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    aa10:	add	r5, r4
    aa12:	bl	b974 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    aa16:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    aa1a:	mov.w	r3, #3758153728	; 0xe000e000
    aa1e:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    aa22:	adds	r4, #32
	} while (location < end_addr);
    aa24:	cmp	r5, r4
    aa26:	bhi.n	aa1e <usb_serial_flush_callback+0x42>
	asm("dsb");
    aa28:	dsb	sy
	asm("isb");
    aa2c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    aa30:	movs	r0, #3
    aa32:	mov	r1, r8
    aa34:	bl	b9a0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    aa38:	ldrb	r3, [r6, #0]
    aa3a:	movs	r2, #0
    aa3c:	adds	r3, #1
	tx_available = 0;
    aa3e:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    aa40:	uxtb	r3, r3
    aa42:	cmp	r3, #3
    aa44:	ite	ls
    aa46:	strbls	r3, [r6, #0]
    aa48:	strbhi	r2, [r6, #0]
}
    aa4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa4e:	nop
    aa50:	.word	0x2002160d
    aa54:	.word	0x2002160f
    aa58:	.word	0x2002147c
    aa5c:	.word	0x2002160b
    aa60:	.word	0x20005cc0
    aa64:	.word	0x20005dc0

0000aa68 <usb_serial_reset>:
}
    aa68:	bx	lr
	...

0000aa6c <usb_serial_configure>:
	if (usb_high_speed) {
    aa6c:	ldr	r3, [pc, #180]	; (ab24 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aa6e:	movs	r2, #128	; 0x80
    aa70:	movs	r1, #0
    aa72:	ldr	r0, [pc, #180]	; (ab28 <usb_serial_configure+0xbc>)
{
    aa74:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    aa76:	ldrb	r3, [r3, #0]
	tx_head = 0;
    aa78:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    aa7a:	ldr	r5, [pc, #176]	; (ab2c <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    aa7c:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    aa7e:	ldr	r6, [pc, #176]	; (ab30 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    aa80:	ite	eq
    aa82:	moveq	r3, #64	; 0x40
    aa84:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    aa88:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    aa8a:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    aa8c:	bl	a758 <memset>
	tx_head = 0;
    aa90:	ldr	r3, [pc, #160]	; (ab34 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aa92:	mov.w	r2, #256	; 0x100
    aa96:	mov	r1, r4
    aa98:	ldr	r0, [pc, #156]	; (ab38 <usb_serial_configure+0xcc>)
	tx_head = 0;
    aa9a:	strb	r4, [r3, #0]
	tx_available = 0;
    aa9c:	ldr	r3, [pc, #156]	; (ab3c <usb_serial_configure+0xd0>)
    aa9e:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    aaa0:	bl	a758 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    aaa4:	movs	r2, #16
    aaa6:	mov	r1, r4
    aaa8:	ldr	r0, [pc, #148]	; (ab40 <usb_serial_configure+0xd4>)
    aaaa:	bl	a758 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    aaae:	movs	r2, #16
    aab0:	mov	r1, r4
    aab2:	ldr	r0, [pc, #144]	; (ab44 <usb_serial_configure+0xd8>)
    aab4:	bl	a758 <memset>
	rx_head = 0;
    aab8:	ldr	r3, [pc, #140]	; (ab48 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aaba:	mov	r2, r4
    aabc:	movs	r1, #16
	rx_head = 0;
    aabe:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aac0:	movs	r0, #2
	rx_tail = 0;
    aac2:	ldr	r3, [pc, #136]	; (ab4c <usb_serial_configure+0xe0>)
    aac4:	strb	r4, [r3, #0]
	rx_available = 0;
    aac6:	ldr	r3, [pc, #136]	; (ab50 <usb_serial_configure+0xe4>)
    aac8:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    aaca:	mov	r3, r4
    aacc:	bl	b934 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    aad0:	ldr	r3, [pc, #128]	; (ab54 <usb_serial_configure+0xe8>)
    aad2:	mov	r2, r4
    aad4:	ldrh	r1, [r6, #0]
    aad6:	movs	r0, #3
    aad8:	bl	b8f4 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    aadc:	mov	r3, r4
    aade:	movs	r2, #1
    aae0:	ldrh	r1, [r5, #0]
    aae2:	movs	r0, #3
    aae4:	bl	b934 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    aae8:	mov	r0, r4
    aaea:	adds	r4, #1
    aaec:	bl	a8d0 <rx_queue_transfer>
    aaf0:	cmp	r4, #8
    aaf2:	bne.n	aae8 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    aaf4:	ldr	r3, [pc, #96]	; (ab58 <usb_serial_configure+0xec>)
    aaf6:	ldr	r2, [pc, #100]	; (ab5c <usb_serial_configure+0xf0>)
    aaf8:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    aafa:	movs	r2, #0
    aafc:	ldr	r3, [pc, #96]	; (ab60 <usb_serial_configure+0xf4>)
    aafe:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    ab02:	movs	r2, #74	; 0x4a
    ab04:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    ab08:	ldr.w	r2, [r3, #328]	; 0x148
    ab0c:	orr.w	r2, r2, #16777216	; 0x1000000
    ab10:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    ab14:	ldr	r3, [pc, #76]	; (ab64 <usb_serial_configure+0xf8>)
    ab16:	cbz	r3, ab22 <usb_serial_configure+0xb6>
    ab18:	ldr	r2, [pc, #76]	; (ab68 <usb_serial_configure+0xfc>)
    ab1a:	ldrb	r3, [r2, #0]
    ab1c:	orr.w	r3, r3, #1
    ab20:	strb	r3, [r2, #0]
}
    ab22:	pop	{r4, r5, r6, pc}
    ab24:	.word	0x20021610
    ab28:	.word	0x20005cc0
    ab2c:	.word	0x2002147e
    ab30:	.word	0x200213f8
    ab34:	.word	0x2002160b
    ab38:	.word	0x20005b40
    ab3c:	.word	0x2002147c
    ab40:	.word	0x200213d8
    ab44:	.word	0x200213e8
    ab48:	.word	0x200215f7
    ab4c:	.word	0x20021607
    ab50:	.word	0x20020cc4
    ab54:	.word	0x0000a931
    ab58:	.word	0x200213a4
    ab5c:	.word	0x0000a9dd
    ab60:	.word	0x402e0000
    ab64:	.word	0x00000000
    ab68:	.word	0x20021612

0000ab6c <usb_serial_read>:
{
    ab6c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ab70:	mov.w	r3, #3758153728	; 0xe000e000
    ab74:	mov.w	r2, #131072	; 0x20000
{
    ab78:	mov	r7, r0
    ab7a:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    ab7c:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    ab80:	movs	r5, #0
	uint32_t tail = rx_tail;
    ab82:	ldr	r3, [pc, #160]	; (ac24 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    ab84:	ldr.w	fp, [pc, #176]	; ac38 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    ab88:	ldrb	r4, [r3, #0]
    ab8a:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    ab8c:	cmp	r5, r8
    ab8e:	bcs.n	ab98 <usb_serial_read+0x2c>
    ab90:	ldr	r3, [pc, #148]	; (ac28 <usb_serial_read+0xbc>)
    ab92:	ldrb	r2, [r3, #0]
    ab94:	cmp	r2, r4
    ab96:	bne.n	abac <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ab98:	mov.w	r3, #3758153728	; 0xe000e000
    ab9c:	mov.w	r2, #131072	; 0x20000
}
    aba0:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    aba2:	str.w	r2, [r3, #268]	; 0x10c
}
    aba6:	add	sp, #12
    aba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    abac:	adds	r4, #1
		uint32_t i = rx_list[tail];
    abae:	ldr	r3, [pc, #124]	; (ac2c <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    abb0:	ldr	r0, [pc, #124]	; (ac30 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    abb2:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    abb6:	cmp	r4, #9
    abb8:	ldr.w	sl, [pc, #128]	; ac3c <usb_serial_read+0xd0>
    abbc:	it	cs
    abbe:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    abc0:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    abc4:	ldrh.w	r1, [fp, r9, lsl #1]
    abc8:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    abcc:	ldr	r0, [pc, #100]	; (ac34 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    abce:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    abd0:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    abd4:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    abd6:	add	r1, r0
		if (avail > len) {
    abd8:	bcs.n	ac00 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    abda:	mov	r0, r7
    abdc:	str	r2, [sp, #4]
    abde:	bl	a79c <memcpy>
			rx_available -= len;
    abe2:	ldr.w	r1, [sl]
			rx_index[i] += len;
    abe6:	ldr	r2, [sp, #4]
			rx_available -= len;
    abe8:	sub.w	r1, r1, r8
    abec:	add	r1, r5
    abee:	mov	r5, r8
    abf0:	str.w	r1, [sl]
			rx_index[i] += len;
    abf4:	ldrh.w	r1, [fp, r9, lsl #1]
    abf8:	add	r2, r1
    abfa:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    abfe:	b.n	ab8c <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ac00:	mov	r2, r6
    ac02:	mov	r0, r7
    ac04:	bl	a79c <memcpy>
			rx_available -= avail;
    ac08:	ldr.w	r2, [sl]
			rx_tail = tail;
    ac0c:	ldr	r3, [pc, #20]	; (ac24 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    ac0e:	mov	r0, r9
			rx_available -= avail;
    ac10:	subs	r2, r2, r6
			p += avail;
    ac12:	add	r7, r6
			count += avail;
    ac14:	add	r5, r6
			rx_available -= avail;
    ac16:	str.w	r2, [sl]
			rx_tail = tail;
    ac1a:	uxtb	r2, r4
    ac1c:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    ac1e:	bl	a8d0 <rx_queue_transfer>
    ac22:	b.n	ab8c <usb_serial_read+0x20>
    ac24:	.word	0x20021607
    ac28:	.word	0x200215f7
    ac2c:	.word	0x200215f9
    ac30:	.word	0x200213d8
    ac34:	.word	0x20004b40
    ac38:	.word	0x200213e8
    ac3c:	.word	0x20020cc4

0000ac40 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    ac40:	ldr	r3, [pc, #44]	; (ac70 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    ac42:	ldr	r1, [pc, #48]	; (ac74 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    ac44:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    ac46:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    ac48:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    ac4a:	cmp	r2, r1
    ac4c:	beq.n	ac6a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    ac4e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    ac50:	ldr	r2, [pc, #36]	; (ac78 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    ac52:	cmp	r3, #9
    ac54:	it	cs
    ac56:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ac58:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ac5a:	ldr	r3, [pc, #32]	; (ac7c <usb_serial_peekchar+0x3c>)
    ac5c:	ldrh.w	r1, [r3, r2, lsl #1]
    ac60:	ldr	r3, [pc, #28]	; (ac80 <usb_serial_peekchar+0x40>)
    ac62:	add.w	r3, r3, r2, lsl #9
    ac66:	ldrb	r0, [r3, r1]
    ac68:	bx	lr
	if (tail == rx_head) return -1;
    ac6a:	mov.w	r0, #4294967295
}
    ac6e:	bx	lr
    ac70:	.word	0x20021607
    ac74:	.word	0x200215f7
    ac78:	.word	0x200215f9
    ac7c:	.word	0x200213e8
    ac80:	.word	0x20004b40

0000ac84 <usb_serial_available>:
	uint32_t n = rx_available;
    ac84:	ldr	r3, [pc, #12]	; (ac94 <usb_serial_available+0x10>)
{
    ac86:	push	{r4, lr}
	uint32_t n = rx_available;
    ac88:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    ac8a:	cbnz	r4, ac90 <usb_serial_available+0xc>
    ac8c:	bl	c960 <yield>
}
    ac90:	mov	r0, r4
    ac92:	pop	{r4, pc}
    ac94:	.word	0x20020cc4

0000ac98 <usb_serial_flush_input>:
{
    ac98:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    ac9c:	ldr	r5, [pc, #64]	; (ace0 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    ac9e:	ldr	r7, [pc, #68]	; (ace4 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    aca0:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    aca2:	ldr.w	r8, [pc, #80]	; acf4 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    aca6:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    aca8:	ldr	r6, [pc, #60]	; (ace8 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    acaa:	ldrb	r3, [r7, #0]
    acac:	cmp	r3, r4
    acae:	bne.n	acb4 <usb_serial_flush_input+0x1c>
}
    acb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    acb4:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    acb6:	ldr	r2, [pc, #52]	; (acec <usb_serial_flush_input+0x54>)
    acb8:	ldr	r1, [pc, #52]	; (acf0 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    acba:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    acbc:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    acbe:	it	cs
    acc0:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    acc2:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    acc6:	ldrh.w	r2, [r2, r0, lsl #1]
    acca:	ldrh.w	r1, [r1, r0, lsl #1]
    acce:	subs	r2, r2, r1
    acd0:	subs	r3, r3, r2
    acd2:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    acd4:	bl	a8d0 <rx_queue_transfer>
		rx_tail = tail;
    acd8:	uxtb	r3, r4
    acda:	strb	r3, [r5, #0]
    acdc:	b.n	acaa <usb_serial_flush_input+0x12>
    acde:	nop
    ace0:	.word	0x20021607
    ace4:	.word	0x200215f7
    ace8:	.word	0x20020cc4
    acec:	.word	0x200213d8
    acf0:	.word	0x200213e8
    acf4:	.word	0x200215f9

0000acf8 <usb_serial_getchar>:
{
    acf8:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    acfa:	movs	r1, #1
    acfc:	add.w	r0, sp, #7
    ad00:	bl	ab6c <usb_serial_read>
    ad04:	cbz	r0, ad10 <usb_serial_getchar+0x18>
    ad06:	ldrb.w	r0, [sp, #7]
}
    ad0a:	add	sp, #12
    ad0c:	ldr.w	pc, [sp], #4
	return -1;
    ad10:	mov.w	r0, #4294967295
    ad14:	b.n	ad0a <usb_serial_getchar+0x12>
	...

0000ad18 <usb_serial_write>:
	if (!usb_configuration) return 0;
    ad18:	ldr	r3, [pc, #356]	; (ae80 <usb_serial_write+0x168>)
{
    ad1a:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    ad1e:	ldrb	r3, [r3, #0]
{
    ad20:	mov	r6, r0
    ad22:	mov	r5, r1
	if (!usb_configuration) return 0;
    ad24:	and.w	r4, r3, #255	; 0xff
    ad28:	cmp	r3, #0
    ad2a:	beq.w	ae3e <usb_serial_write+0x126>
	uint32_t sent=0;
    ad2e:	movs	r4, #0
		tx_noautoflush = 1;
    ad30:	ldr.w	fp, [pc, #360]	; ae9c <usb_serial_write+0x184>
	while (size > 0) {
    ad34:	cmp	r5, #0
    ad36:	beq.w	ae3e <usb_serial_write+0x126>
		tx_noautoflush = 1;
    ad3a:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    ad3c:	ldr.w	r9, [pc, #352]	; aea0 <usb_serial_write+0x188>
		while (!tx_available) {
    ad40:	ldr	r7, [pc, #320]	; (ae84 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    ad42:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    ad46:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    ad4a:	ldr	r3, [pc, #316]	; (ae88 <usb_serial_write+0x170>)
    ad4c:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    ad50:	movs	r3, #0
		int waiting=0;
    ad52:	mov	r8, r3
		while (!tx_available) {
    ad54:	ldrh	r1, [r7, #0]
    ad56:	cbnz	r1, ad76 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    ad58:	mov	r0, sl
    ad5a:	strd	r3, r1, [sp]
    ad5e:	bl	b9e0 <usb_transfer_status>
			if (!(status & 0x80)) {
    ad62:	ands.w	r0, r0, #128	; 0x80
    ad66:	ldr	r2, [pc, #292]	; (ae8c <usb_serial_write+0x174>)
    ad68:	ldrd	r3, r1, [sp]
    ad6c:	bne.n	ae1a <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    ad6e:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    ad72:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    ad74:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ad76:	ldrh.w	r8, [r7]
    ad7a:	ldrb.w	r3, [r9]
    ad7e:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    ad82:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    ad84:	mov.w	r2, r3, lsl #11
    ad88:	add.w	r0, r0, r3, lsl #11
    ad8c:	ldr	r3, [pc, #256]	; (ae90 <usb_serial_write+0x178>)
    ad8e:	str	r2, [sp, #0]
    ad90:	add	r0, r3
		if (size >= tx_available) {
    ad92:	bhi.n	ae60 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    ad94:	mov	r2, r8
    ad96:	mov	r1, r6
    ad98:	bl	a79c <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ad9c:	ldr	r2, [sp, #0]
    ad9e:	ldr	r3, [pc, #240]	; (ae90 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ada0:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ada2:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ada4:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ada6:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    ada8:	mov.w	r2, #2048	; 0x800
    adac:	mov	r1, r8
    adae:	bl	b974 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    adb2:	mov	r1, r8
	asm("dsb");
    adb4:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    adb8:	add.w	r2, r8, #2048	; 0x800
    adbc:	add.w	r3, r8, #32
    adc0:	cmp	r3, r2
    adc2:	ite	hi
    adc4:	movhi	r3, #1
    adc6:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    adc8:	mov.w	r2, #3758153728	; 0xe000e000
    adcc:	add.w	r3, r8, r3, lsl #5
    add0:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    add4:	adds	r1, #32
	} while (location < end_addr);
    add6:	cmp	r1, r3
    add8:	bne.n	add0 <usb_serial_write+0xb8>
	asm("dsb");
    adda:	dsb	sy
	asm("isb");
    adde:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    ade2:	movs	r0, #3
    ade4:	mov	r1, sl
    ade6:	bl	b9a0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    adea:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    adee:	ldr	r2, [pc, #164]	; (ae94 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    adf0:	adds	r3, #1
    adf2:	uxtb	r3, r3
    adf4:	cmp	r3, #3
    adf6:	it	hi
    adf8:	movhi	r3, #0
    adfa:	strb.w	r3, [r9]
			size -= tx_available;
    adfe:	ldrh	r3, [r7, #0]
    ae00:	subs	r5, r5, r3
			sent += tx_available;
    ae02:	add	r4, r3
			data += tx_available;
    ae04:	add	r6, r3
			tx_available = 0;
    ae06:	movs	r3, #0
    ae08:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    ae0a:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    ae0e:	dsb	sy
		tx_noautoflush = 0;
    ae12:	movs	r3, #0
    ae14:	strb.w	r3, [fp]
    ae18:	b.n	ad34 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    ae1a:	dsb	sy
			tx_noautoflush = 0;
    ae1e:	strb.w	r1, [fp]
			if (!waiting) {
    ae22:	cmp.w	r8, #0
    ae26:	bne.n	ae2c <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    ae28:	ldr	r3, [pc, #108]	; (ae98 <usb_serial_write+0x180>)
    ae2a:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    ae2c:	ldrb	r1, [r2, #0]
    ae2e:	cbnz	r1, ae3e <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    ae30:	ldr	r1, [pc, #100]	; (ae98 <usb_serial_write+0x180>)
    ae32:	ldr	r1, [r1, #0]
    ae34:	subs	r1, r1, r3
    ae36:	cmp	r1, #120	; 0x78
    ae38:	bls.n	ae46 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    ae3a:	movs	r3, #1
    ae3c:	strb	r3, [r2, #0]
}
    ae3e:	mov	r0, r4
    ae40:	add	sp, #12
    ae42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    ae46:	ldr	r1, [pc, #56]	; (ae80 <usb_serial_write+0x168>)
    ae48:	ldrb	r1, [r1, #0]
    ae4a:	cmp	r1, #0
    ae4c:	beq.n	ae3e <usb_serial_write+0x126>
			tx_noautoflush = 1;
    ae4e:	mov.w	r8, #1
    ae52:	str	r3, [sp, #0]
			yield();
    ae54:	bl	c960 <yield>
			tx_noautoflush = 1;
    ae58:	ldr	r3, [sp, #0]
    ae5a:	strb.w	r8, [fp]
    ae5e:	b.n	ad54 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    ae60:	mov	r2, r5
    ae62:	mov	r1, r6
    ae64:	bl	a79c <memcpy>
			tx_available -= size;
    ae68:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ae6c:	ldr	r3, [pc, #36]	; (ae94 <usb_serial_write+0x17c>)
    ae6e:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    ae72:	add	r4, r5
			tx_available -= size;
    ae74:	strh.w	r8, [r7]
			size = 0;
    ae78:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    ae7a:	str.w	r2, [r3, #132]	; 0x84
}
    ae7e:	b.n	ae0e <usb_serial_write+0xf6>
    ae80:	.word	0x2002160f
    ae84:	.word	0x2002147c
    ae88:	.word	0x20005cc0
    ae8c:	.word	0x2002160a
    ae90:	.word	0x20005dc0
    ae94:	.word	0x402e0000
    ae98:	.word	0x20021380
    ae9c:	.word	0x2002160d
    aea0:	.word	0x2002160b

0000aea4 <usb_serial_putchar>:
{
    aea4:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    aea6:	movs	r1, #1
{
    aea8:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    aeac:	add.w	r0, sp, #7
    aeb0:	bl	ad18 <usb_serial_write>
}
    aeb4:	add	sp, #12
    aeb6:	ldr.w	pc, [sp], #4
	...

0000aebc <usb_serial_write_buffer_free>:
{
    aebc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    aec0:	movs	r4, #0
	tx_noautoflush = 1;
    aec2:	ldr	r7, [pc, #56]	; (aefc <usb_serial_write_buffer_free+0x40>)
    aec4:	movs	r3, #1
    aec6:	ldr	r6, [pc, #56]	; (af00 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    aec8:	mov	r5, r4
		if (i == tx_head) continue;
    aeca:	ldr.w	r8, [pc, #56]	; af04 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    aece:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    aed0:	ldrb.w	r3, [r8]
    aed4:	cmp	r3, r4
    aed6:	beq.n	aee6 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    aed8:	mov	r0, r6
    aeda:	bl	b9e0 <usb_transfer_status>
    aede:	lsls	r3, r0, #24
    aee0:	it	pl
    aee2:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    aee6:	adds	r4, #1
    aee8:	adds	r6, #32
    aeea:	cmp	r4, #4
    aeec:	bne.n	aed0 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    aeee:	dsb	sy
	tx_noautoflush = 0;
    aef2:	movs	r3, #0
}
    aef4:	mov	r0, r5
	tx_noautoflush = 0;
    aef6:	strb	r3, [r7, #0]
}
    aef8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aefc:	.word	0x2002160d
    af00:	.word	0x20005cc0
    af04:	.word	0x2002160b

0000af08 <usb_serial_flush_output>:
{
    af08:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    af0c:	ldr	r3, [pc, #116]	; (af84 <usb_serial_flush_output+0x7c>)
    af0e:	ldrb	r3, [r3, #0]
    af10:	cbz	r3, af80 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    af12:	ldr.w	r8, [pc, #132]	; af98 <usb_serial_flush_output+0x90>
    af16:	ldrh.w	r5, [r8]
    af1a:	cbz	r5, af80 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    af1c:	ldr	r7, [pc, #104]	; (af88 <usb_serial_flush_output+0x80>)
    af1e:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    af20:	ldr	r6, [pc, #104]	; (af8c <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    af22:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    af26:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    af28:	ldr	r2, [pc, #100]	; (af90 <usb_serial_flush_output+0x88>)
    af2a:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    af2c:	ldr	r4, [pc, #100]	; (af94 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    af2e:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    af32:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    af34:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    af38:	movs	r3, #0
    af3a:	mov	r0, r9
    af3c:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    af3e:	add	r5, r4
    af40:	bl	b974 <usb_prepare_transfer>
	asm("dsb");
    af44:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    af48:	mov.w	r3, #3758153728	; 0xe000e000
    af4c:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    af50:	adds	r4, #32
	} while (location < end_addr);
    af52:	cmp	r5, r4
    af54:	bhi.n	af4c <usb_serial_flush_output+0x44>
	asm("dsb");
    af56:	dsb	sy
	asm("isb");
    af5a:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    af5e:	movs	r0, #3
    af60:	mov	r1, r9
    af62:	bl	b9a0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    af66:	ldrb	r3, [r6, #0]
    af68:	movs	r2, #0
    af6a:	adds	r3, #1
	tx_available = 0;
    af6c:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    af70:	uxtb	r3, r3
    af72:	cmp	r3, #3
    af74:	ite	ls
    af76:	strbls	r3, [r6, #0]
    af78:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    af7a:	dsb	sy
	tx_noautoflush = 0;
    af7e:	strb	r2, [r7, #0]
}
    af80:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af84:	.word	0x2002160f
    af88:	.word	0x2002160d
    af8c:	.word	0x2002160b
    af90:	.word	0x20005cc0
    af94:	.word	0x20005dc0
    af98:	.word	0x2002147c

0000af9c <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    af9c:	ldr	r3, [pc, #512]	; (b1a0 <set_arm_clock+0x204>)
{
    af9e:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    afa0:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    afa2:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    afa4:	sub.w	r3, r3, #507904	; 0x7c000
    afa8:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    afaa:	ldr	r3, [pc, #504]	; (b1a4 <set_arm_clock+0x208>)
    afac:	cmp	r0, r3
    afae:	bls.w	b170 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    afb2:	ldr	r3, [pc, #500]	; (b1a8 <set_arm_clock+0x20c>)
    afb4:	cmp	r0, r3
    afb6:	bls.w	b182 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    afba:	ldr	r2, [pc, #496]	; (b1ac <set_arm_clock+0x210>)
    afbc:	subs	r3, r0, r3
    afbe:	udiv	r3, r3, r2
    afc2:	movs	r2, #25
    afc4:	muls	r3, r2
    afc6:	movw	r2, #1575	; 0x627
    afca:	addw	r3, r3, #1250	; 0x4e2
    afce:	cmp	r3, r2
    afd0:	it	cs
    afd2:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    afd4:	ldr	r6, [pc, #456]	; (b1a0 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    afd6:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    afda:	ldr.w	r2, [r6, #128]	; 0x80
    afde:	orr.w	r2, r2, #192	; 0xc0
    afe2:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    afe6:	movs	r2, #25
    afe8:	udiv	r2, r3, r2
    afec:	and.w	r3, r4, #31
    aff0:	cmp	r3, r2
    aff2:	bcs.n	b004 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    aff4:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    aff8:	ldr	r3, [pc, #436]	; (b1b0 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    affa:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    affc:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    affe:	ldr	r6, [r3, #0]
    b000:	cmp	r6, #0
    b002:	bge.n	affe <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b004:	ands.w	r3, r1, #33554432	; 0x2000000
    b008:	bne.n	b05c <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b00a:	ldr	r6, [pc, #424]	; (b1b4 <set_arm_clock+0x218>)
    b00c:	ldr	r7, [pc, #424]	; (b1b8 <set_arm_clock+0x21c>)
    b00e:	ldr	r6, [r6, #16]
    b010:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    b012:	cmp	r6, r7
    b014:	itee	eq
    b016:	moveq	r6, #3
    b018:	movne	r6, #0
    b01a:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b01c:	lsls	r7, r6, #27
    b01e:	eor.w	r6, r1, r6, lsl #27
    b022:	tst.w	r6, #939524096	; 0x38000000
    b026:	beq.n	b032 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b028:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    b02c:	ldr	r6, [pc, #368]	; (b1a0 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b02e:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    b030:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b032:	lsls	r6, r3, #12
    b034:	eor.w	r3, r5, r3, lsl #12
    b038:	tst.w	r3, #12288	; 0x3000
    b03c:	beq.n	b04e <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b03e:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b042:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    b044:	ldr	r5, [pc, #344]	; (b1a0 <set_arm_clock+0x204>)
    b046:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b048:	ldr	r3, [r5, #72]	; 0x48
    b04a:	lsls	r6, r3, #28
    b04c:	bmi.n	b048 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b04e:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b052:	ldr	r3, [pc, #332]	; (b1a0 <set_arm_clock+0x204>)
    b054:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b056:	ldr	r5, [r3, #72]	; 0x48
    b058:	lsls	r5, r5, #26
    b05a:	bmi.n	b056 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    b05c:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b05e:	ldr	r7, [pc, #348]	; (b1bc <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    b060:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    b062:	mul.w	r3, r6, r5
    b066:	muls	r3, r0
    b068:	cmp	r3, r7
    b06a:	bls.w	b188 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b06e:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    b072:	ldr	r0, [pc, #332]	; (b1c0 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b074:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    b078:	cmp	r3, r0
    b07a:	ldr	r0, [pc, #328]	; (b1c4 <set_arm_clock+0x228>)
    b07c:	bhi.w	b19c <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b080:	udiv	r3, r3, r0
    b084:	cmp	r3, #54	; 0x36
    b086:	it	cc
    b088:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b08a:	ldr	r7, [pc, #296]	; (b1b4 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b08c:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b08e:	ldr.w	lr, [pc, #344]	; b1e8 <set_arm_clock+0x24c>
    b092:	ldr.w	ip, [r7]
    b096:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b09a:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    b09e:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b0a2:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b0a6:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    b0a8:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b0ac:	beq.n	b0c2 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b0ae:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b0b2:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b0b6:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b0ba:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b0bc:	ldr	r3, [r7, #0]
    b0be:	cmp	r3, #0
    b0c0:	bge.n	b0bc <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b0c2:	ldr	r3, [pc, #220]	; (b1a0 <set_arm_clock+0x204>)
    b0c4:	subs	r5, #1
    b0c6:	ldr	r7, [r3, #16]
    b0c8:	and.w	r7, r7, #7
    b0cc:	cmp	r7, r5
    b0ce:	beq.n	b0d8 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b0d0:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b0d2:	ldr	r5, [r3, #72]	; 0x48
    b0d4:	lsls	r7, r5, #15
    b0d6:	bmi.n	b0d2 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b0d8:	subs	r3, r6, #1
    b0da:	lsls	r5, r3, #10
    b0dc:	eor.w	r3, r1, r3, lsl #10
    b0e0:	tst.w	r3, #7168	; 0x1c00
    b0e4:	beq.n	b0fa <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b0e6:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b0ea:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b0ee:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    b0f0:	ldr	r3, [pc, #172]	; (b1a0 <set_arm_clock+0x204>)
    b0f2:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b0f4:	ldr	r5, [r3, #72]	; 0x48
    b0f6:	lsls	r5, r5, #30
    b0f8:	bmi.n	b0f4 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b0fa:	ldr	r3, [pc, #204]	; (b1c8 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    b0fc:	ldr	r5, [pc, #204]	; (b1cc <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b0fe:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    b100:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b102:	itet	ls
    b104:	ldrls	r5, [pc, #200]	; (b1d0 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    b106:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b108:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b10c:	subs	r6, r3, #1
    b10e:	lsls	r5, r6, #8
    b110:	eor.w	r6, r1, r6, lsl #8
    b114:	tst.w	r6, #768	; 0x300
    b118:	ldr	r6, [pc, #132]	; (b1a0 <set_arm_clock+0x204>)
    b11a:	beq.n	b128 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b11c:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b120:	and.w	r5, r5, #768	; 0x300
    b124:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b126:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b128:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b12a:	ldr	r5, [pc, #116]	; (b1a0 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b12c:	bic.w	r1, r1, #33554432	; 0x2000000
    b130:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b132:	ldr	r1, [r5, #72]	; 0x48
    b134:	lsls	r1, r1, #26
    b136:	bmi.n	b132 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    b138:	ldr	r1, [pc, #152]	; (b1d4 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    b13a:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    b13e:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b140:	ldr	r1, [pc, #148]	; (b1d8 <set_arm_clock+0x23c>)
    b142:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b144:	mov.w	r3, #4294967295
    b148:	ldr	r1, [pc, #144]	; (b1dc <set_arm_clock+0x240>)
    b14a:	udiv	r1, r0, r1
    b14e:	udiv	r3, r3, r1
    b152:	ldr	r1, [pc, #140]	; (b1e0 <set_arm_clock+0x244>)
    b154:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b156:	and.w	r3, r4, #31
    b15a:	cmp	r2, r3
    b15c:	bcs.n	b16e <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b15e:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b162:	ldr	r3, [pc, #76]	; (b1b0 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b164:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    b166:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b168:	ldr	r2, [r3, #0]
    b16a:	cmp	r2, #0
    b16c:	bge.n	b168 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    b16e:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    b170:	ldr	r6, [pc, #112]	; (b1e4 <set_arm_clock+0x248>)
    b172:	movw	r3, #1150	; 0x47e
    b176:	movw	r2, #950	; 0x3b6
    b17a:	cmp	r0, r6
    b17c:	it	ls
    b17e:	movls	r3, r2
    b180:	b.n	afd4 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    b182:	movw	r3, #1250	; 0x4e2
    b186:	b.n	afd4 <set_arm_clock+0x38>
		if (div_arm < 8) {
    b188:	cmp	r5, #8
    b18a:	beq.n	b190 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    b18c:	adds	r5, #1
    b18e:	b.n	b062 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    b190:	cmp	r6, #4
    b192:	bhi.w	b06e <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    b196:	adds	r6, #1
				div_arm = 1;
    b198:	movs	r5, #1
    b19a:	b.n	b062 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    b19c:	movs	r3, #108	; 0x6c
    b19e:	b.n	b08a <set_arm_clock+0xee>
    b1a0:	.word	0x400fc000
    b1a4:	.word	0x1f78a400
    b1a8:	.word	0x23c34600
    b1ac:	.word	0x01ab3f00
    b1b0:	.word	0x40080000
    b1b4:	.word	0x400d8000
    b1b8:	.word	0x80003040
    b1bc:	.word	0x269fb1ff
    b1c0:	.word	0x4df67eff
    b1c4:	.word	0x00b71b00
    b1c8:	.word	0x08f0d17f
    b1cc:	.word	0x2cb4177f
    b1d0:	.word	0x08f0d180
    b1d4:	.word	0x20001db4
    b1d8:	.word	0x20001db0
    b1dc:	.word	0x000f4240
    b1e0:	.word	0x20020cec
    b1e4:	.word	0x016e3600
    b1e8:	.word	0x8001307f

0000b1ec <endpoint0_receive>:
{
    b1ec:	push	{r4, r5, lr}
    b1ee:	ldr	r4, [pc, #136]	; (b278 <endpoint0_receive+0x8c>)
	if (len > 0) {
    b1f0:	cbz	r1, b234 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b1f2:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b1f4:	ldr	r3, [pc, #132]	; (b27c <endpoint0_receive+0x90>)
    b1f6:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b1f8:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b1fc:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b1fe:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b200:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b202:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b206:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b208:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b20a:	add.w	r1, r0, #8192	; 0x2000
    b20e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b210:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b214:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b218:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b21a:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    b21c:	movs	r3, #0
    b21e:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    b220:	ldr	r3, [pc, #92]	; (b280 <endpoint0_receive+0x94>)
    b222:	ldr.w	r1, [r3, #432]	; 0x1b0
    b226:	orrs	r1, r5
    b228:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b22c:	ldr.w	r1, [r3, #432]	; 0x1b0
    b230:	cmp	r1, #0
    b232:	bne.n	b22c <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    b234:	ldr	r3, [pc, #76]	; (b284 <endpoint0_receive+0x98>)
    b236:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b238:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b23a:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    b23e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b240:	movw	r1, #32896	; 0x8080
    b244:	it	eq
    b246:	moveq	r1, #128	; 0x80
    b248:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b24a:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    b24c:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    b250:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b252:	mov.w	r1, #65537	; 0x10001
    b256:	ldr	r3, [pc, #40]	; (b280 <endpoint0_receive+0x94>)
    b258:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b25c:	ldr.w	r1, [r3, #432]	; 0x1b0
    b260:	orr.w	r1, r1, #65536	; 0x10000
    b264:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b268:	ldr	r1, [pc, #28]	; (b288 <endpoint0_receive+0x9c>)
    b26a:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    b26c:	ldr.w	r2, [r3, #432]	; 0x1b0
    b270:	cmp	r2, #0
    b272:	bne.n	b26c <endpoint0_receive+0x80>
}
    b274:	pop	{r4, r5, pc}
    b276:	nop
    b278:	.word	0x20000000
    b27c:	.word	0x200026e0
    b280:	.word	0x402e0000
    b284:	.word	0x200026c0
    b288:	.word	0x20020b9c

0000b28c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b28c:	ldr	r3, [r0, #56]	; 0x38
{
    b28e:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    b290:	cbz	r3, b29a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    b292:	ldr	r3, [r2, #4]
    b294:	orr.w	r3, r3, #32768	; 0x8000
    b298:	str	r3, [r2, #4]
	}
	__disable_irq();
    b29a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    b29c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    b29e:	ldr	r3, [pc, #96]	; (b300 <schedule_transfer+0x74>)
    b2a0:	cbz	r4, b2ec <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    b2a2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    b2a4:	ldr.w	r4, [r3, #432]	; 0x1b0
    b2a8:	tst	r4, r1
    b2aa:	bne.n	b2e6 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    b2ac:	ldr	r6, [pc, #84]	; (b304 <schedule_transfer+0x78>)
    b2ae:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    b2b0:	ldr.w	r4, [r3, #320]	; 0x140
    b2b4:	orr.w	r4, r4, #16384	; 0x4000
    b2b8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    b2bc:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    b2c0:	ldr.w	r5, [r3, #320]	; 0x140
    b2c4:	lsls	r5, r5, #17
    b2c6:	bmi.n	b2d2 <schedule_transfer+0x46>
    b2c8:	ldr	r5, [r6, #4]
    b2ca:	subs	r5, r5, r7
    b2cc:	cmp.w	r5, #2400	; 0x960
    b2d0:	bcc.n	b2b0 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    b2d2:	ands	r4, r1
    b2d4:	bne.n	b2e6 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    b2d6:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    b2da:	ldr	r4, [pc, #36]	; (b300 <schedule_transfer+0x74>)
    b2dc:	ldr.w	r3, [r4, #432]	; 0x1b0
    b2e0:	orrs	r3, r1
    b2e2:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    b2e6:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b2e8:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b2ea:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    b2ec:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    b2f0:	ldr.w	r4, [r3, #432]	; 0x1b0
    b2f4:	orrs	r1, r4
    b2f6:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b2fa:	str	r2, [r0, #48]	; 0x30
    b2fc:	b.n	b2e6 <schedule_transfer+0x5a>
    b2fe:	nop
    b300:	.word	0x402e0000
    b304:	.word	0xe0001000

0000b308 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b308:	push	{r4, r5, r6, lr}
    b30a:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    b30c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    b30e:	cbz	r0, b320 <run_callbacks+0x18>
    b310:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    b312:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    b314:	ldr	r3, [r2, #4]
    b316:	ands.w	r3, r3, #128	; 0x80
    b31a:	beq.n	b322 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    b31c:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    b31e:	cbnz	r5, b330 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    b320:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    b322:	ldr	r2, [r2, #0]
		count++;
    b324:	adds	r5, #1
		if ((uint32_t)t == 1) {
    b326:	cmp	r2, #1
    b328:	bne.n	b314 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    b32a:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    b32e:	b.n	b31e <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    b330:	ldr	r6, [r0, #0]
		count--;
    b332:	subs	r5, #1
		ep->callback_function(first);
    b334:	ldr	r3, [r4, #56]	; 0x38
    b336:	blx	r3
		first = next;
    b338:	mov	r0, r6
    b33a:	b.n	b31e <run_callbacks+0x16>

0000b33c <usb_endpoint_config>:
{
    b33c:	push	{r4, r5, r6, lr}
    b33e:	mov	r4, r0
    b340:	mov	r6, r1
    b342:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    b344:	movs	r1, #0
    b346:	movs	r2, #60	; 0x3c
    b348:	adds	r0, #4
    b34a:	bl	a758 <memset>
	qh->next = 1; // Terminate bit = 1
    b34e:	movs	r3, #1
	qh->config = config;
    b350:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    b352:	str	r3, [r4, #8]
	qh->callback_function = callback;
    b354:	str	r5, [r4, #56]	; 0x38
}
    b356:	pop	{r4, r5, r6, pc}

0000b358 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    b358:	ldr	r2, [pc, #124]	; (b3d8 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b35a:	push	{r4, lr}
	if (len > 0) {
    b35c:	cbz	r1, b3a2 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b35e:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b360:	ldr	r3, [pc, #120]	; (b3dc <endpoint0_transmit.constprop.0+0x84>)
    b362:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b364:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b368:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b36a:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b36c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b36e:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b372:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b374:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b376:	add.w	r1, r0, #8192	; 0x2000
    b37a:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b37c:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b380:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b384:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b386:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    b388:	movs	r3, #0
    b38a:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    b38c:	ldr	r3, [pc, #80]	; (b3e0 <endpoint0_transmit.constprop.0+0x88>)
    b38e:	ldr.w	r1, [r3, #432]	; 0x1b0
    b392:	orr.w	r1, r1, #65536	; 0x10000
    b396:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b39a:	ldr.w	r1, [r3, #432]	; 0x1b0
    b39e:	cmp	r1, #0
    b3a0:	bne.n	b39a <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    b3a2:	ldr	r3, [pc, #64]	; (b3e4 <endpoint0_transmit.constprop.0+0x8c>)
    b3a4:	movs	r1, #1
    b3a6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b3a8:	movs	r1, #128	; 0x80
    b3aa:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b3ac:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    b3ae:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    b3b2:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b3b4:	mov.w	r2, #65537	; 0x10001
    b3b8:	ldr	r3, [pc, #36]	; (b3e0 <endpoint0_transmit.constprop.0+0x88>)
    b3ba:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    b3be:	ldr.w	r2, [r3, #432]	; 0x1b0
    b3c2:	orr.w	r2, r2, #1
    b3c6:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b3ca:	ldr	r2, [pc, #28]	; (b3e8 <endpoint0_transmit.constprop.0+0x90>)
    b3cc:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b3ce:	ldr.w	r2, [r3, #432]	; 0x1b0
    b3d2:	cmp	r2, #0
    b3d4:	bne.n	b3ce <endpoint0_transmit.constprop.0+0x76>
}
    b3d6:	pop	{r4, pc}
    b3d8:	.word	0x20000000
    b3dc:	.word	0x200026e0
    b3e0:	.word	0x402e0000
    b3e4:	.word	0x200026c0
    b3e8:	.word	0x20020b9c

0000b3ec <usb_start_sof_interrupts>:
	__disable_irq();
    b3ec:	cpsid	i
	sof_usage |= (1 << interface);
    b3ee:	ldr	r2, [pc, #40]	; (b418 <usb_start_sof_interrupts+0x2c>)
    b3f0:	movs	r3, #1
    b3f2:	lsl.w	r0, r3, r0
    b3f6:	ldrb	r3, [r2, #0]
    b3f8:	orrs	r0, r3
    b3fa:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    b3fc:	ldr	r2, [pc, #28]	; (b41c <usb_start_sof_interrupts+0x30>)
    b3fe:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b402:	lsls	r1, r3, #24
    b404:	bmi.n	b412 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b406:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b408:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b40a:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b40e:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    b412:	cpsie	i
}
    b414:	bx	lr
    b416:	nop
    b418:	.word	0x20021609
    b41c:	.word	0x402e0000

0000b420 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    b420:	movs	r3, #1
    b422:	ldr	r2, [pc, #32]	; (b444 <usb_stop_sof_interrupts+0x24>)
    b424:	lsl.w	r0, r3, r0
    b428:	ldrb	r3, [r2, #0]
    b42a:	bic.w	r0, r3, r0
    b42e:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    b430:	cbnz	r0, b440 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b432:	ldr	r2, [pc, #20]	; (b448 <usb_stop_sof_interrupts+0x28>)
    b434:	ldr.w	r3, [r2, #328]	; 0x148
    b438:	bic.w	r3, r3, #128	; 0x80
    b43c:	str.w	r3, [r2, #328]	; 0x148
}
    b440:	bx	lr
    b442:	nop
    b444:	.word	0x20021609
    b448:	.word	0x402e0000

0000b44c <usb_isr>:
{
    b44c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    b450:	ldr	r4, [pc, #676]	; (b6f8 <usb_isr+0x2ac>)
    b452:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b456:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    b458:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b45c:	bmi.n	b4c4 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    b45e:	lsls	r1, r6, #25
    b460:	bmi.w	b88a <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    b464:	lsls	r4, r6, #7
    b466:	bpl.n	b470 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b468:	ldr	r3, [pc, #656]	; (b6fc <usb_isr+0x2b0>)
    b46a:	ldr	r3, [r3, #0]
    b46c:	cbz	r3, b470 <usb_isr+0x24>
    b46e:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b470:	lsls	r0, r6, #6
    b472:	bpl.n	b47c <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b474:	ldr	r3, [pc, #648]	; (b700 <usb_isr+0x2b4>)
    b476:	ldr	r3, [r3, #0]
    b478:	cbz	r3, b47c <usb_isr+0x30>
    b47a:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b47c:	lsls	r1, r6, #29
    b47e:	bpl.n	b492 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b480:	ldr	r3, [pc, #628]	; (b6f8 <usb_isr+0x2ac>)
    b482:	ldr	r2, [pc, #640]	; (b704 <usb_isr+0x2b8>)
    b484:	ldr.w	r3, [r3, #388]	; 0x184
    b488:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    b48c:	it	ne
    b48e:	movne	r3, #1
			usb_high_speed = 0;
    b490:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b492:	ldr	r3, [pc, #612]	; (b6f8 <usb_isr+0x2ac>)
    b494:	ldr.w	r3, [r3, #328]	; 0x148
    b498:	lsls	r2, r3, #24
    b49a:	bpl.w	b8ba <usb_isr+0x46e>
    b49e:	lsls	r3, r6, #24
    b4a0:	bpl.w	b8ba <usb_isr+0x46e>
		if (usb_reboot_timer) {
    b4a4:	ldr	r2, [pc, #608]	; (b708 <usb_isr+0x2bc>)
    b4a6:	ldrb	r3, [r2, #0]
    b4a8:	cmp	r3, #0
    b4aa:	beq.w	b8ba <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    b4ae:	subs	r3, #1
    b4b0:	uxtb	r3, r3
    b4b2:	strb	r3, [r2, #0]
    b4b4:	cmp	r3, #0
    b4b6:	bne.w	b8ba <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b4ba:	movs	r0, #3
    b4bc:	bl	b420 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b4c0:	bl	12628 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b4c4:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b4c8:	ldr	r7, [pc, #576]	; (b70c <usb_isr+0x2c0>)
		while (setupstatus) {
    b4ca:	cmp	r3, #0
    b4cc:	bne.n	b556 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b4ce:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    b4d2:	cmp	r5, #0
    b4d4:	beq.n	b45e <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    b4d6:	ldr	r2, [pc, #568]	; (b710 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    b4d8:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b4dc:	ldr	r1, [r2, #0]
    b4de:	tst	r5, r1
    b4e0:	beq.n	b518 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    b4e2:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b4e4:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    b4e8:	ldr	r2, [pc, #552]	; (b714 <usb_isr+0x2c8>)
    b4ea:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b4ec:	ldrh	r2, [r2, #0]
    b4ee:	cmp	r2, r1
    b4f0:	bne.w	b84c <usb_isr+0x400>
    b4f4:	uxth	r3, r3
    b4f6:	cbnz	r3, b518 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b4f8:	ldr	r2, [pc, #540]	; (b718 <usb_isr+0x2cc>)
    b4fa:	ldr	r3, [pc, #544]	; (b71c <usb_isr+0x2d0>)
    b4fc:	ldr	r0, [r2, #0]
    b4fe:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b500:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b502:	ldrb	r2, [r2, #6]
    b504:	str	r0, [r3, #0]
    b506:	strh	r1, [r3, #4]
    b508:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b50a:	bne.n	b518 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    b50c:	movs	r0, #3
    b50e:	bl	b3ec <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b512:	ldr	r3, [pc, #500]	; (b708 <usb_isr+0x2bc>)
    b514:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b516:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    b518:	ldr	r3, [pc, #516]	; (b720 <usb_isr+0x2d4>)
    b51a:	ldr	r3, [r3, #0]
			if (completestatus) {
    b51c:	ands	r5, r3
    b51e:	beq.n	b45e <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    b520:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b522:	ldr.w	r8, [pc, #512]	; b724 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    b526:	mov.w	r9, #1
				while (tx) {
    b52a:	cmp	r4, #0
    b52c:	bne.w	b86e <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    b530:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b532:	ldr	r7, [pc, #496]	; (b724 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    b534:	mov.w	r8, #1
				while(rx) {
    b538:	cmp	r5, #0
    b53a:	beq.n	b45e <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    b53c:	rbit	r4, r5
    b540:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b544:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    b548:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b54c:	bl	b308 <run_callbacks>
					rx &= ~(1<<p);
    b550:	bic.w	r5, r5, r4
    b554:	b.n	b538 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b556:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    b55a:	ldr	r3, [pc, #456]	; (b724 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    b55c:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b560:	ldr.w	r2, [r4, #320]	; 0x140
    b564:	orr.w	r2, r2, #8192	; 0x2000
    b568:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b56c:	ldr.w	r2, [r4, #320]	; 0x140
    b570:	lsls	r2, r2, #18
    b572:	bpl.n	b560 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b574:	ldr.w	r2, [r4, #320]	; 0x140
    b578:	bic.w	r2, r2, #8192	; 0x2000
    b57c:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b580:	mov.w	r2, #65537	; 0x10001
    b584:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b588:	ldr.w	r2, [r4, #436]	; 0x1b4
    b58c:	ands.w	r8, r2, #65537	; 0x10001
    b590:	bne.n	b588 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b592:	uxth	r1, r5
    b594:	ldr	r2, [pc, #376]	; (b710 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    b596:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    b59a:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    b59e:	beq.w	b6da <usb_isr+0x28e>
    b5a2:	bhi.n	b63a <usb_isr+0x1ee>
    b5a4:	movw	r2, #770	; 0x302
    b5a8:	cmp	r1, r2
    b5aa:	beq.w	b77e <usb_isr+0x332>
    b5ae:	bhi.n	b5ce <usb_isr+0x182>
    b5b0:	cmp	r1, #130	; 0x82
    b5b2:	beq.w	b748 <usb_isr+0x2fc>
    b5b6:	cmp.w	r1, #258	; 0x102
    b5ba:	beq.w	b7a4 <usb_isr+0x358>
    b5be:	cmp	r1, #128	; 0x80
    b5c0:	beq.w	b6ea <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b5c4:	mov.w	r3, #65537	; 0x10001
    b5c8:	str.w	r3, [r4, #448]	; 0x1c0
    b5cc:	b.n	b6d4 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b5ce:	cmp.w	r1, #1280	; 0x500
    b5d2:	beq.n	b6be <usb_isr+0x272>
    b5d4:	sub.w	r1, r1, #1664	; 0x680
    b5d8:	cmp	r1, #1
    b5da:	bhi.n	b5c4 <usb_isr+0x178>
    b5dc:	ldr	r2, [pc, #328]	; (b728 <usb_isr+0x2dc>)
    b5de:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b5e2:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b5e6:	ldr	r1, [r2, #4]
    b5e8:	cmp	r1, #0
    b5ea:	beq.n	b5c4 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b5ec:	ldrh.w	lr, [r2]
    b5f0:	mov	r0, r5
    b5f2:	cmp	lr, r5
    b5f4:	bne.w	b814 <usb_isr+0x3c8>
    b5f8:	ldrh.w	lr, [r2, #2]
    b5fc:	cmp	lr, ip
    b5fe:	bne.w	b814 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    b602:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    b604:	mov.w	r8, r3, lsr #16
    b608:	ldr	r3, [pc, #288]	; (b72c <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    b60a:	cmp	r5, #3
					datalen = *(list->addr);
    b60c:	ite	eq
    b60e:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b610:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b612:	cmp	r8, r2
    b614:	it	cs
    b616:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    b618:	cmp.w	r0, #512	; 0x200
    b61c:	bne.w	b7c6 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b620:	ldr	r2, [pc, #224]	; (b704 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b622:	ldr	r1, [pc, #268]	; (b730 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b624:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b626:	mov	r2, r8
    b628:	ldr	r0, [pc, #264]	; (b734 <usb_isr+0x2e8>)
    b62a:	cmp	r5, #0
    b62c:	it	ne
    b62e:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b630:	mov	r0, r3
    b632:	bl	a79c <memcpy>
    b636:	mov	r3, r0
    b638:	b.n	b7e8 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    b63a:	movw	r2, #8993	; 0x2321
    b63e:	cmp	r1, r2
    b640:	beq.n	b684 <usb_isr+0x238>
    b642:	bhi.n	b690 <usb_isr+0x244>
    b644:	movw	r2, #8225	; 0x2021
    b648:	cmp	r1, r2
    b64a:	beq.w	b832 <usb_isr+0x3e6>
    b64e:	movw	r2, #8737	; 0x2221
    b652:	cmp	r1, r2
    b654:	beq.w	b818 <usb_isr+0x3cc>
    b658:	cmp.w	r1, #2304	; 0x900
    b65c:	bne.n	b5c4 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    b65e:	ldr	r3, [pc, #216]	; (b738 <usb_isr+0x2ec>)
    b660:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b664:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    b668:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b66a:	ldr	r3, [pc, #208]	; (b73c <usb_isr+0x2f0>)
    b66c:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b670:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b674:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b678:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    b67c:	bl	aa6c <usb_serial_configure>
		usb_mtp_configure();
    b680:	bl	c68c <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b684:	movs	r2, #0
    b686:	mov	r1, r2
    b688:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b68a:	bl	b1ec <endpoint0_receive>
			return;
    b68e:	b.n	b6d4 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b690:	movw	r2, #25633	; 0x6421
    b694:	cmp	r1, r2
    b696:	beq.w	b846 <usb_isr+0x3fa>
    b69a:	movw	r2, #26529	; 0x67a1
    b69e:	cmp	r1, r2
    b6a0:	bne.n	b5c4 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    b6a2:	cmp.w	r3, #262144	; 0x40000
    b6a6:	bcc.n	b5c4 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    b6a8:	ldr	r3, [pc, #148]	; (b740 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    b6aa:	movs	r1, #4
    b6ac:	ldr	r0, [pc, #104]	; (b718 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b6ae:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b6b0:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b6b2:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b6b4:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b6b6:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b6ba:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b6bc:	b.n	b6e4 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b6be:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b6c0:	mov	r2, r8
    b6c2:	mov	r1, r8
    b6c4:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b6c6:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b6c8:	bl	b1ec <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b6cc:	orr.w	r5, r5, #16777216	; 0x1000000
    b6d0:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b6d4:	ldr.w	r3, [r4, #428]	; 0x1ac
    b6d8:	b.n	b4ca <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    b6da:	ldr	r3, [pc, #92]	; (b738 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b6dc:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b6de:	ldr	r0, [pc, #100]	; (b744 <usb_isr+0x2f8>)
    b6e0:	ldrb	r3, [r3, #0]
    b6e2:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b6e4:	bl	b358 <endpoint0_transmit.constprop.0>
				return;
    b6e8:	b.n	b6d4 <usb_isr+0x288>
		reply_buffer[0] = 0;
    b6ea:	ldr	r0, [pc, #88]	; (b744 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b6ec:	movs	r1, #2
		reply_buffer[0] = 0;
    b6ee:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    b6f2:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b6f6:	b.n	b6e4 <usb_isr+0x298>
    b6f8:	.word	0x402e0000
    b6fc:	.word	0x200213a4
    b700:	.word	0x200213a8
    b704:	.word	0x20021610
    b708:	.word	0x20021611
    b70c:	.word	0x402e01c0
    b710:	.word	0x20020b9c
    b714:	.word	0x20007dc0
    b718:	.word	0x200215e5
    b71c:	.word	0x20021398
    b720:	.word	0x20020ba0
    b724:	.word	0x20000000
    b728:	.word	0x200009b8
    b72c:	.word	0x20201800
    b730:	.word	0x60002650
    b734:	.word	0x600026b9
    b738:	.word	0x2002160f
    b73c:	.word	0x00cc0002
    b740:	.word	0x200023af
    b744:	.word	0x200215ef
		endpoint = setup.wIndex & 0x7F;
    b748:	uxth	r0, r3
		if (endpoint > 7) break;
    b74a:	ands.w	r3, r3, #120	; 0x78
    b74e:	bne.w	b5c4 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b752:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b756:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b758:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    b75c:	ldr	r2, [pc, #352]	; (b8c0 <usb_isr+0x474>)
    b75e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b760:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b762:	bpl.n	b778 <usb_isr+0x32c>
    b764:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    b768:	it	ne
    b76a:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b76c:	mov.w	r1, #2
    b770:	ldr	r0, [pc, #332]	; (b8c0 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    b772:	it	ne
    b774:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b776:	b.n	b6e4 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b778:	tst.w	r1, #1
    b77c:	b.n	b768 <usb_isr+0x31c>
		if (endpoint > 7) break;
    b77e:	tst.w	r3, #120	; 0x78
    b782:	uxth	r2, r3
    b784:	bne.w	b5c4 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b788:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b78c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b790:	ldr.w	r2, [r7, r3, lsl #2]
    b794:	ite	ne
    b796:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b79a:	orreq.w	r2, r2, #1
    b79e:	str.w	r2, [r7, r3, lsl #2]
    b7a2:	b.n	b684 <usb_isr+0x238>
		if (endpoint > 7) break;
    b7a4:	tst.w	r3, #120	; 0x78
    b7a8:	uxth	r2, r3
    b7aa:	bne.w	b5c4 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b7ae:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b7b2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b7b6:	ldr.w	r2, [r7, r3, lsl #2]
    b7ba:	ite	ne
    b7bc:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b7c0:	biceq.w	r2, r2, #1
    b7c4:	b.n	b79e <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b7c6:	cmp.w	r0, #1792	; 0x700
    b7ca:	bne.n	b810 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b7cc:	ldr	r2, [pc, #244]	; (b8c4 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b7ce:	ldr	r0, [pc, #248]	; (b8c8 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b7d0:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b7d2:	mov	r2, r8
    b7d4:	ldr	r1, [pc, #244]	; (b8cc <usb_isr+0x480>)
    b7d6:	cmp	r5, #0
    b7d8:	it	ne
    b7da:	movne	r1, r0
    b7dc:	mov	r0, r3
    b7de:	bl	a79c <memcpy>
					usb_descriptor_buffer[1] = 7;
    b7e2:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b7e4:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b7e6:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b7e8:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b7ec:	add.w	r0, r3, r8
	asm("dsb");
    b7f0:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b7f4:	mov.w	r3, #3758153728	; 0xe000e000
    b7f8:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b7fc:	adds	r5, #32
	} while (location < end_addr);
    b7fe:	cmp	r0, r5
    b800:	bhi.n	b7f8 <usb_isr+0x3ac>
	asm("dsb");
    b802:	dsb	sy
	asm("isb");
    b806:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b80a:	ldr	r0, [pc, #196]	; (b8d0 <usb_isr+0x484>)
    b80c:	mov	r1, r8
    b80e:	b.n	b6e4 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b810:	mov	r2, r8
    b812:	b.n	b630 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b814:	adds	r2, #12
    b816:	b.n	b5e6 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b818:	uxth	r3, r3
    b81a:	cmp	r3, #0
    b81c:	bne.w	b684 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b820:	ldr	r3, [pc, #176]	; (b8d4 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b822:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b826:	ldr	r2, [r3, #0]
    b828:	ldr	r3, [pc, #172]	; (b8d8 <usb_isr+0x48c>)
    b82a:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b82c:	ldr	r3, [pc, #172]	; (b8dc <usb_isr+0x490>)
    b82e:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b830:	b.n	b684 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b832:	lsrs	r1, r3, #16
    b834:	cmp	r1, #7
		if (setup.wLength == 6) {
    b836:	bne.w	b5c4 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b83a:	ldr	r2, [pc, #164]	; (b8e0 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b83c:	ldr	r0, [pc, #164]	; (b8e4 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b83e:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b842:	movs	r2, #1
    b844:	b.n	b68a <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b846:	lsrs	r1, r3, #16
    b848:	cmp	r1, #6
    b84a:	b.n	b836 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b84c:	movw	r3, #25633	; 0x6421
    b850:	cmp	r2, r3
    b852:	bne.w	b518 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b856:	ldr	r3, [pc, #140]	; (b8e4 <usb_isr+0x498>)
    b858:	ldrb	r2, [r3, #0]
    b85a:	cmp	r2, #1
    b85c:	bne.w	b518 <usb_isr+0xcc>
    b860:	ldrb	r3, [r3, #1]
    b862:	cmp	r3, #64	; 0x40
    b864:	bne.w	b518 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b868:	ldr	r3, [pc, #124]	; (b8e8 <usb_isr+0x49c>)
    b86a:	movs	r2, #25
    b86c:	b.n	b516 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b86e:	rbit	r7, r4
    b872:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b876:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b87a:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b87e:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b880:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b884:	bl	b308 <run_callbacks>
					tx &= ~(1<<p);
    b888:	b.n	b52a <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b88a:	ldr	r3, [pc, #96]	; (b8ec <usb_isr+0x4a0>)
    b88c:	ldr.w	r2, [r3, #428]	; 0x1ac
    b890:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b894:	ldr.w	r2, [r3, #444]	; 0x1bc
    b898:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b89c:	ldr.w	r4, [r3, #432]	; 0x1b0
    b8a0:	cmp	r4, #0
    b8a2:	bne.n	b89c <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b8a4:	mov.w	r2, #4294967295
    b8a8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b8ac:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b8b0:	bl	aa68 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b8b4:	ldr	r3, [pc, #56]	; (b8f0 <usb_isr+0x4a4>)
    b8b6:	str	r4, [r3, #0]
    b8b8:	b.n	b464 <usb_isr+0x18>
}
    b8ba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b8be:	nop
    b8c0:	.word	0x200215ef
    b8c4:	.word	0x20021610
    b8c8:	.word	0x60002650
    b8cc:	.word	0x600026b9
    b8d0:	.word	0x20201800
    b8d4:	.word	0x20021380
    b8d8:	.word	0x200213a0
    b8dc:	.word	0x2002160e
    b8e0:	.word	0x20007dc0
    b8e4:	.word	0x200215e5
    b8e8:	.word	0x200023af
    b8ec:	.word	0x402e0000
    b8f0:	.word	0x20020ba0

0000b8f4 <usb_config_rx>:
{
    b8f4:	push	{r4, r5, r6, lr}
    b8f6:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b8f8:	subs	r3, r0, #2
{
    b8fa:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b8fc:	cmp	r3, #3
    b8fe:	bhi.n	b928 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b900:	clz	r4, r2
    b904:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b906:	ldr	r0, [pc, #36]	; (b92c <usb_config_rx+0x38>)
    b908:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b90a:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b90c:	add.w	r0, r0, r5, lsl #7
    b910:	orr.w	r1, r1, r4, lsl #29
    b914:	bl	b33c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b918:	cbz	r6, b928 <usb_config_rx+0x34>
    b91a:	ldr	r2, [pc, #20]	; (b930 <usb_config_rx+0x3c>)
    b91c:	movs	r3, #1
    b91e:	lsl.w	r0, r3, r5
    b922:	ldr	r3, [r2, #0]
    b924:	orrs	r0, r3
    b926:	str	r0, [r2, #0]
}
    b928:	pop	{r4, r5, r6, pc}
    b92a:	nop
    b92c:	.word	0x20000000
    b930:	.word	0x20020ba0

0000b934 <usb_config_tx>:
{
    b934:	push	{r4, r5, r6, lr}
    b936:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b938:	subs	r3, r0, #2
{
    b93a:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b93c:	cmp	r3, #3
    b93e:	bhi.n	b96a <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b940:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b944:	ldr	r0, [pc, #36]	; (b96c <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b946:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b948:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b94a:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b94c:	add.w	r0, r0, r4, lsl #7
    b950:	orr.w	r1, r1, r5, lsl #29
    b954:	adds	r0, #64	; 0x40
    b956:	bl	b33c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b95a:	cbz	r6, b96a <usb_config_tx+0x36>
    b95c:	ldr	r2, [pc, #16]	; (b970 <usb_config_tx+0x3c>)
    b95e:	adds	r4, #16
    b960:	movs	r3, #1
    b962:	ldr	r1, [r2, #0]
    b964:	lsls	r3, r4
    b966:	orrs	r3, r1
    b968:	str	r3, [r2, #0]
}
    b96a:	pop	{r4, r5, r6, pc}
    b96c:	.word	0x20000000
    b970:	.word	0x20020ba0

0000b974 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b974:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b976:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b978:	orr.w	r2, r2, #128	; 0x80
    b97c:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b97e:	add.w	r2, r1, #4096	; 0x1000
    b982:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b984:	add.w	r2, r1, #8192	; 0x2000
{
    b988:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b98a:	str	r2, [r0, #16]
	transfer->next = 1;
    b98c:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b98e:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b992:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b996:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b998:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b99a:	strd	r1, r3, [r0, #24]
}
    b99e:	pop	{r4, pc}

0000b9a0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b9a0:	subs	r3, r0, #2
{
    b9a2:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b9a4:	cmp	r3, #3
    b9a6:	bhi.n	b9be <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b9a8:	ldr	r3, [pc, #20]	; (b9c0 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b9aa:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b9ae:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b9b2:	movs	r3, #1
    b9b4:	adds	r0, #64	; 0x40
    b9b6:	lsl.w	r1, r3, r1
    b9ba:	b.w	b28c <schedule_transfer>
}
    b9be:	bx	lr
    b9c0:	.word	0x20000000

0000b9c4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b9c4:	subs	r3, r0, #2
{
    b9c6:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b9c8:	cmp	r3, #3
    b9ca:	bhi.n	b9da <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b9cc:	movs	r1, #1
    b9ce:	ldr	r3, [pc, #12]	; (b9dc <usb_receive+0x18>)
    b9d0:	lsls	r1, r0
    b9d2:	add.w	r0, r3, r0, lsl #7
    b9d6:	b.w	b28c <schedule_transfer>
}
    b9da:	bx	lr
    b9dc:	.word	0x20000000

0000b9e0 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b9e0:	ldr	r2, [pc, #32]	; (ba04 <usb_transfer_status+0x24>)
{
    b9e2:	mov	r1, r0
	cmd = USB1_USBCMD;
    b9e4:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b9e8:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b9ea:	orr.w	r3, r3, #16384	; 0x4000
    b9ee:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b9f2:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b9f4:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b9f8:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b9fa:	tst.w	r3, #16384	; 0x4000
    b9fe:	beq.n	b9e8 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    ba00:	bx	lr
    ba02:	nop
    ba04:	.word	0x402e0000

0000ba08 <ultoa>:
{
    ba08:	push	{r4, r5, r6, lr}
	int i=0, j;
    ba0a:	movs	r4, #0
		digit = val % radix;
    ba0c:	udiv	r5, r0, r2
    ba10:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ba14:	uxtb	r3, r6
    ba16:	cmp	r6, #9
    ba18:	ite	ls
    ba1a:	addls	r3, #48	; 0x30
    ba1c:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    ba1e:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ba20:	uxtb	r3, r3
    ba22:	strb	r3, [r1, r4]
		if (val == 0) break;
    ba24:	bhi.n	ba2c <ultoa+0x24>
		i++;
    ba26:	adds	r4, #1
		val /= radix;
    ba28:	mov	r0, r5
		digit = val % radix;
    ba2a:	b.n	ba0c <ultoa+0x4>
	buf[i + 1] = 0;
    ba2c:	adds	r3, r1, r4
    ba2e:	movs	r2, #0
    ba30:	subs	r0, r1, #1
    ba32:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    ba34:	subs	r5, r4, r2
    ba36:	cmp	r2, r5
    ba38:	blt.n	ba3e <ultoa+0x36>
}
    ba3a:	mov	r0, r1
    ba3c:	pop	{r4, r5, r6, pc}
		t = buf[j];
    ba3e:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    ba42:	adds	r2, #1
		buf[j] = buf[i];
    ba44:	ldrb	r6, [r3, #0]
    ba46:	strb	r6, [r0, #0]
		buf[i] = t;
    ba48:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    ba4c:	b.n	ba34 <ultoa+0x2c>
	...

0000ba50 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    ba50:	vcmp.f32	s0, s0
{
    ba54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    ba58:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    ba5c:	eor.w	r5, r0, r0, asr #31
{
    ba60:	mov	r7, r0
    ba62:	mov	r6, r1
    ba64:	mov	r4, r2
	int awidth = abs(width);
    ba66:	sub.w	r5, r5, r0, asr #31
{
    ba6a:	vpush	{d8}
    ba6e:	vmov.f32	s16, s0
    ba72:	sub	sp, #20
	if (isnanf(val)) {
    ba74:	bvc.n	bad4 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    ba76:	vcmpe.f32	s0, #0.0
    ba7a:	vmrs	APSR_nzcv, fpscr
    ba7e:	ite	mi
    ba80:	movmi	r3, #4
    ba82:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    ba84:	cmp	r3, r5
    ba86:	ite	lt
    ba88:	sublt	r5, r5, r3
    ba8a:	movge	r5, #0
		if (width<0) {
    ba8c:	cmp	r0, #0
    ba8e:	bge.n	ba9e <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    ba90:	mov	r2, r5
    ba92:	mov	r0, r4
    ba94:	add	r4, r5
    ba96:	movs	r5, #0
    ba98:	movs	r1, #32
    ba9a:	bl	a758 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    ba9e:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    baa2:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    baa4:	cmp	r3, #0
    baa6:	itt	lt
    baa8:	movlt	r3, #45	; 0x2d
    baaa:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    baae:	movs	r3, #65	; 0x41
    bab0:	strb	r2, [r4, #0]
    bab2:	strb	r3, [r4, #1]
    bab4:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    bab6:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bab8:	strb	r2, [r4, #2]
			*buf++ = ' ';
    baba:	movs	r1, #32
    babc:	mov	r2, r5
    babe:	bl	a758 <memset>
			awidth--;
		}
		*buf = 0;
    bac2:	movs	r2, #0
			*buf++ = ' ';
    bac4:	mov	r3, r0
    bac6:	add	r0, r5
		*buf = 0;
    bac8:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    baca:	add	sp, #20
    bacc:	vpop	{d8}
    bad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    bad4:	vabs.f32	s15, s0
    bad8:	vldr	s14, [pc, #432]	; bc8c <dtostrf+0x23c>
    badc:	vcmp.f32	s15, s14
    bae0:	vmrs	APSR_nzcv, fpscr
    bae4:	ble.n	bb2c <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    bae6:	vcmpe.f32	s0, #0.0
    baea:	vmrs	APSR_nzcv, fpscr
    baee:	ite	mi
    baf0:	movmi	r3, #4
    baf2:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    baf4:	cmp	r3, r5
    baf6:	ite	lt
    baf8:	sublt	r5, r5, r3
    bafa:	movge	r5, #0
		if (width<0) {
    bafc:	cmp	r0, #0
    bafe:	bge.n	bb0e <dtostrf+0xbe>
				*buf++ = ' ';
    bb00:	mov	r2, r5
    bb02:	mov	r0, r4
    bb04:	add	r4, r5
    bb06:	movs	r5, #0
    bb08:	movs	r1, #32
    bb0a:	bl	a758 <memset>
		if (val<0) *buf++ = '-';
    bb0e:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bb12:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    bb14:	vmrs	APSR_nzcv, fpscr
    bb18:	itt	mi
    bb1a:	movmi	r3, #45	; 0x2d
    bb1c:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bb20:	movs	r3, #73	; 0x49
    bb22:	strb	r3, [r4, #0]
    bb24:	movs	r3, #78	; 0x4e
    bb26:	strb	r3, [r4, #1]
    bb28:	adds	r3, r4, #3
    bb2a:	b.n	bab6 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    bb2c:	add	r2, sp, #8
    bb2e:	add	r1, sp, #4
    bb30:	mov	r0, r6
    bb32:	bl	e02a <fcvtf>
	if (precision == 0 && decpt == 0) {
    bb36:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    bb38:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    bb3a:	orrs.w	r2, r6, r3
    bb3e:	bne.n	bbde <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    bb40:	ldrb	r1, [r0, #0]
    bb42:	ldr	r3, [pc, #332]	; (bc90 <dtostrf+0x240>)
    bb44:	ldr	r2, [pc, #332]	; (bc94 <dtostrf+0x244>)
    bb46:	cmp	r1, #52	; 0x34
    bb48:	ite	ls
    bb4a:	movls	r8, r2
    bb4c:	movhi	r8, r3
		decpt++;
    bb4e:	movs	r3, #1
    bb50:	str	r3, [sp, #4]
	reqd = strlen(s);
    bb52:	mov	r0, r8
    bb54:	bl	f310 <strlen>
	if (reqd > decpt) reqd++;
    bb58:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    bb5a:	mov	r5, r0
	if (reqd > decpt) reqd++;
    bb5c:	cmp	r3, r0
    bb5e:	it	lt
    bb60:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    bb62:	cmp	r3, #0
    bb64:	bne.n	bbee <dtostrf+0x19e>
    bb66:	adds	r5, #1
	if (sign) reqd++;
    bb68:	ldr.w	fp, [sp, #8]
    bb6c:	cmp.w	fp, #0
    bb70:	beq.n	bb74 <dtostrf+0x124>
    bb72:	adds	r5, #1
	pad = width - reqd;
    bb74:	sub.w	sl, r7, r5
	e = p + reqd;
    bb78:	add.w	r9, r4, r5
	if (pad > 0) {
    bb7c:	cmp.w	sl, #0
    bb80:	ble.n	bc36 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    bb82:	mov	r2, sl
    bb84:	movs	r1, #32
    bb86:	mov	r0, r4
		e += pad;
    bb88:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    bb8a:	bl	a758 <memset>
    bb8e:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    bb92:	cmp.w	fp, #0
    bb96:	beq.n	bb9e <dtostrf+0x14e>
    bb98:	movs	r3, #45	; 0x2d
    bb9a:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    bb9e:	ldr	r1, [sp, #4]
    bba0:	cmp	r1, #0
    bba2:	bne.n	bc3a <dtostrf+0x1ea>
    bba4:	cbz	r6, bbb4 <dtostrf+0x164>
		*p++ = '0';
    bba6:	mov	r3, r2
    bba8:	movs	r1, #48	; 0x30
    bbaa:	strb.w	r1, [r3], #2
		*p++ = '.';
    bbae:	movs	r1, #46	; 0x2e
    bbb0:	strb	r1, [r2, #1]
    bbb2:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    bbb4:	movs	r0, #46	; 0x2e
	while (p < e) {
    bbb6:	cmp	r9, r2
		*p++ = *s++;
    bbb8:	mov	r3, r2
	while (p < e) {
    bbba:	bhi.n	bc70 <dtostrf+0x220>
	if (width < 0) {
    bbbc:	cmp	r7, #0
    bbbe:	bge.n	bbd6 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    bbc0:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    bbc2:	movs	r1, #32
		pad = (reqd + width) * -1;
    bbc4:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    bbc6:	mov	r0, r3
    bbc8:	bic.w	r5, r5, r5, asr #31
    bbcc:	mov	r2, r5
    bbce:	bl	a758 <memset>
    bbd2:	mov	r3, r0
    bbd4:	add	r3, r5
	*p = 0;
    bbd6:	movs	r2, #0
	return buf;
    bbd8:	mov	r0, r4
	*p = 0;
    bbda:	strb	r2, [r3, #0]
	return buf;
    bbdc:	b.n	baca <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    bbde:	negs	r3, r3
    bbe0:	cmp	r6, r3
		decpt = -precision;
    bbe2:	ittt	lt
    bbe4:	neglt	r3, r6
		s = "0";
    bbe6:	ldrlt.w	r8, [pc, #172]	; bc94 <dtostrf+0x244>
		decpt = -precision;
    bbea:	strlt	r3, [sp, #4]
    bbec:	b.n	bb52 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    bbee:	bge.n	bb68 <dtostrf+0x118>
    bbf0:	cmp	r6, #0
    bbf2:	beq.n	bb68 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    bbf4:	add	r3, r6
		reqd = precision + 2;
    bbf6:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    bbf8:	cmp	r0, r3
    bbfa:	bls.n	bb68 <dtostrf+0x118>
				val *= 10.0f;
    bbfc:	vmov.f32	s15, #36	; 0x41200000  10.0
    bc00:	mov	r3, r6
    bc02:	b.n	bc0a <dtostrf+0x1ba>
    bc04:	vmul.f32	s16, s16, s15
				newPrecision--;
    bc08:	subs	r3, #1
			while (newPrecision > 0) {
    bc0a:	cmp	r3, #0
    bc0c:	bgt.n	bc04 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    bc0e:	cmp	r6, #0
    bc10:	add	r2, sp, #8
    bc12:	add	r1, sp, #12
    bc14:	vmov.f32	s0, s16
    bc18:	ite	ge
    bc1a:	subge	r0, r6, r6
    bc1c:	movlt	r0, r6
    bc1e:	bl	e02a <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    bc22:	ldr	r3, [sp, #4]
    bc24:	ldr	r2, [sp, #12]
    bc26:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    bc28:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    bc2a:	subs	r2, r2, r3
    bc2c:	cmp	r2, r1
    bc2e:	itt	eq
    bc30:	addeq	r3, #1
    bc32:	streq	r3, [sp, #4]
    bc34:	b.n	bb68 <dtostrf+0x118>
    bc36:	mov	r2, r4
    bc38:	b.n	bb92 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    bc3a:	bge.n	bbb4 <dtostrf+0x164>
    bc3c:	cmp	r6, #0
    bc3e:	beq.n	bbb4 <dtostrf+0x164>
		*p++ = '0';
    bc40:	mov	r3, r2
		*p++ = '.';
    bc42:	movs	r0, #46	; 0x2e
		*p++ = '0';
    bc44:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    bc48:	movs	r6, #0
		*p++ = '0';
    bc4a:	strb.w	ip, [r3], #2
		*p++ = '.';
    bc4e:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    bc50:	rsb	r0, r1, #2
    bc54:	add	r2, r0
		*p++ = '.';
    bc56:	mov	r0, r3
		while ( decpt < 0 ) {
    bc58:	cmp	r0, r2
    bc5a:	bne.n	bc68 <dtostrf+0x218>
    bc5c:	subs	r2, r3, r1
    bc5e:	cmp	r6, #0
    bc60:	beq.n	bbb4 <dtostrf+0x164>
    bc62:	movs	r3, #0
    bc64:	str	r3, [sp, #4]
    bc66:	b.n	bbb4 <dtostrf+0x164>
			*p++ = '0';
    bc68:	movs	r6, #1
    bc6a:	strb.w	ip, [r0], #1
    bc6e:	b.n	bc58 <dtostrf+0x208>
		*p++ = *s++;
    bc70:	ldrb.w	r1, [r8], #1
    bc74:	strb.w	r1, [r3], #1
		if (p == e) break;
    bc78:	cmp	r9, r3
    bc7a:	beq.n	bbbc <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    bc7c:	ldr	r1, [sp, #4]
    bc7e:	subs	r1, #1
    bc80:	str	r1, [sp, #4]
    bc82:	cbnz	r1, bc88 <dtostrf+0x238>
    bc84:	adds	r3, r2, #2
    bc86:	strb	r0, [r2, #1]
			*p++ = '0';
    bc88:	mov	r2, r3
    bc8a:	b.n	bbb6 <dtostrf+0x166>
    bc8c:	.word	0x7f7fffff
    bc90:	.word	0x20001025
    bc94:	.word	0x200011a1

0000bc98 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    bc98:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bc9a:	ldr	r3, [pc, #52]	; (bcd0 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bc9c:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    bc9e:	ldr	r6, [pc, #52]	; (bcd4 <micros+0x3c>)
		scc = systick_cycle_count;
    bca0:	ldr	r5, [pc, #52]	; (bcd8 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bca2:	ldrex	r2, [r3]
		smc = systick_millis_count;
    bca6:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    bca8:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bcaa:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    bcae:	cmp	r2, #0
    bcb0:	bne.n	bca2 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    bcb2:	ldr	r3, [pc, #40]	; (bcdc <micros+0x44>)
    bcb4:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bcb6:	ldr	r2, [pc, #40]	; (bce0 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    bcb8:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bcba:	ldr	r2, [r2, #0]
    bcbc:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    bcc0:	mov.w	r3, #1000	; 0x3e8
    bcc4:	muls	r0, r3
	return usec;
}
    bcc6:	cmp	r2, r3
    bcc8:	ite	ls
    bcca:	addls	r0, r0, r2
    bccc:	addhi	r0, r0, r3
    bcce:	pop	{r4, r5, r6, pc}
    bcd0:	.word	0x20021384
    bcd4:	.word	0x20021380
    bcd8:	.word	0x2002137c
    bcdc:	.word	0xe0001000
    bce0:	.word	0x20020cec

0000bce4 <delay>:
{
    bce4:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    bce6:	mov	r4, r0
    bce8:	cbz	r0, bd0c <delay+0x28>
	start = micros();
    bcea:	bl	bc98 <micros>
    bcee:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    bcf0:	bl	bc98 <micros>
    bcf4:	subs	r0, r0, r5
    bcf6:	cmp.w	r0, #1000	; 0x3e8
    bcfa:	bcs.n	bd02 <delay+0x1e>
		yield();
    bcfc:	bl	c960 <yield>
		while ((micros() - start) >= 1000) {
    bd00:	b.n	bcf0 <delay+0xc>
			if (--msec == 0) return;
    bd02:	subs	r4, #1
    bd04:	beq.n	bd0c <delay+0x28>
			start += 1000;
    bd06:	add.w	r5, r5, #1000	; 0x3e8
    bd0a:	b.n	bcf0 <delay+0xc>
}
    bd0c:	pop	{r3, r4, r5, pc}
	...

0000bd10 <unused_interrupt_vector>:
	__disable_irq();
    bd10:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    bd12:	mrs	r3, IPSR
	info->ipsr = ipsr;
    bd16:	ldr	r4, [pc, #316]	; (be54 <unused_interrupt_vector+0x144>)
    bd18:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    bd1c:	tst.w	lr, #4
    bd20:	ite	eq
    bd22:	mrseq	r2, MSP
    bd26:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    bd2a:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    bd2e:	ldr	r7, [pc, #296]	; (be58 <unused_interrupt_vector+0x148>)
	while (p < end) {
    bd30:	ldr	r6, [pc, #296]	; (be5c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    bd32:	ldr.w	r1, [r3, #3368]	; 0xd28
    bd36:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    bd3a:	ldr.w	r1, [r3, #3372]	; 0xd2c
    bd3e:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    bd42:	ldr.w	r1, [r3, #3380]	; 0xd34
    bd46:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    bd4a:	ldr.w	r3, [r3, #3384]	; 0xd38
    bd4e:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    bd52:	ldr	r3, [r2, #24]
    bd54:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    bd58:	ldr	r3, [r2, #28]
    bd5a:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    bd5e:	bl	c3d4 <tempmonGetTemp>
    bd62:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    bd66:	bl	bee0 <rtc_get>
	info->len = sizeof(*info) / 4;
    bd6a:	movs	r3, #11
	p = (uint32_t *)info;
    bd6c:	ldr	r2, [pc, #240]	; (be60 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    bd6e:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    bd72:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    bd76:	mov	r0, r2
	crc = 0xFFFFFFFF;
    bd78:	mov.w	r3, #4294967295
		crc ^= *p++;
    bd7c:	ldr	r1, [r2, #0]
    bd7e:	movs	r5, #32
    bd80:	adds	r2, #4
    bd82:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    bd84:	and.w	r1, r3, #1
    bd88:	subs	r5, #1
    bd8a:	mul.w	r1, r7, r1
    bd8e:	eor.w	r3, r1, r3, lsr #1
    bd92:	bne.n	bd84 <unused_interrupt_vector+0x74>
	while (p < end) {
    bd94:	cmp	r2, r6
    bd96:	bne.n	bd7c <unused_interrupt_vector+0x6c>
	info->crc = crc;
    bd98:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    bd9c:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    bda0:	mov.w	r3, #3758153728	; 0xe000e000
    bda4:	ldr	r2, [pc, #188]	; (be64 <unused_interrupt_vector+0x154>)
    bda6:	str.w	r0, [r3, #3952]	; 0xf70
    bdaa:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    bdae:	dsb	sy
	asm("isb");
    bdb2:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bdb6:	ldr	r2, [pc, #176]	; (be68 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    bdb8:	ldr	r4, [pc, #176]	; (be6c <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bdba:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    bdbc:	ldr	r0, [pc, #176]	; (be70 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bdbe:	orr.w	r3, r3, #12288	; 0x3000
    bdc2:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    bdc4:	movs	r3, #2
    bdc6:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    bdc8:	ldr	r3, [r2, #28]
    bdca:	bic.w	r3, r3, #127	; 0x7f
    bdce:	orr.w	r3, r3, #64	; 0x40
    bdd2:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    bdd4:	ldr	r3, [pc, #156]	; (be74 <unused_interrupt_vector+0x164>)
    bdd6:	ldr	r3, [r3, #0]
    bdd8:	cmp	r3, r0
    bdda:	bls.n	bde0 <unused_interrupt_vector+0xd0>
    bddc:	bl	af9c <set_arm_clock>
	PIT_MCR = 0;
    bde0:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bde2:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    bde4:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    bde8:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    bdea:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    bdee:	ldr	r3, [pc, #136]	; (be78 <unused_interrupt_vector+0x168>)
    bdf0:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    bdf4:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bdf8:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    bdfc:	ldr	r4, [pc, #108]	; (be6c <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    bdfe:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    be02:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    be06:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    be0a:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    be0e:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    be12:	ldr.w	r3, [r4, #268]	; 0x10c
    be16:	cbz	r3, be22 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    be18:	adds	r5, #1
			PIT_TFLG0 = 1;
    be1a:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    be1e:	cmp	r5, #79	; 0x4f
    be20:	bhi.n	be28 <unused_interrupt_vector+0x118>
		usb_isr();
    be22:	bl	b44c <usb_isr>
		if (PIT_TFLG0) {
    be26:	b.n	be12 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    be28:	ldr	r3, [pc, #80]	; (be7c <unused_interrupt_vector+0x16c>)
    be2a:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    be2c:	ldr	r1, [pc, #80]	; (be80 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    be2e:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    be32:	mov.w	r2, #2147483648	; 0x80000000
    be36:	ldr	r3, [pc, #76]	; (be84 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    be38:	ldr	r0, [pc, #76]	; (be88 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    be3a:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    be3c:	ldr	r2, [pc, #44]	; (be6c <unused_interrupt_vector+0x15c>)
    be3e:	ldr.w	r3, [r2, #268]	; 0x10c
    be42:	cbz	r3, be50 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    be44:	mov.w	r3, #3758153728	; 0xe000e000
    be48:	ldr	r2, [pc, #64]	; (be8c <unused_interrupt_vector+0x17c>)
    be4a:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    be4e:	b.n	be4e <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    be50:	str	r0, [r1, #48]	; 0x30
    be52:	b.n	be3e <unused_interrupt_vector+0x12e>
    be54:	.word	0x2027ff00
    be58:	.word	0xedb88320
    be5c:	.word	0x2027ffa8
    be60:	.word	0x2027ff80
    be64:	.word	0x2027ffa0
    be68:	.word	0x400fc000
    be6c:	.word	0x40084000
    be70:	.word	0x0bcd3d80
    be74:	.word	0x20001db4
    be78:	.word	0x00249f00
    be7c:	.word	0x402e0000
    be80:	.word	0x400f8000
    be84:	.word	0x400d9000
    be88:	.word	0x0bad00f1
    be8c:	.word	0x05fa0004

0000be90 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    be90:	ldr	r2, [pc, #32]	; (beb4 <_sbrk+0x24>)
{
    be92:	push	{r3, lr}
    be94:	mov	r3, r0
        char *prev = __brkval;
    be96:	ldr	r0, [r2, #0]
        if (incr != 0) {
    be98:	cbz	r3, beae <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    be9a:	add	r3, r0
    be9c:	ldr	r1, [pc, #24]	; (beb8 <_sbrk+0x28>)
    be9e:	cmp	r3, r1
    bea0:	bls.n	beb0 <_sbrk+0x20>
                        errno = ENOMEM;
    bea2:	bl	f204 <__errno>
    bea6:	movs	r3, #12
    bea8:	str	r3, [r0, #0]
                        return (void *)-1;
    beaa:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    beae:	pop	{r3, pc}
                __brkval = prev + incr;
    beb0:	str	r3, [r2, #0]
    beb2:	b.n	beae <_sbrk+0x1e>
    beb4:	.word	0x2000218c
    beb8:	.word	0x20280000

0000bebc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    bebc:	movs	r0, #0
    bebe:	bx	lr

0000bec0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    bec0:	mov.w	r0, #4294967295
    bec4:	bx	lr

0000bec6 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    bec6:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    beca:	movs	r0, #0
	st->st_mode = S_IFCHR;
    becc:	str	r3, [r1, #4]
}
    bece:	bx	lr

0000bed0 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    bed0:	movs	r0, #1
    bed2:	bx	lr

0000bed4 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    bed4:	mov.w	r0, #4294967295
    bed8:	bx	lr

0000beda <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    beda:	wfi
    bedc:	b.n	beda <abort>
	...

0000bee0 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    bee0:	ldr	r2, [pc, #28]	; (bf00 <rtc_get+0x20>)
    bee2:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    bee4:	ldr	r3, [r2, #40]	; 0x28
{
    bee6:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    bee8:	mov	r4, r3
    beea:	mov	r1, r0
    beec:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    beee:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    bef0:	cmp	r4, r3
    bef2:	bne.n	bee8 <rtc_get+0x8>
    bef4:	cmp	r1, r0
    bef6:	bne.n	bee8 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    bef8:	lsrs	r3, r3, #15
}
    befa:	orr.w	r0, r3, r0, lsl #17
    befe:	pop	{r4, pc}
    bf00:	.word	0x400d4000

0000bf04 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    bf04:	ldr	r3, [pc, #60]	; (bf44 <rtc_set+0x40>)
    bf06:	ldr	r2, [r3, #8]
    bf08:	bic.w	r2, r2, #65537	; 0x10001
    bf0c:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    bf0e:	ldr	r2, [r3, #8]
    bf10:	lsls	r2, r2, #31
    bf12:	bmi.n	bf0e <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    bf14:	ldr	r2, [r3, #56]	; 0x38
    bf16:	bic.w	r2, r2, #1
    bf1a:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    bf1c:	ldr	r3, [pc, #36]	; (bf44 <rtc_set+0x40>)
    bf1e:	ldr	r2, [r3, #56]	; 0x38
    bf20:	lsls	r1, r2, #31
    bf22:	bmi.n	bf1e <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    bf24:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    bf26:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    bf28:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    bf2a:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    bf2c:	ldr	r2, [r3, #56]	; 0x38
    bf2e:	orr.w	r2, r2, #1
    bf32:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    bf34:	ldr	r2, [r3, #56]	; 0x38
    bf36:	lsls	r2, r2, #31
    bf38:	bpl.n	bf34 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    bf3a:	ldr	r2, [r3, #8]
    bf3c:	orr.w	r2, r2, #65537	; 0x10001
    bf40:	str	r2, [r3, #8]
}
    bf42:	bx	lr
    bf44:	.word	0x400d4000

0000bf48 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bf48:	ldr	r3, [pc, #68]	; (bf90 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    bf4a:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bf4c:	ldr	r2, [pc, #68]	; (bf94 <flash_wait+0x4c>)
{
    bf4e:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    bf50:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bf54:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bf56:	ldr	r5, [pc, #64]	; (bf98 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    bf58:	ldr	r4, [pc, #64]	; (bf9c <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    bf5a:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    bf5e:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    bf62:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    bf66:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bf6a:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    bf6e:	ldr	r0, [r3, #20]
    bf70:	lsls	r0, r0, #31
    bf72:	bpl.n	bf6e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bf74:	str	r2, [r3, #20]
	} while (status & 1);
    bf76:	ldrb	r0, [r4, #0]
    bf78:	lsls	r0, r0, #31
    bf7a:	bmi.n	bf5e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    bf7c:	ldr	r2, [r3, #0]
    bf7e:	orr.w	r2, r2, #1
    bf82:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    bf84:	ldr	r2, [pc, #8]	; (bf90 <flash_wait+0x48>)
    bf86:	ldr	r3, [r2, #0]
    bf88:	lsls	r3, r3, #31
    bf8a:	bmi.n	bf86 <flash_wait+0x3e>
	__enable_irq();
    bf8c:	cpsie	i
}
    bf8e:	pop	{r4, r5, pc}
    bf90:	.word	0x402a8000
    bf94:	.word	0x24010405
    bf98:	.word	0x000f0001
    bf9c:	.word	0x402a8100

0000bfa0 <eeprom_initialize>:
{
    bfa0:	push	{r4, r5, lr}
    bfa2:	ldr	r3, [pc, #52]	; (bfd8 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    bfa4:	movw	r5, #65535	; 0xffff
    bfa8:	ldr	r4, [pc, #48]	; (bfdc <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bfaa:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    bfae:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    bfb0:	ldrh	r0, [r1, #0]
    bfb2:	adds	r1, #2
    bfb4:	cmp	r0, r5
    bfb6:	beq.n	bfc0 <eeprom_initialize+0x20>
			index++;
    bfb8:	adds	r2, #1
		} while (p < end);
    bfba:	cmp	r1, r3
			index++;
    bfbc:	uxth	r2, r2
		} while (p < end);
    bfbe:	bcc.n	bfb0 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bfc0:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    bfc4:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    bfc8:	cmp.w	r3, #1619001344	; 0x60800000
    bfcc:	bne.n	bfaa <eeprom_initialize+0xa>
	initialized = 1;
    bfce:	ldr	r3, [pc, #16]	; (bfe0 <eeprom_initialize+0x40>)
    bfd0:	movs	r2, #1
    bfd2:	strb	r2, [r3, #0]
}
    bfd4:	pop	{r4, r5, pc}
    bfd6:	nop
    bfd8:	.word	0x607c1000
    bfdc:	.word	0x200213fc
    bfe0:	.word	0x200215ee

0000bfe4 <eeprom_read_byte>:
{
    bfe4:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    bfe6:	movw	r3, #4283	; 0x10bb
{
    bfea:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    bfec:	cmp	r0, r3
    bfee:	bhi.n	c03c <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    bff0:	ldr	r3, [pc, #76]	; (c040 <eeprom_read_byte+0x5c>)
    bff2:	ldrb	r3, [r3, #0]
    bff4:	cbnz	r3, bffa <eeprom_read_byte+0x16>
    bff6:	bl	bfa0 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    bffa:	lsrs	r2, r4, #2
    bffc:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bffe:	ldr	r0, [pc, #68]	; (c044 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c000:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    c004:	udiv	r3, r2, r3
    c008:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c00c:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    c010:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c012:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    c016:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    c01a:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c01c:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    c020:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c022:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    c024:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    c028:	cmp	r3, r2
    c02a:	bcc.n	c02e <eeprom_read_byte+0x4a>
}
    c02c:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    c02e:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    c032:	uxtb	r5, r1
    c034:	cmp	r5, r4
    c036:	it	eq
    c038:	lsreq	r0, r1, #8
    c03a:	b.n	c028 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    c03c:	movs	r0, #255	; 0xff
    c03e:	b.n	c02c <eeprom_read_byte+0x48>
    c040:	.word	0x200215ee
    c044:	.word	0x200213fc

0000c048 <eeprom_read_block>:
{
    c048:	push	{r4, r5, r6, lr}
    c04a:	mov	r4, r0
    c04c:	adds	r5, r1, r2
    c04e:	mov	r0, r1
	while (len--) {
    c050:	cmp	r0, r5
    c052:	bne.n	c056 <eeprom_read_block+0xe>
}
    c054:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    c056:	adds	r6, r0, #1
    c058:	bl	bfe4 <eeprom_read_byte>
    c05c:	strb.w	r0, [r4], #1
    c060:	mov	r0, r6
    c062:	b.n	c050 <eeprom_read_block+0x8>

0000c064 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    c064:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c068:	mov	r5, r1
    c06a:	mov	r4, r2
	__disable_irq();
    c06c:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c06e:	ldr	r3, [pc, #192]	; (c130 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c070:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c074:	ldr	r2, [pc, #188]	; (c134 <eepromemu_flash_write+0xd0>)
    c076:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    c078:	movs	r2, #2
    c07a:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    c07c:	movs	r2, #0
    c07e:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c082:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    c086:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    c088:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    c08c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    c090:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c094:	mov.w	r2, #983040	; 0xf0000
    c098:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c09c:	movs	r2, #1
    c09e:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c0a2:	bic.w	r2, r0, #31
	asm("dsb");
    c0a6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c0aa:	mov.w	r6, #3758153728	; 0xe000e000
    c0ae:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    c0b2:	adds	r2, #32
	} while (location < end_addr);
    c0b4:	cmp	r1, r2
    c0b6:	bhi.n	c0ae <eepromemu_flash_write+0x4a>
	asm("dsb");
    c0b8:	dsb	sy
	asm("isb");
    c0bc:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c0c0:	ldr	r2, [r3, #20]
    c0c2:	lsls	r6, r2, #31
    c0c4:	bpl.n	c0c0 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c0c6:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    c0c8:	ldr	r1, [pc, #108]	; (c138 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    c0ca:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    c0ce:	ldr	r7, [pc, #96]	; (c130 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c0d0:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    c0d2:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    c0d6:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c0da:	ldr.w	r8, [pc, #96]	; c13c <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    c0de:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c0e2:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    c0e4:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c0e8:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    c0ec:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c0f0:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c0f4:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    c0f8:	ldr	r3, [r7, #20]
    c0fa:	lsls	r2, r3, #31
    c0fc:	bpl.n	c10a <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    c0fe:	movs	r3, #65	; 0x41
    c100:	str	r3, [r7, #20]
	flash_wait();
}
    c102:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    c106:	b.w	bf48 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    c10a:	lsls	r1, r3, #25
    c10c:	bpl.n	c0f8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    c10e:	cmp	r4, #8
    c110:	bhi.n	c12a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    c112:	cbz	r4, c124 <eepromemu_flash_write+0xc0>
    c114:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c116:	mov	r1, r5
				len -= wrlen;
    c118:	subs	r4, r4, r6
				src += wrlen;
    c11a:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c11c:	mov	r2, r6
    c11e:	mov	r0, r8
    c120:	bl	a79c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    c124:	movs	r3, #64	; 0x40
    c126:	str	r3, [r7, #20]
    c128:	b.n	c0f8 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    c12a:	movs	r6, #8
    c12c:	b.n	c116 <eepromemu_flash_write+0xb2>
    c12e:	nop
    c130:	.word	0x402a8000
    c134:	.word	0x5af05af0
    c138:	.word	0x08180432
    c13c:	.word	0x402a8180

0000c140 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    c140:	push	{r4}
	__disable_irq();
    c142:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c144:	ldr	r3, [pc, #156]	; (c1e4 <eepromemu_flash_erase_sector+0xa4>)
    c146:	ldr	r2, [pc, #160]	; (c1e8 <eepromemu_flash_erase_sector+0xa8>)
    c148:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    c14a:	movs	r2, #2
    c14c:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c14e:	movw	r2, #1030	; 0x406
    c152:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    c156:	movs	r2, #0
    c158:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    c15c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    c160:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    c164:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c168:	mov.w	r2, #983040	; 0xf0000
    c16c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c170:	movs	r2, #1
    c172:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    c176:	bic.w	r2, r0, #4080	; 0xff0
    c17a:	bic.w	r2, r2, #15
	asm("dsb");
    c17e:	dsb	sy
    c182:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c186:	add.w	r1, r2, #4096	; 0x1000
    c18a:	cmp	r1, r4
    c18c:	ite	cc
    c18e:	movcc	r1, #1
    c190:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    c192:	mov.w	r4, #3758153728	; 0xe000e000
    c196:	add.w	r1, r2, r1, lsl #5
    c19a:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c19e:	adds	r2, #32
	} while (location < end_addr);
    c1a0:	cmp	r2, r1
    c1a2:	bne.n	c19a <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    c1a4:	dsb	sy
	asm("isb");
    c1a8:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c1ac:	ldr	r2, [r3, #20]
    c1ae:	lsls	r1, r2, #31
    c1b0:	bpl.n	c1ac <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c1b2:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    c1b4:	ldr	r2, [pc, #52]	; (c1ec <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c1b6:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    c1b8:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    c1bc:	ldr	r2, [pc, #48]	; (c1f0 <eepromemu_flash_erase_sector+0xb0>)
    c1be:	ands	r2, r0
    c1c0:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c1c4:	mov.w	r2, #983040	; 0xf0000
    c1c8:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c1cc:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c1d0:	ldr	r3, [pc, #16]	; (c1e4 <eepromemu_flash_erase_sector+0xa4>)
    c1d2:	ldr	r2, [r3, #20]
    c1d4:	lsls	r2, r2, #31
    c1d6:	bpl.n	c1d2 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c1d8:	movs	r2, #1
	flash_wait();
}
    c1da:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c1de:	str	r2, [r3, #20]
	flash_wait();
    c1e0:	b.w	bf48 <flash_wait>
    c1e4:	.word	0x402a8000
    c1e8:	.word	0x5af05af0
    c1ec:	.word	0x08180420
    c1f0:	.word	0x00fff000

0000c1f4 <eeprom_write_byte>:
	if (addr > E2END) return;
    c1f4:	movw	r3, #4283	; 0x10bb
    c1f8:	cmp	r0, r3
{
    c1fa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c1fe:	mov	r4, r0
    c200:	sub	sp, #264	; 0x108
    c202:	mov	r9, r1
	if (addr > E2END) return;
    c204:	bhi.n	c266 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    c206:	ldr	r3, [pc, #232]	; (c2f0 <eeprom_write_byte+0xfc>)
    c208:	ldrb	r3, [r3, #0]
    c20a:	cbnz	r3, c210 <eeprom_write_byte+0x1c>
    c20c:	bl	bfa0 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    c210:	lsrs	r6, r4, #2
    c212:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    c214:	ldr	r7, [pc, #220]	; (c2f4 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c216:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    c21a:	udiv	r3, r6, r3
    c21e:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c222:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    c226:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    c228:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c22a:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    c22e:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c232:	add.w	r5, r5, #1984	; 0x7c0
    c236:	lsls	r5, r5, #12
    c238:	mov	r8, r5
	end = p + sector_index[sector];
    c23a:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c23e:	mov	r3, r5
	while (p < end) {
    c240:	cmp	r3, r0
    c242:	bcc.n	c26c <eeprom_write_byte+0x78>
	if (data == olddata) return;
    c244:	cmp	r2, r9
    c246:	beq.n	c266 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    c248:	cmp.w	sl, #2048	; 0x800
    c24c:	bcs.n	c27c <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    c24e:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    c252:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    c256:	movs	r2, #2
    c258:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    c25a:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    c25e:	bl	c064 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    c262:	strh.w	sl, [r7, r6, lsl #1]
}
    c266:	add	sp, #264	; 0x108
    c268:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    c26c:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    c270:	uxtb.w	ip, r1
    c274:	cmp	ip, r4
    c276:	it	eq
    c278:	lsreq	r2, r1, #8
    c27a:	b.n	c240 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    c27c:	mov.w	r2, #256	; 0x100
    c280:	movs	r1, #255	; 0xff
    c282:	add	r0, sp, #8
    c284:	bl	a758 <memset>
		while (p < end) {
    c288:	cmn.w	r5, #4096	; 0x1000
    c28c:	movw	r3, #2049	; 0x801
    c290:	it	cs
    c292:	movcs	r3, #1
    c294:	add.w	r3, r5, r3, lsl #1
    c298:	mov	r1, r5
    c29a:	adds	r5, #2
    c29c:	cmp	r5, r3
    c29e:	bne.n	c2e2 <eeprom_write_byte+0xee>
		buf[offset] = data;
    c2a0:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    c2a2:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    c2a4:	mov	r0, r8
		buf[offset] = data;
    c2a6:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    c2aa:	add	r4, sp, #8
		index = 0;
    c2ac:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    c2ae:	bl	c140 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    c2b2:	ldrb.w	r3, [r4], #1
    c2b6:	cmp	r3, #255	; 0xff
    c2b8:	beq.n	c2d4 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    c2ba:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    c2be:	movs	r2, #2
    c2c0:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    c2c4:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    c2c8:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    c2cc:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    c2d0:	bl	c064 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    c2d4:	adds	r5, #1
    c2d6:	cmp.w	r5, #256	; 0x100
    c2da:	bne.n	c2b2 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    c2dc:	strh.w	r9, [r7, r6, lsl #1]
    c2e0:	b.n	c266 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    c2e2:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    c2e4:	add	r0, sp, #8
    c2e6:	ldrb	r1, [r1, #0]
    c2e8:	lsrs	r2, r2, #8
    c2ea:	strb	r2, [r0, r1]
    c2ec:	b.n	c298 <eeprom_write_byte+0xa4>
    c2ee:	nop
    c2f0:	.word	0x200215ee
    c2f4:	.word	0x200213fc

0000c2f8 <eeprom_write_block>:
{
    c2f8:	push	{r4, r5, r6, lr}
    c2fa:	mov	r4, r0
    c2fc:	mov	r0, r1
	while (len--) {
    c2fe:	adds	r5, r4, r2
    c300:	cmp	r4, r5
    c302:	bne.n	c306 <eeprom_write_block+0xe>
}
    c304:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    c306:	adds	r6, r0, #1
    c308:	ldrb.w	r1, [r4], #1
    c30c:	bl	c1f4 <eeprom_write_byte>
    c310:	mov	r0, r6
    c312:	b.n	c300 <eeprom_write_block+0x8>

0000c314 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    c314:	ldr	r3, [r0, #0]
    c316:	cbz	r3, c32e <smalloc_verify_pool+0x1a>
    c318:	ldr	r0, [r0, #4]
    c31a:	cbz	r0, c330 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    c31c:	movs	r3, #12
    c31e:	udiv	r2, r0, r3
    c322:	mls	r0, r3, r2, r0
    c326:	clz	r0, r0
    c32a:	lsrs	r0, r0, #5
    c32c:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    c32e:	mov	r0, r3
	return 1;
}
    c330:	bx	lr

0000c332 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    c332:	push	{r4, lr}
    c334:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    c336:	bl	c314 <smalloc_verify_pool>
    c33a:	mov	r4, r0
    c33c:	cbz	r0, c344 <sm_align_pool+0x12>
    c33e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    c340:	mov	r0, r4
    c342:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    c344:	ldr	r3, [r1, #4]
    c346:	movs	r0, #12
    c348:	udiv	r2, r3, r0
    c34c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    c350:	cbz	r2, c356 <sm_align_pool+0x24>
    c352:	subs	r3, r3, r2
    c354:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    c356:	ldr	r3, [r1, #4]
    c358:	cmp	r3, #240	; 0xf0
    c35a:	bhi.n	c33e <sm_align_pool+0xc>
		errno = ENOSPC;
    c35c:	bl	f204 <__errno>
    c360:	movs	r3, #28
    c362:	str	r3, [r0, #0]
		return 0;
    c364:	b.n	c340 <sm_align_pool+0xe>

0000c366 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    c366:	push	{r4, r5, r6, lr}
    c368:	mov	r6, r3
	if (!spool) {
    c36a:	mov	r4, r0
    c36c:	cbnz	r0, c37c <sm_set_pool+0x16>
		errno = EINVAL;
    c36e:	bl	f204 <__errno>
		return 0;
    c372:	mov	r5, r4
		errno = EINVAL;
    c374:	movs	r3, #22
    c376:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    c378:	mov	r0, r5
    c37a:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    c37c:	cbz	r1, c380 <sm_set_pool+0x1a>
    c37e:	cbnz	r2, c3b0 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    c380:	mov	r0, r4
    c382:	bl	c314 <smalloc_verify_pool>
    c386:	mov	r5, r0
    c388:	cbz	r0, c3a6 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    c38a:	ldr	r3, [r4, #8]
    c38c:	cbz	r3, c398 <sm_set_pool+0x32>
    c38e:	ldr	r2, [r4, #4]
    c390:	movs	r1, #0
    c392:	ldr	r0, [r4, #0]
    c394:	bl	a758 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    c398:	movs	r2, #16
    c39a:	movs	r1, #0
    c39c:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    c39e:	bl	a758 <memset>
	return 1;
    c3a2:	movs	r5, #1
    c3a4:	b.n	c378 <sm_set_pool+0x12>
		errno = EINVAL;
    c3a6:	bl	f204 <__errno>
    c3aa:	movs	r3, #22
    c3ac:	str	r3, [r0, #0]
		return 0;
    c3ae:	b.n	c378 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    c3b0:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    c3b2:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    c3b6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    c3b8:	bl	c332 <sm_align_pool>
    c3bc:	mov	r5, r0
    c3be:	cmp	r0, #0
    c3c0:	beq.n	c378 <sm_set_pool+0x12>
	if (do_zero) {
    c3c2:	cmp	r6, #0
    c3c4:	beq.n	c3a2 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    c3c6:	ldr	r2, [r4, #4]
    c3c8:	movs	r1, #0
    c3ca:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    c3cc:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    c3ce:	b.n	c39e <sm_set_pool+0x38>

0000c3d0 <Panic_Temp_isr>:
  unused_interrupt_vector();
    c3d0:	b.w	bd10 <unused_interrupt_vector>

0000c3d4 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    c3d4:	ldr	r3, [pc, #72]	; (c420 <tempmonGetTemp+0x4c>)
    c3d6:	ldr.w	r2, [r3, #128]	; 0x80
    c3da:	lsls	r2, r2, #29
    c3dc:	bpl.n	c3d6 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3de:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3e2:	ldr	r2, [pc, #64]	; (c424 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3e4:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3e8:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c3ec:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c3f0:	ldr	r3, [pc, #52]	; (c428 <tempmonGetTemp+0x54>)
    c3f2:	vcvt.f32.u32	s0, s0
    c3f6:	vldr	s14, [r3]
    c3fa:	vcvt.f32.s32	s15, s15
    c3fe:	ldr	r3, [pc, #44]	; (c42c <tempmonGetTemp+0x58>)
    c400:	vcvt.f32.u32	s14, s14
    c404:	vsub.f32	s15, s15, s14
    c408:	vldr	s14, [r3]
    c40c:	ldr	r3, [pc, #32]	; (c430 <tempmonGetTemp+0x5c>)
    c40e:	vmul.f32	s15, s15, s14
    c412:	vldr	s13, [r3]
    c416:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    c41a:	vsub.f32	s0, s0, s14
    c41e:	bx	lr
    c420:	.word	0x400d8100
    c424:	.word	0x20020ce0
    c428:	.word	0x20020cdc
    c42c:	.word	0x20020ce4
    c430:	.word	0x20020ce8

0000c434 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    c434:	cmp	r0, #54	; 0x36
{
    c436:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c438:	bhi.n	c452 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    c43a:	lsls	r2, r0, #4
    c43c:	ldr	r3, [pc, #40]	; (c468 <digitalWrite+0x34>)
    c43e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    c442:	ldr	r3, [r3, r2]
	mask = p->mask;
    c444:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    c446:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    c448:	tst	r4, r2
    c44a:	beq.n	c45a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    c44c:	cbz	r1, c454 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    c44e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    c452:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    c454:	str.w	r2, [r3, #136]	; 0x88
    c458:	b.n	c452 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c45a:	ldr	r3, [r0, #8]
		if (val) {
    c45c:	cbz	r1, c464 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c45e:	ldr	r2, [pc, #12]	; (c46c <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c460:	str	r2, [r3, #0]
    c462:	b.n	c452 <digitalWrite+0x1e>
    c464:	ldr	r2, [pc, #8]	; (c470 <digitalWrite+0x3c>)
    c466:	b.n	c460 <digitalWrite+0x2c>
    c468:	.word	0x20000614
    c46c:	.word	0x0001f038
    c470:	.word	0x00013038

0000c474 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    c474:	cmp	r0, #54	; 0x36
{
    c476:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c478:	bhi.n	c4aa <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    c47a:	ldr	r3, [pc, #76]	; (c4c8 <pinMode+0x54>)
    c47c:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c47e:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c480:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    c482:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c486:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c488:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c48c:	beq.n	c492 <pinMode+0x1e>
    c48e:	cmp	r1, #4
    c490:	bne.n	c4ac <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c492:	orrs	r4, r5
		if (mode == OUTPUT) {
    c494:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c496:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    c498:	bne.n	c49e <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c49a:	movs	r2, #56	; 0x38
    c49c:	b.n	c4a2 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    c49e:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c4a2:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    c4a4:	movs	r2, #21
    c4a6:	ldr	r3, [r0, #4]
    c4a8:	str	r2, [r3, #0]
}
    c4aa:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c4ac:	bic.w	r4, r4, r5
    c4b0:	str	r4, [r2, #4]
		if (mode == INPUT) {
    c4b2:	cmp	r1, #0
    c4b4:	beq.n	c49a <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    c4b6:	cmp	r1, #2
    c4b8:	bne.n	c4be <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c4ba:	ldr	r2, [pc, #16]	; (c4cc <pinMode+0x58>)
    c4bc:	b.n	c4a2 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    c4be:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c4c0:	ite	eq
    c4c2:	ldreq	r2, [pc, #12]	; (c4d0 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c4c4:	ldrne	r2, [pc, #12]	; (c4d4 <pinMode+0x60>)
    c4c6:	b.n	c4a2 <pinMode+0x2e>
    c4c8:	.word	0x20000614
    c4cc:	.word	0x0001f038
    c4d0:	.word	0x00013038
    c4d4:	.word	0x00010038

0000c4d8 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c4d8:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c4dc:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c4de:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    c4e2:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c4e4:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    c4e6:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    c4ea:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c4ee:	ldrh.w	r3, [r0, #392]	; 0x188
    c4f2:	uxth	r3, r3
{
    c4f4:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c4f6:	orr.w	r3, r3, #240	; 0xf0
    c4fa:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c4fc:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c500:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c504:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c508:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c50c:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    c510:	adds	r2, #1
    c512:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c514:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c516:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    c518:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c51a:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c51c:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    c51e:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c520:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    c522:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    c524:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    c526:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    c528:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    c52a:	bne.n	c50c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c52c:	ldrh.w	r3, [r0, #392]	; 0x188
    c530:	uxth	r3, r3
    c532:	orr.w	r3, r3, #15
    c536:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c53a:	ldrh.w	r3, [r0, #392]	; 0x188
    c53e:	uxth	r3, r3
    c540:	orr.w	r3, r3, #3840	; 0xf00
    c544:	strh.w	r3, [r0, #392]	; 0x188
}
    c548:	pop	{r4, r5, r6, r7, pc}

0000c54a <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c54a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c54c:	mov.w	ip, #15
{
    c550:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    c552:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c554:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c558:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c55c:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c560:	add.w	r3, r0, r2, lsl #5
    c564:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    c566:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c568:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c56a:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c56c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c56e:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c572:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c574:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c576:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    c578:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c57a:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c57c:	bne.n	c560 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    c57e:	pop	{r4, r5, r6, r7, pc}

0000c580 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c580:	ldr	r2, [pc, #84]	; (c5d8 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c582:	ldr	r0, [pc, #88]	; (c5dc <pwm_init+0x5c>)
{
    c584:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c586:	ldr	r3, [r2, #120]	; 0x78
    c588:	orr.w	r3, r3, #16711680	; 0xff0000
    c58c:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c58e:	ldr.w	r3, [r2, #128]	; 0x80
    c592:	orr.w	r3, r3, #4227858432	; 0xfc000000
    c596:	orr.w	r3, r3, #196608	; 0x30000
    c59a:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c59e:	bl	c4d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c5a2:	add.w	r0, r0, #16384	; 0x4000
    c5a6:	bl	c4d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c5aa:	add.w	r0, r0, #16384	; 0x4000
    c5ae:	bl	c4d8 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c5b2:	add.w	r0, r0, #16384	; 0x4000
    c5b6:	bl	c4d8 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c5ba:	sub.w	r0, r0, #2146304	; 0x20c000
    c5be:	bl	c54a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c5c2:	add.w	r0, r0, #16384	; 0x4000
    c5c6:	bl	c54a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c5ca:	add.w	r0, r0, #16384	; 0x4000
}
    c5ce:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c5d2:	b.w	c54a <quadtimer_init>
    c5d6:	nop
    c5d8:	.word	0x400fc000
    c5dc:	.word	0x403dc000

0000c5e0 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c5e0:	ldr	r2, [pc, #8]	; (c5ec <txEvent_event+0xc>)
    c5e2:	ldr	r3, [r2, #0]
    c5e4:	adds	r3, #1
    c5e6:	str	r3, [r2, #0]
    c5e8:	bx	lr
    c5ea:	nop
    c5ec:	.word	0x20020c30

0000c5f0 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c5f0:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c5f2:	ldr	r4, [pc, #40]	; (c61c <rx_event+0x2c>)
	int i = t->callback_param;
    c5f4:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c5f6:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c5f8:	ldr	r2, [pc, #36]	; (c620 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c5fa:	adds	r3, #1
    c5fc:	cmp	r3, #5
    c5fe:	it	cs
    c600:	movcs	r3, #0
	rx_list[head] = i;
    c602:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c604:	ldr	r1, [r0, #4]
    c606:	ldr	r2, [pc, #28]	; (c624 <rx_event+0x34>)
    c608:	ubfx	r1, r1, #16, #15
    c60c:	ldrh	r2, [r2, #0]
    c60e:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c610:	ldr	r1, [pc, #20]	; (c628 <rx_event+0x38>)
    c612:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c616:	uxtb	r3, r3
    c618:	strb	r3, [r4, #0]
}
    c61a:	pop	{r4, pc}
    c61c:	.word	0x200215f8
    c620:	.word	0x20021602
    c624:	.word	0x200213fa
    c628:	.word	0x20020cc8

0000c62c <rx_queue_transfer>:
{
    c62c:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c62e:	ldr	r1, [pc, #80]	; (c680 <rx_queue_transfer+0x54>)
{
    c630:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c632:	ldr	r7, [pc, #80]	; (c684 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c634:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c638:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c63a:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c63c:	add	r0, r1
	asm("dsb");
    c63e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c642:	mov.w	r4, #3758153728	; 0xe000e000
    c646:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c64a:	adds	r2, #32
	} while (location < end_addr);
    c64c:	cmp	r0, r2
    c64e:	bhi.n	c646 <rx_queue_transfer+0x1a>
	asm("dsb");
    c650:	dsb	sy
	asm("isb");
    c654:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c658:	ldr	r5, [pc, #44]	; (c688 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c65a:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c65e:	ldrh	r2, [r7, #0]
    c660:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c664:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c668:	mov	r0, r5
    c66a:	bl	b974 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c66e:	mov	r1, r5
    c670:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c672:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c676:	bl	b9c4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c67a:	str.w	r6, [r4, #268]	; 0x10c
}
    c67e:	pop	{r3, r4, r5, r6, r7, pc}
    c680:	.word	0x20200800
    c684:	.word	0x200213fa
    c688:	.word	0x20005c40

0000c68c <usb_mtp_configure>:
	if (usb_high_speed) {
    c68c:	ldr	r3, [pc, #120]	; (c708 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c68e:	movs	r2, #128	; 0x80
    c690:	movs	r1, #0
    c692:	ldr	r0, [pc, #120]	; (c70c <usb_mtp_configure+0x80>)
{
    c694:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c696:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c698:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c69a:	ldr	r6, [pc, #116]	; (c710 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c69c:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c69e:	ldr	r3, [pc, #116]	; (c714 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c6a0:	ite	eq
    c6a2:	moveq	r5, #64	; 0x40
    c6a4:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    c6a8:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c6aa:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c6ac:	bl	a758 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c6b0:	movs	r2, #128	; 0x80
    c6b2:	movs	r1, #0
    c6b4:	ldr	r0, [pc, #96]	; (c718 <usb_mtp_configure+0x8c>)
    c6b6:	bl	a758 <memset>
	tx_head = 0;
    c6ba:	ldr	r3, [pc, #96]	; (c71c <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c6bc:	mov	r2, r4
    c6be:	mov	r1, r5
	tx_head = 0;
    c6c0:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c6c2:	movs	r0, #4
	rx_head = 0;
    c6c4:	ldr	r3, [pc, #88]	; (c720 <usb_mtp_configure+0x94>)
    c6c6:	strb	r4, [r3, #0]
	rx_tail = 0;
    c6c8:	ldr	r3, [pc, #88]	; (c724 <usb_mtp_configure+0x98>)
    c6ca:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c6cc:	mov	r3, r4
    c6ce:	bl	b934 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c6d2:	mov	r2, r4
    c6d4:	ldrh	r1, [r6, #0]
    c6d6:	movs	r0, #4
    c6d8:	ldr	r3, [pc, #76]	; (c728 <usb_mtp_configure+0x9c>)
    c6da:	bl	b8f4 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c6de:	mov	r2, r4
    c6e0:	ldr	r3, [pc, #72]	; (c72c <usb_mtp_configure+0xa0>)
    c6e2:	movs	r1, #32
    c6e4:	movs	r0, #5
    c6e6:	bl	b934 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c6ea:	mov	r0, r4
    c6ec:	bl	c62c <rx_queue_transfer>
    c6f0:	movs	r0, #1
    c6f2:	bl	c62c <rx_queue_transfer>
    c6f6:	movs	r0, #2
    c6f8:	bl	c62c <rx_queue_transfer>
    c6fc:	movs	r0, #3
}
    c6fe:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c702:	b.w	c62c <rx_queue_transfer>
    c706:	nop
    c708:	.word	0x20021610
    c70c:	.word	0x20005d40
    c710:	.word	0x200213fa
    c714:	.word	0x20021480
    c718:	.word	0x20005c40
    c71c:	.word	0x2002160c
    c720:	.word	0x200215f8
    c724:	.word	0x20021608
    c728:	.word	0x0000c5f1
    c72c:	.word	0x0000c5e1

0000c730 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c730:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c734:	ldr	r7, [pc, #112]	; (c7a8 <usb_mtp_recv+0x78>)
{
    c736:	mov	r5, r1
	uint32_t tail = rx_tail;
    c738:	ldr	r6, [pc, #112]	; (c7ac <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    c73a:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    c73e:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c740:	ldr.w	r9, [pc, #120]	; c7bc <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c744:	uxtb	r4, r3
		if (tail != rx_head) break;
    c746:	ldr.w	sl, [pc, #120]	; c7c0 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c74a:	ldrb.w	r3, [r9]
    c74e:	cbz	r3, c79c <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    c750:	ldrb.w	r3, [sl]
    c754:	cmp	r4, r3
    c756:	bne.n	c76c <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c758:	ldr	r3, [r7, #0]
    c75a:	str	r0, [sp, #4]
    c75c:	sub.w	r3, r3, r8
    c760:	cmp	r3, r5
    c762:	bcs.n	c7a2 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    c764:	bl	c960 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c768:	ldr	r0, [sp, #4]
    c76a:	b.n	c74a <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    c76c:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c76e:	ldr	r2, [pc, #64]	; (c7b0 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c770:	ldr	r1, [pc, #64]	; (c7b4 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    c772:	cmp	r3, #5
    c774:	it	cs
    c776:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c778:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c77a:	ldr	r2, [pc, #60]	; (c7b8 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    c77c:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    c780:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c784:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c786:	mov	r2, r4
	rx_tail = tail;
    c788:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c78a:	bl	a79c <memcpy>
	rx_queue_transfer(i);
    c78e:	mov	r0, r5
    c790:	bl	c62c <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c794:	mov	r0, r4
    c796:	add	sp, #8
    c798:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c79c:	mov.w	r4, #4294967295
    c7a0:	b.n	c794 <usb_mtp_recv+0x64>
			return 0;
    c7a2:	movs	r4, #0
    c7a4:	b.n	c794 <usb_mtp_recv+0x64>
    c7a6:	nop
    c7a8:	.word	0x20021380
    c7ac:	.word	0x20021608
    c7b0:	.word	0x20021602
    c7b4:	.word	0x20200800
    c7b8:	.word	0x20020cc8
    c7bc:	.word	0x2002160f
    c7c0:	.word	0x200215f8

0000c7c4 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c7c4:	ldr	r3, [pc, #28]	; (c7e4 <usb_mtp_available+0x20>)
    c7c6:	ldrb	r3, [r3, #0]
    c7c8:	and.w	r0, r3, #255	; 0xff
    c7cc:	cbz	r3, c7e2 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c7ce:	ldr	r3, [pc, #24]	; (c7e8 <usb_mtp_available+0x24>)
    c7d0:	ldrb	r2, [r3, #0]
    c7d2:	ldr	r3, [pc, #24]	; (c7ec <usb_mtp_available+0x28>)
    c7d4:	ldrb	r3, [r3, #0]
    c7d6:	cmp	r2, r3
    c7d8:	beq.n	c7e0 <usb_mtp_available+0x1c>
    c7da:	ldr	r3, [pc, #20]	; (c7f0 <usb_mtp_available+0x2c>)
    c7dc:	ldrh	r0, [r3, #0]
    c7de:	bx	lr
	if (!usb_configuration) return 0;
    c7e0:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c7e2:	bx	lr
    c7e4:	.word	0x2002160f
    c7e8:	.word	0x200215f8
    c7ec:	.word	0x20021608
    c7f0:	.word	0x200213fa

0000c7f4 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c7f4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c7f8:	ldr	r6, [pc, #164]	; (c8a0 <usb_mtp_send+0xac>)
{
    c7fa:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c7fc:	ldr	r7, [pc, #164]	; (c8a4 <usb_mtp_send+0xb0>)
{
    c7fe:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c800:	ldrb	r3, [r6, #0]
{
    c802:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c804:	ldr.w	r9, [pc, #168]	; c8b0 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c808:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c80c:	ldr.w	fp, [pc, #164]	; c8b4 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c810:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c814:	ldrb.w	r3, [fp]
    c818:	cmp	r3, #0
    c81a:	beq.n	c894 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c81c:	mov	r0, r7
    c81e:	bl	b9e0 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c822:	lsls	r3, r0, #24
    c824:	bpl.n	c838 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c826:	ldr.w	r3, [r9]
    c82a:	sub.w	r3, r3, sl
    c82e:	cmp	r3, r5
    c830:	bhi.n	c89a <usb_mtp_send+0xa6>
		yield();
    c832:	bl	c960 <yield>
	while (1) {
    c836:	b.n	c814 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c838:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c83a:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c83c:	ldr	r5, [pc, #104]	; (c8a8 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c83e:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c840:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c844:	mov	r0, r5
    c846:	bl	a79c <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c84a:	ldr	r2, [pc, #96]	; (c8ac <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c84c:	mov	r3, r5
    c84e:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c850:	add	r2, r5
	asm("dsb");
    c852:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c856:	mov.w	r1, #3758153728	; 0xe000e000
    c85a:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c85e:	adds	r3, #32
	} while (location < end_addr);
    c860:	cmp	r2, r3
    c862:	bhi.n	c85a <usb_mtp_send+0x66>
	asm("dsb");
    c864:	dsb	sy
	asm("isb");
    c868:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c86c:	movs	r3, #0
    c86e:	mov	r2, r4
    c870:	mov	r1, r5
    c872:	mov	r0, r7
    c874:	bl	b974 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c878:	movs	r0, #4
    c87a:	mov	r1, r7
    c87c:	bl	b9a0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c880:	ldrb	r3, [r6, #0]
	return len;
    c882:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c884:	adds	r3, #1
    c886:	uxtb	r3, r3
    c888:	cmp	r3, #3
    c88a:	it	hi
    c88c:	movhi	r3, #0
    c88e:	strb	r3, [r6, #0]
}
    c890:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c894:	mov.w	r0, #4294967295
    c898:	b.n	c890 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c89a:	movs	r0, #0
    c89c:	b.n	c890 <usb_mtp_send+0x9c>
    c89e:	nop
    c8a0:	.word	0x2002160c
    c8a4:	.word	0x20005d40
    c8a8:	.word	0x20201000
    c8ac:	.word	0x20021480
    c8b0:	.word	0x20021380
    c8b4:	.word	0x2002160f

0000c8b8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c8b8:	ldr	r3, [pc, #68]	; (c900 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c8ba:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c8bc:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c8c0:	ldr	r3, [pc, #64]	; (c904 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c8c2:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c8c6:	cmp	r0, r3
{
    c8c8:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c8ca:	it	cc
    c8cc:	movcc	r3, #10
{
    c8ce:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c8d0:	it	cc
    c8d2:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c8d4:	add	r1, sp, #4
    c8d6:	bl	ba08 <ultoa>
	for (i=0; i<10; i++) {
    c8da:	ldr	r0, [pc, #44]	; (c908 <usb_init_serialnumber+0x50>)
    c8dc:	add	r2, sp, #4
    c8de:	movs	r1, #0
    c8e0:	mov	r5, r0
		char c = buf[i];
    c8e2:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c8e6:	mov	r3, r1
	for (i=0; i<10; i++) {
    c8e8:	adds	r1, #1
		if (!c) break;
    c8ea:	cbz	r4, c8f6 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c8ec:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c8ee:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c8f2:	bne.n	c8e2 <usb_init_serialnumber+0x2a>
    c8f4:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c8f6:	adds	r3, #1
    c8f8:	lsls	r3, r3, #1
    c8fa:	strb	r3, [r5, #0]
}
    c8fc:	add	sp, #20
    c8fe:	pop	{r4, r5, pc}
    c900:	.word	0x401f4400
    c904:	.word	0x00989680
    c908:	.word	0x20002386

0000c90c <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c90c:	ldr	r1, [pc, #68]	; (c954 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c90e:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c910:	ldr	r3, [r1, #0]
    c912:	cbz	r3, c928 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c914:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c918:	cbnz	r3, c928 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c91a:	mrs	r2, PRIMASK
		__disable_irq();
    c91e:	cpsid	i
		EventResponder *first = firstYield;
    c920:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c922:	cbnz	r0, c92a <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c924:	cbnz	r2, c928 <EventResponder::runFromYield()+0x1c>
    c926:	cpsie	i
	}
    c928:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c92a:	ldr	r4, [pc, #44]	; (c958 <EventResponder::runFromYield()+0x4c>)
    c92c:	ldrb	r5, [r4, #0]
    c92e:	cmp	r5, #0
    c930:	bne.n	c924 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c932:	movs	r3, #1
    c934:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c936:	ldr	r3, [r0, #20]
    c938:	str	r3, [r1, #0]
		if (firstYield) {
    c93a:	cbz	r3, c94e <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c93c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c93e:	cbnz	r2, c942 <EventResponder::runFromYield()+0x36>
    c940:	cpsie	i
		first->_triggered = false;
    c942:	movs	r5, #0
		(*(first->_function))(*first);
    c944:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c946:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c948:	blx	r3
		runningFromYield = false;
    c94a:	strb	r5, [r4, #0]
    c94c:	b.n	c928 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c94e:	ldr	r1, [pc, #12]	; (c95c <EventResponder::runFromYield()+0x50>)
    c950:	str	r3, [r1, #0]
    c952:	b.n	c93e <EventResponder::runFromYield()+0x32>
    c954:	.word	0x20020804
    c958:	.word	0x20021547
    c95c:	.word	0x20020810

0000c960 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c960:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c964:	ldr	r3, [pc, #92]	; (c9c4 <yield+0x64>)
    c966:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c968:	cbz	r4, c992 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c96a:	ldr	r5, [pc, #92]	; (c9c8 <yield+0x68>)
    c96c:	ldrb	r3, [r5, #0]
    c96e:	cbnz	r3, c992 <yield+0x32>
	running = 1;
    c970:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c972:	lsls	r1, r4, #31
	running = 1;
    c974:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c976:	bpl.n	c982 <yield+0x22>
    c978:	bl	ac84 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c97c:	cbz	r0, c982 <yield+0x22>
    c97e:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c982:	lsls	r2, r4, #30
    c984:	bmi.n	c9b8 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c986:	movs	r3, #0
    c988:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c98a:	lsls	r3, r4, #29
    c98c:	bpl.n	c992 <yield+0x32>
		EventResponder::runFromYield();
    c98e:	bl	c90c <EventResponder::runFromYield()>
	}
};
    c992:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c996:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c99a:	ldr	r3, [r7, #0]
    c99c:	mov	r0, r7
    c99e:	ldr	r3, [r3, #16]
    c9a0:	blx	r3
    c9a2:	cbz	r0, c9aa <yield+0x4a>
    c9a4:	ldr	r3, [r7, #20]
    c9a6:	ldr	r3, [r3, #8]
    c9a8:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c9aa:	adds	r6, #1
    c9ac:	ldrb.w	r2, [r8]
    c9b0:	uxtb	r3, r6
    c9b2:	cmp	r2, r3
    c9b4:	bhi.n	c996 <yield+0x36>
    c9b6:	b.n	c986 <yield+0x26>
    c9b8:	movs	r6, #0
    c9ba:	ldr.w	r8, [pc, #16]	; c9cc <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c9be:	ldr.w	r9, [pc, #16]	; c9d0 <yield+0x70>
    c9c2:	b.n	c9ac <yield+0x4c>
    c9c4:	.word	0x20021612
    c9c8:	.word	0x20021549
    c9cc:	.word	0x20021548
    c9d0:	.word	0x20020814

0000c9d4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c9d4:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c9d6:	ldr	r5, [pc, #44]	; (ca04 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c9d8:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c9da:	ldr	r6, [pc, #44]	; (ca08 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c9dc:	mrs	r2, PRIMASK
		__disable_irq();
    c9e0:	cpsid	i
		EventResponder *first = firstInterrupt;
    c9e2:	ldr	r0, [r5, #0]
		if (first) {
    c9e4:	cbz	r0, c9fe <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c9e6:	ldr	r3, [r0, #20]
    c9e8:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c9ea:	cbz	r3, c9fa <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c9ec:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c9ee:	cbnz	r2, c9f2 <EventResponder::runFromInterrupt()+0x1e>
    c9f0:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c9f2:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c9f4:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c9f6:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c9f8:	b.n	c9dc <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c9fa:	str	r3, [r6, #0]
    c9fc:	b.n	c9ee <EventResponder::runFromInterrupt()+0x1a>
    c9fe:	cbnz	r2, ca02 <EventResponder::runFromInterrupt()+0x2e>
    ca00:	cpsie	i
}
    ca02:	pop	{r4, r5, r6, pc}
    ca04:	.word	0x2002080c
    ca08:	.word	0x20020808

0000ca0c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    ca0c:	b.w	c9d4 <EventResponder::runFromInterrupt()>

0000ca10 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    ca10:	ldr	r3, [pc, #16]	; (ca24 <systick_isr+0x14>)
    ca12:	ldr	r2, [r3, #4]
    ca14:	ldr	r3, [pc, #16]	; (ca28 <systick_isr+0x18>)
    ca16:	str	r2, [r3, #0]
	systick_millis_count++;
    ca18:	ldr	r2, [pc, #16]	; (ca2c <systick_isr+0x1c>)
    ca1a:	ldr	r3, [r2, #0]
    ca1c:	adds	r3, #1
    ca1e:	str	r3, [r2, #0]
}
    ca20:	bx	lr
    ca22:	nop
    ca24:	.word	0xe0001000
    ca28:	.word	0x2002137c
    ca2c:	.word	0x20021380

0000ca30 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    ca30:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    ca32:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    ca34:	ldr	r4, [pc, #136]	; (cac0 <DMAChannel::begin(bool)+0x90>)
    ca36:	cbnz	r1, ca5c <DMAChannel::begin(bool)+0x2c>
    ca38:	ldr	r1, [r0, #0]
    ca3a:	cbz	r1, ca5c <DMAChannel::begin(bool)+0x2c>
    ca3c:	ldrb	r3, [r0, #4]
    ca3e:	cmp	r3, #15
    ca40:	bhi.n	ca5c <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    ca42:	ldrh	r2, [r4, #0]
    ca44:	asrs	r2, r3
    ca46:	lsls	r2, r2, #31
    ca48:	bpl.n	ca5c <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    ca4a:	add.w	r3, r3, #33554432	; 0x2000000
    ca4e:	add.w	r3, r3, #29824	; 0x7480
    ca52:	cmp.w	r1, r3, lsl #5
    ca56:	bne.n	ca5c <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    ca58:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    ca5a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    ca5c:	ldrh	r1, [r4, #0]
    ca5e:	movs	r3, #0
    ca60:	asr.w	r2, r1, r3
    ca64:	ands.w	r2, r2, #1
    ca68:	bne.n	cab0 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    ca6a:	movs	r5, #1
    ca6c:	lsls	r5, r3
    ca6e:	orrs	r1, r5
    ca70:	strh	r1, [r4, #0]
			__enable_irq();
    ca72:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ca74:	ldr	r5, [pc, #76]	; (cac4 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    ca76:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ca78:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    ca7c:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ca7e:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ca80:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ca84:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ca88:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    ca8a:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    ca8c:	movw	r5, #1154	; 0x482
    ca90:	ldr	r1, [pc, #52]	; (cac8 <DMAChannel::begin(bool)+0x98>)
    ca92:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    ca94:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    ca96:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    ca98:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    ca9a:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    ca9c:	str	r3, [r0, #0]
	*p++ = 0;
    ca9e:	strd	r2, r2, [r3]
	*p++ = 0;
    caa2:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    caa6:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    caaa:	strd	r2, r2, [r3, #24]
    caae:	b.n	ca5a <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    cab0:	adds	r3, #1
    cab2:	cmp	r3, #16
    cab4:	bne.n	ca60 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    cab6:	cpsie	i
			TCD = (TCD_t *)0;
    cab8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    caba:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    cabc:	str	r2, [r0, #0]
			return; // no more channels available
    cabe:	b.n	ca5a <DMAChannel::begin(bool)+0x2a>
    cac0:	.word	0x200213d2
    cac4:	.word	0x400fc000
    cac8:	.word	0x400e8000

0000cacc <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    cacc:	ldrb	r3, [r0, #4]
    cace:	cmp	r3, #15
    cad0:	bhi.n	caf2 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    cad2:	ldr	r2, [pc, #32]	; (caf4 <DMAChannel::release()+0x28>)
    cad4:	strb	r3, [r2, #26]
	__disable_irq();
    cad6:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    cad8:	ldr	r1, [pc, #28]	; (caf8 <DMAChannel::release()+0x2c>)
    cada:	movs	r2, #1
    cadc:	ldrb	r3, [r0, #4]
    cade:	lsls	r2, r3
    cae0:	ldrh	r3, [r1, #0]
    cae2:	bic.w	r3, r3, r2
    cae6:	strh	r3, [r1, #0]
	__enable_irq();
    cae8:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    caea:	movs	r3, #16
    caec:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    caee:	movs	r3, #0
    caf0:	str	r3, [r0, #0]
}
    caf2:	bx	lr
    caf4:	.word	0x400e8000
    caf8:	.word	0x200213d2

0000cafc <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    cafc:	push	{r3, lr}
    cafe:	bl	cfe <Print::write(char const*)>
    cb02:	pop	{r3, pc}

0000cb04 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    cb04:	movs	r3, #0
    cb06:	movs	r2, #10
    cb08:	b.w	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000cb0c <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    cb0c:	movs	r3, #0
    cb0e:	uxtb	r2, r2
    cb10:	b.w	ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000cb14 <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    cb14:	push	{r3, r4, r5, lr}
    cb16:	mov	r5, r0
    cb18:	bl	cb0c <Print::print(unsigned long, int)>
    cb1c:	mov	r4, r0
    cb1e:	mov	r0, r5
    cb20:	bl	cc68 <Print::println()>
    cb24:	add	r0, r4
    cb26:	pop	{r3, r4, r5, pc}

0000cb28 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    cb28:	movs	r2, #0
    cb2a:	movs	r3, #1
    cb2c:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    cb2e:	push	{r4, lr}
		while (len > 0) {
    cb30:	cmp	r1, #0
    cb32:	sub.w	r4, r0, r1
    cb36:	bgt.n	cb40 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    cb38:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    cb3a:	orr.w	r0, r3, r2, lsl #16
    cb3e:	pop	{r4, pc}
			a += *p++;
    cb40:	ldrh	r4, [r4, #0]
			len -= 2;
    cb42:	subs	r1, #2
			a += *p++;
    cb44:	uxtah	r3, r3, r4
			b += a;
    cb48:	add	r2, r3
			len -= 2;
    cb4a:	b.n	cb30 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000cb4c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    cb4c:	b.w	ac98 <usb_serial_flush_input>

0000cb50 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    cb50:	b.w	ac40 <usb_serial_peekchar>

0000cb54 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    cb54:	b.w	acf8 <usb_serial_getchar>

0000cb58 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    cb58:	b.w	ac84 <usb_serial_available>

0000cb5c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    cb5c:	b.w	af08 <usb_serial_flush_output>

0000cb60 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    cb60:	b.w	aebc <usb_serial_write_buffer_free>

0000cb64 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    cb64:	mov	r0, r1
    cb66:	mov	r1, r2
    cb68:	b.w	ad18 <usb_serial_write>

0000cb6c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cb6c:	mov	r0, r1
    cb6e:	b.w	aea4 <usb_serial_putchar>

0000cb72 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    cb72:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    cb74:	bl	788 <setup>
	while (1) {
		loop();
    cb78:	bl	27c <loop>
		yield();
    cb7c:	bl	c960 <yield>
	while (1) {
    cb80:	b.n	cb78 <main+0x6>
	...

0000cb84 <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    cb84:	push	{r4, r5, r6, lr}
    cb86:	ldr	r5, [pc, #36]	; (cbac <Stream::timedRead()+0x28>)
    cb88:	mov	r4, r0
    cb8a:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    cb8c:	ldr	r3, [r4, #0]
    cb8e:	mov	r0, r4
    cb90:	ldr	r3, [r3, #20]
    cb92:	blx	r3
    if (c >= 0) return c;
    cb94:	cmp	r0, #0
    cb96:	bge.n	cbaa <Stream::timedRead()+0x26>
    yield();
    cb98:	bl	c960 <yield>
    cb9c:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    cb9e:	ldr	r2, [r4, #8]
    cba0:	subs	r3, r3, r6
    cba2:	cmp	r3, r2
    cba4:	bcc.n	cb8c <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    cba6:	mov.w	r0, #4294967295
}
    cbaa:	pop	{r4, r5, r6, pc}
    cbac:	.word	0x20021380

0000cbb0 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    cbb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbb4:	mov	r6, r0
    cbb6:	mov	r7, r1
    cbb8:	mov	r4, r3
	if (buffer == nullptr) return 0;
    cbba:	mov	r5, r2
    cbbc:	cbz	r2, cbee <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    cbbe:	cbz	r3, cbe0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    cbc0:	add.w	r8, r3, #4294967295
	size_t index = 0;
    cbc4:	movs	r4, #0
	while (index < length) {
    cbc6:	cmp	r4, r8
    cbc8:	bcs.n	cbdc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    cbca:	mov	r0, r6
    cbcc:	bl	cb84 <Stream::timedRead()>
		if (c == terminator) break;
    cbd0:	cmp	r7, r0
    cbd2:	beq.n	cbdc <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    cbd4:	cmp	r0, #0
    cbd6:	bge.n	cbe6 <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    cbd8:	movs	r3, #1
    cbda:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    cbdc:	movs	r3, #0
    cbde:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    cbe0:	mov	r0, r4
    cbe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    cbe6:	adds	r4, #1
		*buffer++ = (char)c;
    cbe8:	strb.w	r0, [r5], #1
		index++;
    cbec:	b.n	cbc6 <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    cbee:	mov	r4, r2
    cbf0:	b.n	cbe0 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000cbf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    cbf2:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cbf4:	push	{r4, r5, r6, r7, lr}
		base = 10;
    cbf6:	it	eq
    cbf8:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cbfa:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    cbfc:	cbnz	r1, cc2a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    cbfe:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    cc00:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    cc02:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    cc06:	cbz	r3, cc18 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    cc08:	subs	r3, r4, #1
		buf[i] = '-';
    cc0a:	add	r2, sp, #40	; 0x28
		i--;
    cc0c:	uxtb	r4, r3
		buf[i] = '-';
    cc0e:	uxtab	r3, r2, r3
    cc12:	movs	r2, #45	; 0x2d
    cc14:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    cc18:	ldr	r3, [r0, #0]
    cc1a:	add	r1, sp, #4
    cc1c:	rsb	r2, r4, #34	; 0x22
    cc20:	ldr	r3, [r3, #4]
    cc22:	add	r1, r4
    cc24:	blx	r3
}
    cc26:	add	sp, #44	; 0x2c
    cc28:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    cc2a:	movs	r4, #33	; 0x21
			digit = n % base;
    cc2c:	udiv	r6, r1, r2
    cc30:	mls	r7, r2, r6, r1
    cc34:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc36:	cmp	r7, #9
    cc38:	add.w	r7, r4, #40	; 0x28
    cc3c:	ite	ls
    cc3e:	addls	r5, #48	; 0x30
    cc40:	addhi	r5, #55	; 0x37
    cc42:	add	r7, sp
			if (n == 0) break;
    cc44:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cc46:	uxtb	r5, r5
    cc48:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    cc4c:	bhi.n	cc06 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    cc4e:	subs	r4, #1
			n /= base;
    cc50:	mov	r1, r6
			i--;
    cc52:	uxtb	r4, r4
			digit = n % base;
    cc54:	b.n	cc2c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000cc56 <Print::print(long)>:
	if (n < 0) {
    cc56:	cmp	r1, #0
		n = -n;
    cc58:	mov.w	r2, #10
    cc5c:	itte	lt
    cc5e:	neglt	r1, r1
		sign = '-';
    cc60:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    cc62:	movge	r3, #0
	if (base == 0) {
    cc64:	b.w	cbf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000cc68 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    cc68:	movw	r3, #2573	; 0xa0d
{
    cc6c:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    cc6e:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    cc72:	movs	r2, #2
    cc74:	ldr	r3, [r0, #0]
    cc76:	add	r1, sp, #4
    cc78:	ldr	r3, [r3, #4]
    cc7a:	blx	r3
}
    cc7c:	add	sp, #12
    cc7e:	ldr.w	pc, [sp], #4
	...

0000cc84 <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    cc84:	ldr	r3, [pc, #20]	; (cc9c <_write+0x18>)
    cc86:	cmp	r0, #2
    cc88:	it	hi
    cc8a:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cc8c:	ldr	r0, [r3, #0]
{
    cc8e:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cc90:	ldr	r4, [r0, #4]
    cc92:	mov	r0, r3
    cc94:	mov	r3, r4
}
    cc96:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    cc9a:	bx	r3
    cc9c:	.word	0x20001db8

0000cca0 <Print::printf(char const*, ...)>:
{
    cca0:	push	{r1, r2, r3}
    cca2:	push	{r0, r1, lr}
    cca4:	add	r2, sp, #12
    cca6:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    ccaa:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    ccac:	bl	efe8 <vdiprintf>
}
    ccb0:	add	sp, #8
    ccb2:	ldr.w	lr, [sp], #4
    ccb6:	add	sp, #12
    ccb8:	bx	lr

0000ccba <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    ccba:	push	{r4, r5}
	if (base == 0) {
    ccbc:	cbnz	r2, ccc8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    ccbe:	ldr	r3, [r0, #0]
    ccc0:	uxtb	r1, r1
    ccc2:	ldr	r3, [r3, #0]
}
    ccc4:	pop	{r4, r5}
		return write((uint8_t)n);
    ccc6:	bx	r3
}
    ccc8:	pop	{r4, r5}
    ccca:	b.w	cbf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000ccce <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    ccce:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ccd2:	sub	sp, #72	; 0x48
    ccd4:	mov	r8, r0
    ccd6:	mov	r7, r2
    ccd8:	mov	r6, r3
    ccda:	ldrb.w	r9, [sp, #104]	; 0x68
    ccde:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    cce2:	cmp.w	r9, #1
    cce6:	bls.n	cd5a <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    cce8:	orrs.w	r3, r2, r6
    ccec:	bne.n	cd24 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    ccee:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    ccf0:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    ccf2:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    ccf6:	cmp.w	sl, #0
    ccfa:	beq.n	cd0c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    ccfc:	subs	r3, r5, #1
		buf[i] = '-';
    ccfe:	add	r2, sp, #72	; 0x48
		i--;
    cd00:	uxtb	r5, r3
		buf[i] = '-';
    cd02:	uxtab	r3, r2, r3
    cd06:	movs	r2, #45	; 0x2d
    cd08:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    cd0c:	ldr.w	r3, [r8]
    cd10:	add	r1, sp, #4
    cd12:	rsb	r2, r5, #66	; 0x42
    cd16:	mov	r0, r8
    cd18:	ldr	r3, [r3, #4]
    cd1a:	add	r1, r5
    cd1c:	blx	r3
}
    cd1e:	add	sp, #72	; 0x48
    cd20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    cd24:	movs	r5, #65	; 0x41
			digit = n % base;
    cd26:	mov	r1, r6
    cd28:	mov	r2, r9
    cd2a:	movs	r3, #0
    cd2c:	mov	r0, r7
    cd2e:	bl	ce9c <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd32:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    cd36:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd38:	add	r3, sp
    cd3a:	cmp	r4, #9
    cd3c:	ite	ls
    cd3e:	addls	r4, #48	; 0x30
    cd40:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    cd42:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd44:	uxtb	r4, r4
			if (n == 0) break;
    cd46:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cd4a:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    cd4e:	bcc.n	ccf6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    cd50:	subs	r5, #1
			n /= base;
    cd52:	mov	r7, r0
    cd54:	mov	r6, r1
			i--;
    cd56:	uxtb	r5, r5
			digit = n % base;
    cd58:	b.n	cd26 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    cd5a:	movs	r0, #0
    cd5c:	b.n	cd1e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000cd60 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    cd60:	vcmp.f64	d0, d0
{
    cd64:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    cd66:	vmrs	APSR_nzcv, fpscr
{
    cd6a:	mov	r6, r0
    cd6c:	mov	r5, r1
    cd6e:	vpush	{d8-d9}
    cd72:	sub	sp, #28
	if (isnan(number)) return print("nan");
    cd74:	bvc.n	cd88 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    cd76:	ldr	r1, [pc, #264]	; (ce80 <Print::printFloat(double, unsigned char)+0x120>)
    cd78:	bl	cfe <Print::write(char const*)>
    cd7c:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    cd7e:	mov	r0, r4
    cd80:	add	sp, #28
    cd82:	vpop	{d8-d9}
    cd86:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    cd88:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    cd8c:	vldr	d6, [pc, #208]	; ce60 <Print::printFloat(double, unsigned char)+0x100>
    cd90:	vcmp.f64	d7, d6
    cd94:	vmrs	APSR_nzcv, fpscr
    cd98:	ble.n	cd9e <Print::printFloat(double, unsigned char)+0x3e>
    cd9a:	ldr	r1, [pc, #232]	; (ce84 <Print::printFloat(double, unsigned char)+0x124>)
    cd9c:	b.n	cd78 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cd9e:	vldr	d7, [pc, #200]	; ce68 <Print::printFloat(double, unsigned char)+0x108>
    cda2:	vcmpe.f64	d0, d7
    cda6:	vmrs	APSR_nzcv, fpscr
    cdaa:	ble.n	cdb2 <Print::printFloat(double, unsigned char)+0x52>
    cdac:	ldr	r1, [pc, #216]	; (ce88 <Print::printFloat(double, unsigned char)+0x128>)
    cdae:	mov	r0, r6
    cdb0:	b.n	cd78 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cdb2:	vldr	d7, [pc, #188]	; ce70 <Print::printFloat(double, unsigned char)+0x110>
    cdb6:	vcmpe.f64	d0, d7
    cdba:	vmrs	APSR_nzcv, fpscr
    cdbe:	bmi.n	cdac <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    cdc0:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    cdc4:	movs	r2, #0
	double rounding = 0.5;
    cdc6:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    cdca:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    cdce:	vldr	d6, [pc, #168]	; ce78 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    cdd2:	itte	mi
    cdd4:	vnegmi.f64	d0, d0
		sign = 1;
    cdd8:	movmi	r3, #1
	uint8_t sign=0;
    cdda:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    cddc:	uxtb	r1, r2
    cdde:	cmp	r5, r1
    cde0:	bhi.n	ce30 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    cde2:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    cde6:	movs	r2, #10
    cde8:	mov	r0, r6
    cdea:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    cdee:	vmov	r1, s18
    cdf2:	bl	cbf2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cdf6:	mov	r4, r0
	if (digits > 0) {
    cdf8:	cmp	r5, #0
    cdfa:	beq.n	cd7e <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    cdfc:	vcvt.f64.u32	d0, s18
    ce00:	cmp	r5, #15
    ce02:	add	r0, sp, #8
			remainder *= 10.0;
    ce04:	vmov.f64	d6, #36	; 0x41200000  10.0
    ce08:	it	cs
    ce0a:	movcs	r5, #15
		buf[0] = '.';
    ce0c:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    ce0e:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    ce12:	mov	r1, r0
    ce14:	mov	r2, r5
    ce16:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    ce1a:	subs	r2, #1
    ce1c:	uxtb	r2, r2
    ce1e:	cmp	r2, #255	; 0xff
    ce20:	bne.n	ce38 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    ce22:	adds	r5, #1
    ce24:	ldr	r3, [r6, #0]
    ce26:	mov	r0, r6
    ce28:	ldr	r3, [r3, #4]
    ce2a:	uxtb	r2, r5
    ce2c:	blx	r3
    ce2e:	b.n	cd7e <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    ce30:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    ce34:	adds	r2, #1
    ce36:	b.n	cddc <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    ce38:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    ce3c:	vcvt.u32.f64	s15, d0
    ce40:	vstr	s15, [sp, #4]
    ce44:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    ce48:	vmov	s15, r3
			buf[count++] = '0' + n;
    ce4c:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    ce50:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    ce54:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    ce58:	vsub.f64	d0, d0, d7
    ce5c:	b.n	ce1a <Print::printFloat(double, unsigned char)+0xba>
    ce5e:	nop
    ce60:	.word	0xffffffff
    ce64:	.word	0x7fefffff
    ce68:	.word	0xe0000000
    ce6c:	.word	0x41efffff
    ce70:	.word	0xe0000000
    ce74:	.word	0xc1efffff
    ce78:	.word	0xa0000000
    ce7c:	.word	0x3fb99999
    ce80:	.word	0x200011bc
    ce84:	.word	0x200011c0
    ce88:	.word	0x200011c4

0000ce8c <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    ce8c:	b.w	d1a8 <free>

0000ce90 <__aeabi_atexit>:
    ce90:	mov	r3, r1
    ce92:	mov	r1, r0
    ce94:	mov	r0, r3
    ce96:	b.w	e008 <__cxa_atexit>
	...

0000ce9c <__aeabi_uldivmod>:
    ce9c:	cbnz	r3, ceb4 <__aeabi_uldivmod+0x18>
    ce9e:	cbnz	r2, ceb4 <__aeabi_uldivmod+0x18>
    cea0:	cmp	r1, #0
    cea2:	it	eq
    cea4:	cmpeq	r0, #0
    cea6:	itt	ne
    cea8:	movne.w	r1, #4294967295
    ceac:	movne.w	r0, #4294967295
    ceb0:	b.w	d194 <__aeabi_idiv0>
    ceb4:	sub.w	ip, sp, #8
    ceb8:	strd	ip, lr, [sp, #-16]!
    cebc:	bl	cecc <__udivmoddi4>
    cec0:	ldr.w	lr, [sp, #4]
    cec4:	ldrd	r2, r3, [sp, #8]
    cec8:	add	sp, #16
    ceca:	bx	lr

0000cecc <__udivmoddi4>:
    cecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ced0:	ldr	r6, [sp, #32]
    ced2:	mov	r5, r1
    ced4:	mov	r4, r0
    ced6:	mov	r7, r1
    ced8:	cmp	r3, #0
    ceda:	bne.n	cf72 <__udivmoddi4+0xa6>
    cedc:	cmp	r2, r1
    cede:	mov	ip, r2
    cee0:	bls.n	cfae <__udivmoddi4+0xe2>
    cee2:	clz	r3, r2
    cee6:	cbz	r3, cefa <__udivmoddi4+0x2e>
    cee8:	lsl.w	ip, r2, r3
    ceec:	rsb	r2, r3, #32
    cef0:	lsls	r7, r3
    cef2:	lsr.w	r2, r0, r2
    cef6:	orrs	r7, r2
    cef8:	lsls	r4, r3
    cefa:	mov.w	lr, ip, lsr #16
    cefe:	uxth.w	r5, ip
    cf02:	udiv	r1, r7, lr
    cf06:	lsrs	r2, r4, #16
    cf08:	mls	r7, lr, r1, r7
    cf0c:	orr.w	r2, r2, r7, lsl #16
    cf10:	mul.w	r0, r1, r5
    cf14:	cmp	r0, r2
    cf16:	bls.n	cf2e <__udivmoddi4+0x62>
    cf18:	adds.w	r2, ip, r2
    cf1c:	add.w	r7, r1, #4294967295
    cf20:	bcs.w	d15c <__udivmoddi4+0x290>
    cf24:	cmp	r0, r2
    cf26:	bls.w	d15c <__udivmoddi4+0x290>
    cf2a:	subs	r1, #2
    cf2c:	add	r2, ip
    cf2e:	subs	r2, r2, r0
    cf30:	uxth	r4, r4
    cf32:	udiv	r0, r2, lr
    cf36:	mls	r2, lr, r0, r2
    cf3a:	orr.w	r4, r4, r2, lsl #16
    cf3e:	mul.w	r5, r0, r5
    cf42:	cmp	r5, r4
    cf44:	bls.n	cf5c <__udivmoddi4+0x90>
    cf46:	adds.w	r4, ip, r4
    cf4a:	add.w	r2, r0, #4294967295
    cf4e:	bcs.w	d160 <__udivmoddi4+0x294>
    cf52:	cmp	r5, r4
    cf54:	bls.w	d160 <__udivmoddi4+0x294>
    cf58:	add	r4, ip
    cf5a:	subs	r0, #2
    cf5c:	orr.w	r0, r0, r1, lsl #16
    cf60:	subs	r4, r4, r5
    cf62:	movs	r1, #0
    cf64:	cbz	r6, cf6e <__udivmoddi4+0xa2>
    cf66:	lsrs	r4, r3
    cf68:	movs	r3, #0
    cf6a:	strd	r4, r3, [r6]
    cf6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf72:	cmp	r3, r1
    cf74:	bls.n	cf88 <__udivmoddi4+0xbc>
    cf76:	cmp	r6, #0
    cf78:	beq.w	d156 <__udivmoddi4+0x28a>
    cf7c:	movs	r1, #0
    cf7e:	strd	r0, r5, [r6]
    cf82:	mov	r0, r1
    cf84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cf88:	clz	r1, r3
    cf8c:	cmp	r1, #0
    cf8e:	bne.n	d024 <__udivmoddi4+0x158>
    cf90:	cmp	r3, r5
    cf92:	bcc.n	cf9a <__udivmoddi4+0xce>
    cf94:	cmp	r2, r0
    cf96:	bhi.w	d18a <__udivmoddi4+0x2be>
    cf9a:	subs	r4, r0, r2
    cf9c:	sbc.w	r2, r5, r3
    cfa0:	movs	r0, #1
    cfa2:	mov	r7, r2
    cfa4:	cmp	r6, #0
    cfa6:	beq.n	cf6e <__udivmoddi4+0xa2>
    cfa8:	strd	r4, r7, [r6]
    cfac:	b.n	cf6e <__udivmoddi4+0xa2>
    cfae:	cbnz	r2, cfb2 <__udivmoddi4+0xe6>
    cfb0:	udf	#255	; 0xff
    cfb2:	clz	r3, r2
    cfb6:	cmp	r3, #0
    cfb8:	bne.w	d0dc <__udivmoddi4+0x210>
    cfbc:	subs	r2, r1, r2
    cfbe:	mov.w	r7, ip, lsr #16
    cfc2:	uxth.w	lr, ip
    cfc6:	movs	r1, #1
    cfc8:	udiv	r5, r2, r7
    cfcc:	mls	r0, r7, r5, r2
    cfd0:	lsrs	r2, r4, #16
    cfd2:	orr.w	r2, r2, r0, lsl #16
    cfd6:	mul.w	r0, lr, r5
    cfda:	cmp	r0, r2
    cfdc:	bls.n	cff0 <__udivmoddi4+0x124>
    cfde:	adds.w	r2, ip, r2
    cfe2:	add.w	r8, r5, #4294967295
    cfe6:	bcs.n	cfee <__udivmoddi4+0x122>
    cfe8:	cmp	r0, r2
    cfea:	bhi.w	d184 <__udivmoddi4+0x2b8>
    cfee:	mov	r5, r8
    cff0:	subs	r2, r2, r0
    cff2:	uxth	r4, r4
    cff4:	udiv	r0, r2, r7
    cff8:	mls	r2, r7, r0, r2
    cffc:	orr.w	r4, r4, r2, lsl #16
    d000:	mul.w	lr, lr, r0
    d004:	cmp	lr, r4
    d006:	bls.n	d01a <__udivmoddi4+0x14e>
    d008:	adds.w	r4, ip, r4
    d00c:	add.w	r2, r0, #4294967295
    d010:	bcs.n	d018 <__udivmoddi4+0x14c>
    d012:	cmp	lr, r4
    d014:	bhi.w	d18e <__udivmoddi4+0x2c2>
    d018:	mov	r0, r2
    d01a:	sub.w	r4, r4, lr
    d01e:	orr.w	r0, r0, r5, lsl #16
    d022:	b.n	cf64 <__udivmoddi4+0x98>
    d024:	rsb	r7, r1, #32
    d028:	lsls	r3, r1
    d02a:	lsr.w	ip, r2, r7
    d02e:	orr.w	ip, ip, r3
    d032:	lsl.w	r4, r5, r1
    d036:	lsr.w	r3, r0, r7
    d03a:	lsrs	r5, r7
    d03c:	mov.w	r9, ip, lsr #16
    d040:	orrs	r3, r4
    d042:	udiv	r8, r5, r9
    d046:	uxth.w	lr, ip
    d04a:	mls	r5, r9, r8, r5
    d04e:	lsrs	r4, r3, #16
    d050:	orr.w	r4, r4, r5, lsl #16
    d054:	mul.w	r5, r8, lr
    d058:	cmp	r5, r4
    d05a:	lsl.w	r2, r2, r1
    d05e:	lsl.w	r0, r0, r1
    d062:	bls.n	d07c <__udivmoddi4+0x1b0>
    d064:	adds.w	r4, ip, r4
    d068:	add.w	sl, r8, #4294967295
    d06c:	bcs.w	d180 <__udivmoddi4+0x2b4>
    d070:	cmp	r5, r4
    d072:	bls.w	d180 <__udivmoddi4+0x2b4>
    d076:	sub.w	r8, r8, #2
    d07a:	add	r4, ip
    d07c:	subs	r4, r4, r5
    d07e:	uxth	r5, r3
    d080:	udiv	r3, r4, r9
    d084:	mls	r4, r9, r3, r4
    d088:	orr.w	r4, r5, r4, lsl #16
    d08c:	mul.w	lr, r3, lr
    d090:	cmp	lr, r4
    d092:	bls.n	d0a6 <__udivmoddi4+0x1da>
    d094:	adds.w	r4, ip, r4
    d098:	add.w	r5, r3, #4294967295
    d09c:	bcs.n	d178 <__udivmoddi4+0x2ac>
    d09e:	cmp	lr, r4
    d0a0:	bls.n	d178 <__udivmoddi4+0x2ac>
    d0a2:	subs	r3, #2
    d0a4:	add	r4, ip
    d0a6:	orr.w	r3, r3, r8, lsl #16
    d0aa:	umull	r9, r5, r3, r2
    d0ae:	sub.w	r4, r4, lr
    d0b2:	cmp	r4, r5
    d0b4:	mov	r8, r9
    d0b6:	mov	lr, r5
    d0b8:	bcc.n	d168 <__udivmoddi4+0x29c>
    d0ba:	beq.n	d164 <__udivmoddi4+0x298>
    d0bc:	cbz	r6, d0d4 <__udivmoddi4+0x208>
    d0be:	subs.w	r2, r0, r8
    d0c2:	sbc.w	r4, r4, lr
    d0c6:	lsl.w	r7, r4, r7
    d0ca:	lsrs	r2, r1
    d0cc:	lsrs	r4, r1
    d0ce:	orrs	r7, r2
    d0d0:	strd	r7, r4, [r6]
    d0d4:	mov	r0, r3
    d0d6:	movs	r1, #0
    d0d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d0dc:	rsb	r1, r3, #32
    d0e0:	lsl.w	ip, r2, r3
    d0e4:	lsr.w	r2, r0, r1
    d0e8:	lsr.w	r1, r5, r1
    d0ec:	lsls	r5, r3
    d0ee:	orrs	r2, r5
    d0f0:	mov.w	r7, ip, lsr #16
    d0f4:	uxth.w	lr, ip
    d0f8:	udiv	r0, r1, r7
    d0fc:	mls	r5, r7, r0, r1
    d100:	lsrs	r1, r2, #16
    d102:	orr.w	r1, r1, r5, lsl #16
    d106:	mul.w	r5, r0, lr
    d10a:	cmp	r5, r1
    d10c:	lsl.w	r4, r4, r3
    d110:	bls.n	d124 <__udivmoddi4+0x258>
    d112:	adds.w	r1, ip, r1
    d116:	add.w	r8, r0, #4294967295
    d11a:	bcs.n	d17c <__udivmoddi4+0x2b0>
    d11c:	cmp	r5, r1
    d11e:	bls.n	d17c <__udivmoddi4+0x2b0>
    d120:	subs	r0, #2
    d122:	add	r1, ip
    d124:	subs	r1, r1, r5
    d126:	uxth	r2, r2
    d128:	udiv	r5, r1, r7
    d12c:	mls	r1, r7, r5, r1
    d130:	orr.w	r2, r2, r1, lsl #16
    d134:	mul.w	r1, r5, lr
    d138:	cmp	r1, r2
    d13a:	bls.n	d14e <__udivmoddi4+0x282>
    d13c:	adds.w	r2, ip, r2
    d140:	add.w	r8, r5, #4294967295
    d144:	bcs.n	d174 <__udivmoddi4+0x2a8>
    d146:	cmp	r1, r2
    d148:	bls.n	d174 <__udivmoddi4+0x2a8>
    d14a:	subs	r5, #2
    d14c:	add	r2, ip
    d14e:	subs	r2, r2, r1
    d150:	orr.w	r1, r5, r0, lsl #16
    d154:	b.n	cfc8 <__udivmoddi4+0xfc>
    d156:	mov	r1, r6
    d158:	mov	r0, r6
    d15a:	b.n	cf6e <__udivmoddi4+0xa2>
    d15c:	mov	r1, r7
    d15e:	b.n	cf2e <__udivmoddi4+0x62>
    d160:	mov	r0, r2
    d162:	b.n	cf5c <__udivmoddi4+0x90>
    d164:	cmp	r0, r9
    d166:	bcs.n	d0bc <__udivmoddi4+0x1f0>
    d168:	subs.w	r8, r9, r2
    d16c:	sbc.w	lr, r5, ip
    d170:	subs	r3, #1
    d172:	b.n	d0bc <__udivmoddi4+0x1f0>
    d174:	mov	r5, r8
    d176:	b.n	d14e <__udivmoddi4+0x282>
    d178:	mov	r3, r5
    d17a:	b.n	d0a6 <__udivmoddi4+0x1da>
    d17c:	mov	r0, r8
    d17e:	b.n	d124 <__udivmoddi4+0x258>
    d180:	mov	r8, sl
    d182:	b.n	d07c <__udivmoddi4+0x1b0>
    d184:	subs	r5, #2
    d186:	add	r2, ip
    d188:	b.n	cff0 <__udivmoddi4+0x124>
    d18a:	mov	r0, r1
    d18c:	b.n	cfa4 <__udivmoddi4+0xd8>
    d18e:	add	r4, ip
    d190:	subs	r0, #2
    d192:	b.n	d01a <__udivmoddi4+0x14e>

0000d194 <__aeabi_idiv0>:
    d194:	bx	lr
    d196:	nop

0000d198 <malloc>:
    d198:	ldr	r3, [pc, #8]	; (d1a4 <malloc+0xc>)
    d19a:	mov	r1, r0
    d19c:	ldr	r0, [r3, #0]
    d19e:	b.w	d1f8 <_malloc_r>
    d1a2:	nop
    d1a4:	.word	0x20002358

0000d1a8 <free>:
    d1a8:	ldr	r3, [pc, #8]	; (d1b4 <free+0xc>)
    d1aa:	mov	r1, r0
    d1ac:	ldr	r0, [r3, #0]
    d1ae:	b.w	ff28 <_free_r>
    d1b2:	nop
    d1b4:	.word	0x20002358

0000d1b8 <sbrk_aligned>:
    d1b8:	push	{r4, r5, r6, lr}
    d1ba:	ldr	r6, [pc, #56]	; (d1f4 <sbrk_aligned+0x3c>)
    d1bc:	mov	r4, r1
    d1be:	ldr	r1, [r6, #0]
    d1c0:	mov	r5, r0
    d1c2:	cbnz	r1, d1ca <sbrk_aligned+0x12>
    d1c4:	bl	f1c0 <_sbrk_r>
    d1c8:	str	r0, [r6, #0]
    d1ca:	mov	r1, r4
    d1cc:	mov	r0, r5
    d1ce:	bl	f1c0 <_sbrk_r>
    d1d2:	adds	r3, r0, #1
    d1d4:	beq.n	d1ec <sbrk_aligned+0x34>
    d1d6:	adds	r4, r0, #3
    d1d8:	bic.w	r4, r4, #3
    d1dc:	cmp	r0, r4
    d1de:	beq.n	d1f0 <sbrk_aligned+0x38>
    d1e0:	subs	r1, r4, r0
    d1e2:	mov	r0, r5
    d1e4:	bl	f1c0 <_sbrk_r>
    d1e8:	adds	r0, #1
    d1ea:	bne.n	d1f0 <sbrk_aligned+0x38>
    d1ec:	mov.w	r4, #4294967295
    d1f0:	mov	r0, r4
    d1f2:	pop	{r4, r5, r6, pc}
    d1f4:	.word	0x20020858

0000d1f8 <_malloc_r>:
    d1f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1fc:	adds	r5, r1, #3
    d1fe:	bic.w	r5, r5, #3
    d202:	adds	r5, #8
    d204:	cmp	r5, #12
    d206:	it	cc
    d208:	movcc	r5, #12
    d20a:	cmp	r5, #0
    d20c:	mov	r7, r0
    d20e:	blt.n	d214 <_malloc_r+0x1c>
    d210:	cmp	r1, r5
    d212:	bls.n	d220 <_malloc_r+0x28>
    d214:	movs	r3, #12
    d216:	str	r3, [r7, #0]
    d218:	movs	r6, #0
    d21a:	mov	r0, r6
    d21c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d220:	ldr	r6, [pc, #188]	; (d2e0 <_malloc_r+0xe8>)
    d222:	bl	d2e4 <__malloc_lock>
    d226:	ldr	r3, [r6, #0]
    d228:	mov	r4, r3
    d22a:	cbnz	r4, d27e <_malloc_r+0x86>
    d22c:	mov	r1, r5
    d22e:	mov	r0, r7
    d230:	bl	d1b8 <sbrk_aligned>
    d234:	adds	r3, r0, #1
    d236:	mov	r4, r0
    d238:	bne.n	d2da <_malloc_r+0xe2>
    d23a:	ldr	r4, [r6, #0]
    d23c:	mov	r6, r4
    d23e:	cmp	r6, #0
    d240:	bne.n	d2c8 <_malloc_r+0xd0>
    d242:	cmp	r4, #0
    d244:	beq.n	d2ce <_malloc_r+0xd6>
    d246:	ldr	r3, [r4, #0]
    d248:	mov	r1, r6
    d24a:	mov	r0, r7
    d24c:	add.w	r8, r4, r3
    d250:	bl	f1c0 <_sbrk_r>
    d254:	cmp	r8, r0
    d256:	bne.n	d2ce <_malloc_r+0xd6>
    d258:	ldr	r3, [r4, #0]
    d25a:	adds	r5, #3
    d25c:	subs	r5, r5, r3
    d25e:	bic.w	r5, r5, #3
    d262:	adds	r5, #8
    d264:	cmp	r5, #12
    d266:	it	cc
    d268:	movcc	r5, #12
    d26a:	mov	r1, r5
    d26c:	mov	r0, r7
    d26e:	bl	d1b8 <sbrk_aligned>
    d272:	adds	r0, #1
    d274:	beq.n	d2ce <_malloc_r+0xd6>
    d276:	ldr	r3, [r4, #0]
    d278:	add	r3, r5
    d27a:	str	r3, [r4, #0]
    d27c:	b.n	d29c <_malloc_r+0xa4>
    d27e:	ldr	r2, [r4, #0]
    d280:	subs	r2, r2, r5
    d282:	bmi.n	d2c2 <_malloc_r+0xca>
    d284:	cmp	r2, #11
    d286:	bls.n	d2b6 <_malloc_r+0xbe>
    d288:	adds	r1, r4, r5
    d28a:	cmp	r3, r4
    d28c:	str	r5, [r4, #0]
    d28e:	it	ne
    d290:	strne	r1, [r3, #4]
    d292:	ldr	r3, [r4, #4]
    d294:	it	eq
    d296:	streq	r1, [r6, #0]
    d298:	str	r2, [r4, r5]
    d29a:	str	r3, [r1, #4]
    d29c:	mov	r0, r7
    d29e:	add.w	r6, r4, #11
    d2a2:	bl	d2f0 <__malloc_unlock>
    d2a6:	bic.w	r6, r6, #7
    d2aa:	adds	r3, r4, #4
    d2ac:	subs	r2, r6, r3
    d2ae:	beq.n	d21a <_malloc_r+0x22>
    d2b0:	subs	r3, r3, r6
    d2b2:	str	r3, [r4, r2]
    d2b4:	b.n	d21a <_malloc_r+0x22>
    d2b6:	ldr	r2, [r4, #4]
    d2b8:	cmp	r3, r4
    d2ba:	ite	eq
    d2bc:	streq	r2, [r6, #0]
    d2be:	strne	r2, [r3, #4]
    d2c0:	b.n	d29c <_malloc_r+0xa4>
    d2c2:	mov	r3, r4
    d2c4:	ldr	r4, [r4, #4]
    d2c6:	b.n	d22a <_malloc_r+0x32>
    d2c8:	mov	r4, r6
    d2ca:	ldr	r6, [r6, #4]
    d2cc:	b.n	d23e <_malloc_r+0x46>
    d2ce:	movs	r3, #12
    d2d0:	str	r3, [r7, #0]
    d2d2:	mov	r0, r7
    d2d4:	bl	d2f0 <__malloc_unlock>
    d2d8:	b.n	d21a <_malloc_r+0x22>
    d2da:	str	r5, [r4, #0]
    d2dc:	b.n	d29c <_malloc_r+0xa4>
    d2de:	nop
    d2e0:	.word	0x20020854

0000d2e4 <__malloc_lock>:
    d2e4:	ldr	r0, [pc, #4]	; (d2ec <__malloc_lock+0x8>)
    d2e6:	b.w	f258 <__retarget_lock_acquire_recursive>
    d2ea:	nop
    d2ec:	.word	0x200215e2

0000d2f0 <__malloc_unlock>:
    d2f0:	ldr	r0, [pc, #4]	; (d2f8 <__malloc_unlock+0x8>)
    d2f2:	b.w	f25a <__retarget_lock_release_recursive>
    d2f6:	nop
    d2f8:	.word	0x200215e2

0000d2fc <_realloc_r>:
    d2fc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d300:	mov	r8, r0
    d302:	mov	r4, r2
    d304:	mov	r6, r1
    d306:	cbnz	r1, d312 <_realloc_r+0x16>
    d308:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d30c:	mov	r1, r2
    d30e:	b.w	d1f8 <_malloc_r>
    d312:	cbnz	r2, d320 <_realloc_r+0x24>
    d314:	bl	ff28 <_free_r>
    d318:	mov	r5, r4
    d31a:	mov	r0, r5
    d31c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d320:	bl	10fe8 <_malloc_usable_size_r>
    d324:	cmp	r4, r0
    d326:	mov	r7, r0
    d328:	bhi.n	d330 <_realloc_r+0x34>
    d32a:	cmp.w	r4, r0, lsr #1
    d32e:	bhi.n	d356 <_realloc_r+0x5a>
    d330:	mov	r1, r4
    d332:	mov	r0, r8
    d334:	bl	d1f8 <_malloc_r>
    d338:	mov	r5, r0
    d33a:	cmp	r0, #0
    d33c:	beq.n	d31a <_realloc_r+0x1e>
    d33e:	cmp	r4, r7
    d340:	mov	r2, r4
    d342:	mov	r1, r6
    d344:	it	cs
    d346:	movcs	r2, r7
    d348:	bl	a79c <memcpy>
    d34c:	mov	r1, r6
    d34e:	mov	r0, r8
    d350:	bl	ff28 <_free_r>
    d354:	b.n	d31a <_realloc_r+0x1e>
    d356:	mov	r5, r6
    d358:	b.n	d31a <_realloc_r+0x1e>

0000d35a <sulp>:
    d35a:	push	{r4, r5, r6, lr}
    d35c:	mov	r4, r0
    d35e:	mov	r5, r1
    d360:	mov	r6, r2
    d362:	vmov	d0, r4, r5
    d366:	bl	10d6c <__ulp>
    d36a:	cbz	r6, d38c <sulp+0x32>
    d36c:	ubfx	r3, r5, #20, #11
    d370:	rsb	r3, r3, #107	; 0x6b
    d374:	cmp	r3, #0
    d376:	ble.n	d38c <sulp+0x32>
    d378:	lsls	r3, r3, #20
    d37a:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d37e:	movs	r0, #0
    d380:	add.w	r1, r1, #3145728	; 0x300000
    d384:	vmov	d7, r0, r1
    d388:	vmul.f64	d0, d0, d7
    d38c:	pop	{r4, r5, r6, pc}
	...

0000d390 <_strtod_l>:
    d390:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d394:	vpush	{d8-d14}
    d398:	sub	sp, #92	; 0x5c
    d39a:	mov	r4, r0
    d39c:	str	r2, [sp, #52]	; 0x34
    d39e:	movs	r2, #0
    d3a0:	str	r2, [sp, #72]	; 0x48
    d3a2:	mov	sl, r1
    d3a4:	mov.w	r8, #0
    d3a8:	mov.w	r9, #0
    d3ac:	mov	r2, r1
    d3ae:	str	r2, [sp, #68]	; 0x44
    d3b0:	ldrb	r1, [r2, #0]
    d3b2:	cmp	r1, #43	; 0x2b
    d3b4:	beq.n	d450 <_strtod_l+0xc0>
    d3b6:	bhi.n	d42c <_strtod_l+0x9c>
    d3b8:	cmp	r1, #13
    d3ba:	bhi.n	d424 <_strtod_l+0x94>
    d3bc:	cmp	r1, #8
    d3be:	bhi.n	d428 <_strtod_l+0x98>
    d3c0:	cmp	r1, #0
    d3c2:	beq.n	d43e <_strtod_l+0xae>
    d3c4:	movs	r2, #0
    d3c6:	str	r2, [sp, #32]
    d3c8:	ldr	r6, [sp, #68]	; 0x44
    d3ca:	ldrb	r2, [r6, #0]
    d3cc:	cmp	r2, #48	; 0x30
    d3ce:	bne.w	d542 <_strtod_l+0x1b2>
    d3d2:	ldrb	r2, [r6, #1]
    d3d4:	and.w	r2, r2, #223	; 0xdf
    d3d8:	cmp	r2, #88	; 0x58
    d3da:	bne.n	d4be <_strtod_l+0x12e>
    d3dc:	str	r3, [sp, #8]
    d3de:	ldr	r3, [sp, #32]
    d3e0:	str	r3, [sp, #4]
    d3e2:	add	r3, sp, #72	; 0x48
    d3e4:	str	r3, [sp, #0]
    d3e6:	ldr	r2, [pc, #580]	; (d62c <_strtod_l+0x29c>)
    d3e8:	add	r3, sp, #76	; 0x4c
    d3ea:	add	r1, sp, #68	; 0x44
    d3ec:	mov	r0, r4
    d3ee:	bl	10090 <__gethex>
    d3f2:	ands.w	r7, r0, #15
    d3f6:	mov	r5, r0
    d3f8:	beq.n	d406 <_strtod_l+0x76>
    d3fa:	cmp	r7, #6
    d3fc:	bne.n	d454 <_strtod_l+0xc4>
    d3fe:	adds	r6, #1
    d400:	movs	r3, #0
    d402:	str	r6, [sp, #68]	; 0x44
    d404:	str	r3, [sp, #32]
    d406:	ldr	r3, [sp, #52]	; 0x34
    d408:	cmp	r3, #0
    d40a:	bne.w	deb8 <_strtod_l+0xb28>
    d40e:	ldr	r3, [sp, #32]
    d410:	vmov	d0, r8, r9
    d414:	cbz	r3, d44a <_strtod_l+0xba>
    d416:	vneg.f64	d0, d0
    d41a:	add	sp, #92	; 0x5c
    d41c:	vpop	{d8-d14}
    d420:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d424:	cmp	r1, #32
    d426:	bne.n	d3c4 <_strtod_l+0x34>
    d428:	adds	r2, #1
    d42a:	b.n	d3ae <_strtod_l+0x1e>
    d42c:	cmp	r1, #45	; 0x2d
    d42e:	bne.n	d3c4 <_strtod_l+0x34>
    d430:	movs	r1, #1
    d432:	str	r1, [sp, #32]
    d434:	adds	r1, r2, #1
    d436:	str	r1, [sp, #68]	; 0x44
    d438:	ldrb	r2, [r2, #1]
    d43a:	cmp	r2, #0
    d43c:	bne.n	d3c8 <_strtod_l+0x38>
    d43e:	ldr	r3, [sp, #52]	; 0x34
    d440:	str.w	sl, [sp, #68]	; 0x44
    d444:	cmp	r3, #0
    d446:	bne.w	deb4 <_strtod_l+0xb24>
    d44a:	vmov	d0, r8, r9
    d44e:	b.n	d41a <_strtod_l+0x8a>
    d450:	movs	r1, #0
    d452:	b.n	d432 <_strtod_l+0xa2>
    d454:	ldr	r2, [sp, #72]	; 0x48
    d456:	cbz	r2, d468 <_strtod_l+0xd8>
    d458:	movs	r1, #53	; 0x35
    d45a:	add	r0, sp, #80	; 0x50
    d45c:	bl	10f60 <__copybits>
    d460:	ldr	r1, [sp, #72]	; 0x48
    d462:	mov	r0, r4
    d464:	bl	10714 <_Bfree>
    d468:	subs	r3, r7, #1
    d46a:	ldr	r2, [sp, #76]	; 0x4c
    d46c:	cmp	r3, #4
    d46e:	bhi.n	d47e <_strtod_l+0xee>
    d470:	tbb	[pc, r3]
    d474:	.word	0x201d0314
    d478:	.byte	0x14
    d479:	.byte	0x00
    d47a:	ldrd	r8, r9, [sp, #80]	; 0x50
    d47e:	lsls	r3, r5, #23
    d480:	it	mi
    d482:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    d486:	bic.w	r3, r9, #2147483648	; 0x80000000
    d48a:	lsrs	r3, r3, #20
    d48c:	lsls	r3, r3, #20
    d48e:	cmp	r3, #0
    d490:	bne.n	d406 <_strtod_l+0x76>
    d492:	bl	f204 <__errno>
    d496:	movs	r3, #34	; 0x22
    d498:	str	r3, [r0, #0]
    d49a:	b.n	d406 <_strtod_l+0x76>
    d49c:	ldrd	r8, r3, [sp, #80]	; 0x50
    d4a0:	addw	r2, r2, #1075	; 0x433
    d4a4:	bic.w	r3, r3, #1048576	; 0x100000
    d4a8:	orr.w	r9, r3, r2, lsl #20
    d4ac:	b.n	d47e <_strtod_l+0xee>
    d4ae:	ldr.w	r9, [pc, #388]	; d634 <_strtod_l+0x2a4>
    d4b2:	b.n	d47e <_strtod_l+0xee>
    d4b4:	mvn.w	r9, #2147483648	; 0x80000000
    d4b8:	mov.w	r8, #4294967295
    d4bc:	b.n	d47e <_strtod_l+0xee>
    d4be:	ldr	r3, [sp, #68]	; 0x44
    d4c0:	adds	r2, r3, #1
    d4c2:	str	r2, [sp, #68]	; 0x44
    d4c4:	ldrb	r3, [r3, #1]
    d4c6:	cmp	r3, #48	; 0x30
    d4c8:	beq.n	d4be <_strtod_l+0x12e>
    d4ca:	cmp	r3, #0
    d4cc:	beq.n	d406 <_strtod_l+0x76>
    d4ce:	movs	r3, #1
    d4d0:	str	r3, [sp, #24]
    d4d2:	ldr	r3, [sp, #68]	; 0x44
    d4d4:	str	r3, [sp, #36]	; 0x24
    d4d6:	movs	r3, #0
    d4d8:	str	r3, [sp, #20]
    d4da:	str	r3, [sp, #28]
    d4dc:	mov	r6, r3
    d4de:	movs	r2, #10
    d4e0:	ldr	r0, [sp, #68]	; 0x44
    d4e2:	ldrb	r5, [r0, #0]
    d4e4:	sub.w	r3, r5, #48	; 0x30
    d4e8:	uxtb	r1, r3
    d4ea:	cmp	r1, #9
    d4ec:	bls.n	d546 <_strtod_l+0x1b6>
    d4ee:	ldr	r1, [pc, #320]	; (d630 <_strtod_l+0x2a0>)
    d4f0:	movs	r2, #1
    d4f2:	bl	f12c <strncmp>
    d4f6:	cmp	r0, #0
    d4f8:	beq.n	d566 <_strtod_l+0x1d6>
    d4fa:	movs	r0, #0
    d4fc:	mov	r2, r5
    d4fe:	mov	r3, r6
    d500:	mov	fp, r0
    d502:	mov	r1, r0
    d504:	cmp	r2, #101	; 0x65
    d506:	beq.n	d50c <_strtod_l+0x17c>
    d508:	cmp	r2, #69	; 0x45
    d50a:	bne.n	d53e <_strtod_l+0x1ae>
    d50c:	cbnz	r3, d516 <_strtod_l+0x186>
    d50e:	ldr	r3, [sp, #24]
    d510:	orrs	r3, r0
    d512:	beq.n	d43e <_strtod_l+0xae>
    d514:	movs	r3, #0
    d516:	ldr.w	sl, [sp, #68]	; 0x44
    d51a:	add.w	r2, sl, #1
    d51e:	str	r2, [sp, #68]	; 0x44
    d520:	ldrb.w	r2, [sl, #1]
    d524:	cmp	r2, #43	; 0x2b
    d526:	beq.n	d614 <_strtod_l+0x284>
    d528:	cmp	r2, #45	; 0x2d
    d52a:	beq.n	d624 <_strtod_l+0x294>
    d52c:	mov.w	lr, #0
    d530:	sub.w	r5, r2, #48	; 0x30
    d534:	cmp	r5, #9
    d536:	bls.w	d640 <_strtod_l+0x2b0>
    d53a:	str.w	sl, [sp, #68]	; 0x44
    d53e:	movs	r5, #0
    d540:	b.n	d680 <_strtod_l+0x2f0>
    d542:	movs	r3, #0
    d544:	b.n	d4d0 <_strtod_l+0x140>
    d546:	cmp	r6, #8
    d548:	itete	le
    d54a:	ldrle	r1, [sp, #28]
    d54c:	ldrgt	r1, [sp, #20]
    d54e:	mlale	r3, r2, r1, r3
    d552:	mlagt	r3, r2, r1, r3
    d556:	add.w	r0, r0, #1
    d55a:	ite	le
    d55c:	strle	r3, [sp, #28]
    d55e:	strgt	r3, [sp, #20]
    d560:	adds	r6, #1
    d562:	str	r0, [sp, #68]	; 0x44
    d564:	b.n	d4e0 <_strtod_l+0x150>
    d566:	ldr	r3, [sp, #68]	; 0x44
    d568:	adds	r2, r3, #1
    d56a:	str	r2, [sp, #68]	; 0x44
    d56c:	ldrb	r2, [r3, #1]
    d56e:	cbz	r6, d5dc <_strtod_l+0x24c>
    d570:	mov	fp, r0
    d572:	mov	r3, r6
    d574:	sub.w	r1, r2, #48	; 0x30
    d578:	cmp	r1, #9
    d57a:	bls.n	d5a2 <_strtod_l+0x212>
    d57c:	movs	r1, #1
    d57e:	b.n	d504 <_strtod_l+0x174>
    d580:	ldr	r3, [sp, #68]	; 0x44
    d582:	adds	r2, r3, #1
    d584:	str	r2, [sp, #68]	; 0x44
    d586:	ldrb	r2, [r3, #1]
    d588:	adds	r0, #1
    d58a:	cmp	r2, #48	; 0x30
    d58c:	beq.n	d580 <_strtod_l+0x1f0>
    d58e:	sub.w	r3, r2, #49	; 0x31
    d592:	cmp	r3, #8
    d594:	bhi.w	dec2 <_strtod_l+0xb32>
    d598:	ldr	r3, [sp, #68]	; 0x44
    d59a:	str	r3, [sp, #36]	; 0x24
    d59c:	mov	fp, r0
    d59e:	movs	r0, #0
    d5a0:	mov	r3, r0
    d5a2:	subs	r2, #48	; 0x30
    d5a4:	add.w	r1, r0, #1
    d5a8:	beq.n	d5d0 <_strtod_l+0x240>
    d5aa:	add	fp, r1
    d5ac:	add.w	ip, r0, r3
    d5b0:	mov	r1, r3
    d5b2:	movs	r5, #10
    d5b4:	cmp	r1, ip
    d5b6:	bne.n	d5e0 <_strtod_l+0x250>
    d5b8:	adds	r1, r3, r0
    d5ba:	cmp	r1, #8
    d5bc:	add.w	r3, r3, #1
    d5c0:	add	r3, r0
    d5c2:	bgt.n	d5fc <_strtod_l+0x26c>
    d5c4:	ldr	r0, [sp, #28]
    d5c6:	movs	r1, #10
    d5c8:	mla	r2, r1, r0, r2
    d5cc:	str	r2, [sp, #28]
    d5ce:	movs	r1, #0
    d5d0:	ldr	r2, [sp, #68]	; 0x44
    d5d2:	adds	r0, r2, #1
    d5d4:	str	r0, [sp, #68]	; 0x44
    d5d6:	ldrb	r2, [r2, #1]
    d5d8:	mov	r0, r1
    d5da:	b.n	d574 <_strtod_l+0x1e4>
    d5dc:	mov	r0, r6
    d5de:	b.n	d58a <_strtod_l+0x1fa>
    d5e0:	cmp	r1, #8
    d5e2:	add.w	r1, r1, #1
    d5e6:	bgt.n	d5f0 <_strtod_l+0x260>
    d5e8:	ldr	r7, [sp, #28]
    d5ea:	muls	r7, r5
    d5ec:	str	r7, [sp, #28]
    d5ee:	b.n	d5b4 <_strtod_l+0x224>
    d5f0:	cmp	r1, #16
    d5f2:	ittt	le
    d5f4:	ldrle	r7, [sp, #20]
    d5f6:	mulle	r7, r5
    d5f8:	strle	r7, [sp, #20]
    d5fa:	b.n	d5b4 <_strtod_l+0x224>
    d5fc:	cmp	r3, #16
    d5fe:	itttt	le
    d600:	ldrle	r0, [sp, #20]
    d602:	movle	r1, #10
    d604:	mlale	r2, r1, r0, r2
    d608:	strle	r2, [sp, #20]
    d60a:	b.n	d5ce <_strtod_l+0x23e>
    d60c:	mov.w	fp, #0
    d610:	movs	r1, #1
    d612:	b.n	d50e <_strtod_l+0x17e>
    d614:	mov.w	lr, #0
    d618:	add.w	r2, sl, #2
    d61c:	str	r2, [sp, #68]	; 0x44
    d61e:	ldrb.w	r2, [sl, #2]
    d622:	b.n	d530 <_strtod_l+0x1a0>
    d624:	mov.w	lr, #1
    d628:	b.n	d618 <_strtod_l+0x288>
    d62a:	nop
    d62c:	.word	0x20000984
    d630:	.word	0x20000d11
    d634:	.word	0x7ff00000
    d638:	ldr	r2, [sp, #68]	; 0x44
    d63a:	adds	r5, r2, #1
    d63c:	str	r5, [sp, #68]	; 0x44
    d63e:	ldrb	r2, [r2, #1]
    d640:	cmp	r2, #48	; 0x30
    d642:	beq.n	d638 <_strtod_l+0x2a8>
    d644:	sub.w	r5, r2, #49	; 0x31
    d648:	cmp	r5, #8
    d64a:	bhi.w	d53e <_strtod_l+0x1ae>
    d64e:	sub.w	ip, r2, #48	; 0x30
    d652:	ldr	r2, [sp, #68]	; 0x44
    d654:	str	r2, [sp, #40]	; 0x28
    d656:	ldr	r2, [sp, #68]	; 0x44
    d658:	adds	r5, r2, #1
    d65a:	str	r5, [sp, #68]	; 0x44
    d65c:	ldrb	r2, [r2, #1]
    d65e:	sub.w	r7, r2, #48	; 0x30
    d662:	cmp	r7, #9
    d664:	bls.n	d6d6 <_strtod_l+0x346>
    d666:	ldr	r7, [sp, #40]	; 0x28
    d668:	subs	r5, r5, r7
    d66a:	cmp	r5, #8
    d66c:	movw	r5, #19999	; 0x4e1f
    d670:	bgt.n	d678 <_strtod_l+0x2e8>
    d672:	cmp	r5, ip
    d674:	it	ge
    d676:	movge	r5, ip
    d678:	cmp.w	lr, #0
    d67c:	beq.n	d680 <_strtod_l+0x2f0>
    d67e:	negs	r5, r5
    d680:	cmp	r3, #0
    d682:	bne.n	d720 <_strtod_l+0x390>
    d684:	ldr	r3, [sp, #24]
    d686:	orrs	r3, r0
    d688:	bne.w	d406 <_strtod_l+0x76>
    d68c:	cmp	r1, #0
    d68e:	bne.w	d43e <_strtod_l+0xae>
    d692:	cmp	r2, #105	; 0x69
    d694:	beq.n	d6e6 <_strtod_l+0x356>
    d696:	bgt.n	d6e2 <_strtod_l+0x352>
    d698:	cmp	r2, #73	; 0x49
    d69a:	beq.n	d6e6 <_strtod_l+0x356>
    d69c:	cmp	r2, #78	; 0x4e
    d69e:	bne.w	d43e <_strtod_l+0xae>
    d6a2:	ldr	r1, [pc, #596]	; (d8f8 <_strtod_l+0x568>)
    d6a4:	add	r0, sp, #68	; 0x44
    d6a6:	bl	10510 <__match>
    d6aa:	cmp	r0, #0
    d6ac:	beq.w	d43e <_strtod_l+0xae>
    d6b0:	ldr	r3, [sp, #68]	; 0x44
    d6b2:	ldrb	r3, [r3, #0]
    d6b4:	cmp	r3, #40	; 0x28
    d6b6:	bne.n	d714 <_strtod_l+0x384>
    d6b8:	ldr	r1, [pc, #576]	; (d8fc <_strtod_l+0x56c>)
    d6ba:	add	r2, sp, #80	; 0x50
    d6bc:	add	r0, sp, #68	; 0x44
    d6be:	bl	10538 <__hexnan>
    d6c2:	cmp	r0, #5
    d6c4:	bne.n	d714 <_strtod_l+0x384>
    d6c6:	ldr	r3, [sp, #84]	; 0x54
    d6c8:	ldr.w	r8, [sp, #80]	; 0x50
    d6cc:	orr.w	r9, r3, #2139095040	; 0x7f800000
    d6d0:	orr.w	r9, r9, #7340032	; 0x700000
    d6d4:	b.n	d406 <_strtod_l+0x76>
    d6d6:	movs	r5, #10
    d6d8:	mla	ip, r5, ip, r2
    d6dc:	sub.w	ip, ip, #48	; 0x30
    d6e0:	b.n	d656 <_strtod_l+0x2c6>
    d6e2:	cmp	r2, #110	; 0x6e
    d6e4:	b.n	d69e <_strtod_l+0x30e>
    d6e6:	ldr	r1, [pc, #536]	; (d900 <_strtod_l+0x570>)
    d6e8:	add	r0, sp, #68	; 0x44
    d6ea:	bl	10510 <__match>
    d6ee:	cmp	r0, #0
    d6f0:	beq.w	d43e <_strtod_l+0xae>
    d6f4:	ldr	r3, [sp, #68]	; 0x44
    d6f6:	ldr	r1, [pc, #524]	; (d904 <_strtod_l+0x574>)
    d6f8:	subs	r3, #1
    d6fa:	add	r0, sp, #68	; 0x44
    d6fc:	str	r3, [sp, #68]	; 0x44
    d6fe:	bl	10510 <__match>
    d702:	cbnz	r0, d70a <_strtod_l+0x37a>
    d704:	ldr	r3, [sp, #68]	; 0x44
    d706:	adds	r3, #1
    d708:	str	r3, [sp, #68]	; 0x44
    d70a:	ldr.w	r9, [pc, #524]	; d918 <_strtod_l+0x588>
    d70e:	mov.w	r8, #0
    d712:	b.n	d406 <_strtod_l+0x76>
    d714:	ldr	r0, [pc, #496]	; (d908 <_strtod_l+0x578>)
    d716:	bl	f320 <nan>
    d71a:	vmov	r8, r9, d0
    d71e:	b.n	d406 <_strtod_l+0x76>
    d720:	vldr	s15, [sp, #28]
    d724:	sub.w	r2, r5, fp
    d728:	vcvt.f64.u32	d7, s15
    d72c:	cmp	r6, #0
    d72e:	it	eq
    d730:	moveq	r6, r3
    d732:	cmp	r3, #16
    d734:	str	r2, [sp, #24]
    d736:	mov	r2, r3
    d738:	it	ge
    d73a:	movge	r2, #16
    d73c:	cmp	r3, #9
    d73e:	vmov	r8, r9, d7
    d742:	ble.n	d75e <_strtod_l+0x3ce>
    d744:	ldr	r1, [pc, #452]	; (d90c <_strtod_l+0x57c>)
    d746:	vldr	s13, [sp, #20]
    d74a:	add.w	r1, r1, r2, lsl #3
    d74e:	vldr	d5, [r1, #-72]	; 0xffffffb8
    d752:	vcvt.f64.u32	d6, s13
    d756:	vfma.f64	d6, d7, d5
    d75a:	vmov	r8, r9, d6
    d75e:	cmp	r3, #15
    d760:	bgt.n	d7d2 <_strtod_l+0x442>
    d762:	ldr	r1, [sp, #24]
    d764:	cmp	r1, #0
    d766:	beq.w	d406 <_strtod_l+0x76>
    d76a:	ble.n	d7b4 <_strtod_l+0x424>
    d76c:	cmp	r1, #22
    d76e:	bgt.n	d788 <_strtod_l+0x3f8>
    d770:	ldr	r3, [pc, #408]	; (d90c <_strtod_l+0x57c>)
    d772:	add.w	r3, r3, r1, lsl #3
    d776:	vldr	d7, [r3]
    d77a:	vmov	d6, r8, r9
    d77e:	vmul.f64	d7, d7, d6
    d782:	vmov	r8, r9, d7
    d786:	b.n	d406 <_strtod_l+0x76>
    d788:	ldr	r0, [sp, #24]
    d78a:	rsb	r1, r3, #37	; 0x25
    d78e:	cmp	r1, r0
    d790:	blt.n	d7d2 <_strtod_l+0x442>
    d792:	ldr	r2, [pc, #376]	; (d90c <_strtod_l+0x57c>)
    d794:	rsb	r3, r3, #15
    d798:	add.w	r1, r2, r3, lsl #3
    d79c:	vldr	d7, [r1]
    d7a0:	vmov	d6, r8, r9
    d7a4:	subs	r3, r0, r3
    d7a6:	add.w	r2, r2, r3, lsl #3
    d7aa:	vmul.f64	d7, d7, d6
    d7ae:	vldr	d6, [r2]
    d7b2:	b.n	d77e <_strtod_l+0x3ee>
    d7b4:	ldr	r1, [sp, #24]
    d7b6:	adds	r1, #22
    d7b8:	blt.n	d7d2 <_strtod_l+0x442>
    d7ba:	ldr	r3, [pc, #336]	; (d90c <_strtod_l+0x57c>)
    d7bc:	sub.w	r5, fp, r5
    d7c0:	add.w	r5, r3, r5, lsl #3
    d7c4:	vldr	d7, [r5]
    d7c8:	vmov	d6, r8, r9
    d7cc:	vdiv.f64	d7, d6, d7
    d7d0:	b.n	d782 <_strtod_l+0x3f2>
    d7d2:	ldr	r1, [sp, #24]
    d7d4:	subs	r2, r3, r2
    d7d6:	add	r2, r1
    d7d8:	cmp	r2, #0
    d7da:	ble.n	d8ba <_strtod_l+0x52a>
    d7dc:	ands.w	r0, r2, #15
    d7e0:	beq.n	d7f8 <_strtod_l+0x468>
    d7e2:	ldr	r1, [pc, #296]	; (d90c <_strtod_l+0x57c>)
    d7e4:	add.w	r1, r1, r0, lsl #3
    d7e8:	vldr	d7, [r1]
    d7ec:	vmov	d6, r8, r9
    d7f0:	vmul.f64	d7, d7, d6
    d7f4:	vmov	r8, r9, d7
    d7f8:	bics.w	r2, r2, #15
    d7fc:	beq.n	d89c <_strtod_l+0x50c>
    d7fe:	cmp.w	r2, #308	; 0x134
    d802:	ble.n	d84a <_strtod_l+0x4ba>
    d804:	movs	r5, #0
    d806:	mov	r6, r5
    d808:	str	r5, [sp, #28]
    d80a:	mov	r7, r5
    d80c:	movs	r3, #34	; 0x22
    d80e:	ldr.w	r9, [pc, #264]	; d918 <_strtod_l+0x588>
    d812:	str	r3, [r4, #0]
    d814:	mov.w	r8, #0
    d818:	ldr	r3, [sp, #28]
    d81a:	cmp	r3, #0
    d81c:	beq.w	d406 <_strtod_l+0x76>
    d820:	ldr	r1, [sp, #72]	; 0x48
    d822:	mov	r0, r4
    d824:	bl	10714 <_Bfree>
    d828:	mov	r1, r7
    d82a:	mov	r0, r4
    d82c:	bl	10714 <_Bfree>
    d830:	mov	r1, r6
    d832:	mov	r0, r4
    d834:	bl	10714 <_Bfree>
    d838:	ldr	r1, [sp, #28]
    d83a:	mov	r0, r4
    d83c:	bl	10714 <_Bfree>
    d840:	mov	r1, r5
    d842:	mov	r0, r4
    d844:	bl	10714 <_Bfree>
    d848:	b.n	d406 <_strtod_l+0x76>
    d84a:	movs	r0, #0
    d84c:	vmov	d7, r8, r9
    d850:	ldr	r7, [pc, #188]	; (d910 <_strtod_l+0x580>)
    d852:	asrs	r2, r2, #4
    d854:	mov	r1, r0
    d856:	cmp	r2, #1
    d858:	bgt.n	d8a2 <_strtod_l+0x512>
    d85a:	cbz	r0, d860 <_strtod_l+0x4d0>
    d85c:	vmov	r8, r9, d7
    d860:	ldr	r2, [pc, #172]	; (d910 <_strtod_l+0x580>)
    d862:	ldr	r0, [pc, #176]	; (d914 <_strtod_l+0x584>)
    d864:	add.w	r2, r2, r1, lsl #3
    d868:	vldr	d7, [r2]
    d86c:	sub.w	r9, r9, #55574528	; 0x3500000
    d870:	vmov	d6, r8, r9
    d874:	ldr	r2, [pc, #160]	; (d918 <_strtod_l+0x588>)
    d876:	vmul.f64	d7, d7, d6
    d87a:	vmov	r1, s15
    d87e:	ands	r2, r1
    d880:	cmp	r2, r0
    d882:	vmov	r8, r9, d7
    d886:	bhi.n	d804 <_strtod_l+0x474>
    d888:	sub.w	r0, r0, #1048576	; 0x100000
    d88c:	cmp	r2, r0
    d88e:	itte	hi
    d890:	ldrhi.w	r9, [pc, #136]	; d91c <_strtod_l+0x58c>
    d894:	movhi.w	r8, #4294967295
    d898:	addls.w	r9, r1, #55574528	; 0x3500000
    d89c:	movs	r2, #0
    d89e:	str	r2, [sp, #20]
    d8a0:	b.n	d990 <_strtod_l+0x600>
    d8a2:	tst.w	r2, #1
    d8a6:	beq.n	d8b2 <_strtod_l+0x522>
    d8a8:	vldr	d6, [r7]
    d8ac:	movs	r0, #1
    d8ae:	vmul.f64	d7, d7, d6
    d8b2:	adds	r1, #1
    d8b4:	asrs	r2, r2, #1
    d8b6:	adds	r7, #8
    d8b8:	b.n	d856 <_strtod_l+0x4c6>
    d8ba:	beq.n	d89c <_strtod_l+0x50c>
    d8bc:	negs	r2, r2
    d8be:	ands.w	r0, r2, #15
    d8c2:	beq.n	d8da <_strtod_l+0x54a>
    d8c4:	ldr	r1, [pc, #68]	; (d90c <_strtod_l+0x57c>)
    d8c6:	add.w	r1, r1, r0, lsl #3
    d8ca:	vldr	d7, [r1]
    d8ce:	vmov	d6, r8, r9
    d8d2:	vdiv.f64	d7, d6, d7
    d8d6:	vmov	r8, r9, d7
    d8da:	asrs	r2, r2, #4
    d8dc:	beq.n	d89c <_strtod_l+0x50c>
    d8de:	cmp	r2, #31
    d8e0:	ble.n	d920 <_strtod_l+0x590>
    d8e2:	movs	r5, #0
    d8e4:	mov	r6, r5
    d8e6:	str	r5, [sp, #28]
    d8e8:	mov	r7, r5
    d8ea:	movs	r3, #34	; 0x22
    d8ec:	mov.w	r8, #0
    d8f0:	mov.w	r9, #0
    d8f4:	str	r3, [r4, #0]
    d8f6:	b.n	d818 <_strtod_l+0x488>
    d8f8:	.word	0x20001cb9
    d8fc:	.word	0x20000998
    d900:	.word	0x200011c1
    d904:	.word	0x200013c6
    d908:	.word	0x20000df4
    d90c:	.word	0x20000328
    d910:	.word	0x20000300
    d914:	.word	0x7ca00000
    d918:	.word	0x7ff00000
    d91c:	.word	0x7fefffff
    d920:	ands.w	r1, r2, #16
    d924:	it	ne
    d926:	movne	r1, #106	; 0x6a
    d928:	str	r1, [sp, #20]
    d92a:	vmov	d7, r8, r9
    d92e:	ldr	r1, [pc, #760]	; (dc28 <_strtod_l+0x898>)
    d930:	movs	r0, #0
    d932:	lsls	r7, r2, #31
    d934:	bpl.n	d940 <_strtod_l+0x5b0>
    d936:	vldr	d6, [r1]
    d93a:	movs	r0, #1
    d93c:	vmul.f64	d7, d7, d6
    d940:	asrs	r2, r2, #1
    d942:	add.w	r1, r1, #8
    d946:	bne.n	d932 <_strtod_l+0x5a2>
    d948:	cbz	r0, d94e <_strtod_l+0x5be>
    d94a:	vmov	r8, r9, d7
    d94e:	ldr	r2, [sp, #20]
    d950:	cbz	r2, d982 <_strtod_l+0x5f2>
    d952:	ubfx	r1, r9, #20, #11
    d956:	rsb	r2, r1, #107	; 0x6b
    d95a:	cmp	r2, #0
    d95c:	mov	r0, r9
    d95e:	ble.n	d982 <_strtod_l+0x5f2>
    d960:	cmp	r2, #31
    d962:	ble.w	dbbe <_strtod_l+0x82e>
    d966:	cmp	r2, #52	; 0x34
    d968:	ittt	le
    d96a:	movle.w	r2, #4294967295
    d96e:	rsble	r1, r1, #75	; 0x4b
    d972:	lslle	r2, r1
    d974:	mov.w	r8, #0
    d978:	ite	gt
    d97a:	movgt.w	r9, #57671680	; 0x3700000
    d97e:	andle.w	r9, r2, r0
    d982:	vmov	d7, r8, r9
    d986:	vcmp.f64	d7, #0.0
    d98a:	vmrs	APSR_nzcv, fpscr
    d98e:	beq.n	d8e2 <_strtod_l+0x552>
    d990:	ldr	r2, [sp, #28]
    d992:	str	r2, [sp, #0]
    d994:	ldr	r1, [sp, #36]	; 0x24
    d996:	mov	r2, r6
    d998:	mov	r0, r4
    d99a:	bl	107e4 <__s2b>
    d99e:	str	r0, [sp, #28]
    d9a0:	cmp	r0, #0
    d9a2:	beq.w	d804 <_strtod_l+0x474>
    d9a6:	ldr	r2, [sp, #24]
    d9a8:	cmp	r2, #0
    d9aa:	sub.w	r3, fp, r5
    d9ae:	vldr	d9, [pc, #600]	; dc08 <_strtod_l+0x878>
    d9b2:	it	ge
    d9b4:	movge	r3, #0
    d9b6:	vldr	d10, [pc, #600]	; dc10 <_strtod_l+0x880>
    d9ba:	vldr	d11, [pc, #604]	; dc18 <_strtod_l+0x888>
    d9be:	str	r3, [sp, #36]	; 0x24
    d9c0:	movs	r5, #0
    d9c2:	bic.w	r3, r2, r2, asr #31
    d9c6:	str	r3, [sp, #48]	; 0x30
    d9c8:	mov	r6, r5
    d9ca:	ldr	r3, [sp, #28]
    d9cc:	mov	r0, r4
    d9ce:	ldr	r1, [r3, #4]
    d9d0:	bl	10694 <_Balloc>
    d9d4:	mov	r7, r0
    d9d6:	cmp	r0, #0
    d9d8:	beq.w	d80c <_strtod_l+0x47c>
    d9dc:	ldr	r3, [sp, #28]
    d9de:	ldr	r2, [r3, #16]
    d9e0:	adds	r2, #2
    d9e2:	add.w	r1, r3, #12
    d9e6:	lsls	r2, r2, #2
    d9e8:	adds	r0, #12
    d9ea:	bl	a79c <memcpy>
    d9ee:	vmov	d0, r8, r9
    d9f2:	add	r2, sp, #80	; 0x50
    d9f4:	add	r1, sp, #76	; 0x4c
    d9f6:	mov	r0, r4
    d9f8:	bl	10e4c <__d2b>
    d9fc:	vmov	d8, r8, r9
    da00:	str	r0, [sp, #72]	; 0x48
    da02:	cmp	r0, #0
    da04:	beq.w	d80c <_strtod_l+0x47c>
    da08:	movs	r1, #1
    da0a:	mov	r0, r4
    da0c:	bl	10914 <__i2b>
    da10:	mov	r6, r0
    da12:	cmp	r0, #0
    da14:	beq.w	d80c <_strtod_l+0x47c>
    da18:	ldr	r3, [sp, #76]	; 0x4c
    da1a:	ldr	r1, [sp, #80]	; 0x50
    da1c:	cmp	r3, #0
    da1e:	itete	ge
    da20:	ldrge	r2, [sp, #36]	; 0x24
    da22:	ldrlt	r2, [sp, #48]	; 0x30
    da24:	ldrge.w	sl, [sp, #48]	; 0x30
    da28:	ldrlt.w	fp, [sp, #36]	; 0x24
    da2c:	ite	ge
    da2e:	addge.w	fp, r3, r2
    da32:	sublt.w	sl, r2, r3
    da36:	ldr	r2, [sp, #20]
    da38:	subs	r3, r3, r2
    da3a:	add	r3, r1
    da3c:	ldr	r2, [pc, #492]	; (dc2c <_strtod_l+0x89c>)
    da3e:	subs	r3, #1
    da40:	cmp	r3, r2
    da42:	rsb	r1, r1, #54	; 0x36
    da46:	bge.w	dbe4 <_strtod_l+0x854>
    da4a:	subs	r2, r2, r3
    da4c:	cmp	r2, #31
    da4e:	sub.w	r1, r1, r2
    da52:	mov.w	r0, #1
    da56:	bgt.w	dbcc <_strtod_l+0x83c>
    da5a:	lsl.w	r3, r0, r2
    da5e:	str	r3, [sp, #44]	; 0x2c
    da60:	movs	r3, #0
    da62:	str	r3, [sp, #40]	; 0x28
    da64:	add.w	r3, fp, r1
    da68:	ldr	r2, [sp, #20]
    da6a:	cmp	fp, r3
    da6c:	add	sl, r1
    da6e:	add	sl, r2
    da70:	mov	r2, fp
    da72:	it	ge
    da74:	movge	r2, r3
    da76:	cmp	r2, sl
    da78:	it	ge
    da7a:	movge	r2, sl
    da7c:	cmp	r2, #0
    da7e:	ittt	gt
    da80:	subgt	r3, r3, r2
    da82:	subgt.w	sl, sl, r2
    da86:	subgt.w	fp, fp, r2
    da8a:	ldr	r2, [sp, #36]	; 0x24
    da8c:	cmp	r2, #0
    da8e:	ble.n	dac2 <_strtod_l+0x732>
    da90:	mov	r1, r6
    da92:	mov	r0, r4
    da94:	str	r3, [sp, #60]	; 0x3c
    da96:	bl	10a94 <__pow5mult>
    da9a:	mov	r6, r0
    da9c:	cmp	r0, #0
    da9e:	beq.w	d80c <_strtod_l+0x47c>
    daa2:	mov	r1, r0
    daa4:	ldr	r2, [sp, #72]	; 0x48
    daa6:	mov	r0, r4
    daa8:	bl	10940 <__multiply>
    daac:	str	r0, [sp, #56]	; 0x38
    daae:	cmp	r0, #0
    dab0:	beq.w	d80c <_strtod_l+0x47c>
    dab4:	ldr	r1, [sp, #72]	; 0x48
    dab6:	mov	r0, r4
    dab8:	bl	10714 <_Bfree>
    dabc:	ldr	r2, [sp, #56]	; 0x38
    dabe:	ldr	r3, [sp, #60]	; 0x3c
    dac0:	str	r2, [sp, #72]	; 0x48
    dac2:	cmp	r3, #0
    dac4:	bgt.w	dbee <_strtod_l+0x85e>
    dac8:	ldr	r3, [sp, #24]
    daca:	cmp	r3, #0
    dacc:	ble.n	dae0 <_strtod_l+0x750>
    dace:	mov	r1, r7
    dad0:	ldr	r2, [sp, #48]	; 0x30
    dad2:	mov	r0, r4
    dad4:	bl	10a94 <__pow5mult>
    dad8:	mov	r7, r0
    dada:	cmp	r0, #0
    dadc:	beq.w	d80c <_strtod_l+0x47c>
    dae0:	cmp.w	sl, #0
    dae4:	ble.n	daf8 <_strtod_l+0x768>
    dae6:	mov	r1, r7
    dae8:	mov	r2, sl
    daea:	mov	r0, r4
    daec:	bl	10b48 <__lshift>
    daf0:	mov	r7, r0
    daf2:	cmp	r0, #0
    daf4:	beq.w	d80c <_strtod_l+0x47c>
    daf8:	cmp.w	fp, #0
    dafc:	ble.n	db10 <_strtod_l+0x780>
    dafe:	mov	r1, r6
    db00:	mov	r2, fp
    db02:	mov	r0, r4
    db04:	bl	10b48 <__lshift>
    db08:	mov	r6, r0
    db0a:	cmp	r0, #0
    db0c:	beq.w	d80c <_strtod_l+0x47c>
    db10:	ldr	r1, [sp, #72]	; 0x48
    db12:	mov	r2, r7
    db14:	mov	r0, r4
    db16:	bl	10c58 <__mdiff>
    db1a:	mov	r5, r0
    db1c:	cmp	r0, #0
    db1e:	beq.w	d80c <_strtod_l+0x47c>
    db22:	movs	r3, #0
    db24:	ldr.w	sl, [r0, #12]
    db28:	str	r3, [r0, #12]
    db2a:	mov	r1, r6
    db2c:	bl	10c20 <__mcmp>
    db30:	cmp	r0, #0
    db32:	bge.n	dc34 <_strtod_l+0x8a4>
    db34:	orrs.w	sl, sl, r8
    db38:	bne.w	dc86 <_strtod_l+0x8f6>
    db3c:	ubfx	r3, r9, #0, #20
    db40:	cmp	r3, #0
    db42:	bne.w	dc86 <_strtod_l+0x8f6>
    db46:	bic.w	r3, r9, #2147483648	; 0x80000000
    db4a:	lsrs	r3, r3, #20
    db4c:	lsls	r3, r3, #20
    db4e:	cmp.w	r3, #112197632	; 0x6b00000
    db52:	bls.w	dc86 <_strtod_l+0x8f6>
    db56:	ldr	r3, [r5, #20]
    db58:	cbnz	r3, db62 <_strtod_l+0x7d2>
    db5a:	ldr	r3, [r5, #16]
    db5c:	cmp	r3, #1
    db5e:	ble.w	dc86 <_strtod_l+0x8f6>
    db62:	mov	r1, r5
    db64:	movs	r2, #1
    db66:	mov	r0, r4
    db68:	bl	10b48 <__lshift>
    db6c:	mov	r1, r6
    db6e:	mov	r5, r0
    db70:	bl	10c20 <__mcmp>
    db74:	cmp	r0, #0
    db76:	ble.w	dc86 <_strtod_l+0x8f6>
    db7a:	ldr	r1, [sp, #20]
    db7c:	ldr	r2, [pc, #176]	; (dc30 <_strtod_l+0x8a0>)
    db7e:	mov	r3, r9
    db80:	cmp	r1, #0
    db82:	beq.w	dcc4 <_strtod_l+0x934>
    db86:	and.w	r1, r2, r9
    db8a:	cmp.w	r1, #112197632	; 0x6b00000
    db8e:	bgt.w	dcc4 <_strtod_l+0x934>
    db92:	cmp.w	r1, #57671680	; 0x3700000
    db96:	ble.w	d8ea <_strtod_l+0x55a>
    db9a:	vldr	d7, [pc, #132]	; dc20 <_strtod_l+0x890>
    db9e:	vmov	d6, r8, r9
    dba2:	ldr	r3, [pc, #140]	; (dc30 <_strtod_l+0x8a0>)
    dba4:	vmul.f64	d7, d6, d7
    dba8:	vmov	r2, s15
    dbac:	ands	r3, r2
    dbae:	vmov	r8, r9, d7
    dbb2:	cmp	r3, #0
    dbb4:	bne.w	d820 <_strtod_l+0x490>
    dbb8:	movs	r3, #34	; 0x22
    dbba:	str	r3, [r4, #0]
    dbbc:	b.n	d820 <_strtod_l+0x490>
    dbbe:	mov.w	r1, #4294967295
    dbc2:	lsl.w	r2, r1, r2
    dbc6:	and.w	r8, r2, r8
    dbca:	b.n	d982 <_strtod_l+0x5f2>
    dbcc:	rsb	r3, r3, #4278190080	; 0xff000000
    dbd0:	add.w	r3, r3, #16711680	; 0xff0000
    dbd4:	add.w	r3, r3, #64256	; 0xfb00
    dbd8:	adds	r3, #226	; 0xe2
    dbda:	lsl.w	r3, r0, r3
    dbde:	strd	r3, r0, [sp, #40]	; 0x28
    dbe2:	b.n	da64 <_strtod_l+0x6d4>
    dbe4:	movs	r2, #0
    dbe6:	movs	r3, #1
    dbe8:	strd	r2, r3, [sp, #40]	; 0x28
    dbec:	b.n	da64 <_strtod_l+0x6d4>
    dbee:	ldr	r1, [sp, #72]	; 0x48
    dbf0:	mov	r2, r3
    dbf2:	mov	r0, r4
    dbf4:	bl	10b48 <__lshift>
    dbf8:	str	r0, [sp, #72]	; 0x48
    dbfa:	cmp	r0, #0
    dbfc:	bne.w	dac8 <_strtod_l+0x738>
    dc00:	b.n	d80c <_strtod_l+0x47c>
    dc02:	nop
    dc04:	nop.w
    dc08:	.word	0x94a03595
    dc0c:	.word	0x3fcfffff
    dc10:	.word	0x94a03595
    dc14:	.word	0x3fdfffff
    dc18:	.word	0x35afe535
    dc1c:	.word	0x3fe00000
    dc20:	.word	0x00000000
    dc24:	.word	0x39500000
    dc28:	.word	0x200003f0
    dc2c:	.word	0xfffffc02
    dc30:	.word	0x7ff00000
    dc34:	mov	fp, r9
    dc36:	bne.n	dcf8 <_strtod_l+0x968>
    dc38:	ubfx	r3, r9, #0, #20
    dc3c:	cmp.w	sl, #0
    dc40:	beq.n	dc98 <_strtod_l+0x908>
    dc42:	ldr	r2, [pc, #668]	; (dee0 <_strtod_l+0xb50>)
    dc44:	cmp	r3, r2
    dc46:	bne.n	dca0 <_strtod_l+0x910>
    dc48:	ldr	r3, [sp, #20]
    dc4a:	mov	r2, r8
    dc4c:	cbz	r3, dc8e <_strtod_l+0x8fe>
    dc4e:	ldr	r3, [pc, #660]	; (dee4 <_strtod_l+0xb54>)
    dc50:	and.w	r3, r9, r3
    dc54:	cmp.w	r3, #111149056	; 0x6a00000
    dc58:	mov.w	r1, #4294967295
    dc5c:	bhi.n	dc94 <_strtod_l+0x904>
    dc5e:	lsrs	r3, r3, #20
    dc60:	rsb	r3, r3, #107	; 0x6b
    dc64:	lsl.w	r3, r1, r3
    dc68:	cmp	r2, r3
    dc6a:	bne.n	dca0 <_strtod_l+0x910>
    dc6c:	ldr	r3, [pc, #632]	; (dee8 <_strtod_l+0xb58>)
    dc6e:	cmp	fp, r3
    dc70:	bne.n	dc78 <_strtod_l+0x8e8>
    dc72:	adds	r2, #1
    dc74:	beq.w	d80c <_strtod_l+0x47c>
    dc78:	ldr	r3, [pc, #616]	; (dee4 <_strtod_l+0xb54>)
    dc7a:	and.w	r3, fp, r3
    dc7e:	add.w	r9, r3, #1048576	; 0x100000
    dc82:	mov.w	r8, #0
    dc86:	ldr	r3, [sp, #20]
    dc88:	cmp	r3, #0
    dc8a:	bne.n	db9a <_strtod_l+0x80a>
    dc8c:	b.n	d820 <_strtod_l+0x490>
    dc8e:	mov.w	r3, #4294967295
    dc92:	b.n	dc68 <_strtod_l+0x8d8>
    dc94:	mov	r3, r1
    dc96:	b.n	dc68 <_strtod_l+0x8d8>
    dc98:	orrs.w	r3, r3, r8
    dc9c:	beq.w	db7a <_strtod_l+0x7ea>
    dca0:	ldr	r3, [sp, #40]	; 0x28
    dca2:	cbz	r3, dcd8 <_strtod_l+0x948>
    dca4:	tst.w	r3, fp
    dca8:	beq.n	dc86 <_strtod_l+0x8f6>
    dcaa:	ldr	r2, [sp, #20]
    dcac:	mov	r0, r8
    dcae:	mov	r1, r9
    dcb0:	cmp.w	sl, #0
    dcb4:	beq.n	dce0 <_strtod_l+0x950>
    dcb6:	bl	d35a <sulp>
    dcba:	vadd.f64	d7, d8, d0
    dcbe:	vmov	r8, r9, d7
    dcc2:	b.n	dc86 <_strtod_l+0x8f6>
    dcc4:	ands	r3, r2
    dcc6:	sub.w	r3, r3, #1048576	; 0x100000
    dcca:	mvn.w	r9, r3, lsr #20
    dcce:	mvn.w	r9, r9, lsl #20
    dcd2:	mov.w	r8, #4294967295
    dcd6:	b.n	dc86 <_strtod_l+0x8f6>
    dcd8:	ldr	r3, [sp, #44]	; 0x2c
    dcda:	tst.w	r3, r8
    dcde:	b.n	dca8 <_strtod_l+0x918>
    dce0:	bl	d35a <sulp>
    dce4:	vsub.f64	d0, d8, d0
    dce8:	vcmp.f64	d0, #0.0
    dcec:	vmrs	APSR_nzcv, fpscr
    dcf0:	vmov	r8, r9, d0
    dcf4:	bne.n	dc86 <_strtod_l+0x8f6>
    dcf6:	b.n	d8ea <_strtod_l+0x55a>
    dcf8:	mov	r1, r6
    dcfa:	mov	r0, r5
    dcfc:	bl	10f00 <__ratio>
    dd00:	vmov.f64	d7, #0	; 0x40000000  2.0
    dd04:	vcmpe.f64	d0, d7
    dd08:	vmrs	APSR_nzcv, fpscr
    dd0c:	bhi.n	ddce <_strtod_l+0xa3e>
    dd0e:	cmp.w	sl, #0
    dd12:	bne.n	dde2 <_strtod_l+0xa52>
    dd14:	cmp.w	r8, #0
    dd18:	bne.n	ddb6 <_strtod_l+0xa26>
    dd1a:	ubfx	r3, r9, #0, #20
    dd1e:	vmov.f64	d13, #112	; 0x3f800000  1.0
    dd22:	cmp	r3, #0
    dd24:	bne.n	ddec <_strtod_l+0xa5c>
    dd26:	vcmpe.f64	d0, d13
    dd2a:	vmov.f64	d13, #96	; 0x3f000000  0.5
    dd2e:	vmrs	APSR_nzcv, fpscr
    dd32:	bmi.n	dd38 <_strtod_l+0x9a8>
    dd34:	vmul.f64	d13, d0, d13
    dd38:	vneg.f64	d12, d13
    dd3c:	ldr	r0, [pc, #420]	; (dee4 <_strtod_l+0xb54>)
    dd3e:	ldr.w	ip, [pc, #432]	; def0 <_strtod_l+0xb60>
    dd42:	and.w	r1, fp, r0
    dd46:	cmp	r1, ip
    dd48:	vmov	r2, r3, d12
    dd4c:	bne.n	de44 <_strtod_l+0xab4>
    dd4e:	sub.w	r9, fp, #55574528	; 0x3500000
    dd52:	vmov	d0, r8, r9
    dd56:	str	r1, [sp, #40]	; 0x28
    dd58:	bl	10d6c <__ulp>
    dd5c:	vmov	d14, r8, r9
    dd60:	ldr	r0, [pc, #384]	; (dee4 <_strtod_l+0xb54>)
    dd62:	vfma.f64	d14, d0, d12
    dd66:	vmov	r3, s29
    dd6a:	ldr	r2, [pc, #384]	; (deec <_strtod_l+0xb5c>)
    dd6c:	ldr	r1, [sp, #40]	; 0x28
    dd6e:	ands	r0, r3
    dd70:	cmp	r0, r2
    dd72:	vmov	r8, r9, d14
    dd76:	bls.n	ddf2 <_strtod_l+0xa62>
    dd78:	vmov	r2, s17
    dd7c:	ldr	r3, [pc, #360]	; (dee8 <_strtod_l+0xb58>)
    dd7e:	cmp	r2, r3
    dd80:	bne.n	dd8c <_strtod_l+0x9fc>
    dd82:	vmov	r3, s16
    dd86:	adds	r3, #1
    dd88:	beq.w	d80c <_strtod_l+0x47c>
    dd8c:	ldr.w	r9, [pc, #344]	; dee8 <_strtod_l+0xb58>
    dd90:	mov.w	r8, #4294967295
    dd94:	ldr	r1, [sp, #72]	; 0x48
    dd96:	mov	r0, r4
    dd98:	bl	10714 <_Bfree>
    dd9c:	mov	r1, r7
    dd9e:	mov	r0, r4
    dda0:	bl	10714 <_Bfree>
    dda4:	mov	r1, r6
    dda6:	mov	r0, r4
    dda8:	bl	10714 <_Bfree>
    ddac:	mov	r1, r5
    ddae:	mov	r0, r4
    ddb0:	bl	10714 <_Bfree>
    ddb4:	b.n	d9ca <_strtod_l+0x63a>
    ddb6:	cmp.w	r8, #1
    ddba:	bne.n	ddc4 <_strtod_l+0xa34>
    ddbc:	cmp.w	r9, #0
    ddc0:	beq.w	d8ea <_strtod_l+0x55a>
    ddc4:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    ddc8:	vmov.f64	d13, #112	; 0x3f800000  1.0
    ddcc:	b.n	dd3c <_strtod_l+0x9ac>
    ddce:	vmov.f64	d13, #96	; 0x3f000000  0.5
    ddd2:	vmul.f64	d13, d0, d13
    ddd6:	cmp.w	sl, #0
    ddda:	beq.n	dd38 <_strtod_l+0x9a8>
    dddc:	vmov.f64	d12, d13
    dde0:	b.n	dd3c <_strtod_l+0x9ac>
    dde2:	vmov.f64	d12, #112	; 0x3f800000  1.0
    dde6:	vmov.f64	d13, d12
    ddea:	b.n	dd3c <_strtod_l+0x9ac>
    ddec:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    ddf0:	b.n	dd3c <_strtod_l+0x9ac>
    ddf2:	add.w	r9, r3, #55574528	; 0x3500000
    ddf6:	ldr	r3, [sp, #20]
    ddf8:	mov	fp, r9
    ddfa:	cmp	r3, #0
    ddfc:	bne.n	dd94 <_strtod_l+0xa04>
    ddfe:	bic.w	r3, r9, #2147483648	; 0x80000000
    de02:	lsrs	r3, r3, #20
    de04:	lsls	r3, r3, #20
    de06:	cmp	r1, r3
    de08:	bne.n	dd94 <_strtod_l+0xa04>
    de0a:	vmov	r0, r1, d13
    de0e:	bl	12584 <__aeabi_d2lz>
    de12:	bl	12528 <__aeabi_l2d>
    de16:	ubfx	fp, r9, #0, #20
    de1a:	vmov	d7, r0, r1
    de1e:	orr.w	fp, fp, r8
    de22:	orrs.w	fp, fp, sl
    de26:	vsub.f64	d13, d13, d7
    de2a:	beq.n	dea6 <_strtod_l+0xb16>
    de2c:	vcmpe.f64	d13, d10
    de30:	vmrs	APSR_nzcv, fpscr
    de34:	bmi.w	d820 <_strtod_l+0x490>
    de38:	vcmpe.f64	d13, d11
    de3c:	vmrs	APSR_nzcv, fpscr
    de40:	ble.n	dd94 <_strtod_l+0xa04>
    de42:	b.n	d820 <_strtod_l+0x490>
    de44:	ldr	r0, [sp, #20]
    de46:	cbz	r0, de86 <_strtod_l+0xaf6>
    de48:	cmp.w	r1, #111149056	; 0x6a00000
    de4c:	bhi.n	de86 <_strtod_l+0xaf6>
    de4e:	vldr	d7, [pc, #136]	; ded8 <_strtod_l+0xb48>
    de52:	vcmpe.f64	d13, d7
    de56:	vmrs	APSR_nzcv, fpscr
    de5a:	bhi.n	de80 <_strtod_l+0xaf0>
    de5c:	vcvt.u32.f64	s26, d13
    de60:	vmov	r3, s26
    de64:	cmp	r3, #1
    de66:	it	cc
    de68:	movcc	r3, #1
    de6a:	vmov	s26, r3
    de6e:	vcvt.f64.u32	d13, s26
    de72:	cmp.w	sl, #0
    de76:	bne.n	dea0 <_strtod_l+0xb10>
    de78:	vneg.f64	d7, d13
    de7c:	vmov	r2, r3, d7
    de80:	add.w	r0, r3, #112197632	; 0x6b00000
    de84:	subs	r3, r0, r1
    de86:	vmov.f64	d0, d8
    de8a:	vmov	d12, r2, r3
    de8e:	str	r1, [sp, #40]	; 0x28
    de90:	bl	10d6c <__ulp>
    de94:	ldr	r1, [sp, #40]	; 0x28
    de96:	vfma.f64	d8, d12, d0
    de9a:	vmov	r8, r9, d8
    de9e:	b.n	ddf6 <_strtod_l+0xa66>
    dea0:	vmov.f64	d7, d13
    dea4:	b.n	de7c <_strtod_l+0xaec>
    dea6:	vcmpe.f64	d13, d9
    deaa:	vmrs	APSR_nzcv, fpscr
    deae:	bpl.w	dd94 <_strtod_l+0xa04>
    deb2:	b.n	d820 <_strtod_l+0x490>
    deb4:	movs	r3, #0
    deb6:	str	r3, [sp, #32]
    deb8:	ldr	r2, [sp, #52]	; 0x34
    deba:	ldr	r3, [sp, #68]	; 0x44
    debc:	str	r3, [r2, #0]
    debe:	b.w	d40e <_strtod_l+0x7e>
    dec2:	cmp	r2, #101	; 0x65
    dec4:	beq.w	d60c <_strtod_l+0x27c>
    dec8:	cmp	r2, #69	; 0x45
    deca:	beq.w	d60c <_strtod_l+0x27c>
    dece:	movs	r1, #1
    ded0:	b.w	d684 <_strtod_l+0x2f4>
    ded4:	nop.w
    ded8:	.word	0xffc00000
    dedc:	.word	0x41dfffff
    dee0:	.word	0x000fffff
    dee4:	.word	0x7ff00000
    dee8:	.word	0x7fefffff
    deec:	.word	0x7c9fffff
    def0:	.word	0x7fe00000

0000def4 <_strtod_r>:
    def4:	ldr	r3, [pc, #4]	; (defc <_strtod_r+0x8>)
    def6:	b.w	d390 <_strtod_l>
    defa:	nop
    defc:	.word	0x20002194

0000df00 <_strtol_l.constprop.0>:
    df00:	cmp	r3, #1
    df02:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df06:	beq.n	df0c <_strtol_l.constprop.0+0xc>
    df08:	cmp	r3, #36	; 0x24
    df0a:	bls.n	df1a <_strtol_l.constprop.0+0x1a>
    df0c:	bl	f204 <__errno>
    df10:	movs	r3, #22
    df12:	str	r3, [r0, #0]
    df14:	movs	r0, #0
    df16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    df1a:	ldr.w	ip, [pc, #228]	; e000 <_strtol_l.constprop.0+0x100>
    df1e:	mov	r5, r1
    df20:	mov	r6, r5
    df22:	ldrb.w	r4, [r5], #1
    df26:	ldrb.w	r7, [ip, r4]
    df2a:	ands.w	r7, r7, #8
    df2e:	bne.n	df20 <_strtol_l.constprop.0+0x20>
    df30:	cmp	r4, #45	; 0x2d
    df32:	bne.n	df9a <_strtol_l.constprop.0+0x9a>
    df34:	ldrb	r4, [r5, #0]
    df36:	movs	r7, #1
    df38:	adds	r5, r6, #2
    df3a:	cmp	r3, #0
    df3c:	beq.n	dff6 <_strtol_l.constprop.0+0xf6>
    df3e:	cmp	r3, #16
    df40:	bne.n	df56 <_strtol_l.constprop.0+0x56>
    df42:	cmp	r4, #48	; 0x30
    df44:	bne.n	df56 <_strtol_l.constprop.0+0x56>
    df46:	ldrb	r4, [r5, #0]
    df48:	and.w	r4, r4, #223	; 0xdf
    df4c:	cmp	r4, #88	; 0x58
    df4e:	bne.n	dfec <_strtol_l.constprop.0+0xec>
    df50:	ldrb	r4, [r5, #1]
    df52:	movs	r3, #16
    df54:	adds	r5, #2
    df56:	add.w	r8, r7, #2147483648	; 0x80000000
    df5a:	add.w	r8, r8, #4294967295
    df5e:	mov.w	lr, #0
    df62:	udiv	r9, r8, r3
    df66:	mov	r6, lr
    df68:	mls	sl, r3, r9, r8
    df6c:	sub.w	ip, r4, #48	; 0x30
    df70:	cmp.w	ip, #9
    df74:	bhi.n	dfa4 <_strtol_l.constprop.0+0xa4>
    df76:	mov	r4, ip
    df78:	cmp	r3, r4
    df7a:	ble.n	dfc6 <_strtol_l.constprop.0+0xc6>
    df7c:	cmp.w	lr, #4294967295
    df80:	beq.n	df94 <_strtol_l.constprop.0+0x94>
    df82:	cmp	r9, r6
    df84:	bcc.n	dfc0 <_strtol_l.constprop.0+0xc0>
    df86:	bne.n	df8c <_strtol_l.constprop.0+0x8c>
    df88:	cmp	sl, r4
    df8a:	blt.n	dfc0 <_strtol_l.constprop.0+0xc0>
    df8c:	mla	r6, r6, r3, r4
    df90:	mov.w	lr, #1
    df94:	ldrb.w	r4, [r5], #1
    df98:	b.n	df6c <_strtol_l.constprop.0+0x6c>
    df9a:	cmp	r4, #43	; 0x2b
    df9c:	itt	eq
    df9e:	ldrbeq	r4, [r5, #0]
    dfa0:	addeq	r5, r6, #2
    dfa2:	b.n	df3a <_strtol_l.constprop.0+0x3a>
    dfa4:	sub.w	ip, r4, #65	; 0x41
    dfa8:	cmp.w	ip, #25
    dfac:	bhi.n	dfb2 <_strtol_l.constprop.0+0xb2>
    dfae:	subs	r4, #55	; 0x37
    dfb0:	b.n	df78 <_strtol_l.constprop.0+0x78>
    dfb2:	sub.w	ip, r4, #97	; 0x61
    dfb6:	cmp.w	ip, #25
    dfba:	bhi.n	dfc6 <_strtol_l.constprop.0+0xc6>
    dfbc:	subs	r4, #87	; 0x57
    dfbe:	b.n	df78 <_strtol_l.constprop.0+0x78>
    dfc0:	mov.w	lr, #4294967295
    dfc4:	b.n	df94 <_strtol_l.constprop.0+0x94>
    dfc6:	cmp.w	lr, #4294967295
    dfca:	bne.n	dfd8 <_strtol_l.constprop.0+0xd8>
    dfcc:	movs	r3, #34	; 0x22
    dfce:	str	r3, [r0, #0]
    dfd0:	mov	r6, r8
    dfd2:	cbnz	r2, dfe6 <_strtol_l.constprop.0+0xe6>
    dfd4:	mov	r0, r6
    dfd6:	b.n	df16 <_strtol_l.constprop.0+0x16>
    dfd8:	cbz	r7, dfdc <_strtol_l.constprop.0+0xdc>
    dfda:	negs	r6, r6
    dfdc:	cmp	r2, #0
    dfde:	beq.n	dfd4 <_strtol_l.constprop.0+0xd4>
    dfe0:	cmp.w	lr, #0
    dfe4:	beq.n	dfe8 <_strtol_l.constprop.0+0xe8>
    dfe6:	subs	r1, r5, #1
    dfe8:	str	r1, [r2, #0]
    dfea:	b.n	dfd4 <_strtol_l.constprop.0+0xd4>
    dfec:	movs	r4, #48	; 0x30
    dfee:	cmp	r3, #0
    dff0:	bne.n	df56 <_strtol_l.constprop.0+0x56>
    dff2:	movs	r3, #8
    dff4:	b.n	df56 <_strtol_l.constprop.0+0x56>
    dff6:	cmp	r4, #48	; 0x30
    dff8:	beq.n	df46 <_strtol_l.constprop.0+0x46>
    dffa:	movs	r3, #10
    dffc:	b.n	df56 <_strtol_l.constprop.0+0x56>
    dffe:	nop
    e000:	.word	0x200012c3

0000e004 <_strtol_r>:
    e004:	b.w	df00 <_strtol_l.constprop.0>

0000e008 <__cxa_atexit>:
    e008:	push	{r4, lr}
    e00a:	ldr	r4, [pc, #20]	; (e020 <__cxa_atexit+0x18>)
    e00c:	mov	r3, r2
    e00e:	cbz	r4, e01c <__cxa_atexit+0x14>
    e010:	mov	r2, r1
    e012:	mov	r1, r0
    e014:	movs	r0, #2
    e016:	nop.w
    e01a:	pop	{r4, pc}
    e01c:	mov	r0, r4
    e01e:	b.n	e01a <__cxa_atexit+0x12>
    e020:	.word	0x00000000

0000e024 <fcvt>:
    e024:	movs	r3, #0
    e026:	b.w	11014 <fcvtbuf>

0000e02a <fcvtf>:
    e02a:	vcvt.f64.f32	d0, s0
    e02e:	b.w	e024 <fcvt>

0000e032 <__cvt>:
    e032:	push	{r4, r5, r6, r7, lr}
    e034:	vpush	{d8}
    e038:	vmov.f64	d8, d0
    e03c:	sub	sp, #20
    e03e:	mov	r7, r2
    e040:	ldr	r5, [sp, #52]	; 0x34
    e042:	ldr	r6, [sp, #48]	; 0x30
    e044:	vmov	r2, s17
    e048:	bic.w	r5, r5, #32
    e04c:	cmp	r2, #0
    e04e:	itet	lt
    e050:	movlt	r2, #45	; 0x2d
    e052:	movge	r2, #0
    e054:	vneglt.f64	d8, d0
    e058:	cmp	r5, #70	; 0x46
    e05a:	mov	r4, r1
    e05c:	strb	r2, [r3, #0]
    e05e:	beq.n	e06a <__cvt+0x38>
    e060:	cmp	r5, #69	; 0x45
    e062:	bne.n	e066 <__cvt+0x34>
    e064:	adds	r4, #1
    e066:	movs	r1, #2
    e068:	b.n	e06c <__cvt+0x3a>
    e06a:	movs	r1, #3
    e06c:	add	r3, sp, #12
    e06e:	str	r3, [sp, #4]
    e070:	add	r3, sp, #8
    e072:	str	r3, [sp, #0]
    e074:	mov	r2, r4
    e076:	mov	r3, r6
    e078:	vmov.f64	d0, d8
    e07c:	bl	f450 <_dtoa_r>
    e080:	cmp	r5, #71	; 0x47
    e082:	bne.n	e088 <__cvt+0x56>
    e084:	lsls	r3, r7, #31
    e086:	bpl.n	e0be <__cvt+0x8c>
    e088:	cmp	r5, #70	; 0x46
    e08a:	add.w	r2, r0, r4
    e08e:	bne.n	e0aa <__cvt+0x78>
    e090:	ldrb	r3, [r0, #0]
    e092:	cmp	r3, #48	; 0x30
    e094:	bne.n	e0a6 <__cvt+0x74>
    e096:	vcmp.f64	d8, #0.0
    e09a:	vmrs	APSR_nzcv, fpscr
    e09e:	itt	ne
    e0a0:	rsbne	r4, r4, #1
    e0a4:	strne	r4, [r6, #0]
    e0a6:	ldr	r3, [r6, #0]
    e0a8:	add	r2, r3
    e0aa:	vcmp.f64	d8, #0.0
    e0ae:	vmrs	APSR_nzcv, fpscr
    e0b2:	it	eq
    e0b4:	streq	r2, [sp, #12]
    e0b6:	movs	r1, #48	; 0x30
    e0b8:	ldr	r3, [sp, #12]
    e0ba:	cmp	r3, r2
    e0bc:	bcc.n	e0ce <__cvt+0x9c>
    e0be:	ldr	r3, [sp, #12]
    e0c0:	ldr	r2, [sp, #56]	; 0x38
    e0c2:	subs	r3, r3, r0
    e0c4:	str	r3, [r2, #0]
    e0c6:	add	sp, #20
    e0c8:	vpop	{d8}
    e0cc:	pop	{r4, r5, r6, r7, pc}
    e0ce:	adds	r4, r3, #1
    e0d0:	str	r4, [sp, #12]
    e0d2:	strb	r1, [r3, #0]
    e0d4:	b.n	e0b8 <__cvt+0x86>

0000e0d6 <__exponent>:
    e0d6:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e0d8:	mov	r3, r0
    e0da:	cmp	r1, #0
    e0dc:	it	lt
    e0de:	neglt	r1, r1
    e0e0:	strb.w	r2, [r3], #2
    e0e4:	ite	lt
    e0e6:	movlt	r2, #45	; 0x2d
    e0e8:	movge	r2, #43	; 0x2b
    e0ea:	cmp	r1, #9
    e0ec:	strb	r2, [r0, #1]
    e0ee:	ble.n	e146 <__exponent+0x70>
    e0f0:	add.w	r2, sp, #7
    e0f4:	mov	r7, r2
    e0f6:	movs	r6, #10
    e0f8:	mov	ip, r2
    e0fa:	sdiv	r5, r1, r6
    e0fe:	mls	r4, r6, r5, r1
    e102:	adds	r4, #48	; 0x30
    e104:	strb.w	r4, [ip, #-1]
    e108:	mov	r4, r1
    e10a:	cmp	r4, #99	; 0x63
    e10c:	add.w	r2, r2, #4294967295
    e110:	mov	r1, r5
    e112:	bgt.n	e0f8 <__exponent+0x22>
    e114:	adds	r1, #48	; 0x30
    e116:	sub.w	r4, ip, #2
    e11a:	strb.w	r1, [r2, #-1]
    e11e:	adds	r1, r0, #1
    e120:	mov	r2, r4
    e122:	cmp	r2, r7
    e124:	bcc.n	e13c <__exponent+0x66>
    e126:	add.w	r2, sp, #9
    e12a:	sub.w	r2, r2, ip
    e12e:	cmp	r4, r7
    e130:	it	hi
    e132:	movhi	r2, #0
    e134:	add	r3, r2
    e136:	subs	r0, r3, r0
    e138:	add	sp, #12
    e13a:	pop	{r4, r5, r6, r7, pc}
    e13c:	ldrb.w	r5, [r2], #1
    e140:	strb.w	r5, [r1, #1]!
    e144:	b.n	e122 <__exponent+0x4c>
    e146:	movs	r3, #48	; 0x30
    e148:	adds	r1, #48	; 0x30
    e14a:	strb	r3, [r0, #2]
    e14c:	strb	r1, [r0, #3]
    e14e:	adds	r3, r0, #4
    e150:	b.n	e136 <__exponent+0x60>
    e152:	movs	r0, r0
    e154:	movs	r0, r0
	...

0000e158 <_printf_float>:
    e158:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e15c:	sub	sp, #44	; 0x2c
    e15e:	mov	r4, r1
    e160:	ldr.w	r8, [sp, #80]	; 0x50
    e164:	mov	r6, r2
    e166:	mov	r7, r3
    e168:	mov	r5, r0
    e16a:	bl	f150 <_localeconv_r>
    e16e:	ldr.w	fp, [r0]
    e172:	mov	r0, fp
    e174:	bl	f310 <strlen>
    e178:	movs	r3, #0
    e17a:	str	r3, [sp, #32]
    e17c:	ldr.w	r3, [r8]
    e180:	ldrb.w	r9, [r4, #24]
    e184:	ldr	r2, [r4, #0]
    e186:	adds	r3, #7
    e188:	bic.w	r3, r3, #7
    e18c:	add.w	r1, r3, #8
    e190:	str.w	r1, [r8]
    e194:	vldr	d0, [r3]
    e198:	vldr	d6, [pc, #604]	; e3f8 <_printf_float+0x2a0>
    e19c:	vabs.f64	d7, d0
    e1a0:	vcmp.f64	d7, d6
    e1a4:	vmrs	APSR_nzcv, fpscr
    e1a8:	vstr	d0, [r4, #72]	; 0x48
    e1ac:	mov	sl, r0
    e1ae:	ble.n	e1fa <_printf_float+0xa2>
    e1b0:	vcmpe.f64	d0, #0.0
    e1b4:	vmrs	APSR_nzcv, fpscr
    e1b8:	bpl.n	e1c0 <_printf_float+0x68>
    e1ba:	movs	r3, #45	; 0x2d
    e1bc:	strb.w	r3, [r4, #67]	; 0x43
    e1c0:	ldr	r1, [pc, #572]	; (e400 <_printf_float+0x2a8>)
    e1c2:	ldr	r3, [pc, #576]	; (e404 <_printf_float+0x2ac>)
    e1c4:	cmp.w	r9, #71	; 0x47
    e1c8:	ite	ls
    e1ca:	movls	r8, r1
    e1cc:	movhi	r8, r3
    e1ce:	movs	r3, #3
    e1d0:	str	r3, [r4, #16]
    e1d2:	bic.w	r2, r2, #4
    e1d6:	movs	r3, #0
    e1d8:	str	r2, [r4, #0]
    e1da:	str	r3, [sp, #16]
    e1dc:	str	r7, [sp, #0]
    e1de:	mov	r3, r6
    e1e0:	add	r2, sp, #36	; 0x24
    e1e2:	mov	r1, r4
    e1e4:	mov	r0, r5
    e1e6:	bl	e58c <_printf_common>
    e1ea:	adds	r0, #1
    e1ec:	bne.w	e304 <_printf_float+0x1ac>
    e1f0:	mov.w	r0, #4294967295
    e1f4:	add	sp, #44	; 0x2c
    e1f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e1fa:	vcmp.f64	d0, d0
    e1fe:	vmrs	APSR_nzcv, fpscr
    e202:	bvc.n	e218 <_printf_float+0xc0>
    e204:	vmov	r3, s1
    e208:	cmp	r3, #0
    e20a:	itt	lt
    e20c:	movlt	r3, #45	; 0x2d
    e20e:	strblt.w	r3, [r4, #67]	; 0x43
    e212:	ldr	r1, [pc, #500]	; (e408 <_printf_float+0x2b0>)
    e214:	ldr	r3, [pc, #500]	; (e40c <_printf_float+0x2b4>)
    e216:	b.n	e1c4 <_printf_float+0x6c>
    e218:	ldr	r3, [r4, #4]
    e21a:	and.w	r1, r9, #223	; 0xdf
    e21e:	str	r1, [sp, #16]
    e220:	adds	r1, r3, #1
    e222:	bne.n	e29e <_printf_float+0x146>
    e224:	movs	r3, #6
    e226:	str	r3, [r4, #4]
    e228:	movs	r3, #0
    e22a:	str	r3, [sp, #12]
    e22c:	add	r3, sp, #32
    e22e:	strd	r9, r3, [sp, #4]
    e232:	orr.w	r2, r2, #1024	; 0x400
    e236:	add	r3, sp, #28
    e238:	ldr	r1, [r4, #4]
    e23a:	str	r3, [sp, #0]
    e23c:	str	r2, [r4, #0]
    e23e:	add.w	r3, sp, #27
    e242:	mov	r0, r5
    e244:	bl	e032 <__cvt>
    e248:	ldr	r3, [sp, #16]
    e24a:	ldr	r1, [sp, #28]
    e24c:	cmp	r3, #71	; 0x47
    e24e:	mov	r8, r0
    e250:	bne.n	e264 <_printf_float+0x10c>
    e252:	adds	r0, r1, #3
    e254:	blt.n	e25c <_printf_float+0x104>
    e256:	ldr	r3, [r4, #4]
    e258:	cmp	r1, r3
    e25a:	ble.n	e2e0 <_printf_float+0x188>
    e25c:	sub.w	r9, r9, #2
    e260:	uxtb.w	r9, r9
    e264:	cmp.w	r9, #101	; 0x65
    e268:	bhi.n	e2ac <_printf_float+0x154>
    e26a:	subs	r1, #1
    e26c:	mov	r2, r9
    e26e:	add.w	r0, r4, #80	; 0x50
    e272:	str	r1, [sp, #28]
    e274:	bl	e0d6 <__exponent>
    e278:	ldr	r2, [sp, #32]
    e27a:	str	r0, [sp, #16]
    e27c:	adds	r3, r2, r0
    e27e:	cmp	r2, #1
    e280:	str	r3, [r4, #16]
    e282:	bgt.n	e28a <_printf_float+0x132>
    e284:	ldr	r2, [r4, #0]
    e286:	lsls	r2, r2, #31
    e288:	bpl.n	e28e <_printf_float+0x136>
    e28a:	adds	r3, #1
    e28c:	str	r3, [r4, #16]
    e28e:	ldrb.w	r3, [sp, #27]
    e292:	cmp	r3, #0
    e294:	beq.n	e1dc <_printf_float+0x84>
    e296:	movs	r3, #45	; 0x2d
    e298:	strb.w	r3, [r4, #67]	; 0x43
    e29c:	b.n	e1dc <_printf_float+0x84>
    e29e:	ldr	r1, [sp, #16]
    e2a0:	cmp	r1, #71	; 0x47
    e2a2:	bne.n	e228 <_printf_float+0xd0>
    e2a4:	cmp	r3, #0
    e2a6:	bne.n	e228 <_printf_float+0xd0>
    e2a8:	movs	r3, #1
    e2aa:	b.n	e226 <_printf_float+0xce>
    e2ac:	cmp.w	r9, #102	; 0x66
    e2b0:	bne.n	e2e4 <_printf_float+0x18c>
    e2b2:	cmp	r1, #0
    e2b4:	ldr	r3, [r4, #4]
    e2b6:	ble.n	e2d0 <_printf_float+0x178>
    e2b8:	str	r1, [r4, #16]
    e2ba:	cbnz	r3, e2c2 <_printf_float+0x16a>
    e2bc:	ldr	r2, [r4, #0]
    e2be:	lsls	r0, r2, #31
    e2c0:	bpl.n	e2c8 <_printf_float+0x170>
    e2c2:	adds	r3, #1
    e2c4:	add	r3, r1
    e2c6:	str	r3, [r4, #16]
    e2c8:	movs	r3, #0
    e2ca:	str	r1, [r4, #88]	; 0x58
    e2cc:	str	r3, [sp, #16]
    e2ce:	b.n	e28e <_printf_float+0x136>
    e2d0:	cbnz	r3, e2d8 <_printf_float+0x180>
    e2d2:	ldr	r2, [r4, #0]
    e2d4:	lsls	r2, r2, #31
    e2d6:	bpl.n	e2dc <_printf_float+0x184>
    e2d8:	adds	r3, #2
    e2da:	b.n	e2c6 <_printf_float+0x16e>
    e2dc:	movs	r3, #1
    e2de:	b.n	e2c6 <_printf_float+0x16e>
    e2e0:	mov.w	r9, #103	; 0x67
    e2e4:	ldr	r3, [sp, #32]
    e2e6:	cmp	r1, r3
    e2e8:	blt.n	e2f6 <_printf_float+0x19e>
    e2ea:	ldr	r3, [r4, #0]
    e2ec:	str	r1, [r4, #16]
    e2ee:	lsls	r0, r3, #31
    e2f0:	bpl.n	e2c8 <_printf_float+0x170>
    e2f2:	adds	r3, r1, #1
    e2f4:	b.n	e2c6 <_printf_float+0x16e>
    e2f6:	cmp	r1, #0
    e2f8:	ite	le
    e2fa:	rsble	r2, r1, #2
    e2fe:	movgt	r2, #1
    e300:	add	r3, r2
    e302:	b.n	e2c6 <_printf_float+0x16e>
    e304:	ldr	r3, [r4, #0]
    e306:	lsls	r2, r3, #21
    e308:	bmi.n	e31a <_printf_float+0x1c2>
    e30a:	ldr	r3, [r4, #16]
    e30c:	mov	r2, r8
    e30e:	mov	r1, r6
    e310:	mov	r0, r5
    e312:	blx	r7
    e314:	adds	r0, #1
    e316:	bne.n	e36e <_printf_float+0x216>
    e318:	b.n	e1f0 <_printf_float+0x98>
    e31a:	cmp.w	r9, #101	; 0x65
    e31e:	bls.w	e4e2 <_printf_float+0x38a>
    e322:	vldr	d7, [r4, #72]	; 0x48
    e326:	vcmp.f64	d7, #0.0
    e32a:	vmrs	APSR_nzcv, fpscr
    e32e:	bne.n	e398 <_printf_float+0x240>
    e330:	ldr	r2, [pc, #220]	; (e410 <_printf_float+0x2b8>)
    e332:	movs	r3, #1
    e334:	mov	r1, r6
    e336:	mov	r0, r5
    e338:	blx	r7
    e33a:	adds	r0, #1
    e33c:	beq.w	e1f0 <_printf_float+0x98>
    e340:	ldrd	r2, r3, [sp, #28]
    e344:	cmp	r2, r3
    e346:	blt.n	e34e <_printf_float+0x1f6>
    e348:	ldr	r3, [r4, #0]
    e34a:	lsls	r0, r3, #31
    e34c:	bpl.n	e36e <_printf_float+0x216>
    e34e:	mov	r3, sl
    e350:	mov	r2, fp
    e352:	mov	r1, r6
    e354:	mov	r0, r5
    e356:	blx	r7
    e358:	adds	r0, #1
    e35a:	beq.w	e1f0 <_printf_float+0x98>
    e35e:	mov.w	r8, #0
    e362:	add.w	r9, r4, #26
    e366:	ldr	r3, [sp, #32]
    e368:	subs	r3, #1
    e36a:	cmp	r3, r8
    e36c:	bgt.n	e382 <_printf_float+0x22a>
    e36e:	ldr	r3, [r4, #0]
    e370:	lsls	r3, r3, #30
    e372:	bmi.w	e582 <_printf_float+0x42a>
    e376:	ldr	r0, [r4, #12]
    e378:	ldr	r3, [sp, #36]	; 0x24
    e37a:	cmp	r0, r3
    e37c:	it	lt
    e37e:	movlt	r0, r3
    e380:	b.n	e1f4 <_printf_float+0x9c>
    e382:	movs	r3, #1
    e384:	mov	r2, r9
    e386:	mov	r1, r6
    e388:	mov	r0, r5
    e38a:	blx	r7
    e38c:	adds	r0, #1
    e38e:	beq.w	e1f0 <_printf_float+0x98>
    e392:	add.w	r8, r8, #1
    e396:	b.n	e366 <_printf_float+0x20e>
    e398:	ldr	r3, [sp, #28]
    e39a:	cmp	r3, #0
    e39c:	bgt.n	e414 <_printf_float+0x2bc>
    e39e:	ldr	r2, [pc, #112]	; (e410 <_printf_float+0x2b8>)
    e3a0:	movs	r3, #1
    e3a2:	mov	r1, r6
    e3a4:	mov	r0, r5
    e3a6:	blx	r7
    e3a8:	adds	r0, #1
    e3aa:	beq.w	e1f0 <_printf_float+0x98>
    e3ae:	ldrd	r3, r2, [sp, #28]
    e3b2:	orrs	r3, r2
    e3b4:	bne.n	e3bc <_printf_float+0x264>
    e3b6:	ldr	r3, [r4, #0]
    e3b8:	lsls	r1, r3, #31
    e3ba:	bpl.n	e36e <_printf_float+0x216>
    e3bc:	mov	r3, sl
    e3be:	mov	r2, fp
    e3c0:	mov	r1, r6
    e3c2:	mov	r0, r5
    e3c4:	blx	r7
    e3c6:	adds	r0, #1
    e3c8:	beq.w	e1f0 <_printf_float+0x98>
    e3cc:	mov.w	r9, #0
    e3d0:	add.w	sl, r4, #26
    e3d4:	ldr	r3, [sp, #28]
    e3d6:	negs	r3, r3
    e3d8:	cmp	r3, r9
    e3da:	bgt.n	e3e0 <_printf_float+0x288>
    e3dc:	ldr	r3, [sp, #32]
    e3de:	b.n	e30c <_printf_float+0x1b4>
    e3e0:	movs	r3, #1
    e3e2:	mov	r2, sl
    e3e4:	mov	r1, r6
    e3e6:	mov	r0, r5
    e3e8:	blx	r7
    e3ea:	adds	r0, #1
    e3ec:	beq.w	e1f0 <_printf_float+0x98>
    e3f0:	add.w	r9, r9, #1
    e3f4:	b.n	e3d4 <_printf_float+0x27c>
    e3f6:	nop
    e3f8:	.word	0xffffffff
    e3fc:	.word	0x7fefffff
    e400:	.word	0x20001451
    e404:	.word	0x200011c0
    e408:	.word	0x20001455
    e40c:	.word	0x200011bc
    e410:	.word	0x200011a1
    e414:	ldr	r2, [sp, #32]
    e416:	ldr	r3, [r4, #88]	; 0x58
    e418:	cmp	r2, r3
    e41a:	it	ge
    e41c:	movge	r2, r3
    e41e:	cmp	r2, #0
    e420:	mov	r9, r2
    e422:	bgt.n	e496 <_printf_float+0x33e>
    e424:	movs	r3, #0
    e426:	str	r3, [sp, #20]
    e428:	bic.w	r9, r9, r9, asr #31
    e42c:	add.w	r2, r4, #26
    e430:	ldr	r3, [r4, #88]	; 0x58
    e432:	ldr	r1, [sp, #20]
    e434:	str	r3, [sp, #16]
    e436:	sub.w	r3, r3, r9
    e43a:	cmp	r3, r1
    e43c:	bgt.n	e4a6 <_printf_float+0x34e>
    e43e:	ldrd	r2, r3, [sp, #28]
    e442:	cmp	r2, r3
    e444:	blt.n	e4c0 <_printf_float+0x368>
    e446:	ldr	r3, [r4, #0]
    e448:	lsls	r2, r3, #31
    e44a:	bmi.n	e4c0 <_printf_float+0x368>
    e44c:	ldrd	r3, r2, [sp, #28]
    e450:	sub.w	r9, r2, r3
    e454:	ldr	r3, [sp, #16]
    e456:	subs	r2, r2, r3
    e458:	cmp	r9, r2
    e45a:	it	ge
    e45c:	movge	r9, r2
    e45e:	cmp.w	r9, #0
    e462:	bgt.n	e4d0 <_printf_float+0x378>
    e464:	mov.w	r8, #0
    e468:	bic.w	r9, r9, r9, asr #31
    e46c:	add.w	sl, r4, #26
    e470:	ldrd	r2, r3, [sp, #28]
    e474:	subs	r3, r3, r2
    e476:	sub.w	r3, r3, r9
    e47a:	cmp	r3, r8
    e47c:	ble.w	e36e <_printf_float+0x216>
    e480:	movs	r3, #1
    e482:	mov	r2, sl
    e484:	mov	r1, r6
    e486:	mov	r0, r5
    e488:	blx	r7
    e48a:	adds	r0, #1
    e48c:	beq.w	e1f0 <_printf_float+0x98>
    e490:	add.w	r8, r8, #1
    e494:	b.n	e470 <_printf_float+0x318>
    e496:	mov	r3, r2
    e498:	mov	r1, r6
    e49a:	mov	r2, r8
    e49c:	mov	r0, r5
    e49e:	blx	r7
    e4a0:	adds	r0, #1
    e4a2:	bne.n	e424 <_printf_float+0x2cc>
    e4a4:	b.n	e1f0 <_printf_float+0x98>
    e4a6:	movs	r3, #1
    e4a8:	mov	r1, r6
    e4aa:	mov	r0, r5
    e4ac:	str	r2, [sp, #16]
    e4ae:	blx	r7
    e4b0:	adds	r0, #1
    e4b2:	beq.w	e1f0 <_printf_float+0x98>
    e4b6:	ldr	r3, [sp, #20]
    e4b8:	ldr	r2, [sp, #16]
    e4ba:	adds	r3, #1
    e4bc:	str	r3, [sp, #20]
    e4be:	b.n	e430 <_printf_float+0x2d8>
    e4c0:	mov	r3, sl
    e4c2:	mov	r2, fp
    e4c4:	mov	r1, r6
    e4c6:	mov	r0, r5
    e4c8:	blx	r7
    e4ca:	adds	r0, #1
    e4cc:	bne.n	e44c <_printf_float+0x2f4>
    e4ce:	b.n	e1f0 <_printf_float+0x98>
    e4d0:	ldr	r2, [sp, #16]
    e4d2:	mov	r3, r9
    e4d4:	add	r2, r8
    e4d6:	mov	r1, r6
    e4d8:	mov	r0, r5
    e4da:	blx	r7
    e4dc:	adds	r0, #1
    e4de:	bne.n	e464 <_printf_float+0x30c>
    e4e0:	b.n	e1f0 <_printf_float+0x98>
    e4e2:	ldr	r2, [sp, #32]
    e4e4:	cmp	r2, #1
    e4e6:	bgt.n	e4ec <_printf_float+0x394>
    e4e8:	lsls	r3, r3, #31
    e4ea:	bpl.n	e55c <_printf_float+0x404>
    e4ec:	movs	r3, #1
    e4ee:	mov	r2, r8
    e4f0:	mov	r1, r6
    e4f2:	mov	r0, r5
    e4f4:	blx	r7
    e4f6:	adds	r0, #1
    e4f8:	beq.w	e1f0 <_printf_float+0x98>
    e4fc:	mov	r3, sl
    e4fe:	mov	r2, fp
    e500:	mov	r1, r6
    e502:	mov	r0, r5
    e504:	blx	r7
    e506:	adds	r0, #1
    e508:	beq.w	e1f0 <_printf_float+0x98>
    e50c:	vldr	d7, [r4, #72]	; 0x48
    e510:	vcmp.f64	d7, #0.0
    e514:	vmrs	APSR_nzcv, fpscr
    e518:	ldr	r3, [sp, #32]
    e51a:	beq.n	e552 <_printf_float+0x3fa>
    e51c:	subs	r3, #1
    e51e:	add.w	r2, r8, #1
    e522:	mov	r1, r6
    e524:	mov	r0, r5
    e526:	blx	r7
    e528:	adds	r0, #1
    e52a:	bne.n	e54a <_printf_float+0x3f2>
    e52c:	b.n	e1f0 <_printf_float+0x98>
    e52e:	movs	r3, #1
    e530:	mov	r2, r9
    e532:	mov	r1, r6
    e534:	mov	r0, r5
    e536:	blx	r7
    e538:	adds	r0, #1
    e53a:	beq.w	e1f0 <_printf_float+0x98>
    e53e:	add.w	r8, r8, #1
    e542:	ldr	r3, [sp, #32]
    e544:	subs	r3, #1
    e546:	cmp	r3, r8
    e548:	bgt.n	e52e <_printf_float+0x3d6>
    e54a:	ldr	r3, [sp, #16]
    e54c:	add.w	r2, r4, #80	; 0x50
    e550:	b.n	e30e <_printf_float+0x1b6>
    e552:	mov.w	r8, #0
    e556:	add.w	r9, r4, #26
    e55a:	b.n	e542 <_printf_float+0x3ea>
    e55c:	movs	r3, #1
    e55e:	mov	r2, r8
    e560:	b.n	e522 <_printf_float+0x3ca>
    e562:	movs	r3, #1
    e564:	mov	r2, r9
    e566:	mov	r1, r6
    e568:	mov	r0, r5
    e56a:	blx	r7
    e56c:	adds	r0, #1
    e56e:	beq.w	e1f0 <_printf_float+0x98>
    e572:	add.w	r8, r8, #1
    e576:	ldr	r3, [r4, #12]
    e578:	ldr	r1, [sp, #36]	; 0x24
    e57a:	subs	r3, r3, r1
    e57c:	cmp	r3, r8
    e57e:	bgt.n	e562 <_printf_float+0x40a>
    e580:	b.n	e376 <_printf_float+0x21e>
    e582:	mov.w	r8, #0
    e586:	add.w	r9, r4, #25
    e58a:	b.n	e576 <_printf_float+0x41e>

0000e58c <_printf_common>:
    e58c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e590:	mov	r6, r2
    e592:	mov	r9, r3
    e594:	ldr	r2, [r1, #8]
    e596:	ldr	r3, [r1, #16]
    e598:	ldr.w	r8, [sp, #32]
    e59c:	cmp	r3, r2
    e59e:	it	lt
    e5a0:	movlt	r3, r2
    e5a2:	str	r3, [r6, #0]
    e5a4:	ldrb.w	r2, [r1, #67]	; 0x43
    e5a8:	mov	r7, r0
    e5aa:	mov	r4, r1
    e5ac:	cbz	r2, e5b2 <_printf_common+0x26>
    e5ae:	adds	r3, #1
    e5b0:	str	r3, [r6, #0]
    e5b2:	ldr	r3, [r4, #0]
    e5b4:	lsls	r1, r3, #26
    e5b6:	ittt	mi
    e5b8:	ldrmi	r3, [r6, #0]
    e5ba:	addmi	r3, #2
    e5bc:	strmi	r3, [r6, #0]
    e5be:	ldr	r5, [r4, #0]
    e5c0:	ands.w	r5, r5, #6
    e5c4:	bne.n	e5d4 <_printf_common+0x48>
    e5c6:	add.w	sl, r4, #25
    e5ca:	ldr	r3, [r4, #12]
    e5cc:	ldr	r2, [r6, #0]
    e5ce:	subs	r3, r3, r2
    e5d0:	cmp	r3, r5
    e5d2:	bgt.n	e622 <_printf_common+0x96>
    e5d4:	ldrb.w	r2, [r4, #67]	; 0x43
    e5d8:	subs	r3, r2, #0
    e5da:	ldr	r2, [r4, #0]
    e5dc:	it	ne
    e5de:	movne	r3, #1
    e5e0:	lsls	r2, r2, #26
    e5e2:	bmi.n	e63c <_printf_common+0xb0>
    e5e4:	add.w	r2, r4, #67	; 0x43
    e5e8:	mov	r1, r9
    e5ea:	mov	r0, r7
    e5ec:	blx	r8
    e5ee:	adds	r0, #1
    e5f0:	beq.n	e630 <_printf_common+0xa4>
    e5f2:	ldr	r3, [r4, #0]
    e5f4:	ldr	r2, [r4, #16]
    e5f6:	and.w	r3, r3, #6
    e5fa:	cmp	r3, #4
    e5fc:	ittt	eq
    e5fe:	ldreq	r5, [r4, #12]
    e600:	ldreq	r3, [r6, #0]
    e602:	subeq	r5, r5, r3
    e604:	ldr	r3, [r4, #8]
    e606:	ite	eq
    e608:	biceq.w	r5, r5, r5, asr #31
    e60c:	movne	r5, #0
    e60e:	cmp	r3, r2
    e610:	itt	gt
    e612:	subgt	r3, r3, r2
    e614:	addgt	r5, r5, r3
    e616:	movs	r6, #0
    e618:	adds	r4, #26
    e61a:	cmp	r5, r6
    e61c:	bne.n	e654 <_printf_common+0xc8>
    e61e:	movs	r0, #0
    e620:	b.n	e634 <_printf_common+0xa8>
    e622:	movs	r3, #1
    e624:	mov	r2, sl
    e626:	mov	r1, r9
    e628:	mov	r0, r7
    e62a:	blx	r8
    e62c:	adds	r0, #1
    e62e:	bne.n	e638 <_printf_common+0xac>
    e630:	mov.w	r0, #4294967295
    e634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e638:	adds	r5, #1
    e63a:	b.n	e5ca <_printf_common+0x3e>
    e63c:	adds	r1, r4, r3
    e63e:	adds	r2, r3, #1
    e640:	movs	r0, #48	; 0x30
    e642:	strb.w	r0, [r1, #67]	; 0x43
    e646:	add	r2, r4
    e648:	ldrb.w	r1, [r4, #69]	; 0x45
    e64c:	strb.w	r1, [r2, #67]	; 0x43
    e650:	adds	r3, #2
    e652:	b.n	e5e4 <_printf_common+0x58>
    e654:	movs	r3, #1
    e656:	mov	r2, r4
    e658:	mov	r1, r9
    e65a:	mov	r0, r7
    e65c:	blx	r8
    e65e:	adds	r0, #1
    e660:	beq.n	e630 <_printf_common+0xa4>
    e662:	adds	r6, #1
    e664:	b.n	e61a <_printf_common+0x8e>
	...

0000e668 <_printf_i>:
    e668:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e66c:	ldrb	r7, [r1, #24]
    e66e:	ldr	r5, [sp, #48]	; 0x30
    e670:	cmp	r7, #120	; 0x78
    e672:	mov	r9, r2
    e674:	mov	r8, r0
    e676:	mov	r4, r1
    e678:	mov	sl, r3
    e67a:	add.w	r2, r1, #67	; 0x43
    e67e:	bhi.n	e690 <_printf_i+0x28>
    e680:	cmp	r7, #98	; 0x62
    e682:	bhi.n	e69a <_printf_i+0x32>
    e684:	cmp	r7, #0
    e686:	beq.w	e832 <_printf_i+0x1ca>
    e68a:	cmp	r7, #88	; 0x58
    e68c:	beq.w	e810 <_printf_i+0x1a8>
    e690:	add.w	r5, r4, #66	; 0x42
    e694:	strb.w	r7, [r4, #66]	; 0x42
    e698:	b.n	e710 <_printf_i+0xa8>
    e69a:	sub.w	r3, r7, #99	; 0x63
    e69e:	cmp	r3, #21
    e6a0:	bhi.n	e690 <_printf_i+0x28>
    e6a2:	add	r1, pc, #4	; (adr r1, e6a8 <_printf_i+0x40>)
    e6a4:	ldr.w	pc, [r1, r3, lsl #2]
    e6a8:	.word	0x0000e701
    e6ac:	.word	0x0000e715
    e6b0:	.word	0x0000e691
    e6b4:	.word	0x0000e691
    e6b8:	.word	0x0000e691
    e6bc:	.word	0x0000e691
    e6c0:	.word	0x0000e715
    e6c4:	.word	0x0000e691
    e6c8:	.word	0x0000e691
    e6cc:	.word	0x0000e691
    e6d0:	.word	0x0000e691
    e6d4:	.word	0x0000e819
    e6d8:	.word	0x0000e741
    e6dc:	.word	0x0000e7d3
    e6e0:	.word	0x0000e691
    e6e4:	.word	0x0000e691
    e6e8:	.word	0x0000e83b
    e6ec:	.word	0x0000e691
    e6f0:	.word	0x0000e741
    e6f4:	.word	0x0000e691
    e6f8:	.word	0x0000e691
    e6fc:	.word	0x0000e7db
    e700:	ldr	r3, [r5, #0]
    e702:	adds	r2, r3, #4
    e704:	ldr	r3, [r3, #0]
    e706:	str	r2, [r5, #0]
    e708:	add.w	r5, r4, #66	; 0x42
    e70c:	strb.w	r3, [r4, #66]	; 0x42
    e710:	movs	r3, #1
    e712:	b.n	e854 <_printf_i+0x1ec>
    e714:	ldr	r0, [r4, #0]
    e716:	ldr	r3, [r5, #0]
    e718:	lsls	r7, r0, #24
    e71a:	add.w	r1, r3, #4
    e71e:	str	r1, [r5, #0]
    e720:	bpl.n	e726 <_printf_i+0xbe>
    e722:	ldr	r6, [r3, #0]
    e724:	b.n	e72e <_printf_i+0xc6>
    e726:	lsls	r6, r0, #25
    e728:	bpl.n	e722 <_printf_i+0xba>
    e72a:	ldrsh.w	r6, [r3]
    e72e:	cmp	r6, #0
    e730:	bge.n	e73a <_printf_i+0xd2>
    e732:	movs	r3, #45	; 0x2d
    e734:	negs	r6, r6
    e736:	strb.w	r3, [r4, #67]	; 0x43
    e73a:	ldr	r0, [pc, #360]	; (e8a4 <_printf_i+0x23c>)
    e73c:	movs	r3, #10
    e73e:	b.n	e766 <_printf_i+0xfe>
    e740:	ldr	r3, [r5, #0]
    e742:	ldr	r0, [r4, #0]
    e744:	adds	r1, r3, #4
    e746:	str	r1, [r5, #0]
    e748:	lsls	r5, r0, #24
    e74a:	bpl.n	e750 <_printf_i+0xe8>
    e74c:	ldr	r6, [r3, #0]
    e74e:	b.n	e756 <_printf_i+0xee>
    e750:	lsls	r1, r0, #25
    e752:	bpl.n	e74c <_printf_i+0xe4>
    e754:	ldrh	r6, [r3, #0]
    e756:	ldr	r0, [pc, #332]	; (e8a4 <_printf_i+0x23c>)
    e758:	cmp	r7, #111	; 0x6f
    e75a:	ite	eq
    e75c:	moveq	r3, #8
    e75e:	movne	r3, #10
    e760:	movs	r1, #0
    e762:	strb.w	r1, [r4, #67]	; 0x43
    e766:	ldr	r5, [r4, #4]
    e768:	str	r5, [r4, #8]
    e76a:	cmp	r5, #0
    e76c:	ittt	ge
    e76e:	ldrge	r1, [r4, #0]
    e770:	bicge.w	r1, r1, #4
    e774:	strge	r1, [r4, #0]
    e776:	cbnz	r6, e77c <_printf_i+0x114>
    e778:	cmp	r5, #0
    e77a:	beq.n	e814 <_printf_i+0x1ac>
    e77c:	mov	r5, r2
    e77e:	udiv	r1, r6, r3
    e782:	mls	r7, r3, r1, r6
    e786:	ldrb	r7, [r0, r7]
    e788:	strb.w	r7, [r5, #-1]!
    e78c:	mov	r7, r6
    e78e:	cmp	r3, r7
    e790:	mov	r6, r1
    e792:	bls.n	e77e <_printf_i+0x116>
    e794:	cmp	r3, #8
    e796:	bne.n	e7b0 <_printf_i+0x148>
    e798:	ldr	r3, [r4, #0]
    e79a:	lsls	r6, r3, #31
    e79c:	bpl.n	e7b0 <_printf_i+0x148>
    e79e:	ldr	r3, [r4, #16]
    e7a0:	ldr	r1, [r4, #4]
    e7a2:	cmp	r1, r3
    e7a4:	ittt	le
    e7a6:	movle	r3, #48	; 0x30
    e7a8:	strble.w	r3, [r5, #-1]
    e7ac:	addle.w	r5, r5, #4294967295
    e7b0:	subs	r2, r2, r5
    e7b2:	str	r2, [r4, #16]
    e7b4:	str.w	sl, [sp]
    e7b8:	mov	r3, r9
    e7ba:	add	r2, sp, #12
    e7bc:	mov	r1, r4
    e7be:	mov	r0, r8
    e7c0:	bl	e58c <_printf_common>
    e7c4:	adds	r0, #1
    e7c6:	bne.n	e85e <_printf_i+0x1f6>
    e7c8:	mov.w	r0, #4294967295
    e7cc:	add	sp, #16
    e7ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7d2:	ldr	r3, [r4, #0]
    e7d4:	orr.w	r3, r3, #32
    e7d8:	str	r3, [r4, #0]
    e7da:	ldr	r0, [pc, #204]	; (e8a8 <_printf_i+0x240>)
    e7dc:	movs	r7, #120	; 0x78
    e7de:	strb.w	r7, [r4, #69]	; 0x45
    e7e2:	ldr	r3, [r4, #0]
    e7e4:	ldr	r1, [r5, #0]
    e7e6:	lsls	r7, r3, #24
    e7e8:	ldr.w	r6, [r1], #4
    e7ec:	bmi.n	e7f4 <_printf_i+0x18c>
    e7ee:	lsls	r7, r3, #25
    e7f0:	it	mi
    e7f2:	uxthmi	r6, r6
    e7f4:	lsls	r7, r3, #31
    e7f6:	it	mi
    e7f8:	orrmi.w	r3, r3, #32
    e7fc:	str	r1, [r5, #0]
    e7fe:	it	mi
    e800:	strmi	r3, [r4, #0]
    e802:	cbnz	r6, e80c <_printf_i+0x1a4>
    e804:	ldr	r3, [r4, #0]
    e806:	bic.w	r3, r3, #32
    e80a:	str	r3, [r4, #0]
    e80c:	movs	r3, #16
    e80e:	b.n	e760 <_printf_i+0xf8>
    e810:	ldr	r0, [pc, #144]	; (e8a4 <_printf_i+0x23c>)
    e812:	b.n	e7de <_printf_i+0x176>
    e814:	mov	r5, r2
    e816:	b.n	e794 <_printf_i+0x12c>
    e818:	ldr	r3, [r5, #0]
    e81a:	ldr	r6, [r4, #0]
    e81c:	ldr	r1, [r4, #20]
    e81e:	adds	r0, r3, #4
    e820:	str	r0, [r5, #0]
    e822:	lsls	r5, r6, #24
    e824:	ldr	r3, [r3, #0]
    e826:	bpl.n	e82c <_printf_i+0x1c4>
    e828:	str	r1, [r3, #0]
    e82a:	b.n	e832 <_printf_i+0x1ca>
    e82c:	lsls	r0, r6, #25
    e82e:	bpl.n	e828 <_printf_i+0x1c0>
    e830:	strh	r1, [r3, #0]
    e832:	movs	r3, #0
    e834:	str	r3, [r4, #16]
    e836:	mov	r5, r2
    e838:	b.n	e7b4 <_printf_i+0x14c>
    e83a:	ldr	r3, [r5, #0]
    e83c:	adds	r2, r3, #4
    e83e:	str	r2, [r5, #0]
    e840:	ldr	r5, [r3, #0]
    e842:	ldr	r2, [r4, #4]
    e844:	movs	r1, #0
    e846:	mov	r0, r5
    e848:	bl	f270 <memchr>
    e84c:	cbz	r0, e852 <_printf_i+0x1ea>
    e84e:	subs	r0, r0, r5
    e850:	str	r0, [r4, #4]
    e852:	ldr	r3, [r4, #4]
    e854:	str	r3, [r4, #16]
    e856:	movs	r3, #0
    e858:	strb.w	r3, [r4, #67]	; 0x43
    e85c:	b.n	e7b4 <_printf_i+0x14c>
    e85e:	ldr	r3, [r4, #16]
    e860:	mov	r2, r5
    e862:	mov	r1, r9
    e864:	mov	r0, r8
    e866:	blx	sl
    e868:	adds	r0, #1
    e86a:	beq.n	e7c8 <_printf_i+0x160>
    e86c:	ldr	r3, [r4, #0]
    e86e:	lsls	r3, r3, #30
    e870:	bmi.n	e89a <_printf_i+0x232>
    e872:	ldr	r0, [r4, #12]
    e874:	ldr	r3, [sp, #12]
    e876:	cmp	r0, r3
    e878:	it	lt
    e87a:	movlt	r0, r3
    e87c:	b.n	e7cc <_printf_i+0x164>
    e87e:	movs	r3, #1
    e880:	mov	r2, r6
    e882:	mov	r1, r9
    e884:	mov	r0, r8
    e886:	blx	sl
    e888:	adds	r0, #1
    e88a:	beq.n	e7c8 <_printf_i+0x160>
    e88c:	adds	r5, #1
    e88e:	ldr	r3, [r4, #12]
    e890:	ldr	r1, [sp, #12]
    e892:	subs	r3, r3, r1
    e894:	cmp	r3, r5
    e896:	bgt.n	e87e <_printf_i+0x216>
    e898:	b.n	e872 <_printf_i+0x20a>
    e89a:	movs	r5, #0
    e89c:	add.w	r6, r4, #25
    e8a0:	b.n	e88e <_printf_i+0x226>
    e8a2:	nop
    e8a4:	.word	0x20001459
    e8a8:	.word	0x2000146a

0000e8ac <_scanf_float>:
    e8ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8b0:	sub	sp, #28
    e8b2:	mov	r7, r2
    e8b4:	str	r3, [sp, #12]
    e8b6:	ldr	r3, [r1, #8]
    e8b8:	subs	r2, r3, #1
    e8ba:	cmp.w	r2, #348	; 0x15c
    e8be:	ittte	hi
    e8c0:	mvnhi.w	r5, #348	; 0x15c
    e8c4:	addhi	r3, r3, r5
    e8c6:	strhi	r3, [sp, #8]
    e8c8:	movls	r3, #0
    e8ca:	itte	hi
    e8cc:	movwhi	r3, #349	; 0x15d
    e8d0:	strhi	r3, [r1, #8]
    e8d2:	strls	r3, [sp, #8]
    e8d4:	ldr	r3, [r1, #0]
    e8d6:	mov	fp, r1
    e8d8:	movs	r5, #0
    e8da:	orr.w	r3, r3, #1920	; 0x780
    e8de:	str.w	r3, [fp], #28
    e8e2:	strd	r5, r5, [sp, #16]
    e8e6:	mov	r8, r0
    e8e8:	mov	r4, r1
    e8ea:	mov	r6, fp
    e8ec:	mov	sl, r5
    e8ee:	mov	r9, r5
    e8f0:	str	r5, [sp, #4]
    e8f2:	ldr	r2, [r4, #8]
    e8f4:	cbz	r2, e90c <_scanf_float+0x60>
    e8f6:	ldr	r3, [r7, #0]
    e8f8:	ldrb	r3, [r3, #0]
    e8fa:	cmp	r3, #78	; 0x4e
    e8fc:	bhi.n	e9c8 <_scanf_float+0x11c>
    e8fe:	cmp	r3, #64	; 0x40
    e900:	bhi.n	e97c <_scanf_float+0xd0>
    e902:	sub.w	r1, r3, #43	; 0x2b
    e906:	uxtb	r0, r1
    e908:	cmp	r0, #14
    e90a:	bls.n	e982 <_scanf_float+0xd6>
    e90c:	cmp.w	r9, #0
    e910:	beq.n	e91a <_scanf_float+0x6e>
    e912:	ldr	r3, [r4, #0]
    e914:	bic.w	r3, r3, #256	; 0x100
    e918:	str	r3, [r4, #0]
    e91a:	add.w	sl, sl, #4294967295
    e91e:	cmp.w	sl, #1
    e922:	bhi.w	eb4c <_scanf_float+0x2a0>
    e926:	cmp	r6, fp
    e928:	bhi.w	eb36 <_scanf_float+0x28a>
    e92c:	movs	r5, #1
    e92e:	mov	r0, r5
    e930:	add	sp, #28
    e932:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e936:	sub.w	r2, r3, #97	; 0x61
    e93a:	cmp	r2, #13
    e93c:	bhi.n	e90c <_scanf_float+0x60>
    e93e:	add	r1, pc, #4	; (adr r1, e944 <_scanf_float+0x98>)
    e940:	ldr.w	pc, [r1, r2, lsl #2]
    e944:	.word	0x0000ea83
    e948:	.word	0x0000e90d
    e94c:	.word	0x0000e90d
    e950:	.word	0x0000e90d
    e954:	.word	0x0000eae3
    e958:	.word	0x0000eabb
    e95c:	.word	0x0000e90d
    e960:	.word	0x0000e90d
    e964:	.word	0x0000ea91
    e968:	.word	0x0000e90d
    e96c:	.word	0x0000e90d
    e970:	.word	0x0000e90d
    e974:	.word	0x0000e90d
    e978:	.word	0x0000ea49
    e97c:	sub.w	r2, r3, #65	; 0x41
    e980:	b.n	e93a <_scanf_float+0x8e>
    e982:	cmp	r1, #14
    e984:	bhi.n	e90c <_scanf_float+0x60>
    e986:	add	r0, pc, #4	; (adr r0, e98c <_scanf_float+0xe0>)
    e988:	ldr.w	pc, [r0, r1, lsl #2]
    e98c:	.word	0x0000ea3b
    e990:	.word	0x0000e90d
    e994:	.word	0x0000ea3b
    e998:	.word	0x0000eacf
    e99c:	.word	0x0000e90d
    e9a0:	.word	0x0000e9e9
    e9a4:	.word	0x0000ea25
    e9a8:	.word	0x0000ea25
    e9ac:	.word	0x0000ea25
    e9b0:	.word	0x0000ea25
    e9b4:	.word	0x0000ea25
    e9b8:	.word	0x0000ea25
    e9bc:	.word	0x0000ea25
    e9c0:	.word	0x0000ea25
    e9c4:	.word	0x0000ea25
    e9c8:	cmp	r3, #110	; 0x6e
    e9ca:	bhi.n	e9e0 <_scanf_float+0x134>
    e9cc:	cmp	r3, #96	; 0x60
    e9ce:	bhi.n	e936 <_scanf_float+0x8a>
    e9d0:	cmp	r3, #84	; 0x54
    e9d2:	beq.n	eac4 <_scanf_float+0x218>
    e9d4:	cmp	r3, #89	; 0x59
    e9d6:	bne.n	e90c <_scanf_float+0x60>
    e9d8:	cmp	r5, #7
    e9da:	bne.n	e90c <_scanf_float+0x60>
    e9dc:	movs	r5, #8
    e9de:	b.n	ea34 <_scanf_float+0x188>
    e9e0:	cmp	r3, #116	; 0x74
    e9e2:	beq.n	eac4 <_scanf_float+0x218>
    e9e4:	cmp	r3, #121	; 0x79
    e9e6:	b.n	e9d6 <_scanf_float+0x12a>
    e9e8:	ldr	r1, [r4, #0]
    e9ea:	lsls	r0, r1, #23
    e9ec:	bpl.n	ea24 <_scanf_float+0x178>
    e9ee:	ldr	r3, [sp, #8]
    e9f0:	bic.w	r1, r1, #128	; 0x80
    e9f4:	str	r1, [r4, #0]
    e9f6:	add.w	r9, r9, #1
    e9fa:	cbz	r3, ea04 <_scanf_float+0x158>
    e9fc:	subs	r3, #1
    e9fe:	adds	r2, #1
    ea00:	str	r3, [sp, #8]
    ea02:	str	r2, [r4, #8]
    ea04:	ldr	r3, [r4, #8]
    ea06:	subs	r3, #1
    ea08:	str	r3, [r4, #8]
    ea0a:	ldr	r3, [r4, #16]
    ea0c:	adds	r3, #1
    ea0e:	str	r3, [r4, #16]
    ea10:	ldr	r3, [r7, #4]
    ea12:	subs	r3, #1
    ea14:	cmp	r3, #0
    ea16:	str	r3, [r7, #4]
    ea18:	ble.w	eb24 <_scanf_float+0x278>
    ea1c:	ldr	r3, [r7, #0]
    ea1e:	adds	r3, #1
    ea20:	str	r3, [r7, #0]
    ea22:	b.n	e8f2 <_scanf_float+0x46>
    ea24:	cmn.w	sl, r5
    ea28:	bne.w	e90c <_scanf_float+0x60>
    ea2c:	ldr	r2, [r4, #0]
    ea2e:	bic.w	r2, r2, #384	; 0x180
    ea32:	str	r2, [r4, #0]
    ea34:	strb.w	r3, [r6], #1
    ea38:	b.n	ea04 <_scanf_float+0x158>
    ea3a:	ldr	r2, [r4, #0]
    ea3c:	lsls	r0, r2, #24
    ea3e:	bpl.w	e90c <_scanf_float+0x60>
    ea42:	bic.w	r2, r2, #128	; 0x80
    ea46:	b.n	ea32 <_scanf_float+0x186>
    ea48:	cmp.w	sl, #0
    ea4c:	bne.n	ea6c <_scanf_float+0x1c0>
    ea4e:	cmp.w	r9, #0
    ea52:	bne.n	ea72 <_scanf_float+0x1c6>
    ea54:	ldr	r2, [r4, #0]
    ea56:	and.w	r1, r2, #1792	; 0x700
    ea5a:	cmp.w	r1, #1792	; 0x700
    ea5e:	bne.n	ea72 <_scanf_float+0x1c6>
    ea60:	bic.w	r2, r2, #1920	; 0x780
    ea64:	str	r2, [r4, #0]
    ea66:	mov.w	sl, #1
    ea6a:	b.n	ea34 <_scanf_float+0x188>
    ea6c:	cmp.w	sl, #2
    ea70:	beq.n	eb1e <_scanf_float+0x272>
    ea72:	cmp	r5, #1
    ea74:	beq.n	ea7c <_scanf_float+0x1d0>
    ea76:	cmp	r5, #4
    ea78:	bne.w	e90c <_scanf_float+0x60>
    ea7c:	adds	r5, #1
    ea7e:	uxtb	r5, r5
    ea80:	b.n	ea34 <_scanf_float+0x188>
    ea82:	cmp.w	sl, #1
    ea86:	bne.w	e90c <_scanf_float+0x60>
    ea8a:	mov.w	sl, #2
    ea8e:	b.n	ea34 <_scanf_float+0x188>
    ea90:	cbnz	r5, eab2 <_scanf_float+0x206>
    ea92:	cmp.w	r9, #0
    ea96:	bne.w	e912 <_scanf_float+0x66>
    ea9a:	ldr	r2, [r4, #0]
    ea9c:	and.w	r1, r2, #1792	; 0x700
    eaa0:	cmp.w	r1, #1792	; 0x700
    eaa4:	bne.w	e91a <_scanf_float+0x6e>
    eaa8:	bic.w	r2, r2, #1920	; 0x780
    eaac:	str	r2, [r4, #0]
    eaae:	movs	r5, #1
    eab0:	b.n	ea34 <_scanf_float+0x188>
    eab2:	cmp	r5, #3
    eab4:	beq.n	ea7c <_scanf_float+0x1d0>
    eab6:	cmp	r5, #5
    eab8:	b.n	ea78 <_scanf_float+0x1cc>
    eaba:	cmp	r5, #2
    eabc:	bne.w	e90c <_scanf_float+0x60>
    eac0:	movs	r5, #3
    eac2:	b.n	ea34 <_scanf_float+0x188>
    eac4:	cmp	r5, #6
    eac6:	bne.w	e90c <_scanf_float+0x60>
    eaca:	movs	r5, #7
    eacc:	b.n	ea34 <_scanf_float+0x188>
    eace:	ldr	r2, [r4, #0]
    ead0:	lsls	r1, r2, #22
    ead2:	bpl.w	e90c <_scanf_float+0x60>
    ead6:	bic.w	r2, r2, #640	; 0x280
    eada:	str	r2, [r4, #0]
    eadc:	str.w	r9, [sp, #4]
    eae0:	b.n	ea34 <_scanf_float+0x188>
    eae2:	ldr	r2, [r4, #0]
    eae4:	and.w	r1, r2, #1280	; 0x500
    eae8:	cmp.w	r1, #1024	; 0x400
    eaec:	beq.n	eafc <_scanf_float+0x250>
    eaee:	lsls	r0, r2, #21
    eaf0:	bpl.w	e90c <_scanf_float+0x60>
    eaf4:	cmp.w	r9, #0
    eaf8:	beq.w	e91a <_scanf_float+0x6e>
    eafc:	lsls	r1, r2, #22
    eafe:	it	pl
    eb00:	ldrpl	r1, [sp, #4]
    eb02:	bic.w	r2, r2, #1920	; 0x780
    eb06:	it	pl
    eb08:	subpl.w	r1, r9, r1
    eb0c:	orr.w	r2, r2, #384	; 0x180
    eb10:	it	pl
    eb12:	strdpl	r1, r6, [sp, #16]
    eb16:	str	r2, [r4, #0]
    eb18:	mov.w	r9, #0
    eb1c:	b.n	ea34 <_scanf_float+0x188>
    eb1e:	mov.w	sl, #3
    eb22:	b.n	ea34 <_scanf_float+0x188>
    eb24:	ldr.w	r3, [r4, #384]	; 0x180
    eb28:	mov	r1, r7
    eb2a:	mov	r0, r8
    eb2c:	blx	r3
    eb2e:	cmp	r0, #0
    eb30:	beq.w	e8f2 <_scanf_float+0x46>
    eb34:	b.n	e90c <_scanf_float+0x60>
    eb36:	ldr.w	r3, [r4, #380]	; 0x17c
    eb3a:	ldrb.w	r1, [r6, #-1]!
    eb3e:	mov	r2, r7
    eb40:	mov	r0, r8
    eb42:	blx	r3
    eb44:	ldr	r3, [r4, #16]
    eb46:	subs	r3, #1
    eb48:	str	r3, [r4, #16]
    eb4a:	b.n	e926 <_scanf_float+0x7a>
    eb4c:	subs	r3, r5, #1
    eb4e:	cmp	r3, #6
    eb50:	bhi.n	eb9e <_scanf_float+0x2f2>
    eb52:	cmp	r5, #2
    eb54:	bhi.n	ebc4 <_scanf_float+0x318>
    eb56:	cmp	r6, fp
    eb58:	bls.w	e92c <_scanf_float+0x80>
    eb5c:	ldr.w	r3, [r4, #380]	; 0x17c
    eb60:	ldrb.w	r1, [r6, #-1]!
    eb64:	mov	r2, r7
    eb66:	mov	r0, r8
    eb68:	blx	r3
    eb6a:	ldr	r3, [r4, #16]
    eb6c:	subs	r3, #1
    eb6e:	str	r3, [r4, #16]
    eb70:	b.n	eb56 <_scanf_float+0x2aa>
    eb72:	ldr	r0, [sp, #8]
    eb74:	ldr.w	r3, [r4, #380]	; 0x17c
    eb78:	ldrb.w	r1, [r0, #-1]!
    eb7c:	str	r0, [sp, #8]
    eb7e:	mov	r2, r7
    eb80:	mov	r0, r8
    eb82:	blx	r3
    eb84:	ldr	r3, [r4, #16]
    eb86:	subs	r3, #1
    eb88:	str	r3, [r4, #16]
    eb8a:	add.w	sl, sl, #4294967295
    eb8e:	uxtb.w	sl, sl
    eb92:	cmp.w	sl, #2
    eb96:	bne.n	eb72 <_scanf_float+0x2c6>
    eb98:	subs	r5, #3
    eb9a:	uxtb	r5, r5
    eb9c:	subs	r6, r6, r5
    eb9e:	ldr	r3, [r4, #0]
    eba0:	lsls	r2, r3, #23
    eba2:	bpl.n	ec04 <_scanf_float+0x358>
    eba4:	lsls	r3, r3, #21
    eba6:	bpl.n	ebca <_scanf_float+0x31e>
    eba8:	cmp	r6, fp
    ebaa:	bls.w	e92c <_scanf_float+0x80>
    ebae:	ldr.w	r3, [r4, #380]	; 0x17c
    ebb2:	ldrb.w	r1, [r6, #-1]!
    ebb6:	mov	r2, r7
    ebb8:	mov	r0, r8
    ebba:	blx	r3
    ebbc:	ldr	r3, [r4, #16]
    ebbe:	subs	r3, #1
    ebc0:	str	r3, [r4, #16]
    ebc2:	b.n	eba8 <_scanf_float+0x2fc>
    ebc4:	mov	sl, r5
    ebc6:	str	r6, [sp, #8]
    ebc8:	b.n	eb8a <_scanf_float+0x2de>
    ebca:	ldrb.w	r1, [r6, #-1]
    ebce:	ldr	r3, [r4, #16]
    ebd0:	cmp	r1, #101	; 0x65
    ebd2:	add.w	r3, r3, #4294967295
    ebd6:	add.w	r5, r6, #4294967295
    ebda:	str	r3, [r4, #16]
    ebdc:	beq.n	ebf8 <_scanf_float+0x34c>
    ebde:	cmp	r1, #69	; 0x45
    ebe0:	beq.n	ebf8 <_scanf_float+0x34c>
    ebe2:	ldr.w	r3, [r4, #380]	; 0x17c
    ebe6:	mov	r2, r7
    ebe8:	mov	r0, r8
    ebea:	blx	r3
    ebec:	ldr	r3, [r4, #16]
    ebee:	ldrb.w	r1, [r6, #-2]
    ebf2:	subs	r3, #1
    ebf4:	subs	r5, r6, #2
    ebf6:	str	r3, [r4, #16]
    ebf8:	ldr.w	r3, [r4, #380]	; 0x17c
    ebfc:	mov	r2, r7
    ebfe:	mov	r0, r8
    ec00:	blx	r3
    ec02:	mov	r6, r5
    ec04:	ldr	r5, [r4, #0]
    ec06:	ands.w	r5, r5, #16
    ec0a:	bne.n	eca8 <_scanf_float+0x3fc>
    ec0c:	strb	r5, [r6, #0]
    ec0e:	ldr	r3, [r4, #0]
    ec10:	and.w	r3, r3, #1536	; 0x600
    ec14:	cmp.w	r3, #1024	; 0x400
    ec18:	bne.n	ec50 <_scanf_float+0x3a4>
    ec1a:	ldr	r3, [sp, #4]
    ec1c:	cmp	r3, r9
    ec1e:	sub.w	r2, r3, r9
    ec22:	bne.n	ec6a <_scanf_float+0x3be>
    ec24:	movs	r2, #0
    ec26:	mov	r1, fp
    ec28:	mov	r0, r8
    ec2a:	bl	def4 <_strtod_r>
    ec2e:	ldr	r3, [sp, #12]
    ec30:	ldr	r1, [r4, #0]
    ec32:	ldr	r3, [r3, #0]
    ec34:	tst.w	r1, #2
    ec38:	add.w	r2, r3, #4
    ec3c:	beq.n	ec80 <_scanf_float+0x3d4>
    ec3e:	ldr	r1, [sp, #12]
    ec40:	str	r2, [r1, #0]
    ec42:	ldr	r3, [r3, #0]
    ec44:	vstr	d0, [r3]
    ec48:	ldr	r3, [r4, #12]
    ec4a:	adds	r3, #1
    ec4c:	str	r3, [r4, #12]
    ec4e:	b.n	e92e <_scanf_float+0x82>
    ec50:	ldr	r3, [sp, #16]
    ec52:	cmp	r3, #0
    ec54:	beq.n	ec24 <_scanf_float+0x378>
    ec56:	ldr	r1, [sp, #20]
    ec58:	movs	r3, #10
    ec5a:	mov	r2, r5
    ec5c:	adds	r1, #1
    ec5e:	mov	r0, r8
    ec60:	bl	e004 <_strtol_r>
    ec64:	ldr	r3, [sp, #16]
    ec66:	ldr	r6, [sp, #20]
    ec68:	subs	r2, r0, r3
    ec6a:	addw	r3, r4, #367	; 0x16f
    ec6e:	cmp	r6, r3
    ec70:	it	cs
    ec72:	addcs.w	r6, r4, #366	; 0x16e
    ec76:	ldr	r1, [pc, #52]	; (ecac <_scanf_float+0x400>)
    ec78:	mov	r0, r6
    ec7a:	bl	ee7c <siprintf>
    ec7e:	b.n	ec24 <_scanf_float+0x378>
    ec80:	tst.w	r1, #4
    ec84:	ldr	r1, [sp, #12]
    ec86:	str	r2, [r1, #0]
    ec88:	bne.n	ec42 <_scanf_float+0x396>
    ec8a:	vcmp.f64	d0, d0
    ec8e:	vmrs	APSR_nzcv, fpscr
    ec92:	ldr	r6, [r3, #0]
    ec94:	bvc.n	eca2 <_scanf_float+0x3f6>
    ec96:	ldr	r0, [pc, #24]	; (ecb0 <_scanf_float+0x404>)
    ec98:	bl	f330 <nanf>
    ec9c:	vstr	s0, [r6]
    eca0:	b.n	ec48 <_scanf_float+0x39c>
    eca2:	vcvt.f32.f64	s0, d0
    eca6:	b.n	ec9c <_scanf_float+0x3f0>
    eca8:	movs	r5, #0
    ecaa:	b.n	e92e <_scanf_float+0x82>
    ecac:	.word	0x2000147b
    ecb0:	.word	0x20000df4

0000ecb4 <std>:
    ecb4:	movs	r3, #0
    ecb6:	push	{r4, lr}
    ecb8:	mov	r4, r0
    ecba:	strd	r3, r3, [r0]
    ecbe:	strd	r3, r3, [r0, #16]
    ecc2:	str	r3, [r0, #8]
    ecc4:	strh	r1, [r0, #12]
    ecc6:	str	r3, [r0, #100]	; 0x64
    ecc8:	strh	r2, [r0, #14]
    ecca:	str	r3, [r0, #24]
    eccc:	mov	r1, r3
    ecce:	movs	r2, #8
    ecd0:	adds	r0, #92	; 0x5c
    ecd2:	bl	a758 <memset>
    ecd6:	ldr	r3, [pc, #20]	; (ecec <std+0x38>)
    ecd8:	str	r3, [r4, #36]	; 0x24
    ecda:	ldr	r3, [pc, #20]	; (ecf0 <std+0x3c>)
    ecdc:	str	r3, [r4, #40]	; 0x28
    ecde:	ldr	r3, [pc, #20]	; (ecf4 <std+0x40>)
    ece0:	str	r3, [r4, #44]	; 0x2c
    ece2:	ldr	r3, [pc, #20]	; (ecf8 <std+0x44>)
    ece4:	str	r4, [r4, #32]
    ece6:	str	r3, [r4, #48]	; 0x30
    ece8:	pop	{r4, pc}
    ecea:	nop
    ecec:	.word	0x0000ef15
    ecf0:	.word	0x0000ef3b
    ecf4:	.word	0x0000ef73
    ecf8:	.word	0x0000ef97

0000ecfc <stdio_exit_handler>:
    ecfc:	ldr	r2, [pc, #8]	; (ed08 <stdio_exit_handler+0xc>)
    ecfe:	ldr	r1, [pc, #12]	; (ed0c <stdio_exit_handler+0x10>)
    ed00:	ldr	r0, [pc, #12]	; (ed10 <stdio_exit_handler+0x14>)
    ed02:	b.w	edd8 <_fwalk_sglue>
    ed06:	nop
    ed08:	.word	0x20002300
    ed0c:	.word	0x00011aa5
    ed10:	.word	0x2000230c

0000ed14 <cleanup_stdio>:
    ed14:	ldr	r1, [r0, #4]
    ed16:	ldr	r3, [pc, #48]	; (ed48 <cleanup_stdio+0x34>)
    ed18:	cmp	r1, r3
    ed1a:	push	{r4, lr}
    ed1c:	mov	r4, r0
    ed1e:	beq.n	ed24 <cleanup_stdio+0x10>
    ed20:	bl	11aa4 <_fflush_r>
    ed24:	ldr	r1, [r4, #8]
    ed26:	ldr	r3, [pc, #36]	; (ed4c <cleanup_stdio+0x38>)
    ed28:	cmp	r1, r3
    ed2a:	beq.n	ed32 <cleanup_stdio+0x1e>
    ed2c:	mov	r0, r4
    ed2e:	bl	11aa4 <_fflush_r>
    ed32:	ldr	r1, [r4, #12]
    ed34:	ldr	r3, [pc, #24]	; (ed50 <cleanup_stdio+0x3c>)
    ed36:	cmp	r1, r3
    ed38:	beq.n	ed44 <cleanup_stdio+0x30>
    ed3a:	mov	r0, r4
    ed3c:	ldmia.w	sp!, {r4, lr}
    ed40:	b.w	11aa4 <_fflush_r>
    ed44:	pop	{r4, pc}
    ed46:	nop
    ed48:	.word	0x2002085c
    ed4c:	.word	0x200208c4
    ed50:	.word	0x2002092c

0000ed54 <global_stdio_init.part.0>:
    ed54:	push	{r4, lr}
    ed56:	ldr	r3, [pc, #44]	; (ed84 <global_stdio_init.part.0+0x30>)
    ed58:	ldr	r4, [pc, #44]	; (ed88 <global_stdio_init.part.0+0x34>)
    ed5a:	ldr	r2, [pc, #48]	; (ed8c <global_stdio_init.part.0+0x38>)
    ed5c:	str	r2, [r3, #0]
    ed5e:	mov	r0, r4
    ed60:	movs	r2, #0
    ed62:	movs	r1, #4
    ed64:	bl	ecb4 <std>
    ed68:	add.w	r0, r4, #104	; 0x68
    ed6c:	movs	r2, #1
    ed6e:	movs	r1, #9
    ed70:	bl	ecb4 <std>
    ed74:	add.w	r0, r4, #208	; 0xd0
    ed78:	movs	r2, #2
    ed7a:	ldmia.w	sp!, {r4, lr}
    ed7e:	movs	r1, #18
    ed80:	b.w	ecb4 <std>
    ed84:	.word	0x20020994
    ed88:	.word	0x2002085c
    ed8c:	.word	0x0000ecfd

0000ed90 <__sfp_lock_acquire>:
    ed90:	ldr	r0, [pc, #4]	; (ed98 <__sfp_lock_acquire+0x8>)
    ed92:	b.w	f258 <__retarget_lock_acquire_recursive>
    ed96:	nop
    ed98:	.word	0x200215e3

0000ed9c <__sfp_lock_release>:
    ed9c:	ldr	r0, [pc, #4]	; (eda4 <__sfp_lock_release+0x8>)
    ed9e:	b.w	f25a <__retarget_lock_release_recursive>
    eda2:	nop
    eda4:	.word	0x200215e3

0000eda8 <__sinit>:
    eda8:	push	{r4, lr}
    edaa:	mov	r4, r0
    edac:	bl	ed90 <__sfp_lock_acquire>
    edb0:	ldr	r3, [r4, #32]
    edb2:	cbz	r3, edbc <__sinit+0x14>
    edb4:	ldmia.w	sp!, {r4, lr}
    edb8:	b.w	ed9c <__sfp_lock_release>
    edbc:	ldr	r3, [pc, #16]	; (edd0 <__sinit+0x28>)
    edbe:	str	r3, [r4, #32]
    edc0:	ldr	r3, [pc, #16]	; (edd4 <__sinit+0x2c>)
    edc2:	ldr	r3, [r3, #0]
    edc4:	cmp	r3, #0
    edc6:	bne.n	edb4 <__sinit+0xc>
    edc8:	bl	ed54 <global_stdio_init.part.0>
    edcc:	b.n	edb4 <__sinit+0xc>
    edce:	nop
    edd0:	.word	0x0000ed15
    edd4:	.word	0x20020994

0000edd8 <_fwalk_sglue>:
    edd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    eddc:	mov	r7, r0
    edde:	mov	r8, r1
    ede0:	mov	r4, r2
    ede2:	movs	r6, #0
    ede4:	ldrd	r9, r5, [r4, #4]
    ede8:	subs.w	r9, r9, #1
    edec:	bpl.n	edfa <_fwalk_sglue+0x22>
    edee:	ldr	r4, [r4, #0]
    edf0:	cmp	r4, #0
    edf2:	bne.n	ede4 <_fwalk_sglue+0xc>
    edf4:	mov	r0, r6
    edf6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    edfa:	ldrh	r3, [r5, #12]
    edfc:	cmp	r3, #1
    edfe:	bls.n	ee10 <_fwalk_sglue+0x38>
    ee00:	ldrsh.w	r3, [r5, #14]
    ee04:	adds	r3, #1
    ee06:	beq.n	ee10 <_fwalk_sglue+0x38>
    ee08:	mov	r1, r5
    ee0a:	mov	r0, r7
    ee0c:	blx	r8
    ee0e:	orrs	r6, r0
    ee10:	adds	r5, #104	; 0x68
    ee12:	b.n	ede8 <_fwalk_sglue+0x10>

0000ee14 <sniprintf>:
    ee14:	push	{r2, r3}
    ee16:	push	{r4, r5, lr}
    ee18:	ldr	r3, [pc, #92]	; (ee78 <sniprintf+0x64>)
    ee1a:	subs	r4, r1, #0
    ee1c:	ldr	r5, [r3, #0]
    ee1e:	sub	sp, #116	; 0x74
    ee20:	bge.n	ee34 <sniprintf+0x20>
    ee22:	movs	r3, #139	; 0x8b
    ee24:	str	r3, [r5, #0]
    ee26:	mov.w	r0, #4294967295
    ee2a:	add	sp, #116	; 0x74
    ee2c:	ldmia.w	sp!, {r4, r5, lr}
    ee30:	add	sp, #8
    ee32:	bx	lr
    ee34:	mov.w	r3, #520	; 0x208
    ee38:	strh.w	r3, [sp, #20]
    ee3c:	ite	ne
    ee3e:	addne.w	r3, r4, #4294967295
    ee42:	moveq	r3, r4
    ee44:	str	r3, [sp, #16]
    ee46:	str	r3, [sp, #28]
    ee48:	movw	r3, #65535	; 0xffff
    ee4c:	str	r0, [sp, #8]
    ee4e:	str	r0, [sp, #24]
    ee50:	strh.w	r3, [sp, #22]
    ee54:	ldr	r2, [sp, #128]	; 0x80
    ee56:	add	r3, sp, #132	; 0x84
    ee58:	add	r1, sp, #8
    ee5a:	mov	r0, r5
    ee5c:	str	r3, [sp, #4]
    ee5e:	bl	1115c <_svfiprintf_r>
    ee62:	adds	r3, r0, #1
    ee64:	itt	lt
    ee66:	movlt	r3, #139	; 0x8b
    ee68:	strlt	r3, [r5, #0]
    ee6a:	cmp	r4, #0
    ee6c:	beq.n	ee2a <sniprintf+0x16>
    ee6e:	ldr	r3, [sp, #8]
    ee70:	movs	r2, #0
    ee72:	strb	r2, [r3, #0]
    ee74:	b.n	ee2a <sniprintf+0x16>
    ee76:	nop
    ee78:	.word	0x20002358

0000ee7c <siprintf>:
    ee7c:	push	{r1, r2, r3}
    ee7e:	push	{lr}
    ee80:	sub	sp, #112	; 0x70
    ee82:	add	r3, sp, #116	; 0x74
    ee84:	str	r0, [sp, #8]
    ee86:	str	r0, [sp, #24]
    ee88:	mvn.w	r1, #2147483648	; 0x80000000
    ee8c:	ldr	r0, [pc, #36]	; (eeb4 <siprintf+0x38>)
    ee8e:	str	r1, [sp, #28]
    ee90:	str	r1, [sp, #16]
    ee92:	ldr	r1, [pc, #36]	; (eeb8 <siprintf+0x3c>)
    ee94:	ldr.w	r2, [r3], #4
    ee98:	str	r1, [sp, #20]
    ee9a:	ldr	r0, [r0, #0]
    ee9c:	str	r3, [sp, #4]
    ee9e:	add	r1, sp, #8
    eea0:	bl	1115c <_svfiprintf_r>
    eea4:	ldr	r3, [sp, #8]
    eea6:	movs	r2, #0
    eea8:	strb	r2, [r3, #0]
    eeaa:	add	sp, #112	; 0x70
    eeac:	ldr.w	lr, [sp], #4
    eeb0:	add	sp, #12
    eeb2:	bx	lr
    eeb4:	.word	0x20002358
    eeb8:	.word	0xffff0208

0000eebc <siscanf>:
    eebc:	push	{r1, r2, r3}
    eebe:	push	{r4, lr}
    eec0:	sub	sp, #124	; 0x7c
    eec2:	add	r4, sp, #132	; 0x84
    eec4:	mov.w	r1, #516	; 0x204
    eec8:	ldr.w	r2, [r4], #4
    eecc:	str	r2, [sp, #4]
    eece:	strh.w	r1, [sp, #28]
    eed2:	str	r0, [sp, #16]
    eed4:	str	r0, [sp, #32]
    eed6:	bl	f310 <strlen>
    eeda:	ldr	r3, [pc, #48]	; (ef0c <siscanf+0x50>)
    eedc:	str	r0, [sp, #20]
    eede:	str	r0, [sp, #36]	; 0x24
    eee0:	str	r3, [sp, #52]	; 0x34
    eee2:	ldr	r0, [pc, #44]	; (ef10 <siscanf+0x54>)
    eee4:	ldr	r2, [sp, #4]
    eee6:	ldr	r0, [r0, #0]
    eee8:	str	r4, [sp, #12]
    eeea:	movs	r3, #0
    eeec:	str	r3, [sp, #68]	; 0x44
    eeee:	str	r3, [sp, #88]	; 0x58
    eef0:	movw	r3, #65535	; 0xffff
    eef4:	strh.w	r3, [sp, #30]
    eef8:	add	r1, sp, #16
    eefa:	mov	r3, r4
    eefc:	bl	1140c <__ssvfiscanf_r>
    ef00:	add	sp, #124	; 0x7c
    ef02:	ldmia.w	sp!, {r4, lr}
    ef06:	add	sp, #12
    ef08:	bx	lr
    ef0a:	nop
    ef0c:	.word	0x0000ef37
    ef10:	.word	0x20002358

0000ef14 <__sread>:
    ef14:	push	{r4, lr}
    ef16:	mov	r4, r1
    ef18:	ldrsh.w	r1, [r1, #14]
    ef1c:	bl	f19c <_read_r>
    ef20:	cmp	r0, #0
    ef22:	itete	ge
    ef24:	ldrge	r3, [r4, #84]	; 0x54
    ef26:	ldrhlt	r3, [r4, #12]
    ef28:	addge	r3, r3, r0
    ef2a:	biclt.w	r3, r3, #4096	; 0x1000
    ef2e:	ite	ge
    ef30:	strge	r3, [r4, #84]	; 0x54
    ef32:	strhlt	r3, [r4, #12]
    ef34:	pop	{r4, pc}

0000ef36 <__seofread>:
    ef36:	movs	r0, #0
    ef38:	bx	lr

0000ef3a <__swrite>:
    ef3a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef3e:	mov	r7, r3
    ef40:	ldrh	r3, [r1, #12]
    ef42:	lsls	r3, r3, #23
    ef44:	mov	r5, r0
    ef46:	mov	r4, r1
    ef48:	mov	r6, r2
    ef4a:	bpl.n	ef58 <__swrite+0x1e>
    ef4c:	ldrsh.w	r1, [r1, #14]
    ef50:	movs	r3, #2
    ef52:	movs	r2, #0
    ef54:	bl	f178 <_lseek_r>
    ef58:	ldrh	r3, [r4, #12]
    ef5a:	ldrsh.w	r1, [r4, #14]
    ef5e:	bic.w	r3, r3, #4096	; 0x1000
    ef62:	strh	r3, [r4, #12]
    ef64:	mov	r2, r6
    ef66:	mov	r3, r7
    ef68:	mov	r0, r5
    ef6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef6e:	b.w	f1e0 <_write_r>

0000ef72 <__sseek>:
    ef72:	push	{r4, lr}
    ef74:	mov	r4, r1
    ef76:	ldrsh.w	r1, [r1, #14]
    ef7a:	bl	f178 <_lseek_r>
    ef7e:	adds	r3, r0, #1
    ef80:	ldrh	r3, [r4, #12]
    ef82:	itete	ne
    ef84:	strne	r0, [r4, #84]	; 0x54
    ef86:	biceq.w	r3, r3, #4096	; 0x1000
    ef8a:	orrne.w	r3, r3, #4096	; 0x1000
    ef8e:	strheq	r3, [r4, #12]
    ef90:	it	ne
    ef92:	strhne	r3, [r4, #12]
    ef94:	pop	{r4, pc}

0000ef96 <__sclose>:
    ef96:	ldrsh.w	r1, [r1, #14]
    ef9a:	b.w	f158 <_close_r>

0000ef9e <_vdiprintf_r>:
    ef9e:	push	{r4, r5, r6, r7, lr}
    efa0:	sub.w	sp, sp, #532	; 0x214
    efa4:	mov	r6, r1
    efa6:	add	r7, sp, #16
    efa8:	mov.w	r1, #512	; 0x200
    efac:	str	r1, [sp, #12]
    efae:	str	r3, [sp, #0]
    efb0:	mov	r1, r7
    efb2:	mov	r3, r2
    efb4:	add	r2, sp, #12
    efb6:	mov	r5, r0
    efb8:	bl	effc <_vasniprintf_r>
    efbc:	mov	r4, r0
    efbe:	cbz	r0, efe2 <_vdiprintf_r+0x44>
    efc0:	mov	r2, r0
    efc2:	ldr	r3, [sp, #12]
    efc4:	mov	r1, r6
    efc6:	mov	r0, r5
    efc8:	bl	f1e0 <_write_r>
    efcc:	cmp	r4, r7
    efce:	str	r0, [sp, #12]
    efd0:	beq.n	efda <_vdiprintf_r+0x3c>
    efd2:	mov	r1, r4
    efd4:	mov	r0, r5
    efd6:	bl	ff28 <_free_r>
    efda:	ldr	r0, [sp, #12]
    efdc:	add.w	sp, sp, #532	; 0x214
    efe0:	pop	{r4, r5, r6, r7, pc}
    efe2:	mov.w	r0, #4294967295
    efe6:	b.n	efdc <_vdiprintf_r+0x3e>

0000efe8 <vdiprintf>:
    efe8:	mov	r3, r2
    efea:	mov	r2, r1
    efec:	mov	r1, r0
    efee:	ldr	r0, [pc, #8]	; (eff8 <vdiprintf+0x10>)
    eff0:	ldr	r0, [r0, #0]
    eff2:	b.w	ef9e <_vdiprintf_r>
    eff6:	nop
    eff8:	.word	0x20002358

0000effc <_vasniprintf_r>:
    effc:	push	{r4, r5, lr}
    effe:	mov	r5, r2
    f000:	sub	sp, #108	; 0x6c
    f002:	ldr	r4, [r5, #0]
    f004:	mov	r2, r3
    f006:	cbz	r1, f02c <_vasniprintf_r+0x30>
    f008:	cmp	r4, #0
    f00a:	itee	ne
    f00c:	movne.w	r3, #1544	; 0x608
    f010:	moveq.w	r3, #648	; 0x288
    f014:	moveq	r1, #0
    f016:	cmp	r4, #0
    f018:	strh.w	r3, [sp, #12]
    f01c:	str	r1, [sp, #0]
    f01e:	str	r1, [sp, #16]
    f020:	bge.n	f034 <_vasniprintf_r+0x38>
    f022:	movs	r3, #139	; 0x8b
    f024:	str	r3, [r0, #0]
    f026:	movs	r0, #0
    f028:	add	sp, #108	; 0x6c
    f02a:	pop	{r4, r5, pc}
    f02c:	mov.w	r3, #648	; 0x288
    f030:	mov	r4, r1
    f032:	b.n	f016 <_vasniprintf_r+0x1a>
    f034:	movw	r3, #65535	; 0xffff
    f038:	strh.w	r3, [sp, #14]
    f03c:	mov	r1, sp
    f03e:	ldr	r3, [sp, #120]	; 0x78
    f040:	str	r4, [sp, #8]
    f042:	str	r4, [sp, #20]
    f044:	bl	1115c <_svfiprintf_r>
    f048:	subs	r3, r0, #0
    f04a:	itt	ge
    f04c:	strge	r3, [r5, #0]
    f04e:	ldrge	r3, [sp, #0]
    f050:	mov.w	r0, #0
    f054:	itt	ge
    f056:	strbge	r0, [r3, #0]
    f058:	ldrge	r0, [sp, #16]
    f05a:	b.n	f028 <_vasniprintf_r+0x2c>

0000f05c <memcmp>:
    f05c:	push	{r4, lr}
    f05e:	subs	r1, #1
    f060:	add	r2, r0
    f062:	cmp	r0, r2
    f064:	bne.n	f06a <memcmp+0xe>
    f066:	movs	r0, #0
    f068:	b.n	f076 <memcmp+0x1a>
    f06a:	ldrb	r3, [r0, #0]
    f06c:	ldrb.w	r4, [r1, #1]!
    f070:	cmp	r3, r4
    f072:	beq.n	f078 <memcmp+0x1c>
    f074:	subs	r0, r3, r4
    f076:	pop	{r4, pc}
    f078:	adds	r0, #1
    f07a:	b.n	f062 <memcmp+0x6>

0000f07c <memmove>:
    f07c:	cmp	r0, r1
    f07e:	push	{r4, lr}
    f080:	add.w	r4, r1, r2
    f084:	bls.n	f08c <memmove+0x10>
    f086:	cmp	r4, r0
    f088:	mov	r3, r4
    f08a:	bhi.n	f09c <memmove+0x20>
    f08c:	subs	r3, r0, #1
    f08e:	cmp	r1, r4
    f090:	beq.n	f0a4 <memmove+0x28>
    f092:	ldrb.w	r2, [r1], #1
    f096:	strb.w	r2, [r3, #1]!
    f09a:	b.n	f08e <memmove+0x12>
    f09c:	add	r2, r0
    f09e:	mov	r1, r0
    f0a0:	cmp	r2, r1
    f0a2:	bne.n	f0a6 <memmove+0x2a>
    f0a4:	pop	{r4, pc}
    f0a6:	ldrb.w	r4, [r3, #-1]!
    f0aa:	strb.w	r4, [r2, #-1]!
    f0ae:	b.n	f0a0 <memmove+0x24>

0000f0b0 <strlcat>:
    f0b0:	push	{r4, r5, r6, lr}
    f0b2:	mov	r4, r0
    f0b4:	adds	r6, r2, r0
    f0b6:	cmp	r4, r6
    f0b8:	mov	r3, r4
    f0ba:	bne.n	f0ce <strlcat+0x1e>
    f0bc:	subs	r4, r3, r0
    f0be:	subs	r2, r2, r4
    f0c0:	subs	r6, r2, #1
    f0c2:	cbnz	r2, f0d8 <strlcat+0x28>
    f0c4:	mov	r0, r1
    f0c6:	bl	f310 <strlen>
    f0ca:	add	r0, r4
    f0cc:	pop	{r4, r5, r6, pc}
    f0ce:	ldrb	r5, [r3, #0]
    f0d0:	adds	r4, #1
    f0d2:	cmp	r5, #0
    f0d4:	bne.n	f0b6 <strlcat+0x6>
    f0d6:	b.n	f0bc <strlcat+0xc>
    f0d8:	mov	r5, r1
    f0da:	mov	r2, r5
    f0dc:	ldrb.w	r0, [r5], #1
    f0e0:	cbnz	r0, f0ea <strlcat+0x3a>
    f0e2:	subs	r2, r2, r1
    f0e4:	strb	r0, [r3, #0]
    f0e6:	adds	r0, r2, r4
    f0e8:	b.n	f0cc <strlcat+0x1c>
    f0ea:	cmp	r6, #0
    f0ec:	beq.n	f0da <strlcat+0x2a>
    f0ee:	strb.w	r0, [r3], #1
    f0f2:	subs	r6, #1
    f0f4:	b.n	f0da <strlcat+0x2a>

0000f0f6 <strlcpy>:
    f0f6:	push	{r4, lr}
    f0f8:	cbz	r2, f120 <strlcpy+0x2a>
    f0fa:	add	r2, r1
    f0fc:	mov	r3, r1
    f0fe:	mov	r4, r3
    f100:	adds	r3, #1
    f102:	cmp	r3, r2
    f104:	bne.n	f10e <strlcpy+0x18>
    f106:	movs	r3, #0
    f108:	strb	r3, [r0, #0]
    f10a:	mov	r3, r4
    f10c:	b.n	f122 <strlcpy+0x2c>
    f10e:	ldrb.w	r4, [r3, #-1]
    f112:	strb.w	r4, [r0], #1
    f116:	cmp	r4, #0
    f118:	bne.n	f0fe <strlcpy+0x8>
    f11a:	subs	r1, r3, r1
    f11c:	subs	r0, r1, #1
    f11e:	pop	{r4, pc}
    f120:	mov	r3, r1
    f122:	ldrb.w	r2, [r3], #1
    f126:	cmp	r2, #0
    f128:	bne.n	f122 <strlcpy+0x2c>
    f12a:	b.n	f11a <strlcpy+0x24>

0000f12c <strncmp>:
    f12c:	push	{r4, lr}
    f12e:	cbz	r2, f14c <strncmp+0x20>
    f130:	subs	r1, #1
    f132:	adds	r4, r0, r2
    f134:	ldrb.w	r2, [r0], #1
    f138:	ldrb.w	r3, [r1, #1]!
    f13c:	cmp	r2, r3
    f13e:	bne.n	f148 <strncmp+0x1c>
    f140:	cmp	r0, r4
    f142:	beq.n	f148 <strncmp+0x1c>
    f144:	cmp	r2, #0
    f146:	bne.n	f134 <strncmp+0x8>
    f148:	subs	r0, r2, r3
    f14a:	pop	{r4, pc}
    f14c:	mov	r0, r2
    f14e:	b.n	f14a <strncmp+0x1e>

0000f150 <_localeconv_r>:
    f150:	ldr	r0, [pc, #0]	; (f154 <_localeconv_r+0x4>)
    f152:	bx	lr
    f154:	.word	0x20002284

0000f158 <_close_r>:
    f158:	push	{r3, r4, r5, lr}
    f15a:	ldr	r5, [pc, #24]	; (f174 <_close_r+0x1c>)
    f15c:	movs	r3, #0
    f15e:	mov	r4, r0
    f160:	mov	r0, r1
    f162:	str	r3, [r5, #0]
    f164:	bl	bec0 <_close>
    f168:	adds	r3, r0, #1
    f16a:	bne.n	f172 <_close_r+0x1a>
    f16c:	ldr	r3, [r5, #0]
    f16e:	cbz	r3, f172 <_close_r+0x1a>
    f170:	str	r3, [r4, #0]
    f172:	pop	{r3, r4, r5, pc}
    f174:	.word	0x20020ba4

0000f178 <_lseek_r>:
    f178:	push	{r3, r4, r5, lr}
    f17a:	ldr	r5, [pc, #28]	; (f198 <_lseek_r+0x20>)
    f17c:	mov	r4, r0
    f17e:	mov	r0, r1
    f180:	mov	r1, r2
    f182:	movs	r2, #0
    f184:	str	r2, [r5, #0]
    f186:	mov	r2, r3
    f188:	bl	bed4 <_lseek>
    f18c:	adds	r3, r0, #1
    f18e:	bne.n	f196 <_lseek_r+0x1e>
    f190:	ldr	r3, [r5, #0]
    f192:	cbz	r3, f196 <_lseek_r+0x1e>
    f194:	str	r3, [r4, #0]
    f196:	pop	{r3, r4, r5, pc}
    f198:	.word	0x20020ba4

0000f19c <_read_r>:
    f19c:	push	{r3, r4, r5, lr}
    f19e:	ldr	r5, [pc, #28]	; (f1bc <_read_r+0x20>)
    f1a0:	mov	r4, r0
    f1a2:	mov	r0, r1
    f1a4:	mov	r1, r2
    f1a6:	movs	r2, #0
    f1a8:	str	r2, [r5, #0]
    f1aa:	mov	r2, r3
    f1ac:	bl	bebc <_read>
    f1b0:	adds	r3, r0, #1
    f1b2:	bne.n	f1ba <_read_r+0x1e>
    f1b4:	ldr	r3, [r5, #0]
    f1b6:	cbz	r3, f1ba <_read_r+0x1e>
    f1b8:	str	r3, [r4, #0]
    f1ba:	pop	{r3, r4, r5, pc}
    f1bc:	.word	0x20020ba4

0000f1c0 <_sbrk_r>:
    f1c0:	push	{r3, r4, r5, lr}
    f1c2:	ldr	r5, [pc, #24]	; (f1dc <_sbrk_r+0x1c>)
    f1c4:	movs	r3, #0
    f1c6:	mov	r4, r0
    f1c8:	mov	r0, r1
    f1ca:	str	r3, [r5, #0]
    f1cc:	bl	be90 <_sbrk>
    f1d0:	adds	r3, r0, #1
    f1d2:	bne.n	f1da <_sbrk_r+0x1a>
    f1d4:	ldr	r3, [r5, #0]
    f1d6:	cbz	r3, f1da <_sbrk_r+0x1a>
    f1d8:	str	r3, [r4, #0]
    f1da:	pop	{r3, r4, r5, pc}
    f1dc:	.word	0x20020ba4

0000f1e0 <_write_r>:
    f1e0:	push	{r3, r4, r5, lr}
    f1e2:	ldr	r5, [pc, #28]	; (f200 <_write_r+0x20>)
    f1e4:	mov	r4, r0
    f1e6:	mov	r0, r1
    f1e8:	mov	r1, r2
    f1ea:	movs	r2, #0
    f1ec:	str	r2, [r5, #0]
    f1ee:	mov	r2, r3
    f1f0:	bl	cc84 <_write>
    f1f4:	adds	r3, r0, #1
    f1f6:	bne.n	f1fe <_write_r+0x1e>
    f1f8:	ldr	r3, [r5, #0]
    f1fa:	cbz	r3, f1fe <_write_r+0x1e>
    f1fc:	str	r3, [r4, #0]
    f1fe:	pop	{r3, r4, r5, pc}
    f200:	.word	0x20020ba4

0000f204 <__errno>:
    f204:	ldr	r3, [pc, #4]	; (f20c <__errno+0x8>)
    f206:	ldr	r0, [r3, #0]
    f208:	bx	lr
    f20a:	nop
    f20c:	.word	0x20002358

0000f210 <__libc_init_array>:
    f210:	push	{r4, r5, r6, lr}
    f212:	ldr	r5, [pc, #52]	; (f248 <__libc_init_array+0x38>)
    f214:	ldr	r4, [pc, #52]	; (f24c <__libc_init_array+0x3c>)
    f216:	subs	r4, r4, r5
    f218:	asrs	r4, r4, #2
    f21a:	movs	r6, #0
    f21c:	cmp	r6, r4
    f21e:	bne.n	f234 <__libc_init_array+0x24>
    f220:	ldr	r5, [pc, #44]	; (f250 <__libc_init_array+0x40>)
    f222:	ldr	r4, [pc, #48]	; (f254 <__libc_init_array+0x44>)
    f224:	bl	12618 <___init_veneer>
    f228:	subs	r4, r4, r5
    f22a:	asrs	r4, r4, #2
    f22c:	movs	r6, #0
    f22e:	cmp	r6, r4
    f230:	bne.n	f23e <__libc_init_array+0x2e>
    f232:	pop	{r4, r5, r6, pc}
    f234:	ldr.w	r3, [r5], #4
    f238:	blx	r3
    f23a:	adds	r6, #1
    f23c:	b.n	f21c <__libc_init_array+0xc>
    f23e:	ldr.w	r3, [r5], #4
    f242:	blx	r3
    f244:	adds	r6, #1
    f246:	b.n	f22e <__libc_init_array+0x1e>
    f248:	.word	0x600024c0
    f24c:	.word	0x600024c0
    f250:	.word	0x600024c0
    f254:	.word	0x600024d4

0000f258 <__retarget_lock_acquire_recursive>:
    f258:	bx	lr

0000f25a <__retarget_lock_release_recursive>:
    f25a:	bx	lr

0000f25c <strcpy>:
    f25c:	mov	r3, r0
    f25e:	ldrb.w	r2, [r1], #1
    f262:	strb.w	r2, [r3], #1
    f266:	cmp	r2, #0
    f268:	bne.n	f25e <strcpy+0x2>
    f26a:	bx	lr
    f26c:	movs	r0, r0
	...

0000f270 <memchr>:
    f270:	and.w	r1, r1, #255	; 0xff
    f274:	cmp	r2, #16
    f276:	blt.n	f2d0 <memchr+0x60>
    f278:	tst.w	r0, #7
    f27c:	beq.n	f290 <memchr+0x20>
    f27e:	ldrb.w	r3, [r0], #1
    f282:	subs	r2, #1
    f284:	cmp	r3, r1
    f286:	beq.n	f2e4 <memchr+0x74>
    f288:	tst.w	r0, #7
    f28c:	cbz	r2, f2e0 <memchr+0x70>
    f28e:	bne.n	f27e <memchr+0xe>
    f290:	push	{r4, r5, r6, r7}
    f292:	orr.w	r1, r1, r1, lsl #8
    f296:	orr.w	r1, r1, r1, lsl #16
    f29a:	bic.w	r4, r2, #7
    f29e:	mvns.w	r7, #0
    f2a2:	movs	r3, #0
    f2a4:	ldrd	r5, r6, [r0], #8
    f2a8:	subs	r4, #8
    f2aa:	eor.w	r5, r5, r1
    f2ae:	eor.w	r6, r6, r1
    f2b2:	uadd8	r5, r5, r7
    f2b6:	sel	r5, r3, r7
    f2ba:	uadd8	r6, r6, r7
    f2be:	sel	r6, r5, r7
    f2c2:	cbnz	r6, f2e8 <memchr+0x78>
    f2c4:	bne.n	f2a4 <memchr+0x34>
    f2c6:	pop	{r4, r5, r6, r7}
    f2c8:	and.w	r1, r1, #255	; 0xff
    f2cc:	and.w	r2, r2, #7
    f2d0:	cbz	r2, f2e0 <memchr+0x70>
    f2d2:	ldrb.w	r3, [r0], #1
    f2d6:	subs	r2, #1
    f2d8:	eor.w	r3, r3, r1
    f2dc:	cbz	r3, f2e4 <memchr+0x74>
    f2de:	bne.n	f2d2 <memchr+0x62>
    f2e0:	movs	r0, #0
    f2e2:	bx	lr
    f2e4:	subs	r0, #1
    f2e6:	bx	lr
    f2e8:	cmp	r5, #0
    f2ea:	itte	eq
    f2ec:	moveq	r5, r6
    f2ee:	subeq	r0, #3
    f2f0:	subne	r0, #7
    f2f2:	tst.w	r5, #1
    f2f6:	bne.n	f308 <memchr+0x98>
    f2f8:	adds	r0, #1
    f2fa:	tst.w	r5, #256	; 0x100
    f2fe:	ittt	eq
    f300:	addeq	r0, #1
    f302:	tsteq.w	r5, #98304	; 0x18000
    f306:	addeq	r0, #1
    f308:	pop	{r4, r5, r6, r7}
    f30a:	subs	r0, #1
    f30c:	bx	lr
    f30e:	nop

0000f310 <strlen>:
    f310:	mov	r3, r0
    f312:	ldrb.w	r2, [r3], #1
    f316:	cmp	r2, #0
    f318:	bne.n	f312 <strlen+0x2>
    f31a:	subs	r0, r3, r0
    f31c:	subs	r0, #1
    f31e:	bx	lr

0000f320 <nan>:
    f320:	vldr	d0, [pc, #4]	; f328 <nan+0x8>
    f324:	bx	lr
    f326:	nop
    f328:	.word	0x00000000
    f32c:	.word	0x7ff80000

0000f330 <nanf>:
    f330:	vldr	s0, [pc, #4]	; f338 <nanf+0x8>
    f334:	bx	lr
    f336:	nop
    f338:	.word	0x7fc00000

0000f33c <quorem>:
    f33c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f340:	ldr	r3, [r0, #16]
    f342:	ldr	r4, [r1, #16]
    f344:	cmp	r3, r4
    f346:	mov	r7, r0
    f348:	blt.n	f448 <quorem+0x10c>
    f34a:	subs	r4, #1
    f34c:	add.w	r8, r1, #20
    f350:	add.w	r5, r0, #20
    f354:	add.w	r3, r5, r4, lsl #2
    f358:	str	r3, [sp, #4]
    f35a:	ldr.w	r3, [r8, r4, lsl #2]
    f35e:	ldr.w	r2, [r5, r4, lsl #2]
    f362:	adds	r3, #1
    f364:	cmp	r2, r3
    f366:	mov.w	fp, r4, lsl #2
    f36a:	add.w	r9, r8, r4, lsl #2
    f36e:	udiv	r6, r2, r3
    f372:	bcc.n	f3d8 <quorem+0x9c>
    f374:	mov.w	lr, #0
    f378:	mov	r0, r8
    f37a:	mov	ip, r5
    f37c:	mov	sl, lr
    f37e:	ldr.w	r2, [r0], #4
    f382:	uxth	r3, r2
    f384:	mla	r3, r6, r3, lr
    f388:	mov.w	lr, r2, lsr #16
    f38c:	lsrs	r2, r3, #16
    f38e:	uxth	r3, r3
    f390:	sub.w	r3, sl, r3
    f394:	ldr.w	sl, [ip]
    f398:	uxtah	r3, r3, sl
    f39c:	mla	r2, r6, lr, r2
    f3a0:	str	r3, [sp, #0]
    f3a2:	ldr	r3, [sp, #0]
    f3a4:	mov.w	lr, r2, lsr #16
    f3a8:	uxth	r2, r2
    f3aa:	rsb	r2, r2, sl, lsr #16
    f3ae:	add.w	r2, r2, r3, asr #16
    f3b2:	ldrh.w	r3, [sp]
    f3b6:	cmp	r9, r0
    f3b8:	orr.w	r3, r3, r2, lsl #16
    f3bc:	str.w	r3, [ip], #4
    f3c0:	mov.w	sl, r2, asr #16
    f3c4:	bcs.n	f37e <quorem+0x42>
    f3c6:	ldr.w	r3, [r5, fp]
    f3ca:	cbnz	r3, f3d8 <quorem+0x9c>
    f3cc:	ldr	r3, [sp, #4]
    f3ce:	subs	r3, #4
    f3d0:	cmp	r5, r3
    f3d2:	mov	r2, r3
    f3d4:	bcc.n	f430 <quorem+0xf4>
    f3d6:	str	r4, [r7, #16]
    f3d8:	mov	r0, r7
    f3da:	bl	10c20 <__mcmp>
    f3de:	cmp	r0, #0
    f3e0:	blt.n	f428 <quorem+0xec>
    f3e2:	adds	r6, #1
    f3e4:	mov	r1, r5
    f3e6:	movs	r0, #0
    f3e8:	ldr.w	r2, [r8], #4
    f3ec:	ldr.w	ip, [r1]
    f3f0:	uxth	r3, r2
    f3f2:	subs	r3, r0, r3
    f3f4:	lsrs	r2, r2, #16
    f3f6:	uxtah	r3, r3, ip
    f3fa:	rsb	r2, r2, ip, lsr #16
    f3fe:	add.w	r2, r2, r3, asr #16
    f402:	uxth	r3, r3
    f404:	orr.w	r3, r3, r2, lsl #16
    f408:	cmp	r9, r8
    f40a:	str.w	r3, [r1], #4
    f40e:	mov.w	r0, r2, asr #16
    f412:	bcs.n	f3e8 <quorem+0xac>
    f414:	ldr.w	r2, [r5, r4, lsl #2]
    f418:	add.w	r3, r5, r4, lsl #2
    f41c:	cbnz	r2, f428 <quorem+0xec>
    f41e:	subs	r3, #4
    f420:	cmp	r5, r3
    f422:	mov	r2, r3
    f424:	bcc.n	f43c <quorem+0x100>
    f426:	str	r4, [r7, #16]
    f428:	mov	r0, r6
    f42a:	add	sp, #12
    f42c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f430:	ldr	r2, [r2, #0]
    f432:	subs	r3, #4
    f434:	cmp	r2, #0
    f436:	bne.n	f3d6 <quorem+0x9a>
    f438:	subs	r4, #1
    f43a:	b.n	f3d0 <quorem+0x94>
    f43c:	ldr	r2, [r2, #0]
    f43e:	subs	r3, #4
    f440:	cmp	r2, #0
    f442:	bne.n	f426 <quorem+0xea>
    f444:	subs	r4, #1
    f446:	b.n	f420 <quorem+0xe4>
    f448:	movs	r0, #0
    f44a:	b.n	f42a <quorem+0xee>
    f44c:	movs	r0, r0
	...

0000f450 <_dtoa_r>:
    f450:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f454:	vpush	{d8}
    f458:	ldr	r5, [r0, #28]
    f45a:	sub	sp, #68	; 0x44
    f45c:	vstr	d0, [sp, #8]
    f460:	vmov	r8, r9, d0
    f464:	ldr	r4, [sp, #112]	; 0x70
    f466:	str	r1, [sp, #24]
    f468:	mov	r6, r0
    f46a:	str	r2, [sp, #32]
    f46c:	str	r3, [sp, #48]	; 0x30
    f46e:	cbnz	r5, f48e <_dtoa_r+0x3e>
    f470:	movs	r0, #16
    f472:	bl	d198 <malloc>
    f476:	mov	r2, r0
    f478:	str	r0, [r6, #28]
    f47a:	cbnz	r0, f486 <_dtoa_r+0x36>
    f47c:	ldr	r3, [pc, #664]	; (f718 <_dtoa_r+0x2c8>)
    f47e:	movs	r1, #239	; 0xef
    f480:	ldr	r0, [pc, #664]	; (f71c <_dtoa_r+0x2cc>)
    f482:	bl	11bdc <__assert_func>
    f486:	strd	r5, r5, [r0, #4]
    f48a:	str	r5, [r0, #0]
    f48c:	str	r5, [r0, #12]
    f48e:	ldr	r3, [r6, #28]
    f490:	ldr	r1, [r3, #0]
    f492:	cbz	r1, f4aa <_dtoa_r+0x5a>
    f494:	ldr	r2, [r3, #4]
    f496:	str	r2, [r1, #4]
    f498:	movs	r3, #1
    f49a:	lsls	r3, r2
    f49c:	str	r3, [r1, #8]
    f49e:	mov	r0, r6
    f4a0:	bl	10714 <_Bfree>
    f4a4:	ldr	r3, [r6, #28]
    f4a6:	movs	r2, #0
    f4a8:	str	r2, [r3, #0]
    f4aa:	subs.w	r3, r9, #0
    f4ae:	ittet	lt
    f4b0:	biclt.w	r3, r3, #2147483648	; 0x80000000
    f4b4:	strlt	r3, [sp, #12]
    f4b6:	movge	r3, #0
    f4b8:	movlt	r2, #1
    f4ba:	ite	ge
    f4bc:	strge	r3, [r4, #0]
    f4be:	strlt	r2, [r4, #0]
    f4c0:	ldr	r3, [pc, #604]	; (f720 <_dtoa_r+0x2d0>)
    f4c2:	ldr	r4, [sp, #12]
    f4c4:	bics	r3, r4
    f4c6:	bne.n	f502 <_dtoa_r+0xb2>
    f4c8:	ldr	r2, [sp, #48]	; 0x30
    f4ca:	movw	r3, #9999	; 0x270f
    f4ce:	str	r3, [r2, #0]
    f4d0:	ubfx	r3, r4, #0, #20
    f4d4:	orrs.w	r3, r3, r8
    f4d8:	beq.w	fed2 <_dtoa_r+0xa82>
    f4dc:	ldr	r3, [sp, #116]	; 0x74
    f4de:	cbnz	r3, f4fa <_dtoa_r+0xaa>
    f4e0:	ldr	r3, [pc, #576]	; (f724 <_dtoa_r+0x2d4>)
    f4e2:	b.n	f526 <_dtoa_r+0xd6>
    f4e4:	ldr	r3, [pc, #576]	; (f728 <_dtoa_r+0x2d8>)
    f4e6:	str	r3, [sp, #4]
    f4e8:	adds	r3, #8
    f4ea:	ldr	r2, [sp, #116]	; 0x74
    f4ec:	str	r3, [r2, #0]
    f4ee:	ldr	r0, [sp, #4]
    f4f0:	add	sp, #68	; 0x44
    f4f2:	vpop	{d8}
    f4f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4fa:	ldr	r3, [pc, #552]	; (f724 <_dtoa_r+0x2d4>)
    f4fc:	str	r3, [sp, #4]
    f4fe:	adds	r3, #3
    f500:	b.n	f4ea <_dtoa_r+0x9a>
    f502:	vldr	d8, [sp, #8]
    f506:	vcmp.f64	d8, #0.0
    f50a:	vmrs	APSR_nzcv, fpscr
    f50e:	bne.n	f52a <_dtoa_r+0xda>
    f510:	ldr	r2, [sp, #48]	; 0x30
    f512:	movs	r3, #1
    f514:	str	r3, [r2, #0]
    f516:	ldr	r3, [sp, #116]	; 0x74
    f518:	cmp	r3, #0
    f51a:	beq.w	fecc <_dtoa_r+0xa7c>
    f51e:	ldr	r3, [pc, #524]	; (f72c <_dtoa_r+0x2dc>)
    f520:	ldr	r2, [sp, #116]	; 0x74
    f522:	str	r3, [r2, #0]
    f524:	subs	r3, #1
    f526:	str	r3, [sp, #4]
    f528:	b.n	f4ee <_dtoa_r+0x9e>
    f52a:	add	r2, sp, #56	; 0x38
    f52c:	add	r1, sp, #60	; 0x3c
    f52e:	mov	r0, r6
    f530:	vmov.f64	d0, d8
    f534:	bl	10e4c <__d2b>
    f538:	ubfx	r3, r4, #20, #11
    f53c:	ldr	r2, [sp, #56]	; 0x38
    f53e:	mov	r5, r0
    f540:	cmp	r3, #0
    f542:	beq.n	f5d2 <_dtoa_r+0x182>
    f544:	vmov.f64	d7, d8
    f548:	vmov	r1, s17
    f54c:	ubfx	r1, r1, #0, #20
    f550:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    f554:	orr.w	r1, r1, #3145728	; 0x300000
    f558:	subw	r3, r3, #1023	; 0x3ff
    f55c:	movs	r0, #0
    f55e:	vmov	s15, r1
    f562:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f566:	vldr	d5, [pc, #408]	; f700 <_dtoa_r+0x2b0>
    f56a:	vsub.f64	d7, d7, d6
    f56e:	vldr	d6, [pc, #408]	; f708 <_dtoa_r+0x2b8>
    f572:	vfma.f64	d6, d7, d5
    f576:	vldr	d5, [pc, #408]	; f710 <_dtoa_r+0x2c0>
    f57a:	vmov	s15, r3
    f57e:	vcvt.f64.s32	d4, s15
    f582:	vmov.f64	d7, d6
    f586:	vfma.f64	d7, d4, d5
    f58a:	vcvt.s32.f64	s13, d7
    f58e:	vcmpe.f64	d7, #0.0
    f592:	vmrs	APSR_nzcv, fpscr
    f596:	vmov	fp, s13
    f59a:	str	r0, [sp, #36]	; 0x24
    f59c:	bpl.n	f5b0 <_dtoa_r+0x160>
    f59e:	vcvt.f64.s32	d6, s13
    f5a2:	vcmp.f64	d6, d7
    f5a6:	vmrs	APSR_nzcv, fpscr
    f5aa:	it	ne
    f5ac:	addne.w	fp, fp, #4294967295
    f5b0:	cmp.w	fp, #22
    f5b4:	bhi.n	f60e <_dtoa_r+0x1be>
    f5b6:	ldr	r1, [pc, #376]	; (f730 <_dtoa_r+0x2e0>)
    f5b8:	add.w	r1, r1, fp, lsl #3
    f5bc:	vldr	d7, [r1]
    f5c0:	vcmpe.f64	d8, d7
    f5c4:	vmrs	APSR_nzcv, fpscr
    f5c8:	bpl.n	f5ce <_dtoa_r+0x17e>
    f5ca:	add.w	fp, fp, #4294967295
    f5ce:	movs	r1, #0
    f5d0:	b.n	f610 <_dtoa_r+0x1c0>
    f5d2:	ldr	r3, [sp, #60]	; 0x3c
    f5d4:	add	r3, r2
    f5d6:	addw	r1, r3, #1074	; 0x432
    f5da:	cmp	r1, #32
    f5dc:	itttt	gt
    f5de:	rsbgt	r1, r1, #64	; 0x40
    f5e2:	lslgt	r4, r1
    f5e4:	addwgt	r1, r3, #1042	; 0x412
    f5e8:	lsrgt.w	r1, r8, r1
    f5ec:	itet	le
    f5ee:	rsble	r1, r1, #32
    f5f2:	orrgt	r1, r4
    f5f4:	lslle.w	r1, r8, r1
    f5f8:	vmov	s15, r1
    f5fc:	vcvt.f64.u32	d7, s15
    f600:	subs	r3, #1
    f602:	vmov	r1, s15
    f606:	movs	r0, #1
    f608:	sub.w	r1, r1, #32505856	; 0x1f00000
    f60c:	b.n	f55e <_dtoa_r+0x10e>
    f60e:	movs	r1, #1
    f610:	subs	r2, r2, r3
    f612:	subs	r3, r2, #1
    f614:	str	r3, [sp, #20]
    f616:	ittet	mi
    f618:	rsbmi	r3, r2, #1
    f61c:	strmi	r3, [sp, #16]
    f61e:	movpl	r3, #0
    f620:	movmi	r3, #0
    f622:	ite	mi
    f624:	strmi	r3, [sp, #20]
    f626:	strpl	r3, [sp, #16]
    f628:	cmp.w	fp, #0
    f62c:	str	r1, [sp, #44]	; 0x2c
    f62e:	blt.n	f662 <_dtoa_r+0x212>
    f630:	ldr	r3, [sp, #20]
    f632:	str.w	fp, [sp, #40]	; 0x28
    f636:	add	r3, fp
    f638:	str	r3, [sp, #20]
    f63a:	movs	r3, #0
    f63c:	ldr	r2, [sp, #24]
    f63e:	cmp	r2, #9
    f640:	bhi.n	f6d4 <_dtoa_r+0x284>
    f642:	cmp	r2, #5
    f644:	itt	gt
    f646:	subgt	r2, #4
    f648:	strgt	r2, [sp, #24]
    f64a:	ldr	r2, [sp, #24]
    f64c:	sub.w	r2, r2, #2
    f650:	ite	gt
    f652:	movgt	r4, #0
    f654:	movle	r4, #1
    f656:	cmp	r2, #3
    f658:	bhi.n	f6ea <_dtoa_r+0x29a>
    f65a:	tbb	[pc, r2]
    f65e:	.short	0x2d0b
    f660:	.short	0x392b
    f662:	ldr	r3, [sp, #16]
    f664:	movs	r2, #0
    f666:	sub.w	r3, r3, fp
    f66a:	str	r3, [sp, #16]
    f66c:	str	r2, [sp, #40]	; 0x28
    f66e:	rsb	r3, fp, #0
    f672:	b.n	f63c <_dtoa_r+0x1ec>
    f674:	movs	r2, #0
    f676:	str	r2, [sp, #28]
    f678:	ldr	r2, [sp, #32]
    f67a:	cmp	r2, #0
    f67c:	bgt.n	f6f0 <_dtoa_r+0x2a0>
    f67e:	mov.w	sl, #1
    f682:	mov	r9, sl
    f684:	mov	r2, sl
    f686:	str.w	sl, [sp, #32]
    f68a:	ldr	r7, [r6, #28]
    f68c:	movs	r1, #0
    f68e:	movs	r0, #4
    f690:	add.w	ip, r0, #20
    f694:	cmp	ip, r2
    f696:	bls.n	f6fa <_dtoa_r+0x2aa>
    f698:	str	r1, [r7, #4]
    f69a:	mov	r0, r6
    f69c:	str	r3, [sp, #52]	; 0x34
    f69e:	bl	10694 <_Balloc>
    f6a2:	ldr	r3, [sp, #52]	; 0x34
    f6a4:	str	r0, [sp, #4]
    f6a6:	mov	r2, r0
    f6a8:	cmp	r0, #0
    f6aa:	bne.n	f738 <_dtoa_r+0x2e8>
    f6ac:	ldr	r3, [pc, #132]	; (f734 <_dtoa_r+0x2e4>)
    f6ae:	movw	r1, #431	; 0x1af
    f6b2:	b.n	f480 <_dtoa_r+0x30>
    f6b4:	movs	r2, #1
    f6b6:	b.n	f676 <_dtoa_r+0x226>
    f6b8:	movs	r2, #0
    f6ba:	str	r2, [sp, #28]
    f6bc:	ldr	r2, [sp, #32]
    f6be:	add.w	sl, fp, r2
    f6c2:	add.w	r9, sl, #1
    f6c6:	mov	r2, r9
    f6c8:	cmp	r2, #1
    f6ca:	it	lt
    f6cc:	movlt	r2, #1
    f6ce:	b.n	f68a <_dtoa_r+0x23a>
    f6d0:	movs	r2, #1
    f6d2:	b.n	f6ba <_dtoa_r+0x26a>
    f6d4:	movs	r4, #1
    f6d6:	movs	r2, #0
    f6d8:	strd	r2, r4, [sp, #24]
    f6dc:	mov.w	sl, #4294967295
    f6e0:	movs	r1, #0
    f6e2:	mov	r9, sl
    f6e4:	movs	r2, #18
    f6e6:	str	r1, [sp, #32]
    f6e8:	b.n	f68a <_dtoa_r+0x23a>
    f6ea:	movs	r2, #1
    f6ec:	str	r2, [sp, #28]
    f6ee:	b.n	f6dc <_dtoa_r+0x28c>
    f6f0:	ldr.w	sl, [sp, #32]
    f6f4:	mov	r9, sl
    f6f6:	mov	r2, sl
    f6f8:	b.n	f68a <_dtoa_r+0x23a>
    f6fa:	adds	r1, #1
    f6fc:	lsls	r0, r0, #1
    f6fe:	b.n	f690 <_dtoa_r+0x240>
    f700:	.word	0x636f4361
    f704:	.word	0x3fd287a7
    f708:	.word	0x8b60c8b3
    f70c:	.word	0x3fc68a28
    f710:	.word	0x509f79fb
    f714:	.word	0x3fd34413
    f718:	.word	0x200013d0
    f71c:	.word	0x200013e7
    f720:	.word	0x7ff00000
    f724:	.word	0x200013cc
    f728:	.word	0x200013c3
    f72c:	.word	0x200011a2
    f730:	.word	0x20000328
    f734:	.word	0x20001440
    f738:	ldr	r2, [r6, #28]
    f73a:	ldr	r1, [sp, #4]
    f73c:	str	r1, [r2, #0]
    f73e:	cmp.w	r9, #14
    f742:	bhi.n	f81e <_dtoa_r+0x3ce>
    f744:	cmp	r4, #0
    f746:	beq.n	f81e <_dtoa_r+0x3ce>
    f748:	cmp.w	fp, #0
    f74c:	ble.w	f890 <_dtoa_r+0x440>
    f750:	ldr	r2, [pc, #772]	; (fa58 <_dtoa_r+0x608>)
    f752:	and.w	r1, fp, #15
    f756:	add.w	r2, r2, r1, lsl #3
    f75a:	tst.w	fp, #256	; 0x100
    f75e:	vldr	d7, [r2]
    f762:	mov.w	r2, fp, asr #4
    f766:	beq.w	f878 <_dtoa_r+0x428>
    f76a:	ldr	r1, [pc, #752]	; (fa5c <_dtoa_r+0x60c>)
    f76c:	vldr	d6, [r1, #32]
    f770:	vdiv.f64	d6, d8, d6
    f774:	vstr	d6, [sp, #8]
    f778:	and.w	r2, r2, #15
    f77c:	movs	r1, #3
    f77e:	ldr	r0, [pc, #732]	; (fa5c <_dtoa_r+0x60c>)
    f780:	cmp	r2, #0
    f782:	bne.n	f87c <_dtoa_r+0x42c>
    f784:	vldr	d6, [sp, #8]
    f788:	vdiv.f64	d7, d6, d7
    f78c:	vstr	d7, [sp, #8]
    f790:	ldr	r2, [sp, #44]	; 0x2c
    f792:	vldr	d7, [sp, #8]
    f796:	cmp	r2, #0
    f798:	beq.w	f8dc <_dtoa_r+0x48c>
    f79c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    f7a0:	vcmpe.f64	d7, d6
    f7a4:	vmrs	APSR_nzcv, fpscr
    f7a8:	bpl.w	f8dc <_dtoa_r+0x48c>
    f7ac:	cmp.w	r9, #0
    f7b0:	beq.w	f8dc <_dtoa_r+0x48c>
    f7b4:	cmp.w	sl, #0
    f7b8:	ble.n	f81a <_dtoa_r+0x3ca>
    f7ba:	vmov.f64	d6, #36	; 0x41200000  10.0
    f7be:	vmul.f64	d7, d7, d6
    f7c2:	vstr	d7, [sp, #8]
    f7c6:	add.w	r2, fp, #4294967295
    f7ca:	adds	r1, #1
    f7cc:	mov	r4, sl
    f7ce:	vldr	d6, [sp, #8]
    f7d2:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f7d6:	vmov	s15, r1
    f7da:	vcvt.f64.s32	d7, s15
    f7de:	vfma.f64	d5, d7, d6
    f7e2:	vmov	r7, s11
    f7e6:	vmov	r0, r1, d5
    f7ea:	sub.w	r1, r7, #54525952	; 0x3400000
    f7ee:	cmp	r4, #0
    f7f0:	bne.n	f8e2 <_dtoa_r+0x492>
    f7f2:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f7f6:	vsub.f64	d6, d6, d7
    f7fa:	vmov	d7, r0, r1
    f7fe:	vcmpe.f64	d6, d7
    f802:	vmrs	APSR_nzcv, fpscr
    f806:	bgt.w	fcde <_dtoa_r+0x88e>
    f80a:	vneg.f64	d7, d7
    f80e:	vcmpe.f64	d6, d7
    f812:	vmrs	APSR_nzcv, fpscr
    f816:	bmi.w	fcda <_dtoa_r+0x88a>
    f81a:	vstr	d8, [sp, #8]
    f81e:	ldr	r2, [sp, #60]	; 0x3c
    f820:	cmp	r2, #0
    f822:	blt.w	fa60 <_dtoa_r+0x610>
    f826:	cmp.w	fp, #14
    f82a:	bgt.w	fa60 <_dtoa_r+0x610>
    f82e:	ldr	r3, [pc, #552]	; (fa58 <_dtoa_r+0x608>)
    f830:	add.w	r3, r3, fp, lsl #3
    f834:	vldr	d6, [r3]
    f838:	ldr	r3, [sp, #32]
    f83a:	cmp	r3, #0
    f83c:	bge.w	f9ae <_dtoa_r+0x55e>
    f840:	cmp.w	r9, #0
    f844:	bgt.w	f9ae <_dtoa_r+0x55e>
    f848:	bne.w	fcd8 <_dtoa_r+0x888>
    f84c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f850:	vmul.f64	d6, d6, d7
    f854:	vldr	d7, [sp, #8]
    f858:	vcmpe.f64	d6, d7
    f85c:	vmrs	APSR_nzcv, fpscr
    f860:	mov	r4, r9
    f862:	mov	r7, r9
    f864:	bge.w	fca0 <_dtoa_r+0x850>
    f868:	ldr.w	r8, [sp, #4]
    f86c:	movs	r3, #49	; 0x31
    f86e:	strb.w	r3, [r8], #1
    f872:	add.w	fp, fp, #1
    f876:	b.n	fcaa <_dtoa_r+0x85a>
    f878:	movs	r1, #2
    f87a:	b.n	f77e <_dtoa_r+0x32e>
    f87c:	lsls	r4, r2, #31
    f87e:	bpl.n	f88a <_dtoa_r+0x43a>
    f880:	vldr	d6, [r0]
    f884:	adds	r1, #1
    f886:	vmul.f64	d7, d7, d6
    f88a:	asrs	r2, r2, #1
    f88c:	adds	r0, #8
    f88e:	b.n	f780 <_dtoa_r+0x330>
    f890:	beq.n	f8d8 <_dtoa_r+0x488>
    f892:	rsb	r2, fp, #0
    f896:	ldr	r1, [pc, #448]	; (fa58 <_dtoa_r+0x608>)
    f898:	and.w	r0, r2, #15
    f89c:	add.w	r1, r1, r0, lsl #3
    f8a0:	vldr	d7, [r1]
    f8a4:	vmul.f64	d7, d8, d7
    f8a8:	vstr	d7, [sp, #8]
    f8ac:	ldr	r0, [pc, #428]	; (fa5c <_dtoa_r+0x60c>)
    f8ae:	asrs	r2, r2, #4
    f8b0:	movs	r4, #0
    f8b2:	movs	r1, #2
    f8b4:	cbnz	r2, f8c2 <_dtoa_r+0x472>
    f8b6:	cmp	r4, #0
    f8b8:	beq.w	f790 <_dtoa_r+0x340>
    f8bc:	vstr	d7, [sp, #8]
    f8c0:	b.n	f790 <_dtoa_r+0x340>
    f8c2:	lsls	r7, r2, #31
    f8c4:	bpl.n	f8d2 <_dtoa_r+0x482>
    f8c6:	vldr	d6, [r0]
    f8ca:	adds	r1, #1
    f8cc:	movs	r4, #1
    f8ce:	vmul.f64	d7, d7, d6
    f8d2:	asrs	r2, r2, #1
    f8d4:	adds	r0, #8
    f8d6:	b.n	f8b4 <_dtoa_r+0x464>
    f8d8:	movs	r1, #2
    f8da:	b.n	f790 <_dtoa_r+0x340>
    f8dc:	mov	r2, fp
    f8de:	mov	r4, r9
    f8e0:	b.n	f7ce <_dtoa_r+0x37e>
    f8e2:	vmov	d7, r0, r1
    f8e6:	ldr	r1, [pc, #368]	; (fa58 <_dtoa_r+0x608>)
    f8e8:	add.w	r1, r1, r4, lsl #3
    f8ec:	vldr	d4, [r1, #-8]
    f8f0:	ldr	r1, [sp, #4]
    f8f2:	add	r4, r1
    f8f4:	ldr	r1, [sp, #28]
    f8f6:	cbz	r1, f94e <_dtoa_r+0x4fe>
    f8f8:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f8fc:	vmov.f64	d2, #112	; 0x3f800000  1.0
    f900:	ldr.w	r8, [sp, #4]
    f904:	vdiv.f64	d5, d3, d4
    f908:	vmov.f64	d3, #36	; 0x41200000  10.0
    f90c:	vsub.f64	d7, d5, d7
    f910:	vcvt.s32.f64	s9, d6
    f914:	vmov	r1, s9
    f918:	vcvt.f64.s32	d5, s9
    f91c:	adds	r1, #48	; 0x30
    f91e:	vsub.f64	d6, d6, d5
    f922:	vcmpe.f64	d6, d7
    f926:	vmrs	APSR_nzcv, fpscr
    f92a:	strb.w	r1, [r8], #1
    f92e:	bmi.n	f9a4 <_dtoa_r+0x554>
    f930:	vsub.f64	d5, d2, d6
    f934:	vcmpe.f64	d5, d7
    f938:	vmrs	APSR_nzcv, fpscr
    f93c:	bmi.n	fa24 <_dtoa_r+0x5d4>
    f93e:	cmp	r8, r4
    f940:	beq.w	f81a <_dtoa_r+0x3ca>
    f944:	vmul.f64	d7, d7, d3
    f948:	vmul.f64	d6, d6, d3
    f94c:	b.n	f910 <_dtoa_r+0x4c0>
    f94e:	ldr.w	r8, [sp, #4]
    f952:	vmul.f64	d7, d7, d4
    f956:	mov	r0, r4
    f958:	vmov.f64	d3, #36	; 0x41200000  10.0
    f95c:	vcvt.s32.f64	s9, d6
    f960:	vmov	r1, s9
    f964:	adds	r1, #48	; 0x30
    f966:	strb.w	r1, [r8], #1
    f96a:	cmp	r8, r4
    f96c:	vcvt.f64.s32	d5, s9
    f970:	vsub.f64	d6, d6, d5
    f974:	bne.n	f9a8 <_dtoa_r+0x558>
    f976:	vmov.f64	d5, #96	; 0x3f000000  0.5
    f97a:	vadd.f64	d4, d7, d5
    f97e:	vcmpe.f64	d6, d4
    f982:	vmrs	APSR_nzcv, fpscr
    f986:	bgt.n	fa24 <_dtoa_r+0x5d4>
    f988:	vsub.f64	d5, d5, d7
    f98c:	vcmpe.f64	d6, d5
    f990:	vmrs	APSR_nzcv, fpscr
    f994:	bpl.w	f81a <_dtoa_r+0x3ca>
    f998:	mov	r8, r0
    f99a:	subs	r0, #1
    f99c:	ldrb.w	r3, [r8, #-1]
    f9a0:	cmp	r3, #48	; 0x30
    f9a2:	beq.n	f998 <_dtoa_r+0x548>
    f9a4:	mov	fp, r2
    f9a6:	b.n	f9fe <_dtoa_r+0x5ae>
    f9a8:	vmul.f64	d6, d6, d3
    f9ac:	b.n	f95c <_dtoa_r+0x50c>
    f9ae:	vldr	d7, [sp, #8]
    f9b2:	vmov.f64	d4, #36	; 0x41200000  10.0
    f9b6:	ldr.w	r8, [sp, #4]
    f9ba:	vdiv.f64	d5, d7, d6
    f9be:	vcvt.s32.f64	s10, d5
    f9c2:	vmov	r3, s10
    f9c6:	adds	r3, #48	; 0x30
    f9c8:	strb.w	r3, [r8], #1
    f9cc:	ldr	r3, [sp, #4]
    f9ce:	sub.w	r3, r8, r3
    f9d2:	cmp	r9, r3
    f9d4:	vcvt.f64.s32	d3, s10
    f9d8:	vfms.f64	d7, d3, d6
    f9dc:	bne.n	fa46 <_dtoa_r+0x5f6>
    f9de:	vadd.f64	d7, d7, d7
    f9e2:	vcmpe.f64	d7, d6
    f9e6:	vmrs	APSR_nzcv, fpscr
    f9ea:	bgt.n	fa22 <_dtoa_r+0x5d2>
    f9ec:	vcmp.f64	d7, d6
    f9f0:	vmrs	APSR_nzcv, fpscr
    f9f4:	bne.n	f9fe <_dtoa_r+0x5ae>
    f9f6:	vmov	r3, s10
    f9fa:	lsls	r1, r3, #31
    f9fc:	bmi.n	fa22 <_dtoa_r+0x5d2>
    f9fe:	mov	r1, r5
    fa00:	mov	r0, r6
    fa02:	bl	10714 <_Bfree>
    fa06:	movs	r3, #0
    fa08:	ldr	r2, [sp, #48]	; 0x30
    fa0a:	strb.w	r3, [r8]
    fa0e:	add.w	r3, fp, #1
    fa12:	str	r3, [r2, #0]
    fa14:	ldr	r3, [sp, #116]	; 0x74
    fa16:	cmp	r3, #0
    fa18:	beq.w	f4ee <_dtoa_r+0x9e>
    fa1c:	str.w	r8, [r3]
    fa20:	b.n	f4ee <_dtoa_r+0x9e>
    fa22:	mov	r2, fp
    fa24:	mov	r3, r8
    fa26:	mov	r8, r3
    fa28:	ldrb.w	r1, [r3, #-1]!
    fa2c:	cmp	r1, #57	; 0x39
    fa2e:	bne.n	fa3e <_dtoa_r+0x5ee>
    fa30:	ldr	r1, [sp, #4]
    fa32:	cmp	r1, r3
    fa34:	bne.n	fa26 <_dtoa_r+0x5d6>
    fa36:	ldr	r0, [sp, #4]
    fa38:	movs	r1, #48	; 0x30
    fa3a:	adds	r2, #1
    fa3c:	strb	r1, [r0, #0]
    fa3e:	ldrb	r1, [r3, #0]
    fa40:	adds	r1, #1
    fa42:	strb	r1, [r3, #0]
    fa44:	b.n	f9a4 <_dtoa_r+0x554>
    fa46:	vmul.f64	d7, d7, d4
    fa4a:	vcmp.f64	d7, #0.0
    fa4e:	vmrs	APSR_nzcv, fpscr
    fa52:	bne.n	f9ba <_dtoa_r+0x56a>
    fa54:	b.n	f9fe <_dtoa_r+0x5ae>
    fa56:	nop
    fa58:	.word	0x20000328
    fa5c:	.word	0x20000300
    fa60:	ldr	r1, [sp, #28]
    fa62:	cmp	r1, #0
    fa64:	beq.w	fc08 <_dtoa_r+0x7b8>
    fa68:	ldr	r1, [sp, #24]
    fa6a:	cmp	r1, #1
    fa6c:	bgt.w	fbd8 <_dtoa_r+0x788>
    fa70:	ldr	r1, [sp, #36]	; 0x24
    fa72:	cmp	r1, #0
    fa74:	beq.w	fbd0 <_dtoa_r+0x780>
    fa78:	addw	r2, r2, #1075	; 0x433
    fa7c:	ldr.w	r8, [sp, #16]
    fa80:	mov	r4, r3
    fa82:	str	r3, [sp, #36]	; 0x24
    fa84:	ldr	r3, [sp, #16]
    fa86:	add	r3, r2
    fa88:	str	r3, [sp, #16]
    fa8a:	ldr	r3, [sp, #20]
    fa8c:	movs	r1, #1
    fa8e:	add	r3, r2
    fa90:	mov	r0, r6
    fa92:	str	r3, [sp, #20]
    fa94:	bl	10914 <__i2b>
    fa98:	ldr	r3, [sp, #36]	; 0x24
    fa9a:	mov	r7, r0
    fa9c:	cmp.w	r8, #0
    faa0:	beq.n	fabe <_dtoa_r+0x66e>
    faa2:	ldr	r2, [sp, #20]
    faa4:	cmp	r2, #0
    faa6:	ble.n	fabe <_dtoa_r+0x66e>
    faa8:	cmp	r2, r8
    faaa:	ldr	r1, [sp, #16]
    faac:	it	ge
    faae:	movge	r2, r8
    fab0:	subs	r1, r1, r2
    fab2:	str	r1, [sp, #16]
    fab4:	ldr	r1, [sp, #20]
    fab6:	sub.w	r8, r8, r2
    faba:	subs	r2, r1, r2
    fabc:	str	r2, [sp, #20]
    fabe:	cbz	r3, fb02 <_dtoa_r+0x6b2>
    fac0:	ldr	r2, [sp, #28]
    fac2:	cmp	r2, #0
    fac4:	beq.w	fc12 <_dtoa_r+0x7c2>
    fac8:	cmp	r4, #0
    faca:	ble.n	faf4 <_dtoa_r+0x6a4>
    facc:	mov	r1, r7
    face:	mov	r2, r4
    fad0:	mov	r0, r6
    fad2:	str	r3, [sp, #52]	; 0x34
    fad4:	bl	10a94 <__pow5mult>
    fad8:	mov	r2, r5
    fada:	mov	r1, r0
    fadc:	mov	r7, r0
    fade:	mov	r0, r6
    fae0:	bl	10940 <__multiply>
    fae4:	mov	r1, r5
    fae6:	str	r0, [sp, #36]	; 0x24
    fae8:	mov	r0, r6
    faea:	bl	10714 <_Bfree>
    faee:	ldr	r2, [sp, #36]	; 0x24
    faf0:	ldr	r3, [sp, #52]	; 0x34
    faf2:	mov	r5, r2
    faf4:	subs	r2, r3, r4
    faf6:	beq.n	fb02 <_dtoa_r+0x6b2>
    faf8:	mov	r1, r5
    fafa:	mov	r0, r6
    fafc:	bl	10a94 <__pow5mult>
    fb00:	mov	r5, r0
    fb02:	movs	r1, #1
    fb04:	mov	r0, r6
    fb06:	bl	10914 <__i2b>
    fb0a:	ldr	r3, [sp, #40]	; 0x28
    fb0c:	cmp	r3, #0
    fb0e:	mov	r4, r0
    fb10:	ble.w	fc16 <_dtoa_r+0x7c6>
    fb14:	mov	r2, r3
    fb16:	mov	r1, r0
    fb18:	mov	r0, r6
    fb1a:	bl	10a94 <__pow5mult>
    fb1e:	ldr	r3, [sp, #24]
    fb20:	cmp	r3, #1
    fb22:	mov	r4, r0
    fb24:	ble.n	fc1c <_dtoa_r+0x7cc>
    fb26:	movs	r3, #0
    fb28:	str	r3, [sp, #36]	; 0x24
    fb2a:	ldr	r2, [r4, #16]
    fb2c:	add.w	r2, r4, r2, lsl #2
    fb30:	ldr	r0, [r2, #16]
    fb32:	bl	10878 <__hi0bits>
    fb36:	rsb	r0, r0, #32
    fb3a:	ldr	r3, [sp, #20]
    fb3c:	add	r0, r3
    fb3e:	ands.w	r0, r0, #31
    fb42:	beq.w	fc6c <_dtoa_r+0x81c>
    fb46:	rsb	r2, r0, #32
    fb4a:	cmp	r2, #4
    fb4c:	ble.w	fc5a <_dtoa_r+0x80a>
    fb50:	ldr	r3, [sp, #16]
    fb52:	rsb	r0, r0, #28
    fb56:	add	r3, r0
    fb58:	str	r3, [sp, #16]
    fb5a:	ldr	r3, [sp, #20]
    fb5c:	add	r8, r0
    fb5e:	add	r3, r0
    fb60:	str	r3, [sp, #20]
    fb62:	ldr	r3, [sp, #16]
    fb64:	cmp	r3, #0
    fb66:	ble.n	fb74 <_dtoa_r+0x724>
    fb68:	mov	r1, r5
    fb6a:	mov	r2, r3
    fb6c:	mov	r0, r6
    fb6e:	bl	10b48 <__lshift>
    fb72:	mov	r5, r0
    fb74:	ldr	r3, [sp, #20]
    fb76:	cmp	r3, #0
    fb78:	ble.n	fb86 <_dtoa_r+0x736>
    fb7a:	mov	r1, r4
    fb7c:	mov	r2, r3
    fb7e:	mov	r0, r6
    fb80:	bl	10b48 <__lshift>
    fb84:	mov	r4, r0
    fb86:	ldr	r3, [sp, #44]	; 0x2c
    fb88:	cmp	r3, #0
    fb8a:	beq.n	fc70 <_dtoa_r+0x820>
    fb8c:	mov	r1, r4
    fb8e:	mov	r0, r5
    fb90:	bl	10c20 <__mcmp>
    fb94:	cmp	r0, #0
    fb96:	bge.n	fc70 <_dtoa_r+0x820>
    fb98:	movs	r3, #0
    fb9a:	mov	r1, r5
    fb9c:	movs	r2, #10
    fb9e:	mov	r0, r6
    fba0:	bl	10758 <__multadd>
    fba4:	ldr	r3, [sp, #28]
    fba6:	add.w	fp, fp, #4294967295
    fbaa:	mov	r5, r0
    fbac:	cmp	r3, #0
    fbae:	beq.w	fee0 <_dtoa_r+0xa90>
    fbb2:	mov	r1, r7
    fbb4:	movs	r3, #0
    fbb6:	movs	r2, #10
    fbb8:	mov	r0, r6
    fbba:	bl	10758 <__multadd>
    fbbe:	cmp.w	sl, #0
    fbc2:	mov	r7, r0
    fbc4:	bgt.w	fcee <_dtoa_r+0x89e>
    fbc8:	ldr	r3, [sp, #24]
    fbca:	cmp	r3, #2
    fbcc:	bgt.n	fc7e <_dtoa_r+0x82e>
    fbce:	b.n	fcee <_dtoa_r+0x89e>
    fbd0:	ldr	r2, [sp, #56]	; 0x38
    fbd2:	rsb	r2, r2, #54	; 0x36
    fbd6:	b.n	fa7c <_dtoa_r+0x62c>
    fbd8:	add.w	r4, r9, #4294967295
    fbdc:	cmp	r3, r4
    fbde:	itttt	lt
    fbe0:	sublt	r2, r4, r3
    fbe2:	ldrlt	r3, [sp, #40]	; 0x28
    fbe4:	addlt	r3, r3, r2
    fbe6:	strlt	r3, [sp, #40]	; 0x28
    fbe8:	itee	ge
    fbea:	subge	r4, r3, r4
    fbec:	movlt	r3, r4
    fbee:	movlt	r4, #0
    fbf0:	cmp.w	r9, #0
    fbf4:	itete	lt
    fbf6:	ldrlt	r2, [sp, #16]
    fbf8:	ldrge.w	r8, [sp, #16]
    fbfc:	sublt.w	r8, r2, r9
    fc00:	movge	r2, r9
    fc02:	it	lt
    fc04:	movlt	r2, #0
    fc06:	b.n	fa82 <_dtoa_r+0x632>
    fc08:	ldr.w	r8, [sp, #16]
    fc0c:	ldr	r7, [sp, #28]
    fc0e:	mov	r4, r3
    fc10:	b.n	fa9c <_dtoa_r+0x64c>
    fc12:	mov	r2, r3
    fc14:	b.n	faf8 <_dtoa_r+0x6a8>
    fc16:	ldr	r3, [sp, #24]
    fc18:	cmp	r3, #1
    fc1a:	bgt.n	fc4e <_dtoa_r+0x7fe>
    fc1c:	ldr	r3, [sp, #8]
    fc1e:	cbnz	r3, fc4e <_dtoa_r+0x7fe>
    fc20:	ldr	r3, [sp, #12]
    fc22:	ubfx	r2, r3, #0, #20
    fc26:	cbnz	r2, fc52 <_dtoa_r+0x802>
    fc28:	bic.w	r2, r3, #2147483648	; 0x80000000
    fc2c:	lsrs	r2, r2, #20
    fc2e:	lsls	r2, r2, #20
    fc30:	cbz	r2, fc56 <_dtoa_r+0x806>
    fc32:	ldr	r3, [sp, #16]
    fc34:	adds	r3, #1
    fc36:	str	r3, [sp, #16]
    fc38:	ldr	r3, [sp, #20]
    fc3a:	adds	r3, #1
    fc3c:	str	r3, [sp, #20]
    fc3e:	movs	r3, #1
    fc40:	str	r3, [sp, #36]	; 0x24
    fc42:	ldr	r3, [sp, #40]	; 0x28
    fc44:	cmp	r3, #0
    fc46:	bne.w	fb2a <_dtoa_r+0x6da>
    fc4a:	movs	r0, #1
    fc4c:	b.n	fb3a <_dtoa_r+0x6ea>
    fc4e:	movs	r3, #0
    fc50:	b.n	fc40 <_dtoa_r+0x7f0>
    fc52:	ldr	r3, [sp, #8]
    fc54:	b.n	fc40 <_dtoa_r+0x7f0>
    fc56:	str	r2, [sp, #36]	; 0x24
    fc58:	b.n	fc42 <_dtoa_r+0x7f2>
    fc5a:	beq.n	fb62 <_dtoa_r+0x712>
    fc5c:	ldr	r3, [sp, #16]
    fc5e:	adds	r2, #28
    fc60:	add	r3, r2
    fc62:	str	r3, [sp, #16]
    fc64:	ldr	r3, [sp, #20]
    fc66:	add	r8, r2
    fc68:	add	r3, r2
    fc6a:	b.n	fb60 <_dtoa_r+0x710>
    fc6c:	mov	r2, r0
    fc6e:	b.n	fc5c <_dtoa_r+0x80c>
    fc70:	cmp.w	r9, #0
    fc74:	bgt.n	fce4 <_dtoa_r+0x894>
    fc76:	ldr	r3, [sp, #24]
    fc78:	cmp	r3, #2
    fc7a:	ble.n	fce4 <_dtoa_r+0x894>
    fc7c:	mov	sl, r9
    fc7e:	cmp.w	sl, #0
    fc82:	bne.n	fca0 <_dtoa_r+0x850>
    fc84:	mov	r1, r4
    fc86:	mov	r3, sl
    fc88:	movs	r2, #5
    fc8a:	mov	r0, r6
    fc8c:	bl	10758 <__multadd>
    fc90:	mov	r1, r0
    fc92:	mov	r4, r0
    fc94:	mov	r0, r5
    fc96:	bl	10c20 <__mcmp>
    fc9a:	cmp	r0, #0
    fc9c:	bgt.w	f868 <_dtoa_r+0x418>
    fca0:	ldr	r3, [sp, #32]
    fca2:	ldr.w	r8, [sp, #4]
    fca6:	mvn.w	fp, r3
    fcaa:	mov.w	r9, #0
    fcae:	mov	r1, r4
    fcb0:	mov	r0, r6
    fcb2:	bl	10714 <_Bfree>
    fcb6:	cmp	r7, #0
    fcb8:	beq.w	f9fe <_dtoa_r+0x5ae>
    fcbc:	cmp.w	r9, #0
    fcc0:	beq.n	fcce <_dtoa_r+0x87e>
    fcc2:	cmp	r9, r7
    fcc4:	beq.n	fcce <_dtoa_r+0x87e>
    fcc6:	mov	r1, r9
    fcc8:	mov	r0, r6
    fcca:	bl	10714 <_Bfree>
    fcce:	mov	r1, r7
    fcd0:	mov	r0, r6
    fcd2:	bl	10714 <_Bfree>
    fcd6:	b.n	f9fe <_dtoa_r+0x5ae>
    fcd8:	movs	r4, #0
    fcda:	mov	r7, r4
    fcdc:	b.n	fca0 <_dtoa_r+0x850>
    fcde:	mov	fp, r2
    fce0:	mov	r7, r4
    fce2:	b.n	f868 <_dtoa_r+0x418>
    fce4:	ldr	r3, [sp, #28]
    fce6:	mov	sl, r9
    fce8:	cmp	r3, #0
    fcea:	beq.w	feee <_dtoa_r+0xa9e>
    fcee:	cmp.w	r8, #0
    fcf2:	ble.n	fd00 <_dtoa_r+0x8b0>
    fcf4:	mov	r1, r7
    fcf6:	mov	r2, r8
    fcf8:	mov	r0, r6
    fcfa:	bl	10b48 <__lshift>
    fcfe:	mov	r7, r0
    fd00:	ldr	r3, [sp, #36]	; 0x24
    fd02:	cmp	r3, #0
    fd04:	beq.n	fdc2 <_dtoa_r+0x972>
    fd06:	ldr	r1, [r7, #4]
    fd08:	mov	r0, r6
    fd0a:	bl	10694 <_Balloc>
    fd0e:	mov	r8, r0
    fd10:	cbnz	r0, fd1e <_dtoa_r+0x8ce>
    fd12:	ldr	r3, [pc, #520]	; (ff1c <_dtoa_r+0xacc>)
    fd14:	mov	r2, r0
    fd16:	movw	r1, #751	; 0x2ef
    fd1a:	b.w	f480 <_dtoa_r+0x30>
    fd1e:	ldr	r2, [r7, #16]
    fd20:	adds	r2, #2
    fd22:	lsls	r2, r2, #2
    fd24:	add.w	r1, r7, #12
    fd28:	adds	r0, #12
    fd2a:	bl	a79c <memcpy>
    fd2e:	movs	r2, #1
    fd30:	mov	r1, r8
    fd32:	mov	r0, r6
    fd34:	bl	10b48 <__lshift>
    fd38:	ldr	r3, [sp, #4]
    fd3a:	adds	r3, #1
    fd3c:	str	r3, [sp, #16]
    fd3e:	ldr	r3, [sp, #4]
    fd40:	add	r3, sl
    fd42:	str	r3, [sp, #32]
    fd44:	ldr	r3, [sp, #8]
    fd46:	and.w	r3, r3, #1
    fd4a:	mov	r9, r7
    fd4c:	str	r3, [sp, #28]
    fd4e:	mov	r7, r0
    fd50:	ldr	r3, [sp, #16]
    fd52:	mov	r1, r4
    fd54:	subs	r3, #1
    fd56:	mov	r0, r5
    fd58:	str	r3, [sp, #8]
    fd5a:	bl	f33c <quorem>
    fd5e:	mov	r3, r0
    fd60:	adds	r3, #48	; 0x30
    fd62:	str	r0, [sp, #20]
    fd64:	mov	r1, r9
    fd66:	mov	r0, r5
    fd68:	str	r3, [sp, #36]	; 0x24
    fd6a:	bl	10c20 <__mcmp>
    fd6e:	mov	r2, r7
    fd70:	mov	sl, r0
    fd72:	mov	r1, r4
    fd74:	mov	r0, r6
    fd76:	bl	10c58 <__mdiff>
    fd7a:	ldr	r2, [r0, #12]
    fd7c:	ldr	r3, [sp, #36]	; 0x24
    fd7e:	mov	r8, r0
    fd80:	cbnz	r2, fdc6 <_dtoa_r+0x976>
    fd82:	mov	r1, r0
    fd84:	mov	r0, r5
    fd86:	bl	10c20 <__mcmp>
    fd8a:	ldr	r3, [sp, #36]	; 0x24
    fd8c:	mov	r2, r0
    fd8e:	mov	r1, r8
    fd90:	mov	r0, r6
    fd92:	strd	r3, r2, [sp, #36]	; 0x24
    fd96:	bl	10714 <_Bfree>
    fd9a:	ldr	r3, [sp, #24]
    fd9c:	ldr	r2, [sp, #40]	; 0x28
    fd9e:	ldr.w	r8, [sp, #16]
    fda2:	orr.w	r1, r3, r2
    fda6:	ldr	r3, [sp, #28]
    fda8:	orrs	r1, r3
    fdaa:	ldr	r3, [sp, #36]	; 0x24
    fdac:	bne.n	fdca <_dtoa_r+0x97a>
    fdae:	cmp	r3, #57	; 0x39
    fdb0:	beq.n	fe06 <_dtoa_r+0x9b6>
    fdb2:	cmp.w	sl, #0
    fdb6:	ble.n	fdbc <_dtoa_r+0x96c>
    fdb8:	ldr	r3, [sp, #20]
    fdba:	adds	r3, #49	; 0x31
    fdbc:	ldr	r2, [sp, #8]
    fdbe:	strb	r3, [r2, #0]
    fdc0:	b.n	fcae <_dtoa_r+0x85e>
    fdc2:	mov	r0, r7
    fdc4:	b.n	fd38 <_dtoa_r+0x8e8>
    fdc6:	movs	r2, #1
    fdc8:	b.n	fd8e <_dtoa_r+0x93e>
    fdca:	cmp.w	sl, #0
    fdce:	blt.n	fdde <_dtoa_r+0x98e>
    fdd0:	ldr	r1, [sp, #24]
    fdd2:	orr.w	sl, r1, sl
    fdd6:	ldr	r1, [sp, #28]
    fdd8:	orrs.w	sl, sl, r1
    fddc:	bne.n	fe20 <_dtoa_r+0x9d0>
    fdde:	cmp	r2, #0
    fde0:	ble.n	fdbc <_dtoa_r+0x96c>
    fde2:	mov	r1, r5
    fde4:	movs	r2, #1
    fde6:	mov	r0, r6
    fde8:	str	r3, [sp, #16]
    fdea:	bl	10b48 <__lshift>
    fdee:	mov	r1, r4
    fdf0:	mov	r5, r0
    fdf2:	bl	10c20 <__mcmp>
    fdf6:	cmp	r0, #0
    fdf8:	ldr	r3, [sp, #16]
    fdfa:	bgt.n	fe02 <_dtoa_r+0x9b2>
    fdfc:	bne.n	fdbc <_dtoa_r+0x96c>
    fdfe:	lsls	r2, r3, #31
    fe00:	bpl.n	fdbc <_dtoa_r+0x96c>
    fe02:	cmp	r3, #57	; 0x39
    fe04:	bne.n	fdb8 <_dtoa_r+0x968>
    fe06:	ldr	r2, [sp, #8]
    fe08:	movs	r3, #57	; 0x39
    fe0a:	strb	r3, [r2, #0]
    fe0c:	mov	r3, r8
    fe0e:	mov	r8, r3
    fe10:	subs	r3, #1
    fe12:	ldrb.w	r2, [r8, #-1]
    fe16:	cmp	r2, #57	; 0x39
    fe18:	beq.n	febe <_dtoa_r+0xa6e>
    fe1a:	adds	r2, #1
    fe1c:	strb	r2, [r3, #0]
    fe1e:	b.n	fcae <_dtoa_r+0x85e>
    fe20:	cmp	r2, #0
    fe22:	ble.n	fe2c <_dtoa_r+0x9dc>
    fe24:	cmp	r3, #57	; 0x39
    fe26:	beq.n	fe06 <_dtoa_r+0x9b6>
    fe28:	adds	r3, #1
    fe2a:	b.n	fdbc <_dtoa_r+0x96c>
    fe2c:	ldr	r2, [sp, #16]
    fe2e:	ldr	r1, [sp, #32]
    fe30:	strb.w	r3, [r2, #-1]
    fe34:	cmp	r2, r1
    fe36:	beq.n	fe90 <_dtoa_r+0xa40>
    fe38:	mov	r1, r5
    fe3a:	movs	r3, #0
    fe3c:	movs	r2, #10
    fe3e:	mov	r0, r6
    fe40:	bl	10758 <__multadd>
    fe44:	cmp	r9, r7
    fe46:	mov	r5, r0
    fe48:	mov.w	r3, #0
    fe4c:	mov.w	r2, #10
    fe50:	mov	r1, r9
    fe52:	mov	r0, r6
    fe54:	bne.n	fe66 <_dtoa_r+0xa16>
    fe56:	bl	10758 <__multadd>
    fe5a:	mov	r9, r0
    fe5c:	mov	r7, r0
    fe5e:	ldr	r3, [sp, #16]
    fe60:	adds	r3, #1
    fe62:	str	r3, [sp, #16]
    fe64:	b.n	fd50 <_dtoa_r+0x900>
    fe66:	bl	10758 <__multadd>
    fe6a:	mov	r1, r7
    fe6c:	mov	r9, r0
    fe6e:	movs	r3, #0
    fe70:	movs	r2, #10
    fe72:	mov	r0, r6
    fe74:	bl	10758 <__multadd>
    fe78:	mov	r7, r0
    fe7a:	b.n	fe5e <_dtoa_r+0xa0e>
    fe7c:	cmp.w	sl, #0
    fe80:	ldr	r2, [sp, #4]
    fe82:	ite	gt
    fe84:	movgt	r8, sl
    fe86:	movle.w	r8, #1
    fe8a:	add	r8, r2
    fe8c:	mov.w	r9, #0
    fe90:	mov	r1, r5
    fe92:	movs	r2, #1
    fe94:	mov	r0, r6
    fe96:	str	r3, [sp, #8]
    fe98:	bl	10b48 <__lshift>
    fe9c:	mov	r1, r4
    fe9e:	mov	r5, r0
    fea0:	bl	10c20 <__mcmp>
    fea4:	cmp	r0, #0
    fea6:	bgt.n	fe0c <_dtoa_r+0x9bc>
    fea8:	bne.n	feb0 <_dtoa_r+0xa60>
    feaa:	ldr	r3, [sp, #8]
    feac:	lsls	r3, r3, #31
    feae:	bmi.n	fe0c <_dtoa_r+0x9bc>
    feb0:	mov	r3, r8
    feb2:	mov	r8, r3
    feb4:	ldrb.w	r2, [r3, #-1]!
    feb8:	cmp	r2, #48	; 0x30
    feba:	beq.n	feb2 <_dtoa_r+0xa62>
    febc:	b.n	fcae <_dtoa_r+0x85e>
    febe:	ldr	r2, [sp, #4]
    fec0:	cmp	r2, r3
    fec2:	bne.n	fe0e <_dtoa_r+0x9be>
    fec4:	add.w	fp, fp, #1
    fec8:	movs	r3, #49	; 0x31
    feca:	b.n	fdbe <_dtoa_r+0x96e>
    fecc:	ldr	r3, [pc, #80]	; (ff20 <_dtoa_r+0xad0>)
    fece:	b.w	f526 <_dtoa_r+0xd6>
    fed2:	ldr	r3, [sp, #116]	; 0x74
    fed4:	cmp	r3, #0
    fed6:	bne.w	f4e4 <_dtoa_r+0x94>
    feda:	ldr	r3, [pc, #72]	; (ff24 <_dtoa_r+0xad4>)
    fedc:	b.w	f526 <_dtoa_r+0xd6>
    fee0:	cmp.w	sl, #0
    fee4:	bgt.n	feee <_dtoa_r+0xa9e>
    fee6:	ldr	r3, [sp, #24]
    fee8:	cmp	r3, #2
    feea:	bgt.w	fc7e <_dtoa_r+0x82e>
    feee:	ldr.w	r8, [sp, #4]
    fef2:	mov	r1, r4
    fef4:	mov	r0, r5
    fef6:	bl	f33c <quorem>
    fefa:	add.w	r3, r0, #48	; 0x30
    fefe:	strb.w	r3, [r8], #1
    ff02:	ldr	r2, [sp, #4]
    ff04:	sub.w	r2, r8, r2
    ff08:	cmp	sl, r2
    ff0a:	ble.n	fe7c <_dtoa_r+0xa2c>
    ff0c:	mov	r1, r5
    ff0e:	movs	r3, #0
    ff10:	movs	r2, #10
    ff12:	mov	r0, r6
    ff14:	bl	10758 <__multadd>
    ff18:	mov	r5, r0
    ff1a:	b.n	fef2 <_dtoa_r+0xaa2>
    ff1c:	.word	0x20001440
    ff20:	.word	0x200011a1
    ff24:	.word	0x200013c3

0000ff28 <_free_r>:
    ff28:	push	{r0, r1, r2, r4, r5, lr}
    ff2a:	cmp	r1, #0
    ff2c:	beq.n	ffb8 <_free_r+0x90>
    ff2e:	ldr.w	r3, [r1, #-4]
    ff32:	str	r0, [sp, #4]
    ff34:	cmp	r3, #0
    ff36:	sub.w	r4, r1, #4
    ff3a:	it	lt
    ff3c:	addlt	r4, r4, r3
    ff3e:	bl	d2e4 <__malloc_lock>
    ff42:	ldr	r2, [pc, #120]	; (ffbc <_free_r+0x94>)
    ff44:	ldr	r0, [sp, #4]
    ff46:	ldr	r3, [r2, #0]
    ff48:	cbnz	r3, ff58 <_free_r+0x30>
    ff4a:	str	r3, [r4, #4]
    ff4c:	str	r4, [r2, #0]
    ff4e:	add	sp, #12
    ff50:	ldmia.w	sp!, {r4, r5, lr}
    ff54:	b.w	d2f0 <__malloc_unlock>
    ff58:	cmp	r3, r4
    ff5a:	bls.n	ff6e <_free_r+0x46>
    ff5c:	ldr	r5, [r4, #0]
    ff5e:	adds	r1, r4, r5
    ff60:	cmp	r3, r1
    ff62:	itttt	eq
    ff64:	ldreq	r1, [r3, #0]
    ff66:	ldreq	r3, [r3, #4]
    ff68:	addeq	r1, r1, r5
    ff6a:	streq	r1, [r4, #0]
    ff6c:	b.n	ff4a <_free_r+0x22>
    ff6e:	mov	r2, r3
    ff70:	ldr	r3, [r3, #4]
    ff72:	cbz	r3, ff78 <_free_r+0x50>
    ff74:	cmp	r3, r4
    ff76:	bls.n	ff6e <_free_r+0x46>
    ff78:	ldr	r1, [r2, #0]
    ff7a:	adds	r5, r2, r1
    ff7c:	cmp	r5, r4
    ff7e:	bne.n	ff98 <_free_r+0x70>
    ff80:	ldr	r4, [r4, #0]
    ff82:	add	r1, r4
    ff84:	adds	r4, r2, r1
    ff86:	cmp	r3, r4
    ff88:	str	r1, [r2, #0]
    ff8a:	bne.n	ff4e <_free_r+0x26>
    ff8c:	ldr	r4, [r3, #0]
    ff8e:	ldr	r3, [r3, #4]
    ff90:	str	r3, [r2, #4]
    ff92:	add	r4, r1
    ff94:	str	r4, [r2, #0]
    ff96:	b.n	ff4e <_free_r+0x26>
    ff98:	bls.n	ffa0 <_free_r+0x78>
    ff9a:	movs	r3, #12
    ff9c:	str	r3, [r0, #0]
    ff9e:	b.n	ff4e <_free_r+0x26>
    ffa0:	ldr	r5, [r4, #0]
    ffa2:	adds	r1, r4, r5
    ffa4:	cmp	r3, r1
    ffa6:	itt	eq
    ffa8:	ldreq	r1, [r3, #0]
    ffaa:	ldreq	r3, [r3, #4]
    ffac:	str	r3, [r4, #4]
    ffae:	itt	eq
    ffb0:	addeq	r1, r1, r5
    ffb2:	streq	r1, [r4, #0]
    ffb4:	str	r4, [r2, #4]
    ffb6:	b.n	ff4e <_free_r+0x26>
    ffb8:	add	sp, #12
    ffba:	pop	{r4, r5, pc}
    ffbc:	.word	0x20020854

0000ffc0 <rshift>:
    ffc0:	ldr	r3, [r0, #16]
    ffc2:	cmp.w	r3, r1, asr #5
    ffc6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ffca:	mov.w	r2, r1, asr #5
    ffce:	add.w	r4, r0, #20
    ffd2:	ble.n	10060 <rshift+0xa0>
    ffd4:	ands.w	r1, r1, #31
    ffd8:	add.w	r6, r4, r3, lsl #2
    ffdc:	add.w	r5, r4, r2, lsl #2
    ffe0:	bne.n	fffc <rshift+0x3c>
    ffe2:	add.w	r7, r0, #16
    ffe6:	mov	r1, r5
    ffe8:	cmp	r1, r6
    ffea:	bcc.n	10056 <rshift+0x96>
    ffec:	subs	r3, r3, r2
    ffee:	lsls	r3, r3, #2
    fff0:	subs	r2, r5, #3
    fff2:	cmp	r6, r2
    fff4:	it	cc
    fff6:	movcc	r3, #0
    fff8:	add	r3, r4
    fffa:	b.n	10028 <rshift+0x68>
    fffc:	ldr.w	r7, [r4, r2, lsl #2]
   10000:	rsb	r8, r1, #32
   10004:	lsrs	r7, r1
   10006:	add.w	lr, r5, #4
   1000a:	mov	r9, r4
   1000c:	cmp	r6, lr
   1000e:	mov	ip, lr
   10010:	bhi.n	1003e <rshift+0x7e>
   10012:	subs	r2, r3, r2
   10014:	lsls	r2, r2, #2
   10016:	subs	r2, #4
   10018:	adds	r5, #1
   1001a:	cmp	r6, r5
   1001c:	it	cc
   1001e:	movcc	r2, #0
   10020:	adds	r3, r4, r2
   10022:	str	r7, [r4, r2]
   10024:	cbz	r7, 10028 <rshift+0x68>
   10026:	adds	r3, #4
   10028:	subs	r2, r3, r4
   1002a:	cmp	r3, r4
   1002c:	mov.w	r2, r2, asr #2
   10030:	it	eq
   10032:	moveq	r3, #0
   10034:	str	r2, [r0, #16]
   10036:	it	eq
   10038:	streq	r3, [r0, #20]
   1003a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1003e:	ldr.w	ip, [ip]
   10042:	lsl.w	ip, ip, r8
   10046:	orr.w	r7, ip, r7
   1004a:	str.w	r7, [r9], #4
   1004e:	ldr.w	r7, [lr], #4
   10052:	lsrs	r7, r1
   10054:	b.n	1000c <rshift+0x4c>
   10056:	ldr.w	ip, [r1], #4
   1005a:	str.w	ip, [r7, #4]!
   1005e:	b.n	ffe8 <rshift+0x28>
   10060:	mov	r3, r4
   10062:	b.n	10028 <rshift+0x68>

00010064 <__hexdig_fun>:
   10064:	sub.w	r3, r0, #48	; 0x30
   10068:	cmp	r3, #9
   1006a:	bhi.n	10072 <__hexdig_fun+0xe>
   1006c:	subs	r0, #32
   1006e:	uxtb	r0, r0
   10070:	bx	lr
   10072:	sub.w	r3, r0, #97	; 0x61
   10076:	cmp	r3, #5
   10078:	bhi.n	1007e <__hexdig_fun+0x1a>
   1007a:	subs	r0, #71	; 0x47
   1007c:	b.n	1006e <__hexdig_fun+0xa>
   1007e:	sub.w	r3, r0, #65	; 0x41
   10082:	cmp	r3, #5
   10084:	bhi.n	1008a <__hexdig_fun+0x26>
   10086:	subs	r0, #39	; 0x27
   10088:	b.n	1006e <__hexdig_fun+0xa>
   1008a:	movs	r0, #0
   1008c:	bx	lr
	...

00010090 <__gethex>:
   10090:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10094:	mov	r7, r2
   10096:	ldr	r2, [r1, #0]
   10098:	sub	sp, #20
   1009a:	add.w	fp, r2, #2
   1009e:	rsb	r2, r2, #4278255360	; 0xff00ff00
   100a2:	add.w	r2, r2, #16711680	; 0xff0000
   100a6:	mov	r9, r0
   100a8:	mov	sl, r1
   100aa:	str	r3, [sp, #8]
   100ac:	adds	r2, #254	; 0xfe
   100ae:	add.w	r3, r2, fp
   100b2:	mov	r8, fp
   100b4:	ldrb.w	r0, [fp], #1
   100b8:	str	r3, [sp, #4]
   100ba:	cmp	r0, #48	; 0x30
   100bc:	beq.n	100ae <__gethex+0x1e>
   100be:	bl	10064 <__hexdig_fun>
   100c2:	mov	r4, r0
   100c4:	cmp	r0, #0
   100c6:	bne.n	1013a <__gethex+0xaa>
   100c8:	ldr	r1, [pc, #668]	; (10368 <__gethex+0x2d8>)
   100ca:	movs	r2, #1
   100cc:	mov	r0, r8
   100ce:	bl	f12c <strncmp>
   100d2:	mov	r6, r0
   100d4:	cmp	r0, #0
   100d6:	bne.n	101ac <__gethex+0x11c>
   100d8:	ldrb.w	r0, [r8, #1]
   100dc:	mov	r5, fp
   100de:	bl	10064 <__hexdig_fun>
   100e2:	cmp	r0, #0
   100e4:	beq.n	101b0 <__gethex+0x120>
   100e6:	mov	r2, fp
   100e8:	ldrb	r0, [r2, #0]
   100ea:	cmp	r0, #48	; 0x30
   100ec:	mov	r8, r2
   100ee:	add.w	r2, r2, #1
   100f2:	beq.n	100e8 <__gethex+0x58>
   100f4:	bl	10064 <__hexdig_fun>
   100f8:	movs	r3, #1
   100fa:	clz	r4, r0
   100fe:	lsrs	r4, r4, #5
   10100:	mov	r6, fp
   10102:	str	r3, [sp, #4]
   10104:	mov	r2, r8
   10106:	mov	r5, r2
   10108:	adds	r2, #1
   1010a:	ldrb	r0, [r5, #0]
   1010c:	bl	10064 <__hexdig_fun>
   10110:	cmp	r0, #0
   10112:	bne.n	10106 <__gethex+0x76>
   10114:	ldr	r1, [pc, #592]	; (10368 <__gethex+0x2d8>)
   10116:	movs	r2, #1
   10118:	mov	r0, r5
   1011a:	bl	f12c <strncmp>
   1011e:	cbnz	r0, 10140 <__gethex+0xb0>
   10120:	cbnz	r6, 10134 <__gethex+0xa4>
   10122:	adds	r6, r5, #1
   10124:	mov	r2, r6
   10126:	mov	r5, r2
   10128:	adds	r2, #1
   1012a:	ldrb	r0, [r5, #0]
   1012c:	bl	10064 <__hexdig_fun>
   10130:	cmp	r0, #0
   10132:	bne.n	10126 <__gethex+0x96>
   10134:	subs	r3, r6, r5
   10136:	lsls	r6, r3, #2
   10138:	b.n	10144 <__gethex+0xb4>
   1013a:	movs	r4, #0
   1013c:	mov	r6, r4
   1013e:	b.n	10104 <__gethex+0x74>
   10140:	cmp	r6, #0
   10142:	bne.n	10134 <__gethex+0xa4>
   10144:	ldrb	r3, [r5, #0]
   10146:	and.w	r3, r3, #223	; 0xdf
   1014a:	cmp	r3, #80	; 0x50
   1014c:	bne.n	101ca <__gethex+0x13a>
   1014e:	ldrb	r3, [r5, #1]
   10150:	cmp	r3, #43	; 0x2b
   10152:	beq.n	101b4 <__gethex+0x124>
   10154:	cmp	r3, #45	; 0x2d
   10156:	beq.n	101bc <__gethex+0x12c>
   10158:	adds	r1, r5, #1
   1015a:	mov.w	fp, #0
   1015e:	ldrb	r0, [r1, #0]
   10160:	bl	10064 <__hexdig_fun>
   10164:	subs	r2, r0, #1
   10166:	uxtb	r2, r2
   10168:	cmp	r2, #24
   1016a:	bhi.n	101ca <__gethex+0x13a>
   1016c:	sub.w	r2, r0, #16
   10170:	ldrb.w	r0, [r1, #1]!
   10174:	bl	10064 <__hexdig_fun>
   10178:	add.w	ip, r0, #4294967295
   1017c:	uxtb.w	ip, ip
   10180:	cmp.w	ip, #24
   10184:	bls.n	101c2 <__gethex+0x132>
   10186:	cmp.w	fp, #0
   1018a:	beq.n	1018e <__gethex+0xfe>
   1018c:	negs	r2, r2
   1018e:	add	r6, r2
   10190:	str.w	r1, [sl]
   10194:	cbz	r4, 101ce <__gethex+0x13e>
   10196:	ldr	r3, [sp, #4]
   10198:	cmp	r3, #0
   1019a:	ite	ne
   1019c:	movne.w	r8, #0
   101a0:	moveq.w	r8, #6
   101a4:	mov	r0, r8
   101a6:	add	sp, #20
   101a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101ac:	mov	r5, r8
   101ae:	mov	r6, r4
   101b0:	movs	r4, #1
   101b2:	b.n	10144 <__gethex+0xb4>
   101b4:	mov.w	fp, #0
   101b8:	adds	r1, r5, #2
   101ba:	b.n	1015e <__gethex+0xce>
   101bc:	mov.w	fp, #1
   101c0:	b.n	101b8 <__gethex+0x128>
   101c2:	movs	r3, #10
   101c4:	mla	r0, r3, r2, r0
   101c8:	b.n	1016c <__gethex+0xdc>
   101ca:	mov	r1, r5
   101cc:	b.n	10190 <__gethex+0x100>
   101ce:	sub.w	r3, r5, r8
   101d2:	subs	r3, #1
   101d4:	mov	r1, r4
   101d6:	cmp	r3, #7
   101d8:	bgt.n	101f0 <__gethex+0x160>
   101da:	mov	r0, r9
   101dc:	bl	10694 <_Balloc>
   101e0:	mov	r4, r0
   101e2:	cbnz	r0, 101f6 <__gethex+0x166>
   101e4:	ldr	r3, [pc, #388]	; (1036c <__gethex+0x2dc>)
   101e6:	mov	r2, r0
   101e8:	movs	r1, #228	; 0xe4
   101ea:	ldr	r0, [pc, #388]	; (10370 <__gethex+0x2e0>)
   101ec:	bl	11bdc <__assert_func>
   101f0:	adds	r1, #1
   101f2:	asrs	r3, r3, #1
   101f4:	b.n	101d6 <__gethex+0x146>
   101f6:	add.w	sl, r0, #20
   101fa:	movs	r3, #0
   101fc:	ldr	r1, [pc, #360]	; (10368 <__gethex+0x2d8>)
   101fe:	str.w	sl, [sp, #4]
   10202:	mov	fp, r3
   10204:	cmp	r8, r5
   10206:	bcc.n	1028e <__gethex+0x1fe>
   10208:	ldr	r0, [sp, #4]
   1020a:	str.w	fp, [r0], #4
   1020e:	sub.w	r0, r0, sl
   10212:	asrs	r0, r0, #2
   10214:	str	r0, [r4, #16]
   10216:	mov.w	r8, r0, lsl #5
   1021a:	mov	r0, fp
   1021c:	bl	10878 <__hi0bits>
   10220:	ldr	r5, [r7, #0]
   10222:	sub.w	r0, r8, r0
   10226:	cmp	r0, r5
   10228:	ble.n	102de <__gethex+0x24e>
   1022a:	sub.w	r8, r0, r5
   1022e:	mov	r1, r8
   10230:	mov	r0, r4
   10232:	bl	10fa6 <__any_on>
   10236:	mov	fp, r0
   10238:	cbz	r0, 1026a <__gethex+0x1da>
   1023a:	add.w	r3, r8, #4294967295
   1023e:	asrs	r1, r3, #5
   10240:	and.w	r2, r3, #31
   10244:	ldr.w	r1, [sl, r1, lsl #2]
   10248:	mov.w	fp, #1
   1024c:	lsl.w	r2, fp, r2
   10250:	tst	r2, r1
   10252:	beq.n	1026a <__gethex+0x1da>
   10254:	cmp	r3, fp
   10256:	ble.n	10266 <__gethex+0x1d6>
   10258:	sub.w	r1, r8, #2
   1025c:	mov	r0, r4
   1025e:	bl	10fa6 <__any_on>
   10262:	cmp	r0, #0
   10264:	bne.n	102d8 <__gethex+0x248>
   10266:	mov.w	fp, #2
   1026a:	mov	r1, r8
   1026c:	mov	r0, r4
   1026e:	bl	ffc0 <rshift>
   10272:	add	r6, r8
   10274:	ldr	r3, [r7, #8]
   10276:	cmp	r3, r6
   10278:	bge.n	102fe <__gethex+0x26e>
   1027a:	mov	r1, r4
   1027c:	mov	r0, r9
   1027e:	bl	10714 <_Bfree>
   10282:	ldr	r2, [sp, #56]	; 0x38
   10284:	movs	r3, #0
   10286:	str	r3, [r2, #0]
   10288:	mov.w	r8, #163	; 0xa3
   1028c:	b.n	101a4 <__gethex+0x114>
   1028e:	ldrb.w	r2, [r5, #-1]!
   10292:	cmp	r2, #46	; 0x2e
   10294:	beq.n	102c0 <__gethex+0x230>
   10296:	cmp	r3, #32
   10298:	bne.n	102a8 <__gethex+0x218>
   1029a:	ldr	r3, [sp, #4]
   1029c:	str.w	fp, [r3], #4
   102a0:	mov.w	fp, #0
   102a4:	str	r3, [sp, #4]
   102a6:	mov	r3, fp
   102a8:	ldrb	r0, [r5, #0]
   102aa:	str	r3, [sp, #12]
   102ac:	bl	10064 <__hexdig_fun>
   102b0:	ldr	r3, [sp, #12]
   102b2:	and.w	r0, r0, #15
   102b6:	lsls	r0, r3
   102b8:	orr.w	fp, fp, r0
   102bc:	adds	r3, #4
   102be:	b.n	10204 <__gethex+0x174>
   102c0:	cmp	r8, r5
   102c2:	bhi.n	10296 <__gethex+0x206>
   102c4:	movs	r2, #1
   102c6:	mov	r0, r5
   102c8:	str	r3, [sp, #12]
   102ca:	bl	f12c <strncmp>
   102ce:	ldr	r1, [pc, #152]	; (10368 <__gethex+0x2d8>)
   102d0:	ldr	r3, [sp, #12]
   102d2:	cmp	r0, #0
   102d4:	bne.n	10296 <__gethex+0x206>
   102d6:	b.n	10204 <__gethex+0x174>
   102d8:	mov.w	fp, #3
   102dc:	b.n	1026a <__gethex+0x1da>
   102de:	bge.n	102f8 <__gethex+0x268>
   102e0:	sub.w	r8, r5, r0
   102e4:	mov	r1, r4
   102e6:	mov	r2, r8
   102e8:	mov	r0, r9
   102ea:	bl	10b48 <__lshift>
   102ee:	sub.w	r6, r6, r8
   102f2:	mov	r4, r0
   102f4:	add.w	sl, r0, #20
   102f8:	mov.w	fp, #0
   102fc:	b.n	10274 <__gethex+0x1e4>
   102fe:	ldr	r3, [r7, #4]
   10300:	cmp	r3, r6
   10302:	ble.n	103ec <__gethex+0x35c>
   10304:	subs	r6, r3, r6
   10306:	cmp	r5, r6
   10308:	bgt.n	10374 <__gethex+0x2e4>
   1030a:	ldr	r3, [r7, #12]
   1030c:	cmp	r3, #2
   1030e:	beq.n	10358 <__gethex+0x2c8>
   10310:	cmp	r3, #3
   10312:	beq.n	10360 <__gethex+0x2d0>
   10314:	cmp	r3, #1
   10316:	bne.n	10344 <__gethex+0x2b4>
   10318:	cmp	r5, r6
   1031a:	bne.n	10344 <__gethex+0x2b4>
   1031c:	cmp	r5, #1
   1031e:	bne.n	10338 <__gethex+0x2a8>
   10320:	ldr	r2, [sp, #8]
   10322:	ldr	r3, [r7, #4]
   10324:	str	r3, [r2, #0]
   10326:	movs	r3, #1
   10328:	str	r3, [r4, #16]
   1032a:	str.w	r3, [sl]
   1032e:	ldr	r3, [sp, #56]	; 0x38
   10330:	mov.w	r8, #98	; 0x62
   10334:	str	r4, [r3, #0]
   10336:	b.n	101a4 <__gethex+0x114>
   10338:	subs	r1, r5, #1
   1033a:	mov	r0, r4
   1033c:	bl	10fa6 <__any_on>
   10340:	cmp	r0, #0
   10342:	bne.n	10320 <__gethex+0x290>
   10344:	mov	r1, r4
   10346:	mov	r0, r9
   10348:	bl	10714 <_Bfree>
   1034c:	ldr	r2, [sp, #56]	; 0x38
   1034e:	movs	r3, #0
   10350:	str	r3, [r2, #0]
   10352:	mov.w	r8, #80	; 0x50
   10356:	b.n	101a4 <__gethex+0x114>
   10358:	ldr	r3, [sp, #60]	; 0x3c
   1035a:	cmp	r3, #0
   1035c:	bne.n	10344 <__gethex+0x2b4>
   1035e:	b.n	10320 <__gethex+0x290>
   10360:	ldr	r3, [sp, #60]	; 0x3c
   10362:	cmp	r3, #0
   10364:	bne.n	10320 <__gethex+0x290>
   10366:	b.n	10344 <__gethex+0x2b4>
   10368:	.word	0x20000d11
   1036c:	.word	0x20001440
   10370:	.word	0x20001261
   10374:	add.w	r8, r6, #4294967295
   10378:	cmp.w	fp, #0
   1037c:	bne.n	103e6 <__gethex+0x356>
   1037e:	cmp.w	r8, #0
   10382:	beq.n	1038e <__gethex+0x2fe>
   10384:	mov	r1, r8
   10386:	mov	r0, r4
   10388:	bl	10fa6 <__any_on>
   1038c:	mov	fp, r0
   1038e:	mov.w	r2, r8, asr #5
   10392:	movs	r3, #1
   10394:	ldr.w	r2, [sl, r2, lsl #2]
   10398:	and.w	r8, r8, #31
   1039c:	lsl.w	r3, r3, r8
   103a0:	tst	r3, r2
   103a2:	mov	r1, r6
   103a4:	mov	r0, r4
   103a6:	it	ne
   103a8:	orrne.w	fp, fp, #2
   103ac:	subs	r5, r5, r6
   103ae:	bl	ffc0 <rshift>
   103b2:	ldr	r6, [r7, #4]
   103b4:	mov.w	r8, #2
   103b8:	cmp.w	fp, #0
   103bc:	beq.n	10454 <__gethex+0x3c4>
   103be:	ldr	r3, [r7, #12]
   103c0:	cmp	r3, #2
   103c2:	beq.n	103f2 <__gethex+0x362>
   103c4:	cmp	r3, #3
   103c6:	beq.n	103fa <__gethex+0x36a>
   103c8:	cmp	r3, #1
   103ca:	bne.n	103e0 <__gethex+0x350>
   103cc:	tst.w	fp, #2
   103d0:	beq.n	103e0 <__gethex+0x350>
   103d2:	ldr.w	r3, [sl]
   103d6:	orr.w	fp, fp, r3
   103da:	tst.w	fp, #1
   103de:	bne.n	10400 <__gethex+0x370>
   103e0:	orr.w	r8, r8, #16
   103e4:	b.n	10454 <__gethex+0x3c4>
   103e6:	mov.w	fp, #1
   103ea:	b.n	1038e <__gethex+0x2fe>
   103ec:	mov.w	r8, #1
   103f0:	b.n	103b8 <__gethex+0x328>
   103f2:	ldr	r3, [sp, #60]	; 0x3c
   103f4:	rsb	r3, r3, #1
   103f8:	str	r3, [sp, #60]	; 0x3c
   103fa:	ldr	r3, [sp, #60]	; 0x3c
   103fc:	cmp	r3, #0
   103fe:	beq.n	103e0 <__gethex+0x350>
   10400:	ldr.w	fp, [r4, #16]
   10404:	add.w	r2, r4, #20
   10408:	mov.w	r3, fp, lsl #2
   1040c:	str	r3, [sp, #4]
   1040e:	add.w	r0, r2, fp, lsl #2
   10412:	movs	r3, #0
   10414:	mov	ip, r2
   10416:	ldr.w	r1, [r2], #4
   1041a:	cmp.w	r1, #4294967295
   1041e:	beq.n	1045e <__gethex+0x3ce>
   10420:	adds	r1, #1
   10422:	str.w	r1, [ip]
   10426:	cmp.w	r8, #2
   1042a:	add.w	r2, r4, #20
   1042e:	bne.n	104ac <__gethex+0x41c>
   10430:	ldr	r3, [r7, #0]
   10432:	subs	r3, #1
   10434:	cmp	r3, r5
   10436:	bne.n	10450 <__gethex+0x3c0>
   10438:	asrs	r1, r5, #5
   1043a:	movs	r3, #1
   1043c:	and.w	r5, r5, #31
   10440:	lsl.w	r5, r3, r5
   10444:	ldr.w	r3, [r2, r1, lsl #2]
   10448:	tst	r5, r3
   1044a:	it	ne
   1044c:	movne.w	r8, #1
   10450:	orr.w	r8, r8, #32
   10454:	ldr	r3, [sp, #56]	; 0x38
   10456:	str	r4, [r3, #0]
   10458:	ldr	r3, [sp, #8]
   1045a:	str	r6, [r3, #0]
   1045c:	b.n	101a4 <__gethex+0x114>
   1045e:	cmp	r0, r2
   10460:	str.w	r3, [r2, #-4]
   10464:	bhi.n	10414 <__gethex+0x384>
   10466:	ldr	r2, [r4, #8]
   10468:	cmp	fp, r2
   1046a:	blt.n	1049c <__gethex+0x40c>
   1046c:	ldr	r1, [r4, #4]
   1046e:	mov	r0, r9
   10470:	adds	r1, #1
   10472:	bl	10694 <_Balloc>
   10476:	mov	sl, r0
   10478:	cbnz	r0, 10482 <__gethex+0x3f2>
   1047a:	ldr	r3, [pc, #108]	; (104e8 <__gethex+0x458>)
   1047c:	mov	r2, r0
   1047e:	movs	r1, #132	; 0x84
   10480:	b.n	101ea <__gethex+0x15a>
   10482:	ldr	r2, [r4, #16]
   10484:	adds	r2, #2
   10486:	add.w	r1, r4, #12
   1048a:	lsls	r2, r2, #2
   1048c:	adds	r0, #12
   1048e:	bl	a79c <memcpy>
   10492:	mov	r1, r4
   10494:	mov	r0, r9
   10496:	bl	10714 <_Bfree>
   1049a:	mov	r4, sl
   1049c:	ldr	r2, [r4, #16]
   1049e:	adds	r1, r2, #1
   104a0:	add.w	r2, r4, r2, lsl #2
   104a4:	str	r1, [r4, #16]
   104a6:	movs	r1, #1
   104a8:	str	r1, [r2, #20]
   104aa:	b.n	10426 <__gethex+0x396>
   104ac:	ldr	r1, [r4, #16]
   104ae:	cmp	r1, fp
   104b0:	ble.n	104ca <__gethex+0x43a>
   104b2:	movs	r1, #1
   104b4:	mov	r0, r4
   104b6:	bl	ffc0 <rshift>
   104ba:	ldr	r3, [r7, #8]
   104bc:	adds	r6, #1
   104be:	cmp	r3, r6
   104c0:	blt.w	1027a <__gethex+0x1ea>
   104c4:	mov.w	r8, #1
   104c8:	b.n	10450 <__gethex+0x3c0>
   104ca:	ands.w	r5, r5, #31
   104ce:	beq.n	104c4 <__gethex+0x434>
   104d0:	ldr	r3, [sp, #4]
   104d2:	add	r2, r3
   104d4:	rsb	r5, r5, #32
   104d8:	ldr.w	r0, [r2, #-4]
   104dc:	bl	10878 <__hi0bits>
   104e0:	cmp	r0, r5
   104e2:	blt.n	104b2 <__gethex+0x422>
   104e4:	b.n	104c4 <__gethex+0x434>
   104e6:	nop
   104e8:	.word	0x20001440

000104ec <L_shift>:
   104ec:	rsb	r2, r2, #8
   104f0:	lsls	r2, r2, #2
   104f2:	push	{r4, r5, r6, lr}
   104f4:	rsb	r6, r2, #32
   104f8:	ldr	r3, [r0, #4]
   104fa:	ldr	r4, [r0, #0]
   104fc:	lsl.w	r5, r3, r6
   10500:	orrs	r4, r5
   10502:	lsrs	r3, r2
   10504:	str	r4, [r0, #0]
   10506:	str.w	r3, [r0, #4]!
   1050a:	cmp	r0, r1
   1050c:	bcc.n	104f8 <L_shift+0xc>
   1050e:	pop	{r4, r5, r6, pc}

00010510 <__match>:
   10510:	push	{r4, r5, lr}
   10512:	ldr	r3, [r0, #0]
   10514:	adds	r3, #1
   10516:	ldrb.w	r4, [r1], #1
   1051a:	cbnz	r4, 10522 <__match+0x12>
   1051c:	str	r3, [r0, #0]
   1051e:	movs	r0, #1
   10520:	pop	{r4, r5, pc}
   10522:	ldrb.w	r2, [r3], #1
   10526:	sub.w	r5, r2, #65	; 0x41
   1052a:	cmp	r5, #25
   1052c:	it	ls
   1052e:	addls	r2, #32
   10530:	cmp	r2, r4
   10532:	beq.n	10516 <__match+0x6>
   10534:	movs	r0, #0
   10536:	b.n	10520 <__match+0x10>

00010538 <__hexnan>:
   10538:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1053c:	ldr	r3, [r1, #0]
   1053e:	ldr	r1, [r0, #0]
   10540:	asrs	r6, r3, #5
   10542:	add.w	r6, r2, r6, lsl #2
   10546:	ands.w	r3, r3, #31
   1054a:	sub	sp, #28
   1054c:	it	ne
   1054e:	addne	r6, #4
   10550:	movs	r5, #0
   10552:	subs	r7, r6, #4
   10554:	mov	sl, r0
   10556:	mov	r8, r2
   10558:	str	r3, [sp, #4]
   1055a:	str.w	r5, [r6, #-4]
   1055e:	mov	r9, r7
   10560:	mov	r4, r7
   10562:	str	r5, [sp, #8]
   10564:	mov	fp, r5
   10566:	ldrb	r2, [r1, #1]
   10568:	adds	r3, r1, #1
   1056a:	str	r3, [sp, #12]
   1056c:	cbz	r2, 105c0 <__hexnan+0x88>
   1056e:	mov	r0, r2
   10570:	str	r1, [sp, #20]
   10572:	str	r2, [sp, #16]
   10574:	bl	10064 <__hexdig_fun>
   10578:	cmp	r0, #0
   1057a:	bne.n	1061c <__hexnan+0xe4>
   1057c:	ldr	r2, [sp, #16]
   1057e:	ldr	r1, [sp, #20]
   10580:	cmp	r2, #32
   10582:	bhi.n	105b6 <__hexnan+0x7e>
   10584:	ldr	r3, [sp, #8]
   10586:	cmp	fp, r3
   10588:	ble.n	105b2 <__hexnan+0x7a>
   1058a:	cmp	r4, r9
   1058c:	bcs.n	1059c <__hexnan+0x64>
   1058e:	cmp	r5, #7
   10590:	bgt.n	1059c <__hexnan+0x64>
   10592:	mov	r2, r5
   10594:	mov	r1, r9
   10596:	mov	r0, r4
   10598:	bl	104ec <L_shift>
   1059c:	cmp	r4, r8
   1059e:	bls.n	10642 <__hexnan+0x10a>
   105a0:	movs	r3, #0
   105a2:	sub.w	r9, r4, #4
   105a6:	str.w	r3, [r4, #-4]
   105aa:	str.w	fp, [sp, #8]
   105ae:	mov	r4, r9
   105b0:	mov	r5, r3
   105b2:	ldr	r1, [sp, #12]
   105b4:	b.n	10566 <__hexnan+0x2e>
   105b6:	cmp	r2, #41	; 0x29
   105b8:	bne.n	10666 <__hexnan+0x12e>
   105ba:	adds	r1, #2
   105bc:	str.w	r1, [sl]
   105c0:	cmp.w	fp, #0
   105c4:	beq.n	10666 <__hexnan+0x12e>
   105c6:	cmp	r4, r9
   105c8:	bcs.n	105d8 <__hexnan+0xa0>
   105ca:	cmp	r5, #7
   105cc:	bgt.n	105d8 <__hexnan+0xa0>
   105ce:	mov	r2, r5
   105d0:	mov	r1, r9
   105d2:	mov	r0, r4
   105d4:	bl	104ec <L_shift>
   105d8:	cmp	r4, r8
   105da:	bls.n	10646 <__hexnan+0x10e>
   105dc:	sub.w	r2, r8, #4
   105e0:	mov	r3, r4
   105e2:	ldr.w	r1, [r3], #4
   105e6:	str.w	r1, [r2, #4]!
   105ea:	cmp	r7, r3
   105ec:	bcs.n	105e2 <__hexnan+0xaa>
   105ee:	subs	r3, r7, r4
   105f0:	bic.w	r3, r3, #3
   105f4:	adds	r3, #4
   105f6:	subs	r6, #3
   105f8:	adds	r4, #1
   105fa:	cmp	r6, r4
   105fc:	it	cc
   105fe:	movcc	r3, #4
   10600:	add	r3, r8
   10602:	movs	r2, #0
   10604:	str.w	r2, [r3], #4
   10608:	cmp	r7, r3
   1060a:	bcs.n	10604 <__hexnan+0xcc>
   1060c:	ldr	r3, [r7, #0]
   1060e:	cbnz	r3, 10618 <__hexnan+0xe0>
   10610:	cmp	r7, r8
   10612:	bne.n	10662 <__hexnan+0x12a>
   10614:	movs	r3, #1
   10616:	str	r3, [r7, #0]
   10618:	movs	r0, #5
   1061a:	b.n	10668 <__hexnan+0x130>
   1061c:	adds	r5, #1
   1061e:	cmp	r5, #8
   10620:	add.w	fp, fp, #1
   10624:	ble.n	10634 <__hexnan+0xfc>
   10626:	cmp	r4, r8
   10628:	bls.n	105b2 <__hexnan+0x7a>
   1062a:	movs	r3, #0
   1062c:	str.w	r3, [r4, #-4]
   10630:	movs	r5, #1
   10632:	subs	r4, #4
   10634:	ldr	r2, [r4, #0]
   10636:	and.w	r0, r0, #15
   1063a:	orr.w	r0, r0, r2, lsl #4
   1063e:	str	r0, [r4, #0]
   10640:	b.n	105b2 <__hexnan+0x7a>
   10642:	movs	r5, #8
   10644:	b.n	105b2 <__hexnan+0x7a>
   10646:	ldr	r3, [sp, #4]
   10648:	cmp	r3, #0
   1064a:	beq.n	1060c <__hexnan+0xd4>
   1064c:	rsb	r3, r3, #32
   10650:	mov.w	r2, #4294967295
   10654:	lsrs	r2, r3
   10656:	ldr.w	r3, [r6, #-4]
   1065a:	ands	r3, r2
   1065c:	str.w	r3, [r6, #-4]
   10660:	b.n	1060c <__hexnan+0xd4>
   10662:	subs	r7, #4
   10664:	b.n	1060c <__hexnan+0xd4>
   10666:	movs	r0, #4
   10668:	add	sp, #28
   1066a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001066e <__ascii_mbtowc>:
   1066e:	sub	sp, #8
   10670:	cbnz	r1, 10674 <__ascii_mbtowc+0x6>
   10672:	add	r1, sp, #4
   10674:	cbz	r2, 10688 <__ascii_mbtowc+0x1a>
   10676:	cbz	r3, 1068c <__ascii_mbtowc+0x1e>
   10678:	ldrb	r3, [r2, #0]
   1067a:	str	r3, [r1, #0]
   1067c:	ldrb	r2, [r2, #0]
   1067e:	subs	r0, r2, #0
   10680:	it	ne
   10682:	movne	r0, #1
   10684:	add	sp, #8
   10686:	bx	lr
   10688:	mov	r0, r2
   1068a:	b.n	10684 <__ascii_mbtowc+0x16>
   1068c:	mvn.w	r0, #1
   10690:	b.n	10684 <__ascii_mbtowc+0x16>
	...

00010694 <_Balloc>:
   10694:	push	{r4, r5, r6, lr}
   10696:	ldr	r6, [r0, #28]
   10698:	mov	r4, r0
   1069a:	mov	r5, r1
   1069c:	cbnz	r6, 106bc <_Balloc+0x28>
   1069e:	movs	r0, #16
   106a0:	bl	d198 <malloc>
   106a4:	mov	r2, r0
   106a6:	str	r0, [r4, #28]
   106a8:	cbnz	r0, 106b4 <_Balloc+0x20>
   106aa:	ldr	r3, [pc, #96]	; (1070c <_Balloc+0x78>)
   106ac:	ldr	r0, [pc, #96]	; (10710 <_Balloc+0x7c>)
   106ae:	movs	r1, #107	; 0x6b
   106b0:	bl	11bdc <__assert_func>
   106b4:	strd	r6, r6, [r0, #4]
   106b8:	str	r6, [r0, #0]
   106ba:	str	r6, [r0, #12]
   106bc:	ldr	r6, [r4, #28]
   106be:	ldr	r3, [r6, #12]
   106c0:	cbz	r3, 106e4 <_Balloc+0x50>
   106c2:	ldr	r3, [r4, #28]
   106c4:	ldr	r3, [r3, #12]
   106c6:	ldr.w	r0, [r3, r5, lsl #2]
   106ca:	cbnz	r0, 106fc <_Balloc+0x68>
   106cc:	movs	r1, #1
   106ce:	lsl.w	r6, r1, r5
   106d2:	adds	r2, r6, #5
   106d4:	lsls	r2, r2, #2
   106d6:	mov	r0, r4
   106d8:	bl	11c18 <_calloc_r>
   106dc:	cbz	r0, 106f8 <_Balloc+0x64>
   106de:	strd	r5, r6, [r0, #4]
   106e2:	b.n	10702 <_Balloc+0x6e>
   106e4:	movs	r2, #33	; 0x21
   106e6:	movs	r1, #4
   106e8:	mov	r0, r4
   106ea:	bl	11c18 <_calloc_r>
   106ee:	ldr	r3, [r4, #28]
   106f0:	str	r0, [r6, #12]
   106f2:	ldr	r3, [r3, #12]
   106f4:	cmp	r3, #0
   106f6:	bne.n	106c2 <_Balloc+0x2e>
   106f8:	movs	r0, #0
   106fa:	pop	{r4, r5, r6, pc}
   106fc:	ldr	r2, [r0, #0]
   106fe:	str.w	r2, [r3, r5, lsl #2]
   10702:	movs	r3, #0
   10704:	strd	r3, r3, [r0, #12]
   10708:	b.n	106fa <_Balloc+0x66>
   1070a:	nop
   1070c:	.word	0x200013d0
   10710:	.word	0x20000c6c

00010714 <_Bfree>:
   10714:	push	{r4, r5, r6, lr}
   10716:	ldr	r6, [r0, #28]
   10718:	mov	r5, r0
   1071a:	mov	r4, r1
   1071c:	cbnz	r6, 1073c <_Bfree+0x28>
   1071e:	movs	r0, #16
   10720:	bl	d198 <malloc>
   10724:	mov	r2, r0
   10726:	str	r0, [r5, #28]
   10728:	cbnz	r0, 10734 <_Bfree+0x20>
   1072a:	ldr	r3, [pc, #36]	; (10750 <_Bfree+0x3c>)
   1072c:	ldr	r0, [pc, #36]	; (10754 <_Bfree+0x40>)
   1072e:	movs	r1, #143	; 0x8f
   10730:	bl	11bdc <__assert_func>
   10734:	strd	r6, r6, [r0, #4]
   10738:	str	r6, [r0, #0]
   1073a:	str	r6, [r0, #12]
   1073c:	cbz	r4, 1074e <_Bfree+0x3a>
   1073e:	ldr	r3, [r5, #28]
   10740:	ldr	r2, [r4, #4]
   10742:	ldr	r3, [r3, #12]
   10744:	ldr.w	r1, [r3, r2, lsl #2]
   10748:	str	r1, [r4, #0]
   1074a:	str.w	r4, [r3, r2, lsl #2]
   1074e:	pop	{r4, r5, r6, pc}
   10750:	.word	0x200013d0
   10754:	.word	0x20000c6c

00010758 <__multadd>:
   10758:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1075c:	ldr	r5, [r1, #16]
   1075e:	mov	r7, r0
   10760:	mov	r4, r1
   10762:	mov	r6, r3
   10764:	add.w	ip, r1, #20
   10768:	movs	r0, #0
   1076a:	ldr.w	r3, [ip]
   1076e:	uxth	r1, r3
   10770:	mla	r1, r2, r1, r6
   10774:	lsrs	r6, r3, #16
   10776:	lsrs	r3, r1, #16
   10778:	mla	r3, r2, r6, r3
   1077c:	uxth	r1, r1
   1077e:	adds	r0, #1
   10780:	add.w	r1, r1, r3, lsl #16
   10784:	cmp	r5, r0
   10786:	str.w	r1, [ip], #4
   1078a:	mov.w	r6, r3, lsr #16
   1078e:	bgt.n	1076a <__multadd+0x12>
   10790:	cbz	r6, 107d6 <__multadd+0x7e>
   10792:	ldr	r3, [r4, #8]
   10794:	cmp	r3, r5
   10796:	bgt.n	107cc <__multadd+0x74>
   10798:	ldr	r1, [r4, #4]
   1079a:	mov	r0, r7
   1079c:	adds	r1, #1
   1079e:	bl	10694 <_Balloc>
   107a2:	mov	r8, r0
   107a4:	cbnz	r0, 107b2 <__multadd+0x5a>
   107a6:	mov	r2, r0
   107a8:	ldr	r3, [pc, #48]	; (107dc <__multadd+0x84>)
   107aa:	ldr	r0, [pc, #52]	; (107e0 <__multadd+0x88>)
   107ac:	movs	r1, #186	; 0xba
   107ae:	bl	11bdc <__assert_func>
   107b2:	ldr	r2, [r4, #16]
   107b4:	adds	r2, #2
   107b6:	add.w	r1, r4, #12
   107ba:	lsls	r2, r2, #2
   107bc:	adds	r0, #12
   107be:	bl	a79c <memcpy>
   107c2:	mov	r1, r4
   107c4:	mov	r0, r7
   107c6:	bl	10714 <_Bfree>
   107ca:	mov	r4, r8
   107cc:	add.w	r3, r4, r5, lsl #2
   107d0:	adds	r5, #1
   107d2:	str	r6, [r3, #20]
   107d4:	str	r5, [r4, #16]
   107d6:	mov	r0, r4
   107d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107dc:	.word	0x20001440
   107e0:	.word	0x20000c6c

000107e4 <__s2b>:
   107e4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   107e8:	mov	r4, r1
   107ea:	mov	r5, r2
   107ec:	mov	r7, r3
   107ee:	movs	r2, #9
   107f0:	adds	r3, #8
   107f2:	mov	r6, r0
   107f4:	sdiv	r3, r3, r2
   107f8:	movs	r1, #0
   107fa:	movs	r2, #1
   107fc:	cmp	r2, r3
   107fe:	blt.n	10814 <__s2b+0x30>
   10800:	mov	r0, r6
   10802:	bl	10694 <_Balloc>
   10806:	cbnz	r0, 1081a <__s2b+0x36>
   10808:	mov	r2, r0
   1080a:	ldr	r3, [pc, #100]	; (10870 <__s2b+0x8c>)
   1080c:	ldr	r0, [pc, #100]	; (10874 <__s2b+0x90>)
   1080e:	movs	r1, #211	; 0xd3
   10810:	bl	11bdc <__assert_func>
   10814:	lsls	r2, r2, #1
   10816:	adds	r1, #1
   10818:	b.n	107fc <__s2b+0x18>
   1081a:	ldr	r3, [sp, #32]
   1081c:	str	r3, [r0, #20]
   1081e:	cmp	r5, #9
   10820:	mov.w	r3, #1
   10824:	str	r3, [r0, #16]
   10826:	ble.n	10856 <__s2b+0x72>
   10828:	add.w	r9, r4, #9
   1082c:	mov	r8, r9
   1082e:	add	r4, r5
   10830:	ldrb.w	r3, [r8], #1
   10834:	mov	r1, r0
   10836:	subs	r3, #48	; 0x30
   10838:	movs	r2, #10
   1083a:	mov	r0, r6
   1083c:	bl	10758 <__multadd>
   10840:	cmp	r8, r4
   10842:	bne.n	10830 <__s2b+0x4c>
   10844:	sub.w	r4, r5, #8
   10848:	add	r4, r9
   1084a:	subs	r5, r5, r4
   1084c:	adds	r3, r4, r5
   1084e:	cmp	r3, r7
   10850:	blt.n	1085c <__s2b+0x78>
   10852:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10856:	adds	r4, #10
   10858:	movs	r5, #9
   1085a:	b.n	1084a <__s2b+0x66>
   1085c:	ldrb.w	r3, [r4], #1
   10860:	mov	r1, r0
   10862:	subs	r3, #48	; 0x30
   10864:	movs	r2, #10
   10866:	mov	r0, r6
   10868:	bl	10758 <__multadd>
   1086c:	b.n	1084c <__s2b+0x68>
   1086e:	nop
   10870:	.word	0x20001440
   10874:	.word	0x20000c6c

00010878 <__hi0bits>:
   10878:	lsrs	r3, r0, #16
   1087a:	lsls	r3, r3, #16
   1087c:	cbnz	r3, 108b4 <__hi0bits+0x3c>
   1087e:	lsls	r0, r0, #16
   10880:	movs	r3, #16
   10882:	tst.w	r0, #4278190080	; 0xff000000
   10886:	itt	eq
   10888:	lsleq	r0, r0, #8
   1088a:	addeq	r3, #8
   1088c:	tst.w	r0, #4026531840	; 0xf0000000
   10890:	itt	eq
   10892:	lsleq	r0, r0, #4
   10894:	addeq	r3, #4
   10896:	tst.w	r0, #3221225472	; 0xc0000000
   1089a:	itt	eq
   1089c:	lsleq	r0, r0, #2
   1089e:	addeq	r3, #2
   108a0:	cmp	r0, #0
   108a2:	blt.n	108b0 <__hi0bits+0x38>
   108a4:	tst.w	r0, #1073741824	; 0x40000000
   108a8:	add.w	r3, r3, #1
   108ac:	it	eq
   108ae:	moveq	r3, #32
   108b0:	mov	r0, r3
   108b2:	bx	lr
   108b4:	movs	r3, #0
   108b6:	b.n	10882 <__hi0bits+0xa>

000108b8 <__lo0bits>:
   108b8:	ldr	r3, [r0, #0]
   108ba:	ands.w	r2, r3, #7
   108be:	beq.n	108da <__lo0bits+0x22>
   108c0:	lsls	r1, r3, #31
   108c2:	bmi.n	1090a <__lo0bits+0x52>
   108c4:	lsls	r2, r3, #30
   108c6:	itett	mi
   108c8:	lsrmi	r3, r3, #1
   108ca:	lsrpl	r3, r3, #2
   108cc:	strmi	r3, [r0, #0]
   108ce:	movmi	r2, #1
   108d0:	itt	pl
   108d2:	strpl	r3, [r0, #0]
   108d4:	movpl	r2, #2
   108d6:	mov	r0, r2
   108d8:	bx	lr
   108da:	uxth	r1, r3
   108dc:	cbnz	r1, 108e2 <__lo0bits+0x2a>
   108de:	lsrs	r3, r3, #16
   108e0:	movs	r2, #16
   108e2:	uxtb	r1, r3
   108e4:	cbnz	r1, 108ea <__lo0bits+0x32>
   108e6:	adds	r2, #8
   108e8:	lsrs	r3, r3, #8
   108ea:	lsls	r1, r3, #28
   108ec:	itt	eq
   108ee:	lsreq	r3, r3, #4
   108f0:	addeq	r2, #4
   108f2:	lsls	r1, r3, #30
   108f4:	itt	eq
   108f6:	lsreq	r3, r3, #2
   108f8:	addeq	r2, #2
   108fa:	lsls	r1, r3, #31
   108fc:	bmi.n	10906 <__lo0bits+0x4e>
   108fe:	lsrs	r3, r3, #1
   10900:	add.w	r2, r2, #1
   10904:	beq.n	1090e <__lo0bits+0x56>
   10906:	str	r3, [r0, #0]
   10908:	b.n	108d6 <__lo0bits+0x1e>
   1090a:	movs	r2, #0
   1090c:	b.n	108d6 <__lo0bits+0x1e>
   1090e:	movs	r2, #32
   10910:	b.n	108d6 <__lo0bits+0x1e>
	...

00010914 <__i2b>:
   10914:	push	{r4, lr}
   10916:	mov	r4, r1
   10918:	movs	r1, #1
   1091a:	bl	10694 <_Balloc>
   1091e:	mov	r2, r0
   10920:	cbnz	r0, 1092e <__i2b+0x1a>
   10922:	ldr	r3, [pc, #20]	; (10938 <__i2b+0x24>)
   10924:	ldr	r0, [pc, #20]	; (1093c <__i2b+0x28>)
   10926:	movw	r1, #325	; 0x145
   1092a:	bl	11bdc <__assert_func>
   1092e:	movs	r3, #1
   10930:	str	r4, [r0, #20]
   10932:	str	r3, [r0, #16]
   10934:	pop	{r4, pc}
   10936:	nop
   10938:	.word	0x20001440
   1093c:	.word	0x20000c6c

00010940 <__multiply>:
   10940:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10944:	mov	r9, r2
   10946:	ldr	r2, [r1, #16]
   10948:	ldr.w	r3, [r9, #16]
   1094c:	cmp	r2, r3
   1094e:	it	lt
   10950:	movlt	r3, r1
   10952:	mov	r4, r1
   10954:	itt	lt
   10956:	movlt	r4, r9
   10958:	movlt	r9, r3
   1095a:	ldr	r7, [r4, #16]
   1095c:	ldr.w	sl, [r9, #16]
   10960:	ldr	r3, [r4, #8]
   10962:	ldr	r1, [r4, #4]
   10964:	add.w	r6, r7, sl
   10968:	cmp	r3, r6
   1096a:	sub	sp, #20
   1096c:	it	lt
   1096e:	addlt	r1, #1
   10970:	bl	10694 <_Balloc>
   10974:	cbnz	r0, 10984 <__multiply+0x44>
   10976:	mov	r2, r0
   10978:	ldr	r3, [pc, #272]	; (10a8c <__multiply+0x14c>)
   1097a:	ldr	r0, [pc, #276]	; (10a90 <__multiply+0x150>)
   1097c:	mov.w	r1, #354	; 0x162
   10980:	bl	11bdc <__assert_func>
   10984:	add.w	r5, r0, #20
   10988:	add.w	r8, r5, r6, lsl #2
   1098c:	mov	r3, r5
   1098e:	movs	r2, #0
   10990:	cmp	r3, r8
   10992:	bcc.n	109d8 <__multiply+0x98>
   10994:	add.w	r3, r4, #20
   10998:	add.w	r7, r3, r7, lsl #2
   1099c:	add.w	r3, r9, #20
   109a0:	add.w	r2, r3, sl, lsl #2
   109a4:	str	r2, [sp, #8]
   109a6:	subs	r2, r7, r4
   109a8:	subs	r2, #21
   109aa:	bic.w	r2, r2, #3
   109ae:	adds	r2, #4
   109b0:	add.w	r1, r4, #21
   109b4:	cmp	r7, r1
   109b6:	it	cc
   109b8:	movcc	r2, #4
   109ba:	str	r2, [sp, #4]
   109bc:	ldr	r2, [sp, #8]
   109be:	str	r3, [sp, #12]
   109c0:	cmp	r2, r3
   109c2:	bhi.n	109de <__multiply+0x9e>
   109c4:	cmp	r6, #0
   109c6:	ble.n	109d0 <__multiply+0x90>
   109c8:	ldr.w	r3, [r8, #-4]!
   109cc:	cmp	r3, #0
   109ce:	beq.n	10a88 <__multiply+0x148>
   109d0:	str	r6, [r0, #16]
   109d2:	add	sp, #20
   109d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109d8:	str.w	r2, [r3], #4
   109dc:	b.n	10990 <__multiply+0x50>
   109de:	ldrh.w	sl, [r3]
   109e2:	cmp.w	sl, #0
   109e6:	beq.n	10a32 <__multiply+0xf2>
   109e8:	add.w	lr, r4, #20
   109ec:	mov	r9, r5
   109ee:	mov.w	ip, #0
   109f2:	ldr.w	r2, [lr], #4
   109f6:	ldr.w	r1, [r9]
   109fa:	uxth.w	fp, r2
   109fe:	uxth	r1, r1
   10a00:	mla	r1, sl, fp, r1
   10a04:	mov.w	fp, r2, lsr #16
   10a08:	ldr.w	r2, [r9]
   10a0c:	add	r1, ip
   10a0e:	mov.w	ip, r2, lsr #16
   10a12:	mla	r2, sl, fp, ip
   10a16:	add.w	r2, r2, r1, lsr #16
   10a1a:	uxth	r1, r1
   10a1c:	orr.w	r1, r1, r2, lsl #16
   10a20:	cmp	r7, lr
   10a22:	str.w	r1, [r9], #4
   10a26:	mov.w	ip, r2, lsr #16
   10a2a:	bhi.n	109f2 <__multiply+0xb2>
   10a2c:	ldr	r2, [sp, #4]
   10a2e:	str.w	ip, [r5, r2]
   10a32:	ldr	r2, [sp, #12]
   10a34:	ldrh.w	r9, [r2, #2]
   10a38:	adds	r3, #4
   10a3a:	cmp.w	r9, #0
   10a3e:	beq.n	10a84 <__multiply+0x144>
   10a40:	ldr	r1, [r5, #0]
   10a42:	add.w	ip, r4, #20
   10a46:	mov	lr, r5
   10a48:	mov.w	sl, #0
   10a4c:	ldrh.w	fp, [ip]
   10a50:	ldrh.w	r2, [lr, #2]
   10a54:	mla	r2, r9, fp, r2
   10a58:	add	r2, sl
   10a5a:	uxth	r1, r1
   10a5c:	orr.w	r1, r1, r2, lsl #16
   10a60:	str.w	r1, [lr], #4
   10a64:	ldr.w	r1, [ip], #4
   10a68:	mov.w	sl, r1, lsr #16
   10a6c:	ldrh.w	r1, [lr]
   10a70:	mla	r1, r9, sl, r1
   10a74:	add.w	r1, r1, r2, lsr #16
   10a78:	cmp	r7, ip
   10a7a:	mov.w	sl, r1, lsr #16
   10a7e:	bhi.n	10a4c <__multiply+0x10c>
   10a80:	ldr	r2, [sp, #4]
   10a82:	str	r1, [r5, r2]
   10a84:	adds	r5, #4
   10a86:	b.n	109bc <__multiply+0x7c>
   10a88:	subs	r6, #1
   10a8a:	b.n	109c4 <__multiply+0x84>
   10a8c:	.word	0x20001440
   10a90:	.word	0x20000c6c

00010a94 <__pow5mult>:
   10a94:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a98:	mov	r5, r2
   10a9a:	ands.w	r2, r2, #3
   10a9e:	mov	r6, r0
   10aa0:	mov	r7, r1
   10aa2:	beq.n	10ab4 <__pow5mult+0x20>
   10aa4:	ldr	r4, [pc, #148]	; (10b3c <__pow5mult+0xa8>)
   10aa6:	subs	r2, #1
   10aa8:	movs	r3, #0
   10aaa:	ldr.w	r2, [r4, r2, lsl #2]
   10aae:	bl	10758 <__multadd>
   10ab2:	mov	r7, r0
   10ab4:	asrs	r5, r5, #2
   10ab6:	beq.n	10b34 <__pow5mult+0xa0>
   10ab8:	ldr	r4, [r6, #28]
   10aba:	cbnz	r4, 10adc <__pow5mult+0x48>
   10abc:	movs	r0, #16
   10abe:	bl	d198 <malloc>
   10ac2:	mov	r2, r0
   10ac4:	str	r0, [r6, #28]
   10ac6:	cbnz	r0, 10ad4 <__pow5mult+0x40>
   10ac8:	ldr	r3, [pc, #116]	; (10b40 <__pow5mult+0xac>)
   10aca:	ldr	r0, [pc, #120]	; (10b44 <__pow5mult+0xb0>)
   10acc:	movw	r1, #435	; 0x1b3
   10ad0:	bl	11bdc <__assert_func>
   10ad4:	strd	r4, r4, [r0, #4]
   10ad8:	str	r4, [r0, #0]
   10ada:	str	r4, [r0, #12]
   10adc:	ldr.w	r8, [r6, #28]
   10ae0:	ldr.w	r4, [r8, #8]
   10ae4:	cbnz	r4, 10afa <__pow5mult+0x66>
   10ae6:	movw	r1, #625	; 0x271
   10aea:	mov	r0, r6
   10aec:	bl	10914 <__i2b>
   10af0:	movs	r3, #0
   10af2:	str.w	r0, [r8, #8]
   10af6:	mov	r4, r0
   10af8:	str	r3, [r0, #0]
   10afa:	mov.w	r9, #0
   10afe:	lsls	r3, r5, #31
   10b00:	bpl.n	10b18 <__pow5mult+0x84>
   10b02:	mov	r1, r7
   10b04:	mov	r2, r4
   10b06:	mov	r0, r6
   10b08:	bl	10940 <__multiply>
   10b0c:	mov	r1, r7
   10b0e:	mov	r8, r0
   10b10:	mov	r0, r6
   10b12:	bl	10714 <_Bfree>
   10b16:	mov	r7, r8
   10b18:	asrs	r5, r5, #1
   10b1a:	beq.n	10b34 <__pow5mult+0xa0>
   10b1c:	ldr	r0, [r4, #0]
   10b1e:	cbnz	r0, 10b30 <__pow5mult+0x9c>
   10b20:	mov	r2, r4
   10b22:	mov	r1, r4
   10b24:	mov	r0, r6
   10b26:	bl	10940 <__multiply>
   10b2a:	str	r0, [r4, #0]
   10b2c:	str.w	r9, [r0]
   10b30:	mov	r4, r0
   10b32:	b.n	10afe <__pow5mult+0x6a>
   10b34:	mov	r0, r7
   10b36:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10b3a:	nop
   10b3c:	.word	0x200009ac
   10b40:	.word	0x200013d0
   10b44:	.word	0x20000c6c

00010b48 <__lshift>:
   10b48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b4c:	mov	r4, r1
   10b4e:	ldr	r1, [r1, #4]
   10b50:	ldr	r3, [r4, #16]
   10b52:	add.w	r8, r3, r2, asr #5
   10b56:	ldr	r3, [r4, #8]
   10b58:	mov	r7, r0
   10b5a:	mov	r9, r2
   10b5c:	mov.w	sl, r2, asr #5
   10b60:	add.w	r6, r8, #1
   10b64:	cmp	r3, r6
   10b66:	blt.n	10b80 <__lshift+0x38>
   10b68:	mov	r0, r7
   10b6a:	bl	10694 <_Balloc>
   10b6e:	mov	r5, r0
   10b70:	cbnz	r0, 10b86 <__lshift+0x3e>
   10b72:	mov	r2, r0
   10b74:	ldr	r3, [pc, #160]	; (10c18 <__lshift+0xd0>)
   10b76:	ldr	r0, [pc, #164]	; (10c1c <__lshift+0xd4>)
   10b78:	mov.w	r1, #478	; 0x1de
   10b7c:	bl	11bdc <__assert_func>
   10b80:	adds	r1, #1
   10b82:	lsls	r3, r3, #1
   10b84:	b.n	10b64 <__lshift+0x1c>
   10b86:	movs	r3, #0
   10b88:	add.w	r1, r0, #20
   10b8c:	add.w	r2, r0, #16
   10b90:	mov	r0, r3
   10b92:	cmp	r3, sl
   10b94:	blt.n	10bfe <__lshift+0xb6>
   10b96:	ldr	r0, [r4, #16]
   10b98:	bic.w	sl, sl, sl, asr #31
   10b9c:	add.w	r3, r4, #20
   10ba0:	ands.w	r9, r9, #31
   10ba4:	add.w	r1, r1, sl, lsl #2
   10ba8:	add.w	ip, r3, r0, lsl #2
   10bac:	beq.n	10c06 <__lshift+0xbe>
   10bae:	rsb	lr, r9, #32
   10bb2:	mov	sl, r1
   10bb4:	movs	r2, #0
   10bb6:	ldr	r0, [r3, #0]
   10bb8:	lsl.w	r0, r0, r9
   10bbc:	orrs	r0, r2
   10bbe:	str.w	r0, [sl], #4
   10bc2:	ldr.w	r2, [r3], #4
   10bc6:	cmp	ip, r3
   10bc8:	lsr.w	r2, r2, lr
   10bcc:	bhi.n	10bb6 <__lshift+0x6e>
   10bce:	sub.w	r3, ip, r4
   10bd2:	subs	r3, #21
   10bd4:	bic.w	r3, r3, #3
   10bd8:	adds	r3, #4
   10bda:	add.w	r0, r4, #21
   10bde:	cmp	ip, r0
   10be0:	it	cc
   10be2:	movcc	r3, #4
   10be4:	str	r2, [r1, r3]
   10be6:	cbz	r2, 10bec <__lshift+0xa4>
   10be8:	add.w	r6, r8, #2
   10bec:	subs	r6, #1
   10bee:	mov	r0, r7
   10bf0:	str	r6, [r5, #16]
   10bf2:	mov	r1, r4
   10bf4:	bl	10714 <_Bfree>
   10bf8:	mov	r0, r5
   10bfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bfe:	str.w	r0, [r2, #4]!
   10c02:	adds	r3, #1
   10c04:	b.n	10b92 <__lshift+0x4a>
   10c06:	subs	r1, #4
   10c08:	ldr.w	r2, [r3], #4
   10c0c:	str.w	r2, [r1, #4]!
   10c10:	cmp	ip, r3
   10c12:	bhi.n	10c08 <__lshift+0xc0>
   10c14:	b.n	10bec <__lshift+0xa4>
   10c16:	nop
   10c18:	.word	0x20001440
   10c1c:	.word	0x20000c6c

00010c20 <__mcmp>:
   10c20:	push	{r4, r5, lr}
   10c22:	ldr	r2, [r0, #16]
   10c24:	ldr	r4, [r1, #16]
   10c26:	subs	r2, r2, r4
   10c28:	bne.n	10c48 <__mcmp+0x28>
   10c2a:	add.w	r3, r0, #20
   10c2e:	adds	r1, #20
   10c30:	add.w	r0, r3, r4, lsl #2
   10c34:	add.w	r1, r1, r4, lsl #2
   10c38:	ldr.w	r5, [r0, #-4]!
   10c3c:	ldr.w	r4, [r1, #-4]!
   10c40:	cmp	r5, r4
   10c42:	beq.n	10c4c <__mcmp+0x2c>
   10c44:	bcc.n	10c52 <__mcmp+0x32>
   10c46:	movs	r2, #1
   10c48:	mov	r0, r2
   10c4a:	pop	{r4, r5, pc}
   10c4c:	cmp	r3, r0
   10c4e:	bcc.n	10c38 <__mcmp+0x18>
   10c50:	b.n	10c48 <__mcmp+0x28>
   10c52:	mov.w	r2, #4294967295
   10c56:	b.n	10c48 <__mcmp+0x28>

00010c58 <__mdiff>:
   10c58:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c5c:	mov	r4, r1
   10c5e:	mov	r6, r0
   10c60:	mov	r1, r2
   10c62:	mov	r0, r4
   10c64:	mov	r8, r2
   10c66:	bl	10c20 <__mcmp>
   10c6a:	subs	r5, r0, #0
   10c6c:	bne.n	10c90 <__mdiff+0x38>
   10c6e:	mov	r1, r5
   10c70:	mov	r0, r6
   10c72:	bl	10694 <_Balloc>
   10c76:	cbnz	r0, 10c86 <__mdiff+0x2e>
   10c78:	ldr	r3, [pc, #232]	; (10d64 <__mdiff+0x10c>)
   10c7a:	mov	r2, r0
   10c7c:	movw	r1, #567	; 0x237
   10c80:	ldr	r0, [pc, #228]	; (10d68 <__mdiff+0x110>)
   10c82:	bl	11bdc <__assert_func>
   10c86:	movs	r3, #1
   10c88:	strd	r3, r5, [r0, #16]
   10c8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c90:	itt	ge
   10c92:	movge	r3, r8
   10c94:	movge	r8, r4
   10c96:	mov	r0, r6
   10c98:	ldr.w	r1, [r8, #4]
   10c9c:	itte	ge
   10c9e:	movge	r4, r3
   10ca0:	movge	r5, #0
   10ca2:	movlt	r5, #1
   10ca4:	bl	10694 <_Balloc>
   10ca8:	cbnz	r0, 10cb4 <__mdiff+0x5c>
   10caa:	ldr	r3, [pc, #184]	; (10d64 <__mdiff+0x10c>)
   10cac:	mov	r2, r0
   10cae:	movw	r1, #581	; 0x245
   10cb2:	b.n	10c80 <__mdiff+0x28>
   10cb4:	ldr.w	r7, [r8, #16]
   10cb8:	ldr	r6, [r4, #16]
   10cba:	str	r5, [r0, #12]
   10cbc:	add.w	r9, r4, #20
   10cc0:	add.w	r5, r8, #20
   10cc4:	add.w	lr, r0, #20
   10cc8:	add.w	ip, r5, r7, lsl #2
   10ccc:	add.w	r6, r9, r6, lsl #2
   10cd0:	add.w	r2, r8, #16
   10cd4:	mov	sl, lr
   10cd6:	movs	r1, #0
   10cd8:	ldr.w	r3, [r9], #4
   10cdc:	ldr.w	fp, [r2, #4]!
   10ce0:	uxtah	r8, r1, fp
   10ce4:	uxth	r1, r3
   10ce6:	lsrs	r3, r3, #16
   10ce8:	sub.w	r8, r8, r1
   10cec:	rsb	r3, r3, fp, lsr #16
   10cf0:	add.w	r3, r3, r8, asr #16
   10cf4:	uxth.w	r8, r8
   10cf8:	asrs	r1, r3, #16
   10cfa:	cmp	r6, r9
   10cfc:	orr.w	r3, r8, r3, lsl #16
   10d00:	str.w	r3, [sl], #4
   10d04:	bhi.n	10cd8 <__mdiff+0x80>
   10d06:	subs	r3, r6, r4
   10d08:	subs	r3, #21
   10d0a:	bic.w	r3, r3, #3
   10d0e:	adds	r3, #4
   10d10:	adds	r4, #21
   10d12:	cmp	r6, r4
   10d14:	it	cc
   10d16:	movcc	r3, #4
   10d18:	add	r5, r3
   10d1a:	add	r3, lr
   10d1c:	mov	lr, r3
   10d1e:	mov	r6, r5
   10d20:	cmp	r6, ip
   10d22:	bcc.n	10d42 <__mdiff+0xea>
   10d24:	add.w	r2, ip, #3
   10d28:	subs	r2, r2, r5
   10d2a:	bic.w	r2, r2, #3
   10d2e:	subs	r5, #3
   10d30:	cmp	ip, r5
   10d32:	it	cc
   10d34:	movcc	r2, #0
   10d36:	add	r3, r2
   10d38:	ldr.w	r2, [r3, #-4]!
   10d3c:	cbz	r2, 10d5e <__mdiff+0x106>
   10d3e:	str	r7, [r0, #16]
   10d40:	b.n	10c8c <__mdiff+0x34>
   10d42:	ldr.w	r8, [r6], #4
   10d46:	uxtah	r2, r1, r8
   10d4a:	asrs	r4, r2, #16
   10d4c:	add.w	r4, r4, r8, lsr #16
   10d50:	uxth	r2, r2
   10d52:	orr.w	r2, r2, r4, lsl #16
   10d56:	str.w	r2, [lr], #4
   10d5a:	asrs	r1, r4, #16
   10d5c:	b.n	10d20 <__mdiff+0xc8>
   10d5e:	subs	r7, #1
   10d60:	b.n	10d38 <__mdiff+0xe0>
   10d62:	nop
   10d64:	.word	0x20001440
   10d68:	.word	0x20000c6c

00010d6c <__ulp>:
   10d6c:	sub	sp, #8
   10d6e:	vstr	d0, [sp]
   10d72:	ldr	r2, [sp, #4]
   10d74:	ldr	r3, [pc, #60]	; (10db4 <__ulp+0x48>)
   10d76:	ands	r3, r2
   10d78:	sub.w	r3, r3, #54525952	; 0x3400000
   10d7c:	cmp	r3, #0
   10d7e:	bgt.n	10d92 <__ulp+0x26>
   10d80:	negs	r3, r3
   10d82:	cmp.w	r3, #20971520	; 0x1400000
   10d86:	mov.w	r2, r3, asr #20
   10d8a:	bge.n	10d96 <__ulp+0x2a>
   10d8c:	mov.w	r3, #524288	; 0x80000
   10d90:	asrs	r3, r2
   10d92:	movs	r2, #0
   10d94:	b.n	10da8 <__ulp+0x3c>
   10d96:	sub.w	r3, r2, #20
   10d9a:	cmp	r3, #30
   10d9c:	itte	le
   10d9e:	movle.w	r2, #2147483648	; 0x80000000
   10da2:	lsrle	r2, r3
   10da4:	movgt	r2, #1
   10da6:	movs	r3, #0
   10da8:	mov	r1, r3
   10daa:	mov	r0, r2
   10dac:	vmov	d0, r0, r1
   10db0:	add	sp, #8
   10db2:	bx	lr
   10db4:	.word	0x7ff00000

00010db8 <__b2d>:
   10db8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dbc:	ldr	r6, [r0, #16]
   10dbe:	add.w	r8, r0, #20
   10dc2:	add.w	r6, r8, r6, lsl #2
   10dc6:	subs	r7, r6, #4
   10dc8:	ldr.w	r2, [r6, #-4]
   10dcc:	mov	r0, r2
   10dce:	bl	10878 <__hi0bits>
   10dd2:	rsb	r3, r0, #32
   10dd6:	cmp	r0, #10
   10dd8:	str	r3, [r1, #0]
   10dda:	ldr	r1, [pc, #108]	; (10e48 <__b2d+0x90>)
   10ddc:	bgt.n	10e0a <__b2d+0x52>
   10dde:	rsb	ip, r0, #11
   10de2:	lsr.w	r3, r2, ip
   10de6:	cmp	r8, r7
   10de8:	orr.w	r5, r3, r1
   10dec:	ite	cc
   10dee:	ldrcc.w	r3, [r6, #-8]
   10df2:	movcs	r3, #0
   10df4:	adds	r0, #21
   10df6:	lsl.w	r0, r2, r0
   10dfa:	lsr.w	r3, r3, ip
   10dfe:	orrs	r3, r0
   10e00:	mov	r4, r3
   10e02:	vmov	d0, r4, r5
   10e06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e0a:	cmp	r8, r7
   10e0c:	itte	cc
   10e0e:	ldrcc.w	r3, [r6, #-8]
   10e12:	subcc.w	r7, r6, #8
   10e16:	movcs	r3, #0
   10e18:	subs	r0, #11
   10e1a:	beq.n	10e42 <__b2d+0x8a>
   10e1c:	rsb	r1, r0, #32
   10e20:	lsr.w	r4, r3, r1
   10e24:	lsls	r2, r0
   10e26:	orrs	r2, r4
   10e28:	cmp	r7, r8
   10e2a:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10e2e:	ite	hi
   10e30:	ldrhi.w	r2, [r7, #-4]
   10e34:	movls	r2, #0
   10e36:	lsls	r3, r0
   10e38:	lsrs	r2, r1
   10e3a:	orr.w	r5, r5, #3145728	; 0x300000
   10e3e:	orrs	r3, r2
   10e40:	b.n	10e00 <__b2d+0x48>
   10e42:	orr.w	r5, r2, r1
   10e46:	b.n	10e00 <__b2d+0x48>
   10e48:	.word	0x3ff00000

00010e4c <__d2b>:
   10e4c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10e50:	mov	r7, r1
   10e52:	movs	r1, #1
   10e54:	vmov	r8, r9, d0
   10e58:	mov	r6, r2
   10e5a:	bl	10694 <_Balloc>
   10e5e:	mov	r4, r0
   10e60:	cbnz	r0, 10e70 <__d2b+0x24>
   10e62:	mov	r2, r0
   10e64:	ldr	r3, [pc, #144]	; (10ef8 <__d2b+0xac>)
   10e66:	ldr	r0, [pc, #148]	; (10efc <__d2b+0xb0>)
   10e68:	movw	r1, #783	; 0x30f
   10e6c:	bl	11bdc <__assert_func>
   10e70:	ubfx	r5, r9, #20, #11
   10e74:	ubfx	r3, r9, #0, #20
   10e78:	cbnz	r5, 10ec6 <__d2b+0x7a>
   10e7a:	str	r3, [sp, #4]
   10e7c:	subs.w	r3, r8, #0
   10e80:	beq.n	10ed0 <__d2b+0x84>
   10e82:	mov	r0, sp
   10e84:	str	r3, [sp, #0]
   10e86:	bl	108b8 <__lo0bits>
   10e8a:	ldrd	r1, r2, [sp]
   10e8e:	cbz	r0, 10ecc <__d2b+0x80>
   10e90:	rsb	r3, r0, #32
   10e94:	lsl.w	r3, r2, r3
   10e98:	orrs	r3, r1
   10e9a:	lsrs	r2, r0
   10e9c:	str	r3, [r4, #20]
   10e9e:	str	r2, [sp, #4]
   10ea0:	ldr	r3, [sp, #4]
   10ea2:	str	r3, [r4, #24]
   10ea4:	cmp	r3, #0
   10ea6:	ite	ne
   10ea8:	movne	r2, #2
   10eaa:	moveq	r2, #1
   10eac:	str	r2, [r4, #16]
   10eae:	cbz	r5, 10ee0 <__d2b+0x94>
   10eb0:	subw	r5, r5, #1075	; 0x433
   10eb4:	add	r5, r0
   10eb6:	str	r5, [r7, #0]
   10eb8:	rsb	r0, r0, #53	; 0x35
   10ebc:	str	r0, [r6, #0]
   10ebe:	mov	r0, r4
   10ec0:	add	sp, #12
   10ec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10ec6:	orr.w	r3, r3, #1048576	; 0x100000
   10eca:	b.n	10e7a <__d2b+0x2e>
   10ecc:	str	r1, [r4, #20]
   10ece:	b.n	10ea0 <__d2b+0x54>
   10ed0:	add	r0, sp, #4
   10ed2:	bl	108b8 <__lo0bits>
   10ed6:	ldr	r3, [sp, #4]
   10ed8:	str	r3, [r4, #20]
   10eda:	adds	r0, #32
   10edc:	movs	r2, #1
   10ede:	b.n	10eac <__d2b+0x60>
   10ee0:	add.w	r3, r4, r2, lsl #2
   10ee4:	subw	r0, r0, #1074	; 0x432
   10ee8:	str	r0, [r7, #0]
   10eea:	ldr	r0, [r3, #16]
   10eec:	bl	10878 <__hi0bits>
   10ef0:	rsb	r0, r0, r2, lsl #5
   10ef4:	b.n	10ebc <__d2b+0x70>
   10ef6:	nop
   10ef8:	.word	0x20001440
   10efc:	.word	0x20000c6c

00010f00 <__ratio>:
   10f00:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f04:	mov	r8, r1
   10f06:	mov	r1, sp
   10f08:	mov	r9, r0
   10f0a:	bl	10db8 <__b2d>
   10f0e:	add	r1, sp, #4
   10f10:	mov	r0, r8
   10f12:	vmov	r4, r5, d0
   10f16:	vmov	sl, s0
   10f1a:	bl	10db8 <__b2d>
   10f1e:	ldr.w	r3, [r8, #16]
   10f22:	ldr.w	r2, [r9, #16]
   10f26:	subs	r2, r2, r3
   10f28:	ldrd	r3, r1, [sp]
   10f2c:	subs	r3, r3, r1
   10f2e:	add.w	r3, r3, r2, lsl #5
   10f32:	vmov	r6, r7, d0
   10f36:	cmp	r3, #0
   10f38:	itet	le
   10f3a:	rsble	r3, r3, r3, lsl #12
   10f3e:	movgt	r2, r5
   10f40:	movle	r2, r7
   10f42:	mov	fp, r5
   10f44:	itet	le
   10f46:	addle.w	r3, r2, r3, lsl #20
   10f4a:	addgt.w	fp, r2, r3, lsl #20
   10f4e:	vmovle	s1, r3
   10f52:	vmov	d7, sl, fp
   10f56:	vdiv.f64	d0, d7, d0
   10f5a:	add	sp, #12
   10f5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010f60 <__copybits>:
   10f60:	subs	r1, #1
   10f62:	push	{r4, r5, r6, lr}
   10f64:	asrs	r1, r1, #5
   10f66:	ldr	r4, [r2, #16]
   10f68:	adds	r1, #1
   10f6a:	add.w	r3, r2, #20
   10f6e:	add.w	r1, r0, r1, lsl #2
   10f72:	add.w	r4, r3, r4, lsl #2
   10f76:	subs	r5, r0, #4
   10f78:	cmp	r3, r4
   10f7a:	bcc.n	10f96 <__copybits+0x36>
   10f7c:	subs	r3, r4, r2
   10f7e:	subs	r3, #17
   10f80:	bic.w	r3, r3, #3
   10f84:	adds	r2, #17
   10f86:	cmp	r2, r4
   10f88:	it	hi
   10f8a:	movhi	r3, #0
   10f8c:	add	r0, r3
   10f8e:	movs	r3, #0
   10f90:	cmp	r0, r1
   10f92:	bcc.n	10fa0 <__copybits+0x40>
   10f94:	pop	{r4, r5, r6, pc}
   10f96:	ldr.w	r6, [r3], #4
   10f9a:	str.w	r6, [r5, #4]!
   10f9e:	b.n	10f78 <__copybits+0x18>
   10fa0:	str.w	r3, [r0], #4
   10fa4:	b.n	10f90 <__copybits+0x30>

00010fa6 <__any_on>:
   10fa6:	add.w	r2, r0, #20
   10faa:	ldr	r0, [r0, #16]
   10fac:	asrs	r3, r1, #5
   10fae:	cmp	r0, r3
   10fb0:	push	{r4, lr}
   10fb2:	blt.n	10fd8 <__any_on+0x32>
   10fb4:	ble.n	10fcc <__any_on+0x26>
   10fb6:	ands.w	r1, r1, #31
   10fba:	beq.n	10fcc <__any_on+0x26>
   10fbc:	ldr.w	r4, [r2, r3, lsl #2]
   10fc0:	lsr.w	r0, r4, r1
   10fc4:	lsl.w	r1, r0, r1
   10fc8:	cmp	r4, r1
   10fca:	bne.n	10fe4 <__any_on+0x3e>
   10fcc:	add.w	r3, r2, r3, lsl #2
   10fd0:	cmp	r3, r2
   10fd2:	bhi.n	10fdc <__any_on+0x36>
   10fd4:	movs	r0, #0
   10fd6:	pop	{r4, pc}
   10fd8:	mov	r3, r0
   10fda:	b.n	10fcc <__any_on+0x26>
   10fdc:	ldr.w	r1, [r3, #-4]!
   10fe0:	cmp	r1, #0
   10fe2:	beq.n	10fd0 <__any_on+0x2a>
   10fe4:	movs	r0, #1
   10fe6:	b.n	10fd6 <__any_on+0x30>

00010fe8 <_malloc_usable_size_r>:
   10fe8:	ldr.w	r3, [r1, #-4]
   10fec:	subs	r0, r3, #4
   10fee:	cmp	r3, #0
   10ff0:	itt	lt
   10ff2:	ldrlt	r3, [r1, r0]
   10ff4:	addlt	r0, r0, r3
   10ff6:	bx	lr

00010ff8 <__ascii_wctomb>:
   10ff8:	cbz	r1, 1100e <__ascii_wctomb+0x16>
   10ffa:	cmp	r2, #255	; 0xff
   10ffc:	ittet	hi
   10ffe:	movhi	r3, #138	; 0x8a
   11000:	strhi	r3, [r0, #0]
   11002:	strbls	r2, [r1, #0]
   11004:	movhi.w	r0, #4294967295
   11008:	it	ls
   1100a:	movls	r0, #1
   1100c:	bx	lr
   1100e:	mov	r0, r1
   11010:	bx	lr
	...

00011014 <fcvtbuf>:
   11014:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11018:	mov	r8, r2
   1101a:	ldr	r2, [pc, #136]	; (110a4 <fcvtbuf+0x90>)
   1101c:	sub	sp, #28
   1101e:	ldr	r6, [r2, #0]
   11020:	mov	r5, r0
   11022:	mov	r7, r1
   11024:	mov	r4, r3
   11026:	cbnz	r3, 11052 <fcvtbuf+0x3e>
   11028:	ldr	r2, [r6, #40]	; 0x28
   1102a:	ldr	r1, [r6, #44]	; 0x2c
   1102c:	add.w	r3, r0, #35	; 0x23
   11030:	cmp	r2, r3
   11032:	bgt.n	11050 <fcvtbuf+0x3c>
   11034:	add.w	r9, r0, #36	; 0x24
   11038:	mov	r2, r9
   1103a:	mov	r0, r6
   1103c:	vstr	d0, [sp, #8]
   11040:	bl	d2fc <_realloc_r>
   11044:	mov	r4, r0
   11046:	cbz	r0, 1108c <fcvtbuf+0x78>
   11048:	strd	r9, r0, [r6, #40]	; 0x28
   1104c:	vldr	d0, [sp, #8]
   11050:	ldr	r4, [r6, #44]	; 0x2c
   11052:	add	r3, sp, #20
   11054:	strd	r8, r3, [sp]
   11058:	mov	r2, r5
   1105a:	mov	r3, r7
   1105c:	movs	r1, #3
   1105e:	mov	r0, r6
   11060:	bl	f450 <_dtoa_r>
   11064:	ldr	r3, [r7, #0]
   11066:	negs	r3, r3
   11068:	mov	r2, r4
   1106a:	subs	r3, r3, r4
   1106c:	ldr	r1, [sp, #20]
   1106e:	cmp	r1, r0
   11070:	add.w	r6, r2, r3
   11074:	bhi.n	11094 <fcvtbuf+0x80>
   11076:	mov	r1, r2
   11078:	movs	r7, #48	; 0x30
   1107a:	adds	r0, r1, r3
   1107c:	cmp	r5, r0
   1107e:	bgt.n	1109e <fcvtbuf+0x8a>
   11080:	subs	r3, r5, r6
   11082:	cmp	r5, r6
   11084:	it	lt
   11086:	movlt	r3, #0
   11088:	movs	r1, #0
   1108a:	strb	r1, [r2, r3]
   1108c:	mov	r0, r4
   1108e:	add	sp, #28
   11090:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11094:	ldrb.w	r1, [r0], #1
   11098:	strb.w	r1, [r2], #1
   1109c:	b.n	1106c <fcvtbuf+0x58>
   1109e:	strb.w	r7, [r1], #1
   110a2:	b.n	1107a <fcvtbuf+0x66>
   110a4:	.word	0x20002358

000110a8 <__ssputs_r>:
   110a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   110ac:	ldr	r6, [r1, #8]
   110ae:	mov	r7, r3
   110b0:	cmp	r6, r7
   110b2:	ldr	r3, [r1, #0]
   110b4:	mov	sl, r0
   110b6:	mov	r4, r1
   110b8:	mov	r8, r2
   110ba:	bhi.n	11116 <__ssputs_r+0x6e>
   110bc:	ldrh	r2, [r1, #12]
   110be:	tst.w	r2, #1152	; 0x480
   110c2:	beq.n	11112 <__ssputs_r+0x6a>
   110c4:	ldr	r5, [r4, #20]
   110c6:	ldr	r1, [r1, #16]
   110c8:	add.w	r5, r5, r5, lsl #1
   110cc:	sub.w	r9, r3, r1
   110d0:	add.w	r5, r5, r5, lsr #31
   110d4:	adds	r3, r7, #1
   110d6:	add	r3, r9
   110d8:	asrs	r5, r5, #1
   110da:	cmp	r5, r3
   110dc:	it	cc
   110de:	movcc	r5, r3
   110e0:	lsls	r3, r2, #21
   110e2:	bpl.n	11134 <__ssputs_r+0x8c>
   110e4:	mov	r1, r5
   110e6:	bl	d1f8 <_malloc_r>
   110ea:	mov	r6, r0
   110ec:	cbz	r0, 11148 <__ssputs_r+0xa0>
   110ee:	ldr	r1, [r4, #16]
   110f0:	mov	r2, r9
   110f2:	bl	a79c <memcpy>
   110f6:	ldrh	r3, [r4, #12]
   110f8:	bic.w	r3, r3, #1152	; 0x480
   110fc:	orr.w	r3, r3, #128	; 0x80
   11100:	strh	r3, [r4, #12]
   11102:	str	r6, [r4, #16]
   11104:	str	r5, [r4, #20]
   11106:	add	r6, r9
   11108:	sub.w	r5, r5, r9
   1110c:	str	r6, [r4, #0]
   1110e:	str	r5, [r4, #8]
   11110:	mov	r6, r7
   11112:	cmp	r6, r7
   11114:	bls.n	11118 <__ssputs_r+0x70>
   11116:	mov	r6, r7
   11118:	ldr	r0, [r4, #0]
   1111a:	mov	r2, r6
   1111c:	mov	r1, r8
   1111e:	bl	f07c <memmove>
   11122:	ldr	r3, [r4, #8]
   11124:	subs	r3, r3, r6
   11126:	str	r3, [r4, #8]
   11128:	ldr	r3, [r4, #0]
   1112a:	add	r3, r6
   1112c:	str	r3, [r4, #0]
   1112e:	movs	r0, #0
   11130:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11134:	mov	r2, r5
   11136:	bl	d2fc <_realloc_r>
   1113a:	mov	r6, r0
   1113c:	cmp	r0, #0
   1113e:	bne.n	11102 <__ssputs_r+0x5a>
   11140:	ldr	r1, [r4, #16]
   11142:	mov	r0, sl
   11144:	bl	ff28 <_free_r>
   11148:	movs	r3, #12
   1114a:	str.w	r3, [sl]
   1114e:	ldrh	r3, [r4, #12]
   11150:	orr.w	r3, r3, #64	; 0x40
   11154:	strh	r3, [r4, #12]
   11156:	mov.w	r0, #4294967295
   1115a:	b.n	11130 <__ssputs_r+0x88>

0001115c <_svfiprintf_r>:
   1115c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11160:	mov	r8, r3
   11162:	ldrh	r3, [r1, #12]
   11164:	lsls	r3, r3, #24
   11166:	sub	sp, #116	; 0x74
   11168:	mov	r7, r0
   1116a:	mov	r5, r1
   1116c:	mov	r4, r2
   1116e:	bpl.n	1118e <_svfiprintf_r+0x32>
   11170:	ldr	r3, [r1, #16]
   11172:	cbnz	r3, 1118e <_svfiprintf_r+0x32>
   11174:	movs	r1, #64	; 0x40
   11176:	bl	d1f8 <_malloc_r>
   1117a:	str	r0, [r5, #0]
   1117c:	str	r0, [r5, #16]
   1117e:	cbnz	r0, 1118a <_svfiprintf_r+0x2e>
   11180:	movs	r3, #12
   11182:	str	r3, [r7, #0]
   11184:	mov.w	r0, #4294967295
   11188:	b.n	1132c <_svfiprintf_r+0x1d0>
   1118a:	movs	r3, #64	; 0x40
   1118c:	str	r3, [r5, #20]
   1118e:	movs	r3, #0
   11190:	str	r3, [sp, #36]	; 0x24
   11192:	movs	r3, #32
   11194:	strb.w	r3, [sp, #41]	; 0x29
   11198:	str.w	r8, [sp, #12]
   1119c:	movs	r3, #48	; 0x30
   1119e:	ldr.w	r8, [pc, #420]	; 11344 <_svfiprintf_r+0x1e8>
   111a2:	strb.w	r3, [sp, #42]	; 0x2a
   111a6:	mov.w	r9, #1
   111aa:	mov	r3, r4
   111ac:	mov	sl, r3
   111ae:	ldrb.w	r2, [r3], #1
   111b2:	cbz	r2, 111b8 <_svfiprintf_r+0x5c>
   111b4:	cmp	r2, #37	; 0x25
   111b6:	bne.n	111ac <_svfiprintf_r+0x50>
   111b8:	subs.w	fp, sl, r4
   111bc:	beq.n	111d6 <_svfiprintf_r+0x7a>
   111be:	mov	r3, fp
   111c0:	mov	r2, r4
   111c2:	mov	r1, r5
   111c4:	mov	r0, r7
   111c6:	bl	110a8 <__ssputs_r>
   111ca:	adds	r0, #1
   111cc:	beq.w	11322 <_svfiprintf_r+0x1c6>
   111d0:	ldr	r2, [sp, #36]	; 0x24
   111d2:	add	r2, fp
   111d4:	str	r2, [sp, #36]	; 0x24
   111d6:	ldrb.w	r3, [sl]
   111da:	cmp	r3, #0
   111dc:	beq.w	11322 <_svfiprintf_r+0x1c6>
   111e0:	movs	r3, #0
   111e2:	mov.w	r2, #4294967295
   111e6:	strd	r2, r3, [sp, #20]
   111ea:	add.w	sl, sl, #1
   111ee:	str	r3, [sp, #16]
   111f0:	str	r3, [sp, #28]
   111f2:	strb.w	r3, [sp, #83]	; 0x53
   111f6:	str	r3, [sp, #104]	; 0x68
   111f8:	mov	r4, sl
   111fa:	movs	r2, #5
   111fc:	ldrb.w	r1, [r4], #1
   11200:	ldr	r0, [pc, #320]	; (11344 <_svfiprintf_r+0x1e8>)
   11202:	bl	f270 <memchr>
   11206:	ldr	r2, [sp, #16]
   11208:	cbnz	r0, 11242 <_svfiprintf_r+0xe6>
   1120a:	lsls	r0, r2, #27
   1120c:	itt	mi
   1120e:	movmi	r3, #32
   11210:	strbmi.w	r3, [sp, #83]	; 0x53
   11214:	lsls	r1, r2, #28
   11216:	itt	mi
   11218:	movmi	r3, #43	; 0x2b
   1121a:	strbmi.w	r3, [sp, #83]	; 0x53
   1121e:	ldrb.w	r3, [sl]
   11222:	cmp	r3, #42	; 0x2a
   11224:	beq.n	11252 <_svfiprintf_r+0xf6>
   11226:	ldr	r2, [sp, #28]
   11228:	mov	r4, sl
   1122a:	movs	r0, #0
   1122c:	mov.w	ip, #10
   11230:	mov	r1, r4
   11232:	ldrb.w	r3, [r1], #1
   11236:	subs	r3, #48	; 0x30
   11238:	cmp	r3, #9
   1123a:	bls.n	112d8 <_svfiprintf_r+0x17c>
   1123c:	cbz	r0, 1126c <_svfiprintf_r+0x110>
   1123e:	str	r2, [sp, #28]
   11240:	b.n	1126c <_svfiprintf_r+0x110>
   11242:	sub.w	r3, r0, r8
   11246:	lsl.w	r3, r9, r3
   1124a:	orrs	r3, r2
   1124c:	str	r3, [sp, #16]
   1124e:	mov	sl, r4
   11250:	b.n	111f8 <_svfiprintf_r+0x9c>
   11252:	ldr	r3, [sp, #12]
   11254:	adds	r1, r3, #4
   11256:	ldr	r3, [r3, #0]
   11258:	str	r1, [sp, #12]
   1125a:	cmp	r3, #0
   1125c:	ittet	lt
   1125e:	neglt	r3, r3
   11260:	orrlt.w	r2, r2, #2
   11264:	strge	r3, [sp, #28]
   11266:	strlt	r3, [sp, #28]
   11268:	it	lt
   1126a:	strlt	r2, [sp, #16]
   1126c:	ldrb	r3, [r4, #0]
   1126e:	cmp	r3, #46	; 0x2e
   11270:	bne.n	1128c <_svfiprintf_r+0x130>
   11272:	ldrb	r3, [r4, #1]
   11274:	cmp	r3, #42	; 0x2a
   11276:	bne.n	112e2 <_svfiprintf_r+0x186>
   11278:	ldr	r3, [sp, #12]
   1127a:	adds	r2, r3, #4
   1127c:	ldr	r3, [r3, #0]
   1127e:	str	r2, [sp, #12]
   11280:	cmp	r3, #0
   11282:	it	lt
   11284:	movlt.w	r3, #4294967295
   11288:	adds	r4, #2
   1128a:	str	r3, [sp, #20]
   1128c:	ldr.w	sl, [pc, #196]	; 11354 <_svfiprintf_r+0x1f8>
   11290:	ldrb	r1, [r4, #0]
   11292:	movs	r2, #3
   11294:	mov	r0, sl
   11296:	bl	f270 <memchr>
   1129a:	cbz	r0, 112ac <_svfiprintf_r+0x150>
   1129c:	ldr	r3, [sp, #16]
   1129e:	sub.w	r0, r0, sl
   112a2:	movs	r2, #64	; 0x40
   112a4:	lsls	r2, r0
   112a6:	orrs	r3, r2
   112a8:	adds	r4, #1
   112aa:	str	r3, [sp, #16]
   112ac:	ldrb.w	r1, [r4], #1
   112b0:	ldr	r0, [pc, #148]	; (11348 <_svfiprintf_r+0x1ec>)
   112b2:	strb.w	r1, [sp, #40]	; 0x28
   112b6:	movs	r2, #6
   112b8:	bl	f270 <memchr>
   112bc:	cmp	r0, #0
   112be:	beq.n	11332 <_svfiprintf_r+0x1d6>
   112c0:	ldr	r3, [pc, #136]	; (1134c <_svfiprintf_r+0x1f0>)
   112c2:	cbnz	r3, 1130c <_svfiprintf_r+0x1b0>
   112c4:	ldr	r3, [sp, #12]
   112c6:	adds	r3, #7
   112c8:	bic.w	r3, r3, #7
   112cc:	adds	r3, #8
   112ce:	str	r3, [sp, #12]
   112d0:	ldr	r3, [sp, #36]	; 0x24
   112d2:	add	r3, r6
   112d4:	str	r3, [sp, #36]	; 0x24
   112d6:	b.n	111aa <_svfiprintf_r+0x4e>
   112d8:	mla	r2, ip, r2, r3
   112dc:	mov	r4, r1
   112de:	movs	r0, #1
   112e0:	b.n	11230 <_svfiprintf_r+0xd4>
   112e2:	movs	r3, #0
   112e4:	adds	r4, #1
   112e6:	str	r3, [sp, #20]
   112e8:	mov	r1, r3
   112ea:	mov.w	ip, #10
   112ee:	mov	r0, r4
   112f0:	ldrb.w	r2, [r0], #1
   112f4:	subs	r2, #48	; 0x30
   112f6:	cmp	r2, #9
   112f8:	bls.n	11302 <_svfiprintf_r+0x1a6>
   112fa:	cmp	r3, #0
   112fc:	beq.n	1128c <_svfiprintf_r+0x130>
   112fe:	str	r1, [sp, #20]
   11300:	b.n	1128c <_svfiprintf_r+0x130>
   11302:	mla	r1, ip, r1, r2
   11306:	mov	r4, r0
   11308:	movs	r3, #1
   1130a:	b.n	112ee <_svfiprintf_r+0x192>
   1130c:	add	r3, sp, #12
   1130e:	str	r3, [sp, #0]
   11310:	mov	r2, r5
   11312:	ldr	r3, [pc, #60]	; (11350 <_svfiprintf_r+0x1f4>)
   11314:	add	r1, sp, #16
   11316:	mov	r0, r7
   11318:	bl	e158 <_printf_float>
   1131c:	adds	r2, r0, #1
   1131e:	mov	r6, r0
   11320:	bne.n	112d0 <_svfiprintf_r+0x174>
   11322:	ldrh	r3, [r5, #12]
   11324:	lsls	r3, r3, #25
   11326:	bmi.w	11184 <_svfiprintf_r+0x28>
   1132a:	ldr	r0, [sp, #36]	; 0x24
   1132c:	add	sp, #116	; 0x74
   1132e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11332:	add	r3, sp, #12
   11334:	str	r3, [sp, #0]
   11336:	mov	r2, r5
   11338:	ldr	r3, [pc, #20]	; (11350 <_svfiprintf_r+0x1f4>)
   1133a:	add	r1, sp, #16
   1133c:	mov	r0, r7
   1133e:	bl	e668 <_printf_i>
   11342:	b.n	1131c <_svfiprintf_r+0x1c0>
   11344:	.word	0x20001498
   11348:	.word	0x200014a2
   1134c:	.word	0x0000e159
   11350:	.word	0x000110a9
   11354:	.word	0x2000149e

00011358 <_sungetc_r>:
   11358:	push	{r3, r4, r5, lr}
   1135a:	adds	r3, r1, #1
   1135c:	mov	r4, r2
   1135e:	bne.n	11368 <_sungetc_r+0x10>
   11360:	mov.w	r5, #4294967295
   11364:	mov	r0, r5
   11366:	pop	{r3, r4, r5, pc}
   11368:	ldrh	r3, [r2, #12]
   1136a:	bic.w	r3, r3, #32
   1136e:	strh	r3, [r2, #12]
   11370:	ldr	r3, [r4, #52]	; 0x34
   11372:	ldr	r2, [r2, #4]
   11374:	uxtb	r5, r1
   11376:	cbz	r3, 1139c <_sungetc_r+0x44>
   11378:	ldr	r3, [r4, #56]	; 0x38
   1137a:	cmp	r3, r2
   1137c:	ble.n	11390 <_sungetc_r+0x38>
   1137e:	ldr	r3, [r4, #0]
   11380:	subs	r2, r3, #1
   11382:	str	r2, [r4, #0]
   11384:	strb.w	r5, [r3, #-1]
   11388:	ldr	r3, [r4, #4]
   1138a:	adds	r3, #1
   1138c:	str	r3, [r4, #4]
   1138e:	b.n	11364 <_sungetc_r+0xc>
   11390:	mov	r1, r4
   11392:	bl	11b66 <__submore>
   11396:	cmp	r0, #0
   11398:	beq.n	1137e <_sungetc_r+0x26>
   1139a:	b.n	11360 <_sungetc_r+0x8>
   1139c:	ldr	r1, [r4, #16]
   1139e:	ldr	r3, [r4, #0]
   113a0:	cbz	r1, 113b8 <_sungetc_r+0x60>
   113a2:	cmp	r1, r3
   113a4:	bcs.n	113b8 <_sungetc_r+0x60>
   113a6:	ldrb.w	r1, [r3, #-1]
   113aa:	cmp	r1, r5
   113ac:	bne.n	113b8 <_sungetc_r+0x60>
   113ae:	subs	r3, #1
   113b0:	adds	r2, #1
   113b2:	str	r3, [r4, #0]
   113b4:	str	r2, [r4, #4]
   113b6:	b.n	11364 <_sungetc_r+0xc>
   113b8:	strd	r3, r2, [r4, #60]	; 0x3c
   113bc:	add.w	r3, r4, #68	; 0x44
   113c0:	str	r3, [r4, #52]	; 0x34
   113c2:	movs	r3, #3
   113c4:	str	r3, [r4, #56]	; 0x38
   113c6:	mov	r3, r4
   113c8:	strb.w	r5, [r3, #70]!
   113cc:	str	r3, [r4, #0]
   113ce:	movs	r3, #1
   113d0:	b.n	1138c <_sungetc_r+0x34>

000113d2 <__ssrefill_r>:
   113d2:	push	{r4, lr}
   113d4:	mov	r4, r1
   113d6:	ldr	r1, [r1, #52]	; 0x34
   113d8:	cbz	r1, 113f6 <__ssrefill_r+0x24>
   113da:	add.w	r3, r4, #68	; 0x44
   113de:	cmp	r1, r3
   113e0:	beq.n	113e6 <__ssrefill_r+0x14>
   113e2:	bl	ff28 <_free_r>
   113e6:	ldr	r3, [r4, #64]	; 0x40
   113e8:	str	r3, [r4, #4]
   113ea:	movs	r0, #0
   113ec:	str	r0, [r4, #52]	; 0x34
   113ee:	cbz	r3, 113f6 <__ssrefill_r+0x24>
   113f0:	ldr	r3, [r4, #60]	; 0x3c
   113f2:	str	r3, [r4, #0]
   113f4:	pop	{r4, pc}
   113f6:	ldr	r3, [r4, #16]
   113f8:	str	r3, [r4, #0]
   113fa:	movs	r3, #0
   113fc:	str	r3, [r4, #4]
   113fe:	ldrh	r3, [r4, #12]
   11400:	orr.w	r3, r3, #32
   11404:	strh	r3, [r4, #12]
   11406:	mov.w	r0, #4294967295
   1140a:	b.n	113f4 <__ssrefill_r+0x22>

0001140c <__ssvfiscanf_r>:
   1140c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11410:	mov	r4, r1
   11412:	sub.w	sp, sp, #648	; 0x288
   11416:	movs	r1, #0
   11418:	strd	r1, r1, [sp, #272]	; 0x110
   1141c:	ldr	r1, [pc, #664]	; (116b8 <__ssvfiscanf_r+0x2ac>)
   1141e:	str	r1, [sp, #640]	; 0x280
   11420:	add.w	r8, sp, #4
   11424:	ldr	r1, [pc, #660]	; (116bc <__ssvfiscanf_r+0x2b0>)
   11426:	ldr	r7, [pc, #664]	; (116c0 <__ssvfiscanf_r+0x2b4>)
   11428:	ldr.w	r9, [pc, #664]	; 116c4 <__ssvfiscanf_r+0x2b8>
   1142c:	str.w	r8, [sp, #280]	; 0x118
   11430:	mov	r6, r0
   11432:	str	r1, [sp, #644]	; 0x284
   11434:	str	r3, [sp, #0]
   11436:	ldrb	r3, [r2, #0]
   11438:	cmp	r3, #0
   1143a:	beq.w	116f2 <__ssvfiscanf_r+0x2e6>
   1143e:	ldrb	r1, [r7, r3]
   11440:	ands.w	r1, r1, #8
   11444:	add.w	r5, r2, #1
   11448:	beq.n	1147e <__ssvfiscanf_r+0x72>
   1144a:	ldr	r3, [r4, #4]
   1144c:	cmp	r3, #0
   1144e:	ble.n	11470 <__ssvfiscanf_r+0x64>
   11450:	ldr	r3, [r4, #0]
   11452:	ldrb	r2, [r3, #0]
   11454:	ldrb	r2, [r7, r2]
   11456:	lsls	r2, r2, #28
   11458:	bmi.n	1145e <__ssvfiscanf_r+0x52>
   1145a:	mov	r2, r5
   1145c:	b.n	11436 <__ssvfiscanf_r+0x2a>
   1145e:	ldr	r2, [sp, #276]	; 0x114
   11460:	adds	r2, #1
   11462:	str	r2, [sp, #276]	; 0x114
   11464:	ldr	r2, [r4, #4]
   11466:	adds	r3, #1
   11468:	subs	r2, #1
   1146a:	str	r2, [r4, #4]
   1146c:	str	r3, [r4, #0]
   1146e:	b.n	1144a <__ssvfiscanf_r+0x3e>
   11470:	ldr	r3, [sp, #644]	; 0x284
   11472:	mov	r1, r4
   11474:	mov	r0, r6
   11476:	blx	r3
   11478:	cmp	r0, #0
   1147a:	beq.n	11450 <__ssvfiscanf_r+0x44>
   1147c:	b.n	1145a <__ssvfiscanf_r+0x4e>
   1147e:	cmp	r3, #37	; 0x25
   11480:	beq.n	114a8 <__ssvfiscanf_r+0x9c>
   11482:	mov	sl, r3
   11484:	ldr	r3, [r4, #4]
   11486:	cmp	r3, #0
   11488:	ble.w	115ae <__ssvfiscanf_r+0x1a2>
   1148c:	ldr	r2, [r4, #0]
   1148e:	ldrb	r3, [r2, #0]
   11490:	cmp	r3, sl
   11492:	bne.w	116f2 <__ssvfiscanf_r+0x2e6>
   11496:	ldr	r3, [r4, #4]
   11498:	subs	r3, #1
   1149a:	str	r3, [r4, #4]
   1149c:	ldr	r3, [sp, #276]	; 0x114
   1149e:	adds	r2, #1
   114a0:	adds	r3, #1
   114a2:	str	r2, [r4, #0]
   114a4:	str	r3, [sp, #276]	; 0x114
   114a6:	b.n	1145a <__ssvfiscanf_r+0x4e>
   114a8:	str	r1, [sp, #260]	; 0x104
   114aa:	str	r1, [sp, #268]	; 0x10c
   114ac:	ldrb	r3, [r2, #1]
   114ae:	cmp	r3, #42	; 0x2a
   114b0:	ittt	eq
   114b2:	moveq	r3, #16
   114b4:	addeq	r5, r2, #2
   114b6:	streq	r3, [sp, #260]	; 0x104
   114b8:	movs	r2, #10
   114ba:	mov	sl, r5
   114bc:	ldrb.w	r1, [sl], #1
   114c0:	sub.w	r3, r1, #48	; 0x30
   114c4:	cmp	r3, #9
   114c6:	bls.n	11502 <__ssvfiscanf_r+0xf6>
   114c8:	ldr	r0, [pc, #504]	; (116c4 <__ssvfiscanf_r+0x2b8>)
   114ca:	movs	r2, #3
   114cc:	bl	f270 <memchr>
   114d0:	cbz	r0, 114e2 <__ssvfiscanf_r+0xd6>
   114d2:	ldr	r2, [sp, #260]	; 0x104
   114d4:	sub.w	r0, r0, r9
   114d8:	movs	r3, #1
   114da:	lsls	r3, r0
   114dc:	orrs	r3, r2
   114de:	str	r3, [sp, #260]	; 0x104
   114e0:	mov	r5, sl
   114e2:	ldrb.w	r3, [r5], #1
   114e6:	cmp	r3, #120	; 0x78
   114e8:	bhi.n	114f8 <__ssvfiscanf_r+0xec>
   114ea:	cmp	r3, #87	; 0x57
   114ec:	bhi.n	11510 <__ssvfiscanf_r+0x104>
   114ee:	cmp	r3, #37	; 0x25
   114f0:	beq.n	11482 <__ssvfiscanf_r+0x76>
   114f2:	bhi.n	115a4 <__ssvfiscanf_r+0x198>
   114f4:	cmp	r3, #0
   114f6:	beq.n	115c4 <__ssvfiscanf_r+0x1b8>
   114f8:	movs	r3, #3
   114fa:	str	r3, [sp, #284]	; 0x11c
   114fc:	movs	r3, #10
   114fe:	str	r3, [sp, #264]	; 0x108
   11500:	b.n	115f0 <__ssvfiscanf_r+0x1e4>
   11502:	ldr	r3, [sp, #268]	; 0x10c
   11504:	mla	r1, r2, r3, r1
   11508:	subs	r1, #48	; 0x30
   1150a:	str	r1, [sp, #268]	; 0x10c
   1150c:	mov	r5, sl
   1150e:	b.n	114ba <__ssvfiscanf_r+0xae>
   11510:	sub.w	r2, r3, #88	; 0x58
   11514:	cmp	r2, #32
   11516:	bhi.n	114f8 <__ssvfiscanf_r+0xec>
   11518:	add	r1, pc, #4	; (adr r1, 11520 <__ssvfiscanf_r+0x114>)
   1151a:	ldr.w	pc, [r1, r2, lsl #2]
   1151e:	nop
   11520:	.word	0x000115d3
   11524:	.word	0x000114f9
   11528:	.word	0x000114f9
   1152c:	.word	0x00011631
   11530:	.word	0x000114f9
   11534:	.word	0x000114f9
   11538:	.word	0x000114f9
   1153c:	.word	0x000114f9
   11540:	.word	0x000114f9
   11544:	.word	0x000114f9
   11548:	.word	0x000114f9
   1154c:	.word	0x00011647
   11550:	.word	0x0001162d
   11554:	.word	0x000115ab
   11558:	.word	0x000115ab
   1155c:	.word	0x000115ab
   11560:	.word	0x000114f9
   11564:	.word	0x000115e9
   11568:	.word	0x000114f9
   1156c:	.word	0x000114f9
   11570:	.word	0x000114f9
   11574:	.word	0x000114f9
   11578:	.word	0x00011657
   1157c:	.word	0x00011625
   11580:	.word	0x000115cb
   11584:	.word	0x000114f9
   11588:	.word	0x000114f9
   1158c:	.word	0x00011653
   11590:	.word	0x000114f9
   11594:	.word	0x0001162d
   11598:	.word	0x000114f9
   1159c:	.word	0x000114f9
   115a0:	.word	0x000115d3
   115a4:	subs	r3, #69	; 0x45
   115a6:	cmp	r3, #2
   115a8:	bhi.n	114f8 <__ssvfiscanf_r+0xec>
   115aa:	movs	r3, #5
   115ac:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   115ae:	ldr	r3, [sp, #644]	; 0x284
   115b0:	mov	r1, r4
   115b2:	mov	r0, r6
   115b4:	blx	r3
   115b6:	cmp	r0, #0
   115b8:	beq.w	1148c <__ssvfiscanf_r+0x80>
   115bc:	ldr	r0, [sp, #272]	; 0x110
   115be:	cmp	r0, #0
   115c0:	bne.w	116de <__ssvfiscanf_r+0x2d2>
   115c4:	mov.w	r0, #4294967295
   115c8:	b.n	116ea <__ssvfiscanf_r+0x2de>
   115ca:	ldr	r2, [sp, #260]	; 0x104
   115cc:	orr.w	r2, r2, #32
   115d0:	str	r2, [sp, #260]	; 0x104
   115d2:	ldr	r2, [sp, #260]	; 0x104
   115d4:	orr.w	r2, r2, #512	; 0x200
   115d8:	str	r2, [sp, #260]	; 0x104
   115da:	movs	r2, #16
   115dc:	cmp	r3, #111	; 0x6f
   115de:	str	r2, [sp, #264]	; 0x108
   115e0:	ite	cc
   115e2:	movcc	r3, #3
   115e4:	movcs	r3, #4
   115e6:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   115e8:	movs	r3, #0
   115ea:	str	r3, [sp, #264]	; 0x108
   115ec:	movs	r3, #3
   115ee:	str	r3, [sp, #284]	; 0x11c
   115f0:	ldr	r3, [r4, #4]
   115f2:	cmp	r3, #0
   115f4:	ble.n	11672 <__ssvfiscanf_r+0x266>
   115f6:	ldr	r3, [sp, #260]	; 0x104
   115f8:	lsls	r1, r3, #25
   115fa:	bmi.n	11606 <__ssvfiscanf_r+0x1fa>
   115fc:	ldr	r3, [r4, #0]
   115fe:	ldrb	r2, [r3, #0]
   11600:	ldrb	r2, [r7, r2]
   11602:	lsls	r2, r2, #28
   11604:	bmi.n	11680 <__ssvfiscanf_r+0x274>
   11606:	ldr	r3, [sp, #284]	; 0x11c
   11608:	cmp	r3, #2
   1160a:	bgt.n	116a4 <__ssvfiscanf_r+0x298>
   1160c:	mov	r3, sp
   1160e:	mov	r2, r4
   11610:	add	r1, sp, #260	; 0x104
   11612:	mov	r0, r6
   11614:	bl	116fc <_scanf_chars>
   11618:	cmp	r0, #1
   1161a:	beq.n	116f2 <__ssvfiscanf_r+0x2e6>
   1161c:	cmp	r0, #2
   1161e:	bne.w	1145a <__ssvfiscanf_r+0x4e>
   11622:	b.n	115bc <__ssvfiscanf_r+0x1b0>
   11624:	movs	r3, #8
   11626:	str	r3, [sp, #264]	; 0x108
   11628:	movs	r3, #4
   1162a:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   1162c:	movs	r2, #10
   1162e:	b.n	115dc <__ssvfiscanf_r+0x1d0>
   11630:	mov	r1, r5
   11632:	mov	r0, r8
   11634:	bl	11af4 <__sccl>
   11638:	ldr	r3, [sp, #260]	; 0x104
   1163a:	orr.w	r3, r3, #64	; 0x40
   1163e:	str	r3, [sp, #260]	; 0x104
   11640:	mov	r5, r0
   11642:	movs	r3, #1
   11644:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   11646:	ldr	r3, [sp, #260]	; 0x104
   11648:	orr.w	r3, r3, #64	; 0x40
   1164c:	str	r3, [sp, #260]	; 0x104
   1164e:	movs	r3, #0
   11650:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   11652:	movs	r3, #2
   11654:	b.n	115ee <__ssvfiscanf_r+0x1e2>
   11656:	ldr	r0, [sp, #260]	; 0x104
   11658:	lsls	r3, r0, #27
   1165a:	bmi.w	1145a <__ssvfiscanf_r+0x4e>
   1165e:	ldr	r3, [sp, #0]
   11660:	ldr	r2, [sp, #276]	; 0x114
   11662:	adds	r1, r3, #4
   11664:	str	r1, [sp, #0]
   11666:	ldr	r3, [r3, #0]
   11668:	lsls	r0, r0, #31
   1166a:	ite	mi
   1166c:	strhmi	r2, [r3, #0]
   1166e:	strpl	r2, [r3, #0]
   11670:	b.n	1145a <__ssvfiscanf_r+0x4e>
   11672:	ldr	r3, [sp, #644]	; 0x284
   11674:	mov	r1, r4
   11676:	mov	r0, r6
   11678:	blx	r3
   1167a:	cmp	r0, #0
   1167c:	beq.n	115f6 <__ssvfiscanf_r+0x1ea>
   1167e:	b.n	115bc <__ssvfiscanf_r+0x1b0>
   11680:	ldr	r2, [sp, #276]	; 0x114
   11682:	adds	r2, #1
   11684:	str	r2, [sp, #276]	; 0x114
   11686:	ldr	r2, [r4, #4]
   11688:	subs	r2, #1
   1168a:	cmp	r2, #0
   1168c:	str	r2, [r4, #4]
   1168e:	ble.n	11696 <__ssvfiscanf_r+0x28a>
   11690:	adds	r3, #1
   11692:	str	r3, [r4, #0]
   11694:	b.n	115fc <__ssvfiscanf_r+0x1f0>
   11696:	ldr	r3, [sp, #644]	; 0x284
   11698:	mov	r1, r4
   1169a:	mov	r0, r6
   1169c:	blx	r3
   1169e:	cmp	r0, #0
   116a0:	beq.n	115fc <__ssvfiscanf_r+0x1f0>
   116a2:	b.n	115bc <__ssvfiscanf_r+0x1b0>
   116a4:	cmp	r3, #4
   116a6:	bgt.n	116c8 <__ssvfiscanf_r+0x2bc>
   116a8:	mov	r3, sp
   116aa:	mov	r2, r4
   116ac:	add	r1, sp, #260	; 0x104
   116ae:	mov	r0, r6
   116b0:	bl	117b0 <_scanf_i>
   116b4:	b.n	11618 <__ssvfiscanf_r+0x20c>
   116b6:	nop
   116b8:	.word	0x00011359
   116bc:	.word	0x000113d3
   116c0:	.word	0x200012c3
   116c4:	.word	0x2000149e
   116c8:	ldr	r3, [pc, #44]	; (116f8 <__ssvfiscanf_r+0x2ec>)
   116ca:	cmp	r3, #0
   116cc:	beq.w	1145a <__ssvfiscanf_r+0x4e>
   116d0:	mov	r3, sp
   116d2:	mov	r2, r4
   116d4:	add	r1, sp, #260	; 0x104
   116d6:	mov	r0, r6
   116d8:	bl	e8ac <_scanf_float>
   116dc:	b.n	11618 <__ssvfiscanf_r+0x20c>
   116de:	ldrh	r3, [r4, #12]
   116e0:	tst.w	r3, #64	; 0x40
   116e4:	it	ne
   116e6:	movne.w	r0, #4294967295
   116ea:	add.w	sp, sp, #648	; 0x288
   116ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   116f2:	ldr	r0, [sp, #272]	; 0x110
   116f4:	b.n	116ea <__ssvfiscanf_r+0x2de>
   116f6:	nop
   116f8:	.word	0x0000e8ad

000116fc <_scanf_chars>:
   116fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11700:	mov	r5, r2
   11702:	ldr	r2, [r1, #8]
   11704:	mov	r8, r0
   11706:	mov	r4, r1
   11708:	cbnz	r2, 11718 <_scanf_chars+0x1c>
   1170a:	ldr	r2, [r1, #24]
   1170c:	cmp	r2, #0
   1170e:	ite	eq
   11710:	moveq	r2, #1
   11712:	movne.w	r2, #4294967295
   11716:	str	r2, [r1, #8]
   11718:	ldr	r2, [r4, #0]
   1171a:	ldr.w	r9, [pc, #144]	; 117ac <_scanf_chars+0xb0>
   1171e:	lsls	r1, r2, #27
   11720:	itttt	pl
   11722:	ldrpl	r2, [r3, #0]
   11724:	addpl	r1, r2, #4
   11726:	strpl	r1, [r3, #0]
   11728:	ldrpl	r6, [r2, #0]
   1172a:	movs	r7, #0
   1172c:	ldr	r0, [r4, #24]
   1172e:	cbz	r0, 11754 <_scanf_chars+0x58>
   11730:	cmp	r0, #1
   11732:	bne.n	11744 <_scanf_chars+0x48>
   11734:	ldr	r2, [r5, #0]
   11736:	ldrb	r1, [r2, #0]
   11738:	ldr	r2, [r4, #20]
   1173a:	ldrb	r2, [r2, r1]
   1173c:	cbnz	r2, 11754 <_scanf_chars+0x58>
   1173e:	cmp	r7, #0
   11740:	beq.n	117a6 <_scanf_chars+0xaa>
   11742:	b.n	1178a <_scanf_chars+0x8e>
   11744:	cmp	r0, #2
   11746:	bne.n	1178a <_scanf_chars+0x8e>
   11748:	ldr	r3, [r5, #0]
   1174a:	ldrb	r3, [r3, #0]
   1174c:	ldrb.w	r3, [r9, r3]
   11750:	lsls	r3, r3, #28
   11752:	bmi.n	1178a <_scanf_chars+0x8e>
   11754:	ldr	r3, [r4, #0]
   11756:	lsls	r2, r3, #27
   11758:	ittt	pl
   1175a:	ldrpl	r3, [r5, #0]
   1175c:	ldrbpl	r3, [r3, #0]
   1175e:	strbpl.w	r3, [r6], #1
   11762:	ldr	r2, [r5, #0]
   11764:	ldr	r3, [r5, #4]
   11766:	adds	r2, #1
   11768:	str	r2, [r5, #0]
   1176a:	ldr	r2, [r4, #8]
   1176c:	subs	r3, #1
   1176e:	subs	r2, #1
   11770:	str	r3, [r5, #4]
   11772:	adds	r7, #1
   11774:	str	r2, [r4, #8]
   11776:	cbz	r2, 1178a <_scanf_chars+0x8e>
   11778:	cmp	r3, #0
   1177a:	bgt.n	1172c <_scanf_chars+0x30>
   1177c:	ldr.w	r3, [r4, #384]	; 0x180
   11780:	mov	r1, r5
   11782:	mov	r0, r8
   11784:	blx	r3
   11786:	cmp	r0, #0
   11788:	beq.n	1172c <_scanf_chars+0x30>
   1178a:	ldr	r3, [r4, #0]
   1178c:	ands.w	r3, r3, #16
   11790:	bne.n	1179e <_scanf_chars+0xa2>
   11792:	ldr	r2, [r4, #12]
   11794:	adds	r2, #1
   11796:	str	r2, [r4, #12]
   11798:	ldr	r2, [r4, #24]
   1179a:	cbz	r2, 1179e <_scanf_chars+0xa2>
   1179c:	strb	r3, [r6, #0]
   1179e:	ldr	r3, [r4, #16]
   117a0:	add	r3, r7
   117a2:	str	r3, [r4, #16]
   117a4:	movs	r0, #0
   117a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   117aa:	nop
   117ac:	.word	0x200012c3

000117b0 <_scanf_i>:
   117b0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117b4:	mov	r8, r3
   117b6:	ldr	r3, [pc, #464]	; (11988 <_scanf_i+0x1d8>)
   117b8:	mov	r4, r1
   117ba:	mov	sl, r0
   117bc:	mov	r6, r2
   117be:	ldmia.w	r3, {r0, r1, r2}
   117c2:	sub	sp, #28
   117c4:	add	r3, sp, #12
   117c6:	stmia.w	r3, {r0, r1, r2}
   117ca:	ldr	r3, [pc, #448]	; (1198c <_scanf_i+0x1dc>)
   117cc:	ldr	r1, [r4, #24]
   117ce:	ldr	r2, [pc, #448]	; (11990 <_scanf_i+0x1e0>)
   117d0:	cmp	r1, #3
   117d2:	it	ne
   117d4:	movne	r2, r3
   117d6:	ldr	r3, [r4, #8]
   117d8:	str	r2, [sp, #4]
   117da:	subs	r2, r3, #1
   117dc:	cmp.w	r2, #348	; 0x15c
   117e0:	it	hi
   117e2:	mvnhi.w	r5, #348	; 0x15c
   117e6:	mov	r7, r4
   117e8:	ittt	hi
   117ea:	addhi.w	r9, r3, r5
   117ee:	movwhi	r3, #349	; 0x15d
   117f2:	strhi	r3, [r4, #8]
   117f4:	ldr.w	r3, [r7], #28
   117f8:	orr.w	r3, r3, #3328	; 0xd00
   117fc:	it	ls
   117fe:	movls.w	r9, #0
   11802:	str	r3, [r4, #0]
   11804:	mov	r5, r7
   11806:	mov.w	fp, #0
   1180a:	ldr	r1, [r6, #0]
   1180c:	add	r3, sp, #12
   1180e:	ldrb	r1, [r1, #0]
   11810:	ldr.w	r0, [r3, fp, lsl #2]
   11814:	movs	r2, #2
   11816:	bl	f270 <memchr>
   1181a:	cbz	r0, 11868 <_scanf_i+0xb8>
   1181c:	cmp.w	fp, #1
   11820:	bne.n	118d6 <_scanf_i+0x126>
   11822:	ldr	r2, [r4, #4]
   11824:	cbnz	r2, 11832 <_scanf_i+0x82>
   11826:	ldr	r2, [r4, #0]
   11828:	movs	r3, #8
   1182a:	orr.w	r2, r2, #512	; 0x200
   1182e:	str	r3, [r4, #4]
   11830:	str	r2, [r4, #0]
   11832:	ldr	r2, [r4, #0]
   11834:	bic.w	r2, r2, #1280	; 0x500
   11838:	str	r2, [r4, #0]
   1183a:	ldr	r2, [r4, #8]
   1183c:	subs	r1, r2, #1
   1183e:	str	r1, [r4, #8]
   11840:	cbz	r2, 11868 <_scanf_i+0xb8>
   11842:	ldr	r2, [r6, #0]
   11844:	adds	r1, r2, #1
   11846:	str	r1, [r6, #0]
   11848:	ldrb	r2, [r2, #0]
   1184a:	strb.w	r2, [r5], #1
   1184e:	ldr	r2, [r6, #4]
   11850:	subs	r2, #1
   11852:	cmp	r2, #0
   11854:	str	r2, [r6, #4]
   11856:	bgt.n	11868 <_scanf_i+0xb8>
   11858:	ldr.w	r2, [r4, #384]	; 0x180
   1185c:	mov	r1, r6
   1185e:	mov	r0, sl
   11860:	blx	r2
   11862:	cmp	r0, #0
   11864:	bne.w	11972 <_scanf_i+0x1c2>
   11868:	add.w	fp, fp, #1
   1186c:	cmp.w	fp, #3
   11870:	bne.n	1180a <_scanf_i+0x5a>
   11872:	ldr	r3, [r4, #4]
   11874:	cbnz	r3, 1187a <_scanf_i+0xca>
   11876:	movs	r3, #10
   11878:	str	r3, [r4, #4]
   1187a:	ldr	r3, [r4, #4]
   1187c:	ldr	r1, [pc, #276]	; (11994 <_scanf_i+0x1e4>)
   1187e:	ldr	r0, [r4, #20]
   11880:	subs	r1, r1, r3
   11882:	bl	11af4 <__sccl>
   11886:	mov.w	fp, #0
   1188a:	ldr	r3, [r4, #8]
   1188c:	ldr	r2, [r4, #0]
   1188e:	cmp	r3, #0
   11890:	beq.n	1190e <_scanf_i+0x15e>
   11892:	ldr	r1, [r6, #0]
   11894:	ldr	r0, [r4, #20]
   11896:	ldrb.w	ip, [r1]
   1189a:	ldrb.w	r0, [r0, ip]
   1189e:	cmp	r0, #0
   118a0:	beq.n	1190e <_scanf_i+0x15e>
   118a2:	cmp.w	ip, #48	; 0x30
   118a6:	bne.n	118f2 <_scanf_i+0x142>
   118a8:	lsls	r0, r2, #20
   118aa:	bpl.n	118f2 <_scanf_i+0x142>
   118ac:	add.w	fp, fp, #1
   118b0:	cmp.w	r9, #0
   118b4:	beq.n	118be <_scanf_i+0x10e>
   118b6:	adds	r3, #1
   118b8:	add.w	r9, r9, #4294967295
   118bc:	str	r3, [r4, #8]
   118be:	ldr	r3, [r6, #4]
   118c0:	subs	r3, #1
   118c2:	cmp	r3, #0
   118c4:	str	r3, [r6, #4]
   118c6:	ble.n	11900 <_scanf_i+0x150>
   118c8:	ldr	r3, [r6, #0]
   118ca:	adds	r3, #1
   118cc:	str	r3, [r6, #0]
   118ce:	ldr	r3, [r4, #8]
   118d0:	subs	r3, #1
   118d2:	str	r3, [r4, #8]
   118d4:	b.n	1188a <_scanf_i+0xda>
   118d6:	cmp.w	fp, #2
   118da:	bne.n	1183a <_scanf_i+0x8a>
   118dc:	ldr	r2, [r4, #0]
   118de:	and.w	r1, r2, #1536	; 0x600
   118e2:	cmp.w	r1, #512	; 0x200
   118e6:	bne.n	11868 <_scanf_i+0xb8>
   118e8:	movs	r3, #16
   118ea:	str	r3, [r4, #4]
   118ec:	orr.w	r2, r2, #256	; 0x100
   118f0:	b.n	11838 <_scanf_i+0x88>
   118f2:	bic.w	r2, r2, #2304	; 0x900
   118f6:	str	r2, [r4, #0]
   118f8:	ldrb	r3, [r1, #0]
   118fa:	strb.w	r3, [r5], #1
   118fe:	b.n	118be <_scanf_i+0x10e>
   11900:	ldr.w	r3, [r4, #384]	; 0x180
   11904:	mov	r1, r6
   11906:	mov	r0, sl
   11908:	blx	r3
   1190a:	cmp	r0, #0
   1190c:	beq.n	118ce <_scanf_i+0x11e>
   1190e:	ldr	r3, [r4, #0]
   11910:	lsls	r1, r3, #23
   11912:	bpl.n	11930 <_scanf_i+0x180>
   11914:	cmp	r5, r7
   11916:	bls.n	1192c <_scanf_i+0x17c>
   11918:	ldrb.w	r1, [r5, #-1]
   1191c:	ldr.w	r3, [r4, #380]	; 0x17c
   11920:	mov	r2, r6
   11922:	mov	r0, sl
   11924:	blx	r3
   11926:	add.w	r9, r5, #4294967295
   1192a:	mov	r5, r9
   1192c:	cmp	r5, r7
   1192e:	beq.n	11982 <_scanf_i+0x1d2>
   11930:	ldr	r2, [r4, #0]
   11932:	ands.w	r2, r2, #16
   11936:	bne.n	11960 <_scanf_i+0x1b0>
   11938:	strb	r2, [r5, #0]
   1193a:	ldr	r3, [r4, #4]
   1193c:	ldr	r6, [sp, #4]
   1193e:	mov	r1, r7
   11940:	mov	r0, sl
   11942:	blx	r6
   11944:	ldr.w	r3, [r8]
   11948:	ldr	r1, [r4, #0]
   1194a:	adds	r2, r3, #4
   1194c:	str.w	r2, [r8]
   11950:	tst.w	r1, #32
   11954:	ldr	r3, [r3, #0]
   11956:	beq.n	11978 <_scanf_i+0x1c8>
   11958:	str	r0, [r3, #0]
   1195a:	ldr	r3, [r4, #12]
   1195c:	adds	r3, #1
   1195e:	str	r3, [r4, #12]
   11960:	ldr	r3, [r4, #16]
   11962:	subs	r5, r5, r7
   11964:	add	r5, fp
   11966:	add	r3, r5
   11968:	str	r3, [r4, #16]
   1196a:	movs	r0, #0
   1196c:	add	sp, #28
   1196e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11972:	mov.w	fp, #0
   11976:	b.n	1190e <_scanf_i+0x15e>
   11978:	lsls	r2, r1, #31
   1197a:	ite	mi
   1197c:	strhmi	r0, [r3, #0]
   1197e:	strpl	r0, [r3, #0]
   11980:	b.n	1195a <_scanf_i+0x1aa>
   11982:	movs	r0, #1
   11984:	b.n	1196c <_scanf_i+0x1bc>
   11986:	nop
   11988:	.word	0x20000418
   1198c:	.word	0x00011d29
   11990:	.word	0x0000e005
   11994:	.word	0x20001490

00011998 <__sflush_r>:
   11998:	ldrh	r2, [r1, #12]
   1199a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1199e:	mov	r5, r0
   119a0:	lsls	r0, r2, #28
   119a2:	mov	r4, r1
   119a4:	bmi.n	11a58 <__sflush_r+0xc0>
   119a6:	ldr	r3, [r1, #4]
   119a8:	cmp	r3, #0
   119aa:	bgt.n	119b8 <__sflush_r+0x20>
   119ac:	ldr	r3, [r1, #64]	; 0x40
   119ae:	cmp	r3, #0
   119b0:	bgt.n	119b8 <__sflush_r+0x20>
   119b2:	movs	r0, #0
   119b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   119b8:	ldr	r6, [r4, #44]	; 0x2c
   119ba:	cmp	r6, #0
   119bc:	beq.n	119b2 <__sflush_r+0x1a>
   119be:	movs	r3, #0
   119c0:	ands.w	r2, r2, #4096	; 0x1000
   119c4:	ldr	r7, [r5, #0]
   119c6:	ldr	r1, [r4, #32]
   119c8:	str	r3, [r5, #0]
   119ca:	beq.n	11a32 <__sflush_r+0x9a>
   119cc:	ldr	r0, [r4, #84]	; 0x54
   119ce:	ldrh	r3, [r4, #12]
   119d0:	lsls	r2, r3, #29
   119d2:	bpl.n	119e0 <__sflush_r+0x48>
   119d4:	ldr	r3, [r4, #4]
   119d6:	subs	r0, r0, r3
   119d8:	ldr	r3, [r4, #52]	; 0x34
   119da:	cbz	r3, 119e0 <__sflush_r+0x48>
   119dc:	ldr	r3, [r4, #64]	; 0x40
   119de:	subs	r0, r0, r3
   119e0:	movs	r3, #0
   119e2:	mov	r2, r0
   119e4:	ldr	r6, [r4, #44]	; 0x2c
   119e6:	ldr	r1, [r4, #32]
   119e8:	mov	r0, r5
   119ea:	blx	r6
   119ec:	adds	r3, r0, #1
   119ee:	ldrh	r3, [r4, #12]
   119f0:	bne.n	11a00 <__sflush_r+0x68>
   119f2:	ldr	r1, [r5, #0]
   119f4:	cmp	r1, #29
   119f6:	bhi.n	11a50 <__sflush_r+0xb8>
   119f8:	ldr	r2, [pc, #164]	; (11aa0 <__sflush_r+0x108>)
   119fa:	asrs	r2, r1
   119fc:	lsls	r6, r2, #31
   119fe:	bmi.n	11a50 <__sflush_r+0xb8>
   11a00:	movs	r2, #0
   11a02:	str	r2, [r4, #4]
   11a04:	lsls	r1, r3, #19
   11a06:	ldr	r2, [r4, #16]
   11a08:	str	r2, [r4, #0]
   11a0a:	bpl.n	11a16 <__sflush_r+0x7e>
   11a0c:	adds	r2, r0, #1
   11a0e:	bne.n	11a14 <__sflush_r+0x7c>
   11a10:	ldr	r3, [r5, #0]
   11a12:	cbnz	r3, 11a16 <__sflush_r+0x7e>
   11a14:	str	r0, [r4, #84]	; 0x54
   11a16:	ldr	r1, [r4, #52]	; 0x34
   11a18:	str	r7, [r5, #0]
   11a1a:	cmp	r1, #0
   11a1c:	beq.n	119b2 <__sflush_r+0x1a>
   11a1e:	add.w	r3, r4, #68	; 0x44
   11a22:	cmp	r1, r3
   11a24:	beq.n	11a2c <__sflush_r+0x94>
   11a26:	mov	r0, r5
   11a28:	bl	ff28 <_free_r>
   11a2c:	movs	r0, #0
   11a2e:	str	r0, [r4, #52]	; 0x34
   11a30:	b.n	119b4 <__sflush_r+0x1c>
   11a32:	movs	r3, #1
   11a34:	mov	r0, r5
   11a36:	blx	r6
   11a38:	adds	r1, r0, #1
   11a3a:	bne.n	119ce <__sflush_r+0x36>
   11a3c:	ldr	r3, [r5, #0]
   11a3e:	cmp	r3, #0
   11a40:	beq.n	119ce <__sflush_r+0x36>
   11a42:	cmp	r3, #29
   11a44:	beq.n	11a4a <__sflush_r+0xb2>
   11a46:	cmp	r3, #22
   11a48:	bne.n	11a4e <__sflush_r+0xb6>
   11a4a:	str	r7, [r5, #0]
   11a4c:	b.n	119b2 <__sflush_r+0x1a>
   11a4e:	ldrh	r3, [r4, #12]
   11a50:	orr.w	r3, r3, #64	; 0x40
   11a54:	strh	r3, [r4, #12]
   11a56:	b.n	119b4 <__sflush_r+0x1c>
   11a58:	ldr	r7, [r1, #16]
   11a5a:	cmp	r7, #0
   11a5c:	beq.n	119b2 <__sflush_r+0x1a>
   11a5e:	lsls	r3, r2, #30
   11a60:	ldr	r6, [r1, #0]
   11a62:	it	eq
   11a64:	ldreq	r3, [r1, #20]
   11a66:	str	r7, [r1, #0]
   11a68:	it	ne
   11a6a:	movne	r3, #0
   11a6c:	sub.w	r8, r6, r7
   11a70:	str	r3, [r1, #8]
   11a72:	cmp.w	r8, #0
   11a76:	ble.n	119b2 <__sflush_r+0x1a>
   11a78:	ldr	r1, [r4, #32]
   11a7a:	ldr	r6, [r4, #40]	; 0x28
   11a7c:	mov	r3, r8
   11a7e:	mov	r2, r7
   11a80:	mov	r0, r5
   11a82:	blx	r6
   11a84:	cmp	r0, #0
   11a86:	bgt.n	11a96 <__sflush_r+0xfe>
   11a88:	ldrh	r3, [r4, #12]
   11a8a:	orr.w	r3, r3, #64	; 0x40
   11a8e:	strh	r3, [r4, #12]
   11a90:	mov.w	r0, #4294967295
   11a94:	b.n	119b4 <__sflush_r+0x1c>
   11a96:	add	r7, r0
   11a98:	sub.w	r8, r8, r0
   11a9c:	b.n	11a72 <__sflush_r+0xda>
   11a9e:	nop
   11aa0:	.word	0xdfbffffe

00011aa4 <_fflush_r>:
   11aa4:	push	{r3, r4, r5, lr}
   11aa6:	ldr	r3, [r1, #16]
   11aa8:	mov	r5, r0
   11aaa:	mov	r4, r1
   11aac:	cbnz	r3, 11ab4 <_fflush_r+0x10>
   11aae:	movs	r5, #0
   11ab0:	mov	r0, r5
   11ab2:	pop	{r3, r4, r5, pc}
   11ab4:	cbz	r0, 11abe <_fflush_r+0x1a>
   11ab6:	ldr	r3, [r0, #32]
   11ab8:	cbnz	r3, 11abe <_fflush_r+0x1a>
   11aba:	bl	eda8 <__sinit>
   11abe:	ldrsh.w	r3, [r4, #12]
   11ac2:	cmp	r3, #0
   11ac4:	beq.n	11aae <_fflush_r+0xa>
   11ac6:	ldr	r2, [r4, #100]	; 0x64
   11ac8:	lsls	r0, r2, #31
   11aca:	bmi.n	11ad6 <_fflush_r+0x32>
   11acc:	lsls	r1, r3, #22
   11ace:	bmi.n	11ad6 <_fflush_r+0x32>
   11ad0:	ldr	r0, [r4, #88]	; 0x58
   11ad2:	bl	f258 <__retarget_lock_acquire_recursive>
   11ad6:	mov	r0, r5
   11ad8:	mov	r1, r4
   11ada:	bl	11998 <__sflush_r>
   11ade:	ldr	r3, [r4, #100]	; 0x64
   11ae0:	lsls	r2, r3, #31
   11ae2:	mov	r5, r0
   11ae4:	bmi.n	11ab0 <_fflush_r+0xc>
   11ae6:	ldrh	r3, [r4, #12]
   11ae8:	lsls	r3, r3, #22
   11aea:	bmi.n	11ab0 <_fflush_r+0xc>
   11aec:	ldr	r0, [r4, #88]	; 0x58
   11aee:	bl	f25a <__retarget_lock_release_recursive>
   11af2:	b.n	11ab0 <_fflush_r+0xc>

00011af4 <__sccl>:
   11af4:	push	{r4, r5, r6, lr}
   11af6:	ldrb	r3, [r1, #0]
   11af8:	mov	r4, r0
   11afa:	cmp	r3, #94	; 0x5e
   11afc:	itete	eq
   11afe:	ldrbeq	r3, [r1, #1]
   11b00:	addne	r2, r1, #1
   11b02:	addeq	r2, r1, #2
   11b04:	movne	r1, #0
   11b06:	it	eq
   11b08:	moveq	r1, #1
   11b0a:	subs	r0, #1
   11b0c:	add.w	r5, r4, #255	; 0xff
   11b10:	strb.w	r1, [r0, #1]!
   11b14:	cmp	r0, r5
   11b16:	bne.n	11b10 <__sccl+0x1c>
   11b18:	cbnz	r3, 11b1e <__sccl+0x2a>
   11b1a:	subs	r0, r2, #1
   11b1c:	pop	{r4, r5, r6, pc}
   11b1e:	eor.w	r1, r1, #1
   11b22:	strb	r1, [r4, r3]
   11b24:	mov	r0, r2
   11b26:	mov	r2, r0
   11b28:	ldrb.w	r5, [r2], #1
   11b2c:	cmp	r5, #45	; 0x2d
   11b2e:	beq.n	11b3c <__sccl+0x48>
   11b30:	cmp	r5, #93	; 0x5d
   11b32:	beq.n	11b62 <__sccl+0x6e>
   11b34:	cmp	r5, #0
   11b36:	beq.n	11b1c <__sccl+0x28>
   11b38:	mov	r3, r5
   11b3a:	b.n	11b22 <__sccl+0x2e>
   11b3c:	ldrb	r6, [r0, #1]
   11b3e:	cmp	r6, #93	; 0x5d
   11b40:	beq.n	11b38 <__sccl+0x44>
   11b42:	cmp	r3, r6
   11b44:	bgt.n	11b38 <__sccl+0x44>
   11b46:	adds	r0, #2
   11b48:	mov	r2, r3
   11b4a:	adds	r2, #1
   11b4c:	cmp	r6, r2
   11b4e:	strb	r1, [r4, r2]
   11b50:	bgt.n	11b4a <__sccl+0x56>
   11b52:	subs	r2, r6, r3
   11b54:	subs	r2, #1
   11b56:	adds	r5, r3, #1
   11b58:	cmp	r3, r6
   11b5a:	it	ge
   11b5c:	movge	r2, #0
   11b5e:	adds	r3, r5, r2
   11b60:	b.n	11b26 <__sccl+0x32>
   11b62:	mov	r0, r2
   11b64:	b.n	11b1c <__sccl+0x28>

00011b66 <__submore>:
   11b66:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b6a:	mov	r4, r1
   11b6c:	ldr	r1, [r1, #52]	; 0x34
   11b6e:	add.w	r3, r4, #68	; 0x44
   11b72:	cmp	r1, r3
   11b74:	bne.n	11bb2 <__submore+0x4c>
   11b76:	mov.w	r1, #1024	; 0x400
   11b7a:	bl	d1f8 <_malloc_r>
   11b7e:	cbnz	r0, 11b88 <__submore+0x22>
   11b80:	mov.w	r0, #4294967295
   11b84:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b88:	mov.w	r3, #1024	; 0x400
   11b8c:	str	r3, [r4, #56]	; 0x38
   11b8e:	ldrb.w	r3, [r4, #70]	; 0x46
   11b92:	str	r0, [r4, #52]	; 0x34
   11b94:	strb.w	r3, [r0, #1023]	; 0x3ff
   11b98:	ldrb.w	r3, [r4, #69]	; 0x45
   11b9c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11ba0:	ldrb.w	r3, [r4, #68]	; 0x44
   11ba4:	strb.w	r3, [r0, #1021]	; 0x3fd
   11ba8:	addw	r0, r0, #1021	; 0x3fd
   11bac:	str	r0, [r4, #0]
   11bae:	movs	r0, #0
   11bb0:	b.n	11b84 <__submore+0x1e>
   11bb2:	ldr	r6, [r4, #56]	; 0x38
   11bb4:	lsls	r7, r6, #1
   11bb6:	mov	r2, r7
   11bb8:	bl	d2fc <_realloc_r>
   11bbc:	mov	r5, r0
   11bbe:	cmp	r0, #0
   11bc0:	beq.n	11b80 <__submore+0x1a>
   11bc2:	add.w	r8, r0, r6
   11bc6:	mov	r1, r0
   11bc8:	mov	r2, r6
   11bca:	mov	r0, r8
   11bcc:	bl	a79c <memcpy>
   11bd0:	strd	r5, r7, [r4, #52]	; 0x34
   11bd4:	str.w	r8, [r4]
   11bd8:	b.n	11bae <__submore+0x48>
	...

00011bdc <__assert_func>:
   11bdc:	push	{r0, r1, r2, r3, r4, lr}
   11bde:	mov	r4, r2
   11be0:	mov	r2, r3
   11be2:	ldr	r3, [pc, #36]	; (11c08 <__assert_func+0x2c>)
   11be4:	ldr	r3, [r3, #0]
   11be6:	mov	r5, r0
   11be8:	ldr	r0, [r3, #12]
   11bea:	cbz	r4, 11c00 <__assert_func+0x24>
   11bec:	ldr	r3, [pc, #28]	; (11c0c <__assert_func+0x30>)
   11bee:	str	r1, [sp, #0]
   11bf0:	strd	r3, r4, [sp, #4]
   11bf4:	ldr	r1, [pc, #24]	; (11c10 <__assert_func+0x34>)
   11bf6:	mov	r3, r5
   11bf8:	bl	11d2c <fiprintf>
   11bfc:	bl	beda <abort>
   11c00:	ldr	r3, [pc, #16]	; (11c14 <__assert_func+0x38>)
   11c02:	mov	r4, r3
   11c04:	b.n	11bee <__assert_func+0x12>
   11c06:	nop
   11c08:	.word	0x20002358
   11c0c:	.word	0x20001225
   11c10:	.word	0x20001232
   11c14:	.word	0x20000df4

00011c18 <_calloc_r>:
   11c18:	push	{r0, r1, r2, r4, r5, lr}
   11c1a:	umull	r2, r4, r1, r2
   11c1e:	cbnz	r4, 11c34 <_calloc_r+0x1c>
   11c20:	mov	r1, r2
   11c22:	str	r2, [sp, #4]
   11c24:	bl	d1f8 <_malloc_r>
   11c28:	ldr	r2, [sp, #4]
   11c2a:	mov	r5, r0
   11c2c:	cbnz	r0, 11c3c <_calloc_r+0x24>
   11c2e:	mov	r0, r5
   11c30:	add	sp, #12
   11c32:	pop	{r4, r5, pc}
   11c34:	movs	r2, #12
   11c36:	str	r2, [r0, #0]
   11c38:	movs	r5, #0
   11c3a:	b.n	11c2e <_calloc_r+0x16>
   11c3c:	mov	r1, r4
   11c3e:	bl	a758 <memset>
   11c42:	b.n	11c2e <_calloc_r+0x16>

00011c44 <_strtoul_l.constprop.0>:
   11c44:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11c48:	ldr	r7, [pc, #216]	; (11d24 <_strtoul_l.constprop.0+0xe0>)
   11c4a:	mov	lr, r0
   11c4c:	mov	r5, r1
   11c4e:	mov	r0, r5
   11c50:	ldrb.w	r4, [r5], #1
   11c54:	ldrb	r6, [r7, r4]
   11c56:	ands.w	r6, r6, #8
   11c5a:	bne.n	11c4e <_strtoul_l.constprop.0+0xa>
   11c5c:	cmp	r4, #45	; 0x2d
   11c5e:	bne.n	11cc2 <_strtoul_l.constprop.0+0x7e>
   11c60:	ldrb	r4, [r5, #0]
   11c62:	movs	r6, #1
   11c64:	adds	r5, r0, #2
   11c66:	cmp	r3, #0
   11c68:	beq.n	11d1a <_strtoul_l.constprop.0+0xd6>
   11c6a:	cmp	r3, #16
   11c6c:	bne.n	11c82 <_strtoul_l.constprop.0+0x3e>
   11c6e:	cmp	r4, #48	; 0x30
   11c70:	bne.n	11c82 <_strtoul_l.constprop.0+0x3e>
   11c72:	ldrb	r0, [r5, #0]
   11c74:	and.w	r0, r0, #223	; 0xdf
   11c78:	cmp	r0, #88	; 0x58
   11c7a:	bne.n	11d10 <_strtoul_l.constprop.0+0xcc>
   11c7c:	ldrb	r4, [r5, #1]
   11c7e:	movs	r3, #16
   11c80:	adds	r5, #2
   11c82:	mov.w	r8, #4294967295
   11c86:	movs	r7, #0
   11c88:	udiv	r8, r8, r3
   11c8c:	mul.w	r9, r3, r8
   11c90:	mvn.w	r9, r9
   11c94:	mov	r0, r7
   11c96:	sub.w	ip, r4, #48	; 0x30
   11c9a:	cmp.w	ip, #9
   11c9e:	bhi.n	11ccc <_strtoul_l.constprop.0+0x88>
   11ca0:	mov	r4, ip
   11ca2:	cmp	r3, r4
   11ca4:	ble.n	11cee <_strtoul_l.constprop.0+0xaa>
   11ca6:	cmp.w	r7, #4294967295
   11caa:	beq.n	11cbc <_strtoul_l.constprop.0+0x78>
   11cac:	cmp	r8, r0
   11cae:	bcc.n	11ce8 <_strtoul_l.constprop.0+0xa4>
   11cb0:	bne.n	11cb6 <_strtoul_l.constprop.0+0x72>
   11cb2:	cmp	r9, r4
   11cb4:	blt.n	11ce8 <_strtoul_l.constprop.0+0xa4>
   11cb6:	mla	r0, r0, r3, r4
   11cba:	movs	r7, #1
   11cbc:	ldrb.w	r4, [r5], #1
   11cc0:	b.n	11c96 <_strtoul_l.constprop.0+0x52>
   11cc2:	cmp	r4, #43	; 0x2b
   11cc4:	itt	eq
   11cc6:	ldrbeq	r4, [r5, #0]
   11cc8:	addeq	r5, r0, #2
   11cca:	b.n	11c66 <_strtoul_l.constprop.0+0x22>
   11ccc:	sub.w	ip, r4, #65	; 0x41
   11cd0:	cmp.w	ip, #25
   11cd4:	bhi.n	11cda <_strtoul_l.constprop.0+0x96>
   11cd6:	subs	r4, #55	; 0x37
   11cd8:	b.n	11ca2 <_strtoul_l.constprop.0+0x5e>
   11cda:	sub.w	ip, r4, #97	; 0x61
   11cde:	cmp.w	ip, #25
   11ce2:	bhi.n	11cee <_strtoul_l.constprop.0+0xaa>
   11ce4:	subs	r4, #87	; 0x57
   11ce6:	b.n	11ca2 <_strtoul_l.constprop.0+0x5e>
   11ce8:	mov.w	r7, #4294967295
   11cec:	b.n	11cbc <_strtoul_l.constprop.0+0x78>
   11cee:	adds	r3, r7, #1
   11cf0:	bne.n	11d00 <_strtoul_l.constprop.0+0xbc>
   11cf2:	movs	r3, #34	; 0x22
   11cf4:	str.w	r3, [lr]
   11cf8:	mov	r0, r7
   11cfa:	cbnz	r2, 11d0a <_strtoul_l.constprop.0+0xc6>
   11cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11d00:	cbz	r6, 11d04 <_strtoul_l.constprop.0+0xc0>
   11d02:	negs	r0, r0
   11d04:	cmp	r2, #0
   11d06:	beq.n	11cfc <_strtoul_l.constprop.0+0xb8>
   11d08:	cbz	r7, 11d0c <_strtoul_l.constprop.0+0xc8>
   11d0a:	subs	r1, r5, #1
   11d0c:	str	r1, [r2, #0]
   11d0e:	b.n	11cfc <_strtoul_l.constprop.0+0xb8>
   11d10:	movs	r4, #48	; 0x30
   11d12:	cmp	r3, #0
   11d14:	bne.n	11c82 <_strtoul_l.constprop.0+0x3e>
   11d16:	movs	r3, #8
   11d18:	b.n	11c82 <_strtoul_l.constprop.0+0x3e>
   11d1a:	cmp	r4, #48	; 0x30
   11d1c:	beq.n	11c72 <_strtoul_l.constprop.0+0x2e>
   11d1e:	movs	r3, #10
   11d20:	b.n	11c82 <_strtoul_l.constprop.0+0x3e>
   11d22:	nop
   11d24:	.word	0x200012c3

00011d28 <_strtoul_r>:
   11d28:	b.w	11c44 <_strtoul_l.constprop.0>

00011d2c <fiprintf>:
   11d2c:	push	{r1, r2, r3}
   11d2e:	push	{r0, r1, lr}
   11d30:	mov	r1, r0
   11d32:	add	r3, sp, #12
   11d34:	ldr	r0, [pc, #20]	; (11d4c <fiprintf+0x20>)
   11d36:	ldr.w	r2, [r3], #4
   11d3a:	ldr	r0, [r0, #0]
   11d3c:	str	r3, [sp, #4]
   11d3e:	bl	11da4 <_vfiprintf_r>
   11d42:	add	sp, #8
   11d44:	ldr.w	lr, [sp], #4
   11d48:	add	sp, #12
   11d4a:	bx	lr
   11d4c:	.word	0x20002358

00011d50 <__sfputc_r>:
   11d50:	ldr	r3, [r2, #8]
   11d52:	subs	r3, #1
   11d54:	cmp	r3, #0
   11d56:	push	{r4}
   11d58:	str	r3, [r2, #8]
   11d5a:	bge.n	11d6e <__sfputc_r+0x1e>
   11d5c:	ldr	r4, [r2, #24]
   11d5e:	cmp	r3, r4
   11d60:	blt.n	11d66 <__sfputc_r+0x16>
   11d62:	cmp	r1, #10
   11d64:	bne.n	11d6e <__sfputc_r+0x1e>
   11d66:	ldr.w	r4, [sp], #4
   11d6a:	b.w	11fd8 <__swbuf_r>
   11d6e:	ldr	r3, [r2, #0]
   11d70:	adds	r0, r3, #1
   11d72:	str	r0, [r2, #0]
   11d74:	strb	r1, [r3, #0]
   11d76:	mov	r0, r1
   11d78:	ldr.w	r4, [sp], #4
   11d7c:	bx	lr

00011d7e <__sfputs_r>:
   11d7e:	push	{r3, r4, r5, r6, r7, lr}
   11d80:	mov	r6, r0
   11d82:	mov	r7, r1
   11d84:	mov	r4, r2
   11d86:	adds	r5, r2, r3
   11d88:	cmp	r4, r5
   11d8a:	bne.n	11d90 <__sfputs_r+0x12>
   11d8c:	movs	r0, #0
   11d8e:	b.n	11da0 <__sfputs_r+0x22>
   11d90:	ldrb.w	r1, [r4], #1
   11d94:	mov	r2, r7
   11d96:	mov	r0, r6
   11d98:	bl	11d50 <__sfputc_r>
   11d9c:	adds	r3, r0, #1
   11d9e:	bne.n	11d88 <__sfputs_r+0xa>
   11da0:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011da4 <_vfiprintf_r>:
   11da4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11da8:	mov	r5, r1
   11daa:	sub	sp, #116	; 0x74
   11dac:	mov	r4, r2
   11dae:	mov	r8, r3
   11db0:	mov	r6, r0
   11db2:	cbz	r0, 11dbc <_vfiprintf_r+0x18>
   11db4:	ldr	r3, [r0, #32]
   11db6:	cbnz	r3, 11dbc <_vfiprintf_r+0x18>
   11db8:	bl	eda8 <__sinit>
   11dbc:	ldr	r3, [r5, #100]	; 0x64
   11dbe:	lsls	r1, r3, #31
   11dc0:	bmi.n	11dce <_vfiprintf_r+0x2a>
   11dc2:	ldrh	r3, [r5, #12]
   11dc4:	lsls	r2, r3, #22
   11dc6:	bmi.n	11dce <_vfiprintf_r+0x2a>
   11dc8:	ldr	r0, [r5, #88]	; 0x58
   11dca:	bl	f258 <__retarget_lock_acquire_recursive>
   11dce:	ldrh	r3, [r5, #12]
   11dd0:	lsls	r3, r3, #28
   11dd2:	bpl.n	11dd8 <_vfiprintf_r+0x34>
   11dd4:	ldr	r3, [r5, #16]
   11dd6:	cbnz	r3, 11e00 <_vfiprintf_r+0x5c>
   11dd8:	mov	r1, r5
   11dda:	mov	r0, r6
   11ddc:	bl	12054 <__swsetup_r>
   11de0:	cbz	r0, 11e00 <_vfiprintf_r+0x5c>
   11de2:	ldr	r3, [r5, #100]	; 0x64
   11de4:	lsls	r4, r3, #31
   11de6:	bpl.n	11df2 <_vfiprintf_r+0x4e>
   11de8:	mov.w	r0, #4294967295
   11dec:	add	sp, #116	; 0x74
   11dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11df2:	ldrh	r3, [r5, #12]
   11df4:	lsls	r0, r3, #22
   11df6:	bmi.n	11de8 <_vfiprintf_r+0x44>
   11df8:	ldr	r0, [r5, #88]	; 0x58
   11dfa:	bl	f25a <__retarget_lock_release_recursive>
   11dfe:	b.n	11de8 <_vfiprintf_r+0x44>
   11e00:	movs	r3, #0
   11e02:	str	r3, [sp, #36]	; 0x24
   11e04:	movs	r3, #32
   11e06:	strb.w	r3, [sp, #41]	; 0x29
   11e0a:	str.w	r8, [sp, #12]
   11e0e:	movs	r3, #48	; 0x30
   11e10:	ldr.w	r8, [pc, #432]	; 11fc4 <_vfiprintf_r+0x220>
   11e14:	strb.w	r3, [sp, #42]	; 0x2a
   11e18:	mov.w	r9, #1
   11e1c:	mov	r3, r4
   11e1e:	mov	sl, r3
   11e20:	ldrb.w	r2, [r3], #1
   11e24:	cbz	r2, 11e2a <_vfiprintf_r+0x86>
   11e26:	cmp	r2, #37	; 0x25
   11e28:	bne.n	11e1e <_vfiprintf_r+0x7a>
   11e2a:	subs.w	fp, sl, r4
   11e2e:	beq.n	11e48 <_vfiprintf_r+0xa4>
   11e30:	mov	r3, fp
   11e32:	mov	r2, r4
   11e34:	mov	r1, r5
   11e36:	mov	r0, r6
   11e38:	bl	11d7e <__sfputs_r>
   11e3c:	adds	r0, #1
   11e3e:	beq.w	11f94 <_vfiprintf_r+0x1f0>
   11e42:	ldr	r2, [sp, #36]	; 0x24
   11e44:	add	r2, fp
   11e46:	str	r2, [sp, #36]	; 0x24
   11e48:	ldrb.w	r3, [sl]
   11e4c:	cmp	r3, #0
   11e4e:	beq.w	11f94 <_vfiprintf_r+0x1f0>
   11e52:	movs	r3, #0
   11e54:	mov.w	r2, #4294967295
   11e58:	strd	r2, r3, [sp, #20]
   11e5c:	add.w	sl, sl, #1
   11e60:	str	r3, [sp, #16]
   11e62:	str	r3, [sp, #28]
   11e64:	strb.w	r3, [sp, #83]	; 0x53
   11e68:	str	r3, [sp, #104]	; 0x68
   11e6a:	mov	r4, sl
   11e6c:	movs	r2, #5
   11e6e:	ldrb.w	r1, [r4], #1
   11e72:	ldr	r0, [pc, #336]	; (11fc4 <_vfiprintf_r+0x220>)
   11e74:	bl	f270 <memchr>
   11e78:	ldr	r2, [sp, #16]
   11e7a:	cbnz	r0, 11eb4 <_vfiprintf_r+0x110>
   11e7c:	lsls	r1, r2, #27
   11e7e:	itt	mi
   11e80:	movmi	r3, #32
   11e82:	strbmi.w	r3, [sp, #83]	; 0x53
   11e86:	lsls	r3, r2, #28
   11e88:	itt	mi
   11e8a:	movmi	r3, #43	; 0x2b
   11e8c:	strbmi.w	r3, [sp, #83]	; 0x53
   11e90:	ldrb.w	r3, [sl]
   11e94:	cmp	r3, #42	; 0x2a
   11e96:	beq.n	11ec4 <_vfiprintf_r+0x120>
   11e98:	ldr	r2, [sp, #28]
   11e9a:	mov	r4, sl
   11e9c:	movs	r0, #0
   11e9e:	mov.w	ip, #10
   11ea2:	mov	r1, r4
   11ea4:	ldrb.w	r3, [r1], #1
   11ea8:	subs	r3, #48	; 0x30
   11eaa:	cmp	r3, #9
   11eac:	bls.n	11f4a <_vfiprintf_r+0x1a6>
   11eae:	cbz	r0, 11ede <_vfiprintf_r+0x13a>
   11eb0:	str	r2, [sp, #28]
   11eb2:	b.n	11ede <_vfiprintf_r+0x13a>
   11eb4:	sub.w	r3, r0, r8
   11eb8:	lsl.w	r3, r9, r3
   11ebc:	orrs	r3, r2
   11ebe:	str	r3, [sp, #16]
   11ec0:	mov	sl, r4
   11ec2:	b.n	11e6a <_vfiprintf_r+0xc6>
   11ec4:	ldr	r3, [sp, #12]
   11ec6:	adds	r1, r3, #4
   11ec8:	ldr	r3, [r3, #0]
   11eca:	str	r1, [sp, #12]
   11ecc:	cmp	r3, #0
   11ece:	ittet	lt
   11ed0:	neglt	r3, r3
   11ed2:	orrlt.w	r2, r2, #2
   11ed6:	strge	r3, [sp, #28]
   11ed8:	strlt	r3, [sp, #28]
   11eda:	it	lt
   11edc:	strlt	r2, [sp, #16]
   11ede:	ldrb	r3, [r4, #0]
   11ee0:	cmp	r3, #46	; 0x2e
   11ee2:	bne.n	11efe <_vfiprintf_r+0x15a>
   11ee4:	ldrb	r3, [r4, #1]
   11ee6:	cmp	r3, #42	; 0x2a
   11ee8:	bne.n	11f54 <_vfiprintf_r+0x1b0>
   11eea:	ldr	r3, [sp, #12]
   11eec:	adds	r2, r3, #4
   11eee:	ldr	r3, [r3, #0]
   11ef0:	str	r2, [sp, #12]
   11ef2:	cmp	r3, #0
   11ef4:	it	lt
   11ef6:	movlt.w	r3, #4294967295
   11efa:	adds	r4, #2
   11efc:	str	r3, [sp, #20]
   11efe:	ldr.w	sl, [pc, #212]	; 11fd4 <_vfiprintf_r+0x230>
   11f02:	ldrb	r1, [r4, #0]
   11f04:	movs	r2, #3
   11f06:	mov	r0, sl
   11f08:	bl	f270 <memchr>
   11f0c:	cbz	r0, 11f1e <_vfiprintf_r+0x17a>
   11f0e:	ldr	r3, [sp, #16]
   11f10:	sub.w	r0, r0, sl
   11f14:	movs	r2, #64	; 0x40
   11f16:	lsls	r2, r0
   11f18:	orrs	r3, r2
   11f1a:	adds	r4, #1
   11f1c:	str	r3, [sp, #16]
   11f1e:	ldrb.w	r1, [r4], #1
   11f22:	ldr	r0, [pc, #164]	; (11fc8 <_vfiprintf_r+0x224>)
   11f24:	strb.w	r1, [sp, #40]	; 0x28
   11f28:	movs	r2, #6
   11f2a:	bl	f270 <memchr>
   11f2e:	cmp	r0, #0
   11f30:	beq.n	11fb2 <_vfiprintf_r+0x20e>
   11f32:	ldr	r3, [pc, #152]	; (11fcc <_vfiprintf_r+0x228>)
   11f34:	cbnz	r3, 11f7e <_vfiprintf_r+0x1da>
   11f36:	ldr	r3, [sp, #12]
   11f38:	adds	r3, #7
   11f3a:	bic.w	r3, r3, #7
   11f3e:	adds	r3, #8
   11f40:	str	r3, [sp, #12]
   11f42:	ldr	r3, [sp, #36]	; 0x24
   11f44:	add	r3, r7
   11f46:	str	r3, [sp, #36]	; 0x24
   11f48:	b.n	11e1c <_vfiprintf_r+0x78>
   11f4a:	mla	r2, ip, r2, r3
   11f4e:	mov	r4, r1
   11f50:	movs	r0, #1
   11f52:	b.n	11ea2 <_vfiprintf_r+0xfe>
   11f54:	movs	r3, #0
   11f56:	adds	r4, #1
   11f58:	str	r3, [sp, #20]
   11f5a:	mov	r1, r3
   11f5c:	mov.w	ip, #10
   11f60:	mov	r0, r4
   11f62:	ldrb.w	r2, [r0], #1
   11f66:	subs	r2, #48	; 0x30
   11f68:	cmp	r2, #9
   11f6a:	bls.n	11f74 <_vfiprintf_r+0x1d0>
   11f6c:	cmp	r3, #0
   11f6e:	beq.n	11efe <_vfiprintf_r+0x15a>
   11f70:	str	r1, [sp, #20]
   11f72:	b.n	11efe <_vfiprintf_r+0x15a>
   11f74:	mla	r1, ip, r1, r2
   11f78:	mov	r4, r0
   11f7a:	movs	r3, #1
   11f7c:	b.n	11f60 <_vfiprintf_r+0x1bc>
   11f7e:	add	r3, sp, #12
   11f80:	str	r3, [sp, #0]
   11f82:	mov	r2, r5
   11f84:	ldr	r3, [pc, #72]	; (11fd0 <_vfiprintf_r+0x22c>)
   11f86:	add	r1, sp, #16
   11f88:	mov	r0, r6
   11f8a:	bl	e158 <_printf_float>
   11f8e:	mov	r7, r0
   11f90:	adds	r0, r7, #1
   11f92:	bne.n	11f42 <_vfiprintf_r+0x19e>
   11f94:	ldr	r3, [r5, #100]	; 0x64
   11f96:	lsls	r1, r3, #31
   11f98:	bmi.n	11fa6 <_vfiprintf_r+0x202>
   11f9a:	ldrh	r3, [r5, #12]
   11f9c:	lsls	r2, r3, #22
   11f9e:	bmi.n	11fa6 <_vfiprintf_r+0x202>
   11fa0:	ldr	r0, [r5, #88]	; 0x58
   11fa2:	bl	f25a <__retarget_lock_release_recursive>
   11fa6:	ldrh	r3, [r5, #12]
   11fa8:	lsls	r3, r3, #25
   11faa:	bmi.w	11de8 <_vfiprintf_r+0x44>
   11fae:	ldr	r0, [sp, #36]	; 0x24
   11fb0:	b.n	11dec <_vfiprintf_r+0x48>
   11fb2:	add	r3, sp, #12
   11fb4:	str	r3, [sp, #0]
   11fb6:	mov	r2, r5
   11fb8:	ldr	r3, [pc, #20]	; (11fd0 <_vfiprintf_r+0x22c>)
   11fba:	add	r1, sp, #16
   11fbc:	mov	r0, r6
   11fbe:	bl	e668 <_printf_i>
   11fc2:	b.n	11f8e <_vfiprintf_r+0x1ea>
   11fc4:	.word	0x20001498
   11fc8:	.word	0x200014a2
   11fcc:	.word	0x0000e159
   11fd0:	.word	0x00011d7f
   11fd4:	.word	0x2000149e

00011fd8 <__swbuf_r>:
   11fd8:	push	{r3, r4, r5, r6, r7, lr}
   11fda:	mov	r6, r1
   11fdc:	mov	r4, r2
   11fde:	mov	r5, r0
   11fe0:	cbz	r0, 11fea <__swbuf_r+0x12>
   11fe2:	ldr	r3, [r0, #32]
   11fe4:	cbnz	r3, 11fea <__swbuf_r+0x12>
   11fe6:	bl	eda8 <__sinit>
   11fea:	ldr	r3, [r4, #24]
   11fec:	str	r3, [r4, #8]
   11fee:	ldrh	r3, [r4, #12]
   11ff0:	lsls	r2, r3, #28
   11ff2:	bpl.n	12040 <__swbuf_r+0x68>
   11ff4:	ldr	r3, [r4, #16]
   11ff6:	cbz	r3, 12040 <__swbuf_r+0x68>
   11ff8:	ldr	r3, [r4, #0]
   11ffa:	ldr	r2, [r4, #16]
   11ffc:	subs	r0, r3, r2
   11ffe:	ldr	r3, [r4, #20]
   12000:	uxtb	r6, r6
   12002:	cmp	r3, r0
   12004:	mov	r7, r6
   12006:	bgt.n	12012 <__swbuf_r+0x3a>
   12008:	mov	r1, r4
   1200a:	mov	r0, r5
   1200c:	bl	11aa4 <_fflush_r>
   12010:	cbnz	r0, 1204c <__swbuf_r+0x74>
   12012:	ldr	r3, [r4, #8]
   12014:	subs	r3, #1
   12016:	str	r3, [r4, #8]
   12018:	ldr	r3, [r4, #0]
   1201a:	adds	r2, r3, #1
   1201c:	str	r2, [r4, #0]
   1201e:	strb	r6, [r3, #0]
   12020:	ldr	r2, [r4, #20]
   12022:	adds	r3, r0, #1
   12024:	cmp	r2, r3
   12026:	beq.n	12032 <__swbuf_r+0x5a>
   12028:	ldrh	r3, [r4, #12]
   1202a:	lsls	r3, r3, #31
   1202c:	bpl.n	1203c <__swbuf_r+0x64>
   1202e:	cmp	r6, #10
   12030:	bne.n	1203c <__swbuf_r+0x64>
   12032:	mov	r1, r4
   12034:	mov	r0, r5
   12036:	bl	11aa4 <_fflush_r>
   1203a:	cbnz	r0, 1204c <__swbuf_r+0x74>
   1203c:	mov	r0, r7
   1203e:	pop	{r3, r4, r5, r6, r7, pc}
   12040:	mov	r1, r4
   12042:	mov	r0, r5
   12044:	bl	12054 <__swsetup_r>
   12048:	cmp	r0, #0
   1204a:	beq.n	11ff8 <__swbuf_r+0x20>
   1204c:	mov.w	r7, #4294967295
   12050:	b.n	1203c <__swbuf_r+0x64>
	...

00012054 <__swsetup_r>:
   12054:	push	{r3, r4, r5, lr}
   12056:	ldr	r3, [pc, #168]	; (12100 <__swsetup_r+0xac>)
   12058:	mov	r5, r0
   1205a:	ldr	r0, [r3, #0]
   1205c:	mov	r4, r1
   1205e:	cbz	r0, 12068 <__swsetup_r+0x14>
   12060:	ldr	r3, [r0, #32]
   12062:	cbnz	r3, 12068 <__swsetup_r+0x14>
   12064:	bl	eda8 <__sinit>
   12068:	ldrh	r3, [r4, #12]
   1206a:	ldrsh.w	r2, [r4, #12]
   1206e:	lsls	r0, r3, #28
   12070:	bmi.n	120b8 <__swsetup_r+0x64>
   12072:	lsls	r1, r3, #27
   12074:	bmi.n	12086 <__swsetup_r+0x32>
   12076:	movs	r3, #9
   12078:	str	r3, [r5, #0]
   1207a:	orr.w	r3, r2, #64	; 0x40
   1207e:	strh	r3, [r4, #12]
   12080:	mov.w	r0, #4294967295
   12084:	b.n	120f0 <__swsetup_r+0x9c>
   12086:	lsls	r0, r3, #29
   12088:	bpl.n	120b0 <__swsetup_r+0x5c>
   1208a:	ldr	r1, [r4, #52]	; 0x34
   1208c:	cbz	r1, 120a0 <__swsetup_r+0x4c>
   1208e:	add.w	r3, r4, #68	; 0x44
   12092:	cmp	r1, r3
   12094:	beq.n	1209c <__swsetup_r+0x48>
   12096:	mov	r0, r5
   12098:	bl	ff28 <_free_r>
   1209c:	movs	r3, #0
   1209e:	str	r3, [r4, #52]	; 0x34
   120a0:	ldrh	r3, [r4, #12]
   120a2:	bic.w	r3, r3, #36	; 0x24
   120a6:	strh	r3, [r4, #12]
   120a8:	movs	r3, #0
   120aa:	str	r3, [r4, #4]
   120ac:	ldr	r3, [r4, #16]
   120ae:	str	r3, [r4, #0]
   120b0:	ldrh	r3, [r4, #12]
   120b2:	orr.w	r3, r3, #8
   120b6:	strh	r3, [r4, #12]
   120b8:	ldr	r3, [r4, #16]
   120ba:	cbnz	r3, 120d0 <__swsetup_r+0x7c>
   120bc:	ldrh	r3, [r4, #12]
   120be:	and.w	r3, r3, #640	; 0x280
   120c2:	cmp.w	r3, #512	; 0x200
   120c6:	beq.n	120d0 <__swsetup_r+0x7c>
   120c8:	mov	r1, r4
   120ca:	mov	r0, r5
   120cc:	bl	12150 <__smakebuf_r>
   120d0:	ldrh	r0, [r4, #12]
   120d2:	ldrsh.w	r2, [r4, #12]
   120d6:	ands.w	r3, r0, #1
   120da:	beq.n	120f2 <__swsetup_r+0x9e>
   120dc:	movs	r3, #0
   120de:	str	r3, [r4, #8]
   120e0:	ldr	r3, [r4, #20]
   120e2:	negs	r3, r3
   120e4:	str	r3, [r4, #24]
   120e6:	ldr	r3, [r4, #16]
   120e8:	cbnz	r3, 120fc <__swsetup_r+0xa8>
   120ea:	ands.w	r0, r0, #128	; 0x80
   120ee:	bne.n	1207a <__swsetup_r+0x26>
   120f0:	pop	{r3, r4, r5, pc}
   120f2:	lsls	r1, r0, #30
   120f4:	it	pl
   120f6:	ldrpl	r3, [r4, #20]
   120f8:	str	r3, [r4, #8]
   120fa:	b.n	120e6 <__swsetup_r+0x92>
   120fc:	movs	r0, #0
   120fe:	b.n	120f0 <__swsetup_r+0x9c>
   12100:	.word	0x20002358

00012104 <__swhatbuf_r>:
   12104:	push	{r4, r5, r6, lr}
   12106:	mov	r4, r1
   12108:	ldrsh.w	r1, [r1, #14]
   1210c:	cmp	r1, #0
   1210e:	sub	sp, #88	; 0x58
   12110:	mov	r5, r2
   12112:	mov	r6, r3
   12114:	bge.n	12132 <__swhatbuf_r+0x2e>
   12116:	ldrh	r3, [r4, #12]
   12118:	tst.w	r3, #128	; 0x80
   1211c:	mov.w	r1, #0
   12120:	ite	eq
   12122:	moveq.w	r3, #1024	; 0x400
   12126:	movne	r3, #64	; 0x40
   12128:	movs	r0, #0
   1212a:	str	r1, [r6, #0]
   1212c:	str	r3, [r5, #0]
   1212e:	add	sp, #88	; 0x58
   12130:	pop	{r4, r5, r6, pc}
   12132:	mov	r2, sp
   12134:	bl	121c8 <_fstat_r>
   12138:	cmp	r0, #0
   1213a:	blt.n	12116 <__swhatbuf_r+0x12>
   1213c:	ldr	r1, [sp, #4]
   1213e:	and.w	r1, r1, #61440	; 0xf000
   12142:	sub.w	r3, r1, #8192	; 0x2000
   12146:	negs	r1, r3
   12148:	adcs	r1, r3
   1214a:	mov.w	r3, #1024	; 0x400
   1214e:	b.n	12128 <__swhatbuf_r+0x24>

00012150 <__smakebuf_r>:
   12150:	ldrh	r3, [r1, #12]
   12152:	push	{r0, r1, r4, r5, r6, lr}
   12154:	lsls	r5, r3, #30
   12156:	mov	r6, r0
   12158:	mov	r4, r1
   1215a:	bpl.n	1216c <__smakebuf_r+0x1c>
   1215c:	add.w	r3, r4, #71	; 0x47
   12160:	str	r3, [r4, #0]
   12162:	str	r3, [r4, #16]
   12164:	movs	r3, #1
   12166:	str	r3, [r4, #20]
   12168:	add	sp, #8
   1216a:	pop	{r4, r5, r6, pc}
   1216c:	add	r3, sp, #4
   1216e:	mov	r2, sp
   12170:	bl	12104 <__swhatbuf_r>
   12174:	ldr	r1, [sp, #0]
   12176:	mov	r5, r0
   12178:	mov	r0, r6
   1217a:	bl	d1f8 <_malloc_r>
   1217e:	cbnz	r0, 12194 <__smakebuf_r+0x44>
   12180:	ldrsh.w	r3, [r4, #12]
   12184:	lsls	r2, r3, #22
   12186:	bmi.n	12168 <__smakebuf_r+0x18>
   12188:	bic.w	r3, r3, #3
   1218c:	orr.w	r3, r3, #2
   12190:	strh	r3, [r4, #12]
   12192:	b.n	1215c <__smakebuf_r+0xc>
   12194:	ldrh	r3, [r4, #12]
   12196:	str	r0, [r4, #0]
   12198:	orr.w	r3, r3, #128	; 0x80
   1219c:	strh	r3, [r4, #12]
   1219e:	ldr	r3, [sp, #0]
   121a0:	str	r3, [r4, #20]
   121a2:	ldr	r3, [sp, #4]
   121a4:	str	r0, [r4, #16]
   121a6:	cbz	r3, 121c0 <__smakebuf_r+0x70>
   121a8:	ldrsh.w	r1, [r4, #14]
   121ac:	mov	r0, r6
   121ae:	bl	121ec <_isatty_r>
   121b2:	cbz	r0, 121c0 <__smakebuf_r+0x70>
   121b4:	ldrh	r3, [r4, #12]
   121b6:	bic.w	r3, r3, #3
   121ba:	orr.w	r3, r3, #1
   121be:	strh	r3, [r4, #12]
   121c0:	ldrh	r3, [r4, #12]
   121c2:	orrs	r5, r3
   121c4:	strh	r5, [r4, #12]
   121c6:	b.n	12168 <__smakebuf_r+0x18>

000121c8 <_fstat_r>:
   121c8:	push	{r3, r4, r5, lr}
   121ca:	ldr	r5, [pc, #28]	; (121e8 <_fstat_r+0x20>)
   121cc:	movs	r3, #0
   121ce:	mov	r4, r0
   121d0:	mov	r0, r1
   121d2:	mov	r1, r2
   121d4:	str	r3, [r5, #0]
   121d6:	bl	bec6 <_fstat>
   121da:	adds	r3, r0, #1
   121dc:	bne.n	121e4 <_fstat_r+0x1c>
   121de:	ldr	r3, [r5, #0]
   121e0:	cbz	r3, 121e4 <_fstat_r+0x1c>
   121e2:	str	r3, [r4, #0]
   121e4:	pop	{r3, r4, r5, pc}
   121e6:	nop
   121e8:	.word	0x20020ba4

000121ec <_isatty_r>:
   121ec:	push	{r3, r4, r5, lr}
   121ee:	ldr	r5, [pc, #24]	; (12208 <_isatty_r+0x1c>)
   121f0:	movs	r3, #0
   121f2:	mov	r4, r0
   121f4:	mov	r0, r1
   121f6:	str	r3, [r5, #0]
   121f8:	bl	bed0 <_isatty>
   121fc:	adds	r3, r0, #1
   121fe:	bne.n	12206 <_isatty_r+0x1a>
   12200:	ldr	r3, [r5, #0]
   12202:	cbz	r3, 12206 <_isatty_r+0x1a>
   12204:	str	r3, [r4, #0]
   12206:	pop	{r3, r4, r5, pc}
   12208:	.word	0x20020ba4

0001220c <__aeabi_drsub>:
   1220c:	eor.w	r1, r1, #2147483648	; 0x80000000
   12210:	b.n	12218 <__adddf3>
   12212:	nop

00012214 <__aeabi_dsub>:
   12214:	eor.w	r3, r3, #2147483648	; 0x80000000

00012218 <__adddf3>:
   12218:	push	{r4, r5, lr}
   1221a:	mov.w	r4, r1, lsl #1
   1221e:	mov.w	r5, r3, lsl #1
   12222:	teq	r4, r5
   12226:	it	eq
   12228:	teqeq	r0, r2
   1222c:	itttt	ne
   1222e:	orrsne.w	ip, r4, r0
   12232:	orrsne.w	ip, r5, r2
   12236:	mvnsne.w	ip, r4, asr #21
   1223a:	mvnsne.w	ip, r5, asr #21
   1223e:	beq.w	12406 <__adddf3+0x1ee>
   12242:	mov.w	r4, r4, lsr #21
   12246:	rsbs	r5, r4, r5, lsr #21
   1224a:	it	lt
   1224c:	neglt	r5, r5
   1224e:	ble.n	1226a <__adddf3+0x52>
   12250:	add	r4, r5
   12252:	eor.w	r2, r0, r2
   12256:	eor.w	r3, r1, r3
   1225a:	eor.w	r0, r2, r0
   1225e:	eor.w	r1, r3, r1
   12262:	eor.w	r2, r0, r2
   12266:	eor.w	r3, r1, r3
   1226a:	cmp	r5, #54	; 0x36
   1226c:	it	hi
   1226e:	pophi	{r4, r5, pc}
   12270:	tst.w	r1, #2147483648	; 0x80000000
   12274:	mov.w	r1, r1, lsl #12
   12278:	mov.w	ip, #1048576	; 0x100000
   1227c:	orr.w	r1, ip, r1, lsr #12
   12280:	beq.n	12288 <__adddf3+0x70>
   12282:	negs	r0, r0
   12284:	sbc.w	r1, r1, r1, lsl #1
   12288:	tst.w	r3, #2147483648	; 0x80000000
   1228c:	mov.w	r3, r3, lsl #12
   12290:	orr.w	r3, ip, r3, lsr #12
   12294:	beq.n	1229c <__adddf3+0x84>
   12296:	negs	r2, r2
   12298:	sbc.w	r3, r3, r3, lsl #1
   1229c:	teq	r4, r5
   122a0:	beq.w	123f2 <__adddf3+0x1da>
   122a4:	sub.w	r4, r4, #1
   122a8:	rsbs	lr, r5, #32
   122ac:	blt.n	122ca <__adddf3+0xb2>
   122ae:	lsl.w	ip, r2, lr
   122b2:	lsr.w	r2, r2, r5
   122b6:	adds	r0, r0, r2
   122b8:	adc.w	r1, r1, #0
   122bc:	lsl.w	r2, r3, lr
   122c0:	adds	r0, r0, r2
   122c2:	asr.w	r3, r3, r5
   122c6:	adcs	r1, r3
   122c8:	b.n	122e8 <__adddf3+0xd0>
   122ca:	sub.w	r5, r5, #32
   122ce:	add.w	lr, lr, #32
   122d2:	cmp	r2, #1
   122d4:	lsl.w	ip, r3, lr
   122d8:	it	cs
   122da:	orrcs.w	ip, ip, #2
   122de:	asr.w	r3, r3, r5
   122e2:	adds	r0, r0, r3
   122e4:	adcs.w	r1, r1, r3, asr #31
   122e8:	and.w	r5, r1, #2147483648	; 0x80000000
   122ec:	bpl.n	122fe <__adddf3+0xe6>
   122ee:	mov.w	lr, #0
   122f2:	rsbs	ip, ip, #0
   122f6:	sbcs.w	r0, lr, r0
   122fa:	sbc.w	r1, lr, r1
   122fe:	cmp.w	r1, #1048576	; 0x100000
   12302:	bcc.n	1233c <__adddf3+0x124>
   12304:	cmp.w	r1, #2097152	; 0x200000
   12308:	bcc.n	12324 <__adddf3+0x10c>
   1230a:	lsrs	r1, r1, #1
   1230c:	movs.w	r0, r0, rrx
   12310:	mov.w	ip, ip, rrx
   12314:	add.w	r4, r4, #1
   12318:	mov.w	r2, r4, lsl #21
   1231c:	cmn.w	r2, #4194304	; 0x400000
   12320:	bcs.w	12458 <__adddf3+0x240>
   12324:	cmp.w	ip, #2147483648	; 0x80000000
   12328:	it	eq
   1232a:	movseq.w	ip, r0, lsr #1
   1232e:	adcs.w	r0, r0, #0
   12332:	adc.w	r1, r1, r4, lsl #20
   12336:	orr.w	r1, r1, r5
   1233a:	pop	{r4, r5, pc}
   1233c:	movs.w	ip, ip, lsl #1
   12340:	adcs	r0, r0
   12342:	adc.w	r1, r1, r1
   12346:	subs	r4, #1
   12348:	it	cs
   1234a:	cmpcs.w	r1, #1048576	; 0x100000
   1234e:	bcs.n	12324 <__adddf3+0x10c>
   12350:	teq	r1, #0
   12354:	itt	eq
   12356:	moveq	r1, r0
   12358:	moveq	r0, #0
   1235a:	clz	r3, r1
   1235e:	it	eq
   12360:	addeq	r3, #32
   12362:	sub.w	r3, r3, #11
   12366:	subs.w	r2, r3, #32
   1236a:	bge.n	12386 <__adddf3+0x16e>
   1236c:	adds	r2, #12
   1236e:	ble.n	12382 <__adddf3+0x16a>
   12370:	add.w	ip, r2, #20
   12374:	rsb	r2, r2, #12
   12378:	lsl.w	r0, r1, ip
   1237c:	lsr.w	r1, r1, r2
   12380:	b.n	1239c <__adddf3+0x184>
   12382:	add.w	r2, r2, #20
   12386:	it	le
   12388:	rsble	ip, r2, #32
   1238c:	lsl.w	r1, r1, r2
   12390:	lsr.w	ip, r0, ip
   12394:	itt	le
   12396:	orrle.w	r1, r1, ip
   1239a:	lslle	r0, r2
   1239c:	subs	r4, r4, r3
   1239e:	ittt	ge
   123a0:	addge.w	r1, r1, r4, lsl #20
   123a4:	orrge	r1, r5
   123a6:	popge	{r4, r5, pc}
   123a8:	mvn.w	r4, r4
   123ac:	subs	r4, #31
   123ae:	bge.n	123ea <__adddf3+0x1d2>
   123b0:	adds	r4, #12
   123b2:	bgt.n	123d2 <__adddf3+0x1ba>
   123b4:	add.w	r4, r4, #20
   123b8:	rsb	r2, r4, #32
   123bc:	lsr.w	r0, r0, r4
   123c0:	lsl.w	r3, r1, r2
   123c4:	orr.w	r0, r0, r3
   123c8:	lsr.w	r3, r1, r4
   123cc:	orr.w	r1, r5, r3
   123d0:	pop	{r4, r5, pc}
   123d2:	rsb	r4, r4, #12
   123d6:	rsb	r2, r4, #32
   123da:	lsr.w	r0, r0, r2
   123de:	lsl.w	r3, r1, r4
   123e2:	orr.w	r0, r0, r3
   123e6:	mov	r1, r5
   123e8:	pop	{r4, r5, pc}
   123ea:	lsr.w	r0, r1, r4
   123ee:	mov	r1, r5
   123f0:	pop	{r4, r5, pc}
   123f2:	teq	r4, #0
   123f6:	eor.w	r3, r3, #1048576	; 0x100000
   123fa:	itte	eq
   123fc:	eoreq.w	r1, r1, #1048576	; 0x100000
   12400:	addeq	r4, #1
   12402:	subne	r5, #1
   12404:	b.n	122a4 <__adddf3+0x8c>
   12406:	mvns.w	ip, r4, asr #21
   1240a:	it	ne
   1240c:	mvnsne.w	ip, r5, asr #21
   12410:	beq.n	12466 <__adddf3+0x24e>
   12412:	teq	r4, r5
   12416:	it	eq
   12418:	teqeq	r0, r2
   1241c:	beq.n	1242a <__adddf3+0x212>
   1241e:	orrs.w	ip, r4, r0
   12422:	itt	eq
   12424:	moveq	r1, r3
   12426:	moveq	r0, r2
   12428:	pop	{r4, r5, pc}
   1242a:	teq	r1, r3
   1242e:	ittt	ne
   12430:	movne	r1, #0
   12432:	movne	r0, #0
   12434:	popne	{r4, r5, pc}
   12436:	movs.w	ip, r4, lsr #21
   1243a:	bne.n	12448 <__adddf3+0x230>
   1243c:	lsls	r0, r0, #1
   1243e:	adcs	r1, r1
   12440:	it	cs
   12442:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   12446:	pop	{r4, r5, pc}
   12448:	adds.w	r4, r4, #4194304	; 0x400000
   1244c:	itt	cc
   1244e:	addcc.w	r1, r1, #1048576	; 0x100000
   12452:	popcc	{r4, r5, pc}
   12454:	and.w	r5, r1, #2147483648	; 0x80000000
   12458:	orr.w	r1, r5, #2130706432	; 0x7f000000
   1245c:	orr.w	r1, r1, #15728640	; 0xf00000
   12460:	mov.w	r0, #0
   12464:	pop	{r4, r5, pc}
   12466:	mvns.w	ip, r4, asr #21
   1246a:	itte	ne
   1246c:	movne	r1, r3
   1246e:	movne	r0, r2
   12470:	mvnseq.w	ip, r5, asr #21
   12474:	itt	ne
   12476:	movne	r3, r1
   12478:	movne	r2, r0
   1247a:	orrs.w	r4, r0, r1, lsl #12
   1247e:	itte	eq
   12480:	orrseq.w	r5, r2, r3, lsl #12
   12484:	teqeq	r1, r3
   12488:	orrne.w	r1, r1, #524288	; 0x80000
   1248c:	pop	{r4, r5, pc}
   1248e:	nop

00012490 <__aeabi_ui2d>:
   12490:	teq	r0, #0
   12494:	itt	eq
   12496:	moveq	r1, #0
   12498:	bxeq	lr
   1249a:	push	{r4, r5, lr}
   1249c:	mov.w	r4, #1024	; 0x400
   124a0:	add.w	r4, r4, #50	; 0x32
   124a4:	mov.w	r5, #0
   124a8:	mov.w	r1, #0
   124ac:	b.n	12350 <__adddf3+0x138>
   124ae:	nop

000124b0 <__aeabi_i2d>:
   124b0:	teq	r0, #0
   124b4:	itt	eq
   124b6:	moveq	r1, #0
   124b8:	bxeq	lr
   124ba:	push	{r4, r5, lr}
   124bc:	mov.w	r4, #1024	; 0x400
   124c0:	add.w	r4, r4, #50	; 0x32
   124c4:	ands.w	r5, r0, #2147483648	; 0x80000000
   124c8:	it	mi
   124ca:	negmi	r0, r0
   124cc:	mov.w	r1, #0
   124d0:	b.n	12350 <__adddf3+0x138>
   124d2:	nop

000124d4 <__aeabi_f2d>:
   124d4:	lsls	r2, r0, #1
   124d6:	mov.w	r1, r2, asr #3
   124da:	mov.w	r1, r1, rrx
   124de:	mov.w	r0, r2, lsl #28
   124e2:	itttt	ne
   124e4:	andsne.w	r3, r2, #4278190080	; 0xff000000
   124e8:	teqne	r3, #4278190080	; 0xff000000
   124ec:	eorne.w	r1, r1, #939524096	; 0x38000000
   124f0:	bxne	lr
   124f2:	bics.w	r2, r2, #4278190080	; 0xff000000
   124f6:	it	eq
   124f8:	bxeq	lr
   124fa:	teq	r3, #4278190080	; 0xff000000
   124fe:	itt	eq
   12500:	orreq.w	r1, r1, #524288	; 0x80000
   12504:	bxeq	lr
   12506:	push	{r4, r5, lr}
   12508:	mov.w	r4, #896	; 0x380
   1250c:	and.w	r5, r1, #2147483648	; 0x80000000
   12510:	bic.w	r1, r1, #2147483648	; 0x80000000
   12514:	b.n	12350 <__adddf3+0x138>
   12516:	nop

00012518 <__aeabi_ul2d>:
   12518:	orrs.w	r2, r0, r1
   1251c:	it	eq
   1251e:	bxeq	lr
   12520:	push	{r4, r5, lr}
   12522:	mov.w	r5, #0
   12526:	b.n	1253e <__aeabi_l2d+0x16>

00012528 <__aeabi_l2d>:
   12528:	orrs.w	r2, r0, r1
   1252c:	it	eq
   1252e:	bxeq	lr
   12530:	push	{r4, r5, lr}
   12532:	ands.w	r5, r1, #2147483648	; 0x80000000
   12536:	bpl.n	1253e <__aeabi_l2d+0x16>
   12538:	negs	r0, r0
   1253a:	sbc.w	r1, r1, r1, lsl #1
   1253e:	mov.w	r4, #1024	; 0x400
   12542:	add.w	r4, r4, #50	; 0x32
   12546:	movs.w	ip, r1, lsr #22
   1254a:	beq.w	122fe <__adddf3+0xe6>
   1254e:	mov.w	r2, #3
   12552:	movs.w	ip, ip, lsr #3
   12556:	it	ne
   12558:	addne	r2, #3
   1255a:	movs.w	ip, ip, lsr #3
   1255e:	it	ne
   12560:	addne	r2, #3
   12562:	add.w	r2, r2, ip, lsr #3
   12566:	rsb	r3, r2, #32
   1256a:	lsl.w	ip, r0, r3
   1256e:	lsr.w	r0, r0, r2
   12572:	lsl.w	lr, r1, r3
   12576:	orr.w	r0, r0, lr
   1257a:	lsr.w	r1, r1, r2
   1257e:	add	r4, r2
   12580:	b.n	122fe <__adddf3+0xe6>
   12582:	nop

00012584 <__aeabi_d2lz>:
   12584:	push	{r3, lr}
   12586:	mov	r2, r0
   12588:	mov	r3, r1
   1258a:	vmov	d7, r2, r3
   1258e:	vcmpe.f64	d7, #0.0
   12592:	vmrs	APSR_nzcv, fpscr
   12596:	bmi.n	125a0 <__aeabi_d2lz+0x1c>
   12598:	ldmia.w	sp!, {r3, lr}
   1259c:	b.w	125b8 <__aeabi_d2ulz>
   125a0:	vneg.f64	d7, d7
   125a4:	vmov	r0, r1, d7
   125a8:	bl	125b8 <__aeabi_d2ulz>
   125ac:	negs	r0, r0
   125ae:	sbc.w	r1, r1, r1, lsl #1
   125b2:	pop	{r3, pc}
   125b4:	movs	r0, r0
	...

000125b8 <__aeabi_d2ulz>:
   125b8:	vldr	d6, [pc, #44]	; 125e8 <__aeabi_d2ulz+0x30>
   125bc:	vmov	d7, r0, r1
   125c0:	vldr	d5, [pc, #44]	; 125f0 <__aeabi_d2ulz+0x38>
   125c4:	vmul.f64	d6, d7, d6
   125c8:	vcvt.u32.f64	s12, d6
   125cc:	vcvt.f64.u32	d4, s12
   125d0:	vfms.f64	d7, d4, d5
   125d4:	vcvt.u32.f64	s15, d7
   125d8:	vmov	r1, s12
   125dc:	vmov	r0, s15
   125e0:	bx	lr
   125e2:	nop
   125e4:	nop.w
   125e8:	.word	0x00000000
   125ec:	.word	0x3df00000
   125f0:	.word	0x00000000
   125f4:	.word	0x41f00000

000125f8 <___ZN7TwoWire5beginEv_veneer>:
   125f8:	ldr.w	pc, [pc]	; 125fc <___ZN7TwoWire5beginEv_veneer+0x4>
   125fc:	.word	0x6000176d

00012600 <__usb_init_veneer>:
   12600:	ldr.w	pc, [pc]	; 12604 <__usb_init_veneer+0x4>
   12604:	.word	0x600017b5

00012608 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   12608:	ldr.w	pc, [pc]	; 1260c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1260c:	.word	0x60001f1d

00012610 <___Z14set_audioClockilm_veneer>:
   12610:	ldr.w	pc, [pc]	; 12614 <___Z14set_audioClockilm_veneer+0x4>
   12614:	.word	0x600024d5

00012618 <___init_veneer>:
   12618:	ldr.w	pc, [pc]	; 1261c <___init_veneer+0x4>
   1261c:	.word	0x6000241d

00012620 <___ZN16CrashReportClasscvbEv_veneer>:
   12620:	ldr.w	pc, [pc]	; 12624 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   12624:	.word	0x600023c1

00012628 <___reboot_Teensyduino__veneer>:
   12628:	ldr.w	pc, [pc]	; 1262c <___reboot_Teensyduino__veneer+0x4>
   1262c:	.word	0x60001899

Disassembly of section .fini:

00012630 <_fini>:
   12630:	push	{r3, r4, r5, r6, r7, lr}
   12632:	nop

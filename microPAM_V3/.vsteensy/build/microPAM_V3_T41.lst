
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002540 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000127c0 l    d  .fini	00000000 .fini
000127c4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60017624 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001950 l     F .text.code	00000024 flexspi2_command
60001974 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 Hibernate.cpp
20020244 l     O .bss	00000004 snvs_tmp
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000b32c l     F .text.itcm	000000a0 endpoint0_receive
0000b3cc l     F .text.itcm	0000007c schedule_transfer
0000b448 l     F .text.itcm	00000034 run_callbacks
0000b47c l     F .text.itcm	0000001c usb_endpoint_config
0000b498 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20022235 l     O .bss	00000008 endpoint0_buffer
200213f8 l     O .bss	00000004 endpoint0_notify_mask
20006e00 l     O .bss	00000008 endpoint0_setupdata
200213fc l     O .bss	00000004 endpointN_notify_mask
2002228f l     O .bss	00000008 reply_buffer
200222a9 l     O .bss	00000001 sof_usage
200222b1 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20021530 l     O .bss	00000004 s_hotCount
20021534 l     O .bss	00000004 s_hotTemp
20021538 l     O .bss	00000004 s_hot_ROOM
2002153c l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001eb8 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
20022234 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20021498 l     O .bss	00000000 object.0
60002530 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
000006ec l     F .text.itcm	0000010c _GLOBAL__sub_I_storage
2001f018 l     O .bss	00000004 setup_ready
2001f840 l     O .bss	00000004 termon
2002124c l     O .bss	00000004 have_disk
2002129c l     O .bss	00000004 loop::t0
20021c0c l     O .bss	00000002 loop::mxb
200212a0 l     O .bss	00000004 loop::loopCount
20002244 l     O .data	00000002 loop::status
00000000 l    df *ABS*	00000000 Acq.cpp
00000998 l     F .text.itcm	000000e4 acq_isr()
20200000 l     O .bss.dma	00001000 i2s_buffer
00000d30 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
2001f024 l     O .bss	00000008 dma
20020a48 l     O .bss	00000800 acqBuffer
00000000 l    df *ABS*	00000000 Filing.cpp
00002ef2 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00002f12 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00002f36 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20006e0c l     O .bss	00018000 diskBuffer
000039c0 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
20021cca l     O .bss	00000400 configText
2001ee0c l     O .bss	00000200 fileHeader
2001f834 l     O .bss	00000004 alarm
200220ee l     O .bss	00000050 dirName
20020044 l     O .bss	00000200 wav_hdr
2002213e l     O .bss	00000050 fileName
20021248 l     O .bss	00000004 haveStore
20021298 l     O .bss	00000004 checkEndOfFile(short)::dta
20022192 l     O .bss	00000050 timeStamp()::date_time
2000205c l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
20002269 l     O .data	00000012 device_descriptor
6000278e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000d54 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
00000d74 l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000d9a l     F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]
00000dae l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000dc4 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00000de8 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000dfc l     F .text.itcm	0000003c dbgPrint(unsigned short)
000011b4 l     F .text.itcm	00000060 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001c08 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001f5c l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001f6e l     F .text.itcm	00000006 Print::print(char) [clone .isra.0]
00001f74 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001f98 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001f9c l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001fb0 l     F .text.itcm	00000038 menuGetLine()
00001fe8 l     F .text.itcm	0000001c menuGetString(char*) [clone .isra.0]
00002004 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20021bec l     O .bss	00000020 store
200221e2 l     O .bss	00000028 menuGetLine()::buffer
20001013 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00900000 data_buffer
2001f010 l     O .bss	00000004 queue_busy
2001f82c l     O .bss	00000004 head
2001f830 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
2001f02c l     O .bss	00000800 dout
2001f844 l     O .bss	00000800 outData
20020248 l     O .bss	00000800 tempData
200212a4 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
00003cbc l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
20001007 l     O .data	00000004 regs
2000100b l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20001052 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
000042dc l     F .text.itcm	00000010 txEvent_event
000042ec l     F .text.itcm	00000010 rxEvent_event
000042fc l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00004314 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00004d9e l     F .text.itcm	00000032 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
200026c0 l     O .bss	00000020 rx_event_buffer
2001f01c l     O .bss	00000004 mtp_rxEventcount
2001f020 l     O .bss	00000004 mtp_txEventcount
200026e0 l     O .bss	00000020 rx_event_transfer
200212a8 l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
200212ac l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000afc l     O .data	00000014 propertyList
20000b10 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
200009d0 l     O .data	0000012c lookupTable
20000b38 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00006c30 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000075f0 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
000086b8 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
00009778 l     F .text.itcm	0000002c sdIrs()
000097a4 l     F .text.itcm	00000020 gpioMux(unsigned char)
000097c4 l     F .text.itcm	00000018 isBusyCommandComplete()
000097dc l     F .text.itcm	00000010 isBusyCommandInhibit()
000097ec l     F .text.itcm	00000014 isBusyDat()
00009800 l     F .text.itcm	0000000c isBusyDMA()
0000980c l     F .text.itcm	00000014 isBusyFifoRead()
00009820 l     F .text.itcm	00000014 isBusyFifoWrite()
00009834 l     F .text.itcm	00000018 isBusyTransferComplete()
0000984c l     F .text.itcm	000000a4 setSdclk(unsigned long)
00009954 l     F .text.itcm	00000024 waitTimeout(bool (*)())
00009978 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
000099c4 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
000099f4 l     F .text.itcm	000000d4 initSDHC()
00009ae4 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
00009b4c l     F .text.itcm	00000020 statusCMD13()
00009b6c l     F .text.itcm	00000010 isBusyCMD13()
00009b80 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009bd8 l     F .text.itcm	00000030 waitDmaStatus()
00009c08 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009f00 l     F .text.itcm	0000005c waitTransferComplete()
0000a168 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
200220ca l     O .bss	00000001 m_initDone
2001f00c l     O .bss	00000004 m_sdClkKhz
200220cb l     O .bss	00000001 m_version2
2001f014 l     O .bss	00000004 m_errorLine
200220cc l     O .bss	00000001 m_highCapacity
200220cd l     O .bss	00000001 m_transferActive
200220ce l     O .bss	00000010 m_cid
200220de l     O .bss	00000010 m_csd
2001f838 l     O .bss	00000004 m_ocr
2001f83c l     O .bss	00000004 m_rca
20021250 l     O .bss	00000004 m_busyFcn
2002218e l     O .bss	00000001 m_dmaBusy
20021254 l     O .bss	00000004 m_irqstat
20002268 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000a6a8 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000aa10 l     F .text.itcm	00000060 rx_queue_transfer
20003b80 l     O .bss	00001000 rx_buffer
0000aa70 l     F .text.itcm	000000ac rx_event
0000ab1c l     F .text.itcm	0000008c usb_serial_flush_callback
20004e00 l     O .bss	00002000 txbuffer
20021518 l     O .bss	00000004 rx_available
20021c1e l     O .bss	00000010 rx_count
20022297 l     O .bss	00000001 rx_head
20021c2e l     O .bss	00000010 rx_index
20022299 l     O .bss	00000009 rx_list
20021c3e l     O .bss	00000002 rx_packet_size
200222a7 l     O .bss	00000001 rx_tail
20004b80 l     O .bss	00000100 rx_transfer
200222aa l     O .bss	00000001 transmit_previous_timeout
20021cc4 l     O .bss	00000002 tx_available
200222ab l     O .bss	00000001 tx_head
200222ad l     O .bss	00000001 tx_noautoflush
20021cc6 l     O .bss	00000002 tx_packet_size
20004d00 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000c088 l     F .text.itcm	00000058 flash_wait
2002223e l     O .bss	00000001 initialized
20021c42 l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c720 l     F .text.itcm	00000010 txEvent_event
0000c730 l     F .text.itcm	0000003c rx_event
0000c76c l     F .text.itcm	00000060 rx_queue_transfer
20022298 l     O .bss	00000001 rx_head
200222a2 l     O .bss	00000005 rx_list
2002151c l     O .bss	00000014 rx_list_transfer_len
20021c40 l     O .bss	00000002 rx_packet_size
200222a8 l     O .bss	00000001 rx_tail
20004c80 l     O .bss	00000080 rx_transfer
200222ac l     O .bss	00000001 tx_head
20021cc8 l     O .bss	00000002 tx_packet_size
20004d80 l     O .bss	00000080 tx_transfer
20201000 l     O .bss.dma	00000800 rx_buffer
20201800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20022191 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000cd6a l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000d330 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000d4d2 l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000e078 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000ee2c l     F .text.itcm	00000048 std
0000ee74 l     F .text.itcm	00000018 stdio_exit_handler
0000ee8c l     F .text.itcm	00000040 cleanup_stdio
0000eecc l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000f4bc l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
00010140 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0001066c l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00011dc4 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
00011ed0 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00012778 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00012780 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00012788 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
00012790 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00012798 l     F .text.itcm	00000008 __usb_init_veneer
000127a0 l     F .text.itcm	00000008 ___init_veneer
000127a8 l     F .text.itcm	00000008 ___Z12do_hibernatev_veneer
000127b0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
60002490 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002498 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600024a0 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
600024a8 l     F .text.code	00000008 __set_arm_clock_veneer
600024b0 l     F .text.code	00000008 __delay_veneer
600024b8 l     F .text.code	00000008 __main_veneer
600024c0 l     F .text.code	00000008 ___Z12estAlarmTimem_veneer
600024c8 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
600024d0 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
600024d8 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
600024e0 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
600024e8 l     F .text.code	00000008 __usb_init_serialnumber_veneer
600024f0 l     F .text.code	00000008 __memset_veneer
600024f8 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
60002500 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
60002508 l     F .text.code	00000008 __pwm_init_veneer
60002510 l     F .text.code	00000008 ____libc_init_array_veneer
60002518 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002520 l     F .text.code	00000008 __sm_set_pool_veneer
60002528 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
00011168 g     F .text.itcm	00000010 _malloc_usable_size_r
00007620  w    F .text.itcm	00000026 FatPartition::cacheSync()
60002540 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000e1aa g     F .text.itcm	000000a4 __cvt
00005d78 g     F .text.itcm	000000a8 toUpcase(unsigned short)
0000116c g     F .text.itcm	0000002e MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
0001187c g     F .text.itcm	000000b4 _scanf_chars
00002de8 g     F .text.itcm	0000004c pushData(unsigned long*)
0000adc4 g     F .text.itcm	00000014 usb_serial_available
00011126 g     F .text.itcm	00000042 __any_on
0001236c g     F .text.itcm	00000020 _isatty_r
0000f3d4 g     F .text.itcm	00000010 strcpy
6000165c g     F .text.code	00000064 do_hibernate()
000081fc g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600019a4 g     F .text.code	00000002 startup_default_late_hook
0000f2f0 g     F .text.itcm	00000024 _lseek_r
00009ca0 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000caa0  w    F .text.itcm	00000074 yield
00002a2c g     F .text.itcm	00000024 configGetInt16(char*)
000090e4  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
200214b8 g     O .bss	00000060 proc_stat
20021be8 g     O .bss	00000004 usb_timer1_callback
0000446c g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
000044c4 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00008058 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000ce46 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
20021a18 g     O .bss	000001b4 storage
600026a0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20021c1c g     O .bss	00000002 proc
60001abc g     F .text.code	00000274 configure_external_ram
0000904e  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001ddc g     O .data	00000140 Wire1
00009738  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000126a8 g     F .text.itcm	0000005a .hidden __floatdidf
00008834 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
200214b0 g     O .bss	00000004 procCount
00008564 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
2002223f g     O .bss	00000028 k_string
20021258 g     O .bss	00000004 FsDateTime::callback
600016c0 g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
00008958 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00009520 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000cde0 g     F .text.itcm	0000001a Print::println()
00005a8c g     F .text.itcm	00000098 TwoWire::isr()
20000454 g     O .data	00000070 vtable for DedicatedSpiCard
200214b4 g     O .bss	00000004 procMiss
0000f0ea g     F .text.itcm	00000024 __sseek
0000ef20 g     F .text.itcm	00000030 __sinit
000062a4 g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00011194 g     F .text.itcm	00000094 fcvtbuf
00012158 g     F .text.itcm	0000007a __swbuf_r
00004c50 g     F .text.itcm	00000044 usb_init_events
000043ae g     F .text.itcm	0000001c MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000d468 g     F .text.itcm	0000000c __malloc_unlock
0000401e g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
20021290 g     O .bss	00000004 FsVolume::m_cwv
20021494 g     O .bss	00000004 num_bytes
00003fd8 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002a24 g     F .text.itcm	00000008 getStore()
00007c08 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20006e08 g     O .bss	00000004 SerNum
20022190 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00009042  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60002434 g     F .text.code	0000004c analog_init
0000e06c g     F .text.itcm	0000000c _strtod_r
00001464 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
000036e0 g     F .text.itcm	00000010 estAlarmTime(unsigned long)
0000f116 g     F .text.itcm	0000004a _vdprintf_r
00007cea g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
000101e4 g     F .text.itcm	0000002a __hexdig_fun
00009372 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000c0e0 g     F .text.itcm	00000044 eeprom_initialize
0000385c g     F .text.itcm	00000164 saveData(short)
20021cc0 g     O .bss	00000002 shift
20001c88 g     O .data	00000004 F_CPU_ACTUAL
0000f1f4 g     F .text.itcm	00000034 memmove
00001492 g     F .text.itcm	0000004c MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20021484 g     O .bss	00000004 max_stat
0000ef8c g     F .text.itcm	00000068 snprintf
00002d50 g     F .text.itcm	0000003c hibernate_init()
0000a628 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
00010814 g     F .text.itcm	00000080 _Balloc
000127cc g       .ARM.exidx	00000000 __exidx_end
00008476 g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
2002218f g     O .bss	00000001 EventResponder::runningFromYield
0000a81e g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00008f38 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000c514 g     F .text.itcm	00000060 tempmonGetTemp
0000c454 g     F .text.itcm	0000001e smalloc_verify_pool
0000f37c g     F .text.itcm	0000000c __errno
00002410 g     F .text.itcm	000000ac saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
20021268 g     O .bss	00000004 EventResponder::firstInterrupt
0000bb20 g     F .text.itcm	00000028 usb_transfer_status
00004636 g     F .text.itcm	0000004c MTPD::GetObjectHandles(unsigned long, unsigned long)
0000c4a6 g     F .text.itcm	0000006a sm_set_pool
00003354 g     F .text.itcm	00000014 newFolder(int)
20021270 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00004268 g     F .text.itcm	00000004 rtcGetTimestamp()
200213f0 g     O .bss	00000004 __stdio_exit_handler
00000508  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00002aa4 g     F .text.itcm	00000298 decodeConfigfromFile(char*)
00006bcc g     F .text.itcm	00000018 ExFatPartition::rootLength()
00012704 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0000ccdc  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00012348 g     F .text.itcm	00000024 _fstat_r
200005b4 g     O .data	00000370 digital_pin_to_info_PGM
20021400 g     O .bss	00000004 errno
0000a828 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00006950 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
600025d8  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
00011930 g     F .text.itcm	000001e8 _scanf_i
0000f0ae g     F .text.itcm	00000004 __seofread
000127c8 g       .text.itcm	00000000 _etext
00008c74 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
000098fc g     F .text.itcm	0000000c SdioCard::errorData() const
0000109a g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00002f94 g     F .text.itcm	0000007c loadConfigfromFile()
00004282 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
0000441a g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001ade g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00009f5c g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00006aec g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002798 g       *ABS*	00000000 _stextload
000002b8 g     F .text.itcm	00000208 loop
0000c618 g     F .text.itcm	00000072 flexpwm_init
0000c1a4 g     F .text.itcm	000000dc eepromemu_flash_write
600019a6 g     F .text.code	00000004 startup_debug_reset
0000ba34 g     F .text.itcm	00000040 usb_config_rx
0000487c g     F .text.itcm	00000100 MTPD::GetStorageInfo(unsigned long)
00006074 g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
0000a460 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
00005894 g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
0000406a g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20021264 g     O .bss	00000004 EventResponder::lastInterrupt
00008dd8 g     F .text.itcm	0000002a FsBaseFile::close()
0000f160 g     F .text.itcm	00000014 vdiprintf
0000565e g     F .text.itcm	00000048 SPIClass::end()
0000a8dc g     F .text.itcm	00000134 memcpy
000106b8 g     F .text.itcm	00000136 __hexnan
00001618 g     F .text.itcm	000000d4 MTPStorage_SD::removeFile(unsigned long, char*)
000095e8 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00005bc0 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000133e g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002400 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
00003188 g     F .text.itcm	00000088 wavHeaderInit(long, long, long, int)
00006a30 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
000012b8 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000078ca g     F .text.itcm	00000026 FatFile::peek()
000024bc g     F .text.itcm	0000006c menu1(short)
2002148c g     O .bss	00000004 nbuf
000112dc g     F .text.itcm	000001fc _svfprintf_r
00012630 g     F .text.itcm	00000022 .hidden __floatsidf
20021bd0 g     O .bss	00000004 systick_millis_count
000070d0 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c904 g     F .text.itcm	00000030 usb_mtp_available
000004c0 g     F .text.itcm	00000048 setup1()
00005860 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000f174 g     F .text.itcm	00000060 _vasniprintf_r
00004fd0 g     F .text.itcm	00000638 MTPD::loop()
0000d014 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200222af g     O .bss	00000001 usb_configuration
00009038  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000c472 g     F .text.itcm	00000034 sm_align_pool
0000a68c g     F .text.itcm	0000001c SdioCard::syncDevice()
0000a074 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
000078f0 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
00011080 g     F .text.itcm	00000060 __ratio
000090f2 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
600026a0  w    O .text.progmem	00000018 usb_string_manufacturer_name
60002678 g     O .text.progmem	00000008 usb_string_mtp
0000d310 g     F .text.itcm	00000010 malloc
00000244 g     F .text.itcm	00000010 reboot()
00003fd8 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
60002628  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
200004ec  w    O .data	00000024 vtable for FsFile
0000c006  w    F .text.itcm	0000000a _fstat
000056b2  w    F .text.itcm	0000001e TwoWire::read()
00011d5c g     F .text.itcm	0000003c __assert_func
00004eac g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
000042d8 g     F .text.itcm	00000002 XRTCprintTime()
20000328 g     O .data	000000c8 __mprec_tens
60001818 g     F .text.code	000000e4 usb_init
00008e02 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
20021a14 g     O .bss	00000004 sessionID_
0000903e  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
0000c044 g     F .text.itcm	00000044 rtc_set
00011552 g     F .text.itcm	0000003a __ssrefill_r
20021bd4 g     O .bss	00000004 systick_safe_read
0000574c g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00007164 g     F .text.itcm	000000ca ExFatFile::truncate()
00003d38 g     F .text.itcm	00000008 hpPower(int)
20002064 g     O .data	00000000 .hidden __dso_handle
0000c280 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00012610 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000f2c8 g     F .text.itcm	00000008 _localeconv_r
2000223c g     O .data	00000004 sd_str
0000a7ca g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
00010a94 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000c7cc g     F .text.itcm	000000a4 usb_mtp_configure
20002250 g     O .data	00000002 t_on
60002725 g     O .text.progmem	00000069 usb_config_descriptor_480
0000d044 g     F .text.itcm	000002c8 .hidden __udivmoddi4
000047a0 g     F .text.itcm	000000dc MTPD::getObjectPropValue(unsigned long, unsigned long)
0001238c g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a818 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00007646 g     F .text.itcm	00000036 FatFile::addCluster()
0000f338 g     F .text.itcm	00000020 _sbrk_r
20021c12 g     O .bss	00000002 d_rep
00009ac8 g     F .text.itcm	0000001c SdioCard::type() const
000043d4 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
600019a0 g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000ae38 g     F .text.itcm	0000001e usb_serial_getchar
00000e56  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20021bd8 g     O .bss	00000008 usb_cdc_line_coding
0000c574 g     F .text.itcm	00000040 digitalWrite
00008254  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
2002126c g     O .bss	00000004 EventResponder::lastYield
0000604e g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000f314 g     F .text.itcm	00000024 _read_r
0000cc3c  w    F .text.itcm	00000024 Print::write(char const*)
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
000090dc  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20021404 g     O .bss	00000010 extmem_smalloc_pool
00009468 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c5b4 g     F .text.itcm	00000064 pinMode
000015ea g     F .text.itcm	0000002e MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000f6c  w    F .text.itcm	0000001c FsFile::FsFile()
0000ced8 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00012654 g     F .text.itcm	00000042 .hidden __extendsfdf2
0001158c g     F .text.itcm	000002f0 __ssvfscanf_r
0000cca0  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000f52  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00012398 g     F .text.itcm	00000276 .hidden __adddf3
600016f4 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20001f1c g     O .data	00000140 Wire2
00004770 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
000043ca g     F .text.itcm	00000008 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017800 g     O .text.csf	00000c00 hab_csf
00004430 g     F .text.itcm	0000003a MTPD::writestring(char const*)
000084bc g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00010f38 g     F .text.itcm	00000094 __b2d
00003d74 g     F .text.itcm	000001c0 adc_init()
000127c4 g       .ARM.exidx	00000000 __exidx_start
70900000 g       .bss.extram	00000000 _extram_end
0000098c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000cc68  w    F .text.itcm	00000008 Print::print(unsigned char)
0000c010  w    F .text.itcm	00000004 _isatty
20021c10 g     O .bss	00000002 d_0
20021260 g     O .bss	00000004 EventResponder::firstYield
00005c54 g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001f6  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000d474 g     F .text.itcm	0000005e _realloc_r
00002a98 g     F .text.itcm	0000000a skipEOL(char*)
0000f388 g     F .text.itcm	00000048 __libc_init_array
0000bb90 g     F .text.itcm	00000248 dtostrf
000056a6  w    F .text.itcm	0000000c TwoWire::available()
0000679a g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009908 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00006f1a g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001332 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001bc4 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00003ffc g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
00010964 g     F .text.itcm	00000094 __s2b
000093ea  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000c01a  w    F .text.itcm	00000004 abort
00005978 g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000ccc4  w    F .text.itcm	00000004 usb_serial_class::clear()
00012610 g     F .text.itcm	0000001e .hidden __floatunsidf
0000bfd0  w    F .text.itcm	0000002c _sbrk
60014f64 g       *ABS*	00000000 _sdataload
00010da0 g     F .text.itcm	00000038 __mcmp
0000194c g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20002060 g     O .data	00000004 __brkval
200222ae g     O .bss	00000001 usb_cdc_line_rtsdtr
60002480 g     F .text.code	00000000 _init
0000aba8 g     F .text.itcm	00000002 usb_serial_reset
000076ec g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000c334 g     F .text.itcm	00000104 eeprom_write_byte
00001044  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00012738 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
600026bc g     O .text.progmem	00000069 usb_config_descriptor_12
20000510 g     O .data	00000024 vtable for TwoWire
0000d508 g     F .text.itcm	00000b64 _strtod_l
00010690 g     F .text.itcm	00000028 __match
200222e0 g       .bss	00000000 _ebss
00009d1c g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000044d8 g     F .text.itcm	0000013c MTPD::WriteDescriptor()
00002f48  w    F .text.itcm	00000036 FsBaseFile::read()
20002234 g     O .data	00000004 propertyListNum
60001744 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
000109f8 g     F .text.itcm	00000040 __hi0bits
00005fc2 g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001f0c g     F .text.code	00000074 CrashReportClass::clear()
00005b30 g     F .text.itcm	0000000c lpi2c3_isr()
00006fca g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20202080 g       .bss.dma	00000000 _heap_start
00004614 g     F .text.itcm	00000022 MTPD::WriteStorageIDs()
00001520 g     F .text.itcm	000000b4 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)
2002220a g     O .bss	00000001 __lock___malloc_recursive_mutex
2000224c g     O .data	00000002 h_4
00001d40 g     F .text.itcm	000001d4 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
00006be4 g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002588  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
00000210 g     F .text.itcm	00000014 stopUSB()
0000098c  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
200212b8 g     O .bss	00000138 __sf
20001c80 g     O .data	00000004 CrashReport
20021548 g     O .bss	000004cc sdx
000092e8 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
0000057c g     F .text.itcm	00000170 storage_configure()
00002a70 g     F .text.itcm	00000028 configGetString(char*, char*)
00000003 g       *ABS*	00000000 _itcm_block_count
20002720 g     O .bss	00000020 endpoint0_transfer_data
00007456 g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00005d2a g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000d004 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000c6c0 g     F .text.itcm	00000060 pwm_init
00011eac g     F .text.itcm	00000024 fprintf
00012398 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20021414 g     O .bss	00000050 file
00004d10 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
2000227b g     O .data	00000001 usb_mtp_status
60018400 g       .text.csf	00000000 __text_csf_end
60001d30 g     F .text.code	0000005c usb_pll_start
00010c14 g     F .text.itcm	000000b4 __pow5mult
000079ce g     F .text.itcm	0000004c FatFile::rmdir()
20000448 g     O .data	0000000c vtable for CrashReportClass
00012698 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00005b3c g     F .text.itcm	0000000c lpi2c4_isr()
00002a50 g     F .text.itcm	00000020 configGetInt32(char*)
000083f4 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
00009776  w    F .text.itcm	00000002 SdioCard::end()
0000ef8c g     F .text.itcm	00000068 sniprintf
20002700 g     O .bss	00000020 endpoint0_transfer_ack
20021be0 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000bae0 g     F .text.itcm	00000024 usb_transmit
0000cc78  w    F .text.itcm	00000014 Print::println(char const*)
0000cb50 g     F .text.itcm	00000020 systick_isr
0000f3d2 g     F .text.itcm	00000002 __retarget_lock_release_recursive
0000426c g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
000043e4 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001c8c g     O .data	00000010 Serial
20021464 g     O .bss	00000020 logBuffer
00011228 g     F .text.itcm	000000b4 __ssputs_r
00002408 g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000cce4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008ed8 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
600019a0  w    F .text.code	00000002 startup_early_hook
00006c84 g     F .text.itcm	00000094 ExFatFile::addCluster()
0000924c g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000ad80 g     F .text.itcm	00000044 usb_serial_peekchar
00011efe g     F .text.itcm	00000024 __sfputs_r
0000ef08 g     F .text.itcm	0000000c __sfp_lock_acquire
0000f3f0 g     F .text.itcm	00000000 memchr
00008324 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000e2d0  w    F .text.itcm	00000434 _printf_float
0000b0dc g     F .text.itcm	00000250 set_arm_clock
20021bcc g     O .bss	00000004 systick_cycle_count
20002252 g     O .data	00000016 usb_string_serial_number_default
000100a8 g     F .text.itcm	00000098 _free_r
00009556 g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
0000961a g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
0000a000 g     F .text.itcm	00000074 SdioCard::readStop()
00000e6e  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00009046  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a02 g     F .text.itcm	000000dc MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000ccd4  w    F .text.itcm	00000004 usb_serial_class::flush()
000114d8 g     F .text.itcm	0000007a _sungetc_r
00012394 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000cccc  w    F .text.itcm	00000004 usb_serial_class::read()
00008d20 g     F .text.itcm	000000b8 FatFile::remove()
00012698 g     F .text.itcm	0000006a .hidden __floatundidf
00000f6c  w    F .text.itcm	0000001c FsFile::FsFile()
0000c014  w    F .text.itcm	00000006 _lseek
00003f70 g     F .text.itcm	00000068 adcStatus()
00010cc8 g     F .text.itcm	000000d8 __lshift
00003460 g     F .text.itcm	00000280 storeData(short)
00007e24 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000bab4 g     F .text.itcm	0000002c usb_prepare_transfer
0000904a  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000be50 g     F .text.itcm	00000180 unused_interrupt_vector
60001d8c g     F .text.code	0000012c tempmon_init
20021be4 g     O .bss	00000004 usb_timer0_callback
00008768 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000f174 g     F .text.itcm	00000060 _vasnprintf_r
00002d3c g     F .text.itcm	00000014 powerDown()
00009074 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000066d4 g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000c124 g     F .text.itcm	00000064 eeprom_read_byte
0000f26e g     F .text.itcm	00000036 strlcpy
0000f2a4 g     F .text.itcm	00000024 strncmp
000086d6 g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00007012 g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000add8 g     F .text.itcm	00000060 usb_serial_flush_input
20002230 g     O .data	00000004 fsamp
00006a8a g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001258 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000fe0  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
00010ac0 g     F .text.itcm	00000154 __multiply
00002dbc g     F .text.itcm	00000020 getDataCount()
0000afe4 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000f116 g     F .text.itcm	0000004a _vdiprintf_r
00000be0 g     F .text.itcm	00000084 i2s_setup()
00003d48 g     F .text.itcm	00000008 adcStart()
00010fcc g     F .text.itcm	000000b4 __d2b
00009668 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
0000976e  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
600018fc g     F .text.code	00000054 _reboot_Teensyduino_
000099b4  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600019a2 g     F .text.code	00000002 startup_default_middle_hook
00000c64 g     F .text.itcm	000000a4 dma_setup()
00009170 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000093ac g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
0000a0fc g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00011ea8 g     F .text.itcm	00000004 _strtoul_r
00003ce0 g     F .text.itcm	00000024 usbPowerInit()
0000c934 g     F .text.itcm	000000c4 usb_mtp_send
0000b58c g     F .text.itcm	000004a8 usb_isr
0000e180 g     F .text.itcm	0000001c __cxa_atexit
000060f4 g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000f2d0 g     F .text.itcm	00000020 _close_r
000096fe  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00012630 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00009426 g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005cdc g     F .text.itcm	0000004e FsCache::sync()
0000f1d4 g     F .text.itcm	00000020 memcmp
200004c4  w    O .data	00000028 vtable for usb_serial_class
0000a84a g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000308c g     F .text.itcm	00000008 filing_exit()
00004abe g     F .text.itcm	000000bc MTPD::GetObject(unsigned long)
0000a892 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20021540 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000f034 g     F .text.itcm	00000058 sscanf
000121d4 g     F .text.itcm	000000b0 __swsetup_r
00003078 g     F .text.itcm	00000014 stopSD()
0000d30c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00006da4 g     F .text.itcm	00000056 ExFatFile::rmdir()
0000497c g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000e38  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
000093f2 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
000110e0 g     F .text.itcm	00000046 __copybits
00004d44 g     F .text.itcm	00000016 MTPD::read16()
00001096 g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000f08c g     F .text.itcm	00000022 __sread
00003224 g     F .text.itcm	00000060 wavHeaderWrite(char*)
0000c188 g     F .text.itcm	0000001c eeprom_read_block
0000b048 g     F .text.itcm	00000094 usb_serial_flush_output
0000d45c g     F .text.itcm	0000000c __malloc_lock
00005eb0 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002400 g     O .data	000002c0 _VectorsRam
0000a852 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
000092bc g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011c24 g     F .text.itcm	00000050 _fflush_r
00011d98 g     F .text.itcm	0000002c _calloc_r
00004cac g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00003284 g     F .text.itcm	000000d0 makeHeader(long*)
00000fa0  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
000089f0 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
2000224e g     O .data	00000002 t_acq
200222b2 g     O .bss	00000001 yield_active_check_flags
00006ed8 g     F .text.itcm	00000042 ExFatFile::sync()
0000f3d0 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200222b0 g     O .bss	00000001 usb_high_speed
00007ec8 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009df8 g     F .text.itcm	00000040 SdioCard::isBusy()
00004404 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a898 g     F .text.itcm	00000000 memset
0000ccea g     F .text.itcm	00000010 main
0000e19c g     F .text.itcm	00000006 fcvt
000067d4 g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20202000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000224 g     F .text.itcm	00000020 resetUSB()
00009698 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00007230 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
00004dd0 g     F .text.itcm	000000dc MTPD::SendObjectInfo(unsigned long, unsigned long)
0000f228 g     F .text.itcm	00000046 strlcat
00007cb4 g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000f10e g     F .text.itcm	00000008 __sclose
0000c9f8 g     F .text.itcm	00000054 usb_init_serialnumber
0000e17c g     F .text.itcm	00000004 _strtol_r
60002540 g       .text.code	00000000 __init_array_end
0000f5d0 g     F .text.itcm	00000ad8 _dtoa_r
0000d370 g     F .text.itcm	000000ec _malloc_r
00009052 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00011178 g     F .text.itcm	0000001a __ascii_wctomb
000030d8 g     F .text.itcm	000000b0 writeHeaderInfo(char*, int)
000126a8 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20021294 g     O .bss	00000004 FatVolume::m_cwv
00002d8c g     F .text.itcm	00000030 hibernate_now(unsigned long)
000002a4 g     F .text.itcm	00000012 stopSystem()
0000cc60  w    F .text.itcm	00000008 Print::print(char const*)
00011ce6 g     F .text.itcm	00000074 __submore
200005a4  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000cd28 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00005608 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
67da97da g       *ABS*	00000000 __rtc_localtime
0000bdd8 g     F .text.itcm	0000004c micros
00004480 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006dfc g     F .text.itcm	000000dc ExFatFile::syncDir()
00005b48 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
600026b8 g     O .text.progmem	00000004 string0
0000ae58 g     F .text.itcm	0000018c usb_serial_write
600019a4  w    F .text.code	00000002 startup_late_hook
0000b52c g     F .text.itcm	00000034 usb_start_sof_interrupts
00000ece  w    F .text.itcm	00000050 FsBaseFile::available() const
000096e2 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000ccd0  w    F .text.itcm	00000004 usb_serial_class::available()
0000f034 g     F .text.itcm	00000058 siscanf
00004d6e g     F .text.itcm	00000030 MTPD::readstring(char*)
00007b78 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
00006c5e  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002680  w    O .text.progmem	00000020 usb_string_product_name
0000438c g     F .text.itcm	00000022 MTPD::GetNumObjects(unsigned long, unsigned long)
0000be24 g     F .text.itcm	0000002a delay
00012738 g     F .text.itcm	00000040 .hidden __fixunsdfdi
20021c16 g     O .bss	00000002 dma_channel_allocated_mask
000010b6 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
0000602e g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
000127c0 g     F .fini	00000000 _fini
00003d24 g     F .text.itcm	00000014 acqPower(int)
00002f7e  w    F .text.itcm	00000014 FsBaseFile::sync()
000056e8 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
0000921c g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
000067a8 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000eff4 g     F .text.itcm	00000040 sprintf
0000ce18 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000e24e g     F .text.itcm	0000007c __exponent
0000cdce g     F .text.itcm	00000012 Print::print(long)
00007bf8 g     F .text.itcm	00000010 FatFile::close()
0000c510 g     F .text.itcm	00000004 Panic_Temp_isr
00012704 g     F .text.itcm	00000030 .hidden __fixdfdi
00000a80 g     F .text.itcm	00000160 setAudioFrequency(int)
00002ddc g     F .text.itcm	0000000c queue_isBusy()
20002238 g     O .data	00000004 sd
00007d2a g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00009950  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000f358 g     F .text.itcm	00000024 _write_r
20021544 g     O .bss	00000004 sdSectorCount
00009e38 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
20021c0e g     O .bss	00000002 again
0000026c g     F .text.itcm	00000038 lowPowerInit()
00003010 g     F .text.itcm	00000068 filing_init()
0000c870 g     F .text.itcm	00000094 usb_mtp_recv
0000f4b0 g     F .text.itcm	0000000c nanf
0000e704 g     F .text.itcm	000000da _printf_common
2000222c g     O .data	00000004 _impure_ptr
0000627a g     F .text.itcm	0000002a ExFatFile::peek()
00011b18 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000ca4c  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001c9c g     O .data	00000140 Wire
0000900c g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000ef50 g     F .text.itcm	0000003c _fwalk_sglue
000098f0 g     F .text.itcm	0000000c SdioCard::errorCode() const
00007ca6 g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001ec  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002530 g       .text.code	00000000 __preinit_array_end
60001f80 g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002e80 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
000112dc g     F .text.itcm	000001fc _svfiprintf_r
000033e4 g     F .text.itcm	0000007c newFileName(char*)
00000f88  w    F .text.itcm	00000018 FsFile::~FsFile()
0000691c g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
000091ce g     F .text.itcm	00000026 SharedSpiCard::spiStart()
000016ec g     F .text.itcm	000000a2 MTPStorage_SD::DeleteObject(unsigned long)
000107ee g     F .text.itcm	00000024 __ascii_mbtowc
20021c18 g     O .bss	00000002 h_1
00010eec g     F .text.itcm	0000004c __ulp
0000b560 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000cc70  w    F .text.itcm	00000008 Print::print(unsigned long, int)
000056d0  w    F .text.itcm	00000016 TwoWire::peek()
000056e6  w    F .text.itcm	00000002 TwoWire::flush()
000007f8 g     F .text.itcm	00000194 setup
20000958 g     O .data	00000078 usb_descriptor_list
00009b7c g     F .text.itcm	00000004 SdioCard::status()
00001140 g     F .text.itcm	0000002c MTPStorage_SD::ResetIndex()
00004c94 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00007d0a g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000f40  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003d50 g     F .text.itcm	00000024 adc_exit()
00003d40 g     F .text.itcm	00000008 adcReset()
00000f1e  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000f4a0 g     F .text.itcm	00000010 nan
20021490 g     O .bss	00000004 nout_dat
00007744 g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004b7a g     F .text.itcm	000000d4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
0001158c g     F .text.itcm	000002f0 __ssvfiscanf_r
0000770a g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
2002125c g     O .bss	00000004 ExFatVolume::m_cwv
00012284 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
00009034 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000cc0c g     F .text.itcm	00000030 DMAChannel::release()
00002528 g     F .text.itcm	000000d0 loadParameters()
0000affc g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003d04 g     F .text.itcm	00000020 usbPowerSetup()
60001778 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
200021d4 g     O .data	0000000c __sglue
0000abac g     F .text.itcm	00000100 usb_serial_configure
0000570e g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000cdfc  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
000069f6 g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
2002223d g     O .bss	00000001 external_psram_size
00004684 g     F .text.itcm	000000ec MTPD::GetObjectInfo(unsigned long)
00009950  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005e20 g     F .text.itcm	00000048 FsName::get16()
000090dc  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
000094bc g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00009062 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00005f60 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
0000767c g     F .text.itcm	00000070 FatFile::addDirCluster()
0000ccd8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00005b24 g     F .text.itcm	0000000c lpi2c1_isr()
0000822a g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000d08 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000bb48 g     F .text.itcm	00000046 ultoa
2000224a g     O .data	00000002 h_3
00004d2e g     F .text.itcm	00000016 MTPD::read8()
600017d0 g     F .text.code	00000048 TwoWire::begin()
20021c14 g     O .bss	00000002 dgain
00008e62 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001214 g     F .text.itcm	00000042 MTPStorage_SD::ReadIndexRecord(unsigned long)
0000f0b2 g     F .text.itcm	00000038 __swrite
0000cb14 g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
000028f8 g     F .text.itcm	0000012c menu(short)
0000ccc8  w    F .text.itcm	00000004 usb_serial_class::peek()
0000e1a2 g     F .text.itcm	00000008 fcvtf
00009772  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
000091f4 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00004290 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
000014de g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00011eac g     F .text.itcm	00000024 fiprintf
00011f24 g     F .text.itcm	00000234 _vfiprintf_r
000042b4 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000a6b8  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	00000034 MTPStorage_SD::~MTPStorage_SD()
20002740 g     O .bss	00001440 mtpd
00010dd8 g     F .text.itcm	00000114 __mdiff
00002e34 g     F .text.itcm	0000004c pullData(unsigned long*)
00009940 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
0000178e g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
20022267 g     O .bss	00000028 n_string
000069b6 g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00007500 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
000036f0 g     F .text.itcm	0000016c checkEndOfFile(short)
200021e0 g     O .data	0000004c _impure_data
00006384 g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002224 g     F .text.itcm	000001dc menu3()
0000ef14 g     F .text.itcm	0000000c __sfp_lock_release
20021488 g     O .bss	00000004 mtp_txEventCount
0000cc8c  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00003094 g     F .text.itcm	00000044 timeStamp()
0000a000 g     F .text.itcm	00000074 SdioCard::writeStop()
0000eff4 g     F .text.itcm	00000040 siprintf
00011c74 g     F .text.itcm	00000072 __sccl
000092b4 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005ffa g     F .text.itcm	00000014 ExFatFile::close()
2000119c g     O .data	00000101 _ctype_
0000bffc  w    F .text.itcm	00000004 _read
60002530 g       .text.code	00000000 __init_array_start
0000d30c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
000010d8 g     F .text.itcm	00000068 MTPStorage_SD::OpenIndex()
60002424 g     F .text.code	0000000e CrashReportClass::operator bool()
00004d5a g     F .text.itcm	00000014 MTPD::read32()
20001c84 g     O .data	00000004 F_BUS_ACTUAL
0000c68a g     F .text.itcm	00000036 quadtimer_init
200213f4 g     O .bss	00000004 disk_count
00003210 g     F .text.itcm	00000014 wavHeaderUpdate(long)
000040a8 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
0000867c g     F .text.itcm	0000003c FatVolume::chdir(char const*)
00002020 g     F .text.itcm	00000204 printPar()
20002248 g     O .data	00000002 h_2
000041a4 g     F .text.itcm	000000c4 date2time(datetime_t*)
0000ccfc g     F .text.itcm	0000002c Stream::timedRead()
000122d0 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000cb70 g     F .text.itcm	0000009c DMAChannel::begin(bool)
000090de  w    F .text.itcm	00000006 SharedSpiCard::end()
0000f490 g     F .text.itcm	00000010 strlen
0000e7e0 g     F .text.itcm	00000244 _printf_i
00007716 g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
0000792e g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
00010210 g     F .text.itcm	0000045c __gethex
60002680 g     O .text.progmem	00000020 usb_string_product_name_default
200212b4 g     O .bss	00000004 __malloc_sbrk_start
00003f34 g     F .text.itcm	0000003c setAGain(signed char)
0000f160 g     F .text.itcm	00000014 vdprintf
00009d98 g     F .text.itcm	00000060 SdioCard::sectorCount()
00007adc g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
600019a2  w    F .text.code	00000002 startup_middle_hook
20000534 g     O .data	00000070 vtable for SdioCard
00012654 g     F .text.itcm	00000042 .hidden __aeabi_f2d
00001832 g     F .text.itcm	00000082 MTPStorage_SD::close()
000075ec g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600019aa g     F .text.code	00000112 configure_cache
0000c438 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	00000034 MTPStorage_SD::~MTPStorage_SD()
0000976a  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000018b4 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
200212b0 g     O .bss	00000004 __malloc_free_list
000093e2  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00003368 g     F .text.itcm	0000007c newDirectory(char*)
0000a514 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
000025f8 g     F .text.itcm	00000300 menu2()
0000a7bc g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
000039f0 g     F .text.itcm	000002cc compress(void*)
0000743c  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00001092 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00012394 g     F .text.itcm	0000027a .hidden __subdf3
00011f24 g     F .text.itcm	00000234 _vfprintf_r
60002530 g       .text.code	00000000 __preinit_array_start
0000bb04 g     F .text.itcm	0000001c usb_receive
0000687c g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001d8  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
000015d4 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20021cc2 g     O .bss	00000002 t_rep
00010a38 g     F .text.itcm	0000005a __lo0bits
00006990 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
20002240 g     O .data	00000004 tempDatai
00007a1a g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00018400 g       *ABS*	00000000 _flashimagelen
00009450 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000d008 g     F .text.itcm	0000000a __aeabi_atexit
00000f88  w    F .text.itcm	00000018 FsFile::~FsFile()
0000c020 g     F .text.itcm	00000024 rtc_get
00006d18 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000cb4c g     F .text.itcm	00000004 pendablesrvreq_isr
00004ee0 g     F .text.itcm	000000f0 MTPD::SendObject()
00001826 g     F .text.itcm	0000000c MTPStorage_SD::write(unsigned char const*, unsigned long)
20021c1a g     O .bss	00000002 monitor
20002246 g     O .data	00000002 d_on
2002220c g     O .bss	00000028 b_string
00001f14 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20002068 g     O .data	0000016c __global_locale
0000a1f4 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
0000600e g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000acac g     F .text.itcm	000000d4 usb_serial_read
2002220b g     O .bss	00000001 __lock___sfp_recursive_mutex
0000ce32 g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000ba74 g     F .text.itcm	00000040 usb_config_tx
0000c000  w    F .text.itcm	00000006 _close
00008266 g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000d320 g     F .text.itcm	00000010 free
0000ea24  w    F .text.itcm	00000408 _scanf_float
00005e68 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
0000119a g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
000108d8 g     F .text.itcm	0000008c __multadd
00010894 g     F .text.itcm	00000044 _Bfree
0000747e g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20002252  w    O .data	00000016 usb_string_serial_number
00000254 g     F .text.itcm	00000018 getSerNum()
0000a580 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
00009924 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x200222e0

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	600019a0 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	600019aa <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001d30 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600024a8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001abc <configure_external_ram>
	analog_init();
6000159c:	bl	60002434 <analog_init>
	pwm_init();
600015a0:	bl	60002508 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d8c <tempmon_init>
	startup_middle_hook();
600015a8:	bl	600019a2 <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	60001818 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	600019a6 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	600019a4 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002510 <____libc_init_array_veneer>
	main();
600015ca:	bl	600024b8 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x000127c8
600015dc:	.word	0x60002798
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x60014f64
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000be51
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000cb4d
6000160c:	.word	0x0000cb51
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20021bcc
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20021bd0
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <do_hibernate()>:
    if(secs>secso) hibernate_now(secs);
  }
#else
FLASHMEM
void do_hibernate(void)
{
6000165c:	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
6000165e:	ldr	r3, [pc, #92]	; (600016bc <do_hibernate()+0x60>)
60001660:	ldr	r5, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
60001662:	ldr	r2, [r3, #76]	; 0x4c
60001664:	orr.w	r2, r2, #1
60001668:	str	r2, [r3, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
6000166a:	ldr	r2, [r3, #56]	; 0x38
6000166c:	bic.w	r2, r2, #2
60001670:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
60001672:	ldr	r2, [r3, #56]	; 0x38
60001674:	lsls	r1, r2, #30
60001676:	bmi.n	60001672 <do_hibernate()+0x16>

    __disable_irq();
60001678:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
6000167a:	ldr	r4, [pc, #64]	; (600016bc <do_hibernate()+0x60>)
6000167c:	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
6000167e:	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
60001680:	ldr	r1, [r4, #84]	; 0x54
60001682:	ldr	r2, [r4, #80]	; 0x50
60001684:	cmp	r1, r3
60001686:	bne.n	6000167c <do_hibernate()+0x20>
60001688:	cmp	r2, r0
6000168a:	bne.n	6000167c <do_hibernate()+0x20>
    uint32_t secso = (msb << 17) | (lsb >> 15);
6000168c:	lsrs	r3, r3, #15

    uint32_t secs = estAlarmTime(secso);
6000168e:	orr.w	r0, r3, r0, lsl #17
60001692:	bl	600024c0 <___Z12estAlarmTimem_veneer>
    //set alarm
    //secs += nsec;
    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
60001696:	ldr	r3, [pc, #36]	; (600016bc <do_hibernate()+0x60>)
    SNVS_LPTAR = secs;
60001698:	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
6000169a:	ldr	r2, [r3, #88]	; 0x58
6000169c:	cmp	r2, r0
6000169e:	bne.n	6000169a <do_hibernate()+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
600016a0:	orr.w	r5, r5, #2
600016a4:	str	r5, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
600016a6:	ldr	r2, [r3, #56]	; 0x38
600016a8:	lsls	r2, r2, #30
600016aa:	bpl.n	600016a6 <do_hibernate()+0x4a>
//    NVIC_CLEAR_PENDING(IRQ_SNVS_ONOFF);
//    attachInterruptVector(IRQ_SNVS_ONOFF, &call_back);
//    NVIC_SET_PRIORITY(IRQ_SNVS_ONOFF, 255); //lowest priority
//    asm volatile ("dsb"); //make sure to write before interrupt-enable
//    NVIC_ENABLE_IRQ(IRQ_SNVS_ONOFF);
    __enable_irq();
600016ac:	cpsie	i
  
    SNVS_LPCR |= (1 << 6); // turn off power
600016ae:	ldr	r2, [r3, #56]	; 0x38
600016b0:	orr.w	r2, r2, #64	; 0x40
600016b4:	str	r2, [r3, #56]	; 0x38
    while (1) asm("wfi");  
600016b6:	wfi
600016b8:	b.n	600016b6 <do_hibernate()+0x5a>
600016ba:	nop
600016bc:	.word	0x400d4000

600016c0 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016c0:	ldr	r3, [r0, #20]
600016c2:	ldr	r2, [pc, #40]	; (600016ec <TwoWire::configSDApin(unsigned char)+0x2c>)
600016c4:	add.w	r0, r3, r1, lsl #4
600016c8:	add.w	r1, r3, r1, lsl #4
{
600016cc:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016ce:	ldrb	r4, [r0, #8]
600016d0:	ldr	r5, [pc, #28]	; (600016f0 <TwoWire::configSDApin(unsigned char)+0x30>)
600016d2:	add.w	r2, r2, r4, lsl #4
600016d6:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016d8:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016da:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016dc:	ldr	r0, [r0, #12]
600016de:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016e0:	ldr	r3, [r1, #16]
600016e2:	cbz	r3, 600016e8 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016e4:	ldr	r2, [r1, #20]
600016e6:	str	r2, [r3, #0]
	}
}
600016e8:	pop	{r4, r5, pc}
600016ea:	nop
600016ec:	.word	0x200005b4
600016f0:	.word	0x0001f861

600016f4 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016f4:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016f6:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016f8:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016fa:	ldrb	r2, [r0, #24]
600016fc:	add.w	r2, r3, r2, lsl #4
60001700:	ldrb	r2, [r2, #8]
60001702:	cmp	r2, r1
60001704:	beq.n	6000173a <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001706:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
60001708:	cmp	r0, #255	; 0xff
6000170a:	beq.n	6000173a <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
6000170c:	cmp	r1, r0
6000170e:	beq.n	6000173c <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
60001710:	ldrb	r1, [r3, #24]
60001712:	cmp	r1, #255	; 0xff
60001714:	beq.n	6000173a <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
60001716:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001718:	ldr	r1, [r3, #0]
		configSDApin(newindex);
6000171a:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000171c:	ldr	r3, [r3, #4]
6000171e:	ldr	r1, [r1, #0]
60001720:	tst	r1, r3
60001722:	beq.n	60001738 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001724:	ldr	r3, [pc, #24]	; (60001740 <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
60001726:	mov	r1, r5
60001728:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
6000172a:	add.w	r3, r3, r2, lsl #4
6000172e:	movs	r2, #5
60001730:	ldr	r3, [r3, #4]
60001732:	str	r2, [r3, #0]
		configSDApin(newindex);
60001734:	bl	600016c0 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
60001738:	strb	r5, [r4, #24]
}
6000173a:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
6000173c:	movs	r5, #0
6000173e:	b.n	60001718 <TwoWire::setSDA(unsigned char)+0x24>
60001740:	.word	0x200005b4

60001744 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001744:	ldr	r3, [r0, #20]
60001746:	ldr	r2, [pc, #40]	; (60001770 <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001748:	add.w	r0, r3, r1, lsl #4
6000174c:	add.w	r1, r3, r1, lsl #4
{
60001750:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001752:	ldrb.w	r4, [r0, #40]	; 0x28
60001756:	ldr	r5, [pc, #28]	; (60001774 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001758:	add.w	r2, r2, r4, lsl #4
6000175c:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000175e:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001760:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001762:	ldr	r0, [r0, #44]	; 0x2c
60001764:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001766:	ldr	r3, [r1, #48]	; 0x30
60001768:	cbz	r3, 6000176e <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
6000176a:	ldr	r2, [r1, #52]	; 0x34
6000176c:	str	r2, [r3, #0]
	}
}
6000176e:	pop	{r4, r5, pc}
60001770:	.word	0x200005b4
60001774:	.word	0x0001f861

60001778 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001778:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000177a:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000177c:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000177e:	ldrb	r2, [r0, #25]
60001780:	add.w	r2, r3, r2, lsl #4
60001784:	ldrb.w	r2, [r2, #40]	; 0x28
60001788:	cmp	r2, r1
6000178a:	beq.n	600017c4 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
6000178c:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001790:	cmp	r0, #255	; 0xff
60001792:	beq.n	600017c4 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001794:	cmp	r1, r0
60001796:	beq.n	600017c6 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001798:	ldrb.w	r1, [r3, #56]	; 0x38
6000179c:	cmp	r1, #255	; 0xff
6000179e:	beq.n	600017c4 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
600017a0:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a2:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
600017a4:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017a6:	ldr	r3, [r3, #4]
600017a8:	ldr	r1, [r1, #0]
600017aa:	tst	r1, r3
600017ac:	beq.n	600017c2 <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ae:	ldr	r3, [pc, #28]	; (600017cc <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
600017b0:	mov	r1, r5
600017b2:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017b4:	add.w	r3, r3, r2, lsl #4
600017b8:	movs	r2, #5
600017ba:	ldr	r3, [r3, #4]
600017bc:	str	r2, [r3, #0]
		configSCLpin(newindex);
600017be:	bl	60001744 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
600017c2:	strb	r5, [r4, #25]
}
600017c4:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600017c6:	movs	r5, #0
600017c8:	b.n	600017a2 <TwoWire::setSCL(unsigned char)+0x2a>
600017ca:	nop
600017cc:	.word	0x200005b4

600017d0 <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017d0:	ldr	r2, [pc, #60]	; (60001810 <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017d2:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017d4:	ldr	r3, [r2, #56]	; 0x38
600017d6:	bic.w	r3, r3, #16515072	; 0xfc0000
600017da:	orr.w	r3, r3, #262144	; 0x40000
{
600017de:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017e0:	str	r3, [r2, #56]	; 0x38
{
600017e2:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017e4:	ldr	r2, [r1, #0]
600017e6:	ldr	r1, [r1, #4]
600017e8:	ldr	r3, [r2, #0]
600017ea:	orrs	r3, r1
	setClock(100000);
600017ec:	ldr	r1, [pc, #36]	; (60001814 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017ee:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
600017f0:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
600017f2:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
600017f4:	str	r2, [r3, #16]
	setClock(100000);
600017f6:	bl	60002500 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
600017fa:	ldrb	r1, [r4, #24]
600017fc:	mov	r0, r4
600017fe:	bl	600016c0 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
60001802:	ldrb	r1, [r4, #25]
60001804:	mov	r0, r4
}
60001806:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
6000180a:	b.w	60001744 <TwoWire::configSCLpin(unsigned char)>
6000180e:	nop
60001810:	.word	0x400fc000
60001814:	.word	0x000186a0

60001818 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001818:	ldr	r3, [pc, #192]	; (600018dc <usb_init+0xc4>)
6000181a:	movw	r2, #3937	; 0xf61
{
6000181e:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001820:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001824:	bl	600024e8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001828:	ldr	r2, [pc, #180]	; (600018e0 <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000182a:	ldr	r1, [pc, #184]	; (600018e4 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000182c:	ldr.w	r3, [r2, #128]	; 0x80
60001830:	orr.w	r3, r3, #3
60001834:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
60001838:	movw	r2, #1028	; 0x404
6000183c:	ldr	r3, [pc, #168]	; (600018e8 <usb_init+0xd0>)
6000183e:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001842:	ldr	r2, [pc, #168]	; (600018ec <usb_init+0xd4>)
60001844:	ldr	r0, [r2, #0]
60001846:	tst	r0, r1
60001848:	bne.n	60001852 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000184a:	ldr.w	r1, [r3, #424]	; 0x1a8
6000184e:	lsls	r4, r1, #30
60001850:	beq.n	60001888 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001852:	mov.w	r1, #2147483648	; 0x80000000
60001856:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001858:	ldr.w	r2, [r3, #320]	; 0x140
6000185c:	orr.w	r2, r2, #2
60001860:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001864:	ldr	r2, [pc, #128]	; (600018e8 <usb_init+0xd0>)
60001866:	ldr.w	r3, [r2, #320]	; 0x140
6000186a:	lsls	r0, r3, #30
6000186c:	bmi.n	60001866 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000186e:	mov.w	r3, #3758153728	; 0xe000e000
60001872:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001876:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001878:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000187c:	mov.w	r2, #2147483648	; 0x80000000
60001880:	ldr	r3, [pc, #104]	; (600018ec <usb_init+0xd4>)
60001882:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001884:	bl	600024b0 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001888:	ldr	r3, [pc, #96]	; (600018ec <usb_init+0xd4>)
	USBPHY1_PWD = 0;
6000188a:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000188c:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001890:	ldr	r4, [pc, #84]	; (600018e8 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001892:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001894:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001898:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000189a:	movs	r3, #10
6000189c:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600018a0:	ldr	r3, [pc, #76]	; (600018f0 <usb_init+0xd8>)
600018a2:	mov	r0, r3
600018a4:	bl	600024f0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600018a8:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600018ac:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600018b0:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
600018b2:	mov.w	r2, #4194304	; 0x400000
600018b6:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600018b8:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018bc:	ldr	r2, [pc, #52]	; (600018f4 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600018be:	str.w	r3, [r4, #328]	; 0x148
600018c2:	ldr	r3, [pc, #52]	; (600018f8 <usb_init+0xe0>)
600018c4:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600018c8:	mov.w	r3, #3758153728	; 0xe000e000
600018cc:	mov.w	r2, #131072	; 0x20000
600018d0:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600018d4:	movs	r3, #1
600018d6:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600018da:	pop	{r4, pc}
600018dc:	.word	0x400d8000
600018e0:	.word	0x400fc000
600018e4:	.word	0x001e1c00
600018e8:	.word	0x402e0000
600018ec:	.word	0x400d9000
600018f0:	.word	0x20000000
600018f4:	.word	0x0000b58d
600018f8:	.word	0x20002400

600018fc <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
600018fc:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
600018fe:	ldr	r3, [pc, #60]	; (6000193c <_reboot_Teensyduino_+0x40>)
60001900:	ldr	r3, [r3, #96]	; 0x60
60001902:	lsls	r3, r3, #30
60001904:	bmi.n	60001908 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001906:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001908:	cpsid	i
		USB1_USBCMD = 0;
6000190a:	ldr	r3, [pc, #52]	; (60001940 <_reboot_Teensyduino_+0x44>)
6000190c:	movs	r2, #0
6000190e:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001912:	sub.w	r3, r3, #2310144	; 0x234000
60001916:	ldr	r2, [pc, #44]	; (60001944 <_reboot_Teensyduino_+0x48>)
60001918:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000191a:	sub.w	r3, r3, #534773760	; 0x1fe00000
6000191e:	sub.w	r3, r3, #700416	; 0xab000
60001922:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001924:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001928:	ldr	r0, [pc, #28]	; (60001948 <_reboot_Teensyduino_+0x4c>)
6000192a:	ldr	r3, [pc, #32]	; (6000194c <_reboot_Teensyduino_+0x50>)
6000192c:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000192e:	mov.w	r3, #2097152	; 0x200000
60001932:	ldr	r3, [r3, #28]
60001934:	ldr	r3, [r3, #8]
60001936:	blx	r3
60001938:	b.n	60001908 <_reboot_Teensyduino_+0xc>
6000193a:	nop
6000193c:	.word	0x401f4400
60001940:	.word	0x402e0000
60001944:	.word	0x00200003
60001948:	.word	0x20208000
6000194c:	.word	0xeb120000

60001950 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001950:	ldr	r3, [pc, #28]	; (60001970 <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001952:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001954:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
60001956:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000195a:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000195e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001962:	ldr	r2, [r3, #20]
60001964:	lsls	r2, r2, #31
60001966:	bpl.n	60001962 <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001968:	movs	r2, #1
6000196a:	str	r2, [r3, #20]
}
6000196c:	bx	lr
6000196e:	nop
60001970:	.word	0x402a4000

60001974 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001974:	ldr	r3, [pc, #32]	; (60001998 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001976:	ldr	r2, [pc, #36]	; (6000199c <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001978:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000197c:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001980:	movs	r2, #1
60001982:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001986:	ldr	r2, [r3, #20]
60001988:	lsls	r2, r2, #31
6000198a:	bpl.n	60001986 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
6000198c:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001990:	movs	r2, #33	; 0x21
}
60001992:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001994:	str	r2, [r3, #20]
}
60001996:	bx	lr
60001998:	.word	0x402a4000
6000199c:	.word	0x00030004

600019a0 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600019a0:	bx	lr

600019a2 <startup_default_middle_hook>:
600019a2:	bx	lr

600019a4 <startup_default_late_hook>:
600019a4:	bx	lr

600019a6 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600019a6:	nop
600019a8:	bx	lr

600019aa <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600019aa:	mov.w	r3, #3758153728	; 0xe000e000
600019ae:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600019b0:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
600019b2:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600019b6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600019ba:	ldr	r2, [pc, #184]	; (60001a74 <configure_cache+0xca>)
600019bc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600019c0:	movs	r2, #17
600019c2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600019c6:	ldr	r2, [pc, #176]	; (60001a78 <configure_cache+0xce>)
600019c8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600019cc:	movs	r2, #18
600019ce:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600019d2:	ldr	r2, [pc, #168]	; (60001a7c <configure_cache+0xd2>)
600019d4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600019d8:	ldr	r2, [pc, #164]	; (60001a80 <configure_cache+0xd6>)
600019da:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600019de:	ldr	r2, [pc, #164]	; (60001a84 <configure_cache+0xda>)
600019e0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600019e4:	ldr	r2, [pc, #160]	; (60001a88 <configure_cache+0xde>)
600019e6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600019ea:	ldr	r2, [pc, #160]	; (60001a8c <configure_cache+0xe2>)
600019ec:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600019f0:	ldr	r2, [pc, #156]	; (60001a90 <configure_cache+0xe6>)
600019f2:	orr.w	r2, r2, #21
600019f6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600019fa:	ldr	r2, [pc, #152]	; (60001a94 <configure_cache+0xea>)
600019fc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001a00:	add.w	r2, r2, #270532608	; 0x10200000
60001a04:	adds	r2, #13
60001a06:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001a0a:	ldr	r2, [pc, #140]	; (60001a98 <configure_cache+0xee>)
60001a0c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001a10:	ldr	r2, [pc, #136]	; (60001a9c <configure_cache+0xf2>)
60001a12:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001a16:	ldr	r2, [pc, #136]	; (60001aa0 <configure_cache+0xf6>)
60001a18:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001a1c:	ldr	r2, [pc, #132]	; (60001aa4 <configure_cache+0xfa>)
60001a1e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001a22:	ldr	r2, [pc, #132]	; (60001aa8 <configure_cache+0xfe>)
60001a24:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001a28:	ldr	r2, [pc, #128]	; (60001aac <configure_cache+0x102>)
60001a2a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001a2e:	ldr	r2, [pc, #128]	; (60001ab0 <configure_cache+0x106>)
60001a30:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001a34:	ldr	r2, [pc, #124]	; (60001ab4 <configure_cache+0x10a>)
60001a36:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001a3a:	ldr	r2, [pc, #124]	; (60001ab8 <configure_cache+0x10e>)
60001a3c:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001a40:	nop
	asm("nop");
60001a42:	nop
	asm("nop");
60001a44:	nop
	asm("nop");
60001a46:	nop
	asm("nop");
60001a48:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001a4a:	movs	r2, #1
60001a4c:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001a50:	dsb	sy
	asm("isb");
60001a54:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001a58:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001a5c:	dsb	sy
	asm("isb");
60001a60:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a64:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a68:	orr.w	r2, r2, #196608	; 0x30000
60001a6c:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a70:	bx	lr
60001a72:	nop
60001a74:	.word	0x1000003f
60001a78:	.word	0x07080025
60001a7c:	.word	0x00100009
60001a80:	.word	0x00200013
60001a84:	.word	0x07020021
60001a88:	.word	0x20000014
60001a8c:	.word	0x13080025
60001a90:	.word	0x200222e0
60001a94:	.word	0x10000009
60001a98:	.word	0x130b0027
60001a9c:	.word	0x40000017
60001aa0:	.word	0x13100033
60001aa4:	.word	0x60000018
60001aa8:	.word	0x070b002f
60001aac:	.word	0x70000019
60001ab0:	.word	0x130b002f
60001ab4:	.word	0x8000001a
60001ab8:	.word	0x130b003b

60001abc <configure_external_ram>:
{
60001abc:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001abe:	ldr	r3, [pc, #536]	; (60001cd8 <configure_external_ram+0x21c>)
60001ac0:	ldr	r2, [pc, #536]	; (60001cdc <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001ac2:	ldr	r1, [pc, #540]	; (60001ce0 <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001ac4:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001ac8:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001acc:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001ad0:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ad4:	ldr	r4, [pc, #524]	; (60001ce4 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001ad6:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001ada:	add.w	r2, r2, #28672	; 0x7000
60001ade:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001ae2:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001ae6:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001aea:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001aee:	movs	r2, #24
60001af0:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001af2:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001af4:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001af6:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001af8:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001afa:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001afe:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001b02:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001b06:	movs	r2, #1
60001b08:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001b0c:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001b10:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001b14:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001b18:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001b1c:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b20:	ldr	r2, [pc, #452]	; (60001ce8 <configure_external_ram+0x22c>)
60001b22:	ldr	r3, [r2, #24]
60001b24:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001b28:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001b2c:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001b30:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001b34:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001b36:	ldr.w	r3, [r2, #132]	; 0x84
60001b3a:	orr.w	r3, r3, #12
60001b3e:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001b42:	ldr	r3, [pc, #424]	; (60001cec <configure_external_ram+0x230>)
60001b44:	ldr	r2, [r3, #0]
60001b46:	orr.w	r2, r2, #2
60001b4a:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001b4c:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001b4e:	ldr	r2, [pc, #416]	; (60001cf0 <configure_external_ram+0x234>)
60001b50:	bic.w	r1, r1, #30848	; 0x7880
60001b54:	bic.w	r1, r1, #115	; 0x73
60001b58:	lsls	r1, r1, #16
60001b5a:	lsrs	r1, r1, #16
60001b5c:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b5e:	ldr	r1, [pc, #404]	; (60001cf4 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001b60:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001b62:	mov.w	r2, #4294967295
60001b66:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b68:	add.w	r2, r2, #16187392	; 0xf70000
60001b6c:	ldr	r0, [r1, #8]
60001b6e:	add.w	r2, r2, #14336	; 0x3800
60001b72:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b74:	ldr	r0, [pc, #384]	; (60001cf8 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b76:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b7a:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b7c:	ldr	r2, [r3, #12]
60001b7e:	bic.w	r2, r2, #120	; 0x78
60001b82:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b84:	ldr	r2, [r3, #32]
60001b86:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b88:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b8a:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b8c:	ldr	r2, [r3, #32]
60001b8e:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b90:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b94:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b96:	ldr	r0, [pc, #356]	; (60001cfc <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b98:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b9a:	ldr	r2, [pc, #356]	; (60001d00 <configure_external_ram+0x244>)
60001b9c:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b9e:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001ba0:	ldr.w	r2, [r1, #184]	; 0xb8
60001ba4:	bic.w	r2, r2, #63	; 0x3f
60001ba8:	orr.w	r2, r2, #1
60001bac:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001bb0:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001bb4:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001bb6:	bic.w	r2, r2, #63	; 0x3f
60001bba:	orr.w	r2, r2, #1
60001bbe:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001bc2:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001bc6:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001bc8:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001bca:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001bcc:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001bd0:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001bd2:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001bd4:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001bd8:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001bda:	ldr	r0, [pc, #296]	; (60001d04 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001bdc:	bic.w	r2, r2, #2
60001be0:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001be2:	ldr	r2, [pc, #292]	; (60001d08 <configure_external_ram+0x24c>)
60001be4:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001be6:	movs	r2, #2
60001be8:	str	r2, [r3, #28]
60001bea:	ldr	r2, [pc, #288]	; (60001d0c <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001bec:	str.w	r1, [r2], #4
60001bf0:	cmp	r2, r0
60001bf2:	bne.n	60001bec <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001bf4:	ldr	r2, [r3, #0]
60001bf6:	orr.w	r2, r2, #1
60001bfa:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001bfc:	ldr	r3, [pc, #236]	; (60001cec <configure_external_ram+0x230>)
60001bfe:	ldr	r4, [r3, #0]
60001c00:	ands.w	r4, r4, #1
60001c04:	bne.n	60001bfe <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001c06:	ldr	r2, [pc, #256]	; (60001d08 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001c08:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001c0a:	mov	r1, r4
60001c0c:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001c0e:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001c10:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001c14:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001c16:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001c1a:	movw	r2, #1126	; 0x466
60001c1e:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001c22:	movw	r2, #1177	; 0x499
60001c26:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001c2a:	ldr	r2, [pc, #228]	; (60001d10 <configure_external_ram+0x254>)
60001c2c:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001c30:	movw	r2, #9217	; 0x2401
60001c34:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001c38:	movw	r2, #1077	; 0x435
60001c3c:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001c40:	ldr	r2, [pc, #208]	; (60001d14 <configure_external_ram+0x258>)
60001c42:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001c46:	ldr	r2, [pc, #208]	; (60001d18 <configure_external_ram+0x25c>)
60001c48:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001c4c:	ldr	r2, [pc, #204]	; (60001d1c <configure_external_ram+0x260>)
60001c4e:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001c52:	movw	r2, #8705	; 0x2201
60001c56:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001c5a:	bl	60001950 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001c5e:	movs	r0, #1
60001c60:	bl	60001950 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c64:	mov	r0, r6
60001c66:	bl	60001950 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c6a:	mov	r0, r4
60001c6c:	bl	60001974 <flexspi2_psram_id>
60001c70:	movw	r3, #23821	; 0x5d0d
60001c74:	mov	r5, r0
60001c76:	cmp	r0, r3
60001c78:	bne.n	60001cca <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c7a:	movs	r0, #4
60001c7c:	bl	60001950 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c80:	mov.w	r1, #8388608	; 0x800000
60001c84:	mov	r0, r4
60001c86:	bl	60001950 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c8a:	movs	r0, #1
60001c8c:	bl	60001950 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c90:	mov	r0, r6
60001c92:	bl	60001950 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c96:	mov	r0, r1
60001c98:	bl	60001974 <flexspi2_psram_id>
60001c9c:	cmp	r0, r5
60001c9e:	bne.n	60001cc6 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001ca0:	movs	r0, #4
60001ca2:	bl	60001950 <flexspi2_command>
			external_psram_size = 16;
60001ca6:	movs	r0, #16
			external_psram_size * 0x100000 -
60001ca8:	ldr	r1, [pc, #116]	; (60001d20 <configure_external_ram+0x264>)
			external_psram_size = 16;
60001caa:	ldr	r3, [pc, #120]	; (60001d24 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001cac:	ldr	r2, [pc, #120]	; (60001d28 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001cae:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cb0:	movs	r3, #0
			external_psram_size * 0x100000 -
60001cb2:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cb4:	str	r3, [sp, #0]
60001cb6:	movs	r3, #1
60001cb8:	add.w	r2, r2, r0, lsl #20
60001cbc:	ldr	r0, [pc, #108]	; (60001d2c <configure_external_ram+0x270>)
60001cbe:	bl	60002520 <__sm_set_pool_veneer>
}
60001cc2:	add	sp, #8
60001cc4:	pop	{r4, r5, r6, pc}
60001cc6:	movs	r0, #8
60001cc8:	b.n	60001ca8 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cca:	movs	r2, #16
60001ccc:	ldr	r0, [pc, #92]	; (60001d2c <configure_external_ram+0x270>)
}
60001cce:	add	sp, #8
60001cd0:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cd4:	b.w	600024f0 <__memset_veneer>
60001cd8:	.word	0x401f8000
60001cdc:	.word	0x0001b0f9
60001ce0:	.word	0x000110f9
60001ce4:	.word	0x7cf0ff00
60001ce8:	.word	0x400fc000
60001cec:	.word	0x402a4000
60001cf0:	.word	0xffff0012
60001cf4:	.word	0x402a8000
60001cf8:	.word	0x80000040
60001cfc:	.word	0x00020063
60001d00:	.word	0x830f00ff
60001d04:	.word	0x402a4300
60001d08:	.word	0x5af05af0
60001d0c:	.word	0x402a4200
60001d10:	.word	0x3018049f
60001d14:	.word	0x0a1806eb
60001d18:	.word	0x26013206
60001d1c:	.word	0x0a180638
60001d20:	.word	0x70900000
60001d24:	.word	0x2002223d
60001d28:	.word	0x70000000
60001d2c:	.word	0x20021404

60001d30 <usb_pll_start>:
{
60001d30:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d32:	ldr	r3, [pc, #84]	; (60001d88 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d34:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d36:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d3a:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d3e:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d42:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d46:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d4a:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001d4c:	tst.w	r2, #2
60001d50:	beq.n	60001d5a <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d52:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001d54:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d56:	str	r7, [r3, #24]
			continue;
60001d58:	b.n	60001d4a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001d5a:	tst.w	r2, #8192	; 0x2000
60001d5e:	bne.n	60001d64 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d60:	str	r5, [r3, #20]
			continue;
60001d62:	b.n	60001d4a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d64:	tst.w	r2, #4096	; 0x1000
60001d68:	bne.n	60001d6e <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d6a:	str	r4, [r3, #20]
			continue;
60001d6c:	b.n	60001d4a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d6e:	cmp	r2, #0
60001d70:	bge.n	60001d4a <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d72:	tst.w	r2, #65536	; 0x10000
60001d76:	beq.n	60001d7c <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d78:	str	r1, [r3, #24]
			continue;
60001d7a:	b.n	60001d4a <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d7c:	lsls	r2, r2, #25
60001d7e:	bmi.n	60001d84 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d80:	str	r0, [r3, #20]
			continue;
60001d82:	b.n	60001d4a <usb_pll_start+0x1a>
}
60001d84:	pop	{r4, r5, r6, r7, pc}
60001d86:	nop
60001d88:	.word	0x400d8000

60001d8c <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d8c:	ldr	r2, [pc, #248]	; (60001e88 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d8e:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d92:	ldr	r0, [pc, #248]	; (60001e8c <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d94:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d98:	vldr	s10, [pc, #244]	; 60001e90 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d9c:	bic.w	r3, r3, #1
{
60001da0:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001da2:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001da6:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001da8:	ldr	r4, [pc, #232]	; (60001e94 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001daa:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001dae:	ldr	r3, [pc, #232]	; (60001e98 <tempmon_init+0x10c>)
60001db0:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001db4:	uxtb	r1, r3
60001db6:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001db8:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001dbc:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001dc0:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dc2:	vcvt.f32.s32	s14, s15
60001dc6:	ldr	r1, [pc, #212]	; (60001e9c <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dc8:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001dcc:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dce:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001dd2:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd6:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001dda:	ldr	r3, [pc, #196]	; (60001ea0 <tempmon_init+0x114>)
60001ddc:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001de0:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001de4:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001de8:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dec:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001df0:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001df4:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001df8:	vdiv.f32	s11, s10, s12
60001dfc:	vadd.f32	s11, s11, s13
60001e00:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e04:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e08:	vldr	s11, [pc, #152]	; 60001ea4 <tempmon_init+0x118>
60001e0c:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e10:	orr.w	r3, r3, r1, lsl #20
60001e14:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e18:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e1c:	ldr	r3, [pc, #136]	; (60001ea8 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e1e:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e22:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e26:	vdiv.f32	s11, s14, s12
60001e2a:	vadd.f32	s14, s11, s13
60001e2e:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e32:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e36:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e3a:	and.w	r3, r3, r0, lsl #16
60001e3e:	orrs	r3, r1
60001e40:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001e44:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e48:	vadd.f32	s15, s14, s13
60001e4c:	vcvt.u32.f32	s15, s15
60001e50:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001e54:	ubfx	r3, r3, #0, #12
60001e58:	orrs	r3, r1
60001e5a:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001e5e:	ldr.w	r3, [r2, #128]	; 0x80
60001e62:	orr.w	r3, r3, #2
60001e66:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e6a:	movs	r2, #0
60001e6c:	ldr	r3, [pc, #60]	; (60001eac <tempmon_init+0x120>)
60001e6e:	strb.w	r2, [r3, #64]	; 0x40
60001e72:	ldr	r3, [pc, #60]	; (60001eb0 <tempmon_init+0x124>)
60001e74:	ldr	r2, [pc, #60]	; (60001eb4 <tempmon_init+0x128>)
60001e76:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e7a:	mov.w	r3, #3758153728	; 0xe000e000
60001e7e:	movs	r2, #1
60001e80:	str.w	r2, [r3, #264]	; 0x108
}
60001e84:	pop	{r4, pc}
60001e86:	nop
60001e88:	.word	0x400d8100
60001e8c:	.word	0x20021534
60001e90:	.word	0x42aa0000
60001e94:	.word	0x20021530
60001e98:	.word	0x401f4400
60001e9c:	.word	0x20021538
60001ea0:	.word	0x2002153c
60001ea4:	.word	0x42b40000
60001ea8:	.word	0x0fff0000
60001eac:	.word	0xe000e400
60001eb0:	.word	0x20002400
60001eb4:	.word	0x0000c511

60001eb8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001eb8:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001eba:	ldr	r4, [pc, #64]	; (60001efc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001ebc:	ldr.w	r3, [r4, #128]	; 0x80
60001ec0:	cmp	r3, #11
60001ec2:	bne.n	60001ef6 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001ec4:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001ec8:	ldr	r2, [pc, #52]	; (60001f00 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001eca:	ldr	r6, [pc, #56]	; (60001f04 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001ecc:	ldr	r5, [pc, #56]	; (60001f08 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001ece:	ldr	r1, [r2, #0]
60001ed0:	adds	r2, #4
60001ed2:	eors	r3, r1
60001ed4:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001ed6:	and.w	r0, r3, #1
60001eda:	subs	r1, #1
60001edc:	mul.w	r0, r6, r0
60001ee0:	eor.w	r3, r0, r3, lsr #1
60001ee4:	bne.n	60001ed6 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001ee6:	cmp	r2, r5
60001ee8:	bne.n	60001ece <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001eea:	ldr.w	r0, [r4, #168]	; 0xa8
60001eee:	subs	r3, r0, r3
60001ef0:	negs	r0, r3
60001ef2:	adcs	r0, r3
	return 1;
}
60001ef4:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001ef6:	movs	r0, #0
60001ef8:	b.n	60001ef4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001efa:	nop
60001efc:	.word	0x2027ff00
60001f00:	.word	0x2027ff80
60001f04:	.word	0xedb88320
60001f08:	.word	0x2027ffa8

60001f0c <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001f0c:	ldr	r2, [pc, #96]	; (60001f70 <CrashReportClass::clear()+0x64>)
60001f0e:	movs	r3, #0
{
60001f10:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001f12:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001f16:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001f1a:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001f1e:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001f22:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001f26:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001f2a:	mov.w	r4, #3758153728	; 0xe000e000
60001f2e:	adds	r2, #128	; 0x80
60001f30:	str.w	r2, [r4, #3952]	; 0xf70
60001f34:	adds	r2, #32
60001f36:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001f3a:	dsb	sy
	asm("isb");
60001f3e:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001f42:	ldr	r2, [pc, #48]	; (60001f74 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001f44:	ldr	r6, [pc, #48]	; (60001f78 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001f46:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001f48:	ldr	r5, [pc, #48]	; (60001f7c <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001f4a:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001f4c:	movs	r1, #28
	SRC_GPR5 = 0;
60001f4e:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001f50:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001f52:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001f56:	bl	600024e0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001f5a:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001f5e:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001f62:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f66:	dsb	sy
	asm("isb");
60001f6a:	isb	sy
}
60001f6e:	pop	{r4, r5, r6, pc}
60001f70:	.word	0x2027ff00
60001f74:	.word	0x400f8000
60001f78:	.word	0x2027f000
60001f7c:	.word	0x2027ffc0

60001f80 <CrashReportClass::printTo(Print&) const>:
{
60001f80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f84:	mov	r4, r1
  if (isvalid(info)) {
60001f86:	bl	60001eb8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f8a:	cmp	r0, #0
60001f8c:	beq.w	60002330 <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f90:	ldr	r6, [pc, #692]	; (60002248 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f92:	mov	r0, r4
60001f94:	ldr	r1, [pc, #692]	; (6000224c <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f96:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f9a:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f9e:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001fa2:	ldr	r1, [pc, #684]	; (60002250 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001fa4:	mov	r0, r4
    info->time /= 60;
60001fa6:	udiv	r9, r7, r8
    info->time /= 60;
60001faa:	udiv	r5, r9, r8
60001fae:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001fb2:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001fb6:	movs	r3, #24
    p.print(hh);
60001fb8:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001fba:	udiv	r1, r5, r3
60001fbe:	mls	r1, r3, r1, r5
    p.print(hh);
60001fc2:	uxtb	r1, r1
60001fc4:	bl	600024d0 <___ZN5Print5printEh_veneer>
    p.print(":");
60001fc8:	ldr	r1, [pc, #648]	; (60002254 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001fca:	mov	r0, r4
60001fcc:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001fd0:	mls	r1, r8, r5, r9
    p.print(mm);
60001fd4:	mov	r0, r4
60001fd6:	uxtb	r1, r1
60001fd8:	bl	600024d0 <___ZN5Print5printEh_veneer>
    p.print(":");
60001fdc:	ldr	r1, [pc, #628]	; (60002254 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001fde:	mov	r0, r4
60001fe0:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001fe4:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001fe8:	mov	r0, r4
60001fea:	uxtb	r1, r1
60001fec:	bl	600024d0 <___ZN5Print5printEh_veneer>
60001ff0:	mov	r0, r4
60001ff2:	bl	60002498 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001ff6:	ldr	r1, [pc, #608]	; (60002258 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001ff8:	mov	r0, r4
60001ffa:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001ffe:	movs	r2, #16
60002000:	ldr.w	r1, [r6, #152]	; 0x98
60002004:	mov	r0, r4
60002006:	bl	600024d8 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
6000200a:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
6000200e:	cmp	r5, #0
60002010:	beq.n	600020c0 <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60002012:	ldr	r1, [pc, #584]	; (6000225c <CrashReportClass::printTo(Print&) const+0x2dc>)
60002014:	mov	r0, r4
60002016:	bl	60002528 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
6000201a:	movs	r2, #16
6000201c:	ldr.w	r1, [r6, #136]	; 0x88
60002020:	mov	r0, r4
60002022:	bl	600024d8 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60002026:	lsls	r2, r5, #31
60002028:	bpl.w	600021d0 <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
6000202c:	ldr	r1, [pc, #560]	; (60002260 <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000202e:	mov	r0, r4
60002030:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60002034:	lsls	r2, r5, #24
60002036:	bpl.n	6000208c <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60002038:	ldr	r1, [pc, #552]	; (60002264 <CrashReportClass::printTo(Print&) const+0x2e4>)
6000203a:	mov	r0, r4
6000203c:	bl	60002528 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60002040:	movs	r2, #16
60002042:	ldr.w	r1, [r6, #144]	; 0x90
60002046:	mov	r0, r4
60002048:	bl	60002518 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
6000204c:	ldr.w	r2, [r6, #144]	; 0x90
60002050:	cmp	r2, #31
60002052:	bhi.w	600021f2 <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60002056:	ldr	r1, [pc, #528]	; (60002268 <CrashReportClass::printTo(Print&) const+0x2e8>)
60002058:	mov	r0, r4
6000205a:	bl	60002528 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000205e:	movs	r2, #16
60002060:	ldr.w	r1, [r6, #152]	; 0x98
60002064:	mov	r0, r4
60002066:	bl	60002518 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
6000206a:	ldr	r1, [pc, #512]	; (6000226c <CrashReportClass::printTo(Print&) const+0x2ec>)
6000206c:	mov	r0, r4
6000206e:	bl	60002528 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60002072:	ldr.w	r1, [r6, #152]	; 0x98
60002076:	movs	r2, #16
60002078:	mov	r0, r4
6000207a:	bl	60002518 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000207e:	ldr	r1, [pc, #496]	; (60002270 <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60002080:	mov	r0, r4
60002082:	bl	60002528 <___ZN5Print5printEPKc_veneer>
        p.println();
60002086:	mov	r0, r4
60002088:	bl	60002498 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
6000208c:	lsls	r3, r5, #23
6000208e:	bpl.w	60002206 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
60002092:	ldr	r1, [pc, #480]	; (60002274 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002094:	mov	r0, r4
60002096:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
6000209a:	lsls	r7, r5, #16
6000209c:	bpl.n	600020b2 <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000209e:	ldr	r1, [pc, #472]	; (60002278 <CrashReportClass::printTo(Print&) const+0x2f8>)
600020a0:	mov	r0, r4
600020a2:	bl	60002528 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
600020a6:	movs	r2, #16
600020a8:	ldr.w	r1, [r6, #148]	; 0x94
600020ac:	mov	r0, r4
600020ae:	bl	600024d8 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
600020b2:	lsls	r0, r5, #15
600020b4:	bpl.w	60002230 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
600020b8:	ldr	r1, [pc, #448]	; (6000227c <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
600020ba:	mov	r0, r4
600020bc:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
600020c0:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
600020c4:	cbz	r5, 600020e8 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
600020c6:	ldr	r1, [pc, #440]	; (60002280 <CrashReportClass::printTo(Print&) const+0x300>)
600020c8:	mov	r0, r4
600020ca:	bl	60002528 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
600020ce:	movs	r2, #16
600020d0:	ldr.w	r1, [r6, #140]	; 0x8c
600020d4:	mov	r0, r4
600020d6:	bl	600024d8 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
600020da:	lsls	r0, r5, #30
600020dc:	bpl.w	60002326 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
600020e0:	ldr	r1, [pc, #416]	; (60002284 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
600020e2:	mov	r0, r4
600020e4:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
600020e8:	ldr	r1, [pc, #412]	; (60002288 <CrashReportClass::printTo(Print&) const+0x308>)
600020ea:	mov	r0, r4
600020ec:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
600020f0:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
600020f4:	movs	r1, #2
600020f6:	mov	r0, r4
600020f8:	vcvt.f64.f32	d0, s0
600020fc:	bl	600024a0 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
60002100:	ldr	r1, [pc, #392]	; (6000228c <CrashReportClass::printTo(Print&) const+0x30c>)
60002102:	mov	r0, r4
60002104:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
60002108:	ldr	r1, [pc, #388]	; (60002290 <CrashReportClass::printTo(Print&) const+0x310>)
6000210a:	mov	r0, r4
6000210c:	bl	60002528 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
60002110:	ldr	r3, [pc, #384]	; (60002294 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60002112:	ldr	r1, [pc, #388]	; (60002298 <CrashReportClass::printTo(Print&) const+0x318>)
60002114:	movs	r2, #10
60002116:	ldr	r0, [r3, #0]
60002118:	movs	r3, #0
6000211a:	udiv	r1, r0, r1
6000211e:	mov	r0, r4
60002120:	bl	600024f8 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
60002124:	ldr	r1, [pc, #372]	; (6000229c <CrashReportClass::printTo(Print&) const+0x31c>)
60002126:	mov	r0, r4
60002128:	bl	60002528 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
6000212c:	ldr	r3, [pc, #368]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x320>)
6000212e:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60002130:	lsls	r2, r5, #30
60002132:	bpl.n	60002146 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
60002134:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60002136:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
60002138:	ldr	r3, [pc, #360]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x324>)
6000213a:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
6000213c:	ite	eq
6000213e:	ldreq	r1, [pc, #360]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60002140:	ldrne	r1, [pc, #360]	; (600022ac <CrashReportClass::printTo(Print&) const+0x32c>)
60002142:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60002146:	lsls	r7, r5, #29
60002148:	bpl.n	60002152 <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
6000214a:	ldr	r1, [pc, #356]	; (600022b0 <CrashReportClass::printTo(Print&) const+0x330>)
6000214c:	mov	r0, r4
6000214e:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60002152:	lsls	r6, r5, #28
60002154:	bpl.n	6000215e <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
60002156:	ldr	r1, [pc, #348]	; (600022b4 <CrashReportClass::printTo(Print&) const+0x334>)
60002158:	mov	r0, r4
6000215a:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
6000215e:	lsls	r0, r5, #27
60002160:	bpl.n	6000216a <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
60002162:	ldr	r1, [pc, #340]	; (600022b8 <CrashReportClass::printTo(Print&) const+0x338>)
60002164:	mov	r0, r4
60002166:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
6000216a:	lsls	r1, r5, #26
6000216c:	bpl.n	60002176 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000216e:	ldr	r1, [pc, #332]	; (600022bc <CrashReportClass::printTo(Print&) const+0x33c>)
60002170:	mov	r0, r4
60002172:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002176:	lsls	r2, r5, #25
60002178:	bpl.n	60002182 <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
6000217a:	ldr	r1, [pc, #324]	; (600022c0 <CrashReportClass::printTo(Print&) const+0x340>)
6000217c:	mov	r0, r4
6000217e:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60002182:	lsls	r3, r5, #24
60002184:	bpl.n	6000218e <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002186:	ldr	r1, [pc, #316]	; (600022c4 <CrashReportClass::printTo(Print&) const+0x344>)
60002188:	mov	r0, r4
6000218a:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000218e:	ands.w	r5, r5, #256	; 0x100
60002192:	beq.w	60002362 <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002196:	ldr	r1, [pc, #304]	; (600022c8 <CrashReportClass::printTo(Print&) const+0x348>)
60002198:	mov	r0, r4
6000219a:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000219e:	ldr	r2, [pc, #256]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
600021a0:	ldr	r1, [pc, #296]	; (600022cc <CrashReportClass::printTo(Print&) const+0x34c>)
600021a2:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600021a4:	ldr	r3, [r2, #8]
600021a6:	bic.w	r3, r3, #256	; 0x100
600021aa:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
600021ac:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
600021b0:	ldr	r1, [pc, #284]	; (600022d0 <CrashReportClass::printTo(Print&) const+0x350>)
600021b2:	mov	r0, r4
600021b4:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
600021b8:	ldr	r3, [pc, #280]	; (600022d4 <CrashReportClass::printTo(Print&) const+0x354>)
600021ba:	movs	r2, #7
600021bc:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600021be:	ldr	r2, [pc, #280]	; (600022d8 <CrashReportClass::printTo(Print&) const+0x358>)
600021c0:	ldr	r3, [r2, #56]	; 0x38
600021c2:	orr.w	r3, r3, #64	; 0x40
600021c6:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600021c8:	dsb	sy
	  while (1) asm ("wfi");
600021cc:	wfi
600021ce:	b.n	600021cc <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
600021d0:	lsls	r3, r5, #30
600021d2:	bpl.n	600021d8 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
600021d4:	ldr	r1, [pc, #260]	; (600022dc <CrashReportClass::printTo(Print&) const+0x35c>)
600021d6:	b.n	6000202e <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
600021d8:	lsls	r7, r5, #28
600021da:	bpl.n	600021e0 <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
600021dc:	ldr	r1, [pc, #256]	; (600022e0 <CrashReportClass::printTo(Print&) const+0x360>)
600021de:	b.n	6000202e <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
600021e0:	lsls	r0, r5, #27
600021e2:	bpl.n	600021e8 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
600021e4:	ldr	r1, [pc, #252]	; (600022e4 <CrashReportClass::printTo(Print&) const+0x364>)
600021e6:	b.n	6000202e <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
600021e8:	lsls	r1, r5, #26
600021ea:	bpl.w	60002034 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
600021ee:	ldr	r1, [pc, #248]	; (600022e8 <CrashReportClass::printTo(Print&) const+0x368>)
600021f0:	b.n	6000202e <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
600021f2:	ldr	r3, [pc, #248]	; (600022ec <CrashReportClass::printTo(Print&) const+0x36c>)
600021f4:	cmp	r2, r3
600021f6:	bcc.w	60002086 <CrashReportClass::printTo(Print&) const+0x106>
600021fa:	adds	r3, #32
600021fc:	cmp	r2, r3
600021fe:	bcs.w	60002086 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60002202:	ldr	r1, [pc, #236]	; (600022f0 <CrashReportClass::printTo(Print&) const+0x370>)
60002204:	b.n	60002080 <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60002206:	lsls	r7, r5, #22
60002208:	bpl.n	6000220e <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000220a:	ldr	r1, [pc, #232]	; (600022f4 <CrashReportClass::printTo(Print&) const+0x374>)
6000220c:	b.n	60002094 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
6000220e:	lsls	r0, r5, #21
60002210:	bpl.n	60002216 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002212:	ldr	r1, [pc, #228]	; (600022f8 <CrashReportClass::printTo(Print&) const+0x378>)
60002214:	b.n	60002094 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60002216:	lsls	r1, r5, #20
60002218:	bpl.n	6000221e <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000221a:	ldr	r1, [pc, #224]	; (600022fc <CrashReportClass::printTo(Print&) const+0x37c>)
6000221c:	b.n	60002094 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
6000221e:	lsls	r2, r5, #19
60002220:	bpl.n	60002226 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
60002222:	ldr	r1, [pc, #220]	; (60002300 <CrashReportClass::printTo(Print&) const+0x380>)
60002224:	b.n	60002094 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60002226:	lsls	r3, r5, #18
60002228:	bpl.w	6000209a <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
6000222c:	ldr	r1, [pc, #212]	; (60002304 <CrashReportClass::printTo(Print&) const+0x384>)
6000222e:	b.n	60002094 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60002230:	lsls	r1, r5, #14
60002232:	bpl.n	60002238 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
60002234:	ldr	r1, [pc, #208]	; (60002308 <CrashReportClass::printTo(Print&) const+0x388>)
60002236:	b.n	600020ba <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60002238:	lsls	r2, r5, #13
6000223a:	bpl.n	60002240 <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
6000223c:	ldr	r1, [pc, #204]	; (6000230c <CrashReportClass::printTo(Print&) const+0x38c>)
6000223e:	b.n	600020ba <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60002240:	lsls	r3, r5, #12
60002242:	bpl.n	60002314 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
60002244:	ldr	r1, [pc, #200]	; (60002310 <CrashReportClass::printTo(Print&) const+0x390>)
60002246:	b.n	600020ba <CrashReportClass::printTo(Print&) const+0x13a>
60002248:	.word	0x2027ff00
6000224c:	.word	0x20001432
60002250:	.word	0x2000143f
60002254:	.word	0x20001968
60002258:	.word	0x20001466
6000225c:	.word	0x2000148b
60002260:	.word	0x20001494
60002264:	.word	0x2000155a
60002268:	.word	0x2000157c
6000226c:	.word	0x2000159b
60002270:	.word	0x200015da
60002274:	.word	0x2000163a
60002278:	.word	0x20001773
6000227c:	.word	0x20001795
60002280:	.word	0x20001871
60002284:	.word	0x2000187a
60002288:	.word	0x200018bd
6000228c:	.word	0x200018e0
60002290:	.word	0x200018e6
60002294:	.word	0x20001c88
60002298:	.word	0x000f4240
6000229c:	.word	0x20001904
600022a0:	.word	0x400f8000
600022a4:	.word	0x0bad00f1
600022a8:	.word	0x20001a61
600022ac:	.word	0x20001aaa
600022b0:	.word	0x20001aeb
600022b4:	.word	0x20001b13
600022b8:	.word	0x20001b3e
600022bc:	.word	0x20001b65
600022c0:	.word	0x20001b8f
600022c4:	.word	0x20001bb1
600022c8:	.word	0x20001bd3
600022cc:	.word	0x20001bfd
600022d0:	.word	0x20001c1f
600022d4:	.word	0x400ac000
600022d8:	.word	0x400d4000
600022dc:	.word	0x200014bd
600022e0:	.word	0x200014df
600022e4:	.word	0x20001509
600022e8:	.word	0x2000152f
600022ec:	.word	0x200222e0
600022f0:	.word	0x200015f8
600022f4:	.word	0x2000165b
600022f8:	.word	0x20001688
600022fc:	.word	0x200016cd
60002300:	.word	0x2000170d
60002304:	.word	0x20001741
60002308:	.word	0x200017b9
6000230c:	.word	0x200017ec
60002310:	.word	0x20001815
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60002314:	lsls	r7, r5, #7
60002316:	bpl.n	6000231c <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
60002318:	ldr	r1, [pc, #204]	; (600023e8 <CrashReportClass::printTo(Print&) const+0x468>)
6000231a:	b.n	600020ba <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
6000231c:	lsls	r5, r5, #6
6000231e:	bpl.w	600020c0 <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
60002322:	ldr	r1, [pc, #200]	; (600023ec <CrashReportClass::printTo(Print&) const+0x46c>)
60002324:	b.n	600020ba <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60002326:	lsls	r1, r5, #1
60002328:	bpl.w	600020e8 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
6000232c:	ldr	r1, [pc, #192]	; (600023f0 <CrashReportClass::printTo(Print&) const+0x470>)
6000232e:	b.n	600020e2 <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
60002330:	ldr	r1, [pc, #192]	; (600023f4 <CrashReportClass::printTo(Print&) const+0x474>)
60002332:	mov	r0, r4
60002334:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
60002338:	ldr	r1, [pc, #188]	; (600023f8 <CrashReportClass::printTo(Print&) const+0x478>)
6000233a:	mov	r0, r4
6000233c:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
60002340:	ldr	r1, [pc, #184]	; (600023fc <CrashReportClass::printTo(Print&) const+0x47c>)
60002342:	mov	r0, r4
60002344:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
60002348:	ldr	r1, [pc, #180]	; (60002400 <CrashReportClass::printTo(Print&) const+0x480>)
6000234a:	mov	r0, r4
6000234c:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
60002350:	ldr	r1, [pc, #176]	; (60002404 <CrashReportClass::printTo(Print&) const+0x484>)
60002352:	mov	r0, r4
60002354:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
60002358:	ldr	r1, [pc, #172]	; (60002408 <CrashReportClass::printTo(Print&) const+0x488>)
6000235a:	mov	r0, r4
6000235c:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
60002360:	b.n	6000212c <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60002362:	ldr	r7, [pc, #168]	; (6000240c <CrashReportClass::printTo(Print&) const+0x48c>)
60002364:	ldr.w	r3, [r7, #192]	; 0xc0
60002368:	cbz	r3, 600023dc <CrashReportClass::printTo(Print&) const+0x45c>
6000236a:	ldr.w	r6, [r7, #220]	; 0xdc
6000236e:	movs	r1, #28
60002370:	ldr	r0, [pc, #156]	; (60002410 <CrashReportClass::printTo(Print&) const+0x490>)
60002372:	bl	600024e0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002376:	cmp	r6, r0
60002378:	bne.n	600023dc <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
6000237a:	ldr.w	r8, [pc, #160]	; 6000241c <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000237e:	ldr.w	r9, [pc, #160]	; 60002420 <CrashReportClass::printTo(Print&) const+0x4a0>
60002382:	ldr.w	sl, [pc, #140]	; 60002410 <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002386:	movs	r3, #1
60002388:	ldr.w	r2, [r7, #192]	; 0xc0
6000238c:	mov	r6, r5
6000238e:	lsls	r3, r5
60002390:	adds	r5, #1
60002392:	tst	r3, r2
60002394:	beq.n	600023d8 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002396:	mov	r1, r8
60002398:	mov	r0, r4
6000239a:	bl	60002528 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000239e:	mov	r1, r5
600023a0:	add.w	r6, sl, r6, lsl #2
600023a4:	mov	r0, r4
600023a6:	bl	60002490 <___ZN5Print5printEl_veneer>
        p.print(" was ");
600023aa:	mov	r1, r9
600023ac:	mov	r0, r4
600023ae:	bl	60002528 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600023b2:	movs	r3, #0
600023b4:	movs	r2, #10
600023b6:	ldr	r1, [r6, #4]
600023b8:	mov	r0, r4
600023ba:	bl	600024f8 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
600023be:	ldr	r1, [pc, #84]	; (60002414 <CrashReportClass::printTo(Print&) const+0x494>)
600023c0:	mov	r0, r4
600023c2:	bl	60002528 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
600023c6:	ldr	r1, [r6, #4]
600023c8:	movs	r2, #16
600023ca:	mov	r0, r4
600023cc:	bl	60002518 <___ZN5Print5printEmi_veneer>
        p.println(")");
600023d0:	ldr	r1, [pc, #68]	; (60002418 <CrashReportClass::printTo(Print&) const+0x498>)
600023d2:	mov	r0, r4
600023d4:	bl	600024c8 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
600023d8:	cmp	r5, #6
600023da:	bne.n	60002386 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
600023dc:	bl	60001f0c <CrashReportClass::clear()>
}
600023e0:	movs	r0, #1
600023e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
600023e6:	nop
600023e8:	.word	0x2000182c
600023ec:	.word	0x20001855
600023f0:	.word	0x200018a1
600023f4:	.word	0x20001909
600023f8:	.word	0x20001921
600023fc:	.word	0x2000196a
60002400:	.word	0x200019b4
60002404:	.word	0x200019d9
60002408:	.word	0x20001a21
6000240c:	.word	0x2027ff00
60002410:	.word	0x2027ffc0
60002414:	.word	0x20001c71
60002418:	.word	0x20001a1f
6000241c:	.word	0x20001c62
60002420:	.word	0x200018da

60002424 <CrashReportClass::operator bool()>:
{
60002424:	push	{r3, lr}
	if (isvalid(info)) return true;
60002426:	bl	60001eb8 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
6000242a:	subs	r0, #0
6000242c:	it	ne
6000242e:	movne	r0, #1
60002430:	pop	{r3, pc}
60002432:	nop

60002434 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002434:	ldr	r3, [pc, #60]	; (60002474 <analog_init+0x40>)
60002436:	ldr	r2, [r3, #108]	; 0x6c
60002438:	orr.w	r2, r2, #196608	; 0x30000
6000243c:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
6000243e:	ldr	r2, [r3, #108]	; 0x6c
60002440:	orr.w	r2, r2, #768	; 0x300
60002444:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002446:	sub.w	r3, r3, #229376	; 0x38000
6000244a:	movw	r2, #1591	; 0x637
6000244e:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002450:	movs	r2, #160	; 0xa0
60002452:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002454:	ldr	r2, [r3, #72]	; 0x48
60002456:	lsls	r2, r2, #24
60002458:	bmi.n	60002454 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000245a:	ldr	r2, [pc, #28]	; (60002478 <analog_init+0x44>)
6000245c:	movw	r3, #1591	; 0x637
60002460:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002462:	movs	r3, #160	; 0xa0
60002464:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002466:	ldr	r3, [r2, #72]	; 0x48
60002468:	ands.w	r3, r3, #128	; 0x80
6000246c:	bne.n	60002466 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000246e:	ldr	r2, [pc, #12]	; (6000247c <analog_init+0x48>)
60002470:	strb	r3, [r2, #0]
}
60002472:	bx	lr
60002474:	.word	0x400fc000
60002478:	.word	0x400c8000
6000247c:	.word	0x20022234

60002480 <_init>:
60002480:	push	{r3, r4, r5, r6, r7, lr}
60002482:	nop
60002484:	pop	{r3, r4, r5, r6, r7}
60002486:	pop	{r3}
60002488:	mov	lr, r3
6000248a:	bx	lr
6000248c:	movs	r0, r0
	...

60002490 <___ZN5Print5printEl_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <___ZN5Print5printEl_veneer+0x4>
60002494:	.word	0x0000cdcf

60002498 <___ZN5Print7printlnEv_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN5Print7printlnEv_veneer+0x4>
6000249c:	.word	0x0000cde1

600024a0 <___ZN5Print10printFloatEdh_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN5Print10printFloatEdh_veneer+0x4>
600024a4:	.word	0x0000ced9

600024a8 <__set_arm_clock_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <__set_arm_clock_veneer+0x4>
600024ac:	.word	0x0000b0dd

600024b0 <__delay_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <__delay_veneer+0x4>
600024b4:	.word	0x0000be25

600024b8 <__main_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <__main_veneer+0x4>
600024bc:	.word	0x0000cceb

600024c0 <___Z12estAlarmTimem_veneer>:
600024c0:	ldr.w	pc, [pc]	; 600024c4 <___Z12estAlarmTimem_veneer+0x4>
600024c4:	.word	0x000036e1

600024c8 <___ZN5Print7printlnEPKc_veneer>:
600024c8:	ldr.w	pc, [pc]	; 600024cc <___ZN5Print7printlnEPKc_veneer+0x4>
600024cc:	.word	0x0000cc79

600024d0 <___ZN5Print5printEh_veneer>:
600024d0:	ldr.w	pc, [pc]	; 600024d4 <___ZN5Print5printEh_veneer+0x4>
600024d4:	.word	0x0000cc69

600024d8 <___ZN5Print7printlnEmi_veneer>:
600024d8:	ldr.w	pc, [pc]	; 600024dc <___ZN5Print7printlnEmi_veneer+0x4>
600024dc:	.word	0x0000cc8d

600024e0 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
600024e0:	ldr.w	pc, [pc]	; 600024e4 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
600024e4:	.word	0x0000cca1

600024e8 <__usb_init_serialnumber_veneer>:
600024e8:	ldr.w	pc, [pc]	; 600024ec <__usb_init_serialnumber_veneer+0x4>
600024ec:	.word	0x0000c9f9

600024f0 <__memset_veneer>:
600024f0:	ldr.w	pc, [pc]	; 600024f4 <__memset_veneer+0x4>
600024f4:	.word	0x0000a899

600024f8 <___ZN5Print11printNumberEmhh_veneer>:
600024f8:	ldr.w	pc, [pc]	; 600024fc <___ZN5Print11printNumberEmhh_veneer+0x4>
600024fc:	.word	0x0000ce33

60002500 <___ZN7TwoWire8setClockEm_veneer>:
60002500:	ldr.w	pc, [pc]	; 60002504 <___ZN7TwoWire8setClockEm_veneer+0x4>
60002504:	.word	0x00005b49

60002508 <__pwm_init_veneer>:
60002508:	ldr.w	pc, [pc]	; 6000250c <__pwm_init_veneer+0x4>
6000250c:	.word	0x0000c6c1

60002510 <____libc_init_array_veneer>:
60002510:	ldr.w	pc, [pc]	; 60002514 <____libc_init_array_veneer+0x4>
60002514:	.word	0x0000f389

60002518 <___ZN5Print5printEmi_veneer>:
60002518:	ldr.w	pc, [pc]	; 6000251c <___ZN5Print5printEmi_veneer+0x4>
6000251c:	.word	0x0000cc71

60002520 <__sm_set_pool_veneer>:
60002520:	ldr.w	pc, [pc]	; 60002524 <__sm_set_pool_veneer+0x4>
60002524:	.word	0x0000c4a7

60002528 <___ZN5Print5printEPKc_veneer>:
60002528:	ldr.w	pc, [pc]	; 6000252c <___ZN5Print5printEPKc_veneer+0x4>
6000252c:	.word	0x0000cc61

60002530 <__frame_dummy_init_array_entry>:
60002530:	E.......1....9..

Disassembly of section .text.progmem:

60002540 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60002540:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002544:	ldr	r3, [pc, #60]	; (60002584 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002546:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000254a:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000254e:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002552:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60002554:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002558:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;  //Switch on PLL
6000255c:	ldr	r2, [r3, #112]	; 0x70
6000255e:	bic.w	r2, r2, #4096	; 0x1000
60002562:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60002564:	ldr	r2, [r3, #112]	; 0x70
60002566:	cmp	r2, #0
60002568:	bge.n	60002564 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000256a:	ldr.w	r2, [r3, #368]	; 0x170
6000256e:	bic.w	r2, r2, #8388608	; 0x800000
60002572:	bic.w	r2, r2, #32768	; 0x8000
60002576:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;   //Disable Bypass
6000257a:	ldr	r2, [r3, #112]	; 0x70
6000257c:	bic.w	r2, r2, #65536	; 0x10000
60002580:	str	r2, [r3, #112]	; 0x70
  }
60002582:	bx	lr
60002584:	.word	0x400d8000

60002588 <TwoWire::i2c4_hardware>:
60002588:	...@............
60002598:	...@............
	...
600025b0:	...........@....
600025c0:	................
600025d0:	....=[..

600025d8 <TwoWire::i2c3_hardware>:
600025d8:	p..@............
600025e8:	...@....,.......
600025f8:	...@............
60002608:	...@....-.......
60002618:	...@........1[..

60002628 <TwoWire::i2c1_hardware>:
60002628:	p..@............
60002638:	...@............
	...
60002650:	...........@....
60002660:	................
60002670:	....%[..

60002678 <usb_string_mtp>:
60002678:	..M.T.P.

60002680 <usb_string_product_name_default>:
60002680:	 .T.e.e.n.s.y. .
60002690:	M.T.P. .D.i.s.k.

600026a0 <usb_string_manufacturer_name_default>:
600026a0:	..T.e.e.n.s.y.d.
600026b0:	u.i.n.o.

600026b8 <string0>:
600026b8:	....

600026bc <usb_config_descriptor_12>:
600026bc:	..i.....2.......
600026cc:	...........$....
600026dc:	$....$...$......
600026ec:	................
600026fc:	.@......@.......
6000270c:	........@......@
6000271c:	...... ..

60002725 <usb_config_descriptor_480>:
60002725:	..i.....2.......
60002735:	...........$....
60002745:	$....$...$......
60002755:	................
60002765:	................
60002775:	................
60002785:	...... ..

6000278e <qualifier_descriptor>:
6000278e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
  #endif
}

static uint32_t have_disk=0;
void printBin(uint32_t x) 
{ for (int i = 31; i >= 0; i--) { Serial.print(bitRead(x, i)); if(!(i%8)) Serial.print(' '); }}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200026c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200026c0
      memcpy(buffer, rx_event_buffer, len);
      memset(rx_event_transfer, 0, sizeof(rx_event_transfer));

      NVIC_DISABLE_IRQ(IRQ_USB1);
      usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
      usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      NVIC_ENABLE_IRQ(IRQ_USB1);
      return MTP_EVENT_SIZE;
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
      NVIC_ENABLE_IRQ(IRQ_USB1);
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
    }
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
      56:	b.w	20 <register_tm_clones>
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20021498
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60018400

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:

  const char *sd_str[]={"sd"};          // edit to reflect your configuration
  const int cs[] = {5};      // edit to reflect your configuration

  const int nsd = sizeof(sd_str)/sizeof(const char *);
  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	7b78 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6ed8 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	7744 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	78ca <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	627a <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	caa0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200222af
     154:	.word	0x200222ae
     158:	.word	0x20021bd0
     15c:	.word	0x20021be0

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	f490 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	cde0 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:
  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
//class MTPStorage_SD : public MTPStorageInterface, mSD_Base
class MTPStorage_SD : public mSD_Base
     1a4:	push	{r3, r4, r5, lr}
class StreamFile : public stream_t, public BaseFile {
     1a6:	ldr	r5, [pc, #44]	; (1d4 <MTPStorage_SD::~MTPStorage_SD()+0x30>)
     1a8:	mov	r4, r0
  ~FsBaseFile() {close();}
     1aa:	add.w	r0, r0, #340	; 0x154
     1ae:	str.w	r5, [r0, #-16]
     1b2:	bl	8dd8 <FsBaseFile::close()>
     1b6:	add.w	r0, r4, #260	; 0x104
     1ba:	str.w	r5, [r4, #244]	; 0xf4
     1be:	bl	8dd8 <FsBaseFile::close()>
     1c2:	add.w	r0, r4, #180	; 0xb4
     1c6:	str.w	r5, [r4, #164]	; 0xa4
     1ca:	bl	8dd8 <FsBaseFile::close()>
     1ce:	mov	r0, r4
     1d0:	pop	{r3, r4, r5, pc}
     1d2:	nop
     1d4:	.word	0x2000042c

000001d8 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1d8:	ldr	r3, [r0, #56]	; 0x38
     1da:	cbz	r3, 1e2 <FsBaseFile::write(void const*, unsigned int)+0xa>
     1dc:	mov	r0, r3
     1de:	b.w	8058 <FatFile::write(void const*, unsigned int)>
     1e2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1e4:	cbz	r0, 1ea <FsBaseFile::write(void const*, unsigned int)+0x12>
     1e6:	b.w	7230 <ExFatFile::write(void const*, unsigned int)>
  }
     1ea:	bx	lr

000001ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1ec:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1ee:	adds	r0, #16
     1f0:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
  }
     1f4:	pop	{r3, pc}

000001f6 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1f6:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     1f8:	movs	r2, #1
     1fa:	strb.w	r1, [sp, #7]
     1fe:	add.w	r1, sp, #7
     202:	adds	r0, #16
     204:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
  }
     208:	add	sp, #12
     20a:	ldr.w	pc, [sp], #4
	...

00000210 <stopUSB()>:
  { USB1_USBCMD = 0;  // disconnect USB
     210:	ldr	r3, [pc, #12]	; (220 <stopUSB()+0x10>)
     212:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     214:	movs	r0, #100	; 0x64
  { USB1_USBCMD = 0;  // disconnect USB
     216:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     21a:	b.w	be24 <delay>
     21e:	nop
     220:	.word	0x402e0000

00000224 <resetUSB()>:
  {
     224:	push	{r4, lr}
      while(!Serial) mtpd.loop();
     226:	ldr	r4, [pc, #24]	; (240 <resetUSB()+0x1c>)
    stopUSB();
     228:	bl	210 <stopUSB()>
    usb_init();
     22c:	bl	12798 <__usb_init_veneer>
      while(!Serial) mtpd.loop();
     230:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     234:	cbz	r0, 238 <resetUSB()+0x14>
  }
     236:	pop	{r4, pc}
      while(!Serial) mtpd.loop();
     238:	mov	r0, r4
     23a:	bl	4fd0 <MTPD::loop()>
     23e:	b.n	230 <resetUSB()+0xc>
     240:	.word	0x20002740

00000244 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     244:	mov.w	r3, #3758153728	; 0xe000e000
     248:	ldr	r2, [pc, #4]	; (250 <reboot()+0xc>)
     24a:	str.w	r2, [r3, #3340]	; 0xd0c
     24e:	bx	lr
     250:	.word	0x05fa0004

00000254 <getSerNum()>:
    SerNum=HW_OCOTP_MAC0 & 0xFFFFFF;
     254:	ldr	r3, [pc, #12]	; (264 <getSerNum()+0x10>)
     256:	ldr	r2, [pc, #16]	; (268 <getSerNum()+0x14>)
     258:	ldr.w	r3, [r3, #544]	; 0x220
     25c:	bic.w	r3, r3, #4278190080	; 0xff000000
     260:	str	r3, [r2, #0]
  }
     262:	bx	lr
     264:	.word	0x401f4400
     268:	.word	0x20006e08

0000026c <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     26c:	ldr	r3, [pc, #48]	; (2a0 <lowPowerInit()+0x34>)
     26e:	ldr	r2, [r3, #100]	; 0x64
     270:	orr.w	r2, r2, #131072	; 0x20000
  {
     274:	push	{r4, lr}
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     276:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     278:	ldr	r2, [r3, #84]	; 0x54
     27a:	bic.w	r2, r2, #35	; 0x23
     27e:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     280:	ldr	r2, [r3, #84]	; 0x54
     282:	orr.w	r2, r2, #1
     286:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");
     288:	dsb	sy
    for(int ii=0;ii<41;ii++) { pinMode(ii,INPUT_DISABLE); }
     28c:	movs	r4, #0
     28e:	uxtb	r0, r4
     290:	adds	r4, #1
     292:	movs	r1, #5
     294:	bl	c5b4 <pinMode>
     298:	cmp	r4, #41	; 0x29
     29a:	bne.n	28e <lowPowerInit()+0x22>
  }
     29c:	pop	{r4, pc}
     29e:	nop
     2a0:	.word	0x400fc000

000002a4 <stopSystem()>:
  { //shutting down power
     2a4:	push	{r3, lr}
    stopSD(); 
     2a6:	bl	3078 <stopSD()>
    adc_exit();
     2aa:	bl	3d50 <adc_exit()>
  }
     2ae:	ldmia.w	sp!, {r3, lr}
    stopUSB();
     2b2:	b.w	210 <stopUSB()>
	...

000002b8 <loop>:
{
     2b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     2bc:	ldr	r6, [pc, #408]	; (458 <loop+0x1a0>)
{
     2be:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     2c0:	ldr	r5, [pc, #408]	; (45c <loop+0x1a4>)
  loopCount++;
     2c2:	ldr	r3, [r6, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2c4:	ldr	r4, [pc, #408]	; (460 <loop+0x1a8>)
  loopCount++;
     2c6:	adds	r3, #1
     2c8:	str	r3, [r6, #0]
  nb = getDataCount();
     2ca:	bl	2dbc <getDataCount()>
  if(nb>mxb) mxb=nb;
     2ce:	ldrh	r3, [r5, #0]
     2d0:	cmp	r3, r0
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2d2:	ldrsh.w	r3, [r4]
  if(nb>mxb) mxb=nb;
     2d6:	it	cc
     2d8:	strhcc	r0, [r5, #0]
  if(status==-99) status = (termon==1)? STOPPED: CLOSED;
     2da:	adds	r3, #99	; 0x63
     2dc:	bne.n	2ee <loop+0x36>
     2de:	ldr	r3, [pc, #388]	; (464 <loop+0x1ac>)
     2e0:	ldr	r3, [r3, #0]
     2e2:	cmp	r3, #1
     2e4:	mov.w	r3, #4294967295
     2e8:	it	ne
     2ea:	movne	r3, #0
     2ec:	strh	r3, [r4, #0]
  status = menu(status);
     2ee:	ldrsh.w	r0, [r4]
     2f2:	bl	28f8 <menu(short)>
      if(status<0)
     2f6:	cmp	r0, #0
  status = menu(status);
     2f8:	strh	r0, [r4, #0]
      if(status<0)
     2fa:	bge.n	302 <loop+0x4a>
      { mtpd.loop();
     2fc:	ldr	r0, [pc, #360]	; (468 <loop+0x1b0>)
     2fe:	bl	4fd0 <MTPD::loop()>
    status=saveData(status);  
     302:	ldrsh.w	r0, [r4]
     306:	bl	385c <saveData(short)>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     30a:	ldr	r3, [pc, #352]	; (46c <loop+0x1b4>)
  if((t1=millis())>(t0+1000))
     30c:	ldr	r7, [pc, #352]	; (470 <loop+0x1b8>)
     30e:	ldr	r3, [r3, #0]
    status=saveData(status);  
     310:	strh	r0, [r4, #0]
     312:	str	r3, [sp, #28]
  if((t1=millis())>(t0+1000))
     314:	ldr	r3, [r7, #0]
     316:	ldr	r2, [sp, #28]
     318:	add.w	r3, r3, #1000	; 0x3e8
     31c:	cmp	r3, r2
     31e:	bcs.n	416 <loop+0x15e>
    if(monitor)
     320:	ldr	r3, [pc, #336]	; (474 <loop+0x1bc>)
     322:	ldr.w	sl, [pc, #400]	; 4b4 <loop+0x1fc>
     326:	ldrsh.w	r3, [r3]
     32a:	ldr.w	r9, [pc, #396]	; 4b8 <loop+0x200>
     32e:	ldr.w	r8, [pc, #396]	; 4bc <loop+0x204>
     332:	cmp	r3, #0
     334:	beq.n	400 <loop+0x148>
      rtc_get_datetime(&t);
     336:	add	r0, sp, #32
     338:	bl	426c <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     33c:	ldrsb.w	r3, [sp, #36]	; 0x24
     340:	ldrsh.w	r2, [sp, #32]
     344:	str	r3, [sp, #16]
     346:	ldrsb.w	r3, [sp, #39]	; 0x27
     34a:	ldr	r1, [pc, #300]	; (478 <loop+0x1c0>)
     34c:	str	r3, [sp, #12]
     34e:	ldrsb.w	r3, [sp, #38]	; 0x26
     352:	ldr	r0, [pc, #296]	; (47c <loop+0x1c4>)
     354:	str	r3, [sp, #8]
     356:	ldrsb.w	r3, [sp, #37]	; 0x25
     35a:	str	r3, [sp, #4]
     35c:	ldrsb.w	r3, [sp, #35]	; 0x23
     360:	str	r3, [sp, #0]
     362:	ldrsb.w	r3, [sp, #34]	; 0x22
     366:	bl	ce18 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     36a:	ldr	r1, [pc, #276]	; (480 <loop+0x1c8>)
     36c:	ldr	r0, [pc, #268]	; (47c <loop+0x1c4>)
     36e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     372:	ldr	r1, [r6, #0]
     374:	ldr	r0, [pc, #260]	; (47c <loop+0x1c4>)
     376:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     37a:	ldr	r1, [pc, #264]	; (484 <loop+0x1cc>)
     37c:	ldr	r0, [pc, #252]	; (47c <loop+0x1c4>)
     37e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     382:	ldr.w	r1, [sl]
     386:	ldr	r0, [pc, #244]	; (47c <loop+0x1c4>)
     388:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38c:	ldr	r1, [pc, #244]	; (484 <loop+0x1cc>)
     38e:	ldr	r0, [pc, #236]	; (47c <loop+0x1c4>)
     390:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     394:	ldr.w	r1, [r9]
     398:	ldr	r0, [pc, #224]	; (47c <loop+0x1c4>)
     39a:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     39e:	ldr	r1, [pc, #228]	; (484 <loop+0x1cc>)
     3a0:	ldr	r0, [pc, #216]	; (47c <loop+0x1c4>)
     3a2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     3a6:	ldrh	r2, [r5, #0]
     3a8:	ldr	r1, [pc, #220]	; (488 <loop+0x1d0>)
     3aa:	ldr	r0, [pc, #208]	; (47c <loop+0x1c4>)
     3ac:	bl	ce18 <Print::printf(char const*, ...)>
     3b0:	ldr	r1, [pc, #216]	; (48c <loop+0x1d4>)
     3b2:	ldr	r0, [pc, #200]	; (47c <loop+0x1c4>)
     3b4:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(have_disk);  Serial.print("  ");
     3b8:	ldr	r3, [pc, #212]	; (490 <loop+0x1d8>)
     3ba:	ldr	r0, [pc, #192]	; (47c <loop+0x1c4>)
     3bc:	ldr	r1, [r3, #0]
     3be:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3c2:	ldr	r1, [pc, #200]	; (48c <loop+0x1d4>)
     3c4:	ldr	r0, [pc, #180]	; (47c <loop+0x1c4>)
     3c6:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("; ");
     3ca:	ldr.w	r1, [r8]
     3ce:	ldr	r0, [pc, #172]	; (47c <loop+0x1c4>)
     3d0:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3d4:	ldr	r1, [pc, #188]	; (494 <loop+0x1dc>)
     3d6:	ldr	r0, [pc, #164]	; (47c <loop+0x1c4>)
     3d8:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3dc:	ldr	r3, [pc, #184]	; (498 <loop+0x1e0>)
     3de:	ldrh	r4, [r3, #0]
     3e0:	sxth	r4, r4
     3e2:	cbnz	r4, 41e <loop+0x166>
          for(int ii=0; ii<8;ii++) {Serial.printf("%9d",logBuffer[ii]);}
     3e4:	ldr	r3, [pc, #180]	; (49c <loop+0x1e4>)
     3e6:	ldr	r1, [pc, #184]	; (4a0 <loop+0x1e8>)
     3e8:	ldr.w	fp, [pc, #144]	; 47c <loop+0x1c4>
     3ec:	ldr.w	r2, [r3, r4, lsl #2]
     3f0:	adds	r4, #1
     3f2:	mov	r0, fp
     3f4:	bl	ce18 <Print::printf(char const*, ...)>
     3f8:	cmp	r4, #8
     3fa:	ldr	r1, [pc, #164]	; (4a0 <loop+0x1e8>)
     3fc:	ldr	r3, [pc, #156]	; (49c <loop+0x1e4>)
     3fe:	bne.n	3ec <loop+0x134>
    loopCount=0;
     400:	movs	r3, #0
     402:	str	r3, [r6, #0]
    procCount=0;
     404:	str.w	r3, [sl]
    procMiss=0;
     408:	str.w	r3, [r9]
    mxb=0;
     40c:	strh	r3, [r5, #0]
    disk_count=0;
     40e:	str.w	r3, [r8]
    t0=t1;
     412:	ldr	r3, [sp, #28]
     414:	str	r3, [r7, #0]
  asm("wfi");
     416:	wfi
}
     418:	add	sp, #44	; 0x2c
     41a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     41e:	ldr.w	fp, [pc, #144]	; 4b0 <loop+0x1f8>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     422:	movs	r4, #0
     424:	ldr	r1, [pc, #124]	; (4a4 <loop+0x1ec>)
     426:	ldr	r3, [pc, #84]	; (47c <loop+0x1c4>)
     428:	adds	r4, #1
     42a:	mov	r0, r3
     42c:	ldr.w	r2, [fp], #4
     430:	bl	ce18 <Print::printf(char const*, ...)>
     434:	cmp	r4, #24
     436:	ldr	r3, [pc, #68]	; (47c <loop+0x1c4>)
     438:	ldr	r1, [pc, #104]	; (4a4 <loop+0x1ec>)
     43a:	bne.n	428 <loop+0x170>
        Serial.printf("%2d",max_stat);
     43c:	ldr	r4, [pc, #104]	; (4a8 <loop+0x1f0>)
     43e:	mov	r0, r3
     440:	ldr	r1, [pc, #104]	; (4ac <loop+0x1f4>)
     442:	ldr	r2, [r4, #0]
     444:	bl	ce18 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     448:	movs	r2, #96	; 0x60
     44a:	movs	r1, #0
     44c:	ldr	r0, [pc, #96]	; (4b0 <loop+0x1f8>)
     44e:	bl	a898 <memset>
        max_stat=0;        
     452:	movs	r3, #0
     454:	str	r3, [r4, #0]
     456:	b.n	400 <loop+0x148>
     458:	.word	0x200212a0
     45c:	.word	0x20021c0c
     460:	.word	0x20002244
     464:	.word	0x2001f840
     468:	.word	0x20002740
     46c:	.word	0x20021bd0
     470:	.word	0x2002129c
     474:	.word	0x20021c1a
     478:	.word	0x20001383
     47c:	.word	0x20001c8c
     480:	.word	0x200013a4
     484:	.word	0x200013ad
     488:	.word	0x200013a8
     48c:	.word	0x200013ac
     490:	.word	0x2002124c
     494:	.word	0x200013af
     498:	.word	0x20021c1c
     49c:	.word	0x20021464
     4a0:	.word	0x200013b2
     4a4:	.word	0x200013b6
     4a8:	.word	0x20021484
     4ac:	.word	0x200013bb
     4b0:	.word	0x200214b8
     4b4:	.word	0x200214b0
     4b8:	.word	0x200214b4
     4bc:	.word	0x200213f4

000004c0 <setup1()>:
{ delay(100);
     4c0:	push	{r4, lr}
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4c2:	ldr	r4, [pc, #52]	; (4f8 <setup1()+0x38>)
{ delay(100);
     4c4:	movs	r0, #100	; 0x64
     4c6:	bl	be24 <delay>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4ca:	ldr	r3, [r4, #0]
     4cc:	cbz	r3, 4ee <setup1()+0x2e>
  Serial.println("Setup1");
     4ce:	ldr	r1, [pc, #44]	; (4fc <setup1()+0x3c>)
     4d0:	ldr	r0, [pc, #44]	; (500 <setup1()+0x40>)
     4d2:	bl	190 <Print::println(char const*) [clone .isra.0]>
  i2s_setup();
     4d6:	bl	be0 <i2s_setup()>
  dma_setup();
     4da:	bl	c64 <dma_setup()>
  adc_init();
     4de:	bl	3d74 <adc_init()>
  Serial.println("Setup1 done");
     4e2:	ldr	r1, [pc, #32]	; (504 <setup1()+0x44>)
     4e4:	ldr	r0, [pc, #24]	; (500 <setup1()+0x40>)
}
     4e6:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4ea:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(10);} // wait for setup() to finish
     4ee:	movs	r0, #10
     4f0:	bl	be24 <delay>
     4f4:	b.n	4ca <setup1()+0xa>
     4f6:	nop
     4f8:	.word	0x2001f018
     4fc:	.word	0x20000e9f
     500:	.word	0x20001c8c
     504:	.word	0x20000ea6

00000508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     508:	push	{r4, r5, r6, lr}
     50a:	mov	r5, r0
     50c:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     510:	cbnz	r0, 536 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     512:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     514:	ldr.w	r0, [r5, #1152]	; 0x480
     518:	cbz	r0, 56c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     51a:	bl	84bc <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     51e:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     520:	cbz	r6, 532 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     522:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     526:	cbz	r0, 54c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     528:	ldr	r3, [r0, #0]
     52a:	movs	r1, #0
     52c:	ldr	r3, [r3, #68]	; 0x44
     52e:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     530:	cbz	r0, 54c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     532:	mov	r0, r4
     534:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     536:	ldr	r3, [r0, #0]
     538:	ldr	r3, [r3, #60]	; 0x3c
     53a:	blx	r3
     53c:	cmp	r0, #0
     53e:	beq.n	512 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     540:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     544:	cbnz	r0, 550 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     546:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     54a:	cbnz	r0, 55c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     54c:	movs	r4, #0
     54e:	b.n	532 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     550:	ldr	r3, [r0, #0]
     552:	ldr	r3, [r3, #64]	; 0x40
     554:	blx	r3
     556:	cmp	r0, #0
     558:	bne.n	512 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     55a:	b.n	546 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     55c:	ldr	r3, [r0, #0]
     55e:	movs	r1, #1
     560:	ldr	r3, [r3, #68]	; 0x44
     562:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     564:	mov	r6, r0
     566:	cmp	r0, #0
     568:	bne.n	514 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     56a:	b.n	54c <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     56c:	ldr.w	r0, [r5, #1156]	; 0x484
     570:	cmp	r0, #0
     572:	beq.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     574:	bl	6a8a <ExFatPartition::freeClusterCount()>
     578:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

0000057c <storage_configure()>:

  void storage_configure()
  {
     57c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    // Using SD card for storage
      for(int ii=0; ii<nsd; ii++)
      { 
        /* for spi cards need chip select pin */
        if(cs[ii]<BUILTIN_SDCARD)
        { pinMode(cs[ii],OUTPUT); digitalWrite(cs[ii],HIGH); 
     580:	movs	r1, #1
     582:	movs	r0, #5
     584:	movs	r4, #5
    spiConfigBackupPin = 255;
     586:	ldr	r5, [pc, #308]	; (6bc <storage_configure()+0x140>)
     588:	mov.w	r8, #4294967295
    sdioConfigBackup = sdioConfig;
     58c:	movs	r7, #0
     58e:	bl	c5b4 <pinMode>
     592:	movs	r1, #1
     594:	movs	r0, #5
     596:	bl	c574 <digitalWrite>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     59a:	ldr	r6, [pc, #292]	; (6c0 <storage_configure()+0x144>)
     59c:	mov.w	r1, #0
    spiConfigBackupPin = 255;
     5a0:	strb.w	r8, [r5, #1212]	; 0x4bc
     5a4:	mov	r0, r6
    sdioConfigBackup = sdioConfig;
     5a6:	strb.w	r7, [r5, #1224]	; 0x4c8
     5aa:	bl	a1f4 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     5ae:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
     5b0:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     5b4:	bl	98f0 <SdioCard::errorCode() const>
     5b8:	cbnz	r0, 5dc <storage_configure()+0x60>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     5ba:	movs	r3, #1
     5bc:	ldr.w	r1, [r5, #1164]	; 0x48c
     5c0:	mov	r0, r5
     5c2:	mov	r2, r3
     5c4:	bl	8f38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     5c8:	cbz	r0, 5dc <storage_configure()+0x60>
    return m_fVol ? m_fVol->clusterCount() :
     5ca:	ldr.w	r3, [r5, #1152]	; 0x480
     5ce:	cbnz	r3, 602 <storage_configure()+0x86>
     5d0:	ldr.w	r6, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     5d4:	cbz	r6, 606 <storage_configure()+0x8a>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     5d6:	ldr.w	r6, [r6, #1072]	; 0x430
     5da:	b.n	606 <storage_configure()+0x8a>
          spi_init();
        }
        int jj;
        for(jj=0;jj<5;jj++) if (sdx[ii].begin(SD_CONFIG)) break; else delay(1000);
     5dc:	mov.w	r0, #1000	; 0x3e8
     5e0:	bl	be24 <delay>
     5e4:	subs	r4, #1
     5e6:	bne.n	59a <storage_configure()+0x1e>
        if(jj==5)
        {
          Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5e8:	ldr	r3, [pc, #216]	; (6c4 <storage_configure()+0x148>)
     5ea:	mov	r2, r4
     5ec:	ldr	r1, [pc, #216]	; (6c8 <storage_configure()+0x14c>)
     5ee:	ldr	r3, [r3, #0]
     5f0:	ldr	r0, [pc, #216]	; (6cc <storage_configure()+0x150>)
     5f2:	str	r3, [sp, #0]
     5f4:	movs	r3, #5
     5f6:	bl	ce18 <Print::printf(char const*, ...)>
     5fa:	ldr	r0, [pc, #208]	; (6cc <storage_configure()+0x150>)
     5fc:	bl	cde0 <Print::println()>
      for(int ii=0; ii<nsd; ii++)
     600:	b.n	6a4 <storage_configure()+0x128>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     602:	ldr	r6, [r3, #28]
     604:	subs	r6, #1
          have_disk=0;
        }
        else
        {
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     606:	ldr	r0, [pc, #180]	; (6bc <storage_configure()+0x140>)
     608:	bl	508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     60c:	ldr.w	r3, [r5, #1152]	; 0x480
     610:	mov	r8, r0
     612:	cmp	r3, #0
     614:	beq.n	6ae <storage_configure()+0x132>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     616:	ldrb	r3, [r3, #6]
     618:	mov.w	r4, #512	; 0x200
     61c:	lsls	r4, r3
     61e:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     620:	ldr.w	r9, [pc, #160]	; 6c4 <storage_configure()+0x148>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     624:	movs	r7, #0
     626:	movs	r2, #0
     628:	mov.w	sl, #10
     62c:	ldr.w	r3, [r9]
     630:	ldr	r1, [pc, #156]	; (6d0 <storage_configure()+0x154>)
     632:	str	r3, [sp, #0]
     634:	movs	r3, #5
     636:	ldr	r0, [pc, #148]	; (6cc <storage_configure()+0x150>)
     638:	bl	ce18 <Print::printf(char const*, ...)>
          Serial.print("; total clusters: "); Serial.print(totalSize); 
     63c:	ldr	r1, [pc, #148]	; (6d4 <storage_configure()+0x158>)
     63e:	ldr	r0, [pc, #140]	; (6cc <storage_configure()+0x150>)
     640:	bl	18c <Print::print(char const*) [clone .isra.0]>
     644:	mov	r2, r6
     646:	mov	r3, r7
     648:	ldr	r0, [pc, #128]	; (6cc <storage_configure()+0x150>)
     64a:	strd	sl, r7, [sp]
     64e:	bl	ce46 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
          Serial.print(" free clusters: "); Serial.print(freeSize);
     652:	ldr	r1, [pc, #132]	; (6d8 <storage_configure()+0x15c>)
     654:	ldr	r0, [pc, #116]	; (6cc <storage_configure()+0x150>)
     656:	bl	18c <Print::print(char const*) [clone .isra.0]>
     65a:	mov	r2, r8
     65c:	mov	r3, r7
     65e:	ldr	r0, [pc, #108]	; (6cc <storage_configure()+0x150>)
     660:	strd	sl, r7, [sp]
     664:	bl	ce46 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
          Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     668:	ldr	r1, [pc, #112]	; (6dc <storage_configure()+0x160>)
     66a:	ldr	r0, [pc, #96]	; (6cc <storage_configure()+0x150>)
     66c:	bl	18c <Print::print(char const*) [clone .isra.0]>
     670:	lsr.w	r1, r4, sl
     674:	ldr	r0, [pc, #84]	; (6cc <storage_configure()+0x150>)
     676:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     67a:	ldr	r1, [pc, #100]	; (6e0 <storage_configure()+0x164>)
     67c:	ldr	r0, [pc, #76]	; (6cc <storage_configure()+0x150>)
     67e:	bl	190 <Print::println(char const*) [clone .isra.0]>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     682:	ldr	r3, [pc, #96]	; (6e4 <storage_configure()+0x168>)
     684:	ldr	r2, [r3, #0]
     686:	cmp	r2, #19
     688:	bgt.n	69e <storage_configure()+0x122>
          sd_name[fsCount] = name;
     68a:	add.w	r1, r3, r2, lsl #2
     68e:	ldr.w	r0, [r9]
     692:	str	r0, [r1, #4]
          sdx[fsCount++] = &fs;
     694:	adds	r1, r2, #1
     696:	str	r1, [r3, #0]
     698:	add.w	r3, r3, r2, lsl #2
     69c:	str	r5, [r3, #84]	; 0x54
            #else
              mtpd.addFilesystem(sdx[ii], sd_str[ii]);
            #endif
          #endif

          filing_init();
     69e:	movs	r4, #1
     6a0:	bl	3010 <filing_init()>
          have_disk=1;
     6a4:	ldr	r3, [pc, #64]	; (6e8 <storage_configure()+0x16c>)
     6a6:	str	r4, [r3, #0]
        }
      }
  }
     6a8:	add	sp, #8
     6aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6ae:	ldr.w	r4, [r5, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     6b2:	cmp	r4, #0
     6b4:	beq.n	620 <storage_configure()+0xa4>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     6b6:	ldr.w	r4, [r4, #1084]	; 0x43c
     6ba:	b.n	620 <storage_configure()+0xa4>
     6bc:	.word	0x20021548
     6c0:	.word	0x200219d8
     6c4:	.word	0x2000223c
     6c8:	.word	0x20000d7a
     6cc:	.word	0x20001c8c
     6d0:	.word	0x20000d29
     6d4:	.word	0x20000d40
     6d8:	.word	0x20000d53
     6dc:	.word	0x20000d64
     6e0:	.word	0x20000d73
     6e4:	.word	0x20021a18
     6e8:	.word	0x2002124c

000006ec <_GLOBAL__sub_I_storage>:
     6ec:	push	{r3, r4, r5, r6, r7, lr}
        fsCount = 0;
     6ee:	ldr	r5, [pc, #224]	; (7d0 <_GLOBAL__sub_I_storage+0xe4>)
     6f0:	movs	r4, #0
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6f2:	ldr	r3, [pc, #224]	; (7d4 <_GLOBAL__sub_I_storage+0xe8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6f4:	mov.w	r2, #1000	; 0x3e8
      MTPStorage_SD storage;
     6f8:	ldr	r7, [pc, #220]	; (7d8 <_GLOBAL__sub_I_storage+0xec>)
     6fa:	mov	r0, r5
// old MTP Responder.
class MTPD {
public:

//  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
  MTPD(MTPStorage_SD *storage): storage_(storage) {}
     6fc:	ldr	r6, [pc, #220]	; (7dc <_GLOBAL__sub_I_storage+0xf0>)
     6fe:	str.w	r3, [r5, #164]	; 0xa4
     702:	str.w	r3, [r5, #244]	; 0xf4
     706:	str.w	r3, [r5, #324]	; 0x144
class MTPStorage_SD : public mSD_Base
     70a:	mvn.w	r3, #1
     70e:	str.w	r2, [r5, #172]	; 0xac
     712:	ldr	r1, [pc, #204]	; (7e0 <_GLOBAL__sub_I_storage+0xf4>)
        fsCount = 0;
     714:	str	r4, [r5, #0]
	constexpr Print() : write_error(0) {}
     716:	str.w	r4, [r5, #168]	; 0xa8
     71a:	strb.w	r4, [r5, #176]	; 0xb0
     71e:	strb.w	r4, [r5, #256]	; 0x100
     722:	strb.w	r4, [r5, #336]	; 0x150
class MTPStorage_SD : public mSD_Base
     726:	str.w	r4, [r5, #412]	; 0x19c
     72a:	strh.w	r4, [r5, #424]	; 0x1a8
     72e:	strd	r4, r2, [r5, #248]	; 0xf8
     732:	strd	r4, r2, [r5, #328]	; 0x148
     736:	mov	r2, r7
     738:	strd	r3, r4, [r5, #416]	; 0x1a0
  FsBaseFile() {}
     73c:	strd	r4, r4, [r5, #236]	; 0xec
     740:	strd	r4, r4, [r5, #316]	; 0x13c
     744:	strd	r4, r4, [r5, #396]	; 0x18c
     748:	strd	r4, r4, [r5, #404]	; 0x194
     74c:	bl	d008 <__aeabi_atexit>
     750:	mov	r0, r6
     752:	mov	r1, r4
     754:	mov.w	r2, #512	; 0x200
     758:	str.w	r5, [r0], #32
     75c:	bl	a898 <memset>
     760:	mov	r1, r4
     762:	mov.w	r2, #512	; 0x200
     766:	add.w	r0, r6, #544	; 0x220
     76a:	bl	a898 <memset>
     76e:	add.w	r3, r6, #4096	; 0x1000
     772:	movw	r2, #511	; 0x1ff
  SdFs sdx[nsd];
     776:	mov	r0, r4
     778:	str.w	r4, [r3, #1060]	; 0x424
     77c:	strh.w	r2, [r3, #1056]	; 0x420
     780:	strb.w	r4, [r3, #1064]	; 0x428
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     784:	ldr	r2, [pc, #92]	; (7e4 <_GLOBAL__sub_I_storage+0xf8>)
     786:	str.w	r4, [r3, #1068]	; 0x42c
  FsVolume() {}
     78a:	ldr	r3, [pc, #92]	; (7e8 <_GLOBAL__sub_I_storage+0xfc>)
     78c:	ldr	r1, [pc, #92]	; (7ec <_GLOBAL__sub_I_storage+0x100>)
     78e:	str.w	r2, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     792:	ldr	r2, [pc, #92]	; (7f0 <_GLOBAL__sub_I_storage+0x104>)
     794:	str.w	r4, [r3, #1152]	; 0x480
     798:	str.w	r2, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     79c:	movs	r2, #7
     79e:	str.w	r4, [r3, #1156]	; 0x484
     7a2:	str.w	r2, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     7a6:	movs	r2, #41	; 0x29
class SdBase : public Vol {
     7a8:	str.w	r4, [r3, #1164]	; 0x48c
     7ac:	strb.w	r2, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     7b0:	ldr	r2, [pc, #64]	; (7f4 <_GLOBAL__sub_I_storage+0x108>)
  SdioConfig() {}
     7b2:	strh.w	r4, [r3, #1176]	; 0x498
     7b6:	str.w	r2, [r3, #1180]	; 0x49c
     7ba:	mov	r2, r7
  SharedSpiCard() {}
     7bc:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     7c0:	strb.w	r4, [r3, #1208]	; 0x4b8
     7c4:	strb.w	r4, [r3, #1224]	; 0x4c8
  }
     7c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  SdFs sdx[nsd];
     7cc:	b.w	d008 <__aeabi_atexit>
     7d0:	.word	0x20021a18
     7d4:	.word	0x200004f4
     7d8:	.word	0x20002064
     7dc:	.word	0x20002740
     7e0:	.word	0x000001a5
     7e4:	.word	0x2000053c
     7e8:	.word	0x20021548
     7ec:	.word	0x0000006d
     7f0:	.word	0x003d0900
     7f4:	.word	0x2000045c

000007f8 <setup>:
{
     7f8:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     7fa:	ldr	r4, [pc, #336]	; (94c <setup+0x154>)
     7fc:	sub	sp, #28
    set_arm_clock(96'000'000);
     7fe:	ldr	r0, [pc, #336]	; (950 <setup+0x158>)
				if (elapsed > 750) break;
     800:	movw	r7, #750	; 0x2ee
     804:	bl	b0dc <set_arm_clock>
			if (usb_configuration) {
     808:	ldr	r6, [pc, #328]	; (954 <setup+0x15c>)
		uint32_t millis_begin = systick_millis_count;
     80a:	ldr	r5, [r4, #0]
		while (!(*this)) {
     80c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     810:	cmp	r0, #0
     812:	beq.w	930 <setup+0x138>
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     816:	bl	2528 <loadParameters()>
  while(millis()<(WAIT_SERIAL*1000)) if(Serial) { termon=1; break;}
     81a:	movw	r5, #9999	; 0x270f
  uint16_t *params=loadParameters();  // get parameters from EEPROM
     81e:	mov	r6, r0
     820:	ldr	r3, [r4, #0]
  while(millis()<(WAIT_SERIAL*1000)) if(Serial) { termon=1; break;}
     822:	cmp	r3, r5
     824:	bhi.n	834 <setup+0x3c>
     826:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     82a:	cmp	r0, #0
     82c:	beq.n	820 <setup+0x28>
     82e:	ldr	r3, [pc, #296]	; (958 <setup+0x160>)
     830:	movs	r2, #1
     832:	str	r2, [r3, #0]
  Serial.println("\nSetup");
     834:	ldr	r1, [pc, #292]	; (95c <setup+0x164>)
     836:	ldr	r0, [pc, #296]	; (960 <setup+0x168>)
     838:	bl	190 <Print::println(char const*) [clone .isra.0]>
     83c:	ldr	r1, [r4, #0]
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
	// Print a signed number and newline
	size_t println(long n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned long n)			{ return print(n) + println(); }
     83e:	ldr	r0, [pc, #288]	; (960 <setup+0x168>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     840:	movs	r4, #0
     842:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     846:	ldr	r0, [pc, #280]	; (960 <setup+0x168>)
     848:	bl	cde0 <Print::println()>
  Serial.print("params[0] = "); Serial.println(params[0]);
     84c:	ldr	r1, [pc, #276]	; (964 <setup+0x16c>)
     84e:	ldr	r0, [pc, #272]	; (960 <setup+0x168>)
     850:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     854:	ldr	r5, [pc, #264]	; (960 <setup+0x168>)
     856:	ldrh	r1, [r6, #0]
     858:	ldr	r0, [pc, #260]	; (960 <setup+0x168>)
  for(int ii=0;ii<16;ii++) {Serial.print(ii); Serial.print(" "); Serial.println(params[ii]);}
     85a:	ldr	r7, [pc, #268]	; (968 <setup+0x170>)
     85c:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     860:	ldr	r0, [pc, #252]	; (960 <setup+0x168>)
     862:	bl	cde0 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
     866:	mov	r1, r4
     868:	mov	r0, r5
     86a:	bl	cdce <Print::print(long)>
     86e:	mov	r1, r7
     870:	mov	r0, r5
     872:	bl	18c <Print::print(char const*) [clone .isra.0]>
     876:	ldrh.w	r1, [r6, r4, lsl #1]
     87a:	mov	r0, r5
     87c:	adds	r4, #1
     87e:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     882:	mov	r0, r5
     884:	bl	cde0 <Print::println()>
     888:	cmp	r4, #16
     88a:	bne.n	866 <setup+0x6e>
    if(CrashReport) Serial.print(CrashReport);
     88c:	ldr	r0, [pc, #220]	; (96c <setup+0x174>)
     88e:	bl	12778 <___ZN16CrashReportClasscvbEv_veneer>
     892:	cbz	r0, 89c <setup+0xa4>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     894:	ldr	r1, [pc, #200]	; (960 <setup+0x168>)
     896:	ldr	r0, [pc, #212]	; (96c <setup+0x174>)
     898:	bl	12780 <___ZNK16CrashReportClass7printToER5Print_veneer>
        usb_init_events();
     89c:	bl	4c50 <usb_init_events>
    usbPowerSetup();  
     8a0:	bl	3d04 <usbPowerSetup()>
    lowPowerInit();
     8a4:	bl	26c <lowPowerInit()>
  Serial.print("SerNum: "); Serial.println(SerNum,HEX); Serial.flush();
     8a8:	ldr	r1, [pc, #196]	; (970 <setup+0x178>)
     8aa:	ldr	r0, [pc, #180]	; (960 <setup+0x168>)
  getSerNum();
     8ac:	bl	254 <getSerNum()>
  Serial.print("SerNum: "); Serial.println(SerNum,HEX); Serial.flush();
     8b0:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     8b4:	ldr	r1, [pc, #188]	; (974 <setup+0x17c>)
     8b6:	movs	r3, #0
     8b8:	movs	r2, #16
     8ba:	ldr	r1, [r1, #0]
     8bc:	ldr	r0, [pc, #160]	; (960 <setup+0x168>)
     8be:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     8c2:	ldr	r0, [pc, #156]	; (960 <setup+0x168>)
     8c4:	bl	cde0 <Print::println()>
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     8c8:	bl	b048 <usb_serial_flush_output>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     8cc:	add	r0, sp, #16
     8ce:	bl	426c <rtc_get_datetime(datetime_t*)>
     8d2:	cbnz	r0, 8dc <setup+0xe4>
     8d4:	ldr	r1, [pc, #160]	; (978 <setup+0x180>)
     8d6:	ldr	r0, [pc, #136]	; (960 <setup+0x168>)
     8d8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     8dc:	ldrsb.w	r3, [sp, #23]
     8e0:	ldrsh.w	r2, [sp, #16]
     8e4:	str	r3, [sp, #12]
     8e6:	ldrsb.w	r3, [sp, #22]
     8ea:	ldr	r1, [pc, #144]	; (97c <setup+0x184>)
     8ec:	str	r3, [sp, #8]
     8ee:	ldrsb.w	r3, [sp, #21]
     8f2:	ldr	r0, [pc, #108]	; (960 <setup+0x168>)
     8f4:	str	r3, [sp, #4]
     8f6:	ldrsb.w	r3, [sp, #19]
     8fa:	str	r3, [sp, #0]
     8fc:	ldrsb.w	r3, [sp, #18]
     900:	bl	ce18 <Print::printf(char const*, ...)>
  Serial.println();
     904:	ldr	r0, [pc, #88]	; (960 <setup+0x168>)
     906:	bl	cde0 <Print::println()>
  Serial.println("filing_init");
     90a:	ldr	r1, [pc, #116]	; (980 <setup+0x188>)
     90c:	ldr	r0, [pc, #80]	; (960 <setup+0x168>)
     90e:	bl	190 <Print::println(char const*) [clone .isra.0]>
  storage_configure();  
     912:	bl	57c <storage_configure()>
  Serial.println("Setup done"); Serial.flush();
     916:	ldr	r1, [pc, #108]	; (984 <setup+0x18c>)
     918:	ldr	r0, [pc, #68]	; (960 <setup+0x168>)
     91a:	bl	190 <Print::println(char const*) [clone .isra.0]>
     91e:	bl	b048 <usb_serial_flush_output>
  setup_ready=1;
     922:	ldr	r3, [pc, #100]	; (988 <setup+0x190>)
     924:	movs	r2, #1
     926:	str	r2, [r3, #0]
    setup1();
     928:	bl	4c0 <setup1()>
}
     92c:	add	sp, #28
     92e:	pop	{r4, r5, r6, r7, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
     930:	ldr	r3, [r4, #0]
			if (usb_configuration) {
     932:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     934:	subs	r3, r3, r5
			if (usb_configuration) {
     936:	cbz	r2, 946 <setup+0x14e>
				if (elapsed > 2000) break;
     938:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     93c:	bhi.w	816 <setup+0x1e>
			yield();
     940:	bl	caa0 <yield>
     944:	b.n	80c <setup+0x14>
				if (elapsed > 750) break;
     946:	cmp	r3, r7
     948:	b.n	93c <setup+0x144>
     94a:	nop
     94c:	.word	0x20021bd0
     950:	.word	0x05b8d800
     954:	.word	0x200222af
     958:	.word	0x2001f840
     95c:	.word	0x200013bf
     960:	.word	0x20001c8c
     964:	.word	0x200013c6
     968:	.word	0x200013ad
     96c:	.word	0x20001c80
     970:	.word	0x200013d3
     974:	.word	0x20006e08
     978:	.word	0x200013dc
     97c:	.word	0x200013f1
     980:	.word	0x20001418
     984:	.word	0x20001424
     988:	.word	0x2001f018

0000098c <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     98c:	push	{r4, lr}
     98e:	mov	r4, r0
		release();
     990:	bl	cc0c <DMAChannel::release()>
	}
     994:	mov	r0, r4
     996:	pop	{r4, pc}

00000998 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     998:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     99a:	ldr	r3, [pc, #192]	; (a5c <acq_isr()+0xc4>)
     99c:	ldr	r2, [r3, #0]
     99e:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     9a0:	ldrb	r2, [r3, #4]
     9a2:	ldr	r3, [pc, #188]	; (a60 <acq_isr()+0xc8>)
     9a4:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     9a6:	ldr	r2, [pc, #188]	; (a64 <acq_isr()+0xcc>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     9a8:	sub.w	r3, r2, #2048	; 0x800
     9ac:	cmp	r1, r2
     9ae:	it	cc
     9b0:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     9b2:	add.w	r5, r3, #2048	; 0x800
	asm("dsb");
     9b6:	dsb	sy
     9ba:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     9be:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     9c0:	mov.w	r0, #3758153728	; 0xe000e000
     9c4:	cmp	r2, r5
     9c6:	ite	hi
     9c8:	movhi	r2, #1
     9ca:	movls	r2, #64	; 0x40
     9cc:	add.w	r2, r3, r2, lsl #5
     9d0:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     9d4:	adds	r1, #32
	} while (location < end_addr);
     9d6:	cmp	r1, r2
     9d8:	bne.n	9d0 <acq_isr()+0x38>
	asm("dsb");
     9da:	dsb	sy
	asm("isb");
     9de:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     9e2:	ldr	r1, [pc, #132]	; (a68 <acq_isr()+0xd0>)
     9e4:	ldr	r2, [r1, #0]
     9e6:	adds	r2, #1
     9e8:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) 
     9ea:	ldr	r2, [pc, #128]	; (a6c <acq_isr()+0xd4>)
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>shift;   
     9ec:	ldr	r1, [pc, #128]	; (a70 <acq_isr()+0xd8>)
     9ee:	ldrh	r4, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) 
     9f0:	adds	r3, #16
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>shift;   
     9f2:	ldr.w	r0, [r3, #-16]
    for(int ii=0; ii<NSAMP; ii++) 
     9f6:	adds	r2, #16
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>shift;   
     9f8:	sxth	r4, r4
     9fa:	asrs	r0, r4
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>shift;   
     9fc:	ldrh	r4, [r1, #0]
        acqBuffer[NCHAN_ACQ*ii+0]= buffer[NCHAN_I2S*ii+0]>>shift;   
     9fe:	str.w	r0, [r2, #-16]
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>shift;   
     a02:	sxth	r4, r4
     a04:	ldr.w	r0, [r3, #-12]
     a08:	asrs	r0, r4
          acqBuffer[NCHAN_ACQ*ii+2]= buffer[NCHAN_I2S*ii+2]>>shift;   
     a0a:	ldrh	r4, [r1, #0]
          acqBuffer[NCHAN_ACQ*ii+1]= buffer[NCHAN_I2S*ii+1]>>shift;   
     a0c:	str.w	r0, [r2, #-12]
          acqBuffer[NCHAN_ACQ*ii+2]= buffer[NCHAN_I2S*ii+2]>>shift;   
     a10:	sxth	r4, r4
     a12:	ldr.w	r0, [r3, #-8]
     a16:	asrs	r0, r4
          acqBuffer[NCHAN_ACQ*ii+3]= buffer[NCHAN_I2S*ii+3]>>shift;   
     a18:	ldrh	r4, [r1, #0]
          acqBuffer[NCHAN_ACQ*ii+2]= buffer[NCHAN_I2S*ii+2]>>shift;   
     a1a:	str.w	r0, [r2, #-8]
          acqBuffer[NCHAN_ACQ*ii+3]= buffer[NCHAN_I2S*ii+3]>>shift;   
     a1e:	sxth	r4, r4
     a20:	ldr.w	r0, [r3, #-4]
    for(int ii=0; ii<NSAMP; ii++) 
     a24:	cmp	r5, r3
          acqBuffer[NCHAN_ACQ*ii+3]= buffer[NCHAN_I2S*ii+3]>>shift;   
     a26:	asr.w	r0, r0, r4
     a2a:	str.w	r0, [r2, #-4]
    for(int ii=0; ii<NSAMP; ii++) 
     a2e:	bne.n	9ee <acq_isr()+0x56>
  extractBuffer(acqBuffer,buffer);
  //int32_t nz=0;
  //for(int ii=0;ii<NSAMP;ii++) if(acqBuffer[ii]==-1) nz++;
  //if(nz>0) Serial.println(nz);
  //
  if(proc==0)
     a30:	ldr	r2, [pc, #64]	; (a74 <acq_isr()+0xdc>)
     a32:	ldrh	r3, [r2, #0]
     a34:	sxth	r3, r3
     a36:	cbnz	r3, a4a <acq_isr()+0xb2>
  { if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     a38:	ldr	r0, [pc, #48]	; (a6c <acq_isr()+0xd4>)
     a3a:	bl	2de8 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     a3e:	cbnz	r0, a48 <acq_isr()+0xb0>
     a40:	ldr	r2, [pc, #52]	; (a78 <acq_isr()+0xe0>)
     a42:	ldr	r3, [r2, #0]
     a44:	adds	r3, #1
     a46:	str	r3, [r2, #0]
  }
     a48:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     a4a:	ldrh	r3, [r2, #0]
     a4c:	sxth	r3, r3
     a4e:	cmp	r3, #1
     a50:	bne.n	a48 <acq_isr()+0xb0>
   if(!compress((void *)acqBuffer)) procMiss++;
     a52:	ldr	r0, [pc, #24]	; (a6c <acq_isr()+0xd4>)
     a54:	bl	39f0 <compress(void*)>
     a58:	b.n	a3e <acq_isr()+0xa6>
     a5a:	nop
     a5c:	.word	0x2001f024
     a60:	.word	0x400e8000
     a64:	.word	0x20200800
     a68:	.word	0x200214b0
     a6c:	.word	0x20020a48
     a70:	.word	0x20021cc0
     a74:	.word	0x20021c1c
     a78:	.word	0x200214b4
     a7c:	.word	0x00000000

00000a80 <setAudioFrequency(int)>:
  {
     a80:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     a84:	ldr.w	r9, [pc, #332]	; bd4 <setAudioFrequency(int)+0x154>
     a88:	movs	r2, #5
     a8a:	mov	r5, r0
     a8c:	ldr	r1, [pc, #312]	; (bc8 <setAudioFrequency(int)+0x148>)
     a8e:	ldr.w	r3, [r9]
     a92:	mov	r0, r9
     a94:	ldr	r3, [r3, #4]
     a96:	vpush	{d8}
     a9a:	sub	sp, #12
     a9c:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     a9e:	mov.w	r1, #256	; 0x100
     aa2:	mov	r0, r9
     aa4:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     aa8:	mov	r0, r9
     aaa:	bl	cde0 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     aae:	movs	r3, #26
     ab0:	lsls	r1, r5, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ab2:	ldr	r0, [pc, #280]	; (bcc <setAudioFrequency(int)+0x14c>)
    {   n0++;
     ab4:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ab6:	mov	r2, r1
        n1=0;
     ab8:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     aba:	mul.w	ip, r0, r3
        {   n1++; 
     abe:	mov	r6, r4
     ac0:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     ac2:	sdiv	r8, ip, r2
     ac6:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     aca:	cmp	r7, #64	; 0x40
     acc:	ble.n	ada <setAudioFrequency(int)+0x5a>
     ace:	cmp	r4, #9
     ad0:	add	r2, r1
     ad2:	bne.n	abe <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     ad4:	cmp	r3, #54	; 0x36
     ad6:	bne.n	ab4 <setAudioFrequency(int)+0x34>
     ad8:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     ada:	mov	r2, r5
     adc:	ldr	r1, [pc, #240]	; (bd0 <setAudioFrequency(int)+0x150>)
     ade:	ldr	r0, [pc, #244]	; (bd4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     ae0:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     ae4:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     ae6:	strd	r4, r7, [sp]
     aea:	bl	ce18 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     aee:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     af2:	ldr.w	r3, [r9]
     af6:	movs	r2, #3
     af8:	vcvt.f64.s32	d7, s15
     afc:	ldr	r1, [pc, #216]	; (bd8 <setAudioFrequency(int)+0x158>)
     afe:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     b00:	and.w	r6, r6, #448	; 0x1c0
     b04:	ldr	r0, [pc, #204]	; (bd4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     b06:	vldr	d6, [pc, #168]	; bb0 <setAudioFrequency(int)+0x130>
     b0a:	vmul.f64	d7, d7, d6
     b0e:	vmov	s13, r4
     b12:	vcvt.f64.s32	d6, s13
     b16:	vmul.f64	d7, d7, d6
     b1a:	vmov	s13, r7
     b1e:	vcvt.f64.s32	d6, s13
     b22:	vmul.f64	d7, d7, d6
     b26:	vldr	d6, [pc, #144]	; bb8 <setAudioFrequency(int)+0x138>
     b2a:	vdiv.f64	d8, d7, d6
     b2e:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     b30:	movs	r1, #2
     b32:	ldr	r0, [pc, #160]	; (bd4 <setAudioFrequency(int)+0x154>)
     b34:	vmov.f64	d0, d8
     b38:	bl	ced8 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     b3c:	ldr	r0, [pc, #148]	; (bd4 <setAudioFrequency(int)+0x154>)
     b3e:	bl	cde0 <Print::println()>
    int c0 = C;
     b42:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     b46:	movw	r2, #10000	; 0x2710
    int c0 = C;
     b4a:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     b4e:	mul.w	r3, r2, r0
     b52:	vmov	s14, r3
     b56:	vldr	d6, [pc, #104]	; bc0 <setAudioFrequency(int)+0x140>
     b5a:	vcvt.f64.s32	d7, s14
     b5e:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     b62:	vcvt.s32.f64	s15, d7
     b66:	vmov	r1, s15
     b6a:	bl	12790 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b6e:	ldr	r2, [pc, #108]	; (bdc <setAudioFrequency(int)+0x15c>)
     b70:	ldr	r3, [r2, #28]
     b72:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     b76:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     b7a:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b7c:	ldr	r3, [r2, #40]	; 0x28
     b7e:	bic.w	r3, r3, #510	; 0x1fe
     b82:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     b86:	orr.w	r3, r3, r8
     b8a:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     b8c:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     b8e:	sub.w	r2, r2, #327680	; 0x50000
     b92:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     b94:	bic.w	r3, r3, #524288	; 0x80000
     b98:	bic.w	r3, r3, #7
     b9c:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ba0:	str	r3, [r2, #4]
  }
     ba2:	add	sp, #12
     ba4:	vpop	{d8}
     ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     bac:	nop.w
     bb0:	.word	0x00000000
     bb4:	.word	0x40700000
     bb8:	.word	0x00000000
     bbc:	.word	0x4176e360
     bc0:	.word	0x00000000
     bc4:	.word	0x40c38800
     bc8:	.word	0x20000d02
     bcc:	.word	0x016e3600
     bd0:	.word	0x20000d08
     bd4:	.word	0x20001c8c
     bd8:	.word	0x20000d25
     bdc:	.word	0x400fc000

00000be0 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     be0:	ldr	r2, [pc, #100]	; (c48 <i2s_setup()+0x68>)
     be2:	ldr	r3, [r2, #124]	; 0x7c
  {
     be4:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     be6:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     bea:	ldr	r4, [pc, #96]	; (c4c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     bec:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     bee:	ldr.w	r3, [r4, #136]	; 0x88
     bf2:	cmp	r3, #0
     bf4:	blt.n	c46 <i2s_setup()+0x66>
    int fs = fsamp;
     bf6:	ldr	r3, [pc, #88]	; (c50 <i2s_setup()+0x70>)
     bf8:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     bfa:	bl	a80 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     bfe:	ldr	r3, [pc, #84]	; (c54 <i2s_setup()+0x74>)
     c00:	movs	r2, #3
     c02:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     c06:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     c0a:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     c0e:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     c12:	movs	r2, #2
     c14:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     c18:	movs	r3, #0
     c1a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     c1e:	movs	r3, #4
     c20:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     c24:	mov.w	r3, #83886080	; 0x5000000
     c28:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     c2c:	mov.w	r3, #65536	; 0x10000
     c30:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     c34:	ldr	r3, [pc, #32]	; (c58 <i2s_setup()+0x78>)
     c36:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     c3a:	ldr	r3, [pc, #32]	; (c5c <i2s_setup()+0x7c>)
     c3c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     c40:	ldr	r3, [pc, #28]	; (c60 <i2s_setup()+0x80>)
     c42:	str.w	r3, [r4, #136]	; 0x88
  }
     c46:	pop	{r4, pc}
     c48:	.word	0x400fc000
     c4c:	.word	0x40384000
     c50:	.word	0x20002230
     c54:	.word	0x401f8000
     c58:	.word	0x0003001b
     c5c:	.word	0x1f1f1f00
     c60:	.word	0x92000001

00000c64 <dma_setup()>:
  {
     c64:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     c66:	ldr	r4, [pc, #128]	; (ce8 <dma_setup()+0x84>)
     c68:	movs	r1, #1
     c6a:	mov	r0, r4
     c6c:	bl	cb70 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c70:	ldr	r3, [r4, #0]
     c72:	ldr	r2, [pc, #120]	; (cec <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     c74:	ldr	r1, [pc, #120]	; (cf0 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     c76:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     c78:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     c7a:	ldr	r0, [pc, #120]	; (cf4 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     c7c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     c7e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c80:	ldr	r0, [pc, #116]	; (cf8 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     c82:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     c86:	mov.w	r2, #1024	; 0x400
    dma.TCD->SLAST = 0;
     c8a:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     c8c:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     c8e:	sub.w	r2, r2, #5120	; 0x1400
    dma.TCD->SLAST = 0;
     c92:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     c94:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     c96:	ldrh	r2, [r3, #22]
     c98:	uxth	r2, r2
     c9a:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     c9c:	movs	r2, #6
     c9e:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     ca0:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     ca2:	ldr	r2, [pc, #88]	; (cfc <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     ca4:	lsls	r3, r3, #2
     ca6:	add.w	r3, r3, #1073741824	; 0x40000000
     caa:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     cae:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     cb0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     cb2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     cb4:	ldr	r2, [pc, #72]	; (d00 <dma_setup()+0x9c>)
     cb6:	add.w	r1, r3, #16
     cba:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cbe:	asrs	r2, r3, #5
     cc0:	and.w	r0, r3, #31
     cc4:	movs	r1, #1
     cc6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     cca:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cce:	lsls	r1, r0
     cd0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     cd2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     cd6:	lsls	r2, r2, #2
     cd8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     cda:	movs	r2, #96	; 0x60
     cdc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     cde:	ldr	r3, [pc, #36]	; (d04 <dma_setup()+0xa0>)
     ce0:	ldrb	r2, [r4, #4]
     ce2:	strb	r2, [r3, #27]
  }
     ce4:	pop	{r4, pc}
     ce6:	nop
     ce8:	.word	0x2001f024
     cec:	.word	0x403840a0
     cf0:	.word	0x02020000
     cf4:	.word	0x20200000
     cf8:	.word	0x00000999
     cfc:	.word	0x80000013
     d00:	.word	0x20002400
     d04:	.word	0x400e8000

00000d08 <acqModifyFrequency(unsigned long)>:
  {
     d08:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     d0a:	ldr	r4, [pc, #32]	; (d2c <acqModifyFrequency(unsigned long)+0x24>)
     d0c:	ldr.w	r3, [r4, #136]	; 0x88
     d10:	bic.w	r3, r3, #2415919104	; 0x90000000
     d14:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     d18:	bl	a80 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     d1c:	ldr.w	r3, [r4, #136]	; 0x88
     d20:	orr.w	r3, r3, #2415919104	; 0x90000000
     d24:	str.w	r3, [r4, #136]	; 0x88
  }
     d28:	pop	{r4, pc}
     d2a:	nop
     d2c:	.word	0x40384000

00000d30 <_GLOBAL__sub_I_procCount>:
		begin();
     d30:	ldr	r0, [pc, #20]	; (d48 <_GLOBAL__sub_I_procCount+0x18>)
     d32:	movs	r1, #0

  void acqStop(void)
  {
    i2s_stop();
    adc_exit();
     d34:	push	{r3, lr}
     d36:	bl	cb70 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     d3a:	ldr	r2, [pc, #16]	; (d4c <_GLOBAL__sub_I_procCount+0x1c>)
     d3c:	ldr	r1, [pc, #16]	; (d50 <_GLOBAL__sub_I_procCount+0x20>)
     d3e:	ldr	r0, [pc, #8]	; (d48 <_GLOBAL__sub_I_procCount+0x18>)
     d40:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     d44:	b.w	d008 <__aeabi_atexit>
     d48:	.word	0x2001f024
     d4c:	.word	0x20002064
     d50:	.word	0x0000098d

00000d54 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
     d54:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d56:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     d58:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d5a:	cbz	r5, d66 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
     d5c:	cbnz	r3, d70 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
     d5e:	mov	r0, r5
  }
     d60:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     d62:	b.w	792e <FatFile::seekSet(unsigned long)>
     d66:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     d68:	cbz	r0, d70 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
     d6a:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     d6c:	b.w	62a4 <ExFatFile::seekSet(unsigned long long)>
  }
     d70:	pop	{r4, r5}
     d72:	bx	lr

00000d74 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     d74:	push	{r4}
    *name = 0;
     d76:	movs	r4, #0
     d78:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     d7a:	ldr	r3, [r0, #56]	; 0x38
     d7c:	cbz	r3, d88 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     d7e:	mov	r0, r3
  }
     d80:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     d84:	b.w	75ec <FatFile::getName(char*, unsigned int)>
     d88:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     d8a:	cbz	r0, d94 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     d8c:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     d90:	b.w	5eb0 <ExFatFile::getName8(char*, unsigned int)>
     d94:	ldr.w	r4, [sp], #4
     d98:	bx	lr

00000d9a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     d9a:	ldr	r3, [r0, #56]	; 0x38
     d9c:	cbz	r3, da4 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0xa>
     d9e:	mov	r0, r3
     da0:	b.w	7cea <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     da4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     da6:	cbz	r0, dac <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]+0x12>
     da8:	b.w	600e <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     dac:	bx	lr

00000dae <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     dae:	push	{r4, lr}
     db0:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     db2:	movs	r3, #0
     db4:	movs	r2, #10
     db6:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     dba:	mov	r0, r4
     dbc:	ldmia.w	sp!, {r4, lr}
     dc0:	b.w	cde0 <Print::println()>

00000dc4 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     dc4:	push	{r0, r1, r4, lr}
     dc6:	mov	r4, r0
     dc8:	cbz	r1, de4 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     dca:	mov	r0, r1
     dcc:	str	r1, [sp, #4]
     dce:	bl	f490 <strlen>
     dd2:	ldr	r3, [r4, #0]
     dd4:	mov	r2, r0
     dd6:	ldr	r1, [sp, #4]
     dd8:	ldr	r3, [r3, #4]
     dda:	mov	r0, r4
     ddc:	add	sp, #8
     dde:	ldmia.w	sp!, {r4, lr}
     de2:	bx	r3
     de4:	add	sp, #8
     de6:	pop	{r4, pc}

00000de8 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     de8:	push	{r4, lr}
     dea:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     dec:	bl	dc4 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     df0:	mov	r0, r4
     df2:	ldmia.w	sp!, {r4, lr}
     df6:	b.w	cde0 <Print::println()>
	...

00000dfc <dbgPrint(unsigned short)>:
#endif

#define DBG_FILE "Storage.cpp"

#if USE_DBG_MACROS==1
  static void dbgPrint(uint16_t line) {
     dfc:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     dfe:	ldr	r4, [pc, #44]	; (e2c <dbgPrint(unsigned short)+0x30>)
     e00:	mov	r5, r0
     e02:	ldr	r1, [pc, #44]	; (e30 <dbgPrint(unsigned short)+0x34>)
     e04:	mov	r0, r4
     e06:	bl	dc4 <Print::write(char const*) [clone .isra.0]>
     e0a:	ldr	r1, [pc, #40]	; (e34 <dbgPrint(unsigned short)+0x38>)
     e0c:	mov	r0, r4
     e0e:	bl	dc4 <Print::write(char const*) [clone .isra.0]>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     e12:	movs	r0, #46	; 0x2e
     e14:	bl	afe4 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     e18:	mov	r1, r5
     e1a:	mov	r0, r4
     e1c:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     e20:	mov	r0, r4
    Serial.print(F("DBG_FAIL: "));
    Serial.print(F(DBG_FILE));
    Serial.write('.');
    Serial.println(line);
  }
     e22:	ldmia.w	sp!, {r3, r4, r5, lr}
     e26:	b.w	cde0 <Print::println()>
     e2a:	nop
     e2c:	.word	0x20001c8c
     e30:	.word	0x2000103b
     e34:	.word	0x20001046

00000e38 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     e38:	ldr.w	r3, [r0, #1152]	; 0x480
     e3c:	cbz	r3, e4a <FsVolume::bytesPerCluster() const+0x12>
     e3e:	ldrb	r3, [r3, #6]
     e40:	mov.w	r0, #512	; 0x200
     e44:	lsls	r0, r3
     e46:	uxth	r0, r0
     e48:	bx	lr
     e4a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     e4e:	cbz	r0, e54 <FsVolume::bytesPerCluster() const+0x1c>
     e50:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     e54:	bx	lr

00000e56 <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     e56:	ldr.w	r3, [r0, #1152]	; 0x480
     e5a:	cbz	r3, e62 <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     e5c:	ldr	r0, [r3, #28]
     e5e:	subs	r0, #1
     e60:	bx	lr
     e62:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     e66:	cbz	r0, e6c <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     e68:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     e6c:	bx	lr

00000e6e <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     e6e:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     e72:	push	{r4, r5, lr}
     e74:	mov	r5, r1
     e76:	sub	sp, #68	; 0x44
     e78:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     e7a:	cbz	r3, ea0 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     e7c:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     e7e:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     e82:	add	r0, sp, #8
     e84:	mov	r3, r2
     e86:	str	r2, [sp, #8]
     e88:	mov	r2, r5
     e8a:	str	r1, [sp, #4]
     e8c:	bl	7c08 <FatFile::open(FatFile*, char const*, int)>
     e90:	ldr	r1, [sp, #4]
     e92:	cbz	r0, e9c <FsVolume::rename(char const*, char const*)+0x2e>
     e94:	mov	r2, r4
     e96:	add	r0, sp, #8
     e98:	bl	7ec8 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     e9c:	add	sp, #68	; 0x44
     e9e:	pop	{r4, r5, pc}
     ea0:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     ea4:	cmp	r0, #0
     ea6:	beq.n	e9c <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     ea8:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     eac:	mov	r2, r5
     eae:	add	r0, sp, #8
  ExFatFile() {}
     eb0:	str	r3, [sp, #56]	; 0x38
     eb2:	str	r1, [sp, #4]
     eb4:	bl	66d4 <ExFatFile::open(ExFatFile*, char const*, int)>
     eb8:	ldr	r1, [sp, #4]
     eba:	cbnz	r0, ec0 <FsVolume::rename(char const*, char const*)+0x52>
     ebc:	movs	r0, #0
     ebe:	b.n	e9c <FsVolume::rename(char const*, char const*)+0x2e>
     ec0:	mov	r2, r4
     ec2:	add	r0, sp, #8
     ec4:	bl	70d0 <ExFatFile::rename(ExFatFile*, char const*)>
     ec8:	cmp	r0, #0
     eca:	beq.n	ebc <FsVolume::rename(char const*, char const*)+0x4e>
     ecc:	b.n	e9c <FsVolume::rename(char const*, char const*)+0x2e>

00000ece <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     ece:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     ed0:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     ed2:	cbz	r3, eec <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     ed4:	ldrb	r0, [r3, #0]
     ed6:	ands.w	r0, r0, #8
     eda:	ittt	ne
     edc:	ldrne	r0, [r3, #28]
     ede:	ldrne	r3, [r3, #20]
     ee0:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     ee2:	cmp	r0, #0
     ee4:	it	lt
     ee6:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     eea:	pop	{r4, pc}
     eec:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     eee:	cmp	r0, #0
     ef0:	beq.n	eea <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     ef2:	ldrb.w	r3, [r0, #49]	; 0x31
     ef6:	ands.w	r3, r3, #8
     efa:	beq.n	f1a <FsBaseFile::available() const+0x4c>
     efc:	ldrd	r1, r3, [r0, #16]
     f00:	ldrd	r2, r4, [r0]
     f04:	subs	r0, r1, r2
     f06:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     f0a:	cmp.w	r0, #2147483648	; 0x80000000
     f0e:	sbcs.w	r3, r3, #0
     f12:	it	cs
     f14:	mvncs.w	r0, #2147483648	; 0x80000000
     f18:	b.n	eea <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     f1a:	mov	r0, r3
     f1c:	b.n	f0a <FsBaseFile::available() const+0x3c>

00000f1e <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     f1e:	ldr	r3, [r0, #56]	; 0x38
     f20:	cbz	r3, f30 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     f22:	ldrb	r3, [r3, #0]
     f24:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     f28:	ite	ne
     f2a:	movne	r0, #1
     f2c:	moveq	r0, #0
  }
     f2e:	bx	lr
     f30:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     f32:	cmp	r0, #0
     f34:	beq.n	f2e <FsBaseFile::isDir() const+0x10>
     f36:	ldrb.w	r3, [r0, #49]	; 0x31
     f3a:	tst.w	r3, #80	; 0x50
     f3e:	b.n	f28 <FsBaseFile::isDir() const+0xa>

00000f40 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     f40:	ldr	r3, [r0, #56]	; 0x38
     f42:	cbnz	r3, f4e <FsBaseFile::isOpen() const+0xe>
     f44:	ldr	r0, [r0, #60]	; 0x3c
     f46:	subs	r0, #0
     f48:	it	ne
     f4a:	movne	r0, #1
     f4c:	bx	lr
     f4e:	movs	r0, #1
     f50:	bx	lr

00000f52 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     f52:	ldr	r3, [r0, #56]	; 0x38
     f54:	cbz	r3, f5c <FsBaseFile::read(void*, unsigned int)+0xa>
     f56:	mov	r0, r3
     f58:	b.w	7744 <FatFile::read(void*, unsigned int)>
     f5c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     f5e:	cbz	r0, f64 <FsBaseFile::read(void*, unsigned int)+0x12>
     f60:	b.w	60f4 <ExFatFile::read(void*, unsigned int)>
  }
     f64:	mov.w	r0, #4294967295
     f68:	bx	lr
	...

00000f6c <FsFile::FsFile()>:
     f6c:	movs	r2, #0
     f6e:	mov.w	r1, #1000	; 0x3e8
     f72:	strb	r2, [r0, #12]
     f74:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f78:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f7c:	ldr	r2, [pc, #4]	; (f84 <FsFile::FsFile()+0x18>)
     f7e:	str	r2, [r0, #0]
     f80:	bx	lr
     f82:	nop
     f84:	.word	0x200004f4

00000f88 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f88:	ldr	r3, [pc, #16]	; (f9c <FsFile::~FsFile()+0x14>)
     f8a:	push	{r4, lr}
     f8c:	mov	r4, r0
     f8e:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f92:	bl	8dd8 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f96:	mov	r0, r4
     f98:	pop	{r4, pc}
     f9a:	nop
     f9c:	.word	0x2000042c

00000fa0 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     fa0:	add.w	r1, r0, r1, lsl #2
     fa4:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     fa6:	ldr.w	r1, [r3, #1152]	; 0x480
     faa:	push	{lr}
     fac:	sub	sp, #60	; 0x3c
     fae:	cbz	r1, fc6 <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     fb0:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     fb2:	add.w	r1, r1, #1096	; 0x448
     fb6:	mov	r0, sp
     fb8:	str	r3, [sp, #0]
     fba:	movs	r3, #1
     fbc:	bl	7e24 <FatFile::mkdir(FatFile*, char const*, bool)>
     fc0:	add	sp, #60	; 0x3c
     fc2:	ldr.w	pc, [sp], #4
     fc6:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     fca:	cmp	r0, #0
     fcc:	beq.n	fc0 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     fce:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     fd0:	movs	r3, #1
     fd2:	add.w	r1, r0, #1096	; 0x448
     fd6:	mov	r0, sp
     fd8:	bl	7012 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     fdc:	b.n	fc0 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000fe0 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     fe0:	push	{r4, r5, lr}
     fe2:	mov	r4, r0
     fe4:	sub	sp, #68	; 0x44
     fe6:	mov	r5, r1
     fe8:	ldr	r0, [pc, #84]	; (1040 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     fea:	mov	r1, r2
     fec:	str	r2, [sp, #4]
     fee:	bl	de8 <Print::println(char const*) [clone .isra.0]>
    return m_fVol ? m_fVol->remove(path) :
     ff2:	ldr	r2, [sp, #4]
     ff4:	add.w	r1, r4, r5, lsl #2
     ff8:	ldr	r3, [r1, #84]	; 0x54
     ffa:	ldr.w	r1, [r3, #1152]	; 0x480
     ffe:	cbz	r1, 1018 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
    1000:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1002:	add	r0, sp, #8
    1004:	str	r3, [sp, #8]
    1006:	movs	r3, #1
    1008:	bl	7ca6 <FatFile::open(FatVolume*, char const*, int)>
    100c:	cbz	r0, 1014 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
    100e:	add	r0, sp, #8
    1010:	bl	8d20 <FatFile::remove()>
    1014:	add	sp, #68	; 0x44
    1016:	pop	{r4, r5, pc}
    1018:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
    101c:	cmp	r0, #0
    101e:	beq.n	1014 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
    1020:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    1022:	movs	r3, #1
    1024:	mov	r1, r0
    1026:	add	r0, sp, #8
    1028:	bl	679a <ExFatFile::open(ExFatVolume*, char const*, int)>
    102c:	cbnz	r0, 1032 <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
    102e:	movs	r0, #0
    1030:	b.n	1014 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
    1032:	add	r0, sp, #8
    1034:	bl	6d18 <ExFatFile::remove()>
    1038:	cmp	r0, #0
    103a:	beq.n	102e <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
    103c:	b.n	1014 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
    103e:	nop
    1040:	.word	0x20001c8c

00001044 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
    1044:	add.w	r1, r0, r1, lsl #2
    1048:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    104a:	ldr.w	r1, [r3, #1152]	; 0x480
    104e:	push	{lr}
    1050:	sub	sp, #60	; 0x3c
    1052:	cbz	r1, 106c <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
    1054:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1056:	mov	r0, sp
    1058:	str	r3, [sp, #0]
    105a:	bl	7ca6 <FatFile::open(FatVolume*, char const*, int)>
    105e:	cbz	r0, 1066 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    1060:	mov	r0, sp
    1062:	bl	79ce <FatFile::rmdir()>
    1066:	add	sp, #60	; 0x3c
    1068:	ldr.w	pc, [sp], #4
    106c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    1070:	cmp	r0, #0
    1072:	beq.n	1066 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    1074:	mov	r3, r1
    1076:	str	r1, [sp, #48]	; 0x30
    1078:	mov	r1, r0
    107a:	mov	r0, sp
    107c:	bl	679a <ExFatFile::open(ExFatVolume*, char const*, int)>
    1080:	cbnz	r0, 1086 <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    1082:	movs	r0, #0
    1084:	b.n	1066 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    1086:	mov	r0, sp
    1088:	bl	6da4 <ExFatFile::rmdir()>
    108c:	cmp	r0, #0
    108e:	beq.n	1082 <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1090:	b.n	1066 <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>

00001092 <MTPStorage_SD::readonly(unsigned long)>:

// These should probably be weak.
void mtp_yield() {}
void mtp_lock_storage(bool lock) {}

  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
    1092:	movs	r0, #0
    1094:	bx	lr

00001096 <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
    1096:	movs	r0, #1
    1098:	bx	lr

0000109a <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
    109a:	add.w	r1, r0, r1, lsl #2

  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
    109e:	push	{r3, r4, r5, lr}
    10a0:	ldr	r5, [r1, #84]	; 0x54
    10a2:	mov	r0, r5
    10a4:	bl	e56 <FsVolume::clusterCount() const>
    10a8:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    10aa:	mov	r0, r5
    10ac:	bl	e38 <FsVolume::bytesPerCluster() const>
    10b0:	umull	r0, r1, r4, r0
    10b4:	pop	{r3, r4, r5, pc}

000010b6 <MTPStorage_SD::CloseIndex()>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }

  void MTPStorage_SD::CloseIndex()
  {
    10b6:	push	{r3, r4, r5, lr}
    mtp_lock_storage(true);
    if(index_.isOpen()) {index_.close();}
    10b8:	add.w	r5, r0, #180	; 0xb4
  {
    10bc:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
    10be:	mov	r0, r5
    10c0:	bl	f40 <FsBaseFile::isOpen() const>
    10c4:	cbz	r0, 10cc <MTPStorage_SD::CloseIndex()+0x16>
    10c6:	mov	r0, r5
    10c8:	bl	8dd8 <FsBaseFile::close()>
    mtp_lock_storage(false);
    index_generated = false;
    10cc:	movs	r3, #0
    10ce:	strb.w	r3, [r4, #424]	; 0x1a8
    index_entries_ = 0;
    10d2:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10d6:	pop	{r3, r4, r5, pc}

000010d8 <MTPStorage_SD::OpenIndex()>:

  void MTPStorage_SD::OpenIndex() 
  { 
    10d8:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    10da:	add.w	r5, r0, #180	; 0xb4
  { 
    10de:	sub	sp, #84	; 0x54
    10e0:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    10e2:	mov	r0, r5
    10e4:	bl	f40 <FsBaseFile::isOpen() const>
    10e8:	cbnz	r0, 1130 <MTPStorage_SD::OpenIndex()+0x58>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    10ea:	ldr	r2, [pc, #72]	; (1134 <MTPStorage_SD::OpenIndex()+0x5c>)
    10ec:	movw	r3, #514	; 0x202
    10f0:	ldr	r1, [r4, #84]	; 0x54
    10f2:	mov	r0, sp
    10f4:	bl	900c <FsVolume::open(char const*, int)>
class Print
    10f8:	ldr	r3, [sp, #4]
    10fa:	add	r1, sp, #16
    10fc:	mov	r0, r5
    10fe:	str.w	r3, [r4, #168]	; 0xa8
class Stream : public Print
    1102:	ldr	r3, [sp, #8]
    1104:	str.w	r3, [r4, #172]	; 0xac
    1108:	ldrb.w	r3, [sp, #12]
    110c:	strb.w	r3, [r4, #176]	; 0xb0
    1110:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
    //
    mtp_lock_storage(true);
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    1114:	mov	r0, sp
    1116:	bl	f88 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    111a:	mov	r0, r5
    111c:	bl	f40 <FsBaseFile::isOpen() const>
    1120:	cbnz	r0, 1130 <MTPStorage_SD::OpenIndex()+0x58>
    1122:	ldr	r1, [pc, #20]	; (1138 <MTPStorage_SD::OpenIndex()+0x60>)
    1124:	ldr	r0, [pc, #20]	; (113c <MTPStorage_SD::OpenIndex()+0x64>)
    mtp_lock_storage(false);
  }
    1126:	add	sp, #84	; 0x54
    1128:	ldmia.w	sp!, {r4, r5, lr}
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    112c:	b.w	de8 <Print::println(char const*) [clone .isra.0]>
  }
    1130:	add	sp, #84	; 0x54
    1132:	pop	{r4, r5, pc}
    1134:	.word	0x2000107e
    1138:	.word	0x2000108c
    113c:	.word	0x20001c8c

00001140 <MTPStorage_SD::ResetIndex()>:

  void MTPStorage_SD::ResetIndex() {
    1140:	push	{r4, lr}
    1142:	mov	r4, r0
    if(!index_.isOpen()) return;
    1144:	adds	r0, #180	; 0xb4
    1146:	bl	f40 <FsBaseFile::isOpen() const>
    114a:	cbz	r0, 116a <MTPStorage_SD::ResetIndex()+0x2a>
    CloseIndex();
    114c:	mov	r0, r4
    114e:	bl	10b6 <MTPStorage_SD::CloseIndex()>

    all_scanned_ = false;
    1152:	movs	r3, #0
    open_file_ = 0xFFFFFFFEUL;

    OpenIndex();
    1154:	mov	r0, r4
    all_scanned_ = false;
    1156:	strb.w	r3, [r4, #425]	; 0x1a9
    open_file_ = 0xFFFFFFFEUL;
    115a:	mvn.w	r3, #1
    115e:	str.w	r3, [r4, #416]	; 0x1a0
  }
    1162:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    1166:	b.w	10d8 <MTPStorage_SD::OpenIndex()>
  }
    116a:	pop	{r4, pc}

0000116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:

  void MTPStorage_SD::WriteIndexRecord(uint32_t i, const Record& r) 
  { OpenIndex();
    116c:	push	{r0, r1, r2, r4, r5, lr}
    116e:	mov	r4, r0
    1170:	mov	r5, r1
    1172:	str	r2, [sp, #4]
    1174:	bl	10d8 <MTPStorage_SD::OpenIndex()>
    mtp_lock_storage(true);
    index_.seekSet((sizeof(r) * i));
    1178:	add.w	r0, r4, #180	; 0xb4
    117c:	mov.w	r4, #280	; 0x118
    1180:	movs	r3, #0
    1182:	mul.w	r2, r4, r5
    1186:	str	r0, [sp, #0]
    1188:	bl	d54 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.write((char*)&r, sizeof(r));
    118c:	mov	r2, r4
    118e:	ldrd	r0, r1, [sp]
    1192:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    mtp_lock_storage(false);
  }
    1196:	add	sp, #12
    1198:	pop	{r4, r5, pc}

0000119a <MTPStorage_SD::AppendIndexRecord(Record const&)>:

  uint32_t MTPStorage_SD::AppendIndexRecord(const Record& r) 
  { uint32_t new_record = index_entries_++;
    119a:	push	{r4, lr}
    119c:	ldr.w	r4, [r0, #420]	; 0x1a4
    11a0:	mov	r2, r1
    11a2:	adds	r1, r4, #1
    11a4:	str.w	r1, [r0, #420]	; 0x1a4
    WriteIndexRecord(new_record, r);
    11a8:	mov	r1, r4
    11aa:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return new_record;
  }
    11ae:	mov	r0, r4
    11b0:	pop	{r4, pc}
	...

000011b4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
  // MTP object handles should not change or be re-used during a session.
  // This would be easy if we could just have a list of all files in memory.
  // Since our RAM is limited, we'll keep the index in a file instead.
  void MTPStorage_SD::GenerateIndex(uint32_t store)
  { if (index_generated) return; 
    index_generated = true;
    11b4:	movs	r3, #1
    // first remove old index file
    mtp_lock_storage(true);
    sd_remove(0,indexFile);
    11b6:	ldr	r2, [pc, #84]	; (120c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x58>)
    11b8:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    11ba:	push	{r4, r5, r6, r7, lr}
    11bc:	mov	r4, r0
    index_generated = true;
    11be:	strb.w	r3, [r0, #424]	; 0x1a8
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    11c2:	sub	sp, #284	; 0x11c
    mtp_lock_storage(false);

    num_storage = sd_getFSCount();

    index_entries_ = 0;
    11c4:	movs	r5, #0
    sd_remove(0,indexFile);
    11c6:	bl	fe0 <mSD_Base::sd_remove(unsigned long, char const*)>
    Record r;
    for(int ii=0; ii<num_storage; ii++)
    {
      r.store = ii; // 
      r.parent = 0xFFFFFFFFUL; // 
    11ca:	mov.w	r6, #4294967295
    num_storage = sd_getFSCount();
    11ce:	ldr	r3, [r4, #0]
      r.sibling = 0;
      r.child = 0;
      r.isdir = true;
      r.scanned = false;
      strcpy(r.name, "/");
    11d0:	ldr	r7, [pc, #60]	; (1210 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    num_storage = sd_getFSCount();
    11d2:	str.w	r3, [r4, #404]	; 0x194
    index_entries_ = 0;
    11d6:	str.w	r5, [r4, #420]	; 0x1a4
    for(int ii=0; ii<num_storage; ii++)
    11da:	ldr.w	r3, [r4, #404]	; 0x194
    11de:	cmp	r5, r3
    11e0:	blt.n	11e6 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x32>
      AppendIndexRecord(r);
    }
  }
    11e2:	add	sp, #284	; 0x11c
    11e4:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    11e6:	movs	r3, #0
      strcpy(r.name, "/");
    11e8:	mov	r1, r7
    11ea:	add	r0, sp, #24
      r.store = ii; // 
    11ec:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    11f0:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    11f2:	adds	r5, #1
      r.sibling = 0;
    11f4:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    11f8:	movs	r3, #1
    11fa:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    11fe:	bl	f3d4 <strcpy>
      AppendIndexRecord(r);
    1202:	mov	r1, sp
    1204:	mov	r0, r4
    1206:	bl	119a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    120a:	b.n	11da <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x26>
    120c:	.word	0x2000107e
    1210:	.word	0x20000ce2

00001214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1214:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    1216:	mov.w	r7, #280	; 0x118
  {
    121a:	mov	r4, r1
    121c:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    121e:	movs	r1, #0
    1220:	mov	r2, r7
  {
    1222:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1224:	bl	a898 <memset>
    if (i > index_entries_) 
    1228:	ldr.w	r3, [r4, #420]	; 0x1a4
    122c:	cmp	r3, r6
    122e:	bcc.n	1250 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3c>
    OpenIndex();
    1230:	mov	r0, r4
    1232:	bl	10d8 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1236:	add.w	r0, r4, #180	; 0xb4
    123a:	mul.w	r2, r7, r6
    123e:	movs	r3, #0
    1240:	str	r0, [sp, #4]
    1242:	bl	d54 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    index_.read((char *)&ret, sizeof(ret));
    1246:	mov	r2, r7
    1248:	mov	r1, r5
    124a:	ldr	r0, [sp, #4]
    124c:	bl	f52 <FsBaseFile::read(void*, unsigned int)>
  }
    1250:	mov	r0, r5
    1252:	add	sp, #12
    1254:	pop	{r4, r5, r6, r7, pc}
	...

00001258 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1258:	push	{r4, r5, r6, lr}
    125a:	sub	sp, #280	; 0x118
    125c:	mov	r6, r0
    125e:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1260:	mov	r2, r1
    1262:	mov	r1, r0
    1264:	mov	r0, sp
  {
    1266:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1268:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    126c:	ldr	r1, [sp, #0]
    126e:	adds	r3, r1, #1
    1270:	bne.n	1282 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    1272:	ldr	r1, [pc, #64]	; (12b4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1274:	mov	r0, r4
    1276:	bl	f3d4 <strcpy>
      return tmp.store;
    127a:	ldrh.w	r0, [sp, #14]
  }
    127e:	add	sp, #280	; 0x118
    1280:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    1282:	mov	r3, r5
    1284:	mov	r2, r4
    1286:	mov	r0, r6
    1288:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    128c:	mov	r0, r4
    128e:	bl	f490 <strlen>
    1292:	add	r0, r4
    1294:	ldrb.w	r3, [r0, #-1]
    1298:	cmp	r3, #47	; 0x2f
    129a:	beq.n	12a6 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    129c:	mov	r2, r5
    129e:	ldr	r1, [pc, #20]	; (12b4 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    12a0:	mov	r0, r4
    12a2:	bl	f228 <strlcat>
      strlcat(out, tmp.name,len);
    12a6:	mov	r2, r5
    12a8:	add	r1, sp, #24
    12aa:	mov	r0, r4
    12ac:	bl	f228 <strlcat>
    12b0:	b.n	127a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    12b2:	nop
    12b4:	.word	0x20000ce2

000012b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    12b8:	ldr.w	r3, [r0, #416]	; 0x1a0
    12bc:	cmp	r3, r1
  {
    12be:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12c2:	mov	r4, r0
    12c4:	sub	sp, #336	; 0x150
    12c6:	mov	r6, r1
    12c8:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    12ca:	bne.n	12d4 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    12cc:	ldr.w	r3, [r0, #412]	; 0x19c
    12d0:	cmp	r3, r2
    12d2:	beq.n	132c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    12d4:	add.w	r8, r4, #260	; 0x104
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    12d8:	mov.w	r3, #256	; 0x100
    12dc:	add	r2, sp, #80	; 0x50
    12de:	mov	r1, r6
    12e0:	mov	r0, r4
    12e2:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    12e6:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    12e8:	mov	r0, r8
    12ea:	bl	f40 <FsBaseFile::isOpen() const>
    12ee:	cbz	r0, 12f6 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    12f0:	mov	r0, r8
    12f2:	bl	8dd8 <FsBaseFile::close()>
    12f6:	add.w	r7, r4, r7, lsl #2
    12fa:	add	r2, sp, #80	; 0x50
    12fc:	mov	r3, r5
    12fe:	mov	r0, sp
    1300:	ldr	r1, [r7, #84]	; 0x54
    1302:	bl	900c <FsVolume::open(char const*, int)>
    1306:	ldr	r3, [sp, #4]
    1308:	add	r1, sp, #16
    130a:	mov	r0, r8
    130c:	str.w	r3, [r4, #248]	; 0xf8
    1310:	ldr	r3, [sp, #8]
    1312:	str.w	r3, [r4, #252]	; 0xfc
    1316:	ldrb.w	r3, [sp, #12]
    131a:	strb.w	r3, [r4, #256]	; 0x100
    131e:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1322:	mov	r0, sp
    1324:	bl	f88 <FsFile::~FsFile()>
    mode_ = mode;
    1328:	strd	r5, r6, [r4, #412]	; 0x19c
  }
    132c:	add	sp, #336	; 0x150
    132e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001332 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1332:	ldrb.w	r3, [r0, #424]	; 0x1a8
    1336:	cbnz	r3, 133c <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1338:	b.w	11b4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    133c:	bx	lr

0000133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:

  void MTPStorage_SD::ScanDir(uint32_t store, uint32_t i) 
  { if (i == 0xFFFFFFFFUL) i = store;
    133e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1342:	cmp.w	r2, #4294967295
    1346:	ite	ne
    1348:	movne	r6, r2
    134a:	moveq	r6, r1
    134c:	sub.w	sp, sp, #564	; 0x234
    
    Record record = ReadIndexRecord(i);
    1350:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1352:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1354:	mov	r2, r6
    1356:	mov	r0, sp
    1358:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    135c:	ldrb.w	r3, [sp, #12]
    1360:	cmp	r3, #0
    1362:	beq.n	145c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    1364:	ldrb.w	r5, [sp, #13]
    1368:	cmp	r5, #0
    136a:	bne.n	145c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      OpenFileByIndex(i);
      if (!file_.isOpen()) return;
    136c:	add.w	r8, r4, #260	; 0x104
      OpenFileByIndex(i);
    1370:	mov	r0, r4
    1372:	mov	r2, r5
    1374:	mov	r1, r6
    1376:	bl	12b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    137a:	mov	r0, r8
    137c:	bl	f40 <FsBaseFile::isOpen() const>
    1380:	cmp	r0, #0
    1382:	beq.n	145c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    1384:	mov	r9, r5
    FsFile tmpFile;
    1386:	add	r0, sp, #280	; 0x118
    1388:	add.w	r7, r4, #340	; 0x154
    138c:	bl	f6c <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1390:	movs	r2, #0
    1392:	mov	r1, r8
    1394:	add	r0, sp, #296	; 0x128
    1396:	bl	8ed8 <FsBaseFile::openNext(FsBaseFile*, int)>
    139a:	ldr	r3, [sp, #284]	; 0x11c
    139c:	add	r1, sp, #296	; 0x128
    139e:	mov	r0, r7
    13a0:	str.w	r3, [r4, #328]	; 0x148
    13a4:	ldr	r3, [sp, #288]	; 0x120
    13a6:	str.w	r3, [r4, #332]	; 0x14c
    13aa:	ldrb.w	r3, [sp, #292]	; 0x124
    13ae:	strb.w	r3, [r4, #336]	; 0x150
    13b2:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
    
      int sibling = 0;
      while (true) 
      { mtp_lock_storage(true);
        child_=file_.openNextFile();
    13b6:	add	r0, sp, #280	; 0x118
    13b8:	bl	f88 <FsFile::~FsFile()>
        mtp_lock_storage(false);
        if(!child_.isOpen()) break;
    13bc:	mov	r0, r7
    13be:	bl	f40 <FsBaseFile::isOpen() const>
    13c2:	cmp	r0, #0
    13c4:	beq.n	144a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>

        Record r;
        r.store = record.store;
    13c6:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    13ca:	mov	r0, r7
        r.parent = i;
    13cc:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    13ce:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    13d2:	str	r5, [sp, #288]	; 0x120
    13d4:	bl	f1e <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    13d8:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    13dc:	cbnz	r0, 1432 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    13de:	ldr.w	r3, [r4, #396]	; 0x18c
    13e2:	cbz	r3, 1426 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    13e4:	ldr	r3, [r3, #28]
        r.scanned = false;
        child_.getName(r.name,MAX_FILENAME_LEN);
    13e6:	mov.w	r2, #256	; 0x100
    13ea:	add	r1, sp, #304	; 0x130
    13ec:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    13ee:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    13f0:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    13f4:	bl	d74 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    13f8:	mov	r0, r7
    13fa:	add.w	r2, sp, #298	; 0x12a
    13fe:	add	r1, sp, #296	; 0x128
    1400:	bl	d9a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1404:	ldr.w	r0, [r4, #396]	; 0x18c
    1408:	cbz	r0, 1436 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    140a:	add.w	r2, sp, #302	; 0x12e
    140e:	add	r1, sp, #300	; 0x12c
    1410:	bl	7d0a <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        child_.getModifyDateTime(&r.mpdate, &r.mptime);
        //
        sibling = AppendIndexRecord(r);
    1414:	add	r1, sp, #280	; 0x118
    1416:	mov	r0, r4
    1418:	bl	119a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    141c:	mov	r5, r0
        child_.close();
    141e:	mov	r0, r7
    1420:	bl	8dd8 <FsBaseFile::close()>
      }
    1424:	b.n	1386 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1426:	ldr.w	r3, [r4, #400]	; 0x190
           m_xFile ? m_xFile->fileSize() : 0;
    142a:	cmp	r3, #0
    142c:	beq.n	13e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
  uint64_t fileSize() const {return m_validLength;}
    142e:	ldr	r3, [r3, #16]
    1430:	b.n	13e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1432:	movs	r3, #0
    1434:	b.n	13e6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1436:	ldr.w	r0, [r4, #400]	; 0x190
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    143a:	cmp	r0, #0
    143c:	beq.n	1414 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    143e:	add.w	r2, sp, #302	; 0x12e
    1442:	add	r1, sp, #300	; 0x12c
    1444:	bl	602e <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    1448:	b.n	1414 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    144a:	movs	r3, #1
      record.child = sibling;
      WriteIndexRecord(i, record);
    144c:	mov	r2, sp
    144e:	mov	r1, r6
    1450:	mov	r0, r4
      record.scanned = true;
    1452:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1456:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1458:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
  }
    145c:	add.w	sp, sp, #564	; 0x234
    1460:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001464 <MTPStorage_SD::ScanAll(unsigned long)>:

  void MTPStorage_SD::ScanAll(uint32_t store) 
  { if (all_scanned_) return;
    1464:	push	{r4, r5, r6, lr}
    1466:	ldrb.w	r4, [r0, #425]	; 0x1a9
    146a:	mov	r5, r0
    146c:	mov	r6, r1
    146e:	cbnz	r4, 1482 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    1470:	movs	r3, #1
    1472:	strb.w	r3, [r0, #425]	; 0x1a9

    GenerateIndex(store);
    1476:	bl	1332 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    147a:	ldr.w	r3, [r5, #420]	; 0x1a4
    147e:	cmp	r4, r3
    1480:	bcc.n	1484 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    1482:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    1484:	mov	r2, r4
    1486:	mov	r1, r6
    1488:	mov	r0, r5
    148a:	adds	r4, #1
    148c:	bl	133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    1490:	b.n	147a <MTPStorage_SD::ScanAll(unsigned long)+0x16>

00001492 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:

  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
  { 
    1492:	push	{r4, r5, r6, lr}
    1494:	mov	r5, r2
    1496:	sub	sp, #280	; 0x118
    1498:	mov	r4, r0
    149a:	mov	r6, r1
    GenerateIndex(store);
    149c:	bl	1332 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    14a0:	cbz	r5, 14ce <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x3c>
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    14a2:	cmp.w	r5, #4294967295
    14a6:	it	eq
    14a8:	moveq	r5, r6

      ScanDir(store, parent);
    14aa:	mov	r1, r6
    14ac:	mov	r0, r4
    14ae:	mov	r2, r5
    14b0:	bl	133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    14b4:	movs	r3, #1
      // Root folder?
      next_ = ReadIndexRecord(parent).child;
    14b6:	mov	r2, r5
    14b8:	mov	r1, r4
      follow_sibling_ = true;
    14ba:	strb.w	r3, [r4, #432]	; 0x1b0
      next_ = ReadIndexRecord(parent).child;
    14be:	mov	r0, sp
    14c0:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    14c4:	ldr	r3, [sp, #4]
    } 
    else 
    { 
      ScanAll(store);
      follow_sibling_ = false;
      next_ = 1;
    14c6:	str.w	r3, [r4, #428]	; 0x1ac
    }
  }
    14ca:	add	sp, #280	; 0x118
    14cc:	pop	{r4, r5, r6, pc}
      ScanAll(store);
    14ce:	mov	r1, r6
    14d0:	mov	r0, r4
    14d2:	bl	1464 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    14d6:	movs	r3, #1
      follow_sibling_ = false;
    14d8:	strb.w	r5, [r4, #432]	; 0x1b0
      next_ = 1;
    14dc:	b.n	14c6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x34>

000014de <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:

  uint32_t MTPStorage_SD::GetNextObjectHandle(uint32_t  store)
  {
    14de:	push	{r4, r5, lr}
    14e0:	mov	r4, r0
    14e2:	sub	sp, #284	; 0x11c
    while (true) 
    { if (next_ == 0) return 0;
    14e4:	ldr.w	r5, [r4, #428]	; 0x1ac
    14e8:	cbz	r5, 1508 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>

      int ret = next_;
      Record r = ReadIndexRecord(ret);
    14ea:	mov	r2, r5
    14ec:	mov	r1, r4
    14ee:	mov	r0, sp
    14f0:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    14f4:	ldrb.w	r3, [r4, #432]	; 0x1b0
    14f8:	cbz	r3, 150e <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    14fa:	ldr	r3, [sp, #8]
      } 
      else 
      { next_++;
        if (next_ >= index_entries_) next_ = 0;
    14fc:	str.w	r3, [r4, #428]	; 0x1ac
      }
      if (r.name[0]) return ret;
    1500:	ldrb.w	r3, [sp, #24]
    1504:	cmp	r3, #0
    1506:	beq.n	14e4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
    }
  }
    1508:	mov	r0, r5
    150a:	add	sp, #284	; 0x11c
    150c:	pop	{r4, r5, pc}
      { next_++;
    150e:	ldr.w	r1, [r4, #428]	; 0x1ac
        if (next_ >= index_entries_) next_ = 0;
    1512:	ldr.w	r2, [r4, #420]	; 0x1a4
      { next_++;
    1516:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    1518:	cmp	r1, r2
    151a:	it	cc
    151c:	movcc	r3, r1
    151e:	b.n	14fc <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

00001520 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>:

  void MTPStorage_SD::GetObjectInfo(uint32_t handle, char* name, uint64_t* size, uint32_t* parent, uint16_t *store, char *create, char *modify)
  {
    1520:	push	{r4, r5, lr}
    1522:	sub	sp, #308	; 0x134
    1524:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    1526:	mov	r2, r1
    1528:	mov	r1, r0
    152a:	add	r0, sp, #24
  {
    152c:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    152e:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    1532:	add	r1, sp, #48	; 0x30
    1534:	mov	r0, r5
    1536:	bl	f3d4 <strcpy>
    *parent = r.parent;
    153a:	ldr	r3, [sp, #320]	; 0x140
    153c:	ldr	r2, [sp, #24]
    153e:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1540:	ldrb.w	r3, [sp, #36]	; 0x24
    1544:	cmp	r3, #0
    1546:	bne.n	15c8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xa8>
    1548:	ldr	r3, [sp, #28]
    *store = r.store;
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    154a:	ldrh.w	r1, [sp, #42]	; 0x2a
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    154e:	str	r3, [r4, #0]
    1550:	movs	r3, #0
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    1552:	and.w	r0, r1, #31
    *store = r.store;
    1556:	ldrh.w	r2, [sp, #38]	; 0x26
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    155a:	str	r3, [r4, #4]
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    155c:	lsls	r0, r0, #1
    *store = r.store;
    155e:	ldr	r3, [sp, #324]	; 0x144
    1560:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    1562:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1566:	str	r0, [sp, #16]
    1568:	ubfx	r0, r1, #5, #6
    156c:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    156e:	lsrs	r3, r2, #9
    1570:	str	r0, [sp, #12]
    1572:	str	r1, [sp, #8]
    1574:	and.w	r1, r2, #31
    1578:	ubfx	r2, r2, #5, #4
    157c:	addw	r3, r3, #1980	; 0x7bc
    1580:	str	r1, [sp, #4]
    1582:	movs	r1, #32
    1584:	str	r2, [sp, #0]
    1586:	ldr	r0, [sp, #328]	; 0x148
    1588:	ldr	r2, [pc, #68]	; (15d0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    158a:	bl	ef8c <sniprintf>
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    158e:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    1592:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    1596:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    159a:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    159c:	lsls	r0, r0, #1
    159e:	addw	r3, r3, #1980	; 0x7bc
    15a2:	str	r0, [sp, #16]
    15a4:	ubfx	r0, r1, #5, #6
    15a8:	lsrs	r1, r1, #11
    15aa:	str	r0, [sp, #12]
    15ac:	str	r1, [sp, #8]
    15ae:	and.w	r1, r2, #31
    15b2:	ubfx	r2, r2, #5, #4
    15b6:	ldr	r0, [sp, #332]	; 0x14c
    15b8:	str	r1, [sp, #4]
    15ba:	movs	r1, #32
    15bc:	str	r2, [sp, #0]
    15be:	ldr	r2, [pc, #16]	; (15d0 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0xb0>)
    15c0:	bl	ef8c <sniprintf>
  }
    15c4:	add	sp, #308	; 0x134
    15c6:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    15c8:	mov.w	r3, #4294967295
    15cc:	b.n	154a <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    15ce:	nop
    15d0:	.word	0x20001064

000015d4 <MTPStorage_SD::GetSize(unsigned long)>:
    WriteIndexRecord(handle, r); 
    mtp_lock_storage(false);
  }

  uint32_t MTPStorage_SD::GetSize(uint32_t handle) 
  {
    15d4:	push	{lr}
    15d6:	sub	sp, #284	; 0x11c
    15d8:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    15da:	mov	r1, r0
    15dc:	mov	r0, sp
    15de:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    15e2:	ldr	r0, [sp, #4]
    15e4:	add	sp, #284	; 0x11c
    15e6:	ldr.w	pc, [sp], #4

000015ea <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:

  size_t MTPStorage_SD::read(uint32_t handle, uint32_t pos, char* out, uint32_t bytes)
  {
    15ea:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    15ec:	mov	r4, r0
    15ee:	mov	r6, r2
    OpenFileByIndex(handle);
    15f0:	movs	r2, #0
  {
    15f2:	mov	r5, r3
    15f4:	ldr	r7, [sp, #32]
    OpenFileByIndex(handle);
    15f6:	bl	12b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    mtp_lock_storage(true);
    file_.seekSet(pos);
    15fa:	add.w	r0, r4, #260	; 0x104
    15fe:	mov	r2, r6
    1600:	movs	r3, #0
    1602:	str	r0, [sp, #4]
    1604:	bl	d54 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    file_.read(out,bytes);
    1608:	mov	r2, r7
    160a:	mov	r1, r5
    160c:	ldr	r0, [sp, #4]
    160e:	bl	f52 <FsBaseFile::read(void*, unsigned int)>
    mtp_lock_storage(false);
    return bytes;
  }
    1612:	mov	r0, r7
    1614:	add	sp, #12
    1616:	pop	{r4, r5, r6, r7, pc}

00001618 <MTPStorage_SD::removeFile(unsigned long, char*)>:

void MTPStorage_SD::removeFile(uint32_t store, char *file)
{ 
    1618:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    161c:	mov	r5, r1
    161e:	sub.w	sp, sp, #1016	; 0x3f8
    1622:	add.w	r1, r0, r1, lsl #2
    1626:	mov	r4, r0
    1628:	movs	r3, #0
    162a:	add	r0, sp, #8
    162c:	ldr	r1, [r1, #84]	; 0x54
    162e:	mov	r6, r2
    1630:	bl	900c <FsVolume::open(char const*, int)>
    1634:	add	r0, sp, #24
    1636:	bl	f1e <FsBaseFile::isDir() const>
  char tname[2*MAX_FILENAME_LEN];
  char fname[MAX_FILENAME_LEN];
  FsFile f1=sd_open(store,file,O_READ);
  if(f1.isDirectory())
    163a:	cmp	r0, #0
    163c:	beq.n	16dc <MTPStorage_SD::removeFile(unsigned long, char*)+0xc4>
  {
    FsFile f2;
    while((f2=f1.openNextFile()))
    { f2.getName(fname,MAX_FILENAME_LEN);
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    163e:	ldr.w	r8, [pc, #168]	; 16e8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd0>
    FsFile f2;
    1642:	add	r0, sp, #88	; 0x58
    1644:	bl	f6c <FsFile::FsFile()>
    FsFile tmpFile;
    1648:	add	r0, sp, #168	; 0xa8
    164a:	bl	f6c <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    164e:	movs	r2, #0
    1650:	add	r1, sp, #24
    1652:	add	r0, sp, #184	; 0xb8
    1654:	bl	8ed8 <FsBaseFile::openNext(FsBaseFile*, int)>
    1658:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    165a:	add	r1, sp, #184	; 0xb8
    165c:	add	r0, sp, #104	; 0x68
    165e:	str	r3, [sp, #92]	; 0x5c
    1660:	ldr	r3, [sp, #176]	; 0xb0
    1662:	str	r3, [sp, #96]	; 0x60
    1664:	ldrb.w	r3, [sp, #180]	; 0xb4
    1668:	strb.w	r3, [sp, #100]	; 0x64
    166c:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1670:	add	r0, sp, #104	; 0x68
    1672:	bl	f40 <FsBaseFile::isOpen() const>
    1676:	mov	r7, r0
    while((f2=f1.openNextFile()))
    1678:	add	r0, sp, #168	; 0xa8
    167a:	bl	f88 <FsFile::~FsFile()>
    167e:	cbnz	r7, 169e <MTPStorage_SD::removeFile(unsigned long, char*)+0x86>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    }
    sd_rmdir(store,file);
    1680:	mov	r2, r6
    1682:	mov	r1, r5
    1684:	mov	r0, r4
    1686:	bl	1044 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    168a:	add	r0, sp, #88	; 0x58
    168c:	bl	f88 <FsFile::~FsFile()>
  else
  {
    sd_remove(store,file);
  }
}
    1690:	add	r0, sp, #8
    1692:	bl	f88 <FsFile::~FsFile()>
    1696:	add.w	sp, sp, #1016	; 0x3f8
    169a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    169e:	add	r7, sp, #248	; 0xf8
    16a0:	mov.w	r2, #256	; 0x100
    16a4:	add	r0, sp, #104	; 0x68
    16a6:	mov	r1, r7
    16a8:	bl	d74 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,strlen(tname),"%s/%s",file,fname);
    16ac:	add	r0, sp, #504	; 0x1f8
    16ae:	bl	f490 <strlen>
    16b2:	mov	r2, r8
    16b4:	mov	r1, r0
    16b6:	mov	r3, r6
    16b8:	add	r0, sp, #504	; 0x1f8
    16ba:	str	r7, [sp, #0]
    16bc:	bl	ef8c <sniprintf>
    return BaseFile::isDir();
    16c0:	add	r0, sp, #104	; 0x68
    16c2:	bl	f1e <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    16c6:	add	r2, sp, #504	; 0x1f8
    16c8:	mov	r1, r5
    16ca:	cbz	r0, 16d4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xbc>
    16cc:	mov	r0, r4
    16ce:	bl	1618 <MTPStorage_SD::removeFile(unsigned long, char*)>
    16d2:	b.n	1648 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
    16d4:	mov	r0, r4
    16d6:	bl	fe0 <mSD_Base::sd_remove(unsigned long, char const*)>
    16da:	b.n	1648 <MTPStorage_SD::removeFile(unsigned long, char*)+0x30>
    sd_remove(store,file);
    16dc:	mov	r2, r6
    16de:	mov	r1, r5
    16e0:	mov	r0, r4
    16e2:	bl	fe0 <mSD_Base::sd_remove(unsigned long, char const*)>
    16e6:	b.n	1690 <MTPStorage_SD::removeFile(unsigned long, char*)+0x78>
    16e8:	.word	0x2000105e

000016ec <MTPStorage_SD::DeleteObject(unsigned long)>:

  bool MTPStorage_SD::DeleteObject(uint32_t object)
  {
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    16ec:	adds	r3, r1, #1
  {
    16ee:	push	{r4, r5, r6, r7, lr}
    16f0:	mov	r4, r0
    16f2:	subw	sp, sp, #1380	; 0x564
    16f6:	mov	r5, r1
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    16f8:	beq.n	1748 <MTPStorage_SD::DeleteObject(unsigned long)+0x5c>

    // first create full filename
    char filename[MAX_FILENAME_LEN];
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    16fa:	mov.w	r3, #256	; 0x100
    16fe:	add	r2, sp, #280	; 0x118
    1700:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>

    Record r = ReadIndexRecord(object);
    1704:	mov	r2, r5
    1706:	mov	r1, r4
    1708:	add	r0, sp, #536	; 0x218
    170a:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>

    // remove file from storage (assume it is always working)
    mtp_lock_storage(true);
    removeFile(r.store,filename);
    170e:	add	r2, sp, #280	; 0x118
    1710:	ldrh.w	r1, [sp, #550]	; 0x226
    1714:	mov	r0, r4
    1716:	bl	1618 <MTPStorage_SD::removeFile(unsigned long, char*)>
    mtp_lock_storage(false);

    // mark object as deleted
    r.name[0]=0;
    171a:	movs	r3, #0
    WriteIndexRecord(object, r);
    171c:	add	r2, sp, #536	; 0x218
    171e:	mov	r1, r5
    1720:	mov	r0, r4
    r.name[0]=0;
    1722:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    1726:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    
    // update index file
    Record t = ReadIndexRecord(r.parent);
    172a:	ldr	r2, [sp, #536]	; 0x218
    172c:	mov	r1, r4
    172e:	add	r0, sp, #816	; 0x330
    1730:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1734:	ldr	r6, [sp, #820]	; 0x334
    1736:	cmp	r6, r5
    1738:	bne.n	1750 <MTPStorage_SD::DeleteObject(unsigned long)+0x64>
    { // we are the jungest, simply relink parent to older sibling
      t.child = r.sibling;
    173a:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    173c:	add	r2, sp, #816	; 0x330
    173e:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    1740:	str	r3, [sp, #820]	; 0x334
      uint32_t is = t.child;
      Record x = ReadIndexRecord(is);
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
      // is points now to junder sibling
      x.sibling = r.sibling;
      WriteIndexRecord(is, x);
    1742:	mov	r0, r4
    1744:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    }
    return 1;
  }
    1748:	movs	r0, #1
    174a:	addw	sp, sp, #1380	; 0x564
    174e:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1750:	mov	r2, r6
    1752:	mov	r1, r4
    1754:	add.w	r0, sp, #1096	; 0x448
    1758:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    175c:	ldr.w	r7, [sp, #1104]	; 0x450
    1760:	cmp	r7, r5
    1762:	bne.n	1772 <MTPStorage_SD::DeleteObject(unsigned long)+0x86>
      x.sibling = r.sibling;
    1764:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1766:	add.w	r2, sp, #1096	; 0x448
    176a:	mov	r1, r6
      x.sibling = r.sibling;
    176c:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    1770:	b.n	1742 <MTPStorage_SD::DeleteObject(unsigned long)+0x56>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1772:	mov	r2, r7
    1774:	mov	r1, r4
    1776:	mov	r0, sp
    1778:	mov	r6, r7
    177a:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    177e:	mov.w	r2, #280	; 0x118
    1782:	mov	r1, sp
    1784:	add.w	r0, sp, #1096	; 0x448
    1788:	bl	a8dc <memcpy>
    178c:	b.n	175c <MTPStorage_SD::DeleteObject(unsigned long)+0x70>

0000178e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:

  uint32_t MTPStorage_SD::Create(uint32_t store, uint32_t parent,  bool folder, const char* filename)
  {
    178e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t ret;
    if (parent == 0xFFFFFFFFUL) parent = store;
    1792:	cmp.w	r2, #4294967295
    1796:	ite	ne
    1798:	movne	r8, r2
    179a:	moveq	r8, r1
  {
    179c:	sub.w	sp, sp, #816	; 0x330
    17a0:	mov	r4, r0
    17a2:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    17a4:	mov	r2, r8
    17a6:	mov	r1, r0
    17a8:	add	r0, sp, #256	; 0x100
  {
    17aa:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    17ac:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record r;
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    17b0:	mov.w	r2, #256	; 0x100
    17b4:	ldr	r1, [sp, #840]	; 0x348
    17b6:	add	r0, sp, #560	; 0x230
    17b8:	bl	f26e <strlcpy>
    r.store = p.store;
    17bc:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.parent = parent;
    r.child = 0;
    r.sibling = p.child;
    17c0:	ldr	r2, [sp, #260]	; 0x104
    r.cptime = 0;
    r.mpdate = 0;
    r.mptime = 0;
    // New folder is empty, scanned = true.
    r.scanned = 1;
    ret = p.child = AppendIndexRecord(r);
    17c2:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    17c4:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    17c8:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    17ca:	mov	r0, r4
    r.sibling = p.child;
    17cc:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    17ce:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    17d0:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    17d4:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    17d8:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    17dc:	movs	r3, #1
    17de:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    17e2:	bl	119a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    17e6:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    17e8:	mov	r5, r0
    17ea:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    17ec:	mov	r1, r8
    17ee:	mov	r0, r4
    17f0:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    17f4:	cbz	r7, 1818 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
    {
      char filename[MAX_FILENAME_LEN];
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    17f6:	mov	r2, sp
    17f8:	mov	r1, r5
    17fa:	mov.w	r3, #256	; 0x100
    17fe:	mov	r0, r4
    1800:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      mtp_lock_storage(true);
      sd_mkdir(store,filename);
    1804:	mov	r2, sp
    1806:	mov	r1, r6
    1808:	mov	r0, r4
    180a:	bl	fa0 <mSD_Base::sd_mkdir(unsigned long, char*)>
      Serial.print(store); Serial.print(" "); 
      Serial.print(parent); Serial.print(" "); 
      Serial.println(filename);
    #endif
    return ret;
  }
    180e:	mov	r0, r5
    1810:	add.w	sp, sp, #816	; 0x330
    1814:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    1818:	movw	r2, #514	; 0x202
    181c:	mov	r1, r5
    181e:	mov	r0, r4
    1820:	bl	12b8 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1824:	b.n	180e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001826 <MTPStorage_SD::write(unsigned char const*, unsigned long)>:

  size_t MTPStorage_SD::write(const uint8_t* data, uint32_t bytes)
  {
    1826:	push	{r3, lr}
    return BaseFile::write(buffer, size);
    1828:	add.w	r0, r0, #260	; 0x104
    182c:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
      mtp_lock_storage(true);
      size_t ret = file_.write(data,bytes);
      mtp_lock_storage(false);
      return ret;
  }
    1830:	pop	{r3, pc}

00001832 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    1832:	ldr.w	r3, [r0, #316]	; 0x13c

  void MTPStorage_SD::close() 
  {
    1836:	push	{r4, r5, lr}
    1838:	mov	r4, r0
    183a:	sub	sp, #300	; 0x12c
    183c:	cbz	r3, 18a8 <MTPStorage_SD::close()+0x76>
    183e:	ldr	r5, [r3, #28]
    mtp_lock_storage(true);
    uint32_t size = (uint32_t) file_.size();
    uint16_t cpdate,cptime,mpdate,mptime;
    file_.getCreateDateTime(&cpdate,&cptime);
    1840:	add.w	r0, r4, #260	; 0x104
    1844:	add.w	r2, sp, #10
    1848:	add	r1, sp, #8
    184a:	str	r0, [sp, #4]
    184c:	bl	d9a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.getCreateDateTime(&mpdate,&mptime);
    1850:	add.w	r2, sp, #14
    1854:	add	r1, sp, #12
    1856:	ldr	r0, [sp, #4]
    1858:	bl	d9a <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*) [clone .isra.0]>
    file_.close();
    185c:	ldr	r0, [sp, #4]
    185e:	bl	8dd8 <FsBaseFile::close()>
    mtp_lock_storage(false);
    //
    // update record with file size
    Record r = ReadIndexRecord(open_file_);
    1862:	ldr.w	r2, [r4, #416]	; 0x1a0
    1866:	mov	r1, r4
    1868:	add	r0, sp, #16
    186a:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.child = size;
    r.cpdate=cpdate;
    186e:	ldrh.w	r3, [sp, #8]
    r.cptime=cptime;
    r.mpdate=mpdate;
    r.mptime=mptime;
    WriteIndexRecord(open_file_, r);
    1872:	add	r2, sp, #16
    1874:	ldr.w	r1, [r4, #416]	; 0x1a0
    r.cpdate=cpdate;
    1878:	strh.w	r3, [sp, #32]
    WriteIndexRecord(open_file_, r);
    187c:	mov	r0, r4
    r.cptime=cptime;
    187e:	ldrh.w	r3, [sp, #10]
    uint32_t size = (uint32_t) file_.size();
    1882:	str	r5, [sp, #20]
    r.cptime=cptime;
    1884:	strh.w	r3, [sp, #34]	; 0x22
    r.mpdate=mpdate;
    1888:	ldrh.w	r3, [sp, #12]
    188c:	strh.w	r3, [sp, #36]	; 0x24
    r.mptime=mptime;
    1890:	ldrh.w	r3, [sp, #14]
    1894:	strh.w	r3, [sp, #38]	; 0x26
    WriteIndexRecord(open_file_, r);
    1898:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    189c:	mvn.w	r3, #1
    18a0:	str.w	r3, [r4, #416]	; 0x1a0
  }
    18a4:	add	sp, #300	; 0x12c
    18a6:	pop	{r4, r5, pc}
    18a8:	ldr.w	r5, [r0, #320]	; 0x140
           m_xFile ? m_xFile->fileSize() : 0;
    18ac:	cmp	r5, #0
    18ae:	beq.n	1840 <MTPStorage_SD::close()+0xe>
    18b0:	ldr	r5, [r5, #16]
    18b2:	b.n	1840 <MTPStorage_SD::close()+0xe>

000018b4 <MTPStorage_SD::rename(unsigned long, char const*)>:

  bool MTPStorage_SD::rename(uint32_t handle, const char* name) 
  { char oldName[MAX_FILENAME_LEN];
    18b4:	push	{r4, r5, r6, r7, lr}
    18b6:	subw	sp, sp, #1052	; 0x41c
    char newName[MAX_FILENAME_LEN];
    char temp[MAX_FILENAME_LEN];

    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    18ba:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    18be:	mov	r4, r0
    18c0:	mov	r5, r1
    18c2:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    18c4:	mov	r2, sp
    18c6:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    18ca:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    18cc:	mov	r6, r0
    Serial.println(oldName);
    18ce:	ldr	r0, [pc, #120]	; (1948 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    18d0:	bl	de8 <Print::println(char const*) [clone .isra.0]>

    Record p1 = ReadIndexRecord(handle);
    18d4:	mov	r2, r5
    18d6:	mov	r1, r4
    18d8:	add	r0, sp, #768	; 0x300
    18da:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    18de:	mov.w	r2, #256	; 0x100
    18e2:	add	r1, sp, #792	; 0x318
    18e4:	add	r0, sp, #512	; 0x200
    18e6:	bl	f26e <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    18ea:	mov.w	r2, #256	; 0x100
    18ee:	mov	r1, r7
    18f0:	add	r0, sp, #792	; 0x318
    18f2:	bl	f26e <strlcpy>

    WriteIndexRecord(handle, p1);
    18f6:	add	r2, sp, #768	; 0x300
    18f8:	mov	r1, r5
    18fa:	mov	r0, r4
    18fc:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1900:	mov.w	r3, #256	; 0x100
    1904:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1906:	add.w	r6, r4, r6, lsl #2
    190a:	add.w	r2, sp, r3
    190e:	mov	r0, r4
    1910:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    1914:	add	r1, sp, #256	; 0x100
    1916:	ldr	r0, [pc, #48]	; (1948 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1918:	bl	de8 <Print::println(char const*) [clone .isra.0]>
    191c:	ldr	r0, [r6, #84]	; 0x54
    191e:	add	r2, sp, #256	; 0x100
    1920:	mov	r1, sp
    1922:	bl	e6e <FsVolume::rename(char const*, char const*)>

    if (sd_rename(store,oldName,newName)) return true;
    1926:	mov	r6, r0
    1928:	cbnz	r0, 1940 <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>

    // rename failed; undo index update
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    192a:	mov.w	r2, #256	; 0x100
    192e:	add	r1, sp, #512	; 0x200
    1930:	add	r0, sp, #792	; 0x318
    1932:	bl	f26e <strlcpy>
    WriteIndexRecord(handle, p1);
    1936:	add	r2, sp, #768	; 0x300
    1938:	mov	r1, r5
    193a:	mov	r0, r4
    193c:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
  }
    1940:	mov	r0, r6
    1942:	addw	sp, sp, #1052	; 0x41c
    1946:	pop	{r4, r5, r6, r7, pc}
    1948:	.word	0x20001c8c

0000194c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    194c:	push	{r4, r5, r6, lr}
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    194e:	add.w	r1, r0, r1, lsl #2
    1952:	sub.w	sp, sp, #2208	; 0x8a0
    1956:	mov	r5, r0
    1958:	mov	r6, r3
    195a:	ldr	r1, [r1, #84]	; 0x54
    195c:	movs	r3, #0
    195e:	mov	r0, sp
    1960:	bl	900c <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1964:	add	r0, sp, #16
    1966:	bl	f40 <FsBaseFile::isOpen() const>
    196a:	mov	r4, r0
    196c:	cbnz	r0, 1984 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    196e:	movw	r0, #717	; 0x2cd
    1972:	bl	dfc <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    1976:	mov	r0, sp
    1978:	bl	f88 <FsFile::~FsFile()>
    197c:	mov	r0, r4
    197e:	add.w	sp, sp, #2208	; 0x8a0
    1982:	pop	{r4, r5, r6, pc}
    1984:	add.w	r5, r5, r6, lsl #2
    1988:	movw	r3, #514	; 0x202
    198c:	ldr.w	r2, [sp, #2224]	; 0x8b0
    1990:	add	r0, sp, #80	; 0x50
    1992:	ldr	r1, [r5, #84]	; 0x54
    1994:	bl	900c <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    1998:	add	r0, sp, #96	; 0x60
    199a:	bl	f40 <FsBaseFile::isOpen() const>
    199e:	mov	r4, r0
    19a0:	cbnz	r0, 19b8 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    19a2:	add	r0, sp, #16
    19a4:	bl	8dd8 <FsBaseFile::close()>
    19a8:	mov.w	r0, #720	; 0x2d0
    19ac:	bl	dfc <dbgPrint(unsigned short)>
}
    19b0:	add	r0, sp, #80	; 0x50
    19b2:	bl	f88 <FsFile::~FsFile()>
    19b6:	b.n	1976 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    19b8:	mov.w	r5, #4294967295
    return BaseFile::available();
    19bc:	add	r0, sp, #16
    19be:	bl	ece <FsBaseFile::available() const>
  while(f1.available()>0)
    19c2:	cmp	r0, #0
    19c4:	ble.n	19e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    19c6:	mov.w	r2, #2048	; 0x800
    19ca:	add	r1, sp, #160	; 0xa0
    19cc:	add	r0, sp, #16
    19ce:	bl	f52 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    19d2:	subs	r5, r0, #0
    19d4:	blt.n	19e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    19d6:	mov	r2, r5
    19d8:	add	r1, sp, #160	; 0xa0
    19da:	add	r0, sp, #96	; 0x60
    19dc:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    19e0:	cmp.w	r5, #2048	; 0x800
    19e4:	bge.n	19bc <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    19e6:	add	r0, sp, #16
    19e8:	bl	8dd8 <FsBaseFile::close()>
  f2.close();
    19ec:	add	r0, sp, #96	; 0x60
    19ee:	bl	8dd8 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    19f2:	cmp	r5, #0
    19f4:	bge.n	19b0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    19f6:	mov.w	r0, #732	; 0x2dc
    19fa:	movs	r4, #0
    19fc:	bl	dfc <dbgPrint(unsigned short)>
    1a00:	b.n	19b0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001a02 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a02:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a06:	sub.w	sp, sp, #1640	; 0x668
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a0a:	cmp.w	r3, #4294967295
    1a0e:	ite	ne
    1a10:	movne	r7, r3
    1a12:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a14:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a16:	mov	r2, r1
    1a18:	mov	r1, r0
    1a1a:	add	r0, sp, #520	; 0x208
    1a1c:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a20:	mov	r2, r7
    1a22:	mov	r1, r4
    1a24:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a26:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a2a:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a2c:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a30:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a32:	cbnz	r6, 1a4a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a34:	mov	r0, r4
    1a36:	add	r2, sp, #800	; 0x320
    1a38:	mov	r1, r7
  p2.child=iy;
    1a3a:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1a3c:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a40:	movs	r0, #1
    1a42:	add.w	sp, sp, #1640	; 0x668
    1a46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Record px = ReadIndexRecord(ix) ;
    1a4a:	mov	r2, r6
    1a4c:	mov	r1, r4
    1a4e:	add.w	r0, sp, #1080	; 0x438
    1a52:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a56:	mov.w	r2, #280	; 0x118
    1a5a:	add.w	r1, sp, #1080	; 0x438
    1a5e:	add.w	r0, sp, #1360	; 0x550
    1a62:	bl	a8dc <memcpy>
    py.store = p2.store;
    1a66:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1a6a:	add.w	r1, sp, #1360	; 0x550
    1a6e:	mov	r0, r4
    py.store = p2.store;
    1a70:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1a74:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1a78:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1a7c:	bl	119a <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1a80:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1a82:	mov.w	r3, #256	; 0x100
    1a86:	add	r2, sp, #8
    1a88:	mov	r1, r6
    1a8a:	mov	r0, r4
    1a8c:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1a90:	add	r2, sp, #264	; 0x108
    1a92:	mov.w	r3, #256	; 0x100
    1a96:	mov	r1, r5
    1a98:	mov	r0, r4
    1a9a:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1a9e:	ldrb.w	r1, [sp, #1372]	; 0x55c
    1aa2:	ldrh.w	r3, [sp, #1374]	; 0x55e
    1aa6:	add	r2, sp, #264	; 0x108
    1aa8:	cbz	r1, 1ad0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xce>
      sd_mkdir(py.store,newfilename);
    1aaa:	mov	r1, r3
    1aac:	mov	r0, r4
    1aae:	bl	fa0 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1ab2:	mov	r2, r6
    1ab4:	mov	r1, r8
    1ab6:	mov	r0, r4
    1ab8:	bl	133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1abc:	mov	r3, r5
    1abe:	ldrh.w	r2, [sp, #814]	; 0x32e
    1ac2:	mov	r1, r6
    1ac4:	mov	r0, r4
    1ac6:	bl	1a02 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
    ix = px.sibling;
    1aca:	ldr.w	r6, [sp, #1088]	; 0x440
    1ace:	b.n	1a32 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1ad0:	str	r2, [sp, #0]
    1ad2:	mov	r1, r8
    1ad4:	add	r2, sp, #8
    1ad6:	mov	r0, r4
    1ad8:	bl	194c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1adc:	b.n	1aca <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xc8>

00001ade <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1ade:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ae2:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1ae6:	cmp.w	r3, #4294967295
    1aea:	ite	ne
    1aec:	movne	r7, r3
    1aee:	moveq	r7, r2
  { 
    1af0:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1af2:	mov	r2, r1
  { 
    1af4:	mov	r6, r1
    Record p1 = ReadIndexRecord(handle);
    1af6:	mov	r1, r0
    1af8:	add	r0, sp, #520	; 0x208
    1afa:	add.w	r8, sp, #544	; 0x220
    1afe:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1b02:	mov	r2, r7
    1b04:	mov	r1, r4
    1b06:	add	r0, sp, #800	; 0x320
    1b08:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1b0c:	ldrb.w	r5, [sp, #532]	; 0x214
    1b10:	cbz	r5, 1b54 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    1b12:	ldrh.w	r1, [sp, #534]	; 0x216
    1b16:	mov	r2, r6
    1b18:	mov	r0, r4
    1b1a:	adds	r1, #1
    1b1c:	bl	133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1b20:	ldrb.w	r3, [sp, #532]	; 0x214
    1b24:	mov	r2, r7
    1b26:	ldrh.w	r1, [sp, #814]	; 0x32e
    1b2a:	subs	r3, #0
    1b2c:	mov	r0, r4
    1b2e:	str.w	r8, [sp]
    1b32:	it	ne
    1b34:	movne	r3, #1
    1b36:	bl	178e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
      CopyFiles(handle, p2.store, newHandle);
    1b3a:	ldrh.w	r2, [sp, #814]	; 0x32e
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1b3e:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    1b40:	mov	r3, r0
    1b42:	mov	r1, r6
    1b44:	mov	r0, r4
    1b46:	bl	1a02 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>
  }
    1b4a:	mov	r0, r5
    1b4c:	add.w	sp, sp, #1360	; 0x550
    1b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    1b54:	mov.w	r2, #256	; 0x100
    1b58:	mov	r1, r8
    1b5a:	add.w	r0, sp, #1104	; 0x450
    1b5e:	bl	f26e <strlcpy>
      r.store = p2.store;
    1b62:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    1b66:	add.w	r1, sp, #1080	; 0x438
    1b6a:	mov	r0, r4
      r.store = p2.store;
    1b6c:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    1b70:	ldr	r3, [sp, #804]	; 0x324
      r.parent = newParent;
    1b72:	str.w	r7, [sp, #1080]	; 0x438
      r.sibling = p2.child;
    1b76:	str.w	r3, [sp, #1088]	; 0x440
      r.child = 0;
    1b7a:	str.w	r5, [sp, #1084]	; 0x43c
      r.isdir = 0;
    1b7e:	strh.w	r5, [sp, #1092]	; 0x444
      newHandle = p2.child = AppendIndexRecord(r);
    1b82:	bl	119a <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1b86:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    1b88:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1b8a:	mov	r1, r7
      newHandle = p2.child = AppendIndexRecord(r);
    1b8c:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1b8e:	mov	r0, r4
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1b90:	add	r7, sp, #264	; 0x108
      WriteIndexRecord(newParent, p2);
    1b92:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1b96:	add	r2, sp, #8
    1b98:	mov	r1, r6
    1b9a:	mov.w	r3, #256	; 0x100
    1b9e:	mov	r0, r4
    1ba0:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1ba4:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1ba6:	mov	r2, r7
    1ba8:	mov	r1, r5
    1baa:	mov.w	r3, #256	; 0x100
    1bae:	mov	r0, r4
    1bb0:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1bb4:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1bb6:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1bb8:	mov	r1, r6
    1bba:	mov	r0, r4
    1bbc:	str	r7, [sp, #0]
    1bbe:	bl	194c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1bc2:	b.n	1b4a <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001bc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1bc4:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1bc8:	ldr.w	r8, [sp, #32]
    1bcc:	mov	r6, r1
    1bce:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1bd0:	mov	r1, r3
    1bd2:	mov	r2, r8
    1bd4:	str	r3, [sp, #4]
{ // old and new are directory paths
    1bd6:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1bd8:	bl	fa0 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1bdc:	ldr	r3, [sp, #4]
    1bde:	mov	r4, r0
    1be0:	cbz	r0, 1bf6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1be2:	mov	r2, r7
    1be4:	mov	r1, r6
    1be6:	mov	r0, r5
    1be8:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1bec:	add	sp, #8
    1bee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1bf2:	b.w	1c08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1bf6:	movw	r0, #742	; 0x2e6
    1bfa:	bl	dfc <dbgPrint(unsigned short)>
}
    1bfe:	mov	r0, r4
    1c00:	add	sp, #8
    1c02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001c08 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1c08:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c0c:	mov	r6, r1
    1c0e:	sub.w	sp, sp, #680	; 0x2a8
    1c12:	add.w	r1, r0, r1, lsl #2
    1c16:	mov	r5, r0
    1c18:	mov	r8, r3
    1c1a:	add	r0, sp, #8
    1c1c:	movs	r3, #0
    1c1e:	ldr	r1, [r1, #84]	; 0x54
    1c20:	mov	r7, r2
    1c22:	bl	900c <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c26:	add	r0, sp, #24
    1c28:	bl	f40 <FsBaseFile::isOpen() const>
    1c2c:	mov	r4, r0
    1c2e:	cmp	r0, #0
    1c30:	beq.n	1ce6 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1c32:	ldr	r4, [pc, #264]	; (1d3c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1c34:	mov.w	r2, #256	; 0x100
    1c38:	mov	r1, r7
    1c3a:	add	r0, sp, #168	; 0xa8
    1c3c:	bl	f26e <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1c40:	add	r0, sp, #168	; 0xa8
    1c42:	bl	f490 <strlen>
    1c46:	add	r3, sp, #168	; 0xa8
    1c48:	add	r0, r3
    1c4a:	ldrb.w	r3, [r0, #-1]
    1c4e:	cmp	r3, #47	; 0x2f
    1c50:	beq.n	1c5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1c52:	mov.w	r2, #256	; 0x100
    1c56:	mov	r1, r4
    1c58:	add	r0, sp, #168	; 0xa8
    1c5a:	bl	f228 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1c5e:	mov.w	r2, #256	; 0x100
    1c62:	ldr	r1, [sp, #704]	; 0x2c0
    1c64:	add	r0, sp, #424	; 0x1a8
    1c66:	bl	f26e <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1c6a:	add	r0, sp, #424	; 0x1a8
    1c6c:	bl	f490 <strlen>
    1c70:	add	r3, sp, #424	; 0x1a8
    1c72:	add	r0, r3
    1c74:	ldrb.w	r3, [r0, #-1]
    1c78:	cmp	r3, #47	; 0x2f
    1c7a:	beq.n	1c88 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1c7c:	mov.w	r2, #256	; 0x100
    1c80:	mov	r1, r4
    1c82:	add	r0, sp, #424	; 0x1a8
    1c84:	bl	f228 <strlcat>
    FsFile tmpFile;
    1c88:	add	r0, sp, #88	; 0x58
    1c8a:	bl	f6c <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1c8e:	movs	r2, #0
    1c90:	add	r1, sp, #24
    1c92:	add	r0, sp, #104	; 0x68
    1c94:	bl	8ed8 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1c98:	add	r0, sp, #104	; 0x68
    1c9a:	bl	f40 <FsBaseFile::isOpen() const>
    1c9e:	cmp	r0, #0
    1ca0:	beq.n	1d26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1ca2:	mov.w	r2, #256	; 0x100
    1ca6:	add	r1, sp, #168	; 0xa8
    1ca8:	add	r0, sp, #104	; 0x68
    1caa:	bl	d74 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1cae:	mov.w	r2, #256	; 0x100
    1cb2:	add	r1, sp, #424	; 0x1a8
    1cb4:	add	r0, sp, #104	; 0x68
    1cb6:	bl	d74 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1cba:	add	r0, sp, #104	; 0x68
    1cbc:	bl	f1e <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1cc0:	add	r3, sp, #424	; 0x1a8
    1cc2:	add	r2, sp, #168	; 0xa8
    1cc4:	mov	r1, r6
    1cc6:	str	r3, [sp, #0]
    1cc8:	mov	r3, r8
        if(f2.isDirectory())
    1cca:	cbz	r0, 1cfe <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1ccc:	mov	r0, r5
    1cce:	bl	1bc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1cd2:	cbnz	r0, 1d1e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1cd4:	movw	r0, #765	; 0x2fd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1cd8:	bl	dfc <dbgPrint(unsigned short)>
    }
    1cdc:	add	r0, sp, #88	; 0x58
    1cde:	movs	r4, #0
    1ce0:	bl	f88 <FsFile::~FsFile()>
    1ce4:	b.n	1cee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1ce6:	movw	r0, #745	; 0x2e9
    1cea:	bl	dfc <dbgPrint(unsigned short)>
}
    1cee:	add	r0, sp, #8
    1cf0:	bl	f88 <FsFile::~FsFile()>
    1cf4:	mov	r0, r4
    1cf6:	add.w	sp, sp, #680	; 0x2a8
    1cfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1cfe:	mov	r0, r5
    1d00:	bl	194c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1d04:	cbnz	r0, 1d0c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1d06:	movw	r0, #769	; 0x301
    1d0a:	b.n	1cd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1d0c:	add	r2, sp, #168	; 0xa8
    1d0e:	mov	r1, r6
    1d10:	mov	r0, r5
    1d12:	bl	fe0 <mSD_Base::sd_remove(unsigned long, char const*)>
    1d16:	cbnz	r0, 1d1e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1d18:	movw	r0, #770	; 0x302
    1d1c:	b.n	1cd8 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1d1e:	add	r0, sp, #88	; 0x58
    1d20:	bl	f88 <FsFile::~FsFile()>
    1d24:	b.n	1c34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1d26:	add	r0, sp, #88	; 0x58
    1d28:	bl	f88 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1d2c:	mov	r2, r7
    1d2e:	mov	r1, r6
    1d30:	mov	r0, r5
    1d32:	bl	1044 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1d36:	mov	r4, r0
    1d38:	b.n	1cee <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1d3a:	nop
    1d3c:	.word	0x20000ce2

00001d40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1d40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d44:	subw	sp, sp, #2760	; 0xac8
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1d48:	cmp.w	r3, #4294967295
    1d4c:	ite	ne
    1d4e:	movne	r7, r3
    1d50:	moveq	r7, r2
  { 
    1d52:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1d54:	mov	r2, r1
  { 
    1d56:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1d58:	mov	r1, r0
    1d5a:	add	r0, sp, #800	; 0x320
    1d5c:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1d60:	mov	r2, r7
    1d62:	mov	r1, r4
    1d64:	add.w	r0, sp, #1080	; 0x438
    1d68:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1d6c:	ldr	r2, [sp, #800]	; 0x320
    1d6e:	mov	r1, r4
    1d70:	add.w	r0, sp, #1360	; 0x550
    1d74:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1d78:	ldrb.w	r3, [sp, #812]	; 0x32c
    1d7c:	cbz	r3, 1d9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1d7e:	ldrb.w	r3, [sp, #813]	; 0x32d
    1d82:	cbnz	r3, 1d9a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1d84:	mov	r2, r5
    1d86:	ldrh.w	r1, [sp, #814]	; 0x32e
    1d8a:	mov	r0, r4
    1d8c:	bl	133e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1d90:	add	r2, sp, #800	; 0x320
    1d92:	mov	r1, r5
    1d94:	mov	r0, r4
    1d96:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1d9a:	mov.w	r2, #280	; 0x118
    1d9e:	add	r1, sp, #800	; 0x320
    1da0:	add.w	r0, sp, #1640	; 0x668
    1da4:	bl	a8dc <memcpy>
    Record p2o = p2;
    1da8:	mov.w	r2, #280	; 0x118
    1dac:	add.w	r1, sp, #1080	; 0x438
    1db0:	add.w	r0, sp, #1920	; 0x780
    1db4:	bl	a8dc <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1db8:	mov.w	r3, #256	; 0x100
    1dbc:	add	r2, sp, #288	; 0x120
    1dbe:	mov	r1, r5
    1dc0:	mov	r0, r4
    1dc2:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1dc6:	ldr.w	r8, [sp, #1364]	; 0x554
    1dca:	cmp	r8, r5
    1dcc:	bne.n	1e44 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1dce:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1dd0:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1dd4:	add.w	r2, sp, #1360	; 0x550
    1dd8:	ldr	r1, [sp, #800]	; 0x320
    1dda:	mov	r0, r4
        p3.child = p1.sibling;
    1ddc:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1de0:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1de4:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1de8:	add	r2, sp, #800	; 0x320
    1dea:	mov	r1, r5
    1dec:	mov	r0, r4
      p1.store = p2.store;
    1dee:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1df2:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1df6:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1df8:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1dfa:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1dfe:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1e02:	add.w	r2, sp, #1080	; 0x438
    1e06:	mov	r1, r7
    1e08:	mov	r0, r4
    1e0a:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1e0e:	mov.w	r3, #256	; 0x100
    1e12:	mov	r1, r5
    1e14:	add	r2, sp, #544	; 0x220
    1e16:	mov	r0, r4
    1e18:	bl	1258 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1e1c:	ldrh.w	r1, [sp, #1654]	; 0x676
    1e20:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1e24:	cmp	r1, r3
    1e26:	bne.n	1ed4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1e28:	add.w	r3, r4, r1, lsl #2
    1e2c:	add	r2, sp, #544	; 0x220
    1e2e:	add	r1, sp, #288	; 0x120
    1e30:	ldr	r0, [r3, #84]	; 0x54
    1e32:	bl	e6e <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e36:	cbz	r0, 1ea4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1e38:	movs	r6, #1
  }
    1e3a:	mov	r0, r6
    1e3c:	addw	sp, sp, #2760	; 0xac8
    1e40:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        px = ReadIndexRecord(jx); 
    1e44:	mov	r2, r8
    1e46:	mov	r1, r4
    1e48:	add	r0, sp, #8
    1e4a:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1e4e:	mov.w	r2, #280	; 0x118
    1e52:	add	r1, sp, #8
    1e54:	add.w	r0, sp, #2480	; 0x9b0
    1e58:	bl	a8dc <memcpy>
        pxo = px;
    1e5c:	mov.w	r2, #280	; 0x118
    1e60:	add.w	r1, sp, #2480	; 0x9b0
    1e64:	addw	r0, sp, #2200	; 0x898
    1e68:	bl	a8dc <memcpy>
        while(handle != px.sibling)
    1e6c:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1e70:	cmp	r6, r5
    1e72:	bne.n	1e88 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1e74:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1e76:	add.w	r2, sp, #2480	; 0x9b0
    1e7a:	mov	r1, r8
    1e7c:	mov	r0, r4
        px.sibling = p1.sibling;
    1e7e:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1e82:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1e86:	b.n	1de4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1e88:	mov	r2, r6
    1e8a:	mov	r1, r4
    1e8c:	add	r0, sp, #8
    1e8e:	mov	r8, r6
    1e90:	bl	1214 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1e94:	mov.w	r2, #280	; 0x118
    1e98:	add	r1, sp, #8
    1e9a:	add.w	r0, sp, #2480	; 0x9b0
    1e9e:	bl	a8dc <memcpy>
          pxo = px;
    1ea2:	b.n	1e5c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1ea4:	movw	r0, #606	; 0x25e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1ea8:	bl	dfc <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1eac:	addw	r2, sp, #2200	; 0x898
    1eb0:	mov	r1, r8
    1eb2:	mov	r0, r4
    1eb4:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1eb8:	add.w	r2, sp, #1640	; 0x668
    1ebc:	mov	r1, r5
    1ebe:	mov	r0, r4
    1ec0:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1ec4:	add.w	r2, sp, #1920	; 0x780
    1ec8:	mov	r1, r7
    1eca:	mov	r0, r4
    return false;
    1ecc:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1ece:	bl	116c <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1ed2:	b.n	1e3a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1ed4:	ldrb.w	r2, [sp, #1652]	; 0x674
    1ed8:	cbnz	r2, 1efe <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1be>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1eda:	add	r2, sp, #544	; 0x220
    1edc:	mov	r0, r4
    1ede:	str	r2, [sp, #0]
    1ee0:	add	r2, sp, #288	; 0x120
    1ee2:	bl	194c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1ee6:	mov	r6, r0
    1ee8:	cbz	r0, 1ef8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1b8>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1eea:	add	r2, sp, #288	; 0x120
    1eec:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1ef0:	mov	r0, r4
    1ef2:	bl	fe0 <mSD_Base::sd_remove(unsigned long, char const*)>
    1ef6:	b.n	1e3a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1ef8:	movw	r0, #610	; 0x262
    1efc:	b.n	1ea8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1efe:	add	r2, sp, #544	; 0x220
    1f00:	mov	r0, r4
    1f02:	str	r2, [sp, #0]
    1f04:	add	r2, sp, #288	; 0x120
    1f06:	bl	1bc4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1f0a:	cmp	r0, #0
    1f0c:	bne.n	1e38 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1f0e:	movw	r0, #614	; 0x266
    1f12:	b.n	1ea8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001f14 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1f14:	push	{r4, r5, r6, lr}
    1f16:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1f1a:	ldr	r4, [pc, #60]	; (1f58 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1f1c:	ldr	r0, [r5, #84]	; 0x54
    1f1e:	bl	e56 <FsVolume::clusterCount() const>
    1f22:	mov	r1, r0
    1f24:	mov	r0, r4
    1f26:	bl	dae <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1f2a:	ldr	r0, [r5, #84]	; 0x54
    1f2c:	bl	508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1f30:	mov	r1, r0
    1f32:	mov	r0, r4
    1f34:	bl	dae <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1f38:	ldr	r6, [r5, #84]	; 0x54
    1f3a:	mov	r0, r6
    1f3c:	bl	e56 <FsVolume::clusterCount() const>
    1f40:	mov	r4, r0
    1f42:	mov	r0, r6
    1f44:	bl	508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1f48:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1f4a:	ldr	r0, [r5, #84]	; 0x54
    1f4c:	bl	e38 <FsVolume::bytesPerCluster() const>
    1f50:	umull	r0, r1, r4, r0
    1f54:	pop	{r4, r5, r6, pc}
    1f56:	nop
    1f58:	.word	0x20001c8c

00001f5c <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1f5c:	push	{r4, lr}
    1f5e:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1f60:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1f64:	mov	r0, r4
    1f66:	ldmia.w	sp!, {r4, lr}
    1f6a:	b.w	cde0 <Print::println()>

00001f6e <Print::print(char) [clone .isra.0]>:
	size_t print(char c)				{ return write((uint8_t)c); }
    1f6e:	ldr	r3, [r0, #0]
    1f70:	ldr	r3, [r3, #0]
    1f72:	bx	r3

00001f74 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1f74:	push	{r0, r1, r4, lr}
    1f76:	mov	r4, r0
    1f78:	cbz	r1, 1f94 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1f7a:	mov	r0, r1
    1f7c:	str	r1, [sp, #4]
    1f7e:	bl	f490 <strlen>
    1f82:	ldr	r3, [r4, #0]
    1f84:	mov	r2, r0
    1f86:	ldr	r1, [sp, #4]
    1f88:	ldr	r3, [r3, #4]
    1f8a:	mov	r0, r4
    1f8c:	add	sp, #8
    1f8e:	ldmia.w	sp!, {r4, lr}
    1f92:	bx	r3
    1f94:	add	sp, #8
    1f96:	pop	{r4, pc}

00001f98 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1f98:	b.w	1f74 <Print::write(char const*) [clone .isra.0]>

00001f9c <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1f9c:	push	{r4, lr}
    1f9e:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1fa0:	bl	1f74 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1fa4:	mov	r0, r4
    1fa6:	ldmia.w	sp!, {r4, lr}
    1faa:	b.w	cde0 <Print::println()>
	...

00001fb0 <menuGetLine()>:
#include "Hibernate.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1fb0:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1fb2:	bl	adc4 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1fb6:	cmp	r0, #0
    1fb8:	beq.n	1fb2 <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1fba:	ldr	r4, [pc, #36]	; (1fe0 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1fbc:	movw	r3, #5000	; 0x1388
    1fc0:	ldr	r5, [pc, #32]	; (1fe4 <menuGetLine()+0x34>)
    1fc2:	movs	r1, #13
    1fc4:	mov	r2, r4
    1fc6:	str	r3, [r5, #8]
    1fc8:	mov	r0, r5
    1fca:	movs	r3, #40	; 0x28
    1fcc:	bl	cd28 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1fd0:	movs	r3, #0
  Serial.println(buffer);
    1fd2:	mov	r1, r4
  buffer[count]=0;
    1fd4:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1fd6:	mov	r0, r5
    1fd8:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1fdc:	mov	r0, r4
    1fde:	pop	{r3, r4, r5, pc}
    1fe0:	.word	0x200221e2
    1fe4:	.word	0x20001c8c

00001fe8 <menuGetString(char*) [clone .isra.0]>:
{ char *buffer=menuGetLine();
  char c1,c2;
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
}

static int menuGetString(char *txt)
    1fe8:	push	{r0, r1, r2, lr}
    1fea:	str	r0, [sp, #4]
{ char *buffer=menuGetLine();
    1fec:	bl	1fb0 <menuGetLine()>
  return sscanf(buffer,"%s",txt);
    1ff0:	ldr	r2, [sp, #4]
    1ff2:	ldr	r1, [pc, #12]	; (2000 <menuGetString(char*) [clone .isra.0]+0x18>)
}
    1ff4:	add	sp, #12
    1ff6:	ldr.w	lr, [sp], #4
  return sscanf(buffer,"%s",txt);
    1ffa:	b.w	f034 <siscanf>
    1ffe:	nop
    2000:	.word	0x20001061

00002004 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    2004:	push	{r0, r1, r4, lr}
    2006:	mov	r4, r0
{ char *buffer=menuGetLine();
    2008:	bl	1fb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    200c:	add	r2, sp, #4
    200e:	ldr	r1, [pc, #12]	; (201c <menuGetInt16(short*) [clone .isra.0]+0x18>)
    2010:	bl	f034 <siscanf>
    2014:	ldr	r3, [sp, #4]
    2016:	strh	r3, [r4, #0]
}
    2018:	add	sp, #8
    201a:	pop	{r4, pc}
    201c:	.word	0x200013a1

00002020 <printPar()>:
    while(Serial.available()) ch=Serial.read();
    return status;
}

void printPar()
{
    2020:	push	{r4, lr}
      Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX);
    2022:	ldr	r4, [pc, #364]	; (2190 <printPar()+0x170>)
    2024:	ldr	r1, [pc, #364]	; (2194 <printPar()+0x174>)
    2026:	mov	r0, r4
    2028:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    202c:	ldr	r1, [pc, #360]	; (2198 <printPar()+0x178>)
    202e:	movs	r2, #16
    2030:	movs	r3, #0
    2032:	ldr	r1, [r1, #0]
    2034:	mov	r0, r4
    2036:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    203a:	mov	r0, r4
    203c:	bl	cde0 <Print::println()>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    2040:	mov	r0, r4
    2042:	ldr	r1, [pc, #344]	; (219c <printPar()+0x17c>)
    2044:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2048:	ldr	r3, [pc, #340]	; (21a0 <printPar()+0x180>)
	size_t println(long n)				{ return print(n) + println(); }
    204a:	mov	r0, r4
    204c:	ldr	r1, [r3, #0]
    204e:	bl	cdce <Print::print(long)>
    2052:	mov	r0, r4
    2054:	bl	cde0 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2058:	mov	r0, r4
    205a:	ldr	r1, [pc, #328]	; (21a4 <printPar()+0x184>)
    205c:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2060:	ldr	r3, [pc, #324]	; (21a8 <printPar()+0x188>)
    2062:	mov	r0, r4
    2064:	ldrh	r1, [r3, #0]
    2066:	sxth	r1, r1
    2068:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    206c:	mov	r0, r4
    206e:	ldr	r1, [pc, #316]	; (21ac <printPar()+0x18c>)
    2070:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2074:	ldr	r3, [pc, #312]	; (21b0 <printPar()+0x190>)
    2076:	mov	r0, r4
    2078:	ldrh	r1, [r3, #0]
    207a:	sxth	r1, r1
    207c:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    2080:	mov	r0, r4
    2082:	ldr	r1, [pc, #304]	; (21b4 <printPar()+0x194>)
    2084:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2088:	ldr	r3, [pc, #300]	; (21b8 <printPar()+0x198>)
    208a:	mov	r0, r4
    208c:	ldrh	r1, [r3, #0]
    208e:	sxth	r1, r1
    2090:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2094:	mov	r0, r4
    2096:	ldr	r1, [pc, #292]	; (21bc <printPar()+0x19c>)
    2098:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    209c:	ldr	r3, [pc, #288]	; (21c0 <printPar()+0x1a0>)
    209e:	mov	r0, r4
    20a0:	ldrh	r1, [r3, #0]
    20a2:	uxth	r1, r1
    20a4:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    20a8:	mov	r0, r4
    20aa:	ldr	r1, [pc, #280]	; (21c4 <printPar()+0x1a4>)
    20ac:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    20b0:	ldr	r3, [pc, #276]	; (21c8 <printPar()+0x1a8>)
    20b2:	mov	r0, r4
    20b4:	ldrh	r1, [r3, #0]
    20b6:	uxth	r1, r1
    20b8:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    20bc:	mov	r0, r4
    20be:	ldr	r1, [pc, #268]	; (21cc <printPar()+0x1ac>)
    20c0:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    20c4:	ldr	r3, [pc, #264]	; (21d0 <printPar()+0x1b0>)
    20c6:	mov	r0, r4
    20c8:	ldrh	r1, [r3, #0]
    20ca:	uxth	r1, r1
    20cc:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    20d0:	mov	r0, r4
    20d2:	ldr	r1, [pc, #256]	; (21d4 <printPar()+0x1b4>)
    20d4:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    20d8:	ldr	r3, [pc, #252]	; (21d8 <printPar()+0x1b8>)
    20da:	mov	r0, r4
    20dc:	ldrh	r1, [r3, #0]
    20de:	uxth	r1, r1
    20e0:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    20e4:	mov	r0, r4
    20e6:	ldr	r1, [pc, #244]	; (21dc <printPar()+0x1bc>)
    20e8:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    20ec:	ldr	r3, [pc, #240]	; (21e0 <printPar()+0x1c0>)
    20ee:	mov	r0, r4
    20f0:	ldrh	r1, [r3, #0]
    20f2:	uxth	r1, r1
    20f4:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    20f8:	mov	r0, r4
    20fa:	ldr	r1, [pc, #232]	; (21e4 <printPar()+0x1c4>)
    20fc:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2100:	ldr	r3, [pc, #228]	; (21e8 <printPar()+0x1c8>)
    2102:	mov	r0, r4
    2104:	ldrh	r1, [r3, #0]
    2106:	uxth	r1, r1
    2108:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    210c:	mov	r0, r4
    210e:	ldr	r1, [pc, #220]	; (21ec <printPar()+0x1cc>)
    2110:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2114:	ldr	r3, [pc, #216]	; (21f0 <printPar()+0x1d0>)
    2116:	mov	r0, r4
    2118:	ldrh	r1, [r3, #0]
    211a:	uxth	r1, r1
    211c:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    2120:	mov	r0, r4
    2122:	ldr	r1, [pc, #208]	; (21f4 <printPar()+0x1d4>)
    2124:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2128:	ldr	r3, [pc, #204]	; (21f8 <printPar()+0x1d8>)
    212a:	mov	r0, r4
    212c:	ldrh	r1, [r3, #0]
    212e:	uxth	r1, r1
    2130:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    2134:	mov	r0, r4
    2136:	ldr	r1, [pc, #196]	; (21fc <printPar()+0x1dc>)
    2138:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    213c:	ldr	r3, [pc, #192]	; (2200 <printPar()+0x1e0>)
    213e:	mov	r0, r4
    2140:	ldrh	r1, [r3, #0]
    2142:	uxth	r1, r1
    2144:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    2148:	mov	r0, r4
    214a:	ldr	r1, [pc, #184]	; (2204 <printPar()+0x1e4>)
    214c:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2150:	ldr	r3, [pc, #180]	; (2208 <printPar()+0x1e8>)
    2152:	mov	r0, r4
    2154:	ldrh	r1, [r3, #0]
    2156:	sxth	r1, r1
    2158:	bl	1f5c <Print::println(int) [clone .isra.0]>
      Serial.print("b     (b) = "); Serial.println((char *)b_string); 
    215c:	mov	r0, r4
    215e:	ldr	r1, [pc, #172]	; (220c <printPar()+0x1ec>)
    2160:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2164:	mov	r0, r4
    2166:	ldr	r1, [pc, #168]	; (2210 <printPar()+0x1f0>)
    2168:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
      Serial.print("k     (k) = "); Serial.println((char *)k_string); 
    216c:	mov	r0, r4
    216e:	ldr	r1, [pc, #164]	; (2214 <printPar()+0x1f4>)
    2170:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2174:	mov	r0, r4
    2176:	ldr	r1, [pc, #160]	; (2218 <printPar()+0x1f8>)
    2178:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
      Serial.print("n     (n) = "); Serial.println((char *)n_string); 
    217c:	mov	r0, r4
    217e:	ldr	r1, [pc, #156]	; (221c <printPar()+0x1fc>)
    2180:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2184:	mov	r0, r4
    2186:	ldr	r1, [pc, #152]	; (2220 <printPar()+0x200>)
}
    2188:	ldmia.w	sp!, {r4, lr}
      Serial.print("n     (n) = "); Serial.println((char *)n_string); 
    218c:	b.w	1f9c <Print::println(char const*) [clone .isra.0]>
    2190:	.word	0x20001c8c
    2194:	.word	0x20000ee1
    2198:	.word	0x20006e08
    219c:	.word	0x20000eee
    21a0:	.word	0x20002230
    21a4:	.word	0x20000efb
    21a8:	.word	0x20021cc0
    21ac:	.word	0x20000f08
    21b0:	.word	0x20021c1c
    21b4:	.word	0x20000f15
    21b8:	.word	0x20021c0e
    21bc:	.word	0x20000f22
    21c0:	.word	0x2000224e
    21c4:	.word	0x20000f2f
    21c8:	.word	0x20002250
    21cc:	.word	0x20000f3c
    21d0:	.word	0x20021cc2
    21d4:	.word	0x20000f49
    21d8:	.word	0x20021c18
    21dc:	.word	0x20000f56
    21e0:	.word	0x20002248
    21e4:	.word	0x20000f63
    21e8:	.word	0x2000224a
    21ec:	.word	0x20000f70
    21f0:	.word	0x2000224c
    21f4:	.word	0x20000f7d
    21f8:	.word	0x20002246
    21fc:	.word	0x20000f8a
    2200:	.word	0x20021c12
    2204:	.word	0x20000f97
    2208:	.word	0x20021c10
    220c:	.word	0x20000fa4
    2210:	.word	0x2002220c
    2214:	.word	0x20000fb1
    2218:	.word	0x2002223f
    221c:	.word	0x20000fbe
    2220:	.word	0x20022267

00002224 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    2224:	push	{r4, lr}
    2226:	sub	sp, #32
    2228:	bl	adc4 <usb_serial_available>

    while(!Serial.available()) ;
    222c:	cmp	r0, #0
    222e:	beq.n	2228 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2230:	bl	ae38 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    2234:	uxtb	r0, r0
    if(ch=='d') // set date
    2236:	cmp	r0, #100	; 0x64
    2238:	bne.n	2266 <menu3()+0x42>
{ char *buffer=menuGetLine();
    223a:	bl	1fb0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    223e:	add	r3, sp, #28
    2240:	add	r2, sp, #20
    2242:	ldr	r1, [pc, #364]	; (23b0 <menu3()+0x18c>)
    2244:	str	r3, [sp, #8]
    2246:	add.w	r3, sp, #19
    224a:	str	r3, [sp, #4]
    224c:	add	r3, sp, #24
    224e:	str	r3, [sp, #0]
    2250:	add.w	r3, sp, #18
    2254:	bl	f034 <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);
      rtcSetDate(year,month,day);
    2258:	ldr	r0, [sp, #20]
    225a:	ldrd	r1, r2, [sp, #24]
    225e:	bl	4290 <rtcSetDate(int, int, int)>
    else if(ch=='6') { menuGetInt16((int16_t *)&d_rep); }
    else if(ch=='0') { menuGetInt16((int16_t *)&d_0); }
    else if(ch=='b') { menuGetString((char *)&b_string[0]);}
    else if(ch=='k') { menuGetString((char *)&k_string[0]);}
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
}
    2262:	add	sp, #32
    2264:	pop	{r4, pc}
    else if(ch=='t') // set time
    2266:	cmp	r0, #54	; 0x36
    2268:	bhi.n	2280 <menu3()+0x5c>
    226a:	cmp	r0, #47	; 0x2f
    226c:	bls.n	2262 <menu3()+0x3e>
    226e:	subs	r0, #49	; 0x31
    2270:	cmp	r0, #5
    2272:	bhi.w	2396 <menu3()+0x172>
    2276:	tbb	[pc, r0]
    227a:	.short	0x8482
    227c:	.word	0x8c8a8886
    2280:	subs	r0, #97	; 0x61
    2282:	uxtb	r3, r0
    2284:	cmp	r3, #22
    2286:	bhi.n	2262 <menu3()+0x3e>
    2288:	cmp	r0, #22
    228a:	bhi.n	2262 <menu3()+0x3e>
    228c:	add	r3, pc, #4	; (adr r3, 2294 <menu3()+0x70>)
    228e:	ldr.w	pc, [r3, r0, lsl #2]
    2292:	nop
    2294:	.word	0x0000231b
    2298:	.word	0x0000239b
    229c:	.word	0x00002361
    22a0:	.word	0x00002263
    22a4:	.word	0x00002263
    22a8:	.word	0x0000232f
    22ac:	.word	0x00002365
    22b0:	.word	0x00002263
    22b4:	.word	0x00002263
    22b8:	.word	0x00002263
    22bc:	.word	0x000023a7
    22c0:	.word	0x00002263
    22c4:	.word	0x00002263
    22c8:	.word	0x000023ab
    22cc:	.word	0x00002327
    22d0:	.word	0x00002263
    22d4:	.word	0x00002263
    22d8:	.word	0x0000232b
    22dc:	.word	0x0000234d
    22e0:	.word	0x000022f1
    22e4:	.word	0x00002263
    22e8:	.word	0x00002263
    22ec:	.word	0x0000237b
{ char *buffer=menuGetLine();
    22f0:	bl	1fb0 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    22f4:	add	r3, sp, #28
    22f6:	add	r2, sp, #20
    22f8:	ldr	r1, [pc, #180]	; (23b0 <menu3()+0x18c>)
    22fa:	str	r3, [sp, #8]
    22fc:	add.w	r3, sp, #19
    2300:	str	r3, [sp, #4]
    2302:	add	r3, sp, #24
    2304:	str	r3, [sp, #0]
    2306:	add.w	r3, sp, #18
    230a:	bl	f034 <siscanf>
      rtcSetTime(hour,minutes,seconds);
    230e:	ldr	r0, [sp, #20]
    2310:	ldrd	r1, r2, [sp, #24]
    2314:	bl	42b4 <rtcSetTime(int, int, int)>
    2318:	b.n	2262 <menu3()+0x3e>
    else if(ch=='a') { menuGetInt16((int16_t *)&t_acq); }
    231a:	ldr	r0, [pc, #152]	; (23b4 <menu3()+0x190>)
}
    231c:	add	sp, #32
    231e:	ldmia.w	sp!, {r4, lr}
    else if(ch=='o') { menuGetInt16((int16_t *)&t_on); }
    2322:	b.w	2004 <menuGetInt16(short*) [clone .isra.0]>
    2326:	ldr	r0, [pc, #144]	; (23b8 <menu3()+0x194>)
    2328:	b.n	231c <menu3()+0xf8>
    else if(ch=='r') { menuGetInt16((int16_t *)&t_rep); }
    232a:	ldr	r0, [pc, #144]	; (23bc <menu3()+0x198>)
    232c:	b.n	231c <menu3()+0xf8>
{ char *buffer=menuGetLine();
    232e:	bl	1fb0 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    2332:	add	r2, sp, #28
    2334:	ldr	r1, [pc, #136]	; (23c0 <menu3()+0x19c>)
    2336:	bl	f034 <siscanf>
    233a:	ldr	r3, [pc, #136]	; (23c4 <menu3()+0x1a0>)
    233c:	ldr	r2, [sp, #28]
    233e:	str	r2, [r3, #0]
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    2340:	ldr	r0, [r3, #0]
}
    2342:	add	sp, #32
    2344:	ldmia.w	sp!, {r4, lr}
    else if(ch=='f') { menuGetInt32((int32_t *)&fsamp); acqModifyFrequency(fsamp); }
    2348:	b.w	d08 <acqModifyFrequency(unsigned long)>
    else if(ch=='s') { menuGetInt16((int16_t *)&shift); if(shift<0) shift=0; }
    234c:	ldr	r4, [pc, #120]	; (23c8 <menu3()+0x1a4>)
    234e:	mov	r0, r4
    2350:	bl	2004 <menuGetInt16(short*) [clone .isra.0]>
    2354:	ldrh	r3, [r4, #0]
    2356:	lsls	r3, r3, #16
    2358:	bpl.n	2262 <menu3()+0x3e>
    235a:	movs	r3, #0
    235c:	strh	r3, [r4, #0]
    235e:	b.n	2262 <menu3()+0x3e>
    else if(ch=='c') { menuGetInt16((int16_t *)&proc); }
    2360:	ldr	r0, [pc, #104]	; (23cc <menu3()+0x1a8>)
    2362:	b.n	231c <menu3()+0xf8>
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    2364:	ldr	r4, [pc, #104]	; (23d0 <menu3()+0x1ac>)
    2366:	mov	r0, r4
    2368:	bl	2004 <menuGetInt16(short*) [clone .isra.0]>
    236c:	ldrh	r0, [r4, #0]
    236e:	sxtb	r0, r0
}
    2370:	add	sp, #32
    2372:	ldmia.w	sp!, {r4, lr}
    else if(ch=='g') { menuGetInt16((int16_t *)&again); setAGain(again); }
    2376:	b.w	3f34 <setAGain(signed char)>
    else if(ch=='w') { menuGetInt16((int16_t *)&store[0]); }
    237a:	ldr	r0, [pc, #88]	; (23d4 <menu3()+0x1b0>)
    237c:	b.n	231c <menu3()+0xf8>
    else if(ch=='1') { menuGetInt16((int16_t *)&h_1); }
    237e:	ldr	r0, [pc, #88]	; (23d8 <menu3()+0x1b4>)
    2380:	b.n	231c <menu3()+0xf8>
    else if(ch=='2') { menuGetInt16((int16_t *)&h_2); }
    2382:	ldr	r0, [pc, #88]	; (23dc <menu3()+0x1b8>)
    2384:	b.n	231c <menu3()+0xf8>
    else if(ch=='3') { menuGetInt16((int16_t *)&h_3); }
    2386:	ldr	r0, [pc, #88]	; (23e0 <menu3()+0x1bc>)
    2388:	b.n	231c <menu3()+0xf8>
    else if(ch=='4') { menuGetInt16((int16_t *)&h_4); }
    238a:	ldr	r0, [pc, #88]	; (23e4 <menu3()+0x1c0>)
    238c:	b.n	231c <menu3()+0xf8>
    else if(ch=='5') { menuGetInt16((int16_t *)&d_on); }
    238e:	ldr	r0, [pc, #88]	; (23e8 <menu3()+0x1c4>)
    2390:	b.n	231c <menu3()+0xf8>
    else if(ch=='6') { menuGetInt16((int16_t *)&d_rep); }
    2392:	ldr	r0, [pc, #88]	; (23ec <menu3()+0x1c8>)
    2394:	b.n	231c <menu3()+0xf8>
    else if(ch=='0') { menuGetInt16((int16_t *)&d_0); }
    2396:	ldr	r0, [pc, #88]	; (23f0 <menu3()+0x1cc>)
    2398:	b.n	231c <menu3()+0xf8>
    else if(ch=='b') { menuGetString((char *)&b_string[0]);}
    239a:	ldr	r0, [pc, #88]	; (23f4 <menu3()+0x1d0>)
}
    239c:	add	sp, #32
    239e:	ldmia.w	sp!, {r4, lr}
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
    23a2:	b.w	1fe8 <menuGetString(char*) [clone .isra.0]>
    else if(ch=='k') { menuGetString((char *)&k_string[0]);}
    23a6:	ldr	r0, [pc, #80]	; (23f8 <menu3()+0x1d4>)
    23a8:	b.n	239c <menu3()+0x178>
    else if(ch=='n') { menuGetString((char *)&n_string[0]);}
    23aa:	ldr	r0, [pc, #80]	; (23fc <menu3()+0x1d8>)
    23ac:	b.n	239c <menu3()+0x178>
    23ae:	nop
    23b0:	.word	0x20000e94
    23b4:	.word	0x2000224e
    23b8:	.word	0x20002250
    23bc:	.word	0x20021cc2
    23c0:	.word	0x200013a1
    23c4:	.word	0x20002230
    23c8:	.word	0x20021cc0
    23cc:	.word	0x20021c1c
    23d0:	.word	0x20021c0e
    23d4:	.word	0x20021bec
    23d8:	.word	0x20021c18
    23dc:	.word	0x20002248
    23e0:	.word	0x2000224a
    23e4:	.word	0x2000224c
    23e8:	.word	0x20002246
    23ec:	.word	0x20021c12
    23f0:	.word	0x20021c10
    23f4:	.word	0x2002220c
    23f8:	.word	0x2002223f
    23fc:	.word	0x20022267

00002400 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2400:	lsls	r2, r1, #1
    2402:	movs	r1, #0
    2404:	b.w	c438 <eeprom_write_block>

00002408 <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    2408:	lsls	r2, r1, #1
    240a:	movs	r1, #0
    240c:	b.w	c188 <eeprom_read_block>

00002410 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2410:	ldr	r3, [pc, #104]	; (247c <saveParameters()+0x6c>)
  store[7]  = h_2;
  store[8]  = h_3;
  store[9]  = h_4;
  store[10] = d_on;
  store[11] = d_rep;
  store[12] = fsamp/1000;
    2412:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    2416:	ldr	r0, [pc, #104]	; (2480 <saveParameters()+0x70>)
  store[13] = again;
  store[14] = dgain;
  store[15] = d_0;
  
  storeConfig(store, 16);
    2418:	movs	r1, #16
  store[1]  = t_acq;
    241a:	ldrh	r3, [r3, #0]
    241c:	strh	r3, [r0, #2]
  store[2]  = t_on;
    241e:	ldr	r3, [pc, #100]	; (2484 <saveParameters()+0x74>)
    2420:	ldrh	r3, [r3, #0]
    2422:	strh	r3, [r0, #4]
  store[3]  = t_rep;
    2424:	ldr	r3, [pc, #96]	; (2488 <saveParameters()+0x78>)
    2426:	ldrh	r3, [r3, #0]
    2428:	strh	r3, [r0, #6]
  store[4]  = proc;
    242a:	ldr	r3, [pc, #96]	; (248c <saveParameters()+0x7c>)
    242c:	ldrh	r3, [r3, #0]
    242e:	strh	r3, [r0, #8]
  store[5]  = shift;
    2430:	ldr	r3, [pc, #92]	; (2490 <saveParameters()+0x80>)
    2432:	ldrh	r3, [r3, #0]
    2434:	strh	r3, [r0, #10]
  store[6]  = h_1;
    2436:	ldr	r3, [pc, #92]	; (2494 <saveParameters()+0x84>)
    2438:	ldrh	r3, [r3, #0]
    243a:	strh	r3, [r0, #12]
  store[7]  = h_2;
    243c:	ldr	r3, [pc, #88]	; (2498 <saveParameters()+0x88>)
    243e:	ldrh	r3, [r3, #0]
    2440:	strh	r3, [r0, #14]
  store[8]  = h_3;
    2442:	ldr	r3, [pc, #88]	; (249c <saveParameters()+0x8c>)
    2444:	ldrh	r3, [r3, #0]
    2446:	strh	r3, [r0, #16]
  store[9]  = h_4;
    2448:	ldr	r3, [pc, #84]	; (24a0 <saveParameters()+0x90>)
    244a:	ldrh	r3, [r3, #0]
    244c:	strh	r3, [r0, #18]
  store[10] = d_on;
    244e:	ldr	r3, [pc, #84]	; (24a4 <saveParameters()+0x94>)
    2450:	ldrh	r3, [r3, #0]
    2452:	strh	r3, [r0, #20]
  store[11] = d_rep;
    2454:	ldr	r3, [pc, #80]	; (24a8 <saveParameters()+0x98>)
    2456:	ldrh	r3, [r3, #0]
    2458:	strh	r3, [r0, #22]
  store[12] = fsamp/1000;
    245a:	ldr	r3, [pc, #80]	; (24ac <saveParameters()+0x9c>)
    245c:	ldr	r3, [r3, #0]
    245e:	sdiv	r3, r3, r2
    2462:	strh	r3, [r0, #24]
  store[13] = again;
    2464:	ldr	r3, [pc, #72]	; (24b0 <saveParameters()+0xa0>)
    2466:	ldrh	r3, [r3, #0]
    2468:	strh	r3, [r0, #26]
  store[14] = dgain;
    246a:	ldr	r3, [pc, #72]	; (24b4 <saveParameters()+0xa4>)
    246c:	ldrh	r3, [r3, #0]
    246e:	strh	r3, [r0, #28]
  store[15] = d_0;
    2470:	ldr	r3, [pc, #68]	; (24b8 <saveParameters()+0xa8>)
    2472:	ldrh	r3, [r3, #0]
    2474:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    2476:	b.w	2400 <storeConfig(unsigned short*, int)>
    247a:	nop
    247c:	.word	0x2000224e
    2480:	.word	0x20021bec
    2484:	.word	0x20002250
    2488:	.word	0x20021cc2
    248c:	.word	0x20021c1c
    2490:	.word	0x20021cc0
    2494:	.word	0x20021c18
    2498:	.word	0x20002248
    249c:	.word	0x2000224a
    24a0:	.word	0x2000224c
    24a4:	.word	0x20002246
    24a8:	.word	0x20021c12
    24ac:	.word	0x20002230
    24b0:	.word	0x20021c0e
    24b4:	.word	0x20021c14
    24b8:	.word	0x20021c10

000024bc <menu1(short)>:
{   // have ':'
    24bc:	push	{r3, r4, r5, lr}
    24be:	mov	r5, r0
        virtual int available() { return usb_serial_available(); }
    24c0:	bl	adc4 <usb_serial_available>
    while(!Serial.available()) ;
    24c4:	cmp	r0, #0
    24c6:	beq.n	24c0 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    24c8:	bl	ae38 <usb_serial_getchar>
    ch=Serial.read();
    24cc:	uxtb	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
    24ce:	ldr	r0, [pc, #72]	; (2518 <menu1(short)+0x5c>)
    24d0:	mov	r1, r4
    24d2:	bl	1f6e <Print::print(char) [clone .isra.0]>
    24d6:	ldr	r0, [pc, #64]	; (2518 <menu1(short)+0x5c>)
    24d8:	bl	cde0 <Print::println()>
    if(ch=='w') 
    24dc:	cmp	r4, #119	; 0x77
    24de:	bne.n	24ee <menu1(short)+0x32>
    { saveParameters();
    24e0:	bl	2410 <saveParameters()>
      Serial.println("Save parameters");
    24e4:	ldr	r1, [pc, #52]	; (251c <menu1(short)+0x60>)
      Serial.print(ch); Serial.println(" not recognized");
    24e6:	ldr	r0, [pc, #48]	; (2518 <menu1(short)+0x5c>)
    24e8:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
    24ec:	b.n	24f8 <menu1(short)+0x3c>
    else if(ch=='m') // control monitor (needed for gui)
    24ee:	cmp	r4, #109	; 0x6d
    24f0:	bne.n	2502 <menu1(short)+0x46>
      menuGetInt16((int16_t *)&monitor);
    24f2:	ldr	r0, [pc, #44]	; (2520 <menu1(short)+0x64>)
    24f4:	bl	2004 <menuGetInt16(short*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    24f8:	bl	adc4 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    24fc:	cbnz	r0, 2512 <menu1(short)+0x56>
}
    24fe:	mov	r0, r5
    2500:	pop	{r3, r4, r5, pc}
    else if(ch=='c') // transfer internal rtc to external rtc
    2502:	cmp	r4, #99	; 0x63
    2504:	beq.n	24f8 <menu1(short)+0x3c>
      Serial.print(ch); Serial.println(" not recognized");
    2506:	mov	r1, r4
    2508:	ldr	r0, [pc, #12]	; (2518 <menu1(short)+0x5c>)
    250a:	bl	1f6e <Print::print(char) [clone .isra.0]>
    250e:	ldr	r1, [pc, #20]	; (2524 <menu1(short)+0x68>)
    2510:	b.n	24e6 <menu1(short)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
    2512:	bl	ae38 <usb_serial_getchar>
    2516:	b.n	24f8 <menu1(short)+0x3c>
    2518:	.word	0x20001c8c
    251c:	.word	0x20000e0b
    2520:	.word	0x20021c1a
    2524:	.word	0x20000e1b

00002528 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2528:	push	{r4, lr}
  #if defined(__IMXRT1062__)
  loadConfig(store,16);
    252a:	ldr	r4, [pc, #132]	; (25b0 <loadParameters()+0x88>)
    252c:	movs	r1, #16
    252e:	mov	r0, r4
    2530:	bl	2408 <loadConfig(unsigned short*, int)>
  Serial.println(store[0]);
    2534:	ldrh	r1, [r4, #0]
    2536:	ldr	r0, [pc, #124]	; (25b4 <loadParameters()+0x8c>)
    2538:	bl	1f5c <Print::println(int) [clone .isra.0]>
  }
  else
  #endif
  {
    store[0]  = 0;
    store[1]  = t_acq    = T_ACQ;
    253c:	movs	r2, #60	; 0x3c
    253e:	ldr	r1, [pc, #120]	; (25b8 <loadParameters()+0x90>)
  store[0]=0;
    2540:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    2542:	strh	r2, [r4, #2]
    store[13] = again    = AGAIN;
    store[14] = dgain    = DGAIN;
    store[15] = d_0      = 0; 
  }
  return store;
}
    2544:	mov	r0, r4
    store[1]  = t_acq    = T_ACQ;
    2546:	strh	r2, [r1, #0]
    store[2]  = t_on     = T_ON;
    2548:	mov.w	r2, #300	; 0x12c
    254c:	ldr	r1, [pc, #108]	; (25bc <loadParameters()+0x94>)
    254e:	strh	r2, [r4, #4]
    2550:	strh	r2, [r1, #0]
    store[3]  = t_rep    = T_REP;
    2552:	ldr	r2, [pc, #108]	; (25c0 <loadParameters()+0x98>)
    store[7]  = h_2      = H_2;
    2554:	ldr	r1, [pc, #108]	; (25c4 <loadParameters()+0x9c>)
    store[3]  = t_rep    = T_REP;
    2556:	strh	r3, [r2, #0]
    store[4]  = proc     = PROC_MODE;
    2558:	ldr	r2, [pc, #108]	; (25c8 <loadParameters()+0xa0>)
  store[0]=0;
    255a:	strh	r3, [r4, #0]
    store[4]  = proc     = PROC_MODE;
    255c:	strh	r3, [r2, #0]
    store[5]  = shift    = SHIFT;
    255e:	ldr	r2, [pc, #108]	; (25cc <loadParameters()+0xa4>)
    store[3]  = t_rep    = T_REP;
    2560:	strh	r3, [r4, #6]
    store[5]  = shift    = SHIFT;
    2562:	strh	r3, [r2, #0]
    store[6]  = h_1      = H_1;
    2564:	ldr	r2, [pc, #104]	; (25d0 <loadParameters()+0xa8>)
    store[4]  = proc     = PROC_MODE;
    2566:	strh	r3, [r4, #8]
    store[6]  = h_1      = H_1;
    2568:	strh	r3, [r2, #0]
    store[7]  = h_2      = H_2;
    256a:	movs	r2, #12
    store[5]  = shift    = SHIFT;
    256c:	strh	r3, [r4, #10]
    store[7]  = h_2      = H_2;
    256e:	strh	r2, [r1, #0]
    store[8]  = h_3      = H_3;
    2570:	ldr	r1, [pc, #96]	; (25d4 <loadParameters()+0xac>)
    store[7]  = h_2      = H_2;
    2572:	strh	r2, [r4, #14]
    store[8]  = h_3      = H_3;
    2574:	strh	r2, [r1, #0]
    2576:	strh	r2, [r4, #16]
    store[9]  = h_4      = H_4;
    2578:	movs	r2, #24
    257a:	ldr	r1, [pc, #92]	; (25d8 <loadParameters()+0xb0>)
    257c:	strh	r2, [r4, #18]
    257e:	strh	r2, [r1, #0]
    store[10] = d_on     = D_ON;
    2580:	movs	r2, #1
    2582:	ldr	r1, [pc, #88]	; (25dc <loadParameters()+0xb4>)
    2584:	strh	r2, [r4, #20]
    2586:	strh	r2, [r1, #0]
    store[11] = d_rep    = D_REP;
    2588:	ldr	r2, [pc, #84]	; (25e0 <loadParameters()+0xb8>)
    store[12] = (fsamp   = FSAMP)/1000; 
    258a:	ldr	r1, [pc, #88]	; (25e4 <loadParameters()+0xbc>)
    store[11] = d_rep    = D_REP;
    258c:	strh	r3, [r2, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    258e:	ldr	r2, [pc, #88]	; (25e8 <loadParameters()+0xc0>)
    store[6]  = h_1      = H_1;
    2590:	strh	r3, [r4, #12]
    store[12] = (fsamp   = FSAMP)/1000; 
    2592:	str	r1, [r2, #0]
    2594:	movs	r2, #96	; 0x60
    store[11] = d_rep    = D_REP;
    2596:	strh	r3, [r4, #22]
    store[12] = (fsamp   = FSAMP)/1000; 
    2598:	strh	r2, [r4, #24]
    store[13] = again    = AGAIN;
    259a:	ldr	r2, [pc, #80]	; (25ec <loadParameters()+0xc4>)
    259c:	strh	r3, [r4, #26]
    259e:	strh	r3, [r2, #0]
    store[14] = dgain    = DGAIN;
    25a0:	ldr	r2, [pc, #76]	; (25f0 <loadParameters()+0xc8>)
    25a2:	strh	r3, [r4, #28]
    25a4:	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    25a6:	ldr	r2, [pc, #76]	; (25f4 <loadParameters()+0xcc>)
    25a8:	strh	r3, [r4, #30]
    25aa:	strh	r3, [r2, #0]
}
    25ac:	pop	{r4, pc}
    25ae:	nop
    25b0:	.word	0x20021bec
    25b4:	.word	0x20001c8c
    25b8:	.word	0x2000224e
    25bc:	.word	0x20002250
    25c0:	.word	0x20021cc2
    25c4:	.word	0x20002248
    25c8:	.word	0x20021c1c
    25cc:	.word	0x20021cc0
    25d0:	.word	0x20021c18
    25d4:	.word	0x2000224a
    25d8:	.word	0x2000224c
    25dc:	.word	0x20002246
    25e0:	.word	0x20021c12
    25e4:	.word	0x00017700
    25e8:	.word	0x20002230
    25ec:	.word	0x20021c0e
    25f0:	.word	0x20021c14
    25f4:	.word	0x20021c10

000025f8 <menu2()>:
{   // have '?'
    25f8:	push	{r4, lr}
    25fa:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    25fc:	bl	adc4 <usb_serial_available>
    while(!Serial.available()) ;
    2600:	cmp	r0, #0
    2602:	beq.n	25fc <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2604:	bl	ae38 <usb_serial_getchar>
    ch=Serial.read();
    2608:	uxtb	r0, r0
    if(ch=='p') // get parameters
    260a:	cmp	r0, #112	; 0x70
    260c:	bne.n	2672 <menu2()+0x7a>
      Serial.println();
    260e:	ldr	r0, [pc, #576]	; (2850 <menu2()+0x258>)
    2610:	bl	cde0 <Print::println()>
      Serial.println(version);
    2614:	ldr	r1, [pc, #572]	; (2854 <menu2()+0x25c>)
    2616:	ldr	r0, [pc, #568]	; (2850 <menu2()+0x258>)
    2618:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    261c:	add	r0, sp, #24
    261e:	bl	426c <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    2622:	ldrsb.w	r3, [sp, #28]
    2626:	ldrsh.w	r2, [sp, #24]
    262a:	str	r3, [sp, #16]
    262c:	ldrsb.w	r3, [sp, #31]
    2630:	ldr	r1, [pc, #548]	; (2858 <menu2()+0x260>)
    2632:	str	r3, [sp, #12]
    2634:	ldrsb.w	r3, [sp, #30]
    2638:	ldr	r0, [pc, #532]	; (2850 <menu2()+0x258>)
    263a:	str	r3, [sp, #8]
    263c:	ldrsb.w	r3, [sp, #29]
    2640:	str	r3, [sp, #4]
    2642:	ldrsb.w	r3, [sp, #27]
    2646:	str	r3, [sp, #0]
    2648:	ldrsb.w	r3, [sp, #26]
    264c:	bl	ce18 <Print::printf(char const*, ...)>
      XRTCprintTime();
    2650:	bl	42d8 <XRTCprintTime()>
      Serial.println(rtcGetTimestamp());
    2654:	bl	4268 <rtcGetTimestamp()>
    2658:	mov	r1, r0
    265a:	ldr	r0, [pc, #500]	; (2850 <menu2()+0x258>)
    265c:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
      printPar();
    2660:	bl	2020 <printPar()>
        virtual int available() { return usb_serial_available(); }
    2664:	bl	adc4 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2668:	cmp	r0, #0
    266a:	bne.w	284a <menu2()+0x252>
}
    266e:	add	sp, #32
    2670:	pop	{r4, pc}
    else if(ch=='d') // get date
    2672:	cmp	r0, #54	; 0x36
    2674:	bhi.n	268c <menu2()+0x94>
    2676:	cmp	r0, #47	; 0x2f
    2678:	bls.n	2664 <menu2()+0x6c>
    267a:	subs	r0, #49	; 0x31
    267c:	cmp	r0, #5
    267e:	bhi.w	2802 <menu2()+0x20a>
    2682:	tbb	[pc, r0]
    2686:	.short	0xa09a
    2688:	.word	0xb8b2aca6
    268c:	subs	r0, #97	; 0x61
    268e:	uxtb	r3, r0
    2690:	cmp	r3, #22
    2692:	bhi.n	2664 <menu2()+0x6c>
    2694:	cmp	r0, #22
    2696:	bhi.n	2664 <menu2()+0x6c>
    2698:	add	r3, pc, #4	; (adr r3, 26a0 <menu2()+0xa8>)
    269a:	ldr.w	pc, [r3, r0, lsl #2]
    269e:	nop
    26a0:	.word	0x00002751
    26a4:	.word	0x00002821
    26a8:	.word	0x000027a3
    26ac:	.word	0x000026fd
    26b0:	.word	0x00002665
    26b4:	.word	0x0000277f
    26b8:	.word	0x000027af
    26bc:	.word	0x00002733
    26c0:	.word	0x00002665
    26c4:	.word	0x00002665
    26c8:	.word	0x00002833
    26cc:	.word	0x00002665
    26d0:	.word	0x00002665
    26d4:	.word	0x0000283f
    26d8:	.word	0x00002767
    26dc:	.word	0x00002665
    26e0:	.word	0x00002665
    26e4:	.word	0x00002773
    26e8:	.word	0x00002793
    26ec:	.word	0x0000271b
    26f0:	.word	0x00002665
    26f4:	.word	0x00002665
    26f8:	.word	0x0000280f
      rtc_get_datetime(&t);
    26fc:	add	r0, sp, #24
    26fe:	bl	426c <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    2702:	ldrsb.w	r3, [sp, #27]
    2706:	ldrsh.w	r2, [sp, #24]
    270a:	str	r3, [sp, #0]
    270c:	ldr	r1, [pc, #332]	; (285c <menu2()+0x264>)
    270e:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    2712:	ldr	r0, [pc, #316]	; (2850 <menu2()+0x258>)
    2714:	bl	ce18 <Print::printf(char const*, ...)>
    2718:	b.n	2664 <menu2()+0x6c>
      rtc_get_datetime(&t);
    271a:	add	r0, sp, #24
    271c:	bl	426c <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec); 
    2720:	ldrsb.w	r3, [sp, #31]
    2724:	ldrsb.w	r2, [sp, #29]
    2728:	str	r3, [sp, #0]
    272a:	ldr	r1, [pc, #308]	; (2860 <menu2()+0x268>)
    272c:	ldrsb.w	r3, [sp, #30]
    2730:	b.n	2712 <menu2()+0x11a>
    else if(ch=='h') { Serial.print("SerNum(h) = "); Serial.println(SerNum,HEX); }
    2732:	ldr	r1, [pc, #304]	; (2864 <menu2()+0x26c>)
    2734:	ldr	r0, [pc, #280]	; (2850 <menu2()+0x258>)
    2736:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    273a:	ldr	r1, [pc, #300]	; (2868 <menu2()+0x270>)
    273c:	movs	r3, #0
    273e:	movs	r2, #16
    2740:	ldr	r1, [r1, #0]
    2742:	ldr	r0, [pc, #268]	; (2850 <menu2()+0x258>)
    2744:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
    2748:	ldr	r0, [pc, #260]	; (2850 <menu2()+0x258>)
    274a:	bl	cde0 <Print::println()>
    274e:	b.n	2664 <menu2()+0x6c>
    else if(ch=='a') { Serial.print("t_acq (a) = "); Serial.println(t_acq); }
    2750:	ldr	r1, [pc, #280]	; (286c <menu2()+0x274>)
    2752:	ldr	r0, [pc, #252]	; (2850 <menu2()+0x258>)
    2754:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2758:	ldr	r3, [pc, #276]	; (2870 <menu2()+0x278>)
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    275a:	ldrh	r1, [r3, #0]
    275c:	uxth	r1, r1
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    275e:	ldr	r0, [pc, #240]	; (2850 <menu2()+0x258>)
    2760:	bl	1f5c <Print::println(int) [clone .isra.0]>
    2764:	b.n	2664 <menu2()+0x6c>
    else if(ch=='o') { Serial.print("t_on  (o) = "); Serial.println(t_on); }
    2766:	ldr	r1, [pc, #268]	; (2874 <menu2()+0x27c>)
    2768:	ldr	r0, [pc, #228]	; (2850 <menu2()+0x258>)
    276a:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    276e:	ldr	r3, [pc, #264]	; (2878 <menu2()+0x280>)
    2770:	b.n	275a <menu2()+0x162>
    else if(ch=='r') { Serial.print("t_rep (r) = "); Serial.println(t_rep); }
    2772:	ldr	r1, [pc, #264]	; (287c <menu2()+0x284>)
    2774:	ldr	r0, [pc, #216]	; (2850 <menu2()+0x258>)
    2776:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    277a:	ldr	r3, [pc, #260]	; (2880 <menu2()+0x288>)
    277c:	b.n	275a <menu2()+0x162>
    else if(ch=='f') { Serial.print("fsamp (f) = "); Serial.println(fsamp); }
    277e:	ldr	r1, [pc, #260]	; (2884 <menu2()+0x28c>)
    2780:	ldr	r0, [pc, #204]	; (2850 <menu2()+0x258>)
    2782:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2786:	ldr	r3, [pc, #256]	; (2888 <menu2()+0x290>)
    2788:	ldr	r0, [pc, #196]	; (2850 <menu2()+0x258>)
    278a:	ldr	r1, [r3, #0]
    278c:	bl	cdce <Print::print(long)>
    2790:	b.n	2748 <menu2()+0x150>
    else if(ch=='s') { Serial.print("shift (s) = "); Serial.println(shift); }
    2792:	ldr	r1, [pc, #248]	; (288c <menu2()+0x294>)
    2794:	ldr	r0, [pc, #184]	; (2850 <menu2()+0x258>)
    2796:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    279a:	ldr	r3, [pc, #244]	; (2890 <menu2()+0x298>)
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    279c:	ldrh	r1, [r3, #0]
    279e:	sxth	r1, r1
    27a0:	b.n	275e <menu2()+0x166>
    else if(ch=='c') { Serial.print("proc  (c) = "); Serial.println(proc); }
    27a2:	ldr	r1, [pc, #240]	; (2894 <menu2()+0x29c>)
    27a4:	ldr	r0, [pc, #168]	; (2850 <menu2()+0x258>)
    27a6:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27aa:	ldr	r3, [pc, #236]	; (2898 <menu2()+0x2a0>)
    27ac:	b.n	279c <menu2()+0x1a4>
    else if(ch=='g') { Serial.print("again (g) = "); Serial.println(again); }
    27ae:	ldr	r1, [pc, #236]	; (289c <menu2()+0x2a4>)
    27b0:	ldr	r0, [pc, #156]	; (2850 <menu2()+0x258>)
    27b2:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27b6:	ldr	r3, [pc, #232]	; (28a0 <menu2()+0x2a8>)
    27b8:	b.n	279c <menu2()+0x1a4>
    else if(ch=='1') { Serial.print("h_1   (1) = "); Serial.println(h_1); }
    27ba:	ldr	r1, [pc, #232]	; (28a4 <menu2()+0x2ac>)
    27bc:	ldr	r0, [pc, #144]	; (2850 <menu2()+0x258>)
    27be:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27c2:	ldr	r3, [pc, #228]	; (28a8 <menu2()+0x2b0>)
    27c4:	b.n	275a <menu2()+0x162>
    else if(ch=='2') { Serial.print("h_2   (2) = "); Serial.println(h_2); }
    27c6:	ldr	r1, [pc, #228]	; (28ac <menu2()+0x2b4>)
    27c8:	ldr	r0, [pc, #132]	; (2850 <menu2()+0x258>)
    27ca:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27ce:	ldr	r3, [pc, #224]	; (28b0 <menu2()+0x2b8>)
    27d0:	b.n	275a <menu2()+0x162>
    else if(ch=='3') { Serial.print("h_3   (3) = "); Serial.println(h_3); }
    27d2:	ldr	r1, [pc, #224]	; (28b4 <menu2()+0x2bc>)
    27d4:	ldr	r0, [pc, #120]	; (2850 <menu2()+0x258>)
    27d6:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27da:	ldr	r3, [pc, #220]	; (28b8 <menu2()+0x2c0>)
    27dc:	b.n	275a <menu2()+0x162>
    else if(ch=='4') { Serial.print("h_4   (4) = "); Serial.println(h_4); }
    27de:	ldr	r1, [pc, #220]	; (28bc <menu2()+0x2c4>)
    27e0:	ldr	r0, [pc, #108]	; (2850 <menu2()+0x258>)
    27e2:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27e6:	ldr	r3, [pc, #216]	; (28c0 <menu2()+0x2c8>)
    27e8:	b.n	275a <menu2()+0x162>
    else if(ch=='5') { Serial.print("d_on  (5) = "); Serial.println(d_on); }
    27ea:	ldr	r1, [pc, #216]	; (28c4 <menu2()+0x2cc>)
    27ec:	ldr	r0, [pc, #96]	; (2850 <menu2()+0x258>)
    27ee:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27f2:	ldr	r3, [pc, #212]	; (28c8 <menu2()+0x2d0>)
    27f4:	b.n	275a <menu2()+0x162>
    else if(ch=='6') { Serial.print("d_rep (6) = "); Serial.println(d_rep); }
    27f6:	ldr	r1, [pc, #212]	; (28cc <menu2()+0x2d4>)
    27f8:	ldr	r0, [pc, #84]	; (2850 <menu2()+0x258>)
    27fa:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    27fe:	ldr	r3, [pc, #208]	; (28d0 <menu2()+0x2d8>)
    2800:	b.n	275a <menu2()+0x162>
    else if(ch=='0') { Serial.print("d_0   (0) = "); Serial.println(d_0); }
    2802:	ldr	r1, [pc, #208]	; (28d4 <menu2()+0x2dc>)
    2804:	ldr	r0, [pc, #72]	; (2850 <menu2()+0x258>)
    2806:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    280a:	ldr	r3, [pc, #204]	; (28d8 <menu2()+0x2e0>)
    280c:	b.n	279c <menu2()+0x1a4>
    else if(ch=='w') { uint16_t *params=loadParameters(); Serial.print("params[0]  = "); Serial.println(params[0]); }
    280e:	bl	2528 <loadParameters()>
    2812:	mov	r4, r0
    2814:	ldr	r1, [pc, #196]	; (28dc <menu2()+0x2e4>)
    2816:	ldr	r0, [pc, #56]	; (2850 <menu2()+0x258>)
    2818:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    281c:	ldrh	r1, [r4, #0]
    281e:	b.n	275e <menu2()+0x166>
    else if(ch=='b') { Serial.print("b     (b) = "); Serial.println((char *)b_string); }
    2820:	ldr	r1, [pc, #188]	; (28e0 <menu2()+0x2e8>)
    2822:	ldr	r0, [pc, #44]	; (2850 <menu2()+0x258>)
    2824:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2828:	ldr	r1, [pc, #184]	; (28e4 <menu2()+0x2ec>)
    else if(ch=='n') { Serial.print("n     (n) = "); Serial.println((char *)n_string); }
    282a:	ldr	r0, [pc, #36]	; (2850 <menu2()+0x258>)
    282c:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
    2830:	b.n	2664 <menu2()+0x6c>
    else if(ch=='k') { Serial.print("k     (k) = "); Serial.println((char *)k_string); }
    2832:	ldr	r1, [pc, #180]	; (28e8 <menu2()+0x2f0>)
    2834:	ldr	r0, [pc, #24]	; (2850 <menu2()+0x258>)
    2836:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    283a:	ldr	r1, [pc, #176]	; (28ec <menu2()+0x2f4>)
    283c:	b.n	282a <menu2()+0x232>
    else if(ch=='n') { Serial.print("n     (n) = "); Serial.println((char *)n_string); }
    283e:	ldr	r1, [pc, #176]	; (28f0 <menu2()+0x2f8>)
    2840:	ldr	r0, [pc, #12]	; (2850 <menu2()+0x258>)
    2842:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    2846:	ldr	r1, [pc, #172]	; (28f4 <menu2()+0x2fc>)
    2848:	b.n	282a <menu2()+0x232>
        virtual int read() { return usb_serial_getchar(); }
    284a:	bl	ae38 <usb_serial_getchar>
    284e:	b.n	2664 <menu2()+0x6c>
    2850:	.word	0x20001c8c
    2854:	.word	0x20001013
    2858:	.word	0x20000e2b
    285c:	.word	0x20000e51
    2860:	.word	0x20000e6b
    2864:	.word	0x20000ee1
    2868:	.word	0x20006e08
    286c:	.word	0x20000f22
    2870:	.word	0x2000224e
    2874:	.word	0x20000f2f
    2878:	.word	0x20002250
    287c:	.word	0x20000f3c
    2880:	.word	0x20021cc2
    2884:	.word	0x20000eee
    2888:	.word	0x20002230
    288c:	.word	0x20000efb
    2890:	.word	0x20021cc0
    2894:	.word	0x20000f08
    2898:	.word	0x20021c1c
    289c:	.word	0x20000f15
    28a0:	.word	0x20021c0e
    28a4:	.word	0x20000f49
    28a8:	.word	0x20021c18
    28ac:	.word	0x20000f56
    28b0:	.word	0x20002248
    28b4:	.word	0x20000f63
    28b8:	.word	0x2000224a
    28bc:	.word	0x20000f70
    28c0:	.word	0x2000224c
    28c4:	.word	0x20000f7d
    28c8:	.word	0x20002246
    28cc:	.word	0x20000f8a
    28d0:	.word	0x20021c12
    28d4:	.word	0x20000f97
    28d8:	.word	0x20021c10
    28dc:	.word	0x20000e86
    28e0:	.word	0x20000fa4
    28e4:	.word	0x2002220c
    28e8:	.word	0x20000fb1
    28ec:	.word	0x2002223f
    28f0:	.word	0x20000fbe
    28f4:	.word	0x20022267

000028f8 <menu(short)>:
{
    28f8:	push	{r3, r4, r5, lr}
    28fa:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    28fc:	bl	adc4 <usb_serial_available>
  if(Serial.available())
    2900:	cmp	r0, #0
    2902:	beq.w	2a08 <menu(short)+0x110>
        virtual int read() { return usb_serial_getchar(); }
    2906:	bl	ae38 <usb_serial_getchar>
    char ch=Serial.read();
    290a:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adc_init(); adcStatus(); status=CLOSED;}
    290c:	cmp	r1, #115	; 0x73
    290e:	bne.n	2926 <menu(short)+0x2e>
    2910:	movs	r4, #0
    2912:	ldr	r1, [pc, #248]	; (2a0c <menu(short)+0x114>)
    2914:	ldr	r0, [pc, #248]	; (2a10 <menu(short)+0x118>)
    2916:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    291a:	bl	3d74 <adc_init()>
    291e:	bl	3f70 <adcStatus()>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2922:	ldr	r5, [pc, #236]	; (2a10 <menu(short)+0x118>)
    2924:	b.n	2a00 <menu(short)+0x108>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2926:	cmp	r1, #101	; 0x65
    2928:	beq.n	2998 <menu(short)+0xa0>
    292a:	bhi.n	2954 <menu(short)+0x5c>
    292c:	cmp	r1, #63	; 0x3f
    292e:	beq.n	29e8 <menu(short)+0xf0>
    2930:	bhi.n	294a <menu(short)+0x52>
    2932:	cmp	r1, #33	; 0x21
    2934:	beq.n	29ee <menu(short)+0xf6>
    2936:	cmp	r1, #58	; 0x3a
    2938:	beq.n	29de <menu(short)+0xe6>
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    293a:	ldr	r0, [pc, #212]	; (2a10 <menu(short)+0x118>)
    293c:	bl	1f6e <Print::print(char) [clone .isra.0]>
    2940:	ldr	r1, [pc, #208]	; (2a14 <menu(short)+0x11c>)
    2942:	ldr	r0, [pc, #204]	; (2a10 <menu(short)+0x118>)
    2944:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
    2948:	b.n	2922 <menu(short)+0x2a>
    294a:	cmp	r1, #98	; 0x62
    294c:	bne.n	293a <menu(short)+0x42>
    else if(ch=='b') {reboot();}
    294e:	bl	244 <reboot()>
    2952:	b.n	2922 <menu(short)+0x2a>
    2954:	sub.w	r3, r1, #109	; 0x6d
    2958:	uxtb	r2, r3
    295a:	cmp	r2, #11
    295c:	bhi.n	293a <menu(short)+0x42>
    295e:	cmp	r3, #11
    2960:	bhi.n	293a <menu(short)+0x42>
    2962:	add	r2, pc, #4	; (adr r2, 2968 <menu(short)+0x70>)
    2964:	ldr.w	pc, [r2, r3, lsl #2]
    2968:	.word	0x000029a5
    296c:	.word	0x0000293b
    2970:	.word	0x0000293b
    2974:	.word	0x0000293b
    2978:	.word	0x0000293b
    297c:	.word	0x000029c3
    2980:	.word	0x0000293b
    2984:	.word	0x000029cf
    2988:	.word	0x0000293b
    298c:	.word	0x0000293b
    2990:	.word	0x0000293b
    2994:	.word	0x000029c9
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    2998:	ldr	r1, [pc, #124]	; (2a18 <menu(short)+0x120>)
    299a:	movs	r4, #5
    299c:	ldr	r0, [pc, #112]	; (2a10 <menu(short)+0x118>)
    299e:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
    29a2:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    29a4:	ldr	r5, [pc, #116]	; (2a1c <menu(short)+0x124>)
    29a6:	ldr	r1, [pc, #120]	; (2a20 <menu(short)+0x128>)
    29a8:	ldrh	r3, [r5, #0]
    29aa:	ldr	r0, [pc, #100]	; (2a10 <menu(short)+0x118>)
    29ac:	rsb	r3, r3, #1
    29b0:	strh	r3, [r5, #0]
    29b2:	bl	1f98 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    29b6:	ldrsh.w	r1, [r5]
    29ba:	ldr	r0, [pc, #84]	; (2a10 <menu(short)+0x118>)
    29bc:	bl	cdce <Print::print(long)>
    29c0:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='r') {resetUSB();}
    29c2:	bl	224 <resetUSB()>
    29c6:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='x') {powerDown();}
    29c8:	bl	2d3c <powerDown()>
    29cc:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='t') {hibernate_init(); hibernate_now(rtc_get()+30);}
    29ce:	bl	2d50 <hibernate_init()>
    29d2:	bl	c020 <rtc_get>
    29d6:	adds	r0, #30
    29d8:	bl	2d8c <hibernate_now(unsigned long)>
    29dc:	b.n	2922 <menu(short)+0x2a>
    else if(ch==':') status=menu1(status); 
    29de:	mov	r0, r4
    29e0:	bl	24bc <menu1(short)>
    29e4:	mov	r4, r0
    29e6:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='?') menu2(); 
    29e8:	bl	25f8 <menu2()>
    29ec:	b.n	2922 <menu(short)+0x2a>
    else if(ch=='!') menu3(); 
    29ee:	bl	2224 <menu3()>
    29f2:	b.n	2922 <menu(short)+0x2a>
    29f4:	bl	ae38 <usb_serial_getchar>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    29f8:	uxtb	r1, r0
    29fa:	mov	r0, r5
    29fc:	bl	1f6e <Print::print(char) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    2a00:	bl	adc4 <usb_serial_available>
    2a04:	cmp	r0, #0
    2a06:	bne.n	29f4 <menu(short)+0xfc>
}
    2a08:	mov	r0, r4
    2a0a:	pop	{r3, r4, r5, pc}
    2a0c:	.word	0x20000db0
    2a10:	.word	0x20001c8c
    2a14:	.word	0x20000dca
    2a18:	.word	0x20000db8
    2a1c:	.word	0x20021c1a
    2a20:	.word	0x20000dbf

00002a24 <getStore()>:

uint16_t *getStore(void) {return store;}
    2a24:	ldr	r0, [pc, #0]	; (2a28 <getStore()+0x4>)
    2a26:	bx	lr
    2a28:	.word	0x20021bec

00002a2c <configGetInt16(char*)>:
 * k = cinqueTerre; cruise
 * n = boa1; sensor
 */

int16_t configGetInt16(char *txt)
{ while(*txt++ !='=') continue;
    2a2c:	push	{r0, r1, r2, lr}
    2a2e:	ldrb.w	r3, [r0], #1
    2a32:	cmp	r3, #61	; 0x3d
    2a34:	bne.n	2a2e <configGetInt16(char*)+0x2>
  int16_t val;
  sscanf(txt,"%hd",&val);
    2a36:	add.w	r2, sp, #6
    2a3a:	ldr	r1, [pc, #16]	; (2a4c <configGetInt16(char*)+0x20>)
    2a3c:	bl	f034 <siscanf>
  return val;
}
    2a40:	ldrsh.w	r0, [sp, #6]
    2a44:	add	sp, #12
    2a46:	ldr.w	pc, [sp], #4
    2a4a:	nop
    2a4c:	.word	0x20000ce4

00002a50 <configGetInt32(char*)>:

int32_t configGetInt32(char *txt)
{ while(*txt++ !='=') continue;
    2a50:	push	{r0, r1, r2, lr}
    2a52:	ldrb.w	r3, [r0], #1
    2a56:	cmp	r3, #61	; 0x3d
    2a58:	bne.n	2a52 <configGetInt32(char*)+0x2>
  int32_t val;
  sscanf(txt,"%ld",&val);
    2a5a:	add	r2, sp, #4
    2a5c:	ldr	r1, [pc, #12]	; (2a6c <configGetInt32(char*)+0x1c>)
    2a5e:	bl	f034 <siscanf>
  return val;
}
    2a62:	ldr	r0, [sp, #4]
    2a64:	add	sp, #12
    2a66:	ldr.w	pc, [sp], #4
    2a6a:	nop
    2a6c:	.word	0x20001356

00002a70 <configGetString(char*, char*)>:

void configGetString(char *txt, char *str)
{ while(*txt++ !='=') continue;
    2a70:	ldrb.w	r3, [r0], #1
    2a74:	cmp	r3, #61	; 0x3d
    2a76:	bne.n	2a70 <configGetString(char*, char*)>
    2a78:	mov	r3, r0
  while(*txt == ' ') txt++;
    2a7a:	adds	r0, #1
    2a7c:	ldrb	r2, [r3, #0]
    2a7e:	cmp	r2, #32
    2a80:	beq.n	2a78 <configGetString(char*, char*)+0x8>
    2a82:	subs	r3, #1
  while (*txt !=';') *str++=*txt++;
    2a84:	ldrb.w	r2, [r3, #1]!
    2a88:	cmp	r2, #59	; 0x3b
    2a8a:	bne.n	2a92 <configGetString(char*, char*)+0x22>
  *str='\0';
    2a8c:	movs	r3, #0
    2a8e:	strb	r3, [r1, #0]
}
    2a90:	bx	lr
  while (*txt !=';') *str++=*txt++;
    2a92:	strb.w	r2, [r1], #1
    2a96:	b.n	2a84 <configGetString(char*, char*)+0x14>

00002a98 <skipEOL(char*)>:

char *skipEOL(char *ptr){ while(*ptr++>=' ') continue; return ptr; }
    2a98:	ldrb.w	r3, [r0], #1
    2a9c:	cmp	r3, #31
    2a9e:	bhi.n	2a98 <skipEOL(char*)>
    2aa0:	bx	lr
	...

00002aa4 <decodeConfigfromFile(char*)>:

void decodeConfigfromFile(char *configText)
{
    2aa4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(configText)
    2aa8:	mov	r4, r0
    2aaa:	cmp	r0, #0
    2aac:	beq.w	2cec <decodeConfigfromFile(char*)+0x248>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2ab0:	ldr	r6, [pc, #572]	; (2cf0 <decodeConfigfromFile(char*)+0x24c>)
    char *eptr=cptr+strlen(configText);
    2ab2:	bl	f490 <strlen>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
    2ab6:	ldr	r7, [pc, #572]	; (2cf4 <decodeConfigfromFile(char*)+0x250>)
    char *eptr=cptr+strlen(configText);
    2ab8:	adds	r5, r4, r0
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
    2aba:	ldr.w	r8, [pc, #632]	; 2d34 <decodeConfigfromFile(char*)+0x290>
    Serial.println(configText);
    2abe:	mov	r1, r4
    2ac0:	ldr	r0, [pc, #564]	; (2cf8 <decodeConfigfromFile(char*)+0x254>)
    2ac2:	bl	1f9c <Print::println(char const*) [clone .isra.0]>
    while(cptr<eptr)
    2ac6:	cmp	r4, r5
    2ac8:	bcc.n	2ad2 <decodeConfigfromFile(char*)+0x2e>
    }
    printPar();
  }
}
    2aca:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printPar();
    2ace:	b.w	2020 <printPar()>
      char ch=*cptr++;
    2ad2:	ldrb.w	r3, [r4], #1
      if(ch<=' ') continue;
    2ad6:	cmp	r3, #32
    2ad8:	bls.n	2ac6 <decodeConfigfromFile(char*)+0x22>
      else if(ch==';') cptr=skipEOL(cptr);
    2ada:	cmp	r3, #59	; 0x3b
    2adc:	bhi.n	2b20 <decodeConfigfromFile(char*)+0x7c>
    2ade:	cmp	r3, #47	; 0x2f
    2ae0:	bls.n	2ac6 <decodeConfigfromFile(char*)+0x22>
    2ae2:	subs	r3, #48	; 0x30
    2ae4:	cmp	r3, #11
    2ae6:	bhi.n	2ac6 <decodeConfigfromFile(char*)+0x22>
    2ae8:	add	r2, pc, #4	; (adr r2, 2af0 <decodeConfigfromFile(char*)+0x4c>)
    2aea:	ldr.w	pc, [r2, r3, lsl #2]
    2aee:	nop
    2af0:	.word	0x00002ccb
    2af4:	.word	0x00002c0f
    2af8:	.word	0x00002c21
    2afc:	.word	0x00002c33
    2b00:	.word	0x00002c45
    2b04:	.word	0x00002c57
    2b08:	.word	0x00002c69
    2b0c:	.word	0x00002ac7
    2b10:	.word	0x00002ac7
    2b14:	.word	0x00002ac7
    2b18:	.word	0x00002ac7
    2b1c:	.word	0x00002b9b
    2b20:	subs	r3, #97	; 0x61
    2b22:	uxtb	r2, r3
    2b24:	cmp	r2, #22
    2b26:	bhi.n	2ac6 <decodeConfigfromFile(char*)+0x22>
    2b28:	cmp	r3, #22
    2b2a:	bhi.n	2ac6 <decodeConfigfromFile(char*)+0x22>
    2b2c:	add	r2, pc, #4	; (adr r2, 2b34 <decodeConfigfromFile(char*)+0x90>)
    2b2e:	ldr.w	pc, [r2, r3, lsl #2]
    2b32:	nop
    2b34:	.word	0x00002ba5
    2b38:	.word	0x00002cdb
    2b3c:	.word	0x00002bdb
    2b40:	.word	0x00002ac7
    2b44:	.word	0x00002ac7
    2b48:	.word	0x00002c7b
    2b4c:	.word	0x00002cab
    2b50:	.word	0x00002ac7
    2b54:	.word	0x00002ac7
    2b58:	.word	0x00002ac7
    2b5c:	.word	0x00002ce5
    2b60:	.word	0x00002ac7
    2b64:	.word	0x00002ac7
    2b68:	.word	0x00002ce9
    2b6c:	.word	0x00002bb7
    2b70:	.word	0x00002ac7
    2b74:	.word	0x00002ac7
    2b78:	.word	0x00002bc9
    2b7c:	.word	0x00002beb
    2b80:	.word	0x00002ac7
    2b84:	.word	0x00002ac7
    2b88:	.word	0x00002ac7
    2b8c:	.word	0x00002b91
      else if(ch=='w') { store[0]=configGetInt16(cptr); cptr=skipEOL(cptr); }
    2b90:	mov	r0, r4
    2b92:	bl	2a2c <configGetInt16(char*)>
    2b96:	ldr	r3, [pc, #356]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2b98:	strh	r0, [r3, #0]
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2b9a:	mov	r0, r4
    2b9c:	bl	2a98 <skipEOL(char*)>
    2ba0:	mov	r4, r0
    2ba2:	b.n	2ac6 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='a') { store[1]=t_acq=configGetInt16(cptr); cptr=skipEOL(cptr);}
    2ba4:	mov	r0, r4
    2ba6:	bl	2a2c <configGetInt16(char*)>
    2baa:	ldr	r3, [pc, #340]	; (2d00 <decodeConfigfromFile(char*)+0x25c>)
    2bac:	uxth	r0, r0
    2bae:	strh	r0, [r3, #0]
    2bb0:	ldr	r3, [pc, #328]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2bb2:	strh	r0, [r3, #2]
    2bb4:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='o') { store[2]=t_on= configGetInt16(cptr); cptr=skipEOL(cptr);}
    2bb6:	mov	r0, r4
    2bb8:	bl	2a2c <configGetInt16(char*)>
    2bbc:	ldr	r3, [pc, #324]	; (2d04 <decodeConfigfromFile(char*)+0x260>)
    2bbe:	uxth	r0, r0
    2bc0:	strh	r0, [r3, #0]
    2bc2:	ldr	r3, [pc, #312]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2bc4:	strh	r0, [r3, #4]
    2bc6:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='r') { store[3]=t_rep=configGetInt16(cptr); cptr=skipEOL(cptr);}
    2bc8:	mov	r0, r4
    2bca:	bl	2a2c <configGetInt16(char*)>
    2bce:	ldr	r3, [pc, #312]	; (2d08 <decodeConfigfromFile(char*)+0x264>)
    2bd0:	uxth	r0, r0
    2bd2:	strh	r0, [r3, #0]
    2bd4:	ldr	r3, [pc, #292]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2bd6:	strh	r0, [r3, #6]
    2bd8:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='c') { store[4]=proc= configGetInt16(cptr); cptr=skipEOL(cptr);}
    2bda:	mov	r0, r4
    2bdc:	bl	2a2c <configGetInt16(char*)>
    2be0:	ldr	r3, [pc, #296]	; (2d0c <decodeConfigfromFile(char*)+0x268>)
    2be2:	strh	r0, [r3, #0]
    2be4:	ldr	r3, [pc, #276]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2be6:	strh	r0, [r3, #8]
    2be8:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='s') { store[5]=shift=configGetInt16(cptr); cptr=skipEOL(cptr);if(shift<0) shift=0; }
    2bea:	mov	r0, r4
    2bec:	bl	2a2c <configGetInt16(char*)>
    2bf0:	ldr	r3, [pc, #264]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2bf2:	ldr	r2, [pc, #284]	; (2d10 <decodeConfigfromFile(char*)+0x26c>)
    2bf4:	strh	r0, [r3, #10]
    2bf6:	strh	r0, [r2, #0]
    2bf8:	mov	r0, r4
    2bfa:	bl	2a98 <skipEOL(char*)>
    2bfe:	ldrh	r3, [r2, #0]
    2c00:	mov	r4, r0
    2c02:	lsls	r3, r3, #16
    2c04:	bpl.w	2ac6 <decodeConfigfromFile(char*)+0x22>
    2c08:	movs	r3, #0
    2c0a:	strh	r3, [r2, #0]
    2c0c:	b.n	2ac6 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='1') { store[6]=h_1=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c0e:	mov	r0, r4
    2c10:	bl	2a2c <configGetInt16(char*)>
    2c14:	ldr	r3, [pc, #252]	; (2d14 <decodeConfigfromFile(char*)+0x270>)
    2c16:	uxth	r0, r0
    2c18:	strh	r0, [r3, #0]
    2c1a:	ldr	r3, [pc, #224]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c1c:	strh	r0, [r3, #12]
    2c1e:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='2') { store[7]=h_2=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c20:	mov	r0, r4
    2c22:	bl	2a2c <configGetInt16(char*)>
    2c26:	ldr	r3, [pc, #240]	; (2d18 <decodeConfigfromFile(char*)+0x274>)
    2c28:	uxth	r0, r0
    2c2a:	strh	r0, [r3, #0]
    2c2c:	ldr	r3, [pc, #204]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c2e:	strh	r0, [r3, #14]
    2c30:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='3') { store[8]=h_3=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c32:	mov	r0, r4
    2c34:	bl	2a2c <configGetInt16(char*)>
    2c38:	ldr	r3, [pc, #224]	; (2d1c <decodeConfigfromFile(char*)+0x278>)
    2c3a:	uxth	r0, r0
    2c3c:	strh	r0, [r3, #0]
    2c3e:	ldr	r3, [pc, #188]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c40:	strh	r0, [r3, #16]
    2c42:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='4') { store[9]=h_4=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c44:	mov	r0, r4
    2c46:	bl	2a2c <configGetInt16(char*)>
    2c4a:	ldr	r3, [pc, #212]	; (2d20 <decodeConfigfromFile(char*)+0x27c>)
    2c4c:	uxth	r0, r0
    2c4e:	strh	r0, [r3, #0]
    2c50:	ldr	r3, [pc, #168]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c52:	strh	r0, [r3, #18]
    2c54:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='5') { store[10]=d_on= configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c56:	mov	r0, r4
    2c58:	bl	2a2c <configGetInt16(char*)>
    2c5c:	ldr	r3, [pc, #196]	; (2d24 <decodeConfigfromFile(char*)+0x280>)
    2c5e:	uxth	r0, r0
    2c60:	strh	r0, [r3, #0]
    2c62:	ldr	r3, [pc, #152]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c64:	strh	r0, [r3, #20]
    2c66:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='6') { store[11]=d_rep=configGetInt16(cptr); cptr=skipEOL(cptr); }
    2c68:	mov	r0, r4
    2c6a:	bl	2a2c <configGetInt16(char*)>
    2c6e:	ldr	r3, [pc, #184]	; (2d28 <decodeConfigfromFile(char*)+0x284>)
    2c70:	uxth	r0, r0
    2c72:	strh	r0, [r3, #0]
    2c74:	ldr	r3, [pc, #132]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2c76:	strh	r0, [r3, #22]
    2c78:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='f') { fsamp=configGetInt32(cptr); cptr=skipEOL(cptr); acqModifyFrequency(fsamp); store[12]= fsamp/1000; }
    2c7a:	ldr.w	r9, [pc, #188]	; 2d38 <decodeConfigfromFile(char*)+0x294>
    2c7e:	mov	r0, r4
    2c80:	bl	2a50 <configGetInt32(char*)>
    2c84:	str.w	r0, [r9]
    2c88:	mov	r0, r4
    2c8a:	bl	2a98 <skipEOL(char*)>
    2c8e:	mov	r4, r0
    2c90:	ldr.w	r0, [r9]
    2c94:	bl	d08 <acqModifyFrequency(unsigned long)>
    2c98:	mov.w	r2, #1000	; 0x3e8
    2c9c:	ldr.w	r3, [r9]
    2ca0:	sdiv	r3, r3, r2
    2ca4:	ldr	r2, [pc, #84]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2ca6:	strh	r3, [r2, #24]
    2ca8:	b.n	2ac6 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='g') { store[13]=again= configGetInt16(cptr); cptr=skipEOL(cptr); setAGain(again);      }
    2caa:	mov	r0, r4
    2cac:	bl	2a2c <configGetInt16(char*)>
    2cb0:	ldr	r2, [pc, #120]	; (2d2c <decodeConfigfromFile(char*)+0x288>)
    2cb2:	ldr	r3, [pc, #72]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2cb4:	strh	r0, [r2, #0]
    2cb6:	strh	r0, [r3, #26]
    2cb8:	mov	r0, r4
    2cba:	bl	2a98 <skipEOL(char*)>
    2cbe:	mov	r4, r0
    2cc0:	ldrh	r0, [r2, #0]
    2cc2:	sxtb	r0, r0
    2cc4:	bl	3f34 <setAGain(signed char)>
    2cc8:	b.n	2ac6 <decodeConfigfromFile(char*)+0x22>
      else if(ch=='0') { store[15]=d_0=  configGetInt16(cptr); cptr=skipEOL(cptr); }
    2cca:	mov	r0, r4
    2ccc:	bl	2a2c <configGetInt16(char*)>
    2cd0:	ldr	r3, [pc, #92]	; (2d30 <decodeConfigfromFile(char*)+0x28c>)
    2cd2:	strh	r0, [r3, #0]
    2cd4:	ldr	r3, [pc, #36]	; (2cfc <decodeConfigfromFile(char*)+0x258>)
    2cd6:	strh	r0, [r3, #30]
    2cd8:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='b') { configGetString(cptr,(char *)&b_string[0]); cptr=skipEOL(cptr); }
    2cda:	mov	r1, r8
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2cdc:	mov	r0, r4
    2cde:	bl	2a70 <configGetString(char*, char*)>
    2ce2:	b.n	2b9a <decodeConfigfromFile(char*)+0xf6>
      else if(ch=='k') { configGetString(cptr,(char *)&k_string[0]); cptr=skipEOL(cptr); }
    2ce4:	mov	r1, r7
    2ce6:	b.n	2cdc <decodeConfigfromFile(char*)+0x238>
      else if(ch=='n') { configGetString(cptr,(char *)&n_string[0]); cptr=skipEOL(cptr); }
    2ce8:	mov	r1, r6
    2cea:	b.n	2cdc <decodeConfigfromFile(char*)+0x238>
}
    2cec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2cf0:	.word	0x20022267
    2cf4:	.word	0x2002223f
    2cf8:	.word	0x20001c8c
    2cfc:	.word	0x20021bec
    2d00:	.word	0x2000224e
    2d04:	.word	0x20002250
    2d08:	.word	0x20021cc2
    2d0c:	.word	0x20021c1c
    2d10:	.word	0x20021cc0
    2d14:	.word	0x20021c18
    2d18:	.word	0x20002248
    2d1c:	.word	0x2000224a
    2d20:	.word	0x2000224c
    2d24:	.word	0x20002246
    2d28:	.word	0x20021c12
    2d2c:	.word	0x20021c0e
    2d30:	.word	0x20021c10
    2d34:	.word	0x2002220c
    2d38:	.word	0x20002230

00002d3c <powerDown()>:
    SNVS_LPCR |= (1 << 6); // turn off power
    2d3c:	ldr	r2, [pc, #12]	; (2d4c <powerDown()+0x10>)
    2d3e:	ldr	r3, [r2, #56]	; 0x38
    2d40:	orr.w	r3, r3, #64	; 0x40
    2d44:	str	r3, [r2, #56]	; 0x38
    while (1) asm("wfi");      
    2d46:	wfi
    2d48:	b.n	2d46 <powerDown()+0xa>
    2d4a:	nop
    2d4c:	.word	0x400d4000

00002d50 <hibernate_init()>:
  {
    2d50:	push	{r3, lr}
    stopSystem();
    2d52:	bl	2a4 <stopSystem()>
    snvs_tmp = SNVS_LPCR;
    2d56:	ldr	r3, [pc, #44]	; (2d84 <hibernate_init()+0x34>)
    2d58:	ldr	r2, [pc, #44]	; (2d88 <hibernate_init()+0x38>)
    2d5a:	ldr	r1, [r3, #56]	; 0x38
    2d5c:	str	r1, [r2, #0]
    SNVS_LPSR |= 1;
    2d5e:	ldr	r2, [r3, #76]	; 0x4c
    2d60:	orr.w	r2, r2, #1
    2d64:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2d66:	dsb	sy
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2d6a:	ldr	r2, [r3, #56]	; 0x38
    2d6c:	bic.w	r2, r2, #2
    2d70:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2d72:	ldr	r2, [r3, #56]	; 0x38
    2d74:	ands.w	r2, r2, #2
    2d78:	bne.n	2d72 <hibernate_init()+0x22>
    SNVS_LPTAR = 0;
    2d7a:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2d7c:	ldr	r2, [r3, #88]	; 0x58
    2d7e:	cmp	r2, #0
    2d80:	bne.n	2d7c <hibernate_init()+0x2c>
  }
    2d82:	pop	{r3, pc}
    2d84:	.word	0x400d4000
    2d88:	.word	0x20020244

00002d8c <hibernate_now(unsigned long)>:
  {
    2d8c:	push	{r3, lr}
      __disable_irq();
    2d8e:	cpsid	i
      SNVS_LPTAR = secs;
    2d90:	ldr	r3, [pc, #32]	; (2db4 <hibernate_now(unsigned long)+0x28>)
    2d92:	str	r0, [r3, #88]	; 0x58
      while (SNVS_LPTAR != secs);
    2d94:	ldr	r2, [r3, #88]	; 0x58
    2d96:	cmp	r2, r0
    2d98:	bne.n	2d94 <hibernate_now(unsigned long)+0x8>
      SNVS_LPCR = snvs_tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2d9a:	ldr	r2, [pc, #28]	; (2db8 <hibernate_now(unsigned long)+0x2c>)
    2d9c:	ldr	r2, [r2, #0]
    2d9e:	orr.w	r2, r2, #2
    2da2:	str	r2, [r3, #56]	; 0x38
      while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2da4:	ldr	r2, [pc, #12]	; (2db4 <hibernate_now(unsigned long)+0x28>)
    2da6:	ldr	r3, [r2, #56]	; 0x38
    2da8:	lsls	r3, r3, #30
    2daa:	bpl.n	2da6 <hibernate_now(unsigned long)+0x1a>
      __enable_irq();
    2dac:	cpsie	i
      powerDown(); 
    2dae:	bl	2d3c <powerDown()>
    2db2:	nop
    2db4:	.word	0x400d4000
    2db8:	.word	0x20020244

00002dbc <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  static int head=0;
  static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    2dbc:	ldr	r3, [pc, #20]	; (2dd4 <getDataCount()+0x18>)
    2dbe:	ldr	r2, [pc, #24]	; (2dd8 <getDataCount()+0x1c>)
    2dc0:	ldr	r3, [r3, #0]
    2dc2:	ldr	r2, [r2, #0]
    2dc4:	subs	r3, r3, r2
    2dc6:	uxth	r0, r3
    2dc8:	cmp	r3, #0
    2dca:	itt	lt
    2dcc:	addlt.w	r0, r0, #4608	; 0x1200
    2dd0:	uxthlt	r0, r0
    2dd2:	bx	lr
    2dd4:	.word	0x2001f830
    2dd8:	.word	0x2001f82c

00002ddc <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2ddc:	ldr	r3, [pc, #4]	; (2de4 <queue_isBusy()+0x8>)
    2dde:	ldr	r0, [r3, #0]
    2de0:	bx	lr
    2de2:	nop
    2de4:	.word	0x2001f010

00002de8 <pushData(unsigned long*)>:
        while(queue_busy); 
      #endif
  }

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2de8:	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2dea:	ldr	r5, [pc, #56]	; (2e24 <pushData(unsigned long*)+0x3c>)
    2dec:	mov.w	r2, #4608	; 0x1200
  {
    2df0:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2df2:	ldr	r3, [r5, #0]
    2df4:	adds	r4, r3, #1
    2df6:	sdiv	r0, r4, r2
    2dfa:	mls	r4, r2, r0, r4
    2dfe:	ldr	r2, [pc, #40]	; (2e28 <pushData(unsigned long*)+0x40>)
    2e00:	ldr	r2, [r2, #0]
    2e02:	cmp	r4, r2
    2e04:	beq.n	2e20 <pushData(unsigned long*)+0x38>
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    2e06:	ldr	r0, [pc, #36]	; (2e2c <pushData(unsigned long*)+0x44>)
    2e08:	mov.w	r2, #2048	; 0x800
    2e0c:	add.w	r0, r0, r3, lsl #11
    2e10:	bl	a8dc <memcpy>
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
    2e14:	movs	r0, #1
    tail = (tail+1)%MAXBUF;
    2e16:	str	r4, [r5, #0]
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2e18:	ldr	r3, [pc, #20]	; (2e30 <pushData(unsigned long*)+0x48>)
    2e1a:	movs	r2, #0
    2e1c:	str	r2, [r3, #0]
  }
    2e1e:	pop	{r3, r4, r5, pc}
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2e20:	movs	r0, #0
    2e22:	b.n	2e18 <pushData(unsigned long*)+0x30>
    2e24:	.word	0x2001f830
    2e28:	.word	0x2001f82c
    2e2c:	.word	0x70000000
    2e30:	.word	0x2001f010

00002e34 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    2e34:	push	{r3, r4, r5, lr}
    queue_lock();
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2e36:	ldr	r5, [pc, #56]	; (2e70 <pullData(unsigned long*)+0x3c>)
    2e38:	ldr	r3, [pc, #56]	; (2e74 <pullData(unsigned long*)+0x40>)
    2e3a:	ldr	r4, [r5, #0]
    2e3c:	ldr	r3, [r3, #0]
    2e3e:	cmp	r4, r3
    2e40:	beq.n	2e6a <pullData(unsigned long*)+0x36>
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2e42:	ldr	r1, [pc, #52]	; (2e78 <pullData(unsigned long*)+0x44>)
    2e44:	mov.w	r2, #2048	; 0x800
    2e48:	add.w	r1, r1, r4, lsl #11
    head = (head+1)%MAXBUF;
    2e4c:	adds	r4, #1
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2e4e:	bl	a8dc <memcpy>
    head = (head+1)%MAXBUF;
    2e52:	mov.w	r3, #4608	; 0x1200
    queue_busy=0;
    return 1; // signal success.
    2e56:	movs	r0, #1
    head = (head+1)%MAXBUF;
    2e58:	sdiv	r2, r4, r3
    2e5c:	mls	r4, r3, r2, r4
    2e60:	str	r4, [r5, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2e62:	ldr	r3, [pc, #24]	; (2e7c <pullData(unsigned long*)+0x48>)
    2e64:	movs	r2, #0
    2e66:	str	r2, [r3, #0]
  }
    2e68:	pop	{r3, r4, r5, pc}
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    2e6a:	movs	r0, #0
    2e6c:	b.n	2e62 <pullData(unsigned long*)+0x2e>
    2e6e:	nop
    2e70:	.word	0x2001f82c
    2e74:	.word	0x2001f830
    2e78:	.word	0x70000000
    2e7c:	.word	0x2001f010

00002e80 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:

uint32_t SerNum=0;

// Call back for file timestamps.  Only called for file create and sync(). needed by SDFat
void dateTime(uint16_t* date, uint16_t* time, uint8_t* ms10) 
{
    2e80:	push	{r0, r1, r4, r5, r6, lr}
    2e82:	mov	r6, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2e84:	mov	r0, sp
{
    2e86:	mov	r5, r2
    2e88:	mov	r4, r1
    rtc_get_datetime(&t);
    2e8a:	bl	426c <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    2e8e:	ldrh.w	r2, [sp]

    *date = FS_DATE(t.year,t.month,t.day);
    2e92:	ldrsb.w	r3, [sp, #3]
    2e96:	subw	r2, r2, #1980	; 0x7bc
    2e9a:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2e9c:	cmp	r2, #127	; 0x7f
    2e9e:	bhi.n	2eea <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2ea0:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2ea4:	cmp	r1, #12
    2ea6:	bhi.n	2eea <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2ea8:	uxtb	r3, r3
    2eaa:	cmp	r3, #31
    2eac:	bhi.n	2eea <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2eae:	orr.w	r3, r3, r1, lsl #5
    2eb2:	orr.w	r3, r3, r2, lsl #9
    2eb6:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2eb8:	ldrb.w	r1, [sp, #5]
    2ebc:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2ec0:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    2ec2:	strh	r3, [r6, #0]
    2ec4:	bhi.n	2eee <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    2ec6:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2eca:	cmp	r3, #59	; 0x3b
    2ecc:	bhi.n	2eee <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2ece:	uxtb	r2, r2
    2ed0:	cmp	r2, #59	; 0x3b
    2ed2:	bhi.n	2eee <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    2ed4:	lsls	r3, r3, #5
    2ed6:	orr.w	r3, r3, r1, lsl #11
    2eda:	orr.w	r3, r3, r2, lsr #1
    2ede:	uxth	r3, r3
    2ee0:	strh	r3, [r4, #0]
    *ms10 = 0;
    2ee2:	movs	r3, #0
    2ee4:	strb	r3, [r5, #0]
}
    2ee6:	add	sp, #8
    2ee8:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2eea:	movs	r3, #0
    2eec:	b.n	2eb8 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2eee:	movs	r3, #0
    2ef0:	b.n	2ee0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

00002ef2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    2ef2:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2ef4:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    2ef6:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2ef8:	cbz	r5, 2f04 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2efa:	cbnz	r3, 2f0e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2efc:	mov	r0, r5
  }
    2efe:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2f00:	b.w	792e <FatFile::seekSet(unsigned long)>
    2f04:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f06:	cbz	r0, 2f0e <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    2f08:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    2f0a:	b.w	62a4 <ExFatFile::seekSet(unsigned long long)>
  }
    2f0e:	pop	{r4, r5}
    2f10:	bx	lr

00002f12 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2f12:	push	{r0, r1, r4, lr}
    2f14:	mov	r4, r0
    2f16:	cbz	r1, 2f32 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    2f18:	mov	r0, r1
    2f1a:	str	r1, [sp, #4]
    2f1c:	bl	f490 <strlen>
    2f20:	ldr	r3, [r4, #0]
    2f22:	mov	r2, r0
    2f24:	ldr	r1, [sp, #4]
    2f26:	ldr	r3, [r3, #4]
    2f28:	mov	r0, r4
    2f2a:	add	sp, #8
    2f2c:	ldmia.w	sp!, {r4, lr}
    2f30:	bx	r3
    2f32:	add	sp, #8
    2f34:	pop	{r4, pc}

00002f36 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2f36:	push	{r4, lr}
    2f38:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    2f3a:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    2f3e:	mov	r0, r4
    2f40:	ldmia.w	sp!, {r4, lr}
    2f44:	b.w	cde0 <Print::println()>

00002f48 <FsBaseFile::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
    2f48:	ldr	r3, [r0, #56]	; 0x38
  int read() {
    2f4a:	push	{r0, r1, r2, lr}
    return m_fFile ? m_fFile->read(buf, count) :
    2f4c:	cbz	r3, 2f64 <FsBaseFile::read()+0x1c>
    2f4e:	movs	r2, #1
    2f50:	add.w	r1, sp, #7
    2f54:	mov	r0, r3
    2f56:	bl	7744 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
    2f5a:	cmp	r0, #1
    2f5c:	bne.n	2f68 <FsBaseFile::read()+0x20>
    2f5e:	ldrb.w	r0, [sp, #7]
    2f62:	b.n	2f6c <FsBaseFile::read()+0x24>
    2f64:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
    2f66:	cbnz	r0, 2f72 <FsBaseFile::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
    2f68:	mov.w	r0, #4294967295
  }
    2f6c:	add	sp, #12
    2f6e:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
    2f72:	movs	r2, #1
    2f74:	add.w	r1, sp, #7
    2f78:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
    2f7c:	b.n	2f5a <FsBaseFile::read()+0x12>

00002f7e <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    2f7e:	ldr	r3, [r0, #56]	; 0x38
    2f80:	cbz	r3, 2f88 <FsBaseFile::sync()+0xa>
    2f82:	mov	r0, r3
    2f84:	b.w	7b78 <FatFile::sync()>
    2f88:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    2f8a:	cbz	r0, 2f90 <FsBaseFile::sync()+0x12>
    2f8c:	b.w	6ed8 <ExFatFile::sync()>
  }
    2f90:	bx	lr
	...

00002f94 <loadConfigfromFile()>:

static char configText[1024];
uint32_t sdSectorCount=0;

int16_t loadConfigfromFile(void)
{
    2f94:	push	{r4, r5, r6, lr}
    int ii=0;
    file = sd->open("config.txt"); 
    2f96:	ldr	r1, [pc, #100]	; (2ffc <loadConfigfromFile()+0x68>)
{
    2f98:	sub	sp, #80	; 0x50
    file = sd->open("config.txt"); 
    2f9a:	ldr	r2, [pc, #100]	; (3000 <loadConfigfromFile()+0x6c>)
    2f9c:	movs	r3, #0
    2f9e:	ldr	r1, [r1, #0]
    2fa0:	mov	r0, sp
    2fa2:	bl	900c <FsVolume::open(char const*, int)>
class Print
    2fa6:	ldr	r4, [pc, #92]	; (3004 <loadConfigfromFile()+0x70>)
    2fa8:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2faa:	add	r1, sp, #16
    2fac:	add.w	r0, r4, #16
    2fb0:	str	r3, [r4, #4]
class Stream : public Print
    2fb2:	ldr	r3, [sp, #8]
    2fb4:	str	r3, [r4, #8]
    2fb6:	ldrb.w	r3, [sp, #12]
    2fba:	strb	r3, [r4, #12]
    2fbc:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
    2fc0:	mov	r0, sp
    2fc2:	bl	f88 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2fc6:	ldr	r3, [r4, #72]	; 0x48
    2fc8:	cbz	r3, 2fe0 <loadConfigfromFile()+0x4c>
    2fca:	ldr	r5, [pc, #60]	; (3008 <loadConfigfromFile()+0x74>)
{
    2fcc:	movs	r4, #0
    return BaseFile::available();
    2fce:	ldr	r6, [pc, #60]	; (300c <loadConfigfromFile()+0x78>)
    2fd0:	ldr	r0, [pc, #56]	; (300c <loadConfigfromFile()+0x78>)
    2fd2:	bl	ece <FsBaseFile::available() const>
    if(file) 
    { while (file.available()) 
    2fd6:	cbnz	r0, 2fec <loadConfigfromFile()+0x58>
      {
        configText[ii++]=file.read();
      }
      file.close(); 
    2fd8:	ldr	r0, [pc, #48]	; (300c <loadConfigfromFile()+0x78>)
    2fda:	bl	8dd8 <FsBaseFile::close()>
    2fde:	b.n	2fe6 <loadConfigfromFile()+0x52>
    2fe0:	ldr	r4, [r4, #76]	; 0x4c
    2fe2:	cmp	r4, #0
    2fe4:	bne.n	2fca <loadConfigfromFile()+0x36>
    }
  return ii;
}
    2fe6:	sxth	r0, r4
    2fe8:	add	sp, #80	; 0x50
    2fea:	pop	{r4, r5, r6, pc}
    return BaseFile::read();
    2fec:	mov	r0, r6
        configText[ii++]=file.read();
    2fee:	adds	r4, #1
    2ff0:	bl	2f48 <FsBaseFile::read()>
    2ff4:	strb.w	r0, [r5], #1
    2ff8:	b.n	2fd0 <loadConfigfromFile()+0x3c>
    2ffa:	nop
    2ffc:	.word	0x20002238
    3000:	.word	0x20000da5
    3004:	.word	0x20021414
    3008:	.word	0x20021cca
    300c:	.word	0x20021424

00003010 <filing_init()>:
int16_t filing_init(void)
{
    3010:	push	{r3, lr}
  FsDateTime::callback = dateTime;
    3012:	ldr	r2, [pc, #72]	; (305c <filing_init()+0x4c>)
    3014:	ldr	r3, [pc, #72]	; (3060 <filing_init()+0x50>)
    3016:	str	r2, [r3, #0]

  sdSectorCount=sd->card()->sectorCount();
    3018:	ldr	r3, [pc, #72]	; (3064 <filing_init()+0x54>)
  SdCard* card() {return m_card;}
    301a:	ldr	r3, [r3, #0]
    301c:	ldr.w	r0, [r3, #1164]	; 0x48c
    3020:	ldr	r3, [r0, #0]
    3022:	ldr	r3, [r3, #28]
    3024:	blx	r3
    3026:	ldr	r3, [pc, #64]	; (3068 <filing_init()+0x58>)
    3028:	mov	r1, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    302a:	movs	r2, #10
    302c:	str	r0, [r3, #0]
    302e:	movs	r3, #0
    3030:	ldr	r0, [pc, #56]	; (306c <filing_init()+0x5c>)
    3032:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    3036:	ldr	r0, [pc, #52]	; (306c <filing_init()+0x5c>)
    3038:	bl	cde0 <Print::println()>
  Serial.println(sdSectorCount);
  haveStore=1;
    303c:	ldr	r3, [pc, #48]	; (3070 <filing_init()+0x60>)
    303e:	movs	r2, #1
    3040:	str	r2, [r3, #0]
  if(loadConfigfromFile())              // is in Filing
    3042:	bl	2f94 <loadConfigfromFile()>
    3046:	cbz	r0, 304e <filing_init()+0x3e>
    decodeConfigfromFile(configText);   // in in Menu
    3048:	ldr	r0, [pc, #40]	; (3074 <filing_init()+0x64>)
    304a:	bl	2aa4 <decodeConfigfromFile(char*)>
  pinMode(LED,OUTPUT);
    304e:	movs	r1, #1
    3050:	movs	r0, #13
    3052:	bl	c5b4 <pinMode>

  Serial.println("Card failed, or not present");
  // don't do anything more:
  return 0;
  */
}
    3056:	movs	r0, #1
    3058:	pop	{r3, pc}
    305a:	nop
    305c:	.word	0x00002e81
    3060:	.word	0x20021258
    3064:	.word	0x20002238
    3068:	.word	0x20021544
    306c:	.word	0x20001c8c
    3070:	.word	0x20021248
    3074:	.word	0x20021cca

00003078 <stopSD()>:

void stopSD(void)
{
//https://github.com/greiman/SdFat/issues/401
  sd->card()->syncDevice();
    3078:	ldr	r3, [pc, #12]	; (3088 <stopSD()+0x10>)
    307a:	ldr	r3, [r3, #0]
    307c:	ldr.w	r0, [r3, #1164]	; 0x48c
    3080:	ldr	r3, [r0, #0]
    3082:	ldr	r3, [r3, #32]
    3084:	bx	r3
    3086:	nop
    3088:	.word	0x20002238

0000308c <filing_exit()>:
  mSPI.beginTransaction(SPISettings(400000, MSBFIRST, SPI_MODE0));
  mSPI.transfer(0XFF);
  mSPI.endTransaction();
  mSPI.end();
  */
  digitalWrite(LED,LOW);
    308c:	movs	r1, #0
    308e:	movs	r0, #13
    3090:	b.w	c574 <digitalWrite>

00003094 <timeStamp()>:
}

char * timeStamp(void)
{
    3094:	push	{r4, lr}
    3096:	sub	sp, #24
  static char date_time[80];
  
  datetime_t t;
  rtc_get_datetime(&t);

  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    3098:	ldr	r4, [pc, #52]	; (30d0 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    309a:	add	r0, sp, #16
    309c:	bl	426c <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    30a0:	ldrsb.w	r3, [sp, #23]
    30a4:	ldrsh.w	r2, [sp, #16]
    30a8:	mov	r0, r4
    30aa:	str	r3, [sp, #12]
    30ac:	ldrsb.w	r3, [sp, #22]
    30b0:	ldr	r1, [pc, #32]	; (30d4 <timeStamp()+0x40>)
    30b2:	str	r3, [sp, #8]
    30b4:	ldrsb.w	r3, [sp, #21]
    30b8:	str	r3, [sp, #4]
    30ba:	ldrsb.w	r3, [sp, #19]
    30be:	str	r3, [sp, #0]
    30c0:	ldrsb.w	r3, [sp, #18]
    30c4:	bl	eff4 <siprintf>
  return date_time;
}
    30c8:	mov	r0, r4
    30ca:	add	sp, #24
    30cc:	pop	{r4, pc}
    30ce:	nop
    30d0:	.word	0x20022192
    30d4:	.word	0x20000c68

000030d8 <writeHeaderInfo(char*, int)>:

void writeHeaderInfo(char *info, int serNum)
{
    30d8:	push	{r0, r1, r2, r4, r5, lr}
    30da:	ldr	r3, [pc, #144]	; (316c <writeHeaderInfo(char*, int)+0x94>)
    30dc:	mov	r4, r0
    30de:	str	r1, [sp, #4]
  uint32_t tt=millis();
  int ih=0;
  strcpy(&info[ih], MAGIC); ih+=4;              //4
    30e0:	ldr	r1, [pc, #140]	; (3170 <writeHeaderInfo(char*, int)+0x98>)
    30e2:	ldr	r5, [r3, #0]
    30e4:	bl	f3d4 <strcpy>
  strcpy(&info[ih], timeStamp()); ih +=16;      //20
    30e8:	bl	3094 <timeStamp()>
    30ec:	mov	r1, r0
    30ee:	adds	r0, r4, #4
    30f0:	bl	f3d4 <strcpy>
  sprintf(&info[ih]," %8x",serNum); ih +=12;    //32
    30f4:	ldr	r2, [sp, #4]
    30f6:	ldr	r1, [pc, #124]	; (3174 <writeHeaderInfo(char*, int)+0x9c>)
    30f8:	add.w	r0, r4, #20
    30fc:	bl	eff4 <siprintf>
  memcpy(&info[ih], &tt,4); ih +=4;             //36
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    3100:	ldr	r3, [pc, #116]	; (3178 <writeHeaderInfo(char*, int)+0xa0>)
    3102:	add.w	r2, r4, #36	; 0x24
  memcpy(&info[ih], &tt,4); ih +=4;             //36
    3106:	str	r5, [r4, #32]
  memcpy(&info[ih], (char *)b_string,40); ih+=40;       //76
    3108:	add.w	r1, r3, #40	; 0x28
    310c:	ldr.w	r0, [r3], #4
    3110:	cmp	r3, r1
    3112:	str.w	r0, [r2], #4
    3116:	bne.n	310c <writeHeaderInfo(char*, int)+0x34>
  memcpy(&info[ih], (char *)k_string,40); ih+=40;       //116
    3118:	ldr	r3, [pc, #96]	; (317c <writeHeaderInfo(char*, int)+0xa4>)
    311a:	add.w	r2, r4, #76	; 0x4c
    311e:	add.w	r1, r3, #40	; 0x28
    3122:	ldr.w	r0, [r3], #4
    3126:	cmp	r3, r1
    3128:	str.w	r0, [r2], #4
    312c:	bne.n	3122 <writeHeaderInfo(char*, int)+0x4a>
  memcpy(&info[ih], (char *)n_string,40); ih+=40;       //156
    312e:	ldr	r3, [pc, #80]	; (3180 <writeHeaderInfo(char*, int)+0xa8>)
    3130:	add.w	r2, r4, #116	; 0x74
    3134:	add.w	r1, r3, #40	; 0x28
    3138:	ldr.w	r0, [r3], #4
    313c:	cmp	r3, r1
    313e:	str.w	r0, [r2], #4
    3142:	bne.n	3138 <writeHeaderInfo(char*, int)+0x60>
  memcpy(&info[ih], getStore(),16*2); ih +=32;  //188
    3144:	bl	2a24 <getStore()>
    3148:	add.w	r3, r4, #156	; 0x9c
    314c:	add.w	r2, r0, #32
    3150:	ldr.w	r1, [r0], #4
    3154:	cmp	r0, r2
    3156:	str.w	r1, [r3], #4
    315a:	bne.n	3150 <writeHeaderInfo(char*, int)+0x78>
  strcpy(&info[ih]," end");                     //196
    315c:	ldr	r1, [pc, #36]	; (3184 <writeHeaderInfo(char*, int)+0xac>)
    315e:	add.w	r0, r4, #188	; 0xbc
}
    3162:	add	sp, #12
    3164:	ldmia.w	sp!, {r4, r5, lr}
  strcpy(&info[ih]," end");                     //196
    3168:	b.w	f3d4 <strcpy>
    316c:	.word	0x20021bd0
    3170:	.word	0x20000cf3
    3174:	.word	0x20000cf8
    3178:	.word	0x2002220c
    317c:	.word	0x2002223f
    3180:	.word	0x20022267
    3184:	.word	0x20000cfd

00003188 <wavHeaderInit(long, long, long, int)>:

char * wavHeaderInit(int32_t fsamp, int32_t nchan, int32_t nbits, int serNum)
{
    3188:	push	{r3, r4, r5, r6, r7, lr}
  int nbytes=nbits/8;

  memcpy(wav_hdr.rId,"RIFF",4);
    318a:	ldr	r4, [pc, #124]	; (3208 <wavHeaderInit(long, long, long, int)+0x80>)
{
    318c:	mov	r7, r1
    318e:	mov	r1, r3
  memcpy(wav_hdr.rId,"RIFF",4);
    3190:	ldr	r3, [pc, #120]	; (320c <wavHeaderInit(long, long, long, int)+0x84>)
  int nbytes=nbits/8;
    3192:	cmp	r2, #0
    3194:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    3196:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    3198:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    319c:	it	lt
    319e:	addlt	r5, r2, #7
  wav_hdr.iLen = 512 - 13*4;
  wav_hdr.dLen = 0; // will be updated at closing

  wav_hdr.nFormatTag=1;
  wav_hdr.nChannels=nchan;
  wav_hdr.nSamplesPerSec=fsamp;
    31a0:	str	r0, [r4, #24]
  memcpy(wav_hdr.wId,"WAVE",4);
    31a2:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    31a6:	uxth	r6, r7
  int nbytes=nbits/8;
    31a8:	asrs	r5, r5, #3
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
  wav_hdr.nBlockAlign=nchan*nbytes;
  wav_hdr.nBitsPerSamples=nbits;
    31aa:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    31ac:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    31ae:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    31b2:	muls	r0, r5
  memcpy(wav_hdr.fId,"fmt ",4);
    31b4:	add.w	r3, r3, #1974272	; 0x1e2000
  wav_hdr.nChannels=nchan;
    31b8:	strh	r6, [r4, #22]
  wav_hdr.nBlockAlign=nchan*nbytes;
    31ba:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    31be:	muls	r0, r7
  memcpy(wav_hdr.fId,"fmt ",4);
    31c0:	addw	r3, r3, #3087	; 0xc0f
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    31c4:	str	r0, [r4, #28]

  writeHeaderInfo(&wav_hdr.info[0],serNum);
    31c6:	add.w	r0, r4, #44	; 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    31ca:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    31cc:	add.w	r3, r3, #1090519040	; 0x41000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    31d0:	strh	r5, [r4, #32]
  memcpy(wav_hdr.dId,"data",4);
    31d2:	subw	r3, r3, #3074	; 0xc02
    31d6:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    31da:	add.w	r3, r3, #218107136	; 0xd000d00
    31de:	add.w	r3, r3, #15859712	; 0xf20000
    31e2:	adds	r3, #5
    31e4:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    31e6:	mov.w	r3, #504	; 0x1f8
    31ea:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    31ec:	movs	r3, #16
    31ee:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    31f0:	mov.w	r3, #460	; 0x1cc
    31f4:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    31f6:	movs	r3, #0
    31f8:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    31fc:	movs	r3, #1
    31fe:	strh	r3, [r4, #20]
  writeHeaderInfo(&wav_hdr.info[0],serNum);
    3200:	bl	30d8 <writeHeaderInfo(char*, int)>

  return (char *)&wav_hdr;
}
    3204:	mov	r0, r4
    3206:	pop	{r3, r4, r5, r6, r7, pc}
    3208:	.word	0x20020044
    320c:	.word	0x46464952

00003210 <wavHeaderUpdate(long)>:

char * wavHeaderUpdate(int32_t nbytes)
{
  wav_hdr.dLen = nbytes;
    3210:	ldr	r3, [pc, #12]	; (3220 <wavHeaderUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    3212:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    3214:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    3218:	add	r2, r0
  return (char *)&wav_hdr;
}
    321a:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    321c:	str	r2, [r3, #4]
}
    321e:	bx	lr
    3220:	.word	0x20020044

00003224 <wavHeaderWrite(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    3224:	ldr	r3, [pc, #76]	; (3274 <wavHeaderWrite(char*)+0x50>)
    3226:	ldr	r2, [r3, #72]	; 0x48

void wavHeaderWrite(char * wav_hdr) 
{ 
    3228:	push	{r4, r5, r6, lr}
    322a:	mov	r6, r0
    322c:	cbz	r2, 3262 <wavHeaderWrite(char*)+0x3e>
    322e:	ldr	r4, [r2, #20]
    3230:	movs	r5, #0
  uint64_t fpos;
  fpos = file.curPosition();
  Serial.printf("; fpos=%d ",fpos);
    3232:	mov	r2, r4
    3234:	mov	r3, r5
    3236:	ldr	r1, [pc, #64]	; (3278 <wavHeaderWrite(char*)+0x54>)
    3238:	ldr	r0, [pc, #64]	; (327c <wavHeaderWrite(char*)+0x58>)
    323a:	bl	ce18 <Print::printf(char const*, ...)>
  file.seekSet(0);
    323e:	movs	r3, #0
    3240:	movs	r2, #0
    3242:	ldr	r0, [pc, #60]	; (3280 <wavHeaderWrite(char*)+0x5c>)
    3244:	bl	2ef2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    3248:	mov.w	r2, #512	; 0x200
    324c:	mov	r1, r6
    324e:	ldr	r0, [pc, #36]	; (3274 <wavHeaderWrite(char*)+0x50>)
    3250:	bl	1ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    3254:	mov	r2, r4
    3256:	mov	r3, r5
    3258:	ldr	r0, [pc, #36]	; (3280 <wavHeaderWrite(char*)+0x5c>)
}
    325a:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    325e:	b.w	2ef2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    3262:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    3264:	cbz	r3, 326c <wavHeaderWrite(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    3266:	ldrd	r4, r5, [r3]
    326a:	b.n	3232 <wavHeaderWrite(char*)+0xe>
    326c:	mov	r4, r3
    326e:	mov	r5, r3
    3270:	b.n	3232 <wavHeaderWrite(char*)+0xe>
    3272:	nop
    3274:	.word	0x20021414
    3278:	.word	0x20000ce8
    327c:	.word	0x20001c8c
    3280:	.word	0x20021424

00003284 <makeHeader(long*)>:
   return wheader;
}
*/

int16_t makeHeader(int32_t *header)
{
    3284:	push	{r4, lr}
    3286:	sub	sp, #32
    3288:	mov	r4, r0
     * @brief Make file header
     * @param header is pointer to header
     * 
     */
    datetime_t t;
    rtc_get_datetime(&t); 
    328a:	add	r0, sp, #24
    328c:	bl	426c <rtc_get_datetime(datetime_t*)>

    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    3290:	ldrsb.w	r3, [sp, #31]
    3294:	ldr	r2, [pc, #140]	; (3324 <makeHeader(long*)+0xa0>)
    3296:	mov	r0, r4
    3298:	str	r3, [sp, #16]
    329a:	ldrsb.w	r3, [sp, #30]
    329e:	ldr	r1, [pc, #136]	; (3328 <makeHeader(long*)+0xa4>)
    32a0:	str	r3, [sp, #12]
    32a2:	ldrsb.w	r3, [sp, #29]
    32a6:	str	r3, [sp, #8]
    32a8:	ldrsb.w	r3, [sp, #27]
    32ac:	str	r3, [sp, #4]
    32ae:	ldrsb.w	r3, [sp, #26]
    32b2:	str	r3, [sp, #0]
    32b4:	ldrsh.w	r3, [sp, #24]
    32b8:	bl	eff4 <siprintf>
            MAGIC,t.year,t.month,t.day,t.hour,t.min,t.sec);

    //header[5] = 20;          // SW version
    header[5] = 30;            // SW version
    32bc:	movs	r3, #30
    header[13] = shift;
    header[14] = again;
    header[15] = dgain;
    header[16] = millis();
    //memcpy(&header[20], getStore(),16*2);
    writeHeaderInfo((char *)&header[20],SerNum);
    32be:	add.w	r0, r4, #80	; 0x50
    header[5] = 30;            // SW version
    32c2:	str	r3, [r4, #20]
    header[6] = SerNum;        // serial number
    32c4:	ldr	r3, [pc, #100]	; (332c <makeHeader(long*)+0xa8>)
    32c6:	ldr	r1, [r3, #0]
    header[7] = fsamp;
    32c8:	ldr	r3, [pc, #100]	; (3330 <makeHeader(long*)+0xac>)
    header[6] = SerNum;        // serial number
    32ca:	str	r1, [r4, #24]
    header[7] = fsamp;
    32cc:	ldr	r3, [r3, #0]
    32ce:	str	r3, [r4, #28]
    header[8] = NCHAN_ACQ;
    32d0:	movs	r3, #4
    32d2:	str	r3, [r4, #32]
    header[9] = t_acq;
    32d4:	ldr	r3, [pc, #92]	; (3334 <makeHeader(long*)+0xb0>)
    32d6:	ldrh	r3, [r3, #0]
    32d8:	uxth	r3, r3
    32da:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    32dc:	ldr	r3, [pc, #88]	; (3338 <makeHeader(long*)+0xb4>)
    32de:	ldrh	r3, [r3, #0]
    32e0:	uxth	r3, r3
    32e2:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    32e4:	ldr	r3, [pc, #84]	; (333c <makeHeader(long*)+0xb8>)
    32e6:	ldrh	r3, [r3, #0]
    32e8:	uxth	r3, r3
    32ea:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    32ec:	ldr	r3, [pc, #80]	; (3340 <makeHeader(long*)+0xbc>)
    32ee:	ldrh	r3, [r3, #0]
    32f0:	sxth	r3, r3
    32f2:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    32f4:	ldr	r3, [pc, #76]	; (3344 <makeHeader(long*)+0xc0>)
    32f6:	ldrh	r3, [r3, #0]
    32f8:	sxth	r3, r3
    32fa:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    32fc:	ldr	r3, [pc, #72]	; (3348 <makeHeader(long*)+0xc4>)
    32fe:	ldrh	r3, [r3, #0]
    3300:	sxth	r3, r3
    3302:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    3304:	ldr	r3, [pc, #68]	; (334c <makeHeader(long*)+0xc8>)
    3306:	ldrh	r3, [r3, #0]
    3308:	sxth	r3, r3
    330a:	str	r3, [r4, #60]	; 0x3c
    330c:	ldr	r3, [pc, #64]	; (3350 <makeHeader(long*)+0xcc>)
    330e:	ldr	r3, [r3, #0]
    header[16] = millis();
    3310:	str	r3, [r4, #64]	; 0x40
    writeHeaderInfo((char *)&header[20],SerNum);
    3312:	bl	30d8 <writeHeaderInfo(char*, int)>
    header[127]=0x55555555;
    3316:	mov.w	r3, #1431655765	; 0x55555555
    return 1;
}
    331a:	movs	r0, #1
    header[127]=0x55555555;
    331c:	str.w	r3, [r4, #508]	; 0x1fc
}
    3320:	add	sp, #32
    3322:	pop	{r4, pc}
    3324:	.word	0x20000cf3
    3328:	.word	0x20000c66
    332c:	.word	0x20006e08
    3330:	.word	0x20002230
    3334:	.word	0x2000224e
    3338:	.word	0x20002250
    333c:	.word	0x20021cc2
    3340:	.word	0x20021c1c
    3344:	.word	0x20021cc0
    3348:	.word	0x20021c0e
    334c:	.word	0x20021c14
    3350:	.word	0x20021bd0

00003354 <newFolder(int)>:
    return 0;
}

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    3354:	ldr	r3, [pc, #12]	; (3364 <newFolder(int)+0x10>)
    3356:	ldr	r2, [r3, #0]
    3358:	cmp	r2, r0
  d0=d;
    335a:	itte	ne
    335c:	strne	r0, [r3, #0]
  return 1;
    335e:	movne	r0, #1
  if(d==d0) return 0; // same day
    3360:	moveq	r0, #0
}
    3362:	bx	lr
    3364:	.word	0x2000205c

00003368 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    3368:	push	{r4, lr}
    336a:	sub	sp, #32
    336c:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    336e:	add	r0, sp, #24
    3370:	bl	426c <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    3374:	ldrsb.w	r1, [sp, #29]
    3378:	mov	r0, r1
    337a:	bl	3354 <newFolder(int)>
    337e:	cbz	r0, 33c2 <newDirectory(char*)+0x5a>
      {   
          sprintf(dirName, "/%s_%s_%s_%06x_%04d%02d%02d/%02d/", 
    3380:	ldrsb.w	r3, [sp, #27]
    3384:	mov	r0, r4
    3386:	str	r1, [sp, #20]
    3388:	str	r3, [sp, #16]
    338a:	ldrsb.w	r3, [sp, #26]
    338e:	ldr	r2, [pc, #56]	; (33c8 <newDirectory(char*)+0x60>)
    3390:	str	r3, [sp, #12]
    3392:	ldrsh.w	r3, [sp, #24]
    3396:	ldr	r1, [pc, #52]	; (33cc <newDirectory(char*)+0x64>)
    3398:	str	r3, [sp, #8]
    339a:	ldr	r3, [pc, #52]	; (33d0 <newDirectory(char*)+0x68>)
    339c:	ldr	r3, [r3, #0]
    339e:	str	r3, [sp, #4]
    33a0:	ldr	r3, [pc, #48]	; (33d4 <newDirectory(char*)+0x6c>)
    33a2:	str	r3, [sp, #0]
    33a4:	ldr	r3, [pc, #48]	; (33d8 <newDirectory(char*)+0x70>)
    33a6:	bl	eff4 <siprintf>
              b_string,k_string,n_string,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    33aa:	ldr	r0, [pc, #48]	; (33dc <newDirectory(char*)+0x74>)
    33ac:	bl	cde0 <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    33b0:	ldr	r1, [pc, #44]	; (33e0 <newDirectory(char*)+0x78>)
    33b2:	ldr	r0, [pc, #40]	; (33dc <newDirectory(char*)+0x74>)
    33b4:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
    33b8:	ldr	r0, [pc, #32]	; (33dc <newDirectory(char*)+0x74>)
    33ba:	mov	r1, r4
    33bc:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    33c0:	movs	r0, #1
          Serial.println(); Serial.print(": "); Serial.print(dirName);
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory
}
    33c2:	add	sp, #32
    33c4:	pop	{r4, pc}
    33c6:	nop
    33c8:	.word	0x2002220c
    33cc:	.word	0x20000cc2
    33d0:	.word	0x20006e08
    33d4:	.word	0x20022267
    33d8:	.word	0x2002223f
    33dc:	.word	0x20001c8c
    33e0:	.word	0x200013a5

000033e4 <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    33e4:	push	{r4, r5, r6, r7, lr}
    33e6:	sub	sp, #36	; 0x24
    33e8:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    33ea:	add	r0, sp, #24
    33ec:	bl	426c <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    33f0:	ldr	r3, [pc, #84]	; (3448 <newFileName(char*)+0x64>)
    33f2:	ldrsb.w	r7, [sp, #31]
    33f6:	ldrh	r2, [r3, #0]
    33f8:	ldrsb.w	r6, [sp, #30]
    33fc:	ldrsb.w	r5, [sp, #29]
    3400:	sxth	r2, r2
    3402:	ldrsb.w	r0, [sp, #27]
    3406:	ldrsb.w	r1, [sp, #26]
    340a:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    340e:	str	r1, [sp, #0]
    3410:	strd	r6, r7, [sp, #12]
    3414:	strd	r0, r5, [sp, #4]
    if(proc==0)
    3418:	cbnz	r2, 3440 <newFileName(char*)+0x5c>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    341a:	ldr	r2, [pc, #48]	; (344c <newFileName(char*)+0x68>)
    341c:	ldr	r1, [pc, #48]	; (3450 <newFileName(char*)+0x6c>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    341e:	mov	r0, r4
    3420:	bl	eff4 <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    3424:	ldr	r0, [pc, #44]	; (3454 <newFileName(char*)+0x70>)
    3426:	bl	cde0 <Print::println()>
    342a:	ldr	r1, [pc, #44]	; (3458 <newFileName(char*)+0x74>)
    342c:	ldr	r0, [pc, #36]	; (3454 <newFileName(char*)+0x70>)
    342e:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
    3432:	mov	r1, r4
    3434:	ldr	r0, [pc, #28]	; (3454 <newFileName(char*)+0x70>)
    3436:	bl	2f12 <Print::write(char const*) [clone .isra.0]>

    return 1;
}
    343a:	movs	r0, #1
    343c:	add	sp, #36	; 0x24
    343e:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    3440:	ldr	r2, [pc, #8]	; (344c <newFileName(char*)+0x68>)
    3442:	ldr	r1, [pc, #24]	; (345c <newFileName(char*)+0x78>)
    3444:	b.n	341e <newFileName(char*)+0x3a>
    3446:	nop
    3448:	.word	0x20021c1c
    344c:	.word	0x20001342
    3450:	.word	0x20000c82
    3454:	.word	0x20001c8c
    3458:	.word	0x200013a5
    345c:	.word	0x20000ca2

00003460 <storeData(short)>:
uint32_t nbuf;
void do_hibernate(void);

/**************** main data filing routine ************************/
int16_t storeData(int16_t status)
{
    3460:	push	{r4, r5, r6, lr}
    if(status==CLOSED) // file closed: should open
    3462:	mov	r4, r0
{
    3464:	sub	sp, #80	; 0x50
    if(status==CLOSED) // file closed: should open
    3466:	cmp	r0, #0
    3468:	bne.w	3572 <storeData(short)+0x112>
    {   //if(!checkDiskSpace()) {return STOPPED;}
        //
        if(newDirectory(dirName))
    346c:	ldr	r0, [pc, #540]	; (368c <storeData(short)+0x22c>)
    346e:	bl	3368 <newDirectory(char*)>
    3472:	cmp	r0, #0
    3474:	beq.n	350c <storeData(short)+0xac>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    3476:	ldr	r5, [pc, #536]	; (3690 <storeData(short)+0x230>)
    3478:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    347a:	ldr.w	r1, [r3, #1152]	; 0x480
    347e:	cbz	r1, 34ae <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    3480:	mov	r3, r4
    3482:	ldr	r2, [pc, #520]	; (368c <storeData(short)+0x22c>)
    3484:	mov	r0, sp
    3486:	str	r4, [sp, #0]
    3488:	bl	7ca6 <FatFile::open(FatVolume*, char const*, int)>
    348c:	cbnz	r0, 34e8 <storeData(short)+0x88>
    348e:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    3490:	ldr.w	r1, [r3, #1152]	; 0x480
    3494:	cbnz	r1, 34c6 <storeData(short)+0x66>
    3496:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    349a:	cbz	r0, 34da <storeData(short)+0x7a>
  ExFatFile() {}
    349c:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    349e:	movs	r3, #1
    34a0:	add.w	r1, r0, #1096	; 0x448
    34a4:	ldr	r2, [pc, #484]	; (368c <storeData(short)+0x22c>)
    34a6:	mov	r0, sp
    34a8:	bl	7012 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    34ac:	b.n	34d8 <storeData(short)+0x78>
    34ae:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    34b2:	cmp	r0, #0
    34b4:	beq.n	348e <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    34b6:	mov	r3, r1
    34b8:	str	r1, [sp, #48]	; 0x30
    34ba:	ldr	r2, [pc, #464]	; (368c <storeData(short)+0x22c>)
    34bc:	mov	r1, r0
    34be:	mov	r0, sp
    34c0:	bl	679a <ExFatFile::open(ExFatVolume*, char const*, int)>
    34c4:	b.n	348c <storeData(short)+0x2c>
    34c6:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    34c8:	ldr	r2, [pc, #448]	; (368c <storeData(short)+0x22c>)
    34ca:	add.w	r1, r1, #1096	; 0x448
    34ce:	mov	r0, sp
    34d0:	str	r3, [sp, #0]
    34d2:	movs	r3, #1
    34d4:	bl	7e24 <FatFile::mkdir(FatFile*, char const*, bool)>
    34d8:	cbnz	r0, 34e8 <storeData(short)+0x88>
    34da:	ldr	r1, [pc, #440]	; (3694 <storeData(short)+0x234>)
            if(file) 
            { status = OPENED; 
              //msc_activate(false);
            }
            else 
            {   Serial.println("Failing open file");
    34dc:	ldr	r0, [pc, #440]	; (3698 <storeData(short)+0x238>)
    34de:	bl	2f36 <Print::println(char const*) [clone .isra.0]>
                return STOPPED; 
            }
        } 
        else
        {   //msc_activate(true);
            return STOPPED; // if file open fails: don't do anything
    34e2:	mov.w	r4, #4294967295
    34e6:	b.n	3616 <storeData(short)+0x1b6>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    34e8:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    34ea:	ldr.w	r0, [r3, #1152]	; 0x480
    34ee:	cbz	r0, 34fc <storeData(short)+0x9c>
    34f0:	ldr	r1, [pc, #408]	; (368c <storeData(short)+0x22c>)
    34f2:	bl	867c <FatVolume::chdir(char const*)>
    34f6:	cbnz	r0, 350c <storeData(short)+0xac>
    34f8:	ldr	r1, [pc, #416]	; (369c <storeData(short)+0x23c>)
    34fa:	b.n	34dc <storeData(short)+0x7c>
    34fc:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    3500:	cmp	r0, #0
    3502:	beq.n	34f8 <storeData(short)+0x98>
    3504:	ldr	r1, [pc, #388]	; (368c <storeData(short)+0x22c>)
    3506:	bl	6be4 <ExFatVolume::chdir(char const*)>
    350a:	b.n	34f6 <storeData(short)+0x96>
        if(newFileName(fileName))
    350c:	ldr	r0, [pc, #400]	; (36a0 <storeData(short)+0x240>)
    350e:	bl	33e4 <newFileName(char*)>
    3512:	cmp	r0, #0
    3514:	beq.n	34e2 <storeData(short)+0x82>
    3516:	ldr	r3, [pc, #396]	; (36a4 <storeData(short)+0x244>)
            file = sd->open(fileName, FILE_WRITE); 
    3518:	mov	r0, sp
    351a:	ldr	r1, [pc, #372]	; (3690 <storeData(short)+0x230>)
    351c:	ldr	r2, [pc, #384]	; (36a0 <storeData(short)+0x240>)
    351e:	ldr	r3, [r3, #0]
    3520:	movw	r3, #16898	; 0x4202
    3524:	ldr	r1, [r1, #0]
    3526:	bl	900c <FsVolume::open(char const*, int)>
class Print
    352a:	ldr	r4, [pc, #380]	; (36a8 <storeData(short)+0x248>)
    352c:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    352e:	add	r1, sp, #16
    3530:	add.w	r0, r4, #16
    3534:	str	r3, [r4, #4]
    3536:	ldr	r3, [sp, #8]
    3538:	str	r3, [r4, #8]
    353a:	ldrb.w	r3, [sp, #12]
    353e:	strb	r3, [r4, #12]
    3540:	bl	8e02 <FsBaseFile::operator=(FsBaseFile const&)>
    3544:	mov	r0, sp
    3546:	bl	f88 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    354a:	ldr	r3, [r4, #72]	; 0x48
    354c:	cbz	r3, 3568 <storeData(short)+0x108>
        }
    }
    //
    if(status==OPENED) // file is open: write first record (header)
    {   nbuf=0;
    354e:	ldr	r3, [pc, #348]	; (36ac <storeData(short)+0x24c>)
    3550:	movs	r2, #0
    3552:	str	r2, [r3, #0]
        char *hdr=0;
        if(proc==0)
    3554:	ldr	r3, [pc, #344]	; (36b0 <storeData(short)+0x250>)
    3556:	ldrh	r4, [r3, #0]
    3558:	sxth	r4, r4
    355a:	cmp	r4, #0
    355c:	beq.n	361c <storeData(short)+0x1bc>
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
          num_bytes = 0; // reset byte counter for data
        }  
        else
        {
          makeHeader(fileHeader);
    355e:	ldr	r0, [pc, #340]	; (36b4 <storeData(short)+0x254>)
    3560:	bl	3284 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    3564:	ldr	r1, [pc, #332]	; (36b4 <storeData(short)+0x254>)
    3566:	b.n	3632 <storeData(short)+0x1d2>
    3568:	ldr	r3, [r4, #76]	; 0x4c
    356a:	cmp	r3, #0
    356c:	bne.n	354e <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    356e:	ldr	r1, [pc, #328]	; (36b8 <storeData(short)+0x258>)
    3570:	b.n	34dc <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    3572:	cmp	r0, #1
    3574:	beq.n	354e <storeData(short)+0xee>
        { status = DOCLOSE;
        }
        else status=RUNNING;
    }
    //
    if((status==RUNNING) || (status==DOCLOSE) || (status==MUSTSTOP))
    3576:	subs	r3, r4, #2
    3578:	uxth	r3, r3
    357a:	cmp	r3, #1
    357c:	bls.n	3582 <storeData(short)+0x122>
    357e:	cmp	r4, #5
    3580:	bne.n	35d2 <storeData(short)+0x172>
    { // file is open and header written: store data records  
      uint32_t nd;
        if((nd=file.write((const uint8_t*)diskBuffer,4*nout_dat)) < 4*nout_dat) 
    3582:	ldr	r6, [pc, #312]	; (36bc <storeData(short)+0x25c>)
    return BaseFile::write(buffer, size);
    3584:	ldr	r1, [pc, #312]	; (36c0 <storeData(short)+0x260>)
    3586:	ldr	r2, [r6, #0]
    3588:	ldr	r0, [pc, #312]	; (36c4 <storeData(short)+0x264>)
    358a:	lsls	r2, r2, #2
    358c:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
    3590:	ldr	r3, [r6, #0]
    3592:	mov	r5, r0
    3594:	cmp.w	r0, r3, lsl #2
    3598:	mov.w	r1, r3, lsl #2
    359c:	bcs.n	3648 <storeData(short)+0x1e8>
	size_t print(const char s[])			{ return write(s); }
    359e:	ldr	r1, [pc, #296]	; (36c8 <storeData(short)+0x268>)
    35a0:	ldr	r0, [pc, #244]	; (3698 <storeData(short)+0x238>)
    35a2:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    35a6:	movs	r3, #0
    35a8:	movs	r2, #10
    35aa:	mov	r1, r5
    35ac:	ldr	r0, [pc, #232]	; (3698 <storeData(short)+0x238>)
    35ae:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    35b2:	ldr	r1, [pc, #280]	; (36cc <storeData(short)+0x26c>)
    35b4:	ldr	r0, [pc, #224]	; (3698 <storeData(short)+0x238>)
    35b6:	bl	2f12 <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    35ba:	mov	r1, r4
    35bc:	ldr	r0, [pc, #216]	; (3698 <storeData(short)+0x238>)
        { Serial.print(">"); 
          Serial.print(nd); 
          Serial.print(" "); 
          Serial.println(status); 
          status=DOCLOSE; 
    35be:	movs	r4, #3
    35c0:	bl	cdce <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    35c4:	ldr	r0, [pc, #208]	; (3698 <storeData(short)+0x238>)
    35c6:	bl	cde0 <Print::println()>
          num_bytes += 4*nout_dat;
          nbuf++;
          if((nbuf % 1000)==0 ) file.flush();
        }
        //
        disk_count++;
    35ca:	ldr	r2, [pc, #260]	; (36d0 <storeData(short)+0x270>)
    35cc:	ldr	r3, [r2, #0]
    35ce:	adds	r3, #1
    35d0:	str	r3, [r2, #0]
    }    

    // following is done independent of data availability
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) 
    35d2:	subs	r3, r4, #3
    35d4:	uxth	r3, r3
    35d6:	cmp	r3, #2
    35d8:	bhi.n	3616 <storeData(short)+0x1b6>
    35da:	ldr	r3, [pc, #204]	; (36a8 <storeData(short)+0x248>)
    35dc:	ldr	r2, [r3, #72]	; 0x48
    35de:	cbnz	r2, 35e4 <storeData(short)+0x184>
    35e0:	ldr	r3, [r3, #76]	; 0x4c
    35e2:	cbz	r3, 35fe <storeData(short)+0x19e>
    {   // should close file or stop acquisition
        // first close file
        if(file)
        {   if(proc==0)
    35e4:	ldr	r3, [pc, #200]	; (36b0 <storeData(short)+0x250>)
    35e6:	ldrh	r3, [r3, #0]
    35e8:	sxth	r3, r3
    35ea:	cbnz	r3, 35f8 <storeData(short)+0x198>
            {
              char *hdr = wavHeaderUpdate(num_bytes);
    35ec:	ldr	r3, [pc, #228]	; (36d4 <storeData(short)+0x274>)
    35ee:	ldr	r0, [r3, #0]
    35f0:	bl	3210 <wavHeaderUpdate(long)>
              wavHeaderWrite(hdr);
    35f4:	bl	3224 <wavHeaderWrite(char*)>
            }
            //
            file.close();
    35f8:	ldr	r0, [pc, #200]	; (36c4 <storeData(short)+0x264>)
    35fa:	bl	8dd8 <FsBaseFile::close()>
        }

        if(status==DOHIBERNATE)
    35fe:	cmp	r4, #4
    3600:	bne.n	3670 <storeData(short)+0x210>
        {   // shutdown acq board
          filing_exit();
    3602:	bl	308c <filing_exit()>
          adc_exit();
    3606:	bl	3d50 <adc_exit()>
            //adcReset();
            //acqPower(LOW);
            digitalWrite(LED,LOW);
    360a:	movs	r1, #0
    360c:	movs	r0, #13
    360e:	bl	c574 <digitalWrite>
            do_hibernate();
    3612:	bl	127a8 <___Z12do_hibernatev_veneer>
          digitalWrite(LED,LOW);
          status=STOPPED;
        }
    }
    return status;
}
    3616:	mov	r0, r4
    3618:	add	sp, #80	; 0x50
    361a:	pop	{r4, r5, r6, pc}
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    361c:	ldr	r3, [pc, #184]	; (36d8 <storeData(short)+0x278>)
    361e:	movs	r1, #4
    3620:	movs	r2, #32
    3622:	ldr	r0, [r3, #0]
    3624:	ldr	r3, [pc, #180]	; (36dc <storeData(short)+0x27c>)
    3626:	ldr	r3, [r3, #0]
    3628:	bl	3188 <wavHeaderInit(long, long, long, int)>
          num_bytes = 0; // reset byte counter for data
    362c:	ldr	r3, [pc, #164]	; (36d4 <storeData(short)+0x274>)
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    362e:	mov	r1, r0
          num_bytes = 0; // reset byte counter for data
    3630:	str	r4, [r3, #0]
    3632:	mov.w	r2, #512	; 0x200
    3636:	ldr	r0, [pc, #140]	; (36c4 <storeData(short)+0x264>)
    3638:	bl	1d8 <FsBaseFile::write(void const*, unsigned int)>
        else status=RUNNING;
    363c:	cmp.w	r0, #512	; 0x200
    3640:	ite	lt
    3642:	movlt	r4, #3
    3644:	movge	r4, #2
    3646:	b.n	3576 <storeData(short)+0x116>
          num_bytes += 4*nout_dat;
    3648:	ldr	r2, [pc, #136]	; (36d4 <storeData(short)+0x274>)
    364a:	ldr	r3, [r2, #0]
    364c:	add	r3, r1
    364e:	str	r3, [r2, #0]
          nbuf++;
    3650:	ldr	r2, [pc, #88]	; (36ac <storeData(short)+0x24c>)
    3652:	ldr	r3, [r2, #0]
    3654:	adds	r3, #1
    3656:	str	r3, [r2, #0]
    3658:	mov.w	r2, #1000	; 0x3e8
    365c:	udiv	r1, r3, r2
    3660:	mls	r3, r2, r1, r3
          if((nbuf % 1000)==0 ) file.flush();
    3664:	cmp	r3, #0
    3666:	bne.n	35ca <storeData(short)+0x16a>
    BaseFile::sync();
    3668:	ldr	r0, [pc, #88]	; (36c4 <storeData(short)+0x264>)
    366a:	bl	2f7e <FsBaseFile::sync()>
  }
    366e:	b.n	35ca <storeData(short)+0x16a>
        else if(status==DOCLOSE)
    3670:	cmp	r4, #3
    3672:	beq.n	3686 <storeData(short)+0x226>
          filing_exit();
    3674:	bl	308c <filing_exit()>
          adc_exit();
    3678:	bl	3d50 <adc_exit()>
          digitalWrite(LED,LOW);
    367c:	movs	r1, #0
    367e:	movs	r0, #13
    3680:	bl	c574 <digitalWrite>
          status=STOPPED;
    3684:	b.n	34e2 <storeData(short)+0x82>
          status=CLOSED;
    3686:	movs	r4, #0
    3688:	b.n	3616 <storeData(short)+0x1b6>
    368a:	nop
    368c:	.word	0x200220ee
    3690:	.word	0x20002238
    3694:	.word	0x20000fdb
    3698:	.word	0x20001c8c
    369c:	.word	0x20000fe7
    36a0:	.word	0x2002213e
    36a4:	.word	0x20021bd0
    36a8:	.word	0x20021414
    36ac:	.word	0x2002148c
    36b0:	.word	0x20021c1c
    36b4:	.word	0x2001ee0c
    36b8:	.word	0x20000ff3
    36bc:	.word	0x20021490
    36c0:	.word	0x20006e0c
    36c4:	.word	0x20021424
    36c8:	.word	0x20001005
    36cc:	.word	0x200013ad
    36d0:	.word	0x200213f4
    36d4:	.word	0x20021494
    36d8:	.word	0x20002230
    36dc:	.word	0x20006e08

000036e0 <estAlarmTime(unsigned long)>:
      - in dail-by-day duty cycle
      - between hourly recording periods
      - in file-by-file duty cycling mode
*/
static uint32_t alarm=0;
uint32_t estAlarmTime(uint32_t secs) { return (secs<alarm)? alarm: secs; } // will be called from do_hibernate
    36e0:	ldr	r3, [pc, #8]	; (36ec <estAlarmTime(unsigned long)+0xc>)
    36e2:	ldr	r3, [r3, #0]
    36e4:	cmp	r0, r3
    36e6:	it	cc
    36e8:	movcc	r0, r3
    36ea:	bx	lr
    36ec:	.word	0x2001f834

000036f0 <checkEndOfFile(short)>:

int16_t checkEndOfFile(int16_t state)
{ 
  static uint32_t dta=0;

  if(state==RUNNING)
    36f0:	cmp	r0, #2
{ 
    36f2:	push	{r3, r4, r5, lr}
    36f4:	mov	r4, r0
  if(state==RUNNING)
    36f6:	bne.w	3814 <checkEndOfFile(short)+0x124>
  { 
    uint32_t tt = rtc_get();
    36fa:	bl	c020 <rtc_get>
    //
    uint32_t dt1 = tt % t_acq;
    36fe:	ldr	r2, [pc, #296]	; (3828 <checkEndOfFile(short)+0x138>)
    uint32_t tt = rtc_get();
    3700:	mov	r3, r0
    uint32_t dt1 = tt % t_acq;
    3702:	ldrh	r1, [r2, #0]
    3704:	uxth	r1, r1
    3706:	udiv	r2, r0, r1
    370a:	mls	r2, r1, r2, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    370e:	ldr	r1, [pc, #284]	; (382c <checkEndOfFile(short)+0x13c>)
    3710:	ldr	r0, [r1, #0]
    dta = dt1;
    3712:	str	r2, [r1, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    3714:	cmp	r2, r0
    3716:	bcs.n	3814 <checkEndOfFile(short)+0x124>
    // if file should be closed
    // check also if we should then hibernate 
    // first using d_0 (we are too early: hibernate after first file)
    if(state == DOCLOSE)                // in case of DOCLOSE check start day
    { 
      uint32_t dd=tt/(24*3600);
    3718:	ldr	r0, [pc, #276]	; (3830 <checkEndOfFile(short)+0x140>)
      if(dd<(uint32_t)(d_0+D_REF))      // we are too early
    371a:	movw	r4, #20000	; 0x4e20
    371e:	ldr	r5, [pc, #276]	; (3834 <checkEndOfFile(short)+0x144>)
      uint32_t dd=tt/(24*3600);
    3720:	udiv	r1, r3, r0
      if(dd<(uint32_t)(d_0+D_REF))      // we are too early
    3724:	ldrh	r2, [r5, #0]
    3726:	sxtah	r2, r4, r2
    372a:	cmp	r1, r2
    372c:	bcc.n	3818 <checkEndOfFile(short)+0x128>
    }
    //
    // then using "d_rep"
    if(state == DOCLOSE)                  // in case of DOCLOSE check dayly protocol
    {
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    372e:	ldr	r2, [pc, #264]	; (3838 <checkEndOfFile(short)+0x148>)
    3730:	ldr	r5, [pc, #264]	; (383c <checkEndOfFile(short)+0x14c>)
    3732:	ldrh	r4, [r2, #0]
    3734:	ldrh	r0, [r5, #0]
    3736:	uxth	r4, r4
    3738:	uxth	r0, r0
    373a:	cmp	r4, r0
    373c:	bls.n	376a <checkEndOfFile(short)+0x7a>
      { int32_t dd = tt/(24*3600);        // today
        uint32_t dd2 = (dd % d_rep); 
    373e:	ldrh	r0, [r2, #0]
        if(dd2>=d_on) 
    3740:	ldrh	r4, [r5, #0]
        uint32_t dd2 = (dd % d_rep); 
    3742:	uxth	r0, r0
        if(dd2>=d_on) 
    3744:	uxth	r4, r4
        uint32_t dd2 = (dd % d_rep); 
    3746:	udiv	r5, r1, r0
    374a:	mls	r0, r0, r5, r1
        if(dd2>=d_on) 
    374e:	cmp	r0, r4
    3750:	bcc.n	376a <checkEndOfFile(short)+0x7a>
        {
          alarm=((dd/d_rep)+1)*d_rep*(24*3600);
    3752:	ldrh	r0, [r2, #0]
    3754:	ldrh	r2, [r2, #0]
    3756:	uxth	r0, r0
    3758:	uxth	r2, r2
    375a:	udiv	r0, r1, r0
    375e:	mla	r2, r0, r2, r2
    3762:	ldr	r0, [pc, #204]	; (3830 <checkEndOfFile(short)+0x140>)
    3764:	muls	r2, r0
    3766:	ldr	r0, [pc, #216]	; (3840 <checkEndOfFile(short)+0x150>)
    3768:	str	r2, [r0, #0]
    //
    // then using "h_x" intervals
    if(state == DOCLOSE)                // in case of DOCLOSE check acquisition periods
    {
      uint32_t dd=tt/(24*3600);         // today
      uint32_t hh=(tt%((24*3600)/3600));
    376a:	movs	r2, #24
      if(hh<h_1)
    376c:	ldr	r4, [pc, #212]	; (3844 <checkEndOfFile(short)+0x154>)
      uint32_t hh=(tt%((24*3600)/3600));
    376e:	udiv	r0, r3, r2
    3772:	mls	r0, r2, r0, r3
      if(hh<h_1)
    3776:	ldrh	r2, [r4, #0]
    3778:	uxth	r2, r2
    377a:	cmp	r0, r2
    377c:	bcs.n	3792 <checkEndOfFile(short)+0xa2>
      {
        alarm=dd*(24*3600)+h_1*3600;
    377e:	ldrh	r2, [r4, #0]
    3780:	mov.w	r5, #3600	; 0xe10
    3784:	uxth	r2, r2
    3786:	muls	r2, r5
    3788:	ldr	r5, [pc, #164]	; (3830 <checkEndOfFile(short)+0x140>)
    378a:	mla	r2, r5, r1, r2
    378e:	ldr	r5, [pc, #176]	; (3840 <checkEndOfFile(short)+0x150>)
    3790:	str	r2, [r5, #0]
        //state=DOHIBERNATE;
      }
      if((hh>=h_2) && (hh < h_3))
    3792:	ldr	r2, [pc, #180]	; (3848 <checkEndOfFile(short)+0x158>)
    3794:	ldrh	r2, [r2, #0]
    3796:	uxth	r2, r2
    3798:	cmp	r0, r2
    379a:	bcc.n	37ba <checkEndOfFile(short)+0xca>
    379c:	ldr	r5, [pc, #172]	; (384c <checkEndOfFile(short)+0x15c>)
    379e:	ldrh	r2, [r5, #0]
    37a0:	uxth	r2, r2
    37a2:	cmp	r0, r2
    37a4:	bcs.n	37ba <checkEndOfFile(short)+0xca>
      {
        alarm=dd*(24*3600)+h_3*3600;
    37a6:	ldrh	r2, [r5, #0]
    37a8:	mov.w	r5, #3600	; 0xe10
    37ac:	uxth	r2, r2
    37ae:	muls	r2, r5
    37b0:	ldr	r5, [pc, #124]	; (3830 <checkEndOfFile(short)+0x140>)
    37b2:	mla	r2, r5, r1, r2
    37b6:	ldr	r5, [pc, #136]	; (3840 <checkEndOfFile(short)+0x150>)
    37b8:	str	r2, [r5, #0]
        //state=DOHIBERNATE;
      }
      if(hh>=h_4)
    37ba:	ldr	r2, [pc, #148]	; (3850 <checkEndOfFile(short)+0x160>)
    37bc:	ldrh	r2, [r2, #0]
    37be:	uxth	r2, r2
    37c0:	cmp	r0, r2
    37c2:	bcc.n	37da <checkEndOfFile(short)+0xea>
      {
        alarm=(dd+1)*(24*3600)+h_1*3600;
    37c4:	ldrh	r0, [r4, #0]
    37c6:	ldr	r2, [pc, #104]	; (3830 <checkEndOfFile(short)+0x140>)
    37c8:	uxth	r0, r0
    37ca:	mla	r2, r1, r2, r2
    37ce:	mov.w	r1, #3600	; 0xe10
    37d2:	mla	r2, r1, r0, r2
    37d6:	ldr	r1, [pc, #104]	; (3840 <checkEndOfFile(short)+0x150>)
    37d8:	str	r2, [r1, #0]
    }
    //
    // finally using "t_rep"
    if(state == DOCLOSE)                  // in case of DOCLOSE
    { 
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    37da:	ldr	r2, [pc, #120]	; (3854 <checkEndOfFile(short)+0x164>)
    37dc:	ldr	r4, [pc, #120]	; (3858 <checkEndOfFile(short)+0x168>)
    37de:	ldrh	r0, [r2, #0]
    37e0:	ldrh	r1, [r4, #0]
    37e2:	uxth	r0, r0
    37e4:	uxth	r1, r1
    37e6:	cmp	r0, r1
    37e8:	bls.n	3812 <checkEndOfFile(short)+0x122>
      { uint32_t dt2 = (tt % t_rep);
    37ea:	ldrh	r1, [r2, #0]
        if(dt2>=t_on) 
    37ec:	ldrh	r0, [r4, #0]
      { uint32_t dt2 = (tt % t_rep);
    37ee:	uxth	r1, r1
        if(dt2>=t_on) 
    37f0:	uxth	r0, r0
      { uint32_t dt2 = (tt % t_rep);
    37f2:	udiv	r4, r3, r1
    37f6:	mls	r1, r1, r4, r3
        if(dt2>=t_on) 
    37fa:	cmp	r1, r0
    37fc:	bcc.n	3812 <checkEndOfFile(short)+0x122>
        {
          alarm=((tt/t_rep)+1)*t_rep;
    37fe:	ldrh	r1, [r2, #0]
    3800:	ldrh	r2, [r2, #0]
    3802:	uxth	r1, r1
    3804:	uxth	r2, r2
    3806:	udiv	r3, r3, r1
    380a:	mla	r2, r3, r2, r2
    380e:	ldr	r3, [pc, #48]	; (3840 <checkEndOfFile(short)+0x150>)
    3810:	str	r2, [r3, #0]
    3812:	movs	r4, #3
        }
      }
    }
  }
  return state;
}
    3814:	mov	r0, r4
    3816:	pop	{r3, r4, r5, pc}
      { alarm=(uint32_t)(d_0+D_REF)*24*3600;
    3818:	ldrh	r2, [r5, #0]
    381a:	sxtah	r2, r4, r2
    381e:	muls	r2, r0
    3820:	ldr	r0, [pc, #28]	; (3840 <checkEndOfFile(short)+0x150>)
    3822:	str	r2, [r0, #0]
    if(state == DOCLOSE)                  // in case of DOCLOSE check dayly protocol
    3824:	b.n	372e <checkEndOfFile(short)+0x3e>
    3826:	nop
    3828:	.word	0x2000224e
    382c:	.word	0x20021298
    3830:	.word	0x00015180
    3834:	.word	0x20021c10
    3838:	.word	0x20021c12
    383c:	.word	0x20002246
    3840:	.word	0x2001f834
    3844:	.word	0x20021c18
    3848:	.word	0x20002248
    384c:	.word	0x2000224a
    3850:	.word	0x2000224c
    3854:	.word	0x20021cc2
    3858:	.word	0x20002250

0000385c <saveData(short)>:
{
    385c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(status==STOPPED) 
    3860:	adds	r3, r0, #1
{
    3862:	mov	r4, r0
    if(status==STOPPED) 
    3864:	bne.n	3886 <saveData(short)+0x2a>
    { pullData((uint32_t*)diskBuffer);
    3866:	ldr	r0, [pc, #324]	; (39ac <saveData(short)+0x150>)
    3868:	bl	2e34 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    386c:	ldr	r2, [pc, #316]	; (39ac <saveData(short)+0x150>)
    386e:	movs	r3, #0
    3870:	ldr	r1, [pc, #316]	; (39b0 <saveData(short)+0x154>)
    3872:	ldr.w	r0, [r2], #4
    3876:	str.w	r0, [r1, r3, lsl #2]
    387a:	adds	r3, #1
    387c:	cmp	r3, #8
    387e:	bne.n	3872 <saveData(short)+0x16>
}
    3880:	mov	r0, r4
    3882:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    3886:	cmp	r0, #0
    3888:	blt.n	3880 <saveData(short)+0x24>
    status=checkEndOfFile(status);
    388a:	bl	36f0 <checkEndOfFile(short)>
    388e:	mov	r4, r0
    if(getDataCount() < NDBL) return status;
    3890:	bl	2dbc <getDataCount()>
    3894:	cmp	r0, #47	; 0x2f
    3896:	bls.n	3880 <saveData(short)+0x24>
    nout_dat=MAX_DISK_BUFFER;
    3898:	mov.w	r3, #24576	; 0x6000
    389c:	ldr	r6, [pc, #276]	; (39b4 <saveData(short)+0x158>)
    389e:	str	r3, [r6, #0]
    if(proc==0)
    38a0:	ldr	r3, [pc, #276]	; (39b8 <saveData(short)+0x15c>)
    38a2:	ldrh	r5, [r3, #0]
    38a4:	sxth	r5, r5
    38a6:	cbnz	r5, 3902 <saveData(short)+0xa6>
    38a8:	ldr	r7, [pc, #256]	; (39ac <saveData(short)+0x150>)
    38aa:	mov	r8, r7
      { while(queue_isBusy()){continue;} //wait if acq writes to queue
    38ac:	bl	2ddc <queue_isBusy()>
    38b0:	mov	r6, r0
    38b2:	cmp	r0, #0
    38b4:	bne.n	38ac <saveData(short)+0x50>
        while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    38b6:	mov	r0, r8
    38b8:	bl	2e34 <pullData(unsigned long*)>
    38bc:	cbz	r0, 38fa <saveData(short)+0x9e>
      for(int ii=0; ii<NDBL; ii++)
    38be:	adds	r5, #1
    38c0:	add.w	r8, r8, #2048	; 0x800
    38c4:	cmp	r5, #48	; 0x30
    38c6:	bne.n	38ac <saveData(short)+0x50>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    38c8:	ldr	r3, [pc, #228]	; (39b0 <saveData(short)+0x154>)
    38ca:	ldr.w	r2, [r7], #4
    38ce:	str.w	r2, [r3, r6, lsl #2]
    38d2:	adds	r6, #1
    38d4:	cmp	r6, #8
    38d6:	bne.n	38ca <saveData(short)+0x6e>
    if(haveStore)
    38d8:	ldr	r3, [pc, #224]	; (39bc <saveData(short)+0x160>)
    38da:	ldr	r3, [r3, #0]
    38dc:	cmp	r3, #0
    38de:	beq.n	3880 <saveData(short)+0x24>
    { digitalWrite(LED,HIGH);
    38e0:	movs	r1, #1
    38e2:	movs	r0, #13
    38e4:	bl	c574 <digitalWrite>
      status=storeData(status);
    38e8:	mov	r0, r4
    38ea:	bl	3460 <storeData(short)>
      digitalWrite(LED,LOW);
    38ee:	movs	r1, #0
      status=storeData(status);
    38f0:	mov	r4, r0
      digitalWrite(LED,LOW);
    38f2:	movs	r0, #13
    38f4:	bl	c574 <digitalWrite>
    38f8:	b.n	3880 <saveData(short)+0x24>
        while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    38fa:	movs	r0, #1
    38fc:	bl	be24 <delay>
    3900:	b.n	38b6 <saveData(short)+0x5a>
      if((status==RUNNING) || (status==CLOSED))
    3902:	bic.w	r5, r4, #2
    3906:	sxth	r5, r5
    3908:	cbz	r5, 395e <saveData(short)+0x102>
      if((status==DOCLOSE) || (status==MUSTSTOP))
    390a:	cmp	r4, #3
    390c:	bne.n	3998 <saveData(short)+0x13c>
        memset(diskBuffer,0,4*MAX_DISK_BUFFER);
    390e:	ldr.w	r8, [pc, #156]	; 39ac <saveData(short)+0x150>
        for(ii=0; ii<NDBL; ii++)
    3912:	movs	r7, #0
          for(int jj=0; jj<NBUF_ACQ-5;jj++) if((dptr[jj]==0xa5a5a5a5)) dindx=jj;
    3914:	movw	r9, #507	; 0x1fb
        memset(diskBuffer,0,4*MAX_DISK_BUFFER);
    3918:	mov.w	r2, #98304	; 0x18000
    391c:	movs	r1, #0
    391e:	ldr	r0, [pc, #140]	; (39ac <saveData(short)+0x150>)
    3920:	bl	a898 <memset>
          while(queue_isBusy()){continue;} //wait if acq writes to queue
    3924:	bl	2ddc <queue_isBusy()>
    3928:	mov	r5, r0
    392a:	cmp	r0, #0
    392c:	bne.n	3924 <saveData(short)+0xc8>
          while(!pullData(dptr)) delay(1);
    392e:	mov	r0, r8
    3930:	bl	2e34 <pullData(unsigned long*)>
    3934:	cbz	r0, 399e <saveData(short)+0x142>
          uint32_t dindx=0;
    3936:	movs	r3, #0
          for(int jj=0; jj<NBUF_ACQ-5;jj++) if((dptr[jj]==0xa5a5a5a5)) dindx=jj;
    3938:	ldr.w	r2, [r8, r5, lsl #2]
    393c:	cmp.w	r2, #2779096485	; 0xa5a5a5a5
    3940:	it	eq
    3942:	moveq	r3, r5
    3944:	adds	r5, #1
    3946:	cmp	r5, r9
    3948:	bne.n	3938 <saveData(short)+0xdc>
          if((dptr[dindx+5]>>16)==0) break; 
    394a:	add.w	r3, r8, r3, lsl #2
        for(ii=0; ii<NDBL; ii++)
    394e:	adds	r7, #1
          if((dptr[dindx+5]>>16)==0) break; 
    3950:	ldrh	r3, [r3, #22]
    3952:	cbz	r3, 39a6 <saveData(short)+0x14a>
        for(ii=0; ii<NDBL; ii++)
    3954:	cmp	r7, #48	; 0x30
    3956:	add.w	r8, r8, #2048	; 0x800
    395a:	bne.n	3924 <saveData(short)+0xc8>
    395c:	b.n	397a <saveData(short)+0x11e>
    395e:	ldr	r6, [pc, #76]	; (39ac <saveData(short)+0x150>)
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3960:	bl	2ddc <queue_isBusy()>
    3964:	cmp	r0, #0
    3966:	bne.n	3960 <saveData(short)+0x104>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    3968:	mov	r0, r6
    396a:	bl	2e34 <pullData(unsigned long*)>
    396e:	cbz	r0, 3990 <saveData(short)+0x134>
        for(int ii=0; ii<NDBL; ii++)
    3970:	adds	r5, #1
    3972:	add.w	r6, r6, #2048	; 0x800
    3976:	cmp	r5, #48	; 0x30
    3978:	bne.n	3960 <saveData(short)+0x104>
    397a:	ldr	r2, [pc, #48]	; (39ac <saveData(short)+0x150>)
          for(int jj=0; jj<NBUF_ACQ-5;jj++) if((dptr[jj]==0xa5a5a5a5)) dindx=jj;
    397c:	movs	r3, #0
      for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    397e:	ldr	r1, [pc, #48]	; (39b0 <saveData(short)+0x154>)
    3980:	ldr.w	r0, [r2], #4
    3984:	str.w	r0, [r1, r3, lsl #2]
    3988:	adds	r3, #1
    398a:	cmp	r3, #8
    398c:	bne.n	3980 <saveData(short)+0x124>
    398e:	b.n	38d8 <saveData(short)+0x7c>
          while(!pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ])) delay(1);
    3990:	movs	r0, #1
    3992:	bl	be24 <delay>
    3996:	b.n	3968 <saveData(short)+0x10c>
      if((status==DOCLOSE) || (status==MUSTSTOP))
    3998:	cmp	r4, #5
    399a:	beq.n	390e <saveData(short)+0xb2>
    399c:	b.n	397a <saveData(short)+0x11e>
          while(!pullData(dptr)) delay(1);
    399e:	movs	r0, #1
    39a0:	bl	be24 <delay>
    39a4:	b.n	392e <saveData(short)+0xd2>
        if(ii<NDBL) nout_dat=(ii+1)*NBUF_ACQ;
    39a6:	lsls	r7, r7, #9
    39a8:	str	r7, [r6, #0]
    39aa:	b.n	397a <saveData(short)+0x11e>
    39ac:	.word	0x20006e0c
    39b0:	.word	0x20021464
    39b4:	.word	0x20021490
    39b8:	.word	0x20021c1c
    39bc:	.word	0x20021248

000039c0 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    39c0:	ldr	r0, [pc, #28]	; (39e0 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    39c2:	movs	r3, #0
    39c4:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    39c8:	ldr	r1, [pc, #24]	; (39e4 <_GLOBAL__sub_I_t_acq+0x24>)
    39ca:	strb	r3, [r0, #12]
    39cc:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    39d0:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    39d4:	ldr	r3, [pc, #16]	; (39e8 <_GLOBAL__sub_I_t_acq+0x28>)
    39d6:	ldr	r2, [pc, #20]	; (39ec <_GLOBAL__sub_I_t_acq+0x2c>)
    39d8:	str	r3, [r0, #0]
    39da:	b.w	d008 <__aeabi_atexit>
    39de:	nop
    39e0:	.word	0x20021414
    39e4:	.word	0x00000f89
    39e8:	.word	0x200004f4
    39ec:	.word	0x20002064

000039f0 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    39f0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39f4:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    39f6:	bl	c020 <rtc_get>
    39fa:	mov	r9, r0
  uint32_t t1;
  t1 = micros();
    39fc:	bl	bdd8 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy first sample 
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
    3a00:	ldr	r3, [pc, #652]	; (3c90 <compress(void*)+0x2a0>)
  t1 = micros();
    3a02:	mov	sl, r0
  for (int  ii = 0; ii < NCHAN_ACQ; ii++) tempDatai[ii] = din[ii];
    3a04:	movs	r2, #0
    3a06:	ldr	r3, [r3, #0]
    3a08:	ldr.w	r1, [r4, r2, lsl #2]
    3a0c:	str.w	r1, [r3, r2, lsl #2]
    3a10:	adds	r2, #1
    3a12:	cmp	r2, #4
    3a14:	bne.n	3a08 <compress(void*)+0x18>
    3a16:	add.w	r2, r3, #12
    3a1a:	subs	r1, r4, #4
    3a1c:	addw	r4, r4, #2028	; 0x7ec
    3a20:	mov	r5, r2
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] =  din[ii] - din[ii - NCHAN_ACQ];
    3a22:	ldr	r0, [r1, #20]
    3a24:	ldr.w	r6, [r1, #4]!
    3a28:	subs	r0, r0, r6
    3a2a:	cmp	r1, r4
    3a2c:	str.w	r0, [r5, #4]!
    3a30:	bne.n	3a22 <compress(void*)+0x32>
    3a32:	addw	r3, r3, #2044	; 0x7fc

  // find maximum in filtered data 
  int32_t mx = 0;
    3a36:	movs	r1, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    3a38:	ldr.w	r0, [r2, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3a3c:	cmp	r0, #0
    3a3e:	it	lt
    3a40:	neglt	r0, r0
    3a42:	cmp	r1, r0
    3a44:	it	lt
    3a46:	movlt	r1, r0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    3a48:	cmp	r2, r3
    3a4a:	bne.n	3a38 <compress(void*)+0x48>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3a4c:	movs	r4, #2
    3a4e:	movs	r2, #1
    3a50:	subs	r3, r4, #1
    3a52:	lsl.w	r3, r2, r3
    3a56:	cmp	r3, r1
    3a58:	bgt.n	3a60 <compress(void*)+0x70>
    3a5a:	adds	r4, #1
    3a5c:	cmp	r4, #24
    3a5e:	bne.n	3a50 <compress(void*)+0x60>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    3a60:	ldr	r2, [pc, #560]	; (3c94 <compress(void*)+0x2a4>)
    3a62:	subs	r1, r4, #1
  if((uint32_t)nb>max_stat) max_stat=nb;

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3a64:	mov.w	r8, #508	; 0x1fc
  proc_stat[nb-1]++;
    3a68:	ldr.w	r3, [r2, r1, lsl #2]
    3a6c:	adds	r3, #1
    3a6e:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    3a72:	ldr	r3, [pc, #548]	; (3c98 <compress(void*)+0x2a8>)
    3a74:	ldr	r2, [r3, #0]
    3a76:	cmp	r4, r2
    3a78:	ldr	r2, [pc, #544]	; (3c9c <compress(void*)+0x2ac>)
    3a7a:	it	hi
    3a7c:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    3a7e:	movs	r3, #1
    3a80:	lsls	r3, r4
    3a82:	subs	r3, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    3a84:	ldr.w	r1, [r2, #4]!
    3a88:	subs.w	r8, r8, #1
    3a8c:	and.w	r1, r1, r3
    3a90:	str	r1, [r2, #0]
    3a92:	bne.n	3a84 <compress(void*)+0x94>
  // pack all data
  int ncmp = (NBUF_ACQ*nb) / MBIT;
  int ndat = NH + NCHAN_ACQ + ncmp;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3a94:	ldr	r5, [pc, #520]	; (3ca0 <compress(void*)+0x2b0>)
    3a96:	mov.w	r2, #512	; 0x200
    3a9a:	mov	r1, r8
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    3a9c:	lsls	r7, r4, #4
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3a9e:	mov	r0, r5
    3aa0:	bl	a898 <memset>

  // prepare header
  outData[0] = 0xA5A5A5A5;
    3aa4:	mov.w	r3, #2779096485	; 0xa5a5a5a5
  outData[3] = t1;
  outData[4] = NCHAN_ACQ;
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3aa8:	ldr	r1, [pc, #504]	; (3ca4 <compress(void*)+0x2b4>)
  int ndat = NH + NCHAN_ACQ + ncmp;
    3aaa:	add.w	r6, r7, #10
  outData[0] = 0xA5A5A5A5;
    3aae:	str	r3, [r5, #0]
  #endif
  #if NCHAN_ACQ>2
    outData[kk++] = tempData[2]; tempData[2] = 0;
  #endif
  #if NCHAN_ACQ>3
    outData[kk++] = tempData[3]; tempData[3] = 0;
    3ab0:	movs	r0, #10
  outData[1] = nb | shift<<16;
    3ab2:	ldr	r3, [pc, #500]	; (3ca8 <compress(void*)+0x2b8>)
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3ab4:	ldr	r2, [r1, #0]
  outData[1] = nb | shift<<16;
    3ab6:	ldrh	r3, [r3, #0]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3ab8:	str	r2, [r5, #24]
  outData[1] = nb | shift<<16;
    3aba:	orr.w	r3, r4, r3, lsl #16
    outData[kk++] = tempData[1]; tempData[1] = 0;
    3abe:	ldr	r2, [r1, #4]
  outData[3] = t1;
    3ac0:	str.w	sl, [r5, #12]
    outData[kk++] = tempData[1]; tempData[1] = 0;
    3ac4:	str	r2, [r5, #28]
    outData[kk++] = tempData[2]; tempData[2] = 0;
    3ac6:	ldr	r2, [r1, #8]
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3ac8:	str.w	r8, [r1]
    outData[kk++] = tempData[2]; tempData[2] = 0;
    3acc:	str	r2, [r5, #32]
    outData[kk++] = tempData[3]; tempData[3] = 0;
    3ace:	ldr	r2, [r1, #12]
    outData[kk++] = tempData[1]; tempData[1] = 0;
    3ad0:	str.w	r8, [r1, #4]
    outData[kk++] = tempData[2]; tempData[2] = 0;
    3ad4:	str.w	r8, [r1, #8]
    outData[kk++] = tempData[3]; tempData[3] = 0;
    3ad8:	str	r2, [r5, #36]	; 0x24
    3ada:	str.w	r8, [r1, #12]
  outData[2] = to;
    3ade:	strd	r3, r9, [r5, #4]
  outData[4] = NCHAN_ACQ;
    3ae2:	movs	r3, #4
    3ae4:	str	r3, [r5, #16]
  outData[5] = NCHAN_ACQ+ncmp; // number of data after header
    3ae6:	adds	r3, r7, r3
    3ae8:	str	r3, [r5, #20]
    #error "NCH>8"
  #endif

  // pack data
  // 
  int nx = MBIT;
    3aea:	movs	r3, #32
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
  {   nx -= nb;
    3aec:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3af0:	ldr.w	r9, [r5, r0, lsl #2]
    3af4:	ldr.w	r2, [r1], #4
      if(nx > 0)
    3af8:	cmp.w	lr, #0
    3afc:	ble.n	3b5a <compress(void*)+0x16a>
      {   outData[kk] |= (tempData[ii] << nx);
    3afe:	lsl.w	r2, r2, lr
    3b02:	mov	r3, lr
    3b04:	orr.w	r2, r2, r9
    3b08:	str.w	r2, [r5, r0, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3b0c:	add.w	r8, r8, #1
    3b10:	cmp.w	r8, #512	; 0x200
    3b14:	bne.n	3aec <compress(void*)+0xfc>
          nx += MBIT;
          outData[kk] = (tempData[ii] << nx);
      }
  }
  // kk should be NH+NCHAN_ACQ+ncmp
  if(kk !=(NH+NCHAN_ACQ+ncmp)) Serial.println("compress error");
    3b16:	cmp	r0, r6
    3b18:	beq.n	3b28 <compress(void*)+0x138>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3b1a:	movs	r1, #14
    3b1c:	ldr	r0, [pc, #396]	; (3cac <compress(void*)+0x2bc>)
    3b1e:	bl	ae58 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3b22:	ldr	r0, [pc, #396]	; (3cb0 <compress(void*)+0x2c0>)
    3b24:	bl	cde0 <Print::println()>
  //------------------------------- Compression done -------------------------------
  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3b28:	ldr.w	r8, [pc, #396]	; 3cb8 <compress(void*)+0x2c8>
    3b2c:	ldr.w	r4, [r8]
    3b30:	adds	r3, r4, r6
    3b32:	cmp.w	r3, #512	; 0x200
    3b36:	bgt.n	3b8a <compress(void*)+0x19a>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3b38:	ldr	r0, [pc, #376]	; (3cb4 <compress(void*)+0x2c4>)
  int ret=1;
    3b3a:	mov.w	r9, #1
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3b3e:	lsls	r2, r6, #2
    3b40:	ldr	r1, [pc, #348]	; (3ca0 <compress(void*)+0x2b0>)
    3b42:	add.w	r0, r0, r4, lsl #2
    3b46:	adds	r4, #10
    3b48:	bl	a8dc <memcpy>
    3b4c:	add	r4, r7
    3b4e:	str.w	r4, [r8]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    3b52:	mov	r0, r9
    3b54:	add	sp, #12
    3b56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3b5a:	add.w	ip, r0, #1
      else if(nx==0) 
    3b5e:	bne.n	3b6e <compress(void*)+0x17e>
      {   outData[kk++] |= tempData[ii];
    3b60:	orr.w	r2, r9, r2
          nx=MBIT;
    3b64:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3b66:	str.w	r2, [r5, r0, lsl #2]
    3b6a:	mov	r0, ip
    3b6c:	b.n	3b0c <compress(void*)+0x11c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3b6e:	subs	r3, r4, r3
    3b70:	lsr.w	r3, r2, r3
    3b74:	orr.w	r3, r3, r9
    3b78:	str.w	r3, [r5, r0, lsl #2]
          nx += MBIT;
    3b7c:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    3b80:	mov	r0, ip
          outData[kk] = (tempData[ii] << nx);
    3b82:	lsls	r2, r3
    3b84:	str.w	r2, [r5, ip, lsl #2]
    3b88:	b.n	3b0c <compress(void*)+0x11c>
  else if ((nout + NH) >= NBUF_OUT) //avoid partial or only header (special case)
    3b8a:	cmp.w	r4, #506	; 0x1fa
    3b8e:	blt.n	3bde <compress(void*)+0x1ee>
    3b90:	movs	r2, #0
    3b92:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3b94:	ldr	r1, [pc, #284]	; (3cb4 <compress(void*)+0x2c4>)
    3b96:	mov	r0, r2
    3b98:	cmp.w	r3, #512	; 0x200
    3b9c:	bcc.n	3bd4 <compress(void*)+0x1e4>
    3b9e:	cmp.w	r4, #512	; 0x200
    3ba2:	rsb	r3, r4, #512	; 0x200
    3ba6:	it	gt
    3ba8:	movgt	r3, #0
    3baa:	add	r3, r4
    3bac:	cbz	r2, 3bb2 <compress(void*)+0x1c2>
    3bae:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    3bb2:	ldr	r0, [pc, #256]	; (3cb4 <compress(void*)+0x2c4>)
    3bb4:	bl	2de8 <pushData(unsigned long*)>
    3bb8:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3bbc:	mov.w	r2, r6, lsl #2
    3bc0:	ldr	r1, [pc, #220]	; (3ca0 <compress(void*)+0x2b0>)
    3bc2:	ldr	r0, [pc, #240]	; (3cb4 <compress(void*)+0x2c4>)
      if(!pushData(dout)) ret = 0;
    3bc4:	it	ne
    3bc6:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3bca:	bl	a8dc <memcpy>
    3bce:	str.w	r6, [r8]
    3bd2:	b.n	3b52 <compress(void*)+0x162>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3bd4:	str.w	r0, [r1, r3, lsl #2]
    3bd8:	movs	r2, #1
    3bda:	adds	r3, #1
    3bdc:	b.n	3b98 <compress(void*)+0x1a8>
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3bde:	ldr	r2, [r5, #20]
    3be0:	rsb	r3, r4, #506	; 0x1fa
    3be4:	ldr	r1, [pc, #184]	; (3ca0 <compress(void*)+0x2b0>)
    3be6:	orr.w	r3, r3, r2, lsl #16
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3bea:	ldr	r2, [pc, #200]	; (3cb4 <compress(void*)+0x2c4>)
      outData[5] = (outData[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3bec:	mov	r0, r1
    3bee:	str	r3, [r5, #20]
    3bf0:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3bf2:	ldr.w	ip, [r0], #4
    3bf6:	str.w	ip, [r2, r3, lsl #2]
    3bfa:	adds	r3, #1
    3bfc:	cmp.w	r3, #512	; 0x200
    3c00:	bne.n	3bf2 <compress(void*)+0x202>
      if(!pushData(dout)) ret = 0;
    3c02:	ldr	r0, [pc, #176]	; (3cb4 <compress(void*)+0x2c4>)
    3c04:	rsb	sl, r4, #512	; 0x200
    3c08:	str	r1, [sp, #4]
    3c0a:	str.w	r3, [r8]
    3c0e:	bl	2de8 <pushData(unsigned long*)>
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3c12:	ldr	r3, [r5, #20]
      if(!pushData(dout)) ret = 0;
    3c14:	subs.w	r9, r0, #0
      nr=ndat-ii; // for header
    3c18:	sub.w	r0, r6, sl
    3c1c:	ldr.w	ip, [pc, #148]	; 3cb4 <compress(void*)+0x2c4>
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3c20:	mov.w	r3, r3, lsr #16
    3c24:	mov	fp, sl
      if(!pushData(dout)) ret = 0;
    3c26:	it	ne
    3c28:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c2c:	ldr	r1, [sp, #4]
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3c2e:	lsls	r3, r3, #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c30:	mov	r2, ip
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3c32:	orrs	r3, r0
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c34:	movs	r0, #7
      outData[5]=(outData[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3c36:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c38:	movs	r3, #0
    3c3a:	str.w	r3, [r8]
    3c3e:	subs	r0, #1
    3c40:	bne.n	3c72 <compress(void*)+0x282>
    3c42:	cbz	r3, 3c4a <compress(void*)+0x25a>
    3c44:	movs	r3, #6
    3c46:	str.w	r3, [r8]
    3c4a:	ldr.w	r1, [r8]
    3c4e:	movs	r3, #0
    3c50:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3c54:	cmp	sl, r6
    3c56:	blt.n	3c7e <compress(void*)+0x28e>
    3c58:	sub.w	r4, r4, #502	; 0x1f6
    3c5c:	add	r4, r7
    3c5e:	cmp	r6, fp
    3c60:	it	lt
    3c62:	movlt	r4, #0
    3c64:	add	r4, r1
    3c66:	cmp	r3, #0
    3c68:	beq.w	3b52 <compress(void*)+0x162>
    3c6c:	str.w	r4, [r8]
  return ret;
    3c70:	b.n	3b52 <compress(void*)+0x162>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3c72:	ldr.w	r3, [r1], #4
    3c76:	str.w	r3, [ip], #4
    3c7a:	movs	r3, #1
    3c7c:	b.n	3c3e <compress(void*)+0x24e>
      while (ii < ndat) dout[nout++] = outData[ii++];
    3c7e:	ldr.w	r3, [r5, sl, lsl #2]
    3c82:	add.w	sl, sl, #1
    3c86:	str.w	r3, [r2], #4
    3c8a:	movs	r3, #1
    3c8c:	b.n	3c54 <compress(void*)+0x264>
    3c8e:	nop
    3c90:	.word	0x20002240
    3c94:	.word	0x200214b8
    3c98:	.word	0x20021484
    3c9c:	.word	0x20020254
    3ca0:	.word	0x2001f844
    3ca4:	.word	0x20020248
    3ca8:	.word	0x20021cc0
    3cac:	.word	0x20000ed2
    3cb0:	.word	0x20001c8c
    3cb4:	.word	0x2001f02c
    3cb8:	.word	0x200212a4

00003cbc <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    3cbc:	push	{r0, r1, r4, lr}
    3cbe:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3cc0:	cbz	r1, 3cdc <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    3cc2:	mov	r0, r1
    3cc4:	str	r1, [sp, #4]
    3cc6:	bl	f490 <strlen>
    3cca:	ldr	r3, [r4, #0]
    3ccc:	mov	r2, r0
    3cce:	ldr	r1, [sp, #4]
    3cd0:	ldr	r3, [r3, #4]
    3cd2:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    3cd4:	add	sp, #8
    3cd6:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    3cda:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    3cdc:	add	sp, #8
    3cde:	pop	{r4, pc}

00003ce0 <usbPowerInit()>:
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    // use usb host 5V power (has 100uF capacitor)
    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    3ce0:	ldr	r3, [pc, #24]	; (3cfc <usbPowerInit()+0x1c>)
    3ce2:	movs	r2, #5
    3ce4:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    3ce8:	movs	r2, #8
    3cea:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    3cee:	ldr	r2, [pc, #16]	; (3d00 <usbPowerInit()+0x20>)
    3cf0:	ldr	r3, [r2, #4]
    3cf2:	orr.w	r3, r3, #67108864	; 0x4000000
    3cf6:	str	r3, [r2, #4]
    }
    3cf8:	bx	lr
    3cfa:	nop
    3cfc:	.word	0x401f8000
    3d00:	.word	0x42008000

00003d04 <usbPowerSetup()>:
    }
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
    void usbPowerOff() { GPIO8_DR_CLEAR = 1<<26; }

    void usbPowerSetup(void)
    {
    3d04:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    3d06:	bl	3ce0 <usbPowerInit()>
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
    3d0a:	ldr	r3, [pc, #20]	; (3d20 <usbPowerSetup()+0x1c>)
    3d0c:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(100);
    3d10:	movs	r0, #100	; 0x64
    void usbPowerOn()  { GPIO8_DR_SET = 1<<26; }
    3d12:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    3d16:	ldmia.w	sp!, {r3, lr}
        delay(100);
    3d1a:	b.w	be24 <delay>
    3d1e:	nop
    3d20:	.word	0x42008000

00003d24 <acqPower(int)>:

    // enable ADC board LDO
    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3d24:	uxtb	r1, r0
    3d26:	movs	r0, #2
    {   
    3d28:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    3d2a:	bl	c574 <digitalWrite>
            delay(100);
    3d2e:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3d30:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3d34:	b.w	be24 <delay>

00003d38 <hpPower(int)>:

    // enable ADC board LDO
    void hpPower(int flag)
    {
      #if HP_ON>0
        digitalWrite(HP_ON,flag);
    3d38:	uxtb	r1, r0
    3d3a:	movs	r0, #4
    3d3c:	b.w	c574 <digitalWrite>

00003d40 <adcReset()>:
      #endif
    }

    // handle ADC shutdown pin
    void adcReset(void) { digitalWrite(ADC_SHDNZ,LOW);}
    3d40:	movs	r1, #0
    3d42:	movs	r0, #3
    3d44:	b.w	c574 <digitalWrite>

00003d48 <adcStart()>:
    void adcStart(void) { digitalWrite(ADC_SHDNZ,HIGH);}
    3d48:	movs	r1, #1
    3d4a:	movs	r0, #3
    3d4c:	b.w	c574 <digitalWrite>

00003d50 <adc_exit()>:

    void adc_exit(void)
    {
    3d50:	push	{r3, lr}
        // reset ADC's 
        adcReset();
    3d52:	bl	3d40 <adcReset()>
        acqPower(LOW);
    3d56:	movs	r0, #0
    3d58:	bl	3d24 <acqPower(int)>
        
        hpPower(LOW);
    3d5c:	movs	r0, #0
    3d5e:	bl	3d38 <hpPower(int)>
    void usbPowerOff() { GPIO8_DR_CLEAR = 1<<26; }
    3d62:	ldr	r3, [pc, #12]	; (3d70 <adc_exit()+0x20>)
    3d64:	mov.w	r2, #67108864	; 0x4000000
    3d68:	str.w	r2, [r3, #136]	; 0x88
        usbPowerOff();
        usbPowerExit();
    }
    3d6c:	pop	{r3, pc}
    3d6e:	nop
    3d70:	.word	0x42008000

00003d74 <adc_init()>:

    // initialize ADC
    void adc_init(void)
    {
    3d74:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
      usbPowerSetup();
    3d78:	bl	3d04 <usbPowerSetup()>
        #if defined(ADC_EN) 
          pinMode(ADC_EN,OUTPUT);
    3d7c:	movs	r1, #1
    3d7e:	movs	r0, #2
    3d80:	bl	c5b4 <pinMode>
          acqPower(HIGH);
    3d84:	movs	r0, #1
    3d86:	bl	3d24 <acqPower(int)>
        #endif

        // preamp
        #if HP_ON>0
          pinMode(HP_ON,OUTPUT);
    3d8a:	movs	r1, #1
    3d8c:	movs	r0, #4
    3d8e:	bl	c5b4 <pinMode>
          hpPower(HIGH);
    3d92:	movs	r0, #1
    3d94:	bl	3d38 <hpPower(int)>
        #endif

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    3d98:	movs	r1, #1
    3d9a:	movs	r0, #3
    3d9c:	bl	c5b4 <pinMode>
        adcReset();
    3da0:	bl	3d40 <adcReset()>
        delay(100);
    3da4:	movs	r0, #100	; 0x64
    3da6:	bl	be24 <delay>
        adcStart();
    3daa:	bl	3d48 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    3dae:	ldr	r2, [pc, #344]	; (3f08 <adc_init()+0x194>)
    3db0:	ldr	r1, [pc, #344]	; (3f0c <adc_init()+0x198>)
    3db2:	add	r0, sp, #4
    3db4:	bl	3fd8 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    3db8:	movs	r1, #76	; 0x4c
    3dba:	add	r0, sp, #4
    3dbc:	bl	3ffc <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3dc0:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    3dc2:	cmp	r0, #0
    3dc4:	beq.w	3ef8 <adc_init()+0x184>
                Serial.printf("found %x\n",i2c_addr[ii]);
    3dc8:	ldr	r1, [pc, #324]	; (3f10 <adc_init()+0x19c>)
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]); continue;}

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3dca:	movs	r4, #11
                Serial.printf("found %x\n",i2c_addr[ii]);
    3dcc:	ldr	r0, [pc, #324]	; (3f14 <adc_init()+0x1a0>)
    3dce:	bl	ce18 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    3dd2:	movs	r3, #129	; 0x81
    3dd4:	movs	r2, #2
    3dd6:	movs	r1, #76	; 0x4c
    3dd8:	add	r0, sp, #4
    3dda:	ldr	r5, [pc, #316]	; (3f18 <adc_init()+0x1a4>)
    3ddc:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    3de0:	movs	r3, #48	; 0x30
    3de2:	movs	r2, #7
    3de4:	movs	r1, #76	; 0x4c
    3de6:	add	r0, sp, #4
    3de8:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    3dec:	movs	r3, #0
    3dee:	movs	r2, #8
    3df0:	movs	r1, #76	; 0x4c
    3df2:	add	r0, sp, #4
    3df4:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3df8:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    3dfa:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3dfc:	ldrb.w	r3, [r5], #1
    3e00:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    3e02:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3e04:	add	r0, sp, #4
    3e06:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    3e0a:	cmp	r4, #15
    3e0c:	bne.n	3df8 <adc_init()+0x84>
            }
            //
            //Enable Input Ch-1 to Ch-8 by I2C write into P0_R115
            //i2c.write(i2c_addr[ii],0x73,0xf0); //0x30
            i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	 
    3e0e:	movs	r3, #240	; 0xf0
    3e10:	movs	r2, #115	; 0x73
    3e12:	movs	r1, #76	; 0x4c
    3e14:	add	r0, sp, #4
    3e16:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //
            //Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            //i2c.write(i2c_addr[ii],0x74,0xf0);	//0x20
            i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	
    3e1a:	movs	r3, #240	; 0xf0
    3e1c:	movs	r2, #116	; 0x74
    3e1e:	movs	r1, #76	; 0x4c
    3e20:	add	r0, sp, #4
    3e22:	ldr	r6, [pc, #248]	; (3f1c <adc_init()+0x1a8>)
    3e24:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //
   			//Power-up ADC and PLL by I2C write into P0_R117 
            i2c.write(i2c_addr[ii],0x75,0xE0);
    3e28:	movs	r3, #224	; 0xe0
    3e2a:	movs	r2, #117	; 0x75
    3e2c:	movs	r1, #76	; 0x4c
    3e2e:	add	r0, sp, #4
                                        | (1<<0));  //0.00025*fs HP filter

            i2c.write(i2c_addr[ii],0x3B,(6<<4)      // micBias set to AVDD
                                        |(0<<0));   // ADC Full scale (VREF) // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    3e30:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);
    3e32:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again<<2); // CH1_CFG1 (0dB gain)
    3e36:	ldr.w	r8, [pc, #248]	; 3f30 <adc_init()+0x1bc>
            i2c.write(i2c_addr[ii],0x6B,(2<<4)      // 2:ultra low latency
    3e3a:	movs	r3, #33	; 0x21
    3e3c:	movs	r2, #107	; 0x6b
    3e3e:	movs	r1, #76	; 0x4c
    3e40:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3e42:	ldr	r7, [pc, #220]	; (3f20 <adc_init()+0x1ac>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4)      // 2:ultra low latency
    3e44:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,(6<<4)      // micBias set to AVDD
    3e48:	movs	r3, #96	; 0x60
    3e4a:	movs	r2, #59	; 0x3b
    3e4c:	movs	r1, #76	; 0x4c
    3e4e:	add	r0, sp, #4
    3e50:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3e54:	ldrb.w	r4, [r6], #1
    3e58:	movs	r3, #136	; 0x88
    3e5a:	movs	r1, #76	; 0x4c
    3e5c:	add	r0, sp, #4
    3e5e:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3e60:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3e62:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again<<2); // CH1_CFG1 (0dB gain)
    3e66:	ldrh.w	r3, [r8]
    3e6a:	adds	r2, r4, #1
    3e6c:	movs	r1, #76	; 0x4c
    3e6e:	lsls	r3, r3, #2
    3e70:	add	r0, sp, #4
    3e72:	uxtb	r2, r2
    3e74:	and.w	r3, r3, #252	; 0xfc
    3e78:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3e7c:	ldrh	r3, [r7, #0]
    3e7e:	adds	r2, r4, #2
    3e80:	movs	r1, #76	; 0x4c
    3e82:	subs	r3, #55	; 0x37
    3e84:	add	r0, sp, #4
    3e86:	uxtb	r2, r2
    3e88:	uxtb	r3, r3
    3e8a:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    3e8e:	adds	r2, r4, #3
    3e90:	movs	r3, #128	; 0x80
    3e92:	movs	r1, #76	; 0x4c
    3e94:	uxtb	r2, r2
    3e96:	add	r0, sp, #4
    3e98:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    3e9c:	adds	r2, r4, #4
    3e9e:	movs	r3, #0
    3ea0:	movs	r1, #76	; 0x4c
    3ea2:	uxtb	r2, r2
    3ea4:	add	r0, sp, #4
    3ea6:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3eaa:	cmp	r5, #4
    3eac:	bne.n	3e54 <adc_init()+0xe0>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    3eae:	ldr	r1, [pc, #116]	; (3f24 <adc_init()+0x1b0>)
    3eb0:	ldr	r0, [pc, #96]	; (3f14 <adc_init()+0x1a0>)
    3eb2:	bl	3cbc <Print::print(char const*) [clone .isra.0]>
    3eb6:	movs	r2, #21
    3eb8:	movs	r1, #76	; 0x4c
    3eba:	add	r0, sp, #4
    3ebc:	bl	401e <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3ec0:	movs	r3, #0
    3ec2:	mov	r1, r0
    3ec4:	movs	r2, #16
    3ec6:	ldr	r0, [pc, #76]	; (3f14 <adc_init()+0x1a0>)
    3ec8:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    3ecc:	ldr	r0, [pc, #68]	; (3f14 <adc_init()+0x1a0>)
    3ece:	bl	cde0 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    3ed2:	ldr	r1, [pc, #84]	; (3f28 <adc_init()+0x1b4>)
    3ed4:	ldr	r0, [pc, #60]	; (3f14 <adc_init()+0x1a0>)
    3ed6:	bl	3cbc <Print::print(char const*) [clone .isra.0]>
    3eda:	movs	r2, #118	; 0x76
    3edc:	movs	r1, #76	; 0x4c
    3ede:	add	r0, sp, #4
    3ee0:	bl	401e <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3ee4:	movs	r3, #0
    3ee6:	mov	r1, r0
    3ee8:	movs	r2, #16
    3eea:	ldr	r0, [pc, #40]	; (3f14 <adc_init()+0x1a0>)
    3eec:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    3ef0:	ldr	r0, [pc, #32]	; (3f14 <adc_init()+0x1a0>)
    3ef2:	bl	cde0 <Print::println()>
            
        }
    }
    3ef6:	b.n	3f00 <adc_init()+0x18c>
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]); continue;}
    3ef8:	ldr	r1, [pc, #48]	; (3f2c <adc_init()+0x1b8>)
    3efa:	ldr	r0, [pc, #24]	; (3f14 <adc_init()+0x1a0>)
    3efc:	bl	ce18 <Print::printf(char const*, ...)>
    }
    3f00:	add	sp, #8
    3f02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f06:	nop
    3f08:	.word	0x000186a0
    3f0c:	.word	0x20001c9c
    3f10:	.word	0x20000eb2
    3f14:	.word	0x20001c8c
    3f18:	.word	0x2000100b
    3f1c:	.word	0x20001007
    3f20:	.word	0x20021c14
    3f24:	.word	0x20000fcc
    3f28:	.word	0x20000fd4
    3f2c:	.word	0x20000ebc
    3f30:	.word	0x20021c0e

00003f34 <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    3f34:	push	{r0, r1, r4, r5, r6, lr}
    3f36:	mov	r4, r0
    3f38:	ldr	r6, [pc, #40]	; (3f64 <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    3f3a:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    3f3c:	ldr	r2, [pc, #40]	; (3f68 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3f3e:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    3f40:	ldr	r1, [pc, #40]	; (3f6c <setAGain(signed char)+0x38>)
    3f42:	add	r0, sp, #4
    3f44:	bl	3fd8 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3f48:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    3f4c:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3f4e:	mov	r3, r4
    3f50:	movs	r1, #76	; 0x4c
    3f52:	adds	r2, #1
    3f54:	add	r0, sp, #4
    3f56:	uxtb	r2, r2
    3f58:	bl	406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3f5c:	cmp	r5, #4
    3f5e:	bne.n	3f48 <setAGain(signed char)+0x14>
            }
    }
    3f60:	add	sp, #8
    3f62:	pop	{r4, r5, r6, pc}
    3f64:	.word	0x20001007
    3f68:	.word	0x000186a0
    3f6c:	.word	0x20001c9c

00003f70 <adcStatus()>:
    void adcStatus(void)
    {
    3f70:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3f72:	ldr	r4, [pc, #80]	; (3fc4 <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    3f74:	add	r0, sp, #4
    3f76:	ldr	r2, [pc, #80]	; (3fc8 <adcStatus()+0x58>)
    3f78:	ldr	r1, [pc, #80]	; (3fcc <adcStatus()+0x5c>)
    3f7a:	bl	3fd8 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3f7e:	mov	r0, r4
    3f80:	ldr	r1, [pc, #76]	; (3fd0 <adcStatus()+0x60>)
    3f82:	bl	3cbc <Print::print(char const*) [clone .isra.0]>
    3f86:	movs	r2, #21
    3f88:	movs	r1, #76	; 0x4c
    3f8a:	add	r0, sp, #4
    3f8c:	bl	401e <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3f90:	movs	r3, #0
    3f92:	mov	r1, r0
    3f94:	movs	r2, #16
    3f96:	mov	r0, r4
    3f98:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3f9c:	mov	r0, r4
    3f9e:	ldr	r1, [pc, #52]	; (3fd4 <adcStatus()+0x64>)
    3fa0:	bl	3cbc <Print::print(char const*) [clone .isra.0]>
    3fa4:	movs	r2, #118	; 0x76
    3fa6:	movs	r1, #76	; 0x4c
    3fa8:	add	r0, sp, #4
    3faa:	bl	401e <i2c_class::read(unsigned char, unsigned char)>
    3fae:	movs	r3, #0
    3fb0:	mov	r1, r0
    3fb2:	movs	r2, #16
    3fb4:	mov	r0, r4
    3fb6:	bl	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    3fba:	mov	r0, r4
    3fbc:	bl	cde0 <Print::println()>
    }
    3fc0:	add	sp, #8
    3fc2:	pop	{r4, pc}
    3fc4:	.word	0x20001c8c
    3fc8:	.word	0x000186a0
    3fcc:	.word	0x20001c9c
    3fd0:	.word	0x20000fcb
    3fd4:	.word	0x20000fd3

00003fd8 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3fd8:	push	{r0, r1, r2, r4, r5, lr}
    3fda:	mov	r4, r1
    {   this->wire = wire;
    3fdc:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3fde:	mov	r5, r0
        wire->begin();
    3fe0:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    3fe2:	str	r2, [sp, #4]
        wire->begin();
    3fe4:	bl	12788 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    3fe8:	movs	r0, #100	; 0x64
    3fea:	bl	be24 <delay>
        wire->setClock(speed);
    3fee:	mov	r0, r4
    3ff0:	ldr	r1, [sp, #4]
    3ff2:	bl	5b48 <TwoWire::setClock(unsigned long)>
    }
    3ff6:	mov	r0, r5
    3ff8:	add	sp, #12
    3ffa:	pop	{r4, r5, pc}

00003ffc <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    3ffc:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    3ffe:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    4000:	ldr	r3, [r0, #0]
    4002:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    4006:	movs	r1, #1
    4008:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    400c:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    4010:	ldr	r0, [r0, #0]
    4012:	bl	5894 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    4016:	clz	r0, r0
    401a:	lsrs	r0, r0, #5
    401c:	pop	{r3, pc}

0000401e <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    401e:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    4020:	ldr	r3, [r0, #0]
		transmitting = 1;
    4022:	movs	r6, #1
    { 
    4024:	mov	r5, r1
		txBuffer[0] = (address << 1);
    4026:	lsls	r1, r1, #1
		transmitting = 1;
    4028:	strb.w	r6, [r3, #304]	; 0x130
    402c:	mov	r4, r0
		txBuffer[0] = (address << 1);
    402e:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    4032:	mov	r1, r2
		txBufferLength = 1;
    4034:	strb.w	r6, [r3, #303]	; 0x12f
    4038:	ldr	r0, [r0, #0]
    403a:	ldr	r3, [r0, #0]
    403c:	ldr	r3, [r3, #0]
    403e:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    4040:	movs	r1, #0
    4042:	ldr	r0, [r4, #0]
    4044:	bl	5894 <TwoWire::endTransmission(unsigned char)>
    4048:	cbz	r0, 404e <i2c_class::read(unsigned char, unsigned char)+0x30>
    404a:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    404c:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    404e:	mov	r3, r6
    4050:	mov	r2, r6
    4052:	mov	r1, r5
    4054:	ldr	r0, [r4, #0]
    4056:	bl	5978 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    405a:	cmp	r0, #0
    405c:	beq.n	404a <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    405e:	ldr	r0, [r4, #0]
    4060:	ldr	r3, [r0, #0]
    4062:	ldr	r3, [r3, #20]
    4064:	blx	r3
        return val;
    4066:	uxtb	r0, r0
    4068:	b.n	404c <i2c_class::read(unsigned char, unsigned char)+0x2e>

0000406a <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    406a:	push	{r4, r5, r6, lr}
    406c:	mov	r4, r0
		transmitting = 1;
    406e:	movs	r5, #1
    4070:	mov	r6, r3
        wire->beginTransmission(addr);
    4072:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    4074:	lsls	r0, r1, #1
        wire->write(reg);
    4076:	mov	r1, r2
		transmitting = 1;
    4078:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    407c:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    4080:	strb.w	r0, [r3, #165]	; 0xa5
    4084:	ldr	r0, [r4, #0]
    4086:	ldr	r3, [r0, #0]
    4088:	ldr	r3, [r3, #0]
    408a:	blx	r3
        wire->write(val);
    408c:	ldr	r0, [r4, #0]
    408e:	mov	r1, r6
    4090:	ldr	r3, [r0, #0]
    4092:	ldr	r3, [r3, #0]
    4094:	blx	r3
		return endTransmission(1);
    4096:	mov	r1, r5
    4098:	ldr	r0, [r4, #0]
    409a:	bl	5894 <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    409e:	clz	r0, r0
    40a2:	lsrs	r0, r0, #5
    40a4:	pop	{r4, r5, r6, pc}
	...

000040a8 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    40a8:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    40aa:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    40ac:	movw	lr, #365	; 0x16d
    40b0:	movs	r6, #100	; 0x64
    40b2:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now time is minutes
    40b6:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now time is hours
    40ba:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now time is minutes
    40be:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now time is hours
    40c2:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    40c6:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    40c8:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now time is hours
    40ca:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now time is days
    40cc:	udiv	r2, r3, r0
    40d0:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    40d4:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now time is days
    40d6:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    40d8:	movs	r3, #7
    40da:	udiv	r3, r0, r3
    40de:	rsb	r3, r3, r3, lsl #3
    40e2:	subs	r0, r0, r3
    40e4:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    40e6:	movs	r0, #0
    days = 0;
    40e8:	mov	r4, r0
    40ea:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    40ec:	addw	r3, r3, #1970	; 0x7b2
    40f0:	ands.w	r7, r3, #3
    40f4:	bne.n	4178 <time2date(unsigned long, datetime_t*)+0xd0>
    40f6:	sdiv	r5, r3, r6
    40fa:	mls	r5, r6, r5, r3
    40fe:	cmp	r5, #0
    4100:	bne.n	417e <time2date(unsigned long, datetime_t*)+0xd6>
    4102:	sdiv	r5, r3, ip
    4106:	mls	r5, ip, r5, r3
    410a:	cmp	r5, #0
    410c:	ite	ne
    410e:	movne	r5, lr
    4110:	moveq.w	r5, #366	; 0x16e
    4114:	add	r4, r5
    4116:	adds	r0, #1
    4118:	cmp	r2, r4
    411a:	bcs.n	40ea <time2date(unsigned long, datetime_t*)+0x42>
    411c:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    411e:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4120:	udiv	r6, r3, r0
    4124:	mls	r6, r0, r6, r3
    4128:	mov.w	r0, #400	; 0x190
    412c:	udiv	r5, r3, r0
    4130:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    4134:	cbnz	r7, 4184 <time2date(unsigned long, datetime_t*)+0xdc>
    4136:	cbnz	r6, 418a <time2date(unsigned long, datetime_t*)+0xe2>
    4138:	cmp	r3, #0
    413a:	movw	r0, #365	; 0x16d
    413e:	it	eq
    4140:	moveq.w	r0, #366	; 0x16e
    time -= days; // now time is days in this year, starting at 0
    4144:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    4146:	ldr.w	ip, [pc, #88]	; 41a0 <time2date(unsigned long, datetime_t*)+0xf8>
    time -= days; // now time is days in this year, starting at 0
    414a:	add	r2, r0
    414c:	movs	r0, #0
      if (month==1) { // february
    414e:	cmp	r0, #1
    4150:	uxtb	r5, r0
    4152:	bne.n	4190 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    4154:	cbnz	r7, 4196 <time2date(unsigned long, datetime_t*)+0xee>
    4156:	cbnz	r6, 419a <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    4158:	cmp	r3, #0
    415a:	ite	ne
    415c:	movne	r4, #28
    415e:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    4160:	cmp	r4, r2
    4162:	bhi.n	416e <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    4164:	adds	r0, #1
        time -= monthLength;
    4166:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    4168:	cmp	r0, #12
    416a:	bne.n	414e <time2date(unsigned long, datetime_t*)+0xa6>
    416c:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    416e:	adds	r5, #1
    tm->day = time + 1;     // day of month
    4170:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    4172:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    4174:	strb	r2, [r1, #3]
  }
    4176:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    4178:	movw	r5, #365	; 0x16d
    417c:	b.n	4114 <time2date(unsigned long, datetime_t*)+0x6c>
    417e:	mov.w	r5, #366	; 0x16e
    4182:	b.n	4114 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    4184:	movw	r0, #365	; 0x16d
    4188:	b.n	4144 <time2date(unsigned long, datetime_t*)+0x9c>
    418a:	mov.w	r0, #366	; 0x16e
    418e:	b.n	4144 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    4190:	ldrb.w	r4, [r0, ip]
    4194:	b.n	4160 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    4196:	movs	r4, #28
    4198:	b.n	4160 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    419a:	movs	r4, #29
    419c:	b.n	4160 <time2date(unsigned long, datetime_t*)+0xb8>
    419e:	nop
    41a0:	.word	0x20001052

000041a4 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    41a4:	ldrh	r3, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    41a6:	movw	r2, #365	; 0x16d
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    41aa:	movw	r1, #1970	; 0x7b2
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    41ae:	adds	r3, #78	; 0x4e
    41b0:	uxtb	r3, r3
  {
    41b2:	push	{r4, r5, r6, r7, lr}
    uint32_t days= year*365;
    41b4:	muls	r2, r3
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    41b6:	movs	r5, #100	; 0x64
    41b8:	mov.w	r6, #400	; 0x190
    41bc:	subw	r4, r1, #1970	; 0x7b2
    41c0:	cmp	r3, r4
    41c2:	bgt.n	421e <date2time(datetime_t*)+0x7a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    41c4:	addw	r3, r3, #1970	; 0x7b2
    41c8:	movs	r1, #100	; 0x64
    seconds = days*SECS_PER_DAY;
    41ca:	ldr	r7, [pc, #148]	; (4260 <date2time(datetime_t*)+0xbc>)
    for (ii = 1; ii < tm->month; ii++) {
    41cc:	ldrsb.w	ip, [r0, #2]
    seconds = days*SECS_PER_DAY;
    41d0:	muls	r2, r7
    for (ii = 1; ii < tm->month; ii++) {
    41d2:	ldr	r6, [pc, #144]	; (4264 <date2time(datetime_t*)+0xc0>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    41d4:	udiv	r4, r3, r1
    41d8:	mls	r4, r1, r4, r3
    41dc:	mov.w	r1, #400	; 0x190
    41e0:	udiv	r5, r3, r1
    41e4:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    41e8:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    41ea:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    41ee:	cmp	ip, r1
    41f0:	bgt.n	423c <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    41f2:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    41f6:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    41fa:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    41fe:	rsb	r3, r3, r3, lsl #4
    4202:	lsls	r3, r3, #2
    seconds+= tm->sec;
    4204:	mla	r3, r4, r1, r3
    4208:	ldrsb.w	r1, [r0, #7]
    420c:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    420e:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    4212:	ldr	r0, [pc, #76]	; (4260 <date2time(datetime_t*)+0xbc>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    4214:	subs	r1, #1
    seconds+= tm->sec;
    4216:	mla	r0, r0, r1, r3
    return seconds; 
  }
    421a:	add	r0, r2
    421c:	pop	{r4, r5, r6, r7, pc}
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    421e:	lsls	r4, r1, #30
    4220:	bne.n	4238 <date2time(datetime_t*)+0x94>
    4222:	sdiv	r4, r1, r5
    4226:	mls	r4, r5, r4, r1
    422a:	cbnz	r4, 4236 <date2time(datetime_t*)+0x92>
    422c:	sdiv	r4, r1, r6
    4230:	mls	r4, r6, r4, r1
    4234:	cbnz	r4, 4238 <date2time(datetime_t*)+0x94>
    4236:	adds	r2, #1
    4238:	adds	r1, #1
    423a:	b.n	41bc <date2time(datetime_t*)+0x18>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    423c:	cmp	r1, #2
    423e:	bne.n	4254 <date2time(datetime_t*)+0xb0>
    4240:	cbnz	r3, 4254 <date2time(datetime_t*)+0xb0>
    4242:	cbnz	r4, 4246 <date2time(datetime_t*)+0xa2>
    4244:	cbnz	r5, 4254 <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY * 29;
    4246:	add.w	r2, r2, #2490368	; 0x260000
    424a:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    424e:	adds	r1, #1
    4250:	adds	r6, #1
    4252:	b.n	41ee <date2time(datetime_t*)+0x4a>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    4254:	ldrb.w	lr, [r6]
    4258:	mla	r2, r7, lr, r2
    425c:	b.n	424e <date2time(datetime_t*)+0xaa>
    425e:	nop
    4260:	.word	0x00015180
    4264:	.word	0x20001052

00004268 <rtcGetTimestamp()>:
      return xrtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    4268:	movs	r0, #0
    426a:	bx	lr

0000426c <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    426c:	push	{r0, r1, r2, lr}
    426e:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    4270:	bl	c020 <rtc_get>
    4274:	ldr	r1, [sp, #4]
    4276:	bl	40a8 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    427a:	movs	r0, #1
    427c:	add	sp, #12
    427e:	ldr.w	pc, [sp], #4

00004282 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    4282:	push	{r3, lr}
    rtc_set(date2time(t));
    4284:	bl	41a4 <date2time(datetime_t*)>
    4288:	bl	c044 <rtc_set>
    return 1;
  }
    428c:	movs	r0, #1
    428e:	pop	{r3, pc}

00004290 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    4290:	push	{r0, r1, r4, r5, r6, lr}
    4292:	mov	r5, r1
    4294:	mov	r4, r2
    4296:	mov	r6, r0
    rtc_get_datetime(&t);
    4298:	mov	r0, sp
    429a:	bl	426c <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    429e:	mov	r0, sp
    t.year=year;
    42a0:	strh.w	r6, [sp]
    t.month=month;
    42a4:	strb.w	r5, [sp, #2]
    t.day=day;
    42a8:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    42ac:	bl	4282 <rtc_set_datetime(datetime_t*)>
  }
    42b0:	add	sp, #8
    42b2:	pop	{r4, r5, r6, pc}

000042b4 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    42b4:	push	{r0, r1, r4, r5, r6, lr}
    42b6:	mov	r5, r1
    42b8:	mov	r4, r2
    42ba:	mov	r6, r0
    rtc_get_datetime(&t);
    42bc:	mov	r0, sp
    42be:	bl	426c <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    42c2:	mov	r0, sp
    t.hour=hour;
    42c4:	strb.w	r6, [sp, #5]
    t.min=minutes;
    42c8:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    42cc:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    42d0:	bl	4282 <rtc_set_datetime(datetime_t*)>
  }
    42d4:	add	sp, #8
    42d6:	pop	{r4, r5, r6, pc}

000042d8 <XRTCprintTime()>:
    42d8:	bx	lr
	...

000042dc <txEvent_event>:
    static void txEvent_event(transfer_t *t) { mtp_txEventcount++;}
    42dc:	ldr	r2, [pc, #8]	; (42e8 <txEvent_event+0xc>)
    42de:	ldr	r3, [r2, #0]
    42e0:	adds	r3, #1
    42e2:	str	r3, [r2, #0]
    42e4:	bx	lr
    42e6:	nop
    42e8:	.word	0x2001f020

000042ec <rxEvent_event>:
    static void rxEvent_event(transfer_t *t) { mtp_rxEventcount++;}
    42ec:	ldr	r2, [pc, #8]	; (42f8 <rxEvent_event+0xc>)
    42ee:	ldr	r3, [r2, #0]
    42f0:	adds	r3, #1
    42f2:	str	r3, [r2, #0]
    42f4:	bx	lr
    42f6:	nop
    42f8:	.word	0x2001f01c

000042fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    42fc:	push	{r3, r4, r5, lr}
    42fe:	mov	r4, r0
    4300:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4302:	movs	r2, #60	; 0x3c
    4304:	mov	r1, r5
    4306:	mov	r0, r4
    4308:	bl	c934 <usb_mtp_send>
    430c:	cmp	r0, #0
    430e:	ble.n	4302 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    4310:	pop	{r3, r4, r5, pc}
	...

00004314 <MTPD::write(char const*, int) [clone .part.0]>:
    void MTPD::write(const char *data, int len) 
    4314:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4318:	mov	r7, r1
        if(!write_length_) dst=tx_data_buffer;   
    431a:	add.w	r1, r0, #4096	; 0x1000
    void MTPD::write(const char *data, int len) 
    431e:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    4320:	ldr.w	r3, [r1, #1068]	; 0x42c
    4324:	cbnz	r3, 432e <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    4326:	add.w	r2, r0, #32
    432a:	ldr	r4, [pc, #92]	; (4388 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    432c:	str	r2, [r4, #0]
        write_length_ += len;
    432e:	add	r3, r6
        int pos = 0; // into data
    4330:	mov.w	r8, #0
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4334:	add.w	r9, r0, #544	; 0x220
    4338:	ldr.w	sl, [pc, #76]	; 4388 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    433c:	add.w	r4, r0, #32
        write_length_ += len;
    4340:	str.w	r3, [r1, #1068]	; 0x42c
        while(pos<len)
    4344:	cmp	r6, r8
    4346:	bgt.n	434c <MTPD::write(char const*, int) [clone .part.0]+0x38>
    }
    4348:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    434c:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    4350:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    4354:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    4356:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    435a:	mov	r0, r3
    435c:	cmp	r5, r2
    435e:	it	ge
    4360:	movge	r5, r2
    4362:	mov	r2, r5
          pos += to_copy;
    4364:	add	r8, r5
          memcpy(dst,src,to_copy);
    4366:	bl	a8dc <memcpy>
    436a:	mov	r3, r0
          src += to_copy;
    436c:	add	r7, r5
          dst += to_copy;
    436e:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4370:	cmp	r9, r3
          dst += to_copy;
    4372:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4376:	bne.n	4344 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4378:	mov.w	r1, #512	; 0x200
    437c:	mov	r0, r4
    437e:	bl	42fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    4382:	str.w	r4, [sl]
    4386:	b.n	4344 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    4388:	.word	0x200212ac

0000438c <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    438c:	push	{r4, r5, r6, lr}
    438e:	subs	r5, r1, #1
    int num = 0;
    4390:	movs	r6, #0
  { uint32_t store = Storage2Store(storage);
    4392:	mov	r4, r0
    storage_->StartGetObjectHandles(store, parent);
    4394:	ldr	r0, [r0, #0]
    4396:	mov	r1, r5
    4398:	bl	1492 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
    while (storage_->GetNextObjectHandle(store)) num++;
    439c:	mov	r1, r5
    439e:	ldr	r0, [r4, #0]
    43a0:	bl	14de <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    43a4:	cbnz	r0, 43aa <MTPD::GetNumObjects(unsigned long, unsigned long)+0x1e>
  }
    43a6:	mov	r0, r6
    43a8:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    43aa:	adds	r6, #1
    43ac:	b.n	439c <MTPD::GetNumObjects(unsigned long, unsigned long)+0x10>

000043ae <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
    { uint32_t store1=Storage2Store(newStorage);
    43ae:	push	{r3, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    43b0:	subs	r2, #1
    43b2:	ldr	r0, [r0, #0]
    43b4:	bl	1d40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>
    }
    43b8:	movw	r2, #8193	; 0x2001
    43bc:	movw	r3, #8197	; 0x2005
    43c0:	cmp	r0, #0
    43c2:	ite	ne
    43c4:	movne	r0, r2
    43c6:	moveq	r0, r3
    43c8:	pop	{r3, pc}

000043ca <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    43ca:	subs	r2, #1
    43cc:	ldr	r0, [r0, #0]
    43ce:	b.w	1ade <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>
	...

000043d4 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    43d4:	ldr	r3, [pc, #8]	; (43e0 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    43d6:	ldr	r0, [r0, #0]
      sessionID_ = id;
    43d8:	str	r1, [r3, #0]
      storage_->ResetIndex();
    43da:	b.w	1140 <MTPStorage_SD::ResetIndex()>
    43de:	nop
    43e0:	.word	0x20021a14

000043e4 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    43e4:	add.w	r3, r0, #4096	; 0x1000
    43e8:	push	{r4, r5}
    43ea:	ldrb.w	r5, [r3, #1064]	; 0x428
    43ee:	cbz	r5, 43fe <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    43f0:	ldr.w	r1, [r3, #1068]	; 0x42c
    43f4:	add	r1, r2
    }
    43f6:	pop	{r4, r5}
        write_length_ += len;
    43f8:	str.w	r1, [r3, #1068]	; 0x42c
    }
    43fc:	bx	lr
    43fe:	pop	{r4, r5}
    4400:	b.w	4314 <MTPD::write(char const*, int) [clone .part.0]>

00004404 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    4404:	push	{r0, r1, r2, lr}
    4406:	movs	r2, #1
    4408:	strb.w	r1, [sp, #7]
    440c:	add.w	r1, sp, #7
    4410:	bl	43e4 <MTPD::write(char const*, int)>
    4414:	add	sp, #12
    4416:	ldr.w	pc, [sp], #4

0000441a <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    441a:	push	{r0, r1, r2, lr}
    441c:	movs	r2, #2
    441e:	strh.w	r1, [sp, #6]
    4422:	add.w	r1, sp, #6
    4426:	bl	43e4 <MTPD::write(char const*, int)>
    442a:	add	sp, #12
    442c:	ldr.w	pc, [sp], #4

00004430 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    4430:	push	{r3, r4, r5, lr}
    4432:	mov	r4, r1
    if (*str) 
    4434:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    4436:	mov	r5, r0
    if (*str) 
    4438:	cbz	r1, 4462 <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    443a:	mov	r0, r4
    443c:	subs	r4, #1
    443e:	bl	f490 <strlen>
    4442:	adds	r0, #1
    4444:	uxtb	r1, r0
    4446:	mov	r0, r5
    4448:	bl	4404 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    444c:	ldrb.w	r1, [r4, #1]!
    4450:	mov	r0, r5
    4452:	cbnz	r1, 445c <MTPD::writestring(char const*)+0x2c>
  }
    4454:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4458:	b.w	441a <MTPD::write16(unsigned short)>
    445c:	bl	441a <MTPD::write16(unsigned short)>
    4460:	b.n	444c <MTPD::writestring(char const*)+0x1c>
  }
    4462:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    4466:	b.w	4404 <MTPD::write8(unsigned char)>
	...

0000446c <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    446c:	movw	r3, #54274	; 0xd402
    4470:	cmp	r1, r3
    4472:	bne.n	447a <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    4474:	ldr	r1, [pc, #4]	; (447c <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    4476:	b.w	4430 <MTPD::writestring(char const*)>
  }
    447a:	bx	lr
    447c:	.word	0x200010da

00004480 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    4480:	movw	r3, #54274	; 0xd402
    4484:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    4486:	push	{r4, lr}
    4488:	mov	r4, r0
    switch (prop) {
    448a:	bne.n	44be <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    448c:	bl	441a <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    4490:	mov	r0, r4
    4492:	movw	r1, #65535	; 0xffff
    4496:	bl	441a <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    449a:	mov	r0, r4
    449c:	movs	r1, #0
    449e:	bl	4404 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    44a2:	mov	r0, r4
    44a4:	ldr	r1, [pc, #24]	; (44c0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    44a6:	bl	4430 <MTPD::writestring(char const*)>
        writestring(MTP_NAME);
    44aa:	mov	r0, r4
    44ac:	ldr	r1, [pc, #16]	; (44c0 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    44ae:	bl	4430 <MTPD::writestring(char const*)>
        write8(0);       // no form
    44b2:	mov	r0, r4
    44b4:	movs	r1, #0
  }
    44b6:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    44ba:	b.w	4404 <MTPD::write8(unsigned char)>
  }
    44be:	pop	{r4, pc}
    44c0:	.word	0x200010da

000044c4 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    44c4:	push	{r0, r1, r2, lr}
    44c6:	movs	r2, #4
    44c8:	str	r1, [sp, #4]
    44ca:	add.w	r1, sp, r2
    44ce:	bl	43e4 <MTPD::write(char const*, int)>
    44d2:	add	sp, #12
    44d4:	ldr.w	pc, [sp], #4

000044d8 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    44d8:	push	{r4, r5, r6, r7, lr}
    44da:	sub	sp, #68	; 0x44
    char msoft[]="microsoft.com: 1.0;";
    44dc:	ldr	r3, [pc, #280]	; (45f8 <MTPD::WriteDescriptor()+0x120>)
  void MTPD::WriteDescriptor() {
    44de:	mov	r4, r0
    char msoft[]="microsoft.com: 1.0;";
    44e0:	add	r2, sp, #4
    44e2:	add.w	r7, r3, #16
    44e6:	mov	r6, r2
    44e8:	ldr	r0, [r3, #0]
    44ea:	adds	r3, #8
    44ec:	ldr.w	r1, [r3, #-4]
    44f0:	mov	r5, r2
    44f2:	cmp	r3, r7
    44f4:	stmia	r5!, {r0, r1}
    44f6:	mov	r2, r5
    44f8:	bne.n	44e8 <MTPD::WriteDescriptor()+0x10>
    44fa:	ldr	r0, [r3, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    44fc:	add	r2, sp, #24
    44fe:	movs	r1, #2
    4500:	vldr	s0, [pc, #248]	; 45fc <MTPD::WriteDescriptor()+0x124>
    char msoft[]="microsoft.com: 1.0;";
    4504:	str	r0, [r5, #0]
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf1);
    4506:	movs	r0, #3
    4508:	bl	bb90 <dtostrf>
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    450c:	movs	r2, #20
    450e:	ldr	r1, [pc, #240]	; (4600 <MTPD::WriteDescriptor()+0x128>)
    4510:	add	r0, sp, #24
    4512:	bl	f228 <strlcat>
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    4516:	add	r3, sp, #44	; 0x2c
    4518:	ldr	r2, [pc, #232]	; (4604 <MTPD::WriteDescriptor()+0x12c>)
    strlcat(buf1, " / MTP " MTP_VERS, sizeof(buf1) );
    451a:	movs	r5, #10
    451c:	mov	r7, r3
    for (size_t i=0; i<10; i++) buf2[i] = usb_string_serial_number.wString[i];
    451e:	ldrh.w	r1, [r2, #2]!
    4522:	subs	r5, #1
    4524:	strb.w	r1, [r3], #1
    4528:	bne.n	451e <MTPD::WriteDescriptor()+0x46>
    write16(100);  // MTP version
    452a:	movs	r1, #100	; 0x64
    452c:	mov	r0, r4
    452e:	bl	441a <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    4532:	movs	r1, #6
    4534:	mov	r0, r4
    4536:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    453a:	movs	r1, #100	; 0x64
    453c:	mov	r0, r4
    453e:	bl	441a <MTPD::write16(unsigned short)>
    writestring(msoft);
    4542:	mov	r1, r6
    4544:	mov	r0, r4
    4546:	ldr	r6, [pc, #192]	; (4608 <MTPD::WriteDescriptor()+0x130>)
    4548:	bl	4430 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    454c:	mov	r1, r5
    454e:	mov	r0, r4
    4550:	bl	441a <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    4554:	movs	r1, #20
    4556:	mov	r0, r4
    4558:	bl	44c4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    455c:	adds	r5, #1
    455e:	ldrh.w	r1, [r6], #2
    4562:	mov	r0, r4
    4564:	bl	441a <MTPD::write16(unsigned short)>
    4568:	cmp	r5, #20
    456a:	bne.n	455c <MTPD::WriteDescriptor()+0x84>
    write32(supported_event_num);      
    456c:	mov	r0, r4
    456e:	movs	r1, #4
    4570:	bl	44c4 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    4574:	mov	r0, r4
    4576:	movw	r1, #16388	; 0x4004
    457a:	bl	441a <MTPD::write16(unsigned short)>
    457e:	mov	r0, r4
    4580:	movw	r1, #16389	; 0x4005
    4584:	bl	441a <MTPD::write16(unsigned short)>
    4588:	mov	r0, r4
    458a:	movw	r1, #16395	; 0x400b
    458e:	bl	441a <MTPD::write16(unsigned short)>
    4592:	mov	r0, r4
    4594:	movw	r1, #16396	; 0x400c
    4598:	bl	441a <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    459c:	mov	r0, r4
    459e:	movs	r1, #1
    45a0:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    45a4:	mov	r0, r4
    45a6:	movw	r1, #54274	; 0xd402
    45aa:	bl	441a <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    45ae:	mov	r0, r4
    45b0:	movs	r1, #0
    45b2:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    45b6:	mov	r0, r4
    45b8:	movs	r1, #2
    45ba:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    45be:	mov	r0, r4
    45c0:	mov.w	r1, #12288	; 0x3000
    45c4:	bl	441a <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    45c8:	mov	r0, r4
    45ca:	movw	r1, #12289	; 0x3001
    45ce:	bl	441a <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    45d2:	mov	r0, r4
    45d4:	ldr	r1, [pc, #52]	; (460c <MTPD::WriteDescriptor()+0x134>)
    45d6:	bl	4430 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    45da:	mov	r0, r4
    45dc:	ldr	r1, [pc, #48]	; (4610 <MTPD::WriteDescriptor()+0x138>)
    45de:	bl	4430 <MTPD::writestring(char const*)>
    writestring(buf1);    
    45e2:	add	r1, sp, #24
    45e4:	mov	r0, r4
    45e6:	bl	4430 <MTPD::writestring(char const*)>
    writestring(buf2);    
    45ea:	mov	r1, r7
    45ec:	mov	r0, r4
    45ee:	bl	4430 <MTPD::writestring(char const*)>
  }
    45f2:	add	sp, #68	; 0x44
    45f4:	pop	{r4, r5, r6, r7, pc}
    45f6:	nop
    45f8:	.word	0x200010c6
    45fc:	.word	0x3fcb851f
    4600:	.word	0x200010b6
    4604:	.word	0x20002252
    4608:	.word	0x20000b10
    460c:	.word	0x200010c1
    4610:	.word	0x200010da

00004614 <MTPD::WriteStorageIDs()>:
      uint32_t sd_getFSCount(void) {return fsCount;}
    4614:	ldr	r3, [r0, #0]
  void MTPD::WriteStorageIDs() {
    4616:	push	{r4, r5, r6, lr}
    4618:	ldr	r6, [r3, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    461a:	movs	r4, #0
  void MTPD::WriteStorageIDs() {
    461c:	mov	r5, r0
    write32(num); // number of storages (disks)
    461e:	mov	r1, r6
    4620:	bl	44c4 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4624:	cmp	r4, r6
    4626:	bne.n	462a <MTPD::WriteStorageIDs()+0x16>
  }
    4628:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    462a:	adds	r4, #1
    462c:	mov	r0, r5
    462e:	mov	r1, r4
    4630:	bl	44c4 <MTPD::write32(unsigned long)>
    4634:	b.n	4624 <MTPD::WriteStorageIDs()+0x10>

00004636 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    4636:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    4638:	add.w	r7, r0, #4096	; 0x1000
  { uint32_t store = Storage2Store(storage);
    463c:	mov	r4, r0
    463e:	mov	r6, r2
    if (write_get_length_) {
    4640:	ldrb.w	r3, [r7, #1064]	; 0x428
    4644:	cbz	r3, 4654 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    4646:	bl	438c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    464a:	adds	r0, #1
      write_length_ *= 4;
    464c:	lsls	r0, r0, #2
    464e:	str.w	r0, [r7, #1068]	; 0x42c
  }
    4652:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    4654:	subs	r5, r1, #1
      uint32_t numObjects=GetNumObjects(storage, parent);
    4656:	bl	438c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    465a:	mov	r1, r0
      write32(numObjects);
    465c:	mov	r0, r4
    465e:	bl	44c4 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    4662:	mov	r2, r6
    4664:	mov	r1, r5
    4666:	ldr	r0, [r4, #0]
    4668:	bl	1492 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    466c:	mov	r1, r5
    466e:	ldr	r0, [r4, #0]
    4670:	bl	14de <MTPStorage_SD::GetNextObjectHandle(unsigned long)>
    4674:	mov	r1, r0
    4676:	cmp	r0, #0
    4678:	beq.n	4652 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    467a:	mov	r0, r4
    467c:	bl	44c4 <MTPD::write32(unsigned long)>
    4680:	b.n	466c <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x36>
	...

00004684 <MTPD::GetObjectInfo(unsigned long)>:
  {
    4684:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4688:	sub	sp, #416	; 0x1a0
    468a:	mov	r4, r0
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    468c:	add	r5, sp, #96	; 0x60
    468e:	add	r6, sp, #32
    4690:	add	r7, sp, #20
    4692:	add.w	r8, sp, #18
    4696:	add	r3, sp, #24
    4698:	add	r2, sp, #160	; 0xa0
    469a:	str	r5, [sp, #12]
    469c:	str	r6, [sp, #8]
    469e:	str.w	r8, [sp, #4]
    46a2:	str	r7, [sp, #0]
    46a4:	ldr	r0, [r0, #0]
    46a6:	bl	1520 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
    uint32_t storage = Store2Storage(store);
    46aa:	ldrh.w	r1, [sp, #18]
    write32(storage); // storage
    46ae:	mov	r0, r4
    46b0:	adds	r1, #1
    46b2:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    46b6:	movs	r1, #0
    46b8:	mov	r0, r4
    46ba:	ldrd	r2, r3, [sp, #24]
    46be:	cmp	r3, r1
    46c0:	it	eq
    46c2:	cmpeq.w	r2, #4294967295
    46c6:	it	eq
    46c8:	movweq	r1, #12289	; 0x3001
    46cc:	bl	441a <MTPD::write16(unsigned short)>
    write16(0);  // protection
    46d0:	mov	r0, r4
    46d2:	movs	r1, #0
    46d4:	bl	441a <MTPD::write16(unsigned short)>
    write32(size&0xffffffff); // size
    46d8:	ldr	r1, [sp, #24]
    46da:	mov	r0, r4
    46dc:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    46e0:	mov	r0, r4
    46e2:	movs	r1, #0
    46e4:	bl	441a <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    46e8:	mov	r0, r4
    46ea:	movs	r1, #0
    46ec:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    46f0:	mov	r0, r4
    46f2:	movs	r1, #0
    46f4:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    46f8:	mov	r0, r4
    46fa:	movs	r1, #0
    46fc:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    4700:	mov	r0, r4
    4702:	movs	r1, #0
    4704:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    4708:	mov	r0, r4
    470a:	movs	r1, #0
    470c:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    4710:	mov	r0, r4
    4712:	movs	r1, #0
    4714:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    4718:	ldr	r1, [r7, #0]
    471a:	mov	r0, r4
    471c:	bl	44c4 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    4720:	mov	r0, r4
    4722:	ldrd	r3, r2, [sp, #24]
    4726:	adds	r3, #1
    4728:	orrs	r3, r2
    472a:	ite	eq
    472c:	moveq	r1, #1
    472e:	movne	r1, #0
    4730:	bl	441a <MTPD::write16(unsigned short)>
    write32(0); // association description
    4734:	mov	r0, r4
    4736:	movs	r1, #0
    4738:	bl	44c4 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    473c:	mov	r0, r4
    473e:	movs	r1, #0
    4740:	bl	44c4 <MTPD::write32(unsigned long)>
    writestring(filename);
    4744:	add	r1, sp, #160	; 0xa0
    4746:	mov	r0, r4
    4748:	bl	4430 <MTPD::writestring(char const*)>
    writestring(create);  // date created
    474c:	mov	r1, r6
    474e:	mov	r0, r4
    4750:	bl	4430 <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    4754:	mov	r1, r5
    4756:	mov	r0, r4
    4758:	bl	4430 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    475c:	ldr	r1, [pc, #12]	; (476c <MTPD::GetObjectInfo(unsigned long)+0xe8>)
    475e:	mov	r0, r4
    4760:	bl	4430 <MTPD::writestring(char const*)>
  }
    4764:	add	sp, #416	; 0x1a0
    4766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    476a:	nop
    476c:	.word	0x20000d24

00004770 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    4770:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    4772:	ldr	r6, [pc, #36]	; (4798 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4774:	movs	r4, #0
    4776:	ldr	r7, [pc, #36]	; (479c <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4778:	mov	r5, r0
      write32(propertyListNum);
    477a:	ldr	r1, [r6, #0]
    477c:	bl	44c4 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4780:	ldr	r3, [r6, #0]
    4782:	cmp	r3, r4
    4784:	bhi.n	4788 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    4786:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4788:	ldrh.w	r1, [r7], #2
    478c:	mov	r0, r5
    478e:	adds	r4, #1
    4790:	bl	441a <MTPD::write16(unsigned short)>
    4794:	b.n	4780 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    4796:	nop
    4798:	.word	0x20002234
    479c:	.word	0x20000afc

000047a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    47a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    47a4:	sub	sp, #416	; 0x1a0
    47a6:	mov	r5, r2
    47a8:	mov	r4, r0
    47aa:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    47ac:	add.w	r8, sp, #18
    47b0:	add.w	r9, sp, #96	; 0x60
    47b4:	add.w	sl, sp, #32
    47b8:	add	r6, sp, #20
    47ba:	str.w	r8, [sp, #4]
    47be:	add	r3, sp, #24
    47c0:	add	r2, sp, #160	; 0xa0
    47c2:	str.w	r9, [sp, #12]
    47c6:	str.w	sl, [sp, #8]
    47ca:	str	r6, [sp, #0]
    47cc:	ldr	r0, [r0, #0]
    47ce:	bl	1520 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long long*, unsigned long*, unsigned short*, char*, char*)>
      switch(p2)
    47d2:	movw	r0, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    47d6:	ldrh.w	r3, [sp, #18]
      switch(p2)
    47da:	cmp	r5, r0
      uint32_t storage = Store2Storage(store);
    47dc:	add.w	r8, r3, #1
      dir = size == 0xFFFFFFFFUL;
    47e0:	ldrd	r1, r2, [sp, #24]
      switch(p2)
    47e4:	bhi.n	4806 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x66>
    47e6:	cmp.w	r5, #56320	; 0xdc00
    47ea:	bls.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
    47ec:	sub.w	r5, r5, #56320	; 0xdc00
    47f0:	subs	r5, #1
    47f2:	cmp	r5, #10
    47f4:	bhi.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
    47f6:	tbb	[pc, r5]
    47fa:	.short	0x1611
    47fc:	.word	0x0e0e3c23
    4800:	.word	0x0e2c2a25
    4804:	.byte	0x2e
    4805:	.byte	0x00
    4806:	movw	r3, #56385	; 0xdc41
    480a:	cmp	r5, r3
    480c:	beq.n	4860 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc0>
    480e:	movw	r3, #56388	; 0xdc44
    4812:	cmp	r5, r3
    4814:	beq.n	4844 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa4>
    }
    4816:	add	sp, #416	; 0x1a0
    4818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          write32(storage);
    481c:	mov	r1, r8
          write32(0);
    481e:	mov	r0, r4
    4820:	bl	44c4 <MTPD::write32(unsigned long)>
    }
    4824:	b.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          write16(dir?0x3001:0x3000);
    4826:	cmp	r2, #0
    4828:	it	eq
    482a:	cmpeq.w	r1, #4294967295
    482e:	ite	ne
    4830:	movne.w	r1, #12288	; 0x3000
    4834:	movweq	r1, #12289	; 0x3001
          write16(0);
    4838:	mov	r0, r4
    483a:	bl	441a <MTPD::write16(unsigned short)>
          break;
    483e:	b.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          write16(0);
    4840:	movs	r1, #0
    4842:	b.n	4838 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98>
          writestring(name);
    4844:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    4846:	mov	r0, r4
    4848:	bl	4430 <MTPD::writestring(char const*)>
          break;
    484c:	b.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76>
          writestring(create);
    484e:	mov	r1, sl
    4850:	b.n	4846 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6>
          writestring(modify);
    4852:	mov	r1, r9
    4854:	b.n	4846 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6>
          write32((store==parent)? 0: parent);
    4856:	ldr	r1, [r6, #0]
    4858:	cmp	r3, r1
    485a:	it	eq
    485c:	moveq	r1, #0
    485e:	b.n	481e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>
          write32(p1);
    4860:	mov	r1, r7
    4862:	mov	r0, r4
    4864:	bl	44c4 <MTPD::write32(unsigned long)>
          write32(parent);
    4868:	ldr	r1, [r6, #0]
    486a:	mov	r0, r4
    486c:	bl	44c4 <MTPD::write32(unsigned long)>
          write32(storage);
    4870:	mov	r1, r8
    4872:	mov	r0, r4
    4874:	bl	44c4 <MTPD::write32(unsigned long)>
          write32(0);
    4878:	movs	r1, #0
    487a:	b.n	481e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e>

0000487c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    487c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t store = Storage2Store(storage);
    4880:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    4882:	sub	sp, #20
    4884:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4886:	ldr	r0, [r0, #0]
    4888:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    488a:	ldr	r6, [pc, #224]	; (496c <MTPD::GetStorageInfo(unsigned long)+0xf0>)
    488c:	bl	1092 <MTPStorage_SD::readonly(unsigned long)>
    4890:	cmp	r0, #0
    4892:	mov	r0, r4
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4894:	mov.w	fp, #0
    4898:	ite	ne
    489a:	movne	r1, #1
    489c:	moveq	r1, #4
    489e:	bl	441a <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    48a2:	mov	r1, r7
    48a4:	ldr	r0, [r4, #0]
    48a6:	bl	1096 <MTPStorage_SD::has_directories(unsigned long)>
    48aa:	adds	r0, #1
    48ac:	uxth	r1, r0
    48ae:	mov	r0, r4
    48b0:	bl	441a <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    48b4:	mov	r0, r4
    48b6:	movs	r1, #0
    48b8:	bl	441a <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    48bc:	mov	r1, r7
    48be:	ldr	r0, [r4, #0]
    48c0:	bl	109a <MTPStorage_SD::totalSize(unsigned long)>
    48c4:	mov	r8, r1
    48c6:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    48c8:	mov	r1, r7
    48ca:	ldr	r0, [r4, #0]
    48cc:	bl	1f14 <MTPStorage_SD::usedSize(unsigned long)>
							  return write((const uint8_t *)str, strlen(str)); }
    48d0:	ldr	r3, [r6, #0]
    48d2:	mov	r9, r0
    48d4:	mov	sl, r1
    48d6:	ldr	r3, [r3, #4]
    48d8:	movs	r2, #5
    48da:	ldr	r1, [pc, #148]	; (4970 <MTPD::GetStorageInfo(unsigned long)+0xf4>)
    48dc:	mov	r0, r6
    48de:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    48e0:	movs	r3, #10
    48e2:	mov	r2, r5
    48e4:	mov	r0, r6
    48e6:	strd	r3, fp, [sp]
    48ea:	mov	r3, r8
    48ec:	bl	ce46 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    48f0:	mov	r0, r6
    48f2:	bl	cde0 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    48f6:	ldr	r3, [r6, #0]
    48f8:	ldr	r1, [pc, #120]	; (4974 <MTPD::GetStorageInfo(unsigned long)+0xf8>)
    48fa:	movs	r2, #5
    48fc:	ldr	r3, [r3, #4]
    48fe:	mov	r0, r6
    4900:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    4902:	movs	r3, #10
    4904:	mov	r2, r9
    4906:	mov	r0, r6
    4908:	str	r3, [sp, #0]
    490a:	mov	r3, sl
    490c:	str.w	fp, [sp, #4]
    4910:	bl	ce46 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    4914:	mov	r0, r6
    4916:	bl	cde0 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    491a:	movs	r2, #8
    491c:	mov	r0, r4
    491e:	add.w	r1, sp, r2
    4922:	strd	r5, r8, [sp, #8]
    4926:	bl	43e4 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    492a:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    492e:	mov.w	r2, #8
    4932:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    4934:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4938:	add.w	r1, sp, r2
    493c:	strd	r5, r3, [sp, #8]
    4940:	bl	43e4 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    4944:	mov	r0, r4
    4946:	mov.w	r1, #4294967295
    494a:	bl	44c4 <MTPD::write32(unsigned long)>
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
    494e:	ldr	r3, [r4, #0]
    writestring(name);  // storage descriptor
    4950:	mov	r0, r4
    4952:	add.w	r3, r3, r7, lsl #2
    4956:	ldr	r1, [r3, #4]
    4958:	bl	4430 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    495c:	ldr	r1, [pc, #24]	; (4978 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    495e:	mov	r0, r4
  }
    4960:	add	sp, #20
    4962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    4966:	b.w	4430 <MTPD::writestring(char const*)>
    496a:	nop
    496c:	.word	0x20001c8c
    4970:	.word	0x200010aa
    4974:	.word	0x200010b0
    4978:	.word	0x20000d24

0000497c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    497c:	movw	r2, #56331	; 0xdc0b
    4980:	cmp	r1, r2
    {
    4982:	push	{r0, r1, r4, r6, r7, lr}
    4984:	mov	r4, r0
      switch(p1)
    4986:	bhi.n	49a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    4988:	cmp.w	r1, #56320	; 0xdc00
    498c:	bls.n	49b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    498e:	sub.w	r3, r1, #56320	; 0xdc00
    4992:	subs	r3, #1
    4994:	cmp	r3, #10
    4996:	bhi.n	49b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4998:	tbb	[pc, r3]
    499c:	.word	0x413e2210
    49a0:	.word	0x69570e0e
    49a4:	.short	0x0e75
    49a6:	.byte	0x78
    49a7:	.byte	0x00
    49a8:	movw	r2, #56385	; 0xdc41
    49ac:	cmp	r1, r2
    49ae:	beq.n	4a92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    49b0:	movw	r2, #56388	; 0xdc44
    49b4:	cmp	r1, r2
    49b6:	beq.n	4a74 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    49b8:	add	sp, #8
    49ba:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    49bc:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    49c0:	mov	r0, r4
    49c2:	bl	441a <MTPD::write16(unsigned short)>
          write16(6);
    49c6:	mov	r0, r4
    49c8:	movs	r1, #6
    49ca:	bl	441a <MTPD::write16(unsigned short)>
          write8(0); //get
    49ce:	mov	r0, r4
    49d0:	movs	r1, #0
    49d2:	bl	4404 <MTPD::write8(unsigned char)>
          write32(0);
    49d6:	movs	r1, #0
    49d8:	mov	r0, r4
    49da:	bl	44c4 <MTPD::write32(unsigned long)>
          write32(0);
    49de:	b.n	4a02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    49e0:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    49e4:	mov	r0, r4
    49e6:	bl	441a <MTPD::write16(unsigned short)>
          write16(0x004);
    49ea:	movs	r1, #4
    49ec:	mov	r0, r4
    49ee:	bl	441a <MTPD::write16(unsigned short)>
          write8(0); //get
    49f2:	movs	r1, #0
    49f4:	mov	r0, r4
    49f6:	bl	4404 <MTPD::write8(unsigned char)>
          write16(0);
    49fa:	movs	r1, #0
    49fc:	mov	r0, r4
    49fe:	bl	441a <MTPD::write16(unsigned short)>
          write32(0);
    4a02:	mov	r0, r4
    4a04:	movs	r1, #0
    4a06:	bl	44c4 <MTPD::write32(unsigned long)>
          write8(0);
    4a0a:	movs	r1, #0
    4a0c:	mov	r0, r4
    }
    4a0e:	add	sp, #8
    4a10:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    4a14:	b.w	4404 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    4a18:	movw	r1, #56323	; 0xdc03
    4a1c:	b.n	49e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    4a1e:	movw	r1, #56324	; 0xdc04
    4a22:	bl	441a <MTPD::write16(unsigned short)>
          write16(0x008);
    4a26:	movs	r1, #8
    4a28:	mov	r0, r4
    4a2a:	bl	441a <MTPD::write16(unsigned short)>
          write8(0); //get
    4a2e:	movs	r1, #0
    4a30:	mov	r0, r4
    4a32:	bl	4404 <MTPD::write8(unsigned char)>
          write64(0);
    4a36:	movs	r2, #0
    4a38:	movs	r3, #0
    4a3a:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4a3e:	movs	r2, #8
    4a40:	mov	r1, sp
    4a42:	mov	r0, r4
    4a44:	bl	43e4 <MTPD::write(char const*, int)>
          write32(0);
    4a48:	b.n	4a02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    4a4a:	movw	r1, #56327	; 0xdc07
    4a4e:	bl	441a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4a52:	movw	r1, #65535	; 0xffff
    4a56:	mov	r0, r4
    4a58:	bl	441a <MTPD::write16(unsigned short)>
          write8(1); //get/set
    4a5c:	movs	r1, #1
          write8(0); //get
    4a5e:	mov	r0, r4
    4a60:	bl	4404 <MTPD::write8(unsigned char)>
          write8(0);
    4a64:	movs	r1, #0
    4a66:	mov	r0, r4
    4a68:	bl	4404 <MTPD::write8(unsigned char)>
    4a6c:	b.n	4a02 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    4a6e:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    4a72:	mov	r0, r4
          write16(0xDC44);
    4a74:	bl	441a <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4a78:	movw	r1, #65535	; 0xffff
    4a7c:	mov	r0, r4
    4a7e:	bl	441a <MTPD::write16(unsigned short)>
          write8(0); //get
    4a82:	movs	r1, #0
    4a84:	b.n	4a5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    4a86:	movw	r1, #56329	; 0xdc09
    4a8a:	b.n	4a72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    4a8c:	movw	r1, #56331	; 0xdc0b
    4a90:	b.n	49c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    4a92:	bl	441a <MTPD::write16(unsigned short)>
          write16(0x0A);
    4a96:	movs	r1, #10
    4a98:	mov	r0, r4
    4a9a:	movs	r6, #0
    4a9c:	bl	441a <MTPD::write16(unsigned short)>
          write8(0); //get
    4aa0:	movs	r7, #0
    4aa2:	movs	r1, #0
    4aa4:	mov	r0, r4
    4aa6:	bl	4404 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4aaa:	movs	r2, #8
    4aac:	mov	r1, sp
    4aae:	mov	r0, r4
    4ab0:	strd	r6, r7, [sp]
    4ab4:	bl	43e4 <MTPD::write(char const*, int)>
          write64(0);
    4ab8:	strd	r6, r7, [sp]
    4abc:	b.n	4a3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

00004abe <MTPD::GetObject(unsigned long)>:
    {
    4abe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ac2:	mov	r7, r0
      uint32_t size = storage_->GetSize(object_id);
    4ac4:	ldr	r0, [r0, #0]
      if (write_get_length_) {
    4ac6:	add.w	r5, r7, #4096	; 0x1000
    {
    4aca:	vpush	{d8}
    4ace:	sub	sp, #12
    4ad0:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4ad4:	bl	15d4 <MTPStorage_SD::GetSize(unsigned long)>
      if (write_get_length_) {
    4ad8:	ldrb.w	r4, [r5, #1064]	; 0x428
      uint32_t size = storage_->GetSize(object_id);
    4adc:	mov	r8, r0
      if (write_get_length_) {
    4ade:	cbz	r4, 4af4 <MTPD::GetObject(unsigned long)+0x36>
        write_length_ += size;
    4ae0:	ldr.w	r3, [r5, #1068]	; 0x42c
    4ae4:	add	r3, r0
    4ae6:	str.w	r3, [r5, #1068]	; 0x42c
    }
    4aea:	add	sp, #12
    4aec:	vpop	{d8}
    4af0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4af4:	mov.w	r3, #4096	; 0x1000
        uint32_t len = sizeof(MTPHeader);
    4af8:	movs	r6, #12
    4afa:	add.w	sl, r7, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4afe:	add.w	fp, r7, #32
        disk_pos=DISK_BUFFER_SIZE;
    4b02:	str.w	r3, [r5, #1060]	; 0x424
        while(pos<size)
    4b06:	cmp	r4, r8
    4b08:	bcs.n	4aea <MTPD::GetObject(unsigned long)+0x2c>
          if(disk_pos==DISK_BUFFER_SIZE)
    4b0a:	ldr.w	r3, [r5, #1060]	; 0x424
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4b0e:	sub.w	r9, r8, r4
          if(disk_pos==DISK_BUFFER_SIZE)
    4b12:	cmp.w	r3, #4096	; 0x1000
    4b16:	bne.n	4b36 <MTPD::GetObject(unsigned long)+0x78>
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    4b18:	cmp.w	r9, #4096	; 0x1000
    4b1c:	it	cc
    4b1e:	movcc	r3, r9
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4b20:	mov	r2, r4
    4b22:	vmov	r1, s16
    4b26:	ldr	r0, [r7, #0]
    4b28:	str	r3, [sp, #0]
    4b2a:	mov	r3, sl
    4b2c:	bl	15ea <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    4b30:	movs	r3, #0
    4b32:	str.w	r3, [r5, #1060]	; 0x424
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4b36:	rsb	r3, r6, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4b3a:	ldr.w	r1, [r5, #1060]	; 0x424
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b3e:	add.w	r0, fp, r6
    4b42:	cmp	r9, r3
    4b44:	it	cs
    4b46:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4b48:	rsb	r3, r1, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b4c:	add	r1, sl
    4b4e:	cmp	r9, r3
    4b50:	it	cs
    4b52:	movcs	r9, r3
    4b54:	mov	r2, r9
          len += to_copy;
    4b56:	add	r6, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4b58:	bl	a8dc <memcpy>
          disk_pos += to_copy;
    4b5c:	ldr.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    4b60:	cmp.w	r6, #512	; 0x200
          pos += to_copy;
    4b64:	add	r4, r9
          disk_pos += to_copy;
    4b66:	add	r3, r9
    4b68:	str.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    4b6c:	bne.n	4b06 <MTPD::GetObject(unsigned long)+0x48>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b6e:	mov	r1, r6
    4b70:	mov	r0, fp
            len=0;
    4b72:	movs	r6, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b74:	bl	42fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4b78:	b.n	4b06 <MTPD::GetObject(unsigned long)+0x48>

00004b7a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    {
    4b7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b7e:	mov	r6, r2
    4b80:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    4b82:	ldr	r0, [r0, #0]
    {
    4b84:	mov	r4, r3
      if (write_get_length_) {
    4b86:	add.w	r5, r8, #4096	; 0x1000
    {
    4b8a:	vpush	{d8}
    4b8e:	sub	sp, #20
    4b90:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    4b94:	bl	15d4 <MTPStorage_SD::GetSize(unsigned long)>
      size -= offset;
    4b98:	subs	r0, r0, r6
      if (write_get_length_) {
    4b9a:	ldrb.w	r3, [r5, #1064]	; 0x428
      if(NumBytes == 0xffffffff) NumBytes=size;
    4b9e:	cmp.w	r4, #4294967295
    4ba2:	it	eq
    4ba4:	moveq	r4, r0
      if (write_get_length_) {
    4ba6:	str	r3, [sp, #12]
    4ba8:	cmp	r4, r0
    4baa:	it	cs
    4bac:	movcs	r4, r0
    4bae:	cbz	r3, 4bc6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x4c>
        write_length_ += size;
    4bb0:	ldr.w	r3, [r5, #1068]	; 0x42c
    4bb4:	add	r3, r4
    4bb6:	str.w	r3, [r5, #1068]	; 0x42c
    }
    4bba:	mov	r0, r4
    4bbc:	add	sp, #20
    4bbe:	vpop	{d8}
    4bc2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    4bc6:	mov.w	r3, #4096	; 0x1000
        uint32_t len = sizeof(MTPHeader);
    4bca:	movs	r7, #12
    4bcc:	add.w	sl, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4bd0:	add.w	fp, r8, #32
        disk_pos=DISK_BUFFER_SIZE;
    4bd4:	str.w	r3, [r5, #1060]	; 0x424
        while(pos<size)
    4bd8:	cmp	r6, r4
    4bda:	bcs.n	4bba <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x40>
          if(disk_pos==DISK_BUFFER_SIZE)
    4bdc:	ldr.w	r3, [r5, #1060]	; 0x424
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4be0:	sub.w	r9, r4, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    4be4:	cmp.w	r3, #4096	; 0x1000
    4be8:	bne.n	4c0a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x90>
    4bea:	cmp.w	r9, #4096	; 0x1000
    4bee:	it	cc
    4bf0:	movcc	r3, r9
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4bf2:	mov	r2, r6
    4bf4:	vmov	r1, s16
    4bf8:	ldr.w	r0, [r8]
    4bfc:	str	r3, [sp, #0]
    4bfe:	mov	r3, sl
    4c00:	bl	15ea <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>
            disk_pos=0;
    4c04:	ldr	r3, [sp, #12]
    4c06:	str.w	r3, [r5, #1060]	; 0x424
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4c0a:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4c0e:	ldr.w	r1, [r5, #1060]	; 0x424
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4c12:	add.w	r0, fp, r7
    4c16:	cmp	r9, r3
    4c18:	it	cs
    4c1a:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4c1c:	rsb	r3, r1, #4096	; 0x1000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4c20:	add	r1, sl
    4c22:	cmp	r9, r3
    4c24:	it	cs
    4c26:	movcs	r9, r3
    4c28:	mov	r2, r9
          len += to_copy;
    4c2a:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4c2c:	bl	a8dc <memcpy>
          disk_pos += to_copy;
    4c30:	ldr.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    4c34:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4c38:	add	r6, r9
          disk_pos += to_copy;
    4c3a:	add	r3, r9
    4c3c:	str.w	r3, [r5, #1060]	; 0x424
          if(len==MTP_TX_SIZE)
    4c40:	bne.n	4bd8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5e>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c42:	mov	r1, r7
    4c44:	mov	r0, fp
            len=0;
    4c46:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c48:	bl	42fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4c4c:	b.n	4bd8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x5e>
	...

00004c50 <usb_init_events>:
    {
    4c50:	push	{r4, lr}
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    4c52:	ldr	r3, [pc, #48]	; (4c84 <usb_init_events+0x34>)
    4c54:	movs	r2, #0
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    4c56:	ldr	r4, [pc, #48]	; (4c88 <usb_init_events+0x38>)
        usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    4c58:	movs	r1, #32
    4c5a:	movs	r0, #5
    4c5c:	bl	ba74 <usb_config_tx>
        usb_config_rx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, rxEvent_event);
    4c60:	ldr	r3, [pc, #40]	; (4c8c <usb_init_events+0x3c>)
    4c62:	movs	r2, #0
    4c64:	movs	r1, #32
    4c66:	movs	r0, #5
    4c68:	bl	ba34 <usb_config_rx>
        usb_prepare_transfer(rx_event_transfer + 0, rx_event_buffer, MTP_EVENT_SIZE, 0);
    4c6c:	movs	r3, #0
    4c6e:	movs	r2, #32
    4c70:	mov	r0, r4
    4c72:	ldr	r1, [pc, #28]	; (4c90 <usb_init_events+0x40>)
    4c74:	bl	bab4 <usb_prepare_transfer>
        usb_receive(MTP_EVENT_ENDPOINT, rx_event_transfer + 0);
    4c78:	mov	r1, r4
    4c7a:	movs	r0, #5
    4c7c:	bl	bb04 <usb_receive>
    }
    4c80:	movs	r0, #1
    4c82:	pop	{r4, pc}
    4c84:	.word	0x000042dd
    4c88:	.word	0x200026e0
    4c8c:	.word	0x000042ed
    4c90:	.word	0x200026c0

00004c94 <MTPD::pull_packet(unsigned char*)>:

    int MTPD::pull_packet(uint8_t *data_buffer)
    {
    4c94:	push	{r4, lr}
    4c96:	mov	r4, r1
      while(!usb_mtp_available());
    4c98:	bl	c904 <usb_mtp_available>
    4c9c:	cmp	r0, #0
    4c9e:	beq.n	4c98 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    4ca0:	mov	r0, r4
    4ca2:	movs	r1, #60	; 0x3c
    }
    4ca4:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    4ca8:	b.w	c870 <usb_mtp_recv>

00004cac <MTPD::read(char*, unsigned long)>:
    {
    4cac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cb0:	mov	r8, r0
    4cb2:	mov	r5, r1
      if(!size) 
    4cb4:	mov	r4, r2
    4cb6:	ldr.w	fp, [pc, #84]	; 4d0c <MTPD::read(char*, unsigned long)+0x60>
    4cba:	cbz	r2, 4d02 <MTPD::read(char*, unsigned long)+0x56>
          memcpy(data, rx_data_buffer + index, to_copy);
    4cbc:	add.w	r9, r0, #544	; 0x220
          index=0;
    4cc0:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4cc4:	ldr.w	r6, [fp]
    4cc8:	rsb	r7, r6, #512	; 0x200
    4ccc:	cmp	r7, r4
    4cce:	it	cs
    4cd0:	movcs	r7, r4
        if (data) {
    4cd2:	cbz	r5, 4ce2 <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4cd4:	mov	r0, r5
          data += to_copy;
    4cd6:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4cd8:	mov	r2, r7
    4cda:	add.w	r1, r9, r6
    4cde:	bl	a8dc <memcpy>
        index += to_copy;
    4ce2:	add	r6, r7
        size -= to_copy;
    4ce4:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    4ce6:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    4cea:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    4cee:	bne.n	4cfc <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    4cf0:	mov	r1, r9
    4cf2:	mov	r0, r8
    4cf4:	bl	4c94 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4cf8:	str.w	sl, [fp]
      while (size) {
    4cfc:	cmp	r4, #0
    4cfe:	bne.n	4cc4 <MTPD::read(char*, unsigned long)+0x18>
    4d00:	b.n	4d06 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    4d02:	str.w	r2, [fp]
    }
    4d06:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d0a:	nop
    4d0c:	.word	0x200212a8

00004d10 <MTPD::ReadMTPHeader()>:
  {
    4d10:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    4d12:	movs	r2, #12
    4d14:	add	r1, sp, #4
    4d16:	bl	4cac <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    4d1a:	ldrh.w	r3, [sp, #8]
    4d1e:	cmp	r3, #2
      return header.len - 12;
    4d20:	itet	eq
    4d22:	ldreq	r0, [sp, #4]
      return 0;
    4d24:	movne	r0, #0
      return header.len - 12;
    4d26:	subeq	r0, #12
  }
    4d28:	add	sp, #20
    4d2a:	ldr.w	pc, [sp], #4

00004d2e <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    4d2e:	push	{r0, r1, r2, lr}
    4d30:	movs	r2, #1
    4d32:	add.w	r1, sp, #7
    4d36:	bl	4cac <MTPD::read(char*, unsigned long)>
    4d3a:	ldrb.w	r0, [sp, #7]
    4d3e:	add	sp, #12
    4d40:	ldr.w	pc, [sp], #4

00004d44 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4d44:	push	{r0, r1, r2, lr}
    4d46:	movs	r2, #2
    4d48:	add.w	r1, sp, #6
    4d4c:	bl	4cac <MTPD::read(char*, unsigned long)>
    4d50:	ldrh.w	r0, [sp, #6]
    4d54:	add	sp, #12
    4d56:	ldr.w	pc, [sp], #4

00004d5a <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4d5a:	push	{r0, r1, r2, lr}
    4d5c:	movs	r2, #4
    4d5e:	add.w	r1, sp, r2
    4d62:	bl	4cac <MTPD::read(char*, unsigned long)>
    4d66:	ldr	r0, [sp, #4]
    4d68:	add	sp, #12
    4d6a:	ldr.w	pc, [sp], #4

00004d6e <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    4d6e:	push	{r4, r5, r6, lr}
    4d70:	mov	r5, r1
    4d72:	mov	r6, r0
    int len = read8();
    4d74:	bl	4d2e <MTPD::read8()>
    if (!buffer) {
    4d78:	cbz	r5, 4d82 <MTPD::readstring(char*)+0x14>
    4d7a:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4d7c:	cmp	r5, r4
    4d7e:	bne.n	4d92 <MTPD::readstring(char*)+0x24>
  }
    4d80:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    4d82:	sxth	r2, r0
    4d84:	mov	r1, r5
    4d86:	mov	r0, r6
    4d88:	lsls	r2, r2, #1
  }
    4d8a:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    4d8e:	b.w	4cac <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    4d92:	mov	r0, r6
    4d94:	bl	4d44 <MTPD::read16()>
    4d98:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4d9c:	b.n	4d7c <MTPD::readstring(char*)+0xe>

00004d9e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    4d9e:	push	{r4, r5, lr}
    4da0:	mov	r4, r0
    4da2:	sub	sp, #260	; 0x104
    4da4:	mov	r5, r1
        ReadMTPHeader();
    4da6:	bl	4d10 <MTPD::ReadMTPHeader()>
        readstring(filename);
    4daa:	mov	r1, sp
    4dac:	mov	r0, r4
    4dae:	bl	4d6e <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    4db2:	mov	r2, sp
    4db4:	mov	r1, r5
    4db6:	ldr	r0, [r4, #0]
    4db8:	bl	18b4 <MTPStorage_SD::rename(unsigned long, char const*)>
    }
    4dbc:	movw	r2, #8193	; 0x2001
    4dc0:	movw	r3, #8197	; 0x2005
    4dc4:	cmp	r0, #0
    4dc6:	ite	ne
    4dc8:	movne	r0, r2
    4dca:	moveq	r0, r3
    4dcc:	add	sp, #260	; 0x104
    4dce:	pop	{r4, r5, pc}

00004dd0 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4dd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4dd4:	mov	r4, r0
    4dd6:	sub	sp, #268	; 0x10c
    4dd8:	mov	r6, r1
      pull_packet(rx_data_buffer);
    4dda:	add.w	r1, r0, #544	; 0x220
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4dde:	mov	r7, r2
      pull_packet(rx_data_buffer);
    4de0:	bl	4c94 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4de4:	movs	r2, #0
    4de6:	ldr	r3, [pc, #192]	; (4ea8 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd8>)
      int len=ReadMTPHeader();
    4de8:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4dea:	add.w	r9, sp, #8
        index=0;
    4dee:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    4df0:	bl	4d10 <MTPD::ReadMTPHeader()>
    4df4:	mov	r5, r0
      read32(); len -=4; // storage
    4df6:	mov	r0, r4
    4df8:	bl	4d5a <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    4dfc:	mov	r0, r4
    4dfe:	bl	4d44 <MTPD::read16()>
    4e02:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    4e06:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    4e08:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    4e0a:	subs	r3, r0, r3
      read16(); len -=2; // protection
    4e0c:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    4e0e:	rsbs	r8, r3, #0
    4e12:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    4e16:	bl	4d44 <MTPD::read16()>
      read32(); len -=4; // size
    4e1a:	mov	r0, r4
    4e1c:	bl	4d5a <MTPD::read32()>
      read16(); len -=2; // thumb format
    4e20:	mov	r0, r4
    4e22:	bl	4d44 <MTPD::read16()>
      read32(); len -=4; // thumb size
    4e26:	mov	r0, r4
    4e28:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // thumb width
    4e2c:	mov	r0, r4
    4e2e:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // thumb height
    4e32:	mov	r0, r4
    4e34:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // pix width
    4e38:	mov	r0, r4
    4e3a:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // pix height
    4e3e:	mov	r0, r4
    4e40:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // bit depth
    4e44:	mov	r0, r4
    4e46:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // parent
    4e4a:	mov	r0, r4
    4e4c:	bl	4d5a <MTPD::read32()>
      read16(); len -=2; // association type
    4e50:	mov	r0, r4
    4e52:	bl	4d44 <MTPD::read16()>
      read32(); len -=4; // association description
    4e56:	mov	r0, r4
    4e58:	bl	4d5a <MTPD::read32()>
      read32(); len -=4; // sequence number
    4e5c:	mov	r0, r4
    4e5e:	bl	4d5a <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4e62:	mov	r1, r9
    4e64:	mov	r0, r4
    4e66:	bl	4d6e <MTPD::readstring(char*)>
    4e6a:	mov	r0, r9
    4e6c:	bl	f490 <strlen>
    4e70:	adds	r0, #1
    4e72:	sub.w	r5, r5, r0, lsl #1
    4e76:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4e78:	cmp	r5, #3
    4e7a:	bgt.n	4e94 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc4>
      while(len) {read8(); len--;}
    4e7c:	cbnz	r5, 4e9e <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xce>
      return storage_->Create(store, parent, dir, filename);
    4e7e:	mov	r3, r8
    4e80:	mov	r2, r7
    4e82:	mov	r1, r6
    4e84:	ldr	r0, [r4, #0]
    4e86:	str.w	r9, [sp]
    4e8a:	bl	178e <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>
    }
    4e8e:	add	sp, #268	; 0x10c
    4e90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4e94:	mov	r0, r4
    4e96:	subs	r5, #4
    4e98:	bl	4d5a <MTPD::read32()>
    4e9c:	b.n	4e78 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4e9e:	mov	r0, r4
    4ea0:	subs	r5, #1
    4ea2:	bl	4d2e <MTPD::read8()>
    4ea6:	b.n	4e7c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4ea8:	.word	0x200212a8

00004eac <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4eac:	push	{r4, r5, r6, lr}
    4eae:	mov	r5, r1
    4eb0:	add.w	r1, r0, #544	; 0x220
    4eb4:	mov	r6, r2
    4eb6:	mov	r4, r0
    4eb8:	bl	4c94 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4ebc:	ldr	r3, [pc, #28]	; (4edc <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4ebe:	movs	r2, #0
    4ec0:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4ec2:	movw	r3, #56327	; 0xdc07
    4ec6:	cmp	r6, r3
    4ec8:	bne.n	4ed6 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4eca:	mov	r1, r5
    4ecc:	mov	r0, r4
    }
    4ece:	ldmia.w	sp!, {r4, r5, r6, lr}
    4ed2:	b.w	4d9e <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    4ed6:	movw	r0, #8197	; 0x2005
    4eda:	pop	{r4, r5, r6, pc}
    4edc:	.word	0x200212a8

00004ee0 <MTPD::SendObject()>:
    { 
    4ee0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4ee4:	add.w	r9, r0, #544	; 0x220
    { 
    4ee8:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4eea:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    4eee:	mov	r1, r9
      disk_pos=0;
    4ef0:	add.w	r6, r4, #4096	; 0x1000
      pull_packet(rx_data_buffer);
    4ef4:	bl	4c94 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4ef8:	ldr	r3, [pc, #208]	; (4fcc <MTPD::SendObject()+0xec>)
    4efa:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4efc:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4efe:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4f02:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4f04:	bl	4d10 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4f08:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4f0a:	mov	r7, r0
      disk_pos=0;
    4f0c:	str.w	r3, [r6, #1060]	; 0x424
      while((int)len>0)
    4f10:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4f12:	ldr.w	r3, [r6, #1060]	; 0x424
      while((int)len>0)
    4f16:	bgt.n	4f28 <MTPD::SendObject()+0x48>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    4f18:	ldr	r0, [r4, #0]
      if(disk_pos)
    4f1a:	cmp	r3, #0
    4f1c:	bne.n	4fb6 <MTPD::SendObject()+0xd6>
      storage_->close();
    4f1e:	ldr	r0, [r4, #0]
    4f20:	bl	1832 <MTPStorage_SD::close()>
      return true;
    4f24:	movs	r0, #1
    4f26:	b.n	4f70 <MTPD::SendObject()+0x90>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    4f28:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4f2c:	rsb	r5, r3, #4096	; 0x1000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4f30:	add.w	r0, fp, r3
    4f34:	add.w	r1, r9, sl
    4f38:	cmp	r8, r7
    4f3a:	it	cs
    4f3c:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    4f3e:	cmp	r5, r8
    4f40:	it	cs
    4f42:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    4f44:	mov	r2, r5
    4f46:	bl	a8dc <memcpy>
        disk_pos += to_copy;
    4f4a:	ldr.w	r2, [r6, #1060]	; 0x424
        len -= to_copy;
    4f4e:	subs	r3, r7, r5
        disk_pos += to_copy;
    4f50:	add	r2, r5
        if(disk_pos==DISK_BUFFER_SIZE)
    4f52:	cmp.w	r2, #4096	; 0x1000
        disk_pos += to_copy;
    4f56:	str.w	r2, [r6, #1060]	; 0x424
        if(disk_pos==DISK_BUFFER_SIZE)
    4f5a:	bne.n	4fa0 <MTPD::SendObject()+0xc0>
          if(storage_->write((const uint8_t *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    4f5c:	mov	r1, fp
    4f5e:	ldr	r0, [r4, #0]
    4f60:	str	r3, [sp, #4]
    4f62:	bl	1826 <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    4f66:	cmp.w	r0, #4096	; 0x1000
    4f6a:	ldr	r3, [sp, #4]
    4f6c:	bcs.n	4f76 <MTPD::SendObject()+0x96>
    4f6e:	movs	r0, #0
    }
    4f70:	add	sp, #12
    4f72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    4f76:	movs	r2, #0
    4f78:	str.w	r2, [r6, #1060]	; 0x424
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4f7c:	subs.w	r2, r8, r5
    4f80:	beq.n	4fa0 <MTPD::SendObject()+0xc0>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4f82:	add.w	r1, sl, r5
    4f86:	mov	r0, fp
    4f88:	str	r2, [sp, #4]
    4f8a:	add	r1, r9
    4f8c:	bl	a8dc <memcpy>
            disk_pos += bytes;
    4f90:	ldr.w	r3, [r6, #1060]	; 0x424
    4f94:	ldr	r2, [sp, #4]
    4f96:	add	r3, r2
    4f98:	str.w	r3, [r6, #1060]	; 0x424
            len -= bytes;
    4f9c:	sub.w	r3, r7, r8
        if(len>0)  // we have still data to be transfered
    4fa0:	cbz	r3, 4fb2 <MTPD::SendObject()+0xd2>
        { pull_packet(rx_data_buffer);
    4fa2:	mov	r1, r9
    4fa4:	mov	r0, r4
    4fa6:	str	r3, [sp, #4]
          index=0;
    4fa8:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    4fac:	bl	4c94 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4fb0:	ldr	r3, [sp, #4]
    4fb2:	mov	r7, r3
    4fb4:	b.n	4f10 <MTPD::SendObject()+0x30>
        if(storage_->write((const uint8_t *)disk_buffer, disk_pos)<disk_pos) return false;
    4fb6:	mov	r2, r3
    4fb8:	add.w	r1, r4, #1056	; 0x420
    4fbc:	bl	1826 <MTPStorage_SD::write(unsigned char const*, unsigned long)>
    4fc0:	ldr.w	r3, [r6, #1060]	; 0x424
    4fc4:	cmp	r0, r3
    4fc6:	bcs.n	4f1e <MTPD::SendObject()+0x3e>
    4fc8:	b.n	4f6e <MTPD::SendObject()+0x8e>
    4fca:	nop
    4fcc:	.word	0x200212a8

00004fd0 <MTPD::loop()>:
    { if(!usb_mtp_available()) return;
    4fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4fd4:	sub	sp, #60	; 0x3c
    4fd6:	mov	r4, r0
    4fd8:	bl	c904 <usb_mtp_available>
    4fdc:	cmp	r0, #0
    4fde:	beq.w	547a <MTPD::loop()+0x4aa>
      if(fetch_packet(rx_data_buffer))
    4fe2:	add.w	fp, r4, #544	; 0x220

    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4fe6:	movs	r1, #60	; 0x3c
    4fe8:	mov	r0, fp
    4fea:	bl	c870 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    4fee:	cmp	r0, #0
    4ff0:	beq.w	547a <MTPD::loop()+0x4aa>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4ff4:	ldr.w	r3, [r4, #552]	; 0x228
    4ff8:	ldr	r1, [pc, #808]	; (5324 <MTPD::loop()+0x354>)
    4ffa:	str	r3, [sp, #4]
    4ffc:	ldrh.w	r3, [r4, #548]	; 0x224
    5000:	ldr	r0, [pc, #804]	; (5328 <MTPD::loop()+0x358>)
    5002:	str	r3, [sp, #0]
    5004:	ldr.w	r3, [r4, #544]	; 0x220
    5008:	ldrh.w	r2, [r4, #550]	; 0x226
    500c:	bl	ce18 <Print::printf(char const*, ...)>
    5010:	ldr.w	r3, [r4, #544]	; 0x220
    5014:	cmp	r3, #12
    5016:	bls.n	5024 <MTPD::loop()+0x54>
    5018:	ldr.w	r2, [r4, #556]	; 0x22c
    501c:	ldr	r1, [pc, #780]	; (532c <MTPD::loop()+0x35c>)
    501e:	ldr	r0, [pc, #776]	; (5328 <MTPD::loop()+0x358>)
    5020:	bl	ce18 <Print::printf(char const*, ...)>
    5024:	ldr.w	r3, [r4, #544]	; 0x220
    5028:	cmp	r3, #16
    502a:	bls.n	5038 <MTPD::loop()+0x68>
    502c:	ldr.w	r2, [r4, #560]	; 0x230
    5030:	ldr	r1, [pc, #760]	; (532c <MTPD::loop()+0x35c>)
    5032:	ldr	r0, [pc, #756]	; (5328 <MTPD::loop()+0x358>)
    5034:	bl	ce18 <Print::printf(char const*, ...)>
    5038:	ldr.w	r3, [r4, #544]	; 0x220
    503c:	cmp	r3, #20
    503e:	bls.n	504c <MTPD::loop()+0x7c>
    5040:	ldr.w	r2, [r4, #564]	; 0x234
    5044:	ldr	r1, [pc, #740]	; (532c <MTPD::loop()+0x35c>)
    5046:	ldr	r0, [pc, #736]	; (5328 <MTPD::loop()+0x358>)
    5048:	bl	ce18 <Print::printf(char const*, ...)>
    504c:	ldr	r1, [pc, #736]	; (5330 <MTPD::loop()+0x360>)
        TID=id;
    504e:	add.w	r5, r4, #4096	; 0x1000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    5052:	ldr	r0, [pc, #724]	; (5328 <MTPD::loop()+0x358>)
        if(typ==2) return_code=0x2005; // we should only get cmds
    5054:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    5058:	bl	ce18 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    505c:	ldr.w	r3, [r4, #556]	; 0x22c
        int id = CONTAINER->transaction_id;
    5060:	ldr.w	r1, [r4, #552]	; 0x228
        int typ= CONTAINER->type;
    5064:	ldrh.w	r0, [r4, #548]	; 0x224
        int p1 = CONTAINER->params[0];
    5068:	mov	r6, r3
        int op = CONTAINER->op;
    506a:	ldrh.w	r2, [r4, #550]	; 0x226
        int len= CONTAINER->len;
    506e:	ldr.w	r9, [r4, #544]	; 0x220
        int p1 = CONTAINER->params[0];
    5072:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    5074:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    5076:	ldrd	r8, r3, [r4, #560]	; 0x230
        TID=id;
    507a:	str.w	r1, [r5, #1072]	; 0x430
        if(typ==2) return_code=0x2005; // we should only get cmds
    507e:	movw	r1, #8197	; 0x2005
    5082:	cmp	r0, #2
    5084:	it	eq
    5086:	moveq	r7, r1
        switch (op)
    5088:	movw	r0, #4123	; 0x101b
    508c:	cmp	r2, r0
    508e:	bhi.n	5118 <MTPD::loop()+0x148>
    5090:	cmp.w	r2, #4096	; 0x1000
    5094:	bhi.n	509c <MTPD::loop()+0xcc>
    5096:	movw	r7, #8197	; 0x2005
    509a:	b.n	519a <MTPD::loop()+0x1ca>
    509c:	sub.w	r2, r2, #4096	; 0x1000
    50a0:	subs	r2, #1
    50a2:	cmp	r2, #26
    50a4:	bhi.n	5096 <MTPD::loop()+0xc6>
    50a6:	add	r1, pc, #4	; (adr r1, 50ac <MTPD::loop()+0xdc>)
    50a8:	ldr.w	pc, [r1, r2, lsl #2]
    50ac:	.word	0x0000513b
    50b0:	.word	0x00005193
    50b4:	.word	0x00005475
    50b8:	.word	0x000051cf
    50bc:	.word	0x00005217
    50c0:	.word	0x00005265
    50c4:	.word	0x0000527b
    50c8:	.word	0x000052d5
    50cc:	.word	0x00005335
    50d0:	.word	0x00005097
    50d4:	.word	0x00005383
    50d8:	.word	0x0000539f
    50dc:	.word	0x000053b3
    50e0:	.word	0x00005097
    50e4:	.word	0x00005097
    50e8:	.word	0x00005097
    50ec:	.word	0x00005097
    50f0:	.word	0x00005097
    50f4:	.word	0x00005097
    50f8:	.word	0x000053c9
    50fc:	.word	0x00005417
    5100:	.word	0x00005097
    5104:	.word	0x00005097
    5108:	.word	0x00005097
    510c:	.word	0x00005465
    5110:	.word	0x00005481
    5114:	.word	0x000054ab
    5118:	add.w	r3, r2, #26496	; 0x6780
    511c:	adds	r3, #127	; 0x7f
    511e:	uxth	r3, r3
    5120:	cmp	r3, #3
    5122:	bhi.n	5096 <MTPD::loop()+0xc6>
    5124:	sub.w	r2, r2, #38912	; 0x9800
    5128:	subs	r2, #2
    512a:	cmp	r2, #2
    512c:	bhi.w	5502 <MTPD::loop()+0x532>
    5130:	tbh	[pc, r2, lsl #1]
    5134:	.word	0x0237020e
    5138:	.short	0x0260
            TRANSMIT(WriteDescriptor());
    513a:	movs	r6, #0
    513c:	movs	r3, #1
    513e:	mov	r0, r4
    5140:	strb.w	r3, [r5, #1064]	; 0x428
    5144:	str.w	r6, [r5, #1068]	; 0x42c
    5148:	bl	44d8 <MTPD::WriteDescriptor()>
    514c:	ldr.w	r3, [r5, #1068]	; 0x42c
    5150:	mov	r0, r4
    5152:	movs	r2, #12
    5154:	adds	r3, #12
    5156:	add	r1, sp, #24
    5158:	str	r3, [sp, #24]
    515a:	movs	r3, #2
    515c:	strh.w	r3, [sp, #28]
    5160:	ldrh.w	r3, [r4, #550]	; 0x226
    5164:	strh.w	r3, [sp, #30]
    5168:	ldr.w	r3, [r4, #552]	; 0x228
    516c:	str.w	r6, [r5, #1068]	; 0x42c
    5170:	strb.w	r6, [r5, #1064]	; 0x428
    5174:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5176:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    517a:	mov	r0, r4
    517c:	bl	44d8 <MTPD::WriteDescriptor()>
              TRANSMIT(getObjectPropValue(p1,p2));
    5180:	ldr	r1, [sp, #24]
    5182:	ubfx	r1, r1, #0, #9
    5186:	cbz	r1, 519a <MTPD::loop()+0x1ca>
    5188:	add.w	r0, r4, #32
    518c:	bl	42fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    5190:	b.n	519a <MTPD::loop()+0x1ca>
            openSession(p1);
    5192:	mov	r1, r6
    5194:	mov	r0, r4
    5196:	bl	43d4 <MTPD::openSession(unsigned long)>
            CONTAINER->type=3;
    519a:	movs	r3, #3
            CONTAINER->len=len;
    519c:	str.w	r9, [r4, #544]	; 0x220
            CONTAINER->op=return_code;
    51a0:	strh.w	r7, [r4, #550]	; 0x226
            memcpy(tx_data_buffer,rx_data_buffer,len);
    51a4:	adds	r4, #32
            CONTAINER->type=3;
    51a6:	strh.w	r3, [r4, #516]	; 0x204
            memcpy(tx_data_buffer,rx_data_buffer,len);
    51aa:	mov	r1, fp
            CONTAINER->transaction_id=id;
    51ac:	ldr	r3, [sp, #16]
            memcpy(tx_data_buffer,rx_data_buffer,len);
    51ae:	mov	r2, r9
            CONTAINER->transaction_id=id;
    51b0:	str.w	r3, [r4, #520]	; 0x208
            CONTAINER->params[0]=p1;
    51b4:	ldr	r3, [sp, #12]
    51b6:	str.w	r3, [r4, #524]	; 0x20c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    51ba:	mov	r0, r4
    51bc:	bl	a8dc <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    51c0:	mov	r1, r9
    51c2:	mov	r0, r4
    }
    51c4:	add	sp, #60	; 0x3c
    51c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    51ca:	b.w	42fc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    51ce:	movs	r6, #0
    51d0:	movs	r3, #1
    51d2:	mov	r0, r4
    51d4:	strb.w	r3, [r5, #1064]	; 0x428
    51d8:	str.w	r6, [r5, #1068]	; 0x42c
    51dc:	bl	4614 <MTPD::WriteStorageIDs()>
    51e0:	ldr.w	r3, [r5, #1068]	; 0x42c
    51e4:	mov	r0, r4
    51e6:	movs	r2, #12
    51e8:	adds	r3, #12
    51ea:	add	r1, sp, #24
    51ec:	str	r3, [sp, #24]
    51ee:	movs	r3, #2
    51f0:	strh.w	r3, [sp, #28]
    51f4:	ldrh.w	r3, [r4, #550]	; 0x226
    51f8:	strh.w	r3, [sp, #30]
    51fc:	ldr.w	r3, [r4, #552]	; 0x228
    5200:	str.w	r6, [r5, #1068]	; 0x42c
    5204:	strb.w	r6, [r5, #1064]	; 0x428
    5208:	str	r3, [sp, #32]
    { if (write_get_length_) 
    520a:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    520e:	mov	r0, r4
    5210:	bl	4614 <MTPD::WriteStorageIDs()>
    5214:	b.n	5180 <MTPD::loop()+0x1b0>
            TRANSMIT(GetStorageInfo(p1));
    5216:	mov.w	r8, #0
    521a:	movs	r3, #1
    521c:	mov	r1, r6
    521e:	mov	r0, r4
    5220:	strb.w	r3, [r5, #1064]	; 0x428
    5224:	str.w	r8, [r5, #1068]	; 0x42c
    5228:	bl	487c <MTPD::GetStorageInfo(unsigned long)>
    522c:	ldr.w	r3, [r5, #1068]	; 0x42c
    5230:	add	r1, sp, #24
    5232:	mov	r0, r4
    5234:	adds	r3, #12
    5236:	movs	r2, #12
    5238:	str	r3, [sp, #24]
    523a:	movs	r3, #2
    523c:	strh.w	r3, [sp, #28]
    5240:	ldrh.w	r3, [r4, #550]	; 0x226
    5244:	strh.w	r3, [sp, #30]
    5248:	ldr.w	r3, [r4, #552]	; 0x228
    524c:	str.w	r8, [r5, #1068]	; 0x42c
    5250:	strb.w	r8, [r5, #1064]	; 0x428
    5254:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5256:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    525a:	mov	r1, r6
    525c:	mov	r0, r4
    525e:	bl	487c <MTPD::GetStorageInfo(unsigned long)>
    5262:	b.n	5180 <MTPD::loop()+0x1b0>
            if (p2) 
    5264:	cmp.w	r8, #0
    5268:	bne.w	5602 <MTPD::loop()+0x632>
                p1 = GetNumObjects(p1, p3);
    526c:	mov	r2, r3
    526e:	mov	r1, r6
    5270:	mov	r0, r4
    5272:	bl	438c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    5276:	str	r0, [sp, #12]
    5278:	b.n	519a <MTPD::loop()+0x1ca>
            if (p2) 
    527a:	cmp.w	r8, #0
    527e:	bne.w	5602 <MTPD::loop()+0x632>
              TRANSMIT(GetObjectHandles(p1, p3));
    5282:	movs	r2, #1
    5284:	mov	r1, r6
    5286:	mov	r0, r4
    5288:	str.w	r8, [r5, #1068]	; 0x42c
    528c:	strb.w	r2, [r5, #1064]	; 0x428
    5290:	mov	r2, r3
    5292:	str	r3, [sp, #20]
    5294:	bl	4636 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    5298:	ldr.w	r2, [r5, #1068]	; 0x42c
    529c:	add	r1, sp, #24
    529e:	mov	r0, r4
    52a0:	adds	r2, #12
    52a2:	str	r2, [sp, #24]
    52a4:	movs	r2, #2
    52a6:	strh.w	r2, [sp, #28]
    52aa:	ldrh.w	r2, [r4, #550]	; 0x226
    52ae:	strh.w	r2, [sp, #30]
    52b2:	ldr.w	r2, [r4, #552]	; 0x228
    52b6:	str.w	r8, [r5, #1068]	; 0x42c
    52ba:	str	r2, [sp, #32]
    52bc:	movs	r2, #12
    52be:	strb.w	r8, [r5, #1064]	; 0x428
    { if (write_get_length_) 
    52c2:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    52c6:	ldr	r3, [sp, #20]
    52c8:	mov	r1, r6
    52ca:	mov	r0, r4
    52cc:	mov	r2, r3
    52ce:	bl	4636 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    52d2:	b.n	5180 <MTPD::loop()+0x1b0>
            TRANSMIT(GetObjectInfo(p1));
    52d4:	mov.w	r8, #0
    52d8:	movs	r3, #1
    52da:	mov	r1, r6
    52dc:	mov	r0, r4
    52de:	strb.w	r3, [r5, #1064]	; 0x428
    52e2:	str.w	r8, [r5, #1068]	; 0x42c
    52e6:	bl	4684 <MTPD::GetObjectInfo(unsigned long)>
    52ea:	ldr.w	r3, [r5, #1068]	; 0x42c
    52ee:	add	r1, sp, #24
    52f0:	mov	r0, r4
    52f2:	adds	r3, #12
    52f4:	movs	r2, #12
    52f6:	str	r3, [sp, #24]
    52f8:	movs	r3, #2
    52fa:	strh.w	r3, [sp, #28]
    52fe:	ldrh.w	r3, [r4, #550]	; 0x226
    5302:	strh.w	r3, [sp, #30]
    5306:	ldr.w	r3, [r4, #552]	; 0x228
    530a:	str.w	r8, [r5, #1068]	; 0x42c
    530e:	strb.w	r8, [r5, #1064]	; 0x428
    5312:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5314:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    5318:	mov	r1, r6
    531a:	mov	r0, r4
    531c:	bl	4684 <MTPD::GetObjectInfo(unsigned long)>
    5320:	b.n	5180 <MTPD::loop()+0x1b0>
    5322:	nop
    5324:	.word	0x200010e1
    5328:	.word	0x20001c8c
    532c:	.word	0x200010ef
    5330:	.word	0x20000d22
            TRANSMIT(GetObject(p1));
    5334:	mov.w	r8, #0
    5338:	movs	r3, #1
    533a:	mov	r1, r6
    533c:	mov	r0, r4
    533e:	strb.w	r3, [r5, #1064]	; 0x428
    5342:	str.w	r8, [r5, #1068]	; 0x42c
    5346:	bl	4abe <MTPD::GetObject(unsigned long)>
    534a:	ldr.w	r3, [r5, #1068]	; 0x42c
    534e:	add	r1, sp, #24
    5350:	mov	r0, r4
    5352:	adds	r3, #12
    5354:	movs	r2, #12
    5356:	str	r3, [sp, #24]
    5358:	movs	r3, #2
    535a:	strh.w	r3, [sp, #28]
    535e:	ldrh.w	r3, [r4, #550]	; 0x226
    5362:	strh.w	r3, [sp, #30]
    5366:	ldr.w	r3, [r4, #552]	; 0x228
    536a:	str.w	r8, [r5, #1068]	; 0x42c
    536e:	strb.w	r8, [r5, #1064]	; 0x428
    5372:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5374:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    5378:	mov	r1, r6
    537a:	mov	r0, r4
    537c:	bl	4abe <MTPD::GetObject(unsigned long)>
    5380:	b.n	5180 <MTPD::loop()+0x1b0>
              if (p2) {
    5382:	cmp.w	r8, #0
    5386:	bne.w	5602 <MTPD::loop()+0x632>
                if (!storage_->DeleteObject(p1)) {
    538a:	mov	r1, r6
    538c:	ldr	r0, [r4, #0]
    538e:	bl	16ec <MTPStorage_SD::DeleteObject(unsigned long)>
                  return_code = 0x2012; // partial deletion
    5392:	movw	r3, #8210	; 0x2012
    5396:	cmp	r0, #0
    5398:	it	eq
    539a:	moveq	r7, r3
    539c:	b.n	519a <MTPD::loop()+0x1ca>
              p3 = SendObjectInfo(p1, // storage
    539e:	mov	r2, r8
    53a0:	mov	r1, r6
    53a2:	mov	r0, r4
              len = 12 + 3 * 4;
    53a4:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    53a8:	bl	4dd0 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    53ac:	strd	r8, r0, [r4, #560]	; 0x230
              break;
    53b0:	b.n	519a <MTPD::loop()+0x1ca>
              if(!SendObject()) return_code = 0x2005;
    53b2:	mov	r0, r4
    53b4:	mov.w	r9, #12
    53b8:	bl	4ee0 <MTPD::SendObject()>
    53bc:	movw	r3, #8197	; 0x2005
    53c0:	cmp	r0, #0
    53c2:	it	eq
    53c4:	moveq	r7, r3
    53c6:	b.n	519a <MTPD::loop()+0x1ca>
              TRANSMIT(GetDevicePropDesc(p1));
    53c8:	mov.w	r8, #0
    53cc:	movs	r3, #1
    53ce:	mov	r1, r6
    53d0:	mov	r0, r4
    53d2:	strb.w	r3, [r5, #1064]	; 0x428
    53d6:	str.w	r8, [r5, #1068]	; 0x42c
    53da:	bl	4480 <MTPD::GetDevicePropDesc(unsigned long)>
    53de:	ldr.w	r3, [r5, #1068]	; 0x42c
    53e2:	add	r1, sp, #24
    53e4:	mov	r0, r4
    53e6:	adds	r3, #12
    53e8:	movs	r2, #12
    53ea:	str	r3, [sp, #24]
    53ec:	movs	r3, #2
    53ee:	strh.w	r3, [sp, #28]
    53f2:	ldrh.w	r3, [r4, #550]	; 0x226
    53f6:	strh.w	r3, [sp, #30]
    53fa:	ldr.w	r3, [r4, #552]	; 0x228
    53fe:	str.w	r8, [r5, #1068]	; 0x42c
    5402:	strb.w	r8, [r5, #1064]	; 0x428
    5406:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5408:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    540c:	mov	r1, r6
    540e:	mov	r0, r4
    5410:	bl	4480 <MTPD::GetDevicePropDesc(unsigned long)>
    5414:	b.n	5180 <MTPD::loop()+0x1b0>
              TRANSMIT(GetDevicePropValue(p1));
    5416:	mov.w	r8, #0
    541a:	movs	r3, #1
    541c:	mov	r1, r6
    541e:	mov	r0, r4
    5420:	strb.w	r3, [r5, #1064]	; 0x428
    5424:	str.w	r8, [r5, #1068]	; 0x42c
    5428:	bl	446c <MTPD::GetDevicePropValue(unsigned long)>
    542c:	ldr.w	r3, [r5, #1068]	; 0x42c
    5430:	add	r1, sp, #24
    5432:	mov	r0, r4
    5434:	adds	r3, #12
    5436:	movs	r2, #12
    5438:	str	r3, [sp, #24]
    543a:	movs	r3, #2
    543c:	strh.w	r3, [sp, #28]
    5440:	ldrh.w	r3, [r4, #550]	; 0x226
    5444:	strh.w	r3, [sp, #30]
    5448:	ldr.w	r3, [r4, #552]	; 0x228
    544c:	str.w	r8, [r5, #1068]	; 0x42c
    5450:	strb.w	r8, [r5, #1064]	; 0x428
    5454:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5456:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    545a:	mov	r1, r6
    545c:	mov	r0, r4
    545e:	bl	446c <MTPD::GetDevicePropValue(unsigned long)>
    5462:	b.n	5180 <MTPD::loop()+0x1b0>
              return_code = moveObject(p1,p2,p3);
    5464:	mov	r2, r8
    5466:	mov	r1, r6
    5468:	mov	r0, r4
              len = 12;
    546a:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    546e:	bl	43ae <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    5472:	mov	r7, r0
        if(return_code)
    5474:	cmp	r7, #0
    5476:	bne.w	519a <MTPD::loop()+0x1ca>
    }
    547a:	add	sp, #60	; 0x3c
    547c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    5480:	mov	r2, r8
    5482:	mov	r1, r6
    5484:	mov	r0, r4
              if(!return_code) 
    5486:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    548a:	bl	43ca <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    548e:	cmp	r0, #0
    5490:	itete	eq
    5492:	moveq	r3, r6
    5494:	movne	r3, r0
    5496:	moveq.w	r9, #12
    549a:	movne.w	r9, #16
    549e:	str	r3, [sp, #12]
    54a0:	movw	r3, #8193	; 0x2001
    54a4:	it	ne
    54a6:	movne	r7, r3
    54a8:	b.n	519a <MTPD::loop()+0x1ca>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    54aa:	mov.w	sl, #0
    54ae:	movs	r2, #1
    54b0:	mov	r1, r6
    54b2:	mov	r0, r4
    54b4:	strb.w	r2, [r5, #1064]	; 0x428
    54b8:	mov	r2, r8
    54ba:	str.w	sl, [r5, #1068]	; 0x42c
    54be:	str	r3, [sp, #20]
    54c0:	bl	4b7a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    54c4:	ldr.w	r2, [r5, #1068]	; 0x42c
    54c8:	add	r1, sp, #24
    54ca:	adds	r2, #12
    54cc:	str	r2, [sp, #24]
    54ce:	movs	r2, #2
    54d0:	strh.w	r2, [sp, #28]
    54d4:	ldrh.w	r2, [r4, #550]	; 0x226
    54d8:	strh.w	r2, [sp, #30]
    54dc:	ldr.w	r2, [r4, #552]	; 0x228
    54e0:	str.w	sl, [r5, #1068]	; 0x42c
    54e4:	strb.w	sl, [r5, #1064]	; 0x428
    54e8:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    54ec:	mov	r0, r4
    54ee:	movs	r2, #32
    54f0:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    54f4:	ldr	r3, [sp, #20]
    54f6:	mov	r2, r8
    54f8:	mov	r1, r6
    54fa:	mov	r0, r4
    54fc:	bl	4b7a <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    5500:	b.n	5180 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropsSupported(p1));
    5502:	mov.w	r8, #0
    5506:	movs	r3, #1
    5508:	mov	r1, r6
    550a:	mov	r0, r4
    550c:	strb.w	r3, [r5, #1064]	; 0x428
    5510:	str.w	r8, [r5, #1068]	; 0x42c
    5514:	bl	4770 <MTPD::getObjectPropsSupported(unsigned long)>
    5518:	ldr.w	r3, [r5, #1068]	; 0x42c
    551c:	add	r1, sp, #24
    551e:	mov	r0, r4
    5520:	adds	r3, #12
    5522:	movs	r2, #12
    5524:	str	r3, [sp, #24]
    5526:	movs	r3, #2
    5528:	strh.w	r3, [sp, #28]
    552c:	ldrh.w	r3, [r4, #550]	; 0x226
    5530:	strh.w	r3, [sp, #30]
    5534:	ldr.w	r3, [r4, #552]	; 0x228
    5538:	str.w	r8, [r5, #1068]	; 0x42c
    553c:	strb.w	r8, [r5, #1064]	; 0x428
    5540:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5542:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    5546:	mov	r1, r6
    5548:	mov	r0, r4
    554a:	bl	4770 <MTPD::getObjectPropsSupported(unsigned long)>
    554e:	b.n	5180 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropDesc(p1,p2));
    5550:	mov.w	sl, #0
    5554:	movs	r3, #1
    5556:	mov	r2, r8
    5558:	mov	r1, r6
    555a:	mov	r0, r4
    555c:	strb.w	r3, [r5, #1064]	; 0x428
    5560:	str.w	sl, [r5, #1068]	; 0x42c
    5564:	bl	497c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5568:	ldr.w	r3, [r5, #1068]	; 0x42c
    556c:	add	r1, sp, #24
    556e:	mov	r0, r4
    5570:	adds	r3, #12
    5572:	movs	r2, #12
    5574:	str	r3, [sp, #24]
    5576:	movs	r3, #2
    5578:	strh.w	r3, [sp, #28]
    557c:	ldrh.w	r3, [r4, #550]	; 0x226
    5580:	strh.w	r3, [sp, #30]
    5584:	ldr.w	r3, [r4, #552]	; 0x228
    5588:	str.w	sl, [r5, #1068]	; 0x42c
    558c:	strb.w	sl, [r5, #1064]	; 0x428
    5590:	str	r3, [sp, #32]
    { if (write_get_length_) 
    5592:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    5596:	mov	r2, r8
    5598:	mov	r1, r6
    559a:	mov	r0, r4
    559c:	bl	497c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    55a0:	b.n	5180 <MTPD::loop()+0x1b0>
              TRANSMIT(getObjectPropValue(p1,p2));
    55a2:	mov.w	sl, #0
    55a6:	movs	r3, #1
    55a8:	mov	r2, r8
    55aa:	mov	r1, r6
    55ac:	mov	r0, r4
    55ae:	strb.w	r3, [r5, #1064]	; 0x428
    55b2:	str.w	sl, [r5, #1068]	; 0x42c
    55b6:	bl	47a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    55ba:	ldr.w	r3, [r5, #1068]	; 0x42c
    55be:	add	r1, sp, #24
    55c0:	mov	r0, r4
    55c2:	adds	r3, #12
    55c4:	movs	r2, #12
    55c6:	str	r3, [sp, #24]
    55c8:	movs	r3, #2
    55ca:	strh.w	r3, [sp, #28]
    55ce:	ldrh.w	r3, [r4, #550]	; 0x226
    55d2:	strh.w	r3, [sp, #30]
    55d6:	ldr.w	r3, [r4, #552]	; 0x228
    55da:	str.w	sl, [r5, #1068]	; 0x42c
    55de:	strb.w	sl, [r5, #1064]	; 0x428
    55e2:	str	r3, [sp, #32]
    { if (write_get_length_) 
    55e4:	bl	4314 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    55e8:	mov	r2, r8
    55ea:	mov	r1, r6
    55ec:	mov	r0, r4
    55ee:	bl	47a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    55f2:	b.n	5180 <MTPD::loop()+0x1b0>
              return_code = setObjectPropValue(p1,p2);
    55f4:	mov	r2, r8
    55f6:	mov	r1, r6
    55f8:	mov	r0, r4
    55fa:	bl	4eac <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    55fe:	mov	r7, r0
              break;
    5600:	b.n	5474 <MTPD::loop()+0x4a4>
                return_code = 0x2014; // spec by format unsupported
    5602:	movw	r7, #8212	; 0x2014
    5606:	b.n	519a <MTPD::loop()+0x1ca>

00005608 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    5608:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    560a:	cbz	r3, 5642 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    560c:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    560e:	movw	r5, #513	; 0x201
    5612:	str	r5, [r4, #16]
    5614:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5616:	cbz	r1, 5644 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    5618:	ldrb.w	r5, [r1], #1
    561c:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    561e:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5620:	str	r5, [r6, #100]	; 0x64
    5622:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    5624:	ldr	r6, [r5, #112]	; 0x70
    5626:	lsls	r6, r6, #30
    5628:	bmi.n	5634 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    562a:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    562c:	cbz	r2, 5632 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    562e:	strb.w	r5, [r2], #1
				count_read--;
    5632:	subs	r4, #1
    5634:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    5636:	ldr	r5, [r5, #20]
    5638:	lsls	r5, r5, #31
    563a:	bpl.n	5622 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    563c:	cmp	r3, #0
    563e:	bne.n	5616 <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    5640:	cbnz	r4, 564a <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    5642:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    5644:	ldrb.w	r5, [r0, #60]	; 0x3c
    5648:	b.n	561c <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    564a:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    564c:	ldr	r1, [r3, #112]	; 0x70
    564e:	lsls	r1, r1, #30
    5650:	bmi.n	5640 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    5652:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    5654:	cbz	r2, 565a <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    5656:	strb.w	r3, [r2], #1
			count_read--;
    565a:	subs	r4, #1
    565c:	b.n	5640 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

0000565e <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    565e:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    5660:	ldr	r2, [r3, #0]
    5662:	ldr	r1, [r2, #0]
    5664:	ldr	r2, [r3, #4]
    5666:	tst	r1, r2
void SPIClass::end() {
    5668:	push	{r4, lr}
    566a:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    566c:	beq.n	56a4 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    566e:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    5670:	movs	r1, #0
    5672:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    5674:	movs	r1, #5
    5676:	ldrb	r2, [r0, #16]
    5678:	add	r3, r2
    567a:	ldrb	r0, [r3, #16]
    567c:	bl	c5b4 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    5680:	ldrb	r2, [r4, #17]
    5682:	ldr	r3, [r4, #4]
    5684:	movs	r1, #5
    5686:	add	r3, r2
    5688:	ldrb.w	r0, [r3, #36]	; 0x24
    568c:	bl	c5b4 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5690:	ldr	r3, [r4, #4]
    5692:	ldrb	r2, [r4, #18]
    5694:	movs	r1, #5
    5696:	add	r3, r2
	}
}
    5698:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    569c:	ldrb.w	r0, [r3, #56]	; 0x38
    56a0:	b.w	c5b4 <pinMode>
}
    56a4:	pop	{r4, pc}

000056a6 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    56a6:	ldrb.w	r2, [r0, #163]	; 0xa3
    56aa:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    56ae:	subs	r0, r2, r0
    56b0:	bx	lr

000056b2 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    56b2:	ldrb.w	r3, [r0, #162]	; 0xa2
    56b6:	ldrb.w	r2, [r0, #163]	; 0xa3
    56ba:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    56bc:	itttt	hi
    56be:	addhi	r2, r3, #1
    56c0:	strbhi.w	r2, [r0, #162]	; 0xa2
    56c4:	addhi	r0, r0, r3
    56c6:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    56c8:	it	ls
    56ca:	movls.w	r0, #4294967295
	}
    56ce:	bx	lr

000056d0 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    56d0:	ldrb.w	r3, [r0, #162]	; 0xa2
    56d4:	ldrb.w	r2, [r0, #163]	; 0xa3
    56d8:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    56da:	itte	hi
    56dc:	addhi	r0, r0, r3
    56de:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    56e0:	movls.w	r0, #4294967295
	}
    56e4:	bx	lr

000056e6 <TwoWire::flush()>:
	virtual void flush(void) {
	}
    56e6:	bx	lr

000056e8 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    56e8:	ldrh.w	r3, [r0, #304]	; 0x130
    56ec:	cbz	r3, 56fa <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    56ee:	ldrb.w	r3, [r0, #303]	; 0x12f
    56f2:	cmp	r3, #136	; 0x88
    56f4:	bls.n	56fe <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    56f6:	movs	r3, #1
    56f8:	str	r3, [r0, #4]
			return 0;
    56fa:	movs	r0, #0
    56fc:	bx	lr
		txBuffer[txBufferLength++] = data;
    56fe:	adds	r2, r3, #1
    5700:	strb.w	r2, [r0, #303]	; 0x12f
    5704:	add	r0, r3
    5706:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    570a:	movs	r0, #1
    570c:	bx	lr

0000570e <TwoWire::write(unsigned char const*, unsigned int)>:
{
    570e:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    5710:	ldrh.w	r3, [r0, #304]	; 0x130
{
    5714:	mov	r5, r0
    5716:	mov	r4, r2
	if (transmitting || slave_mode) {
    5718:	cbz	r3, 5746 <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    571a:	ldrb.w	r3, [r0, #303]	; 0x12f
    571e:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    5722:	cmp	r4, r2
    5724:	ittt	hi
    5726:	movhi	r0, #1
    5728:	movhi	r4, r2
    572a:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    572c:	add.w	r0, r5, #165	; 0xa5
    5730:	mov	r2, r4
    5732:	add	r0, r3
    5734:	bl	a8dc <memcpy>
		txBufferLength += quantity;
    5738:	ldrb.w	r3, [r5, #303]	; 0x12f
    573c:	add	r3, r4
    573e:	strb.w	r3, [r5, #303]	; 0x12f
}
    5742:	mov	r0, r4
    5744:	pop	{r3, r4, r5, pc}
	return 0;
    5746:	mov	r4, r3
    5748:	b.n	5742 <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

0000574c <TwoWire::force_clock()>:
{
    574c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5750:	ldr	r1, [r0, #20]
{
    5752:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    5754:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5756:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    575a:	ldr	r4, [pc, #244]	; (5850 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    575c:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5760:	ldr.w	r8, [pc, #244]	; 5858 <TwoWire::force_clock()+0x10c>
    5764:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    5766:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    5768:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    576a:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    576e:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    5772:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    5774:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    5778:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    577c:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    5780:	lsls	r7, r3, #4
    5782:	add.w	r3, r4, r3, lsl #4
    5786:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5788:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    578c:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    5790:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5792:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    5794:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5798:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    579a:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    579c:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    579e:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    57a2:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    57a6:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    57a8:	ldr	r4, [pc, #168]	; (5854 <TwoWire::force_clock()+0x108>)
    57aa:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    57ac:	ldr.w	lr, [pc, #172]	; 585c <TwoWire::force_clock()+0x110>
    57b0:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    57b2:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    57b4:	ldr.w	r3, [lr]
    57b8:	udiv	r3, r3, r8
    57bc:	mov.w	r8, #10
    57c0:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    57c4:	ldr.w	r8, [r4, #4]
    57c8:	sub.w	r8, r8, r7
    57cc:	cmp	r3, r8
    57ce:	bhi.n	57c4 <TwoWire::force_clock()+0x78>
    57d0:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    57d2:	ldr	r7, [pc, #128]	; (5854 <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    57d4:	ldr.w	sl, [pc, #128]	; 5858 <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    57d8:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    57da:	tst.w	r4, ip
    57de:	beq.n	57e6 <TwoWire::force_clock()+0x9a>
    57e0:	ldr	r4, [r0, #8]
    57e2:	tst	r4, r5
    57e4:	bne.n	584a <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    57e6:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    57ea:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    57ee:	ldr.w	r4, [lr]
    57f2:	udiv	r4, r4, sl
    57f6:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    57fa:	ldr.w	r8, [r7, #4]
    57fe:	sub.w	r8, r8, fp
    5802:	cmp	r4, r8
    5804:	bhi.n	57fa <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    5806:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    580a:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    580e:	ldr.w	r4, [lr]
    5812:	udiv	r4, r4, sl
    5816:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    581a:	ldr.w	r8, [r7, #4]
    581e:	sub.w	r8, r8, fp
    5822:	cmp	r4, r8
    5824:	bhi.n	581a <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    5826:	subs	r3, #1
    5828:	bne.n	57d8 <TwoWire::force_clock()+0x8c>
	bool ret = false;
    582a:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    582c:	ldrb	r3, [r2, #24]
    582e:	add.w	r3, r1, r3, lsl #4
    5832:	ldr	r3, [r3, #12]
    5834:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    5838:	ldrb	r3, [r2, #25]
    583a:	ldr	r2, [sp, #4]
    583c:	add.w	r1, r1, r3, lsl #4
    5840:	ldr	r3, [r1, #44]	; 0x2c
    5842:	str	r3, [r2, #0]
}
    5844:	add	sp, #12
    5846:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    584a:	movs	r0, #1
    584c:	b.n	582c <TwoWire::force_clock()+0xe0>
    584e:	nop
    5850:	.word	0x200005b4
    5854:	.word	0xe0001000
    5858:	.word	0x000f4240
    585c:	.word	0x20001c88

00005860 <TwoWire::wait_idle()>:
	return systick_millis_count;
    5860:	ldr	r2, [pc, #44]	; (5890 <TwoWire::wait_idle()+0x30>)
{
    5862:	push	{r4, lr}
    5864:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5866:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    5868:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    586a:	tst.w	r3, #33554432	; 0x2000000
    586e:	bne.n	587a <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    5870:	mov.w	r3, #32512	; 0x7f00
	return true;
    5874:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    5876:	str	r3, [r4, #20]
}
    5878:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    587a:	lsls	r3, r3, #7
    587c:	bmi.n	5870 <TwoWire::wait_idle()+0x10>
    587e:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    5880:	subs	r3, r3, r1
		if (timeout > 16) {
    5882:	cmp	r3, #16
    5884:	bls.n	5868 <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    5886:	bl	574c <TwoWire::force_clock()>
    588a:	cmp	r0, #0
    588c:	bne.n	5870 <TwoWire::wait_idle()+0x10>
    588e:	b.n	5878 <TwoWire::wait_idle()+0x18>
    5890:	.word	0x20021bd0

00005894 <TwoWire::endTransmission(unsigned char)>:
{
    5894:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    5898:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    589c:	mov	r7, r0
    589e:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    58a0:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    58a2:	cmp.w	r8, #0
    58a6:	beq.n	5906 <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    58a8:	bl	5860 <TwoWire::wait_idle()>
    58ac:	cbz	r0, 5906 <TwoWire::endTransmission(unsigned char)+0x72>
    58ae:	ldr.w	r9, [pc, #196]	; 5974 <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    58b2:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    58b4:	mov.w	fp, #512	; 0x200
    58b8:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    58bc:	cmp	r6, r8
    58be:	bhi.n	58f8 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    58c0:	ldr	r3, [r4, #92]	; 0x5c
    58c2:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    58c6:	cmp	r3, #3
    58c8:	bhi.n	58f8 <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    58ca:	cbnz	r6, 58de <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    58cc:	ldrb.w	r2, [r7, #165]	; 0xa5
    58d0:	orr.w	r2, r2, #1024	; 0x400
    58d4:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    58d6:	movs	r2, #1
				fifo_used++;
    58d8:	adds	r3, #1
    58da:	mov	r6, r2
    58dc:	b.n	58c6 <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    58de:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    58e0:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    58e4:	bcs.n	58f0 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    58e6:	add	r6, r7
    58e8:	ldrb.w	r1, [r6, #165]	; 0xa5
    58ec:	str	r1, [r4, #96]	; 0x60
    58ee:	b.n	58d8 <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    58f0:	cbz	r5, 58f6 <TwoWire::endTransmission(unsigned char)+0x62>
    58f2:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    58f6:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    58f8:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    58fa:	lsls	r2, r3, #20
    58fc:	bpl.n	590a <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    58fe:	ldr	r3, [r4, #16]
    5900:	orr.w	r3, r3, #768	; 0x300
    5904:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    5906:	movs	r5, #4
    5908:	b.n	5918 <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    590a:	lsls	r0, r3, #19
    590c:	bpl.n	591e <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    590e:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    5910:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5912:	orr.w	r3, r3, #768	; 0x300
    5916:	str	r3, [r4, #16]
}
    5918:	mov	r0, r5
    591a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    591e:	lsls	r1, r3, #21
    5920:	bpl.n	5934 <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5922:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5924:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5926:	orr.w	r3, r3, #768	; 0x300
    592a:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    592c:	mov.w	r3, #512	; 0x200
    5930:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    5932:	b.n	5918 <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    5934:	lsls	r2, r3, #18
    5936:	bmi.n	5944 <TwoWire::endTransmission(unsigned char)+0xb0>
    5938:	ldr.w	r2, [r9]
    593c:	sub.w	r2, r2, sl
    5940:	cmp	r2, #50	; 0x32
    5942:	bls.n	5954 <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5944:	ldr	r3, [r4, #16]
    5946:	orr.w	r3, r3, #768	; 0x300
    594a:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    594c:	mov.w	r3, #512	; 0x200
    5950:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    5952:	b.n	5906 <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    5954:	cmp	r6, r8
    5956:	bls.n	5968 <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5958:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    595a:	ands.w	r2, r2, #7
    595e:	bne.n	5968 <TwoWire::endTransmission(unsigned char)+0xd4>
    5960:	lsls	r3, r3, #22
    5962:	bmi.n	596e <TwoWire::endTransmission(unsigned char)+0xda>
    5964:	cmp	r5, #0
    5966:	beq.n	5918 <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    5968:	bl	caa0 <yield>
	}
    596c:	b.n	58bc <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    596e:	mov	r5, r2
    5970:	b.n	5918 <TwoWire::endTransmission(unsigned char)+0x84>
    5972:	nop
    5974:	.word	0x20021bd0

00005978 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    5978:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    597c:	mov	r7, r0
    597e:	mov	r6, r1
    5980:	mov	r9, r2
    5982:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5984:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    5986:	bl	5860 <TwoWire::wait_idle()>
    598a:	cmp	r0, #0
    598c:	beq.n	5a84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    598e:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    5990:	cmp.w	r9, #1
    5994:	ldr.w	sl, [pc, #240]	; 5a88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    5998:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    599c:	uxtb	r6, r6
    599e:	it	cc
    59a0:	movcc.w	r9, #1
    59a4:	ldr.w	fp, [sl]
    59a8:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    59ac:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    59b0:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    59b4:	cmp	r4, #2
    59b6:	bhi.n	59d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    59b8:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    59ba:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    59be:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    59c2:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    59c6:	orr.w	r2, r2, #256	; 0x100
    59ca:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    59cc:	subs	r0, r3, r4
    59ce:	cmp	r0, #3
    59d0:	bhi.n	59d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    59d2:	cmp	r4, #3
    59d4:	bne.n	5a04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    59d6:	ldrb.w	r3, [r7, #163]	; 0xa3
    59da:	cmp	r3, #135	; 0x87
    59dc:	bls.n	5a1e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    59de:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    59e0:	lsls	r1, r3, #20
    59e2:	bpl.n	5a40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    59e4:	ldr	r3, [r5, #16]
    59e6:	orr.w	r3, r3, #768	; 0x300
    59ea:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    59ec:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    59ee:	tst.w	r3, #458752	; 0x70000
    59f2:	beq.n	59fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    59f4:	ldr	r3, [r5, #16]
    59f6:	orr.w	r3, r3, #512	; 0x200
    59fa:	str	r3, [r5, #16]
	return rxBufferLength;
    59fc:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    5a00:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    5a04:	cbnz	r4, 5a0c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5a06:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    5a08:	adds	r4, #1
				tx_fifo--;
    5a0a:	b.n	59cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    5a0c:	cmp	r4, #1
    5a0e:	bne.n	5a14 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5a10:	str	r2, [r5, #96]	; 0x60
    5a12:	b.n	5a08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5a14:	cmp.w	r8, #0
    5a18:	beq.n	5a08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    5a1a:	str	r1, [r5, #96]	; 0x60
    5a1c:	b.n	5a08 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5a1e:	ldr	r2, [r5, #92]	; 0x5c
    5a20:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    5a24:	cmp	r2, #0
    5a26:	beq.n	59de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    5a28:	ldrb.w	r3, [r7, #163]	; 0xa3
    5a2c:	cmp	r3, #135	; 0x87
    5a2e:	bhi.n	59de <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    5a30:	ldr	r1, [r5, #112]	; 0x70
    5a32:	adds	r0, r3, #1
    5a34:	add	r3, r7
				rx_fifo--;
    5a36:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    5a38:	strb.w	r0, [r7, #163]	; 0xa3
    5a3c:	strb	r1, [r3, #26]
				rx_fifo--;
    5a3e:	b.n	5a24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    5a40:	tst.w	r3, #9216	; 0x2400
    5a44:	bne.n	5a52 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    5a46:	ldr.w	r2, [sl]
    5a4a:	sub.w	r2, r2, fp
    5a4e:	cmp	r2, #50	; 0x32
    5a50:	bls.n	5a62 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5a52:	ldr	r3, [r5, #16]
    5a54:	orr.w	r3, r3, #768	; 0x300
    5a58:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    5a5a:	mov.w	r3, #512	; 0x200
    5a5e:	str	r3, [r5, #96]	; 0x60
			break;
    5a60:	b.n	59ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    5a62:	ldrb.w	r2, [r7, #163]	; 0xa3
    5a66:	cmp	r2, r9
    5a68:	bcc.n	5a7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    5a6a:	cmp	r4, #2
    5a6c:	bls.n	5a7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    5a6e:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    5a70:	lsls	r2, r2, #29
    5a72:	bne.n	5a7e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    5a74:	lsls	r3, r3, #22
    5a76:	bmi.n	59ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    5a78:	cmp.w	r8, #0
    5a7c:	beq.n	59ec <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    5a7e:	bl	caa0 <yield>
	}
    5a82:	b.n	59b4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    5a84:	movs	r0, #4
    5a86:	b.n	5a00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    5a88:	.word	0x20021bd0

00005a8c <TwoWire::isr()>:
{
    5a8c:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5a8e:	ldr	r6, [r0, #16]
{
    5a90:	mov	r4, r0
	uint32_t status = port->SSR;
    5a92:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    5a96:	ands.w	r3, r5, #3840	; 0xf00
    5a9a:	beq.n	5aa0 <TwoWire::isr()+0x14>
    5a9c:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    5aa0:	lsls	r0, r5, #30
    5aa2:	bpl.n	5ac4 <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    5aa4:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    5aa8:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    5aaa:	itt	mi
    5aac:	movmi	r3, #0
    5aae:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    5ab2:	ldrb.w	r3, [r4, #163]	; 0xa3
    5ab6:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    5ab8:	itttt	ls
    5aba:	addls	r1, r3, #1
    5abc:	addls	r3, r3, r4
    5abe:	strbls.w	r1, [r4, #163]	; 0xa3
    5ac2:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    5ac4:	lsls	r2, r5, #31
    5ac6:	bpl.n	5b02 <TwoWire::isr()+0x76>
		if (!transmitting) {
    5ac8:	ldrb.w	r3, [r4, #304]	; 0x130
    5acc:	cbnz	r3, 5ae2 <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    5ace:	ldr.w	r3, [r4, #312]	; 0x138
    5ad2:	cbz	r3, 5ad6 <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    5ad4:	blx	r3
			txBufferIndex = 0;
    5ad6:	movs	r3, #0
    5ad8:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    5adc:	movs	r3, #1
    5ade:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    5ae2:	ldrb.w	r3, [r4, #302]	; 0x12e
    5ae6:	ldrb.w	r2, [r4, #303]	; 0x12f
    5aea:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5aec:	ittet	hi
    5aee:	addhi	r2, r3, #1
    5af0:	addhi	r3, r3, r4
			port->STDR = 0;
    5af2:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    5af4:	strbhi.w	r2, [r4, #302]	; 0x12e
    5af8:	it	hi
    5afa:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    5afe:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    5b02:	lsls	r3, r5, #22
    5b04:	bpl.n	5b22 <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    5b06:	ldrb.w	r0, [r4, #163]	; 0xa3
    5b0a:	cbz	r0, 5b14 <TwoWire::isr()+0x88>
    5b0c:	ldr.w	r3, [r4, #316]	; 0x13c
    5b10:	cbz	r3, 5b14 <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    5b12:	blx	r3
		rxBufferIndex = 0;
    5b14:	movs	r3, #0
    5b16:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    5b1a:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    5b1e:	strb.w	r3, [r4, #304]	; 0x130
}
    5b22:	pop	{r4, r5, r6, pc}

00005b24 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    5b24:	ldr	r0, [pc, #4]	; (5b2c <lpi2c1_isr()+0x8>)
    5b26:	b.w	5a8c <TwoWire::isr()>
    5b2a:	nop
    5b2c:	.word	0x20001c9c

00005b30 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    5b30:	ldr	r0, [pc, #4]	; (5b38 <lpi2c3_isr()+0x8>)
    5b32:	b.w	5a8c <TwoWire::isr()>
    5b36:	nop
    5b38:	.word	0x20001ddc

00005b3c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    5b3c:	ldr	r0, [pc, #4]	; (5b44 <lpi2c4_isr()+0x8>)
    5b3e:	b.w	5a8c <TwoWire::isr()>
    5b42:	nop
    5b44:	.word	0x20001f1c

00005b48 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5b48:	ldr	r3, [r0, #16]
	port->MCR = 0;
    5b4a:	movs	r2, #0
	if (frequency < 400000) {
    5b4c:	ldr	r0, [pc, #76]	; (5b9c <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    5b4e:	str	r2, [r3, #16]
	if (frequency < 400000) {
    5b50:	cmp	r1, r0
    5b52:	bhi.n	5b7a <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    5b54:	ldr	r2, [pc, #72]	; (5ba0 <TwoWire::setClock(unsigned long)+0x58>)
    5b56:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    5b58:	movs	r2, #1
    5b5a:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    5b5c:	ldr	r2, [pc, #68]	; (5ba4 <TwoWire::setClock(unsigned long)+0x5c>)
    5b5e:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    5b60:	mov.w	r2, #180224	; 0x2c000
    5b64:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    5b66:	ldr	r2, [r3, #72]	; 0x48
    5b68:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    5b6a:	movs	r2, #0
    5b6c:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    5b6e:	mov.w	r2, #65537	; 0x10001
    5b72:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    5b74:	movs	r2, #1
    5b76:	str	r2, [r3, #16]
}
    5b78:	bx	lr
	} else if (frequency < 1000000) {
    5b7a:	ldr	r0, [pc, #44]	; (5ba8 <TwoWire::setClock(unsigned long)+0x60>)
    5b7c:	cmp	r1, r0
    5b7e:	ldr	r1, [pc, #44]	; (5bac <TwoWire::setClock(unsigned long)+0x64>)
    5b80:	bhi.n	5b90 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    5b82:	ldr	r0, [pc, #44]	; (5bb0 <TwoWire::setClock(unsigned long)+0x68>)
    5b84:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5b86:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    5b88:	ldr	r2, [pc, #40]	; (5bb4 <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5b8a:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    5b8c:	str	r1, [r3, #44]	; 0x2c
    5b8e:	b.n	5b66 <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    5b90:	ldr	r0, [pc, #36]	; (5bb8 <TwoWire::setClock(unsigned long)+0x70>)
    5b92:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    5b94:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5b96:	ldr	r2, [pc, #36]	; (5bbc <TwoWire::setClock(unsigned long)+0x74>)
    5b98:	b.n	5b8a <TwoWire::setClock(unsigned long)+0x42>
    5b9a:	nop
    5b9c:	.word	0x00061a7f
    5ba0:	.word	0x1928373b
    5ba4:	.word	0x05050bb8
    5ba8:	.word	0x000f423f
    5bac:	.word	0x00057f00
    5bb0:	.word	0x0c121a1c
    5bb4:	.word	0x02020e10
    5bb8:	.word	0x0407090a
    5bbc:	.word	0x01010960

00005bc0 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    5bc0:	mov	r3, r0
    size_t n = end - str;
    5bc2:	subs	r0, r2, r1
    if (cp < 0X80) {
    5bc4:	cmp	r3, #127	; 0x7f
    5bc6:	bhi.n	5bd4 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5bc8:	cmp	r0, #0
    5bca:	beq.n	5c50 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5bcc:	mov	r0, r1
    5bce:	strb.w	r3, [r0], #1
    5bd2:	bx	lr
    } else if (cp < 0X800) {
    5bd4:	cmp.w	r3, #2048	; 0x800
    5bd8:	bcs.n	5bf6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5bda:	cmp	r0, #1
    5bdc:	bls.n	5c4e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5bde:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5be0:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5be4:	mov	r0, r1
    5be6:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5bea:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5bee:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5bf2:	strb	r3, [r1, #1]
    5bf4:	bx	lr
    } else if (cp < 0X10000) {
    5bf6:	cmp.w	r3, #65536	; 0x10000
    5bfa:	bcs.n	5c20 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5bfc:	cmp	r0, #2
    5bfe:	bls.n	5c4e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5c00:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c02:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5c04:	orn	r2, r2, #31
    5c08:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c0a:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c0e:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c12:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c16:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c1a:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c1c:	strb	r3, [r1, #2]
    5c1e:	bx	lr
       if (n < 4) goto fail;
    5c20:	cmp	r0, #3
    5c22:	bls.n	5c4e <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5c24:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c26:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    5c28:	orn	r2, r2, #15
    5c2c:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    5c2e:	ubfx	r2, r3, #12, #6
    5c32:	orn	r2, r2, #127	; 0x7f
    5c36:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c38:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c3c:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c40:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c44:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5c48:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5c4a:	strb	r3, [r1, #3]
    5c4c:	bx	lr
    return nullptr;
    5c4e:	movs	r0, #0
  }
    5c50:	bx	lr
	...

00005c54 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    5c54:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    5c56:	push	{r4, r5, lr}
    5c58:	mov	r5, r0
    if (str >= end) {
    5c5a:	bcs.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    5c5c:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    5c5e:	ldrsb.w	r0, [r0]
    5c62:	cmp	r0, #0
    5c64:	blt.n	5c6c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    5c66:	adds	r0, r5, #1
      *rtn = ch;
    5c68:	str	r3, [r2, #0]
  }
    5c6a:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    5c6c:	and.w	r0, r3, #224	; 0xe0
    5c70:	cmp	r0, #192	; 0xc0
    5c72:	bne.n	5cb2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    5c74:	and.w	r3, r3, #31
      n = 2;
    5c78:	movs	r4, #2
    if ((str + n) > end) {
    5c7a:	adds	r0, r5, r4
    5c7c:	cmp	r0, r1
    5c7e:	bhi.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    5c80:	adds	r5, #1
      ch = str[i];
    5c82:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    5c86:	and.w	r4, r1, #192	; 0xc0
    5c8a:	cmp	r4, #128	; 0x80
    5c8c:	bne.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    5c8e:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    5c92:	cmp	r5, r0
      cp |= ch & 0X3F;
    5c94:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    5c98:	bne.n	5c82 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    5c9a:	sub.w	r4, r3, #128	; 0x80
    5c9e:	ldr	r1, [pc, #56]	; (5cd8 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    5ca0:	cmp	r4, r1
    5ca2:	bhi.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    5ca4:	sub.w	r1, r3, #55296	; 0xd800
    5ca8:	cmp.w	r1, #2048	; 0x800
    5cac:	bcc.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    5cae:	str	r3, [r2, #0]
    return str + n;
    5cb0:	b.n	5c6a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    5cb2:	and.w	r0, r3, #240	; 0xf0
    5cb6:	cmp	r0, #224	; 0xe0
    5cb8:	bne.n	5cc2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    5cba:	and.w	r3, r3, #15
      n = 3;
    5cbe:	movs	r4, #3
    5cc0:	b.n	5c7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    5cc2:	and.w	r0, r3, #248	; 0xf8
    5cc6:	cmp	r0, #240	; 0xf0
    5cc8:	bne.n	5cd2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5cca:	and.w	r3, r3, #7
      n = 4;
    5cce:	movs	r4, #4
    5cd0:	b.n	5c7a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    5cd2:	movs	r0, #0
    5cd4:	b.n	5c6a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    5cd6:	nop
    5cd8:	.word	0x0010ff7f

00005cdc <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5cdc:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5cde:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5ce0:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    5ce2:	lsls	r2, r3, #31
    5ce4:	bpl.n	5d26 <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    5ce6:	ldr	r0, [r0, #4]
    5ce8:	add.w	r2, r4, #16
    5cec:	ldr	r1, [r4, #12]
    5cee:	ldr	r3, [r0, #0]
    5cf0:	str	r2, [sp, #4]
    5cf2:	ldr	r3, [r3, #36]	; 0x24
    5cf4:	blx	r3
    5cf6:	ldr	r2, [sp, #4]
    5cf8:	mov	r5, r0
    5cfa:	cbnz	r0, 5d04 <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5cfc:	movs	r5, #0
}
    5cfe:	mov	r0, r5
    5d00:	add	sp, #8
    5d02:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    5d04:	ldrb	r3, [r4, #0]
    5d06:	lsls	r3, r3, #30
    5d08:	bmi.n	5d14 <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5d0a:	ldrb	r3, [r4, #0]
    5d0c:	bic.w	r3, r3, #1
    5d10:	strb	r3, [r4, #0]
    5d12:	b.n	5cfe <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    5d14:	adds	r0, r4, #4
    5d16:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5d18:	ldr	r3, [r0, #0]
    5d1a:	add	r1, r6
    5d1c:	ldr	r3, [r3, #36]	; 0x24
    5d1e:	blx	r3
    5d20:	cmp	r0, #0
    5d22:	bne.n	5d0a <FsCache::sync()+0x2e>
    5d24:	b.n	5cfc <FsCache::sync()+0x20>
  return true;
    5d26:	movs	r5, #1
    5d28:	b.n	5cfe <FsCache::sync()+0x22>

00005d2a <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    5d2a:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    5d2c:	push	{r4, r5, r6, lr}
    5d2e:	mov	r4, r0
    5d30:	mov	r6, r1
    5d32:	mov	r5, r2
  if (!m_blockDev) {
    5d34:	cbnz	r3, 5d3a <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    5d36:	movs	r0, #0
}
    5d38:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    5d3a:	ldr	r3, [r0, #12]
    5d3c:	cmp	r3, r1
    5d3e:	beq.n	5d52 <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    5d40:	bl	5cdc <FsCache::sync()>
    5d44:	cmp	r0, #0
    5d46:	beq.n	5d36 <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    5d48:	lsls	r3, r5, #29
    5d4a:	bpl.n	5d62 <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    5d4c:	movs	r3, #0
    m_sector = sector;
    5d4e:	str	r6, [r4, #12]
    m_status = 0;
    5d50:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    5d52:	ldrb	r3, [r4, #0]
    5d54:	and.w	r5, r5, #3
    5d58:	mov	r0, r4
    5d5a:	orrs	r3, r5
    5d5c:	strb.w	r3, [r0], #16
  return m_buffer;
    5d60:	b.n	5d38 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    5d62:	ldr	r0, [r4, #4]
    5d64:	add.w	r2, r4, #16
    5d68:	mov	r1, r6
    5d6a:	ldr	r3, [r0, #0]
    5d6c:	ldr	r3, [r3, #16]
    5d6e:	blx	r3
    5d70:	cmp	r0, #0
    5d72:	bne.n	5d4c <FsCache::prepare(unsigned long, unsigned char)+0x22>
    5d74:	b.n	5d36 <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

00005d78 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    5d78:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    5d7a:	push	{r4, r5, lr}
  if (chr < 127) {
    5d7c:	bhi.n	5dce <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    5d7e:	sub.w	r3, r0, #97	; 0x61
    5d82:	cmp	r3, #25
    5d84:	ite	hi
    5d86:	movhi	r3, #0
    5d88:	movls	r3, #1
    5d8a:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5d8e:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5d90:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    5d92:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5d96:	ldrh.w	r5, [r1, r2, lsl #2]
    5d9a:	cmp	r5, r0
    mid = left + (right - left)/2;
    5d9c:	ite	hi
    5d9e:	movhi	r4, r2
    5da0:	movls	r3, r2
  while (right - left > 1) {
    5da2:	subs	r2, r4, r3
    5da4:	cmp	r2, #1
    5da6:	bhi.n	5d92 <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    5da8:	uxth	r2, r3
    5daa:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    5dae:	cmp	r0, r3
    5db0:	bcc.n	5e0e <toUpcase(unsigned short)+0x96>
    5db2:	add.w	r1, r1, r2, lsl #2
    5db6:	subs	r3, r0, r3
    5db8:	ldrb	r2, [r1, #3]
    5dba:	cmp	r3, r2
    5dbc:	bge.n	5e0e <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    5dbe:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    5dc2:	cmp	r2, #1
    5dc4:	bne.n	5dd6 <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    5dc6:	and.w	r3, r3, #1
    5dca:	subs	r3, r0, r3
    5dcc:	b.n	5d8e <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5dce:	movs	r4, #53	; 0x35
  size_t left = 0;
    5dd0:	movs	r3, #0
    5dd2:	ldr	r1, [pc, #68]	; (5e18 <toUpcase(unsigned short)+0xa0>)
    5dd4:	b.n	5da2 <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    5dd6:	cbz	r2, 5de0 <toUpcase(unsigned short)+0x68>
    5dd8:	uxth	r2, r2
    5dda:	add	r2, r0
    5ddc:	uxth	r0, r2
    5dde:	b.n	5d90 <toUpcase(unsigned short)+0x18>
    5de0:	movw	r2, #58272	; 0xe3a0
    5de4:	b.n	5dda <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    5de6:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5dea:	ldrh.w	r5, [r1, r2, lsl #2]
    5dee:	cmp	r5, r0
    mid = left + (right - left)/2;
    5df0:	ite	hi
    5df2:	movhi	r4, r2
    5df4:	movls	r3, r2
  while (right - left > 1) {
    5df6:	subs	r2, r4, r3
    5df8:	cmp	r2, #1
    5dfa:	bhi.n	5de6 <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5dfc:	uxth	r3, r3
    5dfe:	ldrh.w	r2, [r1, r3, lsl #2]
    5e02:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    5e04:	itt	eq
    5e06:	addeq.w	r1, r1, r3, lsl #2
    5e0a:	ldrheq	r0, [r1, #2]
    5e0c:	b.n	5d90 <toUpcase(unsigned short)+0x18>
    5e0e:	movs	r4, #75	; 0x4b
    5e10:	movs	r3, #0
    5e12:	ldr	r1, [pc, #8]	; (5e1c <toUpcase(unsigned short)+0xa4>)
    5e14:	b.n	5df6 <toUpcase(unsigned short)+0x7e>
    5e16:	nop
    5e18:	.word	0x20000b38
    5e1c:	.word	0x200009d0

00005e20 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5e20:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    5e22:	push	{r0, r1, r4, lr}
    5e24:	mov	r4, r0
  if (ls) {
    5e26:	cbz	r3, 5e32 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    5e28:	movs	r2, #0
    5e2a:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    5e2c:	mov	r0, r3
    5e2e:	add	sp, #8
    5e30:	pop	{r4, pc}
  } else if (next >= end) {
    5e32:	ldrd	r0, r1, [r0, #4]
    5e36:	cmp	r0, r1
    5e38:	bcs.n	5e2c <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    5e3a:	add	r2, sp, #4
    5e3c:	bl	5c54 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    5e40:	cbnz	r0, 5e48 <FsName::get16()+0x28>
  return 0XFFFF;
    5e42:	movw	r3, #65535	; 0xffff
    5e46:	b.n	5e2c <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    5e48:	ldr	r2, [sp, #4]
    next = ptr;
    5e4a:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    5e4c:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    5e50:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    5e52:	bcc.n	5e2c <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    5e54:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5e58:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    5e5a:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    5e5e:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    5e62:	strh	r3, [r4, #12]
    5e64:	uxth	r3, r2
    5e66:	b.n	5e2c <FsName::get16()+0xc>

00005e68 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    5e68:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e6c:	mov	r6, r2
    5e6e:	mov	r5, r1
    5e70:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    5e74:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5e76:	ldrh.w	r4, [r5, #2]!
    5e7a:	cbnz	r3, 5e8e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    5e7c:	ldrd	r2, r3, [r6, #4]
    5e80:	cmp	r2, r3
    5e82:	bne.n	5e8e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    5e84:	clz	r0, r4
    5e88:	lsrs	r0, r0, #5
}
    5e8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5e8e:	mov	r0, r6
    5e90:	bl	5e20 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    5e94:	bl	5d78 <toUpcase(unsigned short)>
    5e98:	mov	r7, r0
    5e9a:	mov	r0, r4
    5e9c:	bl	5d78 <toUpcase(unsigned short)>
    5ea0:	cmp	r7, r0
    5ea2:	bne.n	5eac <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    5ea4:	cmp	r5, r8
    5ea6:	bne.n	5e74 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5ea8:	movs	r0, #1
    5eaa:	b.n	5e8a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5eac:	movs	r0, #0
    5eae:	b.n	5e8a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00005eb0 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5eb0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    5eb4:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5eb8:	mov	sl, r0
    5eba:	mov	r8, r1
  if (!isOpen()) {
    5ebc:	cmp	r3, #0
    5ebe:	beq.n	5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5ec0:	subs	r2, #1
  char* str = name;
    5ec2:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5ec4:	mov.w	r9, #2
  uint16_t hs = 0;
    5ec8:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5eca:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5ecc:	ldrb.w	r3, [sl, #48]	; 0x30
    5ed0:	cmp	r3, r9
    5ed2:	bcc.n	5f3c <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    5ed4:	movs	r2, #0
    5ed6:	mov	r1, r9
    5ed8:	mov	r0, sl
    5eda:	bl	5fc2 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5ede:	cbz	r0, 5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5ee0:	ldrb	r3, [r0, #0]
    5ee2:	cmp	r3, #193	; 0xc1
    5ee4:	bne.n	5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5ee6:	mov	r6, r0
    5ee8:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5eec:	ldr	r3, [pc, #108]	; (5f5c <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5eee:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    5ef2:	cbz	r5, 5f2c <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    5ef4:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5ef8:	uxth	r2, r2
    5efa:	cmp.w	r2, #1024	; 0x400
    5efe:	bcs.n	5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5f00:	and.w	r5, r3, r5, lsl #10
    5f04:	ubfx	r0, r0, #0, #10
    5f08:	orrs	r0, r5
    5f0a:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5f0e:	mov	r1, r4
    5f10:	mov	r2, r7
    5f12:	bl	5bc0 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    5f16:	mov	r4, r0
    5f18:	cbz	r0, 5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5f1a:	movs	r5, #0
    5f1c:	ldr	r3, [pc, #60]	; (5f5c <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5f1e:	cmp	fp, r6
    5f20:	bne.n	5eee <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5f22:	add.w	r9, r9, #1
    5f26:	uxtb.w	r9, r9
    5f2a:	b.n	5ecc <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    5f2c:	add.w	r2, r0, #10240	; 0x2800
    5f30:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    5f32:	cmp.w	r2, #2048	; 0x800
    5f36:	bcc.n	5f48 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    5f38:	cmp	r0, #0
    5f3a:	bne.n	5f0e <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    5f3c:	movs	r3, #0
  return str - name;
    5f3e:	sub.w	r0, r4, r8
  *str = '\0';
    5f42:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    5f44:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    5f48:	cmp.w	r2, #1024	; 0x400
    5f4c:	bcs.n	5f52 <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5f4e:	mov	r5, r0
    5f50:	b.n	5f1e <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    5f52:	movs	r0, #0
    5f54:	strb.w	r0, [r8]
  return 0;
    5f58:	b.n	5f44 <ExFatFile::getName8(char*, unsigned int)+0x94>
    5f5a:	nop
    5f5c:	.word	0x000ffc00

00005f60 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    5f60:	movs	r0, #0
    next = begin;
    5f62:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    5f64:	push	{r4, r5, r6, lr}
    5f66:	mov	r4, r1
  uint16_t hash = 0;
    5f68:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    5f6a:	movw	r5, #65535	; 0xffff
    5f6e:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    5f70:	strh	r0, [r1, #12]
    return !ls && next == end;
    5f72:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    5f74:	str	r0, [r4, #16]
    5f76:	cbnz	r3, 5fb4 <ExFatFile::hashName(ExName_t*)+0x54>
    5f78:	ldrd	r2, r3, [r4, #4]
    5f7c:	cmp	r2, r3
    5f7e:	bne.n	5fb4 <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5f80:	subs	r0, #1
  fname->nameHash = hash;
    5f82:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    5f84:	cmp	r0, #254	; 0xfe
    5f86:	ite	hi
    5f88:	movhi	r0, #0
    5f8a:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5f8c:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5f8e:	bl	5d78 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5f92:	lsls	r3, r6, #15
    5f94:	orr.w	r3, r3, r6, lsr #1
    5f98:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5f9c:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5f9e:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5fa0:	ubfx	r3, r3, #1, #15
    5fa4:	orr.w	r3, r3, r2, lsl #15
    5fa8:	uxtah	r3, r0, r3
    fname->nameLength++;
    5fac:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5fae:	uxth	r6, r3
    fname->nameLength++;
    5fb0:	adds	r0, #1
    5fb2:	b.n	5f72 <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    5fb4:	mov	r0, r4
    5fb6:	bl	5e20 <FsName::get16()>
    if (u == 0XFFFF) {
    5fba:	cmp	r0, r5
    5fbc:	bne.n	5f8e <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    5fbe:	movs	r0, #0
    5fc0:	b.n	5f8c <ExFatFile::hashName(ExName_t*)+0x2c>

00005fc2 <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5fc2:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    5fc4:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5fc8:	sub	sp, #20
    5fca:	mov	r4, r0
    5fcc:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5fce:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5fd0:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    5fd2:	ldmia.w	r3, {r0, r1, r2}
    5fd6:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5fda:	lsls	r2, r7, #5
    5fdc:	mov	r1, r5
    5fde:	ldr	r0, [r4, #32]
    5fe0:	bl	69b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    5fe4:	cmp	r0, #1
    5fe6:	bne.n	5ff6 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5fe8:	mov	r2, r6
    5fea:	mov	r1, r5
    5fec:	ldr	r0, [r4, #32]
    5fee:	bl	691c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    5ff2:	add	sp, #20
    5ff4:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    5ff6:	movs	r0, #0
    5ff8:	b.n	5ff2 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005ffa <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5ffa:	push	{r4, lr}
    5ffc:	mov	r4, r0
  bool rtn = sync();
    5ffe:	bl	6ed8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6002:	movs	r3, #0
    6004:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6008:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    600c:	pop	{r4, pc}

0000600e <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    600e:	push	{r3, r4, r5, lr}
    6010:	mov	r5, r1
    6012:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    6014:	add.w	r1, r0, #36	; 0x24
    6018:	movs	r2, #0
    601a:	ldr	r0, [r0, #32]
    601c:	bl	691c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6020:	cbz	r0, 602c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    6022:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    6024:	strh	r3, [r5, #0]
    6026:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    6028:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    602a:	strh	r3, [r4, #0]

 fail:
  return false;
}
    602c:	pop	{r3, r4, r5, pc}

0000602e <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    602e:	push	{r3, r4, r5, lr}
    6030:	mov	r5, r1
    6032:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    6034:	add.w	r1, r0, #36	; 0x24
    6038:	movs	r2, #0
    603a:	ldr	r0, [r0, #32]
    603c:	bl	691c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6040:	cbz	r0, 604c <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    6042:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    6044:	strh	r3, [r5, #0]
    6046:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    6048:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    604a:	strh	r3, [r4, #0]

 fail:
  return false;
}
    604c:	pop	{r3, r4, r5, pc}

0000604e <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    604e:	push	{r3, r4, r5, lr}
    6050:	mov	r5, r1
  if (isOpen()) {
    6052:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    6056:	mov	r4, r0
  if (isOpen()) {
    6058:	cbnz	r1, 6070 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    605a:	movs	r2, #56	; 0x38
    605c:	bl	a898 <memset>
  m_attributes = FILE_ATTR_ROOT;
    6060:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    6062:	movs	r0, #1
  m_vol = vol;
    6064:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    6066:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    606a:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    606e:	pop	{r3, r4, r5, pc}
  return false;
    6070:	movs	r0, #0
    6072:	b.n	606e <ExFatFile::openRoot(ExFatVolume*)+0x20>

00006074 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    6074:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    6076:	mov	r5, r1
    6078:	ldrb.w	r4, [r1], #1
    607c:	cmp	r4, #32
    607e:	beq.n	6076 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    6080:	ldr	r7, [pc, #108]	; (60f0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    6082:	str	r5, [r2, #0]
  fname->end = path;
    6084:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    6086:	mov	r6, r5
    6088:	ldrb.w	r4, [r6], #1
    608c:	cbz	r4, 6092 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    608e:	cmp	r4, #47	; 0x2f
    6090:	bne.n	60aa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    6092:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    6094:	ldrb.w	r1, [r5], #1
    6098:	cmp	r1, #32
    609a:	beq.n	6092 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    609c:	cmp	r1, #47	; 0x2f
    609e:	beq.n	6092 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    60a0:	str	r4, [r3, #0]
  return hashName(fname);
    60a2:	mov	r1, r2

 fail:
  return false;
}
    60a4:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    60a6:	b.w	5f60 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    60aa:	cmp	r4, #60	; 0x3c
    60ac:	bhi.n	60d4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    60ae:	cmp	r4, #33	; 0x21
    60b0:	bhi.n	60c0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    60b2:	subs	r1, r4, #1
    60b4:	cmp	r1, #30
    60b6:	bls.n	60ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    60b8:	cmp	r4, #32
    60ba:	bne.n	60e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    60bc:	mov	r5, r6
    60be:	b.n	6086 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    60c0:	sub.w	r1, r4, #34	; 0x22
    60c4:	uxtb	r1, r1
    60c6:	lsr.w	r1, r7, r1
    60ca:	lsls	r1, r1, #31
    60cc:	bpl.n	60ea <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    60ce:	movs	r0, #0
    60d0:	pop	{r4, r5, r6, r7}
    60d2:	bx	lr
    60d4:	cmp	r4, #92	; 0x5c
    60d6:	beq.n	60ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    60d8:	bhi.n	60e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    60da:	subs	r4, #62	; 0x3e
    60dc:	cmp	r4, #1
    60de:	bls.n	60ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    60e0:	str	r6, [r2, #8]
    60e2:	b.n	60bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    60e4:	cmp	r4, #124	; 0x7c
    60e6:	beq.n	60ce <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    60e8:	b.n	60e0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    60ea:	cmp	r4, #46	; 0x2e
    60ec:	b.n	60ba <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    60ee:	nop
    60f0:	.word	0x05002101

000060f4 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    60f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    60f8:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    60fc:	ldrb.w	r3, [r0, #51]	; 0x33
    6100:	sub	sp, #12
    6102:	mov	r4, r0
    6104:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    6106:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    6108:	mov	r6, r2
  if (!isReadable()) {
    610a:	bpl.n	61d4 <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    610c:	lsls	r0, r3, #25
    610e:	bmi.n	6118 <ExFatFile::read(void*, unsigned int)+0x24>
    6110:	ldrb.w	r3, [r4, #49]	; 0x31
    6114:	lsls	r1, r3, #28
    6116:	bpl.n	6130 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    6118:	ldrd	r2, r3, [r4]
    611c:	ldrd	r1, r0, [r4, #16]
    6120:	adds	r5, r6, r2
    6122:	adc.w	r3, r3, #0
    6126:	cmp	r1, r5
    6128:	sbcs.w	r3, r0, r3
    612c:	bcs.n	6130 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    612e:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6130:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    6134:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6136:	vmov	s16, r3
    613a:	b.n	6220 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    613c:	ldr	r0, [r4, #32]
    613e:	ldrd	r3, r2, [r4]
    6142:	ldr.w	r7, [r0, #1080]	; 0x438
    6146:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6148:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    614c:	cbnz	r7, 6162 <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    614e:	orrs	r3, r2
    6150:	bne.n	61ac <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    6152:	ldrb.w	r3, [r4, #49]	; 0x31
    6156:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6158:	ite	mi
    615a:	ldrmi.w	r3, [r0, #1076]	; 0x434
    615e:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    6160:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    6162:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6166:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    6168:	ldr	r2, [r4, #24]
    616a:	ldrb.w	r1, [fp, #1093]	; 0x445
    616e:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6170:	ldr.w	r2, [fp, #1068]	; 0x42c
    6174:	lsls	r5, r1
    6176:	add.w	r5, r5, r7, lsr #9
    617a:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    617c:	cmp.w	sl, #0
    6180:	bne.n	61e6 <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    6182:	cmp.w	r8, #512	; 0x200
    6186:	bcc.n	61e6 <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    6188:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    618c:	cmp	r5, r2
    618e:	beq.n	61e6 <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    6190:	cmp.w	r8, #1024	; 0x400
    6194:	bcs.n	6234 <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    6196:	ldr.w	r0, [fp, #532]	; 0x214
    619a:	mov	r2, r9
    619c:	mov	r1, r5
    619e:	ldr	r3, [r0, #0]
    61a0:	ldr	r3, [r3, #16]
    61a2:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    61a4:	cbz	r0, 61d4 <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    61a6:	mov.w	r7, #512	; 0x200
    61aa:	b.n	620c <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    61ac:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    61b0:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    61b2:	lsls	r3, r3, #25
    61b4:	bpl.n	61bc <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    61b6:	adds	r1, #1
    61b8:	str	r1, [r4, #24]
    61ba:	b.n	6162 <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    61bc:	vmov	r2, s16
    61c0:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    61c4:	cmp	r0, #0
    61c6:	blt.n	61d4 <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    61c8:	bne.n	6162 <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    61ca:	ldrb.w	r3, [r4, #49]	; 0x31
    61ce:	tst.w	r3, #80	; 0x50
    61d2:	bne.n	6226 <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    61d4:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    61d8:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    61dc:	orr.w	r3, r3, #2
    61e0:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    61e4:	b.n	622a <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    61e6:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    61ea:	movs	r2, #0
    61ec:	mov	r1, r5
    61ee:	add.w	r0, fp, #528	; 0x210
    61f2:	cmp	r7, r8
    61f4:	it	cs
    61f6:	movcs	r7, r8
    61f8:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    61fc:	cmp	r0, #0
    61fe:	beq.n	61d4 <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    6200:	add.w	r1, r0, sl
    6204:	mov	r2, r7
    6206:	mov	r0, r9
    6208:	bl	a8dc <memcpy>
    dst += n;
    620c:	add	r9, r7
    toRead -= n;
    620e:	sub.w	r8, r8, r7
    m_curPosition += n;
    6212:	ldrd	r3, r2, [r4]
    6216:	adds	r3, r3, r7
    6218:	adc.w	r2, r2, #0
    621c:	strd	r3, r2, [r4]
  while (toRead) {
    6220:	cmp.w	r8, #0
    6224:	bne.n	613c <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    6226:	sub.w	r0, r6, r8
}
    622a:	add	sp, #12
    622c:	vpop	{d8}
    6230:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6234:	movs	r3, #1
    6236:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6238:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    623c:	subs	r3, r3, r0
    623e:	cmp	r3, r1
    6240:	it	cs
    6242:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    6244:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    6246:	mov.w	r7, r3, lsl #9
    624a:	bls.n	6262 <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    624c:	ldr.w	r0, [fp, #532]	; 0x214
    6250:	mov	r1, r5
    6252:	ldr	r2, [r0, #0]
    6254:	ldr.w	fp, [r2, #20]
    6258:	mov	r2, r9
    625a:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    625c:	cmp	r0, #0
    625e:	bne.n	620c <ExFatFile::read(void*, unsigned int)+0x118>
    6260:	b.n	61d4 <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    6262:	adds	r1, r5, r3
    6264:	cmp	r2, r1
    6266:	bcs.n	624c <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    6268:	add.w	r0, fp, #528	; 0x210
    626c:	str	r3, [sp, #4]
    626e:	bl	5cdc <FsCache::sync()>
    6272:	ldr	r3, [sp, #4]
    6274:	cmp	r0, #0
    6276:	bne.n	624c <ExFatFile::read(void*, unsigned int)+0x158>
    6278:	b.n	61d4 <ExFatFile::read(void*, unsigned int)+0xe0>

0000627a <ExFatFile::peek()>:
int ExFatFile::peek() {
    627a:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    627c:	movs	r2, #1
    627e:	add.w	r1, sp, #7
    6282:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    6284:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    6286:	ldrd	r6, r7, [r0]
    628a:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
    628e:	cmp	r0, #1
  m_curCluster = curCluster;
    6290:	str	r5, [r4, #24]
    6292:	ite	eq
    6294:	ldrbeq.w	r0, [sp, #7]
    6298:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    629c:	strd	r6, r7, [r4]
}
    62a0:	add	sp, #12
    62a2:	pop	{r4, r5, r6, r7, pc}

000062a4 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    62a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    62a8:	ldrb.w	ip, [r0, #49]	; 0x31
    62ac:	mov	r4, r0
    62ae:	mov	r6, r2
    62b0:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    62b2:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    62b6:	cmp.w	ip, #0
    62ba:	beq.n	6374 <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    62bc:	ldrd	r0, r3, [r0]
    62c0:	cmp	r3, r7
    62c2:	it	eq
    62c4:	cmpeq	r0, r2
    62c6:	beq.n	62d6 <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    62c8:	orrs.w	r2, r6, r7
    62cc:	bne.n	62da <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    62ce:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    62d0:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    62d2:	strd	r6, r7, [r4]
    return true;
    62d6:	movs	r0, #1
    62d8:	b.n	637a <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    62da:	tst.w	ip, #8
    62de:	beq.n	62ea <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    62e0:	ldrd	r1, r2, [r4, #16]
    62e4:	cmp	r1, r6
    62e6:	sbcs	r2, r7
    62e8:	bcc.n	6374 <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    62ea:	ldr.w	lr, [r4, #32]
    62ee:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    62f0:	ldrb.w	r1, [lr, #1093]	; 0x445
    62f4:	adc.w	sl, r7, #4294967295
    62f8:	adds	r1, #9
    62fa:	uxtb	r1, r1
    62fc:	rsb	r9, r1, #32
    6300:	sub.w	r2, r1, #32
    6304:	lsrs	r5, r1
    6306:	lsl.w	r9, sl, r9
    630a:	lsr.w	r2, sl, r2
    630e:	sub.w	sl, r1, #32
    6312:	orr.w	r5, r5, r9
    6316:	rsb	r9, r1, #32
    631a:	orrs	r5, r2
  if (isContiguous()) {
    631c:	ldrb.w	r2, [r4, #51]	; 0x33
    6320:	tst.w	r2, #64	; 0x40
    6324:	beq.n	632c <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    6326:	ldr	r3, [r4, #28]
    6328:	add	r3, r5
    632a:	b.n	62d0 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    632c:	adds.w	fp, r0, #4294967295
    6330:	adc.w	r2, r3, #4294967295
    6334:	lsr.w	r1, fp, r1
    6338:	lsl.w	r9, r2, r9
    633c:	lsr.w	r2, r2, sl
    6340:	orr.w	r1, r1, r9
    6344:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    6346:	cmp	r5, r1
    6348:	bcc.n	634e <ExFatFile::seekSet(unsigned long long)+0xaa>
    634a:	orrs	r3, r0
    634c:	bne.n	637e <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    634e:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    6352:	ite	ne
    6354:	ldrne.w	r3, [lr, #1076]	; 0x434
    6358:	ldreq	r3, [r4, #28]
    635a:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    635c:	add.w	r9, r4, #24
  while (nNew--) {
    6360:	cmp	r5, #0
    6362:	beq.n	62d2 <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    6364:	mov	r2, r9
    6366:	ldr	r1, [r4, #24]
    6368:	ldr	r0, [r4, #32]
    636a:	subs	r5, #1
    636c:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    6370:	cmp	r0, #0
    6372:	bgt.n	6360 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6374:	movs	r0, #0
  m_curCluster = tmp;
    6376:	str.w	r8, [r4, #24]
}
    637a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    637e:	subs	r5, r5, r1
    6380:	b.n	635c <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00006384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    6384:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6388:	mov	sl, r3
    638a:	ldrb.w	r3, [r0, #49]	; 0x31
    638e:	sub	sp, #52	; 0x34
    6390:	mov	r4, r0
    6392:	mov	r6, r1
    6394:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    6396:	cmp	r3, #0
    6398:	bne.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    639a:	ldrb.w	r3, [r1, #49]	; 0x31
    639e:	tst.w	r3, #80	; 0x50
    63a2:	beq.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    63a4:	and.w	r9, sl, #3
    63a8:	cmp.w	r9, #3
    63ac:	beq.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    63ae:	add.w	r9, r9, #1
    63b2:	and.w	r3, sl, #8
    63b6:	orr.w	r9, r9, r3
  if (fname) {
    63ba:	cmp	r2, #0
    63bc:	beq.n	6430 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    63be:	ldr	r7, [r2, #16]
    63c0:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    63c2:	movs	r2, #0
    63c4:	mov	r0, r1
    63c6:	adds	r7, #14
    63c8:	udiv	r7, r7, r3
    63cc:	adds	r7, #2
    63ce:	movs	r3, #0
    63d0:	uxtb	r7, r7
    63d2:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    63d6:	mov.w	fp, #0
    63da:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    63dc:	movs	r2, #32
    63de:	add	r1, sp, #16
    63e0:	mov	r0, r6
    63e2:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    63e6:	cmp	r0, #0
    63e8:	beq.w	6572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    63ec:	cmp	r0, #32
    63ee:	bne.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    63f0:	ldrsb.w	r1, [sp, #16]
    63f4:	ldrb.w	r2, [sp, #16]
    63f8:	cmp	r1, #0
    63fa:	blt.n	643a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    63fc:	cmp.w	fp, #0
    6400:	bne.n	640e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    6402:	ldr	r1, [r6, #0]
    6404:	sub.w	r3, r1, #32
    6408:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    640a:	ldr	r3, [r6, #24]
    640c:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    640e:	cmp	fp, r7
        freeCount++;
    6410:	itt	cc
    6412:	addcc.w	r3, fp, #1
    6416:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    641a:	cbnz	r2, 6434 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    641c:	cmp	r5, #0
    641e:	bne.w	6572 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    6422:	mov.w	r8, #0
    6426:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    642a:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    642e:	b.n	6506 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    6430:	movs	r7, #3
    6432:	b.n	63d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    6434:	movs	r0, #0
    6436:	mov	r8, r0
    6438:	b.n	63dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    643a:	cmp.w	r8, #0
    643e:	bne.n	6490 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    6440:	cmp	fp, r7
    6442:	it	cc
    6444:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    6448:	cmp	r2, #133	; 0x85
    644a:	bne.n	6434 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    644c:	movs	r2, #56	; 0x38
    644e:	mov	r1, r8
    6450:	mov	r0, r4
    6452:	bl	a898 <memset>
      m_setCount = dirFile->setCount;
    6456:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    645a:	ldrb.w	r1, [sp, #20]
      inSet = true;
    645e:	movs	r0, #1
      m_setCount = dirFile->setCount;
    6460:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    6464:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    6468:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    646a:	it	pl
    646c:	orrpl.w	r2, r2, #8
    6470:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    6474:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    6476:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    6478:	ldr	r2, [r6, #24]
    647a:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    647c:	ldr	r2, [r6, #0]
    647e:	subs	r2, #32
    6480:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6482:	ldrb.w	r2, [r6, #51]	; 0x33
    6486:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    648a:	strb.w	r2, [r4, #44]	; 0x2c
    648e:	b.n	6436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    6490:	cmp	r2, #192	; 0xc0
    6492:	bne.n	6536 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    6494:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    6498:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    649c:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    649e:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    64a2:	it	mi
    64a4:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    64a8:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    64ac:	it	mi
    64ae:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    64b2:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    64b4:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    64b8:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    64ba:	strd	r0, r1, [r4, #8]
      if (!fname) {
    64be:	cbnz	r5, 650e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    64c0:	tst.w	sl, #2048	; 0x800
    64c4:	bne.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    64c6:	tst.w	sl, #17408	; 0x4400
    64ca:	bne.n	64d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    64cc:	ldrb.w	r3, [r4, #51]	; 0x33
    64d0:	lsls	r0, r3, #30
    64d2:	bpl.n	64e0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    64d4:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    64d8:	lsls	r1, r3, #27
    64da:	bmi.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    64dc:	lsls	r2, r3, #31
    64de:	bmi.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    64e0:	tst.w	sl, #1024	; 0x400
    64e4:	beq.n	6560 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    64e6:	ldrb.w	r3, [r4, #51]	; 0x33
    64ea:	lsls	r3, r3, #30
    64ec:	bpl.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    64ee:	movs	r2, #0
    64f0:	movs	r3, #0
    64f2:	mov	r0, r4
    64f4:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
    64f8:	cmp	r0, #0
    64fa:	beq.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    64fc:	mov	r0, r4
    64fe:	bl	7164 <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6502:	cmp	r0, #0
    6504:	beq.n	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    6506:	mov	r0, r8
    6508:	add	sp, #52	; 0x34
    650a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    650e:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    6510:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    6514:	ldr	r1, [r5, #16]
    next = begin;
    6516:	str	r2, [r5, #4]
    6518:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    651c:	strh	r3, [r5, #12]
    651e:	cmp	r1, r2
    6520:	bne.n	6434 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    6522:	ldrh	r0, [r5, #20]
    6524:	ldrh.w	r2, [sp, #20]
    6528:	sub.w	ip, r0, r2
    652c:	rsbs	r0, ip, #0
    6530:	adc.w	r0, r0, ip
    6534:	b.n	6436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    6536:	cmp	r2, #193	; 0xc1
    6538:	bne.w	6434 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    653c:	mov	r2, r5
    653e:	add	r1, sp, #16
    6540:	mov	r0, r4
    6542:	bl	5e68 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    6546:	cmp	r0, #0
    6548:	beq.w	6436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    654c:	ldrh	r2, [r5, #12]
    654e:	cmp	r2, #0
    6550:	bne.w	6436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    6554:	ldrd	r1, r2, [r5, #4]
    6558:	cmp	r1, r2
    655a:	bne.w	6436 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    655e:	b.n	64c0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    6560:	tst.w	sl, #16384	; 0x4000
    6564:	beq.n	6506 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    6566:	mov	r0, r4
    6568:	ldrd	r2, r3, [r4, #16]
    656c:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
    6570:	b.n	6502 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    6572:	tst.w	sl, #512	; 0x200
    6576:	beq.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    657a:	tst.w	r9, #2
    657e:	beq.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6582:	cmp	r5, #0
    6584:	beq.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    6588:	cmp	fp, r7
    658a:	bcc.n	65da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    658c:	movs	r2, #56	; 0x38
    658e:	movs	r1, #0
    6590:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    6592:	ldrb.w	r8, [r6, #51]	; 0x33
    6596:	bl	a898 <memset>
  ExFatVolume* volume() const {return m_vol;}
    659a:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    659c:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    65a0:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    65a4:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    65a6:	movs	r3, #8
  m_dirPos = freePos;
    65a8:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    65ac:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    65b0:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    65b4:	mov.w	r8, #0
  m_dirPos = freePos;
    65b8:	ldr	r3, [sp, #0]
    65ba:	str	r3, [r4, #36]	; 0x24
    65bc:	ldr	r3, [sp, #4]
    65be:	str	r3, [r4, #40]	; 0x28
    next = begin;
    65c0:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    65c2:	strh.w	r8, [r5, #12]
    next = begin;
    65c6:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    65c8:	uxtb.w	fp, r8
    65cc:	cmp	r7, fp
    65ce:	bhi.n	661e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    65d0:	mov	r0, r4
    65d2:	bl	6ed8 <ExFatFile::sync()>
    65d6:	mov	r8, r0
    65d8:	b.n	6506 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    65da:	movs	r2, #32
    65dc:	add	r1, sp, #16
    65de:	mov	r0, r6
    65e0:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    65e4:	cbnz	r0, 65fc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    65e6:	mov	r0, r6
      curCluster = dir->m_curCluster;
    65e8:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    65ec:	bl	6f1a <ExFatFile::addDirCluster()>
    65f0:	cmp	r0, #0
    65f2:	beq.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    65f6:	str.w	r8, [r6, #24]
      continue;
    65fa:	b.n	6588 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    65fc:	cmp	r0, #32
    65fe:	bne.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    6602:	cmp.w	fp, #0
    6606:	bne.n	6614 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    6608:	ldr	r2, [r6, #0]
    660a:	sub.w	r3, r2, #32
    660e:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    6610:	ldr	r3, [r6, #24]
    6612:	str	r3, [sp, #0]
    freeCount++;
    6614:	add.w	r3, fp, #1
    6618:	uxtb.w	fp, r3
    661c:	b.n	6588 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    661e:	movs	r2, #1
    6620:	mov	r1, fp
    6622:	mov	r0, r4
    6624:	bl	5fc2 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    6628:	mov	r6, r0
    662a:	cmp	r0, #0
    662c:	beq.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    6630:	ldrsb.w	r2, [r0]
    6634:	cmp	r2, #0
    6636:	blt.w	6422 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    663a:	movs	r2, #32
    663c:	movs	r1, #0
    663e:	bl	a898 <memset>
    if (i == 0) {
    6642:	cmp.w	fp, #0
    6646:	bne.n	668a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    6648:	movs	r3, #133	; 0x85
    664a:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    664c:	ldr	r3, [pc, #128]	; (66d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    664e:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    6652:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    6656:	ldr	r3, [r3, #0]
    6658:	cbz	r3, 667e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    665a:	add.w	r2, sp, #11
    665e:	add.w	r1, sp, #14
    6662:	add	r0, sp, #12
    6664:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6666:	ldrh.w	r3, [sp, #12]
    666a:	strh	r3, [r6, #10]
    666c:	ldrh.w	r3, [sp, #14]
    6670:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    6672:	ldrb.w	r3, [sp, #11]
    6676:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    6678:	add.w	r8, r8, #1
    667c:	b.n	65c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    667e:	movw	r3, #22561	; 0x5821
    6682:	strh	r3, [r6, #10]
    6684:	strh	r3, [r6, #14]
    6686:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    6688:	b.n	6678 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    668a:	cmp.w	fp, #1
    668e:	bne.n	66aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6690:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    6694:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    6696:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    669a:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    669c:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    66a0:	ldr	r3, [r5, #16]
    66a2:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    66a4:	ldrh	r3, [r5, #20]
    66a6:	strh	r3, [r6, #4]
}
    66a8:	b.n	6678 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    66aa:	movs	r3, #193	; 0xc1
    66ac:	add.w	fp, r6, #30
    66b0:	strb	r3, [r6, #0]
    return !ls && next == end;
    66b2:	ldrh	r2, [r5, #12]
    66b4:	cbnz	r2, 66be <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    66b6:	ldrd	r1, r2, [r5, #4]
    66ba:	cmp	r1, r2
    66bc:	beq.n	6678 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    66be:	mov	r0, r5
    66c0:	bl	5e20 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    66c4:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    66c8:	cmp	fp, r6
    66ca:	bne.n	66b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    66cc:	b.n	6678 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    66ce:	nop
    66d0:	.word	0x20021258

000066d4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    66d4:	push	{r4, r5, r6, r7, lr}
    66d6:	mov	r7, r3
    66d8:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    66da:	movs	r3, #0
    66dc:	mov	r5, r0
    66de:	mov	r4, r1
    66e0:	str	r2, [sp, #4]
    66e2:	str	r3, [sp, #80]	; 0x50
class FsName {
    66e4:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    66e8:	ldrb.w	r3, [r0, #49]	; 0x31
    66ec:	cbz	r3, 66f4 <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    66ee:	movs	r0, #0
}
    66f0:	add	sp, #92	; 0x5c
    66f2:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    66f4:	ldrb.w	r1, [r1, #49]	; 0x31
    66f8:	tst.w	r1, #80	; 0x50
    66fc:	beq.n	66ee <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    66fe:	ldrb	r1, [r2, #0]
    6700:	cmp	r1, #47	; 0x2f
    6702:	bne.n	673e <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    6704:	mov	r0, r2
    while (isDirSeparator(*path)) {
    6706:	ldrb.w	r1, [r2], #1
    670a:	cmp	r1, #47	; 0x2f
    670c:	beq.n	6720 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    670e:	cbz	r3, 6712 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    6710:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    6712:	ldr	r4, [r4, #32]
    if (*path == 0) {
    6714:	cbnz	r1, 6724 <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    6716:	mov	r1, r4
    6718:	mov	r0, r5
    671a:	bl	604e <ExFatFile::openRoot(ExFatVolume*)>
    671e:	b.n	66f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    6720:	movs	r3, #1
    6722:	b.n	6704 <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    6724:	movs	r2, #56	; 0x38
    6726:	movs	r1, #0
    6728:	add	r0, sp, #32
    672a:	bl	a898 <memset>
  m_attributes = FILE_ATTR_ROOT;
    672e:	movs	r3, #64	; 0x40
  m_vol = vol;
    6730:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    6732:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    6734:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    6738:	movs	r3, #1
    673a:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    673e:	add	r3, sp, #4
    6740:	add	r2, sp, #8
    6742:	ldr	r1, [sp, #4]
    6744:	mov	r0, r5
    6746:	bl	6074 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    674a:	cmp	r0, #0
    674c:	beq.n	66ee <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    674e:	ldr	r3, [sp, #4]
    6750:	ldrb	r3, [r3, #0]
    6752:	cbz	r3, 678c <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    6754:	movs	r3, #0
    6756:	add	r2, sp, #8
    6758:	mov	r1, r4
    675a:	mov	r0, r5
    675c:	bl	6384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6760:	cmp	r0, #0
    6762:	beq.n	66ee <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    6764:	add	r6, sp, #32
    6766:	mov	r2, r5
    6768:	add.w	ip, r5, #48	; 0x30
    676c:	mov	r4, r6
    676e:	ldr	r0, [r2, #0]
    6770:	adds	r2, #8
    6772:	ldr.w	r1, [r2, #-4]
    6776:	mov	r3, r6
    6778:	cmp	r2, ip
    677a:	stmia	r3!, {r0, r1}
    677c:	mov	r6, r3
    677e:	bne.n	676e <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    6780:	ldr	r0, [r2, #0]
    6782:	str	r0, [r3, #0]
    close();
    6784:	mov	r0, r5
    6786:	bl	5ffa <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    678a:	b.n	673e <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    678c:	mov	r3, r7
    678e:	add	r2, sp, #8
    6790:	mov	r1, r4
    6792:	mov	r0, r5
    6794:	bl	6384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6798:	b.n	66f0 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

0000679a <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    679a:	cbz	r1, 67a4 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    679c:	add.w	r1, r1, #1096	; 0x448
    67a0:	b.w	66d4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    67a4:	mov	r0, r1
    67a6:	bx	lr

000067a8 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    67a8:	mov	r3, r2
    67aa:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    67ac:	ldrb.w	r2, [r0, #49]	; 0x31
    67b0:	cbnz	r2, 67cc <ExFatFile::openNext(ExFatFile*, int)+0x24>
    67b2:	ldrb.w	r2, [r1, #49]	; 0x31
    67b6:	tst.w	r2, #80	; 0x50
    67ba:	beq.n	67cc <ExFatFile::openNext(ExFatFile*, int)+0x24>
    67bc:	ldr	r2, [r1, #0]
    67be:	ands.w	r2, r2, #31
    67c2:	bne.n	67cc <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    67c4:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    67c8:	b.w	6384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    67cc:	movs	r0, #0
    67ce:	ldr.w	r4, [sp], #4
    67d2:	bx	lr

000067d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    67d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67d8:	mov	r7, r0
    67da:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    67dc:	mov	sl, r1
    67de:	cbz	r1, 6814 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    67e0:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    67e2:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    67e6:	movs	r4, #1
    start = 0;
    67e8:	cmp	r3, r5
    67ea:	it	ls
    67ec:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    67ee:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    67f2:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    67f6:	mov	r8, r5
  uint32_t endAlloc = start;
    67f8:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    67fa:	lsls	r4, r3
    67fc:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    67fe:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    6802:	movs	r2, #0
    6804:	mov	r0, r7
    6806:	add.w	r1, r1, r6, lsr #12
    680a:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    680e:	cbnz	r0, 6842 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6810:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6814:	ldr.w	r5, [r0, #1056]	; 0x420
    6818:	b.n	67e2 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    681a:	mov	r8, r6
        if (endAlloc == start) {
    681c:	cmp	r5, r6
    681e:	beq.n	6878 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    6820:	ldr.w	r2, [r7, #1072]	; 0x430
    6824:	cmp	r2, r6
    6826:	bls.n	686c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    6828:	lsls	r4, r4, #1
    682a:	ands.w	r4, r4, #255	; 0xff
    682e:	bne.n	6846 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    6830:	add.w	r3, r9, #1
    6834:	movs	r4, #1
    i = 0;
    6836:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    683a:	cmp.w	r3, #512	; 0x200
    683e:	bcs.n	67fe <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    6840:	mov	r9, r3
        if (!(mask & cache[i])) {
    6842:	ldrb.w	r3, [r0, r9]
    6846:	tst	r3, r4
        endAlloc++;
    6848:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    684c:	bne.n	681a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    684e:	sub.w	r2, r6, r8
    6852:	cmp	r2, fp
    6854:	bne.n	681c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    6856:	cmp.w	sl, #0
    685a:	bne.n	6866 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    685c:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    6860:	it	eq
    6862:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    6866:	add.w	r0, r8, #2
    686a:	b.n	6810 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    686c:	mov.w	r8, #0
          i = sectorSize;
    6870:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    6874:	mov	r6, r8
    6876:	b.n	6830 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    6878:	movs	r0, #1
    687a:	b.n	6810 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

0000687c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    687c:	subs	r1, #2
                                  uint32_t count, bool value) {
    687e:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6882:	mov	r5, r0
    6884:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    6886:	ldr.w	r0, [r0, #1072]	; 0x430
    688a:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    688c:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    688e:	cmp	r3, r0
    6890:	bhi.n	6912 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6892:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    6896:	cbz	r7, 6908 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6898:	cmp	r1, r2
    689a:	bhi.n	68aa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    689c:	cmp	r3, r2
    689e:	bls.n	68aa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    68a0:	cmp	r3, r0
    68a2:	it	cs
    68a4:	movcs	r3, #0
    68a6:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    68aa:	and.w	r3, r1, #7
    68ae:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    68b2:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    68b6:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    68ba:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    68be:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    68c2:	add.w	r8, r3, r1, lsr #12
    68c6:	movs	r2, #1
    68c8:	mov	r1, r8
    68ca:	mov	r0, r5
    68cc:	add	r8, r2
    68ce:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    68d2:	cbz	r0, 6912 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    68d4:	adds	r3, r0, r4
    68d6:	mov	r1, r9
    68d8:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    68dc:	ldrb	r2, [r3, #0]
    68de:	tst	r2, r1
    68e0:	ite	ne
    68e2:	movne	r4, #1
    68e4:	moveq	r4, #0
    68e6:	cmp	r4, r7
    68e8:	beq.n	6912 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    68ea:	eors	r2, r1
        if (--count == 0) {
    68ec:	subs	r6, #1
        cache[i] ^= mask;
    68ee:	strb	r2, [r3, #0]
        if (--count == 0) {
    68f0:	beq.n	6918 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    68f2:	lsls	r1, r1, #1
    68f4:	ands.w	r1, r1, #255	; 0xff
    68f8:	bne.n	68dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    68fa:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    68fc:	mov	r4, r1
    68fe:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    6900:	cmp	r0, r3
      mask = 1;
    6902:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    6904:	bne.n	68dc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    6906:	b.n	68c6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    6908:	cmp	r1, r2
      m_bitmapStart = start;
    690a:	it	cc
    690c:	strcc.w	r1, [r5, #1056]	; 0x420
    6910:	b.n	68aa <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    6912:	movs	r0, #0
}
    6914:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    6918:	movs	r0, #1
    691a:	b.n	6914 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

0000691c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    691c:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    691e:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6922:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6924:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    6926:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    692a:	ldrb.w	r5, [r0, #565]	; 0x235
    692e:	ands	r1, r3
    6930:	ldr	r3, [r4, #0]
    6932:	subs	r3, #2
    6934:	lsls	r3, r5
    6936:	add.w	r3, r3, r1, lsr #9
    693a:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    693e:	add	r1, r3
    6940:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    6944:	cbz	r0, 694e <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    6946:	ldr	r3, [r4, #4]
    6948:	ubfx	r3, r3, #0, #9
    694c:	add	r0, r3
}
    694e:	pop	{r3, r4, r5, pc}

00006950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6950:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    6952:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6956:	mov	r4, r1
    6958:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    695a:	adds	r3, #1
    695c:	cmp	r3, r1
    695e:	bcs.n	6966 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    6960:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    6964:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6966:	ldr.w	r1, [r0, #1060]	; 0x424
    696a:	movs	r2, #0
    696c:	add.w	r0, r0, #528	; 0x210
    6970:	add.w	r1, r1, r4, lsr #7
    6974:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6978:	cmp	r0, #0
    697a:	beq.n	6960 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    697c:	lsls	r4, r4, #2
    697e:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    6982:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    6984:	adds	r2, r3, #1
  return 1;
    6986:	itet	ne
    6988:	movne	r0, #1
    return 0;
    698a:	moveq	r0, #0
  *value = next;
    698c:	strne	r3, [r5, #0]
  return 1;
    698e:	b.n	6964 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00006990 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6990:	push	{r0, r1, r2, r4, r5, lr}
    6992:	mov	r5, r0
  uint32_t n = 0;
    6994:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6996:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    6998:	add	r2, sp, #4
    699a:	ldr	r1, [sp, #4]
    699c:	mov	r0, r5
    699e:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    69a2:	cmp	r0, #0
    69a4:	blt.n	69b2 <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    69a6:	add.w	r4, r4, #1
  } while (status);
    69aa:	bne.n	6998 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    69ac:	mov	r0, r4
    69ae:	add	sp, #12
    69b0:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    69b2:	movs	r4, #0
    69b4:	b.n	69ac <ExFatPartition::chainSize(unsigned long)+0x1c>

000069b6 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    69b6:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    69b8:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    69ba:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    69bc:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    69c0:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    69c2:	ands	r4, r3
    69c4:	add	r4, r2
  pos->position += offset;
    69c6:	add	r2, r3
    69c8:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    69ca:	ldrb.w	r3, [r0, #1093]	; 0x445
    69ce:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    69d0:	uxtb	r3, r3
    69d2:	lsrs	r4, r3
  while (tmp--) {
    69d4:	cbnz	r4, 69da <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    69d6:	movs	r0, #1
    69d8:	b.n	69f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    69da:	ldrb	r3, [r5, #8]
      pos->cluster++;
    69dc:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    69de:	cbz	r3, 69e8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    69e0:	adds	r1, #1
    69e2:	str	r1, [r5, #0]
    69e4:	subs	r4, #1
    69e6:	b.n	69d4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    69e8:	mov	r2, r5
    69ea:	mov	r0, r6
    69ec:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    69f0:	cmp	r0, #1
    69f2:	beq.n	69e4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    69f4:	pop	{r4, r5, r6, pc}

000069f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    69f6:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    69f8:	push	{r3, r4, r5, lr}
    69fa:	mov	r4, r1
    69fc:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    69fe:	bhi.n	6a04 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    6a00:	movs	r0, #0
}
    6a02:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6a04:	ldr.w	r3, [r0, #1072]	; 0x430
    6a08:	adds	r3, #1
    6a0a:	cmp	r3, r1
    6a0c:	bcc.n	6a00 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6a0e:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    6a12:	movs	r2, #1
    6a14:	add.w	r0, r0, #528	; 0x210
    6a18:	add.w	r1, r1, r4, lsr #7
    6a1c:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6a20:	cmp	r0, #0
    6a22:	beq.n	6a00 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    6a24:	lsls	r4, r4, #2
    6a26:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6a2a:	str	r5, [r0, r4]
  return true;
    6a2c:	movs	r0, #1
    6a2e:	b.n	6a02 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00006a30 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    6a30:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6a34:	mov	r7, r0
    6a36:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    6a38:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    6a3a:	add	r2, sp, #4
    6a3c:	mov	r1, r4
    6a3e:	mov	r0, r7
    6a40:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    6a44:	subs	r6, r0, #0
    6a46:	bge.n	6a52 <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    6a48:	movs	r5, #0
}
    6a4a:	mov	r0, r5
    6a4c:	add	sp, #8
    6a4e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    6a52:	movs	r2, #0
    6a54:	mov	r1, r4
    6a56:	mov	r0, r7
    6a58:	bl	69f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6a5c:	mov	r5, r0
    6a5e:	cmp	r0, #0
    6a60:	beq.n	6a48 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    6a62:	adds	r2, r4, #1
    6a64:	cbz	r6, 6a6c <ExFatPartition::freeChain(unsigned long)+0x3c>
    6a66:	ldr	r3, [sp, #4]
    6a68:	cmp	r3, r2
    6a6a:	beq.n	6a82 <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    6a6c:	movs	r3, #0
    6a6e:	sub.w	r2, r2, r8
    6a72:	mov	r1, r8
    6a74:	mov	r0, r7
    6a76:	bl	687c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6a7a:	cmp	r0, #0
    6a7c:	beq.n	6a48 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    6a7e:	ldr.w	r8, [sp, #4]
    cluster = next;
    6a82:	ldr	r4, [sp, #4]
  } while (status);
    6a84:	cmp	r6, #0
    6a86:	bne.n	6a3a <ExFatPartition::freeChain(unsigned long)+0xa>
    6a88:	b.n	6a4a <ExFatPartition::freeChain(unsigned long)+0x1a>

00006a8a <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6a8a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6a8e:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    6a90:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    6a92:	ldr.w	r7, [r0, #1068]	; 0x42c
    6a96:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    6a9a:	mov	r5, r4
    6a9c:	mov	r1, r7
    6a9e:	movs	r2, #0
    6aa0:	mov	r0, r8
    6aa2:	adds	r7, #1
    6aa4:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6aa8:	cbz	r0, 6ac6 <ExFatPartition::freeClusterCount()+0x3c>
    6aaa:	subs	r0, #1
    6aac:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    6ab0:	ldrb.w	r1, [r0, #1]!
    6ab4:	cmp	r1, #255	; 0xff
    6ab6:	bne.n	6aca <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    6ab8:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6aba:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6abc:	ldr.w	r3, [r6, #1072]	; 0x430
    6ac0:	cmp	r3, r5
    6ac2:	bhi.n	6ae4 <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    6ac4:	subs	r0, r3, r4
      }
    }
  }
}
    6ac6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    6aca:	cmp	r1, #0
    6acc:	beq.n	6aba <ExFatPartition::freeClusterCount()+0x30>
    6ace:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6ad0:	movs	r3, #1
          if ((mask & cache[i])) {
    6ad2:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6ad4:	mov.w	r3, r3, lsl #1
            usedCount++;
    6ad8:	it	ne
    6ada:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6adc:	subs	r2, #1
    6ade:	uxtb	r3, r3
    6ae0:	bne.n	6ad2 <ExFatPartition::freeClusterCount()+0x48>
    6ae2:	b.n	6aba <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    6ae4:	cmp	r5, ip
    6ae6:	bne.n	6ab0 <ExFatPartition::freeClusterCount()+0x26>
    6ae8:	b.n	6a9c <ExFatPartition::freeClusterCount()+0x12>
	...

00006aec <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6aec:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    6aee:	mov.w	r3, #4294967295
    6af2:	mov	r6, r2
    6af4:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6af8:	movs	r2, #0
  m_blockDev = dev;
    6afa:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6afe:	mov	r4, r0
    m_blockDev = blockDev;
    6b00:	str	r1, [r0, #4]
    6b02:	str.w	r1, [r0, #532]	; 0x214
    6b06:	mov	r1, r2
  m_fatType = 0;
    6b08:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6b0c:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6b0e:	str	r3, [r0, #12]
    m_status = 0;
    6b10:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6b14:	str.w	r3, [r0, #540]	; 0x21c
    6b18:	mov	r0, r7
    6b1a:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6b1e:	cmp	r6, #4
    6b20:	mov	r5, r0
    6b22:	bls.n	6b28 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    6b24:	movs	r0, #0
}
    6b26:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    6b28:	cmp	r0, #0
    6b2a:	beq.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    6b2c:	cbz	r6, 6b5c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    6b2e:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    6b30:	add.w	r3, r0, r3, lsl #4
    6b34:	ldrb.w	r2, [r3, #446]	; 0x1be
    6b38:	ands.w	r2, r2, #127	; 0x7f
    6b3c:	bne.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    6b3e:	ldrb.w	r3, [r3, #450]	; 0x1c2
    6b42:	cmp	r3, #0
    6b44:	beq.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    6b46:	add.w	r6, r0, r6, lsl #4
    6b4a:	mov	r0, r7
    6b4c:	ldr.w	r6, [r6, #438]	; 0x1b6
    6b50:	mov	r1, r6
    6b52:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6b56:	mov	r5, r0
    6b58:	cmp	r0, #0
    6b5a:	beq.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    6b5c:	ldr	r1, [pc, #104]	; (6bc8 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    6b5e:	movs	r2, #5
    6b60:	adds	r0, r5, #3
    6b62:	bl	f2a4 <strncmp>
    6b66:	mov	r1, r0
    6b68:	cmp	r0, #0
    6b6a:	bne.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    6b6c:	ldrb.w	r3, [r5, #108]	; 0x6c
    6b70:	cmp	r3, #9
    6b72:	bne.n	6b24 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    6b74:	ldr	r3, [r5, #80]	; 0x50
    6b76:	add	r3, r6
    6b78:	str.w	r3, [r4, #1060]	; 0x424
    6b7c:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    6b7e:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    6b82:	ldr	r3, [r5, #88]	; 0x58
    6b84:	add	r3, r6
    6b86:	str.w	r3, [r4, #1068]	; 0x42c
    6b8a:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6b8c:	str.w	r3, [r4, #1072]	; 0x430
    6b90:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    6b92:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6b96:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6b9a:	movs	r5, #1
  m_bitmapStart = 0;
    6b9c:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6ba0:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    6ba2:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6ba6:	adds	r3, #9
  bitmapFind(0, 1);
    6ba8:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6baa:	lsl.w	r3, r5, r3
    6bae:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    6bb2:	subs	r3, #1
    6bb4:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    6bb8:	bl	67d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6bbc:	movs	r3, #64	; 0x40
  return true;
    6bbe:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    6bc0:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    6bc4:	b.n	6b26 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    6bc6:	nop
    6bc8:	.word	0x200010a4

00006bcc <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6bcc:	push	{r4, lr}
    6bce:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6bd0:	ldr.w	r1, [r0, #1076]	; 0x434
    6bd4:	bl	6990 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6bd8:	ldrb.w	r3, [r4, #1093]	; 0x445
    6bdc:	adds	r3, #9
  return nc << bytesPerClusterShift();
    6bde:	uxtb	r3, r3
}
    6be0:	lsls	r0, r3
    6be2:	pop	{r4, pc}

00006be4 <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    6be4:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    6be6:	add.w	r4, r0, #1096	; 0x448
    6bea:	sub	sp, #56	; 0x38
    6bec:	movs	r3, #0
    6bee:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    6bf0:	mov	r0, sp
    6bf2:	mov	r1, r4
    6bf4:	str	r3, [sp, #48]	; 0x30
    6bf6:	bl	66d4 <ExFatFile::open(ExFatFile*, char const*, int)>
    6bfa:	mov	r5, r0
    6bfc:	cbz	r0, 6c26 <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6bfe:	ldrb.w	r3, [sp, #49]	; 0x31
    6c02:	ands.w	r3, r3, #80	; 0x50
    6c06:	beq.n	6c2c <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6c08:	mov	r2, sp
    6c0a:	mov	r3, r4
    6c0c:	add	r6, sp, #48	; 0x30
    6c0e:	mov	r4, r2
    6c10:	adds	r3, #8
    6c12:	ldmia	r4!, {r0, r1}
    6c14:	cmp	r4, r6
    6c16:	str.w	r0, [r3, #-8]
    6c1a:	str.w	r1, [r3, #-4]
    6c1e:	mov	r2, r4
    6c20:	bne.n	6c0e <ExFatVolume::chdir(char const*)+0x2a>
    6c22:	ldr	r0, [r4, #0]
    6c24:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    6c26:	mov	r0, r5
    6c28:	add	sp, #56	; 0x38
    6c2a:	pop	{r4, r5, r6, pc}
  return false;
    6c2c:	mov	r5, r3
    6c2e:	b.n	6c26 <ExFatVolume::chdir(char const*)+0x42>

00006c30 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    6c30:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6c32:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    6c34:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6c36:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6c38:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    6c3a:	orr.w	r2, r2, r1, lsr #1
    6c3e:	ldrb	r1, [r0, r3]
    6c40:	uxtah	r2, r1, r2
    6c44:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6c46:	bne.n	6c5a <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    6c48:	cmp	r4, #133	; 0x85
    6c4a:	ite	ne
    6c4c:	movne	r2, #1
    6c4e:	moveq	r2, #3
    6c50:	add	r3, r2
    6c52:	cmp	r3, #31
    6c54:	bls.n	6c36 <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    6c56:	mov	r0, r1
    6c58:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    6c5a:	movs	r2, #1
    6c5c:	b.n	6c50 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00006c5e <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    6c5e:	push	{r4, lr}
    6c60:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    6c62:	bl	5cdc <FsCache::sync()>
    6c66:	cbz	r0, 6c80 <ExFatPartition::cacheSync()+0x22>
    6c68:	add.w	r0, r4, #528	; 0x210
    6c6c:	bl	5cdc <FsCache::sync()>
    6c70:	cbz	r0, 6c80 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6c72:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    6c76:	ldr	r3, [r0, #0]
  }
    6c78:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6c7c:	ldr	r3, [r3, #32]
    6c7e:	bx	r3
  }
    6c80:	movs	r0, #0
    6c82:	pop	{r4, pc}

00006c84 <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    6c84:	push	{r3, r4, r5, r6, r7, lr}
    6c86:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6c88:	ldr	r0, [r0, #32]
    6c8a:	ldr	r1, [r4, #24]
    6c8c:	cbz	r1, 6c90 <ExFatFile::addCluster()+0xc>
    6c8e:	adds	r1, #1
    6c90:	movs	r2, #1
    6c92:	bl	67d4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    6c96:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6c98:	mov	r5, r0
  if (find < 2) {
    6c9a:	bhi.n	6ca2 <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6c9c:	movs	r6, #0
}
    6c9e:	mov	r0, r6
    6ca0:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    6ca2:	movs	r3, #1
    6ca4:	mov	r1, r0
    6ca6:	ldr	r0, [r4, #32]
    6ca8:	mov	r2, r3
    6caa:	bl	687c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6cae:	mov	r6, r0
    6cb0:	cmp	r0, #0
    6cb2:	beq.n	6c9c <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    6cb4:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6cb6:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    6cba:	cbnz	r2, 6cc8 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6cbc:	orr.w	r3, r3, #64	; 0x40
    6cc0:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    6cc4:	str	r5, [r4, #24]
  return true;
    6cc6:	b.n	6c9e <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6cc8:	lsls	r1, r3, #25
    6cca:	bmi.n	6cf0 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6ccc:	mov.w	r2, #4294967295
    6cd0:	mov	r1, r5
    6cd2:	ldr	r0, [r4, #32]
    6cd4:	bl	69f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6cd8:	cmp	r0, #0
    6cda:	beq.n	6c9c <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6cdc:	ldr	r1, [r4, #24]
    6cde:	cmp	r1, #0
    6ce0:	beq.n	6cc4 <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    6ce2:	mov	r2, r5
    6ce4:	ldr	r0, [r4, #32]
    6ce6:	bl	69f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6cea:	cmp	r0, #0
    6cec:	bne.n	6cc4 <ExFatFile::addCluster()+0x40>
    6cee:	b.n	6c9c <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    6cf0:	adds	r2, #1
    6cf2:	cmp	r2, r5
    6cf4:	beq.n	6cc4 <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6cf6:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6cfa:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6cfc:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6d00:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    6d02:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6d04:	cmp	r3, r1
    6d06:	bls.n	6ccc <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6d08:	adds	r7, r1, #1
    6d0a:	mov	r2, r7
    6d0c:	bl	69f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6d10:	cmp	r0, #0
    6d12:	beq.n	6c9c <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6d14:	mov	r1, r7
    6d16:	b.n	6d00 <ExFatFile::addCluster()+0x7c>

00006d18 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6d18:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6d1a:	ldrb.w	r3, [r0, #51]	; 0x33
    6d1e:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6d20:	lsls	r2, r3, #30
    6d22:	bmi.n	6d28 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    6d24:	movs	r0, #0
}
    6d26:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    6d28:	ldr	r1, [r0, #28]
    6d2a:	cbnz	r1, 6d62 <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    6d2c:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    6d2e:	movs	r2, #1
    6d30:	uxtb	r1, r5
    6d32:	mov	r0, r4
    6d34:	bl	5fc2 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6d38:	cmp	r0, #0
    6d3a:	beq.n	6d24 <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    6d3c:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6d3e:	adds	r5, #1
    cache[0] &= 0x7F;
    6d40:	and.w	r3, r3, #127	; 0x7f
    6d44:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    6d46:	uxtb	r3, r5
    6d48:	ldrb.w	r2, [r4, #48]	; 0x30
    6d4c:	cmp	r2, r3
    6d4e:	bcs.n	6d2e <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    6d50:	movs	r3, #0
  return m_vol->cacheSync();
    6d52:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    6d54:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    6d58:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    6d5c:	bl	6c5e <ExFatPartition::cacheSync()>
    6d60:	b.n	6d26 <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    6d62:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6d64:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    6d66:	bpl.n	6d9e <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6d68:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6d6c:	ldrd	r2, r5, [r4, #8]
    6d70:	adds	r3, #9
    6d72:	subs	r2, #1
    6d74:	uxtb	r3, r3
    6d76:	adc.w	r5, r5, #4294967295
    6d7a:	rsb	r7, r3, #32
    6d7e:	sub.w	r6, r3, #32
    6d82:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6d84:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6d86:	lsl.w	r7, r5, r7
    6d8a:	lsr.w	r6, r5, r6
    6d8e:	orrs	r2, r7
    6d90:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    6d92:	adds	r2, #1
    6d94:	bl	687c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6d98:	cmp	r0, #0
    6d9a:	bne.n	6d2c <ExFatFile::remove()+0x14>
    6d9c:	b.n	6d24 <ExFatFile::remove()+0xc>
    6d9e:	bl	6a30 <ExFatPartition::freeChain(unsigned long)>
    6da2:	b.n	6d98 <ExFatFile::remove()+0x80>

00006da4 <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    6da4:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    6da6:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    6daa:	sub	sp, #32
    6dac:	mov	r4, r0
  if (!isSubDir()) {
    6dae:	lsls	r3, r3, #27
    6db0:	bmi.n	6db8 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    6db2:	movs	r0, #0
}
    6db4:	add	sp, #32
    6db6:	pop	{r4, pc}
    seekSet(0);
    6db8:	movs	r2, #0
    6dba:	movs	r3, #0
    6dbc:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    6dc0:	movs	r2, #32
    6dc2:	mov	r1, sp
    6dc4:	mov	r0, r4
    6dc6:	bl	60f4 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6dca:	cbz	r0, 6de0 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6dcc:	cmp	r0, #32
    6dce:	bne.n	6db2 <ExFatFile::rmdir()+0xe>
    6dd0:	ldrsb.w	r2, [sp]
    6dd4:	ldrb.w	r3, [sp]
    6dd8:	cmp	r2, #0
    6dda:	blt.n	6db2 <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6ddc:	cmp	r3, #0
    6dde:	bne.n	6dc0 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    6de0:	movs	r3, #8
  return remove();
    6de2:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6de4:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6de8:	ldrb.w	r3, [r4, #51]	; 0x33
    6dec:	orr.w	r3, r3, #2
    6df0:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    6df4:	bl	6d18 <ExFatFile::remove()>
    6df8:	b.n	6db4 <ExFatFile::rmdir()+0x10>
	...

00006dfc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6dfc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6e00:	movs	r7, #0
    6e02:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    6e04:	ldr.w	r8, [pc, #204]	; 6ed4 <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6e08:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6e0a:	movs	r2, #0
    6e0c:	uxtb	r1, r7
    6e0e:	mov	r0, r4
    6e10:	bl	5fc2 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    6e14:	mov	r5, r0
    6e16:	cmp	r0, #0
    6e18:	beq.n	6e96 <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6e1a:	ldrb	r3, [r0, #0]
    6e1c:	cmp	r3, #192	; 0xc0
    6e1e:	beq.n	6eaa <ExFatFile::syncDir()+0xae>
    6e20:	cmp	r3, #193	; 0xc1
    6e22:	beq.n	6e68 <ExFatFile::syncDir()+0x6c>
    6e24:	cmp	r3, #133	; 0x85
    6e26:	bne.n	6e96 <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    6e28:	ldrb.w	r3, [r4, #49]	; 0x31
    6e2c:	and.w	r3, r3, #55	; 0x37
    6e30:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    6e32:	ldr.w	r3, [r8]
    6e36:	cbz	r3, 6e5a <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    6e38:	add.w	r2, sp, #3
    6e3c:	add.w	r1, sp, #6
    6e40:	add	r0, sp, #4
    6e42:	blx	r3
          df->modifyTimeMs = ms10;
    6e44:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    6e48:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    6e4c:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    6e4e:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    6e52:	strh	r2, [r5, #12]
    6e54:	strh	r3, [r5, #14]
    6e56:	strh	r2, [r5, #16]
    6e58:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    6e5a:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    6e5c:	ldrb.w	r3, [r2, #528]	; 0x210
    6e60:	orr.w	r3, r3, #1
    6e64:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6e68:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    6e6a:	mov	r1, r6
    6e6c:	mov	r0, r5
    6e6e:	bl	6c30 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6e72:	ldrb.w	r2, [r4, #48]	; 0x30
    6e76:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    6e78:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    6e7a:	cmp	r2, r3
    6e7c:	bcs.n	6e0a <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    6e7e:	movs	r2, #1
    6e80:	add.w	r1, r4, #36	; 0x24
    6e84:	ldr	r0, [r4, #32]
    6e86:	bl	691c <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6e8a:	cbz	r0, 6e96 <ExFatFile::syncDir()+0x9a>
    6e8c:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6e8e:	ldr	r0, [r4, #32]
    6e90:	bl	6c5e <ExFatPartition::cacheSync()>
    6e94:	cbnz	r0, 6ea4 <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    6e96:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6e9a:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6e9c:	orr.w	r3, r3, #1
    6ea0:	strb.w	r3, [r4, #50]	; 0x32
}
    6ea4:	add	sp, #8
    6ea6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    6eaa:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6eae:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    6eb0:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6eb2:	ite	mi
    6eb4:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6eb8:	andpl.w	r3, r3, #253	; 0xfd
    6ebc:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6ebe:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    6ec2:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    6ec6:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6ec8:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6eca:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6ece:	strd	r2, r3, [r0, #24]
    6ed2:	b.n	6e5a <ExFatFile::syncDir()+0x5e>
    6ed4:	.word	0x20021258

00006ed8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6ed8:	push	{r4, lr}
  if (!isOpen()) {
    6eda:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    6ede:	mov	r4, r0
  if (!isOpen()) {
    6ee0:	cbnz	r3, 6ee6 <ExFatFile::sync()+0xe>
    return true;
    6ee2:	movs	r0, #1
}
    6ee4:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    6ee6:	ldrsb.w	r2, [r0, #51]	; 0x33
    6eea:	ldrb.w	r3, [r0, #51]	; 0x33
    6eee:	cmp	r2, #0
    6ef0:	bge.n	6f02 <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    6ef2:	and.w	r3, r3, #127	; 0x7f
    6ef6:	strb.w	r3, [r0, #51]	; 0x33
}
    6efa:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6efe:	b.w	6dfc <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    6f02:	ldr	r0, [r0, #32]
    6f04:	bl	6c5e <ExFatPartition::cacheSync()>
    6f08:	cmp	r0, #0
    6f0a:	bne.n	6ee2 <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6f0c:	ldrb.w	r3, [r4, #50]	; 0x32
    6f10:	orr.w	r3, r3, #1
    6f14:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6f18:	b.n	6ee4 <ExFatFile::sync()+0xc>

00006f1a <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6f1a:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6f1c:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6f20:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6f22:	lsls	r2, r3, #25
    6f24:	bpl.n	6fa6 <ExFatFile::addDirCluster()+0x8c>
    6f26:	ldr	r0, [r0, #32]
    6f28:	bl	6bcc <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    6f2c:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    6f2e:	ldr.w	r3, [r3, #1084]	; 0x43c
    6f32:	add	r0, r3
  if (dl >= 0X4000000) {
    6f34:	cmp.w	r0, #67108864	; 0x4000000
    6f38:	bcs.n	6fc6 <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    6f3a:	mov	r0, r4
    6f3c:	bl	6c84 <ExFatFile::addCluster()>
    6f40:	cmp	r0, #0
    6f42:	beq.n	6fc6 <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    6f44:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6f46:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    6f48:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6f4a:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    6f4c:	ldrb.w	r2, [r3, #1093]	; 0x445
    6f50:	subs	r5, #2
    6f52:	ldr.w	r3, [r3, #1068]	; 0x42c
    6f56:	lsls	r5, r2
    6f58:	add	r5, r3
    6f5a:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6f5c:	ldrb.w	r3, [r0, #1093]	; 0x445
    6f60:	lsl.w	r3, r7, r3
    6f64:	cmp	r6, r3
    6f66:	bcc.n	6faa <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    6f68:	ldrb.w	r3, [r4, #49]	; 0x31
    6f6c:	lsls	r3, r3, #25
    6f6e:	bmi.n	6f9c <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6f70:	ldrb.w	r3, [r4, #51]	; 0x33
    6f74:	orn	r3, r3, #127	; 0x7f
    6f78:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    6f7c:	ldr.w	r2, [r0, #1084]	; 0x43c
    6f80:	ldrd	r3, r1, [r4, #8]
    6f84:	adds	r3, r3, r2
    6f86:	adc.w	r1, r1, #0
    6f8a:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6f8e:	ldrd	r3, r1, [r4, #16]
    6f92:	adds	r3, r3, r2
    6f94:	adc.w	r1, r1, #0
    6f98:	strd	r3, r1, [r4, #16]
  return sync();
    6f9c:	mov	r0, r4
}
    6f9e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    6fa2:	b.w	6ed8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6fa6:	ldr	r0, [r0, #8]
    6fa8:	b.n	6f2c <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    6faa:	movs	r2, #5
    6fac:	adds	r1, r5, r6
    6fae:	add.w	r0, r0, #528	; 0x210
    6fb2:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    6fb6:	cbz	r0, 6fc6 <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    6fb8:	mov.w	r2, #512	; 0x200
    6fbc:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6fbe:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    6fc0:	bl	a898 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6fc4:	b.n	6f5a <ExFatFile::addDirCluster()+0x40>
}
    6fc6:	movs	r0, #0
    6fc8:	pop	{r3, r4, r5, r6, r7, pc}

00006fca <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6fca:	push	{r4, lr}
  if (!parent->isDir()) {
    6fcc:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6fd0:	mov	r4, r0
  if (!parent->isDir()) {
    6fd2:	tst.w	r3, #80	; 0x50
    6fd6:	beq.n	700e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6fd8:	movw	r3, #2562	; 0xa02
    6fdc:	bl	6384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6fe0:	cbz	r0, 700e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    6fe2:	movs	r3, #16
  if (!addDirCluster()) {
    6fe4:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    6fe6:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6fea:	bl	6f1a <ExFatFile::addDirCluster()>
    6fee:	cbz	r0, 700e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6ff0:	ldr	r3, [r4, #24]
    6ff2:	mov	r0, r4
    6ff4:	movs	r2, #0
    6ff6:	str	r3, [r4, #28]
    6ff8:	movs	r3, #0
    6ffa:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6ffe:	movs	r3, #193	; 0xc1
  return sync();
    7000:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    7002:	strb.w	r3, [r4, #51]	; 0x33
}
    7006:	ldmia.w	sp!, {r4, lr}
  return sync();
    700a:	b.w	6ed8 <ExFatFile::sync()>
}
    700e:	movs	r0, #0
    7010:	pop	{r4, pc}

00007012 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    7012:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7016:	mov	r8, r3
    7018:	sub	sp, #88	; 0x58
    701a:	movs	r3, #0
    701c:	mov	r5, r0
    701e:	mov	r4, r1
    7020:	str	r2, [sp, #4]
    7022:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    7026:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    7028:	ldrb.w	r3, [r0, #49]	; 0x31
    702c:	cbz	r3, 7036 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    702e:	movs	r0, #0
}
    7030:	add	sp, #88	; 0x58
    7032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    7036:	ldrb.w	r3, [r1, #49]	; 0x31
    703a:	tst.w	r3, #80	; 0x50
    703e:	beq.n	702e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    7040:	ldrb	r3, [r2, #0]
    7042:	cmp	r3, #47	; 0x2f
    7044:	bne.n	705c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    7046:	ldr	r2, [sp, #4]
    7048:	ldrb	r3, [r2, #0]
    704a:	cmp	r3, #47	; 0x2f
    704c:	beq.n	70a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    704e:	ldr	r1, [r4, #32]
    7050:	add	r0, sp, #32
    7052:	bl	604e <ExFatFile::openRoot(ExFatVolume*)>
    7056:	cmp	r0, #0
    7058:	beq.n	702e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    705a:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    705c:	add	r3, sp, #4
    705e:	add	r2, sp, #8
    7060:	ldr	r1, [sp, #4]
    7062:	mov	r0, r5
    7064:	bl	6074 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    7068:	cmp	r0, #0
    706a:	beq.n	702e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    706c:	ldr	r3, [sp, #4]
    706e:	ldrb	r3, [r3, #0]
    7070:	cbz	r3, 70c4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    7072:	movs	r3, #0
    7074:	add	r2, sp, #8
    7076:	mov	r1, r4
    7078:	mov	r0, r5
    707a:	bl	6384 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    707e:	cbz	r0, 70ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    7080:	add	r6, sp, #32
    7082:	mov	r2, r5
    7084:	add.w	r3, r5, #48	; 0x30
    7088:	mov	r4, r6
    708a:	ldr	r0, [r2, #0]
    708c:	adds	r2, #8
    708e:	ldr.w	r1, [r2, #-4]
    7092:	mov	r7, r6
    7094:	cmp	r2, r3
    7096:	stmia	r7!, {r0, r1}
    7098:	mov	r6, r7
    709a:	bne.n	708a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    709c:	ldr	r0, [r2, #0]
    709e:	str	r0, [r7, #0]
    close();
    70a0:	mov	r0, r5
    70a2:	bl	5ffa <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    70a6:	b.n	705c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    70a8:	adds	r2, #1
    70aa:	str	r2, [sp, #4]
    70ac:	b.n	7046 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    70ae:	cmp.w	r8, #0
    70b2:	beq.n	702e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    70b4:	add	r2, sp, #8
    70b6:	mov	r1, r4
    70b8:	mov	r0, r5
    70ba:	bl	6fca <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    70be:	cmp	r0, #0
    70c0:	bne.n	7080 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    70c2:	b.n	702e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    70c4:	add	r2, sp, #8
    70c6:	mov	r1, r4
    70c8:	mov	r0, r5
    70ca:	bl	6fca <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    70ce:	b.n	7030 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

000070d0 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    70d0:	push	{r4, r5, r6, r7, lr}
    70d2:	mov	r4, r0
    70d4:	sub	sp, #116	; 0x74
    70d6:	movs	r0, #0
    70d8:	str	r0, [sp, #48]	; 0x30
    70da:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    70dc:	ldrb.w	r0, [r4, #49]	; 0x31
    70e0:	tst.w	r0, #24
    70e4:	bne.n	70ec <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    70e6:	movs	r0, #0
}
    70e8:	add	sp, #116	; 0x74
    70ea:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    70ec:	ldr	r0, [r4, #32]
    70ee:	ldr	r3, [r1, #32]
    70f0:	cmp	r0, r3
    70f2:	bne.n	70e6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    70f4:	movw	r3, #2561	; 0xa01
    70f8:	mov	r0, sp
    70fa:	bl	66d4 <ExFatFile::open(ExFatFile*, char const*, int)>
    70fe:	cmp	r0, #0
    7100:	beq.n	70e6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    7102:	add	r2, sp, #56	; 0x38
    7104:	mov	r3, r4
    7106:	add.w	r7, r4, #48	; 0x30
    710a:	mov	r6, r2
    710c:	ldr	r0, [r3, #0]
    710e:	adds	r3, #8
    7110:	ldr.w	r1, [r3, #-4]
    7114:	mov	r5, r2
    7116:	cmp	r3, r7
    7118:	stmia	r5!, {r0, r1}
    711a:	mov	r2, r5
    711c:	bne.n	710c <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    711e:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    7120:	add	r2, sp, #36	; 0x24
    7122:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    7126:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    7128:	ldmia	r2, {r0, r1, r2}
    712a:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    712e:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    7132:	mov	r0, r4
  m_setCount = file.m_setCount;
    7134:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7138:	ldrb.w	r3, [r4, #51]	; 0x33
    713c:	orn	r3, r3, #127	; 0x7f
    7140:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    7144:	bl	6ed8 <ExFatFile::sync()>
    7148:	cmp	r0, #0
    714a:	beq.n	70e6 <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    714c:	movs	r3, #0
  return oldFile.remove();
    714e:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    7150:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    7152:	movs	r3, #2
    7154:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    7158:	movs	r3, #8
    715a:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    715e:	bl	6d18 <ExFatFile::remove()>
    7162:	b.n	70e8 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00007164 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    7164:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    7166:	ldrb.w	r2, [r0, #51]	; 0x33
    716a:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    716c:	lsls	r3, r2, #30
    716e:	bmi.n	7176 <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    7170:	movs	r0, #0
}
    7172:	add	sp, #12
    7174:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    7176:	ldr	r3, [r0, #28]
    7178:	cmp	r3, #0
    717a:	beq.n	722a <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    717c:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    7180:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    7182:	beq.n	71f4 <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    7184:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    7186:	ldrb.w	r5, [r0, #1093]	; 0x445
    718a:	ldrd	r2, r6, [r4, #8]
    718e:	adds	r5, #9
    7190:	subs	r2, #1
    7192:	uxtb	r5, r5
    7194:	adc.w	r6, r6, #4294967295
    7198:	rsb	ip, r5, #32
    719c:	sub.w	r7, r5, #32
    71a0:	lsrs	r2, r5
    71a2:	lsl.w	ip, r6, ip
    71a6:	lsr.w	r7, r6, r7
    71aa:	orr.w	r2, r2, ip
    71ae:	orrs	r2, r7
    71b0:	adds	r2, #1
    if (m_curCluster) {
    71b2:	cbz	r1, 71e0 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    71b4:	subs	r3, #1
      toFree = m_curCluster + 1;
    71b6:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    71b8:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    71ba:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    71bc:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    71be:	cbnz	r2, 71e6 <ExFatFile::truncate()+0x82>
  return sync();
    71c0:	mov	r0, r4
  m_dataLength = m_curPosition;
    71c2:	ldrd	r2, r3, [r4]
    71c6:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    71ca:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    71ce:	ldrb.w	r3, [r4, #51]	; 0x33
    71d2:	orn	r3, r3, #127	; 0x7f
    71d6:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    71da:	bl	6ed8 <ExFatFile::sync()>
    71de:	b.n	7172 <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    71e0:	str	r3, [sp, #4]
      m_firstCluster = 0;
    71e2:	str	r1, [r4, #28]
    71e4:	b.n	71be <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    71e6:	movs	r3, #0
    71e8:	ldr	r1, [sp, #4]
    71ea:	bl	687c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    71ee:	cmp	r0, #0
    71f0:	bne.n	71c0 <ExFatFile::truncate()+0x5c>
    71f2:	b.n	7170 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    71f4:	cbz	r1, 7224 <ExFatFile::truncate()+0xc0>
      toFree = 0;
    71f6:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    71f8:	add	r2, sp, #4
    71fa:	ldr	r0, [r0, #32]
    71fc:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7200:	cmp	r0, #0
    7202:	blt.n	7170 <ExFatFile::truncate()+0xc>
      if (fg) {
    7204:	beq.n	7216 <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    7206:	mov.w	r2, #4294967295
    720a:	ldr	r1, [r4, #24]
    720c:	ldr	r0, [r4, #32]
    720e:	bl	69f6 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    7212:	cmp	r0, #0
    7214:	beq.n	7170 <ExFatFile::truncate()+0xc>
    if (toFree) {
    7216:	ldr	r1, [sp, #4]
    7218:	cmp	r1, #0
    721a:	beq.n	71c0 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    721c:	ldr	r0, [r4, #32]
    721e:	bl	6a30 <ExFatPartition::freeChain(unsigned long)>
    7222:	b.n	71ee <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    7224:	str	r3, [sp, #4]
      m_firstCluster = 0;
    7226:	str	r1, [r0, #28]
    7228:	b.n	7216 <ExFatFile::truncate()+0xb2>
      return true;
    722a:	movs	r0, #1
    722c:	b.n	7172 <ExFatFile::truncate()+0xe>
	...

00007230 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    7230:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7234:	ldrb.w	r3, [r0, #51]	; 0x33
    7238:	mov	r8, r1
    723a:	mov	r4, r0
    723c:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    723e:	lsls	r1, r3, #30
    7240:	bpl.n	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    7242:	lsls	r2, r3, #28
    7244:	bmi.n	7274 <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    7246:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7248:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    724c:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7250:	ldrd	r5, r3, [r4]
  while (toWrite) {
    7254:	cbnz	r7, 7292 <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    7256:	ldrd	r1, r2, [r4, #8]
    725a:	cmp	r1, r5
    725c:	sbcs	r2, r3
    725e:	bcs.w	7424 <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    7262:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7266:	ldrb.w	r3, [r4, #51]	; 0x33
    726a:	orn	r3, r3, #127	; 0x7f
    726e:	strb.w	r3, [r4, #51]	; 0x33
    7272:	b.n	742e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    7274:	ldrd	r2, r3, [r0, #16]
    7278:	bl	62a4 <ExFatFile::seekSet(unsigned long long)>
    727c:	cmp	r0, #0
    727e:	bne.n	7246 <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7280:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    7284:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    7288:	orr.w	r3, r3, #1
    728c:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    7290:	b.n	742e <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7292:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    7294:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    7296:	ldr.w	r3, [r0, #1080]	; 0x438
    729a:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    729c:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    72a0:	cbnz	r5, 72ec <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    72a2:	cmp	r1, #0
    72a4:	beq.n	7352 <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    72a6:	ldrb.w	r3, [r4, #51]	; 0x33
    72aa:	lsls	r3, r3, #25
    72ac:	bpl.n	7344 <ExFatFile::write(void const*, unsigned int)+0x114>
    72ae:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    72b2:	ldrd	r3, r2, [r4, #8]
    72b6:	adds	r0, #9
    72b8:	subs	r3, #1
    72ba:	uxtb	r0, r0
    72bc:	adc.w	r2, r2, #4294967295
    72c0:	rsb	lr, r0, #32
    72c4:	sub.w	ip, r0, #32
    72c8:	lsrs	r3, r0
    72ca:	lsl.w	lr, r2, lr
    72ce:	lsr.w	ip, r2, ip
    72d2:	ldr	r2, [r4, #28]
    72d4:	orr.w	r3, r3, lr
    72d8:	orr.w	r3, r3, ip
    72dc:	add	r3, r2
          if (m_curCluster < lc) {
    72de:	cmp	r3, r1
    72e0:	bhi.n	733e <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    72e2:	mov	r0, r4
    72e4:	bl	6c84 <ExFatFile::addCluster()>
    72e8:	cmp	r0, #0
    72ea:	beq.n	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    72ec:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    72f0:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    72f2:	ldr	r1, [r4, #24]
    72f4:	ldrb.w	r2, [ip, #1093]	; 0x445
    72f8:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    72fa:	ldr.w	r0, [ip, #1068]	; 0x42c
    72fe:	lsls	r1, r2
    7300:	add.w	r1, r1, r5, lsr #9
    7304:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    7306:	cbnz	r6, 736a <ExFatFile::write(void const*, unsigned int)+0x13a>
    7308:	cmp.w	r7, #512	; 0x200
    730c:	bcc.n	736a <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    730e:	cmp.w	r7, #1024	; 0x400
    7312:	ldr.w	lr, [ip, #540]	; 0x21c
    7316:	ldr.w	r0, [ip, #532]	; 0x214
    731a:	bcs.n	73f2 <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    731c:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    731e:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    7320:	ittt	eq
    7322:	moveq.w	r3, #4294967295
    m_status = 0;
    7326:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    732a:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    732e:	ldr	r3, [r0, #0]
    7330:	ldr	r3, [r3, #36]	; 0x24
    7332:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7334:	cmp	r0, #0
    7336:	beq.n	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    7338:	mov.w	r5, #512	; 0x200
    733c:	b.n	73be <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    733e:	adds	r1, #1
    7340:	str	r1, [r4, #24]
        if (fg == 0) {
    7342:	b.n	72ec <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7344:	mov	r2, sl
    7346:	bl	6950 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    734a:	cmp	r0, #0
    734c:	blt.n	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    734e:	beq.n	72e2 <ExFatFile::write(void const*, unsigned int)+0xb2>
    7350:	b.n	72ec <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    7352:	ldr	r3, [r4, #28]
    7354:	cbnz	r3, 7366 <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    7356:	mov	r0, r4
    7358:	bl	6c84 <ExFatFile::addCluster()>
    735c:	cmp	r0, #0
    735e:	beq.n	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    7360:	ldr	r3, [r4, #24]
    7362:	str	r3, [r4, #28]
    7364:	b.n	72ec <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    7366:	str	r3, [r4, #24]
    7368:	b.n	72ec <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    736a:	rsb	r5, r6, #512	; 0x200
    736e:	cmp	r5, r7
    7370:	it	cs
    7372:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    7374:	cmp	r6, #0
    7376:	bne.n	73ee <ExFatFile::write(void const*, unsigned int)+0x1be>
    7378:	ldr	r3, [r4, #20]
    737a:	ldr	r0, [r4, #0]
    737c:	str	r3, [sp, #4]
    737e:	ldr	r3, [r4, #16]
    7380:	ldr	r2, [r4, #4]
    7382:	cmp	r0, r3
    7384:	ldr	r3, [sp, #4]
    7386:	sbcs.w	r3, r2, r3
    738a:	bcc.n	73ee <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    738c:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    738e:	add.w	r0, ip, #528	; 0x210
    7392:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    7396:	cmp	r0, #0
    7398:	beq.w	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    739c:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    739e:	add	r6, r5
      memcpy(dst, src, n);
    73a0:	mov	r2, r5
    73a2:	mov	r1, r8
    73a4:	bl	a8dc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    73a8:	cmp.w	r6, #512	; 0x200
    73ac:	ldr	r0, [r4, #32]
    73ae:	bne.n	73be <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    73b0:	add.w	r0, r0, #528	; 0x210
    73b4:	bl	5cdc <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    73b8:	cmp	r0, #0
    73ba:	beq.w	7280 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    73be:	add	r8, r5
    toWrite -= n;
    73c0:	subs	r7, r7, r5
    m_curPosition += n;
    73c2:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    73c6:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    73ca:	adds	r3, r5, r3
    73cc:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    73d0:	cmp	r0, r3
    73d2:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    73d4:	itt	cc
    73d6:	ldrbcc.w	r1, [r4, #51]	; 0x33
    73da:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    73de:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    73e2:	itt	cc
    73e4:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    73e8:	strdcc	r3, r2, [r4, #16]
    73ec:	b.n	7250 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    73ee:	movs	r2, #1
    73f0:	b.n	738e <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    73f2:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    73f6:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    73f8:	lsrs	r2, r7, #9
    73fa:	cmp	r3, r2
    73fc:	it	cs
    73fe:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    7400:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    7402:	mov.w	r5, r3, lsl #9
    7406:	bhi.n	741a <ExFatFile::write(void const*, unsigned int)+0x1ea>
    7408:	adds	r2, r1, r3
    740a:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    740c:	ittt	hi
    740e:	movhi.w	r2, #4294967295
    m_status = 0;
    7412:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    7416:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    741a:	ldr	r2, [r0, #0]
    741c:	ldr	r6, [r2, #40]	; 0x28
    741e:	mov	r2, r8
    7420:	blx	r6
    7422:	b.n	73b8 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    7424:	ldr	r3, [pc, #16]	; (7438 <ExFatFile::write(void const*, unsigned int)+0x208>)
    7426:	ldr	r3, [r3, #0]
    7428:	cmp	r3, #0
    742a:	bne.w	7266 <ExFatFile::write(void const*, unsigned int)+0x36>
}
    742e:	mov	r0, r9
    7430:	add	sp, #12
    7432:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7436:	nop
    7438:	.word	0x20021258

0000743c <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    743c:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    743e:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    7440:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7442:	bl	792e <FatFile::seekSet(unsigned long)>
    7446:	cbz	r0, 7454 <FatFile::cacheDir(unsigned short)+0x18>
    7448:	mov	r0, r4
    744a:	movs	r1, #0
  }
    744c:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    7450:	b.w	78f0 <FatFile::readDirCache(bool)>
  }
    7454:	pop	{r4, pc}

00007456 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    7456:	cmp	r2, #4
    7458:	bhi.n	7464 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    745a:	add.w	r2, r1, r2, lsl #1
    745e:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    7462:	bx	lr
  } else if (i < 11) {
    7464:	cmp	r2, #10
    7466:	bhi.n	7470 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    7468:	add.w	r2, r1, r2, lsl #1
    746c:	ldrh	r0, [r2, #4]
    746e:	bx	lr
  } else if (i < 13) {
    7470:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    7472:	itte	ls
    7474:	addls.w	r2, r1, r2, lsl #1
    7478:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    747a:	movhi	r0, #0
}
    747c:	bx	lr

0000747e <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    747e:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    7480:	ldrb	r4, [r0, #0]
    7482:	mov	r5, r1
    7484:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    7486:	cbz	r4, 74f8 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    7488:	ands.w	r4, r4, #96	; 0x60
    748c:	beq.n	749e <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    748e:	cmp	r2, #1
    7490:	bls.n	74f8 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    7492:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    7494:	movs	r0, #1
    name[0] = '/';
    7496:	strb	r3, [r1, #0]
    name[1] = '\0';
    7498:	movs	r3, #0
    749a:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    749c:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    749e:	mov	r1, r4
    74a0:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    74a4:	cbz	r0, 74f8 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    74a6:	mov	r6, r0
    74a8:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    74aa:	movs	r2, #8
    if (i == 8) {
    74ac:	cmp	r1, #8
      if (*ptr == ' ') {
    74ae:	ldrb	r3, [r6, #0]
    if (i == 8) {
    74b0:	bne.n	74ca <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    74b2:	cmp	r3, #32
    74b4:	beq.n	74f0 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    74b6:	movs	r2, #16
      c = '.';
    74b8:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    74ba:	mov	ip, r4
    74bc:	adds	r4, #1
    74be:	cmp	r4, r7
    74c0:	bcs.n	74f8 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    74c2:	uxtb	r4, r4
    74c4:	strb.w	r3, [r5, ip]
    74c8:	b.n	74ea <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    74ca:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    74ce:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    74d0:	cmp.w	ip, #25
    74d4:	bhi.n	74e6 <FatFile::getSFN(char*, unsigned int)+0x68>
    74d6:	ldrb.w	ip, [r0, #12]
    74da:	tst.w	r2, ip
    74de:	beq.n	74ba <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    74e0:	adds	r3, #32
    74e2:	uxtb	r3, r3
    74e4:	b.n	74ba <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    74e6:	cmp	r3, #32
    74e8:	bne.n	74ba <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    74ea:	adds	r1, #1
    74ec:	cmp	r1, #12
    74ee:	bne.n	74ac <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    74f0:	movs	r3, #0
    74f2:	mov	r0, r4
    74f4:	strb	r3, [r5, r4]
  return j;
    74f6:	b.n	749c <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    74f8:	movs	r0, #0
    74fa:	strb	r0, [r5, #0]
  return 0;
    74fc:	b.n	749c <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00007500 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    7500:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    7504:	movs	r5, #0
    7506:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    7508:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    750a:	mov	r6, r0
    750c:	mov	r8, r1
    750e:	mov	r7, r2
    7510:	str	r5, [sp, #4]
  if (!isOpen()) {
    7512:	cbz	r3, 752e <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    7514:	ldrb	r3, [r0, #3]
    7516:	cbnz	r3, 7522 <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    7518:	bl	747e <FatFile::getSFN(char*, unsigned int)>
}
    751c:	add	sp, #44	; 0x2c
    751e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    7522:	mov	r1, r0
    7524:	add	r0, sp, #4
    7526:	bl	7716 <FatFile::openCluster(FatFile*)>
    752a:	cmp	r0, #0
    752c:	bne.n	75da <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    752e:	movs	r0, #0
    7530:	strb.w	r0, [r8]
  return 0;
    7534:	b.n	751c <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    7536:	ldrh	r1, [r6, #4]
    7538:	add	r0, sp, #4
    753a:	sub.w	r1, r1, r9
    753e:	uxth	r1, r1
    7540:	bl	743c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7544:	mov	sl, r0
    7546:	cmp	r0, #0
    7548:	beq.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    754a:	ldrb	r3, [r0, #11]
    754c:	cmp	r3, #15
    754e:	bne.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    7550:	ldrb	r3, [r0, #0]
    7552:	and.w	r3, r3, #31
    7556:	cmp	fp, r3
    7558:	bne.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    755a:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    755e:	uxtb.w	r2, fp
    7562:	mov	r1, sl
    7564:	mov	r0, r6
    7566:	bl	7456 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    756a:	cbz	r5, 75b6 <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    756c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    7570:	uxth	r2, r2
    7572:	cmp.w	r2, #1024	; 0x400
    7576:	bcs.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    7578:	ldr	r3, [pc, #108]	; (75e8 <FatFile::getName8(char*, unsigned int)+0xe8>)
    757a:	ubfx	r0, r0, #0, #10
    757e:	and.w	r5, r3, r5, lsl #10
    7582:	orrs	r0, r5
    7584:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    7588:	mov	r1, r4
    758a:	mov	r2, r7
    758c:	bl	5bc0 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    7590:	mov	r4, r0
    7592:	cmp	r0, #0
    7594:	beq.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    7596:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    7598:	add.w	fp, fp, #1
    759c:	cmp.w	fp, #13
    75a0:	bne.n	755e <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    75a2:	add.w	r9, r9, #1
    75a6:	uxth.w	r9, r9
    75aa:	uxtb.w	fp, r9
    75ae:	ldrb	r3, [r6, #3]
    75b0:	cmp	r3, fp
    75b2:	bcs.n	7536 <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    75b4:	b.n	75c6 <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    75b6:	add.w	r2, r0, #10240	; 0x2800
    75ba:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    75bc:	cmp.w	r2, #2048	; 0x800
    75c0:	bcc.n	75d0 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    75c2:	cmp	r0, #0
    75c4:	bne.n	7588 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    75c6:	movs	r3, #0
  return str - name;
    75c8:	sub.w	r0, r4, r8
  *str = '\0';
    75cc:	strb	r3, [r4, #0]
  return str - name;
    75ce:	b.n	751c <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    75d0:	cmp.w	r2, #1024	; 0x400
    75d4:	bcs.n	752e <FatFile::getName8(char*, unsigned int)+0x2e>
    75d6:	mov	r5, r0
    75d8:	b.n	7598 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    75da:	subs	r7, #1
  char* str = name;
    75dc:	mov	r4, r8
    75de:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    75e2:	add	r7, r8
    75e4:	b.n	75aa <FatFile::getName8(char*, unsigned int)+0xaa>
    75e6:	nop
    75e8:	.word	0x000ffc00

000075ec <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    75ec:	b.w	7500 <FatFile::getName8(char*, unsigned int)>

000075f0 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    75f0:	push	{r3, r4, r5, lr}
    75f2:	mov	r5, r1
    75f4:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    75f6:	movs	r2, #36	; 0x24
    75f8:	movs	r1, #0
    75fa:	bl	a898 <memset>

  m_vol = vol;
    75fe:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    7600:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    7602:	cmp	r3, #16
    7604:	beq.n	760e <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    7606:	cmp	r3, #32
    7608:	beq.n	7618 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    760a:	cmp	r3, #12
    760c:	bne.n	761c <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    760e:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    7610:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    7612:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7614:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    7616:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    7618:	movs	r3, #64	; 0x40
    761a:	b.n	7610 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    761c:	movs	r0, #0
    761e:	b.n	7616 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00007620 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    7620:	push	{r4, lr}
    7622:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    7624:	adds	r0, #40	; 0x28
    7626:	bl	5cdc <FsCache::sync()>
    762a:	cbz	r0, 7642 <FatPartition::cacheSync()+0x22>
    762c:	add.w	r0, r4, #568	; 0x238
    7630:	bl	5cdc <FsCache::sync()>
    7634:	cbz	r0, 7642 <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    7636:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    7638:	ldr	r3, [r0, #0]
  }
    763a:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    763e:	ldr	r3, [r3, #32]
    7640:	bx	r3
  }
    7642:	movs	r0, #0
    7644:	pop	{r4, pc}

00007646 <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    7646:	mov	r2, r0
bool FatFile::addCluster() {
    7648:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    764a:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    764e:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    7650:	ldr	r0, [r0, #8]
    7652:	mov	r1, r5
    7654:	bl	83f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    7658:	cbz	r0, 766c <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    765a:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    765c:	cbnz	r5, 766e <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    765e:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7662:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    7664:	ldrb	r3, [r4, #2]
    7666:	orn	r3, r3, #127	; 0x7f
    766a:	strb	r3, [r4, #2]
}
    766c:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    766e:	adds	r5, #1
    7670:	ldr	r2, [r4, #16]
    7672:	cmp	r2, r5
    7674:	beq.n	7664 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    7676:	bic.w	r3, r3, #64	; 0x40
    767a:	b.n	7662 <FatFile::addCluster()+0x1c>

0000767c <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    767c:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    767e:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    7680:	mov	r4, r0
  if (isRootFixed()) {
    7682:	ands.w	r5, r5, #32
    7686:	beq.n	768e <FatFile::addDirCluster()+0x12>
  return false;
    7688:	movs	r6, #0
}
    768a:	mov	r0, r6
    768c:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    768e:	ldr	r2, [r0, #20]
    7690:	ldr	r3, [pc, #84]	; (76e8 <FatFile::addDirCluster()+0x6c>)
    7692:	cmp	r2, r3
    7694:	bcs.n	7688 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    7696:	bl	7646 <FatFile::addCluster()>
    769a:	mov	r6, r0
    769c:	cmp	r0, #0
    769e:	beq.n	7688 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    76a0:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    76a2:	ldr	r3, [r4, #16]
    76a4:	ldrb	r1, [r2, #6]
    76a6:	subs	r3, #2
    76a8:	ldr	r7, [r2, #20]
    76aa:	lsls	r3, r1
    76ac:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    76ae:	ldr	r0, [r4, #8]
    76b0:	uxtb	r1, r5
    76b2:	ldrb	r3, [r0, #4]
    76b4:	cmp	r3, r1
    76b6:	bhi.n	76ca <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    76b8:	ldrb	r2, [r0, #6]
    76ba:	mov.w	r3, #512	; 0x200
    76be:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    76c0:	ldr	r2, [r4, #20]
    76c2:	uxtah	r3, r2, r3
    76c6:	str	r3, [r4, #20]
  return true;
    76c8:	b.n	768a <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    76ca:	movs	r2, #5
    76cc:	add	r1, r7
    76ce:	adds	r0, #40	; 0x28
    if (!pc) {
    76d0:	adds	r5, #1
    76d2:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    76d6:	cmp	r0, #0
    76d8:	beq.n	7688 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    76da:	mov.w	r2, #512	; 0x200
    76de:	movs	r1, #0
    76e0:	bl	a898 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    76e4:	b.n	76ae <FatFile::addDirCluster()+0x32>
    76e6:	nop
    76e8:	.word	0x001ffe00

000076ec <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    76ec:	push	{r4, lr}
    76ee:	mov	r4, r0
    76f0:	ldr	r0, [r0, #8]
    76f2:	mov	r2, r1
    76f4:	adds	r0, #40	; 0x28
    76f6:	ldr	r1, [r4, #24]
    76f8:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    76fc:	cbz	r0, 7708 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    76fe:	ldrh	r3, [r4, #4]
    7700:	and.w	r3, r3, #15
    7704:	add.w	r0, r0, r3, lsl #5
}
    7708:	pop	{r4, pc}

0000770a <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    770a:	ldrb	r3, [r0, #0]
    770c:	cbnz	r3, 7712 <FatFile::openRoot(FatVolume*)+0x8>
    770e:	b.w	75f0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    7712:	movs	r0, #0
    7714:	bx	lr

00007716 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    7716:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    7718:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    771a:	mov	r4, r0
    771c:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    771e:	cbnz	r3, 772a <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    7720:	ldr	r1, [r1, #8]
}
    7722:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    7726:	b.w	770a <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    772a:	movs	r2, #36	; 0x24
    772c:	movs	r1, #0
    772e:	bl	a898 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    7732:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    7734:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7736:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    7738:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    773a:	ldr	r3, [r5, #8]
    773c:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    773e:	ldr	r3, [r5, #12]
    7740:	str	r3, [r4, #32]
}
    7742:	pop	{r3, r4, r5, pc}

00007744 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    7744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7748:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    774c:	ldrb	r3, [r0, #2]
    774e:	mov	r4, r0
    7750:	sub	sp, #12
    7752:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    7754:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    7756:	mov	r5, r2
  if (!isReadable()) {
    7758:	bpl.n	783e <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    775a:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    775c:	lsls	r1, r3, #28
    775e:	bpl.n	7788 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    7760:	ldr	r3, [r4, #28]
    7762:	ldr	r2, [r4, #20]
    7764:	subs	r3, r3, r2
    7766:	cmp	r5, r3
    7768:	it	cs
    776a:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    776c:	add.w	r3, r4, #16
  toRead = nbyte;
    7770:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    7772:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7776:	vmov	s16, r3
  while (toRead) {
    777a:	cbnz	r6, 779a <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    777c:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    777e:	add	sp, #12
    7780:	vpop	{d8}
    7784:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    7788:	lsls	r2, r3, #26
    778a:	bpl.n	776c <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    778c:	ldr	r3, [r4, #8]
    778e:	ldrh	r2, [r3, #10]
    7790:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    7792:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    7796:	uxth	r3, r3
    7798:	b.n	7766 <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    779a:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    779c:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    779e:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    77a0:	ldr	r0, [r4, #8]
    77a2:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    77a6:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    77aa:	bpl.n	77e4 <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    77ac:	ldr	r2, [r0, #32]
    77ae:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    77b0:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    77b4:	cmp.w	fp, #0
    77b8:	bne.n	784c <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    77ba:	cmp.w	r6, #512	; 0x200
    77be:	bcc.n	784c <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    77c0:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    77c4:	cmp	r1, r2
    77c6:	beq.n	784c <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    77c8:	cmp.w	r6, #1024	; 0x400
    77cc:	bcs.n	787c <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    77ce:	ldr.w	r0, [sl, #44]	; 0x2c
    77d2:	mov	r2, r8
    77d4:	ldr	r3, [r0, #0]
    77d6:	ldr	r3, [r3, #16]
    77d8:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    77da:	cmp	r0, #0
    77dc:	beq.n	783e <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    77de:	mov.w	r7, #512	; 0x200
    77e2:	b.n	7870 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    77e4:	ldrb.w	r9, [r0, #5]
    77e8:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    77ec:	cmp.w	fp, #0
    77f0:	bne.n	7804 <FatFile::read(void*, unsigned int)+0xc0>
    77f2:	cmp.w	r9, #0
    77f6:	bne.n	7804 <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    77f8:	cbnz	r7, 7816 <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    77fa:	lsls	r2, r2, #25
    return m_rootDirStart;
    77fc:	ite	mi
    77fe:	ldrmi	r2, [r0, #32]
    7800:	ldrpl	r2, [r4, #32]
    7802:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    7804:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7806:	ldr	r1, [r4, #16]
    7808:	ldrb	r0, [r2, #6]
    780a:	subs	r1, #2
    780c:	ldr	r2, [r2, #20]
    780e:	lsls	r1, r0
    7810:	add	r1, r2
    7812:	add	r1, r9
    7814:	b.n	77b0 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    7816:	lsls	r3, r2, #28
          m_curCluster++;
    7818:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    781a:	bpl.n	7828 <FatFile::read(void*, unsigned int)+0xe4>
    781c:	ldrb	r2, [r4, #2]
    781e:	lsls	r7, r2, #25
    7820:	bpl.n	7828 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    7822:	adds	r1, #1
    7824:	str	r1, [r4, #16]
    7826:	b.n	7804 <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7828:	vmov	r2, s16
    782c:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7830:	cmp	r0, #0
    7832:	blt.n	783e <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    7834:	bne.n	7804 <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    7836:	ldrb	r3, [r4, #0]
    7838:	tst.w	r3, #112	; 0x70
    783c:	bne.n	777c <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    783e:	ldrb	r3, [r4, #1]
  return -1;
    7840:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    7844:	orr.w	r3, r3, #2
    7848:	strb	r3, [r4, #1]
  return -1;
    784a:	b.n	777e <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    784c:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    7850:	movs	r2, #0
    7852:	add.w	r0, sl, #40	; 0x28
    7856:	cmp	r7, r6
    7858:	it	cs
    785a:	movcs	r7, r6
    785c:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7860:	cmp	r0, #0
    7862:	beq.n	783e <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    7864:	add.w	r1, r0, fp
    7868:	mov	r2, r7
    786a:	mov	r0, r8
    786c:	bl	a8dc <memcpy>
    m_curPosition += n;
    7870:	ldr	r3, [r4, #20]
    dst += n;
    7872:	add	r8, r7
    toRead -= n;
    7874:	subs	r6, r6, r7
    m_curPosition += n;
    7876:	add	r3, r7
    7878:	str	r3, [r4, #20]
    toRead -= n;
    787a:	b.n	777a <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    787c:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    787e:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    7880:	lsls	r0, r0, #26
    7882:	bmi.n	7892 <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    7884:	ldrb.w	r0, [sl, #4]
    7888:	sub.w	r0, r0, r9
    788c:	cmp	r3, r0
    788e:	it	cs
    7890:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    7892:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    7894:	mov.w	r7, r3, lsl #9
    7898:	bls.n	78ae <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    789a:	ldr.w	r0, [sl, #44]	; 0x2c
    789e:	ldr	r2, [r0, #0]
    78a0:	ldr.w	sl, [r2, #20]
    78a4:	mov	r2, r8
    78a6:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    78a8:	cmp	r0, #0
    78aa:	bne.n	7870 <FatFile::read(void*, unsigned int)+0x12c>
    78ac:	b.n	783e <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    78ae:	adds	r0, r1, r3
    78b0:	cmp	r2, r0
    78b2:	bcs.n	789a <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    78b4:	add.w	r0, sl, #40	; 0x28
    78b8:	strd	r1, r3, [sp]
    78bc:	bl	5cdc <FsCache::sync()>
    78c0:	ldrd	r1, r3, [sp]
    78c4:	cmp	r0, #0
    78c6:	bne.n	789a <FatFile::read(void*, unsigned int)+0x156>
    78c8:	b.n	783e <FatFile::read(void*, unsigned int)+0xfa>

000078ca <FatFile::peek()>:
int FatFile::peek() {
    78ca:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    78cc:	movs	r2, #1
    78ce:	add.w	r1, sp, #7
    78d2:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    78d4:	ldrd	r5, r6, [r0, #16]
    78d8:	bl	7744 <FatFile::read(void*, unsigned int)>
    78dc:	cmp	r0, #1
    78de:	ite	eq
    78e0:	ldrbeq.w	r0, [sp, #7]
    78e4:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    78e8:	strd	r5, r6, [r4, #16]
}
    78ec:	add	sp, #8
    78ee:	pop	{r4, r5, r6, pc}

000078f0 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    78f0:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    78f2:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    78f6:	push	{r0, r1, r2, r4, r5, lr}
    78f8:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    78fa:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    78fe:	beq.n	7902 <FatFile::readDirCache(bool)+0x12>
    7900:	cbnz	r1, 792a <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    7902:	movs	r2, #1
    7904:	add.w	r1, sp, #7
    7908:	mov	r0, r4
    790a:	bl	7744 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    790e:	sxtb	r0, r0
    7910:	cmp	r0, #1
    7912:	beq.n	791a <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    7914:	movs	r0, #0
}
    7916:	add	sp, #12
    7918:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    791a:	ldr	r3, [r4, #20]
    791c:	adds	r3, #31
    return m_buffer;
    791e:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    7920:	str	r3, [r4, #20]
    7922:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    7924:	add.w	r0, r0, r5, lsl #5
    7928:	b.n	7916 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    792a:	adds	r3, #32
    792c:	b.n	791e <FatFile::readDirCache(bool)+0x2e>

0000792e <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    792e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7932:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    7934:	ldrb	r1, [r0, #0]
    7936:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    7938:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    793a:	cbz	r1, 795e <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    793c:	ldr	r0, [r0, #20]
    793e:	cmp	r0, r5
    7940:	beq.n	7950 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    7942:	cbnz	r5, 7954 <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    7944:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    7946:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    7948:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    794a:	bic.w	r3, r3, #32
    794e:	strb	r3, [r4, #2]
    return true;
    7950:	movs	r0, #1
    7952:	b.n	7962 <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    7954:	lsls	r3, r1, #28
    7956:	bpl.n	7966 <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    7958:	ldr	r3, [r4, #28]
    795a:	cmp	r3, r5
    795c:	bcs.n	7976 <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    795e:	movs	r0, #0
  m_curCluster = tmp;
    7960:	str	r7, [r4, #16]
}
    7962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    7966:	lsls	r6, r1, #26
    7968:	bpl.n	7976 <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    796a:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    796c:	ldrh	r3, [r3, #10]
    796e:	cmp.w	r5, r3, lsl #5
    7972:	bhi.n	795e <FatFile::seekSet(unsigned long)+0x30>
    7974:	b.n	7946 <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7976:	ldr.w	ip, [r4, #8]
    797a:	subs	r6, r5, #1
  if (isContiguous()) {
    797c:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    797e:	ldrb.w	r3, [ip, #6]
    7982:	lsls	r2, r2, #25
    7984:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7988:	uxtb	r3, r3
    798a:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    798e:	bpl.n	7998 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    7990:	ldr	r3, [r4, #32]
    7992:	add	r3, r6
    7994:	str	r3, [r4, #16]
    goto done;
    7996:	b.n	7946 <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7998:	subs	r2, r0, #1
    799a:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    799e:	cmp	r6, r3
    79a0:	bcc.n	79a4 <FatFile::seekSet(unsigned long)+0x76>
    79a2:	cbnz	r0, 79ca <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    79a4:	lsls	r3, r1, #25
    return m_rootDirStart;
    79a6:	ite	mi
    79a8:	ldrmi.w	r3, [ip, #32]
    79ac:	ldrpl	r3, [r4, #32]
    79ae:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    79b0:	add.w	r8, r4, #16
  while (nNew--) {
    79b4:	cmp	r6, #0
    79b6:	beq.n	7946 <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    79b8:	mov	r2, r8
    79ba:	ldr	r1, [r4, #16]
    79bc:	ldr	r0, [r4, #8]
    79be:	subs	r6, #1
    79c0:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
    79c4:	cmp	r0, #0
    79c6:	bgt.n	79b4 <FatFile::seekSet(unsigned long)+0x86>
    79c8:	b.n	795e <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    79ca:	subs	r6, r6, r3
    79cc:	b.n	79b0 <FatFile::seekSet(unsigned long)+0x82>

000079ce <FatFile::rmdir()>:
bool FatFile::rmdir() {
    79ce:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    79d0:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    79d2:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    79d4:	lsls	r2, r3, #27
    79d6:	bpl.n	79ec <FatFile::rmdir()+0x1e>
    seekSet(0);
    79d8:	movs	r1, #0
    79da:	bl	792e <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    79de:	movs	r1, #1
    79e0:	mov	r0, r4
    79e2:	bl	78f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    79e6:	cbnz	r0, 79f0 <FatFile::rmdir()+0x22>
      if (!getError()) {
    79e8:	ldrb	r3, [r4, #1]
    79ea:	cbz	r3, 7a04 <FatFile::rmdir()+0x36>
}
    79ec:	movs	r0, #0
    79ee:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    79f0:	ldrb	r3, [r0, #0]
    79f2:	cbz	r3, 7a04 <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    79f4:	cmp	r3, #229	; 0xe5
    79f6:	beq.n	79de <FatFile::rmdir()+0x10>
    79f8:	cmp	r3, #46	; 0x2e
    79fa:	beq.n	79de <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    79fc:	ldrb	r3, [r0, #11]
    79fe:	lsls	r3, r3, #28
    7a00:	bmi.n	79de <FatFile::rmdir()+0x10>
    7a02:	b.n	79ec <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    7a04:	movs	r3, #8
  return remove();
    7a06:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    7a08:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7a0a:	ldrb	r3, [r4, #2]
    7a0c:	orr.w	r3, r3, #2
    7a10:	strb	r3, [r4, #2]
}
    7a12:	ldmia.w	sp!, {r4, lr}
  return remove();
    7a16:	b.w	8d20 <FatFile::remove()>

00007a1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7a1a:	push	{r3, r4, r5, r6, r7, lr}
    7a1c:	mov	r7, r1
    7a1e:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    7a20:	movs	r1, #0
    7a22:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    7a24:	mov	r4, r0
    7a26:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    7a28:	bl	a898 <memset>
  m_vol = dirFile->m_vol;
    7a2c:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    7a2e:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    7a30:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    7a32:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    7a36:	str	r3, [r4, #12]
    7a38:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    7a3c:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    7a3e:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7a42:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    7a44:	lsls	r1, r2, #28
    7a46:	bmi.n	7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    7a48:	and.w	r2, r2, #23
    7a4c:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    7a4e:	ldrb	r1, [r3, #11]
    7a50:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    7a54:	itt	eq
    7a56:	orreq.w	r2, r2, #8
    7a5a:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    7a5c:	ldrb.w	r2, [sp, #24]
    7a60:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    7a62:	and.w	r2, r5, #3
    7a66:	cmp	r2, #1
    7a68:	beq.n	7aae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    7a6a:	cmp	r2, #2
    7a6c:	beq.n	7ab2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    7a6e:	cbnz	r2, 7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    7a70:	lsls	r2, r5, #21
    7a72:	bmi.n	7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7a74:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    7a76:	lsls	r7, r2, #30
    7a78:	bpl.n	7a84 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    7a7a:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    7a7c:	lsls	r6, r1, #27
    7a7e:	bmi.n	7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    7a80:	lsls	r1, r1, #31
    7a82:	bmi.n	7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    7a84:	and.w	r1, r5, #8
    7a88:	orrs	r2, r1
    7a8a:	strb	r2, [r4, #2]
    return m_sector;
    7a8c:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    7a8e:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    7a90:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    7a92:	ldrh	r2, [r3, #20]
    7a94:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    7a98:	lsls	r2, r5, #21
    7a9a:	bpl.n	7ac6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7a9c:	cbnz	r1, 7ab6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7a9e:	ldrb	r3, [r4, #2]
    7aa0:	orn	r3, r3, #127	; 0x7f
    7aa4:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7aa6:	lsls	r3, r5, #17
    7aa8:	bmi.n	7ace <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    7aaa:	movs	r0, #1
}
    7aac:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    7aae:	movs	r2, #2
    7ab0:	b.n	7a76 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    7ab2:	movs	r2, #3
    7ab4:	b.n	7a76 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7ab6:	bl	8476 <FatPartition::freeChain(unsigned long)>
    7aba:	cmp	r0, #0
    7abc:	bne.n	7a9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    7abe:	movs	r0, #0
    7ac0:	strb	r0, [r4, #0]
  m_flags = 0;
    7ac2:	strb	r0, [r4, #2]
  return false;
    7ac4:	b.n	7aac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    7ac6:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7ac8:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    7aca:	str	r3, [r4, #28]
    7acc:	b.n	7aa6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7ace:	ldr	r1, [r4, #28]
    7ad0:	mov	r0, r4
    7ad2:	bl	792e <FatFile::seekSet(unsigned long)>
    7ad6:	cmp	r0, #0
    7ad8:	bne.n	7aaa <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    7ada:	b.n	7abe <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007adc <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7adc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ae0:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    7ae2:	ldrb	r2, [r0, #0]
    7ae4:	sub	sp, #20
    7ae6:	mov	r7, r0
    7ae8:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7aea:	cmp	r2, #0
    7aec:	bne.n	7b74 <FatFile::openNext(FatFile*, int)+0x98>
    7aee:	ldrb	r2, [r1, #0]
    7af0:	tst.w	r2, #112	; 0x70
    7af4:	beq.n	7b74 <FatFile::openNext(FatFile*, int)+0x98>
    7af6:	ldr	r4, [r1, #20]
    7af8:	ands.w	r4, r4, #31
    7afc:	bne.n	7b74 <FatFile::openNext(FatFile*, int)+0x98>
    7afe:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    7b00:	movs	r1, #0
    7b02:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    7b04:	ldr.w	r8, [r6, #20]
    7b08:	str	r3, [sp, #12]
    7b0a:	bl	78f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    7b0e:	cbz	r0, 7b74 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    7b10:	ldrb	r1, [r0, #0]
    7b12:	cbz	r1, 7b74 <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    7b14:	cmp	r1, #46	; 0x2e
    7b16:	ldr	r3, [sp, #12]
    7b18:	beq.n	7b5e <FatFile::openNext(FatFile*, int)+0x82>
    7b1a:	cmp	r1, #229	; 0xe5
    7b1c:	beq.n	7b5e <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7b1e:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7b20:	ands.w	ip, r2, #8
    7b24:	bne.n	7b62 <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    7b26:	cbz	r4, 7b4a <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    7b28:	subs	r1, r0, #1
    7b2a:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7b2e:	mov.w	r2, ip, lsl #7
    7b32:	ldrb.w	r0, [r1, #1]!
    7b36:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    7b3a:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7b3c:	uxtab	r2, r0, r2
    7b40:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    7b44:	bne.n	7b2e <FatFile::openNext(FatFile*, int)+0x52>
    7b46:	cmp	r9, ip
    7b48:	bne.n	7b74 <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    7b4a:	ubfx	r2, r8, #5, #16
    7b4e:	mov	r1, r6
    7b50:	mov	r0, r7
    7b52:	str	r4, [sp, #0]
    7b54:	bl	7a1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    7b58:	add	sp, #20
    7b5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    7b5e:	movs	r4, #0
    7b60:	b.n	7b00 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    7b62:	cmp	r2, #15
    7b64:	bne.n	7b5e <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    7b66:	lsls	r2, r1, #25
    7b68:	bpl.n	7b00 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    7b6a:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    7b6e:	ldrb.w	r9, [r0, #13]
    7b72:	b.n	7b00 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    7b74:	movs	r0, #0
    7b76:	b.n	7b58 <FatFile::openNext(FatFile*, int)+0x7c>

00007b78 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    7b78:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    7b7a:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    7b7c:	mov	r4, r0
  if (!isOpen()) {
    7b7e:	cmp	r3, #0
    7b80:	beq.n	7bee <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    7b82:	ldrsb.w	r3, [r0, #2]
    7b86:	cmp	r3, #0
    7b88:	bge.n	7be2 <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7b8a:	movs	r1, #1
    7b8c:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7b90:	mov	r5, r0
    7b92:	cbnz	r0, 7ba2 <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    7b94:	ldrb	r3, [r4, #1]
  return false;
    7b96:	movs	r0, #0
  m_error |= WRITE_ERROR;
    7b98:	orr.w	r3, r3, #1
    7b9c:	strb	r3, [r4, #1]
}
    7b9e:	add	sp, #12
    7ba0:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7ba2:	ldrb	r3, [r0, #0]
    7ba4:	cmp	r3, #229	; 0xe5
    7ba6:	beq.n	7b94 <FatFile::sync()+0x1c>
    if (isFile()) {
    7ba8:	ldrb	r3, [r4, #0]
    7baa:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7bac:	itt	mi
    7bae:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7bb0:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    7bb2:	ldr	r3, [r4, #32]
    7bb4:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    7bb6:	lsrs	r3, r3, #16
    7bb8:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    7bba:	ldr	r3, [pc, #56]	; (7bf4 <FatFile::sync()+0x7c>)
    7bbc:	ldr	r3, [r3, #0]
    7bbe:	cbz	r3, 7bda <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    7bc0:	add.w	r2, sp, #3
    7bc4:	add.w	r1, sp, #6
    7bc8:	add	r0, sp, #4
    7bca:	blx	r3
      setLe16(dir->modifyDate, date);
    7bcc:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7bd0:	strh	r3, [r5, #24]
    7bd2:	strh	r3, [r5, #18]
    7bd4:	ldrh.w	r3, [sp, #6]
    7bd8:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7bda:	ldrb	r3, [r4, #2]
    7bdc:	and.w	r3, r3, #127	; 0x7f
    7be0:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    7be2:	ldr	r0, [r4, #8]
    7be4:	bl	7620 <FatPartition::cacheSync()>
    7be8:	cmp	r0, #0
    7bea:	beq.n	7b94 <FatFile::sync()+0x1c>
    7bec:	b.n	7b9e <FatFile::sync()+0x26>
    return true;
    7bee:	movs	r0, #1
    7bf0:	b.n	7b9e <FatFile::sync()+0x26>
    7bf2:	nop
    7bf4:	.word	0x20021258

00007bf8 <FatFile::close()>:
bool FatFile::close() {
    7bf8:	push	{r4, lr}
    7bfa:	mov	r4, r0
  bool rtn = sync();
    7bfc:	bl	7b78 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7c00:	movs	r3, #0
    7c02:	strb	r3, [r4, #0]
  m_flags = 0;
    7c04:	strb	r3, [r4, #2]
}
    7c06:	pop	{r4, pc}

00007c08 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7c08:	push	{r4, r5, r6, r7, lr}
    7c0a:	mov	r7, r3
    7c0c:	sub	sp, #84	; 0x54
  FatFile() {}
    7c0e:	movs	r3, #0
    7c10:	mov	r6, r0
    7c12:	mov	r4, r1
    7c14:	str	r2, [sp, #4]
    7c16:	str	r3, [sp, #8]
    7c18:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7c1c:	ldrb	r3, [r0, #0]
    7c1e:	cbz	r3, 7c26 <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7c20:	movs	r0, #0
}
    7c22:	add	sp, #84	; 0x54
    7c24:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    7c26:	ldrb	r3, [r1, #0]
    7c28:	tst.w	r3, #112	; 0x70
    7c2c:	beq.n	7c20 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    7c2e:	ldrb	r3, [r2, #0]
    7c30:	cmp	r3, #47	; 0x2f
    7c32:	bne.n	7c5a <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    7c34:	ldr	r2, [sp, #4]
    7c36:	ldrb	r3, [r2, #0]
    7c38:	cmp	r3, #47	; 0x2f
    7c3a:	beq.n	7c48 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    7c3c:	ldr	r1, [r4, #8]
    if (*path == 0) {
    7c3e:	cbnz	r3, 7c4e <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    7c40:	mov	r0, r6
    7c42:	bl	770a <FatFile::openRoot(FatVolume*)>
    7c46:	b.n	7c22 <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    7c48:	adds	r2, #1
    7c4a:	str	r2, [sp, #4]
    7c4c:	b.n	7c34 <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    7c4e:	add	r0, sp, #8
    7c50:	bl	75f0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    7c54:	cmp	r0, #0
    7c56:	beq.n	7c20 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    7c58:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    7c5a:	add	r3, sp, #4
    7c5c:	add	r2, sp, #44	; 0x2c
    7c5e:	ldr	r1, [sp, #4]
    7c60:	mov	r0, r6
    7c62:	bl	8c74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7c66:	cmp	r0, #0
    7c68:	beq.n	7c20 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    7c6a:	ldr	r3, [sp, #4]
    7c6c:	ldrb	r3, [r3, #0]
    7c6e:	cbz	r3, 7c98 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    7c70:	movs	r3, #0
    7c72:	add	r2, sp, #44	; 0x2c
    7c74:	mov	r1, r4
    7c76:	mov	r0, r6
    7c78:	bl	89f0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7c7c:	cmp	r0, #0
    7c7e:	beq.n	7c20 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    7c80:	mov	r5, r6
    7c82:	add	r4, sp, #8
    7c84:	ldmia	r5!, {r0, r1, r2, r3}
    7c86:	stmia	r4!, {r0, r1, r2, r3}
    7c88:	ldmia	r5!, {r0, r1, r2, r3}
    7c8a:	stmia	r4!, {r0, r1, r2, r3}
    7c8c:	ldr	r3, [r5, #0]
    close();
    7c8e:	mov	r0, r6
    tmpDir = *this;
    7c90:	str	r3, [r4, #0]
    close();
    7c92:	bl	7bf8 <FatFile::close()>
  while (1) {
    7c96:	b.n	7c58 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    7c98:	mov	r3, r7
    7c9a:	add	r2, sp, #44	; 0x2c
    7c9c:	mov	r1, r4
    7c9e:	mov	r0, r6
    7ca0:	bl	89f0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7ca4:	b.n	7c22 <FatFile::open(FatFile*, char const*, int)+0x1a>

00007ca6 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    7ca6:	cbz	r1, 7cb0 <FatFile::open(FatVolume*, char const*, int)+0xa>
    7ca8:	add.w	r1, r1, #1096	; 0x448
    7cac:	b.w	7c08 <FatFile::open(FatFile*, char const*, int)>
}
    7cb0:	mov	r0, r1
    7cb2:	bx	lr

00007cb4 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    7cb4:	push	{r4, r5, r6, lr}
    7cb6:	mov	r6, r0
    7cb8:	mov	r4, r1
  if (!sync()) {
    7cba:	bl	7b78 <FatFile::sync()>
    7cbe:	mov	r5, r0
    7cc0:	cbnz	r0, 7cc8 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    7cc2:	movs	r5, #0
}
    7cc4:	mov	r0, r5
    7cc6:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7cc8:	movs	r1, #0
    7cca:	mov	r0, r6
    7ccc:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7cd0:	mov	r3, r0
    7cd2:	cmp	r0, #0
    7cd4:	beq.n	7cc2 <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    7cd6:	mov	r1, r4
    7cd8:	add.w	r2, r0, #32
    7cdc:	ldr.w	r0, [r3], #4
    7ce0:	cmp	r3, r2
    7ce2:	str.w	r0, [r1], #4
    7ce6:	bne.n	7cdc <FatFile::dirEntry(DirFat_t*)+0x28>
    7ce8:	b.n	7cc4 <FatFile::dirEntry(DirFat_t*)+0x10>

00007cea <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7cea:	push	{r4, r5, lr}
    7cec:	sub	sp, #36	; 0x24
    7cee:	mov	r5, r1
    7cf0:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7cf2:	mov	r1, sp
    7cf4:	bl	7cb4 <FatFile::dirEntry(DirFat_t*)>
    7cf8:	cbz	r0, 7d06 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7cfa:	ldrh.w	r3, [sp, #16]
    7cfe:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7d00:	ldrh.w	r3, [sp, #14]
    7d04:	strh	r3, [r4, #0]
}
    7d06:	add	sp, #36	; 0x24
    7d08:	pop	{r4, r5, pc}

00007d0a <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7d0a:	push	{r4, r5, lr}
    7d0c:	sub	sp, #36	; 0x24
    7d0e:	mov	r5, r1
    7d10:	mov	r4, r2
  if (!dirEntry(&dir)) {
    7d12:	mov	r1, sp
    7d14:	bl	7cb4 <FatFile::dirEntry(DirFat_t*)>
    7d18:	cbz	r0, 7d26 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7d1a:	ldrh.w	r3, [sp, #24]
    7d1e:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7d20:	ldrh.w	r3, [sp, #22]
    7d24:	strh	r3, [r4, #0]
}
    7d26:	add	sp, #36	; 0x24
    7d28:	pop	{r4, r5, pc}

00007d2a <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7d2a:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    7d2c:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    7d2e:	sub	sp, #36	; 0x24
    7d30:	mov	r4, r0
    7d32:	mov	r6, r1
  if (!parent->isDir()) {
    7d34:	tst.w	r3, #112	; 0x70
    7d38:	bne.n	7d40 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    7d3a:	movs	r0, #0
}
    7d3c:	add	sp, #36	; 0x24
    7d3e:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    7d40:	movw	r3, #2562	; 0xa02
    7d44:	bl	89f0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7d48:	cmp	r0, #0
    7d4a:	beq.n	7d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    7d4c:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    7d4e:	movs	r5, #16
  if (!addDirCluster()) {
    7d50:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    7d52:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    7d54:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    7d56:	bl	767c <FatFile::addDirCluster()>
    7d5a:	cmp	r0, #0
    7d5c:	beq.n	7d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    7d5e:	ldr	r3, [r4, #16]
    seekSet(0);
    7d60:	movs	r1, #0
    7d62:	mov	r0, r4
    7d64:	str	r3, [r4, #32]
    7d66:	bl	792e <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    7d6a:	mov	r0, r4
    7d6c:	bl	7b78 <FatFile::sync()>
    7d70:	cmp	r0, #0
    7d72:	beq.n	7d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7d74:	mov	r1, r7
    7d76:	mov	r0, r4
    7d78:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7d7c:	cmp	r0, #0
    7d7e:	beq.n	7d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    7d80:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    7d82:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    7d84:	mov	r3, r0
    7d86:	add.w	ip, r0, #32
    7d8a:	mov	r5, r2
    7d8c:	ldr	r0, [r3, #0]
    7d8e:	adds	r3, #8
    7d90:	ldr.w	r1, [r3, #-4]
    7d94:	mov	r7, r2
    7d96:	cmp	r3, ip
    7d98:	stmia	r7!, {r0, r1}
    7d9a:	mov	r2, r7
    7d9c:	bne.n	7d8c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7d9e:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    7da2:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7da4:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    7da6:	movs	r2, #1
    dot.name[i] = ' ';
    7da8:	str.w	r3, [sp, #1]
    7dac:	adds	r0, #40	; 0x28
    7dae:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7db2:	subs	r1, #2
    7db4:	strh.w	r3, [sp, #9]
    7db8:	ldrb.w	r3, [r0, #-34]
    7dbc:	lsls	r1, r3
    7dbe:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7dc2:	add	r1, r3
    7dc4:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7dc8:	mov	r3, r0
    7dca:	cmp	r0, #0
    7dcc:	beq.n	7d3a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    7dce:	movs	r2, #46	; 0x2e
    7dd0:	mov	ip, r5
    7dd2:	mov	r7, r0
    7dd4:	add.w	lr, sp, #32
    7dd8:	strb.w	r2, [sp]
    7ddc:	mov	r2, ip
    7dde:	adds	r7, #8
    7de0:	ldmia	r2!, {r0, r1}
    7de2:	cmp	r2, lr
    7de4:	str.w	r0, [r7, #-8]
    7de8:	str.w	r1, [r7, #-4]
    7dec:	mov	ip, r2
    7dee:	bne.n	7ddc <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7df0:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    7df2:	adds	r3, #32
  dot.name[1] = '.';
    7df4:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7df8:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7dfa:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7dfc:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7dfe:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    7e02:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7e04:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7e08:	mov	r5, r2
    7e0a:	adds	r3, #8
    7e0c:	ldmia	r5!, {r0, r1}
    7e0e:	cmp	r5, r6
    7e10:	str.w	r0, [r3, #-8]
    7e14:	str.w	r1, [r3, #-4]
    7e18:	mov	r2, r5
    7e1a:	bne.n	7e08 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7e1c:	ldr	r0, [r4, #8]
    7e1e:	bl	7620 <FatPartition::cacheSync()>
    7e22:	b.n	7d3c <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

00007e24 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    7e24:	push	{r4, r5, r6, r7, lr}
    7e26:	mov	r7, r3
    7e28:	sub	sp, #84	; 0x54
    7e2a:	movs	r3, #0
    7e2c:	mov	r6, r0
    7e2e:	mov	r4, r1
    7e30:	str	r2, [sp, #4]
    7e32:	strh.w	r3, [sp, #20]
  FatFile() {}
    7e36:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    7e38:	ldrb	r3, [r0, #0]
    7e3a:	cbz	r3, 7e42 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    7e3c:	movs	r0, #0
}
    7e3e:	add	sp, #84	; 0x54
    7e40:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    7e42:	ldrb	r3, [r1, #0]
    7e44:	tst.w	r3, #112	; 0x70
    7e48:	beq.n	7e3c <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    7e4a:	ldrb	r3, [r2, #0]
    7e4c:	cmp	r3, #47	; 0x2f
    7e4e:	bne.n	7e66 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    7e50:	ldr	r2, [sp, #4]
    7e52:	ldrb	r3, [r2, #0]
    7e54:	cmp	r3, #47	; 0x2f
    7e56:	beq.n	7ea2 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    7e58:	ldr	r1, [r4, #8]
    7e5a:	add	r0, sp, #44	; 0x2c
    7e5c:	bl	75f0 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    7e60:	cmp	r0, #0
    7e62:	beq.n	7e3c <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    7e64:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    7e66:	add	r3, sp, #4
    7e68:	add	r2, sp, #8
    7e6a:	ldr	r1, [sp, #4]
    7e6c:	mov	r0, r6
    7e6e:	bl	8c74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    7e72:	cmp	r0, #0
    7e74:	beq.n	7e3c <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    7e76:	ldr	r3, [sp, #4]
    7e78:	ldrb	r3, [r3, #0]
    7e7a:	cbz	r3, 7ebc <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    7e7c:	movs	r3, #0
    7e7e:	add	r2, sp, #8
    7e80:	mov	r1, r4
    7e82:	mov	r0, r6
    7e84:	bl	89f0 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7e88:	cbz	r0, 7ea8 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    7e8a:	mov	r5, r6
    7e8c:	add	r4, sp, #44	; 0x2c
    7e8e:	ldmia	r5!, {r0, r1, r2, r3}
    7e90:	stmia	r4!, {r0, r1, r2, r3}
    7e92:	ldmia	r5!, {r0, r1, r2, r3}
    7e94:	stmia	r4!, {r0, r1, r2, r3}
    7e96:	ldr	r3, [r5, #0]
    close();
    7e98:	mov	r0, r6
    tmpDir = *this;
    7e9a:	str	r3, [r4, #0]
    close();
    7e9c:	bl	7bf8 <FatFile::close()>
  while (1) {
    7ea0:	b.n	7e64 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    7ea2:	adds	r2, #1
    7ea4:	str	r2, [sp, #4]
    7ea6:	b.n	7e50 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7ea8:	cmp	r7, #0
    7eaa:	beq.n	7e3c <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7eac:	add	r2, sp, #8
    7eae:	mov	r1, r4
    7eb0:	mov	r0, r6
    7eb2:	bl	7d2a <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7eb6:	cmp	r0, #0
    7eb8:	bne.n	7e8a <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7eba:	b.n	7e3c <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7ebc:	add	r2, sp, #8
    7ebe:	mov	r1, r4
    7ec0:	mov	r0, r6
    7ec2:	bl	7d2a <FatFile::mkdir(FatFile*, FatLfn_t*)>
    7ec6:	b.n	7e3e <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007ec8 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7ec8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7ecc:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7ece:	sub	sp, #108	; 0x6c
    7ed0:	mov.w	r9, #0
    7ed4:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    7ed6:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7eda:	mov	r7, r1
    7edc:	mov	r8, r2
    7ede:	str.w	r9, [sp, #32]
    7ee2:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    7ee6:	bne.n	7ef0 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7ee8:	movs	r0, #0
}
    7eea:	add	sp, #108	; 0x6c
    7eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7ef0:	ldr	r2, [r0, #8]
    7ef2:	ldr	r3, [r1, #8]
    7ef4:	cmp	r2, r3
    7ef6:	bne.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7ef8:	mov	r6, r4
  sync();
    7efa:	bl	7b78 <FatFile::sync()>
  oldFile = *this;
    7efe:	add	r5, sp, #68	; 0x44
    7f00:	ldmia	r6!, {r0, r1, r2, r3}
    7f02:	stmia	r5!, {r0, r1, r2, r3}
    7f04:	ldmia	r6!, {r0, r1, r2, r3}
    7f06:	stmia	r5!, {r0, r1, r2, r3}
    7f08:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7f0a:	mov	r1, r9
    7f0c:	mov	r0, r4
  oldFile = *this;
    7f0e:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7f10:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7f14:	cmp	r0, #0
    7f16:	beq.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7f18:	mov	r2, sp
    7f1a:	mov	r3, r0
    7f1c:	add.w	ip, r0, #32
    7f20:	mov	r5, r2
    7f22:	ldr	r0, [r3, #0]
    7f24:	adds	r3, #8
    7f26:	ldr.w	r1, [r3, #-4]
    7f2a:	mov	r6, r2
    7f2c:	cmp	r3, ip
    7f2e:	stmia	r6!, {r0, r1}
    7f30:	mov	r2, r6
    7f32:	bne.n	7f22 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    7f34:	ldrb	r3, [r4, #0]
    7f36:	add	r6, sp, #32
    7f38:	ands.w	r3, r3, #8
    7f3c:	beq.n	7f54 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    7f3e:	movw	r3, #2561	; 0xa01
    7f42:	mov	r2, r8
    7f44:	mov	r1, r7
    7f46:	mov	r0, r6
    7f48:	bl	7c08 <FatFile::open(FatFile*, char const*, int)>
    7f4c:	cmp	r0, #0
    7f4e:	beq.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    7f50:	movs	r7, #0
    7f52:	b.n	7f64 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    7f54:	mov	r2, r8
    7f56:	mov	r1, r7
    7f58:	mov	r0, r6
    7f5a:	bl	7e24 <FatFile::mkdir(FatFile*, char const*, bool)>
    7f5e:	cmp	r0, #0
    7f60:	beq.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    7f62:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    7f64:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7f66:	movs	r1, #1
    7f68:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    7f6a:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    7f6c:	ldrh.w	r3, [sp, #36]	; 0x24
    7f70:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    7f72:	ldrb.w	r3, [sp, #35]	; 0x23
    7f76:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    7f78:	ldr	r3, [sp, #44]	; 0x2c
    7f7a:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    7f7c:	movs	r3, #0
    7f7e:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    7f82:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7f86:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7f8a:	cmp	r0, #0
    7f8c:	beq.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7f8e:	add.w	r3, sp, #13
    7f92:	add.w	r2, r0, #13
    7f96:	add.w	r1, sp, #29
    7f9a:	ldr.w	ip, [r3], #4
    7f9e:	cmp	r3, r1
    7fa0:	str.w	ip, [r2], #4
    7fa4:	bne.n	7f9a <FatFile::rename(FatFile*, char const*)+0xd2>
    7fa6:	ldrh	r1, [r3, #0]
    7fa8:	strh	r1, [r2, #0]
    7faa:	ldrb	r3, [r3, #2]
    7fac:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7fae:	ldrb.w	r3, [sp, #11]
    7fb2:	strb	r3, [r0, #11]
  if (dirCluster) {
    7fb4:	cmp	r7, #0
    7fb6:	beq.n	8034 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7fb8:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7fba:	subs	r3, r7, #2
    7fbc:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7fbe:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7fc0:	ldr.w	r1, [r0, #-20]
    7fc4:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    7fc6:	movs	r2, #0
    7fc8:	add	r1, r3
    7fca:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7fce:	cmp	r0, #0
    7fd0:	beq.n	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    7fd2:	add.w	r2, r0, #32
    7fd6:	mov	lr, r5
    7fd8:	add.w	r3, r0, #64	; 0x40
    7fdc:	ldr	r0, [r2, #0]
    7fde:	adds	r2, #8
    7fe0:	ldr.w	r1, [r2, #-4]
    7fe4:	mov	ip, lr
    7fe6:	cmp	r2, r3
    7fe8:	stmia.w	ip!, {r0, r1}
    7fec:	mov	lr, ip
    7fee:	bne.n	7fdc <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7ff0:	mov	r1, r7
    7ff2:	ldr	r0, [r4, #8]
    7ff4:	bl	8476 <FatPartition::freeChain(unsigned long)>
    7ff8:	cmp	r0, #0
    7ffa:	beq.w	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7ffe:	ldr	r0, [r4, #8]
    8000:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8002:	ldr	r1, [r4, #32]
    8004:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    8006:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    8008:	subs	r1, #2
    800a:	lsls	r1, r3
    800c:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    8010:	add	r1, r3
    8012:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    8016:	cmp	r0, #0
    8018:	beq.w	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    801c:	add.w	r3, r0, #32
    8020:	mov	r2, r5
    8022:	adds	r3, #8
    8024:	ldmia	r2!, {r0, r1}
    8026:	cmp	r2, r6
    8028:	str.w	r0, [r3, #-8]
    802c:	str.w	r1, [r3, #-4]
    8030:	mov	r5, r2
    8032:	bne.n	8020 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    8034:	movs	r3, #0
  if (!oldFile.remove()) {
    8036:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    8038:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    803a:	movs	r3, #2
    803c:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    8040:	movs	r3, #8
    8042:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    8046:	bl	8d20 <FatFile::remove()>
    804a:	cmp	r0, #0
    804c:	beq.w	7ee8 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    8050:	ldr	r0, [r4, #8]
    8052:	bl	7620 <FatPartition::cacheSync()>
    8056:	b.n	7eea <FatFile::rename(FatFile*, char const*)+0x22>

00008058 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    8058:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    805c:	ldrb	r3, [r0, #2]
    805e:	mov	r4, r0
    8060:	mov	r9, r1
    8062:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    8064:	lsls	r5, r3, #30
    8066:	bpl.n	809e <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    8068:	lsls	r1, r3, #28
    806a:	bmi.n	8094 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    806c:	ldr	r3, [r4, #20]
    806e:	adds	r3, r3, r7
    8070:	bcs.n	809e <FatFile::write(void const*, unsigned int)+0x46>
    8072:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8074:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    8078:	ldr	r3, [r4, #20]
  while (nToWrite) {
    807a:	cmp.w	r8, #0
    807e:	bne.n	80aa <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    8080:	ldr	r2, [r4, #28]
    8082:	cmp	r2, r3
    8084:	bcs.w	81e6 <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    8088:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    808a:	ldrb	r3, [r4, #2]
    808c:	orn	r3, r3, #127	; 0x7f
    8090:	strb	r3, [r4, #2]
    8092:	b.n	81f0 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    8094:	ldr	r1, [r0, #28]
    8096:	bl	792e <FatFile::seekSet(unsigned long)>
    809a:	cmp	r0, #0
    809c:	bne.n	806c <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    809e:	ldrb	r3, [r4, #1]
  return 0;
    80a0:	movs	r7, #0
  m_error |= WRITE_ERROR;
    80a2:	orr.w	r3, r3, #1
    80a6:	strb	r3, [r4, #1]
  return 0;
    80a8:	b.n	81f0 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    80aa:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    80ac:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    80b0:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    80b2:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    80b4:	ands.w	r6, r6, r3, lsr #9
    80b8:	bne.n	80d0 <FatFile::write(void const*, unsigned int)+0x78>
    80ba:	cbnz	r5, 80d0 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    80bc:	cmp	r1, #0
    80be:	beq.n	8138 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    80c0:	ldrb	r2, [r4, #2]
    80c2:	lsls	r2, r2, #25
    80c4:	bpl.n	8120 <FatFile::write(void const*, unsigned int)+0xc8>
    80c6:	ldr	r2, [r4, #28]
    80c8:	cmp	r2, r3
    80ca:	bls.n	8120 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    80cc:	adds	r1, #1
    80ce:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    80d0:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    80d4:	ldr	r1, [r4, #16]
    80d6:	ldrb.w	r3, [ip, #6]
    80da:	subs	r1, #2
    80dc:	lsls	r1, r3
    80de:	ldr.w	r3, [ip, #20]
    80e2:	add	r1, r3
                      + sectorOfCluster;
    80e4:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    80e6:	cmp	r5, #0
    80e8:	bne.n	8150 <FatFile::write(void const*, unsigned int)+0xf8>
    80ea:	cmp.w	r8, #512	; 0x200
    80ee:	bcc.n	8150 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    80f0:	cmp.w	r8, #1024	; 0x400
    80f4:	ldr.w	r2, [ip, #52]	; 0x34
    80f8:	ldr.w	r0, [ip, #44]	; 0x2c
    80fc:	bcs.n	81b0 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    80fe:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    8100:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    8102:	ittt	eq
    8104:	moveq.w	r3, #4294967295
    m_status = 0;
    8108:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    810c:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    8110:	ldr	r3, [r0, #0]
    8112:	ldr	r3, [r3, #36]	; 0x24
    8114:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    8116:	cmp	r0, #0
    8118:	beq.n	809e <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    811a:	mov.w	r6, #512	; 0x200
    811e:	b.n	819a <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    8120:	mov	r2, sl
    8122:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    8126:	cmp	r0, #0
    8128:	blt.n	809e <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    812a:	bne.n	80d0 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    812c:	mov	r0, r4
    812e:	bl	7646 <FatFile::addCluster()>
    8132:	cmp	r0, #0
    8134:	bne.n	80d0 <FatFile::write(void const*, unsigned int)+0x78>
    8136:	b.n	809e <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    8138:	ldr	r3, [r4, #32]
    813a:	cbnz	r3, 814c <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    813c:	mov	r0, r4
    813e:	bl	7646 <FatFile::addCluster()>
    8142:	cmp	r0, #0
    8144:	beq.n	809e <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    8146:	ldr	r3, [r4, #16]
    8148:	str	r3, [r4, #32]
    814a:	b.n	80d0 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    814c:	str	r3, [r4, #16]
    814e:	b.n	80d0 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    8150:	rsb	r6, r5, #512	; 0x200
    8154:	cmp	r6, r8
    8156:	it	cs
    8158:	movcs	r6, r8
      if (sectorOffset == 0 &&
    815a:	cbnz	r5, 81a8 <FatFile::write(void const*, unsigned int)+0x150>
    815c:	ldr	r2, [r4, #20]
    815e:	ldr	r3, [r4, #28]
    8160:	cmp	r2, r3
    8162:	bcs.n	81ac <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    8164:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    8166:	tst.w	r3, #32
    816a:	ite	eq
    816c:	moveq	r2, #1
    816e:	movne	r2, #5
    return m_cache.prepare(sector, options);
    8170:	add.w	r0, ip, #40	; 0x28
    8174:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    8178:	cmp	r0, #0
    817a:	beq.n	809e <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    817c:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    817e:	add	r5, r6
      memcpy(dst, src, n);
    8180:	mov	r2, r6
    8182:	mov	r1, r9
    8184:	bl	a8dc <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    8188:	cmp.w	r5, #512	; 0x200
    818c:	ldr	r0, [r4, #8]
    818e:	bne.n	819a <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    8190:	adds	r0, #40	; 0x28
    8192:	bl	5cdc <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    8196:	cmp	r0, #0
    8198:	beq.n	809e <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    819a:	ldr	r3, [r4, #20]
    src += n;
    819c:	add	r9, r6
    nToWrite -= n;
    819e:	sub.w	r8, r8, r6
    m_curPosition += n;
    81a2:	add	r3, r6
    81a4:	str	r3, [r4, #20]
    nToWrite -= n;
    81a6:	b.n	8078 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    81a8:	movs	r2, #1
    81aa:	b.n	8170 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    81ac:	movs	r2, #5
    81ae:	b.n	8170 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    81b0:	ldrb.w	r3, [ip, #4]
    81b4:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    81b6:	mov.w	r6, r8, lsr #9
    81ba:	cmp	r3, r6
    81bc:	it	cs
    81be:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    81c0:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    81c2:	mov.w	r6, r3, lsl #9
    81c6:	bhi.n	81dc <FatFile::write(void const*, unsigned int)+0x184>
    81c8:	add.w	lr, r1, r3
    81cc:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    81ce:	ittt	hi
    81d0:	movhi.w	r2, #4294967295
    m_status = 0;
    81d4:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    81d8:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    81dc:	ldr	r2, [r0, #0]
    81de:	ldr	r5, [r2, #40]	; 0x28
    81e0:	mov	r2, r9
    81e2:	blx	r5
    81e4:	b.n	8196 <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    81e6:	ldr	r3, [pc, #16]	; (81f8 <FatFile::write(void const*, unsigned int)+0x1a0>)
    81e8:	ldr	r3, [r3, #0]
    81ea:	cmp	r3, #0
    81ec:	bne.w	808a <FatFile::write(void const*, unsigned int)+0x32>
}
    81f0:	mov	r0, r7
    81f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81f6:	nop
    81f8:	.word	0x20021258

000081fc <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    81fc:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    81fe:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    8202:	push	{r4, r5, lr}
    8204:	mov	r4, r3
    8206:	it	cs
    8208:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    820c:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    8210:	cmp	r1, r5
    8212:	bcc.n	821a <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    8214:	subs	r3, r3, r4
    8216:	str	r3, [r2, #0]
}
    8218:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    821a:	ldrh.w	r0, [r1], #2
    821e:	cmp	r0, #0
    8220:	bne.n	8210 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    8222:	ldr	r0, [r2, #4]
    8224:	adds	r0, #1
    8226:	str	r0, [r2, #4]
    8228:	b.n	8210 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

0000822a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    822a:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    822c:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    822e:	push	{r4, r5, lr}
    8230:	mov	r4, r3
    8232:	it	cs
    8234:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    8236:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    823a:	cmp	r1, r5
    823c:	bcc.n	8244 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    823e:	subs	r3, r3, r4
    8240:	str	r3, [r2, #0]
}
    8242:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    8244:	ldr.w	r0, [r1], #4
    8248:	cmp	r0, #0
    824a:	bne.n	823a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    824c:	ldr	r0, [r2, #4]
    824e:	adds	r0, #1
    8250:	str	r0, [r2, #4]
    8252:	b.n	823a <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00008254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    8254:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    8256:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    825a:	cmp	r3, #2
    825c:	it	eq
    825e:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    8262:	b.w	5d2a <FsCache::prepare(unsigned long, unsigned char)>

00008266 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    8266:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    8268:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    826c:	mov	r6, r0
    826e:	mov	r4, r1
    8270:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    8272:	bhi.n	827c <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    8274:	mov.w	r0, #4294967295
}
    8278:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    827c:	ldr	r3, [r0, #28]
    827e:	cmp	r3, r1
    8280:	bcc.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    8282:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    8284:	cmp	r3, #32
    8286:	bne.n	82ae <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8288:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    828a:	movs	r2, #0
    828c:	add.w	r1, r1, r4, lsr #7
    8290:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8294:	cmp	r0, #0
    8296:	beq.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    8298:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    829a:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    829e:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    82a0:	ldr	r2, [r6, #28]
    82a2:	cmp	r2, r3
  return 1;
    82a4:	itet	cs
    82a6:	movcs	r0, #1
    return 0;
    82a8:	movcc	r0, #0
  *value = next;
    82aa:	strcs	r3, [r7, #0]
  return 1;
    82ac:	b.n	8278 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    82ae:	cmp	r3, #16
    82b0:	bne.n	82ce <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    82b2:	ubfx	r1, r1, #8, #8
    82b6:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    82b8:	movs	r2, #0
    82ba:	add	r1, r3
    82bc:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    82c0:	cmp	r0, #0
    82c2:	beq.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    82c4:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    82c6:	and.w	r4, r4, #510	; 0x1fe
    82ca:	ldrh	r3, [r0, r4]
    82cc:	b.n	82a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    82ce:	cmp	r3, #12
    82d0:	bne.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    82d2:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    82d6:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    82d8:	movs	r2, #0
    index += index >> 1;
    82da:	uxtah	r8, r8, r1
    82de:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    82e2:	ubfx	r8, r8, #9, #7
    82e6:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    82e8:	mov	r1, r8
    82ea:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    82ee:	cmp	r0, #0
    82f0:	beq.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    82f2:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    82f6:	ldrb	r5, [r0, r3]
    index++;
    82f8:	adds	r3, #1
    if (index == m_bytesPerSector) {
    82fa:	cmp.w	r3, #512	; 0x200
    82fe:	bne.n	8312 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    8300:	movs	r2, #0
    8302:	add.w	r1, r8, #1
    8306:	mov	r0, r6
    8308:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    830c:	cmp	r0, #0
    830e:	beq.n	8274 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    8310:	movs	r3, #0
    tmp |= pc[index] << 8;
    8312:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    8314:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    8316:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    831a:	ite	mi
    831c:	lsrmi	r3, r3, #4
    831e:	ubfxpl	r3, r3, #0, #12
    8322:	b.n	82a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00008324 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    8324:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    8326:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    832a:	mov	r8, r0
    832c:	mov	r4, r1
    832e:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    8330:	bhi.n	8338 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    8332:	movs	r0, #0
}
    8334:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    8338:	ldr	r3, [r0, #28]
    833a:	cmp	r3, r1
    833c:	bcc.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    833e:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    8340:	cmp	r3, #32
    8342:	bne.n	8360 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    8344:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    8346:	movs	r2, #1
    8348:	add.w	r1, r1, r4, lsr #7
    834c:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8350:	cmp	r0, #0
    8352:	beq.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    8354:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    8356:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    835a:	str	r5, [r0, r4]
    return true;
    835c:	movs	r0, #1
    835e:	b.n	8334 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    8360:	cmp	r3, #16
    8362:	bne.n	8380 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    8364:	ubfx	r1, r1, #8, #8
    8368:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    836a:	movs	r2, #1
    836c:	add	r1, r3
    836e:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    8372:	cmp	r0, #0
    8374:	beq.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    8376:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    8378:	and.w	r4, r4, #510	; 0x1fe
    837c:	strh	r5, [r0, r4]
    return true;
    837e:	b.n	835c <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    8380:	cmp	r3, #12
    8382:	bne.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    8384:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8388:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    838a:	movs	r2, #1
    index += index >> 1;
    838c:	uxtah	r7, r7, r1
    8390:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    8392:	ubfx	r7, r7, #9, #7
    8396:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    8398:	mov	r1, r7
    839a:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    839e:	cmp	r0, #0
    83a0:	beq.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    83a2:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    83a6:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    83aa:	itt	ne
    83ac:	lslne	r2, r5, #4
    83ae:	ldrbne	r1, [r0, r3]
    83b0:	add.w	r6, r0, r3
    index++;
    83b4:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    83b8:	ittet	ne
    83ba:	andne.w	r2, r2, #240	; 0xf0
    83be:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    83c2:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    83c4:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    83c6:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    83ca:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    83cc:	bne.n	83de <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    83ce:	movs	r2, #1
    83d0:	mov	r0, r8
    83d2:	adds	r1, r7, r2
    83d4:	bl	8254 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    83d8:	cmp	r0, #0
    83da:	beq.n	8332 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    83dc:	movs	r3, #0
    tmp = value >> 4;
    83de:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    83e2:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    83e4:	cbnz	r4, 83f0 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    83e6:	ldrb	r3, [r0, r3]
    83e8:	bic.w	r3, r3, #15
    83ec:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    83f0:	strb	r5, [r2, #0]
    83f2:	b.n	835c <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

000083f4 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    83f4:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    83f8:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    83fa:	mov	r5, r0
    83fc:	mov	r6, r1
    83fe:	mov	r8, r2
  if (m_allocSearchStart < current) {
    8400:	cmp	r4, r1
    8402:	bcc.n	8408 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    8404:	movs	r7, #1
    8406:	b.n	840c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    8408:	mov	r4, r1
    setStart = false;
    840a:	movs	r7, #0
    find++;
    840c:	adds	r4, #1
    if (find > m_lastCluster) {
    840e:	ldr	r3, [r5, #28]
    8410:	cmp	r3, r4
    8412:	bcs.n	841a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    8414:	cbnz	r7, 8448 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    8416:	ldr	r4, [r5, #12]
    8418:	b.n	8404 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    841a:	cmp	r6, r4
    841c:	beq.n	8448 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    841e:	add	r2, sp, #4
    8420:	mov	r1, r4
    8422:	mov	r0, r5
    8424:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8428:	cmp	r0, #0
    842a:	blt.n	8448 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    842c:	beq.n	840c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    842e:	ldr	r3, [sp, #4]
    8430:	cmp	r3, #0
    8432:	bne.n	840c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    8434:	cbz	r7, 8438 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    8436:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    8438:	mvn.w	r2, #4026531840	; 0xf0000000
    843c:	mov	r1, r4
    843e:	mov	r0, r5
    8440:	bl	8324 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    8444:	mov	r7, r0
    8446:	cbnz	r0, 8452 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    8448:	movs	r7, #0
}
    844a:	mov	r0, r7
    844c:	add	sp, #8
    844e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    8452:	cbnz	r6, 8460 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    8454:	ldr	r3, [r5, #36]	; 0x24
    8456:	cmp	r3, #0
    8458:	bge.n	8470 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    845a:	str.w	r4, [r8]
  return true;
    845e:	b.n	844a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    8460:	mov	r2, r4
    8462:	mov	r1, r6
    8464:	mov	r0, r5
    8466:	bl	8324 <FatPartition::fatPut(unsigned long, unsigned long)>
    846a:	cmp	r0, #0
    846c:	bne.n	8454 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    846e:	b.n	8448 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    8470:	subs	r3, #1
    8472:	str	r3, [r5, #36]	; 0x24
    8474:	b.n	845a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00008476 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    8476:	push	{r0, r1, r4, r5, r6, lr}
    8478:	mov	r5, r0
    847a:	mov	r4, r1
    fg = fatGet(cluster, &next);
    847c:	add	r2, sp, #4
    847e:	mov	r1, r4
    8480:	mov	r0, r5
    8482:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    8486:	subs	r6, r0, #0
    8488:	blt.n	84b6 <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    848a:	movs	r2, #0
    848c:	mov	r1, r4
    848e:	mov	r0, r5
    8490:	bl	8324 <FatPartition::fatPut(unsigned long, unsigned long)>
    8494:	cbz	r0, 84b6 <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    8496:	ldr	r3, [r5, #36]	; 0x24
    8498:	cmp	r3, #0
      m_freeClusterCount += change;
    849a:	itt	ge
    849c:	addge	r3, #1
    849e:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    84a0:	ldr	r3, [r5, #12]
    84a2:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    84a4:	itt	hi
    84a6:	addhi.w	r4, r4, #4294967295
    84aa:	strhi	r4, [r5, #12]
    cluster = next;
    84ac:	ldr	r4, [sp, #4]
  } while (fg);
    84ae:	cmp	r6, #0
    84b0:	bne.n	847c <FatPartition::freeChain(unsigned long)+0x6>
}
    84b2:	add	sp, #8
    84b4:	pop	{r4, r5, r6, pc}
  return false;
    84b6:	movs	r0, #0
    84b8:	b.n	84b2 <FatPartition::freeChain(unsigned long)+0x3c>
	...

000084bc <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    84bc:	push	{r4, r5, r6, r7, lr}
    84be:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    84c0:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    84c2:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    84c4:	cmp	r0, #0
    84c6:	bge.n	853a <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    84c8:	ldrb	r3, [r4, #7]
    84ca:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    84cc:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    84ce:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    84d0:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    84d4:	beq.n	853e <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    84d6:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    84da:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    84dc:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    84de:	strd	r6, r5, [sp, #16]
    84e2:	bmi.n	8542 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    84e4:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    84e6:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    84e8:	ldr	r0, [r4, #0]
    84ea:	add	r6, sp, #16
    84ec:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    84f0:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    84f2:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    84f6:	ldr	r1, [r4, #24]
    84f8:	ldr	r5, [r0, #0]
    84fa:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    84fe:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    8502:	bne.n	8554 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    8504:	str	r6, [sp, #4]
    8506:	ldr	r6, [pc, #84]	; (855c <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    8508:	str	r6, [sp, #0]
    850a:	ldr	r5, [r5, #24]
    850c:	blx	r5
    850e:	cbz	r0, 8524 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    8510:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    8512:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    8514:	b.n	853a <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    8516:	add	r2, sp, #16
    8518:	mov	r1, r7
    851a:	mov	r0, r4
    851c:	bl	8266 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    8520:	cmp	r0, #0
    8522:	bge.n	852a <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    8524:	mov.w	r0, #4294967295
    8528:	b.n	853a <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    852a:	beq.n	8532 <FatPartition::freeClusterCount()+0x76>
    852c:	ldr	r3, [sp, #16]
    852e:	cbnz	r3, 8532 <FatPartition::freeClusterCount()+0x76>
        free++;
    8530:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    8532:	adds	r7, #1
    8534:	cmp	r7, r6
    8536:	bcc.n	8516 <FatPartition::freeClusterCount()+0x5a>
    return free;
    8538:	mov	r0, r5
}
    853a:	add	sp, #28
    853c:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    853e:	movs	r7, #2
    8540:	b.n	8534 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    8542:	add.w	r0, r4, #568	; 0x238
    8546:	str	r3, [sp, #12]
    8548:	bl	5cdc <FsCache::sync()>
    854c:	ldr	r3, [sp, #12]
    854e:	cmp	r0, #0
    8550:	bne.n	84e4 <FatPartition::freeClusterCount()+0x28>
    8552:	b.n	8524 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    8554:	str	r6, [sp, #4]
    8556:	ldr	r6, [pc, #8]	; (8560 <FatPartition::freeClusterCount()+0xa4>)
    8558:	b.n	8508 <FatPartition::freeClusterCount()+0x4c>
    855a:	nop
    855c:	.word	0x0000822b
    8560:	.word	0x000081fd

00008564 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8564:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    8566:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    8568:	mov	r4, r0
  m_blockDev = dev;
    856a:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    856c:	mov	r5, r2
  m_fatType = 0;
    856e:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    8570:	movs	r0, #1
  m_cache.init(dev);
    8572:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    8576:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    8578:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    857a:	mov.w	r0, #4294967295
    m_status = 0;
    857e:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    8582:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    8584:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    8588:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    858c:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    8590:	cbz	r2, 85c6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    8592:	cmp	r2, #4
    8594:	bls.n	859a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    8596:	movs	r0, #0
}
    8598:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    859a:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    859e:	mov	r2, r3
    85a0:	mov	r1, r3
    85a2:	mov	r0, r6
    85a4:	subs	r5, #1
    85a6:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
    85aa:	add.w	r3, r0, #446	; 0x1be
    85ae:	lsls	r2, r5, #4
    85b0:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    85b4:	cmp	r0, #0
    85b6:	beq.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    85b8:	ldrb	r1, [r5, #4]
    85ba:	cmp	r1, #0
    85bc:	beq.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    85be:	ldrb	r3, [r3, r2]
    85c0:	lsls	r3, r3, #25
    85c2:	bne.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    85c4:	ldr	r5, [r5, #8]
    85c6:	movs	r2, #0
    85c8:	mov	r1, r5
    85ca:	mov	r0, r6
    85cc:	bl	5d2a <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    85d0:	cmp	r0, #0
    85d2:	beq.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    85d4:	ldrh.w	r3, [r0, #11]
    85d8:	cmp.w	r3, #512	; 0x200
    85dc:	bne.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    85de:	ldrb	r3, [r0, #16]
    85e0:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    85e2:	subs	r3, #1
    85e4:	cmp	r3, #1
    85e6:	bhi.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    85e8:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    85ea:	movs	r6, #9
    85ec:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    85ee:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    85f0:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    85f2:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    85f4:	movs	r3, #1
    85f6:	cmp	r1, r3
    85f8:	bne.n	8662 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    85fa:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    85fc:	ldrh	r3, [r0, #22]
    85fe:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    8600:	cbnz	r3, 8606 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    8602:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    8604:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8606:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    8608:	ldrh.w	r1, [r0, #17]
    860c:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    860e:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    8610:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8612:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    8614:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    8616:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    8618:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    861c:	mla	r3, r6, r7, r3
    8620:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    8622:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    8626:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    862a:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    862c:	cbnz	r1, 8630 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    862e:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    8630:	subs	r5, r5, r3
    8632:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    8634:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    8636:	adds	r3, r5, #1
    8638:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    863a:	mov.w	r3, #4294967295
    863e:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    8640:	movw	r3, #4084	; 0xff4
    8644:	cmp	r5, r3
    8646:	bls.n	8674 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    8648:	movw	r3, #65524	; 0xfff4
    864c:	cmp	r5, r3
    864e:	bls.n	8678 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    8650:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    8652:	str	r3, [r4, #32]
    8654:	movs	r3, #32
  return true;
    8656:	movs	r0, #1
    m_fatType = 12;
    8658:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    865a:	str	r6, [r4, #48]	; 0x30
    865c:	str.w	r6, [r4, #576]	; 0x240
  return true;
    8660:	b.n	8598 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    8662:	subs	r6, #1
    8664:	bne.n	866a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    8666:	strb	r2, [r4, #6]
    8668:	b.n	8596 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    866a:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    866c:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    866e:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    8670:	uxtb	r3, r3
    8672:	b.n	85f6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    8674:	movs	r3, #12
    8676:	b.n	8656 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    8678:	movs	r3, #16
    867a:	b.n	8656 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

0000867c <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    867c:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    867e:	add.w	r4, r0, #1096	; 0x448
    8682:	sub	sp, #40	; 0x28
  FatFile() {}
    8684:	movs	r3, #0
    8686:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    8688:	add	r0, sp, #4
    868a:	mov	r1, r4
    868c:	str	r3, [sp, #4]
    868e:	bl	7c08 <FatFile::open(FatFile*, char const*, int)>
    8692:	mov	r6, r0
    8694:	cbz	r0, 86b2 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    8696:	ldrb.w	r3, [sp, #4]
    869a:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    869e:	itett	ne
    86a0:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    86a2:	moveq	r6, r3
  m_vwd = dir;
    86a4:	ldmiane	r5!, {r0, r1, r2, r3}
    86a6:	stmiane	r4!, {r0, r1, r2, r3}
    86a8:	itttt	ne
    86aa:	ldmiane	r5!, {r0, r1, r2, r3}
    86ac:	stmiane	r4!, {r0, r1, r2, r3}
    86ae:	ldrne	r3, [r5, #0]
    86b0:	strne	r3, [r4, #0]
}
    86b2:	mov	r0, r6
    86b4:	add	sp, #40	; 0x28
    86b6:	pop	{r4, r5, r6, pc}

000086b8 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    86b8:	subs	r1, r0, #1
    86ba:	add.w	r3, r0, #10
    uint8_t sum = 0;
    86be:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86c0:	lsls	r2, r0, #7
    86c2:	orr.w	r2, r2, r0, lsr #1
    86c6:	ldrb.w	r0, [r1, #1]!
    86ca:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    86ce:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    86d0:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    86d2:	bne.n	86c0 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    86d4:	bx	lr

000086d6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    86d6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    86da:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    86dc:	sub	sp, #52	; 0x34
    86de:	mov	r6, r2
    86e0:	mov	r7, r0
    86e2:	mov	r9, r1
    86e4:	mov	r8, r3
  FatFile dir = *this;
    86e6:	add	r4, sp, #12
    86e8:	ldmia	r5!, {r0, r1, r2, r3}
    86ea:	stmia	r4!, {r0, r1, r2, r3}
    86ec:	ldmia	r5!, {r0, r1, r2, r3}
    86ee:	stmia	r4!, {r0, r1, r2, r3}
    86f0:	ldr	r3, [r5, #0]
    86f2:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    86f4:	movs	r4, #1
    next = begin;
    86f6:	ldr	r3, [r6, #0]
    86f8:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    86fa:	movs	r3, #0
    86fc:	strh	r3, [r6, #12]
    86fe:	cmp	r4, r8
    8700:	bls.n	8706 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    8702:	movs	r0, #1
    8704:	b.n	8718 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8706:	sub.w	r1, r9, r4
    870a:	add	r0, sp, #12
    870c:	uxth	r1, r1
    870e:	bl	743c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8712:	mov	sl, r0
    8714:	cbnz	r0, 871e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    8716:	movs	r0, #0
}
    8718:	add	sp, #52	; 0x34
    871a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    871e:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    8720:	uxtb	r2, r5
    8722:	mov	r1, sl
    8724:	mov	r0, r7
    8726:	bl	7456 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    872a:	ldrh	r3, [r6, #12]
    872c:	mov	fp, r0
    872e:	cbnz	r3, 8740 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    8730:	ldrd	r2, r3, [r6, #4]
    8734:	cmp	r2, r3
    8736:	bne.n	8740 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    8738:	clz	r0, r0
    873c:	lsrs	r0, r0, #5
    873e:	b.n	8718 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    8740:	mov	r0, r6
    8742:	bl	5e20 <FsName::get16()>
    8746:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    8748:	mov	r0, fp
    874a:	bl	5d78 <toUpcase(unsigned short)>
    874e:	ldr	r3, [sp, #4]
    8750:	mov	fp, r0
    8752:	mov	r0, r3
    8754:	bl	5d78 <toUpcase(unsigned short)>
    8758:	cmp	fp, r0
    875a:	bne.n	8716 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    875c:	adds	r5, #1
    875e:	cmp	r5, #13
    8760:	bne.n	8720 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8762:	adds	r4, #1
    8764:	uxtb	r4, r4
    8766:	b.n	86fe <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

00008768 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8768:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    876c:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    876e:	sub	sp, #52	; 0x34
    8770:	mov	r4, r2
    8772:	mov	r9, r1
    8774:	mov	r7, r3
  FatFile dir = *this;
    8776:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8778:	mov.w	sl, #15
  FatFile dir = *this;
    877c:	ldmia	r5!, {r0, r1, r2, r3}
    877e:	stmia	r6!, {r0, r1, r2, r3}
    8780:	ldmia	r5!, {r0, r1, r2, r3}
    8782:	stmia	r6!, {r0, r1, r2, r3}
    8784:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    8786:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    878a:	movs	r5, #1
  FatFile dir = *this;
    878c:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    878e:	bl	86b8 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    8792:	movs	r6, #0
    next = begin;
    8794:	ldr	r3, [r4, #0]
    8796:	mov	r8, r0
    8798:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    879a:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    879c:	cmp	r5, r7
    879e:	bls.n	87a8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    87a0:	movs	r0, #1

 fail:
  return false;
}
    87a2:	add	sp, #52	; 0x34
    87a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    87a8:	sub.w	r1, r9, r5
    87ac:	add	r0, sp, #12
    87ae:	uxth	r1, r1
    87b0:	bl	743c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    87b4:	cmp	r0, #0
    87b6:	beq.n	87a2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    87b8:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    87ba:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    87bc:	mov.w	r1, #0
    87c0:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    87c4:	ldrb.w	r3, [r2, #40]	; 0x28
    87c8:	orr.w	r3, r3, #1
    87cc:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    87d0:	ite	eq
    87d2:	orreq.w	r3, r5, #64	; 0x40
    87d6:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    87d8:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    87dc:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    87de:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    87e0:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    87e4:	strh	r1, [r0, #26]
    return !ls && next == end;
    87e6:	ldrh	r0, [r4, #12]
    87e8:	cbnz	r0, 8816 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    87ea:	ldrd	r2, r3, [r4, #4]
    87ee:	cmp	r2, r3
    87f0:	bne.n	8816 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    87f2:	cbz	r6, 8822 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    87f4:	adds	r6, #1
    87f6:	movw	r0, #65535	; 0xffff
    87fa:	uxtb	r6, r6
  if (i < 5) {
    87fc:	cmp	r1, #4
    87fe:	uxtb	r3, r1
    8800:	bhi.n	8826 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    8802:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    8806:	adds	r1, #1
    8808:	add.w	fp, fp, #2
    880c:	cmp	r1, #13
    880e:	bne.n	87e6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8810:	adds	r5, #1
    8812:	uxtb	r5, r5
    8814:	b.n	879c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    8816:	mov	r0, r4
    8818:	str	r1, [sp, #4]
    881a:	bl	5e20 <FsName::get16()>
    881e:	ldr	r1, [sp, #4]
    8820:	b.n	87fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    8822:	movs	r6, #1
    8824:	b.n	87fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    8826:	cmp	r3, #10
    8828:	ite	ls
    882a:	strhls.w	r0, [fp, #3]
    882e:	strhhi.w	r0, [fp, #5]
}
    8832:	b.n	8806 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

00008834 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    8834:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    8836:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    883a:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    883e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    8842:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    8844:	mov	r5, r0
    fname->sfn[k] = ' ';
    8846:	str.w	r1, [r0, #22]
    884a:	str	r1, [r2, #4]
    884c:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    8850:	ldrb	r0, [r3, #0]
    8852:	subs	r0, #46	; 0x2e
    8854:	it	ne
    8856:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    8858:	mov	r7, r3
    885a:	ldrb.w	r2, [r3], #1
    885e:	cmp	r2, #46	; 0x2e
    8860:	beq.n	8858 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    8862:	subs	r3, r6, #1
    8864:	cmp	r3, r7
    8866:	mov	lr, r3
    8868:	bls.n	8872 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    886a:	ldrb.w	r2, [r3], #-1
    886e:	cmp	r2, #46	; 0x2e
    8870:	bne.n	8864 <FatFile::makeSFN(FatLfn_t*)+0x30>
    8872:	movs	r2, #0
    8874:	mov.w	ip, #7
    8878:	mov.w	r9, #8
    887c:	mov	r1, r2
    887e:	mov	r8, r2
    8880:	b.n	8898 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    8882:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    8884:	cmp	r3, #46	; 0x2e
    8886:	bne.n	88b4 <FatFile::makeSFN(FatLfn_t*)+0x80>
    8888:	cmp	lr, r7
    888a:	bne.n	88d0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    888c:	mov.w	ip, #10
      i = 8;    // Place for extension.
    8890:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    8892:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    8896:	adds	r7, #1
    8898:	cmp	r7, r6
    889a:	bcc.n	8882 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    889c:	ldrb	r3, [r5, #22]
    889e:	cmp	r3, #32
    88a0:	beq.n	8954 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    88a2:	cmp	r0, #0
    88a4:	beq.n	8940 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    88a6:	tst.w	r8, r2
    88aa:	it	ne
    88ac:	movne	r2, #2
    88ae:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    88b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    88b4:	cmp	r3, #34	; 0x22
    88b6:	beq.n	88d0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    88b8:	cmp	r3, #124	; 0x7c
    88ba:	beq.n	88d0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    88bc:	sub.w	r4, r3, #91	; 0x5b
    88c0:	cmp	r4, #2
    88c2:	bls.n	88d0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    88c4:	sub.w	r4, r3, #42	; 0x2a
    88c8:	cmp	r4, #5
    88ca:	bhi.n	88da <FatFile::makeSFN(FatLfn_t*)+0xa6>
    88cc:	cmp	r3, #45	; 0x2d
    88ce:	beq.n	88f6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    88d0:	cmp	r1, ip
    88d2:	bhi.n	88fa <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    88d4:	movs	r0, #0
        c = '_';
    88d6:	movs	r3, #95	; 0x5f
    88d8:	b.n	891c <FatFile::makeSFN(FatLfn_t*)+0xe8>
    88da:	sub.w	r4, r3, #58	; 0x3a
    88de:	cmp	r4, #5
    88e0:	bls.n	88ea <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    88e2:	sub.w	r4, r3, #33	; 0x21
    88e6:	cmp	r4, #93	; 0x5d
    88e8:	bls.n	88f6 <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    88ea:	and.w	r3, r3, #192	; 0xc0
    88ee:	cmp	r3, #128	; 0x80
    88f0:	bne.n	88d0 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    88f2:	movs	r0, #0
    88f4:	b.n	8896 <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    88f6:	cmp	r1, ip
    88f8:	bls.n	890a <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    88fa:	cmp.w	ip, #10
    88fe:	beq.n	893c <FatFile::makeSFN(FatLfn_t*)+0x108>
    8900:	cmp	lr, r7
    8902:	bcc.n	893c <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    8904:	add.w	r7, lr, #4294967295
        continue;
    8908:	b.n	88f2 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    890a:	sub.w	r4, r3, #97	; 0x61
    890e:	cmp	r4, #25
    8910:	bhi.n	892e <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    8912:	subs	r3, #32
        lc |= bit;
    8914:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    8918:	uxtb	r3, r3
        lc |= bit;
    891a:	uxtb	r2, r2
      fname->sfn[i++] = c;
    891c:	adds	r4, r1, #1
    891e:	add	r1, r5
    8920:	uxtb	r4, r4
    8922:	strb	r3, [r1, #22]
      if (i < 7) {
    8924:	cmp	r4, #6
    8926:	bhi.n	892a <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    8928:	strb	r4, [r5, #20]
    892a:	mov	r1, r4
    892c:	b.n	8896 <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    892e:	sub.w	r4, r3, #65	; 0x41
    8932:	cmp	r4, #25
        uc |= bit;
    8934:	it	ls
    8936:	orrls.w	r8, r9, r8
    893a:	b.n	891c <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    893c:	movs	r0, #0
    893e:	b.n	889c <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    8940:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8942:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    8944:	movs	r1, #126	; 0x7e
    8946:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    8948:	strb	r2, [r5, #21]
  return true;
    894a:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    894c:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    894e:	movs	r1, #49	; 0x31
    8950:	strb	r1, [r3, #23]
    8952:	b.n	88b0 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    8954:	movs	r0, #0
    8956:	b.n	88b0 <FatFile::makeSFN(FatLfn_t*)+0x7c>

00008958 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    8958:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    895c:	mov	r7, r0
    895e:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    8960:	ldrb	r6, [r1, #20]
    8962:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    8964:	mov.w	sl, #0
    8968:	ldr.w	r8, [pc, #128]	; 89ec <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    896c:	add.w	r9, r1, #22
    8970:	ldr.w	r3, [r8]
    8974:	cmp	r6, #3
    hex += millis();
    8976:	add	r3, sl
    8978:	it	cs
    897a:	movcs	r6, #3
    897c:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8980:	adds	r3, r6, #4
    8982:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    8984:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8988:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    898a:	subs	r3, #1
      hex >>= 4;
    898c:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8990:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8992:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8994:	ite	ls
    8996:	addls	r2, #48	; 0x30
    8998:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    899a:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    899c:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    899e:	bne.n	8984 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    89a0:	adds	r3, r5, r6
    89a2:	movs	r2, #126	; 0x7e
    seekSet(0);
    89a4:	movs	r1, #0
    89a6:	mov	r0, r7
    89a8:	strb	r2, [r3, #22]
    89aa:	bl	792e <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    89ae:	movs	r1, #1
    89b0:	mov	r0, r7
    89b2:	bl	78f0 <FatFile::readDirCache(bool)>
      if (!dir) {
    89b6:	mov	r1, r0
    89b8:	cbnz	r0, 89c6 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    89ba:	ldrb	r0, [r7, #1]
    89bc:	clz	r0, r0
    89c0:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    89c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    89c6:	ldrb	r3, [r0, #0]
    89c8:	cbz	r3, 89e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    89ca:	ldrb	r3, [r0, #11]
    89cc:	lsls	r3, r3, #28
    89ce:	bmi.n	89ae <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    89d0:	movs	r2, #11
    89d2:	mov	r0, r9
    89d4:	bl	f1d4 <memcmp>
    89d8:	cmp	r0, #0
    89da:	bne.n	89ae <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    89dc:	subs	r0, r4, #1
    89de:	ands.w	r4, r0, #255	; 0xff
    89e2:	bne.n	8970 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    89e4:	mov	r0, r4
 fail:
    89e6:	b.n	89c2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    89e8:	movs	r0, #1
    89ea:	b.n	89c2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    89ec:	.word	0x20021bd0

000089f0 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    89f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89f4:	vpush	{d8}
    89f8:	sub	sp, #44	; 0x2c
    89fa:	mov	r5, r1
    89fc:	mov	r7, r2
    89fe:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8a00:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8a02:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    8a04:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    8a06:	ldrb	r3, [r1, #0]
    8a08:	tst.w	r3, #112	; 0x70
    8a0c:	bne.n	8a1a <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    8a0e:	movs	r0, #0
}
    8a10:	add	sp, #44	; 0x2c
    8a12:	vpop	{d8}
    8a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    8a1a:	ldr	r3, [sp, #28]
    8a1c:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    8a1e:	cmp	r3, #0
    8a20:	bne.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    8a22:	ldr	r3, [r2, #16]
    8a24:	movs	r2, #13
    seekSet(0);
    8a26:	movs	r1, #0
    8a28:	mov	r0, r5
    8a2a:	adds	r3, #12
  uint8_t checksum = 0;
    8a2c:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    8a30:	udiv	r3, r3, r2
    8a34:	uxtb	r3, r3
  uint8_t order = 0;
    8a36:	mov	r8, sl
  uint8_t freeFound = 0;
    8a38:	mov	r4, sl
  bool fnameFound = false;
    8a3a:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    8a3c:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8a3e:	ldrb	r3, [r7, #21]
    8a40:	lsls	r2, r3, #30
    8a42:	itett	ne
    8a44:	ldrne	r3, [sp, #24]
    8a46:	moveq	r3, #1
    8a48:	addne.w	r9, r3, #1
    8a4c:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    8a50:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    8a52:	str	r3, [sp, #8]
    8a54:	bl	792e <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8a58:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    8a5c:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8a60:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8a64:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    8a66:	movs	r1, #0
    8a68:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8a6a:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    8a6e:	bl	78f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    8a72:	cmp	r0, #0
    8a74:	bne.n	8b3a <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    8a76:	ldrb	r3, [r5, #1]
    8a78:	cmp	r3, #0
    8a7a:	bne.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    8a7c:	ldr	r3, [sp, #16]
    8a7e:	lsls	r2, r3, #22
    8a80:	bpl.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    8a82:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    8a86:	subs	r3, #1
    8a88:	cmp	r3, #1
    8a8a:	bhi.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    8a8c:	ldr	r3, [sp, #12]
    8a8e:	cmp	r4, #0
    8a90:	it	eq
    8a92:	moveq	r3, r6
    8a94:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    8a96:	ldr	r3, [sp, #8]
    8a98:	cmp	r4, r3
    8a9a:	bcc.w	8c1e <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    8a9e:	cmp.w	fp, #0
    8aa2:	bne.w	8c54 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    8aa6:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8aa8:	mov	r2, r7
    8aaa:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    8aac:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    8aae:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    8ab0:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    8ab4:	uxtab	r6, r3, r6
    8ab8:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8aba:	mov	r3, fp
    8abc:	mov	r1, r6
    8abe:	bl	8768 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    8ac2:	cmp	r0, #0
    8ac4:	beq.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    8ac6:	mov	r1, r6
    8ac8:	mov	r0, r5
    8aca:	bl	743c <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    8ace:	mov	r4, r0
    8ad0:	cmp	r0, #0
    8ad2:	beq.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    8ad4:	movs	r2, #32
    8ad6:	movs	r1, #0
    8ad8:	bl	a898 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8adc:	ldr.w	r3, [r7, #22]
    8ae0:	str	r3, [r4, #0]
    8ae2:	ldr.w	r3, [r7, #26]
    8ae6:	str	r3, [r4, #4]
    8ae8:	ldrh	r3, [r7, #30]
    8aea:	strh	r3, [r4, #8]
    8aec:	ldrb.w	r3, [r7, #32]
    8af0:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    8af2:	ldrb	r3, [r7, #21]
    8af4:	and.w	r3, r3, #24
    8af8:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8afa:	ldr	r3, [pc, #372]	; (8c70 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    8afc:	ldr	r3, [r3, #0]
    8afe:	cmp	r3, #0
    8b00:	beq.w	8c64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    8b04:	add.w	r2, sp, #35	; 0x23
    8b08:	add.w	r1, sp, #38	; 0x26
    8b0c:	add	r0, sp, #36	; 0x24
    8b0e:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8b10:	ldrh.w	r3, [sp, #36]	; 0x24
    8b14:	strh	r3, [r4, #16]
    8b16:	ldrh.w	r3, [sp, #38]	; 0x26
    8b1a:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8b1c:	ldrb.w	r3, [sp, #35]	; 0x23
    8b20:	strb	r3, [r4, #13]
    8b22:	ldr	r3, [sp, #20]
    8b24:	ldr	r2, [sp, #20]
    8b26:	ldrb.w	r3, [r3, #40]	; 0x28
    8b2a:	orr.w	r3, r3, #1
    8b2e:	strb.w	r3, [r2, #40]	; 0x28
  }
    8b32:	b.n	8c0c <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    8b34:	mov.w	fp, #1
    8b38:	b.n	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    8b3a:	ldrb	r2, [r0, #0]
    8b3c:	cmp	r2, #229	; 0xe5
    8b3e:	beq.n	8b42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    8b40:	cbnz	r2, 8b64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    8b42:	ldr	r3, [sp, #12]
    8b44:	cmp	r4, #0
    8b46:	it	eq
    8b48:	moveq	r3, r6
    8b4a:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    8b4c:	ldr	r3, [sp, #8]
    8b4e:	cmp	r4, r3
        freeFound++;
    8b50:	itt	cc
    8b52:	addcc	r4, #1
    8b54:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    8b56:	cmp	r2, #0
    8b58:	beq.n	8a7c <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8b5a:	cmp	r2, #229	; 0xe5
    8b5c:	bne.n	8b6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    8b5e:	mov.w	r9, #0
    8b62:	b.n	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    8b64:	ldr	r3, [sp, #8]
    8b66:	cmp	r4, r3
    8b68:	it	cc
    8b6a:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    8b6c:	cmp	r2, #46	; 0x2e
    8b6e:	beq.n	8b5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    8b70:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    8b72:	cmp	r1, #15
    8b74:	bne.n	8bca <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    8b76:	cmp.w	r9, #0
    8b7a:	bne.n	8bb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    8b7c:	and.w	r8, r2, #31
        if (order != nameOrd ||
    8b80:	ldr	r3, [sp, #24]
    8b82:	cmp	r3, r8
    8b84:	bne.w	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    8b88:	ands.w	r9, r2, #64	; 0x40
    8b8c:	beq.w	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    8b90:	ldrb.w	sl, [r0, #13]
    8b94:	mov	r9, r3
      if (order == 1) {
    8b96:	cmp.w	r8, #1
    8b9a:	bne.w	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8b9e:	adds	r1, r6, #1
    8ba0:	mov	r3, r9
    8ba2:	mov	r2, r7
    8ba4:	mov	r0, r5
    8ba6:	uxth	r1, r1
    8ba8:	bl	86d6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8bac:	cmp	r0, #0
    8bae:	it	eq
    8bb0:	moveq.w	r9, #0
    8bb4:	b.n	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    8bb6:	add.w	r8, r8, #4294967295
    8bba:	uxtb.w	r8, r8
    8bbe:	cmp	r2, r8
    8bc0:	bne.n	8b5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    8bc2:	ldrb	r2, [r0, #13]
    8bc4:	cmp	r2, sl
    8bc6:	beq.n	8b96 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8bc8:	b.n	8b5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    8bca:	lsls	r3, r1, #28
    8bcc:	bmi.n	8b5e <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    8bce:	cmp.w	r9, #0
    8bd2:	beq.n	8bea <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    8bd4:	cmp.w	r8, #1
    8bd8:	bne.w	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8bdc:	bl	86b8 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8be0:	cmp	r0, sl
    8be2:	bne.w	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8be6:	mov	fp, r9
    8be8:	b.n	8c04 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8bea:	movs	r2, #11
    8bec:	vmov	r1, s16
    8bf0:	bl	f1d4 <memcmp>
    8bf4:	cmp	r0, #0
    8bf6:	bne.w	8a64 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8bfa:	ldrb.w	fp, [r7, #21]
    8bfe:	ands.w	fp, fp, #1
    8c02:	bne.n	8b34 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    8c04:	ldr	r3, [sp, #16]
    8c06:	lsls	r1, r3, #20
    8c08:	bmi.w	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8c0c:	ldr	r3, [sp, #16]
    8c0e:	mov	r2, r6
    8c10:	mov	r1, r5
    8c12:	ldr	r0, [sp, #28]
    8c14:	str.w	fp, [sp]
    8c18:	bl	7a1a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8c1c:	b.n	8a10 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    8c1e:	movs	r1, #0
    8c20:	mov	r0, r5
    8c22:	bl	78f0 <FatFile::readDirCache(bool)>
    if (!dir) {
    8c26:	cbnz	r0, 8c4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    8c28:	ldrb	r3, [r5, #1]
    8c2a:	cmp	r3, #0
    8c2c:	bne.w	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    8c30:	mov	r0, r5
    8c32:	bl	767c <FatFile::addDirCluster()>
    8c36:	cmp	r0, #0
    8c38:	beq.w	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    8c3c:	ldr	r3, [sp, #20]
    8c3e:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    8c40:	add.w	r3, r4, r3, lsl #4
    8c44:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    8c46:	ldr	r3, [sp, #8]
    8c48:	cmp	r3, r4
    8c4a:	bhi.n	8c30 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    8c4c:	b.n	8a9e <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    8c4e:	adds	r4, #1
    8c50:	uxtb	r4, r4
    8c52:	b.n	8a96 <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    8c54:	mov	r1, r7
    8c56:	mov	r0, r5
    8c58:	bl	8958 <FatFile::makeUniqueSfn(FatLfn_t*)>
    8c5c:	cmp	r0, #0
    8c5e:	bne.w	8aa6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    8c62:	b.n	8a0e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    8c64:	movw	r3, #22561	; 0x5821
    8c68:	strh	r3, [r4, #16]
    8c6a:	strh	r3, [r4, #24]
    8c6c:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    8c6e:	b.n	8b22 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    8c70:	.word	0x20021258

00008c74 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    8c74:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8c76:	mov	r4, r2
    8c78:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    8c7a:	mov	r0, r1
    8c7c:	ldrb.w	r3, [r1], #1
    8c80:	cmp	r3, #32
    8c82:	beq.n	8c7a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    8c84:	movs	r5, #0
    8c86:	ldr	r7, [pc, #148]	; (8d1c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    8c88:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    8c8a:	ldrb	r3, [r0, #0]
    8c8c:	cbnz	r3, 8cdc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8c8e:	ldr	r3, [r4, #16]
    8c90:	subs	r3, #1
    8c92:	cmp	r3, #254	; 0xfe
    8c94:	bhi.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8c96:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8c98:	ldrb.w	r3, [r0], #1
    8c9c:	cmp	r3, #32
    8c9e:	beq.n	8c96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8ca0:	cmp	r3, #47	; 0x2f
    8ca2:	beq.n	8c96 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    8ca4:	mov	r0, r4
  *ptr = path;
    8ca6:	str	r2, [r6, #0]

 fail:
  return false;
}
    8ca8:	add	sp, #12
    8caa:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    8cae:	b.w	8834 <FatFile::makeSFN(FatLfn_t*)>
    8cb2:	subs	r1, #34	; 0x22
    8cb4:	uxtb	r1, r1
    8cb6:	lsr.w	r1, r7, r1
    8cba:	lsls	r2, r1, #31
    8cbc:	bpl.n	8d16 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    8cbe:	movs	r0, #0
    8cc0:	add	sp, #12
    8cc2:	pop	{r4, r5, r6, r7, pc}
    8cc4:	cmp	r1, #92	; 0x5c
    8cc6:	beq.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8cc8:	bhi.n	8cd6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    8cca:	subs	r1, #62	; 0x3e
    8ccc:	cmp	r1, #1
    8cce:	bls.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    8cd0:	str	r5, [r4, #16]
      fname->end = path;
    8cd2:	str	r0, [r4, #8]
    8cd4:	b.n	8c8a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8cd6:	cmp	r1, #124	; 0x7c
    8cd8:	beq.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8cda:	b.n	8cd0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8cdc:	cmp	r3, #47	; 0x2f
    8cde:	beq.n	8c8e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8ce0:	add	r2, sp, #4
    8ce2:	adds	r1, r0, #4
    8ce4:	bl	5c54 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8ce8:	cmp	r0, #0
    8cea:	beq.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8cec:	ldr	r3, [sp, #4]
    8cee:	cmp.w	r3, #65536	; 0x10000
    8cf2:	ite	cc
    8cf4:	movcc	r2, #1
    8cf6:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8cf8:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8cfa:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8cfc:	bhi.n	8cd0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8cfe:	cmp	r3, #60	; 0x3c
    8d00:	uxtb	r1, r3
    8d02:	bhi.n	8cc4 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    8d04:	cmp	r1, #33	; 0x21
    8d06:	bhi.n	8cb2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    8d08:	cmp	r1, #31
    8d0a:	bls.n	8cbe <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8d0c:	cmp	r3, #46	; 0x2e
    8d0e:	beq.n	8c8a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8d10:	cmp	r3, #32
    8d12:	beq.n	8c8a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8d14:	b.n	8cd0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8d16:	cmp	r3, #46	; 0x2e
    8d18:	b.n	8d12 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    8d1a:	nop
    8d1c:	.word	0x05002101

00008d20 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8d20:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    8d24:	movs	r3, #0
    8d26:	sub	sp, #40	; 0x28
    8d28:	mov	r4, r0
    8d2a:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    8d2c:	ldrb	r3, [r0, #2]
    8d2e:	lsls	r2, r3, #30
    8d30:	bmi.n	8d3a <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    8d32:	movs	r0, #0
}
    8d34:	add	sp, #40	; 0x28
    8d36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8d3a:	ldr	r1, [r0, #32]
    8d3c:	cmp	r1, #0
    8d3e:	bne.n	8dcc <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    8d40:	movs	r1, #1
    8d42:	mov	r0, r4
    8d44:	bl	76ec <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    8d48:	mov	r5, r0
    8d4a:	cmp	r0, #0
    8d4c:	beq.n	8d32 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    8d4e:	bl	86b8 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    8d52:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    8d54:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    8d56:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    8d58:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    8d5a:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    8d5c:	ldr	r0, [r4, #8]
  m_flags = 0;
    8d5e:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    8d60:	bl	7620 <FatPartition::cacheSync()>
    8d64:	cmp	r0, #0
    8d66:	beq.n	8d32 <FatFile::remove()+0x12>
  if (!isLFN()) {
    8d68:	ldrb	r3, [r4, #3]
    8d6a:	cmp	r3, #0
    8d6c:	beq.n	8d34 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    8d6e:	mov	r1, r4
    8d70:	add	r0, sp, #4
    8d72:	bl	7716 <FatFile::openCluster(FatFile*)>
    8d76:	cmp	r0, #0
    8d78:	beq.n	8d32 <FatFile::remove()+0x12>
    8d7a:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    8d7c:	uxtb.w	r8, r5
    8d80:	ldrb	r3, [r4, #3]
    8d82:	cmp	r3, r8
    8d84:	bcc.n	8d32 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    8d86:	ldrh	r1, [r4, #4]
    8d88:	add	r0, sp, #4
    8d8a:	subs	r1, r1, r5
    8d8c:	uxth	r1, r1
    8d8e:	bl	743c <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    8d92:	cmp	r0, #0
    8d94:	beq.n	8d32 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8d96:	ldrb	r3, [r0, #11]
    8d98:	cmp	r3, #15
    8d9a:	bne.n	8d32 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8d9c:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8d9e:	and.w	r3, r2, #31
    8da2:	cmp	r3, r8
    8da4:	bne.n	8d32 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8da6:	ldrb	r3, [r0, #13]
    8da8:	cmp	r3, r6
    8daa:	bne.n	8d32 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8dac:	strb	r7, [r0, #0]
    if (last) {
    8dae:	adds	r5, #1
    m_vol->cacheDirty();
    8db0:	ldr	r1, [r4, #8]
    if (last) {
    8db2:	uxth	r5, r5
    8db4:	ldrb.w	r3, [r1, #40]	; 0x28
    8db8:	orr.w	r3, r3, #1
    8dbc:	strb.w	r3, [r1, #40]	; 0x28
    8dc0:	lsls	r3, r2, #25
    8dc2:	bpl.n	8d7c <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    8dc4:	ldr	r0, [r4, #8]
    8dc6:	bl	7620 <FatPartition::cacheSync()>
    8dca:	b.n	8d34 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8dcc:	ldr	r0, [r0, #8]
    8dce:	bl	8476 <FatPartition::freeChain(unsigned long)>
    8dd2:	cmp	r0, #0
    8dd4:	bne.n	8d40 <FatFile::remove()+0x20>
    8dd6:	b.n	8d32 <FatFile::remove()+0x12>

00008dd8 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8dd8:	push	{r4, lr}
    8dda:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8ddc:	ldr	r0, [r0, #56]	; 0x38
    8dde:	cbz	r0, 8dec <FsBaseFile::close()+0x14>
    8de0:	bl	7bf8 <FatFile::close()>
    8de4:	cbz	r0, 8dec <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    8de6:	movs	r3, #0
    8de8:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8dea:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8dec:	ldr	r0, [r4, #60]	; 0x3c
    8dee:	cbnz	r0, 8df4 <FsBaseFile::close()+0x1c>
  return false;
    8df0:	movs	r0, #0
    8df2:	b.n	8dea <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    8df4:	bl	5ffa <ExFatFile::close()>
    8df8:	cmp	r0, #0
    8dfa:	beq.n	8df0 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8dfc:	movs	r3, #0
    8dfe:	str	r3, [r4, #60]	; 0x3c
    return true;
    8e00:	b.n	8dea <FsBaseFile::close()+0x12>

00008e02 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    8e02:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    8e04:	push	{r4, r5, r6, lr}
    8e06:	mov	r6, r0
    8e08:	mov	r5, r1
  if (this == &from) return *this;
    8e0a:	beq.n	8e34 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8e0c:	bl	8dd8 <FsBaseFile::close()>
  if (from.m_fFile) {
    8e10:	ldr	r4, [r5, #56]	; 0x38
    8e12:	cbz	r4, 8e38 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8e14:	mov	r1, r6
    8e16:	movs	r0, #36	; 0x24
    8e18:	bl	9034 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8e1c:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8e1e:	mov	r4, r0
    8e20:	strh	r3, [r0, #0]
    8e22:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8e24:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    8e26:	ldr	r5, [r5, #56]	; 0x38
    8e28:	ldmia	r5!, {r0, r1, r2, r3}
    8e2a:	stmia	r4!, {r0, r1, r2, r3}
    8e2c:	ldmia	r5!, {r0, r1, r2, r3}
    8e2e:	stmia	r4!, {r0, r1, r2, r3}
    8e30:	ldr	r3, [r5, #0]
    8e32:	str	r3, [r4, #0]
}
    8e34:	mov	r0, r6
    8e36:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    8e38:	ldr	r3, [r5, #60]	; 0x3c
    8e3a:	cmp	r3, #0
    8e3c:	beq.n	8e34 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    8e3e:	mov	r1, r6
    8e40:	movs	r0, #56	; 0x38
    8e42:	bl	9034 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    8e46:	strb.w	r4, [r0, #49]	; 0x31
    8e4a:	strh	r4, [r0, #50]	; 0x32
    8e4c:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    8e4e:	ldr	r3, [r5, #60]	; 0x3c
    8e50:	add.w	r2, r3, #52	; 0x34
    8e54:	ldr.w	r1, [r3], #4
    8e58:	cmp	r3, r2
    8e5a:	str.w	r1, [r0], #4
    8e5e:	bne.n	8e54 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    8e60:	b.n	8e34 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

00008e62 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    8e62:	push	{r0, r1, r4, r5, r6, lr}
    8e64:	mov	r4, r0
  if (!vol) {
    8e66:	mov	r5, r1
    8e68:	cbnz	r1, 8e70 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    8e6a:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8e6c:	add	sp, #8
    8e6e:	pop	{r4, r5, r6, pc}
    8e70:	strd	r2, r3, [sp]
  close();
    8e74:	bl	8dd8 <FsBaseFile::close()>
  if (vol->m_fVol) {
    8e78:	ldr.w	r6, [r5, #1152]	; 0x480
    8e7c:	ldrd	r2, r3, [sp]
    8e80:	cbz	r6, 8ea8 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    8e82:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    8e84:	mov	r1, r4
    8e86:	movs	r0, #36	; 0x24
    8e88:	bl	9034 <operator new(unsigned int, unsigned long*)>
    8e8c:	strh	r6, [r0, #0]
    8e8e:	strb	r6, [r0, #2]
    8e90:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    8e92:	ldr.w	r1, [r5, #1152]	; 0x480
    8e96:	ldrd	r2, r3, [sp]
    8e9a:	bl	7ca6 <FatFile::open(FatVolume*, char const*, int)>
    8e9e:	cbz	r0, 8ea4 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8ea0:	movs	r0, #1
    8ea2:	b.n	8e6c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    8ea4:	str	r0, [r4, #56]	; 0x38
    8ea6:	b.n	8e6c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    8ea8:	ldr.w	r1, [r5, #1156]	; 0x484
    8eac:	strd	r2, r3, [sp]
    8eb0:	cmp	r1, #0
    8eb2:	beq.n	8e6a <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    8eb4:	mov	r1, r4
    8eb6:	movs	r0, #56	; 0x38
    8eb8:	bl	9034 <operator new(unsigned int, unsigned long*)>
    8ebc:	strb.w	r6, [r0, #49]	; 0x31
    8ec0:	strh	r6, [r0, #50]	; 0x32
    8ec2:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    8ec4:	ldr.w	r1, [r5, #1156]	; 0x484
    8ec8:	ldrd	r2, r3, [sp]
    8ecc:	bl	679a <ExFatFile::open(ExFatVolume*, char const*, int)>
    8ed0:	cmp	r0, #0
    8ed2:	bne.n	8ea0 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    8ed4:	str	r0, [r4, #60]	; 0x3c
    8ed6:	b.n	8e6c <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008ed8 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8ed8:	push	{r0, r1, r4, r5, r6, lr}
    8eda:	mov	r5, r1
    8edc:	str	r2, [sp, #4]
    8ede:	mov	r4, r0
  close();
    8ee0:	bl	8dd8 <FsBaseFile::close()>
  if (dir->m_fFile) {
    8ee4:	ldr	r6, [r5, #56]	; 0x38
    8ee6:	ldr	r2, [sp, #4]
    8ee8:	cbz	r6, 8f0e <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8eea:	mov	r1, r4
    8eec:	movs	r0, #36	; 0x24
    8eee:	bl	9034 <operator new(unsigned int, unsigned long*)>
    8ef2:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8ef4:	ldr	r2, [sp, #4]
    8ef6:	strh	r1, [r0, #0]
    8ef8:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8efa:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8efc:	ldr	r1, [r5, #56]	; 0x38
    8efe:	bl	7adc <FatFile::openNext(FatFile*, int)>
    8f02:	cbz	r0, 8f0a <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    8f04:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    8f06:	add	sp, #8
    8f08:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    8f0a:	str	r0, [r4, #56]	; 0x38
    8f0c:	b.n	8f06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8f0e:	ldr	r0, [r5, #60]	; 0x3c
    8f10:	str	r2, [sp, #4]
    8f12:	cmp	r0, #0
    8f14:	beq.n	8f06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    8f16:	mov	r1, r4
    8f18:	movs	r0, #56	; 0x38
    8f1a:	bl	9034 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8f1e:	ldr	r2, [sp, #4]
    8f20:	strb.w	r6, [r0, #49]	; 0x31
    8f24:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    8f26:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8f28:	ldr	r1, [r5, #60]	; 0x3c
    8f2a:	bl	67a8 <ExFatFile::openNext(ExFatFile*, int)>
    8f2e:	cmp	r0, #0
    8f30:	bne.n	8f04 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    8f32:	str	r0, [r4, #60]	; 0x3c
    8f34:	b.n	8f06 <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00008f38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8f38:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    8f3c:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8f3e:	mov	r4, r0
    8f40:	mov	r6, r3
  m_blockDev = blockDev;
    8f42:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    8f46:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    8f4a:	mov	r1, r0
    8f4c:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    8f50:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    8f52:	bl	9034 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    8f56:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    8f58:	strb.w	r7, [r0, #1092]	; 0x444
    8f5c:	mov	r5, r0
    8f5e:	strb.w	r7, [r0, #1145]	; 0x479
    8f62:	strh.w	r7, [r0, #1146]	; 0x47a
    8f66:	str.w	r0, [r4, #1156]	; 0x484
    8f6a:	ldr.w	r1, [r4, #1160]	; 0x488
    8f6e:	ldr.w	r8, [pc, #152]	; 9008 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    8f72:	bl	6aec <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8f76:	cbz	r0, 8fa8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8f78:	add.w	r7, r5, #1096	; 0x448
    8f7c:	mov	r0, r7
    8f7e:	bl	5ffa <ExFatFile::close()>
    return m_vwd.openRoot(this);
    8f82:	mov	r1, r5
    8f84:	mov	r0, r7
    8f86:	bl	604e <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8f8a:	cbz	r0, 8fa8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8f8c:	ldr	r3, [pc, #112]	; (9000 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8f8e:	ldr	r2, [r3, #0]
    8f90:	cbnz	r2, 8f94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    8f92:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    8f94:	cmp.w	r9, #0
    8f98:	bne.n	8fa0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8f9a:	ldr.w	r3, [r8]
    8f9e:	cbnz	r3, 8fa4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8fa0:	str.w	r4, [r8]
  }
  return true;
    8fa4:	movs	r0, #1
    8fa6:	b.n	8ffa <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    8fa8:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    8faa:	mov	r1, r4
    8fac:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    8fb0:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    8fb4:	bl	9034 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    8fb8:	movs	r3, #2
    8fba:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8fbc:	mov	r2, r6
    8fbe:	strb	r3, [r0, #8]
    8fc0:	mov	r5, r0
    8fc2:	strh.w	r7, [r0, #1096]	; 0x448
    8fc6:	strb.w	r7, [r0, #1098]	; 0x44a
    8fca:	str.w	r0, [r4, #1152]	; 0x480
    8fce:	ldr.w	r1, [r4, #1160]	; 0x488
    8fd2:	bl	8564 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    8fd6:	cbz	r0, 8ff0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8fd8:	add.w	r6, r5, #1096	; 0x448
    8fdc:	mov	r0, r6
    8fde:	bl	7bf8 <FatFile::close()>
    return m_vwd.openRoot(this);
    8fe2:	mov	r1, r5
    8fe4:	mov	r0, r6
    8fe6:	bl	770a <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8fea:	cbz	r0, 8ff0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8fec:	ldr	r3, [pc, #20]	; (9004 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8fee:	b.n	8f8e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8ff0:	movs	r0, #0
    8ff2:	str.w	r0, [r8]
  m_fVol = nullptr;
    8ff6:	str.w	r0, [r4, #1152]	; 0x480
}
    8ffa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8ffe:	nop
    9000:	.word	0x2002125c
    9004:	.word	0x20021294
    9008:	.word	0x20021290

0000900c <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    900c:	push	{r3, r4, r5, lr}
    900e:	mov	r4, r0
    9010:	mov.w	r5, #1000	; 0x3e8
    9014:	movs	r0, #0
    9016:	strd	r0, r5, [r4, #4]
    901a:	strb	r0, [r4, #12]
    901c:	ldr	r5, [pc, #16]	; (9030 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    901e:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    9022:	mov	r0, r4
    9024:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    9028:	bl	8e62 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    902c:	mov	r0, r4
    902e:	pop	{r3, r4, r5, pc}
    9030:	.word	0x200004f4

00009034 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    9034:	mov	r0, r1
    9036:	bx	lr

00009038 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    9038:	mov.w	r0, #4294967295
    903c:	bx	lr

0000903e <SharedSpiCard::errorCode() const>:
  }
    903e:	ldrb	r0, [r0, #17]
    9040:	bx	lr

00009042 <SharedSpiCard::errorData() const>:
  }
    9042:	ldrb	r0, [r0, #20]
    9044:	bx	lr

00009046 <SharedSpiCard::type() const>:
  }
    9046:	ldrb	r0, [r0, #21]
    9048:	bx	lr

0000904a <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    904a:	movs	r0, #1
    904c:	bx	lr

0000904e <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    904e:	ldrb	r0, [r0, #28]
    9050:	bx	lr

00009052 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    9052:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    9054:	push	{r4}
  return readSectors(sector, dst, 1);
    9056:	ldr	r4, [r3, #20]
    9058:	movs	r3, #1
    905a:	mov	ip, r4
}
    905c:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    9060:	bx	ip

00009062 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9062:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    9064:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    9066:	mov	r4, r0
    9068:	mov	r5, r1
  if (!syncDevice()) {
    906a:	ldr	r3, [r3, #32]
    906c:	blx	r3
    906e:	cbz	r0, 9072 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    9070:	strb	r5, [r4, #28]
  return true;
}
    9072:	pop	{r3, r4, r5, pc}

00009074 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9074:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9078:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    907a:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    907c:	mov	r4, r0
    907e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9080:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    9082:	mov	r6, r2
    9084:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9088:	bne.n	9090 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    908a:	ldr	r3, [r0, #24]
    908c:	cmp	r3, r1
    908e:	beq.n	90a4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    9090:	ldr	r3, [r4, #0]
    9092:	mov	r1, r5
    9094:	mov	r0, r4
    9096:	ldr	r3, [r3, #96]	; 0x60
    9098:	blx	r3
    909a:	cbnz	r0, 90a2 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    909c:	movs	r0, #0
}
    909e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    90a2:	str	r5, [r4, #24]
    90a4:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    90a8:	cmp	r5, r8
    90aa:	bne.n	90c4 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    90ac:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    90ae:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    90b0:	add	r3, r6
    90b2:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    90b4:	cmp	r0, #0
    90b6:	bne.n	909e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    90b8:	ldr	r3, [r4, #0]
    90ba:	mov	r0, r4
    90bc:	ldr	r3, [r3, #100]	; 0x64
}
    90be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    90c2:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    90c4:	mov	r1, r9
    90c6:	mov	r0, r5
    90c8:	blx	r7
    if (!writeData(src)) {
    90ca:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    90cc:	mov	r1, r0
    if (!writeData(src)) {
    90ce:	mov	r0, r4
    90d0:	ldr	r3, [r3, #92]	; 0x5c
    90d2:	adds	r5, #1
    90d4:	blx	r3
    90d6:	cmp	r0, #0
    90d8:	bne.n	90a8 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    90da:	b.n	909c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

000090dc <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    90dc:	bx	lr

000090de <SharedSpiCard::end()>:
    m_spiDriver.end();
    90de:	adds	r0, #4
    90e0:	b.w	a818 <SdSpiArduinoDriver::end()>

000090e4 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    90e4:	push	{r4, lr}
    90e6:	mov	r4, r0
    90e8:	movs	r1, #32
    90ea:	bl	d004 <operator delete(void*, unsigned int)>
    90ee:	mov	r0, r4
    90f0:	pop	{r4, pc}

000090f2 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    90f2:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    90f4:	ldr	r3, [r0, #0]
    90f6:	mov	r1, sp
    90f8:	ldr	r3, [r3, #76]	; 0x4c
    90fa:	blx	r3
    90fc:	cbz	r0, 9144 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    90fe:	ldrb.w	r3, [sp]
    9102:	ands.w	r3, r3, #192	; 0xc0
    9106:	bne.n	914a <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9108:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    910c:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9110:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    9114:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9118:	lsls	r0, r0, #2
    911a:	orr.w	r0, r0, r3, lsl #10
    911e:	ldrb.w	r3, [sp, #8]
    9122:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9126:	ldrb.w	r3, [sp, #9]
    912a:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    912e:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    9130:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9132:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9136:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    913a:	and.w	r2, r2, #15
    913e:	add	r3, r2
    9140:	subs	r3, #7
    9142:	lsls	r0, r3
}
    9144:	add	sp, #20
    9146:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    914a:	cmp	r3, #64	; 0x40
    914c:	bne.n	916c <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    914e:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9152:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9156:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9158:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    915c:	add.w	r0, r0, r3, lsl #16
    9160:	ldrb.w	r3, [sp, #8]
    9164:	add.w	r0, r0, r3, lsl #8
    9168:	lsls	r0, r0, #10
    916a:	b.n	9144 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    916c:	movs	r0, #0
    916e:	b.n	9144 <SharedSpiCard::sectorCount()+0x52>

00009170 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    9170:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9174:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9176:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    9178:	mov	r4, r0
    917a:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    917c:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    917e:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    9180:	bne.n	9188 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    9182:	ldr	r3, [r0, #24]
    9184:	cmp	r3, r1
    9186:	beq.n	919c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    9188:	ldr	r3, [r4, #0]
    918a:	mov	r1, r5
    918c:	mov	r0, r4
    918e:	ldr	r3, [r3, #96]	; 0x60
    9190:	blx	r3
    9192:	cbnz	r0, 919a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    9194:	movs	r0, #0
}
    9196:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    919a:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    919c:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    919e:	cmp	r6, r5
    91a0:	add.w	r1, r7, r5, lsl #9
    91a4:	bne.n	91be <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    91a6:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    91a8:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    91aa:	add	r3, r6
    91ac:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    91ae:	cmp	r0, #0
    91b0:	bne.n	9196 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    91b2:	ldr	r3, [r4, #0]
    91b4:	mov	r0, r4
    91b6:	ldr	r3, [r3, #100]	; 0x64
}
    91b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    91bc:	bx	r3
    if (!writeData(src)) {
    91be:	ldr	r3, [r4, #0]
    91c0:	mov	r0, r4
    91c2:	ldr	r3, [r3, #92]	; 0x5c
    91c4:	blx	r3
    91c6:	cmp	r0, #0
    91c8:	beq.n	9194 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    91ca:	adds	r5, #1
    91cc:	b.n	919e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

000091ce <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    91ce:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    91d0:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    91d2:	mov	r4, r0
  if (!m_spiActive) {
    91d4:	cbnz	r6, 91f2 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    91d6:	adds	r5, r0, #4
    91d8:	mov	r0, r5
    91da:	bl	a7bc <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    91de:	mov	r1, r6
    91e0:	ldrb	r0, [r4, #16]
    91e2:	bl	a892 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    91e6:	movs	r1, #255	; 0xff
    91e8:	mov	r0, r5
    91ea:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    91ee:	movs	r3, #1
    91f0:	strb	r3, [r4, #18]
}
    91f2:	pop	{r4, r5, r6, pc}

000091f4 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    91f4:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    91f6:	push	{r0, r1, r4, lr}
    91f8:	mov	r4, r0
  if (m_spiActive) {
    91fa:	cbz	r3, 9218 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    91fc:	movs	r1, #1
    91fe:	ldrb	r0, [r0, #16]
    9200:	bl	a892 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    9204:	adds	r0, r4, #4
    9206:	movs	r1, #255	; 0xff
    9208:	str	r0, [sp, #4]
    920a:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    920e:	ldr	r0, [sp, #4]
    9210:	bl	a7ca <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    9214:	movs	r3, #0
    9216:	strb	r3, [r4, #18]
}
    9218:	add	sp, #8
    921a:	pop	{r4, pc}

0000921c <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    921c:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    921e:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    9220:	mov	r4, r0
  if (m_state == READ_STATE) {
    9222:	cmp	r3, #1
    9224:	beq.n	9248 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    9226:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    9228:	cbnz	r6, 922e <SharedSpiCard::isBusy()+0x12>
    spiStart();
    922a:	bl	91ce <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    922e:	adds	r0, r4, #4
    9230:	bl	a81e <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    9234:	subs.w	r5, r0, #255	; 0xff
    9238:	it	ne
    923a:	movne	r5, #1
  if (!spiActive) {
    923c:	cbnz	r6, 9244 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    923e:	mov	r0, r4
    9240:	bl	91f4 <SharedSpiCard::spiStop()>
}
    9244:	mov	r0, r5
    9246:	pop	{r4, r5, r6, pc}
    return false;
    9248:	movs	r5, #0
    924a:	b.n	9244 <SharedSpiCard::isBusy()+0x28>

0000924c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    924c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    924e:	ldr	r7, [pc, #96]	; (92b0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    9250:	mov	r4, r0
    9252:	adds	r6, r0, #4
    9254:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    9256:	add.w	r5, r5, #300	; 0x12c
    925a:	uxth	r5, r5
    925c:	mov	r0, r6
    925e:	strd	r1, r2, [sp]
    9262:	bl	a81e <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    9266:	cmp	r0, #255	; 0xff
    9268:	strb	r0, [r4, #20]
    926a:	ldrd	r1, r2, [sp]
    926e:	beq.n	9290 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    9270:	cmp	r0, #254	; 0xfe
    9272:	bne.n	92a6 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    9274:	mov	r0, r6
    9276:	bl	a828 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    927a:	strb	r0, [r4, #20]
    927c:	cbnz	r0, 92aa <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    927e:	mov	r0, r6
    9280:	bl	a81e <SdSpiArduinoDriver::receive()>
    9284:	mov	r0, r6
    9286:	bl	a81e <SdSpiArduinoDriver::receive()>
  return true;
    928a:	movs	r0, #1
}
    928c:	add	sp, #12
    928e:	pop	{r4, r5, r6, r7, pc}
    9290:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    9292:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    9294:	lsls	r3, r3, #16
    9296:	bpl.n	925c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    9298:	movs	r3, #29
  spiStop();
    929a:	mov	r0, r4
    m_errorCode = code;
    929c:	strb	r3, [r4, #17]
    929e:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    92a2:	movs	r0, #0
    92a4:	b.n	928c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    92a6:	movs	r3, #24
    92a8:	b.n	929a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    92aa:	movs	r3, #37	; 0x25
    92ac:	b.n	929a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    92ae:	nop
    92b0:	.word	0x20021bd0

000092b4 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    92b4:	mov.w	r2, #512	; 0x200
    92b8:	b.w	924c <SharedSpiCard::readData(unsigned char*, unsigned int)>

000092bc <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    92bc:	push	{r4, r5, r6, lr}
    92be:	ldr	r6, [pc, #36]	; (92e4 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    92c0:	adds	r5, r0, #4
    92c2:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    92c4:	add	r1, r3
    92c6:	uxth	r4, r1
    92c8:	mov	r0, r5
    92ca:	bl	a81e <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    92ce:	cmp	r0, #255	; 0xff
    92d0:	bne.n	92d6 <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    92d2:	movs	r0, #1
}
    92d4:	pop	{r4, r5, r6, pc}
    92d6:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    92d8:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    92da:	lsls	r3, r3, #16
    92dc:	bpl.n	92c8 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    92de:	movs	r0, #0
    92e0:	b.n	92d4 <SharedSpiCard::waitReady(unsigned short)+0x18>
    92e2:	nop
    92e4:	.word	0x20021bd0

000092e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    92e8:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    92ea:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    92ee:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    92f0:	mov	r4, r0
    92f2:	str	r2, [sp, #4]
    92f4:	mov	r5, r1
  if (!syncDevice()) {
    92f6:	blx	r3
    92f8:	cmp	r0, #0
    92fa:	beq.n	936e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    92fc:	ldrb	r3, [r4, #18]
    92fe:	cbnz	r3, 9306 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    9300:	mov	r0, r4
    9302:	bl	91ce <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    9306:	cmp	r5, #12
    9308:	bne.n	935c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    930a:	adds	r6, r4, #4
    930c:	movs	r7, #3
    spiSend(pa[i]);
    930e:	add.w	r8, sp, #4
    9312:	orr.w	r1, r5, #64	; 0x40
    9316:	mov	r0, r6
    9318:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    931c:	ldrb.w	r1, [r8, r7]
    9320:	mov	r0, r6
    9322:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    9326:	subs	r7, #1
    9328:	bcs.n	931c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    932a:	cmp	r5, #0
    932c:	mov	r0, r6
    return m_spiDriver.receive();
    932e:	mov.w	r5, #10
    m_spiDriver.send(data);
    9332:	ite	eq
    9334:	moveq	r1, #149	; 0x95
    9336:	movne	r1, #135	; 0x87
    9338:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    933c:	mov	r0, r6
    933e:	bl	a81e <SdSpiArduinoDriver::receive()>
    9342:	mov	r0, r6
    9344:	bl	a81e <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    9348:	lsls	r3, r0, #24
    m_status = spiReceive();
    934a:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    934c:	bpl.n	9356 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    934e:	subs	r5, #1
    9350:	uxth	r5, r5
    9352:	cmp	r5, #0
    9354:	bne.n	9342 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    9356:	add	sp, #8
    9358:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    935c:	mov.w	r1, #300	; 0x12c
    9360:	mov	r0, r4
    9362:	bl	92bc <SharedSpiCard::waitReady(unsigned short)>
    9366:	cmp	r0, #0
    9368:	bne.n	930a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    936a:	cmp	r5, #0
    936c:	beq.n	930a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    936e:	movs	r0, #255	; 0xff
    9370:	b.n	9356 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00009372 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9372:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    9374:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    9376:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    9378:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    937a:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    937c:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9380:	cbz	r0, 9390 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    9382:	movs	r3, #18
  spiStop();
    9384:	mov	r0, r4
    9386:	strb	r3, [r4, #17]
    9388:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    938c:	movs	r0, #0
}
    938e:	pop	{r3, r4, r5, r6, r7, pc}
    9390:	adds	r6, r5, #4
    return m_spiDriver.receive();
    9392:	adds	r7, r4, #4
    9394:	mov	r0, r7
    9396:	bl	a81e <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    939a:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    939e:	cmp	r6, r5
    93a0:	bne.n	9394 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    93a2:	mov	r0, r4
    93a4:	bl	91f4 <SharedSpiCard::spiStop()>
    93a8:	movs	r0, #1
    93aa:	b.n	938e <SharedSpiCard::readOCR(unsigned long*)+0x1c>

000093ac <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    93ac:	push	{r3, r4, r5, lr}
    93ae:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    93b0:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    93b2:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    93b4:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    93b8:	cbz	r0, 93c8 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    93ba:	movs	r3, #27
    93bc:	strb	r3, [r4, #17]
  spiStop();
    93be:	mov	r0, r4
  return false;
    93c0:	movs	r5, #0
  spiStop();
    93c2:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    93c6:	b.n	93de <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    93c8:	mov	r1, r5
    93ca:	movs	r2, #16
    93cc:	mov	r0, r4
    93ce:	bl	924c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    93d2:	mov	r5, r0
    93d4:	cmp	r0, #0
    93d6:	beq.n	93be <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    93d8:	mov	r0, r4
    93da:	bl	91f4 <SharedSpiCard::spiStop()>
}
    93de:	mov	r0, r5
    93e0:	pop	{r3, r4, r5, pc}

000093e2 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    93e2:	mov	r2, r1
    return readRegister(CMD9, csd);
    93e4:	movs	r1, #9
    93e6:	b.w	93ac <SharedSpiCard::readRegister(unsigned char, void*)>

000093ea <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    93ea:	mov	r2, r1
    return readRegister(CMD10, cid);
    93ec:	movs	r1, #10
    93ee:	b.w	93ac <SharedSpiCard::readRegister(unsigned char, void*)>

000093f2 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    93f2:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    93f4:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    93f6:	mov	r5, r1
    93f8:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    93fa:	ldr	r3, [r3, #88]	; 0x58
    93fc:	blx	r3
    93fe:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    9400:	mov.w	r1, #18
    9404:	mov	r0, r4
    sector <<= 9;
    9406:	it	ne
    9408:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    940a:	mov	r2, r5
    940c:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9410:	cbz	r0, 9420 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    9412:	movs	r3, #12
  spiStop();
    9414:	mov	r0, r4
    9416:	strb	r3, [r4, #17]
    9418:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    941c:	movs	r0, #0
}
    941e:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    9420:	movs	r0, #1
    9422:	strb	r0, [r4, #19]
  return true;
    9424:	b.n	941e <SharedSpiCard::readStart(unsigned long)+0x2c>

00009426 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    9426:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    9428:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    942a:	movs	r1, #12
bool SharedSpiCard::readStop() {
    942c:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    942e:	mov	r2, r4
  m_state = IDLE_STATE;
    9430:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    9432:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9436:	cbz	r0, 9446 <SharedSpiCard::readStop()+0x20>
    9438:	movs	r3, #9
  spiStop();
    943a:	mov	r0, r5
    943c:	strb	r3, [r5, #17]
    943e:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    9442:	mov	r0, r4
}
    9444:	pop	{r3, r4, r5, pc}
  spiStop();
    9446:	mov	r0, r5
    9448:	bl	91f4 <SharedSpiCard::spiStop()>
  return true;
    944c:	movs	r0, #1
    944e:	b.n	9444 <SharedSpiCard::readStop()+0x1e>

00009450 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    9450:	ldrb	r2, [r0, #19]
    9452:	cmp	r2, #2
    9454:	bne.n	945c <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    9456:	ldr	r3, [r0, #0]
    9458:	ldr	r3, [r3, #100]	; 0x64
    945a:	bx	r3
  if (m_state == READ_STATE) {
    945c:	cmp	r2, #1
    945e:	bne.n	9464 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    9460:	b.w	9426 <SharedSpiCard::readStop()>
}
    9464:	movs	r0, #1
    9466:	bx	lr

00009468 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    9468:	push	{r3, r4, r5, r6, r7, lr}
    946a:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    946c:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    946e:	mov	r4, r0
    9470:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    9472:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    9474:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    9476:	bne.n	947e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    9478:	ldr	r3, [r0, #24]
    947a:	cmp	r3, r1
    947c:	beq.n	948e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    947e:	mov	r1, r5
    9480:	mov	r0, r4
    9482:	bl	93f2 <SharedSpiCard::readStart(unsigned long)>
    9486:	cbnz	r0, 948c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    9488:	movs	r0, #0
}
    948a:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    948c:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    948e:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    9490:	cmp	r5, r6
    9492:	add.w	r1, r7, r5, lsl #9
    9496:	bne.n	94ae <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    9498:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    949a:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    949c:	add	r3, r5
    949e:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    94a0:	cmp	r0, #0
    94a2:	bne.n	948a <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    94a4:	mov	r0, r4
}
    94a6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    94aa:	b.w	9426 <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    94ae:	mov	r0, r4
    94b0:	bl	92b4 <SharedSpiCard::readData(unsigned char*)>
    94b4:	cmp	r0, #0
    94b6:	beq.n	9488 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    94b8:	adds	r5, #1
    94ba:	b.n	9490 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

000094bc <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    94bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94c0:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    94c2:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    94c4:	mov	r4, r0
    94c6:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    94c8:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    94ca:	mov	r7, r2
    94cc:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    94d0:	bne.n	94d8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    94d2:	ldr	r3, [r0, #24]
    94d4:	cmp	r3, r1
    94d6:	beq.n	94ea <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    94d8:	mov	r1, r5
    94da:	mov	r0, r4
    94dc:	bl	93f2 <SharedSpiCard::readStart(unsigned long)>
    94e0:	cbnz	r0, 94e8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    94e2:	movs	r0, #0
}
    94e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    94e8:	str	r5, [r4, #24]
    94ea:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    94ee:	cmp	r5, r8
    94f0:	bne.n	9508 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    94f2:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    94f4:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    94f6:	add	r3, r6
    94f8:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    94fa:	cmp	r0, #0
    94fc:	bne.n	94e4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    94fe:	mov	r0, r4
}
    9500:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    9504:	b.w	9426 <SharedSpiCard::readStop()>
    if (readData(dst)) {
    9508:	mov	r1, r7
    950a:	mov	r0, r4
    950c:	bl	92b4 <SharedSpiCard::readData(unsigned char*)>
    9510:	cmp	r0, #0
    9512:	beq.n	94e2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    9514:	mov	r0, r5
    9516:	mov	r2, sl
    9518:	mov	r1, r7
    951a:	adds	r5, #1
    951c:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    951e:	b.n	94ee <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00009520 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    9520:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    9522:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    9524:	mov	r5, r1
    9526:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    9528:	ldr	r3, [r3, #88]	; 0x58
    952a:	blx	r3
    952c:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    952e:	mov.w	r1, #25
    9532:	mov	r0, r4
    sector <<= 9;
    9534:	it	ne
    9536:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    9538:	mov	r2, r5
    953a:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    953e:	cbz	r0, 954e <SharedSpiCard::writeStart(unsigned long)+0x2e>
    9540:	movs	r3, #14
  spiStop();
    9542:	mov	r0, r4
    9544:	strb	r3, [r4, #17]
    9546:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    954a:	movs	r0, #0
}
    954c:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    954e:	movs	r3, #2
  return true;
    9550:	movs	r0, #1
  m_state = WRITE_STATE;
    9552:	strb	r3, [r4, #19]
  return true;
    9554:	b.n	954c <SharedSpiCard::writeStart(unsigned long)+0x2c>

00009556 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9556:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    9558:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    955a:	mov	r6, r1
  if (!readCSD(&csd)) {
    955c:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    955e:	mov	r4, r0
  if (!readCSD(&csd)) {
    9560:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9562:	mov	r5, r2
  if (!readCSD(&csd)) {
    9564:	blx	r3
    9566:	cbz	r0, 958a <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    9568:	ldrb.w	r3, [sp, #10]
    956c:	lsls	r2, r3, #25
    956e:	bmi.n	9594 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    9570:	and.w	r3, r3, #63	; 0x3f
    9574:	ldrb.w	r2, [sp, #11]
    9578:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    957a:	orr.w	r3, r3, r2, lsr #7
    957e:	adds	r2, r5, #1
    9580:	orrs	r2, r6
    9582:	tst	r3, r2
    9584:	beq.n	9594 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    9586:	movs	r3, #39	; 0x27
    9588:	strb	r3, [r4, #17]
  spiStop();
    958a:	mov	r0, r4
  return false;
    958c:	movs	r5, #0
  spiStop();
    958e:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    9592:	b.n	95e2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    9594:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    9596:	movs	r1, #32
    9598:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    959a:	cmp	r3, #3
    firstSector <<= 9;
    959c:	itt	ne
    959e:	lslne	r6, r6, #9
    lastSector <<= 9;
    95a0:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    95a2:	mov	r2, r6
    95a4:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    95a8:	cbz	r0, 95ae <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    95aa:	movs	r3, #38	; 0x26
    95ac:	b.n	9588 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    95ae:	mov	r2, r5
    95b0:	movs	r1, #33	; 0x21
    95b2:	mov	r0, r4
    95b4:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    95b8:	mov	r2, r0
    95ba:	cmp	r0, #0
    95bc:	bne.n	95aa <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    95be:	movs	r1, #38	; 0x26
    95c0:	mov	r0, r4
    95c2:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    95c6:	cmp	r0, #0
    95c8:	bne.n	95aa <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    95ca:	movw	r1, #10000	; 0x2710
    95ce:	mov	r0, r4
    95d0:	bl	92bc <SharedSpiCard::waitReady(unsigned short)>
    95d4:	mov	r5, r0
    95d6:	cbnz	r0, 95dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    95d8:	movs	r3, #40	; 0x28
    95da:	b.n	9588 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    95dc:	mov	r0, r4
    95de:	bl	91f4 <SharedSpiCard::spiStop()>
}
    95e2:	mov	r0, r5
    95e4:	add	sp, #16
    95e6:	pop	{r4, r5, r6, pc}

000095e8 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    95e8:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    95ea:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    95ee:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    95f0:	bl	92bc <SharedSpiCard::waitReady(unsigned short)>
    95f4:	mov	r5, r0
    95f6:	cbnz	r0, 9606 <SharedSpiCard::writeStop()+0x1e>
    95f8:	movs	r3, #30
  spiStop();
    95fa:	mov	r0, r4
    95fc:	strb	r3, [r4, #17]
    95fe:	bl	91f4 <SharedSpiCard::spiStop()>
}
    9602:	mov	r0, r5
    9604:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    9606:	movs	r1, #253	; 0xfd
    9608:	adds	r0, r4, #4
    960a:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    960e:	mov	r0, r4
    9610:	bl	91f4 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    9614:	movs	r3, #0
    9616:	strb	r3, [r4, #19]
  return true;
    9618:	b.n	9602 <SharedSpiCard::writeStop()+0x1a>

0000961a <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    961a:	push	{r0, r1, r2, r4, r5, lr}
    961c:	mov	r5, r2
    961e:	mov	r4, r0
    9620:	adds	r0, #4
    9622:	str	r0, [sp, #4]
    9624:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    9628:	mov.w	r2, #512	; 0x200
    962c:	mov	r1, r5
    962e:	ldr	r0, [sp, #4]
    9630:	bl	a852 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    9634:	movs	r1, #255	; 0xff
    9636:	ldr	r0, [sp, #4]
    9638:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    963c:	movs	r1, #255	; 0xff
    963e:	ldr	r0, [sp, #4]
    9640:	bl	a84a <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    9644:	ldr	r0, [sp, #4]
    9646:	bl	a81e <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    964a:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    964c:	and.w	r0, r0, #31
    9650:	cmp	r0, #5
    9652:	beq.n	9664 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    9654:	movs	r3, #32
  spiStop();
    9656:	mov	r0, r4
    9658:	strb	r3, [r4, #17]
    965a:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    965e:	movs	r0, #0
}
    9660:	add	sp, #12
    9662:	pop	{r4, r5, pc}
  return true;
    9664:	movs	r0, #1
    9666:	b.n	9660 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00009668 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    9668:	push	{r0, r1, r4, lr}
    966a:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    966c:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    9670:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    9672:	bl	92bc <SharedSpiCard::waitReady(unsigned short)>
    9676:	ldr	r2, [sp, #4]
    9678:	cbnz	r0, 9688 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    967a:	movs	r3, #36	; 0x24
    967c:	strb	r3, [r4, #17]
  spiStop();
    967e:	mov	r0, r4
    9680:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    9684:	movs	r0, #0
    9686:	b.n	9694 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9688:	movs	r1, #252	; 0xfc
    968a:	mov	r0, r4
    968c:	bl	961a <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9690:	cmp	r0, #0
    9692:	beq.n	967e <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    9694:	add	sp, #8
    9696:	pop	{r4, pc}

00009698 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    9698:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    969a:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    969c:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    969e:	mov	r5, r1
    96a0:	mov	r4, r0
    96a2:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    96a4:	blx	r3
    96a6:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    96a8:	mov.w	r1, #24
    96ac:	mov	r0, r4
    sector <<= 9;
    96ae:	it	ne
    96b0:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    96b2:	mov	r2, r5
    96b4:	bl	92e8 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    96b8:	cbz	r0, 96c8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    96ba:	movs	r3, #13
    96bc:	strb	r3, [r4, #17]
  spiStop();
    96be:	mov	r0, r4
  return false;
    96c0:	movs	r5, #0
  spiStop();
    96c2:	bl	91f4 <SharedSpiCard::spiStop()>
  return false;
    96c6:	b.n	96de <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    96c8:	mov	r2, r6
    96ca:	movs	r1, #254	; 0xfe
    96cc:	mov	r0, r4
    96ce:	bl	961a <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    96d2:	mov	r5, r0
    96d4:	cmp	r0, #0
    96d6:	beq.n	96be <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    96d8:	mov	r0, r4
    96da:	bl	91f4 <SharedSpiCard::spiStop()>
}
    96de:	mov	r0, r5
    96e0:	pop	{r4, r5, r6, pc}

000096e2 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    96e2:	push	{r4}
  if (m_dedicatedSpi) {
    96e4:	ldrb	r4, [r0, #28]
    96e6:	cbz	r4, 96f6 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    96e8:	ldr	r3, [r0, #0]
    96ea:	ldr	r4, [r3, #40]	; 0x28
    96ec:	movs	r3, #1
    96ee:	mov	ip, r4
}
    96f0:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    96f4:	bx	ip
}
    96f6:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    96fa:	b.w	9698 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

000096fe <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    96fe:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9702:	ldr	r5, [sp, #32]
    9704:	mov	r6, r0
    9706:	mov	r4, r1
    9708:	mov	r7, r2
    970a:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    970e:	cmp	r4, r8
    9710:	bne.n	9718 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    9712:	movs	r0, #1
  }
    9714:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    9718:	ldr	r3, [r6, #0]
    971a:	mov	r2, r7
    971c:	mov	r1, r4
    971e:	mov	r0, r6
    9720:	ldr	r3, [r3, #16]
    9722:	add.w	r9, r4, #1
    9726:	blx	r3
    9728:	cmp	r0, #0
    972a:	beq.n	9714 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    972c:	mov	r0, r4
    972e:	ldr	r2, [sp, #36]	; 0x24
    9730:	mov	r1, r7
    9732:	mov	r4, r9
    9734:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    9736:	b.n	970e <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

00009738 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    9738:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    973c:	mov	r5, r0
    973e:	mov	r4, r1
    9740:	mov	r7, r3
    9742:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9744:	cmp	r4, r6
    9746:	bne.n	974c <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    9748:	movs	r0, #1
    974a:	b.n	9766 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    974c:	ldr	r3, [r5, #0]
    974e:	mov	r0, r4
    9750:	ldr	r1, [sp, #24]
    9752:	ldr.w	r8, [r3, #36]	; 0x24
    9756:	blx	r7
    9758:	mov	r1, r4
    975a:	mov	r2, r0
    975c:	mov	r0, r5
    975e:	adds	r4, #1
    9760:	blx	r8
    9762:	cmp	r0, #0
    9764:	bne.n	9744 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    9766:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000976a <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    976a:	movs	r0, #0
    976c:	bx	lr

0000976e <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    976e:	movs	r0, #0
    9770:	bx	lr

00009772 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    9772:	movs	r0, #0
    9774:	bx	lr

00009776 <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    9776:	bx	lr

00009778 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    9778:	ldr	r3, [pc, #28]	; (9798 <sdIrs()+0x20>)
    977a:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    977c:	ldr	r2, [pc, #28]	; (979c <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    977e:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    9780:	ldr	r0, [r3, #48]	; 0x30
    9782:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    9784:	ldr	r2, [r2, #0]
    9786:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    9788:	ldr	r2, [r3, #72]	; 0x48
    978a:	bic.w	r2, r2, #129	; 0x81
    978e:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    9790:	ldr	r3, [pc, #12]	; (97a0 <sdIrs()+0x28>)
    9792:	strb	r1, [r3, #0]
}
    9794:	bx	lr
    9796:	nop
    9798:	.word	0x402c0000
    979c:	.word	0x20021254
    97a0:	.word	0x2002218e

000097a4 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    97a4:	ldr	r3, [pc, #24]	; (97c0 <gpioMux(unsigned char)+0x1c>)
    97a6:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    97aa:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    97ae:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    97b2:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    97b6:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    97ba:	str.w	r0, [r3, #456]	; 0x1c8
}
    97be:	bx	lr
    97c0:	.word	0x401f8000

000097c4 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    97c4:	ldr	r3, [pc, #12]	; (97d4 <isBusyCommandComplete()+0x10>)
    97c6:	ldr	r0, [pc, #16]	; (97d8 <isBusyCommandComplete()+0x14>)
    97c8:	ldr	r3, [r3, #48]	; 0x30
    97ca:	ands	r0, r3
}
    97cc:	clz	r0, r0
    97d0:	lsrs	r0, r0, #5
    97d2:	bx	lr
    97d4:	.word	0x402c0000
    97d8:	.word	0x000f0001

000097dc <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    97dc:	ldr	r3, [pc, #8]	; (97e8 <isBusyCommandInhibit()+0xc>)
    97de:	ldr	r0, [r3, #36]	; 0x24
}
    97e0:	and.w	r0, r0, #1
    97e4:	bx	lr
    97e6:	nop
    97e8:	.word	0x402c0000

000097ec <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    97ec:	ldr	r3, [pc, #12]	; (97fc <isBusyDat()+0x10>)
    97ee:	ldr	r0, [r3, #36]	; 0x24
    97f0:	eor.w	r0, r0, #16777216	; 0x1000000
}
    97f4:	ubfx	r0, r0, #24, #1
    97f8:	bx	lr
    97fa:	nop
    97fc:	.word	0x402c0000

00009800 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9800:	ldr	r3, [pc, #4]	; (9808 <isBusyDMA()+0x8>)
    9802:	ldrb	r0, [r3, #0]
}
    9804:	bx	lr
    9806:	nop
    9808:	.word	0x2002218e

0000980c <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    980c:	ldr	r3, [pc, #12]	; (981c <isBusyFifoRead()+0x10>)
    980e:	ldr	r0, [r3, #36]	; 0x24
    9810:	eor.w	r0, r0, #2048	; 0x800
}
    9814:	ubfx	r0, r0, #11, #1
    9818:	bx	lr
    981a:	nop
    981c:	.word	0x402c0000

00009820 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    9820:	ldr	r3, [pc, #12]	; (9830 <isBusyFifoWrite()+0x10>)
    9822:	ldr	r0, [r3, #36]	; 0x24
    9824:	eor.w	r0, r0, #1024	; 0x400
}
    9828:	ubfx	r0, r0, #10, #1
    982c:	bx	lr
    982e:	nop
    9830:	.word	0x402c0000

00009834 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    9834:	ldr	r3, [pc, #12]	; (9844 <isBusyTransferComplete()+0x10>)
    9836:	ldr	r0, [pc, #16]	; (9848 <isBusyTransferComplete()+0x14>)
    9838:	ldr	r3, [r3, #48]	; 0x30
    983a:	ands	r0, r3
}
    983c:	clz	r0, r0
    9840:	lsrs	r0, r0, #5
    9842:	bx	lr
    9844:	.word	0x402c0000
    9848:	.word	0x117f0002

0000984c <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    984c:	mov.w	r3, #1000	; 0x3e8
    9850:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9852:	ldr	r3, [pc, #140]	; (98e0 <setSdclk(unsigned long)+0x94>)
    9854:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9856:	sub.w	r3, r3, #147456	; 0x24000
    985a:	ldr.w	r1, [r3, #256]	; 0x100
    985e:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9860:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9864:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    9868:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    986a:	udiv	r1, r1, r3
    986e:	ldr	r3, [pc, #116]	; (98e4 <setSdclk(unsigned long)+0x98>)
    9870:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    9874:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    9876:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    987a:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    987c:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    987e:	lsls	r4, r2, #4
    9880:	udiv	r4, r3, r4
    9884:	cmp	r4, r0
    9886:	bls.n	988c <setSdclk(unsigned long)+0x40>
    9888:	subs	r1, #1
    988a:	bne.n	9892 <setSdclk(unsigned long)+0x46>
    988c:	mov	r4, r2
    988e:	movs	r1, #1
    9890:	b.n	989a <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    9892:	lsls	r2, r2, #1
    9894:	b.n	987e <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    9896:	adds	r1, #1
    9898:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    989a:	udiv	r5, r3, r4
    989e:	cmp	r5, r0
    98a0:	bls.n	98aa <setSdclk(unsigned long)+0x5e>
    98a2:	cmp	r1, #16
    98a4:	add.w	r5, r2, r4
    98a8:	bne.n	9896 <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    98aa:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    98ae:	subs	r1, #1
  sdclkfs >>= 1;
    98b0:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    98b2:	muls	r4, r0
    98b4:	ldr	r0, [pc, #48]	; (98e8 <setSdclk(unsigned long)+0x9c>)
    98b6:	udiv	r3, r3, r4
    98ba:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    98bc:	ldr	r0, [pc, #44]	; (98ec <setSdclk(unsigned long)+0xa0>)
    98be:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    98c0:	bic.w	r3, r3, #1044480	; 0xff000
    98c4:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    98c8:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    98cc:	orr.w	r3, r3, r2, lsl #8
    98d0:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    98d4:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    98d6:	ldr	r3, [r0, #36]	; 0x24
    98d8:	lsls	r3, r3, #28
    98da:	bpl.n	98d6 <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    98dc:	pop	{r4, r5, pc}
    98de:	nop
    98e0:	.word	0x400fc000
    98e4:	.word	0x5e69ec00
    98e8:	.word	0x2001f00c
    98ec:	.word	0x402c0000

000098f0 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    98f0:	ldr	r3, [pc, #4]	; (98f8 <SdioCard::errorCode() const+0x8>)
    98f2:	ldrb	r0, [r3, #0]
    98f4:	bx	lr
    98f6:	nop
    98f8:	.word	0x20002268

000098fc <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    98fc:	ldr	r3, [pc, #4]	; (9904 <SdioCard::errorData() const+0x8>)
    98fe:	ldr	r0, [r3, #0]
}
    9900:	bx	lr
    9902:	nop
    9904:	.word	0x20021254

00009908 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    9908:	ldr	r3, [pc, #20]	; (9920 <SdioCard::readCID(CID*)+0x18>)
    990a:	add.w	r2, r3, #16
    990e:	ldr.w	r0, [r3], #4
    9912:	cmp	r3, r2
    9914:	str.w	r0, [r1], #4
    9918:	bne.n	990e <SdioCard::readCID(CID*)+0x6>
  return true;
}
    991a:	movs	r0, #1
    991c:	bx	lr
    991e:	nop
    9920:	.word	0x200220ce

00009924 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    9924:	ldr	r3, [pc, #20]	; (993c <SdioCard::readCSD(csd_t*)+0x18>)
    9926:	add.w	r2, r3, #16
    992a:	ldr.w	r0, [r3], #4
    992e:	cmp	r3, r2
    9930:	str.w	r0, [r1], #4
    9934:	bne.n	992a <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    9936:	movs	r0, #1
    9938:	bx	lr
    993a:	nop
    993c:	.word	0x200220de

00009940 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    9940:	ldr	r3, [pc, #8]	; (994c <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    9942:	movs	r0, #1
  *ocr = m_ocr;
    9944:	ldr	r3, [r3, #0]
    9946:	str	r3, [r1, #0]
}
    9948:	bx	lr
    994a:	nop
    994c:	.word	0x2001f838

00009950 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    9950:	bx	lr
	...

00009954 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    9954:	push	{r3, r4, r5, r6, r7, lr}
    9956:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9958:	ldr	r7, [pc, #24]	; (9974 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    995a:	bl	bdd8 <micros>
    995e:	mov	r6, r0
  while (fcn()) {
    9960:	blx	r5
    9962:	mov	r4, r0
    9964:	cbz	r0, 9970 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9966:	bl	bdd8 <micros>
    996a:	subs	r0, r0, r6
    996c:	cmp	r0, r7
    996e:	bls.n	9960 <waitTimeout(bool (*)())+0xc>
}
    9970:	mov	r0, r4
    9972:	pop	{r3, r4, r5, r6, r7, pc}
    9974:	.word	0x000f4240

00009978 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    9978:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    997c:	ldr	r7, [pc, #44]	; (99ac <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    997e:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9980:	ldr.w	r8, [pc, #44]	; 99b0 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    9984:	str	r0, [r7, #0]
  uint32_t m = micros();
    9986:	bl	bdd8 <micros>
    998a:	mov	r6, r0
  while (fcn()) {
    998c:	blx	r5
    998e:	mov	r4, r0
    9990:	cbnz	r0, 999c <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    9992:	movs	r3, #0
}
    9994:	mov	r0, r4
      m_busyFcn = 0;
    9996:	str	r3, [r7, #0]
}
    9998:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    999c:	bl	bdd8 <micros>
    99a0:	subs	r0, r0, r6
    99a2:	cmp	r0, r8
    99a4:	bhi.n	9992 <yieldTimeout(bool (*)())+0x1a>
    yield();
    99a6:	bl	caa0 <yield>
    99aa:	b.n	998c <yieldTimeout(bool (*)())+0x14>
    99ac:	.word	0x20021250
    99b0:	.word	0x000f4240

000099b4 <SdioCard::~SdioCard()>:
    99b4:	push	{r4, lr}
    99b6:	mov	r4, r0
    99b8:	movs	r1, #12
    99ba:	bl	d004 <operator delete(void*, unsigned int)>
    99be:	mov	r0, r4
    99c0:	pop	{r4, pc}
	...

000099c4 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    99c4:	push	{r3, lr}
    gpioMux(0);
    99c6:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    99c8:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    99cc:	bl	97a4 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    99d0:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    99d4:	ldr	r3, [pc, #24]	; (99f0 <enableGPIO(bool) [clone .part.0]+0x2c>)
    99d6:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    99da:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    99de:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    99e2:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    99e6:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    99ea:	str.w	r2, [r3, #952]	; 0x3b8
}
    99ee:	pop	{r3, pc}
    99f0:	.word	0x401f8000

000099f4 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    99f4:	ldr	r3, [pc, #184]	; (9ab0 <initSDHC()+0xbc>)
    gpioMux(5);
    99f6:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    99f8:	ldr.w	r2, [r3, #256]	; 0x100
    99fc:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    9a00:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9a02:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9a06:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    9a0a:	ldr	r4, [pc, #168]	; (9ab4 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9a0c:	bic.w	r2, r2, #63	; 0x3f
    9a10:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    9a14:	ldr.w	r2, [r3, #256]	; 0x100
    9a18:	orr.w	r2, r2, #24
    9a1c:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9a20:	ldr.w	r2, [r3, #256]	; 0x100
    9a24:	bic.w	r2, r2, #128	; 0x80
    9a28:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    9a2c:	add.w	r3, r3, #147456	; 0x24000
    9a30:	ldr.w	r2, [r3, #128]	; 0x80
    9a34:	orr.w	r2, r2, #12
    9a38:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    9a3c:	ldr	r2, [r3, #36]	; 0x24
    9a3e:	bic.w	r2, r2, #14336	; 0x3800
    9a42:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    9a44:	ldr	r2, [r3, #28]
    9a46:	orr.w	r2, r2, #65536	; 0x10000
    9a4a:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    9a4c:	ldr	r2, [r3, #36]	; 0x24
    9a4e:	orr.w	r2, r2, #2048	; 0x800
    9a52:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    9a54:	bl	97a4 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    9a58:	ldr	r3, [r4, #72]	; 0x48
    9a5a:	orr.w	r3, r3, #2147483648	; 0x80000000
    9a5e:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    9a60:	ldr	r3, [r4, #44]	; 0x2c
    9a62:	orr.w	r3, r3, #16777216	; 0x1000000
    9a66:	orr.w	r3, r3, #32768	; 0x8000
    9a6a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    9a6c:	ldr	r3, [r4, #44]	; 0x2c
    9a6e:	lsls	r2, r3, #7
    9a70:	bmi.n	9a6c <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    9a72:	mov.w	r0, #400	; 0x190
    9a76:	bl	984c <setSdclk(unsigned long)>
  if (enable) {
    9a7a:	bl	99c4 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    9a7e:	ldr	r3, [pc, #56]	; (9ab8 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    9a80:	ldr	r2, [pc, #56]	; (9abc <initSDHC()+0xc8>)
    9a82:	str	r3, [r4, #52]	; 0x34
    9a84:	ldr	r3, [pc, #56]	; (9ac0 <initSDHC()+0xcc>)
    9a86:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    9a8a:	ldr	r3, [pc, #56]	; (9ac4 <initSDHC()+0xd0>)
    9a8c:	movs	r2, #96	; 0x60
    9a8e:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    9a92:	mov.w	r3, #3758153728	; 0xe000e000
    9a96:	mov.w	r2, #16384	; 0x4000
    9a9a:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9a9e:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9aa0:	ldr	r2, [pc, #16]	; (9ab4 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9aa2:	orr.w	r3, r3, #134217728	; 0x8000000
    9aa6:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9aa8:	ldr	r3, [r2, #44]	; 0x2c
    9aaa:	lsls	r3, r3, #4
    9aac:	bmi.n	9aa8 <initSDHC()+0xb4>
}
    9aae:	pop	{r4, pc}
    9ab0:	.word	0x400d8000
    9ab4:	.word	0x402c0000
    9ab8:	.word	0x117f000b
    9abc:	.word	0x00009779
    9ac0:	.word	0x20002400
    9ac4:	.word	0xe000e400

00009ac8 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9ac8:	ldr	r3, [pc, #16]	; (9adc <SdioCard::type() const+0x14>)
    9aca:	ldrb	r3, [r3, #0]
    9acc:	cbz	r3, 9ad8 <SdioCard::type() const+0x10>
    9ace:	ldr	r3, [pc, #16]	; (9ae0 <SdioCard::type() const+0x18>)
    9ad0:	ldrb	r0, [r3, #0]
    9ad2:	adds	r0, #2
    9ad4:	uxtb	r0, r0
    9ad6:	bx	lr
    9ad8:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    9ada:	bx	lr
    9adc:	.word	0x200220cb
    9ae0:	.word	0x200220cc

00009ae4 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9ae4:	push	{r3, r4, r5, lr}
    9ae6:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    9ae8:	ldr	r0, [pc, #80]	; (9b3c <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9aea:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    9aec:	bl	9954 <waitTimeout(bool (*)())>
    9af0:	cbnz	r0, 9b32 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    9af2:	ldr	r3, [pc, #76]	; (9b40 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9af4:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    9af6:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9af8:	bpl.n	9b0a <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    9afa:	ldr	r2, [r3, #72]	; 0x48
    9afc:	bic.w	r2, r2, #255	; 0xff
    9b00:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    9b02:	uxtb	r2, r4
    9b04:	ldr	r1, [r3, #72]	; 0x48
    9b06:	orrs	r2, r1
    9b08:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    9b0a:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    9b0e:	ldr	r5, [pc, #48]	; (9b40 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    9b10:	ldr	r0, [pc, #48]	; (9b44 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    9b12:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    9b14:	bl	9954 <waitTimeout(bool (*)())>
    9b18:	cbnz	r0, 9b32 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    9b1a:	ldr	r2, [r5, #48]	; 0x30
    9b1c:	ldr	r3, [pc, #40]	; (9b48 <cardCommand(unsigned long, unsigned long)+0x64>)
    9b1e:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9b20:	ldr	r2, [r3, #0]
    9b22:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9b24:	ldr	r2, [r3, #0]
    9b26:	lsls	r2, r2, #31
    9b28:	bpl.n	9b32 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    9b2a:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9b2c:	tst.w	r3, #983040	; 0xf0000
    9b30:	beq.n	9b36 <cardCommand(unsigned long, unsigned long)+0x52>
    9b32:	movs	r0, #0
}
    9b34:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    9b36:	movs	r0, #1
    9b38:	b.n	9b34 <cardCommand(unsigned long, unsigned long)+0x50>
    9b3a:	nop
    9b3c:	.word	0x000097dd
    9b40:	.word	0x402c0000
    9b44:	.word	0x000097c5
    9b48:	.word	0x20021254

00009b4c <statusCMD13()>:
static uint32_t statusCMD13() {
    9b4c:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    9b4e:	ldr	r3, [pc, #16]	; (9b60 <statusCMD13()+0x14>)
    9b50:	ldr	r0, [pc, #16]	; (9b64 <statusCMD13()+0x18>)
    9b52:	ldr	r1, [r3, #0]
    9b54:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9b58:	cbz	r0, 9b5e <statusCMD13()+0x12>
    9b5a:	ldr	r3, [pc, #12]	; (9b68 <statusCMD13()+0x1c>)
    9b5c:	ldr	r0, [r3, #16]
}
    9b5e:	pop	{r3, pc}
    9b60:	.word	0x2001f83c
    9b64:	.word	0x0d1a0000
    9b68:	.word	0x402c0000

00009b6c <isBusyCMD13()>:
static bool isBusyCMD13() {
    9b6c:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    9b6e:	bl	9b4c <statusCMD13()>
    9b72:	eor.w	r0, r0, #256	; 0x100
}
    9b76:	ubfx	r0, r0, #8, #1
    9b7a:	pop	{r3, pc}

00009b7c <SdioCard::status()>:
  return statusCMD13();
    9b7c:	b.w	9b4c <statusCMD13()>

00009b80 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    9b80:	ldr	r3, [pc, #76]	; (9bd0 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    9b82:	push	{r4, r5, lr}
    9b84:	mov	r4, r1
    9b86:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9b88:	ldr	r1, [r3, #0]
    9b8a:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9b8e:	cbz	r0, 9bcc <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9b90:	ldr	r3, [pc, #64]	; (9bd4 <readReg16(unsigned long, void*)+0x54>)
    9b92:	add.w	r5, r4, #15
    9b96:	ldr	r2, [r3, #16]
    9b98:	str	r2, [sp, #0]
    9b9a:	ldr	r2, [r3, #20]
    9b9c:	str	r2, [sp, #4]
    9b9e:	ldr	r2, [r3, #24]
    9ba0:	str	r2, [sp, #8]
    9ba2:	ldr	r3, [r3, #28]
    9ba4:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    9ba6:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9ba8:	bic.w	r2, r3, #3
    9bac:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    9bb0:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9bb2:	adds	r2, #16
    9bb4:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    9bb6:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9bb8:	add	r2, sp
    9bba:	ldr.w	r2, [r2, #-16]
    9bbe:	lsr.w	r2, r2, r1
    9bc2:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    9bc6:	bne.n	9ba8 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9bc8:	movs	r3, #0
    9bca:	strb	r3, [r4, #15]
}
    9bcc:	add	sp, #20
    9bce:	pop	{r4, r5, pc}
    9bd0:	.word	0x2001f83c
    9bd4:	.word	0x402c0000

00009bd8 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9bd8:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    9bda:	ldr	r0, [pc, #32]	; (9bfc <waitDmaStatus()+0x24>)
    9bdc:	bl	9978 <yieldTimeout(bool (*)())>
    9be0:	cbnz	r0, 9bf8 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9be2:	ldr	r3, [pc, #28]	; (9c00 <waitDmaStatus()+0x28>)
    9be4:	ldr	r2, [r3, #0]
    9be6:	lsls	r2, r2, #30
    9be8:	bpl.n	9bf6 <waitDmaStatus()+0x1e>
    9bea:	ldr	r2, [r3, #0]
    9bec:	ldr	r3, [pc, #20]	; (9c04 <waitDmaStatus()+0x2c>)
    9bee:	tst	r2, r3
    9bf0:	ite	eq
    9bf2:	moveq	r0, #1
    9bf4:	movne	r0, #0
}
    9bf6:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9bf8:	movs	r0, #0
    9bfa:	b.n	9bf6 <waitDmaStatus()+0x1e>
    9bfc:	.word	0x00009801
    9c00:	.word	0x20021254
    9c04:	.word	0x117f0000

00009c08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9c08:	push	{r3, r4, r5, r6, r7, lr}
    9c0a:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9c0c:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    9c0e:	mov	r7, r0
    9c10:	mov	r4, r1
    9c12:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    9c14:	bne.n	9c18 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    9c16:	cbnz	r5, 9c2a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    9c18:	ldr	r3, [pc, #96]	; (9c7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9c1a:	movs	r2, #37	; 0x25
    9c1c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c1e:	movw	r2, #501	; 0x1f5
    9c22:	ldr	r3, [pc, #92]	; (9c80 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9c24:	str	r2, [r3, #0]
}
    9c26:	movs	r0, #0
    9c28:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    9c2a:	ldr	r0, [pc, #88]	; (9c84 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    9c2c:	bl	9978 <yieldTimeout(bool (*)())>
    9c30:	cbz	r0, 9c40 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9c32:	ldr	r3, [pc, #72]	; (9c7c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9c34:	movs	r2, #10
    9c36:	strb	r2, [r3, #0]
  m_errorLine = line;
    9c38:	mov.w	r2, #504	; 0x1f8
    9c3c:	ldr	r3, [pc, #64]	; (9c80 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    9c3e:	b.n	9c24 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    9c40:	ldr	r3, [pc, #68]	; (9c88 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    9c42:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    9c44:	ldr	r1, [pc, #68]	; (9c8c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    9c46:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9c48:	ldr	r3, [pc, #68]	; (9c90 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    9c4a:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9c4c:	ldr	r3, [pc, #68]	; (9c94 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    9c4e:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    9c50:	and.w	r3, r3, r5, lsl #16
    9c54:	orr.w	r3, r3, #512	; 0x200
    9c58:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9c5a:	ldr	r3, [pc, #60]	; (9c98 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    9c5c:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    9c5e:	ldr	r3, [pc, #60]	; (9c9c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    9c60:	ldrb	r3, [r3, #0]
    9c62:	cbnz	r3, 9c66 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    9c64:	lsls	r4, r4, #9
    9c66:	mov	r1, r4
    9c68:	mov	r0, r7
    9c6a:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9c6e:	cmp	r0, #0
    9c70:	beq.n	9c26 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    9c72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    9c76:	b.w	9bd8 <waitDmaStatus()>
    9c7a:	nop
    9c7c:	.word	0x20002268
    9c80:	.word	0x2001f014
    9c84:	.word	0x00009b6d
    9c88:	.word	0x2002218e
    9c8c:	.word	0x402c0000
    9c90:	.word	0x20021254
    9c94:	.word	0x1fff0000
    9c98:	.word	0x117f0002
    9c9c:	.word	0x200220cc

00009ca0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9ca0:	push	{r3, r4, r5, r6, r7, lr}
    9ca2:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    9ca4:	ldrb	r0, [r0, #8]
    9ca6:	mov	r4, r1
    9ca8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9caa:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9cac:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9cae:	bmi.n	9cce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9cb0:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    9cb2:	cmp	r4, r6
    9cb4:	beq.n	9cd8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    9cb6:	ldr	r3, [r7, #0]
    9cb8:	mov	r2, r5
    9cba:	mov	r1, r4
    9cbc:	mov	r0, r7
    9cbe:	ldr	r3, [r3, #16]
    9cc0:	adds	r4, #1
    9cc2:	add.w	r5, r5, #512	; 0x200
    9cc6:	blx	r3
    9cc8:	cmp	r0, #0
    9cca:	bne.n	9cb2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9ccc:	b.n	9cea <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    9cce:	lsls	r0, r2, #30
    9cd0:	beq.n	9cf6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    9cd2:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9cd4:	cmp	r4, r6
    9cd6:	bne.n	9cdc <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9cd8:	movs	r0, #1
    9cda:	b.n	9cec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9cdc:	ldr	r3, [r7, #0]
    9cde:	mov	r2, r5
    9ce0:	mov	r1, r4
    9ce2:	mov	r0, r7
    9ce4:	ldr	r3, [r3, #16]
    9ce6:	blx	r3
    9ce8:	cbnz	r0, 9cee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    9cea:	movs	r0, #0
}
    9cec:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9cee:	adds	r4, #1
    9cf0:	add.w	r5, r5, #512	; 0x200
    9cf4:	b.n	9cd4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    9cf6:	ldr	r0, [pc, #24]	; (9d10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    9cf8:	bl	9c08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9cfc:	cmp	r0, #0
    9cfe:	bne.n	9cd8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9d00:	ldr	r3, [pc, #16]	; (9d14 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    9d02:	movs	r2, #12
    9d04:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d06:	movw	r2, #929	; 0x3a1
    9d0a:	ldr	r3, [pc, #12]	; (9d18 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9d0c:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9d0e:	b.n	9cec <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9d10:	.word	0x123a0037
    9d14:	.word	0x20002268
    9d18:	.word	0x2001f014

00009d1c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9d1c:	push	{r3, r4, r5, r6, r7, lr}
    9d1e:	mov	r7, r0
    9d20:	ldrb	r0, [r0, #8]
    9d22:	mov	r4, r1
    9d24:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9d26:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9d28:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9d2a:	bmi.n	9d4a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    9d2c:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    9d2e:	cmp	r4, r6
    9d30:	beq.n	9d54 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    9d32:	ldr	r3, [r7, #0]
    9d34:	mov	r2, r5
    9d36:	mov	r1, r4
    9d38:	mov	r0, r7
    9d3a:	ldr	r3, [r3, #36]	; 0x24
    9d3c:	adds	r4, #1
    9d3e:	add.w	r5, r5, #512	; 0x200
    9d42:	blx	r3
    9d44:	cmp	r0, #0
    9d46:	bne.n	9d2e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    9d48:	b.n	9d66 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    9d4a:	lsls	r0, r2, #30
    9d4c:	beq.n	9d72 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    9d4e:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9d50:	cmp	r4, r6
    9d52:	bne.n	9d58 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    9d54:	movs	r0, #1
    9d56:	b.n	9d68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    9d58:	ldr	r3, [r7, #0]
    9d5a:	mov	r2, r5
    9d5c:	mov	r1, r4
    9d5e:	mov	r0, r7
    9d60:	ldr	r3, [r3, #36]	; 0x24
    9d62:	blx	r3
    9d64:	cbnz	r0, 9d6a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    9d66:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    9d68:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    9d6a:	adds	r4, #1
    9d6c:	add.w	r5, r5, #512	; 0x200
    9d70:	b.n	9d50 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    9d72:	ldr	r0, [pc, #24]	; (9d8c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    9d74:	bl	9c08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9d78:	cmp	r0, #0
    9d7a:	bne.n	9d54 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    9d7c:	ldr	r3, [pc, #16]	; (9d90 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    9d7e:	movs	r2, #14
    9d80:	strb	r2, [r3, #0]
  m_errorLine = line;
    9d82:	movw	r2, #1085	; 0x43d
    9d86:	ldr	r3, [pc, #12]	; (9d94 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    9d88:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    9d8a:	b.n	9d68 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9d8c:	.word	0x193a0027
    9d90:	.word	0x20002268
    9d94:	.word	0x2001f014

00009d98 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9d98:	ldr	r2, [pc, #88]	; (9df4 <SdioCard::sectorCount()+0x5c>)
    9d9a:	ldrb	r3, [r2, #0]
    9d9c:	ands.w	r3, r3, #192	; 0xc0
    9da0:	bne.n	9dd4 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9da2:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9da4:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    9da6:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9daa:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9dac:	lsls	r0, r0, #2
    9dae:	orr.w	r0, r0, r3, lsl #10
    9db2:	ldrb	r3, [r2, #8]
    9db4:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9db8:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9dba:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9dbc:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9dc0:	adds	r0, #1
    9dc2:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    9dc6:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9dc8:	orr.w	r3, r3, r1, lsr #7
    9dcc:	add	r3, r2
    9dce:	subs	r3, #7
    9dd0:	lsls	r0, r3
    9dd2:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    9dd4:	cmp	r3, #64	; 0x40
    9dd6:	bne.n	9df0 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9dd8:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9dda:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9ddc:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9dde:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9de2:	add.w	r0, r0, r3, lsl #16
    9de6:	ldrb	r3, [r2, #8]
    9de8:	add.w	r0, r0, r3, lsl #8
    9dec:	lsls	r0, r0, #10
    9dee:	bx	lr
  } else {
    return 0;
    9df0:	movs	r0, #0
}
    9df2:	bx	lr
    9df4:	.word	0x200220de

00009df8 <SdioCard::isBusy()>:
    9df8:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9dfa:	lsls	r3, r3, #31
    9dfc:	bpl.n	9e10 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9dfe:	ldr	r3, [pc, #40]	; (9e28 <SdioCard::isBusy()+0x30>)
    9e00:	ldr	r3, [r3, #0]
    9e02:	cbz	r3, 9e06 <SdioCard::isBusy()+0xe>
    9e04:	bx	r3
    9e06:	ldr	r3, [pc, #36]	; (9e2c <SdioCard::isBusy()+0x34>)
    9e08:	ldrb	r0, [r3, #0]
    9e0a:	cbz	r0, 9e26 <SdioCard::isBusy()+0x2e>
    9e0c:	b.w	9b6c <isBusyCMD13()>
    if (m_transferActive) {
    9e10:	ldr	r3, [pc, #28]	; (9e30 <SdioCard::isBusy()+0x38>)
    9e12:	ldrb	r3, [r3, #0]
    9e14:	cbz	r3, 9e1a <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    9e16:	b.w	9834 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9e1a:	ldr	r3, [pc, #24]	; (9e34 <SdioCard::isBusy()+0x3c>)
    9e1c:	ldr	r0, [r3, #36]	; 0x24
    9e1e:	eor.w	r0, r0, #16777216	; 0x1000000
    9e22:	ubfx	r0, r0, #24, #1
}
    9e26:	bx	lr
    9e28:	.word	0x20021250
    9e2c:	.word	0x200220ca
    9e30:	.word	0x200220cd
    9e34:	.word	0x402c0000

00009e38 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    9e38:	push	{r3, r4, r5, lr}
    9e3a:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    9e3c:	ldr	r2, [pc, #160]	; (9ee0 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    9e3e:	ldrb	r3, [r2, #10]
    9e40:	ands.w	r4, r3, #64	; 0x40
    9e44:	bne.n	9e6c <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    9e46:	and.w	r3, r3, #63	; 0x3f
    9e4a:	ldrb	r2, [r2, #11]
    9e4c:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    9e4e:	orr.w	r3, r3, r2, lsr #7
    9e52:	adds	r2, r5, #1
    9e54:	orrs	r2, r1
    9e56:	tst	r3, r2
    9e58:	beq.n	9e6c <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    9e5a:	ldr	r3, [pc, #136]	; (9ee4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9e5c:	movs	r2, #39	; 0x27
    9e5e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e60:	movw	r2, #770	; 0x302
    9e64:	ldr	r3, [pc, #128]	; (9ee8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9e66:	str	r2, [r3, #0]
}
    9e68:	mov	r0, r4
    9e6a:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    9e6c:	ldr	r3, [pc, #124]	; (9eec <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    9e6e:	ldrb	r3, [r3, #0]
    9e70:	cbnz	r3, 9e76 <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    9e72:	lsls	r1, r1, #9
    lastSector <<= 9;
    9e74:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    9e76:	ldr	r0, [pc, #120]	; (9ef0 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    9e78:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9e7c:	mov	r4, r0
    9e7e:	cbnz	r0, 9e8e <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    9e80:	ldr	r3, [pc, #96]	; (9ee4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9e82:	movs	r2, #15
    9e84:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e86:	movw	r2, #778	; 0x30a
    9e8a:	ldr	r3, [pc, #92]	; (9ee8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9e8c:	b.n	9e66 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9e8e:	mov	r1, r5
    9e90:	ldr	r0, [pc, #96]	; (9ef4 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    9e92:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9e96:	mov	r4, r0
    9e98:	cbnz	r0, 9ea8 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    9e9a:	ldr	r3, [pc, #72]	; (9ee4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9e9c:	movs	r2, #16
    9e9e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ea0:	movw	r2, #781	; 0x30d
    9ea4:	ldr	r3, [pc, #64]	; (9ee8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9ea6:	b.n	9e66 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9ea8:	movs	r1, #0
    9eaa:	ldr	r0, [pc, #76]	; (9ef8 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9eac:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    9eb0:	mov	r4, r0
    9eb2:	cbnz	r0, 9ec2 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    9eb4:	ldr	r3, [pc, #44]	; (9ee4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9eb6:	movs	r2, #17
    9eb8:	strb	r2, [r3, #0]
  m_errorLine = line;
    9eba:	mov.w	r2, #784	; 0x310
    9ebe:	ldr	r3, [pc, #40]	; (9ee8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9ec0:	b.n	9e66 <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    9ec2:	ldr	r0, [pc, #56]	; (9efc <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    9ec4:	bl	9954 <waitTimeout(bool (*)())>
    9ec8:	cmp	r0, #0
    9eca:	beq.n	9e68 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9ecc:	ldr	r3, [pc, #20]	; (9ee4 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9ece:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9ed0:	movs	r4, #0
  m_errorCode = code;
    9ed2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ed4:	movw	r2, #787	; 0x313
    9ed8:	ldr	r3, [pc, #12]	; (9ee8 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9eda:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9edc:	b.n	9e68 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9ede:	nop
    9ee0:	.word	0x200220de
    9ee4:	.word	0x20002268
    9ee8:	.word	0x2001f014
    9eec:	.word	0x200220cc
    9ef0:	.word	0x201a0000
    9ef4:	.word	0x211a0000
    9ef8:	.word	0x261b0000
    9efc:	.word	0x00009b6d

00009f00 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9f00:	push	{r4, lr}
  if (!m_transferActive) {
    9f02:	ldr	r4, [pc, #60]	; (9f40 <waitTransferComplete()+0x40>)
    9f04:	ldrb	r3, [r4, #0]
    9f06:	cbnz	r3, 9f0c <waitTransferComplete()+0xc>
    return true;
    9f08:	movs	r0, #1
}
    9f0a:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9f0c:	ldr	r0, [pc, #52]	; (9f44 <waitTransferComplete()+0x44>)
    9f0e:	bl	9954 <waitTimeout(bool (*)())>
  m_transferActive = false;
    9f12:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    9f14:	ldr	r2, [pc, #48]	; (9f48 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    9f16:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9f18:	ldr	r1, [r2, #48]	; 0x30
    9f1a:	ldr	r3, [pc, #48]	; (9f4c <waitTransferComplete()+0x4c>)
    9f1c:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9f1e:	ldr	r1, [r3, #0]
    9f20:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    9f22:	cbnz	r0, 9f2c <waitTransferComplete()+0x2c>
    9f24:	ldr	r2, [r3, #0]
    9f26:	ldr	r3, [pc, #40]	; (9f50 <waitTransferComplete()+0x50>)
    9f28:	tst	r2, r3
    9f2a:	beq.n	9f08 <waitTransferComplete()+0x8>
  m_errorCode = code;
    9f2c:	ldr	r3, [pc, #36]	; (9f54 <waitTransferComplete()+0x54>)
    9f2e:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9f30:	movs	r0, #0
  m_errorCode = code;
    9f32:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f34:	movw	r2, #634	; 0x27a
    9f38:	ldr	r3, [pc, #28]	; (9f58 <waitTransferComplete()+0x58>)
    9f3a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    9f3c:	b.n	9f0a <waitTransferComplete()+0xa>
    9f3e:	nop
    9f40:	.word	0x200220cd
    9f44:	.word	0x00009835
    9f48:	.word	0x402c0000
    9f4c:	.word	0x20021254
    9f50:	.word	0x117f0000
    9f54:	.word	0x20002268
    9f58:	.word	0x2001f014

00009f5c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9f5c:	push	{r4, r5, r6, r7, lr}
    9f5e:	ldrb	r5, [r0, #8]
    9f60:	sub.w	sp, sp, #516	; 0x204
    9f64:	mov	r4, r0
    9f66:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9f68:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    9f6c:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9f6e:	beq.n	9fa8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    9f70:	lsls	r3, r2, #30
    9f72:	beq.n	9f82 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    9f74:	mov	r1, r6
      ptr = aligned;
    9f76:	mov	r6, sp
      memcpy(aligned, src, 512);
    9f78:	mov.w	r2, #512	; 0x200
    9f7c:	mov	r0, sp
    9f7e:	bl	a8dc <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    9f82:	movs	r3, #1
    9f84:	mov	r2, r6
    9f86:	mov	r1, r7
    9f88:	ldr	r0, [pc, #104]	; (9ff4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9f8a:	bl	9c08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9f8e:	mov	r5, r0
    9f90:	cbnz	r0, 9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    9f92:	ldr	r3, [pc, #100]	; (9ff8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    9f94:	movs	r2, #13
    9f96:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f98:	movw	r2, #1041	; 0x411
    9f9c:	ldr	r3, [pc, #92]	; (9ffc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9f9e:	str	r2, [r3, #0]
}
    9fa0:	mov	r0, r5
    9fa2:	add.w	sp, sp, #516	; 0x204
    9fa6:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    9fa8:	bl	9f00 <waitTransferComplete()>
    9fac:	cmp	r0, #0
    9fae:	beq.n	9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9fb0:	ldrb	r3, [r4, #9]
    9fb2:	cmp	r3, #2
    9fb4:	bne.n	9fbc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    9fb6:	ldr	r3, [r4, #4]
    9fb8:	cmp	r3, r7
    9fba:	beq.n	9fdc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9fbc:	ldr	r3, [r4, #0]
    9fbe:	mov	r0, r4
    9fc0:	ldr	r3, [r3, #32]
    9fc2:	blx	r3
    9fc4:	cmp	r0, #0
    9fc6:	beq.n	9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9fc8:	ldr	r3, [r4, #0]
    9fca:	mov	r1, r7
    9fcc:	mov	r0, r4
    9fce:	ldr	r3, [r3, #96]	; 0x60
    9fd0:	blx	r3
    9fd2:	cmp	r0, #0
    9fd4:	beq.n	9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    9fd6:	movs	r3, #2
      m_curSector = sector;
    9fd8:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9fda:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9fdc:	ldr	r3, [r4, #0]
    9fde:	mov	r1, r6
    9fe0:	mov	r0, r4
    9fe2:	ldr	r3, [r3, #92]	; 0x5c
    9fe4:	blx	r3
    9fe6:	cmp	r0, #0
    9fe8:	beq.n	9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9fea:	ldr	r3, [r4, #4]
  return true;
    9fec:	mov	r5, r0
    m_curSector++;
    9fee:	adds	r3, #1
    9ff0:	str	r3, [r4, #4]
    9ff2:	b.n	9fa0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    9ff4:	.word	0x183a0001
    9ff8:	.word	0x20002268
    9ffc:	.word	0x2001f014

0000a000 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    a000:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a002:	ldr	r4, [pc, #92]	; (a060 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a004:	movs	r1, #0
    a006:	ldr	r0, [pc, #92]	; (a064 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a008:	ldr	r3, [r4, #40]	; 0x28
    a00a:	bic.w	r3, r3, #65536	; 0x10000
    a00e:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a010:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a014:	mov	r5, r0
    a016:	cbnz	r0, a02a <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    a018:	ldr	r3, [pc, #76]	; (a068 <SdioCard::readStop()+0x68>)
    a01a:	movs	r2, #9
    a01c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a01e:	movw	r2, #573	; 0x23d
    a022:	ldr	r3, [pc, #72]	; (a06c <SdioCard::readStop()+0x6c>)
    a024:	str	r2, [r3, #0]
}
    a026:	mov	r0, r5
    a028:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    a02a:	ldr	r0, [pc, #68]	; (a070 <SdioCard::readStop()+0x70>)
    a02c:	bl	9978 <yieldTimeout(bool (*)())>
    a030:	cbz	r0, a044 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    a032:	ldr	r3, [pc, #52]	; (a068 <SdioCard::readStop()+0x68>)
    a034:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a036:	movs	r5, #0
  m_errorCode = code;
    a038:	strb	r2, [r3, #0]
  m_errorLine = line;
    a03a:	mov.w	r2, #576	; 0x240
    a03e:	ldr	r3, [pc, #44]	; (a06c <SdioCard::readStop()+0x6c>)
    a040:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    a042:	b.n	a026 <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    a044:	ldr	r3, [r4, #36]	; 0x24
    a046:	lsls	r3, r3, #30
    a048:	bpl.n	a026 <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    a04a:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a04c:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a04e:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    a050:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    a054:	orr.w	r2, r2, #67108864	; 0x4000000
    a058:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    a05a:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    a05c:	str	r3, [r4, #40]	; 0x28
    a05e:	b.n	a026 <SdioCard::readStop()+0x26>
    a060:	.word	0x402c0000
    a064:	.word	0x0cdb0000
    a068:	.word	0x20002268
    a06c:	.word	0x2001f014
    a070:	.word	0x000097ed

0000a074 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    a074:	push	{r4, r5, r6, lr}
    a076:	mov	r4, r1
  if (!waitTransferComplete()) {
    a078:	bl	9f00 <waitTransferComplete()>
    a07c:	mov	r5, r0
    a07e:	cbz	r0, a0b8 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    a080:	ldr	r3, [pc, #100]	; (a0e8 <SdioCard::writeData(unsigned char const*)+0x74>)
    a082:	ldr	r2, [r3, #36]	; 0x24
    a084:	lsls	r2, r2, #23
    a086:	bmi.n	a098 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a088:	ldr	r2, [r3, #40]	; 0x28
    a08a:	bic.w	r2, r2, #65536	; 0x10000
    a08e:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a090:	ldr	r2, [r3, #40]	; 0x28
    a092:	orr.w	r2, r2, #131072	; 0x20000
    a096:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a098:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    a09a:	ldr	r0, [pc, #80]	; (a0ec <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a09c:	orr.w	r2, r2, #65536	; 0x10000
    a0a0:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    a0a2:	bl	9954 <waitTimeout(bool (*)())>
    a0a6:	cbz	r0, a0bc <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    a0a8:	ldr	r3, [pc, #68]	; (a0f0 <SdioCard::writeData(unsigned char const*)+0x7c>)
    a0aa:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    a0ac:	movs	r5, #0
  m_errorCode = code;
    a0ae:	strb	r2, [r3, #0]
  m_errorLine = line;
    a0b0:	mov.w	r2, #1016	; 0x3f8
    a0b4:	ldr	r3, [pc, #60]	; (a0f4 <SdioCard::writeData(unsigned char const*)+0x80>)
    a0b6:	str	r2, [r3, #0]
}
    a0b8:	mov	r0, r5
    a0ba:	pop	{r4, r5, r6, pc}
    a0bc:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    a0c0:	ldr	r2, [pc, #36]	; (a0e8 <SdioCard::writeData(unsigned char const*)+0x74>)
    a0c2:	ldr	r3, [r2, #36]	; 0x24
    a0c4:	lsls	r3, r3, #21
    a0c6:	bpl.n	a0c2 <SdioCard::writeData(unsigned char const*)+0x4e>
    a0c8:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a0ca:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    a0ce:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a0d2:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    a0d4:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a0d6:	bne.n	a0ce <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    a0d8:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a0da:	cmp	r4, r1
    a0dc:	bne.n	a0c2 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    a0de:	ldr	r3, [pc, #24]	; (a0f8 <SdioCard::writeData(unsigned char const*)+0x84>)
    a0e0:	movs	r2, #1
    a0e2:	strb	r2, [r3, #0]
  return true;
    a0e4:	b.n	a0b8 <SdioCard::writeData(unsigned char const*)+0x44>
    a0e6:	nop
    a0e8:	.word	0x402c0000
    a0ec:	.word	0x00009821
    a0f0:	.word	0x20002268
    a0f4:	.word	0x2001f014
    a0f8:	.word	0x200220cd

0000a0fc <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    a0fc:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a0fe:	ldr	r0, [pc, #80]	; (a150 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    a100:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a102:	bl	9978 <yieldTimeout(bool (*)())>
    a106:	cbz	r0, a11a <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    a108:	ldr	r3, [pc, #72]	; (a154 <SdioCard::writeStart(unsigned long)+0x58>)
    a10a:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a10c:	movs	r0, #0
  m_errorCode = code;
    a10e:	strb	r2, [r3, #0]
  m_errorLine = line;
    a110:	movw	r2, #1099	; 0x44b
    a114:	ldr	r3, [pc, #64]	; (a158 <SdioCard::writeStart(unsigned long)+0x5c>)
    a116:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    a118:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a11a:	ldr	r3, [pc, #64]	; (a15c <SdioCard::writeStart(unsigned long)+0x60>)
    a11c:	ldr	r2, [r3, #40]	; 0x28
    a11e:	bic.w	r2, r2, #65536	; 0x10000
    a122:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a124:	mov.w	r2, #512	; 0x200
    a128:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a12a:	ldr	r3, [pc, #52]	; (a160 <SdioCard::writeStart(unsigned long)+0x64>)
    a12c:	ldrb	r3, [r3, #0]
    a12e:	cbnz	r3, a132 <SdioCard::writeStart(unsigned long)+0x36>
    a130:	lsls	r4, r4, #9
    a132:	mov	r1, r4
    a134:	ldr	r0, [pc, #44]	; (a164 <SdioCard::writeStart(unsigned long)+0x68>)
    a136:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a13a:	cmp	r0, #0
    a13c:	bne.n	a118 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    a13e:	ldr	r3, [pc, #20]	; (a154 <SdioCard::writeStart(unsigned long)+0x58>)
    a140:	movs	r2, #14
    a142:	strb	r2, [r3, #0]
  m_errorLine = line;
    a144:	movw	r2, #1111	; 0x457
    a148:	ldr	r3, [pc, #12]	; (a158 <SdioCard::writeStart(unsigned long)+0x5c>)
    a14a:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    a14c:	b.n	a118 <SdioCard::writeStart(unsigned long)+0x1c>
    a14e:	nop
    a150:	.word	0x00009b6d
    a154:	.word	0x20002268
    a158:	.word	0x2001f014
    a15c:	.word	0x402c0000
    a160:	.word	0x200220cc
    a164:	.word	0x193a0020

0000a168 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a168:	push	{r3, r4, r5, lr}
    a16a:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    a16c:	ldr	r0, [pc, #96]	; (a1d0 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    a16e:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    a170:	bl	9954 <waitTimeout(bool (*)())>
    a174:	cbz	r0, a188 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    a176:	ldr	r3, [pc, #92]	; (a1d4 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a178:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a17a:	movs	r0, #0
  m_errorCode = code;
    a17c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a17e:	mov.w	r2, #408	; 0x198
    a182:	ldr	r3, [pc, #84]	; (a1d8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a184:	str	r2, [r3, #0]
}
    a186:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    a188:	ldr	r3, [pc, #80]	; (a1dc <cardCMD6(unsigned long, unsigned char*)+0x74>)
    a18a:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a18c:	mov	r1, r4
  m_dmaBusy = true;
    a18e:	strb	r2, [r3, #0]
  m_irqstat = 0;
    a190:	ldr	r3, [pc, #76]	; (a1e0 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a192:	ldr	r2, [pc, #80]	; (a1e4 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    a194:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    a196:	ldr	r3, [pc, #80]	; (a1e8 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a198:	ldr	r0, [pc, #80]	; (a1ec <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    a19a:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    a19c:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    a19e:	ldr	r2, [pc, #80]	; (a1f0 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    a1a0:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    a1a2:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a1a6:	cbnz	r0, a1b8 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    a1a8:	ldr	r3, [pc, #40]	; (a1d4 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a1aa:	movs	r2, #4
    a1ac:	strb	r2, [r3, #0]
  m_errorLine = line;
    a1ae:	movw	r2, #415	; 0x19f
    a1b2:	ldr	r3, [pc, #36]	; (a1d8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a1b4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    a1b6:	b.n	a186 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    a1b8:	bl	9bd8 <waitDmaStatus()>
    a1bc:	cmp	r0, #0
    a1be:	bne.n	a186 <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    a1c0:	ldr	r3, [pc, #16]	; (a1d4 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    a1c2:	movs	r2, #37	; 0x25
    a1c4:	strb	r2, [r3, #0]
  m_errorLine = line;
    a1c6:	mov.w	r2, #418	; 0x1a2
    a1ca:	ldr	r3, [pc, #12]	; (a1d8 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    a1cc:	b.n	a1b4 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    a1ce:	nop
    a1d0:	.word	0x00009b6d
    a1d4:	.word	0x20002268
    a1d8:	.word	0x2001f014
    a1dc:	.word	0x2002218e
    a1e0:	.word	0x20021254
    a1e4:	.word	0x00010040
    a1e8:	.word	0x402c0000
    a1ec:	.word	0x063a0011
    a1f0:	.word	0x117f0002

0000a1f4 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    a1f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    a1f8:	movs	r4, #0
  m_initDone = false;
    a1fa:	ldr	r7, [pc, #524]	; (a408 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    a1fc:	ldr	r5, [pc, #524]	; (a40c <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    a1fe:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    a200:	ldr.w	r8, [pc, #584]	; a44c <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    a204:	ldr	r6, [pc, #520]	; (a410 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    a206:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    a208:	strb	r4, [r0, #9]
  m_initDone = false;
    a20a:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    a20c:	strb	r4, [r5, #0]
  m_highCapacity = false;
    a20e:	strb.w	r4, [r8]
  m_version2 = false;
    a212:	strb	r4, [r6, #0]
  initSDHC();
    a214:	bl	99f4 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    a218:	mov	r1, r4
    a21a:	mov	r0, r4
    a21c:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a220:	mov	r4, r0
    a222:	cbnz	r0, a238 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    a224:	movs	r3, #1
  m_errorLine = line;
    a226:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    a22a:	strb	r3, [r5, #0]
  m_errorLine = line;
    a22c:	ldr	r3, [pc, #484]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a22e:	str	r2, [r3, #0]
}
    a230:	mov	r0, r4
    a232:	add	sp, #68	; 0x44
    a234:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a238:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    a23a:	ldr.w	r9, [pc, #532]	; a450 <SdioCard::begin(SdioConfig)+0x25c>
    a23e:	mov.w	r1, #426	; 0x1aa
    a242:	mov	r0, r9
    a244:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a248:	cbz	r0, a26c <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    a24a:	ldr	r3, [pc, #460]	; (a418 <SdioCard::begin(SdioConfig)+0x224>)
    a24c:	ldr	r3, [r3, #16]
    a24e:	cmp.w	r3, #426	; 0x1aa
    a252:	beq.n	a264 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    a254:	movs	r3, #6
  m_errorLine = line;
    a256:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    a25a:	strb	r3, [r5, #0]
  m_errorLine = line;
    a25c:	ldr	r3, [pc, #436]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    a25e:	movs	r4, #0
  m_errorLine = line;
    a260:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    a262:	b.n	a230 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    a264:	movs	r3, #1
    a266:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a268:	ldr	r6, [pc, #432]	; (a41c <SdioCard::begin(SdioConfig)+0x228>)
    a26a:	b.n	a28c <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    a26c:	subs	r4, #1
    a26e:	bne.n	a23e <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    a270:	ldrb	r3, [r6, #0]
    a272:	cmp	r3, #0
    a274:	bne.n	a268 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    a276:	bl	99f4 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    a27a:	mov	r1, r4
    a27c:	mov	r0, r4
    a27e:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    a282:	ldrb	r3, [r6, #0]
    a284:	cmp	r3, #0
    a286:	bne.n	a268 <SdioCard::begin(SdioConfig)+0x74>
    a288:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    a28c:	bl	bdd8 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a290:	ldr.w	r9, [pc, #428]	; a440 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    a294:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a296:	ldr.w	sl, [pc, #444]	; a454 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a29a:	ldr.w	fp, [pc, #444]	; a458 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a29e:	movs	r1, #0
    a2a0:	mov	r0, r9
    a2a2:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a2a6:	cbnz	r0, a2b4 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    a2a8:	movs	r3, #23
  m_errorLine = line;
    a2aa:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    a2ae:	strb	r3, [r5, #0]
  m_errorLine = line;
    a2b0:	ldr	r3, [pc, #352]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a2b2:	b.n	a25e <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a2b4:	mov	r1, r6
    a2b6:	mov	r0, sl
    a2b8:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a2bc:	cmp	r0, #0
    a2be:	beq.n	a2a8 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    a2c0:	bl	bdd8 <micros>
    a2c4:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    a2c6:	cmp	r0, fp
    a2c8:	bhi.n	a2a8 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    a2ca:	ldr	r3, [pc, #332]	; (a418 <SdioCard::begin(SdioConfig)+0x224>)
    a2cc:	ldr	r2, [r3, #16]
    a2ce:	cmp	r2, #0
    a2d0:	bge.n	a29e <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    a2d2:	ldr	r1, [r3, #16]
    a2d4:	ldr	r2, [pc, #328]	; (a420 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a2d6:	ldr	r0, [pc, #332]	; (a424 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    a2d8:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a2da:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    a2dc:	ldr	r3, [r3, #16]
    a2de:	lsls	r2, r3, #1
    m_highCapacity = true;
    a2e0:	itt	mi
    a2e2:	movmi	r3, #1
    a2e4:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    a2e8:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a2ec:	mov	r4, r0
    a2ee:	cbnz	r0, a2fc <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    a2f0:	movs	r3, #2
  m_errorLine = line;
    a2f2:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    a2f6:	strb	r3, [r5, #0]
  m_errorLine = line;
    a2f8:	ldr	r3, [pc, #280]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a2fa:	b.n	a22e <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    a2fc:	movs	r1, #0
    a2fe:	ldr	r0, [pc, #296]	; (a428 <SdioCard::begin(SdioConfig)+0x234>)
    a300:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a304:	mov	r4, r0
    a306:	cbnz	r0, a314 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    a308:	movs	r3, #3
  m_errorLine = line;
    a30a:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    a30e:	strb	r3, [r5, #0]
  m_errorLine = line;
    a310:	ldr	r3, [pc, #256]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a312:	b.n	a22e <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a314:	ldr	r6, [pc, #256]	; (a418 <SdioCard::begin(SdioConfig)+0x224>)
    a316:	ldr.w	r8, [pc, #324]	; a45c <SdioCard::begin(SdioConfig)+0x268>
    a31a:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a31c:	ldr	r1, [pc, #268]	; (a42c <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a31e:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a320:	ldr	r0, [pc, #268]	; (a430 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    a322:	lsls	r3, r3, #16
    a324:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    a328:	bl	9b80 <readReg16(unsigned long, void*)>
    a32c:	mov	r4, r0
    a32e:	cbnz	r0, a33c <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    a330:	movs	r3, #7
  m_errorLine = line;
    a332:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    a336:	strb	r3, [r5, #0]
  m_errorLine = line;
    a338:	ldr	r3, [pc, #216]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a33a:	b.n	a22e <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    a33c:	ldr	r1, [pc, #244]	; (a434 <SdioCard::begin(SdioConfig)+0x240>)
    a33e:	ldr	r0, [pc, #248]	; (a438 <SdioCard::begin(SdioConfig)+0x244>)
    a340:	bl	9b80 <readReg16(unsigned long, void*)>
    a344:	mov	r4, r0
    a346:	cbnz	r0, a354 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    a348:	movs	r3, #8
  m_errorLine = line;
    a34a:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    a34e:	strb	r3, [r5, #0]
  m_errorLine = line;
    a350:	ldr	r3, [pc, #192]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a352:	b.n	a22e <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    a354:	ldr.w	r1, [r8]
    a358:	ldr	r0, [pc, #224]	; (a43c <SdioCard::begin(SdioConfig)+0x248>)
    a35a:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a35e:	mov	r4, r0
    a360:	cbnz	r0, a36e <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    a362:	movs	r3, #5
  m_errorLine = line;
    a364:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    a368:	strb	r3, [r5, #0]
  m_errorLine = line;
    a36a:	ldr	r3, [pc, #168]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a36c:	b.n	a22e <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    a36e:	ldr.w	r1, [r8]
    a372:	ldr	r0, [pc, #204]	; (a440 <SdioCard::begin(SdioConfig)+0x24c>)
    a374:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a378:	cbz	r0, a3c2 <SdioCard::begin(SdioConfig)+0x1ce>
    a37a:	movs	r1, #2
    a37c:	ldr	r0, [pc, #196]	; (a444 <SdioCard::begin(SdioConfig)+0x250>)
    a37e:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a382:	mov	r4, r0
    a384:	cbz	r0, a3c2 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a386:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a388:	mov	r1, sp
    a38a:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    a38e:	bic.w	r3, r3, #6
    a392:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    a394:	ldr	r3, [r6, #40]	; 0x28
    a396:	orr.w	r3, r3, #2
    a39a:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    a39c:	mov.w	r3, #1048592	; 0x100010
    a3a0:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    a3a2:	bl	a168 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a3a6:	cbnz	r0, a3ce <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    a3a8:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    a3ac:	movs	r0, #5
    a3ae:	bl	97a4 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    a3b2:	mov	r0, r2
    a3b4:	bl	984c <setSdclk(unsigned long)>
  if (enable) {
    a3b8:	bl	99c4 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    a3bc:	movs	r3, #1
    a3be:	strb	r3, [r7, #0]
  return true;
    a3c0:	b.n	a230 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    a3c2:	movs	r3, #20
  m_errorLine = line;
    a3c4:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    a3c8:	strb	r3, [r5, #0]
  m_errorLine = line;
    a3ca:	ldr	r3, [pc, #72]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    a3cc:	b.n	a25e <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    a3ce:	ldrb.w	r3, [sp, #13]
    a3d2:	lsls	r3, r3, #30
    a3d4:	bpl.n	a3a8 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    a3d6:	ldr	r6, [pc, #60]	; (a414 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a3d8:	mov	r1, sp
    a3da:	ldr	r0, [pc, #108]	; (a448 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    a3dc:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    a3e0:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    a3e4:	bl	a168 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    a3e8:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    a3ec:	cbz	r0, a3f6 <SdioCard::begin(SdioConfig)+0x202>
    a3ee:	and.w	r3, r3, #15
    a3f2:	cmp	r3, #1
    a3f4:	beq.n	a400 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    a3f6:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    a3fa:	str.w	r8, [r6]
    a3fe:	b.n	a3a8 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    a400:	movw	r2, #50000	; 0xc350
    a404:	b.n	a3ac <SdioCard::begin(SdioConfig)+0x1b8>
    a406:	nop
    a408:	.word	0x200220ca
    a40c:	.word	0x20002268
    a410:	.word	0x200220cb
    a414:	.word	0x2001f014
    a418:	.word	0x402c0000
    a41c:	.word	0x40300000
    a420:	.word	0x2001f838
    a424:	.word	0x02090000
    a428:	.word	0x031a0000
    a42c:	.word	0x200220de
    a430:	.word	0x09090000
    a434:	.word	0x200220ce
    a438:	.word	0x0a090000
    a43c:	.word	0x071b0000
    a440:	.word	0x371a0000
    a444:	.word	0x061a0000
    a448:	.word	0x80fffff1
    a44c:	.word	0x200220cc
    a450:	.word	0x081a0000
    a454:	.word	0x29020000
    a458:	.word	0x000f4240
    a45c:	.word	0x2001f83c

0000a460 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    a460:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a462:	ldr	r3, [pc, #148]	; (a4f8 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    a464:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    a466:	ldr	r2, [r3, #36]	; 0x24
    a468:	lsls	r0, r2, #22
    a46a:	bmi.n	a488 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a46c:	ldr	r2, [r3, #40]	; 0x28
    a46e:	bic.w	r2, r2, #65536	; 0x10000
    a472:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    a474:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    a476:	ldr	r2, [r3, #40]	; 0x28
    a478:	orr.w	r2, r2, #131072	; 0x20000
    a47c:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a47e:	ldr	r2, [r3, #40]	; 0x28
    a480:	orr.w	r2, r2, #65536	; 0x10000
    a484:	str	r2, [r3, #40]	; 0x28
    interrupts();
    a486:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    a488:	ldr	r0, [pc, #112]	; (a4fc <SdioCard::readData(unsigned char*)+0x9c>)
    a48a:	bl	9954 <waitTimeout(bool (*)())>
    a48e:	cbz	r0, a4a2 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    a490:	ldr	r3, [pc, #108]	; (a500 <SdioCard::readData(unsigned char*)+0xa0>)
    a492:	movs	r2, #26
    a494:	strb	r2, [r3, #0]
  m_errorLine = line;
    a496:	movw	r2, #854	; 0x356
    a49a:	ldr	r3, [pc, #104]	; (a504 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    a49c:	movs	r0, #0
  m_errorLine = line;
    a49e:	str	r2, [r3, #0]
}
    a4a0:	pop	{r3, r4, r5, pc}
    a4a2:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    a4a6:	ldr	r5, [pc, #80]	; (a4f8 <SdioCard::readData(unsigned char*)+0x98>)
    a4a8:	ldr	r3, [r5, #36]	; 0x24
    a4aa:	lsls	r1, r3, #20
    a4ac:	bpl.n	a4a8 <SdioCard::readData(unsigned char*)+0x48>
    a4ae:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a4b0:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    a4b4:	ldr	r0, [r5, #32]
    a4b6:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    a4ba:	cmp	r3, r1
    a4bc:	bne.n	a4b4 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    a4be:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    a4c0:	cmp	r4, r2
    a4c2:	bne.n	a4a8 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    a4c4:	ldr	r0, [pc, #64]	; (a508 <SdioCard::readData(unsigned char*)+0xa8>)
    a4c6:	bl	9954 <waitTimeout(bool (*)())>
    a4ca:	cbz	r0, a4da <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    a4cc:	ldr	r3, [pc, #48]	; (a500 <SdioCard::readData(unsigned char*)+0xa0>)
    a4ce:	movs	r2, #29
    a4d0:	strb	r2, [r3, #0]
  m_errorLine = line;
    a4d2:	movw	r2, #865	; 0x361
    a4d6:	ldr	r3, [pc, #44]	; (a504 <SdioCard::readData(unsigned char*)+0xa4>)
    a4d8:	b.n	a49c <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    a4da:	ldr	r2, [r5, #48]	; 0x30
    a4dc:	ldr	r3, [pc, #44]	; (a50c <SdioCard::readData(unsigned char*)+0xac>)
    a4de:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    a4e0:	ldr	r2, [r3, #0]
    a4e2:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    a4e4:	ldr	r2, [r3, #0]
    a4e6:	lsls	r2, r2, #30
    a4e8:	bpl.n	a4a0 <SdioCard::readData(unsigned char*)+0x40>
    a4ea:	ldr	r2, [r3, #0]
    a4ec:	ldr	r3, [pc, #32]	; (a510 <SdioCard::readData(unsigned char*)+0xb0>)
    a4ee:	tst	r2, r3
    a4f0:	ite	eq
    a4f2:	moveq	r0, #1
    a4f4:	movne	r0, #0
    a4f6:	b.n	a4a0 <SdioCard::readData(unsigned char*)+0x40>
    a4f8:	.word	0x402c0000
    a4fc:	.word	0x0000980d
    a500:	.word	0x20002268
    a504:	.word	0x2001f014
    a508:	.word	0x00009835
    a50c:	.word	0x20021254
    a510:	.word	0x117f0000

0000a514 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    a514:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    a516:	ldr	r0, [pc, #80]	; (a568 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    a518:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    a51a:	bl	9978 <yieldTimeout(bool (*)())>
    a51e:	cbz	r0, a532 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    a520:	ldr	r3, [pc, #72]	; (a56c <SdioCard::readStart(unsigned long)+0x58>)
    a522:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    a524:	movs	r0, #0
  m_errorCode = code;
    a526:	strb	r2, [r3, #0]
  m_errorLine = line;
    a528:	movw	r2, #945	; 0x3b1
    a52c:	ldr	r3, [pc, #64]	; (a570 <SdioCard::readStart(unsigned long)+0x5c>)
    a52e:	str	r2, [r3, #0]
}
    a530:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    a532:	ldr	r3, [pc, #64]	; (a574 <SdioCard::readStart(unsigned long)+0x60>)
    a534:	ldr	r2, [r3, #40]	; 0x28
    a536:	orr.w	r2, r2, #65536	; 0x10000
    a53a:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    a53c:	mov.w	r2, #512	; 0x200
    a540:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    a542:	ldr	r3, [pc, #52]	; (a578 <SdioCard::readStart(unsigned long)+0x64>)
    a544:	ldrb	r3, [r3, #0]
    a546:	cbnz	r3, a54a <SdioCard::readStart(unsigned long)+0x36>
    a548:	lsls	r4, r4, #9
    a54a:	mov	r1, r4
    a54c:	ldr	r0, [pc, #44]	; (a57c <SdioCard::readStart(unsigned long)+0x68>)
    a54e:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a552:	cmp	r0, #0
    a554:	bne.n	a530 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    a556:	ldr	r3, [pc, #20]	; (a56c <SdioCard::readStart(unsigned long)+0x58>)
    a558:	movs	r2, #12
    a55a:	strb	r2, [r3, #0]
  m_errorLine = line;
    a55c:	movw	r2, #957	; 0x3bd
    a560:	ldr	r3, [pc, #12]	; (a570 <SdioCard::readStart(unsigned long)+0x5c>)
    a562:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    a564:	b.n	a530 <SdioCard::readStart(unsigned long)+0x1c>
    a566:	nop
    a568:	.word	0x00009b6d
    a56c:	.word	0x20002268
    a570:	.word	0x2001f014
    a574:	.word	0x402c0000
    a578:	.word	0x200220cc
    a57c:	.word	0x123a0030

0000a580 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a580:	push	{r4, r5, r6, r7, lr}
    a582:	ldrb	r5, [r0, #8]
    a584:	sub.w	sp, sp, #516	; 0x204
    a588:	mov	r4, r0
    a58a:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    a58c:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    a590:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    a592:	beq.n	a5d4 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a594:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a596:	ldr	r0, [pc, #132]	; (a61c <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    a598:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    a59c:	ite	eq
    a59e:	moveq	r4, r2
    a5a0:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    a5a2:	mov	r2, r4
    a5a4:	bl	9c08 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    a5a8:	mov	r5, r0
    a5aa:	cbnz	r0, a5c2 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    a5ac:	ldr	r3, [pc, #112]	; (a620 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    a5ae:	movs	r2, #11
    a5b0:	strb	r2, [r3, #0]
  m_errorLine = line;
    a5b2:	mov.w	r2, #884	; 0x374
    a5b6:	ldr	r3, [pc, #108]	; (a624 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    a5b8:	str	r2, [r3, #0]
}
    a5ba:	mov	r0, r5
    a5bc:	add.w	sp, sp, #516	; 0x204
    a5c0:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    a5c2:	cmp	r4, r6
    a5c4:	beq.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    a5c6:	mov.w	r2, #512	; 0x200
    a5ca:	mov	r1, sp
    a5cc:	mov	r0, r6
    a5ce:	bl	a8dc <memcpy>
    a5d2:	b.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    a5d4:	bl	9f00 <waitTransferComplete()>
    a5d8:	cmp	r0, #0
    a5da:	beq.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    a5dc:	ldrb	r3, [r4, #9]
    a5de:	cmp	r3, #1
    a5e0:	bne.n	a5e8 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    a5e2:	ldr	r3, [r4, #4]
    a5e4:	cmp	r3, r7
    a5e6:	beq.n	a606 <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    a5e8:	ldr	r3, [r4, #0]
    a5ea:	mov	r0, r4
    a5ec:	ldr	r3, [r3, #32]
    a5ee:	blx	r3
    a5f0:	cmp	r0, #0
    a5f2:	beq.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    a5f4:	mov	r1, r7
    a5f6:	mov	r0, r4
    a5f8:	bl	a514 <SdioCard::readStart(unsigned long)>
    a5fc:	cmp	r0, #0
    a5fe:	beq.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    a600:	movs	r3, #1
      m_curSector = sector;
    a602:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    a604:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    a606:	mov	r1, r6
    a608:	mov	r0, r4
    a60a:	bl	a460 <SdioCard::readData(unsigned char*)>
    a60e:	cmp	r0, #0
    a610:	beq.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    a612:	ldr	r3, [r4, #4]
  return true;
    a614:	mov	r5, r0
    m_curSector++;
    a616:	adds	r3, #1
    a618:	str	r3, [r4, #4]
    a61a:	b.n	a5ba <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    a61c:	.word	0x113a0011
    a620:	.word	0x20002268
    a624:	.word	0x2001f014

0000a628 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    a628:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a62a:	ldr	r2, [pc, #76]	; (a678 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    a62c:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    a62e:	mov	r6, r1
  m_curState = IDLE_STATE;
    a630:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a632:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a634:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a636:	ldr	r0, [pc, #68]	; (a67c <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    a638:	bic.w	r3, r3, #65536	; 0x10000
    a63c:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    a63e:	bl	9ae4 <cardCommand(unsigned long, unsigned long)>
    a642:	mov	r4, r0
    a644:	cbnz	r0, a658 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    a646:	ldr	r3, [pc, #56]	; (a680 <SdioCard::stopTransmission(bool)+0x58>)
    a648:	movs	r2, #9
    a64a:	strb	r2, [r3, #0]
  m_errorLine = line;
    a64c:	movw	r2, #979	; 0x3d3
    a650:	ldr	r3, [pc, #48]	; (a684 <SdioCard::stopTransmission(bool)+0x5c>)
    a652:	str	r2, [r3, #0]
}
    a654:	mov	r0, r4
    a656:	pop	{r4, r5, r6, pc}
  if (blocking) {
    a658:	cmp	r6, #0
    a65a:	beq.n	a654 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    a65c:	ldr	r0, [pc, #40]	; (a688 <SdioCard::stopTransmission(bool)+0x60>)
    a65e:	bl	9978 <yieldTimeout(bool (*)())>
    a662:	cmp	r0, #0
    a664:	beq.n	a654 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    a666:	ldr	r3, [pc, #24]	; (a680 <SdioCard::stopTransmission(bool)+0x58>)
    a668:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    a66a:	mov	r4, r5
  m_errorCode = code;
    a66c:	strb	r2, [r3, #0]
  m_errorLine = line;
    a66e:	movw	r2, #983	; 0x3d7
    a672:	ldr	r3, [pc, #16]	; (a684 <SdioCard::stopTransmission(bool)+0x5c>)
    a674:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    a676:	b.n	a654 <SdioCard::stopTransmission(bool)+0x2c>
    a678:	.word	0x402c0000
    a67c:	.word	0x0cdb0000
    a680:	.word	0x20002268
    a684:	.word	0x2001f014
    a688:	.word	0x000097ed

0000a68c <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a68c:	push	{r4, lr}
    a68e:	mov	r4, r0
  if (!waitTransferComplete()) {
    a690:	bl	9f00 <waitTransferComplete()>
    a694:	cbz	r0, a6a6 <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    a696:	ldrb	r3, [r4, #9]
    a698:	cbz	r3, a6a6 <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    a69a:	mov	r0, r4
    a69c:	movs	r1, #1
}
    a69e:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a6a2:	b.w	a628 <SdioCard::stopTransmission(bool)>
}
    a6a6:	pop	{r4, pc}

0000a6a8 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    a6a8:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a6aa:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a6ac:	tst.w	r3, #2031616	; 0x1f0000
    a6b0:	beq.n	a6aa <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    a6b2:	ldr	r0, [r0, #116]	; 0x74
	}
    a6b4:	uxtb	r0, r0
    a6b6:	bx	lr

0000a6b8 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    a6b8:	push	{r0, r1, r2, r4, r5, lr}
    a6ba:	add	r3, sp, #8
    a6bc:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    a6c0:	ldrb	r2, [r0, #19]
    a6c2:	mov	r3, r1
    a6c4:	cmp	r2, #0
    a6c6:	beq.n	a73c <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a6c8:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a6ca:	ldrb	r2, [r0, #19]
    a6cc:	lsls	r1, r2, #31
    a6ce:	bpl.n	a6e2 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a6d0:	mov.w	r4, #3758153728	; 0xe000e000
    a6d4:	ldr	r5, [r0, #20]
    a6d6:	ldr.w	r1, [r4, #384]	; 0x180
    a6da:	ands	r1, r5
    a6dc:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a6de:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a6e2:	lsls	r5, r2, #30
    a6e4:	bpl.n	a6f8 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a6e6:	mov.w	r4, #3758153728	; 0xe000e000
    a6ea:	ldr	r5, [r0, #24]
    a6ec:	ldr.w	r1, [r4, #388]	; 0x184
    a6f0:	ands	r1, r5
    a6f2:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a6f4:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a6f8:	lsls	r4, r2, #29
    a6fa:	bpl.n	a70e <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a6fc:	mov.w	r4, #3758153728	; 0xe000e000
    a700:	ldr	r5, [r0, #28]
    a702:	ldr.w	r1, [r4, #392]	; 0x188
    a706:	ands	r1, r5
    a708:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a70a:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a70e:	lsls	r1, r2, #28
    a710:	bpl.n	a724 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a712:	mov.w	r4, #3758153728	; 0xe000e000
    a716:	ldr	r5, [r0, #32]
    a718:	ldr.w	r1, [r4, #396]	; 0x18c
    a71c:	ands	r1, r5
    a71e:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a720:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a724:	lsls	r2, r2, #27
    a726:	bpl.n	a73a <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a728:	mov.w	r1, #3758153728	; 0xe000e000
    a72c:	ldr	r4, [r0, #36]	; 0x24
    a72e:	ldr.w	r2, [r1, #400]	; 0x190
    a732:	ands	r2, r4
    a734:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a736:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    a73a:	cpsie	i
		if (settings.clock() != _clock) {
    a73c:	ldr	r2, [r0, #8]
    a73e:	cmp	r3, r2
    a740:	beq.n	a790 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a742:	ldr	r2, [pc, #112]	; (a7b4 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a744:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a746:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a748:	ldr	r1, [pc, #108]	; (a7b8 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a74a:	ubfx	r4, r2, #4, #2
    a74e:	ubfx	r2, r2, #26, #3
    a752:	ldr.w	r4, [r1, r4, lsl #2]
    a756:	adds	r2, #1
    a758:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a75c:	cbz	r3, a7aa <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a75e:	cmp	r3, r1
    a760:	bhi.n	a77a <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a762:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a766:	udiv	r1, r1, r2
    a76a:	cmp	r3, r1
    a76c:	bcs.n	a770 <SPIClass::beginTransaction(SPISettings)+0xb8>
    a76e:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a770:	cmp.w	r2, #258	; 0x102
    a774:	bcs.n	a77e <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a776:	cmp	r2, #2
    a778:	bhi.n	a782 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a77a:	movs	r3, #0
    a77c:	b.n	a784 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a77e:	movw	r2, #257	; 0x101
				div = d-2;
    a782:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a784:	lsrs	r1, r3, #1
    a786:	lsls	r2, r1, #16
    a788:	orr.w	r2, r2, r1, lsl #8
    a78c:	orrs	r3, r2
    a78e:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a790:	ldr	r3, [r0, #0]
		port().CR = 0;
    a792:	movs	r2, #0
    a794:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a796:	movs	r2, #3
    a798:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    a79a:	ldr	r2, [r0, #12]
    a79c:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a79e:	ldr	r2, [sp, #4]
    a7a0:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a7a2:	movs	r2, #1
    a7a4:	str	r2, [r3, #16]
	}
    a7a6:	add	sp, #12
    a7a8:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a7aa:	cmp	r4, r2
    a7ac:	bcc.n	a784 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a7ae:	mov	r2, r1
    a7b0:	b.n	a76e <SPIClass::beginTransaction(SPISettings)+0xb6>
    a7b2:	nop
    a7b4:	.word	0x400fc000
    a7b8:	.word	0x200005a4

0000a7bc <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a7bc:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a7c0:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a7c2:	ldr	r0, [r0, #0]
    a7c4:	bl	a6b8 <SPIClass::beginTransaction(SPISettings)>
}
    a7c8:	pop	{r3, pc}

0000a7ca <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a7ca:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a7cc:	ldrb	r2, [r3, #19]
    a7ce:	cbz	r2, a816 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a7d0:	lsls	r0, r2, #31
    a7d2:	bpl.n	a7de <SdSpiArduinoDriver::deactivate()+0x14>
    a7d4:	ldr	r0, [r3, #40]	; 0x28
    a7d6:	mov.w	r1, #3758153728	; 0xe000e000
    a7da:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a7de:	lsls	r1, r2, #30
    a7e0:	bpl.n	a7ec <SdSpiArduinoDriver::deactivate()+0x22>
    a7e2:	ldr	r0, [r3, #44]	; 0x2c
    a7e4:	mov.w	r1, #3758153728	; 0xe000e000
    a7e8:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a7ec:	lsls	r0, r2, #29
    a7ee:	bpl.n	a7fa <SdSpiArduinoDriver::deactivate()+0x30>
    a7f0:	ldr	r0, [r3, #48]	; 0x30
    a7f2:	mov.w	r1, #3758153728	; 0xe000e000
    a7f6:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a7fa:	lsls	r1, r2, #28
    a7fc:	bpl.n	a808 <SdSpiArduinoDriver::deactivate()+0x3e>
    a7fe:	ldr	r0, [r3, #52]	; 0x34
    a800:	mov.w	r1, #3758153728	; 0xe000e000
    a804:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a808:	lsls	r2, r2, #27
    a80a:	bpl.n	a816 <SdSpiArduinoDriver::deactivate()+0x4c>
    a80c:	ldr	r2, [r3, #56]	; 0x38
    a80e:	mov.w	r3, #3758153728	; 0xe000e000
    a812:	str.w	r2, [r3, #272]	; 0x110
}
    a816:	bx	lr

0000a818 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a818:	ldr	r0, [r0, #0]
    a81a:	b.w	565e <SPIClass::end()>

0000a81e <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a81e:	ldr	r3, [r0, #0]
    a820:	movs	r1, #255	; 0xff
    a822:	ldr	r0, [r3, #0]
    a824:	b.w	a6a8 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a828 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a828:	push	{r0, r1, r2, r4, r5, lr}
    a82a:	mov	r4, r1
    a82c:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a82e:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a830:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a832:	mov	r0, r4
    a834:	bl	a898 <memset>
		transfer(buf, buf, count);
    a838:	ldr	r0, [r5, #0]
    a83a:	ldr	r3, [sp, #4]
    a83c:	mov	r2, r4
    a83e:	mov	r1, r4
    a840:	bl	5608 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a844:	movs	r0, #0
    a846:	add	sp, #12
    a848:	pop	{r4, r5, pc}

0000a84a <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a84a:	ldr	r3, [r0, #0]
    a84c:	ldr	r0, [r3, #0]
    a84e:	b.w	a6a8 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a852 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a852:	subs	r3, r2, #1
    a854:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a858:	push	{r4, r5, r6, lr}
    a85a:	mov	r6, r0
    a85c:	sub.w	sp, sp, #512	; 0x200
    a860:	mov	r4, r1
    a862:	mov	r5, r2
  if (0 < count && count <= 512) {
    a864:	bcc.n	a87a <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a866:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a868:	cmp	r4, r5
    a86a:	beq.n	a88c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a86c:	ldr	r3, [r6, #0]
    a86e:	ldrb.w	r1, [r4], #1
    a872:	ldr	r0, [r3, #0]
    a874:	bl	a6a8 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a878:	b.n	a868 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a87a:	mov	r0, sp
    a87c:	bl	a8dc <memcpy>
    a880:	mov	r2, sp
    a882:	mov	r3, r5
    a884:	ldr	r0, [r6, #0]
    a886:	mov	r1, r2
    a888:	bl	5608 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a88c:	add.w	sp, sp, #512	; 0x200
    a890:	pop	{r4, r5, r6, pc}

0000a892 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a892:	b.w	c574 <digitalWrite>
	...

0000a898 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a898:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a89a:	cbz	r2, a8d8 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a89c:	cmp	r2, #16
    blt     .L_bytewise
    a89e:	blt.n	a8d0 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a8a0:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a8a4:	cbz	r3, a8b4 <memset+0x1c>
    rsb     r3, #8
    a8a6:	rsb	r3, r3, #8
    subs    r2, r3
    a8aa:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a8ac:	subs	r3, #1
    strb    r1, [r0], #1
    a8ae:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a8b2:	bgt.n	a8ac <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a8b4:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a8b6:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a8ba:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a8be:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a8c0:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a8c2:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a8c4:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a8c8:	bgt.n	a8c2 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a8ca:	ands.w	r2, r2, #7
    beq     .L_done
    a8ce:	beq.n	a8d8 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a8d0:	subs	r2, #1
    strb    r1, [r0], #1
    a8d2:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a8d6:	bgt.n	a8d0 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a8d8:	pop	{r0, pc}
    a8da:	nop

0000a8dc <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a8dc:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a8de:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a8e2:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a8e6:	bne.n	a9c4 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a8e8:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a8ea:	bcc.n	a970 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a8ec:	ldr.w	r3, [r1], #4
    a8f0:	str.w	r3, [r0], #4
    a8f4:	ldr.w	r3, [r1], #4
    a8f8:	str.w	r3, [r0], #4
    a8fc:	ldr.w	r3, [r1], #4
    a900:	str.w	r3, [r0], #4
    a904:	ldr.w	r3, [r1], #4
    a908:	str.w	r3, [r0], #4
    a90c:	ldr.w	r3, [r1], #4
    a910:	str.w	r3, [r0], #4
    a914:	ldr.w	r3, [r1], #4
    a918:	str.w	r3, [r0], #4
    a91c:	ldr.w	r3, [r1], #4
    a920:	str.w	r3, [r0], #4
    a924:	ldr.w	r3, [r1], #4
    a928:	str.w	r3, [r0], #4
    a92c:	ldr.w	r3, [r1], #4
    a930:	str.w	r3, [r0], #4
    a934:	ldr.w	r3, [r1], #4
    a938:	str.w	r3, [r0], #4
    a93c:	ldr.w	r3, [r1], #4
    a940:	str.w	r3, [r0], #4
    a944:	ldr.w	r3, [r1], #4
    a948:	str.w	r3, [r0], #4
    a94c:	ldr.w	r3, [r1], #4
    a950:	str.w	r3, [r0], #4
    a954:	ldr.w	r3, [r1], #4
    a958:	str.w	r3, [r0], #4
    a95c:	ldr.w	r3, [r1], #4
    a960:	str.w	r3, [r0], #4
    a964:	ldr.w	r3, [r1], #4
    a968:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a96c:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a96e:	bcs.n	a8ec <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a970:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a972:	bcc.n	a998 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a974:	ldr.w	r3, [r1], #4
    a978:	str.w	r3, [r0], #4
    a97c:	ldr.w	r3, [r1], #4
    a980:	str.w	r3, [r0], #4
    a984:	ldr.w	r3, [r1], #4
    a988:	str.w	r3, [r0], #4
    a98c:	ldr.w	r3, [r1], #4
    a990:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a994:	subs	r2, #16
	bhs	.Lmid_block_loop
    a996:	bcs.n	a974 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a998:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a99a:	bcc.n	a9a8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a99c:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a9a0:	str.w	r3, [r0], #4
	subs	r2, #4
    a9a4:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a9a6:	bcs.n	a99c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a9a8:	adds	r2, #4
	beq	.Ldone
    a9aa:	beq.n	a9be <memcpy+0xe2>

	lsls	r2, r2, #31
    a9ac:	lsls	r2, r2, #31
	itt ne
    a9ae:	itt	ne
	ldrbne  r3, [r1], #1
    a9b0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a9b4:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a9b8:	bcc.n	a9be <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a9ba:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a9bc:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a9be:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a9c0:	bx	lr
    a9c2:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a9c4:	cmp	r2, #8
	blo	.Lbyte_copy
    a9c6:	bcc.n	a9f0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a9c8:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a9ca:	beq.n	a8e8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a9cc:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a9d0:	beq.n	a8e8 <memcpy+0xc>

	rsb	r3, #4
    a9d2:	rsb	r3, r3, #4
	subs	r2, r3
    a9d6:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a9d8:	lsls	r3, r3, #31
	itt ne
    a9da:	itt	ne
	ldrbne  r3, [r1], #1
    a9dc:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a9e0:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a9e4:	bcc.n	a8e8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a9e6:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a9ea:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a9ee:	b.n	a8e8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a9f0:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a9f2:	bcc.n	a9a8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a9f4:	subs	r2, #1
	ldrb    r3, [r1], #1
    a9f6:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a9fa:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a9fe:	bcs.n	a9f4 <memcpy+0x118>

	ldrb	r3, [r1]
    aa00:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    aa02:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    aa04:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    aa06:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    aa08:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    aa0a:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    aa0c:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    aa0e:	bx	lr

0000aa10 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    aa10:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    aa12:	ldr	r4, [pc, #80]	; (aa64 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    aa14:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    aa18:	ldr	r5, [pc, #76]	; (aa68 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    aa1a:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    aa1e:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    aa22:	ldr	r7, [pc, #72]	; (aa6c <rx_queue_transfer+0x5c>)
    aa24:	add.w	r5, r5, r0, lsl #5
{
    aa28:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    aa2a:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    aa2e:	mov	r1, r4
    aa30:	ldrh	r2, [r7, #0]
    aa32:	mov	r0, r5
    aa34:	bl	bab4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    aa38:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    aa3a:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    aa3c:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    aa40:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    aa44:	adds	r4, #32
	} while (location < end_addr);
    aa46:	cmp	r3, r4
    aa48:	bhi.n	aa40 <rx_queue_transfer+0x30>
	asm("dsb");
    aa4a:	dsb	sy
	asm("isb");
    aa4e:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    aa52:	movs	r0, #3
    aa54:	mov	r1, r5
    aa56:	bl	bb04 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    aa5a:	mov.w	r3, #131072	; 0x20000
    aa5e:	str.w	r3, [r6, #268]	; 0x10c
}
    aa62:	pop	{r3, r4, r5, r6, r7, pc}
    aa64:	.word	0x20003b80
    aa68:	.word	0x20004b80
    aa6c:	.word	0x20021c3e

0000aa70 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    aa70:	ldr	r3, [r0, #4]
    aa72:	ldr	r2, [pc, #136]	; (aafc <rx_event+0x8c>)
    aa74:	ubfx	r3, r3, #16, #15
{
    aa78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    aa7c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    aa7e:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    aa80:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    aa82:	cmp	r4, #0
    aa84:	ble.n	aace <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    aa86:	ldr	r2, [pc, #120]	; (ab00 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    aa88:	uxth.w	sl, r4
		if (head != rx_tail) {
    aa8c:	ldr	r0, [pc, #116]	; (ab04 <rx_event+0x94>)
		uint32_t head = rx_head;
    aa8e:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    aa90:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    aa92:	uxtb	r3, r1
		if (head != rx_tail) {
    aa94:	ldr.w	r8, [pc, #128]	; ab18 <rx_event+0xa8>
    aa98:	cmp	r1, r0
    aa9a:	ldr	r7, [pc, #108]	; (ab08 <rx_event+0x98>)
    aa9c:	ldr	r1, [pc, #108]	; (ab0c <rx_event+0x9c>)
    aa9e:	beq.n	aad8 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    aaa0:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    aaa4:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    aaa8:	rsb	r0, r6, #512	; 0x200
    aaac:	cmp	r4, r0
    aaae:	bhi.n	aad8 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    aab0:	ldr	r3, [pc, #92]	; (ab10 <rx_event+0xa0>)
    aab2:	add.w	r0, r6, r9, lsl #9
    aab6:	mov	r2, r4
				rx_count[ii] = count + len;
    aab8:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    aaba:	add.w	r1, r3, r5, lsl #9
    aabe:	add	r0, r3
    aac0:	bl	a8dc <memcpy>
				rx_available += len;
    aac4:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    aac6:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    aaca:	add	r3, r4
    aacc:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    aace:	mov	r0, r5
	}
}
    aad0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    aad4:	b.w	aa10 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    aad8:	adds	r3, #1
		rx_index[i] = 0;
    aada:	movs	r6, #0
    aadc:	ldr	r0, [pc, #52]	; (ab14 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    aade:	cmp	r3, #9
		rx_count[i] = len;
    aae0:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    aae4:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    aae8:	it	cs
    aaea:	movcs	r3, r6
		rx_list[head] = i;
    aaec:	strb	r5, [r1, r3]
		rx_head = head;
    aaee:	uxtb	r3, r3
    aaf0:	strb	r3, [r2, #0]
		rx_available += len;
    aaf2:	ldr	r3, [r7, #0]
    aaf4:	add	r4, r3
    aaf6:	str	r4, [r7, #0]
}
    aaf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aafc:	.word	0x20021c3e
    ab00:	.word	0x20022297
    ab04:	.word	0x200222a7
    ab08:	.word	0x20021518
    ab0c:	.word	0x20022299
    ab10:	.word	0x20003b80
    ab14:	.word	0x20021c2e
    ab18:	.word	0x20021c1e

0000ab1c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    ab1c:	ldr	r3, [pc, #112]	; (ab90 <usb_serial_flush_callback+0x74>)
{
    ab1e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    ab22:	ldrb	r2, [r3, #0]
    ab24:	and.w	r3, r2, #255	; 0xff
    ab28:	cbnz	r2, ab8a <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    ab2a:	ldr	r2, [pc, #104]	; (ab94 <usb_serial_flush_callback+0x78>)
    ab2c:	ldrb	r2, [r2, #0]
    ab2e:	cbz	r2, ab8a <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    ab30:	ldr	r7, [pc, #100]	; (ab98 <usb_serial_flush_callback+0x7c>)
    ab32:	ldrh	r5, [r7, #0]
    ab34:	cbz	r5, ab8a <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    ab36:	ldr	r6, [pc, #100]	; (ab9c <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    ab38:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    ab3c:	ldr	r1, [pc, #96]	; (aba0 <usb_serial_flush_callback+0x84>)
    ab3e:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ab40:	ldr	r4, [pc, #96]	; (aba4 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    ab42:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    ab46:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    ab4a:	mov	r2, r5
    ab4c:	mov	r0, r8
    ab4e:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    ab50:	add	r5, r4
    ab52:	bl	bab4 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    ab56:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    ab5a:	mov.w	r3, #3758153728	; 0xe000e000
    ab5e:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    ab62:	adds	r4, #32
	} while (location < end_addr);
    ab64:	cmp	r5, r4
    ab66:	bhi.n	ab5e <usb_serial_flush_callback+0x42>
	asm("dsb");
    ab68:	dsb	sy
	asm("isb");
    ab6c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    ab70:	movs	r0, #3
    ab72:	mov	r1, r8
    ab74:	bl	bae0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    ab78:	ldrb	r3, [r6, #0]
    ab7a:	movs	r2, #0
    ab7c:	adds	r3, #1
	tx_available = 0;
    ab7e:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    ab80:	uxtb	r3, r3
    ab82:	cmp	r3, #3
    ab84:	ite	ls
    ab86:	strbls	r3, [r6, #0]
    ab88:	strbhi	r2, [r6, #0]
}
    ab8a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab8e:	nop
    ab90:	.word	0x200222ad
    ab94:	.word	0x200222af
    ab98:	.word	0x20021cc4
    ab9c:	.word	0x200222ab
    aba0:	.word	0x20004d00
    aba4:	.word	0x20004e00

0000aba8 <usb_serial_reset>:
}
    aba8:	bx	lr
	...

0000abac <usb_serial_configure>:
	if (usb_high_speed) {
    abac:	ldr	r3, [pc, #180]	; (ac64 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    abae:	movs	r2, #128	; 0x80
    abb0:	movs	r1, #0
    abb2:	ldr	r0, [pc, #180]	; (ac68 <usb_serial_configure+0xbc>)
{
    abb4:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    abb6:	ldrb	r3, [r3, #0]
	tx_head = 0;
    abb8:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    abba:	ldr	r5, [pc, #176]	; (ac6c <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    abbc:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    abbe:	ldr	r6, [pc, #176]	; (ac70 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    abc0:	ite	eq
    abc2:	moveq	r3, #64	; 0x40
    abc4:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    abc8:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    abca:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    abcc:	bl	a898 <memset>
	tx_head = 0;
    abd0:	ldr	r3, [pc, #160]	; (ac74 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    abd2:	mov.w	r2, #256	; 0x100
    abd6:	mov	r1, r4
    abd8:	ldr	r0, [pc, #156]	; (ac78 <usb_serial_configure+0xcc>)
	tx_head = 0;
    abda:	strb	r4, [r3, #0]
	tx_available = 0;
    abdc:	ldr	r3, [pc, #156]	; (ac7c <usb_serial_configure+0xd0>)
    abde:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    abe0:	bl	a898 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    abe4:	movs	r2, #16
    abe6:	mov	r1, r4
    abe8:	ldr	r0, [pc, #148]	; (ac80 <usb_serial_configure+0xd4>)
    abea:	bl	a898 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    abee:	movs	r2, #16
    abf0:	mov	r1, r4
    abf2:	ldr	r0, [pc, #144]	; (ac84 <usb_serial_configure+0xd8>)
    abf4:	bl	a898 <memset>
	rx_head = 0;
    abf8:	ldr	r3, [pc, #140]	; (ac88 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    abfa:	mov	r2, r4
    abfc:	movs	r1, #16
	rx_head = 0;
    abfe:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ac00:	movs	r0, #2
	rx_tail = 0;
    ac02:	ldr	r3, [pc, #136]	; (ac8c <usb_serial_configure+0xe0>)
    ac04:	strb	r4, [r3, #0]
	rx_available = 0;
    ac06:	ldr	r3, [pc, #136]	; (ac90 <usb_serial_configure+0xe4>)
    ac08:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    ac0a:	mov	r3, r4
    ac0c:	bl	ba74 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    ac10:	ldr	r3, [pc, #128]	; (ac94 <usb_serial_configure+0xe8>)
    ac12:	mov	r2, r4
    ac14:	ldrh	r1, [r6, #0]
    ac16:	movs	r0, #3
    ac18:	bl	ba34 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    ac1c:	mov	r3, r4
    ac1e:	movs	r2, #1
    ac20:	ldrh	r1, [r5, #0]
    ac22:	movs	r0, #3
    ac24:	bl	ba74 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    ac28:	mov	r0, r4
    ac2a:	adds	r4, #1
    ac2c:	bl	aa10 <rx_queue_transfer>
    ac30:	cmp	r4, #8
    ac32:	bne.n	ac28 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    ac34:	ldr	r3, [pc, #96]	; (ac98 <usb_serial_configure+0xec>)
    ac36:	ldr	r2, [pc, #100]	; (ac9c <usb_serial_configure+0xf0>)
    ac38:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    ac3a:	movs	r2, #0
    ac3c:	ldr	r3, [pc, #96]	; (aca0 <usb_serial_configure+0xf4>)
    ac3e:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    ac42:	movs	r2, #74	; 0x4a
    ac44:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    ac48:	ldr.w	r2, [r3, #328]	; 0x148
    ac4c:	orr.w	r2, r2, #16777216	; 0x1000000
    ac50:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    ac54:	ldr	r3, [pc, #76]	; (aca4 <usb_serial_configure+0xf8>)
    ac56:	cbz	r3, ac62 <usb_serial_configure+0xb6>
    ac58:	ldr	r2, [pc, #76]	; (aca8 <usb_serial_configure+0xfc>)
    ac5a:	ldrb	r3, [r2, #0]
    ac5c:	orr.w	r3, r3, #1
    ac60:	strb	r3, [r2, #0]
}
    ac62:	pop	{r4, r5, r6, pc}
    ac64:	.word	0x200222b0
    ac68:	.word	0x20004d00
    ac6c:	.word	0x20021cc6
    ac70:	.word	0x20021c3e
    ac74:	.word	0x200222ab
    ac78:	.word	0x20004b80
    ac7c:	.word	0x20021cc4
    ac80:	.word	0x20021c1e
    ac84:	.word	0x20021c2e
    ac88:	.word	0x20022297
    ac8c:	.word	0x200222a7
    ac90:	.word	0x20021518
    ac94:	.word	0x0000aa71
    ac98:	.word	0x20021be4
    ac9c:	.word	0x0000ab1d
    aca0:	.word	0x402e0000
    aca4:	.word	0x00000000
    aca8:	.word	0x200222b2

0000acac <usb_serial_read>:
{
    acac:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    acb0:	mov.w	r3, #3758153728	; 0xe000e000
    acb4:	mov.w	r2, #131072	; 0x20000
{
    acb8:	mov	r7, r0
    acba:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    acbc:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    acc0:	movs	r5, #0
	uint32_t tail = rx_tail;
    acc2:	ldr	r3, [pc, #160]	; (ad64 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    acc4:	ldr.w	fp, [pc, #176]	; ad78 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    acc8:	ldrb	r4, [r3, #0]
    acca:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    accc:	cmp	r5, r8
    acce:	bcs.n	acd8 <usb_serial_read+0x2c>
    acd0:	ldr	r3, [pc, #148]	; (ad68 <usb_serial_read+0xbc>)
    acd2:	ldrb	r2, [r3, #0]
    acd4:	cmp	r2, r4
    acd6:	bne.n	acec <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    acd8:	mov.w	r3, #3758153728	; 0xe000e000
    acdc:	mov.w	r2, #131072	; 0x20000
}
    ace0:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    ace2:	str.w	r2, [r3, #268]	; 0x10c
}
    ace6:	add	sp, #12
    ace8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    acec:	adds	r4, #1
		uint32_t i = rx_list[tail];
    acee:	ldr	r3, [pc, #124]	; (ad6c <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    acf0:	ldr	r0, [pc, #124]	; (ad70 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    acf2:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    acf6:	cmp	r4, #9
    acf8:	ldr.w	sl, [pc, #128]	; ad7c <usb_serial_read+0xd0>
    acfc:	it	cs
    acfe:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ad00:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    ad04:	ldrh.w	r1, [fp, r9, lsl #1]
    ad08:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ad0c:	ldr	r0, [pc, #100]	; (ad74 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    ad0e:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ad10:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    ad14:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ad16:	add	r1, r0
		if (avail > len) {
    ad18:	bcs.n	ad40 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    ad1a:	mov	r0, r7
    ad1c:	str	r2, [sp, #4]
    ad1e:	bl	a8dc <memcpy>
			rx_available -= len;
    ad22:	ldr.w	r1, [sl]
			rx_index[i] += len;
    ad26:	ldr	r2, [sp, #4]
			rx_available -= len;
    ad28:	sub.w	r1, r1, r8
    ad2c:	add	r1, r5
    ad2e:	mov	r5, r8
    ad30:	str.w	r1, [sl]
			rx_index[i] += len;
    ad34:	ldrh.w	r1, [fp, r9, lsl #1]
    ad38:	add	r2, r1
    ad3a:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    ad3e:	b.n	accc <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    ad40:	mov	r2, r6
    ad42:	mov	r0, r7
    ad44:	bl	a8dc <memcpy>
			rx_available -= avail;
    ad48:	ldr.w	r2, [sl]
			rx_tail = tail;
    ad4c:	ldr	r3, [pc, #20]	; (ad64 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    ad4e:	mov	r0, r9
			rx_available -= avail;
    ad50:	subs	r2, r2, r6
			p += avail;
    ad52:	add	r7, r6
			count += avail;
    ad54:	add	r5, r6
			rx_available -= avail;
    ad56:	str.w	r2, [sl]
			rx_tail = tail;
    ad5a:	uxtb	r2, r4
    ad5c:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    ad5e:	bl	aa10 <rx_queue_transfer>
    ad62:	b.n	accc <usb_serial_read+0x20>
    ad64:	.word	0x200222a7
    ad68:	.word	0x20022297
    ad6c:	.word	0x20022299
    ad70:	.word	0x20021c1e
    ad74:	.word	0x20003b80
    ad78:	.word	0x20021c2e
    ad7c:	.word	0x20021518

0000ad80 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    ad80:	ldr	r3, [pc, #44]	; (adb0 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    ad82:	ldr	r1, [pc, #48]	; (adb4 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    ad84:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    ad86:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    ad88:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    ad8a:	cmp	r2, r1
    ad8c:	beq.n	adaa <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    ad8e:	adds	r3, #1
	uint32_t i = rx_list[tail];
    ad90:	ldr	r2, [pc, #36]	; (adb8 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    ad92:	cmp	r3, #9
    ad94:	it	cs
    ad96:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    ad98:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    ad9a:	ldr	r3, [pc, #32]	; (adbc <usb_serial_peekchar+0x3c>)
    ad9c:	ldrh.w	r1, [r3, r2, lsl #1]
    ada0:	ldr	r3, [pc, #28]	; (adc0 <usb_serial_peekchar+0x40>)
    ada2:	add.w	r3, r3, r2, lsl #9
    ada6:	ldrb	r0, [r3, r1]
    ada8:	bx	lr
	if (tail == rx_head) return -1;
    adaa:	mov.w	r0, #4294967295
}
    adae:	bx	lr
    adb0:	.word	0x200222a7
    adb4:	.word	0x20022297
    adb8:	.word	0x20022299
    adbc:	.word	0x20021c2e
    adc0:	.word	0x20003b80

0000adc4 <usb_serial_available>:
	uint32_t n = rx_available;
    adc4:	ldr	r3, [pc, #12]	; (add4 <usb_serial_available+0x10>)
{
    adc6:	push	{r4, lr}
	uint32_t n = rx_available;
    adc8:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    adca:	cbnz	r4, add0 <usb_serial_available+0xc>
    adcc:	bl	caa0 <yield>
}
    add0:	mov	r0, r4
    add2:	pop	{r4, pc}
    add4:	.word	0x20021518

0000add8 <usb_serial_flush_input>:
{
    add8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    addc:	ldr	r5, [pc, #64]	; (ae20 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    adde:	ldr	r7, [pc, #68]	; (ae24 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    ade0:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    ade2:	ldr.w	r8, [pc, #80]	; ae34 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    ade6:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    ade8:	ldr	r6, [pc, #60]	; (ae28 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    adea:	ldrb	r3, [r7, #0]
    adec:	cmp	r3, r4
    adee:	bne.n	adf4 <usb_serial_flush_input+0x1c>
}
    adf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    adf4:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    adf6:	ldr	r2, [pc, #52]	; (ae2c <usb_serial_flush_input+0x54>)
    adf8:	ldr	r1, [pc, #52]	; (ae30 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    adfa:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    adfc:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    adfe:	it	cs
    ae00:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    ae02:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    ae06:	ldrh.w	r2, [r2, r0, lsl #1]
    ae0a:	ldrh.w	r1, [r1, r0, lsl #1]
    ae0e:	subs	r2, r2, r1
    ae10:	subs	r3, r3, r2
    ae12:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    ae14:	bl	aa10 <rx_queue_transfer>
		rx_tail = tail;
    ae18:	uxtb	r3, r4
    ae1a:	strb	r3, [r5, #0]
    ae1c:	b.n	adea <usb_serial_flush_input+0x12>
    ae1e:	nop
    ae20:	.word	0x200222a7
    ae24:	.word	0x20022297
    ae28:	.word	0x20021518
    ae2c:	.word	0x20021c1e
    ae30:	.word	0x20021c2e
    ae34:	.word	0x20022299

0000ae38 <usb_serial_getchar>:
{
    ae38:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    ae3a:	movs	r1, #1
    ae3c:	add.w	r0, sp, #7
    ae40:	bl	acac <usb_serial_read>
    ae44:	cbz	r0, ae50 <usb_serial_getchar+0x18>
    ae46:	ldrb.w	r0, [sp, #7]
}
    ae4a:	add	sp, #12
    ae4c:	ldr.w	pc, [sp], #4
	return -1;
    ae50:	mov.w	r0, #4294967295
    ae54:	b.n	ae4a <usb_serial_getchar+0x12>
	...

0000ae58 <usb_serial_write>:
	if (!usb_configuration) return 0;
    ae58:	ldr	r3, [pc, #356]	; (afc0 <usb_serial_write+0x168>)
{
    ae5a:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    ae5e:	ldrb	r3, [r3, #0]
{
    ae60:	mov	r6, r0
    ae62:	mov	r5, r1
	if (!usb_configuration) return 0;
    ae64:	and.w	r4, r3, #255	; 0xff
    ae68:	cmp	r3, #0
    ae6a:	beq.w	af7e <usb_serial_write+0x126>
	uint32_t sent=0;
    ae6e:	movs	r4, #0
		tx_noautoflush = 1;
    ae70:	ldr.w	fp, [pc, #360]	; afdc <usb_serial_write+0x184>
	while (size > 0) {
    ae74:	cmp	r5, #0
    ae76:	beq.w	af7e <usb_serial_write+0x126>
		tx_noautoflush = 1;
    ae7a:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    ae7c:	ldr.w	r9, [pc, #352]	; afe0 <usb_serial_write+0x188>
		while (!tx_available) {
    ae80:	ldr	r7, [pc, #320]	; (afc4 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    ae82:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    ae86:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    ae8a:	ldr	r3, [pc, #316]	; (afc8 <usb_serial_write+0x170>)
    ae8c:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    ae90:	movs	r3, #0
		int waiting=0;
    ae92:	mov	r8, r3
		while (!tx_available) {
    ae94:	ldrh	r1, [r7, #0]
    ae96:	cbnz	r1, aeb6 <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    ae98:	mov	r0, sl
    ae9a:	strd	r3, r1, [sp]
    ae9e:	bl	bb20 <usb_transfer_status>
			if (!(status & 0x80)) {
    aea2:	ands.w	r0, r0, #128	; 0x80
    aea6:	ldr	r2, [pc, #292]	; (afcc <usb_serial_write+0x174>)
    aea8:	ldrd	r3, r1, [sp]
    aeac:	bne.n	af5a <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    aeae:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    aeb2:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    aeb4:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aeb6:	ldrh.w	r8, [r7]
    aeba:	ldrb.w	r3, [r9]
    aebe:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    aec2:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    aec4:	mov.w	r2, r3, lsl #11
    aec8:	add.w	r0, r0, r3, lsl #11
    aecc:	ldr	r3, [pc, #256]	; (afd0 <usb_serial_write+0x178>)
    aece:	str	r2, [sp, #0]
    aed0:	add	r0, r3
		if (size >= tx_available) {
    aed2:	bhi.n	afa0 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    aed4:	mov	r2, r8
    aed6:	mov	r1, r6
    aed8:	bl	a8dc <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aedc:	ldr	r2, [sp, #0]
    aede:	ldr	r3, [pc, #240]	; (afd0 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    aee0:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aee2:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    aee4:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    aee6:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    aee8:	mov.w	r2, #2048	; 0x800
    aeec:	mov	r1, r8
    aeee:	bl	bab4 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aef2:	mov	r1, r8
	asm("dsb");
    aef4:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    aef8:	add.w	r2, r8, #2048	; 0x800
    aefc:	add.w	r3, r8, #32
    af00:	cmp	r3, r2
    af02:	ite	hi
    af04:	movhi	r3, #1
    af06:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    af08:	mov.w	r2, #3758153728	; 0xe000e000
    af0c:	add.w	r3, r8, r3, lsl #5
    af10:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    af14:	adds	r1, #32
	} while (location < end_addr);
    af16:	cmp	r1, r3
    af18:	bne.n	af10 <usb_serial_write+0xb8>
	asm("dsb");
    af1a:	dsb	sy
	asm("isb");
    af1e:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    af22:	movs	r0, #3
    af24:	mov	r1, sl
    af26:	bl	bae0 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    af2a:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    af2e:	ldr	r2, [pc, #164]	; (afd4 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    af30:	adds	r3, #1
    af32:	uxtb	r3, r3
    af34:	cmp	r3, #3
    af36:	it	hi
    af38:	movhi	r3, #0
    af3a:	strb.w	r3, [r9]
			size -= tx_available;
    af3e:	ldrh	r3, [r7, #0]
    af40:	subs	r5, r5, r3
			sent += tx_available;
    af42:	add	r4, r3
			data += tx_available;
    af44:	add	r6, r3
			tx_available = 0;
    af46:	movs	r3, #0
    af48:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    af4a:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    af4e:	dsb	sy
		tx_noautoflush = 0;
    af52:	movs	r3, #0
    af54:	strb.w	r3, [fp]
    af58:	b.n	ae74 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    af5a:	dsb	sy
			tx_noautoflush = 0;
    af5e:	strb.w	r1, [fp]
			if (!waiting) {
    af62:	cmp.w	r8, #0
    af66:	bne.n	af6c <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    af68:	ldr	r3, [pc, #108]	; (afd8 <usb_serial_write+0x180>)
    af6a:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    af6c:	ldrb	r1, [r2, #0]
    af6e:	cbnz	r1, af7e <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    af70:	ldr	r1, [pc, #100]	; (afd8 <usb_serial_write+0x180>)
    af72:	ldr	r1, [r1, #0]
    af74:	subs	r1, r1, r3
    af76:	cmp	r1, #120	; 0x78
    af78:	bls.n	af86 <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    af7a:	movs	r3, #1
    af7c:	strb	r3, [r2, #0]
}
    af7e:	mov	r0, r4
    af80:	add	sp, #12
    af82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    af86:	ldr	r1, [pc, #56]	; (afc0 <usb_serial_write+0x168>)
    af88:	ldrb	r1, [r1, #0]
    af8a:	cmp	r1, #0
    af8c:	beq.n	af7e <usb_serial_write+0x126>
			tx_noautoflush = 1;
    af8e:	mov.w	r8, #1
    af92:	str	r3, [sp, #0]
			yield();
    af94:	bl	caa0 <yield>
			tx_noautoflush = 1;
    af98:	ldr	r3, [sp, #0]
    af9a:	strb.w	r8, [fp]
    af9e:	b.n	ae94 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    afa0:	mov	r2, r5
    afa2:	mov	r1, r6
    afa4:	bl	a8dc <memcpy>
			tx_available -= size;
    afa8:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    afac:	ldr	r3, [pc, #36]	; (afd4 <usb_serial_write+0x17c>)
    afae:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    afb2:	add	r4, r5
			tx_available -= size;
    afb4:	strh.w	r8, [r7]
			size = 0;
    afb8:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    afba:	str.w	r2, [r3, #132]	; 0x84
}
    afbe:	b.n	af4e <usb_serial_write+0xf6>
    afc0:	.word	0x200222af
    afc4:	.word	0x20021cc4
    afc8:	.word	0x20004d00
    afcc:	.word	0x200222aa
    afd0:	.word	0x20004e00
    afd4:	.word	0x402e0000
    afd8:	.word	0x20021bd0
    afdc:	.word	0x200222ad
    afe0:	.word	0x200222ab

0000afe4 <usb_serial_putchar>:
{
    afe4:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    afe6:	movs	r1, #1
{
    afe8:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    afec:	add.w	r0, sp, #7
    aff0:	bl	ae58 <usb_serial_write>
}
    aff4:	add	sp, #12
    aff6:	ldr.w	pc, [sp], #4
	...

0000affc <usb_serial_write_buffer_free>:
{
    affc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    b000:	movs	r4, #0
	tx_noautoflush = 1;
    b002:	ldr	r7, [pc, #56]	; (b03c <usb_serial_write_buffer_free+0x40>)
    b004:	movs	r3, #1
    b006:	ldr	r6, [pc, #56]	; (b040 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    b008:	mov	r5, r4
		if (i == tx_head) continue;
    b00a:	ldr.w	r8, [pc, #56]	; b044 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    b00e:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    b010:	ldrb.w	r3, [r8]
    b014:	cmp	r3, r4
    b016:	beq.n	b026 <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    b018:	mov	r0, r6
    b01a:	bl	bb20 <usb_transfer_status>
    b01e:	lsls	r3, r0, #24
    b020:	it	pl
    b022:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    b026:	adds	r4, #1
    b028:	adds	r6, #32
    b02a:	cmp	r4, #4
    b02c:	bne.n	b010 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    b02e:	dsb	sy
	tx_noautoflush = 0;
    b032:	movs	r3, #0
}
    b034:	mov	r0, r5
	tx_noautoflush = 0;
    b036:	strb	r3, [r7, #0]
}
    b038:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b03c:	.word	0x200222ad
    b040:	.word	0x20004d00
    b044:	.word	0x200222ab

0000b048 <usb_serial_flush_output>:
{
    b048:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    b04c:	ldr	r3, [pc, #116]	; (b0c4 <usb_serial_flush_output+0x7c>)
    b04e:	ldrb	r3, [r3, #0]
    b050:	cbz	r3, b0c0 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    b052:	ldr.w	r8, [pc, #132]	; b0d8 <usb_serial_flush_output+0x90>
    b056:	ldrh.w	r5, [r8]
    b05a:	cbz	r5, b0c0 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    b05c:	ldr	r7, [pc, #104]	; (b0c8 <usb_serial_flush_output+0x80>)
    b05e:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    b060:	ldr	r6, [pc, #104]	; (b0cc <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    b062:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    b066:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    b068:	ldr	r2, [pc, #100]	; (b0d0 <usb_serial_flush_output+0x88>)
    b06a:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b06c:	ldr	r4, [pc, #100]	; (b0d4 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    b06e:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b072:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    b074:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    b078:	movs	r3, #0
    b07a:	mov	r0, r9
    b07c:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    b07e:	add	r5, r4
    b080:	bl	bab4 <usb_prepare_transfer>
	asm("dsb");
    b084:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b088:	mov.w	r3, #3758153728	; 0xe000e000
    b08c:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    b090:	adds	r4, #32
	} while (location < end_addr);
    b092:	cmp	r5, r4
    b094:	bhi.n	b08c <usb_serial_flush_output+0x44>
	asm("dsb");
    b096:	dsb	sy
	asm("isb");
    b09a:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    b09e:	movs	r0, #3
    b0a0:	mov	r1, r9
    b0a2:	bl	bae0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b0a6:	ldrb	r3, [r6, #0]
    b0a8:	movs	r2, #0
    b0aa:	adds	r3, #1
	tx_available = 0;
    b0ac:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    b0b0:	uxtb	r3, r3
    b0b2:	cmp	r3, #3
    b0b4:	ite	ls
    b0b6:	strbls	r3, [r6, #0]
    b0b8:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    b0ba:	dsb	sy
	tx_noautoflush = 0;
    b0be:	strb	r2, [r7, #0]
}
    b0c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b0c4:	.word	0x200222af
    b0c8:	.word	0x200222ad
    b0cc:	.word	0x200222ab
    b0d0:	.word	0x20004d00
    b0d4:	.word	0x20004e00
    b0d8:	.word	0x20021cc4

0000b0dc <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b0dc:	ldr	r3, [pc, #512]	; (b2e0 <set_arm_clock+0x204>)
{
    b0de:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    b0e0:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    b0e2:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    b0e4:	sub.w	r3, r3, #507904	; 0x7c000
    b0e8:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    b0ea:	ldr	r3, [pc, #504]	; (b2e4 <set_arm_clock+0x208>)
    b0ec:	cmp	r0, r3
    b0ee:	bls.w	b2b0 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    b0f2:	ldr	r3, [pc, #500]	; (b2e8 <set_arm_clock+0x20c>)
    b0f4:	cmp	r0, r3
    b0f6:	bls.w	b2c2 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    b0fa:	ldr	r2, [pc, #496]	; (b2ec <set_arm_clock+0x210>)
    b0fc:	subs	r3, r0, r3
    b0fe:	udiv	r3, r3, r2
    b102:	movs	r2, #25
    b104:	muls	r3, r2
    b106:	movw	r2, #1575	; 0x627
    b10a:	addw	r3, r3, #1250	; 0x4e2
    b10e:	cmp	r3, r2
    b110:	it	cs
    b112:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b114:	ldr	r6, [pc, #456]	; (b2e0 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b116:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    b11a:	ldr.w	r2, [r6, #128]	; 0x80
    b11e:	orr.w	r2, r2, #192	; 0xc0
    b122:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    b126:	movs	r2, #25
    b128:	udiv	r2, r3, r2
    b12c:	and.w	r3, r4, #31
    b130:	cmp	r3, r2
    b132:	bcs.n	b144 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b134:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b138:	ldr	r3, [pc, #436]	; (b2f0 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b13a:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    b13c:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b13e:	ldr	r6, [r3, #0]
    b140:	cmp	r6, #0
    b142:	bge.n	b13e <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    b144:	ands.w	r3, r1, #33554432	; 0x2000000
    b148:	bne.n	b19c <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    b14a:	ldr	r6, [pc, #424]	; (b2f4 <set_arm_clock+0x218>)
    b14c:	ldr	r7, [pc, #424]	; (b2f8 <set_arm_clock+0x21c>)
    b14e:	ldr	r6, [r6, #16]
    b150:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    b152:	cmp	r6, r7
    b154:	itee	eq
    b156:	moveq	r6, #3
    b158:	movne	r6, #0
    b15a:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    b15c:	lsls	r7, r6, #27
    b15e:	eor.w	r6, r1, r6, lsl #27
    b162:	tst.w	r6, #939524096	; 0x38000000
    b166:	beq.n	b172 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    b168:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    b16c:	ldr	r6, [pc, #368]	; (b2e0 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    b16e:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    b170:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    b172:	lsls	r6, r3, #12
    b174:	eor.w	r3, r5, r3, lsl #12
    b178:	tst.w	r3, #12288	; 0x3000
    b17c:	beq.n	b18e <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    b17e:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    b182:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    b184:	ldr	r5, [pc, #344]	; (b2e0 <set_arm_clock+0x204>)
    b186:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    b188:	ldr	r3, [r5, #72]	; 0x48
    b18a:	lsls	r6, r3, #28
    b18c:	bmi.n	b188 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    b18e:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    b192:	ldr	r3, [pc, #332]	; (b2e0 <set_arm_clock+0x204>)
    b194:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b196:	ldr	r5, [r3, #72]	; 0x48
    b198:	lsls	r5, r5, #26
    b19a:	bmi.n	b196 <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    b19c:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    b19e:	ldr	r7, [pc, #348]	; (b2fc <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    b1a0:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    b1a2:	mul.w	r3, r6, r5
    b1a6:	muls	r3, r0
    b1a8:	cmp	r3, r7
    b1aa:	bls.w	b2c8 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b1ae:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    b1b2:	ldr	r0, [pc, #332]	; (b300 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b1b4:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    b1b8:	cmp	r3, r0
    b1ba:	ldr	r0, [pc, #328]	; (b304 <set_arm_clock+0x228>)
    b1bc:	bhi.w	b2dc <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    b1c0:	udiv	r3, r3, r0
    b1c4:	cmp	r3, #54	; 0x36
    b1c6:	it	cc
    b1c8:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b1ca:	ldr	r7, [pc, #296]	; (b2f4 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    b1cc:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b1ce:	ldr.w	lr, [pc, #344]	; b328 <set_arm_clock+0x24c>
    b1d2:	ldr.w	ip, [r7]
    b1d6:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b1da:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    b1de:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    b1e2:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b1e6:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    b1e8:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    b1ec:	beq.n	b202 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b1ee:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    b1f2:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    b1f6:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    b1fa:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    b1fc:	ldr	r3, [r7, #0]
    b1fe:	cmp	r3, #0
    b200:	bge.n	b1fc <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    b202:	ldr	r3, [pc, #220]	; (b2e0 <set_arm_clock+0x204>)
    b204:	subs	r5, #1
    b206:	ldr	r7, [r3, #16]
    b208:	and.w	r7, r7, #7
    b20c:	cmp	r7, r5
    b20e:	beq.n	b218 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    b210:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    b212:	ldr	r5, [r3, #72]	; 0x48
    b214:	lsls	r7, r5, #15
    b216:	bmi.n	b212 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    b218:	subs	r3, r6, #1
    b21a:	lsls	r5, r3, #10
    b21c:	eor.w	r3, r1, r3, lsl #10
    b220:	tst.w	r3, #7168	; 0x1c00
    b224:	beq.n	b23a <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b226:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    b22a:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    b22e:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    b230:	ldr	r3, [pc, #172]	; (b2e0 <set_arm_clock+0x204>)
    b232:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    b234:	ldr	r5, [r3, #72]	; 0x48
    b236:	lsls	r5, r5, #30
    b238:	bmi.n	b234 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b23a:	ldr	r3, [pc, #204]	; (b308 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    b23c:	ldr	r5, [pc, #204]	; (b30c <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b23e:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    b240:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b242:	itet	ls
    b244:	ldrls	r5, [pc, #200]	; (b310 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    b246:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    b248:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    b24c:	subs	r6, r3, #1
    b24e:	lsls	r5, r6, #8
    b250:	eor.w	r6, r1, r6, lsl #8
    b254:	tst.w	r6, #768	; 0x300
    b258:	ldr	r6, [pc, #132]	; (b2e0 <set_arm_clock+0x204>)
    b25a:	beq.n	b268 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    b25c:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    b260:	and.w	r5, r5, #768	; 0x300
    b264:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    b266:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b268:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b26a:	ldr	r5, [pc, #116]	; (b2e0 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    b26c:	bic.w	r1, r1, #33554432	; 0x2000000
    b270:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    b272:	ldr	r1, [r5, #72]	; 0x48
    b274:	lsls	r1, r1, #26
    b276:	bmi.n	b272 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    b278:	ldr	r1, [pc, #152]	; (b314 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    b27a:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    b27e:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    b280:	ldr	r1, [pc, #148]	; (b318 <set_arm_clock+0x23c>)
    b282:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    b284:	mov.w	r3, #4294967295
    b288:	ldr	r1, [pc, #144]	; (b31c <set_arm_clock+0x240>)
    b28a:	udiv	r1, r0, r1
    b28e:	udiv	r3, r3, r1
    b292:	ldr	r1, [pc, #140]	; (b320 <set_arm_clock+0x244>)
    b294:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    b296:	and.w	r3, r4, #31
    b29a:	cmp	r2, r3
    b29c:	bcs.n	b2ae <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    b29e:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    b2a2:	ldr	r3, [pc, #76]	; (b2f0 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    b2a4:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    b2a6:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    b2a8:	ldr	r2, [r3, #0]
    b2aa:	cmp	r2, #0
    b2ac:	bge.n	b2a8 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    b2ae:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    b2b0:	ldr	r6, [pc, #112]	; (b324 <set_arm_clock+0x248>)
    b2b2:	movw	r3, #1150	; 0x47e
    b2b6:	movw	r2, #950	; 0x3b6
    b2ba:	cmp	r0, r6
    b2bc:	it	ls
    b2be:	movls	r3, r2
    b2c0:	b.n	b114 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    b2c2:	movw	r3, #1250	; 0x4e2
    b2c6:	b.n	b114 <set_arm_clock+0x38>
		if (div_arm < 8) {
    b2c8:	cmp	r5, #8
    b2ca:	beq.n	b2d0 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    b2cc:	adds	r5, #1
    b2ce:	b.n	b1a2 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    b2d0:	cmp	r6, #4
    b2d2:	bhi.w	b1ae <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    b2d6:	adds	r6, #1
				div_arm = 1;
    b2d8:	movs	r5, #1
    b2da:	b.n	b1a2 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    b2dc:	movs	r3, #108	; 0x6c
    b2de:	b.n	b1ca <set_arm_clock+0xee>
    b2e0:	.word	0x400fc000
    b2e4:	.word	0x1f78a400
    b2e8:	.word	0x23c34600
    b2ec:	.word	0x01ab3f00
    b2f0:	.word	0x40080000
    b2f4:	.word	0x400d8000
    b2f8:	.word	0x80003040
    b2fc:	.word	0x269fb1ff
    b300:	.word	0x4df67eff
    b304:	.word	0x00b71b00
    b308:	.word	0x08f0d17f
    b30c:	.word	0x2cb4177f
    b310:	.word	0x08f0d180
    b314:	.word	0x20001c88
    b318:	.word	0x20001c84
    b31c:	.word	0x000f4240
    b320:	.word	0x20021540
    b324:	.word	0x016e3600
    b328:	.word	0x8001307f

0000b32c <endpoint0_receive>:
{
    b32c:	push	{r4, r5, lr}
    b32e:	ldr	r4, [pc, #136]	; (b3b8 <endpoint0_receive+0x8c>)
	if (len > 0) {
    b330:	cbz	r1, b374 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b332:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b334:	ldr	r3, [pc, #132]	; (b3bc <endpoint0_receive+0x90>)
    b336:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b338:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b33c:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    b33e:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b340:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b342:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b346:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b348:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b34a:	add.w	r1, r0, #8192	; 0x2000
    b34e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b350:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b354:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b358:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b35a:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    b35c:	movs	r3, #0
    b35e:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    b360:	ldr	r3, [pc, #92]	; (b3c0 <endpoint0_receive+0x94>)
    b362:	ldr.w	r1, [r3, #432]	; 0x1b0
    b366:	orrs	r1, r5
    b368:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b36c:	ldr.w	r1, [r3, #432]	; 0x1b0
    b370:	cmp	r1, #0
    b372:	bne.n	b36c <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    b374:	ldr	r3, [pc, #76]	; (b3c4 <endpoint0_receive+0x98>)
    b376:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b378:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b37a:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    b37e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b380:	movw	r1, #32896	; 0x8080
    b384:	it	eq
    b386:	moveq	r1, #128	; 0x80
    b388:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b38a:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    b38c:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    b390:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b392:	mov.w	r1, #65537	; 0x10001
    b396:	ldr	r3, [pc, #40]	; (b3c0 <endpoint0_receive+0x94>)
    b398:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    b39c:	ldr.w	r1, [r3, #432]	; 0x1b0
    b3a0:	orr.w	r1, r1, #65536	; 0x10000
    b3a4:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    b3a8:	ldr	r1, [pc, #28]	; (b3c8 <endpoint0_receive+0x9c>)
    b3aa:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    b3ac:	ldr.w	r2, [r3, #432]	; 0x1b0
    b3b0:	cmp	r2, #0
    b3b2:	bne.n	b3ac <endpoint0_receive+0x80>
}
    b3b4:	pop	{r4, r5, pc}
    b3b6:	nop
    b3b8:	.word	0x20000000
    b3bc:	.word	0x20002720
    b3c0:	.word	0x402e0000
    b3c4:	.word	0x20002700
    b3c8:	.word	0x200213f8

0000b3cc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    b3cc:	ldr	r3, [r0, #56]	; 0x38
{
    b3ce:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    b3d0:	cbz	r3, b3da <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    b3d2:	ldr	r3, [r2, #4]
    b3d4:	orr.w	r3, r3, #32768	; 0x8000
    b3d8:	str	r3, [r2, #4]
	}
	__disable_irq();
    b3da:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    b3dc:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    b3de:	ldr	r3, [pc, #96]	; (b440 <schedule_transfer+0x74>)
    b3e0:	cbz	r4, b42c <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    b3e2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    b3e4:	ldr.w	r4, [r3, #432]	; 0x1b0
    b3e8:	tst	r4, r1
    b3ea:	bne.n	b426 <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    b3ec:	ldr	r6, [pc, #84]	; (b444 <schedule_transfer+0x78>)
    b3ee:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    b3f0:	ldr.w	r4, [r3, #320]	; 0x140
    b3f4:	orr.w	r4, r4, #16384	; 0x4000
    b3f8:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    b3fc:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    b400:	ldr.w	r5, [r3, #320]	; 0x140
    b404:	lsls	r5, r5, #17
    b406:	bmi.n	b412 <schedule_transfer+0x46>
    b408:	ldr	r5, [r6, #4]
    b40a:	subs	r5, r5, r7
    b40c:	cmp.w	r5, #2400	; 0x960
    b410:	bcc.n	b3f0 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    b412:	ands	r4, r1
    b414:	bne.n	b426 <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    b416:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    b41a:	ldr	r4, [pc, #36]	; (b440 <schedule_transfer+0x74>)
    b41c:	ldr.w	r3, [r4, #432]	; 0x1b0
    b420:	orrs	r3, r1
    b422:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    b426:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    b428:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    b42a:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    b42c:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    b430:	ldr.w	r4, [r3, #432]	; 0x1b0
    b434:	orrs	r1, r4
    b436:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    b43a:	str	r2, [r0, #48]	; 0x30
    b43c:	b.n	b426 <schedule_transfer+0x5a>
    b43e:	nop
    b440:	.word	0x402e0000
    b444:	.word	0xe0001000

0000b448 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    b448:	push	{r4, r5, r6, lr}
    b44a:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    b44c:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    b44e:	cbz	r0, b460 <run_callbacks+0x18>
    b450:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    b452:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    b454:	ldr	r3, [r2, #4]
    b456:	ands.w	r3, r3, #128	; 0x80
    b45a:	beq.n	b462 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    b45c:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    b45e:	cbnz	r5, b470 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    b460:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    b462:	ldr	r2, [r2, #0]
		count++;
    b464:	adds	r5, #1
		if ((uint32_t)t == 1) {
    b466:	cmp	r2, #1
    b468:	bne.n	b454 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    b46a:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    b46e:	b.n	b45e <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    b470:	ldr	r6, [r0, #0]
		count--;
    b472:	subs	r5, #1
		ep->callback_function(first);
    b474:	ldr	r3, [r4, #56]	; 0x38
    b476:	blx	r3
		first = next;
    b478:	mov	r0, r6
    b47a:	b.n	b45e <run_callbacks+0x16>

0000b47c <usb_endpoint_config>:
{
    b47c:	push	{r4, r5, r6, lr}
    b47e:	mov	r4, r0
    b480:	mov	r6, r1
    b482:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    b484:	movs	r1, #0
    b486:	movs	r2, #60	; 0x3c
    b488:	adds	r0, #4
    b48a:	bl	a898 <memset>
	qh->next = 1; // Terminate bit = 1
    b48e:	movs	r3, #1
	qh->config = config;
    b490:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    b492:	str	r3, [r4, #8]
	qh->callback_function = callback;
    b494:	str	r5, [r4, #56]	; 0x38
}
    b496:	pop	{r4, r5, r6, pc}

0000b498 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    b498:	ldr	r2, [pc, #124]	; (b518 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    b49a:	push	{r4, lr}
	if (len > 0) {
    b49c:	cbz	r1, b4e2 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b49e:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    b4a0:	ldr	r3, [pc, #120]	; (b51c <endpoint0_transmit.constprop.0+0x84>)
    b4a2:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b4a4:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    b4a8:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    b4aa:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    b4ac:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b4ae:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    b4b2:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    b4b4:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    b4b6:	add.w	r1, r0, #8192	; 0x2000
    b4ba:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b4bc:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b4c0:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    b4c4:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    b4c6:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    b4c8:	movs	r3, #0
    b4ca:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    b4cc:	ldr	r3, [pc, #80]	; (b520 <endpoint0_transmit.constprop.0+0x88>)
    b4ce:	ldr.w	r1, [r3, #432]	; 0x1b0
    b4d2:	orr.w	r1, r1, #65536	; 0x10000
    b4d6:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    b4da:	ldr.w	r1, [r3, #432]	; 0x1b0
    b4de:	cmp	r1, #0
    b4e0:	bne.n	b4da <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    b4e2:	ldr	r3, [pc, #64]	; (b524 <endpoint0_transmit.constprop.0+0x8c>)
    b4e4:	movs	r1, #1
    b4e6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    b4e8:	movs	r1, #128	; 0x80
    b4ea:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    b4ec:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    b4ee:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    b4f2:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    b4f4:	mov.w	r2, #65537	; 0x10001
    b4f8:	ldr	r3, [pc, #36]	; (b520 <endpoint0_transmit.constprop.0+0x88>)
    b4fa:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    b4fe:	ldr.w	r2, [r3, #432]	; 0x1b0
    b502:	orr.w	r2, r2, #1
    b506:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    b50a:	ldr	r2, [pc, #28]	; (b528 <endpoint0_transmit.constprop.0+0x90>)
    b50c:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    b50e:	ldr.w	r2, [r3, #432]	; 0x1b0
    b512:	cmp	r2, #0
    b514:	bne.n	b50e <endpoint0_transmit.constprop.0+0x76>
}
    b516:	pop	{r4, pc}
    b518:	.word	0x20000000
    b51c:	.word	0x20002720
    b520:	.word	0x402e0000
    b524:	.word	0x20002700
    b528:	.word	0x200213f8

0000b52c <usb_start_sof_interrupts>:
	__disable_irq();
    b52c:	cpsid	i
	sof_usage |= (1 << interface);
    b52e:	ldr	r2, [pc, #40]	; (b558 <usb_start_sof_interrupts+0x2c>)
    b530:	movs	r3, #1
    b532:	lsl.w	r0, r3, r0
    b536:	ldrb	r3, [r2, #0]
    b538:	orrs	r0, r3
    b53a:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    b53c:	ldr	r2, [pc, #28]	; (b55c <usb_start_sof_interrupts+0x30>)
    b53e:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    b542:	lsls	r1, r3, #24
    b544:	bmi.n	b552 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b546:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b548:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    b54a:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    b54e:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    b552:	cpsie	i
}
    b554:	bx	lr
    b556:	nop
    b558:	.word	0x200222a9
    b55c:	.word	0x402e0000

0000b560 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    b560:	movs	r3, #1
    b562:	ldr	r2, [pc, #32]	; (b584 <usb_stop_sof_interrupts+0x24>)
    b564:	lsl.w	r0, r3, r0
    b568:	ldrb	r3, [r2, #0]
    b56a:	bic.w	r0, r3, r0
    b56e:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    b570:	cbnz	r0, b580 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    b572:	ldr	r2, [pc, #20]	; (b588 <usb_stop_sof_interrupts+0x28>)
    b574:	ldr.w	r3, [r2, #328]	; 0x148
    b578:	bic.w	r3, r3, #128	; 0x80
    b57c:	str.w	r3, [r2, #328]	; 0x148
}
    b580:	bx	lr
    b582:	nop
    b584:	.word	0x200222a9
    b588:	.word	0x402e0000

0000b58c <usb_isr>:
{
    b58c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    b590:	ldr	r4, [pc, #676]	; (b838 <usb_isr+0x2ac>)
    b592:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b596:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    b598:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    b59c:	bmi.n	b604 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    b59e:	lsls	r1, r6, #25
    b5a0:	bmi.w	b9ca <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    b5a4:	lsls	r4, r6, #7
    b5a6:	bpl.n	b5b0 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    b5a8:	ldr	r3, [pc, #656]	; (b83c <usb_isr+0x2b0>)
    b5aa:	ldr	r3, [r3, #0]
    b5ac:	cbz	r3, b5b0 <usb_isr+0x24>
    b5ae:	blx	r3
	if (status & USB_USBSTS_TI1) {
    b5b0:	lsls	r0, r6, #6
    b5b2:	bpl.n	b5bc <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    b5b4:	ldr	r3, [pc, #648]	; (b840 <usb_isr+0x2b4>)
    b5b6:	ldr	r3, [r3, #0]
    b5b8:	cbz	r3, b5bc <usb_isr+0x30>
    b5ba:	blx	r3
	if (status & USB_USBSTS_PCI) {
    b5bc:	lsls	r1, r6, #29
    b5be:	bpl.n	b5d2 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    b5c0:	ldr	r3, [pc, #628]	; (b838 <usb_isr+0x2ac>)
    b5c2:	ldr	r2, [pc, #640]	; (b844 <usb_isr+0x2b8>)
    b5c4:	ldr.w	r3, [r3, #388]	; 0x184
    b5c8:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    b5cc:	it	ne
    b5ce:	movne	r3, #1
			usb_high_speed = 0;
    b5d0:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    b5d2:	ldr	r3, [pc, #612]	; (b838 <usb_isr+0x2ac>)
    b5d4:	ldr.w	r3, [r3, #328]	; 0x148
    b5d8:	lsls	r2, r3, #24
    b5da:	bpl.w	b9fa <usb_isr+0x46e>
    b5de:	lsls	r3, r6, #24
    b5e0:	bpl.w	b9fa <usb_isr+0x46e>
		if (usb_reboot_timer) {
    b5e4:	ldr	r2, [pc, #608]	; (b848 <usb_isr+0x2bc>)
    b5e6:	ldrb	r3, [r2, #0]
    b5e8:	cmp	r3, #0
    b5ea:	beq.w	b9fa <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    b5ee:	subs	r3, #1
    b5f0:	uxtb	r3, r3
    b5f2:	strb	r3, [r2, #0]
    b5f4:	cmp	r3, #0
    b5f6:	bne.w	b9fa <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    b5fa:	movs	r0, #3
    b5fc:	bl	b560 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    b600:	bl	127b0 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    b604:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b608:	ldr	r7, [pc, #576]	; (b84c <usb_isr+0x2c0>)
		while (setupstatus) {
    b60a:	cmp	r3, #0
    b60c:	bne.n	b696 <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    b60e:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    b612:	cmp	r5, #0
    b614:	beq.n	b59e <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    b616:	ldr	r2, [pc, #568]	; (b850 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    b618:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    b61c:	ldr	r1, [r2, #0]
    b61e:	tst	r5, r1
    b620:	beq.n	b658 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    b622:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b624:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    b628:	ldr	r2, [pc, #552]	; (b854 <usb_isr+0x2c8>)
    b62a:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    b62c:	ldrh	r2, [r2, #0]
    b62e:	cmp	r2, r1
    b630:	bne.w	b98c <usb_isr+0x400>
    b634:	uxth	r3, r3
    b636:	cbnz	r3, b658 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b638:	ldr	r2, [pc, #540]	; (b858 <usb_isr+0x2cc>)
    b63a:	ldr	r3, [pc, #544]	; (b85c <usb_isr+0x2d0>)
    b63c:	ldr	r0, [r2, #0]
    b63e:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    b640:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    b642:	ldrb	r2, [r2, #6]
    b644:	str	r0, [r3, #0]
    b646:	strh	r1, [r3, #4]
    b648:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    b64a:	bne.n	b658 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    b64c:	movs	r0, #3
    b64e:	bl	b52c <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    b652:	ldr	r3, [pc, #500]	; (b848 <usb_isr+0x2bc>)
    b654:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b656:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    b658:	ldr	r3, [pc, #516]	; (b860 <usb_isr+0x2d4>)
    b65a:	ldr	r3, [r3, #0]
			if (completestatus) {
    b65c:	ands	r5, r3
    b65e:	beq.n	b59e <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    b660:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b662:	ldr.w	r8, [pc, #512]	; b864 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    b666:	mov.w	r9, #1
				while (tx) {
    b66a:	cmp	r4, #0
    b66c:	bne.w	b9ae <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    b670:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    b672:	ldr	r7, [pc, #496]	; (b864 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    b674:	mov.w	r8, #1
				while(rx) {
    b678:	cmp	r5, #0
    b67a:	beq.n	b59e <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    b67c:	rbit	r4, r5
    b680:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b684:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    b688:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b68c:	bl	b448 <run_callbacks>
					rx &= ~(1<<p);
    b690:	bic.w	r5, r5, r4
    b694:	b.n	b678 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b696:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    b69a:	ldr	r3, [pc, #456]	; (b864 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    b69c:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b6a0:	ldr.w	r2, [r4, #320]	; 0x140
    b6a4:	orr.w	r2, r2, #8192	; 0x2000
    b6a8:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b6ac:	ldr.w	r2, [r4, #320]	; 0x140
    b6b0:	lsls	r2, r2, #18
    b6b2:	bpl.n	b6a0 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b6b4:	ldr.w	r2, [r4, #320]	; 0x140
    b6b8:	bic.w	r2, r2, #8192	; 0x2000
    b6bc:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b6c0:	mov.w	r2, #65537	; 0x10001
    b6c4:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b6c8:	ldr.w	r2, [r4, #436]	; 0x1b4
    b6cc:	ands.w	r8, r2, #65537	; 0x10001
    b6d0:	bne.n	b6c8 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b6d2:	uxth	r1, r5
    b6d4:	ldr	r2, [pc, #376]	; (b850 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    b6d6:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    b6da:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    b6de:	beq.w	b81a <usb_isr+0x28e>
    b6e2:	bhi.n	b77a <usb_isr+0x1ee>
    b6e4:	movw	r2, #770	; 0x302
    b6e8:	cmp	r1, r2
    b6ea:	beq.w	b8be <usb_isr+0x332>
    b6ee:	bhi.n	b70e <usb_isr+0x182>
    b6f0:	cmp	r1, #130	; 0x82
    b6f2:	beq.w	b888 <usb_isr+0x2fc>
    b6f6:	cmp.w	r1, #258	; 0x102
    b6fa:	beq.w	b8e4 <usb_isr+0x358>
    b6fe:	cmp	r1, #128	; 0x80
    b700:	beq.w	b82a <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b704:	mov.w	r3, #65537	; 0x10001
    b708:	str.w	r3, [r4, #448]	; 0x1c0
    b70c:	b.n	b814 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b70e:	cmp.w	r1, #1280	; 0x500
    b712:	beq.n	b7fe <usb_isr+0x272>
    b714:	sub.w	r1, r1, #1664	; 0x680
    b718:	cmp	r1, #1
    b71a:	bhi.n	b704 <usb_isr+0x178>
    b71c:	ldr	r2, [pc, #328]	; (b868 <usb_isr+0x2dc>)
    b71e:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b722:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b726:	ldr	r1, [r2, #4]
    b728:	cmp	r1, #0
    b72a:	beq.n	b704 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b72c:	ldrh.w	lr, [r2]
    b730:	mov	r0, r5
    b732:	cmp	lr, r5
    b734:	bne.w	b954 <usb_isr+0x3c8>
    b738:	ldrh.w	lr, [r2, #2]
    b73c:	cmp	lr, ip
    b73e:	bne.w	b954 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    b742:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    b744:	mov.w	r8, r3, lsr #16
    b748:	ldr	r3, [pc, #288]	; (b86c <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    b74a:	cmp	r5, #3
					datalen = *(list->addr);
    b74c:	ite	eq
    b74e:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b750:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b752:	cmp	r8, r2
    b754:	it	cs
    b756:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    b758:	cmp.w	r0, #512	; 0x200
    b75c:	bne.w	b906 <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b760:	ldr	r2, [pc, #224]	; (b844 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b762:	ldr	r1, [pc, #268]	; (b870 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b764:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b766:	mov	r2, r8
    b768:	ldr	r0, [pc, #264]	; (b874 <usb_isr+0x2e8>)
    b76a:	cmp	r5, #0
    b76c:	it	ne
    b76e:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b770:	mov	r0, r3
    b772:	bl	a8dc <memcpy>
    b776:	mov	r3, r0
    b778:	b.n	b928 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    b77a:	movw	r2, #8993	; 0x2321
    b77e:	cmp	r1, r2
    b780:	beq.n	b7c4 <usb_isr+0x238>
    b782:	bhi.n	b7d0 <usb_isr+0x244>
    b784:	movw	r2, #8225	; 0x2021
    b788:	cmp	r1, r2
    b78a:	beq.w	b972 <usb_isr+0x3e6>
    b78e:	movw	r2, #8737	; 0x2221
    b792:	cmp	r1, r2
    b794:	beq.w	b958 <usb_isr+0x3cc>
    b798:	cmp.w	r1, #2304	; 0x900
    b79c:	bne.n	b704 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    b79e:	ldr	r3, [pc, #216]	; (b878 <usb_isr+0x2ec>)
    b7a0:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b7a4:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    b7a8:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b7aa:	ldr	r3, [pc, #208]	; (b87c <usb_isr+0x2f0>)
    b7ac:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b7b0:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b7b4:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b7b8:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    b7bc:	bl	abac <usb_serial_configure>
		usb_mtp_configure();
    b7c0:	bl	c7cc <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b7c4:	movs	r2, #0
    b7c6:	mov	r1, r2
    b7c8:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b7ca:	bl	b32c <endpoint0_receive>
			return;
    b7ce:	b.n	b814 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b7d0:	movw	r2, #25633	; 0x6421
    b7d4:	cmp	r1, r2
    b7d6:	beq.w	b986 <usb_isr+0x3fa>
    b7da:	movw	r2, #26529	; 0x67a1
    b7de:	cmp	r1, r2
    b7e0:	bne.n	b704 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    b7e2:	cmp.w	r3, #262144	; 0x40000
    b7e6:	bcc.n	b704 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    b7e8:	ldr	r3, [pc, #148]	; (b880 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    b7ea:	movs	r1, #4
    b7ec:	ldr	r0, [pc, #104]	; (b858 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b7ee:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b7f0:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b7f2:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b7f4:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b7f6:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b7fa:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b7fc:	b.n	b824 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b7fe:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b800:	mov	r2, r8
    b802:	mov	r1, r8
    b804:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b806:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b808:	bl	b32c <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b80c:	orr.w	r5, r5, #16777216	; 0x1000000
    b810:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b814:	ldr.w	r3, [r4, #428]	; 0x1ac
    b818:	b.n	b60a <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    b81a:	ldr	r3, [pc, #92]	; (b878 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b81c:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b81e:	ldr	r0, [pc, #100]	; (b884 <usb_isr+0x2f8>)
    b820:	ldrb	r3, [r3, #0]
    b822:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b824:	bl	b498 <endpoint0_transmit.constprop.0>
				return;
    b828:	b.n	b814 <usb_isr+0x288>
		reply_buffer[0] = 0;
    b82a:	ldr	r0, [pc, #88]	; (b884 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b82c:	movs	r1, #2
		reply_buffer[0] = 0;
    b82e:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    b832:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b836:	b.n	b824 <usb_isr+0x298>
    b838:	.word	0x402e0000
    b83c:	.word	0x20021be4
    b840:	.word	0x20021be8
    b844:	.word	0x200222b0
    b848:	.word	0x200222b1
    b84c:	.word	0x402e01c0
    b850:	.word	0x200213f8
    b854:	.word	0x20006e00
    b858:	.word	0x20022235
    b85c:	.word	0x20021bd8
    b860:	.word	0x200213fc
    b864:	.word	0x20000000
    b868:	.word	0x20000958
    b86c:	.word	0x20202000
    b870:	.word	0x600026bc
    b874:	.word	0x60002725
    b878:	.word	0x200222af
    b87c:	.word	0x00cc0002
    b880:	.word	0x2000227b
    b884:	.word	0x2002228f
		endpoint = setup.wIndex & 0x7F;
    b888:	uxth	r0, r3
		if (endpoint > 7) break;
    b88a:	ands.w	r3, r3, #120	; 0x78
    b88e:	bne.w	b704 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b892:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b896:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b898:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    b89c:	ldr	r2, [pc, #352]	; (ba00 <usb_isr+0x474>)
    b89e:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b8a0:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b8a2:	bpl.n	b8b8 <usb_isr+0x32c>
    b8a4:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    b8a8:	it	ne
    b8aa:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b8ac:	mov.w	r1, #2
    b8b0:	ldr	r0, [pc, #332]	; (ba00 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    b8b2:	it	ne
    b8b4:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b8b6:	b.n	b824 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b8b8:	tst.w	r1, #1
    b8bc:	b.n	b8a8 <usb_isr+0x31c>
		if (endpoint > 7) break;
    b8be:	tst.w	r3, #120	; 0x78
    b8c2:	uxth	r2, r3
    b8c4:	bne.w	b704 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b8c8:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b8cc:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b8d0:	ldr.w	r2, [r7, r3, lsl #2]
    b8d4:	ite	ne
    b8d6:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b8da:	orreq.w	r2, r2, #1
    b8de:	str.w	r2, [r7, r3, lsl #2]
    b8e2:	b.n	b7c4 <usb_isr+0x238>
		if (endpoint > 7) break;
    b8e4:	tst.w	r3, #120	; 0x78
    b8e8:	uxth	r2, r3
    b8ea:	bne.w	b704 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b8ee:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b8f2:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b8f6:	ldr.w	r2, [r7, r3, lsl #2]
    b8fa:	ite	ne
    b8fc:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b900:	biceq.w	r2, r2, #1
    b904:	b.n	b8de <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b906:	cmp.w	r0, #1792	; 0x700
    b90a:	bne.n	b950 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b90c:	ldr	r2, [pc, #244]	; (ba04 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b90e:	ldr	r0, [pc, #248]	; (ba08 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b910:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b912:	mov	r2, r8
    b914:	ldr	r1, [pc, #244]	; (ba0c <usb_isr+0x480>)
    b916:	cmp	r5, #0
    b918:	it	ne
    b91a:	movne	r1, r0
    b91c:	mov	r0, r3
    b91e:	bl	a8dc <memcpy>
					usb_descriptor_buffer[1] = 7;
    b922:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b924:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b926:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b928:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b92c:	add.w	r0, r3, r8
	asm("dsb");
    b930:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b934:	mov.w	r3, #3758153728	; 0xe000e000
    b938:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b93c:	adds	r5, #32
	} while (location < end_addr);
    b93e:	cmp	r0, r5
    b940:	bhi.n	b938 <usb_isr+0x3ac>
	asm("dsb");
    b942:	dsb	sy
	asm("isb");
    b946:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b94a:	ldr	r0, [pc, #196]	; (ba10 <usb_isr+0x484>)
    b94c:	mov	r1, r8
    b94e:	b.n	b824 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b950:	mov	r2, r8
    b952:	b.n	b770 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b954:	adds	r2, #12
    b956:	b.n	b726 <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b958:	uxth	r3, r3
    b95a:	cmp	r3, #0
    b95c:	bne.w	b7c4 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b960:	ldr	r3, [pc, #176]	; (ba14 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b962:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b966:	ldr	r2, [r3, #0]
    b968:	ldr	r3, [pc, #172]	; (ba18 <usb_isr+0x48c>)
    b96a:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b96c:	ldr	r3, [pc, #172]	; (ba1c <usb_isr+0x490>)
    b96e:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b970:	b.n	b7c4 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b972:	lsrs	r1, r3, #16
    b974:	cmp	r1, #7
		if (setup.wLength == 6) {
    b976:	bne.w	b704 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b97a:	ldr	r2, [pc, #164]	; (ba20 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b97c:	ldr	r0, [pc, #164]	; (ba24 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b97e:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b982:	movs	r2, #1
    b984:	b.n	b7ca <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b986:	lsrs	r1, r3, #16
    b988:	cmp	r1, #6
    b98a:	b.n	b976 <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b98c:	movw	r3, #25633	; 0x6421
    b990:	cmp	r2, r3
    b992:	bne.w	b658 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b996:	ldr	r3, [pc, #140]	; (ba24 <usb_isr+0x498>)
    b998:	ldrb	r2, [r3, #0]
    b99a:	cmp	r2, #1
    b99c:	bne.w	b658 <usb_isr+0xcc>
    b9a0:	ldrb	r3, [r3, #1]
    b9a2:	cmp	r3, #64	; 0x40
    b9a4:	bne.w	b658 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b9a8:	ldr	r3, [pc, #124]	; (ba28 <usb_isr+0x49c>)
    b9aa:	movs	r2, #25
    b9ac:	b.n	b656 <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b9ae:	rbit	r7, r4
    b9b2:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b9b6:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b9ba:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b9be:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b9c0:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b9c4:	bl	b448 <run_callbacks>
					tx &= ~(1<<p);
    b9c8:	b.n	b66a <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b9ca:	ldr	r3, [pc, #96]	; (ba2c <usb_isr+0x4a0>)
    b9cc:	ldr.w	r2, [r3, #428]	; 0x1ac
    b9d0:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b9d4:	ldr.w	r2, [r3, #444]	; 0x1bc
    b9d8:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b9dc:	ldr.w	r4, [r3, #432]	; 0x1b0
    b9e0:	cmp	r4, #0
    b9e2:	bne.n	b9dc <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b9e4:	mov.w	r2, #4294967295
    b9e8:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b9ec:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b9f0:	bl	aba8 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b9f4:	ldr	r3, [pc, #56]	; (ba30 <usb_isr+0x4a4>)
    b9f6:	str	r4, [r3, #0]
    b9f8:	b.n	b5a4 <usb_isr+0x18>
}
    b9fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9fe:	nop
    ba00:	.word	0x2002228f
    ba04:	.word	0x200222b0
    ba08:	.word	0x600026bc
    ba0c:	.word	0x60002725
    ba10:	.word	0x20202000
    ba14:	.word	0x20021bd0
    ba18:	.word	0x20021be0
    ba1c:	.word	0x200222ae
    ba20:	.word	0x20006e00
    ba24:	.word	0x20022235
    ba28:	.word	0x2000227b
    ba2c:	.word	0x402e0000
    ba30:	.word	0x200213fc

0000ba34 <usb_config_rx>:
{
    ba34:	push	{r4, r5, r6, lr}
    ba36:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ba38:	subs	r3, r0, #2
{
    ba3a:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ba3c:	cmp	r3, #3
    ba3e:	bhi.n	ba68 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ba40:	clz	r4, r2
    ba44:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ba46:	ldr	r0, [pc, #36]	; (ba6c <usb_config_rx+0x38>)
    ba48:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ba4a:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    ba4c:	add.w	r0, r0, r5, lsl #7
    ba50:	orr.w	r1, r1, r4, lsl #29
    ba54:	bl	b47c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    ba58:	cbz	r6, ba68 <usb_config_rx+0x34>
    ba5a:	ldr	r2, [pc, #20]	; (ba70 <usb_config_rx+0x3c>)
    ba5c:	movs	r3, #1
    ba5e:	lsl.w	r0, r3, r5
    ba62:	ldr	r3, [r2, #0]
    ba64:	orrs	r0, r3
    ba66:	str	r0, [r2, #0]
}
    ba68:	pop	{r4, r5, r6, pc}
    ba6a:	nop
    ba6c:	.word	0x20000000
    ba70:	.word	0x200213fc

0000ba74 <usb_config_tx>:
{
    ba74:	push	{r4, r5, r6, lr}
    ba76:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ba78:	subs	r3, r0, #2
{
    ba7a:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    ba7c:	cmp	r3, #3
    ba7e:	bhi.n	baaa <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ba80:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ba84:	ldr	r0, [pc, #36]	; (baac <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ba86:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ba88:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    ba8a:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    ba8c:	add.w	r0, r0, r4, lsl #7
    ba90:	orr.w	r1, r1, r5, lsl #29
    ba94:	adds	r0, #64	; 0x40
    ba96:	bl	b47c <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    ba9a:	cbz	r6, baaa <usb_config_tx+0x36>
    ba9c:	ldr	r2, [pc, #16]	; (bab0 <usb_config_tx+0x3c>)
    ba9e:	adds	r4, #16
    baa0:	movs	r3, #1
    baa2:	ldr	r1, [r2, #0]
    baa4:	lsls	r3, r4
    baa6:	orrs	r3, r1
    baa8:	str	r3, [r2, #0]
}
    baaa:	pop	{r4, r5, r6, pc}
    baac:	.word	0x20000000
    bab0:	.word	0x200213fc

0000bab4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    bab4:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    bab6:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    bab8:	orr.w	r2, r2, #128	; 0x80
    babc:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    babe:	add.w	r2, r1, #4096	; 0x1000
    bac2:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    bac4:	add.w	r2, r1, #8192	; 0x2000
{
    bac8:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    baca:	str	r2, [r0, #16]
	transfer->next = 1;
    bacc:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    bace:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    bad2:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    bad6:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    bad8:	str	r2, [r0, #20]
	transfer->callback_param = param;
    bada:	strd	r1, r3, [r0, #24]
}
    bade:	pop	{r4, pc}

0000bae0 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bae0:	subs	r3, r0, #2
{
    bae2:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bae4:	cmp	r3, #3
    bae6:	bhi.n	bafe <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    bae8:	ldr	r3, [pc, #20]	; (bb00 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    baea:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    baee:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    baf2:	movs	r3, #1
    baf4:	adds	r0, #64	; 0x40
    baf6:	lsl.w	r1, r3, r1
    bafa:	b.w	b3cc <schedule_transfer>
}
    bafe:	bx	lr
    bb00:	.word	0x20000000

0000bb04 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bb04:	subs	r3, r0, #2
{
    bb06:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    bb08:	cmp	r3, #3
    bb0a:	bhi.n	bb1a <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    bb0c:	movs	r1, #1
    bb0e:	ldr	r3, [pc, #12]	; (bb1c <usb_receive+0x18>)
    bb10:	lsls	r1, r0
    bb12:	add.w	r0, r3, r0, lsl #7
    bb16:	b.w	b3cc <schedule_transfer>
}
    bb1a:	bx	lr
    bb1c:	.word	0x20000000

0000bb20 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    bb20:	ldr	r2, [pc, #32]	; (bb44 <usb_transfer_status+0x24>)
{
    bb22:	mov	r1, r0
	cmd = USB1_USBCMD;
    bb24:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    bb28:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    bb2a:	orr.w	r3, r3, #16384	; 0x4000
    bb2e:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    bb32:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    bb34:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    bb38:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    bb3a:	tst.w	r3, #16384	; 0x4000
    bb3e:	beq.n	bb28 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    bb40:	bx	lr
    bb42:	nop
    bb44:	.word	0x402e0000

0000bb48 <ultoa>:
{
    bb48:	push	{r4, r5, r6, lr}
	int i=0, j;
    bb4a:	movs	r4, #0
		digit = val % radix;
    bb4c:	udiv	r5, r0, r2
    bb50:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bb54:	uxtb	r3, r6
    bb56:	cmp	r6, #9
    bb58:	ite	ls
    bb5a:	addls	r3, #48	; 0x30
    bb5c:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    bb5e:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    bb60:	uxtb	r3, r3
    bb62:	strb	r3, [r1, r4]
		if (val == 0) break;
    bb64:	bhi.n	bb6c <ultoa+0x24>
		i++;
    bb66:	adds	r4, #1
		val /= radix;
    bb68:	mov	r0, r5
		digit = val % radix;
    bb6a:	b.n	bb4c <ultoa+0x4>
	buf[i + 1] = 0;
    bb6c:	adds	r3, r1, r4
    bb6e:	movs	r2, #0
    bb70:	subs	r0, r1, #1
    bb72:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    bb74:	subs	r5, r4, r2
    bb76:	cmp	r2, r5
    bb78:	blt.n	bb7e <ultoa+0x36>
}
    bb7a:	mov	r0, r1
    bb7c:	pop	{r4, r5, r6, pc}
		t = buf[j];
    bb7e:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    bb82:	adds	r2, #1
		buf[j] = buf[i];
    bb84:	ldrb	r6, [r3, #0]
    bb86:	strb	r6, [r0, #0]
		buf[i] = t;
    bb88:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    bb8c:	b.n	bb74 <ultoa+0x2c>
	...

0000bb90 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    bb90:	vcmp.f32	s0, s0
{
    bb94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    bb98:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    bb9c:	eor.w	r5, r0, r0, asr #31
{
    bba0:	mov	r7, r0
    bba2:	mov	r6, r1
    bba4:	mov	r4, r2
	int awidth = abs(width);
    bba6:	sub.w	r5, r5, r0, asr #31
{
    bbaa:	vpush	{d8}
    bbae:	vmov.f32	s16, s0
    bbb2:	sub	sp, #20
	if (isnanf(val)) {
    bbb4:	bvc.n	bc14 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    bbb6:	vcmpe.f32	s0, #0.0
    bbba:	vmrs	APSR_nzcv, fpscr
    bbbe:	ite	mi
    bbc0:	movmi	r3, #4
    bbc2:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    bbc4:	cmp	r3, r5
    bbc6:	ite	lt
    bbc8:	sublt	r5, r5, r3
    bbca:	movge	r5, #0
		if (width<0) {
    bbcc:	cmp	r0, #0
    bbce:	bge.n	bbde <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    bbd0:	mov	r2, r5
    bbd2:	mov	r0, r4
    bbd4:	add	r4, r5
    bbd6:	movs	r5, #0
    bbd8:	movs	r1, #32
    bbda:	bl	a898 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    bbde:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    bbe2:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    bbe4:	cmp	r3, #0
    bbe6:	itt	lt
    bbe8:	movlt	r3, #45	; 0x2d
    bbea:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    bbee:	movs	r3, #65	; 0x41
    bbf0:	strb	r2, [r4, #0]
    bbf2:	strb	r3, [r4, #1]
    bbf4:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    bbf6:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bbf8:	strb	r2, [r4, #2]
			*buf++ = ' ';
    bbfa:	movs	r1, #32
    bbfc:	mov	r2, r5
    bbfe:	bl	a898 <memset>
			awidth--;
		}
		*buf = 0;
    bc02:	movs	r2, #0
			*buf++ = ' ';
    bc04:	mov	r3, r0
    bc06:	add	r0, r5
		*buf = 0;
    bc08:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    bc0a:	add	sp, #20
    bc0c:	vpop	{d8}
    bc10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    bc14:	vabs.f32	s15, s0
    bc18:	vldr	s14, [pc, #432]	; bdcc <dtostrf+0x23c>
    bc1c:	vcmp.f32	s15, s14
    bc20:	vmrs	APSR_nzcv, fpscr
    bc24:	ble.n	bc6c <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    bc26:	vcmpe.f32	s0, #0.0
    bc2a:	vmrs	APSR_nzcv, fpscr
    bc2e:	ite	mi
    bc30:	movmi	r3, #4
    bc32:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    bc34:	cmp	r3, r5
    bc36:	ite	lt
    bc38:	sublt	r5, r5, r3
    bc3a:	movge	r5, #0
		if (width<0) {
    bc3c:	cmp	r0, #0
    bc3e:	bge.n	bc4e <dtostrf+0xbe>
				*buf++ = ' ';
    bc40:	mov	r2, r5
    bc42:	mov	r0, r4
    bc44:	add	r4, r5
    bc46:	movs	r5, #0
    bc48:	movs	r1, #32
    bc4a:	bl	a898 <memset>
		if (val<0) *buf++ = '-';
    bc4e:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bc52:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    bc54:	vmrs	APSR_nzcv, fpscr
    bc58:	itt	mi
    bc5a:	movmi	r3, #45	; 0x2d
    bc5c:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    bc60:	movs	r3, #73	; 0x49
    bc62:	strb	r3, [r4, #0]
    bc64:	movs	r3, #78	; 0x4e
    bc66:	strb	r3, [r4, #1]
    bc68:	adds	r3, r4, #3
    bc6a:	b.n	bbf6 <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    bc6c:	add	r2, sp, #8
    bc6e:	add	r1, sp, #4
    bc70:	mov	r0, r6
    bc72:	bl	e1a2 <fcvtf>
	if (precision == 0 && decpt == 0) {
    bc76:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    bc78:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    bc7a:	orrs.w	r2, r6, r3
    bc7e:	bne.n	bd1e <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    bc80:	ldrb	r1, [r0, #0]
    bc82:	ldr	r3, [pc, #332]	; (bdd0 <dtostrf+0x240>)
    bc84:	ldr	r2, [pc, #332]	; (bdd4 <dtostrf+0x244>)
    bc86:	cmp	r1, #52	; 0x34
    bc88:	ite	ls
    bc8a:	movls	r8, r2
    bc8c:	movhi	r8, r3
		decpt++;
    bc8e:	movs	r3, #1
    bc90:	str	r3, [sp, #4]
	reqd = strlen(s);
    bc92:	mov	r0, r8
    bc94:	bl	f490 <strlen>
	if (reqd > decpt) reqd++;
    bc98:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    bc9a:	mov	r5, r0
	if (reqd > decpt) reqd++;
    bc9c:	cmp	r3, r0
    bc9e:	it	lt
    bca0:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    bca2:	cmp	r3, #0
    bca4:	bne.n	bd2e <dtostrf+0x19e>
    bca6:	adds	r5, #1
	if (sign) reqd++;
    bca8:	ldr.w	fp, [sp, #8]
    bcac:	cmp.w	fp, #0
    bcb0:	beq.n	bcb4 <dtostrf+0x124>
    bcb2:	adds	r5, #1
	pad = width - reqd;
    bcb4:	sub.w	sl, r7, r5
	e = p + reqd;
    bcb8:	add.w	r9, r4, r5
	if (pad > 0) {
    bcbc:	cmp.w	sl, #0
    bcc0:	ble.n	bd76 <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    bcc2:	mov	r2, sl
    bcc4:	movs	r1, #32
    bcc6:	mov	r0, r4
		e += pad;
    bcc8:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    bcca:	bl	a898 <memset>
    bcce:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    bcd2:	cmp.w	fp, #0
    bcd6:	beq.n	bcde <dtostrf+0x14e>
    bcd8:	movs	r3, #45	; 0x2d
    bcda:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    bcde:	ldr	r1, [sp, #4]
    bce0:	cmp	r1, #0
    bce2:	bne.n	bd7a <dtostrf+0x1ea>
    bce4:	cbz	r6, bcf4 <dtostrf+0x164>
		*p++ = '0';
    bce6:	mov	r3, r2
    bce8:	movs	r1, #48	; 0x30
    bcea:	strb.w	r1, [r3], #2
		*p++ = '.';
    bcee:	movs	r1, #46	; 0x2e
    bcf0:	strb	r1, [r2, #1]
    bcf2:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    bcf4:	movs	r0, #46	; 0x2e
	while (p < e) {
    bcf6:	cmp	r9, r2
		*p++ = *s++;
    bcf8:	mov	r3, r2
	while (p < e) {
    bcfa:	bhi.n	bdb0 <dtostrf+0x220>
	if (width < 0) {
    bcfc:	cmp	r7, #0
    bcfe:	bge.n	bd16 <dtostrf+0x186>
		pad = (reqd + width) * -1;
    bd00:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    bd02:	movs	r1, #32
		pad = (reqd + width) * -1;
    bd04:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    bd06:	mov	r0, r3
    bd08:	bic.w	r5, r5, r5, asr #31
    bd0c:	mov	r2, r5
    bd0e:	bl	a898 <memset>
    bd12:	mov	r3, r0
    bd14:	add	r3, r5
	*p = 0;
    bd16:	movs	r2, #0
	return buf;
    bd18:	mov	r0, r4
	*p = 0;
    bd1a:	strb	r2, [r3, #0]
	return buf;
    bd1c:	b.n	bc0a <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    bd1e:	negs	r3, r3
    bd20:	cmp	r6, r3
		decpt = -precision;
    bd22:	ittt	lt
    bd24:	neglt	r3, r6
		s = "0";
    bd26:	ldrlt.w	r8, [pc, #172]	; bdd4 <dtostrf+0x244>
		decpt = -precision;
    bd2a:	strlt	r3, [sp, #4]
    bd2c:	b.n	bc92 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    bd2e:	bge.n	bca8 <dtostrf+0x118>
    bd30:	cmp	r6, #0
    bd32:	beq.n	bca8 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    bd34:	add	r3, r6
		reqd = precision + 2;
    bd36:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    bd38:	cmp	r0, r3
    bd3a:	bls.n	bca8 <dtostrf+0x118>
				val *= 10.0f;
    bd3c:	vmov.f32	s15, #36	; 0x41200000  10.0
    bd40:	mov	r3, r6
    bd42:	b.n	bd4a <dtostrf+0x1ba>
    bd44:	vmul.f32	s16, s16, s15
				newPrecision--;
    bd48:	subs	r3, #1
			while (newPrecision > 0) {
    bd4a:	cmp	r3, #0
    bd4c:	bgt.n	bd44 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    bd4e:	cmp	r6, #0
    bd50:	add	r2, sp, #8
    bd52:	add	r1, sp, #12
    bd54:	vmov.f32	s0, s16
    bd58:	ite	ge
    bd5a:	subge	r0, r6, r6
    bd5c:	movlt	r0, r6
    bd5e:	bl	e1a2 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    bd62:	ldr	r3, [sp, #4]
    bd64:	ldr	r2, [sp, #12]
    bd66:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    bd68:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    bd6a:	subs	r2, r2, r3
    bd6c:	cmp	r2, r1
    bd6e:	itt	eq
    bd70:	addeq	r3, #1
    bd72:	streq	r3, [sp, #4]
    bd74:	b.n	bca8 <dtostrf+0x118>
    bd76:	mov	r2, r4
    bd78:	b.n	bcd2 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    bd7a:	bge.n	bcf4 <dtostrf+0x164>
    bd7c:	cmp	r6, #0
    bd7e:	beq.n	bcf4 <dtostrf+0x164>
		*p++ = '0';
    bd80:	mov	r3, r2
		*p++ = '.';
    bd82:	movs	r0, #46	; 0x2e
		*p++ = '0';
    bd84:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    bd88:	movs	r6, #0
		*p++ = '0';
    bd8a:	strb.w	ip, [r3], #2
		*p++ = '.';
    bd8e:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    bd90:	rsb	r0, r1, #2
    bd94:	add	r2, r0
		*p++ = '.';
    bd96:	mov	r0, r3
		while ( decpt < 0 ) {
    bd98:	cmp	r0, r2
    bd9a:	bne.n	bda8 <dtostrf+0x218>
    bd9c:	subs	r2, r3, r1
    bd9e:	cmp	r6, #0
    bda0:	beq.n	bcf4 <dtostrf+0x164>
    bda2:	movs	r3, #0
    bda4:	str	r3, [sp, #4]
    bda6:	b.n	bcf4 <dtostrf+0x164>
			*p++ = '0';
    bda8:	movs	r6, #1
    bdaa:	strb.w	ip, [r0], #1
    bdae:	b.n	bd98 <dtostrf+0x208>
		*p++ = *s++;
    bdb0:	ldrb.w	r1, [r8], #1
    bdb4:	strb.w	r1, [r3], #1
		if (p == e) break;
    bdb8:	cmp	r9, r3
    bdba:	beq.n	bcfc <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    bdbc:	ldr	r1, [sp, #4]
    bdbe:	subs	r1, #1
    bdc0:	str	r1, [sp, #4]
    bdc2:	cbnz	r1, bdc8 <dtostrf+0x238>
    bdc4:	adds	r3, r2, #2
    bdc6:	strb	r0, [r2, #1]
			*p++ = '0';
    bdc8:	mov	r2, r3
    bdca:	b.n	bcf6 <dtostrf+0x166>
    bdcc:	.word	0x7f7fffff
    bdd0:	.word	0x20000ea4
    bdd4:	.word	0x200010bf

0000bdd8 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    bdd8:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bdda:	ldr	r3, [pc, #52]	; (be10 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bddc:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    bdde:	ldr	r6, [pc, #52]	; (be14 <micros+0x3c>)
		scc = systick_cycle_count;
    bde0:	ldr	r5, [pc, #52]	; (be18 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    bde2:	ldrex	r2, [r3]
		smc = systick_millis_count;
    bde6:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    bde8:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    bdea:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    bdee:	cmp	r2, #0
    bdf0:	bne.n	bde2 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    bdf2:	ldr	r3, [pc, #40]	; (be1c <micros+0x44>)
    bdf4:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bdf6:	ldr	r2, [pc, #40]	; (be20 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    bdf8:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    bdfa:	ldr	r2, [r2, #0]
    bdfc:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    be00:	mov.w	r3, #1000	; 0x3e8
    be04:	muls	r0, r3
	return usec;
}
    be06:	cmp	r2, r3
    be08:	ite	ls
    be0a:	addls	r0, r0, r2
    be0c:	addhi	r0, r0, r3
    be0e:	pop	{r4, r5, r6, pc}
    be10:	.word	0x20021bd4
    be14:	.word	0x20021bd0
    be18:	.word	0x20021bcc
    be1c:	.word	0xe0001000
    be20:	.word	0x20021540

0000be24 <delay>:
{
    be24:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    be26:	mov	r4, r0
    be28:	cbz	r0, be4c <delay+0x28>
	start = micros();
    be2a:	bl	bdd8 <micros>
    be2e:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    be30:	bl	bdd8 <micros>
    be34:	subs	r0, r0, r5
    be36:	cmp.w	r0, #1000	; 0x3e8
    be3a:	bcs.n	be42 <delay+0x1e>
		yield();
    be3c:	bl	caa0 <yield>
		while ((micros() - start) >= 1000) {
    be40:	b.n	be30 <delay+0xc>
			if (--msec == 0) return;
    be42:	subs	r4, #1
    be44:	beq.n	be4c <delay+0x28>
			start += 1000;
    be46:	add.w	r5, r5, #1000	; 0x3e8
    be4a:	b.n	be30 <delay+0xc>
}
    be4c:	pop	{r3, r4, r5, pc}
	...

0000be50 <unused_interrupt_vector>:
	__disable_irq();
    be50:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    be52:	mrs	r3, IPSR
	info->ipsr = ipsr;
    be56:	ldr	r4, [pc, #316]	; (bf94 <unused_interrupt_vector+0x144>)
    be58:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    be5c:	tst.w	lr, #4
    be60:	ite	eq
    be62:	mrseq	r2, MSP
    be66:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    be6a:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    be6e:	ldr	r7, [pc, #296]	; (bf98 <unused_interrupt_vector+0x148>)
	while (p < end) {
    be70:	ldr	r6, [pc, #296]	; (bf9c <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    be72:	ldr.w	r1, [r3, #3368]	; 0xd28
    be76:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    be7a:	ldr.w	r1, [r3, #3372]	; 0xd2c
    be7e:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    be82:	ldr.w	r1, [r3, #3380]	; 0xd34
    be86:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    be8a:	ldr.w	r3, [r3, #3384]	; 0xd38
    be8e:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    be92:	ldr	r3, [r2, #24]
    be94:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    be98:	ldr	r3, [r2, #28]
    be9a:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    be9e:	bl	c514 <tempmonGetTemp>
    bea2:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    bea6:	bl	c020 <rtc_get>
	info->len = sizeof(*info) / 4;
    beaa:	movs	r3, #11
	p = (uint32_t *)info;
    beac:	ldr	r2, [pc, #240]	; (bfa0 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    beae:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    beb2:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    beb6:	mov	r0, r2
	crc = 0xFFFFFFFF;
    beb8:	mov.w	r3, #4294967295
		crc ^= *p++;
    bebc:	ldr	r1, [r2, #0]
    bebe:	movs	r5, #32
    bec0:	adds	r2, #4
    bec2:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    bec4:	and.w	r1, r3, #1
    bec8:	subs	r5, #1
    beca:	mul.w	r1, r7, r1
    bece:	eor.w	r3, r1, r3, lsr #1
    bed2:	bne.n	bec4 <unused_interrupt_vector+0x74>
	while (p < end) {
    bed4:	cmp	r2, r6
    bed6:	bne.n	bebc <unused_interrupt_vector+0x6c>
	info->crc = crc;
    bed8:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    bedc:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    bee0:	mov.w	r3, #3758153728	; 0xe000e000
    bee4:	ldr	r2, [pc, #188]	; (bfa4 <unused_interrupt_vector+0x154>)
    bee6:	str.w	r0, [r3, #3952]	; 0xf70
    beea:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    beee:	dsb	sy
	asm("isb");
    bef2:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    bef6:	ldr	r2, [pc, #176]	; (bfa8 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    bef8:	ldr	r4, [pc, #176]	; (bfac <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    befa:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    befc:	ldr	r0, [pc, #176]	; (bfb0 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    befe:	orr.w	r3, r3, #12288	; 0x3000
    bf02:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    bf04:	movs	r3, #2
    bf06:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    bf08:	ldr	r3, [r2, #28]
    bf0a:	bic.w	r3, r3, #127	; 0x7f
    bf0e:	orr.w	r3, r3, #64	; 0x40
    bf12:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    bf14:	ldr	r3, [pc, #156]	; (bfb4 <unused_interrupt_vector+0x164>)
    bf16:	ldr	r3, [r3, #0]
    bf18:	cmp	r3, r0
    bf1a:	bls.n	bf20 <unused_interrupt_vector+0xd0>
    bf1c:	bl	b0dc <set_arm_clock>
	PIT_MCR = 0;
    bf20:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bf22:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    bf24:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    bf28:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    bf2a:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    bf2e:	ldr	r3, [pc, #136]	; (bfb8 <unused_interrupt_vector+0x168>)
    bf30:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    bf34:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    bf38:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    bf3c:	ldr	r4, [pc, #108]	; (bfac <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    bf3e:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    bf42:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    bf46:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    bf4a:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    bf4e:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    bf52:	ldr.w	r3, [r4, #268]	; 0x10c
    bf56:	cbz	r3, bf62 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    bf58:	adds	r5, #1
			PIT_TFLG0 = 1;
    bf5a:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    bf5e:	cmp	r5, #79	; 0x4f
    bf60:	bhi.n	bf68 <unused_interrupt_vector+0x118>
		usb_isr();
    bf62:	bl	b58c <usb_isr>
		if (PIT_TFLG0) {
    bf66:	b.n	bf52 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    bf68:	ldr	r3, [pc, #80]	; (bfbc <unused_interrupt_vector+0x16c>)
    bf6a:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    bf6c:	ldr	r1, [pc, #80]	; (bfc0 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    bf6e:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    bf72:	mov.w	r2, #2147483648	; 0x80000000
    bf76:	ldr	r3, [pc, #76]	; (bfc4 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    bf78:	ldr	r0, [pc, #76]	; (bfc8 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    bf7a:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    bf7c:	ldr	r2, [pc, #44]	; (bfac <unused_interrupt_vector+0x15c>)
    bf7e:	ldr.w	r3, [r2, #268]	; 0x10c
    bf82:	cbz	r3, bf90 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    bf84:	mov.w	r3, #3758153728	; 0xe000e000
    bf88:	ldr	r2, [pc, #64]	; (bfcc <unused_interrupt_vector+0x17c>)
    bf8a:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    bf8e:	b.n	bf8e <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    bf90:	str	r0, [r1, #48]	; 0x30
    bf92:	b.n	bf7e <unused_interrupt_vector+0x12e>
    bf94:	.word	0x2027ff00
    bf98:	.word	0xedb88320
    bf9c:	.word	0x2027ffa8
    bfa0:	.word	0x2027ff80
    bfa4:	.word	0x2027ffa0
    bfa8:	.word	0x400fc000
    bfac:	.word	0x40084000
    bfb0:	.word	0x0bcd3d80
    bfb4:	.word	0x20001c88
    bfb8:	.word	0x00249f00
    bfbc:	.word	0x402e0000
    bfc0:	.word	0x400f8000
    bfc4:	.word	0x400d9000
    bfc8:	.word	0x0bad00f1
    bfcc:	.word	0x05fa0004

0000bfd0 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    bfd0:	ldr	r2, [pc, #32]	; (bff4 <_sbrk+0x24>)
{
    bfd2:	push	{r3, lr}
    bfd4:	mov	r3, r0
        char *prev = __brkval;
    bfd6:	ldr	r0, [r2, #0]
        if (incr != 0) {
    bfd8:	cbz	r3, bfee <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    bfda:	add	r3, r0
    bfdc:	ldr	r1, [pc, #24]	; (bff8 <_sbrk+0x28>)
    bfde:	cmp	r3, r1
    bfe0:	bls.n	bff0 <_sbrk+0x20>
                        errno = ENOMEM;
    bfe2:	bl	f37c <__errno>
    bfe6:	movs	r3, #12
    bfe8:	str	r3, [r0, #0]
                        return (void *)-1;
    bfea:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    bfee:	pop	{r3, pc}
                __brkval = prev + incr;
    bff0:	str	r3, [r2, #0]
    bff2:	b.n	bfee <_sbrk+0x1e>
    bff4:	.word	0x20002060
    bff8:	.word	0x20280000

0000bffc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    bffc:	movs	r0, #0
    bffe:	bx	lr

0000c000 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    c000:	mov.w	r0, #4294967295
    c004:	bx	lr

0000c006 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    c006:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    c00a:	movs	r0, #0
	st->st_mode = S_IFCHR;
    c00c:	str	r3, [r1, #4]
}
    c00e:	bx	lr

0000c010 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    c010:	movs	r0, #1
    c012:	bx	lr

0000c014 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    c014:	mov.w	r0, #4294967295
    c018:	bx	lr

0000c01a <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    c01a:	wfi
    c01c:	b.n	c01a <abort>
	...

0000c020 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    c020:	ldr	r2, [pc, #28]	; (c040 <rtc_get+0x20>)
    c022:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    c024:	ldr	r3, [r2, #40]	; 0x28
{
    c026:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    c028:	mov	r4, r3
    c02a:	mov	r1, r0
    c02c:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    c02e:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    c030:	cmp	r4, r3
    c032:	bne.n	c028 <rtc_get+0x8>
    c034:	cmp	r1, r0
    c036:	bne.n	c028 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    c038:	lsrs	r3, r3, #15
}
    c03a:	orr.w	r0, r3, r0, lsl #17
    c03e:	pop	{r4, pc}
    c040:	.word	0x400d4000

0000c044 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    c044:	ldr	r3, [pc, #60]	; (c084 <rtc_set+0x40>)
    c046:	ldr	r2, [r3, #8]
    c048:	bic.w	r2, r2, #65537	; 0x10001
    c04c:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    c04e:	ldr	r2, [r3, #8]
    c050:	lsls	r2, r2, #31
    c052:	bmi.n	c04e <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    c054:	ldr	r2, [r3, #56]	; 0x38
    c056:	bic.w	r2, r2, #1
    c05a:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    c05c:	ldr	r3, [pc, #36]	; (c084 <rtc_set+0x40>)
    c05e:	ldr	r2, [r3, #56]	; 0x38
    c060:	lsls	r1, r2, #31
    c062:	bmi.n	c05e <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    c064:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    c066:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    c068:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    c06a:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    c06c:	ldr	r2, [r3, #56]	; 0x38
    c06e:	orr.w	r2, r2, #1
    c072:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    c074:	ldr	r2, [r3, #56]	; 0x38
    c076:	lsls	r2, r2, #31
    c078:	bpl.n	c074 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    c07a:	ldr	r2, [r3, #8]
    c07c:	orr.w	r2, r2, #65537	; 0x10001
    c080:	str	r2, [r3, #8]
}
    c082:	bx	lr
    c084:	.word	0x400d4000

0000c088 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    c088:	ldr	r3, [pc, #68]	; (c0d0 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    c08a:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    c08c:	ldr	r2, [pc, #68]	; (c0d4 <flash_wait+0x4c>)
{
    c08e:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    c090:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    c094:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    c096:	ldr	r5, [pc, #64]	; (c0d8 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    c098:	ldr	r4, [pc, #64]	; (c0dc <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    c09a:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    c09e:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    c0a2:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    c0a6:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c0aa:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    c0ae:	ldr	r0, [r3, #20]
    c0b0:	lsls	r0, r0, #31
    c0b2:	bpl.n	c0ae <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c0b4:	str	r2, [r3, #20]
	} while (status & 1);
    c0b6:	ldrb	r0, [r4, #0]
    c0b8:	lsls	r0, r0, #31
    c0ba:	bmi.n	c09e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    c0bc:	ldr	r2, [r3, #0]
    c0be:	orr.w	r2, r2, #1
    c0c2:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    c0c4:	ldr	r2, [pc, #8]	; (c0d0 <flash_wait+0x48>)
    c0c6:	ldr	r3, [r2, #0]
    c0c8:	lsls	r3, r3, #31
    c0ca:	bmi.n	c0c6 <flash_wait+0x3e>
	__enable_irq();
    c0cc:	cpsie	i
}
    c0ce:	pop	{r4, r5, pc}
    c0d0:	.word	0x402a8000
    c0d4:	.word	0x24010405
    c0d8:	.word	0x000f0001
    c0dc:	.word	0x402a8100

0000c0e0 <eeprom_initialize>:
{
    c0e0:	push	{r4, r5, lr}
    c0e2:	ldr	r3, [pc, #52]	; (c118 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    c0e4:	movw	r5, #65535	; 0xffff
    c0e8:	ldr	r4, [pc, #48]	; (c11c <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c0ea:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    c0ee:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    c0f0:	ldrh	r0, [r1, #0]
    c0f2:	adds	r1, #2
    c0f4:	cmp	r0, r5
    c0f6:	beq.n	c100 <eeprom_initialize+0x20>
			index++;
    c0f8:	adds	r2, #1
		} while (p < end);
    c0fa:	cmp	r1, r3
			index++;
    c0fc:	uxth	r2, r2
		} while (p < end);
    c0fe:	bcc.n	c0f0 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    c100:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    c104:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    c108:	cmp.w	r3, #1619001344	; 0x60800000
    c10c:	bne.n	c0ea <eeprom_initialize+0xa>
	initialized = 1;
    c10e:	ldr	r3, [pc, #16]	; (c120 <eeprom_initialize+0x40>)
    c110:	movs	r2, #1
    c112:	strb	r2, [r3, #0]
}
    c114:	pop	{r4, r5, pc}
    c116:	nop
    c118:	.word	0x607c1000
    c11c:	.word	0x20021c42
    c120:	.word	0x2002223e

0000c124 <eeprom_read_byte>:
{
    c124:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    c126:	movw	r3, #4283	; 0x10bb
{
    c12a:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    c12c:	cmp	r0, r3
    c12e:	bhi.n	c17c <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    c130:	ldr	r3, [pc, #76]	; (c180 <eeprom_read_byte+0x5c>)
    c132:	ldrb	r3, [r3, #0]
    c134:	cbnz	r3, c13a <eeprom_read_byte+0x16>
    c136:	bl	c0e0 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    c13a:	lsrs	r2, r4, #2
    c13c:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    c13e:	ldr	r0, [pc, #68]	; (c184 <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c140:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    c144:	udiv	r3, r2, r3
    c148:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c14c:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    c150:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c152:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    c156:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    c15a:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c15c:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    c160:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c162:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    c164:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    c168:	cmp	r3, r2
    c16a:	bcc.n	c16e <eeprom_read_byte+0x4a>
}
    c16c:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    c16e:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    c172:	uxtb	r5, r1
    c174:	cmp	r5, r4
    c176:	it	eq
    c178:	lsreq	r0, r1, #8
    c17a:	b.n	c168 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    c17c:	movs	r0, #255	; 0xff
    c17e:	b.n	c16c <eeprom_read_byte+0x48>
    c180:	.word	0x2002223e
    c184:	.word	0x20021c42

0000c188 <eeprom_read_block>:
{
    c188:	push	{r4, r5, r6, lr}
    c18a:	mov	r4, r0
    c18c:	adds	r5, r1, r2
    c18e:	mov	r0, r1
	while (len--) {
    c190:	cmp	r0, r5
    c192:	bne.n	c196 <eeprom_read_block+0xe>
}
    c194:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    c196:	adds	r6, r0, #1
    c198:	bl	c124 <eeprom_read_byte>
    c19c:	strb.w	r0, [r4], #1
    c1a0:	mov	r0, r6
    c1a2:	b.n	c190 <eeprom_read_block+0x8>

0000c1a4 <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    c1a4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1a8:	mov	r5, r1
    c1aa:	mov	r4, r2
	__disable_irq();
    c1ac:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c1ae:	ldr	r3, [pc, #192]	; (c270 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c1b0:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c1b4:	ldr	r2, [pc, #188]	; (c274 <eepromemu_flash_write+0xd0>)
    c1b6:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    c1b8:	movs	r2, #2
    c1ba:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    c1bc:	movs	r2, #0
    c1be:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c1c2:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    c1c6:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    c1c8:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    c1cc:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    c1d0:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c1d4:	mov.w	r2, #983040	; 0xf0000
    c1d8:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c1dc:	movs	r2, #1
    c1de:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c1e2:	bic.w	r2, r0, #31
	asm("dsb");
    c1e6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c1ea:	mov.w	r6, #3758153728	; 0xe000e000
    c1ee:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    c1f2:	adds	r2, #32
	} while (location < end_addr);
    c1f4:	cmp	r1, r2
    c1f6:	bhi.n	c1ee <eepromemu_flash_write+0x4a>
	asm("dsb");
    c1f8:	dsb	sy
	asm("isb");
    c1fc:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c200:	ldr	r2, [r3, #20]
    c202:	lsls	r6, r2, #31
    c204:	bpl.n	c200 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c206:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    c208:	ldr	r1, [pc, #108]	; (c278 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    c20a:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    c20e:	ldr	r7, [pc, #96]	; (c270 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c210:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    c212:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    c216:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c21a:	ldr.w	r8, [pc, #96]	; c27c <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    c21e:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c222:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    c224:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c228:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    c22c:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    c230:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c234:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    c238:	ldr	r3, [r7, #20]
    c23a:	lsls	r2, r3, #31
    c23c:	bpl.n	c24a <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    c23e:	movs	r3, #65	; 0x41
    c240:	str	r3, [r7, #20]
	flash_wait();
}
    c242:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    c246:	b.w	c088 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    c24a:	lsls	r1, r3, #25
    c24c:	bpl.n	c238 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    c24e:	cmp	r4, #8
    c250:	bhi.n	c26a <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    c252:	cbz	r4, c264 <eepromemu_flash_write+0xc0>
    c254:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c256:	mov	r1, r5
				len -= wrlen;
    c258:	subs	r4, r4, r6
				src += wrlen;
    c25a:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    c25c:	mov	r2, r6
    c25e:	mov	r0, r8
    c260:	bl	a8dc <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    c264:	movs	r3, #64	; 0x40
    c266:	str	r3, [r7, #20]
    c268:	b.n	c238 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    c26a:	movs	r6, #8
    c26c:	b.n	c256 <eepromemu_flash_write+0xb2>
    c26e:	nop
    c270:	.word	0x402a8000
    c274:	.word	0x5af05af0
    c278:	.word	0x08180432
    c27c:	.word	0x402a8180

0000c280 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    c280:	push	{r4}
	__disable_irq();
    c282:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    c284:	ldr	r3, [pc, #156]	; (c324 <eepromemu_flash_erase_sector+0xa4>)
    c286:	ldr	r2, [pc, #160]	; (c328 <eepromemu_flash_erase_sector+0xa8>)
    c288:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    c28a:	movs	r2, #2
    c28c:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    c28e:	movw	r2, #1030	; 0x406
    c292:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    c296:	movs	r2, #0
    c298:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    c29c:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    c2a0:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    c2a4:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c2a8:	mov.w	r2, #983040	; 0xf0000
    c2ac:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c2b0:	movs	r2, #1
    c2b2:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    c2b6:	bic.w	r2, r0, #4080	; 0xff0
    c2ba:	bic.w	r2, r2, #15
	asm("dsb");
    c2be:	dsb	sy
    c2c2:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    c2c6:	add.w	r1, r2, #4096	; 0x1000
    c2ca:	cmp	r1, r4
    c2cc:	ite	cc
    c2ce:	movcc	r1, #1
    c2d0:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    c2d2:	mov.w	r4, #3758153728	; 0xe000e000
    c2d6:	add.w	r1, r2, r1, lsl #5
    c2da:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c2de:	adds	r2, #32
	} while (location < end_addr);
    c2e0:	cmp	r2, r1
    c2e2:	bne.n	c2da <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    c2e4:	dsb	sy
	asm("isb");
    c2e8:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c2ec:	ldr	r2, [r3, #20]
    c2ee:	lsls	r1, r2, #31
    c2f0:	bpl.n	c2ec <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c2f2:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    c2f4:	ldr	r2, [pc, #52]	; (c32c <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c2f6:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    c2f8:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    c2fc:	ldr	r2, [pc, #48]	; (c330 <eepromemu_flash_erase_sector+0xb0>)
    c2fe:	ands	r2, r0
    c300:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    c304:	mov.w	r2, #983040	; 0xf0000
    c308:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    c30c:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    c310:	ldr	r3, [pc, #16]	; (c324 <eepromemu_flash_erase_sector+0xa4>)
    c312:	ldr	r2, [r3, #20]
    c314:	lsls	r2, r2, #31
    c316:	bpl.n	c312 <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c318:	movs	r2, #1
	flash_wait();
}
    c31a:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    c31e:	str	r2, [r3, #20]
	flash_wait();
    c320:	b.w	c088 <flash_wait>
    c324:	.word	0x402a8000
    c328:	.word	0x5af05af0
    c32c:	.word	0x08180420
    c330:	.word	0x00fff000

0000c334 <eeprom_write_byte>:
	if (addr > E2END) return;
    c334:	movw	r3, #4283	; 0x10bb
    c338:	cmp	r0, r3
{
    c33a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c33e:	mov	r4, r0
    c340:	sub	sp, #264	; 0x108
    c342:	mov	r9, r1
	if (addr > E2END) return;
    c344:	bhi.n	c3a6 <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    c346:	ldr	r3, [pc, #232]	; (c430 <eeprom_write_byte+0xfc>)
    c348:	ldrb	r3, [r3, #0]
    c34a:	cbnz	r3, c350 <eeprom_write_byte+0x1c>
    c34c:	bl	c0e0 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    c350:	lsrs	r6, r4, #2
    c352:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    c354:	ldr	r7, [pc, #220]	; (c434 <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c356:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    c35a:	udiv	r3, r6, r3
    c35e:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    c362:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    c366:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    c368:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c36a:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    c36e:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c372:	add.w	r5, r5, #1984	; 0x7c0
    c376:	lsls	r5, r5, #12
    c378:	mov	r8, r5
	end = p + sector_index[sector];
    c37a:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    c37e:	mov	r3, r5
	while (p < end) {
    c380:	cmp	r3, r0
    c382:	bcc.n	c3ac <eeprom_write_byte+0x78>
	if (data == olddata) return;
    c384:	cmp	r2, r9
    c386:	beq.n	c3a6 <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    c388:	cmp.w	sl, #2048	; 0x800
    c38c:	bcs.n	c3bc <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    c38e:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    c392:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    c396:	movs	r2, #2
    c398:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    c39a:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    c39e:	bl	c1a4 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    c3a2:	strh.w	sl, [r7, r6, lsl #1]
}
    c3a6:	add	sp, #264	; 0x108
    c3a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    c3ac:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    c3b0:	uxtb.w	ip, r1
    c3b4:	cmp	ip, r4
    c3b6:	it	eq
    c3b8:	lsreq	r2, r1, #8
    c3ba:	b.n	c380 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    c3bc:	mov.w	r2, #256	; 0x100
    c3c0:	movs	r1, #255	; 0xff
    c3c2:	add	r0, sp, #8
    c3c4:	bl	a898 <memset>
		while (p < end) {
    c3c8:	cmn.w	r5, #4096	; 0x1000
    c3cc:	movw	r3, #2049	; 0x801
    c3d0:	it	cs
    c3d2:	movcs	r3, #1
    c3d4:	add.w	r3, r5, r3, lsl #1
    c3d8:	mov	r1, r5
    c3da:	adds	r5, #2
    c3dc:	cmp	r5, r3
    c3de:	bne.n	c422 <eeprom_write_byte+0xee>
		buf[offset] = data;
    c3e0:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    c3e2:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    c3e4:	mov	r0, r8
		buf[offset] = data;
    c3e6:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    c3ea:	add	r4, sp, #8
		index = 0;
    c3ec:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    c3ee:	bl	c280 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    c3f2:	ldrb.w	r3, [r4], #1
    c3f6:	cmp	r3, #255	; 0xff
    c3f8:	beq.n	c414 <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    c3fa:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    c3fe:	movs	r2, #2
    c400:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    c404:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    c408:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    c40c:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    c410:	bl	c1a4 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    c414:	adds	r5, #1
    c416:	cmp.w	r5, #256	; 0x100
    c41a:	bne.n	c3f2 <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    c41c:	strh.w	r9, [r7, r6, lsl #1]
    c420:	b.n	c3a6 <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    c422:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    c424:	add	r0, sp, #8
    c426:	ldrb	r1, [r1, #0]
    c428:	lsrs	r2, r2, #8
    c42a:	strb	r2, [r0, r1]
    c42c:	b.n	c3d8 <eeprom_write_byte+0xa4>
    c42e:	nop
    c430:	.word	0x2002223e
    c434:	.word	0x20021c42

0000c438 <eeprom_write_block>:
{
    c438:	push	{r4, r5, r6, lr}
    c43a:	mov	r4, r0
    c43c:	mov	r0, r1
	while (len--) {
    c43e:	adds	r5, r4, r2
    c440:	cmp	r4, r5
    c442:	bne.n	c446 <eeprom_write_block+0xe>
}
    c444:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    c446:	adds	r6, r0, #1
    c448:	ldrb.w	r1, [r4], #1
    c44c:	bl	c334 <eeprom_write_byte>
    c450:	mov	r0, r6
    c452:	b.n	c440 <eeprom_write_block+0x8>

0000c454 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    c454:	ldr	r3, [r0, #0]
    c456:	cbz	r3, c46e <smalloc_verify_pool+0x1a>
    c458:	ldr	r0, [r0, #4]
    c45a:	cbz	r0, c470 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    c45c:	movs	r3, #12
    c45e:	udiv	r2, r0, r3
    c462:	mls	r0, r3, r2, r0
    c466:	clz	r0, r0
    c46a:	lsrs	r0, r0, #5
    c46c:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    c46e:	mov	r0, r3
	return 1;
}
    c470:	bx	lr

0000c472 <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    c472:	push	{r4, lr}
    c474:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    c476:	bl	c454 <smalloc_verify_pool>
    c47a:	mov	r4, r0
    c47c:	cbz	r0, c484 <sm_align_pool+0x12>
    c47e:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    c480:	mov	r0, r4
    c482:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    c484:	ldr	r3, [r1, #4]
    c486:	movs	r0, #12
    c488:	udiv	r2, r3, r0
    c48c:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    c490:	cbz	r2, c496 <sm_align_pool+0x24>
    c492:	subs	r3, r3, r2
    c494:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    c496:	ldr	r3, [r1, #4]
    c498:	cmp	r3, #240	; 0xf0
    c49a:	bhi.n	c47e <sm_align_pool+0xc>
		errno = ENOSPC;
    c49c:	bl	f37c <__errno>
    c4a0:	movs	r3, #28
    c4a2:	str	r3, [r0, #0]
		return 0;
    c4a4:	b.n	c480 <sm_align_pool+0xe>

0000c4a6 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    c4a6:	push	{r4, r5, r6, lr}
    c4a8:	mov	r6, r3
	if (!spool) {
    c4aa:	mov	r4, r0
    c4ac:	cbnz	r0, c4bc <sm_set_pool+0x16>
		errno = EINVAL;
    c4ae:	bl	f37c <__errno>
		return 0;
    c4b2:	mov	r5, r4
		errno = EINVAL;
    c4b4:	movs	r3, #22
    c4b6:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    c4b8:	mov	r0, r5
    c4ba:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    c4bc:	cbz	r1, c4c0 <sm_set_pool+0x1a>
    c4be:	cbnz	r2, c4f0 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    c4c0:	mov	r0, r4
    c4c2:	bl	c454 <smalloc_verify_pool>
    c4c6:	mov	r5, r0
    c4c8:	cbz	r0, c4e6 <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    c4ca:	ldr	r3, [r4, #8]
    c4cc:	cbz	r3, c4d8 <sm_set_pool+0x32>
    c4ce:	ldr	r2, [r4, #4]
    c4d0:	movs	r1, #0
    c4d2:	ldr	r0, [r4, #0]
    c4d4:	bl	a898 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    c4d8:	movs	r2, #16
    c4da:	movs	r1, #0
    c4dc:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    c4de:	bl	a898 <memset>
	return 1;
    c4e2:	movs	r5, #1
    c4e4:	b.n	c4b8 <sm_set_pool+0x12>
		errno = EINVAL;
    c4e6:	bl	f37c <__errno>
    c4ea:	movs	r3, #22
    c4ec:	str	r3, [r0, #0]
		return 0;
    c4ee:	b.n	c4b8 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    c4f0:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    c4f2:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    c4f6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    c4f8:	bl	c472 <sm_align_pool>
    c4fc:	mov	r5, r0
    c4fe:	cmp	r0, #0
    c500:	beq.n	c4b8 <sm_set_pool+0x12>
	if (do_zero) {
    c502:	cmp	r6, #0
    c504:	beq.n	c4e2 <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    c506:	ldr	r2, [r4, #4]
    c508:	movs	r1, #0
    c50a:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    c50c:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    c50e:	b.n	c4de <sm_set_pool+0x38>

0000c510 <Panic_Temp_isr>:
  unused_interrupt_vector();
    c510:	b.w	be50 <unused_interrupt_vector>

0000c514 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    c514:	ldr	r3, [pc, #72]	; (c560 <tempmonGetTemp+0x4c>)
    c516:	ldr.w	r2, [r3, #128]	; 0x80
    c51a:	lsls	r2, r2, #29
    c51c:	bpl.n	c516 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c51e:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c522:	ldr	r2, [pc, #64]	; (c564 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c524:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c528:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    c52c:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    c530:	ldr	r3, [pc, #52]	; (c568 <tempmonGetTemp+0x54>)
    c532:	vcvt.f32.u32	s0, s0
    c536:	vldr	s14, [r3]
    c53a:	vcvt.f32.s32	s15, s15
    c53e:	ldr	r3, [pc, #44]	; (c56c <tempmonGetTemp+0x58>)
    c540:	vcvt.f32.u32	s14, s14
    c544:	vsub.f32	s15, s15, s14
    c548:	vldr	s14, [r3]
    c54c:	ldr	r3, [pc, #32]	; (c570 <tempmonGetTemp+0x5c>)
    c54e:	vmul.f32	s15, s15, s14
    c552:	vldr	s13, [r3]
    c556:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    c55a:	vsub.f32	s0, s0, s14
    c55e:	bx	lr
    c560:	.word	0x400d8100
    c564:	.word	0x20021534
    c568:	.word	0x20021530
    c56c:	.word	0x20021538
    c570:	.word	0x2002153c

0000c574 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    c574:	cmp	r0, #54	; 0x36
{
    c576:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c578:	bhi.n	c592 <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    c57a:	lsls	r2, r0, #4
    c57c:	ldr	r3, [pc, #40]	; (c5a8 <digitalWrite+0x34>)
    c57e:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    c582:	ldr	r3, [r3, r2]
	mask = p->mask;
    c584:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    c586:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    c588:	tst	r4, r2
    c58a:	beq.n	c59a <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    c58c:	cbz	r1, c594 <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    c58e:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    c592:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    c594:	str.w	r2, [r3, #136]	; 0x88
    c598:	b.n	c592 <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c59a:	ldr	r3, [r0, #8]
		if (val) {
    c59c:	cbz	r1, c5a4 <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c59e:	ldr	r2, [pc, #12]	; (c5ac <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c5a0:	str	r2, [r3, #0]
    c5a2:	b.n	c592 <digitalWrite+0x1e>
    c5a4:	ldr	r2, [pc, #8]	; (c5b0 <digitalWrite+0x3c>)
    c5a6:	b.n	c5a0 <digitalWrite+0x2c>
    c5a8:	.word	0x200005b4
    c5ac:	.word	0x0001f038
    c5b0:	.word	0x00013038

0000c5b4 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    c5b4:	cmp	r0, #54	; 0x36
{
    c5b6:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    c5b8:	bhi.n	c5ea <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    c5ba:	ldr	r3, [pc, #76]	; (c608 <pinMode+0x54>)
    c5bc:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c5be:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c5c0:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    c5c2:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c5c6:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c5c8:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    c5cc:	beq.n	c5d2 <pinMode+0x1e>
    c5ce:	cmp	r1, #4
    c5d0:	bne.n	c5ec <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c5d2:	orrs	r4, r5
		if (mode == OUTPUT) {
    c5d4:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    c5d6:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    c5d8:	bne.n	c5de <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    c5da:	movs	r2, #56	; 0x38
    c5dc:	b.n	c5e2 <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    c5de:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c5e2:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    c5e4:	movs	r2, #21
    c5e6:	ldr	r3, [r0, #4]
    c5e8:	str	r2, [r3, #0]
}
    c5ea:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    c5ec:	bic.w	r4, r4, r5
    c5f0:	str	r4, [r2, #4]
		if (mode == INPUT) {
    c5f2:	cmp	r1, #0
    c5f4:	beq.n	c5da <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    c5f6:	cmp	r1, #2
    c5f8:	bne.n	c5fe <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    c5fa:	ldr	r2, [pc, #16]	; (c60c <pinMode+0x58>)
    c5fc:	b.n	c5e2 <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    c5fe:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    c600:	ite	eq
    c602:	ldreq	r2, [pc, #12]	; (c610 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    c604:	ldrne	r2, [pc, #12]	; (c614 <pinMode+0x60>)
    c606:	b.n	c5e2 <pinMode+0x2e>
    c608:	.word	0x200005b4
    c60c:	.word	0x0001f038
    c610:	.word	0x00013038
    c614:	.word	0x00010038

0000c618 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c618:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    c61c:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    c61e:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    c622:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    c624:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    c626:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    c62a:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c62e:	ldrh.w	r3, [r0, #392]	; 0x188
    c632:	uxth	r3, r3
{
    c634:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c636:	orr.w	r3, r3, #240	; 0xf0
    c63a:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c63c:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c640:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    c644:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    c648:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c64c:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    c650:	adds	r2, #1
    c652:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    c654:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    c656:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    c658:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    c65a:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    c65c:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    c65e:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    c660:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    c662:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    c664:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    c666:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    c668:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    c66a:	bne.n	c64c <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    c66c:	ldrh.w	r3, [r0, #392]	; 0x188
    c670:	uxth	r3, r3
    c672:	orr.w	r3, r3, #15
    c676:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    c67a:	ldrh.w	r3, [r0, #392]	; 0x188
    c67e:	uxth	r3, r3
    c680:	orr.w	r3, r3, #3840	; 0xf00
    c684:	strh.w	r3, [r0, #392]	; 0x188
}
    c688:	pop	{r4, r5, r6, r7, pc}

0000c68a <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c68a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c68c:	mov.w	ip, #15
{
    c690:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    c692:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c694:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c698:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c69c:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c6a0:	add.w	r3, r0, r2, lsl #5
    c6a4:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    c6a6:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c6a8:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c6aa:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c6ac:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c6ae:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c6b2:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c6b4:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c6b6:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    c6b8:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c6ba:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c6bc:	bne.n	c6a0 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    c6be:	pop	{r4, r5, r6, r7, pc}

0000c6c0 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c6c0:	ldr	r2, [pc, #84]	; (c718 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c6c2:	ldr	r0, [pc, #88]	; (c71c <pwm_init+0x5c>)
{
    c6c4:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c6c6:	ldr	r3, [r2, #120]	; 0x78
    c6c8:	orr.w	r3, r3, #16711680	; 0xff0000
    c6cc:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c6ce:	ldr.w	r3, [r2, #128]	; 0x80
    c6d2:	orr.w	r3, r3, #4227858432	; 0xfc000000
    c6d6:	orr.w	r3, r3, #196608	; 0x30000
    c6da:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c6de:	bl	c618 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c6e2:	add.w	r0, r0, #16384	; 0x4000
    c6e6:	bl	c618 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c6ea:	add.w	r0, r0, #16384	; 0x4000
    c6ee:	bl	c618 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c6f2:	add.w	r0, r0, #16384	; 0x4000
    c6f6:	bl	c618 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c6fa:	sub.w	r0, r0, #2146304	; 0x20c000
    c6fe:	bl	c68a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c702:	add.w	r0, r0, #16384	; 0x4000
    c706:	bl	c68a <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c70a:	add.w	r0, r0, #16384	; 0x4000
}
    c70e:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c712:	b.w	c68a <quadtimer_init>
    c716:	nop
    c718:	.word	0x400fc000
    c71c:	.word	0x403dc000

0000c720 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c720:	ldr	r2, [pc, #8]	; (c72c <txEvent_event+0xc>)
    c722:	ldr	r3, [r2, #0]
    c724:	adds	r3, #1
    c726:	str	r3, [r2, #0]
    c728:	bx	lr
    c72a:	nop
    c72c:	.word	0x20021488

0000c730 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c730:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c732:	ldr	r4, [pc, #40]	; (c75c <rx_event+0x2c>)
	int i = t->callback_param;
    c734:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c736:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c738:	ldr	r2, [pc, #36]	; (c760 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c73a:	adds	r3, #1
    c73c:	cmp	r3, #5
    c73e:	it	cs
    c740:	movcs	r3, #0
	rx_list[head] = i;
    c742:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c744:	ldr	r1, [r0, #4]
    c746:	ldr	r2, [pc, #28]	; (c764 <rx_event+0x34>)
    c748:	ubfx	r1, r1, #16, #15
    c74c:	ldrh	r2, [r2, #0]
    c74e:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c750:	ldr	r1, [pc, #20]	; (c768 <rx_event+0x38>)
    c752:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c756:	uxtb	r3, r3
    c758:	strb	r3, [r4, #0]
}
    c75a:	pop	{r4, pc}
    c75c:	.word	0x20022298
    c760:	.word	0x200222a2
    c764:	.word	0x20021c40
    c768:	.word	0x2002151c

0000c76c <rx_queue_transfer>:
{
    c76c:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c76e:	ldr	r1, [pc, #80]	; (c7c0 <rx_queue_transfer+0x54>)
{
    c770:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c772:	ldr	r7, [pc, #80]	; (c7c4 <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c774:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c778:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c77a:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c77c:	add	r0, r1
	asm("dsb");
    c77e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c782:	mov.w	r4, #3758153728	; 0xe000e000
    c786:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c78a:	adds	r2, #32
	} while (location < end_addr);
    c78c:	cmp	r0, r2
    c78e:	bhi.n	c786 <rx_queue_transfer+0x1a>
	asm("dsb");
    c790:	dsb	sy
	asm("isb");
    c794:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c798:	ldr	r5, [pc, #44]	; (c7c8 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c79a:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c79e:	ldrh	r2, [r7, #0]
    c7a0:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c7a4:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c7a8:	mov	r0, r5
    c7aa:	bl	bab4 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c7ae:	mov	r1, r5
    c7b0:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c7b2:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c7b6:	bl	bb04 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c7ba:	str.w	r6, [r4, #268]	; 0x10c
}
    c7be:	pop	{r3, r4, r5, r6, r7, pc}
    c7c0:	.word	0x20201000
    c7c4:	.word	0x20021c40
    c7c8:	.word	0x20004c80

0000c7cc <usb_mtp_configure>:
	if (usb_high_speed) {
    c7cc:	ldr	r3, [pc, #120]	; (c848 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c7ce:	movs	r2, #128	; 0x80
    c7d0:	movs	r1, #0
    c7d2:	ldr	r0, [pc, #120]	; (c84c <usb_mtp_configure+0x80>)
{
    c7d4:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c7d6:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c7d8:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c7da:	ldr	r6, [pc, #116]	; (c850 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c7dc:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c7de:	ldr	r3, [pc, #116]	; (c854 <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c7e0:	ite	eq
    c7e2:	moveq	r5, #64	; 0x40
    c7e4:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    c7e8:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c7ea:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c7ec:	bl	a898 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c7f0:	movs	r2, #128	; 0x80
    c7f2:	movs	r1, #0
    c7f4:	ldr	r0, [pc, #96]	; (c858 <usb_mtp_configure+0x8c>)
    c7f6:	bl	a898 <memset>
	tx_head = 0;
    c7fa:	ldr	r3, [pc, #96]	; (c85c <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c7fc:	mov	r2, r4
    c7fe:	mov	r1, r5
	tx_head = 0;
    c800:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c802:	movs	r0, #4
	rx_head = 0;
    c804:	ldr	r3, [pc, #88]	; (c860 <usb_mtp_configure+0x94>)
    c806:	strb	r4, [r3, #0]
	rx_tail = 0;
    c808:	ldr	r3, [pc, #88]	; (c864 <usb_mtp_configure+0x98>)
    c80a:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c80c:	mov	r3, r4
    c80e:	bl	ba74 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c812:	mov	r2, r4
    c814:	ldrh	r1, [r6, #0]
    c816:	movs	r0, #4
    c818:	ldr	r3, [pc, #76]	; (c868 <usb_mtp_configure+0x9c>)
    c81a:	bl	ba34 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c81e:	mov	r2, r4
    c820:	ldr	r3, [pc, #72]	; (c86c <usb_mtp_configure+0xa0>)
    c822:	movs	r1, #32
    c824:	movs	r0, #5
    c826:	bl	ba74 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c82a:	mov	r0, r4
    c82c:	bl	c76c <rx_queue_transfer>
    c830:	movs	r0, #1
    c832:	bl	c76c <rx_queue_transfer>
    c836:	movs	r0, #2
    c838:	bl	c76c <rx_queue_transfer>
    c83c:	movs	r0, #3
}
    c83e:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c842:	b.w	c76c <rx_queue_transfer>
    c846:	nop
    c848:	.word	0x200222b0
    c84c:	.word	0x20004d80
    c850:	.word	0x20021c40
    c854:	.word	0x20021cc8
    c858:	.word	0x20004c80
    c85c:	.word	0x200222ac
    c860:	.word	0x20022298
    c864:	.word	0x200222a8
    c868:	.word	0x0000c731
    c86c:	.word	0x0000c721

0000c870 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c870:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c874:	ldr	r7, [pc, #112]	; (c8e8 <usb_mtp_recv+0x78>)
{
    c876:	mov	r5, r1
	uint32_t tail = rx_tail;
    c878:	ldr	r6, [pc, #112]	; (c8ec <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    c87a:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    c87e:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c880:	ldr.w	r9, [pc, #120]	; c8fc <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c884:	uxtb	r4, r3
		if (tail != rx_head) break;
    c886:	ldr.w	sl, [pc, #120]	; c900 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c88a:	ldrb.w	r3, [r9]
    c88e:	cbz	r3, c8dc <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    c890:	ldrb.w	r3, [sl]
    c894:	cmp	r4, r3
    c896:	bne.n	c8ac <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c898:	ldr	r3, [r7, #0]
    c89a:	str	r0, [sp, #4]
    c89c:	sub.w	r3, r3, r8
    c8a0:	cmp	r3, r5
    c8a2:	bcs.n	c8e2 <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    c8a4:	bl	caa0 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c8a8:	ldr	r0, [sp, #4]
    c8aa:	b.n	c88a <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    c8ac:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c8ae:	ldr	r2, [pc, #64]	; (c8f0 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c8b0:	ldr	r1, [pc, #64]	; (c8f4 <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    c8b2:	cmp	r3, #5
    c8b4:	it	cs
    c8b6:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c8b8:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c8ba:	ldr	r2, [pc, #60]	; (c8f8 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    c8bc:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    c8c0:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c8c4:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c8c6:	mov	r2, r4
	rx_tail = tail;
    c8c8:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c8ca:	bl	a8dc <memcpy>
	rx_queue_transfer(i);
    c8ce:	mov	r0, r5
    c8d0:	bl	c76c <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c8d4:	mov	r0, r4
    c8d6:	add	sp, #8
    c8d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c8dc:	mov.w	r4, #4294967295
    c8e0:	b.n	c8d4 <usb_mtp_recv+0x64>
			return 0;
    c8e2:	movs	r4, #0
    c8e4:	b.n	c8d4 <usb_mtp_recv+0x64>
    c8e6:	nop
    c8e8:	.word	0x20021bd0
    c8ec:	.word	0x200222a8
    c8f0:	.word	0x200222a2
    c8f4:	.word	0x20201000
    c8f8:	.word	0x2002151c
    c8fc:	.word	0x200222af
    c900:	.word	0x20022298

0000c904 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c904:	ldr	r3, [pc, #28]	; (c924 <usb_mtp_available+0x20>)
    c906:	ldrb	r3, [r3, #0]
    c908:	and.w	r0, r3, #255	; 0xff
    c90c:	cbz	r3, c922 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c90e:	ldr	r3, [pc, #24]	; (c928 <usb_mtp_available+0x24>)
    c910:	ldrb	r2, [r3, #0]
    c912:	ldr	r3, [pc, #24]	; (c92c <usb_mtp_available+0x28>)
    c914:	ldrb	r3, [r3, #0]
    c916:	cmp	r2, r3
    c918:	beq.n	c920 <usb_mtp_available+0x1c>
    c91a:	ldr	r3, [pc, #20]	; (c930 <usb_mtp_available+0x2c>)
    c91c:	ldrh	r0, [r3, #0]
    c91e:	bx	lr
	if (!usb_configuration) return 0;
    c920:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c922:	bx	lr
    c924:	.word	0x200222af
    c928:	.word	0x20022298
    c92c:	.word	0x200222a8
    c930:	.word	0x20021c40

0000c934 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c934:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c938:	ldr	r6, [pc, #164]	; (c9e0 <usb_mtp_send+0xac>)
{
    c93a:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c93c:	ldr	r7, [pc, #164]	; (c9e4 <usb_mtp_send+0xb0>)
{
    c93e:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c940:	ldrb	r3, [r6, #0]
{
    c942:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c944:	ldr.w	r9, [pc, #168]	; c9f0 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c948:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c94c:	ldr.w	fp, [pc, #164]	; c9f4 <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c950:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c954:	ldrb.w	r3, [fp]
    c958:	cmp	r3, #0
    c95a:	beq.n	c9d4 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c95c:	mov	r0, r7
    c95e:	bl	bb20 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c962:	lsls	r3, r0, #24
    c964:	bpl.n	c978 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c966:	ldr.w	r3, [r9]
    c96a:	sub.w	r3, r3, sl
    c96e:	cmp	r3, r5
    c970:	bhi.n	c9da <usb_mtp_send+0xa6>
		yield();
    c972:	bl	caa0 <yield>
	while (1) {
    c976:	b.n	c954 <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c978:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c97a:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c97c:	ldr	r5, [pc, #104]	; (c9e8 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c97e:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c980:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c984:	mov	r0, r5
    c986:	bl	a8dc <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c98a:	ldr	r2, [pc, #96]	; (c9ec <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c98c:	mov	r3, r5
    c98e:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c990:	add	r2, r5
	asm("dsb");
    c992:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c996:	mov.w	r1, #3758153728	; 0xe000e000
    c99a:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c99e:	adds	r3, #32
	} while (location < end_addr);
    c9a0:	cmp	r2, r3
    c9a2:	bhi.n	c99a <usb_mtp_send+0x66>
	asm("dsb");
    c9a4:	dsb	sy
	asm("isb");
    c9a8:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c9ac:	movs	r3, #0
    c9ae:	mov	r2, r4
    c9b0:	mov	r1, r5
    c9b2:	mov	r0, r7
    c9b4:	bl	bab4 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c9b8:	movs	r0, #4
    c9ba:	mov	r1, r7
    c9bc:	bl	bae0 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c9c0:	ldrb	r3, [r6, #0]
	return len;
    c9c2:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c9c4:	adds	r3, #1
    c9c6:	uxtb	r3, r3
    c9c8:	cmp	r3, #3
    c9ca:	it	hi
    c9cc:	movhi	r3, #0
    c9ce:	strb	r3, [r6, #0]
}
    c9d0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c9d4:	mov.w	r0, #4294967295
    c9d8:	b.n	c9d0 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c9da:	movs	r0, #0
    c9dc:	b.n	c9d0 <usb_mtp_send+0x9c>
    c9de:	nop
    c9e0:	.word	0x200222ac
    c9e4:	.word	0x20004d80
    c9e8:	.word	0x20201800
    c9ec:	.word	0x20021cc8
    c9f0:	.word	0x20021bd0
    c9f4:	.word	0x200222af

0000c9f8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c9f8:	ldr	r3, [pc, #68]	; (ca40 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c9fa:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c9fc:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    ca00:	ldr	r3, [pc, #64]	; (ca44 <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    ca02:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    ca06:	cmp	r0, r3
{
    ca08:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    ca0a:	it	cc
    ca0c:	movcc	r3, #10
{
    ca0e:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    ca10:	it	cc
    ca12:	mulcc	r0, r3
	ultoa(num, buf, 10);
    ca14:	add	r1, sp, #4
    ca16:	bl	bb48 <ultoa>
	for (i=0; i<10; i++) {
    ca1a:	ldr	r0, [pc, #44]	; (ca48 <usb_init_serialnumber+0x50>)
    ca1c:	add	r2, sp, #4
    ca1e:	movs	r1, #0
    ca20:	mov	r5, r0
		char c = buf[i];
    ca22:	ldrb.w	r4, [r2], #1
		if (!c) break;
    ca26:	mov	r3, r1
	for (i=0; i<10; i++) {
    ca28:	adds	r1, #1
		if (!c) break;
    ca2a:	cbz	r4, ca36 <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    ca2c:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    ca2e:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    ca32:	bne.n	ca22 <usb_init_serialnumber+0x2a>
    ca34:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    ca36:	adds	r3, #1
    ca38:	lsls	r3, r3, #1
    ca3a:	strb	r3, [r5, #0]
}
    ca3c:	add	sp, #20
    ca3e:	pop	{r4, r5, pc}
    ca40:	.word	0x401f4400
    ca44:	.word	0x00989680
    ca48:	.word	0x20002252

0000ca4c <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    ca4c:	ldr	r1, [pc, #68]	; (ca94 <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    ca4e:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    ca50:	ldr	r3, [r1, #0]
    ca52:	cbz	r3, ca68 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    ca54:	mrs	r3, IPSR
		if (ipsr != 0) return;
    ca58:	cbnz	r3, ca68 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    ca5a:	mrs	r2, PRIMASK
		__disable_irq();
    ca5e:	cpsid	i
		EventResponder *first = firstYield;
    ca60:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    ca62:	cbnz	r0, ca6a <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    ca64:	cbnz	r2, ca68 <EventResponder::runFromYield()+0x1c>
    ca66:	cpsie	i
	}
    ca68:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    ca6a:	ldr	r4, [pc, #44]	; (ca98 <EventResponder::runFromYield()+0x4c>)
    ca6c:	ldrb	r5, [r4, #0]
    ca6e:	cmp	r5, #0
    ca70:	bne.n	ca64 <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    ca72:	movs	r3, #1
    ca74:	strb	r3, [r4, #0]
		firstYield = first->_next;
    ca76:	ldr	r3, [r0, #20]
    ca78:	str	r3, [r1, #0]
		if (firstYield) {
    ca7a:	cbz	r3, ca8e <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    ca7c:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    ca7e:	cbnz	r2, ca82 <EventResponder::runFromYield()+0x36>
    ca80:	cpsie	i
		first->_triggered = false;
    ca82:	movs	r5, #0
		(*(first->_function))(*first);
    ca84:	ldr	r3, [r0, #8]
		first->_triggered = false;
    ca86:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    ca88:	blx	r3
		runningFromYield = false;
    ca8a:	strb	r5, [r4, #0]
    ca8c:	b.n	ca68 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    ca8e:	ldr	r1, [pc, #12]	; (ca9c <EventResponder::runFromYield()+0x50>)
    ca90:	str	r3, [r1, #0]
    ca92:	b.n	ca7e <EventResponder::runFromYield()+0x32>
    ca94:	.word	0x20021260
    ca98:	.word	0x2002218f
    ca9c:	.word	0x2002126c

0000caa0 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    caa0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    caa4:	ldr	r3, [pc, #92]	; (cb04 <yield+0x64>)
    caa6:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    caa8:	cbz	r4, cad2 <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    caaa:	ldr	r5, [pc, #92]	; (cb08 <yield+0x68>)
    caac:	ldrb	r3, [r5, #0]
    caae:	cbnz	r3, cad2 <yield+0x32>
	running = 1;
    cab0:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    cab2:	lsls	r1, r4, #31
	running = 1;
    cab4:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    cab6:	bpl.n	cac2 <yield+0x22>
        virtual int available() { return usb_serial_available(); }
    cab8:	bl	adc4 <usb_serial_available>
		if (Serial.available()) serialEvent();
    cabc:	cbz	r0, cac2 <yield+0x22>
    cabe:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    cac2:	lsls	r2, r4, #30
    cac4:	bmi.n	caf8 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    cac6:	movs	r3, #0
    cac8:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    caca:	lsls	r3, r4, #29
    cacc:	bpl.n	cad2 <yield+0x32>
		EventResponder::runFromYield();
    cace:	bl	ca4c <EventResponder::runFromYield()>
	}
};
    cad2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    cad6:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    cada:	ldr	r3, [r7, #0]
    cadc:	mov	r0, r7
    cade:	ldr	r3, [r3, #16]
    cae0:	blx	r3
    cae2:	cbz	r0, caea <yield+0x4a>
    cae4:	ldr	r3, [r7, #20]
    cae6:	ldr	r3, [r3, #8]
    cae8:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    caea:	adds	r6, #1
    caec:	ldrb.w	r2, [r8]
    caf0:	uxtb	r3, r6
    caf2:	cmp	r2, r3
    caf4:	bhi.n	cad6 <yield+0x36>
    caf6:	b.n	cac6 <yield+0x26>
    caf8:	movs	r6, #0
    cafa:	ldr.w	r8, [pc, #16]	; cb0c <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    cafe:	ldr.w	r9, [pc, #16]	; cb10 <yield+0x70>
    cb02:	b.n	caec <yield+0x4c>
    cb04:	.word	0x200222b2
    cb08:	.word	0x20022191
    cb0c:	.word	0x20022190
    cb10:	.word	0x20021270

0000cb14 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    cb14:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    cb16:	ldr	r5, [pc, #44]	; (cb44 <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    cb18:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    cb1a:	ldr	r6, [pc, #44]	; (cb48 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    cb1c:	mrs	r2, PRIMASK
		__disable_irq();
    cb20:	cpsid	i
		EventResponder *first = firstInterrupt;
    cb22:	ldr	r0, [r5, #0]
		if (first) {
    cb24:	cbz	r0, cb3e <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    cb26:	ldr	r3, [r0, #20]
    cb28:	str	r3, [r5, #0]
			if (firstInterrupt) {
    cb2a:	cbz	r3, cb3a <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    cb2c:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    cb2e:	cbnz	r2, cb32 <EventResponder::runFromInterrupt()+0x1e>
    cb30:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    cb32:	ldr	r3, [r0, #8]
			first->_triggered = false;
    cb34:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    cb36:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    cb38:	b.n	cb1c <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    cb3a:	str	r3, [r6, #0]
    cb3c:	b.n	cb2e <EventResponder::runFromInterrupt()+0x1a>
    cb3e:	cbnz	r2, cb42 <EventResponder::runFromInterrupt()+0x2e>
    cb40:	cpsie	i
}
    cb42:	pop	{r4, r5, r6, pc}
    cb44:	.word	0x20021268
    cb48:	.word	0x20021264

0000cb4c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    cb4c:	b.w	cb14 <EventResponder::runFromInterrupt()>

0000cb50 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    cb50:	ldr	r3, [pc, #16]	; (cb64 <systick_isr+0x14>)
    cb52:	ldr	r2, [r3, #4]
    cb54:	ldr	r3, [pc, #16]	; (cb68 <systick_isr+0x18>)
    cb56:	str	r2, [r3, #0]
	systick_millis_count++;
    cb58:	ldr	r2, [pc, #16]	; (cb6c <systick_isr+0x1c>)
    cb5a:	ldr	r3, [r2, #0]
    cb5c:	adds	r3, #1
    cb5e:	str	r3, [r2, #0]
}
    cb60:	bx	lr
    cb62:	nop
    cb64:	.word	0xe0001000
    cb68:	.word	0x20021bcc
    cb6c:	.word	0x20021bd0

0000cb70 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    cb70:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    cb72:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    cb74:	ldr	r4, [pc, #136]	; (cc00 <DMAChannel::begin(bool)+0x90>)
    cb76:	cbnz	r1, cb9c <DMAChannel::begin(bool)+0x2c>
    cb78:	ldr	r1, [r0, #0]
    cb7a:	cbz	r1, cb9c <DMAChannel::begin(bool)+0x2c>
    cb7c:	ldrb	r3, [r0, #4]
    cb7e:	cmp	r3, #15
    cb80:	bhi.n	cb9c <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    cb82:	ldrh	r2, [r4, #0]
    cb84:	asrs	r2, r3
    cb86:	lsls	r2, r2, #31
    cb88:	bpl.n	cb9c <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    cb8a:	add.w	r3, r3, #33554432	; 0x2000000
    cb8e:	add.w	r3, r3, #29824	; 0x7480
    cb92:	cmp.w	r1, r3, lsl #5
    cb96:	bne.n	cb9c <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    cb98:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    cb9a:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    cb9c:	ldrh	r1, [r4, #0]
    cb9e:	movs	r3, #0
    cba0:	asr.w	r2, r1, r3
    cba4:	ands.w	r2, r2, #1
    cba8:	bne.n	cbf0 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    cbaa:	movs	r5, #1
    cbac:	lsls	r5, r3
    cbae:	orrs	r1, r5
    cbb0:	strh	r1, [r4, #0]
			__enable_irq();
    cbb2:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cbb4:	ldr	r5, [pc, #76]	; (cc04 <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    cbb6:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cbb8:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    cbbc:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cbbe:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cbc0:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cbc4:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cbc8:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    cbca:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    cbcc:	movw	r5, #1154	; 0x482
    cbd0:	ldr	r1, [pc, #52]	; (cc08 <DMAChannel::begin(bool)+0x98>)
    cbd2:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    cbd4:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    cbd6:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    cbd8:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    cbda:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    cbdc:	str	r3, [r0, #0]
	*p++ = 0;
    cbde:	strd	r2, r2, [r3]
	*p++ = 0;
    cbe2:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    cbe6:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    cbea:	strd	r2, r2, [r3, #24]
    cbee:	b.n	cb9a <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    cbf0:	adds	r3, #1
    cbf2:	cmp	r3, #16
    cbf4:	bne.n	cba0 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    cbf6:	cpsie	i
			TCD = (TCD_t *)0;
    cbf8:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    cbfa:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    cbfc:	str	r2, [r0, #0]
			return; // no more channels available
    cbfe:	b.n	cb9a <DMAChannel::begin(bool)+0x2a>
    cc00:	.word	0x20021c16
    cc04:	.word	0x400fc000
    cc08:	.word	0x400e8000

0000cc0c <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    cc0c:	ldrb	r3, [r0, #4]
    cc0e:	cmp	r3, #15
    cc10:	bhi.n	cc32 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    cc12:	ldr	r2, [pc, #32]	; (cc34 <DMAChannel::release()+0x28>)
    cc14:	strb	r3, [r2, #26]
	__disable_irq();
    cc16:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    cc18:	ldr	r1, [pc, #28]	; (cc38 <DMAChannel::release()+0x2c>)
    cc1a:	movs	r2, #1
    cc1c:	ldrb	r3, [r0, #4]
    cc1e:	lsls	r2, r3
    cc20:	ldrh	r3, [r1, #0]
    cc22:	bic.w	r3, r3, r2
    cc26:	strh	r3, [r1, #0]
	__enable_irq();
    cc28:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    cc2a:	movs	r3, #16
    cc2c:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    cc2e:	movs	r3, #0
    cc30:	str	r3, [r0, #0]
}
    cc32:	bx	lr
    cc34:	.word	0x400e8000
    cc38:	.word	0x20021c16

0000cc3c <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    cc3c:	push	{r0, r1, r4, lr}
    cc3e:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
    cc40:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    cc42:	cbz	r1, cc5c <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    cc44:	str	r1, [sp, #4]
    cc46:	bl	f490 <strlen>
    cc4a:	ldr	r3, [r4, #0]
    cc4c:	mov	r2, r0
    cc4e:	ldr	r1, [sp, #4]
    cc50:	mov	r0, r4
    cc52:	ldr	r3, [r3, #4]
    cc54:	add	sp, #8
    cc56:	ldmia.w	sp!, {r4, lr}
    cc5a:	bx	r3
    cc5c:	add	sp, #8
    cc5e:	pop	{r4, pc}

0000cc60 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    cc60:	push	{r3, lr}
    cc62:	bl	cc3c <Print::write(char const*)>
    cc66:	pop	{r3, pc}

0000cc68 <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    cc68:	movs	r3, #0
    cc6a:	movs	r2, #10
    cc6c:	b.w	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000cc70 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    cc70:	movs	r3, #0
    cc72:	uxtb	r2, r2
    cc74:	b.w	ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000cc78 <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
    cc78:	push	{r3, r4, r5, lr}
    cc7a:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
    cc7c:	bl	cc3c <Print::write(char const*)>
    cc80:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
    cc82:	mov	r0, r5
    cc84:	bl	cde0 <Print::println()>
    cc88:	add	r0, r4
    cc8a:	pop	{r3, r4, r5, pc}

0000cc8c <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    cc8c:	push	{r3, r4, r5, lr}
    cc8e:	mov	r5, r0
    cc90:	bl	cc70 <Print::print(unsigned long, int)>
    cc94:	mov	r4, r0
    cc96:	mov	r0, r5
    cc98:	bl	cde0 <Print::println()>
    cc9c:	add	r0, r4
    cc9e:	pop	{r3, r4, r5, pc}

0000cca0 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    cca0:	movs	r2, #0
    cca2:	movs	r3, #1
    cca4:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    cca6:	push	{r4, lr}
		while (len > 0) {
    cca8:	cmp	r1, #0
    ccaa:	sub.w	r4, r0, r1
    ccae:	bgt.n	ccb8 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    ccb0:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    ccb2:	orr.w	r0, r3, r2, lsl #16
    ccb6:	pop	{r4, pc}
			a += *p++;
    ccb8:	ldrh	r4, [r4, #0]
			len -= 2;
    ccba:	subs	r1, #2
			a += *p++;
    ccbc:	uxtah	r3, r3, r4
			b += a;
    ccc0:	add	r2, r3
			len -= 2;
    ccc2:	b.n	cca8 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000ccc4 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    ccc4:	b.w	add8 <usb_serial_flush_input>

0000ccc8 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    ccc8:	b.w	ad80 <usb_serial_peekchar>

0000cccc <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    cccc:	b.w	ae38 <usb_serial_getchar>

0000ccd0 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    ccd0:	b.w	adc4 <usb_serial_available>

0000ccd4 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ccd4:	b.w	b048 <usb_serial_flush_output>

0000ccd8 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ccd8:	b.w	affc <usb_serial_write_buffer_free>

0000ccdc <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ccdc:	mov	r0, r1
    ccde:	mov	r1, r2
    cce0:	b.w	ae58 <usb_serial_write>

0000cce4 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    cce4:	mov	r0, r1
    cce6:	b.w	afe4 <usb_serial_putchar>

0000ccea <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    ccea:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    ccec:	bl	7f8 <setup>
	while (1) {
		loop();
    ccf0:	bl	2b8 <loop>
		yield();
    ccf4:	bl	caa0 <yield>
	while (1) {
    ccf8:	b.n	ccf0 <main+0x6>
	...

0000ccfc <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    ccfc:	push	{r4, r5, r6, lr}
    ccfe:	ldr	r5, [pc, #36]	; (cd24 <Stream::timedRead()+0x28>)
    cd00:	mov	r4, r0
    cd02:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    cd04:	ldr	r3, [r4, #0]
    cd06:	mov	r0, r4
    cd08:	ldr	r3, [r3, #20]
    cd0a:	blx	r3
    if (c >= 0) return c;
    cd0c:	cmp	r0, #0
    cd0e:	bge.n	cd22 <Stream::timedRead()+0x26>
    yield();
    cd10:	bl	caa0 <yield>
    cd14:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    cd16:	ldr	r2, [r4, #8]
    cd18:	subs	r3, r3, r6
    cd1a:	cmp	r3, r2
    cd1c:	bcc.n	cd04 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    cd1e:	mov.w	r0, #4294967295
}
    cd22:	pop	{r4, r5, r6, pc}
    cd24:	.word	0x20021bd0

0000cd28 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    cd28:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd2c:	mov	r6, r0
    cd2e:	mov	r7, r1
    cd30:	mov	r4, r3
	if (buffer == nullptr) return 0;
    cd32:	mov	r5, r2
    cd34:	cbz	r2, cd66 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    cd36:	cbz	r3, cd58 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    cd38:	add.w	r8, r3, #4294967295
	size_t index = 0;
    cd3c:	movs	r4, #0
	while (index < length) {
    cd3e:	cmp	r4, r8
    cd40:	bcs.n	cd54 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    cd42:	mov	r0, r6
    cd44:	bl	ccfc <Stream::timedRead()>
		if (c == terminator) break;
    cd48:	cmp	r7, r0
    cd4a:	beq.n	cd54 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    cd4c:	cmp	r0, #0
    cd4e:	bge.n	cd5e <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    cd50:	movs	r3, #1
    cd52:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    cd54:	movs	r3, #0
    cd56:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    cd58:	mov	r0, r4
    cd5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    cd5e:	adds	r4, #1
		*buffer++ = (char)c;
    cd60:	strb.w	r0, [r5], #1
		index++;
    cd64:	b.n	cd3e <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    cd66:	mov	r4, r2
    cd68:	b.n	cd58 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000cd6a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    cd6a:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cd6c:	push	{r4, r5, r6, r7, lr}
		base = 10;
    cd6e:	it	eq
    cd70:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    cd72:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    cd74:	cbnz	r1, cda2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    cd76:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    cd78:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    cd7a:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    cd7e:	cbz	r3, cd90 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    cd80:	subs	r3, r4, #1
		buf[i] = '-';
    cd82:	add	r2, sp, #40	; 0x28
		i--;
    cd84:	uxtb	r4, r3
		buf[i] = '-';
    cd86:	uxtab	r3, r2, r3
    cd8a:	movs	r2, #45	; 0x2d
    cd8c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    cd90:	ldr	r3, [r0, #0]
    cd92:	add	r1, sp, #4
    cd94:	rsb	r2, r4, #34	; 0x22
    cd98:	ldr	r3, [r3, #4]
    cd9a:	add	r1, r4
    cd9c:	blx	r3
}
    cd9e:	add	sp, #44	; 0x2c
    cda0:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    cda2:	movs	r4, #33	; 0x21
			digit = n % base;
    cda4:	udiv	r6, r1, r2
    cda8:	mls	r7, r2, r6, r1
    cdac:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cdae:	cmp	r7, #9
    cdb0:	add.w	r7, r4, #40	; 0x28
    cdb4:	ite	ls
    cdb6:	addls	r5, #48	; 0x30
    cdb8:	addhi	r5, #55	; 0x37
    cdba:	add	r7, sp
			if (n == 0) break;
    cdbc:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cdbe:	uxtb	r5, r5
    cdc0:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    cdc4:	bhi.n	cd7e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    cdc6:	subs	r4, #1
			n /= base;
    cdc8:	mov	r1, r6
			i--;
    cdca:	uxtb	r4, r4
			digit = n % base;
    cdcc:	b.n	cda4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000cdce <Print::print(long)>:
	if (n < 0) {
    cdce:	cmp	r1, #0
		n = -n;
    cdd0:	mov.w	r2, #10
    cdd4:	itte	lt
    cdd6:	neglt	r1, r1
		sign = '-';
    cdd8:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    cdda:	movge	r3, #0
	if (base == 0) {
    cddc:	b.w	cd6a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000cde0 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    cde0:	movw	r3, #2573	; 0xa0d
{
    cde4:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    cde6:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    cdea:	movs	r2, #2
    cdec:	ldr	r3, [r0, #0]
    cdee:	add	r1, sp, #4
    cdf0:	ldr	r3, [r3, #4]
    cdf2:	blx	r3
}
    cdf4:	add	sp, #12
    cdf6:	ldr.w	pc, [sp], #4
	...

0000cdfc <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    cdfc:	ldr	r3, [pc, #20]	; (ce14 <_write+0x18>)
    cdfe:	cmp	r0, #2
    ce00:	it	hi
    ce02:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ce04:	ldr	r0, [r3, #0]
{
    ce06:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ce08:	ldr	r4, [r0, #4]
    ce0a:	mov	r0, r3
    ce0c:	mov	r3, r4
}
    ce0e:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    ce12:	bx	r3
    ce14:	.word	0x20001c8c

0000ce18 <Print::printf(char const*, ...)>:
{
    ce18:	push	{r1, r2, r3}
    ce1a:	push	{r0, r1, lr}
    ce1c:	add	r2, sp, #12
    ce1e:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    ce22:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    ce24:	bl	f160 <vdiprintf>
}
    ce28:	add	sp, #8
    ce2a:	ldr.w	lr, [sp], #4
    ce2e:	add	sp, #12
    ce30:	bx	lr

0000ce32 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    ce32:	push	{r4, r5}
	if (base == 0) {
    ce34:	cbnz	r2, ce40 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    ce36:	ldr	r3, [r0, #0]
    ce38:	uxtb	r1, r1
    ce3a:	ldr	r3, [r3, #0]
}
    ce3c:	pop	{r4, r5}
		return write((uint8_t)n);
    ce3e:	bx	r3
}
    ce40:	pop	{r4, r5}
    ce42:	b.w	cd6a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000ce46 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    ce46:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce4a:	sub	sp, #72	; 0x48
    ce4c:	mov	r8, r0
    ce4e:	mov	r7, r2
    ce50:	mov	r6, r3
    ce52:	ldrb.w	r9, [sp, #104]	; 0x68
    ce56:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    ce5a:	cmp.w	r9, #1
    ce5e:	bls.n	ced2 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    ce60:	orrs.w	r3, r2, r6
    ce64:	bne.n	ce9c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    ce66:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    ce68:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    ce6a:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    ce6e:	cmp.w	sl, #0
    ce72:	beq.n	ce84 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    ce74:	subs	r3, r5, #1
		buf[i] = '-';
    ce76:	add	r2, sp, #72	; 0x48
		i--;
    ce78:	uxtb	r5, r3
		buf[i] = '-';
    ce7a:	uxtab	r3, r2, r3
    ce7e:	movs	r2, #45	; 0x2d
    ce80:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    ce84:	ldr.w	r3, [r8]
    ce88:	add	r1, sp, #4
    ce8a:	rsb	r2, r5, #66	; 0x42
    ce8e:	mov	r0, r8
    ce90:	ldr	r3, [r3, #4]
    ce92:	add	r1, r5
    ce94:	blx	r3
}
    ce96:	add	sp, #72	; 0x48
    ce98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    ce9c:	movs	r5, #65	; 0x41
			digit = n % base;
    ce9e:	mov	r1, r6
    cea0:	mov	r2, r9
    cea2:	movs	r3, #0
    cea4:	mov	r0, r7
    cea6:	bl	d014 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ceaa:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    ceae:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    ceb0:	add	r3, sp
    ceb2:	cmp	r4, #9
    ceb4:	ite	ls
    ceb6:	addls	r4, #48	; 0x30
    ceb8:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    ceba:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cebc:	uxtb	r4, r4
			if (n == 0) break;
    cebe:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    cec2:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    cec6:	bcc.n	ce6e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    cec8:	subs	r5, #1
			n /= base;
    ceca:	mov	r7, r0
    cecc:	mov	r6, r1
			i--;
    cece:	uxtb	r5, r5
			digit = n % base;
    ced0:	b.n	ce9e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    ced2:	movs	r0, #0
    ced4:	b.n	ce96 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000ced8 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    ced8:	vcmp.f64	d0, d0
{
    cedc:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    cede:	vmrs	APSR_nzcv, fpscr
{
    cee2:	mov	r6, r0
    cee4:	mov	r5, r1
    cee6:	vpush	{d8-d9}
    ceea:	sub	sp, #28
	if (isnan(number)) return print("nan");
    ceec:	bvc.n	cf00 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    ceee:	ldr	r1, [pc, #264]	; (cff8 <Print::printFloat(double, unsigned char)+0x120>)
    cef0:	bl	cc3c <Print::write(char const*)>
    cef4:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    cef6:	mov	r0, r4
    cef8:	add	sp, #28
    cefa:	vpop	{d8-d9}
    cefe:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    cf00:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    cf04:	vldr	d6, [pc, #208]	; cfd8 <Print::printFloat(double, unsigned char)+0x100>
    cf08:	vcmp.f64	d7, d6
    cf0c:	vmrs	APSR_nzcv, fpscr
    cf10:	ble.n	cf16 <Print::printFloat(double, unsigned char)+0x3e>
    cf12:	ldr	r1, [pc, #232]	; (cffc <Print::printFloat(double, unsigned char)+0x124>)
    cf14:	b.n	cef0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    cf16:	vldr	d7, [pc, #200]	; cfe0 <Print::printFloat(double, unsigned char)+0x108>
    cf1a:	vcmpe.f64	d0, d7
    cf1e:	vmrs	APSR_nzcv, fpscr
    cf22:	ble.n	cf2a <Print::printFloat(double, unsigned char)+0x52>
    cf24:	ldr	r1, [pc, #216]	; (d000 <Print::printFloat(double, unsigned char)+0x128>)
    cf26:	mov	r0, r6
    cf28:	b.n	cef0 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    cf2a:	vldr	d7, [pc, #188]	; cfe8 <Print::printFloat(double, unsigned char)+0x110>
    cf2e:	vcmpe.f64	d0, d7
    cf32:	vmrs	APSR_nzcv, fpscr
    cf36:	bmi.n	cf24 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    cf38:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    cf3c:	movs	r2, #0
	double rounding = 0.5;
    cf3e:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    cf42:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    cf46:	vldr	d6, [pc, #168]	; cff0 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    cf4a:	itte	mi
    cf4c:	vnegmi.f64	d0, d0
		sign = 1;
    cf50:	movmi	r3, #1
	uint8_t sign=0;
    cf52:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    cf54:	uxtb	r1, r2
    cf56:	cmp	r5, r1
    cf58:	bhi.n	cfa8 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    cf5a:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    cf5e:	movs	r2, #10
    cf60:	mov	r0, r6
    cf62:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    cf66:	vmov	r1, s18
    cf6a:	bl	cd6a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    cf6e:	mov	r4, r0
	if (digits > 0) {
    cf70:	cmp	r5, #0
    cf72:	beq.n	cef6 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    cf74:	vcvt.f64.u32	d0, s18
    cf78:	cmp	r5, #15
    cf7a:	add	r0, sp, #8
			remainder *= 10.0;
    cf7c:	vmov.f64	d6, #36	; 0x41200000  10.0
    cf80:	it	cs
    cf82:	movcs	r5, #15
		buf[0] = '.';
    cf84:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    cf86:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    cf8a:	mov	r1, r0
    cf8c:	mov	r2, r5
    cf8e:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    cf92:	subs	r2, #1
    cf94:	uxtb	r2, r2
    cf96:	cmp	r2, #255	; 0xff
    cf98:	bne.n	cfb0 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    cf9a:	adds	r5, #1
    cf9c:	ldr	r3, [r6, #0]
    cf9e:	mov	r0, r6
    cfa0:	ldr	r3, [r3, #4]
    cfa2:	uxtb	r2, r5
    cfa4:	blx	r3
    cfa6:	b.n	cef6 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    cfa8:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    cfac:	adds	r2, #1
    cfae:	b.n	cf54 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    cfb0:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    cfb4:	vcvt.u32.f64	s15, d0
    cfb8:	vstr	s15, [sp, #4]
    cfbc:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    cfc0:	vmov	s15, r3
			buf[count++] = '0' + n;
    cfc4:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    cfc8:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    cfcc:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    cfd0:	vsub.f64	d0, d0, d7
    cfd4:	b.n	cf92 <Print::printFloat(double, unsigned char)+0xba>
    cfd6:	nop
    cfd8:	.word	0xffffffff
    cfdc:	.word	0x7fefffff
    cfe0:	.word	0xe0000000
    cfe4:	.word	0x41efffff
    cfe8:	.word	0xe0000000
    cfec:	.word	0xc1efffff
    cff0:	.word	0xa0000000
    cff4:	.word	0x3fb99999
    cff8:	.word	0x200010f3
    cffc:	.word	0x200010f7
    d000:	.word	0x200010fb

0000d004 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    d004:	b.w	d320 <free>

0000d008 <__aeabi_atexit>:
    d008:	mov	r3, r1
    d00a:	mov	r1, r0
    d00c:	mov	r0, r3
    d00e:	b.w	e180 <__cxa_atexit>
	...

0000d014 <__aeabi_uldivmod>:
    d014:	cbnz	r3, d02c <__aeabi_uldivmod+0x18>
    d016:	cbnz	r2, d02c <__aeabi_uldivmod+0x18>
    d018:	cmp	r1, #0
    d01a:	it	eq
    d01c:	cmpeq	r0, #0
    d01e:	itt	ne
    d020:	movne.w	r1, #4294967295
    d024:	movne.w	r0, #4294967295
    d028:	b.w	d30c <__aeabi_idiv0>
    d02c:	sub.w	ip, sp, #8
    d030:	strd	ip, lr, [sp, #-16]!
    d034:	bl	d044 <__udivmoddi4>
    d038:	ldr.w	lr, [sp, #4]
    d03c:	ldrd	r2, r3, [sp, #8]
    d040:	add	sp, #16
    d042:	bx	lr

0000d044 <__udivmoddi4>:
    d044:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d048:	ldr	r6, [sp, #32]
    d04a:	mov	r5, r1
    d04c:	mov	r4, r0
    d04e:	mov	r7, r1
    d050:	cmp	r3, #0
    d052:	bne.n	d0ea <__udivmoddi4+0xa6>
    d054:	cmp	r2, r1
    d056:	mov	ip, r2
    d058:	bls.n	d126 <__udivmoddi4+0xe2>
    d05a:	clz	r3, r2
    d05e:	cbz	r3, d072 <__udivmoddi4+0x2e>
    d060:	lsl.w	ip, r2, r3
    d064:	rsb	r2, r3, #32
    d068:	lsls	r7, r3
    d06a:	lsr.w	r2, r0, r2
    d06e:	orrs	r7, r2
    d070:	lsls	r4, r3
    d072:	mov.w	lr, ip, lsr #16
    d076:	uxth.w	r5, ip
    d07a:	udiv	r1, r7, lr
    d07e:	lsrs	r2, r4, #16
    d080:	mls	r7, lr, r1, r7
    d084:	orr.w	r2, r2, r7, lsl #16
    d088:	mul.w	r0, r1, r5
    d08c:	cmp	r0, r2
    d08e:	bls.n	d0a6 <__udivmoddi4+0x62>
    d090:	adds.w	r2, ip, r2
    d094:	add.w	r7, r1, #4294967295
    d098:	bcs.w	d2d4 <__udivmoddi4+0x290>
    d09c:	cmp	r0, r2
    d09e:	bls.w	d2d4 <__udivmoddi4+0x290>
    d0a2:	subs	r1, #2
    d0a4:	add	r2, ip
    d0a6:	subs	r2, r2, r0
    d0a8:	uxth	r4, r4
    d0aa:	udiv	r0, r2, lr
    d0ae:	mls	r2, lr, r0, r2
    d0b2:	orr.w	r4, r4, r2, lsl #16
    d0b6:	mul.w	r5, r0, r5
    d0ba:	cmp	r5, r4
    d0bc:	bls.n	d0d4 <__udivmoddi4+0x90>
    d0be:	adds.w	r4, ip, r4
    d0c2:	add.w	r2, r0, #4294967295
    d0c6:	bcs.w	d2d8 <__udivmoddi4+0x294>
    d0ca:	cmp	r5, r4
    d0cc:	bls.w	d2d8 <__udivmoddi4+0x294>
    d0d0:	add	r4, ip
    d0d2:	subs	r0, #2
    d0d4:	orr.w	r0, r0, r1, lsl #16
    d0d8:	subs	r4, r4, r5
    d0da:	movs	r1, #0
    d0dc:	cbz	r6, d0e6 <__udivmoddi4+0xa2>
    d0de:	lsrs	r4, r3
    d0e0:	movs	r3, #0
    d0e2:	strd	r4, r3, [r6]
    d0e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d0ea:	cmp	r3, r1
    d0ec:	bls.n	d100 <__udivmoddi4+0xbc>
    d0ee:	cmp	r6, #0
    d0f0:	beq.w	d2ce <__udivmoddi4+0x28a>
    d0f4:	movs	r1, #0
    d0f6:	strd	r0, r5, [r6]
    d0fa:	mov	r0, r1
    d0fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d100:	clz	r1, r3
    d104:	cmp	r1, #0
    d106:	bne.n	d19c <__udivmoddi4+0x158>
    d108:	cmp	r3, r5
    d10a:	bcc.n	d112 <__udivmoddi4+0xce>
    d10c:	cmp	r2, r0
    d10e:	bhi.w	d302 <__udivmoddi4+0x2be>
    d112:	subs	r4, r0, r2
    d114:	sbc.w	r2, r5, r3
    d118:	movs	r0, #1
    d11a:	mov	r7, r2
    d11c:	cmp	r6, #0
    d11e:	beq.n	d0e6 <__udivmoddi4+0xa2>
    d120:	strd	r4, r7, [r6]
    d124:	b.n	d0e6 <__udivmoddi4+0xa2>
    d126:	cbnz	r2, d12a <__udivmoddi4+0xe6>
    d128:	udf	#255	; 0xff
    d12a:	clz	r3, r2
    d12e:	cmp	r3, #0
    d130:	bne.w	d254 <__udivmoddi4+0x210>
    d134:	subs	r2, r1, r2
    d136:	mov.w	r7, ip, lsr #16
    d13a:	uxth.w	lr, ip
    d13e:	movs	r1, #1
    d140:	udiv	r5, r2, r7
    d144:	mls	r0, r7, r5, r2
    d148:	lsrs	r2, r4, #16
    d14a:	orr.w	r2, r2, r0, lsl #16
    d14e:	mul.w	r0, lr, r5
    d152:	cmp	r0, r2
    d154:	bls.n	d168 <__udivmoddi4+0x124>
    d156:	adds.w	r2, ip, r2
    d15a:	add.w	r8, r5, #4294967295
    d15e:	bcs.n	d166 <__udivmoddi4+0x122>
    d160:	cmp	r0, r2
    d162:	bhi.w	d2fc <__udivmoddi4+0x2b8>
    d166:	mov	r5, r8
    d168:	subs	r2, r2, r0
    d16a:	uxth	r4, r4
    d16c:	udiv	r0, r2, r7
    d170:	mls	r2, r7, r0, r2
    d174:	orr.w	r4, r4, r2, lsl #16
    d178:	mul.w	lr, lr, r0
    d17c:	cmp	lr, r4
    d17e:	bls.n	d192 <__udivmoddi4+0x14e>
    d180:	adds.w	r4, ip, r4
    d184:	add.w	r2, r0, #4294967295
    d188:	bcs.n	d190 <__udivmoddi4+0x14c>
    d18a:	cmp	lr, r4
    d18c:	bhi.w	d306 <__udivmoddi4+0x2c2>
    d190:	mov	r0, r2
    d192:	sub.w	r4, r4, lr
    d196:	orr.w	r0, r0, r5, lsl #16
    d19a:	b.n	d0dc <__udivmoddi4+0x98>
    d19c:	rsb	r7, r1, #32
    d1a0:	lsls	r3, r1
    d1a2:	lsr.w	ip, r2, r7
    d1a6:	orr.w	ip, ip, r3
    d1aa:	lsl.w	r4, r5, r1
    d1ae:	lsr.w	r3, r0, r7
    d1b2:	lsrs	r5, r7
    d1b4:	mov.w	r9, ip, lsr #16
    d1b8:	orrs	r3, r4
    d1ba:	udiv	r8, r5, r9
    d1be:	uxth.w	lr, ip
    d1c2:	mls	r5, r9, r8, r5
    d1c6:	lsrs	r4, r3, #16
    d1c8:	orr.w	r4, r4, r5, lsl #16
    d1cc:	mul.w	r5, r8, lr
    d1d0:	cmp	r5, r4
    d1d2:	lsl.w	r2, r2, r1
    d1d6:	lsl.w	r0, r0, r1
    d1da:	bls.n	d1f4 <__udivmoddi4+0x1b0>
    d1dc:	adds.w	r4, ip, r4
    d1e0:	add.w	sl, r8, #4294967295
    d1e4:	bcs.w	d2f8 <__udivmoddi4+0x2b4>
    d1e8:	cmp	r5, r4
    d1ea:	bls.w	d2f8 <__udivmoddi4+0x2b4>
    d1ee:	sub.w	r8, r8, #2
    d1f2:	add	r4, ip
    d1f4:	subs	r4, r4, r5
    d1f6:	uxth	r5, r3
    d1f8:	udiv	r3, r4, r9
    d1fc:	mls	r4, r9, r3, r4
    d200:	orr.w	r4, r5, r4, lsl #16
    d204:	mul.w	lr, r3, lr
    d208:	cmp	lr, r4
    d20a:	bls.n	d21e <__udivmoddi4+0x1da>
    d20c:	adds.w	r4, ip, r4
    d210:	add.w	r5, r3, #4294967295
    d214:	bcs.n	d2f0 <__udivmoddi4+0x2ac>
    d216:	cmp	lr, r4
    d218:	bls.n	d2f0 <__udivmoddi4+0x2ac>
    d21a:	subs	r3, #2
    d21c:	add	r4, ip
    d21e:	orr.w	r3, r3, r8, lsl #16
    d222:	umull	r9, r5, r3, r2
    d226:	sub.w	r4, r4, lr
    d22a:	cmp	r4, r5
    d22c:	mov	r8, r9
    d22e:	mov	lr, r5
    d230:	bcc.n	d2e0 <__udivmoddi4+0x29c>
    d232:	beq.n	d2dc <__udivmoddi4+0x298>
    d234:	cbz	r6, d24c <__udivmoddi4+0x208>
    d236:	subs.w	r2, r0, r8
    d23a:	sbc.w	r4, r4, lr
    d23e:	lsl.w	r7, r4, r7
    d242:	lsrs	r2, r1
    d244:	lsrs	r4, r1
    d246:	orrs	r7, r2
    d248:	strd	r7, r4, [r6]
    d24c:	mov	r0, r3
    d24e:	movs	r1, #0
    d250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d254:	rsb	r1, r3, #32
    d258:	lsl.w	ip, r2, r3
    d25c:	lsr.w	r2, r0, r1
    d260:	lsr.w	r1, r5, r1
    d264:	lsls	r5, r3
    d266:	orrs	r2, r5
    d268:	mov.w	r7, ip, lsr #16
    d26c:	uxth.w	lr, ip
    d270:	udiv	r0, r1, r7
    d274:	mls	r5, r7, r0, r1
    d278:	lsrs	r1, r2, #16
    d27a:	orr.w	r1, r1, r5, lsl #16
    d27e:	mul.w	r5, r0, lr
    d282:	cmp	r5, r1
    d284:	lsl.w	r4, r4, r3
    d288:	bls.n	d29c <__udivmoddi4+0x258>
    d28a:	adds.w	r1, ip, r1
    d28e:	add.w	r8, r0, #4294967295
    d292:	bcs.n	d2f4 <__udivmoddi4+0x2b0>
    d294:	cmp	r5, r1
    d296:	bls.n	d2f4 <__udivmoddi4+0x2b0>
    d298:	subs	r0, #2
    d29a:	add	r1, ip
    d29c:	subs	r1, r1, r5
    d29e:	uxth	r2, r2
    d2a0:	udiv	r5, r1, r7
    d2a4:	mls	r1, r7, r5, r1
    d2a8:	orr.w	r2, r2, r1, lsl #16
    d2ac:	mul.w	r1, r5, lr
    d2b0:	cmp	r1, r2
    d2b2:	bls.n	d2c6 <__udivmoddi4+0x282>
    d2b4:	adds.w	r2, ip, r2
    d2b8:	add.w	r8, r5, #4294967295
    d2bc:	bcs.n	d2ec <__udivmoddi4+0x2a8>
    d2be:	cmp	r1, r2
    d2c0:	bls.n	d2ec <__udivmoddi4+0x2a8>
    d2c2:	subs	r5, #2
    d2c4:	add	r2, ip
    d2c6:	subs	r2, r2, r1
    d2c8:	orr.w	r1, r5, r0, lsl #16
    d2cc:	b.n	d140 <__udivmoddi4+0xfc>
    d2ce:	mov	r1, r6
    d2d0:	mov	r0, r6
    d2d2:	b.n	d0e6 <__udivmoddi4+0xa2>
    d2d4:	mov	r1, r7
    d2d6:	b.n	d0a6 <__udivmoddi4+0x62>
    d2d8:	mov	r0, r2
    d2da:	b.n	d0d4 <__udivmoddi4+0x90>
    d2dc:	cmp	r0, r9
    d2de:	bcs.n	d234 <__udivmoddi4+0x1f0>
    d2e0:	subs.w	r8, r9, r2
    d2e4:	sbc.w	lr, r5, ip
    d2e8:	subs	r3, #1
    d2ea:	b.n	d234 <__udivmoddi4+0x1f0>
    d2ec:	mov	r5, r8
    d2ee:	b.n	d2c6 <__udivmoddi4+0x282>
    d2f0:	mov	r3, r5
    d2f2:	b.n	d21e <__udivmoddi4+0x1da>
    d2f4:	mov	r0, r8
    d2f6:	b.n	d29c <__udivmoddi4+0x258>
    d2f8:	mov	r8, sl
    d2fa:	b.n	d1f4 <__udivmoddi4+0x1b0>
    d2fc:	subs	r5, #2
    d2fe:	add	r2, ip
    d300:	b.n	d168 <__udivmoddi4+0x124>
    d302:	mov	r0, r1
    d304:	b.n	d11c <__udivmoddi4+0xd8>
    d306:	add	r4, ip
    d308:	subs	r0, #2
    d30a:	b.n	d192 <__udivmoddi4+0x14e>

0000d30c <__aeabi_idiv0>:
    d30c:	bx	lr
    d30e:	nop

0000d310 <malloc>:
    d310:	ldr	r3, [pc, #8]	; (d31c <malloc+0xc>)
    d312:	mov	r1, r0
    d314:	ldr	r0, [r3, #0]
    d316:	b.w	d370 <_malloc_r>
    d31a:	nop
    d31c:	.word	0x2000222c

0000d320 <free>:
    d320:	ldr	r3, [pc, #8]	; (d32c <free+0xc>)
    d322:	mov	r1, r0
    d324:	ldr	r0, [r3, #0]
    d326:	b.w	100a8 <_free_r>
    d32a:	nop
    d32c:	.word	0x2000222c

0000d330 <sbrk_aligned>:
    d330:	push	{r4, r5, r6, lr}
    d332:	ldr	r6, [pc, #56]	; (d36c <sbrk_aligned+0x3c>)
    d334:	mov	r4, r1
    d336:	ldr	r1, [r6, #0]
    d338:	mov	r5, r0
    d33a:	cbnz	r1, d342 <sbrk_aligned+0x12>
    d33c:	bl	f338 <_sbrk_r>
    d340:	str	r0, [r6, #0]
    d342:	mov	r1, r4
    d344:	mov	r0, r5
    d346:	bl	f338 <_sbrk_r>
    d34a:	adds	r3, r0, #1
    d34c:	beq.n	d364 <sbrk_aligned+0x34>
    d34e:	adds	r4, r0, #3
    d350:	bic.w	r4, r4, #3
    d354:	cmp	r0, r4
    d356:	beq.n	d368 <sbrk_aligned+0x38>
    d358:	subs	r1, r4, r0
    d35a:	mov	r0, r5
    d35c:	bl	f338 <_sbrk_r>
    d360:	adds	r0, #1
    d362:	bne.n	d368 <sbrk_aligned+0x38>
    d364:	mov.w	r4, #4294967295
    d368:	mov	r0, r4
    d36a:	pop	{r4, r5, r6, pc}
    d36c:	.word	0x200212b4

0000d370 <_malloc_r>:
    d370:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d374:	adds	r5, r1, #3
    d376:	bic.w	r5, r5, #3
    d37a:	adds	r5, #8
    d37c:	cmp	r5, #12
    d37e:	it	cc
    d380:	movcc	r5, #12
    d382:	cmp	r5, #0
    d384:	mov	r7, r0
    d386:	blt.n	d38c <_malloc_r+0x1c>
    d388:	cmp	r1, r5
    d38a:	bls.n	d398 <_malloc_r+0x28>
    d38c:	movs	r3, #12
    d38e:	str	r3, [r7, #0]
    d390:	movs	r6, #0
    d392:	mov	r0, r6
    d394:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d398:	ldr	r6, [pc, #188]	; (d458 <_malloc_r+0xe8>)
    d39a:	bl	d45c <__malloc_lock>
    d39e:	ldr	r3, [r6, #0]
    d3a0:	mov	r4, r3
    d3a2:	cbnz	r4, d3f6 <_malloc_r+0x86>
    d3a4:	mov	r1, r5
    d3a6:	mov	r0, r7
    d3a8:	bl	d330 <sbrk_aligned>
    d3ac:	adds	r3, r0, #1
    d3ae:	mov	r4, r0
    d3b0:	bne.n	d452 <_malloc_r+0xe2>
    d3b2:	ldr	r4, [r6, #0]
    d3b4:	mov	r6, r4
    d3b6:	cmp	r6, #0
    d3b8:	bne.n	d440 <_malloc_r+0xd0>
    d3ba:	cmp	r4, #0
    d3bc:	beq.n	d446 <_malloc_r+0xd6>
    d3be:	ldr	r3, [r4, #0]
    d3c0:	mov	r1, r6
    d3c2:	mov	r0, r7
    d3c4:	add.w	r8, r4, r3
    d3c8:	bl	f338 <_sbrk_r>
    d3cc:	cmp	r8, r0
    d3ce:	bne.n	d446 <_malloc_r+0xd6>
    d3d0:	ldr	r3, [r4, #0]
    d3d2:	adds	r5, #3
    d3d4:	subs	r5, r5, r3
    d3d6:	bic.w	r5, r5, #3
    d3da:	adds	r5, #8
    d3dc:	cmp	r5, #12
    d3de:	it	cc
    d3e0:	movcc	r5, #12
    d3e2:	mov	r1, r5
    d3e4:	mov	r0, r7
    d3e6:	bl	d330 <sbrk_aligned>
    d3ea:	adds	r0, #1
    d3ec:	beq.n	d446 <_malloc_r+0xd6>
    d3ee:	ldr	r3, [r4, #0]
    d3f0:	add	r3, r5
    d3f2:	str	r3, [r4, #0]
    d3f4:	b.n	d414 <_malloc_r+0xa4>
    d3f6:	ldr	r2, [r4, #0]
    d3f8:	subs	r2, r2, r5
    d3fa:	bmi.n	d43a <_malloc_r+0xca>
    d3fc:	cmp	r2, #11
    d3fe:	bls.n	d42e <_malloc_r+0xbe>
    d400:	adds	r1, r4, r5
    d402:	cmp	r3, r4
    d404:	str	r5, [r4, #0]
    d406:	it	ne
    d408:	strne	r1, [r3, #4]
    d40a:	ldr	r3, [r4, #4]
    d40c:	it	eq
    d40e:	streq	r1, [r6, #0]
    d410:	str	r2, [r4, r5]
    d412:	str	r3, [r1, #4]
    d414:	mov	r0, r7
    d416:	add.w	r6, r4, #11
    d41a:	bl	d468 <__malloc_unlock>
    d41e:	bic.w	r6, r6, #7
    d422:	adds	r3, r4, #4
    d424:	subs	r2, r6, r3
    d426:	beq.n	d392 <_malloc_r+0x22>
    d428:	subs	r3, r3, r6
    d42a:	str	r3, [r4, r2]
    d42c:	b.n	d392 <_malloc_r+0x22>
    d42e:	ldr	r2, [r4, #4]
    d430:	cmp	r3, r4
    d432:	ite	eq
    d434:	streq	r2, [r6, #0]
    d436:	strne	r2, [r3, #4]
    d438:	b.n	d414 <_malloc_r+0xa4>
    d43a:	mov	r3, r4
    d43c:	ldr	r4, [r4, #4]
    d43e:	b.n	d3a2 <_malloc_r+0x32>
    d440:	mov	r4, r6
    d442:	ldr	r6, [r6, #4]
    d444:	b.n	d3b6 <_malloc_r+0x46>
    d446:	movs	r3, #12
    d448:	str	r3, [r7, #0]
    d44a:	mov	r0, r7
    d44c:	bl	d468 <__malloc_unlock>
    d450:	b.n	d392 <_malloc_r+0x22>
    d452:	str	r5, [r4, #0]
    d454:	b.n	d414 <_malloc_r+0xa4>
    d456:	nop
    d458:	.word	0x200212b0

0000d45c <__malloc_lock>:
    d45c:	ldr	r0, [pc, #4]	; (d464 <__malloc_lock+0x8>)
    d45e:	b.w	f3d0 <__retarget_lock_acquire_recursive>
    d462:	nop
    d464:	.word	0x2002220a

0000d468 <__malloc_unlock>:
    d468:	ldr	r0, [pc, #4]	; (d470 <__malloc_unlock+0x8>)
    d46a:	b.w	f3d2 <__retarget_lock_release_recursive>
    d46e:	nop
    d470:	.word	0x2002220a

0000d474 <_realloc_r>:
    d474:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d478:	mov	r8, r0
    d47a:	mov	r4, r2
    d47c:	mov	r6, r1
    d47e:	cbnz	r1, d48a <_realloc_r+0x16>
    d480:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d484:	mov	r1, r2
    d486:	b.w	d370 <_malloc_r>
    d48a:	cbnz	r2, d498 <_realloc_r+0x24>
    d48c:	bl	100a8 <_free_r>
    d490:	mov	r5, r4
    d492:	mov	r0, r5
    d494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d498:	bl	11168 <_malloc_usable_size_r>
    d49c:	cmp	r4, r0
    d49e:	mov	r7, r0
    d4a0:	bhi.n	d4a8 <_realloc_r+0x34>
    d4a2:	cmp.w	r4, r0, lsr #1
    d4a6:	bhi.n	d4ce <_realloc_r+0x5a>
    d4a8:	mov	r1, r4
    d4aa:	mov	r0, r8
    d4ac:	bl	d370 <_malloc_r>
    d4b0:	mov	r5, r0
    d4b2:	cmp	r0, #0
    d4b4:	beq.n	d492 <_realloc_r+0x1e>
    d4b6:	cmp	r4, r7
    d4b8:	mov	r2, r4
    d4ba:	mov	r1, r6
    d4bc:	it	cs
    d4be:	movcs	r2, r7
    d4c0:	bl	a8dc <memcpy>
    d4c4:	mov	r1, r6
    d4c6:	mov	r0, r8
    d4c8:	bl	100a8 <_free_r>
    d4cc:	b.n	d492 <_realloc_r+0x1e>
    d4ce:	mov	r5, r6
    d4d0:	b.n	d492 <_realloc_r+0x1e>

0000d4d2 <sulp>:
    d4d2:	push	{r4, r5, r6, lr}
    d4d4:	mov	r4, r0
    d4d6:	mov	r5, r1
    d4d8:	mov	r6, r2
    d4da:	vmov	d0, r4, r5
    d4de:	bl	10eec <__ulp>
    d4e2:	cbz	r6, d504 <sulp+0x32>
    d4e4:	ubfx	r3, r5, #20, #11
    d4e8:	rsb	r3, r3, #107	; 0x6b
    d4ec:	cmp	r3, #0
    d4ee:	ble.n	d504 <sulp+0x32>
    d4f0:	lsls	r3, r3, #20
    d4f2:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d4f6:	movs	r0, #0
    d4f8:	add.w	r1, r1, #3145728	; 0x300000
    d4fc:	vmov	d7, r0, r1
    d500:	vmul.f64	d0, d0, d7
    d504:	pop	{r4, r5, r6, pc}
	...

0000d508 <_strtod_l>:
    d508:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d50c:	vpush	{d8-d14}
    d510:	sub	sp, #92	; 0x5c
    d512:	mov	r4, r0
    d514:	str	r2, [sp, #52]	; 0x34
    d516:	movs	r2, #0
    d518:	str	r2, [sp, #72]	; 0x48
    d51a:	mov	sl, r1
    d51c:	mov.w	r8, #0
    d520:	mov.w	r9, #0
    d524:	mov	r2, r1
    d526:	str	r2, [sp, #68]	; 0x44
    d528:	ldrb	r1, [r2, #0]
    d52a:	cmp	r1, #43	; 0x2b
    d52c:	beq.n	d5c8 <_strtod_l+0xc0>
    d52e:	bhi.n	d5a4 <_strtod_l+0x9c>
    d530:	cmp	r1, #13
    d532:	bhi.n	d59c <_strtod_l+0x94>
    d534:	cmp	r1, #8
    d536:	bhi.n	d5a0 <_strtod_l+0x98>
    d538:	cmp	r1, #0
    d53a:	beq.n	d5b6 <_strtod_l+0xae>
    d53c:	movs	r2, #0
    d53e:	str	r2, [sp, #32]
    d540:	ldr	r6, [sp, #68]	; 0x44
    d542:	ldrb	r2, [r6, #0]
    d544:	cmp	r2, #48	; 0x30
    d546:	bne.w	d6ba <_strtod_l+0x1b2>
    d54a:	ldrb	r2, [r6, #1]
    d54c:	and.w	r2, r2, #223	; 0xdf
    d550:	cmp	r2, #88	; 0x58
    d552:	bne.n	d636 <_strtod_l+0x12e>
    d554:	str	r3, [sp, #8]
    d556:	ldr	r3, [sp, #32]
    d558:	str	r3, [sp, #4]
    d55a:	add	r3, sp, #72	; 0x48
    d55c:	str	r3, [sp, #0]
    d55e:	ldr	r2, [pc, #580]	; (d7a4 <_strtod_l+0x29c>)
    d560:	add	r3, sp, #76	; 0x4c
    d562:	add	r1, sp, #68	; 0x44
    d564:	mov	r0, r4
    d566:	bl	10210 <__gethex>
    d56a:	ands.w	r7, r0, #15
    d56e:	mov	r5, r0
    d570:	beq.n	d57e <_strtod_l+0x76>
    d572:	cmp	r7, #6
    d574:	bne.n	d5cc <_strtod_l+0xc4>
    d576:	adds	r6, #1
    d578:	movs	r3, #0
    d57a:	str	r6, [sp, #68]	; 0x44
    d57c:	str	r3, [sp, #32]
    d57e:	ldr	r3, [sp, #52]	; 0x34
    d580:	cmp	r3, #0
    d582:	bne.w	e030 <_strtod_l+0xb28>
    d586:	ldr	r3, [sp, #32]
    d588:	vmov	d0, r8, r9
    d58c:	cbz	r3, d5c2 <_strtod_l+0xba>
    d58e:	vneg.f64	d0, d0
    d592:	add	sp, #92	; 0x5c
    d594:	vpop	{d8-d14}
    d598:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d59c:	cmp	r1, #32
    d59e:	bne.n	d53c <_strtod_l+0x34>
    d5a0:	adds	r2, #1
    d5a2:	b.n	d526 <_strtod_l+0x1e>
    d5a4:	cmp	r1, #45	; 0x2d
    d5a6:	bne.n	d53c <_strtod_l+0x34>
    d5a8:	movs	r1, #1
    d5aa:	str	r1, [sp, #32]
    d5ac:	adds	r1, r2, #1
    d5ae:	str	r1, [sp, #68]	; 0x44
    d5b0:	ldrb	r2, [r2, #1]
    d5b2:	cmp	r2, #0
    d5b4:	bne.n	d540 <_strtod_l+0x38>
    d5b6:	ldr	r3, [sp, #52]	; 0x34
    d5b8:	str.w	sl, [sp, #68]	; 0x44
    d5bc:	cmp	r3, #0
    d5be:	bne.w	e02c <_strtod_l+0xb24>
    d5c2:	vmov	d0, r8, r9
    d5c6:	b.n	d592 <_strtod_l+0x8a>
    d5c8:	movs	r1, #0
    d5ca:	b.n	d5aa <_strtod_l+0xa2>
    d5cc:	ldr	r2, [sp, #72]	; 0x48
    d5ce:	cbz	r2, d5e0 <_strtod_l+0xd8>
    d5d0:	movs	r1, #53	; 0x35
    d5d2:	add	r0, sp, #80	; 0x50
    d5d4:	bl	110e0 <__copybits>
    d5d8:	ldr	r1, [sp, #72]	; 0x48
    d5da:	mov	r0, r4
    d5dc:	bl	10894 <_Bfree>
    d5e0:	subs	r3, r7, #1
    d5e2:	ldr	r2, [sp, #76]	; 0x4c
    d5e4:	cmp	r3, #4
    d5e6:	bhi.n	d5f6 <_strtod_l+0xee>
    d5e8:	tbb	[pc, r3]
    d5ec:	.word	0x201d0314
    d5f0:	.byte	0x14
    d5f1:	.byte	0x00
    d5f2:	ldrd	r8, r9, [sp, #80]	; 0x50
    d5f6:	lsls	r3, r5, #23
    d5f8:	it	mi
    d5fa:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    d5fe:	bic.w	r3, r9, #2147483648	; 0x80000000
    d602:	lsrs	r3, r3, #20
    d604:	lsls	r3, r3, #20
    d606:	cmp	r3, #0
    d608:	bne.n	d57e <_strtod_l+0x76>
    d60a:	bl	f37c <__errno>
    d60e:	movs	r3, #34	; 0x22
    d610:	str	r3, [r0, #0]
    d612:	b.n	d57e <_strtod_l+0x76>
    d614:	ldrd	r8, r3, [sp, #80]	; 0x50
    d618:	addw	r2, r2, #1075	; 0x433
    d61c:	bic.w	r3, r3, #1048576	; 0x100000
    d620:	orr.w	r9, r3, r2, lsl #20
    d624:	b.n	d5f6 <_strtod_l+0xee>
    d626:	ldr.w	r9, [pc, #388]	; d7ac <_strtod_l+0x2a4>
    d62a:	b.n	d5f6 <_strtod_l+0xee>
    d62c:	mvn.w	r9, #2147483648	; 0x80000000
    d630:	mov.w	r8, #4294967295
    d634:	b.n	d5f6 <_strtod_l+0xee>
    d636:	ldr	r3, [sp, #68]	; 0x44
    d638:	adds	r2, r3, #1
    d63a:	str	r2, [sp, #68]	; 0x44
    d63c:	ldrb	r3, [r3, #1]
    d63e:	cmp	r3, #48	; 0x30
    d640:	beq.n	d636 <_strtod_l+0x12e>
    d642:	cmp	r3, #0
    d644:	beq.n	d57e <_strtod_l+0x76>
    d646:	movs	r3, #1
    d648:	str	r3, [sp, #24]
    d64a:	ldr	r3, [sp, #68]	; 0x44
    d64c:	str	r3, [sp, #36]	; 0x24
    d64e:	movs	r3, #0
    d650:	str	r3, [sp, #20]
    d652:	str	r3, [sp, #28]
    d654:	mov	r6, r3
    d656:	movs	r2, #10
    d658:	ldr	r0, [sp, #68]	; 0x44
    d65a:	ldrb	r5, [r0, #0]
    d65c:	sub.w	r3, r5, #48	; 0x30
    d660:	uxtb	r1, r3
    d662:	cmp	r1, #9
    d664:	bls.n	d6be <_strtod_l+0x1b6>
    d666:	ldr	r1, [pc, #320]	; (d7a8 <_strtod_l+0x2a0>)
    d668:	movs	r2, #1
    d66a:	bl	f2a4 <strncmp>
    d66e:	cmp	r0, #0
    d670:	beq.n	d6de <_strtod_l+0x1d6>
    d672:	movs	r0, #0
    d674:	mov	r2, r5
    d676:	mov	r3, r6
    d678:	mov	fp, r0
    d67a:	mov	r1, r0
    d67c:	cmp	r2, #101	; 0x65
    d67e:	beq.n	d684 <_strtod_l+0x17c>
    d680:	cmp	r2, #69	; 0x45
    d682:	bne.n	d6b6 <_strtod_l+0x1ae>
    d684:	cbnz	r3, d68e <_strtod_l+0x186>
    d686:	ldr	r3, [sp, #24]
    d688:	orrs	r3, r0
    d68a:	beq.n	d5b6 <_strtod_l+0xae>
    d68c:	movs	r3, #0
    d68e:	ldr.w	sl, [sp, #68]	; 0x44
    d692:	add.w	r2, sl, #1
    d696:	str	r2, [sp, #68]	; 0x44
    d698:	ldrb.w	r2, [sl, #1]
    d69c:	cmp	r2, #43	; 0x2b
    d69e:	beq.n	d78c <_strtod_l+0x284>
    d6a0:	cmp	r2, #45	; 0x2d
    d6a2:	beq.n	d79c <_strtod_l+0x294>
    d6a4:	mov.w	lr, #0
    d6a8:	sub.w	r5, r2, #48	; 0x30
    d6ac:	cmp	r5, #9
    d6ae:	bls.w	d7b8 <_strtod_l+0x2b0>
    d6b2:	str.w	sl, [sp, #68]	; 0x44
    d6b6:	movs	r5, #0
    d6b8:	b.n	d7f8 <_strtod_l+0x2f0>
    d6ba:	movs	r3, #0
    d6bc:	b.n	d648 <_strtod_l+0x140>
    d6be:	cmp	r6, #8
    d6c0:	itete	le
    d6c2:	ldrle	r1, [sp, #28]
    d6c4:	ldrgt	r1, [sp, #20]
    d6c6:	mlale	r3, r2, r1, r3
    d6ca:	mlagt	r3, r2, r1, r3
    d6ce:	add.w	r0, r0, #1
    d6d2:	ite	le
    d6d4:	strle	r3, [sp, #28]
    d6d6:	strgt	r3, [sp, #20]
    d6d8:	adds	r6, #1
    d6da:	str	r0, [sp, #68]	; 0x44
    d6dc:	b.n	d658 <_strtod_l+0x150>
    d6de:	ldr	r3, [sp, #68]	; 0x44
    d6e0:	adds	r2, r3, #1
    d6e2:	str	r2, [sp, #68]	; 0x44
    d6e4:	ldrb	r2, [r3, #1]
    d6e6:	cbz	r6, d754 <_strtod_l+0x24c>
    d6e8:	mov	fp, r0
    d6ea:	mov	r3, r6
    d6ec:	sub.w	r1, r2, #48	; 0x30
    d6f0:	cmp	r1, #9
    d6f2:	bls.n	d71a <_strtod_l+0x212>
    d6f4:	movs	r1, #1
    d6f6:	b.n	d67c <_strtod_l+0x174>
    d6f8:	ldr	r3, [sp, #68]	; 0x44
    d6fa:	adds	r2, r3, #1
    d6fc:	str	r2, [sp, #68]	; 0x44
    d6fe:	ldrb	r2, [r3, #1]
    d700:	adds	r0, #1
    d702:	cmp	r2, #48	; 0x30
    d704:	beq.n	d6f8 <_strtod_l+0x1f0>
    d706:	sub.w	r3, r2, #49	; 0x31
    d70a:	cmp	r3, #8
    d70c:	bhi.w	e03a <_strtod_l+0xb32>
    d710:	ldr	r3, [sp, #68]	; 0x44
    d712:	str	r3, [sp, #36]	; 0x24
    d714:	mov	fp, r0
    d716:	movs	r0, #0
    d718:	mov	r3, r0
    d71a:	subs	r2, #48	; 0x30
    d71c:	add.w	r1, r0, #1
    d720:	beq.n	d748 <_strtod_l+0x240>
    d722:	add	fp, r1
    d724:	add.w	ip, r0, r3
    d728:	mov	r1, r3
    d72a:	movs	r5, #10
    d72c:	cmp	r1, ip
    d72e:	bne.n	d758 <_strtod_l+0x250>
    d730:	adds	r1, r3, r0
    d732:	cmp	r1, #8
    d734:	add.w	r3, r3, #1
    d738:	add	r3, r0
    d73a:	bgt.n	d774 <_strtod_l+0x26c>
    d73c:	ldr	r0, [sp, #28]
    d73e:	movs	r1, #10
    d740:	mla	r2, r1, r0, r2
    d744:	str	r2, [sp, #28]
    d746:	movs	r1, #0
    d748:	ldr	r2, [sp, #68]	; 0x44
    d74a:	adds	r0, r2, #1
    d74c:	str	r0, [sp, #68]	; 0x44
    d74e:	ldrb	r2, [r2, #1]
    d750:	mov	r0, r1
    d752:	b.n	d6ec <_strtod_l+0x1e4>
    d754:	mov	r0, r6
    d756:	b.n	d702 <_strtod_l+0x1fa>
    d758:	cmp	r1, #8
    d75a:	add.w	r1, r1, #1
    d75e:	bgt.n	d768 <_strtod_l+0x260>
    d760:	ldr	r7, [sp, #28]
    d762:	muls	r7, r5
    d764:	str	r7, [sp, #28]
    d766:	b.n	d72c <_strtod_l+0x224>
    d768:	cmp	r1, #16
    d76a:	ittt	le
    d76c:	ldrle	r7, [sp, #20]
    d76e:	mulle	r7, r5
    d770:	strle	r7, [sp, #20]
    d772:	b.n	d72c <_strtod_l+0x224>
    d774:	cmp	r3, #16
    d776:	itttt	le
    d778:	ldrle	r0, [sp, #20]
    d77a:	movle	r1, #10
    d77c:	mlale	r2, r1, r0, r2
    d780:	strle	r2, [sp, #20]
    d782:	b.n	d746 <_strtod_l+0x23e>
    d784:	mov.w	fp, #0
    d788:	movs	r1, #1
    d78a:	b.n	d686 <_strtod_l+0x17e>
    d78c:	mov.w	lr, #0
    d790:	add.w	r2, sl, #2
    d794:	str	r2, [sp, #68]	; 0x44
    d796:	ldrb.w	r2, [sl, #2]
    d79a:	b.n	d6a8 <_strtod_l+0x1a0>
    d79c:	mov.w	lr, #1
    d7a0:	b.n	d790 <_strtod_l+0x288>
    d7a2:	nop
    d7a4:	.word	0x20000924
    d7a8:	.word	0x20001638
    d7ac:	.word	0x7ff00000
    d7b0:	ldr	r2, [sp, #68]	; 0x44
    d7b2:	adds	r5, r2, #1
    d7b4:	str	r5, [sp, #68]	; 0x44
    d7b6:	ldrb	r2, [r2, #1]
    d7b8:	cmp	r2, #48	; 0x30
    d7ba:	beq.n	d7b0 <_strtod_l+0x2a8>
    d7bc:	sub.w	r5, r2, #49	; 0x31
    d7c0:	cmp	r5, #8
    d7c2:	bhi.w	d6b6 <_strtod_l+0x1ae>
    d7c6:	sub.w	ip, r2, #48	; 0x30
    d7ca:	ldr	r2, [sp, #68]	; 0x44
    d7cc:	str	r2, [sp, #40]	; 0x28
    d7ce:	ldr	r2, [sp, #68]	; 0x44
    d7d0:	adds	r5, r2, #1
    d7d2:	str	r5, [sp, #68]	; 0x44
    d7d4:	ldrb	r2, [r2, #1]
    d7d6:	sub.w	r7, r2, #48	; 0x30
    d7da:	cmp	r7, #9
    d7dc:	bls.n	d84e <_strtod_l+0x346>
    d7de:	ldr	r7, [sp, #40]	; 0x28
    d7e0:	subs	r5, r5, r7
    d7e2:	cmp	r5, #8
    d7e4:	movw	r5, #19999	; 0x4e1f
    d7e8:	bgt.n	d7f0 <_strtod_l+0x2e8>
    d7ea:	cmp	r5, ip
    d7ec:	it	ge
    d7ee:	movge	r5, ip
    d7f0:	cmp.w	lr, #0
    d7f4:	beq.n	d7f8 <_strtod_l+0x2f0>
    d7f6:	negs	r5, r5
    d7f8:	cmp	r3, #0
    d7fa:	bne.n	d898 <_strtod_l+0x390>
    d7fc:	ldr	r3, [sp, #24]
    d7fe:	orrs	r3, r0
    d800:	bne.w	d57e <_strtod_l+0x76>
    d804:	cmp	r1, #0
    d806:	bne.w	d5b6 <_strtod_l+0xae>
    d80a:	cmp	r2, #105	; 0x69
    d80c:	beq.n	d85e <_strtod_l+0x356>
    d80e:	bgt.n	d85a <_strtod_l+0x352>
    d810:	cmp	r2, #73	; 0x49
    d812:	beq.n	d85e <_strtod_l+0x356>
    d814:	cmp	r2, #78	; 0x4e
    d816:	bne.w	d5b6 <_strtod_l+0xae>
    d81a:	ldr	r1, [pc, #596]	; (da70 <_strtod_l+0x568>)
    d81c:	add	r0, sp, #68	; 0x44
    d81e:	bl	10690 <__match>
    d822:	cmp	r0, #0
    d824:	beq.w	d5b6 <_strtod_l+0xae>
    d828:	ldr	r3, [sp, #68]	; 0x44
    d82a:	ldrb	r3, [r3, #0]
    d82c:	cmp	r3, #40	; 0x28
    d82e:	bne.n	d88c <_strtod_l+0x384>
    d830:	ldr	r1, [pc, #576]	; (da74 <_strtod_l+0x56c>)
    d832:	add	r2, sp, #80	; 0x50
    d834:	add	r0, sp, #68	; 0x44
    d836:	bl	106b8 <__hexnan>
    d83a:	cmp	r0, #5
    d83c:	bne.n	d88c <_strtod_l+0x384>
    d83e:	ldr	r3, [sp, #84]	; 0x54
    d840:	ldr.w	r8, [sp, #80]	; 0x50
    d844:	orr.w	r9, r3, #2139095040	; 0x7f800000
    d848:	orr.w	r9, r9, #7340032	; 0x700000
    d84c:	b.n	d57e <_strtod_l+0x76>
    d84e:	movs	r5, #10
    d850:	mla	ip, r5, ip, r2
    d854:	sub.w	ip, ip, #48	; 0x30
    d858:	b.n	d7ce <_strtod_l+0x2c6>
    d85a:	cmp	r2, #110	; 0x6e
    d85c:	b.n	d816 <_strtod_l+0x30e>
    d85e:	ldr	r1, [pc, #536]	; (da78 <_strtod_l+0x570>)
    d860:	add	r0, sp, #68	; 0x44
    d862:	bl	10690 <__match>
    d866:	cmp	r0, #0
    d868:	beq.w	d5b6 <_strtod_l+0xae>
    d86c:	ldr	r3, [sp, #68]	; 0x44
    d86e:	ldr	r1, [pc, #524]	; (da7c <_strtod_l+0x574>)
    d870:	subs	r3, #1
    d872:	add	r0, sp, #68	; 0x44
    d874:	str	r3, [sp, #68]	; 0x44
    d876:	bl	10690 <__match>
    d87a:	cbnz	r0, d882 <_strtod_l+0x37a>
    d87c:	ldr	r3, [sp, #68]	; 0x44
    d87e:	adds	r3, #1
    d880:	str	r3, [sp, #68]	; 0x44
    d882:	ldr.w	r9, [pc, #524]	; da90 <_strtod_l+0x588>
    d886:	mov.w	r8, #0
    d88a:	b.n	d57e <_strtod_l+0x76>
    d88c:	ldr	r0, [pc, #496]	; (da80 <_strtod_l+0x578>)
    d88e:	bl	f4a0 <nan>
    d892:	vmov	r8, r9, d0
    d896:	b.n	d57e <_strtod_l+0x76>
    d898:	vldr	s15, [sp, #28]
    d89c:	sub.w	r2, r5, fp
    d8a0:	vcvt.f64.u32	d7, s15
    d8a4:	cmp	r6, #0
    d8a6:	it	eq
    d8a8:	moveq	r6, r3
    d8aa:	cmp	r3, #16
    d8ac:	str	r2, [sp, #24]
    d8ae:	mov	r2, r3
    d8b0:	it	ge
    d8b2:	movge	r2, #16
    d8b4:	cmp	r3, #9
    d8b6:	vmov	r8, r9, d7
    d8ba:	ble.n	d8d6 <_strtod_l+0x3ce>
    d8bc:	ldr	r1, [pc, #452]	; (da84 <_strtod_l+0x57c>)
    d8be:	vldr	s13, [sp, #20]
    d8c2:	add.w	r1, r1, r2, lsl #3
    d8c6:	vldr	d5, [r1, #-72]	; 0xffffffb8
    d8ca:	vcvt.f64.u32	d6, s13
    d8ce:	vfma.f64	d6, d7, d5
    d8d2:	vmov	r8, r9, d6
    d8d6:	cmp	r3, #15
    d8d8:	bgt.n	d94a <_strtod_l+0x442>
    d8da:	ldr	r1, [sp, #24]
    d8dc:	cmp	r1, #0
    d8de:	beq.w	d57e <_strtod_l+0x76>
    d8e2:	ble.n	d92c <_strtod_l+0x424>
    d8e4:	cmp	r1, #22
    d8e6:	bgt.n	d900 <_strtod_l+0x3f8>
    d8e8:	ldr	r3, [pc, #408]	; (da84 <_strtod_l+0x57c>)
    d8ea:	add.w	r3, r3, r1, lsl #3
    d8ee:	vldr	d7, [r3]
    d8f2:	vmov	d6, r8, r9
    d8f6:	vmul.f64	d7, d7, d6
    d8fa:	vmov	r8, r9, d7
    d8fe:	b.n	d57e <_strtod_l+0x76>
    d900:	ldr	r0, [sp, #24]
    d902:	rsb	r1, r3, #37	; 0x25
    d906:	cmp	r1, r0
    d908:	blt.n	d94a <_strtod_l+0x442>
    d90a:	ldr	r2, [pc, #376]	; (da84 <_strtod_l+0x57c>)
    d90c:	rsb	r3, r3, #15
    d910:	add.w	r1, r2, r3, lsl #3
    d914:	vldr	d7, [r1]
    d918:	vmov	d6, r8, r9
    d91c:	subs	r3, r0, r3
    d91e:	add.w	r2, r2, r3, lsl #3
    d922:	vmul.f64	d7, d7, d6
    d926:	vldr	d6, [r2]
    d92a:	b.n	d8f6 <_strtod_l+0x3ee>
    d92c:	ldr	r1, [sp, #24]
    d92e:	adds	r1, #22
    d930:	blt.n	d94a <_strtod_l+0x442>
    d932:	ldr	r3, [pc, #336]	; (da84 <_strtod_l+0x57c>)
    d934:	sub.w	r5, fp, r5
    d938:	add.w	r5, r3, r5, lsl #3
    d93c:	vldr	d7, [r5]
    d940:	vmov	d6, r8, r9
    d944:	vdiv.f64	d7, d6, d7
    d948:	b.n	d8fa <_strtod_l+0x3f2>
    d94a:	ldr	r1, [sp, #24]
    d94c:	subs	r2, r3, r2
    d94e:	add	r2, r1
    d950:	cmp	r2, #0
    d952:	ble.n	da32 <_strtod_l+0x52a>
    d954:	ands.w	r0, r2, #15
    d958:	beq.n	d970 <_strtod_l+0x468>
    d95a:	ldr	r1, [pc, #296]	; (da84 <_strtod_l+0x57c>)
    d95c:	add.w	r1, r1, r0, lsl #3
    d960:	vldr	d7, [r1]
    d964:	vmov	d6, r8, r9
    d968:	vmul.f64	d7, d7, d6
    d96c:	vmov	r8, r9, d7
    d970:	bics.w	r2, r2, #15
    d974:	beq.n	da14 <_strtod_l+0x50c>
    d976:	cmp.w	r2, #308	; 0x134
    d97a:	ble.n	d9c2 <_strtod_l+0x4ba>
    d97c:	movs	r5, #0
    d97e:	mov	r6, r5
    d980:	str	r5, [sp, #28]
    d982:	mov	r7, r5
    d984:	movs	r3, #34	; 0x22
    d986:	ldr.w	r9, [pc, #264]	; da90 <_strtod_l+0x588>
    d98a:	str	r3, [r4, #0]
    d98c:	mov.w	r8, #0
    d990:	ldr	r3, [sp, #28]
    d992:	cmp	r3, #0
    d994:	beq.w	d57e <_strtod_l+0x76>
    d998:	ldr	r1, [sp, #72]	; 0x48
    d99a:	mov	r0, r4
    d99c:	bl	10894 <_Bfree>
    d9a0:	mov	r1, r7
    d9a2:	mov	r0, r4
    d9a4:	bl	10894 <_Bfree>
    d9a8:	mov	r1, r6
    d9aa:	mov	r0, r4
    d9ac:	bl	10894 <_Bfree>
    d9b0:	ldr	r1, [sp, #28]
    d9b2:	mov	r0, r4
    d9b4:	bl	10894 <_Bfree>
    d9b8:	mov	r1, r5
    d9ba:	mov	r0, r4
    d9bc:	bl	10894 <_Bfree>
    d9c0:	b.n	d57e <_strtod_l+0x76>
    d9c2:	movs	r0, #0
    d9c4:	vmov	d7, r8, r9
    d9c8:	ldr	r7, [pc, #188]	; (da88 <_strtod_l+0x580>)
    d9ca:	asrs	r2, r2, #4
    d9cc:	mov	r1, r0
    d9ce:	cmp	r2, #1
    d9d0:	bgt.n	da1a <_strtod_l+0x512>
    d9d2:	cbz	r0, d9d8 <_strtod_l+0x4d0>
    d9d4:	vmov	r8, r9, d7
    d9d8:	ldr	r2, [pc, #172]	; (da88 <_strtod_l+0x580>)
    d9da:	ldr	r0, [pc, #176]	; (da8c <_strtod_l+0x584>)
    d9dc:	add.w	r2, r2, r1, lsl #3
    d9e0:	vldr	d7, [r2]
    d9e4:	sub.w	r9, r9, #55574528	; 0x3500000
    d9e8:	vmov	d6, r8, r9
    d9ec:	ldr	r2, [pc, #160]	; (da90 <_strtod_l+0x588>)
    d9ee:	vmul.f64	d7, d7, d6
    d9f2:	vmov	r1, s15
    d9f6:	ands	r2, r1
    d9f8:	cmp	r2, r0
    d9fa:	vmov	r8, r9, d7
    d9fe:	bhi.n	d97c <_strtod_l+0x474>
    da00:	sub.w	r0, r0, #1048576	; 0x100000
    da04:	cmp	r2, r0
    da06:	itte	hi
    da08:	ldrhi.w	r9, [pc, #136]	; da94 <_strtod_l+0x58c>
    da0c:	movhi.w	r8, #4294967295
    da10:	addls.w	r9, r1, #55574528	; 0x3500000
    da14:	movs	r2, #0
    da16:	str	r2, [sp, #20]
    da18:	b.n	db08 <_strtod_l+0x600>
    da1a:	tst.w	r2, #1
    da1e:	beq.n	da2a <_strtod_l+0x522>
    da20:	vldr	d6, [r7]
    da24:	movs	r0, #1
    da26:	vmul.f64	d7, d7, d6
    da2a:	adds	r1, #1
    da2c:	asrs	r2, r2, #1
    da2e:	adds	r7, #8
    da30:	b.n	d9ce <_strtod_l+0x4c6>
    da32:	beq.n	da14 <_strtod_l+0x50c>
    da34:	negs	r2, r2
    da36:	ands.w	r0, r2, #15
    da3a:	beq.n	da52 <_strtod_l+0x54a>
    da3c:	ldr	r1, [pc, #68]	; (da84 <_strtod_l+0x57c>)
    da3e:	add.w	r1, r1, r0, lsl #3
    da42:	vldr	d7, [r1]
    da46:	vmov	d6, r8, r9
    da4a:	vdiv.f64	d7, d6, d7
    da4e:	vmov	r8, r9, d7
    da52:	asrs	r2, r2, #4
    da54:	beq.n	da14 <_strtod_l+0x50c>
    da56:	cmp	r2, #31
    da58:	ble.n	da98 <_strtod_l+0x590>
    da5a:	movs	r5, #0
    da5c:	mov	r6, r5
    da5e:	str	r5, [sp, #28]
    da60:	mov	r7, r5
    da62:	movs	r3, #34	; 0x22
    da64:	mov.w	r8, #0
    da68:	mov.w	r9, #0
    da6c:	str	r3, [r4, #0]
    da6e:	b.n	d990 <_strtod_l+0x488>
    da70:	.word	0x20001b8c
    da74:	.word	0x20000938
    da78:	.word	0x200010f8
    da7c:	.word	0x200012a0
    da80:	.word	0x20000d24
    da84:	.word	0x20000328
    da88:	.word	0x20000300
    da8c:	.word	0x7ca00000
    da90:	.word	0x7ff00000
    da94:	.word	0x7fefffff
    da98:	ands.w	r1, r2, #16
    da9c:	it	ne
    da9e:	movne	r1, #106	; 0x6a
    daa0:	str	r1, [sp, #20]
    daa2:	vmov	d7, r8, r9
    daa6:	ldr	r1, [pc, #760]	; (dda0 <_strtod_l+0x898>)
    daa8:	movs	r0, #0
    daaa:	lsls	r7, r2, #31
    daac:	bpl.n	dab8 <_strtod_l+0x5b0>
    daae:	vldr	d6, [r1]
    dab2:	movs	r0, #1
    dab4:	vmul.f64	d7, d7, d6
    dab8:	asrs	r2, r2, #1
    daba:	add.w	r1, r1, #8
    dabe:	bne.n	daaa <_strtod_l+0x5a2>
    dac0:	cbz	r0, dac6 <_strtod_l+0x5be>
    dac2:	vmov	r8, r9, d7
    dac6:	ldr	r2, [sp, #20]
    dac8:	cbz	r2, dafa <_strtod_l+0x5f2>
    daca:	ubfx	r1, r9, #20, #11
    dace:	rsb	r2, r1, #107	; 0x6b
    dad2:	cmp	r2, #0
    dad4:	mov	r0, r9
    dad6:	ble.n	dafa <_strtod_l+0x5f2>
    dad8:	cmp	r2, #31
    dada:	ble.w	dd36 <_strtod_l+0x82e>
    dade:	cmp	r2, #52	; 0x34
    dae0:	ittt	le
    dae2:	movle.w	r2, #4294967295
    dae6:	rsble	r1, r1, #75	; 0x4b
    daea:	lslle	r2, r1
    daec:	mov.w	r8, #0
    daf0:	ite	gt
    daf2:	movgt.w	r9, #57671680	; 0x3700000
    daf6:	andle.w	r9, r2, r0
    dafa:	vmov	d7, r8, r9
    dafe:	vcmp.f64	d7, #0.0
    db02:	vmrs	APSR_nzcv, fpscr
    db06:	beq.n	da5a <_strtod_l+0x552>
    db08:	ldr	r2, [sp, #28]
    db0a:	str	r2, [sp, #0]
    db0c:	ldr	r1, [sp, #36]	; 0x24
    db0e:	mov	r2, r6
    db10:	mov	r0, r4
    db12:	bl	10964 <__s2b>
    db16:	str	r0, [sp, #28]
    db18:	cmp	r0, #0
    db1a:	beq.w	d97c <_strtod_l+0x474>
    db1e:	ldr	r2, [sp, #24]
    db20:	cmp	r2, #0
    db22:	sub.w	r3, fp, r5
    db26:	vldr	d9, [pc, #600]	; dd80 <_strtod_l+0x878>
    db2a:	it	ge
    db2c:	movge	r3, #0
    db2e:	vldr	d10, [pc, #600]	; dd88 <_strtod_l+0x880>
    db32:	vldr	d11, [pc, #604]	; dd90 <_strtod_l+0x888>
    db36:	str	r3, [sp, #36]	; 0x24
    db38:	movs	r5, #0
    db3a:	bic.w	r3, r2, r2, asr #31
    db3e:	str	r3, [sp, #48]	; 0x30
    db40:	mov	r6, r5
    db42:	ldr	r3, [sp, #28]
    db44:	mov	r0, r4
    db46:	ldr	r1, [r3, #4]
    db48:	bl	10814 <_Balloc>
    db4c:	mov	r7, r0
    db4e:	cmp	r0, #0
    db50:	beq.w	d984 <_strtod_l+0x47c>
    db54:	ldr	r3, [sp, #28]
    db56:	ldr	r2, [r3, #16]
    db58:	adds	r2, #2
    db5a:	add.w	r1, r3, #12
    db5e:	lsls	r2, r2, #2
    db60:	adds	r0, #12
    db62:	bl	a8dc <memcpy>
    db66:	vmov	d0, r8, r9
    db6a:	add	r2, sp, #80	; 0x50
    db6c:	add	r1, sp, #76	; 0x4c
    db6e:	mov	r0, r4
    db70:	bl	10fcc <__d2b>
    db74:	vmov	d8, r8, r9
    db78:	str	r0, [sp, #72]	; 0x48
    db7a:	cmp	r0, #0
    db7c:	beq.w	d984 <_strtod_l+0x47c>
    db80:	movs	r1, #1
    db82:	mov	r0, r4
    db84:	bl	10a94 <__i2b>
    db88:	mov	r6, r0
    db8a:	cmp	r0, #0
    db8c:	beq.w	d984 <_strtod_l+0x47c>
    db90:	ldr	r3, [sp, #76]	; 0x4c
    db92:	ldr	r1, [sp, #80]	; 0x50
    db94:	cmp	r3, #0
    db96:	itete	ge
    db98:	ldrge	r2, [sp, #36]	; 0x24
    db9a:	ldrlt	r2, [sp, #48]	; 0x30
    db9c:	ldrge.w	sl, [sp, #48]	; 0x30
    dba0:	ldrlt.w	fp, [sp, #36]	; 0x24
    dba4:	ite	ge
    dba6:	addge.w	fp, r3, r2
    dbaa:	sublt.w	sl, r2, r3
    dbae:	ldr	r2, [sp, #20]
    dbb0:	subs	r3, r3, r2
    dbb2:	add	r3, r1
    dbb4:	ldr	r2, [pc, #492]	; (dda4 <_strtod_l+0x89c>)
    dbb6:	subs	r3, #1
    dbb8:	cmp	r3, r2
    dbba:	rsb	r1, r1, #54	; 0x36
    dbbe:	bge.w	dd5c <_strtod_l+0x854>
    dbc2:	subs	r2, r2, r3
    dbc4:	cmp	r2, #31
    dbc6:	sub.w	r1, r1, r2
    dbca:	mov.w	r0, #1
    dbce:	bgt.w	dd44 <_strtod_l+0x83c>
    dbd2:	lsl.w	r3, r0, r2
    dbd6:	str	r3, [sp, #44]	; 0x2c
    dbd8:	movs	r3, #0
    dbda:	str	r3, [sp, #40]	; 0x28
    dbdc:	add.w	r3, fp, r1
    dbe0:	ldr	r2, [sp, #20]
    dbe2:	cmp	fp, r3
    dbe4:	add	sl, r1
    dbe6:	add	sl, r2
    dbe8:	mov	r2, fp
    dbea:	it	ge
    dbec:	movge	r2, r3
    dbee:	cmp	r2, sl
    dbf0:	it	ge
    dbf2:	movge	r2, sl
    dbf4:	cmp	r2, #0
    dbf6:	ittt	gt
    dbf8:	subgt	r3, r3, r2
    dbfa:	subgt.w	sl, sl, r2
    dbfe:	subgt.w	fp, fp, r2
    dc02:	ldr	r2, [sp, #36]	; 0x24
    dc04:	cmp	r2, #0
    dc06:	ble.n	dc3a <_strtod_l+0x732>
    dc08:	mov	r1, r6
    dc0a:	mov	r0, r4
    dc0c:	str	r3, [sp, #60]	; 0x3c
    dc0e:	bl	10c14 <__pow5mult>
    dc12:	mov	r6, r0
    dc14:	cmp	r0, #0
    dc16:	beq.w	d984 <_strtod_l+0x47c>
    dc1a:	mov	r1, r0
    dc1c:	ldr	r2, [sp, #72]	; 0x48
    dc1e:	mov	r0, r4
    dc20:	bl	10ac0 <__multiply>
    dc24:	str	r0, [sp, #56]	; 0x38
    dc26:	cmp	r0, #0
    dc28:	beq.w	d984 <_strtod_l+0x47c>
    dc2c:	ldr	r1, [sp, #72]	; 0x48
    dc2e:	mov	r0, r4
    dc30:	bl	10894 <_Bfree>
    dc34:	ldr	r2, [sp, #56]	; 0x38
    dc36:	ldr	r3, [sp, #60]	; 0x3c
    dc38:	str	r2, [sp, #72]	; 0x48
    dc3a:	cmp	r3, #0
    dc3c:	bgt.w	dd66 <_strtod_l+0x85e>
    dc40:	ldr	r3, [sp, #24]
    dc42:	cmp	r3, #0
    dc44:	ble.n	dc58 <_strtod_l+0x750>
    dc46:	mov	r1, r7
    dc48:	ldr	r2, [sp, #48]	; 0x30
    dc4a:	mov	r0, r4
    dc4c:	bl	10c14 <__pow5mult>
    dc50:	mov	r7, r0
    dc52:	cmp	r0, #0
    dc54:	beq.w	d984 <_strtod_l+0x47c>
    dc58:	cmp.w	sl, #0
    dc5c:	ble.n	dc70 <_strtod_l+0x768>
    dc5e:	mov	r1, r7
    dc60:	mov	r2, sl
    dc62:	mov	r0, r4
    dc64:	bl	10cc8 <__lshift>
    dc68:	mov	r7, r0
    dc6a:	cmp	r0, #0
    dc6c:	beq.w	d984 <_strtod_l+0x47c>
    dc70:	cmp.w	fp, #0
    dc74:	ble.n	dc88 <_strtod_l+0x780>
    dc76:	mov	r1, r6
    dc78:	mov	r2, fp
    dc7a:	mov	r0, r4
    dc7c:	bl	10cc8 <__lshift>
    dc80:	mov	r6, r0
    dc82:	cmp	r0, #0
    dc84:	beq.w	d984 <_strtod_l+0x47c>
    dc88:	ldr	r1, [sp, #72]	; 0x48
    dc8a:	mov	r2, r7
    dc8c:	mov	r0, r4
    dc8e:	bl	10dd8 <__mdiff>
    dc92:	mov	r5, r0
    dc94:	cmp	r0, #0
    dc96:	beq.w	d984 <_strtod_l+0x47c>
    dc9a:	movs	r3, #0
    dc9c:	ldr.w	sl, [r0, #12]
    dca0:	str	r3, [r0, #12]
    dca2:	mov	r1, r6
    dca4:	bl	10da0 <__mcmp>
    dca8:	cmp	r0, #0
    dcaa:	bge.n	ddac <_strtod_l+0x8a4>
    dcac:	orrs.w	sl, sl, r8
    dcb0:	bne.w	ddfe <_strtod_l+0x8f6>
    dcb4:	ubfx	r3, r9, #0, #20
    dcb8:	cmp	r3, #0
    dcba:	bne.w	ddfe <_strtod_l+0x8f6>
    dcbe:	bic.w	r3, r9, #2147483648	; 0x80000000
    dcc2:	lsrs	r3, r3, #20
    dcc4:	lsls	r3, r3, #20
    dcc6:	cmp.w	r3, #112197632	; 0x6b00000
    dcca:	bls.w	ddfe <_strtod_l+0x8f6>
    dcce:	ldr	r3, [r5, #20]
    dcd0:	cbnz	r3, dcda <_strtod_l+0x7d2>
    dcd2:	ldr	r3, [r5, #16]
    dcd4:	cmp	r3, #1
    dcd6:	ble.w	ddfe <_strtod_l+0x8f6>
    dcda:	mov	r1, r5
    dcdc:	movs	r2, #1
    dcde:	mov	r0, r4
    dce0:	bl	10cc8 <__lshift>
    dce4:	mov	r1, r6
    dce6:	mov	r5, r0
    dce8:	bl	10da0 <__mcmp>
    dcec:	cmp	r0, #0
    dcee:	ble.w	ddfe <_strtod_l+0x8f6>
    dcf2:	ldr	r1, [sp, #20]
    dcf4:	ldr	r2, [pc, #176]	; (dda8 <_strtod_l+0x8a0>)
    dcf6:	mov	r3, r9
    dcf8:	cmp	r1, #0
    dcfa:	beq.w	de3c <_strtod_l+0x934>
    dcfe:	and.w	r1, r2, r9
    dd02:	cmp.w	r1, #112197632	; 0x6b00000
    dd06:	bgt.w	de3c <_strtod_l+0x934>
    dd0a:	cmp.w	r1, #57671680	; 0x3700000
    dd0e:	ble.w	da62 <_strtod_l+0x55a>
    dd12:	vldr	d7, [pc, #132]	; dd98 <_strtod_l+0x890>
    dd16:	vmov	d6, r8, r9
    dd1a:	ldr	r3, [pc, #140]	; (dda8 <_strtod_l+0x8a0>)
    dd1c:	vmul.f64	d7, d6, d7
    dd20:	vmov	r2, s15
    dd24:	ands	r3, r2
    dd26:	vmov	r8, r9, d7
    dd2a:	cmp	r3, #0
    dd2c:	bne.w	d998 <_strtod_l+0x490>
    dd30:	movs	r3, #34	; 0x22
    dd32:	str	r3, [r4, #0]
    dd34:	b.n	d998 <_strtod_l+0x490>
    dd36:	mov.w	r1, #4294967295
    dd3a:	lsl.w	r2, r1, r2
    dd3e:	and.w	r8, r2, r8
    dd42:	b.n	dafa <_strtod_l+0x5f2>
    dd44:	rsb	r3, r3, #4278190080	; 0xff000000
    dd48:	add.w	r3, r3, #16711680	; 0xff0000
    dd4c:	add.w	r3, r3, #64256	; 0xfb00
    dd50:	adds	r3, #226	; 0xe2
    dd52:	lsl.w	r3, r0, r3
    dd56:	strd	r3, r0, [sp, #40]	; 0x28
    dd5a:	b.n	dbdc <_strtod_l+0x6d4>
    dd5c:	movs	r2, #0
    dd5e:	movs	r3, #1
    dd60:	strd	r2, r3, [sp, #40]	; 0x28
    dd64:	b.n	dbdc <_strtod_l+0x6d4>
    dd66:	ldr	r1, [sp, #72]	; 0x48
    dd68:	mov	r2, r3
    dd6a:	mov	r0, r4
    dd6c:	bl	10cc8 <__lshift>
    dd70:	str	r0, [sp, #72]	; 0x48
    dd72:	cmp	r0, #0
    dd74:	bne.w	dc40 <_strtod_l+0x738>
    dd78:	b.n	d984 <_strtod_l+0x47c>
    dd7a:	nop
    dd7c:	nop.w
    dd80:	.word	0x94a03595
    dd84:	.word	0x3fcfffff
    dd88:	.word	0x94a03595
    dd8c:	.word	0x3fdfffff
    dd90:	.word	0x35afe535
    dd94:	.word	0x3fe00000
    dd98:	.word	0x00000000
    dd9c:	.word	0x39500000
    dda0:	.word	0x200003f0
    dda4:	.word	0xfffffc02
    dda8:	.word	0x7ff00000
    ddac:	mov	fp, r9
    ddae:	bne.n	de70 <_strtod_l+0x968>
    ddb0:	ubfx	r3, r9, #0, #20
    ddb4:	cmp.w	sl, #0
    ddb8:	beq.n	de10 <_strtod_l+0x908>
    ddba:	ldr	r2, [pc, #668]	; (e058 <_strtod_l+0xb50>)
    ddbc:	cmp	r3, r2
    ddbe:	bne.n	de18 <_strtod_l+0x910>
    ddc0:	ldr	r3, [sp, #20]
    ddc2:	mov	r2, r8
    ddc4:	cbz	r3, de06 <_strtod_l+0x8fe>
    ddc6:	ldr	r3, [pc, #660]	; (e05c <_strtod_l+0xb54>)
    ddc8:	and.w	r3, r9, r3
    ddcc:	cmp.w	r3, #111149056	; 0x6a00000
    ddd0:	mov.w	r1, #4294967295
    ddd4:	bhi.n	de0c <_strtod_l+0x904>
    ddd6:	lsrs	r3, r3, #20
    ddd8:	rsb	r3, r3, #107	; 0x6b
    dddc:	lsl.w	r3, r1, r3
    dde0:	cmp	r2, r3
    dde2:	bne.n	de18 <_strtod_l+0x910>
    dde4:	ldr	r3, [pc, #632]	; (e060 <_strtod_l+0xb58>)
    dde6:	cmp	fp, r3
    dde8:	bne.n	ddf0 <_strtod_l+0x8e8>
    ddea:	adds	r2, #1
    ddec:	beq.w	d984 <_strtod_l+0x47c>
    ddf0:	ldr	r3, [pc, #616]	; (e05c <_strtod_l+0xb54>)
    ddf2:	and.w	r3, fp, r3
    ddf6:	add.w	r9, r3, #1048576	; 0x100000
    ddfa:	mov.w	r8, #0
    ddfe:	ldr	r3, [sp, #20]
    de00:	cmp	r3, #0
    de02:	bne.n	dd12 <_strtod_l+0x80a>
    de04:	b.n	d998 <_strtod_l+0x490>
    de06:	mov.w	r3, #4294967295
    de0a:	b.n	dde0 <_strtod_l+0x8d8>
    de0c:	mov	r3, r1
    de0e:	b.n	dde0 <_strtod_l+0x8d8>
    de10:	orrs.w	r3, r3, r8
    de14:	beq.w	dcf2 <_strtod_l+0x7ea>
    de18:	ldr	r3, [sp, #40]	; 0x28
    de1a:	cbz	r3, de50 <_strtod_l+0x948>
    de1c:	tst.w	r3, fp
    de20:	beq.n	ddfe <_strtod_l+0x8f6>
    de22:	ldr	r2, [sp, #20]
    de24:	mov	r0, r8
    de26:	mov	r1, r9
    de28:	cmp.w	sl, #0
    de2c:	beq.n	de58 <_strtod_l+0x950>
    de2e:	bl	d4d2 <sulp>
    de32:	vadd.f64	d7, d8, d0
    de36:	vmov	r8, r9, d7
    de3a:	b.n	ddfe <_strtod_l+0x8f6>
    de3c:	ands	r3, r2
    de3e:	sub.w	r3, r3, #1048576	; 0x100000
    de42:	mvn.w	r9, r3, lsr #20
    de46:	mvn.w	r9, r9, lsl #20
    de4a:	mov.w	r8, #4294967295
    de4e:	b.n	ddfe <_strtod_l+0x8f6>
    de50:	ldr	r3, [sp, #44]	; 0x2c
    de52:	tst.w	r3, r8
    de56:	b.n	de20 <_strtod_l+0x918>
    de58:	bl	d4d2 <sulp>
    de5c:	vsub.f64	d0, d8, d0
    de60:	vcmp.f64	d0, #0.0
    de64:	vmrs	APSR_nzcv, fpscr
    de68:	vmov	r8, r9, d0
    de6c:	bne.n	ddfe <_strtod_l+0x8f6>
    de6e:	b.n	da62 <_strtod_l+0x55a>
    de70:	mov	r1, r6
    de72:	mov	r0, r5
    de74:	bl	11080 <__ratio>
    de78:	vmov.f64	d7, #0	; 0x40000000  2.0
    de7c:	vcmpe.f64	d0, d7
    de80:	vmrs	APSR_nzcv, fpscr
    de84:	bhi.n	df46 <_strtod_l+0xa3e>
    de86:	cmp.w	sl, #0
    de8a:	bne.n	df5a <_strtod_l+0xa52>
    de8c:	cmp.w	r8, #0
    de90:	bne.n	df2e <_strtod_l+0xa26>
    de92:	ubfx	r3, r9, #0, #20
    de96:	vmov.f64	d13, #112	; 0x3f800000  1.0
    de9a:	cmp	r3, #0
    de9c:	bne.n	df64 <_strtod_l+0xa5c>
    de9e:	vcmpe.f64	d0, d13
    dea2:	vmov.f64	d13, #96	; 0x3f000000  0.5
    dea6:	vmrs	APSR_nzcv, fpscr
    deaa:	bmi.n	deb0 <_strtod_l+0x9a8>
    deac:	vmul.f64	d13, d0, d13
    deb0:	vneg.f64	d12, d13
    deb4:	ldr	r0, [pc, #420]	; (e05c <_strtod_l+0xb54>)
    deb6:	ldr.w	ip, [pc, #432]	; e068 <_strtod_l+0xb60>
    deba:	and.w	r1, fp, r0
    debe:	cmp	r1, ip
    dec0:	vmov	r2, r3, d12
    dec4:	bne.n	dfbc <_strtod_l+0xab4>
    dec6:	sub.w	r9, fp, #55574528	; 0x3500000
    deca:	vmov	d0, r8, r9
    dece:	str	r1, [sp, #40]	; 0x28
    ded0:	bl	10eec <__ulp>
    ded4:	vmov	d14, r8, r9
    ded8:	ldr	r0, [pc, #384]	; (e05c <_strtod_l+0xb54>)
    deda:	vfma.f64	d14, d0, d12
    dede:	vmov	r3, s29
    dee2:	ldr	r2, [pc, #384]	; (e064 <_strtod_l+0xb5c>)
    dee4:	ldr	r1, [sp, #40]	; 0x28
    dee6:	ands	r0, r3
    dee8:	cmp	r0, r2
    deea:	vmov	r8, r9, d14
    deee:	bls.n	df6a <_strtod_l+0xa62>
    def0:	vmov	r2, s17
    def4:	ldr	r3, [pc, #360]	; (e060 <_strtod_l+0xb58>)
    def6:	cmp	r2, r3
    def8:	bne.n	df04 <_strtod_l+0x9fc>
    defa:	vmov	r3, s16
    defe:	adds	r3, #1
    df00:	beq.w	d984 <_strtod_l+0x47c>
    df04:	ldr.w	r9, [pc, #344]	; e060 <_strtod_l+0xb58>
    df08:	mov.w	r8, #4294967295
    df0c:	ldr	r1, [sp, #72]	; 0x48
    df0e:	mov	r0, r4
    df10:	bl	10894 <_Bfree>
    df14:	mov	r1, r7
    df16:	mov	r0, r4
    df18:	bl	10894 <_Bfree>
    df1c:	mov	r1, r6
    df1e:	mov	r0, r4
    df20:	bl	10894 <_Bfree>
    df24:	mov	r1, r5
    df26:	mov	r0, r4
    df28:	bl	10894 <_Bfree>
    df2c:	b.n	db42 <_strtod_l+0x63a>
    df2e:	cmp.w	r8, #1
    df32:	bne.n	df3c <_strtod_l+0xa34>
    df34:	cmp.w	r9, #0
    df38:	beq.w	da62 <_strtod_l+0x55a>
    df3c:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    df40:	vmov.f64	d13, #112	; 0x3f800000  1.0
    df44:	b.n	deb4 <_strtod_l+0x9ac>
    df46:	vmov.f64	d13, #96	; 0x3f000000  0.5
    df4a:	vmul.f64	d13, d0, d13
    df4e:	cmp.w	sl, #0
    df52:	beq.n	deb0 <_strtod_l+0x9a8>
    df54:	vmov.f64	d12, d13
    df58:	b.n	deb4 <_strtod_l+0x9ac>
    df5a:	vmov.f64	d12, #112	; 0x3f800000  1.0
    df5e:	vmov.f64	d13, d12
    df62:	b.n	deb4 <_strtod_l+0x9ac>
    df64:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    df68:	b.n	deb4 <_strtod_l+0x9ac>
    df6a:	add.w	r9, r3, #55574528	; 0x3500000
    df6e:	ldr	r3, [sp, #20]
    df70:	mov	fp, r9
    df72:	cmp	r3, #0
    df74:	bne.n	df0c <_strtod_l+0xa04>
    df76:	bic.w	r3, r9, #2147483648	; 0x80000000
    df7a:	lsrs	r3, r3, #20
    df7c:	lsls	r3, r3, #20
    df7e:	cmp	r1, r3
    df80:	bne.n	df0c <_strtod_l+0xa04>
    df82:	vmov	r0, r1, d13
    df86:	bl	12704 <__aeabi_d2lz>
    df8a:	bl	126a8 <__aeabi_l2d>
    df8e:	ubfx	fp, r9, #0, #20
    df92:	vmov	d7, r0, r1
    df96:	orr.w	fp, fp, r8
    df9a:	orrs.w	fp, fp, sl
    df9e:	vsub.f64	d13, d13, d7
    dfa2:	beq.n	e01e <_strtod_l+0xb16>
    dfa4:	vcmpe.f64	d13, d10
    dfa8:	vmrs	APSR_nzcv, fpscr
    dfac:	bmi.w	d998 <_strtod_l+0x490>
    dfb0:	vcmpe.f64	d13, d11
    dfb4:	vmrs	APSR_nzcv, fpscr
    dfb8:	ble.n	df0c <_strtod_l+0xa04>
    dfba:	b.n	d998 <_strtod_l+0x490>
    dfbc:	ldr	r0, [sp, #20]
    dfbe:	cbz	r0, dffe <_strtod_l+0xaf6>
    dfc0:	cmp.w	r1, #111149056	; 0x6a00000
    dfc4:	bhi.n	dffe <_strtod_l+0xaf6>
    dfc6:	vldr	d7, [pc, #136]	; e050 <_strtod_l+0xb48>
    dfca:	vcmpe.f64	d13, d7
    dfce:	vmrs	APSR_nzcv, fpscr
    dfd2:	bhi.n	dff8 <_strtod_l+0xaf0>
    dfd4:	vcvt.u32.f64	s26, d13
    dfd8:	vmov	r3, s26
    dfdc:	cmp	r3, #1
    dfde:	it	cc
    dfe0:	movcc	r3, #1
    dfe2:	vmov	s26, r3
    dfe6:	vcvt.f64.u32	d13, s26
    dfea:	cmp.w	sl, #0
    dfee:	bne.n	e018 <_strtod_l+0xb10>
    dff0:	vneg.f64	d7, d13
    dff4:	vmov	r2, r3, d7
    dff8:	add.w	r0, r3, #112197632	; 0x6b00000
    dffc:	subs	r3, r0, r1
    dffe:	vmov.f64	d0, d8
    e002:	vmov	d12, r2, r3
    e006:	str	r1, [sp, #40]	; 0x28
    e008:	bl	10eec <__ulp>
    e00c:	ldr	r1, [sp, #40]	; 0x28
    e00e:	vfma.f64	d8, d12, d0
    e012:	vmov	r8, r9, d8
    e016:	b.n	df6e <_strtod_l+0xa66>
    e018:	vmov.f64	d7, d13
    e01c:	b.n	dff4 <_strtod_l+0xaec>
    e01e:	vcmpe.f64	d13, d9
    e022:	vmrs	APSR_nzcv, fpscr
    e026:	bpl.w	df0c <_strtod_l+0xa04>
    e02a:	b.n	d998 <_strtod_l+0x490>
    e02c:	movs	r3, #0
    e02e:	str	r3, [sp, #32]
    e030:	ldr	r2, [sp, #52]	; 0x34
    e032:	ldr	r3, [sp, #68]	; 0x44
    e034:	str	r3, [r2, #0]
    e036:	b.w	d586 <_strtod_l+0x7e>
    e03a:	cmp	r2, #101	; 0x65
    e03c:	beq.w	d784 <_strtod_l+0x27c>
    e040:	cmp	r2, #69	; 0x45
    e042:	beq.w	d784 <_strtod_l+0x27c>
    e046:	movs	r1, #1
    e048:	b.w	d7fc <_strtod_l+0x2f4>
    e04c:	nop.w
    e050:	.word	0xffc00000
    e054:	.word	0x41dfffff
    e058:	.word	0x000fffff
    e05c:	.word	0x7ff00000
    e060:	.word	0x7fefffff
    e064:	.word	0x7c9fffff
    e068:	.word	0x7fe00000

0000e06c <_strtod_r>:
    e06c:	ldr	r3, [pc, #4]	; (e074 <_strtod_r+0x8>)
    e06e:	b.w	d508 <_strtod_l>
    e072:	nop
    e074:	.word	0x20002068

0000e078 <_strtol_l.constprop.0>:
    e078:	cmp	r3, #1
    e07a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e07e:	beq.n	e084 <_strtol_l.constprop.0+0xc>
    e080:	cmp	r3, #36	; 0x24
    e082:	bls.n	e092 <_strtol_l.constprop.0+0x1a>
    e084:	bl	f37c <__errno>
    e088:	movs	r3, #22
    e08a:	str	r3, [r0, #0]
    e08c:	movs	r0, #0
    e08e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e092:	ldr.w	ip, [pc, #228]	; e178 <_strtol_l.constprop.0+0x100>
    e096:	mov	r5, r1
    e098:	mov	r6, r5
    e09a:	ldrb.w	r4, [r5], #1
    e09e:	ldrb.w	r7, [ip, r4]
    e0a2:	ands.w	r7, r7, #8
    e0a6:	bne.n	e098 <_strtol_l.constprop.0+0x20>
    e0a8:	cmp	r4, #45	; 0x2d
    e0aa:	bne.n	e112 <_strtol_l.constprop.0+0x9a>
    e0ac:	ldrb	r4, [r5, #0]
    e0ae:	movs	r7, #1
    e0b0:	adds	r5, r6, #2
    e0b2:	cmp	r3, #0
    e0b4:	beq.n	e16e <_strtol_l.constprop.0+0xf6>
    e0b6:	cmp	r3, #16
    e0b8:	bne.n	e0ce <_strtol_l.constprop.0+0x56>
    e0ba:	cmp	r4, #48	; 0x30
    e0bc:	bne.n	e0ce <_strtol_l.constprop.0+0x56>
    e0be:	ldrb	r4, [r5, #0]
    e0c0:	and.w	r4, r4, #223	; 0xdf
    e0c4:	cmp	r4, #88	; 0x58
    e0c6:	bne.n	e164 <_strtol_l.constprop.0+0xec>
    e0c8:	ldrb	r4, [r5, #1]
    e0ca:	movs	r3, #16
    e0cc:	adds	r5, #2
    e0ce:	add.w	r8, r7, #2147483648	; 0x80000000
    e0d2:	add.w	r8, r8, #4294967295
    e0d6:	mov.w	lr, #0
    e0da:	udiv	r9, r8, r3
    e0de:	mov	r6, lr
    e0e0:	mls	sl, r3, r9, r8
    e0e4:	sub.w	ip, r4, #48	; 0x30
    e0e8:	cmp.w	ip, #9
    e0ec:	bhi.n	e11c <_strtol_l.constprop.0+0xa4>
    e0ee:	mov	r4, ip
    e0f0:	cmp	r3, r4
    e0f2:	ble.n	e13e <_strtol_l.constprop.0+0xc6>
    e0f4:	cmp.w	lr, #4294967295
    e0f8:	beq.n	e10c <_strtol_l.constprop.0+0x94>
    e0fa:	cmp	r9, r6
    e0fc:	bcc.n	e138 <_strtol_l.constprop.0+0xc0>
    e0fe:	bne.n	e104 <_strtol_l.constprop.0+0x8c>
    e100:	cmp	sl, r4
    e102:	blt.n	e138 <_strtol_l.constprop.0+0xc0>
    e104:	mla	r6, r6, r3, r4
    e108:	mov.w	lr, #1
    e10c:	ldrb.w	r4, [r5], #1
    e110:	b.n	e0e4 <_strtol_l.constprop.0+0x6c>
    e112:	cmp	r4, #43	; 0x2b
    e114:	itt	eq
    e116:	ldrbeq	r4, [r5, #0]
    e118:	addeq	r5, r6, #2
    e11a:	b.n	e0b2 <_strtol_l.constprop.0+0x3a>
    e11c:	sub.w	ip, r4, #65	; 0x41
    e120:	cmp.w	ip, #25
    e124:	bhi.n	e12a <_strtol_l.constprop.0+0xb2>
    e126:	subs	r4, #55	; 0x37
    e128:	b.n	e0f0 <_strtol_l.constprop.0+0x78>
    e12a:	sub.w	ip, r4, #97	; 0x61
    e12e:	cmp.w	ip, #25
    e132:	bhi.n	e13e <_strtol_l.constprop.0+0xc6>
    e134:	subs	r4, #87	; 0x57
    e136:	b.n	e0f0 <_strtol_l.constprop.0+0x78>
    e138:	mov.w	lr, #4294967295
    e13c:	b.n	e10c <_strtol_l.constprop.0+0x94>
    e13e:	cmp.w	lr, #4294967295
    e142:	bne.n	e150 <_strtol_l.constprop.0+0xd8>
    e144:	movs	r3, #34	; 0x22
    e146:	str	r3, [r0, #0]
    e148:	mov	r6, r8
    e14a:	cbnz	r2, e15e <_strtol_l.constprop.0+0xe6>
    e14c:	mov	r0, r6
    e14e:	b.n	e08e <_strtol_l.constprop.0+0x16>
    e150:	cbz	r7, e154 <_strtol_l.constprop.0+0xdc>
    e152:	negs	r6, r6
    e154:	cmp	r2, #0
    e156:	beq.n	e14c <_strtol_l.constprop.0+0xd4>
    e158:	cmp.w	lr, #0
    e15c:	beq.n	e160 <_strtol_l.constprop.0+0xe8>
    e15e:	subs	r1, r5, #1
    e160:	str	r1, [r2, #0]
    e162:	b.n	e14c <_strtol_l.constprop.0+0xd4>
    e164:	movs	r4, #48	; 0x30
    e166:	cmp	r3, #0
    e168:	bne.n	e0ce <_strtol_l.constprop.0+0x56>
    e16a:	movs	r3, #8
    e16c:	b.n	e0ce <_strtol_l.constprop.0+0x56>
    e16e:	cmp	r4, #48	; 0x30
    e170:	beq.n	e0be <_strtol_l.constprop.0+0x46>
    e172:	movs	r3, #10
    e174:	b.n	e0ce <_strtol_l.constprop.0+0x56>
    e176:	nop
    e178:	.word	0x2000119d

0000e17c <_strtol_r>:
    e17c:	b.w	e078 <_strtol_l.constprop.0>

0000e180 <__cxa_atexit>:
    e180:	push	{r4, lr}
    e182:	ldr	r4, [pc, #20]	; (e198 <__cxa_atexit+0x18>)
    e184:	mov	r3, r2
    e186:	cbz	r4, e194 <__cxa_atexit+0x14>
    e188:	mov	r2, r1
    e18a:	mov	r1, r0
    e18c:	movs	r0, #2
    e18e:	nop.w
    e192:	pop	{r4, pc}
    e194:	mov	r0, r4
    e196:	b.n	e192 <__cxa_atexit+0x12>
    e198:	.word	0x00000000

0000e19c <fcvt>:
    e19c:	movs	r3, #0
    e19e:	b.w	11194 <fcvtbuf>

0000e1a2 <fcvtf>:
    e1a2:	vcvt.f64.f32	d0, s0
    e1a6:	b.w	e19c <fcvt>

0000e1aa <__cvt>:
    e1aa:	push	{r4, r5, r6, r7, lr}
    e1ac:	vpush	{d8}
    e1b0:	vmov.f64	d8, d0
    e1b4:	sub	sp, #20
    e1b6:	mov	r7, r2
    e1b8:	ldr	r5, [sp, #52]	; 0x34
    e1ba:	ldr	r6, [sp, #48]	; 0x30
    e1bc:	vmov	r2, s17
    e1c0:	bic.w	r5, r5, #32
    e1c4:	cmp	r2, #0
    e1c6:	itet	lt
    e1c8:	movlt	r2, #45	; 0x2d
    e1ca:	movge	r2, #0
    e1cc:	vneglt.f64	d8, d0
    e1d0:	cmp	r5, #70	; 0x46
    e1d2:	mov	r4, r1
    e1d4:	strb	r2, [r3, #0]
    e1d6:	beq.n	e1e2 <__cvt+0x38>
    e1d8:	cmp	r5, #69	; 0x45
    e1da:	bne.n	e1de <__cvt+0x34>
    e1dc:	adds	r4, #1
    e1de:	movs	r1, #2
    e1e0:	b.n	e1e4 <__cvt+0x3a>
    e1e2:	movs	r1, #3
    e1e4:	add	r3, sp, #12
    e1e6:	str	r3, [sp, #4]
    e1e8:	add	r3, sp, #8
    e1ea:	str	r3, [sp, #0]
    e1ec:	mov	r2, r4
    e1ee:	mov	r3, r6
    e1f0:	vmov.f64	d0, d8
    e1f4:	bl	f5d0 <_dtoa_r>
    e1f8:	cmp	r5, #71	; 0x47
    e1fa:	bne.n	e200 <__cvt+0x56>
    e1fc:	lsls	r3, r7, #31
    e1fe:	bpl.n	e236 <__cvt+0x8c>
    e200:	cmp	r5, #70	; 0x46
    e202:	add.w	r2, r0, r4
    e206:	bne.n	e222 <__cvt+0x78>
    e208:	ldrb	r3, [r0, #0]
    e20a:	cmp	r3, #48	; 0x30
    e20c:	bne.n	e21e <__cvt+0x74>
    e20e:	vcmp.f64	d8, #0.0
    e212:	vmrs	APSR_nzcv, fpscr
    e216:	itt	ne
    e218:	rsbne	r4, r4, #1
    e21c:	strne	r4, [r6, #0]
    e21e:	ldr	r3, [r6, #0]
    e220:	add	r2, r3
    e222:	vcmp.f64	d8, #0.0
    e226:	vmrs	APSR_nzcv, fpscr
    e22a:	it	eq
    e22c:	streq	r2, [sp, #12]
    e22e:	movs	r1, #48	; 0x30
    e230:	ldr	r3, [sp, #12]
    e232:	cmp	r3, r2
    e234:	bcc.n	e246 <__cvt+0x9c>
    e236:	ldr	r3, [sp, #12]
    e238:	ldr	r2, [sp, #56]	; 0x38
    e23a:	subs	r3, r3, r0
    e23c:	str	r3, [r2, #0]
    e23e:	add	sp, #20
    e240:	vpop	{d8}
    e244:	pop	{r4, r5, r6, r7, pc}
    e246:	adds	r4, r3, #1
    e248:	str	r4, [sp, #12]
    e24a:	strb	r1, [r3, #0]
    e24c:	b.n	e230 <__cvt+0x86>

0000e24e <__exponent>:
    e24e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e250:	mov	r3, r0
    e252:	cmp	r1, #0
    e254:	it	lt
    e256:	neglt	r1, r1
    e258:	strb.w	r2, [r3], #2
    e25c:	ite	lt
    e25e:	movlt	r2, #45	; 0x2d
    e260:	movge	r2, #43	; 0x2b
    e262:	cmp	r1, #9
    e264:	strb	r2, [r0, #1]
    e266:	ble.n	e2be <__exponent+0x70>
    e268:	add.w	r2, sp, #7
    e26c:	mov	r7, r2
    e26e:	movs	r6, #10
    e270:	mov	ip, r2
    e272:	sdiv	r5, r1, r6
    e276:	mls	r4, r6, r5, r1
    e27a:	adds	r4, #48	; 0x30
    e27c:	strb.w	r4, [ip, #-1]
    e280:	mov	r4, r1
    e282:	cmp	r4, #99	; 0x63
    e284:	add.w	r2, r2, #4294967295
    e288:	mov	r1, r5
    e28a:	bgt.n	e270 <__exponent+0x22>
    e28c:	adds	r1, #48	; 0x30
    e28e:	sub.w	r4, ip, #2
    e292:	strb.w	r1, [r2, #-1]
    e296:	adds	r1, r0, #1
    e298:	mov	r2, r4
    e29a:	cmp	r2, r7
    e29c:	bcc.n	e2b4 <__exponent+0x66>
    e29e:	add.w	r2, sp, #9
    e2a2:	sub.w	r2, r2, ip
    e2a6:	cmp	r4, r7
    e2a8:	it	hi
    e2aa:	movhi	r2, #0
    e2ac:	add	r3, r2
    e2ae:	subs	r0, r3, r0
    e2b0:	add	sp, #12
    e2b2:	pop	{r4, r5, r6, r7, pc}
    e2b4:	ldrb.w	r5, [r2], #1
    e2b8:	strb.w	r5, [r1, #1]!
    e2bc:	b.n	e29a <__exponent+0x4c>
    e2be:	movs	r3, #48	; 0x30
    e2c0:	adds	r1, #48	; 0x30
    e2c2:	strb	r3, [r0, #2]
    e2c4:	strb	r1, [r0, #3]
    e2c6:	adds	r3, r0, #4
    e2c8:	b.n	e2ae <__exponent+0x60>
    e2ca:	movs	r0, r0
    e2cc:	movs	r0, r0
	...

0000e2d0 <_printf_float>:
    e2d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2d4:	sub	sp, #44	; 0x2c
    e2d6:	mov	r4, r1
    e2d8:	ldr.w	r8, [sp, #80]	; 0x50
    e2dc:	mov	r6, r2
    e2de:	mov	r7, r3
    e2e0:	mov	r5, r0
    e2e2:	bl	f2c8 <_localeconv_r>
    e2e6:	ldr.w	fp, [r0]
    e2ea:	mov	r0, fp
    e2ec:	bl	f490 <strlen>
    e2f0:	movs	r3, #0
    e2f2:	str	r3, [sp, #32]
    e2f4:	ldr.w	r3, [r8]
    e2f8:	ldrb.w	r9, [r4, #24]
    e2fc:	ldr	r2, [r4, #0]
    e2fe:	adds	r3, #7
    e300:	bic.w	r3, r3, #7
    e304:	add.w	r1, r3, #8
    e308:	str.w	r1, [r8]
    e30c:	vldr	d0, [r3]
    e310:	vldr	d6, [pc, #604]	; e570 <_printf_float+0x2a0>
    e314:	vabs.f64	d7, d0
    e318:	vcmp.f64	d7, d6
    e31c:	vmrs	APSR_nzcv, fpscr
    e320:	vstr	d0, [r4, #72]	; 0x48
    e324:	mov	sl, r0
    e326:	ble.n	e372 <_printf_float+0xa2>
    e328:	vcmpe.f64	d0, #0.0
    e32c:	vmrs	APSR_nzcv, fpscr
    e330:	bpl.n	e338 <_printf_float+0x68>
    e332:	movs	r3, #45	; 0x2d
    e334:	strb.w	r3, [r4, #67]	; 0x43
    e338:	ldr	r1, [pc, #572]	; (e578 <_printf_float+0x2a8>)
    e33a:	ldr	r3, [pc, #576]	; (e57c <_printf_float+0x2ac>)
    e33c:	cmp.w	r9, #71	; 0x47
    e340:	ite	ls
    e342:	movls	r8, r1
    e344:	movhi	r8, r3
    e346:	movs	r3, #3
    e348:	str	r3, [r4, #16]
    e34a:	bic.w	r2, r2, #4
    e34e:	movs	r3, #0
    e350:	str	r2, [r4, #0]
    e352:	str	r3, [sp, #16]
    e354:	str	r7, [sp, #0]
    e356:	mov	r3, r6
    e358:	add	r2, sp, #36	; 0x24
    e35a:	mov	r1, r4
    e35c:	mov	r0, r5
    e35e:	bl	e704 <_printf_common>
    e362:	adds	r0, #1
    e364:	bne.w	e47c <_printf_float+0x1ac>
    e368:	mov.w	r0, #4294967295
    e36c:	add	sp, #44	; 0x2c
    e36e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e372:	vcmp.f64	d0, d0
    e376:	vmrs	APSR_nzcv, fpscr
    e37a:	bvc.n	e390 <_printf_float+0xc0>
    e37c:	vmov	r3, s1
    e380:	cmp	r3, #0
    e382:	itt	lt
    e384:	movlt	r3, #45	; 0x2d
    e386:	strblt.w	r3, [r4, #67]	; 0x43
    e38a:	ldr	r1, [pc, #500]	; (e580 <_printf_float+0x2b0>)
    e38c:	ldr	r3, [pc, #500]	; (e584 <_printf_float+0x2b4>)
    e38e:	b.n	e33c <_printf_float+0x6c>
    e390:	ldr	r3, [r4, #4]
    e392:	and.w	r1, r9, #223	; 0xdf
    e396:	str	r1, [sp, #16]
    e398:	adds	r1, r3, #1
    e39a:	bne.n	e416 <_printf_float+0x146>
    e39c:	movs	r3, #6
    e39e:	str	r3, [r4, #4]
    e3a0:	movs	r3, #0
    e3a2:	str	r3, [sp, #12]
    e3a4:	add	r3, sp, #32
    e3a6:	strd	r9, r3, [sp, #4]
    e3aa:	orr.w	r2, r2, #1024	; 0x400
    e3ae:	add	r3, sp, #28
    e3b0:	ldr	r1, [r4, #4]
    e3b2:	str	r3, [sp, #0]
    e3b4:	str	r2, [r4, #0]
    e3b6:	add.w	r3, sp, #27
    e3ba:	mov	r0, r5
    e3bc:	bl	e1aa <__cvt>
    e3c0:	ldr	r3, [sp, #16]
    e3c2:	ldr	r1, [sp, #28]
    e3c4:	cmp	r3, #71	; 0x47
    e3c6:	mov	r8, r0
    e3c8:	bne.n	e3dc <_printf_float+0x10c>
    e3ca:	adds	r0, r1, #3
    e3cc:	blt.n	e3d4 <_printf_float+0x104>
    e3ce:	ldr	r3, [r4, #4]
    e3d0:	cmp	r1, r3
    e3d2:	ble.n	e458 <_printf_float+0x188>
    e3d4:	sub.w	r9, r9, #2
    e3d8:	uxtb.w	r9, r9
    e3dc:	cmp.w	r9, #101	; 0x65
    e3e0:	bhi.n	e424 <_printf_float+0x154>
    e3e2:	subs	r1, #1
    e3e4:	mov	r2, r9
    e3e6:	add.w	r0, r4, #80	; 0x50
    e3ea:	str	r1, [sp, #28]
    e3ec:	bl	e24e <__exponent>
    e3f0:	ldr	r2, [sp, #32]
    e3f2:	str	r0, [sp, #16]
    e3f4:	adds	r3, r2, r0
    e3f6:	cmp	r2, #1
    e3f8:	str	r3, [r4, #16]
    e3fa:	bgt.n	e402 <_printf_float+0x132>
    e3fc:	ldr	r2, [r4, #0]
    e3fe:	lsls	r2, r2, #31
    e400:	bpl.n	e406 <_printf_float+0x136>
    e402:	adds	r3, #1
    e404:	str	r3, [r4, #16]
    e406:	ldrb.w	r3, [sp, #27]
    e40a:	cmp	r3, #0
    e40c:	beq.n	e354 <_printf_float+0x84>
    e40e:	movs	r3, #45	; 0x2d
    e410:	strb.w	r3, [r4, #67]	; 0x43
    e414:	b.n	e354 <_printf_float+0x84>
    e416:	ldr	r1, [sp, #16]
    e418:	cmp	r1, #71	; 0x47
    e41a:	bne.n	e3a0 <_printf_float+0xd0>
    e41c:	cmp	r3, #0
    e41e:	bne.n	e3a0 <_printf_float+0xd0>
    e420:	movs	r3, #1
    e422:	b.n	e39e <_printf_float+0xce>
    e424:	cmp.w	r9, #102	; 0x66
    e428:	bne.n	e45c <_printf_float+0x18c>
    e42a:	cmp	r1, #0
    e42c:	ldr	r3, [r4, #4]
    e42e:	ble.n	e448 <_printf_float+0x178>
    e430:	str	r1, [r4, #16]
    e432:	cbnz	r3, e43a <_printf_float+0x16a>
    e434:	ldr	r2, [r4, #0]
    e436:	lsls	r0, r2, #31
    e438:	bpl.n	e440 <_printf_float+0x170>
    e43a:	adds	r3, #1
    e43c:	add	r3, r1
    e43e:	str	r3, [r4, #16]
    e440:	movs	r3, #0
    e442:	str	r1, [r4, #88]	; 0x58
    e444:	str	r3, [sp, #16]
    e446:	b.n	e406 <_printf_float+0x136>
    e448:	cbnz	r3, e450 <_printf_float+0x180>
    e44a:	ldr	r2, [r4, #0]
    e44c:	lsls	r2, r2, #31
    e44e:	bpl.n	e454 <_printf_float+0x184>
    e450:	adds	r3, #2
    e452:	b.n	e43e <_printf_float+0x16e>
    e454:	movs	r3, #1
    e456:	b.n	e43e <_printf_float+0x16e>
    e458:	mov.w	r9, #103	; 0x67
    e45c:	ldr	r3, [sp, #32]
    e45e:	cmp	r1, r3
    e460:	blt.n	e46e <_printf_float+0x19e>
    e462:	ldr	r3, [r4, #0]
    e464:	str	r1, [r4, #16]
    e466:	lsls	r0, r3, #31
    e468:	bpl.n	e440 <_printf_float+0x170>
    e46a:	adds	r3, r1, #1
    e46c:	b.n	e43e <_printf_float+0x16e>
    e46e:	cmp	r1, #0
    e470:	ite	le
    e472:	rsble	r2, r1, #2
    e476:	movgt	r2, #1
    e478:	add	r3, r2
    e47a:	b.n	e43e <_printf_float+0x16e>
    e47c:	ldr	r3, [r4, #0]
    e47e:	lsls	r2, r3, #21
    e480:	bmi.n	e492 <_printf_float+0x1c2>
    e482:	ldr	r3, [r4, #16]
    e484:	mov	r2, r8
    e486:	mov	r1, r6
    e488:	mov	r0, r5
    e48a:	blx	r7
    e48c:	adds	r0, #1
    e48e:	bne.n	e4e6 <_printf_float+0x216>
    e490:	b.n	e368 <_printf_float+0x98>
    e492:	cmp.w	r9, #101	; 0x65
    e496:	bls.w	e65a <_printf_float+0x38a>
    e49a:	vldr	d7, [r4, #72]	; 0x48
    e49e:	vcmp.f64	d7, #0.0
    e4a2:	vmrs	APSR_nzcv, fpscr
    e4a6:	bne.n	e510 <_printf_float+0x240>
    e4a8:	ldr	r2, [pc, #220]	; (e588 <_printf_float+0x2b8>)
    e4aa:	movs	r3, #1
    e4ac:	mov	r1, r6
    e4ae:	mov	r0, r5
    e4b0:	blx	r7
    e4b2:	adds	r0, #1
    e4b4:	beq.w	e368 <_printf_float+0x98>
    e4b8:	ldrd	r2, r3, [sp, #28]
    e4bc:	cmp	r2, r3
    e4be:	blt.n	e4c6 <_printf_float+0x1f6>
    e4c0:	ldr	r3, [r4, #0]
    e4c2:	lsls	r0, r3, #31
    e4c4:	bpl.n	e4e6 <_printf_float+0x216>
    e4c6:	mov	r3, sl
    e4c8:	mov	r2, fp
    e4ca:	mov	r1, r6
    e4cc:	mov	r0, r5
    e4ce:	blx	r7
    e4d0:	adds	r0, #1
    e4d2:	beq.w	e368 <_printf_float+0x98>
    e4d6:	mov.w	r8, #0
    e4da:	add.w	r9, r4, #26
    e4de:	ldr	r3, [sp, #32]
    e4e0:	subs	r3, #1
    e4e2:	cmp	r3, r8
    e4e4:	bgt.n	e4fa <_printf_float+0x22a>
    e4e6:	ldr	r3, [r4, #0]
    e4e8:	lsls	r3, r3, #30
    e4ea:	bmi.w	e6fa <_printf_float+0x42a>
    e4ee:	ldr	r0, [r4, #12]
    e4f0:	ldr	r3, [sp, #36]	; 0x24
    e4f2:	cmp	r0, r3
    e4f4:	it	lt
    e4f6:	movlt	r0, r3
    e4f8:	b.n	e36c <_printf_float+0x9c>
    e4fa:	movs	r3, #1
    e4fc:	mov	r2, r9
    e4fe:	mov	r1, r6
    e500:	mov	r0, r5
    e502:	blx	r7
    e504:	adds	r0, #1
    e506:	beq.w	e368 <_printf_float+0x98>
    e50a:	add.w	r8, r8, #1
    e50e:	b.n	e4de <_printf_float+0x20e>
    e510:	ldr	r3, [sp, #28]
    e512:	cmp	r3, #0
    e514:	bgt.n	e58c <_printf_float+0x2bc>
    e516:	ldr	r2, [pc, #112]	; (e588 <_printf_float+0x2b8>)
    e518:	movs	r3, #1
    e51a:	mov	r1, r6
    e51c:	mov	r0, r5
    e51e:	blx	r7
    e520:	adds	r0, #1
    e522:	beq.w	e368 <_printf_float+0x98>
    e526:	ldrd	r3, r2, [sp, #28]
    e52a:	orrs	r3, r2
    e52c:	bne.n	e534 <_printf_float+0x264>
    e52e:	ldr	r3, [r4, #0]
    e530:	lsls	r1, r3, #31
    e532:	bpl.n	e4e6 <_printf_float+0x216>
    e534:	mov	r3, sl
    e536:	mov	r2, fp
    e538:	mov	r1, r6
    e53a:	mov	r0, r5
    e53c:	blx	r7
    e53e:	adds	r0, #1
    e540:	beq.w	e368 <_printf_float+0x98>
    e544:	mov.w	r9, #0
    e548:	add.w	sl, r4, #26
    e54c:	ldr	r3, [sp, #28]
    e54e:	negs	r3, r3
    e550:	cmp	r3, r9
    e552:	bgt.n	e558 <_printf_float+0x288>
    e554:	ldr	r3, [sp, #32]
    e556:	b.n	e484 <_printf_float+0x1b4>
    e558:	movs	r3, #1
    e55a:	mov	r2, sl
    e55c:	mov	r1, r6
    e55e:	mov	r0, r5
    e560:	blx	r7
    e562:	adds	r0, #1
    e564:	beq.w	e368 <_printf_float+0x98>
    e568:	add.w	r9, r9, #1
    e56c:	b.n	e54c <_printf_float+0x27c>
    e56e:	nop
    e570:	.word	0xffffffff
    e574:	.word	0x7fefffff
    e578:	.word	0x2000132b
    e57c:	.word	0x200010f7
    e580:	.word	0x2000132f
    e584:	.word	0x200010f3
    e588:	.word	0x200010bf
    e58c:	ldr	r2, [sp, #32]
    e58e:	ldr	r3, [r4, #88]	; 0x58
    e590:	cmp	r2, r3
    e592:	it	ge
    e594:	movge	r2, r3
    e596:	cmp	r2, #0
    e598:	mov	r9, r2
    e59a:	bgt.n	e60e <_printf_float+0x33e>
    e59c:	movs	r3, #0
    e59e:	str	r3, [sp, #20]
    e5a0:	bic.w	r9, r9, r9, asr #31
    e5a4:	add.w	r2, r4, #26
    e5a8:	ldr	r3, [r4, #88]	; 0x58
    e5aa:	ldr	r1, [sp, #20]
    e5ac:	str	r3, [sp, #16]
    e5ae:	sub.w	r3, r3, r9
    e5b2:	cmp	r3, r1
    e5b4:	bgt.n	e61e <_printf_float+0x34e>
    e5b6:	ldrd	r2, r3, [sp, #28]
    e5ba:	cmp	r2, r3
    e5bc:	blt.n	e638 <_printf_float+0x368>
    e5be:	ldr	r3, [r4, #0]
    e5c0:	lsls	r2, r3, #31
    e5c2:	bmi.n	e638 <_printf_float+0x368>
    e5c4:	ldrd	r3, r2, [sp, #28]
    e5c8:	sub.w	r9, r2, r3
    e5cc:	ldr	r3, [sp, #16]
    e5ce:	subs	r2, r2, r3
    e5d0:	cmp	r9, r2
    e5d2:	it	ge
    e5d4:	movge	r9, r2
    e5d6:	cmp.w	r9, #0
    e5da:	bgt.n	e648 <_printf_float+0x378>
    e5dc:	mov.w	r8, #0
    e5e0:	bic.w	r9, r9, r9, asr #31
    e5e4:	add.w	sl, r4, #26
    e5e8:	ldrd	r2, r3, [sp, #28]
    e5ec:	subs	r3, r3, r2
    e5ee:	sub.w	r3, r3, r9
    e5f2:	cmp	r3, r8
    e5f4:	ble.w	e4e6 <_printf_float+0x216>
    e5f8:	movs	r3, #1
    e5fa:	mov	r2, sl
    e5fc:	mov	r1, r6
    e5fe:	mov	r0, r5
    e600:	blx	r7
    e602:	adds	r0, #1
    e604:	beq.w	e368 <_printf_float+0x98>
    e608:	add.w	r8, r8, #1
    e60c:	b.n	e5e8 <_printf_float+0x318>
    e60e:	mov	r3, r2
    e610:	mov	r1, r6
    e612:	mov	r2, r8
    e614:	mov	r0, r5
    e616:	blx	r7
    e618:	adds	r0, #1
    e61a:	bne.n	e59c <_printf_float+0x2cc>
    e61c:	b.n	e368 <_printf_float+0x98>
    e61e:	movs	r3, #1
    e620:	mov	r1, r6
    e622:	mov	r0, r5
    e624:	str	r2, [sp, #16]
    e626:	blx	r7
    e628:	adds	r0, #1
    e62a:	beq.w	e368 <_printf_float+0x98>
    e62e:	ldr	r3, [sp, #20]
    e630:	ldr	r2, [sp, #16]
    e632:	adds	r3, #1
    e634:	str	r3, [sp, #20]
    e636:	b.n	e5a8 <_printf_float+0x2d8>
    e638:	mov	r3, sl
    e63a:	mov	r2, fp
    e63c:	mov	r1, r6
    e63e:	mov	r0, r5
    e640:	blx	r7
    e642:	adds	r0, #1
    e644:	bne.n	e5c4 <_printf_float+0x2f4>
    e646:	b.n	e368 <_printf_float+0x98>
    e648:	ldr	r2, [sp, #16]
    e64a:	mov	r3, r9
    e64c:	add	r2, r8
    e64e:	mov	r1, r6
    e650:	mov	r0, r5
    e652:	blx	r7
    e654:	adds	r0, #1
    e656:	bne.n	e5dc <_printf_float+0x30c>
    e658:	b.n	e368 <_printf_float+0x98>
    e65a:	ldr	r2, [sp, #32]
    e65c:	cmp	r2, #1
    e65e:	bgt.n	e664 <_printf_float+0x394>
    e660:	lsls	r3, r3, #31
    e662:	bpl.n	e6d4 <_printf_float+0x404>
    e664:	movs	r3, #1
    e666:	mov	r2, r8
    e668:	mov	r1, r6
    e66a:	mov	r0, r5
    e66c:	blx	r7
    e66e:	adds	r0, #1
    e670:	beq.w	e368 <_printf_float+0x98>
    e674:	mov	r3, sl
    e676:	mov	r2, fp
    e678:	mov	r1, r6
    e67a:	mov	r0, r5
    e67c:	blx	r7
    e67e:	adds	r0, #1
    e680:	beq.w	e368 <_printf_float+0x98>
    e684:	vldr	d7, [r4, #72]	; 0x48
    e688:	vcmp.f64	d7, #0.0
    e68c:	vmrs	APSR_nzcv, fpscr
    e690:	ldr	r3, [sp, #32]
    e692:	beq.n	e6ca <_printf_float+0x3fa>
    e694:	subs	r3, #1
    e696:	add.w	r2, r8, #1
    e69a:	mov	r1, r6
    e69c:	mov	r0, r5
    e69e:	blx	r7
    e6a0:	adds	r0, #1
    e6a2:	bne.n	e6c2 <_printf_float+0x3f2>
    e6a4:	b.n	e368 <_printf_float+0x98>
    e6a6:	movs	r3, #1
    e6a8:	mov	r2, r9
    e6aa:	mov	r1, r6
    e6ac:	mov	r0, r5
    e6ae:	blx	r7
    e6b0:	adds	r0, #1
    e6b2:	beq.w	e368 <_printf_float+0x98>
    e6b6:	add.w	r8, r8, #1
    e6ba:	ldr	r3, [sp, #32]
    e6bc:	subs	r3, #1
    e6be:	cmp	r3, r8
    e6c0:	bgt.n	e6a6 <_printf_float+0x3d6>
    e6c2:	ldr	r3, [sp, #16]
    e6c4:	add.w	r2, r4, #80	; 0x50
    e6c8:	b.n	e486 <_printf_float+0x1b6>
    e6ca:	mov.w	r8, #0
    e6ce:	add.w	r9, r4, #26
    e6d2:	b.n	e6ba <_printf_float+0x3ea>
    e6d4:	movs	r3, #1
    e6d6:	mov	r2, r8
    e6d8:	b.n	e69a <_printf_float+0x3ca>
    e6da:	movs	r3, #1
    e6dc:	mov	r2, r9
    e6de:	mov	r1, r6
    e6e0:	mov	r0, r5
    e6e2:	blx	r7
    e6e4:	adds	r0, #1
    e6e6:	beq.w	e368 <_printf_float+0x98>
    e6ea:	add.w	r8, r8, #1
    e6ee:	ldr	r3, [r4, #12]
    e6f0:	ldr	r1, [sp, #36]	; 0x24
    e6f2:	subs	r3, r3, r1
    e6f4:	cmp	r3, r8
    e6f6:	bgt.n	e6da <_printf_float+0x40a>
    e6f8:	b.n	e4ee <_printf_float+0x21e>
    e6fa:	mov.w	r8, #0
    e6fe:	add.w	r9, r4, #25
    e702:	b.n	e6ee <_printf_float+0x41e>

0000e704 <_printf_common>:
    e704:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e708:	mov	r6, r2
    e70a:	mov	r9, r3
    e70c:	ldr	r2, [r1, #8]
    e70e:	ldr	r3, [r1, #16]
    e710:	ldr.w	r8, [sp, #32]
    e714:	cmp	r3, r2
    e716:	it	lt
    e718:	movlt	r3, r2
    e71a:	str	r3, [r6, #0]
    e71c:	ldrb.w	r2, [r1, #67]	; 0x43
    e720:	mov	r7, r0
    e722:	mov	r4, r1
    e724:	cbz	r2, e72a <_printf_common+0x26>
    e726:	adds	r3, #1
    e728:	str	r3, [r6, #0]
    e72a:	ldr	r3, [r4, #0]
    e72c:	lsls	r1, r3, #26
    e72e:	ittt	mi
    e730:	ldrmi	r3, [r6, #0]
    e732:	addmi	r3, #2
    e734:	strmi	r3, [r6, #0]
    e736:	ldr	r5, [r4, #0]
    e738:	ands.w	r5, r5, #6
    e73c:	bne.n	e74c <_printf_common+0x48>
    e73e:	add.w	sl, r4, #25
    e742:	ldr	r3, [r4, #12]
    e744:	ldr	r2, [r6, #0]
    e746:	subs	r3, r3, r2
    e748:	cmp	r3, r5
    e74a:	bgt.n	e79a <_printf_common+0x96>
    e74c:	ldrb.w	r2, [r4, #67]	; 0x43
    e750:	subs	r3, r2, #0
    e752:	ldr	r2, [r4, #0]
    e754:	it	ne
    e756:	movne	r3, #1
    e758:	lsls	r2, r2, #26
    e75a:	bmi.n	e7b4 <_printf_common+0xb0>
    e75c:	add.w	r2, r4, #67	; 0x43
    e760:	mov	r1, r9
    e762:	mov	r0, r7
    e764:	blx	r8
    e766:	adds	r0, #1
    e768:	beq.n	e7a8 <_printf_common+0xa4>
    e76a:	ldr	r3, [r4, #0]
    e76c:	ldr	r2, [r4, #16]
    e76e:	and.w	r3, r3, #6
    e772:	cmp	r3, #4
    e774:	ittt	eq
    e776:	ldreq	r5, [r4, #12]
    e778:	ldreq	r3, [r6, #0]
    e77a:	subeq	r5, r5, r3
    e77c:	ldr	r3, [r4, #8]
    e77e:	ite	eq
    e780:	biceq.w	r5, r5, r5, asr #31
    e784:	movne	r5, #0
    e786:	cmp	r3, r2
    e788:	itt	gt
    e78a:	subgt	r3, r3, r2
    e78c:	addgt	r5, r5, r3
    e78e:	movs	r6, #0
    e790:	adds	r4, #26
    e792:	cmp	r5, r6
    e794:	bne.n	e7cc <_printf_common+0xc8>
    e796:	movs	r0, #0
    e798:	b.n	e7ac <_printf_common+0xa8>
    e79a:	movs	r3, #1
    e79c:	mov	r2, sl
    e79e:	mov	r1, r9
    e7a0:	mov	r0, r7
    e7a2:	blx	r8
    e7a4:	adds	r0, #1
    e7a6:	bne.n	e7b0 <_printf_common+0xac>
    e7a8:	mov.w	r0, #4294967295
    e7ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e7b0:	adds	r5, #1
    e7b2:	b.n	e742 <_printf_common+0x3e>
    e7b4:	adds	r1, r4, r3
    e7b6:	adds	r2, r3, #1
    e7b8:	movs	r0, #48	; 0x30
    e7ba:	strb.w	r0, [r1, #67]	; 0x43
    e7be:	add	r2, r4
    e7c0:	ldrb.w	r1, [r4, #69]	; 0x45
    e7c4:	strb.w	r1, [r2, #67]	; 0x43
    e7c8:	adds	r3, #2
    e7ca:	b.n	e75c <_printf_common+0x58>
    e7cc:	movs	r3, #1
    e7ce:	mov	r2, r4
    e7d0:	mov	r1, r9
    e7d2:	mov	r0, r7
    e7d4:	blx	r8
    e7d6:	adds	r0, #1
    e7d8:	beq.n	e7a8 <_printf_common+0xa4>
    e7da:	adds	r6, #1
    e7dc:	b.n	e792 <_printf_common+0x8e>
	...

0000e7e0 <_printf_i>:
    e7e0:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e7e4:	ldrb	r7, [r1, #24]
    e7e6:	ldr	r5, [sp, #48]	; 0x30
    e7e8:	cmp	r7, #120	; 0x78
    e7ea:	mov	r9, r2
    e7ec:	mov	r8, r0
    e7ee:	mov	r4, r1
    e7f0:	mov	sl, r3
    e7f2:	add.w	r2, r1, #67	; 0x43
    e7f6:	bhi.n	e808 <_printf_i+0x28>
    e7f8:	cmp	r7, #98	; 0x62
    e7fa:	bhi.n	e812 <_printf_i+0x32>
    e7fc:	cmp	r7, #0
    e7fe:	beq.w	e9aa <_printf_i+0x1ca>
    e802:	cmp	r7, #88	; 0x58
    e804:	beq.w	e988 <_printf_i+0x1a8>
    e808:	add.w	r5, r4, #66	; 0x42
    e80c:	strb.w	r7, [r4, #66]	; 0x42
    e810:	b.n	e888 <_printf_i+0xa8>
    e812:	sub.w	r3, r7, #99	; 0x63
    e816:	cmp	r3, #21
    e818:	bhi.n	e808 <_printf_i+0x28>
    e81a:	add	r1, pc, #4	; (adr r1, e820 <_printf_i+0x40>)
    e81c:	ldr.w	pc, [r1, r3, lsl #2]
    e820:	.word	0x0000e879
    e824:	.word	0x0000e88d
    e828:	.word	0x0000e809
    e82c:	.word	0x0000e809
    e830:	.word	0x0000e809
    e834:	.word	0x0000e809
    e838:	.word	0x0000e88d
    e83c:	.word	0x0000e809
    e840:	.word	0x0000e809
    e844:	.word	0x0000e809
    e848:	.word	0x0000e809
    e84c:	.word	0x0000e991
    e850:	.word	0x0000e8b9
    e854:	.word	0x0000e94b
    e858:	.word	0x0000e809
    e85c:	.word	0x0000e809
    e860:	.word	0x0000e9b3
    e864:	.word	0x0000e809
    e868:	.word	0x0000e8b9
    e86c:	.word	0x0000e809
    e870:	.word	0x0000e809
    e874:	.word	0x0000e953
    e878:	ldr	r3, [r5, #0]
    e87a:	adds	r2, r3, #4
    e87c:	ldr	r3, [r3, #0]
    e87e:	str	r2, [r5, #0]
    e880:	add.w	r5, r4, #66	; 0x42
    e884:	strb.w	r3, [r4, #66]	; 0x42
    e888:	movs	r3, #1
    e88a:	b.n	e9cc <_printf_i+0x1ec>
    e88c:	ldr	r0, [r4, #0]
    e88e:	ldr	r3, [r5, #0]
    e890:	lsls	r7, r0, #24
    e892:	add.w	r1, r3, #4
    e896:	str	r1, [r5, #0]
    e898:	bpl.n	e89e <_printf_i+0xbe>
    e89a:	ldr	r6, [r3, #0]
    e89c:	b.n	e8a6 <_printf_i+0xc6>
    e89e:	lsls	r6, r0, #25
    e8a0:	bpl.n	e89a <_printf_i+0xba>
    e8a2:	ldrsh.w	r6, [r3]
    e8a6:	cmp	r6, #0
    e8a8:	bge.n	e8b2 <_printf_i+0xd2>
    e8aa:	movs	r3, #45	; 0x2d
    e8ac:	negs	r6, r6
    e8ae:	strb.w	r3, [r4, #67]	; 0x43
    e8b2:	ldr	r0, [pc, #360]	; (ea1c <_printf_i+0x23c>)
    e8b4:	movs	r3, #10
    e8b6:	b.n	e8de <_printf_i+0xfe>
    e8b8:	ldr	r3, [r5, #0]
    e8ba:	ldr	r0, [r4, #0]
    e8bc:	adds	r1, r3, #4
    e8be:	str	r1, [r5, #0]
    e8c0:	lsls	r5, r0, #24
    e8c2:	bpl.n	e8c8 <_printf_i+0xe8>
    e8c4:	ldr	r6, [r3, #0]
    e8c6:	b.n	e8ce <_printf_i+0xee>
    e8c8:	lsls	r1, r0, #25
    e8ca:	bpl.n	e8c4 <_printf_i+0xe4>
    e8cc:	ldrh	r6, [r3, #0]
    e8ce:	ldr	r0, [pc, #332]	; (ea1c <_printf_i+0x23c>)
    e8d0:	cmp	r7, #111	; 0x6f
    e8d2:	ite	eq
    e8d4:	moveq	r3, #8
    e8d6:	movne	r3, #10
    e8d8:	movs	r1, #0
    e8da:	strb.w	r1, [r4, #67]	; 0x43
    e8de:	ldr	r5, [r4, #4]
    e8e0:	str	r5, [r4, #8]
    e8e2:	cmp	r5, #0
    e8e4:	ittt	ge
    e8e6:	ldrge	r1, [r4, #0]
    e8e8:	bicge.w	r1, r1, #4
    e8ec:	strge	r1, [r4, #0]
    e8ee:	cbnz	r6, e8f4 <_printf_i+0x114>
    e8f0:	cmp	r5, #0
    e8f2:	beq.n	e98c <_printf_i+0x1ac>
    e8f4:	mov	r5, r2
    e8f6:	udiv	r1, r6, r3
    e8fa:	mls	r7, r3, r1, r6
    e8fe:	ldrb	r7, [r0, r7]
    e900:	strb.w	r7, [r5, #-1]!
    e904:	mov	r7, r6
    e906:	cmp	r3, r7
    e908:	mov	r6, r1
    e90a:	bls.n	e8f6 <_printf_i+0x116>
    e90c:	cmp	r3, #8
    e90e:	bne.n	e928 <_printf_i+0x148>
    e910:	ldr	r3, [r4, #0]
    e912:	lsls	r6, r3, #31
    e914:	bpl.n	e928 <_printf_i+0x148>
    e916:	ldr	r3, [r4, #16]
    e918:	ldr	r1, [r4, #4]
    e91a:	cmp	r1, r3
    e91c:	ittt	le
    e91e:	movle	r3, #48	; 0x30
    e920:	strble.w	r3, [r5, #-1]
    e924:	addle.w	r5, r5, #4294967295
    e928:	subs	r2, r2, r5
    e92a:	str	r2, [r4, #16]
    e92c:	str.w	sl, [sp]
    e930:	mov	r3, r9
    e932:	add	r2, sp, #12
    e934:	mov	r1, r4
    e936:	mov	r0, r8
    e938:	bl	e704 <_printf_common>
    e93c:	adds	r0, #1
    e93e:	bne.n	e9d6 <_printf_i+0x1f6>
    e940:	mov.w	r0, #4294967295
    e944:	add	sp, #16
    e946:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e94a:	ldr	r3, [r4, #0]
    e94c:	orr.w	r3, r3, #32
    e950:	str	r3, [r4, #0]
    e952:	ldr	r0, [pc, #204]	; (ea20 <_printf_i+0x240>)
    e954:	movs	r7, #120	; 0x78
    e956:	strb.w	r7, [r4, #69]	; 0x45
    e95a:	ldr	r3, [r4, #0]
    e95c:	ldr	r1, [r5, #0]
    e95e:	lsls	r7, r3, #24
    e960:	ldr.w	r6, [r1], #4
    e964:	bmi.n	e96c <_printf_i+0x18c>
    e966:	lsls	r7, r3, #25
    e968:	it	mi
    e96a:	uxthmi	r6, r6
    e96c:	lsls	r7, r3, #31
    e96e:	it	mi
    e970:	orrmi.w	r3, r3, #32
    e974:	str	r1, [r5, #0]
    e976:	it	mi
    e978:	strmi	r3, [r4, #0]
    e97a:	cbnz	r6, e984 <_printf_i+0x1a4>
    e97c:	ldr	r3, [r4, #0]
    e97e:	bic.w	r3, r3, #32
    e982:	str	r3, [r4, #0]
    e984:	movs	r3, #16
    e986:	b.n	e8d8 <_printf_i+0xf8>
    e988:	ldr	r0, [pc, #144]	; (ea1c <_printf_i+0x23c>)
    e98a:	b.n	e956 <_printf_i+0x176>
    e98c:	mov	r5, r2
    e98e:	b.n	e90c <_printf_i+0x12c>
    e990:	ldr	r3, [r5, #0]
    e992:	ldr	r6, [r4, #0]
    e994:	ldr	r1, [r4, #20]
    e996:	adds	r0, r3, #4
    e998:	str	r0, [r5, #0]
    e99a:	lsls	r5, r6, #24
    e99c:	ldr	r3, [r3, #0]
    e99e:	bpl.n	e9a4 <_printf_i+0x1c4>
    e9a0:	str	r1, [r3, #0]
    e9a2:	b.n	e9aa <_printf_i+0x1ca>
    e9a4:	lsls	r0, r6, #25
    e9a6:	bpl.n	e9a0 <_printf_i+0x1c0>
    e9a8:	strh	r1, [r3, #0]
    e9aa:	movs	r3, #0
    e9ac:	str	r3, [r4, #16]
    e9ae:	mov	r5, r2
    e9b0:	b.n	e92c <_printf_i+0x14c>
    e9b2:	ldr	r3, [r5, #0]
    e9b4:	adds	r2, r3, #4
    e9b6:	str	r2, [r5, #0]
    e9b8:	ldr	r5, [r3, #0]
    e9ba:	ldr	r2, [r4, #4]
    e9bc:	movs	r1, #0
    e9be:	mov	r0, r5
    e9c0:	bl	f3f0 <memchr>
    e9c4:	cbz	r0, e9ca <_printf_i+0x1ea>
    e9c6:	subs	r0, r0, r5
    e9c8:	str	r0, [r4, #4]
    e9ca:	ldr	r3, [r4, #4]
    e9cc:	str	r3, [r4, #16]
    e9ce:	movs	r3, #0
    e9d0:	strb.w	r3, [r4, #67]	; 0x43
    e9d4:	b.n	e92c <_printf_i+0x14c>
    e9d6:	ldr	r3, [r4, #16]
    e9d8:	mov	r2, r5
    e9da:	mov	r1, r9
    e9dc:	mov	r0, r8
    e9de:	blx	sl
    e9e0:	adds	r0, #1
    e9e2:	beq.n	e940 <_printf_i+0x160>
    e9e4:	ldr	r3, [r4, #0]
    e9e6:	lsls	r3, r3, #30
    e9e8:	bmi.n	ea12 <_printf_i+0x232>
    e9ea:	ldr	r0, [r4, #12]
    e9ec:	ldr	r3, [sp, #12]
    e9ee:	cmp	r0, r3
    e9f0:	it	lt
    e9f2:	movlt	r0, r3
    e9f4:	b.n	e944 <_printf_i+0x164>
    e9f6:	movs	r3, #1
    e9f8:	mov	r2, r6
    e9fa:	mov	r1, r9
    e9fc:	mov	r0, r8
    e9fe:	blx	sl
    ea00:	adds	r0, #1
    ea02:	beq.n	e940 <_printf_i+0x160>
    ea04:	adds	r5, #1
    ea06:	ldr	r3, [r4, #12]
    ea08:	ldr	r1, [sp, #12]
    ea0a:	subs	r3, r3, r1
    ea0c:	cmp	r3, r5
    ea0e:	bgt.n	e9f6 <_printf_i+0x216>
    ea10:	b.n	e9ea <_printf_i+0x20a>
    ea12:	movs	r5, #0
    ea14:	add.w	r6, r4, #25
    ea18:	b.n	ea06 <_printf_i+0x226>
    ea1a:	nop
    ea1c:	.word	0x20001333
    ea20:	.word	0x20001344

0000ea24 <_scanf_float>:
    ea24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea28:	sub	sp, #28
    ea2a:	mov	r7, r2
    ea2c:	str	r3, [sp, #12]
    ea2e:	ldr	r3, [r1, #8]
    ea30:	subs	r2, r3, #1
    ea32:	cmp.w	r2, #348	; 0x15c
    ea36:	ittte	hi
    ea38:	mvnhi.w	r5, #348	; 0x15c
    ea3c:	addhi	r3, r3, r5
    ea3e:	strhi	r3, [sp, #8]
    ea40:	movls	r3, #0
    ea42:	itte	hi
    ea44:	movwhi	r3, #349	; 0x15d
    ea48:	strhi	r3, [r1, #8]
    ea4a:	strls	r3, [sp, #8]
    ea4c:	ldr	r3, [r1, #0]
    ea4e:	mov	fp, r1
    ea50:	movs	r5, #0
    ea52:	orr.w	r3, r3, #1920	; 0x780
    ea56:	str.w	r3, [fp], #28
    ea5a:	strd	r5, r5, [sp, #16]
    ea5e:	mov	r8, r0
    ea60:	mov	r4, r1
    ea62:	mov	r6, fp
    ea64:	mov	sl, r5
    ea66:	mov	r9, r5
    ea68:	str	r5, [sp, #4]
    ea6a:	ldr	r2, [r4, #8]
    ea6c:	cbz	r2, ea84 <_scanf_float+0x60>
    ea6e:	ldr	r3, [r7, #0]
    ea70:	ldrb	r3, [r3, #0]
    ea72:	cmp	r3, #78	; 0x4e
    ea74:	bhi.n	eb40 <_scanf_float+0x11c>
    ea76:	cmp	r3, #64	; 0x40
    ea78:	bhi.n	eaf4 <_scanf_float+0xd0>
    ea7a:	sub.w	r1, r3, #43	; 0x2b
    ea7e:	uxtb	r0, r1
    ea80:	cmp	r0, #14
    ea82:	bls.n	eafa <_scanf_float+0xd6>
    ea84:	cmp.w	r9, #0
    ea88:	beq.n	ea92 <_scanf_float+0x6e>
    ea8a:	ldr	r3, [r4, #0]
    ea8c:	bic.w	r3, r3, #256	; 0x100
    ea90:	str	r3, [r4, #0]
    ea92:	add.w	sl, sl, #4294967295
    ea96:	cmp.w	sl, #1
    ea9a:	bhi.w	ecc4 <_scanf_float+0x2a0>
    ea9e:	cmp	r6, fp
    eaa0:	bhi.w	ecae <_scanf_float+0x28a>
    eaa4:	movs	r5, #1
    eaa6:	mov	r0, r5
    eaa8:	add	sp, #28
    eaaa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaae:	sub.w	r2, r3, #97	; 0x61
    eab2:	cmp	r2, #13
    eab4:	bhi.n	ea84 <_scanf_float+0x60>
    eab6:	add	r1, pc, #4	; (adr r1, eabc <_scanf_float+0x98>)
    eab8:	ldr.w	pc, [r1, r2, lsl #2]
    eabc:	.word	0x0000ebfb
    eac0:	.word	0x0000ea85
    eac4:	.word	0x0000ea85
    eac8:	.word	0x0000ea85
    eacc:	.word	0x0000ec5b
    ead0:	.word	0x0000ec33
    ead4:	.word	0x0000ea85
    ead8:	.word	0x0000ea85
    eadc:	.word	0x0000ec09
    eae0:	.word	0x0000ea85
    eae4:	.word	0x0000ea85
    eae8:	.word	0x0000ea85
    eaec:	.word	0x0000ea85
    eaf0:	.word	0x0000ebc1
    eaf4:	sub.w	r2, r3, #65	; 0x41
    eaf8:	b.n	eab2 <_scanf_float+0x8e>
    eafa:	cmp	r1, #14
    eafc:	bhi.n	ea84 <_scanf_float+0x60>
    eafe:	add	r0, pc, #4	; (adr r0, eb04 <_scanf_float+0xe0>)
    eb00:	ldr.w	pc, [r0, r1, lsl #2]
    eb04:	.word	0x0000ebb3
    eb08:	.word	0x0000ea85
    eb0c:	.word	0x0000ebb3
    eb10:	.word	0x0000ec47
    eb14:	.word	0x0000ea85
    eb18:	.word	0x0000eb61
    eb1c:	.word	0x0000eb9d
    eb20:	.word	0x0000eb9d
    eb24:	.word	0x0000eb9d
    eb28:	.word	0x0000eb9d
    eb2c:	.word	0x0000eb9d
    eb30:	.word	0x0000eb9d
    eb34:	.word	0x0000eb9d
    eb38:	.word	0x0000eb9d
    eb3c:	.word	0x0000eb9d
    eb40:	cmp	r3, #110	; 0x6e
    eb42:	bhi.n	eb58 <_scanf_float+0x134>
    eb44:	cmp	r3, #96	; 0x60
    eb46:	bhi.n	eaae <_scanf_float+0x8a>
    eb48:	cmp	r3, #84	; 0x54
    eb4a:	beq.n	ec3c <_scanf_float+0x218>
    eb4c:	cmp	r3, #89	; 0x59
    eb4e:	bne.n	ea84 <_scanf_float+0x60>
    eb50:	cmp	r5, #7
    eb52:	bne.n	ea84 <_scanf_float+0x60>
    eb54:	movs	r5, #8
    eb56:	b.n	ebac <_scanf_float+0x188>
    eb58:	cmp	r3, #116	; 0x74
    eb5a:	beq.n	ec3c <_scanf_float+0x218>
    eb5c:	cmp	r3, #121	; 0x79
    eb5e:	b.n	eb4e <_scanf_float+0x12a>
    eb60:	ldr	r1, [r4, #0]
    eb62:	lsls	r0, r1, #23
    eb64:	bpl.n	eb9c <_scanf_float+0x178>
    eb66:	ldr	r3, [sp, #8]
    eb68:	bic.w	r1, r1, #128	; 0x80
    eb6c:	str	r1, [r4, #0]
    eb6e:	add.w	r9, r9, #1
    eb72:	cbz	r3, eb7c <_scanf_float+0x158>
    eb74:	subs	r3, #1
    eb76:	adds	r2, #1
    eb78:	str	r3, [sp, #8]
    eb7a:	str	r2, [r4, #8]
    eb7c:	ldr	r3, [r4, #8]
    eb7e:	subs	r3, #1
    eb80:	str	r3, [r4, #8]
    eb82:	ldr	r3, [r4, #16]
    eb84:	adds	r3, #1
    eb86:	str	r3, [r4, #16]
    eb88:	ldr	r3, [r7, #4]
    eb8a:	subs	r3, #1
    eb8c:	cmp	r3, #0
    eb8e:	str	r3, [r7, #4]
    eb90:	ble.w	ec9c <_scanf_float+0x278>
    eb94:	ldr	r3, [r7, #0]
    eb96:	adds	r3, #1
    eb98:	str	r3, [r7, #0]
    eb9a:	b.n	ea6a <_scanf_float+0x46>
    eb9c:	cmn.w	sl, r5
    eba0:	bne.w	ea84 <_scanf_float+0x60>
    eba4:	ldr	r2, [r4, #0]
    eba6:	bic.w	r2, r2, #384	; 0x180
    ebaa:	str	r2, [r4, #0]
    ebac:	strb.w	r3, [r6], #1
    ebb0:	b.n	eb7c <_scanf_float+0x158>
    ebb2:	ldr	r2, [r4, #0]
    ebb4:	lsls	r0, r2, #24
    ebb6:	bpl.w	ea84 <_scanf_float+0x60>
    ebba:	bic.w	r2, r2, #128	; 0x80
    ebbe:	b.n	ebaa <_scanf_float+0x186>
    ebc0:	cmp.w	sl, #0
    ebc4:	bne.n	ebe4 <_scanf_float+0x1c0>
    ebc6:	cmp.w	r9, #0
    ebca:	bne.n	ebea <_scanf_float+0x1c6>
    ebcc:	ldr	r2, [r4, #0]
    ebce:	and.w	r1, r2, #1792	; 0x700
    ebd2:	cmp.w	r1, #1792	; 0x700
    ebd6:	bne.n	ebea <_scanf_float+0x1c6>
    ebd8:	bic.w	r2, r2, #1920	; 0x780
    ebdc:	str	r2, [r4, #0]
    ebde:	mov.w	sl, #1
    ebe2:	b.n	ebac <_scanf_float+0x188>
    ebe4:	cmp.w	sl, #2
    ebe8:	beq.n	ec96 <_scanf_float+0x272>
    ebea:	cmp	r5, #1
    ebec:	beq.n	ebf4 <_scanf_float+0x1d0>
    ebee:	cmp	r5, #4
    ebf0:	bne.w	ea84 <_scanf_float+0x60>
    ebf4:	adds	r5, #1
    ebf6:	uxtb	r5, r5
    ebf8:	b.n	ebac <_scanf_float+0x188>
    ebfa:	cmp.w	sl, #1
    ebfe:	bne.w	ea84 <_scanf_float+0x60>
    ec02:	mov.w	sl, #2
    ec06:	b.n	ebac <_scanf_float+0x188>
    ec08:	cbnz	r5, ec2a <_scanf_float+0x206>
    ec0a:	cmp.w	r9, #0
    ec0e:	bne.w	ea8a <_scanf_float+0x66>
    ec12:	ldr	r2, [r4, #0]
    ec14:	and.w	r1, r2, #1792	; 0x700
    ec18:	cmp.w	r1, #1792	; 0x700
    ec1c:	bne.w	ea92 <_scanf_float+0x6e>
    ec20:	bic.w	r2, r2, #1920	; 0x780
    ec24:	str	r2, [r4, #0]
    ec26:	movs	r5, #1
    ec28:	b.n	ebac <_scanf_float+0x188>
    ec2a:	cmp	r5, #3
    ec2c:	beq.n	ebf4 <_scanf_float+0x1d0>
    ec2e:	cmp	r5, #5
    ec30:	b.n	ebf0 <_scanf_float+0x1cc>
    ec32:	cmp	r5, #2
    ec34:	bne.w	ea84 <_scanf_float+0x60>
    ec38:	movs	r5, #3
    ec3a:	b.n	ebac <_scanf_float+0x188>
    ec3c:	cmp	r5, #6
    ec3e:	bne.w	ea84 <_scanf_float+0x60>
    ec42:	movs	r5, #7
    ec44:	b.n	ebac <_scanf_float+0x188>
    ec46:	ldr	r2, [r4, #0]
    ec48:	lsls	r1, r2, #22
    ec4a:	bpl.w	ea84 <_scanf_float+0x60>
    ec4e:	bic.w	r2, r2, #640	; 0x280
    ec52:	str	r2, [r4, #0]
    ec54:	str.w	r9, [sp, #4]
    ec58:	b.n	ebac <_scanf_float+0x188>
    ec5a:	ldr	r2, [r4, #0]
    ec5c:	and.w	r1, r2, #1280	; 0x500
    ec60:	cmp.w	r1, #1024	; 0x400
    ec64:	beq.n	ec74 <_scanf_float+0x250>
    ec66:	lsls	r0, r2, #21
    ec68:	bpl.w	ea84 <_scanf_float+0x60>
    ec6c:	cmp.w	r9, #0
    ec70:	beq.w	ea92 <_scanf_float+0x6e>
    ec74:	lsls	r1, r2, #22
    ec76:	it	pl
    ec78:	ldrpl	r1, [sp, #4]
    ec7a:	bic.w	r2, r2, #1920	; 0x780
    ec7e:	it	pl
    ec80:	subpl.w	r1, r9, r1
    ec84:	orr.w	r2, r2, #384	; 0x180
    ec88:	it	pl
    ec8a:	strdpl	r1, r6, [sp, #16]
    ec8e:	str	r2, [r4, #0]
    ec90:	mov.w	r9, #0
    ec94:	b.n	ebac <_scanf_float+0x188>
    ec96:	mov.w	sl, #3
    ec9a:	b.n	ebac <_scanf_float+0x188>
    ec9c:	ldr.w	r3, [r4, #384]	; 0x180
    eca0:	mov	r1, r7
    eca2:	mov	r0, r8
    eca4:	blx	r3
    eca6:	cmp	r0, #0
    eca8:	beq.w	ea6a <_scanf_float+0x46>
    ecac:	b.n	ea84 <_scanf_float+0x60>
    ecae:	ldr.w	r3, [r4, #380]	; 0x17c
    ecb2:	ldrb.w	r1, [r6, #-1]!
    ecb6:	mov	r2, r7
    ecb8:	mov	r0, r8
    ecba:	blx	r3
    ecbc:	ldr	r3, [r4, #16]
    ecbe:	subs	r3, #1
    ecc0:	str	r3, [r4, #16]
    ecc2:	b.n	ea9e <_scanf_float+0x7a>
    ecc4:	subs	r3, r5, #1
    ecc6:	cmp	r3, #6
    ecc8:	bhi.n	ed16 <_scanf_float+0x2f2>
    ecca:	cmp	r5, #2
    eccc:	bhi.n	ed3c <_scanf_float+0x318>
    ecce:	cmp	r6, fp
    ecd0:	bls.w	eaa4 <_scanf_float+0x80>
    ecd4:	ldr.w	r3, [r4, #380]	; 0x17c
    ecd8:	ldrb.w	r1, [r6, #-1]!
    ecdc:	mov	r2, r7
    ecde:	mov	r0, r8
    ece0:	blx	r3
    ece2:	ldr	r3, [r4, #16]
    ece4:	subs	r3, #1
    ece6:	str	r3, [r4, #16]
    ece8:	b.n	ecce <_scanf_float+0x2aa>
    ecea:	ldr	r0, [sp, #8]
    ecec:	ldr.w	r3, [r4, #380]	; 0x17c
    ecf0:	ldrb.w	r1, [r0, #-1]!
    ecf4:	str	r0, [sp, #8]
    ecf6:	mov	r2, r7
    ecf8:	mov	r0, r8
    ecfa:	blx	r3
    ecfc:	ldr	r3, [r4, #16]
    ecfe:	subs	r3, #1
    ed00:	str	r3, [r4, #16]
    ed02:	add.w	sl, sl, #4294967295
    ed06:	uxtb.w	sl, sl
    ed0a:	cmp.w	sl, #2
    ed0e:	bne.n	ecea <_scanf_float+0x2c6>
    ed10:	subs	r5, #3
    ed12:	uxtb	r5, r5
    ed14:	subs	r6, r6, r5
    ed16:	ldr	r3, [r4, #0]
    ed18:	lsls	r2, r3, #23
    ed1a:	bpl.n	ed7c <_scanf_float+0x358>
    ed1c:	lsls	r3, r3, #21
    ed1e:	bpl.n	ed42 <_scanf_float+0x31e>
    ed20:	cmp	r6, fp
    ed22:	bls.w	eaa4 <_scanf_float+0x80>
    ed26:	ldr.w	r3, [r4, #380]	; 0x17c
    ed2a:	ldrb.w	r1, [r6, #-1]!
    ed2e:	mov	r2, r7
    ed30:	mov	r0, r8
    ed32:	blx	r3
    ed34:	ldr	r3, [r4, #16]
    ed36:	subs	r3, #1
    ed38:	str	r3, [r4, #16]
    ed3a:	b.n	ed20 <_scanf_float+0x2fc>
    ed3c:	mov	sl, r5
    ed3e:	str	r6, [sp, #8]
    ed40:	b.n	ed02 <_scanf_float+0x2de>
    ed42:	ldrb.w	r1, [r6, #-1]
    ed46:	ldr	r3, [r4, #16]
    ed48:	cmp	r1, #101	; 0x65
    ed4a:	add.w	r3, r3, #4294967295
    ed4e:	add.w	r5, r6, #4294967295
    ed52:	str	r3, [r4, #16]
    ed54:	beq.n	ed70 <_scanf_float+0x34c>
    ed56:	cmp	r1, #69	; 0x45
    ed58:	beq.n	ed70 <_scanf_float+0x34c>
    ed5a:	ldr.w	r3, [r4, #380]	; 0x17c
    ed5e:	mov	r2, r7
    ed60:	mov	r0, r8
    ed62:	blx	r3
    ed64:	ldr	r3, [r4, #16]
    ed66:	ldrb.w	r1, [r6, #-2]
    ed6a:	subs	r3, #1
    ed6c:	subs	r5, r6, #2
    ed6e:	str	r3, [r4, #16]
    ed70:	ldr.w	r3, [r4, #380]	; 0x17c
    ed74:	mov	r2, r7
    ed76:	mov	r0, r8
    ed78:	blx	r3
    ed7a:	mov	r6, r5
    ed7c:	ldr	r5, [r4, #0]
    ed7e:	ands.w	r5, r5, #16
    ed82:	bne.n	ee20 <_scanf_float+0x3fc>
    ed84:	strb	r5, [r6, #0]
    ed86:	ldr	r3, [r4, #0]
    ed88:	and.w	r3, r3, #1536	; 0x600
    ed8c:	cmp.w	r3, #1024	; 0x400
    ed90:	bne.n	edc8 <_scanf_float+0x3a4>
    ed92:	ldr	r3, [sp, #4]
    ed94:	cmp	r3, r9
    ed96:	sub.w	r2, r3, r9
    ed9a:	bne.n	ede2 <_scanf_float+0x3be>
    ed9c:	movs	r2, #0
    ed9e:	mov	r1, fp
    eda0:	mov	r0, r8
    eda2:	bl	e06c <_strtod_r>
    eda6:	ldr	r3, [sp, #12]
    eda8:	ldr	r1, [r4, #0]
    edaa:	ldr	r3, [r3, #0]
    edac:	tst.w	r1, #2
    edb0:	add.w	r2, r3, #4
    edb4:	beq.n	edf8 <_scanf_float+0x3d4>
    edb6:	ldr	r1, [sp, #12]
    edb8:	str	r2, [r1, #0]
    edba:	ldr	r3, [r3, #0]
    edbc:	vstr	d0, [r3]
    edc0:	ldr	r3, [r4, #12]
    edc2:	adds	r3, #1
    edc4:	str	r3, [r4, #12]
    edc6:	b.n	eaa6 <_scanf_float+0x82>
    edc8:	ldr	r3, [sp, #16]
    edca:	cmp	r3, #0
    edcc:	beq.n	ed9c <_scanf_float+0x378>
    edce:	ldr	r1, [sp, #20]
    edd0:	movs	r3, #10
    edd2:	mov	r2, r5
    edd4:	adds	r1, #1
    edd6:	mov	r0, r8
    edd8:	bl	e17c <_strtol_r>
    eddc:	ldr	r3, [sp, #16]
    edde:	ldr	r6, [sp, #20]
    ede0:	subs	r2, r0, r3
    ede2:	addw	r3, r4, #367	; 0x16f
    ede6:	cmp	r6, r3
    ede8:	it	cs
    edea:	addcs.w	r6, r4, #366	; 0x16e
    edee:	ldr	r1, [pc, #52]	; (ee24 <_scanf_float+0x400>)
    edf0:	mov	r0, r6
    edf2:	bl	eff4 <siprintf>
    edf6:	b.n	ed9c <_scanf_float+0x378>
    edf8:	tst.w	r1, #4
    edfc:	ldr	r1, [sp, #12]
    edfe:	str	r2, [r1, #0]
    ee00:	bne.n	edba <_scanf_float+0x396>
    ee02:	vcmp.f64	d0, d0
    ee06:	vmrs	APSR_nzcv, fpscr
    ee0a:	ldr	r6, [r3, #0]
    ee0c:	bvc.n	ee1a <_scanf_float+0x3f6>
    ee0e:	ldr	r0, [pc, #24]	; (ee28 <_scanf_float+0x404>)
    ee10:	bl	f4b0 <nanf>
    ee14:	vstr	s0, [r6]
    ee18:	b.n	edc0 <_scanf_float+0x39c>
    ee1a:	vcvt.f32.f64	s0, d0
    ee1e:	b.n	ee14 <_scanf_float+0x3f0>
    ee20:	movs	r5, #0
    ee22:	b.n	eaa6 <_scanf_float+0x82>
    ee24:	.word	0x20001355
    ee28:	.word	0x20000d24

0000ee2c <std>:
    ee2c:	movs	r3, #0
    ee2e:	push	{r4, lr}
    ee30:	mov	r4, r0
    ee32:	strd	r3, r3, [r0]
    ee36:	strd	r3, r3, [r0, #16]
    ee3a:	str	r3, [r0, #8]
    ee3c:	strh	r1, [r0, #12]
    ee3e:	str	r3, [r0, #100]	; 0x64
    ee40:	strh	r2, [r0, #14]
    ee42:	str	r3, [r0, #24]
    ee44:	mov	r1, r3
    ee46:	movs	r2, #8
    ee48:	adds	r0, #92	; 0x5c
    ee4a:	bl	a898 <memset>
    ee4e:	ldr	r3, [pc, #20]	; (ee64 <std+0x38>)
    ee50:	str	r3, [r4, #36]	; 0x24
    ee52:	ldr	r3, [pc, #20]	; (ee68 <std+0x3c>)
    ee54:	str	r3, [r4, #40]	; 0x28
    ee56:	ldr	r3, [pc, #20]	; (ee6c <std+0x40>)
    ee58:	str	r3, [r4, #44]	; 0x2c
    ee5a:	ldr	r3, [pc, #20]	; (ee70 <std+0x44>)
    ee5c:	str	r4, [r4, #32]
    ee5e:	str	r3, [r4, #48]	; 0x30
    ee60:	pop	{r4, pc}
    ee62:	nop
    ee64:	.word	0x0000f08d
    ee68:	.word	0x0000f0b3
    ee6c:	.word	0x0000f0eb
    ee70:	.word	0x0000f10f

0000ee74 <stdio_exit_handler>:
    ee74:	ldr	r2, [pc, #8]	; (ee80 <stdio_exit_handler+0xc>)
    ee76:	ldr	r1, [pc, #12]	; (ee84 <stdio_exit_handler+0x10>)
    ee78:	ldr	r0, [pc, #12]	; (ee88 <stdio_exit_handler+0x14>)
    ee7a:	b.w	ef50 <_fwalk_sglue>
    ee7e:	nop
    ee80:	.word	0x200021d4
    ee84:	.word	0x00011c25
    ee88:	.word	0x200021e0

0000ee8c <cleanup_stdio>:
    ee8c:	ldr	r1, [r0, #4]
    ee8e:	ldr	r3, [pc, #48]	; (eec0 <cleanup_stdio+0x34>)
    ee90:	cmp	r1, r3
    ee92:	push	{r4, lr}
    ee94:	mov	r4, r0
    ee96:	beq.n	ee9c <cleanup_stdio+0x10>
    ee98:	bl	11c24 <_fflush_r>
    ee9c:	ldr	r1, [r4, #8]
    ee9e:	ldr	r3, [pc, #36]	; (eec4 <cleanup_stdio+0x38>)
    eea0:	cmp	r1, r3
    eea2:	beq.n	eeaa <cleanup_stdio+0x1e>
    eea4:	mov	r0, r4
    eea6:	bl	11c24 <_fflush_r>
    eeaa:	ldr	r1, [r4, #12]
    eeac:	ldr	r3, [pc, #24]	; (eec8 <cleanup_stdio+0x3c>)
    eeae:	cmp	r1, r3
    eeb0:	beq.n	eebc <cleanup_stdio+0x30>
    eeb2:	mov	r0, r4
    eeb4:	ldmia.w	sp!, {r4, lr}
    eeb8:	b.w	11c24 <_fflush_r>
    eebc:	pop	{r4, pc}
    eebe:	nop
    eec0:	.word	0x200212b8
    eec4:	.word	0x20021320
    eec8:	.word	0x20021388

0000eecc <global_stdio_init.part.0>:
    eecc:	push	{r4, lr}
    eece:	ldr	r3, [pc, #44]	; (eefc <global_stdio_init.part.0+0x30>)
    eed0:	ldr	r4, [pc, #44]	; (ef00 <global_stdio_init.part.0+0x34>)
    eed2:	ldr	r2, [pc, #48]	; (ef04 <global_stdio_init.part.0+0x38>)
    eed4:	str	r2, [r3, #0]
    eed6:	mov	r0, r4
    eed8:	movs	r2, #0
    eeda:	movs	r1, #4
    eedc:	bl	ee2c <std>
    eee0:	add.w	r0, r4, #104	; 0x68
    eee4:	movs	r2, #1
    eee6:	movs	r1, #9
    eee8:	bl	ee2c <std>
    eeec:	add.w	r0, r4, #208	; 0xd0
    eef0:	movs	r2, #2
    eef2:	ldmia.w	sp!, {r4, lr}
    eef6:	movs	r1, #18
    eef8:	b.w	ee2c <std>
    eefc:	.word	0x200213f0
    ef00:	.word	0x200212b8
    ef04:	.word	0x0000ee75

0000ef08 <__sfp_lock_acquire>:
    ef08:	ldr	r0, [pc, #4]	; (ef10 <__sfp_lock_acquire+0x8>)
    ef0a:	b.w	f3d0 <__retarget_lock_acquire_recursive>
    ef0e:	nop
    ef10:	.word	0x2002220b

0000ef14 <__sfp_lock_release>:
    ef14:	ldr	r0, [pc, #4]	; (ef1c <__sfp_lock_release+0x8>)
    ef16:	b.w	f3d2 <__retarget_lock_release_recursive>
    ef1a:	nop
    ef1c:	.word	0x2002220b

0000ef20 <__sinit>:
    ef20:	push	{r4, lr}
    ef22:	mov	r4, r0
    ef24:	bl	ef08 <__sfp_lock_acquire>
    ef28:	ldr	r3, [r4, #32]
    ef2a:	cbz	r3, ef34 <__sinit+0x14>
    ef2c:	ldmia.w	sp!, {r4, lr}
    ef30:	b.w	ef14 <__sfp_lock_release>
    ef34:	ldr	r3, [pc, #16]	; (ef48 <__sinit+0x28>)
    ef36:	str	r3, [r4, #32]
    ef38:	ldr	r3, [pc, #16]	; (ef4c <__sinit+0x2c>)
    ef3a:	ldr	r3, [r3, #0]
    ef3c:	cmp	r3, #0
    ef3e:	bne.n	ef2c <__sinit+0xc>
    ef40:	bl	eecc <global_stdio_init.part.0>
    ef44:	b.n	ef2c <__sinit+0xc>
    ef46:	nop
    ef48:	.word	0x0000ee8d
    ef4c:	.word	0x200213f0

0000ef50 <_fwalk_sglue>:
    ef50:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef54:	mov	r7, r0
    ef56:	mov	r8, r1
    ef58:	mov	r4, r2
    ef5a:	movs	r6, #0
    ef5c:	ldrd	r9, r5, [r4, #4]
    ef60:	subs.w	r9, r9, #1
    ef64:	bpl.n	ef72 <_fwalk_sglue+0x22>
    ef66:	ldr	r4, [r4, #0]
    ef68:	cmp	r4, #0
    ef6a:	bne.n	ef5c <_fwalk_sglue+0xc>
    ef6c:	mov	r0, r6
    ef6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef72:	ldrh	r3, [r5, #12]
    ef74:	cmp	r3, #1
    ef76:	bls.n	ef88 <_fwalk_sglue+0x38>
    ef78:	ldrsh.w	r3, [r5, #14]
    ef7c:	adds	r3, #1
    ef7e:	beq.n	ef88 <_fwalk_sglue+0x38>
    ef80:	mov	r1, r5
    ef82:	mov	r0, r7
    ef84:	blx	r8
    ef86:	orrs	r6, r0
    ef88:	adds	r5, #104	; 0x68
    ef8a:	b.n	ef60 <_fwalk_sglue+0x10>

0000ef8c <sniprintf>:
    ef8c:	push	{r2, r3}
    ef8e:	push	{r4, r5, lr}
    ef90:	ldr	r3, [pc, #92]	; (eff0 <sniprintf+0x64>)
    ef92:	subs	r4, r1, #0
    ef94:	ldr	r5, [r3, #0]
    ef96:	sub	sp, #116	; 0x74
    ef98:	bge.n	efac <sniprintf+0x20>
    ef9a:	movs	r3, #139	; 0x8b
    ef9c:	str	r3, [r5, #0]
    ef9e:	mov.w	r0, #4294967295
    efa2:	add	sp, #116	; 0x74
    efa4:	ldmia.w	sp!, {r4, r5, lr}
    efa8:	add	sp, #8
    efaa:	bx	lr
    efac:	mov.w	r3, #520	; 0x208
    efb0:	strh.w	r3, [sp, #20]
    efb4:	ite	ne
    efb6:	addne.w	r3, r4, #4294967295
    efba:	moveq	r3, r4
    efbc:	str	r3, [sp, #16]
    efbe:	str	r3, [sp, #28]
    efc0:	movw	r3, #65535	; 0xffff
    efc4:	str	r0, [sp, #8]
    efc6:	str	r0, [sp, #24]
    efc8:	strh.w	r3, [sp, #22]
    efcc:	ldr	r2, [sp, #128]	; 0x80
    efce:	add	r3, sp, #132	; 0x84
    efd0:	add	r1, sp, #8
    efd2:	mov	r0, r5
    efd4:	str	r3, [sp, #4]
    efd6:	bl	112dc <_svfiprintf_r>
    efda:	adds	r3, r0, #1
    efdc:	itt	lt
    efde:	movlt	r3, #139	; 0x8b
    efe0:	strlt	r3, [r5, #0]
    efe2:	cmp	r4, #0
    efe4:	beq.n	efa2 <sniprintf+0x16>
    efe6:	ldr	r3, [sp, #8]
    efe8:	movs	r2, #0
    efea:	strb	r2, [r3, #0]
    efec:	b.n	efa2 <sniprintf+0x16>
    efee:	nop
    eff0:	.word	0x2000222c

0000eff4 <siprintf>:
    eff4:	push	{r1, r2, r3}
    eff6:	push	{lr}
    eff8:	sub	sp, #112	; 0x70
    effa:	add	r3, sp, #116	; 0x74
    effc:	str	r0, [sp, #8]
    effe:	str	r0, [sp, #24]
    f000:	mvn.w	r1, #2147483648	; 0x80000000
    f004:	ldr	r0, [pc, #36]	; (f02c <siprintf+0x38>)
    f006:	str	r1, [sp, #28]
    f008:	str	r1, [sp, #16]
    f00a:	ldr	r1, [pc, #36]	; (f030 <siprintf+0x3c>)
    f00c:	ldr.w	r2, [r3], #4
    f010:	str	r1, [sp, #20]
    f012:	ldr	r0, [r0, #0]
    f014:	str	r3, [sp, #4]
    f016:	add	r1, sp, #8
    f018:	bl	112dc <_svfiprintf_r>
    f01c:	ldr	r3, [sp, #8]
    f01e:	movs	r2, #0
    f020:	strb	r2, [r3, #0]
    f022:	add	sp, #112	; 0x70
    f024:	ldr.w	lr, [sp], #4
    f028:	add	sp, #12
    f02a:	bx	lr
    f02c:	.word	0x2000222c
    f030:	.word	0xffff0208

0000f034 <siscanf>:
    f034:	push	{r1, r2, r3}
    f036:	push	{r4, lr}
    f038:	sub	sp, #124	; 0x7c
    f03a:	add	r4, sp, #132	; 0x84
    f03c:	mov.w	r1, #516	; 0x204
    f040:	ldr.w	r2, [r4], #4
    f044:	str	r2, [sp, #4]
    f046:	strh.w	r1, [sp, #28]
    f04a:	str	r0, [sp, #16]
    f04c:	str	r0, [sp, #32]
    f04e:	bl	f490 <strlen>
    f052:	ldr	r3, [pc, #48]	; (f084 <siscanf+0x50>)
    f054:	str	r0, [sp, #20]
    f056:	str	r0, [sp, #36]	; 0x24
    f058:	str	r3, [sp, #52]	; 0x34
    f05a:	ldr	r0, [pc, #44]	; (f088 <siscanf+0x54>)
    f05c:	ldr	r2, [sp, #4]
    f05e:	ldr	r0, [r0, #0]
    f060:	str	r4, [sp, #12]
    f062:	movs	r3, #0
    f064:	str	r3, [sp, #68]	; 0x44
    f066:	str	r3, [sp, #88]	; 0x58
    f068:	movw	r3, #65535	; 0xffff
    f06c:	strh.w	r3, [sp, #30]
    f070:	add	r1, sp, #16
    f072:	mov	r3, r4
    f074:	bl	1158c <__ssvfiscanf_r>
    f078:	add	sp, #124	; 0x7c
    f07a:	ldmia.w	sp!, {r4, lr}
    f07e:	add	sp, #12
    f080:	bx	lr
    f082:	nop
    f084:	.word	0x0000f0af
    f088:	.word	0x2000222c

0000f08c <__sread>:
    f08c:	push	{r4, lr}
    f08e:	mov	r4, r1
    f090:	ldrsh.w	r1, [r1, #14]
    f094:	bl	f314 <_read_r>
    f098:	cmp	r0, #0
    f09a:	itete	ge
    f09c:	ldrge	r3, [r4, #84]	; 0x54
    f09e:	ldrhlt	r3, [r4, #12]
    f0a0:	addge	r3, r3, r0
    f0a2:	biclt.w	r3, r3, #4096	; 0x1000
    f0a6:	ite	ge
    f0a8:	strge	r3, [r4, #84]	; 0x54
    f0aa:	strhlt	r3, [r4, #12]
    f0ac:	pop	{r4, pc}

0000f0ae <__seofread>:
    f0ae:	movs	r0, #0
    f0b0:	bx	lr

0000f0b2 <__swrite>:
    f0b2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0b6:	mov	r7, r3
    f0b8:	ldrh	r3, [r1, #12]
    f0ba:	lsls	r3, r3, #23
    f0bc:	mov	r5, r0
    f0be:	mov	r4, r1
    f0c0:	mov	r6, r2
    f0c2:	bpl.n	f0d0 <__swrite+0x1e>
    f0c4:	ldrsh.w	r1, [r1, #14]
    f0c8:	movs	r3, #2
    f0ca:	movs	r2, #0
    f0cc:	bl	f2f0 <_lseek_r>
    f0d0:	ldrh	r3, [r4, #12]
    f0d2:	ldrsh.w	r1, [r4, #14]
    f0d6:	bic.w	r3, r3, #4096	; 0x1000
    f0da:	strh	r3, [r4, #12]
    f0dc:	mov	r2, r6
    f0de:	mov	r3, r7
    f0e0:	mov	r0, r5
    f0e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f0e6:	b.w	f358 <_write_r>

0000f0ea <__sseek>:
    f0ea:	push	{r4, lr}
    f0ec:	mov	r4, r1
    f0ee:	ldrsh.w	r1, [r1, #14]
    f0f2:	bl	f2f0 <_lseek_r>
    f0f6:	adds	r3, r0, #1
    f0f8:	ldrh	r3, [r4, #12]
    f0fa:	itete	ne
    f0fc:	strne	r0, [r4, #84]	; 0x54
    f0fe:	biceq.w	r3, r3, #4096	; 0x1000
    f102:	orrne.w	r3, r3, #4096	; 0x1000
    f106:	strheq	r3, [r4, #12]
    f108:	it	ne
    f10a:	strhne	r3, [r4, #12]
    f10c:	pop	{r4, pc}

0000f10e <__sclose>:
    f10e:	ldrsh.w	r1, [r1, #14]
    f112:	b.w	f2d0 <_close_r>

0000f116 <_vdiprintf_r>:
    f116:	push	{r4, r5, r6, r7, lr}
    f118:	sub.w	sp, sp, #532	; 0x214
    f11c:	mov	r6, r1
    f11e:	add	r7, sp, #16
    f120:	mov.w	r1, #512	; 0x200
    f124:	str	r1, [sp, #12]
    f126:	str	r3, [sp, #0]
    f128:	mov	r1, r7
    f12a:	mov	r3, r2
    f12c:	add	r2, sp, #12
    f12e:	mov	r5, r0
    f130:	bl	f174 <_vasniprintf_r>
    f134:	mov	r4, r0
    f136:	cbz	r0, f15a <_vdiprintf_r+0x44>
    f138:	mov	r2, r0
    f13a:	ldr	r3, [sp, #12]
    f13c:	mov	r1, r6
    f13e:	mov	r0, r5
    f140:	bl	f358 <_write_r>
    f144:	cmp	r4, r7
    f146:	str	r0, [sp, #12]
    f148:	beq.n	f152 <_vdiprintf_r+0x3c>
    f14a:	mov	r1, r4
    f14c:	mov	r0, r5
    f14e:	bl	100a8 <_free_r>
    f152:	ldr	r0, [sp, #12]
    f154:	add.w	sp, sp, #532	; 0x214
    f158:	pop	{r4, r5, r6, r7, pc}
    f15a:	mov.w	r0, #4294967295
    f15e:	b.n	f154 <_vdiprintf_r+0x3e>

0000f160 <vdiprintf>:
    f160:	mov	r3, r2
    f162:	mov	r2, r1
    f164:	mov	r1, r0
    f166:	ldr	r0, [pc, #8]	; (f170 <vdiprintf+0x10>)
    f168:	ldr	r0, [r0, #0]
    f16a:	b.w	f116 <_vdiprintf_r>
    f16e:	nop
    f170:	.word	0x2000222c

0000f174 <_vasniprintf_r>:
    f174:	push	{r4, r5, lr}
    f176:	mov	r5, r2
    f178:	sub	sp, #108	; 0x6c
    f17a:	ldr	r4, [r5, #0]
    f17c:	mov	r2, r3
    f17e:	cbz	r1, f1a4 <_vasniprintf_r+0x30>
    f180:	cmp	r4, #0
    f182:	itee	ne
    f184:	movne.w	r3, #1544	; 0x608
    f188:	moveq.w	r3, #648	; 0x288
    f18c:	moveq	r1, #0
    f18e:	cmp	r4, #0
    f190:	strh.w	r3, [sp, #12]
    f194:	str	r1, [sp, #0]
    f196:	str	r1, [sp, #16]
    f198:	bge.n	f1ac <_vasniprintf_r+0x38>
    f19a:	movs	r3, #139	; 0x8b
    f19c:	str	r3, [r0, #0]
    f19e:	movs	r0, #0
    f1a0:	add	sp, #108	; 0x6c
    f1a2:	pop	{r4, r5, pc}
    f1a4:	mov.w	r3, #648	; 0x288
    f1a8:	mov	r4, r1
    f1aa:	b.n	f18e <_vasniprintf_r+0x1a>
    f1ac:	movw	r3, #65535	; 0xffff
    f1b0:	strh.w	r3, [sp, #14]
    f1b4:	mov	r1, sp
    f1b6:	ldr	r3, [sp, #120]	; 0x78
    f1b8:	str	r4, [sp, #8]
    f1ba:	str	r4, [sp, #20]
    f1bc:	bl	112dc <_svfiprintf_r>
    f1c0:	subs	r3, r0, #0
    f1c2:	itt	ge
    f1c4:	strge	r3, [r5, #0]
    f1c6:	ldrge	r3, [sp, #0]
    f1c8:	mov.w	r0, #0
    f1cc:	itt	ge
    f1ce:	strbge	r0, [r3, #0]
    f1d0:	ldrge	r0, [sp, #16]
    f1d2:	b.n	f1a0 <_vasniprintf_r+0x2c>

0000f1d4 <memcmp>:
    f1d4:	push	{r4, lr}
    f1d6:	subs	r1, #1
    f1d8:	add	r2, r0
    f1da:	cmp	r0, r2
    f1dc:	bne.n	f1e2 <memcmp+0xe>
    f1de:	movs	r0, #0
    f1e0:	b.n	f1ee <memcmp+0x1a>
    f1e2:	ldrb	r3, [r0, #0]
    f1e4:	ldrb.w	r4, [r1, #1]!
    f1e8:	cmp	r3, r4
    f1ea:	beq.n	f1f0 <memcmp+0x1c>
    f1ec:	subs	r0, r3, r4
    f1ee:	pop	{r4, pc}
    f1f0:	adds	r0, #1
    f1f2:	b.n	f1da <memcmp+0x6>

0000f1f4 <memmove>:
    f1f4:	cmp	r0, r1
    f1f6:	push	{r4, lr}
    f1f8:	add.w	r4, r1, r2
    f1fc:	bls.n	f204 <memmove+0x10>
    f1fe:	cmp	r4, r0
    f200:	mov	r3, r4
    f202:	bhi.n	f214 <memmove+0x20>
    f204:	subs	r3, r0, #1
    f206:	cmp	r1, r4
    f208:	beq.n	f21c <memmove+0x28>
    f20a:	ldrb.w	r2, [r1], #1
    f20e:	strb.w	r2, [r3, #1]!
    f212:	b.n	f206 <memmove+0x12>
    f214:	add	r2, r0
    f216:	mov	r1, r0
    f218:	cmp	r2, r1
    f21a:	bne.n	f21e <memmove+0x2a>
    f21c:	pop	{r4, pc}
    f21e:	ldrb.w	r4, [r3, #-1]!
    f222:	strb.w	r4, [r2, #-1]!
    f226:	b.n	f218 <memmove+0x24>

0000f228 <strlcat>:
    f228:	push	{r4, r5, r6, lr}
    f22a:	mov	r4, r0
    f22c:	adds	r6, r2, r0
    f22e:	cmp	r4, r6
    f230:	mov	r3, r4
    f232:	bne.n	f246 <strlcat+0x1e>
    f234:	subs	r4, r3, r0
    f236:	subs	r2, r2, r4
    f238:	subs	r6, r2, #1
    f23a:	cbnz	r2, f250 <strlcat+0x28>
    f23c:	mov	r0, r1
    f23e:	bl	f490 <strlen>
    f242:	add	r0, r4
    f244:	pop	{r4, r5, r6, pc}
    f246:	ldrb	r5, [r3, #0]
    f248:	adds	r4, #1
    f24a:	cmp	r5, #0
    f24c:	bne.n	f22e <strlcat+0x6>
    f24e:	b.n	f234 <strlcat+0xc>
    f250:	mov	r5, r1
    f252:	mov	r2, r5
    f254:	ldrb.w	r0, [r5], #1
    f258:	cbnz	r0, f262 <strlcat+0x3a>
    f25a:	subs	r2, r2, r1
    f25c:	strb	r0, [r3, #0]
    f25e:	adds	r0, r2, r4
    f260:	b.n	f244 <strlcat+0x1c>
    f262:	cmp	r6, #0
    f264:	beq.n	f252 <strlcat+0x2a>
    f266:	strb.w	r0, [r3], #1
    f26a:	subs	r6, #1
    f26c:	b.n	f252 <strlcat+0x2a>

0000f26e <strlcpy>:
    f26e:	push	{r4, lr}
    f270:	cbz	r2, f298 <strlcpy+0x2a>
    f272:	add	r2, r1
    f274:	mov	r3, r1
    f276:	mov	r4, r3
    f278:	adds	r3, #1
    f27a:	cmp	r3, r2
    f27c:	bne.n	f286 <strlcpy+0x18>
    f27e:	movs	r3, #0
    f280:	strb	r3, [r0, #0]
    f282:	mov	r3, r4
    f284:	b.n	f29a <strlcpy+0x2c>
    f286:	ldrb.w	r4, [r3, #-1]
    f28a:	strb.w	r4, [r0], #1
    f28e:	cmp	r4, #0
    f290:	bne.n	f276 <strlcpy+0x8>
    f292:	subs	r1, r3, r1
    f294:	subs	r0, r1, #1
    f296:	pop	{r4, pc}
    f298:	mov	r3, r1
    f29a:	ldrb.w	r2, [r3], #1
    f29e:	cmp	r2, #0
    f2a0:	bne.n	f29a <strlcpy+0x2c>
    f2a2:	b.n	f292 <strlcpy+0x24>

0000f2a4 <strncmp>:
    f2a4:	push	{r4, lr}
    f2a6:	cbz	r2, f2c4 <strncmp+0x20>
    f2a8:	subs	r1, #1
    f2aa:	adds	r4, r0, r2
    f2ac:	ldrb.w	r2, [r0], #1
    f2b0:	ldrb.w	r3, [r1, #1]!
    f2b4:	cmp	r2, r3
    f2b6:	bne.n	f2c0 <strncmp+0x1c>
    f2b8:	cmp	r0, r4
    f2ba:	beq.n	f2c0 <strncmp+0x1c>
    f2bc:	cmp	r2, #0
    f2be:	bne.n	f2ac <strncmp+0x8>
    f2c0:	subs	r0, r2, r3
    f2c2:	pop	{r4, pc}
    f2c4:	mov	r0, r2
    f2c6:	b.n	f2c2 <strncmp+0x1e>

0000f2c8 <_localeconv_r>:
    f2c8:	ldr	r0, [pc, #0]	; (f2cc <_localeconv_r+0x4>)
    f2ca:	bx	lr
    f2cc:	.word	0x20002158

0000f2d0 <_close_r>:
    f2d0:	push	{r3, r4, r5, lr}
    f2d2:	ldr	r5, [pc, #24]	; (f2ec <_close_r+0x1c>)
    f2d4:	movs	r3, #0
    f2d6:	mov	r4, r0
    f2d8:	mov	r0, r1
    f2da:	str	r3, [r5, #0]
    f2dc:	bl	c000 <_close>
    f2e0:	adds	r3, r0, #1
    f2e2:	bne.n	f2ea <_close_r+0x1a>
    f2e4:	ldr	r3, [r5, #0]
    f2e6:	cbz	r3, f2ea <_close_r+0x1a>
    f2e8:	str	r3, [r4, #0]
    f2ea:	pop	{r3, r4, r5, pc}
    f2ec:	.word	0x20021400

0000f2f0 <_lseek_r>:
    f2f0:	push	{r3, r4, r5, lr}
    f2f2:	ldr	r5, [pc, #28]	; (f310 <_lseek_r+0x20>)
    f2f4:	mov	r4, r0
    f2f6:	mov	r0, r1
    f2f8:	mov	r1, r2
    f2fa:	movs	r2, #0
    f2fc:	str	r2, [r5, #0]
    f2fe:	mov	r2, r3
    f300:	bl	c014 <_lseek>
    f304:	adds	r3, r0, #1
    f306:	bne.n	f30e <_lseek_r+0x1e>
    f308:	ldr	r3, [r5, #0]
    f30a:	cbz	r3, f30e <_lseek_r+0x1e>
    f30c:	str	r3, [r4, #0]
    f30e:	pop	{r3, r4, r5, pc}
    f310:	.word	0x20021400

0000f314 <_read_r>:
    f314:	push	{r3, r4, r5, lr}
    f316:	ldr	r5, [pc, #28]	; (f334 <_read_r+0x20>)
    f318:	mov	r4, r0
    f31a:	mov	r0, r1
    f31c:	mov	r1, r2
    f31e:	movs	r2, #0
    f320:	str	r2, [r5, #0]
    f322:	mov	r2, r3
    f324:	bl	bffc <_read>
    f328:	adds	r3, r0, #1
    f32a:	bne.n	f332 <_read_r+0x1e>
    f32c:	ldr	r3, [r5, #0]
    f32e:	cbz	r3, f332 <_read_r+0x1e>
    f330:	str	r3, [r4, #0]
    f332:	pop	{r3, r4, r5, pc}
    f334:	.word	0x20021400

0000f338 <_sbrk_r>:
    f338:	push	{r3, r4, r5, lr}
    f33a:	ldr	r5, [pc, #24]	; (f354 <_sbrk_r+0x1c>)
    f33c:	movs	r3, #0
    f33e:	mov	r4, r0
    f340:	mov	r0, r1
    f342:	str	r3, [r5, #0]
    f344:	bl	bfd0 <_sbrk>
    f348:	adds	r3, r0, #1
    f34a:	bne.n	f352 <_sbrk_r+0x1a>
    f34c:	ldr	r3, [r5, #0]
    f34e:	cbz	r3, f352 <_sbrk_r+0x1a>
    f350:	str	r3, [r4, #0]
    f352:	pop	{r3, r4, r5, pc}
    f354:	.word	0x20021400

0000f358 <_write_r>:
    f358:	push	{r3, r4, r5, lr}
    f35a:	ldr	r5, [pc, #28]	; (f378 <_write_r+0x20>)
    f35c:	mov	r4, r0
    f35e:	mov	r0, r1
    f360:	mov	r1, r2
    f362:	movs	r2, #0
    f364:	str	r2, [r5, #0]
    f366:	mov	r2, r3
    f368:	bl	cdfc <_write>
    f36c:	adds	r3, r0, #1
    f36e:	bne.n	f376 <_write_r+0x1e>
    f370:	ldr	r3, [r5, #0]
    f372:	cbz	r3, f376 <_write_r+0x1e>
    f374:	str	r3, [r4, #0]
    f376:	pop	{r3, r4, r5, pc}
    f378:	.word	0x20021400

0000f37c <__errno>:
    f37c:	ldr	r3, [pc, #4]	; (f384 <__errno+0x8>)
    f37e:	ldr	r0, [r3, #0]
    f380:	bx	lr
    f382:	nop
    f384:	.word	0x2000222c

0000f388 <__libc_init_array>:
    f388:	push	{r4, r5, r6, lr}
    f38a:	ldr	r5, [pc, #52]	; (f3c0 <__libc_init_array+0x38>)
    f38c:	ldr	r4, [pc, #52]	; (f3c4 <__libc_init_array+0x3c>)
    f38e:	subs	r4, r4, r5
    f390:	asrs	r4, r4, #2
    f392:	movs	r6, #0
    f394:	cmp	r6, r4
    f396:	bne.n	f3ac <__libc_init_array+0x24>
    f398:	ldr	r5, [pc, #44]	; (f3c8 <__libc_init_array+0x40>)
    f39a:	ldr	r4, [pc, #48]	; (f3cc <__libc_init_array+0x44>)
    f39c:	bl	127a0 <___init_veneer>
    f3a0:	subs	r4, r4, r5
    f3a2:	asrs	r4, r4, #2
    f3a4:	movs	r6, #0
    f3a6:	cmp	r6, r4
    f3a8:	bne.n	f3b6 <__libc_init_array+0x2e>
    f3aa:	pop	{r4, r5, r6, pc}
    f3ac:	ldr.w	r3, [r5], #4
    f3b0:	blx	r3
    f3b2:	adds	r6, #1
    f3b4:	b.n	f394 <__libc_init_array+0xc>
    f3b6:	ldr.w	r3, [r5], #4
    f3ba:	blx	r3
    f3bc:	adds	r6, #1
    f3be:	b.n	f3a6 <__libc_init_array+0x1e>
    f3c0:	.word	0x60002530
    f3c4:	.word	0x60002530
    f3c8:	.word	0x60002530
    f3cc:	.word	0x60002540

0000f3d0 <__retarget_lock_acquire_recursive>:
    f3d0:	bx	lr

0000f3d2 <__retarget_lock_release_recursive>:
    f3d2:	bx	lr

0000f3d4 <strcpy>:
    f3d4:	mov	r3, r0
    f3d6:	ldrb.w	r2, [r1], #1
    f3da:	strb.w	r2, [r3], #1
    f3de:	cmp	r2, #0
    f3e0:	bne.n	f3d6 <strcpy+0x2>
    f3e2:	bx	lr
	...

0000f3f0 <memchr>:
    f3f0:	and.w	r1, r1, #255	; 0xff
    f3f4:	cmp	r2, #16
    f3f6:	blt.n	f450 <memchr+0x60>
    f3f8:	tst.w	r0, #7
    f3fc:	beq.n	f410 <memchr+0x20>
    f3fe:	ldrb.w	r3, [r0], #1
    f402:	subs	r2, #1
    f404:	cmp	r3, r1
    f406:	beq.n	f464 <memchr+0x74>
    f408:	tst.w	r0, #7
    f40c:	cbz	r2, f460 <memchr+0x70>
    f40e:	bne.n	f3fe <memchr+0xe>
    f410:	push	{r4, r5, r6, r7}
    f412:	orr.w	r1, r1, r1, lsl #8
    f416:	orr.w	r1, r1, r1, lsl #16
    f41a:	bic.w	r4, r2, #7
    f41e:	mvns.w	r7, #0
    f422:	movs	r3, #0
    f424:	ldrd	r5, r6, [r0], #8
    f428:	subs	r4, #8
    f42a:	eor.w	r5, r5, r1
    f42e:	eor.w	r6, r6, r1
    f432:	uadd8	r5, r5, r7
    f436:	sel	r5, r3, r7
    f43a:	uadd8	r6, r6, r7
    f43e:	sel	r6, r5, r7
    f442:	cbnz	r6, f468 <memchr+0x78>
    f444:	bne.n	f424 <memchr+0x34>
    f446:	pop	{r4, r5, r6, r7}
    f448:	and.w	r1, r1, #255	; 0xff
    f44c:	and.w	r2, r2, #7
    f450:	cbz	r2, f460 <memchr+0x70>
    f452:	ldrb.w	r3, [r0], #1
    f456:	subs	r2, #1
    f458:	eor.w	r3, r3, r1
    f45c:	cbz	r3, f464 <memchr+0x74>
    f45e:	bne.n	f452 <memchr+0x62>
    f460:	movs	r0, #0
    f462:	bx	lr
    f464:	subs	r0, #1
    f466:	bx	lr
    f468:	cmp	r5, #0
    f46a:	itte	eq
    f46c:	moveq	r5, r6
    f46e:	subeq	r0, #3
    f470:	subne	r0, #7
    f472:	tst.w	r5, #1
    f476:	bne.n	f488 <memchr+0x98>
    f478:	adds	r0, #1
    f47a:	tst.w	r5, #256	; 0x100
    f47e:	ittt	eq
    f480:	addeq	r0, #1
    f482:	tsteq.w	r5, #98304	; 0x18000
    f486:	addeq	r0, #1
    f488:	pop	{r4, r5, r6, r7}
    f48a:	subs	r0, #1
    f48c:	bx	lr
    f48e:	nop

0000f490 <strlen>:
    f490:	mov	r3, r0
    f492:	ldrb.w	r2, [r3], #1
    f496:	cmp	r2, #0
    f498:	bne.n	f492 <strlen+0x2>
    f49a:	subs	r0, r3, r0
    f49c:	subs	r0, #1
    f49e:	bx	lr

0000f4a0 <nan>:
    f4a0:	vldr	d0, [pc, #4]	; f4a8 <nan+0x8>
    f4a4:	bx	lr
    f4a6:	nop
    f4a8:	.word	0x00000000
    f4ac:	.word	0x7ff80000

0000f4b0 <nanf>:
    f4b0:	vldr	s0, [pc, #4]	; f4b8 <nanf+0x8>
    f4b4:	bx	lr
    f4b6:	nop
    f4b8:	.word	0x7fc00000

0000f4bc <quorem>:
    f4bc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4c0:	ldr	r3, [r0, #16]
    f4c2:	ldr	r4, [r1, #16]
    f4c4:	cmp	r3, r4
    f4c6:	mov	r7, r0
    f4c8:	blt.n	f5c8 <quorem+0x10c>
    f4ca:	subs	r4, #1
    f4cc:	add.w	r8, r1, #20
    f4d0:	add.w	r5, r0, #20
    f4d4:	add.w	r3, r5, r4, lsl #2
    f4d8:	str	r3, [sp, #4]
    f4da:	ldr.w	r3, [r8, r4, lsl #2]
    f4de:	ldr.w	r2, [r5, r4, lsl #2]
    f4e2:	adds	r3, #1
    f4e4:	cmp	r2, r3
    f4e6:	mov.w	fp, r4, lsl #2
    f4ea:	add.w	r9, r8, r4, lsl #2
    f4ee:	udiv	r6, r2, r3
    f4f2:	bcc.n	f558 <quorem+0x9c>
    f4f4:	mov.w	lr, #0
    f4f8:	mov	r0, r8
    f4fa:	mov	ip, r5
    f4fc:	mov	sl, lr
    f4fe:	ldr.w	r2, [r0], #4
    f502:	uxth	r3, r2
    f504:	mla	r3, r6, r3, lr
    f508:	mov.w	lr, r2, lsr #16
    f50c:	lsrs	r2, r3, #16
    f50e:	uxth	r3, r3
    f510:	sub.w	r3, sl, r3
    f514:	ldr.w	sl, [ip]
    f518:	uxtah	r3, r3, sl
    f51c:	mla	r2, r6, lr, r2
    f520:	str	r3, [sp, #0]
    f522:	ldr	r3, [sp, #0]
    f524:	mov.w	lr, r2, lsr #16
    f528:	uxth	r2, r2
    f52a:	rsb	r2, r2, sl, lsr #16
    f52e:	add.w	r2, r2, r3, asr #16
    f532:	ldrh.w	r3, [sp]
    f536:	cmp	r9, r0
    f538:	orr.w	r3, r3, r2, lsl #16
    f53c:	str.w	r3, [ip], #4
    f540:	mov.w	sl, r2, asr #16
    f544:	bcs.n	f4fe <quorem+0x42>
    f546:	ldr.w	r3, [r5, fp]
    f54a:	cbnz	r3, f558 <quorem+0x9c>
    f54c:	ldr	r3, [sp, #4]
    f54e:	subs	r3, #4
    f550:	cmp	r5, r3
    f552:	mov	r2, r3
    f554:	bcc.n	f5b0 <quorem+0xf4>
    f556:	str	r4, [r7, #16]
    f558:	mov	r0, r7
    f55a:	bl	10da0 <__mcmp>
    f55e:	cmp	r0, #0
    f560:	blt.n	f5a8 <quorem+0xec>
    f562:	adds	r6, #1
    f564:	mov	r1, r5
    f566:	movs	r0, #0
    f568:	ldr.w	r2, [r8], #4
    f56c:	ldr.w	ip, [r1]
    f570:	uxth	r3, r2
    f572:	subs	r3, r0, r3
    f574:	lsrs	r2, r2, #16
    f576:	uxtah	r3, r3, ip
    f57a:	rsb	r2, r2, ip, lsr #16
    f57e:	add.w	r2, r2, r3, asr #16
    f582:	uxth	r3, r3
    f584:	orr.w	r3, r3, r2, lsl #16
    f588:	cmp	r9, r8
    f58a:	str.w	r3, [r1], #4
    f58e:	mov.w	r0, r2, asr #16
    f592:	bcs.n	f568 <quorem+0xac>
    f594:	ldr.w	r2, [r5, r4, lsl #2]
    f598:	add.w	r3, r5, r4, lsl #2
    f59c:	cbnz	r2, f5a8 <quorem+0xec>
    f59e:	subs	r3, #4
    f5a0:	cmp	r5, r3
    f5a2:	mov	r2, r3
    f5a4:	bcc.n	f5bc <quorem+0x100>
    f5a6:	str	r4, [r7, #16]
    f5a8:	mov	r0, r6
    f5aa:	add	sp, #12
    f5ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f5b0:	ldr	r2, [r2, #0]
    f5b2:	subs	r3, #4
    f5b4:	cmp	r2, #0
    f5b6:	bne.n	f556 <quorem+0x9a>
    f5b8:	subs	r4, #1
    f5ba:	b.n	f550 <quorem+0x94>
    f5bc:	ldr	r2, [r2, #0]
    f5be:	subs	r3, #4
    f5c0:	cmp	r2, #0
    f5c2:	bne.n	f5a6 <quorem+0xea>
    f5c4:	subs	r4, #1
    f5c6:	b.n	f5a0 <quorem+0xe4>
    f5c8:	movs	r0, #0
    f5ca:	b.n	f5aa <quorem+0xee>
    f5cc:	movs	r0, r0
	...

0000f5d0 <_dtoa_r>:
    f5d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f5d4:	vpush	{d8}
    f5d8:	ldr	r5, [r0, #28]
    f5da:	sub	sp, #68	; 0x44
    f5dc:	vstr	d0, [sp, #8]
    f5e0:	vmov	r8, r9, d0
    f5e4:	ldr	r4, [sp, #112]	; 0x70
    f5e6:	str	r1, [sp, #24]
    f5e8:	mov	r6, r0
    f5ea:	str	r2, [sp, #32]
    f5ec:	str	r3, [sp, #48]	; 0x30
    f5ee:	cbnz	r5, f60e <_dtoa_r+0x3e>
    f5f0:	movs	r0, #16
    f5f2:	bl	d310 <malloc>
    f5f6:	mov	r2, r0
    f5f8:	str	r0, [r6, #28]
    f5fa:	cbnz	r0, f606 <_dtoa_r+0x36>
    f5fc:	ldr	r3, [pc, #664]	; (f898 <_dtoa_r+0x2c8>)
    f5fe:	movs	r1, #239	; 0xef
    f600:	ldr	r0, [pc, #664]	; (f89c <_dtoa_r+0x2cc>)
    f602:	bl	11d5c <__assert_func>
    f606:	strd	r5, r5, [r0, #4]
    f60a:	str	r5, [r0, #0]
    f60c:	str	r5, [r0, #12]
    f60e:	ldr	r3, [r6, #28]
    f610:	ldr	r1, [r3, #0]
    f612:	cbz	r1, f62a <_dtoa_r+0x5a>
    f614:	ldr	r2, [r3, #4]
    f616:	str	r2, [r1, #4]
    f618:	movs	r3, #1
    f61a:	lsls	r3, r2
    f61c:	str	r3, [r1, #8]
    f61e:	mov	r0, r6
    f620:	bl	10894 <_Bfree>
    f624:	ldr	r3, [r6, #28]
    f626:	movs	r2, #0
    f628:	str	r2, [r3, #0]
    f62a:	subs.w	r3, r9, #0
    f62e:	ittet	lt
    f630:	biclt.w	r3, r3, #2147483648	; 0x80000000
    f634:	strlt	r3, [sp, #12]
    f636:	movge	r3, #0
    f638:	movlt	r2, #1
    f63a:	ite	ge
    f63c:	strge	r3, [r4, #0]
    f63e:	strlt	r2, [r4, #0]
    f640:	ldr	r3, [pc, #604]	; (f8a0 <_dtoa_r+0x2d0>)
    f642:	ldr	r4, [sp, #12]
    f644:	bics	r3, r4
    f646:	bne.n	f682 <_dtoa_r+0xb2>
    f648:	ldr	r2, [sp, #48]	; 0x30
    f64a:	movw	r3, #9999	; 0x270f
    f64e:	str	r3, [r2, #0]
    f650:	ubfx	r3, r4, #0, #20
    f654:	orrs.w	r3, r3, r8
    f658:	beq.w	10052 <_dtoa_r+0xa82>
    f65c:	ldr	r3, [sp, #116]	; 0x74
    f65e:	cbnz	r3, f67a <_dtoa_r+0xaa>
    f660:	ldr	r3, [pc, #576]	; (f8a4 <_dtoa_r+0x2d4>)
    f662:	b.n	f6a6 <_dtoa_r+0xd6>
    f664:	ldr	r3, [pc, #576]	; (f8a8 <_dtoa_r+0x2d8>)
    f666:	str	r3, [sp, #4]
    f668:	adds	r3, #8
    f66a:	ldr	r2, [sp, #116]	; 0x74
    f66c:	str	r3, [r2, #0]
    f66e:	ldr	r0, [sp, #4]
    f670:	add	sp, #68	; 0x44
    f672:	vpop	{d8}
    f676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f67a:	ldr	r3, [pc, #552]	; (f8a4 <_dtoa_r+0x2d4>)
    f67c:	str	r3, [sp, #4]
    f67e:	adds	r3, #3
    f680:	b.n	f66a <_dtoa_r+0x9a>
    f682:	vldr	d8, [sp, #8]
    f686:	vcmp.f64	d8, #0.0
    f68a:	vmrs	APSR_nzcv, fpscr
    f68e:	bne.n	f6aa <_dtoa_r+0xda>
    f690:	ldr	r2, [sp, #48]	; 0x30
    f692:	movs	r3, #1
    f694:	str	r3, [r2, #0]
    f696:	ldr	r3, [sp, #116]	; 0x74
    f698:	cmp	r3, #0
    f69a:	beq.w	1004c <_dtoa_r+0xa7c>
    f69e:	ldr	r3, [pc, #524]	; (f8ac <_dtoa_r+0x2dc>)
    f6a0:	ldr	r2, [sp, #116]	; 0x74
    f6a2:	str	r3, [r2, #0]
    f6a4:	subs	r3, #1
    f6a6:	str	r3, [sp, #4]
    f6a8:	b.n	f66e <_dtoa_r+0x9e>
    f6aa:	add	r2, sp, #56	; 0x38
    f6ac:	add	r1, sp, #60	; 0x3c
    f6ae:	mov	r0, r6
    f6b0:	vmov.f64	d0, d8
    f6b4:	bl	10fcc <__d2b>
    f6b8:	ubfx	r3, r4, #20, #11
    f6bc:	ldr	r2, [sp, #56]	; 0x38
    f6be:	mov	r5, r0
    f6c0:	cmp	r3, #0
    f6c2:	beq.n	f752 <_dtoa_r+0x182>
    f6c4:	vmov.f64	d7, d8
    f6c8:	vmov	r1, s17
    f6cc:	ubfx	r1, r1, #0, #20
    f6d0:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    f6d4:	orr.w	r1, r1, #3145728	; 0x300000
    f6d8:	subw	r3, r3, #1023	; 0x3ff
    f6dc:	movs	r0, #0
    f6de:	vmov	s15, r1
    f6e2:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f6e6:	vldr	d5, [pc, #408]	; f880 <_dtoa_r+0x2b0>
    f6ea:	vsub.f64	d7, d7, d6
    f6ee:	vldr	d6, [pc, #408]	; f888 <_dtoa_r+0x2b8>
    f6f2:	vfma.f64	d6, d7, d5
    f6f6:	vldr	d5, [pc, #408]	; f890 <_dtoa_r+0x2c0>
    f6fa:	vmov	s15, r3
    f6fe:	vcvt.f64.s32	d4, s15
    f702:	vmov.f64	d7, d6
    f706:	vfma.f64	d7, d4, d5
    f70a:	vcvt.s32.f64	s13, d7
    f70e:	vcmpe.f64	d7, #0.0
    f712:	vmrs	APSR_nzcv, fpscr
    f716:	vmov	fp, s13
    f71a:	str	r0, [sp, #36]	; 0x24
    f71c:	bpl.n	f730 <_dtoa_r+0x160>
    f71e:	vcvt.f64.s32	d6, s13
    f722:	vcmp.f64	d6, d7
    f726:	vmrs	APSR_nzcv, fpscr
    f72a:	it	ne
    f72c:	addne.w	fp, fp, #4294967295
    f730:	cmp.w	fp, #22
    f734:	bhi.n	f78e <_dtoa_r+0x1be>
    f736:	ldr	r1, [pc, #376]	; (f8b0 <_dtoa_r+0x2e0>)
    f738:	add.w	r1, r1, fp, lsl #3
    f73c:	vldr	d7, [r1]
    f740:	vcmpe.f64	d8, d7
    f744:	vmrs	APSR_nzcv, fpscr
    f748:	bpl.n	f74e <_dtoa_r+0x17e>
    f74a:	add.w	fp, fp, #4294967295
    f74e:	movs	r1, #0
    f750:	b.n	f790 <_dtoa_r+0x1c0>
    f752:	ldr	r3, [sp, #60]	; 0x3c
    f754:	add	r3, r2
    f756:	addw	r1, r3, #1074	; 0x432
    f75a:	cmp	r1, #32
    f75c:	itttt	gt
    f75e:	rsbgt	r1, r1, #64	; 0x40
    f762:	lslgt	r4, r1
    f764:	addwgt	r1, r3, #1042	; 0x412
    f768:	lsrgt.w	r1, r8, r1
    f76c:	itet	le
    f76e:	rsble	r1, r1, #32
    f772:	orrgt	r1, r4
    f774:	lslle.w	r1, r8, r1
    f778:	vmov	s15, r1
    f77c:	vcvt.f64.u32	d7, s15
    f780:	subs	r3, #1
    f782:	vmov	r1, s15
    f786:	movs	r0, #1
    f788:	sub.w	r1, r1, #32505856	; 0x1f00000
    f78c:	b.n	f6de <_dtoa_r+0x10e>
    f78e:	movs	r1, #1
    f790:	subs	r2, r2, r3
    f792:	subs	r3, r2, #1
    f794:	str	r3, [sp, #20]
    f796:	ittet	mi
    f798:	rsbmi	r3, r2, #1
    f79c:	strmi	r3, [sp, #16]
    f79e:	movpl	r3, #0
    f7a0:	movmi	r3, #0
    f7a2:	ite	mi
    f7a4:	strmi	r3, [sp, #20]
    f7a6:	strpl	r3, [sp, #16]
    f7a8:	cmp.w	fp, #0
    f7ac:	str	r1, [sp, #44]	; 0x2c
    f7ae:	blt.n	f7e2 <_dtoa_r+0x212>
    f7b0:	ldr	r3, [sp, #20]
    f7b2:	str.w	fp, [sp, #40]	; 0x28
    f7b6:	add	r3, fp
    f7b8:	str	r3, [sp, #20]
    f7ba:	movs	r3, #0
    f7bc:	ldr	r2, [sp, #24]
    f7be:	cmp	r2, #9
    f7c0:	bhi.n	f854 <_dtoa_r+0x284>
    f7c2:	cmp	r2, #5
    f7c4:	itt	gt
    f7c6:	subgt	r2, #4
    f7c8:	strgt	r2, [sp, #24]
    f7ca:	ldr	r2, [sp, #24]
    f7cc:	sub.w	r2, r2, #2
    f7d0:	ite	gt
    f7d2:	movgt	r4, #0
    f7d4:	movle	r4, #1
    f7d6:	cmp	r2, #3
    f7d8:	bhi.n	f86a <_dtoa_r+0x29a>
    f7da:	tbb	[pc, r2]
    f7de:	.short	0x2d0b
    f7e0:	.short	0x392b
    f7e2:	ldr	r3, [sp, #16]
    f7e4:	movs	r2, #0
    f7e6:	sub.w	r3, r3, fp
    f7ea:	str	r3, [sp, #16]
    f7ec:	str	r2, [sp, #40]	; 0x28
    f7ee:	rsb	r3, fp, #0
    f7f2:	b.n	f7bc <_dtoa_r+0x1ec>
    f7f4:	movs	r2, #0
    f7f6:	str	r2, [sp, #28]
    f7f8:	ldr	r2, [sp, #32]
    f7fa:	cmp	r2, #0
    f7fc:	bgt.n	f870 <_dtoa_r+0x2a0>
    f7fe:	mov.w	sl, #1
    f802:	mov	r9, sl
    f804:	mov	r2, sl
    f806:	str.w	sl, [sp, #32]
    f80a:	ldr	r7, [r6, #28]
    f80c:	movs	r1, #0
    f80e:	movs	r0, #4
    f810:	add.w	ip, r0, #20
    f814:	cmp	ip, r2
    f816:	bls.n	f87a <_dtoa_r+0x2aa>
    f818:	str	r1, [r7, #4]
    f81a:	mov	r0, r6
    f81c:	str	r3, [sp, #52]	; 0x34
    f81e:	bl	10814 <_Balloc>
    f822:	ldr	r3, [sp, #52]	; 0x34
    f824:	str	r0, [sp, #4]
    f826:	mov	r2, r0
    f828:	cmp	r0, #0
    f82a:	bne.n	f8b8 <_dtoa_r+0x2e8>
    f82c:	ldr	r3, [pc, #132]	; (f8b4 <_dtoa_r+0x2e4>)
    f82e:	movw	r1, #431	; 0x1af
    f832:	b.n	f600 <_dtoa_r+0x30>
    f834:	movs	r2, #1
    f836:	b.n	f7f6 <_dtoa_r+0x226>
    f838:	movs	r2, #0
    f83a:	str	r2, [sp, #28]
    f83c:	ldr	r2, [sp, #32]
    f83e:	add.w	sl, fp, r2
    f842:	add.w	r9, sl, #1
    f846:	mov	r2, r9
    f848:	cmp	r2, #1
    f84a:	it	lt
    f84c:	movlt	r2, #1
    f84e:	b.n	f80a <_dtoa_r+0x23a>
    f850:	movs	r2, #1
    f852:	b.n	f83a <_dtoa_r+0x26a>
    f854:	movs	r4, #1
    f856:	movs	r2, #0
    f858:	strd	r2, r4, [sp, #24]
    f85c:	mov.w	sl, #4294967295
    f860:	movs	r1, #0
    f862:	mov	r9, sl
    f864:	movs	r2, #18
    f866:	str	r1, [sp, #32]
    f868:	b.n	f80a <_dtoa_r+0x23a>
    f86a:	movs	r2, #1
    f86c:	str	r2, [sp, #28]
    f86e:	b.n	f85c <_dtoa_r+0x28c>
    f870:	ldr.w	sl, [sp, #32]
    f874:	mov	r9, sl
    f876:	mov	r2, sl
    f878:	b.n	f80a <_dtoa_r+0x23a>
    f87a:	adds	r1, #1
    f87c:	lsls	r0, r0, #1
    f87e:	b.n	f810 <_dtoa_r+0x240>
    f880:	.word	0x636f4361
    f884:	.word	0x3fd287a7
    f888:	.word	0x8b60c8b3
    f88c:	.word	0x3fc68a28
    f890:	.word	0x509f79fb
    f894:	.word	0x3fd34413
    f898:	.word	0x200012aa
    f89c:	.word	0x200012c1
    f8a0:	.word	0x7ff00000
    f8a4:	.word	0x200012a6
    f8a8:	.word	0x2000129d
    f8ac:	.word	0x200010c0
    f8b0:	.word	0x20000328
    f8b4:	.word	0x2000131a
    f8b8:	ldr	r2, [r6, #28]
    f8ba:	ldr	r1, [sp, #4]
    f8bc:	str	r1, [r2, #0]
    f8be:	cmp.w	r9, #14
    f8c2:	bhi.n	f99e <_dtoa_r+0x3ce>
    f8c4:	cmp	r4, #0
    f8c6:	beq.n	f99e <_dtoa_r+0x3ce>
    f8c8:	cmp.w	fp, #0
    f8cc:	ble.w	fa10 <_dtoa_r+0x440>
    f8d0:	ldr	r2, [pc, #772]	; (fbd8 <_dtoa_r+0x608>)
    f8d2:	and.w	r1, fp, #15
    f8d6:	add.w	r2, r2, r1, lsl #3
    f8da:	tst.w	fp, #256	; 0x100
    f8de:	vldr	d7, [r2]
    f8e2:	mov.w	r2, fp, asr #4
    f8e6:	beq.w	f9f8 <_dtoa_r+0x428>
    f8ea:	ldr	r1, [pc, #752]	; (fbdc <_dtoa_r+0x60c>)
    f8ec:	vldr	d6, [r1, #32]
    f8f0:	vdiv.f64	d6, d8, d6
    f8f4:	vstr	d6, [sp, #8]
    f8f8:	and.w	r2, r2, #15
    f8fc:	movs	r1, #3
    f8fe:	ldr	r0, [pc, #732]	; (fbdc <_dtoa_r+0x60c>)
    f900:	cmp	r2, #0
    f902:	bne.n	f9fc <_dtoa_r+0x42c>
    f904:	vldr	d6, [sp, #8]
    f908:	vdiv.f64	d7, d6, d7
    f90c:	vstr	d7, [sp, #8]
    f910:	ldr	r2, [sp, #44]	; 0x2c
    f912:	vldr	d7, [sp, #8]
    f916:	cmp	r2, #0
    f918:	beq.w	fa5c <_dtoa_r+0x48c>
    f91c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    f920:	vcmpe.f64	d7, d6
    f924:	vmrs	APSR_nzcv, fpscr
    f928:	bpl.w	fa5c <_dtoa_r+0x48c>
    f92c:	cmp.w	r9, #0
    f930:	beq.w	fa5c <_dtoa_r+0x48c>
    f934:	cmp.w	sl, #0
    f938:	ble.n	f99a <_dtoa_r+0x3ca>
    f93a:	vmov.f64	d6, #36	; 0x41200000  10.0
    f93e:	vmul.f64	d7, d7, d6
    f942:	vstr	d7, [sp, #8]
    f946:	add.w	r2, fp, #4294967295
    f94a:	adds	r1, #1
    f94c:	mov	r4, sl
    f94e:	vldr	d6, [sp, #8]
    f952:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f956:	vmov	s15, r1
    f95a:	vcvt.f64.s32	d7, s15
    f95e:	vfma.f64	d5, d7, d6
    f962:	vmov	r7, s11
    f966:	vmov	r0, r1, d5
    f96a:	sub.w	r1, r7, #54525952	; 0x3400000
    f96e:	cmp	r4, #0
    f970:	bne.n	fa62 <_dtoa_r+0x492>
    f972:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f976:	vsub.f64	d6, d6, d7
    f97a:	vmov	d7, r0, r1
    f97e:	vcmpe.f64	d6, d7
    f982:	vmrs	APSR_nzcv, fpscr
    f986:	bgt.w	fe5e <_dtoa_r+0x88e>
    f98a:	vneg.f64	d7, d7
    f98e:	vcmpe.f64	d6, d7
    f992:	vmrs	APSR_nzcv, fpscr
    f996:	bmi.w	fe5a <_dtoa_r+0x88a>
    f99a:	vstr	d8, [sp, #8]
    f99e:	ldr	r2, [sp, #60]	; 0x3c
    f9a0:	cmp	r2, #0
    f9a2:	blt.w	fbe0 <_dtoa_r+0x610>
    f9a6:	cmp.w	fp, #14
    f9aa:	bgt.w	fbe0 <_dtoa_r+0x610>
    f9ae:	ldr	r3, [pc, #552]	; (fbd8 <_dtoa_r+0x608>)
    f9b0:	add.w	r3, r3, fp, lsl #3
    f9b4:	vldr	d6, [r3]
    f9b8:	ldr	r3, [sp, #32]
    f9ba:	cmp	r3, #0
    f9bc:	bge.w	fb2e <_dtoa_r+0x55e>
    f9c0:	cmp.w	r9, #0
    f9c4:	bgt.w	fb2e <_dtoa_r+0x55e>
    f9c8:	bne.w	fe58 <_dtoa_r+0x888>
    f9cc:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f9d0:	vmul.f64	d6, d6, d7
    f9d4:	vldr	d7, [sp, #8]
    f9d8:	vcmpe.f64	d6, d7
    f9dc:	vmrs	APSR_nzcv, fpscr
    f9e0:	mov	r4, r9
    f9e2:	mov	r7, r9
    f9e4:	bge.w	fe20 <_dtoa_r+0x850>
    f9e8:	ldr.w	r8, [sp, #4]
    f9ec:	movs	r3, #49	; 0x31
    f9ee:	strb.w	r3, [r8], #1
    f9f2:	add.w	fp, fp, #1
    f9f6:	b.n	fe2a <_dtoa_r+0x85a>
    f9f8:	movs	r1, #2
    f9fa:	b.n	f8fe <_dtoa_r+0x32e>
    f9fc:	lsls	r4, r2, #31
    f9fe:	bpl.n	fa0a <_dtoa_r+0x43a>
    fa00:	vldr	d6, [r0]
    fa04:	adds	r1, #1
    fa06:	vmul.f64	d7, d7, d6
    fa0a:	asrs	r2, r2, #1
    fa0c:	adds	r0, #8
    fa0e:	b.n	f900 <_dtoa_r+0x330>
    fa10:	beq.n	fa58 <_dtoa_r+0x488>
    fa12:	rsb	r2, fp, #0
    fa16:	ldr	r1, [pc, #448]	; (fbd8 <_dtoa_r+0x608>)
    fa18:	and.w	r0, r2, #15
    fa1c:	add.w	r1, r1, r0, lsl #3
    fa20:	vldr	d7, [r1]
    fa24:	vmul.f64	d7, d8, d7
    fa28:	vstr	d7, [sp, #8]
    fa2c:	ldr	r0, [pc, #428]	; (fbdc <_dtoa_r+0x60c>)
    fa2e:	asrs	r2, r2, #4
    fa30:	movs	r4, #0
    fa32:	movs	r1, #2
    fa34:	cbnz	r2, fa42 <_dtoa_r+0x472>
    fa36:	cmp	r4, #0
    fa38:	beq.w	f910 <_dtoa_r+0x340>
    fa3c:	vstr	d7, [sp, #8]
    fa40:	b.n	f910 <_dtoa_r+0x340>
    fa42:	lsls	r7, r2, #31
    fa44:	bpl.n	fa52 <_dtoa_r+0x482>
    fa46:	vldr	d6, [r0]
    fa4a:	adds	r1, #1
    fa4c:	movs	r4, #1
    fa4e:	vmul.f64	d7, d7, d6
    fa52:	asrs	r2, r2, #1
    fa54:	adds	r0, #8
    fa56:	b.n	fa34 <_dtoa_r+0x464>
    fa58:	movs	r1, #2
    fa5a:	b.n	f910 <_dtoa_r+0x340>
    fa5c:	mov	r2, fp
    fa5e:	mov	r4, r9
    fa60:	b.n	f94e <_dtoa_r+0x37e>
    fa62:	vmov	d7, r0, r1
    fa66:	ldr	r1, [pc, #368]	; (fbd8 <_dtoa_r+0x608>)
    fa68:	add.w	r1, r1, r4, lsl #3
    fa6c:	vldr	d4, [r1, #-8]
    fa70:	ldr	r1, [sp, #4]
    fa72:	add	r4, r1
    fa74:	ldr	r1, [sp, #28]
    fa76:	cbz	r1, face <_dtoa_r+0x4fe>
    fa78:	vmov.f64	d3, #96	; 0x3f000000  0.5
    fa7c:	vmov.f64	d2, #112	; 0x3f800000  1.0
    fa80:	ldr.w	r8, [sp, #4]
    fa84:	vdiv.f64	d5, d3, d4
    fa88:	vmov.f64	d3, #36	; 0x41200000  10.0
    fa8c:	vsub.f64	d7, d5, d7
    fa90:	vcvt.s32.f64	s9, d6
    fa94:	vmov	r1, s9
    fa98:	vcvt.f64.s32	d5, s9
    fa9c:	adds	r1, #48	; 0x30
    fa9e:	vsub.f64	d6, d6, d5
    faa2:	vcmpe.f64	d6, d7
    faa6:	vmrs	APSR_nzcv, fpscr
    faaa:	strb.w	r1, [r8], #1
    faae:	bmi.n	fb24 <_dtoa_r+0x554>
    fab0:	vsub.f64	d5, d2, d6
    fab4:	vcmpe.f64	d5, d7
    fab8:	vmrs	APSR_nzcv, fpscr
    fabc:	bmi.n	fba4 <_dtoa_r+0x5d4>
    fabe:	cmp	r8, r4
    fac0:	beq.w	f99a <_dtoa_r+0x3ca>
    fac4:	vmul.f64	d7, d7, d3
    fac8:	vmul.f64	d6, d6, d3
    facc:	b.n	fa90 <_dtoa_r+0x4c0>
    face:	ldr.w	r8, [sp, #4]
    fad2:	vmul.f64	d7, d7, d4
    fad6:	mov	r0, r4
    fad8:	vmov.f64	d3, #36	; 0x41200000  10.0
    fadc:	vcvt.s32.f64	s9, d6
    fae0:	vmov	r1, s9
    fae4:	adds	r1, #48	; 0x30
    fae6:	strb.w	r1, [r8], #1
    faea:	cmp	r8, r4
    faec:	vcvt.f64.s32	d5, s9
    faf0:	vsub.f64	d6, d6, d5
    faf4:	bne.n	fb28 <_dtoa_r+0x558>
    faf6:	vmov.f64	d5, #96	; 0x3f000000  0.5
    fafa:	vadd.f64	d4, d7, d5
    fafe:	vcmpe.f64	d6, d4
    fb02:	vmrs	APSR_nzcv, fpscr
    fb06:	bgt.n	fba4 <_dtoa_r+0x5d4>
    fb08:	vsub.f64	d5, d5, d7
    fb0c:	vcmpe.f64	d6, d5
    fb10:	vmrs	APSR_nzcv, fpscr
    fb14:	bpl.w	f99a <_dtoa_r+0x3ca>
    fb18:	mov	r8, r0
    fb1a:	subs	r0, #1
    fb1c:	ldrb.w	r3, [r8, #-1]
    fb20:	cmp	r3, #48	; 0x30
    fb22:	beq.n	fb18 <_dtoa_r+0x548>
    fb24:	mov	fp, r2
    fb26:	b.n	fb7e <_dtoa_r+0x5ae>
    fb28:	vmul.f64	d6, d6, d3
    fb2c:	b.n	fadc <_dtoa_r+0x50c>
    fb2e:	vldr	d7, [sp, #8]
    fb32:	vmov.f64	d4, #36	; 0x41200000  10.0
    fb36:	ldr.w	r8, [sp, #4]
    fb3a:	vdiv.f64	d5, d7, d6
    fb3e:	vcvt.s32.f64	s10, d5
    fb42:	vmov	r3, s10
    fb46:	adds	r3, #48	; 0x30
    fb48:	strb.w	r3, [r8], #1
    fb4c:	ldr	r3, [sp, #4]
    fb4e:	sub.w	r3, r8, r3
    fb52:	cmp	r9, r3
    fb54:	vcvt.f64.s32	d3, s10
    fb58:	vfms.f64	d7, d3, d6
    fb5c:	bne.n	fbc6 <_dtoa_r+0x5f6>
    fb5e:	vadd.f64	d7, d7, d7
    fb62:	vcmpe.f64	d7, d6
    fb66:	vmrs	APSR_nzcv, fpscr
    fb6a:	bgt.n	fba2 <_dtoa_r+0x5d2>
    fb6c:	vcmp.f64	d7, d6
    fb70:	vmrs	APSR_nzcv, fpscr
    fb74:	bne.n	fb7e <_dtoa_r+0x5ae>
    fb76:	vmov	r3, s10
    fb7a:	lsls	r1, r3, #31
    fb7c:	bmi.n	fba2 <_dtoa_r+0x5d2>
    fb7e:	mov	r1, r5
    fb80:	mov	r0, r6
    fb82:	bl	10894 <_Bfree>
    fb86:	movs	r3, #0
    fb88:	ldr	r2, [sp, #48]	; 0x30
    fb8a:	strb.w	r3, [r8]
    fb8e:	add.w	r3, fp, #1
    fb92:	str	r3, [r2, #0]
    fb94:	ldr	r3, [sp, #116]	; 0x74
    fb96:	cmp	r3, #0
    fb98:	beq.w	f66e <_dtoa_r+0x9e>
    fb9c:	str.w	r8, [r3]
    fba0:	b.n	f66e <_dtoa_r+0x9e>
    fba2:	mov	r2, fp
    fba4:	mov	r3, r8
    fba6:	mov	r8, r3
    fba8:	ldrb.w	r1, [r3, #-1]!
    fbac:	cmp	r1, #57	; 0x39
    fbae:	bne.n	fbbe <_dtoa_r+0x5ee>
    fbb0:	ldr	r1, [sp, #4]
    fbb2:	cmp	r1, r3
    fbb4:	bne.n	fba6 <_dtoa_r+0x5d6>
    fbb6:	ldr	r0, [sp, #4]
    fbb8:	movs	r1, #48	; 0x30
    fbba:	adds	r2, #1
    fbbc:	strb	r1, [r0, #0]
    fbbe:	ldrb	r1, [r3, #0]
    fbc0:	adds	r1, #1
    fbc2:	strb	r1, [r3, #0]
    fbc4:	b.n	fb24 <_dtoa_r+0x554>
    fbc6:	vmul.f64	d7, d7, d4
    fbca:	vcmp.f64	d7, #0.0
    fbce:	vmrs	APSR_nzcv, fpscr
    fbd2:	bne.n	fb3a <_dtoa_r+0x56a>
    fbd4:	b.n	fb7e <_dtoa_r+0x5ae>
    fbd6:	nop
    fbd8:	.word	0x20000328
    fbdc:	.word	0x20000300
    fbe0:	ldr	r1, [sp, #28]
    fbe2:	cmp	r1, #0
    fbe4:	beq.w	fd88 <_dtoa_r+0x7b8>
    fbe8:	ldr	r1, [sp, #24]
    fbea:	cmp	r1, #1
    fbec:	bgt.w	fd58 <_dtoa_r+0x788>
    fbf0:	ldr	r1, [sp, #36]	; 0x24
    fbf2:	cmp	r1, #0
    fbf4:	beq.w	fd50 <_dtoa_r+0x780>
    fbf8:	addw	r2, r2, #1075	; 0x433
    fbfc:	ldr.w	r8, [sp, #16]
    fc00:	mov	r4, r3
    fc02:	str	r3, [sp, #36]	; 0x24
    fc04:	ldr	r3, [sp, #16]
    fc06:	add	r3, r2
    fc08:	str	r3, [sp, #16]
    fc0a:	ldr	r3, [sp, #20]
    fc0c:	movs	r1, #1
    fc0e:	add	r3, r2
    fc10:	mov	r0, r6
    fc12:	str	r3, [sp, #20]
    fc14:	bl	10a94 <__i2b>
    fc18:	ldr	r3, [sp, #36]	; 0x24
    fc1a:	mov	r7, r0
    fc1c:	cmp.w	r8, #0
    fc20:	beq.n	fc3e <_dtoa_r+0x66e>
    fc22:	ldr	r2, [sp, #20]
    fc24:	cmp	r2, #0
    fc26:	ble.n	fc3e <_dtoa_r+0x66e>
    fc28:	cmp	r2, r8
    fc2a:	ldr	r1, [sp, #16]
    fc2c:	it	ge
    fc2e:	movge	r2, r8
    fc30:	subs	r1, r1, r2
    fc32:	str	r1, [sp, #16]
    fc34:	ldr	r1, [sp, #20]
    fc36:	sub.w	r8, r8, r2
    fc3a:	subs	r2, r1, r2
    fc3c:	str	r2, [sp, #20]
    fc3e:	cbz	r3, fc82 <_dtoa_r+0x6b2>
    fc40:	ldr	r2, [sp, #28]
    fc42:	cmp	r2, #0
    fc44:	beq.w	fd92 <_dtoa_r+0x7c2>
    fc48:	cmp	r4, #0
    fc4a:	ble.n	fc74 <_dtoa_r+0x6a4>
    fc4c:	mov	r1, r7
    fc4e:	mov	r2, r4
    fc50:	mov	r0, r6
    fc52:	str	r3, [sp, #52]	; 0x34
    fc54:	bl	10c14 <__pow5mult>
    fc58:	mov	r2, r5
    fc5a:	mov	r1, r0
    fc5c:	mov	r7, r0
    fc5e:	mov	r0, r6
    fc60:	bl	10ac0 <__multiply>
    fc64:	mov	r1, r5
    fc66:	str	r0, [sp, #36]	; 0x24
    fc68:	mov	r0, r6
    fc6a:	bl	10894 <_Bfree>
    fc6e:	ldr	r2, [sp, #36]	; 0x24
    fc70:	ldr	r3, [sp, #52]	; 0x34
    fc72:	mov	r5, r2
    fc74:	subs	r2, r3, r4
    fc76:	beq.n	fc82 <_dtoa_r+0x6b2>
    fc78:	mov	r1, r5
    fc7a:	mov	r0, r6
    fc7c:	bl	10c14 <__pow5mult>
    fc80:	mov	r5, r0
    fc82:	movs	r1, #1
    fc84:	mov	r0, r6
    fc86:	bl	10a94 <__i2b>
    fc8a:	ldr	r3, [sp, #40]	; 0x28
    fc8c:	cmp	r3, #0
    fc8e:	mov	r4, r0
    fc90:	ble.w	fd96 <_dtoa_r+0x7c6>
    fc94:	mov	r2, r3
    fc96:	mov	r1, r0
    fc98:	mov	r0, r6
    fc9a:	bl	10c14 <__pow5mult>
    fc9e:	ldr	r3, [sp, #24]
    fca0:	cmp	r3, #1
    fca2:	mov	r4, r0
    fca4:	ble.n	fd9c <_dtoa_r+0x7cc>
    fca6:	movs	r3, #0
    fca8:	str	r3, [sp, #36]	; 0x24
    fcaa:	ldr	r2, [r4, #16]
    fcac:	add.w	r2, r4, r2, lsl #2
    fcb0:	ldr	r0, [r2, #16]
    fcb2:	bl	109f8 <__hi0bits>
    fcb6:	rsb	r0, r0, #32
    fcba:	ldr	r3, [sp, #20]
    fcbc:	add	r0, r3
    fcbe:	ands.w	r0, r0, #31
    fcc2:	beq.w	fdec <_dtoa_r+0x81c>
    fcc6:	rsb	r2, r0, #32
    fcca:	cmp	r2, #4
    fccc:	ble.w	fdda <_dtoa_r+0x80a>
    fcd0:	ldr	r3, [sp, #16]
    fcd2:	rsb	r0, r0, #28
    fcd6:	add	r3, r0
    fcd8:	str	r3, [sp, #16]
    fcda:	ldr	r3, [sp, #20]
    fcdc:	add	r8, r0
    fcde:	add	r3, r0
    fce0:	str	r3, [sp, #20]
    fce2:	ldr	r3, [sp, #16]
    fce4:	cmp	r3, #0
    fce6:	ble.n	fcf4 <_dtoa_r+0x724>
    fce8:	mov	r1, r5
    fcea:	mov	r2, r3
    fcec:	mov	r0, r6
    fcee:	bl	10cc8 <__lshift>
    fcf2:	mov	r5, r0
    fcf4:	ldr	r3, [sp, #20]
    fcf6:	cmp	r3, #0
    fcf8:	ble.n	fd06 <_dtoa_r+0x736>
    fcfa:	mov	r1, r4
    fcfc:	mov	r2, r3
    fcfe:	mov	r0, r6
    fd00:	bl	10cc8 <__lshift>
    fd04:	mov	r4, r0
    fd06:	ldr	r3, [sp, #44]	; 0x2c
    fd08:	cmp	r3, #0
    fd0a:	beq.n	fdf0 <_dtoa_r+0x820>
    fd0c:	mov	r1, r4
    fd0e:	mov	r0, r5
    fd10:	bl	10da0 <__mcmp>
    fd14:	cmp	r0, #0
    fd16:	bge.n	fdf0 <_dtoa_r+0x820>
    fd18:	movs	r3, #0
    fd1a:	mov	r1, r5
    fd1c:	movs	r2, #10
    fd1e:	mov	r0, r6
    fd20:	bl	108d8 <__multadd>
    fd24:	ldr	r3, [sp, #28]
    fd26:	add.w	fp, fp, #4294967295
    fd2a:	mov	r5, r0
    fd2c:	cmp	r3, #0
    fd2e:	beq.w	10060 <_dtoa_r+0xa90>
    fd32:	mov	r1, r7
    fd34:	movs	r3, #0
    fd36:	movs	r2, #10
    fd38:	mov	r0, r6
    fd3a:	bl	108d8 <__multadd>
    fd3e:	cmp.w	sl, #0
    fd42:	mov	r7, r0
    fd44:	bgt.w	fe6e <_dtoa_r+0x89e>
    fd48:	ldr	r3, [sp, #24]
    fd4a:	cmp	r3, #2
    fd4c:	bgt.n	fdfe <_dtoa_r+0x82e>
    fd4e:	b.n	fe6e <_dtoa_r+0x89e>
    fd50:	ldr	r2, [sp, #56]	; 0x38
    fd52:	rsb	r2, r2, #54	; 0x36
    fd56:	b.n	fbfc <_dtoa_r+0x62c>
    fd58:	add.w	r4, r9, #4294967295
    fd5c:	cmp	r3, r4
    fd5e:	itttt	lt
    fd60:	sublt	r2, r4, r3
    fd62:	ldrlt	r3, [sp, #40]	; 0x28
    fd64:	addlt	r3, r3, r2
    fd66:	strlt	r3, [sp, #40]	; 0x28
    fd68:	itee	ge
    fd6a:	subge	r4, r3, r4
    fd6c:	movlt	r3, r4
    fd6e:	movlt	r4, #0
    fd70:	cmp.w	r9, #0
    fd74:	itete	lt
    fd76:	ldrlt	r2, [sp, #16]
    fd78:	ldrge.w	r8, [sp, #16]
    fd7c:	sublt.w	r8, r2, r9
    fd80:	movge	r2, r9
    fd82:	it	lt
    fd84:	movlt	r2, #0
    fd86:	b.n	fc02 <_dtoa_r+0x632>
    fd88:	ldr.w	r8, [sp, #16]
    fd8c:	ldr	r7, [sp, #28]
    fd8e:	mov	r4, r3
    fd90:	b.n	fc1c <_dtoa_r+0x64c>
    fd92:	mov	r2, r3
    fd94:	b.n	fc78 <_dtoa_r+0x6a8>
    fd96:	ldr	r3, [sp, #24]
    fd98:	cmp	r3, #1
    fd9a:	bgt.n	fdce <_dtoa_r+0x7fe>
    fd9c:	ldr	r3, [sp, #8]
    fd9e:	cbnz	r3, fdce <_dtoa_r+0x7fe>
    fda0:	ldr	r3, [sp, #12]
    fda2:	ubfx	r2, r3, #0, #20
    fda6:	cbnz	r2, fdd2 <_dtoa_r+0x802>
    fda8:	bic.w	r2, r3, #2147483648	; 0x80000000
    fdac:	lsrs	r2, r2, #20
    fdae:	lsls	r2, r2, #20
    fdb0:	cbz	r2, fdd6 <_dtoa_r+0x806>
    fdb2:	ldr	r3, [sp, #16]
    fdb4:	adds	r3, #1
    fdb6:	str	r3, [sp, #16]
    fdb8:	ldr	r3, [sp, #20]
    fdba:	adds	r3, #1
    fdbc:	str	r3, [sp, #20]
    fdbe:	movs	r3, #1
    fdc0:	str	r3, [sp, #36]	; 0x24
    fdc2:	ldr	r3, [sp, #40]	; 0x28
    fdc4:	cmp	r3, #0
    fdc6:	bne.w	fcaa <_dtoa_r+0x6da>
    fdca:	movs	r0, #1
    fdcc:	b.n	fcba <_dtoa_r+0x6ea>
    fdce:	movs	r3, #0
    fdd0:	b.n	fdc0 <_dtoa_r+0x7f0>
    fdd2:	ldr	r3, [sp, #8]
    fdd4:	b.n	fdc0 <_dtoa_r+0x7f0>
    fdd6:	str	r2, [sp, #36]	; 0x24
    fdd8:	b.n	fdc2 <_dtoa_r+0x7f2>
    fdda:	beq.n	fce2 <_dtoa_r+0x712>
    fddc:	ldr	r3, [sp, #16]
    fdde:	adds	r2, #28
    fde0:	add	r3, r2
    fde2:	str	r3, [sp, #16]
    fde4:	ldr	r3, [sp, #20]
    fde6:	add	r8, r2
    fde8:	add	r3, r2
    fdea:	b.n	fce0 <_dtoa_r+0x710>
    fdec:	mov	r2, r0
    fdee:	b.n	fddc <_dtoa_r+0x80c>
    fdf0:	cmp.w	r9, #0
    fdf4:	bgt.n	fe64 <_dtoa_r+0x894>
    fdf6:	ldr	r3, [sp, #24]
    fdf8:	cmp	r3, #2
    fdfa:	ble.n	fe64 <_dtoa_r+0x894>
    fdfc:	mov	sl, r9
    fdfe:	cmp.w	sl, #0
    fe02:	bne.n	fe20 <_dtoa_r+0x850>
    fe04:	mov	r1, r4
    fe06:	mov	r3, sl
    fe08:	movs	r2, #5
    fe0a:	mov	r0, r6
    fe0c:	bl	108d8 <__multadd>
    fe10:	mov	r1, r0
    fe12:	mov	r4, r0
    fe14:	mov	r0, r5
    fe16:	bl	10da0 <__mcmp>
    fe1a:	cmp	r0, #0
    fe1c:	bgt.w	f9e8 <_dtoa_r+0x418>
    fe20:	ldr	r3, [sp, #32]
    fe22:	ldr.w	r8, [sp, #4]
    fe26:	mvn.w	fp, r3
    fe2a:	mov.w	r9, #0
    fe2e:	mov	r1, r4
    fe30:	mov	r0, r6
    fe32:	bl	10894 <_Bfree>
    fe36:	cmp	r7, #0
    fe38:	beq.w	fb7e <_dtoa_r+0x5ae>
    fe3c:	cmp.w	r9, #0
    fe40:	beq.n	fe4e <_dtoa_r+0x87e>
    fe42:	cmp	r9, r7
    fe44:	beq.n	fe4e <_dtoa_r+0x87e>
    fe46:	mov	r1, r9
    fe48:	mov	r0, r6
    fe4a:	bl	10894 <_Bfree>
    fe4e:	mov	r1, r7
    fe50:	mov	r0, r6
    fe52:	bl	10894 <_Bfree>
    fe56:	b.n	fb7e <_dtoa_r+0x5ae>
    fe58:	movs	r4, #0
    fe5a:	mov	r7, r4
    fe5c:	b.n	fe20 <_dtoa_r+0x850>
    fe5e:	mov	fp, r2
    fe60:	mov	r7, r4
    fe62:	b.n	f9e8 <_dtoa_r+0x418>
    fe64:	ldr	r3, [sp, #28]
    fe66:	mov	sl, r9
    fe68:	cmp	r3, #0
    fe6a:	beq.w	1006e <_dtoa_r+0xa9e>
    fe6e:	cmp.w	r8, #0
    fe72:	ble.n	fe80 <_dtoa_r+0x8b0>
    fe74:	mov	r1, r7
    fe76:	mov	r2, r8
    fe78:	mov	r0, r6
    fe7a:	bl	10cc8 <__lshift>
    fe7e:	mov	r7, r0
    fe80:	ldr	r3, [sp, #36]	; 0x24
    fe82:	cmp	r3, #0
    fe84:	beq.n	ff42 <_dtoa_r+0x972>
    fe86:	ldr	r1, [r7, #4]
    fe88:	mov	r0, r6
    fe8a:	bl	10814 <_Balloc>
    fe8e:	mov	r8, r0
    fe90:	cbnz	r0, fe9e <_dtoa_r+0x8ce>
    fe92:	ldr	r3, [pc, #520]	; (1009c <_dtoa_r+0xacc>)
    fe94:	mov	r2, r0
    fe96:	movw	r1, #751	; 0x2ef
    fe9a:	b.w	f600 <_dtoa_r+0x30>
    fe9e:	ldr	r2, [r7, #16]
    fea0:	adds	r2, #2
    fea2:	lsls	r2, r2, #2
    fea4:	add.w	r1, r7, #12
    fea8:	adds	r0, #12
    feaa:	bl	a8dc <memcpy>
    feae:	movs	r2, #1
    feb0:	mov	r1, r8
    feb2:	mov	r0, r6
    feb4:	bl	10cc8 <__lshift>
    feb8:	ldr	r3, [sp, #4]
    feba:	adds	r3, #1
    febc:	str	r3, [sp, #16]
    febe:	ldr	r3, [sp, #4]
    fec0:	add	r3, sl
    fec2:	str	r3, [sp, #32]
    fec4:	ldr	r3, [sp, #8]
    fec6:	and.w	r3, r3, #1
    feca:	mov	r9, r7
    fecc:	str	r3, [sp, #28]
    fece:	mov	r7, r0
    fed0:	ldr	r3, [sp, #16]
    fed2:	mov	r1, r4
    fed4:	subs	r3, #1
    fed6:	mov	r0, r5
    fed8:	str	r3, [sp, #8]
    feda:	bl	f4bc <quorem>
    fede:	mov	r3, r0
    fee0:	adds	r3, #48	; 0x30
    fee2:	str	r0, [sp, #20]
    fee4:	mov	r1, r9
    fee6:	mov	r0, r5
    fee8:	str	r3, [sp, #36]	; 0x24
    feea:	bl	10da0 <__mcmp>
    feee:	mov	r2, r7
    fef0:	mov	sl, r0
    fef2:	mov	r1, r4
    fef4:	mov	r0, r6
    fef6:	bl	10dd8 <__mdiff>
    fefa:	ldr	r2, [r0, #12]
    fefc:	ldr	r3, [sp, #36]	; 0x24
    fefe:	mov	r8, r0
    ff00:	cbnz	r2, ff46 <_dtoa_r+0x976>
    ff02:	mov	r1, r0
    ff04:	mov	r0, r5
    ff06:	bl	10da0 <__mcmp>
    ff0a:	ldr	r3, [sp, #36]	; 0x24
    ff0c:	mov	r2, r0
    ff0e:	mov	r1, r8
    ff10:	mov	r0, r6
    ff12:	strd	r3, r2, [sp, #36]	; 0x24
    ff16:	bl	10894 <_Bfree>
    ff1a:	ldr	r3, [sp, #24]
    ff1c:	ldr	r2, [sp, #40]	; 0x28
    ff1e:	ldr.w	r8, [sp, #16]
    ff22:	orr.w	r1, r3, r2
    ff26:	ldr	r3, [sp, #28]
    ff28:	orrs	r1, r3
    ff2a:	ldr	r3, [sp, #36]	; 0x24
    ff2c:	bne.n	ff4a <_dtoa_r+0x97a>
    ff2e:	cmp	r3, #57	; 0x39
    ff30:	beq.n	ff86 <_dtoa_r+0x9b6>
    ff32:	cmp.w	sl, #0
    ff36:	ble.n	ff3c <_dtoa_r+0x96c>
    ff38:	ldr	r3, [sp, #20]
    ff3a:	adds	r3, #49	; 0x31
    ff3c:	ldr	r2, [sp, #8]
    ff3e:	strb	r3, [r2, #0]
    ff40:	b.n	fe2e <_dtoa_r+0x85e>
    ff42:	mov	r0, r7
    ff44:	b.n	feb8 <_dtoa_r+0x8e8>
    ff46:	movs	r2, #1
    ff48:	b.n	ff0e <_dtoa_r+0x93e>
    ff4a:	cmp.w	sl, #0
    ff4e:	blt.n	ff5e <_dtoa_r+0x98e>
    ff50:	ldr	r1, [sp, #24]
    ff52:	orr.w	sl, r1, sl
    ff56:	ldr	r1, [sp, #28]
    ff58:	orrs.w	sl, sl, r1
    ff5c:	bne.n	ffa0 <_dtoa_r+0x9d0>
    ff5e:	cmp	r2, #0
    ff60:	ble.n	ff3c <_dtoa_r+0x96c>
    ff62:	mov	r1, r5
    ff64:	movs	r2, #1
    ff66:	mov	r0, r6
    ff68:	str	r3, [sp, #16]
    ff6a:	bl	10cc8 <__lshift>
    ff6e:	mov	r1, r4
    ff70:	mov	r5, r0
    ff72:	bl	10da0 <__mcmp>
    ff76:	cmp	r0, #0
    ff78:	ldr	r3, [sp, #16]
    ff7a:	bgt.n	ff82 <_dtoa_r+0x9b2>
    ff7c:	bne.n	ff3c <_dtoa_r+0x96c>
    ff7e:	lsls	r2, r3, #31
    ff80:	bpl.n	ff3c <_dtoa_r+0x96c>
    ff82:	cmp	r3, #57	; 0x39
    ff84:	bne.n	ff38 <_dtoa_r+0x968>
    ff86:	ldr	r2, [sp, #8]
    ff88:	movs	r3, #57	; 0x39
    ff8a:	strb	r3, [r2, #0]
    ff8c:	mov	r3, r8
    ff8e:	mov	r8, r3
    ff90:	subs	r3, #1
    ff92:	ldrb.w	r2, [r8, #-1]
    ff96:	cmp	r2, #57	; 0x39
    ff98:	beq.n	1003e <_dtoa_r+0xa6e>
    ff9a:	adds	r2, #1
    ff9c:	strb	r2, [r3, #0]
    ff9e:	b.n	fe2e <_dtoa_r+0x85e>
    ffa0:	cmp	r2, #0
    ffa2:	ble.n	ffac <_dtoa_r+0x9dc>
    ffa4:	cmp	r3, #57	; 0x39
    ffa6:	beq.n	ff86 <_dtoa_r+0x9b6>
    ffa8:	adds	r3, #1
    ffaa:	b.n	ff3c <_dtoa_r+0x96c>
    ffac:	ldr	r2, [sp, #16]
    ffae:	ldr	r1, [sp, #32]
    ffb0:	strb.w	r3, [r2, #-1]
    ffb4:	cmp	r2, r1
    ffb6:	beq.n	10010 <_dtoa_r+0xa40>
    ffb8:	mov	r1, r5
    ffba:	movs	r3, #0
    ffbc:	movs	r2, #10
    ffbe:	mov	r0, r6
    ffc0:	bl	108d8 <__multadd>
    ffc4:	cmp	r9, r7
    ffc6:	mov	r5, r0
    ffc8:	mov.w	r3, #0
    ffcc:	mov.w	r2, #10
    ffd0:	mov	r1, r9
    ffd2:	mov	r0, r6
    ffd4:	bne.n	ffe6 <_dtoa_r+0xa16>
    ffd6:	bl	108d8 <__multadd>
    ffda:	mov	r9, r0
    ffdc:	mov	r7, r0
    ffde:	ldr	r3, [sp, #16]
    ffe0:	adds	r3, #1
    ffe2:	str	r3, [sp, #16]
    ffe4:	b.n	fed0 <_dtoa_r+0x900>
    ffe6:	bl	108d8 <__multadd>
    ffea:	mov	r1, r7
    ffec:	mov	r9, r0
    ffee:	movs	r3, #0
    fff0:	movs	r2, #10
    fff2:	mov	r0, r6
    fff4:	bl	108d8 <__multadd>
    fff8:	mov	r7, r0
    fffa:	b.n	ffde <_dtoa_r+0xa0e>
    fffc:	cmp.w	sl, #0
   10000:	ldr	r2, [sp, #4]
   10002:	ite	gt
   10004:	movgt	r8, sl
   10006:	movle.w	r8, #1
   1000a:	add	r8, r2
   1000c:	mov.w	r9, #0
   10010:	mov	r1, r5
   10012:	movs	r2, #1
   10014:	mov	r0, r6
   10016:	str	r3, [sp, #8]
   10018:	bl	10cc8 <__lshift>
   1001c:	mov	r1, r4
   1001e:	mov	r5, r0
   10020:	bl	10da0 <__mcmp>
   10024:	cmp	r0, #0
   10026:	bgt.n	ff8c <_dtoa_r+0x9bc>
   10028:	bne.n	10030 <_dtoa_r+0xa60>
   1002a:	ldr	r3, [sp, #8]
   1002c:	lsls	r3, r3, #31
   1002e:	bmi.n	ff8c <_dtoa_r+0x9bc>
   10030:	mov	r3, r8
   10032:	mov	r8, r3
   10034:	ldrb.w	r2, [r3, #-1]!
   10038:	cmp	r2, #48	; 0x30
   1003a:	beq.n	10032 <_dtoa_r+0xa62>
   1003c:	b.n	fe2e <_dtoa_r+0x85e>
   1003e:	ldr	r2, [sp, #4]
   10040:	cmp	r2, r3
   10042:	bne.n	ff8e <_dtoa_r+0x9be>
   10044:	add.w	fp, fp, #1
   10048:	movs	r3, #49	; 0x31
   1004a:	b.n	ff3e <_dtoa_r+0x96e>
   1004c:	ldr	r3, [pc, #80]	; (100a0 <_dtoa_r+0xad0>)
   1004e:	b.w	f6a6 <_dtoa_r+0xd6>
   10052:	ldr	r3, [sp, #116]	; 0x74
   10054:	cmp	r3, #0
   10056:	bne.w	f664 <_dtoa_r+0x94>
   1005a:	ldr	r3, [pc, #72]	; (100a4 <_dtoa_r+0xad4>)
   1005c:	b.w	f6a6 <_dtoa_r+0xd6>
   10060:	cmp.w	sl, #0
   10064:	bgt.n	1006e <_dtoa_r+0xa9e>
   10066:	ldr	r3, [sp, #24]
   10068:	cmp	r3, #2
   1006a:	bgt.w	fdfe <_dtoa_r+0x82e>
   1006e:	ldr.w	r8, [sp, #4]
   10072:	mov	r1, r4
   10074:	mov	r0, r5
   10076:	bl	f4bc <quorem>
   1007a:	add.w	r3, r0, #48	; 0x30
   1007e:	strb.w	r3, [r8], #1
   10082:	ldr	r2, [sp, #4]
   10084:	sub.w	r2, r8, r2
   10088:	cmp	sl, r2
   1008a:	ble.n	fffc <_dtoa_r+0xa2c>
   1008c:	mov	r1, r5
   1008e:	movs	r3, #0
   10090:	movs	r2, #10
   10092:	mov	r0, r6
   10094:	bl	108d8 <__multadd>
   10098:	mov	r5, r0
   1009a:	b.n	10072 <_dtoa_r+0xaa2>
   1009c:	.word	0x2000131a
   100a0:	.word	0x200010bf
   100a4:	.word	0x2000129d

000100a8 <_free_r>:
   100a8:	push	{r0, r1, r2, r4, r5, lr}
   100aa:	cmp	r1, #0
   100ac:	beq.n	10138 <_free_r+0x90>
   100ae:	ldr.w	r3, [r1, #-4]
   100b2:	str	r0, [sp, #4]
   100b4:	cmp	r3, #0
   100b6:	sub.w	r4, r1, #4
   100ba:	it	lt
   100bc:	addlt	r4, r4, r3
   100be:	bl	d45c <__malloc_lock>
   100c2:	ldr	r2, [pc, #120]	; (1013c <_free_r+0x94>)
   100c4:	ldr	r0, [sp, #4]
   100c6:	ldr	r3, [r2, #0]
   100c8:	cbnz	r3, 100d8 <_free_r+0x30>
   100ca:	str	r3, [r4, #4]
   100cc:	str	r4, [r2, #0]
   100ce:	add	sp, #12
   100d0:	ldmia.w	sp!, {r4, r5, lr}
   100d4:	b.w	d468 <__malloc_unlock>
   100d8:	cmp	r3, r4
   100da:	bls.n	100ee <_free_r+0x46>
   100dc:	ldr	r5, [r4, #0]
   100de:	adds	r1, r4, r5
   100e0:	cmp	r3, r1
   100e2:	itttt	eq
   100e4:	ldreq	r1, [r3, #0]
   100e6:	ldreq	r3, [r3, #4]
   100e8:	addeq	r1, r1, r5
   100ea:	streq	r1, [r4, #0]
   100ec:	b.n	100ca <_free_r+0x22>
   100ee:	mov	r2, r3
   100f0:	ldr	r3, [r3, #4]
   100f2:	cbz	r3, 100f8 <_free_r+0x50>
   100f4:	cmp	r3, r4
   100f6:	bls.n	100ee <_free_r+0x46>
   100f8:	ldr	r1, [r2, #0]
   100fa:	adds	r5, r2, r1
   100fc:	cmp	r5, r4
   100fe:	bne.n	10118 <_free_r+0x70>
   10100:	ldr	r4, [r4, #0]
   10102:	add	r1, r4
   10104:	adds	r4, r2, r1
   10106:	cmp	r3, r4
   10108:	str	r1, [r2, #0]
   1010a:	bne.n	100ce <_free_r+0x26>
   1010c:	ldr	r4, [r3, #0]
   1010e:	ldr	r3, [r3, #4]
   10110:	str	r3, [r2, #4]
   10112:	add	r4, r1
   10114:	str	r4, [r2, #0]
   10116:	b.n	100ce <_free_r+0x26>
   10118:	bls.n	10120 <_free_r+0x78>
   1011a:	movs	r3, #12
   1011c:	str	r3, [r0, #0]
   1011e:	b.n	100ce <_free_r+0x26>
   10120:	ldr	r5, [r4, #0]
   10122:	adds	r1, r4, r5
   10124:	cmp	r3, r1
   10126:	itt	eq
   10128:	ldreq	r1, [r3, #0]
   1012a:	ldreq	r3, [r3, #4]
   1012c:	str	r3, [r4, #4]
   1012e:	itt	eq
   10130:	addeq	r1, r1, r5
   10132:	streq	r1, [r4, #0]
   10134:	str	r4, [r2, #4]
   10136:	b.n	100ce <_free_r+0x26>
   10138:	add	sp, #12
   1013a:	pop	{r4, r5, pc}
   1013c:	.word	0x200212b0

00010140 <rshift>:
   10140:	ldr	r3, [r0, #16]
   10142:	cmp.w	r3, r1, asr #5
   10146:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1014a:	mov.w	r2, r1, asr #5
   1014e:	add.w	r4, r0, #20
   10152:	ble.n	101e0 <rshift+0xa0>
   10154:	ands.w	r1, r1, #31
   10158:	add.w	r6, r4, r3, lsl #2
   1015c:	add.w	r5, r4, r2, lsl #2
   10160:	bne.n	1017c <rshift+0x3c>
   10162:	add.w	r7, r0, #16
   10166:	mov	r1, r5
   10168:	cmp	r1, r6
   1016a:	bcc.n	101d6 <rshift+0x96>
   1016c:	subs	r3, r3, r2
   1016e:	lsls	r3, r3, #2
   10170:	subs	r2, r5, #3
   10172:	cmp	r6, r2
   10174:	it	cc
   10176:	movcc	r3, #0
   10178:	add	r3, r4
   1017a:	b.n	101a8 <rshift+0x68>
   1017c:	ldr.w	r7, [r4, r2, lsl #2]
   10180:	rsb	r8, r1, #32
   10184:	lsrs	r7, r1
   10186:	add.w	lr, r5, #4
   1018a:	mov	r9, r4
   1018c:	cmp	r6, lr
   1018e:	mov	ip, lr
   10190:	bhi.n	101be <rshift+0x7e>
   10192:	subs	r2, r3, r2
   10194:	lsls	r2, r2, #2
   10196:	subs	r2, #4
   10198:	adds	r5, #1
   1019a:	cmp	r6, r5
   1019c:	it	cc
   1019e:	movcc	r2, #0
   101a0:	adds	r3, r4, r2
   101a2:	str	r7, [r4, r2]
   101a4:	cbz	r7, 101a8 <rshift+0x68>
   101a6:	adds	r3, #4
   101a8:	subs	r2, r3, r4
   101aa:	cmp	r3, r4
   101ac:	mov.w	r2, r2, asr #2
   101b0:	it	eq
   101b2:	moveq	r3, #0
   101b4:	str	r2, [r0, #16]
   101b6:	it	eq
   101b8:	streq	r3, [r0, #20]
   101ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   101be:	ldr.w	ip, [ip]
   101c2:	lsl.w	ip, ip, r8
   101c6:	orr.w	r7, ip, r7
   101ca:	str.w	r7, [r9], #4
   101ce:	ldr.w	r7, [lr], #4
   101d2:	lsrs	r7, r1
   101d4:	b.n	1018c <rshift+0x4c>
   101d6:	ldr.w	ip, [r1], #4
   101da:	str.w	ip, [r7, #4]!
   101de:	b.n	10168 <rshift+0x28>
   101e0:	mov	r3, r4
   101e2:	b.n	101a8 <rshift+0x68>

000101e4 <__hexdig_fun>:
   101e4:	sub.w	r3, r0, #48	; 0x30
   101e8:	cmp	r3, #9
   101ea:	bhi.n	101f2 <__hexdig_fun+0xe>
   101ec:	subs	r0, #32
   101ee:	uxtb	r0, r0
   101f0:	bx	lr
   101f2:	sub.w	r3, r0, #97	; 0x61
   101f6:	cmp	r3, #5
   101f8:	bhi.n	101fe <__hexdig_fun+0x1a>
   101fa:	subs	r0, #71	; 0x47
   101fc:	b.n	101ee <__hexdig_fun+0xa>
   101fe:	sub.w	r3, r0, #65	; 0x41
   10202:	cmp	r3, #5
   10204:	bhi.n	1020a <__hexdig_fun+0x26>
   10206:	subs	r0, #39	; 0x27
   10208:	b.n	101ee <__hexdig_fun+0xa>
   1020a:	movs	r0, #0
   1020c:	bx	lr
	...

00010210 <__gethex>:
   10210:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10214:	mov	r7, r2
   10216:	ldr	r2, [r1, #0]
   10218:	sub	sp, #20
   1021a:	add.w	fp, r2, #2
   1021e:	rsb	r2, r2, #4278255360	; 0xff00ff00
   10222:	add.w	r2, r2, #16711680	; 0xff0000
   10226:	mov	r9, r0
   10228:	mov	sl, r1
   1022a:	str	r3, [sp, #8]
   1022c:	adds	r2, #254	; 0xfe
   1022e:	add.w	r3, r2, fp
   10232:	mov	r8, fp
   10234:	ldrb.w	r0, [fp], #1
   10238:	str	r3, [sp, #4]
   1023a:	cmp	r0, #48	; 0x30
   1023c:	beq.n	1022e <__gethex+0x1e>
   1023e:	bl	101e4 <__hexdig_fun>
   10242:	mov	r4, r0
   10244:	cmp	r0, #0
   10246:	bne.n	102ba <__gethex+0xaa>
   10248:	ldr	r1, [pc, #668]	; (104e8 <__gethex+0x2d8>)
   1024a:	movs	r2, #1
   1024c:	mov	r0, r8
   1024e:	bl	f2a4 <strncmp>
   10252:	mov	r6, r0
   10254:	cmp	r0, #0
   10256:	bne.n	1032c <__gethex+0x11c>
   10258:	ldrb.w	r0, [r8, #1]
   1025c:	mov	r5, fp
   1025e:	bl	101e4 <__hexdig_fun>
   10262:	cmp	r0, #0
   10264:	beq.n	10330 <__gethex+0x120>
   10266:	mov	r2, fp
   10268:	ldrb	r0, [r2, #0]
   1026a:	cmp	r0, #48	; 0x30
   1026c:	mov	r8, r2
   1026e:	add.w	r2, r2, #1
   10272:	beq.n	10268 <__gethex+0x58>
   10274:	bl	101e4 <__hexdig_fun>
   10278:	movs	r3, #1
   1027a:	clz	r4, r0
   1027e:	lsrs	r4, r4, #5
   10280:	mov	r6, fp
   10282:	str	r3, [sp, #4]
   10284:	mov	r2, r8
   10286:	mov	r5, r2
   10288:	adds	r2, #1
   1028a:	ldrb	r0, [r5, #0]
   1028c:	bl	101e4 <__hexdig_fun>
   10290:	cmp	r0, #0
   10292:	bne.n	10286 <__gethex+0x76>
   10294:	ldr	r1, [pc, #592]	; (104e8 <__gethex+0x2d8>)
   10296:	movs	r2, #1
   10298:	mov	r0, r5
   1029a:	bl	f2a4 <strncmp>
   1029e:	cbnz	r0, 102c0 <__gethex+0xb0>
   102a0:	cbnz	r6, 102b4 <__gethex+0xa4>
   102a2:	adds	r6, r5, #1
   102a4:	mov	r2, r6
   102a6:	mov	r5, r2
   102a8:	adds	r2, #1
   102aa:	ldrb	r0, [r5, #0]
   102ac:	bl	101e4 <__hexdig_fun>
   102b0:	cmp	r0, #0
   102b2:	bne.n	102a6 <__gethex+0x96>
   102b4:	subs	r3, r6, r5
   102b6:	lsls	r6, r3, #2
   102b8:	b.n	102c4 <__gethex+0xb4>
   102ba:	movs	r4, #0
   102bc:	mov	r6, r4
   102be:	b.n	10284 <__gethex+0x74>
   102c0:	cmp	r6, #0
   102c2:	bne.n	102b4 <__gethex+0xa4>
   102c4:	ldrb	r3, [r5, #0]
   102c6:	and.w	r3, r3, #223	; 0xdf
   102ca:	cmp	r3, #80	; 0x50
   102cc:	bne.n	1034a <__gethex+0x13a>
   102ce:	ldrb	r3, [r5, #1]
   102d0:	cmp	r3, #43	; 0x2b
   102d2:	beq.n	10334 <__gethex+0x124>
   102d4:	cmp	r3, #45	; 0x2d
   102d6:	beq.n	1033c <__gethex+0x12c>
   102d8:	adds	r1, r5, #1
   102da:	mov.w	fp, #0
   102de:	ldrb	r0, [r1, #0]
   102e0:	bl	101e4 <__hexdig_fun>
   102e4:	subs	r2, r0, #1
   102e6:	uxtb	r2, r2
   102e8:	cmp	r2, #24
   102ea:	bhi.n	1034a <__gethex+0x13a>
   102ec:	sub.w	r2, r0, #16
   102f0:	ldrb.w	r0, [r1, #1]!
   102f4:	bl	101e4 <__hexdig_fun>
   102f8:	add.w	ip, r0, #4294967295
   102fc:	uxtb.w	ip, ip
   10300:	cmp.w	ip, #24
   10304:	bls.n	10342 <__gethex+0x132>
   10306:	cmp.w	fp, #0
   1030a:	beq.n	1030e <__gethex+0xfe>
   1030c:	negs	r2, r2
   1030e:	add	r6, r2
   10310:	str.w	r1, [sl]
   10314:	cbz	r4, 1034e <__gethex+0x13e>
   10316:	ldr	r3, [sp, #4]
   10318:	cmp	r3, #0
   1031a:	ite	ne
   1031c:	movne.w	r8, #0
   10320:	moveq.w	r8, #6
   10324:	mov	r0, r8
   10326:	add	sp, #20
   10328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1032c:	mov	r5, r8
   1032e:	mov	r6, r4
   10330:	movs	r4, #1
   10332:	b.n	102c4 <__gethex+0xb4>
   10334:	mov.w	fp, #0
   10338:	adds	r1, r5, #2
   1033a:	b.n	102de <__gethex+0xce>
   1033c:	mov.w	fp, #1
   10340:	b.n	10338 <__gethex+0x128>
   10342:	movs	r3, #10
   10344:	mla	r0, r3, r2, r0
   10348:	b.n	102ec <__gethex+0xdc>
   1034a:	mov	r1, r5
   1034c:	b.n	10310 <__gethex+0x100>
   1034e:	sub.w	r3, r5, r8
   10352:	subs	r3, #1
   10354:	mov	r1, r4
   10356:	cmp	r3, #7
   10358:	bgt.n	10370 <__gethex+0x160>
   1035a:	mov	r0, r9
   1035c:	bl	10814 <_Balloc>
   10360:	mov	r4, r0
   10362:	cbnz	r0, 10376 <__gethex+0x166>
   10364:	ldr	r3, [pc, #388]	; (104ec <__gethex+0x2dc>)
   10366:	mov	r2, r0
   10368:	movs	r1, #228	; 0xe4
   1036a:	ldr	r0, [pc, #388]	; (104f0 <__gethex+0x2e0>)
   1036c:	bl	11d5c <__assert_func>
   10370:	adds	r1, #1
   10372:	asrs	r3, r3, #1
   10374:	b.n	10356 <__gethex+0x146>
   10376:	add.w	sl, r0, #20
   1037a:	movs	r3, #0
   1037c:	ldr	r1, [pc, #360]	; (104e8 <__gethex+0x2d8>)
   1037e:	str.w	sl, [sp, #4]
   10382:	mov	fp, r3
   10384:	cmp	r8, r5
   10386:	bcc.n	1040e <__gethex+0x1fe>
   10388:	ldr	r0, [sp, #4]
   1038a:	str.w	fp, [r0], #4
   1038e:	sub.w	r0, r0, sl
   10392:	asrs	r0, r0, #2
   10394:	str	r0, [r4, #16]
   10396:	mov.w	r8, r0, lsl #5
   1039a:	mov	r0, fp
   1039c:	bl	109f8 <__hi0bits>
   103a0:	ldr	r5, [r7, #0]
   103a2:	sub.w	r0, r8, r0
   103a6:	cmp	r0, r5
   103a8:	ble.n	1045e <__gethex+0x24e>
   103aa:	sub.w	r8, r0, r5
   103ae:	mov	r1, r8
   103b0:	mov	r0, r4
   103b2:	bl	11126 <__any_on>
   103b6:	mov	fp, r0
   103b8:	cbz	r0, 103ea <__gethex+0x1da>
   103ba:	add.w	r3, r8, #4294967295
   103be:	asrs	r1, r3, #5
   103c0:	and.w	r2, r3, #31
   103c4:	ldr.w	r1, [sl, r1, lsl #2]
   103c8:	mov.w	fp, #1
   103cc:	lsl.w	r2, fp, r2
   103d0:	tst	r2, r1
   103d2:	beq.n	103ea <__gethex+0x1da>
   103d4:	cmp	r3, fp
   103d6:	ble.n	103e6 <__gethex+0x1d6>
   103d8:	sub.w	r1, r8, #2
   103dc:	mov	r0, r4
   103de:	bl	11126 <__any_on>
   103e2:	cmp	r0, #0
   103e4:	bne.n	10458 <__gethex+0x248>
   103e6:	mov.w	fp, #2
   103ea:	mov	r1, r8
   103ec:	mov	r0, r4
   103ee:	bl	10140 <rshift>
   103f2:	add	r6, r8
   103f4:	ldr	r3, [r7, #8]
   103f6:	cmp	r3, r6
   103f8:	bge.n	1047e <__gethex+0x26e>
   103fa:	mov	r1, r4
   103fc:	mov	r0, r9
   103fe:	bl	10894 <_Bfree>
   10402:	ldr	r2, [sp, #56]	; 0x38
   10404:	movs	r3, #0
   10406:	str	r3, [r2, #0]
   10408:	mov.w	r8, #163	; 0xa3
   1040c:	b.n	10324 <__gethex+0x114>
   1040e:	ldrb.w	r2, [r5, #-1]!
   10412:	cmp	r2, #46	; 0x2e
   10414:	beq.n	10440 <__gethex+0x230>
   10416:	cmp	r3, #32
   10418:	bne.n	10428 <__gethex+0x218>
   1041a:	ldr	r3, [sp, #4]
   1041c:	str.w	fp, [r3], #4
   10420:	mov.w	fp, #0
   10424:	str	r3, [sp, #4]
   10426:	mov	r3, fp
   10428:	ldrb	r0, [r5, #0]
   1042a:	str	r3, [sp, #12]
   1042c:	bl	101e4 <__hexdig_fun>
   10430:	ldr	r3, [sp, #12]
   10432:	and.w	r0, r0, #15
   10436:	lsls	r0, r3
   10438:	orr.w	fp, fp, r0
   1043c:	adds	r3, #4
   1043e:	b.n	10384 <__gethex+0x174>
   10440:	cmp	r8, r5
   10442:	bhi.n	10416 <__gethex+0x206>
   10444:	movs	r2, #1
   10446:	mov	r0, r5
   10448:	str	r3, [sp, #12]
   1044a:	bl	f2a4 <strncmp>
   1044e:	ldr	r1, [pc, #152]	; (104e8 <__gethex+0x2d8>)
   10450:	ldr	r3, [sp, #12]
   10452:	cmp	r0, #0
   10454:	bne.n	10416 <__gethex+0x206>
   10456:	b.n	10384 <__gethex+0x174>
   10458:	mov.w	fp, #3
   1045c:	b.n	103ea <__gethex+0x1da>
   1045e:	bge.n	10478 <__gethex+0x268>
   10460:	sub.w	r8, r5, r0
   10464:	mov	r1, r4
   10466:	mov	r2, r8
   10468:	mov	r0, r9
   1046a:	bl	10cc8 <__lshift>
   1046e:	sub.w	r6, r6, r8
   10472:	mov	r4, r0
   10474:	add.w	sl, r0, #20
   10478:	mov.w	fp, #0
   1047c:	b.n	103f4 <__gethex+0x1e4>
   1047e:	ldr	r3, [r7, #4]
   10480:	cmp	r3, r6
   10482:	ble.n	1056c <__gethex+0x35c>
   10484:	subs	r6, r3, r6
   10486:	cmp	r5, r6
   10488:	bgt.n	104f4 <__gethex+0x2e4>
   1048a:	ldr	r3, [r7, #12]
   1048c:	cmp	r3, #2
   1048e:	beq.n	104d8 <__gethex+0x2c8>
   10490:	cmp	r3, #3
   10492:	beq.n	104e0 <__gethex+0x2d0>
   10494:	cmp	r3, #1
   10496:	bne.n	104c4 <__gethex+0x2b4>
   10498:	cmp	r5, r6
   1049a:	bne.n	104c4 <__gethex+0x2b4>
   1049c:	cmp	r5, #1
   1049e:	bne.n	104b8 <__gethex+0x2a8>
   104a0:	ldr	r2, [sp, #8]
   104a2:	ldr	r3, [r7, #4]
   104a4:	str	r3, [r2, #0]
   104a6:	movs	r3, #1
   104a8:	str	r3, [r4, #16]
   104aa:	str.w	r3, [sl]
   104ae:	ldr	r3, [sp, #56]	; 0x38
   104b0:	mov.w	r8, #98	; 0x62
   104b4:	str	r4, [r3, #0]
   104b6:	b.n	10324 <__gethex+0x114>
   104b8:	subs	r1, r5, #1
   104ba:	mov	r0, r4
   104bc:	bl	11126 <__any_on>
   104c0:	cmp	r0, #0
   104c2:	bne.n	104a0 <__gethex+0x290>
   104c4:	mov	r1, r4
   104c6:	mov	r0, r9
   104c8:	bl	10894 <_Bfree>
   104cc:	ldr	r2, [sp, #56]	; 0x38
   104ce:	movs	r3, #0
   104d0:	str	r3, [r2, #0]
   104d2:	mov.w	r8, #80	; 0x50
   104d6:	b.n	10324 <__gethex+0x114>
   104d8:	ldr	r3, [sp, #60]	; 0x3c
   104da:	cmp	r3, #0
   104dc:	bne.n	104c4 <__gethex+0x2b4>
   104de:	b.n	104a0 <__gethex+0x290>
   104e0:	ldr	r3, [sp, #60]	; 0x3c
   104e2:	cmp	r3, #0
   104e4:	bne.n	104a0 <__gethex+0x290>
   104e6:	b.n	104c4 <__gethex+0x2b4>
   104e8:	.word	0x20001638
   104ec:	.word	0x2000131a
   104f0:	.word	0x2000113b
   104f4:	add.w	r8, r6, #4294967295
   104f8:	cmp.w	fp, #0
   104fc:	bne.n	10566 <__gethex+0x356>
   104fe:	cmp.w	r8, #0
   10502:	beq.n	1050e <__gethex+0x2fe>
   10504:	mov	r1, r8
   10506:	mov	r0, r4
   10508:	bl	11126 <__any_on>
   1050c:	mov	fp, r0
   1050e:	mov.w	r2, r8, asr #5
   10512:	movs	r3, #1
   10514:	ldr.w	r2, [sl, r2, lsl #2]
   10518:	and.w	r8, r8, #31
   1051c:	lsl.w	r3, r3, r8
   10520:	tst	r3, r2
   10522:	mov	r1, r6
   10524:	mov	r0, r4
   10526:	it	ne
   10528:	orrne.w	fp, fp, #2
   1052c:	subs	r5, r5, r6
   1052e:	bl	10140 <rshift>
   10532:	ldr	r6, [r7, #4]
   10534:	mov.w	r8, #2
   10538:	cmp.w	fp, #0
   1053c:	beq.n	105d4 <__gethex+0x3c4>
   1053e:	ldr	r3, [r7, #12]
   10540:	cmp	r3, #2
   10542:	beq.n	10572 <__gethex+0x362>
   10544:	cmp	r3, #3
   10546:	beq.n	1057a <__gethex+0x36a>
   10548:	cmp	r3, #1
   1054a:	bne.n	10560 <__gethex+0x350>
   1054c:	tst.w	fp, #2
   10550:	beq.n	10560 <__gethex+0x350>
   10552:	ldr.w	r3, [sl]
   10556:	orr.w	fp, fp, r3
   1055a:	tst.w	fp, #1
   1055e:	bne.n	10580 <__gethex+0x370>
   10560:	orr.w	r8, r8, #16
   10564:	b.n	105d4 <__gethex+0x3c4>
   10566:	mov.w	fp, #1
   1056a:	b.n	1050e <__gethex+0x2fe>
   1056c:	mov.w	r8, #1
   10570:	b.n	10538 <__gethex+0x328>
   10572:	ldr	r3, [sp, #60]	; 0x3c
   10574:	rsb	r3, r3, #1
   10578:	str	r3, [sp, #60]	; 0x3c
   1057a:	ldr	r3, [sp, #60]	; 0x3c
   1057c:	cmp	r3, #0
   1057e:	beq.n	10560 <__gethex+0x350>
   10580:	ldr.w	fp, [r4, #16]
   10584:	add.w	r2, r4, #20
   10588:	mov.w	r3, fp, lsl #2
   1058c:	str	r3, [sp, #4]
   1058e:	add.w	r0, r2, fp, lsl #2
   10592:	movs	r3, #0
   10594:	mov	ip, r2
   10596:	ldr.w	r1, [r2], #4
   1059a:	cmp.w	r1, #4294967295
   1059e:	beq.n	105de <__gethex+0x3ce>
   105a0:	adds	r1, #1
   105a2:	str.w	r1, [ip]
   105a6:	cmp.w	r8, #2
   105aa:	add.w	r2, r4, #20
   105ae:	bne.n	1062c <__gethex+0x41c>
   105b0:	ldr	r3, [r7, #0]
   105b2:	subs	r3, #1
   105b4:	cmp	r3, r5
   105b6:	bne.n	105d0 <__gethex+0x3c0>
   105b8:	asrs	r1, r5, #5
   105ba:	movs	r3, #1
   105bc:	and.w	r5, r5, #31
   105c0:	lsl.w	r5, r3, r5
   105c4:	ldr.w	r3, [r2, r1, lsl #2]
   105c8:	tst	r5, r3
   105ca:	it	ne
   105cc:	movne.w	r8, #1
   105d0:	orr.w	r8, r8, #32
   105d4:	ldr	r3, [sp, #56]	; 0x38
   105d6:	str	r4, [r3, #0]
   105d8:	ldr	r3, [sp, #8]
   105da:	str	r6, [r3, #0]
   105dc:	b.n	10324 <__gethex+0x114>
   105de:	cmp	r0, r2
   105e0:	str.w	r3, [r2, #-4]
   105e4:	bhi.n	10594 <__gethex+0x384>
   105e6:	ldr	r2, [r4, #8]
   105e8:	cmp	fp, r2
   105ea:	blt.n	1061c <__gethex+0x40c>
   105ec:	ldr	r1, [r4, #4]
   105ee:	mov	r0, r9
   105f0:	adds	r1, #1
   105f2:	bl	10814 <_Balloc>
   105f6:	mov	sl, r0
   105f8:	cbnz	r0, 10602 <__gethex+0x3f2>
   105fa:	ldr	r3, [pc, #108]	; (10668 <__gethex+0x458>)
   105fc:	mov	r2, r0
   105fe:	movs	r1, #132	; 0x84
   10600:	b.n	1036a <__gethex+0x15a>
   10602:	ldr	r2, [r4, #16]
   10604:	adds	r2, #2
   10606:	add.w	r1, r4, #12
   1060a:	lsls	r2, r2, #2
   1060c:	adds	r0, #12
   1060e:	bl	a8dc <memcpy>
   10612:	mov	r1, r4
   10614:	mov	r0, r9
   10616:	bl	10894 <_Bfree>
   1061a:	mov	r4, sl
   1061c:	ldr	r2, [r4, #16]
   1061e:	adds	r1, r2, #1
   10620:	add.w	r2, r4, r2, lsl #2
   10624:	str	r1, [r4, #16]
   10626:	movs	r1, #1
   10628:	str	r1, [r2, #20]
   1062a:	b.n	105a6 <__gethex+0x396>
   1062c:	ldr	r1, [r4, #16]
   1062e:	cmp	r1, fp
   10630:	ble.n	1064a <__gethex+0x43a>
   10632:	movs	r1, #1
   10634:	mov	r0, r4
   10636:	bl	10140 <rshift>
   1063a:	ldr	r3, [r7, #8]
   1063c:	adds	r6, #1
   1063e:	cmp	r3, r6
   10640:	blt.w	103fa <__gethex+0x1ea>
   10644:	mov.w	r8, #1
   10648:	b.n	105d0 <__gethex+0x3c0>
   1064a:	ands.w	r5, r5, #31
   1064e:	beq.n	10644 <__gethex+0x434>
   10650:	ldr	r3, [sp, #4]
   10652:	add	r2, r3
   10654:	rsb	r5, r5, #32
   10658:	ldr.w	r0, [r2, #-4]
   1065c:	bl	109f8 <__hi0bits>
   10660:	cmp	r0, r5
   10662:	blt.n	10632 <__gethex+0x422>
   10664:	b.n	10644 <__gethex+0x434>
   10666:	nop
   10668:	.word	0x2000131a

0001066c <L_shift>:
   1066c:	rsb	r2, r2, #8
   10670:	lsls	r2, r2, #2
   10672:	push	{r4, r5, r6, lr}
   10674:	rsb	r6, r2, #32
   10678:	ldr	r3, [r0, #4]
   1067a:	ldr	r4, [r0, #0]
   1067c:	lsl.w	r5, r3, r6
   10680:	orrs	r4, r5
   10682:	lsrs	r3, r2
   10684:	str	r4, [r0, #0]
   10686:	str.w	r3, [r0, #4]!
   1068a:	cmp	r0, r1
   1068c:	bcc.n	10678 <L_shift+0xc>
   1068e:	pop	{r4, r5, r6, pc}

00010690 <__match>:
   10690:	push	{r4, r5, lr}
   10692:	ldr	r3, [r0, #0]
   10694:	adds	r3, #1
   10696:	ldrb.w	r4, [r1], #1
   1069a:	cbnz	r4, 106a2 <__match+0x12>
   1069c:	str	r3, [r0, #0]
   1069e:	movs	r0, #1
   106a0:	pop	{r4, r5, pc}
   106a2:	ldrb.w	r2, [r3], #1
   106a6:	sub.w	r5, r2, #65	; 0x41
   106aa:	cmp	r5, #25
   106ac:	it	ls
   106ae:	addls	r2, #32
   106b0:	cmp	r2, r4
   106b2:	beq.n	10696 <__match+0x6>
   106b4:	movs	r0, #0
   106b6:	b.n	106a0 <__match+0x10>

000106b8 <__hexnan>:
   106b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106bc:	ldr	r3, [r1, #0]
   106be:	ldr	r1, [r0, #0]
   106c0:	asrs	r6, r3, #5
   106c2:	add.w	r6, r2, r6, lsl #2
   106c6:	ands.w	r3, r3, #31
   106ca:	sub	sp, #28
   106cc:	it	ne
   106ce:	addne	r6, #4
   106d0:	movs	r5, #0
   106d2:	subs	r7, r6, #4
   106d4:	mov	sl, r0
   106d6:	mov	r8, r2
   106d8:	str	r3, [sp, #4]
   106da:	str.w	r5, [r6, #-4]
   106de:	mov	r9, r7
   106e0:	mov	r4, r7
   106e2:	str	r5, [sp, #8]
   106e4:	mov	fp, r5
   106e6:	ldrb	r2, [r1, #1]
   106e8:	adds	r3, r1, #1
   106ea:	str	r3, [sp, #12]
   106ec:	cbz	r2, 10740 <__hexnan+0x88>
   106ee:	mov	r0, r2
   106f0:	str	r1, [sp, #20]
   106f2:	str	r2, [sp, #16]
   106f4:	bl	101e4 <__hexdig_fun>
   106f8:	cmp	r0, #0
   106fa:	bne.n	1079c <__hexnan+0xe4>
   106fc:	ldr	r2, [sp, #16]
   106fe:	ldr	r1, [sp, #20]
   10700:	cmp	r2, #32
   10702:	bhi.n	10736 <__hexnan+0x7e>
   10704:	ldr	r3, [sp, #8]
   10706:	cmp	fp, r3
   10708:	ble.n	10732 <__hexnan+0x7a>
   1070a:	cmp	r4, r9
   1070c:	bcs.n	1071c <__hexnan+0x64>
   1070e:	cmp	r5, #7
   10710:	bgt.n	1071c <__hexnan+0x64>
   10712:	mov	r2, r5
   10714:	mov	r1, r9
   10716:	mov	r0, r4
   10718:	bl	1066c <L_shift>
   1071c:	cmp	r4, r8
   1071e:	bls.n	107c2 <__hexnan+0x10a>
   10720:	movs	r3, #0
   10722:	sub.w	r9, r4, #4
   10726:	str.w	r3, [r4, #-4]
   1072a:	str.w	fp, [sp, #8]
   1072e:	mov	r4, r9
   10730:	mov	r5, r3
   10732:	ldr	r1, [sp, #12]
   10734:	b.n	106e6 <__hexnan+0x2e>
   10736:	cmp	r2, #41	; 0x29
   10738:	bne.n	107e6 <__hexnan+0x12e>
   1073a:	adds	r1, #2
   1073c:	str.w	r1, [sl]
   10740:	cmp.w	fp, #0
   10744:	beq.n	107e6 <__hexnan+0x12e>
   10746:	cmp	r4, r9
   10748:	bcs.n	10758 <__hexnan+0xa0>
   1074a:	cmp	r5, #7
   1074c:	bgt.n	10758 <__hexnan+0xa0>
   1074e:	mov	r2, r5
   10750:	mov	r1, r9
   10752:	mov	r0, r4
   10754:	bl	1066c <L_shift>
   10758:	cmp	r4, r8
   1075a:	bls.n	107c6 <__hexnan+0x10e>
   1075c:	sub.w	r2, r8, #4
   10760:	mov	r3, r4
   10762:	ldr.w	r1, [r3], #4
   10766:	str.w	r1, [r2, #4]!
   1076a:	cmp	r7, r3
   1076c:	bcs.n	10762 <__hexnan+0xaa>
   1076e:	subs	r3, r7, r4
   10770:	bic.w	r3, r3, #3
   10774:	adds	r3, #4
   10776:	subs	r6, #3
   10778:	adds	r4, #1
   1077a:	cmp	r6, r4
   1077c:	it	cc
   1077e:	movcc	r3, #4
   10780:	add	r3, r8
   10782:	movs	r2, #0
   10784:	str.w	r2, [r3], #4
   10788:	cmp	r7, r3
   1078a:	bcs.n	10784 <__hexnan+0xcc>
   1078c:	ldr	r3, [r7, #0]
   1078e:	cbnz	r3, 10798 <__hexnan+0xe0>
   10790:	cmp	r7, r8
   10792:	bne.n	107e2 <__hexnan+0x12a>
   10794:	movs	r3, #1
   10796:	str	r3, [r7, #0]
   10798:	movs	r0, #5
   1079a:	b.n	107e8 <__hexnan+0x130>
   1079c:	adds	r5, #1
   1079e:	cmp	r5, #8
   107a0:	add.w	fp, fp, #1
   107a4:	ble.n	107b4 <__hexnan+0xfc>
   107a6:	cmp	r4, r8
   107a8:	bls.n	10732 <__hexnan+0x7a>
   107aa:	movs	r3, #0
   107ac:	str.w	r3, [r4, #-4]
   107b0:	movs	r5, #1
   107b2:	subs	r4, #4
   107b4:	ldr	r2, [r4, #0]
   107b6:	and.w	r0, r0, #15
   107ba:	orr.w	r0, r0, r2, lsl #4
   107be:	str	r0, [r4, #0]
   107c0:	b.n	10732 <__hexnan+0x7a>
   107c2:	movs	r5, #8
   107c4:	b.n	10732 <__hexnan+0x7a>
   107c6:	ldr	r3, [sp, #4]
   107c8:	cmp	r3, #0
   107ca:	beq.n	1078c <__hexnan+0xd4>
   107cc:	rsb	r3, r3, #32
   107d0:	mov.w	r2, #4294967295
   107d4:	lsrs	r2, r3
   107d6:	ldr.w	r3, [r6, #-4]
   107da:	ands	r3, r2
   107dc:	str.w	r3, [r6, #-4]
   107e0:	b.n	1078c <__hexnan+0xd4>
   107e2:	subs	r7, #4
   107e4:	b.n	1078c <__hexnan+0xd4>
   107e6:	movs	r0, #4
   107e8:	add	sp, #28
   107ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000107ee <__ascii_mbtowc>:
   107ee:	sub	sp, #8
   107f0:	cbnz	r1, 107f4 <__ascii_mbtowc+0x6>
   107f2:	add	r1, sp, #4
   107f4:	cbz	r2, 10808 <__ascii_mbtowc+0x1a>
   107f6:	cbz	r3, 1080c <__ascii_mbtowc+0x1e>
   107f8:	ldrb	r3, [r2, #0]
   107fa:	str	r3, [r1, #0]
   107fc:	ldrb	r2, [r2, #0]
   107fe:	subs	r0, r2, #0
   10800:	it	ne
   10802:	movne	r0, #1
   10804:	add	sp, #8
   10806:	bx	lr
   10808:	mov	r0, r2
   1080a:	b.n	10804 <__ascii_mbtowc+0x16>
   1080c:	mvn.w	r0, #1
   10810:	b.n	10804 <__ascii_mbtowc+0x16>
	...

00010814 <_Balloc>:
   10814:	push	{r4, r5, r6, lr}
   10816:	ldr	r6, [r0, #28]
   10818:	mov	r4, r0
   1081a:	mov	r5, r1
   1081c:	cbnz	r6, 1083c <_Balloc+0x28>
   1081e:	movs	r0, #16
   10820:	bl	d310 <malloc>
   10824:	mov	r2, r0
   10826:	str	r0, [r4, #28]
   10828:	cbnz	r0, 10834 <_Balloc+0x20>
   1082a:	ldr	r3, [pc, #96]	; (1088c <_Balloc+0x78>)
   1082c:	ldr	r0, [pc, #96]	; (10890 <_Balloc+0x7c>)
   1082e:	movs	r1, #107	; 0x6b
   10830:	bl	11d5c <__assert_func>
   10834:	strd	r6, r6, [r0, #4]
   10838:	str	r6, [r0, #0]
   1083a:	str	r6, [r0, #12]
   1083c:	ldr	r6, [r4, #28]
   1083e:	ldr	r3, [r6, #12]
   10840:	cbz	r3, 10864 <_Balloc+0x50>
   10842:	ldr	r3, [r4, #28]
   10844:	ldr	r3, [r3, #12]
   10846:	ldr.w	r0, [r3, r5, lsl #2]
   1084a:	cbnz	r0, 1087c <_Balloc+0x68>
   1084c:	movs	r1, #1
   1084e:	lsl.w	r6, r1, r5
   10852:	adds	r2, r6, #5
   10854:	lsls	r2, r2, #2
   10856:	mov	r0, r4
   10858:	bl	11d98 <_calloc_r>
   1085c:	cbz	r0, 10878 <_Balloc+0x64>
   1085e:	strd	r5, r6, [r0, #4]
   10862:	b.n	10882 <_Balloc+0x6e>
   10864:	movs	r2, #33	; 0x21
   10866:	movs	r1, #4
   10868:	mov	r0, r4
   1086a:	bl	11d98 <_calloc_r>
   1086e:	ldr	r3, [r4, #28]
   10870:	str	r0, [r6, #12]
   10872:	ldr	r3, [r3, #12]
   10874:	cmp	r3, #0
   10876:	bne.n	10842 <_Balloc+0x2e>
   10878:	movs	r0, #0
   1087a:	pop	{r4, r5, r6, pc}
   1087c:	ldr	r2, [r0, #0]
   1087e:	str.w	r2, [r3, r5, lsl #2]
   10882:	movs	r3, #0
   10884:	strd	r3, r3, [r0, #12]
   10888:	b.n	1087a <_Balloc+0x66>
   1088a:	nop
   1088c:	.word	0x200012aa
   10890:	.word	0x20000c0c

00010894 <_Bfree>:
   10894:	push	{r4, r5, r6, lr}
   10896:	ldr	r6, [r0, #28]
   10898:	mov	r5, r0
   1089a:	mov	r4, r1
   1089c:	cbnz	r6, 108bc <_Bfree+0x28>
   1089e:	movs	r0, #16
   108a0:	bl	d310 <malloc>
   108a4:	mov	r2, r0
   108a6:	str	r0, [r5, #28]
   108a8:	cbnz	r0, 108b4 <_Bfree+0x20>
   108aa:	ldr	r3, [pc, #36]	; (108d0 <_Bfree+0x3c>)
   108ac:	ldr	r0, [pc, #36]	; (108d4 <_Bfree+0x40>)
   108ae:	movs	r1, #143	; 0x8f
   108b0:	bl	11d5c <__assert_func>
   108b4:	strd	r6, r6, [r0, #4]
   108b8:	str	r6, [r0, #0]
   108ba:	str	r6, [r0, #12]
   108bc:	cbz	r4, 108ce <_Bfree+0x3a>
   108be:	ldr	r3, [r5, #28]
   108c0:	ldr	r2, [r4, #4]
   108c2:	ldr	r3, [r3, #12]
   108c4:	ldr.w	r1, [r3, r2, lsl #2]
   108c8:	str	r1, [r4, #0]
   108ca:	str.w	r4, [r3, r2, lsl #2]
   108ce:	pop	{r4, r5, r6, pc}
   108d0:	.word	0x200012aa
   108d4:	.word	0x20000c0c

000108d8 <__multadd>:
   108d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   108dc:	ldr	r5, [r1, #16]
   108de:	mov	r7, r0
   108e0:	mov	r4, r1
   108e2:	mov	r6, r3
   108e4:	add.w	ip, r1, #20
   108e8:	movs	r0, #0
   108ea:	ldr.w	r3, [ip]
   108ee:	uxth	r1, r3
   108f0:	mla	r1, r2, r1, r6
   108f4:	lsrs	r6, r3, #16
   108f6:	lsrs	r3, r1, #16
   108f8:	mla	r3, r2, r6, r3
   108fc:	uxth	r1, r1
   108fe:	adds	r0, #1
   10900:	add.w	r1, r1, r3, lsl #16
   10904:	cmp	r5, r0
   10906:	str.w	r1, [ip], #4
   1090a:	mov.w	r6, r3, lsr #16
   1090e:	bgt.n	108ea <__multadd+0x12>
   10910:	cbz	r6, 10956 <__multadd+0x7e>
   10912:	ldr	r3, [r4, #8]
   10914:	cmp	r3, r5
   10916:	bgt.n	1094c <__multadd+0x74>
   10918:	ldr	r1, [r4, #4]
   1091a:	mov	r0, r7
   1091c:	adds	r1, #1
   1091e:	bl	10814 <_Balloc>
   10922:	mov	r8, r0
   10924:	cbnz	r0, 10932 <__multadd+0x5a>
   10926:	mov	r2, r0
   10928:	ldr	r3, [pc, #48]	; (1095c <__multadd+0x84>)
   1092a:	ldr	r0, [pc, #52]	; (10960 <__multadd+0x88>)
   1092c:	movs	r1, #186	; 0xba
   1092e:	bl	11d5c <__assert_func>
   10932:	ldr	r2, [r4, #16]
   10934:	adds	r2, #2
   10936:	add.w	r1, r4, #12
   1093a:	lsls	r2, r2, #2
   1093c:	adds	r0, #12
   1093e:	bl	a8dc <memcpy>
   10942:	mov	r1, r4
   10944:	mov	r0, r7
   10946:	bl	10894 <_Bfree>
   1094a:	mov	r4, r8
   1094c:	add.w	r3, r4, r5, lsl #2
   10950:	adds	r5, #1
   10952:	str	r6, [r3, #20]
   10954:	str	r5, [r4, #16]
   10956:	mov	r0, r4
   10958:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1095c:	.word	0x2000131a
   10960:	.word	0x20000c0c

00010964 <__s2b>:
   10964:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10968:	mov	r4, r1
   1096a:	mov	r5, r2
   1096c:	mov	r7, r3
   1096e:	movs	r2, #9
   10970:	adds	r3, #8
   10972:	mov	r6, r0
   10974:	sdiv	r3, r3, r2
   10978:	movs	r1, #0
   1097a:	movs	r2, #1
   1097c:	cmp	r2, r3
   1097e:	blt.n	10994 <__s2b+0x30>
   10980:	mov	r0, r6
   10982:	bl	10814 <_Balloc>
   10986:	cbnz	r0, 1099a <__s2b+0x36>
   10988:	mov	r2, r0
   1098a:	ldr	r3, [pc, #100]	; (109f0 <__s2b+0x8c>)
   1098c:	ldr	r0, [pc, #100]	; (109f4 <__s2b+0x90>)
   1098e:	movs	r1, #211	; 0xd3
   10990:	bl	11d5c <__assert_func>
   10994:	lsls	r2, r2, #1
   10996:	adds	r1, #1
   10998:	b.n	1097c <__s2b+0x18>
   1099a:	ldr	r3, [sp, #32]
   1099c:	str	r3, [r0, #20]
   1099e:	cmp	r5, #9
   109a0:	mov.w	r3, #1
   109a4:	str	r3, [r0, #16]
   109a6:	ble.n	109d6 <__s2b+0x72>
   109a8:	add.w	r9, r4, #9
   109ac:	mov	r8, r9
   109ae:	add	r4, r5
   109b0:	ldrb.w	r3, [r8], #1
   109b4:	mov	r1, r0
   109b6:	subs	r3, #48	; 0x30
   109b8:	movs	r2, #10
   109ba:	mov	r0, r6
   109bc:	bl	108d8 <__multadd>
   109c0:	cmp	r8, r4
   109c2:	bne.n	109b0 <__s2b+0x4c>
   109c4:	sub.w	r4, r5, #8
   109c8:	add	r4, r9
   109ca:	subs	r5, r5, r4
   109cc:	adds	r3, r4, r5
   109ce:	cmp	r3, r7
   109d0:	blt.n	109dc <__s2b+0x78>
   109d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   109d6:	adds	r4, #10
   109d8:	movs	r5, #9
   109da:	b.n	109ca <__s2b+0x66>
   109dc:	ldrb.w	r3, [r4], #1
   109e0:	mov	r1, r0
   109e2:	subs	r3, #48	; 0x30
   109e4:	movs	r2, #10
   109e6:	mov	r0, r6
   109e8:	bl	108d8 <__multadd>
   109ec:	b.n	109cc <__s2b+0x68>
   109ee:	nop
   109f0:	.word	0x2000131a
   109f4:	.word	0x20000c0c

000109f8 <__hi0bits>:
   109f8:	lsrs	r3, r0, #16
   109fa:	lsls	r3, r3, #16
   109fc:	cbnz	r3, 10a34 <__hi0bits+0x3c>
   109fe:	lsls	r0, r0, #16
   10a00:	movs	r3, #16
   10a02:	tst.w	r0, #4278190080	; 0xff000000
   10a06:	itt	eq
   10a08:	lsleq	r0, r0, #8
   10a0a:	addeq	r3, #8
   10a0c:	tst.w	r0, #4026531840	; 0xf0000000
   10a10:	itt	eq
   10a12:	lsleq	r0, r0, #4
   10a14:	addeq	r3, #4
   10a16:	tst.w	r0, #3221225472	; 0xc0000000
   10a1a:	itt	eq
   10a1c:	lsleq	r0, r0, #2
   10a1e:	addeq	r3, #2
   10a20:	cmp	r0, #0
   10a22:	blt.n	10a30 <__hi0bits+0x38>
   10a24:	tst.w	r0, #1073741824	; 0x40000000
   10a28:	add.w	r3, r3, #1
   10a2c:	it	eq
   10a2e:	moveq	r3, #32
   10a30:	mov	r0, r3
   10a32:	bx	lr
   10a34:	movs	r3, #0
   10a36:	b.n	10a02 <__hi0bits+0xa>

00010a38 <__lo0bits>:
   10a38:	ldr	r3, [r0, #0]
   10a3a:	ands.w	r2, r3, #7
   10a3e:	beq.n	10a5a <__lo0bits+0x22>
   10a40:	lsls	r1, r3, #31
   10a42:	bmi.n	10a8a <__lo0bits+0x52>
   10a44:	lsls	r2, r3, #30
   10a46:	itett	mi
   10a48:	lsrmi	r3, r3, #1
   10a4a:	lsrpl	r3, r3, #2
   10a4c:	strmi	r3, [r0, #0]
   10a4e:	movmi	r2, #1
   10a50:	itt	pl
   10a52:	strpl	r3, [r0, #0]
   10a54:	movpl	r2, #2
   10a56:	mov	r0, r2
   10a58:	bx	lr
   10a5a:	uxth	r1, r3
   10a5c:	cbnz	r1, 10a62 <__lo0bits+0x2a>
   10a5e:	lsrs	r3, r3, #16
   10a60:	movs	r2, #16
   10a62:	uxtb	r1, r3
   10a64:	cbnz	r1, 10a6a <__lo0bits+0x32>
   10a66:	adds	r2, #8
   10a68:	lsrs	r3, r3, #8
   10a6a:	lsls	r1, r3, #28
   10a6c:	itt	eq
   10a6e:	lsreq	r3, r3, #4
   10a70:	addeq	r2, #4
   10a72:	lsls	r1, r3, #30
   10a74:	itt	eq
   10a76:	lsreq	r3, r3, #2
   10a78:	addeq	r2, #2
   10a7a:	lsls	r1, r3, #31
   10a7c:	bmi.n	10a86 <__lo0bits+0x4e>
   10a7e:	lsrs	r3, r3, #1
   10a80:	add.w	r2, r2, #1
   10a84:	beq.n	10a8e <__lo0bits+0x56>
   10a86:	str	r3, [r0, #0]
   10a88:	b.n	10a56 <__lo0bits+0x1e>
   10a8a:	movs	r2, #0
   10a8c:	b.n	10a56 <__lo0bits+0x1e>
   10a8e:	movs	r2, #32
   10a90:	b.n	10a56 <__lo0bits+0x1e>
	...

00010a94 <__i2b>:
   10a94:	push	{r4, lr}
   10a96:	mov	r4, r1
   10a98:	movs	r1, #1
   10a9a:	bl	10814 <_Balloc>
   10a9e:	mov	r2, r0
   10aa0:	cbnz	r0, 10aae <__i2b+0x1a>
   10aa2:	ldr	r3, [pc, #20]	; (10ab8 <__i2b+0x24>)
   10aa4:	ldr	r0, [pc, #20]	; (10abc <__i2b+0x28>)
   10aa6:	movw	r1, #325	; 0x145
   10aaa:	bl	11d5c <__assert_func>
   10aae:	movs	r3, #1
   10ab0:	str	r4, [r0, #20]
   10ab2:	str	r3, [r0, #16]
   10ab4:	pop	{r4, pc}
   10ab6:	nop
   10ab8:	.word	0x2000131a
   10abc:	.word	0x20000c0c

00010ac0 <__multiply>:
   10ac0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ac4:	mov	r9, r2
   10ac6:	ldr	r2, [r1, #16]
   10ac8:	ldr.w	r3, [r9, #16]
   10acc:	cmp	r2, r3
   10ace:	it	lt
   10ad0:	movlt	r3, r1
   10ad2:	mov	r4, r1
   10ad4:	itt	lt
   10ad6:	movlt	r4, r9
   10ad8:	movlt	r9, r3
   10ada:	ldr	r7, [r4, #16]
   10adc:	ldr.w	sl, [r9, #16]
   10ae0:	ldr	r3, [r4, #8]
   10ae2:	ldr	r1, [r4, #4]
   10ae4:	add.w	r6, r7, sl
   10ae8:	cmp	r3, r6
   10aea:	sub	sp, #20
   10aec:	it	lt
   10aee:	addlt	r1, #1
   10af0:	bl	10814 <_Balloc>
   10af4:	cbnz	r0, 10b04 <__multiply+0x44>
   10af6:	mov	r2, r0
   10af8:	ldr	r3, [pc, #272]	; (10c0c <__multiply+0x14c>)
   10afa:	ldr	r0, [pc, #276]	; (10c10 <__multiply+0x150>)
   10afc:	mov.w	r1, #354	; 0x162
   10b00:	bl	11d5c <__assert_func>
   10b04:	add.w	r5, r0, #20
   10b08:	add.w	r8, r5, r6, lsl #2
   10b0c:	mov	r3, r5
   10b0e:	movs	r2, #0
   10b10:	cmp	r3, r8
   10b12:	bcc.n	10b58 <__multiply+0x98>
   10b14:	add.w	r3, r4, #20
   10b18:	add.w	r7, r3, r7, lsl #2
   10b1c:	add.w	r3, r9, #20
   10b20:	add.w	r2, r3, sl, lsl #2
   10b24:	str	r2, [sp, #8]
   10b26:	subs	r2, r7, r4
   10b28:	subs	r2, #21
   10b2a:	bic.w	r2, r2, #3
   10b2e:	adds	r2, #4
   10b30:	add.w	r1, r4, #21
   10b34:	cmp	r7, r1
   10b36:	it	cc
   10b38:	movcc	r2, #4
   10b3a:	str	r2, [sp, #4]
   10b3c:	ldr	r2, [sp, #8]
   10b3e:	str	r3, [sp, #12]
   10b40:	cmp	r2, r3
   10b42:	bhi.n	10b5e <__multiply+0x9e>
   10b44:	cmp	r6, #0
   10b46:	ble.n	10b50 <__multiply+0x90>
   10b48:	ldr.w	r3, [r8, #-4]!
   10b4c:	cmp	r3, #0
   10b4e:	beq.n	10c08 <__multiply+0x148>
   10b50:	str	r6, [r0, #16]
   10b52:	add	sp, #20
   10b54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b58:	str.w	r2, [r3], #4
   10b5c:	b.n	10b10 <__multiply+0x50>
   10b5e:	ldrh.w	sl, [r3]
   10b62:	cmp.w	sl, #0
   10b66:	beq.n	10bb2 <__multiply+0xf2>
   10b68:	add.w	lr, r4, #20
   10b6c:	mov	r9, r5
   10b6e:	mov.w	ip, #0
   10b72:	ldr.w	r2, [lr], #4
   10b76:	ldr.w	r1, [r9]
   10b7a:	uxth.w	fp, r2
   10b7e:	uxth	r1, r1
   10b80:	mla	r1, sl, fp, r1
   10b84:	mov.w	fp, r2, lsr #16
   10b88:	ldr.w	r2, [r9]
   10b8c:	add	r1, ip
   10b8e:	mov.w	ip, r2, lsr #16
   10b92:	mla	r2, sl, fp, ip
   10b96:	add.w	r2, r2, r1, lsr #16
   10b9a:	uxth	r1, r1
   10b9c:	orr.w	r1, r1, r2, lsl #16
   10ba0:	cmp	r7, lr
   10ba2:	str.w	r1, [r9], #4
   10ba6:	mov.w	ip, r2, lsr #16
   10baa:	bhi.n	10b72 <__multiply+0xb2>
   10bac:	ldr	r2, [sp, #4]
   10bae:	str.w	ip, [r5, r2]
   10bb2:	ldr	r2, [sp, #12]
   10bb4:	ldrh.w	r9, [r2, #2]
   10bb8:	adds	r3, #4
   10bba:	cmp.w	r9, #0
   10bbe:	beq.n	10c04 <__multiply+0x144>
   10bc0:	ldr	r1, [r5, #0]
   10bc2:	add.w	ip, r4, #20
   10bc6:	mov	lr, r5
   10bc8:	mov.w	sl, #0
   10bcc:	ldrh.w	fp, [ip]
   10bd0:	ldrh.w	r2, [lr, #2]
   10bd4:	mla	r2, r9, fp, r2
   10bd8:	add	r2, sl
   10bda:	uxth	r1, r1
   10bdc:	orr.w	r1, r1, r2, lsl #16
   10be0:	str.w	r1, [lr], #4
   10be4:	ldr.w	r1, [ip], #4
   10be8:	mov.w	sl, r1, lsr #16
   10bec:	ldrh.w	r1, [lr]
   10bf0:	mla	r1, r9, sl, r1
   10bf4:	add.w	r1, r1, r2, lsr #16
   10bf8:	cmp	r7, ip
   10bfa:	mov.w	sl, r1, lsr #16
   10bfe:	bhi.n	10bcc <__multiply+0x10c>
   10c00:	ldr	r2, [sp, #4]
   10c02:	str	r1, [r5, r2]
   10c04:	adds	r5, #4
   10c06:	b.n	10b3c <__multiply+0x7c>
   10c08:	subs	r6, #1
   10c0a:	b.n	10b44 <__multiply+0x84>
   10c0c:	.word	0x2000131a
   10c10:	.word	0x20000c0c

00010c14 <__pow5mult>:
   10c14:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c18:	mov	r5, r2
   10c1a:	ands.w	r2, r2, #3
   10c1e:	mov	r6, r0
   10c20:	mov	r7, r1
   10c22:	beq.n	10c34 <__pow5mult+0x20>
   10c24:	ldr	r4, [pc, #148]	; (10cbc <__pow5mult+0xa8>)
   10c26:	subs	r2, #1
   10c28:	movs	r3, #0
   10c2a:	ldr.w	r2, [r4, r2, lsl #2]
   10c2e:	bl	108d8 <__multadd>
   10c32:	mov	r7, r0
   10c34:	asrs	r5, r5, #2
   10c36:	beq.n	10cb4 <__pow5mult+0xa0>
   10c38:	ldr	r4, [r6, #28]
   10c3a:	cbnz	r4, 10c5c <__pow5mult+0x48>
   10c3c:	movs	r0, #16
   10c3e:	bl	d310 <malloc>
   10c42:	mov	r2, r0
   10c44:	str	r0, [r6, #28]
   10c46:	cbnz	r0, 10c54 <__pow5mult+0x40>
   10c48:	ldr	r3, [pc, #116]	; (10cc0 <__pow5mult+0xac>)
   10c4a:	ldr	r0, [pc, #120]	; (10cc4 <__pow5mult+0xb0>)
   10c4c:	movw	r1, #435	; 0x1b3
   10c50:	bl	11d5c <__assert_func>
   10c54:	strd	r4, r4, [r0, #4]
   10c58:	str	r4, [r0, #0]
   10c5a:	str	r4, [r0, #12]
   10c5c:	ldr.w	r8, [r6, #28]
   10c60:	ldr.w	r4, [r8, #8]
   10c64:	cbnz	r4, 10c7a <__pow5mult+0x66>
   10c66:	movw	r1, #625	; 0x271
   10c6a:	mov	r0, r6
   10c6c:	bl	10a94 <__i2b>
   10c70:	movs	r3, #0
   10c72:	str.w	r0, [r8, #8]
   10c76:	mov	r4, r0
   10c78:	str	r3, [r0, #0]
   10c7a:	mov.w	r9, #0
   10c7e:	lsls	r3, r5, #31
   10c80:	bpl.n	10c98 <__pow5mult+0x84>
   10c82:	mov	r1, r7
   10c84:	mov	r2, r4
   10c86:	mov	r0, r6
   10c88:	bl	10ac0 <__multiply>
   10c8c:	mov	r1, r7
   10c8e:	mov	r8, r0
   10c90:	mov	r0, r6
   10c92:	bl	10894 <_Bfree>
   10c96:	mov	r7, r8
   10c98:	asrs	r5, r5, #1
   10c9a:	beq.n	10cb4 <__pow5mult+0xa0>
   10c9c:	ldr	r0, [r4, #0]
   10c9e:	cbnz	r0, 10cb0 <__pow5mult+0x9c>
   10ca0:	mov	r2, r4
   10ca2:	mov	r1, r4
   10ca4:	mov	r0, r6
   10ca6:	bl	10ac0 <__multiply>
   10caa:	str	r0, [r4, #0]
   10cac:	str.w	r9, [r0]
   10cb0:	mov	r4, r0
   10cb2:	b.n	10c7e <__pow5mult+0x6a>
   10cb4:	mov	r0, r7
   10cb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10cba:	nop
   10cbc:	.word	0x2000094c
   10cc0:	.word	0x200012aa
   10cc4:	.word	0x20000c0c

00010cc8 <__lshift>:
   10cc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ccc:	mov	r4, r1
   10cce:	ldr	r1, [r1, #4]
   10cd0:	ldr	r3, [r4, #16]
   10cd2:	add.w	r8, r3, r2, asr #5
   10cd6:	ldr	r3, [r4, #8]
   10cd8:	mov	r7, r0
   10cda:	mov	r9, r2
   10cdc:	mov.w	sl, r2, asr #5
   10ce0:	add.w	r6, r8, #1
   10ce4:	cmp	r3, r6
   10ce6:	blt.n	10d00 <__lshift+0x38>
   10ce8:	mov	r0, r7
   10cea:	bl	10814 <_Balloc>
   10cee:	mov	r5, r0
   10cf0:	cbnz	r0, 10d06 <__lshift+0x3e>
   10cf2:	mov	r2, r0
   10cf4:	ldr	r3, [pc, #160]	; (10d98 <__lshift+0xd0>)
   10cf6:	ldr	r0, [pc, #164]	; (10d9c <__lshift+0xd4>)
   10cf8:	mov.w	r1, #478	; 0x1de
   10cfc:	bl	11d5c <__assert_func>
   10d00:	adds	r1, #1
   10d02:	lsls	r3, r3, #1
   10d04:	b.n	10ce4 <__lshift+0x1c>
   10d06:	movs	r3, #0
   10d08:	add.w	r1, r0, #20
   10d0c:	add.w	r2, r0, #16
   10d10:	mov	r0, r3
   10d12:	cmp	r3, sl
   10d14:	blt.n	10d7e <__lshift+0xb6>
   10d16:	ldr	r0, [r4, #16]
   10d18:	bic.w	sl, sl, sl, asr #31
   10d1c:	add.w	r3, r4, #20
   10d20:	ands.w	r9, r9, #31
   10d24:	add.w	r1, r1, sl, lsl #2
   10d28:	add.w	ip, r3, r0, lsl #2
   10d2c:	beq.n	10d86 <__lshift+0xbe>
   10d2e:	rsb	lr, r9, #32
   10d32:	mov	sl, r1
   10d34:	movs	r2, #0
   10d36:	ldr	r0, [r3, #0]
   10d38:	lsl.w	r0, r0, r9
   10d3c:	orrs	r0, r2
   10d3e:	str.w	r0, [sl], #4
   10d42:	ldr.w	r2, [r3], #4
   10d46:	cmp	ip, r3
   10d48:	lsr.w	r2, r2, lr
   10d4c:	bhi.n	10d36 <__lshift+0x6e>
   10d4e:	sub.w	r3, ip, r4
   10d52:	subs	r3, #21
   10d54:	bic.w	r3, r3, #3
   10d58:	adds	r3, #4
   10d5a:	add.w	r0, r4, #21
   10d5e:	cmp	ip, r0
   10d60:	it	cc
   10d62:	movcc	r3, #4
   10d64:	str	r2, [r1, r3]
   10d66:	cbz	r2, 10d6c <__lshift+0xa4>
   10d68:	add.w	r6, r8, #2
   10d6c:	subs	r6, #1
   10d6e:	mov	r0, r7
   10d70:	str	r6, [r5, #16]
   10d72:	mov	r1, r4
   10d74:	bl	10894 <_Bfree>
   10d78:	mov	r0, r5
   10d7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d7e:	str.w	r0, [r2, #4]!
   10d82:	adds	r3, #1
   10d84:	b.n	10d12 <__lshift+0x4a>
   10d86:	subs	r1, #4
   10d88:	ldr.w	r2, [r3], #4
   10d8c:	str.w	r2, [r1, #4]!
   10d90:	cmp	ip, r3
   10d92:	bhi.n	10d88 <__lshift+0xc0>
   10d94:	b.n	10d6c <__lshift+0xa4>
   10d96:	nop
   10d98:	.word	0x2000131a
   10d9c:	.word	0x20000c0c

00010da0 <__mcmp>:
   10da0:	push	{r4, r5, lr}
   10da2:	ldr	r2, [r0, #16]
   10da4:	ldr	r4, [r1, #16]
   10da6:	subs	r2, r2, r4
   10da8:	bne.n	10dc8 <__mcmp+0x28>
   10daa:	add.w	r3, r0, #20
   10dae:	adds	r1, #20
   10db0:	add.w	r0, r3, r4, lsl #2
   10db4:	add.w	r1, r1, r4, lsl #2
   10db8:	ldr.w	r5, [r0, #-4]!
   10dbc:	ldr.w	r4, [r1, #-4]!
   10dc0:	cmp	r5, r4
   10dc2:	beq.n	10dcc <__mcmp+0x2c>
   10dc4:	bcc.n	10dd2 <__mcmp+0x32>
   10dc6:	movs	r2, #1
   10dc8:	mov	r0, r2
   10dca:	pop	{r4, r5, pc}
   10dcc:	cmp	r3, r0
   10dce:	bcc.n	10db8 <__mcmp+0x18>
   10dd0:	b.n	10dc8 <__mcmp+0x28>
   10dd2:	mov.w	r2, #4294967295
   10dd6:	b.n	10dc8 <__mcmp+0x28>

00010dd8 <__mdiff>:
   10dd8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ddc:	mov	r4, r1
   10dde:	mov	r6, r0
   10de0:	mov	r1, r2
   10de2:	mov	r0, r4
   10de4:	mov	r8, r2
   10de6:	bl	10da0 <__mcmp>
   10dea:	subs	r5, r0, #0
   10dec:	bne.n	10e10 <__mdiff+0x38>
   10dee:	mov	r1, r5
   10df0:	mov	r0, r6
   10df2:	bl	10814 <_Balloc>
   10df6:	cbnz	r0, 10e06 <__mdiff+0x2e>
   10df8:	ldr	r3, [pc, #232]	; (10ee4 <__mdiff+0x10c>)
   10dfa:	mov	r2, r0
   10dfc:	movw	r1, #567	; 0x237
   10e00:	ldr	r0, [pc, #228]	; (10ee8 <__mdiff+0x110>)
   10e02:	bl	11d5c <__assert_func>
   10e06:	movs	r3, #1
   10e08:	strd	r3, r5, [r0, #16]
   10e0c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e10:	itt	ge
   10e12:	movge	r3, r8
   10e14:	movge	r8, r4
   10e16:	mov	r0, r6
   10e18:	ldr.w	r1, [r8, #4]
   10e1c:	itte	ge
   10e1e:	movge	r4, r3
   10e20:	movge	r5, #0
   10e22:	movlt	r5, #1
   10e24:	bl	10814 <_Balloc>
   10e28:	cbnz	r0, 10e34 <__mdiff+0x5c>
   10e2a:	ldr	r3, [pc, #184]	; (10ee4 <__mdiff+0x10c>)
   10e2c:	mov	r2, r0
   10e2e:	movw	r1, #581	; 0x245
   10e32:	b.n	10e00 <__mdiff+0x28>
   10e34:	ldr.w	r7, [r8, #16]
   10e38:	ldr	r6, [r4, #16]
   10e3a:	str	r5, [r0, #12]
   10e3c:	add.w	r9, r4, #20
   10e40:	add.w	r5, r8, #20
   10e44:	add.w	lr, r0, #20
   10e48:	add.w	ip, r5, r7, lsl #2
   10e4c:	add.w	r6, r9, r6, lsl #2
   10e50:	add.w	r2, r8, #16
   10e54:	mov	sl, lr
   10e56:	movs	r1, #0
   10e58:	ldr.w	r3, [r9], #4
   10e5c:	ldr.w	fp, [r2, #4]!
   10e60:	uxtah	r8, r1, fp
   10e64:	uxth	r1, r3
   10e66:	lsrs	r3, r3, #16
   10e68:	sub.w	r8, r8, r1
   10e6c:	rsb	r3, r3, fp, lsr #16
   10e70:	add.w	r3, r3, r8, asr #16
   10e74:	uxth.w	r8, r8
   10e78:	asrs	r1, r3, #16
   10e7a:	cmp	r6, r9
   10e7c:	orr.w	r3, r8, r3, lsl #16
   10e80:	str.w	r3, [sl], #4
   10e84:	bhi.n	10e58 <__mdiff+0x80>
   10e86:	subs	r3, r6, r4
   10e88:	subs	r3, #21
   10e8a:	bic.w	r3, r3, #3
   10e8e:	adds	r3, #4
   10e90:	adds	r4, #21
   10e92:	cmp	r6, r4
   10e94:	it	cc
   10e96:	movcc	r3, #4
   10e98:	add	r5, r3
   10e9a:	add	r3, lr
   10e9c:	mov	lr, r3
   10e9e:	mov	r6, r5
   10ea0:	cmp	r6, ip
   10ea2:	bcc.n	10ec2 <__mdiff+0xea>
   10ea4:	add.w	r2, ip, #3
   10ea8:	subs	r2, r2, r5
   10eaa:	bic.w	r2, r2, #3
   10eae:	subs	r5, #3
   10eb0:	cmp	ip, r5
   10eb2:	it	cc
   10eb4:	movcc	r2, #0
   10eb6:	add	r3, r2
   10eb8:	ldr.w	r2, [r3, #-4]!
   10ebc:	cbz	r2, 10ede <__mdiff+0x106>
   10ebe:	str	r7, [r0, #16]
   10ec0:	b.n	10e0c <__mdiff+0x34>
   10ec2:	ldr.w	r8, [r6], #4
   10ec6:	uxtah	r2, r1, r8
   10eca:	asrs	r4, r2, #16
   10ecc:	add.w	r4, r4, r8, lsr #16
   10ed0:	uxth	r2, r2
   10ed2:	orr.w	r2, r2, r4, lsl #16
   10ed6:	str.w	r2, [lr], #4
   10eda:	asrs	r1, r4, #16
   10edc:	b.n	10ea0 <__mdiff+0xc8>
   10ede:	subs	r7, #1
   10ee0:	b.n	10eb8 <__mdiff+0xe0>
   10ee2:	nop
   10ee4:	.word	0x2000131a
   10ee8:	.word	0x20000c0c

00010eec <__ulp>:
   10eec:	sub	sp, #8
   10eee:	vstr	d0, [sp]
   10ef2:	ldr	r2, [sp, #4]
   10ef4:	ldr	r3, [pc, #60]	; (10f34 <__ulp+0x48>)
   10ef6:	ands	r3, r2
   10ef8:	sub.w	r3, r3, #54525952	; 0x3400000
   10efc:	cmp	r3, #0
   10efe:	bgt.n	10f12 <__ulp+0x26>
   10f00:	negs	r3, r3
   10f02:	cmp.w	r3, #20971520	; 0x1400000
   10f06:	mov.w	r2, r3, asr #20
   10f0a:	bge.n	10f16 <__ulp+0x2a>
   10f0c:	mov.w	r3, #524288	; 0x80000
   10f10:	asrs	r3, r2
   10f12:	movs	r2, #0
   10f14:	b.n	10f28 <__ulp+0x3c>
   10f16:	sub.w	r3, r2, #20
   10f1a:	cmp	r3, #30
   10f1c:	itte	le
   10f1e:	movle.w	r2, #2147483648	; 0x80000000
   10f22:	lsrle	r2, r3
   10f24:	movgt	r2, #1
   10f26:	movs	r3, #0
   10f28:	mov	r1, r3
   10f2a:	mov	r0, r2
   10f2c:	vmov	d0, r0, r1
   10f30:	add	sp, #8
   10f32:	bx	lr
   10f34:	.word	0x7ff00000

00010f38 <__b2d>:
   10f38:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f3c:	ldr	r6, [r0, #16]
   10f3e:	add.w	r8, r0, #20
   10f42:	add.w	r6, r8, r6, lsl #2
   10f46:	subs	r7, r6, #4
   10f48:	ldr.w	r2, [r6, #-4]
   10f4c:	mov	r0, r2
   10f4e:	bl	109f8 <__hi0bits>
   10f52:	rsb	r3, r0, #32
   10f56:	cmp	r0, #10
   10f58:	str	r3, [r1, #0]
   10f5a:	ldr	r1, [pc, #108]	; (10fc8 <__b2d+0x90>)
   10f5c:	bgt.n	10f8a <__b2d+0x52>
   10f5e:	rsb	ip, r0, #11
   10f62:	lsr.w	r3, r2, ip
   10f66:	cmp	r8, r7
   10f68:	orr.w	r5, r3, r1
   10f6c:	ite	cc
   10f6e:	ldrcc.w	r3, [r6, #-8]
   10f72:	movcs	r3, #0
   10f74:	adds	r0, #21
   10f76:	lsl.w	r0, r2, r0
   10f7a:	lsr.w	r3, r3, ip
   10f7e:	orrs	r3, r0
   10f80:	mov	r4, r3
   10f82:	vmov	d0, r4, r5
   10f86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f8a:	cmp	r8, r7
   10f8c:	itte	cc
   10f8e:	ldrcc.w	r3, [r6, #-8]
   10f92:	subcc.w	r7, r6, #8
   10f96:	movcs	r3, #0
   10f98:	subs	r0, #11
   10f9a:	beq.n	10fc2 <__b2d+0x8a>
   10f9c:	rsb	r1, r0, #32
   10fa0:	lsr.w	r4, r3, r1
   10fa4:	lsls	r2, r0
   10fa6:	orrs	r2, r4
   10fa8:	cmp	r7, r8
   10faa:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10fae:	ite	hi
   10fb0:	ldrhi.w	r2, [r7, #-4]
   10fb4:	movls	r2, #0
   10fb6:	lsls	r3, r0
   10fb8:	lsrs	r2, r1
   10fba:	orr.w	r5, r5, #3145728	; 0x300000
   10fbe:	orrs	r3, r2
   10fc0:	b.n	10f80 <__b2d+0x48>
   10fc2:	orr.w	r5, r2, r1
   10fc6:	b.n	10f80 <__b2d+0x48>
   10fc8:	.word	0x3ff00000

00010fcc <__d2b>:
   10fcc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10fd0:	mov	r7, r1
   10fd2:	movs	r1, #1
   10fd4:	vmov	r8, r9, d0
   10fd8:	mov	r6, r2
   10fda:	bl	10814 <_Balloc>
   10fde:	mov	r4, r0
   10fe0:	cbnz	r0, 10ff0 <__d2b+0x24>
   10fe2:	mov	r2, r0
   10fe4:	ldr	r3, [pc, #144]	; (11078 <__d2b+0xac>)
   10fe6:	ldr	r0, [pc, #148]	; (1107c <__d2b+0xb0>)
   10fe8:	movw	r1, #783	; 0x30f
   10fec:	bl	11d5c <__assert_func>
   10ff0:	ubfx	r5, r9, #20, #11
   10ff4:	ubfx	r3, r9, #0, #20
   10ff8:	cbnz	r5, 11046 <__d2b+0x7a>
   10ffa:	str	r3, [sp, #4]
   10ffc:	subs.w	r3, r8, #0
   11000:	beq.n	11050 <__d2b+0x84>
   11002:	mov	r0, sp
   11004:	str	r3, [sp, #0]
   11006:	bl	10a38 <__lo0bits>
   1100a:	ldrd	r1, r2, [sp]
   1100e:	cbz	r0, 1104c <__d2b+0x80>
   11010:	rsb	r3, r0, #32
   11014:	lsl.w	r3, r2, r3
   11018:	orrs	r3, r1
   1101a:	lsrs	r2, r0
   1101c:	str	r3, [r4, #20]
   1101e:	str	r2, [sp, #4]
   11020:	ldr	r3, [sp, #4]
   11022:	str	r3, [r4, #24]
   11024:	cmp	r3, #0
   11026:	ite	ne
   11028:	movne	r2, #2
   1102a:	moveq	r2, #1
   1102c:	str	r2, [r4, #16]
   1102e:	cbz	r5, 11060 <__d2b+0x94>
   11030:	subw	r5, r5, #1075	; 0x433
   11034:	add	r5, r0
   11036:	str	r5, [r7, #0]
   11038:	rsb	r0, r0, #53	; 0x35
   1103c:	str	r0, [r6, #0]
   1103e:	mov	r0, r4
   11040:	add	sp, #12
   11042:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11046:	orr.w	r3, r3, #1048576	; 0x100000
   1104a:	b.n	10ffa <__d2b+0x2e>
   1104c:	str	r1, [r4, #20]
   1104e:	b.n	11020 <__d2b+0x54>
   11050:	add	r0, sp, #4
   11052:	bl	10a38 <__lo0bits>
   11056:	ldr	r3, [sp, #4]
   11058:	str	r3, [r4, #20]
   1105a:	adds	r0, #32
   1105c:	movs	r2, #1
   1105e:	b.n	1102c <__d2b+0x60>
   11060:	add.w	r3, r4, r2, lsl #2
   11064:	subw	r0, r0, #1074	; 0x432
   11068:	str	r0, [r7, #0]
   1106a:	ldr	r0, [r3, #16]
   1106c:	bl	109f8 <__hi0bits>
   11070:	rsb	r0, r0, r2, lsl #5
   11074:	b.n	1103c <__d2b+0x70>
   11076:	nop
   11078:	.word	0x2000131a
   1107c:	.word	0x20000c0c

00011080 <__ratio>:
   11080:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11084:	mov	r8, r1
   11086:	mov	r1, sp
   11088:	mov	r9, r0
   1108a:	bl	10f38 <__b2d>
   1108e:	add	r1, sp, #4
   11090:	mov	r0, r8
   11092:	vmov	r4, r5, d0
   11096:	vmov	sl, s0
   1109a:	bl	10f38 <__b2d>
   1109e:	ldr.w	r3, [r8, #16]
   110a2:	ldr.w	r2, [r9, #16]
   110a6:	subs	r2, r2, r3
   110a8:	ldrd	r3, r1, [sp]
   110ac:	subs	r3, r3, r1
   110ae:	add.w	r3, r3, r2, lsl #5
   110b2:	vmov	r6, r7, d0
   110b6:	cmp	r3, #0
   110b8:	itet	le
   110ba:	rsble	r3, r3, r3, lsl #12
   110be:	movgt	r2, r5
   110c0:	movle	r2, r7
   110c2:	mov	fp, r5
   110c4:	itet	le
   110c6:	addle.w	r3, r2, r3, lsl #20
   110ca:	addgt.w	fp, r2, r3, lsl #20
   110ce:	vmovle	s1, r3
   110d2:	vmov	d7, sl, fp
   110d6:	vdiv.f64	d0, d7, d0
   110da:	add	sp, #12
   110dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000110e0 <__copybits>:
   110e0:	subs	r1, #1
   110e2:	push	{r4, r5, r6, lr}
   110e4:	asrs	r1, r1, #5
   110e6:	ldr	r4, [r2, #16]
   110e8:	adds	r1, #1
   110ea:	add.w	r3, r2, #20
   110ee:	add.w	r1, r0, r1, lsl #2
   110f2:	add.w	r4, r3, r4, lsl #2
   110f6:	subs	r5, r0, #4
   110f8:	cmp	r3, r4
   110fa:	bcc.n	11116 <__copybits+0x36>
   110fc:	subs	r3, r4, r2
   110fe:	subs	r3, #17
   11100:	bic.w	r3, r3, #3
   11104:	adds	r2, #17
   11106:	cmp	r2, r4
   11108:	it	hi
   1110a:	movhi	r3, #0
   1110c:	add	r0, r3
   1110e:	movs	r3, #0
   11110:	cmp	r0, r1
   11112:	bcc.n	11120 <__copybits+0x40>
   11114:	pop	{r4, r5, r6, pc}
   11116:	ldr.w	r6, [r3], #4
   1111a:	str.w	r6, [r5, #4]!
   1111e:	b.n	110f8 <__copybits+0x18>
   11120:	str.w	r3, [r0], #4
   11124:	b.n	11110 <__copybits+0x30>

00011126 <__any_on>:
   11126:	add.w	r2, r0, #20
   1112a:	ldr	r0, [r0, #16]
   1112c:	asrs	r3, r1, #5
   1112e:	cmp	r0, r3
   11130:	push	{r4, lr}
   11132:	blt.n	11158 <__any_on+0x32>
   11134:	ble.n	1114c <__any_on+0x26>
   11136:	ands.w	r1, r1, #31
   1113a:	beq.n	1114c <__any_on+0x26>
   1113c:	ldr.w	r4, [r2, r3, lsl #2]
   11140:	lsr.w	r0, r4, r1
   11144:	lsl.w	r1, r0, r1
   11148:	cmp	r4, r1
   1114a:	bne.n	11164 <__any_on+0x3e>
   1114c:	add.w	r3, r2, r3, lsl #2
   11150:	cmp	r3, r2
   11152:	bhi.n	1115c <__any_on+0x36>
   11154:	movs	r0, #0
   11156:	pop	{r4, pc}
   11158:	mov	r3, r0
   1115a:	b.n	1114c <__any_on+0x26>
   1115c:	ldr.w	r1, [r3, #-4]!
   11160:	cmp	r1, #0
   11162:	beq.n	11150 <__any_on+0x2a>
   11164:	movs	r0, #1
   11166:	b.n	11156 <__any_on+0x30>

00011168 <_malloc_usable_size_r>:
   11168:	ldr.w	r3, [r1, #-4]
   1116c:	subs	r0, r3, #4
   1116e:	cmp	r3, #0
   11170:	itt	lt
   11172:	ldrlt	r3, [r1, r0]
   11174:	addlt	r0, r0, r3
   11176:	bx	lr

00011178 <__ascii_wctomb>:
   11178:	cbz	r1, 1118e <__ascii_wctomb+0x16>
   1117a:	cmp	r2, #255	; 0xff
   1117c:	ittet	hi
   1117e:	movhi	r3, #138	; 0x8a
   11180:	strhi	r3, [r0, #0]
   11182:	strbls	r2, [r1, #0]
   11184:	movhi.w	r0, #4294967295
   11188:	it	ls
   1118a:	movls	r0, #1
   1118c:	bx	lr
   1118e:	mov	r0, r1
   11190:	bx	lr
	...

00011194 <fcvtbuf>:
   11194:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11198:	mov	r8, r2
   1119a:	ldr	r2, [pc, #136]	; (11224 <fcvtbuf+0x90>)
   1119c:	sub	sp, #28
   1119e:	ldr	r6, [r2, #0]
   111a0:	mov	r5, r0
   111a2:	mov	r7, r1
   111a4:	mov	r4, r3
   111a6:	cbnz	r3, 111d2 <fcvtbuf+0x3e>
   111a8:	ldr	r2, [r6, #40]	; 0x28
   111aa:	ldr	r1, [r6, #44]	; 0x2c
   111ac:	add.w	r3, r0, #35	; 0x23
   111b0:	cmp	r2, r3
   111b2:	bgt.n	111d0 <fcvtbuf+0x3c>
   111b4:	add.w	r9, r0, #36	; 0x24
   111b8:	mov	r2, r9
   111ba:	mov	r0, r6
   111bc:	vstr	d0, [sp, #8]
   111c0:	bl	d474 <_realloc_r>
   111c4:	mov	r4, r0
   111c6:	cbz	r0, 1120c <fcvtbuf+0x78>
   111c8:	strd	r9, r0, [r6, #40]	; 0x28
   111cc:	vldr	d0, [sp, #8]
   111d0:	ldr	r4, [r6, #44]	; 0x2c
   111d2:	add	r3, sp, #20
   111d4:	strd	r8, r3, [sp]
   111d8:	mov	r2, r5
   111da:	mov	r3, r7
   111dc:	movs	r1, #3
   111de:	mov	r0, r6
   111e0:	bl	f5d0 <_dtoa_r>
   111e4:	ldr	r3, [r7, #0]
   111e6:	negs	r3, r3
   111e8:	mov	r2, r4
   111ea:	subs	r3, r3, r4
   111ec:	ldr	r1, [sp, #20]
   111ee:	cmp	r1, r0
   111f0:	add.w	r6, r2, r3
   111f4:	bhi.n	11214 <fcvtbuf+0x80>
   111f6:	mov	r1, r2
   111f8:	movs	r7, #48	; 0x30
   111fa:	adds	r0, r1, r3
   111fc:	cmp	r5, r0
   111fe:	bgt.n	1121e <fcvtbuf+0x8a>
   11200:	subs	r3, r5, r6
   11202:	cmp	r5, r6
   11204:	it	lt
   11206:	movlt	r3, #0
   11208:	movs	r1, #0
   1120a:	strb	r1, [r2, r3]
   1120c:	mov	r0, r4
   1120e:	add	sp, #28
   11210:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11214:	ldrb.w	r1, [r0], #1
   11218:	strb.w	r1, [r2], #1
   1121c:	b.n	111ec <fcvtbuf+0x58>
   1121e:	strb.w	r7, [r1], #1
   11222:	b.n	111fa <fcvtbuf+0x66>
   11224:	.word	0x2000222c

00011228 <__ssputs_r>:
   11228:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1122c:	ldr	r6, [r1, #8]
   1122e:	mov	r7, r3
   11230:	cmp	r6, r7
   11232:	ldr	r3, [r1, #0]
   11234:	mov	sl, r0
   11236:	mov	r4, r1
   11238:	mov	r8, r2
   1123a:	bhi.n	11296 <__ssputs_r+0x6e>
   1123c:	ldrh	r2, [r1, #12]
   1123e:	tst.w	r2, #1152	; 0x480
   11242:	beq.n	11292 <__ssputs_r+0x6a>
   11244:	ldr	r5, [r4, #20]
   11246:	ldr	r1, [r1, #16]
   11248:	add.w	r5, r5, r5, lsl #1
   1124c:	sub.w	r9, r3, r1
   11250:	add.w	r5, r5, r5, lsr #31
   11254:	adds	r3, r7, #1
   11256:	add	r3, r9
   11258:	asrs	r5, r5, #1
   1125a:	cmp	r5, r3
   1125c:	it	cc
   1125e:	movcc	r5, r3
   11260:	lsls	r3, r2, #21
   11262:	bpl.n	112b4 <__ssputs_r+0x8c>
   11264:	mov	r1, r5
   11266:	bl	d370 <_malloc_r>
   1126a:	mov	r6, r0
   1126c:	cbz	r0, 112c8 <__ssputs_r+0xa0>
   1126e:	ldr	r1, [r4, #16]
   11270:	mov	r2, r9
   11272:	bl	a8dc <memcpy>
   11276:	ldrh	r3, [r4, #12]
   11278:	bic.w	r3, r3, #1152	; 0x480
   1127c:	orr.w	r3, r3, #128	; 0x80
   11280:	strh	r3, [r4, #12]
   11282:	str	r6, [r4, #16]
   11284:	str	r5, [r4, #20]
   11286:	add	r6, r9
   11288:	sub.w	r5, r5, r9
   1128c:	str	r6, [r4, #0]
   1128e:	str	r5, [r4, #8]
   11290:	mov	r6, r7
   11292:	cmp	r6, r7
   11294:	bls.n	11298 <__ssputs_r+0x70>
   11296:	mov	r6, r7
   11298:	ldr	r0, [r4, #0]
   1129a:	mov	r2, r6
   1129c:	mov	r1, r8
   1129e:	bl	f1f4 <memmove>
   112a2:	ldr	r3, [r4, #8]
   112a4:	subs	r3, r3, r6
   112a6:	str	r3, [r4, #8]
   112a8:	ldr	r3, [r4, #0]
   112aa:	add	r3, r6
   112ac:	str	r3, [r4, #0]
   112ae:	movs	r0, #0
   112b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   112b4:	mov	r2, r5
   112b6:	bl	d474 <_realloc_r>
   112ba:	mov	r6, r0
   112bc:	cmp	r0, #0
   112be:	bne.n	11282 <__ssputs_r+0x5a>
   112c0:	ldr	r1, [r4, #16]
   112c2:	mov	r0, sl
   112c4:	bl	100a8 <_free_r>
   112c8:	movs	r3, #12
   112ca:	str.w	r3, [sl]
   112ce:	ldrh	r3, [r4, #12]
   112d0:	orr.w	r3, r3, #64	; 0x40
   112d4:	strh	r3, [r4, #12]
   112d6:	mov.w	r0, #4294967295
   112da:	b.n	112b0 <__ssputs_r+0x88>

000112dc <_svfiprintf_r>:
   112dc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e0:	mov	r8, r3
   112e2:	ldrh	r3, [r1, #12]
   112e4:	lsls	r3, r3, #24
   112e6:	sub	sp, #116	; 0x74
   112e8:	mov	r7, r0
   112ea:	mov	r5, r1
   112ec:	mov	r4, r2
   112ee:	bpl.n	1130e <_svfiprintf_r+0x32>
   112f0:	ldr	r3, [r1, #16]
   112f2:	cbnz	r3, 1130e <_svfiprintf_r+0x32>
   112f4:	movs	r1, #64	; 0x40
   112f6:	bl	d370 <_malloc_r>
   112fa:	str	r0, [r5, #0]
   112fc:	str	r0, [r5, #16]
   112fe:	cbnz	r0, 1130a <_svfiprintf_r+0x2e>
   11300:	movs	r3, #12
   11302:	str	r3, [r7, #0]
   11304:	mov.w	r0, #4294967295
   11308:	b.n	114ac <_svfiprintf_r+0x1d0>
   1130a:	movs	r3, #64	; 0x40
   1130c:	str	r3, [r5, #20]
   1130e:	movs	r3, #0
   11310:	str	r3, [sp, #36]	; 0x24
   11312:	movs	r3, #32
   11314:	strb.w	r3, [sp, #41]	; 0x29
   11318:	str.w	r8, [sp, #12]
   1131c:	movs	r3, #48	; 0x30
   1131e:	ldr.w	r8, [pc, #420]	; 114c4 <_svfiprintf_r+0x1e8>
   11322:	strb.w	r3, [sp, #42]	; 0x2a
   11326:	mov.w	r9, #1
   1132a:	mov	r3, r4
   1132c:	mov	sl, r3
   1132e:	ldrb.w	r2, [r3], #1
   11332:	cbz	r2, 11338 <_svfiprintf_r+0x5c>
   11334:	cmp	r2, #37	; 0x25
   11336:	bne.n	1132c <_svfiprintf_r+0x50>
   11338:	subs.w	fp, sl, r4
   1133c:	beq.n	11356 <_svfiprintf_r+0x7a>
   1133e:	mov	r3, fp
   11340:	mov	r2, r4
   11342:	mov	r1, r5
   11344:	mov	r0, r7
   11346:	bl	11228 <__ssputs_r>
   1134a:	adds	r0, #1
   1134c:	beq.w	114a2 <_svfiprintf_r+0x1c6>
   11350:	ldr	r2, [sp, #36]	; 0x24
   11352:	add	r2, fp
   11354:	str	r2, [sp, #36]	; 0x24
   11356:	ldrb.w	r3, [sl]
   1135a:	cmp	r3, #0
   1135c:	beq.w	114a2 <_svfiprintf_r+0x1c6>
   11360:	movs	r3, #0
   11362:	mov.w	r2, #4294967295
   11366:	strd	r2, r3, [sp, #20]
   1136a:	add.w	sl, sl, #1
   1136e:	str	r3, [sp, #16]
   11370:	str	r3, [sp, #28]
   11372:	strb.w	r3, [sp, #83]	; 0x53
   11376:	str	r3, [sp, #104]	; 0x68
   11378:	mov	r4, sl
   1137a:	movs	r2, #5
   1137c:	ldrb.w	r1, [r4], #1
   11380:	ldr	r0, [pc, #320]	; (114c4 <_svfiprintf_r+0x1e8>)
   11382:	bl	f3f0 <memchr>
   11386:	ldr	r2, [sp, #16]
   11388:	cbnz	r0, 113c2 <_svfiprintf_r+0xe6>
   1138a:	lsls	r0, r2, #27
   1138c:	itt	mi
   1138e:	movmi	r3, #32
   11390:	strbmi.w	r3, [sp, #83]	; 0x53
   11394:	lsls	r1, r2, #28
   11396:	itt	mi
   11398:	movmi	r3, #43	; 0x2b
   1139a:	strbmi.w	r3, [sp, #83]	; 0x53
   1139e:	ldrb.w	r3, [sl]
   113a2:	cmp	r3, #42	; 0x2a
   113a4:	beq.n	113d2 <_svfiprintf_r+0xf6>
   113a6:	ldr	r2, [sp, #28]
   113a8:	mov	r4, sl
   113aa:	movs	r0, #0
   113ac:	mov.w	ip, #10
   113b0:	mov	r1, r4
   113b2:	ldrb.w	r3, [r1], #1
   113b6:	subs	r3, #48	; 0x30
   113b8:	cmp	r3, #9
   113ba:	bls.n	11458 <_svfiprintf_r+0x17c>
   113bc:	cbz	r0, 113ec <_svfiprintf_r+0x110>
   113be:	str	r2, [sp, #28]
   113c0:	b.n	113ec <_svfiprintf_r+0x110>
   113c2:	sub.w	r3, r0, r8
   113c6:	lsl.w	r3, r9, r3
   113ca:	orrs	r3, r2
   113cc:	str	r3, [sp, #16]
   113ce:	mov	sl, r4
   113d0:	b.n	11378 <_svfiprintf_r+0x9c>
   113d2:	ldr	r3, [sp, #12]
   113d4:	adds	r1, r3, #4
   113d6:	ldr	r3, [r3, #0]
   113d8:	str	r1, [sp, #12]
   113da:	cmp	r3, #0
   113dc:	ittet	lt
   113de:	neglt	r3, r3
   113e0:	orrlt.w	r2, r2, #2
   113e4:	strge	r3, [sp, #28]
   113e6:	strlt	r3, [sp, #28]
   113e8:	it	lt
   113ea:	strlt	r2, [sp, #16]
   113ec:	ldrb	r3, [r4, #0]
   113ee:	cmp	r3, #46	; 0x2e
   113f0:	bne.n	1140c <_svfiprintf_r+0x130>
   113f2:	ldrb	r3, [r4, #1]
   113f4:	cmp	r3, #42	; 0x2a
   113f6:	bne.n	11462 <_svfiprintf_r+0x186>
   113f8:	ldr	r3, [sp, #12]
   113fa:	adds	r2, r3, #4
   113fc:	ldr	r3, [r3, #0]
   113fe:	str	r2, [sp, #12]
   11400:	cmp	r3, #0
   11402:	it	lt
   11404:	movlt.w	r3, #4294967295
   11408:	adds	r4, #2
   1140a:	str	r3, [sp, #20]
   1140c:	ldr.w	sl, [pc, #196]	; 114d4 <_svfiprintf_r+0x1f8>
   11410:	ldrb	r1, [r4, #0]
   11412:	movs	r2, #3
   11414:	mov	r0, sl
   11416:	bl	f3f0 <memchr>
   1141a:	cbz	r0, 1142c <_svfiprintf_r+0x150>
   1141c:	ldr	r3, [sp, #16]
   1141e:	sub.w	r0, r0, sl
   11422:	movs	r2, #64	; 0x40
   11424:	lsls	r2, r0
   11426:	orrs	r3, r2
   11428:	adds	r4, #1
   1142a:	str	r3, [sp, #16]
   1142c:	ldrb.w	r1, [r4], #1
   11430:	ldr	r0, [pc, #148]	; (114c8 <_svfiprintf_r+0x1ec>)
   11432:	strb.w	r1, [sp, #40]	; 0x28
   11436:	movs	r2, #6
   11438:	bl	f3f0 <memchr>
   1143c:	cmp	r0, #0
   1143e:	beq.n	114b2 <_svfiprintf_r+0x1d6>
   11440:	ldr	r3, [pc, #136]	; (114cc <_svfiprintf_r+0x1f0>)
   11442:	cbnz	r3, 1148c <_svfiprintf_r+0x1b0>
   11444:	ldr	r3, [sp, #12]
   11446:	adds	r3, #7
   11448:	bic.w	r3, r3, #7
   1144c:	adds	r3, #8
   1144e:	str	r3, [sp, #12]
   11450:	ldr	r3, [sp, #36]	; 0x24
   11452:	add	r3, r6
   11454:	str	r3, [sp, #36]	; 0x24
   11456:	b.n	1132a <_svfiprintf_r+0x4e>
   11458:	mla	r2, ip, r2, r3
   1145c:	mov	r4, r1
   1145e:	movs	r0, #1
   11460:	b.n	113b0 <_svfiprintf_r+0xd4>
   11462:	movs	r3, #0
   11464:	adds	r4, #1
   11466:	str	r3, [sp, #20]
   11468:	mov	r1, r3
   1146a:	mov.w	ip, #10
   1146e:	mov	r0, r4
   11470:	ldrb.w	r2, [r0], #1
   11474:	subs	r2, #48	; 0x30
   11476:	cmp	r2, #9
   11478:	bls.n	11482 <_svfiprintf_r+0x1a6>
   1147a:	cmp	r3, #0
   1147c:	beq.n	1140c <_svfiprintf_r+0x130>
   1147e:	str	r1, [sp, #20]
   11480:	b.n	1140c <_svfiprintf_r+0x130>
   11482:	mla	r1, ip, r1, r2
   11486:	mov	r4, r0
   11488:	movs	r3, #1
   1148a:	b.n	1146e <_svfiprintf_r+0x192>
   1148c:	add	r3, sp, #12
   1148e:	str	r3, [sp, #0]
   11490:	mov	r2, r5
   11492:	ldr	r3, [pc, #60]	; (114d0 <_svfiprintf_r+0x1f4>)
   11494:	add	r1, sp, #16
   11496:	mov	r0, r7
   11498:	bl	e2d0 <_printf_float>
   1149c:	adds	r2, r0, #1
   1149e:	mov	r6, r0
   114a0:	bne.n	11450 <_svfiprintf_r+0x174>
   114a2:	ldrh	r3, [r5, #12]
   114a4:	lsls	r3, r3, #25
   114a6:	bmi.w	11304 <_svfiprintf_r+0x28>
   114aa:	ldr	r0, [sp, #36]	; 0x24
   114ac:	add	sp, #116	; 0x74
   114ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114b2:	add	r3, sp, #12
   114b4:	str	r3, [sp, #0]
   114b6:	mov	r2, r5
   114b8:	ldr	r3, [pc, #20]	; (114d0 <_svfiprintf_r+0x1f4>)
   114ba:	add	r1, sp, #16
   114bc:	mov	r0, r7
   114be:	bl	e7e0 <_printf_i>
   114c2:	b.n	1149c <_svfiprintf_r+0x1c0>
   114c4:	.word	0x20001372
   114c8:	.word	0x2000137c
   114cc:	.word	0x0000e2d1
   114d0:	.word	0x00011229
   114d4:	.word	0x20001378

000114d8 <_sungetc_r>:
   114d8:	push	{r3, r4, r5, lr}
   114da:	adds	r3, r1, #1
   114dc:	mov	r4, r2
   114de:	bne.n	114e8 <_sungetc_r+0x10>
   114e0:	mov.w	r5, #4294967295
   114e4:	mov	r0, r5
   114e6:	pop	{r3, r4, r5, pc}
   114e8:	ldrh	r3, [r2, #12]
   114ea:	bic.w	r3, r3, #32
   114ee:	strh	r3, [r2, #12]
   114f0:	ldr	r3, [r4, #52]	; 0x34
   114f2:	ldr	r2, [r2, #4]
   114f4:	uxtb	r5, r1
   114f6:	cbz	r3, 1151c <_sungetc_r+0x44>
   114f8:	ldr	r3, [r4, #56]	; 0x38
   114fa:	cmp	r3, r2
   114fc:	ble.n	11510 <_sungetc_r+0x38>
   114fe:	ldr	r3, [r4, #0]
   11500:	subs	r2, r3, #1
   11502:	str	r2, [r4, #0]
   11504:	strb.w	r5, [r3, #-1]
   11508:	ldr	r3, [r4, #4]
   1150a:	adds	r3, #1
   1150c:	str	r3, [r4, #4]
   1150e:	b.n	114e4 <_sungetc_r+0xc>
   11510:	mov	r1, r4
   11512:	bl	11ce6 <__submore>
   11516:	cmp	r0, #0
   11518:	beq.n	114fe <_sungetc_r+0x26>
   1151a:	b.n	114e0 <_sungetc_r+0x8>
   1151c:	ldr	r1, [r4, #16]
   1151e:	ldr	r3, [r4, #0]
   11520:	cbz	r1, 11538 <_sungetc_r+0x60>
   11522:	cmp	r1, r3
   11524:	bcs.n	11538 <_sungetc_r+0x60>
   11526:	ldrb.w	r1, [r3, #-1]
   1152a:	cmp	r1, r5
   1152c:	bne.n	11538 <_sungetc_r+0x60>
   1152e:	subs	r3, #1
   11530:	adds	r2, #1
   11532:	str	r3, [r4, #0]
   11534:	str	r2, [r4, #4]
   11536:	b.n	114e4 <_sungetc_r+0xc>
   11538:	strd	r3, r2, [r4, #60]	; 0x3c
   1153c:	add.w	r3, r4, #68	; 0x44
   11540:	str	r3, [r4, #52]	; 0x34
   11542:	movs	r3, #3
   11544:	str	r3, [r4, #56]	; 0x38
   11546:	mov	r3, r4
   11548:	strb.w	r5, [r3, #70]!
   1154c:	str	r3, [r4, #0]
   1154e:	movs	r3, #1
   11550:	b.n	1150c <_sungetc_r+0x34>

00011552 <__ssrefill_r>:
   11552:	push	{r4, lr}
   11554:	mov	r4, r1
   11556:	ldr	r1, [r1, #52]	; 0x34
   11558:	cbz	r1, 11576 <__ssrefill_r+0x24>
   1155a:	add.w	r3, r4, #68	; 0x44
   1155e:	cmp	r1, r3
   11560:	beq.n	11566 <__ssrefill_r+0x14>
   11562:	bl	100a8 <_free_r>
   11566:	ldr	r3, [r4, #64]	; 0x40
   11568:	str	r3, [r4, #4]
   1156a:	movs	r0, #0
   1156c:	str	r0, [r4, #52]	; 0x34
   1156e:	cbz	r3, 11576 <__ssrefill_r+0x24>
   11570:	ldr	r3, [r4, #60]	; 0x3c
   11572:	str	r3, [r4, #0]
   11574:	pop	{r4, pc}
   11576:	ldr	r3, [r4, #16]
   11578:	str	r3, [r4, #0]
   1157a:	movs	r3, #0
   1157c:	str	r3, [r4, #4]
   1157e:	ldrh	r3, [r4, #12]
   11580:	orr.w	r3, r3, #32
   11584:	strh	r3, [r4, #12]
   11586:	mov.w	r0, #4294967295
   1158a:	b.n	11574 <__ssrefill_r+0x22>

0001158c <__ssvfiscanf_r>:
   1158c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11590:	mov	r4, r1
   11592:	sub.w	sp, sp, #648	; 0x288
   11596:	movs	r1, #0
   11598:	strd	r1, r1, [sp, #272]	; 0x110
   1159c:	ldr	r1, [pc, #664]	; (11838 <__ssvfiscanf_r+0x2ac>)
   1159e:	str	r1, [sp, #640]	; 0x280
   115a0:	add.w	r8, sp, #4
   115a4:	ldr	r1, [pc, #660]	; (1183c <__ssvfiscanf_r+0x2b0>)
   115a6:	ldr	r7, [pc, #664]	; (11840 <__ssvfiscanf_r+0x2b4>)
   115a8:	ldr.w	r9, [pc, #664]	; 11844 <__ssvfiscanf_r+0x2b8>
   115ac:	str.w	r8, [sp, #280]	; 0x118
   115b0:	mov	r6, r0
   115b2:	str	r1, [sp, #644]	; 0x284
   115b4:	str	r3, [sp, #0]
   115b6:	ldrb	r3, [r2, #0]
   115b8:	cmp	r3, #0
   115ba:	beq.w	11872 <__ssvfiscanf_r+0x2e6>
   115be:	ldrb	r1, [r7, r3]
   115c0:	ands.w	r1, r1, #8
   115c4:	add.w	r5, r2, #1
   115c8:	beq.n	115fe <__ssvfiscanf_r+0x72>
   115ca:	ldr	r3, [r4, #4]
   115cc:	cmp	r3, #0
   115ce:	ble.n	115f0 <__ssvfiscanf_r+0x64>
   115d0:	ldr	r3, [r4, #0]
   115d2:	ldrb	r2, [r3, #0]
   115d4:	ldrb	r2, [r7, r2]
   115d6:	lsls	r2, r2, #28
   115d8:	bmi.n	115de <__ssvfiscanf_r+0x52>
   115da:	mov	r2, r5
   115dc:	b.n	115b6 <__ssvfiscanf_r+0x2a>
   115de:	ldr	r2, [sp, #276]	; 0x114
   115e0:	adds	r2, #1
   115e2:	str	r2, [sp, #276]	; 0x114
   115e4:	ldr	r2, [r4, #4]
   115e6:	adds	r3, #1
   115e8:	subs	r2, #1
   115ea:	str	r2, [r4, #4]
   115ec:	str	r3, [r4, #0]
   115ee:	b.n	115ca <__ssvfiscanf_r+0x3e>
   115f0:	ldr	r3, [sp, #644]	; 0x284
   115f2:	mov	r1, r4
   115f4:	mov	r0, r6
   115f6:	blx	r3
   115f8:	cmp	r0, #0
   115fa:	beq.n	115d0 <__ssvfiscanf_r+0x44>
   115fc:	b.n	115da <__ssvfiscanf_r+0x4e>
   115fe:	cmp	r3, #37	; 0x25
   11600:	beq.n	11628 <__ssvfiscanf_r+0x9c>
   11602:	mov	sl, r3
   11604:	ldr	r3, [r4, #4]
   11606:	cmp	r3, #0
   11608:	ble.w	1172e <__ssvfiscanf_r+0x1a2>
   1160c:	ldr	r2, [r4, #0]
   1160e:	ldrb	r3, [r2, #0]
   11610:	cmp	r3, sl
   11612:	bne.w	11872 <__ssvfiscanf_r+0x2e6>
   11616:	ldr	r3, [r4, #4]
   11618:	subs	r3, #1
   1161a:	str	r3, [r4, #4]
   1161c:	ldr	r3, [sp, #276]	; 0x114
   1161e:	adds	r2, #1
   11620:	adds	r3, #1
   11622:	str	r2, [r4, #0]
   11624:	str	r3, [sp, #276]	; 0x114
   11626:	b.n	115da <__ssvfiscanf_r+0x4e>
   11628:	str	r1, [sp, #260]	; 0x104
   1162a:	str	r1, [sp, #268]	; 0x10c
   1162c:	ldrb	r3, [r2, #1]
   1162e:	cmp	r3, #42	; 0x2a
   11630:	ittt	eq
   11632:	moveq	r3, #16
   11634:	addeq	r5, r2, #2
   11636:	streq	r3, [sp, #260]	; 0x104
   11638:	movs	r2, #10
   1163a:	mov	sl, r5
   1163c:	ldrb.w	r1, [sl], #1
   11640:	sub.w	r3, r1, #48	; 0x30
   11644:	cmp	r3, #9
   11646:	bls.n	11682 <__ssvfiscanf_r+0xf6>
   11648:	ldr	r0, [pc, #504]	; (11844 <__ssvfiscanf_r+0x2b8>)
   1164a:	movs	r2, #3
   1164c:	bl	f3f0 <memchr>
   11650:	cbz	r0, 11662 <__ssvfiscanf_r+0xd6>
   11652:	ldr	r2, [sp, #260]	; 0x104
   11654:	sub.w	r0, r0, r9
   11658:	movs	r3, #1
   1165a:	lsls	r3, r0
   1165c:	orrs	r3, r2
   1165e:	str	r3, [sp, #260]	; 0x104
   11660:	mov	r5, sl
   11662:	ldrb.w	r3, [r5], #1
   11666:	cmp	r3, #120	; 0x78
   11668:	bhi.n	11678 <__ssvfiscanf_r+0xec>
   1166a:	cmp	r3, #87	; 0x57
   1166c:	bhi.n	11690 <__ssvfiscanf_r+0x104>
   1166e:	cmp	r3, #37	; 0x25
   11670:	beq.n	11602 <__ssvfiscanf_r+0x76>
   11672:	bhi.n	11724 <__ssvfiscanf_r+0x198>
   11674:	cmp	r3, #0
   11676:	beq.n	11744 <__ssvfiscanf_r+0x1b8>
   11678:	movs	r3, #3
   1167a:	str	r3, [sp, #284]	; 0x11c
   1167c:	movs	r3, #10
   1167e:	str	r3, [sp, #264]	; 0x108
   11680:	b.n	11770 <__ssvfiscanf_r+0x1e4>
   11682:	ldr	r3, [sp, #268]	; 0x10c
   11684:	mla	r1, r2, r3, r1
   11688:	subs	r1, #48	; 0x30
   1168a:	str	r1, [sp, #268]	; 0x10c
   1168c:	mov	r5, sl
   1168e:	b.n	1163a <__ssvfiscanf_r+0xae>
   11690:	sub.w	r2, r3, #88	; 0x58
   11694:	cmp	r2, #32
   11696:	bhi.n	11678 <__ssvfiscanf_r+0xec>
   11698:	add	r1, pc, #4	; (adr r1, 116a0 <__ssvfiscanf_r+0x114>)
   1169a:	ldr.w	pc, [r1, r2, lsl #2]
   1169e:	nop
   116a0:	.word	0x00011753
   116a4:	.word	0x00011679
   116a8:	.word	0x00011679
   116ac:	.word	0x000117b1
   116b0:	.word	0x00011679
   116b4:	.word	0x00011679
   116b8:	.word	0x00011679
   116bc:	.word	0x00011679
   116c0:	.word	0x00011679
   116c4:	.word	0x00011679
   116c8:	.word	0x00011679
   116cc:	.word	0x000117c7
   116d0:	.word	0x000117ad
   116d4:	.word	0x0001172b
   116d8:	.word	0x0001172b
   116dc:	.word	0x0001172b
   116e0:	.word	0x00011679
   116e4:	.word	0x00011769
   116e8:	.word	0x00011679
   116ec:	.word	0x00011679
   116f0:	.word	0x00011679
   116f4:	.word	0x00011679
   116f8:	.word	0x000117d7
   116fc:	.word	0x000117a5
   11700:	.word	0x0001174b
   11704:	.word	0x00011679
   11708:	.word	0x00011679
   1170c:	.word	0x000117d3
   11710:	.word	0x00011679
   11714:	.word	0x000117ad
   11718:	.word	0x00011679
   1171c:	.word	0x00011679
   11720:	.word	0x00011753
   11724:	subs	r3, #69	; 0x45
   11726:	cmp	r3, #2
   11728:	bhi.n	11678 <__ssvfiscanf_r+0xec>
   1172a:	movs	r3, #5
   1172c:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   1172e:	ldr	r3, [sp, #644]	; 0x284
   11730:	mov	r1, r4
   11732:	mov	r0, r6
   11734:	blx	r3
   11736:	cmp	r0, #0
   11738:	beq.w	1160c <__ssvfiscanf_r+0x80>
   1173c:	ldr	r0, [sp, #272]	; 0x110
   1173e:	cmp	r0, #0
   11740:	bne.w	1185e <__ssvfiscanf_r+0x2d2>
   11744:	mov.w	r0, #4294967295
   11748:	b.n	1186a <__ssvfiscanf_r+0x2de>
   1174a:	ldr	r2, [sp, #260]	; 0x104
   1174c:	orr.w	r2, r2, #32
   11750:	str	r2, [sp, #260]	; 0x104
   11752:	ldr	r2, [sp, #260]	; 0x104
   11754:	orr.w	r2, r2, #512	; 0x200
   11758:	str	r2, [sp, #260]	; 0x104
   1175a:	movs	r2, #16
   1175c:	cmp	r3, #111	; 0x6f
   1175e:	str	r2, [sp, #264]	; 0x108
   11760:	ite	cc
   11762:	movcc	r3, #3
   11764:	movcs	r3, #4
   11766:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   11768:	movs	r3, #0
   1176a:	str	r3, [sp, #264]	; 0x108
   1176c:	movs	r3, #3
   1176e:	str	r3, [sp, #284]	; 0x11c
   11770:	ldr	r3, [r4, #4]
   11772:	cmp	r3, #0
   11774:	ble.n	117f2 <__ssvfiscanf_r+0x266>
   11776:	ldr	r3, [sp, #260]	; 0x104
   11778:	lsls	r1, r3, #25
   1177a:	bmi.n	11786 <__ssvfiscanf_r+0x1fa>
   1177c:	ldr	r3, [r4, #0]
   1177e:	ldrb	r2, [r3, #0]
   11780:	ldrb	r2, [r7, r2]
   11782:	lsls	r2, r2, #28
   11784:	bmi.n	11800 <__ssvfiscanf_r+0x274>
   11786:	ldr	r3, [sp, #284]	; 0x11c
   11788:	cmp	r3, #2
   1178a:	bgt.n	11824 <__ssvfiscanf_r+0x298>
   1178c:	mov	r3, sp
   1178e:	mov	r2, r4
   11790:	add	r1, sp, #260	; 0x104
   11792:	mov	r0, r6
   11794:	bl	1187c <_scanf_chars>
   11798:	cmp	r0, #1
   1179a:	beq.n	11872 <__ssvfiscanf_r+0x2e6>
   1179c:	cmp	r0, #2
   1179e:	bne.w	115da <__ssvfiscanf_r+0x4e>
   117a2:	b.n	1173c <__ssvfiscanf_r+0x1b0>
   117a4:	movs	r3, #8
   117a6:	str	r3, [sp, #264]	; 0x108
   117a8:	movs	r3, #4
   117aa:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   117ac:	movs	r2, #10
   117ae:	b.n	1175c <__ssvfiscanf_r+0x1d0>
   117b0:	mov	r1, r5
   117b2:	mov	r0, r8
   117b4:	bl	11c74 <__sccl>
   117b8:	ldr	r3, [sp, #260]	; 0x104
   117ba:	orr.w	r3, r3, #64	; 0x40
   117be:	str	r3, [sp, #260]	; 0x104
   117c0:	mov	r5, r0
   117c2:	movs	r3, #1
   117c4:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   117c6:	ldr	r3, [sp, #260]	; 0x104
   117c8:	orr.w	r3, r3, #64	; 0x40
   117cc:	str	r3, [sp, #260]	; 0x104
   117ce:	movs	r3, #0
   117d0:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   117d2:	movs	r3, #2
   117d4:	b.n	1176e <__ssvfiscanf_r+0x1e2>
   117d6:	ldr	r0, [sp, #260]	; 0x104
   117d8:	lsls	r3, r0, #27
   117da:	bmi.w	115da <__ssvfiscanf_r+0x4e>
   117de:	ldr	r3, [sp, #0]
   117e0:	ldr	r2, [sp, #276]	; 0x114
   117e2:	adds	r1, r3, #4
   117e4:	str	r1, [sp, #0]
   117e6:	ldr	r3, [r3, #0]
   117e8:	lsls	r0, r0, #31
   117ea:	ite	mi
   117ec:	strhmi	r2, [r3, #0]
   117ee:	strpl	r2, [r3, #0]
   117f0:	b.n	115da <__ssvfiscanf_r+0x4e>
   117f2:	ldr	r3, [sp, #644]	; 0x284
   117f4:	mov	r1, r4
   117f6:	mov	r0, r6
   117f8:	blx	r3
   117fa:	cmp	r0, #0
   117fc:	beq.n	11776 <__ssvfiscanf_r+0x1ea>
   117fe:	b.n	1173c <__ssvfiscanf_r+0x1b0>
   11800:	ldr	r2, [sp, #276]	; 0x114
   11802:	adds	r2, #1
   11804:	str	r2, [sp, #276]	; 0x114
   11806:	ldr	r2, [r4, #4]
   11808:	subs	r2, #1
   1180a:	cmp	r2, #0
   1180c:	str	r2, [r4, #4]
   1180e:	ble.n	11816 <__ssvfiscanf_r+0x28a>
   11810:	adds	r3, #1
   11812:	str	r3, [r4, #0]
   11814:	b.n	1177c <__ssvfiscanf_r+0x1f0>
   11816:	ldr	r3, [sp, #644]	; 0x284
   11818:	mov	r1, r4
   1181a:	mov	r0, r6
   1181c:	blx	r3
   1181e:	cmp	r0, #0
   11820:	beq.n	1177c <__ssvfiscanf_r+0x1f0>
   11822:	b.n	1173c <__ssvfiscanf_r+0x1b0>
   11824:	cmp	r3, #4
   11826:	bgt.n	11848 <__ssvfiscanf_r+0x2bc>
   11828:	mov	r3, sp
   1182a:	mov	r2, r4
   1182c:	add	r1, sp, #260	; 0x104
   1182e:	mov	r0, r6
   11830:	bl	11930 <_scanf_i>
   11834:	b.n	11798 <__ssvfiscanf_r+0x20c>
   11836:	nop
   11838:	.word	0x000114d9
   1183c:	.word	0x00011553
   11840:	.word	0x2000119d
   11844:	.word	0x20001378
   11848:	ldr	r3, [pc, #44]	; (11878 <__ssvfiscanf_r+0x2ec>)
   1184a:	cmp	r3, #0
   1184c:	beq.w	115da <__ssvfiscanf_r+0x4e>
   11850:	mov	r3, sp
   11852:	mov	r2, r4
   11854:	add	r1, sp, #260	; 0x104
   11856:	mov	r0, r6
   11858:	bl	ea24 <_scanf_float>
   1185c:	b.n	11798 <__ssvfiscanf_r+0x20c>
   1185e:	ldrh	r3, [r4, #12]
   11860:	tst.w	r3, #64	; 0x40
   11864:	it	ne
   11866:	movne.w	r0, #4294967295
   1186a:	add.w	sp, sp, #648	; 0x288
   1186e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11872:	ldr	r0, [sp, #272]	; 0x110
   11874:	b.n	1186a <__ssvfiscanf_r+0x2de>
   11876:	nop
   11878:	.word	0x0000ea25

0001187c <_scanf_chars>:
   1187c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11880:	mov	r5, r2
   11882:	ldr	r2, [r1, #8]
   11884:	mov	r8, r0
   11886:	mov	r4, r1
   11888:	cbnz	r2, 11898 <_scanf_chars+0x1c>
   1188a:	ldr	r2, [r1, #24]
   1188c:	cmp	r2, #0
   1188e:	ite	eq
   11890:	moveq	r2, #1
   11892:	movne.w	r2, #4294967295
   11896:	str	r2, [r1, #8]
   11898:	ldr	r2, [r4, #0]
   1189a:	ldr.w	r9, [pc, #144]	; 1192c <_scanf_chars+0xb0>
   1189e:	lsls	r1, r2, #27
   118a0:	itttt	pl
   118a2:	ldrpl	r2, [r3, #0]
   118a4:	addpl	r1, r2, #4
   118a6:	strpl	r1, [r3, #0]
   118a8:	ldrpl	r6, [r2, #0]
   118aa:	movs	r7, #0
   118ac:	ldr	r0, [r4, #24]
   118ae:	cbz	r0, 118d4 <_scanf_chars+0x58>
   118b0:	cmp	r0, #1
   118b2:	bne.n	118c4 <_scanf_chars+0x48>
   118b4:	ldr	r2, [r5, #0]
   118b6:	ldrb	r1, [r2, #0]
   118b8:	ldr	r2, [r4, #20]
   118ba:	ldrb	r2, [r2, r1]
   118bc:	cbnz	r2, 118d4 <_scanf_chars+0x58>
   118be:	cmp	r7, #0
   118c0:	beq.n	11926 <_scanf_chars+0xaa>
   118c2:	b.n	1190a <_scanf_chars+0x8e>
   118c4:	cmp	r0, #2
   118c6:	bne.n	1190a <_scanf_chars+0x8e>
   118c8:	ldr	r3, [r5, #0]
   118ca:	ldrb	r3, [r3, #0]
   118cc:	ldrb.w	r3, [r9, r3]
   118d0:	lsls	r3, r3, #28
   118d2:	bmi.n	1190a <_scanf_chars+0x8e>
   118d4:	ldr	r3, [r4, #0]
   118d6:	lsls	r2, r3, #27
   118d8:	ittt	pl
   118da:	ldrpl	r3, [r5, #0]
   118dc:	ldrbpl	r3, [r3, #0]
   118de:	strbpl.w	r3, [r6], #1
   118e2:	ldr	r2, [r5, #0]
   118e4:	ldr	r3, [r5, #4]
   118e6:	adds	r2, #1
   118e8:	str	r2, [r5, #0]
   118ea:	ldr	r2, [r4, #8]
   118ec:	subs	r3, #1
   118ee:	subs	r2, #1
   118f0:	str	r3, [r5, #4]
   118f2:	adds	r7, #1
   118f4:	str	r2, [r4, #8]
   118f6:	cbz	r2, 1190a <_scanf_chars+0x8e>
   118f8:	cmp	r3, #0
   118fa:	bgt.n	118ac <_scanf_chars+0x30>
   118fc:	ldr.w	r3, [r4, #384]	; 0x180
   11900:	mov	r1, r5
   11902:	mov	r0, r8
   11904:	blx	r3
   11906:	cmp	r0, #0
   11908:	beq.n	118ac <_scanf_chars+0x30>
   1190a:	ldr	r3, [r4, #0]
   1190c:	ands.w	r3, r3, #16
   11910:	bne.n	1191e <_scanf_chars+0xa2>
   11912:	ldr	r2, [r4, #12]
   11914:	adds	r2, #1
   11916:	str	r2, [r4, #12]
   11918:	ldr	r2, [r4, #24]
   1191a:	cbz	r2, 1191e <_scanf_chars+0xa2>
   1191c:	strb	r3, [r6, #0]
   1191e:	ldr	r3, [r4, #16]
   11920:	add	r3, r7
   11922:	str	r3, [r4, #16]
   11924:	movs	r0, #0
   11926:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1192a:	nop
   1192c:	.word	0x2000119d

00011930 <_scanf_i>:
   11930:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11934:	mov	r8, r3
   11936:	ldr	r3, [pc, #464]	; (11b08 <_scanf_i+0x1d8>)
   11938:	mov	r4, r1
   1193a:	mov	sl, r0
   1193c:	mov	r6, r2
   1193e:	ldmia.w	r3, {r0, r1, r2}
   11942:	sub	sp, #28
   11944:	add	r3, sp, #12
   11946:	stmia.w	r3, {r0, r1, r2}
   1194a:	ldr	r3, [pc, #448]	; (11b0c <_scanf_i+0x1dc>)
   1194c:	ldr	r1, [r4, #24]
   1194e:	ldr	r2, [pc, #448]	; (11b10 <_scanf_i+0x1e0>)
   11950:	cmp	r1, #3
   11952:	it	ne
   11954:	movne	r2, r3
   11956:	ldr	r3, [r4, #8]
   11958:	str	r2, [sp, #4]
   1195a:	subs	r2, r3, #1
   1195c:	cmp.w	r2, #348	; 0x15c
   11960:	it	hi
   11962:	mvnhi.w	r5, #348	; 0x15c
   11966:	mov	r7, r4
   11968:	ittt	hi
   1196a:	addhi.w	r9, r3, r5
   1196e:	movwhi	r3, #349	; 0x15d
   11972:	strhi	r3, [r4, #8]
   11974:	ldr.w	r3, [r7], #28
   11978:	orr.w	r3, r3, #3328	; 0xd00
   1197c:	it	ls
   1197e:	movls.w	r9, #0
   11982:	str	r3, [r4, #0]
   11984:	mov	r5, r7
   11986:	mov.w	fp, #0
   1198a:	ldr	r1, [r6, #0]
   1198c:	add	r3, sp, #12
   1198e:	ldrb	r1, [r1, #0]
   11990:	ldr.w	r0, [r3, fp, lsl #2]
   11994:	movs	r2, #2
   11996:	bl	f3f0 <memchr>
   1199a:	cbz	r0, 119e8 <_scanf_i+0xb8>
   1199c:	cmp.w	fp, #1
   119a0:	bne.n	11a56 <_scanf_i+0x126>
   119a2:	ldr	r2, [r4, #4]
   119a4:	cbnz	r2, 119b2 <_scanf_i+0x82>
   119a6:	ldr	r2, [r4, #0]
   119a8:	movs	r3, #8
   119aa:	orr.w	r2, r2, #512	; 0x200
   119ae:	str	r3, [r4, #4]
   119b0:	str	r2, [r4, #0]
   119b2:	ldr	r2, [r4, #0]
   119b4:	bic.w	r2, r2, #1280	; 0x500
   119b8:	str	r2, [r4, #0]
   119ba:	ldr	r2, [r4, #8]
   119bc:	subs	r1, r2, #1
   119be:	str	r1, [r4, #8]
   119c0:	cbz	r2, 119e8 <_scanf_i+0xb8>
   119c2:	ldr	r2, [r6, #0]
   119c4:	adds	r1, r2, #1
   119c6:	str	r1, [r6, #0]
   119c8:	ldrb	r2, [r2, #0]
   119ca:	strb.w	r2, [r5], #1
   119ce:	ldr	r2, [r6, #4]
   119d0:	subs	r2, #1
   119d2:	cmp	r2, #0
   119d4:	str	r2, [r6, #4]
   119d6:	bgt.n	119e8 <_scanf_i+0xb8>
   119d8:	ldr.w	r2, [r4, #384]	; 0x180
   119dc:	mov	r1, r6
   119de:	mov	r0, sl
   119e0:	blx	r2
   119e2:	cmp	r0, #0
   119e4:	bne.w	11af2 <_scanf_i+0x1c2>
   119e8:	add.w	fp, fp, #1
   119ec:	cmp.w	fp, #3
   119f0:	bne.n	1198a <_scanf_i+0x5a>
   119f2:	ldr	r3, [r4, #4]
   119f4:	cbnz	r3, 119fa <_scanf_i+0xca>
   119f6:	movs	r3, #10
   119f8:	str	r3, [r4, #4]
   119fa:	ldr	r3, [r4, #4]
   119fc:	ldr	r1, [pc, #276]	; (11b14 <_scanf_i+0x1e4>)
   119fe:	ldr	r0, [r4, #20]
   11a00:	subs	r1, r1, r3
   11a02:	bl	11c74 <__sccl>
   11a06:	mov.w	fp, #0
   11a0a:	ldr	r3, [r4, #8]
   11a0c:	ldr	r2, [r4, #0]
   11a0e:	cmp	r3, #0
   11a10:	beq.n	11a8e <_scanf_i+0x15e>
   11a12:	ldr	r1, [r6, #0]
   11a14:	ldr	r0, [r4, #20]
   11a16:	ldrb.w	ip, [r1]
   11a1a:	ldrb.w	r0, [r0, ip]
   11a1e:	cmp	r0, #0
   11a20:	beq.n	11a8e <_scanf_i+0x15e>
   11a22:	cmp.w	ip, #48	; 0x30
   11a26:	bne.n	11a72 <_scanf_i+0x142>
   11a28:	lsls	r0, r2, #20
   11a2a:	bpl.n	11a72 <_scanf_i+0x142>
   11a2c:	add.w	fp, fp, #1
   11a30:	cmp.w	r9, #0
   11a34:	beq.n	11a3e <_scanf_i+0x10e>
   11a36:	adds	r3, #1
   11a38:	add.w	r9, r9, #4294967295
   11a3c:	str	r3, [r4, #8]
   11a3e:	ldr	r3, [r6, #4]
   11a40:	subs	r3, #1
   11a42:	cmp	r3, #0
   11a44:	str	r3, [r6, #4]
   11a46:	ble.n	11a80 <_scanf_i+0x150>
   11a48:	ldr	r3, [r6, #0]
   11a4a:	adds	r3, #1
   11a4c:	str	r3, [r6, #0]
   11a4e:	ldr	r3, [r4, #8]
   11a50:	subs	r3, #1
   11a52:	str	r3, [r4, #8]
   11a54:	b.n	11a0a <_scanf_i+0xda>
   11a56:	cmp.w	fp, #2
   11a5a:	bne.n	119ba <_scanf_i+0x8a>
   11a5c:	ldr	r2, [r4, #0]
   11a5e:	and.w	r1, r2, #1536	; 0x600
   11a62:	cmp.w	r1, #512	; 0x200
   11a66:	bne.n	119e8 <_scanf_i+0xb8>
   11a68:	movs	r3, #16
   11a6a:	str	r3, [r4, #4]
   11a6c:	orr.w	r2, r2, #256	; 0x100
   11a70:	b.n	119b8 <_scanf_i+0x88>
   11a72:	bic.w	r2, r2, #2304	; 0x900
   11a76:	str	r2, [r4, #0]
   11a78:	ldrb	r3, [r1, #0]
   11a7a:	strb.w	r3, [r5], #1
   11a7e:	b.n	11a3e <_scanf_i+0x10e>
   11a80:	ldr.w	r3, [r4, #384]	; 0x180
   11a84:	mov	r1, r6
   11a86:	mov	r0, sl
   11a88:	blx	r3
   11a8a:	cmp	r0, #0
   11a8c:	beq.n	11a4e <_scanf_i+0x11e>
   11a8e:	ldr	r3, [r4, #0]
   11a90:	lsls	r1, r3, #23
   11a92:	bpl.n	11ab0 <_scanf_i+0x180>
   11a94:	cmp	r5, r7
   11a96:	bls.n	11aac <_scanf_i+0x17c>
   11a98:	ldrb.w	r1, [r5, #-1]
   11a9c:	ldr.w	r3, [r4, #380]	; 0x17c
   11aa0:	mov	r2, r6
   11aa2:	mov	r0, sl
   11aa4:	blx	r3
   11aa6:	add.w	r9, r5, #4294967295
   11aaa:	mov	r5, r9
   11aac:	cmp	r5, r7
   11aae:	beq.n	11b02 <_scanf_i+0x1d2>
   11ab0:	ldr	r2, [r4, #0]
   11ab2:	ands.w	r2, r2, #16
   11ab6:	bne.n	11ae0 <_scanf_i+0x1b0>
   11ab8:	strb	r2, [r5, #0]
   11aba:	ldr	r3, [r4, #4]
   11abc:	ldr	r6, [sp, #4]
   11abe:	mov	r1, r7
   11ac0:	mov	r0, sl
   11ac2:	blx	r6
   11ac4:	ldr.w	r3, [r8]
   11ac8:	ldr	r1, [r4, #0]
   11aca:	adds	r2, r3, #4
   11acc:	str.w	r2, [r8]
   11ad0:	tst.w	r1, #32
   11ad4:	ldr	r3, [r3, #0]
   11ad6:	beq.n	11af8 <_scanf_i+0x1c8>
   11ad8:	str	r0, [r3, #0]
   11ada:	ldr	r3, [r4, #12]
   11adc:	adds	r3, #1
   11ade:	str	r3, [r4, #12]
   11ae0:	ldr	r3, [r4, #16]
   11ae2:	subs	r5, r5, r7
   11ae4:	add	r5, fp
   11ae6:	add	r3, r5
   11ae8:	str	r3, [r4, #16]
   11aea:	movs	r0, #0
   11aec:	add	sp, #28
   11aee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11af2:	mov.w	fp, #0
   11af6:	b.n	11a8e <_scanf_i+0x15e>
   11af8:	lsls	r2, r1, #31
   11afa:	ite	mi
   11afc:	strhmi	r0, [r3, #0]
   11afe:	strpl	r0, [r3, #0]
   11b00:	b.n	11ada <_scanf_i+0x1aa>
   11b02:	movs	r0, #1
   11b04:	b.n	11aec <_scanf_i+0x1bc>
   11b06:	nop
   11b08:	.word	0x20000418
   11b0c:	.word	0x00011ea9
   11b10:	.word	0x0000e17d
   11b14:	.word	0x2000136a

00011b18 <__sflush_r>:
   11b18:	ldrh	r2, [r1, #12]
   11b1a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b1e:	mov	r5, r0
   11b20:	lsls	r0, r2, #28
   11b22:	mov	r4, r1
   11b24:	bmi.n	11bd8 <__sflush_r+0xc0>
   11b26:	ldr	r3, [r1, #4]
   11b28:	cmp	r3, #0
   11b2a:	bgt.n	11b38 <__sflush_r+0x20>
   11b2c:	ldr	r3, [r1, #64]	; 0x40
   11b2e:	cmp	r3, #0
   11b30:	bgt.n	11b38 <__sflush_r+0x20>
   11b32:	movs	r0, #0
   11b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b38:	ldr	r6, [r4, #44]	; 0x2c
   11b3a:	cmp	r6, #0
   11b3c:	beq.n	11b32 <__sflush_r+0x1a>
   11b3e:	movs	r3, #0
   11b40:	ands.w	r2, r2, #4096	; 0x1000
   11b44:	ldr	r7, [r5, #0]
   11b46:	ldr	r1, [r4, #32]
   11b48:	str	r3, [r5, #0]
   11b4a:	beq.n	11bb2 <__sflush_r+0x9a>
   11b4c:	ldr	r0, [r4, #84]	; 0x54
   11b4e:	ldrh	r3, [r4, #12]
   11b50:	lsls	r2, r3, #29
   11b52:	bpl.n	11b60 <__sflush_r+0x48>
   11b54:	ldr	r3, [r4, #4]
   11b56:	subs	r0, r0, r3
   11b58:	ldr	r3, [r4, #52]	; 0x34
   11b5a:	cbz	r3, 11b60 <__sflush_r+0x48>
   11b5c:	ldr	r3, [r4, #64]	; 0x40
   11b5e:	subs	r0, r0, r3
   11b60:	movs	r3, #0
   11b62:	mov	r2, r0
   11b64:	ldr	r6, [r4, #44]	; 0x2c
   11b66:	ldr	r1, [r4, #32]
   11b68:	mov	r0, r5
   11b6a:	blx	r6
   11b6c:	adds	r3, r0, #1
   11b6e:	ldrh	r3, [r4, #12]
   11b70:	bne.n	11b80 <__sflush_r+0x68>
   11b72:	ldr	r1, [r5, #0]
   11b74:	cmp	r1, #29
   11b76:	bhi.n	11bd0 <__sflush_r+0xb8>
   11b78:	ldr	r2, [pc, #164]	; (11c20 <__sflush_r+0x108>)
   11b7a:	asrs	r2, r1
   11b7c:	lsls	r6, r2, #31
   11b7e:	bmi.n	11bd0 <__sflush_r+0xb8>
   11b80:	movs	r2, #0
   11b82:	str	r2, [r4, #4]
   11b84:	lsls	r1, r3, #19
   11b86:	ldr	r2, [r4, #16]
   11b88:	str	r2, [r4, #0]
   11b8a:	bpl.n	11b96 <__sflush_r+0x7e>
   11b8c:	adds	r2, r0, #1
   11b8e:	bne.n	11b94 <__sflush_r+0x7c>
   11b90:	ldr	r3, [r5, #0]
   11b92:	cbnz	r3, 11b96 <__sflush_r+0x7e>
   11b94:	str	r0, [r4, #84]	; 0x54
   11b96:	ldr	r1, [r4, #52]	; 0x34
   11b98:	str	r7, [r5, #0]
   11b9a:	cmp	r1, #0
   11b9c:	beq.n	11b32 <__sflush_r+0x1a>
   11b9e:	add.w	r3, r4, #68	; 0x44
   11ba2:	cmp	r1, r3
   11ba4:	beq.n	11bac <__sflush_r+0x94>
   11ba6:	mov	r0, r5
   11ba8:	bl	100a8 <_free_r>
   11bac:	movs	r0, #0
   11bae:	str	r0, [r4, #52]	; 0x34
   11bb0:	b.n	11b34 <__sflush_r+0x1c>
   11bb2:	movs	r3, #1
   11bb4:	mov	r0, r5
   11bb6:	blx	r6
   11bb8:	adds	r1, r0, #1
   11bba:	bne.n	11b4e <__sflush_r+0x36>
   11bbc:	ldr	r3, [r5, #0]
   11bbe:	cmp	r3, #0
   11bc0:	beq.n	11b4e <__sflush_r+0x36>
   11bc2:	cmp	r3, #29
   11bc4:	beq.n	11bca <__sflush_r+0xb2>
   11bc6:	cmp	r3, #22
   11bc8:	bne.n	11bce <__sflush_r+0xb6>
   11bca:	str	r7, [r5, #0]
   11bcc:	b.n	11b32 <__sflush_r+0x1a>
   11bce:	ldrh	r3, [r4, #12]
   11bd0:	orr.w	r3, r3, #64	; 0x40
   11bd4:	strh	r3, [r4, #12]
   11bd6:	b.n	11b34 <__sflush_r+0x1c>
   11bd8:	ldr	r7, [r1, #16]
   11bda:	cmp	r7, #0
   11bdc:	beq.n	11b32 <__sflush_r+0x1a>
   11bde:	lsls	r3, r2, #30
   11be0:	ldr	r6, [r1, #0]
   11be2:	it	eq
   11be4:	ldreq	r3, [r1, #20]
   11be6:	str	r7, [r1, #0]
   11be8:	it	ne
   11bea:	movne	r3, #0
   11bec:	sub.w	r8, r6, r7
   11bf0:	str	r3, [r1, #8]
   11bf2:	cmp.w	r8, #0
   11bf6:	ble.n	11b32 <__sflush_r+0x1a>
   11bf8:	ldr	r1, [r4, #32]
   11bfa:	ldr	r6, [r4, #40]	; 0x28
   11bfc:	mov	r3, r8
   11bfe:	mov	r2, r7
   11c00:	mov	r0, r5
   11c02:	blx	r6
   11c04:	cmp	r0, #0
   11c06:	bgt.n	11c16 <__sflush_r+0xfe>
   11c08:	ldrh	r3, [r4, #12]
   11c0a:	orr.w	r3, r3, #64	; 0x40
   11c0e:	strh	r3, [r4, #12]
   11c10:	mov.w	r0, #4294967295
   11c14:	b.n	11b34 <__sflush_r+0x1c>
   11c16:	add	r7, r0
   11c18:	sub.w	r8, r8, r0
   11c1c:	b.n	11bf2 <__sflush_r+0xda>
   11c1e:	nop
   11c20:	.word	0xdfbffffe

00011c24 <_fflush_r>:
   11c24:	push	{r3, r4, r5, lr}
   11c26:	ldr	r3, [r1, #16]
   11c28:	mov	r5, r0
   11c2a:	mov	r4, r1
   11c2c:	cbnz	r3, 11c34 <_fflush_r+0x10>
   11c2e:	movs	r5, #0
   11c30:	mov	r0, r5
   11c32:	pop	{r3, r4, r5, pc}
   11c34:	cbz	r0, 11c3e <_fflush_r+0x1a>
   11c36:	ldr	r3, [r0, #32]
   11c38:	cbnz	r3, 11c3e <_fflush_r+0x1a>
   11c3a:	bl	ef20 <__sinit>
   11c3e:	ldrsh.w	r3, [r4, #12]
   11c42:	cmp	r3, #0
   11c44:	beq.n	11c2e <_fflush_r+0xa>
   11c46:	ldr	r2, [r4, #100]	; 0x64
   11c48:	lsls	r0, r2, #31
   11c4a:	bmi.n	11c56 <_fflush_r+0x32>
   11c4c:	lsls	r1, r3, #22
   11c4e:	bmi.n	11c56 <_fflush_r+0x32>
   11c50:	ldr	r0, [r4, #88]	; 0x58
   11c52:	bl	f3d0 <__retarget_lock_acquire_recursive>
   11c56:	mov	r0, r5
   11c58:	mov	r1, r4
   11c5a:	bl	11b18 <__sflush_r>
   11c5e:	ldr	r3, [r4, #100]	; 0x64
   11c60:	lsls	r2, r3, #31
   11c62:	mov	r5, r0
   11c64:	bmi.n	11c30 <_fflush_r+0xc>
   11c66:	ldrh	r3, [r4, #12]
   11c68:	lsls	r3, r3, #22
   11c6a:	bmi.n	11c30 <_fflush_r+0xc>
   11c6c:	ldr	r0, [r4, #88]	; 0x58
   11c6e:	bl	f3d2 <__retarget_lock_release_recursive>
   11c72:	b.n	11c30 <_fflush_r+0xc>

00011c74 <__sccl>:
   11c74:	push	{r4, r5, r6, lr}
   11c76:	ldrb	r3, [r1, #0]
   11c78:	mov	r4, r0
   11c7a:	cmp	r3, #94	; 0x5e
   11c7c:	itete	eq
   11c7e:	ldrbeq	r3, [r1, #1]
   11c80:	addne	r2, r1, #1
   11c82:	addeq	r2, r1, #2
   11c84:	movne	r1, #0
   11c86:	it	eq
   11c88:	moveq	r1, #1
   11c8a:	subs	r0, #1
   11c8c:	add.w	r5, r4, #255	; 0xff
   11c90:	strb.w	r1, [r0, #1]!
   11c94:	cmp	r0, r5
   11c96:	bne.n	11c90 <__sccl+0x1c>
   11c98:	cbnz	r3, 11c9e <__sccl+0x2a>
   11c9a:	subs	r0, r2, #1
   11c9c:	pop	{r4, r5, r6, pc}
   11c9e:	eor.w	r1, r1, #1
   11ca2:	strb	r1, [r4, r3]
   11ca4:	mov	r0, r2
   11ca6:	mov	r2, r0
   11ca8:	ldrb.w	r5, [r2], #1
   11cac:	cmp	r5, #45	; 0x2d
   11cae:	beq.n	11cbc <__sccl+0x48>
   11cb0:	cmp	r5, #93	; 0x5d
   11cb2:	beq.n	11ce2 <__sccl+0x6e>
   11cb4:	cmp	r5, #0
   11cb6:	beq.n	11c9c <__sccl+0x28>
   11cb8:	mov	r3, r5
   11cba:	b.n	11ca2 <__sccl+0x2e>
   11cbc:	ldrb	r6, [r0, #1]
   11cbe:	cmp	r6, #93	; 0x5d
   11cc0:	beq.n	11cb8 <__sccl+0x44>
   11cc2:	cmp	r3, r6
   11cc4:	bgt.n	11cb8 <__sccl+0x44>
   11cc6:	adds	r0, #2
   11cc8:	mov	r2, r3
   11cca:	adds	r2, #1
   11ccc:	cmp	r6, r2
   11cce:	strb	r1, [r4, r2]
   11cd0:	bgt.n	11cca <__sccl+0x56>
   11cd2:	subs	r2, r6, r3
   11cd4:	subs	r2, #1
   11cd6:	adds	r5, r3, #1
   11cd8:	cmp	r3, r6
   11cda:	it	ge
   11cdc:	movge	r2, #0
   11cde:	adds	r3, r5, r2
   11ce0:	b.n	11ca6 <__sccl+0x32>
   11ce2:	mov	r0, r2
   11ce4:	b.n	11c9c <__sccl+0x28>

00011ce6 <__submore>:
   11ce6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11cea:	mov	r4, r1
   11cec:	ldr	r1, [r1, #52]	; 0x34
   11cee:	add.w	r3, r4, #68	; 0x44
   11cf2:	cmp	r1, r3
   11cf4:	bne.n	11d32 <__submore+0x4c>
   11cf6:	mov.w	r1, #1024	; 0x400
   11cfa:	bl	d370 <_malloc_r>
   11cfe:	cbnz	r0, 11d08 <__submore+0x22>
   11d00:	mov.w	r0, #4294967295
   11d04:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d08:	mov.w	r3, #1024	; 0x400
   11d0c:	str	r3, [r4, #56]	; 0x38
   11d0e:	ldrb.w	r3, [r4, #70]	; 0x46
   11d12:	str	r0, [r4, #52]	; 0x34
   11d14:	strb.w	r3, [r0, #1023]	; 0x3ff
   11d18:	ldrb.w	r3, [r4, #69]	; 0x45
   11d1c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11d20:	ldrb.w	r3, [r4, #68]	; 0x44
   11d24:	strb.w	r3, [r0, #1021]	; 0x3fd
   11d28:	addw	r0, r0, #1021	; 0x3fd
   11d2c:	str	r0, [r4, #0]
   11d2e:	movs	r0, #0
   11d30:	b.n	11d04 <__submore+0x1e>
   11d32:	ldr	r6, [r4, #56]	; 0x38
   11d34:	lsls	r7, r6, #1
   11d36:	mov	r2, r7
   11d38:	bl	d474 <_realloc_r>
   11d3c:	mov	r5, r0
   11d3e:	cmp	r0, #0
   11d40:	beq.n	11d00 <__submore+0x1a>
   11d42:	add.w	r8, r0, r6
   11d46:	mov	r1, r0
   11d48:	mov	r2, r6
   11d4a:	mov	r0, r8
   11d4c:	bl	a8dc <memcpy>
   11d50:	strd	r5, r7, [r4, #52]	; 0x34
   11d54:	str.w	r8, [r4]
   11d58:	b.n	11d2e <__submore+0x48>
	...

00011d5c <__assert_func>:
   11d5c:	push	{r0, r1, r2, r3, r4, lr}
   11d5e:	mov	r4, r2
   11d60:	mov	r2, r3
   11d62:	ldr	r3, [pc, #36]	; (11d88 <__assert_func+0x2c>)
   11d64:	ldr	r3, [r3, #0]
   11d66:	mov	r5, r0
   11d68:	ldr	r0, [r3, #12]
   11d6a:	cbz	r4, 11d80 <__assert_func+0x24>
   11d6c:	ldr	r3, [pc, #28]	; (11d8c <__assert_func+0x30>)
   11d6e:	str	r1, [sp, #0]
   11d70:	strd	r3, r4, [sp, #4]
   11d74:	ldr	r1, [pc, #24]	; (11d90 <__assert_func+0x34>)
   11d76:	mov	r3, r5
   11d78:	bl	11eac <fiprintf>
   11d7c:	bl	c01a <abort>
   11d80:	ldr	r3, [pc, #16]	; (11d94 <__assert_func+0x38>)
   11d82:	mov	r4, r3
   11d84:	b.n	11d6e <__assert_func+0x12>
   11d86:	nop
   11d88:	.word	0x2000222c
   11d8c:	.word	0x200010ff
   11d90:	.word	0x2000110c
   11d94:	.word	0x20000d24

00011d98 <_calloc_r>:
   11d98:	push	{r0, r1, r2, r4, r5, lr}
   11d9a:	umull	r2, r4, r1, r2
   11d9e:	cbnz	r4, 11db4 <_calloc_r+0x1c>
   11da0:	mov	r1, r2
   11da2:	str	r2, [sp, #4]
   11da4:	bl	d370 <_malloc_r>
   11da8:	ldr	r2, [sp, #4]
   11daa:	mov	r5, r0
   11dac:	cbnz	r0, 11dbc <_calloc_r+0x24>
   11dae:	mov	r0, r5
   11db0:	add	sp, #12
   11db2:	pop	{r4, r5, pc}
   11db4:	movs	r2, #12
   11db6:	str	r2, [r0, #0]
   11db8:	movs	r5, #0
   11dba:	b.n	11dae <_calloc_r+0x16>
   11dbc:	mov	r1, r4
   11dbe:	bl	a898 <memset>
   11dc2:	b.n	11dae <_calloc_r+0x16>

00011dc4 <_strtoul_l.constprop.0>:
   11dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11dc8:	ldr	r7, [pc, #216]	; (11ea4 <_strtoul_l.constprop.0+0xe0>)
   11dca:	mov	lr, r0
   11dcc:	mov	r5, r1
   11dce:	mov	r0, r5
   11dd0:	ldrb.w	r4, [r5], #1
   11dd4:	ldrb	r6, [r7, r4]
   11dd6:	ands.w	r6, r6, #8
   11dda:	bne.n	11dce <_strtoul_l.constprop.0+0xa>
   11ddc:	cmp	r4, #45	; 0x2d
   11dde:	bne.n	11e42 <_strtoul_l.constprop.0+0x7e>
   11de0:	ldrb	r4, [r5, #0]
   11de2:	movs	r6, #1
   11de4:	adds	r5, r0, #2
   11de6:	cmp	r3, #0
   11de8:	beq.n	11e9a <_strtoul_l.constprop.0+0xd6>
   11dea:	cmp	r3, #16
   11dec:	bne.n	11e02 <_strtoul_l.constprop.0+0x3e>
   11dee:	cmp	r4, #48	; 0x30
   11df0:	bne.n	11e02 <_strtoul_l.constprop.0+0x3e>
   11df2:	ldrb	r0, [r5, #0]
   11df4:	and.w	r0, r0, #223	; 0xdf
   11df8:	cmp	r0, #88	; 0x58
   11dfa:	bne.n	11e90 <_strtoul_l.constprop.0+0xcc>
   11dfc:	ldrb	r4, [r5, #1]
   11dfe:	movs	r3, #16
   11e00:	adds	r5, #2
   11e02:	mov.w	r8, #4294967295
   11e06:	movs	r7, #0
   11e08:	udiv	r8, r8, r3
   11e0c:	mul.w	r9, r3, r8
   11e10:	mvn.w	r9, r9
   11e14:	mov	r0, r7
   11e16:	sub.w	ip, r4, #48	; 0x30
   11e1a:	cmp.w	ip, #9
   11e1e:	bhi.n	11e4c <_strtoul_l.constprop.0+0x88>
   11e20:	mov	r4, ip
   11e22:	cmp	r3, r4
   11e24:	ble.n	11e6e <_strtoul_l.constprop.0+0xaa>
   11e26:	cmp.w	r7, #4294967295
   11e2a:	beq.n	11e3c <_strtoul_l.constprop.0+0x78>
   11e2c:	cmp	r8, r0
   11e2e:	bcc.n	11e68 <_strtoul_l.constprop.0+0xa4>
   11e30:	bne.n	11e36 <_strtoul_l.constprop.0+0x72>
   11e32:	cmp	r9, r4
   11e34:	blt.n	11e68 <_strtoul_l.constprop.0+0xa4>
   11e36:	mla	r0, r0, r3, r4
   11e3a:	movs	r7, #1
   11e3c:	ldrb.w	r4, [r5], #1
   11e40:	b.n	11e16 <_strtoul_l.constprop.0+0x52>
   11e42:	cmp	r4, #43	; 0x2b
   11e44:	itt	eq
   11e46:	ldrbeq	r4, [r5, #0]
   11e48:	addeq	r5, r0, #2
   11e4a:	b.n	11de6 <_strtoul_l.constprop.0+0x22>
   11e4c:	sub.w	ip, r4, #65	; 0x41
   11e50:	cmp.w	ip, #25
   11e54:	bhi.n	11e5a <_strtoul_l.constprop.0+0x96>
   11e56:	subs	r4, #55	; 0x37
   11e58:	b.n	11e22 <_strtoul_l.constprop.0+0x5e>
   11e5a:	sub.w	ip, r4, #97	; 0x61
   11e5e:	cmp.w	ip, #25
   11e62:	bhi.n	11e6e <_strtoul_l.constprop.0+0xaa>
   11e64:	subs	r4, #87	; 0x57
   11e66:	b.n	11e22 <_strtoul_l.constprop.0+0x5e>
   11e68:	mov.w	r7, #4294967295
   11e6c:	b.n	11e3c <_strtoul_l.constprop.0+0x78>
   11e6e:	adds	r3, r7, #1
   11e70:	bne.n	11e80 <_strtoul_l.constprop.0+0xbc>
   11e72:	movs	r3, #34	; 0x22
   11e74:	str.w	r3, [lr]
   11e78:	mov	r0, r7
   11e7a:	cbnz	r2, 11e8a <_strtoul_l.constprop.0+0xc6>
   11e7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11e80:	cbz	r6, 11e84 <_strtoul_l.constprop.0+0xc0>
   11e82:	negs	r0, r0
   11e84:	cmp	r2, #0
   11e86:	beq.n	11e7c <_strtoul_l.constprop.0+0xb8>
   11e88:	cbz	r7, 11e8c <_strtoul_l.constprop.0+0xc8>
   11e8a:	subs	r1, r5, #1
   11e8c:	str	r1, [r2, #0]
   11e8e:	b.n	11e7c <_strtoul_l.constprop.0+0xb8>
   11e90:	movs	r4, #48	; 0x30
   11e92:	cmp	r3, #0
   11e94:	bne.n	11e02 <_strtoul_l.constprop.0+0x3e>
   11e96:	movs	r3, #8
   11e98:	b.n	11e02 <_strtoul_l.constprop.0+0x3e>
   11e9a:	cmp	r4, #48	; 0x30
   11e9c:	beq.n	11df2 <_strtoul_l.constprop.0+0x2e>
   11e9e:	movs	r3, #10
   11ea0:	b.n	11e02 <_strtoul_l.constprop.0+0x3e>
   11ea2:	nop
   11ea4:	.word	0x2000119d

00011ea8 <_strtoul_r>:
   11ea8:	b.w	11dc4 <_strtoul_l.constprop.0>

00011eac <fiprintf>:
   11eac:	push	{r1, r2, r3}
   11eae:	push	{r0, r1, lr}
   11eb0:	mov	r1, r0
   11eb2:	add	r3, sp, #12
   11eb4:	ldr	r0, [pc, #20]	; (11ecc <fiprintf+0x20>)
   11eb6:	ldr.w	r2, [r3], #4
   11eba:	ldr	r0, [r0, #0]
   11ebc:	str	r3, [sp, #4]
   11ebe:	bl	11f24 <_vfiprintf_r>
   11ec2:	add	sp, #8
   11ec4:	ldr.w	lr, [sp], #4
   11ec8:	add	sp, #12
   11eca:	bx	lr
   11ecc:	.word	0x2000222c

00011ed0 <__sfputc_r>:
   11ed0:	ldr	r3, [r2, #8]
   11ed2:	subs	r3, #1
   11ed4:	cmp	r3, #0
   11ed6:	push	{r4}
   11ed8:	str	r3, [r2, #8]
   11eda:	bge.n	11eee <__sfputc_r+0x1e>
   11edc:	ldr	r4, [r2, #24]
   11ede:	cmp	r3, r4
   11ee0:	blt.n	11ee6 <__sfputc_r+0x16>
   11ee2:	cmp	r1, #10
   11ee4:	bne.n	11eee <__sfputc_r+0x1e>
   11ee6:	ldr.w	r4, [sp], #4
   11eea:	b.w	12158 <__swbuf_r>
   11eee:	ldr	r3, [r2, #0]
   11ef0:	adds	r0, r3, #1
   11ef2:	str	r0, [r2, #0]
   11ef4:	strb	r1, [r3, #0]
   11ef6:	mov	r0, r1
   11ef8:	ldr.w	r4, [sp], #4
   11efc:	bx	lr

00011efe <__sfputs_r>:
   11efe:	push	{r3, r4, r5, r6, r7, lr}
   11f00:	mov	r6, r0
   11f02:	mov	r7, r1
   11f04:	mov	r4, r2
   11f06:	adds	r5, r2, r3
   11f08:	cmp	r4, r5
   11f0a:	bne.n	11f10 <__sfputs_r+0x12>
   11f0c:	movs	r0, #0
   11f0e:	b.n	11f20 <__sfputs_r+0x22>
   11f10:	ldrb.w	r1, [r4], #1
   11f14:	mov	r2, r7
   11f16:	mov	r0, r6
   11f18:	bl	11ed0 <__sfputc_r>
   11f1c:	adds	r3, r0, #1
   11f1e:	bne.n	11f08 <__sfputs_r+0xa>
   11f20:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011f24 <_vfiprintf_r>:
   11f24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f28:	mov	r5, r1
   11f2a:	sub	sp, #116	; 0x74
   11f2c:	mov	r4, r2
   11f2e:	mov	r8, r3
   11f30:	mov	r6, r0
   11f32:	cbz	r0, 11f3c <_vfiprintf_r+0x18>
   11f34:	ldr	r3, [r0, #32]
   11f36:	cbnz	r3, 11f3c <_vfiprintf_r+0x18>
   11f38:	bl	ef20 <__sinit>
   11f3c:	ldr	r3, [r5, #100]	; 0x64
   11f3e:	lsls	r1, r3, #31
   11f40:	bmi.n	11f4e <_vfiprintf_r+0x2a>
   11f42:	ldrh	r3, [r5, #12]
   11f44:	lsls	r2, r3, #22
   11f46:	bmi.n	11f4e <_vfiprintf_r+0x2a>
   11f48:	ldr	r0, [r5, #88]	; 0x58
   11f4a:	bl	f3d0 <__retarget_lock_acquire_recursive>
   11f4e:	ldrh	r3, [r5, #12]
   11f50:	lsls	r3, r3, #28
   11f52:	bpl.n	11f58 <_vfiprintf_r+0x34>
   11f54:	ldr	r3, [r5, #16]
   11f56:	cbnz	r3, 11f80 <_vfiprintf_r+0x5c>
   11f58:	mov	r1, r5
   11f5a:	mov	r0, r6
   11f5c:	bl	121d4 <__swsetup_r>
   11f60:	cbz	r0, 11f80 <_vfiprintf_r+0x5c>
   11f62:	ldr	r3, [r5, #100]	; 0x64
   11f64:	lsls	r4, r3, #31
   11f66:	bpl.n	11f72 <_vfiprintf_r+0x4e>
   11f68:	mov.w	r0, #4294967295
   11f6c:	add	sp, #116	; 0x74
   11f6e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f72:	ldrh	r3, [r5, #12]
   11f74:	lsls	r0, r3, #22
   11f76:	bmi.n	11f68 <_vfiprintf_r+0x44>
   11f78:	ldr	r0, [r5, #88]	; 0x58
   11f7a:	bl	f3d2 <__retarget_lock_release_recursive>
   11f7e:	b.n	11f68 <_vfiprintf_r+0x44>
   11f80:	movs	r3, #0
   11f82:	str	r3, [sp, #36]	; 0x24
   11f84:	movs	r3, #32
   11f86:	strb.w	r3, [sp, #41]	; 0x29
   11f8a:	str.w	r8, [sp, #12]
   11f8e:	movs	r3, #48	; 0x30
   11f90:	ldr.w	r8, [pc, #432]	; 12144 <_vfiprintf_r+0x220>
   11f94:	strb.w	r3, [sp, #42]	; 0x2a
   11f98:	mov.w	r9, #1
   11f9c:	mov	r3, r4
   11f9e:	mov	sl, r3
   11fa0:	ldrb.w	r2, [r3], #1
   11fa4:	cbz	r2, 11faa <_vfiprintf_r+0x86>
   11fa6:	cmp	r2, #37	; 0x25
   11fa8:	bne.n	11f9e <_vfiprintf_r+0x7a>
   11faa:	subs.w	fp, sl, r4
   11fae:	beq.n	11fc8 <_vfiprintf_r+0xa4>
   11fb0:	mov	r3, fp
   11fb2:	mov	r2, r4
   11fb4:	mov	r1, r5
   11fb6:	mov	r0, r6
   11fb8:	bl	11efe <__sfputs_r>
   11fbc:	adds	r0, #1
   11fbe:	beq.w	12114 <_vfiprintf_r+0x1f0>
   11fc2:	ldr	r2, [sp, #36]	; 0x24
   11fc4:	add	r2, fp
   11fc6:	str	r2, [sp, #36]	; 0x24
   11fc8:	ldrb.w	r3, [sl]
   11fcc:	cmp	r3, #0
   11fce:	beq.w	12114 <_vfiprintf_r+0x1f0>
   11fd2:	movs	r3, #0
   11fd4:	mov.w	r2, #4294967295
   11fd8:	strd	r2, r3, [sp, #20]
   11fdc:	add.w	sl, sl, #1
   11fe0:	str	r3, [sp, #16]
   11fe2:	str	r3, [sp, #28]
   11fe4:	strb.w	r3, [sp, #83]	; 0x53
   11fe8:	str	r3, [sp, #104]	; 0x68
   11fea:	mov	r4, sl
   11fec:	movs	r2, #5
   11fee:	ldrb.w	r1, [r4], #1
   11ff2:	ldr	r0, [pc, #336]	; (12144 <_vfiprintf_r+0x220>)
   11ff4:	bl	f3f0 <memchr>
   11ff8:	ldr	r2, [sp, #16]
   11ffa:	cbnz	r0, 12034 <_vfiprintf_r+0x110>
   11ffc:	lsls	r1, r2, #27
   11ffe:	itt	mi
   12000:	movmi	r3, #32
   12002:	strbmi.w	r3, [sp, #83]	; 0x53
   12006:	lsls	r3, r2, #28
   12008:	itt	mi
   1200a:	movmi	r3, #43	; 0x2b
   1200c:	strbmi.w	r3, [sp, #83]	; 0x53
   12010:	ldrb.w	r3, [sl]
   12014:	cmp	r3, #42	; 0x2a
   12016:	beq.n	12044 <_vfiprintf_r+0x120>
   12018:	ldr	r2, [sp, #28]
   1201a:	mov	r4, sl
   1201c:	movs	r0, #0
   1201e:	mov.w	ip, #10
   12022:	mov	r1, r4
   12024:	ldrb.w	r3, [r1], #1
   12028:	subs	r3, #48	; 0x30
   1202a:	cmp	r3, #9
   1202c:	bls.n	120ca <_vfiprintf_r+0x1a6>
   1202e:	cbz	r0, 1205e <_vfiprintf_r+0x13a>
   12030:	str	r2, [sp, #28]
   12032:	b.n	1205e <_vfiprintf_r+0x13a>
   12034:	sub.w	r3, r0, r8
   12038:	lsl.w	r3, r9, r3
   1203c:	orrs	r3, r2
   1203e:	str	r3, [sp, #16]
   12040:	mov	sl, r4
   12042:	b.n	11fea <_vfiprintf_r+0xc6>
   12044:	ldr	r3, [sp, #12]
   12046:	adds	r1, r3, #4
   12048:	ldr	r3, [r3, #0]
   1204a:	str	r1, [sp, #12]
   1204c:	cmp	r3, #0
   1204e:	ittet	lt
   12050:	neglt	r3, r3
   12052:	orrlt.w	r2, r2, #2
   12056:	strge	r3, [sp, #28]
   12058:	strlt	r3, [sp, #28]
   1205a:	it	lt
   1205c:	strlt	r2, [sp, #16]
   1205e:	ldrb	r3, [r4, #0]
   12060:	cmp	r3, #46	; 0x2e
   12062:	bne.n	1207e <_vfiprintf_r+0x15a>
   12064:	ldrb	r3, [r4, #1]
   12066:	cmp	r3, #42	; 0x2a
   12068:	bne.n	120d4 <_vfiprintf_r+0x1b0>
   1206a:	ldr	r3, [sp, #12]
   1206c:	adds	r2, r3, #4
   1206e:	ldr	r3, [r3, #0]
   12070:	str	r2, [sp, #12]
   12072:	cmp	r3, #0
   12074:	it	lt
   12076:	movlt.w	r3, #4294967295
   1207a:	adds	r4, #2
   1207c:	str	r3, [sp, #20]
   1207e:	ldr.w	sl, [pc, #212]	; 12154 <_vfiprintf_r+0x230>
   12082:	ldrb	r1, [r4, #0]
   12084:	movs	r2, #3
   12086:	mov	r0, sl
   12088:	bl	f3f0 <memchr>
   1208c:	cbz	r0, 1209e <_vfiprintf_r+0x17a>
   1208e:	ldr	r3, [sp, #16]
   12090:	sub.w	r0, r0, sl
   12094:	movs	r2, #64	; 0x40
   12096:	lsls	r2, r0
   12098:	orrs	r3, r2
   1209a:	adds	r4, #1
   1209c:	str	r3, [sp, #16]
   1209e:	ldrb.w	r1, [r4], #1
   120a2:	ldr	r0, [pc, #164]	; (12148 <_vfiprintf_r+0x224>)
   120a4:	strb.w	r1, [sp, #40]	; 0x28
   120a8:	movs	r2, #6
   120aa:	bl	f3f0 <memchr>
   120ae:	cmp	r0, #0
   120b0:	beq.n	12132 <_vfiprintf_r+0x20e>
   120b2:	ldr	r3, [pc, #152]	; (1214c <_vfiprintf_r+0x228>)
   120b4:	cbnz	r3, 120fe <_vfiprintf_r+0x1da>
   120b6:	ldr	r3, [sp, #12]
   120b8:	adds	r3, #7
   120ba:	bic.w	r3, r3, #7
   120be:	adds	r3, #8
   120c0:	str	r3, [sp, #12]
   120c2:	ldr	r3, [sp, #36]	; 0x24
   120c4:	add	r3, r7
   120c6:	str	r3, [sp, #36]	; 0x24
   120c8:	b.n	11f9c <_vfiprintf_r+0x78>
   120ca:	mla	r2, ip, r2, r3
   120ce:	mov	r4, r1
   120d0:	movs	r0, #1
   120d2:	b.n	12022 <_vfiprintf_r+0xfe>
   120d4:	movs	r3, #0
   120d6:	adds	r4, #1
   120d8:	str	r3, [sp, #20]
   120da:	mov	r1, r3
   120dc:	mov.w	ip, #10
   120e0:	mov	r0, r4
   120e2:	ldrb.w	r2, [r0], #1
   120e6:	subs	r2, #48	; 0x30
   120e8:	cmp	r2, #9
   120ea:	bls.n	120f4 <_vfiprintf_r+0x1d0>
   120ec:	cmp	r3, #0
   120ee:	beq.n	1207e <_vfiprintf_r+0x15a>
   120f0:	str	r1, [sp, #20]
   120f2:	b.n	1207e <_vfiprintf_r+0x15a>
   120f4:	mla	r1, ip, r1, r2
   120f8:	mov	r4, r0
   120fa:	movs	r3, #1
   120fc:	b.n	120e0 <_vfiprintf_r+0x1bc>
   120fe:	add	r3, sp, #12
   12100:	str	r3, [sp, #0]
   12102:	mov	r2, r5
   12104:	ldr	r3, [pc, #72]	; (12150 <_vfiprintf_r+0x22c>)
   12106:	add	r1, sp, #16
   12108:	mov	r0, r6
   1210a:	bl	e2d0 <_printf_float>
   1210e:	mov	r7, r0
   12110:	adds	r0, r7, #1
   12112:	bne.n	120c2 <_vfiprintf_r+0x19e>
   12114:	ldr	r3, [r5, #100]	; 0x64
   12116:	lsls	r1, r3, #31
   12118:	bmi.n	12126 <_vfiprintf_r+0x202>
   1211a:	ldrh	r3, [r5, #12]
   1211c:	lsls	r2, r3, #22
   1211e:	bmi.n	12126 <_vfiprintf_r+0x202>
   12120:	ldr	r0, [r5, #88]	; 0x58
   12122:	bl	f3d2 <__retarget_lock_release_recursive>
   12126:	ldrh	r3, [r5, #12]
   12128:	lsls	r3, r3, #25
   1212a:	bmi.w	11f68 <_vfiprintf_r+0x44>
   1212e:	ldr	r0, [sp, #36]	; 0x24
   12130:	b.n	11f6c <_vfiprintf_r+0x48>
   12132:	add	r3, sp, #12
   12134:	str	r3, [sp, #0]
   12136:	mov	r2, r5
   12138:	ldr	r3, [pc, #20]	; (12150 <_vfiprintf_r+0x22c>)
   1213a:	add	r1, sp, #16
   1213c:	mov	r0, r6
   1213e:	bl	e7e0 <_printf_i>
   12142:	b.n	1210e <_vfiprintf_r+0x1ea>
   12144:	.word	0x20001372
   12148:	.word	0x2000137c
   1214c:	.word	0x0000e2d1
   12150:	.word	0x00011eff
   12154:	.word	0x20001378

00012158 <__swbuf_r>:
   12158:	push	{r3, r4, r5, r6, r7, lr}
   1215a:	mov	r6, r1
   1215c:	mov	r4, r2
   1215e:	mov	r5, r0
   12160:	cbz	r0, 1216a <__swbuf_r+0x12>
   12162:	ldr	r3, [r0, #32]
   12164:	cbnz	r3, 1216a <__swbuf_r+0x12>
   12166:	bl	ef20 <__sinit>
   1216a:	ldr	r3, [r4, #24]
   1216c:	str	r3, [r4, #8]
   1216e:	ldrh	r3, [r4, #12]
   12170:	lsls	r2, r3, #28
   12172:	bpl.n	121c0 <__swbuf_r+0x68>
   12174:	ldr	r3, [r4, #16]
   12176:	cbz	r3, 121c0 <__swbuf_r+0x68>
   12178:	ldr	r3, [r4, #0]
   1217a:	ldr	r2, [r4, #16]
   1217c:	subs	r0, r3, r2
   1217e:	ldr	r3, [r4, #20]
   12180:	uxtb	r6, r6
   12182:	cmp	r3, r0
   12184:	mov	r7, r6
   12186:	bgt.n	12192 <__swbuf_r+0x3a>
   12188:	mov	r1, r4
   1218a:	mov	r0, r5
   1218c:	bl	11c24 <_fflush_r>
   12190:	cbnz	r0, 121cc <__swbuf_r+0x74>
   12192:	ldr	r3, [r4, #8]
   12194:	subs	r3, #1
   12196:	str	r3, [r4, #8]
   12198:	ldr	r3, [r4, #0]
   1219a:	adds	r2, r3, #1
   1219c:	str	r2, [r4, #0]
   1219e:	strb	r6, [r3, #0]
   121a0:	ldr	r2, [r4, #20]
   121a2:	adds	r3, r0, #1
   121a4:	cmp	r2, r3
   121a6:	beq.n	121b2 <__swbuf_r+0x5a>
   121a8:	ldrh	r3, [r4, #12]
   121aa:	lsls	r3, r3, #31
   121ac:	bpl.n	121bc <__swbuf_r+0x64>
   121ae:	cmp	r6, #10
   121b0:	bne.n	121bc <__swbuf_r+0x64>
   121b2:	mov	r1, r4
   121b4:	mov	r0, r5
   121b6:	bl	11c24 <_fflush_r>
   121ba:	cbnz	r0, 121cc <__swbuf_r+0x74>
   121bc:	mov	r0, r7
   121be:	pop	{r3, r4, r5, r6, r7, pc}
   121c0:	mov	r1, r4
   121c2:	mov	r0, r5
   121c4:	bl	121d4 <__swsetup_r>
   121c8:	cmp	r0, #0
   121ca:	beq.n	12178 <__swbuf_r+0x20>
   121cc:	mov.w	r7, #4294967295
   121d0:	b.n	121bc <__swbuf_r+0x64>
	...

000121d4 <__swsetup_r>:
   121d4:	push	{r3, r4, r5, lr}
   121d6:	ldr	r3, [pc, #168]	; (12280 <__swsetup_r+0xac>)
   121d8:	mov	r5, r0
   121da:	ldr	r0, [r3, #0]
   121dc:	mov	r4, r1
   121de:	cbz	r0, 121e8 <__swsetup_r+0x14>
   121e0:	ldr	r3, [r0, #32]
   121e2:	cbnz	r3, 121e8 <__swsetup_r+0x14>
   121e4:	bl	ef20 <__sinit>
   121e8:	ldrh	r3, [r4, #12]
   121ea:	ldrsh.w	r2, [r4, #12]
   121ee:	lsls	r0, r3, #28
   121f0:	bmi.n	12238 <__swsetup_r+0x64>
   121f2:	lsls	r1, r3, #27
   121f4:	bmi.n	12206 <__swsetup_r+0x32>
   121f6:	movs	r3, #9
   121f8:	str	r3, [r5, #0]
   121fa:	orr.w	r3, r2, #64	; 0x40
   121fe:	strh	r3, [r4, #12]
   12200:	mov.w	r0, #4294967295
   12204:	b.n	12270 <__swsetup_r+0x9c>
   12206:	lsls	r0, r3, #29
   12208:	bpl.n	12230 <__swsetup_r+0x5c>
   1220a:	ldr	r1, [r4, #52]	; 0x34
   1220c:	cbz	r1, 12220 <__swsetup_r+0x4c>
   1220e:	add.w	r3, r4, #68	; 0x44
   12212:	cmp	r1, r3
   12214:	beq.n	1221c <__swsetup_r+0x48>
   12216:	mov	r0, r5
   12218:	bl	100a8 <_free_r>
   1221c:	movs	r3, #0
   1221e:	str	r3, [r4, #52]	; 0x34
   12220:	ldrh	r3, [r4, #12]
   12222:	bic.w	r3, r3, #36	; 0x24
   12226:	strh	r3, [r4, #12]
   12228:	movs	r3, #0
   1222a:	str	r3, [r4, #4]
   1222c:	ldr	r3, [r4, #16]
   1222e:	str	r3, [r4, #0]
   12230:	ldrh	r3, [r4, #12]
   12232:	orr.w	r3, r3, #8
   12236:	strh	r3, [r4, #12]
   12238:	ldr	r3, [r4, #16]
   1223a:	cbnz	r3, 12250 <__swsetup_r+0x7c>
   1223c:	ldrh	r3, [r4, #12]
   1223e:	and.w	r3, r3, #640	; 0x280
   12242:	cmp.w	r3, #512	; 0x200
   12246:	beq.n	12250 <__swsetup_r+0x7c>
   12248:	mov	r1, r4
   1224a:	mov	r0, r5
   1224c:	bl	122d0 <__smakebuf_r>
   12250:	ldrh	r0, [r4, #12]
   12252:	ldrsh.w	r2, [r4, #12]
   12256:	ands.w	r3, r0, #1
   1225a:	beq.n	12272 <__swsetup_r+0x9e>
   1225c:	movs	r3, #0
   1225e:	str	r3, [r4, #8]
   12260:	ldr	r3, [r4, #20]
   12262:	negs	r3, r3
   12264:	str	r3, [r4, #24]
   12266:	ldr	r3, [r4, #16]
   12268:	cbnz	r3, 1227c <__swsetup_r+0xa8>
   1226a:	ands.w	r0, r0, #128	; 0x80
   1226e:	bne.n	121fa <__swsetup_r+0x26>
   12270:	pop	{r3, r4, r5, pc}
   12272:	lsls	r1, r0, #30
   12274:	it	pl
   12276:	ldrpl	r3, [r4, #20]
   12278:	str	r3, [r4, #8]
   1227a:	b.n	12266 <__swsetup_r+0x92>
   1227c:	movs	r0, #0
   1227e:	b.n	12270 <__swsetup_r+0x9c>
   12280:	.word	0x2000222c

00012284 <__swhatbuf_r>:
   12284:	push	{r4, r5, r6, lr}
   12286:	mov	r4, r1
   12288:	ldrsh.w	r1, [r1, #14]
   1228c:	cmp	r1, #0
   1228e:	sub	sp, #88	; 0x58
   12290:	mov	r5, r2
   12292:	mov	r6, r3
   12294:	bge.n	122b2 <__swhatbuf_r+0x2e>
   12296:	ldrh	r3, [r4, #12]
   12298:	tst.w	r3, #128	; 0x80
   1229c:	mov.w	r1, #0
   122a0:	ite	eq
   122a2:	moveq.w	r3, #1024	; 0x400
   122a6:	movne	r3, #64	; 0x40
   122a8:	movs	r0, #0
   122aa:	str	r1, [r6, #0]
   122ac:	str	r3, [r5, #0]
   122ae:	add	sp, #88	; 0x58
   122b0:	pop	{r4, r5, r6, pc}
   122b2:	mov	r2, sp
   122b4:	bl	12348 <_fstat_r>
   122b8:	cmp	r0, #0
   122ba:	blt.n	12296 <__swhatbuf_r+0x12>
   122bc:	ldr	r1, [sp, #4]
   122be:	and.w	r1, r1, #61440	; 0xf000
   122c2:	sub.w	r3, r1, #8192	; 0x2000
   122c6:	negs	r1, r3
   122c8:	adcs	r1, r3
   122ca:	mov.w	r3, #1024	; 0x400
   122ce:	b.n	122a8 <__swhatbuf_r+0x24>

000122d0 <__smakebuf_r>:
   122d0:	ldrh	r3, [r1, #12]
   122d2:	push	{r0, r1, r4, r5, r6, lr}
   122d4:	lsls	r5, r3, #30
   122d6:	mov	r6, r0
   122d8:	mov	r4, r1
   122da:	bpl.n	122ec <__smakebuf_r+0x1c>
   122dc:	add.w	r3, r4, #71	; 0x47
   122e0:	str	r3, [r4, #0]
   122e2:	str	r3, [r4, #16]
   122e4:	movs	r3, #1
   122e6:	str	r3, [r4, #20]
   122e8:	add	sp, #8
   122ea:	pop	{r4, r5, r6, pc}
   122ec:	add	r3, sp, #4
   122ee:	mov	r2, sp
   122f0:	bl	12284 <__swhatbuf_r>
   122f4:	ldr	r1, [sp, #0]
   122f6:	mov	r5, r0
   122f8:	mov	r0, r6
   122fa:	bl	d370 <_malloc_r>
   122fe:	cbnz	r0, 12314 <__smakebuf_r+0x44>
   12300:	ldrsh.w	r3, [r4, #12]
   12304:	lsls	r2, r3, #22
   12306:	bmi.n	122e8 <__smakebuf_r+0x18>
   12308:	bic.w	r3, r3, #3
   1230c:	orr.w	r3, r3, #2
   12310:	strh	r3, [r4, #12]
   12312:	b.n	122dc <__smakebuf_r+0xc>
   12314:	ldrh	r3, [r4, #12]
   12316:	str	r0, [r4, #0]
   12318:	orr.w	r3, r3, #128	; 0x80
   1231c:	strh	r3, [r4, #12]
   1231e:	ldr	r3, [sp, #0]
   12320:	str	r3, [r4, #20]
   12322:	ldr	r3, [sp, #4]
   12324:	str	r0, [r4, #16]
   12326:	cbz	r3, 12340 <__smakebuf_r+0x70>
   12328:	ldrsh.w	r1, [r4, #14]
   1232c:	mov	r0, r6
   1232e:	bl	1236c <_isatty_r>
   12332:	cbz	r0, 12340 <__smakebuf_r+0x70>
   12334:	ldrh	r3, [r4, #12]
   12336:	bic.w	r3, r3, #3
   1233a:	orr.w	r3, r3, #1
   1233e:	strh	r3, [r4, #12]
   12340:	ldrh	r3, [r4, #12]
   12342:	orrs	r5, r3
   12344:	strh	r5, [r4, #12]
   12346:	b.n	122e8 <__smakebuf_r+0x18>

00012348 <_fstat_r>:
   12348:	push	{r3, r4, r5, lr}
   1234a:	ldr	r5, [pc, #28]	; (12368 <_fstat_r+0x20>)
   1234c:	movs	r3, #0
   1234e:	mov	r4, r0
   12350:	mov	r0, r1
   12352:	mov	r1, r2
   12354:	str	r3, [r5, #0]
   12356:	bl	c006 <_fstat>
   1235a:	adds	r3, r0, #1
   1235c:	bne.n	12364 <_fstat_r+0x1c>
   1235e:	ldr	r3, [r5, #0]
   12360:	cbz	r3, 12364 <_fstat_r+0x1c>
   12362:	str	r3, [r4, #0]
   12364:	pop	{r3, r4, r5, pc}
   12366:	nop
   12368:	.word	0x20021400

0001236c <_isatty_r>:
   1236c:	push	{r3, r4, r5, lr}
   1236e:	ldr	r5, [pc, #24]	; (12388 <_isatty_r+0x1c>)
   12370:	movs	r3, #0
   12372:	mov	r4, r0
   12374:	mov	r0, r1
   12376:	str	r3, [r5, #0]
   12378:	bl	c010 <_isatty>
   1237c:	adds	r3, r0, #1
   1237e:	bne.n	12386 <_isatty_r+0x1a>
   12380:	ldr	r3, [r5, #0]
   12382:	cbz	r3, 12386 <_isatty_r+0x1a>
   12384:	str	r3, [r4, #0]
   12386:	pop	{r3, r4, r5, pc}
   12388:	.word	0x20021400

0001238c <__aeabi_drsub>:
   1238c:	eor.w	r1, r1, #2147483648	; 0x80000000
   12390:	b.n	12398 <__adddf3>
   12392:	nop

00012394 <__aeabi_dsub>:
   12394:	eor.w	r3, r3, #2147483648	; 0x80000000

00012398 <__adddf3>:
   12398:	push	{r4, r5, lr}
   1239a:	mov.w	r4, r1, lsl #1
   1239e:	mov.w	r5, r3, lsl #1
   123a2:	teq	r4, r5
   123a6:	it	eq
   123a8:	teqeq	r0, r2
   123ac:	itttt	ne
   123ae:	orrsne.w	ip, r4, r0
   123b2:	orrsne.w	ip, r5, r2
   123b6:	mvnsne.w	ip, r4, asr #21
   123ba:	mvnsne.w	ip, r5, asr #21
   123be:	beq.w	12586 <__adddf3+0x1ee>
   123c2:	mov.w	r4, r4, lsr #21
   123c6:	rsbs	r5, r4, r5, lsr #21
   123ca:	it	lt
   123cc:	neglt	r5, r5
   123ce:	ble.n	123ea <__adddf3+0x52>
   123d0:	add	r4, r5
   123d2:	eor.w	r2, r0, r2
   123d6:	eor.w	r3, r1, r3
   123da:	eor.w	r0, r2, r0
   123de:	eor.w	r1, r3, r1
   123e2:	eor.w	r2, r0, r2
   123e6:	eor.w	r3, r1, r3
   123ea:	cmp	r5, #54	; 0x36
   123ec:	it	hi
   123ee:	pophi	{r4, r5, pc}
   123f0:	tst.w	r1, #2147483648	; 0x80000000
   123f4:	mov.w	r1, r1, lsl #12
   123f8:	mov.w	ip, #1048576	; 0x100000
   123fc:	orr.w	r1, ip, r1, lsr #12
   12400:	beq.n	12408 <__adddf3+0x70>
   12402:	negs	r0, r0
   12404:	sbc.w	r1, r1, r1, lsl #1
   12408:	tst.w	r3, #2147483648	; 0x80000000
   1240c:	mov.w	r3, r3, lsl #12
   12410:	orr.w	r3, ip, r3, lsr #12
   12414:	beq.n	1241c <__adddf3+0x84>
   12416:	negs	r2, r2
   12418:	sbc.w	r3, r3, r3, lsl #1
   1241c:	teq	r4, r5
   12420:	beq.w	12572 <__adddf3+0x1da>
   12424:	sub.w	r4, r4, #1
   12428:	rsbs	lr, r5, #32
   1242c:	blt.n	1244a <__adddf3+0xb2>
   1242e:	lsl.w	ip, r2, lr
   12432:	lsr.w	r2, r2, r5
   12436:	adds	r0, r0, r2
   12438:	adc.w	r1, r1, #0
   1243c:	lsl.w	r2, r3, lr
   12440:	adds	r0, r0, r2
   12442:	asr.w	r3, r3, r5
   12446:	adcs	r1, r3
   12448:	b.n	12468 <__adddf3+0xd0>
   1244a:	sub.w	r5, r5, #32
   1244e:	add.w	lr, lr, #32
   12452:	cmp	r2, #1
   12454:	lsl.w	ip, r3, lr
   12458:	it	cs
   1245a:	orrcs.w	ip, ip, #2
   1245e:	asr.w	r3, r3, r5
   12462:	adds	r0, r0, r3
   12464:	adcs.w	r1, r1, r3, asr #31
   12468:	and.w	r5, r1, #2147483648	; 0x80000000
   1246c:	bpl.n	1247e <__adddf3+0xe6>
   1246e:	mov.w	lr, #0
   12472:	rsbs	ip, ip, #0
   12476:	sbcs.w	r0, lr, r0
   1247a:	sbc.w	r1, lr, r1
   1247e:	cmp.w	r1, #1048576	; 0x100000
   12482:	bcc.n	124bc <__adddf3+0x124>
   12484:	cmp.w	r1, #2097152	; 0x200000
   12488:	bcc.n	124a4 <__adddf3+0x10c>
   1248a:	lsrs	r1, r1, #1
   1248c:	movs.w	r0, r0, rrx
   12490:	mov.w	ip, ip, rrx
   12494:	add.w	r4, r4, #1
   12498:	mov.w	r2, r4, lsl #21
   1249c:	cmn.w	r2, #4194304	; 0x400000
   124a0:	bcs.w	125d8 <__adddf3+0x240>
   124a4:	cmp.w	ip, #2147483648	; 0x80000000
   124a8:	it	eq
   124aa:	movseq.w	ip, r0, lsr #1
   124ae:	adcs.w	r0, r0, #0
   124b2:	adc.w	r1, r1, r4, lsl #20
   124b6:	orr.w	r1, r1, r5
   124ba:	pop	{r4, r5, pc}
   124bc:	movs.w	ip, ip, lsl #1
   124c0:	adcs	r0, r0
   124c2:	adc.w	r1, r1, r1
   124c6:	subs	r4, #1
   124c8:	it	cs
   124ca:	cmpcs.w	r1, #1048576	; 0x100000
   124ce:	bcs.n	124a4 <__adddf3+0x10c>
   124d0:	teq	r1, #0
   124d4:	itt	eq
   124d6:	moveq	r1, r0
   124d8:	moveq	r0, #0
   124da:	clz	r3, r1
   124de:	it	eq
   124e0:	addeq	r3, #32
   124e2:	sub.w	r3, r3, #11
   124e6:	subs.w	r2, r3, #32
   124ea:	bge.n	12506 <__adddf3+0x16e>
   124ec:	adds	r2, #12
   124ee:	ble.n	12502 <__adddf3+0x16a>
   124f0:	add.w	ip, r2, #20
   124f4:	rsb	r2, r2, #12
   124f8:	lsl.w	r0, r1, ip
   124fc:	lsr.w	r1, r1, r2
   12500:	b.n	1251c <__adddf3+0x184>
   12502:	add.w	r2, r2, #20
   12506:	it	le
   12508:	rsble	ip, r2, #32
   1250c:	lsl.w	r1, r1, r2
   12510:	lsr.w	ip, r0, ip
   12514:	itt	le
   12516:	orrle.w	r1, r1, ip
   1251a:	lslle	r0, r2
   1251c:	subs	r4, r4, r3
   1251e:	ittt	ge
   12520:	addge.w	r1, r1, r4, lsl #20
   12524:	orrge	r1, r5
   12526:	popge	{r4, r5, pc}
   12528:	mvn.w	r4, r4
   1252c:	subs	r4, #31
   1252e:	bge.n	1256a <__adddf3+0x1d2>
   12530:	adds	r4, #12
   12532:	bgt.n	12552 <__adddf3+0x1ba>
   12534:	add.w	r4, r4, #20
   12538:	rsb	r2, r4, #32
   1253c:	lsr.w	r0, r0, r4
   12540:	lsl.w	r3, r1, r2
   12544:	orr.w	r0, r0, r3
   12548:	lsr.w	r3, r1, r4
   1254c:	orr.w	r1, r5, r3
   12550:	pop	{r4, r5, pc}
   12552:	rsb	r4, r4, #12
   12556:	rsb	r2, r4, #32
   1255a:	lsr.w	r0, r0, r2
   1255e:	lsl.w	r3, r1, r4
   12562:	orr.w	r0, r0, r3
   12566:	mov	r1, r5
   12568:	pop	{r4, r5, pc}
   1256a:	lsr.w	r0, r1, r4
   1256e:	mov	r1, r5
   12570:	pop	{r4, r5, pc}
   12572:	teq	r4, #0
   12576:	eor.w	r3, r3, #1048576	; 0x100000
   1257a:	itte	eq
   1257c:	eoreq.w	r1, r1, #1048576	; 0x100000
   12580:	addeq	r4, #1
   12582:	subne	r5, #1
   12584:	b.n	12424 <__adddf3+0x8c>
   12586:	mvns.w	ip, r4, asr #21
   1258a:	it	ne
   1258c:	mvnsne.w	ip, r5, asr #21
   12590:	beq.n	125e6 <__adddf3+0x24e>
   12592:	teq	r4, r5
   12596:	it	eq
   12598:	teqeq	r0, r2
   1259c:	beq.n	125aa <__adddf3+0x212>
   1259e:	orrs.w	ip, r4, r0
   125a2:	itt	eq
   125a4:	moveq	r1, r3
   125a6:	moveq	r0, r2
   125a8:	pop	{r4, r5, pc}
   125aa:	teq	r1, r3
   125ae:	ittt	ne
   125b0:	movne	r1, #0
   125b2:	movne	r0, #0
   125b4:	popne	{r4, r5, pc}
   125b6:	movs.w	ip, r4, lsr #21
   125ba:	bne.n	125c8 <__adddf3+0x230>
   125bc:	lsls	r0, r0, #1
   125be:	adcs	r1, r1
   125c0:	it	cs
   125c2:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   125c6:	pop	{r4, r5, pc}
   125c8:	adds.w	r4, r4, #4194304	; 0x400000
   125cc:	itt	cc
   125ce:	addcc.w	r1, r1, #1048576	; 0x100000
   125d2:	popcc	{r4, r5, pc}
   125d4:	and.w	r5, r1, #2147483648	; 0x80000000
   125d8:	orr.w	r1, r5, #2130706432	; 0x7f000000
   125dc:	orr.w	r1, r1, #15728640	; 0xf00000
   125e0:	mov.w	r0, #0
   125e4:	pop	{r4, r5, pc}
   125e6:	mvns.w	ip, r4, asr #21
   125ea:	itte	ne
   125ec:	movne	r1, r3
   125ee:	movne	r0, r2
   125f0:	mvnseq.w	ip, r5, asr #21
   125f4:	itt	ne
   125f6:	movne	r3, r1
   125f8:	movne	r2, r0
   125fa:	orrs.w	r4, r0, r1, lsl #12
   125fe:	itte	eq
   12600:	orrseq.w	r5, r2, r3, lsl #12
   12604:	teqeq	r1, r3
   12608:	orrne.w	r1, r1, #524288	; 0x80000
   1260c:	pop	{r4, r5, pc}
   1260e:	nop

00012610 <__aeabi_ui2d>:
   12610:	teq	r0, #0
   12614:	itt	eq
   12616:	moveq	r1, #0
   12618:	bxeq	lr
   1261a:	push	{r4, r5, lr}
   1261c:	mov.w	r4, #1024	; 0x400
   12620:	add.w	r4, r4, #50	; 0x32
   12624:	mov.w	r5, #0
   12628:	mov.w	r1, #0
   1262c:	b.n	124d0 <__adddf3+0x138>
   1262e:	nop

00012630 <__aeabi_i2d>:
   12630:	teq	r0, #0
   12634:	itt	eq
   12636:	moveq	r1, #0
   12638:	bxeq	lr
   1263a:	push	{r4, r5, lr}
   1263c:	mov.w	r4, #1024	; 0x400
   12640:	add.w	r4, r4, #50	; 0x32
   12644:	ands.w	r5, r0, #2147483648	; 0x80000000
   12648:	it	mi
   1264a:	negmi	r0, r0
   1264c:	mov.w	r1, #0
   12650:	b.n	124d0 <__adddf3+0x138>
   12652:	nop

00012654 <__aeabi_f2d>:
   12654:	lsls	r2, r0, #1
   12656:	mov.w	r1, r2, asr #3
   1265a:	mov.w	r1, r1, rrx
   1265e:	mov.w	r0, r2, lsl #28
   12662:	itttt	ne
   12664:	andsne.w	r3, r2, #4278190080	; 0xff000000
   12668:	teqne	r3, #4278190080	; 0xff000000
   1266c:	eorne.w	r1, r1, #939524096	; 0x38000000
   12670:	bxne	lr
   12672:	bics.w	r2, r2, #4278190080	; 0xff000000
   12676:	it	eq
   12678:	bxeq	lr
   1267a:	teq	r3, #4278190080	; 0xff000000
   1267e:	itt	eq
   12680:	orreq.w	r1, r1, #524288	; 0x80000
   12684:	bxeq	lr
   12686:	push	{r4, r5, lr}
   12688:	mov.w	r4, #896	; 0x380
   1268c:	and.w	r5, r1, #2147483648	; 0x80000000
   12690:	bic.w	r1, r1, #2147483648	; 0x80000000
   12694:	b.n	124d0 <__adddf3+0x138>
   12696:	nop

00012698 <__aeabi_ul2d>:
   12698:	orrs.w	r2, r0, r1
   1269c:	it	eq
   1269e:	bxeq	lr
   126a0:	push	{r4, r5, lr}
   126a2:	mov.w	r5, #0
   126a6:	b.n	126be <__aeabi_l2d+0x16>

000126a8 <__aeabi_l2d>:
   126a8:	orrs.w	r2, r0, r1
   126ac:	it	eq
   126ae:	bxeq	lr
   126b0:	push	{r4, r5, lr}
   126b2:	ands.w	r5, r1, #2147483648	; 0x80000000
   126b6:	bpl.n	126be <__aeabi_l2d+0x16>
   126b8:	negs	r0, r0
   126ba:	sbc.w	r1, r1, r1, lsl #1
   126be:	mov.w	r4, #1024	; 0x400
   126c2:	add.w	r4, r4, #50	; 0x32
   126c6:	movs.w	ip, r1, lsr #22
   126ca:	beq.w	1247e <__adddf3+0xe6>
   126ce:	mov.w	r2, #3
   126d2:	movs.w	ip, ip, lsr #3
   126d6:	it	ne
   126d8:	addne	r2, #3
   126da:	movs.w	ip, ip, lsr #3
   126de:	it	ne
   126e0:	addne	r2, #3
   126e2:	add.w	r2, r2, ip, lsr #3
   126e6:	rsb	r3, r2, #32
   126ea:	lsl.w	ip, r0, r3
   126ee:	lsr.w	r0, r0, r2
   126f2:	lsl.w	lr, r1, r3
   126f6:	orr.w	r0, r0, lr
   126fa:	lsr.w	r1, r1, r2
   126fe:	add	r4, r2
   12700:	b.n	1247e <__adddf3+0xe6>
   12702:	nop

00012704 <__aeabi_d2lz>:
   12704:	push	{r3, lr}
   12706:	mov	r2, r0
   12708:	mov	r3, r1
   1270a:	vmov	d7, r2, r3
   1270e:	vcmpe.f64	d7, #0.0
   12712:	vmrs	APSR_nzcv, fpscr
   12716:	bmi.n	12720 <__aeabi_d2lz+0x1c>
   12718:	ldmia.w	sp!, {r3, lr}
   1271c:	b.w	12738 <__aeabi_d2ulz>
   12720:	vneg.f64	d7, d7
   12724:	vmov	r0, r1, d7
   12728:	bl	12738 <__aeabi_d2ulz>
   1272c:	negs	r0, r0
   1272e:	sbc.w	r1, r1, r1, lsl #1
   12732:	pop	{r3, pc}
   12734:	movs	r0, r0
	...

00012738 <__aeabi_d2ulz>:
   12738:	vldr	d6, [pc, #44]	; 12768 <__aeabi_d2ulz+0x30>
   1273c:	vmov	d7, r0, r1
   12740:	vldr	d5, [pc, #44]	; 12770 <__aeabi_d2ulz+0x38>
   12744:	vmul.f64	d6, d7, d6
   12748:	vcvt.u32.f64	s12, d6
   1274c:	vcvt.f64.u32	d4, s12
   12750:	vfms.f64	d7, d4, d5
   12754:	vcvt.u32.f64	s15, d7
   12758:	vmov	r1, s12
   1275c:	vmov	r0, s15
   12760:	bx	lr
   12762:	nop
   12764:	nop.w
   12768:	.word	0x00000000
   1276c:	.word	0x3df00000
   12770:	.word	0x00000000
   12774:	.word	0x41f00000

00012778 <___ZN16CrashReportClasscvbEv_veneer>:
   12778:	ldr.w	pc, [pc]	; 1277c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1277c:	.word	0x60002425

00012780 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   12780:	ldr.w	pc, [pc]	; 12784 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   12784:	.word	0x60001f81

00012788 <___ZN7TwoWire5beginEv_veneer>:
   12788:	ldr.w	pc, [pc]	; 1278c <___ZN7TwoWire5beginEv_veneer+0x4>
   1278c:	.word	0x600017d1

00012790 <___Z14set_audioClockilm_veneer>:
   12790:	ldr.w	pc, [pc]	; 12794 <___Z14set_audioClockilm_veneer+0x4>
   12794:	.word	0x60002541

00012798 <__usb_init_veneer>:
   12798:	ldr.w	pc, [pc]	; 1279c <__usb_init_veneer+0x4>
   1279c:	.word	0x60001819

000127a0 <___init_veneer>:
   127a0:	ldr.w	pc, [pc]	; 127a4 <___init_veneer+0x4>
   127a4:	.word	0x60002481

000127a8 <___Z12do_hibernatev_veneer>:
   127a8:	ldr.w	pc, [pc]	; 127ac <___Z12do_hibernatev_veneer+0x4>
   127ac:	.word	0x6000165d

000127b0 <___reboot_Teensyduino__veneer>:
   127b0:	ldr.w	pc, [pc]	; 127b4 <___reboot_Teensyduino__veneer+0x4>
   127b4:	.word	0x600018fd
	...

Disassembly of section .fini:

000127c0 <_fini>:
   127c0:	push	{r3, r4, r5, r6, r7, lr}
   127c2:	nop

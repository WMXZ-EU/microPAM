
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60002370 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00016550 l    d  .fini	00000000 .fini
00016554 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200092c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60021cf4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001794 l     F .text.code	00000024 flexspi2_command
600017b8 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 usb.c
00009ec0 l     F .text.itcm	000000a0 endpoint0_receive
00009f60 l     F .text.itcm	0000007c schedule_transfer
00009fdc l     F .text.itcm	00000034 run_callbacks
0000a010 l     F .text.itcm	0000001c usb_endpoint_config
0000a02c l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
20028303 l     O .bss	00000008 endpoint0_buffer
20027968 l     O .bss	00000004 endpoint0_notify_mask
2000b9c0 l     O .bss	00000008 endpoint0_setupdata
2002796c l     O .bss	00000004 endpointN_notify_mask
2002830c l     O .bss	00000008 reply_buffer
20028326 l     O .bss	00000001 sof_usage
2002832e l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20027a9c l     O .bss	00000004 s_hotCount
20027aa0 l     O .bss	00000004 s_hotTemp
20027aa4 l     O .bss	00000004 s_hot_ROOM
20027aa8 l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001cfc l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
20028302 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20027a04 l     O .bss	00000000 object.0
60002360 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
0000065c l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
2000b9cc l     O .bss	00000004 guard variable for loop::status
20027440 l     O .bss	00000004 loop::t0
20028188 l     O .bss	00000002 loop::mxb
2002818a l     O .bss	00000002 loop::status
20027444 l     O .bss	00000004 loop::loopCount
20007e26 l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008c0 l     F .text.itcm	000000ac acq_isr()
00000c20 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
20026bdc l     O .bss	00000008 dma
20200000 l     O .bss.dma	00000800 i2s_buffer
00000000 l    df *ABS*	00000000 Filing.cpp
000026d2 l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000026f2 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00002716 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
2000b9d0 l     O .bss	00001800 diskBuffer
200253dc l     O .bss	00001800 tempBuffer0
00002f2c l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000d1d0 l     O .bss	00000200 fileHeader
200281e6 l     O .bss	00000050 dirName
20026ff4 l     O .bss	00000200 wav_hdr
20028236 l     O .bss	00000050 fileName
2002743c l     O .bss	00000004 checkEndOfFile(short)::dta
2002828a l     O .bss	00000050 timeStamp()::date_time
20008954 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
20008f33 l     O .data	00000012 device_descriptor
600024ce l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c6e l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000c94 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000cd0 l     F .text.itcm	0000003c dbgPrint(unsigned short)
000010c0 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
0000156e l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000016d8 l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001a40 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001d98 l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001daa l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00001dc0 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001de4 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001de8 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001dfc l     F .text.itcm	00000030 menuGetLine()
00001e2c l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001e48 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20028168 l     O .bss	00000020 store
200282da l     O .bss	00000028 menuGetLine()::buffer
20007e4d l     O .data	00000027 version
00000000 l    df *ABS*	00000000 Queue.cpp
2000d3d8 l     O .bss	00018000 data_buffer
2000d3d4 l     O .bss	00000004 queue_busy
20026de4 l     O .bss	00000004 head
20026de8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
20026be4 l     O .bss	00000200 dout
20026df4 l     O .bss	00000200 outData
200271f4 l     O .bss	00000200 tempData
20027448 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20007e8b l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
000034dc l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
000034f4 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
00003f46 l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2002744c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20027450 l     O .bss	00000004 MTPD::write(char const*, int)::dst
200079c4 l     O .data	00000010 propertyList
200079d4 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20007898 l     O .data	0000012c lookupTable
200079fc l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
00005838 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
000061f8 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
0000724c l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
0000830c l     F .text.itcm	0000002c sdIrs()
00008338 l     F .text.itcm	00000020 gpioMux(unsigned char)
00008358 l     F .text.itcm	00000018 isBusyCommandComplete()
00008370 l     F .text.itcm	00000010 isBusyCommandInhibit()
00008380 l     F .text.itcm	00000014 isBusyDat()
00008394 l     F .text.itcm	0000000c isBusyDMA()
000083a0 l     F .text.itcm	00000014 isBusyFifoRead()
000083b4 l     F .text.itcm	00000014 isBusyFifoWrite()
000083c8 l     F .text.itcm	00000018 isBusyTransferComplete()
000083e0 l     F .text.itcm	000000a4 setSdclk(unsigned long)
000084e8 l     F .text.itcm	00000024 waitTimeout(bool (*)())
0000850c l     F .text.itcm	0000003c yieldTimeout(bool (*)())
00008558 l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
00008588 l     F .text.itcm	000000d4 initSDHC()
00008678 l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000086e0 l     F .text.itcm	00000020 statusCMD13()
00008700 l     F .text.itcm	00000010 isBusyCMD13()
00008714 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
0000876c l     F .text.itcm	00000030 waitDmaStatus()
0000879c l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00008a94 l     F .text.itcm	0000005c waitTransferComplete()
00008cfc l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
200281c2 l     O .bss	00000001 m_initDone
2000d3d0 l     O .bss	00000004 m_sdClkKhz
200281c3 l     O .bss	00000001 m_version2
200253d8 l     O .bss	00000004 m_errorLine
200281c4 l     O .bss	00000001 m_highCapacity
200281c5 l     O .bss	00000001 m_transferActive
200281c6 l     O .bss	00000010 m_cid
200281d6 l     O .bss	00000010 m_csd
20026dec l     O .bss	00000004 m_ocr
20026df0 l     O .bss	00000004 m_rca
200273f4 l     O .bss	00000004 m_busyFcn
20028286 l     O .bss	00000001 m_dmaBusy
200273f8 l     O .bss	00000004 m_irqstat
20008f32 l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000923c l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000095a4 l     F .text.itcm	00000060 rx_queue_transfer
20200800 l     O .bss.dma	00001000 rx_buffer
00009604 l     F .text.itcm	000000ac rx_event
000096b0 l     F .text.itcm	0000008c usb_serial_flush_callback
20201800 l     O .bss.dma	00002000 txbuffer
20027a84 l     O .bss	00000004 rx_available
20028196 l     O .bss	00000010 rx_count
20028314 l     O .bss	00000001 rx_head
200281a6 l     O .bss	00000010 rx_index
20028316 l     O .bss	00000009 rx_list
200281b6 l     O .bss	00000002 rx_packet_size
20028324 l     O .bss	00000001 rx_tail
2000b740 l     O .bss	00000100 rx_transfer
20028327 l     O .bss	00000001 transmit_previous_timeout
200281bc l     O .bss	00000002 tx_available
20028328 l     O .bss	00000001 tx_head
2002832a l     O .bss	00000001 tx_noautoflush
200281be l     O .bss	00000002 tx_packet_size
2000b8c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000aee8 l     F .text.itcm	00000010 txEvent_event
0000aef8 l     F .text.itcm	0000003c rx_event
0000af34 l     F .text.itcm	00000060 rx_queue_transfer
20028315 l     O .bss	00000001 rx_head
2002831f l     O .bss	00000005 rx_list
20027a88 l     O .bss	00000014 rx_list_transfer_len
200281b8 l     O .bss	00000002 rx_packet_size
20028325 l     O .bss	00000001 rx_tail
2000b840 l     O .bss	00000080 rx_transfer
20028329 l     O .bss	00000001 tx_head
200281c0 l     O .bss	00000002 tx_packet_size
2000b940 l     O .bss	00000080 tx_transfer
20203800 l     O .bss.dma	00000800 rx_buffer
20204000 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20028289 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000b4fa l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-realloc.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d2a4 l     F .text.itcm	00000144 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000d404 l     F .text.itcm	00000018 stdio_exit_handler
0000d41c l     F .text.itcm	00000040 cleanup_stdio
0000d45c l     F .text.itcm	000000d4 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-strncpy.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcmp.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-__atexit.o
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000e4f0 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-fclose.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-stpncpy.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libm_a-s_frexp.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
00013078 l     F .text.itcm	00000126 quorem
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00013e8c l     F .text.itcm	00000140 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoll.o
00013fd0 l     F .text.itcm	0000016c _strtoll_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-strtoull.o
00014140 l     F .text.itcm	0000019c _strtoull_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-mbrtowc.o
00000000 l    df *ABS*	00000000 libc_a-wcrtomb.o
00000000 l    df *ABS*	00000000 libc_a-wcsrtombs.o
00000000 l    df *ABS*	00000000 libc_a-iswspace.o
00000000 l    df *ABS*	00000000 libc_a-iswspace_l.o
00000000 l    df *ABS*	00000000 libc_a-jp2uc.o
000143c8 l     F .text.itcm	00000134 __jp2uc
00000000 l    df *ABS*	00000000 libc_a-fiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiprintf.o
00000000 l    df *ABS*	00000000 libc_a-svfiscanf.o
00000000 l    df *ABS*	00000000 libc_a-vfiprintf.o
000147f8 l     F .text.itcm	00000076 __sprint_r.part.0
000157fc l     F .text.itcm	00000080 __sbprintf
00000000 l    df *ABS*	00000000 libc_a-fvwrite.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-fputwc.o
00000000 l    df *ABS*	00000000 libc_a-wcsnrtombs.o
00000000 l    df *ABS*	00000000 libc_a-categories.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-ctype_.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 libc_a-__call_atexit.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00016518 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00016520 l     F .text.itcm	00000008 ___init_veneer
00016528 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
00016530 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
00016538 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
00016540 l     F .text.itcm	00000008 __usb_init_veneer
600022d0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600022d8 l     F .text.code	00000008 ____libc_init_array_veneer
600022e0 l     F .text.code	00000008 __pwm_init_veneer
600022e8 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600022f0 l     F .text.code	00000008 __set_arm_clock_veneer
600022f8 l     F .text.code	00000008 __delay_veneer
60002300 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002308 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
60002310 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
60002318 l     F .text.code	00000008 __memset_veneer
60002320 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002328 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002330 l     F .text.code	00000008 __main_veneer
60002338 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002340 l     F .text.code	00000008 __sm_set_pool_veneer
60002348 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002350 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002358 l     F .text.code	00000008 __usb_init_serialnumber_veneer
00006228  w    F .text.itcm	00000026 FatPartition::cacheSync()
60002370 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
000049c0 g     F .text.itcm	000000a8 toUpcase(unsigned short)
0000107a g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000025b4 g     F .text.itcm	0000005c pushData(unsigned long*)
00009958 g     F .text.itcm	00000014 usb_serial_available
0000f74c g     F .text.itcm	00000062 __any_on
00016108 g     F .text.itcm	00000024 _isatty_r
0000df5c g     F .text.itcm	000000ba strcpy
00006d90 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
600017e8 g     F .text.code	00000002 startup_default_late_hook
0000db6c g     F .text.itcm	0000002c _lseek_r
00008834 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000b268  w    F .text.itcm	00000074 yield
00007c78  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20027a24 g     O .bss	00000060 proc_stat
20028164 g     O .bss	00000004 usb_timer1_callback
00003674 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
000036cc g     F .text.itcm	00000014 MTPD::write32(unsigned long)
00006bec g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000b5d6 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
20027f84 g     O .bss	000001b8 storage
600023e0 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
20028194 g     O .bss	00000002 proc
60001900 g     F .text.code	00000274 configure_external_ram
00007be2  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
000011a4 g     F .text.itcm	0000003c MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)
000082cc  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00016448 g     F .text.itcm	0000005a .hidden __floatdidf
000073c8 g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20027a1c g     O .bss	00000004 procCount
000070f8 g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200273fc g     O .bss	00000004 FsDateTime::callback
200275e8 g     O .bss	00000001 __lock___atexit_recursive_mutex
00014334 g     F .text.itcm	0000004c _wcrtomb_r
000074ec g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
000080b4 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000b570 g     F .text.itcm	0000001a Print::println()
200004a8 g     O .data	00000070 vtable for DedicatedSpiCard
20027a20 g     O .bss	00000004 procMiss
0000d754 g     F .text.itcm	00000020 __sseek
0000d530 g     F .text.itcm	0000003c __sinit
00004eac g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
0000f7cc g     F .text.itcm	000000a4 fcvtbuf
0001602c g     F .text.itcm	000000b0 __swbuf_r
00003592 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000c02c g     F .text.itcm	0000000c __malloc_unlock
20008f08 g     O .data	00000004 t_4
20027434 g     O .bss	00000004 FsVolume::m_cwv
00002584 g     F .text.itcm	00000008 getStore()
00006810 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
2000b9c8 g     O .bss	00000004 SerNum
20028288 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
00007bd6  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
60002278 g     F .text.code	0000004c analog_init
0000d298 g     F .text.itcm	0000000c _strtod_r
0000159c g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000d77c g     F .text.itcm	0000004a _vdprintf_r
00007f06 g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
00002e28 g     F .text.itcm	00000104 saveData(short)
200281ba g     O .bss	00000002 shift
20008940 g     O .data	00000004 F_CPU_ACTUAL
00014744 g     F .text.itcm	000000b4 _sfread_r
0000d8a8 g     F .text.itcm	000000f8 memmove
20028148 g     O .bss	00000004 t_1
000015ca g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
200279f8 g     O .bss	00000004 max_stat
0000d5cc g     F .text.itcm	00000088 snprintf
000091bc g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
0000ed3c g     F .text.itcm	0000004c _Balloc
00000c5a  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
0001655c g       .ARM.exidx	00000000 __exidx_end
0000700a g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20028287 g     O .bss	00000001 EventResponder::runningFromYield
000093b2 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
00007acc g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000acdc g     F .text.itcm	00000060 tempmonGetTemp
0000ac1c g     F .text.itcm	0000001e smalloc_verify_pool
20008958 g     O .data	00000004 __atexit_recursive_mutex
0000dc14 g     F .text.itcm	0000000c __errno
00001fec g     F .text.itcm	00000098 saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2002740c g     O .bss	00000004 EventResponder::firstInterrupt
0000a6b4 g     F .text.itcm	00000028 usb_transfer_status
00003822 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000ac6e g     F .text.itcm	0000006a sm_set_pool
000029dc g     F .text.itcm	00000014 newFolder(int)
20027414 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
20027760 g     O .bss	00000004 __stdio_exit_handler
000004a4  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
000057d4 g     F .text.itcm	00000018 ExFatPartition::rootLength()
000164a4 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
00002854 g     F .text.itcm	00000014 headerUpdate(long)
0000b46c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
000160dc g     F .text.itcm	0000002c _fstat_r
20007418 g     O .data	00000370 digital_pin_to_info_PGM
20027970 g     O .bss	00000004 errno
000093bc g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
00005558 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
0000d710 g     F .text.itcm	00000004 __seofread
00016558 g       .text.itcm	00000000 _etext
00007808 g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200092c0 g       .bss	00000000 _sbss
00008490 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d56 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003486 g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003622 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
00001838 g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
00008af0 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
000056f4 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
600024d8 g       *ABS*	00000000 _stextload
00000248 g     F .text.itcm	00000214 loop
0000ade0 g     F .text.itcm	00000072 flexpwm_init
600017ea g     F .text.code	00000004 startup_debug_reset
0000a5c8 g     F .text.itcm	00000040 usb_config_rx
00003a3c g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
00004c7c g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00008ff4 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
20027408 g     O .bss	00000004 EventResponder::lastInterrupt
0000796c g     F .text.itcm	0000002a FsBaseFile::close()
000047c2 g     F .text.itcm	00000048 SPIClass::end()
00009470 g     F .text.itcm	00000134 memcpy
0000eb60 g     F .text.itcm	000001b0 __hexnan
000015fc g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
0000817c g     F .text.itcm	00000032 SharedSpiCard::writeStop()
0000480a g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000147a g     F .text.itcm	000000f4 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
200092c0 g     O .data	00000000 .hidden __TMC_END__
00005638 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001338 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
000064d2 g     F .text.itcm	00000026 FatFile::peek()
00002084 g     F .text.itcm	00000040 menu1(short)
20027a00 g     O .bss	00000004 nbuf
0000f870 g     F .text.itcm	00001b44 _svfprintf_r
000163d0 g     F .text.itcm	00000022 .hidden __floatsidf
20028140 g     O .bss	00000004 systick_millis_count
00005cd8 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000b0cc g     F .text.itcm	00000030 usb_mtp_available
0000045c g     F .text.itcm	00000048 setup1()
00004184 g     F .text.itcm	000005e6 MTPD::loop()
0000b7a4 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
2002832c g     O .bss	00000001 usb_configuration
00007bcc  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000ac3a g     F .text.itcm	00000034 sm_align_pool
00009220 g     F .text.itcm	0000001c SdioCard::syncDevice()
00008c08 g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
000064f8 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
0000f68c g     F .text.itcm	00000062 __ratio
00007c86 g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
600023e0  w    O .text.progmem	00000018 usb_string_manufacturer_name
20008f04 g     O .data	00000004 t_3
600023b8 g     O .text.progmem	00000008 usb_string_mtp
0000baa0 g     F .text.itcm	00000010 malloc
20000540  w    O .data	00000024 vtable for FsFile
0000ab9a  w    F .text.itcm	0000000a _fstat
00014398 g     F .text.itcm	00000006 iswspace
20027764 g     O .bss	00000200 acqBuffer
00012fc0 g     F .text.itcm	00000040 __assert_func
00004150 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002ae0 g     F .text.itcm	000000a0 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
6000165c g     F .text.code	000000e4 usb_init
00007996 g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
20027f7c g     O .bss	00000004 sessionID_
00002b80 g     F .text.itcm	00000068 do_hibernate(unsigned long)
00007bd2  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c44  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
20027624 g     O .bss	00000004 __malloc_top_pad
0000abd8 g     F .text.itcm	00000044 rtc_set
00014708 g     F .text.itcm	0000003a __ssrefill_r
20028144 g     O .bss	00000004 systick_safe_read
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00005d6c g     F .text.itcm	000000ca ExFatFile::truncate()
20008960 g     O .data	00000000 .hidden __dso_handle
000163b0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00012f3c g     F .text.itcm	00000008 _localeconv_r
20008efc g     O .data	00000004 sd_str
000142dc g     F .text.itcm	00000004 _strtoull_r
0000935e g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
0001587c g     F .text.itcm	000002f4 __sfvwrite_r
0000ef90 g     F .text.itcm	0000005c __i2b
20000000 g       .data	00000000 _sdata
0000af94 g     F .text.itcm	000000a4 usb_mtp_configure
20008f10 g     O .data	00000004 t_on
60002465 g     O .text.progmem	00000069 usb_config_descriptor_480
0000b7d4 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00003974 g     F .text.itcm	000000c8 MTPD::getObjectPropValue(unsigned long, unsigned long)
0001612c g     F .text.itcm	00000000 .hidden __aeabi_drsub
000093ac g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
0000624e g     F .text.itcm	00000036 FatFile::addCluster()
0000dbc4 g     F .text.itcm	00000024 _sbrk_r
0000865c g     F .text.itcm	0000001c SdioCard::type() const
000035c4 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
600017e4 g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
000099cc g     F .text.itcm	0000001e usb_serial_getchar
00000d3e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20028154 g     O .bss	00000008 usb_cdc_line_coding
0000ad3c g     F .text.itcm	00000040 digitalWrite
00006de8  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20027410 g     O .bss	00000004 EventResponder::lastYield
00004c56 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000db98 g     F .text.itcm	0000002c _read_r
00000caa  w    F .text.itcm	00000024 Print::write(char const*)
20028150 g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00007c70  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00012c04 g     F .text.itcm	000000c6 _fclose_r
20027974 g     O .bss	00000010 extmem_smalloc_pool
2002761c g     O .bss	00000004 __malloc_max_sbrked_mem
00007ffc g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000ad7c g     F .text.itcm	00000064 pinMode
000013b2 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000ec0  w    F .text.itcm	0000001c FsFile::FsFile()
0000b668 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
000163f4 g     F .text.itcm	00000042 .hidden __extendsfdf2
000113b4 g     F .text.itcm	00001850 __ssvfscanf_r
0000b430  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000e78  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00016138 g     F .text.itcm	00000276 .hidden __adddf3
00003944 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
000035b0 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60022000 g     O .text.csf	00000c00 hab_csf
00003638 g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007050 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
0000f4f4 g     F .text.itcm	000000c2 __b2d
000032a0 g     F .text.itcm	00000002 adc_init()
00016554 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20008f00 g     O .data	00000004 t_2
0000b40c  w    F .text.itcm	00000008 Print::print(unsigned char)
0000aba4  w    F .text.itcm	00000004 _isatty
20027404 g     O .bss	00000004 EventResponder::firstYield
00000eb2 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
0000489c g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000c050 g     F .text.itcm	000003d8 _realloc_r
0000dc20 g     F .text.itcm	00000048 __libc_init_array
0000a724 g     F .text.itcm	00000248 dtostrf
000053a2 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
0000849c g     F .text.itcm	0000001c SdioCard::readCID(CID*)
2000069c g     O .data	00000100 __hexdig
00005b22 g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
0000146e g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
000019fc g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
00015d60 g     F .text.itcm	00000066 _fputwc_r
20000300 g     O .data	00000028 __mprec_bigtens
0000ee40 g     F .text.itcm	000000b0 __s2b
00007f7e  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000abae  w    F .text.itcm	00000004 abort
0000b454  w    F .text.itcm	00000004 usb_serial_class::clear()
000163b0 g     F .text.itcm	0000001e .hidden __floatunsidf
0000ab64  w    F .text.itcm	0000002c _sbrk
60018a34 g       *ABS*	00000000 _sdataload
0000f2f8 g     F .text.itcm	00000042 __mcmp
00001782 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
2000895c g     O .data	00000004 __brkval
2002832b g     O .bss	00000001 usb_cdc_line_rtsdtr
600022c4 g     F .text.code	00000000 _init
0000973c g     F .text.itcm	00000002 usb_serial_reset
000062f4 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
00000f98  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
000164d8 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
600023fc g     O .text.progmem	00000069 usb_config_descriptor_12
0000c428 g     F .text.itcm	00000e70 _strtod_l
0000eb28 g     F .text.itcm	00000036 __match
20028360 g       .bss	00000000 _ebss
000088b0 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
000036e0 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
20008ef4 g     O .data	00000004 propertyListNum
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
0000346c g     F .text.itcm	00000004 rtc_setup(unsigned char, unsigned char)
0000eef0 g     F .text.itcm	00000040 __hi0bits
00004c0a g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001d50 g     F .text.code	00000074 CrashReportClass::clear()
00005bd2 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20204880 g       .bss.dma	00000000 _heap_start
000037f8 g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200275ec g     O .bss	00000001 __lock___malloc_recursive_mutex
00001b78 g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
000057ec g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
000008b4  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
20027628 g     O .bss	00000138 __sf
20008938 g     O .data	00000004 CrashReport
20027ab0 g     O .bss	000004cc sdx
00007e7c g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000518 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200092e0 g     O .bss	00000020 endpoint0_transfer_data
0000605e g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
00004972 g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000b794 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000ae88 g     F .text.itcm	00000060 pwm_init
00016138 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20027984 g     O .bss	00000050 file
00003eb8 g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
20008f45 g     O .data	00000001 usb_mtp_status
60022c00 g       .text.csf	00000000 __text_csf_end
60001b74 g     F .text.code	0000005c usb_pll_start
0000f148 g     F .text.itcm	000000c0 __pow5mult
000065d6 g     F .text.itcm	0000004c FatFile::rmdir()
2000049c g     O .data	0000000c vtable for CrashReportClass
00016438 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00006f88 g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
200279d4 g     O .bss	00000004 haveStore
0000830a  w    F .text.itcm	00000002 SdioCard::end()
200092c0 g     O .bss	00000020 endpoint0_transfer_ack
2002815c g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000a674 g     F .text.itcm	00000024 usb_transmit
00000d0c  w    F .text.itcm	00000014 Print::println(char const*)
0000b318 g     F .text.itcm	00000020 systick_isr
0000dc74 g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003470 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
000035ec g     F .text.itcm	00000020 MTPD::write(char const*, int)
20008944 g     O .data	00000010 Serial
200279d8 g     O .bss	00000020 logBuffer
0000b474  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00007a6c g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
600017e4  w    F .text.code	00000002 startup_early_hook
0000588c g     F .text.itcm	00000094 ExFatFile::addCluster()
00007de0 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
00009914 g     F .text.itcm	00000044 usb_serial_peekchar
0000d56c g     F .text.itcm	0000000c __sfp_lock_acquire
0000e020 g     F .text.itcm	00000000 memchr
00006eb8 g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
00009c70 g     F .text.itcm	00000250 set_arm_clock
2002813c g     O .bss	00000004 systick_cycle_count
20008f1c g     O .data	00000016 usb_string_serial_number_default
0000e2e4 g     F .text.itcm	0000020c _free_r
000080ea g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00015ef4 g     F .text.itcm	00000060 category
000081ae g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00008b94 g     F .text.itcm	00000074 SdioCard::readStop()
00000d72  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
00007bda  w    F .text.itcm	00000004 SharedSpiCard::type() const
0000db3c g     F .text.itcm	0000000c __locale_mb_cur_max
00014380 g     F .text.itcm	00000016 _wcsrtombs_r
20027458 g     O .bss	00000190 __atexit0
0000191e g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000b464  w    F .text.itcm	00000004 usb_serial_class::flush()
00014688 g     F .text.itcm	00000080 _sungetc_r
00016134 g     F .text.itcm	0000027a .hidden __aeabi_dsub
20008ed8 g     O .data	00000004 __malloc_sbrk_base
0000b45c  w    F .text.itcm	00000004 usb_serial_class::read()
0001413c g     F .text.itcm	00000004 _strtoll_r
000078b4 g     F .text.itcm	000000b8 FatFile::remove()
00016438 g     F .text.itcm	0000006a .hidden __floatundidf
00000ec0  w    F .text.itcm	0000001c FsFile::FsFile()
0000aba8  w    F .text.itcm	00000006 _lseek
0000f208 g     F .text.itcm	000000f0 __lshift
00002be8 g     F .text.itcm	00000240 storeData(short)
000069b6 g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000a648 g     F .text.itcm	0000002c usb_prepare_transfer
00007bde  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000a9e4 g     F .text.itcm	00000180 unused_interrupt_vector
00014588 g     F .text.itcm	00000100 __ssprint_r
60001bd0 g     F .text.code	0000012c tempmon_init
20028160 g     O .bss	00000004 usb_timer0_callback
000072fc g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000d7e4 g     F .text.itcm	00000062 _vasnprintf_r
0000e1bc g     F .text.itcm	00000088 __register_exitproc
00007c08 g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
000052dc g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000da08 g     F .text.itcm	00000044 strlcpy
0000da4c g     F .text.itcm	0000008a strncmp
0000726a g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
00005c1a g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000996c g     F .text.itcm	00000060 usb_serial_flush_input
20008ef0 g     O .data	00000004 fsamp
00005692 g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001240 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f34  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
0000efec g     F .text.itcm	0000015c __multiply
0000258c g     F .text.itcm	0000001c getDataCount()
00009b78 g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000dad8 g     F .text.itcm	00000064 strncpy
200275f4 g     O .bss	00000028 __malloc_current_mallinfo
00000ad0 g     F .text.itcm	00000084 i2s_setup()
0000f5b8 g     F .text.itcm	000000d4 __d2b
000081fc g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
00008302  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001740 g     F .text.code	00000054 _reboot_Teensyduino_
00008548  w    F .text.itcm	0000000e SdioCard::~SdioCard()
600017e6 g     F .text.code	00000002 startup_default_middle_hook
00000c5e  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b54 g     F .text.itcm	000000a4 dma_setup()
0000c038 g     F .text.itcm	00000018 realloc
00007d04 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00007f40 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00008c90 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
00013fcc g     F .text.itcm	00000004 _strtoul_r
0000b0fc g     F .text.itcm	000000c4 usb_mtp_send
0000a120 g     F .text.itcm	000004a8 usb_isr
0000d3ec g     F .text.itcm	0000000c __cxa_atexit
00004cfc g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000db48 g     F .text.itcm	00000024 _close_r
00008292  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
000163d0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00007fba g     F .text.itcm	0000002a SharedSpiCard::readStop()
00004924 g     F .text.itcm	0000004e FsCache::sync()
0000d848 g     F .text.itcm	00000060 memcmp
20000518  w    O .data	00000028 vtable for usb_serial_class
000093de g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000dc6c g     F .text.itcm	00000002 __retarget_lock_close_recursive
00003c8a g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
00009426 g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20027aac g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000d694 g     F .text.itcm	00000058 sscanf
00015be8 g     F .text.itcm	000000cc __swsetup_r
0000ba9c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000059ac g     F .text.itcm	00000056 ExFatFile::rmdir()
00003b48 g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d20  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00002780 g     F .text.itcm	000000d4 headerInit(long, long, long, int)
00007f86 g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
0000f6f0 g     F .text.itcm	0000005c __copybits
00003eec g     F .text.itcm	00000016 MTPD::read16()
00000c6a g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
20008ad0 g     O .data	00000408 __malloc_av_
20027454 g     O .bss	00000004 __atexit
0000d6ec g     F .text.itcm	00000022 __sread
00009bdc g     F .text.itcm	00000094 usb_serial_flush_output
0000c020 g     F .text.itcm	0000000c __malloc_lock
00004af8 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20009000 g     O .data	000002c0 _VectorsRam
000093e6 g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00007e50 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00012dfc g     F .text.itcm	00000054 _fflush_r
00013000 g     F .text.itcm	00000078 _calloc_r
00003e54 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
000028c8 g     F .text.itcm	000000b8 makeHeader(long*)
00000ef4  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00007584 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
20008f0c g     O .data	00000004 t_acq
2002832f g     O .bss	00000001 yield_active_check_flags
00005ae0 g     F .text.itcm	00000042 ExFatFile::sync()
0000dc70 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
2002832d g     O .bss	00000001 usb_high_speed
00006a5a g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
0000898c g     F .text.itcm	00000040 SdioCard::isBusy()
0000360c g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000942c g     F .text.itcm	00000000 memset
0000b47a g     F .text.itcm	00000010 main
20027620 g     O .bss	00000004 __malloc_max_total_mem
000053dc g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
0000dc68 g     F .text.itcm	00000002 __retarget_lock_init_recursive
20204800 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
0000822c g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00005e38 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
2000043c g     O .data	00000060 vtable for MTPStorage_SD
00003f7c g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000d9a0 g     F .text.itcm	00000066 strlcat
0000d774 g     F .text.itcm	00000008 __sclose
0000b1c0 g     F .text.itcm	00000054 usb_init_serialnumber
0000d3e8 g     F .text.itcm	00000004 _strtol_r
60002370 g       .text.code	00000000 __init_array_end
000131a0 g     F .text.itcm	00000cec _dtoa_r
0000bac0 g     F .text.itcm	00000560 _malloc_r
00007be6 g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
0000f7b0 g     F .text.itcm	0000001a __ascii_wctomb
00016448 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20027438 g     O .bss	00000004 FatVolume::m_cwv
0000b404  w    F .text.itcm	00000008 Print::print(char const*)
00015b70 g     F .text.itcm	00000076 __submore
200005d4  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000b4b8 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
0000476c g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
65e9edc7 g       *ABS*	00000000 __rtc_localtime
0000a96c g     F .text.itcm	0000004c micros
00003688 g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00005a04 g     F .text.itcm	000000dc ExFatFile::syncDir()
0000e244 g     F .text.itcm	000000a0 _malloc_trim_r
00015dc8 g     F .text.itcm	00000106 _wcsnrtombs_l
600023f8 g     O .text.progmem	00000004 string0
000099ec g     F .text.itcm	0000018c usb_serial_write
600017e8  w    F .text.code	00000002 startup_late_hook
0000a0c0 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000dd2  w    F .text.itcm	00000050 FsBaseFile::available() const
00008276 g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000b460  w    F .text.itcm	00000004 usb_serial_class::available()
0000dc88 g     F .text.itcm	000002dc strcmp
00003f16 g     F .text.itcm	00000030 MTPD::readstring(char*)
00006780 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
00005866  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
600023c0  w    O .text.progmem	00000020 usb_string_product_name
0000356c g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000a9b8 g     F .text.itcm	0000002a delay
000164d8 g     F .text.itcm	00000040 .hidden __fixunsdfdi
20028190 g     O .bss	00000002 dma_channel_allocated_mask
00000e56 g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
00000e90  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
00016550 g     F .fini	00000000 _fini
000032a2 g     F .text.itcm	00000002 acqPower(int)
00002728  w    F .text.itcm	00000014 FsBaseFile::sync()
00007db0 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
2002814c g     O .bss	00000004 t_off
000053b0 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000d654 g     F .text.itcm	00000040 sprintf
0000b5a8 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000b55e g     F .text.itcm	00000012 Print::print(long)
00006800 g     F .text.itcm	00000010 FatFile::close()
0000acd8 g     F .text.itcm	00000004 Panic_Temp_isr
000164a4 g     F .text.itcm	00000030 .hidden __fixdfdi
00000970 g     F .text.itcm	00000160 setAudioFrequency(int)
000025a8 g     F .text.itcm	0000000c queue_isBusy()
20008ef8 g     O .data	00000004 sd
000068bc g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
00015ed0 g     F .text.itcm	00000024 _wcsnrtombs_r
000084e4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000dbe8 g     F .text.itcm	0000002c _write_r
000143a0 g     F .text.itcm	00000028 iswspace_l
000089cc g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
2002818c g     O .bss	00000002 again
00002f5c g     F .text.itcm	000000b4 filing_init()
0000b038 g     F .text.itcm	00000094 usb_mtp_recv
0000e1b0 g     F .text.itcm	0000000c nanf
20027f80 g     O .bss	00000004 setup_ready
20008eec g     O .data	00000004 _impure_ptr
00004e82 g     F .text.itcm	0000002a ExFatFile::peek()
00012ccc g     F .text.itcm	00000130 __sflush_r
20000418  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
000142e0 g     F .text.itcm	00000054 _mbrtowc_r
0000b214  w    F .text.itcm	00000054 EventResponder::runFromYield()
00007ba0 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000d584 g     F .text.itcm	00000046 _fwalk_sglue
00008484 g     F .text.itcm	0000000c SdioCard::errorCode() const
000068ae g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
60002360 g       .text.code	00000000 __preinit_array_end
60001dc4 g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002660 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00002a5c g     F .text.itcm	00000084 newFileName(char*)
00000edc  w    F .text.itcm	00000018 FsFile::~FsFile()
00005524 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00007d62 g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001774 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0000ed10 g     F .text.itcm	0000002a __ascii_mbtowc
0000f490 g     F .text.itcm	00000064 __ulp
0000a0f4 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000b414  w    F .text.itcm	00000008 Print::print(unsigned long, int)
0000074c g     F .text.itcm	00000168 setup
20007800 g     O .data	00000078 usb_descriptor_list
00008710 g     F .text.itcm	00000004 SdioCard::status()
0000104c g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
000035d4 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00000e44  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00000e22  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000e1a0 g     F .text.itcm	00000010 nan
0000634c g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00003d70 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00006312 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20027400 g     O .bss	00000004 ExFatVolume::m_cwv
20068000 g       .text.csf	00000000 _estack
00007bc8 g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000b3d4 g     F .text.itcm	00000030 DMAChannel::release()
000020c4 g     F .text.itcm	00000118 loadParameters()
00009b90 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00012ed8 g     F .text.itcm	00000064 stpncpy
20008ee0 g     O .data	0000000c __sglue
00009740 g     F .text.itcm	00000100 usb_serial_configure
0000b58c  w    F .text.itcm	0000001c _write
200092c0 g       .data	00000000 _edata
000055fe g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
2002830b g     O .bss	00000001 external_psram_size
00003874 g     F .text.itcm	000000d0 MTPD::GetObjectInfo(unsigned long)
000084e4  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00004a68 g     F .text.itcm	00000048 FsName::get16()
00007c70  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008050 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00007bf6 g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
00004ba8 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006284 g     F .text.itcm	00000070 FatFile::addDirCluster()
00015cb4 g     F .text.itcm	000000aa __fputwc
0000b468  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00006dbe g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000bf8 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000a6dc g     F .text.itcm	00000046 ultoa
00003ed6 g     F .text.itcm	00000016 MTPD::read8()
2002818e g     O .bss	00000002 dgain
000079f6 g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001124 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000d714 g     F .text.itcm	0000003e __swrite
0000b2dc g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
000024bc g     F .text.itcm	000000c8 menu(short)
20008edc g     O .data	00000004 __malloc_trim_threshold
0000b458  w    F .text.itcm	00000004 usb_serial_class::peek()
0000d3f8 g     F .text.itcm	0000000a fcvtf
00008306  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00007d88 g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003494 g     F .text.itcm	00000024 rtcSetDate(int, int, int)
00001162 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
00014560 g     F .text.itcm	00000028 fiprintf
00014870 g     F .text.itcm	00000f8c _vfiprintf_r
000034b8 g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000924c  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20009300 g     O .bss	00002440 mtpd
0000f33c g     F .text.itcm	00000154 __mdiff
00002610 g     F .text.itcm	00000050 pullData(unsigned long*)
000084d4 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000013da g     F .text.itcm	00000094 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
000055be g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006108 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002980 g     F .text.itcm	0000005c checkEndOfFile(short)
20008818 g     O .data	00000120 _impure_data
00004f8c g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00002868 g     F .text.itcm	00000060 writeHeader(char*)
000144fc g     F .text.itcm	00000064 _jp2uc_l
00001e64 g     F .text.itcm	00000188 menu3()
0000d578 g     F .text.itcm	0000000c __sfp_lock_release
200279fc g     O .bss	00000004 mtp_txEventCount
0000b41c  w    F .text.itcm	00000014 Print::println(unsigned long, int)
0000273c g     F .text.itcm	00000044 timeStamp()
00008b94 g     F .text.itcm	00000074 SdioCard::writeStop()
00012e50 g     F .text.itcm	00000088 __sccl
00007e48 g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00004c42 g     F .text.itcm	00000014 ExFatFile::close()
20000800 g     O .data	00000101 _ctype_
0000ab90  w    F .text.itcm	00000004 _read
60002360 g       .text.code	00000000 __init_array_start
0000ba9c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00000fe8 g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
60002268 g     F .text.code	0000000e CrashReportClass::operator bool()
00003f02 g     F .text.itcm	00000014 MTPD::read32()
2000893c g     O .data	00000004 F_BUS_ACTUAL
0000ae52 g     F .text.itcm	00000036 quadtimer_init
20027964 g     O .bss	00000004 disk_count
000032a4 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007210 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
000033a0 g     F .text.itcm	000000cc date2time(datetime_t*)
0000b48c g     F .text.itcm	0000002c Stream::timedRead()
00015f54 g     F .text.itcm	000000d8 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000b338 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00007c72  w    F .text.itcm	00000006 SharedSpiCard::end()
0000e0c0 g     F .text.itcm	000000dc strlen
0000631e g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
00006536 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000e594 g     F .text.itcm	00000594 __gethex
600023c0 g     O .text.progmem	00000020 usb_string_product_name_default
0000d7c8 g     F .text.itcm	0000001c vdprintf
0000892c g     F .text.itcm	00000060 SdioCard::sectorCount()
000066e4 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
600017e6  w    F .text.code	00000002 startup_middle_hook
20000564 g     O .data	00000070 vtable for SdioCard
000163f4 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000011f6 g     F .text.itcm	00000048 MTPStorage_SD::close()
000061f4 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
600017ee g     F .text.code	00000112 configure_cache
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
000082fe  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
000012a0 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
00007f76  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
000029f0 g     F .text.itcm	0000006c newDirectory(char*)
000090a8 g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
000021dc g     F .text.itcm	000002e0 menu2()
00009350 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
00003010 g     F .text.itcm	00000290 compress(void*)
00006044  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c66 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00016134 g     F .text.itcm	0000027a .hidden __subdf3
60002360 g       .text.code	00000000 __preinit_array_start
0000a698 g     F .text.itcm	0000001c usb_receive
00005484 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
000011e0 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
20008f14 g     O .data	00000004 t_rep
0000ef30 g     F .text.itcm	00000060 __lo0bits
00005598 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
20008f18 g     O .data	00000004 tempDatai
00006622 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00022c00 g       *ABS*	00000000 _flashimagelen
00007fe4 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000b798 g     F .text.itcm	0000000a __aeabi_atexit
00000edc  w    F .text.itcm	00000018 FsFile::~FsFile()
0000abb4 g     F .text.itcm	00000024 rtc_get
00005920 g     F .text.itcm	0000008c ExFatFile::remove()
00012f48 g     F .text.itcm	00000078 frexp
70000000 g       .bss.extram	00000000 _extram_start
0000b314 g     F .text.itcm	00000004 pendablesrvreq_isr
0000405c g     F .text.itcm	000000f4 MTPD::SendObject()
20028192 g     O .bss	00000002 monitor
00001d50 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
20008964 g     O .data	0000016c __global_locale
00008d88 g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00009840 g     F .text.itcm	000000d4 usb_serial_read
200275f0 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000b5c2 g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000a608 g     F .text.itcm	00000040 usb_config_tx
0000ab94  w    F .text.itcm	00000006 _close
00006dfa g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000bab0 g     F .text.itcm	00000010 free
00004ab0 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010a6 g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
0000ed9c g     F .text.itcm	000000a4 __multadd
0000ed88 g     F .text.itcm	00000012 _Bfree
00006086 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
20008f1c  w    O .data	00000016 usb_string_serial_number
00009114 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
000084b8 g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200092c0
60001428:	.word	0x20028360

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	600017e4 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	600017ee <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001b74 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	600022f0 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001900 <configure_external_ram>
	analog_init();
6000159c:	bl	60002278 <analog_init>
	pwm_init();
600015a0:	bl	600022e0 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001bd0 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	600017e6 <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	6000165c <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	600017ea <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	600017e8 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	600022d8 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002330 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x00016558
600015dc:	.word	0x600024d8
600015e0:	.word	0x00000000
600015e4:	.word	0x200092c0
600015e8:	.word	0x60018a34
600015ec:	.word	0x20000000
600015f0:	.word	0x20009000
600015f4:	.word	0x0000a9e5
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000b315
6000160c:	.word	0x0000b319
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x2002813c
6000161c:	.word	0x08f0d180
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20028140
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	ldr	r3, [pc, #192]	; (60001720 <usb_init+0xc4>)
6000165e:	movw	r2, #3937	; 0xf61
{
60001662:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001664:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001668:	bl	60002358 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000166c:	ldr	r2, [pc, #180]	; (60001724 <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166e:	ldr	r1, [pc, #184]	; (60001728 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001670:	ldr.w	r3, [r2, #128]	; 0x80
60001674:	orr.w	r3, r3, #3
60001678:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
6000167c:	movw	r2, #1028	; 0x404
60001680:	ldr	r3, [pc, #168]	; (6000172c <usb_init+0xd0>)
60001682:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001686:	ldr	r2, [pc, #168]	; (60001730 <usb_init+0xd4>)
60001688:	ldr	r0, [r2, #0]
6000168a:	tst	r0, r1
6000168c:	bne.n	60001696 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000168e:	ldr.w	r1, [r3, #424]	; 0x1a8
60001692:	lsls	r4, r1, #30
60001694:	beq.n	600016cc <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001696:	mov.w	r1, #2147483648	; 0x80000000
6000169a:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000169c:	ldr.w	r2, [r3, #320]	; 0x140
600016a0:	orr.w	r2, r2, #2
600016a4:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a8:	ldr	r2, [pc, #128]	; (6000172c <usb_init+0xd0>)
600016aa:	ldr.w	r3, [r2, #320]	; 0x140
600016ae:	lsls	r0, r3, #30
600016b0:	bmi.n	600016aa <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b2:	mov.w	r3, #3758153728	; 0xe000e000
600016b6:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016ba:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016bc:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016c0:	mov.w	r2, #2147483648	; 0x80000000
600016c4:	ldr	r3, [pc, #104]	; (60001730 <usb_init+0xd4>)
600016c6:	str	r2, [r3, #56]	; 0x38
		delay(25);
600016c8:	bl	600022f8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016cc:	ldr	r3, [pc, #96]	; (60001730 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
600016ce:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d0:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d4:	ldr	r4, [pc, #84]	; (6000172c <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d6:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d8:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
600016dc:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016de:	movs	r3, #10
600016e0:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016e4:	ldr	r3, [pc, #76]	; (60001734 <usb_init+0xd8>)
600016e6:	mov	r0, r3
600016e8:	bl	60002318 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016ec:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016f0:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016f4:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016f6:	mov.w	r2, #4194304	; 0x400000
600016fa:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016fc:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001700:	ldr	r2, [pc, #52]	; (60001738 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001702:	str.w	r3, [r4, #328]	; 0x148
60001706:	ldr	r3, [pc, #52]	; (6000173c <usb_init+0xe0>)
60001708:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170c:	mov.w	r3, #3758153728	; 0xe000e000
60001710:	mov.w	r2, #131072	; 0x20000
60001714:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001718:	movs	r3, #1
6000171a:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000171e:	pop	{r4, pc}
60001720:	.word	0x400d8000
60001724:	.word	0x400fc000
60001728:	.word	0x001e1c00
6000172c:	.word	0x402e0000
60001730:	.word	0x400d9000
60001734:	.word	0x20000000
60001738:	.word	0x0000a121
6000173c:	.word	0x20009000

60001740 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001740:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001742:	ldr	r3, [pc, #60]	; (60001780 <_reboot_Teensyduino_+0x40>)
60001744:	ldr	r3, [r3, #96]	; 0x60
60001746:	lsls	r3, r3, #30
60001748:	bmi.n	6000174c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000174a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000174c:	cpsid	i
		USB1_USBCMD = 0;
6000174e:	ldr	r3, [pc, #52]	; (60001784 <_reboot_Teensyduino_+0x44>)
60001750:	movs	r2, #0
60001752:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60001756:	sub.w	r3, r3, #2310144	; 0x234000
6000175a:	ldr	r2, [pc, #44]	; (60001788 <_reboot_Teensyduino_+0x48>)
6000175c:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000175e:	sub.w	r3, r3, #534773760	; 0x1fe00000
60001762:	sub.w	r3, r3, #700416	; 0xab000
60001766:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001768:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000176c:	ldr	r0, [pc, #28]	; (6000178c <_reboot_Teensyduino_+0x4c>)
6000176e:	ldr	r3, [pc, #32]	; (60001790 <_reboot_Teensyduino_+0x50>)
60001770:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	mov.w	r3, #2097152	; 0x200000
60001776:	ldr	r3, [r3, #28]
60001778:	ldr	r3, [r3, #8]
6000177a:	blx	r3
6000177c:	b.n	6000174c <_reboot_Teensyduino_+0xc>
6000177e:	nop
60001780:	.word	0x401f4400
60001784:	.word	0x402e0000
60001788:	.word	0x00200003
6000178c:	.word	0x20208000
60001790:	.word	0xeb120000

60001794 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
60001794:	ldr	r3, [pc, #28]	; (600017b4 <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001796:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001798:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
6000179a:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
6000179e:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017a2:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017a6:	ldr	r2, [r3, #20]
600017a8:	lsls	r2, r2, #31
600017aa:	bpl.n	600017a6 <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600017ac:	movs	r2, #1
600017ae:	str	r2, [r3, #20]
}
600017b0:	bx	lr
600017b2:	nop
600017b4:	.word	0x402a4000

600017b8 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
600017b8:	ldr	r3, [pc, #32]	; (600017dc <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017ba:	ldr	r2, [pc, #36]	; (600017e0 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
600017bc:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
600017c0:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600017c4:	movs	r2, #1
600017c6:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600017ca:	ldr	r2, [r3, #20]
600017cc:	lsls	r2, r2, #31
600017ce:	bpl.n	600017ca <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
600017d0:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017d4:	movs	r2, #33	; 0x21
}
600017d6:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
600017d8:	str	r2, [r3, #20]
}
600017da:	bx	lr
600017dc:	.word	0x402a4000
600017e0:	.word	0x00030004

600017e4 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600017e4:	bx	lr

600017e6 <startup_default_middle_hook>:
600017e6:	bx	lr

600017e8 <startup_default_late_hook>:
600017e8:	bx	lr

600017ea <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600017ea:	nop
600017ec:	bx	lr

600017ee <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
600017ee:	mov.w	r3, #3758153728	; 0xe000e000
600017f2:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017f4:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
600017f6:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017fa:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017fe:	ldr	r2, [pc, #184]	; (600018b8 <configure_cache+0xca>)
60001800:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001804:	movs	r2, #17
60001806:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000180a:	ldr	r2, [pc, #176]	; (600018bc <configure_cache+0xce>)
6000180c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001810:	movs	r2, #18
60001812:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001816:	ldr	r2, [pc, #168]	; (600018c0 <configure_cache+0xd2>)
60001818:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000181c:	ldr	r2, [pc, #164]	; (600018c4 <configure_cache+0xd6>)
6000181e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001822:	ldr	r2, [pc, #164]	; (600018c8 <configure_cache+0xda>)
60001824:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001828:	ldr	r2, [pc, #160]	; (600018cc <configure_cache+0xde>)
6000182a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
6000182e:	ldr	r2, [pc, #160]	; (600018d0 <configure_cache+0xe2>)
60001830:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001834:	ldr	r2, [pc, #156]	; (600018d4 <configure_cache+0xe6>)
60001836:	orr.w	r2, r2, #21
6000183a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000183e:	ldr	r2, [pc, #152]	; (600018d8 <configure_cache+0xea>)
60001840:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001844:	add.w	r2, r2, #270532608	; 0x10200000
60001848:	adds	r2, #13
6000184a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000184e:	ldr	r2, [pc, #140]	; (600018dc <configure_cache+0xee>)
60001850:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001854:	ldr	r2, [pc, #136]	; (600018e0 <configure_cache+0xf2>)
60001856:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000185a:	ldr	r2, [pc, #136]	; (600018e4 <configure_cache+0xf6>)
6000185c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001860:	ldr	r2, [pc, #132]	; (600018e8 <configure_cache+0xfa>)
60001862:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001866:	ldr	r2, [pc, #132]	; (600018ec <configure_cache+0xfe>)
60001868:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000186c:	ldr	r2, [pc, #128]	; (600018f0 <configure_cache+0x102>)
6000186e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001872:	ldr	r2, [pc, #128]	; (600018f4 <configure_cache+0x106>)
60001874:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001878:	ldr	r2, [pc, #124]	; (600018f8 <configure_cache+0x10a>)
6000187a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
6000187e:	ldr	r2, [pc, #124]	; (600018fc <configure_cache+0x10e>)
60001880:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
60001884:	nop
	asm("nop");
60001886:	nop
	asm("nop");
60001888:	nop
	asm("nop");
6000188a:	nop
	asm("nop");
6000188c:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000188e:	movs	r2, #1
60001890:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
60001894:	dsb	sy
	asm("isb");
60001898:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000189c:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600018a0:	dsb	sy
	asm("isb");
600018a4:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600018a8:	ldr.w	r2, [r3, #3348]	; 0xd14
600018ac:	orr.w	r2, r2, #196608	; 0x30000
600018b0:	str.w	r2, [r3, #3348]	; 0xd14
}
600018b4:	bx	lr
600018b6:	nop
600018b8:	.word	0x1000003f
600018bc:	.word	0x07080025
600018c0:	.word	0x00100009
600018c4:	.word	0x00200013
600018c8:	.word	0x07020021
600018cc:	.word	0x20000014
600018d0:	.word	0x13080025
600018d4:	.word	0x20028360
600018d8:	.word	0x10000009
600018dc:	.word	0x130b0027
600018e0:	.word	0x40000017
600018e4:	.word	0x13100033
600018e8:	.word	0x60000018
600018ec:	.word	0x070b002f
600018f0:	.word	0x70000019
600018f4:	.word	0x130b002f
600018f8:	.word	0x8000001a
600018fc:	.word	0x130b003b

60001900 <configure_external_ram>:
{
60001900:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001902:	ldr	r3, [pc, #536]	; (60001b1c <configure_external_ram+0x21c>)
60001904:	ldr	r2, [pc, #536]	; (60001b20 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001906:	ldr	r1, [pc, #540]	; (60001b24 <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001908:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
6000190c:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001910:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001914:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001918:	ldr	r4, [pc, #524]	; (60001b28 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000191a:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000191e:	add.w	r2, r2, #28672	; 0x7000
60001922:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001926:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000192a:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000192e:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001932:	movs	r2, #24
60001934:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001936:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001938:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000193a:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
6000193c:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
6000193e:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001942:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001946:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000194a:	movs	r2, #1
6000194c:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001950:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001954:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001958:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
6000195c:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001960:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001964:	ldr	r2, [pc, #452]	; (60001b2c <configure_external_ram+0x22c>)
60001966:	ldr	r3, [r2, #24]
60001968:	bic.w	r3, r3, #3758096384	; 0xe0000000
6000196c:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001970:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001974:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001978:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000197a:	ldr.w	r3, [r2, #132]	; 0x84
6000197e:	orr.w	r3, r3, #12
60001982:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001986:	ldr	r3, [pc, #424]	; (60001b30 <configure_external_ram+0x230>)
60001988:	ldr	r2, [r3, #0]
6000198a:	orr.w	r2, r2, #2
6000198e:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001990:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001992:	ldr	r2, [pc, #416]	; (60001b34 <configure_external_ram+0x234>)
60001994:	bic.w	r1, r1, #30848	; 0x7880
60001998:	bic.w	r1, r1, #115	; 0x73
6000199c:	lsls	r1, r1, #16
6000199e:	lsrs	r1, r1, #16
600019a0:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019a2:	ldr	r1, [pc, #404]	; (60001b38 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600019a4:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600019a6:	mov.w	r2, #4294967295
600019aa:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019ac:	add.w	r2, r2, #16187392	; 0xf70000
600019b0:	ldr	r0, [r1, #8]
600019b2:	add.w	r2, r2, #14336	; 0x3800
600019b6:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019b8:	ldr	r0, [pc, #384]	; (60001b3c <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
600019ba:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600019be:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
600019c0:	ldr	r2, [r3, #12]
600019c2:	bic.w	r2, r2, #120	; 0x78
600019c6:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019c8:	ldr	r2, [r3, #32]
600019ca:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019cc:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019ce:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019d0:	ldr	r2, [r3, #32]
600019d2:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600019d4:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
600019d8:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
600019da:	ldr	r0, [pc, #356]	; (60001b40 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
600019dc:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
600019de:	ldr	r2, [pc, #356]	; (60001b44 <configure_external_ram+0x244>)
600019e0:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
600019e2:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
600019e4:	ldr.w	r2, [r1, #184]	; 0xb8
600019e8:	bic.w	r2, r2, #63	; 0x3f
600019ec:	orr.w	r2, r2, #1
600019f0:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019f4:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
600019f8:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
600019fa:	bic.w	r2, r2, #63	; 0x3f
600019fe:	orr.w	r2, r2, #1
60001a02:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a06:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001a0a:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a0c:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a0e:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a10:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001a14:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001a16:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001a18:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a1c:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a1e:	ldr	r0, [pc, #296]	; (60001b48 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001a20:	bic.w	r2, r2, #2
60001a24:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a26:	ldr	r2, [pc, #292]	; (60001b4c <configure_external_ram+0x24c>)
60001a28:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a2a:	movs	r2, #2
60001a2c:	str	r2, [r3, #28]
60001a2e:	ldr	r2, [pc, #288]	; (60001b50 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001a30:	str.w	r1, [r2], #4
60001a34:	cmp	r2, r0
60001a36:	bne.n	60001a30 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001a38:	ldr	r2, [r3, #0]
60001a3a:	orr.w	r2, r2, #1
60001a3e:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001a40:	ldr	r3, [pc, #236]	; (60001b30 <configure_external_ram+0x230>)
60001a42:	ldr	r4, [r3, #0]
60001a44:	ands.w	r4, r4, #1
60001a48:	bne.n	60001a42 <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a4a:	ldr	r2, [pc, #256]	; (60001b4c <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a4c:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001a4e:	mov	r1, r4
60001a50:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001a52:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a54:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001a58:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001a5a:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001a5e:	movw	r2, #1126	; 0x466
60001a62:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001a66:	movw	r2, #1177	; 0x499
60001a6a:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a6e:	ldr	r2, [pc, #228]	; (60001b54 <configure_external_ram+0x254>)
60001a70:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a74:	movw	r2, #9217	; 0x2401
60001a78:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a7c:	movw	r2, #1077	; 0x435
60001a80:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a84:	ldr	r2, [pc, #208]	; (60001b58 <configure_external_ram+0x258>)
60001a86:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a8a:	ldr	r2, [pc, #208]	; (60001b5c <configure_external_ram+0x25c>)
60001a8c:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a90:	ldr	r2, [pc, #204]	; (60001b60 <configure_external_ram+0x260>)
60001a92:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a96:	movw	r2, #8705	; 0x2201
60001a9a:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001a9e:	bl	60001794 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001aa2:	movs	r0, #1
60001aa4:	bl	60001794 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001aa8:	mov	r0, r6
60001aaa:	bl	60001794 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aae:	mov	r0, r4
60001ab0:	bl	600017b8 <flexspi2_psram_id>
60001ab4:	movw	r3, #23821	; 0x5d0d
60001ab8:	mov	r5, r0
60001aba:	cmp	r0, r3
60001abc:	bne.n	60001b0e <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001abe:	movs	r0, #4
60001ac0:	bl	60001794 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001ac4:	mov.w	r1, #8388608	; 0x800000
60001ac8:	mov	r0, r4
60001aca:	bl	60001794 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001ace:	movs	r0, #1
60001ad0:	bl	60001794 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001ad4:	mov	r0, r6
60001ad6:	bl	60001794 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ada:	mov	r0, r1
60001adc:	bl	600017b8 <flexspi2_psram_id>
60001ae0:	cmp	r0, r5
60001ae2:	bne.n	60001b0a <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001ae4:	movs	r0, #4
60001ae6:	bl	60001794 <flexspi2_command>
			external_psram_size = 16;
60001aea:	movs	r0, #16
			external_psram_size * 0x100000 -
60001aec:	ldr	r1, [pc, #116]	; (60001b64 <configure_external_ram+0x264>)
			external_psram_size = 16;
60001aee:	ldr	r3, [pc, #120]	; (60001b68 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001af0:	ldr	r2, [pc, #120]	; (60001b6c <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001af2:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af4:	movs	r3, #0
			external_psram_size * 0x100000 -
60001af6:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001af8:	str	r3, [sp, #0]
60001afa:	movs	r3, #1
60001afc:	add.w	r2, r2, r0, lsl #20
60001b00:	ldr	r0, [pc, #108]	; (60001b70 <configure_external_ram+0x270>)
60001b02:	bl	60002340 <__sm_set_pool_veneer>
}
60001b06:	add	sp, #8
60001b08:	pop	{r4, r5, r6, pc}
60001b0a:	movs	r0, #8
60001b0c:	b.n	60001aec <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b0e:	movs	r2, #16
60001b10:	ldr	r0, [pc, #92]	; (60001b70 <configure_external_ram+0x270>)
}
60001b12:	add	sp, #8
60001b14:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001b18:	b.w	60002318 <__memset_veneer>
60001b1c:	.word	0x401f8000
60001b20:	.word	0x0001b0f9
60001b24:	.word	0x000110f9
60001b28:	.word	0x7cf0ff00
60001b2c:	.word	0x400fc000
60001b30:	.word	0x402a4000
60001b34:	.word	0xffff0012
60001b38:	.word	0x402a8000
60001b3c:	.word	0x80000040
60001b40:	.word	0x00020063
60001b44:	.word	0x830f00ff
60001b48:	.word	0x402a4300
60001b4c:	.word	0x5af05af0
60001b50:	.word	0x402a4200
60001b54:	.word	0x3018049f
60001b58:	.word	0x0a1806eb
60001b5c:	.word	0x26013206
60001b60:	.word	0x0a180638
60001b64:	.word	0x70000000
60001b68:	.word	0x2002830b
60001b6c:	.word	0x70000000
60001b70:	.word	0x20027974

60001b74 <usb_pll_start>:
{
60001b74:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b76:	ldr	r3, [pc, #84]	; (60001bcc <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001b78:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001b7a:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001b7e:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001b82:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b86:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b8a:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001b8e:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001b90:	tst.w	r2, #2
60001b94:	beq.n	60001b9e <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001b96:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001b98:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001b9a:	str	r7, [r3, #24]
			continue;
60001b9c:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001b9e:	tst.w	r2, #8192	; 0x2000
60001ba2:	bne.n	60001ba8 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001ba4:	str	r5, [r3, #20]
			continue;
60001ba6:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001ba8:	tst.w	r2, #4096	; 0x1000
60001bac:	bne.n	60001bb2 <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001bae:	str	r4, [r3, #20]
			continue;
60001bb0:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001bb2:	cmp	r2, #0
60001bb4:	bge.n	60001b8e <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001bb6:	tst.w	r2, #65536	; 0x10000
60001bba:	beq.n	60001bc0 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001bbc:	str	r1, [r3, #24]
			continue;
60001bbe:	b.n	60001b8e <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001bc0:	lsls	r2, r2, #25
60001bc2:	bmi.n	60001bc8 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001bc4:	str	r0, [r3, #20]
			continue;
60001bc6:	b.n	60001b8e <usb_pll_start+0x1a>
}
60001bc8:	pop	{r4, r5, r6, r7, pc}
60001bca:	nop
60001bcc:	.word	0x400d8000

60001bd0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd0:	ldr	r2, [pc, #248]	; (60001ccc <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bd2:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bd6:	ldr	r0, [pc, #248]	; (60001cd0 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001bd8:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001bdc:	vldr	s10, [pc, #244]	; 60001cd4 <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be0:	bic.w	r3, r3, #1
{
60001be4:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001be6:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bea:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001bec:	ldr	r4, [pc, #232]	; (60001cd8 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001bee:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001bf2:	ldr	r3, [pc, #232]	; (60001cdc <tempmon_init+0x10c>)
60001bf4:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001bf8:	uxtb	r1, r3
60001bfa:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001bfc:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c00:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c04:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c06:	vcvt.f32.s32	s14, s15
60001c0a:	ldr	r1, [pc, #212]	; (60001ce0 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c0c:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001c10:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c12:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001c16:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c1a:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c1e:	ldr	r3, [pc, #196]	; (60001ce4 <tempmon_init+0x114>)
60001c20:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c24:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c28:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001c2c:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c30:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001c34:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c38:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c3c:	vdiv.f32	s11, s10, s12
60001c40:	vadd.f32	s11, s11, s13
60001c44:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c48:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c4c:	vldr	s11, [pc, #152]	; 60001ce8 <tempmon_init+0x118>
60001c50:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001c54:	orr.w	r3, r3, r1, lsl #20
60001c58:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c5c:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c60:	ldr	r3, [pc, #136]	; (60001cec <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c62:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c66:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c6a:	vdiv.f32	s11, s14, s12
60001c6e:	vadd.f32	s14, s11, s13
60001c72:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c76:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c7a:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001c7e:	and.w	r3, r3, r0, lsl #16
60001c82:	orrs	r3, r1
60001c84:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c88:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001c8c:	vadd.f32	s15, s14, s13
60001c90:	vcvt.u32.f32	s15, s15
60001c94:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001c98:	ubfx	r3, r3, #0, #12
60001c9c:	orrs	r3, r1
60001c9e:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001ca2:	ldr.w	r3, [r2, #128]	; 0x80
60001ca6:	orr.w	r3, r3, #2
60001caa:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cae:	movs	r2, #0
60001cb0:	ldr	r3, [pc, #60]	; (60001cf0 <tempmon_init+0x120>)
60001cb2:	strb.w	r2, [r3, #64]	; 0x40
60001cb6:	ldr	r3, [pc, #60]	; (60001cf4 <tempmon_init+0x124>)
60001cb8:	ldr	r2, [pc, #60]	; (60001cf8 <tempmon_init+0x128>)
60001cba:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001cbe:	mov.w	r3, #3758153728	; 0xe000e000
60001cc2:	movs	r2, #1
60001cc4:	str.w	r2, [r3, #264]	; 0x108
}
60001cc8:	pop	{r4, pc}
60001cca:	nop
60001ccc:	.word	0x400d8100
60001cd0:	.word	0x20027aa0
60001cd4:	.word	0x42aa0000
60001cd8:	.word	0x20027a9c
60001cdc:	.word	0x401f4400
60001ce0:	.word	0x20027aa4
60001ce4:	.word	0x20027aa8
60001ce8:	.word	0x42b40000
60001cec:	.word	0x0fff0000
60001cf0:	.word	0xe000e400
60001cf4:	.word	0x20009000
60001cf8:	.word	0x0000acd9

60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001cfc:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001cfe:	ldr	r4, [pc, #64]	; (60001d40 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001d00:	ldr.w	r3, [r4, #128]	; 0x80
60001d04:	cmp	r3, #11
60001d06:	bne.n	60001d3a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001d08:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001d0c:	ldr	r2, [pc, #52]	; (60001d44 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d0e:	ldr	r6, [pc, #56]	; (60001d48 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001d10:	ldr	r5, [pc, #56]	; (60001d4c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001d12:	ldr	r1, [r2, #0]
60001d14:	adds	r2, #4
60001d16:	eors	r3, r1
60001d18:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001d1a:	and.w	r0, r3, #1
60001d1e:	subs	r1, #1
60001d20:	mul.w	r0, r6, r0
60001d24:	eor.w	r3, r0, r3, lsr #1
60001d28:	bne.n	60001d1a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001d2a:	cmp	r2, r5
60001d2c:	bne.n	60001d12 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001d2e:	ldr.w	r0, [r4, #168]	; 0xa8
60001d32:	subs	r3, r0, r3
60001d34:	negs	r0, r3
60001d36:	adcs	r0, r3
	return 1;
}
60001d38:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001d3a:	movs	r0, #0
60001d3c:	b.n	60001d38 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001d3e:	nop
60001d40:	.word	0x2027ff00
60001d44:	.word	0x2027ff80
60001d48:	.word	0xedb88320
60001d4c:	.word	0x2027ffa8

60001d50 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001d50:	ldr	r2, [pc, #96]	; (60001db4 <CrashReportClass::clear()+0x64>)
60001d52:	movs	r3, #0
{
60001d54:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001d56:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001d5a:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001d5e:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001d62:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001d66:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001d6a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001d6e:	mov.w	r4, #3758153728	; 0xe000e000
60001d72:	adds	r2, #128	; 0x80
60001d74:	str.w	r2, [r4, #3952]	; 0xf70
60001d78:	adds	r2, #32
60001d7a:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001d7e:	dsb	sy
	asm("isb");
60001d82:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d86:	ldr	r2, [pc, #48]	; (60001db8 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001d88:	ldr	r6, [pc, #48]	; (60001dbc <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d8a:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d8c:	ldr	r5, [pc, #48]	; (60001dc0 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001d8e:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d90:	movs	r1, #28
	SRC_GPR5 = 0;
60001d92:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d94:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001d96:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001d9a:	bl	60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001d9e:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001da2:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001da6:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001daa:	dsb	sy
	asm("isb");
60001dae:	isb	sy
}
60001db2:	pop	{r4, r5, r6, pc}
60001db4:	.word	0x2027ff00
60001db8:	.word	0x400f8000
60001dbc:	.word	0x2027f000
60001dc0:	.word	0x2027ffc0

60001dc4 <CrashReportClass::printTo(Print&) const>:
{
60001dc4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001dc8:	mov	r4, r1
  if (isvalid(info)) {
60001dca:	bl	60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001dce:	cmp	r0, #0
60001dd0:	beq.w	60002174 <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001dd4:	ldr	r6, [pc, #692]	; (6000208c <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001dd6:	mov	r0, r4
60001dd8:	ldr	r1, [pc, #692]	; (60002090 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001dda:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001dde:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001de2:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001de6:	ldr	r1, [pc, #684]	; (60002094 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001de8:	mov	r0, r4
    info->time /= 60;
60001dea:	udiv	r9, r7, r8
    info->time /= 60;
60001dee:	udiv	r5, r9, r8
60001df2:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001df6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001dfa:	movs	r3, #24
    p.print(hh);
60001dfc:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001dfe:	udiv	r1, r5, r3
60001e02:	mls	r1, r3, r1, r5
    p.print(hh);
60001e06:	uxtb	r1, r1
60001e08:	bl	60002338 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e0c:	ldr	r1, [pc, #648]	; (60002098 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e0e:	mov	r0, r4
60001e10:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001e14:	mls	r1, r8, r5, r9
    p.print(mm);
60001e18:	mov	r0, r4
60001e1a:	uxtb	r1, r1
60001e1c:	bl	60002338 <___ZN5Print5printEh_veneer>
    p.print(":");
60001e20:	ldr	r1, [pc, #628]	; (60002098 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001e22:	mov	r0, r4
60001e24:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001e28:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001e2c:	mov	r0, r4
60001e2e:	uxtb	r1, r1
60001e30:	bl	60002338 <___ZN5Print5printEh_veneer>
60001e34:	mov	r0, r4
60001e36:	bl	600022e8 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001e3a:	ldr	r1, [pc, #608]	; (6000209c <CrashReportClass::printTo(Print&) const+0x2d8>)
60001e3c:	mov	r0, r4
60001e3e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001e42:	movs	r2, #16
60001e44:	ldr.w	r1, [r6, #152]	; 0x98
60001e48:	mov	r0, r4
60001e4a:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001e4e:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001e52:	cmp	r5, #0
60001e54:	beq.n	60001f04 <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001e56:	ldr	r1, [pc, #584]	; (600020a0 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001e58:	mov	r0, r4
60001e5a:	bl	60002310 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001e5e:	movs	r2, #16
60001e60:	ldr.w	r1, [r6, #136]	; 0x88
60001e64:	mov	r0, r4
60001e66:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001e6a:	lsls	r2, r5, #31
60001e6c:	bpl.w	60002014 <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001e70:	ldr	r1, [pc, #560]	; (600020a4 <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001e72:	mov	r0, r4
60001e74:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001e78:	lsls	r2, r5, #24
60001e7a:	bpl.n	60001ed0 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001e7c:	ldr	r1, [pc, #552]	; (600020a8 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001e7e:	mov	r0, r4
60001e80:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001e84:	movs	r2, #16
60001e86:	ldr.w	r1, [r6, #144]	; 0x90
60001e8a:	mov	r0, r4
60001e8c:	bl	60002320 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001e90:	ldr.w	r2, [r6, #144]	; 0x90
60001e94:	cmp	r2, #31
60001e96:	bhi.w	60002036 <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001e9a:	ldr	r1, [pc, #528]	; (600020ac <CrashReportClass::printTo(Print&) const+0x2e8>)
60001e9c:	mov	r0, r4
60001e9e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ea2:	movs	r2, #16
60001ea4:	ldr.w	r1, [r6, #152]	; 0x98
60001ea8:	mov	r0, r4
60001eaa:	bl	60002320 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60001eae:	ldr	r1, [pc, #512]	; (600020b0 <CrashReportClass::printTo(Print&) const+0x2ec>)
60001eb0:	mov	r0, r4
60001eb2:	bl	60002310 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001eb6:	ldr.w	r1, [r6, #152]	; 0x98
60001eba:	movs	r2, #16
60001ebc:	mov	r0, r4
60001ebe:	bl	60002320 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
60001ec2:	ldr	r1, [pc, #496]	; (600020b4 <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60001ec4:	mov	r0, r4
60001ec6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.println();
60001eca:	mov	r0, r4
60001ecc:	bl	600022e8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001ed0:	lsls	r3, r5, #23
60001ed2:	bpl.w	6000204a <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
60001ed6:	ldr	r1, [pc, #480]	; (600020b8 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60001ed8:	mov	r0, r4
60001eda:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001ede:	lsls	r7, r5, #16
60001ee0:	bpl.n	60001ef6 <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
60001ee2:	ldr	r1, [pc, #472]	; (600020bc <CrashReportClass::printTo(Print&) const+0x2f8>)
60001ee4:	mov	r0, r4
60001ee6:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60001eea:	movs	r2, #16
60001eec:	ldr.w	r1, [r6, #148]	; 0x94
60001ef0:	mov	r0, r4
60001ef2:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001ef6:	lsls	r0, r5, #15
60001ef8:	bpl.w	60002074 <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60001efc:	ldr	r1, [pc, #448]	; (600020c0 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60001efe:	mov	r0, r4
60001f00:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
60001f04:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60001f08:	cbz	r5, 60001f2c <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60001f0a:	ldr	r1, [pc, #440]	; (600020c4 <CrashReportClass::printTo(Print&) const+0x300>)
60001f0c:	mov	r0, r4
60001f0e:	bl	60002310 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
60001f12:	movs	r2, #16
60001f14:	ldr.w	r1, [r6, #140]	; 0x8c
60001f18:	mov	r0, r4
60001f1a:	bl	60002348 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001f1e:	lsls	r0, r5, #30
60001f20:	bpl.w	6000216a <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
60001f24:	ldr	r1, [pc, #416]	; (600020c8 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
60001f26:	mov	r0, r4
60001f28:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60001f2c:	ldr	r1, [pc, #412]	; (600020cc <CrashReportClass::printTo(Print&) const+0x308>)
60001f2e:	mov	r0, r4
60001f30:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
60001f34:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001f38:	movs	r1, #2
60001f3a:	mov	r0, r4
60001f3c:	vcvt.f64.f32	d0, s0
60001f40:	bl	60002350 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
60001f44:	ldr	r1, [pc, #392]	; (600020d0 <CrashReportClass::printTo(Print&) const+0x30c>)
60001f46:	mov	r0, r4
60001f48:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
60001f4c:	ldr	r1, [pc, #388]	; (600020d4 <CrashReportClass::printTo(Print&) const+0x310>)
60001f4e:	mov	r0, r4
60001f50:	bl	60002310 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
60001f54:	ldr	r3, [pc, #384]	; (600020d8 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001f56:	ldr	r1, [pc, #388]	; (600020dc <CrashReportClass::printTo(Print&) const+0x318>)
60001f58:	movs	r2, #10
60001f5a:	ldr	r0, [r3, #0]
60001f5c:	movs	r3, #0
60001f5e:	udiv	r1, r0, r1
60001f62:	mov	r0, r4
60001f64:	bl	600022d0 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
60001f68:	ldr	r1, [pc, #372]	; (600020e0 <CrashReportClass::printTo(Print&) const+0x31c>)
60001f6a:	mov	r0, r4
60001f6c:	bl	60002310 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
60001f70:	ldr	r3, [pc, #368]	; (600020e4 <CrashReportClass::printTo(Print&) const+0x320>)
60001f72:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001f74:	lsls	r2, r5, #30
60001f76:	bpl.n	60001f8a <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
60001f78:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f7a:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
60001f7c:	ldr	r3, [pc, #360]	; (600020e8 <CrashReportClass::printTo(Print&) const+0x324>)
60001f7e:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
60001f80:	ite	eq
60001f82:	ldreq	r1, [pc, #360]	; (600020ec <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
60001f84:	ldrne	r1, [pc, #360]	; (600020f0 <CrashReportClass::printTo(Print&) const+0x32c>)
60001f86:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001f8a:	lsls	r7, r5, #29
60001f8c:	bpl.n	60001f96 <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
60001f8e:	ldr	r1, [pc, #356]	; (600020f4 <CrashReportClass::printTo(Print&) const+0x330>)
60001f90:	mov	r0, r4
60001f92:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001f96:	lsls	r6, r5, #28
60001f98:	bpl.n	60001fa2 <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
60001f9a:	ldr	r1, [pc, #348]	; (600020f8 <CrashReportClass::printTo(Print&) const+0x334>)
60001f9c:	mov	r0, r4
60001f9e:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001fa2:	lsls	r0, r5, #27
60001fa4:	bpl.n	60001fae <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
60001fa6:	ldr	r1, [pc, #340]	; (600020fc <CrashReportClass::printTo(Print&) const+0x338>)
60001fa8:	mov	r0, r4
60001faa:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001fae:	lsls	r1, r5, #26
60001fb0:	bpl.n	60001fba <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
60001fb2:	ldr	r1, [pc, #332]	; (60002100 <CrashReportClass::printTo(Print&) const+0x33c>)
60001fb4:	mov	r0, r4
60001fb6:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001fba:	lsls	r2, r5, #25
60001fbc:	bpl.n	60001fc6 <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60001fbe:	ldr	r1, [pc, #324]	; (60002104 <CrashReportClass::printTo(Print&) const+0x340>)
60001fc0:	mov	r0, r4
60001fc2:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001fc6:	lsls	r3, r5, #24
60001fc8:	bpl.n	60001fd2 <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60001fca:	ldr	r1, [pc, #316]	; (60002108 <CrashReportClass::printTo(Print&) const+0x344>)
60001fcc:	mov	r0, r4
60001fce:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001fd2:	ands.w	r5, r5, #256	; 0x100
60001fd6:	beq.w	600021a6 <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60001fda:	ldr	r1, [pc, #304]	; (6000210c <CrashReportClass::printTo(Print&) const+0x348>)
60001fdc:	mov	r0, r4
60001fde:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fe2:	ldr	r2, [pc, #256]	; (600020e4 <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
60001fe4:	ldr	r1, [pc, #296]	; (60002110 <CrashReportClass::printTo(Print&) const+0x34c>)
60001fe6:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60001fe8:	ldr	r3, [r2, #8]
60001fea:	bic.w	r3, r3, #256	; 0x100
60001fee:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60001ff0:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
60001ff4:	ldr	r1, [pc, #284]	; (60002114 <CrashReportClass::printTo(Print&) const+0x350>)
60001ff6:	mov	r0, r4
60001ff8:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60001ffc:	ldr	r3, [pc, #280]	; (60002118 <CrashReportClass::printTo(Print&) const+0x354>)
60001ffe:	movs	r2, #7
60002000:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
60002002:	ldr	r2, [pc, #280]	; (6000211c <CrashReportClass::printTo(Print&) const+0x358>)
60002004:	ldr	r3, [r2, #56]	; 0x38
60002006:	orr.w	r3, r3, #64	; 0x40
6000200a:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
6000200c:	dsb	sy
	  while (1) asm ("wfi");
60002010:	wfi
60002012:	b.n	60002010 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60002014:	lsls	r3, r5, #30
60002016:	bpl.n	6000201c <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002018:	ldr	r1, [pc, #260]	; (60002120 <CrashReportClass::printTo(Print&) const+0x35c>)
6000201a:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
6000201c:	lsls	r7, r5, #28
6000201e:	bpl.n	60002024 <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002020:	ldr	r1, [pc, #256]	; (60002124 <CrashReportClass::printTo(Print&) const+0x360>)
60002022:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60002024:	lsls	r0, r5, #27
60002026:	bpl.n	6000202c <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002028:	ldr	r1, [pc, #252]	; (60002128 <CrashReportClass::printTo(Print&) const+0x364>)
6000202a:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
6000202c:	lsls	r1, r5, #26
6000202e:	bpl.w	60001e78 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60002032:	ldr	r1, [pc, #248]	; (6000212c <CrashReportClass::printTo(Print&) const+0x368>)
60002034:	b.n	60001e72 <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60002036:	ldr	r3, [pc, #248]	; (60002130 <CrashReportClass::printTo(Print&) const+0x36c>)
60002038:	cmp	r2, r3
6000203a:	bcc.w	60001eca <CrashReportClass::printTo(Print&) const+0x106>
6000203e:	adds	r3, #32
60002040:	cmp	r2, r3
60002042:	bcs.w	60001eca <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
60002046:	ldr	r1, [pc, #236]	; (60002134 <CrashReportClass::printTo(Print&) const+0x370>)
60002048:	b.n	60001ec4 <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
6000204a:	lsls	r7, r5, #22
6000204c:	bpl.n	60002052 <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
6000204e:	ldr	r1, [pc, #232]	; (60002138 <CrashReportClass::printTo(Print&) const+0x374>)
60002050:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60002052:	lsls	r0, r5, #21
60002054:	bpl.n	6000205a <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
60002056:	ldr	r1, [pc, #228]	; (6000213c <CrashReportClass::printTo(Print&) const+0x378>)
60002058:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
6000205a:	lsls	r1, r5, #20
6000205c:	bpl.n	60002062 <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
6000205e:	ldr	r1, [pc, #224]	; (60002140 <CrashReportClass::printTo(Print&) const+0x37c>)
60002060:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60002062:	lsls	r2, r5, #19
60002064:	bpl.n	6000206a <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
60002066:	ldr	r1, [pc, #220]	; (60002144 <CrashReportClass::printTo(Print&) const+0x380>)
60002068:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
6000206a:	lsls	r3, r5, #18
6000206c:	bpl.w	60001ede <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002070:	ldr	r1, [pc, #212]	; (60002148 <CrashReportClass::printTo(Print&) const+0x384>)
60002072:	b.n	60001ed8 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60002074:	lsls	r1, r5, #14
60002076:	bpl.n	6000207c <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
60002078:	ldr	r1, [pc, #208]	; (6000214c <CrashReportClass::printTo(Print&) const+0x388>)
6000207a:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
6000207c:	lsls	r2, r5, #13
6000207e:	bpl.n	60002084 <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
60002080:	ldr	r1, [pc, #204]	; (60002150 <CrashReportClass::printTo(Print&) const+0x38c>)
60002082:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60002084:	lsls	r3, r5, #12
60002086:	bpl.n	60002158 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
60002088:	ldr	r1, [pc, #200]	; (60002154 <CrashReportClass::printTo(Print&) const+0x390>)
6000208a:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
6000208c:	.word	0x2027ff00
60002090:	.word	0x20007fd3
60002094:	.word	0x20007fe0
60002098:	.word	0x20008509
6000209c:	.word	0x20008007
600020a0:	.word	0x2000802c
600020a4:	.word	0x20008035
600020a8:	.word	0x200080fb
600020ac:	.word	0x2000811d
600020b0:	.word	0x2000813c
600020b4:	.word	0x2000817b
600020b8:	.word	0x200081db
600020bc:	.word	0x20008314
600020c0:	.word	0x20008336
600020c4:	.word	0x20008412
600020c8:	.word	0x2000841b
600020cc:	.word	0x2000845e
600020d0:	.word	0x20008481
600020d4:	.word	0x20008487
600020d8:	.word	0x20008940
600020dc:	.word	0x000f4240
600020e0:	.word	0x200084a5
600020e4:	.word	0x400f8000
600020e8:	.word	0x0bad00f1
600020ec:	.word	0x20008602
600020f0:	.word	0x2000864b
600020f4:	.word	0x2000868c
600020f8:	.word	0x200086b4
600020fc:	.word	0x200086df
60002100:	.word	0x20008706
60002104:	.word	0x20008730
60002108:	.word	0x20008752
6000210c:	.word	0x20008774
60002110:	.word	0x2000879e
60002114:	.word	0x200087c0
60002118:	.word	0x400ac000
6000211c:	.word	0x400d4000
60002120:	.word	0x2000805e
60002124:	.word	0x20008080
60002128:	.word	0x200080aa
6000212c:	.word	0x200080d0
60002130:	.word	0x20028360
60002134:	.word	0x20008199
60002138:	.word	0x200081fc
6000213c:	.word	0x20008229
60002140:	.word	0x2000826e
60002144:	.word	0x200082ae
60002148:	.word	0x200082e2
6000214c:	.word	0x2000835a
60002150:	.word	0x2000838d
60002154:	.word	0x200083b6
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60002158:	lsls	r7, r5, #7
6000215a:	bpl.n	60002160 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
6000215c:	ldr	r1, [pc, #204]	; (6000222c <CrashReportClass::printTo(Print&) const+0x468>)
6000215e:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60002160:	lsls	r5, r5, #6
60002162:	bpl.w	60001f04 <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
60002166:	ldr	r1, [pc, #200]	; (60002230 <CrashReportClass::printTo(Print&) const+0x46c>)
60002168:	b.n	60001efe <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
6000216a:	lsls	r1, r5, #1
6000216c:	bpl.w	60001f2c <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
60002170:	ldr	r1, [pc, #192]	; (60002234 <CrashReportClass::printTo(Print&) const+0x470>)
60002172:	b.n	60001f26 <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
60002174:	ldr	r1, [pc, #192]	; (60002238 <CrashReportClass::printTo(Print&) const+0x474>)
60002176:	mov	r0, r4
60002178:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
6000217c:	ldr	r1, [pc, #188]	; (6000223c <CrashReportClass::printTo(Print&) const+0x478>)
6000217e:	mov	r0, r4
60002180:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
60002184:	ldr	r1, [pc, #184]	; (60002240 <CrashReportClass::printTo(Print&) const+0x47c>)
60002186:	mov	r0, r4
60002188:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
6000218c:	ldr	r1, [pc, #180]	; (60002244 <CrashReportClass::printTo(Print&) const+0x480>)
6000218e:	mov	r0, r4
60002190:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
60002194:	ldr	r1, [pc, #176]	; (60002248 <CrashReportClass::printTo(Print&) const+0x484>)
60002196:	mov	r0, r4
60002198:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
6000219c:	ldr	r1, [pc, #172]	; (6000224c <CrashReportClass::printTo(Print&) const+0x488>)
6000219e:	mov	r0, r4
600021a0:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
600021a4:	b.n	60001f70 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600021a6:	ldr	r7, [pc, #168]	; (60002250 <CrashReportClass::printTo(Print&) const+0x48c>)
600021a8:	ldr.w	r3, [r7, #192]	; 0xc0
600021ac:	cbz	r3, 60002220 <CrashReportClass::printTo(Print&) const+0x45c>
600021ae:	ldr.w	r6, [r7, #220]	; 0xdc
600021b2:	movs	r1, #28
600021b4:	ldr	r0, [pc, #156]	; (60002254 <CrashReportClass::printTo(Print&) const+0x490>)
600021b6:	bl	60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
600021ba:	cmp	r6, r0
600021bc:	bne.n	60002220 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
600021be:	ldr.w	r8, [pc, #160]	; 60002260 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
600021c2:	ldr.w	r9, [pc, #160]	; 60002264 <CrashReportClass::printTo(Print&) const+0x4a0>
600021c6:	ldr.w	sl, [pc, #140]	; 60002254 <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
600021ca:	movs	r3, #1
600021cc:	ldr.w	r2, [r7, #192]	; 0xc0
600021d0:	mov	r6, r5
600021d2:	lsls	r3, r5
600021d4:	adds	r5, #1
600021d6:	tst	r3, r2
600021d8:	beq.n	6000221c <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
600021da:	mov	r1, r8
600021dc:	mov	r0, r4
600021de:	bl	60002310 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
600021e2:	mov	r1, r5
600021e4:	add.w	r6, sl, r6, lsl #2
600021e8:	mov	r0, r4
600021ea:	bl	60002308 <___ZN5Print5printEl_veneer>
        p.print(" was ");
600021ee:	mov	r1, r9
600021f0:	mov	r0, r4
600021f2:	bl	60002310 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600021f6:	movs	r3, #0
600021f8:	movs	r2, #10
600021fa:	ldr	r1, [r6, #4]
600021fc:	mov	r0, r4
600021fe:	bl	600022d0 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
60002202:	ldr	r1, [pc, #84]	; (60002258 <CrashReportClass::printTo(Print&) const+0x494>)
60002204:	mov	r0, r4
60002206:	bl	60002310 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
6000220a:	ldr	r1, [r6, #4]
6000220c:	movs	r2, #16
6000220e:	mov	r0, r4
60002210:	bl	60002320 <___ZN5Print5printEmi_veneer>
        p.println(")");
60002214:	ldr	r1, [pc, #68]	; (6000225c <CrashReportClass::printTo(Print&) const+0x498>)
60002216:	mov	r0, r4
60002218:	bl	60002300 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
6000221c:	cmp	r5, #6
6000221e:	bne.n	600021ca <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002220:	bl	60001d50 <CrashReportClass::clear()>
}
60002224:	movs	r0, #1
60002226:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
6000222a:	nop
6000222c:	.word	0x200083cd
60002230:	.word	0x200083f6
60002234:	.word	0x20008442
60002238:	.word	0x200084aa
6000223c:	.word	0x200084c2
60002240:	.word	0x2000850b
60002244:	.word	0x20008555
60002248:	.word	0x2000857a
6000224c:	.word	0x200085c2
60002250:	.word	0x2027ff00
60002254:	.word	0x2027ffc0
60002258:	.word	0x20008812
6000225c:	.word	0x200085c0
60002260:	.word	0x20008803
60002264:	.word	0x2000847b

60002268 <CrashReportClass::operator bool()>:
{
60002268:	push	{r3, lr}
	if (isvalid(info)) return true;
6000226a:	bl	60001cfc <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
6000226e:	subs	r0, #0
60002270:	it	ne
60002272:	movne	r0, #1
60002274:	pop	{r3, pc}
60002276:	nop

60002278 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002278:	ldr	r3, [pc, #60]	; (600022b8 <analog_init+0x40>)
6000227a:	ldr	r2, [r3, #108]	; 0x6c
6000227c:	orr.w	r2, r2, #196608	; 0x30000
60002280:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002282:	ldr	r2, [r3, #108]	; 0x6c
60002284:	orr.w	r2, r2, #768	; 0x300
60002288:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000228a:	sub.w	r3, r3, #229376	; 0x38000
6000228e:	movw	r2, #1591	; 0x637
60002292:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002294:	movs	r2, #160	; 0xa0
60002296:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002298:	ldr	r2, [r3, #72]	; 0x48
6000229a:	lsls	r2, r2, #24
6000229c:	bmi.n	60002298 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000229e:	ldr	r2, [pc, #28]	; (600022bc <analog_init+0x44>)
600022a0:	movw	r3, #1591	; 0x637
600022a4:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600022a6:	movs	r3, #160	; 0xa0
600022a8:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
600022aa:	ldr	r3, [r2, #72]	; 0x48
600022ac:	ands.w	r3, r3, #128	; 0x80
600022b0:	bne.n	600022aa <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
600022b2:	ldr	r2, [pc, #12]	; (600022c0 <analog_init+0x48>)
600022b4:	strb	r3, [r2, #0]
}
600022b6:	bx	lr
600022b8:	.word	0x400fc000
600022bc:	.word	0x400c8000
600022c0:	.word	0x20028302

600022c4 <_init>:
600022c4:	push	{r3, r4, r5, r6, r7, lr}
600022c6:	nop
600022c8:	pop	{r3, r4, r5, r6, r7}
600022ca:	pop	{r3}
600022cc:	mov	lr, r3
600022ce:	bx	lr

600022d0 <___ZN5Print11printNumberEmhh_veneer>:
600022d0:	ldr.w	pc, [pc]	; 600022d4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600022d4:	.word	0x0000b5c3

600022d8 <____libc_init_array_veneer>:
600022d8:	ldr.w	pc, [pc]	; 600022dc <____libc_init_array_veneer+0x4>
600022dc:	.word	0x0000dc21

600022e0 <__pwm_init_veneer>:
600022e0:	ldr.w	pc, [pc]	; 600022e4 <__pwm_init_veneer+0x4>
600022e4:	.word	0x0000ae89

600022e8 <___ZN5Print7printlnEv_veneer>:
600022e8:	ldr.w	pc, [pc]	; 600022ec <___ZN5Print7printlnEv_veneer+0x4>
600022ec:	.word	0x0000b571

600022f0 <__set_arm_clock_veneer>:
600022f0:	ldr.w	pc, [pc]	; 600022f4 <__set_arm_clock_veneer+0x4>
600022f4:	.word	0x00009c71

600022f8 <__delay_veneer>:
600022f8:	ldr.w	pc, [pc]	; 600022fc <__delay_veneer+0x4>
600022fc:	.word	0x0000a9b9

60002300 <___ZN5Print7printlnEPKc_veneer>:
60002300:	ldr.w	pc, [pc]	; 60002304 <___ZN5Print7printlnEPKc_veneer+0x4>
60002304:	.word	0x00000d0d

60002308 <___ZN5Print5printEl_veneer>:
60002308:	ldr.w	pc, [pc]	; 6000230c <___ZN5Print5printEl_veneer+0x4>
6000230c:	.word	0x0000b55f

60002310 <___ZN5Print5printEPKc_veneer>:
60002310:	ldr.w	pc, [pc]	; 60002314 <___ZN5Print5printEPKc_veneer+0x4>
60002314:	.word	0x0000b405

60002318 <__memset_veneer>:
60002318:	ldr.w	pc, [pc]	; 6000231c <__memset_veneer+0x4>
6000231c:	.word	0x0000942d

60002320 <___ZN5Print5printEmi_veneer>:
60002320:	ldr.w	pc, [pc]	; 60002324 <___ZN5Print5printEmi_veneer+0x4>
60002324:	.word	0x0000b415

60002328 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002328:	ldr.w	pc, [pc]	; 6000232c <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
6000232c:	.word	0x0000b431

60002330 <__main_veneer>:
60002330:	ldr.w	pc, [pc]	; 60002334 <__main_veneer+0x4>
60002334:	.word	0x0000b47b

60002338 <___ZN5Print5printEh_veneer>:
60002338:	ldr.w	pc, [pc]	; 6000233c <___ZN5Print5printEh_veneer+0x4>
6000233c:	.word	0x0000b40d

60002340 <__sm_set_pool_veneer>:
60002340:	ldr.w	pc, [pc]	; 60002344 <__sm_set_pool_veneer+0x4>
60002344:	.word	0x0000ac6f

60002348 <___ZN5Print7printlnEmi_veneer>:
60002348:	ldr.w	pc, [pc]	; 6000234c <___ZN5Print7printlnEmi_veneer+0x4>
6000234c:	.word	0x0000b41d

60002350 <___ZN5Print10printFloatEdh_veneer>:
60002350:	ldr.w	pc, [pc]	; 60002354 <___ZN5Print10printFloatEdh_veneer+0x4>
60002354:	.word	0x0000b669

60002358 <__usb_init_serialnumber_veneer>:
60002358:	ldr.w	pc, [pc]	; 6000235c <__usb_init_serialnumber_veneer+0x4>
6000235c:	.word	0x0000b1c1

60002360 <__frame_dummy_init_array_entry>:
60002360:	E...]...!...-/..

Disassembly of section .text.progmem:

60002370 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60002370:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002374:	ldr	r3, [pc, #60]	; (600023b4 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002376:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
6000237a:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000237e:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60002382:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60002384:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60002388:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
6000238c:	ldr	r2, [r3, #112]	; 0x70
6000238e:	bic.w	r2, r2, #4096	; 0x1000
60002392:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60002394:	ldr	r2, [r3, #112]	; 0x70
60002396:	cmp	r2, #0
60002398:	bge.n	60002394 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
6000239a:	ldr.w	r2, [r3, #368]	; 0x170
6000239e:	bic.w	r2, r2, #8388608	; 0x800000
600023a2:	bic.w	r2, r2, #32768	; 0x8000
600023a6:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600023aa:	ldr	r2, [r3, #112]	; 0x70
600023ac:	bic.w	r2, r2, #65536	; 0x10000
600023b0:	str	r2, [r3, #112]	; 0x70
  }
600023b2:	bx	lr
600023b4:	.word	0x400d8000

600023b8 <usb_string_mtp>:
600023b8:	..M.T.P.

600023c0 <usb_string_product_name_default>:
600023c0:	 .T.e.e.n.s.y. .
600023d0:	M.T.P. .D.i.s.k.

600023e0 <usb_string_manufacturer_name_default>:
600023e0:	..T.e.e.n.s.y.d.
600023f0:	u.i.n.o.

600023f8 <string0>:
600023f8:	....

600023fc <usb_config_descriptor_12>:
600023fc:	..i.....2.......
6000240c:	...........$....
6000241c:	$....$...$......
6000242c:	................
6000243c:	.@......@.......
6000244c:	........@......@
6000245c:	...... ..

60002465 <usb_config_descriptor_480>:
60002465:	..i.....2.......
60002475:	...........$....
60002485:	$....$...$......
60002495:	................
600024a5:	................
600024b5:	................
600024c5:	...... ..

600024ce <qualifier_descriptor>:
600024ce:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200092c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200092c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20027a04
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60022c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	6780 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	5ae0 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	634c <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	4cfc <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	64d2 <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	4e82 <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	b268 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x2002832c
     154:	.word	0x2002832b
     158:	.word	0x20028140
     15c:	.word	0x2002815c

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	e0c0 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	b570 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	796c <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	796c <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	796c <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000444
     1dc:	.word	0x20000420

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	6bec <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	5e38 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	a9b8 <delay>
    usb_init();
     22a:	bl	16540 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4184 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20009300

00000248 <loop>:
{
     248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     24c:	ldr	r6, [pc, #416]	; (3f0 <loop+0x1a8>)
{
     24e:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     250:	ldr	r5, [pc, #416]	; (3f4 <loop+0x1ac>)
  loopCount++;
     252:	ldr	r3, [r6, #0]
     254:	ldr	r4, [pc, #416]	; (3f8 <loop+0x1b0>)
     256:	adds	r3, #1
     258:	str	r3, [r6, #0]
  nb = getDataCount();
     25a:	bl	258c <getDataCount()>
  if(nb>mxb) mxb=nb;
     25e:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     260:	ldr	r2, [pc, #408]	; (3fc <loop+0x1b4>)
  if(nb>mxb) mxb=nb;
     262:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     264:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     266:	it	cc
     268:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     26a:	tst.w	r3, #1
     26e:	bne.n	284 <loop+0x3c>
     270:	ldr	r3, [pc, #396]	; (400 <loop+0x1b8>)
     272:	ldr	r3, [r3, #0]
     274:	cmp	r3, #1
     276:	mov.w	r3, #4294967295
     27a:	it	ne
     27c:	movne	r3, #0
     27e:	strh	r3, [r4, #0]
     280:	movs	r3, #1
     282:	str	r3, [r2, #0]
  status=menu(status);
     284:	ldrh	r0, [r4, #0]
     286:	sxth	r0, r0
     288:	bl	24bc <menu(short)>
     28c:	strh	r0, [r4, #0]
    if(status<0)
     28e:	ldrh	r3, [r4, #0]
     290:	lsls	r3, r3, #16
     292:	bpl.w	39a <loop+0x152>
    { mtpd.loop();
     296:	ldr	r0, [pc, #364]	; (404 <loop+0x1bc>)
     298:	bl	4184 <MTPD::loop()>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     29c:	ldr	r3, [pc, #360]	; (408 <loop+0x1c0>)
  if((t1=millis())>(t0+1000))
     29e:	ldr	r7, [pc, #364]	; (40c <loop+0x1c4>)
     2a0:	ldr	r3, [r3, #0]
     2a2:	str	r3, [sp, #28]
     2a4:	ldr	r3, [r7, #0]
     2a6:	ldr	r2, [sp, #28]
     2a8:	add.w	r3, r3, #1000	; 0x3e8
     2ac:	cmp	r3, r2
     2ae:	bcs.n	394 <loop+0x14c>
    if(monitor)
     2b0:	ldr	r3, [pc, #348]	; (410 <loop+0x1c8>)
     2b2:	ldr.w	sl, [pc, #412]	; 450 <loop+0x208>
     2b6:	ldrsh.w	r3, [r3]
     2ba:	ldr.w	r9, [pc, #408]	; 454 <loop+0x20c>
     2be:	ldr.w	r8, [pc, #408]	; 458 <loop+0x210>
     2c2:	cmp	r3, #0
     2c4:	beq.n	37e <loop+0x136>
      rtc_get_datetime(&t);
     2c6:	add	r0, sp, #32
     2c8:	bl	3470 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     2cc:	ldrsb.w	r3, [sp, #36]	; 0x24
     2d0:	ldrsh.w	r2, [sp, #32]
     2d4:	str	r3, [sp, #16]
     2d6:	ldrsb.w	r3, [sp, #39]	; 0x27
     2da:	ldr	r1, [pc, #312]	; (414 <loop+0x1cc>)
     2dc:	str	r3, [sp, #12]
     2de:	ldrsb.w	r3, [sp, #38]	; 0x26
     2e2:	ldr	r0, [pc, #308]	; (418 <loop+0x1d0>)
     2e4:	str	r3, [sp, #8]
     2e6:	ldrsb.w	r3, [sp, #37]	; 0x25
     2ea:	str	r3, [sp, #4]
     2ec:	ldrsb.w	r3, [sp, #35]	; 0x23
     2f0:	str	r3, [sp, #0]
     2f2:	ldrsb.w	r3, [sp, #34]	; 0x22
     2f6:	bl	b5a8 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     2fa:	ldr	r1, [pc, #288]	; (41c <loop+0x1d4>)
     2fc:	ldr	r0, [pc, #280]	; (418 <loop+0x1d0>)
     2fe:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     302:	ldr	r1, [r6, #0]
     304:	ldr	r0, [pc, #272]	; (418 <loop+0x1d0>)
     306:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     30a:	ldr	r1, [pc, #276]	; (420 <loop+0x1d8>)
     30c:	ldr	r0, [pc, #264]	; (418 <loop+0x1d0>)
     30e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     312:	ldr.w	r1, [sl]
     316:	ldr	r0, [pc, #256]	; (418 <loop+0x1d0>)
     318:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     31c:	ldr	r1, [pc, #256]	; (420 <loop+0x1d8>)
     31e:	ldr	r0, [pc, #248]	; (418 <loop+0x1d0>)
     320:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     324:	ldr.w	r1, [r9]
     328:	ldr	r0, [pc, #236]	; (418 <loop+0x1d0>)
     32a:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     32e:	ldr	r1, [pc, #240]	; (420 <loop+0x1d8>)
     330:	ldr	r0, [pc, #228]	; (418 <loop+0x1d0>)
     332:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     336:	ldrh	r2, [r5, #0]
     338:	ldr	r1, [pc, #232]	; (424 <loop+0x1dc>)
     33a:	ldr	r0, [pc, #220]	; (418 <loop+0x1d0>)
     33c:	bl	b5a8 <Print::printf(char const*, ...)>
     340:	ldr	r1, [pc, #228]	; (428 <loop+0x1e0>)
     342:	ldr	r0, [pc, #212]	; (418 <loop+0x1d0>)
     344:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     348:	ldr.w	r1, [r8]
     34c:	ldr	r0, [pc, #200]	; (418 <loop+0x1d0>)
     34e:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     352:	ldr	r1, [pc, #216]	; (42c <loop+0x1e4>)
     354:	ldr	r0, [pc, #192]	; (418 <loop+0x1d0>)
     356:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     35a:	ldr	r3, [pc, #212]	; (430 <loop+0x1e8>)
     35c:	ldrh	r4, [r3, #0]
     35e:	sxth	r4, r4
     360:	cbnz	r4, 3b4 <loop+0x16c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     362:	ldr	r3, [pc, #208]	; (434 <loop+0x1ec>)
     364:	ldr	r1, [pc, #208]	; (438 <loop+0x1f0>)
     366:	ldr.w	fp, [pc, #176]	; 418 <loop+0x1d0>
     36a:	ldr.w	r2, [r3, r4, lsl #2]
     36e:	adds	r4, #1
     370:	mov	r0, fp
     372:	bl	b5a8 <Print::printf(char const*, ...)>
     376:	cmp	r4, #8
     378:	ldr	r1, [pc, #188]	; (438 <loop+0x1f0>)
     37a:	ldr	r3, [pc, #184]	; (434 <loop+0x1ec>)
     37c:	bne.n	36a <loop+0x122>
    loopCount=0;
     37e:	movs	r3, #0
     380:	str	r3, [r6, #0]
    procCount=0;
     382:	str.w	r3, [sl]
    procMiss=0;
     386:	str.w	r3, [r9]
    mxb=0;
     38a:	strh	r3, [r5, #0]
    disk_count=0;
     38c:	str.w	r3, [r8]
    t0=t1;
     390:	ldr	r3, [sp, #28]
     392:	str	r3, [r7, #0]
}
     394:	add	sp, #44	; 0x2c
     396:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     39a:	ldr	r7, [pc, #160]	; (43c <loop+0x1f4>)
     39c:	mov.w	r8, #8
     3a0:	str.w	r8, [r7, #132]	; 0x84
      status=saveData(status);  
     3a4:	ldrh	r0, [r4, #0]
     3a6:	sxth	r0, r0
     3a8:	bl	2e28 <saveData(short)>
     3ac:	strh	r0, [r4, #0]
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     3ae:	str.w	r8, [r7, #136]	; 0x88
}
     3b2:	b.n	29c <loop+0x54>
     3b4:	ldr.w	fp, [pc, #148]	; 44c <loop+0x204>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3b8:	movs	r4, #0
     3ba:	ldr	r1, [pc, #132]	; (440 <loop+0x1f8>)
     3bc:	ldr	r3, [pc, #88]	; (418 <loop+0x1d0>)
     3be:	adds	r4, #1
     3c0:	mov	r0, r3
     3c2:	ldr.w	r2, [fp], #4
     3c6:	bl	b5a8 <Print::printf(char const*, ...)>
     3ca:	cmp	r4, #24
     3cc:	ldr	r3, [pc, #72]	; (418 <loop+0x1d0>)
     3ce:	ldr	r1, [pc, #112]	; (440 <loop+0x1f8>)
     3d0:	bne.n	3be <loop+0x176>
        Serial.printf("%2d",max_stat);
     3d2:	ldr	r4, [pc, #112]	; (444 <loop+0x1fc>)
     3d4:	mov	r0, r3
     3d6:	ldr	r1, [pc, #112]	; (448 <loop+0x200>)
     3d8:	ldr	r2, [r4, #0]
     3da:	bl	b5a8 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     3de:	movs	r2, #96	; 0x60
     3e0:	movs	r1, #0
     3e2:	ldr	r0, [pc, #104]	; (44c <loop+0x204>)
     3e4:	bl	942c <memset>
        max_stat=0;        
     3e8:	movs	r3, #0
     3ea:	str	r3, [r4, #0]
     3ec:	b.n	37e <loop+0x136>
     3ee:	nop
     3f0:	.word	0x20027444
     3f4:	.word	0x20028188
     3f8:	.word	0x2002818a
     3fc:	.word	0x2000b9cc
     400:	.word	0x20028150
     404:	.word	0x20009300
     408:	.word	0x20028140
     40c:	.word	0x20027440
     410:	.word	0x20028192
     414:	.word	0x20007f1e
     418:	.word	0x20008944
     41c:	.word	0x20007f3f
     420:	.word	0x20007f48
     424:	.word	0x20007f43
     428:	.word	0x20007f47
     42c:	.word	0x20007f4a
     430:	.word	0x20028194
     434:	.word	0x200279d8
     438:	.word	0x20007f4f
     43c:	.word	0x42004000
     440:	.word	0x20007f54
     444:	.word	0x200279f8
     448:	.word	0x20007f59
     44c:	.word	0x20027a24
     450:	.word	0x20027a1c
     454:	.word	0x20027a20
     458:	.word	0x20027964

0000045c <setup1()>:
{ while(!Serial) {}
     45c:	push	{r4, lr}
     45e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     462:	cmp	r0, #0
     464:	beq.n	45e <setup1()+0x2>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     466:	ldr	r4, [pc, #44]	; (494 <setup1()+0x38>)
  Serial.println("Setup1");
     468:	ldr	r1, [pc, #44]	; (498 <setup1()+0x3c>)
     46a:	ldr	r0, [pc, #48]	; (49c <setup1()+0x40>)
     46c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     470:	ldr	r3, [r4, #0]
     472:	cbz	r3, 48c <setup1()+0x30>
  i2s_setup();
     474:	bl	ad0 <i2s_setup()>
  dma_setup();
     478:	bl	b54 <dma_setup()>
  adc_init();
     47c:	bl	32a0 <adc_init()>
  Serial.println("Setup1 done");
     480:	ldr	r1, [pc, #28]	; (4a0 <setup1()+0x44>)
     482:	ldr	r0, [pc, #24]	; (49c <setup1()+0x40>)
}
     484:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     488:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     48c:	movs	r0, #1
     48e:	bl	a9b8 <delay>
     492:	b.n	470 <setup1()+0x14>
     494:	.word	0x20027f80
     498:	.word	0x20007de7
     49c:	.word	0x20008944
     4a0:	.word	0x20007dee

000004a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4a4:	push	{r4, r5, r6, lr}
     4a6:	mov	r5, r0
     4a8:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4ac:	cbnz	r0, 4d2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ae:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4b0:	ldr.w	r0, [r5, #1152]	; 0x480
     4b4:	cbz	r0, 508 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4b6:	bl	7050 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4ba:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4bc:	cbz	r6, 4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4be:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4c2:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     4c4:	ldr	r3, [r0, #0]
     4c6:	movs	r1, #0
     4c8:	ldr	r3, [r3, #68]	; 0x44
     4ca:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     4cc:	cbz	r0, 4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     4ce:	mov	r0, r4
     4d0:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4d2:	ldr	r3, [r0, #0]
     4d4:	ldr	r3, [r3, #60]	; 0x3c
     4d6:	blx	r3
     4d8:	cmp	r0, #0
     4da:	beq.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4dc:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4e0:	cbnz	r0, 4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     4e2:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     4e6:	cbnz	r0, 4f8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     4e8:	movs	r4, #0
     4ea:	b.n	4ce <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     4ec:	ldr	r3, [r0, #0]
     4ee:	ldr	r3, [r3, #64]	; 0x40
     4f0:	blx	r3
     4f2:	cmp	r0, #0
     4f4:	bne.n	4ae <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     4f6:	b.n	4e2 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     4f8:	ldr	r3, [r0, #0]
     4fa:	movs	r1, #1
     4fc:	ldr	r3, [r3, #68]	; 0x44
     4fe:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     500:	mov	r6, r0
     502:	cmp	r0, #0
     504:	bne.n	4b0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     506:	b.n	4e8 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     508:	ldr.w	r0, [r5, #1156]	; 0x484
     50c:	cmp	r0, #0
     50e:	beq.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     510:	bl	5692 <ExFatPartition::freeClusterCount()>
     514:	b.n	4ba <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000518 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     518:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     51c:	ldr	r4, [pc, #276]	; (634 <storage_configure()+0x11c>)
     51e:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     520:	movs	r1, #0
     522:	ldr	r6, [pc, #276]	; (638 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     524:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     528:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     52c:	strb.w	r1, [r4, #1224]	; 0x4c8
     530:	mov	r0, r5
     532:	bl	8d88 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     536:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     538:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     53c:	bl	8484 <SdioCard::errorCode() const>
     540:	cmp	r0, #0
     542:	bne.n	5e6 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     544:	movs	r3, #1
     546:	ldr.w	r1, [r4, #1164]	; 0x48c
     54a:	mov	r0, r4
     54c:	mov	r2, r3
     54e:	bl	7acc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     552:	cmp	r0, #0
     554:	beq.n	5e6 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     556:	ldr	r3, [pc, #228]	; (63c <storage_configure()+0x124>)
     558:	ldr	r2, [r3, #4]
     55a:	cmp	r2, #19
     55c:	ble.n	602 <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     55e:	ldr.w	r3, [r4, #1152]	; 0x480
     562:	cmp	r3, #0
     564:	beq.n	616 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     566:	ldr	r5, [r3, #28]
     568:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     56a:	ldr	r0, [pc, #200]	; (634 <storage_configure()+0x11c>)
     56c:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     570:	ldr.w	r3, [r4, #1152]	; 0x480
     574:	mov	r7, r0
     576:	cmp	r3, #0
     578:	beq.n	624 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     57a:	ldrb	r3, [r3, #6]
     57c:	mov.w	r4, #512	; 0x200
     580:	lsls	r4, r3
     582:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     584:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     586:	mov.w	r8, #10
     58a:	movs	r6, #0
     58c:	movs	r2, #0
     58e:	str	r3, [sp, #0]
     590:	movs	r3, #254	; 0xfe
     592:	ldr	r1, [pc, #172]	; (640 <storage_configure()+0x128>)
     594:	ldr	r0, [pc, #172]	; (644 <storage_configure()+0x12c>)
     596:	bl	b5a8 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     59a:	ldr	r1, [pc, #172]	; (648 <storage_configure()+0x130>)
     59c:	ldr	r0, [pc, #164]	; (644 <storage_configure()+0x12c>)
     59e:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5a2:	mov	r2, r5
     5a4:	mov	r3, r6
     5a6:	ldr	r0, [pc, #156]	; (644 <storage_configure()+0x12c>)
     5a8:	strd	r8, r6, [sp]
     5ac:	bl	b5d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5b0:	ldr	r1, [pc, #152]	; (64c <storage_configure()+0x134>)
     5b2:	ldr	r0, [pc, #144]	; (644 <storage_configure()+0x12c>)
     5b4:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5b8:	mov	r2, r7
     5ba:	mov	r3, r6
     5bc:	ldr	r0, [pc, #132]	; (644 <storage_configure()+0x12c>)
     5be:	strd	r8, r6, [sp]
     5c2:	bl	b5d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5c6:	ldr	r1, [pc, #136]	; (650 <storage_configure()+0x138>)
     5c8:	ldr	r0, [pc, #120]	; (644 <storage_configure()+0x12c>)
     5ca:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5ce:	lsr.w	r1, r4, r8
     5d2:	ldr	r0, [pc, #112]	; (644 <storage_configure()+0x12c>)
     5d4:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     5d8:	ldr	r1, [pc, #120]	; (654 <storage_configure()+0x13c>)
     5da:	ldr	r0, [pc, #104]	; (644 <storage_configure()+0x12c>)
        }
      }
  }
     5dc:	add	sp, #8
     5de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     5e2:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5e6:	ldr	r3, [r6, #0]
     5e8:	movs	r2, #0
     5ea:	ldr	r1, [pc, #108]	; (658 <storage_configure()+0x140>)
     5ec:	str	r3, [sp, #0]
     5ee:	movs	r3, #254	; 0xfe
     5f0:	ldr	r0, [pc, #80]	; (644 <storage_configure()+0x12c>)
     5f2:	bl	b5a8 <Print::printf(char const*, ...)>
     5f6:	ldr	r0, [pc, #76]	; (644 <storage_configure()+0x12c>)
  }
     5f8:	add	sp, #8
     5fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     5fe:	b.w	b570 <Print::println()>
          sd_name[fsCount] = name;
     602:	add.w	r1, r3, r2, lsl #2
     606:	ldr	r0, [r6, #0]
     608:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     60a:	adds	r1, r2, #1
     60c:	str	r1, [r3, #4]
     60e:	add.w	r3, r3, r2, lsl #2
     612:	str	r4, [r3, #88]	; 0x58
     614:	b.n	55e <storage_configure()+0x46>
     616:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     61a:	cmp	r5, #0
     61c:	beq.n	56a <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     61e:	ldr.w	r5, [r5, #1072]	; 0x430
     622:	b.n	56a <storage_configure()+0x52>
     624:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     628:	cmp	r4, #0
     62a:	beq.n	584 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     62c:	ldr.w	r4, [r4, #1084]	; 0x43c
     630:	b.n	584 <storage_configure()+0x6c>
     632:	nop
     634:	.word	0x20027ab0
     638:	.word	0x20008efc
     63c:	.word	0x20027f84
     640:	.word	0x20007beb
     644:	.word	0x20008944
     648:	.word	0x20007c02
     64c:	.word	0x20007c15
     650:	.word	0x20007c26
     654:	.word	0x20007c35
     658:	.word	0x20007bc0

0000065c <_GLOBAL__sub_I_storage>:
  }
     65c:	push	{r3, r4, r5, lr}
        fsCount = 0;
     65e:	ldr	r5, [pc, #192]	; (720 <_GLOBAL__sub_I_storage+0xc4>)
     660:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     662:	ldr	r3, [pc, #192]	; (724 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     664:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     668:	ldr	r1, [pc, #188]	; (728 <_GLOBAL__sub_I_storage+0xcc>)
     66a:	mov	r0, r5
     66c:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     66e:	ldr	r3, [pc, #188]	; (72c <_GLOBAL__sub_I_storage+0xd0>)
     670:	str.w	r2, [r5, #176]	; 0xb0
     674:	str.w	r3, [r5, #168]	; 0xa8
     678:	str.w	r3, [r5, #248]	; 0xf8
     67c:	str.w	r3, [r5, #328]	; 0x148
     680:	mvn.w	r3, #1
        fsCount = 0;
     684:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     686:	str.w	r4, [r5, #172]	; 0xac
     68a:	strb.w	r4, [r5, #180]	; 0xb4
     68e:	strb.w	r4, [r5, #260]	; 0x104
     692:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     696:	str.w	r4, [r5, #416]	; 0x1a0
     69a:	strh.w	r4, [r5, #428]	; 0x1ac
     69e:	strd	r4, r2, [r5, #252]	; 0xfc
     6a2:	strd	r4, r2, [r5, #332]	; 0x14c
     6a6:	ldr	r2, [pc, #136]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6a8:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6ac:	strd	r4, r4, [r5, #240]	; 0xf0
     6b0:	strd	r4, r4, [r5, #320]	; 0x140
     6b4:	strd	r4, r4, [r5, #400]	; 0x190
     6b8:	strd	r4, r4, [r5, #408]	; 0x198
     6bc:	bl	b798 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6c0:	ldr	r3, [pc, #112]	; (734 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6c2:	ldr	r1, [pc, #116]	; (738 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     6c4:	mov	r0, r4
     6c6:	str	r5, [r3, #0]
     6c8:	add.w	r3, r3, #8192	; 0x2000
     6cc:	ldr	r2, [pc, #96]	; (730 <_GLOBAL__sub_I_storage+0xd4>)
     6ce:	str.w	r4, [r3, #1056]	; 0x420
     6d2:	strb.w	r4, [r3, #1060]	; 0x424
     6d6:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     6da:	ldr	r3, [pc, #96]	; (73c <_GLOBAL__sub_I_storage+0xe0>)
     6dc:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     6e0:	ldr	r1, [pc, #92]	; (740 <_GLOBAL__sub_I_storage+0xe4>)
     6e2:	str.w	r4, [r3, #1152]	; 0x480
     6e6:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     6ea:	movs	r1, #7
     6ec:	str.w	r4, [r3, #1156]	; 0x484
     6f0:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     6f4:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     6f6:	str.w	r4, [r3, #1164]	; 0x48c
     6fa:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     6fe:	ldr	r1, [pc, #68]	; (744 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     700:	strh.w	r4, [r3, #1176]	; 0x498
     704:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     708:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     70c:	strb.w	r4, [r3, #1208]	; 0x4b8
     710:	strb.w	r4, [r3, #1224]	; 0x4c8
     714:	ldr	r1, [pc, #48]	; (748 <_GLOBAL__sub_I_storage+0xec>)
  }
     716:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     71a:	b.w	b798 <__aeabi_atexit>
     71e:	nop
     720:	.word	0x20027f84
     724:	.word	0x20000444
     728:	.word	0x000001a5
     72c:	.word	0x20000548
     730:	.word	0x20008960
     734:	.word	0x20009300
     738:	.word	0x2000056c
     73c:	.word	0x20027ab0
     740:	.word	0x003d0900
     744:	.word	0x200004b0
     748:	.word	0x0000006d

0000074c <setup>:
{
     74c:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     74e:	ldr	r5, [pc, #292]	; (874 <setup+0x128>)
     750:	sub	sp, #28
    set_arm_clock(48'000'000);
     752:	ldr	r0, [pc, #292]	; (878 <setup+0x12c>)
				if (elapsed > 750) break;
     754:	movw	r7, #750	; 0x2ee
     758:	bl	9c70 <set_arm_clock>
			if (usb_configuration) {
     75c:	ldr	r6, [pc, #284]	; (87c <setup+0x130>)
		uint32_t millis_begin = systick_millis_count;
     75e:	ldr	r4, [r5, #0]
		while (!(*this)) {
     760:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     764:	cbz	r0, 78c <setup+0x40>
  uint16_t *params=loadParameters();
     766:	bl	20c4 <loadParameters()>
  if(params[0]==1)
     76a:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     76c:	mov	r4, r0
  if(params[0]==1)
     76e:	cmp	r3, #1
     770:	beq.n	7a4 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     772:	movw	r6, #9999	; 0x270f
	return systick_millis_count;
     776:	ldr	r3, [r5, #0]
     778:	cmp	r3, r6
     77a:	bhi.n	7b8 <setup+0x6c>
     77c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     780:	cmp	r0, #0
     782:	beq.n	776 <setup+0x2a>
     784:	ldr	r3, [pc, #248]	; (880 <setup+0x134>)
     786:	movs	r2, #1
     788:	str	r2, [r3, #0]
     78a:	b.n	7b8 <setup+0x6c>
			uint32_t elapsed = systick_millis_count - millis_begin;
     78c:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     78e:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     790:	subs	r3, r3, r4
			if (usb_configuration) {
     792:	cbz	r2, 7a0 <setup+0x54>
				if (elapsed > 2000) break;
     794:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     798:	bhi.n	766 <setup+0x1a>
			yield();
     79a:	bl	b268 <yield>
     79e:	b.n	760 <setup+0x14>
				if (elapsed > 750) break;
     7a0:	cmp	r3, r7
     7a2:	b.n	798 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7a4:	ldr	r3, [pc, #220]	; (884 <setup+0x138>)
     7a6:	ldr	r2, [pc, #224]	; (888 <setup+0x13c>)
     7a8:	ldr	r3, [r3, #0]
     7aa:	ldr	r2, [r2, #0]
     7ac:	cmp	r3, r2
     7ae:	ldr	r2, [pc, #208]	; (880 <setup+0x134>)
     7b0:	ite	hi
     7b2:	movhi	r3, #0
     7b4:	movls	r3, #1
     7b6:	str	r3, [r2, #0]
  while(millis()<10'000) if(Serial) { break;}
     7b8:	movw	r6, #9999	; 0x270f
     7bc:	ldr	r3, [r5, #0]
     7be:	cmp	r3, r6
     7c0:	bhi.n	7ca <setup+0x7e>
     7c2:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7c6:	cmp	r0, #0
     7c8:	beq.n	7bc <setup+0x70>
  Serial.println(version);
     7ca:	ldr	r1, [pc, #192]	; (88c <setup+0x140>)
     7cc:	ldr	r0, [pc, #192]	; (890 <setup+0x144>)
     7ce:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     7d2:	ldr	r1, [pc, #192]	; (894 <setup+0x148>)
     7d4:	ldr	r0, [pc, #184]	; (890 <setup+0x144>)
     7d6:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     7da:	ldrh	r1, [r4, #0]
     7dc:	ldr	r0, [pc, #176]	; (890 <setup+0x144>)
     7de:	bl	b55e <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     7e2:	ldr	r0, [pc, #172]	; (890 <setup+0x144>)
     7e4:	bl	b570 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     7e8:	ldr	r0, [pc, #172]	; (898 <setup+0x14c>)
     7ea:	bl	16528 <___ZN16CrashReportClasscvbEv_veneer>
     7ee:	cbz	r0, 7f8 <setup+0xac>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     7f0:	ldr	r1, [pc, #156]	; (890 <setup+0x144>)
     7f2:	ldr	r0, [pc, #164]	; (898 <setup+0x14c>)
     7f4:	bl	16538 <___ZNK16CrashReportClass7printToER5Print_veneer>
  storage_configure();
     7f8:	bl	518 <storage_configure()>
  rtc_setup();
     7fc:	movs	r1, #19
     7fe:	movs	r0, #18
     800:	bl	346c <rtc_setup(unsigned char, unsigned char)>
  Serial.println("rtc_setup() done");
     804:	ldr	r0, [pc, #136]	; (890 <setup+0x144>)
     806:	ldr	r1, [pc, #148]	; (89c <setup+0x150>)
     808:	bl	190 <Print::println(char const*) [clone .isra.0]>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     80c:	add	r0, sp, #16
     80e:	bl	3470 <rtc_get_datetime(datetime_t*)>
     812:	cbnz	r0, 81c <setup+0xd0>
     814:	ldr	r1, [pc, #136]	; (8a0 <setup+0x154>)
     816:	ldr	r0, [pc, #120]	; (890 <setup+0x144>)
     818:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     81c:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     820:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     822:	ldrsh.w	r2, [sp, #16]
     826:	str	r3, [sp, #12]
     828:	ldrsb.w	r3, [sp, #22]
     82c:	ldr	r1, [pc, #116]	; (8a4 <setup+0x158>)
     82e:	str	r3, [sp, #8]
     830:	ldrsb.w	r3, [sp, #21]
     834:	ldr	r0, [pc, #88]	; (890 <setup+0x144>)
     836:	str	r3, [sp, #4]
     838:	ldrsb.w	r3, [sp, #19]
     83c:	str	r3, [sp, #0]
     83e:	ldrsb.w	r3, [sp, #18]
     842:	bl	b5a8 <Print::printf(char const*, ...)>
                           t.year,t.month,t.day,t.hour,t.min,t.sec); Serial.println();
     846:	ldr	r0, [pc, #72]	; (890 <setup+0x144>)
     848:	bl	b570 <Print::println()>
  Serial.println("filing_init");
     84c:	ldr	r1, [pc, #88]	; (8a8 <setup+0x15c>)
     84e:	ldr	r0, [pc, #64]	; (890 <setup+0x144>)
     850:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     854:	bl	2f5c <filing_init()>
  Serial.println("Setup done");
     858:	ldr	r1, [pc, #80]	; (8ac <setup+0x160>)
     85a:	ldr	r0, [pc, #52]	; (890 <setup+0x144>)
     85c:	bl	190 <Print::println(char const*) [clone .isra.0]>
  setup_ready=1;
     860:	ldr	r3, [pc, #76]	; (8b0 <setup+0x164>)
     862:	str	r4, [r3, #0]
    setup1();
     864:	bl	45c <setup1()>
    pinMode(13,OUTPUT);
     868:	mov	r1, r4
     86a:	movs	r0, #13
     86c:	bl	ad7c <pinMode>
}
     870:	add	sp, #28
     872:	pop	{r4, r5, r6, r7, pc}
     874:	.word	0x20028140
     878:	.word	0x02dc6c00
     87c:	.word	0x2002832c
     880:	.word	0x20028150
     884:	.word	0x20008f14
     888:	.word	0x20008f10
     88c:	.word	0x20007e26
     890:	.word	0x20008944
     894:	.word	0x20007f5d
     898:	.word	0x20008938
     89c:	.word	0x20007f6a
     8a0:	.word	0x20007f7b
     8a4:	.word	0x20007f90
     8a8:	.word	0x20007fb7
     8ac:	.word	0x20007fc3
     8b0:	.word	0x20027f80

000008b4 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8b4:	push	{r4, lr}
     8b6:	mov	r4, r0
		release();
     8b8:	bl	b3d4 <DMAChannel::release()>
	}
     8bc:	mov	r0, r4
     8be:	pop	{r4, pc}

000008c0 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8c0:	push	{r3, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8c2:	ldr	r3, [pc, #140]	; (950 <acq_isr()+0x90>)
     8c4:	ldr	r2, [r3, #0]
     8c6:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8c8:	ldrb	r2, [r3, #4]
     8ca:	ldr	r3, [pc, #136]	; (954 <acq_isr()+0x94>)
     8cc:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8ce:	ldr	r2, [pc, #136]	; (958 <acq_isr()+0x98>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8d0:	sub.w	r3, r2, #1024	; 0x400
     8d4:	cmp	r1, r2
     8d6:	it	cc
     8d8:	movcc	r3, r2
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     8da:	mov	r1, r3
	asm("dsb");
     8dc:	dsb	sy
     8e0:	add.w	r0, r3, #32
	uint32_t end_addr = (uint32_t)addr + size;
     8e4:	add.w	r2, r3, #1024	; 0x400
     8e8:	cmp	r2, r0
     8ea:	ite	cc
     8ec:	movcc	r2, #1
     8ee:	movcs	r2, #32
		SCB_CACHE_DCIMVAC = location;
     8f0:	mov.w	r0, #3758153728	; 0xe000e000
     8f4:	add.w	r2, r3, r2, lsl #5
     8f8:	str.w	r1, [r0, #3932]	; 0xf5c
		location += 32;
     8fc:	adds	r1, #32
	} while (location < end_addr);
     8fe:	cmp	r1, r2
     900:	bne.n	8f8 <acq_isr()+0x38>
	asm("dsb");
     902:	dsb	sy
	asm("isb");
     906:	isb	sy
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     90a:	ldr	r1, [pc, #80]	; (95c <acq_isr()+0x9c>)
     90c:	ldr	r2, [r1, #0]
     90e:	adds	r2, #1
     910:	str	r2, [r1, #0]
    for(int ii=0; ii<NBUF_ACQ; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>SHIFT;   
     912:	movs	r2, #0
     914:	ldr	r1, [pc, #72]	; (960 <acq_isr()+0xa0>)
     916:	ldr.w	r0, [r3, r2, lsl #3]
     91a:	adds	r2, #1
     91c:	cmp	r2, #128	; 0x80
     91e:	str.w	r0, [r1], #4
     922:	bne.n	916 <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     924:	ldr	r2, [pc, #60]	; (964 <acq_isr()+0xa4>)
     926:	ldrh	r3, [r2, #0]
     928:	sxth	r3, r3
     92a:	cbnz	r3, 93e <acq_isr()+0x7e>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     92c:	ldr	r0, [pc, #48]	; (960 <acq_isr()+0xa0>)
     92e:	bl	25b4 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     932:	cbnz	r0, 93c <acq_isr()+0x7c>
     934:	ldr	r2, [pc, #48]	; (968 <acq_isr()+0xa8>)
     936:	ldr	r3, [r2, #0]
     938:	adds	r3, #1
     93a:	str	r3, [r2, #0]
  }
     93c:	pop	{r3, pc}
  else if(proc==1)
     93e:	ldrh	r3, [r2, #0]
     940:	sxth	r3, r3
     942:	cmp	r3, #1
     944:	bne.n	93c <acq_isr()+0x7c>
   if(!compress((void *)acqBuffer)) procMiss++;
     946:	ldr	r0, [pc, #24]	; (960 <acq_isr()+0xa0>)
     948:	bl	3010 <compress(void*)>
     94c:	b.n	932 <acq_isr()+0x72>
     94e:	nop
     950:	.word	0x20026bdc
     954:	.word	0x400e8000
     958:	.word	0x20200400
     95c:	.word	0x20027a1c
     960:	.word	0x20027764
     964:	.word	0x20028194
     968:	.word	0x20027a20
     96c:	.word	0x00000000

00000970 <setAudioFrequency(int)>:
  {
     970:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     974:	ldr.w	r9, [pc, #332]	; ac4 <setAudioFrequency(int)+0x154>
     978:	movs	r2, #5
     97a:	mov	r5, r0
     97c:	ldr	r1, [pc, #312]	; (ab8 <setAudioFrequency(int)+0x148>)
     97e:	ldr.w	r3, [r9]
     982:	mov	r0, r9
     984:	ldr	r3, [r3, #4]
     986:	vpush	{d8}
     98a:	sub	sp, #12
     98c:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     98e:	movs	r1, #128	; 0x80
     990:	mov	r0, r9
     992:	bl	b55e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     996:	mov	r0, r9
     998:	bl	b570 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     99c:	movs	r3, #26
     99e:	lsls	r1, r5, #7
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a0:	ldr	r0, [pc, #280]	; (abc <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9a2:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a4:	mov	r2, r1
        n1=0;
     9a6:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9a8:	mul.w	ip, r0, r3
        {   n1++; 
     9ac:	mov	r6, r4
     9ae:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9b0:	sdiv	r8, ip, r2
     9b4:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9b8:	cmp	r7, #64	; 0x40
     9ba:	ble.n	9c8 <setAudioFrequency(int)+0x58>
     9bc:	cmp	r4, #9
     9be:	add	r2, r1
     9c0:	bne.n	9ac <setAudioFrequency(int)+0x3c>
    } while ((n2>64 && n0<54));
     9c2:	cmp	r3, #54	; 0x36
     9c4:	bne.n	9a2 <setAudioFrequency(int)+0x32>
     9c6:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9c8:	mov	r2, r5
     9ca:	ldr	r1, [pc, #244]	; (ac0 <setAudioFrequency(int)+0x150>)
     9cc:	ldr	r0, [pc, #244]	; (ac4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     9ce:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9d2:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9d4:	strd	r4, r7, [sp]
     9d8:	bl	b5a8 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9dc:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     9e0:	ldr.w	r3, [r9]
     9e4:	movs	r2, #3
     9e6:	vcvt.f64.s32	d7, s15
     9ea:	ldr	r1, [pc, #220]	; (ac8 <setAudioFrequency(int)+0x158>)
     9ec:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     9ee:	and.w	r6, r6, #448	; 0x1c0
     9f2:	ldr	r0, [pc, #208]	; (ac4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     9f4:	vldr	d6, [pc, #168]	; aa0 <setAudioFrequency(int)+0x130>
     9f8:	vmul.f64	d7, d7, d6
     9fc:	vmov	s13, r4
     a00:	vcvt.f64.s32	d6, s13
     a04:	vmul.f64	d7, d7, d6
     a08:	vmov	s13, r7
     a0c:	vcvt.f64.s32	d6, s13
     a10:	vmul.f64	d7, d7, d6
     a14:	vldr	d6, [pc, #144]	; aa8 <setAudioFrequency(int)+0x138>
     a18:	vdiv.f64	d8, d7, d6
     a1c:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a1e:	movs	r1, #2
     a20:	ldr	r0, [pc, #160]	; (ac4 <setAudioFrequency(int)+0x154>)
     a22:	vmov.f64	d0, d8
     a26:	bl	b668 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a2a:	ldr	r0, [pc, #152]	; (ac4 <setAudioFrequency(int)+0x154>)
     a2c:	bl	b570 <Print::println()>
    int c0 = C;
     a30:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a34:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a38:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a3c:	mul.w	r3, r2, r0
     a40:	vmov	s14, r3
     a44:	vldr	d6, [pc, #104]	; ab0 <setAudioFrequency(int)+0x140>
     a48:	vcvt.f64.s32	d7, s14
     a4c:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a50:	vcvt.s32.f64	s15, d7
     a54:	vmov	r1, s15
     a58:	bl	16530 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a5c:	ldr	r2, [pc, #108]	; (acc <setAudioFrequency(int)+0x15c>)
     a5e:	ldr	r3, [r2, #28]
     a60:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a64:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a68:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a6a:	ldr	r3, [r2, #40]	; 0x28
     a6c:	bic.w	r3, r3, #510	; 0x1fe
     a70:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a74:	orr.w	r3, r3, r8
     a78:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a7a:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a7c:	sub.w	r2, r2, #327680	; 0x50000
     a80:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     a82:	bic.w	r3, r3, #524288	; 0x80000
     a86:	bic.w	r3, r3, #7
     a8a:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     a8e:	str	r3, [r2, #4]
  }
     a90:	add	sp, #12
     a92:	vpop	{d8}
     a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     a9a:	nop
     a9c:	nop.w
     aa0:	.word	0x00000000
     aa4:	.word	0x40600000
     aa8:	.word	0x00000000
     aac:	.word	0x4176e360
     ab0:	.word	0x00000000
     ab4:	.word	0x40c38800
     ab8:	.word	0x20007b99
     abc:	.word	0x016e3600
     ac0:	.word	0x20007b9f
     ac4:	.word	0x20008944
     ac8:	.word	0x20007bbc
     acc:	.word	0x400fc000

00000ad0 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ad0:	ldr	r2, [pc, #100]	; (b38 <i2s_setup()+0x68>)
     ad2:	ldr	r3, [r2, #124]	; 0x7c
  {
     ad4:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     ad6:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ada:	ldr	r4, [pc, #96]	; (b3c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     adc:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     ade:	ldr.w	r3, [r4, #136]	; 0x88
     ae2:	cmp	r3, #0
     ae4:	blt.n	b36 <i2s_setup()+0x66>
    int fs = fsamp;
     ae6:	ldr	r3, [pc, #88]	; (b40 <i2s_setup()+0x70>)
     ae8:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     aea:	bl	970 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     aee:	ldr	r3, [pc, #84]	; (b44 <i2s_setup()+0x74>)
     af0:	movs	r2, #3
     af2:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     af6:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     afa:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     afe:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b02:	movs	r2, #2
     b04:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b08:	movs	r3, #0
     b0a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b0e:	movs	r3, #4
     b10:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b14:	mov.w	r3, #83886080	; 0x5000000
     b18:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b1c:	mov.w	r3, #65536	; 0x10000
     b20:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b24:	ldr	r3, [pc, #32]	; (b48 <i2s_setup()+0x78>)
     b26:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b2a:	ldr	r3, [pc, #32]	; (b4c <i2s_setup()+0x7c>)
     b2c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b30:	ldr	r3, [pc, #28]	; (b50 <i2s_setup()+0x80>)
     b32:	str.w	r3, [r4, #136]	; 0x88
  }
     b36:	pop	{r4, pc}
     b38:	.word	0x400fc000
     b3c:	.word	0x40384000
     b40:	.word	0x20008ef0
     b44:	.word	0x401f8000
     b48:	.word	0x00011f1b
     b4c:	.word	0x1f1f1f00
     b50:	.word	0x92000001

00000b54 <dma_setup()>:
  {
     b54:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b56:	ldr	r4, [pc, #128]	; (bd8 <dma_setup()+0x84>)
     b58:	movs	r1, #1
     b5a:	mov	r0, r4
     b5c:	bl	b338 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b60:	ldr	r3, [r4, #0]
     b62:	ldr	r2, [pc, #120]	; (bdc <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b64:	ldr	r1, [pc, #120]	; (be0 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b66:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b68:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b6a:	ldr	r0, [pc, #120]	; (be4 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b6c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b6e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     b70:	ldr	r0, [pc, #116]	; (be8 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b72:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b76:	mov.w	r2, #512	; 0x200
    dma.TCD->SLAST = 0;
     b7a:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     b7c:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b7e:	sub.w	r2, r2, #2560	; 0xa00
    dma.TCD->SLAST = 0;
     b82:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     b84:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     b86:	ldrh	r2, [r3, #22]
     b88:	uxth	r2, r2
     b8a:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     b8c:	movs	r2, #6
     b8e:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b90:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     b92:	ldr	r2, [pc, #88]	; (bec <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     b94:	lsls	r3, r3, #2
     b96:	add.w	r3, r3, #1073741824	; 0x40000000
     b9a:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     b9e:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     ba0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     ba2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ba4:	ldr	r2, [pc, #72]	; (bf0 <dma_setup()+0x9c>)
     ba6:	add.w	r1, r3, #16
     baa:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bae:	asrs	r2, r3, #5
     bb0:	and.w	r0, r3, #31
     bb4:	movs	r1, #1
     bb6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bba:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bbe:	lsls	r1, r0
     bc0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bc2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bc6:	lsls	r2, r2, #2
     bc8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bca:	movs	r2, #96	; 0x60
     bcc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bce:	ldr	r3, [pc, #36]	; (bf4 <dma_setup()+0xa0>)
     bd0:	ldrb	r2, [r4, #4]
     bd2:	strb	r2, [r3, #27]
  }
     bd4:	pop	{r4, pc}
     bd6:	nop
     bd8:	.word	0x20026bdc
     bdc:	.word	0x403840a0
     be0:	.word	0x02020000
     be4:	.word	0x20200000
     be8:	.word	0x000008c1
     bec:	.word	0x80000013
     bf0:	.word	0x20009000
     bf4:	.word	0x400e8000

00000bf8 <acqModifyFrequency(unsigned long)>:
  {
     bf8:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     bfa:	ldr	r4, [pc, #32]	; (c1c <acqModifyFrequency(unsigned long)+0x24>)
     bfc:	ldr.w	r3, [r4, #136]	; 0x88
     c00:	bic.w	r3, r3, #2415919104	; 0x90000000
     c04:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c08:	bl	970 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c0c:	ldr.w	r3, [r4, #136]	; 0x88
     c10:	orr.w	r3, r3, #2415919104	; 0x90000000
     c14:	str.w	r3, [r4, #136]	; 0x88
  }
     c18:	pop	{r4, pc}
     c1a:	nop
     c1c:	.word	0x40384000

00000c20 <_GLOBAL__sub_I_procCount>:
		begin();
     c20:	ldr	r0, [pc, #20]	; (c38 <_GLOBAL__sub_I_procCount+0x18>)
     c22:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c24:	push	{r3, lr}
     c26:	bl	b338 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c2a:	ldr	r2, [pc, #16]	; (c3c <_GLOBAL__sub_I_procCount+0x1c>)
     c2c:	ldr	r1, [pc, #16]	; (c40 <_GLOBAL__sub_I_procCount+0x20>)
     c2e:	ldr	r0, [pc, #8]	; (c38 <_GLOBAL__sub_I_procCount+0x18>)
}
     c30:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c34:	b.w	b798 <__aeabi_atexit>
     c38:	.word	0x20026bdc
     c3c:	.word	0x20008960
     c40:	.word	0x000008b5

00000c44 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c44:	ldr	r3, [r0, #4]
     c46:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c48:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c4a:	bgt.n	c58 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c4c:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c50:	adds	r3, #1
          sd_name[fsCount] = name;
     c52:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c54:	str	r3, [r0, #4]
     c56:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c58:	pop	{r4, pc}

00000c5a <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = FILE_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c5a:	ldr	r0, [r0, #4]
     c5c:	bx	lr

00000c5e <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c5e:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c62:	ldr	r0, [r1, #8]
     c64:	bx	lr

00000c66 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c66:	movs	r0, #0
     c68:	bx	lr

00000c6a <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c6a:	movs	r0, #1
     c6c:	bx	lr

00000c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c6e:	push	{r4}
    *name = 0;
     c70:	movs	r4, #0
     c72:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     c74:	ldr	r3, [r0, #56]	; 0x38
     c76:	cbz	r3, c82 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     c78:	mov	r0, r3
  }
     c7a:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     c7e:	b.w	61f4 <FatFile::getName(char*, unsigned int)>
     c82:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     c84:	cbz	r0, c8e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     c86:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     c8a:	b.w	4af8 <ExFatFile::getName8(char*, unsigned int)>
     c8e:	ldr.w	r4, [sp], #4
     c92:	bx	lr

00000c94 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     c94:	push	{r4, lr}
     c96:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     c98:	movs	r3, #0
     c9a:	movs	r2, #10
     c9c:	bl	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ca0:	mov	r0, r4
     ca2:	ldmia.w	sp!, {r4, lr}
     ca6:	b.w	b570 <Print::println()>

00000caa <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     caa:	push	{r0, r1, r4, lr}
     cac:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cae:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cb0:	cbz	r1, cca <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     cb2:	str	r1, [sp, #4]
     cb4:	bl	e0c0 <strlen>
     cb8:	ldr	r3, [r4, #0]
     cba:	mov	r2, r0
     cbc:	ldr	r1, [sp, #4]
     cbe:	mov	r0, r4
     cc0:	ldr	r3, [r3, #4]
     cc2:	add	sp, #8
     cc4:	ldmia.w	sp!, {r4, lr}
     cc8:	bx	r3
     cca:	add	sp, #8
     ccc:	pop	{r4, pc}
	...

00000cd0 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     cd0:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     cd2:	ldr	r4, [pc, #44]	; (d00 <dbgPrint(unsigned short)+0x30>)
     cd4:	mov	r5, r0
     cd6:	ldr	r1, [pc, #44]	; (d04 <dbgPrint(unsigned short)+0x34>)
     cd8:	mov	r0, r4
     cda:	bl	caa <Print::write(char const*)>
     cde:	ldr	r1, [pc, #40]	; (d08 <dbgPrint(unsigned short)+0x38>)
     ce0:	mov	r0, r4
     ce2:	bl	caa <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     ce6:	movs	r0, #46	; 0x2e
     ce8:	bl	9b78 <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     cec:	mov	r1, r5
     cee:	mov	r0, r4
     cf0:	bl	b55e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     cf4:	mov	r0, r4
  }
     cf6:	ldmia.w	sp!, {r3, r4, r5, lr}
     cfa:	b.w	b570 <Print::println()>
     cfe:	nop
     d00:	.word	0x20008944
     d04:	.word	0x20007e74
     d08:	.word	0x20007e7f

00000d0c <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d0c:	push	{r3, r4, r5, lr}
     d0e:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d10:	bl	caa <Print::write(char const*)>
     d14:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d16:	mov	r0, r5
     d18:	bl	b570 <Print::println()>
     d1c:	add	r0, r4
     d1e:	pop	{r3, r4, r5, pc}

00000d20 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d20:	ldr.w	r3, [r0, #1152]	; 0x480
     d24:	cbz	r3, d32 <FsVolume::bytesPerCluster() const+0x12>
     d26:	ldrb	r3, [r3, #6]
     d28:	mov.w	r0, #512	; 0x200
     d2c:	lsls	r0, r3
     d2e:	uxth	r0, r0
     d30:	bx	lr
     d32:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d36:	cbz	r0, d3c <FsVolume::bytesPerCluster() const+0x1c>
     d38:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d3c:	bx	lr

00000d3e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d3e:	ldr.w	r3, [r0, #1152]	; 0x480
     d42:	cbz	r3, d4a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d44:	ldr	r0, [r3, #28]
     d46:	subs	r0, #1
     d48:	bx	lr
     d4a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d4e:	cbz	r0, d54 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d50:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d54:	bx	lr

00000d56 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d56:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d5a:	push	{r3, r4, r5, lr}
     d5c:	ldr	r5, [r1, #88]	; 0x58
     d5e:	mov	r0, r5
     d60:	bl	d3e <FsVolume::clusterCount() const>
     d64:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d66:	mov	r0, r5
     d68:	bl	d20 <FsVolume::bytesPerCluster() const>
     d6c:	umull	r0, r1, r4, r0
     d70:	pop	{r3, r4, r5, pc}

00000d72 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d72:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     d76:	push	{r4, r5, lr}
     d78:	mov	r5, r1
     d7a:	sub	sp, #68	; 0x44
     d7c:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     d7e:	cbz	r3, da4 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     d80:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     d82:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     d86:	add	r0, sp, #8
     d88:	mov	r3, r2
     d8a:	str	r2, [sp, #8]
     d8c:	mov	r2, r5
     d8e:	str	r1, [sp, #4]
     d90:	bl	6810 <FatFile::open(FatFile*, char const*, int)>
     d94:	ldr	r1, [sp, #4]
     d96:	cbz	r0, da0 <FsVolume::rename(char const*, char const*)+0x2e>
     d98:	mov	r2, r4
     d9a:	add	r0, sp, #8
     d9c:	bl	6a5a <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     da0:	add	sp, #68	; 0x44
     da2:	pop	{r4, r5, pc}
     da4:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     da8:	cmp	r0, #0
     daa:	beq.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     dac:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     db0:	mov	r2, r5
     db2:	add	r0, sp, #8
  ExFatFile() {}
     db4:	str	r3, [sp, #56]	; 0x38
     db6:	str	r1, [sp, #4]
     db8:	bl	52dc <ExFatFile::open(ExFatFile*, char const*, int)>
     dbc:	ldr	r1, [sp, #4]
     dbe:	cbnz	r0, dc4 <FsVolume::rename(char const*, char const*)+0x52>
     dc0:	movs	r0, #0
     dc2:	b.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>
     dc4:	mov	r2, r4
     dc6:	add	r0, sp, #8
     dc8:	bl	5cd8 <ExFatFile::rename(ExFatFile*, char const*)>
     dcc:	cmp	r0, #0
     dce:	beq.n	dc0 <FsVolume::rename(char const*, char const*)+0x4e>
     dd0:	b.n	da0 <FsVolume::rename(char const*, char const*)+0x2e>

00000dd2 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     dd2:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     dd4:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     dd6:	cbz	r3, df0 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     dd8:	ldrb	r0, [r3, #0]
     dda:	ands.w	r0, r0, #8
     dde:	ittt	ne
     de0:	ldrne	r0, [r3, #28]
     de2:	ldrne	r3, [r3, #20]
     de4:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     de6:	cmp	r0, #0
     de8:	it	lt
     dea:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     dee:	pop	{r4, pc}
     df0:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     df2:	cmp	r0, #0
     df4:	beq.n	dee <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     df6:	ldrb.w	r3, [r0, #49]	; 0x31
     dfa:	ands.w	r3, r3, #8
     dfe:	beq.n	e1e <FsBaseFile::available() const+0x4c>
     e00:	ldrd	r1, r3, [r0, #16]
     e04:	ldrd	r2, r4, [r0]
     e08:	subs	r0, r1, r2
     e0a:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e0e:	cmp.w	r0, #2147483648	; 0x80000000
     e12:	sbcs.w	r3, r3, #0
     e16:	it	cs
     e18:	mvncs.w	r0, #2147483648	; 0x80000000
     e1c:	b.n	dee <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e1e:	mov	r0, r3
     e20:	b.n	e0e <FsBaseFile::available() const+0x3c>

00000e22 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e22:	ldr	r3, [r0, #56]	; 0x38
     e24:	cbz	r3, e34 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e26:	ldrb	r3, [r3, #0]
     e28:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e2c:	ite	ne
     e2e:	movne	r0, #1
     e30:	moveq	r0, #0
  }
     e32:	bx	lr
     e34:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e36:	cmp	r0, #0
     e38:	beq.n	e32 <FsBaseFile::isDir() const+0x10>
     e3a:	ldrb.w	r3, [r0, #49]	; 0x31
     e3e:	tst.w	r3, #80	; 0x50
     e42:	b.n	e2c <FsBaseFile::isDir() const+0xa>

00000e44 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e44:	ldr	r3, [r0, #56]	; 0x38
     e46:	cbnz	r3, e52 <FsBaseFile::isOpen() const+0xe>
     e48:	ldr	r0, [r0, #60]	; 0x3c
     e4a:	subs	r0, #0
     e4c:	it	ne
     e4e:	movne	r0, #1
     e50:	bx	lr
     e52:	movs	r0, #1
     e54:	bx	lr

00000e56 <MTPStorage_SD::CloseIndex()>:
  {
     e56:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e58:	add.w	r5, r0, #184	; 0xb8
  {
     e5c:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     e5e:	mov	r0, r5
     e60:	bl	e44 <FsBaseFile::isOpen() const>
     e64:	cbz	r0, e6c <MTPStorage_SD::CloseIndex()+0x16>
     e66:	mov	r0, r5
     e68:	bl	796c <FsBaseFile::close()>
    index_generated = false;
     e6c:	movs	r3, #0
     e6e:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     e72:	str.w	r3, [r4, #424]	; 0x1a8
  }
     e76:	pop	{r3, r4, r5, pc}

00000e78 <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     e78:	ldr	r3, [r0, #56]	; 0x38
     e7a:	cbz	r3, e82 <FsBaseFile::read(void*, unsigned int)+0xa>
     e7c:	mov	r0, r3
     e7e:	b.w	634c <FatFile::read(void*, unsigned int)>
     e82:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     e84:	cbz	r0, e8a <FsBaseFile::read(void*, unsigned int)+0x12>
     e86:	b.w	4cfc <ExFatFile::read(void*, unsigned int)>
  }
     e8a:	mov.w	r0, #4294967295
     e8e:	bx	lr

00000e90 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     e90:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e92:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     e94:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e96:	cbz	r5, ea2 <FsBaseFile::seekSet(unsigned long long)+0x12>
     e98:	cbnz	r3, eac <FsBaseFile::seekSet(unsigned long long)+0x1c>
     e9a:	mov	r0, r5
  }
     e9c:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     e9e:	b.w	6536 <FatFile::seekSet(unsigned long)>
     ea2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ea4:	cbz	r0, eac <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     ea6:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     ea8:	b.w	4eac <ExFatFile::seekSet(unsigned long long)>
  }
     eac:	movs	r0, #0
     eae:	pop	{r4, r5}
     eb0:	bx	lr

00000eb2 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     eb2:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     eb4:	add.w	r0, r0, #264	; 0x108
     eb8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     ebc:	pop	{r3, pc}
	...

00000ec0 <FsFile::FsFile()>:
     ec0:	movs	r2, #0
     ec2:	mov.w	r1, #1000	; 0x3e8
     ec6:	strb	r2, [r0, #12]
     ec8:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     ecc:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     ed0:	ldr	r2, [pc, #4]	; (ed8 <FsFile::FsFile()+0x18>)
     ed2:	str	r2, [r0, #0]
     ed4:	bx	lr
     ed6:	nop
     ed8:	.word	0x20000548

00000edc <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     edc:	ldr	r3, [pc, #16]	; (ef0 <FsFile::~FsFile()+0x14>)
     ede:	push	{r4, lr}
     ee0:	mov	r4, r0
     ee2:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     ee6:	bl	796c <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     eea:	mov	r0, r4
     eec:	pop	{r4, pc}
     eee:	nop
     ef0:	.word	0x20000420

00000ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     ef4:	add.w	r1, r0, r1, lsl #2
     ef8:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     efa:	ldr.w	r1, [r3, #1152]	; 0x480
     efe:	push	{lr}
     f00:	sub	sp, #60	; 0x3c
     f02:	cbz	r1, f1a <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f04:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f06:	add.w	r1, r1, #1096	; 0x448
     f0a:	mov	r0, sp
     f0c:	str	r3, [sp, #0]
     f0e:	movs	r3, #1
     f10:	bl	69b6 <FatFile::mkdir(FatFile*, char const*, bool)>
     f14:	add	sp, #60	; 0x3c
     f16:	ldr.w	pc, [sp], #4
     f1a:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f1e:	cmp	r0, #0
     f20:	beq.n	f14 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f22:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f24:	movs	r3, #1
     f26:	add.w	r1, r0, #1096	; 0x448
     f2a:	mov	r0, sp
     f2c:	bl	5c1a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f30:	b.n	f14 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f34 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f34:	push	{r4, r5, lr}
     f36:	mov	r4, r0
     f38:	sub	sp, #68	; 0x44
     f3a:	mov	r5, r1
     f3c:	ldr	r0, [pc, #84]	; (f94 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f3e:	mov	r1, r2
     f40:	str	r2, [sp, #4]
     f42:	bl	d0c <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f46:	ldr	r2, [sp, #4]
     f48:	add.w	r1, r4, r5, lsl #2
     f4c:	ldr	r3, [r1, #84]	; 0x54
     f4e:	ldr.w	r1, [r3, #1152]	; 0x480
     f52:	cbz	r1, f6c <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f54:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f56:	add	r0, sp, #8
     f58:	str	r3, [sp, #8]
     f5a:	movs	r3, #1
     f5c:	bl	68ae <FatFile::open(FatVolume*, char const*, int)>
     f60:	cbz	r0, f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f62:	add	r0, sp, #8
     f64:	bl	78b4 <FatFile::remove()>
     f68:	add	sp, #68	; 0x44
     f6a:	pop	{r4, r5, pc}
     f6c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     f70:	cmp	r0, #0
     f72:	beq.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f74:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f76:	movs	r3, #1
     f78:	mov	r1, r0
     f7a:	add	r0, sp, #8
     f7c:	bl	53a2 <ExFatFile::open(ExFatVolume*, char const*, int)>
     f80:	cbnz	r0, f86 <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     f82:	movs	r0, #0
     f84:	b.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f86:	add	r0, sp, #8
     f88:	bl	5920 <ExFatFile::remove()>
     f8c:	cmp	r0, #0
     f8e:	beq.n	f82 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     f90:	b.n	f68 <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     f92:	nop
     f94:	.word	0x20008944

00000f98 <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     f98:	add.w	r1, r0, r1, lsl #2
     f9c:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     f9e:	ldr.w	r1, [r3, #1152]	; 0x480
     fa2:	push	{lr}
     fa4:	sub	sp, #60	; 0x3c
     fa6:	cbz	r1, fc0 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fa8:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     faa:	mov	r0, sp
     fac:	str	r3, [sp, #0]
     fae:	bl	68ae <FatFile::open(FatVolume*, char const*, int)>
     fb2:	cbz	r0, fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fb4:	mov	r0, sp
     fb6:	bl	65d6 <FatFile::rmdir()>
     fba:	add	sp, #60	; 0x3c
     fbc:	ldr.w	pc, [sp], #4
     fc0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
     fc4:	cmp	r0, #0
     fc6:	beq.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fc8:	mov	r3, r1
     fca:	str	r1, [sp, #48]	; 0x30
     fcc:	mov	r1, r0
     fce:	mov	r0, sp
     fd0:	bl	53a2 <ExFatFile::open(ExFatVolume*, char const*, int)>
     fd4:	cbnz	r0, fda <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
     fd6:	movs	r0, #0
     fd8:	b.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     fda:	mov	r0, sp
     fdc:	bl	59ac <ExFatFile::rmdir()>
     fe0:	cmp	r0, #0
     fe2:	beq.n	fd6 <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
     fe4:	b.n	fba <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

00000fe8 <MTPStorage_SD::OpenIndex()>:
  { 
     fe8:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
     fea:	add.w	r5, r0, #184	; 0xb8
  { 
     fee:	sub	sp, #84	; 0x54
     ff0:	mov	r4, r0
    if(index_.isOpen()) return; // only once
     ff2:	mov	r0, r5
     ff4:	bl	e44 <FsBaseFile::isOpen() const>
     ff8:	cbnz	r0, 103a <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
     ffa:	ldr	r2, [pc, #68]	; (1040 <MTPStorage_SD::OpenIndex()+0x58>)
     ffc:	movw	r3, #514	; 0x202
    1000:	ldr	r1, [r4, #88]	; 0x58
    1002:	mov	r0, sp
    1004:	bl	7ba0 <FsVolume::open(char const*, int)>
class Print
    1008:	ldr	r3, [sp, #4]
    100a:	add	r1, sp, #16
    100c:	mov	r0, r5
    100e:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1012:	ldr	r3, [sp, #8]
    1014:	str.w	r3, [r4, #176]	; 0xb0
    1018:	ldrb.w	r3, [sp, #12]
    101c:	strb.w	r3, [r4, #180]	; 0xb4
    1020:	bl	7996 <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, FILE_WRITE_BEGIN);
    1024:	mov	r0, sp
    1026:	bl	edc <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    102a:	mov	r0, r5
    102c:	bl	e44 <FsBaseFile::isOpen() const>
    1030:	cbnz	r0, 103a <MTPStorage_SD::OpenIndex()+0x52>
    1032:	ldr	r1, [pc, #16]	; (1044 <MTPStorage_SD::OpenIndex()+0x5c>)
    1034:	ldr	r0, [pc, #16]	; (1048 <MTPStorage_SD::OpenIndex()+0x60>)
    1036:	bl	d0c <Print::println(char const*)>
  }
    103a:	add	sp, #84	; 0x54
    103c:	pop	{r4, r5, pc}
    103e:	nop
    1040:	.word	0x20007e9d
    1044:	.word	0x20007eab
    1048:	.word	0x20008944

0000104c <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    104c:	push	{r4, lr}
    104e:	mov	r4, r0
    if(!index_.isOpen()) return;
    1050:	adds	r0, #184	; 0xb8
    1052:	bl	e44 <FsBaseFile::isOpen() const>
    1056:	cbz	r0, 1078 <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    1058:	ldr	r3, [r4, #0]
    105a:	mov	r0, r4
    105c:	ldr	r3, [r3, #64]	; 0x40
    105e:	blx	r3
    all_scanned_ = false;
    1060:	movs	r3, #0
    OpenIndex();
    1062:	mov	r0, r4
    all_scanned_ = false;
    1064:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    1068:	mvn.w	r3, #1
    106c:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1070:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    1074:	b.w	fe8 <MTPStorage_SD::OpenIndex()>
  }
    1078:	pop	{r4, pc}

0000107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    107a:	push	{r0, r1, r4, r5, r6, lr}
    107c:	mov	r4, r0
    107e:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    1080:	mov.w	r6, #272	; 0x110
  { OpenIndex();
    1084:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    1086:	adds	r4, #184	; 0xb8
  { OpenIndex();
    1088:	bl	fe8 <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    108c:	mul.w	r2, r6, r5
    1090:	movs	r3, #0
    1092:	mov	r0, r4
    1094:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    1098:	mov	r2, r6
    109a:	ldr	r1, [sp, #4]
    109c:	mov	r0, r4
    109e:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10a2:	add	sp, #8
    10a4:	pop	{r4, r5, r6, pc}

000010a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10a6:	push	{r4, lr}
    10a8:	ldr.w	r4, [r0, #424]	; 0x1a8
    10ac:	mov	r2, r1
    10ae:	adds	r1, r4, #1
    10b0:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10b4:	mov	r1, r4
    10b6:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10ba:	mov	r0, r4
    10bc:	pop	{r4, pc}
	...

000010c0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    10c0:	movs	r3, #1
    sd_remove(0,indexFile);
    10c2:	ldr	r2, [pc, #88]	; (111c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    10c4:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10c6:	push	{r4, r5, r6, r7, lr}
    10c8:	mov	r4, r0
    index_generated = true;
    10ca:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    10ce:	sub	sp, #276	; 0x114
    sd_remove(0,indexFile);
    10d0:	adds	r0, #4
    10d2:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    10d6:	movs	r5, #0
    num_storage = sd_getFSCount();
    10d8:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    10da:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    10de:	ldr	r7, [pc, #64]	; (1120 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    10e0:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    10e4:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    10e8:	ldr.w	r3, [r4, #408]	; 0x198
    10ec:	cmp	r5, r3
    10ee:	blt.n	10f4 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    10f0:	add	sp, #276	; 0x114
    10f2:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    10f4:	movs	r3, #0
      strcpy(r.name, "/");
    10f6:	mov	r1, r7
    10f8:	add	r0, sp, #16
      r.store = ii; // 
    10fa:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    10fe:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1100:	adds	r5, #1
      r.sibling = 0;
    1102:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    1106:	movs	r3, #1
    1108:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    110c:	bl	df5c <strcpy>
      AppendIndexRecord(r);
    1110:	mov	r1, sp
    1112:	mov	r0, r4
    1114:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    1118:	b.n	10e8 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    111a:	nop
    111c:	.word	0x20007e9d
    1120:	.word	0x20007b97

00001124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1124:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    1126:	mov.w	r7, #272	; 0x110
  {
    112a:	mov	r4, r1
    112c:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    112e:	movs	r1, #0
    1130:	mov	r2, r7
  {
    1132:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1134:	bl	942c <memset>
    if (i > index_entries_) 
    1138:	ldr.w	r3, [r4, #424]	; 0x1a8
    113c:	cmp	r3, r6
    113e:	bcc.n	115e <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1140:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1142:	adds	r4, #184	; 0xb8
    OpenIndex();
    1144:	bl	fe8 <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    1148:	mul.w	r2, r7, r6
    114c:	movs	r3, #0
    114e:	mov	r0, r4
    1150:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1154:	mov	r2, r7
    1156:	mov	r1, r5
    1158:	mov	r0, r4
    115a:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
  }
    115e:	mov	r0, r5
    1160:	pop	{r3, r4, r5, r6, r7, pc}

00001162 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    1162:	push	{r4, r5, lr}
    1164:	mov	r4, r0
    1166:	sub	sp, #276	; 0x114
    { if (next_ == 0) return 0;
    1168:	ldr.w	r5, [r4, #432]	; 0x1b0
    116c:	cbz	r5, 118c <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    116e:	mov	r2, r5
    1170:	mov	r1, r4
    1172:	mov	r0, sp
    1174:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    1178:	ldrb.w	r3, [r4, #436]	; 0x1b4
    117c:	cbz	r3, 1192 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    117e:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    1180:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    1184:	ldrb.w	r3, [sp, #16]
    1188:	cmp	r3, #0
    118a:	beq.n	1168 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    118c:	mov	r0, r5
    118e:	add	sp, #276	; 0x114
    1190:	pop	{r4, r5, pc}
      { next_++;
    1192:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    1196:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    119a:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    119c:	cmp	r1, r2
    119e:	it	cc
    11a0:	movcc	r3, r1
    11a2:	b.n	1180 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011a4 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)>:
  {
    11a4:	push	{r4, r5, lr}
    11a6:	sub	sp, #276	; 0x114
    11a8:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11aa:	mov	r2, r1
    11ac:	mov	r1, r0
    11ae:	mov	r0, sp
  {
    11b0:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11b2:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11b6:	add	r1, sp, #16
    11b8:	mov	r0, r5
    11ba:	bl	df5c <strcpy>
    *parent = r.parent;
    11be:	ldr	r3, [sp, #288]	; 0x120
    11c0:	ldr	r2, [sp, #0]
    11c2:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11c4:	ldrb.w	r3, [sp, #12]
    11c8:	cbnz	r3, 11da <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x36>
    11ca:	ldr	r3, [sp, #4]
    11cc:	str	r3, [r4, #0]
    *store = r.store;
    11ce:	ldrh.w	r2, [sp, #14]
    11d2:	ldr	r3, [sp, #292]	; 0x124
    11d4:	strh	r2, [r3, #0]
  }
    11d6:	add	sp, #276	; 0x114
    11d8:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    11da:	mov.w	r3, #4294967295
    11de:	b.n	11cc <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*)+0x28>

000011e0 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    11e0:	push	{lr}
    11e2:	sub	sp, #276	; 0x114
    11e4:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    11e6:	mov	r1, r0
    11e8:	mov	r0, sp
    11ea:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    11ee:	ldr	r0, [sp, #4]
    11f0:	add	sp, #276	; 0x114
    11f2:	ldr.w	pc, [sp], #4

000011f6 <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    11f6:	ldr.w	r3, [r0, #320]	; 0x140
  {
    11fa:	push	{r4, r5, lr}
    11fc:	mov	r4, r0
    11fe:	sub	sp, #276	; 0x114
    1200:	cbz	r3, 1232 <MTPStorage_SD::close()+0x3c>
    1202:	ldr	r5, [r3, #28]
    file_.close();
    1204:	add.w	r0, r4, #264	; 0x108
    1208:	bl	796c <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    120c:	ldr.w	r2, [r4, #420]	; 0x1a4
    1210:	mov	r1, r4
    1212:	mov	r0, sp
    1214:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    WriteIndexRecord(open_file_, r);
    1218:	mov	r2, sp
    121a:	ldr.w	r1, [r4, #420]	; 0x1a4
    121e:	mov	r0, r4
    uint32_t size = (uint32_t) file_.size();
    1220:	str	r5, [sp, #4]
    WriteIndexRecord(open_file_, r);
    1222:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1226:	mvn.w	r3, #1
    122a:	str.w	r3, [r4, #420]	; 0x1a4
  }
    122e:	add	sp, #276	; 0x114
    1230:	pop	{r4, r5, pc}
    1232:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1236:	cmp	r5, #0
    1238:	beq.n	1204 <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    123a:	ldr	r5, [r5, #16]
    123c:	b.n	1204 <MTPStorage_SD::close()+0xe>
	...

00001240 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1240:	push	{r4, r5, r6, lr}
    1242:	sub	sp, #272	; 0x110
    1244:	mov	r6, r0
    1246:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1248:	mov	r2, r1
    124a:	mov	r1, r0
    124c:	mov	r0, sp
  {
    124e:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1250:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1254:	ldr	r1, [sp, #0]
    1256:	adds	r3, r1, #1
    1258:	bne.n	126a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    125a:	ldr	r1, [pc, #64]	; (129c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    125c:	mov	r0, r4
    125e:	bl	df5c <strcpy>
      return tmp.store;
    1262:	ldrh.w	r0, [sp, #14]
  }
    1266:	add	sp, #272	; 0x110
    1268:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    126a:	mov	r3, r5
    126c:	mov	r2, r4
    126e:	mov	r0, r6
    1270:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1274:	mov	r0, r4
    1276:	bl	e0c0 <strlen>
    127a:	add	r0, r4
    127c:	ldrb.w	r3, [r0, #-1]
    1280:	cmp	r3, #47	; 0x2f
    1282:	beq.n	128e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1284:	mov	r2, r5
    1286:	ldr	r1, [pc, #20]	; (129c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1288:	mov	r0, r4
    128a:	bl	d9a0 <strlcat>
      strlcat(out, tmp.name,len);
    128e:	mov	r2, r5
    1290:	add	r1, sp, #16
    1292:	mov	r0, r4
    1294:	bl	d9a0 <strlcat>
    1298:	b.n	1262 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    129a:	nop
    129c:	.word	0x20007b97

000012a0 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    12a0:	push	{r4, r5, r6, r7, lr}
    12a2:	subw	sp, sp, #1044	; 0x414
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12a6:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    12aa:	mov	r4, r0
    12ac:	mov	r5, r1
    12ae:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12b0:	mov	r2, sp
    12b2:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    12b6:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    12b8:	mov	r6, r0
    Serial.println(oldName);
    12ba:	ldr	r0, [pc, #120]	; (1334 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    12bc:	bl	d0c <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    12c0:	mov	r2, r5
    12c2:	mov	r1, r4
    12c4:	add	r0, sp, #768	; 0x300
    12c6:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    12ca:	mov.w	r2, #256	; 0x100
    12ce:	add	r1, sp, #784	; 0x310
    12d0:	add	r0, sp, #512	; 0x200
    12d2:	bl	da08 <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    12d6:	mov.w	r2, #256	; 0x100
    12da:	mov	r1, r7
    12dc:	add	r0, sp, #784	; 0x310
    12de:	bl	da08 <strlcpy>
    WriteIndexRecord(handle, p1);
    12e2:	add	r2, sp, #768	; 0x300
    12e4:	mov	r1, r5
    12e6:	mov	r0, r4
    12e8:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    12ec:	mov.w	r3, #256	; 0x100
    12f0:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    12f2:	add.w	r6, r4, r6, lsl #2
    12f6:	add.w	r2, sp, r3
    12fa:	mov	r0, r4
    12fc:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    1300:	add	r1, sp, #256	; 0x100
    1302:	ldr	r0, [pc, #48]	; (1334 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    1304:	bl	d0c <Print::println(char const*)>
    1308:	ldr	r0, [r6, #88]	; 0x58
    130a:	add	r2, sp, #256	; 0x100
    130c:	mov	r1, sp
    130e:	bl	d72 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1312:	mov	r6, r0
    1314:	cbnz	r0, 132c <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    1316:	mov.w	r2, #256	; 0x100
    131a:	add	r1, sp, #512	; 0x200
    131c:	add	r0, sp, #784	; 0x310
    131e:	bl	da08 <strlcpy>
    WriteIndexRecord(handle, p1);
    1322:	add	r2, sp, #768	; 0x300
    1324:	mov	r1, r5
    1326:	mov	r0, r4
    1328:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    132c:	mov	r0, r6
    132e:	addw	sp, sp, #1044	; 0x414
    1332:	pop	{r4, r5, r6, r7, pc}
    1334:	.word	0x20008944

00001338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1338:	ldr.w	r3, [r0, #420]	; 0x1a4
    133c:	cmp	r3, r1
  {
    133e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1342:	mov	r4, r0
    1344:	sub	sp, #336	; 0x150
    1346:	mov	r6, r1
    1348:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    134a:	bne.n	1354 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    134c:	ldr.w	r3, [r0, #416]	; 0x1a0
    1350:	cmp	r3, r2
    1352:	beq.n	13ac <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1354:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1358:	mov.w	r3, #256	; 0x100
    135c:	add	r2, sp, #80	; 0x50
    135e:	mov	r1, r6
    1360:	mov	r0, r4
    1362:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1366:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1368:	mov	r0, r8
    136a:	bl	e44 <FsBaseFile::isOpen() const>
    136e:	cbz	r0, 1376 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1370:	mov	r0, r8
    1372:	bl	796c <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1376:	add.w	r7, r4, r7, lsl #2
    137a:	add	r2, sp, #80	; 0x50
    137c:	mov	r3, r5
    137e:	mov	r0, sp
    1380:	ldr	r1, [r7, #88]	; 0x58
    1382:	bl	7ba0 <FsVolume::open(char const*, int)>
    1386:	ldr	r3, [sp, #4]
    1388:	add	r1, sp, #16
    138a:	mov	r0, r8
    138c:	str.w	r3, [r4, #252]	; 0xfc
    1390:	ldr	r3, [sp, #8]
    1392:	str.w	r3, [r4, #256]	; 0x100
    1396:	ldrb.w	r3, [sp, #12]
    139a:	strb.w	r3, [r4, #260]	; 0x104
    139e:	bl	7996 <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    13a2:	mov	r0, sp
    13a4:	bl	edc <FsFile::~FsFile()>
    mode_ = mode;
    13a8:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    13ac:	add	sp, #336	; 0x150
    13ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000013b2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    13b2:	push	{r4, r5, r6, lr}
    13b4:	mov	r4, r0
    13b6:	mov	r6, r2
    13b8:	mov	r5, r3
    OpenFileByIndex(handle);
    13ba:	movs	r2, #0
    file_.seekSet(pos);
    13bc:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    13c0:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    13c4:	mov	r2, r6
    13c6:	movs	r3, #0
    13c8:	mov	r0, r4
    13ca:	bl	e90 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    13ce:	ldr	r2, [sp, #16]
    13d0:	mov	r1, r5
    13d2:	mov	r0, r4
    13d4:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
  }
    13d8:	pop	{r4, r5, r6, pc}

000013da <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    13da:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    13de:	cmp.w	r2, #4294967295
    13e2:	ite	ne
    13e4:	movne	r8, r2
    13e6:	moveq	r8, r1
  {
    13e8:	sub.w	sp, sp, #800	; 0x320
    13ec:	mov	r4, r0
    13ee:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    13f0:	mov	r2, r8
    13f2:	mov	r1, r0
    13f4:	add	r0, sp, #256	; 0x100
  {
    13f6:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    13f8:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    13fc:	mov.w	r2, #256	; 0x100
    1400:	ldr	r1, [sp, #824]	; 0x338
    1402:	add	r0, sp, #544	; 0x220
    1404:	bl	da08 <strlcpy>
    r.store = p.store;
    1408:	ldrh.w	r3, [sp, #270]	; 0x10e
    ret = p.child = AppendIndexRecord(r);
    140c:	add	r1, sp, #528	; 0x210
    140e:	mov	r0, r4
    r.store = p.store;
    1410:	strh.w	r3, [sp, #542]	; 0x21e
    r.child = 0;
    1414:	movs	r3, #0
    r.parent = parent;
    1416:	str.w	r8, [sp, #528]	; 0x210
    r.child = 0;
    141a:	str	r3, [sp, #532]	; 0x214
    r.sibling = p.child;
    141c:	ldr	r3, [sp, #260]	; 0x104
    r.isdir = folder;
    141e:	strb.w	r7, [sp, #540]	; 0x21c
    r.sibling = p.child;
    1422:	str	r3, [sp, #536]	; 0x218
    r.scanned = 1;
    1424:	movs	r3, #1
    1426:	strb.w	r3, [sp, #541]	; 0x21d
    ret = p.child = AppendIndexRecord(r);
    142a:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    142e:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1430:	mov	r5, r0
    1432:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1434:	mov	r1, r8
    1436:	mov	r0, r4
    1438:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    143c:	cbz	r7, 1460 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x86>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    143e:	mov	r2, sp
    1440:	mov	r1, r5
    1442:	mov.w	r3, #256	; 0x100
    1446:	mov	r0, r4
    1448:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    144c:	mov	r2, sp
    144e:	mov	r1, r6
    1450:	adds	r0, r4, #4
    1452:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    1456:	mov	r0, r5
    1458:	add.w	sp, sp, #800	; 0x320
    145c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, FILE_WRITE_BEGIN);
    1460:	movw	r2, #514	; 0x202
    1464:	mov	r1, r5
    1466:	mov	r0, r4
    1468:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    146c:	b.n	1456 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x7c>

0000146e <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    146e:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1472:	cbnz	r3, 1478 <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1474:	b.w	10c0 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    1478:	bx	lr

0000147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    147a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    147e:	cmp.w	r2, #4294967295
    1482:	ite	ne
    1484:	movne	r6, r2
    1486:	moveq	r6, r1
    1488:	sub.w	sp, sp, #548	; 0x224
    Record record = ReadIndexRecord(i);
    148c:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    148e:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1490:	mov	r2, r6
    1492:	mov	r0, sp
    1494:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    1498:	ldrb.w	r3, [sp, #12]
    149c:	cmp	r3, #0
    149e:	beq.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
    14a0:	ldrb.w	r5, [sp, #13]
    14a4:	cmp	r5, #0
    14a6:	bne.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
      if (!file_.isOpen()) return;
    14a8:	add.w	r7, r4, #264	; 0x108
      OpenFileByIndex(i);
    14ac:	mov	r0, r4
    14ae:	mov	r2, r5
    14b0:	mov	r1, r6
    14b2:	bl	1338 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    14b6:	mov	r0, r7
    14b8:	bl	e44 <FsBaseFile::isOpen() const>
    14bc:	cmp	r0, #0
    14be:	beq.n	1566 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xec>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    14c0:	mov	r8, r5
    FsFile tmpFile;
    14c2:	add	r0, sp, #272	; 0x110
    14c4:	add.w	r9, r4, #344	; 0x158
    14c8:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    14cc:	movs	r2, #0
    14ce:	mov	r1, r7
    14d0:	add	r0, sp, #288	; 0x120
    14d2:	bl	7a6c <FsBaseFile::openNext(FsBaseFile*, int)>
    14d6:	ldr	r3, [sp, #276]	; 0x114
    14d8:	add	r1, sp, #288	; 0x120
    14da:	mov	r0, r9
    14dc:	str.w	r3, [r4, #332]	; 0x14c
    14e0:	ldr	r3, [sp, #280]	; 0x118
    14e2:	str.w	r3, [r4, #336]	; 0x150
    14e6:	ldrb.w	r3, [sp, #284]	; 0x11c
    14ea:	strb.w	r3, [r4, #340]	; 0x154
    14ee:	bl	7996 <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    14f2:	add	r0, sp, #272	; 0x110
    14f4:	bl	edc <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    14f8:	mov	r0, r9
    14fa:	bl	e44 <FsBaseFile::isOpen() const>
    14fe:	cbz	r0, 1554 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xda>
        r.store = record.store;
    1500:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    1504:	mov	r0, r9
        r.parent = i;
    1506:	str	r6, [sp, #272]	; 0x110
        r.store = record.store;
    1508:	strh.w	r3, [sp, #286]	; 0x11e
        r.sibling = sibling;
    150c:	str	r5, [sp, #280]	; 0x118
    150e:	bl	e22 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1512:	strb.w	r0, [sp, #284]	; 0x11c
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1516:	cbnz	r0, 1550 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    return m_fFile ? m_fFile->fileSize() :
    1518:	ldr.w	r3, [r4, #400]	; 0x190
    151c:	cbz	r3, 1544 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xca>
    151e:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1520:	mov.w	r2, #256	; 0x100
    1524:	add	r1, sp, #288	; 0x120
    1526:	mov	r0, r9
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1528:	str	r3, [sp, #276]	; 0x114
        r.scanned = false;
    152a:	strb.w	r8, [sp, #285]	; 0x11d
        child_.getName(r.name,MAX_FILENAME_LEN);
    152e:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        sibling = AppendIndexRecord(r);
    1532:	add	r1, sp, #272	; 0x110
    1534:	mov	r0, r4
    1536:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    153a:	mov	r5, r0
        child_.close();
    153c:	mov	r0, r9
    153e:	bl	796c <FsBaseFile::close()>
      }
    1542:	b.n	14c2 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1544:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    1548:	cmp	r3, #0
    154a:	beq.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
    154c:	ldr	r3, [r3, #16]
    154e:	b.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1550:	movs	r3, #0
    1552:	b.n	1520 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa6>
      record.scanned = true;
    1554:	movs	r3, #1
      WriteIndexRecord(i, record);
    1556:	mov	r2, sp
    1558:	mov	r1, r6
    155a:	mov	r0, r4
      record.scanned = true;
    155c:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1560:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1562:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1566:	add.w	sp, sp, #548	; 0x224
    156a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000156e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    156e:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1570:	cmp.w	r2, #4294967295
    1574:	it	eq
    1576:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1578:	sub	sp, #280	; 0x118
    157a:	mov	r4, r0
      ScanDir(store, parent);
    157c:	str	r2, [sp, #4]
    157e:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    1582:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    1584:	ldr	r2, [sp, #4]
    1586:	mov	r1, r4
    1588:	add	r0, sp, #8
      follow_sibling_ = true;
    158a:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    158e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1592:	ldr	r3, [sp, #12]
    1594:	str.w	r3, [r4, #432]	; 0x1b0
  }
    1598:	add	sp, #280	; 0x118
    159a:	pop	{r4, pc}

0000159c <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    159c:	push	{r4, r5, r6, lr}
    159e:	ldrb.w	r4, [r0, #429]	; 0x1ad
    15a2:	mov	r5, r0
    15a4:	mov	r6, r1
    15a6:	cbnz	r4, 15ba <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    15a8:	movs	r3, #1
    15aa:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    15ae:	bl	146e <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15b2:	ldr.w	r3, [r5, #424]	; 0x1a8
    15b6:	cmp	r4, r3
    15b8:	bcc.n	15bc <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    15ba:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    15bc:	mov	r2, r4
    15be:	mov	r1, r6
    15c0:	mov	r0, r5
    15c2:	adds	r4, #1
    15c4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    15c8:	b.n	15b2 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000015ca <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    15ca:	push	{r4, r5, r6, lr}
    15cc:	mov	r5, r2
    15ce:	mov	r4, r0
    15d0:	mov	r6, r1
    GenerateIndex(store);
    15d2:	bl	146e <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    15d6:	cbz	r5, 15e6 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    15d8:	mov	r2, r5
    15da:	mov	r1, r6
    15dc:	mov	r0, r4
  }
    15de:	ldmia.w	sp!, {r4, r5, r6, lr}
    15e2:	b.w	156e <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    15e6:	mov	r1, r6
    15e8:	mov	r0, r4
    15ea:	bl	159c <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    15ee:	movs	r3, #1
      follow_sibling_ = false;
    15f0:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    15f4:	str.w	r3, [r4, #432]	; 0x1b0
  }
    15f8:	pop	{r4, r5, r6, pc}
	...

000015fc <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    15fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1600:	mov	r4, r1
    1602:	sub.w	sp, sp, #764	; 0x2fc
    1606:	add.w	r1, r0, r1, lsl #2
    160a:	mov	r6, r0
  FsFile f1=sd_open(store,file,0);
    160c:	adds	r7, r0, #4
    160e:	movs	r3, #0
    1610:	add	r0, sp, #8
    1612:	ldr	r1, [r1, #88]	; 0x58
{ 
    1614:	mov	r5, r2
    1616:	bl	7ba0 <FsVolume::open(char const*, int)>
    161a:	add	r0, sp, #24
    161c:	bl	e22 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1620:	cmp	r0, #0
    1622:	beq.n	16c6 <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1624:	ldr.w	r9, [pc, #172]	; 16d4 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    1628:	add	r0, sp, #88	; 0x58
    162a:	bl	ec0 <FsFile::FsFile()>
    FsFile tmpFile;
    162e:	add	r0, sp, #168	; 0xa8
    1630:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1634:	movs	r2, #0
    1636:	add	r1, sp, #24
    1638:	add	r0, sp, #184	; 0xb8
    163a:	bl	7a6c <FsBaseFile::openNext(FsBaseFile*, int)>
    163e:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1640:	add	r1, sp, #184	; 0xb8
    1642:	add	r0, sp, #104	; 0x68
    1644:	str	r3, [sp, #92]	; 0x5c
    1646:	ldr	r3, [sp, #176]	; 0xb0
    1648:	str	r3, [sp, #96]	; 0x60
    164a:	ldrb.w	r3, [sp, #180]	; 0xb4
    164e:	strb.w	r3, [sp, #100]	; 0x64
    1652:	bl	7996 <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    1656:	add	r0, sp, #104	; 0x68
    1658:	bl	e44 <FsBaseFile::isOpen() const>
    165c:	mov	r8, r0
    while(f2=f1.openNextFile())
    165e:	add	r0, sp, #168	; 0xa8
    1660:	bl	edc <FsFile::~FsFile()>
    1664:	cmp.w	r8, #0
    1668:	bne.n	1688 <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    166a:	mov	r2, r5
    166c:	mov	r1, r4
    166e:	mov	r0, r7
    1670:	bl	f98 <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1674:	add	r0, sp, #88	; 0x58
    1676:	bl	edc <FsFile::~FsFile()>
}
    167a:	add	r0, sp, #8
    167c:	bl	edc <FsFile::~FsFile()>
    1680:	add.w	sp, sp, #764	; 0x2fc
    1684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    1688:	add.w	r8, sp, #504	; 0x1f8
    168c:	mov.w	r2, #256	; 0x100
    1690:	add	r0, sp, #104	; 0x68
    1692:	mov	r1, r8
    1694:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1698:	mov	r2, r9
    169a:	mov.w	r1, #256	; 0x100
    169e:	mov	r3, r5
    16a0:	add	r0, sp, #248	; 0xf8
    16a2:	str.w	r8, [sp]
    16a6:	bl	d5cc <snprintf>
    return BaseFile::isDir();
    16aa:	add	r0, sp, #104	; 0x68
    16ac:	bl	e22 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    16b0:	add	r2, sp, #248	; 0xf8
    16b2:	mov	r1, r4
    16b4:	cbz	r0, 16be <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    16b6:	mov	r0, r6
    16b8:	bl	15fc <MTPStorage_SD::removeFile(unsigned long, char*)>
    16bc:	b.n	162e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    16be:	mov	r0, r7
    16c0:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    16c4:	b.n	162e <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    16c6:	mov	r2, r5
    16c8:	mov	r1, r4
    16ca:	mov	r0, r7
    16cc:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    16d0:	b.n	167a <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    16d2:	nop
    16d4:	.word	0x20007e97

000016d8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    16d8:	push	{r4, r5, r6, r7, lr}
    16da:	subw	sp, sp, #1348	; 0x544
    16de:	mov	r4, r0
    16e0:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    16e2:	mov.w	r3, #256	; 0x100
    16e6:	add	r2, sp, #272	; 0x110
    16e8:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    16ec:	mov	r2, r5
    16ee:	mov	r1, r4
    16f0:	add	r0, sp, #528	; 0x210
    16f2:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    16f6:	add	r2, sp, #272	; 0x110
    16f8:	ldrh.w	r1, [sp, #542]	; 0x21e
    16fc:	mov	r0, r4
    16fe:	bl	15fc <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    1702:	movs	r3, #0
    WriteIndexRecord(object, r);
    1704:	add	r2, sp, #528	; 0x210
    1706:	mov	r1, r5
    1708:	mov	r0, r4
    r.name[0]=0;
    170a:	strb.w	r3, [sp, #544]	; 0x220
    WriteIndexRecord(object, r);
    170e:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1712:	ldr	r2, [sp, #528]	; 0x210
    1714:	mov	r1, r4
    1716:	add	r0, sp, #800	; 0x320
    1718:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    171c:	ldr	r6, [sp, #804]	; 0x324
    171e:	cmp	r5, r6
    1720:	bne.n	1736 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1722:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(r.parent, t);
    1724:	add	r2, sp, #800	; 0x320
    1726:	ldr	r1, [sp, #528]	; 0x210
      t.child = r.sibling;
    1728:	str	r3, [sp, #804]	; 0x324
      WriteIndexRecord(is, x);
    172a:	mov	r0, r4
    172c:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1730:	addw	sp, sp, #1348	; 0x544
    1734:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    1736:	mov	r2, r6
    1738:	mov	r1, r4
    173a:	add.w	r0, sp, #1072	; 0x430
    173e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1742:	ldr.w	r7, [sp, #1080]	; 0x438
    1746:	cmp	r5, r7
    1748:	bne.n	1758 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    174a:	ldr	r3, [sp, #536]	; 0x218
      WriteIndexRecord(is, x);
    174c:	add.w	r2, sp, #1072	; 0x430
    1750:	mov	r1, r6
      x.sibling = r.sibling;
    1752:	str.w	r3, [sp, #1080]	; 0x438
      WriteIndexRecord(is, x);
    1756:	b.n	172a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1758:	mov	r2, r7
    175a:	mov	r1, r4
    175c:	mov	r0, sp
    175e:	mov	r6, r7
    1760:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1764:	mov.w	r2, #272	; 0x110
    1768:	mov	r1, sp
    176a:	add.w	r0, sp, #1072	; 0x430
    176e:	bl	9470 <memcpy>
    1772:	b.n	1742 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001774 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1774:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    1776:	adds	r3, r1, #1
    1778:	beq.n	177e <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    177a:	bl	16d8 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    177e:	movs	r0, #1
    1780:	pop	{r3, pc}

00001782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    1782:	push	{r4, r5, r6, lr}
    1784:	add.w	r1, r0, r1, lsl #2
    1788:	sub.w	sp, sp, #2208	; 0x8a0
    178c:	mov	r5, r0
    178e:	mov	r6, r3
    1790:	ldr	r1, [r1, #84]	; 0x54
    1792:	movs	r3, #0
    1794:	mov	r0, sp
    1796:	bl	7ba0 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,FILE_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    179a:	add	r0, sp, #16
    179c:	bl	e44 <FsBaseFile::isOpen() const>
    17a0:	mov	r4, r0
    17a2:	cbnz	r0, 17ba <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    17a4:	movw	r0, #669	; 0x29d
    17a8:	bl	cd0 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    17ac:	mov	r0, sp
    17ae:	bl	edc <FsFile::~FsFile()>
    17b2:	mov	r0, r4
    17b4:	add.w	sp, sp, #2208	; 0x8a0
    17b8:	pop	{r4, r5, r6, pc}
    17ba:	add.w	r5, r5, r6, lsl #2
    17be:	movw	r3, #514	; 0x202
    17c2:	ldr.w	r2, [sp, #2224]	; 0x8b0
    17c6:	add	r0, sp, #80	; 0x50
    17c8:	ldr	r1, [r5, #84]	; 0x54
    17ca:	bl	7ba0 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    17ce:	add	r0, sp, #96	; 0x60
    17d0:	bl	e44 <FsBaseFile::isOpen() const>
    17d4:	mov	r4, r0
    17d6:	cbnz	r0, 17ee <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    17d8:	add	r0, sp, #16
    17da:	bl	796c <FsBaseFile::close()>
    17de:	mov.w	r0, #672	; 0x2a0
    17e2:	bl	cd0 <dbgPrint(unsigned short)>
}
    17e6:	add	r0, sp, #80	; 0x50
    17e8:	bl	edc <FsFile::~FsFile()>
    17ec:	b.n	17ac <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    17ee:	mov.w	r5, #4294967295
    return BaseFile::available();
    17f2:	add	r0, sp, #16
    17f4:	bl	dd2 <FsBaseFile::available() const>
  while(f1.available()>0)
    17f8:	cmp	r0, #0
    17fa:	ble.n	181c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    17fc:	mov.w	r2, #2048	; 0x800
    1800:	add	r1, sp, #160	; 0xa0
    1802:	add	r0, sp, #16
    1804:	bl	e78 <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    1808:	subs	r5, r0, #0
    180a:	blt.n	181c <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    180c:	mov	r2, r5
    180e:	add	r1, sp, #160	; 0xa0
    1810:	add	r0, sp, #96	; 0x60
    1812:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    1816:	cmp.w	r5, #2048	; 0x800
    181a:	bge.n	17f2 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    181c:	add	r0, sp, #16
    181e:	bl	796c <FsBaseFile::close()>
  f2.close();
    1822:	add	r0, sp, #96	; 0x60
    1824:	bl	796c <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    1828:	cmp	r5, #0
    182a:	bge.n	17e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    182c:	mov.w	r0, #684	; 0x2ac
    1830:	movs	r4, #0
    1832:	bl	cd0 <dbgPrint(unsigned short)>
    1836:	b.n	17e6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

00001838 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    1838:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    183c:	sub.w	sp, sp, #1336	; 0x538
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1840:	cmp.w	r3, #4294967295
    1844:	ite	ne
    1846:	movne	r8, r3
    1848:	moveq	r8, r2
  { 
    184a:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    184c:	mov	r2, r1
  { 
    184e:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1850:	mov	r1, r0
    1852:	add	r0, sp, #520	; 0x208
    1854:	add	r6, sp, #536	; 0x218
    1856:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    185a:	mov	r2, r8
    185c:	mov	r1, r4
    185e:	add	r0, sp, #792	; 0x318
    1860:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1864:	ldrb.w	r5, [sp, #532]	; 0x214
    1868:	cbz	r5, 18ae <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    186a:	ldrh.w	r1, [sp, #534]	; 0x216
    186e:	mov	r2, r7
    1870:	mov	r0, r4
    1872:	adds	r1, #1
    1874:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1878:	ldrb.w	r3, [sp, #532]	; 0x214
    187c:	ldr	r2, [r4, #0]
    187e:	mov	r0, r4
    1880:	subs	r3, #0
    1882:	str	r6, [sp, #0]
    1884:	ldrh.w	r1, [sp, #806]	; 0x326
    1888:	ldr	r5, [r2, #44]	; 0x2c
    188a:	it	ne
    188c:	movne	r3, #1
    188e:	mov	r2, r8
    1890:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    1892:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    1894:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    1896:	ldrh.w	r2, [sp, #806]	; 0x326
    189a:	ldr	r6, [r3, #84]	; 0x54
    189c:	mov	r1, r7
    189e:	mov	r3, r0
    18a0:	mov	r0, r4
    18a2:	blx	r6
  }
    18a4:	mov	r0, r5
    18a6:	add.w	sp, sp, #1336	; 0x538
    18aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    18ae:	mov.w	r2, #256	; 0x100
    18b2:	mov	r1, r6
    18b4:	add.w	r0, sp, #1080	; 0x438
    18b8:	bl	da08 <strlcpy>
      r.store = p2.store;
    18bc:	ldrh.w	r3, [sp, #806]	; 0x326
      newHandle = p2.child = AppendIndexRecord(r);
    18c0:	add.w	r1, sp, #1064	; 0x428
    18c4:	mov	r0, r4
      r.store = p2.store;
    18c6:	strh.w	r3, [sp, #1078]	; 0x436
      r.sibling = p2.child;
    18ca:	ldr	r3, [sp, #796]	; 0x31c
      r.child = 0;
    18cc:	str.w	r5, [sp, #1068]	; 0x42c
      r.sibling = p2.child;
    18d0:	str.w	r3, [sp, #1072]	; 0x430
      r.isdir = 0;
    18d4:	strh.w	r5, [sp, #1076]	; 0x434
      r.parent = newParent;
    18d8:	str.w	r8, [sp, #1064]	; 0x428
      newHandle = p2.child = AppendIndexRecord(r);
    18dc:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    18e0:	add	r2, sp, #792	; 0x318
      newHandle = p2.child = AppendIndexRecord(r);
    18e2:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    18e4:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    18e6:	str	r0, [sp, #796]	; 0x31c
      WriteIndexRecord(newParent, p2);
    18e8:	mov	r0, r4
    18ea:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18ee:	add	r2, sp, #8
    18f0:	mov	r1, r7
    18f2:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    18f6:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    18f8:	mov	r0, r4
    18fa:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    18fe:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1900:	mov	r2, r7
    1902:	mov	r1, r5
    1904:	mov.w	r3, #256	; 0x100
    1908:	mov	r0, r4
    190a:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    190e:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1910:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1912:	mov	r1, r6
    1914:	adds	r0, r4, #4
    1916:	str	r7, [sp, #0]
    1918:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    191c:	b.n	18a4 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

0000191e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    191e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1922:	subw	sp, sp, #1612	; 0x64c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1926:	cmp.w	r3, #4294967295
    192a:	ite	ne
    192c:	movne	r7, r3
    192e:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1930:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1932:	mov	r2, r1
    1934:	mov	r1, r0
    1936:	add	r0, sp, #520	; 0x208
    1938:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    193c:	mov	r2, r7
    193e:	mov	r1, r4
    1940:	add	r0, sp, #792	; 0x318
  Record p1=ReadIndexRecord(handle);
    1942:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1946:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1948:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    194c:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    194e:	cbnz	r6, 1966 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1950:	mov	r0, r4
    1952:	add	r2, sp, #792	; 0x318
    1954:	mov	r1, r7
  p2.child=iy;
    1956:	str	r5, [sp, #796]	; 0x31c
  WriteIndexRecord(newHandle,p2);
    1958:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    195c:	movs	r0, #1
    195e:	addw	sp, sp, #1612	; 0x64c
    1962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1966:	mov	r2, r6
    1968:	mov	r1, r4
    196a:	add.w	r0, sp, #1064	; 0x428
    196e:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1972:	mov.w	r2, #272	; 0x110
    1976:	add.w	r1, sp, #1064	; 0x428
    197a:	add.w	r0, sp, #1336	; 0x538
    197e:	bl	9470 <memcpy>
    py.store = p2.store;
    1982:	ldrh.w	r3, [sp, #806]	; 0x326
    iy = AppendIndexRecord(py);
    1986:	add.w	r1, sp, #1336	; 0x538
    198a:	mov	r0, r4
    py.store = p2.store;
    198c:	strh.w	r3, [sp, #1350]	; 0x546
    py.sibling = iy;
    1990:	str.w	r5, [sp, #1344]	; 0x540
    py.parent = newHandle;
    1994:	str.w	r7, [sp, #1336]	; 0x538
    iy = AppendIndexRecord(py);
    1998:	bl	10a6 <MTPStorage_SD::AppendIndexRecord(Record const&)>
    199c:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    199e:	mov.w	r3, #256	; 0x100
    19a2:	add	r2, sp, #8
    19a4:	mov	r1, r6
    19a6:	mov	r0, r4
    19a8:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    19ac:	add	r2, sp, #264	; 0x108
    19ae:	mov.w	r3, #256	; 0x100
    19b2:	mov	r1, r5
    19b4:	mov	r0, r4
    19b6:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    19ba:	ldrb.w	r1, [sp, #1348]	; 0x544
      sd_mkdir(py.store,newfilename);
    19be:	adds	r0, r4, #4
    19c0:	ldrh.w	r3, [sp, #1350]	; 0x546
    if(py.isdir) 
    19c4:	add	r2, sp, #264	; 0x108
    19c6:	cbz	r1, 19f0 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    19c8:	mov	r1, r3
    19ca:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    19ce:	mov	r2, r6
    19d0:	mov	r1, r8
    19d2:	mov	r0, r4
    19d4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    19d8:	ldr	r3, [r4, #0]
    19da:	ldrh.w	r2, [sp, #806]	; 0x326
    19de:	mov	r1, r6
    19e0:	ldr.w	r9, [r3, #84]	; 0x54
    19e4:	mov	r0, r4
    19e6:	mov	r3, r5
    19e8:	blx	r9
    ix = px.sibling;
    19ea:	ldr.w	r6, [sp, #1072]	; 0x430
    19ee:	b.n	194e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    19f0:	str	r2, [sp, #0]
    19f2:	mov	r1, r8
    19f4:	add	r2, sp, #8
    19f6:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    19fa:	b.n	19ea <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

000019fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    19fc:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1a00:	ldr.w	r8, [sp, #32]
    1a04:	mov	r6, r1
    1a06:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a08:	mov	r1, r3
    1a0a:	mov	r2, r8
    1a0c:	str	r3, [sp, #4]
{ // old and new are directory paths
    1a0e:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a10:	bl	ef4 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1a14:	ldr	r3, [sp, #4]
    1a16:	mov	r4, r0
    1a18:	cbz	r0, 1a2e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1a1a:	mov	r2, r7
    1a1c:	mov	r1, r6
    1a1e:	mov	r0, r5
    1a20:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1a24:	add	sp, #8
    1a26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1a2a:	b.w	1a40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1a2e:	movw	r0, #694	; 0x2b6
    1a32:	bl	cd0 <dbgPrint(unsigned short)>
}
    1a36:	mov	r0, r4
    1a38:	add	sp, #8
    1a3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001a40 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1a40:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a44:	mov	r6, r1
    1a46:	sub.w	sp, sp, #680	; 0x2a8
    1a4a:	add.w	r1, r0, r1, lsl #2
    1a4e:	mov	r5, r0
    1a50:	mov	r8, r3
    1a52:	add	r0, sp, #8
    1a54:	movs	r3, #0
    1a56:	ldr	r1, [r1, #84]	; 0x54
    1a58:	mov	r7, r2
    1a5a:	bl	7ba0 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1a5e:	add	r0, sp, #24
    1a60:	bl	e44 <FsBaseFile::isOpen() const>
    1a64:	mov	r4, r0
    1a66:	cmp	r0, #0
    1a68:	beq.n	1b1e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a6a:	ldr	r4, [pc, #264]	; (1b74 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1a6c:	mov.w	r2, #256	; 0x100
    1a70:	mov	r1, r7
    1a72:	add	r0, sp, #168	; 0xa8
    1a74:	bl	da08 <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1a78:	add	r0, sp, #168	; 0xa8
    1a7a:	bl	e0c0 <strlen>
    1a7e:	add	r3, sp, #168	; 0xa8
    1a80:	add	r0, r3
    1a82:	ldrb.w	r3, [r0, #-1]
    1a86:	cmp	r3, #47	; 0x2f
    1a88:	beq.n	1a96 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1a8a:	mov.w	r2, #256	; 0x100
    1a8e:	mov	r1, r4
    1a90:	add	r0, sp, #168	; 0xa8
    1a92:	bl	d9a0 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1a96:	mov.w	r2, #256	; 0x100
    1a9a:	ldr	r1, [sp, #704]	; 0x2c0
    1a9c:	add	r0, sp, #424	; 0x1a8
    1a9e:	bl	da08 <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1aa2:	add	r0, sp, #424	; 0x1a8
    1aa4:	bl	e0c0 <strlen>
    1aa8:	add	r3, sp, #424	; 0x1a8
    1aaa:	add	r0, r3
    1aac:	ldrb.w	r3, [r0, #-1]
    1ab0:	cmp	r3, #47	; 0x2f
    1ab2:	beq.n	1ac0 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1ab4:	mov.w	r2, #256	; 0x100
    1ab8:	mov	r1, r4
    1aba:	add	r0, sp, #424	; 0x1a8
    1abc:	bl	d9a0 <strlcat>
    FsFile tmpFile;
    1ac0:	add	r0, sp, #88	; 0x58
    1ac2:	bl	ec0 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1ac6:	movs	r2, #0
    1ac8:	add	r1, sp, #24
    1aca:	add	r0, sp, #104	; 0x68
    1acc:	bl	7a6c <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1ad0:	add	r0, sp, #104	; 0x68
    1ad2:	bl	e44 <FsBaseFile::isOpen() const>
    1ad6:	cmp	r0, #0
    1ad8:	beq.n	1b5e <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1ada:	mov.w	r2, #256	; 0x100
    1ade:	add	r1, sp, #168	; 0xa8
    1ae0:	add	r0, sp, #104	; 0x68
    1ae2:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1ae6:	mov.w	r2, #256	; 0x100
    1aea:	add	r1, sp, #424	; 0x1a8
    1aec:	add	r0, sp, #104	; 0x68
    1aee:	bl	c6e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1af2:	add	r0, sp, #104	; 0x68
    1af4:	bl	e22 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1af8:	add	r3, sp, #424	; 0x1a8
    1afa:	add	r2, sp, #168	; 0xa8
    1afc:	mov	r1, r6
    1afe:	str	r3, [sp, #0]
    1b00:	mov	r3, r8
        if(f2.isDirectory())
    1b02:	cbz	r0, 1b36 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b04:	mov	r0, r5
    1b06:	bl	19fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1b0a:	cbnz	r0, 1b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b0c:	movw	r0, #717	; 0x2cd
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b10:	bl	cd0 <dbgPrint(unsigned short)>
    }
    1b14:	add	r0, sp, #88	; 0x58
    1b16:	movs	r4, #0
    1b18:	bl	edc <FsFile::~FsFile()>
    1b1c:	b.n	1b26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b1e:	movw	r0, #697	; 0x2b9
    1b22:	bl	cd0 <dbgPrint(unsigned short)>
}
    1b26:	add	r0, sp, #8
    1b28:	bl	edc <FsFile::~FsFile()>
    1b2c:	mov	r0, r4
    1b2e:	add.w	sp, sp, #680	; 0x2a8
    1b32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1b36:	mov	r0, r5
    1b38:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b3c:	cbnz	r0, 1b44 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1b3e:	movw	r0, #721	; 0x2d1
    1b42:	b.n	1b10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1b44:	add	r2, sp, #168	; 0xa8
    1b46:	mov	r1, r6
    1b48:	mov	r0, r5
    1b4a:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    1b4e:	cbnz	r0, 1b56 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1b50:	movw	r0, #722	; 0x2d2
    1b54:	b.n	1b10 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1b56:	add	r0, sp, #88	; 0x58
    1b58:	bl	edc <FsFile::~FsFile()>
    1b5c:	b.n	1a6c <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1b5e:	add	r0, sp, #88	; 0x58
    1b60:	bl	edc <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1b64:	mov	r2, r7
    1b66:	mov	r1, r6
    1b68:	mov	r0, r5
    1b6a:	bl	f98 <mSD_Base::sd_rmdir(unsigned long, char*)>
    1b6e:	mov	r4, r0
    1b70:	b.n	1b26 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1b72:	nop
    1b74:	.word	0x20007b97

00001b78 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1b78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b7c:	subw	sp, sp, #2700	; 0xa8c
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1b80:	cmp.w	r3, #4294967295
    1b84:	ite	ne
    1b86:	movne	r7, r3
    1b88:	moveq	r7, r2
  { 
    1b8a:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1b8c:	mov	r2, r1
  { 
    1b8e:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1b90:	mov	r1, r0
    1b92:	add	r0, sp, #792	; 0x318
    1b94:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1b98:	mov	r2, r7
    1b9a:	mov	r1, r4
    1b9c:	add.w	r0, sp, #1064	; 0x428
    1ba0:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1ba4:	ldr	r2, [sp, #792]	; 0x318
    1ba6:	mov	r1, r4
    1ba8:	add.w	r0, sp, #1336	; 0x538
    1bac:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1bb0:	ldrb.w	r3, [sp, #804]	; 0x324
    1bb4:	cbz	r3, 1bd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1bb6:	ldrb.w	r3, [sp, #805]	; 0x325
    1bba:	cbnz	r3, 1bd2 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1bbc:	mov	r2, r5
    1bbe:	ldrh.w	r1, [sp, #806]	; 0x326
    1bc2:	mov	r0, r4
    1bc4:	bl	147a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1bc8:	add	r2, sp, #792	; 0x318
    1bca:	mov	r1, r5
    1bcc:	mov	r0, r4
    1bce:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1bd2:	mov.w	r2, #272	; 0x110
    1bd6:	add	r1, sp, #792	; 0x318
    1bd8:	add.w	r0, sp, #1608	; 0x648
    1bdc:	bl	9470 <memcpy>
    Record p2o = p2;
    1be0:	mov.w	r2, #272	; 0x110
    1be4:	add.w	r1, sp, #1064	; 0x428
    1be8:	add.w	r0, sp, #1880	; 0x758
    1bec:	bl	9470 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1bf0:	mov.w	r3, #256	; 0x100
    1bf4:	add	r2, sp, #280	; 0x118
    1bf6:	mov	r1, r5
    1bf8:	mov	r0, r4
    1bfa:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1bfe:	ldr.w	r8, [sp, #1340]	; 0x53c
    1c02:	cmp	r8, r5
    1c04:	bne.n	1c7c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1c06:	ldr	r3, [sp, #800]	; 0x320
    uint32_t jx=-1;
    1c08:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1c0c:	add.w	r2, sp, #1336	; 0x538
    1c10:	ldr	r1, [sp, #792]	; 0x318
    1c12:	mov	r0, r4
        p3.child = p1.sibling;
    1c14:	str.w	r3, [sp, #1340]	; 0x53c
        WriteIndexRecord(p1.parent, p3);    
    1c18:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1c1c:	ldrh.w	r3, [sp, #1078]	; 0x436
      WriteIndexRecord(handle, p1);
    1c20:	add	r2, sp, #792	; 0x318
    1c22:	mov	r1, r5
    1c24:	mov	r0, r4
      p1.store = p2.store;
    1c26:	strh.w	r3, [sp, #806]	; 0x326
      p1.sibling = p2.child;
    1c2a:	ldr.w	r3, [sp, #1068]	; 0x42c
      p1.parent = newParent;
    1c2e:	str	r7, [sp, #792]	; 0x318
      p1.sibling = p2.child;
    1c30:	str	r3, [sp, #800]	; 0x320
      p2.child = handle;
    1c32:	str.w	r5, [sp, #1068]	; 0x42c
      WriteIndexRecord(handle, p1);
    1c36:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1c3a:	add.w	r2, sp, #1064	; 0x428
    1c3e:	mov	r1, r7
    1c40:	mov	r0, r4
    1c42:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1c46:	mov.w	r3, #256	; 0x100
    1c4a:	mov	r1, r5
    1c4c:	add	r2, sp, #536	; 0x218
    1c4e:	mov	r0, r4
    1c50:	bl	1240 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1c54:	ldrh.w	r1, [sp, #1622]	; 0x656
    1c58:	ldrh.w	r3, [sp, #1894]	; 0x766
    1c5c:	cmp	r1, r3
    1c5e:	bne.n	1d0c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1c60:	add.w	r3, r4, r1, lsl #2
    1c64:	add	r2, sp, #536	; 0x218
    1c66:	add	r1, sp, #280	; 0x118
    1c68:	ldr	r0, [r3, #88]	; 0x58
    1c6a:	bl	d72 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1c6e:	cbz	r0, 1cdc <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1c70:	movs	r6, #1
  }
    1c72:	mov	r0, r6
    1c74:	addw	sp, sp, #2700	; 0xa8c
    1c78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1c7c:	mov	r2, r8
    1c7e:	mov	r1, r4
    1c80:	add	r0, sp, #8
    1c82:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1c86:	mov.w	r2, #272	; 0x110
    1c8a:	add	r1, sp, #8
    1c8c:	addw	r0, sp, #2424	; 0x978
    1c90:	bl	9470 <memcpy>
        pxo = px;
    1c94:	mov.w	r2, #272	; 0x110
    1c98:	addw	r1, sp, #2424	; 0x978
    1c9c:	addw	r0, sp, #2152	; 0x868
    1ca0:	bl	9470 <memcpy>
        while(handle != px.sibling)
    1ca4:	ldr.w	r6, [sp, #2432]	; 0x980
    1ca8:	cmp	r6, r5
    1caa:	bne.n	1cc0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1cac:	ldr	r3, [sp, #800]	; 0x320
        WriteIndexRecord(jx, px);
    1cae:	addw	r2, sp, #2424	; 0x978
    1cb2:	mov	r1, r8
    1cb4:	mov	r0, r4
        px.sibling = p1.sibling;
    1cb6:	str.w	r3, [sp, #2432]	; 0x980
        WriteIndexRecord(jx, px);
    1cba:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1cbe:	b.n	1c1c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1cc0:	mov	r2, r6
    1cc2:	mov	r1, r4
    1cc4:	add	r0, sp, #8
    1cc6:	mov	r8, r6
    1cc8:	bl	1124 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1ccc:	mov.w	r2, #272	; 0x110
    1cd0:	add	r1, sp, #8
    1cd2:	addw	r0, sp, #2424	; 0x978
    1cd6:	bl	9470 <memcpy>
          pxo = px;
    1cda:	b.n	1c94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1cdc:	movw	r0, #558	; 0x22e
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1ce0:	bl	cd0 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1ce4:	addw	r2, sp, #2152	; 0x868
    1ce8:	mov	r1, r8
    1cea:	mov	r0, r4
    1cec:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1cf0:	add.w	r2, sp, #1608	; 0x648
    1cf4:	mov	r1, r5
    1cf6:	mov	r0, r4
    1cf8:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1cfc:	add.w	r2, sp, #1880	; 0x758
    1d00:	mov	r1, r7
    1d02:	mov	r0, r4
    return false;
    1d04:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1d06:	bl	107a <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1d0a:	b.n	1c72 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1d0c:	ldrb.w	r2, [sp, #1620]	; 0x654
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d10:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1d14:	cbnz	r2, 1d3a <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1d16:	add	r2, sp, #536	; 0x218
    1d18:	mov	r0, r9
    1d1a:	str	r2, [sp, #0]
    1d1c:	add	r2, sp, #280	; 0x118
    1d1e:	bl	1782 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1d22:	mov	r6, r0
    1d24:	cbz	r0, 1d34 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1d26:	add	r2, sp, #280	; 0x118
    1d28:	ldrh.w	r1, [sp, #1894]	; 0x766
    1d2c:	mov	r0, r9
    1d2e:	bl	f34 <mSD_Base::sd_remove(unsigned long, char const*)>
    1d32:	b.n	1c72 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1d34:	movw	r0, #562	; 0x232
    1d38:	b.n	1ce0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d3a:	add	r2, sp, #536	; 0x218
    1d3c:	mov	r0, r9
    1d3e:	str	r2, [sp, #0]
    1d40:	add	r2, sp, #280	; 0x118
    1d42:	bl	19fc <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1d46:	cmp	r0, #0
    1d48:	bne.n	1c70 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1d4a:	movw	r0, #566	; 0x236
    1d4e:	b.n	1ce0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001d50 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1d50:	push	{r4, r5, r6, lr}
    1d52:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1d56:	ldr	r4, [pc, #60]	; (1d94 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1d58:	ldr	r0, [r5, #88]	; 0x58
    1d5a:	bl	d3e <FsVolume::clusterCount() const>
    1d5e:	mov	r1, r0
    1d60:	mov	r0, r4
    1d62:	bl	c94 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1d66:	ldr	r0, [r5, #88]	; 0x58
    1d68:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d6c:	mov	r1, r0
    1d6e:	mov	r0, r4
    1d70:	bl	c94 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1d74:	ldr	r6, [r5, #88]	; 0x58
    1d76:	mov	r0, r6
    1d78:	bl	d3e <FsVolume::clusterCount() const>
    1d7c:	mov	r4, r0
    1d7e:	mov	r0, r6
    1d80:	bl	4a4 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1d84:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1d86:	ldr	r0, [r5, #88]	; 0x58
    1d88:	bl	d20 <FsVolume::bytesPerCluster() const>
    1d8c:	umull	r0, r1, r4, r0
    1d90:	pop	{r4, r5, r6, pc}
    1d92:	nop
    1d94:	.word	0x20008944

00001d98 <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1d98:	push	{r4, lr}
    1d9a:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1d9c:	bl	b55e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1da0:	mov	r0, r4
    1da2:	ldmia.w	sp!, {r4, lr}
    1da6:	b.w	b570 <Print::println()>

00001daa <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1daa:	push	{r4, lr}
    1dac:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1dae:	movs	r3, #0
    1db0:	movs	r2, #10
    1db2:	bl	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    1db6:	mov	r0, r4
    1db8:	ldmia.w	sp!, {r4, lr}
    1dbc:	b.w	b570 <Print::println()>

00001dc0 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1dc0:	push	{r0, r1, r4, lr}
    1dc2:	mov	r4, r0
    1dc4:	cbz	r1, 1de0 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1dc6:	mov	r0, r1
    1dc8:	str	r1, [sp, #4]
    1dca:	bl	e0c0 <strlen>
    1dce:	ldr	r3, [r4, #0]
    1dd0:	mov	r2, r0
    1dd2:	ldr	r1, [sp, #4]
    1dd4:	ldr	r3, [r3, #4]
    1dd6:	mov	r0, r4
    1dd8:	add	sp, #8
    1dda:	ldmia.w	sp!, {r4, lr}
    1dde:	bx	r3
    1de0:	add	sp, #8
    1de2:	pop	{r4, pc}

00001de4 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1de4:	b.w	1dc0 <Print::write(char const*) [clone .isra.0]>

00001de8 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1de8:	push	{r4, lr}
    1dea:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1dec:	bl	1dc0 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1df0:	mov	r0, r4
    1df2:	ldmia.w	sp!, {r4, lr}
    1df6:	b.w	b570 <Print::println()>
	...

00001dfc <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1dfc:	push	{r4, lr}
        virtual int available() { return usb_serial_available(); }
    1dfe:	bl	9958 <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1e02:	cmp	r0, #0
    1e04:	beq.n	1dfe <menuGetLine()+0x2>
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1e06:	ldr	r4, [pc, #28]	; (1e24 <menuGetLine()+0x28>)
    1e08:	movs	r3, #40	; 0x28
    1e0a:	movs	r1, #13
    1e0c:	ldr	r0, [pc, #24]	; (1e28 <menuGetLine()+0x2c>)
    1e0e:	mov	r2, r4
    1e10:	bl	b4b8 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1e14:	movs	r3, #0
  Serial.println(buffer);
    1e16:	mov	r1, r4
  buffer[count]=0;
    1e18:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1e1a:	ldr	r0, [pc, #12]	; (1e28 <menuGetLine()+0x2c>)
    1e1c:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1e20:	mov	r0, r4
    1e22:	pop	{r4, pc}
    1e24:	.word	0x200282da
    1e28:	.word	0x20008944

00001e2c <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1e2c:	push	{r0, r1, r4, lr}
    1e2e:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e30:	bl	1dfc <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1e34:	add	r2, sp, #4
    1e36:	ldr	r1, [pc, #12]	; (1e44 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1e38:	bl	d694 <sscanf>
    1e3c:	ldr	r3, [sp, #4]
    1e3e:	str	r3, [r4, #0]
  return 1;
}
    1e40:	add	sp, #8
    1e42:	pop	{r4, pc}
    1e44:	.word	0x20007f3c

00001e48 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1e48:	push	{r0, r1, r4, lr}
    1e4a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1e4c:	bl	1dfc <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1e50:	add	r2, sp, #4
    1e52:	ldr	r1, [pc, #12]	; (1e60 <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1e54:	bl	d694 <sscanf>
    1e58:	ldr	r3, [sp, #4]
    1e5a:	strh	r3, [r4, #0]
}
    1e5c:	add	sp, #8
    1e5e:	pop	{r4, pc}
    1e60:	.word	0x20007f3c

00001e64 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1e64:	push	{r4, lr}
    1e66:	sub	sp, #32
    1e68:	bl	9958 <usb_serial_available>

    while(!Serial.available()) ;
    1e6c:	cmp	r0, #0
    1e6e:	beq.n	1e68 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1e70:	bl	99cc <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1e74:	uxtb	r0, r0
    if(ch=='d') // set date
    1e76:	cmp	r0, #100	; 0x64
    1e78:	bne.n	1ea6 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1e7a:	bl	1dfc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1e7e:	add	r3, sp, #28
    1e80:	add	r2, sp, #20
    1e82:	ldr	r1, [pc, #308]	; (1fb8 <menu3()+0x154>)
    1e84:	str	r3, [sp, #8]
    1e86:	add.w	r3, sp, #19
    1e8a:	str	r3, [sp, #4]
    1e8c:	add	r3, sp, #24
    1e8e:	str	r3, [sp, #0]
    1e90:	add.w	r3, sp, #18
    1e94:	bl	d694 <sscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1e98:	ldr	r0, [sp, #20]
    1e9a:	ldrd	r1, r2, [sp, #24]
    1e9e:	bl	3494 <rtcSetDate(int, int, int)>
    }
    else if(ch=='4')
    { 
      menuGetInt16((int16_t *)&t_4);
    }
}
    1ea2:	add	sp, #32
    1ea4:	pop	{r4, pc}
    else if(ch=='t') // set time
    1ea6:	cmp	r0, #52	; 0x34
    1ea8:	bhi.n	1ebc <menu3()+0x58>
    1eaa:	cmp	r0, #48	; 0x30
    1eac:	bls.n	1ea2 <menu3()+0x3e>
    1eae:	subs	r0, #50	; 0x32
    1eb0:	cmp	r0, #2
    1eb2:	bhi.n	1fa6 <menu3()+0x142>
    1eb4:	tbb	[pc, r0]
    1eb8:	.short	0x7b79
    1eba:	.byte	0x7d
    1ebb:	.byte	0x00
    1ebc:	subs	r0, #97	; 0x61
    1ebe:	uxtb	r3, r0
    1ec0:	cmp	r3, #22
    1ec2:	bhi.n	1ea2 <menu3()+0x3e>
    1ec4:	cmp	r0, #22
    1ec6:	bhi.n	1ea2 <menu3()+0x3e>
    1ec8:	add	r3, pc, #4	; (adr r3, 1ed0 <menu3()+0x6c>)
    1eca:	ldr.w	pc, [r3, r0, lsl #2]
    1ece:	nop
    1ed0:	.word	0x00001f57
    1ed4:	.word	0x00001ea3
    1ed8:	.word	0x00001f93
    1edc:	.word	0x00001ea3
    1ee0:	.word	0x00001ea3
    1ee4:	.word	0x00001f6b
    1ee8:	.word	0x00001f9f
    1eec:	.word	0x00001ea3
    1ef0:	.word	0x00001ea3
    1ef4:	.word	0x00001ea3
    1ef8:	.word	0x00001ea3
    1efc:	.word	0x00001ea3
    1f00:	.word	0x00001ea3
    1f04:	.word	0x00001ea3
    1f08:	.word	0x00001f63
    1f0c:	.word	0x00001ea3
    1f10:	.word	0x00001ea3
    1f14:	.word	0x00001f67
    1f18:	.word	0x00001f7f
    1f1c:	.word	0x00001f2d
    1f20:	.word	0x00001ea3
    1f24:	.word	0x00001ea3
    1f28:	.word	0x00001fa3
{ char *buffer=menuGetLine();
    1f2c:	bl	1dfc <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f30:	add	r3, sp, #28
    1f32:	add	r2, sp, #20
    1f34:	ldr	r1, [pc, #128]	; (1fb8 <menu3()+0x154>)
    1f36:	str	r3, [sp, #8]
    1f38:	add.w	r3, sp, #19
    1f3c:	str	r3, [sp, #4]
    1f3e:	add	r3, sp, #24
    1f40:	str	r3, [sp, #0]
    1f42:	add.w	r3, sp, #18
    1f46:	bl	d694 <sscanf>
      rtcSetTime(hour,minutes,seconds);
    1f4a:	ldr	r0, [sp, #20]
    1f4c:	ldrd	r1, r2, [sp, #24]
    1f50:	bl	34b8 <rtcSetTime(int, int, int)>
    1f54:	b.n	1ea2 <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    1f56:	ldr	r0, [pc, #100]	; (1fbc <menu3()+0x158>)
}
    1f58:	add	sp, #32
    1f5a:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    1f5e:	b.w	1e2c <menuGetInt32(long*) [clone .isra.0]>
    1f62:	ldr	r0, [pc, #92]	; (1fc0 <menu3()+0x15c>)
    1f64:	b.n	1f58 <menu3()+0xf4>
      menuGetInt32((int32_t *)&t_rep);
    1f66:	ldr	r0, [pc, #92]	; (1fc4 <menu3()+0x160>)
    1f68:	b.n	1f58 <menu3()+0xf4>
      menuGetInt32((int32_t *)&fsamp);
    1f6a:	ldr	r4, [pc, #92]	; (1fc8 <menu3()+0x164>)
    1f6c:	mov	r0, r4
    1f6e:	bl	1e2c <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    1f72:	ldr	r0, [r4, #0]
}
    1f74:	add	sp, #32
    1f76:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    1f7a:	b.w	bf8 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    1f7e:	ldr	r4, [pc, #76]	; (1fcc <menu3()+0x168>)
    1f80:	mov	r0, r4
    1f82:	bl	1e48 <menuGetInt16(short*) [clone .isra.0]>
    1f86:	ldrh	r3, [r4, #0]
    1f88:	lsls	r3, r3, #16
    1f8a:	bpl.n	1ea2 <menu3()+0x3e>
    1f8c:	movs	r3, #0
    1f8e:	strh	r3, [r4, #0]
    1f90:	b.n	1ea2 <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    1f92:	ldr	r0, [pc, #60]	; (1fd0 <menu3()+0x16c>)
}
    1f94:	add	sp, #32
    1f96:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&t_4);
    1f9a:	b.w	1e48 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    1f9e:	ldr	r0, [pc, #52]	; (1fd4 <menu3()+0x170>)
    1fa0:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&store[0]);
    1fa2:	ldr	r0, [pc, #52]	; (1fd8 <menu3()+0x174>)
    1fa4:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_1);
    1fa6:	ldr	r0, [pc, #52]	; (1fdc <menu3()+0x178>)
    1fa8:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_2);
    1faa:	ldr	r0, [pc, #52]	; (1fe0 <menu3()+0x17c>)
    1fac:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_3);
    1fae:	ldr	r0, [pc, #52]	; (1fe4 <menu3()+0x180>)
    1fb0:	b.n	1f94 <menu3()+0x130>
      menuGetInt16((int16_t *)&t_4);
    1fb2:	ldr	r0, [pc, #52]	; (1fe8 <menu3()+0x184>)
    1fb4:	b.n	1f94 <menu3()+0x130>
    1fb6:	nop
    1fb8:	.word	0x20007ddc
    1fbc:	.word	0x20008f0c
    1fc0:	.word	0x20008f10
    1fc4:	.word	0x20008f14
    1fc8:	.word	0x20008ef0
    1fcc:	.word	0x200281ba
    1fd0:	.word	0x20028194
    1fd4:	.word	0x2002818c
    1fd8:	.word	0x20028168
    1fdc:	.word	0x20028148
    1fe0:	.word	0x20008f00
    1fe4:	.word	0x20008f04
    1fe8:	.word	0x20008f08

00001fec <saveParameters()>:
//    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
}

void saveParameters(void)
{
  store[1]  = t_acq;
    1fec:	ldr	r3, [pc, #92]	; (204c <saveParameters()+0x60>)
  store[6]  = shift;
  store[7]  = t_1;
  store[8]  = t_2;
  store[9]  = t_3;
  store[10] = t_4;
  store[11] = fsamp/1000;
    1fee:	mov.w	r1, #1000	; 0x3e8
  store[1]  = t_acq;
    1ff2:	ldr	r2, [r3, #0]
    1ff4:	ldr	r3, [pc, #88]	; (2050 <saveParameters()+0x64>)
    1ff6:	strh	r2, [r3, #2]
  store[2]  = t_on;
    1ff8:	ldr	r2, [pc, #88]	; (2054 <saveParameters()+0x68>)
    1ffa:	ldr	r2, [r2, #0]
    1ffc:	strh	r2, [r3, #4]
  store[3]  = t_off;
    1ffe:	ldr	r2, [pc, #88]	; (2058 <saveParameters()+0x6c>)
    2000:	ldr	r2, [r2, #0]
    2002:	strh	r2, [r3, #6]
  store[4]  = t_rep;
    2004:	ldr	r2, [pc, #84]	; (205c <saveParameters()+0x70>)
    2006:	ldr	r2, [r2, #0]
    2008:	strh	r2, [r3, #8]
  store[5]  = proc;
    200a:	ldr	r2, [pc, #84]	; (2060 <saveParameters()+0x74>)
    200c:	ldrh	r2, [r2, #0]
    200e:	strh	r2, [r3, #10]
  store[6]  = shift;
    2010:	ldr	r2, [pc, #80]	; (2064 <saveParameters()+0x78>)
    2012:	ldrh	r2, [r2, #0]
    2014:	strh	r2, [r3, #12]
  store[7]  = t_1;
    2016:	ldr	r2, [pc, #80]	; (2068 <saveParameters()+0x7c>)
    2018:	ldr	r2, [r2, #0]
    201a:	strh	r2, [r3, #14]
  store[8]  = t_2;
    201c:	ldr	r2, [pc, #76]	; (206c <saveParameters()+0x80>)
    201e:	ldr	r2, [r2, #0]
    2020:	strh	r2, [r3, #16]
  store[9]  = t_3;
    2022:	ldr	r2, [pc, #76]	; (2070 <saveParameters()+0x84>)
    2024:	ldr	r2, [r2, #0]
    2026:	strh	r2, [r3, #18]
  store[10] = t_4;
    2028:	ldr	r2, [pc, #72]	; (2074 <saveParameters()+0x88>)
    202a:	ldr	r2, [r2, #0]
    202c:	strh	r2, [r3, #20]
  store[11] = fsamp/1000;
    202e:	ldr	r2, [pc, #72]	; (2078 <saveParameters()+0x8c>)
    2030:	ldr	r2, [r2, #0]
    2032:	sdiv	r2, r2, r1
    2036:	strh	r2, [r3, #22]
  store[12] = again;
    2038:	ldr	r2, [pc, #64]	; (207c <saveParameters()+0x90>)
    203a:	ldrh	r2, [r2, #0]
    203c:	strh	r2, [r3, #24]
  store[13] = dgain;
    203e:	ldr	r2, [pc, #64]	; (2080 <saveParameters()+0x94>)
    2040:	ldrh	r2, [r2, #0]
    2042:	strh	r2, [r3, #26]
  store[14] = 0;
    2044:	movs	r2, #0
    2046:	strh	r2, [r3, #28]
  store[15] = 0;
    2048:	strh	r2, [r3, #30]

  storeConfig(store, 16);
}
    204a:	bx	lr
    204c:	.word	0x20008f0c
    2050:	.word	0x20028168
    2054:	.word	0x20008f10
    2058:	.word	0x2002814c
    205c:	.word	0x20008f14
    2060:	.word	0x20028194
    2064:	.word	0x200281ba
    2068:	.word	0x20028148
    206c:	.word	0x20008f00
    2070:	.word	0x20008f04
    2074:	.word	0x20008f08
    2078:	.word	0x20008ef0
    207c:	.word	0x2002818c
    2080:	.word	0x2002818e

00002084 <menu1(short)>:
{   // have ':'
    2084:	push	{r4, lr}
    2086:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2088:	bl	9958 <usb_serial_available>
    while(!Serial.available()) ;
    208c:	cmp	r0, #0
    208e:	beq.n	2088 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    2090:	bl	99cc <usb_serial_getchar>
    ch=Serial.read();
    2094:	uxtb	r3, r0
    if(ch=='w') 
    2096:	cmp	r3, #119	; 0x77
    2098:	bne.n	20aa <menu1(short)+0x26>
    { Serial.println("Save parameters");
    209a:	ldr	r1, [pc, #28]	; (20b8 <menu1(short)+0x34>)
    209c:	ldr	r0, [pc, #28]	; (20bc <menu1(short)+0x38>)
    209e:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
      saveParameters();
    20a2:	bl	1fec <saveParameters()>
}
    20a6:	mov	r0, r4
    20a8:	pop	{r4, pc}
    else if(ch=='m') 
    20aa:	cmp	r3, #109	; 0x6d
    20ac:	bne.n	20a6 <menu1(short)+0x22>
    { menuGetInt16((int16_t *)&monitor);
    20ae:	ldr	r0, [pc, #16]	; (20c0 <menu1(short)+0x3c>)
    20b0:	bl	1e48 <menuGetInt16(short*) [clone .isra.0]>
    20b4:	b.n	20a6 <menu1(short)+0x22>
    20b6:	nop
    20b8:	.word	0x20007c97
    20bc:	.word	0x20008944
    20c0:	.word	0x20028192

000020c4 <loadParameters()>:

uint16_t *loadParameters(void)
{
  loadConfig(store,16);
  if(store[0]==1)
    20c4:	ldr	r3, [pc, #220]	; (21a4 <loadParameters()+0xe0>)
    20c6:	ldr.w	ip, [pc, #260]	; 21cc <loadParameters()+0x108>
    20ca:	ldrh	r2, [r3, #0]
    20cc:	ldr	r1, [pc, #216]	; (21a8 <loadParameters()+0xe4>)
    20ce:	cmp	r2, #1
    20d0:	ldr	r0, [pc, #216]	; (21ac <loadParameters()+0xe8>)
{
    20d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20d6:	ldr.w	sl, [pc, #248]	; 21d0 <loadParameters()+0x10c>
    20da:	ldr.w	lr, [pc, #248]	; 21d4 <loadParameters()+0x110>
    20de:	ldr.w	r8, [pc, #248]	; 21d8 <loadParameters()+0x114>
    20e2:	ldr	r7, [pc, #204]	; (21b0 <loadParameters()+0xec>)
    20e4:	ldr	r6, [pc, #204]	; (21b4 <loadParameters()+0xf0>)
    20e6:	ldr	r5, [pc, #208]	; (21b8 <loadParameters()+0xf4>)
    20e8:	ldr	r4, [pc, #208]	; (21bc <loadParameters()+0xf8>)
  if(store[0]==1)
    20ea:	bne.n	2146 <loadParameters()+0x82>
  {
    t_acq   = store[1];
    20ec:	ldrh	r2, [r3, #2]
    t_on    = store[2];
    20ee:	ldrh.w	r9, [r3, #4]
    t_acq   = store[1];
    20f2:	str.w	r2, [sl]
    t_on    = store[2];
    20f6:	ldr	r2, [pc, #200]	; (21c0 <loadParameters()+0xfc>)
    20f8:	str.w	r9, [r2]
    t_off   = store[3];
    20fc:	ldrh	r2, [r3, #6]
    20fe:	str.w	r2, [lr]
    t_rep   = store[4];
    2102:	ldrh	r2, [r3, #8]
    2104:	str.w	r2, [r8]
    proc    = store[5];
    2108:	ldrsh.w	r2, [r3, #10]
    210c:	strh.w	r2, [ip]
    shift   = store[6];
    2110:	ldrsh.w	r2, [r3, #12]
    2114:	strh	r2, [r7, #0]
    t_1     = store[7];
    2116:	ldrh	r2, [r3, #14]
    2118:	str	r2, [r1, #0]
    t_2     = store[8];
    t_3     = store[9];
    t_4     = store[10];
    fsamp   = store[11]*1000;
    211a:	mov.w	r1, #1000	; 0x3e8
    t_2     = store[8];
    211e:	ldrh	r2, [r3, #16]
    2120:	str	r2, [r6, #0]
    t_3     = store[9];
    2122:	ldrh	r2, [r3, #18]
    2124:	str	r2, [r5, #0]
    t_4     = store[10];
    2126:	ldrh	r2, [r3, #20]
    2128:	str	r2, [r4, #0]
    fsamp   = store[11]*1000;
    212a:	ldrh	r2, [r3, #22]
    212c:	muls	r2, r1
    again   = store[12];
    212e:	ldrsh.w	r1, [r3, #24]
    fsamp   = store[11]*1000;
    2132:	str	r2, [r0, #0]
    again   = store[12];
    2134:	ldr	r2, [pc, #140]	; (21c4 <loadParameters()+0x100>)
    2136:	strh	r1, [r2, #0]
    dgain   = store[13];
    2138:	ldrsh.w	r2, [r3, #26]
    213c:	ldr	r3, [pc, #136]	; (21c8 <loadParameters()+0x104>)
    213e:	strh	r2, [r3, #0]
    store[13] = dgain    = DGAIN;
    store[14] = 0;
    store[15] = 0; 
  }
  return store;
}
    2140:	ldr	r0, [pc, #96]	; (21a4 <loadParameters()+0xe0>)
    2142:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[0]  = 0;
    2146:	movs	r2, #0
    store[1]  = t_acq    = T_ACQ;
    2148:	mov.w	r9, #60	; 0x3c
    214c:	str.w	r9, [sl]
    store[3]  = t_off    = T_OFF;
    2150:	str.w	r2, [lr]
    store[4]  = t_rep    = T_REP;
    2154:	mov.w	lr, #600	; 0x258
    store[0]  = 0;
    2158:	strh	r2, [r3, #0]
    store[4]  = t_rep    = T_REP;
    215a:	str.w	lr, [r8]
    store[5]  = proc     = PROC_MODE;
    215e:	strh.w	r2, [ip]
    store[6]  = shift    = SHIFT;
    2162:	strh	r2, [r7, #0]
    store[7]  = t_1      = T_1;
    2164:	str	r2, [r1, #0]
    store[8]  = t_2      = T_2;
    2166:	movs	r1, #12
    store[1]  = t_acq    = T_ACQ;
    2168:	strh.w	r9, [r3, #2]
    store[8]  = t_2      = T_2;
    216c:	str	r1, [r6, #0]
    216e:	strh	r1, [r3, #16]
    store[9]  = t_3      = T_3;
    2170:	str	r1, [r5, #0]
    2172:	strh	r1, [r3, #18]
    store[10] = t_4      = T_4;
    2174:	movs	r1, #24
    store[3]  = t_off    = T_OFF;
    2176:	strh	r2, [r3, #6]
    store[10] = t_4      = T_4;
    2178:	str	r1, [r4, #0]
    217a:	strh	r1, [r3, #20]
    store[11] = (fsamp   = FSAMP)/1000; 
    217c:	movw	r1, #48000	; 0xbb80
    store[4]  = t_rep    = T_REP;
    2180:	strh.w	lr, [r3, #8]
    store[11] = (fsamp   = FSAMP)/1000; 
    2184:	str	r1, [r0, #0]
    2186:	movs	r1, #48	; 0x30
    store[12] = again    = AGAIN;
    2188:	ldr	r0, [pc, #56]	; (21c4 <loadParameters()+0x100>)
    store[11] = (fsamp   = FSAMP)/1000; 
    218a:	strh	r1, [r3, #22]
    store[12] = again    = AGAIN;
    218c:	movs	r1, #10
    store[5]  = proc     = PROC_MODE;
    218e:	strh	r2, [r3, #10]
    store[12] = again    = AGAIN;
    2190:	strh	r1, [r0, #0]
    2192:	strh	r1, [r3, #24]
    store[13] = dgain    = DGAIN;
    2194:	ldr	r1, [pc, #48]	; (21c8 <loadParameters()+0x104>)
    store[6]  = shift    = SHIFT;
    2196:	strh	r2, [r3, #12]
    store[7]  = t_1      = T_1;
    2198:	strh	r2, [r3, #14]
    store[13] = dgain    = DGAIN;
    219a:	strh	r2, [r1, #0]
    219c:	strh	r2, [r3, #26]
    store[14] = 0;
    219e:	strh	r2, [r3, #28]
    store[15] = 0; 
    21a0:	strh	r2, [r3, #30]
    21a2:	b.n	2140 <loadParameters()+0x7c>
    21a4:	.word	0x20028168
    21a8:	.word	0x20028148
    21ac:	.word	0x20008ef0
    21b0:	.word	0x200281ba
    21b4:	.word	0x20008f00
    21b8:	.word	0x20008f04
    21bc:	.word	0x20008f08
    21c0:	.word	0x20008f10
    21c4:	.word	0x2002818c
    21c8:	.word	0x2002818e
    21cc:	.word	0x20028194
    21d0:	.word	0x20008f0c
    21d4:	.word	0x2002814c
    21d8:	.word	0x20008f14

000021dc <menu2()>:
{   // have '?'
    21dc:	push	{r4, lr}
    21de:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    21e0:	bl	9958 <usb_serial_available>
    while(!Serial.available()) ;
    21e4:	cmp	r0, #0
    21e6:	beq.n	21e0 <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21e8:	bl	99cc <usb_serial_getchar>
    ch=Serial.read();
    21ec:	uxtb	r0, r0
    if(ch=='p') // get parameters
    21ee:	cmp	r0, #112	; 0x70
    21f0:	bne.w	2302 <menu2()+0x126>
      Serial.println();
    21f4:	ldr	r0, [pc, #576]	; (2438 <menu2()+0x25c>)
    21f6:	bl	b570 <Print::println()>
      Serial.println(version);
    21fa:	ldr	r1, [pc, #576]	; (243c <menu2()+0x260>)
    21fc:	ldr	r0, [pc, #568]	; (2438 <menu2()+0x25c>)
    21fe:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    2202:	add	r0, sp, #24
    2204:	bl	3470 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now: %4d-%02d-%02d %02d:%02d:%02d %d\n",
    2208:	ldrsb.w	r3, [sp, #28]
    220c:	ldrsh.w	r2, [sp, #24]
    2210:	str	r3, [sp, #16]
    2212:	ldrsb.w	r3, [sp, #31]
    2216:	ldr	r1, [pc, #552]	; (2440 <menu2()+0x264>)
    2218:	str	r3, [sp, #12]
    221a:	ldrsb.w	r3, [sp, #30]
    221e:	ldr	r0, [pc, #536]	; (2438 <menu2()+0x25c>)
    2220:	str	r3, [sp, #8]
    2222:	ldrsb.w	r3, [sp, #29]
    2226:	str	r3, [sp, #4]
    2228:	ldrsb.w	r3, [sp, #27]
    222c:	str	r3, [sp, #0]
    222e:	ldrsb.w	r3, [sp, #26]
    2232:	bl	b5a8 <Print::printf(char const*, ...)>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2236:	ldr	r1, [pc, #524]	; (2444 <menu2()+0x268>)
    2238:	ldr	r0, [pc, #508]	; (2438 <menu2()+0x25c>)
    223a:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    223e:	ldr	r3, [pc, #520]	; (2448 <menu2()+0x26c>)
    2240:	ldr	r0, [pc, #500]	; (2438 <menu2()+0x25c>)
    2242:	ldr	r1, [r3, #0]
    2244:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2248:	ldr	r1, [pc, #512]	; (244c <menu2()+0x270>)
    224a:	ldr	r0, [pc, #492]	; (2438 <menu2()+0x25c>)
    224c:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2250:	ldr	r3, [pc, #508]	; (2450 <menu2()+0x274>)
    2252:	ldr	r0, [pc, #484]	; (2438 <menu2()+0x25c>)
    2254:	ldr	r1, [r3, #0]
    2256:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    225a:	ldr	r1, [pc, #504]	; (2454 <menu2()+0x278>)
    225c:	ldr	r0, [pc, #472]	; (2438 <menu2()+0x25c>)
    225e:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2262:	ldr	r3, [pc, #500]	; (2458 <menu2()+0x27c>)
    2264:	ldr	r0, [pc, #464]	; (2438 <menu2()+0x25c>)
    2266:	ldr	r1, [r3, #0]
    2268:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    226c:	ldr	r1, [pc, #492]	; (245c <menu2()+0x280>)
    226e:	ldr	r0, [pc, #456]	; (2438 <menu2()+0x25c>)
    2270:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2274:	ldr	r3, [pc, #488]	; (2460 <menu2()+0x284>)
	size_t println(long n)				{ return print(n) + println(); }
    2276:	ldr	r0, [pc, #448]	; (2438 <menu2()+0x25c>)
    2278:	ldr	r1, [r3, #0]
    227a:	bl	b55e <Print::print(long)>
    227e:	ldr	r0, [pc, #440]	; (2438 <menu2()+0x25c>)
    2280:	bl	b570 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2284:	ldr	r1, [pc, #476]	; (2464 <menu2()+0x288>)
    2286:	ldr	r0, [pc, #432]	; (2438 <menu2()+0x25c>)
    2288:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    228c:	ldr	r3, [pc, #472]	; (2468 <menu2()+0x28c>)
    228e:	ldr	r0, [pc, #424]	; (2438 <menu2()+0x25c>)
    2290:	ldrh	r1, [r3, #0]
    2292:	sxth	r1, r1
    2294:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    2298:	ldr	r1, [pc, #464]	; (246c <menu2()+0x290>)
    229a:	ldr	r0, [pc, #412]	; (2438 <menu2()+0x25c>)
    229c:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22a0:	ldr	r3, [pc, #460]	; (2470 <menu2()+0x294>)
    22a2:	ldr	r0, [pc, #404]	; (2438 <menu2()+0x25c>)
    22a4:	ldrh	r1, [r3, #0]
    22a6:	sxth	r1, r1
    22a8:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    22ac:	ldr	r1, [pc, #452]	; (2474 <menu2()+0x298>)
    22ae:	ldr	r0, [pc, #392]	; (2438 <menu2()+0x25c>)
    22b0:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22b4:	ldr	r3, [pc, #448]	; (2478 <menu2()+0x29c>)
    22b6:	ldr	r0, [pc, #384]	; (2438 <menu2()+0x25c>)
    22b8:	ldrh	r1, [r3, #0]
    22ba:	sxth	r1, r1
    22bc:	bl	1d98 <Print::println(int) [clone .isra.0]>
      Serial.print("t_1   (1) = "); Serial.println(t_1);
    22c0:	ldr	r1, [pc, #440]	; (247c <menu2()+0x2a0>)
    22c2:	ldr	r0, [pc, #372]	; (2438 <menu2()+0x25c>)
    22c4:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22c8:	ldr	r3, [pc, #436]	; (2480 <menu2()+0x2a4>)
    22ca:	ldr	r0, [pc, #364]	; (2438 <menu2()+0x25c>)
    22cc:	ldr	r1, [r3, #0]
    22ce:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_2   (2) = "); Serial.println(t_2);
    22d2:	ldr	r1, [pc, #432]	; (2484 <menu2()+0x2a8>)
    22d4:	ldr	r0, [pc, #352]	; (2438 <menu2()+0x25c>)
    22d6:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22da:	ldr	r3, [pc, #428]	; (2488 <menu2()+0x2ac>)
    22dc:	ldr	r0, [pc, #344]	; (2438 <menu2()+0x25c>)
    22de:	ldr	r1, [r3, #0]
    22e0:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_3   (3) = "); Serial.println(t_3);
    22e4:	ldr	r1, [pc, #420]	; (248c <menu2()+0x2b0>)
    22e6:	ldr	r0, [pc, #336]	; (2438 <menu2()+0x25c>)
    22e8:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22ec:	ldr	r3, [pc, #416]	; (2490 <menu2()+0x2b4>)
    22ee:	ldr	r0, [pc, #328]	; (2438 <menu2()+0x25c>)
    22f0:	ldr	r1, [r3, #0]
    22f2:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
      Serial.print("t_4   (4) = "); Serial.println(t_4);
    22f6:	ldr	r1, [pc, #412]	; (2494 <menu2()+0x2b8>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    22f8:	ldr	r0, [pc, #316]	; (2438 <menu2()+0x25c>)
    22fa:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    22fe:	ldr	r3, [pc, #408]	; (2498 <menu2()+0x2bc>)
    2300:	b.n	238c <menu2()+0x1b0>
    else if(ch=='d') // get date
    2302:	cmp	r0, #52	; 0x34
    2304:	bhi.n	2338 <menu2()+0x15c>
    2306:	cmp	r0, #48	; 0x30
    2308:	bls.n	2340 <menu2()+0x164>
    230a:	subs	r0, #50	; 0x32
    230c:	cmp	r0, #2
    230e:	bhi.n	23f6 <menu2()+0x21a>
    2310:	tbb	[pc, r0]
    2314:	.short	0x7d77
    2316:	.byte	0x83
    2317:	.byte	0x00
    2318:	cmp	r0, #22
    231a:	bhi.n	2340 <menu2()+0x164>
    231c:	tbb	[pc, r0]
    2320:	.word	0x165f1031
    2324:	.word	0x10654710
    2328:	.word	0x10101010
    232c:	.word	0x103b1010
    2330:	.word	0x25544110
    2334:	.short	0x1010
    2336:	.byte	0x7f
    2337:	.byte	0x00
    2338:	subs	r0, #97	; 0x61
    233a:	uxtb	r3, r0
    233c:	cmp	r3, #22
    233e:	bls.n	2318 <menu2()+0x13c>
        virtual int available() { return usb_serial_available(); }
    2340:	bl	9958 <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2344:	cmp	r0, #0
    2346:	bne.n	2430 <menu2()+0x254>
}
    2348:	add	sp, #32
    234a:	pop	{r4, pc}
      rtc_get_datetime(&t);
    234c:	add	r0, sp, #24
    234e:	bl	3470 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    2352:	ldrsb.w	r3, [sp, #27]
    2356:	ldrsh.w	r2, [sp, #24]
    235a:	str	r3, [sp, #0]
    235c:	ldr	r1, [pc, #316]	; (249c <menu2()+0x2c0>)
    235e:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    2362:	ldr	r0, [pc, #212]	; (2438 <menu2()+0x25c>)
    2364:	bl	b5a8 <Print::printf(char const*, ...)>
    2368:	b.n	2340 <menu2()+0x164>
      rtc_get_datetime(&t);
    236a:	add	r0, sp, #24
    236c:	bl	3470 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    2370:	ldrsb.w	r3, [sp, #31]
    2374:	ldrsb.w	r2, [sp, #29]
    2378:	str	r3, [sp, #0]
    237a:	ldr	r1, [pc, #292]	; (24a0 <menu2()+0x2c4>)
    237c:	ldrsb.w	r3, [sp, #30]
    2380:	b.n	2362 <menu2()+0x186>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2382:	ldr	r1, [pc, #192]	; (2444 <menu2()+0x268>)
    2384:	ldr	r0, [pc, #176]	; (2438 <menu2()+0x25c>)
    2386:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    238a:	ldr	r3, [pc, #188]	; (2448 <menu2()+0x26c>)
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    238c:	ldr	r1, [r3, #0]
    238e:	ldr	r0, [pc, #168]	; (2438 <menu2()+0x25c>)
    2390:	bl	1daa <Print::println(unsigned long) [clone .isra.0]>
    2394:	b.n	2340 <menu2()+0x164>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    2396:	ldr	r1, [pc, #268]	; (24a4 <menu2()+0x2c8>)
    2398:	ldr	r0, [pc, #156]	; (2438 <menu2()+0x25c>)
    239a:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    239e:	ldr	r3, [pc, #176]	; (2450 <menu2()+0x274>)
    23a0:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    23a2:	ldr	r1, [pc, #176]	; (2454 <menu2()+0x278>)
    23a4:	ldr	r0, [pc, #144]	; (2438 <menu2()+0x25c>)
    23a6:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23aa:	ldr	r3, [pc, #172]	; (2458 <menu2()+0x27c>)
    23ac:	b.n	238c <menu2()+0x1b0>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    23ae:	ldr	r1, [pc, #172]	; (245c <menu2()+0x280>)
    23b0:	ldr	r0, [pc, #132]	; (2438 <menu2()+0x25c>)
    23b2:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23b6:	ldr	r3, [pc, #168]	; (2460 <menu2()+0x284>)
    23b8:	ldr	r0, [pc, #124]	; (2438 <menu2()+0x25c>)
    23ba:	ldr	r1, [r3, #0]
    23bc:	bl	b55e <Print::print(long)>
    23c0:	ldr	r0, [pc, #116]	; (2438 <menu2()+0x25c>)
    23c2:	bl	b570 <Print::println()>
    23c6:	b.n	2340 <menu2()+0x164>
      Serial.print("shift (s) = "); Serial.println(shift);
    23c8:	ldr	r1, [pc, #152]	; (2464 <menu2()+0x288>)
    23ca:	ldr	r0, [pc, #108]	; (2438 <menu2()+0x25c>)
    23cc:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23d0:	ldr	r3, [pc, #148]	; (2468 <menu2()+0x28c>)
      Serial.print("again (g) = "); Serial.println(again);
    23d2:	ldrh	r1, [r3, #0]
    23d4:	sxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    23d6:	ldr	r0, [pc, #96]	; (2438 <menu2()+0x25c>)
    23d8:	bl	1d98 <Print::println(int) [clone .isra.0]>
    23dc:	b.n	2340 <menu2()+0x164>
      Serial.print("proc  (c) = "); Serial.println(proc);
    23de:	ldr	r1, [pc, #140]	; (246c <menu2()+0x290>)
    23e0:	ldr	r0, [pc, #84]	; (2438 <menu2()+0x25c>)
    23e2:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23e6:	ldr	r3, [pc, #136]	; (2470 <menu2()+0x294>)
    23e8:	b.n	23d2 <menu2()+0x1f6>
      Serial.print("again (g) = "); Serial.println(again);
    23ea:	ldr	r1, [pc, #136]	; (2474 <menu2()+0x298>)
    23ec:	ldr	r0, [pc, #72]	; (2438 <menu2()+0x25c>)
    23ee:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23f2:	ldr	r3, [pc, #132]	; (2478 <menu2()+0x29c>)
    23f4:	b.n	23d2 <menu2()+0x1f6>
      Serial.print("t_1  (1) = "); Serial.println(t_1);
    23f6:	ldr	r1, [pc, #176]	; (24a8 <menu2()+0x2cc>)
    23f8:	ldr	r0, [pc, #60]	; (2438 <menu2()+0x25c>)
    23fa:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    23fe:	ldr	r3, [pc, #128]	; (2480 <menu2()+0x2a4>)
    2400:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_2  (2) = "); Serial.println(t_2);
    2402:	ldr	r1, [pc, #168]	; (24ac <menu2()+0x2d0>)
    2404:	ldr	r0, [pc, #48]	; (2438 <menu2()+0x25c>)
    2406:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    240a:	ldr	r3, [pc, #124]	; (2488 <menu2()+0x2ac>)
    240c:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_3  (3) = "); Serial.println(t_3);
    240e:	ldr	r1, [pc, #160]	; (24b0 <menu2()+0x2d4>)
    2410:	ldr	r0, [pc, #36]	; (2438 <menu2()+0x25c>)
    2412:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    2416:	ldr	r3, [pc, #120]	; (2490 <menu2()+0x2b4>)
    2418:	b.n	238c <menu2()+0x1b0>
      Serial.print("t_4  (4) = "); Serial.println(t_4);
    241a:	ldr	r1, [pc, #152]	; (24b4 <menu2()+0x2d8>)
    241c:	b.n	22f8 <menu2()+0x11c>
    { uint16_t *params=loadParameters();
    241e:	bl	20c4 <loadParameters()>
    2422:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    2424:	ldr	r1, [pc, #144]	; (24b8 <menu2()+0x2dc>)
    2426:	ldr	r0, [pc, #16]	; (2438 <menu2()+0x25c>)
    2428:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    242c:	ldrh	r1, [r4, #0]
    242e:	b.n	23d6 <menu2()+0x1fa>
        virtual int read() { return usb_serial_getchar(); }
    2430:	bl	99cc <usb_serial_getchar>
    2434:	b.n	2340 <menu2()+0x164>
    2436:	nop
    2438:	.word	0x20008944
    243c:	.word	0x20007e4d
    2440:	.word	0x20007ca7
    2444:	.word	0x20007ccd
    2448:	.word	0x20008f0c
    244c:	.word	0x20007cda
    2450:	.word	0x20008f10
    2454:	.word	0x20007ce7
    2458:	.word	0x20008f14
    245c:	.word	0x20007cf4
    2460:	.word	0x20008ef0
    2464:	.word	0x20007d01
    2468:	.word	0x200281ba
    246c:	.word	0x20007d0e
    2470:	.word	0x20028194
    2474:	.word	0x20007d1b
    2478:	.word	0x2002818c
    247c:	.word	0x20007d28
    2480:	.word	0x20028148
    2484:	.word	0x20007d35
    2488:	.word	0x20008f00
    248c:	.word	0x20007d42
    2490:	.word	0x20008f04
    2494:	.word	0x20007d4f
    2498:	.word	0x20008f08
    249c:	.word	0x20007d5c
    24a0:	.word	0x20007d76
    24a4:	.word	0x20007d91
    24a8:	.word	0x20007d9e
    24ac:	.word	0x20007daa
    24b0:	.word	0x20007db6
    24b4:	.word	0x20007dc2
    24b8:	.word	0x20007dce

000024bc <menu(short)>:
{
    24bc:	push	{r3, r4, r5, lr}
    24be:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    24c0:	bl	9958 <usb_serial_available>
  if(Serial.available())
    24c4:	cmp	r0, #0
    24c6:	beq.n	2568 <menu(short)+0xac>
        virtual int read() { return usb_serial_getchar(); }
    24c8:	bl	99cc <usb_serial_getchar>
    char ch=Serial.read();
    24cc:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); status=CLOSED;}
    24ce:	cmp	r1, #115	; 0x73
    24d0:	bne.n	24e0 <menu(short)+0x24>
    24d2:	movs	r4, #0
    24d4:	ldr	r1, [pc, #148]	; (256c <menu(short)+0xb0>)
    24d6:	ldr	r0, [pc, #152]	; (2570 <menu(short)+0xb4>)
    24d8:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
	size_t print(char c)				{ return write((uint8_t)c); }
    24dc:	ldr	r5, [pc, #144]	; (2570 <menu(short)+0xb4>)
    24de:	b.n	2560 <menu(short)+0xa4>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    24e0:	cmp	r1, #101	; 0x65
    24e2:	bne.n	24f0 <menu(short)+0x34>
    24e4:	ldr	r1, [pc, #140]	; (2574 <menu(short)+0xb8>)
    24e6:	movs	r4, #5
    24e8:	ldr	r0, [pc, #132]	; (2570 <menu(short)+0xb4>)
    24ea:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
    24ee:	b.n	24dc <menu(short)+0x20>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    24f0:	cmp	r1, #109	; 0x6d
    24f2:	bne.n	2512 <menu(short)+0x56>
    24f4:	ldr	r5, [pc, #128]	; (2578 <menu(short)+0xbc>)
    24f6:	ldr	r1, [pc, #132]	; (257c <menu(short)+0xc0>)
    24f8:	ldrh	r3, [r5, #0]
    24fa:	ldr	r0, [pc, #116]	; (2570 <menu(short)+0xb4>)
    24fc:	rsb	r3, r3, #1
    2500:	strh	r3, [r5, #0]
    2502:	bl	1de4 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2506:	ldrsh.w	r1, [r5]
    250a:	ldr	r0, [pc, #100]	; (2570 <menu(short)+0xb4>)
    250c:	bl	b55e <Print::print(long)>
    2510:	b.n	24dc <menu(short)+0x20>
    else if(ch=='r') {resetUSB();}
    2512:	cmp	r1, #114	; 0x72
    2514:	bne.n	251c <menu(short)+0x60>
    2516:	bl	218 <resetUSB()>
    251a:	b.n	24dc <menu(short)+0x20>
    else if(ch==':') status=menu1(status); 
    251c:	cmp	r1, #58	; 0x3a
    251e:	bne.n	252a <menu(short)+0x6e>
    2520:	mov	r0, r4
    2522:	bl	2084 <menu1(short)>
    2526:	mov	r4, r0
    2528:	b.n	24dc <menu(short)+0x20>
    else if(ch=='?') menu2(); 
    252a:	cmp	r1, #63	; 0x3f
    252c:	bne.n	2534 <menu(short)+0x78>
    252e:	bl	21dc <menu2()>
    2532:	b.n	24dc <menu(short)+0x20>
    else if(ch=='!') menu3(); 
    2534:	cmp	r1, #33	; 0x21
    2536:	bne.n	253e <menu(short)+0x82>
    2538:	bl	1e64 <menu3()>
    253c:	b.n	24dc <menu(short)+0x20>
	size_t print(char c)				{ return write((uint8_t)c); }
    253e:	ldr	r5, [pc, #48]	; (2570 <menu(short)+0xb4>)
    2540:	ldr	r3, [r5, #0]
    2542:	mov	r0, r5
    2544:	ldr	r3, [r3, #0]
    2546:	blx	r3
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2548:	ldr	r1, [pc, #52]	; (2580 <menu(short)+0xc4>)
    254a:	mov	r0, r5
    254c:	bl	1de8 <Print::println(char const*) [clone .isra.0]>
    2550:	b.n	24dc <menu(short)+0x20>
    2552:	bl	99cc <usb_serial_getchar>
    2556:	ldr	r3, [r5, #0]
    2558:	uxtb	r1, r0
    255a:	ldr	r0, [pc, #20]	; (2570 <menu(short)+0xb4>)
    255c:	ldr	r3, [r3, #0]
    255e:	blx	r3
        virtual int available() { return usb_serial_available(); }
    2560:	bl	9958 <usb_serial_available>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2564:	cmp	r0, #0
    2566:	bne.n	2552 <menu(short)+0x96>
}
    2568:	mov	r0, r4
    256a:	pop	{r3, r4, r5, pc}
    256c:	.word	0x20007c3c
    2570:	.word	0x20008944
    2574:	.word	0x20007c44
    2578:	.word	0x20028192
    257c:	.word	0x20007c4b
    2580:	.word	0x20007c56

00002584 <getStore()>:

uint16_t *getStore(void) {return store;}
    2584:	ldr	r0, [pc, #0]	; (2588 <getStore()+0x4>)
    2586:	bx	lr
    2588:	.word	0x20028168

0000258c <getDataCount()>:
  volatile static int queue_busy=0;
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    258c:	ldr	r3, [pc, #16]	; (25a0 <getDataCount()+0x14>)
    258e:	ldr	r0, [r3, #0]
    2590:	ldr	r3, [pc, #16]	; (25a4 <getDataCount()+0x18>)
    2592:	ldr	r3, [r3, #0]
    2594:	subs	r0, r0, r3
    2596:	it	mi
    2598:	addmi	r0, #192	; 0xc0
    259a:	uxth	r0, r0
    259c:	bx	lr
    259e:	nop
    25a0:	.word	0x20026de8
    25a4:	.word	0x20026de4

000025a8 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    25a8:	ldr	r3, [pc, #4]	; (25b0 <queue_isBusy()+0x8>)
    25aa:	ldr	r0, [r3, #0]
    25ac:	bx	lr
    25ae:	nop
    25b0:	.word	0x2000d3d4

000025b4 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    25b4:	push	{r3, r4, r5, r6, r7, lr}
    if ( (tail+1)%MAXBUF == head ) return 0;
    25b6:	ldr	r5, [pc, #72]	; (2600 <pushData(unsigned long*)+0x4c>)
    25b8:	movs	r6, #192	; 0xc0
  {
    25ba:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) return 0;
    25bc:	ldr	r2, [pc, #68]	; (2604 <pushData(unsigned long*)+0x50>)
    25be:	ldr	r3, [r5, #0]
    25c0:	ldr	r2, [r2, #0]
    25c2:	adds	r3, #1
    25c4:	sdiv	r0, r3, r6
    25c8:	mls	r3, r6, r0, r3
    25cc:	cmp	r3, r2
    25ce:	beq.n	25fc <pushData(unsigned long*)+0x48>
    //while(busy); 
    queue_busy=1;
    25d0:	movs	r4, #1
    25d2:	ldr	r7, [pc, #52]	; (2608 <pushData(unsigned long*)+0x54>)
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25d4:	ldr	r3, [pc, #52]	; (260c <pushData(unsigned long*)+0x58>)
    25d6:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    25da:	str	r4, [r7, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    25dc:	ldr	r0, [r5, #0]
    25de:	add.w	r0, r3, r0, lsl #9
    25e2:	bl	9470 <memcpy>
    tail = (tail+1)%MAXBUF;
    25e6:	ldr	r3, [r5, #0]
    queue_busy=0;
    return 1; // signal success.
    25e8:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    25ea:	add	r3, r4
    25ec:	sdiv	r2, r3, r6
    25f0:	mls	r3, r6, r2, r3
    25f4:	str	r3, [r5, #0]
    queue_busy=0;
    25f6:	movs	r3, #0
    25f8:	str	r3, [r7, #0]
  }
    25fa:	pop	{r3, r4, r5, r6, r7, pc}
    if ( (tail+1)%MAXBUF == head ) return 0;
    25fc:	movs	r0, #0
    25fe:	b.n	25fa <pushData(unsigned long*)+0x46>
    2600:	.word	0x20026de8
    2604:	.word	0x20026de4
    2608:	.word	0x2000d3d4
    260c:	.word	0x2000d3d8

00002610 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    if ( head==tail ) return 0;
    2610:	ldr	r3, [pc, #60]	; (2650 <pullData(unsigned long*)+0x40>)
  {
    2612:	push	{r4, r5, r6, lr}
    if ( head==tail ) return 0;
    2614:	ldr	r5, [pc, #60]	; (2654 <pullData(unsigned long*)+0x44>)
    2616:	ldr	r2, [r5, #0]
    2618:	ldr	r3, [r3, #0]
    261a:	cmp	r2, r3
    261c:	beq.n	264c <pullData(unsigned long*)+0x3c>
    //while(busy); 
    queue_busy=1;
    261e:	movs	r4, #1
    2620:	ldr	r6, [pc, #52]	; (2658 <pullData(unsigned long*)+0x48>)
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    2622:	ldr	r3, [pc, #56]	; (265c <pullData(unsigned long*)+0x4c>)
    2624:	mov.w	r2, #512	; 0x200
    queue_busy=1;
    2628:	str	r4, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    262a:	ldr	r1, [r5, #0]
    262c:	add.w	r1, r3, r1, lsl #9
    2630:	bl	9470 <memcpy>
    head = (head+1)%MAXBUF;
    2634:	ldr	r3, [r5, #0]
    2636:	movs	r2, #192	; 0xc0
    queue_busy=0;
    return 1;
    2638:	mov	r0, r4
    head = (head+1)%MAXBUF;
    263a:	add	r3, r4
    263c:	sdiv	r1, r3, r2
    2640:	mls	r3, r2, r1, r3
    2644:	str	r3, [r5, #0]
    queue_busy=0;
    2646:	movs	r3, #0
    2648:	str	r3, [r6, #0]
  }
    264a:	pop	{r4, r5, r6, pc}
    if ( head==tail ) return 0;
    264c:	movs	r0, #0
    264e:	b.n	264a <pullData(unsigned long*)+0x3a>
    2650:	.word	0x20026de8
    2654:	.word	0x20026de4
    2658:	.word	0x2000d3d4
    265c:	.word	0x2000d3d8

00002660 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2660:	push	{r0, r1, r4, r5, r6, lr}
    2662:	mov	r6, r0
    rtc_get_datetime(&t);
    2664:	mov	r0, sp
{
    2666:	mov	r5, r2
    2668:	mov	r4, r1
    rtc_get_datetime(&t);
    266a:	bl	3470 <rtc_get_datetime(datetime_t*)>
 * \param[in] day [1,31]
 *
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
    266e:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    2672:	ldrsb.w	r3, [sp, #3]
    2676:	subw	r2, r2, #1980	; 0x7bc
    267a:	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
    267c:	cmp	r2, #127	; 0x7f
    267e:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2680:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    2684:	cmp	r1, #12
    2686:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2688:	uxtb	r3, r3
    268a:	cmp	r3, #31
    268c:	bhi.n	26ca <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    268e:	orr.w	r3, r3, r1, lsl #5
    2692:	orr.w	r3, r3, r2, lsl #9
    2696:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2698:	ldrb.w	r1, [sp, #5]
    269c:	ldrsb.w	r2, [sp, #7]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
    26a0:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    26a2:	strh	r3, [r6, #0]
    26a4:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    26a6:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    26aa:	cmp	r3, #59	; 0x3b
    26ac:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    26ae:	uxtb	r2, r2
    26b0:	cmp	r2, #59	; 0x3b
    26b2:	bhi.n	26ce <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    26b4:	lsls	r3, r3, #5
    26b6:	orr.w	r3, r3, r1, lsl #11
    26ba:	orr.w	r3, r3, r2, lsr #1
    26be:	uxth	r3, r3
    26c0:	strh	r3, [r4, #0]
    *ms10 = 0;
    26c2:	movs	r3, #0
    26c4:	strb	r3, [r5, #0]
}
    26c6:	add	sp, #8
    26c8:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    26ca:	movs	r3, #0
    26cc:	b.n	2698 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    26ce:	movs	r3, #0
    26d0:	b.n	26c0 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

000026d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    26d2:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26d4:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    26d6:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26d8:	cbz	r5, 26e4 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    26da:	cbnz	r3, 26ee <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    26dc:	mov	r0, r5
  }
    26de:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    26e0:	b.w	6536 <FatFile::seekSet(unsigned long)>
    26e4:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    26e6:	cbz	r0, 26ee <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    26e8:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    26ea:	b.w	4eac <ExFatFile::seekSet(unsigned long long)>
  }
    26ee:	pop	{r4, r5}
    26f0:	bx	lr

000026f2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    26f2:	push	{r0, r1, r4, lr}
    26f4:	mov	r4, r0
    26f6:	cbz	r1, 2712 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    26f8:	mov	r0, r1
    26fa:	str	r1, [sp, #4]
    26fc:	bl	e0c0 <strlen>
    2700:	ldr	r3, [r4, #0]
    2702:	mov	r2, r0
    2704:	ldr	r1, [sp, #4]
    2706:	ldr	r3, [r3, #4]
    2708:	mov	r0, r4
    270a:	add	sp, #8
    270c:	ldmia.w	sp!, {r4, lr}
    2710:	bx	r3
    2712:	add	sp, #8
    2714:	pop	{r4, pc}

00002716 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2716:	push	{r4, lr}
    2718:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    271a:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    271e:	mov	r0, r4
    2720:	ldmia.w	sp!, {r4, lr}
    2724:	b.w	b570 <Print::println()>

00002728 <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    2728:	ldr	r3, [r0, #56]	; 0x38
    272a:	cbz	r3, 2732 <FsBaseFile::sync()+0xa>
    272c:	mov	r0, r3
    272e:	b.w	6780 <FatFile::sync()>
    2732:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    2734:	cbz	r0, 273a <FsBaseFile::sync()+0x12>
    2736:	b.w	5ae0 <ExFatFile::sync()>
  }
    273a:	bx	lr

0000273c <timeStamp()>:
{
    273c:	push	{r4, lr}
    273e:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2740:	ldr	r4, [pc, #52]	; (2778 <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2742:	add	r0, sp, #16
    2744:	bl	3470 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2748:	ldrsb.w	r3, [sp, #23]
    274c:	ldrsh.w	r2, [sp, #16]
    2750:	mov	r0, r4
    2752:	str	r3, [sp, #12]
    2754:	ldrsb.w	r3, [sp, #22]
    2758:	ldr	r1, [pc, #32]	; (277c <timeStamp()+0x40>)
    275a:	str	r3, [sp, #8]
    275c:	ldrsb.w	r3, [sp, #21]
    2760:	str	r3, [sp, #4]
    2762:	ldrsb.w	r3, [sp, #19]
    2766:	str	r3, [sp, #0]
    2768:	ldrsb.w	r3, [sp, #18]
    276c:	bl	d654 <sprintf>
}
    2770:	mov	r0, r4
    2772:	add	sp, #24
    2774:	pop	{r4, pc}
    2776:	nop
    2778:	.word	0x2002828a
    277c:	.word	0x20007ae1

00002780 <headerInit(long, long, long, int)>:
{
    2780:	push	{r0, r1, r4, r5, r6, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2782:	ldr	r4, [pc, #184]	; (283c <headerInit(long, long, long, int)+0xbc>)
  int nbytes=nbits/8;
    2784:	cmp	r2, #0
    2786:	str	r3, [sp, #4]
    2788:	mov	r6, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    278a:	ldr	r3, [pc, #180]	; (2840 <headerInit(long, long, long, int)+0xc0>)
  int nbytes=nbits/8;
    278c:	it	lt
    278e:	addlt	r6, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2790:	str	r0, [r4, #24]
{
    2792:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2794:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    2796:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    279a:	asrs	r6, r6, #3
  wav_hdr.nFormatTag=1;
    279c:	movs	r2, #16
  memcpy(wav_hdr.wId,"WAVE",4);
    279e:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nBitsPerSamples=nbits;
    27a2:	strh	r5, [r4, #34]	; 0x22
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27a4:	muls	r0, r6
  memcpy(wav_hdr.wId,"WAVE",4);
    27a6:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    27a8:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27ac:	muls	r0, r1
  wav_hdr.nBlockAlign=nchan*nbytes;
    27ae:	smulbb	r1, r1, r6
  memcpy(wav_hdr.fId,"fmt ",4);
    27b2:	add.w	r3, r3, #1974272	; 0x1e2000
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    27b6:	str	r0, [r4, #28]
  strcpy(&wav_hdr.info[0], MAGIC);
    27b8:	add.w	r0, r4, #44	; 0x2c
  memcpy(wav_hdr.fId,"fmt ",4);
    27bc:	addw	r3, r3, #3087	; 0xc0f
  wav_hdr.nBlockAlign=nchan*nbytes;
    27c0:	strh	r1, [r4, #32]
  strcpy(&wav_hdr.info[0], MAGIC);
    27c2:	ldr	r1, [pc, #128]	; (2844 <headerInit(long, long, long, int)+0xc4>)
  memcpy(wav_hdr.fId,"fmt ",4);
    27c4:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    27c6:	add.w	r3, r3, #1090519040	; 0x41000000
    27ca:	subw	r3, r3, #3074	; 0xc02
    27ce:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    27d2:	add.w	r3, r3, #218107136	; 0xd000d00
    27d6:	add.w	r3, r3, #15859712	; 0xf20000
    27da:	adds	r3, #5
    27dc:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    27de:	mov.w	r3, #504	; 0x1f8
    27e2:	str	r3, [r4, #4]
  wav_hdr.iLen = 512 - 13*4;
    27e4:	mov.w	r3, #460	; 0x1cc
    27e8:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    27ea:	movs	r3, #0
    27ec:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    27f0:	mov.w	r3, #65537	; 0x10001
    27f4:	strd	r2, r3, [r4, #16]
  strcpy(&wav_hdr.info[0], MAGIC);
    27f8:	bl	df5c <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    27fc:	bl	273c <timeStamp()>
    2800:	mov	r1, r0
    2802:	add.w	r0, r4, #48	; 0x30
    2806:	bl	df5c <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    280a:	ldr	r2, [sp, #4]
    280c:	ldr	r1, [pc, #56]	; (2848 <headerInit(long, long, long, int)+0xc8>)
    280e:	add.w	r0, r4, #64	; 0x40
    2812:	bl	d654 <sprintf>
  memcpy(&wav_hdr.info[30], getStore(),16*2);
    2816:	adds	r4, #74	; 0x4a
    2818:	bl	2584 <getStore()>
    281c:	add.w	r3, r0, #32
    2820:	ldr.w	r2, [r0], #4
    2824:	cmp	r0, r3
    2826:	str.w	r2, [r4], #4
    282a:	bne.n	2820 <headerInit(long, long, long, int)+0xa0>
  strcpy(&wav_hdr.info[62]," end");
    282c:	ldr	r1, [pc, #28]	; (284c <headerInit(long, long, long, int)+0xcc>)
    282e:	ldr	r0, [pc, #32]	; (2850 <headerInit(long, long, long, int)+0xd0>)
    2830:	bl	df5c <strcpy>
}
    2834:	ldr	r0, [pc, #4]	; (283c <headerInit(long, long, long, int)+0xbc>)
    2836:	add	sp, #8
    2838:	pop	{r4, r5, r6, pc}
    283a:	nop
    283c:	.word	0x20026ff4
    2840:	.word	0x46464952
    2844:	.word	0x20007ad0
    2848:	.word	0x20007ad5
    284c:	.word	0x20007ada
    2850:	.word	0x2002705e

00002854 <headerUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2854:	ldr	r3, [pc, #12]	; (2864 <headerUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2856:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2858:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    285c:	add	r2, r0
}
    285e:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2860:	str	r2, [r3, #4]
}
    2862:	bx	lr
    2864:	.word	0x20026ff4

00002868 <writeHeader(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2868:	ldr	r3, [pc, #76]	; (28b8 <writeHeader(char*)+0x50>)
    286a:	ldr	r2, [r3, #72]	; 0x48
{ 
    286c:	push	{r4, r5, r6, lr}
    286e:	mov	r6, r0
    2870:	cbz	r2, 28a6 <writeHeader(char*)+0x3e>
    2872:	ldr	r4, [r2, #20]
    2874:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2876:	mov	r2, r4
    2878:	mov	r3, r5
    287a:	ldr	r1, [pc, #64]	; (28bc <writeHeader(char*)+0x54>)
    287c:	ldr	r0, [pc, #64]	; (28c0 <writeHeader(char*)+0x58>)
    287e:	bl	b5a8 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2882:	movs	r3, #0
    2884:	movs	r2, #0
    2886:	ldr	r0, [pc, #60]	; (28c4 <writeHeader(char*)+0x5c>)
    2888:	bl	26d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write(wav_hdr,512);
    288c:	mov.w	r2, #512	; 0x200
    2890:	mov	r1, r6
    2892:	ldr	r0, [pc, #48]	; (28c4 <writeHeader(char*)+0x5c>)
    2894:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  file.seekSet(fpos);
    2898:	mov	r2, r4
    289a:	mov	r3, r5
    289c:	ldr	r0, [pc, #36]	; (28c4 <writeHeader(char*)+0x5c>)
}
    289e:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    28a2:	b.w	26d2 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    28a6:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    28a8:	cbz	r3, 28b0 <writeHeader(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    28aa:	ldrd	r4, r5, [r3]
    28ae:	b.n	2876 <writeHeader(char*)+0xe>
    28b0:	mov	r4, r3
    28b2:	mov	r5, r3
    28b4:	b.n	2876 <writeHeader(char*)+0xe>
    28b6:	nop
    28b8:	.word	0x20027984
    28bc:	.word	0x20007b71
    28c0:	.word	0x20008944
    28c4:	.word	0x20027994

000028c8 <makeHeader(long*)>:
{
    28c8:	push	{r4, lr}
    28ca:	sub	sp, #32
    28cc:	mov	r4, r0
    rtc_get_datetime(&t);
    28ce:	add	r0, sp, #24
    28d0:	bl	3470 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    28d4:	ldrsb.w	r3, [sp, #31]
    28d8:	ldr	r2, [pc, #120]	; (2954 <makeHeader(long*)+0x8c>)
    28da:	mov	r0, r4
    28dc:	str	r3, [sp, #16]
    28de:	ldrsb.w	r3, [sp, #30]
    28e2:	ldr	r1, [pc, #116]	; (2958 <makeHeader(long*)+0x90>)
    28e4:	str	r3, [sp, #12]
    28e6:	ldrsb.w	r3, [sp, #29]
    28ea:	str	r3, [sp, #8]
    28ec:	ldrsb.w	r3, [sp, #27]
    28f0:	str	r3, [sp, #4]
    28f2:	ldrsb.w	r3, [sp, #26]
    28f6:	str	r3, [sp, #0]
    28f8:	ldrsh.w	r3, [sp, #24]
    28fc:	bl	d654 <sprintf>
    header[5] = 20;          // SW version
    2900:	movs	r3, #20
    header[8] = NCHAN_ACQ;
    2902:	movs	r0, #1
    header[5] = 20;          // SW version
    2904:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2906:	ldr	r3, [pc, #84]	; (295c <makeHeader(long*)+0x94>)
    header[8] = NCHAN_ACQ;
    2908:	str	r0, [r4, #32]
    header[6] = SerNum;      // serial number
    290a:	ldr	r3, [r3, #0]
    290c:	str	r3, [r4, #24]
    header[7] = fsamp;
    290e:	ldr	r3, [pc, #80]	; (2960 <makeHeader(long*)+0x98>)
    2910:	ldr	r3, [r3, #0]
    2912:	str	r3, [r4, #28]
    header[9] = t_acq;
    2914:	ldr	r3, [pc, #76]	; (2964 <makeHeader(long*)+0x9c>)
    2916:	ldr	r3, [r3, #0]
    2918:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    291a:	ldr	r3, [pc, #76]	; (2968 <makeHeader(long*)+0xa0>)
    291c:	ldr	r3, [r3, #0]
    291e:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2920:	ldr	r3, [pc, #72]	; (296c <makeHeader(long*)+0xa4>)
    2922:	ldr	r3, [r3, #0]
    2924:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2926:	ldr	r3, [pc, #72]	; (2970 <makeHeader(long*)+0xa8>)
    2928:	ldrh	r3, [r3, #0]
    292a:	sxth	r3, r3
    292c:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    292e:	ldr	r3, [pc, #68]	; (2974 <makeHeader(long*)+0xac>)
    2930:	ldrh	r3, [r3, #0]
    2932:	sxth	r3, r3
    2934:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2936:	ldr	r3, [pc, #64]	; (2978 <makeHeader(long*)+0xb0>)
    2938:	ldrh	r3, [r3, #0]
    293a:	sxth	r3, r3
    293c:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    293e:	ldr	r3, [pc, #60]	; (297c <makeHeader(long*)+0xb4>)
    2940:	ldrh	r3, [r3, #0]
    2942:	sxth	r3, r3
    2944:	str	r3, [r4, #60]	; 0x3c
    header[127]=0x55555555;
    2946:	mov.w	r3, #1431655765	; 0x55555555
    294a:	str.w	r3, [r4, #508]	; 0x1fc
}
    294e:	add	sp, #32
    2950:	pop	{r4, pc}
    2952:	nop
    2954:	.word	0x20007ad0
    2958:	.word	0x20007adf
    295c:	.word	0x2000b9c8
    2960:	.word	0x20008ef0
    2964:	.word	0x20008f0c
    2968:	.word	0x20008f10
    296c:	.word	0x20008f14
    2970:	.word	0x20028194
    2974:	.word	0x200281ba
    2978:	.word	0x2002818c
    297c:	.word	0x2002818e

00002980 <checkEndOfFile(short)>:
  if(state==RUNNING)
    2980:	cmp	r0, #2
{ 
    2982:	push	{r4, lr}
    2984:	mov	r4, r0
  if(state==RUNNING)
    2986:	bne.n	29b0 <checkEndOfFile(short)+0x30>
    uint32_t tt = rtc_get();
    2988:	bl	abb4 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    298c:	ldr	r3, [pc, #60]	; (29cc <checkEndOfFile(short)+0x4c>)
    298e:	ldr	r2, [r3, #0]
    2990:	udiv	r3, r0, r2
    2994:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2998:	ldr	r2, [pc, #52]	; (29d0 <checkEndOfFile(short)+0x50>)
    299a:	ldr	r1, [r2, #0]
    dta = dt1;
    299c:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    299e:	cmp	r3, r1
    29a0:	bcs.n	29b0 <checkEndOfFile(short)+0x30>
    if(t_rep>t_on)                      // and if foreseen  check for hibernation
    29a2:	ldr	r3, [pc, #48]	; (29d4 <checkEndOfFile(short)+0x54>)
    29a4:	ldr	r2, [pc, #48]	; (29d8 <checkEndOfFile(short)+0x58>)
    29a6:	ldr	r4, [r3, #0]
    29a8:	ldr	r1, [r2, #0]
    29aa:	cmp	r4, r1
    29ac:	bhi.n	29b4 <checkEndOfFile(short)+0x34>
    29ae:	movs	r4, #3
}
    29b0:	mov	r0, r4
    29b2:	pop	{r4, pc}
      uint32_t dt2 = (tt % t_rep);
    29b4:	ldr	r3, [r3, #0]
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29b6:	ldr	r4, [r2, #0]
      uint32_t dt2 = (tt % t_rep);
    29b8:	udiv	r2, r0, r3
    29bc:	mls	r0, r3, r2, r0
      if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    29c0:	cmp	r0, r4
    29c2:	ite	cc
    29c4:	movcc	r4, #3
    29c6:	movcs	r4, #4
    29c8:	b.n	29b0 <checkEndOfFile(short)+0x30>
    29ca:	nop
    29cc:	.word	0x20008f0c
    29d0:	.word	0x2002743c
    29d4:	.word	0x20008f14
    29d8:	.word	0x20008f10

000029dc <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    29dc:	ldr	r3, [pc, #12]	; (29ec <newFolder(int)+0x10>)
    29de:	ldr	r2, [r3, #0]
    29e0:	cmp	r2, r0
  d0=d;
    29e2:	itte	ne
    29e4:	strne	r0, [r3, #0]
  return 1;
    29e6:	movne	r0, #1
  if(d==d0) return 0; // same day
    29e8:	moveq	r0, #0
}
    29ea:	bx	lr
    29ec:	.word	0x20008954

000029f0 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    29f0:	push	{r4, lr}
    29f2:	sub	sp, #24
    29f4:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    29f6:	add	r0, sp, #16
    29f8:	bl	3470 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    29fc:	ldrsb.w	r1, [sp, #21]
    2a00:	mov	r0, r1
    2a02:	bl	29dc <newFolder(int)>
    2a06:	cbz	r0, 2a42 <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2a08:	ldrsb.w	r3, [sp, #19]
    2a0c:	mov	r0, r4
    2a0e:	ldr	r2, [pc, #56]	; (2a48 <newDirectory(char*)+0x58>)
    2a10:	str	r3, [sp, #8]
    2a12:	ldrsb.w	r3, [sp, #18]
    2a16:	str	r1, [sp, #12]
    2a18:	str	r3, [sp, #4]
    2a1a:	ldrsh.w	r3, [sp, #16]
    2a1e:	ldr	r1, [pc, #44]	; (2a4c <newDirectory(char*)+0x5c>)
    2a20:	str	r3, [sp, #0]
    2a22:	ldr	r3, [pc, #44]	; (2a50 <newDirectory(char*)+0x60>)
    2a24:	ldr	r3, [r3, #0]
    2a26:	bl	d654 <sprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName);
    2a2a:	ldr	r0, [pc, #40]	; (2a54 <newDirectory(char*)+0x64>)
    2a2c:	bl	b570 <Print::println()>
	size_t print(const char s[])			{ return write(s); }
    2a30:	ldr	r1, [pc, #36]	; (2a58 <newDirectory(char*)+0x68>)
    2a32:	ldr	r0, [pc, #32]	; (2a54 <newDirectory(char*)+0x64>)
    2a34:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    2a38:	ldr	r0, [pc, #24]	; (2a54 <newDirectory(char*)+0x64>)
    2a3a:	mov	r1, r4
    2a3c:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2a40:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2a42:	add	sp, #24
    2a44:	pop	{r4, pc}
    2a46:	nop
    2a48:	.word	0x20007b7c
    2a4c:	.word	0x20007b7e
    2a50:	.word	0x2000b9c8
    2a54:	.word	0x20008944
    2a58:	.word	0x20007f40

00002a5c <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2a5c:	push	{r4, lr}
    2a5e:	sub	sp, #32
    2a60:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2a62:	add	r0, sp, #24
    2a64:	bl	3470 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2a68:	ldr	r3, [pc, #92]	; (2ac8 <newFileName(char*)+0x6c>)
    2a6a:	ldrsb.w	r0, [sp, #31]
    2a6e:	ldrh	r2, [r3, #0]
    2a70:	ldrsb.w	r1, [sp, #30]
    2a74:	sxth	r2, r2
    2a76:	ldrsb.w	r3, [sp, #29]
    2a7a:	cbnz	r2, 2ab8 <newFileName(char*)+0x5c>
      sprintf(fileName, "%s%04d_%02d_%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a7c:	str	r3, [sp, #8]
    2a7e:	ldrsb.w	r3, [sp, #27]
    2a82:	ldr	r2, [pc, #72]	; (2acc <newFileName(char*)+0x70>)
    2a84:	str	r3, [sp, #4]
    2a86:	ldrsb.w	r3, [sp, #26]
    2a8a:	strd	r1, r0, [sp, #12]
    2a8e:	str	r3, [sp, #0]
    2a90:	mov	r0, r4
    2a92:	ldrsh.w	r3, [sp, #24]
    2a96:	ldr	r1, [pc, #56]	; (2ad0 <newFileName(char*)+0x74>)
    2a98:	bl	d654 <sprintf>
    else
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2a9c:	ldr	r0, [pc, #52]	; (2ad4 <newFileName(char*)+0x78>)
    2a9e:	bl	b570 <Print::println()>
    2aa2:	ldr	r1, [pc, #52]	; (2ad8 <newFileName(char*)+0x7c>)
    2aa4:	ldr	r0, [pc, #44]	; (2ad4 <newFileName(char*)+0x78>)
    2aa6:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    2aaa:	mov	r1, r4
    2aac:	ldr	r0, [pc, #36]	; (2ad4 <newFileName(char*)+0x78>)
    2aae:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
    return 1;
}
    2ab2:	movs	r0, #1
    2ab4:	add	sp, #32
    2ab6:	pop	{r4, pc}
      sprintf(fileName, "%s_%02d%02d%02d.bin", FilePrefix, t.hour,t.min,t.sec);
    2ab8:	strd	r1, r0, [sp]
    2abc:	ldr	r2, [pc, #12]	; (2acc <newFileName(char*)+0x70>)
    2abe:	mov	r0, r4
    2ac0:	ldr	r1, [pc, #24]	; (2adc <newFileName(char*)+0x80>)
    2ac2:	bl	d654 <sprintf>
    2ac6:	b.n	2a9c <newFileName(char*)+0x40>
    2ac8:	.word	0x20028194
    2acc:	.word	0x20007b39
    2ad0:	.word	0x20007b3b
    2ad4:	.word	0x20008944
    2ad8:	.word	0x20007f40
    2adc:	.word	0x20007b5d

00002ae0 <getAlarmTime(unsigned long)>:
#include "core_pins.h"

uint32_t getAlarmTime(uint32_t secs)
{
    uint32_t dd = secs/(24*3600); // days
    uint32_t hh =(secs%(24*3600))/3600; // hour into day
    2ae0:	ldr	r2, [pc, #132]	; (2b68 <getAlarmTime(unsigned long)+0x88>)
    2ae2:	udiv	r3, r0, r2
    2ae6:	mls	r3, r2, r3, r0
    2aea:	mov.w	r2, #3600	; 0xe10
    2aee:	udiv	r3, r3, r2

    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2af2:	ldr	r2, [pc, #120]	; (2b6c <getAlarmTime(unsigned long)+0x8c>)
    2af4:	ldr	r1, [r2, #0]
    2af6:	cmp	r1, r3
{
    2af8:	push	{r4, r5, r6, lr}
    if(((hh>=t_1) && (hh<t_2)) || ((hh>=t_3) && (hh<t_4)) )
    2afa:	bhi.n	2b04 <getAlarmTime(unsigned long)+0x24>
    2afc:	ldr	r1, [pc, #112]	; (2b70 <getAlarmTime(unsigned long)+0x90>)
    2afe:	ldr	r1, [r1, #0]
    2b00:	cmp	r1, r3
    2b02:	bhi.n	2b2c <getAlarmTime(unsigned long)+0x4c>
    2b04:	ldr	r5, [pc, #108]	; (2b74 <getAlarmTime(unsigned long)+0x94>)
    2b06:	ldr	r1, [r5, #0]
    2b08:	cmp	r1, r3
    2b0a:	bhi.n	2b14 <getAlarmTime(unsigned long)+0x34>
    2b0c:	ldr	r1, [pc, #104]	; (2b78 <getAlarmTime(unsigned long)+0x98>)
    2b0e:	ldr	r1, [r1, #0]
    2b10:	cmp	r1, r3
    2b12:	bhi.n	2b2c <getAlarmTime(unsigned long)+0x4c>
    {
      secs = ((secs/t_rep)+1)*t_rep;
    }
    else if (hh<t_1)  // from mid-night to t_1
    2b14:	ldr	r6, [r2, #0]
    uint32_t dd = secs/(24*3600); // days
    2b16:	ldr	r1, [pc, #80]	; (2b68 <getAlarmTime(unsigned long)+0x88>)
    else if (hh<t_1)  // from mid-night to t_1
    2b18:	cmp	r6, r3
    uint32_t dd = secs/(24*3600); // days
    2b1a:	udiv	r4, r0, r1
    else if (hh<t_1)  // from mid-night to t_1
    2b1e:	bhi.n	2b3c <getAlarmTime(unsigned long)+0x5c>
    {
      secs = dd*(24*3600) + t_1*3600;
    }
    else if (hh>=t_2) // between the two recording periods
    2b20:	ldr	r6, [pc, #76]	; (2b70 <getAlarmTime(unsigned long)+0x90>)
    2b22:	ldr	r6, [r6, #0]
    2b24:	cmp	r6, r3
    2b26:	bhi.n	2b4a <getAlarmTime(unsigned long)+0x6a>
    {
      secs = dd*(24*3600) + t_3*3600;
    2b28:	ldr	r0, [r5, #0]
    2b2a:	b.n	2b3e <getAlarmTime(unsigned long)+0x5e>
      secs = ((secs/t_rep)+1)*t_rep;
    2b2c:	ldr	r2, [pc, #76]	; (2b7c <getAlarmTime(unsigned long)+0x9c>)
    2b2e:	ldr	r3, [r2, #0]
    2b30:	udiv	r3, r0, r3
    2b34:	ldr	r0, [r2, #0]
    2b36:	mla	r0, r3, r0, r0
    {
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;

    }
    return secs;
}
    2b3a:	pop	{r4, r5, r6, pc}
      secs = dd*(24*3600) + t_1*3600;
    2b3c:	ldr	r0, [r2, #0]
      secs = dd*(24*3600) + t_3*3600;
    2b3e:	mov.w	r3, #3600	; 0xe10
    2b42:	muls	r0, r3
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b44:	mla	r0, r1, r4, r0
    2b48:	b.n	2b3a <getAlarmTime(unsigned long)+0x5a>
    else if (hh>=t_4) // after the second recording period (goes into next day)
    2b4a:	ldr	r5, [pc, #44]	; (2b78 <getAlarmTime(unsigned long)+0x98>)
    2b4c:	ldr	r6, [r5, #0]
    2b4e:	cmp	r6, r3
    2b50:	bhi.n	2b3a <getAlarmTime(unsigned long)+0x5a>
      secs = dd*(24*3600) + (t_1+24-t_4)*3600;
    2b52:	ldr	r0, [r2, #0]
    2b54:	ldr	r3, [r5, #0]
    2b56:	subs	r0, r0, r3
    2b58:	mov.w	r3, #3600	; 0xe10
    2b5c:	muls	r0, r3
    2b5e:	add.w	r0, r0, #86016	; 0x15000
    2b62:	add.w	r0, r0, #384	; 0x180
    2b66:	b.n	2b44 <getAlarmTime(unsigned long)+0x64>
    2b68:	.word	0x00015180
    2b6c:	.word	0x20028148
    2b70:	.word	0x20008f00
    2b74:	.word	0x20008f04
    2b78:	.word	0x20008f08
    2b7c:	.word	0x20008f14

00002b80 <do_hibernate(unsigned long)>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(uint32_t t_rep)
{
    2b80:	push	{r3, r4, r5, lr}
    uint32_t tmp = SNVS_LPCR; // save control register
    2b82:	ldr	r3, [pc, #96]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2b84:	ldr	r5, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2b86:	ldr	r2, [r3, #76]	; 0x4c
    2b88:	orr.w	r2, r2, #1
    2b8c:	str	r2, [r3, #76]	; 0x4c

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2b8e:	ldr	r2, [r3, #56]	; 0x38
    2b90:	bic.w	r2, r2, #2
    2b94:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2b96:	ldr	r2, [r3, #56]	; 0x38
    2b98:	lsls	r2, r2, #30
    2b9a:	bmi.n	2b96 <do_hibernate(unsigned long)+0x16>

    __disable_irq();
    2b9c:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2b9e:	ldr	r4, [pc, #68]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2ba0:	ldr	r0, [r4, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2ba2:	ldr	r3, [r4, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2ba4:	ldr	r1, [r4, #84]	; 0x54
    2ba6:	ldr	r2, [r4, #80]	; 0x50
    2ba8:	cmp	r1, r3
    2baa:	bne.n	2ba0 <do_hibernate(unsigned long)+0x20>
    2bac:	cmp	r2, r0
    2bae:	bne.n	2ba0 <do_hibernate(unsigned long)+0x20>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    2bb0:	lsrs	r3, r3, #15

    //set alarm
    secs = getAlarmTime(secs);
    2bb2:	orr.w	r0, r3, r0, lsl #17
    2bb6:	bl	2ae0 <getAlarmTime(unsigned long)>

    SNVS_LPTAR = secs;
    2bba:	str	r0, [r4, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    2bbc:	ldr	r4, [pc, #36]	; (2be4 <do_hibernate(unsigned long)+0x64>)
    2bbe:	ldr	r3, [r4, #88]	; 0x58
    2bc0:	cmp	r3, r0
    2bc2:	bne.n	2bbe <do_hibernate(unsigned long)+0x3e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    2bc4:	orr.w	r5, r5, #2
    2bc8:	str	r5, [r4, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    2bca:	ldr	r3, [r4, #56]	; 0x38
    2bcc:	lsls	r3, r3, #30
    2bce:	bpl.n	2bca <do_hibernate(unsigned long)+0x4a>

    __enable_irq();
    2bd0:	cpsie	i
  
    // shutdown acq board
    acqPower(LOW);
    2bd2:	movs	r0, #0
    2bd4:	bl	32a2 <acqPower(int)>
    //
    SNVS_LPCR |= (1 << 6); // turn off power
    2bd8:	ldr	r3, [r4, #56]	; 0x38
    2bda:	orr.w	r3, r3, #64	; 0x40
    2bde:	str	r3, [r4, #56]	; 0x38
    while (1) asm("wfi");  
    2be0:	wfi
    2be2:	b.n	2be0 <do_hibernate(unsigned long)+0x60>
    2be4:	.word	0x400d4000

00002be8 <storeData(short)>:
{
    2be8:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    2bea:	mov	r4, r0
{
    2bec:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    2bee:	cmp	r0, #0
    2bf0:	bne.n	2cf2 <storeData(short)+0x10a>
        if(newDirectory(dirName))
    2bf2:	ldr	r0, [pc, #488]	; (2ddc <storeData(short)+0x1f4>)
    2bf4:	bl	29f0 <newDirectory(char*)>
    2bf8:	cmp	r0, #0
    2bfa:	beq.n	2c92 <storeData(short)+0xaa>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    2bfc:	ldr	r5, [pc, #480]	; (2de0 <storeData(short)+0x1f8>)
    2bfe:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    2c00:	ldr.w	r1, [r3, #1152]	; 0x480
    2c04:	cbz	r1, 2c34 <storeData(short)+0x4c>
    return tmp.open(this, path, O_RDONLY);
    2c06:	mov	r3, r4
    2c08:	ldr	r2, [pc, #464]	; (2ddc <storeData(short)+0x1f4>)
    2c0a:	mov	r0, sp
    2c0c:	str	r4, [sp, #0]
    2c0e:	bl	68ae <FatFile::open(FatVolume*, char const*, int)>
    2c12:	cbnz	r0, 2c6e <storeData(short)+0x86>
    2c14:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    2c16:	ldr.w	r1, [r3, #1152]	; 0x480
    2c1a:	cbnz	r1, 2c4c <storeData(short)+0x64>
    2c1c:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    2c20:	cbz	r0, 2c60 <storeData(short)+0x78>
  ExFatFile() {}
    2c22:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    2c24:	movs	r3, #1
    2c26:	add.w	r1, r0, #1096	; 0x448
    2c2a:	ldr	r2, [pc, #432]	; (2ddc <storeData(short)+0x1f4>)
    2c2c:	mov	r0, sp
    2c2e:	bl	5c1a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    2c32:	b.n	2c5e <storeData(short)+0x76>
    2c34:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    2c38:	cmp	r0, #0
    2c3a:	beq.n	2c14 <storeData(short)+0x2c>
    return tmp.open(this, path, O_RDONLY);
    2c3c:	mov	r3, r1
    2c3e:	str	r1, [sp, #48]	; 0x30
    2c40:	ldr	r2, [pc, #408]	; (2ddc <storeData(short)+0x1f4>)
    2c42:	mov	r1, r0
    2c44:	mov	r0, sp
    2c46:	bl	53a2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    2c4a:	b.n	2c12 <storeData(short)+0x2a>
    2c4c:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    2c4e:	ldr	r2, [pc, #396]	; (2ddc <storeData(short)+0x1f4>)
    2c50:	add.w	r1, r1, #1096	; 0x448
    2c54:	mov	r0, sp
    2c56:	str	r3, [sp, #0]
    2c58:	movs	r3, #1
    2c5a:	bl	69b6 <FatFile::mkdir(FatFile*, char const*, bool)>
    2c5e:	cbnz	r0, 2c6e <storeData(short)+0x86>
    2c60:	ldr	r1, [pc, #384]	; (2de4 <storeData(short)+0x1fc>)
            {   Serial.println("Failing open file");
    2c62:	ldr	r0, [pc, #388]	; (2de8 <storeData(short)+0x200>)
    2c64:	bl	2716 <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    2c68:	mov.w	r4, #4294967295
    2c6c:	b.n	2dd4 <storeData(short)+0x1ec>
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    2c6e:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    2c70:	ldr.w	r0, [r3, #1152]	; 0x480
    2c74:	cbz	r0, 2c82 <storeData(short)+0x9a>
    2c76:	ldr	r1, [pc, #356]	; (2ddc <storeData(short)+0x1f4>)
    2c78:	bl	7210 <FatVolume::chdir(char const*)>
    2c7c:	cbnz	r0, 2c92 <storeData(short)+0xaa>
    2c7e:	ldr	r1, [pc, #364]	; (2dec <storeData(short)+0x204>)
    2c80:	b.n	2c62 <storeData(short)+0x7a>
    2c82:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    2c86:	cmp	r0, #0
    2c88:	beq.n	2c7e <storeData(short)+0x96>
    2c8a:	ldr	r1, [pc, #336]	; (2ddc <storeData(short)+0x1f4>)
    2c8c:	bl	57ec <ExFatVolume::chdir(char const*)>
    2c90:	b.n	2c7c <storeData(short)+0x94>
        if(newFileName(fileName))
    2c92:	ldr	r0, [pc, #348]	; (2df0 <storeData(short)+0x208>)
    2c94:	bl	2a5c <newFileName(char*)>
    2c98:	cmp	r0, #0
    2c9a:	beq.n	2c68 <storeData(short)+0x80>
            file = sd->open(fileName, FILE_WRITE); 
    2c9c:	ldr	r1, [pc, #320]	; (2de0 <storeData(short)+0x1f8>)
    2c9e:	movw	r3, #16898	; 0x4202
    2ca2:	ldr	r2, [pc, #332]	; (2df0 <storeData(short)+0x208>)
    2ca4:	mov	r0, sp
    2ca6:	ldr	r1, [r1, #0]
    2ca8:	bl	7ba0 <FsVolume::open(char const*, int)>
class Print
    2cac:	ldr	r4, [pc, #324]	; (2df4 <storeData(short)+0x20c>)
    2cae:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    2cb0:	add	r1, sp, #16
    2cb2:	add.w	r0, r4, #16
    2cb6:	str	r3, [r4, #4]
    2cb8:	ldr	r3, [sp, #8]
    2cba:	str	r3, [r4, #8]
    2cbc:	ldrb.w	r3, [sp, #12]
    2cc0:	strb	r3, [r4, #12]
    2cc2:	bl	7996 <FsBaseFile::operator=(FsBaseFile const&)>
    2cc6:	mov	r0, sp
    2cc8:	bl	edc <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ccc:	ldr	r3, [r4, #72]	; 0x48
    2cce:	cbz	r3, 2ce8 <storeData(short)+0x100>
    {   nbuf=0;
    2cd0:	ldr	r3, [pc, #292]	; (2df8 <storeData(short)+0x210>)
    2cd2:	movs	r2, #0
    2cd4:	str	r2, [r3, #0]
        if(proc==0)
    2cd6:	ldr	r3, [pc, #292]	; (2dfc <storeData(short)+0x214>)
    2cd8:	ldrh	r3, [r3, #0]
    2cda:	sxth	r3, r3
    2cdc:	cbz	r3, 2d38 <storeData(short)+0x150>
          makeHeader(fileHeader);
    2cde:	ldr	r0, [pc, #288]	; (2e00 <storeData(short)+0x218>)
    2ce0:	bl	28c8 <makeHeader(long*)>
          hdr=(char *)fileHeader;
    2ce4:	ldr	r1, [pc, #280]	; (2e00 <storeData(short)+0x218>)
    2ce6:	b.n	2d4a <storeData(short)+0x162>
    2ce8:	ldr	r3, [r4, #76]	; 0x4c
    2cea:	cmp	r3, #0
    2cec:	bne.n	2cd0 <storeData(short)+0xe8>
            {   Serial.println("Failing open file");
    2cee:	ldr	r1, [pc, #276]	; (2e04 <storeData(short)+0x21c>)
    2cf0:	b.n	2c62 <storeData(short)+0x7a>
    if(status==OPENED) // file is open: write first record (header)
    2cf2:	cmp	r0, #1
    2cf4:	beq.n	2cd0 <storeData(short)+0xe8>
    if(status==RUNNING) // file is open and header written: store data records
    2cf6:	cmp	r0, #2
    2cf8:	beq.n	2d5a <storeData(short)+0x172>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    2cfa:	subs	r3, r4, #3
    2cfc:	uxth	r3, r3
    2cfe:	cmp	r3, #2
    2d00:	bhi.n	2dd4 <storeData(short)+0x1ec>
    2d02:	ldr	r3, [pc, #240]	; (2df4 <storeData(short)+0x20c>)
    2d04:	ldr	r2, [r3, #72]	; 0x48
    2d06:	cbnz	r2, 2d0c <storeData(short)+0x124>
    2d08:	ldr	r3, [r3, #76]	; 0x4c
    2d0a:	cbz	r3, 2d2c <storeData(short)+0x144>
        {   if(proc==0)
    2d0c:	ldr	r3, [pc, #236]	; (2dfc <storeData(short)+0x214>)
    2d0e:	ldrh	r3, [r3, #0]
    2d10:	sxth	r3, r3
    2d12:	cbnz	r3, 2d26 <storeData(short)+0x13e>
              char *hdr = headerUpdate(nbuf*MAX_DISK_BUFFER*4);
    2d14:	ldr	r3, [pc, #224]	; (2df8 <storeData(short)+0x210>)
    2d16:	mov.w	r0, #6144	; 0x1800
    2d1a:	ldr	r3, [r3, #0]
    2d1c:	muls	r0, r3
    2d1e:	bl	2854 <headerUpdate(long)>
              writeHeader(hdr);
    2d22:	bl	2868 <writeHeader(char*)>
            file.close();
    2d26:	ldr	r0, [pc, #224]	; (2e08 <storeData(short)+0x220>)
    2d28:	bl	796c <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    2d2c:	cmp	r4, #4
    2d2e:	bne.n	2dcc <storeData(short)+0x1e4>
        { do_hibernate(t_rep);
    2d30:	ldr	r3, [pc, #216]	; (2e0c <storeData(short)+0x224>)
    2d32:	ldr	r0, [r3, #0]
    2d34:	bl	2b80 <do_hibernate(unsigned long)>
          hdr = headerInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    2d38:	ldr	r3, [pc, #212]	; (2e10 <storeData(short)+0x228>)
    2d3a:	movs	r1, #1
    2d3c:	movs	r2, #32
    2d3e:	ldr	r0, [r3, #0]
    2d40:	ldr	r3, [pc, #208]	; (2e14 <storeData(short)+0x22c>)
    2d42:	ldr	r3, [r3, #0]
    2d44:	bl	2780 <headerInit(long, long, long, int)>
    2d48:	mov	r1, r0
        if(file.write(hdr,512) < 512) 
    2d4a:	mov.w	r2, #512	; 0x200
    2d4e:	ldr	r0, [pc, #184]	; (2e08 <storeData(short)+0x220>)
    2d50:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d54:	cmp.w	r0, #512	; 0x200
    2d58:	bcc.n	2dc8 <storeData(short)+0x1e0>
        if((nd=file.write((const void *)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    2d5a:	mov.w	r2, #6144	; 0x1800
    2d5e:	ldr	r1, [pc, #184]	; (2e18 <storeData(short)+0x230>)
    2d60:	ldr	r0, [pc, #164]	; (2e08 <storeData(short)+0x220>)
    2d62:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    2d66:	cmp.w	r0, #6144	; 0x1800
    2d6a:	mov	r4, r0
    2d6c:	ldr	r5, [pc, #136]	; (2df8 <storeData(short)+0x210>)
    2d6e:	bcs.n	2dbe <storeData(short)+0x1d6>
	size_t print(const char s[])			{ return write(s); }
    2d70:	ldr	r1, [pc, #168]	; (2e1c <storeData(short)+0x234>)
    2d72:	ldr	r0, [pc, #116]	; (2de8 <storeData(short)+0x200>)
    2d74:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2d78:	movs	r3, #0
    2d7a:	movs	r2, #10
    2d7c:	mov	r1, r4
    2d7e:	ldr	r0, [pc, #104]	; (2de8 <storeData(short)+0x200>)
          status=DOCLOSE; 
    2d80:	movs	r4, #3
    2d82:	bl	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t print(const char s[])			{ return write(s); }
    2d86:	ldr	r1, [pc, #152]	; (2e20 <storeData(short)+0x238>)
    2d88:	ldr	r0, [pc, #92]	; (2de8 <storeData(short)+0x200>)
    2d8a:	bl	26f2 <Print::write(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    2d8e:	movs	r1, #2
    2d90:	ldr	r0, [pc, #84]	; (2de8 <storeData(short)+0x200>)
    2d92:	bl	b55e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    2d96:	ldr	r0, [pc, #80]	; (2de8 <storeData(short)+0x200>)
    2d98:	bl	b570 <Print::println()>
        disk_count++;
    2d9c:	ldr	r2, [pc, #132]	; (2e24 <storeData(short)+0x23c>)
    2d9e:	ldr	r3, [r2, #0]
    2da0:	adds	r3, #1
    2da2:	str	r3, [r2, #0]
    2da4:	mov.w	r2, #1000	; 0x3e8
    2da8:	ldr	r3, [r5, #0]
    2daa:	udiv	r1, r3, r2
    2dae:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    2db2:	cmp	r3, #0
    2db4:	bne.n	2cfa <storeData(short)+0x112>
    BaseFile::sync();
    2db6:	ldr	r0, [pc, #80]	; (2e08 <storeData(short)+0x220>)
    2db8:	bl	2728 <FsBaseFile::sync()>
  }
    2dbc:	b.n	2cfa <storeData(short)+0x112>
          nbuf++;
    2dbe:	ldr	r3, [r5, #0]
    2dc0:	movs	r4, #2
    2dc2:	adds	r3, #1
    2dc4:	str	r3, [r5, #0]
    2dc6:	b.n	2d9c <storeData(short)+0x1b4>
        { status = DOCLOSE;
    2dc8:	movs	r4, #3
    2dca:	b.n	2cfa <storeData(short)+0x112>
        status= (status==DOCLOSE)? CLOSED : STOPPED;
    2dcc:	subs	r4, #3
    2dce:	it	ne
    2dd0:	movne.w	r4, #4294967295
}
    2dd4:	mov	r0, r4
    2dd6:	add	sp, #84	; 0x54
    2dd8:	pop	{r4, r5, pc}
    2dda:	nop
    2ddc:	.word	0x200281e6
    2de0:	.word	0x20008ef8
    2de4:	.word	0x20007dfa
    2de8:	.word	0x20008944
    2dec:	.word	0x20007e06
    2df0:	.word	0x20028236
    2df4:	.word	0x20027984
    2df8:	.word	0x20027a00
    2dfc:	.word	0x20028194
    2e00:	.word	0x2000d1d0
    2e04:	.word	0x20007e12
    2e08:	.word	0x20027994
    2e0c:	.word	0x20008f14
    2e10:	.word	0x20008ef0
    2e14:	.word	0x2000b9c8
    2e18:	.word	0x2000b9d0
    2e1c:	.word	0x20007e24
    2e20:	.word	0x20007f48
    2e24:	.word	0x20027964

00002e28 <saveData(short)>:
    if(status==STOPPED) 
    2e28:	adds	r3, r0, #1
{
    2e2a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e2e:	mov	r4, r0
    if(status==STOPPED) 
    2e30:	bne.n	2e60 <saveData(short)+0x38>
      while(queue_isBusy()); //wait if acq writes to queue
    2e32:	bl	25a8 <queue_isBusy()>
    2e36:	mov	r5, r0
    2e38:	cmp	r0, #0
    2e3a:	bne.n	2e32 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    2e3c:	ldr	r0, [pc, #212]	; (2f14 <saveData(short)+0xec>)
    2e3e:	bl	2610 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2e42:	ldr	r3, [pc, #208]	; (2f14 <saveData(short)+0xec>)
    2e44:	ldr	r2, [pc, #208]	; (2f18 <saveData(short)+0xf0>)
    2e46:	ldr.w	r1, [r3], #4
    2e4a:	str.w	r1, [r2, r5, lsl #2]
    2e4e:	adds	r5, #1
    2e50:	cmp	r5, #8
    2e52:	bne.n	2e46 <saveData(short)+0x1e>
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
    2e54:	ldr	r3, [pc, #196]	; (2f1c <saveData(short)+0xf4>)
    2e56:	str.w	r5, [r3, #132]	; 0x84
}
    2e5a:	mov	r0, r4
    2e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    2e60:	ldr	r3, [pc, #184]	; (2f1c <saveData(short)+0xf4>)
    2e62:	movs	r2, #8
    if(status<CLOSED) return status; // we are stopped: don't do anything
    2e64:	cmp	r0, #0
    2e66:	str.w	r2, [r3, #136]	; 0x88
    2e6a:	blt.n	2e5a <saveData(short)+0x32>
    status=checkEndOfFile(status);
    2e6c:	bl	2980 <checkEndOfFile(short)>
    2e70:	mov	r4, r0
    if(getDataCount()>=nblocks)
    2e72:	bl	258c <getDataCount()>
    2e76:	cmp	r0, #11
    2e78:	bls.n	2f08 <saveData(short)+0xe0>
      digitalWrite(13,HIGH);
    2e7a:	movs	r1, #1
    2e7c:	movs	r0, #13
    2e7e:	bl	ad3c <digitalWrite>
      if(proc==0)
    2e82:	ldr	r3, [pc, #156]	; (2f20 <saveData(short)+0xf8>)
    2e84:	ldrh	r5, [r3, #0]
    2e86:	sxth	r5, r5
    2e88:	cbnz	r5, 2ed6 <saveData(short)+0xae>
    2e8a:	ldr	r7, [pc, #136]	; (2f14 <saveData(short)+0xec>)
    2e8c:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2e8e:	bl	25a8 <queue_isBusy()>
    2e92:	mov	r6, r0
    2e94:	cmp	r0, #0
    2e96:	bne.n	2e8e <saveData(short)+0x66>
        for(int ii=0; ii<nblocks; ii++)
    2e98:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    2e9a:	mov	r0, r8
    2e9c:	bl	2610 <pullData(unsigned long*)>
        for(int ii=0; ii<nblocks; ii++)
    2ea0:	add.w	r8, r8, #512	; 0x200
    2ea4:	cmp	r5, #12
    2ea6:	bne.n	2e8e <saveData(short)+0x66>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    2ea8:	ldr	r3, [pc, #108]	; (2f18 <saveData(short)+0xf0>)
    2eaa:	ldr.w	r2, [r7], #4
    2eae:	str.w	r2, [r3, r6, lsl #2]
    2eb2:	adds	r6, #1
    2eb4:	cmp	r6, #8
    2eb6:	bne.n	2eaa <saveData(short)+0x82>
          { diskBuffer[ii]=tempBuffer0[ii];
    2eb8:	mov.w	r2, #6144	; 0x1800
    2ebc:	ldr	r1, [pc, #84]	; (2f14 <saveData(short)+0xec>)
    2ebe:	ldr	r0, [pc, #100]	; (2f24 <saveData(short)+0xfc>)
    2ec0:	bl	9470 <memcpy>
      if(haveStore)
    2ec4:	ldr	r3, [pc, #96]	; (2f28 <saveData(short)+0x100>)
    2ec6:	ldr	r3, [r3, #0]
    2ec8:	cmp	r3, #0
    2eca:	beq.n	2e5a <saveData(short)+0x32>
        status=storeData(status);
    2ecc:	mov	r0, r4
}
    2ece:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    2ed2:	b.w	2be8 <storeData(short)>
    2ed6:	ldr	r6, [pc, #76]	; (2f24 <saveData(short)+0xfc>)
        for(int ii=0; ii<NDBL; ii++)
    2ed8:	movs	r7, #0
      if(proc==0)
    2eda:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    2edc:	bl	25a8 <queue_isBusy()>
    2ee0:	mov	r5, r0
    2ee2:	cmp	r0, #0
    2ee4:	bne.n	2edc <saveData(short)+0xb4>
        for(int ii=0; ii<NDBL; ii++)
    2ee6:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    2ee8:	mov	r0, r8
    2eea:	bl	2610 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    2eee:	add.w	r8, r8, #512	; 0x200
    2ef2:	cmp	r7, #12
    2ef4:	bne.n	2edc <saveData(short)+0xb4>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    2ef6:	ldr	r3, [pc, #32]	; (2f18 <saveData(short)+0xf0>)
    2ef8:	ldr.w	r2, [r6], #4
    2efc:	str.w	r2, [r3, r5, lsl #2]
    2f00:	adds	r5, #1
    2f02:	cmp	r5, #8
    2f04:	bne.n	2ef8 <saveData(short)+0xd0>
    2f06:	b.n	2ec4 <saveData(short)+0x9c>
      digitalWrite(13,LOW);
    2f08:	movs	r1, #0
    2f0a:	movs	r0, #13
    2f0c:	bl	ad3c <digitalWrite>
    2f10:	b.n	2e5a <saveData(short)+0x32>
    2f12:	nop
    2f14:	.word	0x200253dc
    2f18:	.word	0x200279d8
    2f1c:	.word	0x42004000
    2f20:	.word	0x20028194
    2f24:	.word	0x2000b9d0
    2f28:	.word	0x200279d4

00002f2c <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    2f2c:	ldr	r0, [pc, #28]	; (2f4c <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2f2e:	movs	r3, #0
    2f30:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    2f34:	ldr	r1, [pc, #24]	; (2f50 <_GLOBAL__sub_I_t_acq+0x24>)
    2f36:	strb	r3, [r0, #12]
    2f38:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    2f3c:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2f40:	ldr	r3, [pc, #16]	; (2f54 <_GLOBAL__sub_I_t_acq+0x28>)
    2f42:	ldr	r2, [pc, #20]	; (2f58 <_GLOBAL__sub_I_t_acq+0x2c>)
    2f44:	str	r3, [r0, #0]
    2f46:	b.w	b798 <__aeabi_atexit>
    2f4a:	nop
    2f4c:	.word	0x20027984
    2f50:	.word	0x00000edd
    2f54:	.word	0x20000548
    2f58:	.word	0x20008960

00002f5c <filing_init()>:
{
    2f5c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f60:	ldr	r3, [pc, #132]	; (2fe8 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    2f62:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f64:	ldr	r2, [pc, #132]	; (2fec <filing_init()+0x90>)
    2f66:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    2f6a:	ldr.w	r9, [pc, #156]	; 3008 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f6e:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    2f72:	ldr.w	r8, [pc, #152]	; 300c <filing_init()+0xb0>
    2f76:	ldr	r7, [pc, #120]	; (2ff0 <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    2f78:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    2f7a:	ldr	r3, [pc, #120]	; (2ff4 <filing_init()+0x98>)
    2f7c:	ldr	r2, [pc, #120]	; (2ff8 <filing_init()+0x9c>)
    2f7e:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    2f80:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    2f84:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    2f86:	movs	r1, #0
    2f88:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    2f8c:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    2f90:	strb.w	r1, [r5, #1224]	; 0x4c8
    2f94:	mov	r0, r6
    2f96:	bl	8d88 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    2f9a:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    2f9c:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    2fa0:	bl	8484 <SdioCard::errorCode() const>
    2fa4:	cbnz	r0, 2fc8 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    2fa6:	movs	r3, #1
    2fa8:	ldr.w	r1, [r5, #1164]	; 0x48c
    2fac:	mov	r0, r5
    2fae:	mov	r2, r3
    2fb0:	bl	7acc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    2fb4:	cbz	r0, 2fc8 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    2fb6:	ldr	r0, [pc, #56]	; (2ff0 <filing_init()+0x94>)
    2fb8:	ldr	r1, [pc, #64]	; (2ffc <filing_init()+0xa0>)
    2fba:	bl	2716 <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    2fbe:	movs	r0, #1
    2fc0:	ldr	r3, [pc, #60]	; (3000 <filing_init()+0xa4>)
    2fc2:	str	r0, [r3, #0]
}
    2fc4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    2fc8:	mov	r1, r8
    2fca:	mov	r0, r7
    2fcc:	bl	2716 <Print::println(char const*) [clone .isra.0]>
      delay(100);
    2fd0:	movs	r0, #100	; 0x64
    2fd2:	bl	a9b8 <delay>
  for(int ii=0; ii<5;ii++)
    2fd6:	subs	r4, #1
    2fd8:	bne.n	2f80 <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    2fda:	ldr	r0, [pc, #20]	; (2ff0 <filing_init()+0x94>)
    2fdc:	ldr	r1, [pc, #36]	; (3004 <filing_init()+0xa8>)
    2fde:	bl	2716 <Print::println(char const*) [clone .isra.0]>
  return 0;
    2fe2:	mov	r0, r4
    2fe4:	b.n	2fc4 <filing_init()+0x68>
    2fe6:	nop
    2fe8:	.word	0x401f4400
    2fec:	.word	0x2000b9c8
    2ff0:	.word	0x20008944
    2ff4:	.word	0x200273fc
    2ff8:	.word	0x00002661
    2ffc:	.word	0x20007afb
    3000:	.word	0x200279d4
    3004:	.word	0x20007b1d
    3008:	.word	0x20008ef8
    300c:	.word	0x20007b0d

00003010 <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    3010:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3014:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3016:	bl	abb4 <rtc_get>
    301a:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    301c:	bl	a96c <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3020:	ldr	r3, [pc, #604]	; (3280 <compress(void*)+0x270>)
  t1 = micros();
    3022:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3024:	movs	r2, #0
    3026:	ldr	r3, [r3, #0]
    3028:	ldr.w	r1, [r4, r2, lsl #2]
    302c:	str.w	r1, [r3, r2, lsl #2]
    3030:	adds	r2, #1
    3032:	cmp	r2, #128	; 0x80
    3034:	bne.n	3028 <compress(void*)+0x18>
    3036:	subs	r4, #4
    3038:	add.w	r0, r3, #508	; 0x1fc
    303c:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    303e:	ldr.w	r1, [r2, #4]!
    3042:	ldr.w	r5, [r4, #4]!
    3046:	cmp	r0, r2
    3048:	sub.w	r1, r1, r5
    304c:	str	r1, [r2, #0]
    304e:	bne.n	303e <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    3050:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    3052:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    3056:	cmp	r1, #0
    3058:	it	lt
    305a:	neglt	r1, r1
    305c:	cmp	r2, r1
    305e:	it	lt
    3060:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    3062:	cmp	r0, r3
    3064:	bne.n	3052 <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    3066:	movs	r4, #2
    3068:	movs	r1, #1
    306a:	subs	r3, r4, #1
    306c:	lsl.w	r3, r1, r3
    3070:	cmp	r3, r2
    3072:	bgt.n	307a <compress(void*)+0x6a>
    3074:	adds	r4, #1
    3076:	cmp	r4, #24
    3078:	bne.n	306a <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    307a:	ldr	r2, [pc, #520]	; (3284 <compress(void*)+0x274>)
    307c:	subs	r1, r4, #1
    307e:	ldr.w	r8, [pc, #536]	; 3298 <compress(void*)+0x288>
    3082:	ldr.w	r3, [r2, r1, lsl #2]
    3086:	mov	fp, r8
    3088:	adds	r3, #1
    308a:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    308e:	ldr	r3, [pc, #504]	; (3288 <compress(void*)+0x278>)
    3090:	ldr	r2, [r3, #0]
    3092:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    3094:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    3096:	it	hi
    3098:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    309a:	movs	r3, #1
    309c:	lsl.w	r0, r3, r4
    30a0:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    30a2:	ldr.w	r1, [r2, #4]!
    30a6:	adds	r3, #1
    30a8:	ands	r1, r0
    30aa:	cmp	r3, #128	; 0x80
    30ac:	str	r1, [r2, #0]
    30ae:	bne.n	30a2 <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30b0:	ldr	r5, [pc, #472]	; (328c <compress(void*)+0x27c>)
    30b2:	mov.w	r2, #512	; 0x200
    30b6:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    30b8:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    30bc:	mov	r0, r5
    30be:	bl	942c <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    30c2:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    30c6:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    30c8:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    30cc:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    30ce:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    30d2:	ldr	r2, [pc, #444]	; (3290 <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30d4:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    30d6:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    30d8:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    30dc:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30e0:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    30e4:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    30e6:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30e8:	str	r3, [r5, #24]
    30ea:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    30ec:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    30f0:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    30f2:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    30f4:	str.w	r3, [fp]
  int nx = MBIT;
    30f8:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    30fa:	str	r0, [r5, #20]
  {   nx -= nb;
    30fc:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    3100:	ldr.w	sl, [r5, r1, lsl #2]
    3104:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3108:	cmp.w	lr, #0
    310c:	ble.n	3156 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    310e:	lsl.w	r2, r2, lr
    3112:	mov	r3, lr
    3114:	orr.w	r2, r2, sl
    3118:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    311c:	add.w	ip, ip, #1
    3120:	cmp.w	ip, #128	; 0x80
    3124:	bne.n	30fc <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3126:	ldr.w	r8, [pc, #372]	; 329c <compress(void*)+0x28c>
    312a:	ldr.w	r4, [r8]
    312e:	add.w	r9, r4, r6
    3132:	cmp.w	r9, #128	; 0x80
    3136:	bgt.n	3186 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3138:	ldr	r0, [pc, #344]	; (3294 <compress(void*)+0x284>)
    313a:	lsls	r2, r6, #2
    313c:	ldr	r1, [pc, #332]	; (328c <compress(void*)+0x27c>)
    313e:	add.w	r0, r0, r4, lsl #2
    3142:	bl	9470 <memcpy>
    3146:	str.w	r9, [r8]
  int ret=1;
    314a:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    314e:	mov	r0, r9
    3150:	add	sp, #12
    3152:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    3156:	add.w	r9, r1, #1
      else if(nx==0) 
    315a:	bne.n	316a <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    315c:	orr.w	r2, sl, r2
          nx=MBIT;
    3160:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    3162:	str.w	r2, [r5, r1, lsl #2]
    3166:	mov	r1, r9
    3168:	b.n	311c <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    316a:	subs	r3, r4, r3
    316c:	lsr.w	r3, r2, r3
    3170:	orr.w	r3, r3, sl
    3174:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    3178:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    317c:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    317e:	lsls	r2, r3
    3180:	str.w	r2, [r5, r9, lsl #2]
    3184:	b.n	311c <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    3186:	cmp	r4, #122	; 0x7a
    3188:	ble.n	31d4 <compress(void*)+0x1c4>
    318a:	movs	r2, #0
    318c:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    318e:	ldr	r1, [pc, #260]	; (3294 <compress(void*)+0x284>)
    3190:	mov	r0, r2
    3192:	cmp	r3, #127	; 0x7f
    3194:	bls.n	31ca <compress(void*)+0x1ba>
    3196:	cmp	r4, #128	; 0x80
    3198:	rsb	r3, r4, #128	; 0x80
    319c:	it	gt
    319e:	movgt	r3, #0
    31a0:	add	r3, r4
    31a2:	cbz	r2, 31a8 <compress(void*)+0x198>
    31a4:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    31a8:	ldr	r0, [pc, #232]	; (3294 <compress(void*)+0x284>)
    31aa:	bl	25b4 <pushData(unsigned long*)>
    31ae:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31b2:	mov.w	r2, r6, lsl #2
    31b6:	ldr	r1, [pc, #212]	; (328c <compress(void*)+0x27c>)
    31b8:	ldr	r0, [pc, #216]	; (3294 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    31ba:	it	ne
    31bc:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    31c0:	bl	9470 <memcpy>
    31c4:	str.w	r6, [r8]
    31c8:	b.n	314e <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    31ca:	str.w	r0, [r1, r3, lsl #2]
    31ce:	movs	r2, #1
    31d0:	adds	r3, #1
    31d2:	b.n	3192 <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    31d4:	rsb	r3, r4, #122	; 0x7a
    31d8:	ldr	r1, [pc, #176]	; (328c <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    31da:	ldr	r2, [pc, #184]	; (3294 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    31dc:	orr.w	r3, r3, r0, lsl #16
    31e0:	mov	r0, r1
    31e2:	str	r3, [r5, #20]
    31e4:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    31e6:	ldr.w	ip, [r0], #4
    31ea:	str.w	ip, [r2, r3, lsl #2]
    31ee:	adds	r3, #1
    31f0:	cmp	r3, #128	; 0x80
    31f2:	bne.n	31e6 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    31f4:	ldr	r0, [pc, #156]	; (3294 <compress(void*)+0x284>)
    31f6:	rsb	sl, r4, #128	; 0x80
    31fa:	str	r1, [sp, #4]
    31fc:	str.w	r3, [r8]
    3200:	bl	25b4 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3204:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3206:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    320a:	subs.w	r9, r0, #0
    320e:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3210:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3214:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3218:	it	ne
    321a:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    321e:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3220:	lsls	r3, r3, #16
    3222:	orrs	r3, r7
    3224:	ldr	r7, [pc, #108]	; (3294 <compress(void*)+0x284>)
    3226:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3228:	mov	r2, r7
    322a:	movs	r3, #0
    322c:	str.w	r3, [r8]
    3230:	subs	r0, #1
    3232:	bne.n	3262 <compress(void*)+0x252>
    3234:	cbz	r3, 323c <compress(void*)+0x22c>
    3236:	movs	r3, #6
    3238:	str.w	r3, [r8]
    323c:	ldr.w	r1, [r8]
    3240:	movs	r3, #0
    3242:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    3246:	cmp	sl, r6
    3248:	blt.n	326e <compress(void*)+0x25e>
    324a:	subs	r4, #128	; 0x80
    324c:	add	r4, r6
    324e:	cmp	r6, fp
    3250:	it	lt
    3252:	movlt	r4, #0
    3254:	add	r4, r1
    3256:	cmp	r3, #0
    3258:	beq.w	314e <compress(void*)+0x13e>
    325c:	str.w	r4, [r8]
  return ret;
    3260:	b.n	314e <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3262:	ldr.w	r3, [r1], #4
    3266:	str.w	r3, [r7], #4
    326a:	movs	r3, #1
    326c:	b.n	3230 <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    326e:	ldr.w	r3, [r5, sl, lsl #2]
    3272:	add.w	sl, sl, #1
    3276:	str.w	r3, [r2], #4
    327a:	movs	r3, #1
    327c:	b.n	3246 <compress(void*)+0x236>
    327e:	nop
    3280:	.word	0x20008f18
    3284:	.word	0x20027a24
    3288:	.word	0x200279f8
    328c:	.word	0x20026df4
    3290:	.word	0x200281ba
    3294:	.word	0x20026be4
    3298:	.word	0x200271f4
    329c:	.word	0x20027448

000032a0 <adc_init()>:
        }
        Serial.println();
    }
#else
    // there is no ADC to be controlled
    void adc_init(void) {}
    32a0:	bx	lr

000032a2 <acqPower(int)>:
    void acqPower(int flag) {(void) flag;}
    32a2:	bx	lr

000032a4 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    32a4:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now it is minutes
    32a6:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    32a8:	movw	lr, #365	; 0x16d
    32ac:	movs	r6, #100	; 0x64
    32ae:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32b2:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now it is hours
    32b6:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32ba:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now it is hours
    32be:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now it is minutes
    32c2:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now it is days
    32c4:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now it is hours
    32c6:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now it is days
    32c8:	udiv	r2, r3, r0
    32cc:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    32d0:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now it is days
    32d2:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    32d4:	movs	r3, #7
    32d6:	udiv	r3, r0, r3
    32da:	rsb	r3, r3, r3, lsl #3
    32de:	subs	r0, r0, r3
    32e0:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    32e2:	movs	r0, #0
    days = 0;
    32e4:	mov	r4, r0
    32e6:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    32e8:	addw	r3, r3, #1970	; 0x7b2
    32ec:	ands.w	r7, r3, #3
    32f0:	bne.n	3374 <time2date(unsigned long, datetime_t*)+0xd0>
    32f2:	sdiv	r5, r3, r6
    32f6:	mls	r5, r6, r5, r3
    32fa:	cmp	r5, #0
    32fc:	bne.n	337a <time2date(unsigned long, datetime_t*)+0xd6>
    32fe:	sdiv	r5, r3, ip
    3302:	mls	r5, ip, r5, r3
    3306:	cmp	r5, #0
    3308:	ite	ne
    330a:	movne	r5, lr
    330c:	moveq.w	r5, #366	; 0x16e
    3310:	add	r4, r5
    3312:	adds	r0, #1
    3314:	cmp	r2, r4
    3316:	bcs.n	32e6 <time2date(unsigned long, datetime_t*)+0x42>
    3318:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    331a:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    331c:	udiv	r6, r3, r0
    3320:	mls	r6, r0, r6, r3
    3324:	mov.w	r0, #400	; 0x190
    3328:	udiv	r5, r3, r0
    332c:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3330:	cbnz	r7, 3380 <time2date(unsigned long, datetime_t*)+0xdc>
    3332:	cbnz	r6, 3386 <time2date(unsigned long, datetime_t*)+0xe2>
    3334:	cmp	r3, #0
    3336:	movw	r0, #365	; 0x16d
    333a:	it	eq
    333c:	moveq.w	r0, #366	; 0x16e
    time  -= days; // now it is days in this year, starting at 0
    3340:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3342:	ldr.w	ip, [pc, #88]	; 339c <time2date(unsigned long, datetime_t*)+0xf8>
    time  -= days; // now it is days in this year, starting at 0
    3346:	add	r2, r0
    3348:	movs	r0, #0
      if (month==1) { // february
    334a:	cmp	r0, #1
    334c:	uxtb	r5, r0
    334e:	bne.n	338c <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3350:	cbnz	r7, 3392 <time2date(unsigned long, datetime_t*)+0xee>
    3352:	cbnz	r6, 3396 <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3354:	cmp	r3, #0
    3356:	ite	ne
    3358:	movne	r4, #28
    335a:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    335c:	cmp	r4, r2
    335e:	bhi.n	336a <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3360:	adds	r0, #1
        time -= monthLength;
    3362:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3364:	cmp	r0, #12
    3366:	bne.n	334a <time2date(unsigned long, datetime_t*)+0xa6>
    3368:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    336a:	adds	r5, #1
    tm->day = time + 1;     // day of month
    336c:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    336e:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3370:	strb	r2, [r1, #3]
  }
    3372:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3374:	movw	r5, #365	; 0x16d
    3378:	b.n	3310 <time2date(unsigned long, datetime_t*)+0x6c>
    337a:	mov.w	r5, #366	; 0x16e
    337e:	b.n	3310 <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3380:	movw	r0, #365	; 0x16d
    3384:	b.n	3340 <time2date(unsigned long, datetime_t*)+0x9c>
    3386:	mov.w	r0, #366	; 0x16e
    338a:	b.n	3340 <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    338c:	ldrb.w	r4, [r0, ip]
    3390:	b.n	335c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3392:	movs	r4, #28
    3394:	b.n	335c <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3396:	movs	r4, #29
    3398:	b.n	335c <time2date(unsigned long, datetime_t*)+0xb8>
    339a:	nop
    339c:	.word	0x20007e8b

000033a0 <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0;
    33a0:	ldrh	r3, [r0, #0]
    // seconds from 1970 till 1 jan 00:00:00 of the given year
    seconds= year*(SECS_PER_DAY * 365);
    for (ii = 0; ii < year; ii++) {
    33a2:	movw	r1, #1970	; 0x7b2
    seconds= year*(SECS_PER_DAY * 365);
    33a6:	ldr	r2, [pc, #184]	; (3460 <date2time(datetime_t*)+0xc0>)
    year=tm->year-YEAR0;
    33a8:	adds	r3, #78	; 0x4e
    33aa:	uxtb	r3, r3
  {
    33ac:	push	{r4, r5, r6, r7, lr}
    seconds= year*(SECS_PER_DAY * 365);
    33ae:	muls	r2, r3
    for (ii = 0; ii < year; ii++) {
    33b0:	movs	r5, #100	; 0x64
    33b2:	mov.w	r6, #400	; 0x190
    33b6:	subw	r4, r1, #1970	; 0x7b2
    33ba:	cmp	r3, r4
    33bc:	bgt.n	3418 <date2time(datetime_t*)+0x78>
      }
    }
    
    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33be:	addw	r3, r3, #1970	; 0x7b2
    33c2:	movs	r1, #100	; 0x64
    for (ii = 1; ii < tm->month; ii++) {
    33c4:	ldrsb.w	r7, [r0, #2]
    33c8:	ldr	r6, [pc, #152]	; (3464 <date2time(datetime_t*)+0xc4>)
        seconds += SECS_PER_DAY * 29;
      } else {
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    33ca:	ldr.w	ip, [pc, #156]	; 3468 <date2time(datetime_t*)+0xc8>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33ce:	udiv	r4, r3, r1
    33d2:	mls	r4, r1, r4, r3
    33d6:	mov.w	r1, #400	; 0x190
    33da:	udiv	r5, r3, r1
    33de:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    33e2:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    33e4:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    33e8:	cmp	r7, r1
    33ea:	bgt.n	343c <date2time(datetime_t*)+0x9c>
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    33ec:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    33f0:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    33f4:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    33f8:	rsb	r3, r3, r3, lsl #4
    33fc:	lsls	r3, r3, #2
    seconds+= tm->sec;
    33fe:	mla	r3, r4, r1, r3
    3402:	ldrsb.w	r1, [r0, #7]
    3406:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3408:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    340c:	ldr	r0, [pc, #88]	; (3468 <date2time(datetime_t*)+0xc8>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    340e:	subs	r1, #1
    seconds+= tm->sec;
    3410:	mla	r0, r0, r1, r3
    return seconds; 
  }
    3414:	add	r0, r2
    3416:	pop	{r4, r5, r6, r7, pc}
      if (LEAP_YEAR(ii)) {
    3418:	lsls	r4, r1, #30
    341a:	bne.n	3438 <date2time(datetime_t*)+0x98>
    341c:	sdiv	r4, r1, r5
    3420:	mls	r4, r5, r4, r1
    3424:	cbnz	r4, 3430 <date2time(datetime_t*)+0x90>
    3426:	sdiv	r4, r1, r6
    342a:	mls	r4, r6, r4, r1
    342e:	cbnz	r4, 3438 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY;   // add extra days for leap years
    3430:	add.w	r2, r2, #86016	; 0x15000
    3434:	add.w	r2, r2, #384	; 0x180
    for (ii = 0; ii < year; ii++) {
    3438:	adds	r1, #1
    343a:	b.n	33b6 <date2time(datetime_t*)+0x16>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    343c:	cmp	r1, #2
    343e:	bne.n	3454 <date2time(datetime_t*)+0xb4>
    3440:	cbnz	r3, 3454 <date2time(datetime_t*)+0xb4>
    3442:	cbnz	r4, 3446 <date2time(datetime_t*)+0xa6>
    3444:	cbnz	r5, 3454 <date2time(datetime_t*)+0xb4>
        seconds += SECS_PER_DAY * 29;
    3446:	add.w	r2, r2, #2490368	; 0x260000
    344a:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    344e:	adds	r1, #1
    3450:	adds	r6, #1
    3452:	b.n	33e8 <date2time(datetime_t*)+0x48>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3454:	ldrb.w	lr, [r6]
    3458:	mla	r2, ip, lr, r2
    345c:	b.n	344e <date2time(datetime_t*)+0xae>
    345e:	nop
    3460:	.word	0x01e13380
    3464:	.word	0x20007e8b
    3468:	.word	0x00015180

0000346c <rtc_setup(unsigned char, unsigned char)>:

  int16_t rtc_setup(uint8_t sda, uint8_t scl)
  {
    return 1;
  }
    346c:	movs	r0, #1
    346e:	bx	lr

00003470 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3470:	push	{r0, r1, r2, lr}
    3472:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3474:	bl	abb4 <rtc_get>
    3478:	ldr	r1, [sp, #4]
    347a:	bl	32a4 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    347e:	movs	r0, #1
    3480:	add	sp, #12
    3482:	ldr.w	pc, [sp], #4

00003486 <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3486:	push	{r3, lr}
    rtc_set(date2time(t));
    3488:	bl	33a0 <date2time(datetime_t*)>
    348c:	bl	abd8 <rtc_set>
    return 1;
  }
    3490:	movs	r0, #1
    3492:	pop	{r3, pc}

00003494 <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3494:	push	{r0, r1, r4, r5, r6, lr}
    3496:	mov	r5, r1
    3498:	mov	r4, r2
    349a:	mov	r6, r0
    rtc_get_datetime(&t);
    349c:	mov	r0, sp
    349e:	bl	3470 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    34a2:	mov	r0, sp
    t.year=year;
    34a4:	strh.w	r6, [sp]
    t.month=month;
    34a8:	strb.w	r5, [sp, #2]
    t.day=day;
    34ac:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    34b0:	bl	3486 <rtc_set_datetime(datetime_t*)>
  }
    34b4:	add	sp, #8
    34b6:	pop	{r4, r5, r6, pc}

000034b8 <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    34b8:	push	{r0, r1, r4, r5, r6, lr}
    34ba:	mov	r5, r1
    34bc:	mov	r4, r2
    34be:	mov	r6, r0
    rtc_get_datetime(&t);
    34c0:	mov	r0, sp
    34c2:	bl	3470 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    34c6:	mov	r0, sp
    t.hour=hour;
    34c8:	strb.w	r6, [sp, #5]
    t.min=minutes;
    34cc:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    34d0:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    34d4:	bl	3486 <rtc_set_datetime(datetime_t*)>
  }
    34d8:	add	sp, #8
    34da:	pop	{r4, r5, r6, pc}

000034dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    34dc:	push	{r3, r4, r5, lr}
    34de:	mov	r4, r0
    34e0:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34e2:	movs	r2, #60	; 0x3c
    34e4:	mov	r1, r5
    34e6:	mov	r0, r4
    34e8:	bl	b0fc <usb_mtp_send>
    34ec:	cmp	r0, #0
    34ee:	ble.n	34e2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    34f0:	pop	{r3, r4, r5, pc}
	...

000034f4 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    34f4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34f8:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    34fa:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    34fe:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3500:	ldr.w	r3, [r1, #1064]	; 0x428
    3504:	cbnz	r3, 350e <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3506:	add.w	r2, r0, #544	; 0x220
    350a:	ldr	r4, [pc, #92]	; (3568 <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    350c:	str	r2, [r4, #0]
        write_length_ += len;
    350e:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3510:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3514:	add.w	r9, r0, #1056	; 0x420
    3518:	ldr.w	sl, [pc, #76]	; 3568 <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    351c:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3520:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    3524:	cmp	r6, r8
    3526:	bgt.n	352c <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3528:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    352c:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3530:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3534:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3536:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    353a:	mov	r0, r3
    353c:	cmp	r5, r2
    353e:	it	ge
    3540:	movge	r5, r2
    3542:	mov	r2, r5
          pos += to_copy;
    3544:	add	r8, r5
          memcpy(dst,src,to_copy);
    3546:	bl	9470 <memcpy>
    354a:	mov	r3, r0
          src += to_copy;
    354c:	add	r7, r5
          dst += to_copy;
    354e:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3550:	cmp	r9, r3
          dst += to_copy;
    3552:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3556:	bne.n	3524 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3558:	mov.w	r1, #512	; 0x200
    355c:	mov	r0, r4
    355e:	bl	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3562:	str.w	r4, [sl]
    3566:	b.n	3524 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3568:	.word	0x20027450

0000356c <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    356c:	push	{r4, r5, r6, lr}
    356e:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3570:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3572:	subs	r4, r1, #1
    int num = 0;
    3574:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    3576:	ldr	r3, [r0, #0]
    3578:	mov	r1, r4
    357a:	ldr	r3, [r3, #28]
    357c:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    357e:	ldr	r0, [r5, #0]
    3580:	mov	r1, r4
    3582:	ldr	r3, [r0, #0]
    3584:	ldr	r3, [r3, #32]
    3586:	blx	r3
    3588:	cbnz	r0, 358e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    358a:	mov	r0, r6
    358c:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    358e:	adds	r6, #1
    3590:	b.n	357e <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003592 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3592:	ldr	r0, [r0, #0]
    3594:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3596:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3598:	ldr	r4, [r0, #0]
    359a:	ldr	r4, [r4, #76]	; 0x4c
    359c:	blx	r4
    }
    359e:	movw	r2, #8193	; 0x2001
    35a2:	movw	r3, #8197	; 0x2005
    35a6:	cmp	r0, #0
    35a8:	ite	ne
    35aa:	movne	r0, r2
    35ac:	moveq	r0, r3
    35ae:	pop	{r4, pc}

000035b0 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    35b0:	ldr	r0, [r0, #0]
    35b2:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    35b4:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    35b6:	ldr	r4, [r0, #0]
    35b8:	ldr	r4, [r4, #80]	; 0x50
    35ba:	mov	ip, r4
    }
    35bc:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    35c0:	bx	ip
	...

000035c4 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    35c4:	ldr	r3, [pc, #8]	; (35d0 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    35c6:	ldr	r0, [r0, #0]
      sessionID_ = id;
    35c8:	str	r1, [r3, #0]
      storage_->ResetIndex();
    35ca:	ldr	r3, [r0, #0]
    35cc:	ldr	r3, [r3, #68]	; 0x44
    35ce:	bx	r3
    35d0:	.word	0x20027f7c

000035d4 <MTPD::pull_packet(unsigned char*)>:
    {
    35d4:	push	{r4, lr}
    35d6:	mov	r4, r1
      while(!usb_mtp_available());
    35d8:	bl	b0cc <usb_mtp_available>
    35dc:	cmp	r0, #0
    35de:	beq.n	35d8 <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    35e0:	mov	r0, r4
    35e2:	movs	r1, #60	; 0x3c
    }
    35e4:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    35e8:	b.w	b038 <usb_mtp_recv>

000035ec <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    35ec:	add.w	r3, r0, #8192	; 0x2000
    35f0:	push	{r4, r5}
    35f2:	ldrb.w	r5, [r3, #1060]	; 0x424
    35f6:	cbz	r5, 3606 <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    35f8:	ldr.w	r1, [r3, #1064]	; 0x428
    35fc:	add	r1, r2
    }
    35fe:	pop	{r4, r5}
        write_length_ += len;
    3600:	str.w	r1, [r3, #1064]	; 0x428
    }
    3604:	bx	lr
    3606:	pop	{r4, r5}
    3608:	b.w	34f4 <MTPD::write(char const*, int) [clone .part.0]>

0000360c <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    360c:	push	{r0, r1, r2, lr}
    360e:	movs	r2, #1
    3610:	strb.w	r1, [sp, #7]
    3614:	add.w	r1, sp, #7
    3618:	bl	35ec <MTPD::write(char const*, int)>
    361c:	add	sp, #12
    361e:	ldr.w	pc, [sp], #4

00003622 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3622:	push	{r0, r1, r2, lr}
    3624:	movs	r2, #2
    3626:	strh.w	r1, [sp, #6]
    362a:	add.w	r1, sp, #6
    362e:	bl	35ec <MTPD::write(char const*, int)>
    3632:	add	sp, #12
    3634:	ldr.w	pc, [sp], #4

00003638 <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3638:	push	{r3, r4, r5, lr}
    363a:	mov	r4, r1
    if (*str) 
    363c:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    363e:	mov	r5, r0
    if (*str) 
    3640:	cbz	r1, 366a <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3642:	mov	r0, r4
    3644:	subs	r4, #1
    3646:	bl	e0c0 <strlen>
    364a:	adds	r0, #1
    364c:	uxtb	r1, r0
    364e:	mov	r0, r5
    3650:	bl	360c <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3654:	ldrb.w	r1, [r4, #1]!
    3658:	mov	r0, r5
    365a:	cbnz	r1, 3664 <MTPD::writestring(char const*)+0x2c>
  }
    365c:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3660:	b.w	3622 <MTPD::write16(unsigned short)>
    3664:	bl	3622 <MTPD::write16(unsigned short)>
    3668:	b.n	3654 <MTPD::writestring(char const*)+0x1c>
  }
    366a:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    366e:	b.w	360c <MTPD::write8(unsigned char)>
	...

00003674 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3674:	movw	r3, #54274	; 0xd402
    3678:	cmp	r1, r3
    367a:	bne.n	3682 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    367c:	ldr	r1, [pc, #4]	; (3684 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    367e:	b.w	3638 <MTPD::writestring(char const*)>
  }
    3682:	bx	lr
    3684:	.word	0x20007ef9

00003688 <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    3688:	movw	r3, #54274	; 0xd402
    368c:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    368e:	push	{r4, lr}
    3690:	mov	r4, r0
    switch (prop) {
    3692:	bne.n	36c6 <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3694:	bl	3622 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3698:	mov	r0, r4
    369a:	movw	r1, #65535	; 0xffff
    369e:	bl	3622 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    36a2:	mov	r0, r4
    36a4:	movs	r1, #0
    36a6:	bl	360c <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    36aa:	mov	r0, r4
    36ac:	ldr	r1, [pc, #24]	; (36c8 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    36ae:	bl	3638 <MTPD::writestring(char const*)>
    36b2:	mov	r0, r4
    36b4:	ldr	r1, [pc, #16]	; (36c8 <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    36b6:	bl	3638 <MTPD::writestring(char const*)>
        write8(0);       // no form
    36ba:	mov	r0, r4
    36bc:	movs	r1, #0
  }
    36be:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    36c2:	b.w	360c <MTPD::write8(unsigned char)>
  }
    36c6:	pop	{r4, pc}
    36c8:	.word	0x20007ef9

000036cc <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    36cc:	push	{r0, r1, r2, lr}
    36ce:	movs	r2, #4
    36d0:	str	r1, [sp, #4]
    36d2:	add.w	r1, sp, r2
    36d6:	bl	35ec <MTPD::write(char const*, int)>
    36da:	add	sp, #12
    36dc:	ldr.w	pc, [sp], #4

000036e0 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    36e0:	push	{r4, r5, r6, lr}
    36e2:	mov	r4, r0
    36e4:	sub	sp, #24
    write16(100);  // MTP version
    36e6:	movs	r1, #100	; 0x64
    36e8:	ldr	r6, [pc, #240]	; (37dc <MTPD::WriteDescriptor()+0xfc>)
    36ea:	bl	3622 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    36ee:	movs	r1, #6
    36f0:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    36f2:	movs	r5, #0
    write32(6);    // MTP extension
    36f4:	bl	36cc <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    36f8:	movs	r1, #100	; 0x64
    36fa:	mov	r0, r4
    36fc:	bl	3622 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3700:	ldr	r1, [pc, #220]	; (37e0 <MTPD::WriteDescriptor()+0x100>)
    3702:	mov	r0, r4
    3704:	bl	3638 <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3708:	movs	r1, #0
    370a:	mov	r0, r4
    370c:	bl	3622 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3710:	movs	r1, #20
    3712:	mov	r0, r4
    3714:	bl	36cc <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3718:	adds	r5, #1
    371a:	ldrh.w	r1, [r6], #2
    371e:	mov	r0, r4
    3720:	bl	3622 <MTPD::write16(unsigned short)>
    3724:	cmp	r5, #20
    3726:	bne.n	3718 <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3728:	movs	r1, #4
    372a:	mov	r0, r4
    372c:	bl	36cc <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3730:	movw	r1, #16388	; 0x4004
    3734:	mov	r0, r4
    3736:	bl	3622 <MTPD::write16(unsigned short)>
    373a:	movw	r1, #16389	; 0x4005
    373e:	mov	r0, r4
    3740:	bl	3622 <MTPD::write16(unsigned short)>
    3744:	movw	r1, #16395	; 0x400b
    3748:	mov	r0, r4
    374a:	bl	3622 <MTPD::write16(unsigned short)>
    374e:	movw	r1, #16396	; 0x400c
    3752:	mov	r0, r4
    3754:	bl	3622 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3758:	movs	r1, #1
    375a:	mov	r0, r4
    375c:	bl	36cc <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3760:	movw	r1, #54274	; 0xd402
    3764:	mov	r0, r4
    3766:	bl	3622 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    376a:	movs	r1, #0
    376c:	mov	r0, r4
    376e:	bl	36cc <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3772:	movs	r1, #2
    3774:	mov	r0, r4
    3776:	bl	36cc <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    377a:	mov.w	r1, #12288	; 0x3000
    377e:	mov	r0, r4
    3780:	bl	3622 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3784:	movw	r1, #12289	; 0x3001
    3788:	mov	r0, r4
    378a:	bl	3622 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    378e:	ldr	r1, [pc, #84]	; (37e4 <MTPD::WriteDescriptor()+0x104>)
    3790:	mov	r0, r4
    3792:	bl	3638 <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3796:	ldr	r1, [pc, #80]	; (37e8 <MTPD::WriteDescriptor()+0x108>)
    3798:	mov	r0, r4
    379a:	bl	3638 <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    379e:	vldr	s0, [pc, #76]	; 37ec <MTPD::WriteDescriptor()+0x10c>
    37a2:	add	r2, sp, #4
    37a4:	movs	r1, #2
    37a6:	movs	r0, #3
    37a8:	bl	a724 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    37ac:	mov	r2, r5
    37ae:	ldr	r1, [pc, #64]	; (37f0 <MTPD::WriteDescriptor()+0x110>)
    37b0:	add	r0, sp, #4
    37b2:	bl	d9a0 <strlcat>
    writestring( buf );    
    37b6:	add	r1, sp, #4
    37b8:	mov	r0, r4
    37ba:	bl	3638 <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    37be:	ldr	r1, [pc, #52]	; (37f4 <MTPD::WriteDescriptor()+0x114>)
    37c0:	add	r2, sp, #4
    writestring( buf );    
    37c2:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    37c4:	ldrh.w	r0, [r1, #2]!
    37c8:	subs	r3, #1
    37ca:	strb.w	r0, [r2], #1
    37ce:	bne.n	37c4 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    37d0:	add	r1, sp, #4
    37d2:	mov	r0, r4
    37d4:	bl	3638 <MTPD::writestring(char const*)>
  }
    37d8:	add	sp, #24
    37da:	pop	{r4, r5, r6, pc}
    37dc:	.word	0x200079d4
    37e0:	.word	0x20007ed5
    37e4:	.word	0x20007ee9
    37e8:	.word	0x20007ef9
    37ec:	.word	0x3fcb851f
    37f0:	.word	0x20007eee
    37f4:	.word	0x20008f1c

000037f8 <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    37f8:	push	{r4, r5, r6, lr}
    37fa:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    37fc:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    37fe:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3800:	ldr	r3, [r0, #0]
    3802:	ldr	r3, [r3, #4]
    3804:	blx	r3
    write32(num); // number of storages (disks)
    3806:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3808:	mov	r5, r0
    write32(num); // number of storages (disks)
    380a:	mov	r0, r4
    380c:	bl	36cc <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3810:	cmp	r6, r5
    3812:	bne.n	3816 <MTPD::WriteStorageIDs()+0x1e>
  }
    3814:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3816:	adds	r6, #1
    3818:	mov	r0, r4
    381a:	mov	r1, r6
    381c:	bl	36cc <MTPD::write32(unsigned long)>
    3820:	b.n	3810 <MTPD::WriteStorageIDs()+0x18>

00003822 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3822:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    3824:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    3828:	mov	r4, r0
    382a:	mov	r6, r2
    if (write_get_length_) {
    382c:	ldrb.w	r3, [r7, #1060]	; 0x424
    3830:	cbz	r3, 3840 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    3832:	bl	356c <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    3836:	adds	r0, #1
      write_length_ *= 4;
    3838:	lsls	r0, r0, #2
    383a:	str.w	r0, [r7, #1064]	; 0x428
  }
    383e:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    3840:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    3842:	bl	356c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    3846:	mov	r1, r0
    3848:	mov	r0, r4
    384a:	bl	36cc <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    384e:	ldr	r0, [r4, #0]
    3850:	mov	r2, r6
    3852:	mov	r1, r5
    3854:	ldr	r3, [r0, #0]
    3856:	ldr	r3, [r3, #28]
    3858:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    385a:	ldr	r0, [r4, #0]
    385c:	mov	r1, r5
    385e:	ldr	r3, [r0, #0]
    3860:	ldr	r3, [r3, #32]
    3862:	blx	r3
    3864:	mov	r1, r0
    3866:	cmp	r0, #0
    3868:	beq.n	383e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    386a:	mov	r0, r4
    386c:	bl	36cc <MTPD::write32(unsigned long)>
    3870:	b.n	385a <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00003874 <MTPD::GetObjectInfo(unsigned long)>:
  {
    3874:	push	{r4, r5, r6, r7, lr}
    3876:	mov	r4, r0
    3878:	sub	sp, #284	; 0x11c
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store);
    387a:	ldr	r0, [r0, #0]
    387c:	add.w	r6, sp, #14
    3880:	add	r5, sp, #20
    3882:	ldr	r3, [r0, #0]
    3884:	add	r2, sp, #24
    3886:	str	r6, [sp, #4]
    3888:	str	r5, [sp, #0]
    388a:	ldr	r7, [r3, #36]	; 0x24
    388c:	add	r3, sp, #16
    388e:	blx	r7
    uint32_t storage = Store2Storage(store);
    3890:	ldrh.w	r1, [sp, #14]
    write32(storage); // storage
    3894:	mov	r0, r4
    3896:	adds	r1, #1
    3898:	bl	36cc <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    389c:	ldr	r3, [sp, #16]
    389e:	movw	r1, #12289	; 0x3001
    38a2:	mov	r0, r4
    38a4:	adds	r3, #1
    38a6:	it	ne
    38a8:	movne	r1, #0
    38aa:	bl	3622 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    38ae:	mov	r0, r4
    38b0:	movs	r1, #0
    38b2:	bl	3622 <MTPD::write16(unsigned short)>
    write32(size); // size
    38b6:	ldr	r1, [sp, #16]
    38b8:	mov	r0, r4
    38ba:	bl	36cc <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    38be:	mov	r0, r4
    38c0:	movs	r1, #0
    38c2:	bl	3622 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    38c6:	mov	r0, r4
    38c8:	movs	r1, #0
    38ca:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    38ce:	mov	r0, r4
    38d0:	movs	r1, #0
    38d2:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    38d6:	mov	r0, r4
    38d8:	movs	r1, #0
    38da:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0); // pix width
    38de:	mov	r0, r4
    38e0:	movs	r1, #0
    38e2:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0); // pix height
    38e6:	mov	r0, r4
    38e8:	movs	r1, #0
    38ea:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    38ee:	mov	r0, r4
    38f0:	movs	r1, #0
    38f2:	bl	36cc <MTPD::write32(unsigned long)>
    write32(parent); // parent
    38f6:	ldr	r1, [sp, #20]
    38f8:	mov	r0, r4
    38fa:	bl	36cc <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    38fe:	ldr	r1, [sp, #16]
    3900:	mov	r0, r4
    3902:	adds	r3, r1, #1
    3904:	negs	r1, r3
    3906:	adcs	r1, r3
    3908:	bl	3622 <MTPD::write16(unsigned short)>
    write32(0); // association description
    390c:	mov	r0, r4
    390e:	movs	r1, #0
    3910:	bl	36cc <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    3914:	mov	r0, r4
    3916:	movs	r1, #0
    3918:	bl	36cc <MTPD::write32(unsigned long)>
    writestring(filename);
    391c:	add	r1, sp, #24
    391e:	mov	r0, r4
    3920:	bl	3638 <MTPD::writestring(char const*)>
    writestring("");  // date created
    3924:	mov	r0, r4
    3926:	ldr	r1, [pc, #24]	; (3940 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3928:	bl	3638 <MTPD::writestring(char const*)>
    writestring("");  // date modified
    392c:	mov	r0, r4
    392e:	ldr	r1, [pc, #16]	; (3940 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3930:	bl	3638 <MTPD::writestring(char const*)>
    writestring("");  // keywords
    3934:	ldr	r1, [pc, #8]	; (3940 <MTPD::GetObjectInfo(unsigned long)+0xcc>)
    3936:	mov	r0, r4
    3938:	bl	3638 <MTPD::writestring(char const*)>
  }
    393c:	add	sp, #284	; 0x11c
    393e:	pop	{r4, r5, r6, r7, pc}
    3940:	.word	0x20007bbb

00003944 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    3944:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    3946:	ldr	r6, [pc, #36]	; (396c <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3948:	movs	r4, #0
    394a:	ldr	r7, [pc, #36]	; (3970 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    394c:	mov	r5, r0
      write32(propertyListNum);
    394e:	ldr	r1, [r6, #0]
    3950:	bl	36cc <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    3954:	ldr	r3, [r6, #0]
    3956:	cmp	r3, r4
    3958:	bhi.n	395c <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    395a:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    395c:	ldrh.w	r1, [r7], #2
    3960:	mov	r0, r5
    3962:	adds	r4, #1
    3964:	bl	3622 <MTPD::write16(unsigned short)>
    3968:	b.n	3954 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    396a:	nop
    396c:	.word	0x20008ef4
    3970:	.word	0x200079c4

00003974 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    3974:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3978:	mov	r4, r0
    397a:	sub	sp, #284	; 0x11c
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    397c:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    397e:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3980:	add.w	r8, sp, #14
    3984:	add	r6, sp, #20
    3986:	ldr	r3, [r0, #0]
    3988:	add	r2, sp, #24
    398a:	str.w	r8, [sp, #4]
    { char name[MAX_FILENAME_LEN];
    398e:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store);
    3990:	str	r6, [sp, #0]
    3992:	ldr.w	r9, [r3, #36]	; 0x24
    3996:	add	r3, sp, #16
    3998:	blx	r9
      switch(p2)
    399a:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    399e:	ldrh.w	r3, [sp, #14]
      switch(p2)
    39a2:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    39a4:	ldr	r1, [sp, #16]
      uint32_t storage = Store2Storage(store);
    39a6:	add.w	r8, r3, #1
      switch(p2)
    39aa:	bhi.n	39cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x58>
    39ac:	cmp.w	r5, #56320	; 0xdc00
    39b0:	bls.n	39dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    39b2:	sub.w	r5, r5, #56320	; 0xdc00
    39b6:	subs	r5, #1
    39b8:	cmp	r5, #10
    39ba:	bhi.n	39dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    39bc:	tbb	[pc, r5]
    39c0:	.word	0x37201611
    39c4:	.word	0x27220e0e
    39c8:	.short	0x0e27
    39ca:	.byte	0x29
    39cb:	.byte	0x00
    39cc:	movw	r3, #56385	; 0xdc41
    39d0:	cmp	r5, r3
    39d2:	beq.n	3a1c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa8>
    39d4:	movw	r3, #56388	; 0xdc44
    39d8:	cmp	r5, r3
    39da:	beq.n	3a04 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90>
    }
    39dc:	add	sp, #284	; 0x11c
    39de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          write32(storage);
    39e2:	mov	r1, r8
          write32(0);
    39e4:	mov	r0, r4
    39e6:	bl	36cc <MTPD::write32(unsigned long)>
    }
    39ea:	b.n	39dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(dir?0x3001:0x3000);
    39ec:	adds	r1, #1
    39ee:	movw	r1, #12289	; 0x3001
    39f2:	it	ne
    39f4:	movne.w	r1, #12288	; 0x3000
          write16(0);
    39f8:	mov	r0, r4
    39fa:	bl	3622 <MTPD::write16(unsigned short)>
          break;
    39fe:	b.n	39dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          write16(0);
    3a00:	movs	r1, #0
    3a02:	b.n	39f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x84>
          writestring(name);
    3a04:	add	r1, sp, #24
          writestring("");
    3a06:	mov	r0, r4
    3a08:	bl	3638 <MTPD::writestring(char const*)>
          break;
    3a0c:	b.n	39dc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
          writestring("");
    3a0e:	ldr	r1, [pc, #40]	; (3a38 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc4>)
    3a10:	b.n	3a06 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x92>
          write32((store==parent)? 0: parent);
    3a12:	ldr	r1, [r6, #0]
    3a14:	cmp	r3, r1
    3a16:	it	eq
    3a18:	moveq	r1, #0
    3a1a:	b.n	39e4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
          write32(p1);
    3a1c:	mov	r1, r7
    3a1e:	mov	r0, r4
    3a20:	bl	36cc <MTPD::write32(unsigned long)>
          write32(parent);
    3a24:	ldr	r1, [r6, #0]
    3a26:	mov	r0, r4
    3a28:	bl	36cc <MTPD::write32(unsigned long)>
          write32(storage);
    3a2c:	mov	r1, r8
    3a2e:	mov	r0, r4
    3a30:	bl	36cc <MTPD::write32(unsigned long)>
          write32(0);
    3a34:	movs	r1, #0
    3a36:	b.n	39e4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70>
    3a38:	.word	0x20007bbb

00003a3c <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    3a3c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3a40:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3a42:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    3a44:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    3a46:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    3a48:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3a4a:	mov.w	fp, #0
    3a4e:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    3a50:	ldr	r6, [pc, #228]	; (3b38 <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    3a52:	ldr	r3, [r3, #20]
    3a54:	blx	r3
    3a56:	cmp	r0, #0
    3a58:	mov	r0, r4
    3a5a:	ite	ne
    3a5c:	movne	r1, #1
    3a5e:	moveq	r1, #4
    3a60:	bl	3622 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    3a64:	ldr	r0, [r4, #0]
    3a66:	mov	r1, r7
    3a68:	ldr	r3, [r0, #0]
    3a6a:	ldr	r3, [r3, #24]
    3a6c:	blx	r3
    3a6e:	adds	r0, #1
    3a70:	uxth	r1, r0
    3a72:	mov	r0, r4
    3a74:	bl	3622 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    3a78:	mov	r0, r4
    3a7a:	movs	r1, #0
    3a7c:	bl	3622 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    3a80:	ldr	r0, [r4, #0]
    3a82:	mov	r1, r7
    3a84:	ldr	r3, [r0, #0]
    3a86:	ldr	r3, [r3, #12]
    3a88:	blx	r3
    3a8a:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    3a8c:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    3a8e:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    3a90:	mov	r1, r7
    3a92:	ldr	r3, [r0, #0]
    3a94:	ldr	r3, [r3, #16]
    3a96:	blx	r3
    3a98:	ldr	r3, [r6, #0]
    3a9a:	mov	r9, r0
    3a9c:	mov	sl, r1
    3a9e:	ldr	r3, [r3, #4]
    3aa0:	movs	r2, #5
    3aa2:	ldr	r1, [pc, #152]	; (3b3c <MTPD::GetStorageInfo(unsigned long)+0x100>)
    3aa4:	mov	r0, r6
    3aa6:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3aa8:	movs	r3, #10
    3aaa:	mov	r2, r5
    3aac:	mov	r0, r6
    3aae:	strd	r3, fp, [sp]
    3ab2:	mov	r3, r8
    3ab4:	bl	b5d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3ab8:	mov	r0, r6
    3aba:	bl	b570 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    3abe:	ldr	r3, [r6, #0]
    3ac0:	ldr	r1, [pc, #124]	; (3b40 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    3ac2:	movs	r2, #5
    3ac4:	ldr	r3, [r3, #4]
    3ac6:	mov	r0, r6
    3ac8:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    3aca:	movs	r3, #10
    3acc:	mov	r2, r9
    3ace:	mov	r0, r6
    3ad0:	str	r3, [sp, #0]
    3ad2:	mov	r3, sl
    3ad4:	str.w	fp, [sp, #4]
    3ad8:	bl	b5d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    3adc:	mov	r0, r6
    3ade:	bl	b570 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3ae2:	movs	r2, #8
    3ae4:	mov	r0, r4
    3ae6:	add.w	r1, sp, r2
    3aea:	strd	r5, r8, [sp, #8]
    3aee:	bl	35ec <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    3af2:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3af6:	mov.w	r2, #8
    3afa:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    3afc:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3b00:	add.w	r1, sp, r2
    3b04:	strd	r5, r3, [sp, #8]
    3b08:	bl	35ec <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    3b0c:	mov	r0, r4
    3b0e:	mov.w	r1, #4294967295
    3b12:	bl	36cc <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    3b16:	ldr	r0, [r4, #0]
    3b18:	mov	r1, r7
    3b1a:	ldr	r3, [r0, #0]
    3b1c:	ldr	r3, [r3, #8]
    3b1e:	blx	r3
    3b20:	mov	r1, r0
    writestring(name);  // storage descriptor
    3b22:	mov	r0, r4
    3b24:	bl	3638 <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    3b28:	ldr	r1, [pc, #24]	; (3b44 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    3b2a:	mov	r0, r4
  }
    3b2c:	add	sp, #20
    3b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    3b32:	b.w	3638 <MTPD::writestring(char const*)>
    3b36:	nop
    3b38:	.word	0x20008944
    3b3c:	.word	0x20007ec9
    3b40:	.word	0x20007ecf
    3b44:	.word	0x20007bbb

00003b48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    3b48:	movw	r2, #56331	; 0xdc0b
    3b4c:	cmp	r1, r2
    {
    3b4e:	push	{r0, r1, r4, r6, r7, lr}
    3b50:	mov	r4, r0
      switch(p1)
    3b52:	bhi.n	3b74 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    3b54:	cmp.w	r1, #56320	; 0xdc00
    3b58:	bls.n	3b84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3b5a:	sub.w	r3, r1, #56320	; 0xdc00
    3b5e:	subs	r3, #1
    3b60:	cmp	r3, #10
    3b62:	bhi.n	3b84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    3b64:	tbb	[pc, r3]
    3b68:	.word	0x413e2210
    3b6c:	.word	0x69570e0e
    3b70:	.short	0x0e75
    3b72:	.byte	0x78
    3b73:	.byte	0x00
    3b74:	movw	r2, #56385	; 0xdc41
    3b78:	cmp	r1, r2
    3b7a:	beq.n	3c5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    3b7c:	movw	r2, #56388	; 0xdc44
    3b80:	cmp	r1, r2
    3b82:	beq.n	3c40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    3b84:	add	sp, #8
    3b86:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    3b88:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    3b8c:	mov	r0, r4
    3b8e:	bl	3622 <MTPD::write16(unsigned short)>
          write16(6);
    3b92:	mov	r0, r4
    3b94:	movs	r1, #6
    3b96:	bl	3622 <MTPD::write16(unsigned short)>
          write8(0); //get
    3b9a:	mov	r0, r4
    3b9c:	movs	r1, #0
    3b9e:	bl	360c <MTPD::write8(unsigned char)>
          write32(0);
    3ba2:	movs	r1, #0
    3ba4:	mov	r0, r4
    3ba6:	bl	36cc <MTPD::write32(unsigned long)>
          write32(0);
    3baa:	b.n	3bce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    3bac:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    3bb0:	mov	r0, r4
    3bb2:	bl	3622 <MTPD::write16(unsigned short)>
          write16(0x004);
    3bb6:	movs	r1, #4
    3bb8:	mov	r0, r4
    3bba:	bl	3622 <MTPD::write16(unsigned short)>
          write8(0); //get
    3bbe:	movs	r1, #0
    3bc0:	mov	r0, r4
    3bc2:	bl	360c <MTPD::write8(unsigned char)>
          write16(0);
    3bc6:	movs	r1, #0
    3bc8:	mov	r0, r4
    3bca:	bl	3622 <MTPD::write16(unsigned short)>
          write32(0);
    3bce:	mov	r0, r4
    3bd0:	movs	r1, #0
    3bd2:	bl	36cc <MTPD::write32(unsigned long)>
          write8(0);
    3bd6:	movs	r1, #0
    3bd8:	mov	r0, r4
    }
    3bda:	add	sp, #8
    3bdc:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    3be0:	b.w	360c <MTPD::write8(unsigned char)>
          write16(0xDC03);
    3be4:	movw	r1, #56323	; 0xdc03
    3be8:	b.n	3bb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    3bea:	movw	r1, #56324	; 0xdc04
    3bee:	bl	3622 <MTPD::write16(unsigned short)>
          write16(0x008);
    3bf2:	movs	r1, #8
    3bf4:	mov	r0, r4
    3bf6:	bl	3622 <MTPD::write16(unsigned short)>
          write8(0); //get
    3bfa:	movs	r1, #0
    3bfc:	mov	r0, r4
    3bfe:	bl	360c <MTPD::write8(unsigned char)>
          write64(0);
    3c02:	movs	r2, #0
    3c04:	movs	r3, #0
    3c06:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3c0a:	movs	r2, #8
    3c0c:	mov	r1, sp
    3c0e:	mov	r0, r4
    3c10:	bl	35ec <MTPD::write(char const*, int)>
          write32(0);
    3c14:	b.n	3bce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    3c16:	movw	r1, #56327	; 0xdc07
    3c1a:	bl	3622 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3c1e:	movw	r1, #65535	; 0xffff
    3c22:	mov	r0, r4
    3c24:	bl	3622 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    3c28:	movs	r1, #1
          write8(0); //get
    3c2a:	mov	r0, r4
    3c2c:	bl	360c <MTPD::write8(unsigned char)>
          write8(0);
    3c30:	movs	r1, #0
    3c32:	mov	r0, r4
    3c34:	bl	360c <MTPD::write8(unsigned char)>
    3c38:	b.n	3bce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    3c3a:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    3c3e:	mov	r0, r4
          write16(0xDC44);
    3c40:	bl	3622 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    3c44:	movw	r1, #65535	; 0xffff
    3c48:	mov	r0, r4
    3c4a:	bl	3622 <MTPD::write16(unsigned short)>
          write8(0); //get
    3c4e:	movs	r1, #0
    3c50:	b.n	3c2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    3c52:	movw	r1, #56329	; 0xdc09
    3c56:	b.n	3c3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    3c58:	movw	r1, #56331	; 0xdc0b
    3c5c:	b.n	3b8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    3c5e:	bl	3622 <MTPD::write16(unsigned short)>
          write16(0x0A);
    3c62:	movs	r1, #10
    3c64:	mov	r0, r4
    3c66:	movs	r6, #0
    3c68:	bl	3622 <MTPD::write16(unsigned short)>
          write8(0); //get
    3c6c:	movs	r7, #0
    3c6e:	movs	r1, #0
    3c70:	mov	r0, r4
    3c72:	bl	360c <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    3c76:	movs	r2, #8
    3c78:	mov	r1, sp
    3c7a:	mov	r0, r4
    3c7c:	strd	r6, r7, [sp]
    3c80:	bl	35ec <MTPD::write(char const*, int)>
          write64(0);
    3c84:	strd	r6, r7, [sp]
    3c88:	b.n	3c0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

00003c8a <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    3c8a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c8e:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    3c90:	ldr	r0, [r0, #0]
    3c92:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    3c94:	add.w	r5, r6, #8192	; 0x2000
    {
    3c98:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3c9c:	ldr	r3, [r3, #40]	; 0x28
    {
    3c9e:	sub	sp, #20
    3ca0:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3ca4:	blx	r3
      if (write_get_length_) {
    3ca6:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    3caa:	mov	r8, r0
      if (write_get_length_) {
    3cac:	cbz	r4, 3cc2 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    3cae:	ldr.w	r3, [r5, #1064]	; 0x428
    3cb2:	add	r3, r0
    3cb4:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    3cb8:	add	sp, #20
    3cba:	vpop	{d8}
    3cbe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3cc2:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    3cc6:	movs	r7, #12
    3cc8:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3ccc:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    3cd0:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    3cd4:	str	r4, [sp, #12]
        while(pos<size)
    3cd6:	ldr	r3, [sp, #12]
    3cd8:	cmp	r3, r8
    3cda:	bcc.n	3cf6 <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    3cdc:	cmp	r7, #0
    3cde:	beq.n	3cb8 <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ce0:	mov.w	r1, #512	; 0x200
    3ce4:	add.w	r0, r6, #544	; 0x220
    }
    3ce8:	add	sp, #20
    3cea:	vpop	{d8}
    3cee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3cf2:	b.w	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    3cf6:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3cfa:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    3cfc:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3d00:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    3d04:	bne.n	3d28 <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3d06:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    3d08:	cmp.w	r9, #8192	; 0x2000
    3d0c:	it	cc
    3d0e:	movcc	r3, r9
    3d10:	vmov	r1, s16
    3d14:	ldr	r2, [r0, #0]
    3d16:	str	r3, [sp, #0]
    3d18:	ldr	r3, [r2, #48]	; 0x30
    3d1a:	ldr	r2, [sp, #12]
    3d1c:	mov	r4, r3
    3d1e:	mov	r3, fp
    3d20:	blx	r4
            disk_pos=0;
    3d22:	movs	r3, #0
    3d24:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3d28:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3d2c:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d30:	add.w	r0, sl, r7
    3d34:	cmp	r9, r3
    3d36:	it	cs
    3d38:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3d3a:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d3e:	add	r1, fp
    3d40:	cmp	r9, r3
    3d42:	it	cs
    3d44:	movcs	r9, r3
    3d46:	mov	r2, r9
          len += to_copy;
    3d48:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3d4a:	bl	9470 <memcpy>
          disk_pos += to_copy;
    3d4e:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3d52:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    3d56:	add	r3, r9
    3d58:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    3d5c:	ldr	r3, [sp, #12]
    3d5e:	add	r3, r9
    3d60:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    3d62:	bne.n	3cd6 <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d64:	mov	r1, r7
    3d66:	mov	r0, sl
            len=0;
    3d68:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d6a:	bl	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    3d6e:	b.n	3cd6 <MTPD::GetObject(unsigned long)+0x4c>

00003d70 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    3d70:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d74:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    3d76:	ldr	r0, [r0, #0]
    {
    3d78:	mov	r4, r3
    3d7a:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    3d7c:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    3d7e:	add.w	r5, r8, #8192	; 0x2000
    {
    3d82:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    3d86:	ldr	r3, [r3, #40]	; 0x28
    {
    3d88:	sub	sp, #20
    3d8a:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    3d8e:	blx	r3
      size -= offset;
    3d90:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    3d92:	cmp.w	r4, #4294967295
    3d96:	it	eq
    3d98:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    3d9a:	cmp	r4, r0
    3d9c:	mov	r3, r4
    3d9e:	it	cs
    3da0:	movcs	r3, r0
    3da2:	str	r3, [sp, #8]
      if (write_get_length_) {
    3da4:	ldrb.w	r3, [r5, #1060]	; 0x424
    3da8:	str	r3, [sp, #12]
    3daa:	cbz	r3, 3dc4 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    3dac:	ldr.w	r3, [r5, #1064]	; 0x428
    3db0:	ldr	r2, [sp, #8]
    3db2:	add	r3, r2
    3db4:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    3db8:	ldr	r0, [sp, #8]
    3dba:	add	sp, #20
    3dbc:	vpop	{d8}
    3dc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    3dc4:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    3dc8:	movs	r7, #12
    3dca:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3dce:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    3dd2:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    3dd6:	ldr	r3, [sp, #8]
    3dd8:	cmp	r3, r6
    3dda:	bls.n	3db8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    3ddc:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3de0:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    3de2:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    3de6:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    3dea:	bne.n	3e10 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    3dec:	ldr.w	r0, [r8]
    3df0:	cmp.w	r9, #8192	; 0x2000
    3df4:	it	cc
    3df6:	movcc	r3, r9
    3df8:	vmov	r1, s16
    3dfc:	ldr	r2, [r0, #0]
    3dfe:	str	r3, [sp, #0]
    3e00:	ldr	r3, [r2, #48]	; 0x30
    3e02:	mov	r2, r6
    3e04:	mov	r4, r3
    3e06:	mov	r3, fp
    3e08:	blx	r4
            disk_pos=0;
    3e0a:	ldr	r3, [sp, #12]
    3e0c:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    3e10:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3e14:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e18:	add.w	r0, sl, r7
    3e1c:	cmp	r9, r3
    3e1e:	it	cs
    3e20:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    3e22:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e26:	add	r1, fp
    3e28:	cmp	r9, r3
    3e2a:	it	cs
    3e2c:	movcs	r9, r3
    3e2e:	mov	r2, r9
          len += to_copy;
    3e30:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    3e32:	bl	9470 <memcpy>
          disk_pos += to_copy;
    3e36:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3e3a:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    3e3e:	add	r6, r9
          disk_pos += to_copy;
    3e40:	add	r3, r9
    3e42:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    3e46:	bne.n	3dd6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e48:	mov	r1, r7
    3e4a:	mov	r0, sl
            len=0;
    3e4c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e4e:	bl	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    3e52:	b.n	3dd6 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00003e54 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    3e54:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e58:	mov	r8, r0
    3e5a:	mov	r5, r1
      static int index=0;
      if(!size) 
    3e5c:	mov	r4, r2
    3e5e:	ldr.w	fp, [pc, #84]	; 3eb4 <MTPD::read(char*, unsigned long)+0x60>
    3e62:	cbz	r2, 3eaa <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    3e64:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    3e68:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    3e6c:	ldr.w	r6, [fp]
    3e70:	rsb	r7, r6, #512	; 0x200
    3e74:	cmp	r7, r4
    3e76:	it	cs
    3e78:	movcs	r7, r4
        if (data) {
    3e7a:	cbz	r5, 3e8a <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    3e7c:	mov	r0, r5
          data += to_copy;
    3e7e:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    3e80:	mov	r2, r7
    3e82:	add.w	r1, r9, r6
    3e86:	bl	9470 <memcpy>
        index += to_copy;
    3e8a:	add	r6, r7
        size -= to_copy;
    3e8c:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    3e8e:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    3e92:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    3e96:	bne.n	3ea4 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    3e98:	mov	r1, r9
    3e9a:	mov	r0, r8
    3e9c:	bl	35d4 <MTPD::pull_packet(unsigned char*)>
          index=0;
    3ea0:	str.w	sl, [fp]
      while (size) {
    3ea4:	cmp	r4, #0
    3ea6:	bne.n	3e6c <MTPD::read(char*, unsigned long)+0x18>
    3ea8:	b.n	3eae <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    3eaa:	str.w	r2, [fp]
        }
      }
    }
    3eae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3eb2:	nop
    3eb4:	.word	0x2002744c

00003eb8 <MTPD::ReadMTPHeader()>:
  {
    3eb8:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    3eba:	movs	r2, #12
    3ebc:	add	r1, sp, #4
    3ebe:	bl	3e54 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    3ec2:	ldrh.w	r3, [sp, #8]
    3ec6:	cmp	r3, #2
      return header.len - 12;
    3ec8:	itet	eq
    3eca:	ldreq	r0, [sp, #4]
      return 0;
    3ecc:	movne	r0, #0
      return header.len - 12;
    3ece:	subeq	r0, #12
  }
    3ed0:	add	sp, #20
    3ed2:	ldr.w	pc, [sp], #4

00003ed6 <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    3ed6:	push	{r0, r1, r2, lr}
    3ed8:	movs	r2, #1
    3eda:	add.w	r1, sp, #7
    3ede:	bl	3e54 <MTPD::read(char*, unsigned long)>
    3ee2:	ldrb.w	r0, [sp, #7]
    3ee6:	add	sp, #12
    3ee8:	ldr.w	pc, [sp], #4

00003eec <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3eec:	push	{r0, r1, r2, lr}
    3eee:	movs	r2, #2
    3ef0:	add.w	r1, sp, #6
    3ef4:	bl	3e54 <MTPD::read(char*, unsigned long)>
    3ef8:	ldrh.w	r0, [sp, #6]
    3efc:	add	sp, #12
    3efe:	ldr.w	pc, [sp], #4

00003f02 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    3f02:	push	{r0, r1, r2, lr}
    3f04:	movs	r2, #4
    3f06:	add.w	r1, sp, r2
    3f0a:	bl	3e54 <MTPD::read(char*, unsigned long)>
    3f0e:	ldr	r0, [sp, #4]
    3f10:	add	sp, #12
    3f12:	ldr.w	pc, [sp], #4

00003f16 <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    3f16:	push	{r4, r5, r6, lr}
    3f18:	mov	r5, r1
    3f1a:	mov	r6, r0
    int len = read8();
    3f1c:	bl	3ed6 <MTPD::read8()>
    if (!buffer) {
    3f20:	cbz	r5, 3f2a <MTPD::readstring(char*)+0x14>
    3f22:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    3f24:	cmp	r5, r4
    3f26:	bne.n	3f3a <MTPD::readstring(char*)+0x24>
  }
    3f28:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    3f2a:	sxth	r2, r0
    3f2c:	mov	r1, r5
    3f2e:	mov	r0, r6
    3f30:	lsls	r2, r2, #1
  }
    3f32:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    3f36:	b.w	3e54 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    3f3a:	mov	r0, r6
    3f3c:	bl	3eec <MTPD::read16()>
    3f40:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    3f44:	b.n	3f24 <MTPD::readstring(char*)+0xe>

00003f46 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    3f46:	push	{r4, r5, lr}
    3f48:	mov	r4, r0
    3f4a:	sub	sp, #260	; 0x104
    3f4c:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    3f4e:	bl	3eb8 <MTPD::ReadMTPHeader()>
        readstring(filename);
    3f52:	mov	r1, sp
    3f54:	mov	r0, r4
    3f56:	bl	3f16 <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    3f5a:	ldr	r0, [r4, #0]
    3f5c:	mov	r2, sp
    3f5e:	mov	r1, r5
    3f60:	ldr	r3, [r0, #0]
    3f62:	ldr	r3, [r3, #72]	; 0x48
    3f64:	blx	r3
      }
      else
        return 0x2005;
    }
    3f66:	movw	r2, #8193	; 0x2001
    3f6a:	movw	r3, #8197	; 0x2005
    3f6e:	cmp	r0, #0
    3f70:	ite	ne
    3f72:	movne	r0, r2
    3f74:	moveq	r0, r3
    3f76:	add	sp, #260	; 0x104
    3f78:	pop	{r4, r5, pc}
	...

00003f7c <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3f7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3f80:	mov	r4, r0
    3f82:	sub	sp, #268	; 0x10c
    3f84:	mov	r6, r1
      pull_packet(rx_data_buffer);
    3f86:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    3f8a:	mov	r7, r2
      pull_packet(rx_data_buffer);
    3f8c:	bl	35d4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    3f90:	movs	r2, #0
    3f92:	ldr	r3, [pc, #196]	; (4058 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    3f94:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    3f96:	add.w	r9, sp, #8
        index=0;
    3f9a:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    3f9c:	bl	3eb8 <MTPD::ReadMTPHeader()>
    3fa0:	mov	r5, r0
      read32(); len -=4; // storage
    3fa2:	mov	r0, r4
    3fa4:	bl	3f02 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    3fa8:	mov	r0, r4
    3faa:	bl	3eec <MTPD::read16()>
    3fae:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    3fb2:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    3fb4:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    3fb6:	subs	r3, r0, r3
      read16(); len -=2; // protection
    3fb8:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    3fba:	rsbs	r8, r3, #0
    3fbe:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    3fc2:	bl	3eec <MTPD::read16()>
      read32(); len -=4; // size
    3fc6:	mov	r0, r4
    3fc8:	bl	3f02 <MTPD::read32()>
      read16(); len -=2; // thumb format
    3fcc:	mov	r0, r4
    3fce:	bl	3eec <MTPD::read16()>
      read32(); len -=4; // thumb size
    3fd2:	mov	r0, r4
    3fd4:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // thumb width
    3fd8:	mov	r0, r4
    3fda:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // thumb height
    3fde:	mov	r0, r4
    3fe0:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // pix width
    3fe4:	mov	r0, r4
    3fe6:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // pix height
    3fea:	mov	r0, r4
    3fec:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // bit depth
    3ff0:	mov	r0, r4
    3ff2:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // parent
    3ff6:	mov	r0, r4
    3ff8:	bl	3f02 <MTPD::read32()>
      read16(); len -=2; // association type
    3ffc:	mov	r0, r4
    3ffe:	bl	3eec <MTPD::read16()>
      read32(); len -=4; // association description
    4002:	mov	r0, r4
    4004:	bl	3f02 <MTPD::read32()>
      read32(); len -=4; // sequence number
    4008:	mov	r0, r4
    400a:	bl	3f02 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    400e:	mov	r1, r9
    4010:	mov	r0, r4
    4012:	bl	3f16 <MTPD::readstring(char*)>
    4016:	mov	r0, r9
    4018:	bl	e0c0 <strlen>
    401c:	adds	r0, #1
    401e:	sub.w	r5, r5, r0, lsl #1
    4022:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4024:	cmp	r5, #3
    4026:	bgt.n	4042 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    4028:	cbnz	r5, 404c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    402a:	ldr	r0, [r4, #0]
    402c:	mov	r2, r7
    402e:	mov	r1, r6
    4030:	ldr	r3, [r0, #0]
    4032:	str.w	r9, [sp]
    4036:	ldr	r4, [r3, #44]	; 0x2c
    4038:	mov	r3, r8
    403a:	blx	r4
    }
    403c:	add	sp, #268	; 0x10c
    403e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4042:	mov	r0, r4
    4044:	subs	r5, #4
    4046:	bl	3f02 <MTPD::read32()>
    404a:	b.n	4024 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    404c:	mov	r0, r4
    404e:	subs	r5, #1
    4050:	bl	3ed6 <MTPD::read8()>
    4054:	b.n	4028 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    4056:	nop
    4058:	.word	0x2002744c

0000405c <MTPD::SendObject()>:
    { 
    405c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4060:	add.w	r9, r0, #32
    { 
    4064:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    4066:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    406a:	mov	r1, r9
      disk_pos=0;
    406c:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4070:	bl	35d4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4074:	ldr	r3, [pc, #212]	; (414c <MTPD::SendObject()+0xf0>)
    4076:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    4078:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    407a:	add.w	fp, r4, #1056	; 0x420
        index=0;
    407e:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4080:	bl	3eb8 <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4084:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    4086:	mov	r7, r0
      disk_pos=0;
    4088:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    408c:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    408e:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    4092:	bgt.n	40a8 <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4094:	ldr	r0, [r4, #0]
    4096:	ldr	r2, [r0, #0]
      if(disk_pos)
    4098:	cmp	r3, #0
    409a:	bne.n	4136 <MTPD::SendObject()+0xda>
      storage_->close();
    409c:	ldr	r0, [r4, #0]
    409e:	ldr	r3, [r0, #0]
    40a0:	ldr	r3, [r3, #56]	; 0x38
    40a2:	blx	r3
      return true;
    40a4:	movs	r0, #1
    40a6:	b.n	40f0 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    40a8:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    40ac:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    40b0:	add.w	r0, fp, r3
    40b4:	add.w	r1, r9, sl
    40b8:	cmp	r8, r7
    40ba:	it	cs
    40bc:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    40be:	cmp	r5, r8
    40c0:	it	cs
    40c2:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    40c4:	mov	r2, r5
    40c6:	bl	9470 <memcpy>
        disk_pos += to_copy;
    40ca:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    40ce:	subs	r3, r7, r5
        disk_pos += to_copy;
    40d0:	add	r2, r5
        len -= to_copy;
    40d2:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    40d4:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    40d8:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    40dc:	bne.n	4122 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    40de:	ldr	r0, [r4, #0]
    40e0:	mov	r1, fp
    40e2:	ldr	r3, [r0, #0]
    40e4:	ldr	r3, [r3, #52]	; 0x34
    40e6:	blx	r3
    40e8:	cmp.w	r0, #8192	; 0x2000
    40ec:	bcs.n	40f6 <MTPD::SendObject()+0x9a>
    40ee:	movs	r0, #0
    }
    40f0:	add	sp, #12
    40f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    40f6:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    40f8:	subs.w	r2, r8, r5
          disk_pos =0;
    40fc:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4100:	beq.n	4122 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4102:	add.w	r1, sl, r5
    4106:	mov	r0, fp
    4108:	str	r2, [sp, #4]
    410a:	add	r1, r9
    410c:	bl	9470 <memcpy>
            disk_pos += bytes;
    4110:	ldr.w	r3, [r6, #1056]	; 0x420
    4114:	ldr	r2, [sp, #4]
    4116:	add	r3, r2
    4118:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    411c:	sub.w	r3, r7, r8
    4120:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    4122:	ldr	r3, [sp, #4]
    4124:	cbz	r3, 4132 <MTPD::SendObject()+0xd6>
          index=0;
    4126:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    412a:	mov	r1, r9
    412c:	mov	r0, r4
    412e:	bl	35d4 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4132:	ldr	r7, [sp, #4]
    4134:	b.n	408c <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    4136:	ldr	r5, [r2, #52]	; 0x34
    4138:	add.w	r1, r4, #1056	; 0x420
    413c:	mov	r2, r3
    413e:	blx	r5
    4140:	ldr.w	r3, [r6, #1056]	; 0x420
    4144:	cmp	r0, r3
    4146:	bcs.n	409c <MTPD::SendObject()+0x40>
    4148:	b.n	40ee <MTPD::SendObject()+0x92>
    414a:	nop
    414c:	.word	0x2002744c

00004150 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4150:	push	{r4, r5, r6, lr}
    4152:	mov	r5, r1
    4154:	add.w	r1, r0, #32
    4158:	mov	r6, r2
    415a:	mov	r4, r0
    415c:	bl	35d4 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4160:	ldr	r3, [pc, #28]	; (4180 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4162:	movs	r2, #0
    4164:	str	r2, [r3, #0]
      if(p2==0xDC07)
    4166:	movw	r3, #56327	; 0xdc07
    416a:	cmp	r6, r3
    416c:	bne.n	417a <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    416e:	mov	r1, r5
    4170:	mov	r0, r4
    }
    4172:	ldmia.w	sp!, {r4, r5, r6, lr}
    4176:	b.w	3f46 <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    417a:	movw	r0, #8197	; 0x2005
    417e:	pop	{r4, r5, r6, pc}
    4180:	.word	0x2002744c

00004184 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4184:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4188:	sub	sp, #60	; 0x3c
    418a:	mov	r4, r0
    418c:	bl	b0cc <usb_mtp_available>
    4190:	cmp	r0, #0
    4192:	beq.w	45ec <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    4196:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    419a:	movs	r1, #60	; 0x3c
    419c:	mov	r0, fp
    419e:	bl	b038 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    41a2:	cmp	r0, #0
    41a4:	beq.w	45ec <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    41a8:	ldr	r3, [r4, #40]	; 0x28
    41aa:	ldr	r1, [pc, #756]	; (44a0 <MTPD::loop()+0x31c>)
    41ac:	str	r3, [sp, #4]
    41ae:	ldrh	r3, [r4, #36]	; 0x24
    41b0:	ldr	r0, [pc, #752]	; (44a4 <MTPD::loop()+0x320>)
    41b2:	str	r3, [sp, #0]
    41b4:	ldr	r3, [r4, #32]
    41b6:	ldrh	r2, [r4, #38]	; 0x26
    41b8:	bl	b5a8 <Print::printf(char const*, ...)>
    41bc:	ldr	r3, [r4, #32]
    41be:	cmp	r3, #12
    41c0:	bls.n	41cc <MTPD::loop()+0x48>
    41c2:	ldr	r2, [r4, #44]	; 0x2c
    41c4:	ldr	r1, [pc, #736]	; (44a8 <MTPD::loop()+0x324>)
    41c6:	ldr	r0, [pc, #732]	; (44a4 <MTPD::loop()+0x320>)
    41c8:	bl	b5a8 <Print::printf(char const*, ...)>
    41cc:	ldr	r3, [r4, #32]
    41ce:	cmp	r3, #16
    41d0:	bls.n	41dc <MTPD::loop()+0x58>
    41d2:	ldr	r2, [r4, #48]	; 0x30
    41d4:	ldr	r1, [pc, #720]	; (44a8 <MTPD::loop()+0x324>)
    41d6:	ldr	r0, [pc, #716]	; (44a4 <MTPD::loop()+0x320>)
    41d8:	bl	b5a8 <Print::printf(char const*, ...)>
    41dc:	ldr	r3, [r4, #32]
    41de:	cmp	r3, #20
    41e0:	bls.n	41ec <MTPD::loop()+0x68>
    41e2:	ldr	r2, [r4, #52]	; 0x34
    41e4:	ldr	r1, [pc, #704]	; (44a8 <MTPD::loop()+0x324>)
    41e6:	ldr	r0, [pc, #700]	; (44a4 <MTPD::loop()+0x320>)
    41e8:	bl	b5a8 <Print::printf(char const*, ...)>
    41ec:	ldr	r1, [pc, #700]	; (44ac <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    41ee:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    41f2:	ldr	r0, [pc, #688]	; (44a4 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    41f4:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    41f8:	bl	b5a8 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    41fc:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    41fe:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4200:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    4202:	mov	r6, r3
        int op = CONTAINER->op;
    4204:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    4206:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    420a:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    420c:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    420e:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    4212:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    4216:	movw	r1, #8197	; 0x2005
    421a:	cmp	r0, #2
    421c:	it	eq
    421e:	moveq	r7, r1

        switch (op)
    4220:	movw	r0, #4123	; 0x101b
    4224:	cmp	r2, r0
    4226:	bhi.n	42b0 <MTPD::loop()+0x12c>
    4228:	cmp.w	r2, #4096	; 0x1000
    422c:	bhi.n	4234 <MTPD::loop()+0xb0>
    422e:	movw	r7, #8197	; 0x2005
    4232:	b.n	432e <MTPD::loop()+0x1aa>
    4234:	sub.w	r2, r2, #4096	; 0x1000
    4238:	subs	r2, #1
    423a:	cmp	r2, #26
    423c:	bhi.n	422e <MTPD::loop()+0xaa>
    423e:	add	r1, pc, #4	; (adr r1, 4244 <MTPD::loop()+0xc0>)
    4240:	ldr.w	pc, [r1, r2, lsl #2]
    4244:	.word	0x000042d3
    4248:	.word	0x00004327
    424c:	.word	0x000045e7
    4250:	.word	0x0000435d
    4254:	.word	0x000043a1
    4258:	.word	0x000043eb
    425c:	.word	0x00004401
    4260:	.word	0x00004457
    4264:	.word	0x000044b1
    4268:	.word	0x0000422f
    426c:	.word	0x000044fb
    4270:	.word	0x00004519
    4274:	.word	0x0000452d
    4278:	.word	0x0000422f
    427c:	.word	0x0000422f
    4280:	.word	0x0000422f
    4284:	.word	0x0000422f
    4288:	.word	0x0000422f
    428c:	.word	0x0000422f
    4290:	.word	0x00004543
    4294:	.word	0x0000458d
    4298:	.word	0x0000422f
    429c:	.word	0x0000422f
    42a0:	.word	0x0000422f
    42a4:	.word	0x000045d7
    42a8:	.word	0x000045f3
    42ac:	.word	0x0000461d
    42b0:	add.w	r3, r2, #26496	; 0x6780
    42b4:	adds	r3, #127	; 0x7f
    42b6:	uxth	r3, r3
    42b8:	cmp	r3, #3
    42ba:	bhi.n	422e <MTPD::loop()+0xaa>
    42bc:	sub.w	r2, r2, #38912	; 0x9800
    42c0:	subs	r2, #2
    42c2:	cmp	r2, #2
    42c4:	bhi.w	4670 <MTPD::loop()+0x4ec>
    42c8:	tbh	[pc, r2, lsl #1]
    42cc:	.word	0x021e01f7
    42d0:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    42d2:	movs	r6, #0
    42d4:	movs	r3, #1
    42d6:	mov	r0, r4
    42d8:	strb.w	r3, [r5, #1060]	; 0x424
    42dc:	str.w	r6, [r5, #1064]	; 0x428
    42e0:	bl	36e0 <MTPD::WriteDescriptor()>
    42e4:	ldr.w	r3, [r5, #1064]	; 0x428
    42e8:	mov	r0, r4
    42ea:	movs	r2, #12
    42ec:	adds	r3, #12
    42ee:	add	r1, sp, #24
    42f0:	str	r3, [sp, #24]
    42f2:	movs	r3, #2
    42f4:	strh.w	r3, [sp, #28]
    42f8:	ldrh	r3, [r4, #38]	; 0x26
    42fa:	strh.w	r3, [sp, #30]
    42fe:	ldr	r3, [r4, #40]	; 0x28
    4300:	str.w	r6, [r5, #1064]	; 0x428
    4304:	strb.w	r6, [r5, #1060]	; 0x424
    4308:	str	r3, [sp, #32]
    { if (write_get_length_) 
    430a:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    430e:	mov	r0, r4
    4310:	bl	36e0 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    4314:	ldr	r1, [sp, #24]
    4316:	ubfx	r1, r1, #0, #9
    431a:	cbz	r1, 432e <MTPD::loop()+0x1aa>
    431c:	add.w	r0, r4, #544	; 0x220
    4320:	bl	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4324:	b.n	432e <MTPD::loop()+0x1aa>
            openSession(p1);
    4326:	mov	r1, r6
    4328:	mov	r0, r4
    432a:	bl	35c4 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    432e:	movs	r3, #3
            CONTAINER->len=len;
    4330:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    4334:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4336:	mov	r1, fp
            CONTAINER->type=3;
    4338:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    433a:	mov	r2, r9
            CONTAINER->transaction_id=id;
    433c:	ldr	r3, [sp, #16]
    433e:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4340:	ldr	r3, [sp, #12]
    4342:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4344:	add.w	r4, r4, #544	; 0x220
    4348:	mov	r0, r4
    434a:	bl	9470 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    434e:	mov	r1, r9
    4350:	mov	r0, r4
        }
      }
    }
    4352:	add	sp, #60	; 0x3c
    4354:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4358:	b.w	34dc <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    435c:	movs	r6, #0
    435e:	movs	r3, #1
    4360:	mov	r0, r4
    4362:	strb.w	r3, [r5, #1060]	; 0x424
    4366:	str.w	r6, [r5, #1064]	; 0x428
    436a:	bl	37f8 <MTPD::WriteStorageIDs()>
    436e:	ldr.w	r3, [r5, #1064]	; 0x428
    4372:	mov	r0, r4
    4374:	movs	r2, #12
    4376:	adds	r3, #12
    4378:	add	r1, sp, #24
    437a:	str	r3, [sp, #24]
    437c:	movs	r3, #2
    437e:	strh.w	r3, [sp, #28]
    4382:	ldrh	r3, [r4, #38]	; 0x26
    4384:	strh.w	r3, [sp, #30]
    4388:	ldr	r3, [r4, #40]	; 0x28
    438a:	str.w	r6, [r5, #1064]	; 0x428
    438e:	strb.w	r6, [r5, #1060]	; 0x424
    4392:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4394:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4398:	mov	r0, r4
    439a:	bl	37f8 <MTPD::WriteStorageIDs()>
    439e:	b.n	4314 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    43a0:	mov.w	r8, #0
    43a4:	movs	r3, #1
    43a6:	mov	r1, r6
    43a8:	mov	r0, r4
    43aa:	strb.w	r3, [r5, #1060]	; 0x424
    43ae:	str.w	r8, [r5, #1064]	; 0x428
    43b2:	bl	3a3c <MTPD::GetStorageInfo(unsigned long)>
    43b6:	ldr.w	r3, [r5, #1064]	; 0x428
    43ba:	add	r1, sp, #24
    43bc:	mov	r0, r4
    43be:	adds	r3, #12
    43c0:	movs	r2, #12
    43c2:	str	r3, [sp, #24]
    43c4:	movs	r3, #2
    43c6:	strh.w	r3, [sp, #28]
    43ca:	ldrh	r3, [r4, #38]	; 0x26
    43cc:	strh.w	r3, [sp, #30]
    43d0:	ldr	r3, [r4, #40]	; 0x28
    43d2:	str.w	r8, [r5, #1064]	; 0x428
    43d6:	strb.w	r8, [r5, #1060]	; 0x424
    43da:	str	r3, [sp, #32]
    { if (write_get_length_) 
    43dc:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    43e0:	mov	r1, r6
    43e2:	mov	r0, r4
    43e4:	bl	3a3c <MTPD::GetStorageInfo(unsigned long)>
    43e8:	b.n	4314 <MTPD::loop()+0x190>
            if (p2) 
    43ea:	cmp.w	r8, #0
    43ee:	bne.w	4764 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    43f2:	mov	r2, r3
    43f4:	mov	r1, r6
    43f6:	mov	r0, r4
    43f8:	bl	356c <MTPD::GetNumObjects(unsigned long, unsigned long)>
    43fc:	str	r0, [sp, #12]
    43fe:	b.n	432e <MTPD::loop()+0x1aa>
            if (p2) 
    4400:	cmp.w	r8, #0
    4404:	bne.w	4764 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4408:	movs	r2, #1
    440a:	mov	r1, r6
    440c:	mov	r0, r4
    440e:	str.w	r8, [r5, #1064]	; 0x428
    4412:	strb.w	r2, [r5, #1060]	; 0x424
    4416:	mov	r2, r3
    4418:	str	r3, [sp, #20]
    441a:	bl	3822 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    441e:	ldr.w	r2, [r5, #1064]	; 0x428
    4422:	add	r1, sp, #24
    4424:	mov	r0, r4
    4426:	adds	r2, #12
    4428:	str	r2, [sp, #24]
    442a:	movs	r2, #2
    442c:	strh.w	r2, [sp, #28]
    4430:	ldrh	r2, [r4, #38]	; 0x26
    4432:	strh.w	r2, [sp, #30]
    4436:	ldr	r2, [r4, #40]	; 0x28
    4438:	str.w	r8, [r5, #1064]	; 0x428
    443c:	str	r2, [sp, #32]
    443e:	movs	r2, #12
    4440:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    4444:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4448:	ldr	r3, [sp, #20]
    444a:	mov	r1, r6
    444c:	mov	r0, r4
    444e:	mov	r2, r3
    4450:	bl	3822 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4454:	b.n	4314 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    4456:	mov.w	r8, #0
    445a:	movs	r3, #1
    445c:	mov	r1, r6
    445e:	mov	r0, r4
    4460:	strb.w	r3, [r5, #1060]	; 0x424
    4464:	str.w	r8, [r5, #1064]	; 0x428
    4468:	bl	3874 <MTPD::GetObjectInfo(unsigned long)>
    446c:	ldr.w	r3, [r5, #1064]	; 0x428
    4470:	add	r1, sp, #24
    4472:	mov	r0, r4
    4474:	adds	r3, #12
    4476:	movs	r2, #12
    4478:	str	r3, [sp, #24]
    447a:	movs	r3, #2
    447c:	strh.w	r3, [sp, #28]
    4480:	ldrh	r3, [r4, #38]	; 0x26
    4482:	strh.w	r3, [sp, #30]
    4486:	ldr	r3, [r4, #40]	; 0x28
    4488:	str.w	r8, [r5, #1064]	; 0x428
    448c:	strb.w	r8, [r5, #1060]	; 0x424
    4490:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4492:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4496:	mov	r1, r6
    4498:	mov	r0, r4
    449a:	bl	3874 <MTPD::GetObjectInfo(unsigned long)>
    449e:	b.n	4314 <MTPD::loop()+0x190>
    44a0:	.word	0x20007f00
    44a4:	.word	0x20008944
    44a8:	.word	0x20007f0e
    44ac:	.word	0x20007bb9
            TRANSMIT(GetObject(p1));
    44b0:	mov.w	r8, #0
    44b4:	movs	r3, #1
    44b6:	mov	r1, r6
    44b8:	mov	r0, r4
    44ba:	strb.w	r3, [r5, #1060]	; 0x424
    44be:	str.w	r8, [r5, #1064]	; 0x428
    44c2:	bl	3c8a <MTPD::GetObject(unsigned long)>
    44c6:	ldr.w	r3, [r5, #1064]	; 0x428
    44ca:	add	r1, sp, #24
    44cc:	mov	r0, r4
    44ce:	adds	r3, #12
    44d0:	movs	r2, #12
    44d2:	str	r3, [sp, #24]
    44d4:	movs	r3, #2
    44d6:	strh.w	r3, [sp, #28]
    44da:	ldrh	r3, [r4, #38]	; 0x26
    44dc:	strh.w	r3, [sp, #30]
    44e0:	ldr	r3, [r4, #40]	; 0x28
    44e2:	str.w	r8, [r5, #1064]	; 0x428
    44e6:	strb.w	r8, [r5, #1060]	; 0x424
    44ea:	str	r3, [sp, #32]
    { if (write_get_length_) 
    44ec:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    44f0:	mov	r1, r6
    44f2:	mov	r0, r4
    44f4:	bl	3c8a <MTPD::GetObject(unsigned long)>
    44f8:	b.n	4314 <MTPD::loop()+0x190>
              if (p2) {
    44fa:	cmp.w	r8, #0
    44fe:	bne.w	4764 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    4502:	ldr	r0, [r4, #0]
    4504:	mov	r1, r6
    4506:	ldr	r3, [r0, #0]
    4508:	ldr	r3, [r3, #60]	; 0x3c
    450a:	blx	r3
                  return_code = 0x2012; // partial deletion
    450c:	movw	r3, #8210	; 0x2012
    4510:	cmp	r0, #0
    4512:	it	eq
    4514:	moveq	r7, r3
    4516:	b.n	432e <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    4518:	mov	r2, r8
    451a:	mov	r1, r6
    451c:	mov	r0, r4
              len = 12 + 3 * 4;
    451e:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    4522:	bl	3f7c <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4526:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    452a:	b.n	432e <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    452c:	mov	r0, r4
    452e:	mov.w	r9, #12
    4532:	bl	405c <MTPD::SendObject()>
    4536:	movw	r3, #8197	; 0x2005
    453a:	cmp	r0, #0
    453c:	it	eq
    453e:	moveq	r7, r3
    4540:	b.n	432e <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    4542:	mov.w	r8, #0
    4546:	movs	r3, #1
    4548:	mov	r1, r6
    454a:	mov	r0, r4
    454c:	strb.w	r3, [r5, #1060]	; 0x424
    4550:	str.w	r8, [r5, #1064]	; 0x428
    4554:	bl	3688 <MTPD::GetDevicePropDesc(unsigned long)>
    4558:	ldr.w	r3, [r5, #1064]	; 0x428
    455c:	add	r1, sp, #24
    455e:	mov	r0, r4
    4560:	adds	r3, #12
    4562:	movs	r2, #12
    4564:	str	r3, [sp, #24]
    4566:	movs	r3, #2
    4568:	strh.w	r3, [sp, #28]
    456c:	ldrh	r3, [r4, #38]	; 0x26
    456e:	strh.w	r3, [sp, #30]
    4572:	ldr	r3, [r4, #40]	; 0x28
    4574:	str.w	r8, [r5, #1064]	; 0x428
    4578:	strb.w	r8, [r5, #1060]	; 0x424
    457c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    457e:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4582:	mov	r1, r6
    4584:	mov	r0, r4
    4586:	bl	3688 <MTPD::GetDevicePropDesc(unsigned long)>
    458a:	b.n	4314 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    458c:	mov.w	r8, #0
    4590:	movs	r3, #1
    4592:	mov	r1, r6
    4594:	mov	r0, r4
    4596:	strb.w	r3, [r5, #1060]	; 0x424
    459a:	str.w	r8, [r5, #1064]	; 0x428
    459e:	bl	3674 <MTPD::GetDevicePropValue(unsigned long)>
    45a2:	ldr.w	r3, [r5, #1064]	; 0x428
    45a6:	add	r1, sp, #24
    45a8:	mov	r0, r4
    45aa:	adds	r3, #12
    45ac:	movs	r2, #12
    45ae:	str	r3, [sp, #24]
    45b0:	movs	r3, #2
    45b2:	strh.w	r3, [sp, #28]
    45b6:	ldrh	r3, [r4, #38]	; 0x26
    45b8:	strh.w	r3, [sp, #30]
    45bc:	ldr	r3, [r4, #40]	; 0x28
    45be:	str.w	r8, [r5, #1064]	; 0x428
    45c2:	strb.w	r8, [r5, #1060]	; 0x424
    45c6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    45c8:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    45cc:	mov	r1, r6
    45ce:	mov	r0, r4
    45d0:	bl	3674 <MTPD::GetDevicePropValue(unsigned long)>
    45d4:	b.n	4314 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    45d6:	mov	r2, r8
    45d8:	mov	r1, r6
    45da:	mov	r0, r4
              len = 12;
    45dc:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    45e0:	bl	3592 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    45e4:	mov	r7, r0
        if(return_code)
    45e6:	cmp	r7, #0
    45e8:	bne.w	432e <MTPD::loop()+0x1aa>
    }
    45ec:	add	sp, #60	; 0x3c
    45ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    45f2:	mov	r2, r8
    45f4:	mov	r1, r6
    45f6:	mov	r0, r4
              if(!return_code) 
    45f8:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    45fc:	bl	35b0 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4600:	cmp	r0, #0
    4602:	itete	eq
    4604:	moveq	r3, r6
    4606:	movne	r3, r0
    4608:	moveq.w	r9, #12
    460c:	movne.w	r9, #16
    4610:	str	r3, [sp, #12]
    4612:	movw	r3, #8193	; 0x2001
    4616:	it	ne
    4618:	movne	r7, r3
    461a:	b.n	432e <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    461c:	mov.w	sl, #0
    4620:	movs	r2, #1
    4622:	mov	r1, r6
    4624:	mov	r0, r4
    4626:	strb.w	r2, [r5, #1060]	; 0x424
    462a:	mov	r2, r8
    462c:	str.w	sl, [r5, #1064]	; 0x428
    4630:	str	r3, [sp, #20]
    4632:	bl	3d70 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4636:	ldr.w	r2, [r5, #1064]	; 0x428
    463a:	add	r1, sp, #24
    463c:	adds	r2, #12
    463e:	str	r2, [sp, #24]
    4640:	movs	r2, #2
    4642:	strh.w	r2, [sp, #28]
    4646:	ldrh	r2, [r4, #38]	; 0x26
    4648:	strh.w	r2, [sp, #30]
    464c:	ldr	r2, [r4, #40]	; 0x28
    464e:	str.w	sl, [r5, #1064]	; 0x428
    4652:	strb.w	sl, [r5, #1060]	; 0x424
    4656:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    465a:	mov	r0, r4
    465c:	movs	r2, #32
    465e:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4662:	ldr	r3, [sp, #20]
    4664:	mov	r2, r8
    4666:	mov	r1, r6
    4668:	mov	r0, r4
    466a:	bl	3d70 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    466e:	b.n	4314 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4670:	mov.w	r8, #0
    4674:	movs	r3, #1
    4676:	mov	r1, r6
    4678:	mov	r0, r4
    467a:	strb.w	r3, [r5, #1060]	; 0x424
    467e:	str.w	r8, [r5, #1064]	; 0x428
    4682:	bl	3944 <MTPD::getObjectPropsSupported(unsigned long)>
    4686:	ldr.w	r3, [r5, #1064]	; 0x428
    468a:	add	r1, sp, #24
    468c:	mov	r0, r4
    468e:	adds	r3, #12
    4690:	movs	r2, #12
    4692:	str	r3, [sp, #24]
    4694:	movs	r3, #2
    4696:	strh.w	r3, [sp, #28]
    469a:	ldrh	r3, [r4, #38]	; 0x26
    469c:	strh.w	r3, [sp, #30]
    46a0:	ldr	r3, [r4, #40]	; 0x28
    46a2:	str.w	r8, [r5, #1064]	; 0x428
    46a6:	strb.w	r8, [r5, #1060]	; 0x424
    46aa:	str	r3, [sp, #32]
    { if (write_get_length_) 
    46ac:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    46b0:	mov	r1, r6
    46b2:	mov	r0, r4
    46b4:	bl	3944 <MTPD::getObjectPropsSupported(unsigned long)>
    46b8:	b.n	4314 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    46ba:	mov.w	sl, #0
    46be:	movs	r3, #1
    46c0:	mov	r2, r8
    46c2:	mov	r1, r6
    46c4:	mov	r0, r4
    46c6:	strb.w	r3, [r5, #1060]	; 0x424
    46ca:	str.w	sl, [r5, #1064]	; 0x428
    46ce:	bl	3b48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    46d2:	ldr.w	r3, [r5, #1064]	; 0x428
    46d6:	add	r1, sp, #24
    46d8:	mov	r0, r4
    46da:	adds	r3, #12
    46dc:	movs	r2, #12
    46de:	str	r3, [sp, #24]
    46e0:	movs	r3, #2
    46e2:	strh.w	r3, [sp, #28]
    46e6:	ldrh	r3, [r4, #38]	; 0x26
    46e8:	strh.w	r3, [sp, #30]
    46ec:	ldr	r3, [r4, #40]	; 0x28
    46ee:	str.w	sl, [r5, #1064]	; 0x428
    46f2:	strb.w	sl, [r5, #1060]	; 0x424
    46f6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    46f8:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    46fc:	mov	r2, r8
    46fe:	mov	r1, r6
    4700:	mov	r0, r4
    4702:	bl	3b48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4706:	b.n	4314 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4708:	mov.w	sl, #0
    470c:	movs	r3, #1
    470e:	mov	r2, r8
    4710:	mov	r1, r6
    4712:	mov	r0, r4
    4714:	strb.w	r3, [r5, #1060]	; 0x424
    4718:	str.w	sl, [r5, #1064]	; 0x428
    471c:	bl	3974 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4720:	ldr.w	r3, [r5, #1064]	; 0x428
    4724:	add	r1, sp, #24
    4726:	mov	r0, r4
    4728:	adds	r3, #12
    472a:	movs	r2, #12
    472c:	str	r3, [sp, #24]
    472e:	movs	r3, #2
    4730:	strh.w	r3, [sp, #28]
    4734:	ldrh	r3, [r4, #38]	; 0x26
    4736:	strh.w	r3, [sp, #30]
    473a:	ldr	r3, [r4, #40]	; 0x28
    473c:	str.w	sl, [r5, #1064]	; 0x428
    4740:	strb.w	sl, [r5, #1060]	; 0x424
    4744:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4746:	bl	34f4 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    474a:	mov	r2, r8
    474c:	mov	r1, r6
    474e:	mov	r0, r4
    4750:	bl	3974 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4754:	b.n	4314 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4756:	mov	r2, r8
    4758:	mov	r1, r6
    475a:	mov	r0, r4
    475c:	bl	4150 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4760:	mov	r7, r0
              break;
    4762:	b.n	45e6 <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4764:	movw	r7, #8212	; 0x2014
    4768:	b.n	432e <MTPD::loop()+0x1aa>
    476a:	nop

0000476c <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    476c:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    476e:	cbz	r3, 47a6 <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4770:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4772:	movw	r5, #513	; 0x201
    4776:	str	r5, [r4, #16]
    4778:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    477a:	cbz	r1, 47a8 <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    477c:	ldrb.w	r5, [r1], #1
    4780:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4782:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4784:	str	r5, [r6, #100]	; 0x64
    4786:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4788:	ldr	r6, [r5, #112]	; 0x70
    478a:	lsls	r6, r6, #30
    478c:	bmi.n	4798 <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    478e:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4790:	cbz	r2, 4796 <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4792:	strb.w	r5, [r2], #1
				count_read--;
    4796:	subs	r4, #1
    4798:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    479a:	ldr	r5, [r5, #20]
    479c:	lsls	r5, r5, #31
    479e:	bpl.n	4786 <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    47a0:	cmp	r3, #0
    47a2:	bne.n	477a <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    47a4:	cbnz	r4, 47ae <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    47a6:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    47a8:	ldrb.w	r5, [r0, #60]	; 0x3c
    47ac:	b.n	4780 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    47ae:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    47b0:	ldr	r1, [r3, #112]	; 0x70
    47b2:	lsls	r1, r1, #30
    47b4:	bmi.n	47a4 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    47b6:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    47b8:	cbz	r2, 47be <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    47ba:	strb.w	r3, [r2], #1
			count_read--;
    47be:	subs	r4, #1
    47c0:	b.n	47a4 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

000047c2 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    47c2:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    47c4:	ldr	r2, [r3, #0]
    47c6:	ldr	r1, [r2, #0]
    47c8:	ldr	r2, [r3, #4]
    47ca:	tst	r1, r2
void SPIClass::end() {
    47cc:	push	{r4, lr}
    47ce:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    47d0:	beq.n	4808 <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    47d2:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    47d4:	movs	r1, #0
    47d6:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    47d8:	movs	r1, #5
    47da:	ldrb	r2, [r0, #16]
    47dc:	add	r3, r2
    47de:	ldrb	r0, [r3, #16]
    47e0:	bl	ad7c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    47e4:	ldrb	r2, [r4, #17]
    47e6:	ldr	r3, [r4, #4]
    47e8:	movs	r1, #5
    47ea:	add	r3, r2
    47ec:	ldrb.w	r0, [r3, #36]	; 0x24
    47f0:	bl	ad7c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    47f4:	ldr	r3, [r4, #4]
    47f6:	ldrb	r2, [r4, #18]
    47f8:	movs	r1, #5
    47fa:	add	r3, r2
	}
}
    47fc:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    4800:	ldrb.w	r0, [r3, #56]	; 0x38
    4804:	b.w	ad7c <pinMode>
}
    4808:	pop	{r4, pc}

0000480a <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    480a:	mov	r3, r0
    size_t n = end - str;
    480c:	subs	r0, r2, r1
    if (cp < 0X80) {
    480e:	cmp	r3, #127	; 0x7f
    4810:	bhi.n	481e <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    4812:	cmp	r0, #0
    4814:	beq.n	489a <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    4816:	mov	r0, r1
    4818:	strb.w	r3, [r0], #1
    481c:	bx	lr
    } else if (cp < 0X800) {
    481e:	cmp.w	r3, #2048	; 0x800
    4822:	bcs.n	4840 <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    4824:	cmp	r0, #1
    4826:	bls.n	4898 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    4828:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    482a:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    482e:	mov	r0, r1
    4830:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4834:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    4838:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    483c:	strb	r3, [r1, #1]
    483e:	bx	lr
    } else if (cp < 0X10000) {
    4840:	cmp.w	r3, #65536	; 0x10000
    4844:	bcs.n	486a <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    4846:	cmp	r0, #2
    4848:	bls.n	4898 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    484a:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    484c:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    484e:	orn	r2, r2, #31
    4852:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    4854:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4858:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    485c:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4860:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    4864:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4866:	strb	r3, [r1, #2]
    4868:	bx	lr
       if (n < 4) goto fail;
    486a:	cmp	r0, #3
    486c:	bls.n	4898 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    486e:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4870:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    4872:	orn	r2, r2, #15
    4876:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    4878:	ubfx	r2, r3, #12, #6
    487c:	orn	r2, r2, #127	; 0x7f
    4880:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    4882:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4886:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    488a:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    488e:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    4892:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    4894:	strb	r3, [r1, #3]
    4896:	bx	lr
    return nullptr;
    4898:	movs	r0, #0
  }
    489a:	bx	lr

0000489c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    489c:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    489e:	push	{r4, r5, lr}
    48a0:	mov	r5, r0
    if (str >= end) {
    48a2:	bcs.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    48a4:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    48a6:	ldrsb.w	r0, [r0]
    48aa:	cmp	r0, #0
    48ac:	blt.n	48b4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    48ae:	adds	r0, r5, #1
      *rtn = ch;
    48b0:	str	r3, [r2, #0]
  }
    48b2:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    48b4:	and.w	r0, r3, #224	; 0xe0
    48b8:	cmp	r0, #192	; 0xc0
    48ba:	bne.n	48fa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    48bc:	and.w	r3, r3, #31
      n = 2;
    48c0:	movs	r4, #2
    if ((str + n) > end) {
    48c2:	adds	r0, r5, r4
    48c4:	cmp	r0, r1
    48c6:	bhi.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    48c8:	adds	r5, #1
      ch = str[i];
    48ca:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    48ce:	and.w	r4, r1, #192	; 0xc0
    48d2:	cmp	r4, #128	; 0x80
    48d4:	bne.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    48d6:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    48da:	cmp	r5, r0
      cp |= ch & 0X3F;
    48dc:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    48e0:	bne.n	48ca <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    48e2:	sub.w	r4, r3, #128	; 0x80
    48e6:	ldr	r1, [pc, #56]	; (4920 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    48e8:	cmp	r4, r1
    48ea:	bhi.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    48ec:	sub.w	r1, r3, #55296	; 0xd800
    48f0:	cmp.w	r1, #2048	; 0x800
    48f4:	bcc.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    48f6:	str	r3, [r2, #0]
    return str + n;
    48f8:	b.n	48b2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    48fa:	and.w	r0, r3, #240	; 0xf0
    48fe:	cmp	r0, #224	; 0xe0
    4900:	bne.n	490a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    4902:	and.w	r3, r3, #15
      n = 3;
    4906:	movs	r4, #3
    4908:	b.n	48c2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    490a:	and.w	r0, r3, #248	; 0xf8
    490e:	cmp	r0, #240	; 0xf0
    4910:	bne.n	491a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    4912:	and.w	r3, r3, #7
      n = 4;
    4916:	movs	r4, #4
    4918:	b.n	48c2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    491a:	movs	r0, #0
    491c:	b.n	48b2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    491e:	nop
    4920:	.word	0x0010ff7f

00004924 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4924:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    4926:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    4928:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    492a:	lsls	r2, r3, #31
    492c:	bpl.n	496e <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    492e:	ldr	r0, [r0, #4]
    4930:	add.w	r2, r4, #16
    4934:	ldr	r1, [r4, #12]
    4936:	ldr	r3, [r0, #0]
    4938:	str	r2, [sp, #4]
    493a:	ldr	r3, [r3, #36]	; 0x24
    493c:	blx	r3
    493e:	ldr	r2, [sp, #4]
    4940:	mov	r5, r0
    4942:	cbnz	r0, 494c <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    4944:	movs	r5, #0
}
    4946:	mov	r0, r5
    4948:	add	sp, #8
    494a:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    494c:	ldrb	r3, [r4, #0]
    494e:	lsls	r3, r3, #30
    4950:	bmi.n	495c <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    4952:	ldrb	r3, [r4, #0]
    4954:	bic.w	r3, r3, #1
    4958:	strb	r3, [r4, #0]
    495a:	b.n	4946 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    495c:	adds	r0, r4, #4
    495e:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    4960:	ldr	r3, [r0, #0]
    4962:	add	r1, r6
    4964:	ldr	r3, [r3, #36]	; 0x24
    4966:	blx	r3
    4968:	cmp	r0, #0
    496a:	bne.n	4952 <FsCache::sync()+0x2e>
    496c:	b.n	4944 <FsCache::sync()+0x20>
  return true;
    496e:	movs	r5, #1
    4970:	b.n	4946 <FsCache::sync()+0x22>

00004972 <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    4972:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    4974:	push	{r4, r5, r6, lr}
    4976:	mov	r4, r0
    4978:	mov	r6, r1
    497a:	mov	r5, r2
  if (!m_blockDev) {
    497c:	cbnz	r3, 4982 <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    497e:	movs	r0, #0
}
    4980:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    4982:	ldr	r3, [r0, #12]
    4984:	cmp	r3, r1
    4986:	beq.n	499a <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    4988:	bl	4924 <FsCache::sync()>
    498c:	cmp	r0, #0
    498e:	beq.n	497e <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    4990:	lsls	r3, r5, #29
    4992:	bpl.n	49aa <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    4994:	movs	r3, #0
    m_sector = sector;
    4996:	str	r6, [r4, #12]
    m_status = 0;
    4998:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    499a:	ldrb	r3, [r4, #0]
    499c:	and.w	r5, r5, #3
    49a0:	mov	r0, r4
    49a2:	orrs	r3, r5
    49a4:	strb.w	r3, [r0], #16
  return m_buffer;
    49a8:	b.n	4980 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    49aa:	ldr	r0, [r4, #4]
    49ac:	add.w	r2, r4, #16
    49b0:	mov	r1, r6
    49b2:	ldr	r3, [r0, #0]
    49b4:	ldr	r3, [r3, #16]
    49b6:	blx	r3
    49b8:	cmp	r0, #0
    49ba:	bne.n	4994 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    49bc:	b.n	497e <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

000049c0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    49c0:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    49c2:	push	{r4, r5, lr}
  if (chr < 127) {
    49c4:	bhi.n	4a16 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    49c6:	sub.w	r3, r0, #97	; 0x61
    49ca:	cmp	r3, #25
    49cc:	ite	hi
    49ce:	movhi	r3, #0
    49d0:	movls	r3, #1
    49d2:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    49d6:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    49d8:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    49da:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    49de:	ldrh.w	r5, [r1, r2, lsl #2]
    49e2:	cmp	r5, r0
    mid = left + (right - left)/2;
    49e4:	ite	hi
    49e6:	movhi	r4, r2
    49e8:	movls	r3, r2
  while (right - left > 1) {
    49ea:	subs	r2, r4, r3
    49ec:	cmp	r2, #1
    49ee:	bhi.n	49da <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    49f0:	uxth	r2, r3
    49f2:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    49f6:	cmp	r0, r3
    49f8:	bcc.n	4a56 <toUpcase(unsigned short)+0x96>
    49fa:	add.w	r1, r1, r2, lsl #2
    49fe:	subs	r3, r0, r3
    4a00:	ldrb	r2, [r1, #3]
    4a02:	cmp	r3, r2
    4a04:	bge.n	4a56 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    4a06:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    4a0a:	cmp	r2, #1
    4a0c:	bne.n	4a1e <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    4a0e:	and.w	r3, r3, #1
    4a12:	subs	r3, r0, r3
    4a14:	b.n	49d6 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    4a16:	movs	r4, #53	; 0x35
  size_t left = 0;
    4a18:	movs	r3, #0
    4a1a:	ldr	r1, [pc, #68]	; (4a60 <toUpcase(unsigned short)+0xa0>)
    4a1c:	b.n	49ea <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    4a1e:	cbz	r2, 4a28 <toUpcase(unsigned short)+0x68>
    4a20:	uxth	r2, r2
    4a22:	add	r2, r0
    4a24:	uxth	r0, r2
    4a26:	b.n	49d8 <toUpcase(unsigned short)+0x18>
    4a28:	movw	r2, #58272	; 0xe3a0
    4a2c:	b.n	4a22 <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    4a2e:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    4a32:	ldrh.w	r5, [r1, r2, lsl #2]
    4a36:	cmp	r5, r0
    mid = left + (right - left)/2;
    4a38:	ite	hi
    4a3a:	movhi	r4, r2
    4a3c:	movls	r3, r2
  while (right - left > 1) {
    4a3e:	subs	r2, r4, r3
    4a40:	cmp	r2, #1
    4a42:	bhi.n	4a2e <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    4a44:	uxth	r3, r3
    4a46:	ldrh.w	r2, [r1, r3, lsl #2]
    4a4a:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    4a4c:	itt	eq
    4a4e:	addeq.w	r1, r1, r3, lsl #2
    4a52:	ldrheq	r0, [r1, #2]
    4a54:	b.n	49d8 <toUpcase(unsigned short)+0x18>
    4a56:	movs	r4, #75	; 0x4b
    4a58:	movs	r3, #0
    4a5a:	ldr	r1, [pc, #8]	; (4a64 <toUpcase(unsigned short)+0xa4>)
    4a5c:	b.n	4a3e <toUpcase(unsigned short)+0x7e>
    4a5e:	nop
    4a60:	.word	0x200079fc
    4a64:	.word	0x20007898

00004a68 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    4a68:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    4a6a:	push	{r0, r1, r4, lr}
    4a6c:	mov	r4, r0
  if (ls) {
    4a6e:	cbz	r3, 4a7a <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    4a70:	movs	r2, #0
    4a72:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    4a74:	mov	r0, r3
    4a76:	add	sp, #8
    4a78:	pop	{r4, pc}
  } else if (next >= end) {
    4a7a:	ldrd	r0, r1, [r0, #4]
    4a7e:	cmp	r0, r1
    4a80:	bcs.n	4a74 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    4a82:	add	r2, sp, #4
    4a84:	bl	489c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    4a88:	cbnz	r0, 4a90 <FsName::get16()+0x28>
  return 0XFFFF;
    4a8a:	movw	r3, #65535	; 0xffff
    4a8e:	b.n	4a74 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    4a90:	ldr	r2, [sp, #4]
    next = ptr;
    4a92:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    4a94:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    4a98:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    4a9a:	bcc.n	4a74 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    4a9c:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    4aa0:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    4aa2:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    4aa6:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    4aaa:	strh	r3, [r4, #12]
    4aac:	uxth	r3, r2
    4aae:	b.n	4a74 <FsName::get16()+0xc>

00004ab0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    4ab0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ab4:	mov	r6, r2
    4ab6:	mov	r5, r1
    4ab8:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    4abc:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    4abe:	ldrh.w	r4, [r5, #2]!
    4ac2:	cbnz	r3, 4ad6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    4ac4:	ldrd	r2, r3, [r6, #4]
    4ac8:	cmp	r2, r3
    4aca:	bne.n	4ad6 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    4acc:	clz	r0, r4
    4ad0:	lsrs	r0, r0, #5
}
    4ad2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    4ad6:	mov	r0, r6
    4ad8:	bl	4a68 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    4adc:	bl	49c0 <toUpcase(unsigned short)>
    4ae0:	mov	r7, r0
    4ae2:	mov	r0, r4
    4ae4:	bl	49c0 <toUpcase(unsigned short)>
    4ae8:	cmp	r7, r0
    4aea:	bne.n	4af4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    4aec:	cmp	r5, r8
    4aee:	bne.n	4abc <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    4af0:	movs	r0, #1
    4af2:	b.n	4ad2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    4af4:	movs	r0, #0
    4af6:	b.n	4ad2 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00004af8 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    4af8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    4afc:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    4b00:	mov	sl, r0
    4b02:	mov	r8, r1
  if (!isOpen()) {
    4b04:	cmp	r3, #0
    4b06:	beq.n	4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b08:	subs	r2, #1
  char* str = name;
    4b0a:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b0c:	mov.w	r9, #2
  uint16_t hs = 0;
    4b10:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b12:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b14:	ldrb.w	r3, [sl, #48]	; 0x30
    4b18:	cmp	r3, r9
    4b1a:	bcc.n	4b84 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    4b1c:	movs	r2, #0
    4b1e:	mov	r1, r9
    4b20:	mov	r0, sl
    4b22:	bl	4c0a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    4b26:	cbz	r0, 4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b28:	ldrb	r3, [r0, #0]
    4b2a:	cmp	r3, #193	; 0xc1
    4b2c:	bne.n	4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b2e:	mov	r6, r0
    4b30:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    4b34:	ldr	r3, [pc, #108]	; (4ba4 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    4b36:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    4b3a:	cbz	r5, 4b74 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    4b3c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    4b40:	uxth	r2, r2
    4b42:	cmp.w	r2, #1024	; 0x400
    4b46:	bcs.n	4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    4b48:	and.w	r5, r3, r5, lsl #10
    4b4c:	ubfx	r0, r0, #0, #10
    4b50:	orrs	r0, r5
    4b52:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    4b56:	mov	r1, r4
    4b58:	mov	r2, r7
    4b5a:	bl	480a <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    4b5e:	mov	r4, r0
    4b60:	cbz	r0, 4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b62:	movs	r5, #0
    4b64:	ldr	r3, [pc, #60]	; (4ba4 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    4b66:	cmp	fp, r6
    4b68:	bne.n	4b36 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    4b6a:	add.w	r9, r9, #1
    4b6e:	uxtb.w	r9, r9
    4b72:	b.n	4b14 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    4b74:	add.w	r2, r0, #10240	; 0x2800
    4b78:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    4b7a:	cmp.w	r2, #2048	; 0x800
    4b7e:	bcc.n	4b90 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    4b80:	cmp	r0, #0
    4b82:	bne.n	4b56 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    4b84:	movs	r3, #0
  return str - name;
    4b86:	sub.w	r0, r4, r8
  *str = '\0';
    4b8a:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    4b8c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    4b90:	cmp.w	r2, #1024	; 0x400
    4b94:	bcs.n	4b9a <ExFatFile::getName8(char*, unsigned int)+0xa2>
    4b96:	mov	r5, r0
    4b98:	b.n	4b66 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    4b9a:	movs	r0, #0
    4b9c:	strb.w	r0, [r8]
  return 0;
    4ba0:	b.n	4b8c <ExFatFile::getName8(char*, unsigned int)+0x94>
    4ba2:	nop
    4ba4:	.word	0x000ffc00

00004ba8 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    4ba8:	movs	r0, #0
    next = begin;
    4baa:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    4bac:	push	{r4, r5, r6, lr}
    4bae:	mov	r4, r1
  uint16_t hash = 0;
    4bb0:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    4bb2:	movw	r5, #65535	; 0xffff
    4bb6:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    4bb8:	strh	r0, [r1, #12]
    return !ls && next == end;
    4bba:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    4bbc:	str	r0, [r4, #16]
    4bbe:	cbnz	r3, 4bfc <ExFatFile::hashName(ExName_t*)+0x54>
    4bc0:	ldrd	r2, r3, [r4, #4]
    4bc4:	cmp	r2, r3
    4bc6:	bne.n	4bfc <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    4bc8:	subs	r0, #1
  fname->nameHash = hash;
    4bca:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    4bcc:	cmp	r0, #254	; 0xfe
    4bce:	ite	hi
    4bd0:	movhi	r0, #0
    4bd2:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    4bd4:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    4bd6:	bl	49c0 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4bda:	lsls	r3, r6, #15
    4bdc:	orr.w	r3, r3, r6, lsr #1
    4be0:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4be4:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    4be6:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4be8:	ubfx	r3, r3, #1, #15
    4bec:	orr.w	r3, r3, r2, lsl #15
    4bf0:	uxtah	r3, r0, r3
    fname->nameLength++;
    4bf4:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    4bf6:	uxth	r6, r3
    fname->nameLength++;
    4bf8:	adds	r0, #1
    4bfa:	b.n	4bba <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    4bfc:	mov	r0, r4
    4bfe:	bl	4a68 <FsName::get16()>
    if (u == 0XFFFF) {
    4c02:	cmp	r0, r5
    4c04:	bne.n	4bd6 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    4c06:	movs	r0, #0
    4c08:	b.n	4bd4 <ExFatFile::hashName(ExName_t*)+0x2c>

00004c0a <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c0a:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    4c0c:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c10:	sub	sp, #20
    4c12:	mov	r4, r0
    4c14:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    4c16:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    4c18:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    4c1a:	ldmia.w	r3, {r0, r1, r2}
    4c1e:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    4c22:	lsls	r2, r7, #5
    4c24:	mov	r1, r5
    4c26:	ldr	r0, [r4, #32]
    4c28:	bl	55be <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4c2c:	cmp	r0, #1
    4c2e:	bne.n	4c3e <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    4c30:	mov	r2, r6
    4c32:	mov	r1, r5
    4c34:	ldr	r0, [r4, #32]
    4c36:	bl	5524 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    4c3a:	add	sp, #20
    4c3c:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    4c3e:	movs	r0, #0
    4c40:	b.n	4c3a <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00004c42 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    4c42:	push	{r4, lr}
    4c44:	mov	r4, r0
  bool rtn = sync();
    4c46:	bl	5ae0 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4c4a:	movs	r3, #0
    4c4c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4c50:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    4c54:	pop	{r4, pc}

00004c56 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4c56:	push	{r3, r4, r5, lr}
    4c58:	mov	r5, r1
  if (isOpen()) {
    4c5a:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4c5e:	mov	r4, r0
  if (isOpen()) {
    4c60:	cbnz	r1, 4c78 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4c62:	movs	r2, #56	; 0x38
    4c64:	bl	942c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4c68:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4c6a:	movs	r0, #1
  m_vol = vol;
    4c6c:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    4c6e:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    4c72:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    4c76:	pop	{r3, r4, r5, pc}
  return false;
    4c78:	movs	r0, #0
    4c7a:	b.n	4c76 <ExFatFile::openRoot(ExFatVolume*)+0x20>

00004c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    4c7c:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    4c7e:	mov	r5, r1
    4c80:	ldrb.w	r4, [r1], #1
    4c84:	cmp	r4, #32
    4c86:	beq.n	4c7e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    4c88:	ldr	r7, [pc, #108]	; (4cf8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    4c8a:	str	r5, [r2, #0]
  fname->end = path;
    4c8c:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    4c8e:	mov	r6, r5
    4c90:	ldrb.w	r4, [r6], #1
    4c94:	cbz	r4, 4c9a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    4c96:	cmp	r4, #47	; 0x2f
    4c98:	bne.n	4cb2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    4c9a:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    4c9c:	ldrb.w	r1, [r5], #1
    4ca0:	cmp	r1, #32
    4ca2:	beq.n	4c9a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    4ca4:	cmp	r1, #47	; 0x2f
    4ca6:	beq.n	4c9a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    4ca8:	str	r4, [r3, #0]
  return hashName(fname);
    4caa:	mov	r1, r2

 fail:
  return false;
}
    4cac:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    4cae:	b.w	4ba8 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    4cb2:	cmp	r4, #60	; 0x3c
    4cb4:	bhi.n	4cdc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    4cb6:	cmp	r4, #33	; 0x21
    4cb8:	bhi.n	4cc8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    4cba:	subs	r1, r4, #1
    4cbc:	cmp	r1, #30
    4cbe:	bls.n	4cd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    4cc0:	cmp	r4, #32
    4cc2:	bne.n	4ce8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    4cc4:	mov	r5, r6
    4cc6:	b.n	4c8e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    4cc8:	sub.w	r1, r4, #34	; 0x22
    4ccc:	uxtb	r1, r1
    4cce:	lsr.w	r1, r7, r1
    4cd2:	lsls	r1, r1, #31
    4cd4:	bpl.n	4cf2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    4cd6:	movs	r0, #0
    4cd8:	pop	{r4, r5, r6, r7}
    4cda:	bx	lr
    4cdc:	cmp	r4, #92	; 0x5c
    4cde:	beq.n	4cd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    4ce0:	bhi.n	4cec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    4ce2:	subs	r4, #62	; 0x3e
    4ce4:	cmp	r4, #1
    4ce6:	bls.n	4cd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    4ce8:	str	r6, [r2, #8]
    4cea:	b.n	4cc4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    4cec:	cmp	r4, #124	; 0x7c
    4cee:	beq.n	4cd6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    4cf0:	b.n	4ce8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    4cf2:	cmp	r4, #46	; 0x2e
    4cf4:	b.n	4cc2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    4cf6:	nop
    4cf8:	.word	0x05002101

00004cfc <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    4cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d00:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    4d04:	ldrb.w	r3, [r0, #51]	; 0x33
    4d08:	sub	sp, #12
    4d0a:	mov	r4, r0
    4d0c:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4d0e:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    4d10:	mov	r6, r2
  if (!isReadable()) {
    4d12:	bpl.n	4ddc <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4d14:	lsls	r0, r3, #25
    4d16:	bmi.n	4d20 <ExFatFile::read(void*, unsigned int)+0x24>
    4d18:	ldrb.w	r3, [r4, #49]	; 0x31
    4d1c:	lsls	r1, r3, #28
    4d1e:	bpl.n	4d38 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    4d20:	ldrd	r2, r3, [r4]
    4d24:	ldrd	r1, r0, [r4, #16]
    4d28:	adds	r5, r6, r2
    4d2a:	adc.w	r3, r3, #0
    4d2e:	cmp	r1, r5
    4d30:	sbcs.w	r3, r0, r3
    4d34:	bcs.n	4d38 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    4d36:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4d38:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4d3c:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4d3e:	vmov	s16, r3
    4d42:	b.n	4e28 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    4d44:	ldr	r0, [r4, #32]
    4d46:	ldrd	r3, r2, [r4]
    4d4a:	ldr.w	r7, [r0, #1080]	; 0x438
    4d4e:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    4d50:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    4d54:	cbnz	r7, 4d6a <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    4d56:	orrs	r3, r2
    4d58:	bne.n	4db4 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4d5a:	ldrb.w	r3, [r4, #49]	; 0x31
    4d5e:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    4d60:	ite	mi
    4d62:	ldrmi.w	r3, [r0, #1076]	; 0x434
    4d66:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    4d68:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d6a:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    4d6e:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    4d70:	ldr	r2, [r4, #24]
    4d72:	ldrb.w	r1, [fp, #1093]	; 0x445
    4d76:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    4d78:	ldr.w	r2, [fp, #1068]	; 0x42c
    4d7c:	lsls	r5, r1
    4d7e:	add.w	r5, r5, r7, lsr #9
    4d82:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    4d84:	cmp.w	sl, #0
    4d88:	bne.n	4dee <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    4d8a:	cmp.w	r8, #512	; 0x200
    4d8e:	bcc.n	4dee <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    4d90:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    4d94:	cmp	r5, r2
    4d96:	beq.n	4dee <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4d98:	cmp.w	r8, #1024	; 0x400
    4d9c:	bcs.n	4e3c <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    4d9e:	ldr.w	r0, [fp, #532]	; 0x214
    4da2:	mov	r2, r9
    4da4:	mov	r1, r5
    4da6:	ldr	r3, [r0, #0]
    4da8:	ldr	r3, [r3, #16]
    4daa:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    4dac:	cbz	r0, 4ddc <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    4dae:	mov.w	r7, #512	; 0x200
    4db2:	b.n	4e14 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    4db4:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    4db8:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    4dba:	lsls	r3, r3, #25
    4dbc:	bpl.n	4dc4 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    4dbe:	adds	r1, #1
    4dc0:	str	r1, [r4, #24]
    4dc2:	b.n	4d6a <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    4dc4:	vmov	r2, s16
    4dc8:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    4dcc:	cmp	r0, #0
    4dce:	blt.n	4ddc <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    4dd0:	bne.n	4d6a <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    4dd2:	ldrb.w	r3, [r4, #49]	; 0x31
    4dd6:	tst.w	r3, #80	; 0x50
    4dda:	bne.n	4e2e <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    4ddc:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    4de0:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    4de4:	orr.w	r3, r3, #2
    4de8:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    4dec:	b.n	4e32 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    4dee:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    4df2:	movs	r2, #0
    4df4:	mov	r1, r5
    4df6:	add.w	r0, fp, #528	; 0x210
    4dfa:	cmp	r7, r8
    4dfc:	it	cs
    4dfe:	movcs	r7, r8
    4e00:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    4e04:	cmp	r0, #0
    4e06:	beq.n	4ddc <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    4e08:	add.w	r1, r0, sl
    4e0c:	mov	r2, r7
    4e0e:	mov	r0, r9
    4e10:	bl	9470 <memcpy>
    dst += n;
    4e14:	add	r9, r7
    toRead -= n;
    4e16:	sub.w	r8, r8, r7
    m_curPosition += n;
    4e1a:	ldrd	r3, r2, [r4]
    4e1e:	adds	r3, r3, r7
    4e20:	adc.w	r2, r2, #0
    4e24:	strd	r3, r2, [r4]
  while (toRead) {
    4e28:	cmp.w	r8, #0
    4e2c:	bne.n	4d44 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    4e2e:	sub.w	r0, r6, r8
}
    4e32:	add	sp, #12
    4e34:	vpop	{d8}
    4e38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    4e3c:	movs	r3, #1
    4e3e:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    4e40:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4e44:	subs	r3, r3, r0
    4e46:	cmp	r3, r1
    4e48:	it	cs
    4e4a:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    4e4c:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    4e4e:	mov.w	r7, r3, lsl #9
    4e52:	bls.n	4e6a <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    4e54:	ldr.w	r0, [fp, #532]	; 0x214
    4e58:	mov	r1, r5
    4e5a:	ldr	r2, [r0, #0]
    4e5c:	ldr.w	fp, [r2, #20]
    4e60:	mov	r2, r9
    4e62:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    4e64:	cmp	r0, #0
    4e66:	bne.n	4e14 <ExFatFile::read(void*, unsigned int)+0x118>
    4e68:	b.n	4ddc <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    4e6a:	adds	r1, r5, r3
    4e6c:	cmp	r2, r1
    4e6e:	bcs.n	4e54 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    4e70:	add.w	r0, fp, #528	; 0x210
    4e74:	str	r3, [sp, #4]
    4e76:	bl	4924 <FsCache::sync()>
    4e7a:	ldr	r3, [sp, #4]
    4e7c:	cmp	r0, #0
    4e7e:	bne.n	4e54 <ExFatFile::read(void*, unsigned int)+0x158>
    4e80:	b.n	4ddc <ExFatFile::read(void*, unsigned int)+0xe0>

00004e82 <ExFatFile::peek()>:
int ExFatFile::peek() {
    4e82:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4e84:	movs	r2, #1
    4e86:	add.w	r1, sp, #7
    4e8a:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    4e8c:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    4e8e:	ldrd	r6, r7, [r0]
    4e92:	bl	4cfc <ExFatFile::read(void*, unsigned int)>
    4e96:	cmp	r0, #1
  m_curCluster = curCluster;
    4e98:	str	r5, [r4, #24]
    4e9a:	ite	eq
    4e9c:	ldrbeq.w	r0, [sp, #7]
    4ea0:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    4ea4:	strd	r6, r7, [r4]
}
    4ea8:	add	sp, #12
    4eaa:	pop	{r4, r5, r6, r7, pc}

00004eac <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    4eac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    4eb0:	ldrb.w	ip, [r0, #49]	; 0x31
    4eb4:	mov	r4, r0
    4eb6:	mov	r6, r2
    4eb8:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4eba:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    4ebe:	cmp.w	ip, #0
    4ec2:	beq.n	4f7c <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4ec4:	ldrd	r0, r3, [r0]
    4ec8:	cmp	r3, r7
    4eca:	it	eq
    4ecc:	cmpeq	r0, r2
    4ece:	beq.n	4ede <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    4ed0:	orrs.w	r2, r6, r7
    4ed4:	bne.n	4ee2 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    4ed6:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    4ed8:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    4eda:	strd	r6, r7, [r4]
    return true;
    4ede:	movs	r0, #1
    4ee0:	b.n	4f82 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    4ee2:	tst.w	ip, #8
    4ee6:	beq.n	4ef2 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    4ee8:	ldrd	r1, r2, [r4, #16]
    4eec:	cmp	r1, r6
    4eee:	sbcs	r2, r7
    4ef0:	bcc.n	4f7c <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4ef2:	ldr.w	lr, [r4, #32]
    4ef6:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    4ef8:	ldrb.w	r1, [lr, #1093]	; 0x445
    4efc:	adc.w	sl, r7, #4294967295
    4f00:	adds	r1, #9
    4f02:	uxtb	r1, r1
    4f04:	rsb	r9, r1, #32
    4f08:	sub.w	r2, r1, #32
    4f0c:	lsrs	r5, r1
    4f0e:	lsl.w	r9, sl, r9
    4f12:	lsr.w	r2, sl, r2
    4f16:	sub.w	sl, r1, #32
    4f1a:	orr.w	r5, r5, r9
    4f1e:	rsb	r9, r1, #32
    4f22:	orrs	r5, r2
  if (isContiguous()) {
    4f24:	ldrb.w	r2, [r4, #51]	; 0x33
    4f28:	tst.w	r2, #64	; 0x40
    4f2c:	beq.n	4f34 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    4f2e:	ldr	r3, [r4, #28]
    4f30:	add	r3, r5
    4f32:	b.n	4ed8 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4f34:	adds.w	fp, r0, #4294967295
    4f38:	adc.w	r2, r3, #4294967295
    4f3c:	lsr.w	r1, fp, r1
    4f40:	lsl.w	r9, r2, r9
    4f44:	lsr.w	r2, r2, sl
    4f48:	orr.w	r1, r1, r9
    4f4c:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    4f4e:	cmp	r5, r1
    4f50:	bcc.n	4f56 <ExFatFile::seekSet(unsigned long long)+0xaa>
    4f52:	orrs	r3, r0
    4f54:	bne.n	4f86 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4f56:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    4f5a:	ite	ne
    4f5c:	ldrne.w	r3, [lr, #1076]	; 0x434
    4f60:	ldreq	r3, [r4, #28]
    4f62:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4f64:	add.w	r9, r4, #24
  while (nNew--) {
    4f68:	cmp	r5, #0
    4f6a:	beq.n	4eda <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    4f6c:	mov	r2, r9
    4f6e:	ldr	r1, [r4, #24]
    4f70:	ldr	r0, [r4, #32]
    4f72:	subs	r5, #1
    4f74:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    4f78:	cmp	r0, #0
    4f7a:	bgt.n	4f68 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    4f7c:	movs	r0, #0
  m_curCluster = tmp;
    4f7e:	str.w	r8, [r4, #24]
}
    4f82:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    4f86:	subs	r5, r5, r1
    4f88:	b.n	4f64 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00004f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    4f8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f90:	mov	sl, r3
    4f92:	ldrb.w	r3, [r0, #49]	; 0x31
    4f96:	sub	sp, #52	; 0x34
    4f98:	mov	r4, r0
    4f9a:	mov	r6, r1
    4f9c:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    4f9e:	cmp	r3, #0
    4fa0:	bne.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    4fa2:	ldrb.w	r3, [r1, #49]	; 0x31
    4fa6:	tst.w	r3, #80	; 0x50
    4faa:	beq.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    4fac:	and.w	r9, sl, #3
    4fb0:	cmp.w	r9, #3
    4fb4:	beq.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4fb6:	add.w	r9, r9, #1
    4fba:	and.w	r3, sl, #8
    4fbe:	orr.w	r9, r9, r3
  if (fname) {
    4fc2:	cmp	r2, #0
    4fc4:	beq.n	5038 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    4fc6:	ldr	r7, [r2, #16]
    4fc8:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    4fca:	movs	r2, #0
    4fcc:	mov	r0, r1
    4fce:	adds	r7, #14
    4fd0:	udiv	r7, r7, r3
    4fd4:	adds	r7, #2
    4fd6:	movs	r3, #0
    4fd8:	uxtb	r7, r7
    4fda:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    4fde:	mov.w	fp, #0
    4fe2:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    4fe4:	movs	r2, #32
    4fe6:	add	r1, sp, #16
    4fe8:	mov	r0, r6
    4fea:	bl	4cfc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4fee:	cmp	r0, #0
    4ff0:	beq.w	517a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    4ff4:	cmp	r0, #32
    4ff6:	bne.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    4ff8:	ldrsb.w	r1, [sp, #16]
    4ffc:	ldrb.w	r2, [sp, #16]
    5000:	cmp	r1, #0
    5002:	blt.n	5042 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5004:	cmp.w	fp, #0
    5008:	bne.n	5016 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    500a:	ldr	r1, [r6, #0]
    500c:	sub.w	r3, r1, #32
    5010:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5012:	ldr	r3, [r6, #24]
    5014:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5016:	cmp	fp, r7
        freeCount++;
    5018:	itt	cc
    501a:	addcc.w	r3, fp, #1
    501e:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5022:	cbnz	r2, 503c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5024:	cmp	r5, #0
    5026:	bne.w	517a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    502a:	mov.w	r8, #0
    502e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5032:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5036:	b.n	510e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5038:	movs	r7, #3
    503a:	b.n	4fde <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    503c:	movs	r0, #0
    503e:	mov	r8, r0
    5040:	b.n	4fe4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5042:	cmp.w	r8, #0
    5046:	bne.n	5098 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5048:	cmp	fp, r7
    504a:	it	cc
    504c:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5050:	cmp	r2, #133	; 0x85
    5052:	bne.n	503c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5054:	movs	r2, #56	; 0x38
    5056:	mov	r1, r8
    5058:	mov	r0, r4
    505a:	bl	942c <memset>
      m_setCount = dirFile->setCount;
    505e:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5062:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5066:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5068:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    506c:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5070:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5072:	it	pl
    5074:	orrpl.w	r2, r2, #8
    5078:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    507c:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    507e:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5080:	ldr	r2, [r6, #24]
    5082:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5084:	ldr	r2, [r6, #0]
    5086:	subs	r2, #32
    5088:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    508a:	ldrb.w	r2, [r6, #51]	; 0x33
    508e:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5092:	strb.w	r2, [r4, #44]	; 0x2c
    5096:	b.n	503e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5098:	cmp	r2, #192	; 0xc0
    509a:	bne.n	513e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    509c:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    50a0:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    50a4:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    50a6:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    50aa:	it	mi
    50ac:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    50b0:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    50b4:	it	mi
    50b6:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    50ba:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    50bc:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    50c0:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    50c2:	strd	r0, r1, [r4, #8]
      if (!fname) {
    50c6:	cbnz	r5, 5116 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    50c8:	tst.w	sl, #2048	; 0x800
    50cc:	bne.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    50ce:	tst.w	sl, #17408	; 0x4400
    50d2:	bne.n	50dc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    50d4:	ldrb.w	r3, [r4, #51]	; 0x33
    50d8:	lsls	r0, r3, #30
    50da:	bpl.n	50e8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    50dc:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    50e0:	lsls	r1, r3, #27
    50e2:	bmi.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    50e4:	lsls	r2, r3, #31
    50e6:	bmi.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    50e8:	tst.w	sl, #1024	; 0x400
    50ec:	beq.n	5168 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    50ee:	ldrb.w	r3, [r4, #51]	; 0x33
    50f2:	lsls	r3, r3, #30
    50f4:	bpl.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    50f6:	movs	r2, #0
    50f8:	movs	r3, #0
    50fa:	mov	r0, r4
    50fc:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
    5100:	cmp	r0, #0
    5102:	beq.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5104:	mov	r0, r4
    5106:	bl	5d6c <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    510a:	cmp	r0, #0
    510c:	beq.n	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    510e:	mov	r0, r8
    5110:	add	sp, #52	; 0x34
    5112:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5116:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5118:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    511c:	ldr	r1, [r5, #16]
    next = begin;
    511e:	str	r2, [r5, #4]
    5120:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5124:	strh	r3, [r5, #12]
    5126:	cmp	r1, r2
    5128:	bne.n	503c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    512a:	ldrh	r0, [r5, #20]
    512c:	ldrh.w	r2, [sp, #20]
    5130:	sub.w	ip, r0, r2
    5134:	rsbs	r0, ip, #0
    5138:	adc.w	r0, r0, ip
    513c:	b.n	503e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    513e:	cmp	r2, #193	; 0xc1
    5140:	bne.w	503c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5144:	mov	r2, r5
    5146:	add	r1, sp, #16
    5148:	mov	r0, r4
    514a:	bl	4ab0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    514e:	cmp	r0, #0
    5150:	beq.w	503e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5154:	ldrh	r2, [r5, #12]
    5156:	cmp	r2, #0
    5158:	bne.w	503e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    515c:	ldrd	r1, r2, [r5, #4]
    5160:	cmp	r1, r2
    5162:	bne.w	503e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5166:	b.n	50c8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5168:	tst.w	sl, #16384	; 0x4000
    516c:	beq.n	510e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    516e:	mov	r0, r4
    5170:	ldrd	r2, r3, [r4, #16]
    5174:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
    5178:	b.n	510a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    517a:	tst.w	sl, #512	; 0x200
    517e:	beq.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5182:	tst.w	r9, #2
    5186:	beq.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    518a:	cmp	r5, #0
    518c:	beq.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5190:	cmp	fp, r7
    5192:	bcc.n	51e2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5194:	movs	r2, #56	; 0x38
    5196:	movs	r1, #0
    5198:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    519a:	ldrb.w	r8, [r6, #51]	; 0x33
    519e:	bl	942c <memset>
  ExFatVolume* volume() const {return m_vol;}
    51a2:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    51a4:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    51a8:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    51ac:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    51ae:	movs	r3, #8
  m_dirPos = freePos;
    51b0:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    51b4:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    51b8:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    51bc:	mov.w	r8, #0
  m_dirPos = freePos;
    51c0:	ldr	r3, [sp, #0]
    51c2:	str	r3, [r4, #36]	; 0x24
    51c4:	ldr	r3, [sp, #4]
    51c6:	str	r3, [r4, #40]	; 0x28
    next = begin;
    51c8:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    51ca:	strh.w	r8, [r5, #12]
    next = begin;
    51ce:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    51d0:	uxtb.w	fp, r8
    51d4:	cmp	r7, fp
    51d6:	bhi.n	5226 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    51d8:	mov	r0, r4
    51da:	bl	5ae0 <ExFatFile::sync()>
    51de:	mov	r8, r0
    51e0:	b.n	510e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    51e2:	movs	r2, #32
    51e4:	add	r1, sp, #16
    51e6:	mov	r0, r6
    51e8:	bl	4cfc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    51ec:	cbnz	r0, 5204 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    51ee:	mov	r0, r6
      curCluster = dir->m_curCluster;
    51f0:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    51f4:	bl	5b22 <ExFatFile::addDirCluster()>
    51f8:	cmp	r0, #0
    51fa:	beq.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    51fe:	str.w	r8, [r6, #24]
      continue;
    5202:	b.n	5190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5204:	cmp	r0, #32
    5206:	bne.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    520a:	cmp.w	fp, #0
    520e:	bne.n	521c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5210:	ldr	r2, [r6, #0]
    5212:	sub.w	r3, r2, #32
    5216:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5218:	ldr	r3, [r6, #24]
    521a:	str	r3, [sp, #0]
    freeCount++;
    521c:	add.w	r3, fp, #1
    5220:	uxtb.w	fp, r3
    5224:	b.n	5190 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5226:	movs	r2, #1
    5228:	mov	r1, fp
    522a:	mov	r0, r4
    522c:	bl	4c0a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5230:	mov	r6, r0
    5232:	cmp	r0, #0
    5234:	beq.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5238:	ldrsb.w	r2, [r0]
    523c:	cmp	r2, #0
    523e:	blt.w	502a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5242:	movs	r2, #32
    5244:	movs	r1, #0
    5246:	bl	942c <memset>
    if (i == 0) {
    524a:	cmp.w	fp, #0
    524e:	bne.n	5292 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5250:	movs	r3, #133	; 0x85
    5252:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5254:	ldr	r3, [pc, #128]	; (52d8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5256:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    525a:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    525e:	ldr	r3, [r3, #0]
    5260:	cbz	r3, 5286 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5262:	add.w	r2, sp, #11
    5266:	add.w	r1, sp, #14
    526a:	add	r0, sp, #12
    526c:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    526e:	ldrh.w	r3, [sp, #12]
    5272:	strh	r3, [r6, #10]
    5274:	ldrh.w	r3, [sp, #14]
    5278:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    527a:	ldrb.w	r3, [sp, #11]
    527e:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5280:	add.w	r8, r8, #1
    5284:	b.n	51d0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5286:	movw	r3, #22561	; 0x5821
    528a:	strh	r3, [r6, #10]
    528c:	strh	r3, [r6, #14]
    528e:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    5290:	b.n	5280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    5292:	cmp.w	fp, #1
    5296:	bne.n	52b2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    5298:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    529c:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    529e:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    52a2:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    52a4:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    52a8:	ldr	r3, [r5, #16]
    52aa:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    52ac:	ldrh	r3, [r5, #20]
    52ae:	strh	r3, [r6, #4]
}
    52b0:	b.n	5280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    52b2:	movs	r3, #193	; 0xc1
    52b4:	add.w	fp, r6, #30
    52b8:	strb	r3, [r6, #0]
    return !ls && next == end;
    52ba:	ldrh	r2, [r5, #12]
    52bc:	cbnz	r2, 52c6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    52be:	ldrd	r1, r2, [r5, #4]
    52c2:	cmp	r1, r2
    52c4:	beq.n	5280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    52c6:	mov	r0, r5
    52c8:	bl	4a68 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    52cc:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    52d0:	cmp	fp, r6
    52d2:	bne.n	52ba <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    52d4:	b.n	5280 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    52d6:	nop
    52d8:	.word	0x200273fc

000052dc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    52dc:	push	{r4, r5, r6, r7, lr}
    52de:	mov	r7, r3
    52e0:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    52e2:	movs	r3, #0
    52e4:	mov	r5, r0
    52e6:	mov	r4, r1
    52e8:	str	r2, [sp, #4]
    52ea:	str	r3, [sp, #80]	; 0x50
class FsName {
    52ec:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    52f0:	ldrb.w	r3, [r0, #49]	; 0x31
    52f4:	cbz	r3, 52fc <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    52f6:	movs	r0, #0
}
    52f8:	add	sp, #92	; 0x5c
    52fa:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    52fc:	ldrb.w	r1, [r1, #49]	; 0x31
    5300:	tst.w	r1, #80	; 0x50
    5304:	beq.n	52f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    5306:	ldrb	r1, [r2, #0]
    5308:	cmp	r1, #47	; 0x2f
    530a:	bne.n	5346 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    530c:	mov	r0, r2
    while (isDirSeparator(*path)) {
    530e:	ldrb.w	r1, [r2], #1
    5312:	cmp	r1, #47	; 0x2f
    5314:	beq.n	5328 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    5316:	cbz	r3, 531a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    5318:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    531a:	ldr	r4, [r4, #32]
    if (*path == 0) {
    531c:	cbnz	r1, 532c <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    531e:	mov	r1, r4
    5320:	mov	r0, r5
    5322:	bl	4c56 <ExFatFile::openRoot(ExFatVolume*)>
    5326:	b.n	52f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    5328:	movs	r3, #1
    532a:	b.n	530c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    532c:	movs	r2, #56	; 0x38
    532e:	movs	r1, #0
    5330:	add	r0, sp, #32
    5332:	bl	942c <memset>
  m_attributes = FILE_ATTR_ROOT;
    5336:	movs	r3, #64	; 0x40
  m_vol = vol;
    5338:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    533a:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    533c:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    5340:	movs	r3, #1
    5342:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    5346:	add	r3, sp, #4
    5348:	add	r2, sp, #8
    534a:	ldr	r1, [sp, #4]
    534c:	mov	r0, r5
    534e:	bl	4c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5352:	cmp	r0, #0
    5354:	beq.n	52f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    5356:	ldr	r3, [sp, #4]
    5358:	ldrb	r3, [r3, #0]
    535a:	cbz	r3, 5394 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    535c:	movs	r3, #0
    535e:	add	r2, sp, #8
    5360:	mov	r1, r4
    5362:	mov	r0, r5
    5364:	bl	4f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5368:	cmp	r0, #0
    536a:	beq.n	52f6 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    536c:	add	r6, sp, #32
    536e:	mov	r2, r5
    5370:	add.w	ip, r5, #48	; 0x30
    5374:	mov	r4, r6
    5376:	ldr	r0, [r2, #0]
    5378:	adds	r2, #8
    537a:	ldr.w	r1, [r2, #-4]
    537e:	mov	r3, r6
    5380:	cmp	r2, ip
    5382:	stmia	r3!, {r0, r1}
    5384:	mov	r6, r3
    5386:	bne.n	5376 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    5388:	ldr	r0, [r2, #0]
    538a:	str	r0, [r3, #0]
    close();
    538c:	mov	r0, r5
    538e:	bl	4c42 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5392:	b.n	5346 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    5394:	mov	r3, r7
    5396:	add	r2, sp, #8
    5398:	mov	r1, r4
    539a:	mov	r0, r5
    539c:	bl	4f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    53a0:	b.n	52f8 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

000053a2 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    53a2:	cbz	r1, 53ac <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    53a4:	add.w	r1, r1, #1096	; 0x448
    53a8:	b.w	52dc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    53ac:	mov	r0, r1
    53ae:	bx	lr

000053b0 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    53b0:	mov	r3, r2
    53b2:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    53b4:	ldrb.w	r2, [r0, #49]	; 0x31
    53b8:	cbnz	r2, 53d4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    53ba:	ldrb.w	r2, [r1, #49]	; 0x31
    53be:	tst.w	r2, #80	; 0x50
    53c2:	beq.n	53d4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    53c4:	ldr	r2, [r1, #0]
    53c6:	ands.w	r2, r2, #31
    53ca:	bne.n	53d4 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    53cc:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    53d0:	b.w	4f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    53d4:	movs	r0, #0
    53d6:	ldr.w	r4, [sp], #4
    53da:	bx	lr

000053dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    53dc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53e0:	mov	r7, r0
    53e2:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    53e4:	mov	sl, r1
    53e6:	cbz	r1, 541c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    53e8:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    53ea:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    53ee:	movs	r4, #1
    start = 0;
    53f0:	cmp	r3, r5
    53f2:	it	ls
    53f4:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    53f6:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    53fa:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    53fe:	mov	r8, r5
  uint32_t endAlloc = start;
    5400:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    5402:	lsls	r4, r3
    5404:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    5406:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    540a:	movs	r2, #0
    540c:	mov	r0, r7
    540e:	add.w	r1, r1, r6, lsr #12
    5412:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5416:	cbnz	r0, 544a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5418:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    541c:	ldr.w	r5, [r0, #1056]	; 0x420
    5420:	b.n	53ea <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    5422:	mov	r8, r6
        if (endAlloc == start) {
    5424:	cmp	r5, r6
    5426:	beq.n	5480 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    5428:	ldr.w	r2, [r7, #1072]	; 0x430
    542c:	cmp	r2, r6
    542e:	bls.n	5474 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    5430:	lsls	r4, r4, #1
    5432:	ands.w	r4, r4, #255	; 0xff
    5436:	bne.n	544e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    5438:	add.w	r3, r9, #1
    543c:	movs	r4, #1
    i = 0;
    543e:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    5442:	cmp.w	r3, #512	; 0x200
    5446:	bcs.n	5406 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    5448:	mov	r9, r3
        if (!(mask & cache[i])) {
    544a:	ldrb.w	r3, [r0, r9]
    544e:	tst	r3, r4
        endAlloc++;
    5450:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    5454:	bne.n	5422 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    5456:	sub.w	r2, r6, r8
    545a:	cmp	r2, fp
    545c:	bne.n	5424 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    545e:	cmp.w	sl, #0
    5462:	bne.n	546e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    5464:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    5468:	it	eq
    546a:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    546e:	add.w	r0, r8, #2
    5472:	b.n	5418 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    5474:	mov.w	r8, #0
          i = sectorSize;
    5478:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    547c:	mov	r6, r8
    547e:	b.n	5438 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    5480:	movs	r0, #1
    5482:	b.n	5418 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

00005484 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    5484:	subs	r1, #2
                                  uint32_t count, bool value) {
    5486:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    548a:	mov	r5, r0
    548c:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    548e:	ldr.w	r0, [r0, #1072]	; 0x430
    5492:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    5494:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    5496:	cmp	r3, r0
    5498:	bhi.n	551a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    549a:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    549e:	cbz	r7, 5510 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    54a0:	cmp	r1, r2
    54a2:	bhi.n	54b2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    54a4:	cmp	r3, r2
    54a6:	bls.n	54b2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    54a8:	cmp	r3, r0
    54aa:	it	cs
    54ac:	movcs	r3, #0
    54ae:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    54b2:	and.w	r3, r1, #7
    54b6:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    54ba:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    54be:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    54c2:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    54c6:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    54ca:	add.w	r8, r3, r1, lsr #12
    54ce:	movs	r2, #1
    54d0:	mov	r1, r8
    54d2:	mov	r0, r5
    54d4:	add	r8, r2
    54d6:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    54da:	cbz	r0, 551a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    54dc:	adds	r3, r0, r4
    54de:	mov	r1, r9
    54e0:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    54e4:	ldrb	r2, [r3, #0]
    54e6:	tst	r2, r1
    54e8:	ite	ne
    54ea:	movne	r4, #1
    54ec:	moveq	r4, #0
    54ee:	cmp	r4, r7
    54f0:	beq.n	551a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    54f2:	eors	r2, r1
        if (--count == 0) {
    54f4:	subs	r6, #1
        cache[i] ^= mask;
    54f6:	strb	r2, [r3, #0]
        if (--count == 0) {
    54f8:	beq.n	5520 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    54fa:	lsls	r1, r1, #1
    54fc:	ands.w	r1, r1, #255	; 0xff
    5500:	bne.n	54e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    5502:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    5504:	mov	r4, r1
    5506:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    5508:	cmp	r0, r3
      mask = 1;
    550a:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    550c:	bne.n	54e4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    550e:	b.n	54ce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    5510:	cmp	r1, r2
      m_bitmapStart = start;
    5512:	it	cc
    5514:	strcc.w	r1, [r5, #1056]	; 0x420
    5518:	b.n	54b2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    551a:	movs	r0, #0
}
    551c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    5520:	movs	r0, #1
    5522:	b.n	551c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00005524 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5524:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    5526:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    552a:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    552c:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    552e:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    5532:	ldrb.w	r5, [r0, #565]	; 0x235
    5536:	ands	r1, r3
    5538:	ldr	r3, [r4, #0]
    553a:	subs	r3, #2
    553c:	lsls	r3, r5
    553e:	add.w	r3, r3, r1, lsr #9
    5542:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    5546:	add	r1, r3
    5548:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    554c:	cbz	r0, 5556 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    554e:	ldr	r3, [r4, #4]
    5550:	ubfx	r3, r3, #0, #9
    5554:	add	r0, r3
}
    5556:	pop	{r3, r4, r5, pc}

00005558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5558:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    555a:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    555e:	mov	r4, r1
    5560:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    5562:	adds	r3, #1
    5564:	cmp	r3, r1
    5566:	bcs.n	556e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    5568:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    556c:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    556e:	ldr.w	r1, [r0, #1060]	; 0x424
    5572:	movs	r2, #0
    5574:	add.w	r0, r0, #528	; 0x210
    5578:	add.w	r1, r1, r4, lsr #7
    557c:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5580:	cmp	r0, #0
    5582:	beq.n	5568 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    5584:	lsls	r4, r4, #2
    5586:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    558a:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    558c:	adds	r2, r3, #1
  return 1;
    558e:	itet	ne
    5590:	movne	r0, #1
    return 0;
    5592:	moveq	r0, #0
  *value = next;
    5594:	strne	r3, [r5, #0]
  return 1;
    5596:	b.n	556c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00005598 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5598:	push	{r0, r1, r2, r4, r5, lr}
    559a:	mov	r5, r0
  uint32_t n = 0;
    559c:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    559e:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    55a0:	add	r2, sp, #4
    55a2:	ldr	r1, [sp, #4]
    55a4:	mov	r0, r5
    55a6:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    55aa:	cmp	r0, #0
    55ac:	blt.n	55ba <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    55ae:	add.w	r4, r4, #1
  } while (status);
    55b2:	bne.n	55a0 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    55b4:	mov	r0, r4
    55b6:	add	sp, #12
    55b8:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    55ba:	movs	r4, #0
    55bc:	b.n	55b4 <ExFatPartition::chainSize(unsigned long)+0x1c>

000055be <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55be:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55c0:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55c2:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55c4:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    55c8:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    55ca:	ands	r4, r3
    55cc:	add	r4, r2
  pos->position += offset;
    55ce:	add	r2, r3
    55d0:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    55d2:	ldrb.w	r3, [r0, #1093]	; 0x445
    55d6:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    55d8:	uxtb	r3, r3
    55da:	lsrs	r4, r3
  while (tmp--) {
    55dc:	cbnz	r4, 55e2 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    55de:	movs	r0, #1
    55e0:	b.n	55fc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    55e2:	ldrb	r3, [r5, #8]
      pos->cluster++;
    55e4:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    55e6:	cbz	r3, 55f0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    55e8:	adds	r1, #1
    55ea:	str	r1, [r5, #0]
    55ec:	subs	r4, #1
    55ee:	b.n	55dc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    55f0:	mov	r2, r5
    55f2:	mov	r0, r6
    55f4:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    55f8:	cmp	r0, #1
    55fa:	beq.n	55ec <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    55fc:	pop	{r4, r5, r6, pc}

000055fe <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    55fe:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5600:	push	{r3, r4, r5, lr}
    5602:	mov	r4, r1
    5604:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5606:	bhi.n	560c <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    5608:	movs	r0, #0
}
    560a:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    560c:	ldr.w	r3, [r0, #1072]	; 0x430
    5610:	adds	r3, #1
    5612:	cmp	r3, r1
    5614:	bcc.n	5608 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    5616:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    561a:	movs	r2, #1
    561c:	add.w	r0, r0, #528	; 0x210
    5620:	add.w	r1, r1, r4, lsr #7
    5624:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    5628:	cmp	r0, #0
    562a:	beq.n	5608 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    562c:	lsls	r4, r4, #2
    562e:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5632:	str	r5, [r0, r4]
  return true;
    5634:	movs	r0, #1
    5636:	b.n	560a <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

00005638 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5638:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    563c:	mov	r7, r0
    563e:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    5640:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    5642:	add	r2, sp, #4
    5644:	mov	r1, r4
    5646:	mov	r0, r7
    5648:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    564c:	subs	r6, r0, #0
    564e:	bge.n	565a <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    5650:	movs	r5, #0
}
    5652:	mov	r0, r5
    5654:	add	sp, #8
    5656:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    565a:	movs	r2, #0
    565c:	mov	r1, r4
    565e:	mov	r0, r7
    5660:	bl	55fe <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5664:	mov	r5, r0
    5666:	cmp	r0, #0
    5668:	beq.n	5650 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    566a:	adds	r2, r4, #1
    566c:	cbz	r6, 5674 <ExFatPartition::freeChain(unsigned long)+0x3c>
    566e:	ldr	r3, [sp, #4]
    5670:	cmp	r3, r2
    5672:	beq.n	568a <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5674:	movs	r3, #0
    5676:	sub.w	r2, r2, r8
    567a:	mov	r1, r8
    567c:	mov	r0, r7
    567e:	bl	5484 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5682:	cmp	r0, #0
    5684:	beq.n	5650 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    5686:	ldr.w	r8, [sp, #4]
    cluster = next;
    568a:	ldr	r4, [sp, #4]
  } while (status);
    568c:	cmp	r6, #0
    568e:	bne.n	5642 <ExFatPartition::freeChain(unsigned long)+0xa>
    5690:	b.n	5652 <ExFatPartition::freeChain(unsigned long)+0x1a>

00005692 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    5692:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    5696:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    5698:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    569a:	ldr.w	r7, [r0, #1068]	; 0x42c
    569e:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    56a2:	mov	r5, r4
    56a4:	mov	r1, r7
    56a6:	movs	r2, #0
    56a8:	mov	r0, r8
    56aa:	adds	r7, #1
    56ac:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    56b0:	cbz	r0, 56ce <ExFatPartition::freeClusterCount()+0x3c>
    56b2:	subs	r0, #1
    56b4:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    56b8:	ldrb.w	r1, [r0, #1]!
    56bc:	cmp	r1, #255	; 0xff
    56be:	bne.n	56d2 <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    56c0:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    56c2:	adds	r5, #8
      if (nc >= m_clusterCount) {
    56c4:	ldr.w	r3, [r6, #1072]	; 0x430
    56c8:	cmp	r3, r5
    56ca:	bhi.n	56ec <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    56cc:	subs	r0, r3, r4
      }
    }
  }
}
    56ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    56d2:	cmp	r1, #0
    56d4:	beq.n	56c2 <ExFatPartition::freeClusterCount()+0x30>
    56d6:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56d8:	movs	r3, #1
          if ((mask & cache[i])) {
    56da:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56dc:	mov.w	r3, r3, lsl #1
            usedCount++;
    56e0:	it	ne
    56e2:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    56e4:	subs	r2, #1
    56e6:	uxtb	r3, r3
    56e8:	bne.n	56da <ExFatPartition::freeClusterCount()+0x48>
    56ea:	b.n	56c2 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    56ec:	cmp	r5, ip
    56ee:	bne.n	56b8 <ExFatPartition::freeClusterCount()+0x26>
    56f0:	b.n	56a4 <ExFatPartition::freeClusterCount()+0x12>
	...

000056f4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    56f4:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    56f6:	mov.w	r3, #4294967295
    56fa:	mov	r6, r2
    56fc:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5700:	movs	r2, #0
  m_blockDev = dev;
    5702:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    5706:	mov	r4, r0
    m_blockDev = blockDev;
    5708:	str	r1, [r0, #4]
    570a:	str.w	r1, [r0, #532]	; 0x214
    570e:	mov	r1, r2
  m_fatType = 0;
    5710:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    5714:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    5716:	str	r3, [r0, #12]
    m_status = 0;
    5718:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    571c:	str.w	r3, [r0, #540]	; 0x21c
    5720:	mov	r0, r7
    5722:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    5726:	cmp	r6, #4
    5728:	mov	r5, r0
    572a:	bls.n	5730 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    572c:	movs	r0, #0
}
    572e:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    5730:	cmp	r0, #0
    5732:	beq.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    5734:	cbz	r6, 5764 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    5736:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    5738:	add.w	r3, r0, r3, lsl #4
    573c:	ldrb.w	r2, [r3, #446]	; 0x1be
    5740:	ands.w	r2, r2, #127	; 0x7f
    5744:	bne.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    5746:	ldrb.w	r3, [r3, #450]	; 0x1c2
    574a:	cmp	r3, #0
    574c:	beq.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    574e:	add.w	r6, r0, r6, lsl #4
    5752:	mov	r0, r7
    5754:	ldr.w	r6, [r6, #438]	; 0x1b6
    5758:	mov	r1, r6
    575a:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    575e:	mov	r5, r0
    5760:	cmp	r0, #0
    5762:	beq.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    5764:	ldr	r1, [pc, #104]	; (57d0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    5766:	movs	r2, #5
    5768:	adds	r0, r5, #3
    576a:	bl	da4c <strncmp>
    576e:	mov	r1, r0
    5770:	cmp	r0, #0
    5772:	bne.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    5774:	ldrb.w	r3, [r5, #108]	; 0x6c
    5778:	cmp	r3, #9
    577a:	bne.n	572c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    577c:	ldr	r3, [r5, #80]	; 0x50
    577e:	add	r3, r6
    5780:	str.w	r3, [r4, #1060]	; 0x424
    5784:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    5786:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    578a:	ldr	r3, [r5, #88]	; 0x58
    578c:	add	r3, r6
    578e:	str.w	r3, [r4, #1068]	; 0x42c
    5792:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    5794:	str.w	r3, [r4, #1072]	; 0x430
    5798:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    579a:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    579e:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57a2:	movs	r5, #1
  m_bitmapStart = 0;
    57a4:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    57a8:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    57aa:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57ae:	adds	r3, #9
  bitmapFind(0, 1);
    57b0:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    57b2:	lsl.w	r3, r5, r3
    57b6:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    57ba:	subs	r3, #1
    57bc:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    57c0:	bl	53dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    57c4:	movs	r3, #64	; 0x40
  return true;
    57c6:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    57c8:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    57cc:	b.n	572e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    57ce:	nop
    57d0:	.word	0x20007ec3

000057d4 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    57d4:	push	{r4, lr}
    57d6:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    57d8:	ldr.w	r1, [r0, #1076]	; 0x434
    57dc:	bl	5598 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    57e0:	ldrb.w	r3, [r4, #1093]	; 0x445
    57e4:	adds	r3, #9
  return nc << bytesPerClusterShift();
    57e6:	uxtb	r3, r3
}
    57e8:	lsls	r0, r3
    57ea:	pop	{r4, pc}

000057ec <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    57ec:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    57ee:	add.w	r4, r0, #1096	; 0x448
    57f2:	sub	sp, #56	; 0x38
    57f4:	movs	r3, #0
    57f6:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    57f8:	mov	r0, sp
    57fa:	mov	r1, r4
    57fc:	str	r3, [sp, #48]	; 0x30
    57fe:	bl	52dc <ExFatFile::open(ExFatFile*, char const*, int)>
    5802:	mov	r5, r0
    5804:	cbz	r0, 582e <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    5806:	ldrb.w	r3, [sp, #49]	; 0x31
    580a:	ands.w	r3, r3, #80	; 0x50
    580e:	beq.n	5834 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    5810:	mov	r2, sp
    5812:	mov	r3, r4
    5814:	add	r6, sp, #48	; 0x30
    5816:	mov	r4, r2
    5818:	adds	r3, #8
    581a:	ldmia	r4!, {r0, r1}
    581c:	cmp	r4, r6
    581e:	str.w	r0, [r3, #-8]
    5822:	str.w	r1, [r3, #-4]
    5826:	mov	r2, r4
    5828:	bne.n	5816 <ExFatVolume::chdir(char const*)+0x2a>
    582a:	ldr	r0, [r4, #0]
    582c:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    582e:	mov	r0, r5
    5830:	add	sp, #56	; 0x38
    5832:	pop	{r4, r5, r6, pc}
  return false;
    5834:	mov	r5, r3
    5836:	b.n	582e <ExFatVolume::chdir(char const*)+0x42>

00005838 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    5838:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    583a:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    583c:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    583e:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5840:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5842:	orr.w	r2, r2, r1, lsr #1
    5846:	ldrb	r1, [r0, r3]
    5848:	uxtah	r2, r1, r2
    584c:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    584e:	bne.n	5862 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    5850:	cmp	r4, #133	; 0x85
    5852:	ite	ne
    5854:	movne	r2, #1
    5856:	moveq	r2, #3
    5858:	add	r3, r2
    585a:	cmp	r3, #31
    585c:	bls.n	583e <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    585e:	mov	r0, r1
    5860:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5862:	movs	r2, #1
    5864:	b.n	5858 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

00005866 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    5866:	push	{r4, lr}
    5868:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    586a:	bl	4924 <FsCache::sync()>
    586e:	cbz	r0, 5888 <ExFatPartition::cacheSync()+0x22>
    5870:	add.w	r0, r4, #528	; 0x210
    5874:	bl	4924 <FsCache::sync()>
    5878:	cbz	r0, 5888 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    587a:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    587e:	ldr	r3, [r0, #0]
  }
    5880:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    5884:	ldr	r3, [r3, #32]
    5886:	bx	r3
  }
    5888:	movs	r0, #0
    588a:	pop	{r4, pc}

0000588c <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    588c:	push	{r3, r4, r5, r6, r7, lr}
    588e:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    5890:	ldr	r0, [r0, #32]
    5892:	ldr	r1, [r4, #24]
    5894:	cbz	r1, 5898 <ExFatFile::addCluster()+0xc>
    5896:	adds	r1, #1
    5898:	movs	r2, #1
    589a:	bl	53dc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    589e:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    58a0:	mov	r5, r0
  if (find < 2) {
    58a2:	bhi.n	58aa <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    58a4:	movs	r6, #0
}
    58a6:	mov	r0, r6
    58a8:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    58aa:	movs	r3, #1
    58ac:	mov	r1, r0
    58ae:	ldr	r0, [r4, #32]
    58b0:	mov	r2, r3
    58b2:	bl	5484 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    58b6:	mov	r6, r0
    58b8:	cmp	r0, #0
    58ba:	beq.n	58a4 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    58bc:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58be:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    58c2:	cbnz	r2, 58d0 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    58c4:	orr.w	r3, r3, #64	; 0x40
    58c8:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    58cc:	str	r5, [r4, #24]
  return true;
    58ce:	b.n	58a6 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    58d0:	lsls	r1, r3, #25
    58d2:	bmi.n	58f8 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    58d4:	mov.w	r2, #4294967295
    58d8:	mov	r1, r5
    58da:	ldr	r0, [r4, #32]
    58dc:	bl	55fe <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58e0:	cmp	r0, #0
    58e2:	beq.n	58a4 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    58e4:	ldr	r1, [r4, #24]
    58e6:	cmp	r1, #0
    58e8:	beq.n	58cc <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    58ea:	mov	r2, r5
    58ec:	ldr	r0, [r4, #32]
    58ee:	bl	55fe <ExFatPartition::fatPut(unsigned long, unsigned long)>
    58f2:	cmp	r0, #0
    58f4:	bne.n	58cc <ExFatFile::addCluster()+0x40>
    58f6:	b.n	58a4 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    58f8:	adds	r2, #1
    58fa:	cmp	r2, r5
    58fc:	beq.n	58cc <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    58fe:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5902:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5904:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    5908:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    590a:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    590c:	cmp	r3, r1
    590e:	bls.n	58d4 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    5910:	adds	r7, r1, #1
    5912:	mov	r2, r7
    5914:	bl	55fe <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5918:	cmp	r0, #0
    591a:	beq.n	58a4 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    591c:	mov	r1, r7
    591e:	b.n	5908 <ExFatFile::addCluster()+0x7c>

00005920 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    5920:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5922:	ldrb.w	r3, [r0, #51]	; 0x33
    5926:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    5928:	lsls	r2, r3, #30
    592a:	bmi.n	5930 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    592c:	movs	r0, #0
}
    592e:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    5930:	ldr	r1, [r0, #28]
    5932:	cbnz	r1, 596a <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    5934:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    5936:	movs	r2, #1
    5938:	uxtb	r1, r5
    593a:	mov	r0, r4
    593c:	bl	4c0a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5940:	cmp	r0, #0
    5942:	beq.n	592c <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    5944:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    5946:	adds	r5, #1
    cache[0] &= 0x7F;
    5948:	and.w	r3, r3, #127	; 0x7f
    594c:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    594e:	uxtb	r3, r5
    5950:	ldrb.w	r2, [r4, #48]	; 0x30
    5954:	cmp	r2, r3
    5956:	bcs.n	5936 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    5958:	movs	r3, #0
  return m_vol->cacheSync();
    595a:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    595c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5960:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    5964:	bl	5866 <ExFatPartition::cacheSync()>
    5968:	b.n	592e <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    596a:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    596c:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    596e:	bpl.n	59a6 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5970:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5974:	ldrd	r2, r5, [r4, #8]
    5978:	adds	r3, #9
    597a:	subs	r2, #1
    597c:	uxtb	r3, r3
    597e:	adc.w	r5, r5, #4294967295
    5982:	rsb	r7, r3, #32
    5986:	sub.w	r6, r3, #32
    598a:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    598c:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    598e:	lsl.w	r7, r5, r7
    5992:	lsr.w	r6, r5, r6
    5996:	orrs	r2, r7
    5998:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    599a:	adds	r2, #1
    599c:	bl	5484 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    59a0:	cmp	r0, #0
    59a2:	bne.n	5934 <ExFatFile::remove()+0x14>
    59a4:	b.n	592c <ExFatFile::remove()+0xc>
    59a6:	bl	5638 <ExFatPartition::freeChain(unsigned long)>
    59aa:	b.n	59a0 <ExFatFile::remove()+0x80>

000059ac <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    59ac:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    59ae:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    59b2:	sub	sp, #32
    59b4:	mov	r4, r0
  if (!isSubDir()) {
    59b6:	lsls	r3, r3, #27
    59b8:	bmi.n	59c0 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    59ba:	movs	r0, #0
}
    59bc:	add	sp, #32
    59be:	pop	{r4, pc}
    seekSet(0);
    59c0:	movs	r2, #0
    59c2:	movs	r3, #0
    59c4:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    59c8:	movs	r2, #32
    59ca:	mov	r1, sp
    59cc:	mov	r0, r4
    59ce:	bl	4cfc <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    59d2:	cbz	r0, 59e8 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    59d4:	cmp	r0, #32
    59d6:	bne.n	59ba <ExFatFile::rmdir()+0xe>
    59d8:	ldrsb.w	r2, [sp]
    59dc:	ldrb.w	r3, [sp]
    59e0:	cmp	r2, #0
    59e2:	blt.n	59ba <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    59e4:	cmp	r3, #0
    59e6:	bne.n	59c8 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    59e8:	movs	r3, #8
  return remove();
    59ea:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    59ec:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    59f0:	ldrb.w	r3, [r4, #51]	; 0x33
    59f4:	orr.w	r3, r3, #2
    59f8:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    59fc:	bl	5920 <ExFatFile::remove()>
    5a00:	b.n	59bc <ExFatFile::rmdir()+0x10>
	...

00005a04 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    5a04:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5a08:	movs	r7, #0
    5a0a:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5a0c:	ldr.w	r8, [pc, #204]	; 5adc <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    5a10:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    5a12:	movs	r2, #0
    5a14:	uxtb	r1, r7
    5a16:	mov	r0, r4
    5a18:	bl	4c0a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    5a1c:	mov	r5, r0
    5a1e:	cmp	r0, #0
    5a20:	beq.n	5a9e <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    5a22:	ldrb	r3, [r0, #0]
    5a24:	cmp	r3, #192	; 0xc0
    5a26:	beq.n	5ab2 <ExFatFile::syncDir()+0xae>
    5a28:	cmp	r3, #193	; 0xc1
    5a2a:	beq.n	5a70 <ExFatFile::syncDir()+0x6c>
    5a2c:	cmp	r3, #133	; 0x85
    5a2e:	bne.n	5a9e <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    5a30:	ldrb.w	r3, [r4, #49]	; 0x31
    5a34:	and.w	r3, r3, #55	; 0x37
    5a38:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    5a3a:	ldr.w	r3, [r8]
    5a3e:	cbz	r3, 5a62 <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    5a40:	add.w	r2, sp, #3
    5a44:	add.w	r1, sp, #6
    5a48:	add	r0, sp, #4
    5a4a:	blx	r3
          df->modifyTimeMs = ms10;
    5a4c:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    5a50:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    5a54:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    5a56:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    5a5a:	strh	r2, [r5, #12]
    5a5c:	strh	r3, [r5, #14]
    5a5e:	strh	r2, [r5, #16]
    5a60:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    5a62:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    5a64:	ldrb.w	r3, [r2, #528]	; 0x210
    5a68:	orr.w	r3, r3, #1
    5a6c:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a70:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    5a72:	mov	r1, r6
    5a74:	mov	r0, r5
    5a76:	bl	5838 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a7a:	ldrb.w	r2, [r4, #48]	; 0x30
    5a7e:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    5a80:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    5a82:	cmp	r2, r3
    5a84:	bcs.n	5a12 <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    5a86:	movs	r2, #1
    5a88:	add.w	r1, r4, #36	; 0x24
    5a8c:	ldr	r0, [r4, #32]
    5a8e:	bl	5524 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5a92:	cbz	r0, 5a9e <ExFatFile::syncDir()+0x9a>
    5a94:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    5a96:	ldr	r0, [r4, #32]
    5a98:	bl	5866 <ExFatPartition::cacheSync()>
    5a9c:	cbnz	r0, 5aac <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5a9e:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    5aa2:	movs	r0, #0
  m_error |= WRITE_ERROR;
    5aa4:	orr.w	r3, r3, #1
    5aa8:	strb.w	r3, [r4, #50]	; 0x32
}
    5aac:	add	sp, #8
    5aae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    5ab2:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5ab6:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    5ab8:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    5aba:	ite	mi
    5abc:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    5ac0:	andpl.w	r3, r3, #253	; 0xfd
    5ac4:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    5ac6:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    5aca:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    5ace:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    5ad0:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    5ad2:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    5ad6:	strd	r2, r3, [r0, #24]
    5ada:	b.n	5a62 <ExFatFile::syncDir()+0x5e>
    5adc:	.word	0x200273fc

00005ae0 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    5ae0:	push	{r4, lr}
  if (!isOpen()) {
    5ae2:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    5ae6:	mov	r4, r0
  if (!isOpen()) {
    5ae8:	cbnz	r3, 5aee <ExFatFile::sync()+0xe>
    return true;
    5aea:	movs	r0, #1
}
    5aec:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5aee:	ldrsb.w	r2, [r0, #51]	; 0x33
    5af2:	ldrb.w	r3, [r0, #51]	; 0x33
    5af6:	cmp	r2, #0
    5af8:	bge.n	5b0a <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5afa:	and.w	r3, r3, #127	; 0x7f
    5afe:	strb.w	r3, [r0, #51]	; 0x33
}
    5b02:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    5b06:	b.w	5a04 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    5b0a:	ldr	r0, [r0, #32]
    5b0c:	bl	5866 <ExFatPartition::cacheSync()>
    5b10:	cmp	r0, #0
    5b12:	bne.n	5aea <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    5b14:	ldrb.w	r3, [r4, #50]	; 0x32
    5b18:	orr.w	r3, r3, #1
    5b1c:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    5b20:	b.n	5aec <ExFatFile::sync()+0xc>

00005b22 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    5b22:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b24:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    5b28:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5b2a:	lsls	r2, r3, #25
    5b2c:	bpl.n	5bae <ExFatFile::addDirCluster()+0x8c>
    5b2e:	ldr	r0, [r0, #32]
    5b30:	bl	57d4 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    5b34:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    5b36:	ldr.w	r3, [r3, #1084]	; 0x43c
    5b3a:	add	r0, r3
  if (dl >= 0X4000000) {
    5b3c:	cmp.w	r0, #67108864	; 0x4000000
    5b40:	bcs.n	5bce <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    5b42:	mov	r0, r4
    5b44:	bl	588c <ExFatFile::addCluster()>
    5b48:	cmp	r0, #0
    5b4a:	beq.n	5bce <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    5b4c:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5b4e:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    5b50:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5b52:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    5b54:	ldrb.w	r2, [r3, #1093]	; 0x445
    5b58:	subs	r5, #2
    5b5a:	ldr.w	r3, [r3, #1068]	; 0x42c
    5b5e:	lsls	r5, r2
    5b60:	add	r5, r3
    5b62:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5b64:	ldrb.w	r3, [r0, #1093]	; 0x445
    5b68:	lsl.w	r3, r7, r3
    5b6c:	cmp	r6, r3
    5b6e:	bcc.n	5bb2 <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    5b70:	ldrb.w	r3, [r4, #49]	; 0x31
    5b74:	lsls	r3, r3, #25
    5b76:	bmi.n	5ba4 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5b78:	ldrb.w	r3, [r4, #51]	; 0x33
    5b7c:	orn	r3, r3, #127	; 0x7f
    5b80:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5b84:	ldr.w	r2, [r0, #1084]	; 0x43c
    5b88:	ldrd	r3, r1, [r4, #8]
    5b8c:	adds	r3, r3, r2
    5b8e:	adc.w	r1, r1, #0
    5b92:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5b96:	ldrd	r3, r1, [r4, #16]
    5b9a:	adds	r3, r3, r2
    5b9c:	adc.w	r1, r1, #0
    5ba0:	strd	r3, r1, [r4, #16]
  return sync();
    5ba4:	mov	r0, r4
}
    5ba6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    5baa:	b.w	5ae0 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    5bae:	ldr	r0, [r0, #8]
    5bb0:	b.n	5b34 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    5bb2:	movs	r2, #5
    5bb4:	adds	r1, r5, r6
    5bb6:	add.w	r0, r0, #528	; 0x210
    5bba:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    5bbe:	cbz	r0, 5bce <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    5bc0:	mov.w	r2, #512	; 0x200
    5bc4:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5bc6:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    5bc8:	bl	942c <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    5bcc:	b.n	5b62 <ExFatFile::addDirCluster()+0x40>
}
    5bce:	movs	r0, #0
    5bd0:	pop	{r3, r4, r5, r6, r7, pc}

00005bd2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5bd2:	push	{r4, lr}
  if (!parent->isDir()) {
    5bd4:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    5bd8:	mov	r4, r0
  if (!parent->isDir()) {
    5bda:	tst.w	r3, #80	; 0x50
    5bde:	beq.n	5c16 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    5be0:	movw	r3, #2562	; 0xa02
    5be4:	bl	4f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5be8:	cbz	r0, 5c16 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    5bea:	movs	r3, #16
  if (!addDirCluster()) {
    5bec:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    5bee:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    5bf2:	bl	5b22 <ExFatFile::addDirCluster()>
    5bf6:	cbz	r0, 5c16 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    5bf8:	ldr	r3, [r4, #24]
    5bfa:	mov	r0, r4
    5bfc:	movs	r2, #0
    5bfe:	str	r3, [r4, #28]
    5c00:	movs	r3, #0
    5c02:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5c06:	movs	r3, #193	; 0xc1
  return sync();
    5c08:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5c0a:	strb.w	r3, [r4, #51]	; 0x33
}
    5c0e:	ldmia.w	sp!, {r4, lr}
  return sync();
    5c12:	b.w	5ae0 <ExFatFile::sync()>
}
    5c16:	movs	r0, #0
    5c18:	pop	{r4, pc}

00005c1a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    5c1a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c1e:	mov	r8, r3
    5c20:	sub	sp, #88	; 0x58
    5c22:	movs	r3, #0
    5c24:	mov	r5, r0
    5c26:	mov	r4, r1
    5c28:	str	r2, [sp, #4]
    5c2a:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    5c2e:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    5c30:	ldrb.w	r3, [r0, #49]	; 0x31
    5c34:	cbz	r3, 5c3e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    5c36:	movs	r0, #0
}
    5c38:	add	sp, #88	; 0x58
    5c3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    5c3e:	ldrb.w	r3, [r1, #49]	; 0x31
    5c42:	tst.w	r3, #80	; 0x50
    5c46:	beq.n	5c36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    5c48:	ldrb	r3, [r2, #0]
    5c4a:	cmp	r3, #47	; 0x2f
    5c4c:	bne.n	5c64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    5c4e:	ldr	r2, [sp, #4]
    5c50:	ldrb	r3, [r2, #0]
    5c52:	cmp	r3, #47	; 0x2f
    5c54:	beq.n	5cb0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    5c56:	ldr	r1, [r4, #32]
    5c58:	add	r0, sp, #32
    5c5a:	bl	4c56 <ExFatFile::openRoot(ExFatVolume*)>
    5c5e:	cmp	r0, #0
    5c60:	beq.n	5c36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    5c62:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    5c64:	add	r3, sp, #4
    5c66:	add	r2, sp, #8
    5c68:	ldr	r1, [sp, #4]
    5c6a:	mov	r0, r5
    5c6c:	bl	4c7c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    5c70:	cmp	r0, #0
    5c72:	beq.n	5c36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    5c74:	ldr	r3, [sp, #4]
    5c76:	ldrb	r3, [r3, #0]
    5c78:	cbz	r3, 5ccc <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    5c7a:	movs	r3, #0
    5c7c:	add	r2, sp, #8
    5c7e:	mov	r1, r4
    5c80:	mov	r0, r5
    5c82:	bl	4f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    5c86:	cbz	r0, 5cb6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    5c88:	add	r6, sp, #32
    5c8a:	mov	r2, r5
    5c8c:	add.w	r3, r5, #48	; 0x30
    5c90:	mov	r4, r6
    5c92:	ldr	r0, [r2, #0]
    5c94:	adds	r2, #8
    5c96:	ldr.w	r1, [r2, #-4]
    5c9a:	mov	r7, r6
    5c9c:	cmp	r2, r3
    5c9e:	stmia	r7!, {r0, r1}
    5ca0:	mov	r6, r7
    5ca2:	bne.n	5c92 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    5ca4:	ldr	r0, [r2, #0]
    5ca6:	str	r0, [r7, #0]
    close();
    5ca8:	mov	r0, r5
    5caa:	bl	4c42 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    5cae:	b.n	5c64 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    5cb0:	adds	r2, #1
    5cb2:	str	r2, [sp, #4]
    5cb4:	b.n	5c4e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    5cb6:	cmp.w	r8, #0
    5cba:	beq.n	5c36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    5cbc:	add	r2, sp, #8
    5cbe:	mov	r1, r4
    5cc0:	mov	r0, r5
    5cc2:	bl	5bd2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5cc6:	cmp	r0, #0
    5cc8:	bne.n	5c88 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    5cca:	b.n	5c36 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    5ccc:	add	r2, sp, #8
    5cce:	mov	r1, r4
    5cd0:	mov	r0, r5
    5cd2:	bl	5bd2 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    5cd6:	b.n	5c38 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00005cd8 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    5cd8:	push	{r4, r5, r6, r7, lr}
    5cda:	mov	r4, r0
    5cdc:	sub	sp, #116	; 0x74
    5cde:	movs	r0, #0
    5ce0:	str	r0, [sp, #48]	; 0x30
    5ce2:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    5ce4:	ldrb.w	r0, [r4, #49]	; 0x31
    5ce8:	tst.w	r0, #24
    5cec:	bne.n	5cf4 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    5cee:	movs	r0, #0
}
    5cf0:	add	sp, #116	; 0x74
    5cf2:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    5cf4:	ldr	r0, [r4, #32]
    5cf6:	ldr	r3, [r1, #32]
    5cf8:	cmp	r0, r3
    5cfa:	bne.n	5cee <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    5cfc:	movw	r3, #2561	; 0xa01
    5d00:	mov	r0, sp
    5d02:	bl	52dc <ExFatFile::open(ExFatFile*, char const*, int)>
    5d06:	cmp	r0, #0
    5d08:	beq.n	5cee <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    5d0a:	add	r2, sp, #56	; 0x38
    5d0c:	mov	r3, r4
    5d0e:	add.w	r7, r4, #48	; 0x30
    5d12:	mov	r6, r2
    5d14:	ldr	r0, [r3, #0]
    5d16:	adds	r3, #8
    5d18:	ldr.w	r1, [r3, #-4]
    5d1c:	mov	r5, r2
    5d1e:	cmp	r3, r7
    5d20:	stmia	r5!, {r0, r1}
    5d22:	mov	r2, r5
    5d24:	bne.n	5d14 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    5d26:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    5d28:	add	r2, sp, #36	; 0x24
    5d2a:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    5d2e:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    5d30:	ldmia	r2, {r0, r1, r2}
    5d32:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    5d36:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    5d3a:	mov	r0, r4
  m_setCount = file.m_setCount;
    5d3c:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5d40:	ldrb.w	r3, [r4, #51]	; 0x33
    5d44:	orn	r3, r3, #127	; 0x7f
    5d48:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    5d4c:	bl	5ae0 <ExFatFile::sync()>
    5d50:	cmp	r0, #0
    5d52:	beq.n	5cee <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    5d54:	movs	r3, #0
  return oldFile.remove();
    5d56:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    5d58:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    5d5a:	movs	r3, #2
    5d5c:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    5d60:	movs	r3, #8
    5d62:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    5d66:	bl	5920 <ExFatFile::remove()>
    5d6a:	b.n	5cf0 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00005d6c <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5d6c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    5d6e:	ldrb.w	r2, [r0, #51]	; 0x33
    5d72:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5d74:	lsls	r3, r2, #30
    5d76:	bmi.n	5d7e <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5d78:	movs	r0, #0
}
    5d7a:	add	sp, #12
    5d7c:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    5d7e:	ldr	r3, [r0, #28]
    5d80:	cmp	r3, #0
    5d82:	beq.n	5e32 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    5d84:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    5d88:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    5d8a:	beq.n	5dfc <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5d8c:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5d8e:	ldrb.w	r5, [r0, #1093]	; 0x445
    5d92:	ldrd	r2, r6, [r4, #8]
    5d96:	adds	r5, #9
    5d98:	subs	r2, #1
    5d9a:	uxtb	r5, r5
    5d9c:	adc.w	r6, r6, #4294967295
    5da0:	rsb	ip, r5, #32
    5da4:	sub.w	r7, r5, #32
    5da8:	lsrs	r2, r5
    5daa:	lsl.w	ip, r6, ip
    5dae:	lsr.w	r7, r6, r7
    5db2:	orr.w	r2, r2, ip
    5db6:	orrs	r2, r7
    5db8:	adds	r2, #1
    if (m_curCluster) {
    5dba:	cbz	r1, 5de8 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    5dbc:	subs	r3, #1
      toFree = m_curCluster + 1;
    5dbe:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    5dc0:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    5dc2:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5dc4:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5dc6:	cbnz	r2, 5dee <ExFatFile::truncate()+0x82>
  return sync();
    5dc8:	mov	r0, r4
  m_dataLength = m_curPosition;
    5dca:	ldrd	r2, r3, [r4]
    5dce:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    5dd2:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5dd6:	ldrb.w	r3, [r4, #51]	; 0x33
    5dda:	orn	r3, r3, #127	; 0x7f
    5dde:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    5de2:	bl	5ae0 <ExFatFile::sync()>
    5de6:	b.n	5d7a <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    5de8:	str	r3, [sp, #4]
      m_firstCluster = 0;
    5dea:	str	r1, [r4, #28]
    5dec:	b.n	5dc6 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5dee:	movs	r3, #0
    5df0:	ldr	r1, [sp, #4]
    5df2:	bl	5484 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    5df6:	cmp	r0, #0
    5df8:	bne.n	5dc8 <ExFatFile::truncate()+0x5c>
    5dfa:	b.n	5d78 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    5dfc:	cbz	r1, 5e2c <ExFatFile::truncate()+0xc0>
      toFree = 0;
    5dfe:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    5e00:	add	r2, sp, #4
    5e02:	ldr	r0, [r0, #32]
    5e04:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    5e08:	cmp	r0, #0
    5e0a:	blt.n	5d78 <ExFatFile::truncate()+0xc>
      if (fg) {
    5e0c:	beq.n	5e1e <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    5e0e:	mov.w	r2, #4294967295
    5e12:	ldr	r1, [r4, #24]
    5e14:	ldr	r0, [r4, #32]
    5e16:	bl	55fe <ExFatPartition::fatPut(unsigned long, unsigned long)>
    5e1a:	cmp	r0, #0
    5e1c:	beq.n	5d78 <ExFatFile::truncate()+0xc>
    if (toFree) {
    5e1e:	ldr	r1, [sp, #4]
    5e20:	cmp	r1, #0
    5e22:	beq.n	5dc8 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    5e24:	ldr	r0, [r4, #32]
    5e26:	bl	5638 <ExFatPartition::freeChain(unsigned long)>
    5e2a:	b.n	5df6 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    5e2c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    5e2e:	str	r1, [r0, #28]
    5e30:	b.n	5e1e <ExFatFile::truncate()+0xb2>
      return true;
    5e32:	movs	r0, #1
    5e34:	b.n	5d7a <ExFatFile::truncate()+0xe>
	...

00005e38 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5e38:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e3c:	ldrb.w	r3, [r0, #51]	; 0x33
    5e40:	mov	r8, r1
    5e42:	mov	r4, r0
    5e44:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5e46:	lsls	r1, r3, #30
    5e48:	bpl.n	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5e4a:	lsls	r2, r3, #28
    5e4c:	bmi.n	5e7c <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    5e4e:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e50:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5e54:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5e58:	ldrd	r5, r3, [r4]
  while (toWrite) {
    5e5c:	cbnz	r7, 5e9a <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5e5e:	ldrd	r1, r2, [r4, #8]
    5e62:	cmp	r1, r5
    5e64:	sbcs	r2, r3
    5e66:	bcs.w	602c <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    5e6a:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5e6e:	ldrb.w	r3, [r4, #51]	; 0x33
    5e72:	orn	r3, r3, #127	; 0x7f
    5e76:	strb.w	r3, [r4, #51]	; 0x33
    5e7a:	b.n	6036 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    5e7c:	ldrd	r2, r3, [r0, #16]
    5e80:	bl	4eac <ExFatFile::seekSet(unsigned long long)>
    5e84:	cmp	r0, #0
    5e86:	bne.n	5e4e <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5e88:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    5e8c:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    5e90:	orr.w	r3, r3, #1
    5e94:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    5e98:	b.n	6036 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5e9a:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    5e9c:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5e9e:	ldr.w	r3, [r0, #1080]	; 0x438
    5ea2:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5ea4:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    5ea8:	cbnz	r5, 5ef4 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    5eaa:	cmp	r1, #0
    5eac:	beq.n	5f5a <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    5eae:	ldrb.w	r3, [r4, #51]	; 0x33
    5eb2:	lsls	r3, r3, #25
    5eb4:	bpl.n	5f4c <ExFatFile::write(void const*, unsigned int)+0x114>
    5eb6:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    5eba:	ldrd	r3, r2, [r4, #8]
    5ebe:	adds	r0, #9
    5ec0:	subs	r3, #1
    5ec2:	uxtb	r0, r0
    5ec4:	adc.w	r2, r2, #4294967295
    5ec8:	rsb	lr, r0, #32
    5ecc:	sub.w	ip, r0, #32
    5ed0:	lsrs	r3, r0
    5ed2:	lsl.w	lr, r2, lr
    5ed6:	lsr.w	ip, r2, ip
    5eda:	ldr	r2, [r4, #28]
    5edc:	orr.w	r3, r3, lr
    5ee0:	orr.w	r3, r3, ip
    5ee4:	add	r3, r2
          if (m_curCluster < lc) {
    5ee6:	cmp	r3, r1
    5ee8:	bhi.n	5f46 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    5eea:	mov	r0, r4
    5eec:	bl	588c <ExFatFile::addCluster()>
    5ef0:	cmp	r0, #0
    5ef2:	beq.n	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    5ef4:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5ef8:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    5efa:	ldr	r1, [r4, #24]
    5efc:	ldrb.w	r2, [ip, #1093]	; 0x445
    5f00:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5f02:	ldr.w	r0, [ip, #1068]	; 0x42c
    5f06:	lsls	r1, r2
    5f08:	add.w	r1, r1, r5, lsr #9
    5f0c:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    5f0e:	cbnz	r6, 5f72 <ExFatFile::write(void const*, unsigned int)+0x13a>
    5f10:	cmp.w	r7, #512	; 0x200
    5f14:	bcc.n	5f72 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    5f16:	cmp.w	r7, #1024	; 0x400
    5f1a:	ldr.w	lr, [ip, #540]	; 0x21c
    5f1e:	ldr.w	r0, [ip, #532]	; 0x214
    5f22:	bcs.n	5ffa <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    5f24:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    5f26:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    5f28:	ittt	eq
    5f2a:	moveq.w	r3, #4294967295
    m_status = 0;
    5f2e:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5f32:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    5f36:	ldr	r3, [r0, #0]
    5f38:	ldr	r3, [r3, #36]	; 0x24
    5f3a:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    5f3c:	cmp	r0, #0
    5f3e:	beq.n	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    5f40:	mov.w	r5, #512	; 0x200
    5f44:	b.n	5fc6 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    5f46:	adds	r1, #1
    5f48:	str	r1, [r4, #24]
        if (fg == 0) {
    5f4a:	b.n	5ef4 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5f4c:	mov	r2, sl
    5f4e:	bl	5558 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5f52:	cmp	r0, #0
    5f54:	blt.n	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    5f56:	beq.n	5eea <ExFatFile::write(void const*, unsigned int)+0xb2>
    5f58:	b.n	5ef4 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    5f5a:	ldr	r3, [r4, #28]
    5f5c:	cbnz	r3, 5f6e <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    5f5e:	mov	r0, r4
    5f60:	bl	588c <ExFatFile::addCluster()>
    5f64:	cmp	r0, #0
    5f66:	beq.n	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    5f68:	ldr	r3, [r4, #24]
    5f6a:	str	r3, [r4, #28]
    5f6c:	b.n	5ef4 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    5f6e:	str	r3, [r4, #24]
    5f70:	b.n	5ef4 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    5f72:	rsb	r5, r6, #512	; 0x200
    5f76:	cmp	r5, r7
    5f78:	it	cs
    5f7a:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    5f7c:	cmp	r6, #0
    5f7e:	bne.n	5ff6 <ExFatFile::write(void const*, unsigned int)+0x1be>
    5f80:	ldr	r3, [r4, #20]
    5f82:	ldr	r0, [r4, #0]
    5f84:	str	r3, [sp, #4]
    5f86:	ldr	r3, [r4, #16]
    5f88:	ldr	r2, [r4, #4]
    5f8a:	cmp	r0, r3
    5f8c:	ldr	r3, [sp, #4]
    5f8e:	sbcs.w	r3, r2, r3
    5f92:	bcc.n	5ff6 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5f94:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    5f96:	add.w	r0, ip, #528	; 0x210
    5f9a:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5f9e:	cmp	r0, #0
    5fa0:	beq.w	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    5fa4:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5fa6:	add	r6, r5
      memcpy(dst, src, n);
    5fa8:	mov	r2, r5
    5faa:	mov	r1, r8
    5fac:	bl	9470 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    5fb0:	cmp.w	r6, #512	; 0x200
    5fb4:	ldr	r0, [r4, #32]
    5fb6:	bne.n	5fc6 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    5fb8:	add.w	r0, r0, #528	; 0x210
    5fbc:	bl	4924 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5fc0:	cmp	r0, #0
    5fc2:	beq.w	5e88 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    5fc6:	add	r8, r5
    toWrite -= n;
    5fc8:	subs	r7, r7, r5
    m_curPosition += n;
    5fca:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    5fce:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    5fd2:	adds	r3, r5, r3
    5fd4:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    5fd8:	cmp	r0, r3
    5fda:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5fdc:	itt	cc
    5fde:	ldrbcc.w	r1, [r4, #51]	; 0x33
    5fe2:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    5fe6:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5fea:	itt	cc
    5fec:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    5ff0:	strdcc	r3, r2, [r4, #16]
    5ff4:	b.n	5e58 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5ff6:	movs	r2, #1
    5ff8:	b.n	5f96 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5ffa:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5ffe:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6000:	lsrs	r2, r7, #9
    6002:	cmp	r3, r2
    6004:	it	cs
    6006:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6008:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    600a:	mov.w	r5, r3, lsl #9
    600e:	bhi.n	6022 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6010:	adds	r2, r1, r3
    6012:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6014:	ittt	hi
    6016:	movhi.w	r2, #4294967295
    m_status = 0;
    601a:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    601e:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6022:	ldr	r2, [r0, #0]
    6024:	ldr	r6, [r2, #40]	; 0x28
    6026:	mov	r2, r8
    6028:	blx	r6
    602a:	b.n	5fc0 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    602c:	ldr	r3, [pc, #16]	; (6040 <ExFatFile::write(void const*, unsigned int)+0x208>)
    602e:	ldr	r3, [r3, #0]
    6030:	cmp	r3, #0
    6032:	bne.w	5e6e <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6036:	mov	r0, r9
    6038:	add	sp, #12
    603a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    603e:	nop
    6040:	.word	0x200273fc

00006044 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6044:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6046:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6048:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    604a:	bl	6536 <FatFile::seekSet(unsigned long)>
    604e:	cbz	r0, 605c <FatFile::cacheDir(unsigned short)+0x18>
    6050:	mov	r0, r4
    6052:	movs	r1, #0
  }
    6054:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6058:	b.w	64f8 <FatFile::readDirCache(bool)>
  }
    605c:	pop	{r4, pc}

0000605e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    605e:	cmp	r2, #4
    6060:	bhi.n	606c <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6062:	add.w	r2, r1, r2, lsl #1
    6066:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    606a:	bx	lr
  } else if (i < 11) {
    606c:	cmp	r2, #10
    606e:	bhi.n	6078 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6070:	add.w	r2, r1, r2, lsl #1
    6074:	ldrh	r0, [r2, #4]
    6076:	bx	lr
  } else if (i < 13) {
    6078:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    607a:	itte	ls
    607c:	addls.w	r2, r1, r2, lsl #1
    6080:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6082:	movhi	r0, #0
}
    6084:	bx	lr

00006086 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6086:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6088:	ldrb	r4, [r0, #0]
    608a:	mov	r5, r1
    608c:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    608e:	cbz	r4, 6100 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6090:	ands.w	r4, r4, #96	; 0x60
    6094:	beq.n	60a6 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6096:	cmp	r2, #1
    6098:	bls.n	6100 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    609a:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    609c:	movs	r0, #1
    name[0] = '/';
    609e:	strb	r3, [r1, #0]
    name[1] = '\0';
    60a0:	movs	r3, #0
    60a2:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    60a4:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    60a6:	mov	r1, r4
    60a8:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    60ac:	cbz	r0, 6100 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    60ae:	mov	r6, r0
    60b0:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    60b2:	movs	r2, #8
    if (i == 8) {
    60b4:	cmp	r1, #8
      if (*ptr == ' ') {
    60b6:	ldrb	r3, [r6, #0]
    if (i == 8) {
    60b8:	bne.n	60d2 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    60ba:	cmp	r3, #32
    60bc:	beq.n	60f8 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    60be:	movs	r2, #16
      c = '.';
    60c0:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    60c2:	mov	ip, r4
    60c4:	adds	r4, #1
    60c6:	cmp	r4, r7
    60c8:	bcs.n	6100 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    60ca:	uxtb	r4, r4
    60cc:	strb.w	r3, [r5, ip]
    60d0:	b.n	60f2 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    60d2:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    60d6:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    60d8:	cmp.w	ip, #25
    60dc:	bhi.n	60ee <FatFile::getSFN(char*, unsigned int)+0x68>
    60de:	ldrb.w	ip, [r0, #12]
    60e2:	tst.w	r2, ip
    60e6:	beq.n	60c2 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    60e8:	adds	r3, #32
    60ea:	uxtb	r3, r3
    60ec:	b.n	60c2 <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    60ee:	cmp	r3, #32
    60f0:	bne.n	60c2 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    60f2:	adds	r1, #1
    60f4:	cmp	r1, #12
    60f6:	bne.n	60b4 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    60f8:	movs	r3, #0
    60fa:	mov	r0, r4
    60fc:	strb	r3, [r5, r4]
  return j;
    60fe:	b.n	60a4 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6100:	movs	r0, #0
    6102:	strb	r0, [r5, #0]
  return 0;
    6104:	b.n	60a4 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006108 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6108:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    610c:	movs	r5, #0
    610e:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6110:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6112:	mov	r6, r0
    6114:	mov	r8, r1
    6116:	mov	r7, r2
    6118:	str	r5, [sp, #4]
  if (!isOpen()) {
    611a:	cbz	r3, 6136 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    611c:	ldrb	r3, [r0, #3]
    611e:	cbnz	r3, 612a <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6120:	bl	6086 <FatFile::getSFN(char*, unsigned int)>
}
    6124:	add	sp, #44	; 0x2c
    6126:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    612a:	mov	r1, r0
    612c:	add	r0, sp, #4
    612e:	bl	631e <FatFile::openCluster(FatFile*)>
    6132:	cmp	r0, #0
    6134:	bne.n	61e2 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6136:	movs	r0, #0
    6138:	strb.w	r0, [r8]
  return 0;
    613c:	b.n	6124 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    613e:	ldrh	r1, [r6, #4]
    6140:	add	r0, sp, #4
    6142:	sub.w	r1, r1, r9
    6146:	uxth	r1, r1
    6148:	bl	6044 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    614c:	mov	sl, r0
    614e:	cmp	r0, #0
    6150:	beq.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6152:	ldrb	r3, [r0, #11]
    6154:	cmp	r3, #15
    6156:	bne.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    6158:	ldrb	r3, [r0, #0]
    615a:	and.w	r3, r3, #31
    615e:	cmp	fp, r3
    6160:	bne.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    6162:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6166:	uxtb.w	r2, fp
    616a:	mov	r1, sl
    616c:	mov	r0, r6
    616e:	bl	605e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6172:	cbz	r5, 61be <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6174:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6178:	uxth	r2, r2
    617a:	cmp.w	r2, #1024	; 0x400
    617e:	bcs.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6180:	ldr	r3, [pc, #108]	; (61f0 <FatFile::getName8(char*, unsigned int)+0xe8>)
    6182:	ubfx	r0, r0, #0, #10
    6186:	and.w	r5, r3, r5, lsl #10
    618a:	orrs	r0, r5
    618c:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6190:	mov	r1, r4
    6192:	mov	r2, r7
    6194:	bl	480a <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6198:	mov	r4, r0
    619a:	cmp	r0, #0
    619c:	beq.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    619e:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    61a0:	add.w	fp, fp, #1
    61a4:	cmp.w	fp, #13
    61a8:	bne.n	6166 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    61aa:	add.w	r9, r9, #1
    61ae:	uxth.w	r9, r9
    61b2:	uxtb.w	fp, r9
    61b6:	ldrb	r3, [r6, #3]
    61b8:	cmp	r3, fp
    61ba:	bcs.n	613e <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    61bc:	b.n	61ce <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    61be:	add.w	r2, r0, #10240	; 0x2800
    61c2:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    61c4:	cmp.w	r2, #2048	; 0x800
    61c8:	bcc.n	61d8 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    61ca:	cmp	r0, #0
    61cc:	bne.n	6190 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    61ce:	movs	r3, #0
  return str - name;
    61d0:	sub.w	r0, r4, r8
  *str = '\0';
    61d4:	strb	r3, [r4, #0]
  return str - name;
    61d6:	b.n	6124 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    61d8:	cmp.w	r2, #1024	; 0x400
    61dc:	bcs.n	6136 <FatFile::getName8(char*, unsigned int)+0x2e>
    61de:	mov	r5, r0
    61e0:	b.n	61a0 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    61e2:	subs	r7, #1
  char* str = name;
    61e4:	mov	r4, r8
    61e6:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    61ea:	add	r7, r8
    61ec:	b.n	61b2 <FatFile::getName8(char*, unsigned int)+0xaa>
    61ee:	nop
    61f0:	.word	0x000ffc00

000061f4 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    61f4:	b.w	6108 <FatFile::getName8(char*, unsigned int)>

000061f8 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    61f8:	push	{r3, r4, r5, lr}
    61fa:	mov	r5, r1
    61fc:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    61fe:	movs	r2, #36	; 0x24
    6200:	movs	r1, #0
    6202:	bl	942c <memset>

  m_vol = vol;
    6206:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6208:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    620a:	cmp	r3, #16
    620c:	beq.n	6216 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    620e:	cmp	r3, #32
    6210:	beq.n	6220 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6212:	cmp	r3, #12
    6214:	bne.n	6224 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6216:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6218:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    621a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    621c:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    621e:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6220:	movs	r3, #64	; 0x40
    6222:	b.n	6218 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6224:	movs	r0, #0
    6226:	b.n	621e <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006228 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6228:	push	{r4, lr}
    622a:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    622c:	adds	r0, #40	; 0x28
    622e:	bl	4924 <FsCache::sync()>
    6232:	cbz	r0, 624a <FatPartition::cacheSync()+0x22>
    6234:	add.w	r0, r4, #568	; 0x238
    6238:	bl	4924 <FsCache::sync()>
    623c:	cbz	r0, 624a <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    623e:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6240:	ldr	r3, [r0, #0]
  }
    6242:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6246:	ldr	r3, [r3, #32]
    6248:	bx	r3
  }
    624a:	movs	r0, #0
    624c:	pop	{r4, pc}

0000624e <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    624e:	mov	r2, r0
bool FatFile::addCluster() {
    6250:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6252:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6256:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6258:	ldr	r0, [r0, #8]
    625a:	mov	r1, r5
    625c:	bl	6f88 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6260:	cbz	r0, 6274 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6262:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6264:	cbnz	r5, 6276 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6266:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    626a:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    626c:	ldrb	r3, [r4, #2]
    626e:	orn	r3, r3, #127	; 0x7f
    6272:	strb	r3, [r4, #2]
}
    6274:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6276:	adds	r5, #1
    6278:	ldr	r2, [r4, #16]
    627a:	cmp	r2, r5
    627c:	beq.n	626c <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    627e:	bic.w	r3, r3, #64	; 0x40
    6282:	b.n	626a <FatFile::addCluster()+0x1c>

00006284 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6284:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6286:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6288:	mov	r4, r0
  if (isRootFixed()) {
    628a:	ands.w	r5, r5, #32
    628e:	beq.n	6296 <FatFile::addDirCluster()+0x12>
  return false;
    6290:	movs	r6, #0
}
    6292:	mov	r0, r6
    6294:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    6296:	ldr	r2, [r0, #20]
    6298:	ldr	r3, [pc, #84]	; (62f0 <FatFile::addDirCluster()+0x6c>)
    629a:	cmp	r2, r3
    629c:	bcs.n	6290 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    629e:	bl	624e <FatFile::addCluster()>
    62a2:	mov	r6, r0
    62a4:	cmp	r0, #0
    62a6:	beq.n	6290 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    62a8:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    62aa:	ldr	r3, [r4, #16]
    62ac:	ldrb	r1, [r2, #6]
    62ae:	subs	r3, #2
    62b0:	ldr	r7, [r2, #20]
    62b2:	lsls	r3, r1
    62b4:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    62b6:	ldr	r0, [r4, #8]
    62b8:	uxtb	r1, r5
    62ba:	ldrb	r3, [r0, #4]
    62bc:	cmp	r3, r1
    62be:	bhi.n	62d2 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    62c0:	ldrb	r2, [r0, #6]
    62c2:	mov.w	r3, #512	; 0x200
    62c6:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    62c8:	ldr	r2, [r4, #20]
    62ca:	uxtah	r3, r2, r3
    62ce:	str	r3, [r4, #20]
  return true;
    62d0:	b.n	6292 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    62d2:	movs	r2, #5
    62d4:	add	r1, r7
    62d6:	adds	r0, #40	; 0x28
    if (!pc) {
    62d8:	adds	r5, #1
    62da:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    62de:	cmp	r0, #0
    62e0:	beq.n	6290 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    62e2:	mov.w	r2, #512	; 0x200
    62e6:	movs	r1, #0
    62e8:	bl	942c <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    62ec:	b.n	62b6 <FatFile::addDirCluster()+0x32>
    62ee:	nop
    62f0:	.word	0x001ffe00

000062f4 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    62f4:	push	{r4, lr}
    62f6:	mov	r4, r0
    62f8:	ldr	r0, [r0, #8]
    62fa:	mov	r2, r1
    62fc:	adds	r0, #40	; 0x28
    62fe:	ldr	r1, [r4, #24]
    6300:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    6304:	cbz	r0, 6310 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    6306:	ldrh	r3, [r4, #4]
    6308:	and.w	r3, r3, #15
    630c:	add.w	r0, r0, r3, lsl #5
}
    6310:	pop	{r4, pc}

00006312 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    6312:	ldrb	r3, [r0, #0]
    6314:	cbnz	r3, 631a <FatFile::openRoot(FatVolume*)+0x8>
    6316:	b.w	61f8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    631a:	movs	r0, #0
    631c:	bx	lr

0000631e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    631e:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    6320:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    6322:	mov	r4, r0
    6324:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    6326:	cbnz	r3, 6332 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    6328:	ldr	r1, [r1, #8]
}
    632a:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    632e:	b.w	6312 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    6332:	movs	r2, #36	; 0x24
    6334:	movs	r1, #0
    6336:	bl	942c <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    633a:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    633c:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    633e:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6340:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    6342:	ldr	r3, [r5, #8]
    6344:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    6346:	ldr	r3, [r5, #12]
    6348:	str	r3, [r4, #32]
}
    634a:	pop	{r3, r4, r5, pc}

0000634c <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    634c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6350:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    6354:	ldrb	r3, [r0, #2]
    6356:	mov	r4, r0
    6358:	sub	sp, #12
    635a:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    635c:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    635e:	mov	r5, r2
  if (!isReadable()) {
    6360:	bpl.n	6446 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    6362:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    6364:	lsls	r1, r3, #28
    6366:	bpl.n	6390 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    6368:	ldr	r3, [r4, #28]
    636a:	ldr	r2, [r4, #20]
    636c:	subs	r3, r3, r2
    636e:	cmp	r5, r3
    6370:	it	cs
    6372:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6374:	add.w	r3, r4, #16
  toRead = nbyte;
    6378:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    637a:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    637e:	vmov	s16, r3
  while (toRead) {
    6382:	cbnz	r6, 63a2 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    6384:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    6386:	add	sp, #12
    6388:	vpop	{d8}
    638c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    6390:	lsls	r2, r3, #26
    6392:	bpl.n	6374 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    6394:	ldr	r3, [r4, #8]
    6396:	ldrh	r2, [r3, #10]
    6398:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    639a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    639e:	uxth	r3, r3
    63a0:	b.n	636e <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    63a2:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    63a4:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    63a6:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    63a8:	ldr	r0, [r4, #8]
    63aa:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    63ae:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    63b2:	bpl.n	63ec <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    63b4:	ldr	r2, [r0, #32]
    63b6:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    63b8:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    63bc:	cmp.w	fp, #0
    63c0:	bne.n	6454 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    63c2:	cmp.w	r6, #512	; 0x200
    63c6:	bcc.n	6454 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    63c8:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    63cc:	cmp	r1, r2
    63ce:	beq.n	6454 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    63d0:	cmp.w	r6, #1024	; 0x400
    63d4:	bcs.n	6484 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    63d6:	ldr.w	r0, [sl, #44]	; 0x2c
    63da:	mov	r2, r8
    63dc:	ldr	r3, [r0, #0]
    63de:	ldr	r3, [r3, #16]
    63e0:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    63e2:	cmp	r0, #0
    63e4:	beq.n	6446 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    63e6:	mov.w	r7, #512	; 0x200
    63ea:	b.n	6478 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    63ec:	ldrb.w	r9, [r0, #5]
    63f0:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    63f4:	cmp.w	fp, #0
    63f8:	bne.n	640c <FatFile::read(void*, unsigned int)+0xc0>
    63fa:	cmp.w	r9, #0
    63fe:	bne.n	640c <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    6400:	cbnz	r7, 641e <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    6402:	lsls	r2, r2, #25
    return m_rootDirStart;
    6404:	ite	mi
    6406:	ldrmi	r2, [r0, #32]
    6408:	ldrpl	r2, [r4, #32]
    640a:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    640c:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    640e:	ldr	r1, [r4, #16]
    6410:	ldrb	r0, [r2, #6]
    6412:	subs	r1, #2
    6414:	ldr	r2, [r2, #20]
    6416:	lsls	r1, r0
    6418:	add	r1, r2
    641a:	add	r1, r9
    641c:	b.n	63b8 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    641e:	lsls	r3, r2, #28
          m_curCluster++;
    6420:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    6422:	bpl.n	6430 <FatFile::read(void*, unsigned int)+0xe4>
    6424:	ldrb	r2, [r4, #2]
    6426:	lsls	r7, r2, #25
    6428:	bpl.n	6430 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    642a:	adds	r1, #1
    642c:	str	r1, [r4, #16]
    642e:	b.n	640c <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6430:	vmov	r2, s16
    6434:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6438:	cmp	r0, #0
    643a:	blt.n	6446 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    643c:	bne.n	640c <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    643e:	ldrb	r3, [r4, #0]
    6440:	tst.w	r3, #112	; 0x70
    6444:	bne.n	6384 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    6446:	ldrb	r3, [r4, #1]
  return -1;
    6448:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    644c:	orr.w	r3, r3, #2
    6450:	strb	r3, [r4, #1]
  return -1;
    6452:	b.n	6386 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    6454:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    6458:	movs	r2, #0
    645a:	add.w	r0, sl, #40	; 0x28
    645e:	cmp	r7, r6
    6460:	it	cs
    6462:	movcs	r7, r6
    6464:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6468:	cmp	r0, #0
    646a:	beq.n	6446 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    646c:	add.w	r1, r0, fp
    6470:	mov	r2, r7
    6472:	mov	r0, r8
    6474:	bl	9470 <memcpy>
    m_curPosition += n;
    6478:	ldr	r3, [r4, #20]
    dst += n;
    647a:	add	r8, r7
    toRead -= n;
    647c:	subs	r6, r6, r7
    m_curPosition += n;
    647e:	add	r3, r7
    6480:	str	r3, [r4, #20]
    toRead -= n;
    6482:	b.n	6382 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    6484:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    6486:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    6488:	lsls	r0, r0, #26
    648a:	bmi.n	649a <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    648c:	ldrb.w	r0, [sl, #4]
    6490:	sub.w	r0, r0, r9
    6494:	cmp	r3, r0
    6496:	it	cs
    6498:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    649a:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    649c:	mov.w	r7, r3, lsl #9
    64a0:	bls.n	64b6 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    64a2:	ldr.w	r0, [sl, #44]	; 0x2c
    64a6:	ldr	r2, [r0, #0]
    64a8:	ldr.w	sl, [r2, #20]
    64ac:	mov	r2, r8
    64ae:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    64b0:	cmp	r0, #0
    64b2:	bne.n	6478 <FatFile::read(void*, unsigned int)+0x12c>
    64b4:	b.n	6446 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    64b6:	adds	r0, r1, r3
    64b8:	cmp	r2, r0
    64ba:	bcs.n	64a2 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    64bc:	add.w	r0, sl, #40	; 0x28
    64c0:	strd	r1, r3, [sp]
    64c4:	bl	4924 <FsCache::sync()>
    64c8:	ldrd	r1, r3, [sp]
    64cc:	cmp	r0, #0
    64ce:	bne.n	64a2 <FatFile::read(void*, unsigned int)+0x156>
    64d0:	b.n	6446 <FatFile::read(void*, unsigned int)+0xfa>

000064d2 <FatFile::peek()>:
int FatFile::peek() {
    64d2:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    64d4:	movs	r2, #1
    64d6:	add.w	r1, sp, #7
    64da:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    64dc:	ldrd	r5, r6, [r0, #16]
    64e0:	bl	634c <FatFile::read(void*, unsigned int)>
    64e4:	cmp	r0, #1
    64e6:	ite	eq
    64e8:	ldrbeq.w	r0, [sp, #7]
    64ec:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    64f0:	strd	r5, r6, [r4, #16]
}
    64f4:	add	sp, #8
    64f6:	pop	{r4, r5, r6, pc}

000064f8 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    64f8:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    64fa:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    64fe:	push	{r0, r1, r2, r4, r5, lr}
    6500:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6502:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    6506:	beq.n	650a <FatFile::readDirCache(bool)+0x12>
    6508:	cbnz	r1, 6532 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    650a:	movs	r2, #1
    650c:	add.w	r1, sp, #7
    6510:	mov	r0, r4
    6512:	bl	634c <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    6516:	sxtb	r0, r0
    6518:	cmp	r0, #1
    651a:	beq.n	6522 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    651c:	movs	r0, #0
}
    651e:	add	sp, #12
    6520:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    6522:	ldr	r3, [r4, #20]
    6524:	adds	r3, #31
    return m_buffer;
    6526:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    6528:	str	r3, [r4, #20]
    652a:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    652c:	add.w	r0, r0, r5, lsl #5
    6530:	b.n	651e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    6532:	adds	r3, #32
    6534:	b.n	6526 <FatFile::readDirCache(bool)+0x2e>

00006536 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6536:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    653a:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    653c:	ldrb	r1, [r0, #0]
    653e:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6540:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    6542:	cbz	r1, 6566 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6544:	ldr	r0, [r0, #20]
    6546:	cmp	r0, r5
    6548:	beq.n	6558 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    654a:	cbnz	r5, 655c <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    654c:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    654e:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    6550:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6552:	bic.w	r3, r3, #32
    6556:	strb	r3, [r4, #2]
    return true;
    6558:	movs	r0, #1
    655a:	b.n	656a <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    655c:	lsls	r3, r1, #28
    655e:	bpl.n	656e <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    6560:	ldr	r3, [r4, #28]
    6562:	cmp	r3, r5
    6564:	bcs.n	657e <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    6566:	movs	r0, #0
  m_curCluster = tmp;
    6568:	str	r7, [r4, #16]
}
    656a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    656e:	lsls	r6, r1, #26
    6570:	bpl.n	657e <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    6572:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    6574:	ldrh	r3, [r3, #10]
    6576:	cmp.w	r5, r3, lsl #5
    657a:	bhi.n	6566 <FatFile::seekSet(unsigned long)+0x30>
    657c:	b.n	654e <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    657e:	ldr.w	ip, [r4, #8]
    6582:	subs	r6, r5, #1
  if (isContiguous()) {
    6584:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    6586:	ldrb.w	r3, [ip, #6]
    658a:	lsls	r2, r2, #25
    658c:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6590:	uxtb	r3, r3
    6592:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    6596:	bpl.n	65a0 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    6598:	ldr	r3, [r4, #32]
    659a:	add	r3, r6
    659c:	str	r3, [r4, #16]
    goto done;
    659e:	b.n	654e <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    65a0:	subs	r2, r0, #1
    65a2:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    65a6:	cmp	r6, r3
    65a8:	bcc.n	65ac <FatFile::seekSet(unsigned long)+0x76>
    65aa:	cbnz	r0, 65d2 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    65ac:	lsls	r3, r1, #25
    return m_rootDirStart;
    65ae:	ite	mi
    65b0:	ldrmi.w	r3, [ip, #32]
    65b4:	ldrpl	r3, [r4, #32]
    65b6:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65b8:	add.w	r8, r4, #16
  while (nNew--) {
    65bc:	cmp	r6, #0
    65be:	beq.n	654e <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    65c0:	mov	r2, r8
    65c2:	ldr	r1, [r4, #16]
    65c4:	ldr	r0, [r4, #8]
    65c6:	subs	r6, #1
    65c8:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
    65cc:	cmp	r0, #0
    65ce:	bgt.n	65bc <FatFile::seekSet(unsigned long)+0x86>
    65d0:	b.n	6566 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    65d2:	subs	r6, r6, r3
    65d4:	b.n	65b8 <FatFile::seekSet(unsigned long)+0x82>

000065d6 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    65d6:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    65d8:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    65da:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    65dc:	lsls	r2, r3, #27
    65de:	bpl.n	65f4 <FatFile::rmdir()+0x1e>
    seekSet(0);
    65e0:	movs	r1, #0
    65e2:	bl	6536 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    65e6:	movs	r1, #1
    65e8:	mov	r0, r4
    65ea:	bl	64f8 <FatFile::readDirCache(bool)>
    if (!dir) {
    65ee:	cbnz	r0, 65f8 <FatFile::rmdir()+0x22>
      if (!getError()) {
    65f0:	ldrb	r3, [r4, #1]
    65f2:	cbz	r3, 660c <FatFile::rmdir()+0x36>
}
    65f4:	movs	r0, #0
    65f6:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    65f8:	ldrb	r3, [r0, #0]
    65fa:	cbz	r3, 660c <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    65fc:	cmp	r3, #229	; 0xe5
    65fe:	beq.n	65e6 <FatFile::rmdir()+0x10>
    6600:	cmp	r3, #46	; 0x2e
    6602:	beq.n	65e6 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    6604:	ldrb	r3, [r0, #11]
    6606:	lsls	r3, r3, #28
    6608:	bmi.n	65e6 <FatFile::rmdir()+0x10>
    660a:	b.n	65f4 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    660c:	movs	r3, #8
  return remove();
    660e:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    6610:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    6612:	ldrb	r3, [r4, #2]
    6614:	orr.w	r3, r3, #2
    6618:	strb	r3, [r4, #2]
}
    661a:	ldmia.w	sp!, {r4, lr}
  return remove();
    661e:	b.w	78b4 <FatFile::remove()>

00006622 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    6622:	push	{r3, r4, r5, r6, r7, lr}
    6624:	mov	r7, r1
    6626:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    6628:	movs	r1, #0
    662a:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    662c:	mov	r4, r0
    662e:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    6630:	bl	942c <memset>
  m_vol = dirFile->m_vol;
    6634:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    6636:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    6638:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    663a:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    663e:	str	r3, [r4, #12]
    6640:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    6644:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    6646:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    664a:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    664c:	lsls	r1, r2, #28
    664e:	bmi.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    6650:	and.w	r2, r2, #23
    6654:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    6656:	ldrb	r1, [r3, #11]
    6658:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    665c:	itt	eq
    665e:	orreq.w	r2, r2, #8
    6662:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    6664:	ldrb.w	r2, [sp, #24]
    6668:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    666a:	and.w	r2, r5, #3
    666e:	cmp	r2, #1
    6670:	beq.n	66b6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    6672:	cmp	r2, #2
    6674:	beq.n	66ba <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    6676:	cbnz	r2, 66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    6678:	lsls	r2, r5, #21
    667a:	bmi.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    667c:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    667e:	lsls	r7, r2, #30
    6680:	bpl.n	668c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    6682:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    6684:	lsls	r6, r1, #27
    6686:	bmi.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    6688:	lsls	r1, r1, #31
    668a:	bmi.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    668c:	and.w	r1, r5, #8
    6690:	orrs	r2, r1
    6692:	strb	r2, [r4, #2]
    return m_sector;
    6694:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    6696:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    6698:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    669a:	ldrh	r2, [r3, #20]
    669c:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    66a0:	lsls	r2, r5, #21
    66a2:	bpl.n	66ce <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66a4:	cbnz	r1, 66be <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    66a6:	ldrb	r3, [r4, #2]
    66a8:	orn	r3, r3, #127	; 0x7f
    66ac:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66ae:	lsls	r3, r5, #17
    66b0:	bmi.n	66d6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    66b2:	movs	r0, #1
}
    66b4:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    66b6:	movs	r2, #2
    66b8:	b.n	667e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    66ba:	movs	r2, #3
    66bc:	b.n	667e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    66be:	bl	700a <FatPartition::freeChain(unsigned long)>
    66c2:	cmp	r0, #0
    66c4:	bne.n	66a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    66c6:	movs	r0, #0
    66c8:	strb	r0, [r4, #0]
  m_flags = 0;
    66ca:	strb	r0, [r4, #2]
  return false;
    66cc:	b.n	66b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    66ce:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    66d0:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    66d2:	str	r3, [r4, #28]
    66d4:	b.n	66ae <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    66d6:	ldr	r1, [r4, #28]
    66d8:	mov	r0, r4
    66da:	bl	6536 <FatFile::seekSet(unsigned long)>
    66de:	cmp	r0, #0
    66e0:	bne.n	66b2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    66e2:	b.n	66c6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

000066e4 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    66e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    66e8:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    66ea:	ldrb	r2, [r0, #0]
    66ec:	sub	sp, #20
    66ee:	mov	r7, r0
    66f0:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    66f2:	cmp	r2, #0
    66f4:	bne.n	677c <FatFile::openNext(FatFile*, int)+0x98>
    66f6:	ldrb	r2, [r1, #0]
    66f8:	tst.w	r2, #112	; 0x70
    66fc:	beq.n	677c <FatFile::openNext(FatFile*, int)+0x98>
    66fe:	ldr	r4, [r1, #20]
    6700:	ands.w	r4, r4, #31
    6704:	bne.n	677c <FatFile::openNext(FatFile*, int)+0x98>
    6706:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    6708:	movs	r1, #0
    670a:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    670c:	ldr.w	r8, [r6, #20]
    6710:	str	r3, [sp, #12]
    6712:	bl	64f8 <FatFile::readDirCache(bool)>
    if (!dir) {
    6716:	cbz	r0, 677c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    6718:	ldrb	r1, [r0, #0]
    671a:	cbz	r1, 677c <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    671c:	cmp	r1, #46	; 0x2e
    671e:	ldr	r3, [sp, #12]
    6720:	beq.n	6766 <FatFile::openNext(FatFile*, int)+0x82>
    6722:	cmp	r1, #229	; 0xe5
    6724:	beq.n	6766 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    6726:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    6728:	ands.w	ip, r2, #8
    672c:	bne.n	676a <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    672e:	cbz	r4, 6752 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    6730:	subs	r1, r0, #1
    6732:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6736:	mov.w	r2, ip, lsl #7
    673a:	ldrb.w	r0, [r1, #1]!
    673e:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    6742:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    6744:	uxtab	r2, r0, r2
    6748:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    674c:	bne.n	6736 <FatFile::openNext(FatFile*, int)+0x52>
    674e:	cmp	r9, ip
    6750:	bne.n	677c <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    6752:	ubfx	r2, r8, #5, #16
    6756:	mov	r1, r6
    6758:	mov	r0, r7
    675a:	str	r4, [sp, #0]
    675c:	bl	6622 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    6760:	add	sp, #20
    6762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    6766:	movs	r4, #0
    6768:	b.n	6708 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    676a:	cmp	r2, #15
    676c:	bne.n	6766 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    676e:	lsls	r2, r1, #25
    6770:	bpl.n	6708 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    6772:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    6776:	ldrb.w	r9, [r0, #13]
    677a:	b.n	6708 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    677c:	movs	r0, #0
    677e:	b.n	6760 <FatFile::openNext(FatFile*, int)+0x7c>

00006780 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    6780:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6782:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    6784:	mov	r4, r0
  if (!isOpen()) {
    6786:	cmp	r3, #0
    6788:	beq.n	67f6 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    678a:	ldrsb.w	r3, [r0, #2]
    678e:	cmp	r3, #0
    6790:	bge.n	67ea <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6792:	movs	r1, #1
    6794:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    6798:	mov	r5, r0
    679a:	cbnz	r0, 67aa <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    679c:	ldrb	r3, [r4, #1]
  return false;
    679e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    67a0:	orr.w	r3, r3, #1
    67a4:	strb	r3, [r4, #1]
}
    67a6:	add	sp, #12
    67a8:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    67aa:	ldrb	r3, [r0, #0]
    67ac:	cmp	r3, #229	; 0xe5
    67ae:	beq.n	679c <FatFile::sync()+0x1c>
    if (isFile()) {
    67b0:	ldrb	r3, [r4, #0]
    67b2:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    67b4:	itt	mi
    67b6:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    67b8:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    67ba:	ldr	r3, [r4, #32]
    67bc:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    67be:	lsrs	r3, r3, #16
    67c0:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    67c2:	ldr	r3, [pc, #56]	; (67fc <FatFile::sync()+0x7c>)
    67c4:	ldr	r3, [r3, #0]
    67c6:	cbz	r3, 67e2 <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    67c8:	add.w	r2, sp, #3
    67cc:	add.w	r1, sp, #6
    67d0:	add	r0, sp, #4
    67d2:	blx	r3
      setLe16(dir->modifyDate, date);
    67d4:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    67d8:	strh	r3, [r5, #24]
    67da:	strh	r3, [r5, #18]
    67dc:	ldrh.w	r3, [sp, #6]
    67e0:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    67e2:	ldrb	r3, [r4, #2]
    67e4:	and.w	r3, r3, #127	; 0x7f
    67e8:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    67ea:	ldr	r0, [r4, #8]
    67ec:	bl	6228 <FatPartition::cacheSync()>
    67f0:	cmp	r0, #0
    67f2:	beq.n	679c <FatFile::sync()+0x1c>
    67f4:	b.n	67a6 <FatFile::sync()+0x26>
    return true;
    67f6:	movs	r0, #1
    67f8:	b.n	67a6 <FatFile::sync()+0x26>
    67fa:	nop
    67fc:	.word	0x200273fc

00006800 <FatFile::close()>:
bool FatFile::close() {
    6800:	push	{r4, lr}
    6802:	mov	r4, r0
  bool rtn = sync();
    6804:	bl	6780 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    6808:	movs	r3, #0
    680a:	strb	r3, [r4, #0]
  m_flags = 0;
    680c:	strb	r3, [r4, #2]
}
    680e:	pop	{r4, pc}

00006810 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    6810:	push	{r4, r5, r6, r7, lr}
    6812:	mov	r7, r3
    6814:	sub	sp, #84	; 0x54
  FatFile() {}
    6816:	movs	r3, #0
    6818:	mov	r6, r0
    681a:	mov	r4, r1
    681c:	str	r2, [sp, #4]
    681e:	str	r3, [sp, #8]
    6820:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    6824:	ldrb	r3, [r0, #0]
    6826:	cbz	r3, 682e <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    6828:	movs	r0, #0
}
    682a:	add	sp, #84	; 0x54
    682c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    682e:	ldrb	r3, [r1, #0]
    6830:	tst.w	r3, #112	; 0x70
    6834:	beq.n	6828 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    6836:	ldrb	r3, [r2, #0]
    6838:	cmp	r3, #47	; 0x2f
    683a:	bne.n	6862 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    683c:	ldr	r2, [sp, #4]
    683e:	ldrb	r3, [r2, #0]
    6840:	cmp	r3, #47	; 0x2f
    6842:	beq.n	6850 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    6844:	ldr	r1, [r4, #8]
    if (*path == 0) {
    6846:	cbnz	r3, 6856 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    6848:	mov	r0, r6
    684a:	bl	6312 <FatFile::openRoot(FatVolume*)>
    684e:	b.n	682a <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    6850:	adds	r2, #1
    6852:	str	r2, [sp, #4]
    6854:	b.n	683c <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    6856:	add	r0, sp, #8
    6858:	bl	61f8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    685c:	cmp	r0, #0
    685e:	beq.n	6828 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    6860:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    6862:	add	r3, sp, #4
    6864:	add	r2, sp, #44	; 0x2c
    6866:	ldr	r1, [sp, #4]
    6868:	mov	r0, r6
    686a:	bl	7808 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    686e:	cmp	r0, #0
    6870:	beq.n	6828 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    6872:	ldr	r3, [sp, #4]
    6874:	ldrb	r3, [r3, #0]
    6876:	cbz	r3, 68a0 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    6878:	movs	r3, #0
    687a:	add	r2, sp, #44	; 0x2c
    687c:	mov	r1, r4
    687e:	mov	r0, r6
    6880:	bl	7584 <FatFile::open(FatFile*, FatLfn_t*, int)>
    6884:	cmp	r0, #0
    6886:	beq.n	6828 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    6888:	mov	r5, r6
    688a:	add	r4, sp, #8
    688c:	ldmia	r5!, {r0, r1, r2, r3}
    688e:	stmia	r4!, {r0, r1, r2, r3}
    6890:	ldmia	r5!, {r0, r1, r2, r3}
    6892:	stmia	r4!, {r0, r1, r2, r3}
    6894:	ldr	r3, [r5, #0]
    close();
    6896:	mov	r0, r6
    tmpDir = *this;
    6898:	str	r3, [r4, #0]
    close();
    689a:	bl	6800 <FatFile::close()>
  while (1) {
    689e:	b.n	6860 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    68a0:	mov	r3, r7
    68a2:	add	r2, sp, #44	; 0x2c
    68a4:	mov	r1, r4
    68a6:	mov	r0, r6
    68a8:	bl	7584 <FatFile::open(FatFile*, FatLfn_t*, int)>
    68ac:	b.n	682a <FatFile::open(FatFile*, char const*, int)+0x1a>

000068ae <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    68ae:	cbz	r1, 68b8 <FatFile::open(FatVolume*, char const*, int)+0xa>
    68b0:	add.w	r1, r1, #1096	; 0x448
    68b4:	b.w	6810 <FatFile::open(FatFile*, char const*, int)>
}
    68b8:	mov	r0, r1
    68ba:	bx	lr

000068bc <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    68bc:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    68be:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    68c0:	sub	sp, #36	; 0x24
    68c2:	mov	r4, r0
    68c4:	mov	r6, r1
  if (!parent->isDir()) {
    68c6:	tst.w	r3, #112	; 0x70
    68ca:	bne.n	68d2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    68cc:	movs	r0, #0
}
    68ce:	add	sp, #36	; 0x24
    68d0:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    68d2:	movw	r3, #2562	; 0xa02
    68d6:	bl	7584 <FatFile::open(FatFile*, FatLfn_t*, int)>
    68da:	cmp	r0, #0
    68dc:	beq.n	68cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    68de:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    68e0:	movs	r5, #16
  if (!addDirCluster()) {
    68e2:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    68e4:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    68e6:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    68e8:	bl	6284 <FatFile::addDirCluster()>
    68ec:	cmp	r0, #0
    68ee:	beq.n	68cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    68f0:	ldr	r3, [r4, #16]
    seekSet(0);
    68f2:	movs	r1, #0
    68f4:	mov	r0, r4
    68f6:	str	r3, [r4, #32]
    68f8:	bl	6536 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    68fc:	mov	r0, r4
    68fe:	bl	6780 <FatFile::sync()>
    6902:	cmp	r0, #0
    6904:	beq.n	68cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6906:	mov	r1, r7
    6908:	mov	r0, r4
    690a:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    690e:	cmp	r0, #0
    6910:	beq.n	68cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    6912:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    6914:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    6916:	mov	r3, r0
    6918:	add.w	ip, r0, #32
    691c:	mov	r5, r2
    691e:	ldr	r0, [r3, #0]
    6920:	adds	r3, #8
    6922:	ldr.w	r1, [r3, #-4]
    6926:	mov	r7, r2
    6928:	cmp	r3, ip
    692a:	stmia	r7!, {r0, r1}
    692c:	mov	r2, r7
    692e:	bne.n	691e <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    6930:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    6934:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6936:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    6938:	movs	r2, #1
    dot.name[i] = ' ';
    693a:	str.w	r3, [sp, #1]
    693e:	adds	r0, #40	; 0x28
    6940:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6944:	subs	r1, #2
    6946:	strh.w	r3, [sp, #9]
    694a:	ldrb.w	r3, [r0, #-34]
    694e:	lsls	r1, r3
    6950:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    6954:	add	r1, r3
    6956:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    695a:	mov	r3, r0
    695c:	cmp	r0, #0
    695e:	beq.n	68cc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    6960:	movs	r2, #46	; 0x2e
    6962:	mov	ip, r5
    6964:	mov	r7, r0
    6966:	add.w	lr, sp, #32
    696a:	strb.w	r2, [sp]
    696e:	mov	r2, ip
    6970:	adds	r7, #8
    6972:	ldmia	r2!, {r0, r1}
    6974:	cmp	r2, lr
    6976:	str.w	r0, [r7, #-8]
    697a:	str.w	r1, [r7, #-4]
    697e:	mov	ip, r2
    6980:	bne.n	696e <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    6982:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    6984:	adds	r3, #32
  dot.name[1] = '.';
    6986:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    698a:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    698c:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    698e:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    6990:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    6994:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    6996:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    699a:	mov	r5, r2
    699c:	adds	r3, #8
    699e:	ldmia	r5!, {r0, r1}
    69a0:	cmp	r5, r6
    69a2:	str.w	r0, [r3, #-8]
    69a6:	str.w	r1, [r3, #-4]
    69aa:	mov	r2, r5
    69ac:	bne.n	699a <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    69ae:	ldr	r0, [r4, #8]
    69b0:	bl	6228 <FatPartition::cacheSync()>
    69b4:	b.n	68ce <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

000069b6 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    69b6:	push	{r4, r5, r6, r7, lr}
    69b8:	mov	r7, r3
    69ba:	sub	sp, #84	; 0x54
    69bc:	movs	r3, #0
    69be:	mov	r6, r0
    69c0:	mov	r4, r1
    69c2:	str	r2, [sp, #4]
    69c4:	strh.w	r3, [sp, #20]
  FatFile() {}
    69c8:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    69ca:	ldrb	r3, [r0, #0]
    69cc:	cbz	r3, 69d4 <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    69ce:	movs	r0, #0
}
    69d0:	add	sp, #84	; 0x54
    69d2:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    69d4:	ldrb	r3, [r1, #0]
    69d6:	tst.w	r3, #112	; 0x70
    69da:	beq.n	69ce <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    69dc:	ldrb	r3, [r2, #0]
    69de:	cmp	r3, #47	; 0x2f
    69e0:	bne.n	69f8 <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    69e2:	ldr	r2, [sp, #4]
    69e4:	ldrb	r3, [r2, #0]
    69e6:	cmp	r3, #47	; 0x2f
    69e8:	beq.n	6a34 <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    69ea:	ldr	r1, [r4, #8]
    69ec:	add	r0, sp, #44	; 0x2c
    69ee:	bl	61f8 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    69f2:	cmp	r0, #0
    69f4:	beq.n	69ce <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    69f6:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    69f8:	add	r3, sp, #4
    69fa:	add	r2, sp, #8
    69fc:	ldr	r1, [sp, #4]
    69fe:	mov	r0, r6
    6a00:	bl	7808 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    6a04:	cmp	r0, #0
    6a06:	beq.n	69ce <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    6a08:	ldr	r3, [sp, #4]
    6a0a:	ldrb	r3, [r3, #0]
    6a0c:	cbz	r3, 6a4e <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    6a0e:	movs	r3, #0
    6a10:	add	r2, sp, #8
    6a12:	mov	r1, r4
    6a14:	mov	r0, r6
    6a16:	bl	7584 <FatFile::open(FatFile*, FatLfn_t*, int)>
    6a1a:	cbz	r0, 6a3a <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    6a1c:	mov	r5, r6
    6a1e:	add	r4, sp, #44	; 0x2c
    6a20:	ldmia	r5!, {r0, r1, r2, r3}
    6a22:	stmia	r4!, {r0, r1, r2, r3}
    6a24:	ldmia	r5!, {r0, r1, r2, r3}
    6a26:	stmia	r4!, {r0, r1, r2, r3}
    6a28:	ldr	r3, [r5, #0]
    close();
    6a2a:	mov	r0, r6
    tmpDir = *this;
    6a2c:	str	r3, [r4, #0]
    close();
    6a2e:	bl	6800 <FatFile::close()>
  while (1) {
    6a32:	b.n	69f6 <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    6a34:	adds	r2, #1
    6a36:	str	r2, [sp, #4]
    6a38:	b.n	69e2 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    6a3a:	cmp	r7, #0
    6a3c:	beq.n	69ce <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    6a3e:	add	r2, sp, #8
    6a40:	mov	r1, r4
    6a42:	mov	r0, r6
    6a44:	bl	68bc <FatFile::mkdir(FatFile*, FatLfn_t*)>
    6a48:	cmp	r0, #0
    6a4a:	bne.n	6a1c <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    6a4c:	b.n	69ce <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    6a4e:	add	r2, sp, #8
    6a50:	mov	r1, r4
    6a52:	mov	r0, r6
    6a54:	bl	68bc <FatFile::mkdir(FatFile*, FatLfn_t*)>
    6a58:	b.n	69d0 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00006a5a <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a5a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    6a5e:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a60:	sub	sp, #108	; 0x6c
    6a62:	mov.w	r9, #0
    6a66:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    6a68:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    6a6c:	mov	r7, r1
    6a6e:	mov	r8, r2
    6a70:	str.w	r9, [sp, #32]
    6a74:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    6a78:	bne.n	6a82 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    6a7a:	movs	r0, #0
}
    6a7c:	add	sp, #108	; 0x6c
    6a7e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    6a82:	ldr	r2, [r0, #8]
    6a84:	ldr	r3, [r1, #8]
    6a86:	cmp	r2, r3
    6a88:	bne.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    6a8a:	mov	r6, r4
  sync();
    6a8c:	bl	6780 <FatFile::sync()>
  oldFile = *this;
    6a90:	add	r5, sp, #68	; 0x44
    6a92:	ldmia	r6!, {r0, r1, r2, r3}
    6a94:	stmia	r5!, {r0, r1, r2, r3}
    6a96:	ldmia	r6!, {r0, r1, r2, r3}
    6a98:	stmia	r5!, {r0, r1, r2, r3}
    6a9a:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6a9c:	mov	r1, r9
    6a9e:	mov	r0, r4
  oldFile = *this;
    6aa0:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6aa2:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6aa6:	cmp	r0, #0
    6aa8:	beq.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    6aaa:	mov	r2, sp
    6aac:	mov	r3, r0
    6aae:	add.w	ip, r0, #32
    6ab2:	mov	r5, r2
    6ab4:	ldr	r0, [r3, #0]
    6ab6:	adds	r3, #8
    6ab8:	ldr.w	r1, [r3, #-4]
    6abc:	mov	r6, r2
    6abe:	cmp	r3, ip
    6ac0:	stmia	r6!, {r0, r1}
    6ac2:	mov	r2, r6
    6ac4:	bne.n	6ab4 <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    6ac6:	ldrb	r3, [r4, #0]
    6ac8:	add	r6, sp, #32
    6aca:	ands.w	r3, r3, #8
    6ace:	beq.n	6ae6 <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6ad0:	movw	r3, #2561	; 0xa01
    6ad4:	mov	r2, r8
    6ad6:	mov	r1, r7
    6ad8:	mov	r0, r6
    6ada:	bl	6810 <FatFile::open(FatFile*, char const*, int)>
    6ade:	cmp	r0, #0
    6ae0:	beq.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    6ae2:	movs	r7, #0
    6ae4:	b.n	6af6 <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    6ae6:	mov	r2, r8
    6ae8:	mov	r1, r7
    6aea:	mov	r0, r6
    6aec:	bl	69b6 <FatFile::mkdir(FatFile*, char const*, bool)>
    6af0:	cmp	r0, #0
    6af2:	beq.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    6af4:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    6af6:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6af8:	movs	r1, #1
    6afa:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    6afc:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    6afe:	ldrh.w	r3, [sp, #36]	; 0x24
    6b02:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    6b04:	ldrb.w	r3, [sp, #35]	; 0x23
    6b08:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    6b0a:	ldr	r3, [sp, #44]	; 0x2c
    6b0c:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    6b0e:	movs	r3, #0
    6b10:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    6b14:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    6b18:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6b1c:	cmp	r0, #0
    6b1e:	beq.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    6b20:	add.w	r3, sp, #13
    6b24:	add.w	r2, r0, #13
    6b28:	add.w	r1, sp, #29
    6b2c:	ldr.w	ip, [r3], #4
    6b30:	cmp	r3, r1
    6b32:	str.w	ip, [r2], #4
    6b36:	bne.n	6b2c <FatFile::rename(FatFile*, char const*)+0xd2>
    6b38:	ldrh	r1, [r3, #0]
    6b3a:	strh	r1, [r2, #0]
    6b3c:	ldrb	r3, [r3, #2]
    6b3e:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    6b40:	ldrb.w	r3, [sp, #11]
    6b44:	strb	r3, [r0, #11]
  if (dirCluster) {
    6b46:	cmp	r7, #0
    6b48:	beq.n	6bc6 <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    6b4a:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b4c:	subs	r3, r7, #2
    6b4e:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    6b50:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b52:	ldr.w	r1, [r0, #-20]
    6b56:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    6b58:	movs	r2, #0
    6b5a:	add	r1, r3
    6b5c:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6b60:	cmp	r0, #0
    6b62:	beq.n	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    6b64:	add.w	r2, r0, #32
    6b68:	mov	lr, r5
    6b6a:	add.w	r3, r0, #64	; 0x40
    6b6e:	ldr	r0, [r2, #0]
    6b70:	adds	r2, #8
    6b72:	ldr.w	r1, [r2, #-4]
    6b76:	mov	ip, lr
    6b78:	cmp	r2, r3
    6b7a:	stmia.w	ip!, {r0, r1}
    6b7e:	mov	lr, ip
    6b80:	bne.n	6b6e <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    6b82:	mov	r1, r7
    6b84:	ldr	r0, [r4, #8]
    6b86:	bl	700a <FatPartition::freeChain(unsigned long)>
    6b8a:	cmp	r0, #0
    6b8c:	beq.w	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    6b90:	ldr	r0, [r4, #8]
    6b92:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b94:	ldr	r1, [r4, #32]
    6b96:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    6b98:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6b9a:	subs	r1, #2
    6b9c:	lsls	r1, r3
    6b9e:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    6ba2:	add	r1, r3
    6ba4:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    6ba8:	cmp	r0, #0
    6baa:	beq.w	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    6bae:	add.w	r3, r0, #32
    6bb2:	mov	r2, r5
    6bb4:	adds	r3, #8
    6bb6:	ldmia	r2!, {r0, r1}
    6bb8:	cmp	r2, r6
    6bba:	str.w	r0, [r3, #-8]
    6bbe:	str.w	r1, [r3, #-4]
    6bc2:	mov	r5, r2
    6bc4:	bne.n	6bb2 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    6bc6:	movs	r3, #0
  if (!oldFile.remove()) {
    6bc8:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    6bca:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    6bcc:	movs	r3, #2
    6bce:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    6bd2:	movs	r3, #8
    6bd4:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    6bd8:	bl	78b4 <FatFile::remove()>
    6bdc:	cmp	r0, #0
    6bde:	beq.w	6a7a <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    6be2:	ldr	r0, [r4, #8]
    6be4:	bl	6228 <FatPartition::cacheSync()>
    6be8:	b.n	6a7c <FatFile::rename(FatFile*, char const*)+0x22>
	...

00006bec <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6bec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6bf0:	ldrb	r3, [r0, #2]
    6bf2:	mov	r4, r0
    6bf4:	mov	r9, r1
    6bf6:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    6bf8:	lsls	r5, r3, #30
    6bfa:	bpl.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6bfc:	lsls	r1, r3, #28
    6bfe:	bmi.n	6c28 <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    6c00:	ldr	r3, [r4, #20]
    6c02:	adds	r3, r3, r7
    6c04:	bcs.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
    6c06:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6c08:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6c0c:	ldr	r3, [r4, #20]
  while (nToWrite) {
    6c0e:	cmp.w	r8, #0
    6c12:	bne.n	6c3e <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    6c14:	ldr	r2, [r4, #28]
    6c16:	cmp	r2, r3
    6c18:	bcs.w	6d7a <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6c1c:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6c1e:	ldrb	r3, [r4, #2]
    6c20:	orn	r3, r3, #127	; 0x7f
    6c24:	strb	r3, [r4, #2]
    6c26:	b.n	6d84 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    6c28:	ldr	r1, [r0, #28]
    6c2a:	bl	6536 <FatFile::seekSet(unsigned long)>
    6c2e:	cmp	r0, #0
    6c30:	bne.n	6c00 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6c32:	ldrb	r3, [r4, #1]
  return 0;
    6c34:	movs	r7, #0
  m_error |= WRITE_ERROR;
    6c36:	orr.w	r3, r3, #1
    6c3a:	strb	r3, [r4, #1]
  return 0;
    6c3c:	b.n	6d84 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6c3e:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6c40:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    6c44:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    6c46:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6c48:	ands.w	r6, r6, r3, lsr #9
    6c4c:	bne.n	6c64 <FatFile::write(void const*, unsigned int)+0x78>
    6c4e:	cbnz	r5, 6c64 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    6c50:	cmp	r1, #0
    6c52:	beq.n	6ccc <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    6c54:	ldrb	r2, [r4, #2]
    6c56:	lsls	r2, r2, #25
    6c58:	bpl.n	6cb4 <FatFile::write(void const*, unsigned int)+0xc8>
    6c5a:	ldr	r2, [r4, #28]
    6c5c:	cmp	r2, r3
    6c5e:	bls.n	6cb4 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    6c60:	adds	r1, #1
    6c62:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    6c64:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    6c68:	ldr	r1, [r4, #16]
    6c6a:	ldrb.w	r3, [ip, #6]
    6c6e:	subs	r1, #2
    6c70:	lsls	r1, r3
    6c72:	ldr.w	r3, [ip, #20]
    6c76:	add	r1, r3
                      + sectorOfCluster;
    6c78:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6c7a:	cmp	r5, #0
    6c7c:	bne.n	6ce4 <FatFile::write(void const*, unsigned int)+0xf8>
    6c7e:	cmp.w	r8, #512	; 0x200
    6c82:	bcc.n	6ce4 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6c84:	cmp.w	r8, #1024	; 0x400
    6c88:	ldr.w	r2, [ip, #52]	; 0x34
    6c8c:	ldr.w	r0, [ip, #44]	; 0x2c
    6c90:	bcs.n	6d44 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    6c92:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    6c94:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    6c96:	ittt	eq
    6c98:	moveq.w	r3, #4294967295
    m_status = 0;
    6c9c:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6ca0:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    6ca4:	ldr	r3, [r0, #0]
    6ca6:	ldr	r3, [r3, #36]	; 0x24
    6ca8:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6caa:	cmp	r0, #0
    6cac:	beq.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    6cae:	mov.w	r6, #512	; 0x200
    6cb2:	b.n	6d2e <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6cb4:	mov	r2, sl
    6cb6:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6cba:	cmp	r0, #0
    6cbc:	blt.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    6cbe:	bne.n	6c64 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    6cc0:	mov	r0, r4
    6cc2:	bl	624e <FatFile::addCluster()>
    6cc6:	cmp	r0, #0
    6cc8:	bne.n	6c64 <FatFile::write(void const*, unsigned int)+0x78>
    6cca:	b.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    6ccc:	ldr	r3, [r4, #32]
    6cce:	cbnz	r3, 6ce0 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    6cd0:	mov	r0, r4
    6cd2:	bl	624e <FatFile::addCluster()>
    6cd6:	cmp	r0, #0
    6cd8:	beq.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    6cda:	ldr	r3, [r4, #16]
    6cdc:	str	r3, [r4, #32]
    6cde:	b.n	6c64 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    6ce0:	str	r3, [r4, #16]
    6ce2:	b.n	6c64 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    6ce4:	rsb	r6, r5, #512	; 0x200
    6ce8:	cmp	r6, r8
    6cea:	it	cs
    6cec:	movcs	r6, r8
      if (sectorOffset == 0 &&
    6cee:	cbnz	r5, 6d3c <FatFile::write(void const*, unsigned int)+0x150>
    6cf0:	ldr	r2, [r4, #20]
    6cf2:	ldr	r3, [r4, #28]
    6cf4:	cmp	r2, r3
    6cf6:	bcs.n	6d40 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    6cf8:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6cfa:	tst.w	r3, #32
    6cfe:	ite	eq
    6d00:	moveq	r2, #1
    6d02:	movne	r2, #5
    return m_cache.prepare(sector, options);
    6d04:	add.w	r0, ip, #40	; 0x28
    6d08:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    6d0c:	cmp	r0, #0
    6d0e:	beq.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    6d10:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d12:	add	r5, r6
      memcpy(dst, src, n);
    6d14:	mov	r2, r6
    6d16:	mov	r1, r9
    6d18:	bl	9470 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d1c:	cmp.w	r5, #512	; 0x200
    6d20:	ldr	r0, [r4, #8]
    6d22:	bne.n	6d2e <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    6d24:	adds	r0, #40	; 0x28
    6d26:	bl	4924 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6d2a:	cmp	r0, #0
    6d2c:	beq.n	6c32 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    6d2e:	ldr	r3, [r4, #20]
    src += n;
    6d30:	add	r9, r6
    nToWrite -= n;
    6d32:	sub.w	r8, r8, r6
    m_curPosition += n;
    6d36:	add	r3, r6
    6d38:	str	r3, [r4, #20]
    nToWrite -= n;
    6d3a:	b.n	6c0c <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6d3c:	movs	r2, #1
    6d3e:	b.n	6d04 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6d40:	movs	r2, #5
    6d42:	b.n	6d04 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6d44:	ldrb.w	r3, [ip, #4]
    6d48:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6d4a:	mov.w	r6, r8, lsr #9
    6d4e:	cmp	r3, r6
    6d50:	it	cs
    6d52:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    6d54:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    6d56:	mov.w	r6, r3, lsl #9
    6d5a:	bhi.n	6d70 <FatFile::write(void const*, unsigned int)+0x184>
    6d5c:	add.w	lr, r1, r3
    6d60:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    6d62:	ittt	hi
    6d64:	movhi.w	r2, #4294967295
    m_status = 0;
    6d68:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    6d6c:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    6d70:	ldr	r2, [r0, #0]
    6d72:	ldr	r5, [r2, #40]	; 0x28
    6d74:	mov	r2, r9
    6d76:	blx	r5
    6d78:	b.n	6d2a <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    6d7a:	ldr	r3, [pc, #16]	; (6d8c <FatFile::write(void const*, unsigned int)+0x1a0>)
    6d7c:	ldr	r3, [r3, #0]
    6d7e:	cmp	r3, #0
    6d80:	bne.w	6c1e <FatFile::write(void const*, unsigned int)+0x32>
}
    6d84:	mov	r0, r7
    6d86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6d8a:	nop
    6d8c:	.word	0x200273fc

00006d90 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    6d90:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    6d92:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    6d96:	push	{r4, r5, lr}
    6d98:	mov	r4, r3
    6d9a:	it	cs
    6d9c:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    6da0:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    6da4:	cmp	r1, r5
    6da6:	bcc.n	6dae <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6da8:	subs	r3, r3, r4
    6daa:	str	r3, [r2, #0]
}
    6dac:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    6dae:	ldrh.w	r0, [r1], #2
    6db2:	cmp	r0, #0
    6db4:	bne.n	6da4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    6db6:	ldr	r0, [r2, #4]
    6db8:	adds	r0, #1
    6dba:	str	r0, [r2, #4]
    6dbc:	b.n	6da4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00006dbe <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    6dbe:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    6dc0:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    6dc2:	push	{r4, r5, lr}
    6dc4:	mov	r4, r3
    6dc6:	it	cs
    6dc8:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    6dca:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    6dce:	cmp	r1, r5
    6dd0:	bcc.n	6dd8 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    6dd2:	subs	r3, r3, r4
    6dd4:	str	r3, [r2, #0]
}
    6dd6:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    6dd8:	ldr.w	r0, [r1], #4
    6ddc:	cmp	r0, #0
    6dde:	bne.n	6dce <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    6de0:	ldr	r0, [r2, #4]
    6de2:	adds	r0, #1
    6de4:	str	r0, [r2, #4]
    6de6:	b.n	6dce <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00006de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6de8:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    6dea:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    6dee:	cmp	r3, #2
    6df0:	it	eq
    6df2:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    6df6:	b.w	4972 <FsCache::prepare(unsigned long, unsigned char)>

00006dfa <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6dfa:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6dfc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e00:	mov	r6, r0
    6e02:	mov	r4, r1
    6e04:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    6e06:	bhi.n	6e10 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    6e08:	mov.w	r0, #4294967295
}
    6e0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    6e10:	ldr	r3, [r0, #28]
    6e12:	cmp	r3, r1
    6e14:	bcc.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    6e16:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    6e18:	cmp	r3, #32
    6e1a:	bne.n	6e42 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6e1c:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e1e:	movs	r2, #0
    6e20:	add.w	r1, r1, r4, lsr #7
    6e24:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e28:	cmp	r0, #0
    6e2a:	beq.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6e2c:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    6e2e:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    6e32:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    6e34:	ldr	r2, [r6, #28]
    6e36:	cmp	r2, r3
  return 1;
    6e38:	itet	cs
    6e3a:	movcs	r0, #1
    return 0;
    6e3c:	movcc	r0, #0
  *value = next;
    6e3e:	strcs	r3, [r7, #0]
  return 1;
    6e40:	b.n	6e0c <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    6e42:	cmp	r3, #16
    6e44:	bne.n	6e62 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6e46:	ubfx	r1, r1, #8, #8
    6e4a:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e4c:	movs	r2, #0
    6e4e:	add	r1, r3
    6e50:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e54:	cmp	r0, #0
    6e56:	beq.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6e58:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    6e5a:	and.w	r4, r4, #510	; 0x1fe
    6e5e:	ldrh	r3, [r0, r4]
    6e60:	b.n	6e34 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    6e62:	cmp	r3, #12
    6e64:	bne.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    6e66:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6e6a:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e6c:	movs	r2, #0
    index += index >> 1;
    6e6e:	uxtah	r8, r8, r1
    6e72:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6e76:	ubfx	r8, r8, #9, #7
    6e7a:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    6e7c:	mov	r1, r8
    6e7e:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6e82:	cmp	r0, #0
    6e84:	beq.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    6e86:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    6e8a:	ldrb	r5, [r0, r3]
    index++;
    6e8c:	adds	r3, #1
    if (index == m_bytesPerSector) {
    6e8e:	cmp.w	r3, #512	; 0x200
    6e92:	bne.n	6ea6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    6e94:	movs	r2, #0
    6e96:	add.w	r1, r8, #1
    6e9a:	mov	r0, r6
    6e9c:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    6ea0:	cmp	r0, #0
    6ea2:	beq.n	6e08 <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    6ea4:	movs	r3, #0
    tmp |= pc[index] << 8;
    6ea6:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6ea8:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    6eaa:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    6eae:	ite	mi
    6eb0:	lsrmi	r3, r3, #4
    6eb2:	ubfxpl	r3, r3, #0, #12
    6eb6:	b.n	6e34 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00006eb8 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    6eb8:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6eba:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ebe:	mov	r8, r0
    6ec0:	mov	r4, r1
    6ec2:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    6ec4:	bhi.n	6ecc <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    6ec6:	movs	r0, #0
}
    6ec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    6ecc:	ldr	r3, [r0, #28]
    6ece:	cmp	r3, r1
    6ed0:	bcc.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    6ed2:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    6ed4:	cmp	r3, #32
    6ed6:	bne.n	6ef4 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6ed8:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6eda:	movs	r2, #1
    6edc:	add.w	r1, r1, r4, lsr #7
    6ee0:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6ee4:	cmp	r0, #0
    6ee6:	beq.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    6ee8:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    6eea:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    6eee:	str	r5, [r0, r4]
    return true;
    6ef0:	movs	r0, #1
    6ef2:	b.n	6ec8 <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    6ef4:	cmp	r3, #16
    6ef6:	bne.n	6f14 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    6ef8:	ubfx	r1, r1, #8, #8
    6efc:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6efe:	movs	r2, #1
    6f00:	add	r1, r3
    6f02:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6f06:	cmp	r0, #0
    6f08:	beq.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    6f0a:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    6f0c:	and.w	r4, r4, #510	; 0x1fe
    6f10:	strh	r5, [r0, r4]
    return true;
    6f12:	b.n	6ef0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    6f14:	cmp	r3, #12
    6f16:	bne.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    6f18:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6f1c:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f1e:	movs	r2, #1
    index += index >> 1;
    6f20:	uxtah	r7, r7, r1
    6f24:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    6f26:	ubfx	r7, r7, #9, #7
    6f2a:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f2c:	mov	r1, r7
    6f2e:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    6f32:	cmp	r0, #0
    6f34:	beq.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    6f36:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    6f3a:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f3e:	itt	ne
    6f40:	lslne	r2, r5, #4
    6f42:	ldrbne	r1, [r0, r3]
    6f44:	add.w	r6, r0, r3
    index++;
    6f48:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f4c:	ittet	ne
    6f4e:	andne.w	r2, r2, #240	; 0xf0
    6f52:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    6f56:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    6f58:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    6f5a:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    6f5e:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    6f60:	bne.n	6f72 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    6f62:	movs	r2, #1
    6f64:	mov	r0, r8
    6f66:	adds	r1, r7, r2
    6f68:	bl	6de8 <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    6f6c:	cmp	r0, #0
    6f6e:	beq.n	6ec6 <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    6f70:	movs	r3, #0
    tmp = value >> 4;
    6f72:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6f76:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    6f78:	cbnz	r4, 6f84 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    6f7a:	ldrb	r3, [r0, r3]
    6f7c:	bic.w	r3, r3, #15
    6f80:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    6f84:	strb	r5, [r2, #0]
    6f86:	b.n	6ef0 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00006f88 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6f88:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    6f8c:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6f8e:	mov	r5, r0
    6f90:	mov	r6, r1
    6f92:	mov	r8, r2
  if (m_allocSearchStart < current) {
    6f94:	cmp	r4, r1
    6f96:	bcc.n	6f9c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    6f98:	movs	r7, #1
    6f9a:	b.n	6fa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6f9c:	mov	r4, r1
    setStart = false;
    6f9e:	movs	r7, #0
    find++;
    6fa0:	adds	r4, #1
    if (find > m_lastCluster) {
    6fa2:	ldr	r3, [r5, #28]
    6fa4:	cmp	r3, r4
    6fa6:	bcs.n	6fae <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    6fa8:	cbnz	r7, 6fdc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    6faa:	ldr	r4, [r5, #12]
    6fac:	b.n	6f98 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    6fae:	cmp	r6, r4
    6fb0:	beq.n	6fdc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    6fb2:	add	r2, sp, #4
    6fb4:	mov	r1, r4
    6fb6:	mov	r0, r5
    6fb8:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6fbc:	cmp	r0, #0
    6fbe:	blt.n	6fdc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    6fc0:	beq.n	6fa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    6fc2:	ldr	r3, [sp, #4]
    6fc4:	cmp	r3, #0
    6fc6:	bne.n	6fa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    6fc8:	cbz	r7, 6fcc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    6fca:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6fcc:	mvn.w	r2, #4026531840	; 0xf0000000
    6fd0:	mov	r1, r4
    6fd2:	mov	r0, r5
    6fd4:	bl	6eb8 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    6fd8:	mov	r7, r0
    6fda:	cbnz	r0, 6fe6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    6fdc:	movs	r7, #0
}
    6fde:	mov	r0, r7
    6fe0:	add	sp, #8
    6fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    6fe6:	cbnz	r6, 6ff4 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    6fe8:	ldr	r3, [r5, #36]	; 0x24
    6fea:	cmp	r3, #0
    6fec:	bge.n	7004 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    6fee:	str.w	r4, [r8]
  return true;
    6ff2:	b.n	6fde <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    6ff4:	mov	r2, r4
    6ff6:	mov	r1, r6
    6ff8:	mov	r0, r5
    6ffa:	bl	6eb8 <FatPartition::fatPut(unsigned long, unsigned long)>
    6ffe:	cmp	r0, #0
    7000:	bne.n	6fe8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7002:	b.n	6fdc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7004:	subs	r3, #1
    7006:	str	r3, [r5, #36]	; 0x24
    7008:	b.n	6fee <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

0000700a <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    700a:	push	{r0, r1, r4, r5, r6, lr}
    700c:	mov	r5, r0
    700e:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7010:	add	r2, sp, #4
    7012:	mov	r1, r4
    7014:	mov	r0, r5
    7016:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    701a:	subs	r6, r0, #0
    701c:	blt.n	704a <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    701e:	movs	r2, #0
    7020:	mov	r1, r4
    7022:	mov	r0, r5
    7024:	bl	6eb8 <FatPartition::fatPut(unsigned long, unsigned long)>
    7028:	cbz	r0, 704a <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    702a:	ldr	r3, [r5, #36]	; 0x24
    702c:	cmp	r3, #0
      m_freeClusterCount += change;
    702e:	itt	ge
    7030:	addge	r3, #1
    7032:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7034:	ldr	r3, [r5, #12]
    7036:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7038:	itt	hi
    703a:	addhi.w	r4, r4, #4294967295
    703e:	strhi	r4, [r5, #12]
    cluster = next;
    7040:	ldr	r4, [sp, #4]
  } while (fg);
    7042:	cmp	r6, #0
    7044:	bne.n	7010 <FatPartition::freeChain(unsigned long)+0x6>
}
    7046:	add	sp, #8
    7048:	pop	{r4, r5, r6, pc}
  return false;
    704a:	movs	r0, #0
    704c:	b.n	7046 <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007050 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7050:	push	{r4, r5, r6, r7, lr}
    7052:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7054:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7056:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7058:	cmp	r0, #0
    705a:	bge.n	70ce <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    705c:	ldrb	r3, [r4, #7]
    705e:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7060:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7062:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7064:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7068:	beq.n	70d2 <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    706a:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    706e:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7070:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7072:	strd	r6, r5, [sp, #16]
    7076:	bmi.n	70d6 <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7078:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    707a:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    707c:	ldr	r0, [r4, #0]
    707e:	add	r6, sp, #16
    7080:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7084:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7086:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    708a:	ldr	r1, [r4, #24]
    708c:	ldr	r5, [r0, #0]
    708e:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7092:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7096:	bne.n	70e8 <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7098:	str	r6, [sp, #4]
    709a:	ldr	r6, [pc, #84]	; (70f0 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    709c:	str	r6, [sp, #0]
    709e:	ldr	r5, [r5, #24]
    70a0:	blx	r5
    70a2:	cbz	r0, 70b8 <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    70a4:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    70a6:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    70a8:	b.n	70ce <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    70aa:	add	r2, sp, #16
    70ac:	mov	r1, r7
    70ae:	mov	r0, r4
    70b0:	bl	6dfa <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    70b4:	cmp	r0, #0
    70b6:	bge.n	70be <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    70b8:	mov.w	r0, #4294967295
    70bc:	b.n	70ce <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    70be:	beq.n	70c6 <FatPartition::freeClusterCount()+0x76>
    70c0:	ldr	r3, [sp, #16]
    70c2:	cbnz	r3, 70c6 <FatPartition::freeClusterCount()+0x76>
        free++;
    70c4:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    70c6:	adds	r7, #1
    70c8:	cmp	r7, r6
    70ca:	bcc.n	70aa <FatPartition::freeClusterCount()+0x5a>
    return free;
    70cc:	mov	r0, r5
}
    70ce:	add	sp, #28
    70d0:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    70d2:	movs	r7, #2
    70d4:	b.n	70c8 <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    70d6:	add.w	r0, r4, #568	; 0x238
    70da:	str	r3, [sp, #12]
    70dc:	bl	4924 <FsCache::sync()>
    70e0:	ldr	r3, [sp, #12]
    70e2:	cmp	r0, #0
    70e4:	bne.n	7078 <FatPartition::freeClusterCount()+0x28>
    70e6:	b.n	70b8 <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    70e8:	str	r6, [sp, #4]
    70ea:	ldr	r6, [pc, #8]	; (70f4 <FatPartition::freeClusterCount()+0xa4>)
    70ec:	b.n	709c <FatPartition::freeClusterCount()+0x4c>
    70ee:	nop
    70f0:	.word	0x00006dbf
    70f4:	.word	0x00006d91

000070f8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    70f8:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    70fa:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    70fc:	mov	r4, r0
  m_blockDev = dev;
    70fe:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7100:	mov	r5, r2
  m_fatType = 0;
    7102:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7104:	movs	r0, #1
  m_cache.init(dev);
    7106:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    710a:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    710c:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    710e:	mov.w	r0, #4294967295
    m_status = 0;
    7112:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7116:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7118:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    711c:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7120:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7124:	cbz	r2, 715a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7126:	cmp	r2, #4
    7128:	bls.n	712e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    712a:	movs	r0, #0
}
    712c:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    712e:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7132:	mov	r2, r3
    7134:	mov	r1, r3
    7136:	mov	r0, r6
    7138:	subs	r5, #1
    713a:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
    713e:	add.w	r3, r0, #446	; 0x1be
    7142:	lsls	r2, r5, #4
    7144:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7148:	cmp	r0, #0
    714a:	beq.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    714c:	ldrb	r1, [r5, #4]
    714e:	cmp	r1, #0
    7150:	beq.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7152:	ldrb	r3, [r3, r2]
    7154:	lsls	r3, r3, #25
    7156:	bne.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7158:	ldr	r5, [r5, #8]
    715a:	movs	r2, #0
    715c:	mov	r1, r5
    715e:	mov	r0, r6
    7160:	bl	4972 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7164:	cmp	r0, #0
    7166:	beq.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7168:	ldrh.w	r3, [r0, #11]
    716c:	cmp.w	r3, #512	; 0x200
    7170:	bne.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7172:	ldrb	r3, [r0, #16]
    7174:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7176:	subs	r3, #1
    7178:	cmp	r3, #1
    717a:	bhi.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    717c:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    717e:	movs	r6, #9
    7180:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7182:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7184:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7186:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7188:	movs	r3, #1
    718a:	cmp	r1, r3
    718c:	bne.n	71f6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    718e:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7190:	ldrh	r3, [r0, #22]
    7192:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7194:	cbnz	r3, 719a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7196:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7198:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    719a:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    719c:	ldrh.w	r1, [r0, #17]
    71a0:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71a2:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    71a4:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    71a6:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    71a8:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71aa:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    71ac:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    71b0:	mla	r3, r6, r7, r3
    71b4:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    71b6:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    71ba:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    71be:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    71c0:	cbnz	r1, 71c4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    71c2:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    71c4:	subs	r5, r5, r3
    71c6:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    71c8:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    71ca:	adds	r3, r5, #1
    71cc:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    71ce:	mov.w	r3, #4294967295
    71d2:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    71d4:	movw	r3, #4084	; 0xff4
    71d8:	cmp	r5, r3
    71da:	bls.n	7208 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    71dc:	movw	r3, #65524	; 0xfff4
    71e0:	cmp	r5, r3
    71e2:	bls.n	720c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    71e4:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    71e6:	str	r3, [r4, #32]
    71e8:	movs	r3, #32
  return true;
    71ea:	movs	r0, #1
    m_fatType = 12;
    71ec:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    71ee:	str	r6, [r4, #48]	; 0x30
    71f0:	str.w	r6, [r4, #576]	; 0x240
  return true;
    71f4:	b.n	712c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    71f6:	subs	r6, #1
    71f8:	bne.n	71fe <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    71fa:	strb	r2, [r4, #6]
    71fc:	b.n	712a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    71fe:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7200:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7202:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7204:	uxtb	r3, r3
    7206:	b.n	718a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7208:	movs	r3, #12
    720a:	b.n	71ea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    720c:	movs	r3, #16
    720e:	b.n	71ea <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007210 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7210:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7212:	add.w	r4, r0, #1096	; 0x448
    7216:	sub	sp, #40	; 0x28
  FatFile() {}
    7218:	movs	r3, #0
    721a:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    721c:	add	r0, sp, #4
    721e:	mov	r1, r4
    7220:	str	r3, [sp, #4]
    7222:	bl	6810 <FatFile::open(FatFile*, char const*, int)>
    7226:	mov	r6, r0
    7228:	cbz	r0, 7246 <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    722a:	ldrb.w	r3, [sp, #4]
    722e:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    7232:	itett	ne
    7234:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    7236:	moveq	r6, r3
  m_vwd = dir;
    7238:	ldmiane	r5!, {r0, r1, r2, r3}
    723a:	stmiane	r4!, {r0, r1, r2, r3}
    723c:	itttt	ne
    723e:	ldmiane	r5!, {r0, r1, r2, r3}
    7240:	stmiane	r4!, {r0, r1, r2, r3}
    7242:	ldrne	r3, [r5, #0]
    7244:	strne	r3, [r4, #0]
}
    7246:	mov	r0, r6
    7248:	add	sp, #40	; 0x28
    724a:	pop	{r4, r5, r6, pc}

0000724c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    724c:	subs	r1, r0, #1
    724e:	add.w	r3, r0, #10
    uint8_t sum = 0;
    7252:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7254:	lsls	r2, r0, #7
    7256:	orr.w	r2, r2, r0, lsr #1
    725a:	ldrb.w	r0, [r1, #1]!
    725e:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7262:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    7264:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    7266:	bne.n	7254 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    7268:	bx	lr

0000726a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    726a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    726e:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7270:	sub	sp, #52	; 0x34
    7272:	mov	r6, r2
    7274:	mov	r7, r0
    7276:	mov	r9, r1
    7278:	mov	r8, r3
  FatFile dir = *this;
    727a:	add	r4, sp, #12
    727c:	ldmia	r5!, {r0, r1, r2, r3}
    727e:	stmia	r4!, {r0, r1, r2, r3}
    7280:	ldmia	r5!, {r0, r1, r2, r3}
    7282:	stmia	r4!, {r0, r1, r2, r3}
    7284:	ldr	r3, [r5, #0]
    7286:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7288:	movs	r4, #1
    next = begin;
    728a:	ldr	r3, [r6, #0]
    728c:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    728e:	movs	r3, #0
    7290:	strh	r3, [r6, #12]
    7292:	cmp	r4, r8
    7294:	bls.n	729a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    7296:	movs	r0, #1
    7298:	b.n	72ac <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    729a:	sub.w	r1, r9, r4
    729e:	add	r0, sp, #12
    72a0:	uxth	r1, r1
    72a2:	bl	6044 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    72a6:	mov	sl, r0
    72a8:	cbnz	r0, 72b2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    72aa:	movs	r0, #0
}
    72ac:	add	sp, #52	; 0x34
    72ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72b2:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    72b4:	uxtb	r2, r5
    72b6:	mov	r1, sl
    72b8:	mov	r0, r7
    72ba:	bl	605e <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    72be:	ldrh	r3, [r6, #12]
    72c0:	mov	fp, r0
    72c2:	cbnz	r3, 72d4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    72c4:	ldrd	r2, r3, [r6, #4]
    72c8:	cmp	r2, r3
    72ca:	bne.n	72d4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    72cc:	clz	r0, r0
    72d0:	lsrs	r0, r0, #5
    72d2:	b.n	72ac <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    72d4:	mov	r0, r6
    72d6:	bl	4a68 <FsName::get16()>
    72da:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    72dc:	mov	r0, fp
    72de:	bl	49c0 <toUpcase(unsigned short)>
    72e2:	ldr	r3, [sp, #4]
    72e4:	mov	fp, r0
    72e6:	mov	r0, r3
    72e8:	bl	49c0 <toUpcase(unsigned short)>
    72ec:	cmp	fp, r0
    72ee:	bne.n	72aa <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    72f0:	adds	r5, #1
    72f2:	cmp	r5, #13
    72f4:	bne.n	72b4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    72f6:	adds	r4, #1
    72f8:	uxtb	r4, r4
    72fa:	b.n	7292 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

000072fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    72fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    7300:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    7302:	sub	sp, #52	; 0x34
    7304:	mov	r4, r2
    7306:	mov	r9, r1
    7308:	mov	r7, r3
  FatFile dir = *this;
    730a:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    730c:	mov.w	sl, #15
  FatFile dir = *this;
    7310:	ldmia	r5!, {r0, r1, r2, r3}
    7312:	stmia	r6!, {r0, r1, r2, r3}
    7314:	ldmia	r5!, {r0, r1, r2, r3}
    7316:	stmia	r6!, {r0, r1, r2, r3}
    7318:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    731a:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    731e:	movs	r5, #1
  FatFile dir = *this;
    7320:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    7322:	bl	724c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    7326:	movs	r6, #0
    next = begin;
    7328:	ldr	r3, [r4, #0]
    732a:	mov	r8, r0
    732c:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    732e:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    7330:	cmp	r5, r7
    7332:	bls.n	733c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    7334:	movs	r0, #1

 fail:
  return false;
}
    7336:	add	sp, #52	; 0x34
    7338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    733c:	sub.w	r1, r9, r5
    7340:	add	r0, sp, #12
    7342:	uxth	r1, r1
    7344:	bl	6044 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7348:	cmp	r0, #0
    734a:	beq.n	7336 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    734c:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    734e:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    7350:	mov.w	r1, #0
    7354:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    7358:	ldrb.w	r3, [r2, #40]	; 0x28
    735c:	orr.w	r3, r3, #1
    7360:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7364:	ite	eq
    7366:	orreq.w	r3, r5, #64	; 0x40
    736a:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    736c:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    7370:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    7372:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    7374:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7378:	strh	r1, [r0, #26]
    return !ls && next == end;
    737a:	ldrh	r0, [r4, #12]
    737c:	cbnz	r0, 73aa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    737e:	ldrd	r2, r3, [r4, #4]
    7382:	cmp	r2, r3
    7384:	bne.n	73aa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    7386:	cbz	r6, 73b6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    7388:	adds	r6, #1
    738a:	movw	r0, #65535	; 0xffff
    738e:	uxtb	r6, r6
  if (i < 5) {
    7390:	cmp	r1, #4
    7392:	uxtb	r3, r1
    7394:	bhi.n	73ba <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    7396:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    739a:	adds	r1, #1
    739c:	add.w	fp, fp, #2
    73a0:	cmp	r1, #13
    73a2:	bne.n	737a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    73a4:	adds	r5, #1
    73a6:	uxtb	r5, r5
    73a8:	b.n	7330 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    73aa:	mov	r0, r4
    73ac:	str	r1, [sp, #4]
    73ae:	bl	4a68 <FsName::get16()>
    73b2:	ldr	r1, [sp, #4]
    73b4:	b.n	7390 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    73b6:	movs	r6, #1
    73b8:	b.n	7390 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    73ba:	cmp	r3, #10
    73bc:	ite	ls
    73be:	strhls.w	r0, [fp, #3]
    73c2:	strhhi.w	r0, [fp, #5]
}
    73c6:	b.n	739a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

000073c8 <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    73c8:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    73ca:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    73ce:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    73d2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    73d6:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    73d8:	mov	r5, r0
    fname->sfn[k] = ' ';
    73da:	str.w	r1, [r0, #22]
    73de:	str	r1, [r2, #4]
    73e0:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    73e4:	ldrb	r0, [r3, #0]
    73e6:	subs	r0, #46	; 0x2e
    73e8:	it	ne
    73ea:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    73ec:	mov	r7, r3
    73ee:	ldrb.w	r2, [r3], #1
    73f2:	cmp	r2, #46	; 0x2e
    73f4:	beq.n	73ec <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    73f6:	subs	r3, r6, #1
    73f8:	cmp	r3, r7
    73fa:	mov	lr, r3
    73fc:	bls.n	7406 <FatFile::makeSFN(FatLfn_t*)+0x3e>
    73fe:	ldrb.w	r2, [r3], #-1
    7402:	cmp	r2, #46	; 0x2e
    7404:	bne.n	73f8 <FatFile::makeSFN(FatLfn_t*)+0x30>
    7406:	movs	r2, #0
    7408:	mov.w	ip, #7
    740c:	mov.w	r9, #8
    7410:	mov	r1, r2
    7412:	mov	r8, r2
    7414:	b.n	742c <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    7416:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    7418:	cmp	r3, #46	; 0x2e
    741a:	bne.n	7448 <FatFile::makeSFN(FatLfn_t*)+0x80>
    741c:	cmp	lr, r7
    741e:	bne.n	7464 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    7420:	mov.w	ip, #10
      i = 8;    // Place for extension.
    7424:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    7426:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    742a:	adds	r7, #1
    742c:	cmp	r7, r6
    742e:	bcc.n	7416 <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    7430:	ldrb	r3, [r5, #22]
    7432:	cmp	r3, #32
    7434:	beq.n	74e8 <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    7436:	cmp	r0, #0
    7438:	beq.n	74d4 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    743a:	tst.w	r8, r2
    743e:	it	ne
    7440:	movne	r2, #2
    7442:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    7444:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    7448:	cmp	r3, #34	; 0x22
    744a:	beq.n	7464 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    744c:	cmp	r3, #124	; 0x7c
    744e:	beq.n	7464 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    7450:	sub.w	r4, r3, #91	; 0x5b
    7454:	cmp	r4, #2
    7456:	bls.n	7464 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    7458:	sub.w	r4, r3, #42	; 0x2a
    745c:	cmp	r4, #5
    745e:	bhi.n	746e <FatFile::makeSFN(FatLfn_t*)+0xa6>
    7460:	cmp	r3, #45	; 0x2d
    7462:	beq.n	748a <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    7464:	cmp	r1, ip
    7466:	bhi.n	748e <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    7468:	movs	r0, #0
        c = '_';
    746a:	movs	r3, #95	; 0x5f
    746c:	b.n	74b0 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    746e:	sub.w	r4, r3, #58	; 0x3a
    7472:	cmp	r4, #5
    7474:	bls.n	747e <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    7476:	sub.w	r4, r3, #33	; 0x21
    747a:	cmp	r4, #93	; 0x5d
    747c:	bls.n	748a <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    747e:	and.w	r3, r3, #192	; 0xc0
    7482:	cmp	r3, #128	; 0x80
    7484:	bne.n	7464 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    7486:	movs	r0, #0
    7488:	b.n	742a <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    748a:	cmp	r1, ip
    748c:	bls.n	749e <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    748e:	cmp.w	ip, #10
    7492:	beq.n	74d0 <FatFile::makeSFN(FatLfn_t*)+0x108>
    7494:	cmp	lr, r7
    7496:	bcc.n	74d0 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    7498:	add.w	r7, lr, #4294967295
        continue;
    749c:	b.n	7486 <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    749e:	sub.w	r4, r3, #97	; 0x61
    74a2:	cmp	r4, #25
    74a4:	bhi.n	74c2 <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    74a6:	subs	r3, #32
        lc |= bit;
    74a8:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    74ac:	uxtb	r3, r3
        lc |= bit;
    74ae:	uxtb	r2, r2
      fname->sfn[i++] = c;
    74b0:	adds	r4, r1, #1
    74b2:	add	r1, r5
    74b4:	uxtb	r4, r4
    74b6:	strb	r3, [r1, #22]
      if (i < 7) {
    74b8:	cmp	r4, #6
    74ba:	bhi.n	74be <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    74bc:	strb	r4, [r5, #20]
    74be:	mov	r1, r4
    74c0:	b.n	742a <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    74c2:	sub.w	r4, r3, #65	; 0x41
    74c6:	cmp	r4, #25
        uc |= bit;
    74c8:	it	ls
    74ca:	orrls.w	r8, r9, r8
    74ce:	b.n	74b0 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    74d0:	movs	r0, #0
    74d2:	b.n	7430 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    74d4:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    74d6:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    74d8:	movs	r1, #126	; 0x7e
    74da:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    74dc:	strb	r2, [r5, #21]
  return true;
    74de:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    74e0:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    74e2:	movs	r1, #49	; 0x31
    74e4:	strb	r1, [r3, #23]
    74e6:	b.n	7444 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    74e8:	movs	r0, #0
    74ea:	b.n	7444 <FatFile::makeSFN(FatLfn_t*)+0x7c>

000074ec <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    74ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    74f0:	mov	r7, r0
    74f2:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    74f4:	ldrb	r6, [r1, #20]
    74f6:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    74f8:	mov.w	sl, #0
	return systick_millis_count;
    74fc:	ldr.w	r8, [pc, #128]	; 7580 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    7500:	add.w	r9, r1, #22
    7504:	ldr.w	r3, [r8]
    7508:	cmp	r6, #3
    hex += millis();
    750a:	add	r3, sl
    750c:	it	cs
    750e:	movcs	r6, #3
    7510:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7514:	adds	r3, r6, #4
    7516:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    7518:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    751c:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    751e:	subs	r3, #1
      hex >>= 4;
    7520:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7524:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7526:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7528:	ite	ls
    752a:	addls	r2, #48	; 0x30
    752c:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    752e:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    7530:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    7532:	bne.n	7518 <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    7534:	adds	r3, r5, r6
    7536:	movs	r2, #126	; 0x7e
    seekSet(0);
    7538:	movs	r1, #0
    753a:	mov	r0, r7
    753c:	strb	r2, [r3, #22]
    753e:	bl	6536 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    7542:	movs	r1, #1
    7544:	mov	r0, r7
    7546:	bl	64f8 <FatFile::readDirCache(bool)>
      if (!dir) {
    754a:	mov	r1, r0
    754c:	cbnz	r0, 755a <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    754e:	ldrb	r0, [r7, #1]
    7550:	clz	r0, r0
    7554:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    7556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    755a:	ldrb	r3, [r0, #0]
    755c:	cbz	r3, 757c <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    755e:	ldrb	r3, [r0, #11]
    7560:	lsls	r3, r3, #28
    7562:	bmi.n	7542 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    7564:	movs	r2, #11
    7566:	mov	r0, r9
    7568:	bl	d848 <memcmp>
    756c:	cmp	r0, #0
    756e:	bne.n	7542 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    7570:	subs	r0, r4, #1
    7572:	ands.w	r4, r0, #255	; 0xff
    7576:	bne.n	7504 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    7578:	mov	r0, r4
 fail:
    757a:	b.n	7556 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    757c:	movs	r0, #1
    757e:	b.n	7556 <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    7580:	.word	0x20028140

00007584 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7588:	vpush	{d8}
    758c:	sub	sp, #44	; 0x2c
    758e:	mov	r5, r1
    7590:	mov	r7, r2
    7592:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    7594:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    7596:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    7598:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    759a:	ldrb	r3, [r1, #0]
    759c:	tst.w	r3, #112	; 0x70
    75a0:	bne.n	75ae <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    75a2:	movs	r0, #0
}
    75a4:	add	sp, #44	; 0x2c
    75a6:	vpop	{d8}
    75aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    75ae:	ldr	r3, [sp, #28]
    75b0:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    75b2:	cmp	r3, #0
    75b4:	bne.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    75b6:	ldr	r3, [r2, #16]
    75b8:	movs	r2, #13
    seekSet(0);
    75ba:	movs	r1, #0
    75bc:	mov	r0, r5
    75be:	adds	r3, #12
  uint8_t checksum = 0;
    75c0:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    75c4:	udiv	r3, r3, r2
    75c8:	uxtb	r3, r3
  uint8_t order = 0;
    75ca:	mov	r8, sl
  uint8_t freeFound = 0;
    75cc:	mov	r4, sl
  bool fnameFound = false;
    75ce:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    75d0:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    75d2:	ldrb	r3, [r7, #21]
    75d4:	lsls	r2, r3, #30
    75d6:	itett	ne
    75d8:	ldrne	r3, [sp, #24]
    75da:	moveq	r3, #1
    75dc:	addne.w	r9, r3, #1
    75e0:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    75e4:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    75e6:	str	r3, [sp, #8]
    75e8:	bl	6536 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    75ec:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    75f0:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    75f4:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    75f8:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    75fa:	movs	r1, #0
    75fc:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    75fe:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    7602:	bl	64f8 <FatFile::readDirCache(bool)>
    if (!dir) {
    7606:	cmp	r0, #0
    7608:	bne.n	76ce <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    760a:	ldrb	r3, [r5, #1]
    760c:	cmp	r3, #0
    760e:	bne.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    7610:	ldr	r3, [sp, #16]
    7612:	lsls	r2, r3, #22
    7614:	bpl.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    7616:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    761a:	subs	r3, #1
    761c:	cmp	r3, #1
    761e:	bhi.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    7620:	ldr	r3, [sp, #12]
    7622:	cmp	r4, #0
    7624:	it	eq
    7626:	moveq	r3, r6
    7628:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    762a:	ldr	r3, [sp, #8]
    762c:	cmp	r4, r3
    762e:	bcc.w	77b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    7632:	cmp.w	fp, #0
    7636:	bne.w	77e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    763a:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    763c:	mov	r2, r7
    763e:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    7640:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    7642:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    7644:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    7648:	uxtab	r6, r3, r6
    764c:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    764e:	mov	r3, fp
    7650:	mov	r1, r6
    7652:	bl	72fc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    7656:	cmp	r0, #0
    7658:	beq.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    765a:	mov	r1, r6
    765c:	mov	r0, r5
    765e:	bl	6044 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    7662:	mov	r4, r0
    7664:	cmp	r0, #0
    7666:	beq.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    7668:	movs	r2, #32
    766a:	movs	r1, #0
    766c:	bl	942c <memset>
  memcpy(dir->name, fname->sfn, 11);
    7670:	ldr.w	r3, [r7, #22]
    7674:	str	r3, [r4, #0]
    7676:	ldr.w	r3, [r7, #26]
    767a:	str	r3, [r4, #4]
    767c:	ldrh	r3, [r7, #30]
    767e:	strh	r3, [r4, #8]
    7680:	ldrb.w	r3, [r7, #32]
    7684:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    7686:	ldrb	r3, [r7, #21]
    7688:	and.w	r3, r3, #24
    768c:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    768e:	ldr	r3, [pc, #372]	; (7804 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    7690:	ldr	r3, [r3, #0]
    7692:	cmp	r3, #0
    7694:	beq.w	77f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    7698:	add.w	r2, sp, #35	; 0x23
    769c:	add.w	r1, sp, #38	; 0x26
    76a0:	add	r0, sp, #36	; 0x24
    76a2:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    76a4:	ldrh.w	r3, [sp, #36]	; 0x24
    76a8:	strh	r3, [r4, #16]
    76aa:	ldrh.w	r3, [sp, #38]	; 0x26
    76ae:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    76b0:	ldrb.w	r3, [sp, #35]	; 0x23
    76b4:	strb	r3, [r4, #13]
    76b6:	ldr	r3, [sp, #20]
    76b8:	ldr	r2, [sp, #20]
    76ba:	ldrb.w	r3, [r3, #40]	; 0x28
    76be:	orr.w	r3, r3, #1
    76c2:	strb.w	r3, [r2, #40]	; 0x28
  }
    76c6:	b.n	77a0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    76c8:	mov.w	fp, #1
    76cc:	b.n	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    76ce:	ldrb	r2, [r0, #0]
    76d0:	cmp	r2, #229	; 0xe5
    76d2:	beq.n	76d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    76d4:	cbnz	r2, 76f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    76d6:	ldr	r3, [sp, #12]
    76d8:	cmp	r4, #0
    76da:	it	eq
    76dc:	moveq	r3, r6
    76de:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    76e0:	ldr	r3, [sp, #8]
    76e2:	cmp	r4, r3
        freeFound++;
    76e4:	itt	cc
    76e6:	addcc	r4, #1
    76e8:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    76ea:	cmp	r2, #0
    76ec:	beq.n	7610 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    76ee:	cmp	r2, #229	; 0xe5
    76f0:	bne.n	7700 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    76f2:	mov.w	r9, #0
    76f6:	b.n	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    76f8:	ldr	r3, [sp, #8]
    76fa:	cmp	r4, r3
    76fc:	it	cc
    76fe:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    7700:	cmp	r2, #46	; 0x2e
    7702:	beq.n	76f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    7704:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    7706:	cmp	r1, #15
    7708:	bne.n	775e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    770a:	cmp.w	r9, #0
    770e:	bne.n	774a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    7710:	and.w	r8, r2, #31
        if (order != nameOrd ||
    7714:	ldr	r3, [sp, #24]
    7716:	cmp	r3, r8
    7718:	bne.w	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    771c:	ands.w	r9, r2, #64	; 0x40
    7720:	beq.w	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    7724:	ldrb.w	sl, [r0, #13]
    7728:	mov	r9, r3
      if (order == 1) {
    772a:	cmp.w	r8, #1
    772e:	bne.w	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    7732:	adds	r1, r6, #1
    7734:	mov	r3, r9
    7736:	mov	r2, r7
    7738:	mov	r0, r5
    773a:	uxth	r1, r1
    773c:	bl	726a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    7740:	cmp	r0, #0
    7742:	it	eq
    7744:	moveq.w	r9, #0
    7748:	b.n	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    774a:	add.w	r8, r8, #4294967295
    774e:	uxtb.w	r8, r8
    7752:	cmp	r2, r8
    7754:	bne.n	76f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    7756:	ldrb	r2, [r0, #13]
    7758:	cmp	r2, sl
    775a:	beq.n	772a <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    775c:	b.n	76f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    775e:	lsls	r3, r1, #28
    7760:	bmi.n	76f2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    7762:	cmp.w	r9, #0
    7766:	beq.n	777e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    7768:	cmp.w	r8, #1
    776c:	bne.w	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    7770:	bl	724c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    7774:	cmp	r0, sl
    7776:	bne.w	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    777a:	mov	fp, r9
    777c:	b.n	7798 <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    777e:	movs	r2, #11
    7780:	vmov	r1, s16
    7784:	bl	d848 <memcmp>
    7788:	cmp	r0, #0
    778a:	bne.w	75f8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    778e:	ldrb.w	fp, [r7, #21]
    7792:	ands.w	fp, fp, #1
    7796:	bne.n	76c8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    7798:	ldr	r3, [sp, #16]
    779a:	lsls	r1, r3, #20
    779c:	bmi.w	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    77a0:	ldr	r3, [sp, #16]
    77a2:	mov	r2, r6
    77a4:	mov	r1, r5
    77a6:	ldr	r0, [sp, #28]
    77a8:	str.w	fp, [sp]
    77ac:	bl	6622 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    77b0:	b.n	75a4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    77b2:	movs	r1, #0
    77b4:	mov	r0, r5
    77b6:	bl	64f8 <FatFile::readDirCache(bool)>
    if (!dir) {
    77ba:	cbnz	r0, 77e2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    77bc:	ldrb	r3, [r5, #1]
    77be:	cmp	r3, #0
    77c0:	bne.w	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    77c4:	mov	r0, r5
    77c6:	bl	6284 <FatFile::addDirCluster()>
    77ca:	cmp	r0, #0
    77cc:	beq.w	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    77d0:	ldr	r3, [sp, #20]
    77d2:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    77d4:	add.w	r3, r4, r3, lsl #4
    77d8:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    77da:	ldr	r3, [sp, #8]
    77dc:	cmp	r3, r4
    77de:	bhi.n	77c4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    77e0:	b.n	7632 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    77e2:	adds	r4, #1
    77e4:	uxtb	r4, r4
    77e6:	b.n	762a <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    77e8:	mov	r1, r7
    77ea:	mov	r0, r5
    77ec:	bl	74ec <FatFile::makeUniqueSfn(FatLfn_t*)>
    77f0:	cmp	r0, #0
    77f2:	bne.w	763a <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    77f6:	b.n	75a2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    77f8:	movw	r3, #22561	; 0x5821
    77fc:	strh	r3, [r4, #16]
    77fe:	strh	r3, [r4, #24]
    7800:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    7802:	b.n	76b6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    7804:	.word	0x200273fc

00007808 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    7808:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    780a:	mov	r4, r2
    780c:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    780e:	mov	r0, r1
    7810:	ldrb.w	r3, [r1], #1
    7814:	cmp	r3, #32
    7816:	beq.n	780e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    7818:	movs	r5, #0
    781a:	ldr	r7, [pc, #148]	; (78b0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    781c:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    781e:	ldrb	r3, [r0, #0]
    7820:	cbnz	r3, 7870 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    7822:	ldr	r3, [r4, #16]
    7824:	subs	r3, #1
    7826:	cmp	r3, #254	; 0xfe
    7828:	bhi.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    782a:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    782c:	ldrb.w	r3, [r0], #1
    7830:	cmp	r3, #32
    7832:	beq.n	782a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    7834:	cmp	r3, #47	; 0x2f
    7836:	beq.n	782a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    7838:	mov	r0, r4
  *ptr = path;
    783a:	str	r2, [r6, #0]

 fail:
  return false;
}
    783c:	add	sp, #12
    783e:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    7842:	b.w	73c8 <FatFile::makeSFN(FatLfn_t*)>
    7846:	subs	r1, #34	; 0x22
    7848:	uxtb	r1, r1
    784a:	lsr.w	r1, r7, r1
    784e:	lsls	r2, r1, #31
    7850:	bpl.n	78aa <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    7852:	movs	r0, #0
    7854:	add	sp, #12
    7856:	pop	{r4, r5, r6, r7, pc}
    7858:	cmp	r1, #92	; 0x5c
    785a:	beq.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    785c:	bhi.n	786a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    785e:	subs	r1, #62	; 0x3e
    7860:	cmp	r1, #1
    7862:	bls.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    7864:	str	r5, [r4, #16]
      fname->end = path;
    7866:	str	r0, [r4, #8]
    7868:	b.n	781e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    786a:	cmp	r1, #124	; 0x7c
    786c:	beq.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    786e:	b.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    7870:	cmp	r3, #47	; 0x2f
    7872:	beq.n	7822 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    7874:	add	r2, sp, #4
    7876:	adds	r1, r0, #4
    7878:	bl	489c <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    787c:	cmp	r0, #0
    787e:	beq.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    7880:	ldr	r3, [sp, #4]
    7882:	cmp.w	r3, #65536	; 0x10000
    7886:	ite	cc
    7888:	movcc	r2, #1
    788a:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    788c:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    788e:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    7890:	bhi.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    7892:	cmp	r3, #60	; 0x3c
    7894:	uxtb	r1, r3
    7896:	bhi.n	7858 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    7898:	cmp	r1, #33	; 0x21
    789a:	bhi.n	7846 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    789c:	cmp	r1, #31
    789e:	bls.n	7852 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    78a0:	cmp	r3, #46	; 0x2e
    78a2:	beq.n	781e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    78a4:	cmp	r3, #32
    78a6:	beq.n	781e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    78a8:	b.n	7864 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    78aa:	cmp	r3, #46	; 0x2e
    78ac:	b.n	78a6 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    78ae:	nop
    78b0:	.word	0x05002101

000078b4 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    78b4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    78b8:	movs	r3, #0
    78ba:	sub	sp, #40	; 0x28
    78bc:	mov	r4, r0
    78be:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    78c0:	ldrb	r3, [r0, #2]
    78c2:	lsls	r2, r3, #30
    78c4:	bmi.n	78ce <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    78c6:	movs	r0, #0
}
    78c8:	add	sp, #40	; 0x28
    78ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    78ce:	ldr	r1, [r0, #32]
    78d0:	cmp	r1, #0
    78d2:	bne.n	7960 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78d4:	movs	r1, #1
    78d6:	mov	r0, r4
    78d8:	bl	62f4 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    78dc:	mov	r5, r0
    78de:	cmp	r0, #0
    78e0:	beq.n	78c6 <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    78e2:	bl	724c <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    78e6:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    78e8:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    78ea:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    78ec:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    78ee:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    78f0:	ldr	r0, [r4, #8]
  m_flags = 0;
    78f2:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    78f4:	bl	6228 <FatPartition::cacheSync()>
    78f8:	cmp	r0, #0
    78fa:	beq.n	78c6 <FatFile::remove()+0x12>
  if (!isLFN()) {
    78fc:	ldrb	r3, [r4, #3]
    78fe:	cmp	r3, #0
    7900:	beq.n	78c8 <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    7902:	mov	r1, r4
    7904:	add	r0, sp, #4
    7906:	bl	631e <FatFile::openCluster(FatFile*)>
    790a:	cmp	r0, #0
    790c:	beq.n	78c6 <FatFile::remove()+0x12>
    790e:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    7910:	uxtb.w	r8, r5
    7914:	ldrb	r3, [r4, #3]
    7916:	cmp	r3, r8
    7918:	bcc.n	78c6 <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    791a:	ldrh	r1, [r4, #4]
    791c:	add	r0, sp, #4
    791e:	subs	r1, r1, r5
    7920:	uxth	r1, r1
    7922:	bl	6044 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    7926:	cmp	r0, #0
    7928:	beq.n	78c6 <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    792a:	ldrb	r3, [r0, #11]
    792c:	cmp	r3, #15
    792e:	bne.n	78c6 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    7930:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    7932:	and.w	r3, r2, #31
    7936:	cmp	r3, r8
    7938:	bne.n	78c6 <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    793a:	ldrb	r3, [r0, #13]
    793c:	cmp	r3, r6
    793e:	bne.n	78c6 <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    7940:	strb	r7, [r0, #0]
    if (last) {
    7942:	adds	r5, #1
    m_vol->cacheDirty();
    7944:	ldr	r1, [r4, #8]
    if (last) {
    7946:	uxth	r5, r5
    7948:	ldrb.w	r3, [r1, #40]	; 0x28
    794c:	orr.w	r3, r3, #1
    7950:	strb.w	r3, [r1, #40]	; 0x28
    7954:	lsls	r3, r2, #25
    7956:	bpl.n	7910 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    7958:	ldr	r0, [r4, #8]
    795a:	bl	6228 <FatPartition::cacheSync()>
    795e:	b.n	78c8 <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    7960:	ldr	r0, [r0, #8]
    7962:	bl	700a <FatPartition::freeChain(unsigned long)>
    7966:	cmp	r0, #0
    7968:	bne.n	78d4 <FatFile::remove()+0x20>
    796a:	b.n	78c6 <FatFile::remove()+0x12>

0000796c <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    796c:	push	{r4, lr}
    796e:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    7970:	ldr	r0, [r0, #56]	; 0x38
    7972:	cbz	r0, 7980 <FsBaseFile::close()+0x14>
    7974:	bl	6800 <FatFile::close()>
    7978:	cbz	r0, 7980 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    797a:	movs	r3, #0
    797c:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    797e:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    7980:	ldr	r0, [r4, #60]	; 0x3c
    7982:	cbnz	r0, 7988 <FsBaseFile::close()+0x1c>
  return false;
    7984:	movs	r0, #0
    7986:	b.n	797e <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    7988:	bl	4c42 <ExFatFile::close()>
    798c:	cmp	r0, #0
    798e:	beq.n	7984 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    7990:	movs	r3, #0
    7992:	str	r3, [r4, #60]	; 0x3c
    return true;
    7994:	b.n	797e <FsBaseFile::close()+0x12>

00007996 <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    7996:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    7998:	push	{r4, r5, r6, lr}
    799a:	mov	r6, r0
    799c:	mov	r5, r1
  if (this == &from) return *this;
    799e:	beq.n	79c8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    79a0:	bl	796c <FsBaseFile::close()>
  if (from.m_fFile) {
    79a4:	ldr	r4, [r5, #56]	; 0x38
    79a6:	cbz	r4, 79cc <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    79a8:	mov	r1, r6
    79aa:	movs	r0, #36	; 0x24
    79ac:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    79b0:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    79b2:	mov	r4, r0
    79b4:	strh	r3, [r0, #0]
    79b6:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    79b8:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    79ba:	ldr	r5, [r5, #56]	; 0x38
    79bc:	ldmia	r5!, {r0, r1, r2, r3}
    79be:	stmia	r4!, {r0, r1, r2, r3}
    79c0:	ldmia	r5!, {r0, r1, r2, r3}
    79c2:	stmia	r4!, {r0, r1, r2, r3}
    79c4:	ldr	r3, [r5, #0]
    79c6:	str	r3, [r4, #0]
}
    79c8:	mov	r0, r6
    79ca:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    79cc:	ldr	r3, [r5, #60]	; 0x3c
    79ce:	cmp	r3, #0
    79d0:	beq.n	79c8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    79d2:	mov	r1, r6
    79d4:	movs	r0, #56	; 0x38
    79d6:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    79da:	strb.w	r4, [r0, #49]	; 0x31
    79de:	strh	r4, [r0, #50]	; 0x32
    79e0:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    79e2:	ldr	r3, [r5, #60]	; 0x3c
    79e4:	add.w	r2, r3, #52	; 0x34
    79e8:	ldr.w	r1, [r3], #4
    79ec:	cmp	r3, r2
    79ee:	str.w	r1, [r0], #4
    79f2:	bne.n	79e8 <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    79f4:	b.n	79c8 <FsBaseFile::operator=(FsBaseFile const&)+0x32>

000079f6 <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    79f6:	push	{r0, r1, r4, r5, r6, lr}
    79f8:	mov	r4, r0
  if (!vol) {
    79fa:	mov	r5, r1
    79fc:	cbnz	r1, 7a04 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    79fe:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7a00:	add	sp, #8
    7a02:	pop	{r4, r5, r6, pc}
    7a04:	strd	r2, r3, [sp]
  close();
    7a08:	bl	796c <FsBaseFile::close()>
  if (vol->m_fVol) {
    7a0c:	ldr.w	r6, [r5, #1152]	; 0x480
    7a10:	ldrd	r2, r3, [sp]
    7a14:	cbz	r6, 7a3c <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    7a16:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    7a18:	mov	r1, r4
    7a1a:	movs	r0, #36	; 0x24
    7a1c:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
    7a20:	strh	r6, [r0, #0]
    7a22:	strb	r6, [r0, #2]
    7a24:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    7a26:	ldr.w	r1, [r5, #1152]	; 0x480
    7a2a:	ldrd	r2, r3, [sp]
    7a2e:	bl	68ae <FatFile::open(FatVolume*, char const*, int)>
    7a32:	cbz	r0, 7a38 <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    7a34:	movs	r0, #1
    7a36:	b.n	7a00 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    7a38:	str	r0, [r4, #56]	; 0x38
    7a3a:	b.n	7a00 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    7a3c:	ldr.w	r1, [r5, #1156]	; 0x484
    7a40:	strd	r2, r3, [sp]
    7a44:	cmp	r1, #0
    7a46:	beq.n	79fe <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    7a48:	mov	r1, r4
    7a4a:	movs	r0, #56	; 0x38
    7a4c:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
    7a50:	strb.w	r6, [r0, #49]	; 0x31
    7a54:	strh	r6, [r0, #50]	; 0x32
    7a56:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    7a58:	ldr.w	r1, [r5, #1156]	; 0x484
    7a5c:	ldrd	r2, r3, [sp]
    7a60:	bl	53a2 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7a64:	cmp	r0, #0
    7a66:	bne.n	7a34 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    7a68:	str	r0, [r4, #60]	; 0x3c
    7a6a:	b.n	7a00 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00007a6c <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    7a6c:	push	{r0, r1, r4, r5, r6, lr}
    7a6e:	mov	r5, r1
    7a70:	str	r2, [sp, #4]
    7a72:	mov	r4, r0
  close();
    7a74:	bl	796c <FsBaseFile::close()>
  if (dir->m_fFile) {
    7a78:	ldr	r6, [r5, #56]	; 0x38
    7a7a:	ldr	r2, [sp, #4]
    7a7c:	cbz	r6, 7aa2 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    7a7e:	mov	r1, r4
    7a80:	movs	r0, #36	; 0x24
    7a82:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
    7a86:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7a88:	ldr	r2, [sp, #4]
    7a8a:	strh	r1, [r0, #0]
    7a8c:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    7a8e:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    7a90:	ldr	r1, [r5, #56]	; 0x38
    7a92:	bl	66e4 <FatFile::openNext(FatFile*, int)>
    7a96:	cbz	r0, 7a9e <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    7a98:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    7a9a:	add	sp, #8
    7a9c:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    7a9e:	str	r0, [r4, #56]	; 0x38
    7aa0:	b.n	7a9a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    7aa2:	ldr	r0, [r5, #60]	; 0x3c
    7aa4:	str	r2, [sp, #4]
    7aa6:	cmp	r0, #0
    7aa8:	beq.n	7a9a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    7aaa:	mov	r1, r4
    7aac:	movs	r0, #56	; 0x38
    7aae:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7ab2:	ldr	r2, [sp, #4]
    7ab4:	strb.w	r6, [r0, #49]	; 0x31
    7ab8:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    7aba:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    7abc:	ldr	r1, [r5, #60]	; 0x3c
    7abe:	bl	53b0 <ExFatFile::openNext(ExFatFile*, int)>
    7ac2:	cmp	r0, #0
    7ac4:	bne.n	7a98 <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    7ac6:	str	r0, [r4, #60]	; 0x3c
    7ac8:	b.n	7a9a <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

00007acc <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7acc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    7ad0:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7ad2:	mov	r4, r0
    7ad4:	mov	r6, r3
  m_blockDev = blockDev;
    7ad6:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    7ada:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    7ade:	mov	r1, r0
    7ae0:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    7ae4:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    7ae6:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    7aea:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    7aec:	strb.w	r7, [r0, #1092]	; 0x444
    7af0:	mov	r5, r0
    7af2:	strb.w	r7, [r0, #1145]	; 0x479
    7af6:	strh.w	r7, [r0, #1146]	; 0x47a
    7afa:	str.w	r0, [r4, #1156]	; 0x484
    7afe:	ldr.w	r1, [r4, #1160]	; 0x488
    7b02:	ldr.w	r8, [pc, #152]	; 7b9c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    7b06:	bl	56f4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7b0a:	cbz	r0, 7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7b0c:	add.w	r7, r5, #1096	; 0x448
    7b10:	mov	r0, r7
    7b12:	bl	4c42 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7b16:	mov	r1, r5
    7b18:	mov	r0, r7
    7b1a:	bl	4c56 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    7b1e:	cbz	r0, 7b3c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    7b20:	ldr	r3, [pc, #112]	; (7b94 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    7b22:	ldr	r2, [r3, #0]
    7b24:	cbnz	r2, 7b28 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    7b26:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    7b28:	cmp.w	r9, #0
    7b2c:	bne.n	7b34 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    7b2e:	ldr.w	r3, [r8]
    7b32:	cbnz	r3, 7b38 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    7b34:	str.w	r4, [r8]
  }
  return true;
    7b38:	movs	r0, #1
    7b3a:	b.n	7b8e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    7b3c:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    7b3e:	mov	r1, r4
    7b40:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    7b44:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    7b48:	bl	7bc8 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    7b4c:	movs	r3, #2
    7b4e:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    7b50:	mov	r2, r6
    7b52:	strb	r3, [r0, #8]
    7b54:	mov	r5, r0
    7b56:	strh.w	r7, [r0, #1096]	; 0x448
    7b5a:	strb.w	r7, [r0, #1098]	; 0x44a
    7b5e:	str.w	r0, [r4, #1152]	; 0x480
    7b62:	ldr.w	r1, [r4, #1160]	; 0x488
    7b66:	bl	70f8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    7b6a:	cbz	r0, 7b84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7b6c:	add.w	r6, r5, #1096	; 0x448
    7b70:	mov	r0, r6
    7b72:	bl	6800 <FatFile::close()>
    return m_vwd.openRoot(this);
    7b76:	mov	r1, r5
    7b78:	mov	r0, r6
    7b7a:	bl	6312 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    7b7e:	cbz	r0, 7b84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    7b80:	ldr	r3, [pc, #20]	; (7b98 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    7b82:	b.n	7b22 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    7b84:	movs	r0, #0
    7b86:	str.w	r0, [r8]
  m_fVol = nullptr;
    7b8a:	str.w	r0, [r4, #1152]	; 0x480
}
    7b8e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b92:	nop
    7b94:	.word	0x20027400
    7b98:	.word	0x20027438
    7b9c:	.word	0x20027434

00007ba0 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    7ba0:	push	{r3, r4, r5, lr}
    7ba2:	mov	r4, r0
    7ba4:	mov.w	r5, #1000	; 0x3e8
    7ba8:	movs	r0, #0
    7baa:	strd	r0, r5, [r4, #4]
    7bae:	strb	r0, [r4, #12]
    7bb0:	ldr	r5, [pc, #16]	; (7bc4 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    7bb2:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    7bb6:	mov	r0, r4
    7bb8:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    7bbc:	bl	79f6 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    7bc0:	mov	r0, r4
    7bc2:	pop	{r3, r4, r5, pc}
    7bc4:	.word	0x20000548

00007bc8 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    7bc8:	mov	r0, r1
    7bca:	bx	lr

00007bcc <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    7bcc:	mov.w	r0, #4294967295
    7bd0:	bx	lr

00007bd2 <SharedSpiCard::errorCode() const>:
  }
    7bd2:	ldrb	r0, [r0, #17]
    7bd4:	bx	lr

00007bd6 <SharedSpiCard::errorData() const>:
  }
    7bd6:	ldrb	r0, [r0, #20]
    7bd8:	bx	lr

00007bda <SharedSpiCard::type() const>:
  }
    7bda:	ldrb	r0, [r0, #21]
    7bdc:	bx	lr

00007bde <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    7bde:	movs	r0, #1
    7be0:	bx	lr

00007be2 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    7be2:	ldrb	r0, [r0, #28]
    7be4:	bx	lr

00007be6 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    7be6:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    7be8:	push	{r4}
  return readSectors(sector, dst, 1);
    7bea:	ldr	r4, [r3, #20]
    7bec:	movs	r3, #1
    7bee:	mov	ip, r4
}
    7bf0:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    7bf4:	bx	ip

00007bf6 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7bf6:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    7bf8:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    7bfa:	mov	r4, r0
    7bfc:	mov	r5, r1
  if (!syncDevice()) {
    7bfe:	ldr	r3, [r3, #32]
    7c00:	blx	r3
    7c02:	cbz	r0, 7c06 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    7c04:	strb	r5, [r4, #28]
  return true;
}
    7c06:	pop	{r3, r4, r5, pc}

00007c08 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c0c:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c0e:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c10:	mov	r4, r0
    7c12:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c14:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    7c16:	mov	r6, r2
    7c18:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7c1c:	bne.n	7c24 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    7c1e:	ldr	r3, [r0, #24]
    7c20:	cmp	r3, r1
    7c22:	beq.n	7c38 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    7c24:	ldr	r3, [r4, #0]
    7c26:	mov	r1, r5
    7c28:	mov	r0, r4
    7c2a:	ldr	r3, [r3, #96]	; 0x60
    7c2c:	blx	r3
    7c2e:	cbnz	r0, 7c36 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    7c30:	movs	r0, #0
}
    7c32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    7c36:	str	r5, [r4, #24]
    7c38:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    7c3c:	cmp	r5, r8
    7c3e:	bne.n	7c58 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    7c40:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7c42:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    7c44:	add	r3, r6
    7c46:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7c48:	cmp	r0, #0
    7c4a:	bne.n	7c32 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    7c4c:	ldr	r3, [r4, #0]
    7c4e:	mov	r0, r4
    7c50:	ldr	r3, [r3, #100]	; 0x64
}
    7c52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    7c56:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    7c58:	mov	r1, r9
    7c5a:	mov	r0, r5
    7c5c:	blx	r7
    if (!writeData(src)) {
    7c5e:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    7c60:	mov	r1, r0
    if (!writeData(src)) {
    7c62:	mov	r0, r4
    7c64:	ldr	r3, [r3, #92]	; 0x5c
    7c66:	adds	r5, #1
    7c68:	blx	r3
    7c6a:	cmp	r0, #0
    7c6c:	bne.n	7c3c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    7c6e:	b.n	7c30 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00007c70 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7c70:	bx	lr

00007c72 <SharedSpiCard::end()>:
    m_spiDriver.end();
    7c72:	adds	r0, #4
    7c74:	b.w	93ac <SdSpiArduinoDriver::end()>

00007c78 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    7c78:	push	{r4, lr}
    7c7a:	mov	r4, r0
    7c7c:	movs	r1, #32
    7c7e:	bl	b794 <operator delete(void*, unsigned int)>
    7c82:	mov	r0, r4
    7c84:	pop	{r4, pc}

00007c86 <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    7c86:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7c88:	ldr	r3, [r0, #0]
    7c8a:	mov	r1, sp
    7c8c:	ldr	r3, [r3, #76]	; 0x4c
    7c8e:	blx	r3
    7c90:	cbz	r0, 7cd8 <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7c92:	ldrb.w	r3, [sp]
    7c96:	ands.w	r3, r3, #192	; 0xc0
    7c9a:	bne.n	7cde <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7c9c:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7ca0:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    7ca4:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7ca8:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    7cac:	lsls	r0, r0, #2
    7cae:	orr.w	r0, r0, r3, lsl #10
    7cb2:	ldrb.w	r3, [sp, #8]
    7cb6:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7cba:	ldrb.w	r3, [sp, #9]
    7cbe:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cc2:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    7cc4:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cc6:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    7cca:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7cce:	and.w	r2, r2, #15
    7cd2:	add	r3, r2
    7cd4:	subs	r3, #7
    7cd6:	lsls	r0, r3
}
    7cd8:	add	sp, #20
    7cda:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    7cde:	cmp	r3, #64	; 0x40
    7ce0:	bne.n	7d00 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7ce2:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7ce6:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7cea:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7cec:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7cf0:	add.w	r0, r0, r3, lsl #16
    7cf4:	ldrb.w	r3, [sp, #8]
    7cf8:	add.w	r0, r0, r3, lsl #8
    7cfc:	lsls	r0, r0, #10
    7cfe:	b.n	7cd8 <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    7d00:	movs	r0, #0
    7d02:	b.n	7cd8 <SharedSpiCard::sectorCount()+0x52>

00007d04 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d08:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d0a:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d0c:	mov	r4, r0
    7d0e:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d10:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d12:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    7d14:	bne.n	7d1c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    7d16:	ldr	r3, [r0, #24]
    7d18:	cmp	r3, r1
    7d1a:	beq.n	7d30 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    7d1c:	ldr	r3, [r4, #0]
    7d1e:	mov	r1, r5
    7d20:	mov	r0, r4
    7d22:	ldr	r3, [r3, #96]	; 0x60
    7d24:	blx	r3
    7d26:	cbnz	r0, 7d2e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    7d28:	movs	r0, #0
}
    7d2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    7d2e:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    7d30:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d32:	cmp	r6, r5
    7d34:	add.w	r1, r7, r5, lsl #9
    7d38:	bne.n	7d52 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    7d3a:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d3c:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    7d3e:	add	r3, r6
    7d40:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    7d42:	cmp	r0, #0
    7d44:	bne.n	7d2a <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    7d46:	ldr	r3, [r4, #0]
    7d48:	mov	r0, r4
    7d4a:	ldr	r3, [r3, #100]	; 0x64
}
    7d4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    7d50:	bx	r3
    if (!writeData(src)) {
    7d52:	ldr	r3, [r4, #0]
    7d54:	mov	r0, r4
    7d56:	ldr	r3, [r3, #92]	; 0x5c
    7d58:	blx	r3
    7d5a:	cmp	r0, #0
    7d5c:	beq.n	7d28 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    7d5e:	adds	r5, #1
    7d60:	b.n	7d32 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00007d62 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    7d62:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    7d64:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    7d66:	mov	r4, r0
  if (!m_spiActive) {
    7d68:	cbnz	r6, 7d86 <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    7d6a:	adds	r5, r0, #4
    7d6c:	mov	r0, r5
    7d6e:	bl	9350 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    7d72:	mov	r1, r6
    7d74:	ldrb	r0, [r4, #16]
    7d76:	bl	9426 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d7a:	movs	r1, #255	; 0xff
    7d7c:	mov	r0, r5
    7d7e:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    7d82:	movs	r3, #1
    7d84:	strb	r3, [r4, #18]
}
    7d86:	pop	{r4, r5, r6, pc}

00007d88 <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    7d88:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    7d8a:	push	{r0, r1, r4, lr}
    7d8c:	mov	r4, r0
  if (m_spiActive) {
    7d8e:	cbz	r3, 7dac <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    7d90:	movs	r1, #1
    7d92:	ldrb	r0, [r0, #16]
    7d94:	bl	9426 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    7d98:	adds	r0, r4, #4
    7d9a:	movs	r1, #255	; 0xff
    7d9c:	str	r0, [sp, #4]
    7d9e:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    7da2:	ldr	r0, [sp, #4]
    7da4:	bl	935e <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    7da8:	movs	r3, #0
    7daa:	strb	r3, [r4, #18]
}
    7dac:	add	sp, #8
    7dae:	pop	{r4, pc}

00007db0 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    7db0:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    7db2:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    7db4:	mov	r4, r0
  if (m_state == READ_STATE) {
    7db6:	cmp	r3, #1
    7db8:	beq.n	7ddc <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    7dba:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    7dbc:	cbnz	r6, 7dc2 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    7dbe:	bl	7d62 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    7dc2:	adds	r0, r4, #4
    7dc4:	bl	93b2 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    7dc8:	subs.w	r5, r0, #255	; 0xff
    7dcc:	it	ne
    7dce:	movne	r5, #1
  if (!spiActive) {
    7dd0:	cbnz	r6, 7dd8 <SharedSpiCard::isBusy()+0x28>
    spiStop();
    7dd2:	mov	r0, r4
    7dd4:	bl	7d88 <SharedSpiCard::spiStop()>
}
    7dd8:	mov	r0, r5
    7dda:	pop	{r4, r5, r6, pc}
    return false;
    7ddc:	movs	r5, #0
    7dde:	b.n	7dd8 <SharedSpiCard::isBusy()+0x28>

00007de0 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    7de0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7de2:	ldr	r7, [pc, #96]	; (7e44 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    7de4:	mov	r4, r0
    7de6:	adds	r6, r0, #4
    7de8:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    7dea:	add.w	r5, r5, #300	; 0x12c
    7dee:	uxth	r5, r5
    7df0:	mov	r0, r6
    7df2:	strd	r1, r2, [sp]
    7df6:	bl	93b2 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    7dfa:	cmp	r0, #255	; 0xff
    7dfc:	strb	r0, [r4, #20]
    7dfe:	ldrd	r1, r2, [sp]
    7e02:	beq.n	7e24 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    7e04:	cmp	r0, #254	; 0xfe
    7e06:	bne.n	7e3a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    7e08:	mov	r0, r6
    7e0a:	bl	93bc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    7e0e:	strb	r0, [r4, #20]
    7e10:	cbnz	r0, 7e3e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    7e12:	mov	r0, r6
    7e14:	bl	93b2 <SdSpiArduinoDriver::receive()>
    7e18:	mov	r0, r6
    7e1a:	bl	93b2 <SdSpiArduinoDriver::receive()>
  return true;
    7e1e:	movs	r0, #1
}
    7e20:	add	sp, #12
    7e22:	pop	{r4, r5, r6, r7, pc}
    7e24:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    7e26:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    7e28:	lsls	r3, r3, #16
    7e2a:	bpl.n	7df0 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    7e2c:	movs	r3, #29
  spiStop();
    7e2e:	mov	r0, r4
    m_errorCode = code;
    7e30:	strb	r3, [r4, #17]
    7e32:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    7e36:	movs	r0, #0
    7e38:	b.n	7e20 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    7e3a:	movs	r3, #24
    7e3c:	b.n	7e2e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    7e3e:	movs	r3, #37	; 0x25
    7e40:	b.n	7e2e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    7e42:	nop
    7e44:	.word	0x20028140

00007e48 <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    7e48:	mov.w	r2, #512	; 0x200
    7e4c:	b.w	7de0 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00007e50 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    7e50:	push	{r4, r5, r6, lr}
    7e52:	ldr	r6, [pc, #36]	; (7e78 <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    7e54:	adds	r5, r0, #4
    7e56:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    7e58:	add	r1, r3
    7e5a:	uxth	r4, r1
    7e5c:	mov	r0, r5
    7e5e:	bl	93b2 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    7e62:	cmp	r0, #255	; 0xff
    7e64:	bne.n	7e6a <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    7e66:	movs	r0, #1
}
    7e68:	pop	{r4, r5, r6, pc}
    7e6a:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    7e6c:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    7e6e:	lsls	r3, r3, #16
    7e70:	bpl.n	7e5c <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    7e72:	movs	r0, #0
    7e74:	b.n	7e68 <SharedSpiCard::waitReady(unsigned short)+0x18>
    7e76:	nop
    7e78:	.word	0x20028140

00007e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    7e7c:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e7e:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    7e82:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    7e84:	mov	r4, r0
    7e86:	str	r2, [sp, #4]
    7e88:	mov	r5, r1
  if (!syncDevice()) {
    7e8a:	blx	r3
    7e8c:	cmp	r0, #0
    7e8e:	beq.n	7f02 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    7e90:	ldrb	r3, [r4, #18]
    7e92:	cbnz	r3, 7e9a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    7e94:	mov	r0, r4
    7e96:	bl	7d62 <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    7e9a:	cmp	r5, #12
    7e9c:	bne.n	7ef0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    7e9e:	adds	r6, r4, #4
    7ea0:	movs	r7, #3
    spiSend(pa[i]);
    7ea2:	add.w	r8, sp, #4
    7ea6:	orr.w	r1, r5, #64	; 0x40
    7eaa:	mov	r0, r6
    7eac:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    7eb0:	ldrb.w	r1, [r8, r7]
    7eb4:	mov	r0, r6
    7eb6:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    7eba:	subs	r7, #1
    7ebc:	bcs.n	7eb0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    7ebe:	cmp	r5, #0
    7ec0:	mov	r0, r6
    return m_spiDriver.receive();
    7ec2:	mov.w	r5, #10
    m_spiDriver.send(data);
    7ec6:	ite	eq
    7ec8:	moveq	r1, #149	; 0x95
    7eca:	movne	r1, #135	; 0x87
    7ecc:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    7ed0:	mov	r0, r6
    7ed2:	bl	93b2 <SdSpiArduinoDriver::receive()>
    7ed6:	mov	r0, r6
    7ed8:	bl	93b2 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    7edc:	lsls	r3, r0, #24
    m_status = spiReceive();
    7ede:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    7ee0:	bpl.n	7eea <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    7ee2:	subs	r5, #1
    7ee4:	uxth	r5, r5
    7ee6:	cmp	r5, #0
    7ee8:	bne.n	7ed6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    7eea:	add	sp, #8
    7eec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    7ef0:	mov.w	r1, #300	; 0x12c
    7ef4:	mov	r0, r4
    7ef6:	bl	7e50 <SharedSpiCard::waitReady(unsigned short)>
    7efa:	cmp	r0, #0
    7efc:	bne.n	7e9e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    7efe:	cmp	r5, #0
    7f00:	beq.n	7e9e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    7f02:	movs	r0, #255	; 0xff
    7f04:	b.n	7eea <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00007f06 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f06:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    7f08:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f0a:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    7f0c:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    7f0e:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    7f10:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f14:	cbz	r0, 7f24 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    7f16:	movs	r3, #18
  spiStop();
    7f18:	mov	r0, r4
    7f1a:	strb	r3, [r4, #17]
    7f1c:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    7f20:	movs	r0, #0
}
    7f22:	pop	{r3, r4, r5, r6, r7, pc}
    7f24:	adds	r6, r5, #4
    return m_spiDriver.receive();
    7f26:	adds	r7, r4, #4
    7f28:	mov	r0, r7
    7f2a:	bl	93b2 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    7f2e:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    7f32:	cmp	r6, r5
    7f34:	bne.n	7f28 <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    7f36:	mov	r0, r4
    7f38:	bl	7d88 <SharedSpiCard::spiStop()>
    7f3c:	movs	r0, #1
    7f3e:	b.n	7f22 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00007f40 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f40:	push	{r3, r4, r5, lr}
    7f42:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    7f44:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    7f46:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    7f48:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7f4c:	cbz	r0, 7f5c <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    7f4e:	movs	r3, #27
    7f50:	strb	r3, [r4, #17]
  spiStop();
    7f52:	mov	r0, r4
  return false;
    7f54:	movs	r5, #0
  spiStop();
    7f56:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    7f5a:	b.n	7f72 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    7f5c:	mov	r1, r5
    7f5e:	movs	r2, #16
    7f60:	mov	r0, r4
    7f62:	bl	7de0 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    7f66:	mov	r5, r0
    7f68:	cmp	r0, #0
    7f6a:	beq.n	7f52 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    7f6c:	mov	r0, r4
    7f6e:	bl	7d88 <SharedSpiCard::spiStop()>
}
    7f72:	mov	r0, r5
    7f74:	pop	{r3, r4, r5, pc}

00007f76 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    7f76:	mov	r2, r1
    return readRegister(CMD9, csd);
    7f78:	movs	r1, #9
    7f7a:	b.w	7f40 <SharedSpiCard::readRegister(unsigned char, void*)>

00007f7e <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    7f7e:	mov	r2, r1
    return readRegister(CMD10, cid);
    7f80:	movs	r1, #10
    7f82:	b.w	7f40 <SharedSpiCard::readRegister(unsigned char, void*)>

00007f86 <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    7f86:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    7f88:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    7f8a:	mov	r5, r1
    7f8c:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    7f8e:	ldr	r3, [r3, #88]	; 0x58
    7f90:	blx	r3
    7f92:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    7f94:	mov.w	r1, #18
    7f98:	mov	r0, r4
    sector <<= 9;
    7f9a:	it	ne
    7f9c:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    7f9e:	mov	r2, r5
    7fa0:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fa4:	cbz	r0, 7fb4 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    7fa6:	movs	r3, #12
  spiStop();
    7fa8:	mov	r0, r4
    7faa:	strb	r3, [r4, #17]
    7fac:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    7fb0:	movs	r0, #0
}
    7fb2:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    7fb4:	movs	r0, #1
    7fb6:	strb	r0, [r4, #19]
  return true;
    7fb8:	b.n	7fb2 <SharedSpiCard::readStart(unsigned long)+0x2c>

00007fba <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    7fba:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    7fbc:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    7fbe:	movs	r1, #12
bool SharedSpiCard::readStop() {
    7fc0:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    7fc2:	mov	r2, r4
  m_state = IDLE_STATE;
    7fc4:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    7fc6:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    7fca:	cbz	r0, 7fda <SharedSpiCard::readStop()+0x20>
    7fcc:	movs	r3, #9
  spiStop();
    7fce:	mov	r0, r5
    7fd0:	strb	r3, [r5, #17]
    7fd2:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    7fd6:	mov	r0, r4
}
    7fd8:	pop	{r3, r4, r5, pc}
  spiStop();
    7fda:	mov	r0, r5
    7fdc:	bl	7d88 <SharedSpiCard::spiStop()>
  return true;
    7fe0:	movs	r0, #1
    7fe2:	b.n	7fd8 <SharedSpiCard::readStop()+0x1e>

00007fe4 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    7fe4:	ldrb	r2, [r0, #19]
    7fe6:	cmp	r2, #2
    7fe8:	bne.n	7ff0 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    7fea:	ldr	r3, [r0, #0]
    7fec:	ldr	r3, [r3, #100]	; 0x64
    7fee:	bx	r3
  if (m_state == READ_STATE) {
    7ff0:	cmp	r2, #1
    7ff2:	bne.n	7ff8 <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    7ff4:	b.w	7fba <SharedSpiCard::readStop()>
}
    7ff8:	movs	r0, #1
    7ffa:	bx	lr

00007ffc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    7ffc:	push	{r3, r4, r5, r6, r7, lr}
    7ffe:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8000:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8002:	mov	r4, r0
    8004:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8006:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8008:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    800a:	bne.n	8012 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    800c:	ldr	r3, [r0, #24]
    800e:	cmp	r3, r1
    8010:	beq.n	8022 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8012:	mov	r1, r5
    8014:	mov	r0, r4
    8016:	bl	7f86 <SharedSpiCard::readStart(unsigned long)>
    801a:	cbnz	r0, 8020 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    801c:	movs	r0, #0
}
    801e:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8020:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8022:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8024:	cmp	r5, r6
    8026:	add.w	r1, r7, r5, lsl #9
    802a:	bne.n	8042 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    802c:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    802e:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8030:	add	r3, r5
    8032:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8034:	cmp	r0, #0
    8036:	bne.n	801e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8038:	mov	r0, r4
}
    803a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    803e:	b.w	7fba <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8042:	mov	r0, r4
    8044:	bl	7e48 <SharedSpiCard::readData(unsigned char*)>
    8048:	cmp	r0, #0
    804a:	beq.n	801c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    804c:	adds	r5, #1
    804e:	b.n	8024 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008050 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8050:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8054:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8056:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8058:	mov	r4, r0
    805a:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    805c:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    805e:	mov	r7, r2
    8060:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8064:	bne.n	806c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8066:	ldr	r3, [r0, #24]
    8068:	cmp	r3, r1
    806a:	beq.n	807e <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    806c:	mov	r1, r5
    806e:	mov	r0, r4
    8070:	bl	7f86 <SharedSpiCard::readStart(unsigned long)>
    8074:	cbnz	r0, 807c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8076:	movs	r0, #0
}
    8078:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    807c:	str	r5, [r4, #24]
    807e:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8082:	cmp	r5, r8
    8084:	bne.n	809c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8086:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8088:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    808a:	add	r3, r6
    808c:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    808e:	cmp	r0, #0
    8090:	bne.n	8078 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8092:	mov	r0, r4
}
    8094:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8098:	b.w	7fba <SharedSpiCard::readStop()>
    if (readData(dst)) {
    809c:	mov	r1, r7
    809e:	mov	r0, r4
    80a0:	bl	7e48 <SharedSpiCard::readData(unsigned char*)>
    80a4:	cmp	r0, #0
    80a6:	beq.n	8076 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    80a8:	mov	r0, r5
    80aa:	mov	r2, sl
    80ac:	mov	r1, r7
    80ae:	adds	r5, #1
    80b0:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    80b2:	b.n	8082 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

000080b4 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    80b4:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    80b6:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    80b8:	mov	r5, r1
    80ba:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    80bc:	ldr	r3, [r3, #88]	; 0x58
    80be:	blx	r3
    80c0:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    80c2:	mov.w	r1, #25
    80c6:	mov	r0, r4
    sector <<= 9;
    80c8:	it	ne
    80ca:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    80cc:	mov	r2, r5
    80ce:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    80d2:	cbz	r0, 80e2 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    80d4:	movs	r3, #14
  spiStop();
    80d6:	mov	r0, r4
    80d8:	strb	r3, [r4, #17]
    80da:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    80de:	movs	r0, #0
}
    80e0:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    80e2:	movs	r3, #2
  return true;
    80e4:	movs	r0, #1
  m_state = WRITE_STATE;
    80e6:	strb	r3, [r4, #19]
  return true;
    80e8:	b.n	80e0 <SharedSpiCard::writeStart(unsigned long)+0x2c>

000080ea <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80ea:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    80ec:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80ee:	mov	r6, r1
  if (!readCSD(&csd)) {
    80f0:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80f2:	mov	r4, r0
  if (!readCSD(&csd)) {
    80f4:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    80f6:	mov	r5, r2
  if (!readCSD(&csd)) {
    80f8:	blx	r3
    80fa:	cbz	r0, 811e <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    80fc:	ldrb.w	r3, [sp, #10]
    8100:	lsls	r2, r3, #25
    8102:	bmi.n	8128 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8104:	and.w	r3, r3, #63	; 0x3f
    8108:	ldrb.w	r2, [sp, #11]
    810c:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    810e:	orr.w	r3, r3, r2, lsr #7
    8112:	adds	r2, r5, #1
    8114:	orrs	r2, r6
    8116:	tst	r3, r2
    8118:	beq.n	8128 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    811a:	movs	r3, #39	; 0x27
    811c:	strb	r3, [r4, #17]
  spiStop();
    811e:	mov	r0, r4
  return false;
    8120:	movs	r5, #0
  spiStop();
    8122:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    8126:	b.n	8176 <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8128:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    812a:	movs	r1, #32
    812c:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    812e:	cmp	r3, #3
    firstSector <<= 9;
    8130:	itt	ne
    8132:	lslne	r6, r6, #9
    lastSector <<= 9;
    8134:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8136:	mov	r2, r6
    8138:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    813c:	cbz	r0, 8142 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    813e:	movs	r3, #38	; 0x26
    8140:	b.n	811c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8142:	mov	r2, r5
    8144:	movs	r1, #33	; 0x21
    8146:	mov	r0, r4
    8148:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    814c:	mov	r2, r0
    814e:	cmp	r0, #0
    8150:	bne.n	813e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8152:	movs	r1, #38	; 0x26
    8154:	mov	r0, r4
    8156:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    815a:	cmp	r0, #0
    815c:	bne.n	813e <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    815e:	movw	r1, #10000	; 0x2710
    8162:	mov	r0, r4
    8164:	bl	7e50 <SharedSpiCard::waitReady(unsigned short)>
    8168:	mov	r5, r0
    816a:	cbnz	r0, 8170 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    816c:	movs	r3, #40	; 0x28
    816e:	b.n	811c <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8170:	mov	r0, r4
    8172:	bl	7d88 <SharedSpiCard::spiStop()>
}
    8176:	mov	r0, r5
    8178:	add	sp, #16
    817a:	pop	{r4, r5, r6, pc}

0000817c <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    817c:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    817e:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8182:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8184:	bl	7e50 <SharedSpiCard::waitReady(unsigned short)>
    8188:	mov	r5, r0
    818a:	cbnz	r0, 819a <SharedSpiCard::writeStop()+0x1e>
    818c:	movs	r3, #30
  spiStop();
    818e:	mov	r0, r4
    8190:	strb	r3, [r4, #17]
    8192:	bl	7d88 <SharedSpiCard::spiStop()>
}
    8196:	mov	r0, r5
    8198:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    819a:	movs	r1, #253	; 0xfd
    819c:	adds	r0, r4, #4
    819e:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    81a2:	mov	r0, r4
    81a4:	bl	7d88 <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    81a8:	movs	r3, #0
    81aa:	strb	r3, [r4, #19]
  return true;
    81ac:	b.n	8196 <SharedSpiCard::writeStop()+0x1a>

000081ae <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    81ae:	push	{r0, r1, r2, r4, r5, lr}
    81b0:	mov	r5, r2
    81b2:	mov	r4, r0
    81b4:	adds	r0, #4
    81b6:	str	r0, [sp, #4]
    81b8:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    81bc:	mov.w	r2, #512	; 0x200
    81c0:	mov	r1, r5
    81c2:	ldr	r0, [sp, #4]
    81c4:	bl	93e6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    81c8:	movs	r1, #255	; 0xff
    81ca:	ldr	r0, [sp, #4]
    81cc:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    81d0:	movs	r1, #255	; 0xff
    81d2:	ldr	r0, [sp, #4]
    81d4:	bl	93de <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    81d8:	ldr	r0, [sp, #4]
    81da:	bl	93b2 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    81de:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    81e0:	and.w	r0, r0, #31
    81e4:	cmp	r0, #5
    81e6:	beq.n	81f8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    81e8:	movs	r3, #32
  spiStop();
    81ea:	mov	r0, r4
    81ec:	strb	r3, [r4, #17]
    81ee:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    81f2:	movs	r0, #0
}
    81f4:	add	sp, #12
    81f6:	pop	{r4, r5, pc}
  return true;
    81f8:	movs	r0, #1
    81fa:	b.n	81f4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

000081fc <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    81fc:	push	{r0, r1, r4, lr}
    81fe:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8200:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8204:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8206:	bl	7e50 <SharedSpiCard::waitReady(unsigned short)>
    820a:	ldr	r2, [sp, #4]
    820c:	cbnz	r0, 821c <SharedSpiCard::writeData(unsigned char const*)+0x20>
    820e:	movs	r3, #36	; 0x24
    8210:	strb	r3, [r4, #17]
  spiStop();
    8212:	mov	r0, r4
    8214:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    8218:	movs	r0, #0
    821a:	b.n	8228 <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    821c:	movs	r1, #252	; 0xfc
    821e:	mov	r0, r4
    8220:	bl	81ae <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8224:	cmp	r0, #0
    8226:	beq.n	8212 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    8228:	add	sp, #8
    822a:	pop	{r4, pc}

0000822c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    822c:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    822e:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8230:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8232:	mov	r5, r1
    8234:	mov	r4, r0
    8236:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    8238:	blx	r3
    823a:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    823c:	mov.w	r1, #24
    8240:	mov	r0, r4
    sector <<= 9;
    8242:	it	ne
    8244:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    8246:	mov	r2, r5
    8248:	bl	7e7c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    824c:	cbz	r0, 825c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    824e:	movs	r3, #13
    8250:	strb	r3, [r4, #17]
  spiStop();
    8252:	mov	r0, r4
  return false;
    8254:	movs	r5, #0
  spiStop();
    8256:	bl	7d88 <SharedSpiCard::spiStop()>
  return false;
    825a:	b.n	8272 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    825c:	mov	r2, r6
    825e:	movs	r1, #254	; 0xfe
    8260:	mov	r0, r4
    8262:	bl	81ae <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    8266:	mov	r5, r0
    8268:	cmp	r0, #0
    826a:	beq.n	8252 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    826c:	mov	r0, r4
    826e:	bl	7d88 <SharedSpiCard::spiStop()>
}
    8272:	mov	r0, r5
    8274:	pop	{r4, r5, r6, pc}

00008276 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    8276:	push	{r4}
  if (m_dedicatedSpi) {
    8278:	ldrb	r4, [r0, #28]
    827a:	cbz	r4, 828a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    827c:	ldr	r3, [r0, #0]
    827e:	ldr	r4, [r3, #40]	; 0x28
    8280:	movs	r3, #1
    8282:	mov	ip, r4
}
    8284:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    8288:	bx	ip
}
    828a:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    828e:	b.w	822c <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00008292 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    8292:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8296:	ldr	r5, [sp, #32]
    8298:	mov	r6, r0
    829a:	mov	r4, r1
    829c:	mov	r7, r2
    829e:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    82a2:	cmp	r4, r8
    82a4:	bne.n	82ac <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    82a6:	movs	r0, #1
  }
    82a8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    82ac:	ldr	r3, [r6, #0]
    82ae:	mov	r2, r7
    82b0:	mov	r1, r4
    82b2:	mov	r0, r6
    82b4:	ldr	r3, [r3, #16]
    82b6:	add.w	r9, r4, #1
    82ba:	blx	r3
    82bc:	cmp	r0, #0
    82be:	beq.n	82a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    82c0:	mov	r0, r4
    82c2:	ldr	r2, [sp, #36]	; 0x24
    82c4:	mov	r1, r7
    82c6:	mov	r4, r9
    82c8:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    82ca:	b.n	82a2 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

000082cc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    82cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82d0:	mov	r5, r0
    82d2:	mov	r4, r1
    82d4:	mov	r7, r3
    82d6:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    82d8:	cmp	r4, r6
    82da:	bne.n	82e0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    82dc:	movs	r0, #1
    82de:	b.n	82fa <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    82e0:	ldr	r3, [r5, #0]
    82e2:	mov	r0, r4
    82e4:	ldr	r1, [sp, #24]
    82e6:	ldr.w	r8, [r3, #36]	; 0x24
    82ea:	blx	r7
    82ec:	mov	r1, r4
    82ee:	mov	r2, r0
    82f0:	mov	r0, r5
    82f2:	adds	r4, #1
    82f4:	blx	r8
    82f6:	cmp	r0, #0
    82f8:	bne.n	82d8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    82fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000082fe <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    82fe:	movs	r0, #0
    8300:	bx	lr

00008302 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    8302:	movs	r0, #0
    8304:	bx	lr

00008306 <SdCardInterface::setDedicatedSpi(bool)>:
  }
    8306:	movs	r0, #0
    8308:	bx	lr

0000830a <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    830a:	bx	lr

0000830c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    830c:	ldr	r3, [pc, #28]	; (832c <sdIrs()+0x20>)
    830e:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    8310:	ldr	r2, [pc, #28]	; (8330 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    8312:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    8314:	ldr	r0, [r3, #48]	; 0x30
    8316:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    8318:	ldr	r2, [r2, #0]
    831a:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    831c:	ldr	r2, [r3, #72]	; 0x48
    831e:	bic.w	r2, r2, #129	; 0x81
    8322:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    8324:	ldr	r3, [pc, #12]	; (8334 <sdIrs()+0x28>)
    8326:	strb	r1, [r3, #0]
}
    8328:	bx	lr
    832a:	nop
    832c:	.word	0x402c0000
    8330:	.word	0x200273f8
    8334:	.word	0x20028286

00008338 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    8338:	ldr	r3, [pc, #24]	; (8354 <gpioMux(unsigned char)+0x1c>)
    833a:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    833e:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    8342:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    8346:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    834a:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    834e:	str.w	r0, [r3, #456]	; 0x1c8
}
    8352:	bx	lr
    8354:	.word	0x401f8000

00008358 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    8358:	ldr	r3, [pc, #12]	; (8368 <isBusyCommandComplete()+0x10>)
    835a:	ldr	r0, [pc, #16]	; (836c <isBusyCommandComplete()+0x14>)
    835c:	ldr	r3, [r3, #48]	; 0x30
    835e:	ands	r0, r3
}
    8360:	clz	r0, r0
    8364:	lsrs	r0, r0, #5
    8366:	bx	lr
    8368:	.word	0x402c0000
    836c:	.word	0x000f0001

00008370 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    8370:	ldr	r3, [pc, #8]	; (837c <isBusyCommandInhibit()+0xc>)
    8372:	ldr	r0, [r3, #36]	; 0x24
}
    8374:	and.w	r0, r0, #1
    8378:	bx	lr
    837a:	nop
    837c:	.word	0x402c0000

00008380 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    8380:	ldr	r3, [pc, #12]	; (8390 <isBusyDat()+0x10>)
    8382:	ldr	r0, [r3, #36]	; 0x24
    8384:	eor.w	r0, r0, #16777216	; 0x1000000
}
    8388:	ubfx	r0, r0, #24, #1
    838c:	bx	lr
    838e:	nop
    8390:	.word	0x402c0000

00008394 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    8394:	ldr	r3, [pc, #4]	; (839c <isBusyDMA()+0x8>)
    8396:	ldrb	r0, [r3, #0]
}
    8398:	bx	lr
    839a:	nop
    839c:	.word	0x20028286

000083a0 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    83a0:	ldr	r3, [pc, #12]	; (83b0 <isBusyFifoRead()+0x10>)
    83a2:	ldr	r0, [r3, #36]	; 0x24
    83a4:	eor.w	r0, r0, #2048	; 0x800
}
    83a8:	ubfx	r0, r0, #11, #1
    83ac:	bx	lr
    83ae:	nop
    83b0:	.word	0x402c0000

000083b4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    83b4:	ldr	r3, [pc, #12]	; (83c4 <isBusyFifoWrite()+0x10>)
    83b6:	ldr	r0, [r3, #36]	; 0x24
    83b8:	eor.w	r0, r0, #1024	; 0x400
}
    83bc:	ubfx	r0, r0, #10, #1
    83c0:	bx	lr
    83c2:	nop
    83c4:	.word	0x402c0000

000083c8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    83c8:	ldr	r3, [pc, #12]	; (83d8 <isBusyTransferComplete()+0x10>)
    83ca:	ldr	r0, [pc, #16]	; (83dc <isBusyTransferComplete()+0x14>)
    83cc:	ldr	r3, [r3, #48]	; 0x30
    83ce:	ands	r0, r3
}
    83d0:	clz	r0, r0
    83d4:	lsrs	r0, r0, #5
    83d6:	bx	lr
    83d8:	.word	0x402c0000
    83dc:	.word	0x117f0002

000083e0 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    83e0:	mov.w	r3, #1000	; 0x3e8
    83e4:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    83e6:	ldr	r3, [pc, #140]	; (8474 <setSdclk(unsigned long)+0x94>)
    83e8:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    83ea:	sub.w	r3, r3, #147456	; 0x24000
    83ee:	ldr.w	r1, [r3, #256]	; 0x100
    83f2:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    83f4:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    83f8:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    83fc:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    83fe:	udiv	r1, r1, r3
    8402:	ldr	r3, [pc, #116]	; (8478 <setSdclk(unsigned long)+0x98>)
    8404:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8408:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    840a:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    840e:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    8410:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    8412:	lsls	r4, r2, #4
    8414:	udiv	r4, r3, r4
    8418:	cmp	r4, r0
    841a:	bls.n	8420 <setSdclk(unsigned long)+0x40>
    841c:	subs	r1, #1
    841e:	bne.n	8426 <setSdclk(unsigned long)+0x46>
    8420:	mov	r4, r2
    8422:	movs	r1, #1
    8424:	b.n	842e <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    8426:	lsls	r2, r2, #1
    8428:	b.n	8412 <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    842a:	adds	r1, #1
    842c:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    842e:	udiv	r5, r3, r4
    8432:	cmp	r5, r0
    8434:	bls.n	843e <setSdclk(unsigned long)+0x5e>
    8436:	cmp	r1, #16
    8438:	add.w	r5, r2, r4
    843c:	bne.n	842a <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    843e:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    8442:	subs	r1, #1
  sdclkfs >>= 1;
    8444:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    8446:	muls	r4, r0
    8448:	ldr	r0, [pc, #48]	; (847c <setSdclk(unsigned long)+0x9c>)
    844a:	udiv	r3, r3, r4
    844e:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    8450:	ldr	r0, [pc, #44]	; (8480 <setSdclk(unsigned long)+0xa0>)
    8452:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    8454:	bic.w	r3, r3, #1044480	; 0xff000
    8458:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    845c:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    8460:	orr.w	r3, r3, r2, lsl #8
    8464:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    8468:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    846a:	ldr	r3, [r0, #36]	; 0x24
    846c:	lsls	r3, r3, #28
    846e:	bpl.n	846a <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    8470:	pop	{r4, r5, pc}
    8472:	nop
    8474:	.word	0x400fc000
    8478:	.word	0x5e69ec00
    847c:	.word	0x2000d3d0
    8480:	.word	0x402c0000

00008484 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    8484:	ldr	r3, [pc, #4]	; (848c <SdioCard::errorCode() const+0x8>)
    8486:	ldrb	r0, [r3, #0]
    8488:	bx	lr
    848a:	nop
    848c:	.word	0x20008f32

00008490 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    8490:	ldr	r3, [pc, #4]	; (8498 <SdioCard::errorData() const+0x8>)
    8492:	ldr	r0, [r3, #0]
}
    8494:	bx	lr
    8496:	nop
    8498:	.word	0x200273f8

0000849c <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    849c:	ldr	r3, [pc, #20]	; (84b4 <SdioCard::readCID(CID*)+0x18>)
    849e:	add.w	r2, r3, #16
    84a2:	ldr.w	r0, [r3], #4
    84a6:	cmp	r3, r2
    84a8:	str.w	r0, [r1], #4
    84ac:	bne.n	84a2 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    84ae:	movs	r0, #1
    84b0:	bx	lr
    84b2:	nop
    84b4:	.word	0x200281c6

000084b8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    84b8:	ldr	r3, [pc, #20]	; (84d0 <SdioCard::readCSD(csd_t*)+0x18>)
    84ba:	add.w	r2, r3, #16
    84be:	ldr.w	r0, [r3], #4
    84c2:	cmp	r3, r2
    84c4:	str.w	r0, [r1], #4
    84c8:	bne.n	84be <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    84ca:	movs	r0, #1
    84cc:	bx	lr
    84ce:	nop
    84d0:	.word	0x200281d6

000084d4 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    84d4:	ldr	r3, [pc, #8]	; (84e0 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    84d6:	movs	r0, #1
  *ocr = m_ocr;
    84d8:	ldr	r3, [r3, #0]
    84da:	str	r3, [r1, #0]
}
    84dc:	bx	lr
    84de:	nop
    84e0:	.word	0x20026dec

000084e4 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    84e4:	bx	lr
	...

000084e8 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    84e8:	push	{r3, r4, r5, r6, r7, lr}
    84ea:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    84ec:	ldr	r7, [pc, #24]	; (8508 <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    84ee:	bl	a96c <micros>
    84f2:	mov	r6, r0
  while (fcn()) {
    84f4:	blx	r5
    84f6:	mov	r4, r0
    84f8:	cbz	r0, 8504 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    84fa:	bl	a96c <micros>
    84fe:	subs	r0, r0, r6
    8500:	cmp	r0, r7
    8502:	bls.n	84f4 <waitTimeout(bool (*)())+0xc>
}
    8504:	mov	r0, r4
    8506:	pop	{r3, r4, r5, r6, r7, pc}
    8508:	.word	0x000f4240

0000850c <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    850c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    8510:	ldr	r7, [pc, #44]	; (8540 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    8512:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8514:	ldr.w	r8, [pc, #44]	; 8544 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    8518:	str	r0, [r7, #0]
  uint32_t m = micros();
    851a:	bl	a96c <micros>
    851e:	mov	r6, r0
  while (fcn()) {
    8520:	blx	r5
    8522:	mov	r4, r0
    8524:	cbnz	r0, 8530 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    8526:	movs	r3, #0
}
    8528:	mov	r0, r4
      m_busyFcn = 0;
    852a:	str	r3, [r7, #0]
}
    852c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    8530:	bl	a96c <micros>
    8534:	subs	r0, r0, r6
    8536:	cmp	r0, r8
    8538:	bhi.n	8526 <yieldTimeout(bool (*)())+0x1a>
    yield();
    853a:	bl	b268 <yield>
    853e:	b.n	8520 <yieldTimeout(bool (*)())+0x14>
    8540:	.word	0x200273f4
    8544:	.word	0x000f4240

00008548 <SdioCard::~SdioCard()>:
    8548:	push	{r4, lr}
    854a:	mov	r4, r0
    854c:	movs	r1, #12
    854e:	bl	b794 <operator delete(void*, unsigned int)>
    8552:	mov	r0, r4
    8554:	pop	{r4, pc}
	...

00008558 <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    8558:	push	{r3, lr}
    gpioMux(0);
    855a:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    855c:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    8560:	bl	8338 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8564:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    8568:	ldr	r3, [pc, #24]	; (8584 <enableGPIO(bool) [clone .part.0]+0x2c>)
    856a:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    856e:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    8572:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    8576:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    857a:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    857e:	str.w	r2, [r3, #952]	; 0x3b8
}
    8582:	pop	{r3, pc}
    8584:	.word	0x401f8000

00008588 <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8588:	ldr	r3, [pc, #184]	; (8644 <initSDHC()+0xbc>)
    gpioMux(5);
    858a:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    858c:	ldr.w	r2, [r3, #256]	; 0x100
    8590:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    8594:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    8596:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    859a:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    859e:	ldr	r4, [pc, #168]	; (8648 <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    85a0:	bic.w	r2, r2, #63	; 0x3f
    85a4:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    85a8:	ldr.w	r2, [r3, #256]	; 0x100
    85ac:	orr.w	r2, r2, #24
    85b0:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    85b4:	ldr.w	r2, [r3, #256]	; 0x100
    85b8:	bic.w	r2, r2, #128	; 0x80
    85bc:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    85c0:	add.w	r3, r3, #147456	; 0x24000
    85c4:	ldr.w	r2, [r3, #128]	; 0x80
    85c8:	orr.w	r2, r2, #12
    85cc:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    85d0:	ldr	r2, [r3, #36]	; 0x24
    85d2:	bic.w	r2, r2, #14336	; 0x3800
    85d6:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    85d8:	ldr	r2, [r3, #28]
    85da:	orr.w	r2, r2, #65536	; 0x10000
    85de:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    85e0:	ldr	r2, [r3, #36]	; 0x24
    85e2:	orr.w	r2, r2, #2048	; 0x800
    85e6:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    85e8:	bl	8338 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    85ec:	ldr	r3, [r4, #72]	; 0x48
    85ee:	orr.w	r3, r3, #2147483648	; 0x80000000
    85f2:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    85f4:	ldr	r3, [r4, #44]	; 0x2c
    85f6:	orr.w	r3, r3, #16777216	; 0x1000000
    85fa:	orr.w	r3, r3, #32768	; 0x8000
    85fe:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    8600:	ldr	r3, [r4, #44]	; 0x2c
    8602:	lsls	r2, r3, #7
    8604:	bmi.n	8600 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    8606:	mov.w	r0, #400	; 0x190
    860a:	bl	83e0 <setSdclk(unsigned long)>
  if (enable) {
    860e:	bl	8558 <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    8612:	ldr	r3, [pc, #56]	; (864c <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    8614:	ldr	r2, [pc, #56]	; (8650 <initSDHC()+0xc8>)
    8616:	str	r3, [r4, #52]	; 0x34
    8618:	ldr	r3, [pc, #56]	; (8654 <initSDHC()+0xcc>)
    861a:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    861e:	ldr	r3, [pc, #56]	; (8658 <initSDHC()+0xd0>)
    8620:	movs	r2, #96	; 0x60
    8622:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    8626:	mov.w	r3, #3758153728	; 0xe000e000
    862a:	mov.w	r2, #16384	; 0x4000
    862e:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8632:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    8634:	ldr	r2, [pc, #16]	; (8648 <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    8636:	orr.w	r3, r3, #134217728	; 0x8000000
    863a:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    863c:	ldr	r3, [r2, #44]	; 0x2c
    863e:	lsls	r3, r3, #4
    8640:	bmi.n	863c <initSDHC()+0xb4>
}
    8642:	pop	{r4, pc}
    8644:	.word	0x400d8000
    8648:	.word	0x402c0000
    864c:	.word	0x117f000b
    8650:	.word	0x0000830d
    8654:	.word	0x20009000
    8658:	.word	0xe000e400

0000865c <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    865c:	ldr	r3, [pc, #16]	; (8670 <SdioCard::type() const+0x14>)
    865e:	ldrb	r3, [r3, #0]
    8660:	cbz	r3, 866c <SdioCard::type() const+0x10>
    8662:	ldr	r3, [pc, #16]	; (8674 <SdioCard::type() const+0x18>)
    8664:	ldrb	r0, [r3, #0]
    8666:	adds	r0, #2
    8668:	uxtb	r0, r0
    866a:	bx	lr
    866c:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    866e:	bx	lr
    8670:	.word	0x200281c3
    8674:	.word	0x200281c4

00008678 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    8678:	push	{r3, r4, r5, lr}
    867a:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    867c:	ldr	r0, [pc, #80]	; (86d0 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    867e:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    8680:	bl	84e8 <waitTimeout(bool (*)())>
    8684:	cbnz	r0, 86c6 <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    8686:	ldr	r3, [pc, #76]	; (86d4 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    8688:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    868a:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    868c:	bpl.n	869e <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    868e:	ldr	r2, [r3, #72]	; 0x48
    8690:	bic.w	r2, r2, #255	; 0xff
    8694:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    8696:	uxtb	r2, r4
    8698:	ldr	r1, [r3, #72]	; 0x48
    869a:	orrs	r2, r1
    869c:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    869e:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    86a2:	ldr	r5, [pc, #48]	; (86d4 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    86a4:	ldr	r0, [pc, #48]	; (86d8 <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    86a6:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    86a8:	bl	84e8 <waitTimeout(bool (*)())>
    86ac:	cbnz	r0, 86c6 <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    86ae:	ldr	r2, [r5, #48]	; 0x30
    86b0:	ldr	r3, [pc, #40]	; (86dc <cardCommand(unsigned long, unsigned long)+0x64>)
    86b2:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    86b4:	ldr	r2, [r3, #0]
    86b6:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86b8:	ldr	r2, [r3, #0]
    86ba:	lsls	r2, r2, #31
    86bc:	bpl.n	86c6 <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    86be:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86c0:	tst.w	r3, #983040	; 0xf0000
    86c4:	beq.n	86ca <cardCommand(unsigned long, unsigned long)+0x52>
    86c6:	movs	r0, #0
}
    86c8:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    86ca:	movs	r0, #1
    86cc:	b.n	86c8 <cardCommand(unsigned long, unsigned long)+0x50>
    86ce:	nop
    86d0:	.word	0x00008371
    86d4:	.word	0x402c0000
    86d8:	.word	0x00008359
    86dc:	.word	0x200273f8

000086e0 <statusCMD13()>:
static uint32_t statusCMD13() {
    86e0:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    86e2:	ldr	r3, [pc, #16]	; (86f4 <statusCMD13()+0x14>)
    86e4:	ldr	r0, [pc, #16]	; (86f8 <statusCMD13()+0x18>)
    86e6:	ldr	r1, [r3, #0]
    86e8:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    86ec:	cbz	r0, 86f2 <statusCMD13()+0x12>
    86ee:	ldr	r3, [pc, #12]	; (86fc <statusCMD13()+0x1c>)
    86f0:	ldr	r0, [r3, #16]
}
    86f2:	pop	{r3, pc}
    86f4:	.word	0x20026df0
    86f8:	.word	0x0d1a0000
    86fc:	.word	0x402c0000

00008700 <isBusyCMD13()>:
static bool isBusyCMD13() {
    8700:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    8702:	bl	86e0 <statusCMD13()>
    8706:	eor.w	r0, r0, #256	; 0x100
}
    870a:	ubfx	r0, r0, #8, #1
    870e:	pop	{r3, pc}

00008710 <SdioCard::status()>:
  return statusCMD13();
    8710:	b.w	86e0 <statusCMD13()>

00008714 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    8714:	ldr	r3, [pc, #76]	; (8764 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    8716:	push	{r4, r5, lr}
    8718:	mov	r4, r1
    871a:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    871c:	ldr	r1, [r3, #0]
    871e:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8722:	cbz	r0, 8760 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    8724:	ldr	r3, [pc, #64]	; (8768 <readReg16(unsigned long, void*)+0x54>)
    8726:	add.w	r5, r4, #15
    872a:	ldr	r2, [r3, #16]
    872c:	str	r2, [sp, #0]
    872e:	ldr	r2, [r3, #20]
    8730:	str	r2, [sp, #4]
    8732:	ldr	r2, [r3, #24]
    8734:	str	r2, [sp, #8]
    8736:	ldr	r3, [r3, #28]
    8738:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    873a:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    873c:	bic.w	r2, r3, #3
    8740:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    8744:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    8746:	adds	r2, #16
    8748:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    874a:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    874c:	add	r2, sp
    874e:	ldr.w	r2, [r2, #-16]
    8752:	lsr.w	r2, r2, r1
    8756:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    875a:	bne.n	873c <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    875c:	movs	r3, #0
    875e:	strb	r3, [r4, #15]
}
    8760:	add	sp, #20
    8762:	pop	{r4, r5, pc}
    8764:	.word	0x20026df0
    8768:	.word	0x402c0000

0000876c <waitDmaStatus()>:
static bool waitDmaStatus() {
    876c:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    876e:	ldr	r0, [pc, #32]	; (8790 <waitDmaStatus()+0x24>)
    8770:	bl	850c <yieldTimeout(bool (*)())>
    8774:	cbnz	r0, 878c <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    8776:	ldr	r3, [pc, #28]	; (8794 <waitDmaStatus()+0x28>)
    8778:	ldr	r2, [r3, #0]
    877a:	lsls	r2, r2, #30
    877c:	bpl.n	878a <waitDmaStatus()+0x1e>
    877e:	ldr	r2, [r3, #0]
    8780:	ldr	r3, [pc, #20]	; (8798 <waitDmaStatus()+0x2c>)
    8782:	tst	r2, r3
    8784:	ite	eq
    8786:	moveq	r0, #1
    8788:	movne	r0, #0
}
    878a:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    878c:	movs	r0, #0
    878e:	b.n	878a <waitDmaStatus()+0x1e>
    8790:	.word	0x00008395
    8794:	.word	0x200273f8
    8798:	.word	0x117f0000

0000879c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    879c:	push	{r3, r4, r5, r6, r7, lr}
    879e:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    87a0:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    87a2:	mov	r7, r0
    87a4:	mov	r4, r1
    87a6:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    87a8:	bne.n	87ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    87aa:	cbnz	r5, 87be <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    87ac:	ldr	r3, [pc, #96]	; (8810 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    87ae:	movs	r2, #37	; 0x25
    87b0:	strb	r2, [r3, #0]
  m_errorLine = line;
    87b2:	movw	r2, #501	; 0x1f5
    87b6:	ldr	r3, [pc, #92]	; (8814 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    87b8:	str	r2, [r3, #0]
}
    87ba:	movs	r0, #0
    87bc:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    87be:	ldr	r0, [pc, #88]	; (8818 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    87c0:	bl	850c <yieldTimeout(bool (*)())>
    87c4:	cbz	r0, 87d4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    87c6:	ldr	r3, [pc, #72]	; (8810 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    87c8:	movs	r2, #10
    87ca:	strb	r2, [r3, #0]
  m_errorLine = line;
    87cc:	mov.w	r2, #504	; 0x1f8
    87d0:	ldr	r3, [pc, #64]	; (8814 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    87d2:	b.n	87b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    87d4:	ldr	r3, [pc, #68]	; (881c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    87d6:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    87d8:	ldr	r1, [pc, #68]	; (8820 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    87da:	strb	r2, [r3, #0]
  m_irqstat = 0;
    87dc:	ldr	r3, [pc, #68]	; (8824 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    87de:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    87e0:	ldr	r3, [pc, #68]	; (8828 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    87e2:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    87e4:	and.w	r3, r3, r5, lsl #16
    87e8:	orr.w	r3, r3, #512	; 0x200
    87ec:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    87ee:	ldr	r3, [pc, #60]	; (882c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    87f0:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    87f2:	ldr	r3, [pc, #60]	; (8830 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    87f4:	ldrb	r3, [r3, #0]
    87f6:	cbnz	r3, 87fa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    87f8:	lsls	r4, r4, #9
    87fa:	mov	r1, r4
    87fc:	mov	r0, r7
    87fe:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8802:	cmp	r0, #0
    8804:	beq.n	87ba <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    8806:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    880a:	b.w	876c <waitDmaStatus()>
    880e:	nop
    8810:	.word	0x20008f32
    8814:	.word	0x200253d8
    8818:	.word	0x00008701
    881c:	.word	0x20028286
    8820:	.word	0x402c0000
    8824:	.word	0x200273f8
    8828:	.word	0x1fff0000
    882c:	.word	0x117f0002
    8830:	.word	0x200281c4

00008834 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8834:	push	{r3, r4, r5, r6, r7, lr}
    8836:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    8838:	ldrb	r0, [r0, #8]
    883a:	mov	r4, r1
    883c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    883e:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    8840:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    8842:	bmi.n	8862 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    8844:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    8846:	cmp	r4, r6
    8848:	beq.n	886c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    884a:	ldr	r3, [r7, #0]
    884c:	mov	r2, r5
    884e:	mov	r1, r4
    8850:	mov	r0, r7
    8852:	ldr	r3, [r3, #16]
    8854:	adds	r4, #1
    8856:	add.w	r5, r5, #512	; 0x200
    885a:	blx	r3
    885c:	cmp	r0, #0
    885e:	bne.n	8846 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    8860:	b.n	887e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    8862:	lsls	r0, r2, #30
    8864:	beq.n	888a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    8866:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8868:	cmp	r4, r6
    886a:	bne.n	8870 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    886c:	movs	r0, #1
    886e:	b.n	8880 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    8870:	ldr	r3, [r7, #0]
    8872:	mov	r2, r5
    8874:	mov	r1, r4
    8876:	mov	r0, r7
    8878:	ldr	r3, [r3, #16]
    887a:	blx	r3
    887c:	cbnz	r0, 8882 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    887e:	movs	r0, #0
}
    8880:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    8882:	adds	r4, #1
    8884:	add.w	r5, r5, #512	; 0x200
    8888:	b.n	8868 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    888a:	ldr	r0, [pc, #24]	; (88a4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    888c:	bl	879c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8890:	cmp	r0, #0
    8892:	bne.n	886c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    8894:	ldr	r3, [pc, #16]	; (88a8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    8896:	movs	r2, #12
    8898:	strb	r2, [r3, #0]
  m_errorLine = line;
    889a:	movw	r2, #929	; 0x3a1
    889e:	ldr	r3, [pc, #12]	; (88ac <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    88a0:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    88a2:	b.n	8880 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    88a4:	.word	0x123a0037
    88a8:	.word	0x20008f32
    88ac:	.word	0x200253d8

000088b0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    88b0:	push	{r3, r4, r5, r6, r7, lr}
    88b2:	mov	r7, r0
    88b4:	ldrb	r0, [r0, #8]
    88b6:	mov	r4, r1
    88b8:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    88ba:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    88bc:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    88be:	bmi.n	88de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    88c0:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    88c2:	cmp	r4, r6
    88c4:	beq.n	88e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    88c6:	ldr	r3, [r7, #0]
    88c8:	mov	r2, r5
    88ca:	mov	r1, r4
    88cc:	mov	r0, r7
    88ce:	ldr	r3, [r3, #36]	; 0x24
    88d0:	adds	r4, #1
    88d2:	add.w	r5, r5, #512	; 0x200
    88d6:	blx	r3
    88d8:	cmp	r0, #0
    88da:	bne.n	88c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    88dc:	b.n	88fa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    88de:	lsls	r0, r2, #30
    88e0:	beq.n	8906 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    88e2:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    88e4:	cmp	r4, r6
    88e6:	bne.n	88ec <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    88e8:	movs	r0, #1
    88ea:	b.n	88fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    88ec:	ldr	r3, [r7, #0]
    88ee:	mov	r2, r5
    88f0:	mov	r1, r4
    88f2:	mov	r0, r7
    88f4:	ldr	r3, [r3, #36]	; 0x24
    88f6:	blx	r3
    88f8:	cbnz	r0, 88fe <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    88fa:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    88fc:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    88fe:	adds	r4, #1
    8900:	add.w	r5, r5, #512	; 0x200
    8904:	b.n	88e4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    8906:	ldr	r0, [pc, #24]	; (8920 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    8908:	bl	879c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    890c:	cmp	r0, #0
    890e:	bne.n	88e8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    8910:	ldr	r3, [pc, #16]	; (8924 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    8912:	movs	r2, #14
    8914:	strb	r2, [r3, #0]
  m_errorLine = line;
    8916:	movw	r2, #1085	; 0x43d
    891a:	ldr	r3, [pc, #12]	; (8928 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    891c:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    891e:	b.n	88fc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    8920:	.word	0x193a0027
    8924:	.word	0x20008f32
    8928:	.word	0x200253d8

0000892c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    892c:	ldr	r2, [pc, #88]	; (8988 <SdioCard::sectorCount()+0x5c>)
    892e:	ldrb	r3, [r2, #0]
    8930:	ands.w	r3, r3, #192	; 0xc0
    8934:	bne.n	8968 <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8936:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8938:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    893a:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    893e:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8940:	lsls	r0, r0, #2
    8942:	orr.w	r0, r0, r3, lsl #10
    8946:	ldrb	r3, [r2, #8]
    8948:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    894c:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    894e:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8950:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8954:	adds	r0, #1
    8956:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    895a:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    895c:	orr.w	r3, r3, r1, lsr #7
    8960:	add	r3, r2
    8962:	subs	r3, #7
    8964:	lsls	r0, r3
    8966:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    8968:	cmp	r3, #64	; 0x40
    896a:	bne.n	8984 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    896c:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    896e:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8970:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8972:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8976:	add.w	r0, r0, r3, lsl #16
    897a:	ldrb	r3, [r2, #8]
    897c:	add.w	r0, r0, r3, lsl #8
    8980:	lsls	r0, r0, #10
    8982:	bx	lr
  } else {
    return 0;
    8984:	movs	r0, #0
}
    8986:	bx	lr
    8988:	.word	0x200281d6

0000898c <SdioCard::isBusy()>:
    898c:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    898e:	lsls	r3, r3, #31
    8990:	bpl.n	89a4 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    8992:	ldr	r3, [pc, #40]	; (89bc <SdioCard::isBusy()+0x30>)
    8994:	ldr	r3, [r3, #0]
    8996:	cbz	r3, 899a <SdioCard::isBusy()+0xe>
    8998:	bx	r3
    899a:	ldr	r3, [pc, #36]	; (89c0 <SdioCard::isBusy()+0x34>)
    899c:	ldrb	r0, [r3, #0]
    899e:	cbz	r0, 89ba <SdioCard::isBusy()+0x2e>
    89a0:	b.w	8700 <isBusyCMD13()>
    if (m_transferActive) {
    89a4:	ldr	r3, [pc, #28]	; (89c4 <SdioCard::isBusy()+0x38>)
    89a6:	ldrb	r3, [r3, #0]
    89a8:	cbz	r3, 89ae <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    89aa:	b.w	83c8 <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    89ae:	ldr	r3, [pc, #24]	; (89c8 <SdioCard::isBusy()+0x3c>)
    89b0:	ldr	r0, [r3, #36]	; 0x24
    89b2:	eor.w	r0, r0, #16777216	; 0x1000000
    89b6:	ubfx	r0, r0, #24, #1
}
    89ba:	bx	lr
    89bc:	.word	0x200273f4
    89c0:	.word	0x200281c2
    89c4:	.word	0x200281c5
    89c8:	.word	0x402c0000

000089cc <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    89cc:	push	{r3, r4, r5, lr}
    89ce:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    89d0:	ldr	r2, [pc, #160]	; (8a74 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    89d2:	ldrb	r3, [r2, #10]
    89d4:	ands.w	r4, r3, #64	; 0x40
    89d8:	bne.n	8a00 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    89da:	and.w	r3, r3, #63	; 0x3f
    89de:	ldrb	r2, [r2, #11]
    89e0:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    89e2:	orr.w	r3, r3, r2, lsr #7
    89e6:	adds	r2, r5, #1
    89e8:	orrs	r2, r1
    89ea:	tst	r3, r2
    89ec:	beq.n	8a00 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    89ee:	ldr	r3, [pc, #136]	; (8a78 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    89f0:	movs	r2, #39	; 0x27
    89f2:	strb	r2, [r3, #0]
  m_errorLine = line;
    89f4:	movw	r2, #770	; 0x302
    89f8:	ldr	r3, [pc, #128]	; (8a7c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    89fa:	str	r2, [r3, #0]
}
    89fc:	mov	r0, r4
    89fe:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    8a00:	ldr	r3, [pc, #124]	; (8a80 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    8a02:	ldrb	r3, [r3, #0]
    8a04:	cbnz	r3, 8a0a <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    8a06:	lsls	r1, r1, #9
    lastSector <<= 9;
    8a08:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    8a0a:	ldr	r0, [pc, #120]	; (8a84 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    8a0c:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8a10:	mov	r4, r0
    8a12:	cbnz	r0, 8a22 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    8a14:	ldr	r3, [pc, #96]	; (8a78 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a16:	movs	r2, #15
    8a18:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a1a:	movw	r2, #778	; 0x30a
    8a1e:	ldr	r3, [pc, #92]	; (8a7c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a20:	b.n	89fa <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    8a22:	mov	r1, r5
    8a24:	ldr	r0, [pc, #96]	; (8a88 <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    8a26:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8a2a:	mov	r4, r0
    8a2c:	cbnz	r0, 8a3c <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    8a2e:	ldr	r3, [pc, #72]	; (8a78 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a30:	movs	r2, #16
    8a32:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a34:	movw	r2, #781	; 0x30d
    8a38:	ldr	r3, [pc, #64]	; (8a7c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a3a:	b.n	89fa <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    8a3c:	movs	r1, #0
    8a3e:	ldr	r0, [pc, #76]	; (8a8c <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    8a40:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8a44:	mov	r4, r0
    8a46:	cbnz	r0, 8a56 <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    8a48:	ldr	r3, [pc, #44]	; (8a78 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a4a:	movs	r2, #17
    8a4c:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a4e:	mov.w	r2, #784	; 0x310
    8a52:	ldr	r3, [pc, #40]	; (8a7c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a54:	b.n	89fa <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    8a56:	ldr	r0, [pc, #56]	; (8a90 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    8a58:	bl	84e8 <waitTimeout(bool (*)())>
    8a5c:	cmp	r0, #0
    8a5e:	beq.n	89fc <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    8a60:	ldr	r3, [pc, #20]	; (8a78 <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    8a62:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8a64:	movs	r4, #0
  m_errorCode = code;
    8a66:	strb	r2, [r3, #0]
  m_errorLine = line;
    8a68:	movw	r2, #787	; 0x313
    8a6c:	ldr	r3, [pc, #12]	; (8a7c <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    8a6e:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    8a70:	b.n	89fc <SdioCard::erase(unsigned long, unsigned long)+0x30>
    8a72:	nop
    8a74:	.word	0x200281d6
    8a78:	.word	0x20008f32
    8a7c:	.word	0x200253d8
    8a80:	.word	0x200281c4
    8a84:	.word	0x201a0000
    8a88:	.word	0x211a0000
    8a8c:	.word	0x261b0000
    8a90:	.word	0x00008701

00008a94 <waitTransferComplete()>:
static bool waitTransferComplete() {
    8a94:	push	{r4, lr}
  if (!m_transferActive) {
    8a96:	ldr	r4, [pc, #60]	; (8ad4 <waitTransferComplete()+0x40>)
    8a98:	ldrb	r3, [r4, #0]
    8a9a:	cbnz	r3, 8aa0 <waitTransferComplete()+0xc>
    return true;
    8a9c:	movs	r0, #1
}
    8a9e:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    8aa0:	ldr	r0, [pc, #52]	; (8ad8 <waitTransferComplete()+0x44>)
    8aa2:	bl	84e8 <waitTimeout(bool (*)())>
  m_transferActive = false;
    8aa6:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    8aa8:	ldr	r2, [pc, #48]	; (8adc <waitTransferComplete()+0x48>)
  m_transferActive = false;
    8aaa:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    8aac:	ldr	r1, [r2, #48]	; 0x30
    8aae:	ldr	r3, [pc, #48]	; (8ae0 <waitTransferComplete()+0x4c>)
    8ab0:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    8ab2:	ldr	r1, [r3, #0]
    8ab4:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    8ab6:	cbnz	r0, 8ac0 <waitTransferComplete()+0x2c>
    8ab8:	ldr	r2, [r3, #0]
    8aba:	ldr	r3, [pc, #40]	; (8ae4 <waitTransferComplete()+0x50>)
    8abc:	tst	r2, r3
    8abe:	beq.n	8a9c <waitTransferComplete()+0x8>
  m_errorCode = code;
    8ac0:	ldr	r3, [pc, #36]	; (8ae8 <waitTransferComplete()+0x54>)
    8ac2:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8ac4:	movs	r0, #0
  m_errorCode = code;
    8ac6:	strb	r2, [r3, #0]
  m_errorLine = line;
    8ac8:	movw	r2, #634	; 0x27a
    8acc:	ldr	r3, [pc, #28]	; (8aec <waitTransferComplete()+0x58>)
    8ace:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    8ad0:	b.n	8a9e <waitTransferComplete()+0xa>
    8ad2:	nop
    8ad4:	.word	0x200281c5
    8ad8:	.word	0x000083c9
    8adc:	.word	0x402c0000
    8ae0:	.word	0x200273f8
    8ae4:	.word	0x117f0000
    8ae8:	.word	0x20008f32
    8aec:	.word	0x200253d8

00008af0 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8af0:	push	{r4, r5, r6, r7, lr}
    8af2:	ldrb	r5, [r0, #8]
    8af4:	sub.w	sp, sp, #516	; 0x204
    8af8:	mov	r4, r0
    8afa:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    8afc:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    8b00:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    8b02:	beq.n	8b3c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    8b04:	lsls	r3, r2, #30
    8b06:	beq.n	8b16 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    8b08:	mov	r1, r6
      ptr = aligned;
    8b0a:	mov	r6, sp
      memcpy(aligned, src, 512);
    8b0c:	mov.w	r2, #512	; 0x200
    8b10:	mov	r0, sp
    8b12:	bl	9470 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    8b16:	movs	r3, #1
    8b18:	mov	r2, r6
    8b1a:	mov	r1, r7
    8b1c:	ldr	r0, [pc, #104]	; (8b88 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    8b1e:	bl	879c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    8b22:	mov	r5, r0
    8b24:	cbnz	r0, 8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    8b26:	ldr	r3, [pc, #100]	; (8b8c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    8b28:	movs	r2, #13
    8b2a:	strb	r2, [r3, #0]
  m_errorLine = line;
    8b2c:	movw	r2, #1041	; 0x411
    8b30:	ldr	r3, [pc, #92]	; (8b90 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    8b32:	str	r2, [r3, #0]
}
    8b34:	mov	r0, r5
    8b36:	add.w	sp, sp, #516	; 0x204
    8b3a:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    8b3c:	bl	8a94 <waitTransferComplete()>
    8b40:	cmp	r0, #0
    8b42:	beq.n	8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    8b44:	ldrb	r3, [r4, #9]
    8b46:	cmp	r3, #2
    8b48:	bne.n	8b50 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    8b4a:	ldr	r3, [r4, #4]
    8b4c:	cmp	r3, r7
    8b4e:	beq.n	8b70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    8b50:	ldr	r3, [r4, #0]
    8b52:	mov	r0, r4
    8b54:	ldr	r3, [r3, #32]
    8b56:	blx	r3
    8b58:	cmp	r0, #0
    8b5a:	beq.n	8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    8b5c:	ldr	r3, [r4, #0]
    8b5e:	mov	r1, r7
    8b60:	mov	r0, r4
    8b62:	ldr	r3, [r3, #96]	; 0x60
    8b64:	blx	r3
    8b66:	cmp	r0, #0
    8b68:	beq.n	8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    8b6a:	movs	r3, #2
      m_curSector = sector;
    8b6c:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    8b6e:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    8b70:	ldr	r3, [r4, #0]
    8b72:	mov	r1, r6
    8b74:	mov	r0, r4
    8b76:	ldr	r3, [r3, #92]	; 0x5c
    8b78:	blx	r3
    8b7a:	cmp	r0, #0
    8b7c:	beq.n	8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    8b7e:	ldr	r3, [r4, #4]
  return true;
    8b80:	mov	r5, r0
    m_curSector++;
    8b82:	adds	r3, #1
    8b84:	str	r3, [r4, #4]
    8b86:	b.n	8b34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    8b88:	.word	0x183a0001
    8b8c:	.word	0x20008f32
    8b90:	.word	0x200253d8

00008b94 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    8b94:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b96:	ldr	r4, [pc, #92]	; (8bf4 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8b98:	movs	r1, #0
    8b9a:	ldr	r0, [pc, #92]	; (8bf8 <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8b9c:	ldr	r3, [r4, #40]	; 0x28
    8b9e:	bic.w	r3, r3, #65536	; 0x10000
    8ba2:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8ba4:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8ba8:	mov	r5, r0
    8baa:	cbnz	r0, 8bbe <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    8bac:	ldr	r3, [pc, #76]	; (8bfc <SdioCard::readStop()+0x68>)
    8bae:	movs	r2, #9
    8bb0:	strb	r2, [r3, #0]
  m_errorLine = line;
    8bb2:	movw	r2, #573	; 0x23d
    8bb6:	ldr	r3, [pc, #72]	; (8c00 <SdioCard::readStop()+0x6c>)
    8bb8:	str	r2, [r3, #0]
}
    8bba:	mov	r0, r5
    8bbc:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    8bbe:	ldr	r0, [pc, #68]	; (8c04 <SdioCard::readStop()+0x70>)
    8bc0:	bl	850c <yieldTimeout(bool (*)())>
    8bc4:	cbz	r0, 8bd8 <SdioCard::readStop()+0x44>
  m_errorCode = code;
    8bc6:	ldr	r3, [pc, #52]	; (8bfc <SdioCard::readStop()+0x68>)
    8bc8:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8bca:	movs	r5, #0
  m_errorCode = code;
    8bcc:	strb	r2, [r3, #0]
  m_errorLine = line;
    8bce:	mov.w	r2, #576	; 0x240
    8bd2:	ldr	r3, [pc, #44]	; (8c00 <SdioCard::readStop()+0x6c>)
    8bd4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    8bd6:	b.n	8bba <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    8bd8:	ldr	r3, [r4, #36]	; 0x24
    8bda:	lsls	r3, r3, #30
    8bdc:	bpl.n	8bba <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    8bde:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8be0:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8be2:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    8be4:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    8be8:	orr.w	r2, r2, #67108864	; 0x4000000
    8bec:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    8bee:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    8bf0:	str	r3, [r4, #40]	; 0x28
    8bf2:	b.n	8bba <SdioCard::readStop()+0x26>
    8bf4:	.word	0x402c0000
    8bf8:	.word	0x0cdb0000
    8bfc:	.word	0x20008f32
    8c00:	.word	0x200253d8
    8c04:	.word	0x00008381

00008c08 <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    8c08:	push	{r4, r5, r6, lr}
    8c0a:	mov	r4, r1
  if (!waitTransferComplete()) {
    8c0c:	bl	8a94 <waitTransferComplete()>
    8c10:	mov	r5, r0
    8c12:	cbz	r0, 8c4c <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    8c14:	ldr	r3, [pc, #100]	; (8c7c <SdioCard::writeData(unsigned char const*)+0x74>)
    8c16:	ldr	r2, [r3, #36]	; 0x24
    8c18:	lsls	r2, r2, #23
    8c1a:	bmi.n	8c2c <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8c1c:	ldr	r2, [r3, #40]	; 0x28
    8c1e:	bic.w	r2, r2, #65536	; 0x10000
    8c22:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    8c24:	ldr	r2, [r3, #40]	; 0x28
    8c26:	orr.w	r2, r2, #131072	; 0x20000
    8c2a:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c2c:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8c2e:	ldr	r0, [pc, #80]	; (8c80 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    8c30:	orr.w	r2, r2, #65536	; 0x10000
    8c34:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    8c36:	bl	84e8 <waitTimeout(bool (*)())>
    8c3a:	cbz	r0, 8c50 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    8c3c:	ldr	r3, [pc, #68]	; (8c84 <SdioCard::writeData(unsigned char const*)+0x7c>)
    8c3e:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    8c40:	movs	r5, #0
  m_errorCode = code;
    8c42:	strb	r2, [r3, #0]
  m_errorLine = line;
    8c44:	mov.w	r2, #1016	; 0x3f8
    8c48:	ldr	r3, [pc, #60]	; (8c88 <SdioCard::writeData(unsigned char const*)+0x80>)
    8c4a:	str	r2, [r3, #0]
}
    8c4c:	mov	r0, r5
    8c4e:	pop	{r4, r5, r6, pc}
    8c50:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    8c54:	ldr	r2, [pc, #36]	; (8c7c <SdioCard::writeData(unsigned char const*)+0x74>)
    8c56:	ldr	r3, [r2, #36]	; 0x24
    8c58:	lsls	r3, r3, #21
    8c5a:	bpl.n	8c56 <SdioCard::writeData(unsigned char const*)+0x4e>
    8c5c:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c5e:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    8c62:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c66:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    8c68:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    8c6a:	bne.n	8c62 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    8c6c:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    8c6e:	cmp	r4, r1
    8c70:	bne.n	8c56 <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    8c72:	ldr	r3, [pc, #24]	; (8c8c <SdioCard::writeData(unsigned char const*)+0x84>)
    8c74:	movs	r2, #1
    8c76:	strb	r2, [r3, #0]
  return true;
    8c78:	b.n	8c4c <SdioCard::writeData(unsigned char const*)+0x44>
    8c7a:	nop
    8c7c:	.word	0x402c0000
    8c80:	.word	0x000083b5
    8c84:	.word	0x20008f32
    8c88:	.word	0x200253d8
    8c8c:	.word	0x200281c5

00008c90 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    8c90:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    8c92:	ldr	r0, [pc, #80]	; (8ce4 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    8c94:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    8c96:	bl	850c <yieldTimeout(bool (*)())>
    8c9a:	cbz	r0, 8cae <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    8c9c:	ldr	r3, [pc, #72]	; (8ce8 <SdioCard::writeStart(unsigned long)+0x58>)
    8c9e:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8ca0:	movs	r0, #0
  m_errorCode = code;
    8ca2:	strb	r2, [r3, #0]
  m_errorLine = line;
    8ca4:	movw	r2, #1099	; 0x44b
    8ca8:	ldr	r3, [pc, #64]	; (8cec <SdioCard::writeStart(unsigned long)+0x5c>)
    8caa:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    8cac:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8cae:	ldr	r3, [pc, #64]	; (8cf0 <SdioCard::writeStart(unsigned long)+0x60>)
    8cb0:	ldr	r2, [r3, #40]	; 0x28
    8cb2:	bic.w	r2, r2, #65536	; 0x10000
    8cb6:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    8cb8:	mov.w	r2, #512	; 0x200
    8cbc:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    8cbe:	ldr	r3, [pc, #52]	; (8cf4 <SdioCard::writeStart(unsigned long)+0x64>)
    8cc0:	ldrb	r3, [r3, #0]
    8cc2:	cbnz	r3, 8cc6 <SdioCard::writeStart(unsigned long)+0x36>
    8cc4:	lsls	r4, r4, #9
    8cc6:	mov	r1, r4
    8cc8:	ldr	r0, [pc, #44]	; (8cf8 <SdioCard::writeStart(unsigned long)+0x68>)
    8cca:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8cce:	cmp	r0, #0
    8cd0:	bne.n	8cac <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    8cd2:	ldr	r3, [pc, #20]	; (8ce8 <SdioCard::writeStart(unsigned long)+0x58>)
    8cd4:	movs	r2, #14
    8cd6:	strb	r2, [r3, #0]
  m_errorLine = line;
    8cd8:	movw	r2, #1111	; 0x457
    8cdc:	ldr	r3, [pc, #12]	; (8cec <SdioCard::writeStart(unsigned long)+0x5c>)
    8cde:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    8ce0:	b.n	8cac <SdioCard::writeStart(unsigned long)+0x1c>
    8ce2:	nop
    8ce4:	.word	0x00008701
    8ce8:	.word	0x20008f32
    8cec:	.word	0x200253d8
    8cf0:	.word	0x402c0000
    8cf4:	.word	0x200281c4
    8cf8:	.word	0x193a0020

00008cfc <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8cfc:	push	{r3, r4, r5, lr}
    8cfe:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    8d00:	ldr	r0, [pc, #96]	; (8d64 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    8d02:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    8d04:	bl	84e8 <waitTimeout(bool (*)())>
    8d08:	cbz	r0, 8d1c <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    8d0a:	ldr	r3, [pc, #92]	; (8d68 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d0c:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    8d0e:	movs	r0, #0
  m_errorCode = code;
    8d10:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d12:	mov.w	r2, #408	; 0x198
    8d16:	ldr	r3, [pc, #84]	; (8d6c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d18:	str	r2, [r3, #0]
}
    8d1a:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    8d1c:	ldr	r3, [pc, #80]	; (8d70 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    8d1e:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d20:	mov	r1, r4
  m_dmaBusy = true;
    8d22:	strb	r2, [r3, #0]
  m_irqstat = 0;
    8d24:	ldr	r3, [pc, #76]	; (8d74 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d26:	ldr	r2, [pc, #80]	; (8d78 <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    8d28:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    8d2a:	ldr	r3, [pc, #80]	; (8d7c <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d2c:	ldr	r0, [pc, #80]	; (8d80 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    8d2e:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    8d30:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    8d32:	ldr	r2, [pc, #80]	; (8d84 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    8d34:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    8d36:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8d3a:	cbnz	r0, 8d4c <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    8d3c:	ldr	r3, [pc, #40]	; (8d68 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d3e:	movs	r2, #4
    8d40:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d42:	movw	r2, #415	; 0x19f
    8d46:	ldr	r3, [pc, #36]	; (8d6c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d48:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    8d4a:	b.n	8d1a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    8d4c:	bl	876c <waitDmaStatus()>
    8d50:	cmp	r0, #0
    8d52:	bne.n	8d1a <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    8d54:	ldr	r3, [pc, #16]	; (8d68 <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    8d56:	movs	r2, #37	; 0x25
    8d58:	strb	r2, [r3, #0]
  m_errorLine = line;
    8d5a:	mov.w	r2, #418	; 0x1a2
    8d5e:	ldr	r3, [pc, #12]	; (8d6c <cardCMD6(unsigned long, unsigned char*)+0x70>)
    8d60:	b.n	8d48 <cardCMD6(unsigned long, unsigned char*)+0x4c>
    8d62:	nop
    8d64:	.word	0x00008701
    8d68:	.word	0x20008f32
    8d6c:	.word	0x200253d8
    8d70:	.word	0x20028286
    8d74:	.word	0x200273f8
    8d78:	.word	0x00010040
    8d7c:	.word	0x402c0000
    8d80:	.word	0x063a0011
    8d84:	.word	0x117f0002

00008d88 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    8d88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    8d8c:	movs	r4, #0
  m_initDone = false;
    8d8e:	ldr	r7, [pc, #524]	; (8f9c <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    8d90:	ldr	r5, [pc, #524]	; (8fa0 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    8d92:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    8d94:	ldr.w	r8, [pc, #584]	; 8fe0 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    8d98:	ldr	r6, [pc, #520]	; (8fa4 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    8d9a:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    8d9c:	strb	r4, [r0, #9]
  m_initDone = false;
    8d9e:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    8da0:	strb	r4, [r5, #0]
  m_highCapacity = false;
    8da2:	strb.w	r4, [r8]
  m_version2 = false;
    8da6:	strb	r4, [r6, #0]
  initSDHC();
    8da8:	bl	8588 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    8dac:	mov	r1, r4
    8dae:	mov	r0, r4
    8db0:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8db4:	mov	r4, r0
    8db6:	cbnz	r0, 8dcc <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    8db8:	movs	r3, #1
  m_errorLine = line;
    8dba:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    8dbe:	strb	r3, [r5, #0]
  m_errorLine = line;
    8dc0:	ldr	r3, [pc, #484]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8dc2:	str	r2, [r3, #0]
}
    8dc4:	mov	r0, r4
    8dc6:	add	sp, #68	; 0x44
    8dc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dcc:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    8dce:	ldr.w	r9, [pc, #532]	; 8fe4 <SdioCard::begin(SdioConfig)+0x25c>
    8dd2:	mov.w	r1, #426	; 0x1aa
    8dd6:	mov	r0, r9
    8dd8:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8ddc:	cbz	r0, 8e00 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    8dde:	ldr	r3, [pc, #460]	; (8fac <SdioCard::begin(SdioConfig)+0x224>)
    8de0:	ldr	r3, [r3, #16]
    8de2:	cmp.w	r3, #426	; 0x1aa
    8de6:	beq.n	8df8 <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    8de8:	movs	r3, #6
  m_errorLine = line;
    8dea:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    8dee:	strb	r3, [r5, #0]
  m_errorLine = line;
    8df0:	ldr	r3, [pc, #436]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    8df2:	movs	r4, #0
  m_errorLine = line;
    8df4:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    8df6:	b.n	8dc4 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    8df8:	movs	r3, #1
    8dfa:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8dfc:	ldr	r6, [pc, #432]	; (8fb0 <SdioCard::begin(SdioConfig)+0x228>)
    8dfe:	b.n	8e20 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    8e00:	subs	r4, #1
    8e02:	bne.n	8dd2 <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    8e04:	ldrb	r3, [r6, #0]
    8e06:	cmp	r3, #0
    8e08:	bne.n	8dfc <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    8e0a:	bl	8588 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    8e0e:	mov	r1, r4
    8e10:	mov	r0, r4
    8e12:	bl	8678 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    8e16:	ldrb	r3, [r6, #0]
    8e18:	cmp	r3, #0
    8e1a:	bne.n	8dfc <SdioCard::begin(SdioConfig)+0x74>
    8e1c:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    8e20:	bl	a96c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e24:	ldr.w	r9, [pc, #428]	; 8fd4 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    8e28:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e2a:	ldr.w	sl, [pc, #444]	; 8fe8 <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8e2e:	ldr.w	fp, [pc, #444]	; 8fec <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e32:	movs	r1, #0
    8e34:	mov	r0, r9
    8e36:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8e3a:	cbnz	r0, 8e48 <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    8e3c:	movs	r3, #23
  m_errorLine = line;
    8e3e:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    8e42:	strb	r3, [r5, #0]
  m_errorLine = line;
    8e44:	ldr	r3, [pc, #352]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8e46:	b.n	8df2 <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8e48:	mov	r1, r6
    8e4a:	mov	r0, sl
    8e4c:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8e50:	cmp	r0, #0
    8e52:	beq.n	8e3c <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    8e54:	bl	a96c <micros>
    8e58:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    8e5a:	cmp	r0, fp
    8e5c:	bhi.n	8e3c <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    8e5e:	ldr	r3, [pc, #332]	; (8fac <SdioCard::begin(SdioConfig)+0x224>)
    8e60:	ldr	r2, [r3, #16]
    8e62:	cmp	r2, #0
    8e64:	bge.n	8e32 <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    8e66:	ldr	r1, [r3, #16]
    8e68:	ldr	r2, [pc, #328]	; (8fb4 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e6a:	ldr	r0, [pc, #332]	; (8fb8 <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    8e6c:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e6e:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    8e70:	ldr	r3, [r3, #16]
    8e72:	lsls	r2, r3, #1
    m_highCapacity = true;
    8e74:	itt	mi
    8e76:	movmi	r3, #1
    8e78:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    8e7c:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8e80:	mov	r4, r0
    8e82:	cbnz	r0, 8e90 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    8e84:	movs	r3, #2
  m_errorLine = line;
    8e86:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    8e8a:	strb	r3, [r5, #0]
  m_errorLine = line;
    8e8c:	ldr	r3, [pc, #280]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8e8e:	b.n	8dc2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    8e90:	movs	r1, #0
    8e92:	ldr	r0, [pc, #296]	; (8fbc <SdioCard::begin(SdioConfig)+0x234>)
    8e94:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8e98:	mov	r4, r0
    8e9a:	cbnz	r0, 8ea8 <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    8e9c:	movs	r3, #3
  m_errorLine = line;
    8e9e:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    8ea2:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ea4:	ldr	r3, [pc, #256]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8ea6:	b.n	8dc2 <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8ea8:	ldr	r6, [pc, #256]	; (8fac <SdioCard::begin(SdioConfig)+0x224>)
    8eaa:	ldr.w	r8, [pc, #324]	; 8ff0 <SdioCard::begin(SdioConfig)+0x268>
    8eae:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8eb0:	ldr	r1, [pc, #268]	; (8fc0 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8eb2:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8eb4:	ldr	r0, [pc, #268]	; (8fc4 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    8eb6:	lsls	r3, r3, #16
    8eb8:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    8ebc:	bl	8714 <readReg16(unsigned long, void*)>
    8ec0:	mov	r4, r0
    8ec2:	cbnz	r0, 8ed0 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    8ec4:	movs	r3, #7
  m_errorLine = line;
    8ec6:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    8eca:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ecc:	ldr	r3, [pc, #216]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8ece:	b.n	8dc2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    8ed0:	ldr	r1, [pc, #244]	; (8fc8 <SdioCard::begin(SdioConfig)+0x240>)
    8ed2:	ldr	r0, [pc, #248]	; (8fcc <SdioCard::begin(SdioConfig)+0x244>)
    8ed4:	bl	8714 <readReg16(unsigned long, void*)>
    8ed8:	mov	r4, r0
    8eda:	cbnz	r0, 8ee8 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    8edc:	movs	r3, #8
  m_errorLine = line;
    8ede:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    8ee2:	strb	r3, [r5, #0]
  m_errorLine = line;
    8ee4:	ldr	r3, [pc, #192]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8ee6:	b.n	8dc2 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    8ee8:	ldr.w	r1, [r8]
    8eec:	ldr	r0, [pc, #224]	; (8fd0 <SdioCard::begin(SdioConfig)+0x248>)
    8eee:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8ef2:	mov	r4, r0
    8ef4:	cbnz	r0, 8f02 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    8ef6:	movs	r3, #5
  m_errorLine = line;
    8ef8:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    8efc:	strb	r3, [r5, #0]
  m_errorLine = line;
    8efe:	ldr	r3, [pc, #168]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8f00:	b.n	8dc2 <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    8f02:	ldr.w	r1, [r8]
    8f06:	ldr	r0, [pc, #204]	; (8fd4 <SdioCard::begin(SdioConfig)+0x24c>)
    8f08:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8f0c:	cbz	r0, 8f56 <SdioCard::begin(SdioConfig)+0x1ce>
    8f0e:	movs	r1, #2
    8f10:	ldr	r0, [pc, #196]	; (8fd8 <SdioCard::begin(SdioConfig)+0x250>)
    8f12:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    8f16:	mov	r4, r0
    8f18:	cbz	r0, 8f56 <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8f1a:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    8f1c:	mov	r1, sp
    8f1e:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    8f22:	bic.w	r3, r3, #6
    8f26:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    8f28:	ldr	r3, [r6, #40]	; 0x28
    8f2a:	orr.w	r3, r3, #2
    8f2e:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    8f30:	mov.w	r3, #1048592	; 0x100010
    8f34:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    8f36:	bl	8cfc <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    8f3a:	cbnz	r0, 8f62 <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    8f3c:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    8f40:	movs	r0, #5
    8f42:	bl	8338 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    8f46:	mov	r0, r2
    8f48:	bl	83e0 <setSdclk(unsigned long)>
  if (enable) {
    8f4c:	bl	8558 <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    8f50:	movs	r3, #1
    8f52:	strb	r3, [r7, #0]
  return true;
    8f54:	b.n	8dc4 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    8f56:	movs	r3, #20
  m_errorLine = line;
    8f58:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    8f5c:	strb	r3, [r5, #0]
  m_errorLine = line;
    8f5e:	ldr	r3, [pc, #72]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    8f60:	b.n	8df2 <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    8f62:	ldrb.w	r3, [sp, #13]
    8f66:	lsls	r3, r3, #30
    8f68:	bpl.n	8f3c <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    8f6a:	ldr	r6, [pc, #60]	; (8fa8 <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    8f6c:	mov	r1, sp
    8f6e:	ldr	r0, [pc, #108]	; (8fdc <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    8f70:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    8f74:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    8f78:	bl	8cfc <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    8f7c:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    8f80:	cbz	r0, 8f8a <SdioCard::begin(SdioConfig)+0x202>
    8f82:	and.w	r3, r3, #15
    8f86:	cmp	r3, #1
    8f88:	beq.n	8f94 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    8f8a:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    8f8e:	str.w	r8, [r6]
    8f92:	b.n	8f3c <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    8f94:	movw	r2, #50000	; 0xc350
    8f98:	b.n	8f40 <SdioCard::begin(SdioConfig)+0x1b8>
    8f9a:	nop
    8f9c:	.word	0x200281c2
    8fa0:	.word	0x20008f32
    8fa4:	.word	0x200281c3
    8fa8:	.word	0x200253d8
    8fac:	.word	0x402c0000
    8fb0:	.word	0x40300000
    8fb4:	.word	0x20026dec
    8fb8:	.word	0x02090000
    8fbc:	.word	0x031a0000
    8fc0:	.word	0x200281d6
    8fc4:	.word	0x09090000
    8fc8:	.word	0x200281c6
    8fcc:	.word	0x0a090000
    8fd0:	.word	0x071b0000
    8fd4:	.word	0x371a0000
    8fd8:	.word	0x061a0000
    8fdc:	.word	0x80fffff1
    8fe0:	.word	0x200281c4
    8fe4:	.word	0x081a0000
    8fe8:	.word	0x29020000
    8fec:	.word	0x000f4240
    8ff0:	.word	0x20026df0

00008ff4 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    8ff4:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8ff6:	ldr	r3, [pc, #148]	; (908c <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    8ff8:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    8ffa:	ldr	r2, [r3, #36]	; 0x24
    8ffc:	lsls	r0, r2, #22
    8ffe:	bmi.n	901c <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9000:	ldr	r2, [r3, #40]	; 0x28
    9002:	bic.w	r2, r2, #65536	; 0x10000
    9006:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9008:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    900a:	ldr	r2, [r3, #40]	; 0x28
    900c:	orr.w	r2, r2, #131072	; 0x20000
    9010:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9012:	ldr	r2, [r3, #40]	; 0x28
    9014:	orr.w	r2, r2, #65536	; 0x10000
    9018:	str	r2, [r3, #40]	; 0x28
    interrupts();
    901a:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    901c:	ldr	r0, [pc, #112]	; (9090 <SdioCard::readData(unsigned char*)+0x9c>)
    901e:	bl	84e8 <waitTimeout(bool (*)())>
    9022:	cbz	r0, 9036 <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9024:	ldr	r3, [pc, #108]	; (9094 <SdioCard::readData(unsigned char*)+0xa0>)
    9026:	movs	r2, #26
    9028:	strb	r2, [r3, #0]
  m_errorLine = line;
    902a:	movw	r2, #854	; 0x356
    902e:	ldr	r3, [pc, #104]	; (9098 <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9030:	movs	r0, #0
  m_errorLine = line;
    9032:	str	r2, [r3, #0]
}
    9034:	pop	{r3, r4, r5, pc}
    9036:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    903a:	ldr	r5, [pc, #80]	; (908c <SdioCard::readData(unsigned char*)+0x98>)
    903c:	ldr	r3, [r5, #36]	; 0x24
    903e:	lsls	r1, r3, #20
    9040:	bpl.n	903c <SdioCard::readData(unsigned char*)+0x48>
    9042:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9044:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9048:	ldr	r0, [r5, #32]
    904a:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    904e:	cmp	r3, r1
    9050:	bne.n	9048 <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9052:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9054:	cmp	r4, r2
    9056:	bne.n	903c <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9058:	ldr	r0, [pc, #64]	; (909c <SdioCard::readData(unsigned char*)+0xa8>)
    905a:	bl	84e8 <waitTimeout(bool (*)())>
    905e:	cbz	r0, 906e <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9060:	ldr	r3, [pc, #48]	; (9094 <SdioCard::readData(unsigned char*)+0xa0>)
    9062:	movs	r2, #29
    9064:	strb	r2, [r3, #0]
  m_errorLine = line;
    9066:	movw	r2, #865	; 0x361
    906a:	ldr	r3, [pc, #44]	; (9098 <SdioCard::readData(unsigned char*)+0xa4>)
    906c:	b.n	9030 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    906e:	ldr	r2, [r5, #48]	; 0x30
    9070:	ldr	r3, [pc, #44]	; (90a0 <SdioCard::readData(unsigned char*)+0xac>)
    9072:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9074:	ldr	r2, [r3, #0]
    9076:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9078:	ldr	r2, [r3, #0]
    907a:	lsls	r2, r2, #30
    907c:	bpl.n	9034 <SdioCard::readData(unsigned char*)+0x40>
    907e:	ldr	r2, [r3, #0]
    9080:	ldr	r3, [pc, #32]	; (90a4 <SdioCard::readData(unsigned char*)+0xb0>)
    9082:	tst	r2, r3
    9084:	ite	eq
    9086:	moveq	r0, #1
    9088:	movne	r0, #0
    908a:	b.n	9034 <SdioCard::readData(unsigned char*)+0x40>
    908c:	.word	0x402c0000
    9090:	.word	0x000083a1
    9094:	.word	0x20008f32
    9098:	.word	0x200253d8
    909c:	.word	0x000083c9
    90a0:	.word	0x200273f8
    90a4:	.word	0x117f0000

000090a8 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    90a8:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    90aa:	ldr	r0, [pc, #80]	; (90fc <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    90ac:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    90ae:	bl	850c <yieldTimeout(bool (*)())>
    90b2:	cbz	r0, 90c6 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    90b4:	ldr	r3, [pc, #72]	; (9100 <SdioCard::readStart(unsigned long)+0x58>)
    90b6:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    90b8:	movs	r0, #0
  m_errorCode = code;
    90ba:	strb	r2, [r3, #0]
  m_errorLine = line;
    90bc:	movw	r2, #945	; 0x3b1
    90c0:	ldr	r3, [pc, #64]	; (9104 <SdioCard::readStart(unsigned long)+0x5c>)
    90c2:	str	r2, [r3, #0]
}
    90c4:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    90c6:	ldr	r3, [pc, #64]	; (9108 <SdioCard::readStart(unsigned long)+0x60>)
    90c8:	ldr	r2, [r3, #40]	; 0x28
    90ca:	orr.w	r2, r2, #65536	; 0x10000
    90ce:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    90d0:	mov.w	r2, #512	; 0x200
    90d4:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    90d6:	ldr	r3, [pc, #52]	; (910c <SdioCard::readStart(unsigned long)+0x64>)
    90d8:	ldrb	r3, [r3, #0]
    90da:	cbnz	r3, 90de <SdioCard::readStart(unsigned long)+0x36>
    90dc:	lsls	r4, r4, #9
    90de:	mov	r1, r4
    90e0:	ldr	r0, [pc, #44]	; (9110 <SdioCard::readStart(unsigned long)+0x68>)
    90e2:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    90e6:	cmp	r0, #0
    90e8:	bne.n	90c4 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    90ea:	ldr	r3, [pc, #20]	; (9100 <SdioCard::readStart(unsigned long)+0x58>)
    90ec:	movs	r2, #12
    90ee:	strb	r2, [r3, #0]
  m_errorLine = line;
    90f0:	movw	r2, #957	; 0x3bd
    90f4:	ldr	r3, [pc, #12]	; (9104 <SdioCard::readStart(unsigned long)+0x5c>)
    90f6:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    90f8:	b.n	90c4 <SdioCard::readStart(unsigned long)+0x1c>
    90fa:	nop
    90fc:	.word	0x00008701
    9100:	.word	0x20008f32
    9104:	.word	0x200253d8
    9108:	.word	0x402c0000
    910c:	.word	0x200281c4
    9110:	.word	0x123a0030

00009114 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9114:	push	{r4, r5, r6, r7, lr}
    9116:	ldrb	r5, [r0, #8]
    9118:	sub.w	sp, sp, #516	; 0x204
    911c:	mov	r4, r0
    911e:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9120:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9124:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9126:	beq.n	9168 <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9128:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    912a:	ldr	r0, [pc, #132]	; (91b0 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    912c:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9130:	ite	eq
    9132:	moveq	r4, r2
    9134:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9136:	mov	r2, r4
    9138:	bl	879c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    913c:	mov	r5, r0
    913e:	cbnz	r0, 9156 <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9140:	ldr	r3, [pc, #112]	; (91b4 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9142:	movs	r2, #11
    9144:	strb	r2, [r3, #0]
  m_errorLine = line;
    9146:	mov.w	r2, #884	; 0x374
    914a:	ldr	r3, [pc, #108]	; (91b8 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    914c:	str	r2, [r3, #0]
}
    914e:	mov	r0, r5
    9150:	add.w	sp, sp, #516	; 0x204
    9154:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9156:	cmp	r4, r6
    9158:	beq.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    915a:	mov.w	r2, #512	; 0x200
    915e:	mov	r1, sp
    9160:	mov	r0, r6
    9162:	bl	9470 <memcpy>
    9166:	b.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9168:	bl	8a94 <waitTransferComplete()>
    916c:	cmp	r0, #0
    916e:	beq.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9170:	ldrb	r3, [r4, #9]
    9172:	cmp	r3, #1
    9174:	bne.n	917c <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9176:	ldr	r3, [r4, #4]
    9178:	cmp	r3, r7
    917a:	beq.n	919a <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    917c:	ldr	r3, [r4, #0]
    917e:	mov	r0, r4
    9180:	ldr	r3, [r3, #32]
    9182:	blx	r3
    9184:	cmp	r0, #0
    9186:	beq.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9188:	mov	r1, r7
    918a:	mov	r0, r4
    918c:	bl	90a8 <SdioCard::readStart(unsigned long)>
    9190:	cmp	r0, #0
    9192:	beq.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9194:	movs	r3, #1
      m_curSector = sector;
    9196:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9198:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    919a:	mov	r1, r6
    919c:	mov	r0, r4
    919e:	bl	8ff4 <SdioCard::readData(unsigned char*)>
    91a2:	cmp	r0, #0
    91a4:	beq.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    91a6:	ldr	r3, [r4, #4]
  return true;
    91a8:	mov	r5, r0
    m_curSector++;
    91aa:	adds	r3, #1
    91ac:	str	r3, [r4, #4]
    91ae:	b.n	914e <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    91b0:	.word	0x113a0011
    91b4:	.word	0x20008f32
    91b8:	.word	0x200253d8

000091bc <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    91bc:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91be:	ldr	r2, [pc, #76]	; (920c <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    91c0:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    91c2:	mov	r6, r1
  m_curState = IDLE_STATE;
    91c4:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91c6:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91c8:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91ca:	ldr	r0, [pc, #68]	; (9210 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    91cc:	bic.w	r3, r3, #65536	; 0x10000
    91d0:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    91d2:	bl	8678 <cardCommand(unsigned long, unsigned long)>
    91d6:	mov	r4, r0
    91d8:	cbnz	r0, 91ec <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    91da:	ldr	r3, [pc, #56]	; (9214 <SdioCard::stopTransmission(bool)+0x58>)
    91dc:	movs	r2, #9
    91de:	strb	r2, [r3, #0]
  m_errorLine = line;
    91e0:	movw	r2, #979	; 0x3d3
    91e4:	ldr	r3, [pc, #48]	; (9218 <SdioCard::stopTransmission(bool)+0x5c>)
    91e6:	str	r2, [r3, #0]
}
    91e8:	mov	r0, r4
    91ea:	pop	{r4, r5, r6, pc}
  if (blocking) {
    91ec:	cmp	r6, #0
    91ee:	beq.n	91e8 <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    91f0:	ldr	r0, [pc, #40]	; (921c <SdioCard::stopTransmission(bool)+0x60>)
    91f2:	bl	850c <yieldTimeout(bool (*)())>
    91f6:	cmp	r0, #0
    91f8:	beq.n	91e8 <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    91fa:	ldr	r3, [pc, #24]	; (9214 <SdioCard::stopTransmission(bool)+0x58>)
    91fc:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    91fe:	mov	r4, r5
  m_errorCode = code;
    9200:	strb	r2, [r3, #0]
  m_errorLine = line;
    9202:	movw	r2, #983	; 0x3d7
    9206:	ldr	r3, [pc, #16]	; (9218 <SdioCard::stopTransmission(bool)+0x5c>)
    9208:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    920a:	b.n	91e8 <SdioCard::stopTransmission(bool)+0x2c>
    920c:	.word	0x402c0000
    9210:	.word	0x0cdb0000
    9214:	.word	0x20008f32
    9218:	.word	0x200253d8
    921c:	.word	0x00008381

00009220 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    9220:	push	{r4, lr}
    9222:	mov	r4, r0
  if (!waitTransferComplete()) {
    9224:	bl	8a94 <waitTransferComplete()>
    9228:	cbz	r0, 923a <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    922a:	ldrb	r3, [r4, #9]
    922c:	cbz	r3, 923a <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    922e:	mov	r0, r4
    9230:	movs	r1, #1
}
    9232:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    9236:	b.w	91bc <SdioCard::stopTransmission(bool)>
}
    923a:	pop	{r4, pc}

0000923c <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    923c:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    923e:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    9240:	tst.w	r3, #2031616	; 0x1f0000
    9244:	beq.n	923e <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    9246:	ldr	r0, [r0, #116]	; 0x74
	}
    9248:	uxtb	r0, r0
    924a:	bx	lr

0000924c <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    924c:	push	{r0, r1, r2, r4, r5, lr}
    924e:	add	r3, sp, #8
    9250:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    9254:	ldrb	r2, [r0, #19]
    9256:	mov	r3, r1
    9258:	cmp	r2, #0
    925a:	beq.n	92d0 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    925c:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    925e:	ldrb	r2, [r0, #19]
    9260:	lsls	r1, r2, #31
    9262:	bpl.n	9276 <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    9264:	mov.w	r4, #3758153728	; 0xe000e000
    9268:	ldr	r5, [r0, #20]
    926a:	ldr.w	r1, [r4, #384]	; 0x180
    926e:	ands	r1, r5
    9270:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    9272:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    9276:	lsls	r5, r2, #30
    9278:	bpl.n	928c <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    927a:	mov.w	r4, #3758153728	; 0xe000e000
    927e:	ldr	r5, [r0, #24]
    9280:	ldr.w	r1, [r4, #388]	; 0x184
    9284:	ands	r1, r5
    9286:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    9288:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    928c:	lsls	r4, r2, #29
    928e:	bpl.n	92a2 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    9290:	mov.w	r4, #3758153728	; 0xe000e000
    9294:	ldr	r5, [r0, #28]
    9296:	ldr.w	r1, [r4, #392]	; 0x188
    929a:	ands	r1, r5
    929c:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    929e:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    92a2:	lsls	r1, r2, #28
    92a4:	bpl.n	92b8 <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    92a6:	mov.w	r4, #3758153728	; 0xe000e000
    92aa:	ldr	r5, [r0, #32]
    92ac:	ldr.w	r1, [r4, #396]	; 0x18c
    92b0:	ands	r1, r5
    92b2:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    92b4:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    92b8:	lsls	r2, r2, #27
    92ba:	bpl.n	92ce <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    92bc:	mov.w	r1, #3758153728	; 0xe000e000
    92c0:	ldr	r4, [r0, #36]	; 0x24
    92c2:	ldr.w	r2, [r1, #400]	; 0x190
    92c6:	ands	r2, r4
    92c8:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    92ca:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    92ce:	cpsie	i
		if (settings.clock() != _clock) {
    92d0:	ldr	r2, [r0, #8]
    92d2:	cmp	r3, r2
    92d4:	beq.n	9324 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    92d6:	ldr	r2, [pc, #112]	; (9348 <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    92d8:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    92da:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    92dc:	ldr	r1, [pc, #108]	; (934c <SPIClass::beginTransaction(SPISettings)+0x100>)
    92de:	ubfx	r4, r2, #4, #2
    92e2:	ubfx	r2, r2, #26, #3
    92e6:	ldr.w	r4, [r1, r4, lsl #2]
    92ea:	adds	r2, #1
    92ec:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    92f0:	cbz	r3, 933e <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    92f2:	cmp	r3, r1
    92f4:	bhi.n	930e <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    92f6:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    92fa:	udiv	r1, r1, r2
    92fe:	cmp	r3, r1
    9300:	bcs.n	9304 <SPIClass::beginTransaction(SPISettings)+0xb8>
    9302:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    9304:	cmp.w	r2, #258	; 0x102
    9308:	bcs.n	9312 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    930a:	cmp	r2, #2
    930c:	bhi.n	9316 <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    930e:	movs	r3, #0
    9310:	b.n	9318 <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    9312:	movw	r2, #257	; 0x101
				div = d-2;
    9316:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    9318:	lsrs	r1, r3, #1
    931a:	lsls	r2, r1, #16
    931c:	orr.w	r2, r2, r1, lsl #8
    9320:	orrs	r3, r2
    9322:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    9324:	ldr	r3, [r0, #0]
		port().CR = 0;
    9326:	movs	r2, #0
    9328:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    932a:	movs	r2, #3
    932c:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    932e:	ldr	r2, [r0, #12]
    9330:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    9332:	ldr	r2, [sp, #4]
    9334:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    9336:	movs	r2, #1
    9338:	str	r2, [r3, #16]
	}
    933a:	add	sp, #12
    933c:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    933e:	cmp	r4, r2
    9340:	bcc.n	9318 <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    9342:	mov	r2, r1
    9344:	b.n	9302 <SPIClass::beginTransaction(SPISettings)+0xb6>
    9346:	nop
    9348:	.word	0x400fc000
    934c:	.word	0x200005d4

00009350 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    9350:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    9354:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    9356:	ldr	r0, [r0, #0]
    9358:	bl	924c <SPIClass::beginTransaction(SPISettings)>
}
    935c:	pop	{r3, pc}

0000935e <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    935e:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    9360:	ldrb	r2, [r3, #19]
    9362:	cbz	r2, 93aa <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    9364:	lsls	r0, r2, #31
    9366:	bpl.n	9372 <SdSpiArduinoDriver::deactivate()+0x14>
    9368:	ldr	r0, [r3, #40]	; 0x28
    936a:	mov.w	r1, #3758153728	; 0xe000e000
    936e:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    9372:	lsls	r1, r2, #30
    9374:	bpl.n	9380 <SdSpiArduinoDriver::deactivate()+0x22>
    9376:	ldr	r0, [r3, #44]	; 0x2c
    9378:	mov.w	r1, #3758153728	; 0xe000e000
    937c:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    9380:	lsls	r0, r2, #29
    9382:	bpl.n	938e <SdSpiArduinoDriver::deactivate()+0x30>
    9384:	ldr	r0, [r3, #48]	; 0x30
    9386:	mov.w	r1, #3758153728	; 0xe000e000
    938a:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    938e:	lsls	r1, r2, #28
    9390:	bpl.n	939c <SdSpiArduinoDriver::deactivate()+0x3e>
    9392:	ldr	r0, [r3, #52]	; 0x34
    9394:	mov.w	r1, #3758153728	; 0xe000e000
    9398:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    939c:	lsls	r2, r2, #27
    939e:	bpl.n	93aa <SdSpiArduinoDriver::deactivate()+0x4c>
    93a0:	ldr	r2, [r3, #56]	; 0x38
    93a2:	mov.w	r3, #3758153728	; 0xe000e000
    93a6:	str.w	r2, [r3, #272]	; 0x110
}
    93aa:	bx	lr

000093ac <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    93ac:	ldr	r0, [r0, #0]
    93ae:	b.w	47c2 <SPIClass::end()>

000093b2 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    93b2:	ldr	r3, [r0, #0]
    93b4:	movs	r1, #255	; 0xff
    93b6:	ldr	r0, [r3, #0]
    93b8:	b.w	923c <SPIClass::transfer(unsigned char) [clone .isra.0]>

000093bc <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    93bc:	push	{r0, r1, r2, r4, r5, lr}
    93be:	mov	r4, r1
    93c0:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    93c2:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    93c4:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    93c6:	mov	r0, r4
    93c8:	bl	942c <memset>
		transfer(buf, buf, count);
    93cc:	ldr	r0, [r5, #0]
    93ce:	ldr	r3, [sp, #4]
    93d0:	mov	r2, r4
    93d2:	mov	r1, r4
    93d4:	bl	476c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    93d8:	movs	r0, #0
    93da:	add	sp, #12
    93dc:	pop	{r4, r5, pc}

000093de <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    93de:	ldr	r3, [r0, #0]
    93e0:	ldr	r0, [r3, #0]
    93e2:	b.w	923c <SPIClass::transfer(unsigned char) [clone .isra.0]>

000093e6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    93e6:	subs	r3, r2, #1
    93e8:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    93ec:	push	{r4, r5, r6, lr}
    93ee:	mov	r6, r0
    93f0:	sub.w	sp, sp, #512	; 0x200
    93f4:	mov	r4, r1
    93f6:	mov	r5, r2
  if (0 < count && count <= 512) {
    93f8:	bcc.n	940e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    93fa:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    93fc:	cmp	r4, r5
    93fe:	beq.n	9420 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    9400:	ldr	r3, [r6, #0]
    9402:	ldrb.w	r1, [r4], #1
    9406:	ldr	r0, [r3, #0]
    9408:	bl	923c <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    940c:	b.n	93fc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    940e:	mov	r0, sp
    9410:	bl	9470 <memcpy>
    9414:	mov	r2, sp
    9416:	mov	r3, r5
    9418:	ldr	r0, [r6, #0]
    941a:	mov	r1, r2
    941c:	bl	476c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    9420:	add.w	sp, sp, #512	; 0x200
    9424:	pop	{r4, r5, r6, pc}

00009426 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    9426:	b.w	ad3c <digitalWrite>
	...

0000942c <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    942c:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    942e:	cbz	r2, 946c <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    9430:	cmp	r2, #16
    blt     .L_bytewise
    9432:	blt.n	9464 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    9434:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    9438:	cbz	r3, 9448 <memset+0x1c>
    rsb     r3, #8
    943a:	rsb	r3, r3, #8
    subs    r2, r3
    943e:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    9440:	subs	r3, #1
    strb    r1, [r0], #1
    9442:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    9446:	bgt.n	9440 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    9448:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    944a:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    944e:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    9452:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    9454:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    9456:	subs	r3, #1
    strd    r1, r12, [r0], #8
    9458:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    945c:	bgt.n	9456 <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    945e:	ands.w	r2, r2, #7
    beq     .L_done
    9462:	beq.n	946c <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    9464:	subs	r2, #1
    strb    r1, [r0], #1
    9466:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    946a:	bgt.n	9464 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    946c:	pop	{r0, pc}
    946e:	nop

00009470 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    9470:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    9472:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9476:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    947a:	bne.n	9558 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    947c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    947e:	bcc.n	9504 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9480:	ldr.w	r3, [r1], #4
    9484:	str.w	r3, [r0], #4
    9488:	ldr.w	r3, [r1], #4
    948c:	str.w	r3, [r0], #4
    9490:	ldr.w	r3, [r1], #4
    9494:	str.w	r3, [r0], #4
    9498:	ldr.w	r3, [r1], #4
    949c:	str.w	r3, [r0], #4
    94a0:	ldr.w	r3, [r1], #4
    94a4:	str.w	r3, [r0], #4
    94a8:	ldr.w	r3, [r1], #4
    94ac:	str.w	r3, [r0], #4
    94b0:	ldr.w	r3, [r1], #4
    94b4:	str.w	r3, [r0], #4
    94b8:	ldr.w	r3, [r1], #4
    94bc:	str.w	r3, [r0], #4
    94c0:	ldr.w	r3, [r1], #4
    94c4:	str.w	r3, [r0], #4
    94c8:	ldr.w	r3, [r1], #4
    94cc:	str.w	r3, [r0], #4
    94d0:	ldr.w	r3, [r1], #4
    94d4:	str.w	r3, [r0], #4
    94d8:	ldr.w	r3, [r1], #4
    94dc:	str.w	r3, [r0], #4
    94e0:	ldr.w	r3, [r1], #4
    94e4:	str.w	r3, [r0], #4
    94e8:	ldr.w	r3, [r1], #4
    94ec:	str.w	r3, [r0], #4
    94f0:	ldr.w	r3, [r1], #4
    94f4:	str.w	r3, [r0], #4
    94f8:	ldr.w	r3, [r1], #4
    94fc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9500:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9502:	bcs.n	9480 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9504:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9506:	bcc.n	952c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9508:	ldr.w	r3, [r1], #4
    950c:	str.w	r3, [r0], #4
    9510:	ldr.w	r3, [r1], #4
    9514:	str.w	r3, [r0], #4
    9518:	ldr.w	r3, [r1], #4
    951c:	str.w	r3, [r0], #4
    9520:	ldr.w	r3, [r1], #4
    9524:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9528:	subs	r2, #16
	bhs	.Lmid_block_loop
    952a:	bcs.n	9508 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    952c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    952e:	bcc.n	953c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9530:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9534:	str.w	r3, [r0], #4
	subs	r2, #4
    9538:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    953a:	bcs.n	9530 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    953c:	adds	r2, #4
	beq	.Ldone
    953e:	beq.n	9552 <memcpy+0xe2>

	lsls	r2, r2, #31
    9540:	lsls	r2, r2, #31
	itt ne
    9542:	itt	ne
	ldrbne  r3, [r1], #1
    9544:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9548:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    954c:	bcc.n	9552 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    954e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    9550:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    9552:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    9554:	bx	lr
    9556:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    9558:	cmp	r2, #8
	blo	.Lbyte_copy
    955a:	bcc.n	9584 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    955c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    955e:	beq.n	947c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9560:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9564:	beq.n	947c <memcpy+0xc>

	rsb	r3, #4
    9566:	rsb	r3, r3, #4
	subs	r2, r3
    956a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    956c:	lsls	r3, r3, #31
	itt ne
    956e:	itt	ne
	ldrbne  r3, [r1], #1
    9570:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9574:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9578:	bcc.n	947c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    957a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    957e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    9582:	b.n	947c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9584:	subs	r2, #4
	blo	.Lcopy_less_than_4
    9586:	bcc.n	953c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9588:	subs	r2, #1
	ldrb    r3, [r1], #1
    958a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    958e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9592:	bcs.n	9588 <memcpy+0x118>

	ldrb	r3, [r1]
    9594:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9596:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9598:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    959a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    959c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    959e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    95a0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    95a2:	bx	lr

000095a4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    95a4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    95a6:	ldr	r4, [pc, #80]	; (95f8 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95a8:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95ac:	ldr	r5, [pc, #76]	; (95fc <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95ae:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    95b2:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95b6:	ldr	r7, [pc, #72]	; (9600 <rx_queue_transfer+0x5c>)
    95b8:	add.w	r5, r5, r0, lsl #5
{
    95bc:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    95be:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    95c2:	mov	r1, r4
    95c4:	ldrh	r2, [r7, #0]
    95c6:	mov	r0, r5
    95c8:	bl	a648 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    95cc:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    95ce:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    95d0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    95d4:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    95d8:	adds	r4, #32
	} while (location < end_addr);
    95da:	cmp	r3, r4
    95dc:	bhi.n	95d4 <rx_queue_transfer+0x30>
	asm("dsb");
    95de:	dsb	sy
	asm("isb");
    95e2:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    95e6:	movs	r0, #3
    95e8:	mov	r1, r5
    95ea:	bl	a698 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    95ee:	mov.w	r3, #131072	; 0x20000
    95f2:	str.w	r3, [r6, #268]	; 0x10c
}
    95f6:	pop	{r3, r4, r5, r6, r7, pc}
    95f8:	.word	0x20200800
    95fc:	.word	0x2000b740
    9600:	.word	0x200281b6

00009604 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9604:	ldr	r3, [r0, #4]
    9606:	ldr	r2, [pc, #136]	; (9690 <rx_event+0x8c>)
    9608:	ubfx	r3, r3, #16, #15
{
    960c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9610:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9612:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9614:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9616:	cmp	r4, #0
    9618:	ble.n	9662 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    961a:	ldr	r2, [pc, #120]	; (9694 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    961c:	uxth.w	sl, r4
		if (head != rx_tail) {
    9620:	ldr	r0, [pc, #116]	; (9698 <rx_event+0x94>)
		uint32_t head = rx_head;
    9622:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    9624:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    9626:	uxtb	r3, r1
		if (head != rx_tail) {
    9628:	ldr.w	r8, [pc, #128]	; 96ac <rx_event+0xa8>
    962c:	cmp	r1, r0
    962e:	ldr	r7, [pc, #108]	; (969c <rx_event+0x98>)
    9630:	ldr	r1, [pc, #108]	; (96a0 <rx_event+0x9c>)
    9632:	beq.n	966c <rx_event+0x68>
			uint32_t ii = rx_list[head];
    9634:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    9638:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    963c:	rsb	r0, r6, #512	; 0x200
    9640:	cmp	r4, r0
    9642:	bhi.n	966c <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9644:	ldr	r3, [pc, #92]	; (96a4 <rx_event+0xa0>)
    9646:	add.w	r0, r6, r9, lsl #9
    964a:	mov	r2, r4
				rx_count[ii] = count + len;
    964c:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    964e:	add.w	r1, r3, r5, lsl #9
    9652:	add	r0, r3
    9654:	bl	9470 <memcpy>
				rx_available += len;
    9658:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    965a:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    965e:	add	r3, r4
    9660:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9662:	mov	r0, r5
	}
}
    9664:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    9668:	b.w	95a4 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    966c:	adds	r3, #1
		rx_index[i] = 0;
    966e:	movs	r6, #0
    9670:	ldr	r0, [pc, #52]	; (96a8 <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    9672:	cmp	r3, #9
		rx_count[i] = len;
    9674:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    9678:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    967c:	it	cs
    967e:	movcs	r3, r6
		rx_list[head] = i;
    9680:	strb	r5, [r1, r3]
		rx_head = head;
    9682:	uxtb	r3, r3
    9684:	strb	r3, [r2, #0]
		rx_available += len;
    9686:	ldr	r3, [r7, #0]
    9688:	add	r4, r3
    968a:	str	r4, [r7, #0]
}
    968c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9690:	.word	0x200281b6
    9694:	.word	0x20028314
    9698:	.word	0x20028324
    969c:	.word	0x20027a84
    96a0:	.word	0x20028316
    96a4:	.word	0x20200800
    96a8:	.word	0x200281a6
    96ac:	.word	0x20028196

000096b0 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    96b0:	ldr	r3, [pc, #112]	; (9724 <usb_serial_flush_callback+0x74>)
{
    96b2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    96b6:	ldrb	r2, [r3, #0]
    96b8:	and.w	r3, r2, #255	; 0xff
    96bc:	cbnz	r2, 971e <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    96be:	ldr	r2, [pc, #104]	; (9728 <usb_serial_flush_callback+0x78>)
    96c0:	ldrb	r2, [r2, #0]
    96c2:	cbz	r2, 971e <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    96c4:	ldr	r7, [pc, #100]	; (972c <usb_serial_flush_callback+0x7c>)
    96c6:	ldrh	r5, [r7, #0]
    96c8:	cbz	r5, 971e <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    96ca:	ldr	r6, [pc, #100]	; (9730 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    96cc:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    96d0:	ldr	r1, [pc, #96]	; (9734 <usb_serial_flush_callback+0x84>)
    96d2:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    96d4:	ldr	r4, [pc, #96]	; (9738 <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    96d6:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    96da:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    96de:	mov	r2, r5
    96e0:	mov	r0, r8
    96e2:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    96e4:	add	r5, r4
    96e6:	bl	a648 <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    96ea:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    96ee:	mov.w	r3, #3758153728	; 0xe000e000
    96f2:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    96f6:	adds	r4, #32
	} while (location < end_addr);
    96f8:	cmp	r5, r4
    96fa:	bhi.n	96f2 <usb_serial_flush_callback+0x42>
	asm("dsb");
    96fc:	dsb	sy
	asm("isb");
    9700:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9704:	movs	r0, #3
    9706:	mov	r1, r8
    9708:	bl	a674 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    970c:	ldrb	r3, [r6, #0]
    970e:	movs	r2, #0
    9710:	adds	r3, #1
	tx_available = 0;
    9712:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    9714:	uxtb	r3, r3
    9716:	cmp	r3, #3
    9718:	ite	ls
    971a:	strbls	r3, [r6, #0]
    971c:	strbhi	r2, [r6, #0]
}
    971e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9722:	nop
    9724:	.word	0x2002832a
    9728:	.word	0x2002832c
    972c:	.word	0x200281bc
    9730:	.word	0x20028328
    9734:	.word	0x2000b8c0
    9738:	.word	0x20201800

0000973c <usb_serial_reset>:
}
    973c:	bx	lr
	...

00009740 <usb_serial_configure>:
	if (usb_high_speed) {
    9740:	ldr	r3, [pc, #180]	; (97f8 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9742:	movs	r2, #128	; 0x80
    9744:	movs	r1, #0
    9746:	ldr	r0, [pc, #180]	; (97fc <usb_serial_configure+0xbc>)
{
    9748:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    974a:	ldrb	r3, [r3, #0]
	tx_head = 0;
    974c:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    974e:	ldr	r5, [pc, #176]	; (9800 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    9750:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    9752:	ldr	r6, [pc, #176]	; (9804 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    9754:	ite	eq
    9756:	moveq	r3, #64	; 0x40
    9758:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    975c:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    975e:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9760:	bl	942c <memset>
	tx_head = 0;
    9764:	ldr	r3, [pc, #160]	; (9808 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9766:	mov.w	r2, #256	; 0x100
    976a:	mov	r1, r4
    976c:	ldr	r0, [pc, #156]	; (980c <usb_serial_configure+0xcc>)
	tx_head = 0;
    976e:	strb	r4, [r3, #0]
	tx_available = 0;
    9770:	ldr	r3, [pc, #156]	; (9810 <usb_serial_configure+0xd0>)
    9772:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9774:	bl	942c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9778:	movs	r2, #16
    977a:	mov	r1, r4
    977c:	ldr	r0, [pc, #148]	; (9814 <usb_serial_configure+0xd4>)
    977e:	bl	942c <memset>
	memset(rx_index, 0, sizeof(rx_index));
    9782:	movs	r2, #16
    9784:	mov	r1, r4
    9786:	ldr	r0, [pc, #144]	; (9818 <usb_serial_configure+0xd8>)
    9788:	bl	942c <memset>
	rx_head = 0;
    978c:	ldr	r3, [pc, #140]	; (981c <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    978e:	mov	r2, r4
    9790:	movs	r1, #16
	rx_head = 0;
    9792:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9794:	movs	r0, #2
	rx_tail = 0;
    9796:	ldr	r3, [pc, #136]	; (9820 <usb_serial_configure+0xe0>)
    9798:	strb	r4, [r3, #0]
	rx_available = 0;
    979a:	ldr	r3, [pc, #136]	; (9824 <usb_serial_configure+0xe4>)
    979c:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    979e:	mov	r3, r4
    97a0:	bl	a608 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    97a4:	ldr	r3, [pc, #128]	; (9828 <usb_serial_configure+0xe8>)
    97a6:	mov	r2, r4
    97a8:	ldrh	r1, [r6, #0]
    97aa:	movs	r0, #3
    97ac:	bl	a5c8 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    97b0:	mov	r3, r4
    97b2:	movs	r2, #1
    97b4:	ldrh	r1, [r5, #0]
    97b6:	movs	r0, #3
    97b8:	bl	a608 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    97bc:	mov	r0, r4
    97be:	adds	r4, #1
    97c0:	bl	95a4 <rx_queue_transfer>
    97c4:	cmp	r4, #8
    97c6:	bne.n	97bc <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    97c8:	ldr	r3, [pc, #96]	; (982c <usb_serial_configure+0xec>)
    97ca:	ldr	r2, [pc, #100]	; (9830 <usb_serial_configure+0xf0>)
    97cc:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    97ce:	movs	r2, #0
    97d0:	ldr	r3, [pc, #96]	; (9834 <usb_serial_configure+0xf4>)
    97d2:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    97d6:	movs	r2, #74	; 0x4a
    97d8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    97dc:	ldr.w	r2, [r3, #328]	; 0x148
    97e0:	orr.w	r2, r2, #16777216	; 0x1000000
    97e4:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    97e8:	ldr	r3, [pc, #76]	; (9838 <usb_serial_configure+0xf8>)
    97ea:	cbz	r3, 97f6 <usb_serial_configure+0xb6>
    97ec:	ldr	r2, [pc, #76]	; (983c <usb_serial_configure+0xfc>)
    97ee:	ldrb	r3, [r2, #0]
    97f0:	orr.w	r3, r3, #1
    97f4:	strb	r3, [r2, #0]
}
    97f6:	pop	{r4, r5, r6, pc}
    97f8:	.word	0x2002832d
    97fc:	.word	0x2000b8c0
    9800:	.word	0x200281be
    9804:	.word	0x200281b6
    9808:	.word	0x20028328
    980c:	.word	0x2000b740
    9810:	.word	0x200281bc
    9814:	.word	0x20028196
    9818:	.word	0x200281a6
    981c:	.word	0x20028314
    9820:	.word	0x20028324
    9824:	.word	0x20027a84
    9828:	.word	0x00009605
    982c:	.word	0x20028160
    9830:	.word	0x000096b1
    9834:	.word	0x402e0000
    9838:	.word	0x00000000
    983c:	.word	0x2002832f

00009840 <usb_serial_read>:
{
    9840:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9844:	mov.w	r3, #3758153728	; 0xe000e000
    9848:	mov.w	r2, #131072	; 0x20000
{
    984c:	mov	r7, r0
    984e:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9850:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    9854:	movs	r5, #0
	uint32_t tail = rx_tail;
    9856:	ldr	r3, [pc, #160]	; (98f8 <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    9858:	ldr.w	fp, [pc, #176]	; 990c <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    985c:	ldrb	r4, [r3, #0]
    985e:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    9860:	cmp	r5, r8
    9862:	bcs.n	986c <usb_serial_read+0x2c>
    9864:	ldr	r3, [pc, #148]	; (98fc <usb_serial_read+0xbc>)
    9866:	ldrb	r2, [r3, #0]
    9868:	cmp	r2, r4
    986a:	bne.n	9880 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    986c:	mov.w	r3, #3758153728	; 0xe000e000
    9870:	mov.w	r2, #131072	; 0x20000
}
    9874:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9876:	str.w	r2, [r3, #268]	; 0x10c
}
    987a:	add	sp, #12
    987c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    9880:	adds	r4, #1
		uint32_t i = rx_list[tail];
    9882:	ldr	r3, [pc, #124]	; (9900 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    9884:	ldr	r0, [pc, #124]	; (9904 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    9886:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    988a:	cmp	r4, #9
    988c:	ldr.w	sl, [pc, #128]	; 9910 <usb_serial_read+0xd0>
    9890:	it	cs
    9892:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9894:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    9898:	ldrh.w	r1, [fp, r9, lsl #1]
    989c:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98a0:	ldr	r0, [pc, #100]	; (9908 <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    98a2:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98a4:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    98a8:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98aa:	add	r1, r0
		if (avail > len) {
    98ac:	bcs.n	98d4 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    98ae:	mov	r0, r7
    98b0:	str	r2, [sp, #4]
    98b2:	bl	9470 <memcpy>
			rx_available -= len;
    98b6:	ldr.w	r1, [sl]
			rx_index[i] += len;
    98ba:	ldr	r2, [sp, #4]
			rx_available -= len;
    98bc:	sub.w	r1, r1, r8
    98c0:	add	r1, r5
    98c2:	mov	r5, r8
    98c4:	str.w	r1, [sl]
			rx_index[i] += len;
    98c8:	ldrh.w	r1, [fp, r9, lsl #1]
    98cc:	add	r2, r1
    98ce:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    98d2:	b.n	9860 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    98d4:	mov	r2, r6
    98d6:	mov	r0, r7
    98d8:	bl	9470 <memcpy>
			rx_available -= avail;
    98dc:	ldr.w	r2, [sl]
			rx_tail = tail;
    98e0:	ldr	r3, [pc, #20]	; (98f8 <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    98e2:	mov	r0, r9
			rx_available -= avail;
    98e4:	subs	r2, r2, r6
			p += avail;
    98e6:	add	r7, r6
			count += avail;
    98e8:	add	r5, r6
			rx_available -= avail;
    98ea:	str.w	r2, [sl]
			rx_tail = tail;
    98ee:	uxtb	r2, r4
    98f0:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    98f2:	bl	95a4 <rx_queue_transfer>
    98f6:	b.n	9860 <usb_serial_read+0x20>
    98f8:	.word	0x20028324
    98fc:	.word	0x20028314
    9900:	.word	0x20028316
    9904:	.word	0x20028196
    9908:	.word	0x20200800
    990c:	.word	0x200281a6
    9910:	.word	0x20027a84

00009914 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    9914:	ldr	r3, [pc, #44]	; (9944 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    9916:	ldr	r1, [pc, #48]	; (9948 <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    9918:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    991a:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    991c:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    991e:	cmp	r2, r1
    9920:	beq.n	993e <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    9922:	adds	r3, #1
	uint32_t i = rx_list[tail];
    9924:	ldr	r2, [pc, #36]	; (994c <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    9926:	cmp	r3, #9
    9928:	it	cs
    992a:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    992c:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    992e:	ldr	r3, [pc, #32]	; (9950 <usb_serial_peekchar+0x3c>)
    9930:	ldrh.w	r1, [r3, r2, lsl #1]
    9934:	ldr	r3, [pc, #28]	; (9954 <usb_serial_peekchar+0x40>)
    9936:	add.w	r3, r3, r2, lsl #9
    993a:	ldrb	r0, [r3, r1]
    993c:	bx	lr
	if (tail == rx_head) return -1;
    993e:	mov.w	r0, #4294967295
}
    9942:	bx	lr
    9944:	.word	0x20028324
    9948:	.word	0x20028314
    994c:	.word	0x20028316
    9950:	.word	0x200281a6
    9954:	.word	0x20200800

00009958 <usb_serial_available>:
	uint32_t n = rx_available;
    9958:	ldr	r3, [pc, #12]	; (9968 <usb_serial_available+0x10>)
{
    995a:	push	{r4, lr}
	uint32_t n = rx_available;
    995c:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    995e:	cbnz	r4, 9964 <usb_serial_available+0xc>
    9960:	bl	b268 <yield>
}
    9964:	mov	r0, r4
    9966:	pop	{r4, pc}
    9968:	.word	0x20027a84

0000996c <usb_serial_flush_input>:
{
    996c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    9970:	ldr	r5, [pc, #64]	; (99b4 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    9972:	ldr	r7, [pc, #68]	; (99b8 <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    9974:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    9976:	ldr.w	r8, [pc, #80]	; 99c8 <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    997a:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    997c:	ldr	r6, [pc, #60]	; (99bc <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    997e:	ldrb	r3, [r7, #0]
    9980:	cmp	r3, r4
    9982:	bne.n	9988 <usb_serial_flush_input+0x1c>
}
    9984:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    9988:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    998a:	ldr	r2, [pc, #52]	; (99c0 <usb_serial_flush_input+0x54>)
    998c:	ldr	r1, [pc, #52]	; (99c4 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    998e:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    9990:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    9992:	it	cs
    9994:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9996:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    999a:	ldrh.w	r2, [r2, r0, lsl #1]
    999e:	ldrh.w	r1, [r1, r0, lsl #1]
    99a2:	subs	r2, r2, r1
    99a4:	subs	r3, r3, r2
    99a6:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    99a8:	bl	95a4 <rx_queue_transfer>
		rx_tail = tail;
    99ac:	uxtb	r3, r4
    99ae:	strb	r3, [r5, #0]
    99b0:	b.n	997e <usb_serial_flush_input+0x12>
    99b2:	nop
    99b4:	.word	0x20028324
    99b8:	.word	0x20028314
    99bc:	.word	0x20027a84
    99c0:	.word	0x20028196
    99c4:	.word	0x200281a6
    99c8:	.word	0x20028316

000099cc <usb_serial_getchar>:
{
    99cc:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    99ce:	movs	r1, #1
    99d0:	add.w	r0, sp, #7
    99d4:	bl	9840 <usb_serial_read>
    99d8:	cbz	r0, 99e4 <usb_serial_getchar+0x18>
    99da:	ldrb.w	r0, [sp, #7]
}
    99de:	add	sp, #12
    99e0:	ldr.w	pc, [sp], #4
	return -1;
    99e4:	mov.w	r0, #4294967295
    99e8:	b.n	99de <usb_serial_getchar+0x12>
	...

000099ec <usb_serial_write>:
	if (!usb_configuration) return 0;
    99ec:	ldr	r3, [pc, #356]	; (9b54 <usb_serial_write+0x168>)
{
    99ee:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    99f2:	ldrb	r3, [r3, #0]
{
    99f4:	mov	r6, r0
    99f6:	mov	r5, r1
	if (!usb_configuration) return 0;
    99f8:	and.w	r4, r3, #255	; 0xff
    99fc:	cmp	r3, #0
    99fe:	beq.w	9b12 <usb_serial_write+0x126>
	uint32_t sent=0;
    9a02:	movs	r4, #0
		tx_noautoflush = 1;
    9a04:	ldr.w	fp, [pc, #360]	; 9b70 <usb_serial_write+0x184>
	while (size > 0) {
    9a08:	cmp	r5, #0
    9a0a:	beq.w	9b12 <usb_serial_write+0x126>
		tx_noautoflush = 1;
    9a0e:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    9a10:	ldr.w	r9, [pc, #352]	; 9b74 <usb_serial_write+0x188>
		while (!tx_available) {
    9a14:	ldr	r7, [pc, #320]	; (9b58 <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    9a16:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    9a1a:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    9a1e:	ldr	r3, [pc, #316]	; (9b5c <usb_serial_write+0x170>)
    9a20:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    9a24:	movs	r3, #0
		int waiting=0;
    9a26:	mov	r8, r3
		while (!tx_available) {
    9a28:	ldrh	r1, [r7, #0]
    9a2a:	cbnz	r1, 9a4a <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    9a2c:	mov	r0, sl
    9a2e:	strd	r3, r1, [sp]
    9a32:	bl	a6b4 <usb_transfer_status>
			if (!(status & 0x80)) {
    9a36:	ands.w	r0, r0, #128	; 0x80
    9a3a:	ldr	r2, [pc, #292]	; (9b60 <usb_serial_write+0x174>)
    9a3c:	ldrd	r3, r1, [sp]
    9a40:	bne.n	9aee <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    9a42:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    9a46:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    9a48:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a4a:	ldrh.w	r8, [r7]
    9a4e:	ldrb.w	r3, [r9]
    9a52:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    9a56:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9a58:	mov.w	r2, r3, lsl #11
    9a5c:	add.w	r0, r0, r3, lsl #11
    9a60:	ldr	r3, [pc, #256]	; (9b64 <usb_serial_write+0x178>)
    9a62:	str	r2, [sp, #0]
    9a64:	add	r0, r3
		if (size >= tx_available) {
    9a66:	bhi.n	9b34 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    9a68:	mov	r2, r8
    9a6a:	mov	r1, r6
    9a6c:	bl	9470 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a70:	ldr	r2, [sp, #0]
    9a72:	ldr	r3, [pc, #240]	; (9b64 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a74:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a76:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a78:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9a7a:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9a7c:	mov.w	r2, #2048	; 0x800
    9a80:	mov	r1, r8
    9a82:	bl	a648 <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9a86:	mov	r1, r8
	asm("dsb");
    9a88:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    9a8c:	add.w	r2, r8, #2048	; 0x800
    9a90:	add.w	r3, r8, #32
    9a94:	cmp	r3, r2
    9a96:	ite	hi
    9a98:	movhi	r3, #1
    9a9a:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    9a9c:	mov.w	r2, #3758153728	; 0xe000e000
    9aa0:	add.w	r3, r8, r3, lsl #5
    9aa4:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    9aa8:	adds	r1, #32
	} while (location < end_addr);
    9aaa:	cmp	r1, r3
    9aac:	bne.n	9aa4 <usb_serial_write+0xb8>
	asm("dsb");
    9aae:	dsb	sy
	asm("isb");
    9ab2:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9ab6:	movs	r0, #3
    9ab8:	mov	r1, sl
    9aba:	bl	a674 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9abe:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    9ac2:	ldr	r2, [pc, #164]	; (9b68 <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    9ac4:	adds	r3, #1
    9ac6:	uxtb	r3, r3
    9ac8:	cmp	r3, #3
    9aca:	it	hi
    9acc:	movhi	r3, #0
    9ace:	strb.w	r3, [r9]
			size -= tx_available;
    9ad2:	ldrh	r3, [r7, #0]
    9ad4:	subs	r5, r5, r3
			sent += tx_available;
    9ad6:	add	r4, r3
			data += tx_available;
    9ad8:	add	r6, r3
			tx_available = 0;
    9ada:	movs	r3, #0
    9adc:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    9ade:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    9ae2:	dsb	sy
		tx_noautoflush = 0;
    9ae6:	movs	r3, #0
    9ae8:	strb.w	r3, [fp]
    9aec:	b.n	9a08 <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    9aee:	dsb	sy
			tx_noautoflush = 0;
    9af2:	strb.w	r1, [fp]
			if (!waiting) {
    9af6:	cmp.w	r8, #0
    9afa:	bne.n	9b00 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    9afc:	ldr	r3, [pc, #108]	; (9b6c <usb_serial_write+0x180>)
    9afe:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    9b00:	ldrb	r1, [r2, #0]
    9b02:	cbnz	r1, 9b12 <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9b04:	ldr	r1, [pc, #100]	; (9b6c <usb_serial_write+0x180>)
    9b06:	ldr	r1, [r1, #0]
    9b08:	subs	r1, r1, r3
    9b0a:	cmp	r1, #120	; 0x78
    9b0c:	bls.n	9b1a <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    9b0e:	movs	r3, #1
    9b10:	strb	r3, [r2, #0]
}
    9b12:	mov	r0, r4
    9b14:	add	sp, #12
    9b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    9b1a:	ldr	r1, [pc, #56]	; (9b54 <usb_serial_write+0x168>)
    9b1c:	ldrb	r1, [r1, #0]
    9b1e:	cmp	r1, #0
    9b20:	beq.n	9b12 <usb_serial_write+0x126>
			tx_noautoflush = 1;
    9b22:	mov.w	r8, #1
    9b26:	str	r3, [sp, #0]
			yield();
    9b28:	bl	b268 <yield>
			tx_noautoflush = 1;
    9b2c:	ldr	r3, [sp, #0]
    9b2e:	strb.w	r8, [fp]
    9b32:	b.n	9a28 <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    9b34:	mov	r2, r5
    9b36:	mov	r1, r6
    9b38:	bl	9470 <memcpy>
			tx_available -= size;
    9b3c:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9b40:	ldr	r3, [pc, #36]	; (9b68 <usb_serial_write+0x17c>)
    9b42:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    9b46:	add	r4, r5
			tx_available -= size;
    9b48:	strh.w	r8, [r7]
			size = 0;
    9b4c:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9b4e:	str.w	r2, [r3, #132]	; 0x84
}
    9b52:	b.n	9ae2 <usb_serial_write+0xf6>
    9b54:	.word	0x2002832c
    9b58:	.word	0x200281bc
    9b5c:	.word	0x2000b8c0
    9b60:	.word	0x20028327
    9b64:	.word	0x20201800
    9b68:	.word	0x402e0000
    9b6c:	.word	0x20028140
    9b70:	.word	0x2002832a
    9b74:	.word	0x20028328

00009b78 <usb_serial_putchar>:
{
    9b78:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    9b7a:	movs	r1, #1
{
    9b7c:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    9b80:	add.w	r0, sp, #7
    9b84:	bl	99ec <usb_serial_write>
}
    9b88:	add	sp, #12
    9b8a:	ldr.w	pc, [sp], #4
	...

00009b90 <usb_serial_write_buffer_free>:
{
    9b90:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    9b94:	movs	r4, #0
	tx_noautoflush = 1;
    9b96:	ldr	r7, [pc, #56]	; (9bd0 <usb_serial_write_buffer_free+0x40>)
    9b98:	movs	r3, #1
    9b9a:	ldr	r6, [pc, #56]	; (9bd4 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    9b9c:	mov	r5, r4
		if (i == tx_head) continue;
    9b9e:	ldr.w	r8, [pc, #56]	; 9bd8 <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    9ba2:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    9ba4:	ldrb.w	r3, [r8]
    9ba8:	cmp	r3, r4
    9baa:	beq.n	9bba <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    9bac:	mov	r0, r6
    9bae:	bl	a6b4 <usb_transfer_status>
    9bb2:	lsls	r3, r0, #24
    9bb4:	it	pl
    9bb6:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    9bba:	adds	r4, #1
    9bbc:	adds	r6, #32
    9bbe:	cmp	r4, #4
    9bc0:	bne.n	9ba4 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    9bc2:	dsb	sy
	tx_noautoflush = 0;
    9bc6:	movs	r3, #0
}
    9bc8:	mov	r0, r5
	tx_noautoflush = 0;
    9bca:	strb	r3, [r7, #0]
}
    9bcc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9bd0:	.word	0x2002832a
    9bd4:	.word	0x2000b8c0
    9bd8:	.word	0x20028328

00009bdc <usb_serial_flush_output>:
{
    9bdc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    9be0:	ldr	r3, [pc, #116]	; (9c58 <usb_serial_flush_output+0x7c>)
    9be2:	ldrb	r3, [r3, #0]
    9be4:	cbz	r3, 9c54 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    9be6:	ldr.w	r8, [pc, #132]	; 9c6c <usb_serial_flush_output+0x90>
    9bea:	ldrh.w	r5, [r8]
    9bee:	cbz	r5, 9c54 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    9bf0:	ldr	r7, [pc, #104]	; (9c5c <usb_serial_flush_output+0x80>)
    9bf2:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    9bf4:	ldr	r6, [pc, #104]	; (9c60 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    9bf6:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    9bfa:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    9bfc:	ldr	r2, [pc, #100]	; (9c64 <usb_serial_flush_output+0x88>)
    9bfe:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c00:	ldr	r4, [pc, #100]	; (9c68 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    9c02:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c06:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c08:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c0c:	movs	r3, #0
    9c0e:	mov	r0, r9
    9c10:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    9c12:	add	r5, r4
    9c14:	bl	a648 <usb_prepare_transfer>
	asm("dsb");
    9c18:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    9c1c:	mov.w	r3, #3758153728	; 0xe000e000
    9c20:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    9c24:	adds	r4, #32
	} while (location < end_addr);
    9c26:	cmp	r5, r4
    9c28:	bhi.n	9c20 <usb_serial_flush_output+0x44>
	asm("dsb");
    9c2a:	dsb	sy
	asm("isb");
    9c2e:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9c32:	movs	r0, #3
    9c34:	mov	r1, r9
    9c36:	bl	a674 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9c3a:	ldrb	r3, [r6, #0]
    9c3c:	movs	r2, #0
    9c3e:	adds	r3, #1
	tx_available = 0;
    9c40:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    9c44:	uxtb	r3, r3
    9c46:	cmp	r3, #3
    9c48:	ite	ls
    9c4a:	strbls	r3, [r6, #0]
    9c4c:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    9c4e:	dsb	sy
	tx_noautoflush = 0;
    9c52:	strb	r2, [r7, #0]
}
    9c54:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9c58:	.word	0x2002832c
    9c5c:	.word	0x2002832a
    9c60:	.word	0x20028328
    9c64:	.word	0x2000b8c0
    9c68:	.word	0x20201800
    9c6c:	.word	0x200281bc

00009c70 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9c70:	ldr	r3, [pc, #512]	; (9e74 <set_arm_clock+0x204>)
{
    9c72:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    9c74:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    9c76:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    9c78:	sub.w	r3, r3, #507904	; 0x7c000
    9c7c:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    9c7e:	ldr	r3, [pc, #504]	; (9e78 <set_arm_clock+0x208>)
    9c80:	cmp	r0, r3
    9c82:	bls.w	9e44 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    9c86:	ldr	r3, [pc, #500]	; (9e7c <set_arm_clock+0x20c>)
    9c88:	cmp	r0, r3
    9c8a:	bls.w	9e56 <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    9c8e:	ldr	r2, [pc, #496]	; (9e80 <set_arm_clock+0x210>)
    9c90:	subs	r3, r0, r3
    9c92:	udiv	r3, r3, r2
    9c96:	movs	r2, #25
    9c98:	muls	r3, r2
    9c9a:	movw	r2, #1575	; 0x627
    9c9e:	addw	r3, r3, #1250	; 0x4e2
    9ca2:	cmp	r3, r2
    9ca4:	it	cs
    9ca6:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9ca8:	ldr	r6, [pc, #456]	; (9e74 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9caa:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    9cae:	ldr.w	r2, [r6, #128]	; 0x80
    9cb2:	orr.w	r2, r2, #192	; 0xc0
    9cb6:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    9cba:	movs	r2, #25
    9cbc:	udiv	r2, r3, r2
    9cc0:	and.w	r3, r4, #31
    9cc4:	cmp	r3, r2
    9cc6:	bcs.n	9cd8 <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9cc8:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9ccc:	ldr	r3, [pc, #436]	; (9e84 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9cce:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    9cd0:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9cd2:	ldr	r6, [r3, #0]
    9cd4:	cmp	r6, #0
    9cd6:	bge.n	9cd2 <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    9cd8:	ands.w	r3, r1, #33554432	; 0x2000000
    9cdc:	bne.n	9d30 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    9cde:	ldr	r6, [pc, #424]	; (9e88 <set_arm_clock+0x218>)
    9ce0:	ldr	r7, [pc, #424]	; (9e8c <set_arm_clock+0x21c>)
    9ce2:	ldr	r6, [r6, #16]
    9ce4:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    9ce6:	cmp	r6, r7
    9ce8:	itee	eq
    9cea:	moveq	r6, #3
    9cec:	movne	r6, #0
    9cee:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    9cf0:	lsls	r7, r6, #27
    9cf2:	eor.w	r6, r1, r6, lsl #27
    9cf6:	tst.w	r6, #939524096	; 0x38000000
    9cfa:	beq.n	9d06 <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    9cfc:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    9d00:	ldr	r6, [pc, #368]	; (9e74 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    9d02:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    9d04:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    9d06:	lsls	r6, r3, #12
    9d08:	eor.w	r3, r5, r3, lsl #12
    9d0c:	tst.w	r3, #12288	; 0x3000
    9d10:	beq.n	9d22 <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    9d12:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    9d16:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    9d18:	ldr	r5, [pc, #344]	; (9e74 <set_arm_clock+0x204>)
    9d1a:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    9d1c:	ldr	r3, [r5, #72]	; 0x48
    9d1e:	lsls	r6, r3, #28
    9d20:	bmi.n	9d1c <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    9d22:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    9d26:	ldr	r3, [pc, #332]	; (9e74 <set_arm_clock+0x204>)
    9d28:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9d2a:	ldr	r5, [r3, #72]	; 0x48
    9d2c:	lsls	r5, r5, #26
    9d2e:	bmi.n	9d2a <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    9d30:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    9d32:	ldr	r7, [pc, #348]	; (9e90 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    9d34:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    9d36:	mul.w	r3, r6, r5
    9d3a:	muls	r3, r0
    9d3c:	cmp	r3, r7
    9d3e:	bls.w	9e5c <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d42:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    9d46:	ldr	r0, [pc, #332]	; (9e94 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d48:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    9d4c:	cmp	r3, r0
    9d4e:	ldr	r0, [pc, #328]	; (9e98 <set_arm_clock+0x228>)
    9d50:	bhi.w	9e70 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    9d54:	udiv	r3, r3, r0
    9d58:	cmp	r3, #54	; 0x36
    9d5a:	it	cc
    9d5c:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d5e:	ldr	r7, [pc, #296]	; (9e88 <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d60:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d62:	ldr.w	lr, [pc, #344]	; 9ebc <set_arm_clock+0x24c>
    9d66:	ldr.w	ip, [r7]
    9d6a:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    9d6e:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d72:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    9d76:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d7a:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    9d7c:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    9d80:	beq.n	9d96 <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9d82:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    9d86:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    9d8a:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    9d8e:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    9d90:	ldr	r3, [r7, #0]
    9d92:	cmp	r3, #0
    9d94:	bge.n	9d90 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    9d96:	ldr	r3, [pc, #220]	; (9e74 <set_arm_clock+0x204>)
    9d98:	subs	r5, #1
    9d9a:	ldr	r7, [r3, #16]
    9d9c:	and.w	r7, r7, #7
    9da0:	cmp	r7, r5
    9da2:	beq.n	9dac <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    9da4:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    9da6:	ldr	r5, [r3, #72]	; 0x48
    9da8:	lsls	r7, r5, #15
    9daa:	bmi.n	9da6 <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    9dac:	subs	r3, r6, #1
    9dae:	lsls	r5, r3, #10
    9db0:	eor.w	r3, r1, r3, lsl #10
    9db4:	tst.w	r3, #7168	; 0x1c00
    9db8:	beq.n	9dce <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9dba:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    9dbe:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    9dc2:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    9dc4:	ldr	r3, [pc, #172]	; (9e74 <set_arm_clock+0x204>)
    9dc6:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    9dc8:	ldr	r5, [r3, #72]	; 0x48
    9dca:	lsls	r5, r5, #30
    9dcc:	bmi.n	9dc8 <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9dce:	ldr	r3, [pc, #204]	; (9e9c <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    9dd0:	ldr	r5, [pc, #204]	; (9ea0 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9dd2:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    9dd4:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9dd6:	itet	ls
    9dd8:	ldrls	r5, [pc, #200]	; (9ea4 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    9dda:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    9ddc:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    9de0:	subs	r6, r3, #1
    9de2:	lsls	r5, r6, #8
    9de4:	eor.w	r6, r1, r6, lsl #8
    9de8:	tst.w	r6, #768	; 0x300
    9dec:	ldr	r6, [pc, #132]	; (9e74 <set_arm_clock+0x204>)
    9dee:	beq.n	9dfc <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    9df0:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    9df4:	and.w	r5, r5, #768	; 0x300
    9df8:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    9dfa:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9dfc:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9dfe:	ldr	r5, [pc, #116]	; (9e74 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    9e00:	bic.w	r1, r1, #33554432	; 0x2000000
    9e04:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    9e06:	ldr	r1, [r5, #72]	; 0x48
    9e08:	lsls	r1, r1, #26
    9e0a:	bmi.n	9e06 <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    9e0c:	ldr	r1, [pc, #152]	; (9ea8 <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    9e0e:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    9e12:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    9e14:	ldr	r1, [pc, #148]	; (9eac <set_arm_clock+0x23c>)
    9e16:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    9e18:	mov.w	r3, #4294967295
    9e1c:	ldr	r1, [pc, #144]	; (9eb0 <set_arm_clock+0x240>)
    9e1e:	udiv	r1, r0, r1
    9e22:	udiv	r3, r3, r1
    9e26:	ldr	r1, [pc, #140]	; (9eb4 <set_arm_clock+0x244>)
    9e28:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    9e2a:	and.w	r3, r4, #31
    9e2e:	cmp	r2, r3
    9e30:	bcs.n	9e42 <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    9e32:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    9e36:	ldr	r3, [pc, #76]	; (9e84 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    9e38:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    9e3a:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    9e3c:	ldr	r2, [r3, #0]
    9e3e:	cmp	r2, #0
    9e40:	bge.n	9e3c <set_arm_clock+0x1cc>
	}

	return frequency;
}
    9e42:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    9e44:	ldr	r6, [pc, #112]	; (9eb8 <set_arm_clock+0x248>)
    9e46:	movw	r3, #1150	; 0x47e
    9e4a:	movw	r2, #950	; 0x3b6
    9e4e:	cmp	r0, r6
    9e50:	it	ls
    9e52:	movls	r3, r2
    9e54:	b.n	9ca8 <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    9e56:	movw	r3, #1250	; 0x4e2
    9e5a:	b.n	9ca8 <set_arm_clock+0x38>
		if (div_arm < 8) {
    9e5c:	cmp	r5, #8
    9e5e:	beq.n	9e64 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    9e60:	adds	r5, #1
    9e62:	b.n	9d36 <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    9e64:	cmp	r6, #4
    9e66:	bhi.w	9d42 <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    9e6a:	adds	r6, #1
				div_arm = 1;
    9e6c:	movs	r5, #1
    9e6e:	b.n	9d36 <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    9e70:	movs	r3, #108	; 0x6c
    9e72:	b.n	9d5e <set_arm_clock+0xee>
    9e74:	.word	0x400fc000
    9e78:	.word	0x1f78a400
    9e7c:	.word	0x23c34600
    9e80:	.word	0x01ab3f00
    9e84:	.word	0x40080000
    9e88:	.word	0x400d8000
    9e8c:	.word	0x80003040
    9e90:	.word	0x269fb1ff
    9e94:	.word	0x4df67eff
    9e98:	.word	0x00b71b00
    9e9c:	.word	0x08f0d17f
    9ea0:	.word	0x2cb4177f
    9ea4:	.word	0x08f0d180
    9ea8:	.word	0x20008940
    9eac:	.word	0x2000893c
    9eb0:	.word	0x000f4240
    9eb4:	.word	0x20027aac
    9eb8:	.word	0x016e3600
    9ebc:	.word	0x8001307f

00009ec0 <endpoint0_receive>:
{
    9ec0:	push	{r4, r5, lr}
    9ec2:	ldr	r4, [pc, #136]	; (9f4c <endpoint0_receive+0x8c>)
	if (len > 0) {
    9ec4:	cbz	r1, 9f08 <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9ec6:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    9ec8:	ldr	r3, [pc, #132]	; (9f50 <endpoint0_receive+0x90>)
    9eca:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9ecc:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9ed0:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    9ed2:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9ed4:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9ed6:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    9eda:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9edc:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9ede:	add.w	r1, r0, #8192	; 0x2000
    9ee2:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9ee4:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9ee8:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9eec:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9eee:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    9ef0:	movs	r3, #0
    9ef2:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    9ef4:	ldr	r3, [pc, #92]	; (9f54 <endpoint0_receive+0x94>)
    9ef6:	ldr.w	r1, [r3, #432]	; 0x1b0
    9efa:	orrs	r1, r5
    9efc:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    9f00:	ldr.w	r1, [r3, #432]	; 0x1b0
    9f04:	cmp	r1, #0
    9f06:	bne.n	9f00 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    9f08:	ldr	r3, [pc, #76]	; (9f58 <endpoint0_receive+0x98>)
    9f0a:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9f0c:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9f0e:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    9f12:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9f14:	movw	r1, #32896	; 0x8080
    9f18:	it	eq
    9f1a:	moveq	r1, #128	; 0x80
    9f1c:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    9f1e:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    9f20:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    9f24:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9f26:	mov.w	r1, #65537	; 0x10001
    9f2a:	ldr	r3, [pc, #40]	; (9f54 <endpoint0_receive+0x94>)
    9f2c:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9f30:	ldr.w	r1, [r3, #432]	; 0x1b0
    9f34:	orr.w	r1, r1, #65536	; 0x10000
    9f38:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9f3c:	ldr	r1, [pc, #28]	; (9f5c <endpoint0_receive+0x9c>)
    9f3e:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    9f40:	ldr.w	r2, [r3, #432]	; 0x1b0
    9f44:	cmp	r2, #0
    9f46:	bne.n	9f40 <endpoint0_receive+0x80>
}
    9f48:	pop	{r4, r5, pc}
    9f4a:	nop
    9f4c:	.word	0x20000000
    9f50:	.word	0x200092e0
    9f54:	.word	0x402e0000
    9f58:	.word	0x200092c0
    9f5c:	.word	0x20027968

00009f60 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    9f60:	ldr	r3, [r0, #56]	; 0x38
{
    9f62:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    9f64:	cbz	r3, 9f6e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    9f66:	ldr	r3, [r2, #4]
    9f68:	orr.w	r3, r3, #32768	; 0x8000
    9f6c:	str	r3, [r2, #4]
	}
	__disable_irq();
    9f6e:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    9f70:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    9f72:	ldr	r3, [pc, #96]	; (9fd4 <schedule_transfer+0x74>)
    9f74:	cbz	r4, 9fc0 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    9f76:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    9f78:	ldr.w	r4, [r3, #432]	; 0x1b0
    9f7c:	tst	r4, r1
    9f7e:	bne.n	9fba <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    9f80:	ldr	r6, [pc, #84]	; (9fd8 <schedule_transfer+0x78>)
    9f82:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    9f84:	ldr.w	r4, [r3, #320]	; 0x140
    9f88:	orr.w	r4, r4, #16384	; 0x4000
    9f8c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    9f90:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    9f94:	ldr.w	r5, [r3, #320]	; 0x140
    9f98:	lsls	r5, r5, #17
    9f9a:	bmi.n	9fa6 <schedule_transfer+0x46>
    9f9c:	ldr	r5, [r6, #4]
    9f9e:	subs	r5, r5, r7
    9fa0:	cmp.w	r5, #2400	; 0x960
    9fa4:	bcc.n	9f84 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    9fa6:	ands	r4, r1
    9fa8:	bne.n	9fba <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    9faa:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    9fae:	ldr	r4, [pc, #36]	; (9fd4 <schedule_transfer+0x74>)
    9fb0:	ldr.w	r3, [r4, #432]	; 0x1b0
    9fb4:	orrs	r3, r1
    9fb6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    9fba:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    9fbc:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9fbe:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    9fc0:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    9fc4:	ldr.w	r4, [r3, #432]	; 0x1b0
    9fc8:	orrs	r1, r4
    9fca:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    9fce:	str	r2, [r0, #48]	; 0x30
    9fd0:	b.n	9fba <schedule_transfer+0x5a>
    9fd2:	nop
    9fd4:	.word	0x402e0000
    9fd8:	.word	0xe0001000

00009fdc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    9fdc:	push	{r4, r5, r6, lr}
    9fde:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9fe0:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    9fe2:	cbz	r0, 9ff4 <run_callbacks+0x18>
    9fe4:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    9fe6:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    9fe8:	ldr	r3, [r2, #4]
    9fea:	ands.w	r3, r3, #128	; 0x80
    9fee:	beq.n	9ff6 <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    9ff0:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9ff2:	cbnz	r5, a004 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    9ff4:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    9ff6:	ldr	r2, [r2, #0]
		count++;
    9ff8:	adds	r5, #1
		if ((uint32_t)t == 1) {
    9ffa:	cmp	r2, #1
    9ffc:	bne.n	9fe8 <run_callbacks+0xc>
			ep->last_transfer = NULL;
    9ffe:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    a002:	b.n	9ff2 <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    a004:	ldr	r6, [r0, #0]
		count--;
    a006:	subs	r5, #1
		ep->callback_function(first);
    a008:	ldr	r3, [r4, #56]	; 0x38
    a00a:	blx	r3
		first = next;
    a00c:	mov	r0, r6
    a00e:	b.n	9ff2 <run_callbacks+0x16>

0000a010 <usb_endpoint_config>:
{
    a010:	push	{r4, r5, r6, lr}
    a012:	mov	r4, r0
    a014:	mov	r6, r1
    a016:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    a018:	movs	r1, #0
    a01a:	movs	r2, #60	; 0x3c
    a01c:	adds	r0, #4
    a01e:	bl	942c <memset>
	qh->next = 1; // Terminate bit = 1
    a022:	movs	r3, #1
	qh->config = config;
    a024:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    a026:	str	r3, [r4, #8]
	qh->callback_function = callback;
    a028:	str	r5, [r4, #56]	; 0x38
}
    a02a:	pop	{r4, r5, r6, pc}

0000a02c <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    a02c:	ldr	r2, [pc, #124]	; (a0ac <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    a02e:	push	{r4, lr}
	if (len > 0) {
    a030:	cbz	r1, a076 <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a032:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    a034:	ldr	r3, [pc, #120]	; (a0b0 <endpoint0_transmit.constprop.0+0x84>)
    a036:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a038:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    a03c:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    a03e:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    a040:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a042:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    a046:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    a048:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    a04a:	add.w	r1, r0, #8192	; 0x2000
    a04e:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a050:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a054:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    a058:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    a05a:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    a05c:	movs	r3, #0
    a05e:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    a060:	ldr	r3, [pc, #80]	; (a0b4 <endpoint0_transmit.constprop.0+0x88>)
    a062:	ldr.w	r1, [r3, #432]	; 0x1b0
    a066:	orr.w	r1, r1, #65536	; 0x10000
    a06a:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    a06e:	ldr.w	r1, [r3, #432]	; 0x1b0
    a072:	cmp	r1, #0
    a074:	bne.n	a06e <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    a076:	ldr	r3, [pc, #64]	; (a0b8 <endpoint0_transmit.constprop.0+0x8c>)
    a078:	movs	r1, #1
    a07a:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    a07c:	movs	r1, #128	; 0x80
    a07e:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    a080:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    a082:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    a086:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    a088:	mov.w	r2, #65537	; 0x10001
    a08c:	ldr	r3, [pc, #36]	; (a0b4 <endpoint0_transmit.constprop.0+0x88>)
    a08e:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    a092:	ldr.w	r2, [r3, #432]	; 0x1b0
    a096:	orr.w	r2, r2, #1
    a09a:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    a09e:	ldr	r2, [pc, #28]	; (a0bc <endpoint0_transmit.constprop.0+0x90>)
    a0a0:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    a0a2:	ldr.w	r2, [r3, #432]	; 0x1b0
    a0a6:	cmp	r2, #0
    a0a8:	bne.n	a0a2 <endpoint0_transmit.constprop.0+0x76>
}
    a0aa:	pop	{r4, pc}
    a0ac:	.word	0x20000000
    a0b0:	.word	0x200092e0
    a0b4:	.word	0x402e0000
    a0b8:	.word	0x200092c0
    a0bc:	.word	0x20027968

0000a0c0 <usb_start_sof_interrupts>:
	__disable_irq();
    a0c0:	cpsid	i
	sof_usage |= (1 << interface);
    a0c2:	ldr	r2, [pc, #40]	; (a0ec <usb_start_sof_interrupts+0x2c>)
    a0c4:	movs	r3, #1
    a0c6:	lsl.w	r0, r3, r0
    a0ca:	ldrb	r3, [r2, #0]
    a0cc:	orrs	r0, r3
    a0ce:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    a0d0:	ldr	r2, [pc, #28]	; (a0f0 <usb_start_sof_interrupts+0x30>)
    a0d2:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    a0d6:	lsls	r1, r3, #24
    a0d8:	bmi.n	a0e6 <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a0da:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a0dc:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    a0de:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    a0e2:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    a0e6:	cpsie	i
}
    a0e8:	bx	lr
    a0ea:	nop
    a0ec:	.word	0x20028326
    a0f0:	.word	0x402e0000

0000a0f4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    a0f4:	movs	r3, #1
    a0f6:	ldr	r2, [pc, #32]	; (a118 <usb_stop_sof_interrupts+0x24>)
    a0f8:	lsl.w	r0, r3, r0
    a0fc:	ldrb	r3, [r2, #0]
    a0fe:	bic.w	r0, r3, r0
    a102:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    a104:	cbnz	r0, a114 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    a106:	ldr	r2, [pc, #20]	; (a11c <usb_stop_sof_interrupts+0x28>)
    a108:	ldr.w	r3, [r2, #328]	; 0x148
    a10c:	bic.w	r3, r3, #128	; 0x80
    a110:	str.w	r3, [r2, #328]	; 0x148
}
    a114:	bx	lr
    a116:	nop
    a118:	.word	0x20028326
    a11c:	.word	0x402e0000

0000a120 <usb_isr>:
{
    a120:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    a124:	ldr	r4, [pc, #676]	; (a3cc <usb_isr+0x2ac>)
    a126:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a12a:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    a12c:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    a130:	bmi.n	a198 <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    a132:	lsls	r1, r6, #25
    a134:	bmi.w	a55e <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    a138:	lsls	r4, r6, #7
    a13a:	bpl.n	a144 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    a13c:	ldr	r3, [pc, #656]	; (a3d0 <usb_isr+0x2b0>)
    a13e:	ldr	r3, [r3, #0]
    a140:	cbz	r3, a144 <usb_isr+0x24>
    a142:	blx	r3
	if (status & USB_USBSTS_TI1) {
    a144:	lsls	r0, r6, #6
    a146:	bpl.n	a150 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    a148:	ldr	r3, [pc, #648]	; (a3d4 <usb_isr+0x2b4>)
    a14a:	ldr	r3, [r3, #0]
    a14c:	cbz	r3, a150 <usb_isr+0x30>
    a14e:	blx	r3
	if (status & USB_USBSTS_PCI) {
    a150:	lsls	r1, r6, #29
    a152:	bpl.n	a166 <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    a154:	ldr	r3, [pc, #628]	; (a3cc <usb_isr+0x2ac>)
    a156:	ldr	r2, [pc, #640]	; (a3d8 <usb_isr+0x2b8>)
    a158:	ldr.w	r3, [r3, #388]	; 0x184
    a15c:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    a160:	it	ne
    a162:	movne	r3, #1
			usb_high_speed = 0;
    a164:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    a166:	ldr	r3, [pc, #612]	; (a3cc <usb_isr+0x2ac>)
    a168:	ldr.w	r3, [r3, #328]	; 0x148
    a16c:	lsls	r2, r3, #24
    a16e:	bpl.w	a58e <usb_isr+0x46e>
    a172:	lsls	r3, r6, #24
    a174:	bpl.w	a58e <usb_isr+0x46e>
		if (usb_reboot_timer) {
    a178:	ldr	r2, [pc, #608]	; (a3dc <usb_isr+0x2bc>)
    a17a:	ldrb	r3, [r2, #0]
    a17c:	cmp	r3, #0
    a17e:	beq.w	a58e <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    a182:	subs	r3, #1
    a184:	uxtb	r3, r3
    a186:	strb	r3, [r2, #0]
    a188:	cmp	r3, #0
    a18a:	bne.w	a58e <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    a18e:	movs	r0, #3
    a190:	bl	a0f4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    a194:	bl	16518 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    a198:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a19c:	ldr	r7, [pc, #576]	; (a3e0 <usb_isr+0x2c0>)
		while (setupstatus) {
    a19e:	cmp	r3, #0
    a1a0:	bne.n	a22a <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    a1a2:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    a1a6:	cmp	r5, #0
    a1a8:	beq.n	a132 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    a1aa:	ldr	r2, [pc, #568]	; (a3e4 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    a1ac:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    a1b0:	ldr	r1, [r2, #0]
    a1b2:	tst	r5, r1
    a1b4:	beq.n	a1ec <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    a1b6:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a1b8:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    a1bc:	ldr	r2, [pc, #552]	; (a3e8 <usb_isr+0x2c8>)
    a1be:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    a1c0:	ldrh	r2, [r2, #0]
    a1c2:	cmp	r2, r1
    a1c4:	bne.w	a520 <usb_isr+0x400>
    a1c8:	uxth	r3, r3
    a1ca:	cbnz	r3, a1ec <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a1cc:	ldr	r2, [pc, #540]	; (a3ec <usb_isr+0x2cc>)
    a1ce:	ldr	r3, [pc, #544]	; (a3f0 <usb_isr+0x2d0>)
    a1d0:	ldr	r0, [r2, #0]
    a1d2:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    a1d4:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    a1d6:	ldrb	r2, [r2, #6]
    a1d8:	str	r0, [r3, #0]
    a1da:	strh	r1, [r3, #4]
    a1dc:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    a1de:	bne.n	a1ec <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    a1e0:	movs	r0, #3
    a1e2:	bl	a0c0 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    a1e6:	ldr	r3, [pc, #500]	; (a3dc <usb_isr+0x2bc>)
    a1e8:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    a1ea:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    a1ec:	ldr	r3, [pc, #516]	; (a3f4 <usb_isr+0x2d4>)
    a1ee:	ldr	r3, [r3, #0]
			if (completestatus) {
    a1f0:	ands	r5, r3
    a1f2:	beq.n	a132 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    a1f4:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a1f6:	ldr.w	r8, [pc, #512]	; a3f8 <usb_isr+0x2d8>
					tx &= ~(1<<p);
    a1fa:	mov.w	r9, #1
				while (tx) {
    a1fe:	cmp	r4, #0
    a200:	bne.w	a542 <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    a204:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    a206:	ldr	r7, [pc, #496]	; (a3f8 <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    a208:	mov.w	r8, #1
				while(rx) {
    a20c:	cmp	r5, #0
    a20e:	beq.n	a132 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    a210:	rbit	r4, r5
    a214:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a218:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    a21c:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    a220:	bl	9fdc <run_callbacks>
					rx &= ~(1<<p);
    a224:	bic.w	r5, r5, r4
    a228:	b.n	a20c <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    a22a:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    a22e:	ldr	r3, [pc, #456]	; (a3f8 <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    a230:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    a234:	ldr.w	r2, [r4, #320]	; 0x140
    a238:	orr.w	r2, r2, #8192	; 0x2000
    a23c:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    a240:	ldr.w	r2, [r4, #320]	; 0x140
    a244:	lsls	r2, r2, #18
    a246:	bpl.n	a234 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    a248:	ldr.w	r2, [r4, #320]	; 0x140
    a24c:	bic.w	r2, r2, #8192	; 0x2000
    a250:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    a254:	mov.w	r2, #65537	; 0x10001
    a258:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    a25c:	ldr.w	r2, [r4, #436]	; 0x1b4
    a260:	ands.w	r8, r2, #65537	; 0x10001
    a264:	bne.n	a25c <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    a266:	uxth	r1, r5
    a268:	ldr	r2, [pc, #376]	; (a3e4 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    a26a:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    a26e:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    a272:	beq.w	a3ae <usb_isr+0x28e>
    a276:	bhi.n	a30e <usb_isr+0x1ee>
    a278:	movw	r2, #770	; 0x302
    a27c:	cmp	r1, r2
    a27e:	beq.w	a452 <usb_isr+0x332>
    a282:	bhi.n	a2a2 <usb_isr+0x182>
    a284:	cmp	r1, #130	; 0x82
    a286:	beq.w	a41c <usb_isr+0x2fc>
    a28a:	cmp.w	r1, #258	; 0x102
    a28e:	beq.w	a478 <usb_isr+0x358>
    a292:	cmp	r1, #128	; 0x80
    a294:	beq.w	a3be <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    a298:	mov.w	r3, #65537	; 0x10001
    a29c:	str.w	r3, [r4, #448]	; 0x1c0
    a2a0:	b.n	a3a8 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    a2a2:	cmp.w	r1, #1280	; 0x500
    a2a6:	beq.n	a392 <usb_isr+0x272>
    a2a8:	sub.w	r1, r1, #1664	; 0x680
    a2ac:	cmp	r1, #1
    a2ae:	bhi.n	a298 <usb_isr+0x178>
    a2b0:	ldr	r2, [pc, #328]	; (a3fc <usb_isr+0x2dc>)
    a2b2:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a2b6:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a2ba:	ldr	r1, [r2, #4]
    a2bc:	cmp	r1, #0
    a2be:	beq.n	a298 <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    a2c0:	ldrh.w	lr, [r2]
    a2c4:	mov	r0, r5
    a2c6:	cmp	lr, r5
    a2c8:	bne.w	a4e8 <usb_isr+0x3c8>
    a2cc:	ldrh.w	lr, [r2, #2]
    a2d0:	cmp	lr, ip
    a2d2:	bne.w	a4e8 <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    a2d6:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    a2d8:	mov.w	r8, r3, lsr #16
    a2dc:	ldr	r3, [pc, #288]	; (a400 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    a2de:	cmp	r5, #3
					datalen = *(list->addr);
    a2e0:	ite	eq
    a2e2:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    a2e4:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    a2e6:	cmp	r8, r2
    a2e8:	it	cs
    a2ea:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    a2ec:	cmp.w	r0, #512	; 0x200
    a2f0:	bne.w	a49a <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    a2f4:	ldr	r2, [pc, #224]	; (a3d8 <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a2f6:	ldr	r1, [pc, #268]	; (a404 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    a2f8:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    a2fa:	mov	r2, r8
    a2fc:	ldr	r0, [pc, #264]	; (a408 <usb_isr+0x2e8>)
    a2fe:	cmp	r5, #0
    a300:	it	ne
    a302:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    a304:	mov	r0, r3
    a306:	bl	9470 <memcpy>
    a30a:	mov	r3, r0
    a30c:	b.n	a4bc <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    a30e:	movw	r2, #8993	; 0x2321
    a312:	cmp	r1, r2
    a314:	beq.n	a358 <usb_isr+0x238>
    a316:	bhi.n	a364 <usb_isr+0x244>
    a318:	movw	r2, #8225	; 0x2021
    a31c:	cmp	r1, r2
    a31e:	beq.w	a506 <usb_isr+0x3e6>
    a322:	movw	r2, #8737	; 0x2221
    a326:	cmp	r1, r2
    a328:	beq.w	a4ec <usb_isr+0x3cc>
    a32c:	cmp.w	r1, #2304	; 0x900
    a330:	bne.n	a298 <usb_isr+0x178>
		usb_configuration = setup.wValue;
    a332:	ldr	r3, [pc, #216]	; (a40c <usb_isr+0x2ec>)
    a334:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a338:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    a33c:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    a33e:	ldr	r3, [pc, #208]	; (a410 <usb_isr+0x2f0>)
    a340:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    a344:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    a348:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    a34c:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    a350:	bl	9740 <usb_serial_configure>
		usb_mtp_configure();
    a354:	bl	af94 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    a358:	movs	r2, #0
    a35a:	mov	r1, r2
    a35c:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a35e:	bl	9ec0 <endpoint0_receive>
			return;
    a362:	b.n	a3a8 <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    a364:	movw	r2, #25633	; 0x6421
    a368:	cmp	r1, r2
    a36a:	beq.w	a51a <usb_isr+0x3fa>
    a36e:	movw	r2, #26529	; 0x67a1
    a372:	cmp	r1, r2
    a374:	bne.n	a298 <usb_isr+0x178>
		if (setup.wLength >= 4) {
    a376:	cmp.w	r3, #262144	; 0x40000
    a37a:	bcc.n	a298 <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    a37c:	ldr	r3, [pc, #148]	; (a414 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    a37e:	movs	r1, #4
    a380:	ldr	r0, [pc, #104]	; (a3ec <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    a382:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    a384:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    a386:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    a388:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    a38a:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    a38e:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    a390:	b.n	a3b8 <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a392:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    a394:	mov	r2, r8
    a396:	mov	r1, r8
    a398:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a39a:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    a39c:	bl	9ec0 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    a3a0:	orr.w	r5, r5, #16777216	; 0x1000000
    a3a4:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    a3a8:	ldr.w	r3, [r4, #428]	; 0x1ac
    a3ac:	b.n	a19e <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    a3ae:	ldr	r3, [pc, #92]	; (a40c <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    a3b0:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    a3b2:	ldr	r0, [pc, #100]	; (a418 <usb_isr+0x2f8>)
    a3b4:	ldrb	r3, [r3, #0]
    a3b6:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a3b8:	bl	a02c <endpoint0_transmit.constprop.0>
				return;
    a3bc:	b.n	a3a8 <usb_isr+0x288>
		reply_buffer[0] = 0;
    a3be:	ldr	r0, [pc, #88]	; (a418 <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    a3c0:	movs	r1, #2
		reply_buffer[0] = 0;
    a3c2:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    a3c6:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    a3ca:	b.n	a3b8 <usb_isr+0x298>
    a3cc:	.word	0x402e0000
    a3d0:	.word	0x20028160
    a3d4:	.word	0x20028164
    a3d8:	.word	0x2002832d
    a3dc:	.word	0x2002832e
    a3e0:	.word	0x402e01c0
    a3e4:	.word	0x20027968
    a3e8:	.word	0x2000b9c0
    a3ec:	.word	0x20028303
    a3f0:	.word	0x20028154
    a3f4:	.word	0x2002796c
    a3f8:	.word	0x20000000
    a3fc:	.word	0x20007800
    a400:	.word	0x20204800
    a404:	.word	0x600023fc
    a408:	.word	0x60002465
    a40c:	.word	0x2002832c
    a410:	.word	0x00cc0002
    a414:	.word	0x20008f45
    a418:	.word	0x2002830c
		endpoint = setup.wIndex & 0x7F;
    a41c:	uxth	r0, r3
		if (endpoint > 7) break;
    a41e:	ands.w	r3, r3, #120	; 0x78
    a422:	bne.w	a298 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a426:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a42a:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    a42c:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    a430:	ldr	r2, [pc, #352]	; (a594 <usb_isr+0x474>)
    a432:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    a434:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a436:	bpl.n	a44c <usb_isr+0x32c>
    a438:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    a43c:	it	ne
    a43e:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    a440:	mov.w	r1, #2
    a444:	ldr	r0, [pc, #332]	; (a594 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    a446:	it	ne
    a448:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    a44a:	b.n	a3b8 <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    a44c:	tst.w	r1, #1
    a450:	b.n	a43c <usb_isr+0x31c>
		if (endpoint > 7) break;
    a452:	tst.w	r3, #120	; 0x78
    a456:	uxth	r2, r3
    a458:	bne.w	a298 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a45c:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    a460:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    a464:	ldr.w	r2, [r7, r3, lsl #2]
    a468:	ite	ne
    a46a:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    a46e:	orreq.w	r2, r2, #1
    a472:	str.w	r2, [r7, r3, lsl #2]
    a476:	b.n	a358 <usb_isr+0x238>
		if (endpoint > 7) break;
    a478:	tst.w	r3, #120	; 0x78
    a47c:	uxth	r2, r3
    a47e:	bne.w	a298 <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    a482:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    a486:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    a48a:	ldr.w	r2, [r7, r3, lsl #2]
    a48e:	ite	ne
    a490:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    a494:	biceq.w	r2, r2, #1
    a498:	b.n	a472 <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    a49a:	cmp.w	r0, #1792	; 0x700
    a49e:	bne.n	a4e4 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    a4a0:	ldr	r2, [pc, #244]	; (a598 <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    a4a2:	ldr	r0, [pc, #248]	; (a59c <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    a4a4:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    a4a6:	mov	r2, r8
    a4a8:	ldr	r1, [pc, #244]	; (a5a0 <usb_isr+0x480>)
    a4aa:	cmp	r5, #0
    a4ac:	it	ne
    a4ae:	movne	r1, r0
    a4b0:	mov	r0, r3
    a4b2:	bl	9470 <memcpy>
					usb_descriptor_buffer[1] = 7;
    a4b6:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    a4b8:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    a4ba:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a4bc:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a4c0:	add.w	r0, r3, r8
	asm("dsb");
    a4c4:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    a4c8:	mov.w	r3, #3758153728	; 0xe000e000
    a4cc:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    a4d0:	adds	r5, #32
	} while (location < end_addr);
    a4d2:	cmp	r0, r5
    a4d4:	bhi.n	a4cc <usb_isr+0x3ac>
	asm("dsb");
    a4d6:	dsb	sy
	asm("isb");
    a4da:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    a4de:	ldr	r0, [pc, #196]	; (a5a4 <usb_isr+0x484>)
    a4e0:	mov	r1, r8
    a4e2:	b.n	a3b8 <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    a4e4:	mov	r2, r8
    a4e6:	b.n	a304 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    a4e8:	adds	r2, #12
    a4ea:	b.n	a2ba <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    a4ec:	uxth	r3, r3
    a4ee:	cmp	r3, #0
    a4f0:	bne.w	a358 <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a4f4:	ldr	r3, [pc, #176]	; (a5a8 <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    a4f6:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a4fa:	ldr	r2, [r3, #0]
    a4fc:	ldr	r3, [pc, #172]	; (a5ac <usb_isr+0x48c>)
    a4fe:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a500:	ldr	r3, [pc, #172]	; (a5b0 <usb_isr+0x490>)
    a502:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    a504:	b.n	a358 <usb_isr+0x238>
		if (setup.wLength != 7) break;
    a506:	lsrs	r1, r3, #16
    a508:	cmp	r1, #7
		if (setup.wLength == 6) {
    a50a:	bne.w	a298 <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    a50e:	ldr	r2, [pc, #164]	; (a5b4 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a510:	ldr	r0, [pc, #164]	; (a5b8 <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    a512:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    a516:	movs	r2, #1
    a518:	b.n	a35e <usb_isr+0x23e>
		if (setup.wLength == 6) {
    a51a:	lsrs	r1, r3, #16
    a51c:	cmp	r1, #6
    a51e:	b.n	a50a <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    a520:	movw	r3, #25633	; 0x6421
    a524:	cmp	r2, r3
    a526:	bne.w	a1ec <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    a52a:	ldr	r3, [pc, #140]	; (a5b8 <usb_isr+0x498>)
    a52c:	ldrb	r2, [r3, #0]
    a52e:	cmp	r2, #1
    a530:	bne.w	a1ec <usb_isr+0xcc>
    a534:	ldrb	r3, [r3, #1]
    a536:	cmp	r3, #64	; 0x40
    a538:	bne.w	a1ec <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    a53c:	ldr	r3, [pc, #124]	; (a5bc <usb_isr+0x49c>)
    a53e:	movs	r2, #25
    a540:	b.n	a1ea <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    a542:	rbit	r7, r4
    a546:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a54a:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    a54e:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a552:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    a554:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    a558:	bl	9fdc <run_callbacks>
					tx &= ~(1<<p);
    a55c:	b.n	a1fe <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    a55e:	ldr	r3, [pc, #96]	; (a5c0 <usb_isr+0x4a0>)
    a560:	ldr.w	r2, [r3, #428]	; 0x1ac
    a564:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    a568:	ldr.w	r2, [r3, #444]	; 0x1bc
    a56c:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    a570:	ldr.w	r4, [r3, #432]	; 0x1b0
    a574:	cmp	r4, #0
    a576:	bne.n	a570 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    a578:	mov.w	r2, #4294967295
    a57c:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    a580:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    a584:	bl	973c <usb_serial_reset>
		endpointN_notify_mask = 0;
    a588:	ldr	r3, [pc, #56]	; (a5c4 <usb_isr+0x4a4>)
    a58a:	str	r4, [r3, #0]
    a58c:	b.n	a138 <usb_isr+0x18>
}
    a58e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a592:	nop
    a594:	.word	0x2002830c
    a598:	.word	0x2002832d
    a59c:	.word	0x600023fc
    a5a0:	.word	0x60002465
    a5a4:	.word	0x20204800
    a5a8:	.word	0x20028140
    a5ac:	.word	0x2002815c
    a5b0:	.word	0x2002832b
    a5b4:	.word	0x2000b9c0
    a5b8:	.word	0x20028303
    a5bc:	.word	0x20008f45
    a5c0:	.word	0x402e0000
    a5c4:	.word	0x2002796c

0000a5c8 <usb_config_rx>:
{
    a5c8:	push	{r4, r5, r6, lr}
    a5ca:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a5cc:	subs	r3, r0, #2
{
    a5ce:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a5d0:	cmp	r3, #3
    a5d2:	bhi.n	a5fc <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a5d4:	clz	r4, r2
    a5d8:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a5da:	ldr	r0, [pc, #36]	; (a600 <usb_config_rx+0x38>)
    a5dc:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a5de:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    a5e0:	add.w	r0, r0, r5, lsl #7
    a5e4:	orr.w	r1, r1, r4, lsl #29
    a5e8:	bl	a010 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    a5ec:	cbz	r6, a5fc <usb_config_rx+0x34>
    a5ee:	ldr	r2, [pc, #20]	; (a604 <usb_config_rx+0x3c>)
    a5f0:	movs	r3, #1
    a5f2:	lsl.w	r0, r3, r5
    a5f6:	ldr	r3, [r2, #0]
    a5f8:	orrs	r0, r3
    a5fa:	str	r0, [r2, #0]
}
    a5fc:	pop	{r4, r5, r6, pc}
    a5fe:	nop
    a600:	.word	0x20000000
    a604:	.word	0x2002796c

0000a608 <usb_config_tx>:
{
    a608:	push	{r4, r5, r6, lr}
    a60a:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a60c:	subs	r3, r0, #2
{
    a60e:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    a610:	cmp	r3, #3
    a612:	bhi.n	a63e <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a614:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a618:	ldr	r0, [pc, #36]	; (a640 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a61a:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a61c:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    a61e:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    a620:	add.w	r0, r0, r4, lsl #7
    a624:	orr.w	r1, r1, r5, lsl #29
    a628:	adds	r0, #64	; 0x40
    a62a:	bl	a010 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    a62e:	cbz	r6, a63e <usb_config_tx+0x36>
    a630:	ldr	r2, [pc, #16]	; (a644 <usb_config_tx+0x3c>)
    a632:	adds	r4, #16
    a634:	movs	r3, #1
    a636:	ldr	r1, [r2, #0]
    a638:	lsls	r3, r4
    a63a:	orrs	r3, r1
    a63c:	str	r3, [r2, #0]
}
    a63e:	pop	{r4, r5, r6, pc}
    a640:	.word	0x20000000
    a644:	.word	0x2002796c

0000a648 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    a648:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    a64a:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    a64c:	orr.w	r2, r2, #128	; 0x80
    a650:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    a652:	add.w	r2, r1, #4096	; 0x1000
    a656:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    a658:	add.w	r2, r1, #8192	; 0x2000
{
    a65c:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    a65e:	str	r2, [r0, #16]
	transfer->next = 1;
    a660:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    a662:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    a666:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    a66a:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    a66c:	str	r2, [r0, #20]
	transfer->callback_param = param;
    a66e:	strd	r1, r3, [r0, #24]
}
    a672:	pop	{r4, pc}

0000a674 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a674:	subs	r3, r0, #2
{
    a676:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a678:	cmp	r3, #3
    a67a:	bhi.n	a692 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a67c:	ldr	r3, [pc, #20]	; (a694 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    a67e:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    a682:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    a686:	movs	r3, #1
    a688:	adds	r0, #64	; 0x40
    a68a:	lsl.w	r1, r3, r1
    a68e:	b.w	9f60 <schedule_transfer>
}
    a692:	bx	lr
    a694:	.word	0x20000000

0000a698 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a698:	subs	r3, r0, #2
{
    a69a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    a69c:	cmp	r3, #3
    a69e:	bhi.n	a6ae <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    a6a0:	movs	r1, #1
    a6a2:	ldr	r3, [pc, #12]	; (a6b0 <usb_receive+0x18>)
    a6a4:	lsls	r1, r0
    a6a6:	add.w	r0, r3, r0, lsl #7
    a6aa:	b.w	9f60 <schedule_transfer>
}
    a6ae:	bx	lr
    a6b0:	.word	0x20000000

0000a6b4 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    a6b4:	ldr	r2, [pc, #32]	; (a6d8 <usb_transfer_status+0x24>)
{
    a6b6:	mov	r1, r0
	cmd = USB1_USBCMD;
    a6b8:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    a6bc:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    a6be:	orr.w	r3, r3, #16384	; 0x4000
    a6c2:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    a6c6:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    a6c8:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    a6cc:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    a6ce:	tst.w	r3, #16384	; 0x4000
    a6d2:	beq.n	a6bc <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    a6d4:	bx	lr
    a6d6:	nop
    a6d8:	.word	0x402e0000

0000a6dc <ultoa>:
{
    a6dc:	push	{r4, r5, r6, lr}
	int i=0, j;
    a6de:	movs	r4, #0
		digit = val % radix;
    a6e0:	udiv	r5, r0, r2
    a6e4:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a6e8:	uxtb	r3, r6
    a6ea:	cmp	r6, #9
    a6ec:	ite	ls
    a6ee:	addls	r3, #48	; 0x30
    a6f0:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    a6f2:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a6f4:	uxtb	r3, r3
    a6f6:	strb	r3, [r1, r4]
		if (val == 0) break;
    a6f8:	bhi.n	a700 <ultoa+0x24>
		i++;
    a6fa:	adds	r4, #1
		val /= radix;
    a6fc:	mov	r0, r5
		digit = val % radix;
    a6fe:	b.n	a6e0 <ultoa+0x4>
	buf[i + 1] = 0;
    a700:	adds	r3, r1, r4
    a702:	movs	r2, #0
    a704:	subs	r0, r1, #1
    a706:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    a708:	subs	r5, r4, r2
    a70a:	cmp	r2, r5
    a70c:	blt.n	a712 <ultoa+0x36>
}
    a70e:	mov	r0, r1
    a710:	pop	{r4, r5, r6, pc}
		t = buf[j];
    a712:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    a716:	adds	r2, #1
		buf[j] = buf[i];
    a718:	ldrb	r6, [r3, #0]
    a71a:	strb	r6, [r0, #0]
		buf[i] = t;
    a71c:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    a720:	b.n	a708 <ultoa+0x2c>
	...

0000a724 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    a724:	vcmp.f32	s0, s0
{
    a728:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    a72c:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    a730:	eor.w	r5, r0, r0, asr #31
{
    a734:	mov	r7, r0
    a736:	mov	r6, r1
    a738:	mov	r4, r2
	int awidth = abs(width);
    a73a:	sub.w	r5, r5, r0, asr #31
{
    a73e:	vpush	{d8}
    a742:	vmov.f32	s16, s0
    a746:	sub	sp, #20
	if (isnanf(val)) {
    a748:	bvc.n	a7a8 <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    a74a:	vcmpe.f32	s0, #0.0
    a74e:	vmrs	APSR_nzcv, fpscr
    a752:	ite	mi
    a754:	movmi	r3, #4
    a756:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    a758:	cmp	r3, r5
    a75a:	ite	lt
    a75c:	sublt	r5, r5, r3
    a75e:	movge	r5, #0
		if (width<0) {
    a760:	cmp	r0, #0
    a762:	bge.n	a772 <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    a764:	mov	r2, r5
    a766:	mov	r0, r4
    a768:	add	r4, r5
    a76a:	movs	r5, #0
    a76c:	movs	r1, #32
    a76e:	bl	942c <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    a772:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    a776:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    a778:	cmp	r3, #0
    a77a:	itt	lt
    a77c:	movlt	r3, #45	; 0x2d
    a77e:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    a782:	movs	r3, #65	; 0x41
    a784:	strb	r2, [r4, #0]
    a786:	strb	r3, [r4, #1]
    a788:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    a78a:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a78c:	strb	r2, [r4, #2]
			*buf++ = ' ';
    a78e:	movs	r1, #32
    a790:	mov	r2, r5
    a792:	bl	942c <memset>
			awidth--;
		}
		*buf = 0;
    a796:	movs	r2, #0
			*buf++ = ' ';
    a798:	mov	r3, r0
    a79a:	add	r0, r5
		*buf = 0;
    a79c:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    a79e:	add	sp, #20
    a7a0:	vpop	{d8}
    a7a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    a7a8:	vabs.f32	s15, s0
    a7ac:	vldr	s14, [pc, #432]	; a960 <dtostrf+0x23c>
    a7b0:	vcmp.f32	s15, s14
    a7b4:	vmrs	APSR_nzcv, fpscr
    a7b8:	ble.n	a800 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    a7ba:	vcmpe.f32	s0, #0.0
    a7be:	vmrs	APSR_nzcv, fpscr
    a7c2:	ite	mi
    a7c4:	movmi	r3, #4
    a7c6:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    a7c8:	cmp	r3, r5
    a7ca:	ite	lt
    a7cc:	sublt	r5, r5, r3
    a7ce:	movge	r5, #0
		if (width<0) {
    a7d0:	cmp	r0, #0
    a7d2:	bge.n	a7e2 <dtostrf+0xbe>
				*buf++ = ' ';
    a7d4:	mov	r2, r5
    a7d6:	mov	r0, r4
    a7d8:	add	r4, r5
    a7da:	movs	r5, #0
    a7dc:	movs	r1, #32
    a7de:	bl	942c <memset>
		if (val<0) *buf++ = '-';
    a7e2:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a7e6:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    a7e8:	vmrs	APSR_nzcv, fpscr
    a7ec:	itt	mi
    a7ee:	movmi	r3, #45	; 0x2d
    a7f0:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    a7f4:	movs	r3, #73	; 0x49
    a7f6:	strb	r3, [r4, #0]
    a7f8:	movs	r3, #78	; 0x4e
    a7fa:	strb	r3, [r4, #1]
    a7fc:	adds	r3, r4, #3
    a7fe:	b.n	a78a <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    a800:	add	r2, sp, #8
    a802:	add	r1, sp, #4
    a804:	mov	r0, r6
    a806:	bl	d3f8 <fcvtf>
	if (precision == 0 && decpt == 0) {
    a80a:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    a80c:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    a80e:	orrs.w	r2, r6, r3
    a812:	bne.n	a8b2 <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    a814:	ldrb	r1, [r0, #0]
    a816:	ldr	r3, [pc, #332]	; (a964 <dtostrf+0x240>)
    a818:	ldr	r2, [pc, #332]	; (a968 <dtostrf+0x244>)
    a81a:	cmp	r1, #52	; 0x34
    a81c:	ite	ls
    a81e:	movls	r8, r2
    a820:	movhi	r8, r3
		decpt++;
    a822:	movs	r3, #1
    a824:	str	r3, [sp, #4]
	reqd = strlen(s);
    a826:	mov	r0, r8
    a828:	bl	e0c0 <strlen>
	if (reqd > decpt) reqd++;
    a82c:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    a82e:	mov	r5, r0
	if (reqd > decpt) reqd++;
    a830:	cmp	r3, r0
    a832:	it	lt
    a834:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    a836:	cmp	r3, #0
    a838:	bne.n	a8c2 <dtostrf+0x19e>
    a83a:	adds	r5, #1
	if (sign) reqd++;
    a83c:	ldr.w	fp, [sp, #8]
    a840:	cmp.w	fp, #0
    a844:	beq.n	a848 <dtostrf+0x124>
    a846:	adds	r5, #1
	pad = width - reqd;
    a848:	sub.w	sl, r7, r5
	e = p + reqd;
    a84c:	add.w	r9, r4, r5
	if (pad > 0) {
    a850:	cmp.w	sl, #0
    a854:	ble.n	a90a <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    a856:	mov	r2, sl
    a858:	movs	r1, #32
    a85a:	mov	r0, r4
		e += pad;
    a85c:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    a85e:	bl	942c <memset>
    a862:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    a866:	cmp.w	fp, #0
    a86a:	beq.n	a872 <dtostrf+0x14e>
    a86c:	movs	r3, #45	; 0x2d
    a86e:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    a872:	ldr	r1, [sp, #4]
    a874:	cmp	r1, #0
    a876:	bne.n	a90e <dtostrf+0x1ea>
    a878:	cbz	r6, a888 <dtostrf+0x164>
		*p++ = '0';
    a87a:	mov	r3, r2
    a87c:	movs	r1, #48	; 0x30
    a87e:	strb.w	r1, [r3], #2
		*p++ = '.';
    a882:	movs	r1, #46	; 0x2e
    a884:	strb	r1, [r2, #1]
    a886:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    a888:	movs	r0, #46	; 0x2e
	while (p < e) {
    a88a:	cmp	r9, r2
		*p++ = *s++;
    a88c:	mov	r3, r2
	while (p < e) {
    a88e:	bhi.n	a944 <dtostrf+0x220>
	if (width < 0) {
    a890:	cmp	r7, #0
    a892:	bge.n	a8aa <dtostrf+0x186>
		pad = (reqd + width) * -1;
    a894:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    a896:	movs	r1, #32
		pad = (reqd + width) * -1;
    a898:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    a89a:	mov	r0, r3
    a89c:	bic.w	r5, r5, r5, asr #31
    a8a0:	mov	r2, r5
    a8a2:	bl	942c <memset>
    a8a6:	mov	r3, r0
    a8a8:	add	r3, r5
	*p = 0;
    a8aa:	movs	r2, #0
	return buf;
    a8ac:	mov	r0, r4
	*p = 0;
    a8ae:	strb	r2, [r3, #0]
	return buf;
    a8b0:	b.n	a79e <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    a8b2:	negs	r3, r3
    a8b4:	cmp	r6, r3
		decpt = -precision;
    a8b6:	ittt	lt
    a8b8:	neglt	r3, r6
		s = "0";
    a8ba:	ldrlt.w	r8, [pc, #172]	; a968 <dtostrf+0x244>
		decpt = -precision;
    a8be:	strlt	r3, [sp, #4]
    a8c0:	b.n	a826 <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    a8c2:	bge.n	a83c <dtostrf+0x118>
    a8c4:	cmp	r6, #0
    a8c6:	beq.n	a83c <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    a8c8:	add	r3, r6
		reqd = precision + 2;
    a8ca:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    a8cc:	cmp	r0, r3
    a8ce:	bls.n	a83c <dtostrf+0x118>
				val *= 10.0f;
    a8d0:	vmov.f32	s15, #36	; 0x41200000  10.0
    a8d4:	mov	r3, r6
    a8d6:	b.n	a8de <dtostrf+0x1ba>
    a8d8:	vmul.f32	s16, s16, s15
				newPrecision--;
    a8dc:	subs	r3, #1
			while (newPrecision > 0) {
    a8de:	cmp	r3, #0
    a8e0:	bgt.n	a8d8 <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    a8e2:	cmp	r6, #0
    a8e4:	add	r2, sp, #8
    a8e6:	add	r1, sp, #12
    a8e8:	vmov.f32	s0, s16
    a8ec:	ite	ge
    a8ee:	subge	r0, r6, r6
    a8f0:	movlt	r0, r6
    a8f2:	bl	d3f8 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    a8f6:	ldr	r3, [sp, #4]
    a8f8:	ldr	r2, [sp, #12]
    a8fa:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    a8fc:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    a8fe:	subs	r2, r2, r3
    a900:	cmp	r2, r1
    a902:	itt	eq
    a904:	addeq	r3, #1
    a906:	streq	r3, [sp, #4]
    a908:	b.n	a83c <dtostrf+0x118>
    a90a:	mov	r2, r4
    a90c:	b.n	a866 <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    a90e:	bge.n	a888 <dtostrf+0x164>
    a910:	cmp	r6, #0
    a912:	beq.n	a888 <dtostrf+0x164>
		*p++ = '0';
    a914:	mov	r3, r2
		*p++ = '.';
    a916:	movs	r0, #46	; 0x2e
		*p++ = '0';
    a918:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    a91c:	movs	r6, #0
		*p++ = '0';
    a91e:	strb.w	ip, [r3], #2
		*p++ = '.';
    a922:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    a924:	rsb	r0, r1, #2
    a928:	add	r2, r0
		*p++ = '.';
    a92a:	mov	r0, r3
		while ( decpt < 0 ) {
    a92c:	cmp	r0, r2
    a92e:	bne.n	a93c <dtostrf+0x218>
    a930:	subs	r2, r3, r1
    a932:	cmp	r6, #0
    a934:	beq.n	a888 <dtostrf+0x164>
    a936:	movs	r3, #0
    a938:	str	r3, [sp, #4]
    a93a:	b.n	a888 <dtostrf+0x164>
			*p++ = '0';
    a93c:	movs	r6, #1
    a93e:	strb.w	ip, [r0], #1
    a942:	b.n	a92c <dtostrf+0x208>
		*p++ = *s++;
    a944:	ldrb.w	r1, [r8], #1
    a948:	strb.w	r1, [r3], #1
		if (p == e) break;
    a94c:	cmp	r9, r3
    a94e:	beq.n	a890 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    a950:	ldr	r1, [sp, #4]
    a952:	subs	r1, #1
    a954:	str	r1, [sp, #4]
    a956:	cbnz	r1, a95c <dtostrf+0x238>
    a958:	adds	r3, r2, #2
    a95a:	strb	r0, [r2, #1]
			*p++ = '0';
    a95c:	mov	r2, r3
    a95e:	b.n	a88a <dtostrf+0x166>
    a960:	.word	0x7f7fffff
    a964:	.word	0x20007dec
    a968:	.word	0x20007ef7

0000a96c <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    a96c:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a96e:	ldr	r3, [pc, #52]	; (a9a4 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a970:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    a972:	ldr	r6, [pc, #52]	; (a9a8 <micros+0x3c>)
		scc = systick_cycle_count;
    a974:	ldr	r5, [pc, #52]	; (a9ac <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    a976:	ldrex	r2, [r3]
		smc = systick_millis_count;
    a97a:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    a97c:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    a97e:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    a982:	cmp	r2, #0
    a984:	bne.n	a976 <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    a986:	ldr	r3, [pc, #40]	; (a9b0 <micros+0x44>)
    a988:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a98a:	ldr	r2, [pc, #40]	; (a9b4 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    a98c:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    a98e:	ldr	r2, [r2, #0]
    a990:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    a994:	mov.w	r3, #1000	; 0x3e8
    a998:	muls	r0, r3
	return usec;
}
    a99a:	cmp	r2, r3
    a99c:	ite	ls
    a99e:	addls	r0, r0, r2
    a9a0:	addhi	r0, r0, r3
    a9a2:	pop	{r4, r5, r6, pc}
    a9a4:	.word	0x20028144
    a9a8:	.word	0x20028140
    a9ac:	.word	0x2002813c
    a9b0:	.word	0xe0001000
    a9b4:	.word	0x20027aac

0000a9b8 <delay>:
{
    a9b8:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    a9ba:	mov	r4, r0
    a9bc:	cbz	r0, a9e0 <delay+0x28>
	start = micros();
    a9be:	bl	a96c <micros>
    a9c2:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    a9c4:	bl	a96c <micros>
    a9c8:	subs	r0, r0, r5
    a9ca:	cmp.w	r0, #1000	; 0x3e8
    a9ce:	bcs.n	a9d6 <delay+0x1e>
		yield();
    a9d0:	bl	b268 <yield>
		while ((micros() - start) >= 1000) {
    a9d4:	b.n	a9c4 <delay+0xc>
			if (--msec == 0) return;
    a9d6:	subs	r4, #1
    a9d8:	beq.n	a9e0 <delay+0x28>
			start += 1000;
    a9da:	add.w	r5, r5, #1000	; 0x3e8
    a9de:	b.n	a9c4 <delay+0xc>
}
    a9e0:	pop	{r3, r4, r5, pc}
	...

0000a9e4 <unused_interrupt_vector>:
	__disable_irq();
    a9e4:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    a9e6:	mrs	r3, IPSR
	info->ipsr = ipsr;
    a9ea:	ldr	r4, [pc, #316]	; (ab28 <unused_interrupt_vector+0x144>)
    a9ec:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    a9f0:	tst.w	lr, #4
    a9f4:	ite	eq
    a9f6:	mrseq	r2, MSP
    a9fa:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    a9fe:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    aa02:	ldr	r7, [pc, #296]	; (ab2c <unused_interrupt_vector+0x148>)
	while (p < end) {
    aa04:	ldr	r6, [pc, #296]	; (ab30 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    aa06:	ldr.w	r1, [r3, #3368]	; 0xd28
    aa0a:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    aa0e:	ldr.w	r1, [r3, #3372]	; 0xd2c
    aa12:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    aa16:	ldr.w	r1, [r3, #3380]	; 0xd34
    aa1a:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    aa1e:	ldr.w	r3, [r3, #3384]	; 0xd38
    aa22:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    aa26:	ldr	r3, [r2, #24]
    aa28:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    aa2c:	ldr	r3, [r2, #28]
    aa2e:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    aa32:	bl	acdc <tempmonGetTemp>
    aa36:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    aa3a:	bl	abb4 <rtc_get>
	info->len = sizeof(*info) / 4;
    aa3e:	movs	r3, #11
	p = (uint32_t *)info;
    aa40:	ldr	r2, [pc, #240]	; (ab34 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    aa42:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    aa46:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    aa4a:	mov	r0, r2
	crc = 0xFFFFFFFF;
    aa4c:	mov.w	r3, #4294967295
		crc ^= *p++;
    aa50:	ldr	r1, [r2, #0]
    aa52:	movs	r5, #32
    aa54:	adds	r2, #4
    aa56:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    aa58:	and.w	r1, r3, #1
    aa5c:	subs	r5, #1
    aa5e:	mul.w	r1, r7, r1
    aa62:	eor.w	r3, r1, r3, lsr #1
    aa66:	bne.n	aa58 <unused_interrupt_vector+0x74>
	while (p < end) {
    aa68:	cmp	r2, r6
    aa6a:	bne.n	aa50 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    aa6c:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    aa70:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    aa74:	mov.w	r3, #3758153728	; 0xe000e000
    aa78:	ldr	r2, [pc, #188]	; (ab38 <unused_interrupt_vector+0x154>)
    aa7a:	str.w	r0, [r3, #3952]	; 0xf70
    aa7e:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    aa82:	dsb	sy
	asm("isb");
    aa86:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aa8a:	ldr	r2, [pc, #176]	; (ab3c <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    aa8c:	ldr	r4, [pc, #176]	; (ab40 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aa8e:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    aa90:	ldr	r0, [pc, #176]	; (ab44 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    aa92:	orr.w	r3, r3, #12288	; 0x3000
    aa96:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    aa98:	movs	r3, #2
    aa9a:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    aa9c:	ldr	r3, [r2, #28]
    aa9e:	bic.w	r3, r3, #127	; 0x7f
    aaa2:	orr.w	r3, r3, #64	; 0x40
    aaa6:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    aaa8:	ldr	r3, [pc, #156]	; (ab48 <unused_interrupt_vector+0x164>)
    aaaa:	ldr	r3, [r3, #0]
    aaac:	cmp	r3, r0
    aaae:	bls.n	aab4 <unused_interrupt_vector+0xd0>
    aab0:	bl	9c70 <set_arm_clock>
	PIT_MCR = 0;
    aab4:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    aab6:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    aab8:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    aabc:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    aabe:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    aac2:	ldr	r3, [pc, #136]	; (ab4c <unused_interrupt_vector+0x168>)
    aac4:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    aac8:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    aacc:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    aad0:	ldr	r4, [pc, #108]	; (ab40 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    aad2:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    aad6:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    aada:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    aade:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    aae2:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    aae6:	ldr.w	r3, [r4, #268]	; 0x10c
    aaea:	cbz	r3, aaf6 <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    aaec:	adds	r5, #1
			PIT_TFLG0 = 1;
    aaee:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    aaf2:	cmp	r5, #79	; 0x4f
    aaf4:	bhi.n	aafc <unused_interrupt_vector+0x118>
		usb_isr();
    aaf6:	bl	a120 <usb_isr>
		if (PIT_TFLG0) {
    aafa:	b.n	aae6 <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    aafc:	ldr	r3, [pc, #80]	; (ab50 <unused_interrupt_vector+0x16c>)
    aafe:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    ab00:	ldr	r1, [pc, #80]	; (ab54 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    ab02:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ab06:	mov.w	r2, #2147483648	; 0x80000000
    ab0a:	ldr	r3, [pc, #76]	; (ab58 <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    ab0c:	ldr	r0, [pc, #76]	; (ab5c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    ab0e:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    ab10:	ldr	r2, [pc, #44]	; (ab40 <unused_interrupt_vector+0x15c>)
    ab12:	ldr.w	r3, [r2, #268]	; 0x10c
    ab16:	cbz	r3, ab24 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    ab18:	mov.w	r3, #3758153728	; 0xe000e000
    ab1c:	ldr	r2, [pc, #64]	; (ab60 <unused_interrupt_vector+0x17c>)
    ab1e:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    ab22:	b.n	ab22 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    ab24:	str	r0, [r1, #48]	; 0x30
    ab26:	b.n	ab12 <unused_interrupt_vector+0x12e>
    ab28:	.word	0x2027ff00
    ab2c:	.word	0xedb88320
    ab30:	.word	0x2027ffa8
    ab34:	.word	0x2027ff80
    ab38:	.word	0x2027ffa0
    ab3c:	.word	0x400fc000
    ab40:	.word	0x40084000
    ab44:	.word	0x0bcd3d80
    ab48:	.word	0x20008940
    ab4c:	.word	0x00249f00
    ab50:	.word	0x402e0000
    ab54:	.word	0x400f8000
    ab58:	.word	0x400d9000
    ab5c:	.word	0x0bad00f1
    ab60:	.word	0x05fa0004

0000ab64 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    ab64:	ldr	r2, [pc, #32]	; (ab88 <_sbrk+0x24>)
{
    ab66:	push	{r3, lr}
    ab68:	mov	r3, r0
        char *prev = __brkval;
    ab6a:	ldr	r0, [r2, #0]
        if (incr != 0) {
    ab6c:	cbz	r3, ab82 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    ab6e:	add	r3, r0
    ab70:	ldr	r1, [pc, #24]	; (ab8c <_sbrk+0x28>)
    ab72:	cmp	r3, r1
    ab74:	bls.n	ab84 <_sbrk+0x20>
                        errno = ENOMEM;
    ab76:	bl	dc14 <__errno>
    ab7a:	movs	r3, #12
    ab7c:	str	r3, [r0, #0]
                        return (void *)-1;
    ab7e:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    ab82:	pop	{r3, pc}
                __brkval = prev + incr;
    ab84:	str	r3, [r2, #0]
    ab86:	b.n	ab82 <_sbrk+0x1e>
    ab88:	.word	0x2000895c
    ab8c:	.word	0x20280000

0000ab90 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    ab90:	movs	r0, #0
    ab92:	bx	lr

0000ab94 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    ab94:	mov.w	r0, #4294967295
    ab98:	bx	lr

0000ab9a <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    ab9a:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    ab9e:	movs	r0, #0
	st->st_mode = S_IFCHR;
    aba0:	str	r3, [r1, #4]
}
    aba2:	bx	lr

0000aba4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    aba4:	movs	r0, #1
    aba6:	bx	lr

0000aba8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    aba8:	mov.w	r0, #4294967295
    abac:	bx	lr

0000abae <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    abae:	wfi
    abb0:	b.n	abae <abort>
	...

0000abb4 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    abb4:	ldr	r2, [pc, #28]	; (abd4 <rtc_get+0x20>)
    abb6:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    abb8:	ldr	r3, [r2, #40]	; 0x28
{
    abba:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    abbc:	mov	r4, r3
    abbe:	mov	r1, r0
    abc0:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    abc2:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    abc4:	cmp	r4, r3
    abc6:	bne.n	abbc <rtc_get+0x8>
    abc8:	cmp	r1, r0
    abca:	bne.n	abbc <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    abcc:	lsrs	r3, r3, #15
}
    abce:	orr.w	r0, r3, r0, lsl #17
    abd2:	pop	{r4, pc}
    abd4:	.word	0x400d4000

0000abd8 <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    abd8:	ldr	r3, [pc, #60]	; (ac18 <rtc_set+0x40>)
    abda:	ldr	r2, [r3, #8]
    abdc:	bic.w	r2, r2, #65537	; 0x10001
    abe0:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    abe2:	ldr	r2, [r3, #8]
    abe4:	lsls	r2, r2, #31
    abe6:	bmi.n	abe2 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    abe8:	ldr	r2, [r3, #56]	; 0x38
    abea:	bic.w	r2, r2, #1
    abee:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    abf0:	ldr	r3, [pc, #36]	; (ac18 <rtc_set+0x40>)
    abf2:	ldr	r2, [r3, #56]	; 0x38
    abf4:	lsls	r1, r2, #31
    abf6:	bmi.n	abf2 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    abf8:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    abfa:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    abfc:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    abfe:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    ac00:	ldr	r2, [r3, #56]	; 0x38
    ac02:	orr.w	r2, r2, #1
    ac06:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    ac08:	ldr	r2, [r3, #56]	; 0x38
    ac0a:	lsls	r2, r2, #31
    ac0c:	bpl.n	ac08 <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    ac0e:	ldr	r2, [r3, #8]
    ac10:	orr.w	r2, r2, #65537	; 0x10001
    ac14:	str	r2, [r3, #8]
}
    ac16:	bx	lr
    ac18:	.word	0x400d4000

0000ac1c <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    ac1c:	ldr	r3, [r0, #0]
    ac1e:	cbz	r3, ac36 <smalloc_verify_pool+0x1a>
    ac20:	ldr	r0, [r0, #4]
    ac22:	cbz	r0, ac38 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    ac24:	movs	r3, #12
    ac26:	udiv	r2, r0, r3
    ac2a:	mls	r0, r3, r2, r0
    ac2e:	clz	r0, r0
    ac32:	lsrs	r0, r0, #5
    ac34:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    ac36:	mov	r0, r3
	return 1;
}
    ac38:	bx	lr

0000ac3a <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    ac3a:	push	{r4, lr}
    ac3c:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    ac3e:	bl	ac1c <smalloc_verify_pool>
    ac42:	mov	r4, r0
    ac44:	cbz	r0, ac4c <sm_align_pool+0x12>
    ac46:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    ac48:	mov	r0, r4
    ac4a:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    ac4c:	ldr	r3, [r1, #4]
    ac4e:	movs	r0, #12
    ac50:	udiv	r2, r3, r0
    ac54:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    ac58:	cbz	r2, ac5e <sm_align_pool+0x24>
    ac5a:	subs	r3, r3, r2
    ac5c:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    ac5e:	ldr	r3, [r1, #4]
    ac60:	cmp	r3, #240	; 0xf0
    ac62:	bhi.n	ac46 <sm_align_pool+0xc>
		errno = ENOSPC;
    ac64:	bl	dc14 <__errno>
    ac68:	movs	r3, #28
    ac6a:	str	r3, [r0, #0]
		return 0;
    ac6c:	b.n	ac48 <sm_align_pool+0xe>

0000ac6e <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    ac6e:	push	{r4, r5, r6, lr}
    ac70:	mov	r6, r3
	if (!spool) {
    ac72:	mov	r4, r0
    ac74:	cbnz	r0, ac84 <sm_set_pool+0x16>
		errno = EINVAL;
    ac76:	bl	dc14 <__errno>
		return 0;
    ac7a:	mov	r5, r4
		errno = EINVAL;
    ac7c:	movs	r3, #22
    ac7e:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    ac80:	mov	r0, r5
    ac82:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    ac84:	cbz	r1, ac88 <sm_set_pool+0x1a>
    ac86:	cbnz	r2, acb8 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    ac88:	mov	r0, r4
    ac8a:	bl	ac1c <smalloc_verify_pool>
    ac8e:	mov	r5, r0
    ac90:	cbz	r0, acae <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    ac92:	ldr	r3, [r4, #8]
    ac94:	cbz	r3, aca0 <sm_set_pool+0x32>
    ac96:	ldr	r2, [r4, #4]
    ac98:	movs	r1, #0
    ac9a:	ldr	r0, [r4, #0]
    ac9c:	bl	942c <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    aca0:	movs	r2, #16
    aca2:	movs	r1, #0
    aca4:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    aca6:	bl	942c <memset>
	return 1;
    acaa:	movs	r5, #1
    acac:	b.n	ac80 <sm_set_pool+0x12>
		errno = EINVAL;
    acae:	bl	dc14 <__errno>
    acb2:	movs	r3, #22
    acb4:	str	r3, [r0, #0]
		return 0;
    acb6:	b.n	ac80 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    acb8:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    acba:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    acbe:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    acc0:	bl	ac3a <sm_align_pool>
    acc4:	mov	r5, r0
    acc6:	cmp	r0, #0
    acc8:	beq.n	ac80 <sm_set_pool+0x12>
	if (do_zero) {
    acca:	cmp	r6, #0
    accc:	beq.n	acaa <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    acce:	ldr	r2, [r4, #4]
    acd0:	movs	r1, #0
    acd2:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    acd4:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    acd6:	b.n	aca6 <sm_set_pool+0x38>

0000acd8 <Panic_Temp_isr>:
  unused_interrupt_vector();
    acd8:	b.w	a9e4 <unused_interrupt_vector>

0000acdc <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    acdc:	ldr	r3, [pc, #72]	; (ad28 <tempmonGetTemp+0x4c>)
    acde:	ldr.w	r2, [r3, #128]	; 0x80
    ace2:	lsls	r2, r2, #29
    ace4:	bpl.n	acde <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    ace6:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    acea:	ldr	r2, [pc, #64]	; (ad2c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    acec:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    acf0:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    acf4:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    acf8:	ldr	r3, [pc, #52]	; (ad30 <tempmonGetTemp+0x54>)
    acfa:	vcvt.f32.u32	s0, s0
    acfe:	vldr	s14, [r3]
    ad02:	vcvt.f32.s32	s15, s15
    ad06:	ldr	r3, [pc, #44]	; (ad34 <tempmonGetTemp+0x58>)
    ad08:	vcvt.f32.u32	s14, s14
    ad0c:	vsub.f32	s15, s15, s14
    ad10:	vldr	s14, [r3]
    ad14:	ldr	r3, [pc, #32]	; (ad38 <tempmonGetTemp+0x5c>)
    ad16:	vmul.f32	s15, s15, s14
    ad1a:	vldr	s13, [r3]
    ad1e:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    ad22:	vsub.f32	s0, s0, s14
    ad26:	bx	lr
    ad28:	.word	0x400d8100
    ad2c:	.word	0x20027aa0
    ad30:	.word	0x20027a9c
    ad34:	.word	0x20027aa4
    ad38:	.word	0x20027aa8

0000ad3c <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    ad3c:	cmp	r0, #54	; 0x36
{
    ad3e:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ad40:	bhi.n	ad5a <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    ad42:	lsls	r2, r0, #4
    ad44:	ldr	r3, [pc, #40]	; (ad70 <digitalWrite+0x34>)
    ad46:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    ad4a:	ldr	r3, [r3, r2]
	mask = p->mask;
    ad4c:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    ad4e:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    ad50:	tst	r4, r2
    ad52:	beq.n	ad62 <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    ad54:	cbz	r1, ad5c <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    ad56:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    ad5a:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    ad5c:	str.w	r2, [r3, #136]	; 0x88
    ad60:	b.n	ad5a <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ad62:	ldr	r3, [r0, #8]
		if (val) {
    ad64:	cbz	r1, ad6c <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    ad66:	ldr	r2, [pc, #12]	; (ad74 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    ad68:	str	r2, [r3, #0]
    ad6a:	b.n	ad5a <digitalWrite+0x1e>
    ad6c:	ldr	r2, [pc, #8]	; (ad78 <digitalWrite+0x3c>)
    ad6e:	b.n	ad68 <digitalWrite+0x2c>
    ad70:	.word	0x20007418
    ad74:	.word	0x0001f038
    ad78:	.word	0x00013038

0000ad7c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    ad7c:	cmp	r0, #54	; 0x36
{
    ad7e:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    ad80:	bhi.n	adb2 <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    ad82:	ldr	r3, [pc, #76]	; (add0 <pinMode+0x54>)
    ad84:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ad86:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    ad88:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    ad8a:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ad8e:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ad90:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    ad94:	beq.n	ad9a <pinMode+0x1e>
    ad96:	cmp	r1, #4
    ad98:	bne.n	adb4 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ad9a:	orrs	r4, r5
		if (mode == OUTPUT) {
    ad9c:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    ad9e:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    ada0:	bne.n	ada6 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    ada2:	movs	r2, #56	; 0x38
    ada4:	b.n	adaa <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    ada6:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    adaa:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    adac:	movs	r2, #21
    adae:	ldr	r3, [r0, #4]
    adb0:	str	r2, [r3, #0]
}
    adb2:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    adb4:	bic.w	r4, r4, r5
    adb8:	str	r4, [r2, #4]
		if (mode == INPUT) {
    adba:	cmp	r1, #0
    adbc:	beq.n	ada2 <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    adbe:	cmp	r1, #2
    adc0:	bne.n	adc6 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    adc2:	ldr	r2, [pc, #16]	; (add4 <pinMode+0x58>)
    adc4:	b.n	adaa <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    adc6:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    adc8:	ite	eq
    adca:	ldreq	r2, [pc, #12]	; (add8 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    adcc:	ldrne	r2, [pc, #12]	; (addc <pinMode+0x60>)
    adce:	b.n	adaa <pinMode+0x2e>
    add0:	.word	0x20007418
    add4:	.word	0x0001f038
    add8:	.word	0x00013038
    addc:	.word	0x00010038

0000ade0 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ade0:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    ade4:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    ade6:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    adea:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    adec:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    adee:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    adf2:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    adf6:	ldrh.w	r3, [r0, #392]	; 0x188
    adfa:	uxth	r3, r3
{
    adfc:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    adfe:	orr.w	r3, r3, #240	; 0xf0
    ae02:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae04:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae08:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    ae0c:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    ae10:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae14:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    ae18:	adds	r2, #1
    ae1a:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    ae1c:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    ae1e:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    ae20:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    ae22:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    ae24:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    ae26:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    ae28:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    ae2a:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    ae2c:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    ae2e:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    ae30:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    ae32:	bne.n	ae14 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    ae34:	ldrh.w	r3, [r0, #392]	; 0x188
    ae38:	uxth	r3, r3
    ae3a:	orr.w	r3, r3, #15
    ae3e:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    ae42:	ldrh.w	r3, [r0, #392]	; 0x188
    ae46:	uxth	r3, r3
    ae48:	orr.w	r3, r3, #3840	; 0xf00
    ae4c:	strh.w	r3, [r0, #392]	; 0x188
}
    ae50:	pop	{r4, r5, r6, r7, pc}

0000ae52 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    ae52:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ae54:	mov.w	ip, #15
{
    ae58:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    ae5a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ae5c:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ae60:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ae64:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    ae68:	add.w	r3, r0, r2, lsl #5
    ae6c:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    ae6e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    ae70:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    ae72:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    ae74:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    ae76:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    ae7a:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    ae7c:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    ae7e:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    ae80:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    ae82:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    ae84:	bne.n	ae68 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    ae86:	pop	{r4, r5, r6, r7, pc}

0000ae88 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ae88:	ldr	r2, [pc, #84]	; (aee0 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    ae8a:	ldr	r0, [pc, #88]	; (aee4 <pwm_init+0x5c>)
{
    ae8c:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    ae8e:	ldr	r3, [r2, #120]	; 0x78
    ae90:	orr.w	r3, r3, #16711680	; 0xff0000
    ae94:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    ae96:	ldr.w	r3, [r2, #128]	; 0x80
    ae9a:	orr.w	r3, r3, #4227858432	; 0xfc000000
    ae9e:	orr.w	r3, r3, #196608	; 0x30000
    aea2:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    aea6:	bl	ade0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    aeaa:	add.w	r0, r0, #16384	; 0x4000
    aeae:	bl	ade0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    aeb2:	add.w	r0, r0, #16384	; 0x4000
    aeb6:	bl	ade0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    aeba:	add.w	r0, r0, #16384	; 0x4000
    aebe:	bl	ade0 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    aec2:	sub.w	r0, r0, #2146304	; 0x20c000
    aec6:	bl	ae52 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    aeca:	add.w	r0, r0, #16384	; 0x4000
    aece:	bl	ae52 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    aed2:	add.w	r0, r0, #16384	; 0x4000
}
    aed6:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    aeda:	b.w	ae52 <quadtimer_init>
    aede:	nop
    aee0:	.word	0x400fc000
    aee4:	.word	0x403dc000

0000aee8 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    aee8:	ldr	r2, [pc, #8]	; (aef4 <txEvent_event+0xc>)
    aeea:	ldr	r3, [r2, #0]
    aeec:	adds	r3, #1
    aeee:	str	r3, [r2, #0]
    aef0:	bx	lr
    aef2:	nop
    aef4:	.word	0x200279fc

0000aef8 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    aef8:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    aefa:	ldr	r4, [pc, #40]	; (af24 <rx_event+0x2c>)
	int i = t->callback_param;
    aefc:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    aefe:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    af00:	ldr	r2, [pc, #36]	; (af28 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    af02:	adds	r3, #1
    af04:	cmp	r3, #5
    af06:	it	cs
    af08:	movcs	r3, #0
	rx_list[head] = i;
    af0a:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    af0c:	ldr	r1, [r0, #4]
    af0e:	ldr	r2, [pc, #28]	; (af2c <rx_event+0x34>)
    af10:	ubfx	r1, r1, #16, #15
    af14:	ldrh	r2, [r2, #0]
    af16:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    af18:	ldr	r1, [pc, #20]	; (af30 <rx_event+0x38>)
    af1a:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    af1e:	uxtb	r3, r3
    af20:	strb	r3, [r4, #0]
}
    af22:	pop	{r4, pc}
    af24:	.word	0x20028315
    af28:	.word	0x2002831f
    af2c:	.word	0x200281b8
    af30:	.word	0x20027a88

0000af34 <rx_queue_transfer>:
{
    af34:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    af36:	ldr	r1, [pc, #80]	; (af88 <rx_queue_transfer+0x54>)
{
    af38:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    af3a:	ldr	r7, [pc, #80]	; (af8c <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    af3c:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    af40:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    af42:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    af44:	add	r0, r1
	asm("dsb");
    af46:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    af4a:	mov.w	r4, #3758153728	; 0xe000e000
    af4e:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    af52:	adds	r2, #32
	} while (location < end_addr);
    af54:	cmp	r0, r2
    af56:	bhi.n	af4e <rx_queue_transfer+0x1a>
	asm("dsb");
    af58:	dsb	sy
	asm("isb");
    af5c:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af60:	ldr	r5, [pc, #44]	; (af90 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af62:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af66:	ldrh	r2, [r7, #0]
    af68:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af6c:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    af70:	mov	r0, r5
    af72:	bl	a648 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    af76:	mov	r1, r5
    af78:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    af7a:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    af7e:	bl	a698 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    af82:	str.w	r6, [r4, #268]	; 0x10c
}
    af86:	pop	{r3, r4, r5, r6, r7, pc}
    af88:	.word	0x20203800
    af8c:	.word	0x200281b8
    af90:	.word	0x2000b840

0000af94 <usb_mtp_configure>:
	if (usb_high_speed) {
    af94:	ldr	r3, [pc, #120]	; (b010 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    af96:	movs	r2, #128	; 0x80
    af98:	movs	r1, #0
    af9a:	ldr	r0, [pc, #120]	; (b014 <usb_mtp_configure+0x80>)
{
    af9c:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    af9e:	ldrb	r3, [r3, #0]
	tx_head = 0;
    afa0:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    afa2:	ldr	r6, [pc, #116]	; (b018 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    afa4:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    afa6:	ldr	r3, [pc, #116]	; (b01c <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    afa8:	ite	eq
    afaa:	moveq	r5, #64	; 0x40
    afac:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    afb0:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    afb2:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    afb4:	bl	942c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    afb8:	movs	r2, #128	; 0x80
    afba:	movs	r1, #0
    afbc:	ldr	r0, [pc, #96]	; (b020 <usb_mtp_configure+0x8c>)
    afbe:	bl	942c <memset>
	tx_head = 0;
    afc2:	ldr	r3, [pc, #96]	; (b024 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afc4:	mov	r2, r4
    afc6:	mov	r1, r5
	tx_head = 0;
    afc8:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afca:	movs	r0, #4
	rx_head = 0;
    afcc:	ldr	r3, [pc, #88]	; (b028 <usb_mtp_configure+0x94>)
    afce:	strb	r4, [r3, #0]
	rx_tail = 0;
    afd0:	ldr	r3, [pc, #88]	; (b02c <usb_mtp_configure+0x98>)
    afd2:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    afd4:	mov	r3, r4
    afd6:	bl	a608 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    afda:	mov	r2, r4
    afdc:	ldrh	r1, [r6, #0]
    afde:	movs	r0, #4
    afe0:	ldr	r3, [pc, #76]	; (b030 <usb_mtp_configure+0x9c>)
    afe2:	bl	a5c8 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    afe6:	mov	r2, r4
    afe8:	ldr	r3, [pc, #72]	; (b034 <usb_mtp_configure+0xa0>)
    afea:	movs	r1, #32
    afec:	movs	r0, #5
    afee:	bl	a608 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    aff2:	mov	r0, r4
    aff4:	bl	af34 <rx_queue_transfer>
    aff8:	movs	r0, #1
    affa:	bl	af34 <rx_queue_transfer>
    affe:	movs	r0, #2
    b000:	bl	af34 <rx_queue_transfer>
    b004:	movs	r0, #3
}
    b006:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    b00a:	b.w	af34 <rx_queue_transfer>
    b00e:	nop
    b010:	.word	0x2002832d
    b014:	.word	0x2000b940
    b018:	.word	0x200281b8
    b01c:	.word	0x200281c0
    b020:	.word	0x2000b840
    b024:	.word	0x20028329
    b028:	.word	0x20028315
    b02c:	.word	0x20028325
    b030:	.word	0x0000aef9
    b034:	.word	0x0000aee9

0000b038 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    b038:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    b03c:	ldr	r7, [pc, #112]	; (b0b0 <usb_mtp_recv+0x78>)
{
    b03e:	mov	r5, r1
	uint32_t tail = rx_tail;
    b040:	ldr	r6, [pc, #112]	; (b0b4 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    b042:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    b046:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    b048:	ldr.w	r9, [pc, #120]	; b0c4 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    b04c:	uxtb	r4, r3
		if (tail != rx_head) break;
    b04e:	ldr.w	sl, [pc, #120]	; b0c8 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    b052:	ldrb.w	r3, [r9]
    b056:	cbz	r3, b0a4 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    b058:	ldrb.w	r3, [sl]
    b05c:	cmp	r4, r3
    b05e:	bne.n	b074 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    b060:	ldr	r3, [r7, #0]
    b062:	str	r0, [sp, #4]
    b064:	sub.w	r3, r3, r8
    b068:	cmp	r3, r5
    b06a:	bcs.n	b0aa <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    b06c:	bl	b268 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    b070:	ldr	r0, [sp, #4]
    b072:	b.n	b052 <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    b074:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    b076:	ldr	r2, [pc, #64]	; (b0b8 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    b078:	ldr	r1, [pc, #64]	; (b0bc <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    b07a:	cmp	r3, #5
    b07c:	it	cs
    b07e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    b080:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    b082:	ldr	r2, [pc, #60]	; (b0c0 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    b084:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    b088:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    b08c:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    b08e:	mov	r2, r4
	rx_tail = tail;
    b090:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    b092:	bl	9470 <memcpy>
	rx_queue_transfer(i);
    b096:	mov	r0, r5
    b098:	bl	af34 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    b09c:	mov	r0, r4
    b09e:	add	sp, #8
    b0a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    b0a4:	mov.w	r4, #4294967295
    b0a8:	b.n	b09c <usb_mtp_recv+0x64>
			return 0;
    b0aa:	movs	r4, #0
    b0ac:	b.n	b09c <usb_mtp_recv+0x64>
    b0ae:	nop
    b0b0:	.word	0x20028140
    b0b4:	.word	0x20028325
    b0b8:	.word	0x2002831f
    b0bc:	.word	0x20203800
    b0c0:	.word	0x20027a88
    b0c4:	.word	0x2002832c
    b0c8:	.word	0x20028315

0000b0cc <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    b0cc:	ldr	r3, [pc, #28]	; (b0ec <usb_mtp_available+0x20>)
    b0ce:	ldrb	r3, [r3, #0]
    b0d0:	and.w	r0, r3, #255	; 0xff
    b0d4:	cbz	r3, b0ea <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    b0d6:	ldr	r3, [pc, #24]	; (b0f0 <usb_mtp_available+0x24>)
    b0d8:	ldrb	r2, [r3, #0]
    b0da:	ldr	r3, [pc, #24]	; (b0f4 <usb_mtp_available+0x28>)
    b0dc:	ldrb	r3, [r3, #0]
    b0de:	cmp	r2, r3
    b0e0:	beq.n	b0e8 <usb_mtp_available+0x1c>
    b0e2:	ldr	r3, [pc, #20]	; (b0f8 <usb_mtp_available+0x2c>)
    b0e4:	ldrh	r0, [r3, #0]
    b0e6:	bx	lr
	if (!usb_configuration) return 0;
    b0e8:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    b0ea:	bx	lr
    b0ec:	.word	0x2002832c
    b0f0:	.word	0x20028315
    b0f4:	.word	0x20028325
    b0f8:	.word	0x200281b8

0000b0fc <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    b0fc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    b100:	ldr	r6, [pc, #164]	; (b1a8 <usb_mtp_send+0xac>)
{
    b102:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    b104:	ldr	r7, [pc, #164]	; (b1ac <usb_mtp_send+0xb0>)
{
    b106:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    b108:	ldrb	r3, [r6, #0]
{
    b10a:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    b10c:	ldr.w	r9, [pc, #168]	; b1b8 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    b110:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    b114:	ldr.w	fp, [pc, #164]	; b1bc <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    b118:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    b11c:	ldrb.w	r3, [fp]
    b120:	cmp	r3, #0
    b122:	beq.n	b19c <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    b124:	mov	r0, r7
    b126:	bl	a6b4 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    b12a:	lsls	r3, r0, #24
    b12c:	bpl.n	b140 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    b12e:	ldr.w	r3, [r9]
    b132:	sub.w	r3, r3, sl
    b136:	cmp	r3, r5
    b138:	bhi.n	b1a2 <usb_mtp_send+0xa6>
		yield();
    b13a:	bl	b268 <yield>
	while (1) {
    b13e:	b.n	b11c <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b140:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    b142:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b144:	ldr	r5, [pc, #104]	; (b1b0 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    b146:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    b148:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    b14c:	mov	r0, r5
    b14e:	bl	9470 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    b152:	ldr	r2, [pc, #96]	; (b1b4 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b154:	mov	r3, r5
    b156:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    b158:	add	r2, r5
	asm("dsb");
    b15a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b15e:	mov.w	r1, #3758153728	; 0xe000e000
    b162:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    b166:	adds	r3, #32
	} while (location < end_addr);
    b168:	cmp	r2, r3
    b16a:	bhi.n	b162 <usb_mtp_send+0x66>
	asm("dsb");
    b16c:	dsb	sy
	asm("isb");
    b170:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    b174:	movs	r3, #0
    b176:	mov	r2, r4
    b178:	mov	r1, r5
    b17a:	mov	r0, r7
    b17c:	bl	a648 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    b180:	movs	r0, #4
    b182:	mov	r1, r7
    b184:	bl	a674 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    b188:	ldrb	r3, [r6, #0]
	return len;
    b18a:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    b18c:	adds	r3, #1
    b18e:	uxtb	r3, r3
    b190:	cmp	r3, #3
    b192:	it	hi
    b194:	movhi	r3, #0
    b196:	strb	r3, [r6, #0]
}
    b198:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    b19c:	mov.w	r0, #4294967295
    b1a0:	b.n	b198 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    b1a2:	movs	r0, #0
    b1a4:	b.n	b198 <usb_mtp_send+0x9c>
    b1a6:	nop
    b1a8:	.word	0x20028329
    b1ac:	.word	0x2000b940
    b1b0:	.word	0x20204000
    b1b4:	.word	0x200281c0
    b1b8:	.word	0x20028140
    b1bc:	.word	0x2002832c

0000b1c0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1c0:	ldr	r3, [pc, #68]	; (b208 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    b1c2:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1c4:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    b1c8:	ldr	r3, [pc, #64]	; (b20c <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    b1ca:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    b1ce:	cmp	r0, r3
{
    b1d0:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    b1d2:	it	cc
    b1d4:	movcc	r3, #10
{
    b1d6:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    b1d8:	it	cc
    b1da:	mulcc	r0, r3
	ultoa(num, buf, 10);
    b1dc:	add	r1, sp, #4
    b1de:	bl	a6dc <ultoa>
	for (i=0; i<10; i++) {
    b1e2:	ldr	r0, [pc, #44]	; (b210 <usb_init_serialnumber+0x50>)
    b1e4:	add	r2, sp, #4
    b1e6:	movs	r1, #0
    b1e8:	mov	r5, r0
		char c = buf[i];
    b1ea:	ldrb.w	r4, [r2], #1
		if (!c) break;
    b1ee:	mov	r3, r1
	for (i=0; i<10; i++) {
    b1f0:	adds	r1, #1
		if (!c) break;
    b1f2:	cbz	r4, b1fe <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    b1f4:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    b1f6:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    b1fa:	bne.n	b1ea <usb_init_serialnumber+0x2a>
    b1fc:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b1fe:	adds	r3, #1
    b200:	lsls	r3, r3, #1
    b202:	strb	r3, [r5, #0]
}
    b204:	add	sp, #20
    b206:	pop	{r4, r5, pc}
    b208:	.word	0x401f4400
    b20c:	.word	0x00989680
    b210:	.word	0x20008f1c

0000b214 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    b214:	ldr	r1, [pc, #68]	; (b25c <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    b216:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    b218:	ldr	r3, [r1, #0]
    b21a:	cbz	r3, b230 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b21c:	mrs	r3, IPSR
		if (ipsr != 0) return;
    b220:	cbnz	r3, b230 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b222:	mrs	r2, PRIMASK
		__disable_irq();
    b226:	cpsid	i
		EventResponder *first = firstYield;
    b228:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    b22a:	cbnz	r0, b232 <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    b22c:	cbnz	r2, b230 <EventResponder::runFromYield()+0x1c>
    b22e:	cpsie	i
	}
    b230:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    b232:	ldr	r4, [pc, #44]	; (b260 <EventResponder::runFromYield()+0x4c>)
    b234:	ldrb	r5, [r4, #0]
    b236:	cmp	r5, #0
    b238:	bne.n	b22c <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    b23a:	movs	r3, #1
    b23c:	strb	r3, [r4, #0]
		firstYield = first->_next;
    b23e:	ldr	r3, [r0, #20]
    b240:	str	r3, [r1, #0]
		if (firstYield) {
    b242:	cbz	r3, b256 <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    b244:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    b246:	cbnz	r2, b24a <EventResponder::runFromYield()+0x36>
    b248:	cpsie	i
		first->_triggered = false;
    b24a:	movs	r5, #0
		(*(first->_function))(*first);
    b24c:	ldr	r3, [r0, #8]
		first->_triggered = false;
    b24e:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b250:	blx	r3
		runningFromYield = false;
    b252:	strb	r5, [r4, #0]
    b254:	b.n	b230 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    b256:	ldr	r1, [pc, #12]	; (b264 <EventResponder::runFromYield()+0x50>)
    b258:	str	r3, [r1, #0]
    b25a:	b.n	b246 <EventResponder::runFromYield()+0x32>
    b25c:	.word	0x20027404
    b260:	.word	0x20028287
    b264:	.word	0x20027410

0000b268 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    b268:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    b26c:	ldr	r3, [pc, #92]	; (b2cc <yield+0x64>)
    b26e:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    b270:	cbz	r4, b29a <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    b272:	ldr	r5, [pc, #92]	; (b2d0 <yield+0x68>)
    b274:	ldrb	r3, [r5, #0]
    b276:	cbnz	r3, b29a <yield+0x32>
	running = 1;
    b278:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    b27a:	lsls	r1, r4, #31
	running = 1;
    b27c:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    b27e:	bpl.n	b28a <yield+0x22>
    b280:	bl	9958 <usb_serial_available>
		if (Serial.available()) serialEvent();
    b284:	cbz	r0, b28a <yield+0x22>
    b286:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    b28a:	lsls	r2, r4, #30
    b28c:	bmi.n	b2c0 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    b28e:	movs	r3, #0
    b290:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    b292:	lsls	r3, r4, #29
    b294:	bpl.n	b29a <yield+0x32>
		EventResponder::runFromYield();
    b296:	bl	b214 <EventResponder::runFromYield()>
	}
};
    b29a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    b29e:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    b2a2:	ldr	r3, [r7, #0]
    b2a4:	mov	r0, r7
    b2a6:	ldr	r3, [r3, #16]
    b2a8:	blx	r3
    b2aa:	cbz	r0, b2b2 <yield+0x4a>
    b2ac:	ldr	r3, [r7, #20]
    b2ae:	ldr	r3, [r3, #8]
    b2b0:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b2b2:	adds	r6, #1
    b2b4:	ldrb.w	r2, [r8]
    b2b8:	uxtb	r3, r6
    b2ba:	cmp	r2, r3
    b2bc:	bhi.n	b29e <yield+0x36>
    b2be:	b.n	b28e <yield+0x26>
    b2c0:	movs	r6, #0
    b2c2:	ldr.w	r8, [pc, #16]	; b2d4 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    b2c6:	ldr.w	r9, [pc, #16]	; b2d8 <yield+0x70>
    b2ca:	b.n	b2b4 <yield+0x4c>
    b2cc:	.word	0x2002832f
    b2d0:	.word	0x20028289
    b2d4:	.word	0x20028288
    b2d8:	.word	0x20027414

0000b2dc <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    b2dc:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    b2de:	ldr	r5, [pc, #44]	; (b30c <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    b2e0:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    b2e2:	ldr	r6, [pc, #44]	; (b310 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b2e4:	mrs	r2, PRIMASK
		__disable_irq();
    b2e8:	cpsid	i
		EventResponder *first = firstInterrupt;
    b2ea:	ldr	r0, [r5, #0]
		if (first) {
    b2ec:	cbz	r0, b306 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    b2ee:	ldr	r3, [r0, #20]
    b2f0:	str	r3, [r5, #0]
			if (firstInterrupt) {
    b2f2:	cbz	r3, b302 <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    b2f4:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    b2f6:	cbnz	r2, b2fa <EventResponder::runFromInterrupt()+0x1e>
    b2f8:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    b2fa:	ldr	r3, [r0, #8]
			first->_triggered = false;
    b2fc:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    b2fe:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    b300:	b.n	b2e4 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    b302:	str	r3, [r6, #0]
    b304:	b.n	b2f6 <EventResponder::runFromInterrupt()+0x1a>
    b306:	cbnz	r2, b30a <EventResponder::runFromInterrupt()+0x2e>
    b308:	cpsie	i
}
    b30a:	pop	{r4, r5, r6, pc}
    b30c:	.word	0x2002740c
    b310:	.word	0x20027408

0000b314 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    b314:	b.w	b2dc <EventResponder::runFromInterrupt()>

0000b318 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    b318:	ldr	r3, [pc, #16]	; (b32c <systick_isr+0x14>)
    b31a:	ldr	r2, [r3, #4]
    b31c:	ldr	r3, [pc, #16]	; (b330 <systick_isr+0x18>)
    b31e:	str	r2, [r3, #0]
	systick_millis_count++;
    b320:	ldr	r2, [pc, #16]	; (b334 <systick_isr+0x1c>)
    b322:	ldr	r3, [r2, #0]
    b324:	adds	r3, #1
    b326:	str	r3, [r2, #0]
}
    b328:	bx	lr
    b32a:	nop
    b32c:	.word	0xe0001000
    b330:	.word	0x2002813c
    b334:	.word	0x20028140

0000b338 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    b338:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    b33a:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    b33c:	ldr	r4, [pc, #136]	; (b3c8 <DMAChannel::begin(bool)+0x90>)
    b33e:	cbnz	r1, b364 <DMAChannel::begin(bool)+0x2c>
    b340:	ldr	r1, [r0, #0]
    b342:	cbz	r1, b364 <DMAChannel::begin(bool)+0x2c>
    b344:	ldrb	r3, [r0, #4]
    b346:	cmp	r3, #15
    b348:	bhi.n	b364 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    b34a:	ldrh	r2, [r4, #0]
    b34c:	asrs	r2, r3
    b34e:	lsls	r2, r2, #31
    b350:	bpl.n	b364 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    b352:	add.w	r3, r3, #33554432	; 0x2000000
    b356:	add.w	r3, r3, #29824	; 0x7480
    b35a:	cmp.w	r1, r3, lsl #5
    b35e:	bne.n	b364 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    b360:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    b362:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    b364:	ldrh	r1, [r4, #0]
    b366:	movs	r3, #0
    b368:	asr.w	r2, r1, r3
    b36c:	ands.w	r2, r2, #1
    b370:	bne.n	b3b8 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    b372:	movs	r5, #1
    b374:	lsls	r5, r3
    b376:	orrs	r1, r5
    b378:	strh	r1, [r4, #0]
			__enable_irq();
    b37a:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b37c:	ldr	r5, [pc, #76]	; (b3cc <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    b37e:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b380:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    b384:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b386:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b388:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b38c:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b390:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    b392:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    b394:	movw	r5, #1154	; 0x482
    b398:	ldr	r1, [pc, #52]	; (b3d0 <DMAChannel::begin(bool)+0x98>)
    b39a:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    b39c:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    b39e:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    b3a0:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    b3a2:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    b3a4:	str	r3, [r0, #0]
	*p++ = 0;
    b3a6:	strd	r2, r2, [r3]
	*p++ = 0;
    b3aa:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    b3ae:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    b3b2:	strd	r2, r2, [r3, #24]
    b3b6:	b.n	b362 <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    b3b8:	adds	r3, #1
    b3ba:	cmp	r3, #16
    b3bc:	bne.n	b368 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    b3be:	cpsie	i
			TCD = (TCD_t *)0;
    b3c0:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    b3c2:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    b3c4:	str	r2, [r0, #0]
			return; // no more channels available
    b3c6:	b.n	b362 <DMAChannel::begin(bool)+0x2a>
    b3c8:	.word	0x20028190
    b3cc:	.word	0x400fc000
    b3d0:	.word	0x400e8000

0000b3d4 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    b3d4:	ldrb	r3, [r0, #4]
    b3d6:	cmp	r3, #15
    b3d8:	bhi.n	b3fa <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    b3da:	ldr	r2, [pc, #32]	; (b3fc <DMAChannel::release()+0x28>)
    b3dc:	strb	r3, [r2, #26]
	__disable_irq();
    b3de:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    b3e0:	ldr	r1, [pc, #28]	; (b400 <DMAChannel::release()+0x2c>)
    b3e2:	movs	r2, #1
    b3e4:	ldrb	r3, [r0, #4]
    b3e6:	lsls	r2, r3
    b3e8:	ldrh	r3, [r1, #0]
    b3ea:	bic.w	r3, r3, r2
    b3ee:	strh	r3, [r1, #0]
	__enable_irq();
    b3f0:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    b3f2:	movs	r3, #16
    b3f4:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    b3f6:	movs	r3, #0
    b3f8:	str	r3, [r0, #0]
}
    b3fa:	bx	lr
    b3fc:	.word	0x400e8000
    b400:	.word	0x20028190

0000b404 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    b404:	push	{r3, lr}
    b406:	bl	caa <Print::write(char const*)>
    b40a:	pop	{r3, pc}

0000b40c <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    b40c:	movs	r3, #0
    b40e:	movs	r2, #10
    b410:	b.w	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000b414 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    b414:	movs	r3, #0
    b416:	uxtb	r2, r2
    b418:	b.w	b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000b41c <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    b41c:	push	{r3, r4, r5, lr}
    b41e:	mov	r5, r0
    b420:	bl	b414 <Print::print(unsigned long, int)>
    b424:	mov	r4, r0
    b426:	mov	r0, r5
    b428:	bl	b570 <Print::println()>
    b42c:	add	r0, r4
    b42e:	pop	{r3, r4, r5, pc}

0000b430 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    b430:	movs	r2, #0
    b432:	movs	r3, #1
    b434:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    b436:	push	{r4, lr}
		while (len > 0) {
    b438:	cmp	r1, #0
    b43a:	sub.w	r4, r0, r1
    b43e:	bgt.n	b448 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    b440:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    b442:	orr.w	r0, r3, r2, lsl #16
    b446:	pop	{r4, pc}
			a += *p++;
    b448:	ldrh	r4, [r4, #0]
			len -= 2;
    b44a:	subs	r1, #2
			a += *p++;
    b44c:	uxtah	r3, r3, r4
			b += a;
    b450:	add	r2, r3
			len -= 2;
    b452:	b.n	b438 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000b454 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    b454:	b.w	996c <usb_serial_flush_input>

0000b458 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    b458:	b.w	9914 <usb_serial_peekchar>

0000b45c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    b45c:	b.w	99cc <usb_serial_getchar>

0000b460 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    b460:	b.w	9958 <usb_serial_available>

0000b464 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b464:	b.w	9bdc <usb_serial_flush_output>

0000b468 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b468:	b.w	9b90 <usb_serial_write_buffer_free>

0000b46c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b46c:	mov	r0, r1
    b46e:	mov	r1, r2
    b470:	b.w	99ec <usb_serial_write>

0000b474 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b474:	mov	r0, r1
    b476:	b.w	9b78 <usb_serial_putchar>

0000b47a <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    b47a:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    b47c:	bl	74c <setup>
	while (1) {
		loop();
    b480:	bl	248 <loop>
		yield();
    b484:	bl	b268 <yield>
	while (1) {
    b488:	b.n	b480 <main+0x6>
	...

0000b48c <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    b48c:	push	{r4, r5, r6, lr}
    b48e:	ldr	r5, [pc, #36]	; (b4b4 <Stream::timedRead()+0x28>)
    b490:	mov	r4, r0
    b492:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    b494:	ldr	r3, [r4, #0]
    b496:	mov	r0, r4
    b498:	ldr	r3, [r3, #20]
    b49a:	blx	r3
    if (c >= 0) return c;
    b49c:	cmp	r0, #0
    b49e:	bge.n	b4b2 <Stream::timedRead()+0x26>
    yield();
    b4a0:	bl	b268 <yield>
    b4a4:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    b4a6:	ldr	r2, [r4, #8]
    b4a8:	subs	r3, r3, r6
    b4aa:	cmp	r3, r2
    b4ac:	bcc.n	b494 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    b4ae:	mov.w	r0, #4294967295
}
    b4b2:	pop	{r4, r5, r6, pc}
    b4b4:	.word	0x20028140

0000b4b8 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    b4b8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b4bc:	mov	r6, r0
    b4be:	mov	r7, r1
    b4c0:	mov	r4, r3
	if (buffer == nullptr) return 0;
    b4c2:	mov	r5, r2
    b4c4:	cbz	r2, b4f6 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    b4c6:	cbz	r3, b4e8 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    b4c8:	add.w	r8, r3, #4294967295
	size_t index = 0;
    b4cc:	movs	r4, #0
	while (index < length) {
    b4ce:	cmp	r4, r8
    b4d0:	bcs.n	b4e4 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    b4d2:	mov	r0, r6
    b4d4:	bl	b48c <Stream::timedRead()>
		if (c == terminator) break;
    b4d8:	cmp	r7, r0
    b4da:	beq.n	b4e4 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    b4dc:	cmp	r0, #0
    b4de:	bge.n	b4ee <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    b4e0:	movs	r3, #1
    b4e2:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    b4e4:	movs	r3, #0
    b4e6:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    b4e8:	mov	r0, r4
    b4ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    b4ee:	adds	r4, #1
		*buffer++ = (char)c;
    b4f0:	strb.w	r0, [r5], #1
		index++;
    b4f4:	b.n	b4ce <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    b4f6:	mov	r4, r2
    b4f8:	b.n	b4e8 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000b4fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    b4fa:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    b4fc:	push	{r4, r5, r6, r7, lr}
		base = 10;
    b4fe:	it	eq
    b500:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    b502:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    b504:	cbnz	r1, b532 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    b506:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    b508:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    b50a:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    b50e:	cbz	r3, b520 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    b510:	subs	r3, r4, #1
		buf[i] = '-';
    b512:	add	r2, sp, #40	; 0x28
		i--;
    b514:	uxtb	r4, r3
		buf[i] = '-';
    b516:	uxtab	r3, r2, r3
    b51a:	movs	r2, #45	; 0x2d
    b51c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    b520:	ldr	r3, [r0, #0]
    b522:	add	r1, sp, #4
    b524:	rsb	r2, r4, #34	; 0x22
    b528:	ldr	r3, [r3, #4]
    b52a:	add	r1, r4
    b52c:	blx	r3
}
    b52e:	add	sp, #44	; 0x2c
    b530:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    b532:	movs	r4, #33	; 0x21
			digit = n % base;
    b534:	udiv	r6, r1, r2
    b538:	mls	r7, r2, r6, r1
    b53c:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b53e:	cmp	r7, #9
    b540:	add.w	r7, r4, #40	; 0x28
    b544:	ite	ls
    b546:	addls	r5, #48	; 0x30
    b548:	addhi	r5, #55	; 0x37
    b54a:	add	r7, sp
			if (n == 0) break;
    b54c:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b54e:	uxtb	r5, r5
    b550:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    b554:	bhi.n	b50e <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    b556:	subs	r4, #1
			n /= base;
    b558:	mov	r1, r6
			i--;
    b55a:	uxtb	r4, r4
			digit = n % base;
    b55c:	b.n	b534 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000b55e <Print::print(long)>:
	if (n < 0) {
    b55e:	cmp	r1, #0
		n = -n;
    b560:	mov.w	r2, #10
    b564:	itte	lt
    b566:	neglt	r1, r1
		sign = '-';
    b568:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    b56a:	movge	r3, #0
	if (base == 0) {
    b56c:	b.w	b4fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000b570 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    b570:	movw	r3, #2573	; 0xa0d
{
    b574:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    b576:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    b57a:	movs	r2, #2
    b57c:	ldr	r3, [r0, #0]
    b57e:	add	r1, sp, #4
    b580:	ldr	r3, [r3, #4]
    b582:	blx	r3
}
    b584:	add	sp, #12
    b586:	ldr.w	pc, [sp], #4
	...

0000b58c <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    b58c:	ldr	r3, [pc, #20]	; (b5a4 <_write+0x18>)
    b58e:	cmp	r0, #2
    b590:	it	hi
    b592:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b594:	ldr	r0, [r3, #0]
{
    b596:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b598:	ldr	r4, [r0, #4]
    b59a:	mov	r0, r3
    b59c:	mov	r3, r4
}
    b59e:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    b5a2:	bx	r3
    b5a4:	.word	0x20008944

0000b5a8 <Print::printf(char const*, ...)>:
{
    b5a8:	push	{r1, r2, r3}
    b5aa:	push	{r0, r1, lr}
    b5ac:	add	r2, sp, #12
    b5ae:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    b5b2:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    b5b4:	bl	d7c8 <vdprintf>
}
    b5b8:	add	sp, #8
    b5ba:	ldr.w	lr, [sp], #4
    b5be:	add	sp, #12
    b5c0:	bx	lr

0000b5c2 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    b5c2:	push	{r4, r5}
	if (base == 0) {
    b5c4:	cbnz	r2, b5d0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    b5c6:	ldr	r3, [r0, #0]
    b5c8:	uxtb	r1, r1
    b5ca:	ldr	r3, [r3, #0]
}
    b5cc:	pop	{r4, r5}
		return write((uint8_t)n);
    b5ce:	bx	r3
}
    b5d0:	pop	{r4, r5}
    b5d2:	b.w	b4fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000b5d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    b5d6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5da:	sub	sp, #72	; 0x48
    b5dc:	mov	r8, r0
    b5de:	mov	r7, r2
    b5e0:	mov	r6, r3
    b5e2:	ldrb.w	r9, [sp, #104]	; 0x68
    b5e6:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    b5ea:	cmp.w	r9, #1
    b5ee:	bls.n	b662 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    b5f0:	orrs.w	r3, r2, r6
    b5f4:	bne.n	b62c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    b5f6:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    b5f8:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    b5fa:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    b5fe:	cmp.w	sl, #0
    b602:	beq.n	b614 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    b604:	subs	r3, r5, #1
		buf[i] = '-';
    b606:	add	r2, sp, #72	; 0x48
		i--;
    b608:	uxtb	r5, r3
		buf[i] = '-';
    b60a:	uxtab	r3, r2, r3
    b60e:	movs	r2, #45	; 0x2d
    b610:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    b614:	ldr.w	r3, [r8]
    b618:	add	r1, sp, #4
    b61a:	rsb	r2, r5, #66	; 0x42
    b61e:	mov	r0, r8
    b620:	ldr	r3, [r3, #4]
    b622:	add	r1, r5
    b624:	blx	r3
}
    b626:	add	sp, #72	; 0x48
    b628:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    b62c:	movs	r5, #65	; 0x41
			digit = n % base;
    b62e:	mov	r1, r6
    b630:	mov	r2, r9
    b632:	movs	r3, #0
    b634:	mov	r0, r7
    b636:	bl	b7a4 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b63a:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    b63e:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b640:	add	r3, sp
    b642:	cmp	r4, #9
    b644:	ite	ls
    b646:	addls	r4, #48	; 0x30
    b648:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    b64a:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b64c:	uxtb	r4, r4
			if (n == 0) break;
    b64e:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b652:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    b656:	bcc.n	b5fe <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    b658:	subs	r5, #1
			n /= base;
    b65a:	mov	r7, r0
    b65c:	mov	r6, r1
			i--;
    b65e:	uxtb	r5, r5
			digit = n % base;
    b660:	b.n	b62e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    b662:	movs	r0, #0
    b664:	b.n	b626 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000b668 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    b668:	vcmp.f64	d0, d0
{
    b66c:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    b66e:	vmrs	APSR_nzcv, fpscr
{
    b672:	mov	r6, r0
    b674:	mov	r5, r1
    b676:	vpush	{d8-d9}
    b67a:	sub	sp, #28
	if (isnan(number)) return print("nan");
    b67c:	bvc.n	b690 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    b67e:	ldr	r1, [pc, #264]	; (b788 <Print::printFloat(double, unsigned char)+0x120>)
    b680:	bl	caa <Print::write(char const*)>
    b684:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    b686:	mov	r0, r4
    b688:	add	sp, #28
    b68a:	vpop	{d8-d9}
    b68e:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    b690:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    b694:	vldr	d6, [pc, #208]	; b768 <Print::printFloat(double, unsigned char)+0x100>
    b698:	vcmp.f64	d7, d6
    b69c:	vmrs	APSR_nzcv, fpscr
    b6a0:	ble.n	b6a6 <Print::printFloat(double, unsigned char)+0x3e>
    b6a2:	ldr	r1, [pc, #232]	; (b78c <Print::printFloat(double, unsigned char)+0x124>)
    b6a4:	b.n	b680 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    b6a6:	vldr	d7, [pc, #200]	; b770 <Print::printFloat(double, unsigned char)+0x108>
    b6aa:	vcmpe.f64	d0, d7
    b6ae:	vmrs	APSR_nzcv, fpscr
    b6b2:	ble.n	b6ba <Print::printFloat(double, unsigned char)+0x52>
    b6b4:	ldr	r1, [pc, #216]	; (b790 <Print::printFloat(double, unsigned char)+0x128>)
    b6b6:	mov	r0, r6
    b6b8:	b.n	b680 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    b6ba:	vldr	d7, [pc, #188]	; b778 <Print::printFloat(double, unsigned char)+0x110>
    b6be:	vcmpe.f64	d0, d7
    b6c2:	vmrs	APSR_nzcv, fpscr
    b6c6:	bmi.n	b6b4 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    b6c8:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    b6cc:	movs	r2, #0
	double rounding = 0.5;
    b6ce:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    b6d2:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    b6d6:	vldr	d6, [pc, #168]	; b780 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    b6da:	itte	mi
    b6dc:	vnegmi.f64	d0, d0
		sign = 1;
    b6e0:	movmi	r3, #1
	uint8_t sign=0;
    b6e2:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    b6e4:	uxtb	r1, r2
    b6e6:	cmp	r5, r1
    b6e8:	bhi.n	b738 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    b6ea:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    b6ee:	movs	r2, #10
    b6f0:	mov	r0, r6
    b6f2:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    b6f6:	vmov	r1, s18
    b6fa:	bl	b4fa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    b6fe:	mov	r4, r0
	if (digits > 0) {
    b700:	cmp	r5, #0
    b702:	beq.n	b686 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    b704:	vcvt.f64.u32	d0, s18
    b708:	cmp	r5, #15
    b70a:	add	r0, sp, #8
			remainder *= 10.0;
    b70c:	vmov.f64	d6, #36	; 0x41200000  10.0
    b710:	it	cs
    b712:	movcs	r5, #15
		buf[0] = '.';
    b714:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    b716:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    b71a:	mov	r1, r0
    b71c:	mov	r2, r5
    b71e:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    b722:	subs	r2, #1
    b724:	uxtb	r2, r2
    b726:	cmp	r2, #255	; 0xff
    b728:	bne.n	b740 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    b72a:	adds	r5, #1
    b72c:	ldr	r3, [r6, #0]
    b72e:	mov	r0, r6
    b730:	ldr	r3, [r3, #4]
    b732:	uxtb	r2, r5
    b734:	blx	r3
    b736:	b.n	b686 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    b738:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    b73c:	adds	r2, #1
    b73e:	b.n	b6e4 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    b740:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    b744:	vcvt.u32.f64	s15, d0
    b748:	vstr	s15, [sp, #4]
    b74c:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    b750:	vmov	s15, r3
			buf[count++] = '0' + n;
    b754:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    b758:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    b75c:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    b760:	vsub.f64	d0, d0, d7
    b764:	b.n	b722 <Print::printFloat(double, unsigned char)+0xba>
    b766:	nop
    b768:	.word	0xffffffff
    b76c:	.word	0x7fefffff
    b770:	.word	0xe0000000
    b774:	.word	0x41efffff
    b778:	.word	0xe0000000
    b77c:	.word	0xc1efffff
    b780:	.word	0xa0000000
    b784:	.word	0x3fb99999
    b788:	.word	0x20007f12
    b78c:	.word	0x20007f16
    b790:	.word	0x20007f1a

0000b794 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    b794:	b.w	bab0 <free>

0000b798 <__aeabi_atexit>:
    b798:	mov	r3, r0
    b79a:	mov	r0, r1
    b79c:	mov	r1, r3
    b79e:	b.w	d3ec <__cxa_atexit>
    b7a2:	nop

0000b7a4 <__aeabi_uldivmod>:
    b7a4:	cbnz	r3, b7bc <__aeabi_uldivmod+0x18>
    b7a6:	cbnz	r2, b7bc <__aeabi_uldivmod+0x18>
    b7a8:	cmp	r1, #0
    b7aa:	it	eq
    b7ac:	cmpeq	r0, #0
    b7ae:	itt	ne
    b7b0:	movne.w	r1, #4294967295
    b7b4:	movne.w	r0, #4294967295
    b7b8:	b.w	ba9c <__aeabi_idiv0>
    b7bc:	sub.w	ip, sp, #8
    b7c0:	strd	ip, lr, [sp, #-16]!
    b7c4:	bl	b7d4 <__udivmoddi4>
    b7c8:	ldr.w	lr, [sp, #4]
    b7cc:	ldrd	r2, r3, [sp, #8]
    b7d0:	add	sp, #16
    b7d2:	bx	lr

0000b7d4 <__udivmoddi4>:
    b7d4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7d8:	ldr	r6, [sp, #32]
    b7da:	mov	r5, r1
    b7dc:	mov	r4, r0
    b7de:	mov	r7, r1
    b7e0:	cmp	r3, #0
    b7e2:	bne.n	b87a <__udivmoddi4+0xa6>
    b7e4:	cmp	r2, r1
    b7e6:	mov	ip, r2
    b7e8:	bls.n	b8b6 <__udivmoddi4+0xe2>
    b7ea:	clz	r3, r2
    b7ee:	cbz	r3, b802 <__udivmoddi4+0x2e>
    b7f0:	lsl.w	ip, r2, r3
    b7f4:	rsb	r2, r3, #32
    b7f8:	lsls	r7, r3
    b7fa:	lsr.w	r2, r0, r2
    b7fe:	orrs	r7, r2
    b800:	lsls	r4, r3
    b802:	mov.w	lr, ip, lsr #16
    b806:	uxth.w	r5, ip
    b80a:	udiv	r1, r7, lr
    b80e:	lsrs	r2, r4, #16
    b810:	mls	r7, lr, r1, r7
    b814:	orr.w	r2, r2, r7, lsl #16
    b818:	mul.w	r0, r1, r5
    b81c:	cmp	r0, r2
    b81e:	bls.n	b836 <__udivmoddi4+0x62>
    b820:	adds.w	r2, ip, r2
    b824:	add.w	r7, r1, #4294967295
    b828:	bcs.w	ba64 <__udivmoddi4+0x290>
    b82c:	cmp	r0, r2
    b82e:	bls.w	ba64 <__udivmoddi4+0x290>
    b832:	subs	r1, #2
    b834:	add	r2, ip
    b836:	subs	r2, r2, r0
    b838:	uxth	r4, r4
    b83a:	udiv	r0, r2, lr
    b83e:	mls	r2, lr, r0, r2
    b842:	orr.w	r4, r4, r2, lsl #16
    b846:	mul.w	r5, r0, r5
    b84a:	cmp	r5, r4
    b84c:	bls.n	b864 <__udivmoddi4+0x90>
    b84e:	adds.w	r4, ip, r4
    b852:	add.w	r2, r0, #4294967295
    b856:	bcs.w	ba68 <__udivmoddi4+0x294>
    b85a:	cmp	r5, r4
    b85c:	bls.w	ba68 <__udivmoddi4+0x294>
    b860:	add	r4, ip
    b862:	subs	r0, #2
    b864:	orr.w	r0, r0, r1, lsl #16
    b868:	subs	r4, r4, r5
    b86a:	movs	r1, #0
    b86c:	cbz	r6, b876 <__udivmoddi4+0xa2>
    b86e:	lsrs	r4, r3
    b870:	movs	r3, #0
    b872:	strd	r4, r3, [r6]
    b876:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b87a:	cmp	r3, r1
    b87c:	bls.n	b890 <__udivmoddi4+0xbc>
    b87e:	cmp	r6, #0
    b880:	beq.w	ba5e <__udivmoddi4+0x28a>
    b884:	movs	r1, #0
    b886:	strd	r0, r5, [r6]
    b88a:	mov	r0, r1
    b88c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b890:	clz	r1, r3
    b894:	cmp	r1, #0
    b896:	bne.n	b92c <__udivmoddi4+0x158>
    b898:	cmp	r3, r5
    b89a:	bcc.n	b8a2 <__udivmoddi4+0xce>
    b89c:	cmp	r2, r0
    b89e:	bhi.w	ba92 <__udivmoddi4+0x2be>
    b8a2:	subs	r4, r0, r2
    b8a4:	sbc.w	r2, r5, r3
    b8a8:	movs	r0, #1
    b8aa:	mov	r7, r2
    b8ac:	cmp	r6, #0
    b8ae:	beq.n	b876 <__udivmoddi4+0xa2>
    b8b0:	strd	r4, r7, [r6]
    b8b4:	b.n	b876 <__udivmoddi4+0xa2>
    b8b6:	cbnz	r2, b8ba <__udivmoddi4+0xe6>
    b8b8:	udf	#255	; 0xff
    b8ba:	clz	r3, r2
    b8be:	cmp	r3, #0
    b8c0:	bne.w	b9e4 <__udivmoddi4+0x210>
    b8c4:	subs	r2, r1, r2
    b8c6:	mov.w	r7, ip, lsr #16
    b8ca:	uxth.w	lr, ip
    b8ce:	movs	r1, #1
    b8d0:	udiv	r5, r2, r7
    b8d4:	mls	r0, r7, r5, r2
    b8d8:	lsrs	r2, r4, #16
    b8da:	orr.w	r2, r2, r0, lsl #16
    b8de:	mul.w	r0, lr, r5
    b8e2:	cmp	r0, r2
    b8e4:	bls.n	b8f8 <__udivmoddi4+0x124>
    b8e6:	adds.w	r2, ip, r2
    b8ea:	add.w	r8, r5, #4294967295
    b8ee:	bcs.n	b8f6 <__udivmoddi4+0x122>
    b8f0:	cmp	r0, r2
    b8f2:	bhi.w	ba8c <__udivmoddi4+0x2b8>
    b8f6:	mov	r5, r8
    b8f8:	subs	r2, r2, r0
    b8fa:	uxth	r4, r4
    b8fc:	udiv	r0, r2, r7
    b900:	mls	r2, r7, r0, r2
    b904:	orr.w	r4, r4, r2, lsl #16
    b908:	mul.w	lr, lr, r0
    b90c:	cmp	lr, r4
    b90e:	bls.n	b922 <__udivmoddi4+0x14e>
    b910:	adds.w	r4, ip, r4
    b914:	add.w	r2, r0, #4294967295
    b918:	bcs.n	b920 <__udivmoddi4+0x14c>
    b91a:	cmp	lr, r4
    b91c:	bhi.w	ba96 <__udivmoddi4+0x2c2>
    b920:	mov	r0, r2
    b922:	sub.w	r4, r4, lr
    b926:	orr.w	r0, r0, r5, lsl #16
    b92a:	b.n	b86c <__udivmoddi4+0x98>
    b92c:	rsb	r7, r1, #32
    b930:	lsls	r3, r1
    b932:	lsr.w	ip, r2, r7
    b936:	orr.w	ip, ip, r3
    b93a:	lsl.w	r4, r5, r1
    b93e:	lsr.w	r3, r0, r7
    b942:	lsrs	r5, r7
    b944:	mov.w	r9, ip, lsr #16
    b948:	orrs	r3, r4
    b94a:	udiv	r8, r5, r9
    b94e:	uxth.w	lr, ip
    b952:	mls	r5, r9, r8, r5
    b956:	lsrs	r4, r3, #16
    b958:	orr.w	r4, r4, r5, lsl #16
    b95c:	mul.w	r5, r8, lr
    b960:	cmp	r5, r4
    b962:	lsl.w	r2, r2, r1
    b966:	lsl.w	r0, r0, r1
    b96a:	bls.n	b984 <__udivmoddi4+0x1b0>
    b96c:	adds.w	r4, ip, r4
    b970:	add.w	sl, r8, #4294967295
    b974:	bcs.w	ba88 <__udivmoddi4+0x2b4>
    b978:	cmp	r5, r4
    b97a:	bls.w	ba88 <__udivmoddi4+0x2b4>
    b97e:	sub.w	r8, r8, #2
    b982:	add	r4, ip
    b984:	subs	r4, r4, r5
    b986:	uxth	r5, r3
    b988:	udiv	r3, r4, r9
    b98c:	mls	r4, r9, r3, r4
    b990:	orr.w	r4, r5, r4, lsl #16
    b994:	mul.w	lr, r3, lr
    b998:	cmp	lr, r4
    b99a:	bls.n	b9ae <__udivmoddi4+0x1da>
    b99c:	adds.w	r4, ip, r4
    b9a0:	add.w	r5, r3, #4294967295
    b9a4:	bcs.n	ba80 <__udivmoddi4+0x2ac>
    b9a6:	cmp	lr, r4
    b9a8:	bls.n	ba80 <__udivmoddi4+0x2ac>
    b9aa:	subs	r3, #2
    b9ac:	add	r4, ip
    b9ae:	orr.w	r3, r3, r8, lsl #16
    b9b2:	umull	r9, r5, r3, r2
    b9b6:	sub.w	r4, r4, lr
    b9ba:	cmp	r4, r5
    b9bc:	mov	r8, r9
    b9be:	mov	lr, r5
    b9c0:	bcc.n	ba70 <__udivmoddi4+0x29c>
    b9c2:	beq.n	ba6c <__udivmoddi4+0x298>
    b9c4:	cbz	r6, b9dc <__udivmoddi4+0x208>
    b9c6:	subs.w	r2, r0, r8
    b9ca:	sbc.w	r4, r4, lr
    b9ce:	lsl.w	r7, r4, r7
    b9d2:	lsrs	r2, r1
    b9d4:	lsrs	r4, r1
    b9d6:	orrs	r7, r2
    b9d8:	strd	r7, r4, [r6]
    b9dc:	mov	r0, r3
    b9de:	movs	r1, #0
    b9e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9e4:	rsb	r1, r3, #32
    b9e8:	lsl.w	ip, r2, r3
    b9ec:	lsr.w	r2, r0, r1
    b9f0:	lsr.w	r1, r5, r1
    b9f4:	lsls	r5, r3
    b9f6:	orrs	r2, r5
    b9f8:	mov.w	r7, ip, lsr #16
    b9fc:	uxth.w	lr, ip
    ba00:	udiv	r0, r1, r7
    ba04:	mls	r5, r7, r0, r1
    ba08:	lsrs	r1, r2, #16
    ba0a:	orr.w	r1, r1, r5, lsl #16
    ba0e:	mul.w	r5, r0, lr
    ba12:	cmp	r5, r1
    ba14:	lsl.w	r4, r4, r3
    ba18:	bls.n	ba2c <__udivmoddi4+0x258>
    ba1a:	adds.w	r1, ip, r1
    ba1e:	add.w	r8, r0, #4294967295
    ba22:	bcs.n	ba84 <__udivmoddi4+0x2b0>
    ba24:	cmp	r5, r1
    ba26:	bls.n	ba84 <__udivmoddi4+0x2b0>
    ba28:	subs	r0, #2
    ba2a:	add	r1, ip
    ba2c:	subs	r1, r1, r5
    ba2e:	uxth	r2, r2
    ba30:	udiv	r5, r1, r7
    ba34:	mls	r1, r7, r5, r1
    ba38:	orr.w	r2, r2, r1, lsl #16
    ba3c:	mul.w	r1, r5, lr
    ba40:	cmp	r1, r2
    ba42:	bls.n	ba56 <__udivmoddi4+0x282>
    ba44:	adds.w	r2, ip, r2
    ba48:	add.w	r8, r5, #4294967295
    ba4c:	bcs.n	ba7c <__udivmoddi4+0x2a8>
    ba4e:	cmp	r1, r2
    ba50:	bls.n	ba7c <__udivmoddi4+0x2a8>
    ba52:	subs	r5, #2
    ba54:	add	r2, ip
    ba56:	subs	r2, r2, r1
    ba58:	orr.w	r1, r5, r0, lsl #16
    ba5c:	b.n	b8d0 <__udivmoddi4+0xfc>
    ba5e:	mov	r1, r6
    ba60:	mov	r0, r6
    ba62:	b.n	b876 <__udivmoddi4+0xa2>
    ba64:	mov	r1, r7
    ba66:	b.n	b836 <__udivmoddi4+0x62>
    ba68:	mov	r0, r2
    ba6a:	b.n	b864 <__udivmoddi4+0x90>
    ba6c:	cmp	r0, r9
    ba6e:	bcs.n	b9c4 <__udivmoddi4+0x1f0>
    ba70:	subs.w	r8, r9, r2
    ba74:	sbc.w	lr, r5, ip
    ba78:	subs	r3, #1
    ba7a:	b.n	b9c4 <__udivmoddi4+0x1f0>
    ba7c:	mov	r5, r8
    ba7e:	b.n	ba56 <__udivmoddi4+0x282>
    ba80:	mov	r3, r5
    ba82:	b.n	b9ae <__udivmoddi4+0x1da>
    ba84:	mov	r0, r8
    ba86:	b.n	ba2c <__udivmoddi4+0x258>
    ba88:	mov	r8, sl
    ba8a:	b.n	b984 <__udivmoddi4+0x1b0>
    ba8c:	subs	r5, #2
    ba8e:	add	r2, ip
    ba90:	b.n	b8f8 <__udivmoddi4+0x124>
    ba92:	mov	r0, r1
    ba94:	b.n	b8ac <__udivmoddi4+0xd8>
    ba96:	add	r4, ip
    ba98:	subs	r0, #2
    ba9a:	b.n	b922 <__udivmoddi4+0x14e>

0000ba9c <__aeabi_idiv0>:
    ba9c:	bx	lr
    ba9e:	nop

0000baa0 <malloc>:
    baa0:	ldr	r3, [pc, #8]	; (baac <malloc+0xc>)
    baa2:	mov	r1, r0
    baa4:	ldr	r0, [r3, #0]
    baa6:	b.w	bac0 <_malloc_r>
    baaa:	nop
    baac:	.word	0x20008eec

0000bab0 <free>:
    bab0:	ldr	r3, [pc, #8]	; (babc <free+0xc>)
    bab2:	mov	r1, r0
    bab4:	ldr	r0, [r3, #0]
    bab6:	b.w	e2e4 <_free_r>
    baba:	nop
    babc:	.word	0x20008eec

0000bac0 <_malloc_r>:
    bac0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bac4:	add.w	r6, r1, #11
    bac8:	cmp	r6, #22
    baca:	sub	sp, #12
    bacc:	mov	r4, r0
    bace:	bhi.n	bb1a <_malloc_r+0x5a>
    bad0:	cmp	r1, #16
    bad2:	bhi.w	bc4a <_malloc_r+0x18a>
    bad6:	bl	c020 <__malloc_lock>
    bada:	movs	r6, #16
    badc:	movs	r2, #24
    bade:	movs	r0, #2
    bae0:	ldr	r7, [pc, #724]	; (bdb8 <_malloc_r+0x2f8>)
    bae2:	add	r2, r7
    bae4:	sub.w	r1, r2, #8
    bae8:	ldr	r3, [r2, #4]
    baea:	cmp	r3, r1
    baec:	beq.w	bc64 <_malloc_r+0x1a4>
    baf0:	ldr	r2, [r3, #4]
    baf2:	ldr	r1, [r3, #12]
    baf4:	bic.w	r2, r2, #3
    baf8:	add	r2, r3
    bafa:	ldr	r5, [r3, #8]
    bafc:	str	r1, [r5, #12]
    bafe:	str	r5, [r1, #8]
    bb00:	ldr	r1, [r2, #4]
    bb02:	orr.w	r1, r1, #1
    bb06:	mov	r0, r4
    bb08:	str	r1, [r2, #4]
    bb0a:	add.w	r5, r3, #8
    bb0e:	bl	c02c <__malloc_unlock>
    bb12:	mov	r0, r5
    bb14:	add	sp, #12
    bb16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb1a:	bics.w	r6, r6, #7
    bb1e:	bmi.w	bc4a <_malloc_r+0x18a>
    bb22:	cmp	r1, r6
    bb24:	bhi.w	bc4a <_malloc_r+0x18a>
    bb28:	bl	c020 <__malloc_lock>
    bb2c:	cmp.w	r6, #504	; 0x1f8
    bb30:	bcc.w	be68 <_malloc_r+0x3a8>
    bb34:	lsrs	r3, r6, #9
    bb36:	beq.w	bc58 <_malloc_r+0x198>
    bb3a:	cmp	r3, #4
    bb3c:	bhi.w	be1e <_malloc_r+0x35e>
    bb40:	lsrs	r3, r6, #6
    bb42:	add.w	r0, r3, #57	; 0x39
    bb46:	add.w	ip, r3, #56	; 0x38
    bb4a:	lsls	r3, r0, #3
    bb4c:	ldr	r7, [pc, #616]	; (bdb8 <_malloc_r+0x2f8>)
    bb4e:	add	r3, r7
    bb50:	sub.w	r5, r3, #8
    bb54:	ldr	r3, [r3, #4]
    bb56:	cmp	r5, r3
    bb58:	bne.n	bb68 <_malloc_r+0xa8>
    bb5a:	b.n	bb76 <_malloc_r+0xb6>
    bb5c:	cmp	r1, #0
    bb5e:	bge.w	bdb0 <_malloc_r+0x2f0>
    bb62:	ldr	r3, [r3, #12]
    bb64:	cmp	r5, r3
    bb66:	beq.n	bb76 <_malloc_r+0xb6>
    bb68:	ldr	r2, [r3, #4]
    bb6a:	bic.w	r2, r2, #3
    bb6e:	subs	r1, r2, r6
    bb70:	cmp	r1, #15
    bb72:	ble.n	bb5c <_malloc_r+0x9c>
    bb74:	mov	r0, ip
    bb76:	ldr	r5, [r7, #16]
    bb78:	ldr.w	ip, [pc, #592]	; bdcc <_malloc_r+0x30c>
    bb7c:	cmp	r5, ip
    bb7e:	beq.n	bc7a <_malloc_r+0x1ba>
    bb80:	ldr	r2, [r5, #4]
    bb82:	bic.w	r2, r2, #3
    bb86:	subs	r3, r2, r6
    bb88:	cmp	r3, #15
    bb8a:	bgt.w	be84 <_malloc_r+0x3c4>
    bb8e:	cmp	r3, #0
    bb90:	strd	ip, ip, [r7, #16]
    bb94:	bge.w	be70 <_malloc_r+0x3b0>
    bb98:	cmp.w	r2, #512	; 0x200
    bb9c:	bcs.w	bdd4 <_malloc_r+0x314>
    bba0:	lsrs	r3, r2, #3
    bba2:	ldr	r1, [r7, #4]
    bba4:	adds	r3, #1
    bba6:	mov.w	lr, r2, lsr #5
    bbaa:	movs	r2, #1
    bbac:	lsl.w	r2, r2, lr
    bbb0:	orrs	r2, r1
    bbb2:	ldr.w	lr, [r7, r3, lsl #3]
    bbb6:	str.w	lr, [r5, #8]
    bbba:	add.w	r1, r7, r3, lsl #3
    bbbe:	subs	r1, #8
    bbc0:	str	r1, [r5, #12]
    bbc2:	str	r2, [r7, #4]
    bbc4:	str.w	r5, [r7, r3, lsl #3]
    bbc8:	str.w	r5, [lr, #12]
    bbcc:	asrs	r3, r0, #2
    bbce:	movs	r1, #1
    bbd0:	lsls	r1, r3
    bbd2:	cmp	r1, r2
    bbd4:	bhi.n	bc86 <_malloc_r+0x1c6>
    bbd6:	tst	r1, r2
    bbd8:	bne.n	bbe8 <_malloc_r+0x128>
    bbda:	bic.w	r0, r0, #3
    bbde:	lsls	r1, r1, #1
    bbe0:	tst	r1, r2
    bbe2:	add.w	r0, r0, #4
    bbe6:	beq.n	bbde <_malloc_r+0x11e>
    bbe8:	add.w	r9, r7, r0, lsl #3
    bbec:	mov	r5, r9
    bbee:	mov	lr, r0
    bbf0:	ldr.w	r8, [r5, #12]
    bbf4:	cmp	r5, r8
    bbf6:	bne.n	bc0a <_malloc_r+0x14a>
    bbf8:	b.n	be36 <_malloc_r+0x376>
    bbfa:	cmp	r3, #0
    bbfc:	bge.w	be48 <_malloc_r+0x388>
    bc00:	ldr.w	r8, [r8, #12]
    bc04:	cmp	r5, r8
    bc06:	beq.w	be36 <_malloc_r+0x376>
    bc0a:	ldr.w	r2, [r8, #4]
    bc0e:	bic.w	r2, r2, #3
    bc12:	subs	r3, r2, r6
    bc14:	cmp	r3, #15
    bc16:	ble.n	bbfa <_malloc_r+0x13a>
    bc18:	mov	r0, r4
    bc1a:	ldrd	r5, r4, [r8, #8]
    bc1e:	add.w	r1, r8, r6
    bc22:	orr.w	r6, r6, #1
    bc26:	str.w	r6, [r8, #4]
    bc2a:	str	r4, [r5, #12]
    bc2c:	str	r5, [r4, #8]
    bc2e:	orr.w	r4, r3, #1
    bc32:	strd	r1, r1, [r7, #16]
    bc36:	strd	ip, ip, [r1, #8]
    bc3a:	str	r4, [r1, #4]
    bc3c:	str.w	r3, [r8, r2]
    bc40:	bl	c02c <__malloc_unlock>
    bc44:	add.w	r5, r8, #8
    bc48:	b.n	bc50 <_malloc_r+0x190>
    bc4a:	movs	r3, #12
    bc4c:	str	r3, [r4, #0]
    bc4e:	movs	r5, #0
    bc50:	mov	r0, r5
    bc52:	add	sp, #12
    bc54:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc58:	mov.w	r3, #512	; 0x200
    bc5c:	movs	r0, #64	; 0x40
    bc5e:	mov.w	ip, #63	; 0x3f
    bc62:	b.n	bb4c <_malloc_r+0x8c>
    bc64:	ldr	r3, [r2, #12]
    bc66:	cmp	r2, r3
    bc68:	it	eq
    bc6a:	addeq	r0, #2
    bc6c:	bne.w	baf0 <_malloc_r+0x30>
    bc70:	ldr	r5, [r7, #16]
    bc72:	ldr.w	ip, [pc, #344]	; bdcc <_malloc_r+0x30c>
    bc76:	cmp	r5, ip
    bc78:	bne.n	bb80 <_malloc_r+0xc0>
    bc7a:	ldr	r2, [r7, #4]
    bc7c:	asrs	r3, r0, #2
    bc7e:	movs	r1, #1
    bc80:	lsls	r1, r3
    bc82:	cmp	r1, r2
    bc84:	bls.n	bbd6 <_malloc_r+0x116>
    bc86:	ldr	r5, [r7, #8]
    bc88:	ldr	r3, [r5, #4]
    bc8a:	bic.w	r9, r3, #3
    bc8e:	cmp	r6, r9
    bc90:	bhi.n	bc9a <_malloc_r+0x1da>
    bc92:	sub.w	r3, r9, r6
    bc96:	cmp	r3, #15
    bc98:	bgt.n	bd90 <_malloc_r+0x2d0>
    bc9a:	ldr.w	fp, [pc, #308]	; bdd0 <_malloc_r+0x310>
    bc9e:	ldr	r3, [pc, #284]	; (bdbc <_malloc_r+0x2fc>)
    bca0:	ldr.w	r2, [fp]
    bca4:	ldr	r3, [r3, #0]
    bca6:	adds	r2, #1
    bca8:	add	r3, r6
    bcaa:	add.w	sl, r5, r9
    bcae:	beq.w	bf18 <_malloc_r+0x458>
    bcb2:	add.w	r3, r3, #4096	; 0x1000
    bcb6:	adds	r3, #15
    bcb8:	bic.w	r8, r3, #4080	; 0xff0
    bcbc:	bic.w	r8, r8, #15
    bcc0:	mov	r1, r8
    bcc2:	mov	r0, r4
    bcc4:	bl	dbc4 <_sbrk_r>
    bcc8:	adds	r1, r0, #1
    bcca:	mov	r2, r0
    bccc:	beq.w	beb6 <_malloc_r+0x3f6>
    bcd0:	cmp	sl, r0
    bcd2:	bhi.w	beb2 <_malloc_r+0x3f2>
    bcd6:	ldr	r3, [pc, #232]	; (bdc0 <_malloc_r+0x300>)
    bcd8:	ldr	r1, [r3, #0]
    bcda:	add	r1, r8
    bcdc:	str	r1, [r3, #0]
    bcde:	mov	r0, r1
    bce0:	beq.w	bf80 <_malloc_r+0x4c0>
    bce4:	ldr.w	r1, [fp]
    bce8:	str	r3, [sp, #4]
    bcea:	adds	r1, #1
    bcec:	ittet	ne
    bcee:	subne.w	r1, r2, sl
    bcf2:	addne	r1, r1, r0
    bcf4:	streq.w	r2, [fp]
    bcf8:	strne	r1, [r3, #0]
    bcfa:	ands.w	fp, r2, #7
    bcfe:	beq.w	bf30 <_malloc_r+0x470>
    bd02:	rsb	r1, fp, #8
    bd06:	add	r2, r1
    bd08:	rsb	r1, fp, #4096	; 0x1000
    bd0c:	add	r8, r2
    bd0e:	adds	r1, #8
    bd10:	sub.w	r1, r1, r8
    bd14:	ubfx	sl, r1, #0, #12
    bd18:	mov	r1, sl
    bd1a:	mov	r0, r4
    bd1c:	str	r2, [sp, #0]
    bd1e:	bl	dbc4 <_sbrk_r>
    bd22:	adds	r2, r0, #1
    bd24:	ldrd	r2, r3, [sp]
    bd28:	beq.w	bfca <_malloc_r+0x50a>
    bd2c:	subs	r0, r0, r2
    bd2e:	add.w	r8, r0, sl
    bd32:	ldr	r1, [r3, #0]
    bd34:	str	r2, [r7, #8]
    bd36:	orr.w	r0, r8, #1
    bd3a:	add	r1, sl
    bd3c:	cmp	r5, r7
    bd3e:	str	r0, [r2, #4]
    bd40:	str	r1, [r3, #0]
    bd42:	beq.w	bf98 <_malloc_r+0x4d8>
    bd46:	cmp.w	r9, #15
    bd4a:	bls.w	bf9c <_malloc_r+0x4dc>
    bd4e:	ldr	r0, [r5, #4]
    bd50:	sub.w	ip, r9, #12
    bd54:	bic.w	ip, ip, #7
    bd58:	and.w	r0, r0, #1
    bd5c:	orr.w	r0, r0, ip
    bd60:	str	r0, [r5, #4]
    bd62:	mov.w	lr, #5
    bd66:	add.w	r0, r5, ip
    bd6a:	cmp.w	ip, #15
    bd6e:	strd	lr, lr, [r0, #4]
    bd72:	bhi.w	bfda <_malloc_r+0x51a>
    bd76:	ldr	r0, [r2, #4]
    bd78:	mov	r5, r2
    bd7a:	ldr	r3, [pc, #72]	; (bdc4 <_malloc_r+0x304>)
    bd7c:	ldr	r2, [r3, #0]
    bd7e:	cmp	r2, r1
    bd80:	it	cc
    bd82:	strcc	r1, [r3, #0]
    bd84:	ldr	r3, [pc, #64]	; (bdc8 <_malloc_r+0x308>)
    bd86:	ldr	r2, [r3, #0]
    bd88:	cmp	r2, r1
    bd8a:	it	cc
    bd8c:	strcc	r1, [r3, #0]
    bd8e:	b.n	beba <_malloc_r+0x3fa>
    bd90:	adds	r2, r5, r6
    bd92:	orr.w	r3, r3, #1
    bd96:	orr.w	r6, r6, #1
    bd9a:	str	r6, [r5, #4]
    bd9c:	mov	r0, r4
    bd9e:	str	r2, [r7, #8]
    bda0:	str	r3, [r2, #4]
    bda2:	bl	c02c <__malloc_unlock>
    bda6:	adds	r5, #8
    bda8:	mov	r0, r5
    bdaa:	add	sp, #12
    bdac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb0:	ldr	r1, [r3, #12]
    bdb2:	add	r2, r3
    bdb4:	b.n	bafa <_malloc_r+0x3a>
    bdb6:	nop
    bdb8:	.word	0x20008ad0
    bdbc:	.word	0x20027624
    bdc0:	.word	0x200275f4
    bdc4:	.word	0x2002761c
    bdc8:	.word	0x20027620
    bdcc:	.word	0x20008ad8
    bdd0:	.word	0x20008ed8
    bdd4:	cmp.w	r2, #2560	; 0xa00
    bdd8:	mov.w	r3, r2, lsr #9
    bddc:	bcc.n	bea6 <_malloc_r+0x3e6>
    bdde:	cmp	r3, #20
    bde0:	bhi.w	bf52 <_malloc_r+0x492>
    bde4:	add.w	r1, r3, #92	; 0x5c
    bde8:	lsls	r1, r1, #3
    bdea:	adds	r3, #91	; 0x5b
    bdec:	add.w	lr, r7, r1
    bdf0:	ldr	r1, [r7, r1]
    bdf2:	sub.w	lr, lr, #8
    bdf6:	cmp	lr, r1
    bdf8:	beq.w	bf1e <_malloc_r+0x45e>
    bdfc:	ldr	r3, [r1, #4]
    bdfe:	bic.w	r3, r3, #3
    be02:	cmp	r3, r2
    be04:	bls.n	be0c <_malloc_r+0x34c>
    be06:	ldr	r1, [r1, #8]
    be08:	cmp	lr, r1
    be0a:	bne.n	bdfc <_malloc_r+0x33c>
    be0c:	ldr.w	lr, [r1, #12]
    be10:	ldr	r2, [r7, #4]
    be12:	strd	r1, lr, [r5, #8]
    be16:	str.w	r5, [lr, #8]
    be1a:	str	r5, [r1, #12]
    be1c:	b.n	bbcc <_malloc_r+0x10c>
    be1e:	cmp	r3, #20
    be20:	bls.n	bed6 <_malloc_r+0x416>
    be22:	cmp	r3, #84	; 0x54
    be24:	bhi.w	bf62 <_malloc_r+0x4a2>
    be28:	lsrs	r3, r6, #12
    be2a:	add.w	r0, r3, #111	; 0x6f
    be2e:	add.w	ip, r3, #110	; 0x6e
    be32:	lsls	r3, r0, #3
    be34:	b.n	bb4c <_malloc_r+0x8c>
    be36:	add.w	lr, lr, #1
    be3a:	tst.w	lr, #3
    be3e:	add.w	r5, r5, #8
    be42:	bne.w	bbf0 <_malloc_r+0x130>
    be46:	b.n	beec <_malloc_r+0x42c>
    be48:	add	r2, r8
    be4a:	mov	r5, r8
    be4c:	ldr	r3, [r2, #4]
    be4e:	ldr.w	r1, [r8, #12]
    be52:	orr.w	r3, r3, #1
    be56:	str	r3, [r2, #4]
    be58:	ldr.w	r3, [r5, #8]!
    be5c:	mov	r0, r4
    be5e:	str	r1, [r3, #12]
    be60:	str	r3, [r1, #8]
    be62:	bl	c02c <__malloc_unlock>
    be66:	b.n	bc50 <_malloc_r+0x190>
    be68:	lsrs	r0, r6, #3
    be6a:	add.w	r2, r6, #8
    be6e:	b.n	bae0 <_malloc_r+0x20>
    be70:	add	r2, r5
    be72:	mov	r0, r4
    be74:	ldr	r3, [r2, #4]
    be76:	orr.w	r3, r3, #1
    be7a:	str	r3, [r2, #4]
    be7c:	adds	r5, #8
    be7e:	bl	c02c <__malloc_unlock>
    be82:	b.n	bc50 <_malloc_r+0x190>
    be84:	adds	r1, r5, r6
    be86:	mov	r0, r4
    be88:	orr.w	r6, r6, #1
    be8c:	orr.w	r4, r3, #1
    be90:	str	r6, [r5, #4]
    be92:	strd	r1, r1, [r7, #16]
    be96:	strd	ip, ip, [r1, #8]
    be9a:	str	r4, [r1, #4]
    be9c:	str	r3, [r5, r2]
    be9e:	bl	c02c <__malloc_unlock>
    bea2:	adds	r5, #8
    bea4:	b.n	bc50 <_malloc_r+0x190>
    bea6:	lsrs	r3, r2, #6
    bea8:	add.w	r1, r3, #57	; 0x39
    beac:	lsls	r1, r1, #3
    beae:	adds	r3, #56	; 0x38
    beb0:	b.n	bdec <_malloc_r+0x32c>
    beb2:	cmp	r5, r7
    beb4:	beq.n	bf76 <_malloc_r+0x4b6>
    beb6:	ldr	r5, [r7, #8]
    beb8:	ldr	r0, [r5, #4]
    beba:	bic.w	r8, r0, #3
    bebe:	cmp	r6, r8
    bec0:	sub.w	r3, r8, r6
    bec4:	bhi.n	becc <_malloc_r+0x40c>
    bec6:	cmp	r3, #15
    bec8:	bgt.w	bd90 <_malloc_r+0x2d0>
    becc:	mov	r0, r4
    bece:	bl	c02c <__malloc_unlock>
    bed2:	movs	r5, #0
    bed4:	b.n	bc50 <_malloc_r+0x190>
    bed6:	add.w	r0, r3, #92	; 0x5c
    beda:	add.w	ip, r3, #91	; 0x5b
    bede:	lsls	r3, r0, #3
    bee0:	b.n	bb4c <_malloc_r+0x8c>
    bee2:	ldr.w	r3, [r9], #-8
    bee6:	cmp	r3, r9
    bee8:	bne.w	c018 <_malloc_r+0x558>
    beec:	tst.w	r0, #3
    bef0:	add.w	r0, r0, #4294967295
    bef4:	bne.n	bee2 <_malloc_r+0x422>
    bef6:	ldr	r3, [r7, #4]
    bef8:	bic.w	r3, r3, r1
    befc:	str	r3, [r7, #4]
    befe:	lsls	r1, r1, #1
    bf00:	cmp	r1, r3
    bf02:	bhi.w	bc86 <_malloc_r+0x1c6>
    bf06:	cbnz	r1, bf10 <_malloc_r+0x450>
    bf08:	b.n	bc86 <_malloc_r+0x1c6>
    bf0a:	lsls	r1, r1, #1
    bf0c:	add.w	lr, lr, #4
    bf10:	tst	r1, r3
    bf12:	beq.n	bf0a <_malloc_r+0x44a>
    bf14:	mov	r0, lr
    bf16:	b.n	bbe8 <_malloc_r+0x128>
    bf18:	add.w	r8, r3, #16
    bf1c:	b.n	bcc0 <_malloc_r+0x200>
    bf1e:	asrs	r2, r3, #2
    bf20:	mov.w	r8, #1
    bf24:	ldr	r3, [r7, #4]
    bf26:	lsl.w	r2, r8, r2
    bf2a:	orrs	r2, r3
    bf2c:	str	r2, [r7, #4]
    bf2e:	b.n	be12 <_malloc_r+0x352>
    bf30:	add.w	r1, r2, r8
    bf34:	negs	r1, r1
    bf36:	ubfx	sl, r1, #0, #12
    bf3a:	mov	r1, sl
    bf3c:	mov	r0, r4
    bf3e:	str	r2, [sp, #0]
    bf40:	bl	dbc4 <_sbrk_r>
    bf44:	adds	r3, r0, #1
    bf46:	ldrd	r2, r3, [sp]
    bf4a:	bne.w	bd2c <_malloc_r+0x26c>
    bf4e:	mov	sl, fp
    bf50:	b.n	bd32 <_malloc_r+0x272>
    bf52:	cmp	r3, #84	; 0x54
    bf54:	bhi.n	bfa2 <_malloc_r+0x4e2>
    bf56:	lsrs	r3, r2, #12
    bf58:	add.w	r1, r3, #111	; 0x6f
    bf5c:	lsls	r1, r1, #3
    bf5e:	adds	r3, #110	; 0x6e
    bf60:	b.n	bdec <_malloc_r+0x32c>
    bf62:	cmp.w	r3, #340	; 0x154
    bf66:	bhi.n	bfb4 <_malloc_r+0x4f4>
    bf68:	lsrs	r3, r6, #15
    bf6a:	add.w	r0, r3, #120	; 0x78
    bf6e:	add.w	ip, r3, #119	; 0x77
    bf72:	lsls	r3, r0, #3
    bf74:	b.n	bb4c <_malloc_r+0x8c>
    bf76:	ldr	r3, [pc, #164]	; (c01c <_malloc_r+0x55c>)
    bf78:	ldr	r0, [r3, #0]
    bf7a:	add	r0, r8
    bf7c:	str	r0, [r3, #0]
    bf7e:	b.n	bce4 <_malloc_r+0x224>
    bf80:	ubfx	ip, sl, #0, #12
    bf84:	cmp.w	ip, #0
    bf88:	bne.w	bce4 <_malloc_r+0x224>
    bf8c:	ldr	r5, [r7, #8]
    bf8e:	add	r8, r9
    bf90:	orr.w	r0, r8, #1
    bf94:	str	r0, [r5, #4]
    bf96:	b.n	bd7a <_malloc_r+0x2ba>
    bf98:	mov	r5, r2
    bf9a:	b.n	bd7a <_malloc_r+0x2ba>
    bf9c:	movs	r3, #1
    bf9e:	str	r3, [r2, #4]
    bfa0:	b.n	becc <_malloc_r+0x40c>
    bfa2:	cmp.w	r3, #340	; 0x154
    bfa6:	bhi.n	bff0 <_malloc_r+0x530>
    bfa8:	lsrs	r3, r2, #15
    bfaa:	add.w	r1, r3, #120	; 0x78
    bfae:	lsls	r1, r1, #3
    bfb0:	adds	r3, #119	; 0x77
    bfb2:	b.n	bdec <_malloc_r+0x32c>
    bfb4:	movw	r2, #1364	; 0x554
    bfb8:	cmp	r3, r2
    bfba:	bhi.n	c004 <_malloc_r+0x544>
    bfbc:	lsrs	r3, r6, #18
    bfbe:	add.w	r0, r3, #125	; 0x7d
    bfc2:	add.w	ip, r3, #124	; 0x7c
    bfc6:	lsls	r3, r0, #3
    bfc8:	b.n	bb4c <_malloc_r+0x8c>
    bfca:	sub.w	fp, fp, #8
    bfce:	add	r8, fp
    bfd0:	sub.w	r8, r8, r2
    bfd4:	mov.w	sl, #0
    bfd8:	b.n	bd32 <_malloc_r+0x272>
    bfda:	add.w	r1, r5, #8
    bfde:	mov	r0, r4
    bfe0:	str	r3, [sp, #0]
    bfe2:	bl	e2e4 <_free_r>
    bfe6:	ldr	r5, [r7, #8]
    bfe8:	ldr	r3, [sp, #0]
    bfea:	ldr	r0, [r5, #4]
    bfec:	ldr	r1, [r3, #0]
    bfee:	b.n	bd7a <_malloc_r+0x2ba>
    bff0:	movw	r1, #1364	; 0x554
    bff4:	cmp	r3, r1
    bff6:	bhi.n	c010 <_malloc_r+0x550>
    bff8:	lsrs	r3, r2, #18
    bffa:	add.w	r1, r3, #125	; 0x7d
    bffe:	lsls	r1, r1, #3
    c000:	adds	r3, #124	; 0x7c
    c002:	b.n	bdec <_malloc_r+0x32c>
    c004:	mov.w	r3, #1016	; 0x3f8
    c008:	movs	r0, #127	; 0x7f
    c00a:	mov.w	ip, #126	; 0x7e
    c00e:	b.n	bb4c <_malloc_r+0x8c>
    c010:	mov.w	r1, #1016	; 0x3f8
    c014:	movs	r3, #126	; 0x7e
    c016:	b.n	bdec <_malloc_r+0x32c>
    c018:	ldr	r3, [r7, #4]
    c01a:	b.n	befe <_malloc_r+0x43e>
    c01c:	.word	0x200275f4

0000c020 <__malloc_lock>:
    c020:	ldr	r0, [pc, #4]	; (c028 <__malloc_lock+0x8>)
    c022:	b.w	dc70 <__retarget_lock_acquire_recursive>
    c026:	nop
    c028:	.word	0x200275ec

0000c02c <__malloc_unlock>:
    c02c:	ldr	r0, [pc, #4]	; (c034 <__malloc_unlock+0x8>)
    c02e:	b.w	dc74 <__retarget_lock_release_recursive>
    c032:	nop
    c034:	.word	0x200275ec

0000c038 <realloc>:
    c038:	push	{r4}
    c03a:	ldr	r4, [pc, #16]	; (c04c <realloc+0x14>)
    c03c:	mov	r3, r0
    c03e:	mov	r2, r1
    c040:	ldr	r0, [r4, #0]
    c042:	ldr.w	r4, [sp], #4
    c046:	mov	r1, r3
    c048:	b.w	c050 <_realloc_r>
    c04c:	.word	0x20008eec

0000c050 <_realloc_r>:
    c050:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c054:	mov	r7, r2
    c056:	cmp	r1, #0
    c058:	beq.w	c18c <_realloc_r+0x13c>
    c05c:	mov	r4, r1
    c05e:	add.w	r5, r7, #11
    c062:	mov	r8, r0
    c064:	bl	c020 <__malloc_lock>
    c068:	cmp	r5, #22
    c06a:	ldr.w	r1, [r4, #-4]
    c06e:	bhi.n	c128 <_realloc_r+0xd8>
    c070:	movs	r5, #16
    c072:	mov	r2, r5
    c074:	cmp	r7, r5
    c076:	bhi.n	c132 <_realloc_r+0xe2>
    c078:	bic.w	r6, r1, #3
    c07c:	cmp	r6, r2
    c07e:	sub.w	r9, r4, #8
    c082:	bge.n	c14a <_realloc_r+0xfa>
    c084:	ldr	r3, [pc, #752]	; (c378 <_realloc_r+0x328>)
    c086:	ldr.w	ip, [r3, #8]
    c08a:	add.w	r0, r9, r6
    c08e:	cmp	ip, r0
    c090:	beq.w	c1c2 <_realloc_r+0x172>
    c094:	ldr.w	ip, [r0, #4]
    c098:	bic.w	r3, ip, #1
    c09c:	add	r3, r0
    c09e:	ldr	r3, [r3, #4]
    c0a0:	lsls	r3, r3, #31
    c0a2:	bmi.n	c176 <_realloc_r+0x126>
    c0a4:	bic.w	ip, ip, #3
    c0a8:	add.w	r3, r6, ip
    c0ac:	cmp	r3, r2
    c0ae:	bge.n	c140 <_realloc_r+0xf0>
    c0b0:	lsls	r3, r1, #31
    c0b2:	bmi.n	c0d6 <_realloc_r+0x86>
    c0b4:	ldr.w	r3, [r4, #-8]
    c0b8:	sub.w	sl, r9, r3
    c0bc:	ldr.w	r3, [sl, #4]
    c0c0:	bic.w	r1, r3, #3
    c0c4:	add	ip, r1
    c0c6:	add	ip, r6
    c0c8:	cmp	ip, r2
    c0ca:	bge.w	c2f0 <_realloc_r+0x2a0>
    c0ce:	adds	r3, r6, r1
    c0d0:	cmp	r3, r2
    c0d2:	bge.w	c2a6 <_realloc_r+0x256>
    c0d6:	mov	r1, r7
    c0d8:	mov	r0, r8
    c0da:	bl	bac0 <_malloc_r>
    c0de:	mov	r7, r0
    c0e0:	cbz	r0, c11c <_realloc_r+0xcc>
    c0e2:	ldr.w	r3, [r4, #-4]
    c0e6:	bic.w	r3, r3, #1
    c0ea:	add	r3, r9
    c0ec:	sub.w	r2, r0, #8
    c0f0:	cmp	r3, r2
    c0f2:	beq.w	c29a <_realloc_r+0x24a>
    c0f6:	subs	r2, r6, #4
    c0f8:	cmp	r2, #36	; 0x24
    c0fa:	bhi.w	c2e8 <_realloc_r+0x298>
    c0fe:	cmp	r2, #19
    c100:	bhi.w	c25c <_realloc_r+0x20c>
    c104:	mov	r3, r0
    c106:	mov	r2, r4
    c108:	ldr	r1, [r2, #0]
    c10a:	str	r1, [r3, #0]
    c10c:	ldr	r1, [r2, #4]
    c10e:	str	r1, [r3, #4]
    c110:	ldr	r2, [r2, #8]
    c112:	str	r2, [r3, #8]
    c114:	mov	r1, r4
    c116:	mov	r0, r8
    c118:	bl	e2e4 <_free_r>
    c11c:	mov	r0, r8
    c11e:	bl	c02c <__malloc_unlock>
    c122:	mov	r0, r7
    c124:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c128:	bic.w	r5, r5, #7
    c12c:	cmp	r5, #0
    c12e:	mov	r2, r5
    c130:	bge.n	c074 <_realloc_r+0x24>
    c132:	movs	r3, #12
    c134:	str.w	r3, [r8]
    c138:	movs	r7, #0
    c13a:	mov	r0, r7
    c13c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c140:	mov	r6, r3
    c142:	ldrd	r2, r3, [r0, #8]
    c146:	str	r3, [r2, #12]
    c148:	str	r2, [r3, #8]
    c14a:	subs	r3, r6, r5
    c14c:	cmp	r3, #15
    c14e:	bhi.n	c196 <_realloc_r+0x146>
    c150:	ldr.w	r3, [r9, #4]
    c154:	and.w	r3, r3, #1
    c158:	orrs	r3, r6
    c15a:	add	r6, r9
    c15c:	str.w	r3, [r9, #4]
    c160:	ldr	r3, [r6, #4]
    c162:	orr.w	r3, r3, #1
    c166:	str	r3, [r6, #4]
    c168:	mov	r0, r8
    c16a:	mov	r7, r4
    c16c:	bl	c02c <__malloc_unlock>
    c170:	mov	r0, r7
    c172:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c176:	lsls	r1, r1, #31
    c178:	bmi.n	c0d6 <_realloc_r+0x86>
    c17a:	ldr.w	r3, [r4, #-8]
    c17e:	sub.w	sl, r9, r3
    c182:	ldr.w	r1, [sl, #4]
    c186:	bic.w	r1, r1, #3
    c18a:	b.n	c0ce <_realloc_r+0x7e>
    c18c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c190:	mov	r1, r2
    c192:	b.w	bac0 <_malloc_r>
    c196:	ldr.w	r2, [r9, #4]
    c19a:	add.w	r1, r9, r5
    c19e:	and.w	r2, r2, #1
    c1a2:	add	r6, r9
    c1a4:	orr.w	r3, r3, #1
    c1a8:	orrs	r2, r5
    c1aa:	str.w	r2, [r9, #4]
    c1ae:	str	r3, [r1, #4]
    c1b0:	ldr	r3, [r6, #4]
    c1b2:	orr.w	r3, r3, #1
    c1b6:	adds	r1, #8
    c1b8:	str	r3, [r6, #4]
    c1ba:	mov	r0, r8
    c1bc:	bl	e2e4 <_free_r>
    c1c0:	b.n	c168 <_realloc_r+0x118>
    c1c2:	ldr.w	r0, [ip, #4]
    c1c6:	bic.w	fp, r0, #3
    c1ca:	add.w	ip, r6, fp
    c1ce:	add.w	r0, r5, #16
    c1d2:	cmp	ip, r0
    c1d4:	bge.n	c272 <_realloc_r+0x222>
    c1d6:	lsls	r1, r1, #31
    c1d8:	bmi.w	c0d6 <_realloc_r+0x86>
    c1dc:	ldr.w	r1, [r4, #-8]
    c1e0:	sub.w	sl, r9, r1
    c1e4:	ldr.w	r1, [sl, #4]
    c1e8:	bic.w	r1, r1, #3
    c1ec:	add	fp, r1
    c1ee:	add	fp, r6
    c1f0:	cmp	r0, fp
    c1f2:	bgt.w	c0ce <_realloc_r+0x7e>
    c1f6:	mov	r7, sl
    c1f8:	ldr.w	r1, [sl, #12]
    c1fc:	ldr.w	r0, [r7, #8]!
    c200:	subs	r2, r6, #4
    c202:	cmp	r2, #36	; 0x24
    c204:	str	r1, [r0, #12]
    c206:	str	r0, [r1, #8]
    c208:	bhi.w	c3c2 <_realloc_r+0x372>
    c20c:	cmp	r2, #19
    c20e:	bls.w	c3be <_realloc_r+0x36e>
    c212:	ldr	r1, [r4, #0]
    c214:	str.w	r1, [sl, #8]
    c218:	ldr	r1, [r4, #4]
    c21a:	str.w	r1, [sl, #12]
    c21e:	cmp	r2, #27
    c220:	bhi.w	c3e2 <_realloc_r+0x392>
    c224:	adds	r4, #8
    c226:	add.w	r2, sl, #16
    c22a:	ldr	r1, [r4, #0]
    c22c:	str	r1, [r2, #0]
    c22e:	ldr	r1, [r4, #4]
    c230:	str	r1, [r2, #4]
    c232:	ldr	r1, [r4, #8]
    c234:	str	r1, [r2, #8]
    c236:	add.w	r1, sl, r5
    c23a:	sub.w	r2, fp, r5
    c23e:	orr.w	r2, r2, #1
    c242:	str	r1, [r3, #8]
    c244:	str	r2, [r1, #4]
    c246:	ldr.w	r3, [sl, #4]
    c24a:	and.w	r3, r3, #1
    c24e:	orrs	r3, r5
    c250:	mov	r0, r8
    c252:	str.w	r3, [sl, #4]
    c256:	bl	c02c <__malloc_unlock>
    c25a:	b.n	c13a <_realloc_r+0xea>
    c25c:	ldr	r3, [r4, #0]
    c25e:	str	r3, [r0, #0]
    c260:	ldr	r3, [r4, #4]
    c262:	str	r3, [r0, #4]
    c264:	cmp	r2, #27
    c266:	bhi.n	c33a <_realloc_r+0x2ea>
    c268:	add.w	r2, r4, #8
    c26c:	add.w	r3, r0, #8
    c270:	b.n	c108 <_realloc_r+0xb8>
    c272:	add.w	r2, r9, r5
    c276:	str	r2, [r3, #8]
    c278:	sub.w	r3, ip, r5
    c27c:	orr.w	r3, r3, #1
    c280:	str	r3, [r2, #4]
    c282:	ldr.w	r3, [r4, #-4]
    c286:	and.w	r3, r3, #1
    c28a:	orrs	r3, r5
    c28c:	mov	r0, r8
    c28e:	str.w	r3, [r4, #-4]
    c292:	bl	c02c <__malloc_unlock>
    c296:	mov	r7, r4
    c298:	b.n	c13a <_realloc_r+0xea>
    c29a:	ldr.w	r3, [r0, #-4]
    c29e:	bic.w	r3, r3, #3
    c2a2:	add	r6, r3
    c2a4:	b.n	c14a <_realloc_r+0xfa>
    c2a6:	mov	r7, sl
    c2a8:	ldr.w	r1, [sl, #12]
    c2ac:	ldr.w	r0, [r7, #8]!
    c2b0:	subs	r2, r6, #4
    c2b2:	cmp	r2, #36	; 0x24
    c2b4:	str	r1, [r0, #12]
    c2b6:	str	r0, [r1, #8]
    c2b8:	bhi.n	c354 <_realloc_r+0x304>
    c2ba:	cmp	r2, #19
    c2bc:	bls.n	c350 <_realloc_r+0x300>
    c2be:	ldr	r1, [r4, #0]
    c2c0:	str.w	r1, [sl, #8]
    c2c4:	ldr	r1, [r4, #4]
    c2c6:	str.w	r1, [sl, #12]
    c2ca:	cmp	r2, #27
    c2cc:	bhi.n	c37c <_realloc_r+0x32c>
    c2ce:	adds	r4, #8
    c2d0:	add.w	r2, sl, #16
    c2d4:	mov	r6, r3
    c2d6:	ldr	r3, [r4, #0]
    c2d8:	str	r3, [r2, #0]
    c2da:	ldr	r3, [r4, #4]
    c2dc:	str	r3, [r2, #4]
    c2de:	ldr	r3, [r4, #8]
    c2e0:	str	r3, [r2, #8]
    c2e2:	mov	r9, sl
    c2e4:	mov	r4, r7
    c2e6:	b.n	c14a <_realloc_r+0xfa>
    c2e8:	mov	r1, r4
    c2ea:	bl	d8a8 <memmove>
    c2ee:	b.n	c114 <_realloc_r+0xc4>
    c2f0:	ldrd	r1, r3, [r0, #8]
    c2f4:	mov	r7, sl
    c2f6:	str	r3, [r1, #12]
    c2f8:	str	r1, [r3, #8]
    c2fa:	ldr.w	r1, [r7, #8]!
    c2fe:	ldr.w	r3, [sl, #12]
    c302:	str	r3, [r1, #12]
    c304:	subs	r2, r6, #4
    c306:	cmp	r2, #36	; 0x24
    c308:	str	r1, [r3, #8]
    c30a:	bhi.n	c368 <_realloc_r+0x318>
    c30c:	cmp	r2, #19
    c30e:	bls.n	c364 <_realloc_r+0x314>
    c310:	ldr	r3, [r4, #0]
    c312:	str.w	r3, [sl, #8]
    c316:	ldr	r3, [r4, #4]
    c318:	str.w	r3, [sl, #12]
    c31c:	cmp	r2, #27
    c31e:	bhi.n	c3a6 <_realloc_r+0x356>
    c320:	adds	r4, #8
    c322:	add.w	r3, sl, #16
    c326:	ldr	r2, [r4, #0]
    c328:	str	r2, [r3, #0]
    c32a:	ldr	r2, [r4, #4]
    c32c:	str	r2, [r3, #4]
    c32e:	ldr	r2, [r4, #8]
    c330:	str	r2, [r3, #8]
    c332:	mov	r6, ip
    c334:	mov	r9, sl
    c336:	mov	r4, r7
    c338:	b.n	c14a <_realloc_r+0xfa>
    c33a:	ldr	r3, [r4, #8]
    c33c:	str	r3, [r0, #8]
    c33e:	ldr	r3, [r4, #12]
    c340:	str	r3, [r0, #12]
    c342:	cmp	r2, #36	; 0x24
    c344:	beq.n	c394 <_realloc_r+0x344>
    c346:	add.w	r2, r4, #16
    c34a:	add.w	r3, r0, #16
    c34e:	b.n	c108 <_realloc_r+0xb8>
    c350:	mov	r2, r7
    c352:	b.n	c2d4 <_realloc_r+0x284>
    c354:	mov	r1, r4
    c356:	mov	r0, r7
    c358:	mov	r6, r3
    c35a:	mov	r9, sl
    c35c:	bl	d8a8 <memmove>
    c360:	mov	r4, r7
    c362:	b.n	c14a <_realloc_r+0xfa>
    c364:	mov	r3, r7
    c366:	b.n	c326 <_realloc_r+0x2d6>
    c368:	mov	r1, r4
    c36a:	mov	r0, r7
    c36c:	mov	r6, ip
    c36e:	mov	r9, sl
    c370:	bl	d8a8 <memmove>
    c374:	mov	r4, r7
    c376:	b.n	c14a <_realloc_r+0xfa>
    c378:	.word	0x20008ad0
    c37c:	ldr	r1, [r4, #8]
    c37e:	str.w	r1, [sl, #16]
    c382:	ldr	r1, [r4, #12]
    c384:	str.w	r1, [sl, #20]
    c388:	cmp	r2, #36	; 0x24
    c38a:	beq.n	c3ce <_realloc_r+0x37e>
    c38c:	adds	r4, #16
    c38e:	add.w	r2, sl, #24
    c392:	b.n	c2d4 <_realloc_r+0x284>
    c394:	ldr	r3, [r4, #16]
    c396:	str	r3, [r0, #16]
    c398:	ldr	r1, [r4, #20]
    c39a:	str	r1, [r0, #20]
    c39c:	add.w	r2, r4, #24
    c3a0:	add.w	r3, r0, #24
    c3a4:	b.n	c108 <_realloc_r+0xb8>
    c3a6:	ldr	r3, [r4, #8]
    c3a8:	str.w	r3, [sl, #16]
    c3ac:	ldr	r3, [r4, #12]
    c3ae:	str.w	r3, [sl, #20]
    c3b2:	cmp	r2, #36	; 0x24
    c3b4:	beq.n	c3fa <_realloc_r+0x3aa>
    c3b6:	adds	r4, #16
    c3b8:	add.w	r3, sl, #24
    c3bc:	b.n	c326 <_realloc_r+0x2d6>
    c3be:	mov	r2, r7
    c3c0:	b.n	c22a <_realloc_r+0x1da>
    c3c2:	mov	r1, r4
    c3c4:	mov	r0, r7
    c3c6:	bl	d8a8 <memmove>
    c3ca:	ldr	r3, [pc, #88]	; (c424 <_realloc_r+0x3d4>)
    c3cc:	b.n	c236 <_realloc_r+0x1e6>
    c3ce:	ldr	r2, [r4, #16]
    c3d0:	str.w	r2, [sl, #24]
    c3d4:	ldr	r2, [r4, #20]
    c3d6:	str.w	r2, [sl, #28]
    c3da:	adds	r4, #24
    c3dc:	add.w	r2, sl, #32
    c3e0:	b.n	c2d4 <_realloc_r+0x284>
    c3e2:	ldr	r1, [r4, #8]
    c3e4:	str.w	r1, [sl, #16]
    c3e8:	ldr	r1, [r4, #12]
    c3ea:	str.w	r1, [sl, #20]
    c3ee:	cmp	r2, #36	; 0x24
    c3f0:	beq.n	c40e <_realloc_r+0x3be>
    c3f2:	adds	r4, #16
    c3f4:	add.w	r2, sl, #24
    c3f8:	b.n	c22a <_realloc_r+0x1da>
    c3fa:	ldr	r3, [r4, #16]
    c3fc:	str.w	r3, [sl, #24]
    c400:	ldr	r3, [r4, #20]
    c402:	str.w	r3, [sl, #28]
    c406:	adds	r4, #24
    c408:	add.w	r3, sl, #32
    c40c:	b.n	c326 <_realloc_r+0x2d6>
    c40e:	ldr	r2, [r4, #16]
    c410:	str.w	r2, [sl, #24]
    c414:	ldr	r2, [r4, #20]
    c416:	str.w	r2, [sl, #28]
    c41a:	adds	r4, #24
    c41c:	add.w	r2, sl, #32
    c420:	b.n	c22a <_realloc_r+0x1da>
    c422:	nop
    c424:	.word	0x20008ad0

0000c428 <_strtod_l>:
    c428:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c42c:	vpush	{d8-d15}
    c430:	sub	sp, #92	; 0x5c
    c432:	mov	sl, r1
    c434:	movs	r1, #0
    c436:	str	r2, [sp, #28]
    c438:	str	r1, [sp, #72]	; 0x48
    c43a:	movs	r2, #0
    c43c:	movs	r1, #0
    c43e:	strd	r1, r2, [sp, #16]
    c442:	mov	r8, r0
    c444:	mov	r1, sl
    c446:	str	r1, [sp, #68]	; 0x44
    c448:	mov	r7, r1
    c44a:	ldrb.w	r2, [r1], #1
    c44e:	cmp	r2, #45	; 0x2d
    c450:	bhi.n	c510 <_strtod_l+0xe8>
    c452:	add	r0, pc, #4	; (adr r0, c458 <_strtod_l+0x30>)
    c454:	ldr.w	pc, [r0, r2, lsl #2]
    c458:	.word	0x0000c5f9
    c45c:	.word	0x0000c511
    c460:	.word	0x0000c511
    c464:	.word	0x0000c511
    c468:	.word	0x0000c511
    c46c:	.word	0x0000c511
    c470:	.word	0x0000c511
    c474:	.word	0x0000c511
    c478:	.word	0x0000c511
    c47c:	.word	0x0000c447
    c480:	.word	0x0000c447
    c484:	.word	0x0000c447
    c488:	.word	0x0000c447
    c48c:	.word	0x0000c447
    c490:	.word	0x0000c511
    c494:	.word	0x0000c511
    c498:	.word	0x0000c511
    c49c:	.word	0x0000c511
    c4a0:	.word	0x0000c511
    c4a4:	.word	0x0000c511
    c4a8:	.word	0x0000c511
    c4ac:	.word	0x0000c511
    c4b0:	.word	0x0000c511
    c4b4:	.word	0x0000c511
    c4b8:	.word	0x0000c511
    c4bc:	.word	0x0000c511
    c4c0:	.word	0x0000c511
    c4c4:	.word	0x0000c511
    c4c8:	.word	0x0000c511
    c4cc:	.word	0x0000c511
    c4d0:	.word	0x0000c511
    c4d4:	.word	0x0000c511
    c4d8:	.word	0x0000c447
    c4dc:	.word	0x0000c511
    c4e0:	.word	0x0000c511
    c4e4:	.word	0x0000c511
    c4e8:	.word	0x0000c511
    c4ec:	.word	0x0000c511
    c4f0:	.word	0x0000c511
    c4f4:	.word	0x0000c511
    c4f8:	.word	0x0000c511
    c4fc:	.word	0x0000c511
    c500:	.word	0x0000c511
    c504:	.word	0x0000cc33
    c508:	.word	0x0000c511
    c50c:	.word	0x0000cc1f
    c510:	movs	r1, #0
    c512:	str	r1, [sp, #36]	; 0x24
    c514:	cmp	r2, #48	; 0x30
    c516:	beq.n	c614 <_strtod_l+0x1ec>
    c518:	movs	r3, #0
    c51a:	str	r3, [sp, #32]
    c51c:	cmp	r2, #47	; 0x2f
    c51e:	mov	r4, r2
    c520:	bls.w	cebe <_strtod_l+0xa96>
    c524:	mov.w	r9, #0
    c528:	mov	r0, r7
    c52a:	mov	r6, r9
    c52c:	mov	r5, r9
    c52e:	b.n	c556 <_strtod_l+0x12e>
    c530:	adds	r0, #1
    c532:	cmp	r5, #8
    c534:	str	r0, [sp, #68]	; 0x44
    c536:	it	gt
    c538:	addgt.w	r9, r9, r9, lsl #2
    c53c:	ldrb	r4, [r0, #0]
    c53e:	itte	gt
    c540:	addgt.w	r2, r2, r9, lsl #1
    c544:	subgt.w	r9, r2, #48	; 0x30
    c548:	suble.w	r6, r3, #48	; 0x30
    c54c:	cmp	r4, #47	; 0x2f
    c54e:	add.w	r5, r5, #1
    c552:	mov	r2, r4
    c554:	ble.n	c636 <_strtod_l+0x20e>
    c556:	add.w	r3, r6, r6, lsl #2
    c55a:	cmp	r4, #57	; 0x39
    c55c:	add.w	r3, r2, r3, lsl #1
    c560:	ble.n	c530 <_strtod_l+0x108>
    c562:	ldr	r1, [pc, #636]	; (c7e0 <_strtod_l+0x3b8>)
    c564:	movs	r2, #1
    c566:	bl	da4c <strncmp>
    c56a:	cmp	r0, #0
    c56c:	bne.n	c5de <_strtod_l+0x1b6>
    c56e:	ldr	r3, [sp, #68]	; 0x44
    c570:	mov	r2, r3
    c572:	adds	r3, #1
    c574:	str	r3, [sp, #68]	; 0x44
    c576:	ldrb	r4, [r2, #1]
    c578:	cmp	r5, #0
    c57a:	bne.w	d004 <_strtod_l+0xbdc>
    c57e:	cmp	r4, #48	; 0x30
    c580:	bne.w	cfcc <_strtod_l+0xba4>
    c584:	rsb	r2, r3, #1
    c588:	adds	r0, r3, r2
    c58a:	adds	r3, #1
    c58c:	str	r3, [sp, #68]	; 0x44
    c58e:	ldrb	r4, [r3, #0]
    c590:	cmp	r4, #48	; 0x30
    c592:	beq.n	c588 <_strtod_l+0x160>
    c594:	sub.w	r3, r4, #49	; 0x31
    c598:	cmp	r3, #8
    c59a:	bhi.w	cba0 <_strtod_l+0x778>
    c59e:	ldr	r7, [sp, #68]	; 0x44
    c5a0:	adds	r3, r0, #1
    c5a2:	sub.w	fp, r4, #48	; 0x30
    c5a6:	str	r3, [sp, #44]	; 0x2c
    c5a8:	movs	r5, #1
    c5aa:	mov	ip, r7
    c5ac:	mov.w	lr, #0
    c5b0:	add.w	r6, r6, r6, lsl #2
    c5b4:	add.w	r6, fp, r6, lsl #1
    c5b8:	movs	r0, #0
    c5ba:	add.w	r3, ip, #1
    c5be:	str	r3, [sp, #68]	; 0x44
    c5c0:	ldrb.w	r4, [ip, #1]
    c5c4:	sub.w	r1, r4, #48	; 0x30
    c5c8:	cmp	r1, #9
    c5ca:	bhi.w	cb44 <_strtod_l+0x71c>
    c5ce:	adds	r0, #1
    c5d0:	mov	fp, r1
    c5d2:	cmp	r1, #0
    c5d4:	bne.w	ce76 <_strtod_l+0xa4e>
    c5d8:	ldr.w	ip, [sp, #68]	; 0x44
    c5dc:	b.n	c5ba <_strtod_l+0x192>
    c5de:	movs	r0, #0
    c5e0:	cmp	r4, #101	; 0x65
    c5e2:	mov	lr, r5
    c5e4:	str	r0, [sp, #44]	; 0x2c
    c5e6:	mov	ip, r0
    c5e8:	beq.n	c5ee <_strtod_l+0x1c6>
    c5ea:	cmp	r4, #69	; 0x45
    c5ec:	bne.n	c650 <_strtod_l+0x228>
    c5ee:	cmp	r5, #0
    c5f0:	bne.n	c6ca <_strtod_l+0x2a2>
    c5f2:	ldr	r3, [sp, #32]
    c5f4:	orrs	r3, r0
    c5f6:	bne.n	c6c8 <_strtod_l+0x2a0>
    c5f8:	ldr	r3, [sp, #28]
    c5fa:	vldr	d8, [pc, #476]	; c7d8 <_strtod_l+0x3b0>
    c5fe:	cbz	r3, c606 <_strtod_l+0x1de>
    c600:	ldr	r3, [sp, #28]
    c602:	str.w	sl, [r3]
    c606:	vmov.f64	d0, d8
    c60a:	add	sp, #92	; 0x5c
    c60c:	vpop	{d8-d15}
    c610:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c614:	ldrb	r2, [r7, #1]
    c616:	and.w	r2, r2, #223	; 0xdf
    c61a:	cmp	r2, #88	; 0x58
    c61c:	beq.w	ce38 <_strtod_l+0xa10>
    c620:	adds	r7, #1
    c622:	str	r7, [sp, #68]	; 0x44
    c624:	ldrb	r2, [r7, #0]
    c626:	cmp	r2, #48	; 0x30
    c628:	beq.n	c620 <_strtod_l+0x1f8>
    c62a:	cmp	r2, #0
    c62c:	beq.w	c79e <_strtod_l+0x376>
    c630:	movs	r3, #1
    c632:	str	r3, [sp, #32]
    c634:	b.n	c51c <_strtod_l+0xf4>
    c636:	ldr	r1, [pc, #424]	; (c7e0 <_strtod_l+0x3b8>)
    c638:	movs	r2, #1
    c63a:	bl	da4c <strncmp>
    c63e:	cmp	r0, #0
    c640:	beq.w	c7c4 <_strtod_l+0x39c>
    c644:	mov	lr, r5
    c646:	mov.w	ip, #0
    c64a:	str.w	ip, [sp, #44]	; 0x2c
    c64e:	mov	r0, ip
    c650:	mov.w	fp, #0
    c654:	cmp	r5, #0
    c656:	beq.n	c756 <_strtod_l+0x32e>
    c658:	vmov	s15, r6
    c65c:	ldr	r3, [sp, #44]	; 0x2c
    c65e:	vcvt.f64.u32	d7, s15
    c662:	sub.w	r3, fp, r3
    c666:	cmp.w	lr, #0
    c66a:	it	eq
    c66c:	moveq	lr, r5
    c66e:	cmp	r5, #16
    c670:	str	r3, [sp, #40]	; 0x28
    c672:	mov	r3, r5
    c674:	it	ge
    c676:	movge	r3, #16
    c678:	cmp	r5, #9
    c67a:	vstr	d7, [sp, #16]
    c67e:	ble.n	c69a <_strtod_l+0x272>
    c680:	ldr	r2, [pc, #352]	; (c7e4 <_strtod_l+0x3bc>)
    c682:	add.w	r2, r2, r3, lsl #3
    c686:	vldr	d5, [r2, #-72]	; 0xffffffb8
    c68a:	vmov	s13, r9
    c68e:	vcvt.f64.u32	d6, s13
    c692:	vfma.f64	d6, d7, d5
    c696:	vstr	d6, [sp, #16]
    c69a:	cmp	r5, #15
    c69c:	bgt.w	c7f0 <_strtod_l+0x3c8>
    c6a0:	ldr	r2, [sp, #40]	; 0x28
    c6a2:	cmp	r2, #0
    c6a4:	beq.w	ce70 <_strtod_l+0xa48>
    c6a8:	ldr	r2, [sp, #40]	; 0x28
    c6aa:	ble.w	cd26 <_strtod_l+0x8fe>
    c6ae:	cmp	r2, #22
    c6b0:	ble.w	cfe4 <_strtod_l+0xbbc>
    c6b4:	ldr	r1, [sp, #40]	; 0x28
    c6b6:	rsb	r2, r5, #37	; 0x25
    c6ba:	cmp	r2, r1
    c6bc:	bge.w	d00c <_strtod_l+0xbe4>
    c6c0:	ldr	r2, [sp, #40]	; 0x28
    c6c2:	subs	r3, r5, r3
    c6c4:	add	r3, r2
    c6c6:	b.n	c7fc <_strtod_l+0x3d4>
    c6c8:	movs	r5, #0
    c6ca:	ldr.w	sl, [sp, #68]	; 0x44
    c6ce:	add.w	r3, sl, #1
    c6d2:	str	r3, [sp, #68]	; 0x44
    c6d4:	ldrb.w	r4, [sl, #1]
    c6d8:	cmp	r4, #43	; 0x2b
    c6da:	beq.w	cb9a <_strtod_l+0x772>
    c6de:	cmp	r4, #45	; 0x2d
    c6e0:	beq.w	cad2 <_strtod_l+0x6aa>
    c6e4:	movs	r3, #0
    c6e6:	str	r3, [sp, #40]	; 0x28
    c6e8:	sub.w	r3, r4, #48	; 0x30
    c6ec:	cmp	r3, #9
    c6ee:	bhi.w	cac8 <_strtod_l+0x6a0>
    c6f2:	cmp	r4, #48	; 0x30
    c6f4:	bne.n	c702 <_strtod_l+0x2da>
    c6f6:	ldr	r3, [sp, #68]	; 0x44
    c6f8:	adds	r3, #1
    c6fa:	str	r3, [sp, #68]	; 0x44
    c6fc:	ldrb	r4, [r3, #0]
    c6fe:	cmp	r4, #48	; 0x30
    c700:	beq.n	c6f8 <_strtod_l+0x2d0>
    c702:	sub.w	r3, r4, #49	; 0x31
    c706:	cmp	r3, #8
    c708:	bhi.n	c650 <_strtod_l+0x228>
    c70a:	ldr	r2, [sp, #68]	; 0x44
    c70c:	str	r2, [sp, #48]	; 0x30
    c70e:	adds	r3, r2, #1
    c710:	str	r3, [sp, #68]	; 0x44
    c712:	sub.w	fp, r4, #48	; 0x30
    c716:	ldrb	r4, [r2, #1]
    c718:	cmp	r4, #47	; 0x2f
    c71a:	bgt.n	c72c <_strtod_l+0x304>
    c71c:	b.n	cedc <_strtod_l+0xab4>
    c71e:	adds	r3, #1
    c720:	str	r3, [sp, #68]	; 0x44
    c722:	ldrb	r4, [r1, #1]
    c724:	cmp	r4, #47	; 0x2f
    c726:	sub.w	fp, r2, #48	; 0x30
    c72a:	ble.n	c73a <_strtod_l+0x312>
    c72c:	add.w	r2, fp, fp, lsl #2
    c730:	cmp	r4, #57	; 0x39
    c732:	mov	r1, r3
    c734:	add.w	r2, r4, r2, lsl #1
    c738:	ble.n	c71e <_strtod_l+0x2f6>
    c73a:	ldr	r2, [sp, #48]	; 0x30
    c73c:	subs	r3, r3, r2
    c73e:	cmp	r3, #8
    c740:	ble.w	cedc <_strtod_l+0xab4>
    c744:	movw	fp, #19999	; 0x4e1f
    c748:	ldr	r3, [sp, #40]	; 0x28
    c74a:	cmp	r3, #0
    c74c:	beq.n	c654 <_strtod_l+0x22c>
    c74e:	rsb	fp, fp, #0
    c752:	cmp	r5, #0
    c754:	bne.n	c658 <_strtod_l+0x230>
    c756:	ldr	r3, [sp, #32]
    c758:	orrs	r3, r0
    c75a:	bne.n	c79e <_strtod_l+0x376>
    c75c:	cmp.w	ip, #0
    c760:	bne.w	c5f8 <_strtod_l+0x1d0>
    c764:	cmp	r4, #105	; 0x69
    c766:	beq.w	cf08 <_strtod_l+0xae0>
    c76a:	bgt.w	cd54 <_strtod_l+0x92c>
    c76e:	cmp	r4, #73	; 0x49
    c770:	beq.w	cf08 <_strtod_l+0xae0>
    c774:	cmp	r4, #78	; 0x4e
    c776:	bne.w	c5f8 <_strtod_l+0x1d0>
    c77a:	ldr	r1, [pc, #108]	; (c7e8 <_strtod_l+0x3c0>)
    c77c:	add	r0, sp, #68	; 0x44
    c77e:	bl	eb28 <__match>
    c782:	cmp	r0, #0
    c784:	beq.w	c5f8 <_strtod_l+0x1d0>
    c788:	ldr	r3, [sp, #68]	; 0x44
    c78a:	ldrb	r3, [r3, #0]
    c78c:	cmp	r3, #40	; 0x28
    c78e:	beq.w	d176 <_strtod_l+0xd4e>
    c792:	ldr	r0, [pc, #88]	; (c7ec <_strtod_l+0x3c4>)
    c794:	bl	e1a0 <nan>
    c798:	vmov.f64	d8, d0
    c79c:	b.n	c7a2 <_strtod_l+0x37a>
    c79e:	vldr	d8, [pc, #56]	; c7d8 <_strtod_l+0x3b0>
    c7a2:	ldr	r2, [sp, #28]
    c7a4:	cbz	r2, c7aa <_strtod_l+0x382>
    c7a6:	ldr	r3, [sp, #68]	; 0x44
    c7a8:	str	r3, [r2, #0]
    c7aa:	ldr	r3, [sp, #36]	; 0x24
    c7ac:	cmp	r3, #0
    c7ae:	beq.w	c606 <_strtod_l+0x1de>
    c7b2:	vneg.f64	d8, d8
    c7b6:	vmov.f64	d0, d8
    c7ba:	add	sp, #92	; 0x5c
    c7bc:	vpop	{d8-d15}
    c7c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c7c4:	ldr	r3, [sp, #68]	; 0x44
    c7c6:	str	r0, [sp, #44]	; 0x2c
    c7c8:	adds	r2, r3, #1
    c7ca:	str	r2, [sp, #68]	; 0x44
    c7cc:	ldrb	r4, [r3, #1]
    c7ce:	mov	lr, r5
    c7d0:	b.n	c5c4 <_strtod_l+0x19c>
    c7d2:	nop
    c7d4:	nop.w
	...
    c7e0:	.word	0x20000984
    c7e4:	.word	0x20000328
    c7e8:	.word	0x20000994
    c7ec:	.word	0x200005f0
    c7f0:	ldr	r2, [sp, #40]	; 0x28
    c7f2:	subs	r3, r5, r3
    c7f4:	add	r3, r2
    c7f6:	cmp	r3, #0
    c7f8:	ble.w	cd5c <_strtod_l+0x934>
    c7fc:	ands.w	r1, r3, #15
    c800:	beq.n	c818 <_strtod_l+0x3f0>
    c802:	ldr	r2, [pc, #780]	; (cb10 <_strtod_l+0x6e8>)
    c804:	add.w	r2, r2, r1, lsl #3
    c808:	vldr	d6, [sp, #16]
    c80c:	vldr	d7, [r2]
    c810:	vmul.f64	d7, d7, d6
    c814:	vstr	d7, [sp, #16]
    c818:	bics.w	r2, r3, #15
    c81c:	bne.w	cc90 <_strtod_l+0x868>
    c820:	movs	r3, #0
    c822:	str	r3, [sp, #32]
    c824:	str	r6, [sp, #0]
    c826:	mov	r3, r5
    c828:	mov	r2, lr
    c82a:	mov	r1, r7
    c82c:	mov	r0, r8
    c82e:	bl	ee40 <__s2b>
    c832:	mov	r9, r0
    c834:	cmp	r0, #0
    c836:	beq.w	cdfc <_strtod_l+0x9d4>
    c83a:	ldr	r3, [sp, #44]	; 0x2c
    c83c:	sub.w	fp, r3, fp
    c840:	ldr	r3, [sp, #40]	; 0x28
    c842:	vldr	d14, [pc, #676]	; cae8 <_strtod_l+0x6c0>
    c846:	cmp	r3, #0
    c848:	vldr	d12, [pc, #676]	; caf0 <_strtod_l+0x6c8>
    c84c:	vldr	d13, [pc, #680]	; caf8 <_strtod_l+0x6d0>
    c850:	vldr	d11, [pc, #684]	; cb00 <_strtod_l+0x6d8>
    c854:	ite	lt
    c856:	movlt	r2, fp
    c858:	movge	r2, #0
    c85a:	mov.w	sl, #0
    c85e:	bic.w	r3, r3, r3, asr #31
    c862:	str	r2, [sp, #44]	; 0x2c
    c864:	str	r3, [sp, #48]	; 0x30
    c866:	mov	r4, sl
    c868:	ldr.w	r1, [r9, #4]
    c86c:	mov	r0, r8
    c86e:	bl	ed3c <_Balloc>
    c872:	mov	r6, r0
    c874:	cmp	r0, #0
    c876:	beq.w	ca96 <_strtod_l+0x66e>
    c87a:	ldr.w	r2, [r9, #16]
    c87e:	vldr	d8, [sp, #16]
    c882:	adds	r2, #2
    c884:	lsls	r2, r2, #2
    c886:	add.w	r1, r9, #12
    c88a:	adds	r0, #12
    c88c:	bl	9470 <memcpy>
    c890:	vmov.f64	d0, d8
    c894:	add	r2, sp, #80	; 0x50
    c896:	add	r1, sp, #76	; 0x4c
    c898:	mov	r0, r8
    c89a:	bl	f5b8 <__d2b>
    c89e:	str	r0, [sp, #72]	; 0x48
    c8a0:	cmp	r0, #0
    c8a2:	beq.w	ca6e <_strtod_l+0x646>
    c8a6:	movs	r1, #1
    c8a8:	mov	r0, r8
    c8aa:	bl	ef90 <__i2b>
    c8ae:	mov	r4, r0
    c8b0:	cmp	r0, #0
    c8b2:	beq.w	ca96 <_strtod_l+0x66e>
    c8b6:	ldr	r2, [sp, #76]	; 0x4c
    c8b8:	cmp	r2, #0
    c8ba:	blt.w	ca7a <_strtod_l+0x652>
    c8be:	ldr	r3, [sp, #44]	; 0x2c
    c8c0:	ldr	r7, [sp, #48]	; 0x30
    c8c2:	add.w	fp, r2, r3
    c8c6:	ldr	r3, [sp, #32]
    c8c8:	ldr	r5, [sp, #80]	; 0x50
    c8ca:	subs	r2, r2, r3
    c8cc:	add	r2, r5
    c8ce:	ldr	r3, [pc, #580]	; (cb14 <_strtod_l+0x6ec>)
    c8d0:	subs	r2, #1
    c8d2:	cmp	r2, r3
    c8d4:	rsb	r5, r5, #54	; 0x36
    c8d8:	bge.w	ca0c <_strtod_l+0x5e4>
    c8dc:	subs	r1, r3, r2
    c8de:	cmp	r1, #31
    c8e0:	sub.w	r5, r5, r1
    c8e4:	bgt.w	caae <_strtod_l+0x686>
    c8e8:	movs	r2, #1
    c8ea:	lsl.w	r3, r2, r1
    c8ee:	str	r3, [sp, #52]	; 0x34
    c8f0:	movs	r3, #0
    c8f2:	str	r3, [sp, #56]	; 0x38
    c8f4:	add	r7, r5
    c8f6:	ldr	r3, [sp, #32]
    c8f8:	add	r5, fp
    c8fa:	cmp	fp, r5
    c8fc:	mov	r2, fp
    c8fe:	add	r7, r3
    c900:	it	ge
    c902:	movge	r2, r5
    c904:	cmp	r2, r7
    c906:	it	ge
    c908:	movge	r2, r7
    c90a:	cmp	r2, #0
    c90c:	ble.n	c916 <_strtod_l+0x4ee>
    c90e:	subs	r5, r5, r2
    c910:	subs	r7, r7, r2
    c912:	sub.w	fp, fp, r2
    c916:	ldr	r3, [sp, #44]	; 0x2c
    c918:	cmp	r3, #0
    c91a:	bgt.w	ca2e <_strtod_l+0x606>
    c91e:	cmp	r5, #0
    c920:	bgt.w	ca5c <_strtod_l+0x634>
    c924:	ldr	r3, [sp, #40]	; 0x28
    c926:	cmp	r3, #0
    c928:	bgt.w	ca9a <_strtod_l+0x672>
    c92c:	cmp	r7, #0
    c92e:	bgt.w	ca84 <_strtod_l+0x65c>
    c932:	cmp.w	fp, #0
    c936:	ble.n	c94a <_strtod_l+0x522>
    c938:	mov	r1, r4
    c93a:	mov	r2, fp
    c93c:	mov	r0, r8
    c93e:	bl	f208 <__lshift>
    c942:	mov	r4, r0
    c944:	cmp	r0, #0
    c946:	beq.w	ca96 <_strtod_l+0x66e>
    c94a:	ldr	r1, [sp, #72]	; 0x48
    c94c:	mov	r2, r6
    c94e:	mov	r0, r8
    c950:	bl	f33c <__mdiff>
    c954:	mov	sl, r0
    c956:	cmp	r0, #0
    c958:	beq.w	ca96 <_strtod_l+0x66e>
    c95c:	movs	r3, #0
    c95e:	ldr	r5, [r0, #12]
    c960:	str	r3, [r0, #12]
    c962:	mov	r1, r4
    c964:	bl	f2f8 <__mcmp>
    c968:	cmp	r0, #0
    c96a:	blt.w	d0fc <_strtod_l+0xcd4>
    c96e:	beq.w	d034 <_strtod_l+0xc0c>
    c972:	mov	r1, r4
    c974:	mov	r0, sl
    c976:	bl	f68c <__ratio>
    c97a:	vmov.f64	d7, #0	; 0x40000000  2.0
    c97e:	vcmpe.f64	d0, d7
    c982:	vmrs	APSR_nzcv, fpscr
    c986:	bhi.n	ca16 <_strtod_l+0x5ee>
    c988:	cmp	r5, #0
    c98a:	beq.w	cb24 <_strtod_l+0x6fc>
    c98e:	vmov.f64	d9, #112	; 0x3f800000  1.0
    c992:	ldr	r0, [sp, #20]
    c994:	ldr	r3, [pc, #384]	; (cb18 <_strtod_l+0x6f0>)
    c996:	movs	r2, #0
    c998:	ldr	r1, [pc, #384]	; (cb1c <_strtod_l+0x6f4>)
    c99a:	ldr.w	ip, [pc, #388]	; cb20 <_strtod_l+0x6f8>
    c99e:	and.w	r7, r0, r1
    c9a2:	cmp	r7, ip
    c9a4:	beq.w	cb50 <_strtod_l+0x728>
    c9a8:	ldr	r1, [sp, #32]
    c9aa:	cbz	r1, c9c4 <_strtod_l+0x59c>
    c9ac:	cmp.w	r7, #111149056	; 0x6a00000
    c9b0:	bhi.n	c9c4 <_strtod_l+0x59c>
    c9b2:	vcmpe.f64	d9, d11
    c9b6:	vmrs	APSR_nzcv, fpscr
    c9ba:	bls.w	cc6a <_strtod_l+0x842>
    c9be:	add.w	r1, r3, #112197632	; 0x6b00000
    c9c2:	subs	r3, r1, r7
    c9c4:	vmov.f64	d0, d8
    c9c8:	vmov	d10, r2, r3
    c9cc:	bl	f490 <__ulp>
    c9d0:	vfma.f64	d8, d10, d0
    c9d4:	vstr	d8, [sp, #16]
    c9d8:	vmov	r3, s17
    c9dc:	ldr	r2, [sp, #32]
    c9de:	cbnz	r2, c9ea <_strtod_l+0x5c2>
    c9e0:	ldr	r2, [pc, #312]	; (cb1c <_strtod_l+0x6f4>)
    c9e2:	ands	r2, r3
    c9e4:	cmp	r7, r2
    c9e6:	beq.w	cbb2 <_strtod_l+0x78a>
    c9ea:	ldr	r1, [sp, #72]	; 0x48
    c9ec:	mov	r0, r8
    c9ee:	bl	ed88 <_Bfree>
    c9f2:	mov	r1, r6
    c9f4:	mov	r0, r8
    c9f6:	bl	ed88 <_Bfree>
    c9fa:	mov	r1, r4
    c9fc:	mov	r0, r8
    c9fe:	bl	ed88 <_Bfree>
    ca02:	mov	r1, sl
    ca04:	mov	r0, r8
    ca06:	bl	ed88 <_Bfree>
    ca0a:	b.n	c868 <_strtod_l+0x440>
    ca0c:	movs	r3, #1
    ca0e:	movs	r1, #0
    ca10:	strd	r3, r1, [sp, #52]	; 0x34
    ca14:	b.n	c8f4 <_strtod_l+0x4cc>
    ca16:	vmov.f64	d9, #96	; 0x3f000000  0.5
    ca1a:	vmul.f64	d9, d0, d9
    ca1e:	cmp	r5, #0
    ca20:	bne.n	cae2 <_strtod_l+0x6ba>
    ca22:	vneg.f64	d7, d9
    ca26:	ldr	r0, [sp, #20]
    ca28:	vmov	r2, r3, d7
    ca2c:	b.n	c998 <_strtod_l+0x570>
    ca2e:	mov	r1, r4
    ca30:	mov	r2, r3
    ca32:	mov	r0, r8
    ca34:	bl	f148 <__pow5mult>
    ca38:	mov	r4, r0
    ca3a:	cbz	r0, ca96 <_strtod_l+0x66e>
    ca3c:	mov	r1, r0
    ca3e:	ldr	r2, [sp, #72]	; 0x48
    ca40:	mov	r0, r8
    ca42:	bl	efec <__multiply>
    ca46:	cbz	r0, ca96 <_strtod_l+0x66e>
    ca48:	str	r0, [sp, #60]	; 0x3c
    ca4a:	ldr	r1, [sp, #72]	; 0x48
    ca4c:	mov	r0, r8
    ca4e:	bl	ed88 <_Bfree>
    ca52:	ldr	r2, [sp, #60]	; 0x3c
    ca54:	str	r2, [sp, #72]	; 0x48
    ca56:	cmp	r5, #0
    ca58:	ble.w	c924 <_strtod_l+0x4fc>
    ca5c:	ldr	r1, [sp, #72]	; 0x48
    ca5e:	mov	r2, r5
    ca60:	mov	r0, r8
    ca62:	bl	f208 <__lshift>
    ca66:	str	r0, [sp, #72]	; 0x48
    ca68:	cmp	r0, #0
    ca6a:	bne.w	c924 <_strtod_l+0x4fc>
    ca6e:	movs	r3, #34	; 0x22
    ca70:	vldr	d8, [pc, #148]	; cb08 <_strtod_l+0x6e0>
    ca74:	str.w	r3, [r8]
    ca78:	b.n	cbf4 <_strtod_l+0x7cc>
    ca7a:	ldr	r3, [sp, #48]	; 0x30
    ca7c:	ldr.w	fp, [sp, #44]	; 0x2c
    ca80:	subs	r7, r3, r2
    ca82:	b.n	c8c6 <_strtod_l+0x49e>
    ca84:	mov	r1, r6
    ca86:	mov	r2, r7
    ca88:	mov	r0, r8
    ca8a:	bl	f208 <__lshift>
    ca8e:	mov	r6, r0
    ca90:	cmp	r0, #0
    ca92:	bne.w	c932 <_strtod_l+0x50a>
    ca96:	ldr	r0, [sp, #72]	; 0x48
    ca98:	b.n	ca6e <_strtod_l+0x646>
    ca9a:	mov	r1, r6
    ca9c:	ldr	r2, [sp, #48]	; 0x30
    ca9e:	mov	r0, r8
    caa0:	bl	f148 <__pow5mult>
    caa4:	mov	r6, r0
    caa6:	cmp	r0, #0
    caa8:	bne.w	c92c <_strtod_l+0x504>
    caac:	b.n	ca96 <_strtod_l+0x66e>
    caae:	rsb	r2, r2, #4278190080	; 0xff000000
    cab2:	add.w	r2, r2, #16711680	; 0xff0000
    cab6:	add.w	r2, r2, #64256	; 0xfb00
    caba:	movs	r1, #1
    cabc:	adds	r2, #226	; 0xe2
    cabe:	lsl.w	r3, r1, r2
    cac2:	strd	r1, r3, [sp, #52]	; 0x34
    cac6:	b.n	c8f4 <_strtod_l+0x4cc>
    cac8:	str.w	sl, [sp, #68]	; 0x44
    cacc:	mov.w	fp, #0
    cad0:	b.n	c654 <_strtod_l+0x22c>
    cad2:	movs	r3, #1
    cad4:	str	r3, [sp, #40]	; 0x28
    cad6:	add.w	r3, sl, #2
    cada:	str	r3, [sp, #68]	; 0x44
    cadc:	ldrb.w	r4, [sl, #2]
    cae0:	b.n	c6e8 <_strtod_l+0x2c0>
    cae2:	vmov.f64	d7, d9
    cae6:	b.n	ca26 <_strtod_l+0x5fe>
    cae8:	.word	0x94a03595
    caec:	.word	0x3fcfffff
    caf0:	.word	0x94a03595
    caf4:	.word	0x3fdfffff
    caf8:	.word	0x35afe535
    cafc:	.word	0x3fe00000
    cb00:	.word	0xffc00000
    cb04:	.word	0x41dfffff
    cb08:	.word	0x00000000
    cb0c:	.word	0x7ff00000
    cb10:	.word	0x20000328
    cb14:	.word	0xfffffc02
    cb18:	.word	0x3ff00000
    cb1c:	.word	0x7ff00000
    cb20:	.word	0x7fe00000
    cb24:	ldrd	r1, r2, [sp, #16]
    cb28:	cmp	r1, #0
    cb2a:	beq.w	cc38 <_strtod_l+0x810>
    cb2e:	ldrd	r1, r2, [sp, #16]
    cb32:	cmp	r1, #1
    cb34:	beq.w	cee8 <_strtod_l+0xac0>
    cb38:	mov	r0, r2
    cb3a:	ldr	r3, [pc, #732]	; (ce18 <_strtod_l+0x9f0>)
    cb3c:	vmov.f64	d9, #112	; 0x3f800000  1.0
    cb40:	movs	r2, #0
    cb42:	b.n	c998 <_strtod_l+0x570>
    cb44:	cmp	r4, #101	; 0x65
    cb46:	mov.w	ip, #1
    cb4a:	beq.w	c6ca <_strtod_l+0x2a2>
    cb4e:	b.n	c5ea <_strtod_l+0x1c2>
    cb50:	vmov	d10, r2, r3
    cb54:	sub.w	r3, r0, #55574528	; 0x3500000
    cb58:	str	r3, [sp, #20]
    cb5a:	vldr	d15, [sp, #16]
    cb5e:	vmov.f64	d0, d15
    cb62:	bl	f490 <__ulp>
    cb66:	ldr	r1, [pc, #692]	; (ce1c <_strtod_l+0x9f4>)
    cb68:	vfma.f64	d15, d10, d0
    cb6c:	vmov	r3, s31
    cb70:	ldr	r2, [pc, #684]	; (ce20 <_strtod_l+0x9f8>)
    cb72:	ands	r1, r3
    cb74:	cmp	r1, r2
    cb76:	vstr	d15, [sp, #16]
    cb7a:	bls.n	cc62 <_strtod_l+0x83a>
    cb7c:	ldr	r3, [pc, #676]	; (ce24 <_strtod_l+0x9fc>)
    cb7e:	vmov	r2, s17
    cb82:	cmp	r2, r3
    cb84:	bne.n	cb8e <_strtod_l+0x766>
    cb86:	vmov	r3, s16
    cb8a:	adds	r3, #1
    cb8c:	beq.n	ca96 <_strtod_l+0x66e>
    cb8e:	ldr	r2, [pc, #660]	; (ce24 <_strtod_l+0x9fc>)
    cb90:	mov.w	r3, #4294967295
    cb94:	strd	r3, r2, [sp, #16]
    cb98:	b.n	c9ea <_strtod_l+0x5c2>
    cb9a:	movs	r3, #0
    cb9c:	str	r3, [sp, #40]	; 0x28
    cb9e:	b.n	cad6 <_strtod_l+0x6ae>
    cba0:	cmp	r4, #101	; 0x65
    cba2:	beq.w	cd46 <_strtod_l+0x91e>
    cba6:	cmp	r4, #69	; 0x45
    cba8:	beq.w	cd46 <_strtod_l+0x91e>
    cbac:	mov.w	ip, #1
    cbb0:	b.n	c756 <_strtod_l+0x32e>
    cbb2:	vmov	r0, r1, d9
    cbb6:	str	r3, [sp, #52]	; 0x34
    cbb8:	bl	164a4 <__aeabi_d2lz>
    cbbc:	bl	16448 <__aeabi_l2d>
    cbc0:	ldr	r3, [sp, #16]
    cbc2:	orrs	r5, r3
    cbc4:	ldr	r3, [sp, #52]	; 0x34
    cbc6:	vmov	d7, r0, r1
    cbca:	ubfx	r3, r3, #0, #20
    cbce:	orrs	r5, r3
    cbd0:	vsub.f64	d9, d9, d7
    cbd4:	beq.w	cd18 <_strtod_l+0x8f0>
    cbd8:	vcmpe.f64	d9, d12
    cbdc:	vmrs	APSR_nzcv, fpscr
    cbe0:	bmi.n	cbee <_strtod_l+0x7c6>
    cbe2:	vcmpe.f64	d9, d13
    cbe6:	vmrs	APSR_nzcv, fpscr
    cbea:	ble.w	c9ea <_strtod_l+0x5c2>
    cbee:	vldr	d8, [sp, #16]
    cbf2:	ldr	r0, [sp, #72]	; 0x48
    cbf4:	mov	r1, r0
    cbf6:	mov	r0, r8
    cbf8:	bl	ed88 <_Bfree>
    cbfc:	mov	r1, r6
    cbfe:	mov	r0, r8
    cc00:	bl	ed88 <_Bfree>
    cc04:	mov	r1, r4
    cc06:	mov	r0, r8
    cc08:	bl	ed88 <_Bfree>
    cc0c:	mov	r1, r9
    cc0e:	mov	r0, r8
    cc10:	bl	ed88 <_Bfree>
    cc14:	mov	r1, sl
    cc16:	mov	r0, r8
    cc18:	bl	ed88 <_Bfree>
    cc1c:	b.n	c7a2 <_strtod_l+0x37a>
    cc1e:	movs	r2, #1
    cc20:	str	r2, [sp, #36]	; 0x24
    cc22:	adds	r1, r7, #1
    cc24:	str	r1, [sp, #68]	; 0x44
    cc26:	ldrb	r2, [r7, #1]
    cc28:	cmp	r2, #0
    cc2a:	beq.w	c5f8 <_strtod_l+0x1d0>
    cc2e:	mov	r7, r1
    cc30:	b.n	c514 <_strtod_l+0xec>
    cc32:	movs	r2, #0
    cc34:	str	r2, [sp, #36]	; 0x24
    cc36:	b.n	cc22 <_strtod_l+0x7fa>
    cc38:	ubfx	r3, r2, #0, #20
    cc3c:	mov	r0, r2
    cc3e:	cmp	r3, #0
    cc40:	bne.w	cb3a <_strtod_l+0x712>
    cc44:	vmov.f64	d7, #112	; 0x3f800000  1.0
    cc48:	vcmpe.f64	d0, d7
    cc4c:	vmrs	APSR_nzcv, fpscr
    cc50:	bmi.w	cffa <_strtod_l+0xbd2>
    cc54:	vmov.f64	d9, #96	; 0x3f000000  0.5
    cc58:	vmul.f64	d9, d0, d9
    cc5c:	vneg.f64	d7, d9
    cc60:	b.n	ca28 <_strtod_l+0x600>
    cc62:	add.w	r3, r3, #55574528	; 0x3500000
    cc66:	str	r3, [sp, #20]
    cc68:	b.n	c9dc <_strtod_l+0x5b4>
    cc6a:	vcvt.u32.f64	s18, d9
    cc6e:	vmov	r3, s18
    cc72:	cmp	r3, #1
    cc74:	it	cc
    cc76:	movcc	r3, #1
    cc78:	vmov	s18, r3
    cc7c:	vcvt.f64.u32	d9, s18
    cc80:	cmp	r5, #0
    cc82:	bne.w	cf02 <_strtod_l+0xada>
    cc86:	vneg.f64	d7, d9
    cc8a:	vmov	r2, r3, d7
    cc8e:	b.n	c9be <_strtod_l+0x596>
    cc90:	cmp.w	r2, #308	; 0x134
    cc94:	bgt.w	cdfc <_strtod_l+0x9d4>
    cc98:	cmp	r2, #16
    cc9a:	mov.w	r3, r2, asr #4
    cc9e:	ble.w	d1ae <_strtod_l+0xd86>
    cca2:	ldr	r4, [pc, #388]	; (ce28 <_strtod_l+0xa00>)
    cca4:	vldr	d7, [sp, #16]
    cca8:	movs	r0, #0
    ccaa:	mov	r2, r4
    ccac:	mov	r1, r0
    ccae:	tst.w	r3, #1
    ccb2:	add.w	r1, r1, #1
    ccb6:	mov.w	r3, r3, asr #1
    ccba:	beq.n	ccc6 <_strtod_l+0x89e>
    ccbc:	vldr	d6, [r2]
    ccc0:	movs	r0, #1
    ccc2:	vmul.f64	d7, d7, d6
    ccc6:	cmp	r3, #1
    ccc8:	add.w	r2, r2, #8
    cccc:	bne.n	ccae <_strtod_l+0x886>
    ccce:	cbz	r0, ccd4 <_strtod_l+0x8ac>
    ccd0:	vstr	d7, [sp, #16]
    ccd4:	ldr	r3, [sp, #20]
    ccd6:	sub.w	r3, r3, #55574528	; 0x3500000
    ccda:	str	r3, [sp, #20]
    ccdc:	add.w	r4, r4, r1, lsl #3
    cce0:	vldr	d6, [sp, #16]
    cce4:	vldr	d7, [r4]
    cce8:	ldr	r3, [pc, #304]	; (ce1c <_strtod_l+0x9f4>)
    ccea:	vmul.f64	d7, d7, d6
    ccee:	vmov	r2, s15
    ccf2:	ldr	r1, [pc, #312]	; (ce2c <_strtod_l+0xa04>)
    ccf4:	ands	r3, r2
    ccf6:	cmp	r3, r1
    ccf8:	vstr	d7, [sp, #16]
    ccfc:	bhi.n	cdfc <_strtod_l+0x9d4>
    ccfe:	sub.w	r1, r1, #1048576	; 0x100000
    cd02:	cmp	r3, r1
    cd04:	bls.w	d0b4 <_strtod_l+0xc8c>
    cd08:	ldr	r4, [pc, #280]	; (ce24 <_strtod_l+0x9fc>)
    cd0a:	mov.w	r3, #4294967295
    cd0e:	strd	r3, r4, [sp, #16]
    cd12:	movs	r3, #0
    cd14:	str	r3, [sp, #32]
    cd16:	b.n	c824 <_strtod_l+0x3fc>
    cd18:	vcmpe.f64	d9, d14
    cd1c:	vmrs	APSR_nzcv, fpscr
    cd20:	bpl.w	c9ea <_strtod_l+0x5c2>
    cd24:	b.n	cbee <_strtod_l+0x7c6>
    cd26:	adds	r2, #22
    cd28:	blt.w	c7f0 <_strtod_l+0x3c8>
    cd2c:	ldr	r3, [sp, #44]	; 0x2c
    cd2e:	sub.w	fp, r3, fp
    cd32:	ldr	r3, [pc, #252]	; (ce30 <_strtod_l+0xa08>)
    cd34:	add.w	r3, r3, fp, lsl #3
    cd38:	vldr	d7, [r3]
    cd3c:	vldr	d6, [sp, #16]
    cd40:	vdiv.f64	d8, d6, d7
    cd44:	b.n	c7a2 <_strtod_l+0x37a>
    cd46:	mov.w	lr, #0
    cd4a:	str.w	lr, [sp, #44]	; 0x2c
    cd4e:	mov.w	ip, #1
    cd52:	b.n	c5f2 <_strtod_l+0x1ca>
    cd54:	cmp	r4, #110	; 0x6e
    cd56:	beq.w	c77a <_strtod_l+0x352>
    cd5a:	b.n	c5f8 <_strtod_l+0x1d0>
    cd5c:	beq.w	c820 <_strtod_l+0x3f8>
    cd60:	negs	r3, r3
    cd62:	ands.w	r1, r3, #15
    cd66:	beq.n	cd7e <_strtod_l+0x956>
    cd68:	ldr	r2, [pc, #196]	; (ce30 <_strtod_l+0xa08>)
    cd6a:	add.w	r2, r2, r1, lsl #3
    cd6e:	vldr	d6, [sp, #16]
    cd72:	vldr	d7, [r2]
    cd76:	vdiv.f64	d7, d6, d7
    cd7a:	vstr	d7, [sp, #16]
    cd7e:	asrs	r3, r3, #4
    cd80:	beq.w	c820 <_strtod_l+0x3f8>
    cd84:	cmp	r3, #31
    cd86:	bgt.n	cdf0 <_strtod_l+0x9c8>
    cd88:	ands.w	r2, r3, #16
    cd8c:	it	ne
    cd8e:	movne	r2, #106	; 0x6a
    cd90:	vldr	d7, [sp, #16]
    cd94:	str	r2, [sp, #32]
    cd96:	ldr	r2, [pc, #156]	; (ce34 <_strtod_l+0xa0c>)
    cd98:	movs	r1, #0
    cd9a:	lsls	r0, r3, #31
    cd9c:	bpl.n	cda8 <_strtod_l+0x980>
    cd9e:	vldr	d6, [r2]
    cda2:	movs	r1, #1
    cda4:	vmul.f64	d7, d7, d6
    cda8:	asrs	r3, r3, #1
    cdaa:	add.w	r2, r2, #8
    cdae:	bne.n	cd9a <_strtod_l+0x972>
    cdb0:	cbz	r1, cdb6 <_strtod_l+0x98e>
    cdb2:	vstr	d7, [sp, #16]
    cdb6:	ldr	r3, [sp, #32]
    cdb8:	cbz	r3, cde0 <_strtod_l+0x9b8>
    cdba:	ldrd	r0, r1, [sp, #16]
    cdbe:	ubfx	r2, r1, #20, #11
    cdc2:	rsb	r3, r2, #107	; 0x6b
    cdc6:	cmp	r3, #0
    cdc8:	ble.n	cde0 <_strtod_l+0x9b8>
    cdca:	cmp	r3, #31
    cdcc:	ble.w	d22e <_strtod_l+0xe06>
    cdd0:	movs	r0, #0
    cdd2:	cmp	r3, #52	; 0x34
    cdd4:	str	r0, [sp, #16]
    cdd6:	ble.w	d25a <_strtod_l+0xe32>
    cdda:	mov.w	r3, #57671680	; 0x3700000
    cdde:	str	r3, [sp, #20]
    cde0:	vldr	d7, [sp, #16]
    cde4:	vcmp.f64	d7, #0.0
    cde8:	vmrs	APSR_nzcv, fpscr
    cdec:	bne.w	c824 <_strtod_l+0x3fc>
    cdf0:	movs	r3, #34	; 0x22
    cdf2:	vldr	d8, [pc, #20]	; ce08 <_strtod_l+0x9e0>
    cdf6:	str.w	r3, [r8]
    cdfa:	b.n	c7a2 <_strtod_l+0x37a>
    cdfc:	movs	r3, #34	; 0x22
    cdfe:	vldr	d8, [pc, #16]	; ce10 <_strtod_l+0x9e8>
    ce02:	str.w	r3, [r8]
    ce06:	b.n	c7a2 <_strtod_l+0x37a>
	...
    ce14:	.word	0x7ff00000
    ce18:	.word	0xbff00000
    ce1c:	.word	0x7ff00000
    ce20:	.word	0x7c9fffff
    ce24:	.word	0x7fefffff
    ce28:	.word	0x20000300
    ce2c:	.word	0x7ca00000
    ce30:	.word	0x20000328
    ce34:	.word	0x200003f0
    ce38:	str	r3, [sp, #8]
    ce3a:	ldr	r3, [sp, #36]	; 0x24
    ce3c:	str	r3, [sp, #4]
    ce3e:	add	r3, sp, #72	; 0x48
    ce40:	str	r3, [sp, #0]
    ce42:	ldr	r2, [pc, #668]	; (d0e0 <_strtod_l+0xcb8>)
    ce44:	add	r3, sp, #76	; 0x4c
    ce46:	add	r1, sp, #68	; 0x44
    ce48:	mov	r0, r8
    ce4a:	bl	e594 <__gethex>
    ce4e:	ands.w	r5, r0, #15
    ce52:	mov	r4, r0
    ce54:	beq.w	c79e <_strtod_l+0x376>
    ce58:	cmp	r5, #6
    ce5a:	bne.n	cf46 <_strtod_l+0xb1e>
    ce5c:	ldr	r3, [sp, #28]
    ce5e:	vldr	d8, [pc, #616]	; d0c8 <_strtod_l+0xca0>
    ce62:	adds	r7, #1
    ce64:	cmp	r3, #0
    ce66:	beq.w	c606 <_strtod_l+0x1de>
    ce6a:	str	r7, [r3, #0]
    ce6c:	b.w	c606 <_strtod_l+0x1de>
    ce70:	vldr	d8, [sp, #16]
    ce74:	b.n	c7a2 <_strtod_l+0x37a>
    ce76:	ldr	r3, [sp, #44]	; 0x2c
    ce78:	ldr.w	ip, [sp, #68]	; 0x44
    ce7c:	add	r3, r0
    ce7e:	str	r3, [sp, #44]	; 0x2c
    ce80:	cmp	r0, #1
    ce82:	add.w	r3, r5, #1
    ce86:	mov	r2, r3
    ce88:	beq.n	ceb4 <_strtod_l+0xa8c>
    ce8a:	add	r0, r5
    ce8c:	subs	r4, r0, #1
    ce8e:	b.n	ce98 <_strtod_l+0xa70>
    ce90:	lsls	r6, r0, #1
    ce92:	cmp	r4, r3
    ce94:	beq.n	ceb2 <_strtod_l+0xa8a>
    ce96:	adds	r3, #1
    ce98:	mov	r2, r5
    ce9a:	cmp	r2, #8
    ce9c:	mov	r5, r3
    ce9e:	add.w	r0, r6, r6, lsl #2
    cea2:	bls.n	ce90 <_strtod_l+0xa68>
    cea4:	cmp	r3, #16
    cea6:	itt	le
    cea8:	addle.w	r9, r9, r9, lsl #2
    ceac:	movle.w	r9, r9, lsl #1
    ceb0:	b.n	ce92 <_strtod_l+0xa6a>
    ceb2:	adds	r2, #2
    ceb4:	cmp	r5, #8
    ceb6:	bgt.n	cf32 <_strtod_l+0xb0a>
    ceb8:	mov	r5, r2
    ceba:	b.w	c5b0 <_strtod_l+0x188>
    cebe:	ldr	r1, [pc, #548]	; (d0e4 <_strtod_l+0xcbc>)
    cec0:	movs	r2, #1
    cec2:	mov	r0, r7
    cec4:	bl	da4c <strncmp>
    cec8:	cmp	r0, #0
    ceca:	beq.w	cfd2 <_strtod_l+0xbaa>
    cece:	mov.w	lr, #0
    ced2:	mov	r9, lr
    ced4:	mov	r6, lr
    ced6:	mov	r5, lr
    ced8:	b.w	c646 <_strtod_l+0x21e>
    cedc:	movw	r3, #19999	; 0x4e1f
    cee0:	cmp	fp, r3
    cee2:	it	ge
    cee4:	movge	fp, r3
    cee6:	b.n	c748 <_strtod_l+0x320>
    cee8:	ldrd	r2, r3, [sp, #16]
    ceec:	mov	r0, r3
    ceee:	cmp	r3, #0
    cef0:	bne.w	cb3a <_strtod_l+0x712>
    cef4:	movs	r3, #34	; 0x22
    cef6:	vldr	d8, [pc, #464]	; d0c8 <_strtod_l+0xca0>
    cefa:	ldr	r0, [sp, #72]	; 0x48
    cefc:	str.w	r3, [r8]
    cf00:	b.n	cbf4 <_strtod_l+0x7cc>
    cf02:	vmov.f64	d7, d9
    cf06:	b.n	cc8a <_strtod_l+0x862>
    cf08:	ldr	r1, [pc, #476]	; (d0e8 <_strtod_l+0xcc0>)
    cf0a:	add	r0, sp, #68	; 0x44
    cf0c:	bl	eb28 <__match>
    cf10:	cmp	r0, #0
    cf12:	beq.w	c5f8 <_strtod_l+0x1d0>
    cf16:	ldr	r3, [sp, #68]	; 0x44
    cf18:	ldr	r1, [pc, #464]	; (d0ec <_strtod_l+0xcc4>)
    cf1a:	subs	r3, #1
    cf1c:	add	r0, sp, #68	; 0x44
    cf1e:	str	r3, [sp, #68]	; 0x44
    cf20:	bl	eb28 <__match>
    cf24:	cbnz	r0, cf2c <_strtod_l+0xb04>
    cf26:	ldr	r3, [sp, #68]	; 0x44
    cf28:	adds	r3, #1
    cf2a:	str	r3, [sp, #68]	; 0x44
    cf2c:	vldr	d8, [pc, #416]	; d0d0 <_strtod_l+0xca8>
    cf30:	b.n	c7a2 <_strtod_l+0x37a>
    cf32:	cmp	r2, #16
    cf34:	itt	le
    cf36:	addle.w	r9, r9, r9, lsl #2
    cf3a:	addle.w	r9, r1, r9, lsl #1
    cf3e:	mov	r5, r2
    cf40:	movs	r0, #0
    cf42:	b.w	c5ba <_strtod_l+0x192>
    cf46:	ldr	r2, [sp, #72]	; 0x48
    cf48:	cbz	r2, cf5a <_strtod_l+0xb32>
    cf4a:	movs	r1, #53	; 0x35
    cf4c:	add	r0, sp, #80	; 0x50
    cf4e:	bl	f6f0 <__copybits>
    cf52:	ldr	r1, [sp, #72]	; 0x48
    cf54:	mov	r0, r8
    cf56:	bl	ed88 <_Bfree>
    cf5a:	subs	r5, #1
    cf5c:	ldr	r3, [sp, #76]	; 0x4c
    cf5e:	cmp	r5, #4
    cf60:	bhi.w	d282 <_strtod_l+0xe5a>
    cf64:	tbb	[pc, r5]
    cf68:	.word	0x1f2a2d03
    cf6c:	.byte	0x03
    cf6d:	.byte	0x00
    cf6e:	ldr	r2, [sp, #80]	; 0x50
    cf70:	str	r2, [sp, #16]
    cf72:	addw	r2, r3, #1075	; 0x433
    cf76:	ldr	r3, [sp, #84]	; 0x54
    cf78:	bic.w	r3, r3, #1048576	; 0x100000
    cf7c:	orr.w	r3, r3, r2, lsl #20
    cf80:	str	r3, [sp, #20]
    cf82:	lsls	r5, r4, #23
    cf84:	bpl.n	cf8c <_strtod_l+0xb64>
    cf86:	orr.w	r3, r3, #2147483648	; 0x80000000
    cf8a:	str	r3, [sp, #20]
    cf8c:	ldr	r2, [pc, #352]	; (d0f0 <_strtod_l+0xcc8>)
    cf8e:	ands	r2, r3
    cf90:	vldr	d8, [sp, #16]
    cf94:	cmp	r2, #0
    cf96:	bne.w	c7a2 <_strtod_l+0x37a>
    cf9a:	bl	dc14 <__errno>
    cf9e:	movs	r3, #34	; 0x22
    cfa0:	str	r3, [r0, #0]
    cfa2:	b.w	c7a2 <_strtod_l+0x37a>
    cfa6:	mov.w	r3, #4294967295
    cfaa:	mvn.w	r6, #2147483648	; 0x80000000
    cfae:	strd	r3, r6, [sp, #16]
    cfb2:	lsls	r3, r4, #23
    cfb4:	bpl.w	ce70 <_strtod_l+0xa48>
    cfb8:	ldr	r3, [sp, #20]
    cfba:	b.n	cf86 <_strtod_l+0xb5e>
    cfbc:	ldr	r3, [pc, #304]	; (d0f0 <_strtod_l+0xcc8>)
    cfbe:	str	r3, [sp, #20]
    cfc0:	b.n	cfb2 <_strtod_l+0xb8a>
    cfc2:	ldr	r3, [sp, #80]	; 0x50
    cfc4:	str	r3, [sp, #16]
    cfc6:	ldr	r3, [sp, #84]	; 0x54
    cfc8:	str	r3, [sp, #20]
    cfca:	b.n	cf82 <_strtod_l+0xb5a>
    cfcc:	movs	r0, #0
    cfce:	b.w	c594 <_strtod_l+0x16c>
    cfd2:	ldr	r3, [sp, #68]	; 0x44
    cfd4:	mov	r2, r3
    cfd6:	adds	r3, #1
    cfd8:	str	r3, [sp, #68]	; 0x44
    cfda:	ldrb	r4, [r2, #1]
    cfdc:	mov	r6, r0
    cfde:	mov	r9, r0
    cfe0:	b.w	c57e <_strtod_l+0x156>
    cfe4:	ldr	r3, [pc, #268]	; (d0f4 <_strtod_l+0xccc>)
    cfe6:	add.w	r3, r3, r2, lsl #3
    cfea:	vldr	d8, [r3]
    cfee:	vldr	d7, [sp, #16]
    cff2:	vmul.f64	d8, d8, d7
    cff6:	b.w	c7a2 <_strtod_l+0x37a>
    cffa:	vmov.f64	d7, #224	; 0xbf000000 -0.5
    cffe:	vmov.f64	d9, #96	; 0x3f000000  0.5
    d002:	b.n	ca28 <_strtod_l+0x600>
    d004:	mov	lr, r5
    d006:	str	r0, [sp, #44]	; 0x2c
    d008:	b.w	c5c4 <_strtod_l+0x19c>
    d00c:	ldr	r3, [pc, #228]	; (d0f4 <_strtod_l+0xccc>)
    d00e:	rsb	r5, r5, #15
    d012:	subs	r2, r1, r5
    d014:	add.w	r5, r3, r5, lsl #3
    d018:	add.w	r3, r3, r2, lsl #3
    d01c:	vldr	d8, [r5]
    d020:	vldr	d7, [r3]
    d024:	vldr	d6, [sp, #16]
    d028:	vmul.f64	d8, d8, d6
    d02c:	vmul.f64	d8, d8, d7
    d030:	b.w	c7a2 <_strtod_l+0x37a>
    d034:	cmp	r5, #0
    d036:	beq.w	d164 <_strtod_l+0xd3c>
    d03a:	ldrd	fp, ip, [sp, #16]
    d03e:	ldr	r3, [pc, #184]	; (d0f8 <_strtod_l+0xcd0>)
    d040:	ubfx	r1, ip, #0, #20
    d044:	cmp	r1, r3
    d046:	mov	r2, ip
    d048:	beq.w	d1f0 <_strtod_l+0xdc8>
    d04c:	ldr	r3, [sp, #56]	; 0x38
    d04e:	cmp	r3, #0
    d050:	beq.w	d19e <_strtod_l+0xd76>
    d054:	ldrd	r1, r2, [sp, #16]
    d058:	tst	r3, r2
    d05a:	mov	r7, r2
    d05c:	beq.n	d094 <_strtod_l+0xc6c>
    d05e:	vmov.f64	d0, d8
    d062:	cmp	r5, #0
    d064:	beq.w	d1b4 <_strtod_l+0xd8c>
    d068:	bl	f490 <__ulp>
    d06c:	ldr	r3, [sp, #32]
    d06e:	cbz	r3, d090 <_strtod_l+0xc68>
    d070:	ubfx	r3, r7, #20, #11
    d074:	rsb	r3, r3, #107	; 0x6b
    d078:	cmp	r3, #0
    d07a:	ble.n	d090 <_strtod_l+0xc68>
    d07c:	lsls	r3, r3, #20
    d07e:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d082:	movs	r0, #0
    d084:	add.w	r1, r1, #3145728	; 0x300000
    d088:	vmov	d7, r0, r1
    d08c:	vmul.f64	d0, d0, d7
    d090:	vadd.f64	d8, d8, d0
    d094:	ldr	r3, [sp, #32]
    d096:	cbz	r3, d0b0 <_strtod_l+0xc88>
    d098:	vldr	d7, [pc, #60]	; d0d8 <_strtod_l+0xcb0>
    d09c:	ldr	r3, [pc, #80]	; (d0f0 <_strtod_l+0xcc8>)
    d09e:	vmul.f64	d8, d8, d7
    d0a2:	vmov	r2, s17
    d0a6:	ands	r3, r2
    d0a8:	cbnz	r3, d0b0 <_strtod_l+0xc88>
    d0aa:	movs	r3, #34	; 0x22
    d0ac:	str.w	r3, [r8]
    d0b0:	ldr	r0, [sp, #72]	; 0x48
    d0b2:	b.n	cbf4 <_strtod_l+0x7cc>
    d0b4:	add.w	r3, r2, #55574528	; 0x3500000
    d0b8:	str	r3, [sp, #20]
    d0ba:	movs	r3, #0
    d0bc:	str	r3, [sp, #32]
    d0be:	b.w	c824 <_strtod_l+0x3fc>
    d0c2:	nop
    d0c4:	nop.w
	...
    d0d4:	.word	0x7ff00000
    d0d8:	.word	0x00000000
    d0dc:	.word	0x39500000
    d0e0:	.word	0x20007788
    d0e4:	.word	0x20000984
    d0e8:	.word	0x20000988
    d0ec:	.word	0x2000098c
    d0f0:	.word	0x7ff00000
    d0f4:	.word	0x20000328
    d0f8:	.word	0x000fffff
    d0fc:	ldrd	r1, r2, [sp, #16]
    d100:	orrs	r5, r1
    d102:	bne.n	d094 <_strtod_l+0xc6c>
    d104:	ubfx	r3, r2, #0, #20
    d108:	mov	r7, r2
    d10a:	cmp	r3, #0
    d10c:	bne.n	d094 <_strtod_l+0xc6c>
    d10e:	bic.w	r3, r2, #2147483648	; 0x80000000
    d112:	lsrs	r3, r3, #20
    d114:	lsls	r3, r3, #20
    d116:	cmp.w	r3, #112197632	; 0x6b00000
    d11a:	bls.n	d094 <_strtod_l+0xc6c>
    d11c:	ldr.w	r3, [sl, #20]
    d120:	cbnz	r3, d12a <_strtod_l+0xd02>
    d122:	ldr.w	r3, [sl, #16]
    d126:	cmp	r3, #1
    d128:	ble.n	d094 <_strtod_l+0xc6c>
    d12a:	mov	r1, sl
    d12c:	movs	r2, #1
    d12e:	mov	r0, r8
    d130:	bl	f208 <__lshift>
    d134:	mov	r1, r4
    d136:	mov	sl, r0
    d138:	bl	f2f8 <__mcmp>
    d13c:	cmp	r0, #0
    d13e:	ble.n	d094 <_strtod_l+0xc6c>
    d140:	ldr	r3, [sp, #32]
    d142:	cmp	r3, #0
    d144:	bne.n	d244 <_strtod_l+0xe1c>
    d146:	ldr	r3, [pc, #320]	; (d288 <_strtod_l+0xe60>)
    d148:	ands	r3, r7
    d14a:	sub.w	r3, r3, #1048576	; 0x100000
    d14e:	mvn.w	r3, r3, lsr #20
    d152:	mvn.w	r3, r3, lsl #20
    d156:	str	r3, [sp, #20]
    d158:	mov.w	r3, #4294967295
    d15c:	str	r3, [sp, #16]
    d15e:	vldr	d8, [sp, #16]
    d162:	b.n	d094 <_strtod_l+0xc6c>
    d164:	ldrd	r1, r2, [sp, #16]
    d168:	ubfx	r3, r2, #0, #20
    d16c:	orrs	r3, r1
    d16e:	mov	r7, r2
    d170:	bne.w	d04c <_strtod_l+0xc24>
    d174:	b.n	d140 <_strtod_l+0xd18>
    d176:	ldr	r1, [pc, #276]	; (d28c <_strtod_l+0xe64>)
    d178:	add	r0, sp, #68	; 0x44
    d17a:	add	r2, sp, #80	; 0x50
    d17c:	bl	eb60 <__hexnan>
    d180:	cmp	r0, #5
    d182:	bne.w	c792 <_strtod_l+0x36a>
    d186:	ldr	r3, [sp, #84]	; 0x54
    d188:	orr.w	r3, r3, #2139095040	; 0x7f800000
    d18c:	orr.w	r3, r3, #7340032	; 0x700000
    d190:	str	r3, [sp, #20]
    d192:	ldr	r3, [sp, #80]	; 0x50
    d194:	str	r3, [sp, #16]
    d196:	vldr	d8, [sp, #16]
    d19a:	b.w	c7a2 <_strtod_l+0x37a>
    d19e:	ldrd	r0, r1, [sp, #16]
    d1a2:	ldr	r3, [sp, #52]	; 0x34
    d1a4:	tst	r3, r0
    d1a6:	beq.w	d094 <_strtod_l+0xc6c>
    d1aa:	mov	r7, r1
    d1ac:	b.n	d05e <_strtod_l+0xc36>
    d1ae:	ldr	r4, [pc, #224]	; (d290 <_strtod_l+0xe68>)
    d1b0:	movs	r1, #0
    d1b2:	b.n	ccd4 <_strtod_l+0x8ac>
    d1b4:	bl	f490 <__ulp>
    d1b8:	ldr	r3, [sp, #32]
    d1ba:	cmp	r3, #0
    d1bc:	beq.n	d26a <_strtod_l+0xe42>
    d1be:	ubfx	r3, r7, #20, #11
    d1c2:	rsb	r3, r3, #107	; 0x6b
    d1c6:	cmp	r3, #0
    d1c8:	ble.n	d1de <_strtod_l+0xdb6>
    d1ca:	lsls	r3, r3, #20
    d1cc:	add.w	r1, r3, #1069547520	; 0x3fc00000
    d1d0:	add.w	r1, r1, #3145728	; 0x300000
    d1d4:	mov	r0, r5
    d1d6:	vmov	d7, r0, r1
    d1da:	vmul.f64	d0, d0, d7
    d1de:	vsub.f64	d8, d8, d0
    d1e2:	vcmp.f64	d8, #0.0
    d1e6:	vmrs	APSR_nzcv, fpscr
    d1ea:	bne.w	d098 <_strtod_l+0xc70>
    d1ee:	b.n	cef4 <_strtod_l+0xacc>
    d1f0:	ldr	r3, [sp, #32]
    d1f2:	ldr	r1, [sp, #16]
    d1f4:	cbz	r3, d23e <_strtod_l+0xe16>
    d1f6:	ldr	r3, [pc, #144]	; (d288 <_strtod_l+0xe60>)
    d1f8:	ands	r3, r2
    d1fa:	cmp.w	r3, #111149056	; 0x6a00000
    d1fe:	bhi.n	d23e <_strtod_l+0xe16>
    d200:	lsrs	r3, r3, #20
    d202:	rsb	r3, r3, #107	; 0x6b
    d206:	mov.w	r0, #4294967295
    d20a:	lsl.w	r3, r0, r3
    d20e:	cmp	r1, r3
    d210:	bne.w	d04c <_strtod_l+0xc24>
    d214:	ldr	r3, [pc, #124]	; (d294 <_strtod_l+0xe6c>)
    d216:	cmp	r2, r3
    d218:	beq.n	d27c <_strtod_l+0xe54>
    d21a:	ldr	r3, [pc, #108]	; (d288 <_strtod_l+0xe60>)
    d21c:	ands	r3, r2
    d21e:	add.w	r3, r3, #1048576	; 0x100000
    d222:	str	r3, [sp, #20]
    d224:	movs	r3, #0
    d226:	str	r3, [sp, #16]
    d228:	vldr	d8, [sp, #16]
    d22c:	b.n	d094 <_strtod_l+0xc6c>
    d22e:	mov.w	r2, #4294967295
    d232:	lsl.w	r3, r2, r3
    d236:	ldr	r2, [sp, #16]
    d238:	ands	r2, r3
    d23a:	str	r2, [sp, #16]
    d23c:	b.n	cde0 <_strtod_l+0x9b8>
    d23e:	mov.w	r3, #4294967295
    d242:	b.n	d20e <_strtod_l+0xde6>
    d244:	ldr	r3, [pc, #64]	; (d288 <_strtod_l+0xe60>)
    d246:	ands	r3, r7
    d248:	cmp.w	r3, #112197632	; 0x6b00000
    d24c:	bgt.w	d14a <_strtod_l+0xd22>
    d250:	cmp.w	r3, #57671680	; 0x3700000
    d254:	bgt.w	d098 <_strtod_l+0xc70>
    d258:	b.n	cef4 <_strtod_l+0xacc>
    d25a:	rsb	r2, r2, #75	; 0x4b
    d25e:	mov.w	r3, #4294967295
    d262:	lsls	r3, r2
    d264:	ands	r3, r1
    d266:	str	r3, [sp, #20]
    d268:	b.n	cde0 <_strtod_l+0x9b8>
    d26a:	vsub.f64	d8, d8, d0
    d26e:	vcmp.f64	d8, #0.0
    d272:	vmrs	APSR_nzcv, fpscr
    d276:	bne.w	d0b0 <_strtod_l+0xc88>
    d27a:	b.n	cef4 <_strtod_l+0xacc>
    d27c:	adds	r1, #1
    d27e:	bne.n	d21a <_strtod_l+0xdf2>
    d280:	b.n	ca96 <_strtod_l+0x66e>
    d282:	movs	r3, #0
    d284:	b.n	cf82 <_strtod_l+0xb5a>
    d286:	nop
    d288:	.word	0x7ff00000
    d28c:	.word	0x2000779c
    d290:	.word	0x20000300
    d294:	.word	0x7fefffff

0000d298 <_strtod_r>:
    d298:	ldr	r3, [pc, #4]	; (d2a0 <_strtod_r+0x8>)
    d29a:	b.w	c428 <_strtod_l>
    d29e:	nop
    d2a0:	.word	0x20008964

0000d2a4 <_strtol_l.constprop.0>:
    d2a4:	cmp	r3, #1
    d2a6:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2aa:	beq.n	d32e <_strtol_l.constprop.0+0x8a>
    d2ac:	cmp	r3, #36	; 0x24
    d2ae:	mov	r8, r3
    d2b0:	bhi.n	d32e <_strtol_l.constprop.0+0x8a>
    d2b2:	ldr	r5, [pc, #304]	; (d3e4 <_strtol_l.constprop.0+0x140>)
    d2b4:	mov	lr, r1
    d2b6:	mov	r6, lr
    d2b8:	ldrb.w	fp, [lr], #1
    d2bc:	ldrb.w	r4, [r5, fp]
    d2c0:	ands.w	r4, r4, #8
    d2c4:	bne.n	d2b6 <_strtol_l.constprop.0+0x12>
    d2c6:	cmp.w	fp, #45	; 0x2d
    d2ca:	beq.n	d3b2 <_strtol_l.constprop.0+0x10e>
    d2cc:	cmp.w	fp, #43	; 0x2b
    d2d0:	it	eq
    d2d2:	ldrbeq.w	fp, [lr]
    d2d6:	mvn.w	r9, #2147483648	; 0x80000000
    d2da:	it	eq
    d2dc:	addeq.w	lr, r6, #2
    d2e0:	cmp	r3, #0
    d2e2:	beq.n	d36a <_strtol_l.constprop.0+0xc6>
    d2e4:	cmp	r3, #16
    d2e6:	beq.n	d398 <_strtol_l.constprop.0+0xf4>
    d2e8:	udiv	r7, r9, r8
    d2ec:	movs	r5, #0
    d2ee:	mov	r6, r5
    d2f0:	mls	sl, r8, r7, r9
    d2f4:	b.n	d302 <_strtol_l.constprop.0+0x5e>
    d2f6:	beq.n	d360 <_strtol_l.constprop.0+0xbc>
    d2f8:	mla	r6, r8, r6, ip
    d2fc:	movs	r5, #1
    d2fe:	ldrb.w	fp, [lr], #1
    d302:	sub.w	ip, fp, #48	; 0x30
    d306:	cmp.w	ip, #9
    d30a:	bls.n	d31a <_strtol_l.constprop.0+0x76>
    d30c:	sub.w	ip, fp, #65	; 0x41
    d310:	cmp.w	ip, #25
    d314:	bhi.n	d33c <_strtol_l.constprop.0+0x98>
    d316:	sub.w	ip, fp, #55	; 0x37
    d31a:	cmp	r3, ip
    d31c:	ble.n	d34e <_strtol_l.constprop.0+0xaa>
    d31e:	cmp.w	r5, #4294967295
    d322:	beq.n	d2fe <_strtol_l.constprop.0+0x5a>
    d324:	cmp	r7, r6
    d326:	bcs.n	d2f6 <_strtol_l.constprop.0+0x52>
    d328:	mov.w	r5, #4294967295
    d32c:	b.n	d2fe <_strtol_l.constprop.0+0x5a>
    d32e:	bl	dc14 <__errno>
    d332:	movs	r3, #22
    d334:	str	r3, [r0, #0]
    d336:	movs	r0, #0
    d338:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d33c:	sub.w	ip, fp, #97	; 0x61
    d340:	cmp.w	ip, #25
    d344:	bhi.n	d34e <_strtol_l.constprop.0+0xaa>
    d346:	sub.w	ip, fp, #87	; 0x57
    d34a:	cmp	r3, ip
    d34c:	bgt.n	d31e <_strtol_l.constprop.0+0x7a>
    d34e:	adds	r3, r5, #1
    d350:	beq.n	d3a2 <_strtol_l.constprop.0+0xfe>
    d352:	cbnz	r4, d378 <_strtol_l.constprop.0+0xd4>
    d354:	cbz	r2, d35a <_strtol_l.constprop.0+0xb6>
    d356:	cbnz	r5, d3c2 <_strtol_l.constprop.0+0x11e>
    d358:	str	r1, [r2, #0]
    d35a:	mov	r0, r6
    d35c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d360:	cmp	sl, ip
    d362:	bge.n	d2f8 <_strtol_l.constprop.0+0x54>
    d364:	mov.w	r5, #4294967295
    d368:	b.n	d2fe <_strtol_l.constprop.0+0x5a>
    d36a:	cmp.w	fp, #48	; 0x30
    d36e:	beq.n	d37c <_strtol_l.constprop.0+0xd8>
    d370:	mov.w	r8, #10
    d374:	mov	r3, r8
    d376:	b.n	d2e8 <_strtol_l.constprop.0+0x44>
    d378:	negs	r6, r6
    d37a:	b.n	d354 <_strtol_l.constprop.0+0xb0>
    d37c:	ldrb.w	r3, [lr]
    d380:	and.w	r3, r3, #223	; 0xdf
    d384:	cmp	r3, #88	; 0x58
    d386:	bne.n	d3cc <_strtol_l.constprop.0+0x128>
    d388:	mov.w	r8, #16
    d38c:	ldrb.w	fp, [lr, #1]
    d390:	mov	r3, r8
    d392:	add.w	lr, lr, #2
    d396:	b.n	d2e8 <_strtol_l.constprop.0+0x44>
    d398:	cmp.w	fp, #48	; 0x30
    d39c:	beq.n	d3d4 <_strtol_l.constprop.0+0x130>
    d39e:	mov	r8, r3
    d3a0:	b.n	d2e8 <_strtol_l.constprop.0+0x44>
    d3a2:	movs	r3, #34	; 0x22
    d3a4:	str	r3, [r0, #0]
    d3a6:	cbz	r2, d3c6 <_strtol_l.constprop.0+0x122>
    d3a8:	add.w	r1, lr, #4294967295
    d3ac:	mov	r6, r9
    d3ae:	str	r1, [r2, #0]
    d3b0:	b.n	d35a <_strtol_l.constprop.0+0xb6>
    d3b2:	ldrb.w	fp, [lr]
    d3b6:	mov.w	r9, #2147483648	; 0x80000000
    d3ba:	add.w	lr, r6, #2
    d3be:	movs	r4, #1
    d3c0:	b.n	d2e0 <_strtol_l.constprop.0+0x3c>
    d3c2:	mov	r9, r6
    d3c4:	b.n	d3a8 <_strtol_l.constprop.0+0x104>
    d3c6:	mov	r6, r9
    d3c8:	mov	r0, r6
    d3ca:	b.n	d35c <_strtol_l.constprop.0+0xb8>
    d3cc:	mov.w	r8, #8
    d3d0:	mov	r3, r8
    d3d2:	b.n	d2e8 <_strtol_l.constprop.0+0x44>
    d3d4:	ldrb.w	r5, [lr]
    d3d8:	and.w	r5, r5, #223	; 0xdf
    d3dc:	cmp	r5, #88	; 0x58
    d3de:	beq.n	d388 <_strtol_l.constprop.0+0xe4>
    d3e0:	mov	r8, r3
    d3e2:	b.n	d2e8 <_strtol_l.constprop.0+0x44>
    d3e4:	.word	0x20000801

0000d3e8 <_strtol_r>:
    d3e8:	b.w	d2a4 <_strtol_l.constprop.0>

0000d3ec <__cxa_atexit>:
    d3ec:	mov	r3, r2
    d3ee:	mov	r2, r1
    d3f0:	mov	r1, r0
    d3f2:	movs	r0, #2
    d3f4:	b.w	e1bc <__register_exitproc>

0000d3f8 <fcvtf>:
    d3f8:	vcvt.f64.f32	d0, s0
    d3fc:	movs	r3, #0
    d3fe:	b.w	f7cc <fcvtbuf>
    d402:	nop

0000d404 <stdio_exit_handler>:
    d404:	ldr	r2, [pc, #8]	; (d410 <stdio_exit_handler+0xc>)
    d406:	ldr	r1, [pc, #12]	; (d414 <stdio_exit_handler+0x10>)
    d408:	ldr	r0, [pc, #12]	; (d418 <stdio_exit_handler+0x14>)
    d40a:	b.w	d584 <_fwalk_sglue>
    d40e:	nop
    d410:	.word	0x20008ee0
    d414:	.word	0x00012c05
    d418:	.word	0x20008818

0000d41c <cleanup_stdio>:
    d41c:	ldr	r3, [pc, #48]	; (d450 <cleanup_stdio+0x34>)
    d41e:	ldr	r1, [r0, #4]
    d420:	cmp	r1, r3
    d422:	push	{r4, lr}
    d424:	mov	r4, r0
    d426:	beq.n	d42c <cleanup_stdio+0x10>
    d428:	bl	12c04 <_fclose_r>
    d42c:	ldr	r1, [r4, #8]
    d42e:	ldr	r3, [pc, #36]	; (d454 <cleanup_stdio+0x38>)
    d430:	cmp	r1, r3
    d432:	beq.n	d43a <cleanup_stdio+0x1e>
    d434:	mov	r0, r4
    d436:	bl	12c04 <_fclose_r>
    d43a:	ldr	r1, [r4, #12]
    d43c:	ldr	r3, [pc, #24]	; (d458 <cleanup_stdio+0x3c>)
    d43e:	cmp	r1, r3
    d440:	beq.n	d44c <cleanup_stdio+0x30>
    d442:	mov	r0, r4
    d444:	ldmia.w	sp!, {r4, lr}
    d448:	b.w	12c04 <_fclose_r>
    d44c:	pop	{r4, pc}
    d44e:	nop
    d450:	.word	0x20027628
    d454:	.word	0x20027690
    d458:	.word	0x200276f8

0000d45c <global_stdio_init.part.0>:
    d45c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d460:	ldr	r4, [pc, #168]	; (d50c <global_stdio_init.part.0+0xb0>)
    d462:	ldr	r3, [pc, #172]	; (d510 <global_stdio_init.part.0+0xb4>)
    d464:	ldr	r0, [pc, #172]	; (d514 <global_stdio_init.part.0+0xb8>)
    d466:	ldr.w	r9, [pc, #192]	; d528 <global_stdio_init.part.0+0xcc>
    d46a:	ldr.w	r8, [pc, #192]	; d52c <global_stdio_init.part.0+0xd0>
    d46e:	ldr	r7, [pc, #168]	; (d518 <global_stdio_init.part.0+0xbc>)
    d470:	str	r0, [r3, #0]
    d472:	movs	r5, #0
    d474:	movs	r3, #4
    d476:	movs	r2, #8
    d478:	mov	r1, r5
    d47a:	add.w	r0, r4, #92	; 0x5c
    d47e:	ldr	r6, [pc, #156]	; (d51c <global_stdio_init.part.0+0xc0>)
    d480:	str	r5, [r4, #100]	; 0x64
    d482:	strd	r5, r3, [r4, #8]
    d486:	strd	r5, r5, [r4]
    d48a:	strd	r5, r5, [r4, #16]
    d48e:	str	r5, [r4, #24]
    d490:	bl	942c <memset>
    d494:	ldr	r3, [pc, #136]	; (d520 <global_stdio_init.part.0+0xc4>)
    d496:	str	r3, [r4, #116]	; 0x74
    d498:	movs	r2, #8
    d49a:	mov	r1, r5
    d49c:	add.w	r0, r4, #196	; 0xc4
    d4a0:	strd	r4, r9, [r4, #28]
    d4a4:	strd	r8, r7, [r4, #36]	; 0x24
    d4a8:	strd	r5, r5, [r4, #104]	; 0x68
    d4ac:	strd	r5, r5, [r4, #120]	; 0x78
    d4b0:	str.w	r5, [r4, #204]	; 0xcc
    d4b4:	str	r5, [r4, #112]	; 0x70
    d4b6:	str.w	r5, [r4, #128]	; 0x80
    d4ba:	str	r6, [r4, #44]	; 0x2c
    d4bc:	bl	942c <memset>
    d4c0:	ldr	r3, [pc, #96]	; (d524 <global_stdio_init.part.0+0xc8>)
    d4c2:	str.w	r3, [r4, #220]	; 0xdc
    d4c6:	mov	r1, r5
    d4c8:	add.w	r3, r4, #104	; 0x68
    d4cc:	movs	r2, #8
    d4ce:	add.w	r0, r4, #300	; 0x12c
    d4d2:	str.w	r3, [r4, #132]	; 0x84
    d4d6:	strd	r9, r8, [r4, #136]	; 0x88
    d4da:	strd	r7, r6, [r4, #144]	; 0x90
    d4de:	strd	r5, r5, [r4, #208]	; 0xd0
    d4e2:	strd	r5, r5, [r4, #224]	; 0xe0
    d4e6:	str.w	r5, [r4, #308]	; 0x134
    d4ea:	str.w	r5, [r4, #216]	; 0xd8
    d4ee:	str.w	r5, [r4, #232]	; 0xe8
    d4f2:	bl	942c <memset>
    d4f6:	add.w	r3, r4, #208	; 0xd0
    d4fa:	strd	r9, r8, [r4, #240]	; 0xf0
    d4fe:	strd	r7, r6, [r4, #248]	; 0xf8
    d502:	str.w	r3, [r4, #236]	; 0xec
    d506:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d50a:	nop
    d50c:	.word	0x20027628
    d510:	.word	0x20027760
    d514:	.word	0x0000d405
    d518:	.word	0x0000d755
    d51c:	.word	0x0000d775
    d520:	.word	0x00010009
    d524:	.word	0x00020012
    d528:	.word	0x0000d6ed
    d52c:	.word	0x0000d715

0000d530 <__sinit>:
    d530:	push	{r4, lr}
    d532:	mov	r4, r0
    d534:	ldr	r0, [pc, #40]	; (d560 <__sinit+0x30>)
    d536:	bl	dc70 <__retarget_lock_acquire_recursive>
    d53a:	ldr	r3, [r4, #52]	; 0x34
    d53c:	cbnz	r3, d548 <__sinit+0x18>
    d53e:	ldr	r3, [pc, #36]	; (d564 <__sinit+0x34>)
    d540:	ldr	r2, [pc, #36]	; (d568 <__sinit+0x38>)
    d542:	ldr	r3, [r3, #0]
    d544:	str	r2, [r4, #52]	; 0x34
    d546:	cbz	r3, d552 <__sinit+0x22>
    d548:	ldmia.w	sp!, {r4, lr}
    d54c:	ldr	r0, [pc, #16]	; (d560 <__sinit+0x30>)
    d54e:	b.w	dc74 <__retarget_lock_release_recursive>
    d552:	bl	d45c <global_stdio_init.part.0>
    d556:	ldmia.w	sp!, {r4, lr}
    d55a:	ldr	r0, [pc, #4]	; (d560 <__sinit+0x30>)
    d55c:	b.w	dc74 <__retarget_lock_release_recursive>
    d560:	.word	0x200275f0
    d564:	.word	0x20027760
    d568:	.word	0x0000d41d

0000d56c <__sfp_lock_acquire>:
    d56c:	ldr	r0, [pc, #4]	; (d574 <__sfp_lock_acquire+0x8>)
    d56e:	b.w	dc70 <__retarget_lock_acquire_recursive>
    d572:	nop
    d574:	.word	0x200275f0

0000d578 <__sfp_lock_release>:
    d578:	ldr	r0, [pc, #4]	; (d580 <__sfp_lock_release+0x8>)
    d57a:	b.w	dc74 <__retarget_lock_release_recursive>
    d57e:	nop
    d580:	.word	0x200275f0

0000d584 <_fwalk_sglue>:
    d584:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d588:	mov	r8, r0
    d58a:	mov	r7, r1
    d58c:	mov	r6, r2
    d58e:	mov.w	r9, #0
    d592:	ldrd	r5, r4, [r6, #4]
    d596:	subs	r5, #1
    d598:	bmi.n	d5be <_fwalk_sglue+0x3a>
    d59a:	ldrh	r3, [r4, #12]
    d59c:	cmp	r3, #1
    d59e:	add.w	r5, r5, #4294967295
    d5a2:	bls.n	d5b6 <_fwalk_sglue+0x32>
    d5a4:	ldrsh.w	r3, [r4, #14]
    d5a8:	adds	r3, #1
    d5aa:	mov	r1, r4
    d5ac:	beq.n	d5b6 <_fwalk_sglue+0x32>
    d5ae:	mov	r0, r8
    d5b0:	blx	r7
    d5b2:	orr.w	r9, r9, r0
    d5b6:	adds	r3, r5, #1
    d5b8:	add.w	r4, r4, #104	; 0x68
    d5bc:	bne.n	d59a <_fwalk_sglue+0x16>
    d5be:	ldr	r6, [r6, #0]
    d5c0:	cmp	r6, #0
    d5c2:	bne.n	d592 <_fwalk_sglue+0xe>
    d5c4:	mov	r0, r9
    d5c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d5ca:	nop

0000d5cc <snprintf>:
    d5cc:	push	{r2, r3}
    d5ce:	push	{r4, lr}
    d5d0:	ldr	r3, [pc, #124]	; (d650 <snprintf+0x84>)
    d5d2:	cmp	r1, #0
    d5d4:	ldr	r4, [r3, #0]
    d5d6:	sub	sp, #112	; 0x70
    d5d8:	blt.n	d646 <snprintf+0x7a>
    d5da:	mov.w	r3, #520	; 0x208
    d5de:	strh.w	r3, [sp, #20]
    d5e2:	str	r0, [sp, #8]
    d5e4:	str	r0, [sp, #24]
    d5e6:	add	r3, sp, #124	; 0x7c
    d5e8:	beq.n	d61c <snprintf+0x50>
    d5ea:	subs	r1, #1
    d5ec:	movw	r2, #65535	; 0xffff
    d5f0:	str	r1, [sp, #16]
    d5f2:	str	r1, [sp, #28]
    d5f4:	strh.w	r2, [sp, #22]
    d5f8:	add	r1, sp, #8
    d5fa:	ldr	r2, [sp, #120]	; 0x78
    d5fc:	str	r3, [sp, #4]
    d5fe:	mov	r0, r4
    d600:	bl	f870 <_svfprintf_r>
    d604:	adds	r2, r0, #1
    d606:	bge.n	d60c <snprintf+0x40>
    d608:	movs	r3, #139	; 0x8b
    d60a:	str	r3, [r4, #0]
    d60c:	ldr	r3, [sp, #8]
    d60e:	movs	r2, #0
    d610:	strb	r2, [r3, #0]
    d612:	add	sp, #112	; 0x70
    d614:	ldmia.w	sp!, {r4, lr}
    d618:	add	sp, #8
    d61a:	bx	lr
    d61c:	movw	r2, #65535	; 0xffff
    d620:	str	r1, [sp, #16]
    d622:	str	r1, [sp, #28]
    d624:	strh.w	r2, [sp, #22]
    d628:	add	r1, sp, #8
    d62a:	ldr	r2, [sp, #120]	; 0x78
    d62c:	str	r3, [sp, #4]
    d62e:	mov	r0, r4
    d630:	bl	f870 <_svfprintf_r>
    d634:	adds	r3, r0, #1
    d636:	bge.n	d63c <snprintf+0x70>
    d638:	movs	r3, #139	; 0x8b
    d63a:	str	r3, [r4, #0]
    d63c:	add	sp, #112	; 0x70
    d63e:	ldmia.w	sp!, {r4, lr}
    d642:	add	sp, #8
    d644:	bx	lr
    d646:	movs	r3, #139	; 0x8b
    d648:	str	r3, [r4, #0]
    d64a:	mov.w	r0, #4294967295
    d64e:	b.n	d63c <snprintf+0x70>
    d650:	.word	0x20008eec

0000d654 <sprintf>:
    d654:	push	{r1, r2, r3}
    d656:	push	{r4, lr}
    d658:	sub	sp, #116	; 0x74
    d65a:	mvn.w	r1, #2147483648	; 0x80000000
    d65e:	add	r3, sp, #124	; 0x7c
    d660:	strd	r0, r1, [sp, #24]
    d664:	str	r1, [sp, #16]
    d666:	ldr	r1, [pc, #36]	; (d68c <sprintf+0x38>)
    d668:	ldr.w	r2, [r3], #4
    d66c:	str	r0, [sp, #8]
    d66e:	ldr	r4, [pc, #32]	; (d690 <sprintf+0x3c>)
    d670:	ldr	r0, [r1, #0]
    d672:	str	r3, [sp, #4]
    d674:	add	r1, sp, #8
    d676:	str	r4, [sp, #20]
    d678:	bl	f870 <_svfprintf_r>
    d67c:	ldr	r3, [sp, #8]
    d67e:	movs	r2, #0
    d680:	strb	r2, [r3, #0]
    d682:	add	sp, #116	; 0x74
    d684:	ldmia.w	sp!, {r4, lr}
    d688:	add	sp, #12
    d68a:	bx	lr
    d68c:	.word	0x20008eec
    d690:	.word	0xffff0208

0000d694 <sscanf>:
    d694:	push	{r1, r2, r3}
    d696:	push	{r4, lr}
    d698:	sub	sp, #124	; 0x7c
    d69a:	add	r4, sp, #132	; 0x84
    d69c:	mov.w	r1, #516	; 0x204
    d6a0:	ldr.w	r2, [r4], #4
    d6a4:	str	r2, [sp, #4]
    d6a6:	strh.w	r1, [sp, #28]
    d6aa:	str	r0, [sp, #16]
    d6ac:	str	r0, [sp, #32]
    d6ae:	bl	e0c0 <strlen>
    d6b2:	str	r0, [sp, #20]
    d6b4:	str	r0, [sp, #36]	; 0x24
    d6b6:	ldr	r0, [pc, #44]	; (d6e4 <sscanf+0x50>)
    d6b8:	ldr	r1, [pc, #44]	; (d6e8 <sscanf+0x54>)
    d6ba:	str	r1, [sp, #48]	; 0x30
    d6bc:	movs	r3, #0
    d6be:	movw	ip, #65535	; 0xffff
    d6c2:	str	r3, [sp, #64]	; 0x40
    d6c4:	str	r3, [sp, #84]	; 0x54
    d6c6:	ldr	r2, [sp, #4]
    d6c8:	ldr	r0, [r0, #0]
    d6ca:	strh.w	ip, [sp, #30]
    d6ce:	mov	r3, r4
    d6d0:	add	r1, sp, #16
    d6d2:	str	r4, [sp, #12]
    d6d4:	bl	113b4 <__ssvfscanf_r>
    d6d8:	add	sp, #124	; 0x7c
    d6da:	ldmia.w	sp!, {r4, lr}
    d6de:	add	sp, #12
    d6e0:	bx	lr
    d6e2:	nop
    d6e4:	.word	0x20008eec
    d6e8:	.word	0x0000d711

0000d6ec <__sread>:
    d6ec:	push	{r4, lr}
    d6ee:	mov	r4, r1
    d6f0:	ldrsh.w	r1, [r1, #14]
    d6f4:	bl	db98 <_read_r>
    d6f8:	cmp	r0, #0
    d6fa:	blt.n	d704 <__sread+0x18>
    d6fc:	ldr	r3, [r4, #80]	; 0x50
    d6fe:	add	r3, r0
    d700:	str	r3, [r4, #80]	; 0x50
    d702:	pop	{r4, pc}
    d704:	ldrh	r3, [r4, #12]
    d706:	bic.w	r3, r3, #4096	; 0x1000
    d70a:	strh	r3, [r4, #12]
    d70c:	pop	{r4, pc}
    d70e:	nop

0000d710 <__seofread>:
    d710:	movs	r0, #0
    d712:	bx	lr

0000d714 <__swrite>:
    d714:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d718:	mov	r4, r1
    d71a:	ldrsh.w	r1, [r1, #12]
    d71e:	mov	r7, r3
    d720:	lsls	r3, r1, #23
    d722:	mov	r5, r0
    d724:	mov	r6, r2
    d726:	bmi.n	d740 <__swrite+0x2c>
    d728:	bic.w	r1, r1, #4096	; 0x1000
    d72c:	strh	r1, [r4, #12]
    d72e:	mov	r3, r7
    d730:	ldrsh.w	r1, [r4, #14]
    d734:	mov	r2, r6
    d736:	mov	r0, r5
    d738:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d73c:	b.w	dbe8 <_write_r>
    d740:	ldrsh.w	r1, [r4, #14]
    d744:	movs	r3, #2
    d746:	movs	r2, #0
    d748:	bl	db6c <_lseek_r>
    d74c:	ldrsh.w	r1, [r4, #12]
    d750:	b.n	d728 <__swrite+0x14>
    d752:	nop

0000d754 <__sseek>:
    d754:	push	{r4, lr}
    d756:	mov	r4, r1
    d758:	ldrsh.w	r1, [r1, #14]
    d75c:	bl	db6c <_lseek_r>
    d760:	ldrh	r3, [r4, #12]
    d762:	adds	r2, r0, #1
    d764:	itee	eq
    d766:	biceq.w	r3, r3, #4096	; 0x1000
    d76a:	orrne.w	r3, r3, #4096	; 0x1000
    d76e:	strne	r0, [r4, #80]	; 0x50
    d770:	strh	r3, [r4, #12]
    d772:	pop	{r4, pc}

0000d774 <__sclose>:
    d774:	ldrsh.w	r1, [r1, #14]
    d778:	b.w	db48 <_close_r>

0000d77c <_vdprintf_r>:
    d77c:	push	{r4, r5, r6, r7, lr}
    d77e:	sub.w	sp, sp, #532	; 0x214
    d782:	add	r7, sp, #16
    d784:	str	r3, [sp, #0]
    d786:	mov	r3, r2
    d788:	mov.w	r2, #512	; 0x200
    d78c:	mov	r6, r1
    d78e:	str	r2, [sp, #12]
    d790:	mov	r1, r7
    d792:	add	r2, sp, #12
    d794:	mov	r5, r0
    d796:	bl	d7e4 <_vasnprintf_r>
    d79a:	cbz	r0, d7c0 <_vdprintf_r+0x44>
    d79c:	mov	r4, r0
    d79e:	mov	r2, r0
    d7a0:	ldr	r3, [sp, #12]
    d7a2:	mov	r1, r6
    d7a4:	mov	r0, r5
    d7a6:	bl	dbe8 <_write_r>
    d7aa:	cmp	r4, r7
    d7ac:	str	r0, [sp, #12]
    d7ae:	beq.n	d7ba <_vdprintf_r+0x3e>
    d7b0:	mov	r0, r5
    d7b2:	mov	r1, r4
    d7b4:	bl	e2e4 <_free_r>
    d7b8:	ldr	r0, [sp, #12]
    d7ba:	add.w	sp, sp, #532	; 0x214
    d7be:	pop	{r4, r5, r6, r7, pc}
    d7c0:	mov.w	r0, #4294967295
    d7c4:	b.n	d7ba <_vdprintf_r+0x3e>
    d7c6:	nop

0000d7c8 <vdprintf>:
    d7c8:	push	{r4}
    d7ca:	ldr	r4, [pc, #20]	; (d7e0 <vdprintf+0x18>)
    d7cc:	mov	ip, r0
    d7ce:	mov	r3, r2
    d7d0:	ldr	r0, [r4, #0]
    d7d2:	ldr.w	r4, [sp], #4
    d7d6:	mov	r2, r1
    d7d8:	mov	r1, ip
    d7da:	b.w	d77c <_vdprintf_r>
    d7de:	nop
    d7e0:	.word	0x20008eec

0000d7e4 <_vasnprintf_r>:
    d7e4:	push	{r4, r5, lr}
    d7e6:	ldr	r4, [r2, #0]
    d7e8:	mov	r5, r2
    d7ea:	sub	sp, #108	; 0x6c
    d7ec:	mov	r2, r3
    d7ee:	cbz	r1, d7f4 <_vasnprintf_r+0x10>
    d7f0:	cmp	r4, #0
    d7f2:	bne.n	d828 <_vasnprintf_r+0x44>
    d7f4:	movs	r1, #0
    d7f6:	mov.w	r3, #648	; 0x288
    d7fa:	strh.w	r3, [sp, #12]
    d7fe:	str	r1, [sp, #0]
    d800:	str	r1, [sp, #16]
    d802:	movw	r3, #65535	; 0xffff
    d806:	str	r1, [sp, #8]
    d808:	str	r1, [sp, #20]
    d80a:	strh.w	r3, [sp, #14]
    d80e:	mov	r1, sp
    d810:	ldr	r3, [sp, #120]	; 0x78
    d812:	bl	f870 <_svfprintf_r>
    d816:	cmp	r0, #0
    d818:	blt.n	d842 <_vasnprintf_r+0x5e>
    d81a:	ldr	r3, [sp, #0]
    d81c:	str	r0, [r5, #0]
    d81e:	movs	r2, #0
    d820:	strb	r2, [r3, #0]
    d822:	ldr	r0, [sp, #16]
    d824:	add	sp, #108	; 0x6c
    d826:	pop	{r4, r5, pc}
    d828:	mov.w	r3, #1544	; 0x608
    d82c:	str	r1, [sp, #0]
    d82e:	str	r1, [sp, #16]
    d830:	strh.w	r3, [sp, #12]
    d834:	mov	r1, r4
    d836:	bge.n	d802 <_vasnprintf_r+0x1e>
    d838:	movs	r3, #139	; 0x8b
    d83a:	str	r3, [r0, #0]
    d83c:	movs	r0, #0
    d83e:	add	sp, #108	; 0x6c
    d840:	pop	{r4, r5, pc}
    d842:	movs	r0, #0
    d844:	b.n	d824 <_vasnprintf_r+0x40>
    d846:	nop

0000d848 <memcmp>:
    d848:	cmp	r2, #3
    d84a:	push	{r4, r5, r6, lr}
    d84c:	bls.n	d878 <memcmp+0x30>
    d84e:	orr.w	r3, r0, r1
    d852:	lsls	r3, r3, #30
    d854:	bne.n	d89c <memcmp+0x54>
    d856:	mov	r4, r0
    d858:	mov	r3, r1
    d85a:	mov	r1, r3
    d85c:	mov	r0, r4
    d85e:	ldr	r6, [r1, #0]
    d860:	ldr	r5, [r0, #0]
    d862:	cmp	r5, r6
    d864:	add.w	r4, r4, #4
    d868:	add.w	r3, r3, #4
    d86c:	bne.n	d89c <memcmp+0x54>
    d86e:	subs	r2, #4
    d870:	cmp	r2, #3
    d872:	mov	r0, r4
    d874:	mov	r1, r3
    d876:	bhi.n	d85a <memcmp+0x12>
    d878:	subs	r4, r2, #1
    d87a:	cbz	r2, d8a4 <memcmp+0x5c>
    d87c:	subs	r2, r0, #1
    d87e:	subs	r1, #1
    d880:	b.n	d886 <memcmp+0x3e>
    d882:	adds	r3, r0, r3
    d884:	beq.n	d8a0 <memcmp+0x58>
    d886:	ldrb.w	lr, [r2, #1]!
    d88a:	ldrb.w	ip, [r1, #1]!
    d88e:	cmp	lr, ip
    d890:	sub.w	r3, r4, r2
    d894:	beq.n	d882 <memcmp+0x3a>
    d896:	sub.w	r0, lr, ip
    d89a:	pop	{r4, r5, r6, pc}
    d89c:	subs	r4, r2, #1
    d89e:	b.n	d87c <memcmp+0x34>
    d8a0:	mov	r0, r3
    d8a2:	pop	{r4, r5, r6, pc}
    d8a4:	mov	r0, r2
    d8a6:	pop	{r4, r5, r6, pc}

0000d8a8 <memmove>:
    d8a8:	cmp	r0, r1
    d8aa:	bls.n	d8c8 <memmove+0x20>
    d8ac:	adds	r3, r1, r2
    d8ae:	cmp	r3, r0
    d8b0:	bls.n	d8c8 <memmove+0x20>
    d8b2:	add.w	ip, r0, r2
    d8b6:	cbz	r2, d8e8 <memmove+0x40>
    d8b8:	mov	r2, ip
    d8ba:	ldrb.w	ip, [r3, #-1]!
    d8be:	strb.w	ip, [r2, #-1]!
    d8c2:	cmp	r1, r3
    d8c4:	bne.n	d8ba <memmove+0x12>
    d8c6:	bx	lr
    d8c8:	cmp	r2, #15
    d8ca:	bhi.n	d8ea <memmove+0x42>
    d8cc:	mov	r3, r0
    d8ce:	add.w	ip, r2, #4294967295
    d8d2:	cbz	r2, d8e8 <memmove+0x40>
    d8d4:	add.w	ip, ip, #1
    d8d8:	subs	r3, #1
    d8da:	add	ip, r1
    d8dc:	ldrb.w	r2, [r1], #1
    d8e0:	strb.w	r2, [r3, #1]!
    d8e4:	cmp	r1, ip
    d8e6:	bne.n	d8dc <memmove+0x34>
    d8e8:	bx	lr
    d8ea:	orr.w	r3, r0, r1
    d8ee:	lsls	r3, r3, #30
    d8f0:	bne.n	d994 <memmove+0xec>
    d8f2:	sub.w	r3, r2, #16
    d8f6:	push	{r4, r5, r6, lr}
    d8f8:	add.w	ip, r1, #32
    d8fc:	bic.w	r5, r3, #15
    d900:	add.w	lr, r1, #16
    d904:	add.w	r4, r0, #16
    d908:	add	ip, r5
    d90a:	lsrs	r3, r3, #4
    d90c:	ldr.w	r5, [lr, #-16]
    d910:	str.w	r5, [r4, #-16]
    d914:	ldr.w	r5, [lr, #-12]
    d918:	str.w	r5, [r4, #-12]
    d91c:	ldr.w	r5, [lr, #-8]
    d920:	str.w	r5, [r4, #-8]
    d924:	ldr.w	r5, [lr, #-4]
    d928:	str.w	r5, [r4, #-4]
    d92c:	add.w	lr, lr, #16
    d930:	cmp	lr, ip
    d932:	add.w	r4, r4, #16
    d936:	bne.n	d90c <memmove+0x64>
    d938:	adds	r3, #1
    d93a:	tst.w	r2, #12
    d93e:	add.w	r1, r1, r3, lsl #4
    d942:	and.w	r4, r2, #15
    d946:	add.w	r3, r0, r3, lsl #4
    d94a:	beq.n	d99c <memmove+0xf4>
    d94c:	subs	r4, #4
    d94e:	bic.w	r6, r4, #3
    d952:	mov.w	ip, r4, lsr #2
    d956:	add	r6, r3
    d958:	subs	r4, r3, #4
    d95a:	mov	lr, r1
    d95c:	ldr.w	r5, [lr], #4
    d960:	str.w	r5, [r4, #4]!
    d964:	cmp	r4, r6
    d966:	bne.n	d95c <memmove+0xb4>
    d968:	add.w	r4, ip, #1
    d96c:	and.w	r2, r2, #3
    d970:	add.w	r3, r3, r4, lsl #2
    d974:	add.w	r1, r1, r4, lsl #2
    d978:	add.w	ip, r2, #4294967295
    d97c:	cbz	r2, d992 <memmove+0xea>
    d97e:	add.w	ip, ip, #1
    d982:	subs	r3, #1
    d984:	add	ip, r1
    d986:	ldrb.w	r2, [r1], #1
    d98a:	strb.w	r2, [r3, #1]!
    d98e:	cmp	r1, ip
    d990:	bne.n	d986 <memmove+0xde>
    d992:	pop	{r4, r5, r6, pc}
    d994:	add.w	ip, r2, #4294967295
    d998:	mov	r3, r0
    d99a:	b.n	d8d4 <memmove+0x2c>
    d99c:	mov	r2, r4
    d99e:	b.n	d978 <memmove+0xd0>

0000d9a0 <strlcat>:
    d9a0:	push	{r4, r5, r6, lr}
    d9a2:	cbz	r2, d9f8 <strlcat+0x58>
    d9a4:	mov	r3, r0
    d9a6:	adds	r5, r2, r0
    d9a8:	b.n	d9b0 <strlcat+0x10>
    d9aa:	cmp	r5, r3
    d9ac:	mov	ip, r3
    d9ae:	beq.n	d9bc <strlcat+0x1c>
    d9b0:	mov	ip, r3
    d9b2:	adds	r3, #1
    d9b4:	ldrb.w	r4, [ip]
    d9b8:	cmp	r4, #0
    d9ba:	bne.n	d9aa <strlcat+0xa>
    d9bc:	sub.w	r6, ip, r0
    d9c0:	subs	r2, r2, r6
    d9c2:	subs	r5, r2, #1
    d9c4:	cbz	r2, d9fa <strlcat+0x5a>
    d9c6:	ldrb	r4, [r1, #0]
    d9c8:	mov	r3, r1
    d9ca:	cbnz	r4, d9dc <strlcat+0x3c>
    d9cc:	b.n	d9ee <strlcat+0x4e>
    d9ce:	strb.w	r4, [r2], #1
    d9d2:	subs	r5, #1
    d9d4:	mov	ip, r2
    d9d6:	ldrb	r4, [r3, #1]
    d9d8:	adds	r3, #1
    d9da:	cbz	r4, d9ea <strlcat+0x4a>
    d9dc:	mov	r2, ip
    d9de:	cmp	r5, #0
    d9e0:	bne.n	d9ce <strlcat+0x2e>
    d9e2:	ldrb	r2, [r3, #1]
    d9e4:	adds	r3, #1
    d9e6:	cmp	r2, #0
    d9e8:	bne.n	d9d6 <strlcat+0x36>
    d9ea:	subs	r3, r3, r1
    d9ec:	add	r6, r3
    d9ee:	movs	r3, #0
    d9f0:	strb.w	r3, [ip]
    d9f4:	mov	r0, r6
    d9f6:	pop	{r4, r5, r6, pc}
    d9f8:	mov	r6, r2
    d9fa:	mov	r0, r1
    d9fc:	bl	e0c0 <strlen>
    da00:	add	r6, r0
    da02:	mov	r0, r6
    da04:	pop	{r4, r5, r6, pc}
    da06:	nop

0000da08 <strlcpy>:
    da08:	cbz	r2, da3c <strlcpy+0x34>
    da0a:	add.w	ip, r0, r2
    da0e:	push	{lr}
    da10:	mov	r3, r1
    da12:	add.w	lr, ip, #4294967295
    da16:	b.n	da22 <strlcpy+0x1a>
    da18:	ldrb.w	r2, [r3], #1
    da1c:	strb.w	r2, [r0], #1
    da20:	cbz	r2, da34 <strlcpy+0x2c>
    da22:	cmp	lr, r0
    da24:	bne.n	da18 <strlcpy+0x10>
    da26:	movs	r2, #0
    da28:	strb.w	r2, [ip, #-1]
    da2c:	ldrb.w	r2, [r3], #1
    da30:	cmp	r2, #0
    da32:	bne.n	da2c <strlcpy+0x24>
    da34:	subs	r1, r3, r1
    da36:	subs	r0, r1, #1
    da38:	ldr.w	pc, [sp], #4
    da3c:	mov	r3, r1
    da3e:	ldrb.w	r2, [r3], #1
    da42:	cmp	r2, #0
    da44:	bne.n	da3e <strlcpy+0x36>
    da46:	subs	r1, r3, r1
    da48:	subs	r0, r1, #1
    da4a:	bx	lr

0000da4c <strncmp>:
    da4c:	cmp	r2, #0
    da4e:	beq.n	dace <strncmp+0x82>
    da50:	orr.w	r3, r0, r1
    da54:	lsls	r3, r3, #30
    da56:	push	{r4, r5, lr}
    da58:	mov	ip, r0
    da5a:	bne.n	dabc <strncmp+0x70>
    da5c:	cmp	r2, #3
    da5e:	bls.n	dabc <strncmp+0x70>
    da60:	mov	r3, r1
    da62:	b.n	da76 <strncmp+0x2a>
    da64:	subs	r2, #4
    da66:	mov	ip, r0
    da68:	mov	r1, r3
    da6a:	beq.n	dab8 <strncmp+0x6c>
    da6c:	tst.w	lr, #2155905152	; 0x80808080
    da70:	bne.n	dab8 <strncmp+0x6c>
    da72:	cmp	r2, #3
    da74:	bls.n	dabc <strncmp+0x70>
    da76:	ldr	r4, [r0, #0]
    da78:	mov	r1, r3
    da7a:	ldr.w	r5, [r3], #4
    da7e:	sub.w	lr, r4, #16843009	; 0x1010101
    da82:	cmp	r4, r5
    da84:	mov	ip, r0
    da86:	bic.w	lr, lr, r4
    da8a:	add.w	r0, r0, #4
    da8e:	beq.n	da64 <strncmp+0x18>
    da90:	ldrb.w	r0, [ip]
    da94:	ldrb	r4, [r1, #0]
    da96:	cmp	r0, r4
    da98:	bne.n	dad2 <strncmp+0x86>
    da9a:	mov	lr, ip
    da9c:	cbz	r0, daba <strncmp+0x6e>
    da9e:	ldrb.w	r0, [lr, #1]!
    daa2:	ldrb.w	r4, [r1, #1]!
    daa6:	sub.w	r3, r2, lr
    daaa:	cmp	r0, r4
    daac:	add.w	r3, r3, #4294967295
    dab0:	bne.n	dad2 <strncmp+0x86>
    dab2:	adds.w	r3, ip, r3
    dab6:	bne.n	da9c <strncmp+0x50>
    dab8:	movs	r0, #0
    daba:	pop	{r4, r5, pc}
    dabc:	ldrb.w	r0, [ip]
    dac0:	ldrb	r4, [r1, #0]
    dac2:	cmp	r4, r0
    dac4:	bne.n	dad2 <strncmp+0x86>
    dac6:	cmp	r2, #1
    dac8:	beq.n	dab8 <strncmp+0x6c>
    daca:	mov	lr, ip
    dacc:	b.n	da9c <strncmp+0x50>
    dace:	mov	r0, r2
    dad0:	bx	lr
    dad2:	subs	r0, r0, r4
    dad4:	pop	{r4, r5, pc}
    dad6:	nop

0000dad8 <strncpy>:
    dad8:	orr.w	r3, r0, r1
    dadc:	lsls	r3, r3, #30
    dade:	push	{r4, r5, lr}
    dae0:	bne.n	dae6 <strncpy+0xe>
    dae2:	cmp	r2, #3
    dae4:	bhi.n	db06 <strncpy+0x2e>
    dae6:	mov	ip, r0
    dae8:	add.w	lr, r1, #4294967295
    daec:	b.n	dafe <strncpy+0x26>
    daee:	ldrb.w	r1, [lr, #1]!
    daf2:	strb.w	r1, [r3], #1
    daf6:	subs	r4, r2, #1
    daf8:	cbz	r1, db2c <strncpy+0x54>
    dafa:	mov	ip, r3
    dafc:	mov	r2, r4
    dafe:	mov	r3, ip
    db00:	cmp	r2, #0
    db02:	bne.n	daee <strncpy+0x16>
    db04:	pop	{r4, r5, pc}
    db06:	mov	r3, r1
    db08:	mov	ip, r0
    db0a:	mov	r1, r3
    db0c:	ldr.w	r5, [r3], #4
    db10:	sub.w	r4, r5, #16843009	; 0x1010101
    db14:	bic.w	r4, r4, r5
    db18:	tst.w	r4, #2155905152	; 0x80808080
    db1c:	bne.n	dae8 <strncpy+0x10>
    db1e:	subs	r2, #4
    db20:	cmp	r2, #3
    db22:	str.w	r5, [ip], #4
    db26:	mov	r1, r3
    db28:	bhi.n	db0a <strncpy+0x32>
    db2a:	b.n	dae8 <strncpy+0x10>
    db2c:	add	ip, r2
    db2e:	cmp	r4, #0
    db30:	beq.n	db04 <strncpy+0x2c>
    db32:	strb.w	r1, [r3], #1
    db36:	cmp	r3, ip
    db38:	bne.n	db32 <strncpy+0x5a>
    db3a:	pop	{r4, r5, pc}

0000db3c <__locale_mb_cur_max>:
    db3c:	ldr	r3, [pc, #4]	; (db44 <__locale_mb_cur_max+0x8>)
    db3e:	ldrb.w	r0, [r3, #296]	; 0x128
    db42:	bx	lr
    db44:	.word	0x20008964

0000db48 <_close_r>:
    db48:	push	{r3, r4, r5, lr}
    db4a:	ldr	r5, [pc, #28]	; (db68 <_close_r+0x20>)
    db4c:	movs	r2, #0
    db4e:	mov	r4, r0
    db50:	mov	r0, r1
    db52:	str	r2, [r5, #0]
    db54:	bl	ab94 <_close>
    db58:	adds	r3, r0, #1
    db5a:	beq.n	db5e <_close_r+0x16>
    db5c:	pop	{r3, r4, r5, pc}
    db5e:	ldr	r3, [r5, #0]
    db60:	cmp	r3, #0
    db62:	beq.n	db5c <_close_r+0x14>
    db64:	str	r3, [r4, #0]
    db66:	pop	{r3, r4, r5, pc}
    db68:	.word	0x20027970

0000db6c <_lseek_r>:
    db6c:	push	{r3, r4, r5, lr}
    db6e:	mov	r4, r1
    db70:	ldr	r5, [pc, #32]	; (db94 <_lseek_r+0x28>)
    db72:	mov	ip, r0
    db74:	mov	r1, r2
    db76:	mov	r0, r4
    db78:	mov	r2, r3
    db7a:	movs	r3, #0
    db7c:	str	r3, [r5, #0]
    db7e:	mov	r4, ip
    db80:	bl	aba8 <_lseek>
    db84:	adds	r3, r0, #1
    db86:	beq.n	db8a <_lseek_r+0x1e>
    db88:	pop	{r3, r4, r5, pc}
    db8a:	ldr	r3, [r5, #0]
    db8c:	cmp	r3, #0
    db8e:	beq.n	db88 <_lseek_r+0x1c>
    db90:	str	r3, [r4, #0]
    db92:	pop	{r3, r4, r5, pc}
    db94:	.word	0x20027970

0000db98 <_read_r>:
    db98:	push	{r3, r4, r5, lr}
    db9a:	mov	r4, r1
    db9c:	ldr	r5, [pc, #32]	; (dbc0 <_read_r+0x28>)
    db9e:	mov	ip, r0
    dba0:	mov	r1, r2
    dba2:	mov	r0, r4
    dba4:	mov	r2, r3
    dba6:	movs	r3, #0
    dba8:	str	r3, [r5, #0]
    dbaa:	mov	r4, ip
    dbac:	bl	ab90 <_read>
    dbb0:	adds	r3, r0, #1
    dbb2:	beq.n	dbb6 <_read_r+0x1e>
    dbb4:	pop	{r3, r4, r5, pc}
    dbb6:	ldr	r3, [r5, #0]
    dbb8:	cmp	r3, #0
    dbba:	beq.n	dbb4 <_read_r+0x1c>
    dbbc:	str	r3, [r4, #0]
    dbbe:	pop	{r3, r4, r5, pc}
    dbc0:	.word	0x20027970

0000dbc4 <_sbrk_r>:
    dbc4:	push	{r3, r4, r5, lr}
    dbc6:	ldr	r5, [pc, #28]	; (dbe4 <_sbrk_r+0x20>)
    dbc8:	movs	r2, #0
    dbca:	mov	r4, r0
    dbcc:	mov	r0, r1
    dbce:	str	r2, [r5, #0]
    dbd0:	bl	ab64 <_sbrk>
    dbd4:	adds	r3, r0, #1
    dbd6:	beq.n	dbda <_sbrk_r+0x16>
    dbd8:	pop	{r3, r4, r5, pc}
    dbda:	ldr	r3, [r5, #0]
    dbdc:	cmp	r3, #0
    dbde:	beq.n	dbd8 <_sbrk_r+0x14>
    dbe0:	str	r3, [r4, #0]
    dbe2:	pop	{r3, r4, r5, pc}
    dbe4:	.word	0x20027970

0000dbe8 <_write_r>:
    dbe8:	push	{r3, r4, r5, lr}
    dbea:	mov	r4, r1
    dbec:	ldr	r5, [pc, #32]	; (dc10 <_write_r+0x28>)
    dbee:	mov	ip, r0
    dbf0:	mov	r1, r2
    dbf2:	mov	r0, r4
    dbf4:	mov	r2, r3
    dbf6:	movs	r3, #0
    dbf8:	str	r3, [r5, #0]
    dbfa:	mov	r4, ip
    dbfc:	bl	b58c <_write>
    dc00:	adds	r3, r0, #1
    dc02:	beq.n	dc06 <_write_r+0x1e>
    dc04:	pop	{r3, r4, r5, pc}
    dc06:	ldr	r3, [r5, #0]
    dc08:	cmp	r3, #0
    dc0a:	beq.n	dc04 <_write_r+0x1c>
    dc0c:	str	r3, [r4, #0]
    dc0e:	pop	{r3, r4, r5, pc}
    dc10:	.word	0x20027970

0000dc14 <__errno>:
    dc14:	ldr	r3, [pc, #4]	; (dc1c <__errno+0x8>)
    dc16:	ldr	r0, [r3, #0]
    dc18:	bx	lr
    dc1a:	nop
    dc1c:	.word	0x20008eec

0000dc20 <__libc_init_array>:
    dc20:	push	{r4, r5, r6, lr}
    dc22:	ldr	r6, [pc, #52]	; (dc58 <__libc_init_array+0x38>)
    dc24:	ldr	r5, [pc, #52]	; (dc5c <__libc_init_array+0x3c>)
    dc26:	subs	r6, r6, r5
    dc28:	asrs	r6, r6, #2
    dc2a:	beq.n	dc3a <__libc_init_array+0x1a>
    dc2c:	movs	r4, #0
    dc2e:	ldr.w	r3, [r5], #4
    dc32:	adds	r4, #1
    dc34:	blx	r3
    dc36:	cmp	r6, r4
    dc38:	bne.n	dc2e <__libc_init_array+0xe>
    dc3a:	ldr	r6, [pc, #36]	; (dc60 <__libc_init_array+0x40>)
    dc3c:	ldr	r5, [pc, #36]	; (dc64 <__libc_init_array+0x44>)
    dc3e:	subs	r6, r6, r5
    dc40:	bl	16520 <___init_veneer>
    dc44:	asrs	r6, r6, #2
    dc46:	beq.n	dc56 <__libc_init_array+0x36>
    dc48:	movs	r4, #0
    dc4a:	ldr.w	r3, [r5], #4
    dc4e:	adds	r4, #1
    dc50:	blx	r3
    dc52:	cmp	r6, r4
    dc54:	bne.n	dc4a <__libc_init_array+0x2a>
    dc56:	pop	{r4, r5, r6, pc}
    dc58:	.word	0x60002360
    dc5c:	.word	0x60002360
    dc60:	.word	0x60002370
    dc64:	.word	0x60002360

0000dc68 <__retarget_lock_init_recursive>:
    dc68:	bx	lr
    dc6a:	nop

0000dc6c <__retarget_lock_close_recursive>:
    dc6c:	bx	lr
    dc6e:	nop

0000dc70 <__retarget_lock_acquire_recursive>:
    dc70:	bx	lr
    dc72:	nop

0000dc74 <__retarget_lock_release_recursive>:
    dc74:	bx	lr
    dc76:	nop
	...
    dc80:	sub.w	r0, r2, r3
    dc84:	bx	lr
    dc86:	nop

0000dc88 <strcmp>:
    dc88:	ldrb	r2, [r0, #0]
    dc8a:	ldrb	r3, [r1, #0]
    dc8c:	cmp	r2, #1
    dc8e:	it	cs
    dc90:	cmpcs	r2, r3
    dc92:	bne.n	dc80 <__retarget_lock_release_recursive+0xc>
    dc94:	strd	r4, r5, [sp, #-16]!
    dc98:	orr.w	r4, r0, r1
    dc9c:	strd	r6, r7, [sp, #8]
    dca0:	mvn.w	ip, #0
    dca4:	mov.w	r2, r4, lsl #29
    dca8:	cbz	r2, dcf0 <strcmp+0x68>
    dcaa:	eor.w	r4, r0, r1
    dcae:	tst.w	r4, #7
    dcb2:	bne.n	dd8a <strcmp+0x102>
    dcb4:	and.w	r4, r0, #7
    dcb8:	bic.w	r0, r0, #7
    dcbc:	and.w	r5, r4, #3
    dcc0:	bic.w	r1, r1, #7
    dcc4:	mov.w	r5, r5, lsl #3
    dcc8:	ldrd	r2, r3, [r0], #16
    dccc:	tst.w	r4, #4
    dcd0:	ldrd	r6, r7, [r1], #16
    dcd4:	lsl.w	r4, ip, r5
    dcd8:	orn	r2, r2, r4
    dcdc:	orn	r6, r6, r4
    dce0:	beq.n	dcf8 <strcmp+0x70>
    dce2:	orn	r3, r3, r4
    dce6:	mov	r2, ip
    dce8:	orn	r7, r7, r4
    dcec:	mov	r6, ip
    dcee:	b.n	dcf8 <strcmp+0x70>
    dcf0:	ldrd	r2, r3, [r0], #16
    dcf4:	ldrd	r6, r7, [r1], #16
    dcf8:	uadd8	r5, r2, ip
    dcfc:	eor.w	r4, r2, r6
    dd00:	sel	r4, r4, ip
    dd04:	cbnz	r4, dd62 <strcmp+0xda>
    dd06:	uadd8	r5, r3, ip
    dd0a:	eor.w	r5, r3, r7
    dd0e:	sel	r5, r5, ip
    dd12:	cbnz	r5, dd3a <strcmp+0xb2>
    dd14:	ldrd	r2, r3, [r0, #-8]
    dd18:	ldrd	r6, r7, [r1, #-8]
    dd1c:	uadd8	r5, r2, ip
    dd20:	eor.w	r4, r2, r6
    dd24:	sel	r4, r4, ip
    dd28:	uadd8	r5, r3, ip
    dd2c:	eor.w	r5, r3, r7
    dd30:	sel	r5, r5, ip
    dd34:	orrs	r5, r4
    dd36:	beq.n	dcf0 <strcmp+0x68>
    dd38:	cbnz	r4, dd62 <strcmp+0xda>
    dd3a:	rev	r5, r5
    dd3c:	clz	r4, r5
    dd40:	bic.w	r4, r4, #7
    dd44:	lsr.w	r1, r7, r4
    dd48:	ldrd	r6, r7, [sp, #8]
    dd4c:	lsr.w	r3, r3, r4
    dd50:	and.w	r0, r3, #255	; 0xff
    dd54:	and.w	r1, r1, #255	; 0xff
    dd58:	ldrd	r4, r5, [sp], #16
    dd5c:	sub.w	r0, r0, r1
    dd60:	bx	lr
    dd62:	rev	r4, r4
    dd64:	clz	r4, r4
    dd68:	bic.w	r4, r4, #7
    dd6c:	lsr.w	r1, r6, r4
    dd70:	ldrd	r6, r7, [sp, #8]
    dd74:	lsr.w	r2, r2, r4
    dd78:	and.w	r0, r2, #255	; 0xff
    dd7c:	and.w	r1, r1, #255	; 0xff
    dd80:	ldrd	r4, r5, [sp], #16
    dd84:	sub.w	r0, r0, r1
    dd88:	bx	lr
    dd8a:	tst.w	r4, #3
    dd8e:	bne.n	de0a <strcmp+0x182>
    dd90:	ands.w	r4, r0, #3
    dd94:	bne.n	dde8 <strcmp+0x160>
    dd96:	ldr.w	r2, [r0], #8
    dd9a:	ldr.w	r3, [r1], #8
    dd9e:	uadd8	r5, r2, ip
    dda2:	eor.w	r5, r2, r3
    dda6:	sel	r5, r5, ip
    ddaa:	cbnz	r5, ddc4 <strcmp+0x13c>
    ddac:	ldr.w	r2, [r0, #-4]
    ddb0:	ldr.w	r3, [r1, #-4]
    ddb4:	uadd8	r5, r2, ip
    ddb8:	eor.w	r5, r2, r3
    ddbc:	sel	r5, r5, ip
    ddc0:	cmp	r5, #0
    ddc2:	beq.n	dd96 <strcmp+0x10e>
    ddc4:	rev	r5, r5
    ddc6:	clz	r4, r5
    ddca:	bic.w	r4, r4, #7
    ddce:	lsr.w	r1, r3, r4
    ddd2:	lsr.w	r2, r2, r4
    ddd6:	and.w	r0, r2, #255	; 0xff
    ddda:	and.w	r1, r1, #255	; 0xff
    ddde:	ldrd	r4, r5, [sp], #16
    dde2:	sub.w	r0, r0, r1
    dde6:	bx	lr
    dde8:	mov.w	r4, r4, lsl #3
    ddec:	bic.w	r0, r0, #3
    ddf0:	ldr.w	r2, [r0], #8
    ddf4:	bic.w	r1, r1, #3
    ddf8:	ldr.w	r3, [r1], #8
    ddfc:	lsl.w	r4, ip, r4
    de00:	orn	r2, r2, r4
    de04:	orn	r3, r3, r4
    de08:	b.n	dd9e <strcmp+0x116>
    de0a:	ands.w	r4, r0, #3
    de0e:	beq.n	de46 <strcmp+0x1be>
    de10:	sub.w	r1, r1, r4
    de14:	bic.w	r0, r0, #3
    de18:	lsls	r4, r4, #31
    de1a:	ldr.w	r2, [r0], #4
    de1e:	beq.n	de2e <strcmp+0x1a6>
    de20:	bcs.n	de42 <strcmp+0x1ba>
    de22:	ldrb	r3, [r1, #2]
    de24:	uxtb.w	r4, r2, ror #16
    de28:	subs	r4, r4, r3
    de2a:	bne.n	de3a <strcmp+0x1b2>
    de2c:	cbz	r3, de3a <strcmp+0x1b2>
    de2e:	ldrb	r3, [r1, #3]
    de30:	uxtb.w	r4, r2, ror #24
    de34:	subs	r4, r4, r3
    de36:	bne.n	de3a <strcmp+0x1b2>
    de38:	cbnz	r3, de42 <strcmp+0x1ba>
    de3a:	mov	r0, r4
    de3c:	ldr.w	r4, [sp], #16
    de40:	bx	lr
    de42:	add.w	r1, r1, #4
    de46:	ldr.w	r2, [r0], #4
    de4a:	lsls	r4, r1, #31
    de4c:	bic.w	r1, r1, #3
    de50:	ldr.w	r3, [r1], #4
    de54:	bhi.n	dee8 <strcmp+0x260>
    de56:	bcs.n	dea2 <strcmp+0x21a>
    de58:	bic.w	r4, r2, #4278190080	; 0xff000000
    de5c:	uadd8	r5, r2, ip
    de60:	eors.w	r5, r4, r3, lsr #8
    de64:	sel	r5, r5, ip
    de68:	bne.n	de80 <strcmp+0x1f8>
    de6a:	cbnz	r5, de86 <strcmp+0x1fe>
    de6c:	ldr.w	r3, [r1], #4
    de70:	eor.w	r4, r4, r2
    de74:	cmp.w	r4, r3, lsl #24
    de78:	bne.n	de98 <strcmp+0x210>
    de7a:	ldr.w	r2, [r0], #4
    de7e:	b.n	de58 <strcmp+0x1d0>
    de80:	mov.w	r3, r3, lsr #8
    de84:	b.n	df32 <strcmp+0x2aa>
    de86:	bics.w	r5, r5, #4278190080	; 0xff000000
    de8a:	bne.n	df28 <strcmp+0x2a0>
    de8c:	ldrb	r0, [r1, #0]
    de8e:	ldrd	r4, r5, [sp], #16
    de92:	rsb	r0, r0, #0
    de96:	bx	lr
    de98:	mov.w	r2, r2, lsr #24
    de9c:	and.w	r3, r3, #255	; 0xff
    dea0:	b.n	df32 <strcmp+0x2aa>
    dea2:	and.w	r4, r2, ip, lsr #16
    dea6:	uadd8	r5, r2, ip
    deaa:	eors.w	r5, r4, r3, lsr #16
    deae:	sel	r5, r5, ip
    deb2:	bne.n	deca <strcmp+0x242>
    deb4:	cbnz	r5, ded0 <strcmp+0x248>
    deb6:	ldr.w	r3, [r1], #4
    deba:	eor.w	r4, r4, r2
    debe:	cmp.w	r4, r3, lsl #16
    dec2:	bne.n	dede <strcmp+0x256>
    dec4:	ldr.w	r2, [r0], #4
    dec8:	b.n	dea2 <strcmp+0x21a>
    deca:	mov.w	r3, r3, lsr #16
    dece:	b.n	df32 <strcmp+0x2aa>
    ded0:	ands.w	r5, r5, ip, lsr #16
    ded4:	bne.n	df28 <strcmp+0x2a0>
    ded6:	ldrh	r3, [r1, #0]
    ded8:	mov.w	r2, r2, lsr #16
    dedc:	b.n	df32 <strcmp+0x2aa>
    dede:	mov.w	r2, r2, lsr #16
    dee2:	and.w	r3, r3, ip, lsr #16
    dee6:	b.n	df32 <strcmp+0x2aa>
    dee8:	and.w	r4, r2, #255	; 0xff
    deec:	uadd8	r5, r2, ip
    def0:	eors.w	r5, r4, r3, lsr #24
    def4:	sel	r5, r5, ip
    def8:	bne.n	df10 <strcmp+0x288>
    defa:	cbnz	r5, df16 <strcmp+0x28e>
    defc:	ldr.w	r3, [r1], #4
    df00:	eor.w	r4, r4, r2
    df04:	cmp.w	r4, r3, lsl #8
    df08:	bne.n	df1e <strcmp+0x296>
    df0a:	ldr.w	r2, [r0], #4
    df0e:	b.n	dee8 <strcmp+0x260>
    df10:	mov.w	r3, r3, lsr #24
    df14:	b.n	df32 <strcmp+0x2aa>
    df16:	tst.w	r5, #255	; 0xff
    df1a:	bne.n	df28 <strcmp+0x2a0>
    df1c:	ldr	r3, [r1, #0]
    df1e:	mov.w	r2, r2, lsr #8
    df22:	bic.w	r3, r3, #4278190080	; 0xff000000
    df26:	b.n	df32 <strcmp+0x2aa>
    df28:	mov.w	r0, #0
    df2c:	ldrd	r4, r5, [sp], #16
    df30:	bx	lr
    df32:	rev	r2, r2
    df34:	rev	r3, r3
    df36:	uadd8	r4, r2, ip
    df3a:	eor.w	r4, r2, r3
    df3e:	sel	r5, r4, ip
    df42:	clz	r4, r5
    df46:	lsl.w	r2, r2, r4
    df4a:	lsl.w	r3, r3, r4
    df4e:	mov.w	r0, r2, lsr #24
    df52:	ldrd	r4, r5, [sp], #16
    df56:	sub.w	r0, r0, r3, lsr #24
    df5a:	bx	lr

0000df5c <strcpy>:
    df5c:	eor.w	r2, r0, r1
    df60:	mov	ip, r0
    df62:	tst.w	r2, #3
    df66:	bne.n	e008 <strcpy+0xac>
    df68:	tst.w	r1, #3
    df6c:	bne.n	dfd4 <strcpy+0x78>
    df6e:	str.w	r4, [sp, #-4]!
    df72:	tst.w	r1, #4
    df76:	ldr.w	r3, [r1], #4
    df7a:	beq.n	df94 <strcpy+0x38>
    df7c:	sub.w	r2, r3, #16843009	; 0x1010101
    df80:	bics	r2, r3
    df82:	tst.w	r2, #2155905152	; 0x80808080
    df86:	itt	eq
    df88:	streq.w	r3, [ip], #4
    df8c:	ldreq.w	r3, [r1], #4
    df90:	bne.n	dfc0 <strcpy+0x64>
    df92:	nop
    df94:	ldr.w	r4, [r1], #4
    df98:	sub.w	r2, r3, #16843009	; 0x1010101
    df9c:	bics	r2, r3
    df9e:	tst.w	r2, #2155905152	; 0x80808080
    dfa2:	sub.w	r2, r4, #16843009	; 0x1010101
    dfa6:	bne.n	dfc0 <strcpy+0x64>
    dfa8:	str.w	r3, [ip], #4
    dfac:	bics	r2, r4
    dfae:	tst.w	r2, #2155905152	; 0x80808080
    dfb2:	itt	eq
    dfb4:	ldreq.w	r3, [r1], #4
    dfb8:	streq.w	r4, [ip], #4
    dfbc:	beq.n	df94 <strcpy+0x38>
    dfbe:	mov	r3, r4
    dfc0:	strb.w	r3, [ip], #1
    dfc4:	tst.w	r3, #255	; 0xff
    dfc8:	mov.w	r3, r3, ror #8
    dfcc:	bne.n	dfc0 <strcpy+0x64>
    dfce:	ldr.w	r4, [sp], #4
    dfd2:	bx	lr
    dfd4:	tst.w	r1, #1
    dfd8:	beq.n	dfe8 <strcpy+0x8c>
    dfda:	ldrb.w	r2, [r1], #1
    dfde:	strb.w	r2, [ip], #1
    dfe2:	cmp	r2, #0
    dfe4:	it	eq
    dfe6:	bxeq	lr
    dfe8:	tst.w	r1, #2
    dfec:	beq.n	df6e <strcpy+0x12>
    dfee:	ldrh.w	r2, [r1], #2
    dff2:	tst.w	r2, #255	; 0xff
    dff6:	itet	ne
    dff8:	strhne.w	r2, [ip], #2
    dffc:	strbeq.w	r2, [ip]
    e000:	tstne.w	r2, #65280	; 0xff00
    e004:	bne.n	df6e <strcpy+0x12>
    e006:	bx	lr
    e008:	ldrb.w	r2, [r1], #1
    e00c:	strb.w	r2, [ip], #1
    e010:	cmp	r2, #0
    e012:	bne.n	e008 <strcpy+0xac>
    e014:	bx	lr
    e016:	nop
	...

0000e020 <memchr>:
    e020:	and.w	r1, r1, #255	; 0xff
    e024:	cmp	r2, #16
    e026:	blt.n	e080 <memchr+0x60>
    e028:	tst.w	r0, #7
    e02c:	beq.n	e040 <memchr+0x20>
    e02e:	ldrb.w	r3, [r0], #1
    e032:	subs	r2, #1
    e034:	cmp	r3, r1
    e036:	beq.n	e094 <memchr+0x74>
    e038:	tst.w	r0, #7
    e03c:	cbz	r2, e090 <memchr+0x70>
    e03e:	bne.n	e02e <memchr+0xe>
    e040:	push	{r4, r5, r6, r7}
    e042:	orr.w	r1, r1, r1, lsl #8
    e046:	orr.w	r1, r1, r1, lsl #16
    e04a:	bic.w	r4, r2, #7
    e04e:	mvns.w	r7, #0
    e052:	movs	r3, #0
    e054:	ldrd	r5, r6, [r0], #8
    e058:	subs	r4, #8
    e05a:	eor.w	r5, r5, r1
    e05e:	eor.w	r6, r6, r1
    e062:	uadd8	r5, r5, r7
    e066:	sel	r5, r3, r7
    e06a:	uadd8	r6, r6, r7
    e06e:	sel	r6, r5, r7
    e072:	cbnz	r6, e098 <memchr+0x78>
    e074:	bne.n	e054 <memchr+0x34>
    e076:	pop	{r4, r5, r6, r7}
    e078:	and.w	r1, r1, #255	; 0xff
    e07c:	and.w	r2, r2, #7
    e080:	cbz	r2, e090 <memchr+0x70>
    e082:	ldrb.w	r3, [r0], #1
    e086:	subs	r2, #1
    e088:	eor.w	r3, r3, r1
    e08c:	cbz	r3, e094 <memchr+0x74>
    e08e:	bne.n	e082 <memchr+0x62>
    e090:	movs	r0, #0
    e092:	bx	lr
    e094:	subs	r0, #1
    e096:	bx	lr
    e098:	cmp	r5, #0
    e09a:	itte	eq
    e09c:	moveq	r5, r6
    e09e:	subeq	r0, #3
    e0a0:	subne	r0, #7
    e0a2:	tst.w	r5, #1
    e0a6:	bne.n	e0b8 <memchr+0x98>
    e0a8:	adds	r0, #1
    e0aa:	tst.w	r5, #256	; 0x100
    e0ae:	ittt	eq
    e0b0:	addeq	r0, #1
    e0b2:	tsteq.w	r5, #98304	; 0x18000
    e0b6:	addeq	r0, #1
    e0b8:	pop	{r4, r5, r6, r7}
    e0ba:	subs	r0, #1
    e0bc:	bx	lr
    e0be:	nop

0000e0c0 <strlen>:
    e0c0:	pld	[r0]
    e0c4:	strd	r4, r5, [sp, #-8]!
    e0c8:	bic.w	r1, r0, #7
    e0cc:	mvn.w	ip, #0
    e0d0:	ands.w	r4, r0, #7
    e0d4:	pld	[r1, #32]
    e0d8:	bne.w	e16e <strlen+0xae>
    e0dc:	mov.w	r4, #0
    e0e0:	mvn.w	r0, #7
    e0e4:	ldrd	r2, r3, [r1]
    e0e8:	pld	[r1, #64]	; 0x40
    e0ec:	add.w	r0, r0, #8
    e0f0:	uadd8	r2, r2, ip
    e0f4:	sel	r2, r4, ip
    e0f8:	uadd8	r3, r3, ip
    e0fc:	sel	r3, r2, ip
    e100:	cbnz	r3, e156 <strlen+0x96>
    e102:	ldrd	r2, r3, [r1, #8]
    e106:	uadd8	r2, r2, ip
    e10a:	add.w	r0, r0, #8
    e10e:	sel	r2, r4, ip
    e112:	uadd8	r3, r3, ip
    e116:	sel	r3, r2, ip
    e11a:	cbnz	r3, e156 <strlen+0x96>
    e11c:	ldrd	r2, r3, [r1, #16]
    e120:	uadd8	r2, r2, ip
    e124:	add.w	r0, r0, #8
    e128:	sel	r2, r4, ip
    e12c:	uadd8	r3, r3, ip
    e130:	sel	r3, r2, ip
    e134:	cbnz	r3, e156 <strlen+0x96>
    e136:	ldrd	r2, r3, [r1, #24]
    e13a:	add.w	r1, r1, #32
    e13e:	uadd8	r2, r2, ip
    e142:	add.w	r0, r0, #8
    e146:	sel	r2, r4, ip
    e14a:	uadd8	r3, r3, ip
    e14e:	sel	r3, r2, ip
    e152:	cmp	r3, #0
    e154:	beq.n	e0e4 <strlen+0x24>
    e156:	cmp	r2, #0
    e158:	itt	eq
    e15a:	addeq	r0, #4
    e15c:	moveq	r2, r3
    e15e:	rev	r2, r2
    e160:	clz	r2, r2
    e164:	ldrd	r4, r5, [sp], #8
    e168:	add.w	r0, r0, r2, lsr #3
    e16c:	bx	lr
    e16e:	ldrd	r2, r3, [r1]
    e172:	and.w	r5, r4, #3
    e176:	rsb	r0, r4, #0
    e17a:	mov.w	r5, r5, lsl #3
    e17e:	tst.w	r4, #4
    e182:	pld	[r1, #64]	; 0x40
    e186:	lsl.w	r5, ip, r5
    e18a:	orn	r2, r2, r5
    e18e:	itt	ne
    e190:	ornne	r3, r3, r5
    e194:	movne	r2, ip
    e196:	mov.w	r4, #0
    e19a:	b.n	e0f0 <strlen+0x30>
    e19c:	movs	r0, r0
	...

0000e1a0 <nan>:
    e1a0:	vldr	d0, [pc, #4]	; e1a8 <nan+0x8>
    e1a4:	bx	lr
    e1a6:	nop
    e1a8:	.word	0x00000000
    e1ac:	.word	0x7ff80000

0000e1b0 <nanf>:
    e1b0:	vldr	s0, [pc, #4]	; e1b8 <nanf+0x8>
    e1b4:	bx	lr
    e1b6:	nop
    e1b8:	.word	0x7fc00000

0000e1bc <__register_exitproc>:
    e1bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1c0:	ldr.w	sl, [pc, #124]	; e240 <__register_exitproc+0x84>
    e1c4:	mov	r6, r0
    e1c6:	ldr.w	r0, [sl]
    e1ca:	mov	r8, r3
    e1cc:	mov	r7, r1
    e1ce:	mov	r9, r2
    e1d0:	bl	dc70 <__retarget_lock_acquire_recursive>
    e1d4:	ldr	r3, [pc, #96]	; (e238 <__register_exitproc+0x7c>)
    e1d6:	ldr	r4, [r3, #0]
    e1d8:	cbz	r4, e224 <__register_exitproc+0x68>
    e1da:	ldr	r5, [r4, #4]
    e1dc:	cmp	r5, #31
    e1de:	bgt.n	e22a <__register_exitproc+0x6e>
    e1e0:	cbnz	r6, e1fa <__register_exitproc+0x3e>
    e1e2:	adds	r3, r5, #1
    e1e4:	adds	r5, #2
    e1e6:	ldr.w	r0, [sl]
    e1ea:	str	r3, [r4, #4]
    e1ec:	str.w	r7, [r4, r5, lsl #2]
    e1f0:	bl	dc74 <__retarget_lock_release_recursive>
    e1f4:	movs	r0, #0
    e1f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e1fa:	add.w	r1, r4, r5, lsl #2
    e1fe:	movs	r3, #1
    e200:	str.w	r9, [r1, #136]	; 0x88
    e204:	ldr.w	r2, [r4, #392]	; 0x188
    e208:	lsls	r3, r5
    e20a:	orrs	r2, r3
    e20c:	cmp	r6, #2
    e20e:	str.w	r2, [r4, #392]	; 0x188
    e212:	str.w	r8, [r1, #264]	; 0x108
    e216:	bne.n	e1e2 <__register_exitproc+0x26>
    e218:	ldr.w	r2, [r4, #396]	; 0x18c
    e21c:	orrs	r2, r3
    e21e:	str.w	r2, [r4, #396]	; 0x18c
    e222:	b.n	e1e2 <__register_exitproc+0x26>
    e224:	ldr	r4, [pc, #20]	; (e23c <__register_exitproc+0x80>)
    e226:	str	r4, [r3, #0]
    e228:	b.n	e1da <__register_exitproc+0x1e>
    e22a:	ldr.w	r0, [sl]
    e22e:	bl	dc74 <__retarget_lock_release_recursive>
    e232:	mov.w	r0, #4294967295
    e236:	b.n	e1f6 <__register_exitproc+0x3a>
    e238:	.word	0x20027454
    e23c:	.word	0x20027458
    e240:	.word	0x20008958

0000e244 <_malloc_trim_r>:
    e244:	push	{r3, r4, r5, r6, r7, lr}
    e246:	ldr	r7, [pc, #144]	; (e2d8 <_malloc_trim_r+0x94>)
    e248:	mov	r4, r1
    e24a:	mov	r6, r0
    e24c:	bl	c020 <__malloc_lock>
    e250:	ldr	r3, [r7, #8]
    e252:	ldr	r5, [r3, #4]
    e254:	rsb	r1, r4, #4064	; 0xfe0
    e258:	adds	r1, #15
    e25a:	bic.w	r5, r5, #3
    e25e:	adds	r3, r1, r5
    e260:	bic.w	r3, r3, #4080	; 0xff0
    e264:	bic.w	r3, r3, #15
    e268:	sub.w	r4, r3, #4096	; 0x1000
    e26c:	cmp.w	r4, #4096	; 0x1000
    e270:	blt.n	e282 <_malloc_trim_r+0x3e>
    e272:	movs	r1, #0
    e274:	mov	r0, r6
    e276:	bl	dbc4 <_sbrk_r>
    e27a:	ldr	r3, [r7, #8]
    e27c:	add	r3, r5
    e27e:	cmp	r0, r3
    e280:	beq.n	e28c <_malloc_trim_r+0x48>
    e282:	mov	r0, r6
    e284:	bl	c02c <__malloc_unlock>
    e288:	movs	r0, #0
    e28a:	pop	{r3, r4, r5, r6, r7, pc}
    e28c:	negs	r1, r4
    e28e:	mov	r0, r6
    e290:	bl	dbc4 <_sbrk_r>
    e294:	adds	r0, #1
    e296:	beq.n	e2b4 <_malloc_trim_r+0x70>
    e298:	ldr	r2, [pc, #64]	; (e2dc <_malloc_trim_r+0x98>)
    e29a:	ldr	r3, [r7, #8]
    e29c:	subs	r5, r5, r4
    e29e:	orr.w	r5, r5, #1
    e2a2:	str	r5, [r3, #4]
    e2a4:	ldr	r3, [r2, #0]
    e2a6:	mov	r0, r6
    e2a8:	subs	r3, r3, r4
    e2aa:	str	r3, [r2, #0]
    e2ac:	bl	c02c <__malloc_unlock>
    e2b0:	movs	r0, #1
    e2b2:	pop	{r3, r4, r5, r6, r7, pc}
    e2b4:	movs	r1, #0
    e2b6:	mov	r0, r6
    e2b8:	bl	dbc4 <_sbrk_r>
    e2bc:	ldr	r2, [r7, #8]
    e2be:	subs	r3, r0, r2
    e2c0:	cmp	r3, #15
    e2c2:	ble.n	e282 <_malloc_trim_r+0x3e>
    e2c4:	orr.w	r3, r3, #1
    e2c8:	str	r3, [r2, #4]
    e2ca:	ldr	r3, [pc, #20]	; (e2e0 <_malloc_trim_r+0x9c>)
    e2cc:	ldr	r1, [pc, #12]	; (e2dc <_malloc_trim_r+0x98>)
    e2ce:	ldr	r3, [r3, #0]
    e2d0:	subs	r0, r0, r3
    e2d2:	str	r0, [r1, #0]
    e2d4:	b.n	e282 <_malloc_trim_r+0x3e>
    e2d6:	nop
    e2d8:	.word	0x20008ad0
    e2dc:	.word	0x200275f4
    e2e0:	.word	0x20008ed8

0000e2e4 <_free_r>:
    e2e4:	cmp	r1, #0
    e2e6:	beq.n	e3ac <_free_r+0xc8>
    e2e8:	push	{r3, r4, r5, r6, r7, lr}
    e2ea:	mov	r4, r1
    e2ec:	mov	r6, r0
    e2ee:	bl	c020 <__malloc_lock>
    e2f2:	ldr.w	r2, [r4, #-4]
    e2f6:	ldr	r7, [pc, #492]	; (e4e4 <_free_r+0x200>)
    e2f8:	sub.w	r5, r4, #8
    e2fc:	bic.w	r1, r2, #1
    e300:	add.w	ip, r5, r1
    e304:	ldr	r0, [r7, #8]
    e306:	ldr.w	r3, [ip, #4]
    e30a:	cmp	r0, ip
    e30c:	bic.w	r3, r3, #3
    e310:	beq.w	e42a <_free_r+0x146>
    e314:	lsls	r2, r2, #31
    e316:	str.w	r3, [ip, #4]
    e31a:	bmi.n	e382 <_free_r+0x9e>
    e31c:	ldr.w	r2, [r4, #-8]
    e320:	subs	r5, r5, r2
    e322:	add	r1, r2
    e324:	ldr	r2, [r5, #8]
    e326:	add.w	r0, r7, #8
    e32a:	cmp	r2, r0
    e32c:	beq.n	e404 <_free_r+0x120>
    e32e:	add.w	r4, ip, r3
    e332:	ldr.w	lr, [r4, #4]
    e336:	ldr	r4, [r5, #12]
    e338:	str	r4, [r2, #12]
    e33a:	tst.w	lr, #1
    e33e:	str	r2, [r4, #8]
    e340:	beq.w	e472 <_free_r+0x18e>
    e344:	orr.w	r3, r1, #1
    e348:	str	r3, [r5, #4]
    e34a:	str.w	r1, [ip]
    e34e:	cmp.w	r1, #512	; 0x200
    e352:	bcs.n	e3c0 <_free_r+0xdc>
    e354:	ldr	r0, [r7, #4]
    e356:	lsrs	r3, r1, #3
    e358:	movs	r2, #1
    e35a:	lsrs	r1, r1, #5
    e35c:	adds	r3, #1
    e35e:	lsls	r2, r1
    e360:	orrs	r2, r0
    e362:	ldr.w	r1, [r7, r3, lsl #3]
    e366:	str	r2, [r7, #4]
    e368:	add.w	r2, r7, r3, lsl #3
    e36c:	subs	r2, #8
    e36e:	strd	r1, r2, [r5, #8]
    e372:	str.w	r5, [r7, r3, lsl #3]
    e376:	str	r5, [r1, #12]
    e378:	mov	r0, r6
    e37a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e37e:	b.w	c02c <__malloc_unlock>
    e382:	add.w	r2, ip, r3
    e386:	ldr	r2, [r2, #4]
    e388:	lsls	r0, r2, #31
    e38a:	bmi.n	e3ae <_free_r+0xca>
    e38c:	add	r1, r3
    e38e:	add.w	r0, r7, #8
    e392:	ldr.w	r3, [ip, #8]
    e396:	cmp	r3, r0
    e398:	beq.n	e482 <_free_r+0x19e>
    e39a:	ldr.w	r2, [ip, #12]
    e39e:	str	r2, [r3, #12]
    e3a0:	str	r3, [r2, #8]
    e3a2:	orr.w	r3, r1, #1
    e3a6:	str	r3, [r5, #4]
    e3a8:	str	r1, [r5, r1]
    e3aa:	b.n	e34e <_free_r+0x6a>
    e3ac:	bx	lr
    e3ae:	orr.w	r3, r1, #1
    e3b2:	cmp.w	r1, #512	; 0x200
    e3b6:	str.w	r3, [r4, #-4]
    e3ba:	str.w	r1, [ip]
    e3be:	bcc.n	e354 <_free_r+0x70>
    e3c0:	cmp.w	r1, #2560	; 0xa00
    e3c4:	mov.w	r3, r1, lsr #9
    e3c8:	bcs.n	e45c <_free_r+0x178>
    e3ca:	lsrs	r3, r1, #6
    e3cc:	add.w	r0, r3, #57	; 0x39
    e3d0:	add.w	r2, r3, #56	; 0x38
    e3d4:	lsls	r3, r0, #3
    e3d6:	adds	r0, r7, r3
    e3d8:	ldr	r3, [r7, r3]
    e3da:	subs	r0, #8
    e3dc:	cmp	r0, r3
    e3de:	beq.n	e494 <_free_r+0x1b0>
    e3e0:	ldr	r2, [r3, #4]
    e3e2:	bic.w	r2, r2, #3
    e3e6:	cmp	r2, r1
    e3e8:	bls.n	e3f0 <_free_r+0x10c>
    e3ea:	ldr	r3, [r3, #8]
    e3ec:	cmp	r0, r3
    e3ee:	bne.n	e3e0 <_free_r+0xfc>
    e3f0:	ldr	r0, [r3, #12]
    e3f2:	strd	r3, r0, [r5, #8]
    e3f6:	str	r5, [r0, #8]
    e3f8:	str	r5, [r3, #12]
    e3fa:	mov	r0, r6
    e3fc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e400:	b.w	c02c <__malloc_unlock>
    e404:	add.w	r2, ip, r3
    e408:	ldr	r2, [r2, #4]
    e40a:	lsls	r2, r2, #31
    e40c:	bmi.n	e4d6 <_free_r+0x1f2>
    e40e:	add	r3, r1
    e410:	ldrd	r1, r2, [ip, #8]
    e414:	str	r2, [r1, #12]
    e416:	str	r1, [r2, #8]
    e418:	orr.w	r2, r3, #1
    e41c:	str	r2, [r5, #4]
    e41e:	mov	r0, r6
    e420:	str	r3, [r5, r3]
    e422:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e426:	b.w	c02c <__malloc_unlock>
    e42a:	add	r3, r1
    e42c:	lsls	r1, r2, #31
    e42e:	bmi.n	e440 <_free_r+0x15c>
    e430:	ldr.w	r2, [r4, #-8]
    e434:	subs	r5, r5, r2
    e436:	add	r3, r2
    e438:	ldrd	r1, r2, [r5, #8]
    e43c:	str	r2, [r1, #12]
    e43e:	str	r1, [r2, #8]
    e440:	orr.w	r2, r3, #1
    e444:	str	r2, [r5, #4]
    e446:	ldr	r2, [pc, #160]	; (e4e8 <_free_r+0x204>)
    e448:	str	r5, [r7, #8]
    e44a:	ldr	r2, [r2, #0]
    e44c:	cmp	r2, r3
    e44e:	bhi.n	e378 <_free_r+0x94>
    e450:	ldr	r3, [pc, #152]	; (e4ec <_free_r+0x208>)
    e452:	mov	r0, r6
    e454:	ldr	r1, [r3, #0]
    e456:	bl	e244 <_malloc_trim_r>
    e45a:	b.n	e378 <_free_r+0x94>
    e45c:	cmp	r3, #20
    e45e:	bls.n	e476 <_free_r+0x192>
    e460:	cmp	r3, #84	; 0x54
    e462:	bhi.n	e4a4 <_free_r+0x1c0>
    e464:	lsrs	r3, r1, #12
    e466:	add.w	r0, r3, #111	; 0x6f
    e46a:	add.w	r2, r3, #110	; 0x6e
    e46e:	lsls	r3, r0, #3
    e470:	b.n	e3d6 <_free_r+0xf2>
    e472:	add	r1, r3
    e474:	b.n	e392 <_free_r+0xae>
    e476:	add.w	r0, r3, #92	; 0x5c
    e47a:	add.w	r2, r3, #91	; 0x5b
    e47e:	lsls	r3, r0, #3
    e480:	b.n	e3d6 <_free_r+0xf2>
    e482:	orr.w	r3, r1, #1
    e486:	strd	r5, r5, [r7, #16]
    e48a:	strd	r0, r0, [r5, #8]
    e48e:	str	r3, [r5, #4]
    e490:	str	r1, [r5, r1]
    e492:	b.n	e378 <_free_r+0x94>
    e494:	ldr	r1, [r7, #4]
    e496:	asrs	r2, r2, #2
    e498:	movs	r4, #1
    e49a:	lsl.w	r2, r4, r2
    e49e:	orrs	r2, r1
    e4a0:	str	r2, [r7, #4]
    e4a2:	b.n	e3f2 <_free_r+0x10e>
    e4a4:	cmp.w	r3, #340	; 0x154
    e4a8:	bhi.n	e4b8 <_free_r+0x1d4>
    e4aa:	lsrs	r3, r1, #15
    e4ac:	add.w	r0, r3, #120	; 0x78
    e4b0:	add.w	r2, r3, #119	; 0x77
    e4b4:	lsls	r3, r0, #3
    e4b6:	b.n	e3d6 <_free_r+0xf2>
    e4b8:	movw	r2, #1364	; 0x554
    e4bc:	cmp	r3, r2
    e4be:	bhi.n	e4ce <_free_r+0x1ea>
    e4c0:	lsrs	r3, r1, #18
    e4c2:	add.w	r0, r3, #125	; 0x7d
    e4c6:	add.w	r2, r3, #124	; 0x7c
    e4ca:	lsls	r3, r0, #3
    e4cc:	b.n	e3d6 <_free_r+0xf2>
    e4ce:	mov.w	r3, #1016	; 0x3f8
    e4d2:	movs	r2, #126	; 0x7e
    e4d4:	b.n	e3d6 <_free_r+0xf2>
    e4d6:	orr.w	r3, r1, #1
    e4da:	str	r3, [r5, #4]
    e4dc:	str.w	r1, [ip]
    e4e0:	b.n	e378 <_free_r+0x94>
    e4e2:	nop
    e4e4:	.word	0x20008ad0
    e4e8:	.word	0x20008edc
    e4ec:	.word	0x20027624

0000e4f0 <rshift>:
    e4f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4f4:	ldr	r4, [r0, #16]
    e4f6:	cmp.w	r4, r1, asr #5
    e4fa:	ble.n	e55c <rshift+0x6c>
    e4fc:	add.w	lr, r0, #20
    e500:	asrs	r6, r1, #5
    e502:	ands.w	ip, r1, #31
    e506:	add.w	r5, lr, r4, lsl #2
    e50a:	add.w	r3, lr, r6, lsl #2
    e50e:	beq.n	e568 <rshift+0x78>
    e510:	ldr.w	r1, [lr, r6, lsl #2]
    e514:	adds	r3, #4
    e516:	cmp	r5, r3
    e518:	lsr.w	r1, r1, ip
    e51c:	rsb	r8, ip, #32
    e520:	bls.n	e554 <rshift+0x64>
    e522:	mov	r7, lr
    e524:	ldr	r2, [r3, #0]
    e526:	lsl.w	r2, r2, r8
    e52a:	orrs	r2, r1
    e52c:	str.w	r2, [r7], #4
    e530:	ldr.w	r1, [r3], #4
    e534:	cmp	r5, r3
    e536:	lsr.w	r1, r1, ip
    e53a:	bhi.n	e524 <rshift+0x34>
    e53c:	subs	r3, r4, r6
    e53e:	lsls	r3, r3, #2
    e540:	subs	r3, #5
    e542:	lsrs	r3, r3, #2
    e544:	adds	r3, #1
    e546:	add.w	r4, lr, r3, lsl #2
    e54a:	str.w	r1, [lr, r3, lsl #2]
    e54e:	cbz	r1, e584 <rshift+0x94>
    e550:	adds	r4, #4
    e552:	b.n	e584 <rshift+0x94>
    e554:	str	r1, [r0, #20]
    e556:	mov	r4, lr
    e558:	cmp	r1, #0
    e55a:	bne.n	e550 <rshift+0x60>
    e55c:	movs	r3, #0
    e55e:	str	r3, [r0, #16]
    e560:	movs	r3, #0
    e562:	str	r3, [r0, #20]
    e564:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e568:	cmp	r5, r3
    e56a:	it	hi
    e56c:	addhi.w	r2, r0, #16
    e570:	bls.n	e55c <rshift+0x6c>
    e572:	ldr.w	r1, [r3], #4
    e576:	str.w	r1, [r2, #4]!
    e57a:	cmp	r5, r3
    e57c:	bhi.n	e572 <rshift+0x82>
    e57e:	subs	r4, r4, r6
    e580:	add.w	r4, lr, r4, lsl #2
    e584:	sub.w	r3, r4, lr
    e588:	asrs	r3, r3, #2
    e58a:	cmp	r4, lr
    e58c:	str	r3, [r0, #16]
    e58e:	beq.n	e560 <rshift+0x70>
    e590:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e594 <__gethex>:
    e594:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e598:	vpush	{d8}
    e59c:	ldr	r4, [r1, #0]
    e59e:	mov	fp, r1
    e5a0:	ldrb	r1, [r4, #2]
    e5a2:	sub	sp, #20
    e5a4:	cmp	r1, #48	; 0x30
    e5a6:	vmov	s16, r0
    e5aa:	mov	sl, r2
    e5ac:	str	r3, [sp, #8]
    e5ae:	bne.w	e94e <__gethex+0x3ba>
    e5b2:	mvn.w	r0, #1
    e5b6:	subs	r0, r0, r4
    e5b8:	adds	r2, r4, #3
    e5ba:	adds	r3, r0, r2
    e5bc:	mov	r4, r2
    e5be:	ldrb.w	r1, [r2], #1
    e5c2:	cmp	r1, #48	; 0x30
    e5c4:	beq.n	e5ba <__gethex+0x26>
    e5c6:	ldr.w	r8, [pc, #768]	; e8c8 <__gethex+0x334>
    e5ca:	ldrb.w	r2, [r8, r1]
    e5ce:	cmp	r2, #0
    e5d0:	beq.w	e79e <__gethex+0x20a>
    e5d4:	ldrb	r2, [r4, #0]
    e5d6:	movs	r7, #0
    e5d8:	ldrb.w	r2, [r8, r2]
    e5dc:	mov	r5, r7
    e5de:	mov	r6, r4
    e5e0:	cbz	r2, e5ee <__gethex+0x5a>
    e5e2:	ldrb.w	r2, [r6, #1]!
    e5e6:	ldrb.w	r2, [r8, r2]
    e5ea:	cmp	r2, #0
    e5ec:	bne.n	e5e2 <__gethex+0x4e>
    e5ee:	ldr	r1, [pc, #724]	; (e8c4 <__gethex+0x330>)
    e5f0:	str	r3, [sp, #4]
    e5f2:	movs	r2, #1
    e5f4:	mov	r0, r6
    e5f6:	bl	da4c <strncmp>
    e5fa:	ldr	r3, [sp, #4]
    e5fc:	mov	r9, r0
    e5fe:	cmp	r0, #0
    e600:	beq.n	e69e <__gethex+0x10a>
    e602:	cmp	r5, #0
    e604:	bne.n	e6a4 <__gethex+0x110>
    e606:	ldrb	r2, [r6, #0]
    e608:	mov	r9, r5
    e60a:	and.w	r2, r2, #223	; 0xdf
    e60e:	cmp	r2, #80	; 0x50
    e610:	mov	r5, r6
    e612:	beq.n	e6b6 <__gethex+0x122>
    e614:	str.w	r6, [fp]
    e618:	cmp	r7, #0
    e61a:	bne.n	e6f0 <__gethex+0x15c>
    e61c:	subs	r3, r5, r4
    e61e:	subs	r3, #1
    e620:	cmp	r3, #7
    e622:	mov	r1, r7
    e624:	ble.n	e630 <__gethex+0x9c>
    e626:	asrs	r3, r3, #1
    e628:	cmp	r3, #7
    e62a:	add.w	r1, r1, #1
    e62e:	bgt.n	e626 <__gethex+0x92>
    e630:	vmov	r0, s16
    e634:	bl	ed3c <_Balloc>
    e638:	mov	fp, r0
    e63a:	cmp	r0, #0
    e63c:	beq.w	eb0c <__gethex+0x578>
    e640:	add.w	r6, r0, #20
    e644:	cmp	r4, r5
    e646:	str	r6, [sp, #4]
    e648:	bcs.w	e9f0 <__gethex+0x45c>
    e64c:	movs	r7, #0
    e64e:	str.w	r9, [sp, #12]
    e652:	ldr	r1, [pc, #624]	; (e8c4 <__gethex+0x330>)
    e654:	mov	r9, r4
    e656:	mov	r4, r7
    e658:	b.n	e674 <__gethex+0xe0>
    e65a:	cmp	r7, #32
    e65c:	beq.n	e692 <__gethex+0xfe>
    e65e:	mov	r0, r7
    e660:	adds	r7, #4
    e662:	ldrb	r2, [r5, #0]
    e664:	ldrb.w	r2, [r8, r2]
    e668:	and.w	r2, r2, #15
    e66c:	lsls	r2, r0
    e66e:	orrs	r4, r2
    e670:	cmp	r5, r9
    e672:	beq.n	e704 <__gethex+0x170>
    e674:	ldrb.w	r2, [r5, #-1]!
    e678:	cmp	r2, #46	; 0x2e
    e67a:	bne.n	e65a <__gethex+0xc6>
    e67c:	cmp	r5, r9
    e67e:	bcc.n	e65a <__gethex+0xc6>
    e680:	movs	r2, #1
    e682:	mov	r0, r5
    e684:	bl	da4c <strncmp>
    e688:	ldr	r1, [pc, #568]	; (e8c4 <__gethex+0x330>)
    e68a:	cmp	r0, #0
    e68c:	beq.n	e670 <__gethex+0xdc>
    e68e:	cmp	r7, #32
    e690:	bne.n	e65e <__gethex+0xca>
    e692:	movs	r0, #0
    e694:	str.w	r4, [r6], #4
    e698:	movs	r7, #4
    e69a:	mov	r4, r0
    e69c:	b.n	e662 <__gethex+0xce>
    e69e:	cmp	r5, #0
    e6a0:	beq.w	e928 <__gethex+0x394>
    e6a4:	ldrb	r2, [r6, #0]
    e6a6:	and.w	r2, r2, #223	; 0xdf
    e6aa:	subs	r5, r5, r6
    e6ac:	cmp	r2, #80	; 0x50
    e6ae:	mov.w	r9, r5, lsl #2
    e6b2:	mov	r5, r6
    e6b4:	bne.n	e614 <__gethex+0x80>
    e6b6:	ldrb	r2, [r5, #1]
    e6b8:	cmp	r2, #43	; 0x2b
    e6ba:	beq.w	e908 <__gethex+0x374>
    e6be:	cmp	r2, #45	; 0x2d
    e6c0:	beq.w	e80e <__gethex+0x27a>
    e6c4:	adds	r6, r5, #1
    e6c6:	movs	r0, #0
    e6c8:	ldrb.w	r1, [r8, r2]
    e6cc:	subs	r2, r1, #1
    e6ce:	cmp	r2, #24
    e6d0:	bhi.w	e80a <__gethex+0x276>
    e6d4:	ldrb	r2, [r6, #1]
    e6d6:	ldrb.w	r2, [r8, r2]
    e6da:	subs	r1, #16
    e6dc:	adds	r6, #1
    e6de:	cmp	r2, #0
    e6e0:	bne.n	e798 <__gethex+0x204>
    e6e2:	cbz	r0, e6e6 <__gethex+0x152>
    e6e4:	negs	r1, r1
    e6e6:	add	r9, r1
    e6e8:	str.w	r6, [fp]
    e6ec:	cmp	r7, #0
    e6ee:	beq.n	e61c <__gethex+0x88>
    e6f0:	cmp	r3, #0
    e6f2:	ite	ne
    e6f4:	movne	r5, #0
    e6f6:	moveq	r5, #6
    e6f8:	mov	r0, r5
    e6fa:	add	sp, #20
    e6fc:	vpop	{d8}
    e700:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e704:	ldr.w	r9, [sp, #12]
    e708:	mov	r3, r4
    e70a:	str.w	r3, [r6], #4
    e70e:	mov	r0, r3
    e710:	ldr	r3, [sp, #4]
    e712:	subs	r6, r6, r3
    e714:	asrs	r6, r6, #2
    e716:	str.w	r6, [fp, #16]
    e71a:	bl	eef0 <__hi0bits>
    e71e:	lsls	r6, r6, #5
    e720:	ldr.w	r4, [sl]
    e724:	subs	r0, r6, r0
    e726:	cmp	r0, r4
    e728:	bgt.n	e816 <__gethex+0x282>
    e72a:	blt.w	e90c <__gethex+0x378>
    e72e:	movs	r7, #0
    e730:	ldr.w	r3, [sl, #8]
    e734:	cmp	r3, r9
    e736:	blt.w	e9dc <__gethex+0x448>
    e73a:	ldr.w	r3, [sl, #4]
    e73e:	cmp	r3, r9
    e740:	ble.n	e7d8 <__gethex+0x244>
    e742:	sub.w	r9, r3, r9
    e746:	cmp	r4, r9
    e748:	bgt.w	e850 <__gethex+0x2bc>
    e74c:	ldr.w	r2, [sl, #12]
    e750:	cmp	r2, #2
    e752:	beq.w	ea20 <__gethex+0x48c>
    e756:	cmp	r2, #3
    e758:	beq.w	ea5e <__gethex+0x4ca>
    e75c:	cmp	r2, #1
    e75e:	beq.w	ea40 <__gethex+0x4ac>
    e762:	vmov	r0, s16
    e766:	mov	r1, fp
    e768:	bl	ed88 <_Bfree>
    e76c:	movs	r5, #80	; 0x50
    e76e:	ldr	r2, [sp, #64]	; 0x40
    e770:	movs	r3, #0
    e772:	mov	r0, r5
    e774:	str	r3, [r2, #0]
    e776:	add	sp, #20
    e778:	vpop	{d8}
    e77c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e780:	add.w	r1, r1, r1, lsl #2
    e784:	add.w	r2, r2, r1, lsl #1
    e788:	sub.w	r1, r2, #16
    e78c:	ldrb.w	r2, [r6, #1]!
    e790:	ldrb.w	r2, [r8, r2]
    e794:	cmp	r2, #0
    e796:	beq.n	e6e2 <__gethex+0x14e>
    e798:	cmp	r2, #25
    e79a:	ble.n	e780 <__gethex+0x1ec>
    e79c:	b.n	e6e2 <__gethex+0x14e>
    e79e:	ldr	r1, [pc, #292]	; (e8c4 <__gethex+0x330>)
    e7a0:	str	r3, [sp, #4]
    e7a2:	movs	r2, #1
    e7a4:	mov	r0, r4
    e7a6:	bl	da4c <strncmp>
    e7aa:	ldr	r3, [sp, #4]
    e7ac:	cmp	r0, #0
    e7ae:	bne.n	e88c <__gethex+0x2f8>
    e7b0:	ldrb	r1, [r4, #1]
    e7b2:	ldrb.w	r2, [r8, r1]
    e7b6:	adds	r5, r4, #1
    e7b8:	cmp	r2, #0
    e7ba:	beq.n	e890 <__gethex+0x2fc>
    e7bc:	cmp	r1, #48	; 0x30
    e7be:	mov	r4, r5
    e7c0:	bne.n	e7ce <__gethex+0x23a>
    e7c2:	ldrb.w	r3, [r4, #1]!
    e7c6:	cmp	r3, #48	; 0x30
    e7c8:	beq.n	e7c2 <__gethex+0x22e>
    e7ca:	ldrb.w	r2, [r8, r3]
    e7ce:	clz	r7, r2
    e7d2:	lsrs	r7, r7, #5
    e7d4:	movs	r3, #1
    e7d6:	b.n	e5de <__gethex+0x4a>
    e7d8:	movs	r5, #1
    e7da:	cbz	r7, e7f2 <__gethex+0x25e>
    e7dc:	ldr.w	r3, [sl, #12]
    e7e0:	cmp	r3, #2
    e7e2:	beq.n	e8a0 <__gethex+0x30c>
    e7e4:	cmp	r3, #3
    e7e6:	beq.n	e8a8 <__gethex+0x314>
    e7e8:	cmp	r3, #1
    e7ea:	beq.w	e8f6 <__gethex+0x362>
    e7ee:	orr.w	r5, r5, #16
    e7f2:	ldr	r3, [sp, #64]	; 0x40
    e7f4:	str.w	fp, [r3]
    e7f8:	ldr	r3, [sp, #8]
    e7fa:	mov	r0, r5
    e7fc:	str.w	r9, [r3]
    e800:	add	sp, #20
    e802:	vpop	{d8}
    e806:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e80a:	mov	r6, r5
    e80c:	b.n	e614 <__gethex+0x80>
    e80e:	movs	r0, #1
    e810:	ldrb	r2, [r5, #2]
    e812:	adds	r6, r5, #2
    e814:	b.n	e6c8 <__gethex+0x134>
    e816:	subs	r6, r0, r4
    e818:	mov	r1, r6
    e81a:	mov	r0, fp
    e81c:	bl	f74c <__any_on>
    e820:	mov	r7, r0
    e822:	cbz	r0, e844 <__gethex+0x2b0>
    e824:	subs	r2, r6, #1
    e826:	asrs	r3, r2, #5
    e828:	ldr	r1, [sp, #4]
    e82a:	movs	r7, #1
    e82c:	ldr.w	r1, [r1, r3, lsl #2]
    e830:	and.w	r3, r2, #31
    e834:	lsl.w	r3, r7, r3
    e838:	tst	r3, r1
    e83a:	beq.n	e844 <__gethex+0x2b0>
    e83c:	cmp	r2, r7
    e83e:	bgt.w	ea06 <__gethex+0x472>
    e842:	movs	r7, #2
    e844:	mov	r1, r6
    e846:	mov	r0, fp
    e848:	add	r9, r6
    e84a:	bl	e4f0 <rshift>
    e84e:	b.n	e730 <__gethex+0x19c>
    e850:	add.w	r5, r9, #4294967295
    e854:	cmp	r7, #0
    e856:	bne.w	e9f6 <__gethex+0x462>
    e85a:	cmp	r5, #0
    e85c:	bne.w	e9fa <__gethex+0x466>
    e860:	asrs	r3, r5, #5
    e862:	ldr	r2, [sp, #4]
    e864:	and.w	r5, r5, #31
    e868:	ldr.w	r2, [r2, r3, lsl #2]
    e86c:	movs	r3, #1
    e86e:	lsls	r3, r5
    e870:	tst	r3, r2
    e872:	mov	r1, r9
    e874:	mov	r0, fp
    e876:	it	ne
    e878:	orrne.w	r7, r7, #2
    e87c:	sub.w	r4, r4, r9
    e880:	bl	e4f0 <rshift>
    e884:	movs	r5, #2
    e886:	ldr.w	r9, [sl, #4]
    e88a:	b.n	e7da <__gethex+0x246>
    e88c:	ldrb	r1, [r4, #0]
    e88e:	mov	r5, r4
    e890:	and.w	r1, r1, #223	; 0xdf
    e894:	cmp	r1, #80	; 0x50
    e896:	beq.w	ea18 <__gethex+0x484>
    e89a:	str.w	r5, [fp]
    e89e:	b.n	e6f0 <__gethex+0x15c>
    e8a0:	ldr	r3, [sp, #68]	; 0x44
    e8a2:	rsb	r3, r3, #1
    e8a6:	str	r3, [sp, #68]	; 0x44
    e8a8:	ldr	r3, [sp, #68]	; 0x44
    e8aa:	cmp	r3, #0
    e8ac:	beq.n	e7ee <__gethex+0x25a>
    e8ae:	ldr.w	r7, [fp, #16]
    e8b2:	ldr.w	r8, [sp, #4]
    e8b6:	lsls	r2, r7, #2
    e8b8:	mov	r3, r8
    e8ba:	str	r2, [sp, #4]
    e8bc:	add.w	r0, r8, r7, lsl #2
    e8c0:	movs	r1, #0
    e8c2:	b.n	e8d4 <__gethex+0x340>
    e8c4:	.word	0x20000984
    e8c8:	.word	0x2000069c
    e8cc:	cmp	r0, r3
    e8ce:	str.w	r1, [r3, #-4]
    e8d2:	bls.n	e954 <__gethex+0x3c0>
    e8d4:	mov	r6, r3
    e8d6:	ldr.w	r2, [r3], #4
    e8da:	cmp.w	r2, #4294967295
    e8de:	beq.n	e8cc <__gethex+0x338>
    e8e0:	adds	r2, #1
    e8e2:	cmp	r5, #2
    e8e4:	str	r2, [r6, #0]
    e8e6:	beq.w	ea68 <__gethex+0x4d4>
    e8ea:	ands.w	r4, r4, #31
    e8ee:	bne.w	eac0 <__gethex+0x52c>
    e8f2:	movs	r5, #33	; 0x21
    e8f4:	b.n	e7f2 <__gethex+0x25e>
    e8f6:	lsls	r2, r7, #30
    e8f8:	bpl.w	e7ee <__gethex+0x25a>
    e8fc:	ldr	r3, [sp, #4]
    e8fe:	ldr	r3, [r3, #0]
    e900:	orrs	r7, r3
    e902:	lsls	r3, r7, #31
    e904:	bmi.n	e8ae <__gethex+0x31a>
    e906:	b.n	e7ee <__gethex+0x25a>
    e908:	movs	r0, #0
    e90a:	b.n	e810 <__gethex+0x27c>
    e90c:	subs	r2, r4, r0
    e90e:	mov	r1, fp
    e910:	vmov	r0, s16
    e914:	sub.w	r9, r9, r2
    e918:	bl	f208 <__lshift>
    e91c:	add.w	r3, r0, #20
    e920:	mov	fp, r0
    e922:	str	r3, [sp, #4]
    e924:	movs	r7, #0
    e926:	b.n	e730 <__gethex+0x19c>
    e928:	ldrb	r2, [r6, #1]
    e92a:	ldrb.w	r0, [r8, r2]
    e92e:	adds	r1, r6, #1
    e930:	cmp	r0, #0
    e932:	beq.w	ea76 <__gethex+0x4e2>
    e936:	mov	r5, r1
    e938:	ldrb.w	r2, [r1, #1]!
    e93c:	ldrb.w	r0, [r8, r2]
    e940:	cmp	r0, #0
    e942:	bne.n	e936 <__gethex+0x3a2>
    e944:	subs	r5, r6, r5
    e946:	mov.w	r9, r5, lsl #2
    e94a:	mov	r6, r1
    e94c:	b.n	e60a <__gethex+0x76>
    e94e:	adds	r4, #2
    e950:	movs	r3, #0
    e952:	b.n	e5c6 <__gethex+0x32>
    e954:	ldr.w	r3, [fp, #8]
    e958:	cmp	r7, r3
    e95a:	bge.w	ea7a <__gethex+0x4e6>
    e95e:	mov	r3, r7
    e960:	add.w	r2, fp, r3, lsl #2
    e964:	movs	r1, #1
    e966:	adds	r3, #1
    e968:	cmp	r5, #2
    e96a:	str.w	r3, [fp, #16]
    e96e:	str	r1, [r2, #20]
    e970:	beq.n	ea68 <__gethex+0x4d4>
    e972:	cmp	r7, r3
    e974:	bge.n	e8ea <__gethex+0x356>
    e976:	cmp	r3, #0
    e978:	ble.w	eab2 <__gethex+0x51e>
    e97c:	ldr.w	r2, [fp, #20]
    e980:	add.w	r3, r8, r3, lsl #2
    e984:	add.w	r0, fp, #24
    e988:	cmp	r3, r0
    e98a:	mov.w	r2, r2, lsr #1
    e98e:	bls.w	eaf4 <__gethex+0x560>
    e992:	mov	r4, r8
    e994:	ldr	r1, [r0, #0]
    e996:	orr.w	r2, r2, r1, lsl #31
    e99a:	str.w	r2, [r4], #4
    e99e:	ldr.w	r2, [r0], #4
    e9a2:	cmp	r3, r0
    e9a4:	mov.w	r2, r2, lsr #1
    e9a8:	bhi.n	e994 <__gethex+0x400>
    e9aa:	sub.w	r3, r3, fp
    e9ae:	subs	r3, #25
    e9b0:	lsrs	r3, r3, #2
    e9b2:	adds	r3, #1
    e9b4:	str.w	r2, [r8, r3, lsl #2]
    e9b8:	add.w	r3, r8, r3, lsl #2
    e9bc:	cmp	r2, #0
    e9be:	bne.w	eafc <__gethex+0x568>
    e9c2:	sub.w	r2, r3, r8
    e9c6:	asrs	r2, r2, #2
    e9c8:	cmp	r3, r8
    e9ca:	str.w	r2, [fp, #16]
    e9ce:	beq.n	eab8 <__gethex+0x524>
    e9d0:	ldr.w	r3, [sl, #8]
    e9d4:	add.w	r9, r9, #1
    e9d8:	cmp	r3, r9
    e9da:	bge.n	e8f2 <__gethex+0x35e>
    e9dc:	vmov	r0, s16
    e9e0:	mov	r1, fp
    e9e2:	bl	ed88 <_Bfree>
    e9e6:	ldr	r2, [sp, #64]	; 0x40
    e9e8:	movs	r3, #0
    e9ea:	str	r3, [r2, #0]
    e9ec:	movs	r5, #163	; 0xa3
    e9ee:	b.n	e6f8 <__gethex+0x164>
    e9f0:	ldr	r6, [sp, #4]
    e9f2:	movs	r3, #0
    e9f4:	b.n	e70a <__gethex+0x176>
    e9f6:	movs	r7, #1
    e9f8:	b.n	e860 <__gethex+0x2cc>
    e9fa:	mov	r1, r5
    e9fc:	mov	r0, fp
    e9fe:	bl	f74c <__any_on>
    ea02:	mov	r7, r0
    ea04:	b.n	e860 <__gethex+0x2cc>
    ea06:	subs	r1, r6, #2
    ea08:	mov	r0, fp
    ea0a:	bl	f74c <__any_on>
    ea0e:	cmp	r0, #0
    ea10:	beq.w	e842 <__gethex+0x2ae>
    ea14:	movs	r7, #3
    ea16:	b.n	e844 <__gethex+0x2b0>
    ea18:	mov.w	r9, #0
    ea1c:	movs	r7, #1
    ea1e:	b.n	e6b6 <__gethex+0x122>
    ea20:	ldr	r2, [sp, #68]	; 0x44
    ea22:	cmp	r2, #0
    ea24:	bne.w	e762 <__gethex+0x1ce>
    ea28:	ldr	r1, [sp, #8]
    ea2a:	str	r3, [r1, #0]
    ea2c:	ldr	r3, [sp, #4]
    ea2e:	movs	r2, #1
    ea30:	str.w	r2, [fp, #16]
    ea34:	str	r2, [r3, #0]
    ea36:	ldr	r3, [sp, #64]	; 0x40
    ea38:	movs	r5, #98	; 0x62
    ea3a:	str.w	fp, [r3]
    ea3e:	b.n	e6f8 <__gethex+0x164>
    ea40:	cmp	r4, r9
    ea42:	bne.w	e762 <__gethex+0x1ce>
    ea46:	cmp	r4, #1
    ea48:	beq.n	ea28 <__gethex+0x494>
    ea4a:	subs	r1, r4, #1
    ea4c:	mov	r0, fp
    ea4e:	bl	f74c <__any_on>
    ea52:	cmp	r0, #0
    ea54:	beq.w	e762 <__gethex+0x1ce>
    ea58:	ldr.w	r3, [sl, #4]
    ea5c:	b.n	ea28 <__gethex+0x494>
    ea5e:	ldr	r2, [sp, #68]	; 0x44
    ea60:	cmp	r2, #0
    ea62:	beq.w	e762 <__gethex+0x1ce>
    ea66:	b.n	ea28 <__gethex+0x494>
    ea68:	ldr.w	r3, [sl]
    ea6c:	subs	r3, #1
    ea6e:	cmp	r3, r4
    ea70:	beq.n	eadc <__gethex+0x548>
    ea72:	movs	r5, #34	; 0x22
    ea74:	b.n	e7f2 <__gethex+0x25e>
    ea76:	mov	r6, r1
    ea78:	b.n	e60a <__gethex+0x76>
    ea7a:	ldr.w	r1, [fp, #4]
    ea7e:	vmov	r0, s16
    ea82:	adds	r1, #1
    ea84:	bl	ed3c <_Balloc>
    ea88:	mov	r6, r0
    ea8a:	cbz	r0, eb00 <__gethex+0x56c>
    ea8c:	ldr.w	r3, [fp, #16]
    ea90:	adds	r3, #2
    ea92:	lsls	r2, r3, #2
    ea94:	add.w	r1, fp, #12
    ea98:	adds	r0, #12
    ea9a:	bl	9470 <memcpy>
    ea9e:	mov	r1, fp
    eaa0:	vmov	r0, s16
    eaa4:	bl	ed88 <_Bfree>
    eaa8:	add.w	r8, r6, #20
    eaac:	ldr	r3, [r6, #16]
    eaae:	mov	fp, r6
    eab0:	b.n	e960 <__gethex+0x3cc>
    eab2:	movs	r3, #0
    eab4:	str.w	r3, [fp, #16]
    eab8:	movs	r3, #0
    eaba:	str.w	r3, [fp, #20]
    eabe:	b.n	e9d0 <__gethex+0x43c>
    eac0:	ldr	r3, [sp, #4]
    eac2:	add	r3, r8
    eac4:	rsb	r4, r4, #32
    eac8:	ldr.w	r0, [r3, #-4]
    eacc:	bl	eef0 <__hi0bits>
    ead0:	cmp	r0, r4
    ead2:	bge.w	e8f2 <__gethex+0x35e>
    ead6:	ldr.w	r3, [fp, #16]
    eada:	b.n	e976 <__gethex+0x3e2>
    eadc:	asrs	r3, r4, #5
    eade:	and.w	r4, r4, #31
    eae2:	ldr.w	r2, [r8, r3, lsl #2]
    eae6:	movs	r3, #1
    eae8:	lsls	r3, r4
    eaea:	tst	r3, r2
    eaec:	ite	eq
    eaee:	moveq	r5, #34	; 0x22
    eaf0:	movne	r5, #33	; 0x21
    eaf2:	b.n	e7f2 <__gethex+0x25e>
    eaf4:	str.w	r2, [r8]
    eaf8:	mov	r3, r8
    eafa:	cbz	r2, eb18 <__gethex+0x584>
    eafc:	adds	r3, #4
    eafe:	b.n	e9c2 <__gethex+0x42e>
    eb00:	ldr	r3, [pc, #28]	; (eb20 <__gethex+0x58c>)
    eb02:	ldr	r0, [pc, #32]	; (eb24 <__gethex+0x590>)
    eb04:	mov	r2, r6
    eb06:	movs	r1, #132	; 0x84
    eb08:	bl	12fc0 <__assert_func>
    eb0c:	ldr	r3, [pc, #16]	; (eb20 <__gethex+0x58c>)
    eb0e:	ldr	r0, [pc, #20]	; (eb24 <__gethex+0x590>)
    eb10:	mov	r2, fp
    eb12:	movs	r1, #228	; 0xe4
    eb14:	bl	12fc0 <__assert_func>
    eb18:	str.w	r2, [fp, #16]
    eb1c:	b.n	eab8 <__gethex+0x524>
    eb1e:	nop
    eb20:	.word	0x20000624
    eb24:	.word	0x20000638

0000eb28 <__match>:
    eb28:	push	{r4}
    eb2a:	ldr	r4, [r0, #0]
    eb2c:	b.n	eb42 <__match+0x1a>
    eb2e:	ldrb.w	r3, [r4, #1]!
    eb32:	sub.w	ip, r3, #65	; 0x41
    eb36:	cmp.w	ip, #25
    eb3a:	it	ls
    eb3c:	addls	r3, #32
    eb3e:	cmp	r3, r2
    eb40:	bne.n	eb56 <__match+0x2e>
    eb42:	ldrb.w	r2, [r1], #1
    eb46:	cmp	r2, #0
    eb48:	bne.n	eb2e <__match+0x6>
    eb4a:	adds	r4, #1
    eb4c:	str	r4, [r0, #0]
    eb4e:	movs	r0, #1
    eb50:	ldr.w	r4, [sp], #4
    eb54:	bx	lr
    eb56:	movs	r0, #0
    eb58:	ldr.w	r4, [sp], #4
    eb5c:	bx	lr
    eb5e:	nop

0000eb60 <__hexnan>:
    eb60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb64:	ldr	r1, [r1, #0]
    eb66:	sub	sp, #20
    eb68:	asrs	r3, r1, #5
    eb6a:	ands.w	r1, r1, #31
    eb6e:	str	r0, [sp, #8]
    eb70:	add.w	r3, r2, r3, lsl #2
    eb74:	str	r1, [sp, #12]
    eb76:	bne.w	ec98 <__hexnan+0x138>
    eb7a:	subs	r5, r3, #4
    eb7c:	str	r3, [sp, #4]
    eb7e:	ldr	r3, [sp, #8]
    eb80:	ldr	r1, [sp, #4]
    eb82:	ldr	r4, [r3, #0]
    eb84:	movs	r3, #0
    eb86:	str.w	r3, [r1, #-4]
    eb8a:	ldrb	r1, [r4, #1]
    eb8c:	adds	r4, #1
    eb8e:	cmp	r1, #0
    eb90:	beq.w	ecc4 <__hexnan+0x164>
    eb94:	ldr.w	r9, [pc, #372]	; ed0c <__hexnan+0x1ac>
    eb98:	mov	r8, r5
    eb9a:	mov	ip, r5
    eb9c:	mov	sl, r3
    eb9e:	mov	r6, r3
    eba0:	b.n	ebc0 <__hexnan+0x60>
    eba2:	cmp	r1, #32
    eba4:	bhi.w	ecc0 <__hexnan+0x160>
    eba8:	cmp	r6, sl
    ebaa:	ble.n	ebba <__hexnan+0x5a>
    ebac:	cmp	ip, r8
    ebae:	bcs.n	ebb4 <__hexnan+0x54>
    ebb0:	cmp	r3, #7
    ebb2:	ble.n	ec6c <__hexnan+0x10c>
    ebb4:	cmp	r2, ip
    ebb6:	bcc.n	ec5c <__hexnan+0xfc>
    ebb8:	movs	r3, #8
    ebba:	ldrb.w	r1, [r4, #1]!
    ebbe:	cbz	r1, ebea <__hexnan+0x8a>
    ebc0:	ldrb.w	r0, [r9, r1]
    ebc4:	cmp	r0, #0
    ebc6:	beq.n	eba2 <__hexnan+0x42>
    ebc8:	adds	r3, #1
    ebca:	cmp	r3, #8
    ebcc:	add.w	r6, r6, #1
    ebd0:	bgt.n	ec48 <__hexnan+0xe8>
    ebd2:	ldr.w	r1, [ip]
    ebd6:	lsls	r1, r1, #4
    ebd8:	and.w	r0, r0, #15
    ebdc:	orrs	r0, r1
    ebde:	str.w	r0, [ip]
    ebe2:	ldrb.w	r1, [r4, #1]!
    ebe6:	cmp	r1, #0
    ebe8:	bne.n	ebc0 <__hexnan+0x60>
    ebea:	cmp	r6, #0
    ebec:	beq.n	ecc4 <__hexnan+0x164>
    ebee:	cmp	ip, r8
    ebf0:	bcs.n	ebf6 <__hexnan+0x96>
    ebf2:	cmp	r3, #7
    ebf4:	ble.n	ece0 <__hexnan+0x180>
    ebf6:	cmp	r2, ip
    ebf8:	bcs.n	eca0 <__hexnan+0x140>
    ebfa:	subs	r1, r2, #4
    ebfc:	mov	r3, ip
    ebfe:	ldr.w	r0, [r3], #4
    ec02:	str.w	r0, [r1, #4]!
    ec06:	cmp	r3, r5
    ec08:	bls.n	ebfe <__hexnan+0x9e>
    ec0a:	sub.w	r3, r5, ip
    ec0e:	bic.w	r3, r3, #3
    ec12:	adds	r1, r5, #1
    ec14:	adds	r3, #4
    ec16:	add.w	ip, ip, #1
    ec1a:	cmp	r1, ip
    ec1c:	it	cc
    ec1e:	movcc	r3, #4
    ec20:	add	r3, r2
    ec22:	movs	r1, #0
    ec24:	str.w	r1, [r3], #4
    ec28:	cmp	r3, r5
    ec2a:	bls.n	ec24 <__hexnan+0xc4>
    ec2c:	ldr	r3, [sp, #4]
    ec2e:	ldr.w	r3, [r3, #-4]
    ec32:	cbnz	r3, ec40 <__hexnan+0xe0>
    ec34:	cmp	r2, r5
    ec36:	beq.n	eccc <__hexnan+0x16c>
    ec38:	ldr.w	r3, [r5, #-4]!
    ec3c:	cmp	r3, #0
    ec3e:	beq.n	ec34 <__hexnan+0xd4>
    ec40:	movs	r0, #5
    ec42:	add	sp, #20
    ec44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec48:	cmp	r2, ip
    ec4a:	bcs.n	ebba <__hexnan+0x5a>
    ec4c:	movs	r3, #0
    ec4e:	str.w	r3, [ip, #-4]
    ec52:	mov	r1, r3
    ec54:	sub.w	ip, ip, #4
    ec58:	movs	r3, #1
    ec5a:	b.n	ebd8 <__hexnan+0x78>
    ec5c:	movs	r3, #0
    ec5e:	sub.w	r8, ip, #4
    ec62:	str.w	r3, [ip, #-4]
    ec66:	mov	sl, r6
    ec68:	mov	ip, r8
    ec6a:	b.n	ebba <__hexnan+0x5a>
    ec6c:	rsb	r1, r3, #8
    ec70:	ldr.w	r3, [ip]
    ec74:	lsls	r1, r1, #2
    ec76:	rsb	lr, r1, #32
    ec7a:	mov	r0, ip
    ec7c:	mov	fp, r3
    ec7e:	ldr	r7, [r0, #4]
    ec80:	lsl.w	r3, r7, lr
    ec84:	orr.w	r3, r3, fp
    ec88:	lsr.w	fp, r7, r1
    ec8c:	str	r3, [r0, #0]
    ec8e:	str.w	fp, [r0, #4]!
    ec92:	cmp	r0, r8
    ec94:	bcc.n	ec7e <__hexnan+0x11e>
    ec96:	b.n	ebb4 <__hexnan+0x54>
    ec98:	adds	r1, r3, #4
    ec9a:	str	r1, [sp, #4]
    ec9c:	mov	r5, r3
    ec9e:	b.n	eb7e <__hexnan+0x1e>
    eca0:	ldr	r3, [sp, #12]
    eca2:	cmp	r3, #0
    eca4:	beq.n	ec2c <__hexnan+0xcc>
    eca6:	ldr	r3, [sp, #12]
    eca8:	ldr	r0, [sp, #4]
    ecaa:	rsb	r1, r3, #32
    ecae:	mov.w	r3, #4294967295
    ecb2:	lsrs	r3, r1
    ecb4:	ldr.w	r1, [r0, #-4]
    ecb8:	ands	r3, r1
    ecba:	str.w	r3, [r0, #-4]
    ecbe:	b.n	ec32 <__hexnan+0xd2>
    ecc0:	cmp	r1, #41	; 0x29
    ecc2:	beq.n	ecd8 <__hexnan+0x178>
    ecc4:	movs	r0, #4
    ecc6:	add	sp, #20
    ecc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eccc:	movs	r3, #1
    ecce:	movs	r0, #5
    ecd0:	str	r3, [r5, #0]
    ecd2:	add	sp, #20
    ecd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ecd8:	ldr	r1, [sp, #8]
    ecda:	adds	r4, #1
    ecdc:	str	r4, [r1, #0]
    ecde:	b.n	ebea <__hexnan+0x8a>
    ece0:	ldr.w	r1, [ip]
    ece4:	rsb	r3, r3, #8
    ece8:	lsls	r3, r3, #2
    ecea:	rsb	r7, r3, #32
    ecee:	mov	r4, ip
    ecf0:	mov	r0, r1
    ecf2:	ldr	r6, [r4, #4]
    ecf4:	lsl.w	r1, r6, r7
    ecf8:	orrs	r1, r0
    ecfa:	lsr.w	r0, r6, r3
    ecfe:	str	r1, [r4, #0]
    ed00:	str.w	r0, [r4, #4]!
    ed04:	cmp	r4, r8
    ed06:	bcc.n	ecf2 <__hexnan+0x192>
    ed08:	b.n	ebf6 <__hexnan+0x96>
    ed0a:	nop
    ed0c:	.word	0x2000069c

0000ed10 <__ascii_mbtowc>:
    ed10:	sub	sp, #8
    ed12:	cbz	r1, ed28 <__ascii_mbtowc+0x18>
    ed14:	cbz	r2, ed2e <__ascii_mbtowc+0x1e>
    ed16:	cbz	r3, ed34 <__ascii_mbtowc+0x24>
    ed18:	ldrb	r3, [r2, #0]
    ed1a:	str	r3, [r1, #0]
    ed1c:	ldrb	r2, [r2, #0]
    ed1e:	subs	r0, r2, #0
    ed20:	it	ne
    ed22:	movne	r0, #1
    ed24:	add	sp, #8
    ed26:	bx	lr
    ed28:	add	r1, sp, #4
    ed2a:	cmp	r2, #0
    ed2c:	bne.n	ed16 <__ascii_mbtowc+0x6>
    ed2e:	mov	r0, r2
    ed30:	add	sp, #8
    ed32:	bx	lr
    ed34:	mvn.w	r0, #1
    ed38:	b.n	ed24 <__ascii_mbtowc+0x14>
    ed3a:	nop

0000ed3c <_Balloc>:
    ed3c:	ldr	r3, [r0, #68]	; 0x44
    ed3e:	push	{r4, r5, r6, lr}
    ed40:	mov	r5, r0
    ed42:	mov	r4, r1
    ed44:	cbz	r3, ed5a <_Balloc+0x1e>
    ed46:	ldr.w	r0, [r3, r4, lsl #2]
    ed4a:	cbz	r0, ed6e <_Balloc+0x32>
    ed4c:	ldr	r2, [r0, #0]
    ed4e:	str.w	r2, [r3, r4, lsl #2]
    ed52:	movs	r3, #0
    ed54:	strd	r3, r3, [r0, #12]
    ed58:	pop	{r4, r5, r6, pc}
    ed5a:	movs	r2, #33	; 0x21
    ed5c:	movs	r1, #4
    ed5e:	bl	13000 <_calloc_r>
    ed62:	mov	r3, r0
    ed64:	str	r0, [r5, #68]	; 0x44
    ed66:	cmp	r0, #0
    ed68:	bne.n	ed46 <_Balloc+0xa>
    ed6a:	movs	r0, #0
    ed6c:	pop	{r4, r5, r6, pc}
    ed6e:	movs	r1, #1
    ed70:	lsl.w	r6, r1, r4
    ed74:	adds	r2, r6, #5
    ed76:	lsls	r2, r2, #2
    ed78:	mov	r0, r5
    ed7a:	bl	13000 <_calloc_r>
    ed7e:	cmp	r0, #0
    ed80:	beq.n	ed6a <_Balloc+0x2e>
    ed82:	strd	r4, r6, [r0, #4]
    ed86:	b.n	ed52 <_Balloc+0x16>

0000ed88 <_Bfree>:
    ed88:	cbz	r1, ed98 <_Bfree+0x10>
    ed8a:	ldr	r3, [r0, #68]	; 0x44
    ed8c:	ldr	r2, [r1, #4]
    ed8e:	ldr.w	r0, [r3, r2, lsl #2]
    ed92:	str	r0, [r1, #0]
    ed94:	str.w	r1, [r3, r2, lsl #2]
    ed98:	bx	lr
    ed9a:	nop

0000ed9c <__multadd>:
    ed9c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eda0:	ldr	r6, [r1, #16]
    eda2:	mov	r8, r0
    eda4:	mov	r7, r1
    eda6:	mov	r5, r3
    eda8:	add.w	lr, r1, #20
    edac:	movs	r0, #0
    edae:	ldr.w	r1, [lr]
    edb2:	uxth	r4, r1
    edb4:	mla	r3, r2, r4, r5
    edb8:	lsrs	r1, r1, #16
    edba:	mov.w	ip, r3, lsr #16
    edbe:	mla	ip, r2, r1, ip
    edc2:	adds	r0, #1
    edc4:	uxth	r4, r3
    edc6:	add.w	r4, r4, ip, lsl #16
    edca:	cmp	r6, r0
    edcc:	str.w	r4, [lr], #4
    edd0:	mov.w	r5, ip, lsr #16
    edd4:	bgt.n	edae <__multadd+0x12>
    edd6:	cbz	r5, ede8 <__multadd+0x4c>
    edd8:	ldr	r3, [r7, #8]
    edda:	cmp	r3, r6
    eddc:	ble.n	edee <__multadd+0x52>
    edde:	add.w	r3, r7, r6, lsl #2
    ede2:	adds	r6, #1
    ede4:	str	r5, [r3, #20]
    ede6:	str	r6, [r7, #16]
    ede8:	mov	r0, r7
    edea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edee:	ldr	r1, [r7, #4]
    edf0:	mov	r0, r8
    edf2:	adds	r1, #1
    edf4:	bl	ed3c <_Balloc>
    edf8:	mov	r4, r0
    edfa:	cbz	r0, ee2a <__multadd+0x8e>
    edfc:	ldr	r2, [r7, #16]
    edfe:	adds	r2, #2
    ee00:	add.w	r1, r7, #12
    ee04:	lsls	r2, r2, #2
    ee06:	adds	r0, #12
    ee08:	bl	9470 <memcpy>
    ee0c:	ldr.w	r3, [r8, #68]	; 0x44
    ee10:	ldr	r2, [r7, #4]
    ee12:	ldr.w	r1, [r3, r2, lsl #2]
    ee16:	str	r1, [r7, #0]
    ee18:	str.w	r7, [r3, r2, lsl #2]
    ee1c:	mov	r7, r4
    ee1e:	add.w	r3, r7, r6, lsl #2
    ee22:	adds	r6, #1
    ee24:	str	r5, [r3, #20]
    ee26:	str	r6, [r7, #16]
    ee28:	b.n	ede8 <__multadd+0x4c>
    ee2a:	ldr	r3, [pc, #12]	; (ee38 <__multadd+0x9c>)
    ee2c:	ldr	r0, [pc, #12]	; (ee3c <__multadd+0xa0>)
    ee2e:	mov	r2, r4
    ee30:	movs	r1, #186	; 0xba
    ee32:	bl	12fc0 <__assert_func>
    ee36:	nop
    ee38:	.word	0x20000624
    ee3c:	.word	0x2000079c

0000ee40 <__s2b>:
    ee40:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee44:	mov	r7, r2
    ee46:	ldr	r2, [pc, #156]	; (eee4 <__s2b+0xa4>)
    ee48:	mov	r6, r3
    ee4a:	adds	r3, #8
    ee4c:	mov	r4, r1
    ee4e:	cmp	r6, #9
    ee50:	smull	r1, r2, r2, r3
    ee54:	mov.w	r3, r3, asr #31
    ee58:	mov	r5, r0
    ee5a:	rsb	r3, r3, r2, asr #1
    ee5e:	ble.n	eed4 <__s2b+0x94>
    ee60:	mov.w	ip, #1
    ee64:	movs	r1, #0
    ee66:	mov.w	ip, ip, lsl #1
    ee6a:	cmp	r3, ip
    ee6c:	add.w	r1, r1, #1
    ee70:	bgt.n	ee66 <__s2b+0x26>
    ee72:	mov	r0, r5
    ee74:	bl	ed3c <_Balloc>
    ee78:	mov	r1, r0
    ee7a:	cbz	r0, eed8 <__s2b+0x98>
    ee7c:	ldr	r3, [sp, #32]
    ee7e:	str	r3, [r0, #20]
    ee80:	cmp	r7, #9
    ee82:	mov.w	r3, #1
    ee86:	str	r3, [r0, #16]
    ee88:	bgt.n	eeb0 <__s2b+0x70>
    ee8a:	adds	r4, #10
    ee8c:	movs	r7, #9
    ee8e:	cmp	r6, r7
    ee90:	ble.n	eeaa <__s2b+0x6a>
    ee92:	subs	r2, r6, r7
    ee94:	adds	r6, r4, r2
    ee96:	ldrb.w	r3, [r4], #1
    ee9a:	movs	r2, #10
    ee9c:	subs	r3, #48	; 0x30
    ee9e:	mov	r0, r5
    eea0:	bl	ed9c <__multadd>
    eea4:	cmp	r6, r4
    eea6:	mov	r1, r0
    eea8:	bne.n	ee96 <__s2b+0x56>
    eeaa:	mov	r0, r1
    eeac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    eeb0:	add.w	r9, r4, #9
    eeb4:	mov	r8, r9
    eeb6:	add	r4, r7
    eeb8:	ldrb.w	r3, [r8], #1
    eebc:	movs	r2, #10
    eebe:	subs	r3, #48	; 0x30
    eec0:	mov	r0, r5
    eec2:	bl	ed9c <__multadd>
    eec6:	cmp	r8, r4
    eec8:	mov	r1, r0
    eeca:	bne.n	eeb8 <__s2b+0x78>
    eecc:	sub.w	r4, r7, #8
    eed0:	add	r4, r9
    eed2:	b.n	ee8e <__s2b+0x4e>
    eed4:	movs	r1, #0
    eed6:	b.n	ee72 <__s2b+0x32>
    eed8:	mov	r2, r1
    eeda:	ldr	r3, [pc, #12]	; (eee8 <__s2b+0xa8>)
    eedc:	ldr	r0, [pc, #12]	; (eeec <__s2b+0xac>)
    eede:	movs	r1, #211	; 0xd3
    eee0:	bl	12fc0 <__assert_func>
    eee4:	.word	0x38e38e39
    eee8:	.word	0x20000624
    eeec:	.word	0x2000079c

0000eef0 <__hi0bits>:
    eef0:	lsrs	r3, r0, #16
    eef2:	lsls	r3, r3, #16
    eef4:	cbnz	r3, ef2c <__hi0bits+0x3c>
    eef6:	lsls	r0, r0, #16
    eef8:	movs	r3, #16
    eefa:	tst.w	r0, #4278190080	; 0xff000000
    eefe:	itt	eq
    ef00:	lsleq	r0, r0, #8
    ef02:	addeq	r3, #8
    ef04:	tst.w	r0, #4026531840	; 0xf0000000
    ef08:	itt	eq
    ef0a:	lsleq	r0, r0, #4
    ef0c:	addeq	r3, #4
    ef0e:	tst.w	r0, #3221225472	; 0xc0000000
    ef12:	itt	eq
    ef14:	lsleq	r0, r0, #2
    ef16:	addeq	r3, #2
    ef18:	cmp	r0, #0
    ef1a:	blt.n	ef28 <__hi0bits+0x38>
    ef1c:	tst.w	r0, #1073741824	; 0x40000000
    ef20:	add.w	r3, r3, #1
    ef24:	it	eq
    ef26:	moveq	r3, #32
    ef28:	mov	r0, r3
    ef2a:	bx	lr
    ef2c:	movs	r3, #0
    ef2e:	b.n	eefa <__hi0bits+0xa>

0000ef30 <__lo0bits>:
    ef30:	ldr	r3, [r0, #0]
    ef32:	ands.w	r2, r3, #7
    ef36:	beq.n	ef4a <__lo0bits+0x1a>
    ef38:	lsls	r1, r3, #31
    ef3a:	bmi.n	ef7c <__lo0bits+0x4c>
    ef3c:	lsls	r2, r3, #30
    ef3e:	bpl.n	ef86 <__lo0bits+0x56>
    ef40:	lsrs	r3, r3, #1
    ef42:	str	r3, [r0, #0]
    ef44:	movs	r2, #1
    ef46:	mov	r0, r2
    ef48:	bx	lr
    ef4a:	uxth	r1, r3
    ef4c:	cbnz	r1, ef52 <__lo0bits+0x22>
    ef4e:	lsrs	r3, r3, #16
    ef50:	movs	r2, #16
    ef52:	uxtb	r1, r3
    ef54:	cbnz	r1, ef5a <__lo0bits+0x2a>
    ef56:	adds	r2, #8
    ef58:	lsrs	r3, r3, #8
    ef5a:	lsls	r1, r3, #28
    ef5c:	itt	eq
    ef5e:	lsreq	r3, r3, #4
    ef60:	addeq	r2, #4
    ef62:	lsls	r1, r3, #30
    ef64:	itt	eq
    ef66:	lsreq	r3, r3, #2
    ef68:	addeq	r2, #2
    ef6a:	lsls	r1, r3, #31
    ef6c:	bmi.n	ef76 <__lo0bits+0x46>
    ef6e:	lsrs	r3, r3, #1
    ef70:	add.w	r2, r2, #1
    ef74:	beq.n	ef82 <__lo0bits+0x52>
    ef76:	str	r3, [r0, #0]
    ef78:	mov	r0, r2
    ef7a:	bx	lr
    ef7c:	movs	r2, #0
    ef7e:	mov	r0, r2
    ef80:	bx	lr
    ef82:	movs	r2, #32
    ef84:	b.n	ef46 <__lo0bits+0x16>
    ef86:	lsrs	r3, r3, #2
    ef88:	movs	r2, #2
    ef8a:	str	r3, [r0, #0]
    ef8c:	mov	r0, r2
    ef8e:	bx	lr

0000ef90 <__i2b>:
    ef90:	push	{r3, r4, r5, lr}
    ef92:	ldr	r3, [r0, #68]	; 0x44
    ef94:	mov	r4, r0
    ef96:	mov	r5, r1
    ef98:	cbz	r3, efae <__i2b+0x1e>
    ef9a:	ldr	r0, [r3, #4]
    ef9c:	cbz	r0, efcc <__i2b+0x3c>
    ef9e:	ldr	r2, [r0, #0]
    efa0:	str	r2, [r3, #4]
    efa2:	movs	r2, #0
    efa4:	movs	r3, #1
    efa6:	strd	r3, r5, [r0, #16]
    efaa:	str	r2, [r0, #12]
    efac:	pop	{r3, r4, r5, pc}
    efae:	movs	r2, #33	; 0x21
    efb0:	movs	r1, #4
    efb2:	bl	13000 <_calloc_r>
    efb6:	mov	r3, r0
    efb8:	str	r0, [r4, #68]	; 0x44
    efba:	cmp	r0, #0
    efbc:	bne.n	ef9a <__i2b+0xa>
    efbe:	ldr	r3, [pc, #36]	; (efe4 <__i2b+0x54>)
    efc0:	ldr	r0, [pc, #36]	; (efe8 <__i2b+0x58>)
    efc2:	movs	r2, #0
    efc4:	movw	r1, #325	; 0x145
    efc8:	bl	12fc0 <__assert_func>
    efcc:	movs	r2, #28
    efce:	movs	r1, #1
    efd0:	mov	r0, r4
    efd2:	bl	13000 <_calloc_r>
    efd6:	cmp	r0, #0
    efd8:	beq.n	efbe <__i2b+0x2e>
    efda:	movs	r2, #1
    efdc:	movs	r3, #2
    efde:	strd	r2, r3, [r0, #4]
    efe2:	b.n	efa2 <__i2b+0x12>
    efe4:	.word	0x20000624
    efe8:	.word	0x2000079c

0000efec <__multiply>:
    efec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eff0:	ldr	r6, [r1, #16]
    eff2:	ldr	r5, [r2, #16]
    eff4:	cmp	r6, r5
    eff6:	sub	sp, #20
    eff8:	mov	r8, r1
    effa:	mov	r4, r2
    effc:	blt.n	f00a <__multiply+0x1e>
    effe:	mov	r2, r5
    f000:	mov	r3, r4
    f002:	mov	r5, r6
    f004:	mov	r4, r1
    f006:	mov	r6, r2
    f008:	mov	r8, r3
    f00a:	ldr	r3, [r4, #8]
    f00c:	ldr	r1, [r4, #4]
    f00e:	adds	r7, r5, r6
    f010:	cmp	r3, r7
    f012:	it	lt
    f014:	addlt	r1, #1
    f016:	bl	ed3c <_Balloc>
    f01a:	str	r0, [sp, #4]
    f01c:	cmp	r0, #0
    f01e:	beq.w	f130 <__multiply+0x144>
    f022:	ldr	r3, [sp, #4]
    f024:	add.w	r9, r3, #20
    f028:	add.w	sl, r9, r7, lsl #2
    f02c:	cmp	r9, sl
    f02e:	bcs.n	f03c <__multiply+0x50>
    f030:	mov	r3, r9
    f032:	movs	r2, #0
    f034:	str.w	r2, [r3], #4
    f038:	cmp	sl, r3
    f03a:	bhi.n	f034 <__multiply+0x48>
    f03c:	add.w	r8, r8, #20
    f040:	add.w	fp, r8, r6, lsl #2
    f044:	add.w	r3, r4, #20
    f048:	cmp	r8, fp
    f04a:	mov	r2, r3
    f04c:	add.w	r5, r3, r5, lsl #2
    f050:	bcs.n	f112 <__multiply+0x126>
    f052:	subs	r3, r5, r4
    f054:	subs	r3, #21
    f056:	bic.w	r3, r3, #3
    f05a:	adds	r3, #4
    f05c:	adds	r4, #21
    f05e:	cmp	r5, r4
    f060:	it	cc
    f062:	movcc	r3, #4
    f064:	strd	sl, r7, [sp, #8]
    f068:	mov	ip, r5
    f06a:	mov	r7, r3
    f06c:	mov	sl, r2
    f06e:	b.n	f07c <__multiply+0x90>
    f070:	lsrs	r1, r1, #16
    f072:	bne.n	f0c8 <__multiply+0xdc>
    f074:	cmp	fp, r8
    f076:	add.w	r9, r9, #4
    f07a:	bls.n	f10e <__multiply+0x122>
    f07c:	ldr.w	r1, [r8], #4
    f080:	uxth	r5, r1
    f082:	cmp	r5, #0
    f084:	beq.n	f070 <__multiply+0x84>
    f086:	mov	r6, sl
    f088:	mov	r4, r9
    f08a:	movs	r3, #0
    f08c:	ldr.w	r1, [r6], #4
    f090:	ldr	r2, [r4, #0]
    f092:	uxth.w	lr, r1
    f096:	uxth	r0, r2
    f098:	lsrs	r1, r1, #16
    f09a:	mla	r0, r5, lr, r0
    f09e:	lsrs	r2, r2, #16
    f0a0:	add	r3, r0
    f0a2:	mla	r2, r5, r1, r2
    f0a6:	add.w	r2, r2, r3, lsr #16
    f0aa:	uxth	r3, r3
    f0ac:	orr.w	r3, r3, r2, lsl #16
    f0b0:	cmp	ip, r6
    f0b2:	str.w	r3, [r4], #4
    f0b6:	mov.w	r3, r2, lsr #16
    f0ba:	bhi.n	f08c <__multiply+0xa0>
    f0bc:	str.w	r3, [r9, r7]
    f0c0:	ldr.w	r1, [r8, #-4]
    f0c4:	lsrs	r1, r1, #16
    f0c6:	beq.n	f074 <__multiply+0x88>
    f0c8:	ldr.w	r3, [r9]
    f0cc:	mov	r0, sl
    f0ce:	mov	r2, r3
    f0d0:	mov	r4, r9
    f0d2:	movs	r6, #0
    f0d4:	ldrh	r5, [r0, #0]
    f0d6:	lsrs	r2, r2, #16
    f0d8:	mla	r2, r1, r5, r2
    f0dc:	add	r6, r2
    f0de:	uxth	r3, r3
    f0e0:	orr.w	r3, r3, r6, lsl #16
    f0e4:	str.w	r3, [r4], #4
    f0e8:	ldr.w	r5, [r0], #4
    f0ec:	ldr	r2, [r4, #0]
    f0ee:	lsrs	r5, r5, #16
    f0f0:	uxth	r3, r2
    f0f2:	mla	r3, r1, r5, r3
    f0f6:	add.w	r3, r3, r6, lsr #16
    f0fa:	cmp	ip, r0
    f0fc:	mov.w	r6, r3, lsr #16
    f100:	bhi.n	f0d4 <__multiply+0xe8>
    f102:	cmp	fp, r8
    f104:	str.w	r3, [r9, r7]
    f108:	add.w	r9, r9, #4
    f10c:	bhi.n	f07c <__multiply+0x90>
    f10e:	ldrd	sl, r7, [sp, #8]
    f112:	cmp	r7, #0
    f114:	bgt.n	f11c <__multiply+0x130>
    f116:	b.n	f124 <__multiply+0x138>
    f118:	subs	r7, #1
    f11a:	beq.n	f124 <__multiply+0x138>
    f11c:	ldr.w	r3, [sl, #-4]!
    f120:	cmp	r3, #0
    f122:	beq.n	f118 <__multiply+0x12c>
    f124:	ldr	r3, [sp, #4]
    f126:	mov	r0, r3
    f128:	str	r7, [r3, #16]
    f12a:	add	sp, #20
    f12c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f130:	ldr	r3, [pc, #12]	; (f140 <__multiply+0x154>)
    f132:	ldr	r0, [pc, #16]	; (f144 <__multiply+0x158>)
    f134:	ldr	r2, [sp, #4]
    f136:	mov.w	r1, #354	; 0x162
    f13a:	bl	12fc0 <__assert_func>
    f13e:	nop
    f140:	.word	0x20000624
    f144:	.word	0x2000079c

0000f148 <__pow5mult>:
    f148:	ands.w	r3, r2, #3
    f14c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f150:	mov	r4, r2
    f152:	mov	r6, r0
    f154:	bne.n	f1bc <__pow5mult+0x74>
    f156:	mov	r5, r1
    f158:	asrs	r4, r4, #2
    f15a:	beq.n	f19e <__pow5mult+0x56>
    f15c:	ldr.w	r8, [r6, #64]	; 0x40
    f160:	cmp.w	r8, #0
    f164:	beq.n	f1ce <__pow5mult+0x86>
    f166:	lsls	r3, r4, #31
    f168:	mov.w	r7, #0
    f16c:	bmi.n	f17e <__pow5mult+0x36>
    f16e:	asrs	r4, r4, #1
    f170:	beq.n	f19e <__pow5mult+0x56>
    f172:	ldr.w	r0, [r8]
    f176:	cbz	r0, f1a4 <__pow5mult+0x5c>
    f178:	mov	r8, r0
    f17a:	lsls	r3, r4, #31
    f17c:	bpl.n	f16e <__pow5mult+0x26>
    f17e:	mov	r2, r8
    f180:	mov	r1, r5
    f182:	mov	r0, r6
    f184:	bl	efec <__multiply>
    f188:	cbz	r5, f1b8 <__pow5mult+0x70>
    f18a:	ldr	r1, [r5, #4]
    f18c:	ldr	r3, [r6, #68]	; 0x44
    f18e:	asrs	r4, r4, #1
    f190:	ldr.w	r2, [r3, r1, lsl #2]
    f194:	str	r2, [r5, #0]
    f196:	str.w	r5, [r3, r1, lsl #2]
    f19a:	mov	r5, r0
    f19c:	bne.n	f172 <__pow5mult+0x2a>
    f19e:	mov	r0, r5
    f1a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1a4:	mov	r2, r8
    f1a6:	mov	r1, r8
    f1a8:	mov	r0, r6
    f1aa:	bl	efec <__multiply>
    f1ae:	str.w	r0, [r8]
    f1b2:	str	r7, [r0, #0]
    f1b4:	mov	r8, r0
    f1b6:	b.n	f17a <__pow5mult+0x32>
    f1b8:	mov	r5, r0
    f1ba:	b.n	f16e <__pow5mult+0x26>
    f1bc:	subs	r3, #1
    f1be:	ldr	r2, [pc, #60]	; (f1fc <__pow5mult+0xb4>)
    f1c0:	ldr.w	r2, [r2, r3, lsl #2]
    f1c4:	movs	r3, #0
    f1c6:	bl	ed9c <__multadd>
    f1ca:	mov	r5, r0
    f1cc:	b.n	f158 <__pow5mult+0x10>
    f1ce:	movs	r1, #1
    f1d0:	mov	r0, r6
    f1d2:	bl	ed3c <_Balloc>
    f1d6:	mov	r8, r0
    f1d8:	cbz	r0, f1ec <__pow5mult+0xa4>
    f1da:	movs	r3, #1
    f1dc:	movw	r2, #625	; 0x271
    f1e0:	strd	r3, r2, [r0, #16]
    f1e4:	movs	r3, #0
    f1e6:	str	r0, [r6, #64]	; 0x40
    f1e8:	str	r3, [r0, #0]
    f1ea:	b.n	f166 <__pow5mult+0x1e>
    f1ec:	ldr	r3, [pc, #16]	; (f200 <__pow5mult+0xb8>)
    f1ee:	ldr	r0, [pc, #20]	; (f204 <__pow5mult+0xbc>)
    f1f0:	mov	r2, r8
    f1f2:	movw	r1, #325	; 0x145
    f1f6:	bl	12fc0 <__assert_func>
    f1fa:	nop
    f1fc:	.word	0x200077b0
    f200:	.word	0x20000624
    f204:	.word	0x2000079c

0000f208 <__lshift>:
    f208:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f20c:	mov	r5, r1
    f20e:	mov	r4, r2
    f210:	ldr	r7, [r5, #16]
    f212:	ldr	r3, [r5, #8]
    f214:	ldr	r1, [r1, #4]
    f216:	add.w	r7, r7, r2, asr #5
    f21a:	adds	r6, r7, #1
    f21c:	cmp	r6, r3
    f21e:	mov	r8, r0
    f220:	mov.w	r9, r2, asr #5
    f224:	ble.n	f230 <__lshift+0x28>
    f226:	lsls	r3, r3, #1
    f228:	cmp	r6, r3
    f22a:	add.w	r1, r1, #1
    f22e:	bgt.n	f226 <__lshift+0x1e>
    f230:	mov	r0, r8
    f232:	bl	ed3c <_Balloc>
    f236:	mov	ip, r0
    f238:	cmp	r0, #0
    f23a:	beq.n	f2e2 <__lshift+0xda>
    f23c:	cmp.w	r9, #0
    f240:	add.w	r2, r0, #20
    f244:	ble.n	f264 <__lshift+0x5c>
    f246:	add.w	r1, r9, #5
    f24a:	mov.w	lr, r1, lsl #2
    f24e:	mov	r3, r2
    f250:	add.w	r1, r0, r1, lsl #2
    f254:	movs	r0, #0
    f256:	str.w	r0, [r3], #4
    f25a:	cmp	r3, r1
    f25c:	bne.n	f256 <__lshift+0x4e>
    f25e:	sub.w	r3, lr, #20
    f262:	add	r2, r3
    f264:	ldr	r1, [r5, #16]
    f266:	add.w	r3, r5, #20
    f26a:	ands.w	lr, r4, #31
    f26e:	add.w	r1, r3, r1, lsl #2
    f272:	beq.n	f2d2 <__lshift+0xca>
    f274:	rsb	r9, lr, #32
    f278:	mov	r0, r2
    f27a:	mov.w	sl, #0
    f27e:	ldr	r4, [r3, #0]
    f280:	lsl.w	r4, r4, lr
    f284:	orr.w	r4, r4, sl
    f288:	str.w	r4, [r0], #4
    f28c:	ldr.w	r4, [r3], #4
    f290:	cmp	r1, r3
    f292:	lsr.w	sl, r4, r9
    f296:	bhi.n	f27e <__lshift+0x76>
    f298:	subs	r3, r1, r5
    f29a:	subs	r3, #21
    f29c:	bic.w	r3, r3, #3
    f2a0:	adds	r3, #4
    f2a2:	add.w	r0, r5, #21
    f2a6:	cmp	r1, r0
    f2a8:	it	cc
    f2aa:	movcc	r3, #4
    f2ac:	cmp.w	sl, #0
    f2b0:	it	ne
    f2b2:	movne	r7, r6
    f2b4:	str.w	sl, [r2, r3]
    f2b8:	ldr.w	r3, [r8, #68]	; 0x44
    f2bc:	ldr	r2, [r5, #4]
    f2be:	str.w	r7, [ip, #16]
    f2c2:	ldr.w	r1, [r3, r2, lsl #2]
    f2c6:	str	r1, [r5, #0]
    f2c8:	mov	r0, ip
    f2ca:	str.w	r5, [r3, r2, lsl #2]
    f2ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f2d2:	subs	r2, #4
    f2d4:	ldr.w	r0, [r3], #4
    f2d8:	str.w	r0, [r2, #4]!
    f2dc:	cmp	r1, r3
    f2de:	bhi.n	f2d4 <__lshift+0xcc>
    f2e0:	b.n	f2b8 <__lshift+0xb0>
    f2e2:	ldr	r3, [pc, #12]	; (f2f0 <__lshift+0xe8>)
    f2e4:	ldr	r0, [pc, #12]	; (f2f4 <__lshift+0xec>)
    f2e6:	mov	r2, ip
    f2e8:	mov.w	r1, #478	; 0x1de
    f2ec:	bl	12fc0 <__assert_func>
    f2f0:	.word	0x20000624
    f2f4:	.word	0x2000079c

0000f2f8 <__mcmp>:
    f2f8:	ldr	r3, [r1, #16]
    f2fa:	mov	ip, r0
    f2fc:	ldr	r0, [r0, #16]
    f2fe:	subs	r0, r0, r3
    f300:	bne.n	f330 <__mcmp+0x38>
    f302:	add.w	ip, ip, #20
    f306:	adds	r1, #20
    f308:	add.w	r2, ip, r3, lsl #2
    f30c:	push	{r4}
    f30e:	add.w	r3, r1, r3, lsl #2
    f312:	b.n	f318 <__mcmp+0x20>
    f314:	cmp	ip, r2
    f316:	bcs.n	f32a <__mcmp+0x32>
    f318:	ldr.w	r4, [r2, #-4]!
    f31c:	ldr.w	r1, [r3, #-4]!
    f320:	cmp	r4, r1
    f322:	beq.n	f314 <__mcmp+0x1c>
    f324:	bcs.n	f332 <__mcmp+0x3a>
    f326:	mov.w	r0, #4294967295
    f32a:	ldr.w	r4, [sp], #4
    f32e:	bx	lr
    f330:	bx	lr
    f332:	movs	r0, #1
    f334:	ldr.w	r4, [sp], #4
    f338:	bx	lr
    f33a:	nop

0000f33c <__mdiff>:
    f33c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f340:	ldr	r7, [r1, #16]
    f342:	ldr	r3, [r2, #16]
    f344:	subs	r7, r7, r3
    f346:	cmp	r7, #0
    f348:	mov	r6, r1
    f34a:	mov	r8, r2
    f34c:	bne.n	f44e <__mdiff+0x112>
    f34e:	add.w	r5, r1, #20
    f352:	adds	r2, #20
    f354:	add.w	r2, r2, r3, lsl #2
    f358:	add.w	r3, r5, r3, lsl #2
    f35c:	b.n	f362 <__mdiff+0x26>
    f35e:	cmp	r5, r3
    f360:	bcs.n	f454 <__mdiff+0x118>
    f362:	ldr.w	r1, [r3, #-4]!
    f366:	ldr.w	r4, [r2, #-4]!
    f36a:	cmp	r1, r4
    f36c:	beq.n	f35e <__mdiff+0x22>
    f36e:	bcc.n	f444 <__mdiff+0x108>
    f370:	ldr	r1, [r6, #4]
    f372:	bl	ed3c <_Balloc>
    f376:	mov	r9, r0
    f378:	cmp	r0, #0
    f37a:	beq.n	f46c <__mdiff+0x130>
    f37c:	ldr	r5, [r6, #16]
    f37e:	ldr.w	r2, [r8, #16]
    f382:	str	r7, [r0, #12]
    f384:	add.w	lr, r8, #20
    f388:	add.w	r0, r6, #20
    f38c:	add.w	sl, r9, #20
    f390:	add.w	r1, r6, #16
    f394:	add.w	r2, lr, r2, lsl #2
    f398:	add.w	r7, r0, r5, lsl #2
    f39c:	mov	r6, sl
    f39e:	mov.w	ip, #0
    f3a2:	ldr.w	r4, [lr], #4
    f3a6:	ldr.w	fp, [r1, #4]!
    f3aa:	uxth	r3, r4
    f3ac:	uxtah	ip, ip, fp
    f3b0:	sub.w	r3, ip, r3
    f3b4:	mov.w	ip, r4, lsr #16
    f3b8:	rsb	ip, ip, fp, lsr #16
    f3bc:	add.w	ip, ip, r3, asr #16
    f3c0:	uxth	r3, r3
    f3c2:	orr.w	r3, r3, ip, lsl #16
    f3c6:	cmp	r2, lr
    f3c8:	str.w	r3, [r6], #4
    f3cc:	mov.w	ip, ip, asr #16
    f3d0:	bhi.n	f3a2 <__mdiff+0x66>
    f3d2:	sub.w	r1, r2, r8
    f3d6:	subs	r1, #21
    f3d8:	add.w	r8, r8, #21
    f3dc:	cmp	r2, r8
    f3de:	bic.w	r4, r1, #3
    f3e2:	add.w	r4, r4, #4
    f3e6:	it	cc
    f3e8:	movcc	r4, #4
    f3ea:	add	r0, r4
    f3ec:	bic.w	r2, r1, #3
    f3f0:	it	cc
    f3f2:	movcc	r2, #0
    f3f4:	cmp	r7, r0
    f3f6:	add	r2, sl
    f3f8:	add	r4, sl
    f3fa:	bls.n	f42e <__mdiff+0xf2>
    f3fc:	mov	r6, r4
    f3fe:	mov	r1, r0
    f400:	ldr.w	r3, [r1], #4
    f404:	uxtah	ip, ip, r3
    f408:	mov.w	r2, ip, asr #16
    f40c:	add.w	r2, r2, r3, lsr #16
    f410:	uxth.w	ip, ip
    f414:	orr.w	r3, ip, r2, lsl #16
    f418:	cmp	r7, r1
    f41a:	str.w	r3, [r6], #4
    f41e:	mov.w	ip, r2, asr #16
    f422:	bhi.n	f400 <__mdiff+0xc4>
    f424:	subs	r7, #1
    f426:	subs	r7, r7, r0
    f428:	bic.w	r7, r7, #3
    f42c:	adds	r2, r4, r7
    f42e:	cbnz	r3, f43a <__mdiff+0xfe>
    f430:	ldr.w	r3, [r2, #-4]!
    f434:	subs	r5, #1
    f436:	cmp	r3, #0
    f438:	beq.n	f430 <__mdiff+0xf4>
    f43a:	str.w	r5, [r9, #16]
    f43e:	mov	r0, r9
    f440:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f444:	mov	r3, r6
    f446:	movs	r7, #1
    f448:	mov	r6, r8
    f44a:	mov	r8, r3
    f44c:	b.n	f370 <__mdiff+0x34>
    f44e:	blt.n	f444 <__mdiff+0x108>
    f450:	movs	r7, #0
    f452:	b.n	f370 <__mdiff+0x34>
    f454:	movs	r1, #0
    f456:	bl	ed3c <_Balloc>
    f45a:	mov	r9, r0
    f45c:	cbz	r0, f47a <__mdiff+0x13e>
    f45e:	movs	r2, #1
    f460:	movs	r3, #0
    f462:	strd	r2, r3, [r9, #16]
    f466:	mov	r0, r9
    f468:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f46c:	ldr	r3, [pc, #24]	; (f488 <__mdiff+0x14c>)
    f46e:	ldr	r0, [pc, #28]	; (f48c <__mdiff+0x150>)
    f470:	mov	r2, r9
    f472:	movw	r1, #581	; 0x245
    f476:	bl	12fc0 <__assert_func>
    f47a:	ldr	r3, [pc, #12]	; (f488 <__mdiff+0x14c>)
    f47c:	ldr	r0, [pc, #12]	; (f48c <__mdiff+0x150>)
    f47e:	mov	r2, r9
    f480:	movw	r1, #567	; 0x237
    f484:	bl	12fc0 <__assert_func>
    f488:	.word	0x20000624
    f48c:	.word	0x2000079c

0000f490 <__ulp>:
    f490:	sub	sp, #8
    f492:	vstr	d0, [sp]
    f496:	ldr	r3, [pc, #88]	; (f4f0 <__ulp+0x60>)
    f498:	ldr	r2, [sp, #4]
    f49a:	ands	r3, r2
    f49c:	sub.w	r3, r3, #54525952	; 0x3400000
    f4a0:	cmp	r3, #0
    f4a2:	ble.n	f4b2 <__ulp+0x22>
    f4a4:	movs	r2, #0
    f4a6:	mov	r1, r3
    f4a8:	mov	r0, r2
    f4aa:	vmov	d0, r0, r1
    f4ae:	add	sp, #8
    f4b0:	bx	lr
    f4b2:	negs	r3, r3
    f4b4:	cmp.w	r3, #20971520	; 0x1400000
    f4b8:	mov.w	r2, r3, asr #20
    f4bc:	bge.n	f4d2 <__ulp+0x42>
    f4be:	mov.w	r3, #524288	; 0x80000
    f4c2:	asrs	r3, r2
    f4c4:	movs	r2, #0
    f4c6:	mov	r1, r3
    f4c8:	mov	r0, r2
    f4ca:	vmov	d0, r0, r1
    f4ce:	add	sp, #8
    f4d0:	bx	lr
    f4d2:	sub.w	r3, r2, #20
    f4d6:	cmp	r3, #30
    f4d8:	itte	le
    f4da:	movle.w	r2, #2147483648	; 0x80000000
    f4de:	lsrle	r2, r3
    f4e0:	movgt	r2, #1
    f4e2:	movs	r3, #0
    f4e4:	mov	r1, r3
    f4e6:	mov	r0, r2
    f4e8:	vmov	d0, r0, r1
    f4ec:	add	sp, #8
    f4ee:	bx	lr
    f4f0:	.word	0x7ff00000

0000f4f4 <__b2d>:
    f4f4:	push	{r3, r4, r5, r6, r7, lr}
    f4f6:	ldr	r4, [r0, #16]
    f4f8:	add.w	r6, r0, #20
    f4fc:	add.w	r4, r6, r4, lsl #2
    f500:	subs	r7, r4, #4
    f502:	ldr.w	r5, [r4, #-4]
    f506:	mov	r0, r5
    f508:	bl	eef0 <__hi0bits>
    f50c:	rsb	r3, r0, #32
    f510:	cmp	r0, #10
    f512:	str	r3, [r1, #0]
    f514:	ble.n	f54e <__b2d+0x5a>
    f516:	cmp	r6, r7
    f518:	bcs.n	f532 <__b2d+0x3e>
    f51a:	subs	r0, #11
    f51c:	ldr.w	r1, [r4, #-8]
    f520:	bne.n	f580 <__b2d+0x8c>
    f522:	orr.w	r3, r5, #1069547520	; 0x3fc00000
    f526:	orr.w	r3, r3, #3145728	; 0x300000
    f52a:	mov	r2, r1
    f52c:	vmov	d0, r2, r3
    f530:	pop	{r3, r4, r5, r6, r7, pc}
    f532:	subs.w	r1, r0, #11
    f536:	beq.n	f522 <__b2d+0x2e>
    f538:	lsl.w	r1, r5, r1
    f53c:	orr.w	r3, r1, #1069547520	; 0x3fc00000
    f540:	movs	r1, #0
    f542:	orr.w	r3, r3, #3145728	; 0x300000
    f546:	mov	r2, r1
    f548:	vmov	d0, r2, r3
    f54c:	pop	{r3, r4, r5, r6, r7, pc}
    f54e:	rsb	ip, r0, #11
    f552:	lsr.w	r1, r5, ip
    f556:	cmp	r6, r7
    f558:	orr.w	r3, r1, #1069547520	; 0x3fc00000
    f55c:	it	cc
    f55e:	ldrcc.w	r1, [r4, #-8]
    f562:	add.w	r0, r0, #21
    f566:	ite	cc
    f568:	lsrcc.w	r1, r1, ip
    f56c:	movcs	r1, #0
    f56e:	lsl.w	r0, r5, r0
    f572:	orrs	r1, r0
    f574:	orr.w	r3, r3, #3145728	; 0x300000
    f578:	mov	r2, r1
    f57a:	vmov	d0, r2, r3
    f57e:	pop	{r3, r4, r5, r6, r7, pc}
    f580:	rsb	ip, r0, #32
    f584:	lsls	r5, r0
    f586:	lsr.w	r3, r1, ip
    f58a:	orr.w	r7, r5, r3
    f58e:	sub.w	r5, r4, #8
    f592:	cmp	r6, r5
    f594:	lsl.w	r1, r1, r0
    f598:	itt	cc
    f59a:	ldrcc.w	r0, [r4, #-12]
    f59e:	lsrcc.w	r0, r0, ip
    f5a2:	orr.w	r3, r7, #1069547520	; 0x3fc00000
    f5a6:	it	cc
    f5a8:	orrcc	r1, r0
    f5aa:	orr.w	r3, r3, #3145728	; 0x300000
    f5ae:	mov	r2, r1
    f5b0:	vmov	d0, r2, r3
    f5b4:	pop	{r3, r4, r5, r6, r7, pc}
    f5b6:	nop

0000f5b8 <__d2b>:
    f5b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f5bc:	mov	r8, r1
    f5be:	sub	sp, #12
    f5c0:	movs	r1, #1
    f5c2:	vmov	r6, r7, d0
    f5c6:	mov	r5, r2
    f5c8:	bl	ed3c <_Balloc>
    f5cc:	mov	r4, r0
    f5ce:	cmp	r0, #0
    f5d0:	beq.n	f676 <__d2b+0xbe>
    f5d2:	ubfx	r9, r7, #20, #11
    f5d6:	ubfx	r3, r7, #0, #20
    f5da:	cmp.w	r9, #0
    f5de:	beq.n	f5e4 <__d2b+0x2c>
    f5e0:	orr.w	r3, r3, #1048576	; 0x100000
    f5e4:	cmp	r6, #0
    f5e6:	str	r3, [sp, #4]
    f5e8:	bne.n	f61c <__d2b+0x64>
    f5ea:	add	r0, sp, #4
    f5ec:	bl	ef30 <__lo0bits>
    f5f0:	ldr	r2, [sp, #4]
    f5f2:	str	r2, [r4, #20]
    f5f4:	movs	r2, #1
    f5f6:	add.w	r3, r0, #32
    f5fa:	str	r2, [r4, #16]
    f5fc:	cmp.w	r9, #0
    f600:	beq.n	f64e <__d2b+0x96>
    f602:	subw	r9, r9, #1075	; 0x433
    f606:	add.w	r2, r9, r3
    f60a:	mov	r0, r4
    f60c:	rsb	r3, r3, #53	; 0x35
    f610:	str.w	r2, [r8]
    f614:	str	r3, [r5, #0]
    f616:	add	sp, #12
    f618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f61c:	mov	r0, sp
    f61e:	str	r6, [sp, #0]
    f620:	bl	ef30 <__lo0bits>
    f624:	mov	r3, r0
    f626:	cbz	r0, f66e <__d2b+0xb6>
    f628:	ldrd	r0, r2, [sp]
    f62c:	rsb	r1, r3, #32
    f630:	lsl.w	r1, r2, r1
    f634:	orrs	r1, r0
    f636:	lsrs	r2, r3
    f638:	str	r1, [r4, #20]
    f63a:	str	r2, [sp, #4]
    f63c:	cmp	r2, #0
    f63e:	str	r2, [r4, #24]
    f640:	ite	ne
    f642:	movne	r2, #2
    f644:	moveq	r2, #1
    f646:	str	r2, [r4, #16]
    f648:	cmp.w	r9, #0
    f64c:	bne.n	f602 <__d2b+0x4a>
    f64e:	subw	r3, r3, #1074	; 0x432
    f652:	str.w	r3, [r8]
    f656:	add.w	r3, r4, r2, lsl #2
    f65a:	ldr	r0, [r3, #16]
    f65c:	bl	eef0 <__hi0bits>
    f660:	rsb	r3, r0, r2, lsl #5
    f664:	mov	r0, r4
    f666:	str	r3, [r5, #0]
    f668:	add	sp, #12
    f66a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f66e:	ldr	r2, [sp, #0]
    f670:	str	r2, [r4, #20]
    f672:	ldr	r2, [sp, #4]
    f674:	b.n	f63c <__d2b+0x84>
    f676:	ldr	r3, [pc, #12]	; (f684 <__d2b+0xcc>)
    f678:	ldr	r0, [pc, #12]	; (f688 <__d2b+0xd0>)
    f67a:	mov	r2, r4
    f67c:	movw	r1, #783	; 0x30f
    f680:	bl	12fc0 <__assert_func>
    f684:	.word	0x20000624
    f688:	.word	0x2000079c

0000f68c <__ratio>:
    f68c:	push	{r4, r5, r6, r7, lr}
    f68e:	sub	sp, #12
    f690:	mov	r6, r1
    f692:	mov	r1, sp
    f694:	mov	r7, r0
    f696:	bl	f4f4 <__b2d>
    f69a:	add	r1, sp, #4
    f69c:	mov	r0, r6
    f69e:	vmov	r4, r5, d0
    f6a2:	vmov.f64	d7, d0
    f6a6:	bl	f4f4 <__b2d>
    f6aa:	ldr	r3, [r6, #16]
    f6ac:	ldr	r2, [r7, #16]
    f6ae:	subs	r2, r2, r3
    f6b0:	ldrd	r3, r1, [sp]
    f6b4:	subs	r3, r3, r1
    f6b6:	add.w	r3, r3, r2, lsl #5
    f6ba:	cmp	r3, #0
    f6bc:	ble.n	f6d2 <__ratio+0x46>
    f6be:	vmov	r2, s15
    f6c2:	add.w	r5, r2, r3, lsl #20
    f6c6:	vmov	d7, r4, r5
    f6ca:	vdiv.f64	d0, d7, d0
    f6ce:	add	sp, #12
    f6d0:	pop	{r4, r5, r6, r7, pc}
    f6d2:	vmov	r2, s1
    f6d6:	vmov	r0, r1, d0
    f6da:	rsb	r3, r3, r3, lsl #12
    f6de:	add.w	r1, r2, r3, lsl #20
    f6e2:	vmov	d0, r0, r1
    f6e6:	vdiv.f64	d0, d7, d0
    f6ea:	add	sp, #12
    f6ec:	pop	{r4, r5, r6, r7, pc}
    f6ee:	nop

0000f6f0 <__copybits>:
    f6f0:	subs	r1, #1
    f6f2:	asrs	r1, r1, #5
    f6f4:	add.w	ip, r1, #1
    f6f8:	ldr	r1, [r2, #16]
    f6fa:	add.w	r3, r2, #20
    f6fe:	add.w	r1, r3, r1, lsl #2
    f702:	cmp	r3, r1
    f704:	add.w	ip, r0, ip, lsl #2
    f708:	bcs.n	f73a <__copybits+0x4a>
    f70a:	push	{r4, lr}
    f70c:	sub.w	lr, r0, #4
    f710:	ldr.w	r4, [r3], #4
    f714:	str.w	r4, [lr, #4]!
    f718:	cmp	r1, r3
    f71a:	bhi.n	f710 <__copybits+0x20>
    f71c:	subs	r2, r1, r2
    f71e:	sub.w	r3, r2, #21
    f722:	bic.w	r3, r3, #3
    f726:	adds	r3, #4
    f728:	add	r0, r3
    f72a:	cmp	ip, r0
    f72c:	bls.n	f738 <__copybits+0x48>
    f72e:	movs	r3, #0
    f730:	str.w	r3, [r0], #4
    f734:	cmp	ip, r0
    f736:	bhi.n	f730 <__copybits+0x40>
    f738:	pop	{r4, pc}
    f73a:	cmp	ip, r0
    f73c:	bls.n	f74a <__copybits+0x5a>
    f73e:	movs	r3, #0
    f740:	str.w	r3, [r0], #4
    f744:	cmp	ip, r0
    f746:	bhi.n	f740 <__copybits+0x50>
    f748:	bx	lr
    f74a:	bx	lr

0000f74c <__any_on>:
    f74c:	ldr	r3, [r0, #16]
    f74e:	asrs	r2, r1, #5
    f750:	cmp	r3, r2
    f752:	add.w	r0, r0, #20
    f756:	bge.n	f76c <__any_on+0x20>
    f758:	add.w	r3, r0, r3, lsl #2
    f75c:	b.n	f764 <__any_on+0x18>
    f75e:	ldr.w	r2, [r3, #-4]!
    f762:	cbnz	r2, f796 <__any_on+0x4a>
    f764:	cmp	r3, r0
    f766:	bhi.n	f75e <__any_on+0x12>
    f768:	movs	r0, #0
    f76a:	bx	lr
    f76c:	ble.n	f790 <__any_on+0x44>
    f76e:	ands.w	r1, r1, #31
    f772:	beq.n	f790 <__any_on+0x44>
    f774:	push	{r4}
    f776:	ldr.w	r4, [r0, r2, lsl #2]
    f77a:	add.w	r3, r0, r2, lsl #2
    f77e:	lsr.w	r2, r4, r1
    f782:	lsls	r2, r1
    f784:	cmp	r4, r2
    f786:	beq.n	f7a2 <__any_on+0x56>
    f788:	movs	r0, #1
    f78a:	ldr.w	r4, [sp], #4
    f78e:	bx	lr
    f790:	add.w	r3, r0, r2, lsl #2
    f794:	b.n	f764 <__any_on+0x18>
    f796:	movs	r0, #1
    f798:	bx	lr
    f79a:	ldr.w	r2, [r3, #-4]!
    f79e:	cmp	r2, #0
    f7a0:	bne.n	f788 <__any_on+0x3c>
    f7a2:	cmp	r3, r0
    f7a4:	bhi.n	f79a <__any_on+0x4e>
    f7a6:	movs	r0, #0
    f7a8:	ldr.w	r4, [sp], #4
    f7ac:	bx	lr
    f7ae:	nop

0000f7b0 <__ascii_wctomb>:
    f7b0:	cbz	r1, f7c6 <__ascii_wctomb+0x16>
    f7b2:	cmp	r2, #255	; 0xff
    f7b4:	bhi.n	f7bc <__ascii_wctomb+0xc>
    f7b6:	strb	r2, [r1, #0]
    f7b8:	movs	r0, #1
    f7ba:	bx	lr
    f7bc:	movs	r3, #138	; 0x8a
    f7be:	str	r3, [r0, #0]
    f7c0:	mov.w	r0, #4294967295
    f7c4:	bx	lr
    f7c6:	mov	r0, r1
    f7c8:	bx	lr
    f7ca:	nop

0000f7cc <fcvtbuf>:
    f7cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f7d0:	mov	r6, r1
    f7d2:	ldr	r1, [pc, #152]	; (f86c <fcvtbuf+0xa0>)
    f7d4:	sub	sp, #28
    f7d6:	ldr	r7, [r1, #0]
    f7d8:	mov	r4, r0
    f7da:	mov	r8, r2
    f7dc:	mov	r5, r3
    f7de:	cbz	r3, f836 <fcvtbuf+0x6a>
    f7e0:	add	r2, sp, #20
    f7e2:	mov	r3, r6
    f7e4:	str	r2, [sp, #4]
    f7e6:	movs	r1, #3
    f7e8:	mov	r2, r4
    f7ea:	str.w	r8, [sp]
    f7ee:	mov	r0, r7
    f7f0:	bl	131a0 <_dtoa_r>
    f7f4:	ldr	r3, [sp, #20]
    f7f6:	ldr	r2, [r6, #0]
    f7f8:	cmp	r0, r3
    f7fa:	mov	ip, r0
    f7fc:	rsb	r2, r2, #0
    f800:	mov	r1, r5
    f802:	bcs.n	f818 <fcvtbuf+0x4c>
    f804:	subs	r0, r2, r0
    f806:	ldrb.w	r3, [ip], #1
    f80a:	strb.w	r3, [r1], #1
    f80e:	ldr	r3, [sp, #20]
    f810:	cmp	r3, ip
    f812:	add.w	r2, r0, ip
    f816:	bhi.n	f806 <fcvtbuf+0x3a>
    f818:	cmp	r4, r2
    f81a:	ble.n	f866 <fcvtbuf+0x9a>
    f81c:	subs	r2, r4, r2
    f81e:	add	r2, r1
    f820:	movs	r3, #48	; 0x30
    f822:	strb.w	r3, [r1], #1
    f826:	cmp	r1, r2
    f828:	bne.n	f822 <fcvtbuf+0x56>
    f82a:	movs	r3, #0
    f82c:	strb	r3, [r2, #0]
    f82e:	mov	r0, r5
    f830:	add	sp, #28
    f832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f836:	ldr	r2, [r7, #72]	; 0x48
    f838:	add.w	r3, r0, #35	; 0x23
    f83c:	cmp	r2, r3
    f83e:	ble.n	f844 <fcvtbuf+0x78>
    f840:	ldr	r5, [r7, #76]	; 0x4c
    f842:	b.n	f7e0 <fcvtbuf+0x14>
    f844:	add.w	r9, r0, #36	; 0x24
    f848:	ldr	r1, [r7, #76]	; 0x4c
    f84a:	mov	r2, r9
    f84c:	mov	r0, r7
    f84e:	vstr	d0, [sp, #8]
    f852:	bl	c050 <_realloc_r>
    f856:	mov	r5, r0
    f858:	cmp	r0, #0
    f85a:	beq.n	f82e <fcvtbuf+0x62>
    f85c:	strd	r9, r0, [r7, #72]	; 0x48
    f860:	vldr	d0, [sp, #8]
    f864:	b.n	f7e0 <fcvtbuf+0x14>
    f866:	mov	r2, r1
    f868:	b.n	f82a <fcvtbuf+0x5e>
    f86a:	nop
    f86c:	.word	0x20008eec

0000f870 <_svfprintf_r>:
    f870:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f874:	vpush	{d8-d11}
    f878:	sub	sp, #324	; 0x144
    f87a:	mov	r4, r1
    f87c:	vmov	s22, r1
    f880:	mov	r8, r2
    f882:	str	r3, [sp, #32]
    f884:	mov	fp, r0
    f886:	bl	12f3c <_localeconv_r>
    f88a:	ldr	r3, [r0, #0]
    f88c:	str	r3, [sp, #72]	; 0x48
    f88e:	mov	r0, r3
    f890:	bl	e0c0 <strlen>
    f894:	add	r7, sp, #128	; 0x80
    f896:	str	r0, [sp, #64]	; 0x40
    f898:	movs	r2, #8
    f89a:	movs	r1, #0
    f89c:	mov	r0, r7
    f89e:	bl	942c <memset>
    f8a2:	ldrh	r3, [r4, #12]
    f8a4:	lsls	r3, r3, #24
    f8a6:	bpl.n	f8b0 <_svfprintf_r+0x40>
    f8a8:	ldr	r3, [r4, #16]
    f8aa:	cmp	r3, #0
    f8ac:	beq.w	1075a <_svfprintf_r+0xeea>
    f8b0:	movs	r3, #0
    f8b2:	vldr	d8, [pc, #524]	; fac0 <_svfprintf_r+0x250>
    f8b6:	vldr	d9, [pc, #528]	; fac8 <_svfprintf_r+0x258>
    f8ba:	strd	r3, r3, [sp, #148]	; 0x94
    f8be:	strd	r3, r3, [sp, #76]	; 0x4c
    f8c2:	strd	r3, r3, [sp, #84]	; 0x54
    f8c6:	add	r2, sp, #156	; 0x9c
    f8c8:	str	r3, [sp, #56]	; 0x38
    f8ca:	str	r2, [sp, #144]	; 0x90
    f8cc:	mov	sl, r2
    f8ce:	str	r3, [sp, #68]	; 0x44
    f8d0:	str	r3, [sp, #16]
    f8d2:	mov	r4, r8
    f8d4:	mov	r9, r4
    f8d6:	ldr	r3, [pc, #504]	; (fad0 <_svfprintf_r+0x260>)
    f8d8:	ldr.w	r5, [r3, #228]	; 0xe4
    f8dc:	bl	db3c <__locale_mb_cur_max>
    f8e0:	mov	r2, r9
    f8e2:	mov	r3, r0
    f8e4:	add	r1, sp, #112	; 0x70
    f8e6:	str	r7, [sp, #0]
    f8e8:	mov	r0, fp
    f8ea:	blx	r5
    f8ec:	cmp	r0, #0
    f8ee:	beq.w	fa52 <_svfprintf_r+0x1e2>
    f8f2:	blt.w	fa42 <_svfprintf_r+0x1d2>
    f8f6:	ldr	r2, [sp, #112]	; 0x70
    f8f8:	cmp	r2, #37	; 0x25
    f8fa:	mov	r3, r0
    f8fc:	beq.n	f902 <_svfprintf_r+0x92>
    f8fe:	add	r9, r3
    f900:	b.n	f8d6 <_svfprintf_r+0x66>
    f902:	subs.w	r5, r9, r4
    f906:	mov	r6, r0
    f908:	bne.w	fa5a <_svfprintf_r+0x1ea>
    f90c:	movs	r3, #0
    f90e:	mov.w	r2, #4294967295
    f912:	strb.w	r3, [sp, #103]	; 0x67
    f916:	mov	r8, r3
    f918:	str	r3, [sp, #24]
    f91a:	add.w	r9, r9, #1
    f91e:	ldrb.w	r3, [r9]
    f922:	str	r2, [sp, #12]
    f924:	movs	r5, #43	; 0x2b
    f926:	movs	r6, #32
    f928:	add.w	r9, r9, #1
    f92c:	sub.w	r2, r3, #32
    f930:	cmp	r2, #90	; 0x5a
    f932:	bhi.w	fad4 <_svfprintf_r+0x264>
    f936:	tbh	[pc, r2, lsl #1]
    f93a:	.short	0x02e8
    f93c:	.word	0x00cd00cd
    f940:	.word	0x00cd02e3
    f944:	.word	0x00cd00cd
    f948:	.word	0x00cd006a
    f94c:	.word	0x020500cd
    f950:	.word	0x00cd0284
    f954:	.word	0x02c90210
    f958:	.word	0x02bd00cd
    f95c:	.word	0x005b005b
    f960:	.word	0x005b005b
    f964:	.word	0x005b005b
    f968:	.word	0x005b005b
    f96c:	.word	0x00cd005b
    f970:	.word	0x00cd00cd
    f974:	.word	0x00cd00cd
    f978:	.word	0x00cd00cd
    f97c:	.word	0x00cd0153
    f980:	.word	0x021a0183
    f984:	.word	0x01530153
    f988:	.word	0x00cd0153
    f98c:	.word	0x00cd00cd
    f990:	.word	0x021500cd
    f994:	.word	0x00cd00cd
    f998:	.word	0x00cd0296
    f99c:	.word	0x00cd00cd
    f9a0:	.word	0x00cd01ab
    f9a4:	.word	0x00cd02aa
    f9a8:	.word	0x06e300cd
    f9ac:	.word	0x00cd00cd
    f9b0:	.word	0x00cd00cd
    f9b4:	.word	0x00cd00cd
    f9b8:	.word	0x00cd00cd
    f9bc:	.word	0x00cd0153
    f9c0:	.word	0x01de0183
    f9c4:	.word	0x01530153
    f9c8:	.word	0x02770153
    f9cc:	.word	0x007f01de
    f9d0:	.word	0x028900cd
    f9d4:	.word	0x025f00cd
    f9d8:	.word	0x022f06e0
    f9dc:	.word	0x00cd007f
    f9e0:	.word	0x007c01ab
    f9e4:	.word	0x00cd06b8
    f9e8:	.word	0x06bd00cd
    f9ec:	.word	0x007c00cd
    f9f0:	sub.w	r2, r3, #48	; 0x30
    f9f4:	movs	r1, #0
    f9f6:	ldrb.w	r3, [r9], #1
    f9fa:	add.w	r1, r1, r1, lsl #2
    f9fe:	add.w	r1, r2, r1, lsl #1
    fa02:	sub.w	r2, r3, #48	; 0x30
    fa06:	cmp	r2, #9
    fa08:	bls.n	f9f6 <_svfprintf_r+0x186>
    fa0a:	str	r1, [sp, #24]
    fa0c:	b.n	f92c <_svfprintf_r+0xbc>
    fa0e:	mov	r0, fp
    fa10:	bl	12f3c <_localeconv_r>
    fa14:	ldr	r3, [r0, #4]
    fa16:	str	r3, [sp, #84]	; 0x54
    fa18:	mov	r0, r3
    fa1a:	bl	e0c0 <strlen>
    fa1e:	str	r0, [sp, #88]	; 0x58
    fa20:	mov	r0, fp
    fa22:	bl	12f3c <_localeconv_r>
    fa26:	ldr	r3, [r0, #8]
    fa28:	str	r3, [sp, #76]	; 0x4c
    fa2a:	ldr	r3, [sp, #88]	; 0x58
    fa2c:	cmp	r3, #0
    fa2e:	bne.w	1068c <_svfprintf_r+0xe1c>
    fa32:	ldrb.w	r3, [r9]
    fa36:	b.n	f928 <_svfprintf_r+0xb8>
    fa38:	ldrb.w	r3, [r9]
    fa3c:	orr.w	r8, r8, #32
    fa40:	b.n	f928 <_svfprintf_r+0xb8>
    fa42:	movs	r2, #8
    fa44:	movs	r1, #0
    fa46:	mov	r0, r7
    fa48:	bl	942c <memset>
    fa4c:	movs	r3, #1
    fa4e:	add	r9, r3
    fa50:	b.n	f8d6 <_svfprintf_r+0x66>
    fa52:	subs.w	r5, r9, r4
    fa56:	mov	r6, r0
    fa58:	beq.n	fa7e <_svfprintf_r+0x20e>
    fa5a:	ldr	r3, [sp, #152]	; 0x98
    fa5c:	add	r3, r5
    fa5e:	str	r3, [sp, #152]	; 0x98
    fa60:	ldr	r3, [sp, #148]	; 0x94
    fa62:	adds	r3, #1
    fa64:	cmp	r3, #7
    fa66:	strd	r4, r5, [sl]
    fa6a:	str	r3, [sp, #148]	; 0x94
    fa6c:	bgt.n	faa8 <_svfprintf_r+0x238>
    fa6e:	add.w	sl, sl, #8
    fa72:	ldr	r3, [sp, #16]
    fa74:	add	r3, r5
    fa76:	str	r3, [sp, #16]
    fa78:	cmp	r6, #0
    fa7a:	bne.w	f90c <_svfprintf_r+0x9c>
    fa7e:	ldr	r3, [sp, #152]	; 0x98
    fa80:	cmp	r3, #0
    fa82:	bne.w	10e9c <_svfprintf_r+0x162c>
    fa86:	vmov	r3, s22
    fa8a:	ldrsh.w	r3, [r3, #12]
    fa8e:	tst.w	r3, #64	; 0x40
    fa92:	ldr	r3, [sp, #16]
    fa94:	it	ne
    fa96:	movne.w	r3, #4294967295
    fa9a:	str	r3, [sp, #16]
    fa9c:	ldr	r0, [sp, #16]
    fa9e:	add	sp, #324	; 0x144
    faa0:	vpop	{d8-d11}
    faa4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    faa8:	vmov	r1, s22
    faac:	add	r2, sp, #144	; 0x90
    faae:	mov	r0, fp
    fab0:	bl	14588 <__ssprint_r>
    fab4:	cmp	r0, #0
    fab6:	bne.n	fa86 <_svfprintf_r+0x216>
    fab8:	add.w	sl, sp, #156	; 0x9c
    fabc:	b.n	fa72 <_svfprintf_r+0x202>
    fabe:	nop
	...
    fac8:	.word	0xffffffff
    facc:	.word	0x7fefffff
    fad0:	.word	0x20008964
    fad4:	str	r3, [sp, #44]	; 0x2c
    fad6:	cmp	r3, #0
    fad8:	beq.n	fa7e <_svfprintf_r+0x20e>
    fada:	movs	r1, #0
    fadc:	strd	r1, r1, [sp, #48]	; 0x30
    fae0:	strb.w	r3, [sp, #220]	; 0xdc
    fae4:	movs	r3, #1
    fae6:	strb.w	r1, [sp, #103]	; 0x67
    faea:	str	r3, [sp, #8]
    faec:	str	r1, [sp, #28]
    faee:	str	r3, [sp, #20]
    faf0:	str	r1, [sp, #12]
    faf2:	str	r1, [sp, #60]	; 0x3c
    faf4:	add	r4, sp, #220	; 0xdc
    faf6:	ands.w	r3, r8, #2
    fafa:	str	r3, [sp, #36]	; 0x24
    fafc:	beq.n	fb04 <_svfprintf_r+0x294>
    fafe:	ldr	r3, [sp, #8]
    fb00:	adds	r3, #2
    fb02:	str	r3, [sp, #8]
    fb04:	ands.w	r3, r8, #132	; 0x84
    fb08:	str	r3, [sp, #40]	; 0x28
    fb0a:	bne.n	fb18 <_svfprintf_r+0x2a8>
    fb0c:	ldr	r3, [sp, #24]
    fb0e:	ldr	r2, [sp, #8]
    fb10:	subs	r5, r3, r2
    fb12:	cmp	r5, #0
    fb14:	bgt.w	101ea <_svfprintf_r+0x97a>
    fb18:	ldr	r2, [sp, #152]	; 0x98
    fb1a:	cbz	r1, fb40 <_svfprintf_r+0x2d0>
    fb1c:	ldr	r1, [sp, #148]	; 0x94
    fb1e:	add.w	r0, sp, #103	; 0x67
    fb22:	adds	r1, #1
    fb24:	adds	r2, #1
    fb26:	str.w	r0, [sl]
    fb2a:	cmp	r1, #7
    fb2c:	mov.w	r0, #1
    fb30:	str	r2, [sp, #152]	; 0x98
    fb32:	str	r1, [sp, #148]	; 0x94
    fb34:	str.w	r0, [sl, #4]
    fb38:	bgt.w	10280 <_svfprintf_r+0xa10>
    fb3c:	add.w	sl, sl, #8
    fb40:	ldr	r3, [sp, #36]	; 0x24
    fb42:	cbz	r3, fb66 <_svfprintf_r+0x2f6>
    fb44:	ldr	r3, [sp, #148]	; 0x94
    fb46:	add	r1, sp, #104	; 0x68
    fb48:	adds	r3, #1
    fb4a:	adds	r2, #2
    fb4c:	str.w	r1, [sl]
    fb50:	cmp	r3, #7
    fb52:	mov.w	r1, #2
    fb56:	str	r2, [sp, #152]	; 0x98
    fb58:	str	r3, [sp, #148]	; 0x94
    fb5a:	str.w	r1, [sl, #4]
    fb5e:	bgt.w	102a8 <_svfprintf_r+0xa38>
    fb62:	add.w	sl, sl, #8
    fb66:	ldr	r3, [sp, #40]	; 0x28
    fb68:	cmp	r3, #128	; 0x80
    fb6a:	beq.w	10046 <_svfprintf_r+0x7d6>
    fb6e:	ldr	r3, [sp, #12]
    fb70:	ldr	r1, [sp, #20]
    fb72:	subs	r5, r3, r1
    fb74:	cmp	r5, #0
    fb76:	bgt.w	100c4 <_svfprintf_r+0x854>
    fb7a:	tst.w	r8, #256	; 0x100
    fb7e:	bne.w	ff9c <_svfprintf_r+0x72c>
    fb82:	ldr	r3, [sp, #20]
    fb84:	str.w	r3, [sl, #4]
    fb88:	add	r2, r3
    fb8a:	ldr	r3, [sp, #148]	; 0x94
    fb8c:	str.w	r4, [sl]
    fb90:	adds	r3, #1
    fb92:	cmp	r3, #7
    fb94:	str	r2, [sp, #152]	; 0x98
    fb96:	str	r3, [sp, #148]	; 0x94
    fb98:	bgt.w	101d2 <_svfprintf_r+0x962>
    fb9c:	add.w	sl, sl, #8
    fba0:	tst.w	r8, #4
    fba4:	beq.n	fbb2 <_svfprintf_r+0x342>
    fba6:	ldr	r3, [sp, #24]
    fba8:	ldr	r1, [sp, #8]
    fbaa:	subs	r4, r3, r1
    fbac:	cmp	r4, #0
    fbae:	bgt.w	102c2 <_svfprintf_r+0xa52>
    fbb2:	ldr	r3, [sp, #16]
    fbb4:	ldr	r1, [sp, #24]
    fbb6:	ldr	r0, [sp, #8]
    fbb8:	cmp	r1, r0
    fbba:	ite	ge
    fbbc:	addge	r3, r3, r1
    fbbe:	addlt	r3, r3, r0
    fbc0:	str	r3, [sp, #16]
    fbc2:	cmp	r2, #0
    fbc4:	bne.w	10128 <_svfprintf_r+0x8b8>
    fbc8:	movs	r3, #0
    fbca:	str	r3, [sp, #148]	; 0x94
    fbcc:	ldr	r3, [sp, #28]
    fbce:	cbz	r3, fbd8 <_svfprintf_r+0x368>
    fbd0:	ldr	r1, [sp, #28]
    fbd2:	mov	r0, fp
    fbd4:	bl	e2e4 <_free_r>
    fbd8:	add.w	sl, sp, #156	; 0x9c
    fbdc:	mov	r4, r9
    fbde:	b.n	f8d4 <_svfprintf_r+0x64>
    fbe0:	str	r3, [sp, #44]	; 0x2c
    fbe2:	ldr	r3, [sp, #32]
    fbe4:	adds	r3, #7
    fbe6:	bic.w	r3, r3, #7
    fbea:	vldmia	r3!, {d8}
    fbee:	vabs.f64	d7, d8
    fbf2:	vcmp.f64	d7, d9
    fbf6:	vmrs	APSR_nzcv, fpscr
    fbfa:	str	r3, [sp, #32]
    fbfc:	ble.w	105d2 <_svfprintf_r+0xd62>
    fc00:	vcmpe.f64	d8, #0.0
    fc04:	vmrs	APSR_nzcv, fpscr
    fc08:	bmi.w	10cbe <_svfprintf_r+0x144e>
    fc0c:	ldrb.w	r1, [sp, #103]	; 0x67
    fc10:	ldr	r4, [pc, #684]	; (fec0 <_svfprintf_r+0x650>)
    fc12:	ldr	r3, [pc, #688]	; (fec4 <_svfprintf_r+0x654>)
    fc14:	bic.w	r8, r8, #128	; 0x80
    fc18:	ldr	r2, [sp, #44]	; 0x2c
    fc1a:	cmp	r2, #71	; 0x47
    fc1c:	it	gt
    fc1e:	movgt	r4, r3
    fc20:	movs	r3, #0
    fc22:	strd	r3, r3, [sp, #48]	; 0x30
    fc26:	movs	r2, #3
    fc28:	str	r3, [sp, #28]
    fc2a:	str	r2, [sp, #8]
    fc2c:	str	r2, [sp, #20]
    fc2e:	str	r3, [sp, #12]
    fc30:	str	r3, [sp, #60]	; 0x3c
    fc32:	cmp	r1, #0
    fc34:	beq.w	faf6 <_svfprintf_r+0x286>
    fc38:	ldr	r3, [sp, #8]
    fc3a:	adds	r3, #1
    fc3c:	str	r3, [sp, #8]
    fc3e:	b.n	faf6 <_svfprintf_r+0x286>
    fc40:	cmp	r3, #67	; 0x43
    fc42:	str	r3, [sp, #44]	; 0x2c
    fc44:	beq.n	fc4e <_svfprintf_r+0x3de>
    fc46:	tst.w	r8, #16
    fc4a:	beq.w	10708 <_svfprintf_r+0xe98>
    fc4e:	ldr	r5, [sp, #32]
    fc50:	movs	r2, #8
    fc52:	movs	r1, #0
    fc54:	add	r0, sp, #136	; 0x88
    fc56:	add	r4, sp, #220	; 0xdc
    fc58:	bl	942c <memset>
    fc5c:	add	r3, sp, #136	; 0x88
    fc5e:	ldr.w	r2, [r5], #4
    fc62:	mov	r1, r4
    fc64:	mov	r0, fp
    fc66:	bl	14334 <_wcrtomb_r>
    fc6a:	mov	r3, r0
    fc6c:	adds	r3, #1
    fc6e:	str	r0, [sp, #20]
    fc70:	beq.w	11250 <_svfprintf_r+0x19e0>
    fc74:	ldr	r3, [sp, #20]
    fc76:	str	r5, [sp, #32]
    fc78:	bic.w	r3, r3, r3, asr #31
    fc7c:	str	r3, [sp, #8]
    fc7e:	movs	r1, #0
    fc80:	strd	r1, r1, [sp, #48]	; 0x30
    fc84:	strb.w	r1, [sp, #103]	; 0x67
    fc88:	str	r1, [sp, #28]
    fc8a:	str	r1, [sp, #12]
    fc8c:	str	r1, [sp, #60]	; 0x3c
    fc8e:	b.n	faf6 <_svfprintf_r+0x286>
    fc90:	str	r3, [sp, #44]	; 0x2c
    fc92:	ldr	r3, [sp, #32]
    fc94:	mov	r2, r3
    fc96:	movs	r3, #0
    fc98:	strb.w	r3, [sp, #103]	; 0x67
    fc9c:	mov	r3, r2
    fc9e:	ldr.w	r4, [r3], #4
    fca2:	str	r3, [sp, #32]
    fca4:	cmp	r4, #0
    fca6:	beq.w	1073a <_svfprintf_r+0xeca>
    fcaa:	ldr	r3, [sp, #44]	; 0x2c
    fcac:	cmp	r3, #83	; 0x53
    fcae:	beq.w	10a8a <_svfprintf_r+0x121a>
    fcb2:	ands.w	r3, r8, #16
    fcb6:	str	r3, [sp, #48]	; 0x30
    fcb8:	bne.w	10a8a <_svfprintf_r+0x121a>
    fcbc:	ldr	r3, [sp, #12]
    fcbe:	adds	r5, r3, #1
    fcc0:	beq.w	10e8e <_svfprintf_r+0x161e>
    fcc4:	ldr	r1, [sp, #48]	; 0x30
    fcc6:	mov	r2, r3
    fcc8:	mov	r0, r4
    fcca:	bl	e020 <memchr>
    fcce:	str	r0, [sp, #28]
    fcd0:	cmp	r0, #0
    fcd2:	beq.w	11326 <_svfprintf_r+0x1ab6>
    fcd6:	ldr	r3, [sp, #28]
    fcd8:	subs	r2, r3, r4
    fcda:	str	r2, [sp, #20]
    fcdc:	ldr	r3, [sp, #48]	; 0x30
    fcde:	str	r3, [sp, #12]
    fce0:	bic.w	r2, r2, r2, asr #31
    fce4:	str	r3, [sp, #60]	; 0x3c
    fce6:	str	r3, [sp, #52]	; 0x34
    fce8:	str	r3, [sp, #28]
    fcea:	movs	r3, #115	; 0x73
    fcec:	ldrb.w	r1, [sp, #103]	; 0x67
    fcf0:	str	r2, [sp, #8]
    fcf2:	str	r3, [sp, #44]	; 0x2c
    fcf4:	b.n	fc32 <_svfprintf_r+0x3c2>
    fcf6:	tst.w	r8, #32
    fcfa:	str	r3, [sp, #44]	; 0x2c
    fcfc:	ldr	r3, [sp, #32]
    fcfe:	beq.n	fd7c <_svfprintf_r+0x50c>
    fd00:	adds	r3, #7
    fd02:	bic.w	r3, r3, #7
    fd06:	mov	r2, r3
    fd08:	mov	r1, r2
    fd0a:	ldr	r3, [r3, #4]
    fd0c:	ldr.w	r2, [r1], #8
    fd10:	str	r1, [sp, #32]
    fd12:	mov	r1, r3
    fd14:	cmp	r3, #0
    fd16:	blt.w	10532 <_svfprintf_r+0xcc2>
    fd1a:	ldr	r3, [sp, #12]
    fd1c:	adds	r3, #1
    fd1e:	beq.w	1025e <_svfprintf_r+0x9ee>
    fd22:	bic.w	r0, r8, #128	; 0x80
    fd26:	orrs.w	r3, r2, r1
    fd2a:	str	r0, [sp, #8]
    fd2c:	bne.w	10262 <_svfprintf_r+0x9f2>
    fd30:	ldr	r3, [sp, #12]
    fd32:	cmp	r3, #0
    fd34:	bne.w	1026c <_svfprintf_r+0x9fc>
    fd38:	mov	r8, r0
    fd3a:	movs	r3, #0
    fd3c:	str	r3, [sp, #12]
    fd3e:	str	r3, [sp, #20]
    fd40:	add	r4, sp, #320	; 0x140
    fd42:	b.n	ff52 <_svfprintf_r+0x6e2>
    fd44:	ldr	r3, [sp, #32]
    fd46:	ldr.w	r2, [r3], #4
    fd4a:	str	r2, [sp, #24]
    fd4c:	cmp	r2, #0
    fd4e:	bge.w	10584 <_svfprintf_r+0xd14>
    fd52:	ldr	r2, [sp, #24]
    fd54:	str	r3, [sp, #32]
    fd56:	negs	r2, r2
    fd58:	str	r2, [sp, #24]
    fd5a:	ldrb.w	r3, [r9]
    fd5e:	orr.w	r8, r8, #4
    fd62:	b.n	f928 <_svfprintf_r+0xb8>
    fd64:	ldrb.w	r3, [r9]
    fd68:	orr.w	r8, r8, #8
    fd6c:	b.n	f928 <_svfprintf_r+0xb8>
    fd6e:	orr.w	r8, r8, #16
    fd72:	tst.w	r8, #32
    fd76:	str	r3, [sp, #44]	; 0x2c
    fd78:	ldr	r3, [sp, #32]
    fd7a:	bne.n	fd00 <_svfprintf_r+0x490>
    fd7c:	tst.w	r8, #16
    fd80:	bne.w	1059a <_svfprintf_r+0xd2a>
    fd84:	tst.w	r8, #64	; 0x40
    fd88:	beq.w	10592 <_svfprintf_r+0xd22>
    fd8c:	ldrsh.w	r2, [r3], #4
    fd90:	str	r3, [sp, #32]
    fd92:	asrs	r1, r2, #31
    fd94:	mov	r3, r1
    fd96:	b.n	fd14 <_svfprintf_r+0x4a4>
    fd98:	ldr	r3, [sp, #32]
    fd9a:	orr.w	r2, r8, #2
    fd9e:	str	r2, [sp, #8]
    fda0:	ldr.w	r2, [r3], #4
    fda4:	str	r3, [sp, #32]
    fda6:	movw	r3, #30768	; 0x7830
    fdaa:	strh.w	r3, [sp, #104]	; 0x68
    fdae:	movs	r0, #120	; 0x78
    fdb0:	ldr	r3, [pc, #276]	; (fec8 <_svfprintf_r+0x658>)
    fdb2:	str	r3, [sp, #68]	; 0x44
    fdb4:	movs	r1, #0
    fdb6:	movs	r3, #2
    fdb8:	str	r0, [sp, #44]	; 0x2c
    fdba:	movs	r0, #0
    fdbc:	ldr	r4, [sp, #12]
    fdbe:	strb.w	r0, [sp, #103]	; 0x67
    fdc2:	adds	r0, r4, #1
    fdc4:	beq.w	ff22 <_svfprintf_r+0x6b2>
    fdc8:	ldr	r0, [sp, #8]
    fdca:	bic.w	r8, r0, #128	; 0x80
    fdce:	orrs.w	r0, r2, r1
    fdd2:	bne.w	ff1e <_svfprintf_r+0x6ae>
    fdd6:	cmp	r4, #0
    fdd8:	bne.w	10b38 <_svfprintf_r+0x12c8>
    fddc:	cmp	r3, #0
    fdde:	bne.n	fd3a <_svfprintf_r+0x4ca>
    fde0:	ldr	r3, [sp, #8]
    fde2:	ands.w	r3, r3, #1
    fde6:	str	r3, [sp, #20]
    fde8:	beq.w	1058e <_svfprintf_r+0xd1e>
    fdec:	movs	r3, #48	; 0x30
    fdee:	strb.w	r3, [sp, #319]	; 0x13f
    fdf2:	addw	r4, sp, #319	; 0x13f
    fdf6:	b.n	ff52 <_svfprintf_r+0x6e2>
    fdf8:	tst.w	r8, #32
    fdfc:	bne.w	105a8 <_svfprintf_r+0xd38>
    fe00:	tst.w	r8, #16
    fe04:	bne.w	10b46 <_svfprintf_r+0x12d6>
    fe08:	tst.w	r8, #64	; 0x40
    fe0c:	bne.w	10d3e <_svfprintf_r+0x14ce>
    fe10:	tst.w	r8, #512	; 0x200
    fe14:	beq.w	10b46 <_svfprintf_r+0x12d6>
    fe18:	ldr	r3, [sp, #32]
    fe1a:	ldr	r1, [sp, #16]
    fe1c:	ldr.w	r2, [r3], #4
    fe20:	str	r3, [sp, #32]
    fe22:	strb	r1, [r2, #0]
    fe24:	mov	r4, r9
    fe26:	b.n	f8d4 <_svfprintf_r+0x64>
    fe28:	ldrb.w	r3, [r9]
    fe2c:	cmp	r3, #104	; 0x68
    fe2e:	ittte	eq
    fe30:	ldrbeq.w	r3, [r9, #1]
    fe34:	orreq.w	r8, r8, #512	; 0x200
    fe38:	addeq.w	r9, r9, #1
    fe3c:	orrne.w	r8, r8, #64	; 0x40
    fe40:	b.n	f928 <_svfprintf_r+0xb8>
    fe42:	ldrb.w	r3, [r9]
    fe46:	strb.w	r5, [sp, #103]	; 0x67
    fe4a:	b.n	f928 <_svfprintf_r+0xb8>
    fe4c:	ldrb.w	r3, [r9]
    fe50:	cmp	r3, #108	; 0x6c
    fe52:	ittte	eq
    fe54:	ldrbeq.w	r3, [r9, #1]
    fe58:	orreq.w	r8, r8, #32
    fe5c:	addeq.w	r9, r9, #1
    fe60:	orrne.w	r8, r8, #16
    fe64:	b.n	f928 <_svfprintf_r+0xb8>
    fe66:	str	r3, [sp, #44]	; 0x2c
    fe68:	orr.w	r8, r8, #16
    fe6c:	ands.w	r1, r8, #32
    fe70:	beq.w	10516 <_svfprintf_r+0xca6>
    fe74:	ldr	r3, [sp, #32]
    fe76:	adds	r3, #7
    fe78:	bic.w	r3, r3, #7
    fe7c:	ldr	r1, [r3, #4]
    fe7e:	ldr.w	r2, [r3], #8
    fe82:	str	r3, [sp, #32]
    fe84:	bic.w	r3, r8, #1024	; 0x400
    fe88:	str	r3, [sp, #8]
    fe8a:	movs	r3, #0
    fe8c:	b.n	fdba <_svfprintf_r+0x54a>
    fe8e:	str	r3, [sp, #44]	; 0x2c
    fe90:	orr.w	r3, r8, #16
    fe94:	str	r3, [sp, #8]
    fe96:	ldr	r3, [sp, #8]
    fe98:	ands.w	r1, r3, #32
    fe9c:	beq.w	104f2 <_svfprintf_r+0xc82>
    fea0:	ldr	r3, [sp, #32]
    fea2:	adds	r3, #7
    fea4:	bic.w	r3, r3, #7
    fea8:	ldr	r1, [r3, #4]
    feaa:	ldr.w	r2, [r3], #8
    feae:	str	r3, [sp, #32]
    feb0:	movs	r3, #1
    feb2:	b.n	fdba <_svfprintf_r+0x54a>
    feb4:	ldrb.w	r3, [r9]
    feb8:	orr.w	r8, r8, #128	; 0x80
    febc:	b.n	f928 <_svfprintf_r+0xb8>
    febe:	nop
    fec0:	.word	0x20000998
    fec4:	.word	0x2000099c
    fec8:	.word	0x200009a8
    fecc:	mov	r1, r9
    fece:	ldrb.w	r3, [r1], #1
    fed2:	cmp	r3, #42	; 0x2a
    fed4:	beq.w	1136a <_svfprintf_r+0x1afa>
    fed8:	sub.w	r2, r3, #48	; 0x30
    fedc:	cmp	r2, #9
    fede:	mov	r9, r1
    fee0:	it	ls
    fee2:	movls	r1, #0
    fee4:	bhi.w	11170 <_svfprintf_r+0x1900>
    fee8:	ldrb.w	r3, [r9], #1
    feec:	add.w	r1, r1, r1, lsl #2
    fef0:	add.w	r1, r2, r1, lsl #1
    fef4:	sub.w	r2, r3, #48	; 0x30
    fef8:	cmp	r2, #9
    fefa:	bls.n	fee8 <_svfprintf_r+0x678>
    fefc:	str	r1, [sp, #12]
    fefe:	b.n	f92c <_svfprintf_r+0xbc>
    ff00:	ldrb.w	r3, [r9]
    ff04:	orr.w	r8, r8, #1
    ff08:	b.n	f928 <_svfprintf_r+0xb8>
    ff0a:	ldrb.w	r3, [sp, #103]	; 0x67
    ff0e:	cmp	r3, #0
    ff10:	bne.w	fa32 <_svfprintf_r+0x1c2>
    ff14:	ldrb.w	r3, [r9]
    ff18:	strb.w	r6, [sp, #103]	; 0x67
    ff1c:	b.n	f928 <_svfprintf_r+0xb8>
    ff1e:	str.w	r8, [sp, #8]
    ff22:	cmp	r3, #1
    ff24:	beq.w	10262 <_svfprintf_r+0x9f2>
    ff28:	cmp	r3, #2
    ff2a:	add	r4, sp, #320	; 0x140
    ff2c:	bne.n	ff70 <_svfprintf_r+0x700>
    ff2e:	ldr	r0, [sp, #68]	; 0x44
    ff30:	and.w	r3, r2, #15
    ff34:	lsrs	r2, r2, #4
    ff36:	ldrb	r3, [r0, r3]
    ff38:	strb.w	r3, [r4, #-1]!
    ff3c:	orr.w	r2, r2, r1, lsl #28
    ff40:	lsrs	r1, r1, #4
    ff42:	orrs.w	r3, r2, r1
    ff46:	bne.n	ff30 <_svfprintf_r+0x6c0>
    ff48:	add	r3, sp, #320	; 0x140
    ff4a:	subs	r3, r3, r4
    ff4c:	ldr.w	r8, [sp, #8]
    ff50:	str	r3, [sp, #20]
    ff52:	ldr	r2, [sp, #20]
    ff54:	ldr	r0, [sp, #12]
    ff56:	ldrb.w	r1, [sp, #103]	; 0x67
    ff5a:	cmp	r2, r0
    ff5c:	mov.w	r3, #0
    ff60:	it	lt
    ff62:	movlt	r2, r0
    ff64:	strd	r3, r3, [sp, #48]	; 0x30
    ff68:	str	r3, [sp, #28]
    ff6a:	str	r2, [sp, #8]
    ff6c:	str	r3, [sp, #60]	; 0x3c
    ff6e:	b.n	fc32 <_svfprintf_r+0x3c2>
    ff70:	and.w	r3, r2, #7
    ff74:	lsrs	r2, r2, #3
    ff76:	orr.w	r2, r2, r1, lsl #29
    ff7a:	lsrs	r1, r1, #3
    ff7c:	adds	r3, #48	; 0x30
    ff7e:	orrs.w	r5, r2, r1
    ff82:	mov	r0, r4
    ff84:	strb.w	r3, [r4, #-1]!
    ff88:	bne.n	ff70 <_svfprintf_r+0x700>
    ff8a:	ldr	r2, [sp, #8]
    ff8c:	lsls	r1, r2, #31
    ff8e:	bmi.w	1042c <_svfprintf_r+0xbbc>
    ff92:	add	r3, sp, #320	; 0x140
    ff94:	subs	r3, r3, r4
    ff96:	mov	r8, r2
    ff98:	str	r3, [sp, #20]
    ff9a:	b.n	ff52 <_svfprintf_r+0x6e2>
    ff9c:	ldr	r3, [sp, #44]	; 0x2c
    ff9e:	cmp	r3, #101	; 0x65
    ffa0:	ble.w	1014c <_svfprintf_r+0x8dc>
    ffa4:	vcmp.f64	d8, #0.0
    ffa8:	vmrs	APSR_nzcv, fpscr
    ffac:	bne.w	10332 <_svfprintf_r+0xac2>
    ffb0:	ldr	r3, [sp, #148]	; 0x94
    ffb2:	ldr	r1, [pc, #744]	; (1029c <_svfprintf_r+0xa2c>)
    ffb4:	str.w	r1, [sl]
    ffb8:	adds	r3, #1
    ffba:	adds	r2, #1
    ffbc:	movs	r1, #1
    ffbe:	cmp	r3, #7
    ffc0:	str	r2, [sp, #152]	; 0x98
    ffc2:	str	r3, [sp, #148]	; 0x94
    ffc4:	str.w	r1, [sl, #4]
    ffc8:	bgt.w	10a6e <_svfprintf_r+0x11fe>
    ffcc:	add.w	sl, sl, #8
    ffd0:	ldr	r3, [sp, #108]	; 0x6c
    ffd2:	ldr	r1, [sp, #56]	; 0x38
    ffd4:	cmp	r3, r1
    ffd6:	bge.w	1057a <_svfprintf_r+0xd0a>
    ffda:	ldr	r3, [sp, #64]	; 0x40
    ffdc:	ldr	r1, [sp, #72]	; 0x48
    ffde:	add	r2, r3
    ffe0:	strd	r1, r3, [sl]
    ffe4:	ldr	r3, [sp, #148]	; 0x94
    ffe6:	str	r2, [sp, #152]	; 0x98
    ffe8:	adds	r3, #1
    ffea:	cmp	r3, #7
    ffec:	str	r3, [sp, #148]	; 0x94
    ffee:	bgt.w	10720 <_svfprintf_r+0xeb0>
    fff2:	add.w	sl, sl, #8
    fff6:	ldr	r3, [sp, #56]	; 0x38
    fff8:	subs	r4, r3, #1
    fffa:	cmp	r4, #0
    fffc:	ble.w	fba0 <_svfprintf_r+0x330>
   10000:	cmp	r4, #16
   10002:	ldr	r3, [sp, #148]	; 0x94
   10004:	ble.w	10ae4 <_svfprintf_r+0x1274>
   10008:	vmov	r6, s22
   1000c:	movs	r5, #16
   1000e:	b.n	1001c <_svfprintf_r+0x7ac>
   10010:	add.w	sl, sl, #8
   10014:	subs	r4, #16
   10016:	cmp	r4, #16
   10018:	ble.w	10ae4 <_svfprintf_r+0x1274>
   1001c:	adds	r3, #1
   1001e:	ldr	r1, [pc, #640]	; (102a0 <_svfprintf_r+0xa30>)
   10020:	adds	r2, #16
   10022:	cmp	r3, #7
   10024:	strd	r1, r5, [sl]
   10028:	strd	r3, r2, [sp, #148]	; 0x94
   1002c:	ble.n	10010 <_svfprintf_r+0x7a0>
   1002e:	add	r2, sp, #144	; 0x90
   10030:	mov	r1, r6
   10032:	mov	r0, fp
   10034:	bl	14588 <__ssprint_r>
   10038:	cmp	r0, #0
   1003a:	bne.n	1013a <_svfprintf_r+0x8ca>
   1003c:	ldrd	r3, r2, [sp, #148]	; 0x94
   10040:	add.w	sl, sp, #156	; 0x9c
   10044:	b.n	10014 <_svfprintf_r+0x7a4>
   10046:	ldr	r3, [sp, #24]
   10048:	ldr	r1, [sp, #8]
   1004a:	subs	r5, r3, r1
   1004c:	cmp	r5, #0
   1004e:	ble.w	fb6e <_svfprintf_r+0x2fe>
   10052:	cmp	r5, #16
   10054:	ldr	r3, [sp, #148]	; 0x94
   10056:	ble.n	1009c <_svfprintf_r+0x82c>
   10058:	str	r4, [sp, #36]	; 0x24
   1005a:	movs	r6, #16
   1005c:	vmov	r4, s22
   10060:	b.n	1006c <_svfprintf_r+0x7fc>
   10062:	subs	r5, #16
   10064:	cmp	r5, #16
   10066:	add.w	sl, sl, #8
   1006a:	ble.n	1009a <_svfprintf_r+0x82a>
   1006c:	adds	r3, #1
   1006e:	ldr	r1, [pc, #560]	; (102a0 <_svfprintf_r+0xa30>)
   10070:	adds	r2, #16
   10072:	cmp	r3, #7
   10074:	strd	r1, r6, [sl]
   10078:	strd	r3, r2, [sp, #148]	; 0x94
   1007c:	ble.n	10062 <_svfprintf_r+0x7f2>
   1007e:	add	r2, sp, #144	; 0x90
   10080:	mov	r1, r4
   10082:	mov	r0, fp
   10084:	add.w	sl, sp, #156	; 0x9c
   10088:	bl	14588 <__ssprint_r>
   1008c:	cmp	r0, #0
   1008e:	bne.n	1013a <_svfprintf_r+0x8ca>
   10090:	subs	r5, #16
   10092:	cmp	r5, #16
   10094:	ldrd	r3, r2, [sp, #148]	; 0x94
   10098:	bgt.n	1006c <_svfprintf_r+0x7fc>
   1009a:	ldr	r4, [sp, #36]	; 0x24
   1009c:	ldr	r1, [pc, #512]	; (102a0 <_svfprintf_r+0xa30>)
   1009e:	str.w	r5, [sl, #4]
   100a2:	adds	r3, #1
   100a4:	add	r2, r5
   100a6:	cmp	r3, #7
   100a8:	strd	r3, r2, [sp, #148]	; 0x94
   100ac:	str.w	r1, [sl]
   100b0:	bgt.w	10b00 <_svfprintf_r+0x1290>
   100b4:	ldr	r3, [sp, #12]
   100b6:	ldr	r1, [sp, #20]
   100b8:	subs	r5, r3, r1
   100ba:	cmp	r5, #0
   100bc:	add.w	sl, sl, #8
   100c0:	ble.w	fb7a <_svfprintf_r+0x30a>
   100c4:	cmp	r5, #16
   100c6:	ldr	r3, [sp, #148]	; 0x94
   100c8:	ble.n	1010a <_svfprintf_r+0x89a>
   100ca:	mov	r1, sl
   100cc:	movs	r6, #16
   100ce:	vmov	sl, s22
   100d2:	b.n	100de <_svfprintf_r+0x86e>
   100d4:	subs	r5, #16
   100d6:	cmp	r5, #16
   100d8:	add.w	r1, r1, #8
   100dc:	ble.n	10108 <_svfprintf_r+0x898>
   100de:	adds	r3, #1
   100e0:	ldr	r0, [pc, #444]	; (102a0 <_svfprintf_r+0xa30>)
   100e2:	adds	r2, #16
   100e4:	cmp	r3, #7
   100e6:	strd	r0, r6, [r1]
   100ea:	strd	r3, r2, [sp, #148]	; 0x94
   100ee:	ble.n	100d4 <_svfprintf_r+0x864>
   100f0:	add	r2, sp, #144	; 0x90
   100f2:	mov	r1, sl
   100f4:	mov	r0, fp
   100f6:	bl	14588 <__ssprint_r>
   100fa:	cbnz	r0, 1013a <_svfprintf_r+0x8ca>
   100fc:	subs	r5, #16
   100fe:	cmp	r5, #16
   10100:	ldrd	r3, r2, [sp, #148]	; 0x94
   10104:	add	r1, sp, #156	; 0x9c
   10106:	bgt.n	100de <_svfprintf_r+0x86e>
   10108:	mov	sl, r1
   1010a:	adds	r3, #1
   1010c:	ldr	r1, [pc, #400]	; (102a0 <_svfprintf_r+0xa30>)
   1010e:	str.w	r5, [sl, #4]
   10112:	add	r2, r5
   10114:	cmp	r3, #7
   10116:	strd	r3, r2, [sp, #148]	; 0x94
   1011a:	str.w	r1, [sl]
   1011e:	bgt.w	104d6 <_svfprintf_r+0xc66>
   10122:	add.w	sl, sl, #8
   10126:	b.n	fb7a <_svfprintf_r+0x30a>
   10128:	vmov	r1, s22
   1012c:	add	r2, sp, #144	; 0x90
   1012e:	mov	r0, fp
   10130:	bl	14588 <__ssprint_r>
   10134:	cmp	r0, #0
   10136:	beq.w	fbc8 <_svfprintf_r+0x358>
   1013a:	ldr	r3, [sp, #28]
   1013c:	cmp	r3, #0
   1013e:	beq.w	fa86 <_svfprintf_r+0x216>
   10142:	ldr	r1, [sp, #28]
   10144:	mov	r0, fp
   10146:	bl	e2e4 <_free_r>
   1014a:	b.n	fa86 <_svfprintf_r+0x216>
   1014c:	ldr	r3, [sp, #56]	; 0x38
   1014e:	cmp	r3, #1
   10150:	ble.w	10448 <_svfprintf_r+0xbd8>
   10154:	ldr	r3, [sp, #148]	; 0x94
   10156:	str.w	r4, [sl]
   1015a:	adds	r3, #1
   1015c:	adds	r2, #1
   1015e:	movs	r1, #1
   10160:	cmp	r3, #7
   10162:	str	r2, [sp, #152]	; 0x98
   10164:	str	r3, [sp, #148]	; 0x94
   10166:	str.w	r1, [sl, #4]
   1016a:	bgt.w	1055e <_svfprintf_r+0xcee>
   1016e:	add.w	sl, sl, #8
   10172:	ldr	r1, [sp, #64]	; 0x40
   10174:	ldr	r0, [sp, #72]	; 0x48
   10176:	adds	r3, #1
   10178:	add	r2, r1
   1017a:	cmp	r3, #7
   1017c:	strd	r0, r1, [sl]
   10180:	strd	r3, r2, [sp, #148]	; 0x94
   10184:	bgt.w	10542 <_svfprintf_r+0xcd2>
   10188:	add.w	sl, sl, #8
   1018c:	vcmp.f64	d8, #0.0
   10190:	vmrs	APSR_nzcv, fpscr
   10194:	beq.w	10486 <_svfprintf_r+0xc16>
   10198:	ldr	r1, [sp, #56]	; 0x38
   1019a:	adds	r3, #1
   1019c:	subs	r1, #1
   1019e:	adds	r4, #1
   101a0:	add	r2, r1
   101a2:	cmp	r3, #7
   101a4:	str.w	r4, [sl]
   101a8:	str	r3, [sp, #148]	; 0x94
   101aa:	str.w	r1, [sl, #4]
   101ae:	str	r2, [sp, #152]	; 0x98
   101b0:	bgt.w	1046a <_svfprintf_r+0xbfa>
   101b4:	add.w	sl, sl, #8
   101b8:	ldr	r1, [sp, #80]	; 0x50
   101ba:	str.w	r1, [sl, #4]
   101be:	adds	r3, #1
   101c0:	add	r2, r1
   101c2:	cmp	r3, #7
   101c4:	add	r1, sp, #120	; 0x78
   101c6:	strd	r3, r2, [sp, #148]	; 0x94
   101ca:	str.w	r1, [sl]
   101ce:	ble.w	fb9c <_svfprintf_r+0x32c>
   101d2:	vmov	r1, s22
   101d6:	add	r2, sp, #144	; 0x90
   101d8:	mov	r0, fp
   101da:	bl	14588 <__ssprint_r>
   101de:	cmp	r0, #0
   101e0:	bne.n	1013a <_svfprintf_r+0x8ca>
   101e2:	ldr	r2, [sp, #152]	; 0x98
   101e4:	add.w	sl, sp, #156	; 0x9c
   101e8:	b.n	fba0 <_svfprintf_r+0x330>
   101ea:	cmp	r5, #16
   101ec:	ldrd	r1, r2, [sp, #148]	; 0x94
   101f0:	ldr	r6, [pc, #176]	; (102a4 <_svfprintf_r+0xa34>)
   101f2:	ble.n	1023e <_svfprintf_r+0x9ce>
   101f4:	str	r4, [sp, #92]	; 0x5c
   101f6:	movs	r3, #16
   101f8:	vmov	r4, s22
   101fc:	mov	r0, r1
   101fe:	b.n	1020a <_svfprintf_r+0x99a>
   10200:	subs	r5, #16
   10202:	cmp	r5, #16
   10204:	add.w	sl, sl, #8
   10208:	ble.n	1023a <_svfprintf_r+0x9ca>
   1020a:	adds	r0, #1
   1020c:	adds	r2, #16
   1020e:	cmp	r0, #7
   10210:	strd	r6, r3, [sl]
   10214:	strd	r0, r2, [sp, #148]	; 0x94
   10218:	ble.n	10200 <_svfprintf_r+0x990>
   1021a:	add	r2, sp, #144	; 0x90
   1021c:	mov	r1, r4
   1021e:	mov	r0, fp
   10220:	add.w	sl, sp, #156	; 0x9c
   10224:	bl	14588 <__ssprint_r>
   10228:	cmp	r0, #0
   1022a:	bne.n	1013a <_svfprintf_r+0x8ca>
   1022c:	subs	r5, #16
   1022e:	cmp	r5, #16
   10230:	ldrd	r0, r2, [sp, #148]	; 0x94
   10234:	mov.w	r3, #16
   10238:	bgt.n	1020a <_svfprintf_r+0x99a>
   1023a:	ldr	r4, [sp, #92]	; 0x5c
   1023c:	mov	r1, r0
   1023e:	adds	r1, #1
   10240:	add	r2, r5
   10242:	cmp	r1, #7
   10244:	strd	r1, r2, [sp, #148]	; 0x94
   10248:	str.w	r6, [sl]
   1024c:	str.w	r5, [sl, #4]
   10250:	bgt.w	109ce <_svfprintf_r+0x115e>
   10254:	ldrb.w	r1, [sp, #103]	; 0x67
   10258:	add.w	sl, sl, #8
   1025c:	b.n	fb1a <_svfprintf_r+0x2aa>
   1025e:	str.w	r8, [sp, #8]
   10262:	cmp	r2, #10
   10264:	sbcs.w	r3, r1, #0
   10268:	bcs.w	108f6 <_svfprintf_r+0x1086>
   1026c:	adds	r2, #48	; 0x30
   1026e:	movs	r3, #1
   10270:	ldr.w	r8, [sp, #8]
   10274:	strb.w	r2, [sp, #319]	; 0x13f
   10278:	str	r3, [sp, #20]
   1027a:	addw	r4, sp, #319	; 0x13f
   1027e:	b.n	ff52 <_svfprintf_r+0x6e2>
   10280:	vmov	r1, s22
   10284:	add	r2, sp, #144	; 0x90
   10286:	mov	r0, fp
   10288:	bl	14588 <__ssprint_r>
   1028c:	cmp	r0, #0
   1028e:	bne.w	1013a <_svfprintf_r+0x8ca>
   10292:	ldr	r2, [sp, #152]	; 0x98
   10294:	add.w	sl, sp, #156	; 0x9c
   10298:	b.n	fb40 <_svfprintf_r+0x2d0>
   1029a:	nop
   1029c:	.word	0x200009d8
   102a0:	.word	0x20007878
   102a4:	.word	0x20002454
   102a8:	vmov	r1, s22
   102ac:	add	r2, sp, #144	; 0x90
   102ae:	mov	r0, fp
   102b0:	bl	14588 <__ssprint_r>
   102b4:	cmp	r0, #0
   102b6:	bne.w	1013a <_svfprintf_r+0x8ca>
   102ba:	ldr	r2, [sp, #152]	; 0x98
   102bc:	add.w	sl, sp, #156	; 0x9c
   102c0:	b.n	fb66 <_svfprintf_r+0x2f6>
   102c2:	cmp	r4, #16
   102c4:	ldr	r3, [sp, #148]	; 0x94
   102c6:	ldr	r6, [pc, #760]	; (105c0 <_svfprintf_r+0xd50>)
   102c8:	ble.n	1030a <_svfprintf_r+0xa9a>
   102ca:	vmov	r8, s22
   102ce:	movs	r5, #16
   102d0:	b.n	102dc <_svfprintf_r+0xa6c>
   102d2:	subs	r4, #16
   102d4:	cmp	r4, #16
   102d6:	add.w	sl, sl, #8
   102da:	ble.n	1030a <_svfprintf_r+0xa9a>
   102dc:	adds	r3, #1
   102de:	adds	r2, #16
   102e0:	cmp	r3, #7
   102e2:	strd	r6, r5, [sl]
   102e6:	strd	r3, r2, [sp, #148]	; 0x94
   102ea:	ble.n	102d2 <_svfprintf_r+0xa62>
   102ec:	add	r2, sp, #144	; 0x90
   102ee:	mov	r1, r8
   102f0:	mov	r0, fp
   102f2:	add.w	sl, sp, #156	; 0x9c
   102f6:	bl	14588 <__ssprint_r>
   102fa:	cmp	r0, #0
   102fc:	bne.w	1013a <_svfprintf_r+0x8ca>
   10300:	subs	r4, #16
   10302:	cmp	r4, #16
   10304:	ldrd	r3, r2, [sp, #148]	; 0x94
   10308:	bgt.n	102dc <_svfprintf_r+0xa6c>
   1030a:	adds	r3, #1
   1030c:	add	r2, r4
   1030e:	cmp	r3, #7
   10310:	strd	r6, r4, [sl]
   10314:	strd	r3, r2, [sp, #148]	; 0x94
   10318:	ble.w	fbb2 <_svfprintf_r+0x342>
   1031c:	vmov	r1, s22
   10320:	add	r2, sp, #144	; 0x90
   10322:	mov	r0, fp
   10324:	bl	14588 <__ssprint_r>
   10328:	cmp	r0, #0
   1032a:	bne.w	1013a <_svfprintf_r+0x8ca>
   1032e:	ldr	r2, [sp, #152]	; 0x98
   10330:	b.n	fbb2 <_svfprintf_r+0x342>
   10332:	ldr	r1, [sp, #108]	; 0x6c
   10334:	cmp	r1, #0
   10336:	ble.w	109ee <_svfprintf_r+0x117e>
   1033a:	ldr	r6, [sp, #48]	; 0x30
   1033c:	ldr	r3, [sp, #56]	; 0x38
   1033e:	cmp	r6, r3
   10340:	it	ge
   10342:	movge	r6, r3
   10344:	cmp	r6, #0
   10346:	ble.n	10360 <_svfprintf_r+0xaf0>
   10348:	ldr	r3, [sp, #148]	; 0x94
   1034a:	adds	r3, #1
   1034c:	add	r2, r6
   1034e:	cmp	r3, #7
   10350:	strd	r4, r6, [sl]
   10354:	str	r2, [sp, #152]	; 0x98
   10356:	str	r3, [sp, #148]	; 0x94
   10358:	bgt.w	1106e <_svfprintf_r+0x17fe>
   1035c:	add.w	sl, sl, #8
   10360:	ldr	r5, [sp, #48]	; 0x30
   10362:	cmp	r6, #0
   10364:	it	ge
   10366:	subge	r5, r5, r6
   10368:	cmp	r5, #0
   1036a:	bgt.w	10774 <_svfprintf_r+0xf04>
   1036e:	ldr	r3, [sp, #48]	; 0x30
   10370:	tst.w	r8, #1024	; 0x400
   10374:	add	r3, r4
   10376:	str	r3, [sp, #20]
   10378:	bne.w	107ba <_svfprintf_r+0xf4a>
   1037c:	ldr	r3, [sp, #108]	; 0x6c
   1037e:	ldr	r1, [sp, #56]	; 0x38
   10380:	cmp	r3, r1
   10382:	blt.n	1038c <_svfprintf_r+0xb1c>
   10384:	tst.w	r8, #1
   10388:	beq.w	10d2a <_svfprintf_r+0x14ba>
   1038c:	ldr	r1, [sp, #64]	; 0x40
   1038e:	ldr	r0, [sp, #72]	; 0x48
   10390:	add	r2, r1
   10392:	strd	r0, r1, [sl]
   10396:	ldr	r1, [sp, #148]	; 0x94
   10398:	str	r2, [sp, #152]	; 0x98
   1039a:	adds	r1, #1
   1039c:	cmp	r1, #7
   1039e:	str	r1, [sp, #148]	; 0x94
   103a0:	bgt.w	110ee <_svfprintf_r+0x187e>
   103a4:	add.w	sl, sl, #8
   103a8:	ldr	r1, [sp, #56]	; 0x38
   103aa:	adds	r5, r4, r1
   103ac:	subs	r4, r1, r3
   103ae:	ldr	r3, [sp, #20]
   103b0:	subs	r5, r5, r3
   103b2:	cmp	r5, r4
   103b4:	it	ge
   103b6:	movge	r5, r4
   103b8:	cmp	r5, #0
   103ba:	ble.n	103d8 <_svfprintf_r+0xb68>
   103bc:	str.w	r3, [sl]
   103c0:	ldr	r3, [sp, #148]	; 0x94
   103c2:	str.w	r5, [sl, #4]
   103c6:	adds	r3, #1
   103c8:	add	r2, r5
   103ca:	cmp	r3, #7
   103cc:	str	r2, [sp, #152]	; 0x98
   103ce:	str	r3, [sp, #148]	; 0x94
   103d0:	bgt.w	1114a <_svfprintf_r+0x18da>
   103d4:	add.w	sl, sl, #8
   103d8:	cmp	r5, #0
   103da:	it	ge
   103dc:	subge	r4, r4, r5
   103de:	cmp	r4, #0
   103e0:	ble.w	fba0 <_svfprintf_r+0x330>
   103e4:	cmp	r4, #16
   103e6:	ldr	r3, [sp, #148]	; 0x94
   103e8:	ble.w	10ae4 <_svfprintf_r+0x1274>
   103ec:	vmov	r6, s22
   103f0:	movs	r5, #16
   103f2:	b.n	10400 <_svfprintf_r+0xb90>
   103f4:	add.w	sl, sl, #8
   103f8:	subs	r4, #16
   103fa:	cmp	r4, #16
   103fc:	ble.w	10ae4 <_svfprintf_r+0x1274>
   10400:	adds	r3, #1
   10402:	ldr	r1, [pc, #448]	; (105c4 <_svfprintf_r+0xd54>)
   10404:	adds	r2, #16
   10406:	cmp	r3, #7
   10408:	strd	r1, r5, [sl]
   1040c:	strd	r3, r2, [sp, #148]	; 0x94
   10410:	ble.n	103f4 <_svfprintf_r+0xb84>
   10412:	add	r2, sp, #144	; 0x90
   10414:	mov	r1, r6
   10416:	mov	r0, fp
   10418:	bl	14588 <__ssprint_r>
   1041c:	cmp	r0, #0
   1041e:	bne.w	1013a <_svfprintf_r+0x8ca>
   10422:	ldrd	r3, r2, [sp, #148]	; 0x94
   10426:	add.w	sl, sp, #156	; 0x9c
   1042a:	b.n	103f8 <_svfprintf_r+0xb88>
   1042c:	cmp	r3, #48	; 0x30
   1042e:	beq.w	ff48 <_svfprintf_r+0x6d8>
   10432:	movs	r3, #48	; 0x30
   10434:	subs	r0, #2
   10436:	strb.w	r3, [r4, #-1]
   1043a:	add	r3, sp, #320	; 0x140
   1043c:	subs	r3, r3, r0
   1043e:	ldr.w	r8, [sp, #8]
   10442:	str	r3, [sp, #20]
   10444:	mov	r4, r0
   10446:	b.n	ff52 <_svfprintf_r+0x6e2>
   10448:	tst.w	r8, #1
   1044c:	bne.w	10154 <_svfprintf_r+0x8e4>
   10450:	ldr	r3, [sp, #148]	; 0x94
   10452:	str.w	r4, [sl]
   10456:	adds	r3, #1
   10458:	adds	r2, #1
   1045a:	movs	r1, #1
   1045c:	cmp	r3, #7
   1045e:	str	r2, [sp, #152]	; 0x98
   10460:	str	r3, [sp, #148]	; 0x94
   10462:	str.w	r1, [sl, #4]
   10466:	ble.w	101b4 <_svfprintf_r+0x944>
   1046a:	vmov	r1, s22
   1046e:	add	r2, sp, #144	; 0x90
   10470:	mov	r0, fp
   10472:	bl	14588 <__ssprint_r>
   10476:	cmp	r0, #0
   10478:	bne.w	1013a <_svfprintf_r+0x8ca>
   1047c:	ldrd	r3, r2, [sp, #148]	; 0x94
   10480:	add.w	sl, sp, #156	; 0x9c
   10484:	b.n	101b8 <_svfprintf_r+0x948>
   10486:	ldr	r1, [sp, #56]	; 0x38
   10488:	subs	r4, r1, #1
   1048a:	cmp	r4, #0
   1048c:	ble.w	101b8 <_svfprintf_r+0x948>
   10490:	cmp	r4, #16
   10492:	ble.w	10b58 <_svfprintf_r+0x12e8>
   10496:	vmov	r6, s22
   1049a:	movs	r5, #16
   1049c:	b.n	104aa <_svfprintf_r+0xc3a>
   1049e:	add.w	sl, sl, #8
   104a2:	subs	r4, #16
   104a4:	cmp	r4, #16
   104a6:	ble.w	10b58 <_svfprintf_r+0x12e8>
   104aa:	adds	r3, #1
   104ac:	ldr	r1, [pc, #276]	; (105c4 <_svfprintf_r+0xd54>)
   104ae:	adds	r2, #16
   104b0:	cmp	r3, #7
   104b2:	strd	r1, r5, [sl]
   104b6:	strd	r3, r2, [sp, #148]	; 0x94
   104ba:	ble.n	1049e <_svfprintf_r+0xc2e>
   104bc:	add	r2, sp, #144	; 0x90
   104be:	mov	r1, r6
   104c0:	mov	r0, fp
   104c2:	bl	14588 <__ssprint_r>
   104c6:	cmp	r0, #0
   104c8:	bne.w	1013a <_svfprintf_r+0x8ca>
   104cc:	ldrd	r3, r2, [sp, #148]	; 0x94
   104d0:	add.w	sl, sp, #156	; 0x9c
   104d4:	b.n	104a2 <_svfprintf_r+0xc32>
   104d6:	vmov	r1, s22
   104da:	add	r2, sp, #144	; 0x90
   104dc:	mov	r0, fp
   104de:	bl	14588 <__ssprint_r>
   104e2:	cmp	r0, #0
   104e4:	bne.w	1013a <_svfprintf_r+0x8ca>
   104e8:	ldr	r2, [sp, #152]	; 0x98
   104ea:	add.w	sl, sp, #156	; 0x9c
   104ee:	b.w	fb7a <_svfprintf_r+0x30a>
   104f2:	ldr	r3, [sp, #8]
   104f4:	ands.w	r3, r3, #16
   104f8:	bne.w	1067e <_svfprintf_r+0xe0e>
   104fc:	ldr	r2, [sp, #8]
   104fe:	ands.w	r2, r2, #64	; 0x40
   10502:	beq.w	10bfa <_svfprintf_r+0x138a>
   10506:	ldr	r0, [sp, #32]
   10508:	ldr.w	r2, [r0], #4
   1050c:	str	r0, [sp, #32]
   1050e:	mov	r1, r3
   10510:	uxth	r2, r2
   10512:	movs	r3, #1
   10514:	b.n	fdba <_svfprintf_r+0x54a>
   10516:	ands.w	r3, r8, #16
   1051a:	bne.n	105c8 <_svfprintf_r+0xd58>
   1051c:	ands.w	r2, r8, #64	; 0x40
   10520:	beq.w	10bde <_svfprintf_r+0x136e>
   10524:	ldr	r0, [sp, #32]
   10526:	ldr.w	r2, [r0], #4
   1052a:	str	r0, [sp, #32]
   1052c:	mov	r1, r3
   1052e:	uxth	r2, r2
   10530:	b.n	fe84 <_svfprintf_r+0x614>
   10532:	negs	r2, r2
   10534:	sbc.w	r1, r1, r1, lsl #1
   10538:	str.w	r8, [sp, #8]
   1053c:	movs	r0, #45	; 0x2d
   1053e:	movs	r3, #1
   10540:	b.n	fdbc <_svfprintf_r+0x54c>
   10542:	vmov	r1, s22
   10546:	add	r2, sp, #144	; 0x90
   10548:	mov	r0, fp
   1054a:	bl	14588 <__ssprint_r>
   1054e:	cmp	r0, #0
   10550:	bne.w	1013a <_svfprintf_r+0x8ca>
   10554:	ldrd	r3, r2, [sp, #148]	; 0x94
   10558:	add.w	sl, sp, #156	; 0x9c
   1055c:	b.n	1018c <_svfprintf_r+0x91c>
   1055e:	vmov	r1, s22
   10562:	add	r2, sp, #144	; 0x90
   10564:	mov	r0, fp
   10566:	bl	14588 <__ssprint_r>
   1056a:	cmp	r0, #0
   1056c:	bne.w	1013a <_svfprintf_r+0x8ca>
   10570:	ldrd	r3, r2, [sp, #148]	; 0x94
   10574:	add.w	sl, sp, #156	; 0x9c
   10578:	b.n	10172 <_svfprintf_r+0x902>
   1057a:	tst.w	r8, #1
   1057e:	beq.w	fba0 <_svfprintf_r+0x330>
   10582:	b.n	ffda <_svfprintf_r+0x76a>
   10584:	str	r3, [sp, #32]
   10586:	ldrb.w	r3, [r9]
   1058a:	b.w	f928 <_svfprintf_r+0xb8>
   1058e:	add	r4, sp, #320	; 0x140
   10590:	b.n	ff52 <_svfprintf_r+0x6e2>
   10592:	tst.w	r8, #512	; 0x200
   10596:	bne.w	10d50 <_svfprintf_r+0x14e0>
   1059a:	ldr.w	r2, [r3], #4
   1059e:	str	r3, [sp, #32]
   105a0:	asrs	r1, r2, #31
   105a2:	mov	r3, r1
   105a4:	b.w	fd14 <_svfprintf_r+0x4a4>
   105a8:	ldr	r3, [sp, #32]
   105aa:	ldr	r0, [sp, #16]
   105ac:	ldr.w	r1, [r3], #4
   105b0:	str	r3, [sp, #32]
   105b2:	asrs	r2, r0, #31
   105b4:	strd	r0, r2, [r1]
   105b8:	mov	r4, r9
   105ba:	b.w	f8d4 <_svfprintf_r+0x64>
   105be:	nop
   105c0:	.word	0x20002454
   105c4:	.word	0x20007878
   105c8:	ldr	r3, [sp, #32]
   105ca:	ldr.w	r2, [r3], #4
   105ce:	str	r3, [sp, #32]
   105d0:	b.n	fe84 <_svfprintf_r+0x614>
   105d2:	vcmp.f64	d8, d8
   105d6:	vmrs	APSR_nzcv, fpscr
   105da:	bvs.w	11306 <_svfprintf_r+0x1a96>
   105de:	ldr	r3, [sp, #44]	; 0x2c
   105e0:	cmp	r3, #97	; 0x61
   105e2:	beq.w	1108a <_svfprintf_r+0x181a>
   105e6:	cmp	r3, #65	; 0x41
   105e8:	beq.w	1116c <_svfprintf_r+0x18fc>
   105ec:	ldr	r3, [sp, #12]
   105ee:	adds	r3, #1
   105f0:	ldr	r3, [sp, #44]	; 0x2c
   105f2:	bic.w	r5, r3, #32
   105f6:	beq.w	10efa <_svfprintf_r+0x168a>
   105fa:	cmp	r5, #71	; 0x47
   105fc:	bne.n	10608 <_svfprintf_r+0xd98>
   105fe:	ldr	r3, [sp, #12]
   10600:	cmp	r3, #0
   10602:	it	eq
   10604:	moveq	r3, #1
   10606:	str	r3, [sp, #12]
   10608:	vmov	r3, s17
   1060c:	cmp	r3, #0
   1060e:	orr.w	r2, r8, #256	; 0x100
   10612:	mov	r6, r8
   10614:	blt.w	11248 <_svfprintf_r+0x19d8>
   10618:	vmov.f64	d10, d8
   1061c:	movs	r3, #0
   1061e:	mov	r8, r2
   10620:	str	r3, [sp, #36]	; 0x24
   10622:	str	r3, [sp, #28]
   10624:	ldr	r3, [sp, #44]	; 0x2c
   10626:	subs	r3, #65	; 0x41
   10628:	cmp	r3, #37	; 0x25
   1062a:	bhi.w	10d5e <_svfprintf_r+0x14ee>
   1062e:	tbh	[pc, r3, lsl #1]
   10632:	.short	0x046f
   10634:	.word	0x03960396
   10638:	.word	0x04680396
   1063c:	.word	0x0396046c
   10640:	.word	0x03960396
   10644:	.word	0x03960396
   10648:	.word	0x03960396
   1064c:	.word	0x03960396
   10650:	.word	0x03960396
   10654:	.word	0x03960396
   10658:	.word	0x03960396
   1065c:	.word	0x03960396
   10660:	.word	0x03960396
   10664:	.word	0x03960396
   10668:	.word	0x03960396
   1066c:	.word	0x03960396
   10670:	.word	0x03960396
   10674:	.word	0x03960396
   10678:	.word	0x04680396
   1067c:	.short	0x046c
   1067e:	ldr	r3, [sp, #32]
   10680:	ldr.w	r2, [r3], #4
   10684:	str	r3, [sp, #32]
   10686:	movs	r3, #1
   10688:	b.w	fdba <_svfprintf_r+0x54a>
   1068c:	ldr	r3, [sp, #76]	; 0x4c
   1068e:	cmp	r3, #0
   10690:	beq.w	fa32 <_svfprintf_r+0x1c2>
   10694:	ldr	r3, [sp, #76]	; 0x4c
   10696:	ldrb	r3, [r3, #0]
   10698:	cmp	r3, #0
   1069a:	beq.w	fa32 <_svfprintf_r+0x1c2>
   1069e:	ldrb.w	r3, [r9]
   106a2:	orr.w	r8, r8, #1024	; 0x400
   106a6:	b.w	f928 <_svfprintf_r+0xb8>
   106aa:	str	r3, [sp, #44]	; 0x2c
   106ac:	str.w	r8, [sp, #8]
   106b0:	b.w	fe96 <_svfprintf_r+0x626>
   106b4:	str	r3, [sp, #44]	; 0x2c
   106b6:	ldr	r3, [pc, #616]	; (10920 <_svfprintf_r+0x10b0>)
   106b8:	str	r3, [sp, #68]	; 0x44
   106ba:	ands.w	r1, r8, #32
   106be:	beq.w	108cc <_svfprintf_r+0x105c>
   106c2:	ldr	r3, [sp, #32]
   106c4:	adds	r3, #7
   106c6:	bic.w	r3, r3, #7
   106ca:	ldr	r1, [r3, #4]
   106cc:	ldr.w	r2, [r3], #8
   106d0:	str	r3, [sp, #32]
   106d2:	tst.w	r8, #1
   106d6:	beq.n	106ee <_svfprintf_r+0xe7e>
   106d8:	orrs.w	r3, r2, r1
   106dc:	beq.n	106ee <_svfprintf_r+0xe7e>
   106de:	ldr	r3, [sp, #44]	; 0x2c
   106e0:	strb.w	r3, [sp, #105]	; 0x69
   106e4:	movs	r3, #48	; 0x30
   106e6:	orr.w	r8, r8, #2
   106ea:	strb.w	r3, [sp, #104]	; 0x68
   106ee:	bic.w	r3, r8, #1024	; 0x400
   106f2:	str	r3, [sp, #8]
   106f4:	movs	r3, #2
   106f6:	b.w	fdba <_svfprintf_r+0x54a>
   106fa:	str	r3, [sp, #44]	; 0x2c
   106fc:	b.w	fe6c <_svfprintf_r+0x5fc>
   10700:	str	r3, [sp, #44]	; 0x2c
   10702:	ldr	r3, [pc, #544]	; (10924 <_svfprintf_r+0x10b4>)
   10704:	str	r3, [sp, #68]	; 0x44
   10706:	b.n	106ba <_svfprintf_r+0xe4a>
   10708:	ldr	r3, [sp, #32]
   1070a:	movs	r1, #1
   1070c:	ldr.w	r2, [r3], #4
   10710:	str	r1, [sp, #8]
   10712:	strb.w	r2, [sp, #220]	; 0xdc
   10716:	str	r3, [sp, #32]
   10718:	str	r1, [sp, #20]
   1071a:	add	r4, sp, #220	; 0xdc
   1071c:	b.w	fc7e <_svfprintf_r+0x40e>
   10720:	vmov	r1, s22
   10724:	add	r2, sp, #144	; 0x90
   10726:	mov	r0, fp
   10728:	bl	14588 <__ssprint_r>
   1072c:	cmp	r0, #0
   1072e:	bne.w	1013a <_svfprintf_r+0x8ca>
   10732:	ldr	r2, [sp, #152]	; 0x98
   10734:	add.w	sl, sp, #156	; 0x9c
   10738:	b.n	fff6 <_svfprintf_r+0x786>
   1073a:	ldr	r3, [sp, #12]
   1073c:	str	r4, [sp, #28]
   1073e:	cmp	r3, #6
   10740:	mov	r2, r4
   10742:	it	cs
   10744:	movcs	r3, #6
   10746:	str	r4, [sp, #12]
   10748:	mov	r1, r4
   1074a:	strd	r2, r2, [sp, #48]	; 0x30
   1074e:	ldr	r4, [pc, #472]	; (10928 <_svfprintf_r+0x10b8>)
   10750:	str	r3, [sp, #8]
   10752:	str	r3, [sp, #20]
   10754:	str	r2, [sp, #60]	; 0x3c
   10756:	b.w	fc32 <_svfprintf_r+0x3c2>
   1075a:	movs	r1, #64	; 0x40
   1075c:	mov	r0, fp
   1075e:	bl	bac0 <_malloc_r>
   10762:	str	r0, [r4, #0]
   10764:	str	r0, [r4, #16]
   10766:	cmp	r0, #0
   10768:	beq.w	1138a <_svfprintf_r+0x1b1a>
   1076c:	movs	r3, #64	; 0x40
   1076e:	str	r3, [r4, #20]
   10770:	b.w	f8b0 <_svfprintf_r+0x40>
   10774:	cmp	r5, #16
   10776:	ldr	r3, [sp, #148]	; 0x94
   10778:	ble.w	10c36 <_svfprintf_r+0x13c6>
   1077c:	mov	r1, sl
   1077e:	movs	r6, #16
   10780:	vmov	sl, s22
   10784:	b.n	10790 <_svfprintf_r+0xf20>
   10786:	adds	r1, #8
   10788:	subs	r5, #16
   1078a:	cmp	r5, #16
   1078c:	ble.w	10c34 <_svfprintf_r+0x13c4>
   10790:	adds	r3, #1
   10792:	ldr	r0, [pc, #408]	; (1092c <_svfprintf_r+0x10bc>)
   10794:	adds	r2, #16
   10796:	cmp	r3, #7
   10798:	strd	r0, r6, [r1]
   1079c:	strd	r3, r2, [sp, #148]	; 0x94
   107a0:	ble.n	10786 <_svfprintf_r+0xf16>
   107a2:	add	r2, sp, #144	; 0x90
   107a4:	mov	r1, sl
   107a6:	mov	r0, fp
   107a8:	bl	14588 <__ssprint_r>
   107ac:	cmp	r0, #0
   107ae:	bne.w	1013a <_svfprintf_r+0x8ca>
   107b2:	ldrd	r3, r2, [sp, #148]	; 0x94
   107b6:	add	r1, sp, #156	; 0x9c
   107b8:	b.n	10788 <_svfprintf_r+0xf18>
   107ba:	ldr	r3, [sp, #56]	; 0x38
   107bc:	str.w	r9, [sp, #36]	; 0x24
   107c0:	adds	r3, r4, r3
   107c2:	str	r3, [sp, #12]
   107c4:	ldr	r3, [sp, #52]	; 0x34
   107c6:	str.w	r8, [sp, #40]	; 0x28
   107ca:	ldr	r6, [sp, #76]	; 0x4c
   107cc:	ldr	r5, [sp, #20]
   107ce:	ldr.w	r9, [sp, #88]	; 0x58
   107d2:	ldr.w	r8, [sp, #60]	; 0x3c
   107d6:	str	r4, [sp, #44]	; 0x2c
   107d8:	vmov	r1, s22
   107dc:	mov	r0, sl
   107de:	cmp	r3, #0
   107e0:	beq.n	1084c <_svfprintf_r+0xfdc>
   107e2:	cmp.w	r8, #0
   107e6:	bne.n	10854 <_svfprintf_r+0xfe4>
   107e8:	ldr	r3, [sp, #52]	; 0x34
   107ea:	subs	r3, #1
   107ec:	subs	r6, #1
   107ee:	str	r3, [sp, #52]	; 0x34
   107f0:	ldr	r3, [sp, #84]	; 0x54
   107f2:	strd	r3, r9, [r0]
   107f6:	ldr	r3, [sp, #148]	; 0x94
   107f8:	adds	r3, #1
   107fa:	add	r2, r9
   107fc:	cmp	r3, #7
   107fe:	str	r2, [sp, #152]	; 0x98
   10800:	str	r3, [sp, #148]	; 0x94
   10802:	bgt.n	108de <_svfprintf_r+0x106e>
   10804:	adds	r0, #8
   10806:	ldr	r3, [sp, #12]
   10808:	ldrb.w	ip, [r6]
   1080c:	subs	r3, r3, r5
   1080e:	cmp	r3, ip
   10810:	it	ge
   10812:	movge	r3, ip
   10814:	cmp	r3, #0
   10816:	mov	sl, r3
   10818:	ble.n	10834 <_svfprintf_r+0xfc4>
   1081a:	ldr	r4, [sp, #148]	; 0x94
   1081c:	adds	r4, #1
   1081e:	add	r2, r3
   10820:	cmp	r4, #7
   10822:	strd	r5, r3, [r0]
   10826:	str	r2, [sp, #152]	; 0x98
   10828:	str	r4, [sp, #148]	; 0x94
   1082a:	bgt.w	10b1c <_svfprintf_r+0x12ac>
   1082e:	ldrb.w	ip, [r6]
   10832:	adds	r0, #8
   10834:	cmp.w	sl, #0
   10838:	ite	ge
   1083a:	subge.w	r4, ip, sl
   1083e:	movlt	r4, ip
   10840:	cmp	r4, #0
   10842:	bgt.n	1085a <_svfprintf_r+0xfea>
   10844:	add	r5, ip
   10846:	ldr	r3, [sp, #52]	; 0x34
   10848:	cmp	r3, #0
   1084a:	bne.n	107e2 <_svfprintf_r+0xf72>
   1084c:	cmp.w	r8, #0
   10850:	beq.w	10fac <_svfprintf_r+0x173c>
   10854:	add.w	r8, r8, #4294967295
   10858:	b.n	107f0 <_svfprintf_r+0xf80>
   1085a:	cmp	r4, #16
   1085c:	ldr.w	ip, [sp, #148]	; 0x94
   10860:	ble.n	108ac <_svfprintf_r+0x103c>
   10862:	str	r5, [sp, #20]
   10864:	mov.w	sl, #16
   10868:	mov	r3, ip
   1086a:	mov	r5, r1
   1086c:	b.n	10878 <_svfprintf_r+0x1008>
   1086e:	subs	r4, #16
   10870:	cmp	r4, #16
   10872:	add.w	r0, r0, #8
   10876:	ble.n	108a6 <_svfprintf_r+0x1036>
   10878:	adds	r3, #1
   1087a:	ldr	r1, [pc, #176]	; (1092c <_svfprintf_r+0x10bc>)
   1087c:	adds	r2, #16
   1087e:	cmp	r3, #7
   10880:	strd	r1, sl, [r0]
   10884:	strd	r3, r2, [sp, #148]	; 0x94
   10888:	ble.n	1086e <_svfprintf_r+0xffe>
   1088a:	add	r2, sp, #144	; 0x90
   1088c:	mov	r1, r5
   1088e:	mov	r0, fp
   10890:	bl	14588 <__ssprint_r>
   10894:	cmp	r0, #0
   10896:	bne.w	1013a <_svfprintf_r+0x8ca>
   1089a:	subs	r4, #16
   1089c:	cmp	r4, #16
   1089e:	ldrd	r3, r2, [sp, #148]	; 0x94
   108a2:	add	r0, sp, #156	; 0x9c
   108a4:	bgt.n	10878 <_svfprintf_r+0x1008>
   108a6:	mov	r1, r5
   108a8:	ldr	r5, [sp, #20]
   108aa:	mov	ip, r3
   108ac:	add.w	r3, ip, #1
   108b0:	add	r2, r4
   108b2:	str	r4, [r0, #4]
   108b4:	cmp	r3, #7
   108b6:	ldr	r4, [pc, #116]	; (1092c <_svfprintf_r+0x10bc>)
   108b8:	str	r4, [r0, #0]
   108ba:	strd	r3, r2, [sp, #148]	; 0x94
   108be:	bgt.w	1104e <_svfprintf_r+0x17de>
   108c2:	ldrb.w	ip, [r6]
   108c6:	adds	r0, #8
   108c8:	add	r5, ip
   108ca:	b.n	10846 <_svfprintf_r+0xfd6>
   108cc:	ands.w	r3, r8, #16
   108d0:	beq.w	10a58 <_svfprintf_r+0x11e8>
   108d4:	ldr	r3, [sp, #32]
   108d6:	ldr.w	r2, [r3], #4
   108da:	str	r3, [sp, #32]
   108dc:	b.n	106d2 <_svfprintf_r+0xe62>
   108de:	add	r2, sp, #144	; 0x90
   108e0:	mov	r0, fp
   108e2:	str	r1, [sp, #20]
   108e4:	bl	14588 <__ssprint_r>
   108e8:	cmp	r0, #0
   108ea:	bne.w	1013a <_svfprintf_r+0x8ca>
   108ee:	ldr	r2, [sp, #152]	; 0x98
   108f0:	ldr	r1, [sp, #20]
   108f2:	add	r0, sp, #156	; 0x9c
   108f4:	b.n	10806 <_svfprintf_r+0xf96>
   108f6:	ldr	r0, [sp, #8]
   108f8:	str.w	sl, [sp, #28]
   108fc:	add	r4, sp, #320	; 0x140
   108fe:	and.w	r0, r0, #1024	; 0x400
   10902:	movs	r5, #0
   10904:	vmov	s20, fp
   10908:	ldr	r3, [pc, #36]	; (10930 <_svfprintf_r+0x10c0>)
   1090a:	ldr.w	sl, [sp, #76]	; 0x4c
   1090e:	str.w	r9, [sp, #20]
   10912:	mov	fp, r4
   10914:	mov.w	r8, #5
   10918:	mov	ip, r5
   1091a:	mov	r4, r0
   1091c:	b.n	10940 <_svfprintf_r+0x10d0>
   1091e:	nop
   10920:	.word	0x200009a8
   10924:	.word	0x200009bc
   10928:	.word	0x200009d0
   1092c:	.word	0x20007878
   10930:	.word	0xcccccccd
   10934:	cmp	r2, #10
   10936:	sbcs.w	r1, r1, #0
   1093a:	bcc.n	109aa <_svfprintf_r+0x113a>
   1093c:	mov	r2, r9
   1093e:	mov	r1, r6
   10940:	adds	r0, r2, r1
   10942:	adc.w	r0, r0, #0
   10946:	umull	r5, r6, r3, r0
   1094a:	bic.w	r5, r6, #3
   1094e:	add.w	r5, r5, r6, lsr #2
   10952:	subs	r0, r0, r5
   10954:	subs	r5, r2, r0
   10956:	mov.w	r6, #3435973836	; 0xcccccccc
   1095a:	sbc.w	lr, r1, #0
   1095e:	mul.w	r6, r6, r5
   10962:	umull	r9, r5, r5, r3
   10966:	mla	r6, r3, lr, r6
   1096a:	and.w	lr, r9, #1
   1096e:	add	r6, r5
   10970:	umull	r5, lr, lr, r8
   10974:	adds	r5, r5, r0
   10976:	mov.w	r9, r9, lsr #1
   1097a:	adds	r5, #48	; 0x30
   1097c:	strb.w	r5, [fp, #-1]
   10980:	orr.w	r9, r9, r6, lsl #31
   10984:	add.w	ip, ip, #1
   10988:	add.w	fp, fp, #4294967295
   1098c:	lsrs	r6, r6, #1
   1098e:	cmp	r4, #0
   10990:	beq.n	10934 <_svfprintf_r+0x10c4>
   10992:	ldrb.w	r0, [sl]
   10996:	cmp	ip, r0
   10998:	bne.n	10934 <_svfprintf_r+0x10c4>
   1099a:	cmp.w	ip, #255	; 0xff
   1099e:	beq.n	10934 <_svfprintf_r+0x10c4>
   109a0:	cmp	r2, #10
   109a2:	sbcs.w	r1, r1, #0
   109a6:	bcs.w	10cc8 <_svfprintf_r+0x1458>
   109aa:	mov	r4, fp
   109ac:	add	r3, sp, #320	; 0x140
   109ae:	subs	r3, r3, r4
   109b0:	ldr.w	r9, [sp, #20]
   109b4:	str.w	sl, [sp, #76]	; 0x4c
   109b8:	vmov	fp, s20
   109bc:	ldr.w	sl, [sp, #28]
   109c0:	ldr.w	r8, [sp, #8]
   109c4:	str.w	ip, [sp, #56]	; 0x38
   109c8:	str	r3, [sp, #20]
   109ca:	b.w	ff52 <_svfprintf_r+0x6e2>
   109ce:	vmov	r1, s22
   109d2:	add	r2, sp, #144	; 0x90
   109d4:	mov	r0, fp
   109d6:	bl	14588 <__ssprint_r>
   109da:	cmp	r0, #0
   109dc:	bne.w	1013a <_svfprintf_r+0x8ca>
   109e0:	ldrb.w	r1, [sp, #103]	; 0x67
   109e4:	ldr	r2, [sp, #152]	; 0x98
   109e6:	add.w	sl, sp, #156	; 0x9c
   109ea:	b.w	fb1a <_svfprintf_r+0x2aa>
   109ee:	ldr	r3, [sp, #148]	; 0x94
   109f0:	ldr	r0, [pc, #760]	; (10cec <_svfprintf_r+0x147c>)
   109f2:	str.w	r0, [sl]
   109f6:	adds	r3, #1
   109f8:	adds	r2, #1
   109fa:	movs	r0, #1
   109fc:	cmp	r3, #7
   109fe:	str	r2, [sp, #152]	; 0x98
   10a00:	str	r3, [sp, #148]	; 0x94
   10a02:	str.w	r0, [sl, #4]
   10a06:	bgt.w	10cf8 <_svfprintf_r+0x1488>
   10a0a:	add.w	sl, sl, #8
   10a0e:	cmp	r1, #0
   10a10:	bne.w	10b72 <_svfprintf_r+0x1302>
   10a14:	ldr	r1, [sp, #56]	; 0x38
   10a16:	and.w	r3, r8, #1
   10a1a:	orrs	r3, r1
   10a1c:	beq.w	fba0 <_svfprintf_r+0x330>
   10a20:	ldr	r3, [sp, #64]	; 0x40
   10a22:	ldr	r1, [sp, #72]	; 0x48
   10a24:	add	r2, r3
   10a26:	strd	r1, r3, [sl]
   10a2a:	ldr	r3, [sp, #148]	; 0x94
   10a2c:	str	r2, [sp, #152]	; 0x98
   10a2e:	adds	r3, #1
   10a30:	cmp	r3, #7
   10a32:	str	r3, [sp, #148]	; 0x94
   10a34:	bgt.w	10edc <_svfprintf_r+0x166c>
   10a38:	add.w	sl, sl, #8
   10a3c:	ldr	r1, [sp, #56]	; 0x38
   10a3e:	str.w	r4, [sl]
   10a42:	adds	r3, #1
   10a44:	add	r2, r1
   10a46:	cmp	r3, #7
   10a48:	strd	r3, r2, [sp, #148]	; 0x94
   10a4c:	str.w	r1, [sl, #4]
   10a50:	ble.w	fb9c <_svfprintf_r+0x32c>
   10a54:	b.w	101d2 <_svfprintf_r+0x962>
   10a58:	ands.w	r2, r8, #64	; 0x40
   10a5c:	beq.w	10c1a <_svfprintf_r+0x13aa>
   10a60:	ldr	r0, [sp, #32]
   10a62:	ldr.w	r2, [r0], #4
   10a66:	str	r0, [sp, #32]
   10a68:	mov	r1, r3
   10a6a:	uxth	r2, r2
   10a6c:	b.n	106d2 <_svfprintf_r+0xe62>
   10a6e:	vmov	r1, s22
   10a72:	add	r2, sp, #144	; 0x90
   10a74:	mov	r0, fp
   10a76:	bl	14588 <__ssprint_r>
   10a7a:	cmp	r0, #0
   10a7c:	bne.w	1013a <_svfprintf_r+0x8ca>
   10a80:	ldr	r2, [sp, #152]	; 0x98
   10a82:	add.w	sl, sp, #156	; 0x9c
   10a86:	b.w	ffd0 <_svfprintf_r+0x760>
   10a8a:	add	r6, sp, #136	; 0x88
   10a8c:	movs	r2, #8
   10a8e:	movs	r1, #0
   10a90:	mov	r0, r6
   10a92:	str	r4, [sp, #116]	; 0x74
   10a94:	bl	942c <memset>
   10a98:	ldr	r3, [sp, #12]
   10a9a:	adds	r2, r3, #1
   10a9c:	beq.w	10c56 <_svfprintf_r+0x13e6>
   10aa0:	movs	r5, #0
   10aa2:	str.w	r9, [sp, #8]
   10aa6:	str.w	r8, [sp, #28]
   10aaa:	mov	r9, r3
   10aac:	mov	r8, r5
   10aae:	b.n	10aca <_svfprintf_r+0x125a>
   10ab0:	add	r1, sp, #220	; 0xdc
   10ab2:	mov	r0, fp
   10ab4:	bl	14334 <_wcrtomb_r>
   10ab8:	adds	r3, r0, #1
   10aba:	add	r0, r8
   10abc:	beq.w	11250 <_svfprintf_r+0x19e0>
   10ac0:	cmp	r0, r9
   10ac2:	bgt.n	10ad6 <_svfprintf_r+0x1266>
   10ac4:	beq.w	112f8 <_svfprintf_r+0x1a88>
   10ac8:	mov	r8, r0
   10aca:	ldr	r2, [sp, #116]	; 0x74
   10acc:	ldr	r2, [r2, r5]
   10ace:	mov	r3, r6
   10ad0:	adds	r5, #4
   10ad2:	cmp	r2, #0
   10ad4:	bne.n	10ab0 <_svfprintf_r+0x1240>
   10ad6:	str.w	r8, [sp, #20]
   10ada:	ldr.w	r9, [sp, #8]
   10ade:	ldr.w	r8, [sp, #28]
   10ae2:	b.n	10c70 <_svfprintf_r+0x1400>
   10ae4:	adds	r3, #1
   10ae6:	ldr	r1, [pc, #520]	; (10cf0 <_svfprintf_r+0x1480>)
   10ae8:	str.w	r4, [sl, #4]
   10aec:	add	r2, r4
   10aee:	cmp	r3, #7
   10af0:	str.w	r1, [sl]
   10af4:	strd	r3, r2, [sp, #148]	; 0x94
   10af8:	ble.w	fb9c <_svfprintf_r+0x32c>
   10afc:	b.w	101d2 <_svfprintf_r+0x962>
   10b00:	vmov	r1, s22
   10b04:	add	r2, sp, #144	; 0x90
   10b06:	mov	r0, fp
   10b08:	bl	14588 <__ssprint_r>
   10b0c:	cmp	r0, #0
   10b0e:	bne.w	1013a <_svfprintf_r+0x8ca>
   10b12:	ldr	r2, [sp, #152]	; 0x98
   10b14:	add.w	sl, sp, #156	; 0x9c
   10b18:	b.w	fb6e <_svfprintf_r+0x2fe>
   10b1c:	add	r2, sp, #144	; 0x90
   10b1e:	mov	r0, fp
   10b20:	str	r1, [sp, #20]
   10b22:	bl	14588 <__ssprint_r>
   10b26:	cmp	r0, #0
   10b28:	bne.w	1013a <_svfprintf_r+0x8ca>
   10b2c:	ldrb.w	ip, [r6]
   10b30:	ldr	r2, [sp, #152]	; 0x98
   10b32:	ldr	r1, [sp, #20]
   10b34:	add	r0, sp, #156	; 0x9c
   10b36:	b.n	10834 <_svfprintf_r+0xfc4>
   10b38:	cmp	r3, #1
   10b3a:	str.w	r8, [sp, #8]
   10b3e:	bne.w	ff28 <_svfprintf_r+0x6b8>
   10b42:	b.w	1026c <_svfprintf_r+0x9fc>
   10b46:	ldr	r3, [sp, #32]
   10b48:	ldr	r1, [sp, #16]
   10b4a:	ldr.w	r2, [r3], #4
   10b4e:	mov	r4, r9
   10b50:	str	r1, [r2, #0]
   10b52:	str	r3, [sp, #32]
   10b54:	b.w	f8d4 <_svfprintf_r+0x64>
   10b58:	adds	r3, #1
   10b5a:	ldr	r1, [pc, #404]	; (10cf0 <_svfprintf_r+0x1480>)
   10b5c:	str.w	r4, [sl, #4]
   10b60:	add	r2, r4
   10b62:	cmp	r3, #7
   10b64:	strd	r3, r2, [sp, #148]	; 0x94
   10b68:	str.w	r1, [sl]
   10b6c:	ble.w	101b4 <_svfprintf_r+0x944>
   10b70:	b.n	1046a <_svfprintf_r+0xbfa>
   10b72:	ldr	r3, [sp, #64]	; 0x40
   10b74:	ldr	r0, [sp, #72]	; 0x48
   10b76:	add	r2, r3
   10b78:	strd	r0, r3, [sl]
   10b7c:	ldr	r3, [sp, #148]	; 0x94
   10b7e:	str	r2, [sp, #152]	; 0x98
   10b80:	adds	r3, #1
   10b82:	cmp	r3, #7
   10b84:	str	r3, [sp, #148]	; 0x94
   10b86:	bgt.w	10edc <_svfprintf_r+0x166c>
   10b8a:	add.w	sl, sl, #8
   10b8e:	cmp	r1, #0
   10b90:	bge.w	10a3c <_svfprintf_r+0x11cc>
   10b94:	negs	r5, r1
   10b96:	adds	r1, #16
   10b98:	bge.w	111ba <_svfprintf_r+0x194a>
   10b9c:	vmov	r1, s22
   10ba0:	movs	r6, #16
   10ba2:	b.n	10bb0 <_svfprintf_r+0x1340>
   10ba4:	add.w	sl, sl, #8
   10ba8:	subs	r5, #16
   10baa:	cmp	r5, #16
   10bac:	ble.w	111ba <_svfprintf_r+0x194a>
   10bb0:	adds	r3, #1
   10bb2:	ldr	r0, [pc, #316]	; (10cf0 <_svfprintf_r+0x1480>)
   10bb4:	adds	r2, #16
   10bb6:	cmp	r3, #7
   10bb8:	strd	r0, r6, [sl]
   10bbc:	strd	r3, r2, [sp, #148]	; 0x94
   10bc0:	ble.n	10ba4 <_svfprintf_r+0x1334>
   10bc2:	add	r2, sp, #144	; 0x90
   10bc4:	mov	r0, fp
   10bc6:	str	r1, [sp, #12]
   10bc8:	bl	14588 <__ssprint_r>
   10bcc:	cmp	r0, #0
   10bce:	bne.w	1013a <_svfprintf_r+0x8ca>
   10bd2:	ldrd	r3, r2, [sp, #148]	; 0x94
   10bd6:	ldr	r1, [sp, #12]
   10bd8:	add.w	sl, sp, #156	; 0x9c
   10bdc:	b.n	10ba8 <_svfprintf_r+0x1338>
   10bde:	ldr	r3, [sp, #32]
   10be0:	ands.w	r1, r8, #512	; 0x200
   10be4:	itte	ne
   10be6:	movne	r1, r2
   10be8:	ldrne.w	r2, [r3], #4
   10bec:	ldreq.w	r2, [r3], #4
   10bf0:	str	r3, [sp, #32]
   10bf2:	it	ne
   10bf4:	uxtbne	r2, r2
   10bf6:	b.w	fe84 <_svfprintf_r+0x614>
   10bfa:	ldr	r3, [sp, #8]
   10bfc:	ands.w	r1, r3, #512	; 0x200
   10c00:	ldr	r3, [sp, #32]
   10c02:	itte	ne
   10c04:	movne	r1, r2
   10c06:	ldrne.w	r2, [r3], #4
   10c0a:	ldreq.w	r2, [r3], #4
   10c0e:	str	r3, [sp, #32]
   10c10:	it	ne
   10c12:	uxtbne	r2, r2
   10c14:	movs	r3, #1
   10c16:	b.w	fdba <_svfprintf_r+0x54a>
   10c1a:	ldr	r3, [sp, #32]
   10c1c:	ands.w	r1, r8, #512	; 0x200
   10c20:	itte	ne
   10c22:	movne	r1, r2
   10c24:	ldrne.w	r2, [r3], #4
   10c28:	ldreq.w	r2, [r3], #4
   10c2c:	str	r3, [sp, #32]
   10c2e:	it	ne
   10c30:	uxtbne	r2, r2
   10c32:	b.n	106d2 <_svfprintf_r+0xe62>
   10c34:	mov	sl, r1
   10c36:	adds	r3, #1
   10c38:	ldr	r1, [pc, #180]	; (10cf0 <_svfprintf_r+0x1480>)
   10c3a:	str.w	r5, [sl, #4]
   10c3e:	add	r2, r5
   10c40:	cmp	r3, #7
   10c42:	strd	r3, r2, [sp, #148]	; 0x94
   10c46:	str.w	r1, [sl]
   10c4a:	bgt.w	10ec0 <_svfprintf_r+0x1650>
   10c4e:	add.w	sl, sl, #8
   10c52:	b.w	1036e <_svfprintf_r+0xafe>
   10c56:	movs	r3, #0
   10c58:	mov	r1, r3
   10c5a:	str	r6, [sp, #0]
   10c5c:	add	r2, sp, #116	; 0x74
   10c5e:	mov	r0, fp
   10c60:	bl	14380 <_wcsrtombs_r>
   10c64:	mov	r3, r0
   10c66:	adds	r3, #1
   10c68:	str	r0, [sp, #20]
   10c6a:	beq.w	11250 <_svfprintf_r+0x19e0>
   10c6e:	str	r4, [sp, #116]	; 0x74
   10c70:	ldr	r3, [sp, #20]
   10c72:	cmp	r3, #0
   10c74:	beq.n	10d14 <_svfprintf_r+0x14a4>
   10c76:	cmp	r3, #99	; 0x63
   10c78:	bgt.w	10eac <_svfprintf_r+0x163c>
   10c7c:	movs	r3, #0
   10c7e:	str	r3, [sp, #28]
   10c80:	add	r4, sp, #220	; 0xdc
   10c82:	movs	r2, #8
   10c84:	movs	r1, #0
   10c86:	mov	r0, r6
   10c88:	bl	942c <memset>
   10c8c:	ldr	r5, [sp, #20]
   10c8e:	str	r6, [sp, #0]
   10c90:	mov	r3, r5
   10c92:	add	r2, sp, #116	; 0x74
   10c94:	mov	r1, r4
   10c96:	mov	r0, fp
   10c98:	bl	14380 <_wcsrtombs_r>
   10c9c:	cmp	r5, r0
   10c9e:	bne.w	1139a <_svfprintf_r+0x1b2a>
   10ca2:	ldr	r2, [sp, #20]
   10ca4:	movs	r3, #0
   10ca6:	strb	r3, [r4, r2]
   10ca8:	bic.w	r2, r2, r2, asr #31
   10cac:	strd	r3, r3, [sp, #48]	; 0x30
   10cb0:	ldrb.w	r1, [sp, #103]	; 0x67
   10cb4:	str	r3, [sp, #12]
   10cb6:	str	r2, [sp, #8]
   10cb8:	str	r3, [sp, #60]	; 0x3c
   10cba:	b.w	fc32 <_svfprintf_r+0x3c2>
   10cbe:	movs	r1, #45	; 0x2d
   10cc0:	strb.w	r1, [sp, #103]	; 0x67
   10cc4:	b.w	fc10 <_svfprintf_r+0x3a0>
   10cc8:	ldr	r3, [sp, #88]	; 0x58
   10cca:	ldr	r1, [sp, #84]	; 0x54
   10ccc:	sub.w	fp, fp, r3
   10cd0:	mov	r2, r3
   10cd2:	mov	r0, fp
   10cd4:	bl	dad8 <strncpy>
   10cd8:	ldrb.w	r2, [sl, #1]
   10cdc:	ldr	r3, [pc, #20]	; (10cf4 <_svfprintf_r+0x1484>)
   10cde:	cbz	r2, 10ce4 <_svfprintf_r+0x1474>
   10ce0:	add.w	sl, sl, #1
   10ce4:	mov.w	ip, #0
   10ce8:	b.n	1093c <_svfprintf_r+0x10cc>
   10cea:	nop
   10cec:	.word	0x200009d8
   10cf0:	.word	0x20007878
   10cf4:	.word	0xcccccccd
   10cf8:	vmov	r1, s22
   10cfc:	add	r2, sp, #144	; 0x90
   10cfe:	mov	r0, fp
   10d00:	bl	14588 <__ssprint_r>
   10d04:	cmp	r0, #0
   10d06:	bne.w	1013a <_svfprintf_r+0x8ca>
   10d0a:	ldr	r1, [sp, #108]	; 0x6c
   10d0c:	ldr	r2, [sp, #152]	; 0x98
   10d0e:	add.w	sl, sp, #156	; 0x9c
   10d12:	b.n	10a0e <_svfprintf_r+0x119e>
   10d14:	ldr	r3, [sp, #20]
   10d16:	ldrb.w	r1, [sp, #103]	; 0x67
   10d1a:	str	r3, [sp, #60]	; 0x3c
   10d1c:	strd	r3, r3, [sp, #8]
   10d20:	strd	r3, r3, [sp, #48]	; 0x30
   10d24:	str	r3, [sp, #28]
   10d26:	b.w	fc32 <_svfprintf_r+0x3c2>
   10d2a:	ldr	r1, [sp, #56]	; 0x38
   10d2c:	ldr	r0, [sp, #20]
   10d2e:	adds	r5, r4, r1
   10d30:	subs	r5, r5, r0
   10d32:	subs	r4, r1, r3
   10d34:	cmp	r5, r4
   10d36:	it	ge
   10d38:	movge	r5, r4
   10d3a:	b.w	103d8 <_svfprintf_r+0xb68>
   10d3e:	ldr	r3, [sp, #32]
   10d40:	ldr	r1, [sp, #16]
   10d42:	ldr.w	r2, [r3], #4
   10d46:	str	r3, [sp, #32]
   10d48:	strh	r1, [r2, #0]
   10d4a:	mov	r4, r9
   10d4c:	b.w	f8d4 <_svfprintf_r+0x64>
   10d50:	ldrsb.w	r2, [r3], #4
   10d54:	str	r3, [sp, #32]
   10d56:	asrs	r1, r2, #31
   10d58:	mov	r3, r1
   10d5a:	b.w	fd14 <_svfprintf_r+0x4a4>
   10d5e:	ldr	r2, [sp, #12]
   10d60:	movs	r1, #2
   10d62:	add	r3, sp, #136	; 0x88
   10d64:	str	r3, [sp, #4]
   10d66:	add	r3, sp, #116	; 0x74
   10d68:	str	r3, [sp, #0]
   10d6a:	mov	r0, fp
   10d6c:	add	r3, sp, #108	; 0x6c
   10d6e:	vmov.f64	d0, d10
   10d72:	str	r2, [sp, #8]
   10d74:	bl	131a0 <_dtoa_r>
   10d78:	cmp	r5, #71	; 0x47
   10d7a:	ldr	r2, [sp, #8]
   10d7c:	mov	r4, r0
   10d7e:	beq.w	11044 <_svfprintf_r+0x17d4>
   10d82:	cmp	r5, #70	; 0x46
   10d84:	add	r0, r2
   10d86:	bne.n	10d94 <_svfprintf_r+0x1524>
   10d88:	ldrb	r3, [r4, #0]
   10d8a:	cmp	r3, #48	; 0x30
   10d8c:	beq.w	1126e <_svfprintf_r+0x19fe>
   10d90:	ldr	r2, [sp, #108]	; 0x6c
   10d92:	add	r0, r2
   10d94:	vcmp.f64	d10, #0.0
   10d98:	vmrs	APSR_nzcv, fpscr
   10d9c:	bne.w	1102c <_svfprintf_r+0x17bc>
   10da0:	mov	r3, r0
   10da2:	subs	r3, r3, r4
   10da4:	str	r3, [sp, #56]	; 0x38
   10da6:	cmp	r5, #71	; 0x47
   10da8:	beq.w	10fcc <_svfprintf_r+0x175c>
   10dac:	cmp	r5, #70	; 0x46
   10dae:	beq.w	1111c <_svfprintf_r+0x18ac>
   10db2:	ldr	r3, [sp, #108]	; 0x6c
   10db4:	str	r3, [sp, #48]	; 0x30
   10db6:	ldr	r3, [sp, #48]	; 0x30
   10db8:	cmp	r5, #65	; 0x41
   10dba:	add.w	r3, r3, #4294967295
   10dbe:	str	r3, [sp, #108]	; 0x6c
   10dc0:	beq.w	1118e <_svfprintf_r+0x191e>
   10dc4:	ldrb.w	r2, [sp, #44]	; 0x2c
   10dc8:	movs	r1, #0
   10dca:	cmp	r3, #0
   10dcc:	it	lt
   10dce:	ldrlt	r3, [sp, #48]	; 0x30
   10dd0:	strb.w	r2, [sp, #120]	; 0x78
   10dd4:	itte	lt
   10dd6:	rsblt	r3, r3, #1
   10dda:	movlt	r2, #45	; 0x2d
   10ddc:	movge	r2, #43	; 0x2b
   10dde:	cmp	r3, #9
   10de0:	strb.w	r2, [sp, #121]	; 0x79
   10de4:	ble.w	1119c <_svfprintf_r+0x192c>
   10de8:	add.w	r5, sp, #143	; 0x8f
   10dec:	ldr.w	ip, [pc, #1052]	; 1120c <_svfprintf_r+0x199c>
   10df0:	mov	r2, r5
   10df2:	mov	r0, r2
   10df4:	smull	r2, r1, ip, r3
   10df8:	asrs	r2, r3, #31
   10dfa:	rsb	r2, r2, r1, asr #2
   10dfe:	add.w	r1, r2, r2, lsl #2
   10e02:	sub.w	r1, r3, r1, lsl #1
   10e06:	adds	r1, #48	; 0x30
   10e08:	strb.w	r1, [r0, #-1]
   10e0c:	mov	r1, r3
   10e0e:	cmp	r1, #99	; 0x63
   10e10:	mov	r3, r2
   10e12:	add.w	r2, r0, #4294967295
   10e16:	bgt.n	10df2 <_svfprintf_r+0x1582>
   10e18:	adds	r3, #48	; 0x30
   10e1a:	uxtb	r1, r3
   10e1c:	subs	r3, r0, #2
   10e1e:	cmp	r5, r3
   10e20:	strb.w	r1, [r2, #-1]
   10e24:	bls.w	1133e <_svfprintf_r+0x1ace>
   10e28:	mov	r3, r2
   10e2a:	add.w	r2, sp, #122	; 0x7a
   10e2e:	b.n	10e34 <_svfprintf_r+0x15c4>
   10e30:	ldrb.w	r1, [r3], #1
   10e34:	strb.w	r1, [r2], #1
   10e38:	cmp	r5, r3
   10e3a:	bne.n	10e30 <_svfprintf_r+0x15c0>
   10e3c:	add.w	r3, sp, #145	; 0x91
   10e40:	add.w	r2, sp, #122	; 0x7a
   10e44:	subs	r3, r3, r0
   10e46:	add	r3, r2
   10e48:	add	r2, sp, #120	; 0x78
   10e4a:	subs	r3, r3, r2
   10e4c:	str	r3, [sp, #80]	; 0x50
   10e4e:	ldr	r3, [sp, #56]	; 0x38
   10e50:	ldr	r2, [sp, #80]	; 0x50
   10e52:	cmp	r3, #1
   10e54:	add	r2, r3
   10e56:	str	r2, [sp, #20]
   10e58:	ble.w	11262 <_svfprintf_r+0x19f2>
   10e5c:	ldr	r3, [sp, #20]
   10e5e:	ldr	r2, [sp, #64]	; 0x40
   10e60:	add	r3, r2
   10e62:	str	r3, [sp, #20]
   10e64:	bic.w	r3, r6, #1024	; 0x400
   10e68:	ldr	r2, [sp, #20]
   10e6a:	orr.w	r8, r3, #256	; 0x100
   10e6e:	movs	r3, #0
   10e70:	strd	r3, r3, [sp, #48]	; 0x30
   10e74:	bic.w	r2, r2, r2, asr #31
   10e78:	str	r3, [sp, #60]	; 0x3c
   10e7a:	str	r2, [sp, #8]
   10e7c:	ldr	r3, [sp, #36]	; 0x24
   10e7e:	cmp	r3, #0
   10e80:	bne.w	10fe6 <_svfprintf_r+0x1776>
   10e84:	ldrb.w	r1, [sp, #103]	; 0x67
   10e88:	str	r3, [sp, #12]
   10e8a:	b.w	fc32 <_svfprintf_r+0x3c2>
   10e8e:	mov	r0, r4
   10e90:	bl	e0c0 <strlen>
   10e94:	mov	r2, r0
   10e96:	str	r0, [sp, #20]
   10e98:	b.w	fcdc <_svfprintf_r+0x46c>
   10e9c:	vmov	r1, s22
   10ea0:	add	r2, sp, #144	; 0x90
   10ea2:	mov	r0, fp
   10ea4:	bl	14588 <__ssprint_r>
   10ea8:	b.w	fa86 <_svfprintf_r+0x216>
   10eac:	adds	r1, r3, #1
   10eae:	mov	r0, fp
   10eb0:	bl	bac0 <_malloc_r>
   10eb4:	mov	r4, r0
   10eb6:	cmp	r0, #0
   10eb8:	beq.w	11250 <_svfprintf_r+0x19e0>
   10ebc:	str	r0, [sp, #28]
   10ebe:	b.n	10c82 <_svfprintf_r+0x1412>
   10ec0:	vmov	r1, s22
   10ec4:	add	r2, sp, #144	; 0x90
   10ec6:	mov	r0, fp
   10ec8:	bl	14588 <__ssprint_r>
   10ecc:	cmp	r0, #0
   10ece:	bne.w	1013a <_svfprintf_r+0x8ca>
   10ed2:	ldr	r2, [sp, #152]	; 0x98
   10ed4:	add.w	sl, sp, #156	; 0x9c
   10ed8:	b.w	1036e <_svfprintf_r+0xafe>
   10edc:	vmov	r1, s22
   10ee0:	add	r2, sp, #144	; 0x90
   10ee2:	mov	r0, fp
   10ee4:	bl	14588 <__ssprint_r>
   10ee8:	cmp	r0, #0
   10eea:	bne.w	1013a <_svfprintf_r+0x8ca>
   10eee:	ldrd	r3, r2, [sp, #148]	; 0x94
   10ef2:	ldr	r1, [sp, #108]	; 0x6c
   10ef4:	add.w	sl, sp, #156	; 0x9c
   10ef8:	b.n	10b8e <_svfprintf_r+0x131e>
   10efa:	movs	r3, #6
   10efc:	str	r3, [sp, #12]
   10efe:	b.w	10608 <_svfprintf_r+0xd98>
   10f02:	ldr	r3, [sp, #12]
   10f04:	movs	r1, #2
   10f06:	adds	r2, r3, #1
   10f08:	b.n	10d62 <_svfprintf_r+0x14f2>
   10f0a:	ldr	r2, [sp, #12]
   10f0c:	movs	r1, #3
   10f0e:	b.n	10d62 <_svfprintf_r+0x14f2>
   10f10:	add	r0, sp, #108	; 0x6c
   10f12:	vmov.f64	d0, d10
   10f16:	bl	12f48 <frexp>
   10f1a:	vmov.f64	d7, #64	; 0x3e000000  0.125
   10f1e:	vmul.f64	d0, d0, d7
   10f22:	vcmp.f64	d0, #0.0
   10f26:	vmrs	APSR_nzcv, fpscr
   10f2a:	bne.n	10f30 <_svfprintf_r+0x16c0>
   10f2c:	movs	r3, #1
   10f2e:	str	r3, [sp, #108]	; 0x6c
   10f30:	ldr	r0, [pc, #716]	; (11200 <_svfprintf_r+0x1990>)
   10f32:	ldr	r3, [sp, #12]
   10f34:	vmov.f64	d5, #48	; 0x41800000  16.0
   10f38:	subs	r3, #1
   10f3a:	mov	r2, r4
   10f3c:	b.n	10f48 <_svfprintf_r+0x16d8>
   10f3e:	vcmp.f64	d0, #0.0
   10f42:	vmrs	APSR_nzcv, fpscr
   10f46:	beq.n	10f70 <_svfprintf_r+0x1700>
   10f48:	vmul.f64	d0, d0, d5
   10f4c:	vcvt.s32.f64	s15, d0
   10f50:	cmp.w	r3, #4294967295
   10f54:	vmov	r1, s15
   10f58:	ldrb	r1, [r0, r1]
   10f5a:	vcvt.f64.s32	d6, s15
   10f5e:	mov	ip, r2
   10f60:	vsub.f64	d0, d0, d6
   10f64:	strb.w	r1, [r2], #1
   10f68:	mov	r1, r3
   10f6a:	add.w	r3, r3, #4294967295
   10f6e:	bne.n	10f3e <_svfprintf_r+0x16ce>
   10f70:	vmov.f64	d6, #96	; 0x3f000000  0.5
   10f74:	vcmpe.f64	d0, d6
   10f78:	vmrs	APSR_nzcv, fpscr
   10f7c:	bgt.w	11210 <_svfprintf_r+0x19a0>
   10f80:	vcmp.f64	d0, d6
   10f84:	vmrs	APSR_nzcv, fpscr
   10f88:	bne.n	10f94 <_svfprintf_r+0x1724>
   10f8a:	vmov	r3, s15
   10f8e:	lsls	r3, r3, #31
   10f90:	bmi.w	11210 <_svfprintf_r+0x19a0>
   10f94:	cmp	r1, #0
   10f96:	blt.n	10fa6 <_svfprintf_r+0x1736>
   10f98:	adds	r3, r1, #1
   10f9a:	add	r3, r2
   10f9c:	movs	r1, #48	; 0x30
   10f9e:	strb.w	r1, [r2], #1
   10fa2:	cmp	r3, r2
   10fa4:	bne.n	10f9e <_svfprintf_r+0x172e>
   10fa6:	subs	r3, r2, r4
   10fa8:	str	r3, [sp, #56]	; 0x38
   10faa:	b.n	10da6 <_svfprintf_r+0x1536>
   10fac:	ldr	r4, [sp, #44]	; 0x2c
   10fae:	ldr	r3, [sp, #56]	; 0x38
   10fb0:	ldr.w	r9, [sp, #36]	; 0x24
   10fb4:	ldr.w	r8, [sp, #40]	; 0x28
   10fb8:	str	r6, [sp, #76]	; 0x4c
   10fba:	adds	r3, r4, r3
   10fbc:	cmp	r5, r3
   10fbe:	mov	r1, r5
   10fc0:	it	cs
   10fc2:	movcs	r1, r3
   10fc4:	mov	sl, r0
   10fc6:	str	r1, [sp, #20]
   10fc8:	b.w	1037c <_svfprintf_r+0xb0c>
   10fcc:	ldr	r3, [sp, #108]	; 0x6c
   10fce:	str	r3, [sp, #48]	; 0x30
   10fd0:	adds	r2, r3, #3
   10fd2:	blt.n	10fda <_svfprintf_r+0x176a>
   10fd4:	ldr	r2, [sp, #12]
   10fd6:	cmp	r3, r2
   10fd8:	ble.n	10ff4 <_svfprintf_r+0x1784>
   10fda:	ldr	r3, [sp, #44]	; 0x2c
   10fdc:	subs	r3, #2
   10fde:	str	r3, [sp, #44]	; 0x2c
   10fe0:	bic.w	r5, r3, #32
   10fe4:	b.n	10db6 <_svfprintf_r+0x1546>
   10fe6:	movs	r1, #45	; 0x2d
   10fe8:	movs	r3, #0
   10fea:	strb.w	r1, [sp, #103]	; 0x67
   10fee:	str	r3, [sp, #12]
   10ff0:	b.w	fc38 <_svfprintf_r+0x3c8>
   10ff4:	ldr	r3, [sp, #48]	; 0x30
   10ff6:	ldr	r2, [sp, #56]	; 0x38
   10ff8:	cmp	r3, r2
   10ffa:	blt.w	11178 <_svfprintf_r+0x1908>
   10ffe:	lsls	r0, r6, #31
   11000:	ldr	r3, [sp, #48]	; 0x30
   11002:	bpl.w	1126a <_svfprintf_r+0x19fa>
   11006:	ldr	r2, [sp, #64]	; 0x40
   11008:	add	r3, r2
   1100a:	str	r3, [sp, #20]
   1100c:	lsls	r1, r6, #21
   1100e:	bpl.n	11018 <_svfprintf_r+0x17a8>
   11010:	ldr	r3, [sp, #48]	; 0x30
   11012:	cmp	r3, #0
   11014:	bgt.w	11282 <_svfprintf_r+0x1a12>
   11018:	ldr	r3, [sp, #20]
   1101a:	bic.w	r3, r3, r3, asr #31
   1101e:	str	r3, [sp, #8]
   11020:	movs	r3, #103	; 0x67
   11022:	str	r3, [sp, #44]	; 0x2c
   11024:	movs	r3, #0
   11026:	str	r3, [sp, #60]	; 0x3c
   11028:	str	r3, [sp, #52]	; 0x34
   1102a:	b.n	10e7c <_svfprintf_r+0x160c>
   1102c:	ldr	r3, [sp, #136]	; 0x88
   1102e:	cmp	r3, r0
   11030:	bcs.w	10da2 <_svfprintf_r+0x1532>
   11034:	movs	r1, #48	; 0x30
   11036:	adds	r2, r3, #1
   11038:	str	r2, [sp, #136]	; 0x88
   1103a:	strb	r1, [r3, #0]
   1103c:	ldr	r3, [sp, #136]	; 0x88
   1103e:	cmp	r0, r3
   11040:	bhi.n	11036 <_svfprintf_r+0x17c6>
   11042:	b.n	10da2 <_svfprintf_r+0x1532>
   11044:	lsls	r3, r6, #31
   11046:	bmi.w	11198 <_svfprintf_r+0x1928>
   1104a:	ldr	r3, [sp, #136]	; 0x88
   1104c:	b.n	10da2 <_svfprintf_r+0x1532>
   1104e:	add	r2, sp, #144	; 0x90
   11050:	mov	r0, fp
   11052:	str	r1, [sp, #20]
   11054:	bl	14588 <__ssprint_r>
   11058:	cmp	r0, #0
   1105a:	bne.w	1013a <_svfprintf_r+0x8ca>
   1105e:	ldrb.w	ip, [r6]
   11062:	ldr	r2, [sp, #152]	; 0x98
   11064:	ldr	r1, [sp, #20]
   11066:	add	r0, sp, #156	; 0x9c
   11068:	add	r5, ip
   1106a:	b.w	10846 <_svfprintf_r+0xfd6>
   1106e:	vmov	r1, s22
   11072:	add	r2, sp, #144	; 0x90
   11074:	mov	r0, fp
   11076:	bl	14588 <__ssprint_r>
   1107a:	cmp	r0, #0
   1107c:	bne.w	1013a <_svfprintf_r+0x8ca>
   11080:	ldr	r2, [sp, #152]	; 0x98
   11082:	add.w	sl, sp, #156	; 0x9c
   11086:	b.w	10360 <_svfprintf_r+0xaf0>
   1108a:	movs	r3, #120	; 0x78
   1108c:	strb.w	r3, [sp, #105]	; 0x69
   11090:	movs	r3, #48	; 0x30
   11092:	strb.w	r3, [sp, #104]	; 0x68
   11096:	ldr	r3, [sp, #12]
   11098:	cmp	r3, #99	; 0x63
   1109a:	orr.w	r6, r8, #2
   1109e:	bgt.w	111ee <_svfprintf_r+0x197e>
   110a2:	movs	r3, #0
   110a4:	str	r3, [sp, #28]
   110a6:	add	r4, sp, #220	; 0xdc
   110a8:	vmov	r3, s17
   110ac:	cmp	r3, #0
   110ae:	orr.w	r8, r8, #258	; 0x102
   110b2:	blt.n	1110c <_svfprintf_r+0x189c>
   110b4:	vmov.f64	d10, d8
   110b8:	ldr	r3, [sp, #44]	; 0x2c
   110ba:	bic.w	r5, r3, #32
   110be:	movs	r3, #0
   110c0:	str	r3, [sp, #36]	; 0x24
   110c2:	ldr	r3, [sp, #44]	; 0x2c
   110c4:	cmp	r3, #97	; 0x61
   110c6:	bne.w	10624 <_svfprintf_r+0xdb4>
   110ca:	vmov.f64	d0, d10
   110ce:	add	r0, sp, #108	; 0x6c
   110d0:	bl	12f48 <frexp>
   110d4:	vmov.f64	d7, #64	; 0x3e000000  0.125
   110d8:	vmul.f64	d0, d0, d7
   110dc:	vcmp.f64	d0, #0.0
   110e0:	vmrs	APSR_nzcv, fpscr
   110e4:	bne.n	110ea <_svfprintf_r+0x187a>
   110e6:	movs	r3, #1
   110e8:	str	r3, [sp, #108]	; 0x6c
   110ea:	ldr	r0, [pc, #280]	; (11204 <_svfprintf_r+0x1994>)
   110ec:	b.n	10f32 <_svfprintf_r+0x16c2>
   110ee:	vmov	r1, s22
   110f2:	add	r2, sp, #144	; 0x90
   110f4:	mov	r0, fp
   110f6:	bl	14588 <__ssprint_r>
   110fa:	cmp	r0, #0
   110fc:	bne.w	1013a <_svfprintf_r+0x8ca>
   11100:	ldr	r3, [sp, #108]	; 0x6c
   11102:	ldr	r2, [sp, #152]	; 0x98
   11104:	add.w	sl, sp, #156	; 0x9c
   11108:	b.w	103a8 <_svfprintf_r+0xb38>
   1110c:	ldr	r3, [sp, #44]	; 0x2c
   1110e:	bic.w	r5, r3, #32
   11112:	movs	r3, #45	; 0x2d
   11114:	str	r3, [sp, #36]	; 0x24
   11116:	vneg.f64	d10, d8
   1111a:	b.n	110c2 <_svfprintf_r+0x1852>
   1111c:	ldr	r2, [sp, #108]	; 0x6c
   1111e:	str	r2, [sp, #48]	; 0x30
   11120:	cmp	r2, #0
   11122:	and.w	r3, r6, #1
   11126:	ble.w	11344 <_svfprintf_r+0x1ad4>
   1112a:	ldr	r1, [sp, #12]
   1112c:	orrs	r3, r1
   1112e:	bne.w	112d0 <_svfprintf_r+0x1a60>
   11132:	ldr	r3, [sp, #48]	; 0x30
   11134:	str	r3, [sp, #20]
   11136:	movs	r3, #102	; 0x66
   11138:	str	r3, [sp, #44]	; 0x2c
   1113a:	lsls	r2, r6, #21
   1113c:	bmi.w	11286 <_svfprintf_r+0x1a16>
   11140:	ldr	r3, [sp, #20]
   11142:	bic.w	r3, r3, r3, asr #31
   11146:	str	r3, [sp, #8]
   11148:	b.n	11024 <_svfprintf_r+0x17b4>
   1114a:	vmov	r1, s22
   1114e:	add	r2, sp, #144	; 0x90
   11150:	mov	r0, fp
   11152:	bl	14588 <__ssprint_r>
   11156:	cmp	r0, #0
   11158:	bne.w	1013a <_svfprintf_r+0x8ca>
   1115c:	ldr	r4, [sp, #108]	; 0x6c
   1115e:	ldr	r3, [sp, #56]	; 0x38
   11160:	ldr	r2, [sp, #152]	; 0x98
   11162:	subs	r4, r3, r4
   11164:	add.w	sl, sp, #156	; 0x9c
   11168:	b.w	103d8 <_svfprintf_r+0xb68>
   1116c:	movs	r3, #88	; 0x58
   1116e:	b.n	1108c <_svfprintf_r+0x181c>
   11170:	movs	r2, #0
   11172:	str	r2, [sp, #12]
   11174:	b.w	f92c <_svfprintf_r+0xbc>
   11178:	ldr	r3, [sp, #56]	; 0x38
   1117a:	ldr	r2, [sp, #64]	; 0x40
   1117c:	adds	r2, r3, r2
   1117e:	ldr	r3, [sp, #48]	; 0x30
   11180:	str	r2, [sp, #20]
   11182:	cmp	r3, #0
   11184:	ble.w	112de <_svfprintf_r+0x1a6e>
   11188:	movs	r3, #103	; 0x67
   1118a:	str	r3, [sp, #44]	; 0x2c
   1118c:	b.n	1113a <_svfprintf_r+0x18ca>
   1118e:	ldr	r2, [sp, #44]	; 0x2c
   11190:	adds	r2, #15
   11192:	uxtb	r2, r2
   11194:	movs	r1, #1
   11196:	b.n	10dca <_svfprintf_r+0x155a>
   11198:	adds	r0, r4, r2
   1119a:	b.n	10d94 <_svfprintf_r+0x1524>
   1119c:	cmp	r1, #0
   1119e:	bne.w	112f2 <_svfprintf_r+0x1a82>
   111a2:	movs	r2, #48	; 0x30
   111a4:	strb.w	r2, [sp, #122]	; 0x7a
   111a8:	add.w	r2, sp, #123	; 0x7b
   111ac:	adds	r3, #48	; 0x30
   111ae:	strb.w	r3, [r2], #1
   111b2:	add	r3, sp, #120	; 0x78
   111b4:	subs	r3, r2, r3
   111b6:	str	r3, [sp, #80]	; 0x50
   111b8:	b.n	10e4e <_svfprintf_r+0x15de>
   111ba:	adds	r3, #1
   111bc:	ldr	r1, [pc, #72]	; (11208 <_svfprintf_r+0x1998>)
   111be:	str.w	r5, [sl, #4]
   111c2:	add	r2, r5
   111c4:	cmp	r3, #7
   111c6:	strd	r3, r2, [sp, #148]	; 0x94
   111ca:	str.w	r1, [sl]
   111ce:	ble.w	10a38 <_svfprintf_r+0x11c8>
   111d2:	vmov	r1, s22
   111d6:	add	r2, sp, #144	; 0x90
   111d8:	mov	r0, fp
   111da:	bl	14588 <__ssprint_r>
   111de:	cmp	r0, #0
   111e0:	bne.w	1013a <_svfprintf_r+0x8ca>
   111e4:	ldrd	r3, r2, [sp, #148]	; 0x94
   111e8:	add.w	sl, sp, #156	; 0x9c
   111ec:	b.n	10a3c <_svfprintf_r+0x11cc>
   111ee:	adds	r1, r3, #1
   111f0:	mov	r0, fp
   111f2:	bl	bac0 <_malloc_r>
   111f6:	mov	r4, r0
   111f8:	cbz	r0, 11250 <_svfprintf_r+0x19e0>
   111fa:	str	r0, [sp, #28]
   111fc:	b.n	110a8 <_svfprintf_r+0x1838>
   111fe:	nop
   11200:	.word	0x200009bc
   11204:	.word	0x200009a8
   11208:	.word	0x20007878
   1120c:	.word	0x66666667
   11210:	str.w	ip, [sp, #136]	; 0x88
   11214:	ldrb.w	r1, [r2, #-1]
   11218:	ldrb.w	ip, [r0, #15]
   1121c:	cmp	r1, ip
   1121e:	mov	r3, r2
   11220:	bne.n	11238 <_svfprintf_r+0x19c8>
   11222:	mov.w	lr, #48	; 0x30
   11226:	strb.w	lr, [r3, #-1]
   1122a:	ldr	r3, [sp, #136]	; 0x88
   1122c:	subs	r1, r3, #1
   1122e:	str	r1, [sp, #136]	; 0x88
   11230:	ldrb.w	r1, [r3, #-1]
   11234:	cmp	ip, r1
   11236:	beq.n	11226 <_svfprintf_r+0x19b6>
   11238:	cmp	r1, #57	; 0x39
   1123a:	itet	ne
   1123c:	addne	r1, #1
   1123e:	ldrbeq	r1, [r0, #10]
   11240:	uxtbne	r1, r1
   11242:	strb.w	r1, [r3, #-1]
   11246:	b.n	10fa6 <_svfprintf_r+0x1736>
   11248:	movs	r3, #0
   1124a:	mov	r8, r2
   1124c:	str	r3, [sp, #28]
   1124e:	b.n	11112 <_svfprintf_r+0x18a2>
   11250:	vmov	r2, s22
   11254:	ldrsh.w	r3, [r2, #12]
   11258:	orr.w	r3, r3, #64	; 0x40
   1125c:	strh	r3, [r2, #12]
   1125e:	b.w	fa8e <_svfprintf_r+0x21e>
   11262:	lsls	r5, r6, #31
   11264:	bpl.w	10e64 <_svfprintf_r+0x15f4>
   11268:	b.n	10e5c <_svfprintf_r+0x15ec>
   1126a:	str	r3, [sp, #20]
   1126c:	b.n	1100c <_svfprintf_r+0x179c>
   1126e:	vcmp.f64	d10, #0.0
   11272:	vmrs	APSR_nzcv, fpscr
   11276:	beq.w	10d90 <_svfprintf_r+0x1520>
   1127a:	rsb	r2, r2, #1
   1127e:	str	r2, [sp, #108]	; 0x6c
   11280:	b.n	10d92 <_svfprintf_r+0x1522>
   11282:	movs	r3, #103	; 0x67
   11284:	str	r3, [sp, #44]	; 0x2c
   11286:	ldr	r1, [sp, #76]	; 0x4c
   11288:	ldrb	r3, [r1, #0]
   1128a:	cmp	r3, #255	; 0xff
   1128c:	beq.n	11382 <_svfprintf_r+0x1b12>
   1128e:	movs	r5, #0
   11290:	ldr	r2, [sp, #48]	; 0x30
   11292:	mov	r0, r5
   11294:	b.n	1129e <_svfprintf_r+0x1a2e>
   11296:	adds	r0, #1
   11298:	adds	r1, #1
   1129a:	cmp	r3, #255	; 0xff
   1129c:	beq.n	112b0 <_svfprintf_r+0x1a40>
   1129e:	cmp	r3, r2
   112a0:	bge.n	112b0 <_svfprintf_r+0x1a40>
   112a2:	subs	r2, r2, r3
   112a4:	ldrb	r3, [r1, #1]
   112a6:	cmp	r3, #0
   112a8:	bne.n	11296 <_svfprintf_r+0x1a26>
   112aa:	ldrb	r3, [r1, #0]
   112ac:	adds	r5, #1
   112ae:	b.n	1129a <_svfprintf_r+0x1a2a>
   112b0:	str	r2, [sp, #48]	; 0x30
   112b2:	str	r1, [sp, #76]	; 0x4c
   112b4:	str	r0, [sp, #52]	; 0x34
   112b6:	str	r5, [sp, #60]	; 0x3c
   112b8:	ldr	r2, [sp, #60]	; 0x3c
   112ba:	ldr	r3, [sp, #52]	; 0x34
   112bc:	ldr	r1, [sp, #88]	; 0x58
   112be:	add	r3, r2
   112c0:	ldr	r2, [sp, #20]
   112c2:	mla	r3, r1, r3, r2
   112c6:	str	r3, [sp, #20]
   112c8:	bic.w	r3, r3, r3, asr #31
   112cc:	str	r3, [sp, #8]
   112ce:	b.n	10e7c <_svfprintf_r+0x160c>
   112d0:	ldr	r3, [sp, #64]	; 0x40
   112d2:	adds	r3, r2, r3
   112d4:	add	r1, r3
   112d6:	movs	r3, #102	; 0x66
   112d8:	str	r1, [sp, #20]
   112da:	str	r3, [sp, #44]	; 0x2c
   112dc:	b.n	1113a <_svfprintf_r+0x18ca>
   112de:	rsb	r3, r3, #1
   112e2:	add	r2, r3
   112e4:	bic.w	r3, r2, r2, asr #31
   112e8:	str	r3, [sp, #8]
   112ea:	movs	r3, #103	; 0x67
   112ec:	str	r2, [sp, #20]
   112ee:	str	r3, [sp, #44]	; 0x2c
   112f0:	b.n	11024 <_svfprintf_r+0x17b4>
   112f2:	add.w	r2, sp, #122	; 0x7a
   112f6:	b.n	111ac <_svfprintf_r+0x193c>
   112f8:	ldr	r3, [sp, #12]
   112fa:	ldr.w	r9, [sp, #8]
   112fe:	ldr.w	r8, [sp, #28]
   11302:	str	r3, [sp, #20]
   11304:	b.n	10c70 <_svfprintf_r+0x1400>
   11306:	vmov	r3, s17
   1130a:	cmp	r3, #0
   1130c:	ite	lt
   1130e:	movlt	r1, #45	; 0x2d
   11310:	ldrbge.w	r1, [sp, #103]	; 0x67
   11314:	ldr	r4, [pc, #148]	; (113ac <_svfprintf_r+0x1b3c>)
   11316:	ldr	r3, [pc, #152]	; (113b0 <_svfprintf_r+0x1b40>)
   11318:	it	lt
   1131a:	strblt.w	r1, [sp, #103]	; 0x67
   1131e:	bic.w	r8, r8, #128	; 0x80
   11322:	b.w	fc18 <_svfprintf_r+0x3a8>
   11326:	ldr	r3, [sp, #12]
   11328:	str	r3, [sp, #8]
   1132a:	str	r3, [sp, #20]
   1132c:	movs	r3, #115	; 0x73
   1132e:	ldrb.w	r1, [sp, #103]	; 0x67
   11332:	str	r0, [sp, #12]
   11334:	str	r0, [sp, #60]	; 0x3c
   11336:	str	r0, [sp, #52]	; 0x34
   11338:	str	r3, [sp, #44]	; 0x2c
   1133a:	b.w	fc32 <_svfprintf_r+0x3c2>
   1133e:	movs	r3, #2
   11340:	str	r3, [sp, #80]	; 0x50
   11342:	b.n	10e4e <_svfprintf_r+0x15de>
   11344:	ldr	r2, [sp, #12]
   11346:	orrs	r3, r2
   11348:	bne.n	11356 <_svfprintf_r+0x1ae6>
   1134a:	movs	r3, #1
   1134c:	movs	r2, #102	; 0x66
   1134e:	str	r3, [sp, #8]
   11350:	str	r2, [sp, #44]	; 0x2c
   11352:	str	r3, [sp, #20]
   11354:	b.n	11024 <_svfprintf_r+0x17b4>
   11356:	ldr	r3, [sp, #64]	; 0x40
   11358:	adds	r3, #1
   1135a:	add	r2, r3
   1135c:	bic.w	r3, r2, r2, asr #31
   11360:	str	r3, [sp, #8]
   11362:	movs	r3, #102	; 0x66
   11364:	str	r2, [sp, #20]
   11366:	str	r3, [sp, #44]	; 0x2c
   11368:	b.n	11024 <_svfprintf_r+0x17b4>
   1136a:	ldr	r2, [sp, #32]
   1136c:	ldrb.w	r3, [r9, #1]
   11370:	mov	r9, r1
   11372:	ldr.w	r1, [r2], #4
   11376:	str	r2, [sp, #32]
   11378:	orr.w	r1, r1, r1, asr #31
   1137c:	str	r1, [sp, #12]
   1137e:	b.w	f928 <_svfprintf_r+0xb8>
   11382:	movs	r3, #0
   11384:	str	r3, [sp, #60]	; 0x3c
   11386:	str	r3, [sp, #52]	; 0x34
   11388:	b.n	112b8 <_svfprintf_r+0x1a48>
   1138a:	movs	r3, #12
   1138c:	str.w	r3, [fp]
   11390:	mov.w	r3, #4294967295
   11394:	str	r3, [sp, #16]
   11396:	b.w	fa9c <_svfprintf_r+0x22c>
   1139a:	vmov	r2, s22
   1139e:	ldrh	r3, [r2, #12]
   113a0:	orr.w	r3, r3, #64	; 0x40
   113a4:	strh	r3, [r2, #12]
   113a6:	b.w	1013a <_svfprintf_r+0x8ca>
   113aa:	nop
   113ac:	.word	0x200009a0
   113b0:	.word	0x200009a4

000113b4 <__ssvfscanf_r>:
   113b4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b8:	vpush	{d8}
   113bc:	sub.w	sp, sp, #732	; 0x2dc
   113c0:	mov	fp, r1
   113c2:	ldrsh.w	r1, [r1, #12]
   113c6:	add	r7, sp, #8
   113c8:	lsls	r4, r1, #18
   113ca:	mov	r9, r0
   113cc:	str	r2, [r7, #76]	; 0x4c
   113ce:	str	r3, [r7, #48]	; 0x30
   113d0:	bmi.n	113e6 <__ssvfscanf_r+0x32>
   113d2:	ldr.w	r3, [fp, #100]	; 0x64
   113d6:	orr.w	r1, r1, #8192	; 0x2000
   113da:	bic.w	r3, r3, #8192	; 0x2000
   113de:	strh.w	r1, [fp, #12]
   113e2:	str.w	r3, [fp, #100]	; 0x64
   113e6:	movs	r3, #0
   113e8:	mov	r4, r3
   113ea:	movs	r2, #8
   113ec:	mov	r1, r3
   113ee:	add.w	r0, r7, #88	; 0x58
   113f2:	str	r3, [r7, #44]	; 0x2c
   113f4:	mov	sl, r4
   113f6:	bl	942c <memset>
   113fa:	str	r4, [r7, #64]	; 0x40
   113fc:	str	r4, [r7, #36]	; 0x24
   113fe:	str	r4, [r7, #56]	; 0x38
   11400:	str	r4, [r7, #68]	; 0x44
   11402:	ldr	r3, [pc, #524]	; (11610 <__ssvfscanf_r+0x25c>)
   11404:	ldr.w	r4, [r3, #228]	; 0xe4
   11408:	bl	db3c <__locale_mb_cur_max>
   1140c:	add.w	r2, r7, #88	; 0x58
   11410:	mov	r3, r0
   11412:	str	r2, [sp, #0]
   11414:	add.w	r1, r7, #84	; 0x54
   11418:	ldr	r2, [r7, #76]	; 0x4c
   1141a:	mov	r0, r9
   1141c:	blx	r4
   1141e:	subs	r5, r0, #0
   11420:	ldr	r3, [r7, #76]	; 0x4c
   11422:	blt.n	1148c <__ssvfscanf_r+0xd8>
   11424:	add	r3, r5
   11426:	str	r3, [r7, #76]	; 0x4c
   11428:	ldr	r3, [r7, #84]	; 0x54
   1142a:	mov	r6, r5
   1142c:	cmp	r3, #0
   1142e:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   11432:	cmp	r5, #1
   11434:	beq.n	114a8 <__ssvfscanf_r+0xf4>
   11436:	cmp	r3, #37	; 0x25
   11438:	beq.n	114bc <__ssvfscanf_r+0x108>
   1143a:	cmp	r5, #0
   1143c:	beq.n	11402 <__ssvfscanf_r+0x4e>
   1143e:	ldr	r3, [r7, #76]	; 0x4c
   11440:	subs	r6, r3, r6
   11442:	ldr.w	r3, [fp, #4]
   11446:	subs	r4, r6, #1
   11448:	cmp	r3, #0
   1144a:	ble.w	1157e <__ssvfscanf_r+0x1ca>
   1144e:	ldr.w	r1, [fp]
   11452:	ldrb.w	ip, [r4, #1]
   11456:	ldrb.w	lr, [r1]
   1145a:	adds	r3, r4, #2
   1145c:	add.w	r0, sl, r3
   11460:	cmp	lr, ip
   11462:	add.w	r1, r1, #1
   11466:	sub.w	r2, r3, r6
   1146a:	add.w	r4, r4, #1
   1146e:	sub.w	r0, r0, r6
   11472:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   11476:	ldr.w	r3, [fp, #4]
   1147a:	str.w	r1, [fp]
   1147e:	subs	r3, #1
   11480:	cmp	r2, r5
   11482:	str.w	r3, [fp, #4]
   11486:	blt.n	11448 <__ssvfscanf_r+0x94>
   11488:	mov	sl, r0
   1148a:	b.n	11402 <__ssvfscanf_r+0x4e>
   1148c:	adds	r3, #1
   1148e:	str	r3, [r7, #76]	; 0x4c
   11490:	movs	r2, #8
   11492:	movw	r3, #65533	; 0xfffd
   11496:	movs	r1, #0
   11498:	add.w	r0, r7, #88	; 0x58
   1149c:	str	r3, [r7, #84]	; 0x54
   1149e:	bl	942c <memset>
   114a2:	ldr	r3, [r7, #84]	; 0x54
   114a4:	cmp	r3, #0
   114a6:	beq.n	1159e <__ssvfscanf_r+0x1ea>
   114a8:	ldr	r6, [pc, #360]	; (11614 <__ssvfscanf_r+0x260>)
   114aa:	ldrb	r2, [r6, r3]
   114ac:	lsls	r0, r2, #28
   114ae:	bmi.w	11eea <__ssvfscanf_r+0xb36>
   114b2:	cmp	r3, #37	; 0x25
   114b4:	bne.w	115c4 <__ssvfscanf_r+0x210>
   114b8:	movs	r5, #1
   114ba:	mov	r6, r5
   114bc:	ldr	r0, [r7, #76]	; 0x4c
   114be:	movs	r4, #0
   114c0:	ldrb	r2, [r0, #0]
   114c2:	mov	r8, r4
   114c4:	sub.w	r3, r2, #37	; 0x25
   114c8:	adds	r1, r0, #1
   114ca:	cmp	r3, #85	; 0x55
   114cc:	bhi.n	1159e <__ssvfscanf_r+0x1ea>
   114ce:	tbh	[pc, r3, lsl #1]
   114d2:	.short	0x070a
   114d4:	.word	0x00660066
   114d8:	.word	0x00660066
   114dc:	.word	0x00660701
   114e0:	.word	0x00660066
   114e4:	.word	0x00660066
   114e8:	.word	0x060c060c
   114ec:	.word	0x060c060c
   114f0:	.word	0x060c060c
   114f4:	.word	0x060c060c
   114f8:	.word	0x060c060c
   114fc:	.word	0x00660066
   11500:	.word	0x00660066
   11504:	.word	0x00660066
   11508:	.word	0x06180066
   1150c:	.word	0x048e0066
   11510:	.word	0x061804c9
   11514:	.word	0x06180618
   11518:	.word	0x00660066
   1151c:	.word	0x00660066
   11520:	.word	0x00660082
   11524:	.word	0x04bf0066
   11528:	.word	0x00660066
   1152c:	.word	0x00890066
   11530:	.word	0x00660066
   11534:	.word	0x00660066
   11538:	.word	0x0066066b
   1153c:	.word	0x06dd0066
   11540:	.word	0x00660066
   11544:	.word	0x00660066
   11548:	.word	0x06180066
   1154c:	.word	0x04900066
   11550:	.word	0x061804cb
   11554:	.word	0x06180618
   11558:	.word	0x06d206be
   1155c:	.word	0x00660082
   11560:	.word	0x06f306e7
   11564:	.word	0x04c106ac
   11568:	.word	0x006606da
   1156c:	.word	0x008b0066
   11570:	.word	0x06ca007d
   11574:	.word	0x00660066
   11578:	.word	0x0066066b
   1157c:	.short	0x007d
   1157e:	mov	r1, fp
   11580:	mov	r0, r9
   11582:	bl	14708 <__ssrefill_r>
   11586:	cmp	r0, #0
   11588:	beq.w	1144e <__ssvfscanf_r+0x9a>
   1158c:	ldr	r3, [r7, #68]	; 0x44
   1158e:	cmp	r3, #0
   11590:	beq.w	12638 <__ssvfscanf_r+0x1284>
   11594:	ldrh.w	r3, [fp, #12]
   11598:	lsls	r2, r3, #25
   1159a:	bmi.w	12638 <__ssvfscanf_r+0x1284>
   1159e:	ldr	r3, [r7, #64]	; 0x40
   115a0:	cbz	r3, 115b4 <__ssvfscanf_r+0x200>
   115a2:	ldr	r3, [r7, #64]	; 0x40
   115a4:	ldr.w	r8, [r3]
   115a8:	cmp.w	r8, #0
   115ac:	beq.n	115b4 <__ssvfscanf_r+0x200>
   115ae:	mov	r0, r8
   115b0:	bl	bab0 <free>
   115b4:	ldr	r0, [r7, #68]	; 0x44
   115b6:	add.w	r7, r7, #724	; 0x2d4
   115ba:	mov	sp, r7
   115bc:	vpop	{d8}
   115c0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115c4:	ldr	r3, [r7, #76]	; 0x4c
   115c6:	movs	r5, #1
   115c8:	subs	r6, r3, #1
   115ca:	b.n	11442 <__ssvfscanf_r+0x8e>
   115cc:	lsls	r3, r4, #28
   115ce:	bne.n	1159e <__ssvfscanf_r+0x1ea>
   115d0:	ldrb	r2, [r0, #1]
   115d2:	mov	r0, r1
   115d4:	b.n	114c4 <__ssvfscanf_r+0x110>
   115d6:	lsls	r2, r4, #28
   115d8:	bne.n	1159e <__ssvfscanf_r+0x1ea>
   115da:	ldrb	r2, [r0, #1]
   115dc:	orr.w	r4, r4, #2
   115e0:	mov	r0, r1
   115e2:	b.n	114c4 <__ssvfscanf_r+0x110>
   115e4:	orr.w	r4, r4, #1
   115e8:	str	r1, [r7, #76]	; 0x4c
   115ea:	movs	r5, #2
   115ec:	ldr.w	r3, [fp, #4]
   115f0:	cmp	r3, #0
   115f2:	ble.w	11e06 <__ssvfscanf_r+0xa52>
   115f6:	lsls	r0, r4, #25
   115f8:	bpl.w	11e1a <__ssvfscanf_r+0xa66>
   115fc:	subs	r3, r5, #1
   115fe:	cmp	r3, #3
   11600:	bhi.w	127da <__ssvfscanf_r+0x1426>
   11604:	tbh	[pc, r3, lsl #1]
   11608:	.word	0x01f1027b
   1160c:	.word	0x0008014b
   11610:	.word	0x20008964
   11614:	.word	0x20000801
   11618:	mov	r0, r9
   1161a:	bl	12f3c <_localeconv_r>
   1161e:	ldr	r3, [r0, #0]
   11620:	str	r3, [r7, #32]
   11622:	add.w	r3, r8, #4294967295
   11626:	cmp.w	r3, #348	; 0x15c
   1162a:	bls.w	120e2 <__ssvfscanf_r+0xd2e>
   1162e:	mvn.w	r5, #348	; 0x15c
   11632:	add.w	r3, r8, r5
   11636:	str	r3, [r7, #16]
   11638:	movw	r8, #349	; 0x15d
   1163c:	movs	r6, #0
   1163e:	add.w	r3, r7, #368	; 0x170
   11642:	vmov	s16, r9
   11646:	strd	r6, r6, [r7, #20]
   1164a:	str	r6, [r7, #60]	; 0x3c
   1164c:	str	r6, [r7, #52]	; 0x34
   1164e:	str	r6, [r7, #28]
   11650:	str	r6, [r7, #72]	; 0x48
   11652:	orr.w	r4, r4, #1920	; 0x780
   11656:	str	r3, [r7, #40]	; 0x28
   11658:	mov	r5, r3
   1165a:	mov	r6, r8
   1165c:	ldr.w	r1, [fp]
   11660:	ldrb	r2, [r1, #0]
   11662:	sub.w	r3, r2, #43	; 0x2b
   11666:	cmp	r3, #78	; 0x4e
   11668:	bhi.n	1170c <__ssvfscanf_r+0x358>
   1166a:	tbh	[pc, r3, lsl #1]
   1166e:	.short	0x037e
   11670:	.word	0x037e004f
   11674:	.word	0x004f004f
   11678:	.word	0x00a600a3
   1167c:	.word	0x00a600a6
   11680:	.word	0x00a600a6
   11684:	.word	0x00a600a6
   11688:	.word	0x00a600a6
   1168c:	.word	0x004f004f
   11690:	.word	0x004f004f
   11694:	.word	0x004f004f
   11698:	.word	0x0374004f
   1169c:	.word	0x030b030b
   116a0:	.word	0x039e030b
   116a4:	.word	0x004f0394
   116a8:	.word	0x0384004f
   116ac:	.word	0x004f004f
   116b0:	.word	0x004f004f
   116b4:	.word	0x004f035d
   116b8:	.word	0x004f033a
   116bc:	.word	0x004f004f
   116c0:	.word	0x004f0333
   116c4:	.word	0x004f004f
   116c8:	.word	0x036d031e
   116cc:	.word	0x004f004f
   116d0:	.word	0x004f004f
   116d4:	.word	0x004f004f
   116d8:	.word	0x0374004f
   116dc:	.word	0x030b030b
   116e0:	.word	0x039e030b
   116e4:	.word	0x004f0394
   116e8:	.word	0x0384004f
   116ec:	.word	0x004f004f
   116f0:	.word	0x004f004f
   116f4:	.word	0x004f035d
   116f8:	.word	0x004f033a
   116fc:	.word	0x004f004f
   11700:	.word	0x004f0333
   11704:	.word	0x004f004f
   11708:	.word	0x036d031e
   1170c:	lsls	r0, r4, #22
   1170e:	bpl.n	117f0 <__ssvfscanf_r+0x43c>
   11710:	ldr	r0, [r7, #32]
   11712:	ldrb	r3, [r0, #0]
   11714:	cmp	r3, r2
   11716:	bne.n	117f0 <__ssvfscanf_r+0x43c>
   11718:	strd	r4, r5, [r7, #8]
   1171c:	str	r6, [r7, #4]
   1171e:	mov	r9, r0
   11720:	vmov	r6, s16
   11724:	mov.w	r8, #0
   11728:	mov	r4, fp
   1172a:	b.n	1173c <__ssvfscanf_r+0x388>
   1172c:	str	r1, [r4, #0]
   1172e:	ldrb.w	lr, [r1]
   11732:	ldrb.w	r0, [r9]
   11736:	cmp	lr, r0
   11738:	bne.n	11774 <__ssvfscanf_r+0x3c0>
   1173a:	mov	sl, fp
   1173c:	ldrb.w	r0, [r9, #1]!
   11740:	mov	r5, r8
   11742:	add.w	fp, sl, #1
   11746:	adds	r1, #1
   11748:	add.w	r8, r8, #1
   1174c:	cmp	r0, #0
   1174e:	beq.w	1241a <__ssvfscanf_r+0x1066>
   11752:	ldr	r0, [r4, #4]
   11754:	subs	r0, #1
   11756:	cmp	r0, #0
   11758:	str	r0, [r4, #4]
   1175a:	bgt.n	1172c <__ssvfscanf_r+0x378>
   1175c:	mov	r1, r4
   1175e:	mov	r0, r6
   11760:	bl	14708 <__ssrefill_r>
   11764:	cbnz	r0, 11774 <__ssvfscanf_r+0x3c0>
   11766:	ldr	r1, [r4, #0]
   11768:	ldrb.w	r0, [r9]
   1176c:	ldrb.w	lr, [r1]
   11770:	cmp	lr, r0
   11772:	beq.n	1173a <__ssvfscanf_r+0x386>
   11774:	mov	fp, r4
   11776:	ldr	r2, [r7, #32]
   11778:	ldr	r4, [r7, #8]
   1177a:	str	r5, [r7, #16]
   1177c:	mov	r3, r5
   1177e:	mov	r9, r6
   11780:	ldr	r6, [r7, #72]	; 0x48
   11782:	ldr	r5, [r7, #12]
   11784:	str	r5, [r7, #72]	; 0x48
   11786:	adds	r3, #1
   11788:	mov	r5, fp
   1178a:	add.w	r8, r2, r3
   1178e:	mov	fp, r6
   11790:	mov	r6, r4
   11792:	mov	r4, r2
   11794:	ldrb.w	r1, [r8, #-1]!
   11798:	mov	r2, r5
   1179a:	mov	r0, r9
   1179c:	bl	14688 <_sungetc_r>
   117a0:	cmp	r4, r8
   117a2:	bne.n	11794 <__ssvfscanf_r+0x3e0>
   117a4:	ldr	r3, [r7, #16]
   117a6:	mov	r4, r6
   117a8:	sub.w	sl, sl, r3
   117ac:	mov	r6, fp
   117ae:	mov	fp, r5
   117b0:	ldr	r5, [r7, #72]	; 0x48
   117b2:	b.n	117f6 <__ssvfscanf_r+0x442>
   117b4:	lsls	r0, r4, #23
   117b6:	bmi.w	121bc <__ssvfscanf_r+0xe08>
   117ba:	ldr	r3, [r7, #72]	; 0x48
   117bc:	ldr	r1, [r7, #60]	; 0x3c
   117be:	cmn	r1, r3
   117c0:	bne.n	117f0 <__ssvfscanf_r+0x43c>
   117c2:	bic.w	r4, r4, #384	; 0x180
   117c6:	strb.w	r2, [r5], #1
   117ca:	subs	r6, #1
   117cc:	ldr.w	r3, [fp, #4]
   117d0:	subs	r3, #1
   117d2:	cmp	r3, #0
   117d4:	add.w	sl, sl, #1
   117d8:	str.w	r3, [fp, #4]
   117dc:	ble.w	11ebe <__ssvfscanf_r+0xb0a>
   117e0:	ldr.w	r3, [fp]
   117e4:	adds	r3, #1
   117e6:	str.w	r3, [fp]
   117ea:	cmp	r6, #0
   117ec:	bne.w	1165c <__ssvfscanf_r+0x2a8>
   117f0:	ldr	r6, [r7, #72]	; 0x48
   117f2:	vmov	r9, s16
   117f6:	ldr	r3, [r7, #52]	; 0x34
   117f8:	cmp	r3, #0
   117fa:	bne.w	11db6 <__ssvfscanf_r+0xa02>
   117fe:	ldr	r3, [r7, #60]	; 0x3c
   11800:	subs	r3, #1
   11802:	cmp	r3, #1
   11804:	bls.w	12834 <__ssvfscanf_r+0x1480>
   11808:	subs	r3, r6, #1
   1180a:	cmp	r3, #6
   1180c:	bls.w	1245e <__ssvfscanf_r+0x10aa>
   11810:	lsls	r3, r4, #23
   11812:	bpl.n	1184c <__ssvfscanf_r+0x498>
   11814:	lsls	r6, r4, #21
   11816:	bmi.w	12984 <__ssvfscanf_r+0x15d0>
   1181a:	ldrb.w	r1, [r5, #-1]
   1181e:	cmp	r1, #101	; 0x65
   11820:	add.w	r3, r5, #4294967295
   11824:	add.w	r6, sl, #4294967295
   11828:	beq.n	11840 <__ssvfscanf_r+0x48c>
   1182a:	cmp	r1, #69	; 0x45
   1182c:	beq.n	11840 <__ssvfscanf_r+0x48c>
   1182e:	mov	r2, fp
   11830:	mov	r0, r9
   11832:	bl	14688 <_sungetc_r>
   11836:	ldrb.w	r1, [r5, #-2]
   1183a:	sub.w	r6, sl, #2
   1183e:	subs	r3, r5, #2
   11840:	mov	r2, fp
   11842:	mov	r0, r9
   11844:	mov	sl, r6
   11846:	mov	r5, r3
   11848:	bl	14688 <_sungetc_r>
   1184c:	ands.w	r2, r4, #16
   11850:	bne.w	11402 <__ssvfscanf_r+0x4e>
   11854:	and.w	r3, r4, #1536	; 0x600
   11858:	cmp.w	r3, #1024	; 0x400
   1185c:	strb	r2, [r5, #0]
   1185e:	beq.w	12206 <__ssvfscanf_r+0xe52>
   11862:	ldr	r3, [r7, #24]
   11864:	cmp	r3, #0
   11866:	bne.w	126c2 <__ssvfscanf_r+0x130e>
   1186a:	mov	r0, r9
   1186c:	ldr	r1, [r7, #40]	; 0x28
   1186e:	movs	r2, #0
   11870:	bl	d298 <_strtod_r>
   11874:	lsls	r0, r4, #31
   11876:	ldr	r3, [r7, #48]	; 0x30
   11878:	bmi.w	1240e <__ssvfscanf_r+0x105a>
   1187c:	lsls	r1, r4, #30
   1187e:	bmi.w	1240e <__ssvfscanf_r+0x105a>
   11882:	vcmp.f64	d0, d0
   11886:	vmrs	APSR_nzcv, fpscr
   1188a:	ldr.w	r4, [r3], #4
   1188e:	bvs.w	1267a <__ssvfscanf_r+0x12c6>
   11892:	vcvt.f32.f64	s0, d0
   11896:	str	r3, [r7, #48]	; 0x30
   11898:	vstr	s0, [r4]
   1189c:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   1189e:	add.w	r3, r8, #4294967295
   118a2:	cmp.w	r3, #348	; 0x15c
   118a6:	bls.w	11fee <__ssvfscanf_r+0xc3a>
   118aa:	mvn.w	r2, #348	; 0x15c
   118ae:	add.w	r3, r8, r2
   118b2:	str	r3, [r7, #60]	; 0x3c
   118b4:	movw	r8, #349	; 0x15d
   118b8:	add.w	r3, r7, #368	; 0x170
   118bc:	movs	r2, #0
   118be:	ldr	r6, [r7, #56]	; 0x38
   118c0:	str	r3, [r7, #40]	; 0x28
   118c2:	mov	r1, fp
   118c4:	orr.w	r4, r4, #3456	; 0xd80
   118c8:	mov	fp, sl
   118ca:	mov	r5, r3
   118cc:	mov	sl, r2
   118ce:	ldr	r2, [r1, #0]
   118d0:	ldrb	r0, [r2, #0]
   118d2:	sub.w	r3, r0, #43	; 0x2b
   118d6:	cmp	r3, #77	; 0x4d
   118d8:	bhi.n	1199c <__ssvfscanf_r+0x5e8>
   118da:	tbh	[pc, r3, lsl #1]
   118de:	.short	0x0282
   118e0:	.word	0x0282005f
   118e4:	.word	0x005f005f
   118e8:	.word	0x01e002cd
   118ec:	.word	0x01e001e0
   118f0:	.word	0x01e001e0
   118f4:	.word	0x01e001e0
   118f8:	.word	0x026f026f
   118fc:	.word	0x005f005f
   11900:	.word	0x005f005f
   11904:	.word	0x005f005f
   11908:	.word	0x004e005f
   1190c:	.word	0x004e004e
   11910:	.word	0x004e004e
   11914:	.word	0x005f004e
   11918:	.word	0x005f005f
   1191c:	.word	0x005f005f
   11920:	.word	0x005f005f
   11924:	.word	0x005f005f
   11928:	.word	0x005f005f
   1192c:	.word	0x005f005f
   11930:	.word	0x005f005f
   11934:	.word	0x005f005f
   11938:	.word	0x005f0276
   1193c:	.word	0x005f005f
   11940:	.word	0x005f005f
   11944:	.word	0x005f005f
   11948:	.word	0x004e005f
   1194c:	.word	0x004e004e
   11950:	.word	0x004e004e
   11954:	.word	0x005f004e
   11958:	.word	0x005f005f
   1195c:	.word	0x005f005f
   11960:	.word	0x005f005f
   11964:	.word	0x005f005f
   11968:	.word	0x005f005f
   1196c:	.word	0x005f005f
   11970:	.word	0x005f005f
   11974:	.word	0x005f005f
   11978:	.short	0x0276
   1197a:	cmp	r6, #10
   1197c:	ble.n	1199c <__ssvfscanf_r+0x5e8>
   1197e:	bic.w	r4, r4, #2944	; 0xb80
   11982:	ldr	r3, [r1, #4]
   11984:	strb.w	r0, [r5], #1
   11988:	subs	r3, #1
   1198a:	cmp	r3, #0
   1198c:	str	r3, [r1, #4]
   1198e:	ble.w	11eac <__ssvfscanf_r+0xaf8>
   11992:	adds	r2, #1
   11994:	str	r2, [r1, #0]
   11996:	subs.w	r8, r8, #1
   1199a:	bne.n	118ce <__ssvfscanf_r+0x51a>
   1199c:	lsls	r0, r4, #23
   1199e:	mov	r8, sl
   119a0:	str	r6, [r7, #56]	; 0x38
   119a2:	mov	sl, fp
   119a4:	mov	fp, r1
   119a6:	bpl.n	119b8 <__ssvfscanf_r+0x604>
   119a8:	ldr	r3, [r7, #40]	; 0x28
   119aa:	cmp	r5, r3
   119ac:	bhi.w	121f4 <__ssvfscanf_r+0xe40>
   119b0:	ldr	r3, [r7, #40]	; 0x28
   119b2:	cmp	r5, r3
   119b4:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   119b8:	ands.w	r2, r4, #16
   119bc:	bne.n	119e0 <__ssvfscanf_r+0x62c>
   119be:	ldr	r1, [r7, #40]	; 0x28
   119c0:	ldr	r3, [r7, #56]	; 0x38
   119c2:	ldr	r6, [r7, #44]	; 0x2c
   119c4:	strb	r2, [r5, #0]
   119c6:	mov	r0, r9
   119c8:	blx	r6
   119ca:	lsls	r1, r4, #26
   119cc:	bpl.w	121e0 <__ssvfscanf_r+0xe2c>
   119d0:	ldr	r3, [r7, #48]	; 0x30
   119d2:	ldr.w	r2, [r3], #4
   119d6:	str	r0, [r2, #0]
   119d8:	str	r3, [r7, #48]	; 0x30
   119da:	ldr	r3, [r7, #68]	; 0x44
   119dc:	adds	r3, #1
   119de:	str	r3, [r7, #68]	; 0x44
   119e0:	ldr	r3, [r7, #40]	; 0x28
   119e2:	subs	r5, r5, r3
   119e4:	add	r5, r8
   119e6:	add	sl, r5
   119e8:	b.n	11402 <__ssvfscanf_r+0x4e>
   119ea:	cmp.w	r8, #0
   119ee:	it	eq
   119f0:	moveq.w	r8, #4294967295
   119f4:	lsls	r0, r4, #31
   119f6:	bpl.w	11f24 <__ssvfscanf_r+0xb70>
   119fa:	ands.w	r3, r4, #16
   119fe:	str	r3, [r7, #52]	; 0x34
   11a00:	bne.w	122ec <__ssvfscanf_r+0xf38>
   11a04:	lsls	r1, r4, #24
   11a06:	bpl.w	126d6 <__ssvfscanf_r+0x1322>
   11a0a:	ldr	r4, [r7, #48]	; 0x30
   11a0c:	ldr.w	r3, [r4], #4
   11a10:	str	r3, [r7, #60]	; 0x3c
   11a12:	cmp	r3, #0
   11a14:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   11a18:	movs	r0, #128	; 0x80
   11a1a:	bl	baa0 <malloc>
   11a1e:	str	r0, [r7, #72]	; 0x48
   11a20:	cmp	r0, #0
   11a22:	beq.w	12916 <__ssvfscanf_r+0x1562>
   11a26:	ldr	r3, [r7, #60]	; 0x3c
   11a28:	ldr	r2, [r7, #72]	; 0x48
   11a2a:	str	r2, [r3, #0]
   11a2c:	ldr	r2, [r7, #64]	; 0x40
   11a2e:	ldrh	r5, [r2, #6]
   11a30:	ldrh	r3, [r2, #4]
   11a32:	cmp	r5, r3
   11a34:	bcs.w	124dc <__ssvfscanf_r+0x1128>
   11a38:	ldr	r0, [r2, #0]
   11a3a:	ldr	r3, [r7, #60]	; 0x3c
   11a3c:	str.w	r3, [r0, r5, lsl #2]
   11a40:	ldr	r3, [r7, #64]	; 0x40
   11a42:	str	r4, [r7, #48]	; 0x30
   11a44:	adds	r5, #1
   11a46:	strh	r5, [r3, #6]
   11a48:	ldr	r3, [r7, #72]	; 0x48
   11a4a:	str	r3, [r7, #40]	; 0x28
   11a4c:	movs	r3, #32
   11a4e:	str	r3, [r7, #32]
   11a50:	ldr.w	r3, [fp]
   11a54:	ldr	r6, [pc, #708]	; (11d1c <__ssvfscanf_r+0x968>)
   11a56:	ldrb	r3, [r3, #0]
   11a58:	ldrb	r3, [r6, r3]
   11a5a:	ands.w	r3, r3, #8
   11a5e:	bne.w	123d8 <__ssvfscanf_r+0x1024>
   11a62:	ldr	r4, [r7, #36]	; 0x24
   11a64:	str	r6, [r7, #36]	; 0x24
   11a66:	mov	r5, r3
   11a68:	bl	db3c <__locale_mb_cur_max>
   11a6c:	cmp	r0, r5
   11a6e:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   11a72:	ldrd	r3, r2, [fp]
   11a76:	add.w	r0, r7, #368	; 0x170
   11a7a:	ldrb.w	r1, [r3], #1
   11a7e:	strb	r1, [r0, r5]
   11a80:	subs	r2, #1
   11a82:	cmp	r4, #3
   11a84:	strd	r3, r2, [fp]
   11a88:	add.w	r5, r5, #1
   11a8c:	add.w	r6, r7, #104	; 0x68
   11a90:	bne.n	11a98 <__ssvfscanf_r+0x6e4>
   11a92:	ldr	r3, [r6, #0]
   11a94:	cmp	r3, #4
   11a96:	beq.n	11aa2 <__ssvfscanf_r+0x6ee>
   11a98:	movs	r2, #8
   11a9a:	movs	r1, #0
   11a9c:	mov	r0, r6
   11a9e:	bl	942c <memset>
   11aa2:	add.w	r2, r7, #368	; 0x170
   11aa6:	ldr	r1, [r7, #72]	; 0x48
   11aa8:	str	r6, [sp, #0]
   11aaa:	mov	r3, r5
   11aac:	mov	r0, r9
   11aae:	bl	142e0 <_mbrtowc_r>
   11ab2:	adds	r2, r0, #1
   11ab4:	mov	r4, r0
   11ab6:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   11aba:	cmp	r0, #0
   11abc:	bne.w	123b0 <__ssvfscanf_r+0xffc>
   11ac0:	ldr	r3, [r7, #72]	; 0x48
   11ac2:	str	r0, [r3, #0]
   11ac4:	bl	14398 <iswspace>
   11ac8:	cmp	r0, #0
   11aca:	bne.w	12786 <__ssvfscanf_r+0x13d2>
   11ace:	add	sl, r5
   11ad0:	add.w	r8, r8, #4294967295
   11ad4:	ldr	r3, [r7, #52]	; 0x34
   11ad6:	cmp	r3, #0
   11ad8:	bne.w	12742 <__ssvfscanf_r+0x138e>
   11adc:	ldr	r3, [r7, #72]	; 0x48
   11ade:	ldr	r2, [r7, #60]	; 0x3c
   11ae0:	adds	r3, #4
   11ae2:	str	r3, [r7, #72]	; 0x48
   11ae4:	cmp	r2, #0
   11ae6:	beq.w	12742 <__ssvfscanf_r+0x138e>
   11aea:	ldr	r2, [r7, #40]	; 0x28
   11aec:	subs	r5, r3, r2
   11aee:	ldr	r3, [r7, #32]
   11af0:	cmp.w	r3, r5, asr #2
   11af4:	bls.w	129a4 <__ssvfscanf_r+0x15f0>
   11af8:	ldr	r5, [r7, #52]	; 0x34
   11afa:	b.w	123b6 <__ssvfscanf_r+0x1002>
   11afe:	cmp.w	r8, #0
   11b02:	it	eq
   11b04:	moveq.w	r8, #4294967295
   11b08:	lsls	r0, r4, #31
   11b0a:	bpl.w	12004 <__ssvfscanf_r+0xc50>
   11b0e:	ands.w	r3, r4, #16
   11b12:	str	r3, [r7, #40]	; 0x28
   11b14:	bne.w	122fe <__ssvfscanf_r+0xf4a>
   11b18:	lsls	r1, r4, #24
   11b1a:	bpl.w	126f8 <__ssvfscanf_r+0x1344>
   11b1e:	ldr	r6, [r7, #48]	; 0x30
   11b20:	ldr.w	r3, [r6], #4
   11b24:	str	r3, [r7, #32]
   11b26:	cmp	r3, #0
   11b28:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   11b2c:	movs	r0, #128	; 0x80
   11b2e:	bl	baa0 <malloc>
   11b32:	mov	r4, r0
   11b34:	cmp	r0, #0
   11b36:	beq.w	12916 <__ssvfscanf_r+0x1562>
   11b3a:	ldr	r3, [r7, #32]
   11b3c:	ldr	r2, [r7, #64]	; 0x40
   11b3e:	str	r0, [r3, #0]
   11b40:	ldrh	r5, [r2, #6]
   11b42:	ldrh	r3, [r2, #4]
   11b44:	cmp	r5, r3
   11b46:	bcs.w	12504 <__ssvfscanf_r+0x1150>
   11b4a:	ldr	r0, [r2, #0]
   11b4c:	ldr	r3, [r7, #32]
   11b4e:	str.w	r3, [r0, r5, lsl #2]
   11b52:	ldr	r3, [r7, #64]	; 0x40
   11b54:	str	r6, [r7, #48]	; 0x30
   11b56:	adds	r5, #1
   11b58:	strh	r5, [r3, #6]
   11b5a:	movs	r3, #32
   11b5c:	str	r4, [r7, #28]
   11b5e:	str	r3, [r7, #24]
   11b60:	ldr	r6, [r7, #36]	; 0x24
   11b62:	str.w	sl, [r7, #60]	; 0x3c
   11b66:	movs	r5, #0
   11b68:	mov	sl, r8
   11b6a:	mov	r8, r4
   11b6c:	bl	db3c <__locale_mb_cur_max>
   11b70:	cmp	r0, r5
   11b72:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   11b76:	ldrd	r3, r2, [fp]
   11b7a:	ldrb.w	r1, [r3], #1
   11b7e:	subs	r2, #1
   11b80:	add.w	r0, r7, #368	; 0x170
   11b84:	strd	r3, r2, [fp]
   11b88:	cmp	r6, #3
   11b8a:	add.w	r3, r5, #1
   11b8e:	strb	r1, [r0, r5]
   11b90:	str	r3, [r7, #72]	; 0x48
   11b92:	add.w	r4, r7, #96	; 0x60
   11b96:	bne.n	11b9e <__ssvfscanf_r+0x7ea>
   11b98:	ldr	r3, [r4, #0]
   11b9a:	cmp	r3, #4
   11b9c:	beq.n	11ba8 <__ssvfscanf_r+0x7f4>
   11b9e:	movs	r2, #8
   11ba0:	movs	r1, #0
   11ba2:	mov	r0, r4
   11ba4:	bl	942c <memset>
   11ba8:	add.w	r2, r7, #368	; 0x170
   11bac:	ldr	r3, [r7, #72]	; 0x48
   11bae:	str	r4, [sp, #0]
   11bb0:	mov	r1, r8
   11bb2:	mov	r0, r9
   11bb4:	bl	142e0 <_mbrtowc_r>
   11bb8:	adds	r2, r0, #1
   11bba:	mov	r6, r0
   11bbc:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   11bc0:	cmp	r0, #0
   11bc2:	bne.w	1215a <__ssvfscanf_r+0xda6>
   11bc6:	str.w	r0, [r8]
   11bca:	mov	r5, r0
   11bcc:	add.w	r3, r7, #104	; 0x68
   11bd0:	movs	r2, #8
   11bd2:	movs	r1, #0
   11bd4:	mov	r0, r3
   11bd6:	str	r3, [r7, #52]	; 0x34
   11bd8:	bl	942c <memset>
   11bdc:	ldr	r1, [pc, #320]	; (11d20 <__ssvfscanf_r+0x96c>)
   11bde:	ldr	r3, [r7, #52]	; 0x34
   11be0:	ldr.w	r1, [r1, #224]	; 0xe0
   11be4:	mov	r2, r5
   11be6:	mov	r0, r9
   11be8:	mov	r5, r1
   11bea:	add.w	r1, r7, #80	; 0x50
   11bee:	blx	r5
   11bf0:	cmp	r0, #1
   11bf2:	beq.w	123a0 <__ssvfscanf_r+0xfec>
   11bf6:	movs	r2, #0
   11bf8:	add.w	r3, r7, #112	; 0x70
   11bfc:	ldrb	r3, [r3, r2]
   11bfe:	cmp	r3, #0
   11c00:	beq.w	12746 <__ssvfscanf_r+0x1392>
   11c04:	ldr	r3, [r7, #60]	; 0x3c
   11c06:	ldr	r2, [r7, #72]	; 0x48
   11c08:	cmp	r6, #3
   11c0a:	add	r3, r2
   11c0c:	str	r3, [r7, #60]	; 0x3c
   11c0e:	beq.w	123a6 <__ssvfscanf_r+0xff2>
   11c12:	add.w	sl, sl, #4294967295
   11c16:	ldr	r3, [r7, #40]	; 0x28
   11c18:	cbnz	r3, 11c32 <__ssvfscanf_r+0x87e>
   11c1a:	ldr	r3, [r7, #32]
   11c1c:	add.w	r8, r8, #4
   11c20:	cbz	r3, 11c32 <__ssvfscanf_r+0x87e>
   11c22:	ldr	r3, [r7, #28]
   11c24:	sub.w	r4, r8, r3
   11c28:	ldr	r3, [r7, #24]
   11c2a:	cmp.w	r3, r4, asr #2
   11c2e:	bls.w	1243c <__ssvfscanf_r+0x1088>
   11c32:	ldr.w	r3, [fp, #4]
   11c36:	cmp	r3, #0
   11c38:	mov.w	r5, #0
   11c3c:	ble.w	1216c <__ssvfscanf_r+0xdb8>
   11c40:	cmp.w	sl, #0
   11c44:	bne.n	11b6c <__ssvfscanf_r+0x7b8>
   11c46:	ldr.w	sl, [r7, #60]	; 0x3c
   11c4a:	str	r6, [r7, #36]	; 0x24
   11c4c:	mov	r4, r8
   11c4e:	ldr	r3, [r7, #40]	; 0x28
   11c50:	cmp	r3, #0
   11c52:	bne.w	11402 <__ssvfscanf_r+0x4e>
   11c56:	str	r3, [r4, #0]
   11c58:	ldr	r3, [r7, #32]
   11c5a:	cmp	r3, #0
   11c5c:	beq.w	11fe4 <__ssvfscanf_r+0xc30>
   11c60:	ldr	r3, [r7, #28]
   11c62:	ldr	r2, [r7, #24]
   11c64:	subs	r1, r4, r3
   11c66:	asrs	r3, r1, #2
   11c68:	adds	r3, #1
   11c6a:	cmp	r2, r3
   11c6c:	bls.w	11fe4 <__ssvfscanf_r+0xc30>
   11c70:	ldr	r4, [r7, #32]
   11c72:	adds	r1, #4
   11c74:	ldr	r0, [r4, #0]
   11c76:	bl	c038 <realloc>
   11c7a:	cmp	r0, #0
   11c7c:	beq.w	11fe4 <__ssvfscanf_r+0xc30>
   11c80:	str	r0, [r4, #0]
   11c82:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   11c84:	lsls	r1, r4, #20
   11c86:	bpl.w	117f0 <__ssvfscanf_r+0x43c>
   11c8a:	ldr	r3, [r7, #60]	; 0x3c
   11c8c:	ldr	r1, [r7, #72]	; 0x48
   11c8e:	adds	r3, r3, r1
   11c90:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   11c94:	str	r3, [r7, #72]	; 0x48
   11c96:	bic.w	r4, r4, #384	; 0x180
   11c9a:	str	r3, [r7, #60]	; 0x3c
   11c9c:	b.n	117c6 <__ssvfscanf_r+0x412>
   11c9e:	ldr	r3, [pc, #132]	; (11d24 <__ssvfscanf_r+0x970>)
   11ca0:	bic.w	r4, r4, #2944	; 0xb80
   11ca4:	ldrsh.w	r6, [r3, r6, lsl #1]
   11ca8:	b.n	11982 <__ssvfscanf_r+0x5ce>
   11caa:	and.w	r3, r4, #2432	; 0x980
   11cae:	cmp.w	r3, #256	; 0x100
   11cb2:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   11cb6:	ldr	r3, [r7, #52]	; 0x34
   11cb8:	cmp	r3, #1
   11cba:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   11cbe:	movs	r3, #48	; 0x30
   11cc0:	strb.w	r3, [r5], #1
   11cc4:	bic.w	r4, r4, #256	; 0x100
   11cc8:	movs	r3, #0
   11cca:	orr.w	r4, r4, #2048	; 0x800
   11cce:	subs	r6, #1
   11cd0:	str	r3, [r7, #52]	; 0x34
   11cd2:	b.n	117c6 <__ssvfscanf_r+0x412>
   11cd4:	ldr	r3, [r7, #72]	; 0x48
   11cd6:	cmp	r3, #6
   11cd8:	bne.w	127c4 <__ssvfscanf_r+0x1410>
   11cdc:	movs	r3, #7
   11cde:	str	r3, [r7, #72]	; 0x48
   11ce0:	b.n	117c6 <__ssvfscanf_r+0x412>
   11ce2:	lsls	r3, r4, #20
   11ce4:	bpl.w	117f0 <__ssvfscanf_r+0x43c>
   11ce8:	and.w	r3, r4, #1280	; 0x500
   11cec:	cmp.w	r3, #1024	; 0x400
   11cf0:	beq.n	11cfe <__ssvfscanf_r+0x94a>
   11cf2:	lsls	r1, r4, #21
   11cf4:	bpl.w	117f0 <__ssvfscanf_r+0x43c>
   11cf8:	ldr	r3, [r7, #52]	; 0x34
   11cfa:	cmp	r3, #0
   11cfc:	beq.n	11d8e <__ssvfscanf_r+0x9da>
   11cfe:	lsls	r3, r4, #22
   11d00:	bmi.n	11d0c <__ssvfscanf_r+0x958>
   11d02:	ldr	r3, [r7, #52]	; 0x34
   11d04:	ldr	r1, [r7, #28]
   11d06:	subs	r3, r3, r1
   11d08:	strd	r5, r3, [r7, #20]
   11d0c:	bic.w	r4, r4, #3968	; 0xf80
   11d10:	movs	r3, #0
   11d12:	orr.w	r4, r4, #384	; 0x180
   11d16:	str	r3, [r7, #52]	; 0x34
   11d18:	b.n	117c6 <__ssvfscanf_r+0x412>
   11d1a:	nop
   11d1c:	.word	0x20000801
   11d20:	.word	0x20008964
   11d24:	.word	0x20002430
   11d28:	ldr	r3, [r7, #60]	; 0x3c
   11d2a:	cmp	r3, #0
   11d2c:	beq.w	1212e <__ssvfscanf_r+0xd7a>
   11d30:	ldr	r3, [r7, #60]	; 0x3c
   11d32:	cmp	r3, #2
   11d34:	beq.w	12498 <__ssvfscanf_r+0x10e4>
   11d38:	ldr	r3, [r7, #72]	; 0x48
   11d3a:	cmp	r3, #1
   11d3c:	beq.w	12122 <__ssvfscanf_r+0xd6e>
   11d40:	cmp	r3, #4
   11d42:	beq.w	12122 <__ssvfscanf_r+0xd6e>
   11d46:	b.n	117f0 <__ssvfscanf_r+0x43c>
   11d48:	ldr	r3, [r7, #72]	; 0x48
   11d4a:	cmp	r3, #7
   11d4c:	bne.w	127c4 <__ssvfscanf_r+0x1410>
   11d50:	movs	r3, #8
   11d52:	str	r3, [r7, #72]	; 0x48
   11d54:	b.n	117c6 <__ssvfscanf_r+0x412>
   11d56:	lsls	r0, r4, #20
   11d58:	bmi.w	1214e <__ssvfscanf_r+0xd9a>
   11d5c:	ldr	r3, [r7, #60]	; 0x3c
   11d5e:	cmp	r3, #1
   11d60:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   11d64:	movs	r3, #2
   11d66:	str	r3, [r7, #60]	; 0x3c
   11d68:	b.n	117c6 <__ssvfscanf_r+0x412>
   11d6a:	lsls	r3, r4, #24
   11d6c:	bpl.w	117f0 <__ssvfscanf_r+0x43c>
   11d70:	bic.w	r4, r4, #128	; 0x80
   11d74:	b.n	117c6 <__ssvfscanf_r+0x412>
   11d76:	ldr	r3, [r7, #72]	; 0x48
   11d78:	cmp	r3, #0
   11d7a:	bne.w	12116 <__ssvfscanf_r+0xd62>
   11d7e:	ldr	r3, [r7, #52]	; 0x34
   11d80:	cbnz	r3, 11db0 <__ssvfscanf_r+0x9fc>
   11d82:	and.w	r3, r4, #1792	; 0x700
   11d86:	cmp.w	r3, #1792	; 0x700
   11d8a:	beq.w	127ce <__ssvfscanf_r+0x141a>
   11d8e:	ldr	r6, [r7, #72]	; 0x48
   11d90:	vmov	r9, s16
   11d94:	b.n	117fe <__ssvfscanf_r+0x44a>
   11d96:	lsls	r1, r4, #20
   11d98:	bmi.w	1210a <__ssvfscanf_r+0xd56>
   11d9c:	ldr	r3, [r7, #72]	; 0x48
   11d9e:	cmp	r3, #2
   11da0:	bne.w	127c4 <__ssvfscanf_r+0x1410>
   11da4:	movs	r3, #3
   11da6:	str	r3, [r7, #72]	; 0x48
   11da8:	b.n	117c6 <__ssvfscanf_r+0x412>
   11daa:	lsls	r0, r4, #20
   11dac:	bpl.n	11ce8 <__ssvfscanf_r+0x934>
   11dae:	b.n	11c8a <__ssvfscanf_r+0x8d6>
   11db0:	ldr	r6, [r7, #72]	; 0x48
   11db2:	vmov	r9, s16
   11db6:	bic.w	r4, r4, #256	; 0x100
   11dba:	b.n	117fe <__ssvfscanf_r+0x44a>
   11dbc:	ldr	r3, [pc, #564]	; (11ff4 <__ssvfscanf_r+0xc40>)
   11dbe:	ldrsh.w	r6, [r3, r6, lsl #1]
   11dc2:	cmp	r6, #8
   11dc4:	bgt.w	1197e <__ssvfscanf_r+0x5ca>
   11dc8:	b.n	1199c <__ssvfscanf_r+0x5e8>
   11dca:	and.w	r3, r4, #1536	; 0x600
   11dce:	cmp.w	r3, #512	; 0x200
   11dd2:	bne.w	1199c <__ssvfscanf_r+0x5e8>
   11dd6:	bic.w	r4, r4, #512	; 0x200
   11dda:	orr.w	r4, r4, #1280	; 0x500
   11dde:	movs	r6, #16
   11de0:	b.n	11982 <__ssvfscanf_r+0x5ce>
   11de2:	lsls	r3, r4, #24
   11de4:	bpl.w	1199c <__ssvfscanf_r+0x5e8>
   11de8:	bic.w	r4, r4, #128	; 0x80
   11dec:	b.n	11982 <__ssvfscanf_r+0x5ce>
   11dee:	orr.w	r4, r4, #1
   11df2:	ldr.w	r3, [fp, #4]
   11df6:	str	r1, [r7, #76]	; 0x4c
   11df8:	cmp	r3, #0
   11dfa:	orr.w	r4, r4, #64	; 0x40
   11dfe:	mov.w	r5, #0
   11e02:	bgt.w	115f6 <__ssvfscanf_r+0x242>
   11e06:	mov	r1, fp
   11e08:	mov	r0, r9
   11e0a:	bl	14708 <__ssrefill_r>
   11e0e:	cmp	r0, #0
   11e10:	bne.w	1158c <__ssvfscanf_r+0x1d8>
   11e14:	lsls	r0, r4, #25
   11e16:	bmi.w	115fc <__ssvfscanf_r+0x248>
   11e1a:	ldr.w	r2, [fp]
   11e1e:	ldr	r6, [pc, #472]	; (11ff8 <__ssvfscanf_r+0xc44>)
   11e20:	ldrb	r3, [r2, #0]
   11e22:	ldrb	r3, [r6, r3]
   11e24:	lsls	r1, r3, #28
   11e26:	bpl.w	115fc <__ssvfscanf_r+0x248>
   11e2a:	ldr.w	r3, [fp, #4]
   11e2e:	subs	r3, #1
   11e30:	cmp	r3, #0
   11e32:	add.w	sl, sl, #1
   11e36:	str.w	r3, [fp, #4]
   11e3a:	add.w	r2, r2, #1
   11e3e:	ble.n	11ed6 <__ssvfscanf_r+0xb22>
   11e40:	str.w	r2, [fp]
   11e44:	ldrb	r3, [r2, #0]
   11e46:	ldrb	r3, [r6, r3]
   11e48:	lsls	r1, r3, #28
   11e4a:	bpl.w	115fc <__ssvfscanf_r+0x248>
   11e4e:	b.n	11e2a <__ssvfscanf_r+0xa76>
   11e50:	orr.w	r4, r4, #1
   11e54:	ldr	r3, [pc, #420]	; (11ffc <__ssvfscanf_r+0xc48>)
   11e56:	str	r3, [r7, #44]	; 0x2c
   11e58:	movs	r3, #8
   11e5a:	str	r1, [r7, #76]	; 0x4c
   11e5c:	str	r3, [r7, #56]	; 0x38
   11e5e:	movs	r5, #3
   11e60:	b.w	115ec <__ssvfscanf_r+0x238>
   11e64:	orr.w	r4, r4, #1
   11e68:	ldr	r3, [pc, #404]	; (12000 <__ssvfscanf_r+0xc4c>)
   11e6a:	str	r3, [r7, #44]	; 0x2c
   11e6c:	movs	r3, #10
   11e6e:	str	r1, [r7, #76]	; 0x4c
   11e70:	str	r3, [r7, #56]	; 0x38
   11e72:	movs	r5, #3
   11e74:	b.w	115ec <__ssvfscanf_r+0x238>
   11e78:	lsls	r3, r4, #20
   11e7a:	bpl.w	11982 <__ssvfscanf_r+0x5ce>
   11e7e:	cbnz	r6, 11e86 <__ssvfscanf_r+0xad2>
   11e80:	orr.w	r4, r4, #512	; 0x200
   11e84:	movs	r6, #8
   11e86:	lsls	r3, r4, #21
   11e88:	bmi.w	121d8 <__ssvfscanf_r+0xe24>
   11e8c:	ldr	r3, [r7, #60]	; 0x3c
   11e8e:	bic.w	r4, r4, #896	; 0x380
   11e92:	cbz	r3, 11e9c <__ssvfscanf_r+0xae8>
   11e94:	subs	r3, #1
   11e96:	str	r3, [r7, #60]	; 0x3c
   11e98:	add.w	r8, r8, #1
   11e9c:	ldr	r3, [r1, #4]
   11e9e:	subs	r3, #1
   11ea0:	cmp	r3, #0
   11ea2:	add.w	sl, sl, #1
   11ea6:	str	r3, [r1, #4]
   11ea8:	bgt.w	11992 <__ssvfscanf_r+0x5de>
   11eac:	mov	r0, r9
   11eae:	str	r1, [r7, #72]	; 0x48
   11eb0:	bl	14708 <__ssrefill_r>
   11eb4:	ldr	r1, [r7, #72]	; 0x48
   11eb6:	cmp	r0, #0
   11eb8:	beq.w	11996 <__ssvfscanf_r+0x5e2>
   11ebc:	b.n	1199c <__ssvfscanf_r+0x5e8>
   11ebe:	vmov	r0, s16
   11ec2:	mov	r1, fp
   11ec4:	bl	14708 <__ssrefill_r>
   11ec8:	cmp	r0, #0
   11eca:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   11ece:	cmp	r6, #0
   11ed0:	bne.w	1165c <__ssvfscanf_r+0x2a8>
   11ed4:	b.n	117f0 <__ssvfscanf_r+0x43c>
   11ed6:	mov	r1, fp
   11ed8:	mov	r0, r9
   11eda:	bl	14708 <__ssrefill_r>
   11ede:	cmp	r0, #0
   11ee0:	bne.w	1158c <__ssvfscanf_r+0x1d8>
   11ee4:	ldr.w	r2, [fp]
   11ee8:	b.n	11e20 <__ssvfscanf_r+0xa6c>
   11eea:	ldr.w	r2, [fp, #4]
   11eee:	b.n	11f10 <__ssvfscanf_r+0xb5c>
   11ef0:	ldr.w	r3, [fp]
   11ef4:	ldrb	r2, [r3, #0]
   11ef6:	ldrb	r2, [r6, r2]
   11ef8:	lsls	r1, r2, #28
   11efa:	add.w	r3, r3, #1
   11efe:	bpl.w	11402 <__ssvfscanf_r+0x4e>
   11f02:	ldr.w	r2, [fp, #4]
   11f06:	subs	r2, #1
   11f08:	strd	r3, r2, [fp]
   11f0c:	add.w	sl, sl, #1
   11f10:	cmp	r2, #0
   11f12:	bgt.n	11ef0 <__ssvfscanf_r+0xb3c>
   11f14:	mov	r1, fp
   11f16:	mov	r0, r9
   11f18:	bl	14708 <__ssrefill_r>
   11f1c:	cmp	r0, #0
   11f1e:	beq.n	11ef0 <__ssvfscanf_r+0xb3c>
   11f20:	b.w	11402 <__ssvfscanf_r+0x4e>
   11f24:	lsls	r1, r4, #27
   11f26:	bmi.w	125bc <__ssvfscanf_r+0x1208>
   11f2a:	ands.w	r4, r4, #128	; 0x80
   11f2e:	beq.w	12688 <__ssvfscanf_r+0x12d4>
   11f32:	ldr	r4, [r7, #48]	; 0x30
   11f34:	ldr.w	r6, [r4], #4
   11f38:	str	r6, [r7, #72]	; 0x48
   11f3a:	cmp	r6, #0
   11f3c:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   11f40:	movs	r0, #32
   11f42:	bl	baa0 <malloc>
   11f46:	mov	r5, r0
   11f48:	cmp	r0, #0
   11f4a:	beq.w	12812 <__ssvfscanf_r+0x145e>
   11f4e:	ldr	r2, [r7, #64]	; 0x40
   11f50:	str	r0, [r6, #0]
   11f52:	ldrh	r3, [r2, #4]
   11f54:	ldrh	r6, [r2, #6]
   11f56:	cmp	r6, r3
   11f58:	bcs.w	124ac <__ssvfscanf_r+0x10f8>
   11f5c:	ldr	r0, [r2, #0]
   11f5e:	ldr	r3, [r7, #72]	; 0x48
   11f60:	str.w	r3, [r0, r6, lsl #2]
   11f64:	ldr	r3, [r7, #64]	; 0x40
   11f66:	str	r4, [r7, #48]	; 0x30
   11f68:	adds	r6, #1
   11f6a:	strh	r6, [r3, #6]
   11f6c:	movs	r3, #32
   11f6e:	str	r3, [r7, #60]	; 0x3c
   11f70:	ldr.w	r2, [fp]
   11f74:	ldr	r6, [pc, #128]	; (11ff8 <__ssvfscanf_r+0xc44>)
   11f76:	ldrb	r1, [r2, #0]
   11f78:	ldrb	r1, [r6, r1]
   11f7a:	lsls	r0, r1, #28
   11f7c:	bmi.w	124d8 <__ssvfscanf_r+0x1124>
   11f80:	mov	r3, r6
   11f82:	mov	r4, r5
   11f84:	mov	r0, r2
   11f86:	mov	r6, r5
   11f88:	ldr.w	r1, [fp, #4]
   11f8c:	ldr	r2, [r7, #72]	; 0x48
   11f8e:	subs	r1, #1
   11f90:	str.w	r1, [fp, #4]
   11f94:	adds	r1, r0, #1
   11f96:	str.w	r1, [fp]
   11f9a:	mov	r5, r6
   11f9c:	ldrb	r1, [r0, #0]
   11f9e:	strb.w	r1, [r5], #1
   11fa2:	cbz	r2, 11fae <__ssvfscanf_r+0xbfa>
   11fa4:	ldr	r2, [r7, #60]	; 0x3c
   11fa6:	subs	r6, r5, r4
   11fa8:	cmp	r6, r2
   11faa:	bcs.w	126a2 <__ssvfscanf_r+0x12ee>
   11fae:	subs.w	r8, r8, #1
   11fb2:	beq.n	11fcc <__ssvfscanf_r+0xc18>
   11fb4:	ldr.w	r1, [fp, #4]
   11fb8:	cmp	r1, #0
   11fba:	mov	r6, r5
   11fbc:	ble.w	1271c <__ssvfscanf_r+0x1368>
   11fc0:	ldr.w	r0, [fp]
   11fc4:	ldrb	r1, [r0, #0]
   11fc6:	ldrb	r1, [r3, r1]
   11fc8:	lsls	r1, r1, #28
   11fca:	bpl.n	11f88 <__ssvfscanf_r+0xbd4>
   11fcc:	subs	r1, r5, r4
   11fce:	add	sl, r1
   11fd0:	adds	r1, #1
   11fd2:	mov.w	r3, #0
   11fd6:	strb	r3, [r5, #0]
   11fd8:	ldr	r3, [r7, #72]	; 0x48
   11fda:	cbz	r3, 11fe4 <__ssvfscanf_r+0xc30>
   11fdc:	ldr	r3, [r7, #60]	; 0x3c
   11fde:	cmp	r3, r1
   11fe0:	bhi.w	1270c <__ssvfscanf_r+0x1358>
   11fe4:	ldr	r3, [r7, #68]	; 0x44
   11fe6:	adds	r3, #1
   11fe8:	str	r3, [r7, #68]	; 0x44
   11fea:	b.w	11402 <__ssvfscanf_r+0x4e>
   11fee:	movs	r3, #0
   11ff0:	str	r3, [r7, #60]	; 0x3c
   11ff2:	b.n	118b8 <__ssvfscanf_r+0x504>
   11ff4:	.word	0x20002430
   11ff8:	.word	0x20000801
   11ffc:	.word	0x00013fcd
   12000:	.word	0x0000d3e9
   12004:	lsls	r6, r4, #27
   12006:	bmi.w	1230c <__ssvfscanf_r+0xf58>
   1200a:	ands.w	r4, r4, #128	; 0x80
   1200e:	beq.w	126ec <__ssvfscanf_r+0x1338>
   12012:	ldr	r4, [r7, #48]	; 0x30
   12014:	ldr.w	r6, [r4], #4
   12018:	str	r6, [r7, #72]	; 0x48
   1201a:	cmp	r6, #0
   1201c:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   12020:	movs	r0, #32
   12022:	bl	baa0 <malloc>
   12026:	mov	r5, r0
   12028:	cmp	r0, #0
   1202a:	beq.w	12812 <__ssvfscanf_r+0x145e>
   1202e:	ldr	r2, [r7, #64]	; 0x40
   12030:	str	r0, [r6, #0]
   12032:	ldrh	r3, [r2, #4]
   12034:	ldrh	r6, [r2, #6]
   12036:	cmp	r6, r3
   12038:	bcs.w	12530 <__ssvfscanf_r+0x117c>
   1203c:	ldr	r0, [r2, #0]
   1203e:	ldr	r3, [r7, #72]	; 0x48
   12040:	str.w	r3, [r0, r6, lsl #2]
   12044:	ldr	r3, [r7, #64]	; 0x40
   12046:	str	r4, [r7, #48]	; 0x30
   12048:	adds	r6, #1
   1204a:	strh	r6, [r3, #6]
   1204c:	movs	r4, #32
   1204e:	ldr.w	r2, [fp]
   12052:	add.w	r3, r7, #112	; 0x70
   12056:	mov	r1, r3
   12058:	ldrb	r3, [r2, #0]
   1205a:	ldrb	r3, [r1, r3]
   1205c:	cmp	r3, #0
   1205e:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   12062:	vmov	s16, r9
   12066:	ldr.w	r9, [r7, #72]	; 0x48
   1206a:	str.w	sl, [r7, #60]	; 0x3c
   1206e:	mov	r6, r5
   12070:	mov	sl, r4
   12072:	mov	r0, r2
   12074:	mov	r4, r1
   12076:	ldr.w	r1, [fp, #4]
   1207a:	adds	r3, r0, #1
   1207c:	subs	r1, #1
   1207e:	strd	r3, r1, [fp]
   12082:	mov	r1, r5
   12084:	ldrb	r0, [r0, #0]
   12086:	strb.w	r0, [r1], #1
   1208a:	cmp.w	r9, #0
   1208e:	beq.n	12096 <__ssvfscanf_r+0xce2>
   12090:	subs	r5, r1, r6
   12092:	cmp	r5, sl
   12094:	bcs.n	1218c <__ssvfscanf_r+0xdd8>
   12096:	mov	r5, r1
   12098:	subs.w	r8, r8, #1
   1209c:	beq.n	120b4 <__ssvfscanf_r+0xd00>
   1209e:	ldr.w	r1, [fp, #4]
   120a2:	cmp	r1, #0
   120a4:	ble.w	1237c <__ssvfscanf_r+0xfc8>
   120a8:	ldr.w	r0, [fp]
   120ac:	ldrb	r1, [r0, #0]
   120ae:	ldrb	r1, [r4, r1]
   120b0:	cmp	r1, #0
   120b2:	bne.n	12076 <__ssvfscanf_r+0xcc2>
   120b4:	mov	r4, sl
   120b6:	vmov	r9, s16
   120ba:	ldr.w	sl, [r7, #60]	; 0x3c
   120be:	subs	r6, r5, r6
   120c0:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   120c4:	mov.w	r3, #0
   120c8:	strb	r3, [r5, #0]
   120ca:	ldr	r3, [r7, #72]	; 0x48
   120cc:	cbz	r3, 120d6 <__ssvfscanf_r+0xd22>
   120ce:	adds	r1, r6, #1
   120d0:	cmp	r4, r1
   120d2:	bhi.w	12730 <__ssvfscanf_r+0x137c>
   120d6:	ldr	r3, [r7, #68]	; 0x44
   120d8:	adds	r3, #1
   120da:	add	sl, r6
   120dc:	str	r3, [r7, #68]	; 0x44
   120de:	b.w	11402 <__ssvfscanf_r+0x4e>
   120e2:	movs	r3, #0
   120e4:	str	r3, [r7, #16]
   120e6:	b.w	1163c <__ssvfscanf_r+0x288>
   120ea:	tst.w	r4, #143	; 0x8f
   120ee:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   120f2:	add.w	r8, r8, r8, lsl #2
   120f6:	add.w	r8, r2, r8, lsl #1
   120fa:	sub.w	r8, r8, #48	; 0x30
   120fe:	b.w	115d0 <__ssvfscanf_r+0x21c>
   12102:	str	r1, [r7, #76]	; 0x4c
   12104:	movs	r5, #4
   12106:	b.w	115ec <__ssvfscanf_r+0x238>
   1210a:	ldr	r3, [r7, #60]	; 0x3c
   1210c:	ldr	r1, [r7, #72]	; 0x48
   1210e:	adds	r3, r3, r1
   12110:	bne.w	11d9c <__ssvfscanf_r+0x9e8>
   12114:	b.n	11c94 <__ssvfscanf_r+0x8e0>
   12116:	ldr	r3, [r7, #72]	; 0x48
   12118:	cmp	r3, #3
   1211a:	beq.n	12122 <__ssvfscanf_r+0xd6e>
   1211c:	cmp	r3, #5
   1211e:	bne.w	117f0 <__ssvfscanf_r+0x43c>
   12122:	ldr	r3, [r7, #72]	; 0x48
   12124:	adds	r3, #1
   12126:	uxtb	r3, r3
   12128:	str	r3, [r7, #72]	; 0x48
   1212a:	b.w	117c6 <__ssvfscanf_r+0x412>
   1212e:	ldr	r3, [r7, #52]	; 0x34
   12130:	cmp	r3, #0
   12132:	bne.w	11d38 <__ssvfscanf_r+0x984>
   12136:	and.w	r3, r4, #1792	; 0x700
   1213a:	cmp.w	r3, #1792	; 0x700
   1213e:	bne.w	11d38 <__ssvfscanf_r+0x984>
   12142:	movs	r3, #1
   12144:	bic.w	r4, r4, #1920	; 0x780
   12148:	str	r3, [r7, #60]	; 0x3c
   1214a:	b.w	117c6 <__ssvfscanf_r+0x412>
   1214e:	ldr	r3, [r7, #60]	; 0x3c
   12150:	ldr	r1, [r7, #72]	; 0x48
   12152:	adds	r3, r3, r1
   12154:	bne.w	11d5c <__ssvfscanf_r+0x9a8>
   12158:	b.n	11c94 <__ssvfscanf_r+0x8e0>
   1215a:	adds	r3, r0, #2
   1215c:	bne.w	12a16 <__ssvfscanf_r+0x1662>
   12160:	ldr.w	r3, [fp, #4]
   12164:	ldr	r5, [r7, #72]	; 0x48
   12166:	cmp	r3, #0
   12168:	bgt.w	11b6c <__ssvfscanf_r+0x7b8>
   1216c:	mov	r1, fp
   1216e:	mov	r0, r9
   12170:	bl	14708 <__ssrefill_r>
   12174:	cmp	r0, #0
   12176:	beq.w	11c40 <__ssvfscanf_r+0x88c>
   1217a:	ldr.w	sl, [r7, #60]	; 0x3c
   1217e:	str	r6, [r7, #36]	; 0x24
   12180:	mov	r4, r8
   12182:	cmp	r5, #0
   12184:	beq.w	11c4e <__ssvfscanf_r+0x89a>
   12188:	b.w	1158c <__ssvfscanf_r+0x1d8>
   1218c:	mov.w	sl, sl, lsl #1
   12190:	mov	r0, r6
   12192:	mov	r1, sl
   12194:	bl	c038 <realloc>
   12198:	mov	r6, r0
   1219a:	cmp	r0, #0
   1219c:	beq.w	12812 <__ssvfscanf_r+0x145e>
   121a0:	add	r5, r0
   121a2:	str.w	r0, [r9]
   121a6:	b.n	12098 <__ssvfscanf_r+0xce4>
   121a8:	orr.w	r4, r4, #512	; 0x200
   121ac:	ldr	r3, [pc, #752]	; (124a0 <__ssvfscanf_r+0x10ec>)
   121ae:	str	r3, [r7, #44]	; 0x2c
   121b0:	movs	r3, #16
   121b2:	str	r1, [r7, #76]	; 0x4c
   121b4:	str	r3, [r7, #56]	; 0x38
   121b6:	movs	r5, #3
   121b8:	b.w	115ec <__ssvfscanf_r+0x238>
   121bc:	ldr	r3, [r7, #52]	; 0x34
   121be:	adds	r3, #1
   121c0:	str	r3, [r7, #52]	; 0x34
   121c2:	ldr	r3, [r7, #16]
   121c4:	bic.w	r4, r4, #128	; 0x80
   121c8:	cmp	r3, #0
   121ca:	beq.w	117ca <__ssvfscanf_r+0x416>
   121ce:	ldr	r3, [r7, #16]
   121d0:	subs	r3, #1
   121d2:	str	r3, [r7, #16]
   121d4:	b.w	117cc <__ssvfscanf_r+0x418>
   121d8:	bic.w	r4, r4, #1408	; 0x580
   121dc:	b.w	11982 <__ssvfscanf_r+0x5ce>
   121e0:	lsls	r2, r4, #28
   121e2:	bpl.w	12574 <__ssvfscanf_r+0x11c0>
   121e6:	ldr	r3, [r7, #48]	; 0x30
   121e8:	ldr.w	r2, [r3], #4
   121ec:	str	r3, [r7, #48]	; 0x30
   121ee:	strb	r0, [r2, #0]
   121f0:	b.w	119da <__ssvfscanf_r+0x626>
   121f4:	ldrb.w	r1, [r5, #-1]
   121f8:	mov	r2, fp
   121fa:	mov	r0, r9
   121fc:	subs	r5, #1
   121fe:	bl	14688 <_sungetc_r>
   12202:	b.w	119b0 <__ssvfscanf_r+0x5fc>
   12206:	ldr	r3, [r7, #28]
   12208:	ldr	r2, [r7, #52]	; 0x34
   1220a:	cmp	r3, r2
   1220c:	beq.w	1186a <__ssvfscanf_r+0x4b6>
   12210:	subs	r2, r3, r2
   12212:	addw	r3, r7, #707	; 0x2c3
   12216:	cmp	r5, r3
   12218:	it	cs
   1221a:	addwcs	r5, r7, #706	; 0x2c2
   1221e:	ldr	r1, [pc, #644]	; (124a4 <__ssvfscanf_r+0x10f0>)
   12220:	mov	r0, r5
   12222:	bl	d654 <sprintf>
   12226:	b.w	1186a <__ssvfscanf_r+0x4b6>
   1222a:	lsls	r2, r4, #27
   1222c:	bmi.w	12492 <__ssvfscanf_r+0x10de>
   12230:	lsls	r3, r4, #28
   12232:	bmi.w	125aa <__ssvfscanf_r+0x11f6>
   12236:	lsls	r6, r4, #29
   12238:	bpl.w	127a4 <__ssvfscanf_r+0x13f0>
   1223c:	ldr	r3, [r7, #48]	; 0x30
   1223e:	str	r1, [r7, #76]	; 0x4c
   12240:	ldr.w	r2, [r3], #4
   12244:	str	r3, [r7, #48]	; 0x30
   12246:	strh.w	sl, [r2]
   1224a:	b.w	11402 <__ssvfscanf_r+0x4e>
   1224e:	lsls	r3, r4, #28
   12250:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   12254:	ldrb	r2, [r0, #1]
   12256:	cmp	r2, #104	; 0x68
   12258:	beq.w	12568 <__ssvfscanf_r+0x11b4>
   1225c:	orr.w	r4, r4, #4
   12260:	mov	r0, r1
   12262:	b.w	114c4 <__ssvfscanf_r+0x110>
   12266:	ldr	r3, [pc, #568]	; (124a0 <__ssvfscanf_r+0x10ec>)
   12268:	str	r3, [r7, #44]	; 0x2c
   1226a:	movs	r3, #10
   1226c:	str	r1, [r7, #76]	; 0x4c
   1226e:	str	r3, [r7, #56]	; 0x38
   12270:	movs	r5, #3
   12272:	b.w	115ec <__ssvfscanf_r+0x238>
   12276:	ldr	r3, [pc, #560]	; (124a8 <__ssvfscanf_r+0x10f4>)
   12278:	str	r3, [r7, #44]	; 0x2c
   1227a:	movs	r3, #0
   1227c:	str	r1, [r7, #76]	; 0x4c
   1227e:	str	r3, [r7, #56]	; 0x38
   12280:	movs	r5, #3
   12282:	b.w	115ec <__ssvfscanf_r+0x238>
   12286:	orr.w	r4, r4, #544	; 0x220
   1228a:	b.n	121ac <__ssvfscanf_r+0xdf8>
   1228c:	add.w	r0, r7, #112	; 0x70
   12290:	bl	12e50 <__sccl>
   12294:	orr.w	r4, r4, #64	; 0x40
   12298:	str	r0, [r7, #76]	; 0x4c
   1229a:	movs	r5, #1
   1229c:	b.w	115ec <__ssvfscanf_r+0x238>
   122a0:	lsls	r2, r4, #28
   122a2:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   122a6:	ldrb	r2, [r0, #1]
   122a8:	cmp	r2, #108	; 0x6c
   122aa:	beq.w	1255c <__ssvfscanf_r+0x11a8>
   122ae:	orr.w	r4, r4, #1
   122b2:	mov	r0, r1
   122b4:	b.w	114c4 <__ssvfscanf_r+0x110>
   122b8:	ands.w	r3, r4, #143	; 0x8f
   122bc:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   122c0:	ldr	r2, [r7, #64]	; 0x40
   122c2:	cmp	r2, #0
   122c4:	beq.w	12696 <__ssvfscanf_r+0x12e2>
   122c8:	ldrb	r2, [r0, #1]
   122ca:	orr.w	r4, r4, #128	; 0x80
   122ce:	mov	r0, r1
   122d0:	b.w	114c4 <__ssvfscanf_r+0x110>
   122d4:	orrs.w	r8, r8, r4
   122d8:	bne.w	1159e <__ssvfscanf_r+0x1ea>
   122dc:	ldrb	r2, [r0, #1]
   122de:	movs	r4, #16
   122e0:	mov	r0, r1
   122e2:	b.w	114c4 <__ssvfscanf_r+0x110>
   122e6:	str	r1, [r7, #76]	; 0x4c
   122e8:	b.w	1143a <__ssvfscanf_r+0x86>
   122ec:	movs	r3, #0
   122ee:	str	r3, [r7, #32]
   122f0:	str	r3, [r7, #40]	; 0x28
   122f2:	str	r3, [r7, #60]	; 0x3c
   122f4:	add.w	r3, r7, #84	; 0x54
   122f8:	str	r3, [r7, #72]	; 0x48
   122fa:	b.w	11a50 <__ssvfscanf_r+0x69c>
   122fe:	movs	r3, #0
   12300:	strd	r3, r3, [r7, #24]
   12304:	str	r3, [r7, #32]
   12306:	add.w	r4, r7, #84	; 0x54
   1230a:	b.n	11b60 <__ssvfscanf_r+0x7ac>
   1230c:	ldr.w	r3, [fp]
   12310:	add.w	r2, r7, #112	; 0x70
   12314:	mov	r1, r2
   12316:	ldrb	r2, [r3, #0]
   12318:	ldrb	r2, [r1, r2]
   1231a:	cmp	r2, #0
   1231c:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   12320:	adds	r3, #1
   12322:	str.w	r3, [fp]
   12326:	ldr.w	r3, [fp, #4]
   1232a:	cmp.w	r8, #1
   1232e:	add.w	r3, r3, #4294967295
   12332:	str.w	r3, [fp, #4]
   12336:	it	ne
   12338:	movne	r4, r1
   1233a:	bne.n	12366 <__ssvfscanf_r+0xfb2>
   1233c:	b.w	119e6 <__ssvfscanf_r+0x632>
   12340:	ldr.w	r3, [fp]
   12344:	ldrb	r2, [r3, #0]
   12346:	ldrb	r2, [r4, r2]
   12348:	adds	r3, #1
   1234a:	cmp	r2, #0
   1234c:	beq.w	119e6 <__ssvfscanf_r+0x632>
   12350:	str.w	r3, [fp]
   12354:	ldr.w	r3, [fp, #4]
   12358:	adds	r5, #1
   1235a:	subs	r3, #1
   1235c:	cmp	r5, r8
   1235e:	str.w	r3, [fp, #4]
   12362:	beq.w	119e6 <__ssvfscanf_r+0x632>
   12366:	cmp	r3, #0
   12368:	bgt.n	12340 <__ssvfscanf_r+0xf8c>
   1236a:	mov	r1, fp
   1236c:	mov	r0, r9
   1236e:	bl	14708 <__ssrefill_r>
   12372:	cmp	r0, #0
   12374:	beq.n	12340 <__ssvfscanf_r+0xf8c>
   12376:	add	sl, r5
   12378:	b.w	11402 <__ssvfscanf_r+0x4e>
   1237c:	vmov	r0, s16
   12380:	mov	r1, fp
   12382:	bl	14708 <__ssrefill_r>
   12386:	cmp	r0, #0
   12388:	beq.w	120a8 <__ssvfscanf_r+0xcf4>
   1238c:	cmp	r5, r6
   1238e:	mov	r4, sl
   12390:	vmov	r9, s16
   12394:	ldr.w	sl, [r7, #60]	; 0x3c
   12398:	bne.w	120be <__ssvfscanf_r+0xd0a>
   1239c:	b.w	1158c <__ssvfscanf_r+0x1d8>
   123a0:	ldrb.w	r2, [r7, #80]	; 0x50
   123a4:	b.n	11bf8 <__ssvfscanf_r+0x844>
   123a6:	ldr	r3, [r4, #0]
   123a8:	cmp	r3, #4
   123aa:	bne.w	11c12 <__ssvfscanf_r+0x85e>
   123ae:	b.n	11c16 <__ssvfscanf_r+0x862>
   123b0:	adds	r3, r0, #2
   123b2:	bne.w	12a28 <__ssvfscanf_r+0x1674>
   123b6:	ldr.w	r3, [fp, #4]
   123ba:	cmp	r3, #0
   123bc:	ble.w	1276e <__ssvfscanf_r+0x13ba>
   123c0:	ldr.w	r3, [fp]
   123c4:	ldr	r2, [r7, #36]	; 0x24
   123c6:	ldrb	r3, [r3, #0]
   123c8:	ldrb	r3, [r2, r3]
   123ca:	lsls	r0, r3, #28
   123cc:	bmi.n	123d6 <__ssvfscanf_r+0x1022>
   123ce:	cmp.w	r8, #0
   123d2:	bne.w	11a68 <__ssvfscanf_r+0x6b4>
   123d6:	str	r4, [r7, #36]	; 0x24
   123d8:	ldr	r3, [r7, #52]	; 0x34
   123da:	cmp	r3, #0
   123dc:	bne.w	11402 <__ssvfscanf_r+0x4e>
   123e0:	ldr	r2, [r7, #72]	; 0x48
   123e2:	str	r3, [r2, #0]
   123e4:	ldr	r3, [r7, #60]	; 0x3c
   123e6:	cmp	r3, #0
   123e8:	beq.w	11fe4 <__ssvfscanf_r+0xc30>
   123ec:	ldr	r3, [r7, #40]	; 0x28
   123ee:	subs	r1, r2, r3
   123f0:	asrs	r3, r1, #2
   123f2:	ldr	r2, [r7, #32]
   123f4:	adds	r3, #1
   123f6:	cmp	r2, r3
   123f8:	bls.w	11fe4 <__ssvfscanf_r+0xc30>
   123fc:	ldr	r4, [r7, #60]	; 0x3c
   123fe:	adds	r1, #4
   12400:	ldr	r0, [r4, #0]
   12402:	bl	c038 <realloc>
   12406:	cmp	r0, #0
   12408:	bne.w	11c80 <__ssvfscanf_r+0x8cc>
   1240c:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   1240e:	ldr.w	r2, [r3], #4
   12412:	vstr	d0, [r2]
   12416:	str	r3, [r7, #48]	; 0x30
   12418:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   1241a:	ldr	r5, [r7, #12]
   1241c:	ldr	r1, [r7, #32]
   1241e:	ldr	r6, [r7, #4]
   12420:	mov	r0, r5
   12422:	mov	r2, r8
   12424:	mov	fp, r4
   12426:	ldr	r4, [r7, #8]
   12428:	bl	12ed8 <stpncpy>
   1242c:	ldr	r3, [r7, #52]	; 0x34
   1242e:	str	r3, [r7, #28]
   12430:	bic.w	r4, r4, #640	; 0x280
   12434:	subs	r6, #1
   12436:	mov	r5, r0
   12438:	b.w	117cc <__ssvfscanf_r+0x418>
   1243c:	ldr	r0, [r7, #28]
   1243e:	lsls	r1, r3, #3
   12440:	mov	r5, r3
   12442:	bl	c038 <realloc>
   12446:	str	r0, [r7, #28]
   12448:	cmp	r0, #0
   1244a:	beq.w	12916 <__ssvfscanf_r+0x1562>
   1244e:	ldr	r2, [r7, #32]
   12450:	lsls	r3, r5, #1
   12452:	add.w	r8, r0, r4
   12456:	str	r0, [r2, #0]
   12458:	str	r3, [r7, #24]
   1245a:	b.w	11c32 <__ssvfscanf_r+0x87e>
   1245e:	cmp	r6, #2
   12460:	bls.w	129ec <__ssvfscanf_r+0x1638>
   12464:	cmp	r6, #3
   12466:	beq.w	11810 <__ssvfscanf_r+0x45c>
   1246a:	subs	r6, #4
   1246c:	uxtb.w	r8, r6
   12470:	mvn.w	r3, r8
   12474:	adds	r6, r5, r3
   12476:	ldrb.w	r1, [r5, #-1]!
   1247a:	mov	r2, fp
   1247c:	mov	r0, r9
   1247e:	bl	14688 <_sungetc_r>
   12482:	cmp	r6, r5
   12484:	bne.n	12476 <__ssvfscanf_r+0x10c2>
   12486:	add.w	sl, sl, #4294967295
   1248a:	sub.w	sl, sl, r8
   1248e:	b.w	11810 <__ssvfscanf_r+0x45c>
   12492:	str	r1, [r7, #76]	; 0x4c
   12494:	b.w	11402 <__ssvfscanf_r+0x4e>
   12498:	movs	r3, #3
   1249a:	str	r3, [r7, #60]	; 0x3c
   1249c:	b.w	117c6 <__ssvfscanf_r+0x412>
   124a0:	.word	0x00013fcd
   124a4:	.word	0x200007f8
   124a8:	.word	0x0000d3e9
   124ac:	movw	r2, #65526	; 0xfff6
   124b0:	cmp	r3, r2
   124b2:	bhi.w	129e4 <__ssvfscanf_r+0x1630>
   124b6:	ldr	r2, [r7, #64]	; 0x40
   124b8:	adds	r3, #8
   124ba:	uxth	r3, r3
   124bc:	ldr	r0, [r2, #0]
   124be:	str	r0, [r7, #60]	; 0x3c
   124c0:	lsls	r1, r3, #2
   124c2:	str	r3, [r7, #52]	; 0x34
   124c4:	bl	c038 <realloc>
   124c8:	cmp	r0, #0
   124ca:	beq.w	129c4 <__ssvfscanf_r+0x1610>
   124ce:	ldr	r2, [r7, #64]	; 0x40
   124d0:	ldr	r3, [r7, #52]	; 0x34
   124d2:	strh	r3, [r2, #4]
   124d4:	str	r0, [r2, #0]
   124d6:	b.n	11f5e <__ssvfscanf_r+0xbaa>
   124d8:	movs	r1, #1
   124da:	b.n	11fd2 <__ssvfscanf_r+0xc1e>
   124dc:	movw	r2, #65526	; 0xfff6
   124e0:	cmp	r3, r2
   124e2:	bhi.w	12a0c <__ssvfscanf_r+0x1658>
   124e6:	adds	r3, #8
   124e8:	uxth	r6, r3
   124ea:	ldr	r3, [r7, #64]	; 0x40
   124ec:	lsls	r1, r6, #2
   124ee:	ldr	r0, [r3, #0]
   124f0:	bl	c038 <realloc>
   124f4:	ldr	r3, [r7, #64]	; 0x40
   124f6:	cmp	r0, #0
   124f8:	beq.w	12978 <__ssvfscanf_r+0x15c4>
   124fc:	strh	r6, [r3, #4]
   124fe:	str	r0, [r3, #0]
   12500:	b.w	11a3a <__ssvfscanf_r+0x686>
   12504:	movw	r2, #65526	; 0xfff6
   12508:	cmp	r3, r2
   1250a:	bhi.w	12a0c <__ssvfscanf_r+0x1658>
   1250e:	ldr	r2, [r7, #64]	; 0x40
   12510:	adds	r3, #8
   12512:	uxth	r3, r3
   12514:	lsls	r1, r3, #2
   12516:	ldr	r0, [r2, #0]
   12518:	str	r3, [r7, #72]	; 0x48
   1251a:	bl	c038 <realloc>
   1251e:	ldr	r3, [r7, #72]	; 0x48
   12520:	cmp	r0, #0
   12522:	beq.w	12976 <__ssvfscanf_r+0x15c2>
   12526:	ldr	r2, [r7, #64]	; 0x40
   12528:	strh	r3, [r2, #4]
   1252a:	str	r0, [r2, #0]
   1252c:	b.w	11b4c <__ssvfscanf_r+0x798>
   12530:	movw	r2, #65526	; 0xfff6
   12534:	cmp	r3, r2
   12536:	bhi.w	129e4 <__ssvfscanf_r+0x1630>
   1253a:	ldr	r2, [r7, #64]	; 0x40
   1253c:	adds	r3, #8
   1253e:	uxth	r3, r3
   12540:	ldr	r0, [r2, #0]
   12542:	str	r0, [r7, #60]	; 0x3c
   12544:	lsls	r1, r3, #2
   12546:	str	r3, [r7, #52]	; 0x34
   12548:	bl	c038 <realloc>
   1254c:	cmp	r0, #0
   1254e:	beq.w	129c4 <__ssvfscanf_r+0x1610>
   12552:	ldr	r2, [r7, #64]	; 0x40
   12554:	ldr	r3, [r7, #52]	; 0x34
   12556:	strh	r3, [r2, #4]
   12558:	str	r0, [r2, #0]
   1255a:	b.n	1203e <__ssvfscanf_r+0xc8a>
   1255c:	ldrb	r2, [r0, #2]
   1255e:	orr.w	r4, r4, #2
   12562:	adds	r0, #2
   12564:	b.w	114c4 <__ssvfscanf_r+0x110>
   12568:	ldrb	r2, [r0, #2]
   1256a:	orr.w	r4, r4, #8
   1256e:	adds	r0, #2
   12570:	b.w	114c4 <__ssvfscanf_r+0x110>
   12574:	lsls	r3, r4, #29
   12576:	bmi.n	1262a <__ssvfscanf_r+0x1276>
   12578:	ands.w	r2, r4, #1
   1257c:	bne.w	119d0 <__ssvfscanf_r+0x61c>
   12580:	lsls	r6, r4, #30
   12582:	bpl.w	119d0 <__ssvfscanf_r+0x61c>
   12586:	ldr	r3, [pc, #716]	; (12854 <__ssvfscanf_r+0x14a0>)
   12588:	ldr	r1, [r7, #44]	; 0x2c
   1258a:	cmp	r1, r3
   1258c:	mov	r0, r9
   1258e:	ldr	r3, [r7, #56]	; 0x38
   12590:	ldr	r1, [r7, #40]	; 0x28
   12592:	beq.w	12a10 <__ssvfscanf_r+0x165c>
   12596:	bl	1413c <_strtoll_r>
   1259a:	ldr	r3, [r7, #48]	; 0x30
   1259c:	ldr.w	r2, [r3], #4
   125a0:	str	r3, [r7, #48]	; 0x30
   125a2:	strd	r0, r1, [r2]
   125a6:	b.w	119da <__ssvfscanf_r+0x626>
   125aa:	ldr	r3, [r7, #48]	; 0x30
   125ac:	str	r1, [r7, #76]	; 0x4c
   125ae:	ldr.w	r2, [r3], #4
   125b2:	str	r3, [r7, #48]	; 0x30
   125b4:	strb.w	sl, [r2]
   125b8:	b.w	11402 <__ssvfscanf_r+0x4e>
   125bc:	ldr.w	r3, [fp]
   125c0:	ldr	r6, [pc, #660]	; (12858 <__ssvfscanf_r+0x14a4>)
   125c2:	ldrb	r2, [r3, #0]
   125c4:	ldrb	r2, [r6, r2]
   125c6:	lsls	r2, r2, #28
   125c8:	bmi.w	11402 <__ssvfscanf_r+0x4e>
   125cc:	adds	r3, #1
   125ce:	str.w	r3, [fp]
   125d2:	ldr.w	r3, [fp, #4]
   125d6:	cmp.w	r8, #1
   125da:	add.w	r3, r3, #4294967295
   125de:	str.w	r3, [fp, #4]
   125e2:	it	eq
   125e4:	addeq.w	sl, sl, #1
   125e8:	beq.w	11402 <__ssvfscanf_r+0x4e>
   125ec:	movs	r4, #1
   125ee:	b.n	12614 <__ssvfscanf_r+0x1260>
   125f0:	ldr.w	r3, [fp]
   125f4:	ldrb	r2, [r3, #0]
   125f6:	ldrb	r2, [r6, r2]
   125f8:	lsls	r5, r2, #28
   125fa:	add.w	r3, r3, #1
   125fe:	bmi.n	12624 <__ssvfscanf_r+0x1270>
   12600:	str.w	r3, [fp]
   12604:	ldr.w	r3, [fp, #4]
   12608:	adds	r4, #1
   1260a:	subs	r3, #1
   1260c:	cmp	r4, r8
   1260e:	str.w	r3, [fp, #4]
   12612:	beq.n	12624 <__ssvfscanf_r+0x1270>
   12614:	cmp	r3, #0
   12616:	bgt.n	125f0 <__ssvfscanf_r+0x123c>
   12618:	mov	r1, fp
   1261a:	mov	r0, r9
   1261c:	bl	14708 <__ssrefill_r>
   12620:	cmp	r0, #0
   12622:	beq.n	125f0 <__ssvfscanf_r+0x123c>
   12624:	add	sl, r4
   12626:	b.w	11402 <__ssvfscanf_r+0x4e>
   1262a:	ldr	r3, [r7, #48]	; 0x30
   1262c:	ldr.w	r2, [r3], #4
   12630:	str	r3, [r7, #48]	; 0x30
   12632:	strh	r0, [r2, #0]
   12634:	b.w	119da <__ssvfscanf_r+0x626>
   12638:	ldr	r3, [r7, #64]	; 0x40
   1263a:	cmp	r3, #0
   1263c:	beq.w	1291c <__ssvfscanf_r+0x1568>
   12640:	ldr	r3, [r7, #64]	; 0x40
   12642:	ldr.w	r8, [r3]
   12646:	ldrh	r6, [r3, #6]
   12648:	cbz	r6, 12668 <__ssvfscanf_r+0x12b4>
   1264a:	movs	r4, #0
   1264c:	sub.w	r5, r8, #4
   12650:	mov	r9, r4
   12652:	ldr.w	r3, [r5, #4]!
   12656:	ldr	r0, [r3, #0]
   12658:	bl	bab0 <free>
   1265c:	adds	r4, #1
   1265e:	ldr	r3, [r5, #0]
   12660:	cmp	r6, r4
   12662:	str.w	r9, [r3]
   12666:	bne.n	12652 <__ssvfscanf_r+0x129e>
   12668:	mov.w	r3, #4294967295
   1266c:	str	r3, [r7, #68]	; 0x44
   1266e:	cmp.w	r8, #0
   12672:	bne.w	115ae <__ssvfscanf_r+0x1fa>
   12676:	b.w	115b4 <__ssvfscanf_r+0x200>
   1267a:	ldr	r0, [pc, #480]	; (1285c <__ssvfscanf_r+0x14a8>)
   1267c:	str	r3, [r7, #48]	; 0x30
   1267e:	bl	e1b0 <nanf>
   12682:	vstr	s0, [r4]
   12686:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   12688:	ldr	r2, [r7, #48]	; 0x30
   1268a:	str	r4, [r7, #60]	; 0x3c
   1268c:	ldr.w	r5, [r2], #4
   12690:	str	r2, [r7, #48]	; 0x30
   12692:	str	r4, [r7, #72]	; 0x48
   12694:	b.n	11f70 <__ssvfscanf_r+0xbbc>
   12696:	sub	sp, #8
   12698:	strd	r3, r3, [sp, #8]
   1269c:	add	r3, sp, #8
   1269e:	str	r3, [r7, #64]	; 0x40
   126a0:	b.n	122c8 <__ssvfscanf_r+0xf14>
   126a2:	str	r3, [r7, #52]	; 0x34
   126a4:	lsls	r3, r2, #1
   126a6:	mov	r0, r4
   126a8:	mov	r1, r3
   126aa:	str	r3, [r7, #60]	; 0x3c
   126ac:	bl	c038 <realloc>
   126b0:	mov	r4, r0
   126b2:	cmp	r0, #0
   126b4:	beq.w	12812 <__ssvfscanf_r+0x145e>
   126b8:	ldr	r3, [r7, #72]	; 0x48
   126ba:	adds	r5, r0, r6
   126bc:	str	r0, [r3, #0]
   126be:	ldr	r3, [r7, #52]	; 0x34
   126c0:	b.n	11fae <__ssvfscanf_r+0xbfa>
   126c2:	ldr	r5, [r7, #20]
   126c4:	mov	r1, r5
   126c6:	movs	r3, #10
   126c8:	adds	r1, #1
   126ca:	mov	r0, r9
   126cc:	bl	d3e8 <_strtol_r>
   126d0:	ldr	r3, [r7, #24]
   126d2:	subs	r2, r0, r3
   126d4:	b.n	12212 <__ssvfscanf_r+0xe5e>
   126d6:	ldrd	r3, r2, [r7, #48]	; 0x30
   126da:	ldr.w	r1, [r3], #4
   126de:	str	r2, [r7, #32]
   126e0:	str	r1, [r7, #72]	; 0x48
   126e2:	str	r3, [r7, #48]	; 0x30
   126e4:	str	r2, [r7, #40]	; 0x28
   126e6:	str	r2, [r7, #60]	; 0x3c
   126e8:	b.w	11a50 <__ssvfscanf_r+0x69c>
   126ec:	ldr	r3, [r7, #48]	; 0x30
   126ee:	str	r4, [r7, #72]	; 0x48
   126f0:	ldr.w	r5, [r3], #4
   126f4:	str	r3, [r7, #48]	; 0x30
   126f6:	b.n	1204e <__ssvfscanf_r+0xc9a>
   126f8:	ldr	r3, [r7, #48]	; 0x30
   126fa:	ldr	r2, [r7, #40]	; 0x28
   126fc:	ldr.w	r4, [r3], #4
   12700:	str	r2, [r7, #24]
   12702:	strd	r2, r2, [r7, #28]
   12706:	str	r3, [r7, #48]	; 0x30
   12708:	b.w	11b60 <__ssvfscanf_r+0x7ac>
   1270c:	ldr	r4, [r7, #72]	; 0x48
   1270e:	ldr	r0, [r4, #0]
   12710:	bl	c038 <realloc>
   12714:	cmp	r0, #0
   12716:	bne.w	11c80 <__ssvfscanf_r+0x8cc>
   1271a:	b.n	11fe4 <__ssvfscanf_r+0xc30>
   1271c:	mov	r1, fp
   1271e:	mov	r0, r9
   12720:	str	r3, [r7, #52]	; 0x34
   12722:	bl	14708 <__ssrefill_r>
   12726:	ldr	r3, [r7, #52]	; 0x34
   12728:	cmp	r0, #0
   1272a:	beq.w	11fc0 <__ssvfscanf_r+0xc0c>
   1272e:	b.n	11fcc <__ssvfscanf_r+0xc18>
   12730:	ldr	r0, [r3, #0]
   12732:	mov	r4, r3
   12734:	bl	c038 <realloc>
   12738:	cmp	r0, #0
   1273a:	beq.w	120d6 <__ssvfscanf_r+0xd22>
   1273e:	str	r0, [r4, #0]
   12740:	b.n	120d6 <__ssvfscanf_r+0xd22>
   12742:	movs	r5, #0
   12744:	b.n	123b6 <__ssvfscanf_r+0x1002>
   12746:	ldr	r5, [r7, #72]	; 0x48
   12748:	ldr.w	sl, [r7, #60]	; 0x3c
   1274c:	str	r6, [r7, #36]	; 0x24
   1274e:	mov	r4, r8
   12750:	cmp	r5, #0
   12752:	beq.w	11c4e <__ssvfscanf_r+0x89a>
   12756:	subs	r5, #1
   12758:	add.w	r3, r7, #368	; 0x170
   1275c:	mov	r2, fp
   1275e:	ldrb	r1, [r3, r5]
   12760:	mov	r0, r9
   12762:	bl	14688 <_sungetc_r>
   12766:	cmp	r5, #0
   12768:	bne.n	12756 <__ssvfscanf_r+0x13a2>
   1276a:	b.w	11c4e <__ssvfscanf_r+0x89a>
   1276e:	mov	r1, fp
   12770:	mov	r0, r9
   12772:	bl	14708 <__ssrefill_r>
   12776:	cmp	r0, #0
   12778:	beq.w	123c0 <__ssvfscanf_r+0x100c>
   1277c:	str	r4, [r7, #36]	; 0x24
   1277e:	cmp	r5, #0
   12780:	bne.w	1158c <__ssvfscanf_r+0x1d8>
   12784:	b.n	123d8 <__ssvfscanf_r+0x1024>
   12786:	str	r4, [r7, #36]	; 0x24
   12788:	cmp	r5, #0
   1278a:	beq.w	123d8 <__ssvfscanf_r+0x1024>
   1278e:	subs	r5, #1
   12790:	add.w	r3, r7, #368	; 0x170
   12794:	mov	r2, fp
   12796:	ldrb	r1, [r3, r5]
   12798:	mov	r0, r9
   1279a:	bl	14688 <_sungetc_r>
   1279e:	cmp	r5, #0
   127a0:	bne.n	1278e <__ssvfscanf_r+0x13da>
   127a2:	b.n	123d8 <__ssvfscanf_r+0x1024>
   127a4:	lsls	r5, r4, #31
   127a6:	bmi.n	12822 <__ssvfscanf_r+0x146e>
   127a8:	lsls	r4, r4, #30
   127aa:	bpl.n	12822 <__ssvfscanf_r+0x146e>
   127ac:	ldr	r3, [r7, #48]	; 0x30
   127ae:	str	r1, [r7, #76]	; 0x4c
   127b0:	ldr.w	r2, [r3], #4
   127b4:	str	r3, [r7, #48]	; 0x30
   127b6:	mov.w	r3, sl, asr #31
   127ba:	str.w	sl, [r2]
   127be:	str	r3, [r2, #4]
   127c0:	b.w	11402 <__ssvfscanf_r+0x4e>
   127c4:	vmov	r9, s16
   127c8:	mov	r6, r3
   127ca:	b.w	117f6 <__ssvfscanf_r+0x442>
   127ce:	movs	r3, #1
   127d0:	bic.w	r4, r4, #1920	; 0x780
   127d4:	str	r3, [r7, #72]	; 0x48
   127d6:	b.w	117c6 <__ssvfscanf_r+0x412>
   127da:	cmp.w	r8, #1
   127de:	it	cc
   127e0:	movcc.w	r8, #1
   127e4:	ands.w	r3, r4, #1
   127e8:	bne.n	12860 <__ssvfscanf_r+0x14ac>
   127ea:	lsls	r5, r4, #27
   127ec:	bmi.w	12a5c <__ssvfscanf_r+0x16a8>
   127f0:	lsls	r4, r4, #24
   127f2:	bpl.w	12a8e <__ssvfscanf_r+0x16da>
   127f6:	ldr	r3, [r7, #48]	; 0x30
   127f8:	ldr.w	r5, [r3], #4
   127fc:	str	r3, [r7, #72]	; 0x48
   127fe:	cmp	r5, #0
   12800:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   12804:	mov	r0, r8
   12806:	bl	baa0 <malloc>
   1280a:	mov	r3, r0
   1280c:	cmp	r0, #0
   1280e:	bne.w	129ca <__ssvfscanf_r+0x1616>
   12812:	ldr	r3, [r7, #64]	; 0x40
   12814:	cmp	r3, #0
   12816:	beq.w	1291c <__ssvfscanf_r+0x1568>
   1281a:	ldr.w	r8, [r3]
   1281e:	ldrh	r6, [r3, #6]
   12820:	b.n	12648 <__ssvfscanf_r+0x1294>
   12822:	ldr	r3, [r7, #48]	; 0x30
   12824:	str	r1, [r7, #76]	; 0x4c
   12826:	ldr.w	r2, [r3], #4
   1282a:	str.w	sl, [r2]
   1282e:	str	r3, [r7, #48]	; 0x30
   12830:	b.w	11402 <__ssvfscanf_r+0x4e>
   12834:	mov	r3, r5
   12836:	ldr	r5, [r7, #40]	; 0x28
   12838:	cmp	r3, r5
   1283a:	bls.w	1159e <__ssvfscanf_r+0x1ea>
   1283e:	mov	r4, r3
   12840:	ldrb.w	r1, [r4, #-1]!
   12844:	mov	r2, fp
   12846:	mov	r0, r9
   12848:	bl	14688 <_sungetc_r>
   1284c:	cmp	r4, r5
   1284e:	bne.n	12840 <__ssvfscanf_r+0x148c>
   12850:	b.w	1159e <__ssvfscanf_r+0x1ea>
   12854:	.word	0x00013fcd
   12858:	.word	0x20000801
   1285c:	.word	0x200005f0
   12860:	ands.w	r3, r4, #16
   12864:	str	r3, [r7, #52]	; 0x34
   12866:	beq.n	12926 <__ssvfscanf_r+0x1572>
   12868:	movs	r5, #0
   1286a:	str	r5, [r7, #60]	; 0x3c
   1286c:	str	r5, [r7, #72]	; 0x48
   1286e:	mov	r6, r5
   12870:	movs	r4, #0
   12872:	mov	r3, r9
   12874:	mov	r9, r8
   12876:	mov	r8, r5
   12878:	mov	r5, r4
   1287a:	mov	r4, r3
   1287c:	bl	db3c <__locale_mb_cur_max>
   12880:	cmp	r0, r5
   12882:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   12886:	ldrd	r3, r2, [fp]
   1288a:	ldrb.w	r1, [r3], #1
   1288e:	subs	r2, #1
   12890:	strd	r3, r2, [fp]
   12894:	ldr	r2, [r7, #36]	; 0x24
   12896:	add.w	r0, r7, #368	; 0x170
   1289a:	cmp	r2, #3
   1289c:	strb	r1, [r0, r5]
   1289e:	add.w	r3, r5, #1
   128a2:	add.w	r5, r7, #104	; 0x68
   128a6:	bne.n	128ae <__ssvfscanf_r+0x14fa>
   128a8:	ldr	r2, [r5, #0]
   128aa:	cmp	r2, #4
   128ac:	beq.n	128bc <__ssvfscanf_r+0x1508>
   128ae:	movs	r2, #8
   128b0:	movs	r1, #0
   128b2:	mov	r0, r5
   128b4:	str	r3, [r7, #40]	; 0x28
   128b6:	bl	942c <memset>
   128ba:	ldr	r3, [r7, #40]	; 0x28
   128bc:	str	r5, [sp, #0]
   128be:	add.w	r2, r7, #368	; 0x170
   128c2:	mov	r1, r6
   128c4:	mov	r0, r4
   128c6:	str	r3, [r7, #40]	; 0x28
   128c8:	bl	142e0 <_mbrtowc_r>
   128cc:	adds	r3, r0, #1
   128ce:	str	r0, [r7, #36]	; 0x24
   128d0:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   128d4:	ldr	r3, [r7, #40]	; 0x28
   128d6:	cmp	r0, #0
   128d8:	bne.w	12b6a <__ssvfscanf_r+0x17b6>
   128dc:	ldr	r2, [r7, #52]	; 0x34
   128de:	cbnz	r2, 128e2 <__ssvfscanf_r+0x152e>
   128e0:	str	r2, [r6, #0]
   128e2:	add	sl, r3
   128e4:	add.w	r9, r9, #4294967295
   128e8:	ldr	r3, [r7, #52]	; 0x34
   128ea:	cmp	r3, #0
   128ec:	bne.w	12bda <__ssvfscanf_r+0x1826>
   128f0:	ldr	r3, [r7, #72]	; 0x48
   128f2:	cmp	r3, #0
   128f4:	beq.w	12bd8 <__ssvfscanf_r+0x1824>
   128f8:	ldr	r3, [r7, #60]	; 0x3c
   128fa:	subs	r5, r6, r3
   128fc:	cmp.w	r8, r5, asr #2
   12900:	bhi.w	12bd8 <__ssvfscanf_r+0x1824>
   12904:	mov	r0, r3
   12906:	mov.w	r1, r8, lsl #3
   1290a:	bl	c038 <realloc>
   1290e:	str	r0, [r7, #60]	; 0x3c
   12910:	cmp	r0, #0
   12912:	bne.w	12bce <__ssvfscanf_r+0x181a>
   12916:	ldr	r3, [r7, #64]	; 0x40
   12918:	cmp	r3, #0
   1291a:	bne.n	12978 <__ssvfscanf_r+0x15c4>
   1291c:	mov.w	r3, #4294967295
   12920:	str	r3, [r7, #68]	; 0x44
   12922:	b.w	115b4 <__ssvfscanf_r+0x200>
   12926:	lsls	r2, r4, #24
   12928:	bpl.w	12a4a <__ssvfscanf_r+0x1696>
   1292c:	ldr	r4, [r7, #48]	; 0x30
   1292e:	ldr.w	r3, [r4], #4
   12932:	str	r3, [r7, #72]	; 0x48
   12934:	cmp	r3, #0
   12936:	beq.w	1159e <__ssvfscanf_r+0x1ea>
   1293a:	movs	r0, #128	; 0x80
   1293c:	bl	baa0 <malloc>
   12940:	mov	r6, r0
   12942:	cmp	r0, #0
   12944:	beq.n	12916 <__ssvfscanf_r+0x1562>
   12946:	ldr	r3, [r7, #72]	; 0x48
   12948:	str	r0, [r3, #0]
   1294a:	ldr	r3, [r7, #64]	; 0x40
   1294c:	ldrh	r5, [r3, #6]
   1294e:	ldrh	r2, [r3, #4]
   12950:	cmp	r5, r2
   12952:	bcc.w	12abc <__ssvfscanf_r+0x1708>
   12956:	movw	r1, #65526	; 0xfff6
   1295a:	cmp	r2, r1
   1295c:	bhi.n	12a0c <__ssvfscanf_r+0x1658>
   1295e:	adds	r2, #8
   12960:	uxth	r3, r2
   12962:	ldr	r2, [r7, #64]	; 0x40
   12964:	str	r3, [r7, #60]	; 0x3c
   12966:	lsls	r1, r3, #2
   12968:	ldr	r0, [r2, #0]
   1296a:	bl	c038 <realloc>
   1296e:	ldr	r3, [r7, #60]	; 0x3c
   12970:	cmp	r0, #0
   12972:	bne.w	12ad2 <__ssvfscanf_r+0x171e>
   12976:	ldr	r3, [r7, #64]	; 0x40
   12978:	ldrh	r3, [r3, #6]
   1297a:	ldr	r2, [r7, #64]	; 0x40
   1297c:	mov	r6, r3
   1297e:	ldr.w	r8, [r2]
   12982:	b.n	12648 <__ssvfscanf_r+0x1294>
   12984:	mov	r3, r5
   12986:	ldr	r5, [r7, #40]	; 0x28
   12988:	cmp	r3, r5
   1298a:	bls.w	1159e <__ssvfscanf_r+0x1ea>
   1298e:	mov	r4, r3
   12990:	ldrb.w	r1, [r4, #-1]!
   12994:	mov	r2, fp
   12996:	mov	r0, r9
   12998:	bl	14688 <_sungetc_r>
   1299c:	cmp	r4, r5
   1299e:	bne.n	12990 <__ssvfscanf_r+0x15dc>
   129a0:	b.w	1159e <__ssvfscanf_r+0x1ea>
   129a4:	mov	r0, r2
   129a6:	lsls	r1, r3, #3
   129a8:	mov	r6, r3
   129aa:	bl	c038 <realloc>
   129ae:	str	r0, [r7, #40]	; 0x28
   129b0:	cmp	r0, #0
   129b2:	beq.n	12916 <__ssvfscanf_r+0x1562>
   129b4:	adds	r2, r0, r5
   129b6:	str	r2, [r7, #72]	; 0x48
   129b8:	ldr	r2, [r7, #60]	; 0x3c
   129ba:	ldr	r5, [r7, #52]	; 0x34
   129bc:	str	r0, [r2, #0]
   129be:	lsls	r3, r6, #1
   129c0:	str	r3, [r7, #32]
   129c2:	b.n	123b6 <__ssvfscanf_r+0x1002>
   129c4:	ldr.w	r8, [r7, #60]	; 0x3c
   129c8:	b.n	12648 <__ssvfscanf_r+0x1294>
   129ca:	ldr	r1, [r7, #64]	; 0x40
   129cc:	str	r0, [r5, #0]
   129ce:	ldrh	r6, [r1, #6]
   129d0:	ldrh	r2, [r1, #4]
   129d2:	cmp	r6, r2
   129d4:	bcc.w	12af4 <__ssvfscanf_r+0x1740>
   129d8:	movw	r1, #65526	; 0xfff6
   129dc:	cmp	r2, r1
   129de:	str	r0, [r7, #48]	; 0x30
   129e0:	bls.w	12b2e <__ssvfscanf_r+0x177a>
   129e4:	ldr	r3, [r7, #64]	; 0x40
   129e6:	ldr.w	r8, [r3]
   129ea:	b.n	12648 <__ssvfscanf_r+0x1294>
   129ec:	ldr	r2, [r7, #40]	; 0x28
   129ee:	cmp	r5, r2
   129f0:	bls.w	1159e <__ssvfscanf_r+0x1ea>
   129f4:	mov	r4, r5
   129f6:	ldr	r5, [r7, #40]	; 0x28
   129f8:	ldrb.w	r1, [r4, #-1]!
   129fc:	mov	r2, fp
   129fe:	mov	r0, r9
   12a00:	bl	14688 <_sungetc_r>
   12a04:	cmp	r4, r5
   12a06:	bne.n	129f8 <__ssvfscanf_r+0x1644>
   12a08:	b.w	1159e <__ssvfscanf_r+0x1ea>
   12a0c:	mov	r3, r5
   12a0e:	b.n	1297a <__ssvfscanf_r+0x15c6>
   12a10:	bl	142dc <_strtoull_r>
   12a14:	b.n	1259a <__ssvfscanf_r+0x11e6>
   12a16:	ldr.w	r3, [r8]
   12a1a:	mov	r5, r3
   12a1c:	adds	r3, #1
   12a1e:	bne.w	11bcc <__ssvfscanf_r+0x818>
   12a22:	mov	r2, r5
   12a24:	b.w	11bf8 <__ssvfscanf_r+0x844>
   12a28:	ldr	r3, [r7, #72]	; 0x48
   12a2a:	ldr	r0, [r3, #0]
   12a2c:	bl	14398 <iswspace>
   12a30:	cmp	r0, #0
   12a32:	bne.w	12786 <__ssvfscanf_r+0x13d2>
   12a36:	cmp	r4, #3
   12a38:	add	sl, r5
   12a3a:	bne.w	11ad0 <__ssvfscanf_r+0x71c>
   12a3e:	ldr	r3, [r6, #0]
   12a40:	cmp	r3, #4
   12a42:	bne.w	11ad0 <__ssvfscanf_r+0x71c>
   12a46:	b.w	11ad4 <__ssvfscanf_r+0x720>
   12a4a:	ldrd	r3, r2, [r7, #48]	; 0x30
   12a4e:	ldr.w	r6, [r3], #4
   12a52:	str	r3, [r7, #48]	; 0x30
   12a54:	mov	r5, r2
   12a56:	str	r2, [r7, #60]	; 0x3c
   12a58:	str	r2, [r7, #72]	; 0x48
   12a5a:	b.n	12870 <__ssvfscanf_r+0x14bc>
   12a5c:	mov	r4, r3
   12a5e:	ldr.w	r3, [fp, #4]
   12a62:	cmp	r8, r3
   12a64:	ble.n	12ada <__ssvfscanf_r+0x1726>
   12a66:	ldr.w	r2, [fp]
   12a6a:	add	r2, r3
   12a6c:	str.w	r2, [fp]
   12a70:	mov	r1, fp
   12a72:	mov	r0, r9
   12a74:	add	r4, r3
   12a76:	sub.w	r8, r8, r3
   12a7a:	bl	14708 <__ssrefill_r>
   12a7e:	cmp	r0, #0
   12a80:	beq.n	12a5e <__ssvfscanf_r+0x16aa>
   12a82:	cmp	r4, #0
   12a84:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   12a88:	add	sl, r4
   12a8a:	b.w	11402 <__ssvfscanf_r+0x4e>
   12a8e:	ldr	r5, [r7, #48]	; 0x30
   12a90:	mov	r3, r8
   12a92:	ldr	r1, [r5, #0]
   12a94:	str.w	fp, [sp]
   12a98:	movs	r2, #1
   12a9a:	mov	r0, r9
   12a9c:	bl	14744 <_sfread_r>
   12aa0:	mov	r4, r0
   12aa2:	cmp	r0, #0
   12aa4:	beq.w	1158c <__ssvfscanf_r+0x1d8>
   12aa8:	adds	r5, #4
   12aaa:	str	r5, [r7, #72]	; 0x48
   12aac:	ldr	r3, [r7, #68]	; 0x44
   12aae:	adds	r3, #1
   12ab0:	str	r3, [r7, #68]	; 0x44
   12ab2:	ldr	r3, [r7, #72]	; 0x48
   12ab4:	str	r3, [r7, #48]	; 0x30
   12ab6:	add	sl, r4
   12ab8:	b.w	11402 <__ssvfscanf_r+0x4e>
   12abc:	ldr	r0, [r3, #0]
   12abe:	ldr	r3, [r7, #72]	; 0x48
   12ac0:	str.w	r3, [r0, r5, lsl #2]
   12ac4:	ldr	r3, [r7, #64]	; 0x40
   12ac6:	str	r4, [r7, #48]	; 0x30
   12ac8:	adds	r5, #1
   12aca:	strh	r5, [r3, #6]
   12acc:	str	r6, [r7, #60]	; 0x3c
   12ace:	movs	r5, #32
   12ad0:	b.n	12870 <__ssvfscanf_r+0x14bc>
   12ad2:	ldr	r2, [r7, #64]	; 0x40
   12ad4:	strh	r3, [r2, #4]
   12ad6:	str	r0, [r2, #0]
   12ad8:	b.n	12abe <__ssvfscanf_r+0x170a>
   12ada:	sub.w	r3, r3, r8
   12ade:	str.w	r3, [fp, #4]
   12ae2:	ldr.w	r3, [fp]
   12ae6:	add	r4, r8
   12ae8:	add	r3, r8
   12aea:	str.w	r3, [fp]
   12aee:	add	sl, r4
   12af0:	b.w	11402 <__ssvfscanf_r+0x4e>
   12af4:	ldr	r2, [r1, #0]
   12af6:	str	r2, [r7, #60]	; 0x3c
   12af8:	ldr	r2, [r7, #60]	; 0x3c
   12afa:	str.w	r5, [r2, r6, lsl #2]
   12afe:	ldr	r2, [r7, #64]	; 0x40
   12b00:	adds	r6, #1
   12b02:	uxth	r6, r6
   12b04:	strh	r6, [r2, #6]
   12b06:	mov	r1, r3
   12b08:	str.w	fp, [sp]
   12b0c:	mov	r3, r8
   12b0e:	movs	r2, #1
   12b10:	mov	r0, r9
   12b12:	bl	14744 <_sfread_r>
   12b16:	mov	r4, r0
   12b18:	cbz	r0, 12b52 <__ssvfscanf_r+0x179e>
   12b1a:	cmp	r8, r0
   12b1c:	bls.n	12aac <__ssvfscanf_r+0x16f8>
   12b1e:	ldr	r0, [r5, #0]
   12b20:	mov	r1, r4
   12b22:	bl	c038 <realloc>
   12b26:	cmp	r0, #0
   12b28:	beq.n	12aac <__ssvfscanf_r+0x16f8>
   12b2a:	str	r0, [r5, #0]
   12b2c:	b.n	12aac <__ssvfscanf_r+0x16f8>
   12b2e:	ldr	r3, [r7, #64]	; 0x40
   12b30:	adds	r2, #8
   12b32:	uxth	r4, r2
   12b34:	ldr	r2, [r3, #0]
   12b36:	str	r2, [r7, #52]	; 0x34
   12b38:	mov	r0, r2
   12b3a:	lsls	r1, r4, #2
   12b3c:	bl	c038 <realloc>
   12b40:	ldr	r2, [r7, #52]	; 0x34
   12b42:	str	r0, [r7, #60]	; 0x3c
   12b44:	cmp	r0, #0
   12b46:	beq.n	12c00 <__ssvfscanf_r+0x184c>
   12b48:	ldr	r3, [r7, #64]	; 0x40
   12b4a:	strh	r4, [r3, #4]
   12b4c:	str	r0, [r3, #0]
   12b4e:	ldr	r3, [r7, #48]	; 0x30
   12b50:	b.n	12af8 <__ssvfscanf_r+0x1744>
   12b52:	ldr	r3, [r7, #68]	; 0x44
   12b54:	ldr.w	r8, [r7, #60]	; 0x3c
   12b58:	cmp	r3, #0
   12b5a:	beq.w	12648 <__ssvfscanf_r+0x1294>
   12b5e:	ldrh.w	r3, [fp, #12]
   12b62:	lsls	r3, r3, #25
   12b64:	bpl.w	115a2 <__ssvfscanf_r+0x1ee>
   12b68:	b.n	12640 <__ssvfscanf_r+0x128c>
   12b6a:	ldr	r2, [r7, #36]	; 0x24
   12b6c:	adds	r2, #2
   12b6e:	bne.n	12bac <__ssvfscanf_r+0x17f8>
   12b70:	ldr.w	r2, [fp, #4]
   12b74:	cmp	r2, #0
   12b76:	mov	r5, r3
   12b78:	bgt.w	1287c <__ssvfscanf_r+0x14c8>
   12b7c:	mov	r1, fp
   12b7e:	mov	r0, r4
   12b80:	bl	14708 <__ssrefill_r>
   12b84:	cbnz	r0, 12bc0 <__ssvfscanf_r+0x180c>
   12b86:	cmp.w	r9, #0
   12b8a:	bne.w	1287c <__ssvfscanf_r+0x14c8>
   12b8e:	mov	r5, r8
   12b90:	mov	r9, r4
   12b92:	ldr	r3, [r7, #72]	; 0x48
   12b94:	cbz	r3, 12ba0 <__ssvfscanf_r+0x17ec>
   12b96:	ldr	r3, [r7, #60]	; 0x3c
   12b98:	subs	r1, r6, r3
   12b9a:	cmp.w	r5, r1, asr #2
   12b9e:	bhi.n	12bf0 <__ssvfscanf_r+0x183c>
   12ba0:	ldr	r3, [r7, #52]	; 0x34
   12ba2:	cmp	r3, #0
   12ba4:	bne.w	11402 <__ssvfscanf_r+0x4e>
   12ba8:	b.w	11fe4 <__ssvfscanf_r+0xc30>
   12bac:	add	sl, r3
   12bae:	ldr	r3, [r7, #36]	; 0x24
   12bb0:	cmp	r3, #3
   12bb2:	bne.w	128e4 <__ssvfscanf_r+0x1530>
   12bb6:	ldr	r3, [r5, #0]
   12bb8:	cmp	r3, #4
   12bba:	bne.w	128e4 <__ssvfscanf_r+0x1530>
   12bbe:	b.n	128e8 <__ssvfscanf_r+0x1534>
   12bc0:	mov	r9, r4
   12bc2:	mov	r4, r5
   12bc4:	mov	r5, r8
   12bc6:	cmp	r4, #0
   12bc8:	beq.n	12b92 <__ssvfscanf_r+0x17de>
   12bca:	b.w	1158c <__ssvfscanf_r+0x1d8>
   12bce:	ldr	r2, [r7, #72]	; 0x48
   12bd0:	adds	r6, r0, r5
   12bd2:	str	r0, [r2, #0]
   12bd4:	mov.w	r8, r8, lsl #1
   12bd8:	adds	r6, #4
   12bda:	ldr.w	r3, [fp, #4]
   12bde:	cmp	r3, #0
   12be0:	mov.w	r5, #0
   12be4:	ble.n	12b7c <__ssvfscanf_r+0x17c8>
   12be6:	cmp.w	r9, #0
   12bea:	bne.w	1287c <__ssvfscanf_r+0x14c8>
   12bee:	b.n	12b8e <__ssvfscanf_r+0x17da>
   12bf0:	ldr	r4, [r7, #72]	; 0x48
   12bf2:	ldr	r0, [r4, #0]
   12bf4:	bl	c038 <realloc>
   12bf8:	cmp	r0, #0
   12bfa:	beq.n	12ba0 <__ssvfscanf_r+0x17ec>
   12bfc:	str	r0, [r4, #0]
   12bfe:	b.n	12ba0 <__ssvfscanf_r+0x17ec>
   12c00:	mov	r8, r2
   12c02:	b.n	12648 <__ssvfscanf_r+0x1294>

00012c04 <_fclose_r>:
   12c04:	push	{r4, r5, r6, lr}
   12c06:	cmp	r1, #0
   12c08:	beq.n	12ca2 <_fclose_r+0x9e>
   12c0a:	mov	r6, r0
   12c0c:	mov	r4, r1
   12c0e:	cbz	r0, 12c16 <_fclose_r+0x12>
   12c10:	ldr	r3, [r0, #52]	; 0x34
   12c12:	cmp	r3, #0
   12c14:	beq.n	12ca8 <_fclose_r+0xa4>
   12c16:	ldr	r3, [r4, #100]	; 0x64
   12c18:	lsls	r0, r3, #31
   12c1a:	bpl.n	12c86 <_fclose_r+0x82>
   12c1c:	ldrsh.w	r3, [r4, #12]
   12c20:	cmp	r3, #0
   12c22:	beq.n	12ca2 <_fclose_r+0x9e>
   12c24:	mov	r1, r4
   12c26:	mov	r0, r6
   12c28:	bl	12ccc <__sflush_r>
   12c2c:	ldr	r3, [r4, #44]	; 0x2c
   12c2e:	mov	r5, r0
   12c30:	cbz	r3, 12c40 <_fclose_r+0x3c>
   12c32:	ldr	r1, [r4, #28]
   12c34:	mov	r0, r6
   12c36:	blx	r3
   12c38:	cmp	r0, #0
   12c3a:	it	lt
   12c3c:	movlt.w	r5, #4294967295
   12c40:	ldrh	r3, [r4, #12]
   12c42:	lsls	r2, r3, #24
   12c44:	bmi.n	12cc0 <_fclose_r+0xbc>
   12c46:	ldr	r1, [r4, #48]	; 0x30
   12c48:	cbz	r1, 12c5c <_fclose_r+0x58>
   12c4a:	add.w	r3, r4, #64	; 0x40
   12c4e:	cmp	r1, r3
   12c50:	beq.n	12c58 <_fclose_r+0x54>
   12c52:	mov	r0, r6
   12c54:	bl	e2e4 <_free_r>
   12c58:	movs	r3, #0
   12c5a:	str	r3, [r4, #48]	; 0x30
   12c5c:	ldr	r1, [r4, #68]	; 0x44
   12c5e:	cbz	r1, 12c6a <_fclose_r+0x66>
   12c60:	mov	r0, r6
   12c62:	bl	e2e4 <_free_r>
   12c66:	movs	r3, #0
   12c68:	str	r3, [r4, #68]	; 0x44
   12c6a:	bl	d56c <__sfp_lock_acquire>
   12c6e:	ldr	r3, [r4, #100]	; 0x64
   12c70:	movs	r2, #0
   12c72:	lsls	r3, r3, #31
   12c74:	strh	r2, [r4, #12]
   12c76:	bpl.n	12cb8 <_fclose_r+0xb4>
   12c78:	ldr	r0, [r4, #88]	; 0x58
   12c7a:	bl	dc6c <__retarget_lock_close_recursive>
   12c7e:	bl	d578 <__sfp_lock_release>
   12c82:	mov	r0, r5
   12c84:	pop	{r4, r5, r6, pc}
   12c86:	ldrh	r3, [r4, #12]
   12c88:	lsls	r1, r3, #22
   12c8a:	bmi.n	12c24 <_fclose_r+0x20>
   12c8c:	ldr	r0, [r4, #88]	; 0x58
   12c8e:	bl	dc70 <__retarget_lock_acquire_recursive>
   12c92:	ldrsh.w	r3, [r4, #12]
   12c96:	cmp	r3, #0
   12c98:	bne.n	12c24 <_fclose_r+0x20>
   12c9a:	ldr	r5, [r4, #100]	; 0x64
   12c9c:	ands.w	r5, r5, #1
   12ca0:	beq.n	12cae <_fclose_r+0xaa>
   12ca2:	movs	r5, #0
   12ca4:	mov	r0, r5
   12ca6:	pop	{r4, r5, r6, pc}
   12ca8:	bl	d530 <__sinit>
   12cac:	b.n	12c16 <_fclose_r+0x12>
   12cae:	ldr	r0, [r4, #88]	; 0x58
   12cb0:	bl	dc74 <__retarget_lock_release_recursive>
   12cb4:	mov	r0, r5
   12cb6:	pop	{r4, r5, r6, pc}
   12cb8:	ldr	r0, [r4, #88]	; 0x58
   12cba:	bl	dc74 <__retarget_lock_release_recursive>
   12cbe:	b.n	12c78 <_fclose_r+0x74>
   12cc0:	ldr	r1, [r4, #16]
   12cc2:	mov	r0, r6
   12cc4:	bl	e2e4 <_free_r>
   12cc8:	b.n	12c46 <_fclose_r+0x42>
   12cca:	nop

00012ccc <__sflush_r>:
   12ccc:	ldrsh.w	r2, [r1, #12]
   12cd0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12cd4:	mov	r4, r1
   12cd6:	lsls	r1, r2, #28
   12cd8:	mov	r8, r0
   12cda:	bmi.n	12d6c <__sflush_r+0xa0>
   12cdc:	ldr	r3, [r4, #4]
   12cde:	orr.w	r2, r2, #2048	; 0x800
   12ce2:	cmp	r3, #0
   12ce4:	strh	r2, [r4, #12]
   12ce6:	ble.n	12da6 <__sflush_r+0xda>
   12ce8:	ldr	r5, [r4, #40]	; 0x28
   12cea:	cmp	r5, #0
   12cec:	beq.n	12da0 <__sflush_r+0xd4>
   12cee:	movs	r3, #0
   12cf0:	ldr.w	r6, [r8]
   12cf4:	str.w	r3, [r8]
   12cf8:	uxth	r3, r2
   12cfa:	ands.w	r2, r2, #4096	; 0x1000
   12cfe:	bne.n	12dae <__sflush_r+0xe2>
   12d00:	movs	r3, #1
   12d02:	ldr	r1, [r4, #28]
   12d04:	mov	r0, r8
   12d06:	blx	r5
   12d08:	adds	r3, r0, #1
   12d0a:	beq.n	12ddc <__sflush_r+0x110>
   12d0c:	ldrh	r3, [r4, #12]
   12d0e:	ldr	r5, [r4, #40]	; 0x28
   12d10:	lsls	r7, r3, #29
   12d12:	bpl.n	12d20 <__sflush_r+0x54>
   12d14:	ldr	r3, [r4, #4]
   12d16:	subs	r0, r0, r3
   12d18:	ldr	r3, [r4, #48]	; 0x30
   12d1a:	cbz	r3, 12d20 <__sflush_r+0x54>
   12d1c:	ldr	r3, [r4, #60]	; 0x3c
   12d1e:	subs	r0, r0, r3
   12d20:	ldr	r1, [r4, #28]
   12d22:	mov	r2, r0
   12d24:	movs	r3, #0
   12d26:	mov	r0, r8
   12d28:	blx	r5
   12d2a:	adds	r1, r0, #1
   12d2c:	bne.n	12db2 <__sflush_r+0xe6>
   12d2e:	ldr.w	r3, [r8]
   12d32:	cmp	r3, #0
   12d34:	beq.n	12db2 <__sflush_r+0xe6>
   12d36:	cmp	r3, #29
   12d38:	beq.n	12d3e <__sflush_r+0x72>
   12d3a:	cmp	r3, #22
   12d3c:	bne.n	12dec <__sflush_r+0x120>
   12d3e:	ldrh	r3, [r4, #12]
   12d40:	ldr	r2, [r4, #16]
   12d42:	str	r2, [r4, #0]
   12d44:	bic.w	r3, r3, #2048	; 0x800
   12d48:	movs	r1, #0
   12d4a:	str	r1, [r4, #4]
   12d4c:	strh	r3, [r4, #12]
   12d4e:	ldr	r1, [r4, #48]	; 0x30
   12d50:	str.w	r6, [r8]
   12d54:	cbz	r1, 12da0 <__sflush_r+0xd4>
   12d56:	add.w	r3, r4, #64	; 0x40
   12d5a:	cmp	r1, r3
   12d5c:	beq.n	12d64 <__sflush_r+0x98>
   12d5e:	mov	r0, r8
   12d60:	bl	e2e4 <_free_r>
   12d64:	movs	r0, #0
   12d66:	str	r0, [r4, #48]	; 0x30
   12d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d6c:	ldr	r6, [r4, #16]
   12d6e:	cbz	r6, 12da0 <__sflush_r+0xd4>
   12d70:	uxth	r3, r2
   12d72:	ldr	r5, [r4, #0]
   12d74:	str	r6, [r4, #0]
   12d76:	lsls	r2, r3, #30
   12d78:	ite	eq
   12d7a:	ldreq	r3, [r4, #20]
   12d7c:	movne	r3, #0
   12d7e:	subs	r5, r5, r6
   12d80:	str	r3, [r4, #8]
   12d82:	b.n	12d9c <__sflush_r+0xd0>
   12d84:	mov	r3, r5
   12d86:	mov	r2, r6
   12d88:	ldr	r1, [r4, #28]
   12d8a:	ldr	r7, [r4, #36]	; 0x24
   12d8c:	mov	r0, r8
   12d8e:	blx	r7
   12d90:	subs.w	ip, r0, #0
   12d94:	sub.w	r5, r5, ip
   12d98:	add	r6, ip
   12d9a:	ble.n	12dcc <__sflush_r+0x100>
   12d9c:	cmp	r5, #0
   12d9e:	bgt.n	12d84 <__sflush_r+0xb8>
   12da0:	movs	r0, #0
   12da2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12da6:	ldr	r3, [r4, #60]	; 0x3c
   12da8:	cmp	r3, #0
   12daa:	bgt.n	12ce8 <__sflush_r+0x1c>
   12dac:	b.n	12da0 <__sflush_r+0xd4>
   12dae:	ldr	r0, [r4, #80]	; 0x50
   12db0:	b.n	12d10 <__sflush_r+0x44>
   12db2:	ldrsh.w	r3, [r4, #12]
   12db6:	ldr	r2, [r4, #16]
   12db8:	str	r2, [r4, #0]
   12dba:	bic.w	r3, r3, #2048	; 0x800
   12dbe:	strh	r3, [r4, #12]
   12dc0:	movs	r2, #0
   12dc2:	lsls	r3, r3, #19
   12dc4:	str	r2, [r4, #4]
   12dc6:	bpl.n	12d4e <__sflush_r+0x82>
   12dc8:	str	r0, [r4, #80]	; 0x50
   12dca:	b.n	12d4e <__sflush_r+0x82>
   12dcc:	ldrh	r3, [r4, #12]
   12dce:	orr.w	r3, r3, #64	; 0x40
   12dd2:	mov.w	r0, #4294967295
   12dd6:	strh	r3, [r4, #12]
   12dd8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12ddc:	ldr.w	r3, [r8]
   12de0:	cmp	r3, #0
   12de2:	beq.n	12d0c <__sflush_r+0x40>
   12de4:	cmp	r3, #29
   12de6:	beq.n	12df6 <__sflush_r+0x12a>
   12de8:	cmp	r3, #22
   12dea:	beq.n	12df6 <__sflush_r+0x12a>
   12dec:	ldrh	r3, [r4, #12]
   12dee:	orr.w	r3, r3, #64	; 0x40
   12df2:	strh	r3, [r4, #12]
   12df4:	b.n	12da2 <__sflush_r+0xd6>
   12df6:	str.w	r6, [r8]
   12dfa:	b.n	12da0 <__sflush_r+0xd4>

00012dfc <_fflush_r>:
   12dfc:	push	{r3, r4, r5, lr}
   12dfe:	mov	r4, r1
   12e00:	mov	r5, r0
   12e02:	cbz	r0, 12e08 <_fflush_r+0xc>
   12e04:	ldr	r3, [r0, #52]	; 0x34
   12e06:	cbz	r3, 12e4a <_fflush_r+0x4e>
   12e08:	ldrsh.w	r0, [r4, #12]
   12e0c:	cbz	r0, 12e32 <_fflush_r+0x36>
   12e0e:	ldr	r3, [r4, #100]	; 0x64
   12e10:	lsls	r3, r3, #31
   12e12:	bmi.n	12e18 <_fflush_r+0x1c>
   12e14:	lsls	r1, r0, #22
   12e16:	bpl.n	12e38 <_fflush_r+0x3c>
   12e18:	mov	r0, r5
   12e1a:	mov	r1, r4
   12e1c:	bl	12ccc <__sflush_r>
   12e20:	ldr	r3, [r4, #100]	; 0x64
   12e22:	lsls	r2, r3, #31
   12e24:	mov	r5, r0
   12e26:	bmi.n	12e2e <_fflush_r+0x32>
   12e28:	ldrh	r3, [r4, #12]
   12e2a:	lsls	r3, r3, #22
   12e2c:	bpl.n	12e40 <_fflush_r+0x44>
   12e2e:	mov	r0, r5
   12e30:	pop	{r3, r4, r5, pc}
   12e32:	mov	r5, r0
   12e34:	mov	r0, r5
   12e36:	pop	{r3, r4, r5, pc}
   12e38:	ldr	r0, [r4, #88]	; 0x58
   12e3a:	bl	dc70 <__retarget_lock_acquire_recursive>
   12e3e:	b.n	12e18 <_fflush_r+0x1c>
   12e40:	ldr	r0, [r4, #88]	; 0x58
   12e42:	bl	dc74 <__retarget_lock_release_recursive>
   12e46:	mov	r0, r5
   12e48:	pop	{r3, r4, r5, pc}
   12e4a:	bl	d530 <__sinit>
   12e4e:	b.n	12e08 <_fflush_r+0xc>

00012e50 <__sccl>:
   12e50:	push	{r4, r5, r6, lr}
   12e52:	ldrb	r4, [r1, #0]
   12e54:	cmp	r4, #94	; 0x5e
   12e56:	mov	lr, r0
   12e58:	beq.n	12e98 <__sccl+0x48>
   12e5a:	movs	r2, #0
   12e5c:	adds	r0, r1, #1
   12e5e:	mov	ip, r2
   12e60:	add.w	r3, lr, #4294967295
   12e64:	add.w	r1, lr, #255	; 0xff
   12e68:	strb.w	r2, [r3, #1]!
   12e6c:	cmp	r3, r1
   12e6e:	bne.n	12e68 <__sccl+0x18>
   12e70:	cbz	r4, 12e94 <__sccl+0x44>
   12e72:	eor.w	r1, ip, #1
   12e76:	strb.w	r1, [lr, r4]
   12e7a:	adds	r5, r0, #1
   12e7c:	ldrb.w	r3, [r5, #-1]
   12e80:	cmp	r3, #45	; 0x2d
   12e82:	beq.n	12ea2 <__sccl+0x52>
   12e84:	cmp	r3, #93	; 0x5d
   12e86:	beq.n	12e90 <__sccl+0x40>
   12e88:	cbz	r3, 12e92 <__sccl+0x42>
   12e8a:	mov	r4, r3
   12e8c:	mov	r0, r5
   12e8e:	b.n	12e76 <__sccl+0x26>
   12e90:	mov	r0, r5
   12e92:	pop	{r4, r5, r6, pc}
   12e94:	subs	r0, #1
   12e96:	pop	{r4, r5, r6, pc}
   12e98:	movs	r2, #1
   12e9a:	ldrb	r4, [r1, #1]
   12e9c:	adds	r0, r1, #2
   12e9e:	mov	ip, r2
   12ea0:	b.n	12e60 <__sccl+0x10>
   12ea2:	ldrb.w	ip, [r0, #1]
   12ea6:	cmp.w	ip, #93	; 0x5d
   12eaa:	beq.n	12e8a <__sccl+0x3a>
   12eac:	cmp	r4, ip
   12eae:	bgt.n	12e8a <__sccl+0x3a>
   12eb0:	adds	r6, r4, #1
   12eb2:	adds	r0, #2
   12eb4:	add.w	r2, lr, r6
   12eb8:	strb.w	r1, [r2], #1
   12ebc:	sub.w	r3, r2, lr
   12ec0:	subs	r3, #1
   12ec2:	cmp	ip, r3
   12ec4:	bgt.n	12eb8 <__sccl+0x68>
   12ec6:	sub.w	r3, ip, r4
   12eca:	subs	r3, #1
   12ecc:	cmp	r4, ip
   12ece:	it	ge
   12ed0:	movge	r3, #0
   12ed2:	adds	r5, #2
   12ed4:	adds	r4, r3, r6
   12ed6:	b.n	12e7c <__sccl+0x2c>

00012ed8 <stpncpy>:
   12ed8:	orr.w	r3, r1, r0
   12edc:	lsls	r3, r3, #30
   12ede:	push	{r4, r5}
   12ee0:	bne.n	12ee6 <stpncpy+0xe>
   12ee2:	cmp	r2, #3
   12ee4:	bhi.n	12f06 <stpncpy+0x2e>
   12ee6:	add.w	ip, r1, #4294967295
   12eea:	b.n	12efc <stpncpy+0x24>
   12eec:	ldrb.w	r1, [ip, #1]!
   12ef0:	strb.w	r1, [r3], #1
   12ef4:	subs	r4, r2, #1
   12ef6:	cbz	r1, 12f2a <stpncpy+0x52>
   12ef8:	mov	r2, r4
   12efa:	mov	r0, r3
   12efc:	mov	r3, r0
   12efe:	cmp	r2, #0
   12f00:	bne.n	12eec <stpncpy+0x14>
   12f02:	pop	{r4, r5}
   12f04:	bx	lr
   12f06:	mov	r3, r1
   12f08:	mov	r1, r3
   12f0a:	ldr.w	r5, [r3], #4
   12f0e:	sub.w	r4, r5, #16843009	; 0x1010101
   12f12:	bic.w	r4, r4, r5
   12f16:	tst.w	r4, #2155905152	; 0x80808080
   12f1a:	bne.n	12ee6 <stpncpy+0xe>
   12f1c:	subs	r2, #4
   12f1e:	cmp	r2, #3
   12f20:	str.w	r5, [r0], #4
   12f24:	mov	r1, r3
   12f26:	bhi.n	12f08 <stpncpy+0x30>
   12f28:	b.n	12ee6 <stpncpy+0xe>
   12f2a:	add	r2, r0
   12f2c:	cmp	r4, #0
   12f2e:	beq.n	12f02 <stpncpy+0x2a>
   12f30:	strb.w	r1, [r3], #1
   12f34:	cmp	r3, r2
   12f36:	bne.n	12f30 <stpncpy+0x58>
   12f38:	pop	{r4, r5}
   12f3a:	bx	lr

00012f3c <_localeconv_r>:
   12f3c:	ldr	r0, [pc, #0]	; (12f40 <_localeconv_r+0x4>)
   12f3e:	bx	lr
   12f40:	.word	0x20008a54
   12f44:	.word	0x00000000

00012f48 <frexp>:
   12f48:	push	{r4, r5}
   12f4a:	sub	sp, #8
   12f4c:	vstr	d0, [sp]
   12f50:	ldr	r2, [sp, #4]
   12f52:	ldr	r4, [pc, #100]	; (12fb8 <frexp+0x70>)
   12f54:	bic.w	r3, r2, #2147483648	; 0x80000000
   12f58:	movs	r1, #0
   12f5a:	cmp	r3, r4
   12f5c:	str	r1, [r0, #0]
   12f5e:	bgt.n	12fa4 <frexp+0x5c>
   12f60:	ldr	r4, [sp, #0]
   12f62:	orrs	r4, r3
   12f64:	beq.n	12fa4 <frexp+0x5c>
   12f66:	ldr	r4, [pc, #84]	; (12fbc <frexp+0x74>)
   12f68:	ands	r4, r2
   12f6a:	cbnz	r4, 12f82 <frexp+0x3a>
   12f6c:	vldr	d7, [pc, #64]	; 12fb0 <frexp+0x68>
   12f70:	vmul.f64	d7, d0, d7
   12f74:	vstr	d7, [sp]
   12f78:	ldr	r2, [sp, #4]
   12f7a:	mvn.w	r1, #53	; 0x35
   12f7e:	bic.w	r3, r2, #2147483648	; 0x80000000
   12f82:	bic.w	r2, r2, #2139095040	; 0x7f800000
   12f86:	ldrd	r4, r5, [sp]
   12f8a:	bic.w	r2, r2, #7340032	; 0x700000
   12f8e:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   12f92:	asrs	r3, r3, #20
   12f94:	orr.w	r5, r5, #2097152	; 0x200000
   12f98:	subw	r3, r3, #1022	; 0x3fe
   12f9c:	strd	r4, r5, [sp]
   12fa0:	add	r3, r1
   12fa2:	str	r3, [r0, #0]
   12fa4:	vldr	d0, [sp]
   12fa8:	add	sp, #8
   12faa:	pop	{r4, r5}
   12fac:	bx	lr
   12fae:	nop
   12fb0:	.word	0x00000000
   12fb4:	.word	0x43500000
   12fb8:	.word	0x7fefffff
   12fbc:	.word	0x7ff00000

00012fc0 <__assert_func>:
   12fc0:	push	{lr}
   12fc2:	ldr	r4, [pc, #44]	; (12ff0 <__assert_func+0x30>)
   12fc4:	ldr	r5, [r4, #0]
   12fc6:	mov	r4, r2
   12fc8:	ldr	r6, [r5, #12]
   12fca:	mov	r2, r3
   12fcc:	sub	sp, #20
   12fce:	mov	r3, r0
   12fd0:	mov	r5, r1
   12fd2:	cbz	r4, 12fe8 <__assert_func+0x28>
   12fd4:	ldr	r1, [pc, #28]	; (12ff4 <__assert_func+0x34>)
   12fd6:	str	r5, [sp, #0]
   12fd8:	strd	r1, r4, [sp, #4]
   12fdc:	mov	r0, r6
   12fde:	ldr	r1, [pc, #24]	; (12ff8 <__assert_func+0x38>)
   12fe0:	bl	14560 <fiprintf>
   12fe4:	bl	abae <abort>
   12fe8:	ldr	r1, [pc, #16]	; (12ffc <__assert_func+0x3c>)
   12fea:	mov	r4, r1
   12fec:	b.n	12fd6 <__assert_func+0x16>
   12fee:	nop
   12ff0:	.word	0x20008eec
   12ff4:	.word	0x200005e4
   12ff8:	.word	0x200005f4
   12ffc:	.word	0x200005f0

00013000 <_calloc_r>:
   13000:	push	{r3, r4, r5, lr}
   13002:	umull	r1, r4, r1, r2
   13006:	cbnz	r4, 1306c <_calloc_r+0x6c>
   13008:	bl	bac0 <_malloc_r>
   1300c:	mov	r5, r0
   1300e:	cbz	r0, 1304a <_calloc_r+0x4a>
   13010:	ldr.w	r2, [r0, #-4]
   13014:	bic.w	r2, r2, #3
   13018:	subs	r2, #4
   1301a:	cmp	r2, #36	; 0x24
   1301c:	bhi.n	1304e <_calloc_r+0x4e>
   1301e:	cmp	r2, #19
   13020:	bls.n	13058 <_calloc_r+0x58>
   13022:	cmp	r2, #27
   13024:	strd	r4, r4, [r0]
   13028:	bls.n	13066 <_calloc_r+0x66>
   1302a:	cmp	r2, #36	; 0x24
   1302c:	ite	ne
   1302e:	addne.w	r2, r0, #16
   13032:	addeq.w	r2, r0, #24
   13036:	mov.w	r3, #0
   1303a:	strd	r4, r4, [r0, #8]
   1303e:	itt	eq
   13040:	streq	r4, [r0, #16]
   13042:	streq	r4, [r0, #20]
   13044:	strd	r3, r3, [r2]
   13048:	str	r3, [r2, #8]
   1304a:	mov	r0, r5
   1304c:	pop	{r3, r4, r5, pc}
   1304e:	mov	r1, r4
   13050:	bl	942c <memset>
   13054:	mov	r0, r5
   13056:	pop	{r3, r4, r5, pc}
   13058:	mov	r2, r0
   1305a:	movs	r3, #0
   1305c:	strd	r3, r3, [r2]
   13060:	str	r3, [r2, #8]
   13062:	mov	r0, r5
   13064:	pop	{r3, r4, r5, pc}
   13066:	add.w	r2, r0, #8
   1306a:	b.n	1305a <_calloc_r+0x5a>
   1306c:	bl	dc14 <__errno>
   13070:	movs	r3, #12
   13072:	movs	r5, #0
   13074:	str	r3, [r0, #0]
   13076:	b.n	1304a <_calloc_r+0x4a>

00013078 <quorem>:
   13078:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1307c:	ldr	r3, [r0, #16]
   1307e:	ldr	r4, [r1, #16]
   13080:	cmp	r3, r4
   13082:	sub	sp, #12
   13084:	blt.w	13196 <quorem+0x11e>
   13088:	subs	r4, #1
   1308a:	add.w	r5, r1, #20
   1308e:	lsls	r3, r4, #2
   13090:	add.w	r8, r0, #20
   13094:	str	r3, [sp, #0]
   13096:	ldr.w	r3, [r5, r4, lsl #2]
   1309a:	ldr.w	r2, [r8, r4, lsl #2]
   1309e:	adds	r3, #1
   130a0:	mov	r9, r0
   130a2:	cmp	r2, r3
   130a4:	add.w	r0, r8, r4, lsl #2
   130a8:	add.w	r7, r5, r4, lsl #2
   130ac:	str	r0, [sp, #4]
   130ae:	udiv	r6, r2, r3
   130b2:	bcc.n	1312c <quorem+0xb4>
   130b4:	mov.w	ip, #0
   130b8:	mov	lr, r5
   130ba:	mov	r0, r8
   130bc:	mov	sl, ip
   130be:	mov	r3, ip
   130c0:	ldr.w	fp, [lr], #4
   130c4:	ldr	r2, [r0, #0]
   130c6:	uxth.w	ip, fp
   130ca:	mla	r3, r6, ip, r3
   130ce:	mov.w	ip, r3, lsr #16
   130d2:	mov.w	fp, fp, lsr #16
   130d6:	mla	ip, r6, fp, ip
   130da:	uxth	r3, r3
   130dc:	sub.w	r3, sl, r3
   130e0:	uxth.w	sl, ip
   130e4:	uxtah	r3, r3, r2
   130e8:	rsb	r2, sl, r2, lsr #16
   130ec:	add.w	r2, r2, r3, asr #16
   130f0:	uxth	r3, r3
   130f2:	orr.w	r3, r3, r2, lsl #16
   130f6:	cmp	r7, lr
   130f8:	str.w	r3, [r0], #4
   130fc:	mov.w	sl, r2, asr #16
   13100:	mov.w	r3, ip, lsr #16
   13104:	bcs.n	130c0 <quorem+0x48>
   13106:	ldr	r3, [sp, #0]
   13108:	ldr.w	r3, [r8, r3]
   1310c:	cbnz	r3, 1312c <quorem+0xb4>
   1310e:	ldr	r3, [sp, #4]
   13110:	subs	r3, #4
   13112:	cmp	r8, r3
   13114:	bcc.n	13120 <quorem+0xa8>
   13116:	b.n	13128 <quorem+0xb0>
   13118:	cmp	r8, r3
   1311a:	add.w	r4, r4, #4294967295
   1311e:	bcs.n	13128 <quorem+0xb0>
   13120:	ldr.w	r2, [r3], #-4
   13124:	cmp	r2, #0
   13126:	beq.n	13118 <quorem+0xa0>
   13128:	str.w	r4, [r9, #16]
   1312c:	mov	r0, r9
   1312e:	bl	f2f8 <__mcmp>
   13132:	cmp	r0, #0
   13134:	blt.n	1318e <quorem+0x116>
   13136:	adds	r6, #1
   13138:	mov	r1, r8
   1313a:	movs	r3, #0
   1313c:	ldr.w	r0, [r5], #4
   13140:	ldr.w	ip, [r1]
   13144:	uxth	r2, r0
   13146:	subs	r2, r3, r2
   13148:	lsrs	r3, r0, #16
   1314a:	uxtah	r2, r2, ip
   1314e:	rsb	r3, r3, ip, lsr #16
   13152:	add.w	r3, r3, r2, asr #16
   13156:	uxth	r2, r2
   13158:	orr.w	r2, r2, r3, lsl #16
   1315c:	cmp	r7, r5
   1315e:	str.w	r2, [r1], #4
   13162:	mov.w	r3, r3, asr #16
   13166:	bcs.n	1313c <quorem+0xc4>
   13168:	ldr.w	r2, [r8, r4, lsl #2]
   1316c:	add.w	r3, r8, r4, lsl #2
   13170:	cbnz	r2, 1318e <quorem+0x116>
   13172:	subs	r3, #4
   13174:	cmp	r8, r3
   13176:	bcc.n	13182 <quorem+0x10a>
   13178:	b.n	1318a <quorem+0x112>
   1317a:	cmp	r8, r3
   1317c:	add.w	r4, r4, #4294967295
   13180:	bcs.n	1318a <quorem+0x112>
   13182:	ldr.w	r2, [r3], #-4
   13186:	cmp	r2, #0
   13188:	beq.n	1317a <quorem+0x102>
   1318a:	str.w	r4, [r9, #16]
   1318e:	mov	r0, r6
   13190:	add	sp, #12
   13192:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13196:	movs	r0, #0
   13198:	add	sp, #12
   1319a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1319e:	nop

000131a0 <_dtoa_r>:
   131a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a4:	vpush	{d8}
   131a8:	sub	sp, #60	; 0x3c
   131aa:	vstr	d0, [sp, #8]
   131ae:	str	r1, [sp, #4]
   131b0:	ldr	r1, [r0, #56]	; 0x38
   131b2:	ldr	r5, [sp, #104]	; 0x68
   131b4:	str	r3, [sp, #20]
   131b6:	vmov	r6, r7, d0
   131ba:	mov	r4, r0
   131bc:	mov	fp, r2
   131be:	cbz	r1, 131d2 <_dtoa_r+0x32>
   131c0:	ldr	r2, [r0, #60]	; 0x3c
   131c2:	str	r2, [r1, #4]
   131c4:	movs	r3, #1
   131c6:	lsls	r3, r2
   131c8:	str	r3, [r1, #8]
   131ca:	bl	ed88 <_Bfree>
   131ce:	movs	r3, #0
   131d0:	str	r3, [r4, #56]	; 0x38
   131d2:	subs.w	r8, r7, #0
   131d6:	ite	lt
   131d8:	movlt	r3, #1
   131da:	movge	r3, #0
   131dc:	str	r3, [r5, #0]
   131de:	ldr	r3, [pc, #760]	; (134d8 <_dtoa_r+0x338>)
   131e0:	itt	lt
   131e2:	biclt.w	r8, r8, #2147483648	; 0x80000000
   131e6:	strlt.w	r8, [sp, #12]
   131ea:	bics.w	r3, r3, r8
   131ee:	beq.w	13330 <_dtoa_r+0x190>
   131f2:	vldr	d8, [sp, #8]
   131f6:	vcmp.f64	d8, #0.0
   131fa:	vmrs	APSR_nzcv, fpscr
   131fe:	bne.n	13224 <_dtoa_r+0x84>
   13200:	ldr	r2, [sp, #20]
   13202:	movs	r3, #1
   13204:	str	r3, [r2, #0]
   13206:	ldr	r3, [sp, #108]	; 0x6c
   13208:	cmp	r3, #0
   1320a:	beq.w	1368c <_dtoa_r+0x4ec>
   1320e:	ldr	r3, [pc, #716]	; (134dc <_dtoa_r+0x33c>)
   13210:	ldr	r2, [sp, #108]	; 0x6c
   13212:	str	r3, [r2, #0]
   13214:	subs	r3, #1
   13216:	str	r3, [sp, #0]
   13218:	ldr	r0, [sp, #0]
   1321a:	add	sp, #60	; 0x3c
   1321c:	vpop	{d8}
   13220:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13224:	add	r2, sp, #48	; 0x30
   13226:	add	r1, sp, #52	; 0x34
   13228:	mov	r0, r4
   1322a:	vmov.f64	d0, d8
   1322e:	bl	f5b8 <__d2b>
   13232:	movs.w	r3, r8, lsr #20
   13236:	mov	r5, r0
   13238:	bne.w	13360 <_dtoa_r+0x1c0>
   1323c:	ldrd	r1, r3, [sp, #48]	; 0x30
   13240:	add	r3, r1
   13242:	addw	r2, r3, #1074	; 0x432
   13246:	cmp	r2, #32
   13248:	ble.w	13840 <_dtoa_r+0x6a0>
   1324c:	rsb	r2, r2, #64	; 0x40
   13250:	lsl.w	r8, r8, r2
   13254:	addw	r2, r3, #1042	; 0x412
   13258:	lsrs	r6, r2
   1325a:	orr.w	r2, r8, r6
   1325e:	vmov	s14, r2
   13262:	vcvt.f64.u32	d7, s14
   13266:	subs	r0, r3, #1
   13268:	vmov	r6, s15
   1326c:	vmov	r2, r3, d7
   13270:	mov.w	sl, #1
   13274:	sub.w	r3, r6, #32505856	; 0x1f00000
   13278:	vldr	d3, [pc, #580]	; 134c0 <_dtoa_r+0x320>
   1327c:	vldr	d7, [pc, #584]	; 134c8 <_dtoa_r+0x328>
   13280:	vldr	d5, [pc, #588]	; 134d0 <_dtoa_r+0x330>
   13284:	vmov	s13, r0
   13288:	vmov	d2, r2, r3
   1328c:	vcvt.f64.s32	d4, s13
   13290:	vmov.f64	d6, #120	; 0x3fc00000  1.5
   13294:	vsub.f64	d6, d2, d6
   13298:	vfma.f64	d7, d6, d3
   1329c:	vfma.f64	d7, d4, d5
   132a0:	vcvt.s32.f64	s13, d7
   132a4:	vcmpe.f64	d7, #0.0
   132a8:	vmrs	APSR_nzcv, fpscr
   132ac:	vmov	r7, s13
   132b0:	bpl.n	132c4 <_dtoa_r+0x124>
   132b2:	vcvt.f64.s32	d6, s13
   132b6:	vcmp.f64	d6, d7
   132ba:	vmrs	APSR_nzcv, fpscr
   132be:	it	ne
   132c0:	addne.w	r7, r7, #4294967295
   132c4:	cmp	r7, #22
   132c6:	bhi.w	13554 <_dtoa_r+0x3b4>
   132ca:	ldr	r3, [pc, #532]	; (134e0 <_dtoa_r+0x340>)
   132cc:	add.w	r3, r3, r7, lsl #3
   132d0:	vldr	d7, [r3]
   132d4:	vcmpe.f64	d8, d7
   132d8:	vmrs	APSR_nzcv, fpscr
   132dc:	bpl.n	1338e <_dtoa_r+0x1ee>
   132de:	subs	r1, r1, r0
   132e0:	movs	r3, #0
   132e2:	subs.w	r8, r1, #1
   132e6:	add.w	r7, r7, #4294967295
   132ea:	str	r3, [sp, #40]	; 0x28
   132ec:	bmi.w	13562 <_dtoa_r+0x3c2>
   132f0:	movs	r3, #0
   132f2:	str	r3, [sp, #24]
   132f4:	cmp	r7, #0
   132f6:	bge.n	1339e <_dtoa_r+0x1fe>
   132f8:	ldr	r3, [sp, #24]
   132fa:	str	r7, [sp, #16]
   132fc:	subs	r3, r3, r7
   132fe:	str	r3, [sp, #24]
   13300:	negs	r3, r7
   13302:	str	r3, [sp, #32]
   13304:	ldr	r3, [sp, #4]
   13306:	cmp	r3, #9
   13308:	mov.w	r7, #0
   1330c:	bhi.n	133ac <_dtoa_r+0x20c>
   1330e:	cmp	r3, #5
   13310:	ble.w	1384e <_dtoa_r+0x6ae>
   13314:	subs	r3, #4
   13316:	str	r3, [sp, #4]
   13318:	movs	r6, #0
   1331a:	ldr	r3, [sp, #4]
   1331c:	subs	r2, r3, #2
   1331e:	cmp	r2, #3
   13320:	bhi.w	1356e <_dtoa_r+0x3ce>
   13324:	tbh	[pc, r2, lsl #1]
   13328:	.word	0x03a703aa
   1332c:	.word	0x037e039d
   13330:	ldr	r2, [sp, #20]
   13332:	ubfx	r8, r8, #0, #20
   13336:	movw	r3, #9999	; 0x270f
   1333a:	orrs.w	r8, r8, r6
   1333e:	str	r3, [r2, #0]
   13340:	bne.n	13380 <_dtoa_r+0x1e0>
   13342:	ldr	r3, [sp, #108]	; 0x6c
   13344:	cmp	r3, #0
   13346:	beq.w	13e6c <_dtoa_r+0xccc>
   1334a:	ldr	r3, [pc, #408]	; (134e4 <_dtoa_r+0x344>)
   1334c:	str	r3, [sp, #0]
   1334e:	adds	r3, #8
   13350:	ldr	r2, [sp, #108]	; 0x6c
   13352:	ldr	r0, [sp, #0]
   13354:	str	r3, [r2, #0]
   13356:	add	sp, #60	; 0x3c
   13358:	vpop	{d8}
   1335c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13360:	vmov	r6, s17
   13364:	ubfx	r6, r6, #0, #20
   13368:	subw	r0, r3, #1023	; 0x3ff
   1336c:	vmov	r2, r3, d8
   13370:	orr.w	r3, r6, #1069547520	; 0x3fc00000
   13374:	ldr	r1, [sp, #48]	; 0x30
   13376:	mov.w	sl, #0
   1337a:	orr.w	r3, r3, #3145728	; 0x300000
   1337e:	b.n	13278 <_dtoa_r+0xd8>
   13380:	ldr	r3, [sp, #108]	; 0x6c
   13382:	cmp	r3, #0
   13384:	bne.w	139fe <_dtoa_r+0x85e>
   13388:	ldr	r3, [pc, #348]	; (134e8 <_dtoa_r+0x348>)
   1338a:	str	r3, [sp, #0]
   1338c:	b.n	13218 <_dtoa_r+0x78>
   1338e:	subs	r1, r1, r0
   13390:	movs	r3, #0
   13392:	subs.w	r8, r1, #1
   13396:	str	r3, [sp, #40]	; 0x28
   13398:	bmi.w	13562 <_dtoa_r+0x3c2>
   1339c:	str	r3, [sp, #24]
   1339e:	movs	r3, #0
   133a0:	str	r3, [sp, #32]
   133a2:	ldr	r3, [sp, #4]
   133a4:	str	r7, [sp, #16]
   133a6:	cmp	r3, #9
   133a8:	add	r8, r7
   133aa:	bls.n	1330e <_dtoa_r+0x16e>
   133ac:	movs	r3, #0
   133ae:	movs	r6, #1
   133b0:	str	r3, [sp, #4]
   133b2:	str	r6, [sp, #28]
   133b4:	mov.w	r9, #4294967295
   133b8:	mov	fp, r3
   133ba:	movs	r1, #0
   133bc:	str	r1, [r4, #60]	; 0x3c
   133be:	str.w	r9, [sp, #44]	; 0x2c
   133c2:	mov	r0, r4
   133c4:	bl	ed3c <_Balloc>
   133c8:	str	r0, [sp, #0]
   133ca:	cmp	r0, #0
   133cc:	beq.w	13e50 <_dtoa_r+0xcb0>
   133d0:	ldr	r3, [sp, #0]
   133d2:	str	r3, [r4, #56]	; 0x38
   133d4:	cmp.w	r9, #14
   133d8:	bhi.w	13594 <_dtoa_r+0x3f4>
   133dc:	cmp	r6, #0
   133de:	beq.w	13594 <_dtoa_r+0x3f4>
   133e2:	ldr	r3, [sp, #16]
   133e4:	cmp	r3, #0
   133e6:	ble.w	13ba6 <_dtoa_r+0xa06>
   133ea:	ldr	r2, [pc, #244]	; (134e0 <_dtoa_r+0x340>)
   133ec:	and.w	r1, r3, #15
   133f0:	add.w	r2, r2, r1, lsl #3
   133f4:	vldr	d7, [r2]
   133f8:	asrs	r2, r3, #4
   133fa:	lsls	r3, r3, #23
   133fc:	bpl.w	13b04 <_dtoa_r+0x964>
   13400:	ldr	r1, [pc, #232]	; (134ec <_dtoa_r+0x34c>)
   13402:	vldr	d6, [r1, #32]
   13406:	and.w	r2, r2, #15
   1340a:	movs	r0, #3
   1340c:	vdiv.f64	d5, d8, d6
   13410:	cbz	r2, 1342a <_dtoa_r+0x28a>
   13412:	ldr	r1, [pc, #216]	; (134ec <_dtoa_r+0x34c>)
   13414:	lsls	r6, r2, #31
   13416:	bpl.n	13422 <_dtoa_r+0x282>
   13418:	vldr	d6, [r1]
   1341c:	adds	r0, #1
   1341e:	vmul.f64	d7, d7, d6
   13422:	asrs	r2, r2, #1
   13424:	add.w	r1, r1, #8
   13428:	bne.n	13414 <_dtoa_r+0x274>
   1342a:	vdiv.f64	d6, d5, d7
   1342e:	ldr	r3, [sp, #40]	; 0x28
   13430:	cbz	r3, 13442 <_dtoa_r+0x2a2>
   13432:	vmov.f64	d7, #112	; 0x3f800000  1.0
   13436:	vcmpe.f64	d6, d7
   1343a:	vmrs	APSR_nzcv, fpscr
   1343e:	bmi.w	13d9e <_dtoa_r+0xbfe>
   13442:	vmov	s15, r0
   13446:	vcvt.f64.s32	d5, s15
   1344a:	vmov.f64	d7, #28	; 0x40e00000  7.0
   1344e:	vfma.f64	d7, d5, d6
   13452:	vmov	r2, s15
   13456:	vmov	r0, r1, d7
   1345a:	sub.w	r1, r2, #54525952	; 0x3400000
   1345e:	cmp.w	r9, #0
   13462:	beq.w	13b76 <_dtoa_r+0x9d6>
   13466:	ldr	r6, [sp, #16]
   13468:	mov	r2, r9
   1346a:	ldr	r3, [sp, #28]
   1346c:	cmp	r3, #0
   1346e:	beq.w	13d00 <_dtoa_r+0xb60>
   13472:	vmov.f64	d3, #96	; 0x3f000000  0.5
   13476:	ldr	r3, [pc, #104]	; (134e0 <_dtoa_r+0x340>)
   13478:	vcvt.s32.f64	s9, d6
   1347c:	add.w	ip, r3, r2, lsl #3
   13480:	vcvt.f64.s32	d7, s9
   13484:	vsub.f64	d7, d6, d7
   13488:	vldr	d6, [ip, #-8]
   1348c:	vdiv.f64	d5, d3, d6
   13490:	vmov	d6, r0, r1
   13494:	vmov	r0, s9
   13498:	vsub.f64	d5, d5, d6
   1349c:	ldr	r1, [sp, #0]
   1349e:	vcmpe.f64	d5, d7
   134a2:	adds	r0, #48	; 0x30
   134a4:	vmrs	APSR_nzcv, fpscr
   134a8:	strb.w	r0, [r1], #1
   134ac:	bgt.w	13e08 <_dtoa_r+0xc68>
   134b0:	vmov.f64	d2, #112	; 0x3f800000  1.0
   134b4:	vmov.f64	d4, #36	; 0x41200000  10.0
   134b8:	mov.w	ip, #0
   134bc:	b.n	13522 <_dtoa_r+0x382>
   134be:	nop
   134c0:	.word	0x636f4361
   134c4:	.word	0x3fd287a7
   134c8:	.word	0x8b60c8b3
   134cc:	.word	0x3fc68a28
   134d0:	.word	0x509f79fb
   134d4:	.word	0x3fd34413
   134d8:	.word	0x7ff00000
   134dc:	.word	0x200009d9
   134e0:	.word	0x20000328
   134e4:	.word	0x20000904
   134e8:	.word	0x20000910
   134ec:	.word	0x20000300
   134f0:	add.w	ip, ip, #1
   134f4:	cmp	ip, r2
   134f6:	bge.n	13594 <_dtoa_r+0x3f4>
   134f8:	vmul.f64	d7, d7, d4
   134fc:	vmul.f64	d5, d5, d4
   13500:	vcvt.s32.f64	s13, d7
   13504:	vmov	r3, s13
   13508:	vcvt.f64.s32	d3, s13
   1350c:	adds	r3, #48	; 0x30
   1350e:	vsub.f64	d7, d7, d3
   13512:	vcmpe.f64	d7, d5
   13516:	vmrs	APSR_nzcv, fpscr
   1351a:	strb.w	r3, [r1], #1
   1351e:	bmi.w	13e08 <_dtoa_r+0xc68>
   13522:	vsub.f64	d6, d2, d7
   13526:	vcmpe.f64	d6, d5
   1352a:	vmrs	APSR_nzcv, fpscr
   1352e:	bpl.n	134f0 <_dtoa_r+0x350>
   13530:	ldr	r2, [sp, #0]
   13532:	str	r6, [sp, #16]
   13534:	b.n	1353c <_dtoa_r+0x39c>
   13536:	cmp	r2, r1
   13538:	beq.w	13ddc <_dtoa_r+0xc3c>
   1353c:	mov	r9, r1
   1353e:	ldrb.w	r3, [r1, #-1]!
   13542:	cmp	r3, #57	; 0x39
   13544:	beq.n	13536 <_dtoa_r+0x396>
   13546:	adds	r3, #1
   13548:	uxtb	r3, r3
   1354a:	strb	r3, [r1, #0]
   1354c:	ldr	r3, [sp, #16]
   1354e:	adds	r3, #1
   13550:	str	r3, [sp, #16]
   13552:	b.n	13800 <_dtoa_r+0x660>
   13554:	subs	r1, r1, r0
   13556:	movs	r3, #1
   13558:	subs.w	r8, r1, #1
   1355c:	str	r3, [sp, #40]	; 0x28
   1355e:	bpl.w	132f0 <_dtoa_r+0x150>
   13562:	rsb	r3, r1, #1
   13566:	str	r3, [sp, #24]
   13568:	mov.w	r8, #0
   1356c:	b.n	132f4 <_dtoa_r+0x154>
   1356e:	movs	r6, #0
   13570:	str	r6, [r4, #60]	; 0x3c
   13572:	mov	r1, r6
   13574:	mov	r0, r4
   13576:	bl	ed3c <_Balloc>
   1357a:	str	r0, [sp, #0]
   1357c:	cmp	r0, #0
   1357e:	beq.w	13e50 <_dtoa_r+0xcb0>
   13582:	ldr	r3, [sp, #0]
   13584:	str	r3, [r4, #56]	; 0x38
   13586:	mov.w	r3, #4294967295
   1358a:	str	r3, [sp, #44]	; 0x2c
   1358c:	mov	r9, r3
   1358e:	movs	r3, #1
   13590:	mov	fp, r6
   13592:	str	r3, [sp, #28]
   13594:	ldr	r2, [sp, #52]	; 0x34
   13596:	cmp	r2, #0
   13598:	blt.n	13646 <_dtoa_r+0x4a6>
   1359a:	ldr	r1, [sp, #16]
   1359c:	cmp	r1, #14
   1359e:	bgt.n	13646 <_dtoa_r+0x4a6>
   135a0:	ldr	r3, [pc, #732]	; (13880 <_dtoa_r+0x6e0>)
   135a2:	cmp.w	fp, #0
   135a6:	add.w	r3, r3, r1, lsl #3
   135aa:	vldr	d6, [r3]
   135ae:	bge.n	135dc <_dtoa_r+0x43c>
   135b0:	cmp.w	r9, #0
   135b4:	bgt.n	135dc <_dtoa_r+0x43c>
   135b6:	bne.w	13b9e <_dtoa_r+0x9fe>
   135ba:	vmov.f64	d7, #20	; 0x40a00000  5.0
   135be:	vmul.f64	d7, d6, d7
   135c2:	vcmpe.f64	d8, d7
   135c6:	vmrs	APSR_nzcv, fpscr
   135ca:	mov	sl, r9
   135cc:	mov	r6, r9
   135ce:	bhi.w	13aac <_dtoa_r+0x90c>
   135d2:	ldr.w	r8, [sp]
   135d6:	mvn.w	fp, fp
   135da:	b.n	13abe <_dtoa_r+0x91e>
   135dc:	vdiv.f64	d7, d8, d6
   135e0:	vcvt.s32.f64	s14, d7
   135e4:	ldr	r1, [sp, #0]
   135e6:	vmov	r3, s14
   135ea:	cmp.w	r9, #1
   135ee:	add.w	r3, r3, #48	; 0x30
   135f2:	vcvt.f64.s32	d5, s14
   135f6:	strb.w	r3, [r1], #1
   135fa:	vfms.f64	d8, d5, d6
   135fe:	beq.w	13c6a <_dtoa_r+0xaca>
   13602:	vmov.f64	d4, #36	; 0x41200000  10.0
   13606:	movs	r3, #1
   13608:	b.n	1362e <_dtoa_r+0x48e>
   1360a:	vdiv.f64	d7, d8, d6
   1360e:	vcvt.s32.f64	s14, d7
   13612:	adds	r3, #1
   13614:	vmov	r2, s14
   13618:	cmp	r3, r9
   1361a:	add.w	r2, r2, #48	; 0x30
   1361e:	vcvt.f64.s32	d5, s14
   13622:	strb.w	r2, [r1], #1
   13626:	vfms.f64	d8, d5, d6
   1362a:	beq.w	13c6a <_dtoa_r+0xaca>
   1362e:	vmul.f64	d8, d8, d4
   13632:	vcmp.f64	d8, #0.0
   13636:	vmrs	APSR_nzcv, fpscr
   1363a:	bne.n	1360a <_dtoa_r+0x46a>
   1363c:	ldr	r3, [sp, #16]
   1363e:	adds	r3, #1
   13640:	str	r3, [sp, #16]
   13642:	mov	r9, r1
   13644:	b.n	13800 <_dtoa_r+0x660>
   13646:	ldr	r3, [sp, #28]
   13648:	cbz	r3, 1369c <_dtoa_r+0x4fc>
   1364a:	ldr	r3, [sp, #4]
   1364c:	cmp	r3, #1
   1364e:	ble.w	13b3e <_dtoa_r+0x99e>
   13652:	ldr	r3, [sp, #32]
   13654:	add.w	sl, r9, #4294967295
   13658:	cmp	r3, sl
   1365a:	bge.w	13adc <_dtoa_r+0x93c>
   1365e:	ldr	r3, [sp, #32]
   13660:	str.w	sl, [sp, #32]
   13664:	sub.w	r2, sl, r3
   13668:	add	r7, r2
   1366a:	mov.w	sl, #0
   1366e:	cmp.w	r9, #0
   13672:	blt.w	13cc0 <_dtoa_r+0xb20>
   13676:	ldr	r3, [sp, #24]
   13678:	str	r3, [sp, #36]	; 0x24
   1367a:	add	r3, r9
   1367c:	add	r8, r9
   1367e:	str	r3, [sp, #24]
   13680:	movs	r1, #1
   13682:	mov	r0, r4
   13684:	bl	ef90 <__i2b>
   13688:	mov	r6, r0
   1368a:	b.n	136a6 <_dtoa_r+0x506>
   1368c:	ldr	r3, [pc, #500]	; (13884 <_dtoa_r+0x6e4>)
   1368e:	str	r3, [sp, #0]
   13690:	ldr	r0, [sp, #0]
   13692:	add	sp, #60	; 0x3c
   13694:	vpop	{d8}
   13698:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1369c:	ldr	r3, [sp, #24]
   1369e:	ldr.w	sl, [sp, #32]
   136a2:	ldr	r6, [sp, #28]
   136a4:	str	r3, [sp, #36]	; 0x24
   136a6:	ldr	r3, [sp, #36]	; 0x24
   136a8:	cbz	r3, 136c6 <_dtoa_r+0x526>
   136aa:	cmp.w	r8, #0
   136ae:	ble.n	136c6 <_dtoa_r+0x526>
   136b0:	cmp	r3, r8
   136b2:	ldr	r1, [sp, #24]
   136b4:	mov	r2, r3
   136b6:	it	ge
   136b8:	movge	r2, r8
   136ba:	subs	r1, r1, r2
   136bc:	subs	r3, r3, r2
   136be:	str	r1, [sp, #24]
   136c0:	str	r3, [sp, #36]	; 0x24
   136c2:	sub.w	r8, r8, r2
   136c6:	ldr	r3, [sp, #32]
   136c8:	cbz	r3, 136e4 <_dtoa_r+0x544>
   136ca:	ldr	r3, [sp, #28]
   136cc:	cmp	r3, #0
   136ce:	beq.w	13c20 <_dtoa_r+0xa80>
   136d2:	cmp.w	sl, #0
   136d6:	bgt.w	13ae2 <_dtoa_r+0x942>
   136da:	ldr	r3, [sp, #32]
   136dc:	subs.w	r2, r3, sl
   136e0:	bne.w	13ce2 <_dtoa_r+0xb42>
   136e4:	movs	r1, #1
   136e6:	mov	r0, r4
   136e8:	bl	ef90 <__i2b>
   136ec:	cmp	r7, #0
   136ee:	mov	sl, r0
   136f0:	bgt.w	13852 <_dtoa_r+0x6b2>
   136f4:	ldr	r3, [sp, #4]
   136f6:	cmp	r3, #1
   136f8:	ble.w	13a0a <_dtoa_r+0x86a>
   136fc:	movs	r3, #0
   136fe:	str	r3, [sp, #32]
   13700:	movs	r0, #1
   13702:	cmp	r7, #0
   13704:	bne.w	1386a <_dtoa_r+0x6ca>
   13708:	add	r0, r8
   1370a:	ands.w	r0, r0, #31
   1370e:	beq.w	13a06 <_dtoa_r+0x866>
   13712:	rsb	r2, r0, #32
   13716:	cmp	r2, #4
   13718:	bgt.w	1382c <_dtoa_r+0x68c>
   1371c:	bne.w	13b0c <_dtoa_r+0x96c>
   13720:	ldr	r3, [sp, #24]
   13722:	cmp	r3, #0
   13724:	ble.n	13732 <_dtoa_r+0x592>
   13726:	mov	r1, r5
   13728:	mov	r2, r3
   1372a:	mov	r0, r4
   1372c:	bl	f208 <__lshift>
   13730:	mov	r5, r0
   13732:	cmp.w	r8, #0
   13736:	ble.n	13744 <_dtoa_r+0x5a4>
   13738:	mov	r1, sl
   1373a:	mov	r2, r8
   1373c:	mov	r0, r4
   1373e:	bl	f208 <__lshift>
   13742:	mov	sl, r0
   13744:	ldr	r3, [sp, #40]	; 0x28
   13746:	cmp	r3, #0
   13748:	bne.w	139ca <_dtoa_r+0x82a>
   1374c:	cmp.w	r9, #0
   13750:	ble.w	1399e <_dtoa_r+0x7fe>
   13754:	ldr	r3, [sp, #28]
   13756:	cmp	r3, #0
   13758:	bne.w	138a2 <_dtoa_r+0x702>
   1375c:	ldr	r3, [sp, #16]
   1375e:	adds	r3, #1
   13760:	str	r3, [sp, #16]
   13762:	ldr.w	r8, [sp]
   13766:	movs	r7, #1
   13768:	b.n	1377a <_dtoa_r+0x5da>
   1376a:	mov	r1, r5
   1376c:	movs	r3, #0
   1376e:	movs	r2, #10
   13770:	mov	r0, r4
   13772:	bl	ed9c <__multadd>
   13776:	adds	r7, #1
   13778:	mov	r5, r0
   1377a:	mov	r1, sl
   1377c:	mov	r0, r5
   1377e:	bl	13078 <quorem>
   13782:	cmp	r9, r7
   13784:	add.w	r0, r0, #48	; 0x30
   13788:	strb.w	r0, [r8], #1
   1378c:	bgt.n	1376a <_dtoa_r+0x5ca>
   1378e:	cmp.w	r9, #0
   13792:	ldr	r2, [sp, #0]
   13794:	ite	gt
   13796:	movgt	fp, r9
   13798:	movle.w	fp, #1
   1379c:	mov	r3, r0
   1379e:	add	fp, r2
   137a0:	movs	r7, #0
   137a2:	mov	r1, r5
   137a4:	movs	r2, #1
   137a6:	mov	r0, r4
   137a8:	str	r3, [sp, #4]
   137aa:	bl	f208 <__lshift>
   137ae:	mov	r1, sl
   137b0:	mov	r5, r0
   137b2:	bl	f2f8 <__mcmp>
   137b6:	cmp	r0, #0
   137b8:	ble.w	13b1a <_dtoa_r+0x97a>
   137bc:	ldrb.w	r3, [fp, #-1]
   137c0:	ldr	r2, [sp, #0]
   137c2:	add.w	fp, fp, #4294967295
   137c6:	b.n	137d2 <_dtoa_r+0x632>
   137c8:	cmp	r2, fp
   137ca:	beq.w	13b30 <_dtoa_r+0x990>
   137ce:	ldrb.w	r3, [fp, #-1]!
   137d2:	cmp	r3, #57	; 0x39
   137d4:	add.w	r9, fp, #1
   137d8:	beq.n	137c8 <_dtoa_r+0x628>
   137da:	adds	r3, #1
   137dc:	strb.w	r3, [fp]
   137e0:	mov	r1, sl
   137e2:	mov	r0, r4
   137e4:	bl	ed88 <_Bfree>
   137e8:	cbz	r6, 13800 <_dtoa_r+0x660>
   137ea:	cbz	r7, 137f8 <_dtoa_r+0x658>
   137ec:	cmp	r7, r6
   137ee:	beq.n	137f8 <_dtoa_r+0x658>
   137f0:	mov	r1, r7
   137f2:	mov	r0, r4
   137f4:	bl	ed88 <_Bfree>
   137f8:	mov	r1, r6
   137fa:	mov	r0, r4
   137fc:	bl	ed88 <_Bfree>
   13800:	mov	r1, r5
   13802:	mov	r0, r4
   13804:	bl	ed88 <_Bfree>
   13808:	movs	r3, #0
   1380a:	strb.w	r3, [r9]
   1380e:	ldrd	r2, r3, [sp, #16]
   13812:	str	r2, [r3, #0]
   13814:	ldr	r3, [sp, #108]	; 0x6c
   13816:	cmp	r3, #0
   13818:	beq.w	13218 <_dtoa_r+0x78>
   1381c:	ldr	r0, [sp, #0]
   1381e:	str.w	r9, [r3]
   13822:	add	sp, #60	; 0x3c
   13824:	vpop	{d8}
   13828:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1382c:	rsb	r0, r0, #28
   13830:	ldr	r3, [sp, #24]
   13832:	add	r3, r0
   13834:	str	r3, [sp, #24]
   13836:	ldr	r3, [sp, #36]	; 0x24
   13838:	add	r3, r0
   1383a:	str	r3, [sp, #36]	; 0x24
   1383c:	add	r8, r0
   1383e:	b.n	13720 <_dtoa_r+0x580>
   13840:	rsb	r2, r2, #32
   13844:	lsl.w	r2, r6, r2
   13848:	vmov	s14, r2
   1384c:	b.n	13262 <_dtoa_r+0xc2>
   1384e:	movs	r6, #1
   13850:	b.n	1331a <_dtoa_r+0x17a>
   13852:	mov	r1, r0
   13854:	mov	r2, r7
   13856:	mov	r0, r4
   13858:	bl	f148 <__pow5mult>
   1385c:	ldr	r3, [sp, #4]
   1385e:	cmp	r3, #1
   13860:	mov	sl, r0
   13862:	ble.w	13bf0 <_dtoa_r+0xa50>
   13866:	movs	r3, #0
   13868:	str	r3, [sp, #32]
   1386a:	ldr.w	r2, [sl, #16]
   1386e:	add.w	r2, sl, r2, lsl #2
   13872:	ldr	r0, [r2, #16]
   13874:	bl	eef0 <__hi0bits>
   13878:	rsb	r0, r0, #32
   1387c:	b.n	13708 <_dtoa_r+0x568>
   1387e:	nop
   13880:	.word	0x20000328
   13884:	.word	0x200009d8
   13888:	mov	r1, r6
   1388a:	movs	r3, #0
   1388c:	movs	r2, #10
   1388e:	mov	r0, r4
   13890:	bl	ed9c <__multadd>
   13894:	ldr	r3, [sp, #44]	; 0x2c
   13896:	cmp	r3, #0
   13898:	mov	r6, r0
   1389a:	ble.w	13e3a <_dtoa_r+0xc9a>
   1389e:	str	r7, [sp, #16]
   138a0:	mov	r9, r3
   138a2:	ldr	r3, [sp, #36]	; 0x24
   138a4:	cmp	r3, #0
   138a6:	ble.n	138b4 <_dtoa_r+0x714>
   138a8:	mov	r1, r6
   138aa:	mov	r2, r3
   138ac:	mov	r0, r4
   138ae:	bl	f208 <__lshift>
   138b2:	mov	r6, r0
   138b4:	ldr	r3, [sp, #32]
   138b6:	cmp	r3, #0
   138b8:	bne.w	13c92 <_dtoa_r+0xaf2>
   138bc:	mov	r8, r6
   138be:	ldr	r3, [sp, #8]
   138c0:	ldr	r7, [sp, #0]
   138c2:	and.w	r2, r3, #1
   138c6:	subs	r3, r7, #1
   138c8:	add	r3, r9
   138ca:	str	r3, [sp, #32]
   138cc:	ldr	r3, [sp, #4]
   138ce:	str	r2, [sp, #40]	; 0x28
   138d0:	orrs	r3, r2
   138d2:	str	r3, [sp, #36]	; 0x24
   138d4:	mov	r1, sl
   138d6:	mov	r0, r5
   138d8:	bl	13078 <quorem>
   138dc:	mov	r1, r6
   138de:	mov	fp, r0
   138e0:	mov	r0, r5
   138e2:	bl	f2f8 <__mcmp>
   138e6:	mov	r2, r8
   138e8:	mov	r1, sl
   138ea:	mov	r9, r0
   138ec:	mov	r0, r4
   138ee:	bl	f33c <__mdiff>
   138f2:	ldr	r2, [r0, #12]
   138f4:	mov	r1, r0
   138f6:	add.w	r3, fp, #48	; 0x30
   138fa:	cmp	r2, #0
   138fc:	bne.n	13984 <_dtoa_r+0x7e4>
   138fe:	strd	r0, r3, [sp, #24]
   13902:	mov	r0, r5
   13904:	bl	f2f8 <__mcmp>
   13908:	ldr	r1, [sp, #24]
   1390a:	str	r0, [sp, #8]
   1390c:	mov	r0, r4
   1390e:	bl	ed88 <_Bfree>
   13912:	ldr	r2, [sp, #8]
   13914:	ldr	r3, [sp, #28]
   13916:	cbnz	r2, 13920 <_dtoa_r+0x780>
   13918:	ldr	r1, [sp, #36]	; 0x24
   1391a:	cmp	r1, #0
   1391c:	beq.w	13e1c <_dtoa_r+0xc7c>
   13920:	cmp.w	r9, #0
   13924:	blt.w	13c2e <_dtoa_r+0xa8e>
   13928:	ldr	r1, [sp, #4]
   1392a:	orr.w	r9, r9, r1
   1392e:	ldr	r1, [sp, #40]	; 0x28
   13930:	orrs.w	r9, r1, r9
   13934:	beq.w	13c2e <_dtoa_r+0xa8e>
   13938:	cmp	r2, #0
   1393a:	bgt.w	13cca <_dtoa_r+0xb2a>
   1393e:	ldr	r2, [sp, #32]
   13940:	strb	r3, [r7, #0]
   13942:	add.w	r9, r7, #1
   13946:	cmp	r7, r2
   13948:	mov	fp, r9
   1394a:	beq.w	13cd6 <_dtoa_r+0xb36>
   1394e:	mov	r1, r5
   13950:	movs	r3, #0
   13952:	movs	r2, #10
   13954:	mov	r0, r4
   13956:	bl	ed9c <__multadd>
   1395a:	cmp	r6, r8
   1395c:	mov	r5, r0
   1395e:	mov	r1, r6
   13960:	mov.w	r3, #0
   13964:	mov.w	r2, #10
   13968:	mov	r0, r4
   1396a:	beq.n	13992 <_dtoa_r+0x7f2>
   1396c:	bl	ed9c <__multadd>
   13970:	mov	r1, r8
   13972:	mov	r6, r0
   13974:	movs	r3, #0
   13976:	movs	r2, #10
   13978:	mov	r0, r4
   1397a:	bl	ed9c <__multadd>
   1397e:	mov	r7, r9
   13980:	mov	r8, r0
   13982:	b.n	138d4 <_dtoa_r+0x734>
   13984:	mov	r0, r4
   13986:	str	r3, [sp, #8]
   13988:	bl	ed88 <_Bfree>
   1398c:	ldr	r3, [sp, #8]
   1398e:	movs	r2, #1
   13990:	b.n	13920 <_dtoa_r+0x780>
   13992:	bl	ed9c <__multadd>
   13996:	mov	r7, r9
   13998:	mov	r6, r0
   1399a:	mov	r8, r0
   1399c:	b.n	138d4 <_dtoa_r+0x734>
   1399e:	ldr	r3, [sp, #4]
   139a0:	cmp	r3, #2
   139a2:	bgt.n	13a88 <_dtoa_r+0x8e8>
   139a4:	ldr	r3, [sp, #28]
   139a6:	cmp	r3, #0
   139a8:	bne.w	138a2 <_dtoa_r+0x702>
   139ac:	ldr	r3, [sp, #16]
   139ae:	mov	r1, sl
   139b0:	adds	r3, #1
   139b2:	mov	r0, r5
   139b4:	str	r3, [sp, #16]
   139b6:	bl	13078 <quorem>
   139ba:	ldr.w	fp, [sp]
   139be:	add.w	r3, r0, #48	; 0x30
   139c2:	strb.w	r3, [fp], #1
   139c6:	movs	r7, #0
   139c8:	b.n	137a2 <_dtoa_r+0x602>
   139ca:	mov	r1, sl
   139cc:	mov	r0, r5
   139ce:	bl	f2f8 <__mcmp>
   139d2:	cmp	r0, #0
   139d4:	bge.w	1374c <_dtoa_r+0x5ac>
   139d8:	mov	r1, r5
   139da:	movs	r3, #0
   139dc:	movs	r2, #10
   139de:	mov	r0, r4
   139e0:	bl	ed9c <__multadd>
   139e4:	ldr	r3, [sp, #16]
   139e6:	subs	r7, r3, #1
   139e8:	ldr	r3, [sp, #28]
   139ea:	mov	r5, r0
   139ec:	cmp	r3, #0
   139ee:	bne.w	13888 <_dtoa_r+0x6e8>
   139f2:	ldr	r3, [sp, #44]	; 0x2c
   139f4:	cmp	r3, #0
   139f6:	ble.w	13e2a <_dtoa_r+0xc8a>
   139fa:	mov	r9, r3
   139fc:	b.n	13762 <_dtoa_r+0x5c2>
   139fe:	ldr	r3, [pc, #752]	; (13cf0 <_dtoa_r+0xb50>)
   13a00:	str	r3, [sp, #0]
   13a02:	adds	r3, #3
   13a04:	b.n	13350 <_dtoa_r+0x1b0>
   13a06:	movs	r0, #28
   13a08:	b.n	13830 <_dtoa_r+0x690>
   13a0a:	ldrd	r0, r1, [sp, #8]
   13a0e:	cmp	r0, #0
   13a10:	bne.w	136fc <_dtoa_r+0x55c>
   13a14:	ubfx	r2, r1, #0, #20
   13a18:	cmp	r2, #0
   13a1a:	beq.w	13c06 <_dtoa_r+0xa66>
   13a1e:	ldr	r3, [sp, #8]
   13a20:	str	r3, [sp, #32]
   13a22:	b.n	13700 <_dtoa_r+0x560>
   13a24:	movs	r3, #1
   13a26:	str	r3, [sp, #28]
   13a28:	ldr	r3, [sp, #16]
   13a2a:	add	r3, fp
   13a2c:	add.w	r9, r3, #1
   13a30:	cmp.w	r9, #1
   13a34:	mov	ip, r9
   13a36:	str	r3, [sp, #44]	; 0x2c
   13a38:	it	lt
   13a3a:	movlt.w	ip, #1
   13a3e:	movs	r1, #0
   13a40:	cmp.w	ip, #23
   13a44:	str	r1, [r4, #60]	; 0x3c
   13a46:	ble.w	133c2 <_dtoa_r+0x222>
   13a4a:	movs	r0, #1
   13a4c:	movs	r2, #4
   13a4e:	lsls	r2, r2, #1
   13a50:	add.w	r3, r2, #20
   13a54:	cmp	r3, ip
   13a56:	mov	r1, r0
   13a58:	add.w	r0, r0, #1
   13a5c:	bls.n	13a4e <_dtoa_r+0x8ae>
   13a5e:	str	r1, [r4, #60]	; 0x3c
   13a60:	b.n	133c2 <_dtoa_r+0x222>
   13a62:	movs	r3, #1
   13a64:	str	r3, [sp, #28]
   13a66:	cmp.w	fp, #0
   13a6a:	ble.n	13b12 <_dtoa_r+0x972>
   13a6c:	str.w	fp, [sp, #44]	; 0x2c
   13a70:	mov	r9, fp
   13a72:	mov	ip, fp
   13a74:	b.n	13a3e <_dtoa_r+0x89e>
   13a76:	movs	r3, #0
   13a78:	str	r3, [sp, #28]
   13a7a:	b.n	13a28 <_dtoa_r+0x888>
   13a7c:	movs	r3, #0
   13a7e:	str	r3, [sp, #28]
   13a80:	b.n	13a66 <_dtoa_r+0x8c6>
   13a82:	ldr.w	r9, [sp, #44]	; 0x2c
   13a86:	str	r7, [sp, #16]
   13a88:	cmp.w	r9, #0
   13a8c:	bne.w	135d2 <_dtoa_r+0x432>
   13a90:	mov	r1, sl
   13a92:	mov	r3, r9
   13a94:	movs	r2, #5
   13a96:	mov	r0, r4
   13a98:	bl	ed9c <__multadd>
   13a9c:	mov	r1, r0
   13a9e:	mov	sl, r0
   13aa0:	mov	r0, r5
   13aa2:	bl	f2f8 <__mcmp>
   13aa6:	cmp	r0, #0
   13aa8:	ble.w	135d2 <_dtoa_r+0x432>
   13aac:	ldr	r3, [sp, #16]
   13aae:	add.w	fp, r3, #1
   13ab2:	ldr	r3, [sp, #0]
   13ab4:	movs	r2, #49	; 0x31
   13ab6:	mov	r8, r3
   13ab8:	strb.w	r2, [r3], #1
   13abc:	str	r3, [sp, #0]
   13abe:	mov	r1, sl
   13ac0:	mov	r0, r4
   13ac2:	bl	ed88 <_Bfree>
   13ac6:	add.w	r3, fp, #1
   13aca:	ldr.w	r9, [sp]
   13ace:	str	r3, [sp, #16]
   13ad0:	str.w	r8, [sp]
   13ad4:	cmp	r6, #0
   13ad6:	bne.w	137f8 <_dtoa_r+0x658>
   13ada:	b.n	13800 <_dtoa_r+0x660>
   13adc:	sub.w	sl, r3, sl
   13ae0:	b.n	1366e <_dtoa_r+0x4ce>
   13ae2:	mov	r1, r6
   13ae4:	mov	r2, sl
   13ae6:	mov	r0, r4
   13ae8:	bl	f148 <__pow5mult>
   13aec:	mov	r2, r5
   13aee:	mov	r1, r0
   13af0:	mov	r6, r0
   13af2:	mov	r0, r4
   13af4:	bl	efec <__multiply>
   13af8:	mov	r1, r5
   13afa:	mov	r5, r0
   13afc:	mov	r0, r4
   13afe:	bl	ed88 <_Bfree>
   13b02:	b.n	136da <_dtoa_r+0x53a>
   13b04:	movs	r0, #2
   13b06:	vmov.f64	d5, d8
   13b0a:	b.n	13410 <_dtoa_r+0x270>
   13b0c:	rsb	r0, r0, #60	; 0x3c
   13b10:	b.n	13830 <_dtoa_r+0x690>
   13b12:	mov.w	fp, #1
   13b16:	mov	r9, fp
   13b18:	b.n	133ba <_dtoa_r+0x21a>
   13b1a:	bne.n	13b24 <_dtoa_r+0x984>
   13b1c:	ldr	r3, [sp, #4]
   13b1e:	lsls	r3, r3, #31
   13b20:	bmi.w	137bc <_dtoa_r+0x61c>
   13b24:	mov	r9, fp
   13b26:	ldrb.w	r3, [fp, #-1]!
   13b2a:	cmp	r3, #48	; 0x30
   13b2c:	beq.n	13b24 <_dtoa_r+0x984>
   13b2e:	b.n	137e0 <_dtoa_r+0x640>
   13b30:	ldr	r3, [sp, #16]
   13b32:	ldr	r2, [sp, #0]
   13b34:	adds	r3, #1
   13b36:	str	r3, [sp, #16]
   13b38:	movs	r3, #49	; 0x31
   13b3a:	strb	r3, [r2, #0]
   13b3c:	b.n	137e0 <_dtoa_r+0x640>
   13b3e:	cmp.w	sl, #0
   13b42:	beq.w	13d8c <_dtoa_r+0xbec>
   13b46:	addw	r2, r2, #1075	; 0x433
   13b4a:	ldr	r3, [sp, #24]
   13b4c:	str	r3, [sp, #36]	; 0x24
   13b4e:	add	r3, r2
   13b50:	ldr.w	sl, [sp, #32]
   13b54:	str	r3, [sp, #24]
   13b56:	add	r8, r2
   13b58:	b.n	13680 <_dtoa_r+0x4e0>
   13b5a:	vmov	s15, r0
   13b5e:	vmov.f64	d5, #28	; 0x40e00000  7.0
   13b62:	vcvt.f64.s32	d7, s15
   13b66:	vfma.f64	d5, d6, d7
   13b6a:	vmov	r2, s11
   13b6e:	vmov	r0, r1, d5
   13b72:	sub.w	r1, r2, #54525952	; 0x3400000
   13b76:	vmov	d5, r0, r1
   13b7a:	vmov.f64	d7, #20	; 0x40a00000  5.0
   13b7e:	vsub.f64	d7, d6, d7
   13b82:	vcmpe.f64	d7, d5
   13b86:	vmrs	APSR_nzcv, fpscr
   13b8a:	bgt.w	13dfc <_dtoa_r+0xc5c>
   13b8e:	vneg.f64	d5, d5
   13b92:	vcmpe.f64	d7, d5
   13b96:	vmrs	APSR_nzcv, fpscr
   13b9a:	bpl.w	13594 <_dtoa_r+0x3f4>
   13b9e:	mov.w	sl, #0
   13ba2:	mov	r6, sl
   13ba4:	b.n	135d2 <_dtoa_r+0x432>
   13ba6:	beq.w	13d94 <_dtoa_r+0xbf4>
   13baa:	ldr	r3, [sp, #16]
   13bac:	ldr	r1, [pc, #324]	; (13cf4 <_dtoa_r+0xb54>)
   13bae:	negs	r2, r3
   13bb0:	and.w	r0, r2, #15
   13bb4:	add.w	r1, r1, r0, lsl #3
   13bb8:	vldr	d6, [r1]
   13bbc:	asrs	r2, r2, #4
   13bbe:	vmul.f64	d6, d8, d6
   13bc2:	beq.w	13e4a <_dtoa_r+0xcaa>
   13bc6:	vmov.f64	d7, d6
   13bca:	ldr	r1, [pc, #300]	; (13cf8 <_dtoa_r+0xb58>)
   13bcc:	movs	r6, #0
   13bce:	movs	r0, #2
   13bd0:	lsls	r3, r2, #31
   13bd2:	bpl.n	13be0 <_dtoa_r+0xa40>
   13bd4:	vldr	d5, [r1]
   13bd8:	adds	r0, #1
   13bda:	movs	r6, #1
   13bdc:	vmul.f64	d7, d7, d5
   13be0:	asrs	r2, r2, #1
   13be2:	add.w	r1, r1, #8
   13be6:	bne.n	13bd0 <_dtoa_r+0xa30>
   13be8:	cmp	r6, #0
   13bea:	vseleq.f64	d6, d6, d7
   13bee:	b.n	1342e <_dtoa_r+0x28e>
   13bf0:	ldr	r3, [sp, #8]
   13bf2:	cmp	r3, #0
   13bf4:	bne.w	13866 <_dtoa_r+0x6c6>
   13bf8:	ldrd	r0, r1, [sp, #8]
   13bfc:	ubfx	r2, r1, #0, #20
   13c00:	cmp	r2, #0
   13c02:	bne.w	13e74 <_dtoa_r+0xcd4>
   13c06:	ldr	r2, [pc, #244]	; (13cfc <_dtoa_r+0xb5c>)
   13c08:	ands	r2, r1
   13c0a:	cmp	r2, #0
   13c0c:	beq.w	13e04 <_dtoa_r+0xc64>
   13c10:	ldr	r3, [sp, #24]
   13c12:	adds	r3, #1
   13c14:	str	r3, [sp, #24]
   13c16:	movs	r3, #1
   13c18:	add.w	r8, r8, #1
   13c1c:	str	r3, [sp, #32]
   13c1e:	b.n	13700 <_dtoa_r+0x560>
   13c20:	mov	r1, r5
   13c22:	ldr	r2, [sp, #32]
   13c24:	mov	r0, r4
   13c26:	bl	f148 <__pow5mult>
   13c2a:	mov	r5, r0
   13c2c:	b.n	136e4 <_dtoa_r+0x544>
   13c2e:	cmp	r2, #0
   13c30:	ble.n	13c58 <_dtoa_r+0xab8>
   13c32:	mov	r1, r5
   13c34:	movs	r2, #1
   13c36:	mov	r0, r4
   13c38:	str	r3, [sp, #4]
   13c3a:	bl	f208 <__lshift>
   13c3e:	mov	r1, sl
   13c40:	mov	r5, r0
   13c42:	bl	f2f8 <__mcmp>
   13c46:	cmp	r0, #0
   13c48:	ldr	r3, [sp, #4]
   13c4a:	ble.w	13e10 <_dtoa_r+0xc70>
   13c4e:	cmp	r3, #57	; 0x39
   13c50:	beq.w	13de8 <_dtoa_r+0xc48>
   13c54:	add.w	r3, fp, #49	; 0x31
   13c58:	mov	r9, r7
   13c5a:	strb.w	r3, [r9], #1
   13c5e:	ldr	r3, [sp, #16]
   13c60:	adds	r3, #1
   13c62:	mov	r7, r6
   13c64:	str	r3, [sp, #16]
   13c66:	mov	r6, r8
   13c68:	b.n	137e0 <_dtoa_r+0x640>
   13c6a:	vadd.f64	d8, d8, d8
   13c6e:	vcmpe.f64	d8, d6
   13c72:	vmrs	APSR_nzcv, fpscr
   13c76:	bgt.n	13c8e <_dtoa_r+0xaee>
   13c78:	vcmp.f64	d8, d6
   13c7c:	vmrs	APSR_nzcv, fpscr
   13c80:	bne.w	1363c <_dtoa_r+0x49c>
   13c84:	vmov	r3, s14
   13c88:	lsls	r0, r3, #31
   13c8a:	bpl.w	1363c <_dtoa_r+0x49c>
   13c8e:	ldr	r2, [sp, #0]
   13c90:	b.n	1353c <_dtoa_r+0x39c>
   13c92:	ldr	r1, [r6, #4]
   13c94:	mov	r0, r4
   13c96:	bl	ed3c <_Balloc>
   13c9a:	mov	r7, r0
   13c9c:	cmp	r0, #0
   13c9e:	beq.w	13e5e <_dtoa_r+0xcbe>
   13ca2:	ldr	r3, [r6, #16]
   13ca4:	adds	r3, #2
   13ca6:	lsls	r2, r3, #2
   13ca8:	add.w	r1, r6, #12
   13cac:	adds	r0, #12
   13cae:	bl	9470 <memcpy>
   13cb2:	mov	r1, r7
   13cb4:	movs	r2, #1
   13cb6:	mov	r0, r4
   13cb8:	bl	f208 <__lshift>
   13cbc:	mov	r8, r0
   13cbe:	b.n	138be <_dtoa_r+0x71e>
   13cc0:	ldr	r3, [sp, #24]
   13cc2:	sub.w	r3, r3, r9
   13cc6:	str	r3, [sp, #36]	; 0x24
   13cc8:	b.n	13680 <_dtoa_r+0x4e0>
   13cca:	cmp	r3, #57	; 0x39
   13ccc:	beq.w	13de8 <_dtoa_r+0xc48>
   13cd0:	mov	r9, r7
   13cd2:	adds	r3, #1
   13cd4:	b.n	13c5a <_dtoa_r+0xaba>
   13cd6:	ldr	r2, [sp, #16]
   13cd8:	adds	r2, #1
   13cda:	mov	r7, r6
   13cdc:	str	r2, [sp, #16]
   13cde:	mov	r6, r8
   13ce0:	b.n	137a2 <_dtoa_r+0x602>
   13ce2:	mov	r1, r5
   13ce4:	mov	r0, r4
   13ce6:	bl	f148 <__pow5mult>
   13cea:	mov	r5, r0
   13cec:	b.n	136e4 <_dtoa_r+0x544>
   13cee:	nop
   13cf0:	.word	0x20000910
   13cf4:	.word	0x20000328
   13cf8:	.word	0x20000300
   13cfc:	.word	0x7ff00000
   13d00:	ldr	r3, [pc, #376]	; (13e7c <_dtoa_r+0xcdc>)
   13d02:	vcvt.s32.f64	s11, d6
   13d06:	add.w	ip, r3, r2, lsl #3
   13d0a:	vldr	d3, [ip, #-8]
   13d0e:	vcvt.f64.s32	d7, s11
   13d12:	vsub.f64	d7, d6, d7
   13d16:	vmov	d6, r0, r1
   13d1a:	vmov	r1, s11
   13d1e:	vmul.f64	d3, d3, d6
   13d22:	ldr	r0, [sp, #0]
   13d24:	adds	r1, #48	; 0x30
   13d26:	cmp	r2, #1
   13d28:	strb.w	r1, [r0], #1
   13d2c:	beq.w	13e36 <_dtoa_r+0xc96>
   13d30:	vmov.f64	d4, #36	; 0x41200000  10.0
   13d34:	ldr	r3, [sp, #0]
   13d36:	adds	r1, r3, r2
   13d38:	vmul.f64	d7, d7, d4
   13d3c:	vcvt.s32.f64	s13, d7
   13d40:	vmov	r3, s13
   13d44:	adds	r3, #48	; 0x30
   13d46:	strb.w	r3, [r0], #1
   13d4a:	cmp	r1, r0
   13d4c:	vcvt.f64.s32	d5, s13
   13d50:	vsub.f64	d7, d7, d5
   13d54:	bne.n	13d38 <_dtoa_r+0xb98>
   13d56:	vmov.f64	d6, #96	; 0x3f000000  0.5
   13d5a:	vadd.f64	d5, d3, d6
   13d5e:	vcmpe.f64	d5, d7
   13d62:	vmrs	APSR_nzcv, fpscr
   13d66:	bmi.w	13530 <_dtoa_r+0x390>
   13d6a:	vsub.f64	d6, d6, d3
   13d6e:	vcmpe.f64	d6, d7
   13d72:	vmrs	APSR_nzcv, fpscr
   13d76:	ble.w	13594 <_dtoa_r+0x3f4>
   13d7a:	mov	r9, r1
   13d7c:	subs	r1, #1
   13d7e:	ldrb.w	r3, [r9, #-1]
   13d82:	cmp	r3, #48	; 0x30
   13d84:	beq.n	13d7a <_dtoa_r+0xbda>
   13d86:	adds	r3, r6, #1
   13d88:	str	r3, [sp, #16]
   13d8a:	b.n	13800 <_dtoa_r+0x660>
   13d8c:	ldr	r2, [sp, #48]	; 0x30
   13d8e:	rsb	r2, r2, #54	; 0x36
   13d92:	b.n	13b4a <_dtoa_r+0x9aa>
   13d94:	movs	r0, #2
   13d96:	vmov.f64	d6, d8
   13d9a:	b.w	1342e <_dtoa_r+0x28e>
   13d9e:	cmp.w	r9, #0
   13da2:	beq.w	13b5a <_dtoa_r+0x9ba>
   13da6:	ldr	r2, [sp, #44]	; 0x2c
   13da8:	cmp	r2, #0
   13daa:	ble.w	13594 <_dtoa_r+0x3f4>
   13dae:	vmov.f64	d4, #36	; 0x41200000  10.0
   13db2:	vmul.f64	d6, d6, d4
   13db6:	adds	r0, #1
   13db8:	vmov	s15, r0
   13dbc:	ldr	r3, [sp, #16]
   13dbe:	vcvt.f64.s32	d5, s15
   13dc2:	vmov.f64	d7, #28	; 0x40e00000  7.0
   13dc6:	vfma.f64	d7, d6, d5
   13dca:	vmov	ip, s15
   13dce:	vmov	r0, r1, d7
   13dd2:	subs	r6, r3, #1
   13dd4:	sub.w	r1, ip, #54525952	; 0x3400000
   13dd8:	b.w	1346a <_dtoa_r+0x2ca>
   13ddc:	ldr	r3, [sp, #16]
   13dde:	adds	r3, #1
   13de0:	str	r3, [sp, #16]
   13de2:	movs	r3, #49	; 0x31
   13de4:	b.w	1354a <_dtoa_r+0x3aa>
   13de8:	ldr	r3, [sp, #16]
   13dea:	mov	fp, r7
   13dec:	adds	r3, #1
   13dee:	str	r3, [sp, #16]
   13df0:	movs	r3, #57	; 0x39
   13df2:	mov	r7, r6
   13df4:	strb.w	r3, [fp], #1
   13df8:	mov	r6, r8
   13dfa:	b.n	137c0 <_dtoa_r+0x620>
   13dfc:	mov.w	sl, #0
   13e00:	mov	r6, sl
   13e02:	b.n	13aac <_dtoa_r+0x90c>
   13e04:	str	r2, [sp, #32]
   13e06:	b.n	13700 <_dtoa_r+0x560>
   13e08:	adds	r3, r6, #1
   13e0a:	str	r3, [sp, #16]
   13e0c:	mov	r9, r1
   13e0e:	b.n	13800 <_dtoa_r+0x660>
   13e10:	bne.w	13c58 <_dtoa_r+0xab8>
   13e14:	lsls	r2, r3, #31
   13e16:	bpl.w	13c58 <_dtoa_r+0xab8>
   13e1a:	b.n	13c4e <_dtoa_r+0xaae>
   13e1c:	cmp	r3, #57	; 0x39
   13e1e:	beq.n	13de8 <_dtoa_r+0xc48>
   13e20:	cmp.w	r9, #0
   13e24:	bgt.w	13c54 <_dtoa_r+0xab4>
   13e28:	b.n	13c58 <_dtoa_r+0xab8>
   13e2a:	ldr	r3, [sp, #4]
   13e2c:	cmp	r3, #2
   13e2e:	bgt.w	13a82 <_dtoa_r+0x8e2>
   13e32:	str	r7, [sp, #16]
   13e34:	b.n	139ac <_dtoa_r+0x80c>
   13e36:	mov	r1, r0
   13e38:	b.n	13d56 <_dtoa_r+0xbb6>
   13e3a:	ldr	r3, [sp, #4]
   13e3c:	cmp	r3, #2
   13e3e:	bgt.w	13a82 <_dtoa_r+0x8e2>
   13e42:	ldr.w	r9, [sp, #44]	; 0x2c
   13e46:	str	r7, [sp, #16]
   13e48:	b.n	138a2 <_dtoa_r+0x702>
   13e4a:	movs	r0, #2
   13e4c:	b.w	1342e <_dtoa_r+0x28e>
   13e50:	ldr	r3, [pc, #44]	; (13e80 <_dtoa_r+0xce0>)
   13e52:	ldr	r0, [pc, #48]	; (13e84 <_dtoa_r+0xce4>)
   13e54:	movs	r2, #0
   13e56:	movw	r1, #431	; 0x1af
   13e5a:	bl	12fc0 <__assert_func>
   13e5e:	ldr	r3, [pc, #32]	; (13e80 <_dtoa_r+0xce0>)
   13e60:	ldr	r0, [pc, #32]	; (13e84 <_dtoa_r+0xce4>)
   13e62:	mov	r2, r7
   13e64:	movw	r1, #751	; 0x2ef
   13e68:	bl	12fc0 <__assert_func>
   13e6c:	ldr	r3, [pc, #24]	; (13e88 <_dtoa_r+0xce8>)
   13e6e:	str	r3, [sp, #0]
   13e70:	b.w	13218 <_dtoa_r+0x78>
   13e74:	ldr	r3, [sp, #8]
   13e76:	str	r3, [sp, #32]
   13e78:	b.n	1386a <_dtoa_r+0x6ca>
   13e7a:	nop
   13e7c:	.word	0x20000328
   13e80:	.word	0x20000624
   13e84:	.word	0x20000914
   13e88:	.word	0x20000904

00013e8c <_strtoul_l.constprop.0>:
   13e8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13e90:	mov	r7, r0
   13e92:	ldr	r0, [pc, #304]	; (13fc4 <_strtoul_l.constprop.0+0x138>)
   13e94:	mov	r6, r1
   13e96:	mov	r5, r6
   13e98:	ldrb.w	lr, [r6], #1
   13e9c:	ldrb.w	ip, [r0, lr]
   13ea0:	ands.w	ip, ip, #8
   13ea4:	bne.n	13e96 <_strtoul_l.constprop.0+0xa>
   13ea6:	cmp.w	lr, #45	; 0x2d
   13eaa:	beq.n	13f62 <_strtoul_l.constprop.0+0xd6>
   13eac:	cmp.w	lr, #43	; 0x2b
   13eb0:	ittte	eq
   13eb2:	ldrbeq.w	lr, [r6]
   13eb6:	moveq	r4, ip
   13eb8:	addeq	r6, r5, #2
   13eba:	movne	r4, ip
   13ebc:	cbz	r3, 13ed6 <_strtoul_l.constprop.0+0x4a>
   13ebe:	cmp	r3, #16
   13ec0:	beq.n	13f6c <_strtoul_l.constprop.0+0xe0>
   13ec2:	mov.w	r8, #4294967295
   13ec6:	udiv	r8, r8, r3
   13eca:	mul.w	sl, r3, r8
   13ece:	mvn.w	sl, sl
   13ed2:	mov	r9, r3
   13ed4:	b.n	13ee8 <_strtoul_l.constprop.0+0x5c>
   13ed6:	cmp.w	lr, #48	; 0x30
   13eda:	beq.n	13f92 <_strtoul_l.constprop.0+0x106>
   13edc:	movs	r3, #10
   13ede:	ldr.w	r8, [pc, #232]	; 13fc8 <_strtoul_l.constprop.0+0x13c>
   13ee2:	mov.w	sl, #5
   13ee6:	mov	r9, r3
   13ee8:	movs	r5, #0
   13eea:	mov	r0, r5
   13eec:	b.n	13efa <_strtoul_l.constprop.0+0x6e>
   13eee:	beq.n	13f4a <_strtoul_l.constprop.0+0xbe>
   13ef0:	mla	r0, r9, r0, ip
   13ef4:	movs	r5, #1
   13ef6:	ldrb.w	lr, [r6], #1
   13efa:	sub.w	ip, lr, #48	; 0x30
   13efe:	cmp.w	ip, #9
   13f02:	bls.n	13f12 <_strtoul_l.constprop.0+0x86>
   13f04:	sub.w	ip, lr, #65	; 0x41
   13f08:	cmp.w	ip, #25
   13f0c:	bhi.n	13f26 <_strtoul_l.constprop.0+0x9a>
   13f0e:	sub.w	ip, lr, #55	; 0x37
   13f12:	cmp	r3, ip
   13f14:	ble.n	13f38 <_strtoul_l.constprop.0+0xac>
   13f16:	cmp.w	r5, #4294967295
   13f1a:	beq.n	13ef6 <_strtoul_l.constprop.0+0x6a>
   13f1c:	cmp	r0, r8
   13f1e:	bls.n	13eee <_strtoul_l.constprop.0+0x62>
   13f20:	mov.w	r5, #4294967295
   13f24:	b.n	13ef6 <_strtoul_l.constprop.0+0x6a>
   13f26:	sub.w	ip, lr, #97	; 0x61
   13f2a:	cmp.w	ip, #25
   13f2e:	bhi.n	13f38 <_strtoul_l.constprop.0+0xac>
   13f30:	sub.w	ip, lr, #87	; 0x57
   13f34:	cmp	r3, ip
   13f36:	bgt.n	13f16 <_strtoul_l.constprop.0+0x8a>
   13f38:	adds	r3, r5, #1
   13f3a:	beq.n	13f54 <_strtoul_l.constprop.0+0xc8>
   13f3c:	cbz	r4, 13f40 <_strtoul_l.constprop.0+0xb4>
   13f3e:	negs	r0, r0
   13f40:	cbz	r2, 13f46 <_strtoul_l.constprop.0+0xba>
   13f42:	cbnz	r5, 13f5e <_strtoul_l.constprop.0+0xd2>
   13f44:	str	r1, [r2, #0]
   13f46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13f4a:	cmp	ip, sl
   13f4c:	ble.n	13ef0 <_strtoul_l.constprop.0+0x64>
   13f4e:	mov.w	r5, #4294967295
   13f52:	b.n	13ef6 <_strtoul_l.constprop.0+0x6a>
   13f54:	movs	r3, #34	; 0x22
   13f56:	str	r3, [r7, #0]
   13f58:	mov	r0, r5
   13f5a:	cmp	r2, #0
   13f5c:	beq.n	13f46 <_strtoul_l.constprop.0+0xba>
   13f5e:	subs	r1, r6, #1
   13f60:	b.n	13f44 <_strtoul_l.constprop.0+0xb8>
   13f62:	ldrb.w	lr, [r6]
   13f66:	movs	r4, #1
   13f68:	adds	r6, r5, #2
   13f6a:	b.n	13ebc <_strtoul_l.constprop.0+0x30>
   13f6c:	cmp.w	lr, #48	; 0x30
   13f70:	bne.n	13fb6 <_strtoul_l.constprop.0+0x12a>
   13f72:	ldrb	r0, [r6, #0]
   13f74:	and.w	r0, r0, #223	; 0xdf
   13f78:	cmp	r0, #88	; 0x58
   13f7a:	bne.n	13faa <_strtoul_l.constprop.0+0x11e>
   13f7c:	mov.w	r9, #16
   13f80:	ldrb.w	lr, [r6, #1]
   13f84:	mov.w	sl, #15
   13f88:	adds	r6, #2
   13f8a:	mvn.w	r8, #4026531840	; 0xf0000000
   13f8e:	mov	r3, r9
   13f90:	b.n	13ee8 <_strtoul_l.constprop.0+0x5c>
   13f92:	ldrb	r3, [r6, #0]
   13f94:	and.w	r3, r3, #223	; 0xdf
   13f98:	cmp	r3, #88	; 0x58
   13f9a:	beq.n	13f7c <_strtoul_l.constprop.0+0xf0>
   13f9c:	movs	r3, #8
   13f9e:	mov.w	sl, #7
   13fa2:	mvn.w	r8, #3758096384	; 0xe0000000
   13fa6:	mov	r9, r3
   13fa8:	b.n	13ee8 <_strtoul_l.constprop.0+0x5c>
   13faa:	mov	r9, r3
   13fac:	mvn.w	r8, #4026531840	; 0xf0000000
   13fb0:	mov.w	sl, #15
   13fb4:	b.n	13ee8 <_strtoul_l.constprop.0+0x5c>
   13fb6:	mov.w	sl, #15
   13fba:	mvn.w	r8, #4026531840	; 0xf0000000
   13fbe:	mov	r9, r3
   13fc0:	b.n	13ee8 <_strtoul_l.constprop.0+0x5c>
   13fc2:	nop
   13fc4:	.word	0x20000801
   13fc8:	.word	0x19999999

00013fcc <_strtoul_r>:
   13fcc:	b.w	13e8c <_strtoul_l.constprop.0>

00013fd0 <_strtoll_l.constprop.0>:
   13fd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fd4:	sub	sp, #20
   13fd6:	mov	r7, r3
   13fd8:	ldr	r3, [pc, #348]	; (14138 <_strtoll_l.constprop.0+0x168>)
   13fda:	str	r0, [sp, #12]
   13fdc:	mov	sl, r1
   13fde:	str	r2, [sp, #0]
   13fe0:	mov	r5, r1
   13fe2:	mov	r2, r5
   13fe4:	ldrb.w	r4, [r5], #1
   13fe8:	ldrb	r6, [r3, r4]
   13fea:	ands.w	r6, r6, #8
   13fee:	bne.n	13fe2 <_strtoll_l.constprop.0+0x12>
   13ff0:	cmp	r4, #45	; 0x2d
   13ff2:	beq.n	140e0 <_strtoll_l.constprop.0+0x110>
   13ff4:	cmp	r4, #43	; 0x2b
   13ff6:	ittet	eq
   13ff8:	ldrbeq	r4, [r5, #0]
   13ffa:	streq	r6, [sp, #8]
   13ffc:	strne	r6, [sp, #8]
   13ffe:	addeq	r5, r2, #2
   14000:	mov.w	r6, #4294967295
   14004:	mvn.w	fp, #2147483648	; 0x80000000
   14008:	cbz	r7, 14016 <_strtoll_l.constprop.0+0x46>
   1400a:	cmp	r7, #16
   1400c:	beq.n	140ee <_strtoll_l.constprop.0+0x11e>
   1400e:	mov	r8, r7
   14010:	mov.w	r9, r7, asr #31
   14014:	b.n	14022 <_strtoll_l.constprop.0+0x52>
   14016:	cmp	r4, #48	; 0x30
   14018:	beq.n	14104 <_strtoll_l.constprop.0+0x134>
   1401a:	mov.w	r8, #10
   1401e:	mov	r9, r7
   14020:	mov	r7, r8
   14022:	mov	r2, r8
   14024:	mov	r3, r9
   14026:	mov	r0, r6
   14028:	mov	r1, fp
   1402a:	bl	b7a4 <__aeabi_uldivmod>
   1402e:	movs	r3, #0
   14030:	str	r2, [sp, #4]
   14032:	mov	ip, r0
   14034:	mov	r2, r1
   14036:	mov	r0, r3
   14038:	mov	r1, r3
   1403a:	b.n	14060 <_strtoll_l.constprop.0+0x90>
   1403c:	cmp	r2, r1
   1403e:	it	eq
   14040:	cmpeq	ip, r0
   14042:	beq.n	140c0 <_strtoll_l.constprop.0+0xf0>
   14044:	mul.w	r3, r0, r9
   14048:	mla	r3, r8, r1, r3
   1404c:	umull	r0, r1, r0, r8
   14050:	add	r3, r1
   14052:	adds.w	r0, lr, r0
   14056:	adc.w	r1, r3, lr, asr #31
   1405a:	movs	r3, #1
   1405c:	ldrb.w	r4, [r5], #1
   14060:	sub.w	lr, r4, #48	; 0x30
   14064:	cmp.w	lr, #9
   14068:	bls.n	14078 <_strtoll_l.constprop.0+0xa8>
   1406a:	sub.w	lr, r4, #65	; 0x41
   1406e:	cmp.w	lr, #25
   14072:	bhi.n	1408e <_strtoll_l.constprop.0+0xbe>
   14074:	sub.w	lr, r4, #55	; 0x37
   14078:	cmp	r7, lr
   1407a:	ble.n	140a0 <_strtoll_l.constprop.0+0xd0>
   1407c:	adds	r4, r3, #1
   1407e:	beq.n	1405c <_strtoll_l.constprop.0+0x8c>
   14080:	cmp	ip, r0
   14082:	sbcs.w	r3, r2, r1
   14086:	bcs.n	1403c <_strtoll_l.constprop.0+0x6c>
   14088:	mov.w	r3, #4294967295
   1408c:	b.n	1405c <_strtoll_l.constprop.0+0x8c>
   1408e:	sub.w	lr, r4, #97	; 0x61
   14092:	cmp.w	lr, #25
   14096:	bhi.n	140a0 <_strtoll_l.constprop.0+0xd0>
   14098:	sub.w	lr, r4, #87	; 0x57
   1409c:	cmp	r7, lr
   1409e:	bgt.n	1407c <_strtoll_l.constprop.0+0xac>
   140a0:	adds	r2, r3, #1
   140a2:	beq.n	140cc <_strtoll_l.constprop.0+0xfc>
   140a4:	ldr	r2, [sp, #8]
   140a6:	cbz	r2, 140ae <_strtoll_l.constprop.0+0xde>
   140a8:	negs	r0, r0
   140aa:	sbc.w	r1, r1, r1, lsl #1
   140ae:	ldr	r2, [sp, #0]
   140b0:	cbz	r2, 140ba <_strtoll_l.constprop.0+0xea>
   140b2:	cbnz	r3, 1411e <_strtoll_l.constprop.0+0x14e>
   140b4:	ldr	r3, [sp, #0]
   140b6:	str.w	sl, [r3]
   140ba:	add	sp, #20
   140bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140c0:	ldr	r3, [sp, #4]
   140c2:	cmp	r3, lr
   140c4:	bge.n	14044 <_strtoll_l.constprop.0+0x74>
   140c6:	mov.w	r3, #4294967295
   140ca:	b.n	1405c <_strtoll_l.constprop.0+0x8c>
   140cc:	ldr	r2, [sp, #12]
   140ce:	movs	r3, #34	; 0x22
   140d0:	str	r3, [r2, #0]
   140d2:	ldr	r3, [sp, #0]
   140d4:	cbz	r3, 14124 <_strtoll_l.constprop.0+0x154>
   140d6:	add.w	sl, r5, #4294967295
   140da:	mov	r0, r6
   140dc:	mov	r1, fp
   140de:	b.n	140b4 <_strtoll_l.constprop.0+0xe4>
   140e0:	movs	r3, #1
   140e2:	ldrb	r4, [r5, #0]
   140e4:	str	r3, [sp, #8]
   140e6:	adds	r5, r2, #2
   140e8:	mov.w	fp, #2147483648	; 0x80000000
   140ec:	b.n	14008 <_strtoll_l.constprop.0+0x38>
   140ee:	cmp	r4, #48	; 0x30
   140f0:	bne.n	140fc <_strtoll_l.constprop.0+0x12c>
   140f2:	ldrb	r3, [r5, #0]
   140f4:	and.w	r3, r3, #223	; 0xdf
   140f8:	cmp	r3, #88	; 0x58
   140fa:	beq.n	1410e <_strtoll_l.constprop.0+0x13e>
   140fc:	mov	r8, r7
   140fe:	mov.w	r9, #0
   14102:	b.n	14022 <_strtoll_l.constprop.0+0x52>
   14104:	ldrb	r3, [r5, #0]
   14106:	and.w	r3, r3, #223	; 0xdf
   1410a:	cmp	r3, #88	; 0x58
   1410c:	bne.n	1412e <_strtoll_l.constprop.0+0x15e>
   1410e:	mov.w	r8, #16
   14112:	ldrb	r4, [r5, #1]
   14114:	mov.w	r9, #0
   14118:	adds	r5, #2
   1411a:	mov	r7, r8
   1411c:	b.n	14022 <_strtoll_l.constprop.0+0x52>
   1411e:	mov	r6, r0
   14120:	mov	fp, r1
   14122:	b.n	140d6 <_strtoll_l.constprop.0+0x106>
   14124:	mov	r0, r6
   14126:	mov	r1, fp
   14128:	add	sp, #20
   1412a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412e:	mov.w	r8, #8
   14132:	mov	r9, r7
   14134:	mov	r7, r8
   14136:	b.n	14022 <_strtoll_l.constprop.0+0x52>
   14138:	.word	0x20000801

0001413c <_strtoll_r>:
   1413c:	b.w	13fd0 <_strtoll_l.constprop.0>

00014140 <_strtoull_l.constprop.0>:
   14140:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14144:	sub	sp, #20
   14146:	mov	fp, r1
   14148:	str	r2, [sp, #4]
   1414a:	ldr	r2, [pc, #392]	; (142d4 <_strtoull_l.constprop.0+0x194>)
   1414c:	str	r0, [sp, #12]
   1414e:	mov	r6, r3
   14150:	mov	r5, r1
   14152:	mov	r1, r5
   14154:	ldrb.w	r4, [r5], #1
   14158:	ldrb	r3, [r2, r4]
   1415a:	ands.w	r3, r3, #8
   1415e:	bne.n	14152 <_strtoull_l.constprop.0+0x12>
   14160:	cmp	r4, #45	; 0x2d
   14162:	beq.w	1426a <_strtoull_l.constprop.0+0x12a>
   14166:	cmp	r4, #43	; 0x2b
   14168:	ittte	eq
   1416a:	ldrbeq	r4, [r5, #0]
   1416c:	streq	r3, [sp, #8]
   1416e:	addeq	r5, r1, #2
   14170:	strne	r3, [sp, #8]
   14172:	cbz	r6, 141a4 <_strtoull_l.constprop.0+0x64>
   14174:	cmp	r6, #16
   14176:	beq.n	14274 <_strtoull_l.constprop.0+0x134>
   14178:	mov.w	sl, r6, asr #31
   1417c:	mov	r2, r6
   1417e:	mov	r3, sl
   14180:	mov.w	r0, #4294967295
   14184:	mov.w	r1, #4294967295
   14188:	bl	b7a4 <__aeabi_uldivmod>
   1418c:	mov	r2, r6
   1418e:	mov	r7, r0
   14190:	mov	r8, r1
   14192:	mov	r3, sl
   14194:	mov.w	r0, #4294967295
   14198:	mov.w	r1, #4294967295
   1419c:	mov	r9, r6
   1419e:	bl	b7a4 <__aeabi_uldivmod>
   141a2:	b.n	141ba <_strtoull_l.constprop.0+0x7a>
   141a4:	cmp	r4, #48	; 0x30
   141a6:	beq.n	1429c <_strtoull_l.constprop.0+0x15c>
   141a8:	mov.w	r9, #10
   141ac:	ldr.w	r8, [pc, #296]	; 142d8 <_strtoull_l.constprop.0+0x198>
   141b0:	mov	sl, r6
   141b2:	movs	r2, #5
   141b4:	mov.w	r7, #2576980377	; 0x99999999
   141b8:	mov	r6, r9
   141ba:	mov.w	ip, #0
   141be:	mov	r0, ip
   141c0:	mov	r1, ip
   141c2:	b.n	141e8 <_strtoull_l.constprop.0+0xa8>
   141c4:	cmp	r1, r8
   141c6:	it	eq
   141c8:	cmpeq	r0, r7
   141ca:	beq.n	1424a <_strtoull_l.constprop.0+0x10a>
   141cc:	mul.w	r4, r0, sl
   141d0:	mla	r1, r9, r1, r4
   141d4:	umull	r0, r4, r0, r9
   141d8:	add	r1, r4
   141da:	adds	r0, r3, r0
   141dc:	adc.w	r1, r1, r3, asr #31
   141e0:	mov.w	ip, #1
   141e4:	ldrb.w	r4, [r5], #1
   141e8:	sub.w	r3, r4, #48	; 0x30
   141ec:	cmp	r3, #9
   141ee:	bls.n	141fc <_strtoull_l.constprop.0+0xbc>
   141f0:	sub.w	r3, r4, #65	; 0x41
   141f4:	cmp	r3, #25
   141f6:	bhi.n	14214 <_strtoull_l.constprop.0+0xd4>
   141f8:	sub.w	r3, r4, #55	; 0x37
   141fc:	cmp	r6, r3
   141fe:	ble.n	14224 <_strtoull_l.constprop.0+0xe4>
   14200:	cmp.w	ip, #4294967295
   14204:	beq.n	141e4 <_strtoull_l.constprop.0+0xa4>
   14206:	cmp	r7, r0
   14208:	sbcs.w	r4, r8, r1
   1420c:	bcs.n	141c4 <_strtoull_l.constprop.0+0x84>
   1420e:	mov.w	ip, #4294967295
   14212:	b.n	141e4 <_strtoull_l.constprop.0+0xa4>
   14214:	sub.w	r3, r4, #97	; 0x61
   14218:	cmp	r3, #25
   1421a:	bhi.n	14224 <_strtoull_l.constprop.0+0xe4>
   1421c:	sub.w	r3, r4, #87	; 0x57
   14220:	cmp	r6, r3
   14222:	bgt.n	14200 <_strtoull_l.constprop.0+0xc0>
   14224:	cmp.w	ip, #4294967295
   14228:	beq.n	14254 <_strtoull_l.constprop.0+0x114>
   1422a:	ldr	r3, [sp, #8]
   1422c:	cbz	r3, 14234 <_strtoull_l.constprop.0+0xf4>
   1422e:	negs	r0, r0
   14230:	sbc.w	r1, r1, r1, lsl #1
   14234:	ldr	r3, [sp, #4]
   14236:	cbz	r3, 14244 <_strtoull_l.constprop.0+0x104>
   14238:	cmp.w	ip, #0
   1423c:	bne.n	14264 <_strtoull_l.constprop.0+0x124>
   1423e:	ldr	r3, [sp, #4]
   14240:	str.w	fp, [r3]
   14244:	add	sp, #20
   14246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1424a:	cmp	r3, r2
   1424c:	ble.n	141cc <_strtoull_l.constprop.0+0x8c>
   1424e:	mov.w	ip, #4294967295
   14252:	b.n	141e4 <_strtoull_l.constprop.0+0xa4>
   14254:	ldr	r2, [sp, #12]
   14256:	movs	r3, #34	; 0x22
   14258:	str	r3, [r2, #0]
   1425a:	ldr	r3, [sp, #4]
   1425c:	mov	r0, ip
   1425e:	mov	r1, ip
   14260:	cmp	r3, #0
   14262:	beq.n	14244 <_strtoull_l.constprop.0+0x104>
   14264:	add.w	fp, r5, #4294967295
   14268:	b.n	1423e <_strtoull_l.constprop.0+0xfe>
   1426a:	movs	r3, #1
   1426c:	ldrb	r4, [r5, #0]
   1426e:	str	r3, [sp, #8]
   14270:	adds	r5, r1, #2
   14272:	b.n	14172 <_strtoull_l.constprop.0+0x32>
   14274:	cmp	r4, #48	; 0x30
   14276:	bne.n	142c0 <_strtoull_l.constprop.0+0x180>
   14278:	ldrb	r3, [r5, #0]
   1427a:	and.w	r3, r3, #223	; 0xdf
   1427e:	cmp	r3, #88	; 0x58
   14280:	bne.n	142ba <_strtoull_l.constprop.0+0x17a>
   14282:	mov.w	r9, #16
   14286:	ldrb	r4, [r5, #1]
   14288:	movs	r2, #15
   1428a:	adds	r5, #2
   1428c:	mov.w	r7, #4294967295
   14290:	mvn.w	r8, #4026531840	; 0xf0000000
   14294:	mov.w	sl, #0
   14298:	mov	r6, r9
   1429a:	b.n	141ba <_strtoull_l.constprop.0+0x7a>
   1429c:	ldrb	r3, [r5, #0]
   1429e:	and.w	r3, r3, #223	; 0xdf
   142a2:	cmp	r3, #88	; 0x58
   142a4:	beq.n	14282 <_strtoull_l.constprop.0+0x142>
   142a6:	mov.w	r9, #8
   142aa:	mov	sl, r6
   142ac:	movs	r2, #7
   142ae:	mov.w	r7, #4294967295
   142b2:	mvn.w	r8, #3758096384	; 0xe0000000
   142b6:	mov	r6, r9
   142b8:	b.n	141ba <_strtoull_l.constprop.0+0x7a>
   142ba:	mov.w	sl, #0
   142be:	b.n	1417c <_strtoull_l.constprop.0+0x3c>
   142c0:	movs	r2, #15
   142c2:	mov.w	r7, #4294967295
   142c6:	mvn.w	r8, #4026531840	; 0xf0000000
   142ca:	mov	r9, r6
   142cc:	mov.w	sl, #0
   142d0:	b.n	141ba <_strtoull_l.constprop.0+0x7a>
   142d2:	nop
   142d4:	.word	0x20000801
   142d8:	.word	0x19999999

000142dc <_strtoull_r>:
   142dc:	b.w	14140 <_strtoull_l.constprop.0>

000142e0 <_mbrtowc_r>:
   142e0:	push	{r4, r5, r6, lr}
   142e2:	sub	sp, #8
   142e4:	mov	r4, r0
   142e6:	ldr	r5, [sp, #24]
   142e8:	cbz	r5, 14300 <_mbrtowc_r+0x20>
   142ea:	cbz	r2, 14308 <_mbrtowc_r+0x28>
   142ec:	ldr	r0, [pc, #60]	; (1432c <_mbrtowc_r+0x4c>)
   142ee:	str	r5, [sp, #0]
   142f0:	ldr.w	r6, [r0, #228]	; 0xe4
   142f4:	mov	r0, r4
   142f6:	blx	r6
   142f8:	adds	r3, r0, #1
   142fa:	beq.n	1431e <_mbrtowc_r+0x3e>
   142fc:	add	sp, #8
   142fe:	pop	{r4, r5, r6, pc}
   14300:	add.w	r5, r0, #244	; 0xf4
   14304:	cmp	r2, #0
   14306:	bne.n	142ec <_mbrtowc_r+0xc>
   14308:	ldr	r3, [pc, #32]	; (1432c <_mbrtowc_r+0x4c>)
   1430a:	str	r5, [sp, #0]
   1430c:	ldr.w	r6, [r3, #228]	; 0xe4
   14310:	mov	r1, r2
   14312:	movs	r3, #1
   14314:	ldr	r2, [pc, #24]	; (14330 <_mbrtowc_r+0x50>)
   14316:	mov	r0, r4
   14318:	blx	r6
   1431a:	adds	r3, r0, #1
   1431c:	bne.n	142fc <_mbrtowc_r+0x1c>
   1431e:	movs	r2, #0
   14320:	movs	r3, #138	; 0x8a
   14322:	str	r2, [r5, #0]
   14324:	str	r3, [r4, #0]
   14326:	add	sp, #8
   14328:	pop	{r4, r5, r6, pc}
   1432a:	nop
   1432c:	.word	0x20008964
   14330:	.word	0x200005f0

00014334 <_wcrtomb_r>:
   14334:	push	{r4, r5, r6, lr}
   14336:	mov	r5, r0
   14338:	sub	sp, #16
   1433a:	cbz	r3, 14354 <_wcrtomb_r+0x20>
   1433c:	mov	r4, r3
   1433e:	cbz	r1, 1435c <_wcrtomb_r+0x28>
   14340:	ldr	r3, [pc, #56]	; (1437c <_wcrtomb_r+0x48>)
   14342:	mov	r0, r5
   14344:	ldr.w	r6, [r3, #224]	; 0xe0
   14348:	mov	r3, r4
   1434a:	blx	r6
   1434c:	adds	r3, r0, #1
   1434e:	beq.n	14370 <_wcrtomb_r+0x3c>
   14350:	add	sp, #16
   14352:	pop	{r4, r5, r6, pc}
   14354:	add.w	r4, r0, #260	; 0x104
   14358:	cmp	r1, #0
   1435a:	bne.n	14340 <_wcrtomb_r+0xc>
   1435c:	ldr	r2, [pc, #28]	; (1437c <_wcrtomb_r+0x48>)
   1435e:	mov	r3, r4
   14360:	ldr.w	r6, [r2, #224]	; 0xe0
   14364:	mov	r0, r5
   14366:	mov	r2, r1
   14368:	add	r1, sp, #4
   1436a:	blx	r6
   1436c:	adds	r3, r0, #1
   1436e:	bne.n	14350 <_wcrtomb_r+0x1c>
   14370:	movs	r2, #0
   14372:	movs	r3, #138	; 0x8a
   14374:	str	r2, [r4, #0]
   14376:	str	r3, [r5, #0]
   14378:	add	sp, #16
   1437a:	pop	{r4, r5, r6, pc}
   1437c:	.word	0x20008964

00014380 <_wcsrtombs_r>:
   14380:	push	{r4, lr}
   14382:	sub	sp, #8
   14384:	ldr	r4, [sp, #16]
   14386:	strd	r3, r4, [sp]
   1438a:	mov.w	r3, #4294967295
   1438e:	bl	15ed0 <_wcsnrtombs_r>
   14392:	add	sp, #8
   14394:	pop	{r4, pc}
   14396:	nop

00014398 <iswspace>:
   14398:	movs	r1, #0
   1439a:	b.w	143a0 <iswspace_l>
   1439e:	nop

000143a0 <iswspace_l>:
   143a0:	push	{r4, lr}
   143a2:	bl	144fc <_jp2uc_l>
   143a6:	mov	r4, r0
   143a8:	bl	15ef4 <category>
   143ac:	sub.w	r3, r0, #26
   143b0:	uxtb	r3, r3
   143b2:	cmp	r3, #2
   143b4:	bls.n	143c4 <iswspace_l+0x24>
   143b6:	sub.w	r0, r4, #9
   143ba:	cmp	r0, #4
   143bc:	ite	hi
   143be:	movhi	r0, #0
   143c0:	movls	r0, #1
   143c2:	pop	{r4, pc}
   143c4:	movs	r0, #1
   143c6:	pop	{r4, pc}

000143c8 <__jp2uc>:
   143c8:	cmp	r1, #2
   143ca:	beq.n	14432 <__jp2uc+0x6a>
   143cc:	cmp	r1, #3
   143ce:	ubfx	r3, r0, #8, #8
   143d2:	ittte	ne
   143d4:	subne.w	r2, r0, #128	; 0x80
   143d8:	eorne.w	r3, r3, #128	; 0x80
   143dc:	uxtbne	r2, r2
   143de:	uxtbeq	r2, r0
   143e0:	add.w	r1, r3, #80	; 0x50
   143e4:	uxtb	r1, r1
   143e6:	cmp	r1, #31
   143e8:	bhi.n	143f8 <__jp2uc+0x30>
   143ea:	movw	r1, #53203	; 0xcfd3
   143ee:	cmp	r0, r1
   143f0:	bls.n	144c6 <__jp2uc+0xfe>
   143f2:	mov.w	r0, #4294967295
   143f6:	bx	lr
   143f8:	add.w	r1, r3, #48	; 0x30
   143fc:	uxtb	r1, r1
   143fe:	cmp	r1, #36	; 0x24
   14400:	bhi.n	14420 <__jp2uc+0x58>
   14402:	movw	r1, #62630	; 0xf4a6
   14406:	cmp	r0, r1
   14408:	bhi.n	143f2 <__jp2uc+0x2a>
   1440a:	subs	r3, #208	; 0xd0
   1440c:	rsb	r3, r3, r3, lsl #7
   14410:	sub.w	r0, r2, #161	; 0xa1
   14414:	add.w	r0, r0, r3, lsl #1
   14418:	ldr	r2, [pc, #192]	; (144dc <__jp2uc+0x114>)
   1441a:	ldrh.w	r0, [r2, r0, lsl #1]
   1441e:	bx	lr
   14420:	subs	r3, #161	; 0xa1
   14422:	cmp	r3, #7
   14424:	bhi.n	143f2 <__jp2uc+0x2a>
   14426:	tbb	[pc, r3]
   1442a:	.short	0x3e48
   1442c:	.word	0x25292e34
   14430:	.short	0x1921
   14432:	uxtb	r2, r0
   14434:	cmp	r2, #158	; 0x9e
   14436:	ubfx	r1, r0, #8, #8
   1443a:	bls.n	14454 <__jp2uc+0x8c>
   1443c:	adds	r2, #35	; 0x23
   1443e:	uxtb	r2, r2
   14440:	movs	r3, #128	; 0x80
   14442:	cmp	r1, #159	; 0x9f
   14444:	ite	ls
   14446:	subls	r1, #112	; 0x70
   14448:	addhi	r1, #80	; 0x50
   1444a:	add.w	r3, r3, r1, lsl #1
   1444e:	and.w	r3, r3, #255	; 0xff
   14452:	b.n	143e0 <__jp2uc+0x18>
   14454:	subs	r2, #126	; 0x7e
   14456:	uxtb	r2, r2
   14458:	movs	r3, #127	; 0x7f
   1445a:	b.n	14442 <__jp2uc+0x7a>
   1445c:	cmp	r2, #192	; 0xc0
   1445e:	bhi.n	143f2 <__jp2uc+0x2a>
   14460:	ldr	r3, [pc, #124]	; (144e0 <__jp2uc+0x118>)
   14462:	sub.w	r0, r2, #161	; 0xa1
   14466:	ldrh.w	r0, [r3, r0, lsl #1]
   1446a:	bx	lr
   1446c:	cmp	r2, #241	; 0xf1
   1446e:	bhi.n	143f2 <__jp2uc+0x2a>
   14470:	ldr	r3, [pc, #112]	; (144e4 <__jp2uc+0x11c>)
   14472:	b.n	144a8 <__jp2uc+0xe0>
   14474:	cmp	r2, #216	; 0xd8
   14476:	bhi.n	143f2 <__jp2uc+0x2a>
   14478:	ldr	r3, [pc, #108]	; (144e8 <__jp2uc+0x120>)
   1447a:	b.n	144a8 <__jp2uc+0xe0>
   1447c:	cmp	r2, #246	; 0xf6
   1447e:	bhi.n	143f2 <__jp2uc+0x2a>
   14480:	add.w	r0, r2, #12288	; 0x3000
   14484:	bx	lr
   14486:	cmp	r2, #243	; 0xf3
   14488:	bhi.n	143f2 <__jp2uc+0x2a>
   1448a:	add.w	r0, r2, #12160	; 0x2f80
   1448e:	adds	r0, #32
   14490:	bx	lr
   14492:	ldr	r3, [pc, #88]	; (144ec <__jp2uc+0x124>)
   14494:	add	r3, r2
   14496:	ldrb.w	r3, [r3, #-161]
   1449a:	cmp	r3, #0
   1449c:	beq.n	143f2 <__jp2uc+0x2a>
   1449e:	add.w	r0, r2, #65024	; 0xfe00
   144a2:	adds	r0, #96	; 0x60
   144a4:	bx	lr
   144a6:	ldr	r3, [pc, #72]	; (144f0 <__jp2uc+0x128>)
   144a8:	sub.w	r0, r2, #161	; 0xa1
   144ac:	ldrh.w	r0, [r3, r0, lsl #1]
   144b0:	cmp	r0, #0
   144b2:	it	eq
   144b4:	moveq.w	r0, #4294967295
   144b8:	bx	lr
   144ba:	ldr	r3, [pc, #56]	; (144f4 <__jp2uc+0x12c>)
   144bc:	sub.w	r0, r2, #161	; 0xa1
   144c0:	ldrh.w	r0, [r3, r0, lsl #1]
   144c4:	bx	lr
   144c6:	subs	r3, #176	; 0xb0
   144c8:	rsb	r3, r3, r3, lsl #7
   144cc:	sub.w	r0, r2, #161	; 0xa1
   144d0:	add.w	r0, r0, r3, lsl #1
   144d4:	ldr	r2, [pc, #32]	; (144f8 <__jp2uc+0x130>)
   144d6:	ldrh.w	r0, [r2, r0, lsl #1]
   144da:	bx	lr
   144dc:	.word	0x2000599c
   144e0:	.word	0x20000cc4
   144e4:	.word	0x20000c20
   144e8:	.word	0x20000bb0
   144ec:	.word	0x20000b54
   144f0:	.word	0x20000a98
   144f4:	.word	0x200009dc
   144f8:	.word	0x20000d04

000144fc <_jp2uc_l>:
   144fc:	push	{r3, r4, r5, lr}
   144fe:	mov	r5, r0
   14500:	cbz	r1, 14532 <_jp2uc_l+0x36>
   14502:	add.w	r4, r1, #298	; 0x12a
   14506:	ldr	r1, [pc, #72]	; (14550 <_jp2uc_l+0x54>)
   14508:	mov	r0, r4
   1450a:	bl	dc88 <strcmp>
   1450e:	cbnz	r0, 1451c <_jp2uc_l+0x20>
   14510:	mov	r0, r5
   14512:	movs	r1, #1
   14514:	ldmia.w	sp!, {r3, r4, r5, lr}
   14518:	b.w	143c8 <__jp2uc>
   1451c:	ldr	r1, [pc, #52]	; (14554 <_jp2uc_l+0x58>)
   1451e:	mov	r0, r4
   14520:	bl	dc88 <strcmp>
   14524:	cbnz	r0, 14536 <_jp2uc_l+0x3a>
   14526:	mov	r0, r5
   14528:	movs	r1, #2
   1452a:	ldmia.w	sp!, {r3, r4, r5, lr}
   1452e:	b.w	143c8 <__jp2uc>
   14532:	ldr	r4, [pc, #36]	; (14558 <_jp2uc_l+0x5c>)
   14534:	b.n	14506 <_jp2uc_l+0xa>
   14536:	ldr	r1, [pc, #36]	; (1455c <_jp2uc_l+0x60>)
   14538:	mov	r0, r4
   1453a:	bl	dc88 <strcmp>
   1453e:	cbnz	r0, 1454c <_jp2uc_l+0x50>
   14540:	mov	r0, r5
   14542:	movs	r1, #3
   14544:	ldmia.w	sp!, {r3, r4, r5, lr}
   14548:	b.w	143c8 <__jp2uc>
   1454c:	mov	r0, r5
   1454e:	pop	{r3, r4, r5, pc}
   14550:	.word	0x20000970
   14554:	.word	0x20000974
   14558:	.word	0x20008a8e
   1455c:	.word	0x2000097c

00014560 <fiprintf>:
   14560:	push	{r1, r2, r3}
   14562:	push	{r4, lr}
   14564:	sub	sp, #12
   14566:	add	r3, sp, #20
   14568:	ldr	r4, [pc, #24]	; (14584 <fiprintf+0x24>)
   1456a:	ldr.w	r2, [r3], #4
   1456e:	str	r3, [sp, #4]
   14570:	mov	r1, r0
   14572:	ldr	r0, [r4, #0]
   14574:	bl	14870 <_vfiprintf_r>
   14578:	add	sp, #12
   1457a:	ldmia.w	sp!, {r4, lr}
   1457e:	add	sp, #12
   14580:	bx	lr
   14582:	nop
   14584:	.word	0x20008eec

00014588 <__ssprint_r>:
   14588:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1458c:	ldr	r3, [r2, #8]
   1458e:	ldr	r7, [r2, #0]
   14590:	sub	sp, #12
   14592:	mov	sl, r2
   14594:	cmp	r3, #0
   14596:	beq.n	1467a <__ssprint_r+0xf2>
   14598:	mov	r9, r0
   1459a:	ldr	r2, [r1, #8]
   1459c:	ldr	r0, [r1, #0]
   1459e:	mov	r4, r1
   145a0:	adds	r7, #8
   145a2:	b.n	1462c <__ssprint_r+0xa4>
   145a4:	ldrh	r3, [r4, #12]
   145a6:	tst.w	r3, #1152	; 0x480
   145aa:	beq.n	1460a <__ssprint_r+0x82>
   145ac:	ldrd	r1, r6, [r4, #16]
   145b0:	sub.w	r8, r0, r1
   145b4:	add.w	r6, r6, r6, lsl #1
   145b8:	add.w	r6, r6, r6, lsr #31
   145bc:	add.w	r0, r8, #1
   145c0:	asrs	r6, r6, #1
   145c2:	add	r0, r5
   145c4:	cmp	r0, r6
   145c6:	mov	r2, r6
   145c8:	itt	hi
   145ca:	movhi	r6, r0
   145cc:	movhi	r2, r6
   145ce:	lsls	r3, r3, #21
   145d0:	bpl.n	14642 <__ssprint_r+0xba>
   145d2:	mov	r1, r2
   145d4:	mov	r0, r9
   145d6:	bl	bac0 <_malloc_r>
   145da:	str	r0, [sp, #4]
   145dc:	cmp	r0, #0
   145de:	beq.n	14656 <__ssprint_r+0xce>
   145e0:	mov	r2, r8
   145e2:	ldr	r1, [r4, #16]
   145e4:	bl	9470 <memcpy>
   145e8:	ldrh	r2, [r4, #12]
   145ea:	ldr	r3, [sp, #4]
   145ec:	bic.w	r2, r2, #1152	; 0x480
   145f0:	orr.w	r2, r2, #128	; 0x80
   145f4:	strh	r2, [r4, #12]
   145f6:	sub.w	r2, r6, r8
   145fa:	add.w	r0, r3, r8
   145fe:	str	r6, [r4, #20]
   14600:	str	r2, [r4, #8]
   14602:	str	r3, [r4, #16]
   14604:	str	r0, [r4, #0]
   14606:	mov	r6, r5
   14608:	mov	r8, r5
   1460a:	mov	r2, r8
   1460c:	mov	r1, fp
   1460e:	bl	d8a8 <memmove>
   14612:	ldr.w	r3, [sl, #8]
   14616:	ldr	r2, [r4, #8]
   14618:	ldr	r0, [r4, #0]
   1461a:	subs	r2, r2, r6
   1461c:	add	r0, r8
   1461e:	subs	r3, r3, r5
   14620:	str	r2, [r4, #8]
   14622:	str	r0, [r4, #0]
   14624:	str.w	r3, [sl, #8]
   14628:	cbz	r3, 1467a <__ssprint_r+0xf2>
   1462a:	adds	r7, #8
   1462c:	ldrd	fp, r5, [r7, #-8]
   14630:	cmp	r5, #0
   14632:	beq.n	1462a <__ssprint_r+0xa2>
   14634:	cmp	r2, r5
   14636:	mov	r6, r2
   14638:	mov	r8, r2
   1463a:	bls.n	145a4 <__ssprint_r+0x1c>
   1463c:	mov	r6, r5
   1463e:	mov	r8, r5
   14640:	b.n	1460a <__ssprint_r+0x82>
   14642:	mov	r0, r9
   14644:	bl	c050 <_realloc_r>
   14648:	mov	r3, r0
   1464a:	cmp	r0, #0
   1464c:	bne.n	145f6 <__ssprint_r+0x6e>
   1464e:	ldr	r1, [r4, #16]
   14650:	mov	r0, r9
   14652:	bl	e2e4 <_free_r>
   14656:	ldrh	r3, [r4, #12]
   14658:	movs	r2, #12
   1465a:	orr.w	r3, r3, #64	; 0x40
   1465e:	str.w	r2, [r9]
   14662:	mov.w	r0, #4294967295
   14666:	strh	r3, [r4, #12]
   14668:	movs	r2, #0
   1466a:	movs	r3, #0
   1466c:	str.w	r2, [sl, #8]
   14670:	str.w	r3, [sl, #4]
   14674:	add	sp, #12
   14676:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1467a:	movs	r0, #0
   1467c:	movs	r3, #0
   1467e:	str.w	r3, [sl, #4]
   14682:	add	sp, #12
   14684:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014688 <_sungetc_r>:
   14688:	push	{r3, r4, r5, lr}
   1468a:	adds	r3, r1, #1
   1468c:	beq.n	146c4 <_sungetc_r+0x3c>
   1468e:	ldrh	r3, [r2, #12]
   14690:	mov	r4, r2
   14692:	ldr	r2, [r2, #48]	; 0x30
   14694:	bic.w	r3, r3, #32
   14698:	strh	r3, [r4, #12]
   1469a:	uxtb	r5, r1
   1469c:	cbz	r2, 146ca <_sungetc_r+0x42>
   1469e:	ldr	r2, [r4, #4]
   146a0:	ldr	r3, [r4, #52]	; 0x34
   146a2:	cmp	r2, r3
   146a4:	bge.n	146ba <_sungetc_r+0x32>
   146a6:	ldr	r3, [r4, #0]
   146a8:	subs	r2, r3, #1
   146aa:	str	r2, [r4, #0]
   146ac:	strb.w	r5, [r3, #-1]
   146b0:	ldr	r3, [r4, #4]
   146b2:	adds	r3, #1
   146b4:	str	r3, [r4, #4]
   146b6:	mov	r0, r5
   146b8:	pop	{r3, r4, r5, pc}
   146ba:	mov	r1, r4
   146bc:	bl	15b70 <__submore>
   146c0:	cmp	r0, #0
   146c2:	beq.n	146a6 <_sungetc_r+0x1e>
   146c4:	mov.w	r5, #4294967295
   146c8:	b.n	146b6 <_sungetc_r+0x2e>
   146ca:	ldr	r3, [r4, #16]
   146cc:	ldr	r2, [r4, #0]
   146ce:	cbz	r3, 146dc <_sungetc_r+0x54>
   146d0:	cmp	r3, r2
   146d2:	bcs.n	146dc <_sungetc_r+0x54>
   146d4:	ldrb.w	r3, [r2, #-1]
   146d8:	cmp	r3, r5
   146da:	beq.n	146fc <_sungetc_r+0x74>
   146dc:	ldr	r1, [r4, #4]
   146de:	str	r1, [r4, #60]	; 0x3c
   146e0:	mov	r3, r4
   146e2:	str	r2, [r4, #56]	; 0x38
   146e4:	add.w	r1, r4, #64	; 0x40
   146e8:	movs	r2, #3
   146ea:	str	r2, [r4, #52]	; 0x34
   146ec:	str	r1, [r4, #48]	; 0x30
   146ee:	strb.w	r5, [r3, #66]!
   146f2:	movs	r2, #1
   146f4:	strd	r3, r2, [r4]
   146f8:	mov	r0, r5
   146fa:	pop	{r3, r4, r5, pc}
   146fc:	ldr	r3, [r4, #4]
   146fe:	subs	r2, #1
   14700:	adds	r3, #1
   14702:	strd	r2, r3, [r4]
   14706:	b.n	146b6 <_sungetc_r+0x2e>

00014708 <__ssrefill_r>:
   14708:	push	{r4, lr}
   1470a:	mov	r4, r1
   1470c:	ldr	r1, [r1, #48]	; 0x30
   1470e:	cbz	r1, 1472c <__ssrefill_r+0x24>
   14710:	add.w	r3, r4, #64	; 0x40
   14714:	cmp	r1, r3
   14716:	beq.n	1471c <__ssrefill_r+0x14>
   14718:	bl	e2e4 <_free_r>
   1471c:	ldr	r3, [r4, #60]	; 0x3c
   1471e:	str	r3, [r4, #4]
   14720:	movs	r0, #0
   14722:	str	r0, [r4, #48]	; 0x30
   14724:	cbz	r3, 1472c <__ssrefill_r+0x24>
   14726:	ldr	r3, [r4, #56]	; 0x38
   14728:	str	r3, [r4, #0]
   1472a:	pop	{r4, pc}
   1472c:	ldrh	r3, [r4, #12]
   1472e:	ldr	r1, [r4, #16]
   14730:	movs	r2, #0
   14732:	orr.w	r3, r3, #32
   14736:	strd	r1, r2, [r4]
   1473a:	strh	r3, [r4, #12]
   1473c:	mov.w	r0, #4294967295
   14740:	pop	{r4, pc}
   14742:	nop

00014744 <_sfread_r>:
   14744:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14748:	sub	sp, #20
   1474a:	strd	r3, r2, [sp, #8]
   1474e:	mul.w	r3, r2, r3
   14752:	ldr	r4, [sp, #56]	; 0x38
   14754:	str	r3, [sp, #4]
   14756:	cbz	r3, 147c2 <_sfread_r+0x7e>
   14758:	ldr.w	sl, [r4, #4]
   1475c:	ldr	r3, [sp, #4]
   1475e:	cmp	r3, sl
   14760:	mov	fp, r1
   14762:	bls.n	147f2 <_sfread_r+0xae>
   14764:	mov	r8, r4
   14766:	ldr	r5, [sp, #4]
   14768:	ldr.w	r1, [r8], #64
   1476c:	mov	r7, r0
   1476e:	movs	r6, #0
   14770:	mov	r2, sl
   14772:	mov	r0, fp
   14774:	bl	9470 <memcpy>
   14778:	ldr	r3, [r4, #0]
   1477a:	ldr	r2, [r4, #48]	; 0x30
   1477c:	add	r3, sl
   1477e:	mov	r9, r5
   14780:	strd	r3, r6, [r4]
   14784:	mov	r1, r2
   14786:	mov	r0, r7
   14788:	add	fp, sl
   1478a:	sub.w	r5, r5, sl
   1478e:	cbz	r2, 147ca <_sfread_r+0x86>
   14790:	cmp	r2, r8
   14792:	beq.n	14798 <_sfread_r+0x54>
   14794:	bl	e2e4 <_free_r>
   14798:	ldr	r3, [r4, #60]	; 0x3c
   1479a:	str	r6, [r4, #48]	; 0x30
   1479c:	str	r3, [r4, #4]
   1479e:	cbz	r3, 147ca <_sfread_r+0x86>
   147a0:	ldr	r1, [r4, #56]	; 0x38
   147a2:	str	r1, [r4, #0]
   147a4:	cmp	r3, r5
   147a6:	mov	sl, r3
   147a8:	bcc.n	14770 <_sfread_r+0x2c>
   147aa:	ldr	r3, [sp, #8]
   147ac:	str	r3, [sp, #4]
   147ae:	mov	r2, r5
   147b0:	mov	r0, fp
   147b2:	bl	9470 <memcpy>
   147b6:	ldrd	r3, r2, [r4]
   147ba:	subs	r2, r2, r5
   147bc:	add	r3, r5
   147be:	strd	r3, r2, [r4]
   147c2:	ldr	r0, [sp, #4]
   147c4:	add	sp, #20
   147c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ca:	ldr	r2, [sp, #4]
   147cc:	ldr	r3, [sp, #12]
   147ce:	add	r2, sl
   147d0:	sub.w	r2, r2, r9
   147d4:	udiv	r3, r2, r3
   147d8:	str	r3, [sp, #4]
   147da:	ldrh	r3, [r4, #12]
   147dc:	ldr	r2, [r4, #16]
   147de:	ldr	r0, [sp, #4]
   147e0:	orr.w	r3, r3, #32
   147e4:	strh	r3, [r4, #12]
   147e6:	movs	r3, #0
   147e8:	strd	r2, r3, [r4]
   147ec:	add	sp, #20
   147ee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147f2:	ldr	r1, [r4, #0]
   147f4:	mov	r5, r3
   147f6:	b.n	147aa <_sfread_r+0x66>

000147f8 <__sprint_r.part.0>:
   147f8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147fc:	ldr	r3, [r1, #100]	; 0x64
   147fe:	lsls	r4, r3, #18
   14800:	mov	r8, r2
   14802:	bpl.n	14860 <__sprint_r.part.0+0x68>
   14804:	ldr	r3, [r2, #8]
   14806:	ldr	r2, [r2, #0]
   14808:	cbz	r3, 1485c <__sprint_r.part.0+0x64>
   1480a:	mov	fp, r1
   1480c:	mov	r6, r0
   1480e:	add.w	r9, r2, #8
   14812:	ldrd	r5, sl, [r9, #-8]
   14816:	movs.w	r7, sl, lsr #2
   1481a:	beq.n	14848 <__sprint_r.part.0+0x50>
   1481c:	subs	r5, #4
   1481e:	movs	r4, #0
   14820:	b.n	14826 <__sprint_r.part.0+0x2e>
   14822:	cmp	r7, r4
   14824:	beq.n	14844 <__sprint_r.part.0+0x4c>
   14826:	ldr.w	r1, [r5, #4]!
   1482a:	mov	r2, fp
   1482c:	mov	r0, r6
   1482e:	bl	15d60 <_fputwc_r>
   14832:	adds	r3, r0, #1
   14834:	add.w	r4, r4, #1
   14838:	bne.n	14822 <__sprint_r.part.0+0x2a>
   1483a:	movs	r3, #0
   1483c:	strd	r3, r3, [r8, #4]
   14840:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14844:	ldr.w	r3, [r8, #8]
   14848:	bic.w	sl, sl, #3
   1484c:	sub.w	r3, r3, sl
   14850:	str.w	r3, [r8, #8]
   14854:	add.w	r9, r9, #8
   14858:	cmp	r3, #0
   1485a:	bne.n	14812 <__sprint_r.part.0+0x1a>
   1485c:	movs	r0, #0
   1485e:	b.n	1483a <__sprint_r.part.0+0x42>
   14860:	bl	1587c <__sfvwrite_r>
   14864:	movs	r3, #0
   14866:	strd	r3, r3, [r8, #4]
   1486a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1486e:	nop

00014870 <_vfiprintf_r>:
   14870:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14874:	vpush	{d8}
   14878:	sub	sp, #276	; 0x114
   1487a:	add.w	sl, sp, #80	; 0x50
   1487e:	mov	fp, r0
   14880:	vmov	s16, r1
   14884:	mov	r6, r2
   14886:	movs	r1, #0
   14888:	movs	r2, #8
   1488a:	mov	r0, sl
   1488c:	mov	r4, r3
   1488e:	str	r3, [sp, #28]
   14890:	bl	942c <memset>
   14894:	cmp.w	fp, #0
   14898:	beq.n	148a4 <_vfiprintf_r+0x34>
   1489a:	ldr.w	r3, [fp, #52]	; 0x34
   1489e:	cmp	r3, #0
   148a0:	beq.w	155e4 <_vfiprintf_r+0xd74>
   148a4:	vmov	r2, s16
   148a8:	ldr	r3, [r2, #100]	; 0x64
   148aa:	lsls	r3, r3, #31
   148ac:	bpl.w	152d6 <_vfiprintf_r+0xa66>
   148b0:	ldrsh.w	r1, [r2, #12]
   148b4:	uxth	r2, r1
   148b6:	lsls	r5, r2, #18
   148b8:	bmi.n	148d2 <_vfiprintf_r+0x62>
   148ba:	vmov	r3, s16
   148be:	orr.w	r1, r1, #8192	; 0x2000
   148c2:	strh	r1, [r3, #12]
   148c4:	ldr	r3, [r3, #100]	; 0x64
   148c6:	uxth	r2, r1
   148c8:	vmov	r1, s16
   148cc:	bic.w	r3, r3, #8192	; 0x2000
   148d0:	str	r3, [r1, #100]	; 0x64
   148d2:	lsls	r0, r2, #28
   148d4:	bpl.w	14ae2 <_vfiprintf_r+0x272>
   148d8:	vmov	r3, s16
   148dc:	ldr	r3, [r3, #16]
   148de:	cmp	r3, #0
   148e0:	beq.w	14ae2 <_vfiprintf_r+0x272>
   148e4:	and.w	r3, r2, #26
   148e8:	cmp	r3, #10
   148ea:	beq.w	14b02 <_vfiprintf_r+0x292>
   148ee:	movs	r3, #0
   148f0:	strd	r3, r3, [sp, #100]	; 0x64
   148f4:	strd	r3, r3, [sp, #52]	; 0x34
   148f8:	add	r2, sp, #108	; 0x6c
   148fa:	str	r3, [sp, #48]	; 0x30
   148fc:	str	r2, [sp, #96]	; 0x60
   148fe:	mov	r9, r2
   14900:	str	r3, [sp, #44]	; 0x2c
   14902:	str	r3, [sp, #20]
   14904:	mov	r8, r6
   14906:	mov	r4, r8
   14908:	ldr	r3, [pc, #672]	; (14bac <_vfiprintf_r+0x33c>)
   1490a:	ldr.w	r5, [r3, #228]	; 0xe4
   1490e:	bl	db3c <__locale_mb_cur_max>
   14912:	mov	r2, r4
   14914:	mov	r3, r0
   14916:	add	r1, sp, #72	; 0x48
   14918:	str.w	sl, [sp]
   1491c:	mov	r0, fp
   1491e:	blx	r5
   14920:	cmp	r0, #0
   14922:	beq.w	14bb0 <_vfiprintf_r+0x340>
   14926:	blt.w	14b9c <_vfiprintf_r+0x32c>
   1492a:	ldr	r2, [sp, #72]	; 0x48
   1492c:	cmp	r2, #37	; 0x25
   1492e:	mov	r3, r0
   14930:	beq.n	14936 <_vfiprintf_r+0xc6>
   14932:	add	r4, r3
   14934:	b.n	14908 <_vfiprintf_r+0x98>
   14936:	subs.w	r6, r4, r8
   1493a:	mov	r5, r0
   1493c:	bne.w	14bb8 <_vfiprintf_r+0x348>
   14940:	movs	r3, #0
   14942:	ldrb	r1, [r4, #1]
   14944:	strb.w	r3, [sp, #67]	; 0x43
   14948:	add.w	r8, r4, #1
   1494c:	str	r3, [sp, #24]
   1494e:	mov.w	r7, #4294967295
   14952:	mov	r6, r3
   14954:	movs	r4, #43	; 0x2b
   14956:	add.w	r8, r8, #1
   1495a:	sub.w	r3, r1, #32
   1495e:	cmp	r3, #90	; 0x5a
   14960:	bhi.w	14c54 <_vfiprintf_r+0x3e4>
   14964:	tbh	[pc, r3, lsl #1]
   14968:	.word	0x017602b5
   1496c:	.word	0x02b00176
   14970:	.word	0x01760176
   14974:	.word	0x006a0176
   14978:	.word	0x01760176
   1497c:	.word	0x028d027d
   14980:	.word	0x02880176
   14984:	.word	0x01760297
   14988:	.word	0x005b0292
   1498c:	.word	0x005b005b
   14990:	.word	0x005b005b
   14994:	.word	0x005b005b
   14998:	.word	0x005b005b
   1499c:	.word	0x01760176
   149a0:	.word	0x01760176
   149a4:	.word	0x01760176
   149a8:	.word	0x01760176
   149ac:	.word	0x025c0176
   149b0:	.word	0x01760084
   149b4:	.word	0x01760176
   149b8:	.word	0x01760176
   149bc:	.word	0x01760176
   149c0:	.word	0x01760176
   149c4:	.word	0x00e80176
   149c8:	.word	0x01760176
   149cc:	.word	0x02330176
   149d0:	.word	0x02da0176
   149d4:	.word	0x01760176
   149d8:	.word	0x0176058b
   149dc:	.word	0x01760176
   149e0:	.word	0x01760176
   149e4:	.word	0x01760176
   149e8:	.word	0x01760176
   149ec:	.word	0x025c0176
   149f0:	.word	0x01760086
   149f4:	.word	0x01760176
   149f8:	.word	0x008602cd
   149fc:	.word	0x0176007f
   14a00:	.word	0x017602c0
   14a04:	.word	0x00ea02fd
   14a08:	.word	0x007f02ed
   14a0c:	.word	0x02330176
   14a10:	.word	0x0569007c
   14a14:	.word	0x01760176
   14a18:	.word	0x0176056b
   14a1c:	.short	0x007c
   14a1e:	sub.w	r3, r1, #48	; 0x30
   14a22:	movs	r2, #0
   14a24:	ldrb.w	r1, [r8], #1
   14a28:	add.w	r2, r2, r2, lsl #2
   14a2c:	add.w	r2, r3, r2, lsl #1
   14a30:	sub.w	r3, r1, #48	; 0x30
   14a34:	cmp	r3, #9
   14a36:	bls.n	14a24 <_vfiprintf_r+0x1b4>
   14a38:	str	r2, [sp, #24]
   14a3a:	b.n	1495a <_vfiprintf_r+0xea>
   14a3c:	mov	r0, fp
   14a3e:	bl	12f3c <_localeconv_r>
   14a42:	ldr	r3, [r0, #4]
   14a44:	str	r3, [sp, #52]	; 0x34
   14a46:	mov	r0, r3
   14a48:	bl	e0c0 <strlen>
   14a4c:	str	r0, [sp, #56]	; 0x38
   14a4e:	mov	r5, r0
   14a50:	mov	r0, fp
   14a52:	bl	12f3c <_localeconv_r>
   14a56:	ldr	r3, [r0, #8]
   14a58:	str	r3, [sp, #44]	; 0x2c
   14a5a:	cmp	r5, #0
   14a5c:	bne.w	1540c <_vfiprintf_r+0xb9c>
   14a60:	ldrb.w	r1, [r8]
   14a64:	b.n	14956 <_vfiprintf_r+0xe6>
   14a66:	ldrb.w	r1, [r8]
   14a6a:	orr.w	r6, r6, #32
   14a6e:	b.n	14956 <_vfiprintf_r+0xe6>
   14a70:	orr.w	r6, r6, #16
   14a74:	lsls	r4, r6, #26
   14a76:	bpl.w	14d96 <_vfiprintf_r+0x526>
   14a7a:	ldr	r3, [sp, #28]
   14a7c:	adds	r3, #7
   14a7e:	bic.w	r3, r3, #7
   14a82:	mov	r2, r3
   14a84:	ldr	r1, [r3, #4]
   14a86:	ldr.w	r3, [r2], #8
   14a8a:	str	r2, [sp, #28]
   14a8c:	mov	r2, r1
   14a8e:	cmp	r1, #0
   14a90:	blt.w	15374 <_vfiprintf_r+0xb04>
   14a94:	adds	r1, r7, #1
   14a96:	beq.w	155de <_vfiprintf_r+0xd6e>
   14a9a:	bic.w	r1, r6, #128	; 0x80
   14a9e:	str	r1, [sp, #12]
   14aa0:	orrs.w	r1, r3, r2
   14aa4:	beq.w	15326 <_vfiprintf_r+0xab6>
   14aa8:	cmp	r3, #10
   14aaa:	sbcs.w	r1, r2, #0
   14aae:	bcs.w	15534 <_vfiprintf_r+0xcc4>
   14ab2:	adds	r3, #48	; 0x30
   14ab4:	strb.w	r3, [sp, #271]	; 0x10f
   14ab8:	ldr	r6, [sp, #12]
   14aba:	movs	r3, #1
   14abc:	str	r3, [sp, #16]
   14abe:	addw	r4, sp, #271	; 0x10f
   14ac2:	ldr	r3, [sp, #16]
   14ac4:	cmp	r3, r7
   14ac6:	it	lt
   14ac8:	movlt	r3, r7
   14aca:	str	r3, [sp, #12]
   14acc:	movs	r3, #0
   14ace:	str	r3, [sp, #32]
   14ad0:	ldrb.w	r3, [sp, #67]	; 0x43
   14ad4:	cmp	r3, #0
   14ad6:	beq.w	14c70 <_vfiprintf_r+0x400>
   14ada:	ldr	r3, [sp, #12]
   14adc:	adds	r3, #1
   14ade:	str	r3, [sp, #12]
   14ae0:	b.n	14c70 <_vfiprintf_r+0x400>
   14ae2:	vmov	r1, s16
   14ae6:	mov	r0, fp
   14ae8:	vmov	r5, s16
   14aec:	bl	15be8 <__swsetup_r>
   14af0:	cmp	r0, #0
   14af2:	bne.w	1579a <_vfiprintf_r+0xf2a>
   14af6:	ldrh	r2, [r5, #12]
   14af8:	and.w	r3, r2, #26
   14afc:	cmp	r3, #10
   14afe:	bne.w	148ee <_vfiprintf_r+0x7e>
   14b02:	vmov	r1, s16
   14b06:	ldrsh.w	r3, [r1, #14]
   14b0a:	cmp	r3, #0
   14b0c:	blt.w	148ee <_vfiprintf_r+0x7e>
   14b10:	ldr	r3, [r1, #100]	; 0x64
   14b12:	lsls	r3, r3, #31
   14b14:	bmi.n	14b1c <_vfiprintf_r+0x2ac>
   14b16:	lsls	r7, r2, #22
   14b18:	bpl.w	15740 <_vfiprintf_r+0xed0>
   14b1c:	vmov	r1, s16
   14b20:	mov	r3, r4
   14b22:	mov	r2, r6
   14b24:	mov	r0, fp
   14b26:	bl	157fc <__sbprintf>
   14b2a:	str	r0, [sp, #20]
   14b2c:	ldr	r0, [sp, #20]
   14b2e:	add	sp, #276	; 0x114
   14b30:	vpop	{d8}
   14b34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b38:	orr.w	r6, r6, #16
   14b3c:	ands.w	r2, r6, #32
   14b40:	beq.w	14db0 <_vfiprintf_r+0x540>
   14b44:	ldr	r3, [sp, #28]
   14b46:	adds	r3, #7
   14b48:	bic.w	r3, r3, #7
   14b4c:	mov	r1, r3
   14b4e:	ldr	r2, [r3, #4]
   14b50:	ldr.w	r3, [r1], #8
   14b54:	str	r1, [sp, #28]
   14b56:	bic.w	r1, r6, #1024	; 0x400
   14b5a:	str	r1, [sp, #12]
   14b5c:	movs	r1, #0
   14b5e:	movs	r0, #0
   14b60:	strb.w	r0, [sp, #67]	; 0x43
   14b64:	adds	r0, r7, #1
   14b66:	beq.w	14f8a <_vfiprintf_r+0x71a>
   14b6a:	ldr	r0, [sp, #12]
   14b6c:	bic.w	r6, r0, #128	; 0x80
   14b70:	orrs.w	r0, r3, r2
   14b74:	bne.w	14f88 <_vfiprintf_r+0x718>
   14b78:	cmp	r7, #0
   14b7a:	bne.w	155ee <_vfiprintf_r+0xd7e>
   14b7e:	cmp	r1, #0
   14b80:	bne.w	1532e <_vfiprintf_r+0xabe>
   14b84:	ldr	r3, [sp, #12]
   14b86:	ands.w	r3, r3, #1
   14b8a:	str	r3, [sp, #16]
   14b8c:	beq.w	153b2 <_vfiprintf_r+0xb42>
   14b90:	movs	r3, #48	; 0x30
   14b92:	strb.w	r3, [sp, #271]	; 0x10f
   14b96:	addw	r4, sp, #271	; 0x10f
   14b9a:	b.n	14ac2 <_vfiprintf_r+0x252>
   14b9c:	movs	r2, #8
   14b9e:	movs	r1, #0
   14ba0:	mov	r0, sl
   14ba2:	bl	942c <memset>
   14ba6:	movs	r3, #1
   14ba8:	add	r4, r3
   14baa:	b.n	14908 <_vfiprintf_r+0x98>
   14bac:	.word	0x20008964
   14bb0:	subs.w	r6, r4, r8
   14bb4:	mov	r5, r0
   14bb6:	beq.n	14bf0 <_vfiprintf_r+0x380>
   14bb8:	ldr	r3, [sp, #100]	; 0x64
   14bba:	ldr	r2, [sp, #104]	; 0x68
   14bbc:	adds	r3, #1
   14bbe:	add	r2, r6
   14bc0:	cmp	r3, #7
   14bc2:	strd	r8, r6, [r9]
   14bc6:	str	r2, [sp, #104]	; 0x68
   14bc8:	str	r3, [sp, #100]	; 0x64
   14bca:	ble.n	14c06 <_vfiprintf_r+0x396>
   14bcc:	cmp	r2, #0
   14bce:	beq.w	1531e <_vfiprintf_r+0xaae>
   14bd2:	vmov	r1, s16
   14bd6:	add	r2, sp, #96	; 0x60
   14bd8:	mov	r0, fp
   14bda:	bl	147f8 <__sprint_r.part.0>
   14bde:	cbnz	r0, 14c2a <_vfiprintf_r+0x3ba>
   14be0:	add.w	r9, sp, #108	; 0x6c
   14be4:	ldr	r3, [sp, #20]
   14be6:	add	r3, r6
   14be8:	str	r3, [sp, #20]
   14bea:	cmp	r5, #0
   14bec:	bne.w	14940 <_vfiprintf_r+0xd0>
   14bf0:	ldr	r3, [sp, #104]	; 0x68
   14bf2:	cmp	r3, #0
   14bf4:	bne.w	1577a <_vfiprintf_r+0xf0a>
   14bf8:	vmov	r3, s16
   14bfc:	movs	r2, #0
   14bfe:	ldrsh.w	r3, [r3, #12]
   14c02:	str	r2, [sp, #100]	; 0x64
   14c04:	b.n	14c32 <_vfiprintf_r+0x3c2>
   14c06:	add.w	r9, r9, #8
   14c0a:	b.n	14be4 <_vfiprintf_r+0x374>
   14c0c:	vmov	r1, s16
   14c10:	add	r2, sp, #96	; 0x60
   14c12:	mov	r0, fp
   14c14:	bl	147f8 <__sprint_r.part.0>
   14c18:	cmp	r0, #0
   14c1a:	beq.w	14d6a <_vfiprintf_r+0x4fa>
   14c1e:	ldr	r3, [sp, #32]
   14c20:	cbz	r3, 14c2a <_vfiprintf_r+0x3ba>
   14c22:	ldr	r1, [sp, #32]
   14c24:	mov	r0, fp
   14c26:	bl	e2e4 <_free_r>
   14c2a:	vmov	r3, s16
   14c2e:	ldrsh.w	r3, [r3, #12]
   14c32:	vmov	r2, s16
   14c36:	ldr	r2, [r2, #100]	; 0x64
   14c38:	tst.w	r2, #1
   14c3c:	uxth	r2, r3
   14c3e:	beq.w	14d82 <_vfiprintf_r+0x512>
   14c42:	lsls	r0, r2, #25
   14c44:	bmi.w	157ac <_vfiprintf_r+0xf3c>
   14c48:	ldr	r0, [sp, #20]
   14c4a:	add	sp, #276	; 0x114
   14c4c:	vpop	{d8}
   14c50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c54:	cmp	r1, #0
   14c56:	beq.n	14bf0 <_vfiprintf_r+0x380>
   14c58:	movs	r3, #0
   14c5a:	strb.w	r3, [sp, #67]	; 0x43
   14c5e:	movs	r3, #1
   14c60:	strd	r3, r3, [sp, #12]
   14c64:	strb.w	r1, [sp, #172]	; 0xac
   14c68:	add	r4, sp, #172	; 0xac
   14c6a:	movs	r3, #0
   14c6c:	str	r3, [sp, #32]
   14c6e:	mov	r7, r3
   14c70:	ands.w	r3, r6, #2
   14c74:	str	r3, [sp, #36]	; 0x24
   14c76:	beq.n	14c7e <_vfiprintf_r+0x40e>
   14c78:	ldr	r3, [sp, #12]
   14c7a:	adds	r3, #2
   14c7c:	str	r3, [sp, #12]
   14c7e:	ands.w	r3, r6, #132	; 0x84
   14c82:	str	r3, [sp, #40]	; 0x28
   14c84:	bne.n	14c92 <_vfiprintf_r+0x422>
   14c86:	ldr	r3, [sp, #24]
   14c88:	ldr	r2, [sp, #12]
   14c8a:	subs	r5, r3, r2
   14c8c:	cmp	r5, #0
   14c8e:	bgt.w	15188 <_vfiprintf_r+0x918>
   14c92:	ldrd	r0, r3, [sp, #100]	; 0x64
   14c96:	adds	r1, r0, #1
   14c98:	ldrb.w	r2, [sp, #67]	; 0x43
   14c9c:	cbz	r2, 14cc0 <_vfiprintf_r+0x450>
   14c9e:	movs	r2, #1
   14ca0:	adds	r3, #1
   14ca2:	str.w	r2, [r9, #4]
   14ca6:	cmp	r1, #7
   14ca8:	add.w	r2, sp, #67	; 0x43
   14cac:	strd	r1, r3, [sp, #100]	; 0x64
   14cb0:	str.w	r2, [r9]
   14cb4:	bgt.w	1514c <_vfiprintf_r+0x8dc>
   14cb8:	mov	r0, r1
   14cba:	add.w	r9, r9, #8
   14cbe:	adds	r1, #1
   14cc0:	ldr	r2, [sp, #36]	; 0x24
   14cc2:	cbz	r2, 14cfe <_vfiprintf_r+0x48e>
   14cc4:	add	r2, sp, #68	; 0x44
   14cc6:	adds	r3, #2
   14cc8:	str.w	r2, [r9]
   14ccc:	cmp	r1, #7
   14cce:	mov.w	r2, #2
   14cd2:	strd	r1, r3, [sp, #100]	; 0x64
   14cd6:	str.w	r2, [r9, #4]
   14cda:	ble.w	1517e <_vfiprintf_r+0x90e>
   14cde:	cmp	r3, #0
   14ce0:	beq.w	1536a <_vfiprintf_r+0xafa>
   14ce4:	vmov	r1, s16
   14ce8:	add	r2, sp, #96	; 0x60
   14cea:	mov	r0, fp
   14cec:	bl	147f8 <__sprint_r.part.0>
   14cf0:	cmp	r0, #0
   14cf2:	bne.n	14c1e <_vfiprintf_r+0x3ae>
   14cf4:	ldrd	r0, r3, [sp, #100]	; 0x64
   14cf8:	add.w	r9, sp, #108	; 0x6c
   14cfc:	adds	r1, r0, #1
   14cfe:	ldr	r2, [sp, #40]	; 0x28
   14d00:	cmp	r2, #128	; 0x80
   14d02:	beq.w	1500e <_vfiprintf_r+0x79e>
   14d06:	ldr	r2, [sp, #16]
   14d08:	subs	r5, r7, r2
   14d0a:	cmp	r5, #0
   14d0c:	bgt.w	150be <_vfiprintf_r+0x84e>
   14d10:	ldr	r2, [sp, #16]
   14d12:	str.w	r4, [r9]
   14d16:	add	r3, r2
   14d18:	cmp	r1, #7
   14d1a:	strd	r1, r3, [sp, #100]	; 0x64
   14d1e:	str.w	r2, [r9, #4]
   14d22:	ble.w	15002 <_vfiprintf_r+0x792>
   14d26:	cmp	r3, #0
   14d28:	beq.w	15216 <_vfiprintf_r+0x9a6>
   14d2c:	vmov	r1, s16
   14d30:	add	r2, sp, #96	; 0x60
   14d32:	mov	r0, fp
   14d34:	bl	147f8 <__sprint_r.part.0>
   14d38:	cmp	r0, #0
   14d3a:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   14d3e:	ldr	r3, [sp, #104]	; 0x68
   14d40:	add.w	r9, sp, #108	; 0x6c
   14d44:	lsls	r5, r6, #29
   14d46:	bpl.n	14d54 <_vfiprintf_r+0x4e4>
   14d48:	ldr	r2, [sp, #24]
   14d4a:	ldr	r1, [sp, #12]
   14d4c:	subs	r4, r2, r1
   14d4e:	cmp	r4, #0
   14d50:	bgt.w	1522a <_vfiprintf_r+0x9ba>
   14d54:	ldrd	r2, r1, [sp, #20]
   14d58:	ldr	r0, [sp, #12]
   14d5a:	cmp	r1, r0
   14d5c:	ite	ge
   14d5e:	addge	r2, r2, r1
   14d60:	addlt	r2, r2, r0
   14d62:	str	r2, [sp, #20]
   14d64:	cmp	r3, #0
   14d66:	bne.w	14c0c <_vfiprintf_r+0x39c>
   14d6a:	ldr	r1, [sp, #32]
   14d6c:	movs	r3, #0
   14d6e:	str	r3, [sp, #100]	; 0x64
   14d70:	cmp	r1, #0
   14d72:	beq.w	15008 <_vfiprintf_r+0x798>
   14d76:	mov	r0, fp
   14d78:	bl	e2e4 <_free_r>
   14d7c:	add.w	r9, sp, #108	; 0x6c
   14d80:	b.n	14906 <_vfiprintf_r+0x96>
   14d82:	lsls	r4, r3, #22
   14d84:	bmi.w	14c42 <_vfiprintf_r+0x3d2>
   14d88:	vmov	r4, s16
   14d8c:	ldr	r0, [r4, #88]	; 0x58
   14d8e:	bl	dc74 <__retarget_lock_release_recursive>
   14d92:	ldrh	r2, [r4, #12]
   14d94:	b.n	14c42 <_vfiprintf_r+0x3d2>
   14d96:	lsls	r0, r6, #27
   14d98:	ldr	r2, [sp, #28]
   14d9a:	bmi.w	153dc <_vfiprintf_r+0xb6c>
   14d9e:	lsls	r1, r6, #25
   14da0:	bpl.w	153d6 <_vfiprintf_r+0xb66>
   14da4:	ldrsh.w	r3, [r2], #4
   14da8:	str	r2, [sp, #28]
   14daa:	asrs	r2, r3, #31
   14dac:	mov	r1, r2
   14dae:	b.n	14a8e <_vfiprintf_r+0x21e>
   14db0:	ands.w	r3, r6, #16
   14db4:	ldr	r1, [sp, #28]
   14db6:	bne.w	153cc <_vfiprintf_r+0xb5c>
   14dba:	ands.w	r0, r6, #64	; 0x40
   14dbe:	beq.w	153c4 <_vfiprintf_r+0xb54>
   14dc2:	mov	r2, r3
   14dc4:	ldr.w	r3, [r1], #4
   14dc8:	str	r1, [sp, #28]
   14dca:	uxth	r3, r3
   14dcc:	b.n	14b56 <_vfiprintf_r+0x2e6>
   14dce:	ldr	r3, [sp, #28]
   14dd0:	mov	r2, r3
   14dd2:	movs	r3, #0
   14dd4:	strb.w	r3, [sp, #67]	; 0x43
   14dd8:	mov	r3, r2
   14dda:	ldr.w	r4, [r3], #4
   14dde:	str	r3, [sp, #12]
   14de0:	cmp	r4, #0
   14de2:	beq.w	1560a <_vfiprintf_r+0xd9a>
   14de6:	cmp	r1, #83	; 0x53
   14de8:	beq.w	154b6 <_vfiprintf_r+0xc46>
   14dec:	ands.w	r5, r6, #16
   14df0:	bne.w	154b6 <_vfiprintf_r+0xc46>
   14df4:	adds	r3, r7, #1
   14df6:	beq.w	15760 <_vfiprintf_r+0xef0>
   14dfa:	mov	r2, r7
   14dfc:	mov	r1, r5
   14dfe:	mov	r0, r4
   14e00:	bl	e020 <memchr>
   14e04:	str	r0, [sp, #32]
   14e06:	cmp	r0, #0
   14e08:	beq.w	1574a <_vfiprintf_r+0xeda>
   14e0c:	subs	r3, r0, r4
   14e0e:	ldr	r2, [sp, #12]
   14e10:	str	r3, [sp, #16]
   14e12:	bic.w	r3, r3, r3, asr #31
   14e16:	mov	r7, r5
   14e18:	str	r2, [sp, #28]
   14e1a:	str	r3, [sp, #12]
   14e1c:	str	r5, [sp, #32]
   14e1e:	b.n	14ad0 <_vfiprintf_r+0x260>
   14e20:	cmp	r1, #67	; 0x43
   14e22:	beq.n	14e2a <_vfiprintf_r+0x5ba>
   14e24:	lsls	r5, r6, #27
   14e26:	bpl.w	15484 <_vfiprintf_r+0xc14>
   14e2a:	ldr	r5, [sp, #28]
   14e2c:	movs	r2, #8
   14e2e:	movs	r1, #0
   14e30:	add	r0, sp, #88	; 0x58
   14e32:	add	r4, sp, #172	; 0xac
   14e34:	bl	942c <memset>
   14e38:	add	r3, sp, #88	; 0x58
   14e3a:	ldr.w	r2, [r5], #4
   14e3e:	mov	r1, r4
   14e40:	mov	r0, fp
   14e42:	bl	14334 <_wcrtomb_r>
   14e46:	mov	r3, r0
   14e48:	adds	r3, #1
   14e4a:	str	r0, [sp, #16]
   14e4c:	beq.w	157b6 <_vfiprintf_r+0xf46>
   14e50:	ldr	r3, [sp, #16]
   14e52:	str	r5, [sp, #28]
   14e54:	bic.w	r3, r3, r3, asr #31
   14e58:	str	r3, [sp, #12]
   14e5a:	movs	r3, #0
   14e5c:	strb.w	r3, [sp, #67]	; 0x43
   14e60:	b.n	14c6a <_vfiprintf_r+0x3fa>
   14e62:	ldr	r3, [sp, #28]
   14e64:	ldr.w	r2, [r3], #4
   14e68:	str	r2, [sp, #24]
   14e6a:	cmp	r2, #0
   14e6c:	bge.w	153a8 <_vfiprintf_r+0xb38>
   14e70:	ldr	r2, [sp, #24]
   14e72:	negs	r2, r2
   14e74:	strd	r2, r3, [sp, #24]
   14e78:	ldrb.w	r1, [r8]
   14e7c:	orr.w	r6, r6, #4
   14e80:	b.n	14956 <_vfiprintf_r+0xe6>
   14e82:	ldrb.w	r1, [r8]
   14e86:	strb.w	r4, [sp, #67]	; 0x43
   14e8a:	b.n	14956 <_vfiprintf_r+0xe6>
   14e8c:	ldrb.w	r1, [r8]
   14e90:	orr.w	r6, r6, #128	; 0x80
   14e94:	b.n	14956 <_vfiprintf_r+0xe6>
   14e96:	mov	r2, r8
   14e98:	ldrb.w	r1, [r2], #1
   14e9c:	cmp	r1, #42	; 0x2a
   14e9e:	beq.w	157ce <_vfiprintf_r+0xf5e>
   14ea2:	sub.w	r3, r1, #48	; 0x30
   14ea6:	cmp	r3, #9
   14ea8:	mov	r8, r2
   14eaa:	mov.w	r7, #0
   14eae:	bhi.w	1495a <_vfiprintf_r+0xea>
   14eb2:	ldrb.w	r1, [r8], #1
   14eb6:	add.w	r7, r7, r7, lsl #2
   14eba:	add.w	r7, r3, r7, lsl #1
   14ebe:	sub.w	r3, r1, #48	; 0x30
   14ec2:	cmp	r3, #9
   14ec4:	bls.n	14eb2 <_vfiprintf_r+0x642>
   14ec6:	b.n	1495a <_vfiprintf_r+0xea>
   14ec8:	ldrb.w	r1, [r8]
   14ecc:	orr.w	r6, r6, #1
   14ed0:	b.n	14956 <_vfiprintf_r+0xe6>
   14ed2:	ldrb.w	r3, [sp, #67]	; 0x43
   14ed6:	cmp	r3, #0
   14ed8:	bne.w	14a60 <_vfiprintf_r+0x1f0>
   14edc:	movs	r3, #32
   14ede:	ldrb.w	r1, [r8]
   14ee2:	strb.w	r3, [sp, #67]	; 0x43
   14ee6:	b.n	14956 <_vfiprintf_r+0xe6>
   14ee8:	ldrb.w	r1, [r8]
   14eec:	cmp	r1, #108	; 0x6c
   14eee:	ittte	eq
   14ef0:	ldrbeq.w	r1, [r8, #1]
   14ef4:	orreq.w	r6, r6, #32
   14ef8:	addeq.w	r8, r8, #1
   14efc:	orrne.w	r6, r6, #16
   14f00:	b.n	14956 <_vfiprintf_r+0xe6>
   14f02:	ldrb.w	r1, [r8]
   14f06:	cmp	r1, #104	; 0x68
   14f08:	ittte	eq
   14f0a:	ldrbeq.w	r1, [r8, #1]
   14f0e:	orreq.w	r6, r6, #512	; 0x200
   14f12:	addeq.w	r8, r8, #1
   14f16:	orrne.w	r6, r6, #64	; 0x40
   14f1a:	b.n	14956 <_vfiprintf_r+0xe6>
   14f1c:	orr.w	r3, r6, #16
   14f20:	str	r3, [sp, #12]
   14f22:	ldr	r3, [sp, #12]
   14f24:	ands.w	r2, r3, #32
   14f28:	beq.w	15338 <_vfiprintf_r+0xac8>
   14f2c:	ldr	r3, [sp, #28]
   14f2e:	adds	r3, #7
   14f30:	bic.w	r3, r3, #7
   14f34:	mov	r1, r3
   14f36:	ldr	r2, [r3, #4]
   14f38:	ldr.w	r3, [r1], #8
   14f3c:	str	r1, [sp, #28]
   14f3e:	movs	r1, #1
   14f40:	b.n	14b5e <_vfiprintf_r+0x2ee>
   14f42:	ldr	r2, [sp, #28]
   14f44:	orr.w	r3, r6, #2
   14f48:	str	r3, [sp, #12]
   14f4a:	ldr.w	r3, [r2], #4
   14f4e:	str	r2, [sp, #28]
   14f50:	movw	r2, #30768	; 0x7830
   14f54:	strh.w	r2, [sp, #68]	; 0x44
   14f58:	ldr	r2, [pc, #736]	; (1523c <_vfiprintf_r+0x9cc>)
   14f5a:	str	r2, [sp, #48]	; 0x30
   14f5c:	movs	r1, #2
   14f5e:	movs	r2, #0
   14f60:	b.n	14b5e <_vfiprintf_r+0x2ee>
   14f62:	lsls	r7, r6, #26
   14f64:	bmi.w	153f8 <_vfiprintf_r+0xb88>
   14f68:	lsls	r5, r6, #27
   14f6a:	bmi.w	155fa <_vfiprintf_r+0xd8a>
   14f6e:	lsls	r4, r6, #25
   14f70:	bmi.w	1571e <_vfiprintf_r+0xeae>
   14f74:	lsls	r0, r6, #22
   14f76:	bpl.w	155fa <_vfiprintf_r+0xd8a>
   14f7a:	ldr	r3, [sp, #28]
   14f7c:	ldr	r1, [sp, #20]
   14f7e:	ldr.w	r2, [r3], #4
   14f82:	str	r3, [sp, #28]
   14f84:	strb	r1, [r2, #0]
   14f86:	b.n	14906 <_vfiprintf_r+0x96>
   14f88:	str	r6, [sp, #12]
   14f8a:	cmp	r1, #1
   14f8c:	beq.w	14aa8 <_vfiprintf_r+0x238>
   14f90:	cmp	r1, #2
   14f92:	add	r4, sp, #272	; 0x110
   14f94:	bne.n	14fba <_vfiprintf_r+0x74a>
   14f96:	ldr	r0, [sp, #48]	; 0x30
   14f98:	and.w	r1, r3, #15
   14f9c:	lsrs	r3, r3, #4
   14f9e:	ldrb	r1, [r0, r1]
   14fa0:	strb.w	r1, [r4, #-1]!
   14fa4:	orr.w	r3, r3, r2, lsl #28
   14fa8:	lsrs	r2, r2, #4
   14faa:	orrs.w	r1, r3, r2
   14fae:	bne.n	14f98 <_vfiprintf_r+0x728>
   14fb0:	ldr	r6, [sp, #12]
   14fb2:	add	r3, sp, #272	; 0x110
   14fb4:	subs	r3, r3, r4
   14fb6:	str	r3, [sp, #16]
   14fb8:	b.n	14ac2 <_vfiprintf_r+0x252>
   14fba:	and.w	r1, r3, #7
   14fbe:	lsrs	r3, r3, #3
   14fc0:	orr.w	r3, r3, r2, lsl #29
   14fc4:	lsrs	r2, r2, #3
   14fc6:	adds	r1, #48	; 0x30
   14fc8:	orrs.w	r5, r3, r2
   14fcc:	mov	r0, r4
   14fce:	strb.w	r1, [r4, #-1]!
   14fd2:	bne.n	14fba <_vfiprintf_r+0x74a>
   14fd4:	ldr	r6, [sp, #12]
   14fd6:	lsls	r3, r6, #31
   14fd8:	bpl.n	14fb2 <_vfiprintf_r+0x742>
   14fda:	cmp	r1, #48	; 0x30
   14fdc:	beq.n	14fb0 <_vfiprintf_r+0x740>
   14fde:	movs	r3, #48	; 0x30
   14fe0:	subs	r0, #2
   14fe2:	strb.w	r3, [r4, #-1]
   14fe6:	add	r3, sp, #272	; 0x110
   14fe8:	subs	r3, r3, r0
   14fea:	ldr	r6, [sp, #12]
   14fec:	str	r3, [sp, #16]
   14fee:	mov	r4, r0
   14ff0:	b.n	14ac2 <_vfiprintf_r+0x252>
   14ff2:	ldr	r3, [sp, #16]
   14ff4:	str	r4, [sp, #108]	; 0x6c
   14ff6:	movs	r2, #1
   14ff8:	str	r3, [sp, #112]	; 0x70
   14ffa:	str	r3, [sp, #104]	; 0x68
   14ffc:	str	r2, [sp, #100]	; 0x64
   14ffe:	add.w	r9, sp, #108	; 0x6c
   15002:	add.w	r9, r9, #8
   15006:	b.n	14d44 <_vfiprintf_r+0x4d4>
   15008:	add.w	r9, sp, #108	; 0x6c
   1500c:	b.n	14906 <_vfiprintf_r+0x96>
   1500e:	ldr	r2, [sp, #24]
   15010:	ldr	r5, [sp, #12]
   15012:	subs	r5, r2, r5
   15014:	cmp	r5, #0
   15016:	ble.w	14d06 <_vfiprintf_r+0x496>
   1501a:	cmp	r5, #16
   1501c:	ble.w	15796 <_vfiprintf_r+0xf26>
   15020:	str	r4, [sp, #36]	; 0x24
   15022:	vmov	r4, s16
   15026:	b.n	15038 <_vfiprintf_r+0x7c8>
   15028:	add.w	ip, r0, #2
   1502c:	add.w	r9, r9, #8
   15030:	mov	r0, r2
   15032:	subs	r5, #16
   15034:	cmp	r5, #16
   15036:	ble.n	15076 <_vfiprintf_r+0x806>
   15038:	ldr	r1, [pc, #516]	; (15240 <_vfiprintf_r+0x9d0>)
   1503a:	str.w	r1, [r9]
   1503e:	adds	r2, r0, #1
   15040:	adds	r3, #16
   15042:	movs	r1, #16
   15044:	cmp	r2, #7
   15046:	strd	r2, r3, [sp, #100]	; 0x64
   1504a:	str.w	r1, [r9, #4]
   1504e:	ble.n	15028 <_vfiprintf_r+0x7b8>
   15050:	add	r2, sp, #96	; 0x60
   15052:	cmp	r3, #0
   15054:	beq.n	15140 <_vfiprintf_r+0x8d0>
   15056:	mov	r1, r4
   15058:	mov	r0, fp
   1505a:	add.w	r9, sp, #108	; 0x6c
   1505e:	bl	147f8 <__sprint_r.part.0>
   15062:	cmp	r0, #0
   15064:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   15068:	ldrd	r0, r3, [sp, #100]	; 0x64
   1506c:	subs	r5, #16
   1506e:	cmp	r5, #16
   15070:	add.w	ip, r0, #1
   15074:	bgt.n	15038 <_vfiprintf_r+0x7c8>
   15076:	ldr	r4, [sp, #36]	; 0x24
   15078:	ldr	r2, [pc, #452]	; (15240 <_vfiprintf_r+0x9d0>)
   1507a:	str.w	r5, [r9, #4]
   1507e:	add	r3, r5
   15080:	cmp.w	ip, #7
   15084:	strd	ip, r3, [sp, #100]	; 0x64
   15088:	str.w	r2, [r9]
   1508c:	ble.w	153b8 <_vfiprintf_r+0xb48>
   15090:	cmp	r3, #0
   15092:	beq.w	156d4 <_vfiprintf_r+0xe64>
   15096:	vmov	r1, s16
   1509a:	add	r2, sp, #96	; 0x60
   1509c:	mov	r0, fp
   1509e:	bl	147f8 <__sprint_r.part.0>
   150a2:	cmp	r0, #0
   150a4:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   150a8:	ldr	r2, [sp, #16]
   150aa:	ldrd	r0, r3, [sp, #100]	; 0x64
   150ae:	subs	r5, r7, r2
   150b0:	cmp	r5, #0
   150b2:	add.w	r1, r0, #1
   150b6:	add.w	r9, sp, #108	; 0x6c
   150ba:	ble.w	14d10 <_vfiprintf_r+0x4a0>
   150be:	cmp	r5, #16
   150c0:	ble.n	15116 <_vfiprintf_r+0x8a6>
   150c2:	str	r4, [sp, #36]	; 0x24
   150c4:	movs	r7, #16
   150c6:	vmov	r4, s16
   150ca:	b.n	150dc <_vfiprintf_r+0x86c>
   150cc:	add.w	ip, r0, #2
   150d0:	add.w	r9, r9, #8
   150d4:	mov	r0, r2
   150d6:	subs	r5, #16
   150d8:	cmp	r5, #16
   150da:	ble.n	15112 <_vfiprintf_r+0x8a2>
   150dc:	adds	r2, r0, #1
   150de:	ldr	r1, [pc, #352]	; (15240 <_vfiprintf_r+0x9d0>)
   150e0:	adds	r3, #16
   150e2:	cmp	r2, #7
   150e4:	strd	r1, r7, [r9]
   150e8:	strd	r2, r3, [sp, #100]	; 0x64
   150ec:	ble.n	150cc <_vfiprintf_r+0x85c>
   150ee:	add	r2, sp, #96	; 0x60
   150f0:	cbz	r3, 15134 <_vfiprintf_r+0x8c4>
   150f2:	mov	r1, r4
   150f4:	mov	r0, fp
   150f6:	add.w	r9, sp, #108	; 0x6c
   150fa:	bl	147f8 <__sprint_r.part.0>
   150fe:	cmp	r0, #0
   15100:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   15104:	ldrd	r0, r3, [sp, #100]	; 0x64
   15108:	subs	r5, #16
   1510a:	cmp	r5, #16
   1510c:	add.w	ip, r0, #1
   15110:	bgt.n	150dc <_vfiprintf_r+0x86c>
   15112:	ldr	r4, [sp, #36]	; 0x24
   15114:	mov	r1, ip
   15116:	ldr	r2, [pc, #296]	; (15240 <_vfiprintf_r+0x9d0>)
   15118:	str.w	r5, [r9, #4]
   1511c:	add	r3, r5
   1511e:	cmp	r1, #7
   15120:	strd	r1, r3, [sp, #100]	; 0x64
   15124:	str.w	r2, [r9]
   15128:	bgt.w	152fa <_vfiprintf_r+0xa8a>
   1512c:	add.w	r9, r9, #8
   15130:	adds	r1, #1
   15132:	b.n	14d10 <_vfiprintf_r+0x4a0>
   15134:	mov.w	ip, #1
   15138:	mov	r0, r3
   1513a:	add.w	r9, sp, #108	; 0x6c
   1513e:	b.n	150d6 <_vfiprintf_r+0x866>
   15140:	mov.w	ip, #1
   15144:	mov	r0, r3
   15146:	add.w	r9, sp, #108	; 0x6c
   1514a:	b.n	15032 <_vfiprintf_r+0x7c2>
   1514c:	cmp	r3, #0
   1514e:	beq.w	1535a <_vfiprintf_r+0xaea>
   15152:	vmov	r1, s16
   15156:	add	r2, sp, #96	; 0x60
   15158:	mov	r0, fp
   1515a:	bl	147f8 <__sprint_r.part.0>
   1515e:	cmp	r0, #0
   15160:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   15164:	ldrd	r0, r3, [sp, #100]	; 0x64
   15168:	add.w	r9, sp, #108	; 0x6c
   1516c:	adds	r1, r0, #1
   1516e:	b.n	14cc0 <_vfiprintf_r+0x450>
   15170:	movs	r3, #2
   15172:	add	r2, sp, #68	; 0x44
   15174:	str	r3, [sp, #112]	; 0x70
   15176:	str	r2, [sp, #108]	; 0x6c
   15178:	movs	r1, #1
   1517a:	add.w	r9, sp, #108	; 0x6c
   1517e:	mov	r0, r1
   15180:	add.w	r9, r9, #8
   15184:	adds	r1, r0, #1
   15186:	b.n	14cfe <_vfiprintf_r+0x48e>
   15188:	cmp	r5, #16
   1518a:	ble.w	15758 <_vfiprintf_r+0xee8>
   1518e:	ldrd	r1, r3, [sp, #100]	; 0x64
   15192:	str	r4, [sp, #60]	; 0x3c
   15194:	mov	r0, r1
   15196:	vmov	r4, s16
   1519a:	b.n	151ac <_vfiprintf_r+0x93c>
   1519c:	add.w	ip, r0, #2
   151a0:	add.w	r9, r9, #8
   151a4:	mov	r0, r2
   151a6:	subs	r5, #16
   151a8:	cmp	r5, #16
   151aa:	ble.n	151e8 <_vfiprintf_r+0x978>
   151ac:	ldr	r1, [pc, #148]	; (15244 <_vfiprintf_r+0x9d4>)
   151ae:	str.w	r1, [r9]
   151b2:	adds	r2, r0, #1
   151b4:	adds	r3, #16
   151b6:	movs	r1, #16
   151b8:	cmp	r2, #7
   151ba:	strd	r2, r3, [sp, #100]	; 0x64
   151be:	str.w	r1, [r9, #4]
   151c2:	ble.n	1519c <_vfiprintf_r+0x92c>
   151c4:	add	r2, sp, #96	; 0x60
   151c6:	cbz	r3, 1520a <_vfiprintf_r+0x99a>
   151c8:	mov	r1, r4
   151ca:	mov	r0, fp
   151cc:	add.w	r9, sp, #108	; 0x6c
   151d0:	bl	147f8 <__sprint_r.part.0>
   151d4:	cmp	r0, #0
   151d6:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   151da:	ldrd	r0, r3, [sp, #100]	; 0x64
   151de:	subs	r5, #16
   151e0:	cmp	r5, #16
   151e2:	add.w	ip, r0, #1
   151e6:	bgt.n	151ac <_vfiprintf_r+0x93c>
   151e8:	ldr	r4, [sp, #60]	; 0x3c
   151ea:	mov	r0, ip
   151ec:	ldr	r2, [pc, #84]	; (15244 <_vfiprintf_r+0x9d4>)
   151ee:	str.w	r5, [r9, #4]
   151f2:	add	r3, r5
   151f4:	cmp	r0, #7
   151f6:	strd	r0, r3, [sp, #100]	; 0x64
   151fa:	str.w	r2, [r9]
   151fe:	bgt.w	15384 <_vfiprintf_r+0xb14>
   15202:	add.w	r9, r9, #8
   15206:	adds	r1, r0, #1
   15208:	b.n	14c98 <_vfiprintf_r+0x428>
   1520a:	mov	r0, r3
   1520c:	mov.w	ip, #1
   15210:	add.w	r9, sp, #108	; 0x6c
   15214:	b.n	151a6 <_vfiprintf_r+0x936>
   15216:	lsls	r6, r6, #29
   15218:	str	r3, [sp, #100]	; 0x64
   1521a:	bpl.n	152c4 <_vfiprintf_r+0xa54>
   1521c:	ldr	r2, [sp, #24]
   1521e:	ldr	r1, [sp, #12]
   15220:	subs	r4, r2, r1
   15222:	cmp	r4, #0
   15224:	ble.n	152c4 <_vfiprintf_r+0xa54>
   15226:	add.w	r9, sp, #108	; 0x6c
   1522a:	cmp	r4, #16
   1522c:	ble.w	15790 <_vfiprintf_r+0xf20>
   15230:	ldr	r1, [sp, #100]	; 0x64
   15232:	vmov	r6, s16
   15236:	movs	r5, #16
   15238:	b.n	15256 <_vfiprintf_r+0x9e6>
   1523a:	nop
   1523c:	.word	0x200009a8
   15240:	.word	0x20007888
   15244:	.word	0x20002464
   15248:	adds	r0, r1, #2
   1524a:	add.w	r9, r9, #8
   1524e:	mov	r1, r2
   15250:	subs	r4, #16
   15252:	cmp	r4, #16
   15254:	ble.n	1528c <_vfiprintf_r+0xa1c>
   15256:	adds	r2, r1, #1
   15258:	ldr	r0, [pc, #716]	; (15528 <_vfiprintf_r+0xcb8>)
   1525a:	adds	r3, #16
   1525c:	cmp	r2, #7
   1525e:	strd	r0, r5, [r9]
   15262:	strd	r2, r3, [sp, #100]	; 0x64
   15266:	ble.n	15248 <_vfiprintf_r+0x9d8>
   15268:	add	r2, sp, #96	; 0x60
   1526a:	cbz	r3, 152ba <_vfiprintf_r+0xa4a>
   1526c:	mov	r1, r6
   1526e:	mov	r0, fp
   15270:	bl	147f8 <__sprint_r.part.0>
   15274:	cmp	r0, #0
   15276:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   1527a:	ldrd	r1, r3, [sp, #100]	; 0x64
   1527e:	subs	r4, #16
   15280:	cmp	r4, #16
   15282:	add.w	r0, r1, #1
   15286:	add.w	r9, sp, #108	; 0x6c
   1528a:	bgt.n	15256 <_vfiprintf_r+0x9e6>
   1528c:	ldr	r2, [pc, #664]	; (15528 <_vfiprintf_r+0xcb8>)
   1528e:	str.w	r4, [r9, #4]
   15292:	add	r3, r4
   15294:	cmp	r0, #7
   15296:	strd	r0, r3, [sp, #100]	; 0x64
   1529a:	str.w	r2, [r9]
   1529e:	ble.w	14d54 <_vfiprintf_r+0x4e4>
   152a2:	cbz	r3, 152c4 <_vfiprintf_r+0xa54>
   152a4:	vmov	r1, s16
   152a8:	add	r2, sp, #96	; 0x60
   152aa:	mov	r0, fp
   152ac:	bl	147f8 <__sprint_r.part.0>
   152b0:	cmp	r0, #0
   152b2:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   152b6:	ldr	r3, [sp, #104]	; 0x68
   152b8:	b.n	14d54 <_vfiprintf_r+0x4e4>
   152ba:	movs	r0, #1
   152bc:	mov	r1, r3
   152be:	add.w	r9, sp, #108	; 0x6c
   152c2:	b.n	15250 <_vfiprintf_r+0x9e0>
   152c4:	ldrd	r3, r2, [sp, #20]
   152c8:	ldr	r1, [sp, #12]
   152ca:	cmp	r2, r1
   152cc:	ite	ge
   152ce:	addge	r3, r3, r2
   152d0:	addlt	r3, r3, r1
   152d2:	str	r3, [sp, #20]
   152d4:	b.n	14d6a <_vfiprintf_r+0x4fa>
   152d6:	ldrsh.w	r1, [r2, #12]
   152da:	lsls	r7, r1, #22
   152dc:	vmov	r3, s16
   152e0:	uxth	r2, r1
   152e2:	bmi.w	148b6 <_vfiprintf_r+0x46>
   152e6:	vmov	r5, s16
   152ea:	ldr	r0, [r3, #88]	; 0x58
   152ec:	bl	dc70 <__retarget_lock_acquire_recursive>
   152f0:	ldrsh.w	r1, [r5, #12]
   152f4:	uxth	r2, r1
   152f6:	b.w	148b6 <_vfiprintf_r+0x46>
   152fa:	cmp	r3, #0
   152fc:	beq.w	14ff2 <_vfiprintf_r+0x782>
   15300:	vmov	r1, s16
   15304:	add	r2, sp, #96	; 0x60
   15306:	mov	r0, fp
   15308:	bl	147f8 <__sprint_r.part.0>
   1530c:	cmp	r0, #0
   1530e:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   15312:	ldr	r1, [sp, #100]	; 0x64
   15314:	ldr	r3, [sp, #104]	; 0x68
   15316:	adds	r1, #1
   15318:	add.w	r9, sp, #108	; 0x6c
   1531c:	b.n	14d10 <_vfiprintf_r+0x4a0>
   1531e:	str	r2, [sp, #100]	; 0x64
   15320:	add.w	r9, sp, #108	; 0x6c
   15324:	b.n	14be4 <_vfiprintf_r+0x374>
   15326:	cmp	r7, #0
   15328:	bne.w	14ab2 <_vfiprintf_r+0x242>
   1532c:	ldr	r6, [sp, #12]
   1532e:	movs	r7, #0
   15330:	str	r7, [sp, #16]
   15332:	add	r4, sp, #272	; 0x110
   15334:	b.w	14ac2 <_vfiprintf_r+0x252>
   15338:	ldr	r3, [sp, #12]
   1533a:	ands.w	r3, r3, #16
   1533e:	bne.n	153ea <_vfiprintf_r+0xb7a>
   15340:	ldr	r2, [sp, #12]
   15342:	ands.w	r0, r2, #64	; 0x40
   15346:	beq.w	15620 <_vfiprintf_r+0xdb0>
   1534a:	ldr	r1, [sp, #28]
   1534c:	mov	r2, r3
   1534e:	ldr.w	r3, [r1], #4
   15352:	str	r1, [sp, #28]
   15354:	uxth	r3, r3
   15356:	movs	r1, #1
   15358:	b.n	14b5e <_vfiprintf_r+0x2ee>
   1535a:	ldr	r2, [sp, #36]	; 0x24
   1535c:	cmp	r2, #0
   1535e:	bne.n	1542a <_vfiprintf_r+0xbba>
   15360:	mov	r0, r3
   15362:	movs	r1, #1
   15364:	add.w	r9, sp, #108	; 0x6c
   15368:	b.n	14cfe <_vfiprintf_r+0x48e>
   1536a:	movs	r1, #1
   1536c:	mov	r0, r3
   1536e:	add.w	r9, sp, #108	; 0x6c
   15372:	b.n	14cfe <_vfiprintf_r+0x48e>
   15374:	negs	r3, r3
   15376:	sbc.w	r2, r2, r2, lsl #1
   1537a:	str	r6, [sp, #12]
   1537c:	movs	r0, #45	; 0x2d
   1537e:	movs	r1, #1
   15380:	b.w	14b60 <_vfiprintf_r+0x2f0>
   15384:	cmp	r3, #0
   15386:	beq.w	1549a <_vfiprintf_r+0xc2a>
   1538a:	vmov	r1, s16
   1538e:	add	r2, sp, #96	; 0x60
   15390:	mov	r0, fp
   15392:	bl	147f8 <__sprint_r.part.0>
   15396:	cmp	r0, #0
   15398:	bne.w	14c1e <_vfiprintf_r+0x3ae>
   1539c:	ldrd	r0, r3, [sp, #100]	; 0x64
   153a0:	add.w	r9, sp, #108	; 0x6c
   153a4:	adds	r1, r0, #1
   153a6:	b.n	14c98 <_vfiprintf_r+0x428>
   153a8:	ldrb.w	r1, [r8]
   153ac:	str	r3, [sp, #28]
   153ae:	b.w	14956 <_vfiprintf_r+0xe6>
   153b2:	add	r4, sp, #272	; 0x110
   153b4:	b.w	14ac2 <_vfiprintf_r+0x252>
   153b8:	add.w	r9, r9, #8
   153bc:	add.w	r1, ip, #1
   153c0:	mov	r0, ip
   153c2:	b.n	14d06 <_vfiprintf_r+0x496>
   153c4:	ands.w	r2, r6, #512	; 0x200
   153c8:	bne.w	156fa <_vfiprintf_r+0xe8a>
   153cc:	ldr.w	r3, [r1], #4
   153d0:	str	r1, [sp, #28]
   153d2:	b.w	14b56 <_vfiprintf_r+0x2e6>
   153d6:	lsls	r3, r6, #22
   153d8:	bmi.w	156ec <_vfiprintf_r+0xe7c>
   153dc:	ldr.w	r3, [r2], #4
   153e0:	str	r2, [sp, #28]
   153e2:	asrs	r2, r3, #31
   153e4:	mov	r1, r2
   153e6:	b.w	14a8e <_vfiprintf_r+0x21e>
   153ea:	ldr	r1, [sp, #28]
   153ec:	ldr.w	r3, [r1], #4
   153f0:	str	r1, [sp, #28]
   153f2:	movs	r1, #1
   153f4:	b.w	14b5e <_vfiprintf_r+0x2ee>
   153f8:	ldr	r3, [sp, #28]
   153fa:	ldr	r0, [sp, #20]
   153fc:	ldr.w	r1, [r3], #4
   15400:	str	r3, [sp, #28]
   15402:	asrs	r2, r0, #31
   15404:	strd	r0, r2, [r1]
   15408:	b.w	14906 <_vfiprintf_r+0x96>
   1540c:	ldr	r3, [sp, #44]	; 0x2c
   1540e:	cmp	r3, #0
   15410:	beq.w	14a60 <_vfiprintf_r+0x1f0>
   15414:	ldr	r3, [sp, #44]	; 0x2c
   15416:	ldrb	r3, [r3, #0]
   15418:	cmp	r3, #0
   1541a:	beq.w	14a60 <_vfiprintf_r+0x1f0>
   1541e:	ldrb.w	r1, [r8]
   15422:	orr.w	r6, r6, #1024	; 0x400
   15426:	b.w	14956 <_vfiprintf_r+0xe6>
   1542a:	movs	r3, #2
   1542c:	add	r2, sp, #68	; 0x44
   1542e:	str	r3, [sp, #112]	; 0x70
   15430:	str	r2, [sp, #108]	; 0x6c
   15432:	movs	r0, #1
   15434:	add.w	r9, sp, #108	; 0x6c
   15438:	b.n	15180 <_vfiprintf_r+0x910>
   1543a:	str	r6, [sp, #12]
   1543c:	b.n	14f22 <_vfiprintf_r+0x6b2>
   1543e:	ldr	r3, [pc, #236]	; (1552c <_vfiprintf_r+0xcbc>)
   15440:	str	r3, [sp, #48]	; 0x30
   15442:	ands.w	r2, r6, #32
   15446:	beq.n	154fc <_vfiprintf_r+0xc8c>
   15448:	ldr	r3, [sp, #28]
   1544a:	adds	r3, #7
   1544c:	bic.w	r3, r3, #7
   15450:	mov	r0, r3
   15452:	ldr	r2, [r3, #4]
   15454:	ldr.w	r3, [r0], #8
   15458:	str	r0, [sp, #28]
   1545a:	lsls	r4, r6, #31
   1545c:	bpl.n	15472 <_vfiprintf_r+0xc02>
   1545e:	orrs.w	r0, r3, r2
   15462:	beq.n	15472 <_vfiprintf_r+0xc02>
   15464:	strb.w	r1, [sp, #69]	; 0x45
   15468:	movs	r1, #48	; 0x30
   1546a:	orr.w	r6, r6, #2
   1546e:	strb.w	r1, [sp, #68]	; 0x44
   15472:	bic.w	r1, r6, #1024	; 0x400
   15476:	str	r1, [sp, #12]
   15478:	movs	r1, #2
   1547a:	b.w	14b5e <_vfiprintf_r+0x2ee>
   1547e:	ldr	r3, [pc, #176]	; (15530 <_vfiprintf_r+0xcc0>)
   15480:	str	r3, [sp, #48]	; 0x30
   15482:	b.n	15442 <_vfiprintf_r+0xbd2>
   15484:	ldr	r3, [sp, #28]
   15486:	movs	r1, #1
   15488:	ldr.w	r2, [r3], #4
   1548c:	str	r1, [sp, #12]
   1548e:	strb.w	r2, [sp, #172]	; 0xac
   15492:	str	r3, [sp, #28]
   15494:	str	r1, [sp, #16]
   15496:	add	r4, sp, #172	; 0xac
   15498:	b.n	14e5a <_vfiprintf_r+0x5ea>
   1549a:	ldrb.w	r2, [sp, #67]	; 0x43
   1549e:	cmp	r2, #0
   154a0:	bne.w	15708 <_vfiprintf_r+0xe98>
   154a4:	ldr	r2, [sp, #36]	; 0x24
   154a6:	cmp	r2, #0
   154a8:	bne.w	15170 <_vfiprintf_r+0x900>
   154ac:	mov	r0, r3
   154ae:	movs	r1, #1
   154b0:	add.w	r9, sp, #108	; 0x6c
   154b4:	b.n	14d06 <_vfiprintf_r+0x496>
   154b6:	movs	r1, #0
   154b8:	movs	r2, #8
   154ba:	add	r0, sp, #88	; 0x58
   154bc:	str	r4, [sp, #76]	; 0x4c
   154be:	bl	942c <memset>
   154c2:	adds	r1, r7, #1
   154c4:	beq.w	15640 <_vfiprintf_r+0xdd0>
   154c8:	movs	r5, #0
   154ca:	str	r4, [sp, #28]
   154cc:	mov	r4, r5
   154ce:	b.n	154ea <_vfiprintf_r+0xc7a>
   154d0:	add	r1, sp, #172	; 0xac
   154d2:	mov	r0, fp
   154d4:	bl	14334 <_wcrtomb_r>
   154d8:	adds	r2, r0, #1
   154da:	add	r0, r4
   154dc:	beq.w	157b6 <_vfiprintf_r+0xf46>
   154e0:	cmp	r0, r7
   154e2:	bgt.n	154f6 <_vfiprintf_r+0xc86>
   154e4:	beq.w	157c8 <_vfiprintf_r+0xf58>
   154e8:	mov	r4, r0
   154ea:	ldr	r2, [sp, #76]	; 0x4c
   154ec:	ldr	r2, [r2, r5]
   154ee:	add	r3, sp, #88	; 0x58
   154f0:	adds	r5, #4
   154f2:	cmp	r2, #0
   154f4:	bne.n	154d0 <_vfiprintf_r+0xc60>
   154f6:	str	r4, [sp, #16]
   154f8:	ldr	r4, [sp, #28]
   154fa:	b.n	1565c <_vfiprintf_r+0xdec>
   154fc:	ands.w	r3, r6, #16
   15500:	ldr	r0, [sp, #28]
   15502:	bne.n	1551e <_vfiprintf_r+0xcae>
   15504:	ands.w	r4, r6, #64	; 0x40
   15508:	beq.n	15516 <_vfiprintf_r+0xca6>
   1550a:	mov	r2, r3
   1550c:	ldr.w	r3, [r0], #4
   15510:	str	r0, [sp, #28]
   15512:	uxth	r3, r3
   15514:	b.n	1545a <_vfiprintf_r+0xbea>
   15516:	ands.w	r2, r6, #512	; 0x200
   1551a:	bne.w	156e0 <_vfiprintf_r+0xe70>
   1551e:	ldr.w	r3, [r0], #4
   15522:	str	r0, [sp, #28]
   15524:	b.n	1545a <_vfiprintf_r+0xbea>
   15526:	nop
   15528:	.word	0x20002464
   1552c:	.word	0x200009a8
   15530:	.word	0x200009bc
   15534:	ldr	r1, [sp, #12]
   15536:	str	r7, [sp, #16]
   15538:	add	r4, sp, #272	; 0x110
   1553a:	mov	lr, r3
   1553c:	vmov	s17, fp
   15540:	and.w	r6, r1, #1024	; 0x400
   15544:	mov.w	ip, #0
   15548:	mov	r3, r4
   1554a:	b.n	1555a <_vfiprintf_r+0xcea>
   1554c:	cmp.w	lr, #10
   15550:	sbcs.w	r2, r2, #0
   15554:	bcc.n	155ca <_vfiprintf_r+0xd5a>
   15556:	mov	lr, r4
   15558:	mov	r2, r5
   1555a:	ldr	r1, [pc, #664]	; (157f4 <_vfiprintf_r+0xf84>)
   1555c:	adds.w	r0, lr, r2
   15560:	adc.w	r0, r0, #0
   15564:	mov	r7, r1
   15566:	umull	r1, r4, r1, r0
   1556a:	bic.w	r1, r4, #3
   1556e:	add.w	r1, r1, r4, lsr #2
   15572:	subs	r0, r0, r1
   15574:	subs.w	r1, lr, r0
   15578:	mov.w	r5, #3435973836	; 0xcccccccc
   1557c:	sbc.w	r4, r2, #0
   15580:	mul.w	r5, r5, r1
   15584:	mla	r5, r7, r4, r5
   15588:	umull	r4, r1, r1, r7
   1558c:	add	r5, r1
   1558e:	movs	r7, #5
   15590:	and.w	r1, r4, #1
   15594:	umull	r1, fp, r1, r7
   15598:	adds	r1, r1, r0
   1559a:	lsrs	r4, r4, #1
   1559c:	adds	r1, #48	; 0x30
   1559e:	strb.w	r1, [r3, #-1]
   155a2:	orr.w	r4, r4, r5, lsl #31
   155a6:	add.w	ip, ip, #1
   155aa:	subs	r3, #1
   155ac:	lsrs	r5, r5, #1
   155ae:	cmp	r6, #0
   155b0:	beq.n	1554c <_vfiprintf_r+0xcdc>
   155b2:	ldr	r1, [sp, #44]	; 0x2c
   155b4:	ldrb	r1, [r1, #0]
   155b6:	cmp	r1, ip
   155b8:	bne.n	1554c <_vfiprintf_r+0xcdc>
   155ba:	cmp.w	ip, #255	; 0xff
   155be:	beq.n	1554c <_vfiprintf_r+0xcdc>
   155c0:	cmp.w	lr, #10
   155c4:	sbcs.w	r2, r2, #0
   155c8:	bcs.n	156a4 <_vfiprintf_r+0xe34>
   155ca:	mov	r4, r3
   155cc:	add	r3, sp, #272	; 0x110
   155ce:	subs	r3, r3, r4
   155d0:	ldr	r7, [sp, #16]
   155d2:	ldr	r6, [sp, #12]
   155d4:	str	r3, [sp, #16]
   155d6:	vmov	fp, s17
   155da:	b.w	14ac2 <_vfiprintf_r+0x252>
   155de:	str	r6, [sp, #12]
   155e0:	b.w	14aa8 <_vfiprintf_r+0x238>
   155e4:	mov	r0, fp
   155e6:	bl	d530 <__sinit>
   155ea:	b.w	148a4 <_vfiprintf_r+0x34>
   155ee:	cmp	r1, #1
   155f0:	str	r6, [sp, #12]
   155f2:	bne.w	14f90 <_vfiprintf_r+0x720>
   155f6:	b.w	14ab2 <_vfiprintf_r+0x242>
   155fa:	ldr	r3, [sp, #28]
   155fc:	ldr	r1, [sp, #20]
   155fe:	ldr.w	r2, [r3], #4
   15602:	str	r1, [r2, #0]
   15604:	str	r3, [sp, #28]
   15606:	b.w	14906 <_vfiprintf_r+0x96>
   1560a:	cmp	r7, #6
   1560c:	mov	r3, r7
   1560e:	ldr	r2, [sp, #12]
   15610:	ldr	r4, [pc, #484]	; (157f8 <_vfiprintf_r+0xf88>)
   15612:	str	r2, [sp, #28]
   15614:	it	cs
   15616:	movcs	r3, #6
   15618:	str	r3, [sp, #16]
   1561a:	str	r3, [sp, #12]
   1561c:	b.w	14c6a <_vfiprintf_r+0x3fa>
   15620:	ldr	r3, [sp, #12]
   15622:	ldr	r1, [sp, #28]
   15624:	ands.w	r2, r3, #512	; 0x200
   15628:	ite	ne
   1562a:	ldrne.w	r3, [r1], #4
   1562e:	ldreq.w	r3, [r1], #4
   15632:	str	r1, [sp, #28]
   15634:	itt	ne
   15636:	movne	r2, r0
   15638:	uxtbne	r3, r3
   1563a:	movs	r1, #1
   1563c:	b.w	14b5e <_vfiprintf_r+0x2ee>
   15640:	add	r3, sp, #88	; 0x58
   15642:	str	r3, [sp, #0]
   15644:	movs	r3, #0
   15646:	mov	r1, r3
   15648:	add	r2, sp, #76	; 0x4c
   1564a:	mov	r0, fp
   1564c:	bl	14380 <_wcsrtombs_r>
   15650:	mov	r3, r0
   15652:	adds	r3, #1
   15654:	str	r0, [sp, #16]
   15656:	beq.w	157b6 <_vfiprintf_r+0xf46>
   1565a:	str	r4, [sp, #76]	; 0x4c
   1565c:	ldr	r3, [sp, #16]
   1565e:	cmp	r3, #0
   15660:	beq.n	156c4 <_vfiprintf_r+0xe54>
   15662:	cmp	r3, #99	; 0x63
   15664:	bgt.n	1572e <_vfiprintf_r+0xebe>
   15666:	movs	r3, #0
   15668:	str	r3, [sp, #32]
   1566a:	add	r4, sp, #172	; 0xac
   1566c:	movs	r2, #8
   1566e:	movs	r1, #0
   15670:	add	r0, sp, #88	; 0x58
   15672:	bl	942c <memset>
   15676:	ldr	r5, [sp, #16]
   15678:	add	r3, sp, #88	; 0x58
   1567a:	str	r3, [sp, #0]
   1567c:	add	r2, sp, #76	; 0x4c
   1567e:	mov	r3, r5
   15680:	mov	r1, r4
   15682:	mov	r0, fp
   15684:	bl	14380 <_wcsrtombs_r>
   15688:	cmp	r5, r0
   1568a:	bne.w	157e4 <_vfiprintf_r+0xf74>
   1568e:	ldr	r3, [sp, #12]
   15690:	ldr	r2, [sp, #16]
   15692:	str	r3, [sp, #28]
   15694:	movs	r3, #0
   15696:	strb	r3, [r4, r2]
   15698:	mov	r7, r3
   1569a:	bic.w	r3, r2, r2, asr #31
   1569e:	str	r3, [sp, #12]
   156a0:	b.w	14ad0 <_vfiprintf_r+0x260>
   156a4:	ldr	r2, [sp, #56]	; 0x38
   156a6:	ldr	r1, [sp, #52]	; 0x34
   156a8:	subs	r3, r3, r2
   156aa:	mov	r0, r3
   156ac:	str	r3, [sp, #32]
   156ae:	bl	dad8 <strncpy>
   156b2:	ldr	r1, [sp, #44]	; 0x2c
   156b4:	ldr	r3, [sp, #32]
   156b6:	ldrb	r2, [r1, #1]
   156b8:	cbz	r2, 156be <_vfiprintf_r+0xe4e>
   156ba:	adds	r1, #1
   156bc:	str	r1, [sp, #44]	; 0x2c
   156be:	mov.w	ip, #0
   156c2:	b.n	15556 <_vfiprintf_r+0xce6>
   156c4:	ldr	r3, [sp, #12]
   156c6:	str	r3, [sp, #28]
   156c8:	ldr	r3, [sp, #16]
   156ca:	str	r3, [sp, #12]
   156cc:	mov	r7, r3
   156ce:	str	r3, [sp, #32]
   156d0:	b.w	14ad0 <_vfiprintf_r+0x260>
   156d4:	movs	r1, #1
   156d6:	mov	r0, r3
   156d8:	add.w	r9, sp, #108	; 0x6c
   156dc:	b.w	14d06 <_vfiprintf_r+0x496>
   156e0:	ldr.w	r3, [r0], #4
   156e4:	str	r0, [sp, #28]
   156e6:	mov	r2, r4
   156e8:	uxtb	r3, r3
   156ea:	b.n	1545a <_vfiprintf_r+0xbea>
   156ec:	ldrsb.w	r3, [r2], #4
   156f0:	str	r2, [sp, #28]
   156f2:	asrs	r2, r3, #31
   156f4:	mov	r1, r2
   156f6:	b.w	14a8e <_vfiprintf_r+0x21e>
   156fa:	ldr.w	r3, [r1], #4
   156fe:	str	r1, [sp, #28]
   15700:	mov	r2, r0
   15702:	uxtb	r3, r3
   15704:	b.w	14b56 <_vfiprintf_r+0x2e6>
   15708:	movs	r3, #1
   1570a:	str	r3, [sp, #112]	; 0x70
   1570c:	movs	r1, #1
   1570e:	add.w	r3, sp, #67	; 0x43
   15712:	str	r3, [sp, #108]	; 0x6c
   15714:	add.w	r9, sp, #108	; 0x6c
   15718:	mov	r3, r1
   1571a:	b.w	14cb8 <_vfiprintf_r+0x448>
   1571e:	ldr	r3, [sp, #28]
   15720:	ldr	r1, [sp, #20]
   15722:	ldr.w	r2, [r3], #4
   15726:	str	r3, [sp, #28]
   15728:	strh	r1, [r2, #0]
   1572a:	b.w	14906 <_vfiprintf_r+0x96>
   1572e:	adds	r1, r3, #1
   15730:	mov	r0, fp
   15732:	bl	bac0 <_malloc_r>
   15736:	mov	r4, r0
   15738:	cmp	r0, #0
   1573a:	beq.n	157b6 <_vfiprintf_r+0xf46>
   1573c:	str	r0, [sp, #32]
   1573e:	b.n	1566c <_vfiprintf_r+0xdfc>
   15740:	ldr	r0, [r1, #88]	; 0x58
   15742:	bl	dc74 <__retarget_lock_release_recursive>
   15746:	b.w	14b1c <_vfiprintf_r+0x2ac>
   1574a:	ldr	r3, [sp, #12]
   1574c:	str	r3, [sp, #28]
   1574e:	strd	r7, r7, [sp, #12]
   15752:	ldr	r7, [sp, #32]
   15754:	b.w	14ad0 <_vfiprintf_r+0x260>
   15758:	ldr	r0, [sp, #100]	; 0x64
   1575a:	ldr	r3, [sp, #104]	; 0x68
   1575c:	adds	r0, #1
   1575e:	b.n	151ec <_vfiprintf_r+0x97c>
   15760:	ldr	r3, [sp, #12]
   15762:	str	r3, [sp, #28]
   15764:	mov	r0, r4
   15766:	bl	e0c0 <strlen>
   1576a:	bic.w	r3, r0, r0, asr #31
   1576e:	mov	r7, r5
   15770:	str	r0, [sp, #16]
   15772:	str	r3, [sp, #12]
   15774:	str	r5, [sp, #32]
   15776:	b.w	14ad0 <_vfiprintf_r+0x260>
   1577a:	vmov	r1, s16
   1577e:	add	r2, sp, #96	; 0x60
   15780:	mov	r0, fp
   15782:	bl	147f8 <__sprint_r.part.0>
   15786:	cmp	r0, #0
   15788:	beq.w	14bf8 <_vfiprintf_r+0x388>
   1578c:	b.w	14c2a <_vfiprintf_r+0x3ba>
   15790:	ldr	r0, [sp, #100]	; 0x64
   15792:	adds	r0, #1
   15794:	b.n	1528c <_vfiprintf_r+0xa1c>
   15796:	mov	ip, r1
   15798:	b.n	15078 <_vfiprintf_r+0x808>
   1579a:	ldr	r3, [r5, #100]	; 0x64
   1579c:	lsls	r1, r3, #31
   1579e:	bmi.n	157ac <_vfiprintf_r+0xf3c>
   157a0:	ldrh	r3, [r5, #12]
   157a2:	lsls	r2, r3, #22
   157a4:	bmi.n	157ac <_vfiprintf_r+0xf3c>
   157a6:	ldr	r0, [r5, #88]	; 0x58
   157a8:	bl	dc74 <__retarget_lock_release_recursive>
   157ac:	mov.w	r3, #4294967295
   157b0:	str	r3, [sp, #20]
   157b2:	b.w	14c48 <_vfiprintf_r+0x3d8>
   157b6:	vmov	r2, s16
   157ba:	ldrsh.w	r3, [r2, #12]
   157be:	orr.w	r3, r3, #64	; 0x40
   157c2:	strh	r3, [r2, #12]
   157c4:	b.w	14c32 <_vfiprintf_r+0x3c2>
   157c8:	ldr	r4, [sp, #28]
   157ca:	str	r7, [sp, #16]
   157cc:	b.n	1565c <_vfiprintf_r+0xdec>
   157ce:	ldr	r3, [sp, #28]
   157d0:	ldrb.w	r1, [r8, #1]
   157d4:	ldr.w	r7, [r3], #4
   157d8:	str	r3, [sp, #28]
   157da:	mov	r8, r2
   157dc:	orr.w	r7, r7, r7, asr #31
   157e0:	b.w	14956 <_vfiprintf_r+0xe6>
   157e4:	vmov	r2, s16
   157e8:	ldrh	r3, [r2, #12]
   157ea:	orr.w	r3, r3, #64	; 0x40
   157ee:	strh	r3, [r2, #12]
   157f0:	b.w	14c1e <_vfiprintf_r+0x3ae>
   157f4:	.word	0xcccccccd
   157f8:	.word	0x200009d0

000157fc <__sbprintf>:
   157fc:	push	{r4, r5, r6, lr}
   157fe:	mov	r4, r1
   15800:	ldrh	r1, [r1, #12]
   15802:	sub.w	sp, sp, #1136	; 0x470
   15806:	bic.w	r1, r1, #2
   1580a:	strh.w	r1, [sp, #20]
   1580e:	ldr	r1, [r4, #100]	; 0x64
   15810:	str	r1, [sp, #108]	; 0x6c
   15812:	ldrh	r1, [r4, #14]
   15814:	strh.w	r1, [sp, #22]
   15818:	ldr	r1, [r4, #28]
   1581a:	str	r1, [sp, #36]	; 0x24
   1581c:	ldr	r1, [r4, #36]	; 0x24
   1581e:	str	r1, [sp, #44]	; 0x2c
   15820:	add	r1, sp, #112	; 0x70
   15822:	str	r1, [sp, #8]
   15824:	str	r1, [sp, #24]
   15826:	mov.w	r1, #1024	; 0x400
   1582a:	mov	r6, r0
   1582c:	str	r1, [sp, #16]
   1582e:	str	r1, [sp, #28]
   15830:	add	r0, sp, #96	; 0x60
   15832:	movs	r1, #0
   15834:	strd	r3, r2, [sp]
   15838:	str	r1, [sp, #32]
   1583a:	bl	dc68 <__retarget_lock_init_recursive>
   1583e:	ldrd	r3, r2, [sp]
   15842:	add	r1, sp, #8
   15844:	mov	r0, r6
   15846:	bl	14870 <_vfiprintf_r>
   1584a:	subs	r5, r0, #0
   1584c:	blt.n	1585e <__sbprintf+0x62>
   1584e:	add	r1, sp, #8
   15850:	mov	r0, r6
   15852:	bl	12dfc <_fflush_r>
   15856:	cmp	r0, #0
   15858:	it	ne
   1585a:	movne.w	r5, #4294967295
   1585e:	ldrh.w	r3, [sp, #20]
   15862:	lsls	r3, r3, #25
   15864:	bpl.n	1586e <__sbprintf+0x72>
   15866:	ldrh	r3, [r4, #12]
   15868:	orr.w	r3, r3, #64	; 0x40
   1586c:	strh	r3, [r4, #12]
   1586e:	ldr	r0, [sp, #96]	; 0x60
   15870:	bl	dc6c <__retarget_lock_close_recursive>
   15874:	mov	r0, r5
   15876:	add.w	sp, sp, #1136	; 0x470
   1587a:	pop	{r4, r5, r6, pc}

0001587c <__sfvwrite_r>:
   1587c:	ldr	r3, [r2, #8]
   1587e:	cmp	r3, #0
   15880:	beq.w	1598e <__sfvwrite_r+0x112>
   15884:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15888:	ldrsh.w	r3, [r1, #12]
   1588c:	mov	r4, r1
   1588e:	lsls	r1, r3, #28
   15890:	mov	r8, r0
   15892:	sub	sp, #12
   15894:	mov	r7, r2
   15896:	uxth	r0, r3
   15898:	bpl.n	158e6 <__sfvwrite_r+0x6a>
   1589a:	ldr	r3, [r4, #16]
   1589c:	cbz	r3, 158e6 <__sfvwrite_r+0x6a>
   1589e:	ands.w	r3, r0, #2
   158a2:	ldr	r5, [r7, #0]
   158a4:	beq.n	15902 <__sfvwrite_r+0x86>
   158a6:	mov.w	sl, #0
   158aa:	ldr.w	fp, [pc, #704]	; 15b6c <__sfvwrite_r+0x2f0>
   158ae:	mov	r6, sl
   158b0:	mov	r9, r7
   158b2:	cmp	r6, fp
   158b4:	mov	r3, r6
   158b6:	mov	r2, sl
   158b8:	it	cs
   158ba:	movcs	r3, fp
   158bc:	mov	r0, r8
   158be:	cmp	r6, #0
   158c0:	beq.n	15968 <__sfvwrite_r+0xec>
   158c2:	ldr	r1, [r4, #28]
   158c4:	ldr	r7, [r4, #36]	; 0x24
   158c6:	blx	r7
   158c8:	cmp	r0, #0
   158ca:	ble.n	1597a <__sfvwrite_r+0xfe>
   158cc:	ldr.w	r3, [r9, #8]
   158d0:	subs	r3, r3, r0
   158d2:	add	sl, r0
   158d4:	subs	r6, r6, r0
   158d6:	str.w	r3, [r9, #8]
   158da:	cmp	r3, #0
   158dc:	bne.n	158b2 <__sfvwrite_r+0x36>
   158de:	movs	r0, #0
   158e0:	add	sp, #12
   158e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e6:	mov	r1, r4
   158e8:	mov	r0, r8
   158ea:	bl	15be8 <__swsetup_r>
   158ee:	cmp	r0, #0
   158f0:	bne.w	15b64 <__sfvwrite_r+0x2e8>
   158f4:	ldrsh.w	r3, [r4, #12]
   158f8:	ldr	r5, [r7, #0]
   158fa:	uxth	r0, r3
   158fc:	ands.w	r3, r0, #2
   15900:	bne.n	158a6 <__sfvwrite_r+0x2a>
   15902:	ands.w	r9, r0, #1
   15906:	bne.n	15992 <__sfvwrite_r+0x116>
   15908:	mov	r6, r9
   1590a:	str	r7, [sp, #0]
   1590c:	cbz	r6, 15960 <__sfvwrite_r+0xe4>
   1590e:	lsls	r2, r0, #22
   15910:	ldr.w	fp, [r4, #8]
   15914:	bpl.w	15a22 <__sfvwrite_r+0x1a6>
   15918:	cmp	fp, r6
   1591a:	mov	r2, fp
   1591c:	bhi.w	15a88 <__sfvwrite_r+0x20c>
   15920:	tst.w	r0, #1152	; 0x480
   15924:	bne.w	15aaa <__sfvwrite_r+0x22e>
   15928:	ldr	r0, [r4, #0]
   1592a:	str	r2, [sp, #4]
   1592c:	mov	r1, r9
   1592e:	bl	d8a8 <memmove>
   15932:	ldr	r3, [r4, #8]
   15934:	ldr	r2, [sp, #4]
   15936:	sub.w	r1, r3, fp
   1593a:	ldr	r3, [r4, #0]
   1593c:	str	r1, [r4, #8]
   1593e:	add	r3, r2
   15940:	mov	sl, r6
   15942:	str	r3, [r4, #0]
   15944:	movs	r6, #0
   15946:	ldr	r2, [sp, #0]
   15948:	ldr	r3, [r2, #8]
   1594a:	sub.w	r3, r3, sl
   1594e:	add	r9, sl
   15950:	str	r3, [r2, #8]
   15952:	cmp	r3, #0
   15954:	beq.n	158de <__sfvwrite_r+0x62>
   15956:	ldrsh.w	r0, [r4, #12]
   1595a:	uxth	r0, r0
   1595c:	cmp	r6, #0
   1595e:	bne.n	1590e <__sfvwrite_r+0x92>
   15960:	ldrd	r9, r6, [r5]
   15964:	adds	r5, #8
   15966:	b.n	1590c <__sfvwrite_r+0x90>
   15968:	ldrd	sl, r6, [r5]
   1596c:	adds	r5, #8
   1596e:	b.n	158b2 <__sfvwrite_r+0x36>
   15970:	mov	r1, r4
   15972:	mov	r0, r8
   15974:	bl	12dfc <_fflush_r>
   15978:	cbz	r0, 159de <__sfvwrite_r+0x162>
   1597a:	ldrsh.w	r3, [r4, #12]
   1597e:	orr.w	r3, r3, #64	; 0x40
   15982:	mov.w	r0, #4294967295
   15986:	strh	r3, [r4, #12]
   15988:	add	sp, #12
   1598a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1598e:	movs	r0, #0
   15990:	bx	lr
   15992:	mov	r6, r3
   15994:	mov	sl, r7
   15996:	mov	r9, r3
   15998:	mov	r0, r3
   1599a:	str	r5, [sp, #0]
   1599c:	mov	r7, r3
   1599e:	cbz	r6, 159fa <__sfvwrite_r+0x17e>
   159a0:	cmp	r0, #0
   159a2:	beq.n	15a0a <__sfvwrite_r+0x18e>
   159a4:	mov	r2, r9
   159a6:	ldrd	r1, r3, [r4, #16]
   159aa:	ldr	r0, [r4, #0]
   159ac:	ldr	r5, [r4, #8]
   159ae:	cmp	r2, r6
   159b0:	it	cs
   159b2:	movcs	r2, r6
   159b4:	cmp	r0, r1
   159b6:	bls.n	159c2 <__sfvwrite_r+0x146>
   159b8:	add.w	fp, r5, r3
   159bc:	cmp	r2, fp
   159be:	bgt.w	15b10 <__sfvwrite_r+0x294>
   159c2:	cmp	r3, r2
   159c4:	bgt.n	15a90 <__sfvwrite_r+0x214>
   159c6:	ldr	r1, [r4, #28]
   159c8:	ldr	r5, [r4, #36]	; 0x24
   159ca:	mov	r2, r7
   159cc:	mov	r0, r8
   159ce:	blx	r5
   159d0:	subs.w	fp, r0, #0
   159d4:	ble.n	1597a <__sfvwrite_r+0xfe>
   159d6:	subs.w	r9, r9, fp
   159da:	beq.n	15970 <__sfvwrite_r+0xf4>
   159dc:	movs	r0, #1
   159de:	ldr.w	r3, [sl, #8]
   159e2:	sub.w	r3, r3, fp
   159e6:	add	r7, fp
   159e8:	sub.w	r6, r6, fp
   159ec:	str.w	r3, [sl, #8]
   159f0:	cmp	r3, #0
   159f2:	beq.w	158de <__sfvwrite_r+0x62>
   159f6:	cmp	r6, #0
   159f8:	bne.n	159a0 <__sfvwrite_r+0x124>
   159fa:	ldr	r2, [sp, #0]
   159fc:	ldr	r6, [r2, #4]
   159fe:	mov	r3, r2
   15a00:	adds	r2, #8
   15a02:	str	r2, [sp, #0]
   15a04:	cmp	r6, #0
   15a06:	beq.n	159fa <__sfvwrite_r+0x17e>
   15a08:	ldr	r7, [r3, #0]
   15a0a:	mov	r2, r6
   15a0c:	movs	r1, #10
   15a0e:	mov	r0, r7
   15a10:	bl	e020 <memchr>
   15a14:	cmp	r0, #0
   15a16:	beq.w	15b52 <__sfvwrite_r+0x2d6>
   15a1a:	adds	r0, #1
   15a1c:	sub.w	r9, r0, r7
   15a20:	b.n	159a4 <__sfvwrite_r+0x128>
   15a22:	ldr	r0, [r4, #0]
   15a24:	ldr	r3, [r4, #16]
   15a26:	cmp	r0, r3
   15a28:	bhi.n	15a58 <__sfvwrite_r+0x1dc>
   15a2a:	ldr	r2, [r4, #20]
   15a2c:	cmp	r2, r6
   15a2e:	bhi.n	15a58 <__sfvwrite_r+0x1dc>
   15a30:	mvn.w	r3, #2147483648	; 0x80000000
   15a34:	cmp	r3, r6
   15a36:	it	cs
   15a38:	movcs	r3, r6
   15a3a:	ldr	r1, [r4, #28]
   15a3c:	sdiv	r3, r3, r2
   15a40:	ldr	r7, [r4, #36]	; 0x24
   15a42:	mul.w	r3, r2, r3
   15a46:	mov	r0, r8
   15a48:	mov	r2, r9
   15a4a:	blx	r7
   15a4c:	subs.w	sl, r0, #0
   15a50:	ble.n	1597a <__sfvwrite_r+0xfe>
   15a52:	sub.w	r6, r6, sl
   15a56:	b.n	15946 <__sfvwrite_r+0xca>
   15a58:	cmp	fp, r6
   15a5a:	mov	sl, fp
   15a5c:	it	cs
   15a5e:	movcs	sl, r6
   15a60:	mov	r2, sl
   15a62:	mov	r1, r9
   15a64:	bl	d8a8 <memmove>
   15a68:	ldr	r3, [r4, #8]
   15a6a:	ldr	r2, [r4, #0]
   15a6c:	sub.w	r3, r3, sl
   15a70:	add	r2, sl
   15a72:	str	r3, [r4, #8]
   15a74:	str	r2, [r4, #0]
   15a76:	cmp	r3, #0
   15a78:	bne.n	15a52 <__sfvwrite_r+0x1d6>
   15a7a:	mov	r1, r4
   15a7c:	mov	r0, r8
   15a7e:	bl	12dfc <_fflush_r>
   15a82:	cmp	r0, #0
   15a84:	beq.n	15a52 <__sfvwrite_r+0x1d6>
   15a86:	b.n	1597a <__sfvwrite_r+0xfe>
   15a88:	ldr	r0, [r4, #0]
   15a8a:	mov	fp, r6
   15a8c:	mov	r2, r6
   15a8e:	b.n	1592a <__sfvwrite_r+0xae>
   15a90:	mov	r1, r7
   15a92:	str	r2, [sp, #4]
   15a94:	bl	d8a8 <memmove>
   15a98:	ldr	r2, [sp, #4]
   15a9a:	ldr	r3, [r4, #8]
   15a9c:	subs	r3, r3, r2
   15a9e:	str	r3, [r4, #8]
   15aa0:	ldr	r3, [r4, #0]
   15aa2:	add	r3, r2
   15aa4:	str	r3, [r4, #0]
   15aa6:	mov	fp, r2
   15aa8:	b.n	159d6 <__sfvwrite_r+0x15a>
   15aaa:	ldr	r3, [r4, #0]
   15aac:	ldr	r1, [r4, #16]
   15aae:	sub.w	fp, r3, r1
   15ab2:	ldr	r3, [r4, #20]
   15ab4:	add.w	sl, r3, r3, lsl #1
   15ab8:	add.w	sl, sl, sl, lsr #31
   15abc:	add.w	r3, fp, #1
   15ac0:	mov.w	sl, sl, asr #1
   15ac4:	add	r3, r6
   15ac6:	cmp	r3, sl
   15ac8:	mov	r2, sl
   15aca:	itt	hi
   15acc:	movhi	sl, r3
   15ace:	movhi	r2, sl
   15ad0:	lsls	r3, r0, #21
   15ad2:	bpl.n	15b2e <__sfvwrite_r+0x2b2>
   15ad4:	mov	r1, r2
   15ad6:	mov	r0, r8
   15ad8:	bl	bac0 <_malloc_r>
   15adc:	cmp	r0, #0
   15ade:	beq.n	15b58 <__sfvwrite_r+0x2dc>
   15ae0:	mov	r2, fp
   15ae2:	ldr	r1, [r4, #16]
   15ae4:	str	r0, [sp, #4]
   15ae6:	bl	9470 <memcpy>
   15aea:	ldrh	r2, [r4, #12]
   15aec:	ldr	r3, [sp, #4]
   15aee:	bic.w	r2, r2, #1152	; 0x480
   15af2:	orr.w	r2, r2, #128	; 0x80
   15af6:	strh	r2, [r4, #12]
   15af8:	add.w	r0, r3, fp
   15afc:	str	r3, [r4, #16]
   15afe:	sub.w	r3, sl, fp
   15b02:	str.w	sl, [r4, #20]
   15b06:	str	r3, [r4, #8]
   15b08:	str	r0, [r4, #0]
   15b0a:	mov	fp, r6
   15b0c:	mov	r2, r6
   15b0e:	b.n	1592a <__sfvwrite_r+0xae>
   15b10:	mov	r1, r7
   15b12:	mov	r2, fp
   15b14:	bl	d8a8 <memmove>
   15b18:	ldr	r3, [r4, #0]
   15b1a:	add	r3, fp
   15b1c:	str	r3, [r4, #0]
   15b1e:	mov	r1, r4
   15b20:	mov	r0, r8
   15b22:	bl	12dfc <_fflush_r>
   15b26:	cmp	r0, #0
   15b28:	beq.w	159d6 <__sfvwrite_r+0x15a>
   15b2c:	b.n	1597a <__sfvwrite_r+0xfe>
   15b2e:	mov	r0, r8
   15b30:	bl	c050 <_realloc_r>
   15b34:	mov	r3, r0
   15b36:	cmp	r0, #0
   15b38:	bne.n	15af8 <__sfvwrite_r+0x27c>
   15b3a:	ldr	r1, [r4, #16]
   15b3c:	mov	r0, r8
   15b3e:	bl	e2e4 <_free_r>
   15b42:	ldrsh.w	r3, [r4, #12]
   15b46:	movs	r2, #12
   15b48:	bic.w	r3, r3, #128	; 0x80
   15b4c:	str.w	r2, [r8]
   15b50:	b.n	1597e <__sfvwrite_r+0x102>
   15b52:	adds	r2, r6, #1
   15b54:	mov	r9, r2
   15b56:	b.n	159a6 <__sfvwrite_r+0x12a>
   15b58:	movs	r2, #12
   15b5a:	ldrsh.w	r3, [r4, #12]
   15b5e:	str.w	r2, [r8]
   15b62:	b.n	1597e <__sfvwrite_r+0x102>
   15b64:	mov.w	r0, #4294967295
   15b68:	b.n	158e0 <__sfvwrite_r+0x64>
   15b6a:	nop
   15b6c:	.word	0x7ffffc00

00015b70 <__submore>:
   15b70:	add.w	r3, r1, #64	; 0x40
   15b74:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b78:	mov	r4, r1
   15b7a:	ldr	r1, [r1, #48]	; 0x30
   15b7c:	cmp	r1, r3
   15b7e:	beq.n	15baa <__submore+0x3a>
   15b80:	ldr	r6, [r4, #52]	; 0x34
   15b82:	lsls	r7, r6, #1
   15b84:	mov	r2, r7
   15b86:	bl	c050 <_realloc_r>
   15b8a:	mov	r5, r0
   15b8c:	cbz	r0, 15be0 <__submore+0x70>
   15b8e:	add.w	r8, r0, r6
   15b92:	mov	r1, r0
   15b94:	mov	r2, r6
   15b96:	mov	r0, r8
   15b98:	bl	9470 <memcpy>
   15b9c:	strd	r5, r7, [r4, #48]	; 0x30
   15ba0:	str.w	r8, [r4]
   15ba4:	movs	r0, #0
   15ba6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15baa:	mov.w	r1, #1024	; 0x400
   15bae:	bl	bac0 <_malloc_r>
   15bb2:	cbz	r0, 15be0 <__submore+0x70>
   15bb4:	ldrb.w	r3, [r4, #66]	; 0x42
   15bb8:	mov.w	r2, #1024	; 0x400
   15bbc:	strd	r0, r2, [r4, #48]	; 0x30
   15bc0:	strb.w	r3, [r0, #1023]	; 0x3ff
   15bc4:	ldrb.w	r3, [r4, #65]	; 0x41
   15bc8:	strb.w	r3, [r0, #1022]	; 0x3fe
   15bcc:	ldrb.w	r2, [r4, #64]	; 0x40
   15bd0:	strb.w	r2, [r0, #1021]	; 0x3fd
   15bd4:	addw	r3, r0, #1021	; 0x3fd
   15bd8:	str	r3, [r4, #0]
   15bda:	movs	r0, #0
   15bdc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15be0:	mov.w	r0, #4294967295
   15be4:	b.n	15ba6 <__submore+0x36>
   15be6:	nop

00015be8 <__swsetup_r>:
   15be8:	push	{r3, r4, r5, lr}
   15bea:	ldr	r3, [pc, #196]	; (15cb0 <__swsetup_r+0xc8>)
   15bec:	ldr	r3, [r3, #0]
   15bee:	mov	r5, r0
   15bf0:	mov	r4, r1
   15bf2:	cbz	r3, 15bfa <__swsetup_r+0x12>
   15bf4:	ldr	r2, [r3, #52]	; 0x34
   15bf6:	cmp	r2, #0
   15bf8:	beq.n	15c98 <__swsetup_r+0xb0>
   15bfa:	ldrsh.w	r3, [r4, #12]
   15bfe:	lsls	r0, r3, #28
   15c00:	uxth	r2, r3
   15c02:	bpl.n	15c3e <__swsetup_r+0x56>
   15c04:	ldr	r1, [r4, #16]
   15c06:	cbz	r1, 15c54 <__swsetup_r+0x6c>
   15c08:	ands.w	r0, r2, #1
   15c0c:	beq.n	15c1e <__swsetup_r+0x36>
   15c0e:	movs	r0, #0
   15c10:	str	r0, [r4, #8]
   15c12:	ldr	r0, [r4, #20]
   15c14:	negs	r0, r0
   15c16:	str	r0, [r4, #24]
   15c18:	cbz	r1, 15c2a <__swsetup_r+0x42>
   15c1a:	movs	r0, #0
   15c1c:	pop	{r3, r4, r5, pc}
   15c1e:	lsls	r5, r2, #30
   15c20:	it	pl
   15c22:	ldrpl	r0, [r4, #20]
   15c24:	str	r0, [r4, #8]
   15c26:	cmp	r1, #0
   15c28:	bne.n	15c1a <__swsetup_r+0x32>
   15c2a:	lsls	r2, r2, #24
   15c2c:	it	pl
   15c2e:	movpl	r0, r1
   15c30:	bpl.n	15c1c <__swsetup_r+0x34>
   15c32:	orr.w	r3, r3, #64	; 0x40
   15c36:	strh	r3, [r4, #12]
   15c38:	mov.w	r0, #4294967295
   15c3c:	pop	{r3, r4, r5, pc}
   15c3e:	lsls	r1, r2, #27
   15c40:	bpl.n	15ca0 <__swsetup_r+0xb8>
   15c42:	lsls	r2, r2, #29
   15c44:	bmi.n	15c70 <__swsetup_r+0x88>
   15c46:	ldr	r1, [r4, #16]
   15c48:	orr.w	r3, r3, #8
   15c4c:	strh	r3, [r4, #12]
   15c4e:	uxth	r2, r3
   15c50:	cmp	r1, #0
   15c52:	bne.n	15c08 <__swsetup_r+0x20>
   15c54:	and.w	r0, r2, #640	; 0x280
   15c58:	cmp.w	r0, #512	; 0x200
   15c5c:	beq.n	15c08 <__swsetup_r+0x20>
   15c5e:	mov	r1, r4
   15c60:	mov	r0, r5
   15c62:	bl	15f54 <__smakebuf_r>
   15c66:	ldrsh.w	r3, [r4, #12]
   15c6a:	ldr	r1, [r4, #16]
   15c6c:	uxth	r2, r3
   15c6e:	b.n	15c08 <__swsetup_r+0x20>
   15c70:	ldr	r1, [r4, #48]	; 0x30
   15c72:	cbz	r1, 15c8a <__swsetup_r+0xa2>
   15c74:	add.w	r2, r4, #64	; 0x40
   15c78:	cmp	r1, r2
   15c7a:	beq.n	15c86 <__swsetup_r+0x9e>
   15c7c:	mov	r0, r5
   15c7e:	bl	e2e4 <_free_r>
   15c82:	ldrsh.w	r3, [r4, #12]
   15c86:	movs	r2, #0
   15c88:	str	r2, [r4, #48]	; 0x30
   15c8a:	ldr	r1, [r4, #16]
   15c8c:	movs	r2, #0
   15c8e:	strd	r1, r2, [r4]
   15c92:	bic.w	r3, r3, #36	; 0x24
   15c96:	b.n	15c48 <__swsetup_r+0x60>
   15c98:	mov	r0, r3
   15c9a:	bl	d530 <__sinit>
   15c9e:	b.n	15bfa <__swsetup_r+0x12>
   15ca0:	movs	r2, #9
   15ca2:	orr.w	r3, r3, #64	; 0x40
   15ca6:	str	r2, [r5, #0]
   15ca8:	mov.w	r0, #4294967295
   15cac:	strh	r3, [r4, #12]
   15cae:	pop	{r3, r4, r5, pc}
   15cb0:	.word	0x20008eec

00015cb4 <__fputwc>:
   15cb4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15cb8:	sub	sp, #8
   15cba:	mov	sl, r0
   15cbc:	mov	r8, r1
   15cbe:	mov	r4, r2
   15cc0:	bl	db3c <__locale_mb_cur_max>
   15cc4:	cmp	r0, #1
   15cc6:	bne.n	15cd0 <__fputwc+0x1c>
   15cc8:	add.w	r3, r8, #4294967295
   15ccc:	cmp	r3, #254	; 0xfe
   15cce:	bls.n	15d3e <__fputwc+0x8a>
   15cd0:	add.w	r9, sp, #4
   15cd4:	mov	r2, r8
   15cd6:	add.w	r3, r4, #92	; 0x5c
   15cda:	mov	r1, r9
   15cdc:	mov	r0, sl
   15cde:	bl	14334 <_wcrtomb_r>
   15ce2:	adds	r2, r0, #1
   15ce4:	mov	r6, r0
   15ce6:	beq.n	15d4e <__fputwc+0x9a>
   15ce8:	cbz	r0, 15d34 <__fputwc+0x80>
   15cea:	ldrb.w	ip, [sp, #4]
   15cee:	movs	r5, #0
   15cf0:	b.n	15d06 <__fputwc+0x52>
   15cf2:	ldr	r3, [r4, #0]
   15cf4:	adds	r2, r3, #1
   15cf6:	str	r2, [r4, #0]
   15cf8:	strb.w	ip, [r3]
   15cfc:	adds	r5, #1
   15cfe:	cmp	r5, r6
   15d00:	bcs.n	15d34 <__fputwc+0x80>
   15d02:	ldrb.w	ip, [r9, #1]!
   15d06:	ldr	r3, [r4, #8]
   15d08:	subs	r3, #1
   15d0a:	cmp	r3, #0
   15d0c:	str	r3, [r4, #8]
   15d0e:	bge.n	15cf2 <__fputwc+0x3e>
   15d10:	ldr	r7, [r4, #24]
   15d12:	cmp	r3, r7
   15d14:	mov	r1, ip
   15d16:	mov	r2, r4
   15d18:	mov	r0, sl
   15d1a:	blt.n	15d22 <__fputwc+0x6e>
   15d1c:	cmp.w	ip, #10
   15d20:	bne.n	15cf2 <__fputwc+0x3e>
   15d22:	bl	1602c <__swbuf_r>
   15d26:	adds	r3, r0, #1
   15d28:	bne.n	15cfc <__fputwc+0x48>
   15d2a:	mov	r6, r0
   15d2c:	mov	r0, r6
   15d2e:	add	sp, #8
   15d30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d34:	mov	r6, r8
   15d36:	mov	r0, r6
   15d38:	add	sp, #8
   15d3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d3e:	uxtb.w	ip, r8
   15d42:	strb.w	ip, [sp, #4]
   15d46:	mov	r6, r0
   15d48:	add.w	r9, sp, #4
   15d4c:	b.n	15cee <__fputwc+0x3a>
   15d4e:	ldrh	r3, [r4, #12]
   15d50:	mov	r0, r6
   15d52:	orr.w	r3, r3, #64	; 0x40
   15d56:	strh	r3, [r4, #12]
   15d58:	add	sp, #8
   15d5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15d5e:	nop

00015d60 <_fputwc_r>:
   15d60:	push	{r4, r5, lr}
   15d62:	ldr	r3, [r2, #100]	; 0x64
   15d64:	tst.w	r3, #1
   15d68:	ldrsh.w	r3, [r2, #12]
   15d6c:	mov	r4, r2
   15d6e:	sub	sp, #12
   15d70:	mov	r5, r0
   15d72:	uxth	r2, r3
   15d74:	bne.n	15d7a <_fputwc_r+0x1a>
   15d76:	lsls	r0, r3, #22
   15d78:	bpl.n	15db4 <_fputwc_r+0x54>
   15d7a:	lsls	r0, r2, #18
   15d7c:	bmi.n	15d8c <_fputwc_r+0x2c>
   15d7e:	ldr	r2, [r4, #100]	; 0x64
   15d80:	orr.w	r3, r3, #8192	; 0x2000
   15d84:	orr.w	r2, r2, #8192	; 0x2000
   15d88:	strh	r3, [r4, #12]
   15d8a:	str	r2, [r4, #100]	; 0x64
   15d8c:	mov	r2, r4
   15d8e:	mov	r0, r5
   15d90:	bl	15cb4 <__fputwc>
   15d94:	ldr	r3, [r4, #100]	; 0x64
   15d96:	lsls	r2, r3, #31
   15d98:	mov	r5, r0
   15d9a:	bmi.n	15da2 <_fputwc_r+0x42>
   15d9c:	ldrh	r3, [r4, #12]
   15d9e:	lsls	r3, r3, #22
   15da0:	bpl.n	15da8 <_fputwc_r+0x48>
   15da2:	mov	r0, r5
   15da4:	add	sp, #12
   15da6:	pop	{r4, r5, pc}
   15da8:	ldr	r0, [r4, #88]	; 0x58
   15daa:	bl	dc74 <__retarget_lock_release_recursive>
   15dae:	mov	r0, r5
   15db0:	add	sp, #12
   15db2:	pop	{r4, r5, pc}
   15db4:	ldr	r0, [r4, #88]	; 0x58
   15db6:	str	r1, [sp, #4]
   15db8:	bl	dc70 <__retarget_lock_acquire_recursive>
   15dbc:	ldrsh.w	r3, [r4, #12]
   15dc0:	ldr	r1, [sp, #4]
   15dc2:	uxth	r2, r3
   15dc4:	b.n	15d7a <_fputwc_r+0x1a>
   15dc6:	nop

00015dc8 <_wcsnrtombs_l>:
   15dc8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dcc:	sub	sp, #44	; 0x2c
   15dce:	ldrd	r8, sl, [sp, #84]	; 0x54
   15dd2:	ldr	r7, [sp, #80]	; 0x50
   15dd4:	str	r1, [sp, #12]
   15dd6:	mov	r9, r0
   15dd8:	str	r2, [sp, #20]
   15dda:	mov	r6, r3
   15ddc:	cmp.w	r8, #0
   15de0:	beq.n	15e9c <_wcsnrtombs_l+0xd4>
   15de2:	ldr	r3, [sp, #12]
   15de4:	cmp	r3, #0
   15de6:	beq.n	15ea6 <_wcsnrtombs_l+0xde>
   15de8:	ldr	r3, [sp, #20]
   15dea:	ldr	r5, [r3, #0]
   15dec:	cmp	r7, #0
   15dee:	beq.n	15ec6 <_wcsnrtombs_l+0xfe>
   15df0:	subs	r4, r6, #1
   15df2:	cbz	r6, 15e48 <_wcsnrtombs_l+0x80>
   15df4:	ldr	r3, [sp, #12]
   15df6:	str	r3, [sp, #16]
   15df8:	subs	r5, #4
   15dfa:	movs	r6, #0
   15dfc:	str	r5, [sp, #4]
   15dfe:	b.n	15e18 <_wcsnrtombs_l+0x50>
   15e00:	ldr	r3, [sp, #12]
   15e02:	cbnz	r3, 15e50 <_wcsnrtombs_l+0x88>
   15e04:	ldr	r3, [sp, #4]
   15e06:	ldr	r2, [r3, #0]
   15e08:	cmp	r2, #0
   15e0a:	beq.n	15e82 <_wcsnrtombs_l+0xba>
   15e0c:	cmp	ip, r7
   15e0e:	bcs.n	15eca <_wcsnrtombs_l+0x102>
   15e10:	subs	r4, #1
   15e12:	adds	r3, r4, #1
   15e14:	mov	r6, ip
   15e16:	beq.n	15e48 <_wcsnrtombs_l+0x80>
   15e18:	ldr.w	r3, [r8]
   15e1c:	str	r3, [sp, #8]
   15e1e:	ldr	r3, [sp, #4]
   15e20:	ldr.w	r5, [sl, #224]	; 0xe0
   15e24:	ldr.w	r2, [r3, #4]!
   15e28:	str	r3, [sp, #4]
   15e2a:	add	r1, sp, #28
   15e2c:	mov	r3, r8
   15e2e:	mov	r0, r9
   15e30:	ldr.w	fp, [r8, #4]
   15e34:	blx	r5
   15e36:	adds	r2, r0, #1
   15e38:	beq.n	15eb0 <_wcsnrtombs_l+0xe8>
   15e3a:	add.w	ip, r0, r6
   15e3e:	cmp	ip, r7
   15e40:	bls.n	15e00 <_wcsnrtombs_l+0x38>
   15e42:	ldr	r3, [sp, #8]
   15e44:	strd	r3, fp, [r8]
   15e48:	mov	r0, r6
   15e4a:	add	sp, #44	; 0x2c
   15e4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e50:	cmp	r0, #0
   15e52:	ble.n	15e72 <_wcsnrtombs_l+0xaa>
   15e54:	ldr	r3, [sp, #16]
   15e56:	ldr	r5, [sp, #4]
   15e58:	add	r0, r3
   15e5a:	subs	r2, r3, #1
   15e5c:	add	r1, sp, #28
   15e5e:	add.w	lr, r0, #4294967295
   15e62:	ldrb.w	r3, [r1], #1
   15e66:	strb.w	r3, [r2, #1]!
   15e6a:	cmp	r2, lr
   15e6c:	bne.n	15e62 <_wcsnrtombs_l+0x9a>
   15e6e:	str	r5, [sp, #4]
   15e70:	str	r0, [sp, #16]
   15e72:	ldr	r3, [sp, #20]
   15e74:	ldr	r2, [r3, #0]
   15e76:	adds	r2, #4
   15e78:	str	r2, [r3, #0]
   15e7a:	ldr	r3, [sp, #4]
   15e7c:	ldr	r2, [r3, #0]
   15e7e:	cmp	r2, #0
   15e80:	bne.n	15e0c <_wcsnrtombs_l+0x44>
   15e82:	ldr	r3, [sp, #12]
   15e84:	cbz	r3, 15e8a <_wcsnrtombs_l+0xc2>
   15e86:	ldr	r3, [sp, #20]
   15e88:	str	r2, [r3, #0]
   15e8a:	add.w	r6, ip, #4294967295
   15e8e:	movs	r2, #0
   15e90:	mov	r0, r6
   15e92:	str.w	r2, [r8]
   15e96:	add	sp, #44	; 0x2c
   15e98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e9c:	ldr	r3, [sp, #12]
   15e9e:	add.w	r8, r0, #268	; 0x10c
   15ea2:	cmp	r3, #0
   15ea4:	bne.n	15de8 <_wcsnrtombs_l+0x20>
   15ea6:	ldr	r3, [sp, #20]
   15ea8:	mov.w	r7, #4294967295
   15eac:	ldr	r5, [r3, #0]
   15eae:	b.n	15df0 <_wcsnrtombs_l+0x28>
   15eb0:	mov	r6, r0
   15eb2:	movs	r1, #138	; 0x8a
   15eb4:	movs	r2, #0
   15eb6:	mov	r0, r6
   15eb8:	str.w	r1, [r9]
   15ebc:	str.w	r2, [r8]
   15ec0:	add	sp, #44	; 0x2c
   15ec2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ec6:	mov	r6, r7
   15ec8:	b.n	15e48 <_wcsnrtombs_l+0x80>
   15eca:	mov	r6, ip
   15ecc:	b.n	15e48 <_wcsnrtombs_l+0x80>
   15ece:	nop

00015ed0 <_wcsnrtombs_r>:
   15ed0:	push	{r4, lr}
   15ed2:	sub	sp, #16
   15ed4:	ldr	r4, [pc, #20]	; (15eec <_wcsnrtombs_r+0x1c>)
   15ed6:	ldr	r0, [sp, #24]
   15ed8:	str	r0, [sp, #0]
   15eda:	ldr	r0, [sp, #28]
   15edc:	str	r0, [sp, #4]
   15ede:	ldr	r0, [pc, #16]	; (15ef0 <_wcsnrtombs_r+0x20>)
   15ee0:	ldr	r0, [r0, #0]
   15ee2:	str	r4, [sp, #8]
   15ee4:	bl	15dc8 <_wcsnrtombs_l>
   15ee8:	add	sp, #16
   15eea:	pop	{r4, pc}
   15eec:	.word	0x20008964
   15ef0:	.word	0x20008eec

00015ef4 <category>:
   15ef4:	ldr	r3, [pc, #84]	; (15f4c <category+0x58>)
   15ef6:	cmp	r0, r3
   15ef8:	bhi.n	15f42 <category+0x4e>
   15efa:	push	{r4, r5, r6, lr}
   15efc:	ldr	r6, [pc, #80]	; (15f50 <category+0x5c>)
   15efe:	mov.w	lr, #0
   15f02:	movw	r4, #2267	; 0x8db
   15f06:	b.n	15f10 <category+0x1c>
   15f08:	add.w	lr, r2, #1
   15f0c:	cmp	lr, r4
   15f0e:	bgt.n	15f3e <category+0x4a>
   15f10:	add.w	r2, r4, lr
   15f14:	bic.w	r3, r2, #1
   15f18:	add.w	r3, r3, r2, asr #1
   15f1c:	add.w	r3, r6, r3, lsl #1
   15f20:	asrs	r2, r2, #1
   15f22:	ldrb	r1, [r3, #1]
   15f24:	ldrh	r5, [r3, #2]
   15f26:	ldrh.w	ip, [r3, #4]
   15f2a:	orr.w	r1, r1, r5, lsl #8
   15f2e:	add	ip, r1
   15f30:	cmp	r0, ip
   15f32:	bhi.n	15f08 <category+0x14>
   15f34:	cmp	r0, r1
   15f36:	bcs.n	15f46 <category+0x52>
   15f38:	subs	r4, r2, #1
   15f3a:	cmp	lr, r4
   15f3c:	ble.n	15f10 <category+0x1c>
   15f3e:	movs	r0, #255	; 0xff
   15f40:	pop	{r4, r5, r6, pc}
   15f42:	movs	r0, #255	; 0xff
   15f44:	bx	lr
   15f46:	ldrb	r0, [r3, #0]
   15f48:	pop	{r4, r5, r6, pc}
   15f4a:	nop
   15f4c:	.word	0x000e01ef
   15f50:	.word	0x20002474

00015f54 <__smakebuf_r>:
   15f54:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15f58:	ldrh	r3, [r1, #12]
   15f5a:	mov	r4, r1
   15f5c:	lsls	r1, r3, #30
   15f5e:	sub	sp, #88	; 0x58
   15f60:	bpl.n	15f74 <__smakebuf_r+0x20>
   15f62:	add.w	r3, r4, #67	; 0x43
   15f66:	movs	r2, #1
   15f68:	strd	r3, r2, [r4, #16]
   15f6c:	str	r3, [r4, #0]
   15f6e:	add	sp, #88	; 0x58
   15f70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15f74:	ldrsh.w	r1, [r4, #14]
   15f78:	cmp	r1, #0
   15f7a:	mov	r6, r0
   15f7c:	blt.n	15fca <__smakebuf_r+0x76>
   15f7e:	mov	r2, sp
   15f80:	bl	160dc <_fstat_r>
   15f84:	cmp	r0, #0
   15f86:	blt.n	15fc8 <__smakebuf_r+0x74>
   15f88:	ldr	r5, [sp, #4]
   15f8a:	and.w	r5, r5, #61440	; 0xf000
   15f8e:	sub.w	r5, r5, #8192	; 0x2000
   15f92:	clz	r5, r5
   15f96:	mov.w	r8, #1024	; 0x400
   15f9a:	lsrs	r5, r5, #5
   15f9c:	mov.w	r7, #2048	; 0x800
   15fa0:	mov	r1, r8
   15fa2:	mov	r0, r6
   15fa4:	bl	bac0 <_malloc_r>
   15fa8:	cbz	r0, 15fe4 <__smakebuf_r+0x90>
   15faa:	ldrsh.w	r3, [r4, #12]
   15fae:	str.w	r8, [r4, #20]
   15fb2:	orr.w	r3, r3, #128	; 0x80
   15fb6:	str	r0, [r4, #0]
   15fb8:	str	r0, [r4, #16]
   15fba:	strh	r3, [r4, #12]
   15fbc:	cbnz	r5, 1600c <__smakebuf_r+0xb8>
   15fbe:	orrs	r3, r7
   15fc0:	strh	r3, [r4, #12]
   15fc2:	add	sp, #88	; 0x58
   15fc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15fc8:	ldrh	r3, [r4, #12]
   15fca:	ands.w	r5, r3, #128	; 0x80
   15fce:	beq.n	16004 <__smakebuf_r+0xb0>
   15fd0:	mov.w	r8, #64	; 0x40
   15fd4:	movs	r5, #0
   15fd6:	mov	r1, r8
   15fd8:	mov	r0, r6
   15fda:	mov	r7, r5
   15fdc:	bl	bac0 <_malloc_r>
   15fe0:	cmp	r0, #0
   15fe2:	bne.n	15faa <__smakebuf_r+0x56>
   15fe4:	ldrsh.w	r3, [r4, #12]
   15fe8:	lsls	r2, r3, #22
   15fea:	bmi.n	15f6e <__smakebuf_r+0x1a>
   15fec:	bic.w	r3, r3, #3
   15ff0:	add.w	r2, r4, #67	; 0x43
   15ff4:	orr.w	r3, r3, #2
   15ff8:	movs	r1, #1
   15ffa:	strd	r2, r1, [r4, #16]
   15ffe:	strh	r3, [r4, #12]
   16000:	str	r2, [r4, #0]
   16002:	b.n	15f6e <__smakebuf_r+0x1a>
   16004:	mov.w	r8, #1024	; 0x400
   16008:	mov	r7, r5
   1600a:	b.n	15fa0 <__smakebuf_r+0x4c>
   1600c:	ldrsh.w	r1, [r4, #14]
   16010:	mov	r0, r6
   16012:	bl	16108 <_isatty_r>
   16016:	cbnz	r0, 1601e <__smakebuf_r+0xca>
   16018:	ldrsh.w	r3, [r4, #12]
   1601c:	b.n	15fbe <__smakebuf_r+0x6a>
   1601e:	ldrh	r3, [r4, #12]
   16020:	bic.w	r3, r3, #3
   16024:	orr.w	r3, r3, #1
   16028:	sxth	r3, r3
   1602a:	b.n	15fbe <__smakebuf_r+0x6a>

0001602c <__swbuf_r>:
   1602c:	push	{r3, r4, r5, r6, r7, lr}
   1602e:	mov	r5, r1
   16030:	mov	r4, r2
   16032:	mov	r6, r0
   16034:	cbz	r0, 1603c <__swbuf_r+0x10>
   16036:	ldr	r3, [r0, #52]	; 0x34
   16038:	cmp	r3, #0
   1603a:	beq.n	160d6 <__swbuf_r+0xaa>
   1603c:	ldrsh.w	r2, [r4, #12]
   16040:	ldr	r3, [r4, #24]
   16042:	str	r3, [r4, #8]
   16044:	lsls	r7, r2, #28
   16046:	uxth	r0, r2
   16048:	bpl.n	16082 <__swbuf_r+0x56>
   1604a:	ldr	r3, [r4, #16]
   1604c:	cbz	r3, 16082 <__swbuf_r+0x56>
   1604e:	uxtb	r5, r5
   16050:	lsls	r1, r0, #18
   16052:	mov	r7, r5
   16054:	bpl.n	1609c <__swbuf_r+0x70>
   16056:	ldr	r2, [r4, #0]
   16058:	ldr	r1, [r4, #20]
   1605a:	subs	r3, r2, r3
   1605c:	cmp	r1, r3
   1605e:	ble.n	160b4 <__swbuf_r+0x88>
   16060:	adds	r3, #1
   16062:	ldr	r1, [r4, #8]
   16064:	subs	r1, #1
   16066:	str	r1, [r4, #8]
   16068:	adds	r1, r2, #1
   1606a:	str	r1, [r4, #0]
   1606c:	strb	r5, [r2, #0]
   1606e:	ldr	r2, [r4, #20]
   16070:	cmp	r2, r3
   16072:	beq.n	160c4 <__swbuf_r+0x98>
   16074:	ldrh	r3, [r4, #12]
   16076:	lsls	r3, r3, #31
   16078:	bpl.n	1607e <__swbuf_r+0x52>
   1607a:	cmp	r5, #10
   1607c:	beq.n	160c4 <__swbuf_r+0x98>
   1607e:	mov	r0, r7
   16080:	pop	{r3, r4, r5, r6, r7, pc}
   16082:	mov	r1, r4
   16084:	mov	r0, r6
   16086:	bl	15be8 <__swsetup_r>
   1608a:	cbnz	r0, 160d0 <__swbuf_r+0xa4>
   1608c:	ldrsh.w	r2, [r4, #12]
   16090:	ldr	r3, [r4, #16]
   16092:	uxth	r0, r2
   16094:	uxtb	r5, r5
   16096:	lsls	r1, r0, #18
   16098:	mov	r7, r5
   1609a:	bmi.n	16056 <__swbuf_r+0x2a>
   1609c:	orr.w	r2, r2, #8192	; 0x2000
   160a0:	strh	r2, [r4, #12]
   160a2:	ldr	r2, [r4, #100]	; 0x64
   160a4:	ldr	r1, [r4, #20]
   160a6:	bic.w	r2, r2, #8192	; 0x2000
   160aa:	str	r2, [r4, #100]	; 0x64
   160ac:	ldr	r2, [r4, #0]
   160ae:	subs	r3, r2, r3
   160b0:	cmp	r1, r3
   160b2:	bgt.n	16060 <__swbuf_r+0x34>
   160b4:	mov	r1, r4
   160b6:	mov	r0, r6
   160b8:	bl	12dfc <_fflush_r>
   160bc:	cbnz	r0, 160d0 <__swbuf_r+0xa4>
   160be:	ldr	r2, [r4, #0]
   160c0:	movs	r3, #1
   160c2:	b.n	16062 <__swbuf_r+0x36>
   160c4:	mov	r1, r4
   160c6:	mov	r0, r6
   160c8:	bl	12dfc <_fflush_r>
   160cc:	cmp	r0, #0
   160ce:	beq.n	1607e <__swbuf_r+0x52>
   160d0:	mov.w	r7, #4294967295
   160d4:	b.n	1607e <__swbuf_r+0x52>
   160d6:	bl	d530 <__sinit>
   160da:	b.n	1603c <__swbuf_r+0x10>

000160dc <_fstat_r>:
   160dc:	push	{r4, r5, r6, lr}
   160de:	mov	r4, r1
   160e0:	ldr	r5, [pc, #32]	; (16104 <_fstat_r+0x28>)
   160e2:	mov	r3, r0
   160e4:	movs	r6, #0
   160e6:	mov	r0, r4
   160e8:	mov	r1, r2
   160ea:	mov	r4, r3
   160ec:	str	r6, [r5, #0]
   160ee:	bl	ab9a <_fstat>
   160f2:	adds	r3, r0, #1
   160f4:	beq.n	160f8 <_fstat_r+0x1c>
   160f6:	pop	{r4, r5, r6, pc}
   160f8:	ldr	r3, [r5, #0]
   160fa:	cmp	r3, #0
   160fc:	beq.n	160f6 <_fstat_r+0x1a>
   160fe:	str	r3, [r4, #0]
   16100:	pop	{r4, r5, r6, pc}
   16102:	nop
   16104:	.word	0x20027970

00016108 <_isatty_r>:
   16108:	push	{r3, r4, r5, lr}
   1610a:	ldr	r5, [pc, #28]	; (16128 <_isatty_r+0x20>)
   1610c:	movs	r2, #0
   1610e:	mov	r4, r0
   16110:	mov	r0, r1
   16112:	str	r2, [r5, #0]
   16114:	bl	aba4 <_isatty>
   16118:	adds	r3, r0, #1
   1611a:	beq.n	1611e <_isatty_r+0x16>
   1611c:	pop	{r3, r4, r5, pc}
   1611e:	ldr	r3, [r5, #0]
   16120:	cmp	r3, #0
   16122:	beq.n	1611c <_isatty_r+0x14>
   16124:	str	r3, [r4, #0]
   16126:	pop	{r3, r4, r5, pc}
   16128:	.word	0x20027970

0001612c <__aeabi_drsub>:
   1612c:	eor.w	r1, r1, #2147483648	; 0x80000000
   16130:	b.n	16138 <__adddf3>
   16132:	nop

00016134 <__aeabi_dsub>:
   16134:	eor.w	r3, r3, #2147483648	; 0x80000000

00016138 <__adddf3>:
   16138:	push	{r4, r5, lr}
   1613a:	mov.w	r4, r1, lsl #1
   1613e:	mov.w	r5, r3, lsl #1
   16142:	teq	r4, r5
   16146:	it	eq
   16148:	teqeq	r0, r2
   1614c:	itttt	ne
   1614e:	orrsne.w	ip, r4, r0
   16152:	orrsne.w	ip, r5, r2
   16156:	mvnsne.w	ip, r4, asr #21
   1615a:	mvnsne.w	ip, r5, asr #21
   1615e:	beq.w	16326 <__adddf3+0x1ee>
   16162:	mov.w	r4, r4, lsr #21
   16166:	rsbs	r5, r4, r5, lsr #21
   1616a:	it	lt
   1616c:	neglt	r5, r5
   1616e:	ble.n	1618a <__adddf3+0x52>
   16170:	add	r4, r5
   16172:	eor.w	r2, r0, r2
   16176:	eor.w	r3, r1, r3
   1617a:	eor.w	r0, r2, r0
   1617e:	eor.w	r1, r3, r1
   16182:	eor.w	r2, r0, r2
   16186:	eor.w	r3, r1, r3
   1618a:	cmp	r5, #54	; 0x36
   1618c:	it	hi
   1618e:	pophi	{r4, r5, pc}
   16190:	tst.w	r1, #2147483648	; 0x80000000
   16194:	mov.w	r1, r1, lsl #12
   16198:	mov.w	ip, #1048576	; 0x100000
   1619c:	orr.w	r1, ip, r1, lsr #12
   161a0:	beq.n	161a8 <__adddf3+0x70>
   161a2:	negs	r0, r0
   161a4:	sbc.w	r1, r1, r1, lsl #1
   161a8:	tst.w	r3, #2147483648	; 0x80000000
   161ac:	mov.w	r3, r3, lsl #12
   161b0:	orr.w	r3, ip, r3, lsr #12
   161b4:	beq.n	161bc <__adddf3+0x84>
   161b6:	negs	r2, r2
   161b8:	sbc.w	r3, r3, r3, lsl #1
   161bc:	teq	r4, r5
   161c0:	beq.w	16312 <__adddf3+0x1da>
   161c4:	sub.w	r4, r4, #1
   161c8:	rsbs	lr, r5, #32
   161cc:	blt.n	161ea <__adddf3+0xb2>
   161ce:	lsl.w	ip, r2, lr
   161d2:	lsr.w	r2, r2, r5
   161d6:	adds	r0, r0, r2
   161d8:	adc.w	r1, r1, #0
   161dc:	lsl.w	r2, r3, lr
   161e0:	adds	r0, r0, r2
   161e2:	asr.w	r3, r3, r5
   161e6:	adcs	r1, r3
   161e8:	b.n	16208 <__adddf3+0xd0>
   161ea:	sub.w	r5, r5, #32
   161ee:	add.w	lr, lr, #32
   161f2:	cmp	r2, #1
   161f4:	lsl.w	ip, r3, lr
   161f8:	it	cs
   161fa:	orrcs.w	ip, ip, #2
   161fe:	asr.w	r3, r3, r5
   16202:	adds	r0, r0, r3
   16204:	adcs.w	r1, r1, r3, asr #31
   16208:	and.w	r5, r1, #2147483648	; 0x80000000
   1620c:	bpl.n	1621e <__adddf3+0xe6>
   1620e:	mov.w	lr, #0
   16212:	rsbs	ip, ip, #0
   16216:	sbcs.w	r0, lr, r0
   1621a:	sbc.w	r1, lr, r1
   1621e:	cmp.w	r1, #1048576	; 0x100000
   16222:	bcc.n	1625c <__adddf3+0x124>
   16224:	cmp.w	r1, #2097152	; 0x200000
   16228:	bcc.n	16244 <__adddf3+0x10c>
   1622a:	lsrs	r1, r1, #1
   1622c:	movs.w	r0, r0, rrx
   16230:	mov.w	ip, ip, rrx
   16234:	add.w	r4, r4, #1
   16238:	mov.w	r2, r4, lsl #21
   1623c:	cmn.w	r2, #4194304	; 0x400000
   16240:	bcs.w	16378 <__adddf3+0x240>
   16244:	cmp.w	ip, #2147483648	; 0x80000000
   16248:	it	eq
   1624a:	movseq.w	ip, r0, lsr #1
   1624e:	adcs.w	r0, r0, #0
   16252:	adc.w	r1, r1, r4, lsl #20
   16256:	orr.w	r1, r1, r5
   1625a:	pop	{r4, r5, pc}
   1625c:	movs.w	ip, ip, lsl #1
   16260:	adcs	r0, r0
   16262:	adc.w	r1, r1, r1
   16266:	subs	r4, #1
   16268:	it	cs
   1626a:	cmpcs.w	r1, #1048576	; 0x100000
   1626e:	bcs.n	16244 <__adddf3+0x10c>
   16270:	teq	r1, #0
   16274:	itt	eq
   16276:	moveq	r1, r0
   16278:	moveq	r0, #0
   1627a:	clz	r3, r1
   1627e:	it	eq
   16280:	addeq	r3, #32
   16282:	sub.w	r3, r3, #11
   16286:	subs.w	r2, r3, #32
   1628a:	bge.n	162a6 <__adddf3+0x16e>
   1628c:	adds	r2, #12
   1628e:	ble.n	162a2 <__adddf3+0x16a>
   16290:	add.w	ip, r2, #20
   16294:	rsb	r2, r2, #12
   16298:	lsl.w	r0, r1, ip
   1629c:	lsr.w	r1, r1, r2
   162a0:	b.n	162bc <__adddf3+0x184>
   162a2:	add.w	r2, r2, #20
   162a6:	it	le
   162a8:	rsble	ip, r2, #32
   162ac:	lsl.w	r1, r1, r2
   162b0:	lsr.w	ip, r0, ip
   162b4:	itt	le
   162b6:	orrle.w	r1, r1, ip
   162ba:	lslle	r0, r2
   162bc:	subs	r4, r4, r3
   162be:	ittt	ge
   162c0:	addge.w	r1, r1, r4, lsl #20
   162c4:	orrge	r1, r5
   162c6:	popge	{r4, r5, pc}
   162c8:	mvn.w	r4, r4
   162cc:	subs	r4, #31
   162ce:	bge.n	1630a <__adddf3+0x1d2>
   162d0:	adds	r4, #12
   162d2:	bgt.n	162f2 <__adddf3+0x1ba>
   162d4:	add.w	r4, r4, #20
   162d8:	rsb	r2, r4, #32
   162dc:	lsr.w	r0, r0, r4
   162e0:	lsl.w	r3, r1, r2
   162e4:	orr.w	r0, r0, r3
   162e8:	lsr.w	r3, r1, r4
   162ec:	orr.w	r1, r5, r3
   162f0:	pop	{r4, r5, pc}
   162f2:	rsb	r4, r4, #12
   162f6:	rsb	r2, r4, #32
   162fa:	lsr.w	r0, r0, r2
   162fe:	lsl.w	r3, r1, r4
   16302:	orr.w	r0, r0, r3
   16306:	mov	r1, r5
   16308:	pop	{r4, r5, pc}
   1630a:	lsr.w	r0, r1, r4
   1630e:	mov	r1, r5
   16310:	pop	{r4, r5, pc}
   16312:	teq	r4, #0
   16316:	eor.w	r3, r3, #1048576	; 0x100000
   1631a:	itte	eq
   1631c:	eoreq.w	r1, r1, #1048576	; 0x100000
   16320:	addeq	r4, #1
   16322:	subne	r5, #1
   16324:	b.n	161c4 <__adddf3+0x8c>
   16326:	mvns.w	ip, r4, asr #21
   1632a:	it	ne
   1632c:	mvnsne.w	ip, r5, asr #21
   16330:	beq.n	16386 <__adddf3+0x24e>
   16332:	teq	r4, r5
   16336:	it	eq
   16338:	teqeq	r0, r2
   1633c:	beq.n	1634a <__adddf3+0x212>
   1633e:	orrs.w	ip, r4, r0
   16342:	itt	eq
   16344:	moveq	r1, r3
   16346:	moveq	r0, r2
   16348:	pop	{r4, r5, pc}
   1634a:	teq	r1, r3
   1634e:	ittt	ne
   16350:	movne	r1, #0
   16352:	movne	r0, #0
   16354:	popne	{r4, r5, pc}
   16356:	movs.w	ip, r4, lsr #21
   1635a:	bne.n	16368 <__adddf3+0x230>
   1635c:	lsls	r0, r0, #1
   1635e:	adcs	r1, r1
   16360:	it	cs
   16362:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   16366:	pop	{r4, r5, pc}
   16368:	adds.w	r4, r4, #4194304	; 0x400000
   1636c:	itt	cc
   1636e:	addcc.w	r1, r1, #1048576	; 0x100000
   16372:	popcc	{r4, r5, pc}
   16374:	and.w	r5, r1, #2147483648	; 0x80000000
   16378:	orr.w	r1, r5, #2130706432	; 0x7f000000
   1637c:	orr.w	r1, r1, #15728640	; 0xf00000
   16380:	mov.w	r0, #0
   16384:	pop	{r4, r5, pc}
   16386:	mvns.w	ip, r4, asr #21
   1638a:	itte	ne
   1638c:	movne	r1, r3
   1638e:	movne	r0, r2
   16390:	mvnseq.w	ip, r5, asr #21
   16394:	itt	ne
   16396:	movne	r3, r1
   16398:	movne	r2, r0
   1639a:	orrs.w	r4, r0, r1, lsl #12
   1639e:	itte	eq
   163a0:	orrseq.w	r5, r2, r3, lsl #12
   163a4:	teqeq	r1, r3
   163a8:	orrne.w	r1, r1, #524288	; 0x80000
   163ac:	pop	{r4, r5, pc}
   163ae:	nop

000163b0 <__aeabi_ui2d>:
   163b0:	teq	r0, #0
   163b4:	itt	eq
   163b6:	moveq	r1, #0
   163b8:	bxeq	lr
   163ba:	push	{r4, r5, lr}
   163bc:	mov.w	r4, #1024	; 0x400
   163c0:	add.w	r4, r4, #50	; 0x32
   163c4:	mov.w	r5, #0
   163c8:	mov.w	r1, #0
   163cc:	b.n	16270 <__adddf3+0x138>
   163ce:	nop

000163d0 <__aeabi_i2d>:
   163d0:	teq	r0, #0
   163d4:	itt	eq
   163d6:	moveq	r1, #0
   163d8:	bxeq	lr
   163da:	push	{r4, r5, lr}
   163dc:	mov.w	r4, #1024	; 0x400
   163e0:	add.w	r4, r4, #50	; 0x32
   163e4:	ands.w	r5, r0, #2147483648	; 0x80000000
   163e8:	it	mi
   163ea:	negmi	r0, r0
   163ec:	mov.w	r1, #0
   163f0:	b.n	16270 <__adddf3+0x138>
   163f2:	nop

000163f4 <__aeabi_f2d>:
   163f4:	lsls	r2, r0, #1
   163f6:	mov.w	r1, r2, asr #3
   163fa:	mov.w	r1, r1, rrx
   163fe:	mov.w	r0, r2, lsl #28
   16402:	itttt	ne
   16404:	andsne.w	r3, r2, #4278190080	; 0xff000000
   16408:	teqne	r3, #4278190080	; 0xff000000
   1640c:	eorne.w	r1, r1, #939524096	; 0x38000000
   16410:	bxne	lr
   16412:	bics.w	r2, r2, #4278190080	; 0xff000000
   16416:	it	eq
   16418:	bxeq	lr
   1641a:	teq	r3, #4278190080	; 0xff000000
   1641e:	itt	eq
   16420:	orreq.w	r1, r1, #524288	; 0x80000
   16424:	bxeq	lr
   16426:	push	{r4, r5, lr}
   16428:	mov.w	r4, #896	; 0x380
   1642c:	and.w	r5, r1, #2147483648	; 0x80000000
   16430:	bic.w	r1, r1, #2147483648	; 0x80000000
   16434:	b.n	16270 <__adddf3+0x138>
   16436:	nop

00016438 <__aeabi_ul2d>:
   16438:	orrs.w	r2, r0, r1
   1643c:	it	eq
   1643e:	bxeq	lr
   16440:	push	{r4, r5, lr}
   16442:	mov.w	r5, #0
   16446:	b.n	1645e <__aeabi_l2d+0x16>

00016448 <__aeabi_l2d>:
   16448:	orrs.w	r2, r0, r1
   1644c:	it	eq
   1644e:	bxeq	lr
   16450:	push	{r4, r5, lr}
   16452:	ands.w	r5, r1, #2147483648	; 0x80000000
   16456:	bpl.n	1645e <__aeabi_l2d+0x16>
   16458:	negs	r0, r0
   1645a:	sbc.w	r1, r1, r1, lsl #1
   1645e:	mov.w	r4, #1024	; 0x400
   16462:	add.w	r4, r4, #50	; 0x32
   16466:	movs.w	ip, r1, lsr #22
   1646a:	beq.w	1621e <__adddf3+0xe6>
   1646e:	mov.w	r2, #3
   16472:	movs.w	ip, ip, lsr #3
   16476:	it	ne
   16478:	addne	r2, #3
   1647a:	movs.w	ip, ip, lsr #3
   1647e:	it	ne
   16480:	addne	r2, #3
   16482:	add.w	r2, r2, ip, lsr #3
   16486:	rsb	r3, r2, #32
   1648a:	lsl.w	ip, r0, r3
   1648e:	lsr.w	r0, r0, r2
   16492:	lsl.w	lr, r1, r3
   16496:	orr.w	r0, r0, lr
   1649a:	lsr.w	r1, r1, r2
   1649e:	add	r4, r2
   164a0:	b.n	1621e <__adddf3+0xe6>
   164a2:	nop

000164a4 <__aeabi_d2lz>:
   164a4:	push	{r3, lr}
   164a6:	mov	r2, r0
   164a8:	mov	r3, r1
   164aa:	vmov	d7, r2, r3
   164ae:	vcmpe.f64	d7, #0.0
   164b2:	vmrs	APSR_nzcv, fpscr
   164b6:	bmi.n	164c0 <__aeabi_d2lz+0x1c>
   164b8:	ldmia.w	sp!, {r3, lr}
   164bc:	b.w	164d8 <__aeabi_d2ulz>
   164c0:	vneg.f64	d7, d7
   164c4:	vmov	r0, r1, d7
   164c8:	bl	164d8 <__aeabi_d2ulz>
   164cc:	negs	r0, r0
   164ce:	sbc.w	r1, r1, r1, lsl #1
   164d2:	pop	{r3, pc}
   164d4:	movs	r0, r0
	...

000164d8 <__aeabi_d2ulz>:
   164d8:	vldr	d6, [pc, #44]	; 16508 <__aeabi_d2ulz+0x30>
   164dc:	vmov	d7, r0, r1
   164e0:	vldr	d5, [pc, #44]	; 16510 <__aeabi_d2ulz+0x38>
   164e4:	vmul.f64	d6, d7, d6
   164e8:	vcvt.u32.f64	s12, d6
   164ec:	vcvt.f64.u32	d4, s12
   164f0:	vfms.f64	d7, d4, d5
   164f4:	vcvt.u32.f64	s15, d7
   164f8:	vmov	r1, s12
   164fc:	vmov	r0, s15
   16500:	bx	lr
   16502:	nop
   16504:	nop.w
   16508:	.word	0x00000000
   1650c:	.word	0x3df00000
   16510:	.word	0x00000000
   16514:	.word	0x41f00000

00016518 <___reboot_Teensyduino__veneer>:
   16518:	ldr.w	pc, [pc]	; 1651c <___reboot_Teensyduino__veneer+0x4>
   1651c:	.word	0x60001741

00016520 <___init_veneer>:
   16520:	ldr.w	pc, [pc]	; 16524 <___init_veneer+0x4>
   16524:	.word	0x600022c5

00016528 <___ZN16CrashReportClasscvbEv_veneer>:
   16528:	ldr.w	pc, [pc]	; 1652c <___ZN16CrashReportClasscvbEv_veneer+0x4>
   1652c:	.word	0x60002269

00016530 <___Z14set_audioClockilm_veneer>:
   16530:	ldr.w	pc, [pc]	; 16534 <___Z14set_audioClockilm_veneer+0x4>
   16534:	.word	0x60002371

00016538 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   16538:	ldr.w	pc, [pc]	; 1653c <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   1653c:	.word	0x60001dc5

00016540 <__usb_init_veneer>:
   16540:	ldr.w	pc, [pc]	; 16544 <__usb_init_veneer+0x4>
   16544:	.word	0x6000165d
	...

Disassembly of section .fini:

00016550 <_fini>:
   16550:	push	{r3, r4, r5, r6, r7, lr}
   16552:	nop

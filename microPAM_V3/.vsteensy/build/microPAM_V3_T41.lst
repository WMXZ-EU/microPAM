
.vsteensy/build/microPAM_V3_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
600024d0 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
000120f0 l    d  .fini	00000000 .fini
000120f4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
200026c0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60016ee4 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
600018ec l     F .text.code	00000024 flexspi2_command
60001910 l     F .text.code	0000002c flexspi2_psram_id
60001400 l     F .text.code	00000012 memory_copy
60001412 l     F .text.code	0000001a memory_clear.constprop.0
6000142c l     F .text.code	00000208 ResetHandler2
00000000 l    df *ABS*	00000000 WireIMXRT.cpp
00000000 l    df *ABS*	00000000 usb.c
0000aca4 l     F .text.itcm	000000a0 endpoint0_receive
0000ad44 l     F .text.itcm	0000007c schedule_transfer
0000adc0 l     F .text.itcm	00000034 run_callbacks
0000adf4 l     F .text.itcm	0000001c usb_endpoint_config
0000ae10 l     F .text.itcm	00000094 endpoint0_transmit.constprop.0
200155b5 l     O .bss	00000008 endpoint0_buffer
20014b9c l     O .bss	00000004 endpoint0_notify_mask
20007dc0 l     O .bss	00000008 endpoint0_setupdata
20014ba0 l     O .bss	00000004 endpointN_notify_mask
200155bf l     O .bss	00000008 reply_buffer
200155d9 l     O .bss	00000001 sof_usage
200155e1 l     O .bss	00000001 usb_reboot_timer
00000000 l    df *ABS*	00000000 tempmon.c
20014cd0 l     O .bss	00000004 s_hotCount
20014cd4 l     O .bss	00000004 s_hotTemp
20014cd8 l     O .bss	00000004 s_hot_ROOM
20014cdc l     O .bss	00000004 s_roomC_hotC
00000000 l    df *ABS*	00000000 CrashReport.cpp
60001e54 l     F .text.code	00000054 isvalid(arm_fault_info_struct const*) [clone .constprop.0]
00000000 l    df *ABS*	00000000 analog.c
200155b4 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 crti.o
00000000 l    df *ABS*	00000000 crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 register_tm_clones
00000044 l     F .text.itcm	00000000 frame_dummy
20014c38 l     O .bss	00000000 object.0
600024c0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 microPAM_V3.ino
0000006c l     F .text.itcm	00000002 __tcf_0
00000120 l     F .text.itcm	00000040 usb_serial_class::operator bool() [clone .isra.0]
00000160 l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
00000168 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
0000018c l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00000190 l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00000698 l     F .text.itcm	000000f0 _GLOBAL__sub_I_storage
20007dcc l     O .bss	00000004 guard variable for loop::status
20014840 l     O .bss	00000004 loop::t0
200153b4 l     O .bss	00000002 loop::mxb
200153b6 l     O .bss	00000002 loop::status
20014844 l     O .bss	00000004 loop::loopCount
2000109a l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Acq.cpp
000008e4 l     F .text.itcm	000000b8 acq_isr()
20200000 l     O .bss.dma	00001000 i2s_buffer
00000c50 l     F .text.itcm	00000024 _GLOBAL__sub_I_procCount
20013fdc l     O .bss	00000008 dma
00000000 l    df *ABS*	00000000 Filing.cpp
0000298a l     F .text.itcm	00000020 FsBaseFile::seekSet(unsigned long long) [clone .isra.0]
000029aa l     F .text.itcm	00000008 Print::print(unsigned long) [clone .isra.0]
000029b2 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
000029d6 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
000029da l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
20007dd0 l     O .bss	00006000 diskBuffer
2000dfdc l     O .bss	00006000 tempBuffer0
00003388 l     F .text.itcm	00000030 _GLOBAL__sub_I_t_acq
2000ddd0 l     O .bss	00000200 fileHeader
20015496 l     O .bss	00000050 dirName
200143f4 l     O .bss	00000200 wav_hdr
200154e6 l     O .bss	00000050 fileName
2001483c l     O .bss	00000004 checkEndOfFile(short)::dta
2001553a l     O .bss	00000050 timeStamp()::date_time
20002100 l     O .data	00000004 newFolder(int)::d0
00000000 l    df *ABS*	00000000 usb_desc.c
2000230d l     O .data	00000012 device_descriptor
6000271e l     O .text.progmem	0000000a qualifier_descriptor
00000000 l    df *ABS*	00000000 Storage.cpp
00000c9e l     F .text.itcm	00000026 FsBaseFile::getName(char*, unsigned int) [clone .isra.0]
00000cc4 l     F .text.itcm	00000016 Print::println(unsigned long) [clone .isra.0]
00000d00 l     F .text.itcm	0000003c dbgPrint(unsigned short)
00001104 l     F .text.itcm	00000064 MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]
00001694 l     F .text.itcm	0000002e MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]
000017fc l     F .text.itcm	0000009c MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]
00001b64 l     F .text.itcm	00000138 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]
00000000 l    df *ABS*	00000000 Menu.cpp
00001ebc l     F .text.itcm	00000012 Print::println(int) [clone .isra.0]
00001ece l     F .text.itcm	00000006 Print::print(char) [clone .isra.0]
00001ed4 l     F .text.itcm	00000024 Print::write(char const*) [clone .isra.0]
00001ef8 l     F .text.itcm	00000004 Print::print(char const*) [clone .isra.0]
00001efc l     F .text.itcm	00000012 Print::println(char const*) [clone .isra.0]
00001f10 l     F .text.itcm	00000038 menuGetLine()
00001f48 l     F .text.itcm	0000001c menuGetInt32(long*) [clone .isra.0]
00001f64 l     F .text.itcm	0000001c menuGetInt16(short*) [clone .isra.0]
20015394 l     O .bss	00000020 store
2001558a l     O .bss	00000028 menuGetLine()::buffer
200010c2 l     O .data	00000028 version
00000000 l    df *ABS*	00000000 Queue.cpp
70000000 l     O .bss.extram	00240000 data_buffer
2000dfd4 l     O .bss	00000004 queue_busy
200141e4 l     O .bss	00000004 head
200141e8 l     O .bss	00000004 tail
00000000 l    df *ABS*	00000000 Compress.cpp
20013fe4 l     O .bss	00000200 dout
200141f4 l     O .bss	00000200 outData
200145f4 l     O .bss	00000200 tempData
20014848 l     O .bss	00000004 compress(void*)::nout
00000000 l    df *ABS*	00000000 Adc.cpp
000036fc l     F .text.itcm	00000024 Print::print(char const*) [clone .isra.0]
2000108e l     O .data	00000004 regs
20001092 l     O .data	00000008 chmap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 RTC.cpp
20001101 l     O .data	0000000c monthDays
00000000 l    df *ABS*	00000000 MTP.cpp
00003cd2 l     F .text.itcm	00000016 MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]
00003ce8 l     F .text.itcm	00000078 MTPD::write(char const*, int) [clone .part.0]
0000475a l     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]
2001484c l     O .bss	00000004 MTPD::read(char*, unsigned long)::index
20014850 l     O .bss	00000004 MTPD::write(char const*, int)::dst
20000b5c l     O .data	00000014 propertyList
20000b70 l     O .data	00000028 supported_op
00000000 l    df *ABS*	00000000 SPI.cpp
00000000 l    df *ABS*	00000000 FsUtf.cpp
00000000 l    df *ABS*	00000000 FsCache.cpp
00000000 l    df *ABS*	00000000 upcase.cpp
20000a30 l     O .data	0000012c lookupTable
20000b98 l     O .data	000000d4 mapTable
00000000 l    df *ABS*	00000000 FsName.cpp
00000000 l    df *ABS*	00000000 ExFatName.cpp
00000000 l    df *ABS*	00000000 ExFatFile.cpp
00000000 l    df *ABS*	00000000 ExFatPartition.cpp
00000000 l    df *ABS*	00000000 ExFatVolume.cpp
00000000 l    df *ABS*	00000000 ExFatFileWrite.cpp
000065a8 l     F .text.itcm	0000002e exFatDirChecksum(unsigned char const*, unsigned short)
00000000 l    df *ABS*	00000000 FatName.cpp
00000000 l    df *ABS*	00000000 FatFile.cpp
00006f68 l     F .text.itcm	00000030 FatFile::openRoot(FatVolume*) [clone .part.0]
00000000 l    df *ABS*	00000000 FatPartition.cpp
00000000 l    df *ABS*	00000000 FatVolume.cpp
00000000 l    df *ABS*	00000000 FatFileLFN.cpp
00008030 l     F .text.itcm	0000001e FatFile::lfnChecksum(unsigned char*) [clone .isra.0]
00000000 l    df *ABS*	00000000 FsFile.cpp
00000000 l    df *ABS*	00000000 FsVolume.cpp
00000000 l    df *ABS*	00000000 FsNew.cpp
00000000 l    df *ABS*	00000000 SdSpiCard.cpp
00000000 l    df *ABS*	00000000 SdioTeensy.cpp
000090f0 l     F .text.itcm	0000002c sdIrs()
0000911c l     F .text.itcm	00000020 gpioMux(unsigned char)
0000913c l     F .text.itcm	00000018 isBusyCommandComplete()
00009154 l     F .text.itcm	00000010 isBusyCommandInhibit()
00009164 l     F .text.itcm	00000014 isBusyDat()
00009178 l     F .text.itcm	0000000c isBusyDMA()
00009184 l     F .text.itcm	00000014 isBusyFifoRead()
00009198 l     F .text.itcm	00000014 isBusyFifoWrite()
000091ac l     F .text.itcm	00000018 isBusyTransferComplete()
000091c4 l     F .text.itcm	000000a4 setSdclk(unsigned long)
000092cc l     F .text.itcm	00000024 waitTimeout(bool (*)())
000092f0 l     F .text.itcm	0000003c yieldTimeout(bool (*)())
0000933c l     F .text.itcm	00000030 enableGPIO(bool) [clone .part.0]
0000936c l     F .text.itcm	000000d4 initSDHC()
0000945c l     F .text.itcm	00000068 cardCommand(unsigned long, unsigned long)
000094c4 l     F .text.itcm	00000020 statusCMD13()
000094e4 l     F .text.itcm	00000010 isBusyCMD13()
000094f8 l     F .text.itcm	00000058 readReg16(unsigned long, void*)
00009550 l     F .text.itcm	00000030 waitDmaStatus()
00009580 l     F .text.itcm	00000098 rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)
00009878 l     F .text.itcm	0000005c waitTransferComplete()
00009ae0 l     F .text.itcm	0000008c cardCMD6(unsigned long, unsigned char*)
20015472 l     O .bss	00000001 m_initDone
2000dfd0 l     O .bss	00000004 m_sdClkKhz
20015473 l     O .bss	00000001 m_version2
2000dfd8 l     O .bss	00000004 m_errorLine
20015474 l     O .bss	00000001 m_highCapacity
20015475 l     O .bss	00000001 m_transferActive
20015476 l     O .bss	00000010 m_cid
20015486 l     O .bss	00000010 m_csd
200141ec l     O .bss	00000004 m_ocr
200141f0 l     O .bss	00000004 m_rca
200147f4 l     O .bss	00000004 m_busyFcn
20015536 l     O .bss	00000001 m_dmaBusy
200147f8 l     O .bss	00000004 m_irqstat
2000230c l     O .data	00000001 m_errorCode
00000000 l    df *ABS*	00000000 SdSpiTeensy3.cpp
0000a020 l     F .text.itcm	00000010 SPIClass::transfer(unsigned char) [clone .isra.0]
00000000 l    df *ABS*	00000000 SdSpiChipSelect.cpp
00000000 l    df *ABS*	00000000 memset.o
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000a388 l     F .text.itcm	00000060 rx_queue_transfer
20004b40 l     O .bss	00001000 rx_buffer
0000a3e8 l     F .text.itcm	000000ac rx_event
0000a494 l     F .text.itcm	0000008c usb_serial_flush_callback
20005dc0 l     O .bss	00002000 txbuffer
20014cb8 l     O .bss	00000004 rx_available
200153c6 l     O .bss	00000010 rx_count
200155c7 l     O .bss	00000001 rx_head
200153d6 l     O .bss	00000010 rx_index
200155c9 l     O .bss	00000009 rx_list
200153e6 l     O .bss	00000002 rx_packet_size
200155d7 l     O .bss	00000001 rx_tail
20005b40 l     O .bss	00000100 rx_transfer
200155da l     O .bss	00000001 transmit_previous_timeout
2001546c l     O .bss	00000002 tx_available
200155db l     O .bss	00000001 tx_head
200155dd l     O .bss	00000001 tx_noautoflush
2001546e l     O .bss	00000002 tx_packet_size
20005cc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 eeprom.c
0000ba00 l     F .text.itcm	00000058 flash_wait
200155be l     O .bss	00000001 initialized
200153ea l     O .bss	0000007e sector_index
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000c098 l     F .text.itcm	00000010 txEvent_event
0000c0a8 l     F .text.itcm	0000003c rx_event
0000c0e4 l     F .text.itcm	00000060 rx_queue_transfer
200155c8 l     O .bss	00000001 rx_head
200155d2 l     O .bss	00000005 rx_list
20014cbc l     O .bss	00000014 rx_list_transfer_len
200153e8 l     O .bss	00000002 rx_packet_size
200155d8 l     O .bss	00000001 rx_tail
20005c40 l     O .bss	00000080 rx_transfer
200155dc l     O .bss	00000001 tx_head
20015470 l     O .bss	00000002 tx_packet_size
20005d40 l     O .bss	00000080 tx_transfer
20201000 l     O .bss.dma	00000800 rx_buffer
20201800 l     O .bss.dma	00000800 txbuffer
00000000 l    df *ABS*	00000000 yield.cpp
20015539 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 DMAChannel.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
0000c6aa l     F .text.itcm	00000064 Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]
00000000 l    df *ABS*	00000000 new.cpp
00000000 l    df *ABS*	00000000 atexit_arm.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 _udivmoddi4.o
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libc_a-malloc.o
00000000 l    df *ABS*	00000000 libc_a-mallocr.o
0000cc70 l     F .text.itcm	00000040 sbrk_aligned
00000000 l    df *ABS*	00000000 libc_a-mlock.o
00000000 l    df *ABS*	00000000 libc_a-reallocr.o
00000000 l    df *ABS*	00000000 libc_a-strtod.o
0000ce12 l     F .text.itcm	00000034 sulp
00000000 l    df *ABS*	00000000 libc_a-strtol.o
0000d9b8 l     F .text.itcm	00000104 _strtol_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-cxa_atexit.o
00000000 l    df *ABS*	00000000 libc_a-efgcvt.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_float.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf_i.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_float.o
00000000 l    df *ABS*	00000000 libc_a-findfp.o
0000e76c l     F .text.itcm	00000048 std
0000e7b4 l     F .text.itcm	00000018 stdio_exit_handler
0000e7cc l     F .text.itcm	00000040 cleanup_stdio
0000e80c l     F .text.itcm	0000003c global_stdio_init.part.0
00000000 l    df *ABS*	00000000 libc_a-fwalk.o
00000000 l    df *ABS*	00000000 libc_a-snprintf.o
00000000 l    df *ABS*	00000000 libc_a-sprintf.o
00000000 l    df *ABS*	00000000 libc_a-sscanf.o
00000000 l    df *ABS*	00000000 libc_a-stdio.o
00000000 l    df *ABS*	00000000 libc_a-vdprintf.o
00000000 l    df *ABS*	00000000 libc_a-vasnprintf.o
00000000 l    df *ABS*	00000000 libc_a-memcmp.o
00000000 l    df *ABS*	00000000 libc_a-memmove.o
00000000 l    df *ABS*	00000000 libc_a-strlcat.o
00000000 l    df *ABS*	00000000 libc_a-strlcpy.o
00000000 l    df *ABS*	00000000 libc_a-strncmp.o
00000000 l    df *ABS*	00000000 libc_a-localeconv.o
00000000 l    df *ABS*	00000000 libc_a-closer.o
00000000 l    df *ABS*	00000000 libc_a-lseekr.o
00000000 l    df *ABS*	00000000 libc_a-readr.o
00000000 l    df *ABS*	00000000 libc_a-sbrkr.o
00000000 l    df *ABS*	00000000 libc_a-writer.o
00000000 l    df *ABS*	00000000 libc_a-errno.o
00000000 l    df *ABS*	00000000 libc_a-init.o
00000000 l    df *ABS*	00000000 libc_a-lock.o
00000000 l    df *ABS*	00000000 libc_a-strcpy.o
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 libm_a-s_nan.o
00000000 l    df *ABS*	00000000 libm_a-sf_nan.o
00000000 l    df *ABS*	00000000 libc_a-dtoa.o
0000edfc l     F .text.itcm	00000110 quorem
00000000 l    df *ABS*	00000000 libc_a-freer.o
00000000 l    df *ABS*	00000000 libc_a-gdtoa-gethex.o
0000fa80 l     F .text.itcm	000000a4 rshift
00000000 l    df *ABS*	00000000 libc_a-gdtoa-hexnan.o
0000ffac l     F .text.itcm	00000024 L_shift
00000000 l    df *ABS*	00000000 libc_a-mbtowc_r.o
00000000 l    df *ABS*	00000000 libc_a-mprec.o
00000000 l    df *ABS*	00000000 libc_a-msizer.o
00000000 l    df *ABS*	00000000 libc_a-wctomb_r.o
00000000 l    df *ABS*	00000000 libc_a-ecvtbuf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-svfscanf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfscanf_i.o
00000000 l    df *ABS*	00000000 libc_a-fflush.o
00000000 l    df *ABS*	00000000 libc_a-sccl.o
00000000 l    df *ABS*	00000000 libc_a-ungetc.o
00000000 l    df *ABS*	00000000 libc_a-assert.o
00000000 l    df *ABS*	00000000 libc_a-callocr.o
00000000 l    df *ABS*	00000000 libc_a-strtoul.o
00011704 l     F .text.itcm	000000e4 _strtoul_l.constprop.0
00000000 l    df *ABS*	00000000 libc_a-fprintf.o
00000000 l    df *ABS*	00000000 libc_a-nano-vfprintf.o
00011810 l     F .text.itcm	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 libc_a-wbuf.o
00000000 l    df *ABS*	00000000 libc_a-wsetup.o
00000000 l    df *ABS*	00000000 libc_a-makebuf.o
00000000 l    df *ABS*	00000000 libc_a-fstatr.o
00000000 l    df *ABS*	00000000 libc_a-isattyr.o
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _fixdfdi.o
00000000 l    df *ABS*	00000000 _fixunsdfdi.o
00000000 l    df *ABS*	00000000 libc_a-locale.o
00000000 l    df *ABS*	00000000 libc_a-impure.o
00000000 l    df *ABS*	00000000 FsDateTime.cpp
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
000120b8 l     F .text.itcm	00000008 ___init_veneer
000120c0 l     F .text.itcm	00000008 ___Z14set_audioClockilm_veneer
000120c8 l     F .text.itcm	00000008 ___ZN7TwoWire5beginEv_veneer
000120d0 l     F .text.itcm	00000008 ___ZNK16CrashReportClass7printToER5Print_veneer
000120d8 l     F .text.itcm	00000008 ___ZN16CrashReportClasscvbEv_veneer
000120e0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
000120e8 l     F .text.itcm	00000008 __usb_init_veneer
60002428 l     F .text.code	00000008 ___ZN5Print5printEh_veneer
60002430 l     F .text.code	00000008 ___ZN5Print7printlnEmi_veneer
60002438 l     F .text.code	00000008 ___ZN5Print5printEmi_veneer
60002440 l     F .text.code	00000008 __memset_veneer
60002448 l     F .text.code	00000008 __set_arm_clock_veneer
60002450 l     F .text.code	00000008 __pwm_init_veneer
60002458 l     F .text.code	00000008 __sm_set_pool_veneer
60002460 l     F .text.code	00000008 __delay_veneer
60002468 l     F .text.code	00000008 ___ZN5Print10printFloatEdh_veneer
60002470 l     F .text.code	00000008 ___ZN5Print7printlnEPKc_veneer
60002478 l     F .text.code	00000008 __main_veneer
60002480 l     F .text.code	00000008 ___ZN16CrashReportClass8checksumEPVKvi_veneer
60002488 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60002490 l     F .text.code	00000008 ____libc_init_array_veneer
60002498 l     F .text.code	00000008 ___ZN7TwoWire8setClockEm_veneer
600024a0 l     F .text.code	00000008 ___ZN5Print5printEl_veneer
600024a8 l     F .text.code	00000008 ___ZN5Print7printlnEv_veneer
600024b0 l     F .text.code	00000008 ___ZN5Print11printNumberEmhh_veneer
600024b8 l     F .text.code	00000008 ___ZN5Print5printEPKc_veneer
00010aa8 g     F .text.itcm	00000010 _malloc_usable_size_r
00006f98  w    F .text.itcm	00000026 FatPartition::cacheSync()
600024d0 g     F .text.progmem	00000048 set_audioClock(int, long, unsigned long)
0000daea g     F .text.itcm	000000a4 __cvt
000056f0 g     F .text.itcm	000000a8 toUpcase(unsigned short)
000010be g     F .text.itcm	0000002c MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)
000111bc g     F .text.itcm	000000b4 _scanf_chars
00002864 g     F .text.itcm	00000060 pushData(unsigned long*)
0000a73c g     F .text.itcm	00000014 usb_serial_available
00010a66 g     F .text.itcm	00000042 __any_on
00011cac g     F .text.itcm	00000020 _isatty_r
0000ed14 g     F .text.itcm	00000010 strcpy
00002fc8 g     F .text.itcm	00000094 do_hibernate()
00007b74 g     F .text.itcm	0000002e FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)
60001940 g     F .text.code	00000002 startup_default_late_hook
0000ec30 g     F .text.itcm	00000024 _lseek_r
00009618 g     F .text.itcm	0000007c SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000c418  w    F .text.itcm	00000074 yield
00008a5c  w    F .text.itcm	0000000e DedicatedSpiCard::~DedicatedSpiCard()
20014c58 g     O .bss	00000060 proc_stat
20015390 g     O .bss	00000004 usb_timer1_callback
00003e68 g     F .text.itcm	00000014 MTPD::GetDevicePropValue(unsigned long)
00003ec0 g     F .text.itcm	00000014 MTPD::write32(unsigned long)
000079d0 g     F .text.itcm	000001a4 FatFile::write(void const*, unsigned int)
0000c786 g     F .text.itcm	00000090 Print::printNumber64(unsigned long long, unsigned char, unsigned char)
200151b8 g     O .bss	000001b8 storage
60002630 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
200153c4 g     O .bss	00000002 proc
60001a58 g     F .text.code	00000274 configure_external_ram
00003c60 g     F .text.itcm	00000002 rtcXferTime()
000089c6  w    F .text.itcm	00000004 DedicatedSpiCard::isDedicatedSpi()
20001e80 g     O .data	00000140 Wire1
000090b0  w    F .text.itcm	00000032 FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
00011fe8 g     F .text.itcm	0000005a .hidden __floatdidf
000081ac g     F .text.itcm	00000124 FatFile::makeSFN(FatLfn_t*)
20014c50 g     O .bss	00000004 procCount
00007edc g     F .text.itcm	00000118 FatPartition::init(FsBlockDeviceInterface*, unsigned char)
200147fc g     O .bss	00000004 FsDateTime::callback
6000165c g     F .text.code	00000034 TwoWire::configSDApin(unsigned char)
000082d0 g     F .text.itcm	00000098 FatFile::makeUniqueSfn(FatLfn_t*)
00008e98 g     F .text.itcm	00000036 SharedSpiCard::writeStart(unsigned long)
0000c720 g     F .text.itcm	0000001a Print::println()
00005404 g     F .text.itcm	00000098 TwoWire::isr()
200004b4 g     O .data	00000070 vtable for DedicatedSpiCard
20014c54 g     O .bss	00000004 procMiss
0000ea2a g     F .text.itcm	00000024 __sseek
0000e860 g     F .text.itcm	00000030 __sinit
00005c1c g     F .text.itcm	000000de ExFatFile::seekSet(unsigned long long)
00010ad4 g     F .text.itcm	00000094 fcvtbuf
00011a98 g     F .text.itcm	0000007a __swbuf_r
00003d86 g     F .text.itcm	0000001e MTPD::moveObject(unsigned long, unsigned long, unsigned long)
0000cda8 g     F .text.itcm	0000000c __malloc_unlock
00003a16 g     F .text.itcm	0000004c i2c_class::read(unsigned char, unsigned char)
20014834 g     O .bss	00000004 FsVolume::m_cwv
000039d0 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
00002834 g     F .text.itcm	00000008 getStore()
00007580 g     F .text.itcm	0000009e FatFile::open(FatFile*, char const*, int)
20007dc8 g     O .bss	00000004 SerNum
20015538 g     O .bss	00000001 HardwareSerialIMXRT::s_count_serials_with_serial_events
000089ba  w    F .text.itcm	00000004 SharedSpiCard::errorData() const
600023d0 g     F .text.code	0000004c analog_init
0000d9ac g     F .text.itcm	0000000c _strtod_r
000016c2 g     F .text.itcm	0000002e MTPStorage_SD::ScanAll(unsigned long)
0000ea56 g     F .text.itcm	0000004a _vdprintf_r
00007662 g     F .text.itcm	00000020 FatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000fb24 g     F .text.itcm	0000002a __hexdig_fun
00008cea g     F .text.itcm	0000003a SharedSpiCard::readOCR(unsigned long*)
0000ba58 g     F .text.itcm	00000044 eeprom_initialize
000032a8 g     F .text.itcm	000000e0 saveData(short)
20015468 g     O .bss	00000002 shift
20001d2c g     O .data	00000004 F_CPU_ACTUAL
0000eb34 g     F .text.itcm	00000034 memmove
000016f0 g     F .text.itcm	00000030 MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)
20014c2c g     O .bss	00000004 max_stat
0000e8cc g     F .text.itcm	00000068 snprintf
00009fa0 g     F .text.itcm	00000064 SdioCard::stopTransmission(bool)
00010154 g     F .text.itcm	00000080 _Balloc
00000c8a  w    F .text.itcm	00000004 MTPStorage_SD::get_FSCount()
000120fc g       .ARM.exidx	00000000 __exidx_end
00007dee g     F .text.itcm	00000044 FatPartition::freeChain(unsigned long)
20015537 g     O .bss	00000001 EventResponder::runningFromYield
0000a196 g     F .text.itcm	0000000a SdSpiArduinoDriver::receive()
000088b0 g     F .text.itcm	000000d4 FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)
0000be8c g     F .text.itcm	00000060 tempmonGetTemp
0000bdcc g     F .text.itcm	0000001e smalloc_verify_pool
0000ecbc g     F .text.itcm	0000000c __errno
00002144 g     F .text.itcm	000000ac saveParameters()
60001000 g     O .text.headers	00000020 ImageVectorTable
2001480c g     O .bss	00000004 EventResponder::firstInterrupt
0000b498 g     F .text.itcm	00000028 usb_transfer_status
00004016 g     F .text.itcm	00000050 MTPD::GetObjectHandles(unsigned long, unsigned long)
0000be1e g     F .text.itcm	0000006a sm_set_pool
00002d7c g     F .text.itcm	00000014 newFolder(int)
20014814 g     O .bss	00000020 HardwareSerialIMXRT::s_serials_with_serial_events
00003c62 g     F .text.itcm	00000004 rtcGetTimestamp()
20014994 g     O .bss	00000004 __stdio_exit_handler
000004e0  w    F .text.itcm	00000072 SdBase<FsVolume, FsFormatter>::freeClusterCount()
00006544 g     F .text.itcm	00000018 ExFatPartition::rootLength()
00012044 g     F .text.itcm	00000030 .hidden __aeabi_d2lz
0000c61c  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
00011c88 g     F .text.itcm	00000024 _fstat_r
20000614 g     O .data	00000370 digital_pin_to_info_PGM
20014ba4 g     O .bss	00000004 errno
0000a1a0 g     F .text.itcm	00000022 SdSpiArduinoDriver::receive(unsigned char*, unsigned int)
000062c8 g     F .text.itcm	00000040 ExFatPartition::fatGet(unsigned long, unsigned long*)
60002568  w    O .text.progmem	00000050 TwoWire::i2c3_hardware
00011270 g     F .text.itcm	000001e8 _scanf_i
0000e9ee g     F .text.itcm	00000004 __seofread
000120f8 g       .text.itcm	00000000 _etext
000085ec g     F .text.itcm	000000ac FatFile::parsePathName(char const*, FatLfn_t*, char const**)
200026c0 g       .bss	00000000 _sbss
00009274 g     F .text.itcm	0000000c SdioCard::errorData() const
00000d86 g     F .text.itcm	0000001c MTPStorage_SD::totalSize(unsigned long)
00003c7c g     F .text.itcm	0000000e rtc_set_datetime(datetime_t*)
00003e16 g     F .text.itcm	00000016 MTPD::write16(unsigned short)
0000195c g     F .text.itcm	000000e6 MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)
000098d4 g     F .text.itcm	000000a4 SdioCard::writeSector(unsigned long, unsigned char const*)
00006464 g     F .text.itcm	000000e0 ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)
60002728 g       *ABS*	00000000 _stextload
0000027c g     F .text.itcm	00000224 loop
0000bf90 g     F .text.itcm	00000072 flexpwm_init
0000bb1c g     F .text.itcm	000000dc eepromemu_flash_write
60001942 g     F .text.code	00000004 startup_debug_reset
0000b3ac g     F .text.itcm	00000040 usb_config_rx
00004250 g     F .text.itcm	0000010c MTPD::GetStorageInfo(unsigned long)
000059ec g     F .text.itcm	00000080 ExFatFile::parsePathName(char const*, ExName_t*, char const**)
00009dd8 g     F .text.itcm	000000b4 SdioCard::readData(unsigned char*)
0000520c g     F .text.itcm	000000e4 TwoWire::endTransmission(unsigned char)
00003a62 g     F .text.itcm	0000003c i2c_class::write(unsigned char, unsigned char, unsigned char)
20014808 g     O .bss	00000004 EventResponder::lastInterrupt
00008750 g     F .text.itcm	0000002a FsBaseFile::close()
0000eaa0 g     F .text.itcm	00000014 vdiprintf
00004fd6 g     F .text.itcm	00000048 SPIClass::end()
0000a254 g     F .text.itcm	00000134 memcpy
0000fff8 g     F .text.itcm	00000136 __hexnan
00001720 g     F .text.itcm	000000dc MTPStorage_SD::removeFile(unsigned long, char*)
00008f60 g     F .text.itcm	00000032 SharedSpiCard::writeStop()
00005538 g     F .text.itcm	00000092 FsUtf::cpToMb(unsigned long, char*, char*)
0000156e g     F .text.itcm	00000126 MTPStorage_SD::ScanDir(unsigned long, unsigned long)
00002134 g     F .text.itcm	00000008 storeConfig(unsigned short*, int)
200026c0 g     O .data	00000000 .hidden __TMC_END__
00002a44 g     F .text.itcm	000000e4 wavHeaderInit(long, long, long, int)
000063a8 g     F .text.itcm	0000005a ExFatPartition::freeChain(unsigned long)
00001428 g     F .text.itcm	0000007a MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)
00007242 g     F .text.itcm	00000026 FatFile::peek()
000021f0 g     F .text.itcm	00000074 menu1(short)
20014c34 g     O .bss	00000004 nbuf
00010c1c g     F .text.itcm	000001fc _svfprintf_r
00011f70 g     F .text.itcm	00000022 .hidden __floatsidf
20015374 g     O .bss	00000004 systick_millis_count
00006a48 g     F .text.itcm	00000094 ExFatFile::rename(ExFatFile*, char const*)
0000c27c g     F .text.itcm	00000030 usb_mtp_available
000004a0 g     F .text.itcm	00000040 setup1()
000051d8 g     F .text.itcm	00000034 TwoWire::wait_idle()
0000eab4 g     F .text.itcm	00000060 _vasniprintf_r
00004998 g     F .text.itcm	000005e6 MTPD::loop()
0000c954 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
200155df g     O .bss	00000001 usb_configuration
000089b0  w    F .text.itcm	00000006 SdCardInterface::status()
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000bdea g     F .text.itcm	00000034 sm_align_pool
0000a004 g     F .text.itcm	0000001c SdioCard::syncDevice()
000099ec g     F .text.itcm	00000088 SdioCard::writeData(unsigned char const*)
000000d0  w    F .text.itcm	00000050 StreamFile<FsBaseFile, unsigned long long>::available()
00007268 g     F .text.itcm	0000003e FatFile::readDirCache(bool)
000109c0 g     F .text.itcm	00000060 __ratio
00008a6a g     F .text.itcm	0000007e SharedSpiCard::sectorCount()
60002630  w    O .text.progmem	00000018 usb_string_manufacturer_name
60002608 g     O .text.progmem	00000008 usb_string_mtp
0000cc50 g     F .text.itcm	00000010 malloc
00000248 g     F .text.itcm	00000010 reboot()
000039d0 g     F .text.itcm	00000024 i2c_class::i2c_class(TwoWire*, unsigned long)
600025b8  w    O .text.progmem	00000050 TwoWire::i2c1_hardware
2000054c  w    O .data	00000024 vtable for FsFile
0000b97e  w    F .text.itcm	0000000a _fstat
20014998 g     O .bss	00000200 acqBuffer
0000502a  w    F .text.itcm	0000001e TwoWire::read()
0001169c g     F .text.itcm	0000003c __assert_func
00004964 g     F .text.itcm	00000034 MTPD::setObjectPropValue(unsigned long, unsigned long)
00002e90 g     F .text.itcm	00000124 getAlarmTime(unsigned long)
20000328 g     O .data	000000c8 __mprec_tens
600017b4 g     F .text.code	000000e4 usb_init
0000877a g     F .text.itcm	00000060 FsBaseFile::operator=(FsBaseFile const&)
200151b0 g     O .bss	00000004 sessionID_
000089b6  w    F .text.itcm	00000004 SharedSpiCard::errorCode() const
00000c74  w    F .text.itcm	00000016 MTPStorage_SD::addFilesystem(SdFs&, char const*)
0000b9bc g     F .text.itcm	00000044 rtc_set
00010e92 g     F .text.itcm	0000003a __ssrefill_r
20015378 g     O .bss	00000004 systick_safe_read
000050c4 g     F .text.itcm	00000114 TwoWire::force_clock()
aaaaaabf g       *ABS*	00000000 _flexram_bank_config
00006adc g     F .text.itcm	000000ca ExFatFile::truncate()
20002108 g     O .data	00000000 .hidden __dso_handle
0000bbf8 g     F .text.itcm	000000b4 eepromemu_flash_erase_sector
00011f50 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000ec08 g     F .text.itcm	00000008 _localeconv_r
200022e0 g     O .data	00000004 sd_str
0000a142 g     F .text.itcm	0000004e SdSpiArduinoDriver::deactivate()
000103d4 g     F .text.itcm	0000002c __i2b
20000000 g       .data	00000000 _sdata
0000c144 g     F .text.itcm	000000a4 usb_mtp_configure
200022f4 g     O .data	00000002 t_on
600026b5 g     O .text.progmem	00000069 usb_config_descriptor_480
0000c984 g     F .text.itcm	000002c8 .hidden __udivmoddi4
00004178 g     F .text.itcm	000000d8 MTPD::getObjectPropValue(unsigned long, unsigned long)
00011ccc g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000a190 g     F .text.itcm	00000006 SdSpiArduinoDriver::end()
00006fbe g     F .text.itcm	00000036 FatFile::addCluster()
0000ec78 g     F .text.itcm	00000020 _sbrk_r
200153ba g     O .bss	00000002 d_rep
00009440 g     F .text.itcm	0000001c SdioCard::type() const
00003db8 g     F .text.itcm	00000010 MTPD::openSession(unsigned long)
6000193c g     F .text.code	00000002 startup_default_early_hook
60001634 g     F .text.code	00000028 ResetHandler
0000a7b0 g     F .text.itcm	0000001e usb_serial_getchar
00000d6e  w    F .text.itcm	00000018 FsVolume::clusterCount() const
20015380 g     O .bss	00000008 usb_cdc_line_coding
0000beec g     F .text.itcm	00000040 digitalWrite
00007bcc  w    F .text.itcm	00000012 FatPartition::fatCachePrepare(unsigned long, unsigned char)
20014810 g     O .bss	00000004 EventResponder::lastYield
000059c6 g     F .text.itcm	00000026 ExFatFile::openRoot(ExFatVolume*)
0000ec54 g     F .text.itcm	00000024 _read_r
00000cda  w    F .text.itcm	00000024 Print::write(char const*)
2001537c g     O .bss	00000004 termon
00000082  w    F .text.itcm	00000036 StreamFile<FsBaseFile, unsigned long long>::read()
00008a54  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
20014ba8 g     O .bss	00000010 extmem_smalloc_pool
00008de0 g     F .text.itcm	00000054 DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)
0000bf2c g     F .text.itcm	00000064 pinMode
000014a2 g     F .text.itcm	00000028 MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)
00000f04  w    F .text.itcm	0000001c FsFile::FsFile()
0000c818 g     F .text.itcm	0000012c Print::printFloat(double, unsigned char)
00011f94 g     F .text.itcm	00000042 .hidden __extendsfdf2
00010ecc g     F .text.itcm	000002f0 __ssvfscanf_r
0000c5e0  w    F .text.itcm	00000024 CrashReportClass::checksum(void const volatile*, int)
00000ebc  w    F .text.itcm	00000018 FsBaseFile::read(void*, unsigned int)
00011cd8 g     F .text.itcm	00000276 .hidden __adddf3
60001690 g     F .text.code	00000050 TwoWire::setSDA(unsigned char)
20001fc0 g     O .data	00000140 Wire2
00004148 g     F .text.itcm	00000030 MTPD::getObjectPropsSupported(unsigned long)
00003da4 g     F .text.itcm	00000012 MTPD::copyObject(unsigned long, unsigned long, unsigned long)
60017000 g     O .text.csf	00000c00 hab_csf
00003e2c g     F .text.itcm	0000003a MTPD::writestring(char const*)
00007e34 g     F .text.itcm	000000a8 FatPartition::freeClusterCount()
20280000 g       .text.csf	00000000 _heap_end
00010878 g     F .text.itcm	00000094 __b2d
00003788 g     F .text.itcm	000001a4 adc_init()
000120f4 g       .ARM.exidx	00000000 __exidx_start
70240000 g       .bss.extram	00000000 _extram_end
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
0000c5bc  w    F .text.itcm	00000008 Print::print(unsigned char)
0000b988  w    F .text.itcm	00000004 _isatty
200153b8 g     O .bss	00000002 d_0
20014804 g     O .bss	00000004 EventResponder::firstYield
00000ef6 g     F .text.itcm	0000000c MTPStorage_SD::write(char const*, unsigned long)
000055cc g     F .text.itcm	00000088 FsUtf::mbToCp(char const*, char const*, unsigned long*)
000001fe  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)
0000cdb4 g     F .text.itcm	0000005e _realloc_r
0000ecc8 g     F .text.itcm	00000048 __libc_init_array
0000b508 g     F .text.itcm	00000248 dtostrf
0000501e  w    F .text.itcm	0000000c TwoWire::available()
00006112 g     F .text.itcm	0000000e ExFatFile::open(ExFatVolume*, char const*, int)
00009280 g     F .text.itcm	0000001c SdioCard::readCID(CID*)
00006892 g     F .text.itcm	000000b0 ExFatFile::addDirCluster()
00001562 g     F .text.itcm	0000000c MTPStorage_SD::GenerateIndex(unsigned long)
00001b20 g     F .text.itcm	00000042 mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)
000039f4 g     F .text.itcm	00000022 i2c_class::exist(unsigned char)
20000300 g     O .data	00000028 __mprec_bigtens
000102a4 g     F .text.itcm	00000094 __s2b
00008d62  w    F .text.itcm	00000008 SharedSpiCard::readCID(CID*)
0000b992  w    F .text.itcm	00000004 abort
000052f0 g     F .text.itcm	00000114 TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)
0000c604  w    F .text.itcm	00000004 usb_serial_class::clear()
00011f50 g     F .text.itcm	0000001e .hidden __floatunsidf
0000b948  w    F .text.itcm	0000002c _sbrk
60014824 g       *ABS*	00000000 _sdataload
000106e0 g     F .text.itcm	00000038 __mcmp
000018a6 g     F .text.itcm	000000b6 mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)
20002104 g     O .data	00000004 __brkval
200155de g     O .bss	00000001 usb_cdc_line_rtsdtr
6000241c g     F .text.code	00000000 _init
0000a520 g     F .text.itcm	00000002 usb_serial_reset
00007064 g     F .text.itcm	0000001e FatFile::cacheDirEntry(unsigned char)
0000bcac g     F .text.itcm	00000104 eeprom_write_byte
00000fdc  w    F .text.itcm	0000004e mSD_Base::sd_rmdir(unsigned long, char*)
00012078 g     F .text.itcm	00000040 .hidden __aeabi_d2ulz
6000264c g     O .text.progmem	00000069 usb_config_descriptor_12
20000570 g     O .data	00000024 vtable for TwoWire
0000ce48 g     F .text.itcm	00000b64 _strtod_l
0000ffd0 g     F .text.itcm	00000028 __match
20015620 g       .bss	00000000 _ebss
00009694 g     F .text.itcm	0000007c SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00003ed4 g     F .text.itcm	00000118 MTPD::WriteDescriptor()
200022d8 g     O .data	00000004 propertyListNum
600016e0 g     F .text.code	00000034 TwoWire::configSCLpin(unsigned char)
0000006e  w    F .text.itcm	00000014 StreamFile<FsBaseFile, unsigned long long>::flush()
00010338 g     F .text.itcm	00000040 __hi0bits
0000593a g     F .text.itcm	00000038 ExFatFile::dirCache(unsigned char, unsigned char)
60001ea8 g     F .text.code	00000074 CrashReportClass::clear()
000054a8 g     F .text.itcm	0000000c lpi2c3_isr()
00006942 g     F .text.itcm	00000048 ExFatFile::mkdir(ExFatFile*, ExName_t*)
20202080 g       .bss.dma	00000000 _heap_start
00003fec g     F .text.itcm	0000002a MTPD::WriteStorageIDs()
200155b2 g     O .bss	00000001 __lock___malloc_recursive_mutex
200022f0 g     O .data	00000002 h_4
00001c9c g     F .text.itcm	000001d8 MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)
0000655c g     F .text.itcm	0000004c ExFatVolume::chdir(char const*)
60002518  w    O .text.progmem	00000050 TwoWire::i2c4_hardware
000008d8  w    F .text.itcm	0000000c DMAChannel::~DMAChannel()
2001485c g     O .bss	00000138 __sf
20001d24 g     O .data	00000004 CrashReport
20014ce4 g     O .bss	000004cc sdx
00008c60 g     F .text.itcm	0000008a SharedSpiCard::cardCommand(unsigned char, unsigned long)
00000554 g     F .text.itcm	00000144 storage_configure()
00000003 g       *ABS*	00000000 _itcm_block_count
200026e0 g     O .bss	00000020 endpoint0_transfer_data
00006dce g     F .text.itcm	00000028 FatFile::getLfnChar(DirLfn_t*, unsigned char)
000056a2 g     F .text.itcm	0000004c FsCache::prepare(unsigned long, unsigned char)
0000c944 g     F .text.itcm	00000004 operator delete(void*, unsigned int)
0000c038 g     F .text.itcm	00000060 pwm_init
000117ec g     F .text.itcm	00000024 fprintf
00011cd8 g     F .text.itcm	00000276 .hidden __aeabi_dadd
20014bb8 g     O .bss	00000050 file
000046cc g     F .text.itcm	0000001e MTPD::ReadMTPHeader()
2000231f g     O .data	00000001 usb_mtp_status
60017c00 g       .text.csf	00000000 __text_csf_end
60001ccc g     F .text.code	0000005c usb_pll_start
00010554 g     F .text.itcm	000000b4 __pow5mult
00007346 g     F .text.itcm	0000004c FatFile::rmdir()
200004a8 g     O .data	0000000c vtable for CrashReportClass
00011fd8 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
000054b4 g     F .text.itcm	0000000c lpi2c4_isr()
00007d6c g     F .text.itcm	00000082 FatPartition::allocateCluster(unsigned long, unsigned long*)
20014c08 g     O .bss	00000004 haveStore
000090ee  w    F .text.itcm	00000002 SdioCard::end()
0000e8cc g     F .text.itcm	00000068 sniprintf
200026c0 g     O .bss	00000020 endpoint0_transfer_ack
20015388 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
0000b458 g     F .text.itcm	00000024 usb_transmit
00000d3c  w    F .text.itcm	00000014 Print::println(char const*)
0000c4c8 g     F .text.itcm	00000020 systick_isr
0000ed12 g     F .text.itcm	00000002 __retarget_lock_release_recursive
00003c66 g     F .text.itcm	00000016 rtc_get_datetime(datetime_t*)
00003de0 g     F .text.itcm	00000020 MTPD::write(char const*, int)
20001d30 g     O .data	00000010 Serial
20014c0c g     O .bss	00000020 logBuffer
00010b68 g     F .text.itcm	000000b4 __ssputs_r
0000213c g     F .text.itcm	00000008 loadConfig(unsigned short*, int)
0000c624  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
00008850 g     F .text.itcm	0000005e FsBaseFile::openNext(FsBaseFile*, int)
6000193c  w    F .text.code	00000002 startup_early_hook
000065fc g     F .text.itcm	00000094 ExFatFile::addCluster()
00008bc4 g     F .text.itcm	00000068 SharedSpiCard::readData(unsigned char*, unsigned int)
0000a6f8 g     F .text.itcm	00000044 usb_serial_peekchar
0001183e g     F .text.itcm	00000024 __sfputs_r
0000e848 g     F .text.itcm	0000000c __sfp_lock_acquire
0000ed30 g     F .text.itcm	00000000 memchr
00007c9c g     F .text.itcm	000000d0 FatPartition::fatPut(unsigned long, unsigned long)
0000dc10  w    F .text.itcm	00000434 _printf_float
0000aa54 g     F .text.itcm	00000250 set_arm_clock
20015370 g     O .bss	00000004 systick_cycle_count
200022f6 g     O .data	00000016 usb_string_serial_number_default
0000f9e8 g     F .text.itcm	00000098 _free_r
00008ece g     F .text.itcm	00000092 SharedSpiCard::erase(unsigned long, unsigned long)
00008f92 g     F .text.itcm	0000004e SharedSpiCard::writeData(unsigned char, unsigned char const*)
00009978 g     F .text.itcm	00000074 SdioCard::readStop()
00000da2  w    F .text.itcm	00000060 FsVolume::rename(char const*, char const*)
000089be  w    F .text.itcm	00000004 SharedSpiCard::type() const
00001a42 g     F .text.itcm	000000de MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)
0000c614  w    F .text.itcm	00000004 usb_serial_class::flush()
00010e18 g     F .text.itcm	0000007a _sungetc_r
00011cd4 g     F .text.itcm	0000027a .hidden __aeabi_dsub
0000c60c  w    F .text.itcm	00000004 usb_serial_class::read()
00008698 g     F .text.itcm	000000b8 FatFile::remove()
00011fd8 g     F .text.itcm	0000006a .hidden __floatundidf
00000f04  w    F .text.itcm	0000001c FsFile::FsFile()
0000b98c  w    F .text.itcm	00000006 _lseek
00003968 g     F .text.itcm	00000068 adcStatus()
00010608 g     F .text.itcm	000000d8 __lshift
0000305c g     F .text.itcm	0000024c storeData(short)
0000779c g     F .text.itcm	000000a4 FatFile::mkdir(FatFile*, char const*, bool)
0000b42c g     F .text.itcm	0000002c usb_prepare_transfer
000089c2  w    F .text.itcm	00000004 DedicatedSpiCard::hasDedicatedSpi()
0000b7c8 g     F .text.itcm	00000180 unused_interrupt_vector
60001d28 g     F .text.code	0000012c tempmon_init
2001538c g     O .bss	00000004 usb_timer0_callback
000080e0 g     F .text.itcm	000000cc FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)
0000eab4 g     F .text.itcm	00000060 _vasnprintf_r
00002fb4 g     F .text.itcm	00000014 powerDown()
000089ec g     F .text.itcm	00000068 DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)
0000604c g     F .text.itcm	000000c6 ExFatFile::open(ExFatFile*, char const*, int)
0000ba9c g     F .text.itcm	00000064 eeprom_read_byte
0000ebae g     F .text.itcm	00000036 strlcpy
000011e8 g     F .text.itcm	000000b0 MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)
0000ebe4 g     F .text.itcm	00000024 strncmp
0000804e g     F .text.itcm	00000092 FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)
0000698a g     F .text.itcm	000000be ExFatFile::mkdir(ExFatFile*, char const*, bool)
0000a750 g     F .text.itcm	00000060 usb_serial_flush_input
200022d4 g     O .data	00000004 fsamp
00006402 g     F .text.itcm	00000060 ExFatPartition::freeClusterCount()
00001330 g     F .text.itcm	00000060 MTPStorage_SD::ConstructFilename(int, char*, int)
00000f78  w    F .text.itcm	00000064 mSD_Base::sd_remove(unsigned long, char const*)
00010400 g     F .text.itcm	00000154 __multiply
0000283c g     F .text.itcm	0000001c getDataCount()
0000a95c g     F .text.itcm	00000016 usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
0000ea56 g     F .text.itcm	0000004a _vdiprintf_r
00000b00 g     F .text.itcm	00000084 i2s_setup()
00003780 g     F .text.itcm	00000008 adcStart()
0001090c g     F .text.itcm	000000b4 __d2b
00008fe0 g     F .text.itcm	00000030 SharedSpiCard::writeData(unsigned char const*)
000090e6  w    F .text.itcm	00000004 SdCardInterface::isDedicatedSpi()
60001898 g     F .text.code	00000054 _reboot_Teensyduino_
0000932c  w    F .text.itcm	0000000e SdioCard::~SdioCard()
6000193e g     F .text.code	00000002 startup_default_middle_hook
00000c8e  w    F .text.itcm	00000008 MTPStorage_SD::get_FSName(unsigned long)
00000b84 g     F .text.itcm	000000a4 dma_setup()
00008ae8 g     F .text.itcm	0000005e DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)
00008d24 g     F .text.itcm	00000036 SharedSpiCard::readRegister(unsigned char, void*)
00009a74 g     F .text.itcm	0000006c SdioCard::writeStart(unsigned long)
000117e8 g     F .text.itcm	00000004 _strtoul_r
00003720 g     F .text.itcm	00000024 usbPowerInit()
0000c2ac g     F .text.itcm	000000c4 usb_mtp_send
0000af04 g     F .text.itcm	000004a8 usb_isr
0000dac0 g     F .text.itcm	0000001c __cxa_atexit
00005a6c g     F .text.itcm	00000186 ExFatFile::read(void*, unsigned int)
0000ec10 g     F .text.itcm	00000020 _close_r
00009076  w    F .text.itcm	0000003a FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
00011f70 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00008d9e g     F .text.itcm	0000002a SharedSpiCard::readStop()
00005654 g     F .text.itcm	0000004e FsCache::sync()
0000eb14 g     F .text.itcm	00000020 memcmp
20000524  w    O .data	00000028 vtable for usb_serial_class
0000a1c2 g     F .text.itcm	00000008 SdSpiArduinoDriver::send(unsigned char)
0000449e g     F .text.itcm	000000e6 MTPD::GetObject(unsigned long)
0000a20a g     F .text.itcm	00000004 sdCsWrite(unsigned char, bool)
20014ce0 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000e974 g     F .text.itcm	00000058 sscanf
00011b14 g     F .text.itcm	000000b0 __swsetup_r
0000cc4c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
0000671c g     F .text.itcm	00000056 ExFatFile::rmdir()
0000435c g     F .text.itcm	00000142 MTPD::getObjectPropDesc(unsigned long, unsigned long)
00000d50  w    F .text.itcm	0000001e FsVolume::bytesPerCluster() const
00008d6a g     F .text.itcm	00000034 SharedSpiCard::readStart(unsigned long)
00010a20 g     F .text.itcm	00000046 __copybits
00004700 g     F .text.itcm	00000016 MTPD::read16()
00000c9a g     F .text.itcm	00000004 MTPStorage_SD::has_directories(unsigned long)
0000e9cc g     F .text.itcm	00000022 __sread
00002b3c g     F .text.itcm	00000060 wavHeaderWrite(char*)
0000a9c0 g     F .text.itcm	00000094 usb_serial_flush_output
0000bb00 g     F .text.itcm	0000001c eeprom_read_block
0000cd9c g     F .text.itcm	0000000c __malloc_lock
00005828 g     F .text.itcm	000000b0 ExFatFile::getName8(char*, unsigned int)
20002400 g     O .data	000002c0 _VectorsRam
0000a1ca g     F .text.itcm	00000040 SdSpiArduinoDriver::send(unsigned char const*, unsigned int)
00008c34 g     F .text.itcm	0000002c SharedSpiCard::waitReady(unsigned short)
00011564 g     F .text.itcm	00000050 _fflush_r
000116d8 g     F .text.itcm	0000002c _calloc_r
00004668 g     F .text.itcm	00000064 MTPD::read(char*, unsigned long)
00002b9c g     F .text.itcm	000000e0 makeHeader(long*)
00000f38  w    F .text.itcm	0000003e mSD_Base::sd_mkdir(unsigned long, char*)
00008368 g     F .text.itcm	00000284 FatFile::open(FatFile*, FatLfn_t*, int)
200022f2 g     O .data	00000002 t_acq
200155e2 g     O .bss	00000001 yield_active_check_flags
00006850 g     F .text.itcm	00000042 ExFatFile::sync()
0000ed10 g     F .text.itcm	00000002 __retarget_lock_acquire_recursive
200155e0 g     O .bss	00000001 usb_high_speed
00007840 g     F .text.itcm	00000190 FatFile::rename(FatFile*, char const*)
00009770 g     F .text.itcm	00000040 SdioCard::isBusy()
00003e00 g     F .text.itcm	00000016 MTPD::write8(unsigned char)
0000a210 g     F .text.itcm	00000000 memset
0000c62a g     F .text.itcm	00000010 main
0000dadc g     F .text.itcm	00000006 fcvt
0000614c g     F .text.itcm	000000a8 ExFatPartition::bitmapFind(unsigned long, unsigned long)
20202000 g     O .bss.dma	00000069 usb_descriptor_buffer
00000218 g     F .text.itcm	00000030 resetUSB()
00009010 g     F .text.itcm	0000004a SharedSpiCard::writeSector(unsigned long, unsigned char const*)
00006ba8 g     F .text.itcm	0000020c ExFatFile::write(void const*, unsigned int)
20000448 g     O .data	00000060 vtable for MTPStorage_SD
00004790 g     F .text.itcm	000000e0 MTPD::SendObjectInfo(unsigned long, unsigned long)
0000eb68 g     F .text.itcm	00000046 strlcat
0000762c g     F .text.itcm	00000036 FatFile::dirEntry(DirFat_t*)
0000ea4e g     F .text.itcm	00000008 __sclose
0000c370 g     F .text.itcm	00000054 usb_init_serialnumber
0000dabc g     F .text.itcm	00000004 _strtol_r
600024d0 g       .text.code	00000000 __init_array_end
0000ef10 g     F .text.itcm	00000ad8 _dtoa_r
0000ccb0 g     F .text.itcm	000000ec _malloc_r
000089ca g     F .text.itcm	00000010 DedicatedSpiCard::readSector(unsigned long, unsigned char*)
00010ab8 g     F .text.itcm	0000001a __ascii_wctomb
00011fe8 g     F .text.itcm	0000005a .hidden __aeabi_l2d
20014838 g     O .bss	00000004 FatVolume::m_cwv
0000c5b4  w    F .text.itcm	00000008 Print::print(char const*)
00011626 g     F .text.itcm	00000074 __submore
20000604  w    O .data	00000010 SPIClass::beginTransaction(SPISettings)::clk_sel
0000c668 g     F .text.itcm	00000042 Stream::readBytesUntil(char, char*, unsigned int)
00004f80 g     F .text.itcm	00000056 SPIClass::transfer(void const*, void*, unsigned int)
66a8ee6c g       *ABS*	00000000 __rtc_localtime
0000b750 g     F .text.itcm	0000004c micros
00003e7c g     F .text.itcm	00000044 MTPD::GetDevicePropDesc(unsigned long)
00006774 g     F .text.itcm	000000dc ExFatFile::syncDir()
000054c0 g     F .text.itcm	00000078 TwoWire::setClock(unsigned long)
60002648 g     O .text.progmem	00000004 string0
0000a7d0 g     F .text.itcm	0000018c usb_serial_write
60001940  w    F .text.code	00000002 startup_late_hook
0000aea4 g     F .text.itcm	00000034 usb_start_sof_interrupts
00000e02  w    F .text.itcm	00000050 FsBaseFile::available() const
0000905a g     F .text.itcm	0000001c DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)
0000c610  w    F .text.itcm	00000004 usb_serial_class::available()
0000e974 g     F .text.itcm	00000058 siscanf
0000472a g     F .text.itcm	00000030 MTPD::readstring(char*)
000074f0 g     F .text.itcm	00000080 FatFile::sync()
20000000 g     O .data	00000300 endpoint_queue_head
000065d6  w    F .text.itcm	00000026 ExFatPartition::cacheSync()
60002610  w    O .text.progmem	00000020 usb_string_product_name
00003d60 g     F .text.itcm	00000026 MTPD::GetNumObjects(unsigned long, unsigned long)
0000b79c g     F .text.itcm	0000002a delay
00012078 g     F .text.itcm	00000040 .hidden __fixunsdfdi
200153be g     O .bss	00000002 dma_channel_allocated_mask
00000e9a g     F .text.itcm	00000022 MTPStorage_SD::CloseIndex()
000059a6 g     F .text.itcm	00000020 ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000ed4  w    F .text.itcm	00000022 FsBaseFile::seekSet(unsigned long long)
000120f0 g     F .fini	00000000 _fini
00003764 g     F .text.itcm	00000014 acqPower(int)
000029ec  w    F .text.itcm	00000014 FsBaseFile::sync()
00005060 g     F .text.itcm	00000026 TwoWire::write(unsigned char)
00008b94 g     F .text.itcm	00000030 SharedSpiCard::isBusy()
60001020 g     O .text.headers	0000000c BootData
00006120 g     F .text.itcm	0000002c ExFatFile::openNext(ExFatFile*, int)
0000e934 g     F .text.itcm	00000040 sprintf
0000c758 g     F .text.itcm	0000001a Print::printf(char const*, ...)
0000db8e g     F .text.itcm	0000007c __exponent
0000c70e g     F .text.itcm	00000012 Print::print(long)
00007570 g     F .text.itcm	00000010 FatFile::close()
0000be88 g     F .text.itcm	00000004 Panic_Temp_isr
00012044 g     F .text.itcm	00000030 .hidden __fixdfdi
000009a0 g     F .text.itcm	00000160 setAudioFrequency(int)
00002858 g     F .text.itcm	0000000c queue_isBusy()
200022dc g     O .data	00000004 sd
000076a2 g     F .text.itcm	000000fa FatFile::mkdir(FatFile*, FatLfn_t*)
000092c8  w    F .text.itcm	00000002 SdioCard::~SdioCard()
000000b8  w    F .text.itcm	00000018 StreamFile<FsBaseFile, unsigned long long>::peek()
0000ec98 g     F .text.itcm	00000024 _write_r
000097b0 g     F .text.itcm	000000c8 SdioCard::erase(unsigned long, unsigned long)
200022e8 g     O .data	00000002 again
00000258 g     F .text.itcm	00000024 lowPowerInit()
000033b8 g     F .text.itcm	000000b4 filing_init()
0000c1e8 g     F .text.itcm	00000094 usb_mtp_recv
0000edf0 g     F .text.itcm	0000000c nanf
0000e044 g     F .text.itcm	000000da _printf_common
200151b4 g     O .bss	00000004 setup_ready
200022d0 g     O .data	00000004 _impure_ptr
00005bf2 g     F .text.itcm	0000002a ExFatFile::peek()
00011458 g     F .text.itcm	0000010c __sflush_r
20000424  w    O .data	00000024 vtable for StreamFile<FsBaseFile, unsigned long long>
0000c3c4  w    F .text.itcm	00000054 EventResponder::runFromYield()
20001d40 g     O .data	00000140 Wire
00008984 g     F .text.itcm	00000028 FsVolume::open(char const*, int)
0000e890 g     F .text.itcm	0000003c _fwalk_sglue
00009268 g     F .text.itcm	0000000c SdioCard::errorCode() const
0000761e g     F .text.itcm	0000000e FatFile::open(FatVolume*, char const*, int)
000001f4  w    F .text.itcm	0000000a StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)
600024c0 g       .text.code	00000000 __preinit_array_end
60001f1c g     F .text.code	000004a4 CrashReportClass::printTo(Print&) const
00002918 g     F .text.itcm	00000072 dateTime(unsigned short*, unsigned short*, unsigned char*)
00010c1c g     F .text.itcm	000001fc _svfiprintf_r
00002dfc g     F .text.itcm	00000094 newFileName(char*)
00000f20  w    F .text.itcm	00000018 FsFile::~FsFile()
00006294 g     F .text.itcm	00000034 ExFatPartition::dirCache(DirPos_t*, unsigned char)
00008b46 g     F .text.itcm	00000026 SharedSpiCard::spiStart()
00001898 g     F .text.itcm	0000000e MTPStorage_SD::DeleteObject(unsigned long)
0001012e g     F .text.itcm	00000024 __ascii_mbtowc
200153c0 g     O .bss	00000002 h_1
0001082c g     F .text.itcm	0000004c __ulp
0000aed8 g     F .text.itcm	0000002c usb_stop_sof_interrupts
0000c5c4  w    F .text.itcm	00000008 Print::print(unsigned long, int)
00005048  w    F .text.itcm	00000016 TwoWire::peek()
0000505e  w    F .text.itcm	00000002 TwoWire::flush()
00000788 g     F .text.itcm	00000150 setup
200009b8 g     O .data	00000078 usb_descriptor_list
000094f4 g     F .text.itcm	00000004 SdioCard::status()
00001090 g     F .text.itcm	0000002e MTPStorage_SD::ResetIndex()
00003dc8 g     F .text.itcm	00000018 MTPD::pull_packet(unsigned char*)
00007682 g     F .text.itcm	00000020 FatFile::getModifyDateTime(unsigned short*, unsigned short*)
00000e88  w    F .text.itcm	00000012 FsBaseFile::isOpen() const
00003778 g     F .text.itcm	00000008 adcReset()
00000e66  w    F .text.itcm	00000022 FsBaseFile::isDir() const
0000ede0 g     F .text.itcm	00000010 nan
000070bc g     F .text.itcm	00000186 FatFile::read(void*, unsigned int)
00004584 g     F .text.itcm	000000e4 MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)
00010ecc g     F .text.itcm	000002f0 __ssvfiscanf_r
00007082 g     F .text.itcm	0000000c FatFile::openRoot(FatVolume*)
20014800 g     O .bss	00000004 ExFatVolume::m_cwv
00011bc4 g     F .text.itcm	0000004c __swhatbuf_r
20068000 g       .text.csf	00000000 _estack
000089ac g     F .text.itcm	00000004 operator new(unsigned int, unsigned long*)
0000c584 g     F .text.itcm	00000030 DMAChannel::release()
00002264 g     F .text.itcm	00000144 loadParameters()
0000a974 g     F .text.itcm	0000004c usb_serial_write_buffer_free
00003744 g     F .text.itcm	00000020 usbPowerSetup()
60001714 g     F .text.code	00000058 TwoWire::setSCL(unsigned char)
20002278 g     O .data	0000000c __sglue
0000a524 g     F .text.itcm	00000100 usb_serial_configure
00005086 g     F .text.itcm	0000003c TwoWire::write(unsigned char const*, unsigned int)
0000c73c  w    F .text.itcm	0000001c _write
200026c0 g       .data	00000000 _edata
0000636e g     F .text.itcm	0000003a ExFatPartition::fatPut(unsigned long, unsigned long)
200155bd g     O .bss	00000001 external_psram_size
00004068 g     F .text.itcm	000000e0 MTPD::GetObjectInfo(unsigned long)
000092c8  w    F .text.itcm	00000002 SdioCard::~SdioCard()
00005798 g     F .text.itcm	00000048 FsName::get16()
00008a54  w    F .text.itcm	00000002 DedicatedSpiCard::~DedicatedSpiCard()
00008e34 g     F .text.itcm	00000064 DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)
000089da g     F .text.itcm	00000012 DedicatedSpiCard::setDedicatedSpi(bool)
000058d8 g     F .text.itcm	00000062 ExFatFile::hashName(ExName_t*)
00006ff4 g     F .text.itcm	00000070 FatFile::addDirCluster()
0000c618  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
0000549c g     F .text.itcm	0000000c lpi2c1_isr()
00007ba2 g     F .text.itcm	0000002a FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)
00000c28 g     F .text.itcm	00000028 acqModifyFrequency(unsigned long)
0000b4c0 g     F .text.itcm	00000046 ultoa
200022ee g     O .data	00000002 h_3
000046ea g     F .text.itcm	00000016 MTPD::read8()
6000176c g     F .text.code	00000048 TwoWire::begin()
200153bc g     O .bss	00000002 dgain
000087da g     F .text.itcm	00000076 FsBaseFile::open(FsVolume*, char const*, int)
00001168 g     F .text.itcm	0000003e MTPStorage_SD::ReadIndexRecord(unsigned long)
0000e9f2 g     F .text.itcm	00000038 __swrite
0000c48c g     F .text.itcm	00000038 EventResponder::runFromInterrupt()
00002754 g     F .text.itcm	000000e0 menu(short)
0000c608  w    F .text.itcm	00000004 usb_serial_class::peek()
0000dae2 g     F .text.itcm	00000008 fcvtf
000090ea  w    F .text.itcm	00000004 SdCardInterface::setDedicatedSpi(bool)
00008b6c g     F .text.itcm	00000028 SharedSpiCard::spiStop()
00003c8a g     F .text.itcm	00000024 rtcSetDate(int, int, int)
000011a6 g     F .text.itcm	00000042 MTPStorage_SD::GetNextObjectHandle(unsigned long)
000117ec g     F .text.itcm	00000024 fiprintf
00011864 g     F .text.itcm	00000234 _vfiprintf_r
00003cae g     F .text.itcm	00000024 rtcSetTime(int, int, int)
0000a030  w    F .text.itcm	00000104 SPIClass::beginTransaction(SPISettings)
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
20002700 g     O .bss	00002440 mtpd
00010718 g     F .text.itcm	00000114 __mdiff
000028c4 g     F .text.itcm	00000054 pullData(unsigned long*)
000092b8 g     F .text.itcm	00000010 SdioCard::readOCR(unsigned long*)
000014ca g     F .text.itcm	00000098 MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)
0000632e g     F .text.itcm	00000040 ExFatPartition::dirSeek(DirPos_t*, unsigned long)
00006e78 g     F .text.itcm	000000ec FatFile::getName8(char*, unsigned int)
00002c7c g     F .text.itcm	00000100 checkEndOfFile(short)
20002284 g     O .data	0000004c _impure_data
00005cfc g     F .text.itcm	00000350 ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)
00001f80 g     F .text.itcm	000001b4 menu3()
0000e854 g     F .text.itcm	0000000c __sfp_lock_release
20014c30 g     O .bss	00000004 mtp_txEventCount
0000c5cc  w    F .text.itcm	00000014 Print::println(unsigned long, int)
00002a00 g     F .text.itcm	00000044 timeStamp()
00009978 g     F .text.itcm	00000074 SdioCard::writeStop()
0000e934 g     F .text.itcm	00000040 siprintf
000115b4 g     F .text.itcm	00000072 __sccl
00008c2c g     F .text.itcm	00000008 SharedSpiCard::readData(unsigned char*)
00005972 g     F .text.itcm	00000014 ExFatFile::close()
2000124b g     O .data	00000101 _ctype_
0000b974  w    F .text.itcm	00000004 _read
600024c0 g       .text.code	00000000 __init_array_start
0000cc4c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000102c g     F .text.itcm	00000064 MTPStorage_SD::OpenIndex()
600023c0 g     F .text.code	0000000e CrashReportClass::operator bool()
00004716 g     F .text.itcm	00000014 MTPD::read32()
20001d28 g     O .data	00000004 F_BUS_ACTUAL
0000c002 g     F .text.itcm	00000036 quadtimer_init
20014b98 g     O .bss	00000004 disk_count
00002b28 g     F .text.itcm	00000014 wavHeaderUpdate(long)
00003aa0 g     F .text.itcm	000000fc time2date(unsigned long, datetime_t*)
00007ff4 g     F .text.itcm	0000003c FatVolume::chdir(char const*)
200022ec g     O .data	00000002 h_2
00003b9c g     F .text.itcm	000000c4 date2time(datetime_t*)
0000c63c g     F .text.itcm	0000002c Stream::timedRead()
00011c10 g     F .text.itcm	00000078 __smakebuf_r
00000000 g       .text.itcm	00000000 _stext
0000c4e8 g     F .text.itcm	0000009c DMAChannel::begin(bool)
00008a56  w    F .text.itcm	00000006 SharedSpiCard::end()
0000edd0 g     F .text.itcm	00000010 strlen
0000e120 g     F .text.itcm	00000244 _printf_i
0000708e g     F .text.itcm	0000002e FatFile::openCluster(FatFile*)
000072a6 g     F .text.itcm	000000a0 FatFile::seekSet(unsigned long)
0000fb50 g     F .text.itcm	0000045c __gethex
60002610 g     O .text.progmem	00000020 usb_string_product_name_default
20014858 g     O .bss	00000004 __malloc_sbrk_start
0000392c g     F .text.itcm	0000003c setAGain(signed char)
0000eaa0 g     F .text.itcm	00000014 vdprintf
00009710 g     F .text.itcm	00000060 SdioCard::sectorCount()
00007454 g     F .text.itcm	0000009c FatFile::openNext(FatFile*, int)
6000193e  w    F .text.code	00000002 startup_middle_hook
20000594 g     O .data	00000070 vtable for SdioCard
00011f94 g     F .text.itcm	00000042 .hidden __aeabi_f2d
000012ae g     F .text.itcm	00000082 MTPStorage_SD::close()
00006f64 g     F .text.itcm	00000004 FatFile::getName(char*, unsigned int)
60001946 g     F .text.code	00000112 configure_cache
00000e52  w    F .text.itcm	00000014 FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)
0000bdb0 g     F .text.itcm	0000001c eeprom_write_block
000001a4  w    F .text.itcm	0000003c MTPStorage_SD::~MTPStorage_SD()
000090e2  w    F .text.itcm	00000004 SdCardInterface::hasDedicatedSpi()
00001390 g     F .text.itcm	00000098 MTPStorage_SD::rename(unsigned long, char const*)
20014854 g     O .bss	00000004 __malloc_free_list
00008d5a  w    F .text.itcm	00000008 SharedSpiCard::readCSD(csd_t*)
00002d90 g     F .text.itcm	0000006c newDirectory(char*)
00009e8c g     F .text.itcm	0000006c SdioCard::readStart(unsigned long)
000023a8 g     F .text.itcm	000003ac menu2()
0000a134 g     F .text.itcm	0000000e SdSpiArduinoDriver::activate()
0000346c g     F .text.itcm	00000290 compress(void*)
00006db4  w    F .text.itcm	0000001a FatFile::cacheDir(unsigned short)
00000c96 g     F .text.itcm	00000004 MTPStorage_SD::readonly(unsigned long)
00011cd4 g     F .text.itcm	0000027a .hidden __subdf3
00011864 g     F .text.itcm	00000234 _vfprintf_r
600024c0 g       .text.code	00000000 __preinit_array_start
0000b47c g     F .text.itcm	0000001c usb_receive
000061f4 g     F .text.itcm	000000a0 ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)
000001e0  w    F .text.itcm	00000014 FsBaseFile::write(void const*, unsigned int)
00001298 g     F .text.itcm	00000016 MTPStorage_SD::GetSize(unsigned long)
2001546a g     O .bss	00000002 t_rep
00010378 g     F .text.itcm	0000005a __lo0bits
00006308 g     F .text.itcm	00000026 ExFatPartition::chainSize(unsigned long)
200022e4 g     O .data	00000004 tempDatai
00007392 g     F .text.itcm	000000c2 FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)
00017c00 g       *ABS*	00000000 _flashimagelen
00008dc8 g     F .text.itcm	00000018 SharedSpiCard::syncDevice()
0000c948 g     F .text.itcm	0000000a __aeabi_atexit
00000f20  w    F .text.itcm	00000018 FsFile::~FsFile()
0000b998 g     F .text.itcm	00000024 rtc_get
00006690 g     F .text.itcm	0000008c ExFatFile::remove()
70000000 g       .bss.extram	00000000 _extram_start
0000c4c4 g     F .text.itcm	00000004 pendablesrvreq_isr
00004870 g     F .text.itcm	000000f4 MTPD::SendObject()
200153c2 g     O .bss	00000002 monitor
200022ea g     O .data	00000002 d_on
00001e74 g     F .text.itcm	00000048 MTPStorage_SD::usedSize(unsigned long)
00000068  w    F .text.itcm	00000004 Print::availableForWrite()
2000210c g     O .data	0000016c __global_locale
00009b6c g     F .text.itcm	0000026c SdioCard::begin(SdioConfig)
00005986 g     F .text.itcm	00000020 ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)
0000a624 g     F .text.itcm	000000d4 usb_serial_read
200155b3 g     O .bss	00000001 __lock___sfp_recursive_mutex
0000c772 g     F .text.itcm	00000014 Print::printNumber(unsigned long, unsigned char, unsigned char)
0000b3ec g     F .text.itcm	00000040 usb_config_tx
0000b978  w    F .text.itcm	00000006 _close
00007bde g     F .text.itcm	000000be FatPartition::fatGet(unsigned long, unsigned long*)
0000cc60 g     F .text.itcm	00000010 free
0000e364  w    F .text.itcm	00000408 _scanf_float
000057e0 g     F .text.itcm	00000048 ExFatFile::cmpName(DirName_t const*, ExName_t*)
000010ea g     F .text.itcm	00000018 MTPStorage_SD::AppendIndexRecord(Record const&)
00010218 g     F .text.itcm	0000008c __multadd
000101d4 g     F .text.itcm	00000044 _Bfree
00006df6 g     F .text.itcm	00000080 FatFile::getSFN(char*, unsigned int)
200022f6  w    O .data	00000016 usb_string_serial_number
00009ef8 g     F .text.itcm	000000a8 SdioCard::readSector(unsigned long, unsigned char*)
0000929c g     F .text.itcm	0000001c SdioCard::readCSD(csd_t*)



Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	cmp	r1, r0
60001402:	beq.n	60001410 <memory_copy+0x10>
60001404:	ldr.w	r3, [r1], #4
60001408:	str.w	r3, [r0], #4
6000140c:	cmp	r2, r0
6000140e:	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	bx	lr

60001412 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	ldr	r2, [pc, #16]	; (60001424 <memory_clear.constprop.0+0x12>)
60001414:	ldr	r1, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x16>)
60001416:	mov.w	r3, #0
6000141a:	str.w	r3, [r2], #4
6000141e:	cmp	r1, r2
60001420:	bhi.n	6000141a <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001422:	bx	lr
60001424:	.word	0x200026c0
60001428:	.word	0x20015620

6000142c <ResetHandler2>:
{
6000142c:	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
6000142e:	dsb	sy
	asm volatile("nop");
60001432:	nop
	asm volatile("nop");
60001434:	nop
	asm volatile("nop");
60001436:	nop
	asm volatile("nop");
60001438:	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000143a:	bl	6000193c <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000143e:	ldr	r3, [pc, #404]	; (600015d4 <ResetHandler2+0x1a8>)
60001440:	movs	r2, #8
60001442:	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
60001446:	nop
	asm volatile("nop");
60001448:	nop
	asm volatile("nop");
6000144a:	nop
	asm volatile("nop");
6000144c:	nop
	asm volatile("nop");
6000144e:	nop
	asm volatile("nop");
60001450:	nop
	asm volatile("nop");
60001452:	nop
	asm volatile("nop");
60001454:	nop
	asm volatile("nop");
60001456:	nop
	asm volatile("nop");
60001458:	nop
	asm volatile("nop");
6000145a:	nop
	asm volatile("nop");
6000145c:	nop
	asm volatile("nop");
6000145e:	nop
	asm volatile("nop");
60001460:	nop
	asm volatile("nop");
60001462:	nop
	asm volatile("nop");
60001464:	nop
	memory_copy(&_stext, &_stextload, &_etext);
60001466:	ldr	r2, [pc, #368]	; (600015d8 <ResetHandler2+0x1ac>)
60001468:	ldr	r1, [pc, #368]	; (600015dc <ResetHandler2+0x1b0>)
6000146a:	ldr	r0, [pc, #372]	; (600015e0 <ResetHandler2+0x1b4>)
6000146c:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001470:	ldr	r2, [pc, #368]	; (600015e4 <ResetHandler2+0x1b8>)
60001472:	ldr	r1, [pc, #372]	; (600015e8 <ResetHandler2+0x1bc>)
60001474:	ldr	r0, [pc, #372]	; (600015ec <ResetHandler2+0x1c0>)
60001476:	bl	60001400 <memory_copy>
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147a:	ldr	r5, [pc, #372]	; (600015f0 <ResetHandler2+0x1c4>)
	memory_clear(&_sbss, &_ebss);
6000147c:	bl	60001412 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001480:	mov.w	r3, #3758153728	; 0xe000e000
60001484:	mov.w	r2, #15728640	; 0xf00000
60001488:	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148c:	movs	r3, #0
6000148e:	ldr	r2, [pc, #356]	; (600015f4 <ResetHandler2+0x1c8>)
60001490:	str.w	r2, [r5, r3, lsl #2]
60001494:	adds	r3, #1
60001496:	cmp	r3, #176	; 0xb0
60001498:	bne.n	60001490 <ResetHandler2+0x64>
6000149a:	ldr	r3, [pc, #348]	; (600015f8 <ResetHandler2+0x1cc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000149c:	movs	r1, #128	; 0x80
6000149e:	ldr	r2, [pc, #348]	; (600015fc <ResetHandler2+0x1d0>)
600014a0:	strb.w	r1, [r3], #1
600014a4:	cmp	r3, r2
600014a6:	bne.n	600014a0 <ResetHandler2+0x74>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a8:	mov.w	r0, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ac:	ldr	r4, [pc, #292]	; (600015d4 <ResetHandler2+0x1a8>)
600014ae:	mov.w	r7, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b2:	ldr.w	r9, [pc, #376]	; 6000162c <ResetHandler2+0x200>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014b6:	ldr.w	r8, [pc, #376]	; 60001630 <ResetHandler2+0x204>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ba:	mov.w	r2, #4294967295
	SCB_VTOR = (uint32_t)_VectorsRam;
600014be:	str.w	r5, [r0, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014c2:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014c6:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014ca:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014ce:	str.w	r8, [r4, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d2:	ldr.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d6:	ldr	r6, [pc, #296]	; (60001600 <ResetHandler2+0x1d4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014d8:	orr.w	r3, r3, #458752	; 0x70000
600014dc:	str.w	r3, [r0, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014e0:	ldr	r3, [r6, #28]
600014e2:	bic.w	r3, r3, #127	; 0x7f
600014e6:	orr.w	r3, r3, #64	; 0x40
600014ea:	str	r3, [r6, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014ec:	ldr	r3, [r6, #36]	; 0x24
600014ee:	bic.w	r3, r3, #127	; 0x7f
600014f2:	orr.w	r3, r3, #64	; 0x40
600014f6:	str	r3, [r6, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014f8:	ldr	r3, [pc, #264]	; (60001604 <ResetHandler2+0x1d8>)
600014fa:	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014fc:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014fe:	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001500:	str	r2, [r3, #116]	; 0x74
	configure_cache();
60001502:	bl	60001946 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001506:	ldr	r3, [pc, #256]	; (60001608 <ResetHandler2+0x1dc>)
60001508:	str	r3, [r5, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000150a:	ldr	r3, [pc, #256]	; (6000160c <ResetHandler2+0x1e0>)
6000150c:	str	r3, [r5, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000150e:	movs	r3, #99	; 0x63
	SYST_CVR = 0;
60001510:	movs	r5, #0
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001512:	str	r3, [r0, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001514:	movs	r3, #3
	SYST_CVR = 0;
60001516:	str	r5, [r0, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001518:	str	r3, [r0, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000151a:	ldr	r3, [pc, #244]	; (60001610 <ResetHandler2+0x1e4>)
6000151c:	str.w	r3, [r0, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001520:	ldr.w	r3, [r0, #3580]	; 0xdfc
60001524:	orr.w	r3, r3, #16777216	; 0x1000000
60001528:	str.w	r3, [r0, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000152c:	ldr	r3, [pc, #228]	; (60001614 <ResetHandler2+0x1e8>)
6000152e:	ldr	r2, [r3, #0]
60001530:	orr.w	r2, r2, #1
60001534:	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001536:	ldr	r2, [r3, #4]
60001538:	ldr	r3, [pc, #220]	; (60001618 <ResetHandler2+0x1ec>)
6000153a:	str	r2, [r3, #0]
	usb_pll_start();	
6000153c:	bl	60001ccc <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001540:	str.w	r7, [r4, #260]	; 0x104
	set_arm_clock(F_CPU);
60001544:	ldr	r0, [pc, #212]	; (6000161c <ResetHandler2+0x1f0>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001546:	str.w	r9, [r4, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000154a:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000154e:	str.w	r8, [r4, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001552:	bl	60002448 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001556:	ldr	r3, [r6, #108]	; 0x6c
60001558:	orr.w	r3, r3, #12288	; 0x3000
6000155c:	str	r3, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000155e:	ldr	r3, [pc, #192]	; (60001620 <ResetHandler2+0x1f4>)
60001560:	str	r5, [r3, #0]
	PIT_TCTRL0 = 0;
60001562:	str.w	r5, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001566:	str.w	r5, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
6000156a:	str.w	r5, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
6000156e:	str.w	r5, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001572:	add.w	r3, r3, #327680	; 0x50000
60001576:	ldr	r2, [r3, #56]	; 0x38
60001578:	lsls	r2, r2, #31
6000157a:	bmi.n	6000158e <ResetHandler2+0x162>
		SNVS_LPSRTCLR = 1546300800u << 15;
6000157c:	ldr	r2, [pc, #164]	; (60001624 <ResetHandler2+0x1f8>)
6000157e:	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001580:	movw	r2, #11797	; 0x2e15
60001584:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001586:	ldr	r2, [r3, #56]	; 0x38
60001588:	orr.w	r2, r2, #1
6000158c:	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158e:	ldr	r2, [r3, #8]
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	ldr	r4, [pc, #148]	; (60001628 <ResetHandler2+0x1fc>)
60001592:	orr.w	r2, r2, #65537	; 0x10001
60001596:	str	r2, [r3, #8]
	configure_external_ram();
60001598:	bl	60001a58 <configure_external_ram>
	analog_init();
6000159c:	bl	600023d0 <analog_init>
	pwm_init();
600015a0:	bl	60002450 <__pwm_init_veneer>
	tempmon_init();
600015a4:	bl	60001d28 <tempmon_init>
	startup_middle_hook();
600015a8:	bl	6000193e <startup_default_middle_hook>
600015ac:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	cmp	r3, #19
600015b0:	bls.n	600015ac <ResetHandler2+0x180>
	usb_init();
600015b2:	bl	600017b4 <usb_init>
600015b6:	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015b8:	cmp.w	r3, #300	; 0x12c
600015bc:	bcc.n	600015b6 <ResetHandler2+0x18a>
	startup_debug_reset();
600015be:	bl	60001942 <startup_debug_reset>
	startup_late_hook();
600015c2:	bl	60001940 <startup_default_late_hook>
	__libc_init_array();
600015c6:	bl	60002490 <____libc_init_array_veneer>
	main();
600015ca:	bl	60002478 <__main_veneer>
	while (1) asm("WFI");
600015ce:	wfi
600015d0:	b.n	600015ce <ResetHandler2+0x1a2>
600015d2:	nop
600015d4:	.word	0x400d8000
600015d8:	.word	0x000120f8
600015dc:	.word	0x60002728
600015e0:	.word	0x00000000
600015e4:	.word	0x200026c0
600015e8:	.word	0x60014824
600015ec:	.word	0x20000000
600015f0:	.word	0x20002400
600015f4:	.word	0x0000b7c9
600015f8:	.word	0xe000e400
600015fc:	.word	0xe000e4a0
60001600:	.word	0x400fc000
60001604:	.word	0x400ac000
60001608:	.word	0x0000c4c5
6000160c:	.word	0x0000c4c9
60001610:	.word	0x20200000
60001614:	.word	0xe0001000
60001618:	.word	0x20015370
6000161c:	.word	0x016e3600
60001620:	.word	0x40084000
60001624:	.word	0x56c00000
60001628:	.word	0x20015374
6000162c:	.word	0x2018101b
60001630:	.word	0x13110d0c

60001634 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001634:	ldr	r3, [pc, #20]	; (6000164c <ResetHandler+0x18>)
60001636:	ldr	r2, [pc, #24]	; (60001650 <ResetHandler+0x1c>)
60001638:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000163a:	ldr	r2, [pc, #24]	; (60001654 <ResetHandler+0x20>)
6000163c:	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000163e:	mov.w	r2, #11141120	; 0xaa0000
60001642:	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001644:	ldr	r3, [pc, #16]	; (60001658 <ResetHandler+0x24>)
60001646:	mov	sp, r3
	ResetHandler2();
60001648:	bl	6000142c <ResetHandler2>
6000164c:	.word	0x400ac000
60001650:	.word	0xaaaaaabf
60001654:	.word	0x00200007
60001658:	.word	0x20068000

6000165c <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000165c:	ldr	r3, [r0, #20]
6000165e:	ldr	r2, [pc, #40]	; (60001688 <TwoWire::configSDApin(unsigned char)+0x2c>)
60001660:	add.w	r0, r3, r1, lsl #4
60001664:	add.w	r1, r3, r1, lsl #4
{
60001668:	push	{r4, r5, lr}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
6000166a:	ldrb	r4, [r0, #8]
6000166c:	ldr	r5, [pc, #28]	; (6000168c <TwoWire::configSDApin(unsigned char)+0x30>)
6000166e:	add.w	r2, r2, r4, lsl #4
60001672:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001674:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
60001676:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
60001678:	ldr	r0, [r0, #12]
6000167a:	str	r0, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
6000167c:	ldr	r3, [r1, #16]
6000167e:	cbz	r3, 60001684 <TwoWire::configSDApin(unsigned char)+0x28>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
60001680:	ldr	r2, [r1, #20]
60001682:	str	r2, [r3, #0]
	}
}
60001684:	pop	{r4, r5, pc}
60001686:	nop
60001688:	.word	0x20000614
6000168c:	.word	0x0001f861

60001690 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001690:	push	{r3, r4, r5, lr}
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001692:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001694:	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
60001696:	ldrb	r2, [r0, #24]
60001698:	add.w	r2, r3, r2, lsl #4
6000169c:	ldrb	r2, [r2, #8]
6000169e:	cmp	r2, r1
600016a0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016a2:	ldrb	r0, [r3, #8]
		if (sda_pin == 255) return;
600016a4:	cmp	r0, #255	; 0xff
600016a6:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (sda_pin == pin) break;
600016a8:	cmp	r1, r0
600016aa:	beq.n	600016d8 <TwoWire::setSDA(unsigned char)+0x48>
		if (sda_pin == 255) return;
600016ac:	ldrb	r1, [r3, #24]
600016ae:	cmp	r1, #255	; 0xff
600016b0:	beq.n	600016d6 <TwoWire::setSDA(unsigned char)+0x46>
		if (++newindex >= sizeof(hardware.sda_pins)) return;
600016b2:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b4:	ldr	r1, [r3, #0]
		configSDApin(newindex);
600016b6:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600016b8:	ldr	r3, [r3, #4]
600016ba:	ldr	r1, [r1, #0]
600016bc:	tst	r1, r3
600016be:	beq.n	600016d4 <TwoWire::setSDA(unsigned char)+0x44>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c0:	ldr	r3, [pc, #24]	; (600016dc <TwoWire::setSDA(unsigned char)+0x4c>)
		configSDApin(newindex);
600016c2:	mov	r1, r5
600016c4:	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
600016c6:	add.w	r3, r3, r2, lsl #4
600016ca:	movs	r2, #5
600016cc:	ldr	r3, [r3, #4]
600016ce:	str	r2, [r3, #0]
		configSDApin(newindex);
600016d0:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
600016d4:	strb	r5, [r4, #24]
}
600016d6:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
600016d8:	movs	r5, #0
600016da:	b.n	600016b4 <TwoWire::setSDA(unsigned char)+0x24>
600016dc:	.word	0x20000614

600016e0 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016e0:	ldr	r3, [r0, #20]
600016e2:	ldr	r2, [pc, #40]	; (6000170c <TwoWire::configSCLpin(unsigned char)+0x2c>)
600016e4:	add.w	r0, r3, r1, lsl #4
600016e8:	add.w	r1, r3, r1, lsl #4
{
600016ec:	push	{r4, r5, lr}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016ee:	ldrb.w	r4, [r0, #40]	; 0x28
600016f2:	ldr	r5, [pc, #28]	; (60001710 <TwoWire::configSCLpin(unsigned char)+0x30>)
600016f4:	add.w	r2, r2, r4, lsl #4
600016f8:	ldr	r4, [r2, #8]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fa:	ldr	r2, [r2, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
600016fc:	str	r5, [r4, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
600016fe:	ldr	r0, [r0, #44]	; 0x2c
60001700:	str	r0, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
60001702:	ldr	r3, [r1, #48]	; 0x30
60001704:	cbz	r3, 6000170a <TwoWire::configSCLpin(unsigned char)+0x2a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001706:	ldr	r2, [r1, #52]	; 0x34
60001708:	str	r2, [r3, #0]
	}
}
6000170a:	pop	{r4, r5, pc}
6000170c:	.word	0x20000614
60001710:	.word	0x0001f861

60001714 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001714:	push	{r3, r4, r5, lr}
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001716:	ldr	r3, [r0, #20]
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
60001718:	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
6000171a:	ldrb	r2, [r0, #25]
6000171c:	add.w	r2, r3, r2, lsl #4
60001720:	ldrb.w	r2, [r2, #40]	; 0x28
60001724:	cmp	r2, r1
60001726:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001728:	ldrb.w	r0, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
6000172c:	cmp	r0, #255	; 0xff
6000172e:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (scl_pin == pin) break;
60001730:	cmp	r1, r0
60001732:	beq.n	60001762 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == 255) return;
60001734:	ldrb.w	r1, [r3, #56]	; 0x38
60001738:	cmp	r1, #255	; 0xff
6000173a:	beq.n	60001760 <TwoWire::setSCL(unsigned char)+0x4c>
		if (++newindex >= sizeof(hardware.scl_pins)) return;
6000173c:	movs	r5, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000173e:	ldr	r1, [r3, #0]
		configSCLpin(newindex);
60001740:	uxtb	r5, r5
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001742:	ldr	r3, [r3, #4]
60001744:	ldr	r1, [r1, #0]
60001746:	tst	r1, r3
60001748:	beq.n	6000175e <TwoWire::setSCL(unsigned char)+0x4a>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000174a:	ldr	r3, [pc, #28]	; (60001768 <TwoWire::setSCL(unsigned char)+0x54>)
		configSCLpin(newindex);
6000174c:	mov	r1, r5
6000174e:	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
60001750:	add.w	r3, r3, r2, lsl #4
60001754:	movs	r2, #5
60001756:	ldr	r3, [r3, #4]
60001758:	str	r2, [r3, #0]
		configSCLpin(newindex);
6000175a:	bl	600016e0 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
6000175e:	strb	r5, [r4, #25]
}
60001760:	pop	{r3, r4, r5, pc}
	uint32_t newindex=0;
60001762:	movs	r5, #0
60001764:	b.n	6000173e <TwoWire::setSCL(unsigned char)+0x2a>
60001766:	nop
60001768:	.word	0x20000614

6000176c <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000176c:	ldr	r2, [pc, #60]	; (600017ac <TwoWire::begin()+0x40>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000176e:	ldr	r1, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001770:	ldr	r3, [r2, #56]	; 0x38
60001772:	bic.w	r3, r3, #16515072	; 0xfc0000
60001776:	orr.w	r3, r3, #262144	; 0x40000
{
6000177a:	push	{r4, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
6000177c:	str	r3, [r2, #56]	; 0x38
{
6000177e:	mov	r4, r0
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001780:	ldr	r2, [r1, #0]
60001782:	ldr	r1, [r1, #4]
60001784:	ldr	r3, [r2, #0]
60001786:	orrs	r3, r1
	setClock(100000);
60001788:	ldr	r1, [pc, #36]	; (600017b0 <TwoWire::begin()+0x44>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
6000178a:	str	r3, [r2, #0]
	port->MCR = LPI2C_MCR_RST;
6000178c:	movs	r2, #2
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
6000178e:	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001790:	str	r2, [r3, #16]
	setClock(100000);
60001792:	bl	60002498 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
60001796:	ldrb	r1, [r4, #24]
60001798:	mov	r0, r4
6000179a:	bl	6000165c <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000179e:	ldrb	r1, [r4, #25]
600017a0:	mov	r0, r4
}
600017a2:	ldmia.w	sp!, {r4, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
600017a6:	b.w	600016e0 <TwoWire::configSCLpin(unsigned char)>
600017aa:	nop
600017ac:	.word	0x400fc000
600017b0:	.word	0x000186a0

600017b4 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017b4:	ldr	r3, [pc, #192]	; (60001878 <usb_init+0xc4>)
600017b6:	movw	r2, #3937	; 0xf61
{
600017ba:	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600017bc:	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600017c0:	bl	60002488 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c4:	ldr	r2, [pc, #180]	; (6000187c <usb_init+0xc8>)
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017c6:	ldr	r1, [pc, #184]	; (60001880 <usb_init+0xcc>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600017c8:	ldr.w	r3, [r2, #128]	; 0x80
600017cc:	orr.w	r3, r3, #3
600017d0:	str.w	r3, [r2, #128]	; 0x80
	USB1_BURSTSIZE = 0x0404;
600017d4:	movw	r2, #1028	; 0x404
600017d8:	ldr	r3, [pc, #168]	; (60001884 <usb_init+0xd0>)
600017da:	str.w	r2, [r3, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600017de:	ldr	r2, [pc, #168]	; (60001888 <usb_init+0xd4>)
600017e0:	ldr	r0, [r2, #0]
600017e2:	tst	r0, r1
600017e4:	bne.n	600017ee <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600017e6:	ldr.w	r1, [r3, #424]	; 0x1a8
600017ea:	lsls	r4, r1, #30
600017ec:	beq.n	60001824 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600017ee:	mov.w	r1, #2147483648	; 0x80000000
600017f2:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600017f4:	ldr.w	r2, [r3, #320]	; 0x140
600017f8:	orr.w	r2, r2, #2
600017fc:	str.w	r2, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001800:	ldr	r2, [pc, #128]	; (60001884 <usb_init+0xd0>)
60001802:	ldr.w	r3, [r2, #320]	; 0x140
60001806:	lsls	r0, r3, #30
60001808:	bmi.n	60001802 <usb_init+0x4e>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000180a:	mov.w	r3, #3758153728	; 0xe000e000
6000180e:	mov.w	r2, #131072	; 0x20000
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001812:	movs	r0, #25
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001814:	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001818:	mov.w	r2, #2147483648	; 0x80000000
6000181c:	ldr	r3, [pc, #104]	; (60001888 <usb_init+0xd4>)
6000181e:	str	r2, [r3, #56]	; 0x38
		delay(25);
60001820:	bl	60002460 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001824:	ldr	r3, [pc, #96]	; (60001888 <usb_init+0xd4>)
	USBPHY1_PWD = 0;
60001826:	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001828:	mov.w	r2, #1073741824	; 0x40000000
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000182c:	ldr	r4, [pc, #84]	; (60001884 <usb_init+0xd0>)
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000182e:	str	r2, [r3, #56]	; 0x38
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001830:	mov.w	r2, #768	; 0x300
	USBPHY1_PWD = 0;
60001834:	str	r1, [r3, #0]
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001836:	movs	r3, #10
60001838:	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000183c:	ldr	r3, [pc, #76]	; (6000188c <usb_init+0xd8>)
6000183e:	mov	r0, r3
60001840:	bl	60002440 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001844:	mov.w	r2, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001848:	movw	r3, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000184c:	str	r2, [r0, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000184e:	mov.w	r2, #4194304	; 0x400000
60001852:	str	r2, [r0, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001854:	str.w	r0, [r4, #344]	; 0x158
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001858:	ldr	r2, [pc, #52]	; (60001890 <usb_init+0xdc>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000185a:	str.w	r3, [r4, #328]	; 0x148
6000185e:	ldr	r3, [pc, #52]	; (60001894 <usb_init+0xe0>)
60001860:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001864:	mov.w	r3, #3758153728	; 0xe000e000
60001868:	mov.w	r2, #131072	; 0x20000
6000186c:	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001870:	movs	r3, #1
60001872:	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001876:	pop	{r4, pc}
60001878:	.word	0x400d8000
6000187c:	.word	0x400fc000
60001880:	.word	0x001e1c00
60001884:	.word	0x402e0000
60001888:	.word	0x400d9000
6000188c:	.word	0x20000000
60001890:	.word	0x0000af05
60001894:	.word	0x20002400

60001898 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001898:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000189a:	ldr	r3, [pc, #60]	; (600018d8 <_reboot_Teensyduino_+0x40>)
6000189c:	ldr	r3, [r3, #96]	; 0x60
6000189e:	lsls	r3, r3, #30
600018a0:	bmi.n	600018a4 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
600018a2:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
600018a4:	cpsid	i
		USB1_USBCMD = 0;
600018a6:	ldr	r3, [pc, #52]	; (600018dc <_reboot_Teensyduino_+0x44>)
600018a8:	movs	r2, #0
600018aa:	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
600018ae:	sub.w	r3, r3, #2310144	; 0x234000
600018b2:	ldr	r2, [pc, #44]	; (600018e0 <_reboot_Teensyduino_+0x48>)
600018b4:	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
600018b6:	sub.w	r3, r3, #534773760	; 0x1fe00000
600018ba:	sub.w	r3, r3, #700416	; 0xab000
600018be:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600018c0:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600018c4:	ldr	r0, [pc, #28]	; (600018e4 <_reboot_Teensyduino_+0x4c>)
600018c6:	ldr	r3, [pc, #32]	; (600018e8 <_reboot_Teensyduino_+0x50>)
600018c8:	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600018ca:	mov.w	r3, #2097152	; 0x200000
600018ce:	ldr	r3, [r3, #28]
600018d0:	ldr	r3, [r3, #8]
600018d2:	blx	r3
600018d4:	b.n	600018a4 <_reboot_Teensyduino_+0xc>
600018d6:	nop
600018d8:	.word	0x401f4400
600018dc:	.word	0x402e0000
600018e0:	.word	0x00200003
600018e4:	.word	0x20208000
600018e8:	.word	0xeb120000

600018ec <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600018ec:	ldr	r3, [pc, #28]	; (6000190c <flexspi2_command+0x20>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018ee:	lsls	r0, r0, #16
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018f0:	movs	r2, #1
	FLEXSPI2_IPCR0 = addr;
600018f2:	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600018f6:	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600018fa:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600018fe:	ldr	r2, [r3, #20]
60001900:	lsls	r2, r2, #31
60001902:	bpl.n	600018fe <flexspi2_command+0x12>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001904:	movs	r2, #1
60001906:	str	r2, [r3, #20]
}
60001908:	bx	lr
6000190a:	nop
6000190c:	.word	0x402a4000

60001910 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60001910:	ldr	r3, [pc, #32]	; (60001934 <flexspi2_psram_id+0x24>)
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001912:	ldr	r2, [pc, #36]	; (60001938 <flexspi2_psram_id+0x28>)
	FLEXSPI2_IPCR0 = addr;
60001914:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001918:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
6000191c:	movs	r2, #1
6000191e:	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001922:	ldr	r2, [r3, #20]
60001924:	lsls	r2, r2, #31
60001926:	bpl.n	60001922 <flexspi2_psram_id+0x12>
	uint32_t id = FLEXSPI2_RFDR0;
60001928:	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
6000192c:	movs	r2, #33	; 0x21
}
6000192e:	uxth	r0, r0
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001930:	str	r2, [r3, #20]
}
60001932:	bx	lr
60001934:	.word	0x402a4000
60001938:	.word	0x00030004

6000193c <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
6000193c:	bx	lr

6000193e <startup_default_middle_hook>:
6000193e:	bx	lr

60001940 <startup_default_late_hook>:
60001940:	bx	lr

60001942 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
60001942:	nop
60001944:	bx	lr

60001946 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60001946:	mov.w	r3, #3758153728	; 0xe000e000
6000194a:	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000194c:	movs	r2, #16
	SCB_MPU_CTRL = 0; // turn off MPU
6000194e:	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001952:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001956:	ldr	r2, [pc, #184]	; (60001a10 <configure_cache+0xca>)
60001958:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000195c:	movs	r2, #17
6000195e:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
60001962:	ldr	r2, [pc, #176]	; (60001a14 <configure_cache+0xce>)
60001964:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001968:	movs	r2, #18
6000196a:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000196e:	ldr	r2, [pc, #168]	; (60001a18 <configure_cache+0xd2>)
60001970:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001974:	ldr	r2, [pc, #164]	; (60001a1c <configure_cache+0xd6>)
60001976:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000197a:	ldr	r2, [pc, #164]	; (60001a20 <configure_cache+0xda>)
6000197c:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001980:	ldr	r2, [pc, #160]	; (60001a24 <configure_cache+0xde>)
60001982:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001986:	ldr	r2, [pc, #160]	; (60001a28 <configure_cache+0xe2>)
60001988:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000198c:	ldr	r2, [pc, #156]	; (60001a2c <configure_cache+0xe6>)
6000198e:	orr.w	r2, r2, #21
60001992:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001996:	ldr	r2, [pc, #152]	; (60001a30 <configure_cache+0xea>)
60001998:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
6000199c:	add.w	r2, r2, #270532608	; 0x10200000
600019a0:	adds	r2, #13
600019a2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600019a6:	ldr	r2, [pc, #140]	; (60001a34 <configure_cache+0xee>)
600019a8:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600019ac:	ldr	r2, [pc, #136]	; (60001a38 <configure_cache+0xf2>)
600019ae:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600019b2:	ldr	r2, [pc, #136]	; (60001a3c <configure_cache+0xf6>)
600019b4:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600019b8:	ldr	r2, [pc, #132]	; (60001a40 <configure_cache+0xfa>)
600019ba:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600019be:	ldr	r2, [pc, #132]	; (60001a44 <configure_cache+0xfe>)
600019c0:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600019c4:	ldr	r2, [pc, #128]	; (60001a48 <configure_cache+0x102>)
600019c6:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600019ca:	ldr	r2, [pc, #128]	; (60001a4c <configure_cache+0x106>)
600019cc:	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600019d0:	ldr	r2, [pc, #124]	; (60001a50 <configure_cache+0x10a>)
600019d2:	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600019d6:	ldr	r2, [pc, #124]	; (60001a54 <configure_cache+0x10e>)
600019d8:	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600019dc:	nop
	asm("nop");
600019de:	nop
	asm("nop");
600019e0:	nop
	asm("nop");
600019e2:	nop
	asm("nop");
600019e4:	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600019e6:	movs	r2, #1
600019e8:	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600019ec:	dsb	sy
	asm("isb");
600019f0:	isb	sy
	SCB_CACHE_ICIALLU = 0;
600019f4:	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600019f8:	dsb	sy
	asm("isb");
600019fc:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001a00:	ldr.w	r2, [r3, #3348]	; 0xd14
60001a04:	orr.w	r2, r2, #196608	; 0x30000
60001a08:	str.w	r2, [r3, #3348]	; 0xd14
}
60001a0c:	bx	lr
60001a0e:	nop
60001a10:	.word	0x1000003f
60001a14:	.word	0x07080025
60001a18:	.word	0x00100009
60001a1c:	.word	0x00200013
60001a20:	.word	0x07020021
60001a24:	.word	0x20000014
60001a28:	.word	0x13080025
60001a2c:	.word	0x20015620
60001a30:	.word	0x10000009
60001a34:	.word	0x130b0027
60001a38:	.word	0x40000017
60001a3c:	.word	0x13100033
60001a40:	.word	0x60000018
60001a44:	.word	0x070b002f
60001a48:	.word	0x70000019
60001a4c:	.word	0x130b002f
60001a50:	.word	0x8000001a
60001a54:	.word	0x130b003b

60001a58 <configure_external_ram>:
{
60001a58:	push	{r0, r1, r4, r5, r6, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a5a:	ldr	r3, [pc, #536]	; (60001c74 <configure_external_ram+0x21c>)
60001a5c:	ldr	r2, [pc, #536]	; (60001c78 <configure_external_ram+0x220>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a5e:	ldr	r1, [pc, #540]	; (60001c7c <configure_external_ram+0x224>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a60:	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a64:	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a68:	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a6c:	sub.w	r2, r2, #45056	; 0xb000
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a70:	ldr	r4, [pc, #524]	; (60001c80 <configure_external_ram+0x228>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a72:	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a76:	add.w	r2, r2, #28672	; 0x7000
60001a7a:	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a7e:	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a82:	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a86:	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a8a:	movs	r2, #24
60001a8c:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a8e:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a90:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a92:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a94:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a96:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a9a:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a9e:	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001aa2:	movs	r2, #1
60001aa4:	str.w	r2, [r3, #1836]	; 0x72c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001aa8:	str.w	r2, [r3, #1840]	; 0x730
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001aac:	str.w	r2, [r3, #1844]	; 0x734
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001ab0:	str.w	r2, [r3, #1848]	; 0x738
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001ab4:	str.w	r2, [r3, #1852]	; 0x73c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001ab8:	str.w	r2, [r3, #1872]	; 0x750
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001abc:	ldr	r2, [pc, #452]	; (60001c84 <configure_external_ram+0x22c>)
60001abe:	ldr	r3, [r2, #24]
60001ac0:	bic.w	r3, r3, #3758096384	; 0xe0000000
60001ac4:	bic.w	r3, r3, #768	; 0x300
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001ac8:	orr.w	r3, r3, #2684354560	; 0xa0000000
60001acc:	orr.w	r3, r3, #768	; 0x300
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001ad0:	str	r3, [r2, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001ad2:	ldr.w	r3, [r2, #132]	; 0x84
60001ad6:	orr.w	r3, r3, #12
60001ada:	str.w	r3, [r2, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001ade:	ldr	r3, [pc, #424]	; (60001c88 <configure_external_ram+0x230>)
60001ae0:	ldr	r2, [r3, #0]
60001ae2:	orr.w	r2, r2, #2
60001ae6:	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001ae8:	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001aea:	ldr	r2, [pc, #416]	; (60001c8c <configure_external_ram+0x234>)
60001aec:	bic.w	r1, r1, #30848	; 0x7880
60001af0:	bic.w	r1, r1, #115	; 0x73
60001af4:	lsls	r1, r1, #16
60001af6:	lsrs	r1, r1, #16
60001af8:	orrs	r2, r1
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001afa:	ldr	r1, [pc, #404]	; (60001c90 <configure_external_ram+0x238>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001afc:	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001afe:	mov.w	r2, #4294967295
60001b02:	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b04:	add.w	r2, r2, #16187392	; 0xf70000
60001b08:	ldr	r0, [r1, #8]
60001b0a:	add.w	r2, r2, #14336	; 0x3800
60001b0e:	ands	r2, r0
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b10:	ldr	r0, [pc, #384]	; (60001c94 <configure_external_ram+0x23c>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001b12:	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001b16:	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001b18:	ldr	r2, [r3, #12]
60001b1a:	bic.w	r2, r2, #120	; 0x78
60001b1e:	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b20:	ldr	r2, [r3, #32]
60001b22:	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b24:	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b26:	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b28:	ldr	r2, [r3, #32]
60001b2a:	ands	r2, r4
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b2c:	mov.w	r4, #8192	; 0x2000
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001b30:	orrs	r2, r0
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b32:	ldr	r0, [pc, #356]	; (60001c98 <configure_external_ram+0x240>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001b34:	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001b36:	ldr	r2, [pc, #356]	; (60001c9c <configure_external_ram+0x244>)
60001b38:	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001b3a:	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001b3c:	ldr.w	r2, [r1, #184]	; 0xb8
60001b40:	bic.w	r2, r2, #63	; 0x3f
60001b44:	orr.w	r2, r2, #1
60001b48:	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b4c:	ldr.w	r2, [r1, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60001b50:	movs	r1, #0
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001b52:	bic.w	r2, r2, #63	; 0x3f
60001b56:	orr.w	r2, r2, #1
60001b5a:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b5e:	movw	r2, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001b62:	str	r1, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001b64:	str	r4, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b66:	str	r0, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b68:	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001b6c:	str	r4, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001b6e:	str	r0, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001b70:	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b74:	ldr	r2, [r3, #0]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b76:	ldr	r0, [pc, #296]	; (60001ca0 <configure_external_ram+0x248>)
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b78:	bic.w	r2, r2, #2
60001b7c:	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b7e:	ldr	r2, [pc, #292]	; (60001ca4 <configure_external_ram+0x24c>)
60001b80:	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b82:	movs	r2, #2
60001b84:	str	r2, [r3, #28]
60001b86:	ldr	r2, [pc, #288]	; (60001ca8 <configure_external_ram+0x250>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b88:	str.w	r1, [r2], #4
60001b8c:	cmp	r2, r0
60001b8e:	bne.n	60001b88 <configure_external_ram+0x130>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b90:	ldr	r2, [r3, #0]
60001b92:	orr.w	r2, r2, #1
60001b96:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b98:	ldr	r3, [pc, #236]	; (60001c88 <configure_external_ram+0x230>)
60001b9a:	ldr	r4, [r3, #0]
60001b9c:	ands.w	r4, r4, #1
60001ba0:	bne.n	60001b9a <configure_external_ram+0x142>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001ba2:	ldr	r2, [pc, #256]	; (60001ca4 <configure_external_ram+0x24c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001ba4:	movs	r6, #2
	flexspi2_command(0, 0); // exit quad mode
60001ba6:	mov	r1, r4
60001ba8:	mov	r0, r4
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001baa:	str	r2, [r3, #24]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bac:	movw	r2, #1781	; 0x6f5
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001bb0:	str	r6, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001bb2:	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001bb6:	movw	r2, #1126	; 0x466
60001bba:	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001bbe:	movw	r2, #1177	; 0x499
60001bc2:	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001bc6:	ldr	r2, [pc, #228]	; (60001cac <configure_external_ram+0x254>)
60001bc8:	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001bcc:	movw	r2, #9217	; 0x2401
60001bd0:	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001bd4:	movw	r2, #1077	; 0x435
60001bd8:	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001bdc:	ldr	r2, [pc, #208]	; (60001cb0 <configure_external_ram+0x258>)
60001bde:	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001be2:	ldr	r2, [pc, #208]	; (60001cb4 <configure_external_ram+0x25c>)
60001be4:	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001be8:	ldr	r2, [pc, #204]	; (60001cb8 <configure_external_ram+0x260>)
60001bea:	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001bee:	movw	r2, #8705	; 0x2201
60001bf2:	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
60001bf6:	bl	600018ec <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
60001bfa:	movs	r0, #1
60001bfc:	bl	600018ec <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60001c00:	mov	r0, r6
60001c02:	bl	600018ec <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001c06:	mov	r0, r4
60001c08:	bl	60001910 <flexspi2_psram_id>
60001c0c:	movw	r3, #23821	; 0x5d0d
60001c10:	mov	r5, r0
60001c12:	cmp	r0, r3
60001c14:	bne.n	60001c66 <configure_external_ram+0x20e>
		flexspi2_command(4, 0);
60001c16:	movs	r0, #4
60001c18:	bl	600018ec <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60001c1c:	mov.w	r1, #8388608	; 0x800000
60001c20:	mov	r0, r4
60001c22:	bl	600018ec <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
60001c26:	movs	r0, #1
60001c28:	bl	600018ec <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60001c2c:	mov	r0, r6
60001c2e:	bl	600018ec <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c32:	mov	r0, r1
60001c34:	bl	60001910 <flexspi2_psram_id>
60001c38:	cmp	r0, r5
60001c3a:	bne.n	60001c62 <configure_external_ram+0x20a>
			flexspi2_command(4, 0x800000);
60001c3c:	movs	r0, #4
60001c3e:	bl	600018ec <flexspi2_command>
			external_psram_size = 16;
60001c42:	movs	r0, #16
			external_psram_size * 0x100000 -
60001c44:	ldr	r1, [pc, #116]	; (60001cbc <configure_external_ram+0x264>)
			external_psram_size = 16;
60001c46:	ldr	r3, [pc, #120]	; (60001cc0 <configure_external_ram+0x268>)
			external_psram_size * 0x100000 -
60001c48:	ldr	r2, [pc, #120]	; (60001cc4 <configure_external_ram+0x26c>)
			external_psram_size = 16;
60001c4a:	strb	r0, [r3, #0]
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c4c:	movs	r3, #0
			external_psram_size * 0x100000 -
60001c4e:	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001c50:	str	r3, [sp, #0]
60001c52:	movs	r3, #1
60001c54:	add.w	r2, r2, r0, lsl #20
60001c58:	ldr	r0, [pc, #108]	; (60001cc8 <configure_external_ram+0x270>)
60001c5a:	bl	60002458 <__sm_set_pool_veneer>
}
60001c5e:	add	sp, #8
60001c60:	pop	{r4, r5, r6, pc}
60001c62:	movs	r0, #8
60001c64:	b.n	60001c44 <configure_external_ram+0x1ec>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c66:	movs	r2, #16
60001c68:	ldr	r0, [pc, #92]	; (60001cc8 <configure_external_ram+0x270>)
}
60001c6a:	add	sp, #8
60001c6c:	ldmia.w	sp!, {r4, r5, r6, lr}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001c70:	b.w	60002440 <__memset_veneer>
60001c74:	.word	0x401f8000
60001c78:	.word	0x0001b0f9
60001c7c:	.word	0x000110f9
60001c80:	.word	0x7cf0ff00
60001c84:	.word	0x400fc000
60001c88:	.word	0x402a4000
60001c8c:	.word	0xffff0012
60001c90:	.word	0x402a8000
60001c94:	.word	0x80000040
60001c98:	.word	0x00020063
60001c9c:	.word	0x830f00ff
60001ca0:	.word	0x402a4300
60001ca4:	.word	0x5af05af0
60001ca8:	.word	0x402a4200
60001cac:	.word	0x3018049f
60001cb0:	.word	0x0a1806eb
60001cb4:	.word	0x26013206
60001cb8:	.word	0x0a180638
60001cbc:	.word	0x70240000
60001cc0:	.word	0x200155bd
60001cc4:	.word	0x70000000
60001cc8:	.word	0x20014ba8

60001ccc <usb_pll_start>:
{
60001ccc:	push	{r4, r5, r6, r7, lr}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001cce:	ldr	r3, [pc, #84]	; (60001d24 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001cd0:	movs	r0, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001cd2:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001cd6:	mov.w	r4, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cda:	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cde:	mov.w	r6, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001ce2:	movw	r7, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001ce6:	ldr	r2, [r3, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001ce8:	tst.w	r2, #2
60001cec:	beq.n	60001cf6 <usb_pll_start+0x2a>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001cee:	str	r6, [r3, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001cf0:	str	r1, [r3, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001cf2:	str	r7, [r3, #24]
			continue;
60001cf4:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001cf6:	tst.w	r2, #8192	; 0x2000
60001cfa:	bne.n	60001d00 <usb_pll_start+0x34>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001cfc:	str	r5, [r3, #20]
			continue;
60001cfe:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001d00:	tst.w	r2, #4096	; 0x1000
60001d04:	bne.n	60001d0a <usb_pll_start+0x3e>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d06:	str	r4, [r3, #20]
			continue;
60001d08:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001d0a:	cmp	r2, #0
60001d0c:	bge.n	60001ce6 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001d0e:	tst.w	r2, #65536	; 0x10000
60001d12:	beq.n	60001d18 <usb_pll_start+0x4c>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d14:	str	r1, [r3, #24]
			continue;
60001d16:	b.n	60001ce6 <usb_pll_start+0x1a>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001d18:	lsls	r2, r2, #25
60001d1a:	bmi.n	60001d20 <usb_pll_start+0x54>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d1c:	str	r0, [r3, #20]
			continue;
60001d1e:	b.n	60001ce6 <usb_pll_start+0x1a>
}
60001d20:	pop	{r4, r5, r6, r7, pc}
60001d22:	nop
60001d24:	.word	0x400d8000

60001d28 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d28:	ldr	r2, [pc, #248]	; (60001e24 <tempmon_init+0xfc>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d2a:	vmov.f32	s12, #57	; 0x41c80000  25.0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d2e:	ldr	r0, [pc, #248]	; (60001e28 <tempmon_init+0x100>)
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d30:	ldr.w	r3, [r2, #128]	; 0x80
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d34:	vldr	s10, [pc, #244]	; 60001e2c <tempmon_init+0x104>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d38:	bic.w	r3, r3, #1
{
60001d3c:	push	{r4, lr}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001d3e:	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d42:	movs	r3, #3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d44:	ldr	r4, [pc, #232]	; (60001e30 <tempmon_init+0x108>)
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001d46:	str.w	r3, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001d4a:	ldr	r3, [pc, #232]	; (60001e34 <tempmon_init+0x10c>)
60001d4c:	ldr.w	r3, [r3, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001d50:	uxtb	r1, r3
60001d52:	str	r1, [r0, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d54:	vmov	s15, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d58:	ubfx	r0, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d5c:	lsrs	r3, r3, #20
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d5e:	vcvt.f32.s32	s14, s15
60001d62:	ldr	r1, [pc, #212]	; (60001e38 <tempmon_init+0x110>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d64:	vmov	s15, r0
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001d68:	str	r0, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d6a:	vcvt.f32.s32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001d6e:	vmov	s15, r3
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d72:	vsub.f32	s10, s14, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d76:	ldr	r3, [pc, #196]	; (60001e3c <tempmon_init+0x114>)
60001d78:	vcvt.f32.s32	s15, s15
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d7c:	vsub.f32	s12, s14, s12
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d80:	vsub.f32	s15, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d84:	vstr	s12, [r1]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d88:	vmul.f32	s10, s10, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d8c:	vstr	s15, [r3]
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d90:	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001d94:	vdiv.f32	s11, s10, s12
60001d98:	vadd.f32	s11, s11, s13
60001d9c:	vcvt.u32.f32	s11, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001da0:	vmov	r1, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001da4:	vldr	s11, [pc, #152]	; 60001e40 <tempmon_init+0x118>
60001da8:	vsub.f32	s14, s14, s11
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001dac:	orr.w	r3, r3, r1, lsl #20
60001db0:	str.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001db4:	vmul.f32	s14, s14, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001db8:	ldr	r3, [pc, #136]	; (60001e44 <tempmon_init+0x11c>)
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dba:	vmul.f32	s15, s12, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dbe:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dc2:	vdiv.f32	s11, s14, s12
60001dc6:	vadd.f32	s14, s11, s13
60001dca:	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dce:	vmov	r0, s14
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dd2:	vdiv.f32	s14, s15, s12
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001dd6:	and.w	r3, r3, r0, lsl #16
60001dda:	orrs	r3, r1
60001ddc:	str.w	r3, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001de0:	ldr.w	r1, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de4:	vadd.f32	s15, s14, s13
60001de8:	vcvt.u32.f32	s15, s15
60001dec:	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001df0:	ubfx	r3, r3, #0, #12
60001df4:	orrs	r3, r1
60001df6:	str.w	r3, [r2, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001dfa:	ldr.w	r3, [r2, #128]	; 0x80
60001dfe:	orr.w	r3, r3, #2
60001e02:	str.w	r3, [r2, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e06:	movs	r2, #0
60001e08:	ldr	r3, [pc, #60]	; (60001e48 <tempmon_init+0x120>)
60001e0a:	strb.w	r2, [r3, #64]	; 0x40
60001e0e:	ldr	r3, [pc, #60]	; (60001e4c <tempmon_init+0x124>)
60001e10:	ldr	r2, [pc, #60]	; (60001e50 <tempmon_init+0x128>)
60001e12:	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001e16:	mov.w	r3, #3758153728	; 0xe000e000
60001e1a:	movs	r2, #1
60001e1c:	str.w	r2, [r3, #264]	; 0x108
}
60001e20:	pop	{r4, pc}
60001e22:	nop
60001e24:	.word	0x400d8100
60001e28:	.word	0x20014cd4
60001e2c:	.word	0x42aa0000
60001e30:	.word	0x20014cd0
60001e34:	.word	0x401f4400
60001e38:	.word	0x20014cd8
60001e3c:	.word	0x20014cdc
60001e40:	.word	0x42b40000
60001e44:	.word	0x0fff0000
60001e48:	.word	0xe000e400
60001e4c:	.word	0x20002400
60001e50:	.word	0x0000be89

60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>:
	if (isvalid(info)) return true;
	return false;
}

FLASHMEM
static int isvalid(const struct arm_fault_info_struct *info)
60001e54:	push	{r4, r5, r6, lr}
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001e56:	ldr	r4, [pc, #64]	; (60001e98 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x44>)
60001e58:	ldr.w	r3, [r4, #128]	; 0x80
60001e5c:	cmp	r3, #11
60001e5e:	bne.n	60001e92 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3e>
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
	crc = 0xFFFFFFFF;
60001e60:	mov.w	r3, #4294967295
	data = (uint32_t *)info;
60001e64:	ldr	r2, [pc, #52]	; (60001e9c <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x48>)
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e66:	ldr	r6, [pc, #56]	; (60001ea0 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x4c>)
	while (data < end) {
60001e68:	ldr	r5, [pc, #56]	; (60001ea4 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x50>)
		crc ^= *data++;
60001e6a:	ldr	r1, [r2, #0]
60001e6c:	adds	r2, #4
60001e6e:	eors	r3, r1
60001e70:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001e72:	and.w	r0, r3, #1
60001e76:	subs	r1, #1
60001e78:	mul.w	r0, r6, r0
60001e7c:	eor.w	r3, r0, r3, lsr #1
60001e80:	bne.n	60001e72 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x1e>
	while (data < end) {
60001e82:	cmp	r2, r5
60001e84:	bne.n	60001e6a <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x16>
	}
	if (crc != info->crc) return 0;
60001e86:	ldr.w	r0, [r4, #168]	; 0xa8
60001e8a:	subs	r3, r0, r3
60001e8c:	negs	r0, r3
60001e8e:	adcs	r0, r3
	return 1;
}
60001e90:	pop	{r4, r5, r6, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001e92:	movs	r0, #0
60001e94:	b.n	60001e90 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]+0x3c>
60001e96:	nop
60001e98:	.word	0x2027ff00
60001e9c:	.word	0x2027ff80
60001ea0:	.word	0xedb88320
60001ea4:	.word	0x2027ffa8

60001ea8 <CrashReportClass::clear()>:

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
60001ea8:	ldr	r2, [pc, #96]	; (60001f0c <CrashReportClass::clear()+0x64>)
60001eaa:	movs	r3, #0
{
60001eac:	push	{r4, r5, r6, lr}
	info->ipsr  = 0;
60001eae:	strd	r3, r3, [r2, #128]	; 0x80
	info->cfsr  = 0;
	info->hfsr  = 0;
60001eb2:	strd	r3, r3, [r2, #136]	; 0x88
	info->mmfar = 0;
	info->bfar  = 0;
60001eb6:	strd	r3, r3, [r2, #144]	; 0x90
	info->ret = 0;
	info->xpsr  = 0;
60001eba:	strd	r3, r3, [r2, #152]	; 0x98
	info->crc = 0;
60001ebe:	str.w	r3, [r2, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001ec2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
60001ec6:	mov.w	r4, #3758153728	; 0xe000e000
60001eca:	adds	r2, #128	; 0x80
60001ecc:	str.w	r2, [r4, #3952]	; 0xf70
60001ed0:	adds	r2, #32
60001ed2:	str.w	r2, [r4, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
60001ed6:	dsb	sy
	asm("isb");
60001eda:	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ede:	ldr	r2, [pc, #48]	; (60001f10 <CrashReportClass::clear()+0x68>)
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001ee0:	ldr	r6, [pc, #48]	; (60001f14 <CrashReportClass::clear()+0x6c>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee2:	ldr	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee4:	ldr	r5, [pc, #48]	; (60001f18 <CrashReportClass::clear()+0x70>)
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
60001ee6:	str	r1, [r2, #8]
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ee8:	movs	r1, #28
	SRC_GPR5 = 0;
60001eea:	str	r3, [r2, #48]	; 0x30
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001eec:	mov	r0, r5
  *(volatile uint32_t *)(&bc->bitmask) = 0;
60001eee:	str.w	r3, [r6, #4032]	; 0xfc0
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
60001ef2:	bl	60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60001ef6:	str.w	r0, [r6, #4060]	; 0xfdc
	asm("dsb");
60001efa:	dsb	sy
		SCB_CACHE_DCCMVAC = location;
60001efe:	str.w	r5, [r4, #3944]	; 0xf68
	asm("dsb");
60001f02:	dsb	sy
	asm("isb");
60001f06:	isb	sy
}
60001f0a:	pop	{r4, r5, r6, pc}
60001f0c:	.word	0x2027ff00
60001f10:	.word	0x400f8000
60001f14:	.word	0x2027f000
60001f18:	.word	0x2027ffc0

60001f1c <CrashReportClass::printTo(Print&) const>:
{
60001f1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
60001f20:	mov	r4, r1
  if (isvalid(info)) {
60001f22:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
60001f26:	cmp	r0, #0
60001f28:	beq.w	600022cc <CrashReportClass::printTo(Print&) const+0x3b0>
    uint8_t ss = info->time % 60;
60001f2c:	ldr	r6, [pc, #692]	; (600021e4 <CrashReportClass::printTo(Print&) const+0x2c8>)
    p.println("CrashReport:");
60001f2e:	mov	r0, r4
60001f30:	ldr	r1, [pc, #692]	; (600021e8 <CrashReportClass::printTo(Print&) const+0x2cc>)
    info->time /= 60;
60001f32:	mov.w	r8, #60	; 0x3c
    p.println("CrashReport:");
60001f36:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f3a:	ldr.w	r7, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f3e:	ldr	r1, [pc, #684]	; (600021ec <CrashReportClass::printTo(Print&) const+0x2d0>)
60001f40:	mov	r0, r4
    info->time /= 60;
60001f42:	udiv	r9, r7, r8
    info->time /= 60;
60001f46:	udiv	r5, r9, r8
60001f4a:	str.w	r5, [r6, #164]	; 0xa4
    p.print("  A problem occurred at (system time) ");
60001f4e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t hh = info->time % 24;
60001f52:	movs	r3, #24
    p.print(hh);
60001f54:	mov	r0, r4
    uint8_t hh = info->time % 24;
60001f56:	udiv	r1, r5, r3
60001f5a:	mls	r1, r3, r1, r5
    p.print(hh);
60001f5e:	uxtb	r1, r1
60001f60:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f64:	ldr	r1, [pc, #648]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f66:	mov	r0, r4
60001f68:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t mm = info->time % 60;
60001f6c:	mls	r1, r8, r5, r9
    p.print(mm);
60001f70:	mov	r0, r4
60001f72:	uxtb	r1, r1
60001f74:	bl	60002428 <___ZN5Print5printEh_veneer>
    p.print(":");
60001f78:	ldr	r1, [pc, #628]	; (600021f0 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001f7a:	mov	r0, r4
60001f7c:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    uint8_t ss = info->time % 60;
60001f80:	mls	r1, r8, r9, r7
	size_t println(const char s[])			{ return print(s) + println(); }
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001f84:	mov	r0, r4
60001f86:	uxtb	r1, r1
60001f88:	bl	60002428 <___ZN5Print5printEh_veneer>
60001f8c:	mov	r0, r4
60001f8e:	bl	600024a8 <___ZN5Print7printlnEv_veneer>
    p.print("  Code was executing from address 0x");
60001f92:	ldr	r1, [pc, #608]	; (600021f4 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001f94:	mov	r0, r4
60001f96:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.println(info->ret, HEX);
60001f9a:	movs	r2, #16
60001f9c:	ldr.w	r1, [r6, #152]	; 0x98
60001fa0:	mov	r0, r4
60001fa2:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
    uint32_t _CFSR = info->cfsr;
60001fa6:	ldr.w	r5, [r6, #136]	; 0x88
    if (_CFSR > 0) {
60001faa:	cmp	r5, #0
60001fac:	beq.n	6000205c <CrashReportClass::printTo(Print&) const+0x140>
      p.print("  CFSR: ");
60001fae:	ldr	r1, [pc, #584]	; (600021f8 <CrashReportClass::printTo(Print&) const+0x2dc>)
60001fb0:	mov	r0, r4
60001fb2:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->cfsr, HEX);
60001fb6:	movs	r2, #16
60001fb8:	ldr.w	r1, [r6, #136]	; 0x88
60001fbc:	mov	r0, r4
60001fbe:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if ((_CFSR & 1) == 1) {
60001fc2:	lsls	r2, r5, #31
60001fc4:	bpl.w	6000216c <CrashReportClass::printTo(Print&) const+0x250>
        p.println("\t(IACCVIOL) Instruction Access Violation");
60001fc8:	ldr	r1, [pc, #560]	; (600021fc <CrashReportClass::printTo(Print&) const+0x2e0>)
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
60001fca:	mov	r0, r4
60001fcc:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001fd0:	lsls	r2, r5, #24
60001fd2:	bpl.n	60002028 <CrashReportClass::printTo(Print&) const+0x10c>
        p.print("\t(MMARVALID) Accessed Address: 0x");
60001fd4:	ldr	r1, [pc, #552]	; (60002200 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001fd6:	mov	r0, r4
60001fd8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(info->mmfar, HEX);
60001fdc:	movs	r2, #16
60001fde:	ldr.w	r1, [r6, #144]	; 0x90
60001fe2:	mov	r0, r4
60001fe4:	bl	60002438 <___ZN5Print5printEmi_veneer>
        if (info->mmfar < 32) {
60001fe8:	ldr.w	r2, [r6, #144]	; 0x90
60001fec:	cmp	r2, #31
60001fee:	bhi.w	6000218e <CrashReportClass::printTo(Print&) const+0x272>
          p.print(" (nullptr)\n\t  Check code at 0x");
60001ff2:	ldr	r1, [pc, #528]	; (60002204 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001ff4:	mov	r0, r4
60001ff6:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
60001ffa:	movs	r2, #16
60001ffc:	ldr.w	r1, [r6, #152]	; 0x98
60002000:	mov	r0, r4
60002002:	bl	60002438 <___ZN5Print5printEmi_veneer>
          p.print(" - very likely a bug!\n\t  Run \"addr2line -e mysketch.ino.elf 0x");
60002006:	ldr	r1, [pc, #512]	; (60002208 <CrashReportClass::printTo(Print&) const+0x2ec>)
60002008:	mov	r0, r4
6000200a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
          p.print(info->ret, HEX);
6000200e:	ldr.w	r1, [r6, #152]	; 0x98
60002012:	movs	r2, #16
60002014:	mov	r0, r4
60002016:	bl	60002438 <___ZN5Print5printEmi_veneer>
          p.print("\" for filename & line number.");
6000201a:	ldr	r1, [pc, #496]	; (6000220c <CrashReportClass::printTo(Print&) const+0x2f0>)
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000201c:	mov	r0, r4
6000201e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println();
60002022:	mov	r0, r4
60002024:	bl	600024a8 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & 0x100) >> 8) == 1) {
60002028:	lsls	r3, r5, #23
6000202a:	bpl.w	600021a2 <CrashReportClass::printTo(Print&) const+0x286>
        p.println("\t(IBUSERR) Instruction Bus Error");
6000202e:	ldr	r1, [pc, #480]	; (60002210 <CrashReportClass::printTo(Print&) const+0x2f4>)
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
60002030:	mov	r0, r4
60002032:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60002036:	lsls	r7, r5, #16
60002038:	bpl.n	6000204e <CrashReportClass::printTo(Print&) const+0x132>
        p.print("\t(BFARVALID) Accessed Address: 0x");
6000203a:	ldr	r1, [pc, #472]	; (60002214 <CrashReportClass::printTo(Print&) const+0x2f8>)
6000203c:	mov	r0, r4
6000203e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.println(info->bfar, HEX);
60002042:	movs	r2, #16
60002044:	ldr.w	r1, [r6, #148]	; 0x94
60002048:	mov	r0, r4
6000204a:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if (((_CFSR & 0x10000) >> 16) == 1) {
6000204e:	lsls	r0, r5, #15
60002050:	bpl.w	600021cc <CrashReportClass::printTo(Print&) const+0x2b0>
        p.println("\t(UNDEFINSTR) Undefined instruction");
60002054:	ldr	r1, [pc, #448]	; (60002218 <CrashReportClass::printTo(Print&) const+0x2fc>)
        p.println("\t(DIVBYZERO) Divide by zero");
60002056:	mov	r0, r4
60002058:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    uint32_t _HFSR = info->hfsr;
6000205c:	ldr.w	r5, [r6, #140]	; 0x8c
    if (_HFSR > 0) {
60002060:	cbz	r5, 60002084 <CrashReportClass::printTo(Print&) const+0x168>
      p.print("  HTSR: ");
60002062:	ldr	r1, [pc, #440]	; (6000221c <CrashReportClass::printTo(Print&) const+0x300>)
60002064:	mov	r0, r4
60002066:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
      p.println(info->hfsr, HEX);
6000206a:	movs	r2, #16
6000206c:	ldr.w	r1, [r6, #140]	; 0x8c
60002070:	mov	r0, r4
60002072:	bl	60002430 <___ZN5Print7printlnEmi_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60002076:	lsls	r0, r5, #30
60002078:	bpl.w	600022c2 <CrashReportClass::printTo(Print&) const+0x3a6>
      p.println("\t(VECTTBL) Bus Fault on Vec Table Read");
6000207c:	ldr	r1, [pc, #416]	; (60002220 <CrashReportClass::printTo(Print&) const+0x304>)
       p.println("\t(FORCED) Forced Hard Fault");
6000207e:	mov	r0, r4
60002080:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.print("  Temperature inside the chip was ");
60002084:	ldr	r1, [pc, #412]	; (60002224 <CrashReportClass::printTo(Print&) const+0x308>)
60002086:	mov	r0, r4
60002088:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print(info->temp);
6000208c:	vldr	s0, [r6, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60002090:	movs	r1, #2
60002092:	mov	r0, r4
60002094:	vcvt.f64.f32	d0, s0
60002098:	bl	60002468 <___ZN5Print10printFloatEdh_veneer>
    p.print(" ┬░C\n");
6000209c:	ldr	r1, [pc, #392]	; (60002228 <CrashReportClass::printTo(Print&) const+0x30c>)
6000209e:	mov	r0, r4
600020a0:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print("  Startup CPU clock speed is ");
600020a4:	ldr	r1, [pc, #388]	; (6000222c <CrashReportClass::printTo(Print&) const+0x310>)
600020a6:	mov	r0, r4
600020a8:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
    p.print( F_CPU_ACTUAL/1000000);
600020ac:	ldr	r3, [pc, #384]	; (60002230 <CrashReportClass::printTo(Print&) const+0x314>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
600020ae:	ldr	r1, [pc, #388]	; (60002234 <CrashReportClass::printTo(Print&) const+0x318>)
600020b0:	movs	r2, #10
600020b2:	ldr	r0, [r3, #0]
600020b4:	movs	r3, #0
600020b6:	udiv	r1, r0, r1
600020ba:	mov	r0, r4
600020bc:	bl	600024b0 <___ZN5Print11printNumberEmhh_veneer>
    p.print( "MHz\n");
600020c0:	ldr	r1, [pc, #372]	; (60002238 <CrashReportClass::printTo(Print&) const+0x31c>)
600020c2:	mov	r0, r4
600020c4:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
  uint32_t SRSR = SRC_SRSR;
600020c8:	ldr	r3, [pc, #368]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
600020ca:	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
600020cc:	lsls	r2, r5, #30
600020ce:	bpl.n	600020e2 <CrashReportClass::printTo(Print&) const+0x1c6>
    uint32_t gpr5 = SRC_GPR5;
600020d0:	ldr	r2, [r3, #48]	; 0x30
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020d2:	mov	r0, r4
    if (gpr5 == 0x0BAD00F1) {
600020d4:	ldr	r3, [pc, #360]	; (60002240 <CrashReportClass::printTo(Print&) const+0x324>)
600020d6:	cmp	r2, r3
      p.println("  Reboot was caused by auto reboot after fault or bad interrupt detected");
600020d8:	ite	eq
600020da:	ldreq	r1, [pc, #360]	; (60002244 <CrashReportClass::printTo(Print&) const+0x328>)
      p.println("  Reboot was caused by software write to SCB_AIRCR or CPU lockup");
600020dc:	ldrne	r1, [pc, #360]	; (60002248 <CrashReportClass::printTo(Print&) const+0x32c>)
600020de:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
600020e2:	lsls	r7, r5, #29
600020e4:	bpl.n	600020ee <CrashReportClass::printTo(Print&) const+0x1d2>
    p.println("  Reboot was caused by security monitor");
600020e6:	ldr	r1, [pc, #356]	; (6000224c <CrashReportClass::printTo(Print&) const+0x330>)
600020e8:	mov	r0, r4
600020ea:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
600020ee:	lsls	r6, r5, #28
600020f0:	bpl.n	600020fa <CrashReportClass::printTo(Print&) const+0x1de>
    p.println("  Reboot was caused by power on/off button");
600020f2:	ldr	r1, [pc, #348]	; (60002250 <CrashReportClass::printTo(Print&) const+0x334>)
600020f4:	mov	r0, r4
600020f6:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
600020fa:	lsls	r0, r5, #27
600020fc:	bpl.n	60002106 <CrashReportClass::printTo(Print&) const+0x1ea>
    p.println("  Reboot was caused by watchdog 1 or 2");
600020fe:	ldr	r1, [pc, #340]	; (60002254 <CrashReportClass::printTo(Print&) const+0x338>)
60002100:	mov	r0, r4
60002102:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60002106:	lsls	r1, r5, #26
60002108:	bpl.n	60002112 <CrashReportClass::printTo(Print&) const+0x1f6>
    p.println("  Reboot was caused by JTAG boundary scan");
6000210a:	ldr	r1, [pc, #332]	; (60002258 <CrashReportClass::printTo(Print&) const+0x33c>)
6000210c:	mov	r0, r4
6000210e:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60002112:	lsls	r2, r5, #25
60002114:	bpl.n	6000211e <CrashReportClass::printTo(Print&) const+0x202>
    p.println("  Reboot was caused by JTAG debug");
60002116:	ldr	r1, [pc, #324]	; (6000225c <CrashReportClass::printTo(Print&) const+0x340>)
60002118:	mov	r0, r4
6000211a:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
6000211e:	lsls	r3, r5, #24
60002120:	bpl.n	6000212a <CrashReportClass::printTo(Print&) const+0x20e>
    p.println("  Reboot was caused by watchdog 3");
60002122:	ldr	r1, [pc, #316]	; (60002260 <CrashReportClass::printTo(Print&) const+0x344>)
60002124:	mov	r0, r4
60002126:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
6000212a:	ands.w	r5, r5, #256	; 0x100
6000212e:	beq.w	600022fe <CrashReportClass::printTo(Print&) const+0x3e2>
    p.println("  Reboot was caused by temperature sensor");
60002132:	ldr	r1, [pc, #304]	; (60002264 <CrashReportClass::printTo(Print&) const+0x348>)
60002134:	mov	r0, r4
60002136:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
6000213a:	ldr	r2, [pc, #256]	; (6000223c <CrashReportClass::printTo(Print&) const+0x320>)
	  p.println("Panic Temp Exceeded Shutting Down");
6000213c:	ldr	r1, [pc, #296]	; (60002268 <CrashReportClass::printTo(Print&) const+0x34c>)
6000213e:	mov	r0, r4
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
60002140:	ldr	r3, [r2, #8]
60002142:	bic.w	r3, r3, #256	; 0x100
60002146:	str	r3, [r2, #8]
	  p.println("Panic Temp Exceeded Shutting Down");
60002148:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  p.println("Can be caused by Overclocking w/o Heatsink or other unknown reason");
6000214c:	ldr	r1, [pc, #284]	; (6000226c <CrashReportClass::printTo(Print&) const+0x350>)
6000214e:	mov	r0, r4
60002150:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
60002154:	ldr	r3, [pc, #280]	; (60002270 <CrashReportClass::printTo(Print&) const+0x354>)
60002156:	movs	r2, #7
60002158:	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
6000215a:	ldr	r2, [pc, #280]	; (60002274 <CrashReportClass::printTo(Print&) const+0x358>)
6000215c:	ldr	r3, [r2, #56]	; 0x38
6000215e:	orr.w	r3, r3, #64	; 0x40
60002162:	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
60002164:	dsb	sy
	  while (1) asm ("wfi");
60002168:	wfi
6000216a:	b.n	60002168 <CrashReportClass::printTo(Print&) const+0x24c>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
6000216c:	lsls	r3, r5, #30
6000216e:	bpl.n	60002174 <CrashReportClass::printTo(Print&) const+0x258>
        p.println("\t(DACCVIOL) Data Access Violation");
60002170:	ldr	r1, [pc, #260]	; (60002278 <CrashReportClass::printTo(Print&) const+0x35c>)
60002172:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60002174:	lsls	r7, r5, #28
60002176:	bpl.n	6000217c <CrashReportClass::printTo(Print&) const+0x260>
        p.println("\t(MUNSTKERR) MemMange Fault on Unstacking");
60002178:	ldr	r1, [pc, #256]	; (6000227c <CrashReportClass::printTo(Print&) const+0x360>)
6000217a:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
6000217c:	lsls	r0, r5, #27
6000217e:	bpl.n	60002184 <CrashReportClass::printTo(Print&) const+0x268>
        p.println("\t(MSTKERR) MemMange Fault on stacking");
60002180:	ldr	r1, [pc, #252]	; (60002280 <CrashReportClass::printTo(Print&) const+0x364>)
60002182:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60002184:	lsls	r1, r5, #26
60002186:	bpl.w	60001fd0 <CrashReportClass::printTo(Print&) const+0xb4>
        p.println("\t(MLSPERR) MemMange Fault on FP Lazy State");
6000218a:	ldr	r1, [pc, #248]	; (60002284 <CrashReportClass::printTo(Print&) const+0x368>)
6000218c:	b.n	60001fca <CrashReportClass::printTo(Print&) const+0xae>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
6000218e:	ldr	r3, [pc, #248]	; (60002288 <CrashReportClass::printTo(Print&) const+0x36c>)
60002190:	cmp	r2, r3
60002192:	bcc.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
60002196:	adds	r3, #32
60002198:	cmp	r2, r3
6000219a:	bcs.w	60002022 <CrashReportClass::printTo(Print&) const+0x106>
          p.print(" (Stack problem)\n\t  Check for stack overflows, array bounds, etc.");
6000219e:	ldr	r1, [pc, #236]	; (6000228c <CrashReportClass::printTo(Print&) const+0x370>)
600021a0:	b.n	6000201c <CrashReportClass::printTo(Print&) const+0x100>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
600021a2:	lsls	r7, r5, #22
600021a4:	bpl.n	600021aa <CrashReportClass::printTo(Print&) const+0x28e>
        p.println("\t(PRECISERR) Data bus error(address in BFAR)");
600021a6:	ldr	r1, [pc, #232]	; (60002290 <CrashReportClass::printTo(Print&) const+0x374>)
600021a8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
600021aa:	lsls	r0, r5, #21
600021ac:	bpl.n	600021b2 <CrashReportClass::printTo(Print&) const+0x296>
        p.println("\t(IMPRECISERR) Data bus error but address not related to instruction");
600021ae:	ldr	r1, [pc, #228]	; (60002294 <CrashReportClass::printTo(Print&) const+0x378>)
600021b0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
600021b2:	lsls	r1, r5, #20
600021b4:	bpl.n	600021ba <CrashReportClass::printTo(Print&) const+0x29e>
        p.println("\t(UNSTKERR) Bus Fault on unstacking for a return from exception");
600021b6:	ldr	r1, [pc, #224]	; (60002298 <CrashReportClass::printTo(Print&) const+0x37c>)
600021b8:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
600021ba:	lsls	r2, r5, #19
600021bc:	bpl.n	600021c2 <CrashReportClass::printTo(Print&) const+0x2a6>
        p.println("\t(STKERR) Bus Fault on stacking for exception entry");
600021be:	ldr	r1, [pc, #220]	; (6000229c <CrashReportClass::printTo(Print&) const+0x380>)
600021c0:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
600021c2:	lsls	r3, r5, #18
600021c4:	bpl.w	60002036 <CrashReportClass::printTo(Print&) const+0x11a>
        p.println("\t(LSPERR) Bus Fault on FP lazy state preservation");
600021c8:	ldr	r1, [pc, #212]	; (600022a0 <CrashReportClass::printTo(Print&) const+0x384>)
600021ca:	b.n	60002030 <CrashReportClass::printTo(Print&) const+0x114>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
600021cc:	lsls	r1, r5, #14
600021ce:	bpl.n	600021d4 <CrashReportClass::printTo(Print&) const+0x2b8>
        p.println("\t(INVSTATE) Instruction makes illegal use of EPSR)");
600021d0:	ldr	r1, [pc, #208]	; (600022a4 <CrashReportClass::printTo(Print&) const+0x388>)
600021d2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
600021d4:	lsls	r2, r5, #13
600021d6:	bpl.n	600021dc <CrashReportClass::printTo(Print&) const+0x2c0>
        p.println("\t(INVPC) Usage fault: invalid EXC_RETURN");
600021d8:	ldr	r1, [pc, #204]	; (600022a8 <CrashReportClass::printTo(Print&) const+0x38c>)
600021da:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
600021dc:	lsls	r3, r5, #12
600021de:	bpl.n	600022b0 <CrashReportClass::printTo(Print&) const+0x394>
        p.println("\t(NOCP) No Coprocessor");
600021e0:	ldr	r1, [pc, #200]	; (600022ac <CrashReportClass::printTo(Print&) const+0x390>)
600021e2:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
600021e4:	.word	0x2027ff00
600021e8:	.word	0x200014d6
600021ec:	.word	0x200014e3
600021f0:	.word	0x20001a0c
600021f4:	.word	0x2000150a
600021f8:	.word	0x2000152f
600021fc:	.word	0x20001538
60002200:	.word	0x200015fe
60002204:	.word	0x20001620
60002208:	.word	0x2000163f
6000220c:	.word	0x2000167e
60002210:	.word	0x200016de
60002214:	.word	0x20001817
60002218:	.word	0x20001839
6000221c:	.word	0x20001915
60002220:	.word	0x2000191e
60002224:	.word	0x20001961
60002228:	.word	0x20001984
6000222c:	.word	0x2000198a
60002230:	.word	0x20001d2c
60002234:	.word	0x000f4240
60002238:	.word	0x200019a8
6000223c:	.word	0x400f8000
60002240:	.word	0x0bad00f1
60002244:	.word	0x20001b05
60002248:	.word	0x20001b4e
6000224c:	.word	0x20001b8f
60002250:	.word	0x20001bb7
60002254:	.word	0x20001be2
60002258:	.word	0x20001c09
6000225c:	.word	0x20001c33
60002260:	.word	0x20001c55
60002264:	.word	0x20001c77
60002268:	.word	0x20001ca1
6000226c:	.word	0x20001cc3
60002270:	.word	0x400ac000
60002274:	.word	0x400d4000
60002278:	.word	0x20001561
6000227c:	.word	0x20001583
60002280:	.word	0x200015ad
60002284:	.word	0x200015d3
60002288:	.word	0x20015620
6000228c:	.word	0x2000169c
60002290:	.word	0x200016ff
60002294:	.word	0x2000172c
60002298:	.word	0x20001771
6000229c:	.word	0x200017b1
600022a0:	.word	0x200017e5
600022a4:	.word	0x2000185d
600022a8:	.word	0x20001890
600022ac:	.word	0x200018b9
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
600022b0:	lsls	r7, r5, #7
600022b2:	bpl.n	600022b8 <CrashReportClass::printTo(Print&) const+0x39c>
        p.println("\t(UNALIGNED) Unaligned access UsageFault");
600022b4:	ldr	r1, [pc, #204]	; (60002384 <CrashReportClass::printTo(Print&) const+0x468>)
600022b6:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
600022b8:	lsls	r5, r5, #6
600022ba:	bpl.w	6000205c <CrashReportClass::printTo(Print&) const+0x140>
        p.println("\t(DIVBYZERO) Divide by zero");
600022be:	ldr	r1, [pc, #200]	; (60002388 <CrashReportClass::printTo(Print&) const+0x46c>)
600022c0:	b.n	60002056 <CrashReportClass::printTo(Print&) const+0x13a>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
600022c2:	lsls	r1, r5, #1
600022c4:	bpl.w	60002084 <CrashReportClass::printTo(Print&) const+0x168>
       p.println("\t(FORCED) Forced Hard Fault");
600022c8:	ldr	r1, [pc, #192]	; (6000238c <CrashReportClass::printTo(Print&) const+0x470>)
600022ca:	b.n	6000207e <CrashReportClass::printTo(Print&) const+0x162>
    p.println("No Crash Data To Report");
600022cc:	ldr	r1, [pc, #192]	; (60002390 <CrashReportClass::printTo(Print&) const+0x474>)
600022ce:	mov	r0, r4
600022d0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("  Hopefully all is well, but certain types of crashes can't be reported:");
600022d4:	ldr	r1, [pc, #188]	; (60002394 <CrashReportClass::printTo(Print&) const+0x478>)
600022d6:	mov	r0, r4
600022d8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tstuck in an infinite loop (technically, hardware still running properly)");
600022dc:	ldr	r1, [pc, #184]	; (60002398 <CrashReportClass::printTo(Print&) const+0x47c>)
600022de:	mov	r0, r4
600022e0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tremaining in a low power sleep mode");
600022e4:	ldr	r1, [pc, #180]	; (6000239c <CrashReportClass::printTo(Print&) const+0x480>)
600022e6:	mov	r0, r4
600022e8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\taccess to certain peripherals without their clock enabled (eg, FlexIO)");
600022ec:	ldr	r1, [pc, #176]	; (600023a0 <CrashReportClass::printTo(Print&) const+0x484>)
600022ee:	mov	r0, r4
600022f0:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    p.println("\tchange of CPU or bus clock speed without use of glitchless mux");
600022f4:	ldr	r1, [pc, #172]	; (600023a4 <CrashReportClass::printTo(Print&) const+0x488>)
600022f6:	mov	r0, r4
600022f8:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
600022fc:	b.n	600020c8 <CrashReportClass::printTo(Print&) const+0x1ac>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
600022fe:	ldr	r7, [pc, #168]	; (600023a8 <CrashReportClass::printTo(Print&) const+0x48c>)
60002300:	ldr.w	r3, [r7, #192]	; 0xc0
60002304:	cbz	r3, 60002378 <CrashReportClass::printTo(Print&) const+0x45c>
60002306:	ldr.w	r6, [r7, #220]	; 0xdc
6000230a:	movs	r1, #28
6000230c:	ldr	r0, [pc, #156]	; (600023ac <CrashReportClass::printTo(Print&) const+0x490>)
6000230e:	bl	60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>
60002312:	cmp	r6, r0
60002314:	bne.n	60002378 <CrashReportClass::printTo(Print&) const+0x45c>
        p.print("  Breadcrumb #");
60002316:	ldr.w	r8, [pc, #160]	; 600023b8 <CrashReportClass::printTo(Print&) const+0x49c>
        p.print(" was ");
6000231a:	ldr.w	r9, [pc, #160]	; 600023bc <CrashReportClass::printTo(Print&) const+0x4a0>
6000231e:	ldr.w	sl, [pc, #140]	; 600023ac <CrashReportClass::printTo(Print&) const+0x490>
      if (bc->bitmask & (1 << i)) {
60002322:	movs	r3, #1
60002324:	ldr.w	r2, [r7, #192]	; 0xc0
60002328:	mov	r6, r5
6000232a:	lsls	r3, r5
6000232c:	adds	r5, #1
6000232e:	tst	r3, r2
60002330:	beq.n	60002374 <CrashReportClass::printTo(Print&) const+0x458>
        p.print("  Breadcrumb #");
60002332:	mov	r1, r8
60002334:	mov	r0, r4
60002336:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(int n)				{ return print((long)n); }
6000233a:	mov	r1, r5
6000233c:	add.w	r6, sl, r6, lsl #2
60002340:	mov	r0, r4
60002342:	bl	600024a0 <___ZN5Print5printEl_veneer>
        p.print(" was ");
60002346:	mov	r1, r9
60002348:	mov	r0, r4
6000234a:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
6000234e:	movs	r3, #0
60002350:	movs	r2, #10
60002352:	ldr	r1, [r6, #4]
60002354:	mov	r0, r4
60002356:	bl	600024b0 <___ZN5Print11printNumberEmhh_veneer>
        p.print(" (0x");
6000235a:	ldr	r1, [pc, #84]	; (600023b0 <CrashReportClass::printTo(Print&) const+0x494>)
6000235c:	mov	r0, r4
6000235e:	bl	600024b8 <___ZN5Print5printEPKc_veneer>
        p.print(bc->value[i], HEX);
60002362:	ldr	r1, [r6, #4]
60002364:	movs	r2, #16
60002366:	mov	r0, r4
60002368:	bl	60002438 <___ZN5Print5printEmi_veneer>
        p.println(")");
6000236c:	ldr	r1, [pc, #68]	; (600023b4 <CrashReportClass::printTo(Print&) const+0x498>)
6000236e:	mov	r0, r4
60002370:	bl	60002470 <___ZN5Print7printlnEPKc_veneer>
    for (int i=0; i < 6; i++) {
60002374:	cmp	r5, #6
60002376:	bne.n	60002322 <CrashReportClass::printTo(Print&) const+0x406>
  clear();
60002378:	bl	60001ea8 <CrashReportClass::clear()>
}
6000237c:	movs	r0, #1
6000237e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
60002382:	nop
60002384:	.word	0x200018d0
60002388:	.word	0x200018f9
6000238c:	.word	0x20001945
60002390:	.word	0x200019ad
60002394:	.word	0x200019c5
60002398:	.word	0x20001a0e
6000239c:	.word	0x20001a58
600023a0:	.word	0x20001a7d
600023a4:	.word	0x20001ac5
600023a8:	.word	0x2027ff00
600023ac:	.word	0x2027ffc0
600023b0:	.word	0x20001d15
600023b4:	.word	0x20001ac3
600023b8:	.word	0x20001d06
600023bc:	.word	0x2000197e

600023c0 <CrashReportClass::operator bool()>:
{
600023c0:	push	{r3, lr}
	if (isvalid(info)) return true;
600023c2:	bl	60001e54 <isvalid(arm_fault_info_struct const*) [clone .constprop.0]>
}
600023c6:	subs	r0, #0
600023c8:	it	ne
600023ca:	movne	r0, #1
600023cc:	pop	{r3, pc}
600023ce:	nop

600023d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600023d0:	ldr	r3, [pc, #60]	; (60002410 <analog_init+0x40>)
600023d2:	ldr	r2, [r3, #108]	; 0x6c
600023d4:	orr.w	r2, r2, #196608	; 0x30000
600023d8:	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600023da:	ldr	r2, [r3, #108]	; 0x6c
600023dc:	orr.w	r2, r2, #768	; 0x300
600023e0:	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600023e2:	sub.w	r3, r3, #229376	; 0x38000
600023e6:	movw	r2, #1591	; 0x637
600023ea:	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600023ec:	movs	r2, #160	; 0xa0
600023ee:	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600023f0:	ldr	r2, [r3, #72]	; 0x48
600023f2:	lsls	r2, r2, #24
600023f4:	bmi.n	600023f0 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600023f6:	ldr	r2, [pc, #28]	; (60002414 <analog_init+0x44>)
600023f8:	movw	r3, #1591	; 0x637
600023fc:	str	r3, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
600023fe:	movs	r3, #160	; 0xa0
60002400:	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002402:	ldr	r3, [r2, #72]	; 0x48
60002404:	ands.w	r3, r3, #128	; 0x80
60002408:	bne.n	60002402 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000240a:	ldr	r2, [pc, #12]	; (60002418 <analog_init+0x48>)
6000240c:	strb	r3, [r2, #0]
}
6000240e:	bx	lr
60002410:	.word	0x400fc000
60002414:	.word	0x400c8000
60002418:	.word	0x200155b4

6000241c <_init>:
6000241c:	push	{r3, r4, r5, r6, r7, lr}
6000241e:	nop
60002420:	pop	{r3, r4, r5, r6, r7}
60002422:	pop	{r3}
60002424:	mov	lr, r3
60002426:	bx	lr

60002428 <___ZN5Print5printEh_veneer>:
60002428:	ldr.w	pc, [pc]	; 6000242c <___ZN5Print5printEh_veneer+0x4>
6000242c:	.word	0x0000c5bd

60002430 <___ZN5Print7printlnEmi_veneer>:
60002430:	ldr.w	pc, [pc]	; 60002434 <___ZN5Print7printlnEmi_veneer+0x4>
60002434:	.word	0x0000c5cd

60002438 <___ZN5Print5printEmi_veneer>:
60002438:	ldr.w	pc, [pc]	; 6000243c <___ZN5Print5printEmi_veneer+0x4>
6000243c:	.word	0x0000c5c5

60002440 <__memset_veneer>:
60002440:	ldr.w	pc, [pc]	; 60002444 <__memset_veneer+0x4>
60002444:	.word	0x0000a211

60002448 <__set_arm_clock_veneer>:
60002448:	ldr.w	pc, [pc]	; 6000244c <__set_arm_clock_veneer+0x4>
6000244c:	.word	0x0000aa55

60002450 <__pwm_init_veneer>:
60002450:	ldr.w	pc, [pc]	; 60002454 <__pwm_init_veneer+0x4>
60002454:	.word	0x0000c039

60002458 <__sm_set_pool_veneer>:
60002458:	ldr.w	pc, [pc]	; 6000245c <__sm_set_pool_veneer+0x4>
6000245c:	.word	0x0000be1f

60002460 <__delay_veneer>:
60002460:	ldr.w	pc, [pc]	; 60002464 <__delay_veneer+0x4>
60002464:	.word	0x0000b79d

60002468 <___ZN5Print10printFloatEdh_veneer>:
60002468:	ldr.w	pc, [pc]	; 6000246c <___ZN5Print10printFloatEdh_veneer+0x4>
6000246c:	.word	0x0000c819

60002470 <___ZN5Print7printlnEPKc_veneer>:
60002470:	ldr.w	pc, [pc]	; 60002474 <___ZN5Print7printlnEPKc_veneer+0x4>
60002474:	.word	0x00000d3d

60002478 <__main_veneer>:
60002478:	ldr.w	pc, [pc]	; 6000247c <__main_veneer+0x4>
6000247c:	.word	0x0000c62b

60002480 <___ZN16CrashReportClass8checksumEPVKvi_veneer>:
60002480:	ldr.w	pc, [pc]	; 60002484 <___ZN16CrashReportClass8checksumEPVKvi_veneer+0x4>
60002484:	.word	0x0000c5e1

60002488 <__usb_init_serialnumber_veneer>:
60002488:	ldr.w	pc, [pc]	; 6000248c <__usb_init_serialnumber_veneer+0x4>
6000248c:	.word	0x0000c371

60002490 <____libc_init_array_veneer>:
60002490:	ldr.w	pc, [pc]	; 60002494 <____libc_init_array_veneer+0x4>
60002494:	.word	0x0000ecc9

60002498 <___ZN7TwoWire8setClockEm_veneer>:
60002498:	ldr.w	pc, [pc]	; 6000249c <___ZN7TwoWire8setClockEm_veneer+0x4>
6000249c:	.word	0x000054c1

600024a0 <___ZN5Print5printEl_veneer>:
600024a0:	ldr.w	pc, [pc]	; 600024a4 <___ZN5Print5printEl_veneer+0x4>
600024a4:	.word	0x0000c70f

600024a8 <___ZN5Print7printlnEv_veneer>:
600024a8:	ldr.w	pc, [pc]	; 600024ac <___ZN5Print7printlnEv_veneer+0x4>
600024ac:	.word	0x0000c721

600024b0 <___ZN5Print11printNumberEmhh_veneer>:
600024b0:	ldr.w	pc, [pc]	; 600024b4 <___ZN5Print11printNumberEmhh_veneer+0x4>
600024b4:	.word	0x0000c773

600024b8 <___ZN5Print5printEPKc_veneer>:
600024b8:	ldr.w	pc, [pc]	; 600024bc <___ZN5Print5printEPKc_veneer+0x4>
600024bc:	.word	0x0000c5b5

600024c0 <__frame_dummy_init_array_entry>:
600024c0:	E.......Q....3..

Disassembly of section .text.progmem:

600024d0 <set_audioClock(int, long, unsigned long)>:
  PROGMEM
  void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv) // sets PLL4
  {
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
            | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024d0:	and.w	r0, r0, #63	; 0x3f
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024d4:	ldr	r3, [pc, #60]	; (60002514 <set_audioClock(int, long, unsigned long)+0x44>)

    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024d6:	bic.w	r2, r2, #3758096384	; 0xe0000000
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024da:	bic.w	r1, r1, #3758096384	; 0xe0000000
            | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
600024de:	orr.w	r0, r0, #1122304	; 0x112000
    CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
600024e2:	str	r0, [r3, #112]	; 0x70
    CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
600024e4:	str.w	r1, [r3, #128]	; 0x80
    CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
600024e8:	str.w	r2, [r3, #144]	; 0x90
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
600024ec:	ldr	r2, [r3, #112]	; 0x70
600024ee:	bic.w	r2, r2, #4096	; 0x1000
600024f2:	str	r2, [r3, #112]	; 0x70
    while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
600024f4:	ldr	r2, [r3, #112]	; 0x70
600024f6:	cmp	r2, #0
600024f8:	bge.n	600024f4 <set_audioClock(int, long, unsigned long)+0x24>
    
    const int div_post_pll = 1; // other values: 2,4
    CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600024fa:	ldr.w	r2, [r3, #368]	; 0x170
600024fe:	bic.w	r2, r2, #8388608	; 0x800000
60002502:	bic.w	r2, r2, #32768	; 0x8000
60002506:	str.w	r2, [r3, #368]	; 0x170
    if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
    if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
    
    CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
6000250a:	ldr	r2, [r3, #112]	; 0x70
6000250c:	bic.w	r2, r2, #65536	; 0x10000
60002510:	str	r2, [r3, #112]	; 0x70
  }
60002512:	bx	lr
60002514:	.word	0x400d8000

60002518 <TwoWire::i2c4_hardware>:
60002518:	...@............
60002528:	...@............
	...
60002540:	...........@....
60002550:	................
60002560:	.....T..

60002568 <TwoWire::i2c3_hardware>:
60002568:	p..@............
60002578:	...@....,.......
60002588:	...@............
60002598:	...@....-.......
600025a8:	...@.........T..

600025b8 <TwoWire::i2c1_hardware>:
600025b8:	p..@............
600025c8:	...@............
	...
600025e0:	...........@....
600025f0:	................
60002600:	.....T..

60002608 <usb_string_mtp>:
60002608:	..M.T.P.

60002610 <usb_string_product_name_default>:
60002610:	 .T.e.e.n.s.y. .
60002620:	M.T.P. .D.i.s.k.

60002630 <usb_string_manufacturer_name_default>:
60002630:	..T.e.e.n.s.y.d.
60002640:	u.i.n.o.

60002648 <string0>:
60002648:	....

6000264c <usb_config_descriptor_12>:
6000264c:	..i.....2.......
6000265c:	...........$....
6000266c:	$....$...$......
6000267c:	................
6000268c:	.@......@.......
6000269c:	........@......@
600026ac:	...... ..

600026b5 <usb_config_descriptor_480>:
600026b5:	..i.....2.......
600026c5:	...........$....
600026d5:	$....$...$......
600026e5:	................
600026f5:	................
60002705:	................
60002715:	...... ..

6000271e <qualifier_descriptor>:
6000271e:	.......@..

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <register_tm_clones>:
}

uint16_t checkDiskSpace(void)
{   if((diskSize>0) && ((diskSpace=sd->freeClusterCount()) > MIN_SPACE)) return 1;
    return 0;
}
      20:	ldr	r0, [pc, #20]	; (38 <_teensy_model_identifier+0x13>)
      22:	ldr	r3, [pc, #24]	; (3c <_teensy_model_identifier+0x17>)
      24:	subs	r3, r3, r0
      26:	lsrs	r1, r3, #31
      28:	add.w	r1, r1, r3, asr #2
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      2c:	asrs	r1, r1, #1
      2e:	beq.n	36 <_teensy_model_identifier+0x11>
    }
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      30:	ldr	r3, [pc, #12]	; (40 <_teensy_model_identifier+0x1b>)
      *ls = lowSurrogate(cp);
      32:	cbz	r3, 36 <_teensy_model_identifier+0x11>
      34:	bx	r3
			return 0;
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
      36:	bx	lr
      38:	.word	0x200026c0
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      3c:	.word	0x200026c0
  }

  void MTPStorage_SD::dumpIndexList(void)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
    { Record p = ReadIndexRecord(ii);
      Serial.printf("%d: %d %d %d %d %d %s\n",ii, p.store, p.isdir,p.parent,p.sibling,p.child,p.name);
      40:	.word	0x00000000

00000044 <frame_dummy>:
      44:	push	{r3, lr}
      46:	ldr	r3, [pc, #20]	; (5c <frame_dummy+0x18>)
  { for(uint32_t ii=0; ii<index_entries_; ii++)
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #20]	; (60 <frame_dummy+0x1c>)
      4c:	ldr	r0, [pc, #20]	; (64 <frame_dummy+0x20>)
      4e:	nop.w
      52:	ldmia.w	sp!, {r3, lr}
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
		buf[j] = buf[i];
      56:	b.w	20 <register_tm_clones>
		buf[i] = t;
      5a:	nop
      5c:	.word	0x00000000
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      60:	.word	0x20014c38
 done:
  name[n] = 0;
  return n;

 fail:
  *name = 0;
      64:	.word	0x60017c00

00000068 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
      68:	movs	r0, #0
      6a:	bx	lr

0000006c <__tcf_0>:
  // needed for MTP
  const char *sd_str[]={"sdio"};          // edit to reflect your configuration
  const int cs[] = {BUILTIN_SDCARD};      // edit to reflect your configuration
  const int nsd = sizeof(sd_str)/sizeof(const char *);

  SdFs sdx[nsd];
      6c:	bx	lr

0000006e <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   * to be written to the storage device.
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
      6e:	ldr	r3, [r0, #72]	; 0x48
      70:	cbz	r3, 78 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
      72:	mov	r0, r3
      74:	b.w	74f0 <FatFile::sync()>
      78:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
      7a:	cbz	r0, 80 <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
      7c:	b.w	6850 <ExFatFile::sync()>
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    BaseFile::sync();
  }
      80:	bx	lr

00000082 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
      82:	ldr	r3, [r0, #72]	; 0x48
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
      84:	push	{r0, r1, r2, lr}
      86:	cbz	r3, 9e <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
      88:	movs	r2, #1
      8a:	add.w	r1, sp, #7
      8e:	mov	r0, r3
      90:	bl	70bc <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
      94:	cmp	r0, #1
      96:	bne.n	a2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x20>
      98:	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
      9c:	b.n	a6 <StreamFile<FsBaseFile, unsigned long long>::read()+0x24>
      9e:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
      a0:	cbnz	r0, ac <StreamFile<FsBaseFile, unsigned long long>::read()+0x2a>
    return read(&b, 1) == 1 ? b : -1;
      a2:	mov.w	r0, #4294967295
  }
      a6:	add	sp, #12
      a8:	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
      ac:	movs	r2, #1
      ae:	add.w	r1, sp, #7
      b2:	bl	5a6c <ExFatFile::read(void*, unsigned int)>
      b6:	b.n	94 <StreamFile<FsBaseFile, unsigned long long>::read()+0x12>

000000b8 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
      b8:	ldr	r3, [r0, #72]	; 0x48
      ba:	cbz	r3, c2 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
      bc:	mov	r0, r3
      be:	b.w	7242 <FatFile::peek()>
      c2:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
      c4:	cbz	r0, ca <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
      c6:	b.w	5bf2 <ExFatFile::peek()>
  }
      ca:	mov.w	r0, #4294967295
      ce:	bx	lr

000000d0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
      d0:	ldr	r3, [r0, #72]	; 0x48
  int available() {
      d2:	push	{r4, lr}
      d4:	cbz	r3, ee <StreamFile<FsBaseFile, unsigned long long>::available()+0x1e>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
      d6:	ldrb	r0, [r3, #0]
      d8:	ands.w	r0, r0, #8
      dc:	ittt	ne
      de:	ldrne	r0, [r3, #28]
      e0:	ldrne	r3, [r3, #20]
      e2:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
      e4:	cmp	r0, #0
      e6:	it	lt
      e8:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
      ec:	pop	{r4, pc}
      ee:	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
      f0:	cmp	r0, #0
      f2:	beq.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
      f4:	ldrb.w	r3, [r0, #49]	; 0x31
      f8:	ands.w	r3, r3, #8
      fc:	beq.n	11c <StreamFile<FsBaseFile, unsigned long long>::available()+0x4c>
      fe:	ldrd	r1, r3, [r0, #16]
     102:	ldrd	r2, r4, [r0]
     106:	subs	r0, r1, r2
     108:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     10c:	cmp.w	r0, #2147483648	; 0x80000000
     110:	sbcs.w	r3, r3, #0
     114:	it	cs
     116:	mvncs.w	r0, #2147483648	; 0x80000000
     11a:	b.n	ec <StreamFile<FsBaseFile, unsigned long long>::available()+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     11c:	mov	r0, r3
     11e:	b.n	10c <StreamFile<FsBaseFile, unsigned long long>::available()+0x3c>

00000120 <usb_serial_class::operator bool() [clone .isra.0]>:
	// Returns the current state of the virtual serial RTS signal.
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
     120:	push	{r3, lr}
		yield();
     122:	bl	c418 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     126:	ldr	r3, [pc, #40]	; (150 <usb_serial_class::operator bool() [clone .isra.0]+0x30>)
     128:	ldrb	r3, [r3, #0]
     12a:	and.w	r0, r3, #255	; 0xff
     12e:	cbz	r3, 14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
     130:	ldr	r3, [pc, #32]	; (154 <usb_serial_class::operator bool() [clone .isra.0]+0x34>)
     132:	ldrb	r0, [r3, #0]
     134:	ands.w	r0, r0, #1
     138:	beq.n	14c <usb_serial_class::operator bool() [clone .isra.0]+0x2c>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13a:	ldr	r3, [pc, #28]	; (158 <usb_serial_class::operator bool() [clone .isra.0]+0x38>)
     13c:	ldr	r0, [r3, #0]
     13e:	ldr	r3, [pc, #28]	; (15c <usb_serial_class::operator bool() [clone .isra.0]+0x3c>)
     140:	ldr	r3, [r3, #0]
     142:	subs	r0, r0, r3
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     144:	cmp	r0, #14
     146:	ite	ls
     148:	movls	r0, #0
     14a:	movhi	r0, #1
	}
     14c:	pop	{r3, pc}
     14e:	nop
     150:	.word	0x200155df
     154:	.word	0x200155de
     158:	.word	0x20015374
     15c:	.word	0x20015388

00000160 <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     160:	movs	r3, #0
     162:	movs	r2, #10
     164:	b.w	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00000168 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     168:	push	{r0, r1, r4, lr}
     16a:	mov	r4, r0
     16c:	cbz	r1, 188 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     16e:	mov	r0, r1
     170:	str	r1, [sp, #4]
     172:	bl	edd0 <strlen>
     176:	ldr	r3, [r4, #0]
     178:	mov	r2, r0
     17a:	ldr	r1, [sp, #4]
     17c:	ldr	r3, [r3, #4]
     17e:	mov	r0, r4
     180:	add	sp, #8
     182:	ldmia.w	sp!, {r4, lr}
     186:	bx	r3
     188:	add	sp, #8
     18a:	pop	{r4, pc}

0000018c <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
     18c:	b.w	168 <Print::write(char const*) [clone .isra.0]>

00000190 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
     190:	push	{r4, lr}
     192:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
     194:	bl	168 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
     198:	mov	r0, r4
     19a:	ldmia.w	sp!, {r4, lr}
     19e:	b.w	c720 <Print::println()>
	...

000001a4 <MTPStorage_SD::~MTPStorage_SD()>:

  void mtp_yield(void);


// Storage implementation for SD. SD needs to be already initialized.
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     1a4:	push	{r3, r4, r5, lr}
     1a6:	ldr	r3, [pc, #48]	; (1d8 <MTPStorage_SD::~MTPStorage_SD()+0x34>)
     1a8:	mov	r4, r0
class StreamFile : public stream_t, public BaseFile {
     1aa:	ldr	r5, [pc, #48]	; (1dc <MTPStorage_SD::~MTPStorage_SD()+0x38>)
     1ac:	str	r3, [r0, #0]
  ~FsBaseFile() {close();}
     1ae:	add.w	r0, r0, #344	; 0x158
     1b2:	str.w	r5, [r0, #-16]
     1b6:	bl	8750 <FsBaseFile::close()>
     1ba:	add.w	r0, r4, #264	; 0x108
     1be:	str.w	r5, [r4, #248]	; 0xf8
     1c2:	bl	8750 <FsBaseFile::close()>
     1c6:	add.w	r0, r4, #184	; 0xb8
     1ca:	str.w	r5, [r4, #168]	; 0xa8
     1ce:	bl	8750 <FsBaseFile::close()>
     1d2:	mov	r0, r4
     1d4:	pop	{r3, r4, r5, pc}
     1d6:	nop
     1d8:	.word	0x20000450
     1dc:	.word	0x2000042c

000001e0 <FsBaseFile::write(void const*, unsigned int)>:
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     1e0:	ldr	r3, [r0, #56]	; 0x38
     1e2:	cbz	r3, 1ea <FsBaseFile::write(void const*, unsigned int)+0xa>
     1e4:	mov	r0, r3
     1e6:	b.w	79d0 <FatFile::write(void const*, unsigned int)>
     1ea:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->write(buf, count) : 0;
     1ec:	cbz	r0, 1f2 <FsBaseFile::write(void const*, unsigned int)+0x12>
     1ee:	b.w	6ba8 <ExFatFile::write(void const*, unsigned int)>
  }
     1f2:	bx	lr

000001f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     1f4:	push	{r3, lr}
    return BaseFile::write(buffer, size);
     1f6:	adds	r0, #16
     1f8:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     1fc:	pop	{r3, pc}

000001fe <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  size_t write(uint8_t b) {
     1fe:	push	{r0, r1, r2, lr}
  size_t write(uint8_t b) {return write(&b, 1);}
     200:	movs	r2, #1
     202:	strb.w	r1, [sp, #7]
     206:	add.w	r1, sp, #7
     20a:	adds	r0, #16
     20c:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     210:	add	sp, #12
     212:	ldr.w	pc, [sp], #4
	...

00000218 <resetUSB()>:
    USB1_USBCMD = 0;  // disconnect USB
     218:	ldr	r3, [pc, #36]	; (240 <resetUSB()+0x28>)
     21a:	movs	r2, #0
    delay(100);       // long enough for PC+hubs to detect
     21c:	movs	r0, #100	; 0x64
  {
     21e:	push	{r4, lr}
    while(!Serial) mtpd.loop();
     220:	ldr	r4, [pc, #32]	; (244 <resetUSB()+0x2c>)
    USB1_USBCMD = 0;  // disconnect USB
     222:	str.w	r2, [r3, #320]	; 0x140
    delay(100);       // long enough for PC+hubs to detect
     226:	bl	b79c <delay>
    usb_init();
     22a:	bl	120e8 <__usb_init_veneer>
    while(!Serial) mtpd.loop();
     22e:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     232:	cbz	r0, 236 <resetUSB()+0x1e>
  }
     234:	pop	{r4, pc}
    while(!Serial) mtpd.loop();
     236:	mov	r0, r4
     238:	bl	4998 <MTPD::loop()>
     23c:	b.n	22e <resetUSB()+0x16>
     23e:	nop
     240:	.word	0x402e0000
     244:	.word	0x20002700

00000248 <reboot()>:
  void reboot(void) { *(uint32_t *)0xE000ED0C =  0x5FA0004;}
     248:	mov.w	r3, #3758153728	; 0xe000e000
     24c:	ldr	r2, [pc, #4]	; (254 <reboot()+0xc>)
     24e:	str.w	r2, [r3, #3340]	; 0xd0c
     252:	bx	lr
     254:	.word	0x05fa0004

00000258 <lowPowerInit()>:
    CCM_CGPR |= CCM_CGPR_INT_MEM_CLK_LPM;
     258:	ldr	r3, [pc, #28]	; (278 <lowPowerInit()+0x20>)
     25a:	ldr	r2, [r3, #100]	; 0x64
     25c:	orr.w	r2, r2, #131072	; 0x20000
     260:	str	r2, [r3, #100]	; 0x64
    CCM_CLPCR &= ~(CCM_CLPCR_ARM_CLK_DIS_ON_LPM | CCM_CLPCR_LPM(3));
     262:	ldr	r2, [r3, #84]	; 0x54
     264:	bic.w	r2, r2, #35	; 0x23
     268:	str	r2, [r3, #84]	; 0x54
    CCM_CLPCR |= CCM_CLPCR_LPM(1);
     26a:	ldr	r2, [r3, #84]	; 0x54
     26c:	orr.w	r2, r2, #1
     270:	str	r2, [r3, #84]	; 0x54
    asm volatile("dsb");    
     272:	dsb	sy
  }
     276:	bx	lr
     278:	.word	0x400fc000

0000027c <loop>:
{
     27c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  loopCount++;
     280:	ldr	r6, [pc, #432]	; (434 <loop+0x1b8>)
{
     282:	sub	sp, #44	; 0x2c
  if(nb>mxb) mxb=nb;
     284:	ldr	r5, [pc, #432]	; (438 <loop+0x1bc>)
  loopCount++;
     286:	ldr	r3, [r6, #0]
     288:	ldr	r4, [pc, #432]	; (43c <loop+0x1c0>)
     28a:	adds	r3, #1
     28c:	str	r3, [r6, #0]
  nb = getDataCount();
     28e:	bl	283c <getDataCount()>
  if(nb>mxb) mxb=nb;
     292:	ldrh	r3, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     294:	ldr	r2, [pc, #424]	; (440 <loop+0x1c4>)
  if(nb>mxb) mxb=nb;
     296:	cmp	r3, r0
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     298:	ldr	r3, [r2, #0]
  if(nb>mxb) mxb=nb;
     29a:	it	cc
     29c:	strhcc	r0, [r5, #0]
  static volatile int16_t status=(termon==1)? STOPPED: CLOSED;
     29e:	tst.w	r3, #1
     2a2:	bne.n	2b8 <loop+0x3c>
     2a4:	ldr	r3, [pc, #412]	; (444 <loop+0x1c8>)
     2a6:	ldr	r3, [r3, #0]
     2a8:	cmp	r3, #1
     2aa:	mov.w	r3, #4294967295
     2ae:	it	ne
     2b0:	movne	r3, #0
     2b2:	strh	r3, [r4, #0]
     2b4:	movs	r3, #1
     2b6:	str	r3, [r2, #0]
  status=menu(status);
     2b8:	ldrh	r0, [r4, #0]
     2ba:	sxth	r0, r0
     2bc:	bl	2754 <menu(short)>
     2c0:	strh	r0, [r4, #0]
    if(status<0)
     2c2:	ldrh	r3, [r4, #0]
     2c4:	lsls	r3, r3, #16
     2c6:	bpl.n	2ce <loop+0x52>
    { mtpd.loop();
     2c8:	ldr	r0, [pc, #380]	; (448 <loop+0x1cc>)
     2ca:	bl	4998 <MTPD::loop()>
      if(status>0) digitalWriteFast(13,HIGH);    
     2ce:	ldrh	r3, [r4, #0]
     2d0:	sxth	r3, r3
     2d2:	cmp	r3, #0
     2d4:	ble.n	2de <loop+0x62>
			} else if (pin == 11) {
				CORE_PIN11_PORTSET = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTSET = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTSET = CORE_PIN13_BITMASK;
     2d6:	ldr	r3, [pc, #372]	; (44c <loop+0x1d0>)
     2d8:	movs	r2, #8
     2da:	str.w	r2, [r3, #132]	; 0x84
      status=saveData(status);  
     2de:	ldrh	r0, [r4, #0]
     2e0:	sxth	r0, r0
     2e2:	bl	32a8 <saveData(short)>
     2e6:	strh	r0, [r4, #0]
      if(status>0) digitalWriteFast(13,LOW);
     2e8:	ldrh	r3, [r4, #0]
     2ea:	sxth	r3, r3
     2ec:	cmp	r3, #0
     2ee:	ble.n	2f8 <loop+0x7c>
			} else if (pin == 11) {
				CORE_PIN11_PORTCLEAR = CORE_PIN11_BITMASK;
			} else if (pin == 12) {
				CORE_PIN12_PORTCLEAR = CORE_PIN12_BITMASK;
			} else if (pin == 13) {
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
     2f0:	ldr	r3, [pc, #344]	; (44c <loop+0x1d0>)
     2f2:	movs	r2, #8
     2f4:	str.w	r2, [r3, #136]	; 0x88
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
     2f8:	ldr	r3, [pc, #340]	; (450 <loop+0x1d4>)
  if((t1=millis())>(t0+1000))
     2fa:	ldr	r7, [pc, #344]	; (454 <loop+0x1d8>)
     2fc:	ldr	r3, [r3, #0]
     2fe:	str	r3, [sp, #28]
     300:	ldr	r3, [r7, #0]
     302:	ldr	r2, [sp, #28]
     304:	add.w	r3, r3, #1000	; 0x3e8
     308:	cmp	r3, r2
     30a:	bcs.n	3f0 <loop+0x174>
    if(monitor)
     30c:	ldr	r3, [pc, #328]	; (458 <loop+0x1dc>)
     30e:	ldr.w	sl, [pc, #388]	; 494 <loop+0x218>
     312:	ldrsh.w	r3, [r3]
     316:	ldr.w	r9, [pc, #384]	; 498 <loop+0x21c>
     31a:	ldr.w	r8, [pc, #384]	; 49c <loop+0x220>
     31e:	cmp	r3, #0
     320:	beq.n	3da <loop+0x15e>
      rtc_get_datetime(&t);
     322:	add	r0, sp, #32
     324:	bl	3c66 <rtc_get_datetime(datetime_t*)>
      Serial.printf("\n%4d-%02d-%02d %02d:%02d:%02d %d",
     328:	ldrsb.w	r3, [sp, #36]	; 0x24
     32c:	ldrsh.w	r2, [sp, #32]
     330:	str	r3, [sp, #16]
     332:	ldrsb.w	r3, [sp, #39]	; 0x27
     336:	ldr	r1, [pc, #292]	; (45c <loop+0x1e0>)
     338:	str	r3, [sp, #12]
     33a:	ldrsb.w	r3, [sp, #38]	; 0x26
     33e:	ldr	r0, [pc, #288]	; (460 <loop+0x1e4>)
     340:	str	r3, [sp, #8]
     342:	ldrsb.w	r3, [sp, #37]	; 0x25
     346:	str	r3, [sp, #4]
     348:	ldrsb.w	r3, [sp, #35]	; 0x23
     34c:	str	r3, [sp, #0]
     34e:	ldrsb.w	r3, [sp, #34]	; 0x22
     352:	bl	c758 <Print::printf(char const*, ...)>
                    t.year,t.month,t.day,t.hour,t.min,t.sec,t.dotw); Serial.print(" : ");
     356:	ldr	r1, [pc, #268]	; (464 <loop+0x1e8>)
     358:	ldr	r0, [pc, #260]	; (460 <loop+0x1e4>)
     35a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(loopCount);  Serial.print(" ");
     35e:	ldr	r1, [r6, #0]
     360:	ldr	r0, [pc, #252]	; (460 <loop+0x1e4>)
     362:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     366:	ldr	r1, [pc, #256]	; (468 <loop+0x1ec>)
     368:	ldr	r0, [pc, #244]	; (460 <loop+0x1e4>)
     36a:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procCount);  Serial.print(" ");
     36e:	ldr.w	r1, [sl]
     372:	ldr	r0, [pc, #236]	; (460 <loop+0x1e4>)
     374:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     378:	ldr	r1, [pc, #236]	; (468 <loop+0x1ec>)
     37a:	ldr	r0, [pc, #228]	; (460 <loop+0x1e4>)
     37c:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(procMiss);   Serial.print(" ");
     380:	ldr.w	r1, [r9]
     384:	ldr	r0, [pc, #216]	; (460 <loop+0x1e4>)
     386:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     38a:	ldr	r1, [pc, #220]	; (468 <loop+0x1ec>)
     38c:	ldr	r0, [pc, #208]	; (460 <loop+0x1e4>)
     38e:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.printf("%3d",mxb); Serial.print("  ");
     392:	ldrh	r2, [r5, #0]
     394:	ldr	r1, [pc, #212]	; (46c <loop+0x1f0>)
     396:	ldr	r0, [pc, #200]	; (460 <loop+0x1e4>)
     398:	bl	c758 <Print::printf(char const*, ...)>
     39c:	ldr	r1, [pc, #208]	; (470 <loop+0x1f4>)
     39e:	ldr	r0, [pc, #192]	; (460 <loop+0x1e4>)
     3a0:	bl	18c <Print::print(char const*) [clone .isra.0]>
      Serial.print(disk_count); Serial.print("  ; ");
     3a4:	ldr.w	r1, [r8]
     3a8:	ldr	r0, [pc, #180]	; (460 <loop+0x1e4>)
     3aa:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     3ae:	ldr	r1, [pc, #196]	; (474 <loop+0x1f8>)
     3b0:	ldr	r0, [pc, #172]	; (460 <loop+0x1e4>)
     3b2:	bl	18c <Print::print(char const*) [clone .isra.0]>
      if(proc==0)
     3b6:	ldr	r3, [pc, #192]	; (478 <loop+0x1fc>)
     3b8:	ldrh	r4, [r3, #0]
     3ba:	sxth	r4, r4
     3bc:	cbnz	r4, 3f8 <loop+0x17c>
        for(int ii=0; ii<8;ii++){ Serial.printf("%9d ",logBuffer[ii]);}        
     3be:	ldr	r3, [pc, #188]	; (47c <loop+0x200>)
     3c0:	ldr	r1, [pc, #188]	; (480 <loop+0x204>)
     3c2:	ldr.w	fp, [pc, #156]	; 460 <loop+0x1e4>
     3c6:	ldr.w	r2, [r3, r4, lsl #2]
     3ca:	adds	r4, #1
     3cc:	mov	r0, fp
     3ce:	bl	c758 <Print::printf(char const*, ...)>
     3d2:	cmp	r4, #8
     3d4:	ldr	r1, [pc, #168]	; (480 <loop+0x204>)
     3d6:	ldr	r3, [pc, #164]	; (47c <loop+0x200>)
     3d8:	bne.n	3c6 <loop+0x14a>
    loopCount=0;
     3da:	movs	r3, #0
     3dc:	str	r3, [r6, #0]
    procCount=0;
     3de:	str.w	r3, [sl]
    procMiss=0;
     3e2:	str.w	r3, [r9]
    mxb=0;
     3e6:	strh	r3, [r5, #0]
    disk_count=0;
     3e8:	str.w	r3, [r8]
    t0=t1;
     3ec:	ldr	r3, [sp, #28]
     3ee:	str	r3, [r7, #0]
  asm("wfi");
     3f0:	wfi
}
     3f2:	add	sp, #44	; 0x2c
     3f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     3f8:	ldr.w	fp, [pc, #148]	; 490 <loop+0x214>
        for(int ii=0; ii<MB;ii++){ Serial.printf("%2d ",proc_stat[ii]);}
     3fc:	movs	r4, #0
     3fe:	ldr	r1, [pc, #132]	; (484 <loop+0x208>)
     400:	ldr	r3, [pc, #92]	; (460 <loop+0x1e4>)
     402:	adds	r4, #1
     404:	mov	r0, r3
     406:	ldr.w	r2, [fp], #4
     40a:	bl	c758 <Print::printf(char const*, ...)>
     40e:	cmp	r4, #24
     410:	ldr	r3, [pc, #76]	; (460 <loop+0x1e4>)
     412:	ldr	r1, [pc, #112]	; (484 <loop+0x208>)
     414:	bne.n	402 <loop+0x186>
        Serial.printf("%2d",max_stat);
     416:	ldr	r4, [pc, #112]	; (488 <loop+0x20c>)
     418:	mov	r0, r3
     41a:	ldr	r1, [pc, #112]	; (48c <loop+0x210>)
     41c:	ldr	r2, [r4, #0]
     41e:	bl	c758 <Print::printf(char const*, ...)>
        for(int ii=0; ii<MB;ii++){ proc_stat[ii]=0;}
     422:	movs	r2, #96	; 0x60
     424:	movs	r1, #0
     426:	ldr	r0, [pc, #104]	; (490 <loop+0x214>)
     428:	bl	a210 <memset>
        max_stat=0;        
     42c:	movs	r3, #0
     42e:	str	r3, [r4, #0]
     430:	b.n	3da <loop+0x15e>
     432:	nop
     434:	.word	0x20014844
     438:	.word	0x200153b4
     43c:	.word	0x200153b6
     440:	.word	0x20007dcc
     444:	.word	0x2001537c
     448:	.word	0x20002700
     44c:	.word	0x42004000
     450:	.word	0x20015374
     454:	.word	0x20014840
     458:	.word	0x200153c2
     45c:	.word	0x20001432
     460:	.word	0x20001d30
     464:	.word	0x20001453
     468:	.word	0x2000145c
     46c:	.word	0x20001457
     470:	.word	0x2000145b
     474:	.word	0x2000145e
     478:	.word	0x200153c4
     47c:	.word	0x20014c0c
     480:	.word	0x20001463
     484:	.word	0x20001468
     488:	.word	0x20014c2c
     48c:	.word	0x2000146d
     490:	.word	0x20014c58
     494:	.word	0x20014c50
     498:	.word	0x20014c54
     49c:	.word	0x20014b98

000004a0 <setup1()>:
{ 
     4a0:	push	{r4, lr}
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4a2:	ldr	r4, [pc, #44]	; (4d0 <setup1()+0x30>)
  Serial.println("Setup1");
     4a4:	ldr	r1, [pc, #44]	; (4d4 <setup1()+0x34>)
     4a6:	ldr	r0, [pc, #48]	; (4d8 <setup1()+0x38>)
     4a8:	bl	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4ac:	ldr	r3, [r4, #0]
     4ae:	cbz	r3, 4c8 <setup1()+0x28>
  i2s_setup();
     4b0:	bl	b00 <i2s_setup()>
  dma_setup();
     4b4:	bl	b84 <dma_setup()>
  adc_init();
     4b8:	bl	3788 <adc_init()>
  Serial.println("Setup1 done");
     4bc:	ldr	r1, [pc, #28]	; (4dc <setup1()+0x3c>)
     4be:	ldr	r0, [pc, #24]	; (4d8 <setup1()+0x38>)
}
     4c0:	ldmia.w	sp!, {r4, lr}
  Serial.println("Setup1 done");
     4c4:	b.w	190 <Print::println(char const*) [clone .isra.0]>
  while(!setup_ready) {delay(1);} // wait for setup() to finish
     4c8:	movs	r0, #1
     4ca:	bl	b79c <delay>
     4ce:	b.n	4ac <setup1()+0xc>
     4d0:	.word	0x200151b4
     4d4:	.word	0x2000101f
     4d8:	.word	0x20001d30
     4dc:	.word	0x20001026

000004e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>:
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return the free cluster count. */
  uint32_t freeClusterCount() {
     4e0:	push	{r4, r5, r6, lr}
     4e2:	mov	r5, r0
     4e4:	ldr.w	r0, [r0, #1164]	; 0x48c
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     4e8:	cbnz	r0, 50e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
     4ea:	movs	r6, #0
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
  }
  /** \return the free cluster count. */
  uint32_t freeClusterCount() const {
    return m_fVol ? m_fVol->freeClusterCount() :
     4ec:	ldr.w	r0, [r5, #1152]	; 0x480
     4f0:	cbz	r0, 544 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x64>
     4f2:	bl	7e34 <FatPartition::freeClusterCount()>
           m_xVol ? m_xVol->freeClusterCount() : 0;
     4f6:	mov	r4, r0
    if (switchSpi && !setDedicatedSpi(false)) {
     4f8:	cbz	r6, 50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
     4fa:	ldr.w	r0, [r5, #1164]	; 0x48c
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
     4fe:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
      return m_card->setDedicatedSpi(value);
     500:	ldr	r3, [r0, #0]
     502:	movs	r1, #0
     504:	ldr	r3, [r3, #68]	; 0x44
     506:	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
     508:	cbz	r0, 524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
  }
     50a:	mov	r0, r4
     50c:	pop	{r4, r5, r6, pc}
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
     50e:	ldr	r3, [r0, #0]
     510:	ldr	r3, [r3, #60]	; 0x3c
     512:	blx	r3
     514:	cmp	r0, #0
     516:	beq.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     518:	ldr.w	r0, [r5, #1164]	; 0x48c
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     51c:	cbnz	r0, 528 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x48>
     51e:	ldr.w	r0, [r5, #1164]	; 0x48c
    if (m_card) {
     522:	cbnz	r0, 534 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x54>
      return 0;
     524:	movs	r4, #0
     526:	b.n	50a <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x2a>
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
     528:	ldr	r3, [r0, #0]
     52a:	ldr	r3, [r3, #64]	; 0x40
     52c:	blx	r3
     52e:	cmp	r0, #0
     530:	bne.n	4ea <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xa>
     532:	b.n	51e <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x3e>
      return m_card->setDedicatedSpi(value);
     534:	ldr	r3, [r0, #0]
     536:	movs	r1, #1
     538:	ldr	r3, [r3, #68]	; 0x44
     53a:	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
     53c:	mov	r6, r0
     53e:	cmp	r0, #0
     540:	bne.n	4ec <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0xc>
     542:	b.n	524 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x44>
     544:	ldr.w	r0, [r5, #1156]	; 0x484
     548:	cmp	r0, #0
     54a:	beq.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
     54c:	bl	6402 <ExFatPartition::freeClusterCount()>
     550:	b.n	4f6 <SdBase<FsVolume, FsFormatter>::freeClusterCount()+0x16>
	...

00000554 <storage_configure()>:

  #define SD_CONFIG SdioConfig(FIFO_SDIO)

  void storage_configure()
  {
     554:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    spiConfigBackupPin = 255;
     558:	ldr	r4, [pc, #276]	; (670 <storage_configure()+0x11c>)
     55a:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
     55c:	movs	r1, #0
     55e:	ldr	r6, [pc, #276]	; (674 <storage_configure()+0x120>)
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
     560:	add.w	r5, r4, #1168	; 0x490
    spiConfigBackupPin = 255;
     564:	strb.w	r3, [r4, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
     568:	strb.w	r1, [r4, #1224]	; 0x4c8
     56c:	mov	r0, r5
     56e:	bl	9b6c <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
     572:	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
     574:	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
     578:	bl	9268 <SdioCard::errorCode() const>
     57c:	cmp	r0, #0
     57e:	bne.n	622 <storage_configure()+0xce>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
     580:	movs	r3, #1
     582:	ldr.w	r1, [r4, #1164]	; 0x48c
     586:	mov	r0, r4
     588:	mov	r2, r3
     58a:	bl	88b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
     58e:	cmp	r0, #0
     590:	beq.n	622 <storage_configure()+0xce>
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     592:	ldr	r3, [pc, #228]	; (678 <storage_configure()+0x124>)
     594:	ldr	r2, [r3, #4]
     596:	cmp	r2, #19
     598:	ble.n	63e <storage_configure()+0xea>
    return m_fVol ? m_fVol->clusterCount() :
     59a:	ldr.w	r3, [r4, #1152]	; 0x480
     59e:	cmp	r3, #0
     5a0:	beq.n	652 <storage_configure()+0xfe>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
     5a2:	ldr	r5, [r3, #28]
     5a4:	subs	r5, #1
        }
        else
        {
          storage.addFilesystem(sdx[ii], sd_str[ii]);
          uint64_t totalSize = sdx[ii].clusterCount();
          uint64_t freeSize  = sdx[ii].freeClusterCount();
     5a6:	ldr	r0, [pc, #200]	; (670 <storage_configure()+0x11c>)
     5a8:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    return m_fVol ? m_fVol->bytesPerCluster() :
     5ac:	ldr.w	r3, [r4, #1152]	; 0x480
     5b0:	mov	r7, r0
     5b2:	cmp	r3, #0
     5b4:	beq.n	660 <storage_configure()+0x10c>
    return m_bytesPerSector << m_sectorsPerClusterShift;
     5b6:	ldrb	r3, [r3, #6]
     5b8:	mov.w	r4, #512	; 0x200
     5bc:	lsls	r4, r3
     5be:	uxth	r4, r4
          uint32_t clusterSize = sdx[ii].bytesPerCluster();
          Serial.printf("SDIO Storage %d %d %s ",ii,cs[ii],sd_str[ii]); 
     5c0:	ldr	r3, [r6, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
     5c2:	mov.w	r8, #10
     5c6:	movs	r6, #0
     5c8:	movs	r2, #0
     5ca:	str	r3, [sp, #0]
     5cc:	movs	r3, #254	; 0xfe
     5ce:	ldr	r1, [pc, #172]	; (67c <storage_configure()+0x128>)
     5d0:	ldr	r0, [pc, #172]	; (680 <storage_configure()+0x12c>)
     5d2:	bl	c758 <Print::printf(char const*, ...)>
            Serial.print("; total clusters: "); Serial.print(totalSize); 
     5d6:	ldr	r1, [pc, #172]	; (684 <storage_configure()+0x130>)
     5d8:	ldr	r0, [pc, #164]	; (680 <storage_configure()+0x12c>)
     5da:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5de:	mov	r2, r5
     5e0:	mov	r3, r6
     5e2:	ldr	r0, [pc, #156]	; (680 <storage_configure()+0x12c>)
     5e4:	strd	r8, r6, [sp]
     5e8:	bl	c786 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" free clusters: "); Serial.print(freeSize);
     5ec:	ldr	r1, [pc, #152]	; (688 <storage_configure()+0x134>)
     5ee:	ldr	r0, [pc, #144]	; (680 <storage_configure()+0x12c>)
     5f0:	bl	18c <Print::print(char const*) [clone .isra.0]>
     5f4:	mov	r2, r7
     5f6:	mov	r3, r6
     5f8:	ldr	r0, [pc, #132]	; (680 <storage_configure()+0x12c>)
     5fa:	strd	r8, r6, [sp]
     5fe:	bl	c786 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     602:	ldr	r1, [pc, #136]	; (68c <storage_configure()+0x138>)
     604:	ldr	r0, [pc, #120]	; (680 <storage_configure()+0x12c>)
     606:	bl	18c <Print::print(char const*) [clone .isra.0]>
     60a:	lsr.w	r1, r4, r8
     60e:	ldr	r0, [pc, #112]	; (680 <storage_configure()+0x12c>)
     610:	bl	160 <Print::print(unsigned long) [clone .isra.0]>
     614:	ldr	r1, [pc, #120]	; (690 <storage_configure()+0x13c>)
     616:	ldr	r0, [pc, #104]	; (680 <storage_configure()+0x12c>)
        }
      }
  }
     618:	add	sp, #8
     61a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            Serial.print(" clustersize: "); Serial.print(clusterSize/1024); Serial.println(" kByte");
     61e:	b.w	190 <Print::println(char const*) [clone .isra.0]>
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     622:	ldr	r3, [r6, #0]
     624:	movs	r2, #0
     626:	ldr	r1, [pc, #108]	; (694 <storage_configure()+0x140>)
     628:	str	r3, [sp, #0]
     62a:	movs	r3, #254	; 0xfe
     62c:	ldr	r0, [pc, #80]	; (680 <storage_configure()+0x12c>)
     62e:	bl	c758 <Print::printf(char const*, ...)>
     632:	ldr	r0, [pc, #76]	; (680 <storage_configure()+0x12c>)
  }
     634:	add	sp, #8
     636:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        { Serial.printf("SD/SDIO Storage %d %d %s failed or missing",ii,cs[ii],sd_str[ii]);  Serial.println();
     63a:	b.w	c720 <Print::println()>
          sd_name[fsCount] = name;
     63e:	add.w	r1, r3, r2, lsl #2
     642:	ldr	r0, [r6, #0]
     644:	str	r0, [r1, #8]
          sdx[fsCount++] = &fs;
     646:	adds	r1, r2, #1
     648:	str	r1, [r3, #4]
     64a:	add.w	r3, r3, r2, lsl #2
     64e:	str	r4, [r3, #88]	; 0x58
     650:	b.n	59a <storage_configure()+0x46>
     652:	ldr.w	r5, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     656:	cmp	r5, #0
     658:	beq.n	5a6 <storage_configure()+0x52>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
     65a:	ldr.w	r5, [r5, #1072]	; 0x430
     65e:	b.n	5a6 <storage_configure()+0x52>
     660:	ldr.w	r4, [r4, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     664:	cmp	r4, #0
     666:	beq.n	5c0 <storage_configure()+0x6c>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
     668:	ldr.w	r4, [r4, #1084]	; 0x43c
     66c:	b.n	5c0 <storage_configure()+0x6c>
     66e:	nop
     670:	.word	0x20014ce4
     674:	.word	0x200022e0
     678:	.word	0x200151b8
     67c:	.word	0x20000dec
     680:	.word	0x20001d30
     684:	.word	0x20000e03
     688:	.word	0x20000e16
     68c:	.word	0x20000e27
     690:	.word	0x20000e36
     694:	.word	0x20000dc1

00000698 <_GLOBAL__sub_I_storage>:
  }
     698:	push	{r3, r4, r5, lr}
        fsCount = 0;
     69a:	ldr	r5, [pc, #192]	; (75c <_GLOBAL__sub_I_storage+0xc4>)
     69c:	movs	r4, #0
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     69e:	ldr	r3, [pc, #192]	; (760 <_GLOBAL__sub_I_storage+0xc8>)
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     6a0:	mov.w	r2, #1000	; 0x3e8
  MTPStorage_SD storage;
     6a4:	ldr	r1, [pc, #188]	; (764 <_GLOBAL__sub_I_storage+0xcc>)
     6a6:	mov	r0, r5
     6a8:	str	r3, [r5, #0]
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     6aa:	ldr	r3, [pc, #188]	; (768 <_GLOBAL__sub_I_storage+0xd0>)
     6ac:	str.w	r2, [r5, #176]	; 0xb0
     6b0:	str.w	r3, [r5, #168]	; 0xa8
     6b4:	str.w	r3, [r5, #248]	; 0xf8
     6b8:	str.w	r3, [r5, #328]	; 0x148
     6bc:	mvn.w	r3, #1
        fsCount = 0;
     6c0:	str	r4, [r5, #4]
	constexpr Print() : write_error(0) {}
     6c2:	str.w	r4, [r5, #172]	; 0xac
     6c6:	strb.w	r4, [r5, #180]	; 0xb4
     6ca:	strb.w	r4, [r5, #260]	; 0x104
     6ce:	strb.w	r4, [r5, #340]	; 0x154
class MTPStorage_SD : public MTPStorageInterface, mSD_Base
     6d2:	str.w	r4, [r5, #416]	; 0x1a0
     6d6:	strh.w	r4, [r5, #428]	; 0x1ac
     6da:	strd	r4, r2, [r5, #252]	; 0xfc
     6de:	strd	r4, r2, [r5, #332]	; 0x14c
     6e2:	ldr	r2, [pc, #136]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     6e4:	strd	r3, r4, [r5, #420]	; 0x1a4
  FsBaseFile() {}
     6e8:	strd	r4, r4, [r5, #240]	; 0xf0
     6ec:	strd	r4, r4, [r5, #320]	; 0x140
     6f0:	strd	r4, r4, [r5, #400]	; 0x190
     6f4:	strd	r4, r4, [r5, #408]	; 0x198
     6f8:	bl	c948 <__aeabi_atexit>

// MTP Responder.
class MTPD {
public:

  explicit MTPD(MTPStorageInterface* storage): storage_(storage) {}
     6fc:	ldr	r3, [pc, #112]	; (770 <_GLOBAL__sub_I_storage+0xd8>)
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
     6fe:	ldr	r1, [pc, #116]	; (774 <_GLOBAL__sub_I_storage+0xdc>)
  SdFs sdx[nsd];
     700:	mov	r0, r4
     702:	str	r5, [r3, #0]
     704:	add.w	r3, r3, #8192	; 0x2000
     708:	ldr	r2, [pc, #96]	; (76c <_GLOBAL__sub_I_storage+0xd4>)
     70a:	str.w	r4, [r3, #1056]	; 0x420
     70e:	strb.w	r4, [r3, #1060]	; 0x424
     712:	str.w	r4, [r3, #1064]	; 0x428
  FsVolume() {}
     716:	ldr	r3, [pc, #96]	; (778 <_GLOBAL__sub_I_storage+0xe0>)
     718:	str.w	r1, [r3, #1168]	; 0x490
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
     71c:	ldr	r1, [pc, #92]	; (77c <_GLOBAL__sub_I_storage+0xe4>)
     71e:	str.w	r4, [r3, #1152]	; 0x480
     722:	str.w	r1, [r3, #1188]	; 0x4a4
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
     726:	movs	r1, #7
     728:	str.w	r4, [r3, #1156]	; 0x484
     72c:	str.w	r1, [r3, #1192]	; 0x4a8
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
     730:	movs	r1, #41	; 0x29
class SdBase : public Vol {
     732:	str.w	r4, [r3, #1164]	; 0x48c
     736:	strb.w	r1, [r3, #1197]	; 0x4ad
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
     73a:	ldr	r1, [pc, #68]	; (780 <_GLOBAL__sub_I_storage+0xe8>)
  SdioConfig() {}
     73c:	strh.w	r4, [r3, #1176]	; 0x498
     740:	str.w	r1, [r3, #1180]	; 0x49c
  SharedSpiCard() {}
     744:	strb.w	r4, [r3, #1201]	; 0x4b1
  DedicatedSpiCard() {}
     748:	strb.w	r4, [r3, #1208]	; 0x4b8
     74c:	strb.w	r4, [r3, #1224]	; 0x4c8
     750:	ldr	r1, [pc, #48]	; (784 <_GLOBAL__sub_I_storage+0xec>)
  }
     752:	ldmia.w	sp!, {r3, r4, r5, lr}
  SdFs sdx[nsd];
     756:	b.w	c948 <__aeabi_atexit>
     75a:	nop
     75c:	.word	0x200151b8
     760:	.word	0x20000450
     764:	.word	0x000001a5
     768:	.word	0x20000554
     76c:	.word	0x20002108
     770:	.word	0x20002700
     774:	.word	0x2000059c
     778:	.word	0x20014ce4
     77c:	.word	0x003d0900
     780:	.word	0x200004bc
     784:	.word	0x0000006d

00000788 <setup>:
{
     788:	push	{r4, r5, r6, r7, lr}
		uint32_t millis_begin = systick_millis_count;
     78a:	ldr	r5, [pc, #272]	; (89c <setup+0x114>)
     78c:	sub	sp, #28
    set_arm_clock(48'000'000);
     78e:	ldr	r0, [pc, #272]	; (8a0 <setup+0x118>)
				if (elapsed > 750) break;
     790:	movw	r7, #750	; 0x2ee
     794:	bl	aa54 <set_arm_clock>
			if (usb_configuration) {
     798:	ldr	r6, [pc, #264]	; (8a4 <setup+0x11c>)
		uint32_t millis_begin = systick_millis_count;
     79a:	ldr	r4, [r5, #0]
		while (!(*this)) {
     79c:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7a0:	cbz	r0, 7c8 <setup+0x40>
  uint16_t *params=loadParameters();
     7a2:	bl	2264 <loadParameters()>
  if(params[0]==1)
     7a6:	ldrh	r3, [r0, #0]
  uint16_t *params=loadParameters();
     7a8:	mov	r4, r0
  if(params[0]==1)
     7aa:	cmp	r3, #1
     7ac:	beq.n	7e0 <setup+0x58>
    while(millis()<10'000) if(Serial) { termon=1; break;}
     7ae:	movw	r6, #9999	; 0x270f
     7b2:	ldr	r3, [r5, #0]
     7b4:	cmp	r3, r6
     7b6:	bhi.n	7f8 <setup+0x70>
     7b8:	bl	120 <usb_serial_class::operator bool() [clone .isra.0]>
     7bc:	cmp	r0, #0
     7be:	beq.n	7b2 <setup+0x2a>
     7c0:	ldr	r3, [pc, #228]	; (8a8 <setup+0x120>)
     7c2:	movs	r2, #1
     7c4:	str	r2, [r3, #0]
     7c6:	b.n	7f8 <setup+0x70>
			uint32_t elapsed = systick_millis_count - millis_begin;
     7c8:	ldr	r3, [r5, #0]
			if (usb_configuration) {
     7ca:	ldrb	r2, [r6, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
     7cc:	subs	r3, r3, r4
			if (usb_configuration) {
     7ce:	cbz	r2, 7dc <setup+0x54>
				if (elapsed > 2000) break;
     7d0:	cmp.w	r3, #2000	; 0x7d0
				if (elapsed > 750) break;
     7d4:	bhi.n	7a2 <setup+0x1a>
			yield();
     7d6:	bl	c418 <yield>
     7da:	b.n	79c <setup+0x14>
				if (elapsed > 750) break;
     7dc:	cmp	r3, r7
     7de:	b.n	7d4 <setup+0x4c>
    termon = (t_rep>t_on)? 0: 1;
     7e0:	ldr	r3, [pc, #200]	; (8ac <setup+0x124>)
     7e2:	ldr	r2, [pc, #204]	; (8b0 <setup+0x128>)
     7e4:	ldrh	r3, [r3, #0]
     7e6:	ldrh	r2, [r2, #0]
     7e8:	uxth	r3, r3
     7ea:	uxth	r2, r2
     7ec:	cmp	r3, r2
     7ee:	ldr	r2, [pc, #184]	; (8a8 <setup+0x120>)
     7f0:	ite	hi
     7f2:	movhi	r3, #0
     7f4:	movls	r3, #1
     7f6:	str	r3, [r2, #0]
  Serial.println(version);
     7f8:	ldr	r1, [pc, #184]	; (8b4 <setup+0x12c>)
     7fa:	ldr	r0, [pc, #188]	; (8b8 <setup+0x130>)
     7fc:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.print("params[0] = "); Serial.println(params[0]);
     800:	ldr	r1, [pc, #184]	; (8bc <setup+0x134>)
     802:	ldr	r0, [pc, #180]	; (8b8 <setup+0x130>)
     804:	bl	18c <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
     808:	ldrh	r1, [r4, #0]
     80a:	ldr	r0, [pc, #172]	; (8b8 <setup+0x130>)
     80c:	bl	c70e <Print::print(long)>
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
     810:	ldr	r0, [pc, #164]	; (8b8 <setup+0x130>)
     812:	bl	c720 <Print::println()>
    if(CrashReport) Serial.print(CrashReport);
     816:	ldr	r0, [pc, #168]	; (8c0 <setup+0x138>)
     818:	bl	120d8 <___ZN16CrashReportClasscvbEv_veneer>
     81c:	cbz	r0, 826 <setup+0x9e>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
     81e:	ldr	r1, [pc, #152]	; (8b8 <setup+0x130>)
     820:	ldr	r0, [pc, #156]	; (8c0 <setup+0x138>)
     822:	bl	120d0 <___ZNK16CrashReportClass7printToER5Print_veneer>
    usbPowerSetup();
     826:	bl	3744 <usbPowerSetup()>
    lowPowerInit();
     82a:	bl	258 <lowPowerInit()>
    storage_configure();
     82e:	bl	554 <storage_configure()>
  if(!rtc_get_datetime(&t)) Serial.println("failing get_datetime");
     832:	add	r0, sp, #16
     834:	bl	3c66 <rtc_get_datetime(datetime_t*)>
     838:	cbnz	r0, 842 <setup+0xba>
     83a:	ldr	r1, [pc, #136]	; (8c4 <setup+0x13c>)
     83c:	ldr	r0, [pc, #120]	; (8b8 <setup+0x130>)
     83e:	bl	190 <Print::println(char const*) [clone .isra.0]>
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     842:	ldrsb.w	r3, [sp, #23]
  setup_ready=1;
     846:	movs	r4, #1
  Serial.printf("RTC-main: %4d-%02d-%02d %02d:%02d:%02d",
     848:	ldrsh.w	r2, [sp, #16]
     84c:	str	r3, [sp, #12]
     84e:	ldrsb.w	r3, [sp, #22]
     852:	ldr	r1, [pc, #116]	; (8c8 <setup+0x140>)
     854:	str	r3, [sp, #8]
     856:	ldrsb.w	r3, [sp, #21]
     85a:	ldr	r0, [pc, #92]	; (8b8 <setup+0x130>)
     85c:	str	r3, [sp, #4]
     85e:	ldrsb.w	r3, [sp, #19]
     862:	str	r3, [sp, #0]
     864:	ldrsb.w	r3, [sp, #18]
     868:	bl	c758 <Print::printf(char const*, ...)>
  Serial.println();
     86c:	ldr	r0, [pc, #72]	; (8b8 <setup+0x130>)
     86e:	bl	c720 <Print::println()>
  Serial.println("filing_init");
     872:	ldr	r1, [pc, #88]	; (8cc <setup+0x144>)
     874:	ldr	r0, [pc, #64]	; (8b8 <setup+0x130>)
     876:	bl	190 <Print::println(char const*) [clone .isra.0]>
  filing_init();
     87a:	bl	33b8 <filing_init()>
  setup_ready=1;
     87e:	ldr	r3, [pc, #80]	; (8d0 <setup+0x148>)
  Serial.println("Setup done");
     880:	ldr	r1, [pc, #80]	; (8d4 <setup+0x14c>)
     882:	ldr	r0, [pc, #52]	; (8b8 <setup+0x130>)
  setup_ready=1;
     884:	str	r4, [r3, #0]
  Serial.println("Setup done");
     886:	bl	190 <Print::println(char const*) [clone .isra.0]>
    setup1();
     88a:	bl	4a0 <setup1()>
    pinMode(13,OUTPUT);
     88e:	mov	r1, r4
     890:	movs	r0, #13
     892:	bl	bf2c <pinMode>
}
     896:	add	sp, #28
     898:	pop	{r4, r5, r6, r7, pc}
     89a:	nop
     89c:	.word	0x20015374
     8a0:	.word	0x02dc6c00
     8a4:	.word	0x200155df
     8a8:	.word	0x2001537c
     8ac:	.word	0x2001546a
     8b0:	.word	0x200022f4
     8b4:	.word	0x2000109a
     8b8:	.word	0x20001d30
     8bc:	.word	0x20001471
     8c0:	.word	0x20001d24
     8c4:	.word	0x2000147e
     8c8:	.word	0x20001493
     8cc:	.word	0x200014ba
     8d0:	.word	0x200151b4
     8d4:	.word	0x200014c6

000008d8 <DMAChannel::~DMAChannel()>:
	}
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
     8d8:	push	{r4, lr}
     8da:	mov	r4, r0
		release();
     8dc:	bl	c584 <DMAChannel::release()>
	}
     8e0:	mov	r0, r4
     8e2:	pop	{r4, pc}

000008e4 <acq_isr()>:
    #include "mAudioIF.h"
  #endif

  #define IMXRT_CACHE_ENABLED 2 // 0=disabled, 1=WT, 2= WB
  static void acq_isr(void)
  {
     8e4:	push	{r3, r4, r5, lr}
    uint32_t daddr;
    int32_t *src;
  
    daddr = (uint32_t)(dma.TCD->DADDR);
     8e6:	ldr	r3, [pc, #148]	; (97c <acq_isr()+0x98>)
     8e8:	ldr	r2, [r3, #0]
     8ea:	ldr	r1, [r2, #16]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
     8ec:	ldrb	r2, [r3, #4]
     8ee:	ldr	r3, [pc, #144]	; (980 <acq_isr()+0x9c>)
     8f0:	strb	r2, [r3, #31]

    dma.clearInterrupt();
  
    if (daddr < (uint32_t) &i2s_buffer[NBUF_I2S]) 
     8f2:	ldr	r2, [pc, #144]	; (984 <acq_isr()+0xa0>)
    }
    else
    {
    // DMA is receiving to the second half of the buffer
    // need to remove data from the first half
      src = (int32_t *)&i2s_buffer[0];
     8f4:	sub.w	r3, r2, #2048	; 0x800
     8f8:	cmp	r1, r2
     8fa:	it	cc
     8fc:	movcc	r3, r2
	uint32_t end_addr = (uint32_t)addr + size;
     8fe:	add.w	r0, r3, #2048	; 0x800
	asm("dsb");
     902:	dsb	sy
     906:	add.w	r2, r3, #32
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
     90a:	mov	r1, r3
		SCB_CACHE_DCIMVAC = location;
     90c:	mov.w	r4, #3758153728	; 0xe000e000
     910:	cmp	r2, r0
     912:	ite	hi
     914:	movhi	r2, #1
     916:	movls	r2, #64	; 0x40
     918:	add.w	r2, r3, r2, lsl #5
     91c:	str.w	r1, [r4, #3932]	; 0xf5c
		location += 32;
     920:	adds	r1, #32
	} while (location < end_addr);
     922:	cmp	r1, r2
     924:	bne.n	91c <acq_isr()+0x38>
	asm("dsb");
     926:	dsb	sy
	asm("isb");
     92a:	isb	sy
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
  #endif
}

static void __not_in_flash_func(process)(int32_t * buffer)
{ procCount++;
     92e:	ldr	r1, [pc, #88]	; (988 <acq_isr()+0xa4>)
     930:	ldr	r4, [pc, #88]	; (98c <acq_isr()+0xa8>)
     932:	ldr	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     934:	ldr	r5, [pc, #88]	; (990 <acq_isr()+0xac>)
{ procCount++;
     936:	adds	r2, #1
     938:	str	r2, [r1, #0]
    for(int ii=0; ii<NSAMP; ii++) acqBuffer[ii]= buffer[NCHAN_I2S*ii+ICH]>>shift;   
     93a:	ldrh	r1, [r5, #0]
     93c:	adds	r3, #16
     93e:	ldr.w	r2, [r3, #-8]
     942:	sxth	r1, r1
     944:	cmp	r0, r3
     946:	asr.w	r2, r2, r1
     94a:	str.w	r2, [r4], #4
     94e:	bne.n	93a <acq_isr()+0x56>

  // extract data
  extractBuffer(acqBuffer,buffer);
  //
  if(proc==0)
     950:	ldr	r2, [pc, #64]	; (994 <acq_isr()+0xb0>)
     952:	ldrh	r3, [r2, #0]
     954:	sxth	r3, r3
     956:	cbnz	r3, 96a <acq_isr()+0x86>
  {
    if(!pushData((uint32_t *)acqBuffer)) procMiss++;
     958:	ldr	r0, [pc, #48]	; (98c <acq_isr()+0xa8>)
     95a:	bl	2864 <pushData(unsigned long*)>
  }
  else if(proc==1)
  {
   if(!compress((void *)acqBuffer)) procMiss++;
     95e:	cbnz	r0, 968 <acq_isr()+0x84>
     960:	ldr	r2, [pc, #52]	; (998 <acq_isr()+0xb4>)
     962:	ldr	r3, [r2, #0]
     964:	adds	r3, #1
     966:	str	r3, [r2, #0]
  }
     968:	pop	{r3, r4, r5, pc}
  else if(proc==1)
     96a:	ldrh	r3, [r2, #0]
     96c:	sxth	r3, r3
     96e:	cmp	r3, #1
     970:	bne.n	968 <acq_isr()+0x84>
   if(!compress((void *)acqBuffer)) procMiss++;
     972:	ldr	r0, [pc, #24]	; (98c <acq_isr()+0xa8>)
     974:	bl	346c <compress(void*)>
     978:	b.n	95e <acq_isr()+0x7a>
     97a:	nop
     97c:	.word	0x20013fdc
     980:	.word	0x400e8000
     984:	.word	0x20200800
     988:	.word	0x20014c50
     98c:	.word	0x20014998
     990:	.word	0x20015468
     994:	.word	0x200153c4
     998:	.word	0x20014c54
     99c:	.word	0x00000000

000009a0 <setAudioFrequency(int)>:
  {
     9a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     9a4:	ldr.w	r9, [pc, #332]	; af4 <setAudioFrequency(int)+0x154>
     9a8:	movs	r2, #5
     9aa:	mov	r5, r0
     9ac:	ldr	r1, [pc, #312]	; (ae8 <setAudioFrequency(int)+0x148>)
     9ae:	ldr.w	r3, [r9]
     9b2:	mov	r0, r9
     9b4:	ldr	r3, [r3, #4]
     9b6:	vpush	{d8}
     9ba:	sub	sp, #12
     9bc:	blx	r3
	size_t print(int n)				{ return print((long)n); }
     9be:	mov.w	r1, #256	; 0x100
     9c2:	mov	r0, r9
     9c4:	bl	c70e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     9c8:	mov	r0, r9
     9ca:	bl	c720 <Print::println()>
    int n0 = 26; // targeted PLL frequency (n0*24 MHz) n0>=27 && n0<54
     9ce:	movs	r3, #26
     9d0:	lsls	r1, r5, #8
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d2:	ldr	r0, [pc, #280]	; (aec <setAudioFrequency(int)+0x14c>)
    {   n0++;
     9d4:	adds	r3, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9d6:	mov	r2, r1
        n1=0;
     9d8:	movs	r4, #0
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9da:	mul.w	ip, r0, r3
        {   n1++; 
     9de:	mov	r6, r4
     9e0:	adds	r4, #1
            n2 = 1 + (24'000'000 * n0) / (fs * ovr * n1);
     9e2:	sdiv	r8, ip, r2
     9e6:	add.w	r7, r8, #1
        } while ((n2>64) && (n1<=8));
     9ea:	cmp	r7, #64	; 0x40
     9ec:	ble.n	9fa <setAudioFrequency(int)+0x5a>
     9ee:	cmp	r4, #9
     9f0:	add	r2, r1
     9f2:	bne.n	9de <setAudioFrequency(int)+0x3e>
    } while ((n2>64 && n0<54));
     9f4:	cmp	r3, #54	; 0x36
     9f6:	bne.n	9d4 <setAudioFrequency(int)+0x34>
     9f8:	movs	r6, #8
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     9fa:	mov	r2, r5
     9fc:	ldr	r1, [pc, #240]	; (af0 <setAudioFrequency(int)+0x150>)
     9fe:	ldr	r0, [pc, #244]	; (af4 <setAudioFrequency(int)+0x154>)
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     a00:	and.w	r8, r8, #63	; 0x3f
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a04:	lsls	r6, r6, #6
    Serial.printf("fs=%d, no=%d, n1=%d, n2=%d\r\n", fs, n0,n1,n2);
     a06:	strd	r4, r7, [sp]
     a0a:	bl	c758 <Print::printf(char const*, ...)>
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a0e:	vmov	s15, r5
							  return write((const uint8_t *)str, strlen(str)); }
     a12:	ldr.w	r3, [r9]
     a16:	movs	r2, #3
     a18:	vcvt.f64.s32	d7, s15
     a1c:	ldr	r1, [pc, #216]	; (af8 <setAudioFrequency(int)+0x158>)
     a1e:	ldr	r3, [r3, #4]
        | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
     a20:	and.w	r6, r6, #448	; 0x1c0
     a24:	ldr	r0, [pc, #204]	; (af4 <setAudioFrequency(int)+0x154>)
    double C = ((double)fs * ovr * n1 * n2) / 24000000;
     a26:	vldr	d6, [pc, #168]	; ad0 <setAudioFrequency(int)+0x130>
     a2a:	vmul.f64	d7, d7, d6
     a2e:	vmov	s13, r4
     a32:	vcvt.f64.s32	d6, s13
     a36:	vmul.f64	d7, d7, d6
     a3a:	vmov	s13, r7
     a3e:	vcvt.f64.s32	d6, s13
     a42:	vmul.f64	d7, d7, d6
     a46:	vldr	d6, [pc, #144]	; ad8 <setAudioFrequency(int)+0x138>
     a4a:	vdiv.f64	d8, d7, d6
     a4e:	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     a50:	movs	r1, #2
     a52:	ldr	r0, [pc, #160]	; (af4 <setAudioFrequency(int)+0x154>)
     a54:	vmov.f64	d0, d8
     a58:	bl	c818 <Print::printFloat(double, unsigned char)>
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	// Print a floating point (decimal) number and a newline
	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     a5c:	ldr	r0, [pc, #148]	; (af4 <setAudioFrequency(int)+0x154>)
     a5e:	bl	c720 <Print::println()>
    int c0 = C;
     a62:	vcvt.s32.f64	s15, d8
    int c1 = C * c2 - (c0 * c2);
     a66:	movw	r2, #10000	; 0x2710
    int c0 = C;
     a6a:	vmov	r0, s15
    int c1 = C * c2 - (c0 * c2);
     a6e:	mul.w	r3, r2, r0
     a72:	vmov	s14, r3
     a76:	vldr	d6, [pc, #104]	; ae0 <setAudioFrequency(int)+0x140>
     a7a:	vcvt.f64.s32	d7, s14
     a7e:	vfnms.f64	d7, d8, d6
    set_audioClock(c0, c1, c2);
     a82:	vcvt.s32.f64	s15, d7
     a86:	vmov	r1, s15
     a8a:	bl	120c0 <___Z14set_audioClockilm_veneer>
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a8e:	ldr	r2, [pc, #108]	; (afc <setAudioFrequency(int)+0x15c>)
     a90:	ldr	r3, [r2, #28]
     a92:	bic.w	r3, r3, #3072	; 0xc00
        | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
     a96:	orr.w	r3, r3, #2048	; 0x800
    CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
     a9a:	str	r3, [r2, #28]
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     a9c:	ldr	r3, [r2, #40]	; 0x28
     a9e:	bic.w	r3, r3, #510	; 0x1fe
     aa2:	bic.w	r3, r3, #1
        | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
     aa6:	orr.w	r3, r3, r8
     aaa:	orrs	r3, r6
    CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
     aac:	str	r3, [r2, #40]	; 0x28
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     aae:	sub.w	r2, r2, #327680	; 0x50000
     ab2:	ldr	r3, [r2, #4]
      | (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
     ab4:	bic.w	r3, r3, #524288	; 0x80000
     ab8:	bic.w	r3, r3, #7
     abc:	orr.w	r3, r3, #524288	; 0x80000
    IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
     ac0:	str	r3, [r2, #4]
  }
     ac2:	add	sp, #12
     ac4:	vpop	{d8}
     ac8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     acc:	nop.w
     ad0:	.word	0x00000000
     ad4:	.word	0x40700000
     ad8:	.word	0x00000000
     adc:	.word	0x4176e360
     ae0:	.word	0x00000000
     ae4:	.word	0x40c38800
     ae8:	.word	0x20000d9a
     aec:	.word	0x016e3600
     af0:	.word	0x20000da0
     af4:	.word	0x20001d30
     af8:	.word	0x20000dbd
     afc:	.word	0x400fc000

00000b00 <i2s_setup()>:
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b00:	ldr	r2, [pc, #100]	; (b68 <i2s_setup()+0x68>)
     b02:	ldr	r3, [r2, #124]	; 0x7c
  {
     b04:	push	{r4, lr}
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b06:	orr.w	r3, r3, #786432	; 0xc0000
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b0a:	ldr	r4, [pc, #96]	; (b6c <i2s_setup()+0x6c>)
    CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
     b0c:	str	r3, [r2, #124]	; 0x7c
    if (I2S1_RCSR & I2S_RCSR_RE) return;
     b0e:	ldr.w	r3, [r4, #136]	; 0x88
     b12:	cmp	r3, #0
     b14:	blt.n	b66 <i2s_setup()+0x66>
    int fs = fsamp;
     b16:	ldr	r3, [pc, #88]	; (b70 <i2s_setup()+0x70>)
     b18:	ldr	r0, [r3, #0]
    setAudioFrequency(fs);
     b1a:	bl	9a0 <setAudioFrequency(int)>
    CORE_PIN23_CONFIG = 3;  //1:MCLK
     b1e:	ldr	r3, [pc, #84]	; (b74 <i2s_setup()+0x74>)
     b20:	movs	r2, #3
     b22:	str.w	r2, [r3, #288]	; 0x120
    CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
     b26:	str.w	r2, [r3, #296]	; 0x128
    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
     b2a:	str.w	r2, [r3, #292]	; 0x124
  	CORE_PIN8_CONFIG  = 3;  //1:RX_DATA0
     b2e:	str.w	r2, [r3, #380]	; 0x17c
  	IOMUXC_SAI1_RX_DATA0_SELECT_INPUT = 2;
     b32:	movs	r2, #2
     b34:	str.w	r2, [r3, #1428]	; 0x594
    I2S1_RMR = 0;
     b38:	movs	r3, #0
     b3a:	str.w	r3, [r4, #224]	; 0xe0
    I2S1_RCR1 = I2S_RCR1_RFW(4);
     b3e:	movs	r3, #4
     b40:	str.w	r3, [r4, #140]	; 0x8c
    I2S1_RCR2 = I2S_RCR2_SYNC(0) //| I2S_RCR2_BCP  
     b44:	mov.w	r3, #83886080	; 0x5000000
     b48:	str.w	r3, [r4, #144]	; 0x90
    I2S1_RCR3 = I2S_RCR3_RCE;
     b4c:	mov.w	r3, #65536	; 0x10000
     b50:	str.w	r3, [r4, #148]	; 0x94
    I2S1_RCR4 = I2S_RCR4_FRSZ((NCHAN_I2S-1)) | I2S_RCR4_SYWD((MSYNC-1)) | I2S_RCR4_MF
     b54:	ldr	r3, [pc, #32]	; (b78 <i2s_setup()+0x78>)
     b56:	str.w	r3, [r4, #152]	; 0x98
    I2S1_RCR5 = I2S_RCR5_WNW((MBIT-1)) | I2S_RCR5_W0W((MBIT-1)) | I2S_RCR5_FBT((MBIT-1));
     b5a:	ldr	r3, [pc, #32]	; (b7c <i2s_setup()+0x7c>)
     b5c:	str.w	r3, [r4, #156]	; 0x9c
    I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
     b60:	ldr	r3, [pc, #28]	; (b80 <i2s_setup()+0x80>)
     b62:	str.w	r3, [r4, #136]	; 0x88
  }
     b66:	pop	{r4, pc}
     b68:	.word	0x400fc000
     b6c:	.word	0x40384000
     b70:	.word	0x200022d4
     b74:	.word	0x401f8000
     b78:	.word	0x0003001b
     b7c:	.word	0x1f1f1f00
     b80:	.word	0x92000001

00000b84 <dma_setup()>:
  {
     b84:	push	{r4, lr}
    dma.begin(true); // Allocate the DMA channel first
     b86:	ldr	r4, [pc, #128]	; (c08 <dma_setup()+0x84>)
     b88:	movs	r1, #1
     b8a:	mov	r0, r4
     b8c:	bl	c4e8 <DMAChannel::begin(bool)>
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b90:	ldr	r3, [r4, #0]
     b92:	ldr	r2, [pc, #120]	; (c0c <dma_setup()+0x88>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b94:	ldr	r1, [pc, #120]	; (c10 <dma_setup()+0x8c>)
    dma.TCD->SADDR = (void *)((uint32_t)&I2S1_RDR0);
     b96:	str	r2, [r3, #0]
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     b98:	movs	r2, #4
    dma.TCD->DADDR = i2s_buffer;
     b9a:	ldr	r0, [pc, #120]	; (c14 <dma_setup()+0x90>)
    dma.TCD->DOFF = (MBIT/8);
     b9c:	strh	r2, [r3, #20]
    dma.TCD->DADDR = i2s_buffer;
     b9e:	str	r0, [r3, #16]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     ba0:	ldr	r0, [pc, #116]	; (c18 <dma_setup()+0x94>)
    dma.TCD->NBYTES_MLNO = (MBIT/8);
     ba2:	strd	r1, r2, [r3, #4]
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     ba6:	mov.w	r2, #1024	; 0x400
    dma.TCD->SLAST = 0;
     baa:	movs	r1, #0
    dma.TCD->CITER_ELINKNO = 2*NBUF_I2S;
     bac:	strh	r2, [r3, #22]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bae:	sub.w	r2, r2, #5120	; 0x1400
    dma.TCD->SLAST = 0;
     bb2:	str	r1, [r3, #12]
    dma.TCD->DLASTSGA = -sizeof(i2s_buffer);
     bb4:	str	r2, [r3, #24]
    dma.TCD->BITER_ELINKNO = dma.TCD->CITER_ELINKNO;
     bb6:	ldrh	r2, [r3, #22]
     bb8:	uxth	r2, r2
     bba:	strh	r2, [r3, #30]
    dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
     bbc:	movs	r2, #6
     bbe:	strh	r2, [r3, #28]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bc0:	ldrb	r3, [r4, #4]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bc2:	ldr	r2, [pc, #88]	; (c1c <dma_setup()+0x98>)
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
     bc4:	lsls	r3, r3, #2
     bc6:	add.w	r3, r3, #1073741824	; 0x40000000
     bca:	add.w	r3, r3, #966656	; 0xec000
		*mux = 0;
     bce:	str	r1, [r3, #0]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
     bd0:	str	r2, [r3, #0]
    dma.attachInterrupt(acq_isr, 0x60);	
     bd2:	ldrb	r3, [r4, #4]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     bd4:	ldr	r2, [pc, #72]	; (c20 <dma_setup()+0x9c>)
     bd6:	add.w	r1, r3, #16
     bda:	str.w	r0, [r2, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bde:	asrs	r2, r3, #5
     be0:	and.w	r0, r3, #31
     be4:	movs	r1, #1
     be6:	add.w	r2, r2, #939538432	; 0x38003800
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bea:	add.w	r3, r3, #3758096384	; 0xe0000000
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bee:	lsls	r1, r0
     bf0:	adds	r2, #64	; 0x40
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bf2:	add.w	r3, r3, #58368	; 0xe400
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     bf6:	lsls	r2, r2, #2
     bf8:	str	r1, [r2, #0]
		NVIC_SET_PRIORITY(IRQ_DMA_CH0 + channel, prio);
     bfa:	movs	r2, #96	; 0x60
     bfc:	strb	r2, [r3, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
     bfe:	ldr	r3, [pc, #36]	; (c24 <dma_setup()+0xa0>)
     c00:	ldrb	r2, [r4, #4]
     c02:	strb	r2, [r3, #27]
  }
     c04:	pop	{r4, pc}
     c06:	nop
     c08:	.word	0x20013fdc
     c0c:	.word	0x403840a0
     c10:	.word	0x02020000
     c14:	.word	0x20200000
     c18:	.word	0x000008e5
     c1c:	.word	0x80000013
     c20:	.word	0x20002400
     c24:	.word	0x400e8000

00000c28 <acqModifyFrequency(unsigned long)>:
  {
     c28:	push	{r4, lr}
    I2S1_RCSR &= ~(I2S_RCSR_RE | I2S_RCSR_BCE);
     c2a:	ldr	r4, [pc, #32]	; (c4c <acqModifyFrequency(unsigned long)+0x24>)
     c2c:	ldr.w	r3, [r4, #136]	; 0x88
     c30:	bic.w	r3, r3, #2415919104	; 0x90000000
     c34:	str.w	r3, [r4, #136]	; 0x88
    setAudioFrequency(fsamp);
     c38:	bl	9a0 <setAudioFrequency(int)>
    I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
     c3c:	ldr.w	r3, [r4, #136]	; 0x88
     c40:	orr.w	r3, r3, #2415919104	; 0x90000000
     c44:	str.w	r3, [r4, #136]	; 0x88
  }
     c48:	pop	{r4, pc}
     c4a:	nop
     c4c:	.word	0x40384000

00000c50 <_GLOBAL__sub_I_procCount>:
		begin();
     c50:	ldr	r0, [pc, #20]	; (c68 <_GLOBAL__sub_I_procCount+0x18>)
     c52:	movs	r1, #0
  }

  #if defined(AUDIO_INTERFACE)
    putAudio(acqBuffer);
  #endif
}
     c54:	push	{r3, lr}
     c56:	bl	c4e8 <DMAChannel::begin(bool)>
  static DMAChannel dma;
     c5a:	ldr	r2, [pc, #16]	; (c6c <_GLOBAL__sub_I_procCount+0x1c>)
     c5c:	ldr	r1, [pc, #16]	; (c70 <_GLOBAL__sub_I_procCount+0x20>)
     c5e:	ldr	r0, [pc, #8]	; (c68 <_GLOBAL__sub_I_procCount+0x18>)
}
     c60:	ldmia.w	sp!, {r3, lr}
  static DMAChannel dma;
     c64:	b.w	c948 <__aeabi_atexit>
     c68:	.word	0x20013fdc
     c6c:	.word	0x20002108
     c70:	.word	0x000008d9

00000c74 <MTPStorage_SD::addFilesystem(SdFs&, char const*)>:
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c74:	ldr	r3, [r0, #4]
     c76:	cmp	r3, #19
{ 
public:
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c78:	push	{r4, lr}
        if (fsCount < MTPD_MAX_FILESYSTEMS) {
     c7a:	bgt.n	c88 <MTPStorage_SD::addFilesystem(SdFs&, char const*)+0x14>
          sd_name[fsCount] = name;
     c7c:	add.w	r4, r0, r3, lsl #2
          sdx[fsCount++] = &fs;
     c80:	adds	r3, #1
          sd_name[fsCount] = name;
     c82:	str	r2, [r4, #8]
          sdx[fsCount++] = &fs;
     c84:	str	r3, [r0, #4]
     c86:	str	r1, [r4, #88]	; 0x58
  void addFilesystem(SdFs &fs, const char *name) { sd_addFilesystem(fs, name);}
     c88:	pop	{r4, pc}

00000c8a <MTPStorage_SD::get_FSCount()>:
  Record ReadIndexRecord(uint32_t i) ;
  uint16_t ConstructFilename(int i, char* out, int len) ;
  void OpenFileByIndex(uint32_t i, uint32_t mode = O_READ) ;
  void printRecord(int h, Record *p);

  uint32_t get_FSCount(void) {return sd_getFSCount();}
     c8a:	ldr	r0, [r0, #4]
     c8c:	bx	lr

00000c8e <MTPStorage_SD::get_FSName(unsigned long)>:
      const char *sd_getFSName(uint32_t store) { return sd_name[store];}
     c8e:	add.w	r1, r0, r1, lsl #2
  const char *get_FSName(uint32_t storage) { return sd_getFSName(storage);}
     c92:	ldr	r0, [r1, #8]
     c94:	bx	lr

00000c96 <MTPStorage_SD::readonly(unsigned long)>:
  bool MTPStorage_SD::readonly(uint32_t store) { return false; }
     c96:	movs	r0, #0
     c98:	bx	lr

00000c9a <MTPStorage_SD::has_directories(unsigned long)>:
  bool MTPStorage_SD::has_directories(uint32_t store) { return true; }
     c9a:	movs	r0, #1
     c9c:	bx	lr

00000c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>:
  size_t getName(char* name, size_t len) {
     c9e:	push	{r4}
    *name = 0;
     ca0:	movs	r4, #0
     ca2:	strb	r4, [r1, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     ca4:	ldr	r3, [r0, #56]	; 0x38
     ca6:	cbz	r3, cb2 <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x14>
     ca8:	mov	r0, r3
  }
     caa:	ldr.w	r4, [sp], #4
    return m_fFile ? m_fFile->getName(name, len) :
     cae:	b.w	6f64 <FatFile::getName(char*, unsigned int)>
     cb2:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getName(name, len) : 0;
     cb4:	cbz	r0, cbe <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]+0x20>
  }
     cb6:	ldr.w	r4, [sp], #4
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     cba:	b.w	5828 <ExFatFile::getName8(char*, unsigned int)>
     cbe:	ldr.w	r4, [sp], #4
     cc2:	bx	lr

00000cc4 <Print::println(unsigned long) [clone .isra.0]>:
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cc4:	push	{r4, lr}
     cc6:	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     cc8:	movs	r3, #0
     cca:	movs	r2, #10
     ccc:	bl	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
     cd0:	mov	r0, r4
     cd2:	ldmia.w	sp!, {r4, lr}
     cd6:	b.w	c720 <Print::println()>

00000cda <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     cda:	push	{r0, r1, r4, lr}
     cdc:	mov	r4, r0
							  return write((const uint8_t *)str, strlen(str)); }
     cde:	mov	r0, r1
	size_t write(const char *str)			{ if (str == nullptr) return 0;
     ce0:	cbz	r1, cfa <Print::write(char const*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
     ce2:	str	r1, [sp, #4]
     ce4:	bl	edd0 <strlen>
     ce8:	ldr	r3, [r4, #0]
     cea:	mov	r2, r0
     cec:	ldr	r1, [sp, #4]
     cee:	mov	r0, r4
     cf0:	ldr	r3, [r3, #4]
     cf2:	add	sp, #8
     cf4:	ldmia.w	sp!, {r4, lr}
     cf8:	bx	r3
     cfa:	add	sp, #8
     cfc:	pop	{r4, pc}
	...

00000d00 <dbgPrint(unsigned short)>:
  static void dbgPrint(uint16_t line) {
     d00:	push	{r3, r4, r5, lr}
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }
     d02:	ldr	r4, [pc, #44]	; (d30 <dbgPrint(unsigned short)+0x30>)
     d04:	mov	r5, r0
     d06:	ldr	r1, [pc, #44]	; (d34 <dbgPrint(unsigned short)+0x34>)
     d08:	mov	r0, r4
     d0a:	bl	cda <Print::write(char const*)>
     d0e:	ldr	r1, [pc, #40]	; (d38 <dbgPrint(unsigned short)+0x38>)
     d10:	mov	r0, r4
     d12:	bl	cda <Print::write(char const*)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     d16:	movs	r0, #46	; 0x2e
     d18:	bl	a95c <usb_serial_putchar>
	size_t print(int n)				{ return print((long)n); }
     d1c:	mov	r1, r5
     d1e:	mov	r0, r4
     d20:	bl	c70e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     d24:	mov	r0, r4
  }
     d26:	ldmia.w	sp!, {r3, r4, r5, lr}
     d2a:	b.w	c720 <Print::println()>
     d2e:	nop
     d30:	.word	0x20001d30
     d34:	.word	0x200010ea
     d38:	.word	0x200010f5

00000d3c <Print::println(char const*)>:
	size_t println(const char s[])			{ return print(s) + println(); }
     d3c:	push	{r3, r4, r5, lr}
     d3e:	mov	r5, r0
	size_t print(const char s[])			{ return write(s); }
     d40:	bl	cda <Print::write(char const*)>
     d44:	mov	r4, r0
	size_t println(const char s[])			{ return print(s) + println(); }
     d46:	mov	r0, r5
     d48:	bl	c720 <Print::println()>
     d4c:	add	r0, r4
     d4e:	pop	{r3, r4, r5, pc}

00000d50 <FsVolume::bytesPerCluster() const>:
    return m_fVol ? m_fVol->bytesPerCluster() :
     d50:	ldr.w	r3, [r0, #1152]	; 0x480
     d54:	cbz	r3, d62 <FsVolume::bytesPerCluster() const+0x12>
     d56:	ldrb	r3, [r3, #6]
     d58:	mov.w	r0, #512	; 0x200
     d5c:	lsls	r0, r3
     d5e:	uxth	r0, r0
     d60:	bx	lr
     d62:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->bytesPerCluster() : 0;
     d66:	cbz	r0, d6c <FsVolume::bytesPerCluster() const+0x1c>
     d68:	ldr.w	r0, [r0, #1084]	; 0x43c
  }
     d6c:	bx	lr

00000d6e <FsVolume::clusterCount() const>:
    return m_fVol ? m_fVol->clusterCount() :
     d6e:	ldr.w	r3, [r0, #1152]	; 0x480
     d72:	cbz	r3, d7a <FsVolume::clusterCount() const+0xc>
    return m_lastCluster - 1;
     d74:	ldr	r0, [r3, #28]
     d76:	subs	r0, #1
     d78:	bx	lr
     d7a:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->clusterCount() : 0;
     d7e:	cbz	r0, d84 <FsVolume::clusterCount() const+0x16>
  uint32_t clusterCount() const {return m_clusterCount;}
     d80:	ldr.w	r0, [r0, #1072]	; 0x430
  }
     d84:	bx	lr

00000d86 <MTPStorage_SD::totalSize(unsigned long)>:
      { return (uint64_t)sdx[store]->clusterCount()
     d86:	add.w	r1, r0, r1, lsl #2
  uint64_t MTPStorage_SD::totalSize(uint32_t store) { return sd_totalSize(store); }
     d8a:	push	{r3, r4, r5, lr}
     d8c:	ldr	r5, [r1, #88]	; 0x58
     d8e:	mov	r0, r5
     d90:	bl	d6e <FsVolume::clusterCount() const>
     d94:	mov	r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
     d96:	mov	r0, r5
     d98:	bl	d50 <FsVolume::bytesPerCluster() const>
     d9c:	umull	r0, r1, r4, r0
     da0:	pop	{r3, r4, r5, pc}

00000da2 <FsVolume::rename(char const*, char const*)>:
   * a file object that was opened before the rename() call.
   *
   * \return true for success or false for failure.
   */
  bool rename(const char *oldPath, const char *newPath) {
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     da2:	ldr.w	r3, [r0, #1152]	; 0x480
  bool rename(const char *oldPath, const char *newPath) {
     da6:	push	{r4, r5, lr}
     da8:	mov	r5, r1
     daa:	sub	sp, #68	; 0x44
     dac:	mov	r4, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
     dae:	cbz	r3, dd4 <FsVolume::rename(char const*, char const*)+0x32>
  FatFile() {}
     db0:	movs	r2, #0
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
     db2:	add.w	r1, r3, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     db6:	add	r0, sp, #8
     db8:	mov	r3, r2
     dba:	str	r2, [sp, #8]
     dbc:	mov	r2, r5
     dbe:	str	r1, [sp, #4]
     dc0:	bl	7580 <FatFile::open(FatFile*, char const*, int)>
     dc4:	ldr	r1, [sp, #4]
     dc6:	cbz	r0, dd0 <FsVolume::rename(char const*, char const*)+0x2e>
     dc8:	mov	r2, r4
     dca:	add	r0, sp, #8
     dcc:	bl	7840 <FatFile::rename(FatFile*, char const*)>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
  }
     dd0:	add	sp, #68	; 0x44
     dd2:	pop	{r4, r5, pc}
     dd4:	ldr.w	r0, [r0, #1156]	; 0x484
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
     dd8:	cmp	r0, #0
     dda:	beq.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
     ddc:	add.w	r1, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
     de0:	mov	r2, r5
     de2:	add	r0, sp, #8
  ExFatFile() {}
     de4:	str	r3, [sp, #56]	; 0x38
     de6:	str	r1, [sp, #4]
     de8:	bl	604c <ExFatFile::open(ExFatFile*, char const*, int)>
     dec:	ldr	r1, [sp, #4]
     dee:	cbnz	r0, df4 <FsVolume::rename(char const*, char const*)+0x52>
     df0:	movs	r0, #0
     df2:	b.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>
     df4:	mov	r2, r4
     df6:	add	r0, sp, #8
     df8:	bl	6a48 <ExFatFile::rename(ExFatFile*, char const*)>
     dfc:	cmp	r0, #0
     dfe:	beq.n	df0 <FsVolume::rename(char const*, char const*)+0x4e>
     e00:	b.n	dd0 <FsVolume::rename(char const*, char const*)+0x2e>

00000e02 <FsBaseFile::available() const>:
    return m_fFile ? m_fFile->available() :
     e02:	ldr	r3, [r0, #56]	; 0x38
  int available() const {
     e04:	push	{r4, lr}
    return m_fFile ? m_fFile->available() :
     e06:	cbz	r3, e20 <FsBaseFile::available() const+0x1e>
    return isFile() ? fileSize() - curPosition() : 0;
     e08:	ldrb	r0, [r3, #0]
     e0a:	ands.w	r0, r0, #8
     e0e:	ittt	ne
     e10:	ldrne	r0, [r3, #28]
     e12:	ldrne	r3, [r3, #20]
     e14:	subne	r0, r0, r3
    return n > INT_MAX ? INT_MAX : n;
     e16:	cmp	r0, #0
     e18:	it	lt
     e1a:	mvnlt.w	r0, #2147483648	; 0x80000000
  }
     e1e:	pop	{r4, pc}
     e20:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->available() : 0;
     e22:	cmp	r0, #0
     e24:	beq.n	e1e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e26:	ldrb.w	r3, [r0, #49]	; 0x31
     e2a:	ands.w	r3, r3, #8
     e2e:	beq.n	e4e <FsBaseFile::available() const+0x4c>
     e30:	ldrd	r1, r3, [r0, #16]
     e34:	ldrd	r2, r4, [r0]
     e38:	subs	r0, r1, r2
     e3a:	sbc.w	r3, r3, r4
    return n > INT_MAX ? INT_MAX : n;
     e3e:	cmp.w	r0, #2147483648	; 0x80000000
     e42:	sbcs.w	r3, r3, #0
     e46:	it	cs
     e48:	mvncs.w	r0, #2147483648	; 0x80000000
     e4c:	b.n	e1e <FsBaseFile::available() const+0x1c>
    return isFile() ? fileSize() - curPosition() : 0;
     e4e:	mov	r0, r3
     e50:	b.n	e3e <FsBaseFile::available() const+0x3c>

00000e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     e52:	ldr	r3, [r0, #56]	; 0x38
     e54:	cbz	r3, e5c <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0xa>
     e56:	mov	r0, r3
     e58:	b.w	7662 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     e5c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     e5e:	cbz	r0, e64 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)+0x12>
     e60:	b.w	5986 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
  }
     e64:	bx	lr

00000e66 <FsBaseFile::isDir() const>:
    return m_fFile ? m_fFile->isDir() :
     e66:	ldr	r3, [r0, #56]	; 0x38
     e68:	cbz	r3, e78 <FsBaseFile::isDir() const+0x12>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
    /** \return True if the file is contiguous. */
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  /** \return True if this is a directory. */
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     e6a:	ldrb	r3, [r3, #0]
     e6c:	tst.w	r3, #112	; 0x70
           m_xFile ? m_xFile->isDir() : false;
     e70:	ite	ne
     e72:	movne	r0, #1
     e74:	moveq	r0, #0
  }
     e76:	bx	lr
     e78:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->isDir() : false;
     e7a:	cmp	r0, #0
     e7c:	beq.n	e76 <FsBaseFile::isDir() const+0x10>
     e7e:	ldrb.w	r3, [r0, #49]	; 0x31
     e82:	tst.w	r3, #80	; 0x50
     e86:	b.n	e70 <FsBaseFile::isDir() const+0xa>

00000e88 <FsBaseFile::isOpen() const>:
  bool isOpen() const {return m_fFile || m_xFile;}
     e88:	ldr	r3, [r0, #56]	; 0x38
     e8a:	cbnz	r3, e96 <FsBaseFile::isOpen() const+0xe>
     e8c:	ldr	r0, [r0, #60]	; 0x3c
     e8e:	subs	r0, #0
     e90:	it	ne
     e92:	movne	r0, #1
     e94:	bx	lr
     e96:	movs	r0, #1
     e98:	bx	lr

00000e9a <MTPStorage_SD::CloseIndex()>:
  {
     e9a:	push	{r3, r4, r5, lr}
    if(index_.isOpen()) {index_.close();}
     e9c:	add.w	r5, r0, #184	; 0xb8
  {
     ea0:	mov	r4, r0
    if(index_.isOpen()) {index_.close();}
     ea2:	mov	r0, r5
     ea4:	bl	e88 <FsBaseFile::isOpen() const>
     ea8:	cbz	r0, eb0 <MTPStorage_SD::CloseIndex()+0x16>
     eaa:	mov	r0, r5
     eac:	bl	8750 <FsBaseFile::close()>
    index_generated = false;
     eb0:	movs	r3, #0
     eb2:	strb.w	r3, [r4, #428]	; 0x1ac
    index_entries_ = 0;
     eb6:	str.w	r3, [r4, #424]	; 0x1a8
  }
     eba:	pop	{r3, r4, r5, pc}

00000ebc <FsBaseFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     ebc:	ldr	r3, [r0, #56]	; 0x38
     ebe:	cbz	r3, ec6 <FsBaseFile::read(void*, unsigned int)+0xa>
     ec0:	mov	r0, r3
     ec2:	b.w	70bc <FatFile::read(void*, unsigned int)>
     ec6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->read(buf, count) : -1;
     ec8:	cbz	r0, ece <FsBaseFile::read(void*, unsigned int)+0x12>
     eca:	b.w	5a6c <ExFatFile::read(void*, unsigned int)>
  }
     ece:	mov.w	r0, #4294967295
     ed2:	bx	lr

00000ed4 <FsBaseFile::seekSet(unsigned long long)>:
  bool seekSet(uint64_t pos) {
     ed4:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ed6:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
     ed8:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     eda:	cbz	r5, ee6 <FsBaseFile::seekSet(unsigned long long)+0x12>
     edc:	cbnz	r3, ef0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
     ede:	mov	r0, r5
  }
     ee0:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     ee2:	b.w	72a6 <FatFile::seekSet(unsigned long)>
     ee6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
     ee8:	cbz	r0, ef0 <FsBaseFile::seekSet(unsigned long long)+0x1c>
  }
     eea:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
     eec:	b.w	5c1c <ExFatFile::seekSet(unsigned long long)>
  }
     ef0:	movs	r0, #0
     ef2:	pop	{r4, r5}
     ef4:	bx	lr

00000ef6 <MTPStorage_SD::write(char const*, unsigned long)>:
  {
     ef6:	push	{r3, lr}
      size_t ret = file_.write(data,bytes);
     ef8:	add.w	r0, r0, #264	; 0x108
     efc:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
     f00:	pop	{r3, pc}
	...

00000f04 <FsFile::FsFile()>:
     f04:	movs	r2, #0
     f06:	mov.w	r1, #1000	; 0x3e8
     f0a:	strb	r2, [r0, #12]
     f0c:	strd	r2, r1, [r0, #4]
  FsBaseFile() {}
     f10:	strd	r2, r2, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f14:	ldr	r2, [pc, #4]	; (f1c <FsFile::FsFile()+0x18>)
     f16:	str	r2, [r0, #0]
     f18:	bx	lr
     f1a:	nop
     f1c:	.word	0x20000554

00000f20 <FsFile::~FsFile()>:
class StreamFile : public stream_t, public BaseFile {
     f20:	ldr	r3, [pc, #16]	; (f34 <FsFile::~FsFile()+0x14>)
     f22:	push	{r4, lr}
     f24:	mov	r4, r0
     f26:	str.w	r3, [r0], #16
  ~FsBaseFile() {close();}
     f2a:	bl	8750 <FsBaseFile::close()>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     f2e:	mov	r0, r4
     f30:	pop	{r4, pc}
     f32:	nop
     f34:	.word	0x2000042c

00000f38 <mSD_Base::sd_mkdir(unsigned long, char*)>:
      bool sd_mkdir(uint32_t store, char *filename) { return sdx[store]->mkdir(filename);  }
     f38:	add.w	r1, r0, r1, lsl #2
     f3c:	ldr	r3, [r1, #84]	; 0x54
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
     f3e:	ldr.w	r1, [r3, #1152]	; 0x480
     f42:	push	{lr}
     f44:	sub	sp, #60	; 0x3c
     f46:	cbz	r1, f5e <mSD_Base::sd_mkdir(unsigned long, char*)+0x26>
  FatFile() {}
     f48:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
     f4a:	add.w	r1, r1, #1096	; 0x448
     f4e:	mov	r0, sp
     f50:	str	r3, [sp, #0]
     f52:	movs	r3, #1
     f54:	bl	779c <FatFile::mkdir(FatFile*, char const*, bool)>
     f58:	add	sp, #60	; 0x3c
     f5a:	ldr.w	pc, [sp], #4
     f5e:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
     f62:	cmp	r0, #0
     f64:	beq.n	f58 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
  ExFatFile() {}
     f66:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
     f68:	movs	r3, #1
     f6a:	add.w	r1, r0, #1096	; 0x448
     f6e:	mov	r0, sp
     f70:	bl	698a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
     f74:	b.n	f58 <mSD_Base::sd_mkdir(unsigned long, char*)+0x20>
	...

00000f78 <mSD_Base::sd_remove(unsigned long, char const*)>:
      bool sd_remove(uint32_t store, const char *filename) { Serial.println(filename); return sdx[store]->remove(filename);  }
     f78:	push	{r4, r5, lr}
     f7a:	mov	r4, r0
     f7c:	sub	sp, #68	; 0x44
     f7e:	mov	r5, r1
     f80:	ldr	r0, [pc, #84]	; (fd8 <mSD_Base::sd_remove(unsigned long, char const*)+0x60>)
     f82:	mov	r1, r2
     f84:	str	r2, [sp, #4]
     f86:	bl	d3c <Print::println(char const*)>
    return m_fVol ? m_fVol->remove(path) :
     f8a:	ldr	r2, [sp, #4]
     f8c:	add.w	r1, r4, r5, lsl #2
     f90:	ldr	r3, [r1, #84]	; 0x54
     f92:	ldr.w	r1, [r3, #1152]	; 0x480
     f96:	cbz	r1, fb0 <mSD_Base::sd_remove(unsigned long, char const*)+0x38>
     f98:	movs	r3, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     f9a:	add	r0, sp, #8
     f9c:	str	r3, [sp, #8]
     f9e:	movs	r3, #1
     fa0:	bl	761e <FatFile::open(FatVolume*, char const*, int)>
     fa4:	cbz	r0, fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fa6:	add	r0, sp, #8
     fa8:	bl	8698 <FatFile::remove()>
     fac:	add	sp, #68	; 0x44
     fae:	pop	{r4, r5, pc}
     fb0:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->remove(path) : false;
     fb4:	cmp	r0, #0
     fb6:	beq.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fb8:	str	r1, [sp, #56]	; 0x38
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
     fba:	movs	r3, #1
     fbc:	mov	r1, r0
     fbe:	add	r0, sp, #8
     fc0:	bl	6112 <ExFatFile::open(ExFatVolume*, char const*, int)>
     fc4:	cbnz	r0, fca <mSD_Base::sd_remove(unsigned long, char const*)+0x52>
     fc6:	movs	r0, #0
     fc8:	b.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fca:	add	r0, sp, #8
     fcc:	bl	6690 <ExFatFile::remove()>
     fd0:	cmp	r0, #0
     fd2:	beq.n	fc6 <mSD_Base::sd_remove(unsigned long, char const*)+0x4e>
     fd4:	b.n	fac <mSD_Base::sd_remove(unsigned long, char const*)+0x34>
     fd6:	nop
     fd8:	.word	0x20001d30

00000fdc <mSD_Base::sd_rmdir(unsigned long, char*)>:
      bool sd_rmdir(uint32_t store, char *filename) { return sdx[store]->rmdir(filename);  }
     fdc:	add.w	r1, r0, r1, lsl #2
     fe0:	ldr	r3, [r1, #84]	; 0x54
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
     fe2:	ldr.w	r1, [r3, #1152]	; 0x480
     fe6:	push	{lr}
     fe8:	sub	sp, #60	; 0x3c
     fea:	cbz	r1, 1004 <mSD_Base::sd_rmdir(unsigned long, char*)+0x28>
     fec:	movs	r3, #0
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
     fee:	mov	r0, sp
     ff0:	str	r3, [sp, #0]
     ff2:	bl	761e <FatFile::open(FatVolume*, char const*, int)>
     ff6:	cbz	r0, ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
     ff8:	mov	r0, sp
     ffa:	bl	7346 <FatFile::rmdir()>
     ffe:	add	sp, #60	; 0x3c
    1000:	ldr.w	pc, [sp], #4
    1004:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->rmdir(path) : false;
    1008:	cmp	r0, #0
    100a:	beq.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    100c:	mov	r3, r1
    100e:	str	r1, [sp, #48]	; 0x30
    1010:	mov	r1, r0
    1012:	mov	r0, sp
    1014:	bl	6112 <ExFatFile::open(ExFatVolume*, char const*, int)>
    1018:	cbnz	r0, 101e <mSD_Base::sd_rmdir(unsigned long, char*)+0x42>
    101a:	movs	r0, #0
    101c:	b.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
    101e:	mov	r0, sp
    1020:	bl	671c <ExFatFile::rmdir()>
    1024:	cmp	r0, #0
    1026:	beq.n	101a <mSD_Base::sd_rmdir(unsigned long, char*)+0x3e>
    1028:	b.n	ffe <mSD_Base::sd_rmdir(unsigned long, char*)+0x22>
	...

0000102c <MTPStorage_SD::OpenIndex()>:
  { 
    102c:	push	{r4, r5, lr}
    if(index_.isOpen()) return; // only once
    102e:	add.w	r5, r0, #184	; 0xb8
  { 
    1032:	sub	sp, #84	; 0x54
    1034:	mov	r4, r0
    if(index_.isOpen()) return; // only once
    1036:	mov	r0, r5
    1038:	bl	e88 <FsBaseFile::isOpen() const>
    103c:	cbnz	r0, 107e <MTPStorage_SD::OpenIndex()+0x52>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    103e:	ldr	r2, [pc, #68]	; (1084 <MTPStorage_SD::OpenIndex()+0x58>)
    1040:	movw	r3, #514	; 0x202
    1044:	ldr	r1, [r4, #88]	; 0x58
    1046:	mov	r0, sp
    1048:	bl	8984 <FsVolume::open(char const*, int)>
class Print
    104c:	ldr	r3, [sp, #4]
    104e:	add	r1, sp, #16
    1050:	mov	r0, r5
    1052:	str.w	r3, [r4, #172]	; 0xac
class Stream : public Print
    1056:	ldr	r3, [sp, #8]
    1058:	str.w	r3, [r4, #176]	; 0xb0
    105c:	ldrb.w	r3, [sp, #12]
    1060:	strb.w	r3, [r4, #180]	; 0xb4
    1064:	bl	877a <FsBaseFile::operator=(FsBaseFile const&)>
    index_=sd_open(0,indexFile, (O_RDWR | O_CREAT));
    1068:	mov	r0, sp
    106a:	bl	f20 <FsFile::~FsFile()>
    if(!index_.isOpen()) { Serial.println(" cannot open Index file"); }
    106e:	mov	r0, r5
    1070:	bl	e88 <FsBaseFile::isOpen() const>
    1074:	cbnz	r0, 107e <MTPStorage_SD::OpenIndex()+0x52>
    1076:	ldr	r1, [pc, #16]	; (1088 <MTPStorage_SD::OpenIndex()+0x5c>)
    1078:	ldr	r0, [pc, #16]	; (108c <MTPStorage_SD::OpenIndex()+0x60>)
    107a:	bl	d3c <Print::println(char const*)>
  }
    107e:	add	sp, #84	; 0x54
    1080:	pop	{r4, r5, pc}
    1082:	nop
    1084:	.word	0x2000112d
    1088:	.word	0x2000113b
    108c:	.word	0x20001d30

00001090 <MTPStorage_SD::ResetIndex()>:
  void MTPStorage_SD::ResetIndex() {
    1090:	push	{r4, lr}
    1092:	mov	r4, r0
    if(!index_.isOpen()) return;
    1094:	adds	r0, #184	; 0xb8
    1096:	bl	e88 <FsBaseFile::isOpen() const>
    109a:	cbz	r0, 10bc <MTPStorage_SD::ResetIndex()+0x2c>
    CloseIndex();
    109c:	ldr	r3, [r4, #0]
    109e:	mov	r0, r4
    10a0:	ldr	r3, [r3, #64]	; 0x40
    10a2:	blx	r3
    all_scanned_ = false;
    10a4:	movs	r3, #0
    OpenIndex();
    10a6:	mov	r0, r4
    all_scanned_ = false;
    10a8:	strb.w	r3, [r4, #429]	; 0x1ad
    open_file_ = 0xFFFFFFFEUL;
    10ac:	mvn.w	r3, #1
    10b0:	str.w	r3, [r4, #420]	; 0x1a4
  }
    10b4:	ldmia.w	sp!, {r4, lr}
    OpenIndex();
    10b8:	b.w	102c <MTPStorage_SD::OpenIndex()>
  }
    10bc:	pop	{r4, pc}

000010be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>:
  { OpenIndex();
    10be:	push	{r0, r1, r4, r5, r6, lr}
    10c0:	mov	r4, r0
    10c2:	mov	r5, r1
    index_.seekSet((sizeof(r) * i));
    10c4:	mov.w	r6, #280	; 0x118
  { OpenIndex();
    10c8:	str	r2, [sp, #4]
    index_.seekSet((sizeof(r) * i));
    10ca:	adds	r4, #184	; 0xb8
  { OpenIndex();
    10cc:	bl	102c <MTPStorage_SD::OpenIndex()>
    index_.seekSet((sizeof(r) * i));
    10d0:	mul.w	r2, r6, r5
    10d4:	movs	r3, #0
    10d6:	mov	r0, r4
    10d8:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    index_.write((char*)&r, sizeof(r));
    10dc:	mov	r2, r6
    10de:	ldr	r1, [sp, #4]
    10e0:	mov	r0, r4
    10e2:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
  }
    10e6:	add	sp, #8
    10e8:	pop	{r4, r5, r6, pc}

000010ea <MTPStorage_SD::AppendIndexRecord(Record const&)>:
  { uint32_t new_record = index_entries_++;
    10ea:	push	{r4, lr}
    10ec:	ldr.w	r4, [r0, #424]	; 0x1a8
    10f0:	mov	r2, r1
    10f2:	adds	r1, r4, #1
    10f4:	str.w	r1, [r0, #424]	; 0x1a8
    WriteIndexRecord(new_record, r);
    10f8:	mov	r1, r4
    10fa:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    10fe:	mov	r0, r4
    1100:	pop	{r4, pc}
	...

00001104 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>:
    index_generated = true;
    1104:	movs	r3, #1
    sd_remove(0,indexFile);
    1106:	ldr	r2, [pc, #88]	; (1160 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x5c>)
    1108:	movs	r1, #0
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    110a:	push	{r4, r5, r6, r7, lr}
    110c:	mov	r4, r0
    index_generated = true;
    110e:	strb.w	r3, [r0, #428]	; 0x1ac
  void MTPStorage_SD::GenerateIndex(uint32_t store)
    1112:	sub	sp, #284	; 0x11c
    sd_remove(0,indexFile);
    1114:	adds	r0, #4
    1116:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    index_entries_ = 0;
    111a:	movs	r5, #0
    num_storage = sd_getFSCount();
    111c:	ldr	r3, [r4, #4]
      r.parent = 0xFFFFFFFFUL; // 
    111e:	mov.w	r6, #4294967295
      strcpy(r.name, "/");
    1122:	ldr	r7, [pc, #64]	; (1164 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x60>)
    num_storage = sd_getFSCount();
    1124:	str.w	r3, [r4, #408]	; 0x198
    index_entries_ = 0;
    1128:	str.w	r5, [r4, #424]	; 0x1a8
    for(int ii=0; ii<num_storage; ii++)
    112c:	ldr.w	r3, [r4, #408]	; 0x198
    1130:	cmp	r5, r3
    1132:	blt.n	1138 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x34>
  }
    1134:	add	sp, #284	; 0x11c
    1136:	pop	{r4, r5, r6, r7, pc}
      r.child = 0;
    1138:	movs	r3, #0
      strcpy(r.name, "/");
    113a:	mov	r1, r7
    113c:	add	r0, sp, #24
      r.store = ii; // 
    113e:	strh.w	r5, [sp, #14]
      r.parent = 0xFFFFFFFFUL; // 
    1142:	str	r6, [sp, #0]
    for(int ii=0; ii<num_storage; ii++)
    1144:	adds	r5, #1
      r.sibling = 0;
    1146:	strd	r3, r3, [sp, #4]
      r.isdir = true;
    114a:	movs	r3, #1
    114c:	strh.w	r3, [sp, #12]
      strcpy(r.name, "/");
    1150:	bl	ed14 <strcpy>
      AppendIndexRecord(r);
    1154:	mov	r1, sp
    1156:	mov	r0, r4
    1158:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    for(int ii=0; ii<num_storage; ii++)
    115c:	b.n	112c <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]+0x28>
    115e:	nop
    1160:	.word	0x2000112d
    1164:	.word	0x20000d7e

00001168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>:
  {
    1168:	push	{r3, r4, r5, r6, r7, lr}
    memset(&ret, 0, sizeof(ret));
    116a:	mov.w	r7, #280	; 0x118
  {
    116e:	mov	r4, r1
    1170:	mov	r6, r2
    memset(&ret, 0, sizeof(ret));
    1172:	movs	r1, #0
    1174:	mov	r2, r7
  {
    1176:	mov	r5, r0
    memset(&ret, 0, sizeof(ret));
    1178:	bl	a210 <memset>
    if (i > index_entries_) 
    117c:	ldr.w	r3, [r4, #424]	; 0x1a8
    1180:	cmp	r3, r6
    1182:	bcc.n	11a2 <MTPStorage_SD::ReadIndexRecord(unsigned long)+0x3a>
    OpenIndex();
    1184:	mov	r0, r4
    index_.seekSet(sizeof(ret) * i);
    1186:	adds	r4, #184	; 0xb8
    OpenIndex();
    1188:	bl	102c <MTPStorage_SD::OpenIndex()>
    index_.seekSet(sizeof(ret) * i);
    118c:	mul.w	r2, r7, r6
    1190:	movs	r3, #0
    1192:	mov	r0, r4
    1194:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    index_.read((char *)&ret, sizeof(ret));
    1198:	mov	r2, r7
    119a:	mov	r1, r5
    119c:	mov	r0, r4
    119e:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
  }
    11a2:	mov	r0, r5
    11a4:	pop	{r3, r4, r5, r6, r7, pc}

000011a6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)>:
  {
    11a6:	push	{r4, r5, lr}
    11a8:	mov	r4, r0
    11aa:	sub	sp, #284	; 0x11c
    { if (next_ == 0) return 0;
    11ac:	ldr.w	r5, [r4, #432]	; 0x1b0
    11b0:	cbz	r5, 11d0 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x2a>
      Record r = ReadIndexRecord(ret);
    11b2:	mov	r2, r5
    11b4:	mov	r1, r4
    11b6:	mov	r0, sp
    11b8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      if (follow_sibling_) 
    11bc:	ldrb.w	r3, [r4, #436]	; 0x1b4
    11c0:	cbz	r3, 11d6 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x30>
      { next_ = r.sibling;
    11c2:	ldr	r3, [sp, #8]
        if (next_ >= index_entries_) next_ = 0;
    11c4:	str.w	r3, [r4, #432]	; 0x1b0
      if (r.name[0]) return ret;
    11c8:	ldrb.w	r3, [sp, #24]
    11cc:	cmp	r3, #0
    11ce:	beq.n	11ac <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x6>
  }
    11d0:	mov	r0, r5
    11d2:	add	sp, #284	; 0x11c
    11d4:	pop	{r4, r5, pc}
      { next_++;
    11d6:	ldr.w	r1, [r4, #432]	; 0x1b0
        if (next_ >= index_entries_) next_ = 0;
    11da:	ldr.w	r2, [r4, #424]	; 0x1a8
      { next_++;
    11de:	adds	r1, #1
        if (next_ >= index_entries_) next_ = 0;
    11e0:	cmp	r1, r2
    11e2:	it	cc
    11e4:	movcc	r3, r1
    11e6:	b.n	11c4 <MTPStorage_SD::GetNextObjectHandle(unsigned long)+0x1e>

000011e8 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)>:
  {
    11e8:	push	{r4, r5, lr}
    11ea:	sub	sp, #308	; 0x134
    11ec:	mov	r5, r2
    Record r = ReadIndexRecord(handle);
    11ee:	mov	r2, r1
    11f0:	mov	r1, r0
    11f2:	add	r0, sp, #24
  {
    11f4:	mov	r4, r3
    Record r = ReadIndexRecord(handle);
    11f6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strcpy(name, r.name);
    11fa:	add	r1, sp, #48	; 0x30
    11fc:	mov	r0, r5
    11fe:	bl	ed14 <strcpy>
    *parent = r.parent;
    1202:	ldr	r3, [sp, #320]	; 0x140
    1204:	ldr	r2, [sp, #24]
    1206:	str	r2, [r3, #0]
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    1208:	ldrb.w	r3, [sp, #36]	; 0x24
    120c:	cmp	r3, #0
    120e:	bne.n	128c <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xa4>
    1210:	ldr	r3, [sp, #28]
          FS_HOUR(r.cptime),FS_MINUTE(r.cptime),FS_SECOND(r.cptime));
    1212:	ldrh.w	r1, [sp, #42]	; 0x2a
    *store = r.store;
    1216:	ldrh.w	r2, [sp, #38]	; 0x26
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
    121a:	and.w	r0, r1, #31
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    121e:	str	r3, [r4, #0]
    *store = r.store;
    1220:	ldr	r3, [sp, #324]	; 0x144
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    1222:	lsls	r0, r0, #1
    *store = r.store;
    1224:	strh	r2, [r3, #0]
          FS_YEAR(r.cpdate),FS_MONTH(r.cpdate),FS_DAY(r.cpdate),
    1226:	ldrh.w	r2, [sp, #40]	; 0x28
    snprintf(create,32,"%04u%02u%02uT%02u%02u%02u",
    122a:	str	r0, [sp, #16]
    122c:	ubfx	r0, r1, #5, #6
    1230:	lsrs	r1, r1, #11
  return 1980 + (fatDate >> 9);
    1232:	lsrs	r3, r2, #9
    1234:	str	r0, [sp, #12]
    1236:	str	r1, [sp, #8]
    1238:	and.w	r1, r2, #31
    123c:	ubfx	r2, r2, #5, #4
    1240:	addw	r3, r3, #1980	; 0x7bc
    1244:	str	r1, [sp, #4]
    1246:	movs	r1, #32
    1248:	str	r2, [sp, #0]
    124a:	ldr	r0, [sp, #328]	; 0x148
    124c:	ldr	r2, [pc, #68]	; (1294 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    124e:	bl	e8cc <sniprintf>
          FS_HOUR(r.mptime),FS_MINUTE(r.mptime),FS_SECOND(r.mptime));
    1252:	ldrh.w	r1, [sp, #46]	; 0x2e
          FS_YEAR(r.mpdate),FS_MONTH(r.mpdate),FS_DAY(r.mpdate),
    1256:	ldrh.w	r2, [sp, #44]	; 0x2c
  return 2*(fatTime & 0X1F);
    125a:	and.w	r0, r1, #31
  return 1980 + (fatDate >> 9);
    125e:	lsrs	r3, r2, #9
    snprintf(modify,32,"%04u%02u%02uT%02u%02u%02u",
    1260:	lsls	r0, r0, #1
    1262:	addw	r3, r3, #1980	; 0x7bc
    1266:	str	r0, [sp, #16]
    1268:	ubfx	r0, r1, #5, #6
    126c:	lsrs	r1, r1, #11
    126e:	str	r0, [sp, #12]
    1270:	str	r1, [sp, #8]
    1272:	and.w	r1, r2, #31
    1276:	ubfx	r2, r2, #5, #4
    127a:	ldr	r0, [sp, #332]	; 0x14c
    127c:	str	r1, [sp, #4]
    127e:	movs	r1, #32
    1280:	str	r2, [sp, #0]
    1282:	ldr	r2, [pc, #16]	; (1294 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0xac>)
    1284:	bl	e8cc <sniprintf>
  }
    1288:	add	sp, #308	; 0x134
    128a:	pop	{r4, r5, pc}
    *size = r.isdir ? 0xFFFFFFFFUL : r.child;
    128c:	mov.w	r3, #4294967295
    1290:	b.n	1212 <MTPStorage_SD::GetObjectInfo(unsigned long, char*, unsigned long*, unsigned long*, unsigned short*, char*, char*)+0x2a>
    1292:	nop
    1294:	.word	0x20001113

00001298 <MTPStorage_SD::GetSize(unsigned long)>:
  {
    1298:	push	{lr}
    129a:	sub	sp, #284	; 0x11c
    129c:	mov	r2, r1
    return ReadIndexRecord(handle).child;
    129e:	mov	r1, r0
    12a0:	mov	r0, sp
    12a2:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  }
    12a6:	ldr	r0, [sp, #4]
    12a8:	add	sp, #284	; 0x11c
    12aa:	ldr.w	pc, [sp], #4

000012ae <MTPStorage_SD::close()>:
    return m_fFile ? m_fFile->fileSize() :
    12ae:	ldr.w	r3, [r0, #320]	; 0x140
  {
    12b2:	push	{r4, r5, r6, lr}
    12b4:	mov	r4, r0
    12b6:	sub	sp, #288	; 0x120
    12b8:	cbz	r3, 1324 <MTPStorage_SD::close()+0x76>
    12ba:	ldr	r5, [r3, #28]
    file_.getCreateDateTime(&cpdate,&cptime);
    12bc:	add.w	r6, r4, #264	; 0x108
    12c0:	add.w	r2, sp, #2
    12c4:	mov	r1, sp
    12c6:	mov	r0, r6
    12c8:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.getCreateDateTime(&mpdate,&mptime);
    12cc:	add.w	r2, sp, #6
    12d0:	add	r1, sp, #4
    12d2:	mov	r0, r6
    12d4:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    file_.close();
    12d8:	mov	r0, r6
    12da:	bl	8750 <FsBaseFile::close()>
    Record r = ReadIndexRecord(open_file_);
    12de:	ldr.w	r2, [r4, #420]	; 0x1a4
    12e2:	mov	r1, r4
    12e4:	add	r0, sp, #8
    12e6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    r.cpdate=cpdate;
    12ea:	ldrh.w	r3, [sp]
    WriteIndexRecord(open_file_, r);
    12ee:	add	r2, sp, #8
    12f0:	ldr.w	r1, [r4, #420]	; 0x1a4
    r.cpdate=cpdate;
    12f4:	strh.w	r3, [sp, #24]
    WriteIndexRecord(open_file_, r);
    12f8:	mov	r0, r4
    r.cptime=cptime;
    12fa:	ldrh.w	r3, [sp, #2]
    uint32_t size = (uint32_t) file_.size();
    12fe:	str	r5, [sp, #12]
    r.cptime=cptime;
    1300:	strh.w	r3, [sp, #26]
    r.mpdate=mpdate;
    1304:	ldrh.w	r3, [sp, #4]
    1308:	strh.w	r3, [sp, #28]
    r.mptime=mptime;
    130c:	ldrh.w	r3, [sp, #6]
    1310:	strh.w	r3, [sp, #30]
    WriteIndexRecord(open_file_, r);
    1314:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    open_file_ = 0xFFFFFFFEUL;
    1318:	mvn.w	r3, #1
    131c:	str.w	r3, [r4, #420]	; 0x1a4
  }
    1320:	add	sp, #288	; 0x120
    1322:	pop	{r4, r5, r6, pc}
    1324:	ldr.w	r5, [r0, #324]	; 0x144
           m_xFile ? m_xFile->fileSize() : 0;
    1328:	cmp	r5, #0
    132a:	beq.n	12bc <MTPStorage_SD::close()+0xe>
  uint64_t fileSize() const {return m_validLength;}
    132c:	ldr	r5, [r5, #16]
    132e:	b.n	12bc <MTPStorage_SD::close()+0xe>

00001330 <MTPStorage_SD::ConstructFilename(int, char*, int)>:
  {
    1330:	push	{r4, r5, r6, lr}
    1332:	sub	sp, #280	; 0x118
    1334:	mov	r6, r0
    1336:	mov	r4, r2
    Record tmp = ReadIndexRecord(i);
    1338:	mov	r2, r1
    133a:	mov	r1, r0
    133c:	mov	r0, sp
  {
    133e:	mov	r5, r3
    Record tmp = ReadIndexRecord(i);
    1340:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (tmp.parent==0xFFFFFFFFUL) //flags the root object
    1344:	ldr	r1, [sp, #0]
    1346:	adds	r3, r1, #1
    1348:	bne.n	135a <MTPStorage_SD::ConstructFilename(int, char*, int)+0x2a>
    { strcpy(out, "/");
    134a:	ldr	r1, [pc, #64]	; (138c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    134c:	mov	r0, r4
    134e:	bl	ed14 <strcpy>
      return tmp.store;
    1352:	ldrh.w	r0, [sp, #14]
  }
    1356:	add	sp, #280	; 0x118
    1358:	pop	{r4, r5, r6, pc}
    { ConstructFilename(tmp.parent, out, len);
    135a:	mov	r3, r5
    135c:	mov	r2, r4
    135e:	mov	r0, r6
    1360:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if (out[strlen(out)-1] != '/') strlcat(out, "/",len);
    1364:	mov	r0, r4
    1366:	bl	edd0 <strlen>
    136a:	add	r0, r4
    136c:	ldrb.w	r3, [r0, #-1]
    1370:	cmp	r3, #47	; 0x2f
    1372:	beq.n	137e <MTPStorage_SD::ConstructFilename(int, char*, int)+0x4e>
    1374:	mov	r2, r5
    1376:	ldr	r1, [pc, #20]	; (138c <MTPStorage_SD::ConstructFilename(int, char*, int)+0x5c>)
    1378:	mov	r0, r4
    137a:	bl	eb68 <strlcat>
      strlcat(out, tmp.name,len);
    137e:	mov	r2, r5
    1380:	add	r1, sp, #24
    1382:	mov	r0, r4
    1384:	bl	eb68 <strlcat>
    1388:	b.n	1352 <MTPStorage_SD::ConstructFilename(int, char*, int)+0x22>
    138a:	nop
    138c:	.word	0x20000d7e

00001390 <MTPStorage_SD::rename(unsigned long, char const*)>:
  { char oldName[MAX_FILENAME_LEN];
    1390:	push	{r4, r5, r6, r7, lr}
    1392:	subw	sp, sp, #1052	; 0x41c
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1396:	mov.w	r3, #256	; 0x100
  { char oldName[MAX_FILENAME_LEN];
    139a:	mov	r4, r0
    139c:	mov	r5, r1
    139e:	mov	r7, r2
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13a0:	mov	r2, sp
    13a2:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(oldName);
    13a6:	mov	r1, sp
    uint16_t store = ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    13a8:	mov	r6, r0
    Serial.println(oldName);
    13aa:	ldr	r0, [pc, #120]	; (1424 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13ac:	bl	d3c <Print::println(char const*)>
    Record p1 = ReadIndexRecord(handle);
    13b0:	mov	r2, r5
    13b2:	mov	r1, r4
    13b4:	add	r0, sp, #768	; 0x300
    13b6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(temp,p1.name,MAX_FILENAME_LEN);
    13ba:	mov.w	r2, #256	; 0x100
    13be:	add	r1, sp, #792	; 0x318
    13c0:	add	r0, sp, #512	; 0x200
    13c2:	bl	ebae <strlcpy>
    strlcpy(p1.name,name,MAX_FILENAME_LEN);
    13c6:	mov.w	r2, #256	; 0x100
    13ca:	mov	r1, r7
    13cc:	add	r0, sp, #792	; 0x318
    13ce:	bl	ebae <strlcpy>
    WriteIndexRecord(handle, p1);
    13d2:	add	r2, sp, #768	; 0x300
    13d4:	mov	r1, r5
    13d6:	mov	r0, r4
    13d8:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    13dc:	mov.w	r3, #256	; 0x100
    13e0:	mov	r1, r5
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    13e2:	add.w	r6, r4, r6, lsl #2
    13e6:	add.w	r2, sp, r3
    13ea:	mov	r0, r4
    13ec:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Serial.println(newName);
    13f0:	add	r1, sp, #256	; 0x100
    13f2:	ldr	r0, [pc, #48]	; (1424 <MTPStorage_SD::rename(unsigned long, char const*)+0x94>)
    13f4:	bl	d3c <Print::println(char const*)>
    13f8:	ldr	r0, [r6, #88]	; 0x58
    13fa:	add	r2, sp, #256	; 0x100
    13fc:	mov	r1, sp
    13fe:	bl	da2 <FsVolume::rename(char const*, char const*)>
    if (sd_rename(store,oldName,newName)) return true;
    1402:	mov	r6, r0
    1404:	cbnz	r0, 141c <MTPStorage_SD::rename(unsigned long, char const*)+0x8c>
    strlcpy(p1.name,temp,MAX_FILENAME_LEN);
    1406:	mov.w	r2, #256	; 0x100
    140a:	add	r1, sp, #512	; 0x200
    140c:	add	r0, sp, #792	; 0x318
    140e:	bl	ebae <strlcpy>
    WriteIndexRecord(handle, p1);
    1412:	add	r2, sp, #768	; 0x300
    1414:	mov	r1, r5
    1416:	mov	r0, r4
    1418:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    141c:	mov	r0, r6
    141e:	addw	sp, sp, #1052	; 0x41c
    1422:	pop	{r4, r5, r6, r7, pc}
    1424:	.word	0x20001d30

00001428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>:
    if (open_file_ == i && mode_ == mode) return;
    1428:	ldr.w	r3, [r0, #420]	; 0x1a4
    142c:	cmp	r3, r1
  {
    142e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1432:	mov	r4, r0
    1434:	sub	sp, #336	; 0x150
    1436:	mov	r6, r1
    1438:	mov	r5, r2
    if (open_file_ == i && mode_ == mode) return;
    143a:	bne.n	1444 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x1c>
    143c:	ldr.w	r3, [r0, #416]	; 0x1a0
    1440:	cmp	r3, r2
    1442:	beq.n	149c <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x74>
    if(file_.isOpen()) {file_.close();}
    1444:	add.w	r8, r4, #264	; 0x108
    uint16_t store = ConstructFilename(i, filename, MAX_FILENAME_LEN);
    1448:	mov.w	r3, #256	; 0x100
    144c:	add	r2, sp, #80	; 0x50
    144e:	mov	r1, r6
    1450:	mov	r0, r4
    1452:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1456:	mov	r7, r0
    if(file_.isOpen()) {file_.close();}
    1458:	mov	r0, r8
    145a:	bl	e88 <FsBaseFile::isOpen() const>
    145e:	cbz	r0, 1466 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)+0x3e>
    1460:	mov	r0, r8
    1462:	bl	8750 <FsBaseFile::close()>
      FsFile sd_open(uint32_t store, const char *filename, uint32_t mode=O_READ) { return sdx[store]->open(filename,mode);  }
    1466:	add.w	r7, r4, r7, lsl #2
    146a:	add	r2, sp, #80	; 0x50
    146c:	mov	r3, r5
    146e:	mov	r0, sp
    1470:	ldr	r1, [r7, #88]	; 0x58
    1472:	bl	8984 <FsVolume::open(char const*, int)>
    1476:	ldr	r3, [sp, #4]
    1478:	add	r1, sp, #16
    147a:	mov	r0, r8
    147c:	str.w	r3, [r4, #252]	; 0xfc
    1480:	ldr	r3, [sp, #8]
    1482:	str.w	r3, [r4, #256]	; 0x100
    1486:	ldrb.w	r3, [sp, #12]
    148a:	strb.w	r3, [r4, #260]	; 0x104
    148e:	bl	877a <FsBaseFile::operator=(FsBaseFile const&)>
    file_=sd_open(store,filename,mode);
    1492:	mov	r0, sp
    1494:	bl	f20 <FsFile::~FsFile()>
    mode_ = mode;
    1498:	strd	r5, r6, [r4, #416]	; 0x1a0
  }
    149c:	add	sp, #336	; 0x150
    149e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000014a2 <MTPStorage_SD::read(unsigned long, unsigned long, char*, unsigned long)>:
  {
    14a2:	push	{r4, r5, r6, lr}
    14a4:	mov	r4, r0
    14a6:	mov	r6, r2
    14a8:	mov	r5, r3
    OpenFileByIndex(handle);
    14aa:	movs	r2, #0
    file_.seekSet(pos);
    14ac:	add.w	r4, r4, #264	; 0x108
    OpenFileByIndex(handle);
    14b0:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    file_.seekSet(pos);
    14b4:	mov	r2, r6
    14b6:	movs	r3, #0
    14b8:	mov	r0, r4
    14ba:	bl	ed4 <FsBaseFile::seekSet(unsigned long long)>
    file_.read(out,bytes);
    14be:	ldr	r2, [sp, #16]
    14c0:	mov	r1, r5
    14c2:	mov	r0, r4
    14c4:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
  }
    14c8:	pop	{r4, r5, r6, pc}

000014ca <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)>:
  {
    14ca:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (parent == 0xFFFFFFFFUL) parent = store;
    14ce:	cmp.w	r2, #4294967295
    14d2:	ite	ne
    14d4:	movne	r8, r2
    14d6:	moveq	r8, r1
  {
    14d8:	sub.w	sp, sp, #816	; 0x330
    14dc:	mov	r4, r0
    14de:	mov	r6, r1
    Record p = ReadIndexRecord(parent);
    14e0:	mov	r2, r8
    14e2:	mov	r1, r0
    14e4:	add	r0, sp, #256	; 0x100
  {
    14e6:	mov	r7, r3
    Record p = ReadIndexRecord(parent);
    14e8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    strlcpy(r.name, filename,MAX_FILENAME_LEN);
    14ec:	mov.w	r2, #256	; 0x100
    14f0:	ldr	r1, [sp, #840]	; 0x348
    14f2:	add	r0, sp, #560	; 0x230
    14f4:	bl	ebae <strlcpy>
    r.store = p.store;
    14f8:	ldrh.w	r3, [sp, #270]	; 0x10e
    r.sibling = p.child;
    14fc:	ldr	r2, [sp, #260]	; 0x104
    ret = p.child = AppendIndexRecord(r);
    14fe:	add	r1, sp, #536	; 0x218
    r.store = p.store;
    1500:	strh.w	r3, [sp, #550]	; 0x226
    r.child = 0;
    1504:	movs	r3, #0
    ret = p.child = AppendIndexRecord(r);
    1506:	mov	r0, r4
    r.sibling = p.child;
    1508:	str	r2, [sp, #544]	; 0x220
    r.child = 0;
    150a:	str	r3, [sp, #540]	; 0x21c
    r.parent = parent;
    150c:	str.w	r8, [sp, #536]	; 0x218
    r.isdir = folder;
    1510:	strb.w	r7, [sp, #548]	; 0x224
    r.mpdate = 0;
    1514:	strd	r3, r3, [sp, #552]	; 0x228
    r.scanned = 1;
    1518:	movs	r3, #1
    151a:	strb.w	r3, [sp, #549]	; 0x225
    ret = p.child = AppendIndexRecord(r);
    151e:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    WriteIndexRecord(parent, p);
    1522:	add	r2, sp, #256	; 0x100
    ret = p.child = AppendIndexRecord(r);
    1524:	mov	r5, r0
    1526:	str	r0, [sp, #260]	; 0x104
    WriteIndexRecord(parent, p);
    1528:	mov	r1, r8
    152a:	mov	r0, r4
    152c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    if (folder) 
    1530:	cbz	r7, 1554 <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x8a>
      ConstructFilename(ret, filename, MAX_FILENAME_LEN);
    1532:	mov	r2, sp
    1534:	mov	r1, r5
    1536:	mov.w	r3, #256	; 0x100
    153a:	mov	r0, r4
    153c:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_mkdir(store,filename);
    1540:	mov	r2, sp
    1542:	mov	r1, r6
    1544:	adds	r0, r4, #4
    1546:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
  }
    154a:	mov	r0, r5
    154c:	add.w	sp, sp, #816	; 0x330
    1550:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      OpenFileByIndex(ret, (O_RDWR | O_CREAT));
    1554:	movw	r2, #514	; 0x202
    1558:	mov	r1, r5
    155a:	mov	r0, r4
    155c:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
    return ret;
    1560:	b.n	154a <MTPStorage_SD::Create(unsigned long, unsigned long, bool, char const*)+0x80>

00001562 <MTPStorage_SD::GenerateIndex(unsigned long)>:
  { if (index_generated) return; 
    1562:	ldrb.w	r3, [r0, #428]	; 0x1ac
    1566:	cbnz	r3, 156c <MTPStorage_SD::GenerateIndex(unsigned long)+0xa>
    1568:	b.w	1104 <MTPStorage_SD::GenerateIndex(unsigned long) [clone .part.0]>
  }
    156c:	bx	lr

0000156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>:
  { if (i == 0xFFFFFFFFUL) i = store;
    156e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1572:	cmp.w	r2, #4294967295
    1576:	ite	ne
    1578:	movne	r6, r2
    157a:	moveq	r6, r1
    157c:	sub.w	sp, sp, #564	; 0x234
    Record record = ReadIndexRecord(i);
    1580:	mov	r1, r0
  { if (i == 0xFFFFFFFFUL) i = store;
    1582:	mov	r4, r0
    Record record = ReadIndexRecord(i);
    1584:	mov	r2, r6
    1586:	mov	r0, sp
    1588:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if (record.isdir && !record.scanned) {
    158c:	ldrb.w	r3, [sp, #12]
    1590:	cmp	r3, #0
    1592:	beq.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
    1594:	ldrb.w	r5, [sp, #13]
    1598:	cmp	r5, #0
    159a:	bne.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
      if (!file_.isOpen()) return;
    159c:	add.w	r8, r4, #264	; 0x108
      OpenFileByIndex(i);
    15a0:	mov	r0, r4
    15a2:	mov	r2, r5
    15a4:	mov	r1, r6
    15a6:	bl	1428 <MTPStorage_SD::OpenFileByIndex(unsigned long, unsigned long)>
      if (!file_.isOpen()) return;
    15aa:	mov	r0, r8
    15ac:	bl	e88 <FsBaseFile::isOpen() const>
    15b0:	cmp	r0, #0
    15b2:	beq.n	168c <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x11e>
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
    15b4:	mov	r9, r5
    FsFile tmpFile;
    15b6:	add	r0, sp, #280	; 0x118
    15b8:	add.w	r7, r4, #344	; 0x158
    15bc:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    15c0:	movs	r2, #0
    15c2:	mov	r1, r8
    15c4:	add	r0, sp, #296	; 0x128
    15c6:	bl	8850 <FsBaseFile::openNext(FsBaseFile*, int)>
    15ca:	ldr	r3, [sp, #284]	; 0x11c
    15cc:	add	r1, sp, #296	; 0x128
    15ce:	mov	r0, r7
    15d0:	str.w	r3, [r4, #332]	; 0x14c
    15d4:	ldr	r3, [sp, #288]	; 0x120
    15d6:	str.w	r3, [r4, #336]	; 0x150
    15da:	ldrb.w	r3, [sp, #292]	; 0x124
    15de:	strb.w	r3, [r4, #340]	; 0x154
    15e2:	bl	877a <FsBaseFile::operator=(FsBaseFile const&)>
        child_=file_.openNextFile();
    15e6:	add	r0, sp, #280	; 0x118
    15e8:	bl	f20 <FsFile::~FsFile()>
        if(!child_.isOpen()) break;
    15ec:	mov	r0, r7
    15ee:	bl	e88 <FsBaseFile::isOpen() const>
    15f2:	cmp	r0, #0
    15f4:	beq.n	167a <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x10c>
        r.store = record.store;
    15f6:	ldrh.w	r3, [sp, #14]
    return BaseFile::isDir();
    15fa:	mov	r0, r7
        r.parent = i;
    15fc:	str	r6, [sp, #280]	; 0x118
        r.store = record.store;
    15fe:	strh.w	r3, [sp, #294]	; 0x126
        r.sibling = sibling;
    1602:	str	r5, [sp, #288]	; 0x120
    1604:	bl	e66 <FsBaseFile::isDir() const>
        r.isdir = child_.isDirectory();
    1608:	strb.w	r0, [sp, #292]	; 0x124
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    160c:	cbnz	r0, 1662 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf4>
    return m_fFile ? m_fFile->fileSize() :
    160e:	ldr.w	r3, [r4, #400]	; 0x190
    1612:	cbz	r3, 1656 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xe8>
    1614:	ldr	r3, [r3, #28]
        child_.getName(r.name,MAX_FILENAME_LEN);
    1616:	mov.w	r2, #256	; 0x100
    161a:	add	r1, sp, #304	; 0x130
    161c:	mov	r0, r7
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    161e:	str	r3, [sp, #284]	; 0x11c
        r.scanned = false;
    1620:	strb.w	r9, [sp, #293]	; 0x125
        child_.getName(r.name,MAX_FILENAME_LEN);
    1624:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        child_.getCreateDateTime(&r.cpdate, &r.cptime);
    1628:	add.w	r2, sp, #298	; 0x12a
    162c:	add	r1, sp, #296	; 0x128
    162e:	mov	r0, r7
    1630:	bl	e52 <FsBaseFile::getCreateDateTime(unsigned short*, unsigned short*)>
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
    1634:	ldr.w	r0, [r4, #400]	; 0x190
    1638:	cbz	r0, 1666 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xf8>
    163a:	add.w	r2, sp, #302	; 0x12e
    163e:	add	r1, sp, #300	; 0x12c
    1640:	bl	7682 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
        sibling = AppendIndexRecord(r);
    1644:	add	r1, sp, #280	; 0x118
    1646:	mov	r0, r4
    1648:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    164c:	mov	r5, r0
        child_.close();
    164e:	mov	r0, r7
    1650:	bl	8750 <FsBaseFile::close()>
      }
    1654:	b.n	15b6 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0x48>
    1656:	ldr.w	r3, [r4, #404]	; 0x194
           m_xFile ? m_xFile->fileSize() : 0;
    165a:	cmp	r3, #0
    165c:	beq.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    165e:	ldr	r3, [r3, #16]
    1660:	b.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
        r.child = r.isdir ? 0 : (uint32_t) child_.size();
    1662:	movs	r3, #0
    1664:	b.n	1616 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xa8>
    1666:	ldr.w	r0, [r4, #404]	; 0x194
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
    166a:	cmp	r0, #0
    166c:	beq.n	1644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
    166e:	add.w	r2, sp, #302	; 0x12e
    1672:	add	r1, sp, #300	; 0x12c
    1674:	bl	59a6 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
    1678:	b.n	1644 <MTPStorage_SD::ScanDir(unsigned long, unsigned long)+0xd6>
      record.scanned = true;
    167a:	movs	r3, #1
      WriteIndexRecord(i, record);
    167c:	mov	r2, sp
    167e:	mov	r1, r6
    1680:	mov	r0, r4
      record.scanned = true;
    1682:	strb.w	r3, [sp, #13]
      record.child = sibling;
    1686:	str	r5, [sp, #4]
      WriteIndexRecord(i, record);
    1688:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    168c:	add.w	sp, sp, #564	; 0x234
    1690:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00001694 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>:
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    1694:	push	{r4, lr}
    { if (parent == 0xFFFFFFFFUL) parent = store; // As per initizalization
    1696:	cmp.w	r2, #4294967295
    169a:	it	eq
    169c:	moveq	r2, r1
  void MTPStorage_SD::StartGetObjectHandles(uint32_t store, uint32_t parent) 
    169e:	sub	sp, #288	; 0x120
    16a0:	mov	r4, r0
      ScanDir(store, parent);
    16a2:	str	r2, [sp, #4]
    16a4:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      follow_sibling_ = true;
    16a8:	movs	r3, #1
      next_ = ReadIndexRecord(parent).child;
    16aa:	ldr	r2, [sp, #4]
    16ac:	mov	r1, r4
    16ae:	add	r0, sp, #8
      follow_sibling_ = true;
    16b0:	strb.w	r3, [r4, #436]	; 0x1b4
      next_ = ReadIndexRecord(parent).child;
    16b4:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    16b8:	ldr	r3, [sp, #12]
    16ba:	str.w	r3, [r4, #432]	; 0x1b0
  }
    16be:	add	sp, #288	; 0x120
    16c0:	pop	{r4, pc}

000016c2 <MTPStorage_SD::ScanAll(unsigned long)>:
  { if (all_scanned_) return;
    16c2:	push	{r4, r5, r6, lr}
    16c4:	ldrb.w	r4, [r0, #429]	; 0x1ad
    16c8:	mov	r5, r0
    16ca:	mov	r6, r1
    16cc:	cbnz	r4, 16e0 <MTPStorage_SD::ScanAll(unsigned long)+0x1e>
    all_scanned_ = true;
    16ce:	movs	r3, #1
    16d0:	strb.w	r3, [r0, #429]	; 0x1ad
    GenerateIndex(store);
    16d4:	bl	1562 <MTPStorage_SD::GenerateIndex(unsigned long)>
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16d8:	ldr.w	r3, [r5, #424]	; 0x1a8
    16dc:	cmp	r4, r3
    16de:	bcc.n	16e2 <MTPStorage_SD::ScanAll(unsigned long)+0x20>
  }
    16e0:	pop	{r4, r5, r6, pc}
    for (uint32_t i = 0; i < index_entries_; i++)  ScanDir(store,i);
    16e2:	mov	r2, r4
    16e4:	mov	r1, r6
    16e6:	mov	r0, r5
    16e8:	adds	r4, #1
    16ea:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
    16ee:	b.n	16d8 <MTPStorage_SD::ScanAll(unsigned long)+0x16>

000016f0 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)>:
  { 
    16f0:	push	{r4, r5, r6, lr}
    16f2:	mov	r5, r2
    16f4:	mov	r4, r0
    16f6:	mov	r6, r1
    GenerateIndex(store);
    16f8:	bl	1562 <MTPStorage_SD::GenerateIndex(unsigned long)>
    if (parent) 
    16fc:	cbz	r5, 170c <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long)+0x1c>
    16fe:	mov	r2, r5
    1700:	mov	r1, r6
    1702:	mov	r0, r4
  }
    1704:	ldmia.w	sp!, {r4, r5, r6, lr}
    1708:	b.w	1694 <MTPStorage_SD::StartGetObjectHandles(unsigned long, unsigned long) [clone .part.0]>
      ScanAll(store);
    170c:	mov	r1, r6
    170e:	mov	r0, r4
    1710:	bl	16c2 <MTPStorage_SD::ScanAll(unsigned long)>
      next_ = 1;
    1714:	movs	r3, #1
      follow_sibling_ = false;
    1716:	strb.w	r5, [r4, #436]	; 0x1b4
      next_ = 1;
    171a:	str.w	r3, [r4, #432]	; 0x1b0
  }
    171e:	pop	{r4, r5, r6, pc}

00001720 <MTPStorage_SD::removeFile(unsigned long, char*)>:
{ 
    1720:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1724:	mov	r4, r1
    1726:	sub.w	sp, sp, #764	; 0x2fc
    172a:	add.w	r1, r0, r1, lsl #2
    172e:	mov	r6, r0
  FsFile f1=sd_open(store,file,O_READ);
    1730:	adds	r7, r0, #4
    1732:	movs	r3, #0
    1734:	add	r0, sp, #8
    1736:	ldr	r1, [r1, #88]	; 0x58
{ 
    1738:	mov	r5, r2
    173a:	bl	8984 <FsVolume::open(char const*, int)>
    173e:	add	r0, sp, #24
    1740:	bl	e66 <FsBaseFile::isDir() const>
  if(f1.isDirectory())
    1744:	cmp	r0, #0
    1746:	beq.n	17ea <MTPStorage_SD::removeFile(unsigned long, char*)+0xca>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    1748:	ldr.w	r9, [pc, #172]	; 17f8 <MTPStorage_SD::removeFile(unsigned long, char*)+0xd8>
    FsFile f2;
    174c:	add	r0, sp, #88	; 0x58
    174e:	bl	f04 <FsFile::FsFile()>
    FsFile tmpFile;
    1752:	add	r0, sp, #168	; 0xa8
    1754:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1758:	movs	r2, #0
    175a:	add	r1, sp, #24
    175c:	add	r0, sp, #184	; 0xb8
    175e:	bl	8850 <FsBaseFile::openNext(FsBaseFile*, int)>
    1762:	ldr	r3, [sp, #172]	; 0xac
class StreamFile : public stream_t, public BaseFile {
    1764:	add	r1, sp, #184	; 0xb8
    1766:	add	r0, sp, #104	; 0x68
    1768:	str	r3, [sp, #92]	; 0x5c
    176a:	ldr	r3, [sp, #176]	; 0xb0
    176c:	str	r3, [sp, #96]	; 0x60
    176e:	ldrb.w	r3, [sp, #180]	; 0xb4
    1772:	strb.w	r3, [sp, #100]	; 0x64
    1776:	bl	877a <FsBaseFile::operator=(FsBaseFile const&)>
  operator bool() const {return isOpen();}
    177a:	add	r0, sp, #104	; 0x68
    177c:	bl	e88 <FsBaseFile::isOpen() const>
    1780:	mov	r8, r0
    while(f2=f1.openNextFile())
    1782:	add	r0, sp, #168	; 0xa8
    1784:	bl	f20 <FsFile::~FsFile()>
    1788:	cmp.w	r8, #0
    178c:	bne.n	17ac <MTPStorage_SD::removeFile(unsigned long, char*)+0x8c>
    sd_rmdir(store,file);
    178e:	mov	r2, r5
    1790:	mov	r1, r4
    1792:	mov	r0, r7
    1794:	bl	fdc <mSD_Base::sd_rmdir(unsigned long, char*)>
  }
    1798:	add	r0, sp, #88	; 0x58
    179a:	bl	f20 <FsFile::~FsFile()>
}
    179e:	add	r0, sp, #8
    17a0:	bl	f20 <FsFile::~FsFile()>
    17a4:	add.w	sp, sp, #764	; 0x2fc
    17a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    { f2.getName(fname,MAX_FILENAME_LEN);
    17ac:	add.w	r8, sp, #504	; 0x1f8
    17b0:	mov.w	r2, #256	; 0x100
    17b4:	add	r0, sp, #104	; 0x68
    17b6:	mov	r1, r8
    17b8:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
      snprintf(tname,MAX_FILENAME_LEN,"%s/%s",file,fname);
    17bc:	mov	r2, r9
    17be:	mov.w	r1, #256	; 0x100
    17c2:	mov	r3, r5
    17c4:	add	r0, sp, #248	; 0xf8
    17c6:	str.w	r8, [sp]
    17ca:	bl	e8cc <sniprintf>
    return BaseFile::isDir();
    17ce:	add	r0, sp, #104	; 0x68
    17d0:	bl	e66 <FsBaseFile::isDir() const>
      if(f2.isDirectory()) removeFile(store,tname); else sd_remove(store,tname);
    17d4:	add	r2, sp, #248	; 0xf8
    17d6:	mov	r1, r4
    17d8:	cbz	r0, 17e2 <MTPStorage_SD::removeFile(unsigned long, char*)+0xc2>
    17da:	mov	r0, r6
    17dc:	bl	1720 <MTPStorage_SD::removeFile(unsigned long, char*)>
    17e0:	b.n	1752 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    17e2:	mov	r0, r7
    17e4:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    17e8:	b.n	1752 <MTPStorage_SD::removeFile(unsigned long, char*)+0x32>
    sd_remove(store,file);
    17ea:	mov	r2, r5
    17ec:	mov	r1, r4
    17ee:	mov	r0, r7
    17f0:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    17f4:	b.n	179e <MTPStorage_SD::removeFile(unsigned long, char*)+0x7e>
    17f6:	nop
    17f8:	.word	0x2000110d

000017fc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>:
  bool MTPStorage_SD::DeleteObject(uint32_t object)
    17fc:	push	{r4, r5, r6, r7, lr}
    17fe:	subw	sp, sp, #1380	; 0x564
    1802:	mov	r4, r0
    1804:	mov	r5, r1
    ConstructFilename(object, filename, MAX_FILENAME_LEN);
    1806:	mov.w	r3, #256	; 0x100
    180a:	add	r2, sp, #280	; 0x118
    180c:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    Record r = ReadIndexRecord(object);
    1810:	mov	r2, r5
    1812:	mov	r1, r4
    1814:	add	r0, sp, #536	; 0x218
    1816:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    removeFile(r.store,filename);
    181a:	add	r2, sp, #280	; 0x118
    181c:	ldrh.w	r1, [sp, #550]	; 0x226
    1820:	mov	r0, r4
    1822:	bl	1720 <MTPStorage_SD::removeFile(unsigned long, char*)>
    r.name[0]=0;
    1826:	movs	r3, #0
    WriteIndexRecord(object, r);
    1828:	add	r2, sp, #536	; 0x218
    182a:	mov	r1, r5
    182c:	mov	r0, r4
    r.name[0]=0;
    182e:	strb.w	r3, [sp, #560]	; 0x230
    WriteIndexRecord(object, r);
    1832:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record t = ReadIndexRecord(r.parent);
    1836:	ldr	r2, [sp, #536]	; 0x218
    1838:	mov	r1, r4
    183a:	add	r0, sp, #816	; 0x330
    183c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(t.child==object)
    1840:	ldr	r6, [sp, #820]	; 0x334
    1842:	cmp	r5, r6
    1844:	bne.n	185a <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x5e>
      t.child = r.sibling;
    1846:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(r.parent, t);
    1848:	add	r2, sp, #816	; 0x330
    184a:	ldr	r1, [sp, #536]	; 0x218
      t.child = r.sibling;
    184c:	str	r3, [sp, #820]	; 0x334
      WriteIndexRecord(is, x);
    184e:	mov	r0, r4
    1850:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
  }
    1854:	addw	sp, sp, #1380	; 0x564
    1858:	pop	{r4, r5, r6, r7, pc}
      Record x = ReadIndexRecord(is);
    185a:	mov	r2, r6
    185c:	mov	r1, r4
    185e:	add.w	r0, sp, #1096	; 0x448
    1862:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    1866:	ldr.w	r7, [sp, #1104]	; 0x450
    186a:	cmp	r5, r7
    186c:	bne.n	187c <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x80>
      x.sibling = r.sibling;
    186e:	ldr	r3, [sp, #544]	; 0x220
      WriteIndexRecord(is, x);
    1870:	add.w	r2, sp, #1096	; 0x448
    1874:	mov	r1, r6
      x.sibling = r.sibling;
    1876:	str.w	r3, [sp, #1104]	; 0x450
      WriteIndexRecord(is, x);
    187a:	b.n	184e <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x52>
      while((x.sibling != object)) { is=x.sibling; x=ReadIndexRecord(is);}
    187c:	mov	r2, r7
    187e:	mov	r1, r4
    1880:	mov	r0, sp
    1882:	mov	r6, r7
    1884:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1888:	mov.w	r2, #280	; 0x118
    188c:	mov	r1, sp
    188e:	add.w	r0, sp, #1096	; 0x448
    1892:	bl	a254 <memcpy>
    1896:	b.n	1866 <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]+0x6a>

00001898 <MTPStorage_SD::DeleteObject(unsigned long)>:
  {
    1898:	push	{r3, lr}
    if(object==0xFFFFFFFFUL) return true; // don't do anything if trying to delete a root directory see below
    189a:	adds	r3, r1, #1
    189c:	beq.n	18a2 <MTPStorage_SD::DeleteObject(unsigned long)+0xa>
    189e:	bl	17fc <MTPStorage_SD::DeleteObject(unsigned long) [clone .part.0]>
  }
    18a2:	movs	r0, #1
    18a4:	pop	{r3, pc}

000018a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>:
  WriteIndexRecord(newHandle,p2);
  return true;
}
/************************************** mSD_Base *******************************/
bool mSD_Base::sd_copy(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{
    18a6:	push	{r4, r5, r6, lr}
    18a8:	add.w	r1, r0, r1, lsl #2
    18ac:	sub.w	sp, sp, #2208	; 0x8a0
    18b0:	mov	r5, r0
    18b2:	mov	r6, r3
    18b4:	ldr	r1, [r1, #84]	; 0x54
    18b6:	movs	r3, #0
    18b8:	mov	r0, sp
    18ba:	bl	8984 <FsVolume::open(char const*, int)>
    Serial.print("From "); Serial.print(store0); Serial.print(": ");Serial.println(oldfilename);
    Serial.print("To   "); Serial.print(store1); Serial.print(": ");Serial.println(newfilename);
  #endif

  FsFile f1 = sd_open(store0,oldfilename,O_READ); 
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    18be:	add	r0, sp, #16
    18c0:	bl	e88 <FsBaseFile::isOpen() const>
    18c4:	mov	r4, r0
    18c6:	cbnz	r0, 18de <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x38>
    18c8:	movw	r0, #690	; 0x2b2
    18cc:	bl	d00 <dbgPrint(unsigned short)>
  // close all files
  f1.close();
  f2.close();
  if(nd<0) {DBG_FAIL_MACRO; return false;}
  return true;
}
    18d0:	mov	r0, sp
    18d2:	bl	f20 <FsFile::~FsFile()>
    18d6:	mov	r0, r4
    18d8:	add.w	sp, sp, #2208	; 0x8a0
    18dc:	pop	{r4, r5, r6, pc}
    18de:	add.w	r5, r5, r6, lsl #2
    18e2:	movw	r3, #514	; 0x202
    18e6:	ldr.w	r2, [sp, #2224]	; 0x8b0
    18ea:	add	r0, sp, #80	; 0x50
    18ec:	ldr	r1, [r5, #84]	; 0x54
    18ee:	bl	8984 <FsVolume::open(char const*, int)>
  if(!f2.isOpen()) { f1.close(); {DBG_FAIL_MACRO; return false;}}
    18f2:	add	r0, sp, #96	; 0x60
    18f4:	bl	e88 <FsBaseFile::isOpen() const>
    18f8:	mov	r4, r0
    18fa:	cbnz	r0, 1912 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x6c>
    18fc:	add	r0, sp, #16
    18fe:	bl	8750 <FsBaseFile::close()>
    1902:	movw	r0, #693	; 0x2b5
    1906:	bl	d00 <dbgPrint(unsigned short)>
}
    190a:	add	r0, sp, #80	; 0x50
    190c:	bl	f20 <FsFile::~FsFile()>
    1910:	b.n	18d0 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x2a>
  int nd=-1;
    1912:	mov.w	r5, #4294967295
    return BaseFile::available();
    1916:	add	r0, sp, #16
    1918:	bl	e02 <FsBaseFile::available() const>
  while(f1.available()>0)
    191c:	cmp	r0, #0
    191e:	ble.n	1940 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    nd=f1.read(buffer,nbuf);
    1920:	mov.w	r2, #2048	; 0x800
    1924:	add	r1, sp, #160	; 0xa0
    1926:	add	r0, sp, #16
    1928:	bl	ebc <FsBaseFile::read(void*, unsigned int)>
    if(nd<0) break;     // read error
    192c:	subs	r5, r0, #0
    192e:	blt.n	1940 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x9a>
    f2.write(buffer,nd);
    1930:	mov	r2, r5
    1932:	add	r1, sp, #160	; 0xa0
    1934:	add	r0, sp, #96	; 0x60
    1936:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
    if(nd<nbuf) break;  // end of file
    193a:	cmp.w	r5, #2048	; 0x800
    193e:	bge.n	1916 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x70>
  f1.close();
    1940:	add	r0, sp, #16
    1942:	bl	8750 <FsBaseFile::close()>
  f2.close();
    1946:	add	r0, sp, #96	; 0x60
    1948:	bl	8750 <FsBaseFile::close()>
  if(nd<0) {DBG_FAIL_MACRO; return false;}
    194c:	cmp	r5, #0
    194e:	bge.n	190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>
    1950:	movw	r0, #705	; 0x2c1
    1954:	movs	r4, #0
    1956:	bl	d00 <dbgPrint(unsigned short)>
    195a:	b.n	190a <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)+0x64>

0000195c <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)>:
  { 
    195c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1960:	sub.w	sp, sp, #1360	; 0x550
    if(newParent==0xFFFFFFFFUL) newParent=newStore;
    1964:	cmp.w	r3, #4294967295
    1968:	ite	ne
    196a:	movne	r8, r3
    196c:	moveq	r8, r2
  { 
    196e:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1970:	mov	r2, r1
  { 
    1972:	mov	r7, r1
    Record p1 = ReadIndexRecord(handle);
    1974:	mov	r1, r0
    1976:	add	r0, sp, #520	; 0x208
    1978:	add	r6, sp, #544	; 0x220
    197a:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    197e:	mov	r2, r8
    1980:	mov	r1, r4
    1982:	add	r0, sp, #800	; 0x320
    1984:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir)
    1988:	ldrb.w	r5, [sp, #532]	; 0x214
    198c:	cbz	r5, 19d2 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x76>
      ScanDir(p1.store+1,handle);
    198e:	ldrh.w	r1, [sp, #534]	; 0x216
    1992:	mov	r2, r7
    1994:	mov	r0, r4
    1996:	adds	r1, #1
    1998:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    199c:	ldrb.w	r3, [sp, #532]	; 0x214
    19a0:	ldr	r2, [r4, #0]
    19a2:	mov	r0, r4
    19a4:	subs	r3, #0
    19a6:	str	r6, [sp, #0]
    19a8:	ldrh.w	r1, [sp, #814]	; 0x32e
    19ac:	ldr	r5, [r2, #44]	; 0x2c
    19ae:	it	ne
    19b0:	movne	r3, #1
    19b2:	mov	r2, r8
    19b4:	blx	r5
      CopyFiles(handle, p2.store, newHandle);
    19b6:	ldr	r3, [r4, #0]
      newHandle = Create(p2.store,newParent,p1.isdir,p1.name);
    19b8:	mov	r5, r0
      CopyFiles(handle, p2.store, newHandle);
    19ba:	ldrh.w	r2, [sp, #814]	; 0x32e
    19be:	ldr	r6, [r3, #84]	; 0x54
    19c0:	mov	r1, r7
    19c2:	mov	r3, r0
    19c4:	mov	r0, r4
    19c6:	blx	r6
  }
    19c8:	mov	r0, r5
    19ca:	add.w	sp, sp, #1360	; 0x550
    19ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      strlcpy(r.name, p1.name,MAX_FILENAME_LEN);
    19d2:	mov.w	r2, #256	; 0x100
    19d6:	mov	r1, r6
    19d8:	add.w	r0, sp, #1104	; 0x450
    19dc:	bl	ebae <strlcpy>
      r.store = p2.store;
    19e0:	ldrh.w	r3, [sp, #814]	; 0x32e
      newHandle = p2.child = AppendIndexRecord(r);
    19e4:	add.w	r1, sp, #1080	; 0x438
    19e8:	mov	r0, r4
      r.store = p2.store;
    19ea:	strh.w	r3, [sp, #1094]	; 0x446
      r.sibling = p2.child;
    19ee:	ldr	r3, [sp, #804]	; 0x324
      r.child = 0;
    19f0:	str.w	r5, [sp, #1084]	; 0x43c
      r.sibling = p2.child;
    19f4:	str.w	r3, [sp, #1088]	; 0x440
      r.isdir = 0;
    19f8:	strh.w	r5, [sp, #1092]	; 0x444
      r.parent = newParent;
    19fc:	str.w	r8, [sp, #1080]	; 0x438
      newHandle = p2.child = AppendIndexRecord(r);
    1a00:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
      WriteIndexRecord(newParent, p2);
    1a04:	add	r2, sp, #800	; 0x320
      newHandle = p2.child = AppendIndexRecord(r);
    1a06:	mov	r5, r0
      WriteIndexRecord(newParent, p2);
    1a08:	mov	r1, r8
      newHandle = p2.child = AppendIndexRecord(r);
    1a0a:	str	r0, [sp, #804]	; 0x324
      WriteIndexRecord(newParent, p2);
    1a0c:	mov	r0, r4
    1a0e:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a12:	add	r2, sp, #8
    1a14:	mov	r1, r7
    1a16:	mov.w	r3, #256	; 0x100
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a1a:	add	r7, sp, #264	; 0x108
      uint32_t store0 = ConstructFilename(handle,oldfilename,MAX_FILENAME_LEN);
    1a1c:	mov	r0, r4
    1a1e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    1a22:	mov	r6, r0
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a24:	mov	r2, r7
    1a26:	mov	r1, r5
    1a28:	mov.w	r3, #256	; 0x100
    1a2c:	mov	r0, r4
    1a2e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      sd_copy(store0,oldfilename,store1,newfilename);
    1a32:	add	r2, sp, #8
      uint32_t store1 = ConstructFilename(newHandle,newfilename,MAX_FILENAME_LEN);
    1a34:	mov	r3, r0
      sd_copy(store0,oldfilename,store1,newfilename);
    1a36:	mov	r1, r6
    1a38:	adds	r0, r4, #4
    1a3a:	str	r7, [sp, #0]
    1a3c:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    return newHandle;
    1a40:	b.n	19c8 <MTPStorage_SD::copy(unsigned long, unsigned long, unsigned long)+0x6c>

00001a42 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)>:
{ // assume handle and newHandle point to existing directories
    1a42:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1a46:	subw	sp, sp, #1644	; 0x66c
  if(newHandle==0xFFFFFFFFUL) newHandle=store;
    1a4a:	cmp.w	r3, #4294967295
    1a4e:	ite	ne
    1a50:	movne	r7, r3
    1a52:	moveq	r7, r2
{ // assume handle and newHandle point to existing directories
    1a54:	mov	r4, r0
  Record p1=ReadIndexRecord(handle);
    1a56:	mov	r2, r1
    1a58:	mov	r1, r0
    1a5a:	add	r0, sp, #520	; 0x208
    1a5c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  Record p2=ReadIndexRecord(newHandle);
    1a60:	mov	r2, r7
    1a62:	mov	r1, r4
    1a64:	add	r0, sp, #800	; 0x320
  Record p1=ReadIndexRecord(handle);
    1a66:	ldrh.w	r8, [sp, #534]	; 0x216
  uint32_t iy= 0;
    1a6a:	movs	r5, #0
  Record p2=ReadIndexRecord(newHandle);
    1a6c:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
  uint32_t ix= p1.child;
    1a70:	ldr	r6, [sp, #524]	; 0x20c
  while(ix)
    1a72:	cbnz	r6, 1a8a <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x48>
  WriteIndexRecord(newHandle,p2);
    1a74:	mov	r0, r4
    1a76:	add	r2, sp, #800	; 0x320
    1a78:	mov	r1, r7
  p2.child=iy;
    1a7a:	str	r5, [sp, #804]	; 0x324
  WriteIndexRecord(newHandle,p2);
    1a7c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
}
    1a80:	movs	r0, #1
    1a82:	addw	sp, sp, #1644	; 0x66c
    1a86:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Record px = ReadIndexRecord(ix) ;
    1a8a:	mov	r2, r6
    1a8c:	mov	r1, r4
    1a8e:	add.w	r0, sp, #1080	; 0x438
    1a92:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record py = px;
    1a96:	mov.w	r2, #280	; 0x118
    1a9a:	add.w	r1, sp, #1080	; 0x438
    1a9e:	add.w	r0, sp, #1360	; 0x550
    1aa2:	bl	a254 <memcpy>
    py.store = p2.store;
    1aa6:	ldrh.w	r3, [sp, #814]	; 0x32e
    iy = AppendIndexRecord(py);
    1aaa:	add.w	r1, sp, #1360	; 0x550
    1aae:	mov	r0, r4
    py.store = p2.store;
    1ab0:	strh.w	r3, [sp, #1374]	; 0x55e
    py.sibling = iy;
    1ab4:	str.w	r5, [sp, #1368]	; 0x558
    py.parent = newHandle;
    1ab8:	str.w	r7, [sp, #1360]	; 0x550
    iy = AppendIndexRecord(py);
    1abc:	bl	10ea <MTPStorage_SD::AppendIndexRecord(Record const&)>
    1ac0:	mov	r5, r0
    ConstructFilename(ix,oldfilename,MAX_FILENAME_LEN);
    1ac2:	mov.w	r3, #256	; 0x100
    1ac6:	add	r2, sp, #8
    1ac8:	mov	r1, r6
    1aca:	mov	r0, r4
    1acc:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    ConstructFilename(iy,newfilename,MAX_FILENAME_LEN);
    1ad0:	add	r2, sp, #264	; 0x108
    1ad2:	mov.w	r3, #256	; 0x100
    1ad6:	mov	r1, r5
    1ad8:	mov	r0, r4
    1ada:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(py.isdir) 
    1ade:	ldrb.w	r1, [sp, #1372]	; 0x55c
      sd_mkdir(py.store,newfilename);
    1ae2:	adds	r0, r4, #4
    1ae4:	ldrh.w	r3, [sp, #1374]	; 0x55e
    if(py.isdir) 
    1ae8:	add	r2, sp, #264	; 0x108
    1aea:	cbz	r1, 1b14 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xd2>
      sd_mkdir(py.store,newfilename);
    1aec:	mov	r1, r3
    1aee:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
      ScanDir(p1.store,ix); 
    1af2:	mov	r2, r6
    1af4:	mov	r1, r8
    1af6:	mov	r0, r4
    1af8:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
      CopyFiles(ix,p2.store,iy); 
    1afc:	ldr	r3, [r4, #0]
    1afe:	ldrh.w	r2, [sp, #814]	; 0x32e
    1b02:	mov	r1, r6
    1b04:	ldr.w	r9, [r3, #84]	; 0x54
    1b08:	mov	r0, r4
    1b0a:	mov	r3, r5
    1b0c:	blx	r9
    ix = px.sibling;
    1b0e:	ldr.w	r6, [sp, #1088]	; 0x440
    1b12:	b.n	1a72 <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0x30>
    { sd_copy(p1.store,oldfilename,py.store,newfilename);
    1b14:	str	r2, [sp, #0]
    1b16:	mov	r1, r8
    1b18:	add	r2, sp, #8
    1b1a:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1b1e:	b.n	1b0e <MTPStorage_SD::CopyFiles(unsigned long, unsigned long, unsigned long)+0xcc>

00001b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>:

bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
{ // old and new are directory paths
    1b20:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    1b24:	ldr.w	r8, [sp, #32]
    1b28:	mov	r6, r1
    1b2a:	mov	r7, r2

  char tmp0Name[MAX_FILENAME_LEN];
  char tmp1Name[MAX_FILENAME_LEN];

  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b2c:	mov	r1, r3
    1b2e:	mov	r2, r8
    1b30:	str	r3, [sp, #4]
{ // old and new are directory paths
    1b32:	mov	r5, r0
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b34:	bl	f38 <mSD_Base::sd_mkdir(unsigned long, char*)>
    1b38:	ldr	r3, [sp, #4]
    1b3a:	mov	r4, r0
    1b3c:	cbz	r0, 1b52 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)+0x32>
    1b3e:	mov	r2, r7
    1b40:	mov	r1, r6
    1b42:	mov	r0, r5
    1b44:	str.w	r8, [sp, #32]
        }
      }
    }
  }
  return sd_rmdir(store0,oldfilename);
}
    1b48:	add	sp, #8
    1b4a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1b4e:	b.w	1b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>
  if(!sd_mkdir(store1,newfilename))  {DBG_FAIL_MACRO; return false;}
    1b52:	movw	r0, #715	; 0x2cb
    1b56:	bl	d00 <dbgPrint(unsigned short)>
}
    1b5a:	mov	r0, r4
    1b5c:	add	sp, #8
    1b5e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00001b64 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]>:
bool mSD_Base::sd_moveDir(uint32_t store0, char *oldfilename, uint32_t store1, char *newfilename)
    1b64:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b68:	mov	r6, r1
    1b6a:	sub.w	sp, sp, #680	; 0x2a8
    1b6e:	add.w	r1, r0, r1, lsl #2
    1b72:	mov	r5, r0
    1b74:	mov	r8, r3
    1b76:	add	r0, sp, #8
    1b78:	movs	r3, #0
    1b7a:	ldr	r1, [r1, #84]	; 0x54
    1b7c:	mov	r7, r2
    1b7e:	bl	8984 <FsVolume::open(char const*, int)>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1b82:	add	r0, sp, #24
    1b84:	bl	e88 <FsBaseFile::isOpen() const>
    1b88:	mov	r4, r0
    1b8a:	cmp	r0, #0
    1b8c:	beq.n	1c42 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xde>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b8e:	ldr	r4, [pc, #264]	; (1c98 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x134>)
      strlcpy(tmp0Name,oldfilename,MAX_FILENAME_LEN);
    1b90:	mov.w	r2, #256	; 0x100
    1b94:	mov	r1, r7
    1b96:	add	r0, sp, #168	; 0xa8
    1b98:	bl	ebae <strlcpy>
      if(tmp0Name[strlen(tmp0Name)-1]!='/') strlcat(tmp0Name,"/",MAX_FILENAME_LEN);
    1b9c:	add	r0, sp, #168	; 0xa8
    1b9e:	bl	edd0 <strlen>
    1ba2:	add	r3, sp, #168	; 0xa8
    1ba4:	add	r0, r3
    1ba6:	ldrb.w	r3, [r0, #-1]
    1baa:	cmp	r3, #47	; 0x2f
    1bac:	beq.n	1bba <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x56>
    1bae:	mov.w	r2, #256	; 0x100
    1bb2:	mov	r1, r4
    1bb4:	add	r0, sp, #168	; 0xa8
    1bb6:	bl	eb68 <strlcat>
      strlcpy(tmp1Name,newfilename,MAX_FILENAME_LEN);
    1bba:	mov.w	r2, #256	; 0x100
    1bbe:	ldr	r1, [sp, #704]	; 0x2c0
    1bc0:	add	r0, sp, #424	; 0x1a8
    1bc2:	bl	ebae <strlcpy>
      if(tmp1Name[strlen(tmp1Name)-1]!='/') strlcat(tmp1Name,"/",MAX_FILENAME_LEN);
    1bc6:	add	r0, sp, #424	; 0x1a8
    1bc8:	bl	edd0 <strlen>
    1bcc:	add	r3, sp, #424	; 0x1a8
    1bce:	add	r0, r3
    1bd0:	ldrb.w	r3, [r0, #-1]
    1bd4:	cmp	r3, #47	; 0x2f
    1bd6:	beq.n	1be4 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x80>
    1bd8:	mov.w	r2, #256	; 0x100
    1bdc:	mov	r1, r4
    1bde:	add	r0, sp, #424	; 0x1a8
    1be0:	bl	eb68 <strlcat>
    FsFile tmpFile;
    1be4:	add	r0, sp, #88	; 0x58
    1be6:	bl	f04 <FsFile::FsFile()>
    tmpFile.openNext(this, oflag);
    1bea:	movs	r2, #0
    1bec:	add	r1, sp, #24
    1bee:	add	r0, sp, #104	; 0x68
    1bf0:	bl	8850 <FsBaseFile::openNext(FsBaseFile*, int)>
      if(!f2.isOpen()) break;
    1bf4:	add	r0, sp, #104	; 0x68
    1bf6:	bl	e88 <FsBaseFile::isOpen() const>
    1bfa:	cmp	r0, #0
    1bfc:	beq.n	1c82 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x11e>
        f2.getName(tmp0Name,MAX_FILENAME_LEN);
    1bfe:	mov.w	r2, #256	; 0x100
    1c02:	add	r1, sp, #168	; 0xa8
    1c04:	add	r0, sp, #104	; 0x68
    1c06:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
        f2.getName(tmp1Name,MAX_FILENAME_LEN);
    1c0a:	mov.w	r2, #256	; 0x100
    1c0e:	add	r1, sp, #424	; 0x1a8
    1c10:	add	r0, sp, #104	; 0x68
    1c12:	bl	c9e <FsBaseFile::getName(char*, unsigned int) [clone .isra.0]>
    return BaseFile::isDir();
    1c16:	add	r0, sp, #104	; 0x68
    1c18:	bl	e66 <FsBaseFile::isDir() const>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c1c:	add	r3, sp, #424	; 0x1a8
    1c1e:	add	r2, sp, #168	; 0xa8
    1c20:	mov	r1, r6
    1c22:	str	r3, [sp, #0]
    1c24:	mov	r3, r8
        if(f2.isDirectory())
    1c26:	cbz	r0, 1c5a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xf6>
          if(!sd_moveDir(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c28:	mov	r0, r5
    1c2a:	bl	1b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1c2e:	cbnz	r0, 1c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c30:	movw	r0, #738	; 0x2e2
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c34:	bl	d00 <dbgPrint(unsigned short)>
    }
    1c38:	add	r0, sp, #88	; 0x58
    1c3a:	movs	r4, #0
    1c3c:	bl	f20 <FsFile::~FsFile()>
    1c40:	b.n	1c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
  if(!f1.isOpen()) {DBG_FAIL_MACRO; return false;}
    1c42:	movw	r0, #718	; 0x2ce
    1c46:	bl	d00 <dbgPrint(unsigned short)>
}
    1c4a:	add	r0, sp, #8
    1c4c:	bl	f20 <FsFile::~FsFile()>
    1c50:	mov	r0, r4
    1c52:	add.w	sp, sp, #680	; 0x2a8
    1c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if(!sd_copy(store0, tmp0Name, store1, tmp1Name)) {DBG_FAIL_MACRO; return false;}
    1c5a:	mov	r0, r5
    1c5c:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1c60:	cbnz	r0, 1c68 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x104>
    1c62:	movw	r0, #742	; 0x2e6
    1c66:	b.n	1c34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
          if(!sd_remove(store0,tmp0Name)) {DBG_FAIL_MACRO; return false;}
    1c68:	add	r2, sp, #168	; 0xa8
    1c6a:	mov	r1, r6
    1c6c:	mov	r0, r5
    1c6e:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    1c72:	cbnz	r0, 1c7a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x116>
    1c74:	movw	r0, #743	; 0x2e7
    1c78:	b.n	1c34 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xd0>
    }
    1c7a:	add	r0, sp, #88	; 0x58
    1c7c:	bl	f20 <FsFile::~FsFile()>
    1c80:	b.n	1b90 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0x2c>
    1c82:	add	r0, sp, #88	; 0x58
    1c84:	bl	f20 <FsFile::~FsFile()>
  return sd_rmdir(store0,oldfilename);
    1c88:	mov	r2, r7
    1c8a:	mov	r1, r6
    1c8c:	mov	r0, r5
    1c8e:	bl	fdc <mSD_Base::sd_rmdir(unsigned long, char*)>
    1c92:	mov	r4, r0
    1c94:	b.n	1c4a <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*) [clone .part.0]+0xe6>
    1c96:	nop
    1c98:	.word	0x20000d7e

00001c9c <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)>:
  { 
    1c9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1ca0:	subw	sp, sp, #2764	; 0xacc
    if(newParent==0xFFFFFFFFUL) newParent=newStore; //storage runs from 1, while record.store runs from 0
    1ca4:	cmp.w	r3, #4294967295
    1ca8:	ite	ne
    1caa:	movne	r7, r3
    1cac:	moveq	r7, r2
  { 
    1cae:	mov	r4, r0
    Record p1 = ReadIndexRecord(handle);
    1cb0:	mov	r2, r1
  { 
    1cb2:	mov	r5, r1
    Record p1 = ReadIndexRecord(handle);
    1cb4:	mov	r1, r0
    1cb6:	add	r0, sp, #800	; 0x320
    1cb8:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p2 = ReadIndexRecord(newParent);
    1cbc:	mov	r2, r7
    1cbe:	mov	r1, r4
    1cc0:	add.w	r0, sp, #1080	; 0x438
    1cc4:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    Record p3 = ReadIndexRecord(p1.parent); 
    1cc8:	ldr	r2, [sp, #800]	; 0x320
    1cca:	mov	r1, r4
    1ccc:	add.w	r0, sp, #1360	; 0x550
    1cd0:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    if(p1.isdir) 
    1cd4:	ldrb.w	r3, [sp, #812]	; 0x32c
    1cd8:	cbz	r3, 1cf6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
    { if(!p1.scanned) 
    1cda:	ldrb.w	r3, [sp, #813]	; 0x32d
    1cde:	cbnz	r3, 1cf6 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x5a>
      { ScanDir(p1.store, handle) ; // in case scan directory
    1ce0:	mov	r2, r5
    1ce2:	ldrh.w	r1, [sp, #814]	; 0x32e
    1ce6:	mov	r0, r4
    1ce8:	bl	156e <MTPStorage_SD::ScanDir(unsigned long, unsigned long)>
        WriteIndexRecord(handle, p1);
    1cec:	add	r2, sp, #800	; 0x320
    1cee:	mov	r1, r5
    1cf0:	mov	r0, r4
    1cf2:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    Record p1o = p1;
    1cf6:	mov.w	r2, #280	; 0x118
    1cfa:	add	r1, sp, #800	; 0x320
    1cfc:	add.w	r0, sp, #1640	; 0x668
    1d00:	bl	a254 <memcpy>
    Record p2o = p2;
    1d04:	mov.w	r2, #280	; 0x118
    1d08:	add.w	r1, sp, #1080	; 0x438
    1d0c:	add.w	r0, sp, #1920	; 0x780
    1d10:	bl	a254 <memcpy>
    ConstructFilename(handle, oldName, MAX_FILENAME_LEN);
    1d14:	mov.w	r3, #256	; 0x100
    1d18:	add	r2, sp, #288	; 0x120
    1d1a:	mov	r1, r5
    1d1c:	mov	r0, r4
    1d1e:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
      if(p3.child==handle)
    1d22:	ldr.w	r8, [sp, #1364]	; 0x554
    1d26:	cmp	r8, r5
    1d28:	bne.n	1da0 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x104>
        p3.child = p1.sibling;
    1d2a:	ldr	r3, [sp, #808]	; 0x328
    uint32_t jx=-1;
    1d2c:	mov.w	r8, #4294967295
        WriteIndexRecord(p1.parent, p3);    
    1d30:	add.w	r2, sp, #1360	; 0x550
    1d34:	ldr	r1, [sp, #800]	; 0x320
    1d36:	mov	r0, r4
        p3.child = p1.sibling;
    1d38:	str.w	r3, [sp, #1364]	; 0x554
        WriteIndexRecord(p1.parent, p3);    
    1d3c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      p1.store = p2.store;
    1d40:	ldrh.w	r3, [sp, #1094]	; 0x446
      WriteIndexRecord(handle, p1);
    1d44:	add	r2, sp, #800	; 0x320
    1d46:	mov	r1, r5
    1d48:	mov	r0, r4
      p1.store = p2.store;
    1d4a:	strh.w	r3, [sp, #814]	; 0x32e
      p1.sibling = p2.child;
    1d4e:	ldr.w	r3, [sp, #1084]	; 0x43c
      p1.parent = newParent;
    1d52:	str	r7, [sp, #800]	; 0x320
      p1.sibling = p2.child;
    1d54:	str	r3, [sp, #808]	; 0x328
      p2.child = handle;
    1d56:	str.w	r5, [sp, #1084]	; 0x43c
      WriteIndexRecord(handle, p1);
    1d5a:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      WriteIndexRecord(newParent,p2);
    1d5e:	add.w	r2, sp, #1080	; 0x438
    1d62:	mov	r1, r7
    1d64:	mov	r0, r4
    1d66:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
      ConstructFilename(handle, newName, MAX_FILENAME_LEN);
    1d6a:	mov.w	r3, #256	; 0x100
    1d6e:	mov	r1, r5
    1d70:	add	r2, sp, #544	; 0x220
    1d72:	mov	r0, r4
    1d74:	bl	1330 <MTPStorage_SD::ConstructFilename(int, char*, int)>
    if(p1o.store == p2o.store)
    1d78:	ldrh.w	r1, [sp, #1654]	; 0x676
    1d7c:	ldrh.w	r3, [sp, #1934]	; 0x78e
    1d80:	cmp	r1, r3
    1d82:	bne.n	1e30 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x194>
      bool sd_rename(uint32_t store, char *oldfilename, char *newfilename) { return sdx[store]->rename(oldfilename,newfilename);  }
    1d84:	add.w	r3, r4, r1, lsl #2
    1d88:	add	r2, sp, #544	; 0x220
    1d8a:	add	r1, sp, #288	; 0x120
    1d8c:	ldr	r0, [r3, #88]	; 0x58
    1d8e:	bl	da2 <FsVolume::rename(char const*, char const*)>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1d92:	cbz	r0, 1e00 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x164>
    1d94:	movs	r6, #1
  }
    1d96:	mov	r0, r6
    1d98:	addw	sp, sp, #2764	; 0xacc
    1d9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        px = ReadIndexRecord(jx); 
    1da0:	mov	r2, r8
    1da2:	mov	r1, r4
    1da4:	add	r0, sp, #8
    1da6:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1daa:	mov.w	r2, #280	; 0x118
    1dae:	add	r1, sp, #8
    1db0:	add.w	r0, sp, #2480	; 0x9b0
    1db4:	bl	a254 <memcpy>
        pxo = px;
    1db8:	mov.w	r2, #280	; 0x118
    1dbc:	add.w	r1, sp, #2480	; 0x9b0
    1dc0:	addw	r0, sp, #2200	; 0x898
    1dc4:	bl	a254 <memcpy>
        while(handle != px.sibling)
    1dc8:	ldr.w	r6, [sp, #2488]	; 0x9b8
    1dcc:	cmp	r6, r5
    1dce:	bne.n	1de4 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x148>
        px.sibling = p1.sibling;
    1dd0:	ldr	r3, [sp, #808]	; 0x328
        WriteIndexRecord(jx, px);
    1dd2:	add.w	r2, sp, #2480	; 0x9b0
    1dd6:	mov	r1, r8
    1dd8:	mov	r0, r4
        px.sibling = p1.sibling;
    1dda:	str.w	r3, [sp, #2488]	; 0x9b8
        WriteIndexRecord(jx, px);
    1dde:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    1de2:	b.n	1d40 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xa4>
          px = ReadIndexRecord(jx); 
    1de4:	mov	r2, r6
    1de6:	mov	r1, r4
    1de8:	add	r0, sp, #8
    1dea:	mov	r8, r6
    1dec:	bl	1168 <MTPStorage_SD::ReadIndexRecord(unsigned long)>
    1df0:	mov.w	r2, #280	; 0x118
    1df4:	add	r1, sp, #8
    1df6:	add.w	r0, sp, #2480	; 0x9b0
    1dfa:	bl	a254 <memcpy>
          pxo = px;
    1dfe:	b.n	1db8 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x11c>
      if(sd_rename(p1o.store,oldName,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e00:	movw	r0, #579	; 0x243
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e04:	bl	d00 <dbgPrint(unsigned short)>
    if(jx<0) WriteIndexRecord(p1.parent, p3o); else WriteIndexRecord(jx, pxo);
    1e08:	addw	r2, sp, #2200	; 0x898
    1e0c:	mov	r1, r8
    1e0e:	mov	r0, r4
    1e10:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(handle, p1o);
    1e14:	add.w	r2, sp, #1640	; 0x668
    1e18:	mov	r1, r5
    1e1a:	mov	r0, r4
    1e1c:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    WriteIndexRecord(newParent,p2o);      
    1e20:	add.w	r2, sp, #1920	; 0x780
    1e24:	mov	r1, r7
    1e26:	mov	r0, r4
    return false;
    1e28:	movs	r6, #0
    WriteIndexRecord(newParent,p2o);      
    1e2a:	bl	10be <MTPStorage_SD::WriteIndexRecord(unsigned long, Record const&)>
    return false;
    1e2e:	b.n	1d96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    else if(!p1o.isdir)
    1e30:	ldrb.w	r2, [sp, #1652]	; 0x674
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e34:	add.w	r9, r4, #4
    else if(!p1o.isdir)
    1e38:	cbnz	r2, 1e5e <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1c2>
    { if(sd_copy(p1o.store,oldName, p2o.store, newName)) 
    1e3a:	add	r2, sp, #544	; 0x220
    1e3c:	mov	r0, r9
    1e3e:	str	r2, [sp, #0]
    1e40:	add	r2, sp, #288	; 0x120
    1e42:	bl	18a6 <mSD_Base::sd_copy(unsigned long, char*, unsigned long, char*)>
    1e46:	mov	r6, r0
    1e48:	cbz	r0, 1e58 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x1bc>
      { sd_remove(p2o.store,oldName); return true; } else { DBG_FAIL_MACRO; goto fail;}
    1e4a:	add	r2, sp, #288	; 0x120
    1e4c:	ldrh.w	r1, [sp, #1934]	; 0x78e
    1e50:	mov	r0, r9
    1e52:	bl	f78 <mSD_Base::sd_remove(unsigned long, char const*)>
    1e56:	b.n	1d96 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xfa>
    1e58:	movw	r0, #583	; 0x247
    1e5c:	b.n	1e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>
      if(sd_moveDir(p1o.store,oldName,p2o.store,newName)) return true; else {DBG_FAIL_MACRO; goto fail;}
    1e5e:	add	r2, sp, #544	; 0x220
    1e60:	mov	r0, r9
    1e62:	str	r2, [sp, #0]
    1e64:	add	r2, sp, #288	; 0x120
    1e66:	bl	1b20 <mSD_Base::sd_moveDir(unsigned long, char*, unsigned long, char*)>
    1e6a:	cmp	r0, #0
    1e6c:	bne.n	1d94 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0xf8>
    1e6e:	movw	r0, #587	; 0x24b
    1e72:	b.n	1e04 <MTPStorage_SD::move(unsigned long, unsigned long, unsigned long)+0x168>

00001e74 <MTPStorage_SD::usedSize(unsigned long)>:
  uint64_t MTPStorage_SD::usedSize(uint32_t store) { return sd_usedSize(store); }
    1e74:	push	{r4, r5, r6, lr}
    1e76:	add.w	r5, r0, r1, lsl #2
      { Serial.println(sdx[store]->clusterCount());
    1e7a:	ldr	r4, [pc, #60]	; (1eb8 <MTPStorage_SD::usedSize(unsigned long)+0x44>)
    1e7c:	ldr	r0, [r5, #88]	; 0x58
    1e7e:	bl	d6e <FsVolume::clusterCount() const>
    1e82:	mov	r1, r0
    1e84:	mov	r0, r4
    1e86:	bl	cc4 <Print::println(unsigned long) [clone .isra.0]>
        Serial.println(sdx[store]->freeClusterCount());
    1e8a:	ldr	r0, [r5, #88]	; 0x58
    1e8c:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1e90:	mov	r1, r0
    1e92:	mov	r0, r4
    1e94:	bl	cc4 <Print::println(unsigned long) [clone .isra.0]>
        return (uint64_t)(sdx[store]->clusterCount()-sdx[store]->freeClusterCount())
    1e98:	ldr	r6, [r5, #88]	; 0x58
    1e9a:	mov	r0, r6
    1e9c:	bl	d6e <FsVolume::clusterCount() const>
    1ea0:	mov	r4, r0
    1ea2:	mov	r0, r6
    1ea4:	bl	4e0 <SdBase<FsVolume, FsFormatter>::freeClusterCount()>
    1ea8:	subs	r4, r4, r0
              *(uint64_t)sdx[store]->bytesPerCluster();  
    1eaa:	ldr	r0, [r5, #88]	; 0x58
    1eac:	bl	d50 <FsVolume::bytesPerCluster() const>
    1eb0:	umull	r0, r1, r4, r0
    1eb4:	pop	{r4, r5, r6, pc}
    1eb6:	nop
    1eb8:	.word	0x20001d30

00001ebc <Print::println(int) [clone .isra.0]>:
	size_t println(int n)				{ return print(n) + println(); }
    1ebc:	push	{r4, lr}
    1ebe:	mov	r4, r0
	size_t print(int n)				{ return print((long)n); }
    1ec0:	bl	c70e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    1ec4:	mov	r0, r4
    1ec6:	ldmia.w	sp!, {r4, lr}
    1eca:	b.w	c720 <Print::println()>

00001ece <Print::print(char) [clone .isra.0]>:
	size_t print(char c)				{ return write((uint8_t)c); }
    1ece:	ldr	r3, [r0, #0]
    1ed0:	ldr	r3, [r3, #0]
    1ed2:	bx	r3

00001ed4 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1ed4:	push	{r0, r1, r4, lr}
    1ed6:	mov	r4, r0
    1ed8:	cbz	r1, 1ef4 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    1eda:	mov	r0, r1
    1edc:	str	r1, [sp, #4]
    1ede:	bl	edd0 <strlen>
    1ee2:	ldr	r3, [r4, #0]
    1ee4:	mov	r2, r0
    1ee6:	ldr	r1, [sp, #4]
    1ee8:	ldr	r3, [r3, #4]
    1eea:	mov	r0, r4
    1eec:	add	sp, #8
    1eee:	ldmia.w	sp!, {r4, lr}
    1ef2:	bx	r3
    1ef4:	add	sp, #8
    1ef6:	pop	{r4, pc}

00001ef8 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    1ef8:	b.w	1ed4 <Print::write(char const*) [clone .isra.0]>

00001efc <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    1efc:	push	{r4, lr}
    1efe:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    1f00:	bl	1ed4 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    1f04:	mov	r0, r4
    1f06:	ldmia.w	sp!, {r4, lr}
    1f0a:	b.w	c720 <Print::println()>
	...

00001f10 <menuGetLine()>:
#include "Acq.h"

static uint16_t store[16] = {0};

static char * menuGetLine(void)
{
    1f10:	push	{r3, r4, r5, lr}
        virtual int available() { return usb_serial_available(); }
    1f12:	bl	a73c <usb_serial_available>
  static char buffer[40];
  while(!Serial.available()) continue;
    1f16:	cmp	r0, #0
    1f18:	beq.n	1f12 <menuGetLine()+0x2>
  Serial.setTimeout(5000);
  int count;
  count = Serial.readBytesUntil('\r',buffer,40);
    1f1a:	ldr	r4, [pc, #36]	; (1f40 <menuGetLine()+0x30>)
	virtual int available() = 0;
	virtual int read() = 0;
	virtual int peek() = 0;

	void setTimeout(unsigned long timeout) { _timeout = timeout; }
    1f1c:	movw	r3, #5000	; 0x1388
    1f20:	ldr	r5, [pc, #32]	; (1f44 <menuGetLine()+0x34>)
    1f22:	movs	r1, #13
    1f24:	mov	r2, r4
    1f26:	str	r3, [r5, #8]
    1f28:	mov	r0, r5
    1f2a:	movs	r3, #40	; 0x28
    1f2c:	bl	c668 <Stream::readBytesUntil(char, char*, unsigned int)>
  buffer[count]=0;
    1f30:	movs	r3, #0
  Serial.println(buffer);
    1f32:	mov	r1, r4
  buffer[count]=0;
    1f34:	strb	r3, [r4, r0]
  Serial.println(buffer);
    1f36:	mov	r0, r5
    1f38:	bl	1efc <Print::println(char const*) [clone .isra.0]>
  return buffer;
}
    1f3c:	mov	r0, r4
    1f3e:	pop	{r3, r4, r5, pc}
    1f40:	.word	0x2001558a
    1f44:	.word	0x20001d30

00001f48 <menuGetInt32(long*) [clone .isra.0]>:
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
  return 1;
}

static int menuGetInt32(int32_t *val)
    1f48:	push	{r0, r1, r4, lr}
    1f4a:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f4c:	bl	1f10 <menuGetLine()>
  int tmp;
  sscanf(buffer,"%d",&tmp); *val=(int32_t) tmp;
    1f50:	add	r2, sp, #4
    1f52:	ldr	r1, [pc, #12]	; (1f60 <menuGetInt32(long*) [clone .isra.0]+0x18>)
    1f54:	bl	e974 <siscanf>
    1f58:	ldr	r3, [sp, #4]
    1f5a:	str	r3, [r4, #0]
  return 1;
}
    1f5c:	add	sp, #8
    1f5e:	pop	{r4, pc}
    1f60:	.word	0x20001450

00001f64 <menuGetInt16(short*) [clone .isra.0]>:
static int menuGetInt16(int16_t *val)
    1f64:	push	{r0, r1, r4, lr}
    1f66:	mov	r4, r0
{ char *buffer=menuGetLine();
    1f68:	bl	1f10 <menuGetLine()>
  sscanf(buffer,"%d",&tmp); *val=(int16_t) tmp;
    1f6c:	add	r2, sp, #4
    1f6e:	ldr	r1, [pc, #12]	; (1f7c <menuGetInt16(short*) [clone .isra.0]+0x18>)
    1f70:	bl	e974 <siscanf>
    1f74:	ldr	r3, [sp, #4]
    1f76:	strh	r3, [r4, #0]
}
    1f78:	add	sp, #8
    1f7a:	pop	{r4, pc}
    1f7c:	.word	0x20001450

00001f80 <menu3()>:
    while(Serial.available()) ch=Serial.read();

}

void menu3(void)
{   // have '!'
    1f80:	push	{r4, lr}
    1f82:	sub	sp, #32
    1f84:	bl	a73c <usb_serial_available>

    while(!Serial.available()) ;
    1f88:	cmp	r0, #0
    1f8a:	beq.n	1f84 <menu3()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    1f8c:	bl	a7b0 <usb_serial_getchar>
    char ch;
    ch=Serial.read();
    1f90:	uxtb	r0, r0
    if(ch=='d') // set date
    1f92:	cmp	r0, #100	; 0x64
    1f94:	bne.n	1fc2 <menu3()+0x42>
{ char *buffer=menuGetLine();
    1f96:	bl	1f10 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    1f9a:	add	r3, sp, #28
    1f9c:	add	r2, sp, #20
    1f9e:	ldr	r1, [pc, #340]	; (20f4 <menu3()+0x174>)
    1fa0:	str	r3, [sp, #8]
    1fa2:	add.w	r3, sp, #19
    1fa6:	str	r3, [sp, #4]
    1fa8:	add	r3, sp, #24
    1faa:	str	r3, [sp, #0]
    1fac:	add.w	r3, sp, #18
    1fb0:	bl	e974 <siscanf>
    { int year,month,day;
      menuGet3Int(&year,&month,&day);

      rtcSetDate(year,month,day);
    1fb4:	ldr	r0, [sp, #20]
    1fb6:	ldrd	r1, r2, [sp, #24]
    1fba:	bl	3c8a <rtcSetDate(int, int, int)>
    }
    else if(ch=='0')
    { 
      menuGetInt16((int16_t *)&d_0);
    }
}
    1fbe:	add	sp, #32
    1fc0:	pop	{r4, pc}
    else if(ch=='t') // set time
    1fc2:	cmp	r0, #54	; 0x36
    1fc4:	bhi.n	1fdc <menu3()+0x5c>
    1fc6:	cmp	r0, #47	; 0x2f
    1fc8:	bls.n	1fbe <menu3()+0x3e>
    1fca:	subs	r0, #49	; 0x31
    1fcc:	cmp	r0, #5
    1fce:	bhi.w	20f0 <menu3()+0x170>
    1fd2:	tbb	[pc, r0]
    1fd6:	.short	0x8381
    1fd8:	.word	0x8b898785
    1fdc:	subs	r0, #97	; 0x61
    1fde:	uxtb	r3, r0
    1fe0:	cmp	r3, #22
    1fe2:	bhi.n	1fbe <menu3()+0x3e>
    1fe4:	cmp	r0, #22
    1fe6:	bhi.n	1fbe <menu3()+0x3e>
    1fe8:	add	r3, pc, #4	; (adr r3, 1ff0 <menu3()+0x70>)
    1fea:	ldr.w	pc, [r3, r0, lsl #2]
    1fee:	nop
    1ff0:	.word	0x00002077
    1ff4:	.word	0x00001fbf
    1ff8:	.word	0x000020b3
    1ffc:	.word	0x00001fbf
    2000:	.word	0x00001fbf
    2004:	.word	0x0000208b
    2008:	.word	0x000020bf
    200c:	.word	0x00001fbf
    2010:	.word	0x00001fbf
    2014:	.word	0x00001fbf
    2018:	.word	0x00001fbf
    201c:	.word	0x00001fbf
    2020:	.word	0x00001fbf
    2024:	.word	0x00001fbf
    2028:	.word	0x00002083
    202c:	.word	0x00001fbf
    2030:	.word	0x00001fbf
    2034:	.word	0x00002087
    2038:	.word	0x0000209f
    203c:	.word	0x0000204d
    2040:	.word	0x00001fbf
    2044:	.word	0x00001fbf
    2048:	.word	0x000020d5
{ char *buffer=menuGetLine();
    204c:	bl	1f10 <menuGetLine()>
  return sscanf(buffer,"%d%c%d%c%d",val1,&c1,val2,&c2,val3);
    2050:	add	r3, sp, #28
    2052:	add	r2, sp, #20
    2054:	ldr	r1, [pc, #156]	; (20f4 <menu3()+0x174>)
    2056:	str	r3, [sp, #8]
    2058:	add.w	r3, sp, #19
    205c:	str	r3, [sp, #4]
    205e:	add	r3, sp, #24
    2060:	str	r3, [sp, #0]
    2062:	add.w	r3, sp, #18
    2066:	bl	e974 <siscanf>
      rtcSetTime(hour,minutes,seconds);
    206a:	ldr	r0, [sp, #20]
    206c:	ldrd	r1, r2, [sp, #24]
    2070:	bl	3cae <rtcSetTime(int, int, int)>
    2074:	b.n	1fbe <menu3()+0x3e>
      menuGetInt32((int32_t *)&t_acq);
    2076:	ldr	r0, [pc, #128]	; (20f8 <menu3()+0x178>)
}
    2078:	add	sp, #32
    207a:	ldmia.w	sp!, {r4, lr}
      menuGetInt32((int32_t *)&t_on);
    207e:	b.w	1f48 <menuGetInt32(long*) [clone .isra.0]>
    2082:	ldr	r0, [pc, #120]	; (20fc <menu3()+0x17c>)
    2084:	b.n	2078 <menu3()+0xf8>
      menuGetInt32((int32_t *)&t_rep);
    2086:	ldr	r0, [pc, #120]	; (2100 <menu3()+0x180>)
    2088:	b.n	2078 <menu3()+0xf8>
      menuGetInt32((int32_t *)&fsamp);
    208a:	ldr	r4, [pc, #120]	; (2104 <menu3()+0x184>)
    208c:	mov	r0, r4
    208e:	bl	1f48 <menuGetInt32(long*) [clone .isra.0]>
      acqModifyFrequency(fsamp);
    2092:	ldr	r0, [r4, #0]
}
    2094:	add	sp, #32
    2096:	ldmia.w	sp!, {r4, lr}
      acqModifyFrequency(fsamp);
    209a:	b.w	c28 <acqModifyFrequency(unsigned long)>
      menuGetInt16((int16_t *)&shift); if(shift<0) shift=0;
    209e:	ldr	r4, [pc, #104]	; (2108 <menu3()+0x188>)
    20a0:	mov	r0, r4
    20a2:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
    20a6:	ldrh	r3, [r4, #0]
    20a8:	lsls	r3, r3, #16
    20aa:	bpl.n	1fbe <menu3()+0x3e>
    20ac:	movs	r3, #0
    20ae:	strh	r3, [r4, #0]
    20b0:	b.n	1fbe <menu3()+0x3e>
      menuGetInt16((int16_t *)&proc);
    20b2:	ldr	r0, [pc, #88]	; (210c <menu3()+0x18c>)
}
    20b4:	add	sp, #32
    20b6:	ldmia.w	sp!, {r4, lr}
      menuGetInt16((int16_t *)&d_0);
    20ba:	b.w	1f64 <menuGetInt16(short*) [clone .isra.0]>
      menuGetInt16((int16_t *)&again);
    20be:	ldr	r4, [pc, #80]	; (2110 <menu3()+0x190>)
    20c0:	mov	r0, r4
    20c2:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
      setAGain(again);
    20c6:	ldrh	r0, [r4, #0]
    20c8:	sxtb	r0, r0
}
    20ca:	add	sp, #32
    20cc:	ldmia.w	sp!, {r4, lr}
      setAGain(again);
    20d0:	b.w	392c <setAGain(signed char)>
      menuGetInt16((int16_t *)&store[0]);
    20d4:	ldr	r0, [pc, #60]	; (2114 <menu3()+0x194>)
    20d6:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_1);
    20d8:	ldr	r0, [pc, #60]	; (2118 <menu3()+0x198>)
    20da:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_2);
    20dc:	ldr	r0, [pc, #60]	; (211c <menu3()+0x19c>)
    20de:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_3);
    20e0:	ldr	r0, [pc, #60]	; (2120 <menu3()+0x1a0>)
    20e2:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&h_4);
    20e4:	ldr	r0, [pc, #60]	; (2124 <menu3()+0x1a4>)
    20e6:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_on);
    20e8:	ldr	r0, [pc, #60]	; (2128 <menu3()+0x1a8>)
    20ea:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_rep);
    20ec:	ldr	r0, [pc, #60]	; (212c <menu3()+0x1ac>)
    20ee:	b.n	20b4 <menu3()+0x134>
      menuGetInt16((int16_t *)&d_0);
    20f0:	ldr	r0, [pc, #60]	; (2130 <menu3()+0x1b0>)
    20f2:	b.n	20b4 <menu3()+0x134>
    20f4:	.word	0x20001014
    20f8:	.word	0x200022f2
    20fc:	.word	0x200022f4
    2100:	.word	0x2001546a
    2104:	.word	0x200022d4
    2108:	.word	0x20015468
    210c:	.word	0x200153c4
    2110:	.word	0x200022e8
    2114:	.word	0x20015394
    2118:	.word	0x200153c0
    211c:	.word	0x200022ec
    2120:	.word	0x200022ee
    2124:	.word	0x200022f0
    2128:	.word	0x200022ea
    212c:	.word	0x200153ba
    2130:	.word	0x200153b8

00002134 <storeConfig(unsigned short*, int)>:

/******************** Parameter ******************************/
void storeConfig(uint16_t *store, int ns)
{ 
  #if defined(__IMXRT1062__)
    eeprom_write_block(store, 0, ns*sizeof(store[0]));  
    2134:	lsls	r2, r1, #1
    2136:	movs	r1, #0
    2138:	b.w	bdb0 <eeprom_write_block>

0000213c <loadConfig(unsigned short*, int)>:
}

void loadConfig(uint16_t *store, int ns)
{
  #if defined(__IMXRT1062__)
    eeprom_read_block(store, 0, ns*sizeof(store[0]));  
    213c:	lsls	r2, r1, #1
    213e:	movs	r1, #0
    2140:	b.w	bb00 <eeprom_read_block>

00002144 <saveParameters()>:
  #endif
}

void saveParameters(void)
{
  store[1]  = t_acq;
    2144:	ldr	r3, [pc, #104]	; (21b0 <saveParameters()+0x6c>)
  store[7]  = h_2;
  store[8]  = h_3;
  store[9]  = h_4;
  store[10] = d_on;
  store[11] = d_rep;
  store[12] = fsamp/1000;
    2146:	mov.w	r2, #1000	; 0x3e8
  store[1]  = t_acq;
    214a:	ldr	r0, [pc, #104]	; (21b4 <saveParameters()+0x70>)
  store[13] = again;
  store[14] = dgain;
  store[15] = d_0;
  
  storeConfig(store, 16);
    214c:	movs	r1, #16
  store[1]  = t_acq;
    214e:	ldrh	r3, [r3, #0]
    2150:	strh	r3, [r0, #2]
  store[2]  = t_on;
    2152:	ldr	r3, [pc, #100]	; (21b8 <saveParameters()+0x74>)
    2154:	ldrh	r3, [r3, #0]
    2156:	strh	r3, [r0, #4]
  store[3]  = t_rep;
    2158:	ldr	r3, [pc, #96]	; (21bc <saveParameters()+0x78>)
    215a:	ldrh	r3, [r3, #0]
    215c:	strh	r3, [r0, #6]
  store[4]  = proc;
    215e:	ldr	r3, [pc, #96]	; (21c0 <saveParameters()+0x7c>)
    2160:	ldrh	r3, [r3, #0]
    2162:	strh	r3, [r0, #8]
  store[5]  = shift;
    2164:	ldr	r3, [pc, #92]	; (21c4 <saveParameters()+0x80>)
    2166:	ldrh	r3, [r3, #0]
    2168:	strh	r3, [r0, #10]
  store[6]  = h_1;
    216a:	ldr	r3, [pc, #92]	; (21c8 <saveParameters()+0x84>)
    216c:	ldrh	r3, [r3, #0]
    216e:	strh	r3, [r0, #12]
  store[7]  = h_2;
    2170:	ldr	r3, [pc, #88]	; (21cc <saveParameters()+0x88>)
    2172:	ldrh	r3, [r3, #0]
    2174:	strh	r3, [r0, #14]
  store[8]  = h_3;
    2176:	ldr	r3, [pc, #88]	; (21d0 <saveParameters()+0x8c>)
    2178:	ldrh	r3, [r3, #0]
    217a:	strh	r3, [r0, #16]
  store[9]  = h_4;
    217c:	ldr	r3, [pc, #84]	; (21d4 <saveParameters()+0x90>)
    217e:	ldrh	r3, [r3, #0]
    2180:	strh	r3, [r0, #18]
  store[10] = d_on;
    2182:	ldr	r3, [pc, #84]	; (21d8 <saveParameters()+0x94>)
    2184:	ldrh	r3, [r3, #0]
    2186:	strh	r3, [r0, #20]
  store[11] = d_rep;
    2188:	ldr	r3, [pc, #80]	; (21dc <saveParameters()+0x98>)
    218a:	ldrh	r3, [r3, #0]
    218c:	strh	r3, [r0, #22]
  store[12] = fsamp/1000;
    218e:	ldr	r3, [pc, #80]	; (21e0 <saveParameters()+0x9c>)
    2190:	ldr	r3, [r3, #0]
    2192:	sdiv	r3, r3, r2
    2196:	strh	r3, [r0, #24]
  store[13] = again;
    2198:	ldr	r3, [pc, #72]	; (21e4 <saveParameters()+0xa0>)
    219a:	ldrh	r3, [r3, #0]
    219c:	strh	r3, [r0, #26]
  store[14] = dgain;
    219e:	ldr	r3, [pc, #72]	; (21e8 <saveParameters()+0xa4>)
    21a0:	ldrh	r3, [r3, #0]
    21a2:	strh	r3, [r0, #28]
  store[15] = d_0;
    21a4:	ldr	r3, [pc, #68]	; (21ec <saveParameters()+0xa8>)
    21a6:	ldrh	r3, [r3, #0]
    21a8:	strh	r3, [r0, #30]
  storeConfig(store, 16);
    21aa:	b.w	2134 <storeConfig(unsigned short*, int)>
    21ae:	nop
    21b0:	.word	0x200022f2
    21b4:	.word	0x20015394
    21b8:	.word	0x200022f4
    21bc:	.word	0x2001546a
    21c0:	.word	0x200153c4
    21c4:	.word	0x20015468
    21c8:	.word	0x200153c0
    21cc:	.word	0x200022ec
    21d0:	.word	0x200022ee
    21d4:	.word	0x200022f0
    21d8:	.word	0x200022ea
    21dc:	.word	0x200153ba
    21e0:	.word	0x200022d4
    21e4:	.word	0x200022e8
    21e8:	.word	0x200153bc
    21ec:	.word	0x200153b8

000021f0 <menu1(short)>:
{   // have ':'
    21f0:	push	{r3, r4, r5, lr}
    21f2:	mov	r5, r0
        virtual int available() { return usb_serial_available(); }
    21f4:	bl	a73c <usb_serial_available>
    while(!Serial.available()) ;
    21f8:	cmp	r0, #0
    21fa:	beq.n	21f4 <menu1(short)+0x4>
        virtual int read() { return usb_serial_getchar(); }
    21fc:	bl	a7b0 <usb_serial_getchar>
    ch=Serial.read();
    2200:	uxtb	r4, r0
	size_t println(char c)				{ return print(c) + println(); }
    2202:	ldr	r0, [pc, #80]	; (2254 <menu1(short)+0x64>)
    2204:	mov	r1, r4
    2206:	bl	1ece <Print::print(char) [clone .isra.0]>
    220a:	ldr	r0, [pc, #72]	; (2254 <menu1(short)+0x64>)
    220c:	bl	c720 <Print::println()>
    if(ch=='w') 
    2210:	cmp	r4, #119	; 0x77
    2212:	bne.n	2222 <menu1(short)+0x32>
    { saveParameters();
    2214:	bl	2144 <saveParameters()>
      Serial.println("Save parameters");
    2218:	ldr	r1, [pc, #60]	; (2258 <menu1(short)+0x68>)
      Serial.print(ch); Serial.println(" not recognized");
    221a:	ldr	r0, [pc, #56]	; (2254 <menu1(short)+0x64>)
    221c:	bl	1efc <Print::println(char const*) [clone .isra.0]>
    2220:	b.n	222c <menu1(short)+0x3c>
    else if(ch=='m') // control monitor (needed for gui)
    2222:	cmp	r4, #109	; 0x6d
    2224:	bne.n	2236 <menu1(short)+0x46>
      menuGetInt16((int16_t *)&monitor);
    2226:	ldr	r0, [pc, #52]	; (225c <menu1(short)+0x6c>)
    2228:	bl	1f64 <menuGetInt16(short*) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    222c:	bl	a73c <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2230:	cbnz	r0, 224c <menu1(short)+0x5c>
}
    2232:	mov	r0, r5
    2234:	pop	{r3, r4, r5, pc}
      else if(ch=='c') // transfer internal rtc to external rtc
    2236:	cmp	r4, #99	; 0x63
    2238:	bne.n	2240 <menu1(short)+0x50>
      { rtcXferTime();
    223a:	bl	3c60 <rtcXferTime()>
    223e:	b.n	222c <menu1(short)+0x3c>
      Serial.print(ch); Serial.println(" not recognized");
    2240:	mov	r1, r4
    2242:	ldr	r0, [pc, #16]	; (2254 <menu1(short)+0x64>)
    2244:	bl	1ece <Print::print(char) [clone .isra.0]>
    2248:	ldr	r1, [pc, #20]	; (2260 <menu1(short)+0x70>)
    224a:	b.n	221a <menu1(short)+0x2a>
        virtual int read() { return usb_serial_getchar(); }
    224c:	bl	a7b0 <usb_serial_getchar>
    2250:	b.n	222c <menu1(short)+0x3c>
    2252:	nop
    2254:	.word	0x20001d30
    2258:	.word	0x20000e98
    225c:	.word	0x200153c2
    2260:	.word	0x20000ea8

00002264 <loadParameters()>:
}

uint16_t *loadParameters(void)
{
    2264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  loadConfig(store,16);
    2268:	ldr	r4, [pc, #252]	; (2368 <loadParameters()+0x104>)
    226a:	movs	r1, #16
    226c:	ldr.w	sl, [pc, #296]	; 2398 <loadParameters()+0x134>
    2270:	mov	r0, r4
    2272:	ldr.w	r9, [pc, #296]	; 239c <loadParameters()+0x138>
    2276:	bl	213c <loadConfig(unsigned short*, int)>
  if(store[0]==1)
    227a:	ldrh	r3, [r4, #0]
    227c:	ldr.w	lr, [pc, #288]	; 23a0 <loadParameters()+0x13c>
    2280:	cmp	r3, #1
    2282:	ldr.w	ip, [pc, #288]	; 23a4 <loadParameters()+0x140>
    2286:	ldr	r7, [pc, #228]	; (236c <loadParameters()+0x108>)
    2288:	ldr	r2, [pc, #228]	; (2370 <loadParameters()+0x10c>)
    228a:	ldr	r6, [pc, #232]	; (2374 <loadParameters()+0x110>)
    228c:	ldr	r5, [pc, #232]	; (2378 <loadParameters()+0x114>)
    228e:	ldr	r0, [pc, #236]	; (237c <loadParameters()+0x118>)
    2290:	ldr	r1, [pc, #236]	; (2380 <loadParameters()+0x11c>)
    2292:	bne.n	22f8 <loadParameters()+0x94>
  {
    t_acq   = store[1];
    2294:	ldrh	r3, [r4, #2]
    2296:	strh.w	r3, [sl]
    t_on    = store[2];
    229a:	ldrh	r3, [r4, #4]
    229c:	strh.w	r3, [r9]
    t_rep   = store[3];
    22a0:	ldrh	r3, [r4, #6]
    22a2:	strh.w	r3, [lr]
    proc    = store[4];
    22a6:	ldrsh.w	r3, [r4, #8]
    22aa:	strh.w	r3, [ip]
    shift   = store[5];
    22ae:	ldrsh.w	r3, [r4, #10]
    22b2:	strh	r3, [r7, #0]
    h_1     = store[6];
    22b4:	ldrh	r3, [r4, #12]
    22b6:	strh	r3, [r2, #0]
    h_2     = store[7];
    22b8:	ldrh	r3, [r4, #14]
    h_3     = store[8];
    h_4     = store[9];
    d_on    = store[10];
    d_rep   = store[11];
    22ba:	ldrh	r2, [r4, #22]
    h_2     = store[7];
    22bc:	strh	r3, [r6, #0]
    h_3     = store[8];
    22be:	ldrh	r3, [r4, #16]
    22c0:	strh	r3, [r5, #0]
    h_4     = store[9];
    22c2:	ldrh	r3, [r4, #18]
    22c4:	strh	r3, [r0, #0]
    d_on    = store[10];
    22c6:	ldrh	r3, [r4, #20]
    22c8:	strh	r3, [r1, #0]
    d_rep   = store[11];
    22ca:	ldr	r3, [pc, #184]	; (2384 <loadParameters()+0x120>)
    22cc:	strh	r2, [r3, #0]
    fsamp   = store[12]*1000;
    22ce:	mov.w	r2, #1000	; 0x3e8
    22d2:	ldrh	r3, [r4, #24]
    22d4:	muls	r3, r2
    22d6:	ldr	r2, [pc, #176]	; (2388 <loadParameters()+0x124>)
    22d8:	str	r3, [r2, #0]
    again   = store[13];
    22da:	ldrsh.w	r2, [r4, #26]
    22de:	ldr	r3, [pc, #172]	; (238c <loadParameters()+0x128>)
    22e0:	strh	r2, [r3, #0]
    dgain   = store[14];
    22e2:	ldrsh.w	r2, [r4, #28]
    22e6:	ldr	r3, [pc, #168]	; (2390 <loadParameters()+0x12c>)
    22e8:	strh	r2, [r3, #0]
    d_0     = store[15];
    22ea:	ldrsh.w	r2, [r4, #30]
    22ee:	ldr	r3, [pc, #164]	; (2394 <loadParameters()+0x130>)
    22f0:	strh	r2, [r3, #0]
    store[13] = again    = AGAIN;
    store[14] = dgain    = DGAIN;
    store[15] = d_0      = 0; 
  }
  return store;
}
    22f2:	ldr	r0, [pc, #116]	; (2368 <loadParameters()+0x104>)
    22f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    store[1]  = t_acq    = T_ACQ;
    22f8:	mov.w	r8, #20
    store[0]  = 0;
    22fc:	movs	r3, #0
    store[1]  = t_acq    = T_ACQ;
    22fe:	strh.w	r8, [sl]
    2302:	strh.w	r8, [r4, #2]
    store[2]  = t_on     = T_ON;
    2306:	mov.w	r8, #60	; 0x3c
    store[0]  = 0;
    230a:	strh	r3, [r4, #0]
    store[2]  = t_on     = T_ON;
    230c:	strh.w	r8, [r9]
    store[3]  = t_rep    = T_REP;
    2310:	strh.w	r3, [lr]
    store[4]  = proc     = PROC_MODE;
    2314:	strh.w	r3, [ip]
    store[5]  = shift    = SHIFT;
    2318:	strh	r3, [r7, #0]
    store[6]  = h_1      = H_1;
    231a:	strh	r3, [r2, #0]
    store[7]  = h_2      = H_2;
    231c:	movs	r2, #12
    store[2]  = t_on     = T_ON;
    231e:	strh.w	r8, [r4, #4]
    store[7]  = h_2      = H_2;
    2322:	strh	r2, [r6, #0]
    2324:	strh	r2, [r4, #14]
    store[8]  = h_3      = H_3;
    2326:	strh	r2, [r5, #0]
    2328:	strh	r2, [r4, #16]
    store[9]  = h_4      = H_4;
    232a:	movs	r2, #24
    store[3]  = t_rep    = T_REP;
    232c:	strh	r3, [r4, #6]
    store[9]  = h_4      = H_4;
    232e:	strh	r2, [r0, #0]
    2330:	strh	r2, [r4, #18]
    store[10] = d_on     = D_ON;
    2332:	movs	r2, #1
    store[4]  = proc     = PROC_MODE;
    2334:	strh	r3, [r4, #8]
    store[10] = d_on     = D_ON;
    2336:	strh	r2, [r1, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2338:	movw	r1, #48000	; 0xbb80
    store[10] = d_on     = D_ON;
    233c:	strh	r2, [r4, #20]
    store[11] = d_rep    = D_REP;
    233e:	ldr	r2, [pc, #68]	; (2384 <loadParameters()+0x120>)
    store[5]  = shift    = SHIFT;
    2340:	strh	r3, [r4, #10]
    store[11] = d_rep    = D_REP;
    2342:	strh	r3, [r2, #0]
    store[12] = (fsamp   = FSAMP)/1000; 
    2344:	ldr	r2, [pc, #64]	; (2388 <loadParameters()+0x124>)
    store[6]  = h_1      = H_1;
    2346:	strh	r3, [r4, #12]
    store[12] = (fsamp   = FSAMP)/1000; 
    2348:	str	r1, [r2, #0]
    234a:	movs	r2, #48	; 0x30
    store[13] = again    = AGAIN;
    234c:	ldr	r1, [pc, #60]	; (238c <loadParameters()+0x128>)
    store[12] = (fsamp   = FSAMP)/1000; 
    234e:	strh	r2, [r4, #24]
    store[13] = again    = AGAIN;
    2350:	movs	r2, #10
    store[11] = d_rep    = D_REP;
    2352:	strh	r3, [r4, #22]
    store[13] = again    = AGAIN;
    2354:	strh	r2, [r1, #0]
    2356:	strh	r2, [r4, #26]
    store[14] = dgain    = DGAIN;
    2358:	ldr	r2, [pc, #52]	; (2390 <loadParameters()+0x12c>)
    235a:	strh	r3, [r4, #28]
    235c:	strh	r3, [r2, #0]
    store[15] = d_0      = 0; 
    235e:	ldr	r2, [pc, #52]	; (2394 <loadParameters()+0x130>)
    2360:	strh	r3, [r4, #30]
    2362:	strh	r3, [r2, #0]
    2364:	b.n	22f2 <loadParameters()+0x8e>
    2366:	nop
    2368:	.word	0x20015394
    236c:	.word	0x20015468
    2370:	.word	0x200153c0
    2374:	.word	0x200022ec
    2378:	.word	0x200022ee
    237c:	.word	0x200022f0
    2380:	.word	0x200022ea
    2384:	.word	0x200153ba
    2388:	.word	0x200022d4
    238c:	.word	0x200022e8
    2390:	.word	0x200153bc
    2394:	.word	0x200153b8
    2398:	.word	0x200022f2
    239c:	.word	0x200022f4
    23a0:	.word	0x2001546a
    23a4:	.word	0x200153c4

000023a8 <menu2()>:
{   // have '?'
    23a8:	push	{r4, lr}
    23aa:	sub	sp, #32
        virtual int available() { return usb_serial_available(); }
    23ac:	bl	a73c <usb_serial_available>
    while(!Serial.available()) ;
    23b0:	cmp	r0, #0
    23b2:	beq.n	23ac <menu2()+0x4>
        virtual int read() { return usb_serial_getchar(); }
    23b4:	bl	a7b0 <usb_serial_getchar>
    ch=Serial.read();
    23b8:	uxtb	r0, r0
    if(ch=='p') // get parameters
    23ba:	cmp	r0, #112	; 0x70
    23bc:	bne.w	2522 <menu2()+0x17a>
      Serial.println();
    23c0:	ldr	r0, [pc, #624]	; (2634 <menu2()+0x28c>)
    23c2:	bl	c720 <Print::println()>
      Serial.println(version);
    23c6:	ldr	r1, [pc, #624]	; (2638 <menu2()+0x290>)
    23c8:	ldr	r0, [pc, #616]	; (2634 <menu2()+0x28c>)
    23ca:	bl	1efc <Print::println(char const*) [clone .isra.0]>
      rtc_get_datetime(&t);
    23ce:	add	r0, sp, #24
    23d0:	bl	3c66 <rtc_get_datetime(datetime_t*)>
      Serial.printf("Now:\n%4d-%02d-%02d %02d:%02d:%02d %d\n",
    23d4:	ldrsb.w	r3, [sp, #28]
    23d8:	ldrsh.w	r2, [sp, #24]
    23dc:	str	r3, [sp, #16]
    23de:	ldrsb.w	r3, [sp, #31]
    23e2:	ldr	r1, [pc, #600]	; (263c <menu2()+0x294>)
    23e4:	str	r3, [sp, #12]
    23e6:	ldrsb.w	r3, [sp, #30]
    23ea:	ldr	r0, [pc, #584]	; (2634 <menu2()+0x28c>)
    23ec:	str	r3, [sp, #8]
    23ee:	ldrsb.w	r3, [sp, #29]
    23f2:	str	r3, [sp, #4]
    23f4:	ldrsb.w	r3, [sp, #27]
    23f8:	str	r3, [sp, #0]
    23fa:	ldrsb.w	r3, [sp, #26]
    23fe:	bl	c758 <Print::printf(char const*, ...)>
      Serial.println(rtcGetTimestamp());
    2402:	bl	3c62 <rtcGetTimestamp()>
    2406:	mov	r1, r0
    2408:	ldr	r0, [pc, #552]	; (2634 <menu2()+0x28c>)
    240a:	bl	1efc <Print::println(char const*) [clone .isra.0]>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    240e:	ldr	r1, [pc, #560]	; (2640 <menu2()+0x298>)
    2410:	ldr	r0, [pc, #544]	; (2634 <menu2()+0x28c>)
    2412:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2416:	ldr	r3, [pc, #556]	; (2644 <menu2()+0x29c>)
	size_t println(long n)				{ return print(n) + println(); }
    2418:	ldr	r0, [pc, #536]	; (2634 <menu2()+0x28c>)
    241a:	ldr	r1, [r3, #0]
    241c:	bl	c70e <Print::print(long)>
    2420:	ldr	r0, [pc, #528]	; (2634 <menu2()+0x28c>)
    2422:	bl	c720 <Print::println()>
      Serial.print("shift (s) = "); Serial.println(shift);
    2426:	ldr	r1, [pc, #544]	; (2648 <menu2()+0x2a0>)
    2428:	ldr	r0, [pc, #520]	; (2634 <menu2()+0x28c>)
    242a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    242e:	ldr	r3, [pc, #540]	; (264c <menu2()+0x2a4>)
    2430:	ldr	r0, [pc, #512]	; (2634 <menu2()+0x28c>)
    2432:	ldrh	r1, [r3, #0]
    2434:	sxth	r1, r1
    2436:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("proc  (c) = "); Serial.println(proc);
    243a:	ldr	r1, [pc, #532]	; (2650 <menu2()+0x2a8>)
    243c:	ldr	r0, [pc, #500]	; (2634 <menu2()+0x28c>)
    243e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2442:	ldr	r3, [pc, #528]	; (2654 <menu2()+0x2ac>)
    2444:	ldr	r0, [pc, #492]	; (2634 <menu2()+0x28c>)
    2446:	ldrh	r1, [r3, #0]
    2448:	sxth	r1, r1
    244a:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("again (g) = "); Serial.println(again);
    244e:	ldr	r1, [pc, #520]	; (2658 <menu2()+0x2b0>)
    2450:	ldr	r0, [pc, #480]	; (2634 <menu2()+0x28c>)
    2452:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2456:	ldr	r3, [pc, #516]	; (265c <menu2()+0x2b4>)
    2458:	ldr	r0, [pc, #472]	; (2634 <menu2()+0x28c>)
    245a:	ldrh	r1, [r3, #0]
    245c:	sxth	r1, r1
    245e:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    2462:	ldr	r1, [pc, #508]	; (2660 <menu2()+0x2b8>)
    2464:	ldr	r0, [pc, #460]	; (2634 <menu2()+0x28c>)
    2466:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    246a:	ldr	r3, [pc, #504]	; (2664 <menu2()+0x2bc>)
    246c:	ldr	r0, [pc, #452]	; (2634 <menu2()+0x28c>)
    246e:	ldrh	r1, [r3, #0]
    2470:	uxth	r1, r1
    2472:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_on  (o) = "); Serial.println(t_on);
    2476:	ldr	r1, [pc, #496]	; (2668 <menu2()+0x2c0>)
    2478:	ldr	r0, [pc, #440]	; (2634 <menu2()+0x28c>)
    247a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    247e:	ldr	r3, [pc, #492]	; (266c <menu2()+0x2c4>)
    2480:	ldr	r0, [pc, #432]	; (2634 <menu2()+0x28c>)
    2482:	ldrh	r1, [r3, #0]
    2484:	uxth	r1, r1
    2486:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    248a:	ldr	r1, [pc, #484]	; (2670 <menu2()+0x2c8>)
    248c:	ldr	r0, [pc, #420]	; (2634 <menu2()+0x28c>)
    248e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2492:	ldr	r3, [pc, #480]	; (2674 <menu2()+0x2cc>)
    2494:	ldr	r0, [pc, #412]	; (2634 <menu2()+0x28c>)
    2496:	ldrh	r1, [r3, #0]
    2498:	uxth	r1, r1
    249a:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_1   (1) = "); Serial.println(h_1);
    249e:	ldr	r1, [pc, #472]	; (2678 <menu2()+0x2d0>)
    24a0:	ldr	r0, [pc, #400]	; (2634 <menu2()+0x28c>)
    24a2:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24a6:	ldr	r3, [pc, #468]	; (267c <menu2()+0x2d4>)
    24a8:	ldr	r0, [pc, #392]	; (2634 <menu2()+0x28c>)
    24aa:	ldrh	r1, [r3, #0]
    24ac:	uxth	r1, r1
    24ae:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_2   (2) = "); Serial.println(h_2);
    24b2:	ldr	r1, [pc, #460]	; (2680 <menu2()+0x2d8>)
    24b4:	ldr	r0, [pc, #380]	; (2634 <menu2()+0x28c>)
    24b6:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24ba:	ldr	r3, [pc, #456]	; (2684 <menu2()+0x2dc>)
    24bc:	ldr	r0, [pc, #372]	; (2634 <menu2()+0x28c>)
    24be:	ldrh	r1, [r3, #0]
    24c0:	uxth	r1, r1
    24c2:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_3   (3) = "); Serial.println(h_3);
    24c6:	ldr	r1, [pc, #448]	; (2688 <menu2()+0x2e0>)
    24c8:	ldr	r0, [pc, #360]	; (2634 <menu2()+0x28c>)
    24ca:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24ce:	ldr	r3, [pc, #444]	; (268c <menu2()+0x2e4>)
    24d0:	ldr	r0, [pc, #352]	; (2634 <menu2()+0x28c>)
    24d2:	ldrh	r1, [r3, #0]
    24d4:	uxth	r1, r1
    24d6:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("h_4   (4) = "); Serial.println(h_4);
    24da:	ldr	r1, [pc, #436]	; (2690 <menu2()+0x2e8>)
    24dc:	ldr	r0, [pc, #340]	; (2634 <menu2()+0x28c>)
    24de:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24e2:	ldr	r3, [pc, #432]	; (2694 <menu2()+0x2ec>)
    24e4:	ldr	r0, [pc, #332]	; (2634 <menu2()+0x28c>)
    24e6:	ldrh	r1, [r3, #0]
    24e8:	uxth	r1, r1
    24ea:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    24ee:	ldr	r1, [pc, #424]	; (2698 <menu2()+0x2f0>)
    24f0:	ldr	r0, [pc, #320]	; (2634 <menu2()+0x28c>)
    24f2:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    24f6:	ldr	r3, [pc, #420]	; (269c <menu2()+0x2f4>)
    24f8:	ldr	r0, [pc, #312]	; (2634 <menu2()+0x28c>)
    24fa:	ldrh	r1, [r3, #0]
    24fc:	uxth	r1, r1
    24fe:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    2502:	ldr	r1, [pc, #412]	; (26a0 <menu2()+0x2f8>)
    2504:	ldr	r0, [pc, #300]	; (2634 <menu2()+0x28c>)
    2506:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    250a:	ldr	r3, [pc, #408]	; (26a4 <menu2()+0x2fc>)
    250c:	ldr	r0, [pc, #292]	; (2634 <menu2()+0x28c>)
    250e:	ldrh	r1, [r3, #0]
    2510:	uxth	r1, r1
    2512:	bl	1ebc <Print::println(int) [clone .isra.0]>
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    2516:	ldr	r1, [pc, #400]	; (26a8 <menu2()+0x300>)
    2518:	ldr	r0, [pc, #280]	; (2634 <menu2()+0x28c>)
    251a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    251e:	ldr	r3, [pc, #396]	; (26ac <menu2()+0x304>)
    2520:	b.n	2614 <menu2()+0x26c>
    else if(ch=='d') // get date
    2522:	cmp	r0, #54	; 0x36
    2524:	bhi.n	2576 <menu2()+0x1ce>
    2526:	cmp	r0, #47	; 0x2f
    2528:	bls.n	257e <menu2()+0x1d6>
    252a:	subs	r0, #49	; 0x31
    252c:	cmp	r0, #5
    252e:	bhi.n	2516 <menu2()+0x16e>
    2530:	tbh	[pc, r0, lsl #1]
    2534:	.word	0x00ca00c4
    2538:	.word	0x00d600d0
    253c:	.word	0x00e200dc
    2540:	cmp	r0, #22
    2542:	bhi.n	257e <menu2()+0x1d6>
    2544:	tbh	[pc, r0, lsl #1]
    2548:	.word	0x001b003d
    254c:	.word	0x00220069
    2550:	.word	0x0054001b
    2554:	.word	0x001b006f
    2558:	.word	0x001b001b
    255c:	.word	0x001b001b
    2560:	.word	0x001b001b
    2564:	.word	0x001b0048
    2568:	.word	0x004e001b
    256c:	.word	0x00310061
    2570:	.word	0x001b001b
    2574:	.short	0x00de
    2576:	subs	r0, #97	; 0x61
    2578:	uxtb	r3, r0
    257a:	cmp	r3, #22
    257c:	bls.n	2540 <menu2()+0x198>
        virtual int available() { return usb_serial_available(); }
    257e:	bl	a73c <usb_serial_available>
    while(Serial.available()) ch=Serial.read();
    2582:	cmp	r0, #0
    2584:	bne.w	2716 <menu2()+0x36e>
}
    2588:	add	sp, #32
    258a:	pop	{r4, pc}
      rtc_get_datetime(&t);
    258c:	add	r0, sp, #24
    258e:	bl	3c66 <rtc_get_datetime(datetime_t*)>
      Serial.printf("date (d) = %4d-%02d-%02d\n", t.year,t.month,t.day);
    2592:	ldrsb.w	r3, [sp, #27]
    2596:	ldrsh.w	r2, [sp, #24]
    259a:	str	r3, [sp, #0]
    259c:	ldr	r1, [pc, #272]	; (26b0 <menu2()+0x308>)
    259e:	ldrsb.w	r3, [sp, #26]
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    25a2:	ldr	r0, [pc, #144]	; (2634 <menu2()+0x28c>)
    25a4:	bl	c758 <Print::printf(char const*, ...)>
    25a8:	b.n	257e <menu2()+0x1d6>
      rtc_get_datetime(&t);
    25aa:	add	r0, sp, #24
    25ac:	bl	3c66 <rtc_get_datetime(datetime_t*)>
      Serial.printf("time (t) = %02d:%02d:%02d\n", t.hour,t.min,t.sec);
    25b0:	ldrsb.w	r3, [sp, #31]
    25b4:	ldrsb.w	r2, [sp, #29]
    25b8:	str	r3, [sp, #0]
    25ba:	ldr	r1, [pc, #248]	; (26b4 <menu2()+0x30c>)
    25bc:	ldrsb.w	r3, [sp, #30]
    25c0:	b.n	25a2 <menu2()+0x1fa>
      Serial.print("t_acq (a) = "); Serial.println(t_acq);
    25c2:	ldr	r1, [pc, #156]	; (2660 <menu2()+0x2b8>)
    25c4:	ldr	r0, [pc, #108]	; (2634 <menu2()+0x28c>)
    25c6:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25ca:	ldr	r3, [pc, #152]	; (2664 <menu2()+0x2bc>)
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    25cc:	ldrh	r1, [r3, #0]
    25ce:	uxth	r1, r1
      Serial.print("params[0]  = "); Serial.println(params[0]);
    25d0:	ldr	r0, [pc, #96]	; (2634 <menu2()+0x28c>)
    25d2:	bl	1ebc <Print::println(int) [clone .isra.0]>
    25d6:	b.n	257e <menu2()+0x1d6>
      Serial.print("t_on (o)  = "); Serial.println(t_on);
    25d8:	ldr	r1, [pc, #220]	; (26b8 <menu2()+0x310>)
    25da:	ldr	r0, [pc, #88]	; (2634 <menu2()+0x28c>)
    25dc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25e0:	ldr	r3, [pc, #136]	; (266c <menu2()+0x2c4>)
    25e2:	b.n	25cc <menu2()+0x224>
      Serial.print("t_rep (r) = "); Serial.println(t_rep);
    25e4:	ldr	r1, [pc, #136]	; (2670 <menu2()+0x2c8>)
    25e6:	ldr	r0, [pc, #76]	; (2634 <menu2()+0x28c>)
    25e8:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25ec:	ldr	r3, [pc, #132]	; (2674 <menu2()+0x2cc>)
    25ee:	b.n	25cc <menu2()+0x224>
      Serial.print("fsamp (f) = "); Serial.println(fsamp);
    25f0:	ldr	r1, [pc, #76]	; (2640 <menu2()+0x298>)
    25f2:	ldr	r0, [pc, #64]	; (2634 <menu2()+0x28c>)
    25f4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    25f8:	ldr	r3, [pc, #72]	; (2644 <menu2()+0x29c>)
    25fa:	ldr	r0, [pc, #56]	; (2634 <menu2()+0x28c>)
    25fc:	ldr	r1, [r3, #0]
    25fe:	bl	c70e <Print::print(long)>
    2602:	ldr	r0, [pc, #48]	; (2634 <menu2()+0x28c>)
    2604:	bl	c720 <Print::println()>
    2608:	b.n	257e <menu2()+0x1d6>
      Serial.print("shift (s) = "); Serial.println(shift);
    260a:	ldr	r1, [pc, #60]	; (2648 <menu2()+0x2a0>)
    260c:	ldr	r0, [pc, #36]	; (2634 <menu2()+0x28c>)
    260e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2612:	ldr	r3, [pc, #56]	; (264c <menu2()+0x2a4>)
      Serial.print("d_0   (0) = "); Serial.println(d_0);
    2614:	ldrh	r1, [r3, #0]
    2616:	sxth	r1, r1
    2618:	b.n	25d0 <menu2()+0x228>
      Serial.print("proc  (c) = "); Serial.println(proc);
    261a:	ldr	r1, [pc, #52]	; (2650 <menu2()+0x2a8>)
    261c:	ldr	r0, [pc, #20]	; (2634 <menu2()+0x28c>)
    261e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2622:	ldr	r3, [pc, #48]	; (2654 <menu2()+0x2ac>)
    2624:	b.n	2614 <menu2()+0x26c>
      Serial.print("again (g) = "); Serial.println(again);
    2626:	ldr	r1, [pc, #48]	; (2658 <menu2()+0x2b0>)
    2628:	ldr	r0, [pc, #8]	; (2634 <menu2()+0x28c>)
    262a:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    262e:	ldr	r3, [pc, #44]	; (265c <menu2()+0x2b4>)
    2630:	b.n	2614 <menu2()+0x26c>
    2632:	nop
    2634:	.word	0x20001d30
    2638:	.word	0x200010c2
    263c:	.word	0x20000eb8
    2640:	.word	0x20000ede
    2644:	.word	0x200022d4
    2648:	.word	0x20000eeb
    264c:	.word	0x20015468
    2650:	.word	0x20000ef8
    2654:	.word	0x200153c4
    2658:	.word	0x20000f05
    265c:	.word	0x200022e8
    2660:	.word	0x20000f12
    2664:	.word	0x200022f2
    2668:	.word	0x20000f1f
    266c:	.word	0x200022f4
    2670:	.word	0x20000f2c
    2674:	.word	0x2001546a
    2678:	.word	0x20000f39
    267c:	.word	0x200153c0
    2680:	.word	0x20000f46
    2684:	.word	0x200022ec
    2688:	.word	0x20000f53
    268c:	.word	0x200022ee
    2690:	.word	0x20000f60
    2694:	.word	0x200022f0
    2698:	.word	0x20000f6d
    269c:	.word	0x200022ea
    26a0:	.word	0x20000f7a
    26a4:	.word	0x200153ba
    26a8:	.word	0x20000f87
    26ac:	.word	0x200153b8
    26b0:	.word	0x20000f94
    26b4:	.word	0x20000fae
    26b8:	.word	0x20000fc9
      Serial.print("h_1  (1) = "); Serial.println(h_1);
    26bc:	ldr	r1, [pc, #92]	; (271c <menu2()+0x374>)
    26be:	ldr	r0, [pc, #96]	; (2720 <menu2()+0x378>)
    26c0:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26c4:	ldr	r3, [pc, #92]	; (2724 <menu2()+0x37c>)
    26c6:	b.n	25cc <menu2()+0x224>
      Serial.print("h_2  (2) = "); Serial.println(h_2);
    26c8:	ldr	r1, [pc, #92]	; (2728 <menu2()+0x380>)
    26ca:	ldr	r0, [pc, #84]	; (2720 <menu2()+0x378>)
    26cc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26d0:	ldr	r3, [pc, #88]	; (272c <menu2()+0x384>)
    26d2:	b.n	25cc <menu2()+0x224>
      Serial.print("h_3  (3) = "); Serial.println(h_3);
    26d4:	ldr	r1, [pc, #88]	; (2730 <menu2()+0x388>)
    26d6:	ldr	r0, [pc, #72]	; (2720 <menu2()+0x378>)
    26d8:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26dc:	ldr	r3, [pc, #84]	; (2734 <menu2()+0x38c>)
    26de:	b.n	25cc <menu2()+0x224>
      Serial.print("h_4  (4) = "); Serial.println(h_4);
    26e0:	ldr	r1, [pc, #84]	; (2738 <menu2()+0x390>)
    26e2:	ldr	r0, [pc, #60]	; (2720 <menu2()+0x378>)
    26e4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26e8:	ldr	r3, [pc, #80]	; (273c <menu2()+0x394>)
    26ea:	b.n	25cc <menu2()+0x224>
      Serial.print("d_on  (5) = "); Serial.println(d_on);
    26ec:	ldr	r1, [pc, #80]	; (2740 <menu2()+0x398>)
    26ee:	ldr	r0, [pc, #48]	; (2720 <menu2()+0x378>)
    26f0:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    26f4:	ldr	r3, [pc, #76]	; (2744 <menu2()+0x39c>)
    26f6:	b.n	25cc <menu2()+0x224>
      Serial.print("d_rep (6) = "); Serial.println(d_rep);
    26f8:	ldr	r1, [pc, #76]	; (2748 <menu2()+0x3a0>)
    26fa:	ldr	r0, [pc, #36]	; (2720 <menu2()+0x378>)
    26fc:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2700:	ldr	r3, [pc, #72]	; (274c <menu2()+0x3a4>)
    2702:	b.n	25cc <menu2()+0x224>
    { uint16_t *params=loadParameters();
    2704:	bl	2264 <loadParameters()>
    2708:	mov	r4, r0
      Serial.print("params[0]  = "); Serial.println(params[0]);
    270a:	ldr	r1, [pc, #68]	; (2750 <menu2()+0x3a8>)
    270c:	ldr	r0, [pc, #16]	; (2720 <menu2()+0x378>)
    270e:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2712:	ldrh	r1, [r4, #0]
    2714:	b.n	25d0 <menu2()+0x228>
        virtual int read() { return usb_serial_getchar(); }
    2716:	bl	a7b0 <usb_serial_getchar>
    271a:	b.n	257e <menu2()+0x1d6>
    271c:	.word	0x20000fd6
    2720:	.word	0x20001d30
    2724:	.word	0x200153c0
    2728:	.word	0x20000fe2
    272c:	.word	0x200022ec
    2730:	.word	0x20000fee
    2734:	.word	0x200022ee
    2738:	.word	0x20000ffa
    273c:	.word	0x200022f0
    2740:	.word	0x20000f6d
    2744:	.word	0x200022ea
    2748:	.word	0x20000f7a
    274c:	.word	0x200153ba
    2750:	.word	0x20001006

00002754 <menu(short)>:
{
    2754:	push	{r3, r4, r5, lr}
    2756:	mov	r4, r0
        virtual int available() { return usb_serial_available(); }
    2758:	bl	a73c <usb_serial_available>
  if(Serial.available())
    275c:	cmp	r0, #0
    275e:	beq.n	2816 <menu(short)+0xc2>
        virtual int read() { return usb_serial_getchar(); }
    2760:	bl	a7b0 <usb_serial_getchar>
    char ch=Serial.read();
    2764:	uxtb	r1, r0
    if(ch=='s') {Serial.print("\n Start"); adcStatus(); status=CLOSED;}
    2766:	cmp	r1, #115	; 0x73
    2768:	bne.n	277c <menu(short)+0x28>
    276a:	movs	r4, #0
    276c:	ldr	r1, [pc, #172]	; (281c <menu(short)+0xc8>)
    276e:	ldr	r0, [pc, #176]	; (2820 <menu(short)+0xcc>)
    2770:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    2774:	bl	3968 <adcStatus()>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2778:	ldr	r5, [pc, #164]	; (2820 <menu(short)+0xcc>)
    277a:	b.n	280e <menu(short)+0xba>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    277c:	cmp	r1, #101	; 0x65
    277e:	beq.n	27d4 <menu(short)+0x80>
    2780:	bhi.n	27aa <menu(short)+0x56>
    2782:	cmp	r1, #63	; 0x3f
    2784:	beq.n	27f6 <menu(short)+0xa2>
    2786:	bhi.n	27a0 <menu(short)+0x4c>
    2788:	cmp	r1, #33	; 0x21
    278a:	beq.n	27fc <menu(short)+0xa8>
    278c:	cmp	r1, #58	; 0x3a
    278e:	beq.n	27ec <menu(short)+0x98>
    else {Serial.print(ch); Serial.println("\nAllowed commands: 's','e','m','r'. See also '?p' for parameters"); }
    2790:	ldr	r0, [pc, #140]	; (2820 <menu(short)+0xcc>)
    2792:	bl	1ece <Print::print(char) [clone .isra.0]>
    2796:	ldr	r1, [pc, #140]	; (2824 <menu(short)+0xd0>)
    2798:	ldr	r0, [pc, #132]	; (2820 <menu(short)+0xcc>)
    279a:	bl	1efc <Print::println(char const*) [clone .isra.0]>
    279e:	b.n	2778 <menu(short)+0x24>
    27a0:	cmp	r1, #98	; 0x62
    27a2:	bne.n	2790 <menu(short)+0x3c>
    else if(ch=='b') {reboot();}
    27a4:	bl	248 <reboot()>
    27a8:	b.n	2778 <menu(short)+0x24>
    27aa:	cmp	r1, #114	; 0x72
    27ac:	beq.n	27e0 <menu(short)+0x8c>
    27ae:	cmp	r1, #120	; 0x78
    27b0:	beq.n	27e6 <menu(short)+0x92>
    27b2:	cmp	r1, #109	; 0x6d
    27b4:	bne.n	2790 <menu(short)+0x3c>
    else if(ch=='m') {monitor=1-monitor; Serial.print("\n Monitor "); Serial.print(monitor); }
    27b6:	ldr	r5, [pc, #112]	; (2828 <menu(short)+0xd4>)
    27b8:	ldr	r1, [pc, #112]	; (282c <menu(short)+0xd8>)
    27ba:	ldrh	r3, [r5, #0]
    27bc:	ldr	r0, [pc, #96]	; (2820 <menu(short)+0xcc>)
    27be:	rsb	r3, r3, #1
    27c2:	strh	r3, [r5, #0]
    27c4:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    27c8:	ldrsh.w	r1, [r5]
    27cc:	ldr	r0, [pc, #80]	; (2820 <menu(short)+0xcc>)
    27ce:	bl	c70e <Print::print(long)>
    27d2:	b.n	2778 <menu(short)+0x24>
    else if(ch=='e') {Serial.print("\n Stop"); status=MUSTSTOP;}
    27d4:	ldr	r1, [pc, #88]	; (2830 <menu(short)+0xdc>)
    27d6:	movs	r4, #5
    27d8:	ldr	r0, [pc, #68]	; (2820 <menu(short)+0xcc>)
    27da:	bl	1ef8 <Print::print(char const*) [clone .isra.0]>
    27de:	b.n	2778 <menu(short)+0x24>
    else if(ch=='r') {resetUSB();}
    27e0:	bl	218 <resetUSB()>
    27e4:	b.n	2778 <menu(short)+0x24>
    else if(ch=='x') {powerDown();}
    27e6:	bl	2fb4 <powerDown()>
    27ea:	b.n	2778 <menu(short)+0x24>
    else if(ch==':') status=menu1(status); 
    27ec:	mov	r0, r4
    27ee:	bl	21f0 <menu1(short)>
    27f2:	mov	r4, r0
    27f4:	b.n	2778 <menu(short)+0x24>
    else if(ch=='?') menu2(); 
    27f6:	bl	23a8 <menu2()>
    27fa:	b.n	2778 <menu(short)+0x24>
    else if(ch=='!') menu3(); 
    27fc:	bl	1f80 <menu3()>
    2800:	b.n	2778 <menu(short)+0x24>
    2802:	bl	a7b0 <usb_serial_getchar>
    while(Serial.available()) { ch=Serial.read(); Serial.print(ch);} // clean-up
    2806:	uxtb	r1, r0
    2808:	mov	r0, r5
    280a:	bl	1ece <Print::print(char) [clone .isra.0]>
        virtual int available() { return usb_serial_available(); }
    280e:	bl	a73c <usb_serial_available>
    2812:	cmp	r0, #0
    2814:	bne.n	2802 <menu(short)+0xae>
}
    2816:	mov	r0, r4
    2818:	pop	{r3, r4, r5, pc}
    281a:	nop
    281c:	.word	0x20000e3d
    2820:	.word	0x20001d30
    2824:	.word	0x20000e57
    2828:	.word	0x200153c2
    282c:	.word	0x20000e4c
    2830:	.word	0x20000e45

00002834 <getStore()>:

uint16_t *getStore(void) {return store;}
    2834:	ldr	r0, [pc, #0]	; (2838 <getStore()+0x4>)
    2836:	bx	lr
    2838:	.word	0x20015394

0000283c <getDataCount()>:
  #endif
  static uint32_t data_buffer[MAXBUF][NBUF_ACQ];
  volatile static int head=0;
  volatile static int tail=0;
  
  uint16_t __not_in_flash_func(getDataCount)(void) { int num = tail-head; return num<0 ? num+MAXBUF : num; }
    283c:	ldr	r3, [pc, #16]	; (2850 <getDataCount()+0x14>)
    283e:	ldr	r0, [r3, #0]
    2840:	ldr	r3, [pc, #16]	; (2854 <getDataCount()+0x18>)
    2842:	ldr	r3, [r3, #0]
    2844:	subs	r0, r0, r3
    2846:	it	mi
    2848:	addmi.w	r0, r0, #4608	; 0x1200
    284c:	uxth	r0, r0
    284e:	bx	lr
    2850:	.word	0x200141e8
    2854:	.word	0x200141e4

00002858 <queue_isBusy()>:
  int __not_in_flash_func(queue_isBusy)(void) { return queue_busy; }
    2858:	ldr	r3, [pc, #4]	; (2860 <queue_isBusy()+0x8>)
    285a:	ldr	r0, [r3, #0]
    285c:	bx	lr
    285e:	nop
    2860:	.word	0x2000dfd4

00002864 <pushData(unsigned long*)>:

  uint16_t __not_in_flash_func(pushData)(uint32_t *data)
  {
    2864:	push	{r3, r4, r5, r6, r7, lr}
//    while(queue_busy); 
    queue_busy=1;
    2866:	movs	r4, #1
    2868:	ldr	r5, [pc, #72]	; (28b4 <pushData(unsigned long*)+0x50>)
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    286a:	ldr	r6, [pc, #76]	; (28b8 <pushData(unsigned long*)+0x54>)
    286c:	mov.w	r7, #4608	; 0x1200
    queue_busy=1;
    2870:	str	r4, [r5, #0]
  {
    2872:	mov	r1, r0
    if ( (tail+1)%MAXBUF == head ) {queue_busy=0; return 0;} // signal full
    2874:	ldr	r3, [r6, #0]
    2876:	ldr	r2, [pc, #68]	; (28bc <pushData(unsigned long*)+0x58>)
    2878:	add	r3, r4
    287a:	ldr	r2, [r2, #0]
    287c:	sdiv	r0, r3, r7
    2880:	mls	r3, r7, r0, r3
    2884:	cmp	r3, r2
    2886:	bne.n	288e <pushData(unsigned long*)+0x2a>
    2888:	movs	r0, #0
    288a:	str	r0, [r5, #0]
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    tail = (tail+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    288c:	pop	{r3, r4, r5, r6, r7, pc}
    memcpy(data_buffer[tail],data,4*NBUF_ACQ);
    288e:	ldr	r3, [pc, #48]	; (28c0 <pushData(unsigned long*)+0x5c>)
    2890:	mov.w	r2, #512	; 0x200
    2894:	ldr	r0, [r6, #0]
    2896:	add.w	r0, r3, r0, lsl #9
    289a:	bl	a254 <memcpy>
    tail = (tail+1)%MAXBUF;
    289e:	ldr	r3, [r6, #0]
    return 1; // signal success.
    28a0:	mov	r0, r4
    tail = (tail+1)%MAXBUF;
    28a2:	adds	r3, #1
    28a4:	sdiv	r2, r3, r7
    28a8:	mls	r3, r7, r2, r3
    28ac:	str	r3, [r6, #0]
    queue_busy=0;
    28ae:	movs	r3, #0
    28b0:	str	r3, [r5, #0]
    return 1; // signal success.
    28b2:	b.n	288c <pushData(unsigned long*)+0x28>
    28b4:	.word	0x2000dfd4
    28b8:	.word	0x200141e8
    28bc:	.word	0x200141e4
    28c0:	.word	0x70000000

000028c4 <pullData(unsigned long*)>:
  
  uint16_t __not_in_flash_func(pullData)(uint32_t *data)
  {
    28c4:	push	{r4, r5, r6, lr}
//    while(queue_busy); 
    queue_busy=1;
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28c6:	ldr	r3, [pc, #64]	; (2908 <pullData(unsigned long*)+0x44>)
    queue_busy=1;
    28c8:	movs	r4, #1
    28ca:	ldr	r6, [pc, #64]	; (290c <pullData(unsigned long*)+0x48>)
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28cc:	ldr	r5, [pc, #64]	; (2910 <pullData(unsigned long*)+0x4c>)
    queue_busy=1;
    28ce:	str	r4, [r6, #0]
    if ( head==tail ) {queue_busy=0; return 0;} // signal empty
    28d0:	ldr	r2, [r5, #0]
    28d2:	ldr	r3, [r3, #0]
    28d4:	cmp	r2, r3
    28d6:	bne.n	28de <pullData(unsigned long*)+0x1a>
    28d8:	movs	r0, #0
    28da:	str	r0, [r6, #0]
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    head = (head+1)%MAXBUF;
    queue_busy=0;
    return 1; // signal success.
  }
    28dc:	pop	{r4, r5, r6, pc}
    memcpy(data,data_buffer[head],4*NBUF_ACQ);
    28de:	ldr	r3, [pc, #52]	; (2914 <pullData(unsigned long*)+0x50>)
    28e0:	mov.w	r2, #512	; 0x200
    28e4:	ldr	r1, [r5, #0]
    28e6:	add.w	r1, r3, r1, lsl #9
    28ea:	bl	a254 <memcpy>
    head = (head+1)%MAXBUF;
    28ee:	ldr	r3, [r5, #0]
    28f0:	mov.w	r2, #4608	; 0x1200
    return 1; // signal success.
    28f4:	mov	r0, r4
    head = (head+1)%MAXBUF;
    28f6:	adds	r3, #1
    28f8:	sdiv	r1, r3, r2
    28fc:	mls	r3, r2, r1, r3
    2900:	str	r3, [r5, #0]
    queue_busy=0;
    2902:	movs	r3, #0
    2904:	str	r3, [r6, #0]
    return 1; // signal success.
    2906:	b.n	28dc <pullData(unsigned long*)+0x18>
    2908:	.word	0x200141e8
    290c:	.word	0x2000dfd4
    2910:	.word	0x200141e4
    2914:	.word	0x70000000

00002918 <dateTime(unsigned short*, unsigned short*, unsigned char*)>:
{
    2918:	push	{r0, r1, r4, r5, r6, lr}
    291a:	mov	r6, r0
    rtc_get_datetime(&t);
    291c:	mov	r0, sp
{
    291e:	mov	r5, r2
    2920:	mov	r4, r1
    rtc_get_datetime(&t);
    2922:	bl	3c66 <rtc_get_datetime(datetime_t*)>
  year -= 1980;
    2926:	ldrh.w	r2, [sp]
    *date = FS_DATE(t.year,t.month,t.day);
    292a:	ldrsb.w	r3, [sp, #3]
    292e:	subw	r2, r2, #1980	; 0x7bc
    2932:	uxth	r2, r2
         year << 9 | month << 5 | day;
    2934:	cmp	r2, #127	; 0x7f
    2936:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2938:	ldrb.w	r1, [sp, #2]
  return year > 127 || month > 12 || day > 31 ? 0 :
    293c:	cmp	r1, #12
    293e:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
    2940:	uxtb	r3, r3
    2942:	cmp	r3, #31
    2944:	bhi.n	2982 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6a>
         year << 9 | month << 5 | day;
    2946:	orr.w	r3, r3, r1, lsl #5
    294a:	orr.w	r3, r3, r2, lsl #9
    294e:	uxth	r3, r3
    *time = FS_TIME(t.hour,t.min,t.sec);
    2950:	ldrb.w	r1, [sp, #5]
    2954:	ldrsb.w	r2, [sp, #7]
         hour << 11 | minute << 5 | second >> 1;
    2958:	cmp	r1, #23
    *date = FS_DATE(t.year,t.month,t.day);
    295a:	strh	r3, [r6, #0]
    295c:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    *time = FS_TIME(t.hour,t.min,t.sec);
    295e:	ldrb.w	r3, [sp, #6]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    2962:	cmp	r3, #59	; 0x3b
    2964:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
    2966:	uxtb	r2, r2
    2968:	cmp	r2, #59	; 0x3b
    296a:	bhi.n	2986 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x6e>
         hour << 11 | minute << 5 | second >> 1;
    296c:	lsls	r3, r3, #5
    296e:	orr.w	r3, r3, r1, lsl #11
    2972:	orr.w	r3, r3, r2, lsr #1
    2976:	uxth	r3, r3
    2978:	strh	r3, [r4, #0]
    *ms10 = 0;
    297a:	movs	r3, #0
    297c:	strb	r3, [r5, #0]
}
    297e:	add	sp, #8
    2980:	pop	{r4, r5, r6, pc}
         year << 9 | month << 5 | day;
    2982:	movs	r3, #0
    2984:	b.n	2950 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x38>
         hour << 11 | minute << 5 | second >> 1;
    2986:	movs	r3, #0
    2988:	b.n	2978 <dateTime(unsigned short*, unsigned short*, unsigned char*)+0x60>

0000298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>:
  bool seekSet(uint64_t pos) {
    298a:	push	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    298c:	ldr	r5, [r0, #56]	; 0x38
  bool seekSet(uint64_t pos) {
    298e:	mov	r1, r2
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2990:	cbz	r5, 299c <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x12>
    2992:	cbnz	r3, 29a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
    2994:	mov	r0, r5
  }
    2996:	pop	{r4, r5}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    2998:	b.w	72a6 <FatFile::seekSet(unsigned long)>
    299c:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->seekSet(pos) : false;
    299e:	cbz	r0, 29a6 <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]+0x1c>
  }
    29a0:	pop	{r4, r5}
           m_xFile ? m_xFile->seekSet(pos) : false;
    29a2:	b.w	5c1c <ExFatFile::seekSet(unsigned long long)>
  }
    29a6:	pop	{r4, r5}
    29a8:	bx	lr

000029aa <Print::print(unsigned long) [clone .isra.0]>:
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29aa:	movs	r3, #0
    29ac:	movs	r2, #10
    29ae:	b.w	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

000029b2 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    29b2:	push	{r0, r1, r4, lr}
    29b4:	mov	r4, r0
    29b6:	cbz	r1, 29d2 <Print::write(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    29b8:	mov	r0, r1
    29ba:	str	r1, [sp, #4]
    29bc:	bl	edd0 <strlen>
    29c0:	ldr	r3, [r4, #0]
    29c2:	mov	r2, r0
    29c4:	ldr	r1, [sp, #4]
    29c6:	ldr	r3, [r3, #4]
    29c8:	mov	r0, r4
    29ca:	add	sp, #8
    29cc:	ldmia.w	sp!, {r4, lr}
    29d0:	bx	r3
    29d2:	add	sp, #8
    29d4:	pop	{r4, pc}

000029d6 <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    29d6:	b.w	29b2 <Print::write(char const*) [clone .isra.0]>

000029da <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    29da:	push	{r4, lr}
    29dc:	mov	r4, r0
	size_t print(const char s[])			{ return write(s); }
    29de:	bl	29b2 <Print::write(char const*) [clone .isra.0]>
	size_t println(const char s[])			{ return print(s) + println(); }
    29e2:	mov	r0, r4
    29e4:	ldmia.w	sp!, {r4, lr}
    29e8:	b.w	c720 <Print::println()>

000029ec <FsBaseFile::sync()>:
    return m_fFile ? m_fFile->sync() :
    29ec:	ldr	r3, [r0, #56]	; 0x38
    29ee:	cbz	r3, 29f6 <FsBaseFile::sync()+0xa>
    29f0:	mov	r0, r3
    29f2:	b.w	74f0 <FatFile::sync()>
    29f6:	ldr	r0, [r0, #60]	; 0x3c
           m_xFile ? m_xFile->sync() : false;
    29f8:	cbz	r0, 29fe <FsBaseFile::sync()+0x12>
    29fa:	b.w	6850 <ExFatFile::sync()>
  }
    29fe:	bx	lr

00002a00 <timeStamp()>:
{
    2a00:	push	{r4, lr}
    2a02:	sub	sp, #24
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a04:	ldr	r4, [pc, #52]	; (2a3c <timeStamp()+0x3c>)
  rtc_get_datetime(&t);
    2a06:	add	r0, sp, #16
    2a08:	bl	3c66 <rtc_get_datetime(datetime_t*)>
  sprintf(date_time,"%04d%02d%02d_%02d%02d%02d",t.year,t.month,t.day,t.hour,t.min,t.sec);
    2a0c:	ldrsb.w	r3, [sp, #23]
    2a10:	ldrsh.w	r2, [sp, #16]
    2a14:	mov	r0, r4
    2a16:	str	r3, [sp, #12]
    2a18:	ldrsb.w	r3, [sp, #22]
    2a1c:	ldr	r1, [pc, #32]	; (2a40 <timeStamp()+0x40>)
    2a1e:	str	r3, [sp, #8]
    2a20:	ldrsb.w	r3, [sp, #21]
    2a24:	str	r3, [sp, #4]
    2a26:	ldrsb.w	r3, [sp, #19]
    2a2a:	str	r3, [sp, #0]
    2a2c:	ldrsb.w	r3, [sp, #18]
    2a30:	bl	e934 <siprintf>
}
    2a34:	mov	r0, r4
    2a36:	add	sp, #24
    2a38:	pop	{r4, pc}
    2a3a:	nop
    2a3c:	.word	0x2001553a
    2a40:	.word	0x20000cc8

00002a44 <wavHeaderInit(long, long, long, int)>:
{
    2a44:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  memcpy(wav_hdr.rId,"RIFF",4);
    2a46:	ldr	r4, [pc, #196]	; (2b0c <wavHeaderInit(long, long, long, int)+0xc8>)
  int nbytes=nbits/8;
    2a48:	cmp	r2, #0
    2a4a:	str	r3, [sp, #4]
    2a4c:	mov	r5, r2
  memcpy(wav_hdr.rId,"RIFF",4);
    2a4e:	ldr	r3, [pc, #192]	; (2b10 <wavHeaderInit(long, long, long, int)+0xcc>)
  int nbytes=nbits/8;
    2a50:	it	lt
    2a52:	addlt	r5, r2, #7
  wav_hdr.nSamplesPerSec=fsamp;
    2a54:	str	r0, [r4, #24]
  wav_hdr.nChannels=nchan;
    2a56:	uxth	r6, r1
  memcpy(wav_hdr.rId,"RIFF",4);
    2a58:	str	r3, [r4, #0]
  memcpy(wav_hdr.wId,"WAVE",4);
    2a5a:	sub.w	r3, r3, #15728640	; 0xf00000
  int nbytes=nbits/8;
    2a5e:	asrs	r5, r5, #3
  wav_hdr.nBitsPerSamples=nbits;
    2a60:	strh	r2, [r4, #34]	; 0x22
  memcpy(wav_hdr.wId,"WAVE",4);
    2a62:	subw	r3, r3, #2043	; 0x7fb
  wav_hdr.nChannels=nchan;
    2a66:	strh	r6, [r4, #22]
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a68:	muls	r0, r5
  memcpy(wav_hdr.wId,"WAVE",4);
    2a6a:	str	r3, [r4, #8]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a6c:	add.w	r3, r3, #3674210304	; 0xdb000000
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a70:	smulbb	r5, r5, r6
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a74:	muls	r1, r0
  memcpy(wav_hdr.fId,"fmt ",4);
    2a76:	add.w	r3, r3, #1974272	; 0x1e2000
  strcpy(&wav_hdr.info[0], MAGIC);
    2a7a:	add.w	r0, r4, #44	; 0x2c
  wav_hdr.nAvgBytesPerSec=fsamp*nbytes*nchan;
    2a7e:	str	r1, [r4, #28]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a80:	addw	r3, r3, #3087	; 0xc0f
  strcpy(&wav_hdr.info[0], MAGIC);
    2a84:	ldr	r1, [pc, #140]	; (2b14 <wavHeaderInit(long, long, long, int)+0xd0>)
  wav_hdr.nBlockAlign=nchan*nbytes;
    2a86:	strh	r5, [r4, #32]
  memcpy(wav_hdr.fId,"fmt ",4);
    2a88:	str	r3, [r4, #12]
  memcpy(wav_hdr.dId,"data",4);
    2a8a:	add.w	r3, r3, #1090519040	; 0x41000000
    2a8e:	subw	r3, r3, #3074	; 0xc02
    2a92:	str.w	r3, [r4, #504]	; 0x1f8
  memcpy(wav_hdr.iId,"info",4);
    2a96:	add.w	r3, r3, #218107136	; 0xd000d00
    2a9a:	add.w	r3, r3, #15859712	; 0xf20000
    2a9e:	adds	r3, #5
    2aa0:	str	r3, [r4, #36]	; 0x24
  wav_hdr.rLen = 512-2*4; // will be updated at closing
    2aa2:	mov.w	r3, #504	; 0x1f8
    2aa6:	str	r3, [r4, #4]
  wav_hdr.fLen = 0x10;
    2aa8:	movs	r3, #16
    2aaa:	str	r3, [r4, #16]
  wav_hdr.iLen = 512 - 13*4;
    2aac:	mov.w	r3, #460	; 0x1cc
    2ab0:	str	r3, [r4, #40]	; 0x28
  wav_hdr.dLen = 0; // will be updated at closing
    2ab2:	movs	r3, #0
    2ab4:	str.w	r3, [r4, #508]	; 0x1fc
  wav_hdr.nFormatTag=1;
    2ab8:	movs	r3, #1
    2aba:	strh	r3, [r4, #20]
    2abc:	ldr	r3, [pc, #88]	; (2b18 <wavHeaderInit(long, long, long, int)+0xd4>)
    2abe:	ldr	r5, [r3, #0]
  strcpy(&wav_hdr.info[0], MAGIC);
    2ac0:	bl	ed14 <strcpy>
  strcpy(&wav_hdr.info[4], timeStamp());
    2ac4:	bl	2a00 <timeStamp()>
    2ac8:	mov	r1, r0
    2aca:	add.w	r0, r4, #48	; 0x30
    2ace:	bl	ed14 <strcpy>
  sprintf(&wav_hdr.info[20]," %8x",serNum);
    2ad2:	ldr	r2, [sp, #4]
    2ad4:	ldr	r1, [pc, #68]	; (2b1c <wavHeaderInit(long, long, long, int)+0xd8>)
    2ad6:	add.w	r0, r4, #64	; 0x40
    2ada:	bl	e934 <siprintf>
  memcpy(&wav_hdr.info[32], &tt,4);
    2ade:	str	r5, [r4, #76]	; 0x4c
  memcpy(&wav_hdr.info[36], getStore(),16*2);
    2ae0:	bl	2834 <getStore()>
    2ae4:	adds	r4, #80	; 0x50
    2ae6:	mov	r3, r0
    2ae8:	add.w	r5, r0, #32
    2aec:	ldr	r0, [r3, #0]
    2aee:	adds	r3, #8
    2af0:	ldr.w	r1, [r3, #-4]
    2af4:	mov	r2, r4
    2af6:	cmp	r3, r5
    2af8:	stmia	r2!, {r0, r1}
    2afa:	mov	r4, r2
    2afc:	bne.n	2aec <wavHeaderInit(long, long, long, int)+0xa8>
  strcpy(&wav_hdr.info[68]," end");
    2afe:	ldr	r1, [pc, #32]	; (2b20 <wavHeaderInit(long, long, long, int)+0xdc>)
    2b00:	ldr	r0, [pc, #32]	; (2b24 <wavHeaderInit(long, long, long, int)+0xe0>)
    2b02:	bl	ed14 <strcpy>
}
    2b06:	ldr	r0, [pc, #4]	; (2b0c <wavHeaderInit(long, long, long, int)+0xc8>)
    2b08:	add	sp, #12
    2b0a:	pop	{r4, r5, r6, r7, pc}
    2b0c:	.word	0x200143f4
    2b10:	.word	0x46464952
    2b14:	.word	0x20000d80
    2b18:	.word	0x20015374
    2b1c:	.word	0x20000d85
    2b20:	.word	0x20000d8a
    2b24:	.word	0x20014464

00002b28 <wavHeaderUpdate(long)>:
  wav_hdr.dLen = nbytes;
    2b28:	ldr	r3, [pc, #12]	; (2b38 <wavHeaderUpdate(long)+0x10>)
  wav_hdr.rLen += wav_hdr.dLen;
    2b2a:	ldr	r2, [r3, #4]
  wav_hdr.dLen = nbytes;
    2b2c:	str.w	r0, [r3, #508]	; 0x1fc
  wav_hdr.rLen += wav_hdr.dLen;
    2b30:	add	r2, r0
}
    2b32:	mov	r0, r3
  wav_hdr.rLen += wav_hdr.dLen;
    2b34:	str	r2, [r3, #4]
}
    2b36:	bx	lr
    2b38:	.word	0x200143f4

00002b3c <wavHeaderWrite(char*)>:
    return m_fFile ? m_fFile->curPosition() :
    2b3c:	ldr	r3, [pc, #76]	; (2b8c <wavHeaderWrite(char*)+0x50>)
    2b3e:	ldr	r2, [r3, #72]	; 0x48
{ 
    2b40:	push	{r4, r5, r6, lr}
    2b42:	mov	r6, r0
    2b44:	cbz	r2, 2b7a <wavHeaderWrite(char*)+0x3e>
    2b46:	ldr	r4, [r2, #20]
    2b48:	movs	r5, #0
  Serial.printf("\n fpos=%d ",fpos);
    2b4a:	mov	r2, r4
    2b4c:	mov	r3, r5
    2b4e:	ldr	r1, [pc, #64]	; (2b90 <wavHeaderWrite(char*)+0x54>)
    2b50:	ldr	r0, [pc, #64]	; (2b94 <wavHeaderWrite(char*)+0x58>)
    2b52:	bl	c758 <Print::printf(char const*, ...)>
  file.seekSet(0);
    2b56:	movs	r3, #0
    2b58:	movs	r2, #0
    2b5a:	ldr	r0, [pc, #60]	; (2b98 <wavHeaderWrite(char*)+0x5c>)
    2b5c:	bl	298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
  file.write((const uint8_t*)wav_hdr,512);
    2b60:	mov.w	r2, #512	; 0x200
    2b64:	mov	r1, r6
    2b66:	ldr	r0, [pc, #36]	; (2b8c <wavHeaderWrite(char*)+0x50>)
    2b68:	bl	1f4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>
  file.seekSet(fpos);
    2b6c:	mov	r2, r4
    2b6e:	mov	r3, r5
    2b70:	ldr	r0, [pc, #36]	; (2b98 <wavHeaderWrite(char*)+0x5c>)
}
    2b72:	ldmia.w	sp!, {r4, r5, r6, lr}
  file.seekSet(fpos);
    2b76:	b.w	298a <FsBaseFile::seekSet(unsigned long long) [clone .isra.0]>
    2b7a:	ldr	r3, [r3, #76]	; 0x4c
           m_xFile ? m_xFile->curPosition() : 0;
    2b7c:	cbz	r3, 2b84 <wavHeaderWrite(char*)+0x48>
  uint64_t curPosition() const {return m_curPosition;}
    2b7e:	ldrd	r4, r5, [r3]
    2b82:	b.n	2b4a <wavHeaderWrite(char*)+0xe>
    2b84:	mov	r4, r3
    2b86:	mov	r5, r3
    2b88:	b.n	2b4a <wavHeaderWrite(char*)+0xe>
    2b8a:	nop
    2b8c:	.word	0x20014bb8
    2b90:	.word	0x20000d8f
    2b94:	.word	0x20001d30
    2b98:	.word	0x20014bc8

00002b9c <makeHeader(long*)>:
{
    2b9c:	push	{r4, lr}
    2b9e:	sub	sp, #32
    2ba0:	mov	r4, r0
    rtc_get_datetime(&t);
    2ba2:	add	r0, sp, #24
    2ba4:	bl	3c66 <rtc_get_datetime(datetime_t*)>
    sprintf((char *)header,"%s%04d%02d%02d_%02d%02d%02d",
    2ba8:	ldrsb.w	r3, [sp, #31]
    2bac:	ldr	r2, [pc, #156]	; (2c4c <makeHeader(long*)+0xb0>)
    2bae:	mov	r0, r4
    2bb0:	str	r3, [sp, #16]
    2bb2:	ldrsb.w	r3, [sp, #30]
    2bb6:	ldr	r1, [pc, #152]	; (2c50 <makeHeader(long*)+0xb4>)
    2bb8:	str	r3, [sp, #12]
    2bba:	ldrsb.w	r3, [sp, #29]
    2bbe:	str	r3, [sp, #8]
    2bc0:	ldrsb.w	r3, [sp, #27]
    2bc4:	str	r3, [sp, #4]
    2bc6:	ldrsb.w	r3, [sp, #26]
    2bca:	str	r3, [sp, #0]
    2bcc:	ldrsh.w	r3, [sp, #24]
    2bd0:	bl	e934 <siprintf>
    header[5] = 20;          // SW version
    2bd4:	movs	r3, #20
    2bd6:	str	r3, [r4, #20]
    header[6] = SerNum;      // serial number
    2bd8:	ldr	r3, [pc, #120]	; (2c54 <makeHeader(long*)+0xb8>)
    2bda:	ldr	r3, [r3, #0]
    2bdc:	str	r3, [r4, #24]
    header[7] = fsamp;
    2bde:	ldr	r3, [pc, #120]	; (2c58 <makeHeader(long*)+0xbc>)
    2be0:	ldr	r3, [r3, #0]
    2be2:	str	r3, [r4, #28]
    header[8] = NCHAN_ACQ;
    2be4:	movs	r3, #1
    2be6:	str	r3, [r4, #32]
    header[9] = t_acq;
    2be8:	ldr	r3, [pc, #112]	; (2c5c <makeHeader(long*)+0xc0>)
    2bea:	ldrh	r3, [r3, #0]
    2bec:	uxth	r3, r3
    2bee:	str	r3, [r4, #36]	; 0x24
    header[10] = t_on;
    2bf0:	ldr	r3, [pc, #108]	; (2c60 <makeHeader(long*)+0xc4>)
    2bf2:	ldrh	r3, [r3, #0]
    2bf4:	uxth	r3, r3
    2bf6:	str	r3, [r4, #40]	; 0x28
    header[11] = t_rep;
    2bf8:	ldr	r3, [pc, #104]	; (2c64 <makeHeader(long*)+0xc8>)
    2bfa:	ldrh	r3, [r3, #0]
    2bfc:	uxth	r3, r3
    2bfe:	str	r3, [r4, #44]	; 0x2c
    header[12] = proc;
    2c00:	ldr	r3, [pc, #100]	; (2c68 <makeHeader(long*)+0xcc>)
    2c02:	ldrh	r3, [r3, #0]
    2c04:	sxth	r3, r3
    2c06:	str	r3, [r4, #48]	; 0x30
    header[13] = shift;
    2c08:	ldr	r3, [pc, #96]	; (2c6c <makeHeader(long*)+0xd0>)
    2c0a:	ldrh	r3, [r3, #0]
    2c0c:	sxth	r3, r3
    2c0e:	str	r3, [r4, #52]	; 0x34
    header[14] = again;
    2c10:	ldr	r3, [pc, #92]	; (2c70 <makeHeader(long*)+0xd4>)
    2c12:	ldrh	r3, [r3, #0]
    2c14:	sxth	r3, r3
    2c16:	str	r3, [r4, #56]	; 0x38
    header[15] = dgain;
    2c18:	ldr	r3, [pc, #88]	; (2c74 <makeHeader(long*)+0xd8>)
    2c1a:	ldrh	r3, [r3, #0]
    2c1c:	sxth	r3, r3
    2c1e:	str	r3, [r4, #60]	; 0x3c
    2c20:	ldr	r3, [pc, #84]	; (2c78 <makeHeader(long*)+0xdc>)
    2c22:	ldr	r3, [r3, #0]
    header[16] = millis();
    2c24:	str	r3, [r4, #64]	; 0x40
    memcpy(&header[20], getStore(),16*2);
    2c26:	bl	2834 <getStore()>
    2c2a:	add.w	r3, r4, #80	; 0x50
    2c2e:	add.w	r2, r0, #32
    2c32:	ldr.w	r1, [r0], #4
    2c36:	cmp	r0, r2
    2c38:	str.w	r1, [r3], #4
    2c3c:	bne.n	2c32 <makeHeader(long*)+0x96>
    header[127]=0x55555555;
    2c3e:	mov.w	r3, #1431655765	; 0x55555555
}
    2c42:	movs	r0, #1
    header[127]=0x55555555;
    2c44:	str.w	r3, [r4, #508]	; 0x1fc
}
    2c48:	add	sp, #32
    2c4a:	pop	{r4, pc}
    2c4c:	.word	0x20000d80
    2c50:	.word	0x20000cc6
    2c54:	.word	0x20007dc8
    2c58:	.word	0x200022d4
    2c5c:	.word	0x200022f2
    2c60:	.word	0x200022f4
    2c64:	.word	0x2001546a
    2c68:	.word	0x200153c4
    2c6c:	.word	0x20015468
    2c70:	.word	0x200022e8
    2c74:	.word	0x200153bc
    2c78:	.word	0x20015374

00002c7c <checkEndOfFile(short)>:
  if(state==RUNNING)
    2c7c:	cmp	r0, #2
{ 
    2c7e:	push	{r4, lr}
    2c80:	mov	r4, r0
  if(state==RUNNING)
    2c82:	bne.n	2d2e <checkEndOfFile(short)+0xb2>
    uint32_t tt = rtc_get();
    2c84:	bl	b998 <rtc_get>
    uint32_t dt1 = tt % t_acq;
    2c88:	ldr	r3, [pc, #192]	; (2d4c <checkEndOfFile(short)+0xd0>)
    2c8a:	ldrh	r2, [r3, #0]
    2c8c:	uxth	r2, r2
    2c8e:	udiv	r3, r0, r2
    2c92:	mls	r3, r2, r3, r0
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2c96:	ldr	r2, [pc, #184]	; (2d50 <checkEndOfFile(short)+0xd4>)
    2c98:	ldr	r1, [r2, #0]
    dta = dt1;
    2c9a:	str	r3, [r2, #0]
    if(dt1<dta) state = DOCLOSE;  	  	// should close file and continue
    2c9c:	cmp	r3, r1
    2c9e:	bcs.n	2d2e <checkEndOfFile(short)+0xb2>
      if(t_rep>t_on)                      // and if foreseen  check for hibernation
    2ca0:	ldr	r4, [pc, #176]	; (2d54 <checkEndOfFile(short)+0xd8>)
    2ca2:	ldr	r1, [pc, #180]	; (2d58 <checkEndOfFile(short)+0xdc>)
    2ca4:	ldrh	r2, [r4, #0]
    2ca6:	ldrh	r3, [r1, #0]
    2ca8:	uxth	r2, r2
    2caa:	uxth	r3, r3
    2cac:	cmp	r2, r3
    2cae:	bhi.n	2d32 <checkEndOfFile(short)+0xb6>
      if(d_rep>d_on)                      // and if foreseen  check for hibernation
    2cb0:	ldr	r4, [pc, #168]	; (2d5c <checkEndOfFile(short)+0xe0>)
    2cb2:	ldr	r1, [pc, #172]	; (2d60 <checkEndOfFile(short)+0xe4>)
    2cb4:	ldrh	r2, [r4, #0]
    2cb6:	ldrh	r3, [r1, #0]
    2cb8:	uxth	r2, r2
    2cba:	uxth	r3, r3
    2cbc:	cmp	r2, r3
    2cbe:	bls.n	2cda <checkEndOfFile(short)+0x5e>
      { int32_t dd=tt/(24*3600);
    2cc0:	ldr	r3, [pc, #160]	; (2d64 <checkEndOfFile(short)+0xe8>)
        uint32_t dd2 = (dd % d_rep);
    2cc2:	ldrh	r2, [r4, #0]
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cc4:	ldrh	r1, [r1, #0]
        uint32_t dd2 = (dd % d_rep);
    2cc6:	uxth	r2, r2
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cc8:	uxth	r1, r1
      { int32_t dd=tt/(24*3600);
    2cca:	udiv	r3, r0, r3
        uint32_t dd2 = (dd % d_rep);
    2cce:	udiv	r4, r3, r2
    2cd2:	mls	r3, r2, r4, r3
        if(dd2>=d_on) state=DOHIBERNATE;  // should close file and hibernate
    2cd6:	cmp	r3, r1
    2cd8:	bcs.n	2d46 <checkEndOfFile(short)+0xca>
      uint32_t hh=(tt%(24*3600)/3600);
    2cda:	ldr	r2, [pc, #136]	; (2d64 <checkEndOfFile(short)+0xe8>)
    2cdc:	udiv	r3, r0, r2
    2ce0:	mls	r3, r2, r3, r0
    2ce4:	mov.w	r2, #3600	; 0xe10
    2ce8:	udiv	r3, r3, r2
      if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)))
    2cec:	ldr	r2, [pc, #120]	; (2d68 <checkEndOfFile(short)+0xec>)
    2cee:	ldrh	r2, [r2, #0]
    2cf0:	uxth	r2, r2
    2cf2:	cmp	r3, r2
    2cf4:	bcc.n	2d00 <checkEndOfFile(short)+0x84>
    2cf6:	ldr	r2, [pc, #116]	; (2d6c <checkEndOfFile(short)+0xf0>)
    2cf8:	ldrh	r2, [r2, #0]
    2cfa:	uxth	r2, r2
    2cfc:	cmp	r3, r2
    2cfe:	bcc.n	2d14 <checkEndOfFile(short)+0x98>
    2d00:	ldr	r2, [pc, #108]	; (2d70 <checkEndOfFile(short)+0xf4>)
    2d02:	ldrh	r2, [r2, #0]
    2d04:	uxth	r2, r2
    2d06:	cmp	r3, r2
    2d08:	bcc.n	2d46 <checkEndOfFile(short)+0xca>
    2d0a:	ldr	r2, [pc, #104]	; (2d74 <checkEndOfFile(short)+0xf8>)
    2d0c:	ldrh	r2, [r2, #0]
    2d0e:	uxth	r2, r2
    2d10:	cmp	r3, r2
    2d12:	bcs.n	2d46 <checkEndOfFile(short)+0xca>
      if(dd<(d_0+20000)) state=DOHIBERNATE;     // we are too early
    2d14:	ldr	r3, [pc, #96]	; (2d78 <checkEndOfFile(short)+0xfc>)
    2d16:	ldrh	r4, [r3, #0]
      uint32_t dd=tt/(24*3600);
    2d18:	ldr	r3, [pc, #72]	; (2d64 <checkEndOfFile(short)+0xe8>)
    2d1a:	udiv	r0, r0, r3
      if(dd<(d_0+20000)) state=DOHIBERNATE;     // we are too early
    2d1e:	movw	r3, #20000	; 0x4e20
    2d22:	sxtah	r4, r3, r4
    2d26:	cmp	r0, r4
    2d28:	ite	cc
    2d2a:	movcc	r4, #4
    2d2c:	movcs	r4, #3
}
    2d2e:	mov	r0, r4
    2d30:	pop	{r4, pc}
        uint32_t dt2 = (tt % t_rep);
    2d32:	ldrh	r3, [r4, #0]
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d34:	ldrh	r2, [r1, #0]
        uint32_t dt2 = (tt % t_rep);
    2d36:	uxth	r3, r3
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d38:	uxth	r2, r2
        uint32_t dt2 = (tt % t_rep);
    2d3a:	udiv	r1, r0, r3
    2d3e:	mls	r3, r3, r1, r0
        if(dt2>=t_on) state=DOHIBERNATE;  // should close file and hibernate
    2d42:	cmp	r3, r2
    2d44:	bcc.n	2cb0 <checkEndOfFile(short)+0x34>
      if(dd<(d_0+20000)) state=DOHIBERNATE;     // we are too early
    2d46:	movs	r4, #4
    2d48:	b.n	2d2e <checkEndOfFile(short)+0xb2>
    2d4a:	nop
    2d4c:	.word	0x200022f2
    2d50:	.word	0x2001483c
    2d54:	.word	0x2001546a
    2d58:	.word	0x200022f4
    2d5c:	.word	0x200153ba
    2d60:	.word	0x200022ea
    2d64:	.word	0x00015180
    2d68:	.word	0x200153c0
    2d6c:	.word	0x200022ec
    2d70:	.word	0x200022ee
    2d74:	.word	0x200022f0
    2d78:	.word	0x200153b8

00002d7c <newFolder(int)>:

uint16_t newFolder(int d)
{ static int d0=-1;
  if(d==d0) return 0; // same day
    2d7c:	ldr	r3, [pc, #12]	; (2d8c <newFolder(int)+0x10>)
    2d7e:	ldr	r2, [r3, #0]
    2d80:	cmp	r2, r0
  d0=d;
    2d82:	itte	ne
    2d84:	strne	r0, [r3, #0]
  return 1;
    2d86:	movne	r0, #1
  if(d==d0) return 0; // same day
    2d88:	moveq	r0, #0
}
    2d8a:	bx	lr
    2d8c:	.word	0x20002100

00002d90 <newDirectory(char*)>:

int16_t newDirectory(char *dirName)
{   
    2d90:	push	{r4, lr}
    2d92:	sub	sp, #24
    2d94:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2d96:	add	r0, sp, #16
    2d98:	bl	3c66 <rtc_get_datetime(datetime_t*)>

    if(HourDir)
    {
      if(newFolder(t.hour))
    2d9c:	ldrsb.w	r1, [sp, #21]
    2da0:	mov	r0, r1
    2da2:	bl	2d7c <newFolder(int)>
    2da6:	cbz	r0, 2de2 <newDirectory(char*)+0x52>
      {   
          sprintf(dirName, "/%s%06x_%04d%02d%02d/%02d/", 
    2da8:	ldrsb.w	r3, [sp, #19]
    2dac:	mov	r0, r4
    2dae:	ldr	r2, [pc, #56]	; (2de8 <newDirectory(char*)+0x58>)
    2db0:	str	r3, [sp, #8]
    2db2:	ldrsb.w	r3, [sp, #18]
    2db6:	str	r1, [sp, #12]
    2db8:	str	r3, [sp, #4]
    2dba:	ldrsh.w	r3, [sp, #16]
    2dbe:	ldr	r1, [pc, #44]	; (2dec <newDirectory(char*)+0x5c>)
    2dc0:	str	r3, [sp, #0]
    2dc2:	ldr	r3, [pc, #44]	; (2df0 <newDirectory(char*)+0x60>)
    2dc4:	ldr	r3, [r3, #0]
    2dc6:	bl	e934 <siprintf>
              DirPrefix,(unsigned int)SerNum, t.year,t.month,t.day,t.hour);
          //
          Serial.println(); Serial.print(": "); Serial.print(dirName); 
    2dca:	ldr	r0, [pc, #40]	; (2df4 <newDirectory(char*)+0x64>)
    2dcc:	bl	c720 <Print::println()>
    2dd0:	ldr	r1, [pc, #36]	; (2df8 <newDirectory(char*)+0x68>)
    2dd2:	ldr	r0, [pc, #32]	; (2df4 <newDirectory(char*)+0x64>)
    2dd4:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2dd8:	ldr	r0, [pc, #24]	; (2df4 <newDirectory(char*)+0x64>)
    2dda:	mov	r1, r4
    2ddc:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
          return 1;   // have new directory
    2de0:	movs	r0, #1
          return 1;   // have new directory
      }
    }
    return 0;       // keep old directory

}
    2de2:	add	sp, #24
    2de4:	pop	{r4, pc}
    2de6:	nop
    2de8:	.word	0x20001157
    2dec:	.word	0x20000d65
    2df0:	.word	0x20007dc8
    2df4:	.word	0x20001d30
    2df8:	.word	0x20001454

00002dfc <newFileName(char*)>:

int16_t newFileName(char *fileName)
{
    2dfc:	push	{r4, r5, r6, r7, lr}
    2dfe:	sub	sp, #36	; 0x24
    2e00:	mov	r4, r0
    datetime_t t;
    rtc_get_datetime(&t);
    2e02:	add	r0, sp, #24
    2e04:	bl	3c66 <rtc_get_datetime(datetime_t*)>
    if(proc==0)
    2e08:	ldr	r3, [pc, #104]	; (2e74 <newFileName(char*)+0x78>)
    2e0a:	ldrsb.w	r7, [sp, #31]
    2e0e:	ldrh	r2, [r3, #0]
    2e10:	ldrsb.w	r6, [sp, #30]
    2e14:	ldrsb.w	r5, [sp, #29]
    2e18:	sxth	r2, r2
    2e1a:	ldrsb.w	r0, [sp, #27]
    2e1e:	ldrsb.w	r1, [sp, #26]
    2e22:	ldrsh.w	r3, [sp, #24]
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e26:	str	r1, [sp, #0]
    2e28:	strd	r6, r7, [sp, #12]
    2e2c:	strd	r0, r5, [sp, #4]
    if(proc==0)
    2e30:	cbnz	r2, 2e6c <newFileName(char*)+0x70>
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.wav", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e32:	ldr	r2, [pc, #68]	; (2e78 <newFileName(char*)+0x7c>)
    2e34:	ldr	r1, [pc, #68]	; (2e7c <newFileName(char*)+0x80>)
    else
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e36:	mov	r0, r4
    2e38:	bl	e934 <siprintf>
    //
    Serial.println(); Serial.print(": "); Serial.print(fileName);
    2e3c:	ldr	r0, [pc, #64]	; (2e80 <newFileName(char*)+0x84>)
    2e3e:	bl	c720 <Print::println()>
    2e42:	ldr	r1, [pc, #64]	; (2e84 <newFileName(char*)+0x88>)
    2e44:	ldr	r0, [pc, #56]	; (2e80 <newFileName(char*)+0x84>)
    2e46:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2e4a:	mov	r1, r4
    2e4c:	ldr	r0, [pc, #48]	; (2e80 <newFileName(char*)+0x84>)
    2e4e:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    Serial.print(" "); Serial.print(micros());
    2e52:	ldr	r1, [pc, #52]	; (2e88 <newFileName(char*)+0x8c>)
    2e54:	ldr	r0, [pc, #40]	; (2e80 <newFileName(char*)+0x84>)
    2e56:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    2e5a:	bl	b750 <micros>
    2e5e:	mov	r1, r0
    2e60:	ldr	r0, [pc, #28]	; (2e80 <newFileName(char*)+0x84>)
    2e62:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>

    return 1;
}
    2e66:	movs	r0, #1
    2e68:	add	sp, #36	; 0x24
    2e6a:	pop	{r4, r5, r6, r7, pc}
      sprintf(fileName, "%s%04d%02d%02d_%02d%02d%02d.bin", FilePrefix, t.year,t.month,t.day,t.hour,t.min,t.sec);
    2e6c:	ldr	r2, [pc, #8]	; (2e78 <newFileName(char*)+0x7c>)
    2e6e:	ldr	r1, [pc, #28]	; (2e8c <newFileName(char*)+0x90>)
    2e70:	b.n	2e36 <newFileName(char*)+0x3a>
    2e72:	nop
    2e74:	.word	0x200153c4
    2e78:	.word	0x200013f1
    2e7c:	.word	0x20000d20
    2e80:	.word	0x20001d30
    2e84:	.word	0x20001454
    2e88:	.word	0x2000145c
    2e8c:	.word	0x20000d40

00002e90 <getAlarmTime(unsigned long)>:
    24 hour aquisition is ensured by t_1=0, t_2=12, t_3=12, t_4=24

    wakeup time is estimated by getAlarmTime
*/
uint32_t getAlarmTime(uint32_t secs)
{   // estimate the wakup-time in seconds 
    2e90:	push	{r4, r5, r6, lr}
    // input: actual time in s
    // output: next wakup time in s
    // wakeup is in absolute seconds
    // 
    // secs is actual time in s
    uint32_t dd = secs/(24*3600);       // full days so far
    2e92:	ldr	r4, [pc, #248]	; (2f8c <getAlarmTime(unsigned long)+0xfc>)
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day

    if(dd<(d_0+20000)) 
    2e94:	movw	r2, #20000	; 0x4e20
    2e98:	ldr	r5, [pc, #244]	; (2f90 <getAlarmTime(unsigned long)+0x100>)
    uint32_t dd = secs/(24*3600);       // full days so far
    2e9a:	udiv	r1, r0, r4
    if(dd<(d_0+20000)) 
    2e9e:	ldrh	r3, [r5, #0]
    2ea0:	sxtah	r3, r2, r3
    2ea4:	cmp	r3, r1
    2ea6:	bls.n	2eb2 <getAlarmTime(unsigned long)+0x22>
    { // we are too early
      secs=(d_0+20000)*(24*3600);
    2ea8:	ldrh	r0, [r5, #0]
    2eaa:	sxtah	r0, r2, r0
    //
    if(d_rep> d_on)
    {  // check if day is good for acqisition
      if(dd % d_rep >=d_on)
      {
        secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    2eae:	muls	r0, r4
      dd++;
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    }
    //
    return secs;
}
    2eb0:	pop	{r4, r5, r6, pc}
    if(d_rep> d_on)
    2eb2:	ldr	r2, [pc, #224]	; (2f94 <getAlarmTime(unsigned long)+0x104>)
    2eb4:	ldr	r6, [pc, #224]	; (2f98 <getAlarmTime(unsigned long)+0x108>)
    2eb6:	ldrh	r5, [r2, #0]
    2eb8:	ldrh	r3, [r6, #0]
    2eba:	uxth	r5, r5
    2ebc:	uxth	r3, r3
    2ebe:	cmp	r5, r3
    2ec0:	bls.n	2ee8 <getAlarmTime(unsigned long)+0x58>
      if(dd % d_rep >=d_on)
    2ec2:	ldrh	r3, [r2, #0]
    2ec4:	ldrh	r5, [r6, #0]
    2ec6:	uxth	r3, r3
    2ec8:	uxth	r5, r5
    2eca:	udiv	r6, r1, r3
    2ece:	mls	r3, r3, r6, r1
    2ed2:	cmp	r3, r5
    2ed4:	bcc.n	2ee8 <getAlarmTime(unsigned long)+0x58>
        secs = ((dd/d_rep)+1)*d_rep*(24*3600);  
    2ed6:	ldrh	r3, [r2, #0]
    2ed8:	ldrh	r0, [r2, #0]
    2eda:	uxth	r3, r3
    2edc:	uxth	r0, r0
    2ede:	udiv	r3, r1, r3
    2ee2:	mla	r0, r3, r0, r0
    2ee6:	b.n	2eae <getAlarmTime(unsigned long)+0x1e>
    uint32_t hh =(secs%(24*3600))/3600; // full hours into day
    2ee8:	ldr	r2, [pc, #160]	; (2f8c <getAlarmTime(unsigned long)+0xfc>)
    2eea:	udiv	r3, r0, r2
    2eee:	mls	r3, r2, r3, r0
    2ef2:	mov.w	r2, #3600	; 0xe10
    2ef6:	udiv	r3, r3, r2
    if(((hh>=h_1) && (hh<h_2)) || ((hh>=h_3) && (hh<h_4)) )
    2efa:	ldr	r2, [pc, #160]	; (2f9c <getAlarmTime(unsigned long)+0x10c>)
    2efc:	ldrh	r4, [r2, #0]
    2efe:	uxth	r4, r4
    2f00:	cmp	r4, r3
    2f02:	bhi.n	2f0e <getAlarmTime(unsigned long)+0x7e>
    2f04:	ldr	r4, [pc, #152]	; (2fa0 <getAlarmTime(unsigned long)+0x110>)
    2f06:	ldrh	r4, [r4, #0]
    2f08:	uxth	r4, r4
    2f0a:	cmp	r4, r3
    2f0c:	bhi.n	2f22 <getAlarmTime(unsigned long)+0x92>
    2f0e:	ldr	r4, [pc, #148]	; (2fa4 <getAlarmTime(unsigned long)+0x114>)
    2f10:	ldrh	r4, [r4, #0]
    2f12:	uxth	r4, r4
    2f14:	cmp	r4, r3
    2f16:	bhi.n	2f44 <getAlarmTime(unsigned long)+0xb4>
    2f18:	ldr	r4, [pc, #140]	; (2fa8 <getAlarmTime(unsigned long)+0x118>)
    2f1a:	ldrh	r4, [r4, #0]
    2f1c:	uxth	r4, r4
    2f1e:	cmp	r4, r3
    2f20:	bls.n	2f44 <getAlarmTime(unsigned long)+0xb4>
      if(t_rep>t_on)
    2f22:	ldr	r4, [pc, #136]	; (2fac <getAlarmTime(unsigned long)+0x11c>)
    2f24:	ldr	r5, [pc, #136]	; (2fb0 <getAlarmTime(unsigned long)+0x120>)
    2f26:	ldrh	r6, [r4, #0]
    2f28:	ldrh	r5, [r5, #0]
    2f2a:	uxth	r6, r6
    2f2c:	uxth	r5, r5
    2f2e:	cmp	r6, r5
    2f30:	bls.n	2f44 <getAlarmTime(unsigned long)+0xb4>
        secs = ((secs/t_rep)+1)*t_rep;
    2f32:	ldrh	r3, [r4, #0]
    2f34:	uxth	r3, r3
    2f36:	udiv	r3, r0, r3
    2f3a:	ldrh	r0, [r4, #0]
    2f3c:	uxth	r0, r0
    2f3e:	mla	r0, r3, r0, r0
        return secs;
    2f42:	b.n	2eb0 <getAlarmTime(unsigned long)+0x20>
    if (hh<h_1)                // from mid-night to h_1 
    2f44:	ldrh	r4, [r2, #0]
    2f46:	uxth	r4, r4
    2f48:	cmp	r4, r3
    2f4a:	bls.n	2f5e <getAlarmTime(unsigned long)+0xce>
      secs = (dd*24+ h_1)*3600;     // next time is h1
    2f4c:	ldrh	r0, [r2, #0]
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f4e:	movs	r3, #24
    2f50:	muls	r3, r1
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f52:	uxtah	r0, r3, r0
    2f56:	mov.w	r3, #3600	; 0xe10
    2f5a:	muls	r0, r3
    2f5c:	b.n	2eb0 <getAlarmTime(unsigned long)+0x20>
    else if ((hh>=h_2) && (hh<h_3)) // between the two recording periods
    2f5e:	ldr	r4, [pc, #64]	; (2fa0 <getAlarmTime(unsigned long)+0x110>)
    2f60:	ldrh	r4, [r4, #0]
    2f62:	uxth	r4, r4
    2f64:	cmp	r4, r3
    2f66:	bhi.n	2f72 <getAlarmTime(unsigned long)+0xe2>
    2f68:	ldr	r5, [pc, #56]	; (2fa4 <getAlarmTime(unsigned long)+0x114>)
    2f6a:	ldrh	r4, [r5, #0]
    2f6c:	uxth	r4, r4
    2f6e:	cmp	r4, r3
    2f70:	bhi.n	2f86 <getAlarmTime(unsigned long)+0xf6>
    else if (hh>=h_4) // after the second recording period (goes into next day)
    2f72:	ldr	r4, [pc, #52]	; (2fa8 <getAlarmTime(unsigned long)+0x118>)
    2f74:	ldrh	r4, [r4, #0]
    2f76:	uxth	r4, r4
    2f78:	cmp	r4, r3
    2f7a:	bhi.n	2eb0 <getAlarmTime(unsigned long)+0x20>
      secs = (dd*24+h_1)*3600;  // next time is next day at h_1
    2f7c:	movs	r3, #24
    2f7e:	ldrh	r0, [r2, #0]
    2f80:	mla	r3, r1, r3, r3
    2f84:	b.n	2f52 <getAlarmTime(unsigned long)+0xc2>
      secs = (dd*24+h_3)*3600;      // next time is h3
    2f86:	ldrh	r0, [r5, #0]
    2f88:	b.n	2f4e <getAlarmTime(unsigned long)+0xbe>
    2f8a:	nop
    2f8c:	.word	0x00015180
    2f90:	.word	0x200153b8
    2f94:	.word	0x200153ba
    2f98:	.word	0x200022ea
    2f9c:	.word	0x200153c0
    2fa0:	.word	0x200022ec
    2fa4:	.word	0x200022ee
    2fa8:	.word	0x200022f0
    2fac:	.word	0x2001546a
    2fb0:	.word	0x200022f4

00002fb4 <powerDown()>:

void powerDown(void)
{
  SNVS_LPCR |= (1 << 6); // turn off power
    2fb4:	ldr	r2, [pc, #12]	; (2fc4 <powerDown()+0x10>)
    2fb6:	ldr	r3, [r2, #56]	; 0x38
    2fb8:	orr.w	r3, r3, #64	; 0x40
    2fbc:	str	r3, [r2, #56]	; 0x38
  while (1) asm("wfi");      
    2fbe:	wfi
    2fc0:	b.n	2fbe <powerDown()+0xa>
    2fc2:	nop
    2fc4:	.word	0x400d4000

00002fc8 <do_hibernate()>:

#define SNVS_LPCR_LPTA_EN_MASK          (0x2U)

void do_hibernate(void)
{
    uint32_t tmp = SNVS_LPCR;   // save control register
    2fc8:	ldr	r3, [pc, #132]	; (3050 <do_hibernate()+0x88>)
{
    2fca:	push	{r4, r5, r6, lr}
    uint32_t tmp = SNVS_LPCR;   // save control register
    2fcc:	ldr	r6, [r3, #56]	; 0x38

    SNVS_LPSR |= 1;
    2fce:	ldr	r2, [r3, #76]	; 0x4c
    2fd0:	orr.w	r2, r2, #1
    2fd4:	str	r2, [r3, #76]	; 0x4c
    asm volatile("DSB");
    2fd6:	dsb	sy

    // disable alarm
    SNVS_LPCR &= ~SNVS_LPCR_LPTA_EN_MASK;
    2fda:	ldr	r2, [r3, #56]	; 0x38
    2fdc:	bic.w	r2, r2, #2
    2fe0:	str	r2, [r3, #56]	; 0x38
    while (SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK);
    2fe2:	ldr	r2, [r3, #56]	; 0x38
    2fe4:	ands.w	r2, r2, #2
    2fe8:	bne.n	2fe2 <do_hibernate()+0x1a>

    // clear alarm value
    SNVS_LPTAR = 0;
    2fea:	str	r2, [r3, #88]	; 0x58
    while (SNVS_LPTAR != 0);
    2fec:	ldr	r2, [r3, #88]	; 0x58
    2fee:	cmp	r2, #0
    2ff0:	bne.n	2fec <do_hibernate()+0x24>

    __disable_irq();
    2ff2:	cpsid	i

    //get Time:
    uint32_t lsb, msb;
    do {
      msb = SNVS_LPSRTCMR;
    2ff4:	ldr	r5, [pc, #88]	; (3050 <do_hibernate()+0x88>)
    2ff6:	ldr	r3, [r5, #80]	; 0x50
      lsb = SNVS_LPSRTCLR;
    2ff8:	ldr	r4, [r5, #84]	; 0x54
    } while ( (SNVS_LPSRTCLR != lsb) | (SNVS_LPSRTCMR != msb) );
    2ffa:	ldr	r1, [r5, #84]	; 0x54
    2ffc:	ldr	r2, [r5, #80]	; 0x50
    2ffe:	cmp	r1, r4
    3000:	bne.n	2ff6 <do_hibernate()+0x2e>
    3002:	cmp	r2, r3
    3004:	bne.n	2ff6 <do_hibernate()+0x2e>
    uint32_t secs = (msb << 17) | (lsb >> 15);
    3006:	lsrs	r4, r4, #15

    //set alarm
    Serial.print(secs); Serial.print(" -> ");
    3008:	ldr	r0, [pc, #72]	; (3054 <do_hibernate()+0x8c>)
    uint32_t secs = (msb << 17) | (lsb >> 15);
    300a:	orr.w	r4, r4, r3, lsl #17
    Serial.print(secs); Serial.print(" -> ");
    300e:	mov	r1, r4
    3010:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
    3014:	ldr	r1, [pc, #64]	; (3058 <do_hibernate()+0x90>)
    3016:	ldr	r0, [pc, #60]	; (3054 <do_hibernate()+0x8c>)
    3018:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
    secs = getAlarmTime(secs);
    301c:	mov	r0, r4
    301e:	bl	2e90 <getAlarmTime(unsigned long)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    3022:	mov	r1, r0
    3024:	mov	r4, r0
    3026:	ldr	r0, [pc, #44]	; (3054 <do_hibernate()+0x8c>)
    3028:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
    302c:	ldr	r0, [pc, #36]	; (3054 <do_hibernate()+0x8c>)
    302e:	bl	c720 <Print::println()>
    Serial.println(secs);

    SNVS_LPTAR = secs;
    while (SNVS_LPTAR != secs);
    3032:	ldr	r3, [pc, #28]	; (3050 <do_hibernate()+0x88>)
    SNVS_LPTAR = secs;
    3034:	str	r4, [r5, #88]	; 0x58
    while (SNVS_LPTAR != secs);
    3036:	ldr	r2, [r3, #88]	; 0x58
    3038:	cmp	r2, r4
    303a:	bne.n	3036 <do_hibernate()+0x6e>

    // restore control register and set alarm
    SNVS_LPCR = tmp | SNVS_LPCR_LPTA_EN_MASK; 
    303c:	orr.w	r6, r6, #2
    3040:	str	r6, [r3, #56]	; 0x38
    while (!(SNVS_LPCR & SNVS_LPCR_LPTA_EN_MASK));
    3042:	ldr	r2, [r3, #56]	; 0x38
    3044:	lsls	r2, r2, #30
    3046:	bpl.n	3042 <do_hibernate()+0x7a>

    __enable_irq();
    3048:	cpsie	i
  
    //
    powerDown(); 
    304a:	bl	2fb4 <powerDown()>
    304e:	nop
    3050:	.word	0x400d4000
    3054:	.word	0x20001d30
    3058:	.word	0x20000d60

0000305c <storeData(short)>:
{
    305c:	push	{r4, r5, lr}
    if(status==CLOSED) // file closed: should open
    305e:	mov	r4, r0
{
    3060:	sub	sp, #84	; 0x54
    if(status==CLOSED) // file closed: should open
    3062:	cmp	r0, #0
    3064:	bne.w	316c <storeData(short)+0x110>
        if(newDirectory(dirName))
    3068:	ldr	r0, [pc, #496]	; (325c <storeData(short)+0x200>)
    306a:	bl	2d90 <newDirectory(char*)>
    306e:	cmp	r0, #0
    3070:	beq.n	310c <storeData(short)+0xb0>
        {   if(!sd->exists(dirName) && !sd->mkdir(dirName)) {Serial.println("Error mkdir"); return STOPPED;}         
    3072:	ldr	r5, [pc, #492]	; (3260 <storeData(short)+0x204>)
    3074:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->exists(path) :
    3076:	ldr.w	r1, [r3, #1152]	; 0x480
    307a:	cbz	r1, 30aa <storeData(short)+0x4e>
    return tmp.open(this, path, O_RDONLY);
    307c:	mov	r3, r4
    307e:	ldr	r2, [pc, #476]	; (325c <storeData(short)+0x200>)
    3080:	mov	r0, sp
    3082:	str	r4, [sp, #0]
    3084:	bl	761e <FatFile::open(FatVolume*, char const*, int)>
    3088:	cbnz	r0, 30e8 <storeData(short)+0x8c>
    308a:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    308c:	ldr.w	r1, [r3, #1152]	; 0x480
    3090:	cbnz	r1, 30c2 <storeData(short)+0x66>
    3092:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    3096:	cbz	r0, 30d6 <storeData(short)+0x7a>
  ExFatFile() {}
    3098:	str	r1, [sp, #48]	; 0x30
    return sub.mkdir(vwd(), path, pFlag);
    309a:	movs	r3, #1
    309c:	add.w	r1, r0, #1096	; 0x448
    30a0:	ldr	r2, [pc, #440]	; (325c <storeData(short)+0x200>)
    30a2:	mov	r0, sp
    30a4:	bl	698a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    30a8:	b.n	30d4 <storeData(short)+0x78>
    30aa:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->exists(path) : false;
    30ae:	cmp	r0, #0
    30b0:	beq.n	308a <storeData(short)+0x2e>
    return tmp.open(this, path, O_RDONLY);
    30b2:	mov	r3, r1
    30b4:	str	r1, [sp, #48]	; 0x30
    30b6:	ldr	r2, [pc, #420]	; (325c <storeData(short)+0x200>)
    30b8:	mov	r1, r0
    30ba:	mov	r0, sp
    30bc:	bl	6112 <ExFatFile::open(ExFatVolume*, char const*, int)>
    30c0:	b.n	3088 <storeData(short)+0x2c>
    30c2:	movs	r3, #0
    return sub.mkdir(vwd(), path, pFlag);
    30c4:	ldr	r2, [pc, #404]	; (325c <storeData(short)+0x200>)
    30c6:	add.w	r1, r1, #1096	; 0x448
    30ca:	mov	r0, sp
    30cc:	str	r3, [sp, #0]
    30ce:	movs	r3, #1
    30d0:	bl	779c <FatFile::mkdir(FatFile*, char const*, bool)>
    30d4:	cbnz	r0, 30e8 <storeData(short)+0x8c>
    30d6:	ldr	r1, [pc, #396]	; (3264 <storeData(short)+0x208>)
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    30d8:	ldr	r0, [pc, #396]	; (3268 <storeData(short)+0x20c>)
    30da:	bl	29da <Print::println(char const*) [clone .isra.0]>
        {  return STOPPED; // if file open fails: don't do anything
    30de:	mov.w	r4, #4294967295
}
    30e2:	mov	r0, r4
    30e4:	add	sp, #84	; 0x54
    30e6:	pop	{r4, r5, pc}
            if(!sd->chdir(dirName)) {Serial.println("Error chdir"); return STOPPED;}
    30e8:	ldr	r3, [r5, #0]
    return m_fVol ? m_fVol->chdir(path) :
    30ea:	ldr.w	r0, [r3, #1152]	; 0x480
    30ee:	cbz	r0, 30fc <storeData(short)+0xa0>
    30f0:	ldr	r1, [pc, #360]	; (325c <storeData(short)+0x200>)
    30f2:	bl	7ff4 <FatVolume::chdir(char const*)>
    30f6:	cbnz	r0, 310c <storeData(short)+0xb0>
    30f8:	ldr	r1, [pc, #368]	; (326c <storeData(short)+0x210>)
    30fa:	b.n	30d8 <storeData(short)+0x7c>
    30fc:	ldr.w	r0, [r3, #1156]	; 0x484
           m_xVol ? m_xVol->chdir(path) : false;
    3100:	cmp	r0, #0
    3102:	beq.n	30f8 <storeData(short)+0x9c>
    3104:	ldr	r1, [pc, #340]	; (325c <storeData(short)+0x200>)
    3106:	bl	655c <ExFatVolume::chdir(char const*)>
    310a:	b.n	30f6 <storeData(short)+0x9a>
        if(newFileName(fileName))
    310c:	ldr	r0, [pc, #352]	; (3270 <storeData(short)+0x214>)
    310e:	bl	2dfc <newFileName(char*)>
    3112:	cmp	r0, #0
    3114:	beq.n	30de <storeData(short)+0x82>
            file = sd->open(fileName, FILE_WRITE); 
    3116:	ldr	r1, [pc, #328]	; (3260 <storeData(short)+0x204>)
    3118:	movw	r3, #16898	; 0x4202
    311c:	ldr	r2, [pc, #336]	; (3270 <storeData(short)+0x214>)
    311e:	mov	r0, sp
    3120:	ldr	r1, [r1, #0]
    3122:	bl	8984 <FsVolume::open(char const*, int)>
class Print
    3126:	ldr	r4, [pc, #332]	; (3274 <storeData(short)+0x218>)
    3128:	ldr	r3, [sp, #4]
class StreamFile : public stream_t, public BaseFile {
    312a:	add	r1, sp, #16
    312c:	add.w	r0, r4, #16
    3130:	str	r3, [r4, #4]
class Stream : public Print
    3132:	ldr	r3, [sp, #8]
    3134:	str	r3, [r4, #8]
    3136:	ldrb.w	r3, [sp, #12]
    313a:	strb	r3, [r4, #12]
    313c:	bl	877a <FsBaseFile::operator=(FsBaseFile const&)>
    3140:	mov	r0, sp
    3142:	bl	f20 <FsFile::~FsFile()>
  bool isOpen() const {return m_fFile || m_xFile;}
    3146:	ldr	r3, [r4, #72]	; 0x48
    3148:	cbz	r3, 3162 <storeData(short)+0x106>
    {   nbuf=0;
    314a:	ldr	r3, [pc, #300]	; (3278 <storeData(short)+0x21c>)
    314c:	movs	r2, #0
    314e:	str	r2, [r3, #0]
        if(proc==0)
    3150:	ldr	r3, [pc, #296]	; (327c <storeData(short)+0x220>)
    3152:	ldrh	r3, [r3, #0]
    3154:	sxth	r3, r3
    3156:	cbz	r3, 31b8 <storeData(short)+0x15c>
          makeHeader(fileHeader);
    3158:	ldr	r0, [pc, #292]	; (3280 <storeData(short)+0x224>)
    315a:	bl	2b9c <makeHeader(long*)>
          hdr=(char *)fileHeader;
    315e:	ldr	r1, [pc, #288]	; (3280 <storeData(short)+0x224>)
    3160:	b.n	31ca <storeData(short)+0x16e>
    3162:	ldr	r3, [r4, #76]	; 0x4c
    3164:	cmp	r3, #0
    3166:	bne.n	314a <storeData(short)+0xee>
            {   Serial.println("Failing open file");
    3168:	ldr	r1, [pc, #280]	; (3284 <storeData(short)+0x228>)
    316a:	b.n	30d8 <storeData(short)+0x7c>
    if(status==OPENED) // file is open: write first record (header)
    316c:	cmp	r0, #1
    316e:	beq.n	314a <storeData(short)+0xee>
    if(status==RUNNING) // file is open and header written: store data records
    3170:	cmp	r0, #2
    3172:	beq.n	31da <storeData(short)+0x17e>
    if((status==DOCLOSE) || (status==DOHIBERNATE) || (status==MUSTSTOP)) // should close file or stop acquisition
    3174:	subs	r3, r4, #3
    3176:	uxth	r3, r3
    3178:	cmp	r3, #2
    317a:	bhi.n	30e2 <storeData(short)+0x86>
    317c:	ldr	r3, [pc, #244]	; (3274 <storeData(short)+0x218>)
    317e:	ldr	r2, [r3, #72]	; 0x48
    3180:	cbnz	r2, 3186 <storeData(short)+0x12a>
    3182:	ldr	r3, [r3, #76]	; 0x4c
    3184:	cbz	r3, 31a6 <storeData(short)+0x14a>
        {   if(proc==0)
    3186:	ldr	r3, [pc, #244]	; (327c <storeData(short)+0x220>)
    3188:	ldrh	r3, [r3, #0]
    318a:	sxth	r3, r3
    318c:	cbnz	r3, 31a0 <storeData(short)+0x144>
              char *hdr = wavHeaderUpdate(nbuf*MAX_DISK_BUFFER*4);
    318e:	ldr	r3, [pc, #232]	; (3278 <storeData(short)+0x21c>)
    3190:	mov.w	r0, #24576	; 0x6000
    3194:	ldr	r3, [r3, #0]
    3196:	muls	r0, r3
    3198:	bl	2b28 <wavHeaderUpdate(long)>
              wavHeaderWrite(hdr);
    319c:	bl	2b3c <wavHeaderWrite(char*)>
            file.close();
    31a0:	ldr	r0, [pc, #228]	; (3288 <storeData(short)+0x22c>)
    31a2:	bl	8750 <FsBaseFile::close()>
        if(status==DOHIBERNATE)
    31a6:	cmp	r4, #4
    31a8:	bne.n	3248 <storeData(short)+0x1ec>
            adcReset();
    31aa:	bl	3778 <adcReset()>
            acqPower(LOW);
    31ae:	movs	r0, #0
    31b0:	bl	3764 <acqPower(int)>
            do_hibernate();
    31b4:	bl	2fc8 <do_hibernate()>
          hdr = wavHeaderInit(fsamp, NCHAN_ACQ, NBITS, SerNum);
    31b8:	ldr	r3, [pc, #208]	; (328c <storeData(short)+0x230>)
    31ba:	movs	r1, #1
    31bc:	movs	r2, #32
    31be:	ldr	r0, [r3, #0]
    31c0:	ldr	r3, [pc, #204]	; (3290 <storeData(short)+0x234>)
    31c2:	ldr	r3, [r3, #0]
    31c4:	bl	2a44 <wavHeaderInit(long, long, long, int)>
    31c8:	mov	r1, r0
    return BaseFile::write(buffer, size);
    31ca:	mov.w	r2, #512	; 0x200
    31ce:	ldr	r0, [pc, #184]	; (3288 <storeData(short)+0x22c>)
    31d0:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)hdr,512)) < 512) 
    31d4:	cmp.w	r0, #512	; 0x200
    31d8:	blt.n	3244 <storeData(short)+0x1e8>
    31da:	mov.w	r2, #24576	; 0x6000
    31de:	ldr	r1, [pc, #180]	; (3294 <storeData(short)+0x238>)
    31e0:	ldr	r0, [pc, #164]	; (3288 <storeData(short)+0x22c>)
    31e2:	bl	1e0 <FsBaseFile::write(void const*, unsigned int)>
        if((nd=file.write((const uint8_t*)diskBuffer,4*MAX_DISK_BUFFER)) < 4*MAX_DISK_BUFFER) 
    31e6:	cmp.w	r0, #24576	; 0x6000
    31ea:	mov	r4, r0
    31ec:	ldr	r5, [pc, #136]	; (3278 <storeData(short)+0x21c>)
    31ee:	bcs.n	323a <storeData(short)+0x1de>
        { Serial.print(">"); 
    31f0:	ldr	r1, [pc, #164]	; (3298 <storeData(short)+0x23c>)
    31f2:	ldr	r0, [pc, #116]	; (3268 <storeData(short)+0x20c>)
    31f4:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
          Serial.print(nd); 
    31f8:	mov	r1, r4
    31fa:	ldr	r0, [pc, #108]	; (3268 <storeData(short)+0x20c>)
          status=DOCLOSE; 
    31fc:	movs	r4, #3
          Serial.print(nd); 
    31fe:	bl	29aa <Print::print(unsigned long) [clone .isra.0]>
          Serial.print(" "); 
    3202:	ldr	r1, [pc, #152]	; (329c <storeData(short)+0x240>)
    3204:	ldr	r0, [pc, #96]	; (3268 <storeData(short)+0x20c>)
    3206:	bl	29d6 <Print::print(char const*) [clone .isra.0]>
	size_t print(int n)				{ return print((long)n); }
    320a:	movs	r1, #2
    320c:	ldr	r0, [pc, #88]	; (3268 <storeData(short)+0x20c>)
    320e:	bl	c70e <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3212:	ldr	r0, [pc, #84]	; (3268 <storeData(short)+0x20c>)
    3214:	bl	c720 <Print::println()>
        disk_count++;
    3218:	ldr	r2, [pc, #132]	; (32a0 <storeData(short)+0x244>)
    321a:	ldr	r3, [r2, #0]
    321c:	adds	r3, #1
    321e:	str	r3, [r2, #0]
    3220:	mov.w	r2, #1000	; 0x3e8
    3224:	ldr	r3, [r5, #0]
    3226:	udiv	r1, r3, r2
    322a:	mls	r3, r2, r1, r3
        if((nbuf % 1000)==0 ) file.flush();
    322e:	cmp	r3, #0
    3230:	bne.n	3174 <storeData(short)+0x118>
    BaseFile::sync();
    3232:	ldr	r0, [pc, #84]	; (3288 <storeData(short)+0x22c>)
    3234:	bl	29ec <FsBaseFile::sync()>
  }
    3238:	b.n	3174 <storeData(short)+0x118>
          nbuf++;
    323a:	ldr	r3, [r5, #0]
    323c:	movs	r4, #2
    323e:	adds	r3, #1
    3240:	str	r3, [r5, #0]
    3242:	b.n	3218 <storeData(short)+0x1bc>
        { status = DOCLOSE;
    3244:	movs	r4, #3
    3246:	b.n	3174 <storeData(short)+0x118>
        else if(status==DOCLOSE)
    3248:	cmp	r4, #3
    324a:	beq.n	3256 <storeData(short)+0x1fa>
				CORE_PIN13_PORTCLEAR = CORE_PIN13_BITMASK;
    324c:	ldr	r3, [pc, #84]	; (32a4 <storeData(short)+0x248>)
    324e:	movs	r2, #8
    3250:	str.w	r2, [r3, #136]	; 0x88
    3254:	b.n	30de <storeData(short)+0x82>
          status=CLOSED;
    3256:	movs	r4, #0
    3258:	b.n	30e2 <storeData(short)+0x86>
    325a:	nop
    325c:	.word	0x20015496
    3260:	.word	0x200022dc
    3264:	.word	0x20001062
    3268:	.word	0x20001d30
    326c:	.word	0x2000106e
    3270:	.word	0x200154e6
    3274:	.word	0x20014bb8
    3278:	.word	0x20014c34
    327c:	.word	0x200153c4
    3280:	.word	0x2000ddd0
    3284:	.word	0x2000107a
    3288:	.word	0x20014bc8
    328c:	.word	0x200022d4
    3290:	.word	0x20007dc8
    3294:	.word	0x20007dd0
    3298:	.word	0x2000108c
    329c:	.word	0x2000145c
    32a0:	.word	0x20014b98
    32a4:	.word	0x42004000

000032a8 <saveData(short)>:
    if(status==STOPPED) 
    32a8:	adds	r3, r0, #1
{
    32aa:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32ae:	mov	r4, r0
    if(status==STOPPED) 
    32b0:	bne.n	32da <saveData(short)+0x32>
    { while(queue_isBusy()) {;} //wait if acq writes to queue
    32b2:	bl	2858 <queue_isBusy()>
    32b6:	mov	r5, r0
    32b8:	cmp	r0, #0
    32ba:	bne.n	32b2 <saveData(short)+0xa>
      pullData((uint32_t*)tempBuffer0);
    32bc:	ldr	r0, [pc, #180]	; (3374 <saveData(short)+0xcc>)
    32be:	bl	28c4 <pullData(unsigned long*)>
      for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    32c2:	ldr	r3, [pc, #176]	; (3374 <saveData(short)+0xcc>)
    32c4:	ldr	r2, [pc, #176]	; (3378 <saveData(short)+0xd0>)
    32c6:	ldr.w	r1, [r3], #4
    32ca:	str.w	r1, [r2, r5, lsl #2]
    32ce:	adds	r5, #1
    32d0:	cmp	r5, #8
    32d2:	bne.n	32c6 <saveData(short)+0x1e>
}
    32d4:	mov	r0, r4
    32d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(status<CLOSED) return status; // we are stopped: don't do anything
    32da:	cmp	r0, #0
    32dc:	blt.n	32d4 <saveData(short)+0x2c>
    status=checkEndOfFile(status);
    32de:	bl	2c7c <checkEndOfFile(short)>
    32e2:	mov	r4, r0
    if(getDataCount() >= NDBL)
    32e4:	bl	283c <getDataCount()>
    32e8:	cmp	r0, #47	; 0x2f
    32ea:	bls.n	32d4 <saveData(short)+0x2c>
      if(proc==0)
    32ec:	ldr	r3, [pc, #140]	; (337c <saveData(short)+0xd4>)
    32ee:	ldrh	r5, [r3, #0]
    32f0:	sxth	r5, r5
    32f2:	cbnz	r5, 3340 <saveData(short)+0x98>
    32f4:	ldr	r7, [pc, #124]	; (3374 <saveData(short)+0xcc>)
    32f6:	mov	r8, r7
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    32f8:	bl	2858 <queue_isBusy()>
    32fc:	mov	r6, r0
    32fe:	cmp	r0, #0
    3300:	bne.n	32f8 <saveData(short)+0x50>
        for(int ii=0; ii<NDBL; ii++)
    3302:	adds	r5, #1
          pullData((uint32_t *)&tempBuffer0[ii*NBUF_ACQ]);
    3304:	mov	r0, r8
    3306:	bl	28c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    330a:	add.w	r8, r8, #512	; 0x200
    330e:	cmp	r5, #48	; 0x30
    3310:	bne.n	32f8 <saveData(short)+0x50>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=tempBuffer0[ii];
    3312:	ldr	r3, [pc, #100]	; (3378 <saveData(short)+0xd0>)
    3314:	ldr.w	r2, [r7], #4
    3318:	str.w	r2, [r3, r6, lsl #2]
    331c:	adds	r6, #1
    331e:	cmp	r6, #8
    3320:	bne.n	3314 <saveData(short)+0x6c>
          { diskBuffer[ii]=tempBuffer0[ii];
    3322:	mov.w	r2, #24576	; 0x6000
    3326:	ldr	r1, [pc, #76]	; (3374 <saveData(short)+0xcc>)
    3328:	ldr	r0, [pc, #84]	; (3380 <saveData(short)+0xd8>)
    332a:	bl	a254 <memcpy>
      if(haveStore)
    332e:	ldr	r3, [pc, #84]	; (3384 <saveData(short)+0xdc>)
    3330:	ldr	r3, [r3, #0]
    3332:	cmp	r3, #0
    3334:	beq.n	32d4 <saveData(short)+0x2c>
        status=storeData(status);
    3336:	mov	r0, r4
}
    3338:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        status=storeData(status);
    333c:	b.w	305c <storeData(short)>
    3340:	ldr	r6, [pc, #60]	; (3380 <saveData(short)+0xd8>)
        for(int ii=0; ii<NDBL; ii++)
    3342:	movs	r7, #0
      if(proc==0)
    3344:	mov	r8, r6
        { while(queue_isBusy()){continue;} //wait if acq writes to queue
    3346:	bl	2858 <queue_isBusy()>
    334a:	mov	r5, r0
    334c:	cmp	r0, #0
    334e:	bne.n	3346 <saveData(short)+0x9e>
        for(int ii=0; ii<NDBL; ii++)
    3350:	adds	r7, #1
          pullData((uint32_t *)&diskBuffer[ii*NBUF_ACQ]);
    3352:	mov	r0, r8
    3354:	bl	28c4 <pullData(unsigned long*)>
        for(int ii=0; ii<NDBL; ii++)
    3358:	add.w	r8, r8, #512	; 0x200
    335c:	cmp	r7, #48	; 0x30
    335e:	bne.n	3346 <saveData(short)+0x9e>
        for(int ii=0;ii<8;ii++) logBuffer[ii]=diskBuffer[ii];
    3360:	ldr	r3, [pc, #20]	; (3378 <saveData(short)+0xd0>)
    3362:	ldr.w	r2, [r6], #4
    3366:	str.w	r2, [r3, r5, lsl #2]
    336a:	adds	r5, #1
    336c:	cmp	r5, #8
    336e:	bne.n	3362 <saveData(short)+0xba>
    3370:	b.n	332e <saveData(short)+0x86>
    3372:	nop
    3374:	.word	0x2000dfdc
    3378:	.word	0x20014c0c
    337c:	.word	0x200153c4
    3380:	.word	0x20007dd0
    3384:	.word	0x20014c08

00003388 <_GLOBAL__sub_I_t_acq>:
	constexpr Print() : write_error(0) {}
    3388:	ldr	r0, [pc, #28]	; (33a8 <_GLOBAL__sub_I_t_acq+0x20>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    338a:	movs	r3, #0
    338c:	mov.w	r2, #1000	; 0x3e8
FsFile file;
    3390:	ldr	r1, [pc, #24]	; (33ac <_GLOBAL__sub_I_t_acq+0x24>)
    3392:	strb	r3, [r0, #12]
    3394:	strd	r3, r2, [r0, #4]
  FsBaseFile() {}
    3398:	strd	r3, r3, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    339c:	ldr	r3, [pc, #16]	; (33b0 <_GLOBAL__sub_I_t_acq+0x28>)
    339e:	ldr	r2, [pc, #20]	; (33b4 <_GLOBAL__sub_I_t_acq+0x2c>)
    33a0:	str	r3, [r0, #0]
    33a2:	b.w	c948 <__aeabi_atexit>
    33a6:	nop
    33a8:	.word	0x20014bb8
    33ac:	.word	0x00000f21
    33b0:	.word	0x20000554
    33b4:	.word	0x20002108

000033b8 <filing_init()>:
{
    33b8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33bc:	ldr	r3, [pc, #132]	; (3444 <filing_init()+0x8c>)
  FsDateTime::callback = dateTime;
    33be:	movs	r4, #5
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33c0:	ldr	r2, [pc, #132]	; (3448 <filing_init()+0x90>)
    33c2:	ldr.w	r3, [r3, #544]	; 0x220
    if (sd->begin(SD_CONFIG)) 
    33c6:	ldr.w	r9, [pc, #156]	; 3464 <filing_init()+0xac>
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33ca:	bic.w	r3, r3, #4278190080	; 0xff000000
    { Serial.println("still trying..."); 
    33ce:	ldr.w	r8, [pc, #152]	; 3468 <filing_init()+0xb0>
    33d2:	ldr	r7, [pc, #120]	; (344c <filing_init()+0x94>)
    SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
    33d4:	str	r3, [r2, #0]
  FsDateTime::callback = dateTime;
    33d6:	ldr	r3, [pc, #120]	; (3450 <filing_init()+0x98>)
    33d8:	ldr	r2, [pc, #120]	; (3454 <filing_init()+0x9c>)
    33da:	str	r2, [r3, #0]
    if (sd->begin(SD_CONFIG)) 
    33dc:	ldr.w	r5, [r9]
    spiConfigBackupPin = 255;
    33e0:	movs	r3, #255	; 0xff
    sdioConfigBackup = sdioConfig;
    33e2:	movs	r1, #0
    33e4:	add.w	r6, r5, #1168	; 0x490
    spiConfigBackupPin = 255;
    33e8:	strb.w	r3, [r5, #1212]	; 0x4bc
    sdioConfigBackup = sdioConfig;
    33ec:	strb.w	r1, [r5, #1224]	; 0x4c8
    33f0:	mov	r0, r6
    33f2:	bl	9b6c <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    33f6:	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    33f8:	str.w	r6, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    33fc:	bl	9268 <SdioCard::errorCode() const>
    3400:	cbnz	r0, 3424 <filing_init()+0x6c>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    3402:	movs	r3, #1
    3404:	ldr.w	r1, [r5, #1164]	; 0x48c
    3408:	mov	r0, r5
    340a:	mov	r2, r3
    340c:	bl	88b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    3410:	cbz	r0, 3424 <filing_init()+0x6c>
    { Serial.println("card initialized.");
    3412:	ldr	r0, [pc, #56]	; (344c <filing_init()+0x94>)
    3414:	ldr	r1, [pc, #64]	; (3458 <filing_init()+0xa0>)
    3416:	bl	29da <Print::println(char const*) [clone .isra.0]>
      haveStore=1;
    341a:	movs	r0, #1
    341c:	ldr	r3, [pc, #60]	; (345c <filing_init()+0xa4>)
    341e:	str	r0, [r3, #0]
}
    3420:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    { Serial.println("still trying..."); 
    3424:	mov	r1, r8
    3426:	mov	r0, r7
    3428:	bl	29da <Print::println(char const*) [clone .isra.0]>
      delay(100);
    342c:	movs	r0, #100	; 0x64
    342e:	bl	b79c <delay>
  for(int ii=0; ii<5;ii++)
    3432:	subs	r4, #1
    3434:	bne.n	33dc <filing_init()+0x24>
  Serial.println("Card failed, or not present");
    3436:	ldr	r0, [pc, #20]	; (344c <filing_init()+0x94>)
    3438:	ldr	r1, [pc, #36]	; (3460 <filing_init()+0xa8>)
    343a:	bl	29da <Print::println(char const*) [clone .isra.0]>
  return 0;
    343e:	mov	r0, r4
    3440:	b.n	3420 <filing_init()+0x68>
    3442:	nop
    3444:	.word	0x401f4400
    3448:	.word	0x20007dc8
    344c:	.word	0x20001d30
    3450:	.word	0x200147fc
    3454:	.word	0x00002919
    3458:	.word	0x20000ce2
    345c:	.word	0x20014c08
    3460:	.word	0x20000d04
    3464:	.word	0x200022dc
    3468:	.word	0x20000cf4

0000346c <compress(void*)>:
int32_t *tempDatai=(int32_t*) tempData;

uint32_t proc_stat[MB];
uint32_t max_stat;
int __not_in_flash_func(compress)(void *inp)
{   
    346c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3470:	mov	r4, r0
  int ret=1;
  uint32_t to;
  to = rtc_get();
    3472:	bl	b998 <rtc_get>
    3476:	str	r0, [sp, #4]
  uint32_t t1;
  t1 = micros();
    3478:	bl	b750 <micros>

  int32_t *din = (int32_t *) inp;
  //
  // copy data 
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    347c:	ldr	r3, [pc, #604]	; (36dc <compress(void*)+0x270>)
  t1 = micros();
    347e:	mov	sl, r0
  for (int  ii = 0; ii < NBUF_ACQ; ii++) tempDatai[ii] = din[ii];
    3480:	movs	r2, #0
    3482:	ldr	r3, [r3, #0]
    3484:	ldr.w	r1, [r4, r2, lsl #2]
    3488:	str.w	r1, [r3, r2, lsl #2]
    348c:	adds	r2, #1
    348e:	cmp	r2, #128	; 0x80
    3490:	bne.n	3484 <compress(void*)+0x18>
    3492:	subs	r4, #4
    3494:	add.w	r0, r3, #508	; 0x1fc
    3498:	mov	r2, r3
  
  //differentiate (equiv 6 dB/Octave HP filter) all but the first NCHAN_ACQ data
  for (int  ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) tempDatai[ii] -=  din[ii - NCHAN_ACQ];
    349a:	ldr.w	r1, [r2, #4]!
    349e:	ldr.w	r5, [r4, #4]!
    34a2:	cmp	r0, r2
    34a4:	sub.w	r1, r1, r5
    34a8:	str	r1, [r2, #0]
    34aa:	bne.n	349a <compress(void*)+0x2e>

  // find maximum in filtered data 
  int32_t mx = 0;
    34ac:	movs	r2, #0
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
  {
    int32_t dd =  tempDatai[ii];
    34ae:	ldr.w	r1, [r3, #4]!
    if(dd<0)  dd = -dd; // take absolut value
    if(dd>mx) mx =  dd; // take maximum
    34b2:	cmp	r1, #0
    34b4:	it	lt
    34b6:	neglt	r1, r1
    34b8:	cmp	r2, r1
    34ba:	it	lt
    34bc:	movlt	r2, r1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++)
    34be:	cmp	r0, r3
    34c0:	bne.n	34ae <compress(void*)+0x42>
  }

  // estimate mask (allow only values > 2)
  int nb;
  for(nb=2; nb<MB; nb++) if(mx < (1<<(nb-1))) break;
    34c2:	movs	r4, #2
    34c4:	movs	r1, #1
    34c6:	subs	r3, r4, #1
    34c8:	lsl.w	r3, r1, r3
    34cc:	cmp	r3, r2
    34ce:	bgt.n	34d6 <compress(void*)+0x6a>
    34d0:	adds	r4, #1
    34d2:	cmp	r4, #24
    34d4:	bne.n	34c6 <compress(void*)+0x5a>
  // compression factor (32/nb)

  // keep statistics
  proc_stat[nb-1]++;
    34d6:	ldr	r2, [pc, #520]	; (36e0 <compress(void*)+0x274>)
    34d8:	subs	r1, r4, #1
    34da:	ldr.w	r8, [pc, #536]	; 36f4 <compress(void*)+0x288>
    34de:	ldr.w	r3, [r2, r1, lsl #2]
    34e2:	mov	fp, r8
    34e4:	adds	r3, #1
    34e6:	str.w	r3, [r2, r1, lsl #2]
  if((uint32_t)nb>max_stat) max_stat=nb;
    34ea:	ldr	r3, [pc, #504]	; (36e4 <compress(void*)+0x278>)
    34ec:	ldr	r2, [r3, #0]
    34ee:	cmp	r4, r2

  // mask data (all but first sample) (mask needed for negative numbers)
  uint32_t msk = (1 << nb) - 1;
    34f0:	mov	r2, r8
  if((uint32_t)nb>max_stat) max_stat=nb;
    34f2:	it	hi
    34f4:	strhi	r4, [r3, #0]
  uint32_t msk = (1 << nb) - 1;
    34f6:	movs	r3, #1
    34f8:	lsl.w	r0, r3, r4
    34fc:	subs	r0, #1
  for (int ii = NCHAN_ACQ; ii < NBUF_ACQ; ii++) { tempData[ii] &= (uint32_t)msk; }
    34fe:	ldr.w	r1, [r2, #4]!
    3502:	adds	r3, #1
    3504:	ands	r1, r0
    3506:	cmp	r3, #128	; 0x80
    3508:	str	r1, [r2, #0]
    350a:	bne.n	34fe <compress(void*)+0x92>

  // ensure that ndat is even (to allow fast access to header)
  ndat= ((ndat>>1) + 1)<<1;

    // clean data store
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    350c:	ldr	r5, [pc, #472]	; (36e8 <compress(void*)+0x27c>)
    350e:	mov.w	r2, #512	; 0x200
    3512:	movs	r1, #0
  int ncmp = (NBUF_ACQ*nb) / MBIT;
    3514:	mov.w	r9, r4, lsl #2
  for (int ii = 0; ii < NSAMP; ii++) outData[ii]=0;
    3518:	mov	r0, r5
    351a:	bl	a210 <memset>

  // prepare header
  uint32_t *iptr=(uint32_t *) outData;
  *iptr++ = 0xA5A5A5A5;
    351e:	mov.w	r2, #2779096485	; 0xa5a5a5a5
  *iptr++ = nb | shift<<16;
  *iptr++ = to;
    3522:	ldr	r3, [sp, #4]
  int ndat = NH + NCHAN_ACQ + ncmp;
    3524:	add.w	r7, r9, #7
  *iptr++ = 0xA5A5A5A5;
    3528:	str	r2, [r5, #0]
  ndat= ((ndat>>1) + 1)<<1;
    352a:	add.w	r6, r9, #8
  *iptr++ = nb | shift<<16;
    352e:	ldr	r2, [pc, #444]	; (36ec <compress(void*)+0x280>)
  *iptr++ = t1;
  *iptr++ = NCHAN_ACQ;
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
  //
  int kk=NH;
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3530:	movs	r1, #7
  *iptr++ = nb | shift<<16;
    3532:	ldrh	r2, [r2, #0]
  *iptr++ = t1;
    3534:	strd	r3, sl, [r5, #8]
  *iptr++ = nb | shift<<16;
    3538:	orr.w	r2, r4, r2, lsl #16
  outData[kk++] = tempData[0]; tempData[0] = 0;
    353c:	ldr.w	r3, [fp]
  *iptr++ = nb | shift<<16;
    3540:	str	r2, [r5, #4]
  *iptr++ = NCHAN_ACQ;
    3542:	movs	r2, #1
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3544:	str	r3, [r5, #24]
    3546:	movs	r3, #0
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3548:	add.w	r0, r9, r2
  *iptr++ = NCHAN_ACQ;
    354c:	str	r2, [r5, #16]
  #endif

  // pack data
  // 
  int nx = MBIT;
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    354e:	mov	ip, r3
  outData[kk++] = tempData[0]; tempData[0] = 0;
    3550:	str.w	r3, [fp]
  int nx = MBIT;
    3554:	movs	r3, #32
  *iptr++ = NCHAN_ACQ+ncmp; // number of data after header
    3556:	str	r0, [r5, #20]
  {   nx -= nb;
    3558:	sub.w	lr, r3, r4
      if(nx > 0)
      {   outData[kk] |= (tempData[ii] << nx);
    355c:	ldr.w	sl, [r5, r1, lsl #2]
    3560:	ldr.w	r2, [r8], #4
      if(nx > 0)
    3564:	cmp.w	lr, #0
    3568:	ble.n	35b2 <compress(void*)+0x146>
      {   outData[kk] |= (tempData[ii] << nx);
    356a:	lsl.w	r2, r2, lr
    356e:	mov	r3, lr
    3570:	orr.w	r2, r2, sl
    3574:	str.w	r2, [r5, r1, lsl #2]
  for (int ii = 0; ii < NBUF_ACQ; ii ++)
    3578:	add.w	ip, ip, #1
    357c:	cmp.w	ip, #128	; 0x80
    3580:	bne.n	3558 <compress(void*)+0xec>
  }

  // store actual data
  static int nout=0;

  if ((nout + ndat) <= NBUF_OUT)
    3582:	ldr.w	r8, [pc, #372]	; 36f8 <compress(void*)+0x28c>
    3586:	ldr.w	r4, [r8]
    358a:	add.w	r9, r4, r6
    358e:	cmp.w	r9, #128	; 0x80
    3592:	bgt.n	35e2 <compress(void*)+0x176>
  { // all data fit in current block
      for (int ii = 0; ii < ndat; ii++) dout[nout++] = outData[ii];
    3594:	ldr	r0, [pc, #344]	; (36f0 <compress(void*)+0x284>)
    3596:	lsls	r2, r6, #2
    3598:	ldr	r1, [pc, #332]	; (36e8 <compress(void*)+0x27c>)
    359a:	add.w	r0, r0, r4, lsl #2
    359e:	bl	a254 <memcpy>
    35a2:	str.w	r9, [r8]
  int ret=1;
    35a6:	mov.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
      // followed by rest of data
      while (ii < ndat) dout[nout++] = outData[ii++];
  }
  return ret;
}
    35aa:	mov	r0, r9
    35ac:	add	sp, #12
    35ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      {   outData[kk++] |= tempData[ii];
    35b2:	add.w	r9, r1, #1
      else if(nx==0) 
    35b6:	bne.n	35c6 <compress(void*)+0x15a>
      {   outData[kk++] |= tempData[ii];
    35b8:	orr.w	r2, sl, r2
          nx=MBIT;
    35bc:	movs	r3, #32
      {   outData[kk++] |= tempData[ii];
    35be:	str.w	r2, [r5, r1, lsl #2]
    35c2:	mov	r1, r9
    35c4:	b.n	3578 <compress(void*)+0x10c>
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    35c6:	subs	r3, r4, r3
    35c8:	lsr.w	r3, r2, r3
    35cc:	orr.w	r3, r3, sl
    35d0:	str.w	r3, [r5, r1, lsl #2]
          nx += MBIT;
    35d4:	add.w	r3, lr, #32
      {   outData[kk++] |= (tempData[ii] >> (-nx));
    35d8:	mov	r1, r9
          outData[kk] = (tempData[ii] << nx);
    35da:	lsls	r2, r3
    35dc:	str.w	r2, [r5, r9, lsl #2]
    35e0:	b.n	3578 <compress(void*)+0x10c>
  else if ((nout + NH) > NBUF_OUT) //avoid partial header (special case)
    35e2:	cmp	r4, #122	; 0x7a
    35e4:	ble.n	3630 <compress(void*)+0x1c4>
    35e6:	movs	r2, #0
    35e8:	mov	r3, r4
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    35ea:	ldr	r1, [pc, #260]	; (36f0 <compress(void*)+0x284>)
    35ec:	mov	r0, r2
    35ee:	cmp	r3, #127	; 0x7f
    35f0:	bls.n	3626 <compress(void*)+0x1ba>
    35f2:	cmp	r4, #128	; 0x80
    35f4:	rsb	r3, r4, #128	; 0x80
    35f8:	it	gt
    35fa:	movgt	r3, #0
    35fc:	add	r3, r4
    35fe:	cbz	r2, 3604 <compress(void*)+0x198>
    3600:	str.w	r3, [r8]
      if(!pushData(dout)) ret = 0;
    3604:	ldr	r0, [pc, #232]	; (36f0 <compress(void*)+0x284>)
    3606:	bl	2864 <pushData(unsigned long*)>
    360a:	subs.w	r9, r0, #0
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    360e:	mov.w	r2, r6, lsl #2
    3612:	ldr	r1, [pc, #212]	; (36e8 <compress(void*)+0x27c>)
    3614:	ldr	r0, [pc, #216]	; (36f0 <compress(void*)+0x284>)
      if(!pushData(dout)) ret = 0;
    3616:	it	ne
    3618:	movne.w	r9, #1
      for (int ii=0; ii < ndat; ii++) dout[nout++] = outData[ii];
    361c:	bl	a254 <memcpy>
    3620:	str.w	r6, [r8]
    3624:	b.n	35aa <compress(void*)+0x13e>
      while(nout<NBUF_OUT) dout[nout++] = 0; // fill rest of block with zero
    3626:	str.w	r0, [r1, r3, lsl #2]
    362a:	movs	r2, #1
    362c:	adds	r3, #1
    362e:	b.n	35ee <compress(void*)+0x182>
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3630:	rsb	r3, r4, #122	; 0x7a
    3634:	ldr	r1, [pc, #176]	; (36e8 <compress(void*)+0x27c>)
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3636:	ldr	r2, [pc, #184]	; (36f0 <compress(void*)+0x284>)
      iptr[5] = (iptr[5]<<16) | (nr-NH);  //orig remaining data | actual remaining data after header 
    3638:	orr.w	r3, r3, r0, lsl #16
    363c:	mov	r0, r1
    363e:	str	r3, [r5, #20]
    3640:	mov	r3, r4
      while (nout < NBUF_OUT) dout[nout++] = outData[ii++];
    3642:	ldr.w	ip, [r0], #4
    3646:	str.w	ip, [r2, r3, lsl #2]
    364a:	adds	r3, #1
    364c:	cmp	r3, #128	; 0x80
    364e:	bne.n	3642 <compress(void*)+0x1d6>
      if(!pushData(dout)) ret = 0;
    3650:	ldr	r0, [pc, #156]	; (36f0 <compress(void*)+0x284>)
    3652:	rsb	sl, r4, #128	; 0x80
    3656:	str	r1, [sp, #4]
    3658:	str.w	r3, [r8]
    365c:	bl	2864 <pushData(unsigned long*)>
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    3660:	ldr	r3, [r5, #20]
      nr=ndat0-ii; // for header
    3662:	sub.w	r7, r7, sl
      if(!pushData(dout)) ret = 0;
    3666:	subs.w	r9, r0, #0
    366a:	mov	fp, sl
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    366c:	mov.w	r3, r3, lsr #16
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3670:	mov.w	r0, #7
      if(!pushData(dout)) ret = 0;
    3674:	it	ne
    3676:	movne.w	r9, #1
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    367a:	ldr	r1, [sp, #4]
      iptr[5]=(iptr[5] & 0xffff0000) | nr; //orig remaining data | actual remaining data after header
    367c:	lsls	r3, r3, #16
    367e:	orrs	r3, r7
    3680:	ldr	r7, [pc, #108]	; (36f0 <compress(void*)+0x284>)
    3682:	str	r3, [r5, #20]
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    3684:	mov	r2, r7
    3686:	movs	r3, #0
    3688:	str.w	r3, [r8]
    368c:	subs	r0, #1
    368e:	bne.n	36be <compress(void*)+0x252>
    3690:	cbz	r3, 3698 <compress(void*)+0x22c>
    3692:	movs	r3, #6
    3694:	str.w	r3, [r8]
    3698:	ldr.w	r1, [r8]
    369c:	movs	r3, #0
    369e:	add.w	r2, r2, r1, lsl #2
      while (ii < ndat) dout[nout++] = outData[ii++];
    36a2:	cmp	sl, r6
    36a4:	blt.n	36ca <compress(void*)+0x25e>
    36a6:	subs	r4, #128	; 0x80
    36a8:	add	r4, r6
    36aa:	cmp	r6, fp
    36ac:	it	lt
    36ae:	movlt	r4, #0
    36b0:	add	r4, r1
    36b2:	cmp	r3, #0
    36b4:	beq.w	35aa <compress(void*)+0x13e>
    36b8:	str.w	r4, [r8]
  return ret;
    36bc:	b.n	35aa <compress(void*)+0x13e>
      for(nout=0;nout<NH;nout++) dout[nout] = outData[nout];
    36be:	ldr.w	r3, [r1], #4
    36c2:	str.w	r3, [r7], #4
    36c6:	movs	r3, #1
    36c8:	b.n	368c <compress(void*)+0x220>
      while (ii < ndat) dout[nout++] = outData[ii++];
    36ca:	ldr.w	r3, [r5, sl, lsl #2]
    36ce:	add.w	sl, sl, #1
    36d2:	str.w	r3, [r2], #4
    36d6:	movs	r3, #1
    36d8:	b.n	36a2 <compress(void*)+0x236>
    36da:	nop
    36dc:	.word	0x200022e4
    36e0:	.word	0x20014c58
    36e4:	.word	0x20014c2c
    36e8:	.word	0x200141f4
    36ec:	.word	0x20015468
    36f0:	.word	0x20013fe4
    36f4:	.word	0x200145f4
    36f8:	.word	0x20014848

000036fc <Print::print(char const*) [clone .isra.0]>:
	size_t print(const char s[])			{ return write(s); }
    36fc:	push	{r0, r1, r4, lr}
    36fe:	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    3700:	cbz	r1, 371c <Print::print(char const*) [clone .isra.0]+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    3702:	mov	r0, r1
    3704:	str	r1, [sp, #4]
    3706:	bl	edd0 <strlen>
    370a:	ldr	r3, [r4, #0]
    370c:	mov	r2, r0
    370e:	ldr	r1, [sp, #4]
    3710:	ldr	r3, [r3, #4]
    3712:	mov	r0, r4
	size_t print(const char s[])			{ return write(s); }
    3714:	add	sp, #8
    3716:	ldmia.w	sp!, {r4, lr}
							  return write((const uint8_t *)str, strlen(str)); }
    371a:	bx	r3
	size_t print(const char s[])			{ return write(s); }
    371c:	add	sp, #8
    371e:	pop	{r4, pc}

00003720 <usbPowerInit()>:
    static const uint8_t i2c_addr[2]= {I2C_ADDRESS1, I2C_ADDRESS2};
    static const uint8_t regs[4]={0x3C, 0x41, 0x46, 0x4B};

    void usbPowerInit()
    {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_40 = 5;
    3720:	ldr	r3, [pc, #24]	; (373c <usbPowerInit()+0x1c>)
    3722:	movs	r2, #5
    3724:	str.w	r2, [r3, #180]	; 0xb4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_40 = 0x0008; // slow speed, weak 150 ohm drive
    3728:	movs	r2, #8
    372a:	str.w	r2, [r3, #676]	; 0x2a4

      GPIO8_GDIR |= 1<<26;
    372e:	ldr	r2, [pc, #16]	; (3740 <usbPowerInit()+0x20>)
    3730:	ldr	r3, [r2, #4]
    3732:	orr.w	r3, r3, #67108864	; 0x4000000
    3736:	str	r3, [r2, #4]
    }
    3738:	bx	lr
    373a:	nop
    373c:	.word	0x401f8000
    3740:	.word	0x42008000

00003744 <usbPowerSetup()>:
    {
      GPIO8_DR_CLEAR = 1<<26;
    }

    void usbPowerSetup(void)
    {
    3744:	push	{r3, lr}
      #if USB_POWER==1
        usbPowerInit();
    3746:	bl	3720 <usbPowerInit()>
      GPIO8_DR_SET = 1<<26;
    374a:	ldr	r3, [pc, #20]	; (3760 <usbPowerSetup()+0x1c>)
    374c:	mov.w	r2, #67108864	; 0x4000000
        usbPowerOn();
        delay(1000);
    3750:	mov.w	r0, #1000	; 0x3e8
      GPIO8_DR_SET = 1<<26;
    3754:	str.w	r2, [r3, #132]	; 0x84
      #endif
    }
    3758:	ldmia.w	sp!, {r3, lr}
        delay(1000);
    375c:	b.w	b79c <delay>
    3760:	.word	0x42008000

00003764 <acqPower(int)>:

    void acqPower(int flag)
    {   
        #if defined(ADC_EN)
            digitalWrite(ADC_EN,flag);
    3764:	uxtb	r1, r0
    3766:	movs	r0, #33	; 0x21
    {   
    3768:	push	{r3, lr}
            digitalWrite(ADC_EN,flag);
    376a:	bl	beec <digitalWrite>
            delay(100);
    376e:	movs	r0, #100	; 0x64
        #else
            (void) flag;
        #endif
    }
    3770:	ldmia.w	sp!, {r3, lr}
            delay(100);
    3774:	b.w	b79c <delay>

00003778 <adcReset()>:

    void adcReset(void) 
    { digitalWrite(ADC_SHDNZ,LOW); 
    3778:	movs	r1, #0
    377a:	movs	r0, #32
    377c:	b.w	beec <digitalWrite>

00003780 <adcStart()>:
    }
    void adcStart(void) 
    { digitalWrite(ADC_SHDNZ,HIGH); 
    3780:	movs	r1, #1
    3782:	movs	r0, #32
    3784:	b.w	beec <digitalWrite>

00003788 <adc_init()>:
    }


    void adc_init(void)
    {
    3788:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
        #if defined(ADC_EN)
            pinMode(ADC_EN,OUTPUT);
    378c:	movs	r1, #1
    378e:	movs	r0, #33	; 0x21
    3790:	bl	bf2c <pinMode>
        #endif
        acqPower(HIGH);
    3794:	movs	r0, #1
    3796:	bl	3764 <acqPower(int)>

        // reset ADC's 
        pinMode(ADC_SHDNZ,OUTPUT);
    379a:	movs	r1, #1
    379c:	movs	r0, #32
    379e:	bl	bf2c <pinMode>
        adcReset();
    37a2:	bl	3778 <adcReset()>
        delay(100);
    37a6:	movs	r0, #100	; 0x64
    37a8:	bl	b79c <delay>
        adcStart();
    37ac:	bl	3780 <adcStart()>

        /* ADDRESS L,L: 0x4C ; H,L: 0x4D; L,H: 0x4E; H,H: 0x4F */
        i2c_class i2c(&mWire,100'000); 
    37b0:	ldr	r2, [pc, #332]	; (3900 <adc_init()+0x178>)
    37b2:	ldr	r1, [pc, #336]	; (3904 <adc_init()+0x17c>)
    37b4:	add	r0, sp, #4
    37b6:	bl	39d0 <i2c_class::i2c_class(TwoWire*, unsigned long)>

        // check existance of device
        for(int ii=0; ii<NPORT_I2S; ii++)
        {
            if(i2c.exist(i2c_addr[ii]))
    37ba:	movs	r1, #76	; 0x4c
    37bc:	add	r0, sp, #4
    37be:	bl	39f4 <i2c_class::exist(unsigned char)>
                Serial.printf("found %x\n",i2c_addr[ii]);
    37c2:	movs	r2, #76	; 0x4c
            if(i2c.exist(i2c_addr[ii]))
    37c4:	cmp	r0, #0
    37c6:	beq.w	38fa <adc_init()+0x172>
                Serial.printf("found %x\n",i2c_addr[ii]);
    37ca:	ldr	r1, [pc, #316]	; (3908 <adc_init()+0x180>)
            else
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    37cc:	ldr	r0, [pc, #316]	; (390c <adc_init()+0x184>)

            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep

            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    37ce:	movs	r4, #11
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    37d0:	bl	c758 <Print::printf(char const*, ...)>
            i2c.write(i2c_addr[ii],0x02,0x81); // 1.8V AREG, not sleep
    37d4:	movs	r3, #129	; 0x81
    37d6:	movs	r2, #2
    37d8:	movs	r1, #76	; 0x4c
    37da:	add	r0, sp, #4
    37dc:	ldr	r5, [pc, #304]	; (3910 <adc_init()+0x188>)
    37de:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x07,(3<<4)); // TDM; 32 bit; default clock xmit on rising edge); zero fill
    37e2:	movs	r3, #48	; 0x30
    37e4:	movs	r2, #7
    37e6:	movs	r1, #76	; 0x4c
    37e8:	add	r0, sp, #4
    37ea:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x08,0x00); // TX_offset 0
    37ee:	movs	r3, #0
    37f0:	movs	r2, #8
    37f2:	movs	r1, #76	; 0x4c
    37f4:	add	r0, sp, #4
    37f6:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>

            for(int jj=0;jj<4;jj++)
            {
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37fa:	mov	r2, r4
            for(int jj=0;jj<4;jj++)
    37fc:	adds	r4, #1
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    37fe:	ldrb.w	r3, [r5], #1
    3802:	movs	r1, #76	; 0x4c
            for(int jj=0;jj<4;jj++)
    3804:	uxtb	r4, r4
                i2c.write(i2c_addr[ii],0x0B+jj,chmap[ii][jj]); 
    3806:	add	r0, sp, #4
    3808:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0;jj<4;jj++)
    380c:	cmp	r4, #15
    380e:	bne.n	37fa <adc_init()+0x72>
            }

            //i2c.write(i2c_addr[ii],0x73,chanMask[ii]); 	//Enable Input Ch-1 to Ch-8 by I2C write into P0_R115 
            i2c.write(i2c_addr[ii],0x73,0x30);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    3810:	movs	r3, #48	; 0x30
    3812:	movs	r2, #115	; 0x73
    3814:	movs	r1, #76	; 0x4c
    3816:	add	r0, sp, #4
    3818:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            //i2c.write(i2c_addr[ii],0x74,chanMask[ii]);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
            i2c.write(i2c_addr[ii],0x74,0x20);	//Enable ASI Output Ch-1 to Ch-8 slots by I2C write into P0_R116
    381c:	movs	r3, #32
    381e:	movs	r2, #116	; 0x74
    3820:	movs	r1, #76	; 0x4c
    3822:	add	r0, sp, #4
    3824:	ldr	r6, [pc, #236]	; (3914 <adc_init()+0x18c>)
    3826:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    382a:	movs	r3, #224	; 0xe0
    382c:	movs	r2, #117	; 0x75
    382e:	movs	r1, #76	; 0x4c
    3830:	add	r0, sp, #4

            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2

            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V

            for(int jj=0; jj<4; jj++)
    3832:	movs	r5, #0
            i2c.write(i2c_addr[ii],0x75,0xE0);			//Power-up ADC and PLL by I2C write into P0_R117 
    3834:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            {   
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3838:	ldr.w	r8, [pc, #236]	; 3928 <adc_init()+0x1a0>
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    383c:	movs	r3, #37	; 0x25
    383e:	movs	r2, #107	; 0x6b
    3840:	movs	r1, #76	; 0x4c
    3842:	add	r0, sp, #4
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    3844:	ldr	r7, [pc, #208]	; (3918 <adc_init()+0x190>)
            i2c.write(i2c_addr[ii],0x6B,(2<<4) | (1<<2) | (1<<0)); 	//LL-Filter and sum (1+2)/2; (3+4)/2
    3846:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            i2c.write(i2c_addr[ii],0x3B,0x60);  // 0: 2.75V; 1: 2.5V; 2: 1.375V
    384a:	movs	r3, #96	; 0x60
    384c:	movs	r2, #59	; 0x3b
    384e:	movs	r1, #76	; 0x4c
    3850:	add	r0, sp, #4
    3852:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3856:	ldrb.w	r4, [r6], #1
    385a:	movs	r3, #136	; 0x88
    385c:	movs	r1, #76	; 0x4c
    385e:	add	r0, sp, #4
    3860:	mov	r2, r4
            for(int jj=0; jj<4; jj++)
    3862:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+0, 0x88);  // CH1_CFG0 (Line in, 20 kOhm))
    3864:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3868:	ldrh.w	r3, [r8]
    386c:	adds	r2, r4, #1
    386e:	movs	r1, #76	; 0x4c
    3870:	uxtb	r3, r3
    3872:	add	r0, sp, #4
    3874:	uxtb	r2, r2
    3876:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+2, 201+dgain);   // CH1_CFG2
    387a:	ldrh	r3, [r7, #0]
    387c:	adds	r2, r4, #2
    387e:	movs	r1, #76	; 0x4c
    3880:	subs	r3, #55	; 0x37
    3882:	add	r0, sp, #4
    3884:	uxtb	r2, r2
    3886:	uxtb	r3, r3
    3888:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+3, 0x80);  // CH1_CFG3 (0dB decimal gain correction: +/- 0.8 dB) 
    388c:	adds	r2, r4, #3
    388e:	movs	r3, #128	; 0x80
    3890:	movs	r1, #76	; 0x4c
    3892:	uxtb	r2, r2
    3894:	add	r0, sp, #4
    3896:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
                i2c.write(i2c_addr[ii],regs[jj]+4, 0x00);  // CH1_CFG4 (0bit)
    389a:	adds	r2, r4, #4
    389c:	movs	r3, #0
    389e:	movs	r1, #76	; 0x4c
    38a0:	uxtb	r2, r2
    38a2:	add	r0, sp, #4
    38a4:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    38a8:	cmp	r5, #4
    38aa:	bne.n	3856 <adc_init()+0xce>
            }
            Serial.print("0x15: "); Serial.println(i2c.read(i2c_addr[ii],0x15),HEX);
    38ac:	ldr	r1, [pc, #108]	; (391c <adc_init()+0x194>)
    38ae:	ldr	r0, [pc, #92]	; (390c <adc_init()+0x184>)
    38b0:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    38b4:	movs	r2, #21
    38b6:	movs	r1, #76	; 0x4c
    38b8:	add	r0, sp, #4
    38ba:	bl	3a16 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    38be:	movs	r3, #0
    38c0:	mov	r1, r0
    38c2:	movs	r2, #16
    38c4:	ldr	r0, [pc, #68]	; (390c <adc_init()+0x184>)
    38c6:	bl	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    38ca:	ldr	r0, [pc, #64]	; (390c <adc_init()+0x184>)
    38cc:	bl	c720 <Print::println()>
            Serial.print("0x76: "); Serial.println(i2c.read(i2c_addr[ii],0x76),HEX);
    38d0:	ldr	r1, [pc, #76]	; (3920 <adc_init()+0x198>)
    38d2:	ldr	r0, [pc, #56]	; (390c <adc_init()+0x184>)
    38d4:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    38d8:	movs	r2, #118	; 0x76
    38da:	movs	r1, #76	; 0x4c
    38dc:	add	r0, sp, #4
    38de:	bl	3a16 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    38e2:	movs	r3, #0
    38e4:	mov	r1, r0
    38e6:	movs	r2, #16
    38e8:	ldr	r0, [pc, #32]	; (390c <adc_init()+0x184>)
    38ea:	bl	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    38ee:	ldr	r0, [pc, #28]	; (390c <adc_init()+0x184>)
    38f0:	bl	c720 <Print::println()>
            
        }
    }
    38f4:	add	sp, #8
    38f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                {  Serial.printf("ADC I2C %x not found\n",i2c_addr[ii]);/* while(1) ; */}
    38fa:	ldr	r1, [pc, #40]	; (3924 <adc_init()+0x19c>)
    38fc:	b.n	37cc <adc_init()+0x44>
    38fe:	nop
    3900:	.word	0x000186a0
    3904:	.word	0x20001e80
    3908:	.word	0x20001032
    390c:	.word	0x20001d30
    3910:	.word	0x20001092
    3914:	.word	0x2000108e
    3918:	.word	0x200153bc
    391c:	.word	0x20001053
    3920:	.word	0x2000105b
    3924:	.word	0x2000103c
    3928:	.word	0x200022e8

0000392c <setAGain(signed char)>:

    void setAGain(int8_t again)
    {
    392c:	push	{r0, r1, r4, r5, r6, lr}
    392e:	mov	r4, r0
    3930:	ldr	r6, [pc, #40]	; (395c <setAGain(signed char)+0x30>)
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
            for(int jj=0; jj<4; jj++)
    3932:	movs	r5, #0
        i2c_class i2c(&mWire,100'000);
    3934:	ldr	r2, [pc, #40]	; (3960 <setAGain(signed char)+0x34>)
            {
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3936:	uxtb	r4, r4
        i2c_class i2c(&mWire,100'000);
    3938:	ldr	r1, [pc, #40]	; (3964 <setAGain(signed char)+0x38>)
    393a:	add	r0, sp, #4
    393c:	bl	39d0 <i2c_class::i2c_class(TwoWire*, unsigned long)>
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3940:	ldrb.w	r2, [r6], #1
            for(int jj=0; jj<4; jj++)
    3944:	adds	r5, #1
                i2c.write(i2c_addr[ii],regs[jj]+1, again); // CH1_CFG1 (0dB gain)
    3946:	mov	r3, r4
    3948:	movs	r1, #76	; 0x4c
    394a:	adds	r2, #1
    394c:	add	r0, sp, #4
    394e:	uxtb	r2, r2
    3950:	bl	3a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>
            for(int jj=0; jj<4; jj++)
    3954:	cmp	r5, #4
    3956:	bne.n	3940 <setAGain(signed char)+0x14>
            }
    }
    3958:	add	sp, #8
    395a:	pop	{r4, r5, r6, pc}
    395c:	.word	0x2000108e
    3960:	.word	0x000186a0
    3964:	.word	0x20001e80

00003968 <adcStatus()>:
    void adcStatus(void)
    {
    3968:	push	{r0, r1, r4, lr}
        i2c_class i2c(&mWire,100'000);
        for(int ii=0; ii<NPORT_I2S; ii++)
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    396a:	ldr	r4, [pc, #80]	; (39bc <adcStatus()+0x54>)
        i2c_class i2c(&mWire,100'000);
    396c:	add	r0, sp, #4
    396e:	ldr	r2, [pc, #80]	; (39c0 <adcStatus()+0x58>)
    3970:	ldr	r1, [pc, #80]	; (39c4 <adcStatus()+0x5c>)
    3972:	bl	39d0 <i2c_class::i2c_class(TwoWire*, unsigned long)>
        {   Serial.print("\n0x15: "); Serial.print(i2c.read(i2c_addr[ii],0x15),HEX);
    3976:	mov	r0, r4
    3978:	ldr	r1, [pc, #76]	; (39c8 <adcStatus()+0x60>)
    397a:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    397e:	movs	r2, #21
    3980:	movs	r1, #76	; 0x4c
    3982:	add	r0, sp, #4
    3984:	bl	3a16 <i2c_class::read(unsigned char, unsigned char)>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    3988:	movs	r3, #0
    398a:	mov	r1, r0
    398c:	movs	r2, #16
    398e:	mov	r0, r4
    3990:	bl	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("\n0x76: "); Serial.print(i2c.read(i2c_addr[ii],0x76),HEX);
    3994:	mov	r0, r4
    3996:	ldr	r1, [pc, #52]	; (39cc <adcStatus()+0x64>)
    3998:	bl	36fc <Print::print(char const*) [clone .isra.0]>
    399c:	movs	r2, #118	; 0x76
    399e:	movs	r1, #76	; 0x4c
    39a0:	add	r0, sp, #4
    39a2:	bl	3a16 <i2c_class::read(unsigned char, unsigned char)>
    39a6:	movs	r3, #0
    39a8:	mov	r1, r0
    39aa:	movs	r2, #16
    39ac:	mov	r0, r4
    39ae:	bl	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        }
        Serial.println();
    39b2:	mov	r0, r4
    39b4:	bl	c720 <Print::println()>
    }
    39b8:	add	sp, #8
    39ba:	pop	{r4, pc}
    39bc:	.word	0x20001d30
    39c0:	.word	0x000186a0
    39c4:	.word	0x20001e80
    39c8:	.word	0x20001052
    39cc:	.word	0x2000105a

000039d0 <i2c_class::i2c_class(TwoWire*, unsigned long)>:
    {   this->wire = wire;
        wire->begin();
        delay(100);
    }

    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    39d0:	push	{r0, r1, r2, r4, r5, lr}
    39d2:	mov	r4, r1
    {   this->wire = wire;
    39d4:	str	r1, [r0, #0]
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    39d6:	mov	r5, r0
        wire->begin();
    39d8:	mov	r0, r1
    i2c_class::i2c_class(TwoWire *wire, uint32_t speed) 
    39da:	str	r2, [sp, #4]
        wire->begin();
    39dc:	bl	120c8 <___ZN7TwoWire5beginEv_veneer>
        delay(100);
    39e0:	movs	r0, #100	; 0x64
    39e2:	bl	b79c <delay>
        wire->setClock(speed);
    39e6:	mov	r0, r4
    39e8:	ldr	r1, [sp, #4]
    39ea:	bl	54c0 <TwoWire::setClock(unsigned long)>
    }
    39ee:	mov	r0, r5
    39f0:	add	sp, #12
    39f2:	pop	{r4, r5, pc}

000039f4 <i2c_class::exist(unsigned char)>:
        wire->setSCL(scl);
        wire->setSDA(sda);
    }

    uint8_t i2c_class::exist(uint8_t addr)
    {
    39f4:	push	{r3, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    39f6:	lsls	r1, r1, #1
        wire->beginTransmission(addr);
    39f8:	ldr	r3, [r0, #0]
    39fa:	strb.w	r1, [r3, #165]	; 0xa5
		transmitting = 1;
    39fe:	movs	r1, #1
    3a00:	strb.w	r1, [r3, #304]	; 0x130
		txBufferLength = 1;
    3a04:	strb.w	r1, [r3, #303]	; 0x12f
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    3a08:	ldr	r0, [r0, #0]
    3a0a:	bl	520c <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission()==0);
    }
    3a0e:	clz	r0, r0
    3a12:	lsrs	r0, r0, #5
    3a14:	pop	{r3, pc}

00003a16 <i2c_class::read(unsigned char, unsigned char)>:

    uint8_t i2c_class::read(uint8_t addr, uint8_t reg) 
    { 
    3a16:	push	{r4, r5, r6, lr}
        unsigned int val;
        wire->beginTransmission(addr);
    3a18:	ldr	r3, [r0, #0]
		transmitting = 1;
    3a1a:	movs	r6, #1
    { 
    3a1c:	mov	r5, r1
		txBuffer[0] = (address << 1);
    3a1e:	lsls	r1, r1, #1
		transmitting = 1;
    3a20:	strb.w	r6, [r3, #304]	; 0x130
    3a24:	mov	r4, r0
		txBuffer[0] = (address << 1);
    3a26:	strb.w	r1, [r3, #165]	; 0xa5
        wire->write(reg);
    3a2a:	mov	r1, r2
		txBufferLength = 1;
    3a2c:	strb.w	r6, [r3, #303]	; 0x12f
    3a30:	ldr	r0, [r0, #0]
    3a32:	ldr	r3, [r0, #0]
    3a34:	ldr	r3, [r3, #0]
    3a36:	blx	r3
        if (wire->endTransmission(false) != 0) return 0;
    3a38:	movs	r1, #0
    3a3a:	ldr	r0, [r4, #0]
    3a3c:	bl	520c <TwoWire::endTransmission(unsigned char)>
    3a40:	cbz	r0, 3a46 <i2c_class::read(unsigned char, unsigned char)+0x30>
    3a42:	movs	r0, #0
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
        val = wire->read();
        return val;
    }
    3a44:	pop	{r4, r5, r6, pc}
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    3a46:	mov	r3, r6
    3a48:	mov	r2, r6
    3a4a:	mov	r1, r5
    3a4c:	ldr	r0, [r4, #0]
    3a4e:	bl	52f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
        if (wire->requestFrom((int)addr, 1) < 1) return 0;
    3a52:	cmp	r0, #0
    3a54:	beq.n	3a42 <i2c_class::read(unsigned char, unsigned char)+0x2c>
        val = wire->read();
    3a56:	ldr	r0, [r4, #0]
    3a58:	ldr	r3, [r0, #0]
    3a5a:	ldr	r3, [r3, #20]
    3a5c:	blx	r3
        return val;
    3a5e:	uxtb	r0, r0
    3a60:	b.n	3a44 <i2c_class::read(unsigned char, unsigned char)+0x2e>

00003a62 <i2c_class::write(unsigned char, unsigned char, unsigned char)>:
        wire->write(reg);
        return (wire->endTransmission() == 0) ;
    }

    uint8_t i2c_class::write(uint8_t addr, uint8_t reg, uint8_t val) 
    { 
    3a62:	push	{r4, r5, r6, lr}
    3a64:	mov	r4, r0
		transmitting = 1;
    3a66:	movs	r5, #1
    3a68:	mov	r6, r3
        wire->beginTransmission(addr);
    3a6a:	ldr	r3, [r0, #0]
		txBuffer[0] = (address << 1);
    3a6c:	lsls	r0, r1, #1
        wire->write(reg);
    3a6e:	mov	r1, r2
		transmitting = 1;
    3a70:	strb.w	r5, [r3, #304]	; 0x130
		txBufferLength = 1;
    3a74:	strb.w	r5, [r3, #303]	; 0x12f
		txBuffer[0] = (address << 1);
    3a78:	strb.w	r0, [r3, #165]	; 0xa5
    3a7c:	ldr	r0, [r4, #0]
    3a7e:	ldr	r3, [r0, #0]
    3a80:	ldr	r3, [r3, #0]
    3a82:	blx	r3
        wire->write(val);
    3a84:	ldr	r0, [r4, #0]
    3a86:	mov	r1, r6
    3a88:	ldr	r3, [r0, #0]
    3a8a:	ldr	r3, [r3, #0]
    3a8c:	blx	r3
		return endTransmission(1);
    3a8e:	mov	r1, r5
    3a90:	ldr	r0, [r4, #0]
    3a92:	bl	520c <TwoWire::endTransmission(unsigned char)>
        return (wire->endTransmission() == 0) ;
    }
    3a96:	clz	r0, r0
    3a9a:	lsrs	r0, r0, #5
    3a9c:	pop	{r4, r5, r6, pc}
	...

00003aa0 <time2date(unsigned long, datetime_t*)>:
  #define SECS_PER_DAY  ((uint32_t)(SECS_PER_HOUR * 24UL))

  static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
  void time2date(uint32_t time, datetime_t *tm)
  {
    3aa0:	push	{r4, r5, r6, r7, lr}

    uint8_t year;
    uint8_t month, monthLength;
    unsigned long days;

    tm->sec  = time % 60; time /= 60; // now time is minutes
    3aa2:	movs	r4, #60	; 0x3c

    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    
    year = 0;  
    days = 0;
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3aa4:	movw	lr, #365	; 0x16d
    3aa8:	movs	r6, #100	; 0x64
    3aaa:	mov.w	ip, #400	; 0x190
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3aae:	udiv	r2, r0, r4
    tm->min  = time % 60; time /= 60; // now time is hours
    3ab2:	udiv	r3, r2, r4
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3ab6:	mls	r0, r4, r2, r0
    tm->min  = time % 60; time /= 60; // now time is hours
    3aba:	mls	r2, r4, r3, r2
    tm->sec  = time % 60; time /= 60; // now time is minutes
    3abe:	strb	r0, [r1, #7]
    tm->hour = time % 24; time /= 24; // now time is days
    3ac0:	movs	r0, #24
    tm->min  = time % 60; time /= 60; // now time is hours
    3ac2:	strb	r2, [r1, #6]
    tm->hour = time % 24; time /= 24; // now time is days
    3ac4:	udiv	r2, r3, r0
    3ac8:	mls	r3, r0, r2, r3
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3acc:	adds	r0, r2, #4
    tm->hour = time % 24; time /= 24; // now time is days
    3ace:	strb	r3, [r1, #5]
    tm->dotw = ((time + 4) % 7) ;  // Sunday is day 0 // 1-1-1970 was Thursday
    3ad0:	movs	r3, #7
    3ad2:	udiv	r3, r0, r3
    3ad6:	rsb	r3, r3, r3, lsl #3
    3ada:	subs	r0, r0, r3
    3adc:	strb	r0, [r1, #4]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3ade:	movs	r0, #0
    days = 0;
    3ae0:	mov	r4, r0
    3ae2:	uxtb	r3, r0
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3ae4:	addw	r3, r3, #1970	; 0x7b2
    3ae8:	ands.w	r7, r3, #3
    3aec:	bne.n	3b70 <time2date(unsigned long, datetime_t*)+0xd0>
    3aee:	sdiv	r5, r3, r6
    3af2:	mls	r5, r6, r5, r3
    3af6:	cmp	r5, #0
    3af8:	bne.n	3b76 <time2date(unsigned long, datetime_t*)+0xd6>
    3afa:	sdiv	r5, r3, ip
    3afe:	mls	r5, ip, r5, r3
    3b02:	cmp	r5, #0
    3b04:	ite	ne
    3b06:	movne	r5, lr
    3b08:	moveq.w	r5, #366	; 0x16e
    3b0c:	add	r4, r5
    3b0e:	adds	r0, #1
    3b10:	cmp	r2, r4
    3b12:	bcs.n	3ae2 <time2date(unsigned long, datetime_t*)+0x42>
    3b14:	movs	r0, #100	; 0x64
      year++;
    }
    tm->year = year+YEAR0;
    3b16:	strh	r3, [r1, #0]
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3b18:	udiv	r6, r3, r0
    3b1c:	mls	r6, r0, r6, r3
    3b20:	mov.w	r0, #400	; 0x190
    3b24:	udiv	r5, r3, r0
    3b28:	mls	r3, r0, r5, r3
    
    days -= LEAP_YEAR(year) ? 366 : 365;
    3b2c:	cbnz	r7, 3b7c <time2date(unsigned long, datetime_t*)+0xdc>
    3b2e:	cbnz	r6, 3b82 <time2date(unsigned long, datetime_t*)+0xe2>
    3b30:	cmp	r3, #0
    3b32:	movw	r0, #365	; 0x16d
    3b36:	it	eq
    3b38:	moveq.w	r0, #366	; 0x16e
    time -= days; // now time is days in this year, starting at 0
    3b3c:	subs	r2, r2, r4
          monthLength=29;
        } else {
          monthLength=28;
        }
      } else {
        monthLength = monthDays[month];
    3b3e:	ldr.w	ip, [pc, #88]	; 3b98 <time2date(unsigned long, datetime_t*)+0xf8>
    time -= days; // now time is days in this year, starting at 0
    3b42:	add	r2, r0
    3b44:	movs	r0, #0
      if (month==1) { // february
    3b46:	cmp	r0, #1
    3b48:	uxtb	r5, r0
    3b4a:	bne.n	3b88 <time2date(unsigned long, datetime_t*)+0xe8>
        if (LEAP_YEAR(year)) {
    3b4c:	cbnz	r7, 3b8e <time2date(unsigned long, datetime_t*)+0xee>
    3b4e:	cbnz	r6, 3b92 <time2date(unsigned long, datetime_t*)+0xf2>
          monthLength=29;
    3b50:	cmp	r3, #0
    3b52:	ite	ne
    3b54:	movne	r4, #28
    3b56:	moveq	r4, #29
      }
      
      if (time >= monthLength) {
    3b58:	cmp	r4, r2
    3b5a:	bhi.n	3b66 <time2date(unsigned long, datetime_t*)+0xc6>
    for (month=0; month<12; month++) {
    3b5c:	adds	r0, #1
        time -= monthLength;
    3b5e:	subs	r2, r2, r4
    for (month=0; month<12; month++) {
    3b60:	cmp	r0, #12
    3b62:	bne.n	3b46 <time2date(unsigned long, datetime_t*)+0xa6>
    3b64:	mov	r5, r0
      } else {
          break;
      }
    }
    tm->month = month + 1;  // jan is month 1  
    3b66:	adds	r5, #1
    tm->day = time + 1;     // day of month
    3b68:	adds	r2, #1
    tm->month = month + 1;  // jan is month 1  
    3b6a:	strb	r5, [r1, #2]
    tm->day = time + 1;     // day of month
    3b6c:	strb	r2, [r1, #3]
  }
    3b6e:	pop	{r4, r5, r6, r7, pc}
    while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    3b70:	movw	r5, #365	; 0x16d
    3b74:	b.n	3b0c <time2date(unsigned long, datetime_t*)+0x6c>
    3b76:	mov.w	r5, #366	; 0x16e
    3b7a:	b.n	3b0c <time2date(unsigned long, datetime_t*)+0x6c>
    days -= LEAP_YEAR(year) ? 366 : 365;
    3b7c:	movw	r0, #365	; 0x16d
    3b80:	b.n	3b3c <time2date(unsigned long, datetime_t*)+0x9c>
    3b82:	mov.w	r0, #366	; 0x16e
    3b86:	b.n	3b3c <time2date(unsigned long, datetime_t*)+0x9c>
        monthLength = monthDays[month];
    3b88:	ldrb.w	r4, [r0, ip]
    3b8c:	b.n	3b58 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=28;
    3b8e:	movs	r4, #28
    3b90:	b.n	3b58 <time2date(unsigned long, datetime_t*)+0xb8>
          monthLength=29;
    3b92:	movs	r4, #29
    3b94:	b.n	3b58 <time2date(unsigned long, datetime_t*)+0xb8>
    3b96:	nop
    3b98:	.word	0x20001101

00003b9c <date2time(datetime_t*)>:
  {
    int ii;
    uint32_t seconds;

    uint8_t year;
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3b9c:	ldrh	r3, [r0, #0]
      if (LEAP_YEAR(ii)) {
        seconds += SECS_PER_DAY;   // add extra days for leap years
      }
    }
    #endif
    uint32_t days= year*365;
    3b9e:	movw	r2, #365	; 0x16d
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3ba2:	movw	r1, #1970	; 0x7b2
    year=tm->year-YEAR0; // year after 1-jan-1970 (YEAR0)
    3ba6:	adds	r3, #78	; 0x4e
    3ba8:	uxtb	r3, r3
  {
    3baa:	push	{r4, r5, r6, r7, lr}
    uint32_t days= year*365;
    3bac:	muls	r2, r3
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3bae:	movs	r5, #100	; 0x64
    3bb0:	mov.w	r6, #400	; 0x190
    3bb4:	subw	r4, r1, #1970	; 0x7b2
    3bb8:	cmp	r3, r4
    3bba:	bgt.n	3c16 <date2time(datetime_t*)+0x7a>
    seconds = days*SECS_PER_DAY;

    // add days for this year, months start from 1
    for (ii = 1; ii < tm->month; ii++) {
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3bbc:	addw	r3, r3, #1970	; 0x7b2
    3bc0:	movs	r1, #100	; 0x64
    seconds = days*SECS_PER_DAY;
    3bc2:	ldr	r7, [pc, #148]	; (3c58 <date2time(datetime_t*)+0xbc>)
    for (ii = 1; ii < tm->month; ii++) {
    3bc4:	ldrsb.w	ip, [r0, #2]
    seconds = days*SECS_PER_DAY;
    3bc8:	muls	r2, r7
    for (ii = 1; ii < tm->month; ii++) {
    3bca:	ldr	r6, [pc, #144]	; (3c5c <date2time(datetime_t*)+0xc0>)
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3bcc:	udiv	r4, r3, r1
    3bd0:	mls	r4, r1, r4, r3
    3bd4:	mov.w	r1, #400	; 0x190
    3bd8:	udiv	r5, r3, r1
    3bdc:	mls	r5, r1, r5, r3
    for (ii = 1; ii < tm->month; ii++) {
    3be0:	movs	r1, #1
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3be2:	and.w	r3, r3, #3
    for (ii = 1; ii < tm->month; ii++) {
    3be6:	cmp	ip, r1
    3be8:	bgt.n	3c34 <date2time(datetime_t*)+0x98>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
      }
    }
    seconds+= (tm->day-1) * SECS_PER_DAY;
    seconds+= tm->hour * SECS_PER_HOUR;
    seconds+= tm->min * SECS_PER_MIN;
    3bea:	ldrsb.w	r3, [r0, #6]
    seconds+= tm->sec;
    3bee:	mov.w	r4, #3600	; 0xe10
    seconds+= tm->hour * SECS_PER_HOUR;
    3bf2:	ldrsb.w	r1, [r0, #5]
    seconds+= tm->min * SECS_PER_MIN;
    3bf6:	rsb	r3, r3, r3, lsl #4
    3bfa:	lsls	r3, r3, #2
    seconds+= tm->sec;
    3bfc:	mla	r3, r4, r1, r3
    3c00:	ldrsb.w	r1, [r0, #7]
    3c04:	add	r3, r1
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3c06:	ldrsb.w	r1, [r0, #3]
    seconds+= tm->sec;
    3c0a:	ldr	r0, [pc, #76]	; (3c58 <date2time(datetime_t*)+0xbc>)
    seconds+= (tm->day-1) * SECS_PER_DAY;
    3c0c:	subs	r1, #1
    seconds+= tm->sec;
    3c0e:	mla	r0, r0, r1, r3
    return seconds; 
  }
    3c12:	add	r0, r2
    3c14:	pop	{r4, r5, r6, r7, pc}
    for (ii = 0; ii < year; ii++) if (LEAP_YEAR(ii)) days++;  // add extra days for leap years
    3c16:	lsls	r4, r1, #30
    3c18:	bne.n	3c30 <date2time(datetime_t*)+0x94>
    3c1a:	sdiv	r4, r1, r5
    3c1e:	mls	r4, r5, r4, r1
    3c22:	cbnz	r4, 3c2e <date2time(datetime_t*)+0x92>
    3c24:	sdiv	r4, r1, r6
    3c28:	mls	r4, r6, r4, r1
    3c2c:	cbnz	r4, 3c30 <date2time(datetime_t*)+0x94>
    3c2e:	adds	r2, #1
    3c30:	adds	r1, #1
    3c32:	b.n	3bb4 <date2time(datetime_t*)+0x18>
      if ( (ii == 2) && LEAP_YEAR(year)) { 
    3c34:	cmp	r1, #2
    3c36:	bne.n	3c4c <date2time(datetime_t*)+0xb0>
    3c38:	cbnz	r3, 3c4c <date2time(datetime_t*)+0xb0>
    3c3a:	cbnz	r4, 3c3e <date2time(datetime_t*)+0xa2>
    3c3c:	cbnz	r5, 3c4c <date2time(datetime_t*)+0xb0>
        seconds += SECS_PER_DAY * 29;
    3c3e:	add.w	r2, r2, #2490368	; 0x260000
    3c42:	add.w	r2, r2, #15232	; 0x3b80
    for (ii = 1; ii < tm->month; ii++) {
    3c46:	adds	r1, #1
    3c48:	adds	r6, #1
    3c4a:	b.n	3be6 <date2time(datetime_t*)+0x4a>
        seconds += SECS_PER_DAY * monthDays[ii-1];  //monthDay array starts from 0
    3c4c:	ldrb.w	lr, [r6]
    3c50:	mla	r2, r7, lr, r2
    3c54:	b.n	3c46 <date2time(datetime_t*)+0xaa>
    3c56:	nop
    3c58:	.word	0x00015180
    3c5c:	.word	0x20001101

00003c60 <rtcXferTime()>:
    3c60:	bx	lr

00003c62 <rtcGetTimestamp()>:
      return rtc.stringTimeStamp();
    }
    #else
      return 0;
    #endif
  }
    3c62:	movs	r0, #0
    3c64:	bx	lr

00003c66 <rtc_get_datetime(datetime_t*)>:

  bool rtc_get_datetime(datetime_t *t)
  {
    3c66:	push	{r0, r1, r2, lr}
    3c68:	str	r0, [sp, #4]
    time2date(rtc_get(), t);
    3c6a:	bl	b998 <rtc_get>
    3c6e:	ldr	r1, [sp, #4]
    3c70:	bl	3aa0 <time2date(unsigned long, datetime_t*)>
    return 1;
  }
    3c74:	movs	r0, #1
    3c76:	add	sp, #12
    3c78:	ldr.w	pc, [sp], #4

00003c7c <rtc_set_datetime(datetime_t*)>:

  bool rtc_set_datetime(datetime_t *t)
  {
    3c7c:	push	{r3, lr}
    rtc_set(date2time(t));
    3c7e:	bl	3b9c <date2time(datetime_t*)>
    3c82:	bl	b9bc <rtc_set>
    return 1;
  }
    3c86:	movs	r0, #1
    3c88:	pop	{r3, pc}

00003c8a <rtcSetDate(int, int, int)>:

  void rtcSetDate(int year,int month,int day)
  { datetime_t t;
    3c8a:	push	{r0, r1, r4, r5, r6, lr}
    3c8c:	mov	r5, r1
    3c8e:	mov	r4, r2
    3c90:	mov	r6, r0
    rtc_get_datetime(&t);
    3c92:	mov	r0, sp
    3c94:	bl	3c66 <rtc_get_datetime(datetime_t*)>
    t.year=year;
    t.month=month;
    t.day=day;
    rtc_set_datetime(&t);
    3c98:	mov	r0, sp
    t.year=year;
    3c9a:	strh.w	r6, [sp]
    t.month=month;
    3c9e:	strb.w	r5, [sp, #2]
    t.day=day;
    3ca2:	strb.w	r4, [sp, #3]
    rtc_set_datetime(&t);
    3ca6:	bl	3c7c <rtc_set_datetime(datetime_t*)>
  }
    3caa:	add	sp, #8
    3cac:	pop	{r4, r5, r6, pc}

00003cae <rtcSetTime(int, int, int)>:

  void rtcSetTime(int hour,int minutes,int seconds)
  { datetime_t t;
    3cae:	push	{r0, r1, r4, r5, r6, lr}
    3cb0:	mov	r5, r1
    3cb2:	mov	r4, r2
    3cb4:	mov	r6, r0
    rtc_get_datetime(&t);
    3cb6:	mov	r0, sp
    3cb8:	bl	3c66 <rtc_get_datetime(datetime_t*)>
    t.hour=hour;
    t.min=minutes;
    t.sec=seconds;
    rtc_set_datetime(&t);
    3cbc:	mov	r0, sp
    t.hour=hour;
    3cbe:	strb.w	r6, [sp, #5]
    t.min=minutes;
    3cc2:	strb.w	r5, [sp, #6]
    t.sec=seconds;
    3cc6:	strb.w	r4, [sp, #7]
    rtc_set_datetime(&t);
    3cca:	bl	3c7c <rtc_set_datetime(datetime_t*)>
  }
    3cce:	add	sp, #8
    3cd0:	pop	{r4, r5, r6, pc}

00003cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>:
    }
  }

#elif defined(__IMXRT1062__)  

    int MTPD::push_packet(uint8_t *data_buffer,uint32_t len)
    3cd2:	push	{r3, r4, r5, lr}
    3cd4:	mov	r4, r0
    3cd6:	mov	r5, r1
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3cd8:	movs	r2, #60	; 0x3c
    3cda:	mov	r1, r5
    3cdc:	mov	r0, r4
    3cde:	bl	c2ac <usb_mtp_send>
    3ce2:	cmp	r0, #0
    3ce4:	ble.n	3cd8 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]+0x6>
      return 1;
    }
    3ce6:	pop	{r3, r4, r5, pc}

00003ce8 <MTPD::write(char const*, int) [clone .part.0]>:
    int MTPD::fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void MTPD::write(const char *data, int len) 
    3ce8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3cec:	mov	r7, r1
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3cee:	add.w	r1, r0, #8192	; 0x2000
    void MTPD::write(const char *data, int len) 
    3cf2:	mov	r6, r2
        if(!write_length_) dst=tx_data_buffer;   
    3cf4:	ldr.w	r3, [r1, #1064]	; 0x428
    3cf8:	cbnz	r3, 3d02 <MTPD::write(char const*, int) [clone .part.0]+0x1a>
    3cfa:	add.w	r2, r0, #544	; 0x220
    3cfe:	ldr	r4, [pc, #92]	; (3d5c <MTPD::write(char const*, int) [clone .part.0]+0x74>)
    3d00:	str	r2, [r4, #0]
        write_length_ += len;
    3d02:	add	r3, r6
        
        const char * src=data;
        //
        int pos = 0; // into data
    3d04:	mov.w	r8, #0
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d08:	add.w	r9, r0, #1056	; 0x420
    3d0c:	ldr.w	sl, [pc, #76]	; 3d5c <MTPD::write(char const*, int) [clone .part.0]+0x74>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d10:	add.w	r4, r0, #544	; 0x220
        write_length_ += len;
    3d14:	str.w	r3, [r1, #1064]	; 0x428
        while(pos<len)
    3d18:	cmp	r6, r8
    3d1a:	bgt.n	3d20 <MTPD::write(char const*, int) [clone .part.0]+0x38>
            dst=tx_data_buffer;
          }
        }
      }
    }
    3d1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d20:	ldr.w	r3, [sl]
          int to_copy = min(len - pos, avail);
    3d24:	sub.w	r2, r6, r8
          memcpy(dst,src,to_copy);
    3d28:	mov	r1, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    3d2a:	sub.w	r5, r9, r3
          memcpy(dst,src,to_copy);
    3d2e:	mov	r0, r3
    3d30:	cmp	r5, r2
    3d32:	it	ge
    3d34:	movge	r5, r2
    3d36:	mov	r2, r5
          pos += to_copy;
    3d38:	add	r8, r5
          memcpy(dst,src,to_copy);
    3d3a:	bl	a254 <memcpy>
    3d3e:	mov	r3, r0
          src += to_copy;
    3d40:	add	r7, r5
          dst += to_copy;
    3d42:	add	r3, r5
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d44:	cmp	r9, r3
          dst += to_copy;
    3d46:	str.w	r3, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d4a:	bne.n	3d18 <MTPD::write(char const*, int) [clone .part.0]+0x30>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d4c:	mov.w	r1, #512	; 0x200
    3d50:	mov	r0, r4
    3d52:	bl	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            dst=tx_data_buffer;
    3d56:	str.w	r4, [sl]
    3d5a:	b.n	3d18 <MTPD::write(char const*, int) [clone .part.0]+0x30>
    3d5c:	.word	0x20014850

00003d60 <MTPD::GetNumObjects(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    3d60:	push	{r4, r5, r6, lr}
    3d62:	mov	r5, r0
    storage_->StartGetObjectHandles(store, parent);
    3d64:	ldr	r0, [r0, #0]
  { uint32_t store = Storage2Store(storage);
    3d66:	subs	r4, r1, #1
    int num = 0;
    3d68:	movs	r6, #0
    storage_->StartGetObjectHandles(store, parent);
    3d6a:	ldr	r3, [r0, #0]
    3d6c:	mov	r1, r4
    3d6e:	ldr	r3, [r3, #28]
    3d70:	blx	r3
    while (storage_->GetNextObjectHandle(store)) num++;
    3d72:	ldr	r0, [r5, #0]
    3d74:	mov	r1, r4
    3d76:	ldr	r3, [r0, #0]
    3d78:	ldr	r3, [r3, #32]
    3d7a:	blx	r3
    3d7c:	cbnz	r0, 3d82 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x22>
  }
    3d7e:	mov	r0, r6
    3d80:	pop	{r4, r5, r6, pc}
    while (storage_->GetNextObjectHandle(store)) num++;
    3d82:	adds	r6, #1
    3d84:	b.n	3d72 <MTPD::GetNumObjects(unsigned long, unsigned long)+0x12>

00003d86 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>:
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3d86:	ldr	r0, [r0, #0]
    3d88:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3d8a:	push	{r4, lr}
      if(storage_->move(handle,store1,newHandle)) return 0x2001; else return  0x2005;
    3d8c:	ldr	r4, [r0, #0]
    3d8e:	ldr	r4, [r4, #76]	; 0x4c
    3d90:	blx	r4
    }
    3d92:	movw	r2, #8193	; 0x2001
    3d96:	movw	r3, #8197	; 0x2005
    3d9a:	cmp	r0, #0
    3d9c:	ite	ne
    3d9e:	movne	r0, r2
    3da0:	moveq	r0, r3
    3da2:	pop	{r4, pc}

00003da4 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>:
      return storage_->copy(handle,store1,newHandle);
    3da4:	ldr	r0, [r0, #0]
    3da6:	subs	r2, #1
    { uint32_t store1=Storage2Store(newStorage);
    3da8:	push	{r4}
      return storage_->copy(handle,store1,newHandle);
    3daa:	ldr	r4, [r0, #0]
    3dac:	ldr	r4, [r4, #80]	; 0x50
    3dae:	mov	ip, r4
    }
    3db0:	ldr.w	r4, [sp], #4
      return storage_->copy(handle,store1,newHandle);
    3db4:	bx	ip
	...

00003db8 <MTPD::openSession(unsigned long)>:
      sessionID_ = id;
    3db8:	ldr	r3, [pc, #8]	; (3dc4 <MTPD::openSession(unsigned long)+0xc>)
      storage_->ResetIndex();
    3dba:	ldr	r0, [r0, #0]
      sessionID_ = id;
    3dbc:	str	r1, [r3, #0]
      storage_->ResetIndex();
    3dbe:	ldr	r3, [r0, #0]
    3dc0:	ldr	r3, [r3, #68]	; 0x44
    3dc2:	bx	r3
    3dc4:	.word	0x200151b0

00003dc8 <MTPD::pull_packet(unsigned char*)>:
    {
    3dc8:	push	{r4, lr}
    3dca:	mov	r4, r1
      while(!usb_mtp_available());
    3dcc:	bl	c27c <usb_mtp_available>
    3dd0:	cmp	r0, #0
    3dd2:	beq.n	3dcc <MTPD::pull_packet(unsigned char*)+0x4>
      return usb_mtp_recv(data_buffer,60);
    3dd4:	mov	r0, r4
    3dd6:	movs	r1, #60	; 0x3c
    }
    3dd8:	ldmia.w	sp!, {r4, lr}
      return usb_mtp_recv(data_buffer,60);
    3ddc:	b.w	c1e8 <usb_mtp_recv>

00003de0 <MTPD::write(char const*, int)>:
    { if (write_get_length_) 
    3de0:	add.w	r3, r0, #8192	; 0x2000
    3de4:	push	{r4, r5}
    3de6:	ldrb.w	r5, [r3, #1060]	; 0x424
    3dea:	cbz	r5, 3dfa <MTPD::write(char const*, int)+0x1a>
        write_length_ += len;
    3dec:	ldr.w	r1, [r3, #1064]	; 0x428
    3df0:	add	r1, r2
    }
    3df2:	pop	{r4, r5}
        write_length_ += len;
    3df4:	str.w	r1, [r3, #1064]	; 0x428
    }
    3df8:	bx	lr
    3dfa:	pop	{r4, r5}
    3dfc:	b.w	3ce8 <MTPD::write(char const*, int) [clone .part.0]>

00003e00 <MTPD::write8(unsigned char)>:
  void MTPD::write8 (uint8_t  x) { write((char*)&x, sizeof(x)); }
    3e00:	push	{r0, r1, r2, lr}
    3e02:	movs	r2, #1
    3e04:	strb.w	r1, [sp, #7]
    3e08:	add.w	r1, sp, #7
    3e0c:	bl	3de0 <MTPD::write(char const*, int)>
    3e10:	add	sp, #12
    3e12:	ldr.w	pc, [sp], #4

00003e16 <MTPD::write16(unsigned short)>:
  void MTPD::write16(uint16_t x) { write((char*)&x, sizeof(x)); }
    3e16:	push	{r0, r1, r2, lr}
    3e18:	movs	r2, #2
    3e1a:	strh.w	r1, [sp, #6]
    3e1e:	add.w	r1, sp, #6
    3e22:	bl	3de0 <MTPD::write(char const*, int)>
    3e26:	add	sp, #12
    3e28:	ldr.w	pc, [sp], #4

00003e2c <MTPD::writestring(char const*)>:
  void MTPD::writestring(const char* str) {
    3e2c:	push	{r3, r4, r5, lr}
    3e2e:	mov	r4, r1
    if (*str) 
    3e30:	ldrb	r1, [r1, #0]
  void MTPD::writestring(const char* str) {
    3e32:	mov	r5, r0
    if (*str) 
    3e34:	cbz	r1, 3e5e <MTPD::writestring(char const*)+0x32>
    { write8(strlen(str) + 1);
    3e36:	mov	r0, r4
    3e38:	subs	r4, #1
    3e3a:	bl	edd0 <strlen>
    3e3e:	adds	r0, #1
    3e40:	uxtb	r1, r0
    3e42:	mov	r0, r5
    3e44:	bl	3e00 <MTPD::write8(unsigned char)>
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e48:	ldrb.w	r1, [r4, #1]!
    3e4c:	mov	r0, r5
    3e4e:	cbnz	r1, 3e58 <MTPD::writestring(char const*)+0x2c>
  }
    3e50:	ldmia.w	sp!, {r3, r4, r5, lr}
      while (*str) {  write16(*str);  ++str;  } write16(0);
    3e54:	b.w	3e16 <MTPD::write16(unsigned short)>
    3e58:	bl	3e16 <MTPD::write16(unsigned short)>
    3e5c:	b.n	3e48 <MTPD::writestring(char const*)+0x1c>
  }
    3e5e:	ldmia.w	sp!, {r3, r4, r5, lr}
    { write8(0);
    3e62:	b.w	3e00 <MTPD::write8(unsigned char)>
	...

00003e68 <MTPD::GetDevicePropValue(unsigned long)>:
    switch (prop) {
    3e68:	movw	r3, #54274	; 0xd402
    3e6c:	cmp	r1, r3
    3e6e:	bne.n	3e76 <MTPD::GetDevicePropValue(unsigned long)+0xe>
        writestring(MTP_NAME);
    3e70:	ldr	r1, [pc, #4]	; (3e78 <MTPD::GetDevicePropValue(unsigned long)+0x10>)
    3e72:	b.w	3e2c <MTPD::writestring(char const*)>
  }
    3e76:	bx	lr
    3e78:	.word	0x20001189

00003e7c <MTPD::GetDevicePropDesc(unsigned long)>:
    switch (prop) {
    3e7c:	movw	r3, #54274	; 0xd402
    3e80:	cmp	r1, r3
  void MTPD::GetDevicePropDesc(uint32_t prop) {
    3e82:	push	{r4, lr}
    3e84:	mov	r4, r0
    switch (prop) {
    3e86:	bne.n	3eba <MTPD::GetDevicePropDesc(unsigned long)+0x3e>
        write16(prop);
    3e88:	bl	3e16 <MTPD::write16(unsigned short)>
        write16(0xFFFF); // string type
    3e8c:	mov	r0, r4
    3e8e:	movw	r1, #65535	; 0xffff
    3e92:	bl	3e16 <MTPD::write16(unsigned short)>
        write8(0);       // read-only
    3e96:	mov	r0, r4
    3e98:	movs	r1, #0
    3e9a:	bl	3e00 <MTPD::write8(unsigned char)>
        writestring(MTP_NAME);
    3e9e:	mov	r0, r4
    3ea0:	ldr	r1, [pc, #24]	; (3ebc <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3ea2:	bl	3e2c <MTPD::writestring(char const*)>
    3ea6:	mov	r0, r4
    3ea8:	ldr	r1, [pc, #16]	; (3ebc <MTPD::GetDevicePropDesc(unsigned long)+0x40>)
    3eaa:	bl	3e2c <MTPD::writestring(char const*)>
        write8(0);       // no form
    3eae:	mov	r0, r4
    3eb0:	movs	r1, #0
  }
    3eb2:	ldmia.w	sp!, {r4, lr}
        write8(0);       // no form
    3eb6:	b.w	3e00 <MTPD::write8(unsigned char)>
  }
    3eba:	pop	{r4, pc}
    3ebc:	.word	0x20001189

00003ec0 <MTPD::write32(unsigned long)>:
  void MTPD::write32(uint32_t x) { write((char*)&x, sizeof(x)); }
    3ec0:	push	{r0, r1, r2, lr}
    3ec2:	movs	r2, #4
    3ec4:	str	r1, [sp, #4]
    3ec6:	add.w	r1, sp, r2
    3eca:	bl	3de0 <MTPD::write(char const*, int)>
    3ece:	add	sp, #12
    3ed0:	ldr.w	pc, [sp], #4

00003ed4 <MTPD::WriteDescriptor()>:
  void MTPD::WriteDescriptor() {
    3ed4:	push	{r4, r5, r6, lr}
    3ed6:	mov	r4, r0
    3ed8:	sub	sp, #24
    write16(100);  // MTP version
    3eda:	movs	r1, #100	; 0x64
    3edc:	ldr	r6, [pc, #240]	; (3fd0 <MTPD::WriteDescriptor()+0xfc>)
    3ede:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(6);    // MTP extension
    3ee2:	movs	r1, #6
    3ee4:	mov	r0, r4
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3ee6:	movs	r5, #0
    write32(6);    // MTP extension
    3ee8:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(100);  // MTP version
    3eec:	movs	r1, #100	; 0x64
    3eee:	mov	r0, r4
    3ef0:	bl	3e16 <MTPD::write16(unsigned short)>
    writestring("microsoft.com: 1.0;");
    3ef4:	ldr	r1, [pc, #220]	; (3fd4 <MTPD::WriteDescriptor()+0x100>)
    3ef6:	mov	r0, r4
    3ef8:	bl	3e2c <MTPD::writestring(char const*)>
    write16(0);    // functional mode
    3efc:	movs	r1, #0
    3efe:	mov	r0, r4
    3f00:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(supported_op_num);
    3f04:	movs	r1, #20
    3f06:	mov	r0, r4
    3f08:	bl	3ec0 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
    3f0c:	adds	r5, #1
    3f0e:	ldrh.w	r1, [r6], #2
    3f12:	mov	r0, r4
    3f14:	bl	3e16 <MTPD::write16(unsigned short)>
    3f18:	cmp	r5, #20
    3f1a:	bne.n	3f0c <MTPD::WriteDescriptor()+0x38>
    write32(supported_event_num);      
    3f1c:	movs	r1, #4
    3f1e:	mov	r0, r4
    3f20:	bl	3ec0 <MTPD::write32(unsigned long)>
    for(int ii=0; ii<supported_event_num;ii++) write16(supported_events[ii]);
    3f24:	movw	r1, #16388	; 0x4004
    3f28:	mov	r0, r4
    3f2a:	bl	3e16 <MTPD::write16(unsigned short)>
    3f2e:	movw	r1, #16389	; 0x4005
    3f32:	mov	r0, r4
    3f34:	bl	3e16 <MTPD::write16(unsigned short)>
    3f38:	movw	r1, #16395	; 0x400b
    3f3c:	mov	r0, r4
    3f3e:	bl	3e16 <MTPD::write16(unsigned short)>
    3f42:	movw	r1, #16396	; 0x400c
    3f46:	mov	r0, r4
    3f48:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(1);       // Device properties (array of uint16)
    3f4c:	movs	r1, #1
    3f4e:	mov	r0, r4
    3f50:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(0xd402);  // Device friendly name
    3f54:	movw	r1, #54274	; 0xd402
    3f58:	mov	r0, r4
    3f5a:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(0);       // Capture formats (array of uint16)
    3f5e:	movs	r1, #0
    3f60:	mov	r0, r4
    3f62:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(2);       // Playback formats (array of uint16)
    3f66:	movs	r1, #2
    3f68:	mov	r0, r4
    3f6a:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(0x3000);  // Undefined format
    3f6e:	mov.w	r1, #12288	; 0x3000
    3f72:	mov	r0, r4
    3f74:	bl	3e16 <MTPD::write16(unsigned short)>
    write16(0x3001);  // Folders (associations)
    3f78:	movw	r1, #12289	; 0x3001
    3f7c:	mov	r0, r4
    3f7e:	bl	3e16 <MTPD::write16(unsigned short)>
    writestring(MTP_MANUF);     // Manufacturer
    3f82:	ldr	r1, [pc, #84]	; (3fd8 <MTPD::WriteDescriptor()+0x104>)
    3f84:	mov	r0, r4
    3f86:	bl	3e2c <MTPD::writestring(char const*)>
    writestring(MTP_MODEL);     // Model
    3f8a:	ldr	r1, [pc, #80]	; (3fdc <MTPD::WriteDescriptor()+0x108>)
    3f8c:	mov	r0, r4
    3f8e:	bl	3e2c <MTPD::writestring(char const*)>
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    3f92:	vldr	s0, [pc, #76]	; 3fe0 <MTPD::WriteDescriptor()+0x10c>
    3f96:	add	r2, sp, #4
    3f98:	movs	r1, #2
    3f9a:	movs	r0, #3
    3f9c:	bl	b508 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    3fa0:	mov	r2, r5
    3fa2:	ldr	r1, [pc, #64]	; (3fe4 <MTPD::WriteDescriptor()+0x110>)
    3fa4:	add	r0, sp, #4
    3fa6:	bl	eb68 <strlcat>
    writestring( buf );    
    3faa:	add	r1, sp, #4
    3fac:	mov	r0, r4
    3fae:	bl	3e2c <MTPD::writestring(char const*)>
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3fb2:	ldr	r1, [pc, #52]	; (3fe8 <MTPD::WriteDescriptor()+0x114>)
    3fb4:	add	r2, sp, #4
    writestring( buf );    
    3fb6:	movs	r3, #10
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    3fb8:	ldrh.w	r0, [r1, #2]!
    3fbc:	subs	r3, #1
    3fbe:	strb.w	r0, [r2], #1
    3fc2:	bne.n	3fb8 <MTPD::WriteDescriptor()+0xe4>
    writestring(buf);    
    3fc4:	add	r1, sp, #4
    3fc6:	mov	r0, r4
    3fc8:	bl	3e2c <MTPD::writestring(char const*)>
  }
    3fcc:	add	sp, #24
    3fce:	pop	{r4, r5, r6, pc}
    3fd0:	.word	0x20000b70
    3fd4:	.word	0x20001165
    3fd8:	.word	0x20001179
    3fdc:	.word	0x20001189
    3fe0:	.word	0x3fcb851f
    3fe4:	.word	0x2000117e
    3fe8:	.word	0x200022f6

00003fec <MTPD::WriteStorageIDs()>:
  void MTPD::WriteStorageIDs() {
    3fec:	push	{r4, r5, r6, lr}
    3fee:	mov	r4, r0
    uint32_t num=storage_->get_FSCount();
    3ff0:	ldr	r0, [r0, #0]
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    3ff2:	movs	r6, #0
    uint32_t num=storage_->get_FSCount();
    3ff4:	ldr	r3, [r0, #0]
    3ff6:	ldr	r3, [r3, #4]
    3ff8:	blx	r3
    write32(num); // number of storages (disks)
    3ffa:	mov	r1, r0
    uint32_t num=storage_->get_FSCount();
    3ffc:	mov	r5, r0
    write32(num); // number of storages (disks)
    3ffe:	mov	r0, r4
    4000:	bl	3ec0 <MTPD::write32(unsigned long)>
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    4004:	cmp	r6, r5
    4006:	bne.n	400a <MTPD::WriteStorageIDs()+0x1e>
  }
    4008:	pop	{r4, r5, r6, pc}
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
    400a:	adds	r6, #1
    400c:	mov	r0, r4
    400e:	mov	r1, r6
    4010:	bl	3ec0 <MTPD::write32(unsigned long)>
    4014:	b.n	4004 <MTPD::WriteStorageIDs()+0x18>

00004016 <MTPD::GetObjectHandles(unsigned long, unsigned long)>:
  { uint32_t store = Storage2Store(storage);
    4016:	push	{r3, r4, r5, r6, r7, lr}
    if (write_get_length_) {
    4018:	add.w	r7, r0, #8192	; 0x2000
  { uint32_t store = Storage2Store(storage);
    401c:	mov	r4, r0
    401e:	mov	r6, r2
    if (write_get_length_) {
    4020:	ldrb.w	r3, [r7, #1060]	; 0x424
    4024:	cbz	r3, 4034 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1e>
      write_length_ = GetNumObjects(storage, parent);
    4026:	bl	3d60 <MTPD::GetNumObjects(unsigned long, unsigned long)>
      write_length_++;
    402a:	adds	r0, #1
      write_length_ *= 4;
    402c:	lsls	r0, r0, #2
    402e:	str.w	r0, [r7, #1064]	; 0x428
  }
    4032:	pop	{r3, r4, r5, r6, r7, pc}
  { uint32_t store = Storage2Store(storage);
    4034:	subs	r5, r1, #1
      write32(GetNumObjects(storage, parent));
    4036:	bl	3d60 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    403a:	mov	r1, r0
    403c:	mov	r0, r4
    403e:	bl	3ec0 <MTPD::write32(unsigned long)>
      storage_->StartGetObjectHandles(store, parent);
    4042:	ldr	r0, [r4, #0]
    4044:	mov	r2, r6
    4046:	mov	r1, r5
    4048:	ldr	r3, [r0, #0]
    404a:	ldr	r3, [r3, #28]
    404c:	blx	r3
      while ((handle = storage_->GetNextObjectHandle(store))) write32(handle);
    404e:	ldr	r0, [r4, #0]
    4050:	mov	r1, r5
    4052:	ldr	r3, [r0, #0]
    4054:	ldr	r3, [r3, #32]
    4056:	blx	r3
    4058:	mov	r1, r0
    405a:	cmp	r0, #0
    405c:	beq.n	4032 <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x1c>
    405e:	mov	r0, r4
    4060:	bl	3ec0 <MTPD::write32(unsigned long)>
    4064:	b.n	404e <MTPD::GetObjectHandles(unsigned long, unsigned long)+0x38>
	...

00004068 <MTPD::GetObjectInfo(unsigned long)>:
  {
    4068:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    406c:	mov	r4, r0
    406e:	sub	sp, #420	; 0x1a4
    storage_->GetObjectInfo(handle, filename, &size, &parent, &store, create, modify);
    4070:	ldr	r0, [r0, #0]
    4072:	add	r5, sp, #96	; 0x60
    4074:	add	r6, sp, #32
    4076:	ldr	r3, [r0, #0]
    4078:	add.w	r8, sp, #22
    407c:	add	r7, sp, #28
    407e:	add	r2, sp, #160	; 0xa0
    4080:	str	r5, [sp, #12]
    4082:	str	r6, [sp, #8]
    4084:	str.w	r8, [sp, #4]
    4088:	str	r7, [sp, #0]
    408a:	ldr.w	r9, [r3, #36]	; 0x24
    408e:	add	r3, sp, #24
    4090:	blx	r9
    uint32_t storage = Store2Storage(store);
    4092:	ldrh.w	r1, [sp, #22]
    write32(storage); // storage
    4096:	mov	r0, r4
    4098:	adds	r1, #1
    409a:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    409e:	ldr	r3, [sp, #24]
    40a0:	movw	r1, #12289	; 0x3001
    40a4:	mov	r0, r4
    40a6:	adds	r3, #1
    40a8:	it	ne
    40aa:	movne	r1, #0
    40ac:	bl	3e16 <MTPD::write16(unsigned short)>
    write16(0);  // protection
    40b0:	mov	r0, r4
    40b2:	movs	r1, #0
    40b4:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(size); // size
    40b8:	ldr	r1, [sp, #24]
    40ba:	mov	r0, r4
    40bc:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(0); // thumb format
    40c0:	mov	r0, r4
    40c2:	movs	r1, #0
    40c4:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(0); // thumb size
    40c8:	mov	r0, r4
    40ca:	movs	r1, #0
    40cc:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0); // thumb width
    40d0:	mov	r0, r4
    40d2:	movs	r1, #0
    40d4:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0); // thumb height
    40d8:	mov	r0, r4
    40da:	movs	r1, #0
    40dc:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0); // pix width
    40e0:	mov	r0, r4
    40e2:	movs	r1, #0
    40e4:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0); // pix height
    40e8:	mov	r0, r4
    40ea:	movs	r1, #0
    40ec:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0); // bit depth
    40f0:	mov	r0, r4
    40f2:	movs	r1, #0
    40f4:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(parent); // parent
    40f8:	ldr	r1, [sp, #28]
    40fa:	mov	r0, r4
    40fc:	bl	3ec0 <MTPD::write32(unsigned long)>
    write16(size == 0xFFFFFFFFUL ? 1 : 0); // association type
    4100:	ldr	r1, [sp, #24]
    4102:	mov	r0, r4
    4104:	adds	r3, r1, #1
    4106:	negs	r1, r3
    4108:	adcs	r1, r3
    410a:	bl	3e16 <MTPD::write16(unsigned short)>
    write32(0); // association description
    410e:	mov	r0, r4
    4110:	movs	r1, #0
    4112:	bl	3ec0 <MTPD::write32(unsigned long)>
    write32(0);  // sequence number
    4116:	mov	r0, r4
    4118:	movs	r1, #0
    411a:	bl	3ec0 <MTPD::write32(unsigned long)>
    writestring(filename);
    411e:	add	r1, sp, #160	; 0xa0
    4120:	mov	r0, r4
    4122:	bl	3e2c <MTPD::writestring(char const*)>
    writestring(create);  // date created
    4126:	mov	r1, r6
    4128:	mov	r0, r4
    412a:	bl	3e2c <MTPD::writestring(char const*)>
    writestring(modify);  // date modified
    412e:	mov	r1, r5
    4130:	mov	r0, r4
    4132:	bl	3e2c <MTPD::writestring(char const*)>
    writestring("");  // keywords
    4136:	ldr	r1, [pc, #12]	; (4144 <MTPD::GetObjectInfo(unsigned long)+0xdc>)
    4138:	mov	r0, r4
    413a:	bl	3e2c <MTPD::writestring(char const*)>
  }
    413e:	add	sp, #420	; 0x1a4
    4140:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4144:	.word	0x20000dbc

00004148 <MTPD::getObjectPropsSupported(unsigned long)>:
    {
    4148:	push	{r3, r4, r5, r6, r7, lr}
      write32(propertyListNum);
    414a:	ldr	r6, [pc, #36]	; (4170 <MTPD::getObjectPropsSupported(unsigned long)+0x28>)
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    414c:	movs	r4, #0
    414e:	ldr	r7, [pc, #36]	; (4174 <MTPD::getObjectPropsSupported(unsigned long)+0x2c>)
    {
    4150:	mov	r5, r0
      write32(propertyListNum);
    4152:	ldr	r1, [r6, #0]
    4154:	bl	3ec0 <MTPD::write32(unsigned long)>
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4158:	ldr	r3, [r6, #0]
    415a:	cmp	r3, r4
    415c:	bhi.n	4160 <MTPD::getObjectPropsSupported(unsigned long)+0x18>
    }
    415e:	pop	{r3, r4, r5, r6, r7, pc}
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    4160:	ldrh.w	r1, [r7], #2
    4164:	mov	r0, r5
    4166:	adds	r4, #1
    4168:	bl	3e16 <MTPD::write16(unsigned short)>
    416c:	b.n	4158 <MTPD::getObjectPropsSupported(unsigned long)+0x10>
    416e:	nop
    4170:	.word	0x200022d8
    4174:	.word	0x20000b5c

00004178 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
    { char name[MAX_FILENAME_LEN];
    4178:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    417c:	mov	r4, r0
    417e:	sub	sp, #420	; 0x1a4
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4180:	ldr	r0, [r0, #0]
    { char name[MAX_FILENAME_LEN];
    4182:	mov	r5, r2
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    4184:	add.w	r8, sp, #22
    4188:	add.w	r9, sp, #96	; 0x60
    418c:	ldr	r3, [r0, #0]
    418e:	add.w	sl, sp, #32
    4192:	add	r6, sp, #28
    4194:	str.w	r8, [sp, #4]
    4198:	add	r2, sp, #160	; 0xa0
    419a:	str.w	r9, [sp, #12]
    419e:	str.w	sl, [sp, #8]
    { char name[MAX_FILENAME_LEN];
    41a2:	mov	r7, r1
      storage_->GetObjectInfo(p1,name,&size,&parent, &store, create, modify);
    41a4:	str	r6, [sp, #0]
    41a6:	ldr.w	fp, [r3, #36]	; 0x24
    41aa:	add	r3, sp, #24
    41ac:	blx	fp
      switch(p2)
    41ae:	movw	r2, #56331	; 0xdc0b
      uint32_t storage = Store2Storage(store);
    41b2:	ldrh.w	r3, [sp, #22]
      switch(p2)
    41b6:	cmp	r5, r2
      dir = size == 0xFFFFFFFFUL;
    41b8:	ldr	r1, [sp, #24]
      uint32_t storage = Store2Storage(store);
    41ba:	add.w	r8, r3, #1
      switch(p2)
    41be:	bhi.n	41e0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x68>
    41c0:	cmp.w	r5, #56320	; 0xdc00
    41c4:	bls.n	41f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    41c6:	sub.w	r5, r5, #56320	; 0xdc00
    41ca:	subs	r5, #1
    41cc:	cmp	r5, #10
    41ce:	bhi.n	41f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
    41d0:	tbb	[pc, r5]
    41d4:	.word	0x39201611
    41d8:	.word	0x27220e0e
    41dc:	.short	0x0e29
    41de:	.byte	0x2b
    41df:	.byte	0x00
    41e0:	movw	r3, #56385	; 0xdc41
    41e4:	cmp	r5, r3
    41e6:	beq.n	4234 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xbc>
    41e8:	movw	r3, #56388	; 0xdc44
    41ec:	cmp	r5, r3
    41ee:	beq.n	4218 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa0>
    }
    41f0:	add	sp, #420	; 0x1a4
    41f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          write32(storage);
    41f6:	mov	r1, r8
          write32(0);
    41f8:	mov	r0, r4
    41fa:	bl	3ec0 <MTPD::write32(unsigned long)>
    }
    41fe:	b.n	41f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(dir?0x3001:0x3000);
    4200:	adds	r1, #1
    4202:	movw	r1, #12289	; 0x3001
    4206:	it	ne
    4208:	movne.w	r1, #12288	; 0x3000
          write16(0);
    420c:	mov	r0, r4
    420e:	bl	3e16 <MTPD::write16(unsigned short)>
          break;
    4212:	b.n	41f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          write16(0);
    4214:	movs	r1, #0
    4216:	b.n	420c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94>
          writestring(name);
    4218:	add	r1, sp, #160	; 0xa0
          writestring(modify);
    421a:	mov	r0, r4
    421c:	bl	3e2c <MTPD::writestring(char const*)>
          break;
    4220:	b.n	41f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x78>
          writestring(create);
    4222:	mov	r1, sl
    4224:	b.n	421a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          writestring(modify);
    4226:	mov	r1, r9
    4228:	b.n	421a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2>
          write32((store==parent)? 0: parent);
    422a:	ldr	r1, [r6, #0]
    422c:	cmp	r3, r1
    422e:	it	eq
    4230:	moveq	r1, #0
    4232:	b.n	41f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>
          write32(p1);
    4234:	mov	r1, r7
    4236:	mov	r0, r4
    4238:	bl	3ec0 <MTPD::write32(unsigned long)>
          write32(parent);
    423c:	ldr	r1, [r6, #0]
    423e:	mov	r0, r4
    4240:	bl	3ec0 <MTPD::write32(unsigned long)>
          write32(storage);
    4244:	mov	r1, r8
    4246:	mov	r0, r4
    4248:	bl	3ec0 <MTPD::write32(unsigned long)>
          write32(0);
    424c:	movs	r1, #0
    424e:	b.n	41f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x80>

00004250 <MTPD::GetStorageInfo(unsigned long)>:
  void MTPD::GetStorageInfo(uint32_t storage) {
    4250:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4254:	mov	r4, r0
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    4256:	ldr	r0, [r0, #0]
    uint32_t store = Storage2Store(storage);
    4258:	subs	r7, r1, #1
  void MTPD::GetStorageInfo(uint32_t storage) {
    425a:	sub	sp, #20
    write16(storage_->readonly(store) ? 0x0001 : 0x0004);   // storage type (removable RAM)
    425c:	ldr	r3, [r0, #0]
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    425e:	mov.w	fp, #0
    4262:	mov	r1, r7
							  return write((const uint8_t *)str, strlen(str)); }
    4264:	ldr	r6, [pc, #228]	; (434c <MTPD::GetStorageInfo(unsigned long)+0xfc>)
    4266:	ldr	r3, [r3, #20]
    4268:	blx	r3
    426a:	cmp	r0, #0
    426c:	mov	r0, r4
    426e:	ite	ne
    4270:	movne	r1, #1
    4272:	moveq	r1, #4
    4274:	bl	3e16 <MTPD::write16(unsigned short)>
    write16(storage_->has_directories(store) ? 0x0002: 0x0001);   // filesystem type (generic hierarchical)
    4278:	ldr	r0, [r4, #0]
    427a:	mov	r1, r7
    427c:	ldr	r3, [r0, #0]
    427e:	ldr	r3, [r3, #24]
    4280:	blx	r3
    4282:	adds	r0, #1
    4284:	uxth	r1, r0
    4286:	mov	r0, r4
    4288:	bl	3e16 <MTPD::write16(unsigned short)>
    write16(0x0000);   // access capability (read-write)
    428c:	mov	r0, r4
    428e:	movs	r1, #0
    4290:	bl	3e16 <MTPD::write16(unsigned short)>
    uint64_t ntotal = storage_->totalSize(store) ; 
    4294:	ldr	r0, [r4, #0]
    4296:	mov	r1, r7
    4298:	ldr	r3, [r0, #0]
    429a:	ldr	r3, [r3, #12]
    429c:	blx	r3
    429e:	mov	r5, r0
    uint64_t nused = storage_->usedSize(store) ; 
    42a0:	ldr	r0, [r4, #0]
    uint64_t ntotal = storage_->totalSize(store) ; 
    42a2:	mov	r8, r1
    uint64_t nused = storage_->usedSize(store) ; 
    42a4:	mov	r1, r7
    42a6:	ldr	r3, [r0, #0]
    42a8:	ldr	r3, [r3, #16]
    42aa:	blx	r3
    42ac:	ldr	r3, [r6, #0]
    42ae:	mov	r9, r0
    42b0:	mov	sl, r1
    42b2:	ldr	r3, [r3, #4]
    42b4:	movs	r2, #5
    42b6:	ldr	r1, [pc, #152]	; (4350 <MTPD::GetStorageInfo(unsigned long)+0x100>)
    42b8:	mov	r0, r6
    42ba:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    42bc:	movs	r3, #10
    42be:	mov	r2, r5
    42c0:	mov	r0, r6
    42c2:	strd	r3, fp, [sp]
    42c6:	mov	r3, r8
    42c8:	bl	c786 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    42cc:	mov	r0, r6
    42ce:	bl	c720 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    42d2:	ldr	r3, [r6, #0]
    42d4:	ldr	r1, [pc, #124]	; (4354 <MTPD::GetStorageInfo(unsigned long)+0x104>)
    42d6:	movs	r2, #5
    42d8:	ldr	r3, [r3, #4]
    42da:	mov	r0, r6
    42dc:	blx	r3
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    42de:	movs	r3, #10
    42e0:	mov	r2, r9
    42e2:	mov	r0, r6
    42e4:	str	r3, [sp, #0]
    42e6:	mov	r3, sl
    42e8:	str.w	fp, [sp, #4]
    42ec:	bl	c786 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    42f0:	mov	r0, r6
    42f2:	bl	c720 <Print::println()>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    42f6:	movs	r2, #8
    42f8:	mov	r0, r4
    42fa:	add.w	r1, sp, r2
    42fe:	strd	r5, r8, [sp, #8]
    4302:	bl	3de0 <MTPD::write(char const*, int)>
    write64((ntotal-nused));  // free space (100M)
    4306:	subs.w	r5, r5, r9
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    430a:	mov.w	r2, #8
    430e:	mov	r0, r4
    write64((ntotal-nused));  // free space (100M)
    4310:	sbc.w	r3, r8, sl
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    4314:	add.w	r1, sp, r2
    4318:	strd	r5, r3, [sp, #8]
    431c:	bl	3de0 <MTPD::write(char const*, int)>
    write32(0xFFFFFFFFUL);  // free space (objects)
    4320:	mov	r0, r4
    4322:	mov.w	r1, #4294967295
    4326:	bl	3ec0 <MTPD::write32(unsigned long)>
    const char *name = storage_->get_FSName(store);
    432a:	ldr	r0, [r4, #0]
    432c:	mov	r1, r7
    432e:	ldr	r3, [r0, #0]
    4330:	ldr	r3, [r3, #8]
    4332:	blx	r3
    4334:	mov	r1, r0
    writestring(name);  // storage descriptor
    4336:	mov	r0, r4
    4338:	bl	3e2c <MTPD::writestring(char const*)>
    writestring("");  // volume identifier
    433c:	ldr	r1, [pc, #24]	; (4358 <MTPD::GetStorageInfo(unsigned long)+0x108>)
    433e:	mov	r0, r4
  }
    4340:	add	sp, #20
    4342:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    writestring("");  // volume identifier
    4346:	b.w	3e2c <MTPD::writestring(char const*)>
    434a:	nop
    434c:	.word	0x20001d30
    4350:	.word	0x20001159
    4354:	.word	0x2000115f
    4358:	.word	0x20000dbc

0000435c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      switch(p1)
    435c:	movw	r2, #56331	; 0xdc0b
    4360:	cmp	r1, r2
    {
    4362:	push	{r0, r1, r4, r6, r7, lr}
    4364:	mov	r4, r0
      switch(p1)
    4366:	bhi.n	4388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2c>
    4368:	cmp.w	r1, #56320	; 0xdc00
    436c:	bls.n	4398 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    436e:	sub.w	r3, r1, #56320	; 0xdc00
    4372:	subs	r3, #1
    4374:	cmp	r3, #10
    4376:	bhi.n	4398 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3c>
    4378:	tbb	[pc, r3]
    437c:	.word	0x413e2210
    4380:	.word	0x69570e0e
    4384:	.short	0x0e75
    4386:	.byte	0x78
    4387:	.byte	0x00
    4388:	movw	r2, #56385	; 0xdc41
    438c:	cmp	r1, r2
    438e:	beq.n	4472 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    4390:	movw	r2, #56388	; 0xdc44
    4394:	cmp	r1, r2
    4396:	beq.n	4454 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
    }
    4398:	add	sp, #8
    439a:	pop	{r4, r6, r7, pc}
          write16(0xDC01);
    439c:	movw	r1, #56321	; 0xdc01
          write16(0xDC0B);
    43a0:	mov	r0, r4
    43a2:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(6);
    43a6:	mov	r0, r4
    43a8:	movs	r1, #6
    43aa:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(0); //get
    43ae:	mov	r0, r4
    43b0:	movs	r1, #0
    43b2:	bl	3e00 <MTPD::write8(unsigned char)>
          write32(0);
    43b6:	movs	r1, #0
    43b8:	mov	r0, r4
    43ba:	bl	3ec0 <MTPD::write32(unsigned long)>
          write32(0);
    43be:	b.n	43e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC02);
    43c0:	movw	r1, #56322	; 0xdc02
          write16(0xDC03);
    43c4:	mov	r0, r4
    43c6:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(0x004);
    43ca:	movs	r1, #4
    43cc:	mov	r0, r4
    43ce:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(0); //get
    43d2:	movs	r1, #0
    43d4:	mov	r0, r4
    43d6:	bl	3e00 <MTPD::write8(unsigned char)>
          write16(0);
    43da:	movs	r1, #0
    43dc:	mov	r0, r4
    43de:	bl	3e16 <MTPD::write16(unsigned short)>
          write32(0);
    43e2:	mov	r0, r4
    43e4:	movs	r1, #0
    43e6:	bl	3ec0 <MTPD::write32(unsigned long)>
          write8(0);
    43ea:	movs	r1, #0
    43ec:	mov	r0, r4
    }
    43ee:	add	sp, #8
    43f0:	ldmia.w	sp!, {r4, r6, r7, lr}
          write8(0);
    43f4:	b.w	3e00 <MTPD::write8(unsigned char)>
          write16(0xDC03);
    43f8:	movw	r1, #56323	; 0xdc03
    43fc:	b.n	43c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68>
          write16(0xDC04);
    43fe:	movw	r1, #56324	; 0xdc04
    4402:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(0x008);
    4406:	movs	r1, #8
    4408:	mov	r0, r4
    440a:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(0); //get
    440e:	movs	r1, #0
    4410:	mov	r0, r4
    4412:	bl	3e00 <MTPD::write8(unsigned char)>
          write64(0);
    4416:	movs	r2, #0
    4418:	movs	r3, #0
    441a:	strd	r2, r3, [sp]
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    441e:	movs	r2, #8
    4420:	mov	r1, sp
    4422:	mov	r0, r4
    4424:	bl	3de0 <MTPD::write(char const*, int)>
          write32(0);
    4428:	b.n	43e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC07);
    442a:	movw	r1, #56327	; 0xdc07
    442e:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4432:	movw	r1, #65535	; 0xffff
    4436:	mov	r0, r4
    4438:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(1); //get/set
    443c:	movs	r1, #1
          write8(0); //get
    443e:	mov	r0, r4
    4440:	bl	3e00 <MTPD::write8(unsigned char)>
          write8(0);
    4444:	movs	r1, #0
    4446:	mov	r0, r4
    4448:	bl	3e00 <MTPD::write8(unsigned char)>
    444c:	b.n	43e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86>
          write16(0xDC08);
    444e:	movw	r1, #56328	; 0xdc08
          write16(0xDC09);
    4452:	mov	r0, r4
          write16(0xDC44);
    4454:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(0xFFFF);
    4458:	movw	r1, #65535	; 0xffff
    445c:	mov	r0, r4
    445e:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(0); //get
    4462:	movs	r1, #0
    4464:	b.n	443e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe2>
          write16(0xDC09);
    4466:	movw	r1, #56329	; 0xdc09
    446a:	b.n	4452 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
          write16(0xDC0B);
    446c:	movw	r1, #56331	; 0xdc0b
    4470:	b.n	43a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x44>
          write16(0xDC41);
    4472:	bl	3e16 <MTPD::write16(unsigned short)>
          write16(0x0A);
    4476:	movs	r1, #10
    4478:	mov	r0, r4
    447a:	movs	r6, #0
    447c:	bl	3e16 <MTPD::write16(unsigned short)>
          write8(0); //get
    4480:	movs	r7, #0
    4482:	movs	r1, #0
    4484:	mov	r0, r4
    4486:	bl	3e00 <MTPD::write8(unsigned char)>
  void MTPD::write64(uint64_t x) { write((char*)&x, sizeof(x)); }
    448a:	movs	r2, #8
    448c:	mov	r1, sp
    448e:	mov	r0, r4
    4490:	strd	r6, r7, [sp]
    4494:	bl	3de0 <MTPD::write(char const*, int)>
          write64(0);
    4498:	strd	r6, r7, [sp]
    449c:	b.n	441e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc2>

0000449e <MTPD::GetObject(unsigned long)>:

    void MTPD::GetObject(uint32_t object_id) 
    {
    449e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44a2:	mov	r6, r0
      uint32_t size = storage_->GetSize(object_id);
    44a4:	ldr	r0, [r0, #0]
    44a6:	ldr	r3, [r0, #0]

      if (write_get_length_) {
    44a8:	add.w	r5, r6, #8192	; 0x2000
    {
    44ac:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    44b0:	ldr	r3, [r3, #40]	; 0x28
    {
    44b2:	sub	sp, #20
    44b4:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    44b8:	blx	r3
      if (write_get_length_) {
    44ba:	ldrb.w	r4, [r5, #1060]	; 0x424
      uint32_t size = storage_->GetSize(object_id);
    44be:	mov	r8, r0
      if (write_get_length_) {
    44c0:	cbz	r4, 44d6 <MTPD::GetObject(unsigned long)+0x38>
        write_length_ += size;
    44c2:	ldr.w	r3, [r5, #1064]	; 0x428
    44c6:	add	r3, r0
    44c8:	str.w	r3, [r5, #1064]	; 0x428
        if(len>0)
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
          len=0;
        }
      }
    }
    44cc:	add	sp, #20
    44ce:	vpop	{d8}
    44d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    44d6:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    44da:	movs	r7, #12
    44dc:	add.w	fp, r6, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    44e0:	add.w	sl, r6, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    44e4:	str.w	r3, [r5, #1056]	; 0x420
        uint32_t pos = 0; // into data
    44e8:	str	r4, [sp, #12]
        while(pos<size)
    44ea:	ldr	r3, [sp, #12]
    44ec:	cmp	r3, r8
    44ee:	bcc.n	450a <MTPD::GetObject(unsigned long)+0x6c>
        if(len>0)
    44f0:	cmp	r7, #0
    44f2:	beq.n	44cc <MTPD::GetObject(unsigned long)+0x2e>
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    44f4:	mov.w	r1, #512	; 0x200
    44f8:	add.w	r0, r6, #544	; 0x220
    }
    44fc:	add	sp, #20
    44fe:	vpop	{d8}
    4502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4506:	b.w	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
          if(disk_pos==DISK_BUFFER_SIZE)
    450a:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    450e:	ldr	r2, [sp, #12]
          if(disk_pos==DISK_BUFFER_SIZE)
    4510:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    4514:	sub.w	r9, r8, r2
          if(disk_pos==DISK_BUFFER_SIZE)
    4518:	bne.n	453c <MTPD::GetObject(unsigned long)+0x9e>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    451a:	ldr	r0, [r6, #0]
// https://forum.pjrc.com/threads/44596-Teensyduino-1-37-Beta-2-(Arduino-1-8-3-support)?p=145150&viewfull=1#post145150

// Returns the minimum of 2 input numbers.
template<class A, class B>
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
    451c:	cmp.w	r9, #8192	; 0x2000
    4520:	it	cc
    4522:	movcc	r3, r9
    4524:	vmov	r1, s16
    4528:	ldr	r2, [r0, #0]
    452a:	str	r3, [sp, #0]
    452c:	ldr	r3, [r2, #48]	; 0x30
    452e:	ldr	r2, [sp, #12]
    4530:	mov	r4, r3
    4532:	mov	r3, fp
    4534:	blx	r4
            disk_pos=0;
    4536:	movs	r3, #0
    4538:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    453c:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4540:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4544:	add.w	r0, sl, r7
    4548:	cmp	r9, r3
    454a:	it	cs
    454c:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    454e:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4552:	add	r1, fp
    4554:	cmp	r9, r3
    4556:	it	cs
    4558:	movcs	r9, r3
    455a:	mov	r2, r9
          len += to_copy;
    455c:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    455e:	bl	a254 <memcpy>
          disk_pos += to_copy;
    4562:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    4566:	cmp.w	r7, #512	; 0x200
          disk_pos += to_copy;
    456a:	add	r3, r9
    456c:	str.w	r3, [r5, #1056]	; 0x420
          pos += to_copy;
    4570:	ldr	r3, [sp, #12]
    4572:	add	r3, r9
    4574:	str	r3, [sp, #12]
          if(len==MTP_TX_SIZE)
    4576:	bne.n	44ea <MTPD::GetObject(unsigned long)+0x4c>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4578:	mov	r1, r7
    457a:	mov	r0, sl
            len=0;
    457c:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    457e:	bl	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4582:	b.n	44ea <MTPD::GetObject(unsigned long)+0x4c>

00004584 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>:
    uint32_t MTPD::GetPartialObject(uint32_t object_id, uint32_t offset, uint32_t NumBytes) 
    {
    4584:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4588:	mov	r8, r0
      uint32_t size = storage_->GetSize(object_id);
    458a:	ldr	r0, [r0, #0]
    {
    458c:	mov	r4, r3
    458e:	mov	r6, r2
      uint32_t size = storage_->GetSize(object_id);
    4590:	ldr	r3, [r0, #0]

      size -= offset;
      if(NumBytes == 0xffffffff) NumBytes=size;
      if (NumBytes<size) size=NumBytes;

      if (write_get_length_) {
    4592:	add.w	r5, r8, #8192	; 0x2000
    {
    4596:	vpush	{d8}
      uint32_t size = storage_->GetSize(object_id);
    459a:	ldr	r3, [r3, #40]	; 0x28
    {
    459c:	sub	sp, #20
    459e:	vmov	s16, r1
      uint32_t size = storage_->GetSize(object_id);
    45a2:	blx	r3
      size -= offset;
    45a4:	subs	r0, r0, r6
      if(NumBytes == 0xffffffff) NumBytes=size;
    45a6:	cmp.w	r4, #4294967295
    45aa:	it	eq
    45ac:	moveq	r4, r0
      if (NumBytes<size) size=NumBytes;
    45ae:	cmp	r4, r0
    45b0:	mov	r3, r4
    45b2:	it	cs
    45b4:	movcs	r3, r0
    45b6:	str	r3, [sp, #8]
      if (write_get_length_) {
    45b8:	ldrb.w	r3, [r5, #1060]	; 0x424
    45bc:	str	r3, [sp, #12]
    45be:	cbz	r3, 45d8 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x54>
        write_length_ += size;
    45c0:	ldr.w	r3, [r5, #1064]	; 0x428
    45c4:	ldr	r2, [sp, #8]
    45c6:	add	r3, r2
    45c8:	str.w	r3, [r5, #1064]	; 0x428
            len=0;
          }
        }
      }
      return size;
    }
    45cc:	ldr	r0, [sp, #8]
    45ce:	add	sp, #20
    45d0:	vpop	{d8}
    45d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disk_pos=DISK_BUFFER_SIZE;
    45d8:	mov.w	r3, #8192	; 0x2000
        uint32_t len = sizeof(MTPHeader);
    45dc:	movs	r7, #12
    45de:	add.w	fp, r8, #1056	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    45e2:	add.w	sl, r8, #544	; 0x220
        disk_pos=DISK_BUFFER_SIZE;
    45e6:	str.w	r3, [r5, #1056]	; 0x420
        while(pos<size)
    45ea:	ldr	r3, [sp, #8]
    45ec:	cmp	r3, r6
    45ee:	bls.n	45cc <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x48>
          if(disk_pos==DISK_BUFFER_SIZE)
    45f0:	ldr.w	r3, [r5, #1056]	; 0x420
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    45f4:	ldr	r2, [sp, #8]
          if(disk_pos==DISK_BUFFER_SIZE)
    45f6:	cmp.w	r3, #8192	; 0x2000
            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
    45fa:	sub.w	r9, r2, r6
          if(disk_pos==DISK_BUFFER_SIZE)
    45fe:	bne.n	4624 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0xa0>
            storage_->read(object_id,pos,(char *)disk_buffer,nread);
    4600:	ldr.w	r0, [r8]
    4604:	cmp.w	r9, #8192	; 0x2000
    4608:	it	cc
    460a:	movcc	r3, r9
    460c:	vmov	r1, s16
    4610:	ldr	r2, [r0, #0]
    4612:	str	r3, [sp, #0]
    4614:	ldr	r3, [r2, #48]	; 0x30
    4616:	mov	r2, r6
    4618:	mov	r4, r3
    461a:	mov	r3, fp
    461c:	blx	r4
            disk_pos=0;
    461e:	ldr	r3, [sp, #12]
    4620:	str.w	r3, [r5, #1056]	; 0x420
          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    4624:	rsb	r3, r7, #512	; 0x200
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4628:	ldr.w	r1, [r5, #1056]	; 0x420
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    462c:	add.w	r0, sl, r7
    4630:	cmp	r9, r3
    4632:	it	cs
    4634:	movcs	r9, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    4636:	rsb	r3, r1, #8192	; 0x2000
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    463a:	add	r1, fp
    463c:	cmp	r9, r3
    463e:	it	cs
    4640:	movcs	r9, r3
    4642:	mov	r2, r9
          len += to_copy;
    4644:	add	r7, r9
          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    4646:	bl	a254 <memcpy>
          disk_pos += to_copy;
    464a:	ldr.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    464e:	cmp.w	r7, #512	; 0x200
          pos += to_copy;
    4652:	add	r6, r9
          disk_pos += to_copy;
    4654:	add	r3, r9
    4656:	str.w	r3, [r5, #1056]	; 0x420
          if(len==MTP_TX_SIZE)
    465a:	bne.n	45ea <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    465c:	mov	r1, r7
    465e:	mov	r0, sl
            len=0;
    4660:	movs	r7, #0
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4662:	bl	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
            len=0;
    4666:	b.n	45ea <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)+0x66>

00004668 <MTPD::read(char*, unsigned long)>:
      printf("\r\n"); \
    }


    void MTPD::read(char* data, uint32_t size) 
    {
    4668:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    466c:	mov	r8, r0
    466e:	mov	r5, r1
      static int index=0;
      if(!size) 
    4670:	mov	r4, r2
    4672:	ldr.w	fp, [pc, #84]	; 46c8 <MTPD::read(char*, unsigned long)+0x60>
    4676:	cbz	r2, 46be <MTPD::read(char*, unsigned long)+0x56>

      while (size) {
        uint32_t to_copy = MTP_RX_SIZE - index;
        to_copy = min(to_copy, size);
        if (data) {
          memcpy(data, rx_data_buffer + index, to_copy);
    4678:	add.w	r9, r0, #32
        }
        size -= to_copy;
        index += to_copy;
        if (index == MTP_RX_SIZE) {
          pull_packet(rx_data_buffer);
          index=0;
    467c:	mov.w	sl, #0
        uint32_t to_copy = MTP_RX_SIZE - index;
    4680:	ldr.w	r6, [fp]
    4684:	rsb	r7, r6, #512	; 0x200
    4688:	cmp	r7, r4
    468a:	it	cs
    468c:	movcs	r7, r4
        if (data) {
    468e:	cbz	r5, 469e <MTPD::read(char*, unsigned long)+0x36>
          memcpy(data, rx_data_buffer + index, to_copy);
    4690:	mov	r0, r5
          data += to_copy;
    4692:	add	r5, r7
          memcpy(data, rx_data_buffer + index, to_copy);
    4694:	mov	r2, r7
    4696:	add.w	r1, r9, r6
    469a:	bl	a254 <memcpy>
        index += to_copy;
    469e:	add	r6, r7
        size -= to_copy;
    46a0:	subs	r4, r4, r7
        if (index == MTP_RX_SIZE) {
    46a2:	cmp.w	r6, #512	; 0x200
        index += to_copy;
    46a6:	str.w	r6, [fp]
        if (index == MTP_RX_SIZE) {
    46aa:	bne.n	46b8 <MTPD::read(char*, unsigned long)+0x50>
          pull_packet(rx_data_buffer);
    46ac:	mov	r1, r9
    46ae:	mov	r0, r8
    46b0:	bl	3dc8 <MTPD::pull_packet(unsigned char*)>
          index=0;
    46b4:	str.w	sl, [fp]
      while (size) {
    46b8:	cmp	r4, #0
    46ba:	bne.n	4680 <MTPD::read(char*, unsigned long)+0x18>
    46bc:	b.n	46c2 <MTPD::read(char*, unsigned long)+0x5a>
        index=0;
    46be:	str.w	r2, [fp]
        }
      }
    }
    46c2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46c6:	nop
    46c8:	.word	0x2001484c

000046cc <MTPD::ReadMTPHeader()>:
  {
    46cc:	push	{r0, r1, r2, r3, r4, lr}
    read((char *)&header, sizeof(MTPHeader));
    46ce:	movs	r2, #12
    46d0:	add	r1, sp, #4
    46d2:	bl	4668 <MTPD::read(char*, unsigned long)>
    if(header.type==2)
    46d6:	ldrh.w	r3, [sp, #8]
    46da:	cmp	r3, #2
      return header.len - 12;
    46dc:	itet	eq
    46de:	ldreq	r0, [sp, #4]
      return 0;
    46e0:	movne	r0, #0
      return header.len - 12;
    46e2:	subeq	r0, #12
  }
    46e4:	add	sp, #20
    46e6:	ldr.w	pc, [sp], #4

000046ea <MTPD::read8()>:
  uint8_t MTPD::read8() { uint8_t ret; read((char*)&ret, sizeof(ret));  return ret;  }
    46ea:	push	{r0, r1, r2, lr}
    46ec:	movs	r2, #1
    46ee:	add.w	r1, sp, #7
    46f2:	bl	4668 <MTPD::read(char*, unsigned long)>
    46f6:	ldrb.w	r0, [sp, #7]
    46fa:	add	sp, #12
    46fc:	ldr.w	pc, [sp], #4

00004700 <MTPD::read16()>:
  uint16_t MTPD::read16() { uint16_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4700:	push	{r0, r1, r2, lr}
    4702:	movs	r2, #2
    4704:	add.w	r1, sp, #6
    4708:	bl	4668 <MTPD::read(char*, unsigned long)>
    470c:	ldrh.w	r0, [sp, #6]
    4710:	add	sp, #12
    4712:	ldr.w	pc, [sp], #4

00004716 <MTPD::read32()>:
  uint32_t MTPD::read32() { uint32_t ret; read((char*)&ret, sizeof(ret)); return ret; }
    4716:	push	{r0, r1, r2, lr}
    4718:	movs	r2, #4
    471a:	add.w	r1, sp, r2
    471e:	bl	4668 <MTPD::read(char*, unsigned long)>
    4722:	ldr	r0, [sp, #4]
    4724:	add	sp, #12
    4726:	ldr.w	pc, [sp], #4

0000472a <MTPD::readstring(char*)>:
  void MTPD::readstring(char* buffer) {
    472a:	push	{r4, r5, r6, lr}
    472c:	mov	r5, r1
    472e:	mov	r6, r0
    int len = read8();
    4730:	bl	46ea <MTPD::read8()>
    if (!buffer) {
    4734:	cbz	r5, 473e <MTPD::readstring(char*)+0x14>
    4736:	adds	r4, r5, r0
      for (int i = 0; i < len; i++) {
    4738:	cmp	r5, r4
    473a:	bne.n	474e <MTPD::readstring(char*)+0x24>
  }
    473c:	pop	{r4, r5, r6, pc}
      read(NULL, len * 2);
    473e:	sxth	r2, r0
    4740:	mov	r1, r5
    4742:	mov	r0, r6
    4744:	lsls	r2, r2, #1
  }
    4746:	ldmia.w	sp!, {r4, r5, r6, lr}
      read(NULL, len * 2);
    474a:	b.w	4668 <MTPD::read(char*, unsigned long)>
        *(buffer++) = c2 = read16();
    474e:	mov	r0, r6
    4750:	bl	4700 <MTPD::read16()>
    4754:	strb.w	r0, [r5], #1
      for (int i = 0; i < len; i++) {
    4758:	b.n	4738 <MTPD::readstring(char*)+0xe>

0000475a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>:
      }
      storage_->close();
      return true;
    }

    uint32_t MTPD::setObjectPropValue(uint32_t handle, uint32_t p2)
    475a:	push	{r4, r5, lr}
    475c:	mov	r4, r0
    475e:	sub	sp, #260	; 0x104
    4760:	mov	r5, r1
      //printContainer(); 
         
      if(p2==0xDC07)
      { 
        char filename[MAX_FILENAME_LEN]; 
        ReadMTPHeader();
    4762:	bl	46cc <MTPD::ReadMTPHeader()>
        readstring(filename);
    4766:	mov	r1, sp
    4768:	mov	r0, r4
    476a:	bl	472a <MTPD::readstring(char*)>
        if(storage_->rename(handle,filename)) return 0x2001; else return 0x2005;
    476e:	ldr	r0, [r4, #0]
    4770:	mov	r2, sp
    4772:	mov	r1, r5
    4774:	ldr	r3, [r0, #0]
    4776:	ldr	r3, [r3, #72]	; 0x48
    4778:	blx	r3
      }
      else
        return 0x2005;
    }
    477a:	movw	r2, #8193	; 0x2001
    477e:	movw	r3, #8197	; 0x2005
    4782:	cmp	r0, #0
    4784:	ite	ne
    4786:	movne	r0, r2
    4788:	moveq	r0, r3
    478a:	add	sp, #260	; 0x104
    478c:	pop	{r4, r5, pc}
	...

00004790 <MTPD::SendObjectInfo(unsigned long, unsigned long)>:
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    4790:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4794:	mov	r4, r0
    4796:	sub	sp, #268	; 0x10c
    4798:	mov	r6, r1
      pull_packet(rx_data_buffer);
    479a:	add.w	r1, r0, #32
    uint32_t MTPD::SendObjectInfo(uint32_t storage, uint32_t parent) {
    479e:	mov	r7, r2
      pull_packet(rx_data_buffer);
    47a0:	bl	3dc8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    47a4:	movs	r2, #0
    47a6:	ldr	r3, [pc, #196]	; (486c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xdc>)
      int len=ReadMTPHeader();
    47a8:	mov	r0, r4
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    47aa:	add.w	r9, sp, #8
        index=0;
    47ae:	str	r2, [r3, #0]
      int len=ReadMTPHeader();
    47b0:	bl	46cc <MTPD::ReadMTPHeader()>
    47b4:	mov	r5, r0
      read32(); len -=4; // storage
    47b6:	mov	r0, r4
    47b8:	bl	4716 <MTPD::read32()>
      bool dir = (read16() == 0x3001); len -=2; // format
    47bc:	mov	r0, r4
    47be:	bl	4700 <MTPD::read16()>
    47c2:	movw	r3, #12289	; 0x3001
      read32(); len -=4; // sequence number
    47c6:	subs	r5, #52	; 0x34
      uint32_t store = Storage2Store(storage);
    47c8:	subs	r6, #1
      bool dir = (read16() == 0x3001); len -=2; // format
    47ca:	subs	r3, r0, r3
      read16(); len -=2; // protection
    47cc:	mov	r0, r4
      bool dir = (read16() == 0x3001); len -=2; // format
    47ce:	rsbs	r8, r3, #0
    47d2:	adc.w	r8, r8, r3
      read16(); len -=2; // protection
    47d6:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // size
    47da:	mov	r0, r4
    47dc:	bl	4716 <MTPD::read32()>
      read16(); len -=2; // thumb format
    47e0:	mov	r0, r4
    47e2:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // thumb size
    47e6:	mov	r0, r4
    47e8:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // thumb width
    47ec:	mov	r0, r4
    47ee:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // thumb height
    47f2:	mov	r0, r4
    47f4:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // pix width
    47f8:	mov	r0, r4
    47fa:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // pix height
    47fe:	mov	r0, r4
    4800:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // bit depth
    4804:	mov	r0, r4
    4806:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // parent
    480a:	mov	r0, r4
    480c:	bl	4716 <MTPD::read32()>
      read16(); len -=2; // association type
    4810:	mov	r0, r4
    4812:	bl	4700 <MTPD::read16()>
      read32(); len -=4; // association description
    4816:	mov	r0, r4
    4818:	bl	4716 <MTPD::read32()>
      read32(); len -=4; // sequence number
    481c:	mov	r0, r4
    481e:	bl	4716 <MTPD::read32()>
      readstring(filename); len -= (2*(strlen(filename)+1)+1); 
    4822:	mov	r1, r9
    4824:	mov	r0, r4
    4826:	bl	472a <MTPD::readstring(char*)>
    482a:	mov	r0, r9
    482c:	bl	edd0 <strlen>
    4830:	adds	r0, #1
    4832:	sub.w	r5, r5, r0, lsl #1
    4836:	subs	r5, #1
      while(len>=4) { read32(); len-=4;}
    4838:	cmp	r5, #3
    483a:	bgt.n	4856 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xc6>
      while(len) {read8(); len--;}
    483c:	cbnz	r5, 4860 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xd0>
      return storage_->Create(store, parent, dir, filename);
    483e:	ldr	r0, [r4, #0]
    4840:	mov	r2, r7
    4842:	mov	r1, r6
    4844:	ldr	r3, [r0, #0]
    4846:	str.w	r9, [sp]
    484a:	ldr	r4, [r3, #44]	; 0x2c
    484c:	mov	r3, r8
    484e:	blx	r4
    }
    4850:	add	sp, #268	; 0x10c
    4852:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      while(len>=4) { read32(); len-=4;}
    4856:	mov	r0, r4
    4858:	subs	r5, #4
    485a:	bl	4716 <MTPD::read32()>
    485e:	b.n	4838 <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xa8>
      while(len) {read8(); len--;}
    4860:	mov	r0, r4
    4862:	subs	r5, #1
    4864:	bl	46ea <MTPD::read8()>
    4868:	b.n	483c <MTPD::SendObjectInfo(unsigned long, unsigned long)+0xac>
    486a:	nop
    486c:	.word	0x2001484c

00004870 <MTPD::SendObject()>:
    { 
    4870:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pull_packet(rx_data_buffer);
    4874:	add.w	r9, r0, #32
    { 
    4878:	mov	r4, r0
      uint32_t index = sizeof(MTPHeader);
    487a:	mov.w	sl, #12
      pull_packet(rx_data_buffer);
    487e:	mov	r1, r9
      disk_pos=0;
    4880:	add.w	r6, r4, #8192	; 0x2000
      pull_packet(rx_data_buffer);
    4884:	bl	3dc8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4888:	ldr	r3, [pc, #212]	; (4960 <MTPD::SendObject()+0xf0>)
    488a:	movs	r2, #0
      uint32_t len = ReadMTPHeader();
    488c:	mov	r0, r4
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    488e:	add.w	fp, r4, #1056	; 0x420
        index=0;
    4892:	str	r2, [r3, #0]
      uint32_t len = ReadMTPHeader();
    4894:	bl	46cc <MTPD::ReadMTPHeader()>
      disk_pos=0;
    4898:	movs	r3, #0
      uint32_t len = ReadMTPHeader();
    489a:	mov	r7, r0
      disk_pos=0;
    489c:	str.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    48a0:	cmp	r7, #0
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    48a2:	ldr.w	r3, [r6, #1056]	; 0x420
      while((int)len>0)
    48a6:	bgt.n	48bc <MTPD::SendObject()+0x4c>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    48a8:	ldr	r0, [r4, #0]
    48aa:	ldr	r2, [r0, #0]
      if(disk_pos)
    48ac:	cmp	r3, #0
    48ae:	bne.n	494a <MTPD::SendObject()+0xda>
      storage_->close();
    48b0:	ldr	r0, [r4, #0]
    48b2:	ldr	r3, [r0, #0]
    48b4:	ldr	r3, [r3, #56]	; 0x38
    48b6:	blx	r3
      return true;
    48b8:	movs	r0, #1
    48ba:	b.n	4904 <MTPD::SendObject()+0x94>
      { uint32_t bytes = MTP_RX_SIZE - index;                     // how many data in usb-packet
    48bc:	rsb	r8, sl, #512	; 0x200
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    48c0:	rsb	r5, r3, #8192	; 0x2000
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    48c4:	add.w	r0, fp, r3
    48c8:	add.w	r1, r9, sl
    48cc:	cmp	r8, r7
    48ce:	it	cs
    48d0:	movcs	r8, r7
        uint32_t to_copy=min(bytes, DISK_BUFFER_SIZE-disk_pos);   // how many data to copy to disk buffer
    48d2:	cmp	r5, r8
    48d4:	it	cs
    48d6:	movcs	r5, r8
        memcpy(disk_buffer+disk_pos, rx_data_buffer + index,to_copy);
    48d8:	mov	r2, r5
    48da:	bl	a254 <memcpy>
        disk_pos += to_copy;
    48de:	ldr.w	r2, [r6, #1056]	; 0x420
        len -= to_copy;
    48e2:	subs	r3, r7, r5
        disk_pos += to_copy;
    48e4:	add	r2, r5
        len -= to_copy;
    48e6:	str	r3, [sp, #4]
        if(disk_pos==DISK_BUFFER_SIZE)
    48e8:	cmp.w	r2, #8192	; 0x2000
        disk_pos += to_copy;
    48ec:	str.w	r2, [r6, #1056]	; 0x420
        if(disk_pos==DISK_BUFFER_SIZE)
    48f0:	bne.n	4936 <MTPD::SendObject()+0xc6>
          if(storage_->write((const char *)disk_buffer, DISK_BUFFER_SIZE)<DISK_BUFFER_SIZE) return false;
    48f2:	ldr	r0, [r4, #0]
    48f4:	mov	r1, fp
    48f6:	ldr	r3, [r0, #0]
    48f8:	ldr	r3, [r3, #52]	; 0x34
    48fa:	blx	r3
    48fc:	cmp.w	r0, #8192	; 0x2000
    4900:	bcs.n	490a <MTPD::SendObject()+0x9a>
    4902:	movs	r0, #0
    }
    4904:	add	sp, #12
    4906:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          disk_pos =0;
    490a:	movs	r3, #0
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    490c:	subs.w	r2, r8, r5
          disk_pos =0;
    4910:	str.w	r3, [r6, #1056]	; 0x420
          if(bytes) // we have still data in transfer buffer, copy to initial disk_buffer
    4914:	beq.n	4936 <MTPD::SendObject()+0xc6>
            memcpy(disk_buffer,rx_data_buffer+index+to_copy,bytes);
    4916:	add.w	r1, sl, r5
    491a:	mov	r0, fp
    491c:	str	r2, [sp, #4]
    491e:	add	r1, r9
    4920:	bl	a254 <memcpy>
            disk_pos += bytes;
    4924:	ldr.w	r3, [r6, #1056]	; 0x420
    4928:	ldr	r2, [sp, #4]
    492a:	add	r3, r2
    492c:	str.w	r3, [r6, #1056]	; 0x420
            len -= bytes;
    4930:	sub.w	r3, r7, r8
    4934:	str	r3, [sp, #4]
        if(len>0)  // we have still data to be transfered
    4936:	ldr	r3, [sp, #4]
    4938:	cbz	r3, 4946 <MTPD::SendObject()+0xd6>
          index=0;
    493a:	mov.w	sl, #0
        { pull_packet(rx_data_buffer);
    493e:	mov	r1, r9
    4940:	mov	r0, r4
    4942:	bl	3dc8 <MTPD::pull_packet(unsigned char*)>
          index=0;
    4946:	ldr	r7, [sp, #4]
    4948:	b.n	48a0 <MTPD::SendObject()+0x30>
        if(storage_->write((const char *)disk_buffer, disk_pos)<disk_pos) return false;
    494a:	ldr	r5, [r2, #52]	; 0x34
    494c:	add.w	r1, r4, #1056	; 0x420
    4950:	mov	r2, r3
    4952:	blx	r5
    4954:	ldr.w	r3, [r6, #1056]	; 0x420
    4958:	cmp	r0, r3
    495a:	bcs.n	48b0 <MTPD::SendObject()+0x40>
    495c:	b.n	4902 <MTPD::SendObject()+0x92>
    495e:	nop
    4960:	.word	0x2001484c

00004964 <MTPD::setObjectPropValue(unsigned long, unsigned long)>:
    { pull_packet(rx_data_buffer);
    4964:	push	{r4, r5, r6, lr}
    4966:	mov	r5, r1
    4968:	add.w	r1, r0, #32
    496c:	mov	r6, r2
    496e:	mov	r4, r0
    4970:	bl	3dc8 <MTPD::pull_packet(unsigned char*)>
        index=0;
    4974:	ldr	r3, [pc, #28]	; (4994 <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x30>)
    4976:	movs	r2, #0
    4978:	str	r2, [r3, #0]
      if(p2==0xDC07)
    497a:	movw	r3, #56327	; 0xdc07
    497e:	cmp	r6, r3
    4980:	bne.n	498e <MTPD::setObjectPropValue(unsigned long, unsigned long)+0x2a>
    4982:	mov	r1, r5
    4984:	mov	r0, r4
    }
    4986:	ldmia.w	sp!, {r4, r5, r6, lr}
    498a:	b.w	475a <MTPD::setObjectPropValue(unsigned long, unsigned long) [clone .part.0]>
    498e:	movw	r0, #8197	; 0x2005
    4992:	pop	{r4, r5, r6, pc}
    4994:	.word	0x2001484c

00004998 <MTPD::loop()>:

    void MTPD::loop(void)
    { if(!usb_mtp_available()) return;
    4998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    499c:	sub	sp, #60	; 0x3c
    499e:	mov	r4, r0
    49a0:	bl	c27c <usb_mtp_available>
    49a4:	cmp	r0, #0
    49a6:	beq.w	4e00 <MTPD::loop()+0x468>
      if(fetch_packet(rx_data_buffer))
    49aa:	add.w	fp, r4, #32
      return usb_mtp_recv(data_buffer,60);
    49ae:	movs	r1, #60	; 0x3c
    49b0:	mov	r0, fp
    49b2:	bl	c1e8 <usb_mtp_recv>
      if(fetch_packet(rx_data_buffer))
    49b6:	cmp	r0, #0
    49b8:	beq.w	4e00 <MTPD::loop()+0x468>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    49bc:	ldr	r3, [r4, #40]	; 0x28
    49be:	ldr	r1, [pc, #756]	; (4cb4 <MTPD::loop()+0x31c>)
    49c0:	str	r3, [sp, #4]
    49c2:	ldrh	r3, [r4, #36]	; 0x24
    49c4:	ldr	r0, [pc, #752]	; (4cb8 <MTPD::loop()+0x320>)
    49c6:	str	r3, [sp, #0]
    49c8:	ldr	r3, [r4, #32]
    49ca:	ldrh	r2, [r4, #38]	; 0x26
    49cc:	bl	c758 <Print::printf(char const*, ...)>
    49d0:	ldr	r3, [r4, #32]
    49d2:	cmp	r3, #12
    49d4:	bls.n	49e0 <MTPD::loop()+0x48>
    49d6:	ldr	r2, [r4, #44]	; 0x2c
    49d8:	ldr	r1, [pc, #736]	; (4cbc <MTPD::loop()+0x324>)
    49da:	ldr	r0, [pc, #732]	; (4cb8 <MTPD::loop()+0x320>)
    49dc:	bl	c758 <Print::printf(char const*, ...)>
    49e0:	ldr	r3, [r4, #32]
    49e2:	cmp	r3, #16
    49e4:	bls.n	49f0 <MTPD::loop()+0x58>
    49e6:	ldr	r2, [r4, #48]	; 0x30
    49e8:	ldr	r1, [pc, #720]	; (4cbc <MTPD::loop()+0x324>)
    49ea:	ldr	r0, [pc, #716]	; (4cb8 <MTPD::loop()+0x320>)
    49ec:	bl	c758 <Print::printf(char const*, ...)>
    49f0:	ldr	r3, [r4, #32]
    49f2:	cmp	r3, #20
    49f4:	bls.n	4a00 <MTPD::loop()+0x68>
    49f6:	ldr	r2, [r4, #52]	; 0x34
    49f8:	ldr	r1, [pc, #704]	; (4cbc <MTPD::loop()+0x324>)
    49fa:	ldr	r0, [pc, #700]	; (4cb8 <MTPD::loop()+0x320>)
    49fc:	bl	c758 <Print::printf(char const*, ...)>
    4a00:	ldr	r1, [pc, #700]	; (4cc0 <MTPD::loop()+0x328>)
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        TID=id;
    4a02:	add.w	r5, r4, #8192	; 0x2000
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4a06:	ldr	r0, [pc, #688]	; (4cb8 <MTPD::loop()+0x320>)

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    4a08:	movw	r7, #8193	; 0x2001
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4a0c:	bl	c758 <Print::printf(char const*, ...)>
        int p1 = CONTAINER->params[0];
    4a10:	ldr	r3, [r4, #44]	; 0x2c
        int id = CONTAINER->transaction_id;
    4a12:	ldr	r1, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
    4a14:	ldrh	r0, [r4, #36]	; 0x24
        int p1 = CONTAINER->params[0];
    4a16:	mov	r6, r3
        int op = CONTAINER->op;
    4a18:	ldrh	r2, [r4, #38]	; 0x26
        int len= CONTAINER->len;
    4a1a:	ldr.w	r9, [r4, #32]
        int p1 = CONTAINER->params[0];
    4a1e:	str	r3, [sp, #12]
        int id = CONTAINER->transaction_id;
    4a20:	str	r1, [sp, #16]
        int p3 = CONTAINER->params[2];
    4a22:	ldrd	r8, r3, [r4, #48]	; 0x30
        TID=id;
    4a26:	str.w	r1, [r5, #1068]	; 0x42c
        if(typ==2) return_code=0x2005; // we should only get cmds
    4a2a:	movw	r1, #8197	; 0x2005
    4a2e:	cmp	r0, #2
    4a30:	it	eq
    4a32:	moveq	r7, r1

        switch (op)
    4a34:	movw	r0, #4123	; 0x101b
    4a38:	cmp	r2, r0
    4a3a:	bhi.n	4ac4 <MTPD::loop()+0x12c>
    4a3c:	cmp.w	r2, #4096	; 0x1000
    4a40:	bhi.n	4a48 <MTPD::loop()+0xb0>
    4a42:	movw	r7, #8197	; 0x2005
    4a46:	b.n	4b42 <MTPD::loop()+0x1aa>
    4a48:	sub.w	r2, r2, #4096	; 0x1000
    4a4c:	subs	r2, #1
    4a4e:	cmp	r2, #26
    4a50:	bhi.n	4a42 <MTPD::loop()+0xaa>
    4a52:	add	r1, pc, #4	; (adr r1, 4a58 <MTPD::loop()+0xc0>)
    4a54:	ldr.w	pc, [r1, r2, lsl #2]
    4a58:	.word	0x00004ae7
    4a5c:	.word	0x00004b3b
    4a60:	.word	0x00004dfb
    4a64:	.word	0x00004b71
    4a68:	.word	0x00004bb5
    4a6c:	.word	0x00004bff
    4a70:	.word	0x00004c15
    4a74:	.word	0x00004c6b
    4a78:	.word	0x00004cc5
    4a7c:	.word	0x00004a43
    4a80:	.word	0x00004d0f
    4a84:	.word	0x00004d2d
    4a88:	.word	0x00004d41
    4a8c:	.word	0x00004a43
    4a90:	.word	0x00004a43
    4a94:	.word	0x00004a43
    4a98:	.word	0x00004a43
    4a9c:	.word	0x00004a43
    4aa0:	.word	0x00004a43
    4aa4:	.word	0x00004d57
    4aa8:	.word	0x00004da1
    4aac:	.word	0x00004a43
    4ab0:	.word	0x00004a43
    4ab4:	.word	0x00004a43
    4ab8:	.word	0x00004deb
    4abc:	.word	0x00004e07
    4ac0:	.word	0x00004e31
    4ac4:	add.w	r3, r2, #26496	; 0x6780
    4ac8:	adds	r3, #127	; 0x7f
    4aca:	uxth	r3, r3
    4acc:	cmp	r3, #3
    4ace:	bhi.n	4a42 <MTPD::loop()+0xaa>
    4ad0:	sub.w	r2, r2, #38912	; 0x9800
    4ad4:	subs	r2, #2
    4ad6:	cmp	r2, #2
    4ad8:	bhi.w	4e84 <MTPD::loop()+0x4ec>
    4adc:	tbh	[pc, r2, lsl #1]
    4ae0:	.word	0x021e01f7
    4ae4:	.short	0x0245
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    4ae6:	movs	r6, #0
    4ae8:	movs	r3, #1
    4aea:	mov	r0, r4
    4aec:	strb.w	r3, [r5, #1060]	; 0x424
    4af0:	str.w	r6, [r5, #1064]	; 0x428
    4af4:	bl	3ed4 <MTPD::WriteDescriptor()>
    4af8:	ldr.w	r3, [r5, #1064]	; 0x428
    4afc:	mov	r0, r4
    4afe:	movs	r2, #12
    4b00:	adds	r3, #12
    4b02:	add	r1, sp, #24
    4b04:	str	r3, [sp, #24]
    4b06:	movs	r3, #2
    4b08:	strh.w	r3, [sp, #28]
    4b0c:	ldrh	r3, [r4, #38]	; 0x26
    4b0e:	strh.w	r3, [sp, #30]
    4b12:	ldr	r3, [r4, #40]	; 0x28
    4b14:	str.w	r6, [r5, #1064]	; 0x428
    4b18:	strb.w	r6, [r5, #1060]	; 0x424
    4b1c:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4b1e:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(WriteDescriptor());
    4b22:	mov	r0, r4
    4b24:	bl	3ed4 <MTPD::WriteDescriptor()>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    4b28:	ldr	r1, [sp, #24]
    4b2a:	ubfx	r1, r1, #0, #9
    4b2e:	cbz	r1, 4b42 <MTPD::loop()+0x1aa>
    4b30:	add.w	r0, r4, #544	; 0x220
    4b34:	bl	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              break;
    4b38:	b.n	4b42 <MTPD::loop()+0x1aa>
            openSession(p1);
    4b3a:	mov	r1, r6
    4b3c:	mov	r0, r4
    4b3e:	bl	3db8 <MTPD::openSession(unsigned long)>
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4b42:	movs	r3, #3
            CONTAINER->len=len;
    4b44:	str.w	r9, [r4, #32]
            CONTAINER->op=return_code;
    4b48:	strh	r7, [r4, #38]	; 0x26
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b4a:	mov	r1, fp
            CONTAINER->type=3;
    4b4c:	strh	r3, [r4, #36]	; 0x24
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b4e:	mov	r2, r9
            CONTAINER->transaction_id=id;
    4b50:	ldr	r3, [sp, #16]
    4b52:	str	r3, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
    4b54:	ldr	r3, [sp, #12]
    4b56:	str	r3, [r4, #44]	; 0x2c
            memcpy(tx_data_buffer,rx_data_buffer,len);
    4b58:	add.w	r4, r4, #544	; 0x220
    4b5c:	mov	r0, r4
    4b5e:	bl	a254 <memcpy>
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b62:	mov	r1, r9
    4b64:	mov	r0, r4
        }
      }
    }
    4b66:	add	sp, #60	; 0x3c
    4b68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
    4b6c:	b.w	3cd2 <MTPD::push_packet(unsigned char*, unsigned long) [clone .constprop.0] [clone .isra.0]>
              TRANSMIT(WriteStorageIDs());
    4b70:	movs	r6, #0
    4b72:	movs	r3, #1
    4b74:	mov	r0, r4
    4b76:	strb.w	r3, [r5, #1060]	; 0x424
    4b7a:	str.w	r6, [r5, #1064]	; 0x428
    4b7e:	bl	3fec <MTPD::WriteStorageIDs()>
    4b82:	ldr.w	r3, [r5, #1064]	; 0x428
    4b86:	mov	r0, r4
    4b88:	movs	r2, #12
    4b8a:	adds	r3, #12
    4b8c:	add	r1, sp, #24
    4b8e:	str	r3, [sp, #24]
    4b90:	movs	r3, #2
    4b92:	strh.w	r3, [sp, #28]
    4b96:	ldrh	r3, [r4, #38]	; 0x26
    4b98:	strh.w	r3, [sp, #30]
    4b9c:	ldr	r3, [r4, #40]	; 0x28
    4b9e:	str.w	r6, [r5, #1064]	; 0x428
    4ba2:	strb.w	r6, [r5, #1060]	; 0x424
    4ba6:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ba8:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(WriteStorageIDs());
    4bac:	mov	r0, r4
    4bae:	bl	3fec <MTPD::WriteStorageIDs()>
    4bb2:	b.n	4b28 <MTPD::loop()+0x190>
            TRANSMIT(GetStorageInfo(p1));
    4bb4:	mov.w	r8, #0
    4bb8:	movs	r3, #1
    4bba:	mov	r1, r6
    4bbc:	mov	r0, r4
    4bbe:	strb.w	r3, [r5, #1060]	; 0x424
    4bc2:	str.w	r8, [r5, #1064]	; 0x428
    4bc6:	bl	4250 <MTPD::GetStorageInfo(unsigned long)>
    4bca:	ldr.w	r3, [r5, #1064]	; 0x428
    4bce:	add	r1, sp, #24
    4bd0:	mov	r0, r4
    4bd2:	adds	r3, #12
    4bd4:	movs	r2, #12
    4bd6:	str	r3, [sp, #24]
    4bd8:	movs	r3, #2
    4bda:	strh.w	r3, [sp, #28]
    4bde:	ldrh	r3, [r4, #38]	; 0x26
    4be0:	strh.w	r3, [sp, #30]
    4be4:	ldr	r3, [r4, #40]	; 0x28
    4be6:	str.w	r8, [r5, #1064]	; 0x428
    4bea:	strb.w	r8, [r5, #1060]	; 0x424
    4bee:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4bf0:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetStorageInfo(p1));
    4bf4:	mov	r1, r6
    4bf6:	mov	r0, r4
    4bf8:	bl	4250 <MTPD::GetStorageInfo(unsigned long)>
    4bfc:	b.n	4b28 <MTPD::loop()+0x190>
            if (p2) 
    4bfe:	cmp.w	r8, #0
    4c02:	bne.w	4f78 <MTPD::loop()+0x5e0>
                p1 = GetNumObjects(p1, p3);
    4c06:	mov	r2, r3
    4c08:	mov	r1, r6
    4c0a:	mov	r0, r4
    4c0c:	bl	3d60 <MTPD::GetNumObjects(unsigned long, unsigned long)>
    4c10:	str	r0, [sp, #12]
    4c12:	b.n	4b42 <MTPD::loop()+0x1aa>
            if (p2) 
    4c14:	cmp.w	r8, #0
    4c18:	bne.w	4f78 <MTPD::loop()+0x5e0>
              TRANSMIT(GetObjectHandles(p1, p3));
    4c1c:	movs	r2, #1
    4c1e:	mov	r1, r6
    4c20:	mov	r0, r4
    4c22:	str.w	r8, [r5, #1064]	; 0x428
    4c26:	strb.w	r2, [r5, #1060]	; 0x424
    4c2a:	mov	r2, r3
    4c2c:	str	r3, [sp, #20]
    4c2e:	bl	4016 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4c32:	ldr.w	r2, [r5, #1064]	; 0x428
    4c36:	add	r1, sp, #24
    4c38:	mov	r0, r4
    4c3a:	adds	r2, #12
    4c3c:	str	r2, [sp, #24]
    4c3e:	movs	r2, #2
    4c40:	strh.w	r2, [sp, #28]
    4c44:	ldrh	r2, [r4, #38]	; 0x26
    4c46:	strh.w	r2, [sp, #30]
    4c4a:	ldr	r2, [r4, #40]	; 0x28
    4c4c:	str.w	r8, [r5, #1064]	; 0x428
    4c50:	str	r2, [sp, #32]
    4c52:	movs	r2, #12
    4c54:	strb.w	r8, [r5, #1060]	; 0x424
    { if (write_get_length_) 
    4c58:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetObjectHandles(p1, p3));
    4c5c:	ldr	r3, [sp, #20]
    4c5e:	mov	r1, r6
    4c60:	mov	r0, r4
    4c62:	mov	r2, r3
    4c64:	bl	4016 <MTPD::GetObjectHandles(unsigned long, unsigned long)>
    4c68:	b.n	4b28 <MTPD::loop()+0x190>
            TRANSMIT(GetObjectInfo(p1));
    4c6a:	mov.w	r8, #0
    4c6e:	movs	r3, #1
    4c70:	mov	r1, r6
    4c72:	mov	r0, r4
    4c74:	strb.w	r3, [r5, #1060]	; 0x424
    4c78:	str.w	r8, [r5, #1064]	; 0x428
    4c7c:	bl	4068 <MTPD::GetObjectInfo(unsigned long)>
    4c80:	ldr.w	r3, [r5, #1064]	; 0x428
    4c84:	add	r1, sp, #24
    4c86:	mov	r0, r4
    4c88:	adds	r3, #12
    4c8a:	movs	r2, #12
    4c8c:	str	r3, [sp, #24]
    4c8e:	movs	r3, #2
    4c90:	strh.w	r3, [sp, #28]
    4c94:	ldrh	r3, [r4, #38]	; 0x26
    4c96:	strh.w	r3, [sp, #30]
    4c9a:	ldr	r3, [r4, #40]	; 0x28
    4c9c:	str.w	r8, [r5, #1064]	; 0x428
    4ca0:	strb.w	r8, [r5, #1060]	; 0x424
    4ca4:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ca6:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObjectInfo(p1));
    4caa:	mov	r1, r6
    4cac:	mov	r0, r4
    4cae:	bl	4068 <MTPD::GetObjectInfo(unsigned long)>
    4cb2:	b.n	4b28 <MTPD::loop()+0x190>
    4cb4:	.word	0x20001190
    4cb8:	.word	0x20001d30
    4cbc:	.word	0x2000119e
    4cc0:	.word	0x20000dba
            TRANSMIT(GetObject(p1));
    4cc4:	mov.w	r8, #0
    4cc8:	movs	r3, #1
    4cca:	mov	r1, r6
    4ccc:	mov	r0, r4
    4cce:	strb.w	r3, [r5, #1060]	; 0x424
    4cd2:	str.w	r8, [r5, #1064]	; 0x428
    4cd6:	bl	449e <MTPD::GetObject(unsigned long)>
    4cda:	ldr.w	r3, [r5, #1064]	; 0x428
    4cde:	add	r1, sp, #24
    4ce0:	mov	r0, r4
    4ce2:	adds	r3, #12
    4ce4:	movs	r2, #12
    4ce6:	str	r3, [sp, #24]
    4ce8:	movs	r3, #2
    4cea:	strh.w	r3, [sp, #28]
    4cee:	ldrh	r3, [r4, #38]	; 0x26
    4cf0:	strh.w	r3, [sp, #30]
    4cf4:	ldr	r3, [r4, #40]	; 0x28
    4cf6:	str.w	r8, [r5, #1064]	; 0x428
    4cfa:	strb.w	r8, [r5, #1060]	; 0x424
    4cfe:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d00:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
            TRANSMIT(GetObject(p1));
    4d04:	mov	r1, r6
    4d06:	mov	r0, r4
    4d08:	bl	449e <MTPD::GetObject(unsigned long)>
    4d0c:	b.n	4b28 <MTPD::loop()+0x190>
              if (p2) {
    4d0e:	cmp.w	r8, #0
    4d12:	bne.w	4f78 <MTPD::loop()+0x5e0>
                if (!storage_->DeleteObject(p1)) {
    4d16:	ldr	r0, [r4, #0]
    4d18:	mov	r1, r6
    4d1a:	ldr	r3, [r0, #0]
    4d1c:	ldr	r3, [r3, #60]	; 0x3c
    4d1e:	blx	r3
                  return_code = 0x2012; // partial deletion
    4d20:	movw	r3, #8210	; 0x2012
    4d24:	cmp	r0, #0
    4d26:	it	eq
    4d28:	moveq	r7, r3
    4d2a:	b.n	4b42 <MTPD::loop()+0x1aa>
              p3 = SendObjectInfo(p1, // storage
    4d2c:	mov	r2, r8
    4d2e:	mov	r1, r6
    4d30:	mov	r0, r4
              len = 12 + 3 * 4;
    4d32:	mov.w	r9, #24
              p3 = SendObjectInfo(p1, // storage
    4d36:	bl	4790 <MTPD::SendObjectInfo(unsigned long, unsigned long)>
              CONTAINER->params[2]=p3;
    4d3a:	strd	r8, r0, [r4, #48]	; 0x30
              break;
    4d3e:	b.n	4b42 <MTPD::loop()+0x1aa>
              if(!SendObject()) return_code = 0x2005;
    4d40:	mov	r0, r4
    4d42:	mov.w	r9, #12
    4d46:	bl	4870 <MTPD::SendObject()>
    4d4a:	movw	r3, #8197	; 0x2005
    4d4e:	cmp	r0, #0
    4d50:	it	eq
    4d52:	moveq	r7, r3
    4d54:	b.n	4b42 <MTPD::loop()+0x1aa>
              TRANSMIT(GetDevicePropDesc(p1));
    4d56:	mov.w	r8, #0
    4d5a:	movs	r3, #1
    4d5c:	mov	r1, r6
    4d5e:	mov	r0, r4
    4d60:	strb.w	r3, [r5, #1060]	; 0x424
    4d64:	str.w	r8, [r5, #1064]	; 0x428
    4d68:	bl	3e7c <MTPD::GetDevicePropDesc(unsigned long)>
    4d6c:	ldr.w	r3, [r5, #1064]	; 0x428
    4d70:	add	r1, sp, #24
    4d72:	mov	r0, r4
    4d74:	adds	r3, #12
    4d76:	movs	r2, #12
    4d78:	str	r3, [sp, #24]
    4d7a:	movs	r3, #2
    4d7c:	strh.w	r3, [sp, #28]
    4d80:	ldrh	r3, [r4, #38]	; 0x26
    4d82:	strh.w	r3, [sp, #30]
    4d86:	ldr	r3, [r4, #40]	; 0x28
    4d88:	str.w	r8, [r5, #1064]	; 0x428
    4d8c:	strb.w	r8, [r5, #1060]	; 0x424
    4d90:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4d92:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropDesc(p1));
    4d96:	mov	r1, r6
    4d98:	mov	r0, r4
    4d9a:	bl	3e7c <MTPD::GetDevicePropDesc(unsigned long)>
    4d9e:	b.n	4b28 <MTPD::loop()+0x190>
              TRANSMIT(GetDevicePropValue(p1));
    4da0:	mov.w	r8, #0
    4da4:	movs	r3, #1
    4da6:	mov	r1, r6
    4da8:	mov	r0, r4
    4daa:	strb.w	r3, [r5, #1060]	; 0x424
    4dae:	str.w	r8, [r5, #1064]	; 0x428
    4db2:	bl	3e68 <MTPD::GetDevicePropValue(unsigned long)>
    4db6:	ldr.w	r3, [r5, #1064]	; 0x428
    4dba:	add	r1, sp, #24
    4dbc:	mov	r0, r4
    4dbe:	adds	r3, #12
    4dc0:	movs	r2, #12
    4dc2:	str	r3, [sp, #24]
    4dc4:	movs	r3, #2
    4dc6:	strh.w	r3, [sp, #28]
    4dca:	ldrh	r3, [r4, #38]	; 0x26
    4dcc:	strh.w	r3, [sp, #30]
    4dd0:	ldr	r3, [r4, #40]	; 0x28
    4dd2:	str.w	r8, [r5, #1064]	; 0x428
    4dd6:	strb.w	r8, [r5, #1060]	; 0x424
    4dda:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ddc:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(GetDevicePropValue(p1));
    4de0:	mov	r1, r6
    4de2:	mov	r0, r4
    4de4:	bl	3e68 <MTPD::GetDevicePropValue(unsigned long)>
    4de8:	b.n	4b28 <MTPD::loop()+0x190>
              return_code = moveObject(p1,p2,p3);
    4dea:	mov	r2, r8
    4dec:	mov	r1, r6
    4dee:	mov	r0, r4
              len = 12;
    4df0:	mov.w	r9, #12
              return_code = moveObject(p1,p2,p3);
    4df4:	bl	3d86 <MTPD::moveObject(unsigned long, unsigned long, unsigned long)>
    4df8:	mov	r7, r0
        if(return_code)
    4dfa:	cmp	r7, #0
    4dfc:	bne.w	4b42 <MTPD::loop()+0x1aa>
    }
    4e00:	add	sp, #60	; 0x3c
    4e02:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              return_code = copyObject(p1,p2,p3);
    4e06:	mov	r2, r8
    4e08:	mov	r1, r6
    4e0a:	mov	r0, r4
              if(!return_code) 
    4e0c:	movw	r7, #8197	; 0x2005
              return_code = copyObject(p1,p2,p3);
    4e10:	bl	3da4 <MTPD::copyObject(unsigned long, unsigned long, unsigned long)>
              if(!return_code) 
    4e14:	cmp	r0, #0
    4e16:	itete	eq
    4e18:	moveq	r3, r6
    4e1a:	movne	r3, r0
    4e1c:	moveq.w	r9, #12
    4e20:	movne.w	r9, #16
    4e24:	str	r3, [sp, #12]
    4e26:	movw	r3, #8193	; 0x2001
    4e2a:	it	ne
    4e2c:	movne	r7, r3
    4e2e:	b.n	4b42 <MTPD::loop()+0x1aa>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4e30:	mov.w	sl, #0
    4e34:	movs	r2, #1
    4e36:	mov	r1, r6
    4e38:	mov	r0, r4
    4e3a:	strb.w	r2, [r5, #1060]	; 0x424
    4e3e:	mov	r2, r8
    4e40:	str.w	sl, [r5, #1064]	; 0x428
    4e44:	str	r3, [sp, #20]
    4e46:	bl	4584 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e4a:	ldr.w	r2, [r5, #1064]	; 0x428
    4e4e:	add	r1, sp, #24
    4e50:	adds	r2, #12
    4e52:	str	r2, [sp, #24]
    4e54:	movs	r2, #2
    4e56:	strh.w	r2, [sp, #28]
    4e5a:	ldrh	r2, [r4, #38]	; 0x26
    4e5c:	strh.w	r2, [sp, #30]
    4e60:	ldr	r2, [r4, #40]	; 0x28
    4e62:	str.w	sl, [r5, #1064]	; 0x428
    4e66:	strb.w	sl, [r5, #1060]	; 0x424
    4e6a:	strd	r2, r0, [sp, #32]
    { if (write_get_length_) 
    4e6e:	mov	r0, r4
    4e70:	movs	r2, #32
    4e72:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT1(GetPartialObject(p1,p2,p3));
    4e76:	ldr	r3, [sp, #20]
    4e78:	mov	r2, r8
    4e7a:	mov	r1, r6
    4e7c:	mov	r0, r4
    4e7e:	bl	4584 <MTPD::GetPartialObject(unsigned long, unsigned long, unsigned long)>
    4e82:	b.n	4b28 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropsSupported(p1));
    4e84:	mov.w	r8, #0
    4e88:	movs	r3, #1
    4e8a:	mov	r1, r6
    4e8c:	mov	r0, r4
    4e8e:	strb.w	r3, [r5, #1060]	; 0x424
    4e92:	str.w	r8, [r5, #1064]	; 0x428
    4e96:	bl	4148 <MTPD::getObjectPropsSupported(unsigned long)>
    4e9a:	ldr.w	r3, [r5, #1064]	; 0x428
    4e9e:	add	r1, sp, #24
    4ea0:	mov	r0, r4
    4ea2:	adds	r3, #12
    4ea4:	movs	r2, #12
    4ea6:	str	r3, [sp, #24]
    4ea8:	movs	r3, #2
    4eaa:	strh.w	r3, [sp, #28]
    4eae:	ldrh	r3, [r4, #38]	; 0x26
    4eb0:	strh.w	r3, [sp, #30]
    4eb4:	ldr	r3, [r4, #40]	; 0x28
    4eb6:	str.w	r8, [r5, #1064]	; 0x428
    4eba:	strb.w	r8, [r5, #1060]	; 0x424
    4ebe:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4ec0:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropsSupported(p1));
    4ec4:	mov	r1, r6
    4ec6:	mov	r0, r4
    4ec8:	bl	4148 <MTPD::getObjectPropsSupported(unsigned long)>
    4ecc:	b.n	4b28 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4ece:	mov.w	sl, #0
    4ed2:	movs	r3, #1
    4ed4:	mov	r2, r8
    4ed6:	mov	r1, r6
    4ed8:	mov	r0, r4
    4eda:	strb.w	r3, [r5, #1060]	; 0x424
    4ede:	str.w	sl, [r5, #1064]	; 0x428
    4ee2:	bl	435c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4ee6:	ldr.w	r3, [r5, #1064]	; 0x428
    4eea:	add	r1, sp, #24
    4eec:	mov	r0, r4
    4eee:	adds	r3, #12
    4ef0:	movs	r2, #12
    4ef2:	str	r3, [sp, #24]
    4ef4:	movs	r3, #2
    4ef6:	strh.w	r3, [sp, #28]
    4efa:	ldrh	r3, [r4, #38]	; 0x26
    4efc:	strh.w	r3, [sp, #30]
    4f00:	ldr	r3, [r4, #40]	; 0x28
    4f02:	str.w	sl, [r5, #1064]	; 0x428
    4f06:	strb.w	sl, [r5, #1060]	; 0x424
    4f0a:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f0c:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropDesc(p1,p2));
    4f10:	mov	r2, r8
    4f12:	mov	r1, r6
    4f14:	mov	r0, r4
    4f16:	bl	435c <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    4f1a:	b.n	4b28 <MTPD::loop()+0x190>
              TRANSMIT(getObjectPropValue(p1,p2));
    4f1c:	mov.w	sl, #0
    4f20:	movs	r3, #1
    4f22:	mov	r2, r8
    4f24:	mov	r1, r6
    4f26:	mov	r0, r4
    4f28:	strb.w	r3, [r5, #1060]	; 0x424
    4f2c:	str.w	sl, [r5, #1064]	; 0x428
    4f30:	bl	4178 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4f34:	ldr.w	r3, [r5, #1064]	; 0x428
    4f38:	add	r1, sp, #24
    4f3a:	mov	r0, r4
    4f3c:	adds	r3, #12
    4f3e:	movs	r2, #12
    4f40:	str	r3, [sp, #24]
    4f42:	movs	r3, #2
    4f44:	strh.w	r3, [sp, #28]
    4f48:	ldrh	r3, [r4, #38]	; 0x26
    4f4a:	strh.w	r3, [sp, #30]
    4f4e:	ldr	r3, [r4, #40]	; 0x28
    4f50:	str.w	sl, [r5, #1064]	; 0x428
    4f54:	strb.w	sl, [r5, #1060]	; 0x424
    4f58:	str	r3, [sp, #32]
    { if (write_get_length_) 
    4f5a:	bl	3ce8 <MTPD::write(char const*, int) [clone .part.0]>
              TRANSMIT(getObjectPropValue(p1,p2));
    4f5e:	mov	r2, r8
    4f60:	mov	r1, r6
    4f62:	mov	r0, r4
    4f64:	bl	4178 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    4f68:	b.n	4b28 <MTPD::loop()+0x190>
              return_code = setObjectPropValue(p1,p2);
    4f6a:	mov	r2, r8
    4f6c:	mov	r1, r6
    4f6e:	mov	r0, r4
    4f70:	bl	4964 <MTPD::setObjectPropValue(unsigned long, unsigned long)>
    4f74:	mov	r7, r0
              break;
    4f76:	b.n	4dfa <MTPD::loop()+0x462>
                return_code = 0x2014; // spec by format unsupported
    4f78:	movw	r7, #8212	; 0x2014
    4f7c:	b.n	4b42 <MTPD::loop()+0x1aa>
    4f7e:	nop

00004f80 <SPIClass::transfer(void const*, void*, unsigned int)>:
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{
    4f80:	push	{r4, r5, r6, lr}

	if (count == 0) return;
    4f82:	cbz	r3, 4fba <SPIClass::transfer(void const*, void*, unsigned int)+0x3a>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4f84:	ldr	r4, [r0, #0]
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    4f86:	movw	r5, #513	; 0x201
    4f8a:	str	r5, [r4, #16]
    4f8c:	mov	r4, r3

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4f8e:	cbz	r1, 4fbc <SPIClass::transfer(void const*, void*, unsigned int)+0x3c>
    4f90:	ldrb.w	r5, [r1], #1
    4f94:	ldr	r6, [r0, #0]
		count--; // how many bytes left to output.
    4f96:	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4f98:	str	r5, [r6, #100]	; 0x64
    4f9a:	ldr	r5, [r0, #0]
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4f9c:	ldr	r6, [r5, #112]	; 0x70
    4f9e:	lsls	r6, r6, #30
    4fa0:	bmi.n	4fac <SPIClass::transfer(void const*, void*, unsigned int)+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fa2:	ldr	r5, [r5, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    4fa4:	cbz	r2, 4faa <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fa6:	strb.w	r5, [r2], #1
				count_read--;
    4faa:	subs	r4, #1
    4fac:	ldr	r5, [r0, #0]
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    4fae:	ldr	r5, [r5, #20]
    4fb0:	lsls	r5, r5, #31
    4fb2:	bpl.n	4f9a <SPIClass::transfer(void const*, void*, unsigned int)+0x1a>
	while (count > 0) {
    4fb4:	cmp	r3, #0
    4fb6:	bne.n	4f8e <SPIClass::transfer(void const*, void*, unsigned int)+0xe>

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    4fb8:	cbnz	r4, 4fc2 <SPIClass::transfer(void const*, void*, unsigned int)+0x42>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    4fba:	pop	{r4, r5, r6, pc}
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    4fbc:	ldrb.w	r5, [r0, #60]	; 0x3c
    4fc0:	b.n	4f94 <SPIClass::transfer(void const*, void*, unsigned int)+0x14>
    4fc2:	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    4fc4:	ldr	r1, [r3, #112]	; 0x70
    4fc6:	lsls	r1, r1, #30
    4fc8:	bmi.n	4fb8 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fca:	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    4fcc:	cbz	r2, 4fd2 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    4fce:	strb.w	r3, [r2], #1
			count_read--;
    4fd2:	subs	r4, #1
    4fd4:	b.n	4fb8 <SPIClass::transfer(void const*, void*, unsigned int)+0x38>

00004fd6 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    4fd6:	ldr	r3, [r0, #4]
}


void SPIClass::end() {
	// only do something if we have begun
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4fd8:	ldr	r2, [r3, #0]
    4fda:	ldr	r1, [r2, #0]
    4fdc:	ldr	r2, [r3, #4]
    4fde:	tst	r1, r2
void SPIClass::end() {
    4fe0:	push	{r4, lr}
    4fe2:	mov	r4, r0
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    4fe4:	beq.n	501c <SPIClass::end()+0x46>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    4fe6:	ldr	r2, [r0, #0]
		port().CR = 0;  // turn off the enable
    4fe8:	movs	r1, #0
    4fea:	str	r1, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    4fec:	movs	r1, #5
    4fee:	ldrb	r2, [r0, #16]
    4ff0:	add	r3, r2
    4ff2:	ldrb	r0, [r3, #16]
    4ff4:	bl	bf2c <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    4ff8:	ldrb	r2, [r4, #17]
    4ffa:	ldr	r3, [r4, #4]
    4ffc:	movs	r1, #5
    4ffe:	add	r3, r2
    5000:	ldrb.w	r0, [r3, #36]	; 0x24
    5004:	bl	bf2c <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5008:	ldr	r3, [r4, #4]
    500a:	ldrb	r2, [r4, #18]
    500c:	movs	r1, #5
    500e:	add	r3, r2
	}
}
    5010:	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    5014:	ldrb.w	r0, [r3, #56]	; 0x38
    5018:	b.w	bf2c <pinMode>
}
    501c:	pop	{r4, pc}

0000501e <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    501e:	ldrb.w	r2, [r0, #163]	; 0xa3
    5022:	ldrb.w	r0, [r0, #162]	; 0xa2
	}
    5026:	subs	r0, r2, r0
    5028:	bx	lr

0000502a <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    502a:	ldrb.w	r3, [r0, #162]	; 0xa2
    502e:	ldrb.w	r2, [r0, #163]	; 0xa3
    5032:	cmp	r2, r3
		return rxBuffer[rxBufferIndex++];
    5034:	itttt	hi
    5036:	addhi	r2, r3, #1
    5038:	strbhi.w	r2, [r0, #162]	; 0xa2
    503c:	addhi	r0, r0, r3
    503e:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5040:	it	ls
    5042:	movls.w	r0, #4294967295
	}
    5046:	bx	lr

00005048 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5048:	ldrb.w	r3, [r0, #162]	; 0xa2
    504c:	ldrb.w	r2, [r0, #163]	; 0xa3
    5050:	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    5052:	itte	hi
    5054:	addhi	r0, r0, r3
    5056:	ldrbhi	r0, [r0, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    5058:	movls.w	r0, #4294967295
	}
    505c:	bx	lr

0000505e <TwoWire::flush()>:
	virtual void flush(void) {
	}
    505e:	bx	lr

00005060 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
    5060:	ldrh.w	r3, [r0, #304]	; 0x130
    5064:	cbz	r3, 5072 <TwoWire::write(unsigned char)+0x12>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    5066:	ldrb.w	r3, [r0, #303]	; 0x12f
    506a:	cmp	r3, #136	; 0x88
    506c:	bls.n	5076 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
    506e:	movs	r3, #1
    5070:	str	r3, [r0, #4]
			return 0;
    5072:	movs	r0, #0
    5074:	bx	lr
		txBuffer[txBufferLength++] = data;
    5076:	adds	r2, r3, #1
    5078:	strb.w	r2, [r0, #303]	; 0x12f
    507c:	add	r0, r3
    507e:	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
    5082:	movs	r0, #1
    5084:	bx	lr

00005086 <TwoWire::write(unsigned char const*, unsigned int)>:
{
    5086:	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
    5088:	ldrh.w	r3, [r0, #304]	; 0x130
{
    508c:	mov	r5, r0
    508e:	mov	r4, r2
	if (transmitting || slave_mode) {
    5090:	cbz	r3, 50be <TwoWire::write(unsigned char const*, unsigned int)+0x38>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    5092:	ldrb.w	r3, [r0, #303]	; 0x12f
    5096:	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
    509a:	cmp	r4, r2
    509c:	ittt	hi
    509e:	movhi	r0, #1
    50a0:	movhi	r4, r2
    50a2:	strhi	r0, [r5, #4]
		memcpy(txBuffer + txBufferLength, data, quantity);
    50a4:	add.w	r0, r5, #165	; 0xa5
    50a8:	mov	r2, r4
    50aa:	add	r0, r3
    50ac:	bl	a254 <memcpy>
		txBufferLength += quantity;
    50b0:	ldrb.w	r3, [r5, #303]	; 0x12f
    50b4:	add	r3, r4
    50b6:	strb.w	r3, [r5, #303]	; 0x12f
}
    50ba:	mov	r0, r4
    50bc:	pop	{r3, r4, r5, pc}
	return 0;
    50be:	mov	r4, r3
    50c0:	b.n	50ba <TwoWire::write(unsigned char const*, unsigned int)+0x34>
	...

000050c4 <TwoWire::force_clock()>:
{
    50c4:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    50c8:	ldr	r1, [r0, #20]
{
    50ca:	mov	r2, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    50cc:	ldrb	r3, [r0, #24]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    50ce:	mov.w	lr, #21
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50d2:	ldr	r4, [pc, #244]	; (51c8 <TwoWire::force_clock()+0x104>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    50d4:	add.w	r3, r1, r3, lsl #4
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    50d8:	ldr.w	r8, [pc, #244]	; 51d0 <TwoWire::force_clock()+0x10c>
    50dc:	ldrb	r0, [r3, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50de:	ldrb	r3, [r2, #25]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50e0:	lsls	r6, r0, #4
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50e2:	add.w	r3, r1, r3, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50e6:	add.w	r0, r4, r0, lsl #4
	*portSetRegister(sda_pin) = sda_mask;
    50ea:	ldr	r6, [r4, r6]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    50ec:	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    50f0:	ldr.w	ip, [r0, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    50f4:	ldr.w	r9, [r0, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    50f8:	lsls	r7, r3, #4
    50fa:	add.w	r3, r4, r3, lsl #4
    50fe:	ldr	r5, [r3, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
    5100:	str.w	lr, [r9]
	*portSetRegister(sda_pin) = sda_mask;
    5104:	str.w	ip, [r6, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    5108:	ldr	r0, [r6, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    510a:	ldr	r3, [r3, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    510c:	orr.w	r0, r0, ip
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5110:	str	r3, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
    5112:	str	r0, [r6, #4]
	*portSetRegister(scl_pin) = scl_mask;
    5114:	ldr	r0, [r4, r7]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    5116:	str.w	lr, [r3]
	*portSetRegister(scl_pin) = scl_mask;
    511a:	str.w	r5, [r0, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    511e:	ldr	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    5120:	ldr	r4, [pc, #168]	; (51cc <TwoWire::force_clock()+0x108>)
    5122:	orrs	r3, r5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5124:	ldr.w	lr, [pc, #172]	; 51d4 <TwoWire::force_clock()+0x110>
    5128:	str	r3, [r0, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
    512a:	ldr	r7, [r4, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    512c:	ldr.w	r3, [lr]
    5130:	udiv	r3, r3, r8
    5134:	mov.w	r8, #10
    5138:	mul.w	r3, r8, r3
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    513c:	ldr.w	r8, [r4, #4]
    5140:	sub.w	r8, r8, r7
    5144:	cmp	r3, r8
    5146:	bhi.n	513c <TwoWire::force_clock()+0x78>
    5148:	movs	r3, #9
	uint32_t begin = ARM_DWT_CYCCNT;
    514a:	ldr	r7, [pc, #128]	; (51cc <TwoWire::force_clock()+0x108>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    514c:	ldr.w	sl, [pc, #128]	; 51d0 <TwoWire::force_clock()+0x10c>
		if ((*portInputRegister(sda_pin) & sda_mask)
    5150:	ldr	r4, [r6, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    5152:	tst.w	r4, ip
    5156:	beq.n	515e <TwoWire::force_clock()+0x9a>
    5158:	ldr	r4, [r0, #8]
    515a:	tst	r4, r5
    515c:	bne.n	51c2 <TwoWire::force_clock()+0xfe>
		*portClearRegister(scl_pin) = scl_mask;
    515e:	str.w	r5, [r0, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
    5162:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5166:	ldr.w	r4, [lr]
    516a:	udiv	r4, r4, sl
    516e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5172:	ldr.w	r8, [r7, #4]
    5176:	sub.w	r8, r8, fp
    517a:	cmp	r4, r8
    517c:	bhi.n	5172 <TwoWire::force_clock()+0xae>
		*portSetRegister(scl_pin) = scl_mask;
    517e:	str.w	r5, [r0, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
    5182:	ldr.w	fp, [r7, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    5186:	ldr.w	r4, [lr]
    518a:	udiv	r4, r4, sl
    518e:	add.w	r4, r4, r4, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    5192:	ldr.w	r8, [r7, #4]
    5196:	sub.w	r8, r8, fp
    519a:	cmp	r4, r8
    519c:	bhi.n	5192 <TwoWire::force_clock()+0xce>
	for (int i=0; i < 9; i++) {
    519e:	subs	r3, #1
    51a0:	bne.n	5150 <TwoWire::force_clock()+0x8c>
	bool ret = false;
    51a2:	mov	r0, r3
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    51a4:	ldrb	r3, [r2, #24]
    51a6:	add.w	r3, r1, r3, lsl #4
    51aa:	ldr	r3, [r3, #12]
    51ac:	str.w	r3, [r9]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    51b0:	ldrb	r3, [r2, #25]
    51b2:	ldr	r2, [sp, #4]
    51b4:	add.w	r1, r1, r3, lsl #4
    51b8:	ldr	r3, [r1, #44]	; 0x2c
    51ba:	str	r3, [r2, #0]
}
    51bc:	add	sp, #12
    51be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
    51c2:	movs	r0, #1
    51c4:	b.n	51a4 <TwoWire::force_clock()+0xe0>
    51c6:	nop
    51c8:	.word	0x20000614
    51cc:	.word	0xe0001000
    51d0:	.word	0x000f4240
    51d4:	.word	0x20001d2c

000051d8 <TwoWire::wait_idle()>:
	return systick_millis_count;
    51d8:	ldr	r2, [pc, #44]	; (5208 <TwoWire::wait_idle()+0x30>)
{
    51da:	push	{r4, lr}
    51dc:	ldr	r1, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    51de:	ldr	r4, [r0, #16]
		uint32_t status = port->MSR; // pg 2899 & 2892
    51e0:	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    51e2:	tst.w	r3, #33554432	; 0x2000000
    51e6:	bne.n	51f2 <TwoWire::wait_idle()+0x1a>
	port->MSR = 0x00007F00; // clear all prior flags
    51e8:	mov.w	r3, #32512	; 0x7f00
	return true;
    51ec:	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
    51ee:	str	r3, [r4, #20]
}
    51f0:	pop	{r4, pc}
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    51f2:	lsls	r3, r3, #7
    51f4:	bmi.n	51e8 <TwoWire::wait_idle()+0x10>
    51f6:	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
    51f8:	subs	r3, r3, r1
		if (timeout > 16) {
    51fa:	cmp	r3, #16
    51fc:	bls.n	51e0 <TwoWire::wait_idle()+0x8>
			if (force_clock()) break;
    51fe:	bl	50c4 <TwoWire::force_clock()>
    5202:	cmp	r0, #0
    5204:	bne.n	51e8 <TwoWire::wait_idle()+0x10>
    5206:	b.n	51f0 <TwoWire::wait_idle()+0x18>
    5208:	.word	0x20015374

0000520c <TwoWire::endTransmission(unsigned char)>:
{
    520c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
    5210:	ldrb.w	r8, [r0, #303]	; 0x12f
{
    5214:	mov	r7, r0
    5216:	mov	r5, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5218:	ldr	r4, [r0, #16]
	if (!tx_len) return 4; // no address for transmit
    521a:	cmp.w	r8, #0
    521e:	beq.n	527e <TwoWire::endTransmission(unsigned char)+0x72>
	if (!wait_idle()) return 4;
    5220:	bl	51d8 <TwoWire::wait_idle()>
    5224:	cbz	r0, 527e <TwoWire::endTransmission(unsigned char)+0x72>
    5226:	ldr.w	r9, [pc, #196]	; 52ec <TwoWire::endTransmission(unsigned char)+0xe0>
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    522a:	movs	r6, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    522c:	mov.w	fp, #512	; 0x200
    5230:	ldr.w	sl, [r9]
		if (tx_index <= tx_len) {
    5234:	cmp	r6, r8
    5236:	bhi.n	5270 <TwoWire::endTransmission(unsigned char)+0x64>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    5238:	ldr	r3, [r4, #92]	; 0x5c
    523a:	and.w	r3, r3, #7
			while (fifo_used < 4) {
    523e:	cmp	r3, #3
    5240:	bhi.n	5270 <TwoWire::endTransmission(unsigned char)+0x64>
				if (tx_index == 0) {
    5242:	cbnz	r6, 5256 <TwoWire::endTransmission(unsigned char)+0x4a>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    5244:	ldrb.w	r2, [r7, #165]	; 0xa5
    5248:	orr.w	r2, r2, #1024	; 0x400
    524c:	str	r2, [r4, #96]	; 0x60
					tx_index = 1;
    524e:	movs	r2, #1
				fifo_used++;
    5250:	adds	r3, #1
    5252:	mov	r6, r2
    5254:	b.n	523e <TwoWire::endTransmission(unsigned char)+0x32>
				} else if (tx_index < tx_len) {
    5256:	cmp	r6, r8
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    5258:	add.w	r2, r6, #1
				} else if (tx_index < tx_len) {
    525c:	bcs.n	5268 <TwoWire::endTransmission(unsigned char)+0x5c>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    525e:	add	r6, r7
    5260:	ldrb.w	r1, [r6, #165]	; 0xa5
    5264:	str	r1, [r4, #96]	; 0x60
    5266:	b.n	5250 <TwoWire::endTransmission(unsigned char)+0x44>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5268:	cbz	r5, 526e <TwoWire::endTransmission(unsigned char)+0x62>
    526a:	str.w	fp, [r4, #96]	; 0x60
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    526e:	mov	r6, r2
		uint32_t status = port->MSR; // pg 2884 & 2891
    5270:	ldr	r3, [r4, #20]
		if (status & LPI2C_MSR_ALF) {
    5272:	lsls	r2, r3, #20
    5274:	bpl.n	5282 <TwoWire::endTransmission(unsigned char)+0x76>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5276:	ldr	r3, [r4, #16]
    5278:	orr.w	r3, r3, #768	; 0x300
    527c:	str	r3, [r4, #16]
	if (!tx_len) return 4; // no address for transmit
    527e:	movs	r5, #4
    5280:	b.n	5290 <TwoWire::endTransmission(unsigned char)+0x84>
		if (status & LPI2C_MSR_FEF) {
    5282:	lsls	r0, r3, #19
    5284:	bpl.n	5296 <TwoWire::endTransmission(unsigned char)+0x8a>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    5286:	ldr	r3, [r4, #16]
			return 5; // FIFO error
    5288:	movs	r5, #5
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    528a:	orr.w	r3, r3, #768	; 0x300
    528e:	str	r3, [r4, #16]
}
    5290:	mov	r0, r5
    5292:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (status & LPI2C_MSR_NDF) {
    5296:	lsls	r1, r3, #21
    5298:	bpl.n	52ac <TwoWire::endTransmission(unsigned char)+0xa0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    529a:	ldr	r3, [r4, #16]
			return 2; // NACK (assume address, TODO: how to tell address from data)
    529c:	movs	r5, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    529e:	orr.w	r3, r3, #768	; 0x300
    52a2:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    52a4:	mov.w	r3, #512	; 0x200
    52a8:	str	r3, [r4, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    52aa:	b.n	5290 <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    52ac:	lsls	r2, r3, #18
    52ae:	bmi.n	52bc <TwoWire::endTransmission(unsigned char)+0xb0>
    52b0:	ldr.w	r2, [r9]
    52b4:	sub.w	r2, r2, sl
    52b8:	cmp	r2, #50	; 0x32
    52ba:	bls.n	52cc <TwoWire::endTransmission(unsigned char)+0xc0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    52bc:	ldr	r3, [r4, #16]
    52be:	orr.w	r3, r3, #768	; 0x300
    52c2:	str	r3, [r4, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    52c4:	mov.w	r3, #512	; 0x200
    52c8:	str	r3, [r4, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    52ca:	b.n	527e <TwoWire::endTransmission(unsigned char)+0x72>
		if (tx_index > tx_len) {
    52cc:	cmp	r6, r8
    52ce:	bls.n	52e0 <TwoWire::endTransmission(unsigned char)+0xd4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    52d0:	ldr	r2, [r4, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    52d2:	ands.w	r2, r2, #7
    52d6:	bne.n	52e0 <TwoWire::endTransmission(unsigned char)+0xd4>
    52d8:	lsls	r3, r3, #22
    52da:	bmi.n	52e6 <TwoWire::endTransmission(unsigned char)+0xda>
    52dc:	cmp	r5, #0
    52de:	beq.n	5290 <TwoWire::endTransmission(unsigned char)+0x84>
		yield();
    52e0:	bl	c418 <yield>
	}
    52e4:	b.n	5234 <TwoWire::endTransmission(unsigned char)+0x28>
				return 0;
    52e6:	mov	r5, r2
    52e8:	b.n	5290 <TwoWire::endTransmission(unsigned char)+0x84>
    52ea:	nop
    52ec:	.word	0x20015374

000052f0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
    52f0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52f4:	mov	r7, r0
    52f6:	mov	r6, r1
    52f8:	mov	r9, r2
    52fa:	mov	r8, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    52fc:	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
    52fe:	bl	51d8 <TwoWire::wait_idle()>
    5302:	cmp	r0, #0
    5304:	beq.n	53fc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10c>
	address = (address & 0x7F) << 1;
    5306:	lsls	r6, r6, #1
	if (length < 1) length = 1;
    5308:	cmp.w	r9, #1
    530c:	ldr.w	sl, [pc, #240]	; 5400 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
	rxBufferIndex = 0;
    5310:	mov.w	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5314:	uxtb	r6, r6
    5316:	it	cc
    5318:	movcc.w	r9, #1
    531c:	ldr.w	fp, [sl]
    5320:	orr.w	r6, r6, #1024	; 0x400
	rxBufferIndex = 0;
    5324:	strh.w	r4, [r7, #162]	; 0xa2
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    5328:	orr.w	r6, r6, #1
		if (tx_state < 3) {
    532c:	cmp	r4, #2
    532e:	bhi.n	534e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    5330:	ldr	r3, [r5, #92]	; 0x5c
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5332:	add.w	r2, r9, #4294967295
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    5336:	mov.w	r1, #512	; 0x200
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
    533a:	and.w	r3, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    533e:	orr.w	r2, r2, #256	; 0x100
    5342:	add	r3, r4
			while (tx_fifo < 4 && tx_state < 3) {
    5344:	subs	r0, r3, r4
    5346:	cmp	r0, #3
    5348:	bhi.n	534e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x5e>
    534a:	cmp	r4, #3
    534c:	bne.n	537c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x8c>
		if (rxBufferLength < sizeof(rxBuffer)) {
    534e:	ldrb.w	r3, [r7, #163]	; 0xa3
    5352:	cmp	r3, #135	; 0x87
    5354:	bls.n	5396 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
		uint32_t status = port->MSR; // pg 2884 & 2891
    5356:	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
    5358:	lsls	r1, r3, #20
    535a:	bpl.n	53b8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc8>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    535c:	ldr	r3, [r5, #16]
    535e:	orr.w	r3, r3, #768	; 0x300
    5362:	str	r3, [r5, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5364:	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
    5366:	tst.w	r3, #458752	; 0x70000
    536a:	beq.n	5374 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
    536c:	ldr	r3, [r5, #16]
    536e:	orr.w	r3, r3, #512	; 0x200
    5372:	str	r3, [r5, #16]
	return rxBufferLength;
    5374:	ldrb.w	r0, [r7, #163]	; 0xa3
}
    5378:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (tx_state == 0) {
    537c:	cbnz	r4, 5384 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x94>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
    537e:	str	r6, [r5, #96]	; 0x60
				tx_state++;
    5380:	adds	r4, #1
				tx_fifo--;
    5382:	b.n	5344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x54>
				} else if (tx_state == 1) {
    5384:	cmp	r4, #1
    5386:	bne.n	538c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x9c>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
    5388:	str	r2, [r5, #96]	; 0x60
    538a:	b.n	5380 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    538c:	cmp.w	r8, #0
    5390:	beq.n	5380 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
    5392:	str	r1, [r5, #96]	; 0x60
    5394:	b.n	5380 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
    5396:	ldr	r2, [r5, #92]	; 0x5c
    5398:	ubfx	r2, r2, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
    539c:	cmp	r2, #0
    539e:	beq.n	5356 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
    53a0:	ldrb.w	r3, [r7, #163]	; 0xa3
    53a4:	cmp	r3, #135	; 0x87
    53a6:	bhi.n	5356 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x66>
				rxBuffer[rxBufferLength++] = port->MRDR;
    53a8:	ldr	r1, [r5, #112]	; 0x70
    53aa:	adds	r0, r3, #1
    53ac:	add	r3, r7
				rx_fifo--;
    53ae:	subs	r2, #1
				rxBuffer[rxBufferLength++] = port->MRDR;
    53b0:	strb.w	r0, [r7, #163]	; 0xa3
    53b4:	strb	r1, [r3, #26]
				rx_fifo--;
    53b6:	b.n	539c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xac>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
    53b8:	tst.w	r3, #9216	; 0x2400
    53bc:	bne.n	53ca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
    53be:	ldr.w	r2, [sl]
    53c2:	sub.w	r2, r2, fp
    53c6:	cmp	r2, #50	; 0x32
    53c8:	bls.n	53da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    53ca:	ldr	r3, [r5, #16]
    53cc:	orr.w	r3, r3, #768	; 0x300
    53d0:	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    53d2:	mov.w	r3, #512	; 0x200
    53d6:	str	r3, [r5, #96]	; 0x60
			break;
    53d8:	b.n	5364 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		if (rxBufferLength >= length && tx_state >= 3) {
    53da:	ldrb.w	r2, [r7, #163]	; 0xa3
    53de:	cmp	r2, r9
    53e0:	bcc.n	53f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    53e2:	cmp	r4, #2
    53e4:	bls.n	53f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			uint32_t tx_fifo = port->MFSR & 0x07;
    53e6:	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    53e8:	lsls	r2, r2, #29
    53ea:	bne.n	53f6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
    53ec:	lsls	r3, r3, #22
    53ee:	bmi.n	5364 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
    53f0:	cmp.w	r8, #0
    53f4:	beq.n	5364 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x74>
		yield();
    53f6:	bl	c418 <yield>
	}
    53fa:	b.n	532c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
	if (!wait_idle()) return 4;
    53fc:	movs	r0, #4
    53fe:	b.n	5378 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x88>
    5400:	.word	0x20015374

00005404 <TwoWire::isr()>:
{
    5404:	push	{r4, r5, r6, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    5406:	ldr	r6, [r0, #16]
{
    5408:	mov	r4, r0
	uint32_t status = port->SSR;
    540a:	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
    540e:	ands.w	r3, r5, #3840	; 0xf00
    5412:	beq.n	5418 <TwoWire::isr()+0x14>
    5414:	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
    5418:	lsls	r0, r5, #30
    541a:	bpl.n	543c <TwoWire::isr()+0x38>
		int rx = port->SRDR;
    541c:	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
    5420:	lsls	r1, r2, #16
			rxBufferIndex = 0;
    5422:	itt	mi
    5424:	movmi	r3, #0
    5426:	strhmi.w	r3, [r4, #162]	; 0xa2
		if (rxBufferLength < BUFFER_LENGTH) {
    542a:	ldrb.w	r3, [r4, #163]	; 0xa3
    542e:	cmp	r3, #135	; 0x87
			rxBuffer[rxBufferLength++] = rx & 255;
    5430:	itttt	ls
    5432:	addls	r1, r3, #1
    5434:	addls	r3, r3, r4
    5436:	strbls.w	r1, [r4, #163]	; 0xa3
    543a:	strbls	r2, [r3, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
    543c:	lsls	r2, r5, #31
    543e:	bpl.n	547a <TwoWire::isr()+0x76>
		if (!transmitting) {
    5440:	ldrb.w	r3, [r4, #304]	; 0x130
    5444:	cbnz	r3, 545a <TwoWire::isr()+0x56>
			if (user_onRequest != nullptr) {
    5446:	ldr.w	r3, [r4, #312]	; 0x138
    544a:	cbz	r3, 544e <TwoWire::isr()+0x4a>
				(*user_onRequest)();
    544c:	blx	r3
			txBufferIndex = 0;
    544e:	movs	r3, #0
    5450:	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
    5454:	movs	r3, #1
    5456:	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
    545a:	ldrb.w	r3, [r4, #302]	; 0x12e
    545e:	ldrb.w	r2, [r4, #303]	; 0x12f
    5462:	cmp	r2, r3
			port->STDR = txBuffer[txBufferIndex++];
    5464:	ittet	hi
    5466:	addhi	r2, r3, #1
    5468:	addhi	r3, r3, r4
			port->STDR = 0;
    546a:	movls	r3, #0
			port->STDR = txBuffer[txBufferIndex++];
    546c:	strbhi.w	r2, [r4, #302]	; 0x12e
    5470:	it	hi
    5472:	ldrbhi.w	r3, [r3, #165]	; 0xa5
			port->STDR = 0;
    5476:	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
    547a:	lsls	r3, r5, #22
    547c:	bpl.n	549a <TwoWire::isr()+0x96>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
    547e:	ldrb.w	r0, [r4, #163]	; 0xa3
    5482:	cbz	r0, 548c <TwoWire::isr()+0x88>
    5484:	ldr.w	r3, [r4, #316]	; 0x13c
    5488:	cbz	r3, 548c <TwoWire::isr()+0x88>
			(*user_onReceive)(rxBufferLength);
    548a:	blx	r3
		rxBufferIndex = 0;
    548c:	movs	r3, #0
    548e:	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
    5492:	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
    5496:	strb.w	r3, [r4, #304]	; 0x130
}
    549a:	pop	{r4, r5, r6, pc}

0000549c <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
    549c:	ldr	r0, [pc, #4]	; (54a4 <lpi2c1_isr()+0x8>)
    549e:	b.w	5404 <TwoWire::isr()>
    54a2:	nop
    54a4:	.word	0x20001d40

000054a8 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
    54a8:	ldr	r0, [pc, #4]	; (54b0 <lpi2c3_isr()+0x8>)
    54aa:	b.w	5404 <TwoWire::isr()>
    54ae:	nop
    54b0:	.word	0x20001e80

000054b4 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
    54b4:	ldr	r0, [pc, #4]	; (54bc <lpi2c4_isr()+0x8>)
    54b6:	b.w	5404 <TwoWire::isr()>
    54ba:	nop
    54bc:	.word	0x20001fc0

000054c0 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
    54c0:	ldr	r3, [r0, #16]
	port->MCR = 0;
    54c2:	movs	r2, #0
	if (frequency < 400000) {
    54c4:	ldr	r0, [pc, #76]	; (5514 <TwoWire::setClock(unsigned long)+0x54>)
	port->MCR = 0;
    54c6:	str	r2, [r3, #16]
	if (frequency < 400000) {
    54c8:	cmp	r1, r0
    54ca:	bhi.n	54f2 <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
    54cc:	ldr	r2, [pc, #72]	; (5518 <TwoWire::setClock(unsigned long)+0x58>)
    54ce:	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    54d0:	movs	r2, #1
    54d2:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
    54d4:	ldr	r2, [pc, #68]	; (551c <TwoWire::setClock(unsigned long)+0x5c>)
    54d6:	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    54d8:	mov.w	r2, #180224	; 0x2c000
    54dc:	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    54de:	ldr	r2, [r3, #72]	; 0x48
    54e0:	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    54e2:	movs	r2, #0
    54e4:	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    54e6:	mov.w	r2, #65537	; 0x10001
    54ea:	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    54ec:	movs	r2, #1
    54ee:	str	r2, [r3, #16]
}
    54f0:	bx	lr
	} else if (frequency < 1000000) {
    54f2:	ldr	r0, [pc, #44]	; (5520 <TwoWire::setClock(unsigned long)+0x60>)
    54f4:	cmp	r1, r0
    54f6:	ldr	r1, [pc, #44]	; (5524 <TwoWire::setClock(unsigned long)+0x64>)
    54f8:	bhi.n	5508 <TwoWire::setClock(unsigned long)+0x48>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
    54fa:	ldr	r0, [pc, #44]	; (5528 <TwoWire::setClock(unsigned long)+0x68>)
    54fc:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    54fe:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
    5500:	ldr	r2, [pc, #40]	; (552c <TwoWire::setClock(unsigned long)+0x6c>)
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    5502:	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    5504:	str	r1, [r3, #44]	; 0x2c
    5506:	b.n	54de <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
    5508:	ldr	r0, [pc, #36]	; (5530 <TwoWire::setClock(unsigned long)+0x70>)
    550a:	str	r0, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    550c:	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
    550e:	ldr	r2, [pc, #36]	; (5534 <TwoWire::setClock(unsigned long)+0x74>)
    5510:	b.n	5502 <TwoWire::setClock(unsigned long)+0x42>
    5512:	nop
    5514:	.word	0x00061a7f
    5518:	.word	0x1928373b
    551c:	.word	0x05050bb8
    5520:	.word	0x000f423f
    5524:	.word	0x00057f00
    5528:	.word	0x0c121a1c
    552c:	.word	0x02020e10
    5530:	.word	0x0407090a
    5534:	.word	0x01010960

00005538 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
    5538:	mov	r3, r0
    size_t n = end - str;
    553a:	subs	r0, r2, r1
    if (cp < 0X80) {
    553c:	cmp	r3, #127	; 0x7f
    553e:	bhi.n	554c <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
    5540:	cmp	r0, #0
    5542:	beq.n	55c8 <FsUtf::cpToMb(unsigned long, char*, char*)+0x90>
      *(str++) = static_cast<uint8_t>(cp);
    5544:	mov	r0, r1
    5546:	strb.w	r3, [r0], #1
    554a:	bx	lr
    } else if (cp < 0X800) {
    554c:	cmp.w	r3, #2048	; 0x800
    5550:	bcs.n	556e <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
    5552:	cmp	r0, #1
    5554:	bls.n	55c6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5556:	lsrs	r2, r3, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5558:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    555c:	mov	r0, r1
    555e:	orn	r2, r2, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5562:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
    5566:	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    556a:	strb	r3, [r1, #1]
    556c:	bx	lr
    } else if (cp < 0X10000) {
    556e:	cmp.w	r3, #65536	; 0x10000
    5572:	bcs.n	5598 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
    5574:	cmp	r0, #2
    5576:	bls.n	55c6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    5578:	lsrs	r2, r3, #12
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    557a:	adds	r0, r1, #3
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
    557c:	orn	r2, r2, #31
    5580:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5582:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5586:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    558a:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    558e:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    5592:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    5594:	strb	r3, [r1, #2]
    5596:	bx	lr
       if (n < 4) goto fail;
    5598:	cmp	r0, #3
    559a:	bls.n	55c6 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    559c:	lsrs	r2, r3, #18
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    559e:	adds	r0, r1, #4
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
    55a0:	orn	r2, r2, #15
    55a4:	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
    55a6:	ubfx	r2, r3, #12, #6
    55aa:	orn	r2, r2, #127	; 0x7f
    55ae:	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    55b0:	ubfx	r2, r3, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    55b4:	and.w	r3, r3, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    55b8:	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    55bc:	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
    55c0:	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
    55c2:	strb	r3, [r1, #3]
    55c4:	bx	lr
    return nullptr;
    55c6:	movs	r0, #0
  }
    55c8:	bx	lr
	...

000055cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
    55cc:	cmp	r0, r1
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
    55ce:	push	{r4, r5, lr}
    55d0:	mov	r5, r0
    if (str >= end) {
    55d2:	bcs.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    uint8_t ch = str[0];
    55d4:	ldrb	r3, [r0, #0]
    if ((ch & 0X80) == 0) {
    55d6:	ldrsb.w	r0, [r0]
    55da:	cmp	r0, #0
    55dc:	blt.n	55e4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x18>
      return str + 1;
    55de:	adds	r0, r5, #1
      *rtn = ch;
    55e0:	str	r3, [r2, #0]
  }
    55e2:	pop	{r4, r5, pc}
    if ((ch & 0XE0) == 0XC0) {
    55e4:	and.w	r0, r3, #224	; 0xe0
    55e8:	cmp	r0, #192	; 0xc0
    55ea:	bne.n	562a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x5e>
      cp = ch & 0X1F;
    55ec:	and.w	r3, r3, #31
      n = 2;
    55f0:	movs	r4, #2
    if ((str + n) > end) {
    55f2:	adds	r0, r5, r4
    55f4:	cmp	r0, r1
    55f6:	bhi.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    55f8:	adds	r5, #1
      ch = str[i];
    55fa:	ldrb.w	r1, [r5], #1
      if ((ch & 0XC0) != 0X80) {
    55fe:	and.w	r4, r1, #192	; 0xc0
    5602:	cmp	r4, #128	; 0x80
    5604:	bne.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp |= ch & 0X3F;
    5606:	and.w	r1, r1, #63	; 0x3f
    for (size_t i = 1; i < n; i++) {
    560a:	cmp	r5, r0
      cp |= ch & 0X3F;
    560c:	orr.w	r3, r1, r3, lsl #6
    for (size_t i = 1; i < n; i++) {
    5610:	bne.n	55fa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x2e>
    if (cp < 0X80 || !isValidCp(cp)) {
    5612:	sub.w	r4, r3, #128	; 0x80
    5616:	ldr	r1, [pc, #56]	; (5650 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>)
    5618:	cmp	r4, r1
    561a:	bhi.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
    561c:	sub.w	r1, r3, #55296	; 0xd800
    5620:	cmp.w	r1, #2048	; 0x800
    5624:	bcc.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
    *rtn = cp;
    5626:	str	r3, [r2, #0]
    return str + n;
    5628:	b.n	55e2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    } else if ((ch & 0XF0) == 0XE0) {
    562a:	and.w	r0, r3, #240	; 0xf0
    562e:	cmp	r0, #224	; 0xe0
    5630:	bne.n	563a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
      cp = ch & 0X0F;
    5632:	and.w	r3, r3, #15
      n = 3;
    5636:	movs	r4, #3
    5638:	b.n	55f2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
    } else if ((ch & 0XF8) == 0XF0) {
    563a:	and.w	r0, r3, #248	; 0xf8
    563e:	cmp	r0, #240	; 0xf0
    5640:	bne.n	564a <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x7e>
      cp = ch & 0X07;
    5642:	and.w	r3, r3, #7
      n = 4;
    5646:	movs	r4, #4
    5648:	b.n	55f2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x26>
      return nullptr;
    564a:	movs	r0, #0
    564c:	b.n	55e2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x16>
    564e:	nop
    5650:	.word	0x0010ff7f

00005654 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    5654:	push	{r0, r1, r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
    5656:	ldrb	r3, [r0, #0]
bool FsCache::sync() {
    5658:	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    565a:	lsls	r2, r3, #31
    565c:	bpl.n	569e <FsCache::sync()+0x4a>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    565e:	ldr	r0, [r0, #4]
    5660:	add.w	r2, r4, #16
    5664:	ldr	r1, [r4, #12]
    5666:	ldr	r3, [r0, #0]
    5668:	str	r2, [sp, #4]
    566a:	ldr	r3, [r3, #36]	; 0x24
    566c:	blx	r3
    566e:	ldr	r2, [sp, #4]
    5670:	mov	r5, r0
    5672:	cbnz	r0, 567c <FsCache::sync()+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    5674:	movs	r5, #0
}
    5676:	mov	r0, r5
    5678:	add	sp, #8
    567a:	pop	{r4, r5, r6, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    567c:	ldrb	r3, [r4, #0]
    567e:	lsls	r3, r3, #30
    5680:	bmi.n	568c <FsCache::sync()+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
    5682:	ldrb	r3, [r4, #0]
    5684:	bic.w	r3, r3, #1
    5688:	strb	r3, [r4, #0]
    568a:	b.n	5676 <FsCache::sync()+0x22>
      uint32_t sector = m_sector + m_mirrorOffset;
    568c:	adds	r0, r4, #4
    568e:	ldmia	r0, {r0, r1, r6}
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    5690:	ldr	r3, [r0, #0]
    5692:	add	r1, r6
    5694:	ldr	r3, [r3, #36]	; 0x24
    5696:	blx	r3
    5698:	cmp	r0, #0
    569a:	bne.n	5682 <FsCache::sync()+0x2e>
    569c:	b.n	5674 <FsCache::sync()+0x20>
  return true;
    569e:	movs	r5, #1
    56a0:	b.n	5676 <FsCache::sync()+0x22>

000056a2 <FsCache::prepare(unsigned long, unsigned char)>:
  if (!m_blockDev) {
    56a2:	ldr	r3, [r0, #4]
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
    56a4:	push	{r4, r5, r6, lr}
    56a6:	mov	r4, r0
    56a8:	mov	r6, r1
    56aa:	mov	r5, r2
  if (!m_blockDev) {
    56ac:	cbnz	r3, 56b2 <FsCache::prepare(unsigned long, unsigned char)+0x10>
  return nullptr;
    56ae:	movs	r0, #0
}
    56b0:	pop	{r4, r5, r6, pc}
  if (m_sector != sector) {
    56b2:	ldr	r3, [r0, #12]
    56b4:	cmp	r3, r1
    56b6:	beq.n	56ca <FsCache::prepare(unsigned long, unsigned char)+0x28>
    if (!sync()) {
    56b8:	bl	5654 <FsCache::sync()>
    56bc:	cmp	r0, #0
    56be:	beq.n	56ae <FsCache::prepare(unsigned long, unsigned char)+0xc>
    if (!(option & CACHE_OPTION_NO_READ)) {
    56c0:	lsls	r3, r5, #29
    56c2:	bpl.n	56da <FsCache::prepare(unsigned long, unsigned char)+0x38>
    m_status = 0;
    56c4:	movs	r3, #0
    m_sector = sector;
    56c6:	str	r6, [r4, #12]
    m_status = 0;
    56c8:	strb	r3, [r4, #0]
  m_status |= option & CACHE_STATUS_MASK;
    56ca:	ldrb	r3, [r4, #0]
    56cc:	and.w	r5, r5, #3
    56d0:	mov	r0, r4
    56d2:	orrs	r3, r5
    56d4:	strb.w	r3, [r0], #16
  return m_buffer;
    56d8:	b.n	56b0 <FsCache::prepare(unsigned long, unsigned char)+0xe>
      if (!m_blockDev->readSector(sector, m_buffer)) {
    56da:	ldr	r0, [r4, #4]
    56dc:	add.w	r2, r4, #16
    56e0:	mov	r1, r6
    56e2:	ldr	r3, [r0, #0]
    56e4:	ldr	r3, [r3, #16]
    56e6:	blx	r3
    56e8:	cmp	r0, #0
    56ea:	bne.n	56c4 <FsCache::prepare(unsigned long, unsigned char)+0x22>
    56ec:	b.n	56ae <FsCache::prepare(unsigned long, unsigned char)+0xc>
	...

000056f0 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
    56f0:	cmp	r0, #126	; 0x7e
uint16_t toUpcase(uint16_t chr) {
    56f2:	push	{r4, r5, lr}
  if (chr < 127) {
    56f4:	bhi.n	5746 <toUpcase(unsigned short)+0x56>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
    56f6:	sub.w	r3, r0, #97	; 0x61
    56fa:	cmp	r3, #25
    56fc:	ite	hi
    56fe:	movhi	r3, #0
    5700:	movls	r3, #1
    5702:	sub.w	r3, r0, r3, lsl #5
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    int8_t off = readTable8(mapTable[i].off);
    if (off == 1) {
      return chr - ((chr - first) & 1);
    5706:	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
    5708:	pop	{r4, r5, pc}
    mid = left + (right - left)/2;
    570a:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    570e:	ldrh.w	r5, [r1, r2, lsl #2]
    5712:	cmp	r5, r0
    mid = left + (right - left)/2;
    5714:	ite	hi
    5716:	movhi	r4, r2
    5718:	movls	r3, r2
  while (right - left > 1) {
    571a:	subs	r2, r4, r3
    571c:	cmp	r2, #1
    571e:	bhi.n	570a <toUpcase(unsigned short)+0x1a>
  first = readTable16(mapTable[i].base);
    5720:	uxth	r2, r3
    5722:	ldrh.w	r3, [r1, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
    5726:	cmp	r0, r3
    5728:	bcc.n	5786 <toUpcase(unsigned short)+0x96>
    572a:	add.w	r1, r1, r2, lsl #2
    572e:	subs	r3, r0, r3
    5730:	ldrb	r2, [r1, #3]
    5732:	cmp	r3, r2
    5734:	bge.n	5786 <toUpcase(unsigned short)+0x96>
    int8_t off = readTable8(mapTable[i].off);
    5736:	ldrsb.w	r2, [r1, #2]
    if (off == 1) {
    573a:	cmp	r2, #1
    573c:	bne.n	574e <toUpcase(unsigned short)+0x5e>
      return chr - ((chr - first) & 1);
    573e:	and.w	r3, r3, #1
    5742:	subs	r3, r0, r3
    5744:	b.n	5706 <toUpcase(unsigned short)+0x16>
  size_t right = size;
    5746:	movs	r4, #53	; 0x35
  size_t left = 0;
    5748:	movs	r3, #0
    574a:	ldr	r1, [pc, #68]	; (5790 <toUpcase(unsigned short)+0xa0>)
    574c:	b.n	571a <toUpcase(unsigned short)+0x2a>
    return chr + (off ? off : -0x1C60);
    574e:	cbz	r2, 5758 <toUpcase(unsigned short)+0x68>
    5750:	uxth	r2, r2
    5752:	add	r2, r0
    5754:	uxth	r0, r2
    5756:	b.n	5708 <toUpcase(unsigned short)+0x18>
    5758:	movw	r2, #58272	; 0xe3a0
    575c:	b.n	5752 <toUpcase(unsigned short)+0x62>
    mid = left + (right - left)/2;
    575e:	add.w	r2, r3, r2, lsr #1
    if (readTable16(table[mid].key) <= key) {
    5762:	ldrh.w	r5, [r1, r2, lsl #2]
    5766:	cmp	r5, r0
    mid = left + (right - left)/2;
    5768:	ite	hi
    576a:	movhi	r4, r2
    576c:	movls	r3, r2
  while (right - left > 1) {
    576e:	subs	r2, r4, r3
    5770:	cmp	r2, #1
    5772:	bhi.n	575e <toUpcase(unsigned short)+0x6e>
  if (readTable16(lookupTable[i].key) == chr) {
    5774:	uxth	r3, r3
    5776:	ldrh.w	r2, [r1, r3, lsl #2]
    577a:	cmp	r2, r0
    return readTable16(lookupTable[i].val);
    577c:	itt	eq
    577e:	addeq.w	r1, r1, r3, lsl #2
    5782:	ldrheq	r0, [r1, #2]
    5784:	b.n	5708 <toUpcase(unsigned short)+0x18>
    5786:	movs	r4, #75	; 0x4b
    5788:	movs	r3, #0
    578a:	ldr	r1, [pc, #8]	; (5794 <toUpcase(unsigned short)+0xa4>)
    578c:	b.n	576e <toUpcase(unsigned short)+0x7e>
    578e:	nop
    5790:	.word	0x20000b98
    5794:	.word	0x20000a30

00005798 <FsName::get16()>:
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
  uint16_t rtn;
  if (ls) {
    5798:	ldrh	r3, [r0, #12]
uint16_t FsName::get16() {
    579a:	push	{r0, r1, r4, lr}
    579c:	mov	r4, r0
  if (ls) {
    579e:	cbz	r3, 57aa <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
    57a0:	movs	r2, #0
    57a2:	strh	r2, [r0, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
    57a4:	mov	r0, r3
    57a6:	add	sp, #8
    57a8:	pop	{r4, pc}
  } else if (next >= end) {
    57aa:	ldrd	r0, r1, [r0, #4]
    57ae:	cmp	r0, r1
    57b0:	bcs.n	57a4 <FsName::get16()+0xc>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
    57b2:	add	r2, sp, #4
    57b4:	bl	55cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
    57b8:	cbnz	r0, 57c0 <FsName::get16()+0x28>
  return 0XFFFF;
    57ba:	movw	r3, #65535	; 0xffff
    57be:	b.n	57a4 <FsName::get16()+0xc>
    if (cp <= 0XFFFF) {
    57c0:	ldr	r2, [sp, #4]
    next = ptr;
    57c2:	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
    57c4:	cmp.w	r2, #65536	; 0x10000
      rtn = cp;
    57c8:	uxth	r3, r2
    if (cp <= 0XFFFF) {
    57ca:	bcc.n	57a4 <FsName::get16()+0xc>
    return (cp & 0X3FF) + 0XDC00;
    57cc:	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    57d0:	lsrs	r2, r2, #10
    return (cp & 0X3FF) + 0XDC00;
    57d2:	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
    57d6:	sub.w	r2, r2, #10304	; 0x2840
      ls = FsUtf::lowSurrogate(cp);
    57da:	strh	r3, [r4, #12]
    57dc:	uxth	r3, r2
    57de:	b.n	57a4 <FsName::get16()+0xc>

000057e0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    57e0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57e4:	mov	r6, r2
    57e6:	mov	r5, r1
    57e8:	add.w	r8, r1, #30
  /** \return next UTF-16 unit of LFN. */
  uint16_t get16() {return atEnd() ? 0 : *next++;}
#else  // !USE_UTF8_LONG_NAMES
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
    57ec:	ldrh	r3, [r6, #12]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    57ee:	ldrh.w	r4, [r5, #2]!
    57f2:	cbnz	r3, 5806 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
    57f4:	ldrd	r2, r3, [r6, #4]
    57f8:	cmp	r2, r3
    57fa:	bne.n	5806 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x26>
      return u == 0;
    57fc:	clz	r0, r4
    5800:	lsrs	r0, r0, #5
}
    5802:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint16_t cp = fname->get16();
    5806:	mov	r0, r6
    5808:	bl	5798 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    580c:	bl	56f0 <toUpcase(unsigned short)>
    5810:	mov	r7, r0
    5812:	mov	r0, r4
    5814:	bl	56f0 <toUpcase(unsigned short)>
    5818:	cmp	r7, r0
    581a:	bne.n	5824 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  for (uint8_t i = 0; i < 15; i++) {
    581c:	cmp	r5, r8
    581e:	bne.n	57ec <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    5820:	movs	r0, #1
    5822:	b.n	5802 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>
       return false;
    5824:	movs	r0, #0
    5826:	b.n	5802 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x22>

00005828 <ExFatFile::getName8(char*, unsigned int)>:
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    5828:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    582c:	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    5830:	mov	sl, r0
    5832:	mov	r8, r1
  if (!isOpen()) {
    5834:	cmp	r3, #0
    5836:	beq.n	58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5838:	subs	r2, #1
  char* str = name;
    583a:	mov	r4, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    583c:	mov.w	r9, #2
  uint16_t hs = 0;
    5840:	movs	r5, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5842:	adds	r7, r1, r2
  for (uint8_t is = 2; is <= m_setCount; is++) {
    5844:	ldrb.w	r3, [sl, #48]	; 0x30
    5848:	cmp	r3, r9
    584a:	bcc.n	58b4 <ExFatFile::getName8(char*, unsigned int)+0x8c>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    584c:	movs	r2, #0
    584e:	mov	r1, r9
    5850:	mov	r0, sl
    5852:	bl	593a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    5856:	cbz	r0, 58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5858:	ldrb	r3, [r0, #0]
    585a:	cmp	r3, #193	; 0xc1
    585c:	bne.n	58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
    585e:	mov	r6, r0
    5860:	add.w	fp, r0, #30
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5864:	ldr	r3, [pc, #108]	; (58d4 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    5866:	ldrh.w	r0, [r6, #2]!
      if (hs) {
    586a:	cbz	r5, 58a4 <ExFatFile::getName8(char*, unsigned int)+0x7c>
    return 0XDC00 <= c && c <= 0XDFFF;
    586c:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    5870:	uxth	r2, r2
    5872:	cmp.w	r2, #1024	; 0x400
    5876:	bcs.n	58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    5878:	and.w	r5, r3, r5, lsl #10
    587c:	ubfx	r0, r0, #0, #10
    5880:	orrs	r0, r5
    5882:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    5886:	mov	r1, r4
    5888:	mov	r2, r7
    588a:	bl	5538 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    588e:	mov	r4, r0
    5890:	cbz	r0, 58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
    5892:	movs	r5, #0
    5894:	ldr	r3, [pc, #60]	; (58d4 <ExFatFile::getName8(char*, unsigned int)+0xac>)
    for (uint8_t in = 0; in < 15; in++) {
    5896:	cmp	fp, r6
    5898:	bne.n	5866 <ExFatFile::getName8(char*, unsigned int)+0x3e>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    589a:	add.w	r9, r9, #1
    589e:	uxtb.w	r9, r9
    58a2:	b.n	5844 <ExFatFile::getName8(char*, unsigned int)+0x1c>
    return 0XD800 <= c && c <= 0XDFFF;
    58a4:	add.w	r2, r0, #10240	; 0x2800
    58a8:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    58aa:	cmp.w	r2, #2048	; 0x800
    58ae:	bcc.n	58c0 <ExFatFile::getName8(char*, unsigned int)+0x98>
        if (c == 0) {
    58b0:	cmp	r0, #0
    58b2:	bne.n	5886 <ExFatFile::getName8(char*, unsigned int)+0x5e>
      }
      str = ptr;
    }
  }
 done:
  *str = '\0';
    58b4:	movs	r3, #0
  return str - name;
    58b6:	sub.w	r0, r4, r8
  *str = '\0';
    58ba:	strb	r3, [r4, #0]

 fail:
  *name = 0;
  return 0;
}
    58bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      } else if (FsUtf::isHighSurrogate(c)) {
    58c0:	cmp.w	r2, #1024	; 0x400
    58c4:	bcs.n	58ca <ExFatFile::getName8(char*, unsigned int)+0xa2>
    58c6:	mov	r5, r0
    58c8:	b.n	5896 <ExFatFile::getName8(char*, unsigned int)+0x6e>
  *name = 0;
    58ca:	movs	r0, #0
    58cc:	strb.w	r0, [r8]
  return 0;
    58d0:	b.n	58bc <ExFatFile::getName8(char*, unsigned int)+0x94>
    58d2:	nop
    58d4:	.word	0x000ffc00

000058d8 <ExFatFile::hashName(ExName_t*)>:
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    58d8:	movs	r0, #0
    next = begin;
    58da:	ldr	r3, [r1, #0]
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    58dc:	push	{r4, r5, r6, lr}
    58de:	mov	r4, r1
  uint16_t hash = 0;
    58e0:	mov	r6, r0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    58e2:	movw	r5, #65535	; 0xffff
    58e6:	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
    58e8:	strh	r0, [r1, #12]
    return !ls && next == end;
    58ea:	ldrh	r3, [r4, #12]
  fname->nameLength = 0;
    58ec:	str	r0, [r4, #16]
    58ee:	cbnz	r3, 592c <ExFatFile::hashName(ExName_t*)+0x54>
    58f0:	ldrd	r2, r3, [r4, #4]
    58f4:	cmp	r2, r3
    58f6:	bne.n	592c <ExFatFile::hashName(ExName_t*)+0x54>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    58f8:	subs	r0, #1
  fname->nameHash = hash;
    58fa:	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    58fc:	cmp	r0, #254	; 0xfe
    58fe:	ite	hi
    5900:	movhi	r0, #0
    5902:	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    5904:	pop	{r4, r5, r6, pc}
  uint16_t c = toUpcase(u);
    5906:	bl	56f0 <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    590a:	lsls	r3, r6, #15
    590c:	orr.w	r3, r3, r6, lsr #1
    5910:	uxtab	r3, r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5914:	lsrs	r0, r0, #8
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    5916:	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5918:	ubfx	r3, r3, #1, #15
    591c:	orr.w	r3, r3, r2, lsl #15
    5920:	uxtah	r3, r0, r3
    fname->nameLength++;
    5924:	ldr	r0, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    5926:	uxth	r6, r3
    fname->nameLength++;
    5928:	adds	r0, #1
    592a:	b.n	58ea <ExFatFile::hashName(ExName_t*)+0x12>
    uint16_t u = fname->get16();
    592c:	mov	r0, r4
    592e:	bl	5798 <FsName::get16()>
    if (u == 0XFFFF) {
    5932:	cmp	r0, r5
    5934:	bne.n	5906 <ExFatFile::hashName(ExName_t*)+0x2e>
  return false;
    5936:	movs	r0, #0
    5938:	b.n	5904 <ExFatFile::hashName(ExName_t*)+0x2c>

0000593a <ExFatFile::dirCache(unsigned char, unsigned char)>:
#else  // USE_UTF8_LONG_NAMES
  return !(lfnReservedChar(c) || c & 0X80);
#endif  // USE_UTF8_LONG_NAMES
}
//------------------------------------------------------------------------------
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    593a:	push	{r4, r5, r6, r7, lr}
  DirPos_t pos = m_dirPos;
    593c:	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5940:	sub	sp, #20
    5942:	mov	r4, r0
    5944:	mov	r7, r1
  DirPos_t pos = m_dirPos;
    5946:	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    5948:	mov	r6, r2
  DirPos_t pos = m_dirPos;
    594a:	ldmia.w	r3, {r0, r1, r2}
    594e:	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    5952:	lsls	r2, r7, #5
    5954:	mov	r1, r5
    5956:	ldr	r0, [r4, #32]
    5958:	bl	632e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    595c:	cmp	r0, #1
    595e:	bne.n	596e <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
    return nullptr;
  }
  return m_vol->dirCache(&pos, options);
    5960:	mov	r2, r6
    5962:	mov	r1, r5
    5964:	ldr	r0, [r4, #32]
    5966:	bl	6294 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    596a:	add	sp, #20
    596c:	pop	{r4, r5, r6, r7, pc}
    return nullptr;
    596e:	movs	r0, #0
    5970:	b.n	596a <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

00005972 <ExFatFile::close()>:
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    5972:	push	{r4, lr}
    5974:	mov	r4, r0
  bool rtn = sync();
    5976:	bl	6850 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    597a:	movs	r3, #0
    597c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    5980:	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    5984:	pop	{r4, pc}

00005986 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    5986:	push	{r3, r4, r5, lr}
    5988:	mov	r5, r1
    598a:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    598c:	add.w	r1, r0, #36	; 0x24
    5990:	movs	r2, #0
    5992:	ldr	r0, [r0, #32]
    5994:	bl	6294 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5998:	cbz	r0, 59a4 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>
    599a:	ldrh	r3, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    599c:	strh	r3, [r5, #0]
    599e:	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
  return true;
    59a0:	movs	r0, #1
  *ptime = getLe16(df->createTime);
    59a2:	strh	r3, [r4, #0]

 fail:
  return false;
}
    59a4:	pop	{r3, r4, r5, pc}

000059a6 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    59a6:	push	{r3, r4, r5, lr}
    59a8:	mov	r5, r1
    59aa:	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    59ac:	add.w	r1, r0, #36	; 0x24
    59b0:	movs	r2, #0
    59b2:	ldr	r0, [r0, #32]
    59b4:	bl	6294 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    59b8:	cbz	r0, 59c4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>
    59ba:	ldrh	r3, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    59bc:	strh	r3, [r5, #0]
    59be:	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
  return true;
    59c0:	movs	r0, #1
  *ptime = getLe16(df->modifyTime);
    59c2:	strh	r3, [r4, #0]

 fail:
  return false;
}
    59c4:	pop	{r3, r4, r5, pc}

000059c6 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    59c6:	push	{r3, r4, r5, lr}
    59c8:	mov	r5, r1
  if (isOpen()) {
    59ca:	ldrb.w	r1, [r0, #49]	; 0x31
bool ExFatFile::openRoot(ExFatVolume* vol) {
    59ce:	mov	r4, r0
  if (isOpen()) {
    59d0:	cbnz	r1, 59e8 <ExFatFile::openRoot(ExFatVolume*)+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    59d2:	movs	r2, #56	; 0x38
    59d4:	bl	a210 <memset>
  m_attributes = FILE_ATTR_ROOT;
    59d8:	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    59da:	movs	r0, #1
  m_vol = vol;
    59dc:	str	r5, [r4, #32]
  m_attributes = FILE_ATTR_ROOT;
    59de:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ;
    59e2:	strb.w	r0, [r4, #51]	; 0x33
  return true;

 fail:
  return false;
}
    59e6:	pop	{r3, r4, r5, pc}
  return false;
    59e8:	movs	r0, #0
    59ea:	b.n	59e6 <ExFatFile::openRoot(ExFatVolume*)+0x20>

000059ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    59ec:	push	{r4, r5, r6, r7}
  // Skip leading spaces.
  while (*path == ' ') {
    59ee:	mov	r5, r1
    59f0:	ldrb.w	r4, [r1], #1
    59f4:	cmp	r4, #32
    59f6:	beq.n	59ee <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2>
    path++;
  }
  fname->begin = path;
    59f8:	ldr	r7, [pc, #108]	; (5a68 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7c>)
    59fa:	str	r5, [r2, #0]
  fname->end = path;
    59fc:	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    59fe:	mov	r6, r5
    5a00:	ldrb.w	r4, [r6], #1
    5a04:	cbz	r4, 5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5a06:	cmp	r4, #47	; 0x2f
    5a08:	bne.n	5a22 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    5a0a:	mov	r4, r5
      // Need to trim trailing dots spaces.
      fname->end = path;
    }
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    5a0c:	ldrb.w	r1, [r5], #1
    5a10:	cmp	r1, #32
    5a12:	beq.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
    5a14:	cmp	r1, #47	; 0x2f
    5a16:	beq.n	5a0a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x1e>
  *ptr = path;
    5a18:	str	r4, [r3, #0]
  return hashName(fname);
    5a1a:	mov	r1, r2

 fail:
  return false;
}
    5a1c:	pop	{r4, r5, r6, r7}
  return hashName(fname);
    5a1e:	b.w	58d8 <ExFatFile::hashName(ExName_t*)>
    if (!lfnLegalChar(c)) {
    5a22:	cmp	r4, #60	; 0x3c
    5a24:	bhi.n	5a4c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x60>
    5a26:	cmp	r4, #33	; 0x21
    5a28:	bhi.n	5a38 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    5a2a:	subs	r1, r4, #1
    5a2c:	cmp	r1, #30
    5a2e:	bls.n	5a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    if (c != '.' && c != ' ') {
    5a30:	cmp	r4, #32
    5a32:	bne.n	5a58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
                            ExName_t* fname, const char** ptr) {
    5a34:	mov	r5, r6
    5a36:	b.n	59fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    5a38:	sub.w	r1, r4, #34	; 0x22
    5a3c:	uxtb	r1, r1
    5a3e:	lsr.w	r1, r7, r1
    5a42:	lsls	r1, r1, #31
    5a44:	bpl.n	5a62 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x76>
}
    5a46:	movs	r0, #0
    5a48:	pop	{r4, r5, r6, r7}
    5a4a:	bx	lr
    5a4c:	cmp	r4, #92	; 0x5c
    5a4e:	beq.n	5a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5a50:	bhi.n	5a5c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x70>
    5a52:	subs	r4, #62	; 0x3e
    5a54:	cmp	r4, #1
    5a56:	bls.n	5a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
      fname->end = path;
    5a58:	str	r6, [r2, #8]
    5a5a:	b.n	5a34 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    5a5c:	cmp	r4, #124	; 0x7c
    5a5e:	beq.n	5a46 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x5a>
    5a60:	b.n	5a58 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    if (c != '.' && c != ' ') {
    5a62:	cmp	r4, #46	; 0x2e
    5a64:	b.n	5a32 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x46>
    5a66:	nop
    5a68:	.word	0x05002101

00005a6c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    5a6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a70:	vpush	{d8}
  /** \return True if file is read-only */
  bool isReadOnly() const {return m_attributes & FILE_ATTR_READ_ONLY;}
  /** \return True if this is the root directory. */
  bool isRoot() const {return m_attributes & FILE_ATTR_ROOT;}
  /** \return True file is readable. */
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    5a74:	ldrb.w	r3, [r0, #51]	; 0x33
    5a78:	sub	sp, #12
    5a7a:	mov	r4, r0
    5a7c:	mov	r9, r1
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    5a7e:	lsls	r5, r3, #31
int ExFatFile::read(void* buf, size_t count) {
    5a80:	mov	r6, r2
  if (!isReadable()) {
    5a82:	bpl.n	5b4c <ExFatFile::read(void*, unsigned int)+0xe0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    5a84:	lsls	r0, r3, #25
    5a86:	bmi.n	5a90 <ExFatFile::read(void*, unsigned int)+0x24>
    5a88:	ldrb.w	r3, [r4, #49]	; 0x31
    5a8c:	lsls	r1, r3, #28
    5a8e:	bpl.n	5aa8 <ExFatFile::read(void*, unsigned int)+0x3c>
    if ((m_curPosition + count) > m_validLength) {
    5a90:	ldrd	r2, r3, [r4]
    5a94:	ldrd	r1, r0, [r4, #16]
    5a98:	adds	r5, r6, r2
    5a9a:	adc.w	r3, r3, #0
    5a9e:	cmp	r1, r5
    5aa0:	sbcs.w	r3, r0, r3
    5aa4:	bcs.n	5aa8 <ExFatFile::read(void*, unsigned int)+0x3c>
      count = toRead = m_validLength - m_curPosition;
    5aa6:	subs	r6, r1, r2
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5aa8:	add.w	r3, r4, #24
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5aac:	mov	r8, r6
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5aae:	vmov	s16, r3
    5ab2:	b.n	5b98 <ExFatFile::read(void*, unsigned int)+0x12c>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5ab4:	ldr	r0, [r4, #32]
    5ab6:	ldrd	r3, r2, [r4]
    5aba:	ldr.w	r7, [r0, #1080]	; 0x438
    5abe:	ands	r7, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    5ac0:	ubfx	sl, r7, #0, #9
    if (clusterOffset == 0) {
    5ac4:	cbnz	r7, 5ada <ExFatFile::read(void*, unsigned int)+0x6e>
      if (m_curPosition == 0) {
    5ac6:	orrs	r3, r2
    5ac8:	bne.n	5b24 <ExFatFile::read(void*, unsigned int)+0xb8>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5aca:	ldrb.w	r3, [r4, #49]	; 0x31
    5ace:	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5ad0:	ite	mi
    5ad2:	ldrmi.w	r3, [r0, #1076]	; 0x434
    5ad6:	ldrpl	r3, [r4, #28]
        m_curCluster = isRoot()
    5ad8:	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    5ada:	ldr.w	fp, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    5ade:	lsrs	r0, r7, #9
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    5ae0:	ldr	r2, [r4, #24]
    5ae2:	ldrb.w	r1, [fp, #1093]	; 0x445
    5ae6:	subs	r5, r2, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    5ae8:	ldr.w	r2, [fp, #1068]	; 0x42c
    5aec:	lsls	r5, r1
    5aee:	add.w	r5, r5, r7, lsr #9
    5af2:	add	r5, r2
                          || sector == m_vol->dataCacheSector()) {
    5af4:	cmp.w	sl, #0
    5af8:	bne.n	5b5e <ExFatFile::read(void*, unsigned int)+0xf2>
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    5afa:	cmp.w	r8, #512	; 0x200
    5afe:	bcc.n	5b5e <ExFatFile::read(void*, unsigned int)+0xf2>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    5b00:	ldr.w	r2, [fp, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    5b04:	cmp	r5, r2
    5b06:	beq.n	5b5e <ExFatFile::read(void*, unsigned int)+0xf2>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5b08:	cmp.w	r8, #1024	; 0x400
    5b0c:	bcs.n	5bac <ExFatFile::read(void*, unsigned int)+0x140>
    return m_blockDev->readSector(sector, dst);
    5b0e:	ldr.w	r0, [fp, #532]	; 0x214
    5b12:	mov	r2, r9
    5b14:	mov	r1, r5
    5b16:	ldr	r3, [r0, #0]
    5b18:	ldr	r3, [r3, #16]
    5b1a:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5b1c:	cbz	r0, 5b4c <ExFatFile::read(void*, unsigned int)+0xe0>
      n = m_vol->bytesPerSector();
    5b1e:	mov.w	r7, #512	; 0x200
    5b22:	b.n	5b84 <ExFatFile::read(void*, unsigned int)+0x118>
      } else if (isContiguous()) {
    5b24:	ldrb.w	r3, [r4, #51]	; 0x33
        m_curCluster++;
    5b28:	ldr	r1, [r4, #24]
      } else if (isContiguous()) {
    5b2a:	lsls	r3, r3, #25
    5b2c:	bpl.n	5b34 <ExFatFile::read(void*, unsigned int)+0xc8>
        m_curCluster++;
    5b2e:	adds	r1, #1
    5b30:	str	r1, [r4, #24]
    5b32:	b.n	5ada <ExFatFile::read(void*, unsigned int)+0x6e>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5b34:	vmov	r2, s16
    5b38:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    5b3c:	cmp	r0, #0
    5b3e:	blt.n	5b4c <ExFatFile::read(void*, unsigned int)+0xe0>
        if (fg == 0) {
    5b40:	bne.n	5ada <ExFatFile::read(void*, unsigned int)+0x6e>
          if (isDir()) {
    5b42:	ldrb.w	r3, [r4, #49]	; 0x31
    5b46:	tst.w	r3, #80	; 0x50
    5b4a:	bne.n	5b9e <ExFatFile::read(void*, unsigned int)+0x132>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    5b4c:	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    5b50:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    5b54:	orr.w	r3, r3, #2
    5b58:	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    5b5c:	b.n	5ba2 <ExFatFile::read(void*, unsigned int)+0x136>
      n = m_vol->bytesPerSector() - sectorOffset;
    5b5e:	rsb	r7, sl, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    5b62:	movs	r2, #0
    5b64:	mov	r1, r5
    5b66:	add.w	r0, fp, #528	; 0x210
    5b6a:	cmp	r7, r8
    5b6c:	it	cs
    5b6e:	movcs	r7, r8
    5b70:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    5b74:	cmp	r0, #0
    5b76:	beq.n	5b4c <ExFatFile::read(void*, unsigned int)+0xe0>
      memcpy(dst, src, n);
    5b78:	add.w	r1, r0, sl
    5b7c:	mov	r2, r7
    5b7e:	mov	r0, r9
    5b80:	bl	a254 <memcpy>
    dst += n;
    5b84:	add	r9, r7
    toRead -= n;
    5b86:	sub.w	r8, r8, r7
    m_curPosition += n;
    5b8a:	ldrd	r3, r2, [r4]
    5b8e:	adds	r3, r3, r7
    5b90:	adc.w	r2, r2, #0
    5b94:	strd	r3, r2, [r4]
  while (toRead) {
    5b98:	cmp.w	r8, #0
    5b9c:	bne.n	5ab4 <ExFatFile::read(void*, unsigned int)+0x48>
  return count - toRead;
    5b9e:	sub.w	r0, r6, r8
}
    5ba2:	add	sp, #12
    5ba4:	vpop	{d8}
    5ba8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    5bac:	movs	r3, #1
    5bae:	lsls	r3, r1
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5bb0:	mov.w	r1, r8, lsr #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    5bb4:	subs	r3, r3, r0
    5bb6:	cmp	r3, r1
    5bb8:	it	cs
    5bba:	movcs	r3, r1
    return sector <= m_sector && m_sector < (sector + count);
    5bbc:	cmp	r5, r2
      n = ns << m_vol->bytesPerSectorShift();
    5bbe:	mov.w	r7, r3, lsl #9
    5bc2:	bls.n	5bda <ExFatFile::read(void*, unsigned int)+0x16e>
    return m_blockDev->readSectors(sector, dst, count);
    5bc4:	ldr.w	r0, [fp, #532]	; 0x214
    5bc8:	mov	r1, r5
    5bca:	ldr	r2, [r0, #0]
    5bcc:	ldr.w	fp, [r2, #20]
    5bd0:	mov	r2, r9
    5bd2:	blx	fp
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5bd4:	cmp	r0, #0
    5bd6:	bne.n	5b84 <ExFatFile::read(void*, unsigned int)+0x118>
    5bd8:	b.n	5b4c <ExFatFile::read(void*, unsigned int)+0xe0>
    return sector <= m_sector && m_sector < (sector + count);
    5bda:	adds	r1, r5, r3
    5bdc:	cmp	r2, r1
    5bde:	bcs.n	5bc4 <ExFatFile::read(void*, unsigned int)+0x158>
    if (isCached(sector, count) && !sync()) {
    5be0:	add.w	r0, fp, #528	; 0x210
    5be4:	str	r3, [sp, #4]
    5be6:	bl	5654 <FsCache::sync()>
    5bea:	ldr	r3, [sp, #4]
    5bec:	cmp	r0, #0
    5bee:	bne.n	5bc4 <ExFatFile::read(void*, unsigned int)+0x158>
    5bf0:	b.n	5b4c <ExFatFile::read(void*, unsigned int)+0xe0>

00005bf2 <ExFatFile::peek()>:
int ExFatFile::peek() {
    5bf2:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5bf4:	movs	r2, #1
    5bf6:	add.w	r1, sp, #7
    5bfa:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    5bfc:	ldr	r5, [r0, #24]
  uint64_t curPosition = m_curPosition;
    5bfe:	ldrd	r6, r7, [r0]
    5c02:	bl	5a6c <ExFatFile::read(void*, unsigned int)>
    5c06:	cmp	r0, #1
  m_curCluster = curCluster;
    5c08:	str	r5, [r4, #24]
    5c0a:	ite	eq
    5c0c:	ldrbeq.w	r0, [sp, #7]
    5c10:	movne.w	r0, #4294967295
  m_curPosition = curPosition;
    5c14:	strd	r6, r7, [r4]
}
    5c18:	add	sp, #12
    5c1a:	pop	{r4, r5, r6, r7, pc}

00005c1c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    5c1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isOpen() const {return m_attributes;}
    5c20:	ldrb.w	ip, [r0, #49]	; 0x31
    5c24:	mov	r4, r0
    5c26:	mov	r6, r2
    5c28:	mov	r7, r3
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    5c2a:	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    5c2e:	cmp.w	ip, #0
    5c32:	beq.n	5cec <ExFatFile::seekSet(unsigned long long)+0xd0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    5c34:	ldrd	r0, r3, [r0]
    5c38:	cmp	r3, r7
    5c3a:	it	eq
    5c3c:	cmpeq	r0, r2
    5c3e:	beq.n	5c4e <ExFatFile::seekSet(unsigned long long)+0x32>
    return true;
  }
  if (pos == 0) {
    5c40:	orrs.w	r2, r6, r7
    5c44:	bne.n	5c52 <ExFatFile::seekSet(unsigned long long)+0x36>
    // set position to start of file
    m_curCluster = 0;
    5c46:	movs	r3, #0
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    5c48:	str	r3, [r4, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    5c4a:	strd	r6, r7, [r4]
    return true;
    5c4e:	movs	r0, #1
    5c50:	b.n	5cf2 <ExFatFile::seekSet(unsigned long long)+0xd6>
  if (isFile()) {
    5c52:	tst.w	ip, #8
    5c56:	beq.n	5c62 <ExFatFile::seekSet(unsigned long long)+0x46>
    if (pos > m_validLength) {
    5c58:	ldrd	r1, r2, [r4, #16]
    5c5c:	cmp	r1, r6
    5c5e:	sbcs	r2, r7
    5c60:	bcc.n	5cec <ExFatFile::seekSet(unsigned long long)+0xd0>
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    5c62:	ldr.w	lr, [r4, #32]
    5c66:	subs	r5, r6, #1
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    5c68:	ldrb.w	r1, [lr, #1093]	; 0x445
    5c6c:	adc.w	sl, r7, #4294967295
    5c70:	adds	r1, #9
    5c72:	uxtb	r1, r1
    5c74:	rsb	r9, r1, #32
    5c78:	sub.w	r2, r1, #32
    5c7c:	lsrs	r5, r1
    5c7e:	lsl.w	r9, sl, r9
    5c82:	lsr.w	r2, sl, r2
    5c86:	sub.w	sl, r1, #32
    5c8a:	orr.w	r5, r5, r9
    5c8e:	rsb	r9, r1, #32
    5c92:	orrs	r5, r2
  if (isContiguous()) {
    5c94:	ldrb.w	r2, [r4, #51]	; 0x33
    5c98:	tst.w	r2, #64	; 0x40
    5c9c:	beq.n	5ca4 <ExFatFile::seekSet(unsigned long long)+0x88>
    m_curCluster = m_firstCluster + nNew;
    5c9e:	ldr	r3, [r4, #28]
    5ca0:	add	r3, r5
    5ca2:	b.n	5c48 <ExFatFile::seekSet(unsigned long long)+0x2c>
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    5ca4:	adds.w	fp, r0, #4294967295
    5ca8:	adc.w	r2, r3, #4294967295
    5cac:	lsr.w	r1, fp, r1
    5cb0:	lsl.w	r9, r2, r9
    5cb4:	lsr.w	r2, r2, sl
    5cb8:	orr.w	r1, r1, r9
    5cbc:	orrs	r1, r2
  if (nNew < nCur || m_curPosition == 0) {
    5cbe:	cmp	r5, r1
    5cc0:	bcc.n	5cc6 <ExFatFile::seekSet(unsigned long long)+0xaa>
    5cc2:	orrs	r3, r0
    5cc4:	bne.n	5cf6 <ExFatFile::seekSet(unsigned long long)+0xda>
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    5cc6:	tst.w	ip, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    5cca:	ite	ne
    5ccc:	ldrne.w	r3, [lr, #1076]	; 0x434
    5cd0:	ldreq	r3, [r4, #28]
    5cd2:	str	r3, [r4, #24]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5cd4:	add.w	r9, r4, #24
  while (nNew--) {
    5cd8:	cmp	r5, #0
    5cda:	beq.n	5c4a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    5cdc:	mov	r2, r9
    5cde:	ldr	r1, [r4, #24]
    5ce0:	ldr	r0, [r4, #32]
    5ce2:	subs	r5, #1
    5ce4:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    5ce8:	cmp	r0, #0
    5cea:	bgt.n	5cd8 <ExFatFile::seekSet(unsigned long long)+0xbc>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    5cec:	movs	r0, #0
  m_curCluster = tmp;
    5cee:	str.w	r8, [r4, #24]
}
    5cf2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    5cf6:	subs	r5, r5, r1
    5cf8:	b.n	5cd4 <ExFatFile::seekSet(unsigned long long)+0xb8>
	...

00005cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    5cfc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d00:	mov	sl, r3
    5d02:	ldrb.w	r3, [r0, #49]	; 0x31
    5d06:	sub	sp, #52	; 0x34
    5d08:	mov	r4, r0
    5d0a:	mov	r6, r1
    5d0c:	mov	r5, r2
  if (isOpen() || !dir->isDir()) {
    5d0e:	cmp	r3, #0
    5d10:	bne.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5d12:	ldrb.w	r3, [r1, #49]	; 0x31
    5d16:	tst.w	r3, #80	; 0x50
    5d1a:	beq.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    5d1c:	and.w	r9, sl, #3
    5d20:	cmp.w	r9, #3
    5d24:	beq.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    5d26:	add.w	r9, r9, #1
    5d2a:	and.w	r3, sl, #8
    5d2e:	orr.w	r9, r9, r3
  if (fname) {
    5d32:	cmp	r2, #0
    5d34:	beq.n	5da8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xac>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    5d36:	ldr	r7, [r2, #16]
    5d38:	movs	r3, #15
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    5d3a:	movs	r2, #0
    5d3c:	mov	r0, r1
    5d3e:	adds	r7, #14
    5d40:	udiv	r7, r7, r3
    5d44:	adds	r7, #2
    5d46:	movs	r3, #0
    5d48:	uxtb	r7, r7
    5d4a:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    5d4e:	mov.w	fp, #0
    5d52:	mov	r8, fp
    n = dir->read(buf, FS_DIR_SIZE);
    5d54:	movs	r2, #32
    5d56:	add	r1, sp, #16
    5d58:	mov	r0, r6
    5d5a:	bl	5a6c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5d5e:	cmp	r0, #0
    5d60:	beq.w	5eea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
    if (n != FS_DIR_SIZE) {
    5d64:	cmp	r0, #32
    5d66:	bne.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (!(buf[0] & 0x80)) {
    5d68:	ldrsb.w	r1, [sp, #16]
    5d6c:	ldrb.w	r2, [sp, #16]
    5d70:	cmp	r1, #0
    5d72:	blt.n	5db2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (freeCount == 0) {
    5d74:	cmp.w	fp, #0
    5d78:	bne.n	5d86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8a>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5d7a:	ldr	r1, [r6, #0]
    5d7c:	sub.w	r3, r1, #32
    5d80:	str	r3, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    5d82:	ldr	r3, [r6, #24]
    5d84:	str	r3, [sp, #0]
      if (freeCount < freeNeed) {
    5d86:	cmp	fp, r7
        freeCount++;
    5d88:	itt	cc
    5d8a:	addcc.w	r3, fp, #1
    5d8e:	uxtbcc.w	fp, r3
      if (!buf[0]) {
    5d92:	cbnz	r2, 5dac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        if (fname) {
    5d94:	cmp	r5, #0
    5d96:	bne.w	5eea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ee>
  m_attributes = FILE_ATTR_CLOSED;
    5d9a:	mov.w	r8, #0
    5d9e:	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    5da2:	strb.w	r8, [r4, #51]	; 0x33
  return false;
    5da6:	b.n	5e7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
  uint8_t freeNeed = 3;
    5da8:	movs	r7, #3
    5daa:	b.n	5d4e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x52>
      inSet = false;
    5dac:	movs	r0, #0
    5dae:	mov	r8, r0
    5db0:	b.n	5d54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x58>
    } else if (!inSet) {
    5db2:	cmp.w	r8, #0
    5db6:	bne.n	5e08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10c>
        freeCount = 0;
    5db8:	cmp	fp, r7
    5dba:	it	cc
    5dbc:	movcc.w	fp, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    5dc0:	cmp	r2, #133	; 0x85
    5dc2:	bne.n	5dac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      memset(this, 0, sizeof(ExFatFile));
    5dc4:	movs	r2, #56	; 0x38
    5dc6:	mov	r1, r8
    5dc8:	mov	r0, r4
    5dca:	bl	a210 <memset>
      m_setCount = dirFile->setCount;
    5dce:	ldrb.w	r2, [sp, #17]
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5dd2:	ldrb.w	r1, [sp, #20]
      inSet = true;
    5dd6:	movs	r0, #1
      m_setCount = dirFile->setCount;
    5dd8:	strb.w	r2, [r4, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    5ddc:	and.w	r2, r1, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    5de0:	lsls	r1, r1, #27
        m_attributes |= FILE_ATTR_FILE;
    5de2:	it	pl
    5de4:	orrpl.w	r2, r2, #8
    5de8:	strb.w	r2, [r4, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    5dec:	ldr	r2, [r6, #32]
      m_vol = dir->volume();
    5dee:	str	r2, [r4, #32]
      m_dirPos.cluster = dir->curCluster();
    5df0:	ldr	r2, [r6, #24]
    5df2:	str	r2, [r4, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    5df4:	ldr	r2, [r6, #0]
    5df6:	subs	r2, #32
    5df8:	str	r2, [r4, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5dfa:	ldrb.w	r2, [r6, #51]	; 0x33
    5dfe:	ubfx	r2, r2, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    5e02:	strb.w	r2, [r4, #44]	; 0x2c
    5e06:	b.n	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    5e08:	cmp	r2, #192	; 0xc0
    5e0a:	bne.n	5eae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5e0c:	ldrb.w	r2, [sp, #17]
      m_flags = modeFlags;
    5e10:	strb.w	r9, [r4, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    5e14:	lsls	r3, r2, #30
      m_validLength = getLe64(dirStream->validLength);
    5e16:	ldrd	r0, r1, [sp, #24]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5e1a:	it	mi
    5e1c:	orrmi.w	r2, r9, #64	; 0x40
      m_validLength = getLe64(dirStream->validLength);
    5e20:	strd	r0, r1, [r4, #16]
        m_flags |= FILE_FLAG_CONTIGUOUS;
    5e24:	it	mi
    5e26:	strbmi.w	r2, [r4, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    5e2a:	ldr	r2, [sp, #36]	; 0x24
      m_dataLength = getLe64(dirStream->dataLength);
    5e2c:	ldrd	r0, r1, [sp, #40]	; 0x28
      m_firstCluster = getLe32(dirStream->firstCluster);
    5e30:	str	r2, [r4, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    5e32:	strd	r0, r1, [r4, #8]
      if (!fname) {
    5e36:	cbnz	r5, 5e86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x18a>
  if (oflag & O_EXCL) {
    5e38:	tst.w	sl, #2048	; 0x800
    5e3c:	bne.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    5e3e:	tst.w	sl, #17408	; 0x4400
    5e42:	bne.n	5e4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x150>
    5e44:	ldrb.w	r3, [r4, #51]	; 0x33
    5e48:	lsls	r0, r3, #30
    5e4a:	bpl.n	5e58 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15c>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    5e4c:	ldrb.w	r3, [r4, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    5e50:	lsls	r1, r3, #27
    5e52:	bmi.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5e54:	lsls	r2, r3, #31
    5e56:	bmi.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_TRUNC) {
    5e58:	tst.w	sl, #1024	; 0x400
    5e5c:	beq.n	5ed8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    5e5e:	ldrb.w	r3, [r4, #51]	; 0x33
    5e62:	lsls	r3, r3, #30
    5e64:	bpl.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    return seekSet(length) && truncate();
    5e66:	movs	r2, #0
    5e68:	movs	r3, #0
    5e6a:	mov	r0, r4
    5e6c:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
    5e70:	cmp	r0, #0
    5e72:	beq.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5e74:	mov	r0, r4
    5e76:	bl	6adc <ExFatFile::truncate()>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5e7a:	cmp	r0, #0
    5e7c:	beq.n	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
}
    5e7e:	mov	r0, r8
    5e80:	add	sp, #52	; 0x34
    5e82:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    next = begin;
    5e86:	ldr	r2, [r5, #0]
    ls = 0;  // lowSurrogate
    5e88:	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    5e8c:	ldr	r1, [r5, #16]
    next = begin;
    5e8e:	str	r2, [r5, #4]
    5e90:	ldrb.w	r2, [sp, #19]
    ls = 0;  // lowSurrogate
    5e94:	strh	r3, [r5, #12]
    5e96:	cmp	r1, r2
    5e98:	bne.n	5dac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
    5e9a:	ldrh	r0, [r5, #20]
    5e9c:	ldrh.w	r2, [sp, #20]
    5ea0:	sub.w	ip, r0, r2
    5ea4:	rsbs	r0, ip, #0
    5ea8:	adc.w	r0, r0, ip
    5eac:	b.n	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    5eae:	cmp	r2, #193	; 0xc1
    5eb0:	bne.w	5dac <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
      if (!cmpName(dirName, fname)) {
    5eb4:	mov	r2, r5
    5eb6:	add	r1, sp, #16
    5eb8:	mov	r0, r4
    5eba:	bl	57e0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    5ebe:	cmp	r0, #0
    5ec0:	beq.w	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    return !ls && next == end;
    5ec4:	ldrh	r2, [r5, #12]
    5ec6:	cmp	r2, #0
    5ec8:	bne.w	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5ecc:	ldrd	r1, r2, [r5, #4]
    5ed0:	cmp	r1, r2
    5ed2:	bne.w	5dae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb2>
    5ed6:	b.n	5e38 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x13c>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    5ed8:	tst.w	sl, #16384	; 0x4000
    5edc:	beq.n	5e7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    5ede:	mov	r0, r4
    5ee0:	ldrd	r2, r3, [r4, #16]
    5ee4:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
    5ee8:	b.n	5e7a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x17e>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    5eea:	tst.w	sl, #512	; 0x200
    5eee:	beq.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5ef2:	tst.w	r9, #2
    5ef6:	beq.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5efa:	cmp	r5, #0
    5efc:	beq.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  while (freeCount < freeNeed) {
    5f00:	cmp	fp, r7
    5f02:	bcc.n	5f52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
  memset(this, 0, sizeof(ExFatFile));
    5f04:	movs	r2, #56	; 0x38
    5f06:	movs	r1, #0
    5f08:	mov	r0, r4
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    5f0a:	ldrb.w	r8, [r6, #51]	; 0x33
    5f0e:	bl	a210 <memset>
  ExFatVolume* volume() const {return m_vol;}
    5f12:	ldr	r3, [r6, #32]
  freePos.isContiguous = dir->isContiguous();
    5f14:	ubfx	r8, r8, #6, #1
      m_setCount = freeNeed - 1;
    5f18:	add.w	sl, r7, #4294967295
  m_vol = dir->volume();
    5f1c:	str	r3, [r4, #32]
  m_attributes = FILE_ATTR_FILE;
    5f1e:	movs	r3, #8
  m_dirPos = freePos;
    5f20:	strb.w	r8, [r4, #44]	; 0x2c
      m_setCount = freeNeed - 1;
    5f24:	uxtb.w	sl, sl
  m_attributes = FILE_ATTR_FILE;
    5f28:	strb.w	r3, [r4, #49]	; 0x31
    ls = 0;  // lowSurrogate
    5f2c:	mov.w	r8, #0
  m_dirPos = freePos;
    5f30:	ldr	r3, [sp, #0]
    5f32:	str	r3, [r4, #36]	; 0x24
    5f34:	ldr	r3, [sp, #4]
    5f36:	str	r3, [r4, #40]	; 0x28
    next = begin;
    5f38:	ldr	r3, [r5, #0]
    ls = 0;  // lowSurrogate
    5f3a:	strh.w	r8, [r5, #12]
    next = begin;
    5f3e:	str	r3, [r5, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5f40:	uxtb.w	fp, r8
    5f44:	cmp	r7, fp
    5f46:	bhi.n	5f96 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29a>
  return sync();
    5f48:	mov	r0, r4
    5f4a:	bl	6850 <ExFatFile::sync()>
    5f4e:	mov	r8, r0
    5f50:	b.n	5e7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x182>
    n = dir->read(buf, FS_DIR_SIZE);
    5f52:	movs	r2, #32
    5f54:	add	r1, sp, #16
    5f56:	mov	r0, r6
    5f58:	bl	5a6c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    5f5c:	cbnz	r0, 5f74 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x278>
      if (!dir->addDirCluster()) {
    5f5e:	mov	r0, r6
      curCluster = dir->m_curCluster;
    5f60:	ldr.w	r8, [r6, #24]
      if (!dir->addDirCluster()) {
    5f64:	bl	6892 <ExFatFile::addDirCluster()>
    5f68:	cmp	r0, #0
    5f6a:	beq.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      dir->m_curCluster = curCluster;
    5f6e:	str.w	r8, [r6, #24]
      continue;
    5f72:	b.n	5f00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    if (n != FS_DIR_SIZE) {
    5f74:	cmp	r0, #32
    5f76:	bne.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    if (freeCount == 0) {
    5f7a:	cmp.w	fp, #0
    5f7e:	bne.n	5f8c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x290>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    5f80:	ldr	r2, [r6, #0]
    5f82:	sub.w	r3, r2, #32
    5f86:	str	r3, [sp, #4]
  uint32_t curCluster() const {return m_curCluster;}
    5f88:	ldr	r3, [r6, #24]
    5f8a:	str	r3, [sp, #0]
    freeCount++;
    5f8c:	add.w	r3, fp, #1
    5f90:	uxtb.w	fp, r3
    5f94:	b.n	5f00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x204>
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    5f96:	movs	r2, #1
    5f98:	mov	r1, fp
    5f9a:	mov	r0, r4
    5f9c:	bl	593a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    5fa0:	mov	r6, r0
    5fa2:	cmp	r0, #0
    5fa4:	beq.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    5fa8:	ldrsb.w	r2, [r0]
    5fac:	cmp	r2, #0
    5fae:	blt.w	5d9a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    memset(cache, 0 , FS_DIR_SIZE);
    5fb2:	movs	r2, #32
    5fb4:	movs	r1, #0
    5fb6:	bl	a210 <memset>
    if (i == 0) {
    5fba:	cmp.w	fp, #0
    5fbe:	bne.n	6002 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x306>
      dirFile->type = EXFAT_TYPE_FILE;
    5fc0:	movs	r3, #133	; 0x85
    5fc2:	strb	r3, [r6, #0]
      if (FsDateTime::callback) {
    5fc4:	ldr	r3, [pc, #128]	; (6048 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x34c>)
      m_setCount = freeNeed - 1;
    5fc6:	strb.w	sl, [r4, #48]	; 0x30
      dirFile->setCount = m_setCount;
    5fca:	strb.w	sl, [r6, #1]
      if (FsDateTime::callback) {
    5fce:	ldr	r3, [r3, #0]
    5fd0:	cbz	r3, 5ff6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2fa>
        FsDateTime::callback(&date, &time, &ms10);
    5fd2:	add.w	r2, sp, #11
    5fd6:	add.w	r1, sp, #14
    5fda:	add	r0, sp, #12
    5fdc:	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5fde:	ldrh.w	r3, [sp, #12]
    5fe2:	strh	r3, [r6, #10]
    5fe4:	ldrh.w	r3, [sp, #14]
    5fe8:	strh	r3, [r6, #8]
        dirFile->createTimeMs = ms10;
    5fea:	ldrb.w	r3, [sp, #11]
    5fee:	strb	r3, [r6, #20]
  for (uint8_t i = 0; i < freeNeed; i++) {
    5ff0:	add.w	r8, r8, #1
    5ff4:	b.n	5f40 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x244>
    5ff6:	movw	r3, #22561	; 0x5821
    5ffa:	strh	r3, [r6, #10]
    5ffc:	strh	r3, [r6, #14]
    5ffe:	strh	r3, [r6, #18]
       if (FS_DEFAULT_TIME) {
    6000:	b.n	5ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    } else if (i == 1) {
    6002:	cmp.w	fp, #1
    6006:	bne.n	6022 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x326>
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6008:	orn	r3, r9, #127	; 0x7f
      dirStream->type = EXFAT_TYPE_STREAM;
    600c:	movs	r2, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    600e:	strb.w	fp, [r6, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    6012:	strb	r2, [r6, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    6014:	strb.w	r3, [r4, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    6018:	ldr	r3, [r5, #16]
    601a:	strb	r3, [r6, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    601c:	ldrh	r3, [r5, #20]
    601e:	strh	r3, [r6, #4]
}
    6020:	b.n	5ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
      dirName->type = EXFAT_TYPE_NAME;
    6022:	movs	r3, #193	; 0xc1
    6024:	add.w	fp, r6, #30
    6028:	strb	r3, [r6, #0]
    return !ls && next == end;
    602a:	ldrh	r2, [r5, #12]
    602c:	cbnz	r2, 6036 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33a>
    602e:	ldrd	r1, r2, [r5, #4]
    6032:	cmp	r1, r2
    6034:	beq.n	5ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
        uint16_t u = fname->get16();
    6036:	mov	r0, r5
    6038:	bl	5798 <FsName::get16()>
  *reinterpret_cast<uint16_t*>(dst) = src;
    603c:	strh.w	r0, [r6, #2]!
      for (size_t k = 0; k < 15; k++) {
    6040:	cmp	fp, r6
    6042:	bne.n	602a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32e>
    6044:	b.n	5ff0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2f4>
    6046:	nop
    6048:	.word	0x200147fc

0000604c <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    604c:	push	{r4, r5, r6, r7, lr}
    604e:	mov	r7, r3
    6050:	sub	sp, #92	; 0x5c
  ExFatFile() {}
    6052:	movs	r3, #0
    6054:	mov	r5, r0
    6056:	mov	r4, r1
    6058:	str	r2, [sp, #4]
    605a:	str	r3, [sp, #80]	; 0x50
class FsName {
    605c:	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    6060:	ldrb.w	r3, [r0, #49]	; 0x31
    6064:	cbz	r3, 606c <ExFatFile::open(ExFatFile*, char const*, int)+0x20>
  return false;
    6066:	movs	r0, #0
}
    6068:	add	sp, #92	; 0x5c
    606a:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    606c:	ldrb.w	r1, [r1, #49]	; 0x31
    6070:	tst.w	r1, #80	; 0x50
    6074:	beq.n	6066 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
  if (isDirSeparator(*path)) {
    6076:	ldrb	r1, [r2, #0]
    6078:	cmp	r1, #47	; 0x2f
    607a:	bne.n	60b6 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
    607c:	mov	r0, r2
    while (isDirSeparator(*path)) {
    607e:	ldrb.w	r1, [r2], #1
    6082:	cmp	r1, #47	; 0x2f
    6084:	beq.n	6098 <ExFatFile::open(ExFatFile*, char const*, int)+0x4c>
    6086:	cbz	r3, 608a <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    6088:	str	r0, [sp, #4]
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    608a:	ldr	r4, [r4, #32]
    if (*path == 0) {
    608c:	cbnz	r1, 609c <ExFatFile::open(ExFatFile*, char const*, int)+0x50>
      return openRoot(dirFile->m_vol);
    608e:	mov	r1, r4
    6090:	mov	r0, r5
    6092:	bl	59c6 <ExFatFile::openRoot(ExFatVolume*)>
    6096:	b.n	6068 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>
    6098:	movs	r3, #1
    609a:	b.n	607c <ExFatFile::open(ExFatFile*, char const*, int)+0x30>
  memset(this, 0, sizeof(ExFatFile));
    609c:	movs	r2, #56	; 0x38
    609e:	movs	r1, #0
    60a0:	add	r0, sp, #32
    60a2:	bl	a210 <memset>
  m_attributes = FILE_ATTR_ROOT;
    60a6:	movs	r3, #64	; 0x40
  m_vol = vol;
    60a8:	str	r4, [sp, #64]	; 0x40
    dirFile = &tmpDir;
    60aa:	add	r4, sp, #32
  m_attributes = FILE_ATTR_ROOT;
    60ac:	strb.w	r3, [sp, #81]	; 0x51
  m_flags = FILE_FLAG_READ;
    60b0:	movs	r3, #1
    60b2:	strb.w	r3, [sp, #83]	; 0x53
    if (!parsePathName(path, &fname, &path)) {
    60b6:	add	r3, sp, #4
    60b8:	add	r2, sp, #8
    60ba:	ldr	r1, [sp, #4]
    60bc:	mov	r0, r5
    60be:	bl	59ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    60c2:	cmp	r0, #0
    60c4:	beq.n	6066 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    if (*path == 0) {
    60c6:	ldr	r3, [sp, #4]
    60c8:	ldrb	r3, [r3, #0]
    60ca:	cbz	r3, 6104 <ExFatFile::open(ExFatFile*, char const*, int)+0xb8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    60cc:	movs	r3, #0
    60ce:	add	r2, sp, #8
    60d0:	mov	r1, r4
    60d2:	mov	r0, r5
    60d4:	bl	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    60d8:	cmp	r0, #0
    60da:	beq.n	6066 <ExFatFile::open(ExFatFile*, char const*, int)+0x1a>
    tmpDir = *this;
    60dc:	add	r6, sp, #32
    60de:	mov	r2, r5
    60e0:	add.w	ip, r5, #48	; 0x30
    60e4:	mov	r4, r6
    60e6:	ldr	r0, [r2, #0]
    60e8:	adds	r2, #8
    60ea:	ldr.w	r1, [r2, #-4]
    60ee:	mov	r3, r6
    60f0:	cmp	r2, ip
    60f2:	stmia	r3!, {r0, r1}
    60f4:	mov	r6, r3
    60f6:	bne.n	60e6 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
    60f8:	ldr	r0, [r2, #0]
    60fa:	str	r0, [r3, #0]
    close();
    60fc:	mov	r0, r5
    60fe:	bl	5972 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6102:	b.n	60b6 <ExFatFile::open(ExFatFile*, char const*, int)+0x6a>
  return openPrivate(dirFile, &fname, oflag);
    6104:	mov	r3, r7
    6106:	add	r2, sp, #8
    6108:	mov	r1, r4
    610a:	mov	r0, r5
    610c:	bl	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6110:	b.n	6068 <ExFatFile::open(ExFatFile*, char const*, int)+0x1c>

00006112 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    6112:	cbz	r1, 611c <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    6114:	add.w	r1, r1, #1096	; 0x448
    6118:	b.w	604c <ExFatFile::open(ExFatFile*, char const*, int)>
}
    611c:	mov	r0, r1
    611e:	bx	lr

00006120 <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    6120:	mov	r3, r2
    6122:	push	{r4}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    6124:	ldrb.w	r2, [r0, #49]	; 0x31
    6128:	cbnz	r2, 6144 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    612a:	ldrb.w	r2, [r1, #49]	; 0x31
    612e:	tst.w	r2, #80	; 0x50
    6132:	beq.n	6144 <ExFatFile::openNext(ExFatFile*, int)+0x24>
    6134:	ldr	r2, [r1, #0]
    6136:	ands.w	r2, r2, #31
    613a:	bne.n	6144 <ExFatFile::openNext(ExFatFile*, int)+0x24>
}
    613c:	ldr.w	r4, [sp], #4
  return openPrivate(dir, nullptr, oflag);
    6140:	b.w	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    6144:	movs	r0, #0
    6146:	ldr.w	r4, [sp], #4
    614a:	bx	lr

0000614c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#define DBG_FILE "ExFatPartition.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    614c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6150:	mov	r7, r0
    6152:	mov	fp, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    6154:	mov	sl, r1
    6156:	cbz	r1, 618c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x40>
    6158:	subs	r5, r1, #2
  if (start >= m_clusterCount) {
    615a:	ldr.w	r3, [r7, #1072]	; 0x430
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
  uint16_t sectorSize = 1 << m_bytesPerSectorShift;
  size_t i = (start >> 3) & (sectorSize - 1);
  uint8_t* cache;
  uint8_t mask = 1 << (start & 7);
    615e:	movs	r4, #1
    start = 0;
    6160:	cmp	r3, r5
    6162:	it	ls
    6164:	movls	r5, #0
  uint8_t mask = 1 << (start & 7);
    6166:	and.w	r3, r5, #7
  size_t i = (start >> 3) & (sectorSize - 1);
    616a:	ubfx	r9, r5, #3, #9
  uint32_t bgnAlloc = start;
    616e:	mov	r8, r5
  uint32_t endAlloc = start;
    6170:	mov	r6, r5
  uint8_t mask = 1 << (start & 7);
    6172:	lsls	r4, r3
    6174:	uxtb	r4, r4
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
    6176:	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    617a:	movs	r2, #0
    617c:	mov	r0, r7
    617e:	add.w	r1, r1, r6, lsr #12
    6182:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCachePrepare(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6186:	cbnz	r0, 61ba <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    6188:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    618c:	ldr.w	r5, [r0, #1056]	; 0x420
    6190:	b.n	615a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xe>
        endAlloc++;
    6192:	mov	r8, r6
        if (endAlloc == start) {
    6194:	cmp	r5, r6
    6196:	beq.n	61f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa4>
        if (endAlloc >= m_clusterCount) {
    6198:	ldr.w	r2, [r7, #1072]	; 0x430
    619c:	cmp	r2, r6
    619e:	bls.n	61e4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x98>
      for (; mask; mask <<= 1) {
    61a0:	lsls	r4, r4, #1
    61a2:	ands.w	r4, r4, #255	; 0xff
    61a6:	bne.n	61be <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x72>
    for (; i < sectorSize; i++) {
    61a8:	add.w	r3, r9, #1
    61ac:	movs	r4, #1
    i = 0;
    61ae:	mov.w	r9, #0
    for (; i < sectorSize; i++) {
    61b2:	cmp.w	r3, #512	; 0x200
    61b6:	bcs.n	6176 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2a>
    61b8:	mov	r9, r3
        if (!(mask & cache[i])) {
    61ba:	ldrb.w	r3, [r0, r9]
    61be:	tst	r3, r4
        endAlloc++;
    61c0:	add.w	r6, r6, #1
        if (!(mask & cache[i])) {
    61c4:	bne.n	6192 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x46>
          if ((endAlloc - bgnAlloc) == count) {
    61c6:	sub.w	r2, r6, r8
    61ca:	cmp	r2, fp
    61cc:	bne.n	6194 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
            if (cluster == 0 && count == 1) {
    61ce:	cmp.w	sl, #0
    61d2:	bne.n	61de <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
    61d4:	cmp.w	fp, #1
              m_bitmapStart = bgnAlloc;
    61d8:	it	eq
    61da:	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    61de:	add.w	r0, r8, #2
    61e2:	b.n	6188 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>
          endAlloc = bgnAlloc = 0;
    61e4:	mov.w	r8, #0
          i = sectorSize;
    61e8:	mov.w	r9, #512	; 0x200
          endAlloc = bgnAlloc = 0;
    61ec:	mov	r6, r8
    61ee:	b.n	61a8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5c>
          return 1;
    61f0:	movs	r0, #1
    61f2:	b.n	6188 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3c>

000061f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
  uint32_t sector;
  uint32_t start = cluster - 2;
    61f4:	subs	r1, #2
                                  uint32_t count, bool value) {
    61f6:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    61fa:	mov	r5, r0
    61fc:	mov	r7, r3
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    61fe:	ldr.w	r0, [r0, #1072]	; 0x430
    6202:	adds	r3, r1, r2
                                  uint32_t count, bool value) {
    6204:	mov	r6, r2
  if ((start + count) > m_clusterCount) {
    6206:	cmp	r3, r0
    6208:	bhi.n	628a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    620a:	ldr.w	r2, [r5, #1056]	; 0x420
  if (value) {
    620e:	cbz	r7, 6280 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    6210:	cmp	r1, r2
    6212:	bhi.n	6222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
    6214:	cmp	r3, r2
    6216:	bls.n	6222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    6218:	cmp	r3, r0
    621a:	it	cs
    621c:	movcs	r3, #0
    621e:	str.w	r3, [r5, #1056]	; 0x420
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    6222:	and.w	r3, r1, #7
    6226:	mov.w	r9, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
    622a:	ubfx	r4, r1, #3, #9
  mask = 1 << (start & 7);
    622e:	lsl.w	r9, r9, r3
  sector = m_clusterHeapStartSector +
    6232:	ldr.w	r3, [r5, #1068]	; 0x42c
  mask = 1 << (start & 7);
    6236:	uxtb.w	r9, r9
  sector = m_clusterHeapStartSector +
    623a:	add.w	r8, r3, r1, lsr #12
    623e:	movs	r2, #1
    6240:	mov	r1, r8
    6242:	mov	r0, r5
    6244:	add	r8, r2
    6246:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  while (true) {
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
    624a:	cbz	r0, 628a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
    624c:	adds	r3, r0, r4
    624e:	mov	r1, r9
    6250:	add.w	r0, r0, #512	; 0x200
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    6254:	ldrb	r2, [r3, #0]
    6256:	tst	r2, r1
    6258:	ite	ne
    625a:	movne	r4, #1
    625c:	moveq	r4, #0
    625e:	cmp	r4, r7
    6260:	beq.n	628a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x96>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    6262:	eors	r2, r1
        if (--count == 0) {
    6264:	subs	r6, #1
        cache[i] ^= mask;
    6266:	strb	r2, [r3, #0]
        if (--count == 0) {
    6268:	beq.n	6290 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x9c>
      for (; mask; mask <<= 1) {
    626a:	lsls	r1, r1, #1
    626c:	ands.w	r1, r1, #255	; 0xff
    6270:	bne.n	6254 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    for (; i < m_bytesPerSector; i++) {
    6272:	adds	r3, #1
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    6274:	mov	r4, r1
    6276:	movs	r1, #1
    for (; i < m_bytesPerSector; i++) {
    6278:	cmp	r0, r3
      mask = 1;
    627a:	mov	r9, r1
    for (; i < m_bytesPerSector; i++) {
    627c:	bne.n	6254 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x60>
    627e:	b.n	623e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x4a>
    if (start < m_bitmapStart) {
    6280:	cmp	r1, r2
      m_bitmapStart = start;
    6282:	it	cc
    6284:	strcc.w	r1, [r5, #1056]	; 0x420
    6288:	b.n	6222 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x2e>
  }

 fail:
  return false;
    628a:	movs	r0, #0
}
    628c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          return true;
    6290:	movs	r0, #1
    6292:	b.n	628c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x98>

00006294 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
    n++;
  } while (status);
  return n;
}
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    6294:	push	{r3, r4, r5, lr}
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    6296:	ldr.w	r3, [r0, #1080]	; 0x438
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    629a:	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    629c:	ldr	r1, [r1, #4]
    return m_dataCache.prepare(sector, option);
    629e:	add.w	r0, r0, #528	; 0x210
           ((cluster - 2) << m_sectorsPerClusterShift);
    62a2:	ldrb.w	r5, [r0, #565]	; 0x235
    62a6:	ands	r1, r3
    62a8:	ldr	r3, [r4, #0]
    62aa:	subs	r3, #2
    62ac:	lsls	r3, r5
    62ae:	add.w	r3, r3, r1, lsr #9
    62b2:	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    62b6:	add	r1, r3
    62b8:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache = dataCachePrepare(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    62bc:	cbz	r0, 62c6 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x32>
    62be:	ldr	r3, [r4, #4]
    62c0:	ubfx	r3, r3, #0, #9
    62c4:	add	r0, r3
}
    62c6:	pop	{r3, r4, r5, pc}

000062c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
  }
  return 1;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    62c8:	push	{r3, r4, r5, lr}
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    62ca:	ldr.w	r3, [r0, #1072]	; 0x430
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    62ce:	mov	r4, r1
    62d0:	mov	r5, r2
  if (cluster > (m_clusterCount + 1)) {
    62d2:	adds	r3, #1
    62d4:	cmp	r3, r1
    62d6:	bcs.n	62de <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x16>
    DBG_FAIL_MACRO;
    return -1;
    62d8:	mov.w	r0, #4294967295
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    62dc:	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    62de:	ldr.w	r1, [r0, #1060]	; 0x424
    62e2:	movs	r2, #0
    62e4:	add.w	r0, r0, #528	; 0x210
    62e8:	add.w	r1, r1, r4, lsr #7
    62ec:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    62f0:	cmp	r0, #0
    62f2:	beq.n	62d8 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    62f4:	lsls	r4, r4, #2
    62f6:	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    62fa:	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    62fc:	adds	r2, r3, #1
  return 1;
    62fe:	itet	ne
    6300:	movne	r0, #1
    return 0;
    6302:	moveq	r0, #0
  *value = next;
    6304:	strne	r3, [r5, #0]
  return 1;
    6306:	b.n	62dc <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x14>

00006308 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    6308:	push	{r0, r1, r2, r4, r5, lr}
    630a:	mov	r5, r0
  uint32_t n = 0;
    630c:	movs	r4, #0
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    630e:	str	r1, [sp, #4]
    status = fatGet(cluster, & cluster);
    6310:	add	r2, sp, #4
    6312:	ldr	r1, [sp, #4]
    6314:	mov	r0, r5
    6316:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
    631a:	cmp	r0, #0
    631c:	blt.n	632a <ExFatPartition::chainSize(unsigned long)+0x22>
    n++;
    631e:	add.w	r4, r4, #1
  } while (status);
    6322:	bne.n	6310 <ExFatPartition::chainSize(unsigned long)+0x8>
}
    6324:	mov	r0, r4
    6326:	add	sp, #12
    6328:	pop	{r4, r5, pc}
    if (status < 0) return 0;
    632a:	movs	r4, #0
    632c:	b.n	6324 <ExFatPartition::chainSize(unsigned long)+0x1c>

0000632e <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    632e:	push	{r4, r5, r6, lr}
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6330:	ldr	r3, [r1, #4]
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6332:	mov	r6, r0
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    6334:	ldr.w	r4, [r0, #1080]	; 0x438
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    6338:	mov	r5, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    633a:	ands	r4, r3
    633c:	add	r4, r2
  pos->position += offset;
    633e:	add	r2, r3
    6340:	str	r2, [r1, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6342:	ldrb.w	r3, [r0, #1093]	; 0x445
    6346:	adds	r3, #9
  tmp >>= bytesPerClusterShift();
    6348:	uxtb	r3, r3
    634a:	lsrs	r4, r3
  while (tmp--) {
    634c:	cbnz	r4, 6352 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x24>
  return 1;
    634e:	movs	r0, #1
    6350:	b.n	636c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3e>
    if (pos->isContiguous) {
    6352:	ldrb	r3, [r5, #8]
      pos->cluster++;
    6354:	ldr	r1, [r5, #0]
    if (pos->isContiguous) {
    6356:	cbz	r3, 6360 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
      pos->cluster++;
    6358:	adds	r1, #1
    635a:	str	r1, [r5, #0]
    635c:	subs	r4, #1
    635e:	b.n	634c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x1e>
      status = fatGet(pos->cluster, &pos->cluster);
    6360:	mov	r2, r5
    6362:	mov	r0, r6
    6364:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
    6368:	cmp	r0, #1
    636a:	beq.n	635c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2e>
}
    636c:	pop	{r4, r5, r6, pc}

0000636e <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    636e:	cmp	r1, #1
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6370:	push	{r3, r4, r5, lr}
    6372:	mov	r4, r1
    6374:	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    6376:	bhi.n	637c <ExFatPartition::fatPut(unsigned long, unsigned long)+0xe>
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
    6378:	movs	r0, #0
}
    637a:	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    637c:	ldr.w	r3, [r0, #1072]	; 0x430
    6380:	adds	r3, #1
    6382:	cmp	r3, r1
    6384:	bcc.n	6378 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    6386:	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
    638a:	movs	r2, #1
    638c:	add.w	r0, r0, #528	; 0x210
    6390:	add.w	r1, r1, r4, lsr #7
    6394:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    6398:	cmp	r0, #0
    639a:	beq.n	6378 <ExFatPartition::fatPut(unsigned long, unsigned long)+0xa>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    639c:	lsls	r4, r4, #2
    639e:	ubfx	r4, r4, #0, #9
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    63a2:	str	r5, [r0, r4]
  return true;
    63a4:	movs	r0, #1
    63a6:	b.n	637a <ExFatPartition::fatPut(unsigned long, unsigned long)+0xc>

000063a8 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    63a8:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    63ac:	mov	r7, r0
    63ae:	mov	r4, r1
  uint32_t next;
  uint32_t start = cluster;
    63b0:	mov	r8, r1
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    63b2:	add	r2, sp, #4
    63b4:	mov	r1, r4
    63b6:	mov	r0, r7
    63b8:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
    63bc:	subs	r6, r0, #0
    63be:	bge.n	63ca <ExFatPartition::freeChain(unsigned long)+0x22>
  } while (status);

  return true;

 fail:
  return false;
    63c0:	movs	r5, #0
}
    63c2:	mov	r0, r5
    63c4:	add	sp, #8
    63c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!fatPut(cluster, 0)) {
    63ca:	movs	r2, #0
    63cc:	mov	r1, r4
    63ce:	mov	r0, r7
    63d0:	bl	636e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    63d4:	mov	r5, r0
    63d6:	cmp	r0, #0
    63d8:	beq.n	63c0 <ExFatPartition::freeChain(unsigned long)+0x18>
    if (status == 0 || (cluster + 1) != next) {
    63da:	adds	r2, r4, #1
    63dc:	cbz	r6, 63e4 <ExFatPartition::freeChain(unsigned long)+0x3c>
    63de:	ldr	r3, [sp, #4]
    63e0:	cmp	r3, r2
    63e2:	beq.n	63fa <ExFatPartition::freeChain(unsigned long)+0x52>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    63e4:	movs	r3, #0
    63e6:	sub.w	r2, r2, r8
    63ea:	mov	r1, r8
    63ec:	mov	r0, r7
    63ee:	bl	61f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    63f2:	cmp	r0, #0
    63f4:	beq.n	63c0 <ExFatPartition::freeChain(unsigned long)+0x18>
      start = next;
    63f6:	ldr.w	r8, [sp, #4]
    cluster = next;
    63fa:	ldr	r4, [sp, #4]
  } while (status);
    63fc:	cmp	r6, #0
    63fe:	bne.n	63b2 <ExFatPartition::freeChain(unsigned long)+0xa>
    6400:	b.n	63c2 <ExFatPartition::freeChain(unsigned long)+0x1a>

00006402 <ExFatPartition::freeClusterCount()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::freeClusterCount() {
    6402:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t nc = 0;
  uint32_t sector = m_clusterHeapStartSector;
  uint32_t usedCount = 0;
    6406:	movs	r4, #0
uint32_t ExFatPartition::freeClusterCount() {
    6408:	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    640a:	ldr.w	r7, [r0, #1068]	; 0x42c
    640e:	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    6412:	mov	r5, r4
    6414:	mov	r1, r7
    6416:	movs	r2, #0
    6418:	mov	r0, r8
    641a:	adds	r7, #1
    641c:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* cache;

  while (true) {
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    if (!cache) {
    6420:	cbz	r0, 643e <ExFatPartition::freeClusterCount()+0x3c>
    6422:	subs	r0, #1
    6424:	add.w	ip, r5, #4096	; 0x1000
      return 0;
    }
    for (size_t i = 0; i < m_bytesPerSector; i++) {
      if (cache[i] == 0XFF) {
    6428:	ldrb.w	r1, [r0, #1]!
    642c:	cmp	r1, #255	; 0xff
    642e:	bne.n	6442 <ExFatPartition::freeClusterCount()+0x40>
        usedCount+= 8;
    6430:	adds	r4, #8
          if ((mask & cache[i])) {
            usedCount++;
          }
        }
      }
      nc += 8;
    6432:	adds	r5, #8
      if (nc >= m_clusterCount) {
    6434:	ldr.w	r3, [r6, #1072]	; 0x430
    6438:	cmp	r3, r5
    643a:	bhi.n	645c <ExFatPartition::freeClusterCount()+0x5a>
        return m_clusterCount - usedCount;
    643c:	subs	r0, r3, r4
      }
    }
  }
}
    643e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (cache[i]) {
    6442:	cmp	r1, #0
    6444:	beq.n	6432 <ExFatPartition::freeClusterCount()+0x30>
    6446:	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6448:	movs	r3, #1
          if ((mask & cache[i])) {
    644a:	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    644c:	mov.w	r3, r3, lsl #1
            usedCount++;
    6450:	it	ne
    6452:	addne	r4, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    6454:	subs	r2, #1
    6456:	uxtb	r3, r3
    6458:	bne.n	644a <ExFatPartition::freeClusterCount()+0x48>
    645a:	b.n	6432 <ExFatPartition::freeClusterCount()+0x30>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    645c:	cmp	r5, ip
    645e:	bne.n	6428 <ExFatPartition::freeClusterCount()+0x26>
    6460:	b.n	6414 <ExFatPartition::freeClusterCount()+0x12>
	...

00006464 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6464:	push	{r3, r4, r5, r6, r7, lr}
    m_sector = 0XFFFFFFFF;
    6466:	mov.w	r3, #4294967295
    646a:	mov	r6, r2
    646c:	add.w	r7, r0, #528	; 0x210
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    6470:	movs	r2, #0
  m_blockDev = dev;
    6472:	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    6476:	mov	r4, r0
    m_blockDev = blockDev;
    6478:	str	r1, [r0, #4]
    647a:	str.w	r1, [r0, #532]	; 0x214
    647e:	mov	r1, r2
  m_fatType = 0;
    6480:	strb.w	r2, [r0, #1092]	; 0x444
    m_status = 0;
    6484:	strb	r2, [r0, #0]
    m_sector = 0XFFFFFFFF;
    6486:	str	r3, [r0, #12]
    m_status = 0;
    6488:	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    648c:	str.w	r3, [r0, #540]	; 0x21c
    6490:	mov	r0, r7
    6492:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  cacheInit(m_blockDev);
  cache = dataCachePrepare(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    6496:	cmp	r6, #4
    6498:	mov	r5, r0
    649a:	bls.n	64a0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    649c:	movs	r0, #0
}
    649e:	pop	{r3, r4, r5, r6, r7, pc}
  if (part > 4 || !cache) {
    64a0:	cmp	r0, #0
    64a2:	beq.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (part >= 1) {
    64a4:	cbz	r6, 64d4 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x70>
    mp = &mbr->part[part - 1];
    64a6:	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    64a8:	add.w	r3, r0, r3, lsl #4
    64ac:	ldrb.w	r2, [r3, #446]	; 0x1be
    64b0:	ands.w	r2, r2, #127	; 0x7f
    64b4:	bne.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
    64b6:	ldrb.w	r3, [r3, #450]	; 0x1c2
    64ba:	cmp	r3, #0
    64bc:	beq.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  return *reinterpret_cast<const uint32_t*>(src);
    64be:	add.w	r6, r0, r6, lsl #4
    64c2:	mov	r0, r7
    64c4:	ldr.w	r6, [r6, #438]	; 0x1b6
    64c8:	mov	r1, r6
    64ca:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    64ce:	mov	r5, r0
    64d0:	cmp	r0, #0
    64d2:	beq.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    64d4:	ldr	r1, [pc, #104]	; (6540 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    64d6:	movs	r2, #5
    64d8:	adds	r0, r5, #3
    64da:	bl	ebe4 <strncmp>
    64de:	mov	r1, r0
    64e0:	cmp	r0, #0
    64e2:	bne.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    64e4:	ldrb.w	r3, [r5, #108]	; 0x6c
    64e8:	cmp	r3, #9
    64ea:	bne.n	649c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x38>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    64ec:	ldr	r3, [r5, #80]	; 0x50
    64ee:	add	r3, r6
    64f0:	str.w	r3, [r4, #1060]	; 0x424
    64f4:	ldr	r3, [r5, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    64f6:	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    64fa:	ldr	r3, [r5, #88]	; 0x58
    64fc:	add	r3, r6
    64fe:	str.w	r3, [r4, #1068]	; 0x42c
    6502:	ldr	r3, [r5, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    6504:	str.w	r3, [r4, #1072]	; 0x430
    6508:	ldr	r3, [r5, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    650a:	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    650e:	ldrb.w	r3, [r5, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6512:	movs	r5, #1
  m_bitmapStart = 0;
    6514:	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    6518:	mov	r0, r4
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    651a:	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    651e:	adds	r3, #9
  bitmapFind(0, 1);
    6520:	mov	r2, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    6522:	lsl.w	r3, r5, r3
    6526:	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    652a:	subs	r3, #1
    652c:	str.w	r3, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    6530:	bl	614c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    6534:	movs	r3, #64	; 0x40
  return true;
    6536:	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    6538:	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    653c:	b.n	649e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x3a>
    653e:	nop
    6540:	.word	0x20001153

00006544 <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    6544:	push	{r4, lr}
    6546:	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    6548:	ldr.w	r1, [r0, #1076]	; 0x434
    654c:	bl	6308 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6550:	ldrb.w	r3, [r4, #1093]	; 0x445
    6554:	adds	r3, #9
  return nc << bytesPerClusterShift();
    6556:	uxtb	r3, r3
}
    6558:	lsls	r0, r3
    655a:	pop	{r4, pc}

0000655c <ExFatVolume::chdir(char const*)>:
#define DBG_FILE "ExFatVolume.cpp"
#include "../common/DebugMacros.h"
#include "ExFatLib.h"
ExFatVolume* ExFatVolume::m_cwv = nullptr;
//-----------------------------------------------------------------------------
bool ExFatVolume::chdir(const char* path) {
    655c:	push	{r4, r5, r6, lr}
  ExFatFile* vwd() {return &m_vwd;}
    655e:	add.w	r4, r0, #1096	; 0x448
    6562:	sub	sp, #56	; 0x38
    6564:	movs	r3, #0
    6566:	mov	r2, r1
  ExFatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    6568:	mov	r0, sp
    656a:	mov	r1, r4
    656c:	str	r3, [sp, #48]	; 0x30
    656e:	bl	604c <ExFatFile::open(ExFatFile*, char const*, int)>
    6572:	mov	r5, r0
    6574:	cbz	r0, 659e <ExFatVolume::chdir(char const*)+0x42>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    6576:	ldrb.w	r3, [sp, #49]	; 0x31
    657a:	ands.w	r3, r3, #80	; 0x50
    657e:	beq.n	65a4 <ExFatVolume::chdir(char const*)+0x48>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    6580:	mov	r2, sp
    6582:	mov	r3, r4
    6584:	add	r6, sp, #48	; 0x30
    6586:	mov	r4, r2
    6588:	adds	r3, #8
    658a:	ldmia	r4!, {r0, r1}
    658c:	cmp	r4, r6
    658e:	str.w	r0, [r3, #-8]
    6592:	str.w	r1, [r3, #-4]
    6596:	mov	r2, r4
    6598:	bne.n	6586 <ExFatVolume::chdir(char const*)+0x2a>
    659a:	ldr	r0, [r4, #0]
    659c:	str	r0, [r3, #0]
  return true;

 fail:
  return false;
}
    659e:	mov	r0, r5
    65a0:	add	sp, #56	; 0x38
    65a2:	pop	{r4, r5, r6, pc}
  return false;
    65a4:	mov	r5, r3
    65a6:	b.n	659e <ExFatVolume::chdir(char const*)+0x42>

000065a8 <exFatDirChecksum(unsigned char const*, unsigned short)>:
  return false;
}
//==============================================================================
#else  // EXFAT_READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    65a8:	push	{r4, lr}
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    65aa:	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    65ac:	ldrb	r4, [r0, #0]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    65ae:	lsls	r2, r1, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    65b0:	cmp	r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    65b2:	orr.w	r2, r2, r1, lsr #1
    65b6:	ldrb	r1, [r0, r3]
    65b8:	uxtah	r2, r1, r2
    65bc:	uxth	r1, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    65be:	bne.n	65d2 <exFatDirChecksum(unsigned char const*, unsigned short)+0x2a>
    65c0:	cmp	r4, #133	; 0x85
    65c2:	ite	ne
    65c4:	movne	r2, #1
    65c6:	moveq	r2, #3
    65c8:	add	r3, r2
    65ca:	cmp	r3, #31
    65cc:	bls.n	65ae <exFatDirChecksum(unsigned char const*, unsigned short)+0x6>
  }
  return checksum;
}
    65ce:	mov	r0, r1
    65d0:	pop	{r4, pc}
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    65d2:	movs	r2, #1
    65d4:	b.n	65c8 <exFatDirChecksum(unsigned char const*, unsigned short)+0x20>

000065d6 <ExFatPartition::cacheSync()>:
  bool cacheSync() {
    65d6:	push	{r4, lr}
    65d8:	mov	r4, r0
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    65da:	bl	5654 <FsCache::sync()>
    65de:	cbz	r0, 65f8 <ExFatPartition::cacheSync()+0x22>
    65e0:	add.w	r0, r4, #528	; 0x210
    65e4:	bl	5654 <FsCache::sync()>
    65e8:	cbz	r0, 65f8 <ExFatPartition::cacheSync()+0x22>
  bool cacheSync() {
    65ea:	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    65ee:	ldr	r3, [r0, #0]
  }
    65f0:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    65f4:	ldr	r3, [r3, #32]
    65f6:	bx	r3
  }
    65f8:	movs	r0, #0
    65fa:	pop	{r4, pc}

000065fc <ExFatFile::addCluster()>:
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    65fc:	push	{r3, r4, r5, r6, r7, lr}
    65fe:	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6600:	ldr	r0, [r0, #32]
    6602:	ldr	r1, [r4, #24]
    6604:	cbz	r1, 6608 <ExFatFile::addCluster()+0xc>
    6606:	adds	r1, #1
    6608:	movs	r2, #1
    660a:	bl	614c <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    660e:	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    6610:	mov	r5, r0
  if (find < 2) {
    6612:	bhi.n	661a <ExFatFile::addCluster()+0x1e>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    6614:	movs	r6, #0
}
    6616:	mov	r0, r6
    6618:	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    661a:	movs	r3, #1
    661c:	mov	r1, r0
    661e:	ldr	r0, [r4, #32]
    6620:	mov	r2, r3
    6622:	bl	61f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    6626:	mov	r6, r0
    6628:	cmp	r0, #0
    662a:	beq.n	6614 <ExFatFile::addCluster()+0x18>
  if (m_curCluster == 0) {
    662c:	ldr	r2, [r4, #24]
    m_flags |= FILE_FLAG_CONTIGUOUS;
    662e:	ldrb.w	r3, [r4, #51]	; 0x33
  if (m_curCluster == 0) {
    6632:	cbnz	r2, 6640 <ExFatFile::addCluster()+0x44>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6634:	orr.w	r3, r3, #64	; 0x40
    6638:	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    663c:	str	r5, [r4, #24]
  return true;
    663e:	b.n	6616 <ExFatFile::addCluster()+0x1a>
  if (isContiguous()) {
    6640:	lsls	r1, r3, #25
    6642:	bmi.n	6668 <ExFatFile::addCluster()+0x6c>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    6644:	mov.w	r2, #4294967295
    6648:	mov	r1, r5
    664a:	ldr	r0, [r4, #32]
    664c:	bl	636e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6650:	cmp	r0, #0
    6652:	beq.n	6614 <ExFatFile::addCluster()+0x18>
  if (m_curCluster) {
    6654:	ldr	r1, [r4, #24]
    6656:	cmp	r1, #0
    6658:	beq.n	663c <ExFatFile::addCluster()+0x40>
    if (!m_vol->fatPut(m_curCluster, find)) {
    665a:	mov	r2, r5
    665c:	ldr	r0, [r4, #32]
    665e:	bl	636e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6662:	cmp	r0, #0
    6664:	bne.n	663c <ExFatFile::addCluster()+0x40>
    6666:	b.n	6614 <ExFatFile::addCluster()+0x18>
    if (find == (m_curCluster + 1)) {
    6668:	adds	r2, #1
    666a:	cmp	r2, r5
    666c:	beq.n	663c <ExFatFile::addCluster()+0x40>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    666e:	bic.w	r3, r3, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6672:	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6674:	strb.w	r3, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    6678:	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    667a:	ldr	r0, [r4, #32]
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    667c:	cmp	r3, r1
    667e:	bls.n	6644 <ExFatFile::addCluster()+0x48>
      if (!m_vol->fatPut(c, c + 1)) {
    6680:	adds	r7, r1, #1
    6682:	mov	r2, r7
    6684:	bl	636e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6688:	cmp	r0, #0
    668a:	beq.n	6614 <ExFatFile::addCluster()+0x18>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    668c:	mov	r1, r7
    668e:	b.n	6678 <ExFatFile::addCluster()+0x7c>

00006690 <ExFatFile::remove()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
    6690:	push	{r3, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6692:	ldrb.w	r3, [r0, #51]	; 0x33
    6696:	mov	r4, r0
  uint8_t* cache;
  if (!isWritable()) {
    6698:	lsls	r2, r3, #30
    669a:	bmi.n	66a0 <ExFatFile::remove()+0x10>

  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
    669c:	movs	r0, #0
}
    669e:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_firstCluster) {
    66a0:	ldr	r1, [r0, #28]
    66a2:	cbnz	r1, 66da <ExFatFile::remove()+0x4a>
bool ExFatFile::remove() {
    66a4:	movs	r5, #0
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    66a6:	movs	r2, #1
    66a8:	uxtb	r1, r5
    66aa:	mov	r0, r4
    66ac:	bl	593a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    66b0:	cmp	r0, #0
    66b2:	beq.n	669c <ExFatFile::remove()+0xc>
    cache[0] &= 0x7F;
    66b4:	ldrb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    66b6:	adds	r5, #1
    cache[0] &= 0x7F;
    66b8:	and.w	r3, r3, #127	; 0x7f
    66bc:	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    66be:	uxtb	r3, r5
    66c0:	ldrb.w	r2, [r4, #48]	; 0x30
    66c4:	cmp	r2, r3
    66c6:	bcs.n	66a6 <ExFatFile::remove()+0x16>
  m_attributes = FILE_ATTR_CLOSED;
    66c8:	movs	r3, #0
  return m_vol->cacheSync();
    66ca:	ldr	r0, [r4, #32]
  m_attributes = FILE_ATTR_CLOSED;
    66cc:	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    66d0:	strb.w	r3, [r4, #51]	; 0x33
  return m_vol->cacheSync();
    66d4:	bl	65d6 <ExFatPartition::cacheSync()>
    66d8:	b.n	669e <ExFatFile::remove()+0xe>
    if (isContiguous()) {
    66da:	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66dc:	ldr	r0, [r0, #32]
    if (isContiguous()) {
    66de:	bpl.n	6716 <ExFatFile::remove()+0x86>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    66e0:	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66e4:	ldrd	r2, r5, [r4, #8]
    66e8:	adds	r3, #9
    66ea:	subs	r2, #1
    66ec:	uxtb	r3, r3
    66ee:	adc.w	r5, r5, #4294967295
    66f2:	rsb	r7, r3, #32
    66f6:	sub.w	r6, r3, #32
    66fa:	lsrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    66fc:	movs	r3, #0
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    66fe:	lsl.w	r7, r5, r7
    6702:	lsr.w	r6, r5, r6
    6706:	orrs	r2, r7
    6708:	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    670a:	adds	r2, #1
    670c:	bl	61f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(m_firstCluster)) {
    6710:	cmp	r0, #0
    6712:	bne.n	66a4 <ExFatFile::remove()+0x14>
    6714:	b.n	669c <ExFatFile::remove()+0xc>
    6716:	bl	63a8 <ExFatPartition::freeChain(unsigned long)>
    671a:	b.n	6710 <ExFatFile::remove()+0x80>

0000671c <ExFatFile::rmdir()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
    671c:	push	{r4, lr}
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    671e:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::rmdir() {
    6722:	sub	sp, #32
    6724:	mov	r4, r0
  if (!isSubDir()) {
    6726:	lsls	r3, r3, #27
    6728:	bmi.n	6730 <ExFatFile::rmdir()+0x14>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    672a:	movs	r0, #0
}
    672c:	add	sp, #32
    672e:	pop	{r4, pc}
    seekSet(0);
    6730:	movs	r2, #0
    6732:	movs	r3, #0
    6734:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    6738:	movs	r2, #32
    673a:	mov	r1, sp
    673c:	mov	r0, r4
    673e:	bl	5a6c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    6742:	cbz	r0, 6758 <ExFatFile::rmdir()+0x3c>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    6744:	cmp	r0, #32
    6746:	bne.n	672a <ExFatFile::rmdir()+0xe>
    6748:	ldrsb.w	r2, [sp]
    674c:	ldrb.w	r3, [sp]
    6750:	cmp	r2, #0
    6752:	blt.n	672a <ExFatFile::rmdir()+0xe>
    if (dir[0] == 0) {
    6754:	cmp	r3, #0
    6756:	bne.n	6738 <ExFatFile::rmdir()+0x1c>
  m_attributes = FILE_ATTR_FILE;
    6758:	movs	r3, #8
  return remove();
    675a:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    675c:	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    6760:	ldrb.w	r3, [r4, #51]	; 0x33
    6764:	orr.w	r3, r3, #2
    6768:	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    676c:	bl	6690 <ExFatFile::remove()>
    6770:	b.n	672c <ExFatFile::rmdir()+0x10>
	...

00006774 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    6774:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6778:	movs	r7, #0
    677a:	mov	r4, r0
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    677c:	ldr.w	r8, [pc, #204]	; 684c <ExFatFile::syncDir()+0xd8>
  uint16_t checksum = 0;
    6780:	mov	r6, r7
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    6782:	movs	r2, #0
    6784:	uxtb	r1, r7
    6786:	mov	r0, r4
    6788:	bl	593a <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    678c:	mov	r5, r0
    678e:	cmp	r0, #0
    6790:	beq.n	680e <ExFatFile::syncDir()+0x9a>
    switch (cache[0]) {
    6792:	ldrb	r3, [r0, #0]
    6794:	cmp	r3, #192	; 0xc0
    6796:	beq.n	6822 <ExFatFile::syncDir()+0xae>
    6798:	cmp	r3, #193	; 0xc1
    679a:	beq.n	67e0 <ExFatFile::syncDir()+0x6c>
    679c:	cmp	r3, #133	; 0x85
    679e:	bne.n	680e <ExFatFile::syncDir()+0x9a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    67a0:	ldrb.w	r3, [r4, #49]	; 0x31
    67a4:	and.w	r3, r3, #55	; 0x37
    67a8:	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    67aa:	ldr.w	r3, [r8]
    67ae:	cbz	r3, 67d2 <ExFatFile::syncDir()+0x5e>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    67b0:	add.w	r2, sp, #3
    67b4:	add.w	r1, sp, #6
    67b8:	add	r0, sp, #4
    67ba:	blx	r3
          df->modifyTimeMs = ms10;
    67bc:	ldrb.w	r3, [sp, #3]
          setLe16(df->modifyTime, time);
    67c0:	ldrh.w	r2, [sp, #6]
          df->modifyTimeMs = ms10;
    67c4:	strb	r3, [r5, #21]
          setLe16(df->modifyDate, date);
    67c6:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    67ca:	strh	r2, [r5, #12]
    67cc:	strh	r3, [r5, #14]
    67ce:	strh	r2, [r5, #16]
    67d0:	strh	r3, [r5, #18]
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    67d2:	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    67d4:	ldrb.w	r3, [r2, #528]	; 0x210
    67d8:	orr.w	r3, r3, #1
    67dc:	strb.w	r3, [r2, #528]	; 0x210
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67e0:	adds	r7, #1
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    67e2:	mov	r1, r6
    67e4:	mov	r0, r5
    67e6:	bl	65a8 <exFatDirChecksum(unsigned char const*, unsigned short)>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67ea:	ldrb.w	r2, [r4, #48]	; 0x30
    67ee:	uxtb	r3, r7
    checksum = exFatDirChecksum(cache, checksum);
    67f0:	mov	r6, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    67f2:	cmp	r2, r3
    67f4:	bcs.n	6782 <ExFatFile::syncDir()+0xe>
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    67f6:	movs	r2, #1
    67f8:	add.w	r1, r4, #36	; 0x24
    67fc:	ldr	r0, [r4, #32]
    67fe:	bl	6294 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    6802:	cbz	r0, 680e <ExFatFile::syncDir()+0x9a>
    6804:	strh	r6, [r0, #2]
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    6806:	ldr	r0, [r4, #32]
    6808:	bl	65d6 <ExFatPartition::cacheSync()>
    680c:	cbnz	r0, 681c <ExFatFile::syncDir()+0xa8>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    680e:	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    6812:	movs	r0, #0
  m_error |= WRITE_ERROR;
    6814:	orr.w	r3, r3, #1
    6818:	strb.w	r3, [r4, #50]	; 0x32
}
    681c:	add	sp, #8
    681e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (isContiguous()) {
    6822:	ldrb.w	r2, [r4, #51]	; 0x33
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    6826:	ldrb	r3, [r0, #1]
        if (isContiguous()) {
    6828:	lsls	r2, r2, #25
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    682a:	ite	mi
    682c:	orrmi.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    6830:	andpl.w	r3, r3, #253	; 0xfd
    6834:	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    6836:	ldrd	r2, r3, [r4, #16]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    683a:	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    683e:	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    6840:	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    6842:	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    6846:	strd	r2, r3, [r0, #24]
    684a:	b.n	67d2 <ExFatFile::syncDir()+0x5e>
    684c:	.word	0x200147fc

00006850 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    6850:	push	{r4, lr}
  if (!isOpen()) {
    6852:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::sync() {
    6856:	mov	r4, r0
  if (!isOpen()) {
    6858:	cbnz	r3, 685e <ExFatFile::sync()+0xe>
    return true;
    685a:	movs	r0, #1
}
    685c:	pop	{r4, pc}
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    685e:	ldrsb.w	r2, [r0, #51]	; 0x33
    6862:	ldrb.w	r3, [r0, #51]	; 0x33
    6866:	cmp	r2, #0
    6868:	bge.n	687a <ExFatFile::sync()+0x2a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    686a:	and.w	r3, r3, #127	; 0x7f
    686e:	strb.w	r3, [r0, #51]	; 0x33
}
    6872:	ldmia.w	sp!, {r4, lr}
    return syncDir();
    6876:	b.w	6774 <ExFatFile::syncDir()>
  if (!m_vol->cacheSync()) {
    687a:	ldr	r0, [r0, #32]
    687c:	bl	65d6 <ExFatPartition::cacheSync()>
    6880:	cmp	r0, #0
    6882:	bne.n	685a <ExFatFile::sync()+0xa>
  m_error |= WRITE_ERROR;
    6884:	ldrb.w	r3, [r4, #50]	; 0x32
    6888:	orr.w	r3, r3, #1
    688c:	strb.w	r3, [r4, #50]	; 0x32
  return false;
    6890:	b.n	685c <ExFatFile::sync()+0xc>

00006892 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    6892:	push	{r3, r4, r5, r6, r7, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    6894:	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    6898:	mov	r4, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    689a:	lsls	r2, r3, #25
    689c:	bpl.n	691e <ExFatFile::addDirCluster()+0x8c>
    689e:	ldr	r0, [r0, #32]
    68a0:	bl	6544 <ExFatPartition::rootLength()>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    68a4:	ldr	r3, [r4, #32]
  dl += m_vol->bytesPerCluster();
    68a6:	ldr.w	r3, [r3, #1084]	; 0x43c
    68aa:	add	r0, r3
  if (dl >= 0X4000000) {
    68ac:	cmp.w	r0, #67108864	; 0x4000000
    68b0:	bcs.n	693e <ExFatFile::addDirCluster()+0xac>
  if (!addCluster()) {
    68b2:	mov	r0, r4
    68b4:	bl	65fc <ExFatFile::addCluster()>
    68b8:	cmp	r0, #0
    68ba:	beq.n	693e <ExFatFile::addDirCluster()+0xac>
  sector = m_vol->clusterStartSector(m_curCluster);
    68bc:	ldr	r3, [r4, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    68be:	movs	r6, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    68c0:	ldr	r5, [r4, #24]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    68c2:	movs	r7, #1
           ((cluster - 2) << m_sectorsPerClusterShift);
    68c4:	ldrb.w	r2, [r3, #1093]	; 0x445
    68c8:	subs	r5, #2
    68ca:	ldr.w	r3, [r3, #1068]	; 0x42c
    68ce:	lsls	r5, r2
    68d0:	add	r5, r3
    68d2:	ldr	r0, [r4, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    68d4:	ldrb.w	r3, [r0, #1093]	; 0x445
    68d8:	lsl.w	r3, r7, r3
    68dc:	cmp	r6, r3
    68de:	bcc.n	6922 <ExFatFile::addDirCluster()+0x90>
  if (!isRoot()) {
    68e0:	ldrb.w	r3, [r4, #49]	; 0x31
    68e4:	lsls	r3, r3, #25
    68e6:	bmi.n	6914 <ExFatFile::addDirCluster()+0x82>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    68e8:	ldrb.w	r3, [r4, #51]	; 0x33
    68ec:	orn	r3, r3, #127	; 0x7f
    68f0:	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    68f4:	ldr.w	r2, [r0, #1084]	; 0x43c
    68f8:	ldrd	r3, r1, [r4, #8]
    68fc:	adds	r3, r3, r2
    68fe:	adc.w	r1, r1, #0
    6902:	strd	r3, r1, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    6906:	ldrd	r3, r1, [r4, #16]
    690a:	adds	r3, r3, r2
    690c:	adc.w	r1, r1, #0
    6910:	strd	r3, r1, [r4, #16]
  return sync();
    6914:	mov	r0, r4
}
    6916:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return sync();
    691a:	b.w	6850 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    691e:	ldr	r0, [r0, #8]
    6920:	b.n	68a4 <ExFatFile::addDirCluster()+0x12>
    return m_dataCache.prepare(sector, option);
    6922:	movs	r2, #5
    6924:	adds	r1, r5, r6
    6926:	add.w	r0, r0, #528	; 0x210
    692a:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    692e:	cbz	r0, 693e <ExFatFile::addDirCluster()+0xac>
    memset(cache, 0, m_vol->bytesPerSector());
    6930:	mov.w	r2, #512	; 0x200
    6934:	movs	r1, #0
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    6936:	adds	r6, #1
    memset(cache, 0, m_vol->bytesPerSector());
    6938:	bl	a210 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    693c:	b.n	68d2 <ExFatFile::addDirCluster()+0x40>
}
    693e:	movs	r0, #0
    6940:	pop	{r3, r4, r5, r6, r7, pc}

00006942 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6942:	push	{r4, lr}
  if (!parent->isDir()) {
    6944:	ldrb.w	r3, [r1, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    6948:	mov	r4, r0
  if (!parent->isDir()) {
    694a:	tst.w	r3, #80	; 0x50
    694e:	beq.n	6986 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    6950:	movw	r3, #2562	; 0xa02
    6954:	bl	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    6958:	cbz	r0, 6986 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_attributes = FILE_ATTR_SUBDIR;
    695a:	movs	r3, #16
  if (!addDirCluster()) {
    695c:	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    695e:	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    6962:	bl	6892 <ExFatFile::addDirCluster()>
    6966:	cbz	r0, 6986 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x44>
  m_firstCluster = m_curCluster;
    6968:	ldr	r3, [r4, #24]
    696a:	mov	r0, r4
    696c:	movs	r2, #0
    696e:	str	r3, [r4, #28]
    6970:	movs	r3, #0
    6972:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    6976:	movs	r3, #193	; 0xc1
  return sync();
    6978:	mov	r0, r4
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    697a:	strb.w	r3, [r4, #51]	; 0x33
}
    697e:	ldmia.w	sp!, {r4, lr}
  return sync();
    6982:	b.w	6850 <ExFatFile::sync()>
}
    6986:	movs	r0, #0
    6988:	pop	{r4, pc}

0000698a <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    698a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    698e:	mov	r8, r3
    6990:	sub	sp, #88	; 0x58
    6992:	movs	r3, #0
    6994:	mov	r5, r0
    6996:	mov	r4, r1
    6998:	str	r2, [sp, #4]
    699a:	strh.w	r3, [sp, #20]
  ExFatFile() {}
    699e:	str	r3, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    69a0:	ldrb.w	r3, [r0, #49]	; 0x31
    69a4:	cbz	r3, 69ae <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x24>
  return false;
    69a6:	movs	r0, #0
}
    69a8:	add	sp, #88	; 0x58
    69aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (isOpen() || !parent->isDir()) {
    69ae:	ldrb.w	r3, [r1, #49]	; 0x31
    69b2:	tst.w	r3, #80	; 0x50
    69b6:	beq.n	69a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  if (isDirSeparator(*path)) {
    69b8:	ldrb	r3, [r2, #0]
    69ba:	cmp	r3, #47	; 0x2f
    69bc:	bne.n	69d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
    while (isDirSeparator(*path)) {
    69be:	ldr	r2, [sp, #4]
    69c0:	ldrb	r3, [r2, #0]
    69c2:	cmp	r3, #47	; 0x2f
    69c4:	beq.n	6a20 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x96>
    if (!tmpDir.openRoot(parent->m_vol)) {
    69c6:	ldr	r1, [r4, #32]
    69c8:	add	r0, sp, #32
    69ca:	bl	59c6 <ExFatFile::openRoot(ExFatVolume*)>
    69ce:	cmp	r0, #0
    69d0:	beq.n	69a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    parent = &tmpDir;
    69d2:	add	r4, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    69d4:	add	r3, sp, #4
    69d6:	add	r2, sp, #8
    69d8:	ldr	r1, [sp, #4]
    69da:	mov	r0, r5
    69dc:	bl	59ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    69e0:	cmp	r0, #0
    69e2:	beq.n	69a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    if (!*path) {
    69e4:	ldr	r3, [sp, #4]
    69e6:	ldrb	r3, [r3, #0]
    69e8:	cbz	r3, 6a3c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xb2>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    69ea:	movs	r3, #0
    69ec:	add	r2, sp, #8
    69ee:	mov	r1, r4
    69f0:	mov	r0, r5
    69f2:	bl	5cfc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    69f6:	cbz	r0, 6a26 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    69f8:	add	r6, sp, #32
    69fa:	mov	r2, r5
    69fc:	add.w	r3, r5, #48	; 0x30
    6a00:	mov	r4, r6
    6a02:	ldr	r0, [r2, #0]
    6a04:	adds	r2, #8
    6a06:	ldr.w	r1, [r2, #-4]
    6a0a:	mov	r7, r6
    6a0c:	cmp	r2, r3
    6a0e:	stmia	r7!, {r0, r1}
    6a10:	mov	r6, r7
    6a12:	bne.n	6a02 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x78>
    6a14:	ldr	r0, [r2, #0]
    6a16:	str	r0, [r7, #0]
    close();
    6a18:	mov	r0, r5
    6a1a:	bl	5972 <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    6a1e:	b.n	69d4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x4a>
      path++;
    6a20:	adds	r2, #1
    6a22:	str	r2, [sp, #4]
    6a24:	b.n	69be <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x34>
      if (!pFlag || !mkdir(parent, &fname)) {
    6a26:	cmp.w	r8, #0
    6a2a:	beq.n	69a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
    6a2c:	add	r2, sp, #8
    6a2e:	mov	r1, r4
    6a30:	mov	r0, r5
    6a32:	bl	6942 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6a36:	cmp	r0, #0
    6a38:	bne.n	69f8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x6e>
    6a3a:	b.n	69a6 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1c>
  return mkdir(parent, &fname);
    6a3c:	add	r2, sp, #8
    6a3e:	mov	r1, r4
    6a40:	mov	r0, r5
    6a42:	bl	6942 <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    6a46:	b.n	69a8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x1e>

00006a48 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    6a48:	push	{r4, r5, r6, r7, lr}
    6a4a:	mov	r4, r0
    6a4c:	sub	sp, #116	; 0x74
    6a4e:	movs	r0, #0
    6a50:	str	r0, [sp, #48]	; 0x30
    6a52:	str	r0, [sp, #104]	; 0x68
  if (!(isFile() || isSubDir())) {
    6a54:	ldrb.w	r0, [r4, #49]	; 0x31
    6a58:	tst.w	r0, #24
    6a5c:	bne.n	6a64 <ExFatFile::rename(ExFatFile*, char const*)+0x1c>
  return false;
    6a5e:	movs	r0, #0
}
    6a60:	add	sp, #116	; 0x74
    6a62:	pop	{r4, r5, r6, r7, pc}
  if (m_vol != dirFile->m_vol) {
    6a64:	ldr	r0, [r4, #32]
    6a66:	ldr	r3, [r1, #32]
    6a68:	cmp	r0, r3
    6a6a:	bne.n	6a5e <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    6a6c:	movw	r3, #2561	; 0xa01
    6a70:	mov	r0, sp
    6a72:	bl	604c <ExFatFile::open(ExFatFile*, char const*, int)>
    6a76:	cmp	r0, #0
    6a78:	beq.n	6a5e <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile = *this;
    6a7a:	add	r2, sp, #56	; 0x38
    6a7c:	mov	r3, r4
    6a7e:	add.w	r7, r4, #48	; 0x30
    6a82:	mov	r6, r2
    6a84:	ldr	r0, [r3, #0]
    6a86:	adds	r3, #8
    6a88:	ldr.w	r1, [r3, #-4]
    6a8c:	mov	r5, r2
    6a8e:	cmp	r3, r7
    6a90:	stmia	r5!, {r0, r1}
    6a92:	mov	r2, r5
    6a94:	bne.n	6a84 <ExFatFile::rename(ExFatFile*, char const*)+0x3c>
    6a96:	ldr	r0, [r3, #0]
  m_dirPos = file.m_dirPos;
    6a98:	add	r2, sp, #36	; 0x24
    6a9a:	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    6a9e:	str	r0, [r5, #0]
  m_dirPos = file.m_dirPos;
    6aa0:	ldmia	r2, {r0, r1, r2}
    6aa2:	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    6aa6:	ldrb.w	r3, [sp, #48]	; 0x30
  if (!sync()) {
    6aaa:	mov	r0, r4
  m_setCount = file.m_setCount;
    6aac:	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6ab0:	ldrb.w	r3, [r4, #51]	; 0x33
    6ab4:	orn	r3, r3, #127	; 0x7f
    6ab8:	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    6abc:	bl	6850 <ExFatFile::sync()>
    6ac0:	cmp	r0, #0
    6ac2:	beq.n	6a5e <ExFatFile::rename(ExFatFile*, char const*)+0x16>
  oldFile.m_firstCluster = 0;
    6ac4:	movs	r3, #0
  return oldFile.remove();
    6ac6:	mov	r0, r6
  oldFile.m_firstCluster = 0;
    6ac8:	str	r3, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    6aca:	movs	r3, #2
    6acc:	strb.w	r3, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    6ad0:	movs	r3, #8
    6ad2:	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    6ad6:	bl	6690 <ExFatFile::remove()>
    6ada:	b.n	6a60 <ExFatFile::rename(ExFatFile*, char const*)+0x18>

00006adc <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    6adc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    6ade:	ldrb.w	r2, [r0, #51]	; 0x33
    6ae2:	mov	r4, r0
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    6ae4:	lsls	r3, r2, #30
    6ae6:	bmi.n	6aee <ExFatFile::truncate()+0x12>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    6ae8:	movs	r0, #0
}
    6aea:	add	sp, #12
    6aec:	pop	{r4, r5, r6, r7, pc}
  if (m_firstCluster == 0) {
    6aee:	ldr	r3, [r0, #28]
    6af0:	cmp	r3, #0
    6af2:	beq.n	6ba2 <ExFatFile::truncate()+0xc6>
  if (isContiguous()) {
    6af4:	ands.w	r2, r2, #64	; 0x40
    if (m_curCluster) {
    6af8:	ldr	r1, [r0, #24]
  if (isContiguous()) {
    6afa:	beq.n	6b6c <ExFatFile::truncate()+0x90>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    6afc:	ldr	r0, [r0, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    6afe:	ldrb.w	r5, [r0, #1093]	; 0x445
    6b02:	ldrd	r2, r6, [r4, #8]
    6b06:	adds	r5, #9
    6b08:	subs	r2, #1
    6b0a:	uxtb	r5, r5
    6b0c:	adc.w	r6, r6, #4294967295
    6b10:	rsb	ip, r5, #32
    6b14:	sub.w	r7, r5, #32
    6b18:	lsrs	r2, r5
    6b1a:	lsl.w	ip, r6, ip
    6b1e:	lsr.w	r7, r6, r7
    6b22:	orr.w	r2, r2, ip
    6b26:	orrs	r2, r7
    6b28:	adds	r2, #1
    if (m_curCluster) {
    6b2a:	cbz	r1, 6b58 <ExFatFile::truncate()+0x7c>
      nc -= 1 + m_curCluster - m_firstCluster;
    6b2c:	subs	r3, #1
      toFree = m_curCluster + 1;
    6b2e:	adds	r5, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    6b30:	subs	r3, r3, r1
      toFree = m_curCluster + 1;
    6b32:	str	r5, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    6b34:	add	r2, r3
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6b36:	cbnz	r2, 6b5e <ExFatFile::truncate()+0x82>
  return sync();
    6b38:	mov	r0, r4
  m_dataLength = m_curPosition;
    6b3a:	ldrd	r2, r3, [r4]
    6b3e:	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    6b42:	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6b46:	ldrb.w	r3, [r4, #51]	; 0x33
    6b4a:	orn	r3, r3, #127	; 0x7f
    6b4e:	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    6b52:	bl	6850 <ExFatFile::sync()>
    6b56:	b.n	6aea <ExFatFile::truncate()+0xe>
      toFree = m_firstCluster;
    6b58:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6b5a:	str	r1, [r4, #28]
    6b5c:	b.n	6b36 <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    6b5e:	movs	r3, #0
    6b60:	ldr	r1, [sp, #4]
    6b62:	bl	61f4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
      if (!m_vol->freeChain(toFree)) {
    6b66:	cmp	r0, #0
    6b68:	bne.n	6b38 <ExFatFile::truncate()+0x5c>
    6b6a:	b.n	6ae8 <ExFatFile::truncate()+0xc>
    if (m_curCluster) {
    6b6c:	cbz	r1, 6b9c <ExFatFile::truncate()+0xc0>
      toFree = 0;
    6b6e:	str	r2, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6b70:	add	r2, sp, #4
    6b72:	ldr	r0, [r0, #32]
    6b74:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    6b78:	cmp	r0, #0
    6b7a:	blt.n	6ae8 <ExFatFile::truncate()+0xc>
      if (fg) {
    6b7c:	beq.n	6b8e <ExFatFile::truncate()+0xb2>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    6b7e:	mov.w	r2, #4294967295
    6b82:	ldr	r1, [r4, #24]
    6b84:	ldr	r0, [r4, #32]
    6b86:	bl	636e <ExFatPartition::fatPut(unsigned long, unsigned long)>
    6b8a:	cmp	r0, #0
    6b8c:	beq.n	6ae8 <ExFatFile::truncate()+0xc>
    if (toFree) {
    6b8e:	ldr	r1, [sp, #4]
    6b90:	cmp	r1, #0
    6b92:	beq.n	6b38 <ExFatFile::truncate()+0x5c>
      if (!m_vol->freeChain(toFree)) {
    6b94:	ldr	r0, [r4, #32]
    6b96:	bl	63a8 <ExFatPartition::freeChain(unsigned long)>
    6b9a:	b.n	6b66 <ExFatFile::truncate()+0x8a>
      toFree = m_firstCluster;
    6b9c:	str	r3, [sp, #4]
      m_firstCluster = 0;
    6b9e:	str	r1, [r0, #28]
    6ba0:	b.n	6b8e <ExFatFile::truncate()+0xb2>
      return true;
    6ba2:	movs	r0, #1
    6ba4:	b.n	6aea <ExFatFile::truncate()+0xe>
	...

00006ba8 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    6ba8:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6bac:	ldrb.w	r3, [r0, #51]	; 0x33
    6bb0:	mov	r8, r1
    6bb2:	mov	r4, r0
    6bb4:	mov	r9, r2

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    6bb6:	lsls	r1, r3, #30
    6bb8:	bpl.n	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6bba:	lsls	r2, r3, #28
    6bbc:	bmi.n	6bec <ExFatFile::write(void const*, unsigned int)+0x44>
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    6bbe:	mov	r7, r9
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6bc0:	add.w	sl, r4, #24
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6bc4:	mov.w	fp, #1
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6bc8:	ldrd	r5, r3, [r4]
  while (toWrite) {
    6bcc:	cbnz	r7, 6c0a <ExFatFile::write(void const*, unsigned int)+0x62>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    6bce:	ldrd	r1, r2, [r4, #8]
    6bd2:	cmp	r1, r5
    6bd4:	sbcs	r2, r3
    6bd6:	bcs.w	6d9c <ExFatFile::write(void const*, unsigned int)+0x1f4>
    m_dataLength = m_curPosition;
    6bda:	strd	r5, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6bde:	ldrb.w	r3, [r4, #51]	; 0x33
    6be2:	orn	r3, r3, #127	; 0x7f
    6be6:	strb.w	r3, [r4, #51]	; 0x33
    6bea:	b.n	6da6 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    if (!seekSet(m_validLength)) {
    6bec:	ldrd	r2, r3, [r0, #16]
    6bf0:	bl	5c1c <ExFatFile::seekSet(unsigned long long)>
    6bf4:	cmp	r0, #0
    6bf6:	bne.n	6bbe <ExFatFile::write(void const*, unsigned int)+0x16>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6bf8:	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    6bfc:	mov.w	r9, #0
  m_error |= WRITE_ERROR;
    6c00:	orr.w	r3, r3, #1
    6c04:	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    6c08:	b.n	6da6 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6c0a:	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    6c0c:	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    6c0e:	ldr.w	r3, [r0, #1080]	; 0x438
    6c12:	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    6c14:	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    6c18:	cbnz	r5, 6c64 <ExFatFile::write(void const*, unsigned int)+0xbc>
      if (m_curCluster != 0) {
    6c1a:	cmp	r1, #0
    6c1c:	beq.n	6cca <ExFatFile::write(void const*, unsigned int)+0x122>
        if (isContiguous()) {
    6c1e:	ldrb.w	r3, [r4, #51]	; 0x33
    6c22:	lsls	r3, r3, #25
    6c24:	bpl.n	6cbc <ExFatFile::write(void const*, unsigned int)+0x114>
    6c26:	ldrb.w	r0, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    6c2a:	ldrd	r3, r2, [r4, #8]
    6c2e:	adds	r0, #9
    6c30:	subs	r3, #1
    6c32:	uxtb	r0, r0
    6c34:	adc.w	r2, r2, #4294967295
    6c38:	rsb	lr, r0, #32
    6c3c:	sub.w	ip, r0, #32
    6c40:	lsrs	r3, r0
    6c42:	lsl.w	lr, r2, lr
    6c46:	lsr.w	ip, r2, ip
    6c4a:	ldr	r2, [r4, #28]
    6c4c:	orr.w	r3, r3, lr
    6c50:	orr.w	r3, r3, ip
    6c54:	add	r3, r2
          if (m_curCluster < lc) {
    6c56:	cmp	r3, r1
    6c58:	bhi.n	6cb6 <ExFatFile::write(void const*, unsigned int)+0x10e>
          if (!addCluster()) {
    6c5a:	mov	r0, r4
    6c5c:	bl	65fc <ExFatFile::addCluster()>
    6c60:	cmp	r0, #0
    6c62:	beq.n	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
    sector = m_vol->clusterStartSector(m_curCluster) +
    6c64:	ldr.w	ip, [r4, #32]
             (clusterOffset >> m_vol->bytesPerSectorShift());
    6c68:	lsrs	r3, r5, #9
           ((cluster - 2) << m_sectorsPerClusterShift);
    6c6a:	ldr	r1, [r4, #24]
    6c6c:	ldrb.w	r2, [ip, #1093]	; 0x445
    6c70:	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    6c72:	ldr.w	r0, [ip, #1068]	; 0x42c
    6c76:	lsls	r1, r2
    6c78:	add.w	r1, r1, r5, lsr #9
    6c7c:	add	r1, r0
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    6c7e:	cbnz	r6, 6ce2 <ExFatFile::write(void const*, unsigned int)+0x13a>
    6c80:	cmp.w	r7, #512	; 0x200
    6c84:	bcc.n	6ce2 <ExFatFile::write(void const*, unsigned int)+0x13a>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    6c86:	cmp.w	r7, #1024	; 0x400
    6c8a:	ldr.w	lr, [ip, #540]	; 0x21c
    6c8e:	ldr.w	r0, [ip, #532]	; 0x214
    6c92:	bcs.n	6d6a <ExFatFile::write(void const*, unsigned int)+0x1c2>
    if (isCached(sector)) {
    6c94:	cmp	r1, lr
    return m_blockDev->writeSector(sector, src);
    6c96:	mov	r2, r8
    m_sector = 0XFFFFFFFF;
    6c98:	ittt	eq
    6c9a:	moveq.w	r3, #4294967295
    m_status = 0;
    6c9e:	strbeq.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6ca2:	streq.w	r3, [ip, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    6ca6:	ldr	r3, [r0, #0]
    6ca8:	ldr	r3, [r3, #36]	; 0x24
    6caa:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    6cac:	cmp	r0, #0
    6cae:	beq.n	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
      n = m_vol->bytesPerSector();
    6cb0:	mov.w	r5, #512	; 0x200
    6cb4:	b.n	6d36 <ExFatFile::write(void const*, unsigned int)+0x18e>
            m_curCluster++;
    6cb6:	adds	r1, #1
    6cb8:	str	r1, [r4, #24]
        if (fg == 0) {
    6cba:	b.n	6c64 <ExFatFile::write(void const*, unsigned int)+0xbc>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    6cbc:	mov	r2, sl
    6cbe:	bl	62c8 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    6cc2:	cmp	r0, #0
    6cc4:	blt.n	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
        if (fg == 0) {
    6cc6:	beq.n	6c5a <ExFatFile::write(void const*, unsigned int)+0xb2>
    6cc8:	b.n	6c64 <ExFatFile::write(void const*, unsigned int)+0xbc>
        if (m_firstCluster == 0) {
    6cca:	ldr	r3, [r4, #28]
    6ccc:	cbnz	r3, 6cde <ExFatFile::write(void const*, unsigned int)+0x136>
          if (!addCluster()) {
    6cce:	mov	r0, r4
    6cd0:	bl	65fc <ExFatFile::addCluster()>
    6cd4:	cmp	r0, #0
    6cd6:	beq.n	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
          m_firstCluster = m_curCluster;
    6cd8:	ldr	r3, [r4, #24]
    6cda:	str	r3, [r4, #28]
    6cdc:	b.n	6c64 <ExFatFile::write(void const*, unsigned int)+0xbc>
          m_curCluster = m_firstCluster;
    6cde:	str	r3, [r4, #24]
    6ce0:	b.n	6c64 <ExFatFile::write(void const*, unsigned int)+0xbc>
      n = m_vol->bytesPerSector() - sectorOffset;
    6ce2:	rsb	r5, r6, #512	; 0x200
    6ce6:	cmp	r5, r7
    6ce8:	it	cs
    6cea:	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    6cec:	cmp	r6, #0
    6cee:	bne.n	6d66 <ExFatFile::write(void const*, unsigned int)+0x1be>
    6cf0:	ldr	r3, [r4, #20]
    6cf2:	ldr	r0, [r4, #0]
    6cf4:	str	r3, [sp, #4]
    6cf6:	ldr	r3, [r4, #16]
    6cf8:	ldr	r2, [r4, #4]
    6cfa:	cmp	r0, r3
    6cfc:	ldr	r3, [sp, #4]
    6cfe:	sbcs.w	r3, r2, r3
    6d02:	bcc.n	6d66 <ExFatFile::write(void const*, unsigned int)+0x1be>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    6d04:	movs	r2, #5
    return m_dataCache.prepare(sector, option);
    6d06:	add.w	r0, ip, #528	; 0x210
    6d0a:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    6d0e:	cmp	r0, #0
    6d10:	beq.w	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
      memcpy(dst, src, n);
    6d14:	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d16:	add	r6, r5
      memcpy(dst, src, n);
    6d18:	mov	r2, r5
    6d1a:	mov	r1, r8
    6d1c:	bl	a254 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    6d20:	cmp.w	r6, #512	; 0x200
    6d24:	ldr	r0, [r4, #32]
    6d26:	bne.n	6d36 <ExFatFile::write(void const*, unsigned int)+0x18e>
  bool dataCacheSync() {return m_dataCache.sync();}
    6d28:	add.w	r0, r0, #528	; 0x210
    6d2c:	bl	5654 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    6d30:	cmp	r0, #0
    6d32:	beq.w	6bf8 <ExFatFile::write(void const*, unsigned int)+0x50>
    src += n;
    6d36:	add	r8, r5
    toWrite -= n;
    6d38:	subs	r7, r7, r5
    m_curPosition += n;
    6d3a:	ldrd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    6d3e:	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    6d42:	adds	r3, r5, r3
    6d44:	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    6d48:	cmp	r0, r3
    6d4a:	sbcs	r1, r2
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6d4c:	itt	cc
    6d4e:	ldrbcc.w	r1, [r4, #51]	; 0x33
    6d52:	orncc	r1, r1, #127	; 0x7f
    m_curPosition += n;
    6d56:	strd	r3, r2, [r4]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    6d5a:	itt	cc
    6d5c:	strbcc.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    6d60:	strdcc	r3, r2, [r4, #16]
    6d64:	b.n	6bc8 <ExFatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6d66:	movs	r2, #1
    6d68:	b.n	6d06 <ExFatFile::write(void const*, unsigned int)+0x15e>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    6d6a:	lsl.w	r2, fp, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    6d6e:	subs	r3, r2, r3
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    6d70:	lsrs	r2, r7, #9
    6d72:	cmp	r3, r2
    6d74:	it	cs
    6d76:	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    6d78:	cmp	r1, lr
      n = ns << m_vol->bytesPerSectorShift();
    6d7a:	mov.w	r5, r3, lsl #9
    6d7e:	bhi.n	6d92 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    6d80:	adds	r2, r1, r3
    6d82:	cmp	r2, lr
    m_sector = 0XFFFFFFFF;
    6d84:	ittt	hi
    6d86:	movhi.w	r2, #4294967295
    m_status = 0;
    6d8a:	strbhi.w	r6, [ip, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    6d8e:	strhi.w	r2, [ip, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    6d92:	ldr	r2, [r0, #0]
    6d94:	ldr	r6, [r2, #40]	; 0x28
    6d96:	mov	r2, r8
    6d98:	blx	r6
    6d9a:	b.n	6d30 <ExFatFile::write(void const*, unsigned int)+0x188>
  } else if (FsDateTime::callback) {
    6d9c:	ldr	r3, [pc, #16]	; (6db0 <ExFatFile::write(void const*, unsigned int)+0x208>)
    6d9e:	ldr	r3, [r3, #0]
    6da0:	cmp	r3, #0
    6da2:	bne.w	6bde <ExFatFile::write(void const*, unsigned int)+0x36>
}
    6da6:	mov	r0, r9
    6da8:	add	sp, #12
    6daa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6dae:	nop
    6db0:	.word	0x200147fc

00006db4 <FatFile::cacheDir(unsigned short)>:

  // private functions

  bool addCluster();
  bool addDirCluster();
  DirFat_t* cacheDir(uint16_t index) {
    6db4:	push	{r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6db6:	lsls	r1, r1, #5
  DirFat_t* cacheDir(uint16_t index) {
    6db8:	mov	r4, r0
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6dba:	bl	72a6 <FatFile::seekSet(unsigned long)>
    6dbe:	cbz	r0, 6dcc <FatFile::cacheDir(unsigned short)+0x18>
    6dc0:	mov	r0, r4
    6dc2:	movs	r1, #0
  }
    6dc4:	ldmia.w	sp!, {r4, lr}
    return seekSet(32UL*index) ? readDirCache() : nullptr;
    6dc8:	b.w	7268 <FatFile::readDirCache(bool)>
  }
    6dcc:	pop	{r4, pc}

00006dce <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6dce:	cmp	r2, #4
    6dd0:	bhi.n	6ddc <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
    6dd2:	add.w	r2, r1, r2, lsl #1
    6dd6:	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
    6dda:	bx	lr
  } else if (i < 11) {
    6ddc:	cmp	r2, #10
    6dde:	bhi.n	6de8 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
    6de0:	add.w	r2, r1, r2, lsl #1
    6de4:	ldrh	r0, [r2, #4]
    6de6:	bx	lr
  } else if (i < 13) {
    6de8:	cmp	r2, #12
    return getLe16(ldir->unicode3 + 2*i - 22);
    6dea:	itte	ls
    6dec:	addls.w	r2, r1, r2, lsl #1
    6df0:	ldrhls	r0, [r2, #6]
  }
  DBG_HALT_IF(i >= 13);
  return 0;
    6df2:	movhi	r0, #0
}
    6df4:	bx	lr

00006df6 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
    6df6:	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
    6df8:	ldrb	r4, [r0, #0]
    6dfa:	mov	r5, r1
    6dfc:	mov	r7, r2
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
    6dfe:	cbz	r4, 6e70 <FatFile::getSFN(char*, unsigned int)+0x7a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
    6e00:	ands.w	r4, r4, #96	; 0x60
    6e04:	beq.n	6e16 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
    6e06:	cmp	r2, #1
    6e08:	bls.n	6e70 <FatFile::getSFN(char*, unsigned int)+0x7a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
    6e0a:	movs	r3, #47	; 0x2f
    name[1] = '\0';
    return 1;
    6e0c:	movs	r0, #1
    name[0] = '/';
    6e0e:	strb	r3, [r1, #0]
    name[1] = '\0';
    6e10:	movs	r3, #0
    6e12:	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
    6e14:	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    6e16:	mov	r1, r4
    6e18:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    6e1c:	cbz	r0, 6e70 <FatFile::getSFN(char*, unsigned int)+0x7a>
  ptr = dir->name;
    6e1e:	mov	r6, r0
    6e20:	mov	r1, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
    6e22:	movs	r2, #8
    if (i == 8) {
    6e24:	cmp	r1, #8
      if (*ptr == ' ') {
    6e26:	ldrb	r3, [r6, #0]
    if (i == 8) {
    6e28:	bne.n	6e42 <FatFile::getSFN(char*, unsigned int)+0x4c>
      if (*ptr == ' ') {
    6e2a:	cmp	r3, #32
    6e2c:	beq.n	6e68 <FatFile::getSFN(char*, unsigned int)+0x72>
      lcBit = FAT_CASE_LC_EXT;
    6e2e:	movs	r2, #16
      c = '.';
    6e30:	movs	r3, #46	; 0x2e
    if ((j + 1u) >= size) {
    6e32:	mov	ip, r4
    6e34:	adds	r4, #1
    6e36:	cmp	r4, r7
    6e38:	bcs.n	6e70 <FatFile::getSFN(char*, unsigned int)+0x7a>
    name[j++] = c;
    6e3a:	uxtb	r4, r4
    6e3c:	strb.w	r3, [r5, ip]
    6e40:	b.n	6e62 <FatFile::getSFN(char*, unsigned int)+0x6c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6e42:	sub.w	ip, r3, #65	; 0x41
      c = *ptr++;
    6e46:	adds	r6, #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
    6e48:	cmp.w	ip, #25
    6e4c:	bhi.n	6e5e <FatFile::getSFN(char*, unsigned int)+0x68>
    6e4e:	ldrb.w	ip, [r0, #12]
    6e52:	tst.w	r2, ip
    6e56:	beq.n	6e32 <FatFile::getSFN(char*, unsigned int)+0x3c>
        c += 'a' - 'A';
    6e58:	adds	r3, #32
    6e5a:	uxtb	r3, r3
    6e5c:	b.n	6e32 <FatFile::getSFN(char*, unsigned int)+0x3c>
      if (c == ' ') {
    6e5e:	cmp	r3, #32
    6e60:	bne.n	6e32 <FatFile::getSFN(char*, unsigned int)+0x3c>
  for (uint8_t i = 0; i < 12; i++) {
    6e62:	adds	r1, #1
    6e64:	cmp	r1, #12
    6e66:	bne.n	6e24 <FatFile::getSFN(char*, unsigned int)+0x2e>
  name[j] = '\0';
    6e68:	movs	r3, #0
    6e6a:	mov	r0, r4
    6e6c:	strb	r3, [r5, r4]
  return j;
    6e6e:	b.n	6e14 <FatFile::getSFN(char*, unsigned int)+0x1e>
  name[0] = '\0';
    6e70:	movs	r0, #0
    6e72:	strb	r0, [r5, #0]
  return 0;
    6e74:	b.n	6e14 <FatFile::getSFN(char*, unsigned int)+0x1e>
	...

00006e78 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
    6e78:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
    6e7c:	movs	r5, #0
    6e7e:	sub	sp, #44	; 0x2c
  if (!isOpen()) {
    6e80:	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
    6e82:	mov	r6, r0
    6e84:	mov	r8, r1
    6e86:	mov	r7, r2
    6e88:	str	r5, [sp, #4]
  if (!isOpen()) {
    6e8a:	cbz	r3, 6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
  if (!isLFN()) {
    6e8c:	ldrb	r3, [r0, #3]
    6e8e:	cbnz	r3, 6e9a <FatFile::getName8(char*, unsigned int)+0x22>
    return getSFN(name, size);
    6e90:	bl	6df6 <FatFile::getSFN(char*, unsigned int)>
}
    6e94:	add	sp, #44	; 0x2c
    6e96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dir.openCluster(this)) {
    6e9a:	mov	r1, r0
    6e9c:	add	r0, sp, #4
    6e9e:	bl	708e <FatFile::openCluster(FatFile*)>
    6ea2:	cmp	r0, #0
    6ea4:	bne.n	6f52 <FatFile::getName8(char*, unsigned int)+0xda>
  *name = 0;
    6ea6:	movs	r0, #0
    6ea8:	strb.w	r0, [r8]
  return 0;
    6eac:	b.n	6e94 <FatFile::getName8(char*, unsigned int)+0x1c>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
    6eae:	ldrh	r1, [r6, #4]
    6eb0:	add	r0, sp, #4
    6eb2:	sub.w	r1, r1, r9
    6eb6:	uxth	r1, r1
    6eb8:	bl	6db4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    6ebc:	mov	sl, r0
    6ebe:	cmp	r0, #0
    6ec0:	beq.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    6ec2:	ldrb	r3, [r0, #11]
    6ec4:	cmp	r3, #15
    6ec6:	bne.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    6ec8:	ldrb	r3, [r0, #0]
    6eca:	and.w	r3, r3, #31
    6ece:	cmp	fp, r3
    6ed0:	bne.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    6ed2:	mov.w	fp, #0
      uint16_t c = getLfnChar(ldir, i);
    6ed6:	uxtb.w	r2, fp
    6eda:	mov	r1, sl
    6edc:	mov	r0, r6
    6ede:	bl	6dce <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
    6ee2:	cbz	r5, 6f2e <FatFile::getName8(char*, unsigned int)+0xb6>
    return 0XDC00 <= c && c <= 0XDFFF;
    6ee4:	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    6ee8:	uxth	r2, r2
    6eea:	cmp.w	r2, #1024	; 0x400
    6eee:	bcs.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    6ef0:	ldr	r3, [pc, #108]	; (6f60 <FatFile::getName8(char*, unsigned int)+0xe8>)
    6ef2:	ubfx	r0, r0, #0, #10
    6ef6:	and.w	r5, r3, r5, lsl #10
    6efa:	orrs	r0, r5
    6efc:	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f00:	mov	r1, r4
    6f02:	mov	r2, r7
    6f04:	bl	5538 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    6f08:	mov	r4, r0
    6f0a:	cmp	r0, #0
    6f0c:	beq.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    6f0e:	movs	r5, #0
    for (uint8_t i = 0; i < 13; i++) {
    6f10:	add.w	fp, fp, #1
    6f14:	cmp.w	fp, #13
    6f18:	bne.n	6ed6 <FatFile::getName8(char*, unsigned int)+0x5e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    6f1a:	add.w	r9, r9, #1
    6f1e:	uxth.w	r9, r9
    6f22:	uxtb.w	fp, r9
    6f26:	ldrb	r3, [r6, #3]
    6f28:	cmp	r3, fp
    6f2a:	bcs.n	6eae <FatFile::getName8(char*, unsigned int)+0x36>
 done:
    6f2c:	b.n	6f3e <FatFile::getName8(char*, unsigned int)+0xc6>
    return 0XD800 <= c && c <= 0XDFFF;
    6f2e:	add.w	r2, r0, #10240	; 0x2800
    6f32:	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    6f34:	cmp.w	r2, #2048	; 0x800
    6f38:	bcc.n	6f48 <FatFile::getName8(char*, unsigned int)+0xd0>
        if (c == 0) {
    6f3a:	cmp	r0, #0
    6f3c:	bne.n	6f00 <FatFile::getName8(char*, unsigned int)+0x88>
  *str = '\0';
    6f3e:	movs	r3, #0
  return str - name;
    6f40:	sub.w	r0, r4, r8
  *str = '\0';
    6f44:	strb	r3, [r4, #0]
  return str - name;
    6f46:	b.n	6e94 <FatFile::getName8(char*, unsigned int)+0x1c>
      } else if (FsUtf::isHighSurrogate(c)) {
    6f48:	cmp.w	r2, #1024	; 0x400
    6f4c:	bcs.n	6ea6 <FatFile::getName8(char*, unsigned int)+0x2e>
    6f4e:	mov	r5, r0
    6f50:	b.n	6f10 <FatFile::getName8(char*, unsigned int)+0x98>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f52:	subs	r7, #1
  char* str = name;
    6f54:	mov	r4, r8
    6f56:	mov.w	r9, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    6f5a:	add	r7, r8
    6f5c:	b.n	6f22 <FatFile::getName8(char*, unsigned int)+0xaa>
    6f5e:	nop
    6f60:	.word	0x000ffc00

00006f64 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
    6f64:	b.w	6e78 <FatFile::getName8(char*, unsigned int)>

00006f68 <FatFile::openRoot(FatVolume*) [clone .part.0]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    6f68:	push	{r3, r4, r5, lr}
    6f6a:	mov	r5, r1
    6f6c:	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    6f6e:	movs	r2, #36	; 0x24
    6f70:	movs	r1, #0
    6f72:	bl	a210 <memset>

  m_vol = vol;
    6f76:	str	r5, [r4, #8]
  uint32_t fatStartSector() const {
    return m_fatStartSector;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
    6f78:	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    6f7a:	cmp	r3, #16
    6f7c:	beq.n	6f86 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x1e>
    6f7e:	cmp	r3, #32
    6f80:	beq.n	6f90 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x28>
    6f82:	cmp	r3, #12
    6f84:	bne.n	6f94 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x2c>
    6f86:	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    6f88:	movs	r0, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    6f8a:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    6f8c:	strb	r0, [r4, #2]
  return true;

 fail:
  return false;
}
    6f8e:	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
    6f90:	movs	r3, #64	; 0x40
    6f92:	b.n	6f88 <FatFile::openRoot(FatVolume*) [clone .part.0]+0x20>
    6f94:	movs	r0, #0
    6f96:	b.n	6f8e <FatFile::openRoot(FatVolume*) [clone .part.0]+0x26>

00006f98 <FatPartition::cacheSync()>:
  FsCache m_fatCache;
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    6f98:	push	{r4, lr}
    6f9a:	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    6f9c:	adds	r0, #40	; 0x28
    6f9e:	bl	5654 <FsCache::sync()>
    6fa2:	cbz	r0, 6fba <FatPartition::cacheSync()+0x22>
    6fa4:	add.w	r0, r4, #568	; 0x238
    6fa8:	bl	5654 <FsCache::sync()>
    6fac:	cbz	r0, 6fba <FatPartition::cacheSync()+0x22>
  bool cacheSync() {
    6fae:	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    6fb0:	ldr	r3, [r0, #0]
  }
    6fb2:	ldmia.w	sp!, {r4, lr}
    return m_blockDev->syncDevice();
    6fb6:	ldr	r3, [r3, #32]
    6fb8:	bx	r3
  }
    6fba:	movs	r0, #0
    6fbc:	pop	{r4, pc}

00006fbe <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    6fbe:	mov	r2, r0
bool FatFile::addCluster() {
    6fc0:	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    6fc2:	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    6fc6:	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    6fc8:	ldr	r0, [r0, #8]
    6fca:	mov	r1, r5
    6fcc:	bl	7d6c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    6fd0:	cbz	r0, 6fe4 <FatFile::addCluster()+0x26>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6fd2:	ldrb	r3, [r4, #2]
  if (cc == 0) {
    6fd4:	cbnz	r5, 6fe6 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    6fd6:	orr.w	r3, r3, #64	; 0x40
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6fda:	strb	r3, [r4, #2]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6fdc:	ldrb	r3, [r4, #2]
    6fde:	orn	r3, r3, #127	; 0x7f
    6fe2:	strb	r3, [r4, #2]
}
    6fe4:	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
    6fe6:	adds	r5, #1
    6fe8:	ldr	r2, [r4, #16]
    6fea:	cmp	r2, r5
    6fec:	beq.n	6fdc <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    6fee:	bic.w	r3, r3, #64	; 0x40
    6ff2:	b.n	6fda <FatFile::addCluster()+0x1c>

00006ff4 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    6ff4:	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    6ff6:	ldrb	r5, [r0, #0]
bool FatFile::addDirCluster() {
    6ff8:	mov	r4, r0
  if (isRootFixed()) {
    6ffa:	ands.w	r5, r5, #32
    6ffe:	beq.n	7006 <FatFile::addDirCluster()+0x12>
  return false;
    7000:	movs	r6, #0
}
    7002:	mov	r0, r6
    7004:	pop	{r3, r4, r5, r6, r7, pc}
  if (m_curPosition >= 512UL*4095) {
    7006:	ldr	r2, [r0, #20]
    7008:	ldr	r3, [pc, #84]	; (7060 <FatFile::addDirCluster()+0x6c>)
    700a:	cmp	r2, r3
    700c:	bcs.n	7000 <FatFile::addDirCluster()+0xc>
  if (!addCluster()) {
    700e:	bl	6fbe <FatFile::addCluster()>
    7012:	mov	r6, r0
    7014:	cmp	r0, #0
    7016:	beq.n	7000 <FatFile::addDirCluster()+0xc>
  sector = m_vol->clusterStartSector(m_curCluster);
    7018:	ldr	r2, [r4, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    701a:	ldr	r3, [r4, #16]
    701c:	ldrb	r1, [r2, #6]
    701e:	subs	r3, #2
    7020:	ldr	r7, [r2, #20]
    7022:	lsls	r3, r1
    7024:	add	r7, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    7026:	ldr	r0, [r4, #8]
    7028:	uxtb	r1, r5
    702a:	ldrb	r3, [r0, #4]
    702c:	cmp	r3, r1
    702e:	bhi.n	7042 <FatFile::addDirCluster()+0x4e>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    7030:	ldrb	r2, [r0, #6]
    7032:	mov.w	r3, #512	; 0x200
    7036:	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    7038:	ldr	r2, [r4, #20]
    703a:	uxtah	r3, r2, r3
    703e:	str	r3, [r4, #20]
  return true;
    7040:	b.n	7002 <FatFile::addDirCluster()+0xe>
    return m_cache.prepare(sector, options);
    7042:	movs	r2, #5
    7044:	add	r1, r7
    7046:	adds	r0, #40	; 0x28
    if (!pc) {
    7048:	adds	r5, #1
    704a:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    704e:	cmp	r0, #0
    7050:	beq.n	7000 <FatFile::addDirCluster()+0xc>
    memset(pc, 0, m_vol->bytesPerSector());
    7052:	mov.w	r2, #512	; 0x200
    7056:	movs	r1, #0
    7058:	bl	a210 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    705c:	b.n	7026 <FatFile::addDirCluster()+0x32>
    705e:	nop
    7060:	.word	0x001ffe00

00007064 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    7064:	push	{r4, lr}
    7066:	mov	r4, r0
    7068:	ldr	r0, [r0, #8]
    706a:	mov	r2, r1
    706c:	adds	r0, #40	; 0x28
    706e:	ldr	r1, [r4, #24]
    7070:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7074:	cbz	r0, 7080 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    7076:	ldrh	r3, [r4, #4]
    7078:	and.w	r3, r3, #15
    707c:	add.w	r0, r0, r3, lsl #5
}
    7080:	pop	{r4, pc}

00007082 <FatFile::openRoot(FatVolume*)>:
  if (isOpen()) {
    7082:	ldrb	r3, [r0, #0]
    7084:	cbnz	r3, 708a <FatFile::openRoot(FatVolume*)+0x8>
    7086:	b.w	6f68 <FatFile::openRoot(FatVolume*) [clone .part.0]>
}
    708a:	movs	r0, #0
    708c:	bx	lr

0000708e <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
    708e:	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
    7090:	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    7092:	mov	r4, r0
    7094:	mov	r5, r1
  if (file->m_dirCluster == 0) {
    7096:	cbnz	r3, 70a2 <FatFile::openCluster(FatFile*)+0x14>
    return openRoot(file->m_vol);
    7098:	ldr	r1, [r1, #8]
}
    709a:	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
    709e:	b.w	7082 <FatFile::openRoot(FatVolume*)>
  memset(this, 0, sizeof(FatFile));
    70a2:	movs	r2, #36	; 0x24
    70a4:	movs	r1, #0
    70a6:	bl	a210 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
    70aa:	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    70ac:	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    70ae:	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
    70b0:	strb	r0, [r4, #2]
  m_vol = file->m_vol;
    70b2:	ldr	r3, [r5, #8]
    70b4:	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    70b6:	ldr	r3, [r5, #12]
    70b8:	str	r3, [r4, #32]
}
    70ba:	pop	{r3, r4, r5, pc}

000070bc <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    70bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c0:	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    70c4:	ldrb	r3, [r0, #2]
    70c6:	mov	r4, r0
    70c8:	sub	sp, #12
    70ca:	mov	r8, r1
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
    70cc:	lsls	r0, r3, #31
int FatFile::read(void* buf, size_t nbyte) {
    70ce:	mov	r5, r2
  if (!isReadable()) {
    70d0:	bpl.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    70d2:	ldrb	r3, [r4, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    70d4:	lsls	r1, r3, #28
    70d6:	bpl.n	7100 <FatFile::read(void*, unsigned int)+0x44>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    70d8:	ldr	r3, [r4, #28]
    70da:	ldr	r2, [r4, #20]
    70dc:	subs	r3, r3, r2
    70de:	cmp	r5, r3
    70e0:	it	cs
    70e2:	movcs	r5, r3
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    70e4:	add.w	r3, r4, #16
  toRead = nbyte;
    70e8:	mov	r6, r5
  uint8_t sectorOfCluster = 0;
    70ea:	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    70ee:	vmov	s16, r3
  while (toRead) {
    70f2:	cbnz	r6, 7112 <FatFile::read(void*, unsigned int)+0x56>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    70f4:	subs	r0, r5, r6

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    70f6:	add	sp, #12
    70f8:	vpop	{d8}
    70fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (isRootFixed()) {
    7100:	lsls	r2, r3, #26
    7102:	bpl.n	70e4 <FatFile::read(void*, unsigned int)+0x28>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    7104:	ldr	r3, [r4, #8]
    7106:	ldrh	r2, [r3, #10]
    7108:	ldr	r3, [r4, #20]
    uint16_t tmp16 =
    710a:	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    710e:	uxth	r3, r3
    7110:	b.n	70de <FatFile::read(void*, unsigned int)+0x22>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    7112:	ldrb	r2, [r4, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7114:	ldr	r7, [r4, #20]
    if (isRootFixed()) {
    7116:	lsls	r3, r2, #26
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    7118:	ldr	r0, [r4, #8]
    711a:	ubfx	fp, r7, #0, #9
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    711e:	mov.w	r1, r7, lsr #9
    if (isRootFixed()) {
    7122:	bpl.n	715c <FatFile::read(void*, unsigned int)+0xa0>
      sector = m_vol->rootDirStart()
    7124:	ldr	r2, [r0, #32]
    7126:	add	r1, r2
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7128:	ldr.w	sl, [r4, #8]
        || sector == m_vol->cacheSectorNumber()) {
    712c:	cmp.w	fp, #0
    7130:	bne.n	71c4 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    7132:	cmp.w	r6, #512	; 0x200
    7136:	bcc.n	71c4 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    7138:	ldr.w	r2, [sl, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    713c:	cmp	r1, r2
    713e:	beq.n	71c4 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    7140:	cmp.w	r6, #1024	; 0x400
    7144:	bcs.n	71f4 <FatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    7146:	ldr.w	r0, [sl, #44]	; 0x2c
    714a:	mov	r2, r8
    714c:	ldr	r3, [r0, #0]
    714e:	ldr	r3, [r3, #16]
    7150:	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    7152:	cmp	r0, #0
    7154:	beq.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>
      n = m_vol->bytesPerSector();
    7156:	mov.w	r7, #512	; 0x200
    715a:	b.n	71e8 <FatFile::read(void*, unsigned int)+0x12c>
    return (position >> 9) & m_clusterSectorMask;
    715c:	ldrb.w	r9, [r0, #5]
    7160:	and.w	r9, r9, r1
      if (offset == 0 && sectorOfCluster == 0) {
    7164:	cmp.w	fp, #0
    7168:	bne.n	717c <FatFile::read(void*, unsigned int)+0xc0>
    716a:	cmp.w	r9, #0
    716e:	bne.n	717c <FatFile::read(void*, unsigned int)+0xc0>
        if (m_curPosition == 0) {
    7170:	cbnz	r7, 718e <FatFile::read(void*, unsigned int)+0xd2>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    7172:	lsls	r2, r2, #25
    return m_rootDirStart;
    7174:	ite	mi
    7176:	ldrmi	r2, [r0, #32]
    7178:	ldrpl	r2, [r4, #32]
    717a:	str	r2, [r4, #16]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    717c:	ldr	r2, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    717e:	ldr	r1, [r4, #16]
    7180:	ldrb	r0, [r2, #6]
    7182:	subs	r1, #2
    7184:	ldr	r2, [r2, #20]
    7186:	lsls	r1, r0
    7188:	add	r1, r2
    718a:	add	r1, r9
    718c:	b.n	7128 <FatFile::read(void*, unsigned int)+0x6c>
        } else if (isFile() && isContiguous()) {
    718e:	lsls	r3, r2, #28
          m_curCluster++;
    7190:	ldr	r1, [r4, #16]
        } else if (isFile() && isContiguous()) {
    7192:	bpl.n	71a0 <FatFile::read(void*, unsigned int)+0xe4>
    7194:	ldrb	r2, [r4, #2]
    7196:	lsls	r7, r2, #25
    7198:	bpl.n	71a0 <FatFile::read(void*, unsigned int)+0xe4>
          m_curCluster++;
    719a:	adds	r1, #1
    719c:	str	r1, [r4, #16]
    719e:	b.n	717c <FatFile::read(void*, unsigned int)+0xc0>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    71a0:	vmov	r2, s16
    71a4:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    71a8:	cmp	r0, #0
    71aa:	blt.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>
          if (fg == 0) {
    71ac:	bne.n	717c <FatFile::read(void*, unsigned int)+0xc0>
            if (isDir()) {
    71ae:	ldrb	r3, [r4, #0]
    71b0:	tst.w	r3, #112	; 0x70
    71b4:	bne.n	70f4 <FatFile::read(void*, unsigned int)+0x38>
  m_error |= READ_ERROR;
    71b6:	ldrb	r3, [r4, #1]
  return -1;
    71b8:	mov.w	r0, #4294967295
  m_error |= READ_ERROR;
    71bc:	orr.w	r3, r3, #2
    71c0:	strb	r3, [r4, #1]
  return -1;
    71c2:	b.n	70f6 <FatFile::read(void*, unsigned int)+0x3a>
      n = m_vol->bytesPerSector() - offset;
    71c4:	rsb	r7, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    71c8:	movs	r2, #0
    71ca:	add.w	r0, sl, #40	; 0x28
    71ce:	cmp	r7, r6
    71d0:	it	cs
    71d2:	movcs	r7, r6
    71d4:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    71d8:	cmp	r0, #0
    71da:	beq.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    71dc:	add.w	r1, r0, fp
    71e0:	mov	r2, r7
    71e2:	mov	r0, r8
    71e4:	bl	a254 <memcpy>
    m_curPosition += n;
    71e8:	ldr	r3, [r4, #20]
    dst += n;
    71ea:	add	r8, r7
    toRead -= n;
    71ec:	subs	r6, r6, r7
    m_curPosition += n;
    71ee:	add	r3, r7
    71f0:	str	r3, [r4, #20]
    toRead -= n;
    71f2:	b.n	70f2 <FatFile::read(void*, unsigned int)+0x36>
      if (!isRootFixed()) {
    71f4:	ldrb	r0, [r4, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    71f6:	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    71f8:	lsls	r0, r0, #26
    71fa:	bmi.n	720a <FatFile::read(void*, unsigned int)+0x14e>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    71fc:	ldrb.w	r0, [sl, #4]
    7200:	sub.w	r0, r0, r9
    7204:	cmp	r3, r0
    7206:	it	cs
    7208:	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    720a:	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    720c:	mov.w	r7, r3, lsl #9
    7210:	bls.n	7226 <FatFile::read(void*, unsigned int)+0x16a>
    return m_blockDev->readSectors(sector, dst, count);
    7212:	ldr.w	r0, [sl, #44]	; 0x2c
    7216:	ldr	r2, [r0, #0]
    7218:	ldr.w	sl, [r2, #20]
    721c:	mov	r2, r8
    721e:	blx	sl
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    7220:	cmp	r0, #0
    7222:	bne.n	71e8 <FatFile::read(void*, unsigned int)+0x12c>
    7224:	b.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>
    return sector <= m_sector && m_sector < (sector + count);
    7226:	adds	r0, r1, r3
    7228:	cmp	r2, r0
    722a:	bcs.n	7212 <FatFile::read(void*, unsigned int)+0x156>
    if (isCached(sector, count) && !sync()) {
    722c:	add.w	r0, sl, #40	; 0x28
    7230:	strd	r1, r3, [sp]
    7234:	bl	5654 <FsCache::sync()>
    7238:	ldrd	r1, r3, [sp]
    723c:	cmp	r0, #0
    723e:	bne.n	7212 <FatFile::read(void*, unsigned int)+0x156>
    7240:	b.n	71b6 <FatFile::read(void*, unsigned int)+0xfa>

00007242 <FatFile::peek()>:
int FatFile::peek() {
    7242:	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
    7244:	movs	r2, #1
    7246:	add.w	r1, sp, #7
    724a:	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    724c:	ldrd	r5, r6, [r0, #16]
    7250:	bl	70bc <FatFile::read(void*, unsigned int)>
    7254:	cmp	r0, #1
    7256:	ite	eq
    7258:	ldrbeq.w	r0, [sp, #7]
    725c:	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    7260:	strd	r5, r6, [r4, #16]
}
    7264:	add	sp, #8
    7266:	pop	{r4, r5, r6, pc}

00007268 <FatFile::readDirCache(bool)>:
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7268:	ldr	r3, [r0, #20]

  if (i == 0 || !skipReadOk) {
    726a:	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    726e:	push	{r0, r1, r2, r4, r5, lr}
    7270:	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    7272:	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    7276:	beq.n	727a <FatFile::readDirCache(bool)+0x12>
    7278:	cbnz	r1, 72a2 <FatFile::readDirCache(bool)+0x3a>
    int8_t n = read(&n, 1);
    727a:	movs	r2, #1
    727c:	add.w	r1, sp, #7
    7280:	mov	r0, r4
    7282:	bl	70bc <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    7286:	sxtb	r0, r0
    7288:	cmp	r0, #1
    728a:	beq.n	7292 <FatFile::readDirCache(bool)+0x2a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    728c:	movs	r0, #0
}
    728e:	add	sp, #12
    7290:	pop	{r4, r5, pc}
    m_curPosition += FS_DIR_SIZE - 1;
    7292:	ldr	r3, [r4, #20]
    7294:	adds	r3, #31
    return m_buffer;
    7296:	ldr	r0, [r4, #8]
    m_curPosition += FS_DIR_SIZE;
    7298:	str	r3, [r4, #20]
    729a:	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    729c:	add.w	r0, r0, r5, lsl #5
    72a0:	b.n	728e <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    72a2:	adds	r3, #32
    72a4:	b.n	7296 <FatFile::readDirCache(bool)+0x2e>

000072a6 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    72a6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    72aa:	mov	r5, r1
  bool isOpen() const {return m_attributes;}
    72ac:	ldrb	r1, [r0, #0]
    72ae:	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    72b0:	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    72b2:	cbz	r1, 72d6 <FatFile::seekSet(unsigned long)+0x30>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    72b4:	ldr	r0, [r0, #20]
    72b6:	cmp	r0, r5
    72b8:	beq.n	72c8 <FatFile::seekSet(unsigned long)+0x22>
    return true;
  }
  if (pos == 0) {
    72ba:	cbnz	r5, 72cc <FatFile::seekSet(unsigned long)+0x26>
    // set position to start of file
    m_curCluster = 0;
    72bc:	str	r5, [r4, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    72be:	ldrb	r3, [r4, #2]
  m_curPosition = pos;
    72c0:	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    72c2:	bic.w	r3, r3, #32
    72c6:	strb	r3, [r4, #2]
    return true;
    72c8:	movs	r0, #1
    72ca:	b.n	72da <FatFile::seekSet(unsigned long)+0x34>
  if (isFile()) {
    72cc:	lsls	r3, r1, #28
    72ce:	bpl.n	72de <FatFile::seekSet(unsigned long)+0x38>
    if (pos > m_fileSize) {
    72d0:	ldr	r3, [r4, #28]
    72d2:	cmp	r3, r5
    72d4:	bcs.n	72ee <FatFile::seekSet(unsigned long)+0x48>
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    72d6:	movs	r0, #0
  m_curCluster = tmp;
    72d8:	str	r7, [r4, #16]
}
    72da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
    72de:	lsls	r6, r1, #26
    72e0:	bpl.n	72ee <FatFile::seekSet(unsigned long)+0x48>
    return m_rootDirEntryCount;
    72e2:	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    72e4:	ldrh	r3, [r3, #10]
    72e6:	cmp.w	r5, r3, lsl #5
    72ea:	bhi.n	72d6 <FatFile::seekSet(unsigned long)+0x30>
    72ec:	b.n	72be <FatFile::seekSet(unsigned long)+0x18>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    72ee:	ldr.w	ip, [r4, #8]
    72f2:	subs	r6, r5, #1
  if (isContiguous()) {
    72f4:	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    72f6:	ldrb.w	r3, [ip, #6]
    72fa:	lsls	r2, r2, #25
    72fc:	add.w	r3, r3, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    7300:	uxtb	r3, r3
    7302:	lsr.w	r6, r6, r3
  if (isContiguous()) {
    7306:	bpl.n	7310 <FatFile::seekSet(unsigned long)+0x6a>
    m_curCluster = m_firstCluster + nNew;
    7308:	ldr	r3, [r4, #32]
    730a:	add	r3, r6
    730c:	str	r3, [r4, #16]
    goto done;
    730e:	b.n	72be <FatFile::seekSet(unsigned long)+0x18>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    7310:	subs	r2, r0, #1
    7312:	lsr.w	r3, r2, r3
  if (nNew < nCur || m_curPosition == 0) {
    7316:	cmp	r6, r3
    7318:	bcc.n	731c <FatFile::seekSet(unsigned long)+0x76>
    731a:	cbnz	r0, 7342 <FatFile::seekSet(unsigned long)+0x9c>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    731c:	lsls	r3, r1, #25
    return m_rootDirStart;
    731e:	ite	mi
    7320:	ldrmi.w	r3, [ip, #32]
    7324:	ldrpl	r3, [r4, #32]
    7326:	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7328:	add.w	r8, r4, #16
  while (nNew--) {
    732c:	cmp	r6, #0
    732e:	beq.n	72be <FatFile::seekSet(unsigned long)+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    7330:	mov	r2, r8
    7332:	ldr	r1, [r4, #16]
    7334:	ldr	r0, [r4, #8]
    7336:	subs	r6, #1
    7338:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
    733c:	cmp	r0, #0
    733e:	bgt.n	732c <FatFile::seekSet(unsigned long)+0x86>
    7340:	b.n	72d6 <FatFile::seekSet(unsigned long)+0x30>
    nNew -= nCur;
    7342:	subs	r6, r6, r3
    7344:	b.n	7328 <FatFile::seekSet(unsigned long)+0x82>

00007346 <FatFile::rmdir()>:
bool FatFile::rmdir() {
    7346:	push	{r4, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    7348:	ldrb	r3, [r0, #0]
bool FatFile::rmdir() {
    734a:	mov	r4, r0
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    734c:	lsls	r2, r3, #27
    734e:	bpl.n	7364 <FatFile::rmdir()+0x1e>
    seekSet(0);
    7350:	movs	r1, #0
    7352:	bl	72a6 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
    7356:	movs	r1, #1
    7358:	mov	r0, r4
    735a:	bl	7268 <FatFile::readDirCache(bool)>
    if (!dir) {
    735e:	cbnz	r0, 7368 <FatFile::rmdir()+0x22>
      if (!getError()) {
    7360:	ldrb	r3, [r4, #1]
    7362:	cbz	r3, 737c <FatFile::rmdir()+0x36>
}
    7364:	movs	r0, #0
    7366:	pop	{r4, pc}
    if (dir->name[0] == FAT_NAME_FREE) {
    7368:	ldrb	r3, [r0, #0]
    736a:	cbz	r3, 737c <FatFile::rmdir()+0x36>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    736c:	cmp	r3, #229	; 0xe5
    736e:	beq.n	7356 <FatFile::rmdir()+0x10>
    7370:	cmp	r3, #46	; 0x2e
    7372:	beq.n	7356 <FatFile::rmdir()+0x10>
    if (isFileOrSubdir(dir)) {
    7374:	ldrb	r3, [r0, #11]
    7376:	lsls	r3, r3, #28
    7378:	bmi.n	7356 <FatFile::rmdir()+0x10>
    737a:	b.n	7364 <FatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    737c:	movs	r3, #8
  return remove();
    737e:	mov	r0, r4
  m_attributes = FILE_ATTR_FILE;
    7380:	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    7382:	ldrb	r3, [r4, #2]
    7384:	orr.w	r3, r3, #2
    7388:	strb	r3, [r4, #2]
}
    738a:	ldmia.w	sp!, {r4, lr}
  return remove();
    738e:	b.w	8698 <FatFile::remove()>

00007392 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    7392:	push	{r3, r4, r5, r6, r7, lr}
    7394:	mov	r7, r1
    7396:	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
    7398:	movs	r1, #0
    739a:	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    739c:	mov	r4, r0
    739e:	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
    73a0:	bl	a210 <memset>
  m_vol = dirFile->m_vol;
    73a4:	ldr	r0, [r7, #8]
  m_dirCluster = dirFile->m_firstCluster;
    73a6:	ldr	r3, [r7, #32]
  m_dirIndex = dirIndex;
    73a8:	strh	r6, [r4, #4]
  dir += 0XF & dirIndex;
    73aa:	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
    73ae:	str	r3, [r4, #12]
    73b0:	add.w	r3, r0, #56	; 0x38
  m_vol = dirFile->m_vol;
    73b4:	str	r0, [r4, #8]
  dir += 0XF & dirIndex;
    73b6:	add.w	r3, r3, r6, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    73ba:	ldrb	r2, [r3, #11]
  if (!isFileOrSubdir(dir)) {
    73bc:	lsls	r1, r2, #28
    73be:	bmi.n	7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    73c0:	and.w	r2, r2, #23
    73c4:	strb	r2, [r4, #0]
  if (isFileDir(dir)) {
    73c6:	ldrb	r1, [r3, #11]
    73c8:	tst.w	r1, #24
    m_attributes |= FILE_ATTR_FILE;
    73cc:	itt	eq
    73ce:	orreq.w	r2, r2, #8
    73d2:	strbeq	r2, [r4, #0]
  m_lfnOrd = lfnOrd;
    73d4:	ldrb.w	r2, [sp, #24]
    73d8:	strb	r2, [r4, #3]
  switch (oflag & O_ACCMODE) {
    73da:	and.w	r2, r5, #3
    73de:	cmp	r2, #1
    73e0:	beq.n	7426 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    73e2:	cmp	r2, #2
    73e4:	beq.n	742a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x98>
    73e6:	cbnz	r2, 7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
      if (oflag & O_TRUNC) {
    73e8:	lsls	r2, r5, #21
    73ea:	bmi.n	7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    73ec:	movs	r2, #1
  if (m_flags & FILE_FLAG_WRITE) {
    73ee:	lsls	r7, r2, #30
    73f0:	bpl.n	73fc <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    73f2:	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    73f4:	lsls	r6, r1, #27
    73f6:	bmi.n	7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    73f8:	lsls	r1, r1, #31
    73fa:	bmi.n	7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    73fc:	and.w	r1, r5, #8
    7400:	orrs	r2, r1
    7402:	strb	r2, [r4, #2]
    return m_sector;
    7404:	ldr	r2, [r0, #52]	; 0x34
                 | getLe16(dir->firstClusterLow);
    7406:	ldrh	r1, [r3, #26]
  m_dirSector = m_vol->cacheSectorNumber();
    7408:	str	r2, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    740a:	ldrh	r2, [r3, #20]
    740c:	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
    7410:	lsls	r2, r5, #21
    7412:	bpl.n	743e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xac>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    7414:	cbnz	r1, 742e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7416:	ldrb	r3, [r4, #2]
    7418:	orn	r3, r3, #127	; 0x7f
    741c:	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    741e:	lsls	r3, r5, #17
    7420:	bmi.n	7446 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
  return true;
    7422:	movs	r0, #1
}
    7424:	pop	{r3, r4, r5, r6, r7, pc}
  switch (oflag & O_ACCMODE) {
    7426:	movs	r2, #2
    7428:	b.n	73ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    742a:	movs	r2, #3
    742c:	b.n	73ee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    742e:	bl	7dee <FatPartition::freeChain(unsigned long)>
    7432:	cmp	r0, #0
    7434:	bne.n	7416 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x84>
  m_attributes = FILE_ATTR_CLOSED;
    7436:	movs	r0, #0
    7438:	strb	r0, [r4, #0]
  m_flags = 0;
    743a:	strb	r0, [r4, #2]
  return false;
    743c:	b.n	7424 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x92>
    m_firstCluster = firstCluster;
    743e:	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
    7440:	ldr	r3, [r3, #28]
    m_fileSize = getLe32(dir->fileSize);
    7442:	str	r3, [r4, #28]
    7444:	b.n	741e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    7446:	ldr	r1, [r4, #28]
    7448:	mov	r0, r4
    744a:	bl	72a6 <FatFile::seekSet(unsigned long)>
    744e:	cmp	r0, #0
    7450:	bne.n	7422 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x90>
    7452:	b.n	7436 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>

00007454 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
    7454:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7458:	mov	r3, r2
  bool isOpen() const {return m_attributes;}
    745a:	ldrb	r2, [r0, #0]
    745c:	sub	sp, #20
    745e:	mov	r7, r0
    7460:	mov	r6, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
    7462:	cmp	r2, #0
    7464:	bne.n	74ec <FatFile::openNext(FatFile*, int)+0x98>
    7466:	ldrb	r2, [r1, #0]
    7468:	tst.w	r2, #112	; 0x70
    746c:	beq.n	74ec <FatFile::openNext(FatFile*, int)+0x98>
    746e:	ldr	r4, [r1, #20]
    7470:	ands.w	r4, r4, #31
    7474:	bne.n	74ec <FatFile::openNext(FatFile*, int)+0x98>
    7476:	mov	r9, r4
    DirFat_t* dir = dirFile->readDirCache();
    7478:	movs	r1, #0
    747a:	mov	r0, r6
  uint32_t curPosition() const {return m_curPosition;}
    747c:	ldr.w	r8, [r6, #20]
    7480:	str	r3, [sp, #12]
    7482:	bl	7268 <FatFile::readDirCache(bool)>
    if (!dir) {
    7486:	cbz	r0, 74ec <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == FAT_NAME_FREE) {
    7488:	ldrb	r1, [r0, #0]
    748a:	cbz	r1, 74ec <FatFile::openNext(FatFile*, int)+0x98>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
    748c:	cmp	r1, #46	; 0x2e
    748e:	ldr	r3, [sp, #12]
    7490:	beq.n	74d6 <FatFile::openNext(FatFile*, int)+0x82>
    7492:	cmp	r1, #229	; 0xe5
    7494:	beq.n	74d6 <FatFile::openNext(FatFile*, int)+0x82>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    7496:	ldrb	r2, [r0, #11]
    } else if (isFileOrSubdir(dir)) {
    7498:	ands.w	ip, r2, #8
    749c:	bne.n	74da <FatFile::openNext(FatFile*, int)+0x86>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
    749e:	cbz	r4, 74c2 <FatFile::openNext(FatFile*, int)+0x6e>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
    74a0:	subs	r1, r0, #1
    74a2:	add.w	r5, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74a6:	mov.w	r2, ip, lsl #7
    74aa:	ldrb.w	r0, [r1, #1]!
    74ae:	orr.w	r2, r2, ip, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
    74b2:	cmp	r1, r5
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    74b4:	uxtab	r2, r0, r2
    74b8:	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
    74bc:	bne.n	74a6 <FatFile::openNext(FatFile*, int)+0x52>
    74be:	cmp	r9, ip
    74c0:	bne.n	74ec <FatFile::openNext(FatFile*, int)+0x98>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
    74c2:	ubfx	r2, r8, #5, #16
    74c6:	mov	r1, r6
    74c8:	mov	r0, r7
    74ca:	str	r4, [sp, #0]
    74cc:	bl	7392 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
}
    74d0:	add	sp, #20
    74d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      lfnOrd = 0;
    74d6:	movs	r4, #0
    74d8:	b.n	7478 <FatFile::openNext(FatFile*, int)+0x24>
    } else if (isLongName(dir)) {
    74da:	cmp	r2, #15
    74dc:	bne.n	74d6 <FatFile::openNext(FatFile*, int)+0x82>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
    74de:	lsls	r2, r1, #25
    74e0:	bpl.n	7478 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
    74e2:	and.w	r4, r1, #31
        checksum = ldir->checksum;
    74e6:	ldrb.w	r9, [r0, #13]
    74ea:	b.n	7478 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
    74ec:	movs	r0, #0
    74ee:	b.n	74d0 <FatFile::openNext(FatFile*, int)+0x7c>

000074f0 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
    74f0:	push	{r0, r1, r2, r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    74f2:	ldrb	r3, [r0, #0]
bool FatFile::sync() {
    74f4:	mov	r4, r0
  if (!isOpen()) {
    74f6:	cmp	r3, #0
    74f8:	beq.n	7566 <FatFile::sync()+0x76>
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    74fa:	ldrsb.w	r3, [r0, #2]
    74fe:	cmp	r3, #0
    7500:	bge.n	755a <FatFile::sync()+0x6a>
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    7502:	movs	r1, #1
    7504:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    7508:	mov	r5, r0
    750a:	cbnz	r0, 751a <FatFile::sync()+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    750c:	ldrb	r3, [r4, #1]
  return false;
    750e:	movs	r0, #0
  m_error |= WRITE_ERROR;
    7510:	orr.w	r3, r3, #1
    7514:	strb	r3, [r4, #1]
}
    7516:	add	sp, #12
    7518:	pop	{r4, r5, pc}
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    751a:	ldrb	r3, [r0, #0]
    751c:	cmp	r3, #229	; 0xe5
    751e:	beq.n	750c <FatFile::sync()+0x1c>
    if (isFile()) {
    7520:	ldrb	r3, [r4, #0]
    7522:	lsls	r3, r3, #28
      setLe32(dir->fileSize, m_fileSize);
    7524:	itt	mi
    7526:	ldrmi	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    7528:	strmi	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    752a:	ldr	r3, [r4, #32]
    752c:	strh	r3, [r0, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    752e:	lsrs	r3, r3, #16
    7530:	strh	r3, [r0, #20]
    if (FsDateTime::callback) {
    7532:	ldr	r3, [pc, #56]	; (756c <FatFile::sync()+0x7c>)
    7534:	ldr	r3, [r3, #0]
    7536:	cbz	r3, 7552 <FatFile::sync()+0x62>
      FsDateTime::callback(&date, &time, &ms10);
    7538:	add.w	r2, sp, #3
    753c:	add.w	r1, sp, #6
    7540:	add	r0, sp, #4
    7542:	blx	r3
      setLe16(dir->modifyDate, date);
    7544:	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    7548:	strh	r3, [r5, #24]
    754a:	strh	r3, [r5, #18]
    754c:	ldrh.w	r3, [sp, #6]
    7550:	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    7552:	ldrb	r3, [r4, #2]
    7554:	and.w	r3, r3, #127	; 0x7f
    7558:	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    755a:	ldr	r0, [r4, #8]
    755c:	bl	6f98 <FatPartition::cacheSync()>
    7560:	cmp	r0, #0
    7562:	beq.n	750c <FatFile::sync()+0x1c>
    7564:	b.n	7516 <FatFile::sync()+0x26>
    return true;
    7566:	movs	r0, #1
    7568:	b.n	7516 <FatFile::sync()+0x26>
    756a:	nop
    756c:	.word	0x200147fc

00007570 <FatFile::close()>:
bool FatFile::close() {
    7570:	push	{r4, lr}
    7572:	mov	r4, r0
  bool rtn = sync();
    7574:	bl	74f0 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    7578:	movs	r3, #0
    757a:	strb	r3, [r4, #0]
  m_flags = 0;
    757c:	strb	r3, [r4, #2]
}
    757e:	pop	{r4, pc}

00007580 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    7580:	push	{r4, r5, r6, r7, lr}
    7582:	mov	r7, r3
    7584:	sub	sp, #84	; 0x54
  FatFile() {}
    7586:	movs	r3, #0
    7588:	mov	r6, r0
    758a:	mov	r4, r1
    758c:	str	r2, [sp, #4]
    758e:	str	r3, [sp, #8]
    7590:	strh.w	r3, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    7594:	ldrb	r3, [r0, #0]
    7596:	cbz	r3, 759e <FatFile::open(FatFile*, char const*, int)+0x1e>
  return false;
    7598:	movs	r0, #0
}
    759a:	add	sp, #84	; 0x54
    759c:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
    759e:	ldrb	r3, [r1, #0]
    75a0:	tst.w	r3, #112	; 0x70
    75a4:	beq.n	7598 <FatFile::open(FatFile*, char const*, int)+0x18>
  if (isDirSeparator(*path)) {
    75a6:	ldrb	r3, [r2, #0]
    75a8:	cmp	r3, #47	; 0x2f
    75aa:	bne.n	75d2 <FatFile::open(FatFile*, char const*, int)+0x52>
    while (isDirSeparator(*path)) {
    75ac:	ldr	r2, [sp, #4]
    75ae:	ldrb	r3, [r2, #0]
    75b0:	cmp	r3, #47	; 0x2f
    75b2:	beq.n	75c0 <FatFile::open(FatFile*, char const*, int)+0x40>
      return openRoot(dirFile->m_vol);
    75b4:	ldr	r1, [r4, #8]
    if (*path == 0) {
    75b6:	cbnz	r3, 75c6 <FatFile::open(FatFile*, char const*, int)+0x46>
      return openRoot(dirFile->m_vol);
    75b8:	mov	r0, r6
    75ba:	bl	7082 <FatFile::openRoot(FatVolume*)>
    75be:	b.n	759a <FatFile::open(FatFile*, char const*, int)+0x1a>
      path++;
    75c0:	adds	r2, #1
    75c2:	str	r2, [sp, #4]
    75c4:	b.n	75ac <FatFile::open(FatFile*, char const*, int)+0x2c>
  if (isOpen()) {
    75c6:	add	r0, sp, #8
    75c8:	bl	6f68 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    75cc:	cmp	r0, #0
    75ce:	beq.n	7598 <FatFile::open(FatFile*, char const*, int)+0x18>
    dirFile = &tmpDir;
    75d0:	add	r4, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    75d2:	add	r3, sp, #4
    75d4:	add	r2, sp, #44	; 0x2c
    75d6:	ldr	r1, [sp, #4]
    75d8:	mov	r0, r6
    75da:	bl	85ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    75de:	cmp	r0, #0
    75e0:	beq.n	7598 <FatFile::open(FatFile*, char const*, int)+0x18>
    if (*path == 0) {
    75e2:	ldr	r3, [sp, #4]
    75e4:	ldrb	r3, [r3, #0]
    75e6:	cbz	r3, 7610 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    75e8:	movs	r3, #0
    75ea:	add	r2, sp, #44	; 0x2c
    75ec:	mov	r1, r4
    75ee:	mov	r0, r6
    75f0:	bl	8368 <FatFile::open(FatFile*, FatLfn_t*, int)>
    75f4:	cmp	r0, #0
    75f6:	beq.n	7598 <FatFile::open(FatFile*, char const*, int)+0x18>
    tmpDir = *this;
    75f8:	mov	r5, r6
    75fa:	add	r4, sp, #8
    75fc:	ldmia	r5!, {r0, r1, r2, r3}
    75fe:	stmia	r4!, {r0, r1, r2, r3}
    7600:	ldmia	r5!, {r0, r1, r2, r3}
    7602:	stmia	r4!, {r0, r1, r2, r3}
    7604:	ldr	r3, [r5, #0]
    close();
    7606:	mov	r0, r6
    tmpDir = *this;
    7608:	str	r3, [r4, #0]
    close();
    760a:	bl	7570 <FatFile::close()>
  while (1) {
    760e:	b.n	75d0 <FatFile::open(FatFile*, char const*, int)+0x50>
  return open(dirFile, &fname, oflag);
    7610:	mov	r3, r7
    7612:	add	r2, sp, #44	; 0x2c
    7614:	mov	r1, r4
    7616:	mov	r0, r6
    7618:	bl	8368 <FatFile::open(FatFile*, FatLfn_t*, int)>
    761c:	b.n	759a <FatFile::open(FatFile*, char const*, int)+0x1a>

0000761e <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    761e:	cbz	r1, 7628 <FatFile::open(FatVolume*, char const*, int)+0xa>
    7620:	add.w	r1, r1, #1096	; 0x448
    7624:	b.w	7580 <FatFile::open(FatFile*, char const*, int)>
}
    7628:	mov	r0, r1
    762a:	bx	lr

0000762c <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    762c:	push	{r4, r5, r6, lr}
    762e:	mov	r6, r0
    7630:	mov	r4, r1
  if (!sync()) {
    7632:	bl	74f0 <FatFile::sync()>
    7636:	mov	r5, r0
    7638:	cbnz	r0, 7640 <FatFile::dirEntry(DirFat_t*)+0x14>
  return false;
    763a:	movs	r5, #0
}
    763c:	mov	r0, r5
    763e:	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7640:	movs	r1, #0
    7642:	mov	r0, r6
    7644:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7648:	mov	r3, r0
    764a:	cmp	r0, #0
    764c:	beq.n	763a <FatFile::dirEntry(DirFat_t*)+0xe>
  memcpy(dst, dir, sizeof(DirFat_t));
    764e:	mov	r1, r4
    7650:	add.w	r2, r0, #32
    7654:	ldr.w	r0, [r3], #4
    7658:	cmp	r3, r2
    765a:	str.w	r0, [r1], #4
    765e:	bne.n	7654 <FatFile::dirEntry(DirFat_t*)+0x28>
    7660:	b.n	763c <FatFile::dirEntry(DirFat_t*)+0x10>

00007662 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    7662:	push	{r4, r5, lr}
    7664:	sub	sp, #36	; 0x24
    7666:	mov	r5, r1
    7668:	mov	r4, r2
  if (!dirEntry(&dir)) {
    766a:	mov	r1, sp
    766c:	bl	762c <FatFile::dirEntry(DirFat_t*)>
    7670:	cbz	r0, 767e <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    7672:	ldrh.w	r3, [sp, #16]
    7676:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
    7678:	ldrh.w	r3, [sp, #14]
    767c:	strh	r3, [r4, #0]
}
    767e:	add	sp, #36	; 0x24
    7680:	pop	{r4, r5, pc}

00007682 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    7682:	push	{r4, r5, lr}
    7684:	sub	sp, #36	; 0x24
    7686:	mov	r5, r1
    7688:	mov	r4, r2
  if (!dirEntry(&dir)) {
    768a:	mov	r1, sp
    768c:	bl	762c <FatFile::dirEntry(DirFat_t*)>
    7690:	cbz	r0, 769e <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    7692:	ldrh.w	r3, [sp, #24]
    7696:	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    7698:	ldrh.w	r3, [sp, #22]
    769c:	strh	r3, [r4, #0]
}
    769e:	add	sp, #36	; 0x24
    76a0:	pop	{r4, r5, pc}

000076a2 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    76a2:	push	{r4, r5, r6, r7, lr}
  if (!parent->isDir()) {
    76a4:	ldrb	r3, [r1, #0]
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    76a6:	sub	sp, #36	; 0x24
    76a8:	mov	r4, r0
    76aa:	mov	r6, r1
  if (!parent->isDir()) {
    76ac:	tst.w	r3, #112	; 0x70
    76b0:	bne.n	76b8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x16>
  return false;
    76b2:	movs	r0, #0
}
    76b4:	add	sp, #36	; 0x24
    76b6:	pop	{r4, r5, r6, r7, pc}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    76b8:	movw	r3, #2562	; 0xa02
    76bc:	bl	8368 <FatFile::open(FatFile*, FatLfn_t*, int)>
    76c0:	cmp	r0, #0
    76c2:	beq.n	76b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_flags = FILE_FLAG_READ;
    76c4:	movs	r7, #1
  m_attributes = FILE_ATTR_SUBDIR;
    76c6:	movs	r5, #16
  if (!addDirCluster()) {
    76c8:	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    76ca:	strb	r7, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    76cc:	strb	r5, [r4, #0]
  if (!addDirCluster()) {
    76ce:	bl	6ff4 <FatFile::addDirCluster()>
    76d2:	cmp	r0, #0
    76d4:	beq.n	76b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  m_firstCluster = m_curCluster;
    76d6:	ldr	r3, [r4, #16]
    seekSet(0);
    76d8:	movs	r1, #0
    76da:	mov	r0, r4
    76dc:	str	r3, [r4, #32]
    76de:	bl	72a6 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
    76e2:	mov	r0, r4
    76e4:	bl	74f0 <FatFile::sync()>
    76e8:	cmp	r0, #0
    76ea:	beq.n	76b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    76ec:	mov	r1, r7
    76ee:	mov	r0, r4
    76f0:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    76f4:	cmp	r0, #0
    76f6:	beq.n	76b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dot, dir, sizeof(dot));
    76f8:	mov	r2, sp
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    76fa:	strb	r5, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
    76fc:	mov	r3, r0
    76fe:	add.w	ip, r0, #32
    7702:	mov	r5, r2
    7704:	ldr	r0, [r3, #0]
    7706:	adds	r3, #8
    7708:	ldr.w	r1, [r3, #-4]
    770c:	mov	r7, r2
    770e:	cmp	r3, ip
    7710:	stmia	r7!, {r0, r1}
    7712:	mov	r2, r7
    7714:	bne.n	7704 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x62>
    dot.name[i] = ' ';
    7716:	mov.w	r3, #538976288	; 0x20202020
  sector = m_vol->clusterStartSector(m_firstCluster);
    771a:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    771c:	ldr	r1, [r4, #32]
    return m_cache.prepare(sector, options);
    771e:	movs	r2, #1
    dot.name[i] = ' ';
    7720:	str.w	r3, [sp, #1]
    7724:	adds	r0, #40	; 0x28
    7726:	str.w	r3, [sp, #5]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    772a:	subs	r1, #2
    772c:	strh.w	r3, [sp, #9]
    7730:	ldrb.w	r3, [r0, #-34]
    7734:	lsls	r1, r3
    7736:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    773a:	add	r1, r3
    773c:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    7740:	mov	r3, r0
    7742:	cmp	r0, #0
    7744:	beq.n	76b2 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x10>
  memcpy(&dir[0], &dot, sizeof(dot));
    7746:	movs	r2, #46	; 0x2e
    7748:	mov	ip, r5
    774a:	mov	r7, r0
    774c:	add.w	lr, sp, #32
    7750:	strb.w	r2, [sp]
    7754:	mov	r2, ip
    7756:	adds	r7, #8
    7758:	ldmia	r2!, {r0, r1}
    775a:	cmp	r2, lr
    775c:	str.w	r0, [r7, #-8]
    7760:	str.w	r1, [r7, #-4]
    7764:	mov	ip, r2
    7766:	bne.n	7754 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xb2>
  dot.name[1] = '.';
    7768:	movs	r2, #46	; 0x2e
  memcpy(&dir[1], &dot, sizeof(dot));
    776a:	adds	r3, #32
  dot.name[1] = '.';
    776c:	strb.w	r2, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7770:	ldr	r2, [r6, #32]
  memcpy(&dir[1], &dot, sizeof(dot));
    7772:	add	r6, sp, #32
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    7774:	lsrs	r1, r2, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    7776:	strh.w	r2, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
    777a:	mov	r2, r5
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    777c:	strh.w	r1, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    7780:	mov	r5, r2
    7782:	adds	r3, #8
    7784:	ldmia	r5!, {r0, r1}
    7786:	cmp	r5, r6
    7788:	str.w	r0, [r3, #-8]
    778c:	str.w	r1, [r3, #-4]
    7790:	mov	r2, r5
    7792:	bne.n	7780 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xde>
  return m_vol->cacheSync();
    7794:	ldr	r0, [r4, #8]
    7796:	bl	6f98 <FatPartition::cacheSync()>
    779a:	b.n	76b4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x12>

0000779c <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    779c:	push	{r4, r5, r6, r7, lr}
    779e:	mov	r7, r3
    77a0:	sub	sp, #84	; 0x54
    77a2:	movs	r3, #0
    77a4:	mov	r6, r0
    77a6:	mov	r4, r1
    77a8:	str	r2, [sp, #4]
    77aa:	strh.w	r3, [sp, #20]
  FatFile() {}
    77ae:	str	r3, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    77b0:	ldrb	r3, [r0, #0]
    77b2:	cbz	r3, 77ba <FatFile::mkdir(FatFile*, char const*, bool)+0x1e>
  return false;
    77b4:	movs	r0, #0
}
    77b6:	add	sp, #84	; 0x54
    77b8:	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !parent->isDir()) {
    77ba:	ldrb	r3, [r1, #0]
    77bc:	tst.w	r3, #112	; 0x70
    77c0:	beq.n	77b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  if (isDirSeparator(*path)) {
    77c2:	ldrb	r3, [r2, #0]
    77c4:	cmp	r3, #47	; 0x2f
    77c6:	bne.n	77de <FatFile::mkdir(FatFile*, char const*, bool)+0x42>
    while (isDirSeparator(*path)) {
    77c8:	ldr	r2, [sp, #4]
    77ca:	ldrb	r3, [r2, #0]
    77cc:	cmp	r3, #47	; 0x2f
    77ce:	beq.n	781a <FatFile::mkdir(FatFile*, char const*, bool)+0x7e>
  if (isOpen()) {
    77d0:	ldr	r1, [r4, #8]
    77d2:	add	r0, sp, #44	; 0x2c
    77d4:	bl	6f68 <FatFile::openRoot(FatVolume*) [clone .part.0]>
    if (!tmpDir.openRoot(parent->m_vol)) {
    77d8:	cmp	r0, #0
    77da:	beq.n	77b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    parent = &tmpDir;
    77dc:	add	r4, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
    77de:	add	r3, sp, #4
    77e0:	add	r2, sp, #8
    77e2:	ldr	r1, [sp, #4]
    77e4:	mov	r0, r6
    77e6:	bl	85ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    77ea:	cmp	r0, #0
    77ec:	beq.n	77b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    if (!*path) {
    77ee:	ldr	r3, [sp, #4]
    77f0:	ldrb	r3, [r3, #0]
    77f2:	cbz	r3, 7834 <FatFile::mkdir(FatFile*, char const*, bool)+0x98>
    if (!open(parent, &fname, O_RDONLY)) {
    77f4:	movs	r3, #0
    77f6:	add	r2, sp, #8
    77f8:	mov	r1, r4
    77fa:	mov	r0, r6
    77fc:	bl	8368 <FatFile::open(FatFile*, FatLfn_t*, int)>
    7800:	cbz	r0, 7820 <FatFile::mkdir(FatFile*, char const*, bool)+0x84>
    tmpDir = *this;
    7802:	mov	r5, r6
    7804:	add	r4, sp, #44	; 0x2c
    7806:	ldmia	r5!, {r0, r1, r2, r3}
    7808:	stmia	r4!, {r0, r1, r2, r3}
    780a:	ldmia	r5!, {r0, r1, r2, r3}
    780c:	stmia	r4!, {r0, r1, r2, r3}
    780e:	ldr	r3, [r5, #0]
    close();
    7810:	mov	r0, r6
    tmpDir = *this;
    7812:	str	r3, [r4, #0]
    close();
    7814:	bl	7570 <FatFile::close()>
  while (1) {
    7818:	b.n	77dc <FatFile::mkdir(FatFile*, char const*, bool)+0x40>
      path++;
    781a:	adds	r2, #1
    781c:	str	r2, [sp, #4]
    781e:	b.n	77c8 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
      if (!pFlag || !mkdir(parent, &fname)) {
    7820:	cmp	r7, #0
    7822:	beq.n	77b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
    7824:	add	r2, sp, #8
    7826:	mov	r1, r4
    7828:	mov	r0, r6
    782a:	bl	76a2 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    782e:	cmp	r0, #0
    7830:	bne.n	7802 <FatFile::mkdir(FatFile*, char const*, bool)+0x66>
    7832:	b.n	77b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x18>
  return mkdir(parent, &fname);
    7834:	add	r2, sp, #8
    7836:	mov	r1, r4
    7838:	mov	r0, r6
    783a:	bl	76a2 <FatFile::mkdir(FatFile*, FatLfn_t*)>
    783e:	b.n	77b6 <FatFile::mkdir(FatFile*, char const*, bool)+0x1a>

00007840 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7840:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!(isFile() || isSubDir())) {
    7844:	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7846:	sub	sp, #108	; 0x6c
    7848:	mov.w	r9, #0
    784c:	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    784e:	tst.w	r3, #24
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    7852:	mov	r7, r1
    7854:	mov	r8, r2
    7856:	str.w	r9, [sp, #32]
    785a:	str.w	r9, [sp, #68]	; 0x44
  if (!(isFile() || isSubDir())) {
    785e:	bne.n	7868 <FatFile::rename(FatFile*, char const*)+0x28>
  return false;
    7860:	movs	r0, #0
}
    7862:	add	sp, #108	; 0x6c
    7864:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (m_vol != dirFile->m_vol) {
    7868:	ldr	r2, [r0, #8]
    786a:	ldr	r3, [r1, #8]
    786c:	cmp	r2, r3
    786e:	bne.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
  oldFile = *this;
    7870:	mov	r6, r4
  sync();
    7872:	bl	74f0 <FatFile::sync()>
  oldFile = *this;
    7876:	add	r5, sp, #68	; 0x44
    7878:	ldmia	r6!, {r0, r1, r2, r3}
    787a:	stmia	r5!, {r0, r1, r2, r3}
    787c:	ldmia	r6!, {r0, r1, r2, r3}
    787e:	stmia	r5!, {r0, r1, r2, r3}
    7880:	ldr	r3, [r6, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7882:	mov	r1, r9
    7884:	mov	r0, r4
  oldFile = *this;
    7886:	str	r3, [r5, #0]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
    7888:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    788c:	cmp	r0, #0
    788e:	beq.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&entry, dir, sizeof(entry));
    7890:	mov	r2, sp
    7892:	mov	r3, r0
    7894:	add.w	ip, r0, #32
    7898:	mov	r5, r2
    789a:	ldr	r0, [r3, #0]
    789c:	adds	r3, #8
    789e:	ldr.w	r1, [r3, #-4]
    78a2:	mov	r6, r2
    78a4:	cmp	r3, ip
    78a6:	stmia	r6!, {r0, r1}
    78a8:	mov	r2, r6
    78aa:	bne.n	789a <FatFile::rename(FatFile*, char const*)+0x5a>
  if (isFile()) {
    78ac:	ldrb	r3, [r4, #0]
    78ae:	add	r6, sp, #32
    78b0:	ands.w	r3, r3, #8
    78b4:	beq.n	78cc <FatFile::rename(FatFile*, char const*)+0x8c>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    78b6:	movw	r3, #2561	; 0xa01
    78ba:	mov	r2, r8
    78bc:	mov	r1, r7
    78be:	mov	r0, r6
    78c0:	bl	7580 <FatFile::open(FatFile*, char const*, int)>
    78c4:	cmp	r0, #0
    78c6:	beq.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
  uint32_t dirCluster = 0;
    78c8:	movs	r7, #0
    78ca:	b.n	78dc <FatFile::rename(FatFile*, char const*)+0x9c>
    if (!file.mkdir(dirFile, newPath, false)) {
    78cc:	mov	r2, r8
    78ce:	mov	r1, r7
    78d0:	mov	r0, r6
    78d2:	bl	779c <FatFile::mkdir(FatFile*, char const*, bool)>
    78d6:	cmp	r0, #0
    78d8:	beq.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
    dirCluster = file.m_firstCluster;
    78da:	ldr	r7, [sp, #64]	; 0x40
  m_dirSector = file.m_dirSector;
    78dc:	ldr	r3, [sp, #56]	; 0x38
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78de:	movs	r1, #1
    78e0:	mov	r0, r4
  m_dirSector = file.m_dirSector;
    78e2:	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
    78e4:	ldrh.w	r3, [sp, #36]	; 0x24
    78e8:	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    78ea:	ldrb.w	r3, [sp, #35]	; 0x23
    78ee:	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    78f0:	ldr	r3, [sp, #44]	; 0x2c
    78f2:	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    78f4:	movs	r3, #0
    78f6:	strb.w	r3, [sp, #32]
  file.m_flags = 0;
    78fa:	strb.w	r3, [sp, #34]	; 0x22
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    78fe:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    7902:	cmp	r0, #0
    7904:	beq.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    7906:	add.w	r3, sp, #13
    790a:	add.w	r2, r0, #13
    790e:	add.w	r1, sp, #29
    7912:	ldr.w	ip, [r3], #4
    7916:	cmp	r3, r1
    7918:	str.w	ip, [r2], #4
    791c:	bne.n	7912 <FatFile::rename(FatFile*, char const*)+0xd2>
    791e:	ldrh	r1, [r3, #0]
    7920:	strh	r1, [r2, #0]
    7922:	ldrb	r3, [r3, #2]
    7924:	strb	r3, [r2, #2]
  dir->attributes = entry.attributes;
    7926:	ldrb.w	r3, [sp, #11]
    792a:	strb	r3, [r0, #11]
  if (dirCluster) {
    792c:	cmp	r7, #0
    792e:	beq.n	79ac <FatFile::rename(FatFile*, char const*)+0x16c>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    7930:	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7932:	subs	r3, r7, #2
    7934:	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    7936:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7938:	ldr.w	r1, [r0, #-20]
    793c:	lsls	r3, r2
    return m_cache.prepare(sector, options);
    793e:	movs	r2, #0
    7940:	add	r1, r3
    7942:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    7946:	cmp	r0, #0
    7948:	beq.n	7860 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&entry, &dir[1], sizeof(entry));
    794a:	add.w	r2, r0, #32
    794e:	mov	lr, r5
    7950:	add.w	r3, r0, #64	; 0x40
    7954:	ldr	r0, [r2, #0]
    7956:	adds	r2, #8
    7958:	ldr.w	r1, [r2, #-4]
    795c:	mov	ip, lr
    795e:	cmp	r2, r3
    7960:	stmia.w	ip!, {r0, r1}
    7964:	mov	lr, ip
    7966:	bne.n	7954 <FatFile::rename(FatFile*, char const*)+0x114>
    if (!m_vol->freeChain(dirCluster)) {
    7968:	mov	r1, r7
    796a:	ldr	r0, [r4, #8]
    796c:	bl	7dee <FatPartition::freeChain(unsigned long)>
    7970:	cmp	r0, #0
    7972:	beq.w	7860 <FatFile::rename(FatFile*, char const*)+0x20>
    sector = m_vol->clusterStartSector(m_firstCluster);
    7976:	ldr	r0, [r4, #8]
    7978:	movs	r2, #1
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    797a:	ldr	r1, [r4, #32]
    797c:	ldrb	r3, [r0, #6]
    return m_cache.prepare(sector, options);
    797e:	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7980:	subs	r1, #2
    7982:	lsls	r1, r3
    7984:	ldr.w	r3, [r0, #-20]
    return m_cache.prepare(sector, options);
    7988:	add	r1, r3
    798a:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    798e:	cmp	r0, #0
    7990:	beq.w	7860 <FatFile::rename(FatFile*, char const*)+0x20>
    memcpy(&dir[1], &entry, sizeof(entry));
    7994:	add.w	r3, r0, #32
    7998:	mov	r2, r5
    799a:	adds	r3, #8
    799c:	ldmia	r2!, {r0, r1}
    799e:	cmp	r2, r6
    79a0:	str.w	r0, [r3, #-8]
    79a4:	str.w	r1, [r3, #-4]
    79a8:	mov	r5, r2
    79aa:	bne.n	7998 <FatFile::rename(FatFile*, char const*)+0x158>
  oldFile.m_firstCluster = 0;
    79ac:	movs	r3, #0
  if (!oldFile.remove()) {
    79ae:	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    79b0:	str	r3, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    79b2:	movs	r3, #2
    79b4:	strb.w	r3, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    79b8:	movs	r3, #8
    79ba:	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    79be:	bl	8698 <FatFile::remove()>
    79c2:	cmp	r0, #0
    79c4:	beq.w	7860 <FatFile::rename(FatFile*, char const*)+0x20>
  return m_vol->cacheSync();
    79c8:	ldr	r0, [r4, #8]
    79ca:	bl	6f98 <FatPartition::cacheSync()>
    79ce:	b.n	7862 <FatFile::rename(FatFile*, char const*)+0x22>

000079d0 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    79d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    79d4:	ldrb	r3, [r0, #2]
    79d6:	mov	r4, r0
    79d8:	mov	r9, r1
    79da:	mov	r7, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    79dc:	lsls	r5, r3, #30
    79de:	bpl.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    79e0:	lsls	r1, r3, #28
    79e2:	bmi.n	7a0c <FatFile::write(void const*, unsigned int)+0x3c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    79e4:	ldr	r3, [r4, #20]
    79e6:	adds	r3, r3, r7
    79e8:	bcs.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
    79ea:	mov	r8, r7
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    79ec:	add.w	sl, r4, #16
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    79f0:	ldr	r3, [r4, #20]
  while (nToWrite) {
    79f2:	cmp.w	r8, #0
    79f6:	bne.n	7a22 <FatFile::write(void const*, unsigned int)+0x52>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    79f8:	ldr	r2, [r4, #28]
    79fa:	cmp	r2, r3
    79fc:	bcs.w	7b5e <FatFile::write(void const*, unsigned int)+0x18e>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    7a00:	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    7a02:	ldrb	r3, [r4, #2]
    7a04:	orn	r3, r3, #127	; 0x7f
    7a08:	strb	r3, [r4, #2]
    7a0a:	b.n	7b68 <FatFile::write(void const*, unsigned int)+0x198>
    if (!seekSet(m_fileSize)) {
    7a0c:	ldr	r1, [r0, #28]
    7a0e:	bl	72a6 <FatFile::seekSet(unsigned long)>
    7a12:	cmp	r0, #0
    7a14:	bne.n	79e4 <FatFile::write(void const*, unsigned int)+0x14>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    7a16:	ldrb	r3, [r4, #1]
  return 0;
    7a18:	movs	r7, #0
  m_error |= WRITE_ERROR;
    7a1a:	orr.w	r3, r3, #1
    7a1e:	strb	r3, [r4, #1]
  return 0;
    7a20:	b.n	7b68 <FatFile::write(void const*, unsigned int)+0x198>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    7a22:	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    7a24:	ubfx	r5, r3, #0, #9
      if (m_curCluster != 0) {
    7a28:	ldr	r1, [r4, #16]
    return (position >> 9) & m_clusterSectorMask;
    7a2a:	ldrb	r6, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    7a2c:	ands.w	r6, r6, r3, lsr #9
    7a30:	bne.n	7a48 <FatFile::write(void const*, unsigned int)+0x78>
    7a32:	cbnz	r5, 7a48 <FatFile::write(void const*, unsigned int)+0x78>
      if (m_curCluster != 0) {
    7a34:	cmp	r1, #0
    7a36:	beq.n	7ab0 <FatFile::write(void const*, unsigned int)+0xe0>
        if (isContiguous() && m_fileSize > m_curPosition) {
    7a38:	ldrb	r2, [r4, #2]
    7a3a:	lsls	r2, r2, #25
    7a3c:	bpl.n	7a98 <FatFile::write(void const*, unsigned int)+0xc8>
    7a3e:	ldr	r2, [r4, #28]
    7a40:	cmp	r2, r3
    7a42:	bls.n	7a98 <FatFile::write(void const*, unsigned int)+0xc8>
          m_curCluster++;
    7a44:	adds	r1, #1
    7a46:	str	r1, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
    7a48:	ldr.w	ip, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    7a4c:	ldr	r1, [r4, #16]
    7a4e:	ldrb.w	r3, [ip, #6]
    7a52:	subs	r1, #2
    7a54:	lsls	r1, r3
    7a56:	ldr.w	r3, [ip, #20]
    7a5a:	add	r1, r3
                      + sectorOfCluster;
    7a5c:	add	r1, r6
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    7a5e:	cmp	r5, #0
    7a60:	bne.n	7ac8 <FatFile::write(void const*, unsigned int)+0xf8>
    7a62:	cmp.w	r8, #512	; 0x200
    7a66:	bcc.n	7ac8 <FatFile::write(void const*, unsigned int)+0xf8>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    7a68:	cmp.w	r8, #1024	; 0x400
    7a6c:	ldr.w	r2, [ip, #52]	; 0x34
    7a70:	ldr.w	r0, [ip, #44]	; 0x2c
    7a74:	bcs.n	7b28 <FatFile::write(void const*, unsigned int)+0x158>
    if (isCached(sector)) {
    7a76:	cmp	r1, r2
    return m_blockDev->writeSector(sector, src);
    7a78:	mov	r2, r9
    m_sector = 0XFFFFFFFF;
    7a7a:	ittt	eq
    7a7c:	moveq.w	r3, #4294967295
    m_status = 0;
    7a80:	strbeq.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7a84:	streq.w	r3, [ip, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
    7a88:	ldr	r3, [r0, #0]
    7a8a:	ldr	r3, [r3, #36]	; 0x24
    7a8c:	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    7a8e:	cmp	r0, #0
    7a90:	beq.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
      n = m_vol->bytesPerSector();
    7a92:	mov.w	r6, #512	; 0x200
    7a96:	b.n	7b12 <FatFile::write(void const*, unsigned int)+0x142>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    7a98:	mov	r2, sl
    7a9a:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    7a9e:	cmp	r0, #0
    7aa0:	blt.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
        if (fg == 0) {
    7aa2:	bne.n	7a48 <FatFile::write(void const*, unsigned int)+0x78>
          if (!addCluster()) {
    7aa4:	mov	r0, r4
    7aa6:	bl	6fbe <FatFile::addCluster()>
    7aaa:	cmp	r0, #0
    7aac:	bne.n	7a48 <FatFile::write(void const*, unsigned int)+0x78>
    7aae:	b.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
        if (m_firstCluster == 0) {
    7ab0:	ldr	r3, [r4, #32]
    7ab2:	cbnz	r3, 7ac4 <FatFile::write(void const*, unsigned int)+0xf4>
          if (!addCluster()) {
    7ab4:	mov	r0, r4
    7ab6:	bl	6fbe <FatFile::addCluster()>
    7aba:	cmp	r0, #0
    7abc:	beq.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
          m_firstCluster = m_curCluster;
    7abe:	ldr	r3, [r4, #16]
    7ac0:	str	r3, [r4, #32]
    7ac2:	b.n	7a48 <FatFile::write(void const*, unsigned int)+0x78>
          m_curCluster = m_firstCluster;
    7ac4:	str	r3, [r4, #16]
    7ac6:	b.n	7a48 <FatFile::write(void const*, unsigned int)+0x78>
      n = m_vol->bytesPerSector() - sectorOffset;
    7ac8:	rsb	r6, r5, #512	; 0x200
    7acc:	cmp	r6, r8
    7ace:	it	cs
    7ad0:	movcs	r6, r8
      if (sectorOffset == 0 &&
    7ad2:	cbnz	r5, 7b20 <FatFile::write(void const*, unsigned int)+0x150>
    7ad4:	ldr	r2, [r4, #20]
    7ad6:	ldr	r3, [r4, #28]
    7ad8:	cmp	r2, r3
    7ada:	bcs.n	7b24 <FatFile::write(void const*, unsigned int)+0x154>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    7adc:	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7ade:	tst.w	r3, #32
    7ae2:	ite	eq
    7ae4:	moveq	r2, #1
    7ae6:	movne	r2, #5
    return m_cache.prepare(sector, options);
    7ae8:	add.w	r0, ip, #40	; 0x28
    7aec:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    7af0:	cmp	r0, #0
    7af2:	beq.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
      memcpy(dst, src, n);
    7af4:	add	r0, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7af6:	add	r5, r6
      memcpy(dst, src, n);
    7af8:	mov	r2, r6
    7afa:	mov	r1, r9
    7afc:	bl	a254 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    7b00:	cmp.w	r5, #512	; 0x200
    7b04:	ldr	r0, [r4, #8]
    7b06:	bne.n	7b12 <FatFile::write(void const*, unsigned int)+0x142>
    return m_cache.sync();
    7b08:	adds	r0, #40	; 0x28
    7b0a:	bl	5654 <FsCache::sync()>
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    7b0e:	cmp	r0, #0
    7b10:	beq.n	7a16 <FatFile::write(void const*, unsigned int)+0x46>
    m_curPosition += n;
    7b12:	ldr	r3, [r4, #20]
    src += n;
    7b14:	add	r9, r6
    nToWrite -= n;
    7b16:	sub.w	r8, r8, r6
    m_curPosition += n;
    7b1a:	add	r3, r6
    7b1c:	str	r3, [r4, #20]
    nToWrite -= n;
    7b1e:	b.n	79f0 <FatFile::write(void const*, unsigned int)+0x20>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    7b20:	movs	r2, #1
    7b22:	b.n	7ae8 <FatFile::write(void const*, unsigned int)+0x118>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    7b24:	movs	r2, #5
    7b26:	b.n	7ae8 <FatFile::write(void const*, unsigned int)+0x118>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    7b28:	ldrb.w	r3, [ip, #4]
    7b2c:	subs	r3, r3, r6
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    7b2e:	mov.w	r6, r8, lsr #9
    7b32:	cmp	r3, r6
    7b34:	it	cs
    7b36:	movcs	r3, r6
    return sector <= m_sector && m_sector < (sector + count);
    7b38:	cmp	r1, r2
      n = nSector << m_vol->bytesPerSectorShift();
    7b3a:	mov.w	r6, r3, lsl #9
    7b3e:	bhi.n	7b54 <FatFile::write(void const*, unsigned int)+0x184>
    7b40:	add.w	lr, r1, r3
    7b44:	cmp	lr, r2
    m_sector = 0XFFFFFFFF;
    7b46:	ittt	hi
    7b48:	movhi.w	r2, #4294967295
    m_status = 0;
    7b4c:	strbhi.w	r5, [ip, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7b50:	strhi.w	r2, [ip, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
    7b54:	ldr	r2, [r0, #0]
    7b56:	ldr	r5, [r2, #40]	; 0x28
    7b58:	mov	r2, r9
    7b5a:	blx	r5
    7b5c:	b.n	7b0e <FatFile::write(void const*, unsigned int)+0x13e>
  } else if (FsDateTime::callback) {
    7b5e:	ldr	r3, [pc, #16]	; (7b70 <FatFile::write(void const*, unsigned int)+0x1a0>)
    7b60:	ldr	r3, [r3, #0]
    7b62:	cmp	r3, #0
    7b64:	bne.w	7a02 <FatFile::write(void const*, unsigned int)+0x32>
}
    7b68:	mov	r0, r7
    7b6a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7b6e:	nop
    7b70:	.word	0x200147fc

00007b74 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
    7b74:	ldr	r3, [r2, #0]
  if (n > 256) n = 256;
    7b76:	cmp.w	r3, #256	; 0x100
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
    7b7a:	push	{r4, r5, lr}
    7b7c:	mov	r4, r3
    7b7e:	it	cs
    7b80:	movcs.w	r4, #256	; 0x100
  uint16_t *e = p + n;
    7b84:	add.w	r5, r1, r4, lsl #1
  while (p < e) {
    7b88:	cmp	r1, r5
    7b8a:	bcc.n	7b92 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x1e>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7b8c:	subs	r3, r3, r4
    7b8e:	str	r3, [r2, #0]
}
    7b90:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7b92:	ldrh.w	r0, [r1], #2
    7b96:	cmp	r0, #0
    7b98:	bne.n	7b88 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>
    7b9a:	ldr	r0, [r2, #4]
    7b9c:	adds	r0, #1
    7b9e:	str	r0, [r2, #4]
    7ba0:	b.n	7b88 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x14>

00007ba2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
    7ba2:	ldr	r3, [r2, #0]
  if (n > 128) n = 128;
    7ba4:	cmp	r3, #128	; 0x80
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
    7ba6:	push	{r4, r5, lr}
    7ba8:	mov	r4, r3
    7baa:	it	cs
    7bac:	movcs	r4, #128	; 0x80
  uint32_t *e = p + n;
    7bae:	add.w	r5, r1, r4, lsl #2
  while (p < e) {
    7bb2:	cmp	r1, r5
    7bb4:	bcc.n	7bbc <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x1a>
    if (*p++ == 0) state->free_count++;
  }
  state->clusters_to_do -= n;
    7bb6:	subs	r3, r3, r4
    7bb8:	str	r3, [r2, #0]
}
    7bba:	pop	{r4, r5, pc}
    if (*p++ == 0) state->free_count++;
    7bbc:	ldr.w	r0, [r1], #4
    7bc0:	cmp	r0, #0
    7bc2:	bne.n	7bb2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>
    7bc4:	ldr	r0, [r2, #4]
    7bc6:	adds	r0, #1
    7bc8:	str	r0, [r2, #4]
    7bca:	b.n	7bb2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x10>

00007bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>:
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7bcc:	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
    7bce:	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    7bd2:	cmp	r3, #2
    7bd4:	it	eq
    7bd6:	orreq.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
    7bda:	b.w	56a2 <FsCache::prepare(unsigned long, unsigned char)>

00007bde <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7bde:	cmp	r1, #1
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    7be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be4:	mov	r6, r0
    7be6:	mov	r4, r1
    7be8:	mov	r7, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7bea:	bhi.n	7bf4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x16>
  return -1;
    7bec:	mov.w	r0, #4294967295
}
    7bf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7bf4:	ldr	r3, [r0, #28]
    7bf6:	cmp	r3, r1
    7bf8:	bcc.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    return m_fatType;
    7bfa:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7bfc:	cmp	r3, #32
    7bfe:	bne.n	7c26 <FatPartition::fatGet(unsigned long, unsigned long*)+0x48>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7c00:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c02:	movs	r2, #0
    7c04:	add.w	r1, r1, r4, lsr #7
    7c08:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7c0c:	cmp	r0, #0
    7c0e:	beq.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7c10:	lsls	r4, r4, #2
    next = getLe32(pc + offset);
    7c12:	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
    7c16:	ldr	r3, [r0, r4]
  if (isEOC(next)) {
    7c18:	ldr	r2, [r6, #28]
    7c1a:	cmp	r2, r3
  return 1;
    7c1c:	itet	cs
    7c1e:	movcs	r0, #1
    return 0;
    7c20:	movcc	r0, #0
  *value = next;
    7c22:	strcs	r3, [r7, #0]
  return 1;
    7c24:	b.n	7bf0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x12>
  } else if (fatType() == 16) {
    7c26:	cmp	r3, #16
    7c28:	bne.n	7c46 <FatPartition::fatGet(unsigned long, unsigned long*)+0x68>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7c2a:	ubfx	r1, r1, #8, #8
    7c2e:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c30:	movs	r2, #0
    7c32:	add	r1, r3
    7c34:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7c38:	cmp	r0, #0
    7c3a:	beq.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7c3c:	lsls	r4, r4, #1
    next = getLe16(pc + offset);
    7c3e:	and.w	r4, r4, #510	; 0x1fe
    7c42:	ldrh	r3, [r0, r4]
    7c44:	b.n	7c18 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>
  } else if (FAT12_SUPPORT && fatType() == 12) {
    7c46:	cmp	r3, #12
    7c48:	bne.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index += index >> 1;
    7c4a:	ubfx	r8, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7c4e:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c50:	movs	r2, #0
    index += index >> 1;
    7c52:	uxtah	r8, r8, r1
    7c56:	uxth.w	r5, r8
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7c5a:	ubfx	r8, r8, #9, #7
    7c5e:	add	r8, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_READ);
    7c60:	mov	r1, r8
    7c62:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7c66:	cmp	r0, #0
    7c68:	beq.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
    index &= m_sectorMask;
    7c6a:	ubfx	r3, r5, #0, #9
    uint16_t tmp = pc[index];
    7c6e:	ldrb	r5, [r0, r3]
    index++;
    7c70:	adds	r3, #1
    if (index == m_bytesPerSector) {
    7c72:	cmp.w	r3, #512	; 0x200
    7c76:	bne.n	7c8a <FatPartition::fatGet(unsigned long, unsigned long*)+0xac>
      pc = fatCachePrepare(sector + 1, FsCache::CACHE_FOR_READ);
    7c78:	movs	r2, #0
    7c7a:	add.w	r1, r8, #1
    7c7e:	mov	r0, r6
    7c80:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7c84:	cmp	r0, #0
    7c86:	beq.n	7bec <FatPartition::fatGet(unsigned long, unsigned long*)+0xe>
      index = 0;
    7c88:	movs	r3, #0
    tmp |= pc[index] << 8;
    7c8a:	ldrb	r3, [r0, r3]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7c8c:	lsls	r2, r4, #31
    tmp |= pc[index] << 8;
    7c8e:	orr.w	r3, r5, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
    7c92:	ite	mi
    7c94:	lsrmi	r3, r3, #4
    7c96:	ubfxpl	r3, r3, #0, #12
    7c9a:	b.n	7c18 <FatPartition::fatGet(unsigned long, unsigned long*)+0x3a>

00007c9c <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
    7c9c:	cmp	r1, #1
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    7c9e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ca2:	mov	r8, r0
    7ca4:	mov	r4, r1
    7ca6:	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
    7ca8:	bhi.n	7cb0 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
  return false;
    7caa:	movs	r0, #0
}
    7cac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
    7cb0:	ldr	r3, [r0, #28]
    7cb2:	cmp	r3, r1
    7cb4:	bcc.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    7cb6:	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
    7cb8:	cmp	r3, #32
    7cba:	bne.n	7cd8 <FatPartition::fatPut(unsigned long, unsigned long)+0x3c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    7cbc:	ldr	r1, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7cbe:	movs	r2, #1
    7cc0:	add.w	r1, r1, r4, lsr #7
    7cc4:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7cc8:	cmp	r0, #0
    7cca:	beq.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 2) & m_sectorMask;
    7ccc:	lsls	r4, r4, #2
    setLe32(pc + offset, value);
    7cce:	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    7cd2:	str	r5, [r0, r4]
    return true;
    7cd4:	movs	r0, #1
    7cd6:	b.n	7cac <FatPartition::fatPut(unsigned long, unsigned long)+0x10>
  if (fatType() == 16) {
    7cd8:	cmp	r3, #16
    7cda:	bne.n	7cf8 <FatPartition::fatPut(unsigned long, unsigned long)+0x5c>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    7cdc:	ubfx	r1, r1, #8, #8
    7ce0:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7ce2:	movs	r2, #1
    7ce4:	add	r1, r3
    7ce6:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7cea:	cmp	r0, #0
    7cec:	beq.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    uint16_t offset = (cluster << 1) & m_sectorMask;
    7cee:	lsls	r4, r4, #1
    setLe16(pc + offset, value);
    7cf0:	and.w	r4, r4, #510	; 0x1fe
    7cf4:	strh	r5, [r0, r4]
    return true;
    7cf6:	b.n	7cd4 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>
  if (FAT12_SUPPORT && fatType() == 12) {
    7cf8:	cmp	r3, #12
    7cfa:	bne.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    index += index >> 1;
    7cfc:	ubfx	r7, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7d00:	ldr	r3, [r0, #24]
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7d02:	movs	r2, #1
    index += index >> 1;
    7d04:	uxtah	r7, r7, r1
    7d08:	uxth	r6, r7
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
    7d0a:	ubfx	r7, r7, #9, #7
    7d0e:	add	r7, r3
    pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7d10:	mov	r1, r7
    7d12:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
    if (!pc) {
    7d16:	cmp	r0, #0
    7d18:	beq.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
    if (cluster & 1) {
    7d1a:	ands.w	r4, r4, #1
    index &= m_sectorMask;
    7d1e:	ubfx	r3, r6, #0, #9
      tmp = (pc[index] & 0XF) | tmp << 4;
    7d22:	itt	ne
    7d24:	lslne	r2, r5, #4
    7d26:	ldrbne	r1, [r0, r3]
    7d28:	add.w	r6, r0, r3
    index++;
    7d2c:	add.w	r3, r3, #1
      tmp = (pc[index] & 0XF) | tmp << 4;
    7d30:	ittet	ne
    7d32:	andne.w	r2, r2, #240	; 0xf0
    7d36:	andne.w	r1, r1, #15
    uint8_t tmp = value;
    7d3a:	uxtbeq	r2, r5
      tmp = (pc[index] & 0XF) | tmp << 4;
    7d3c:	orrne	r2, r1
    if (index == m_bytesPerSector) {
    7d3e:	cmp.w	r3, #512	; 0x200
    pc[index] = tmp;
    7d42:	strb	r2, [r6, #0]
    if (index == m_bytesPerSector) {
    7d44:	bne.n	7d56 <FatPartition::fatPut(unsigned long, unsigned long)+0xba>
      pc = fatCachePrepare(sector, FsCache::CACHE_FOR_WRITE);
    7d46:	movs	r2, #1
    7d48:	mov	r0, r8
    7d4a:	adds	r1, r7, r2
    7d4c:	bl	7bcc <FatPartition::fatCachePrepare(unsigned long, unsigned char)>
      if (!pc) {
    7d50:	cmp	r0, #0
    7d52:	beq.n	7caa <FatPartition::fatPut(unsigned long, unsigned long)+0xe>
      index = 0;
    7d54:	movs	r3, #0
    tmp = value >> 4;
    7d56:	ubfx	r5, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7d5a:	adds	r2, r0, r3
    if (!(cluster & 1)) {
    7d5c:	cbnz	r4, 7d68 <FatPartition::fatPut(unsigned long, unsigned long)+0xcc>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
    7d5e:	ldrb	r3, [r0, r3]
    7d60:	bic.w	r3, r3, #15
    7d64:	orr.w	r5, r3, r5, lsr #4
    pc[index] = tmp;
    7d68:	strb	r5, [r2, #0]
    7d6a:	b.n	7cd4 <FatPartition::fatPut(unsigned long, unsigned long)+0x38>

00007d6c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7d6c:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
    7d70:	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    7d72:	mov	r5, r0
    7d74:	mov	r6, r1
    7d76:	mov	r8, r2
  if (m_allocSearchStart < current) {
    7d78:	cmp	r4, r1
    7d7a:	bcc.n	7d80 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      setStart = true;
    7d7c:	movs	r7, #1
    7d7e:	b.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7d80:	mov	r4, r1
    setStart = false;
    7d82:	movs	r7, #0
    find++;
    7d84:	adds	r4, #1
    if (find > m_lastCluster) {
    7d86:	ldr	r3, [r5, #28]
    7d88:	cmp	r3, r4
    7d8a:	bcs.n	7d92 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x26>
      if (setStart) {
    7d8c:	cbnz	r7, 7dc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      find = m_allocSearchStart;
    7d8e:	ldr	r4, [r5, #12]
    7d90:	b.n	7d7c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x10>
    if (find == current) {
    7d92:	cmp	r6, r4
    7d94:	beq.n	7dc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    int8_t fg = fatGet(find, &f);
    7d96:	add	r2, sp, #4
    7d98:	mov	r1, r4
    7d9a:	mov	r0, r5
    7d9c:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7da0:	cmp	r0, #0
    7da2:	blt.n	7dc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
    if (fg && f == 0) {
    7da4:	beq.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    7da6:	ldr	r3, [sp, #4]
    7da8:	cmp	r3, #0
    7daa:	bne.n	7d84 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
    7dac:	cbz	r7, 7db0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x44>
    m_allocSearchStart = find;
    7dae:	str	r4, [r5, #12]
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    7db0:	mvn.w	r2, #4026531840	; 0xf0000000
    7db4:	mov	r1, r4
    7db6:	mov	r0, r5
    7db8:	bl	7c9c <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
    7dbc:	mov	r7, r0
    7dbe:	cbnz	r0, 7dca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x5e>
  return false;
    7dc0:	movs	r7, #0
}
    7dc2:	mov	r0, r7
    7dc4:	add	sp, #8
    7dc6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
    7dca:	cbnz	r6, 7dd8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
    if (m_freeClusterCount >= 0) {
    7dcc:	ldr	r3, [r5, #36]	; 0x24
    7dce:	cmp	r3, #0
    7dd0:	bge.n	7de8 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
  *next = find;
    7dd2:	str.w	r4, [r8]
  return true;
    7dd6:	b.n	7dc2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x56>
    if (!fatPut(current, find)) {
    7dd8:	mov	r2, r4
    7dda:	mov	r1, r6
    7ddc:	mov	r0, r5
    7dde:	bl	7c9c <FatPartition::fatPut(unsigned long, unsigned long)>
    7de2:	cmp	r0, #0
    7de4:	bne.n	7dcc <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
    7de6:	b.n	7dc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x54>
      m_freeClusterCount += change;
    7de8:	subs	r3, #1
    7dea:	str	r3, [r5, #36]	; 0x24
    7dec:	b.n	7dd2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>

00007dee <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
    7dee:	push	{r0, r1, r4, r5, r6, lr}
    7df0:	mov	r5, r0
    7df2:	mov	r4, r1
    fg = fatGet(cluster, &next);
    7df4:	add	r2, sp, #4
    7df6:	mov	r1, r4
    7df8:	mov	r0, r5
    7dfa:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    7dfe:	subs	r6, r0, #0
    7e00:	blt.n	7e2e <FatPartition::freeChain(unsigned long)+0x40>
    if (!fatPut(cluster, 0)) {
    7e02:	movs	r2, #0
    7e04:	mov	r1, r4
    7e06:	mov	r0, r5
    7e08:	bl	7c9c <FatPartition::fatPut(unsigned long, unsigned long)>
    7e0c:	cbz	r0, 7e2e <FatPartition::freeChain(unsigned long)+0x40>
    if (m_freeClusterCount >= 0) {
    7e0e:	ldr	r3, [r5, #36]	; 0x24
    7e10:	cmp	r3, #0
      m_freeClusterCount += change;
    7e12:	itt	ge
    7e14:	addge	r3, #1
    7e16:	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
    7e18:	ldr	r3, [r5, #12]
    7e1a:	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
    7e1c:	itt	hi
    7e1e:	addhi.w	r4, r4, #4294967295
    7e22:	strhi	r4, [r5, #12]
    cluster = next;
    7e24:	ldr	r4, [sp, #4]
  } while (fg);
    7e26:	cmp	r6, #0
    7e28:	bne.n	7df4 <FatPartition::freeChain(unsigned long)+0x6>
}
    7e2a:	add	sp, #8
    7e2c:	pop	{r4, r5, r6, pc}
  return false;
    7e2e:	movs	r0, #0
    7e30:	b.n	7e2a <FatPartition::freeChain(unsigned long)+0x3c>
	...

00007e34 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
    7e34:	push	{r4, r5, r6, r7, lr}
    7e36:	mov	r4, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
    7e38:	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
    7e3a:	sub	sp, #28
  if (m_freeClusterCount >= 0) {
    7e3c:	cmp	r0, #0
    7e3e:	bge.n	7eb2 <FatPartition::freeClusterCount()+0x7e>
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
    7e40:	ldrb	r3, [r4, #7]
    7e42:	movs	r5, #0
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
    7e44:	ldr	r6, [r4, #28]
 if (FAT12_SUPPORT && fatType() == 12) {
    7e46:	cmp	r3, #12
    uint32_t todo = m_lastCluster + 1;
    7e48:	add.w	r6, r6, #1
 if (FAT12_SUPPORT && fatType() == 12) {
    7e4c:	beq.n	7eb6 <FatPartition::freeClusterCount()+0x82>
    return m_status & CACHE_STATUS_DIRTY;
    7e4e:	ldrb.w	r2, [r4, #568]	; 0x238
  uint32_t num_sectors;

  //num_sectors = SD.sdfs.m_fVol->sectorsPerFat(); // edit FsVolume.h for public
  //Serial.printf("  num_sectors = %u\n", num_sectors);

  num_sectors = m_sectorsPerFat;
    7e52:	ldr	r3, [r4, #16]
    if (isDirty() && !sync()) {
    7e54:	lsls	r2, r2, #31
  state.clusters_to_do = m_lastCluster + 1;
    7e56:	strd	r6, r5, [sp, #16]
    7e5a:	bmi.n	7eba <FatPartition::freeClusterCount()+0x86>
    m_status = 0;
    7e5c:	movs	r2, #0
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
  if (fatType() == FAT_TYPE_FAT32) {
    7e5e:	ldrb	r5, [r4, #7]
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e60:	ldr	r0, [r4, #0]
    7e62:	add	r6, sp, #16
    7e64:	strb.w	r2, [r4, #568]	; 0x238
  if (fatType() == FAT_TYPE_FAT32) {
    7e68:	cmp	r5, #32
    m_sector = 0XFFFFFFFF;
    7e6a:	mov.w	r2, #4294967295
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e6e:	ldr	r1, [r4, #24]
    7e70:	ldr	r5, [r0, #0]
    7e72:	str.w	r2, [r4, #580]	; 0x244
    return m_buffer;
    7e76:	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
    7e7a:	bne.n	7ecc <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
    7e7c:	str	r6, [sp, #4]
    7e7e:	ldr	r6, [pc, #84]	; (7ed4 <FatPartition::freeClusterCount()+0xa0>)
  } else {
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7e80:	str	r6, [sp, #0]
    7e82:	ldr	r5, [r5, #24]
    7e84:	blx	r5
    7e86:	cbz	r0, 7e9c <FatPartition::freeClusterCount()+0x68>
  }

  setFreeClusterCount(state.free_count);
    7e88:	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
    7e8a:	str	r0, [r4, #36]	; 0x24
  return state.free_count;
    7e8c:	b.n	7eb2 <FatPartition::freeClusterCount()+0x7e>
      int8_t fg = fatGet(i, &c);
    7e8e:	add	r2, sp, #16
    7e90:	mov	r1, r7
    7e92:	mov	r0, r4
    7e94:	bl	7bde <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    7e98:	cmp	r0, #0
    7e9a:	bge.n	7ea2 <FatPartition::freeClusterCount()+0x6e>
  if (buf == nullptr) return -1;
    7e9c:	mov.w	r0, #4294967295
    7ea0:	b.n	7eb2 <FatPartition::freeClusterCount()+0x7e>
      if (fg && c == 0) {
    7ea2:	beq.n	7eaa <FatPartition::freeClusterCount()+0x76>
    7ea4:	ldr	r3, [sp, #16]
    7ea6:	cbnz	r3, 7eaa <FatPartition::freeClusterCount()+0x76>
        free++;
    7ea8:	adds	r5, #1
    for (unsigned i = 2; i < todo; i++) {
    7eaa:	adds	r7, #1
    7eac:	cmp	r7, r6
    7eae:	bcc.n	7e8e <FatPartition::freeClusterCount()+0x5a>
    return free;
    7eb0:	mov	r0, r5
}
    7eb2:	add	sp, #28
    7eb4:	pop	{r4, r5, r6, r7, pc}
    for (unsigned i = 2; i < todo; i++) {
    7eb6:	movs	r7, #2
    7eb8:	b.n	7eac <FatPartition::freeClusterCount()+0x78>
    if (isDirty() && !sync()) {
    7eba:	add.w	r0, r4, #568	; 0x238
    7ebe:	str	r3, [sp, #12]
    7ec0:	bl	5654 <FsCache::sync()>
    7ec4:	ldr	r3, [sp, #12]
    7ec6:	cmp	r0, #0
    7ec8:	bne.n	7e5c <FatPartition::freeClusterCount()+0x28>
    7eca:	b.n	7e9c <FatPartition::freeClusterCount()+0x68>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
    7ecc:	str	r6, [sp, #4]
    7ece:	ldr	r6, [pc, #8]	; (7ed8 <FatPartition::freeClusterCount()+0xa4>)
    7ed0:	b.n	7e80 <FatPartition::freeClusterCount()+0x4c>
    7ed2:	nop
    7ed4:	.word	0x00007ba3
    7ed8:	.word	0x00007b75

00007edc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7edc:	push	{r3, r4, r5, r6, r7, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    7ede:	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
    7ee0:	mov	r4, r0
  m_blockDev = dev;
    7ee2:	str	r1, [r0, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    7ee4:	mov	r5, r2
  m_fatType = 0;
    7ee6:	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
    7ee8:	movs	r0, #1
  m_cache.init(dev);
    7eea:	add.w	r6, r4, #40	; 0x28
    m_blockDev = blockDev;
    7eee:	str	r1, [r4, #44]	; 0x2c
  m_allocSearchStart = 1;
    7ef0:	str	r0, [r4, #12]
    m_sector = 0XFFFFFFFF;
    7ef2:	mov.w	r0, #4294967295
    m_status = 0;
    7ef6:	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
    7efa:	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
    7efc:	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
    7f00:	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
    7f04:	str.w	r0, [r4, #580]	; 0x244
  if (part) {
    7f08:	cbz	r2, 7f3e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    7f0a:	cmp	r2, #4
    7f0c:	bls.n	7f12 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    7f0e:	movs	r0, #0
}
    7f10:	pop	{r3, r4, r5, r6, r7, pc}
    MbrPart_t* mp = mbr->part + part - 1;
    7f12:	add.w	r5, r5, #268435456	; 0x10000000
    return m_cache.prepare(sector, options);
    7f16:	mov	r2, r3
    7f18:	mov	r1, r3
    7f1a:	mov	r0, r6
    7f1c:	subs	r5, #1
    7f1e:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
    7f22:	add.w	r3, r0, #446	; 0x1be
    7f26:	lsls	r2, r5, #4
    7f28:	add.w	r5, r3, r5, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    7f2c:	cmp	r0, #0
    7f2e:	beq.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7f30:	ldrb	r1, [r5, #4]
    7f32:	cmp	r1, #0
    7f34:	beq.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7f36:	ldrb	r3, [r3, r2]
    7f38:	lsls	r3, r3, #25
    7f3a:	bne.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
    7f3c:	ldr	r5, [r5, #8]
    7f3e:	movs	r2, #0
    7f40:	mov	r1, r5
    7f42:	mov	r0, r6
    7f44:	bl	56a2 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
    7f48:	cmp	r0, #0
    7f4a:	beq.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    7f4c:	ldrh.w	r3, [r0, #11]
    7f50:	cmp.w	r3, #512	; 0x200
    7f54:	bne.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
    7f56:	ldrb	r3, [r0, #16]
    7f58:	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
    7f5a:	subs	r3, #1
    7f5c:	cmp	r3, #1
    7f5e:	bhi.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7f60:	ldrb	r1, [r0, #13]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7f62:	movs	r6, #9
    7f64:	movs	r2, #0
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7f66:	subs	r3, r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    7f68:	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    7f6a:	strb	r3, [r4, #5]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7f6c:	movs	r3, #1
    7f6e:	cmp	r1, r3
    7f70:	bne.n	7fda <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xfe>
    7f72:	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    7f74:	ldrh	r3, [r0, #22]
    7f76:	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
    7f78:	cbnz	r3, 7f7e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
    7f7a:	ldr	r3, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    7f7c:	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7f7e:	ldrh	r3, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
    7f80:	ldrh.w	r1, [r0, #17]
    7f84:	add	r3, r5
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f86:	ldr	r6, [r4, #16]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    7f88:	strh	r1, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7f8a:	lsls	r1, r1, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    7f8c:	str	r3, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f8e:	ldrb	r7, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    7f90:	addw	r1, r1, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
    7f94:	mla	r3, r6, r7, r3
    7f98:	str	r3, [r4, #32]
  m_dataStartSector = m_rootDirStart +
    7f9a:	add.w	r3, r3, r1, lsr #9
  totalSectors = getLe16(bpb->totalSectors16);
    7f9e:	ldrh.w	r1, [r0, #19]
  m_dataStartSector = m_rootDirStart +
    7fa2:	str	r3, [r4, #20]
  if (totalSectors == 0) {
    7fa4:	cbnz	r1, 7fa8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xcc>
  return *reinterpret_cast<const uint32_t*>(src);
    7fa6:	ldr	r1, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    7fa8:	subs	r5, r5, r3
    7faa:	add	r5, r1
  clusterCount >>= m_sectorsPerClusterShift;
    7fac:	lsrs	r5, r2
  m_lastCluster = clusterCount + 1;
    7fae:	adds	r3, r5, #1
    7fb0:	str	r3, [r4, #28]
    m_freeClusterCount = value;
    7fb2:	mov.w	r3, #4294967295
    7fb6:	str	r3, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
    7fb8:	movw	r3, #4084	; 0xff4
    7fbc:	cmp	r5, r3
    7fbe:	bls.n	7fec <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x110>
  } else if (clusterCount < 65525) {
    7fc0:	movw	r3, #65524	; 0xfff4
    7fc4:	cmp	r5, r3
    7fc6:	bls.n	7ff0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x114>
    7fc8:	ldr	r3, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    7fca:	str	r3, [r4, #32]
    7fcc:	movs	r3, #32
  return true;
    7fce:	movs	r0, #1
    m_fatType = 12;
    7fd0:	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    7fd2:	str	r6, [r4, #48]	; 0x30
    7fd4:	str.w	r6, [r4, #576]	; 0x240
  return true;
    7fd8:	b.n	7f10 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
    if (tmp == 0) {
    7fda:	subs	r6, #1
    7fdc:	bne.n	7fe2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x106>
    7fde:	strb	r2, [r4, #6]
    7fe0:	b.n	7f0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
    m_sectorsPerClusterShift++;
    7fe2:	adds	r2, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7fe4:	lsls	r3, r3, #1
    m_sectorsPerClusterShift++;
    7fe6:	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    7fe8:	uxtb	r3, r3
    7fea:	b.n	7f6e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x92>
    7fec:	movs	r3, #12
    7fee:	b.n	7fce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>
    7ff0:	movs	r3, #16
    7ff2:	b.n	7fce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf2>

00007ff4 <FatVolume::chdir(char const*)>:
#define DBG_FILE "FatVolume.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
    7ff4:	push	{r4, r5, r6, lr}
  FatFile* vwd() {return &m_vwd;}
    7ff6:	add.w	r4, r0, #1096	; 0x448
    7ffa:	sub	sp, #40	; 0x28
  FatFile() {}
    7ffc:	movs	r3, #0
    7ffe:	mov	r2, r1
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
    8000:	add	r0, sp, #4
    8002:	mov	r1, r4
    8004:	str	r3, [sp, #4]
    8006:	bl	7580 <FatFile::open(FatFile*, char const*, int)>
    800a:	mov	r6, r0
    800c:	cbz	r0, 802a <FatVolume::chdir(char const*)+0x36>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!dir.isDir()) {
    800e:	ldrb.w	r3, [sp, #4]
    8012:	ands.w	r3, r3, #112	; 0x70
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_vwd = dir;
    8016:	itett	ne
    8018:	addne	r5, sp, #4
  return true;

 fail:
  return false;
    801a:	moveq	r6, r3
  m_vwd = dir;
    801c:	ldmiane	r5!, {r0, r1, r2, r3}
    801e:	stmiane	r4!, {r0, r1, r2, r3}
    8020:	itttt	ne
    8022:	ldmiane	r5!, {r0, r1, r2, r3}
    8024:	stmiane	r4!, {r0, r1, r2, r3}
    8026:	ldrne	r3, [r5, #0]
    8028:	strne	r3, [r4, #0]
}
    802a:	mov	r0, r6
    802c:	add	sp, #40	; 0x28
    802e:	pop	{r4, r5, r6, pc}

00008030 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>:
    for (uint8_t i = 0; i < 11; i++) {
    8030:	subs	r1, r0, #1
    8032:	add.w	r3, r0, #10
    uint8_t sum = 0;
    8036:	movs	r0, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8038:	lsls	r2, r0, #7
    803a:	orr.w	r2, r2, r0, lsr #1
    803e:	ldrb.w	r0, [r1, #1]!
    8042:	uxtab	r2, r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    8046:	cmp	r1, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
    8048:	uxtb	r0, r2
    for (uint8_t i = 0; i < 11; i++) {
    804a:	bne.n	8038 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]+0x8>
    }
    return sum;
  }
    804c:	bx	lr

0000804e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    804e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    8052:	mov	r5, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    8054:	sub	sp, #52	; 0x34
    8056:	mov	r6, r2
    8058:	mov	r7, r0
    805a:	mov	r9, r1
    805c:	mov	r8, r3
  FatFile dir = *this;
    805e:	add	r4, sp, #12
    8060:	ldmia	r5!, {r0, r1, r2, r3}
    8062:	stmia	r4!, {r0, r1, r2, r3}
    8064:	ldmia	r5!, {r0, r1, r2, r3}
    8066:	stmia	r4!, {r0, r1, r2, r3}
    8068:	ldr	r3, [r5, #0]
    806a:	str	r3, [r4, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    806c:	movs	r4, #1
    next = begin;
    806e:	ldr	r3, [r6, #0]
    8070:	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
    8072:	movs	r3, #0
    8074:	strh	r3, [r6, #12]
    8076:	cmp	r4, r8
    8078:	bls.n	807e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
        return false;
      }
#endif  // USE_UTF8_LONG_NAMES
    }
  }
  return true;
    807a:	movs	r0, #1
    807c:	b.n	8090 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    807e:	sub.w	r1, r9, r4
    8082:	add	r0, sp, #12
    8084:	uxth	r1, r1
    8086:	bl	6db4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    808a:	mov	sl, r0
    808c:	cbnz	r0, 8096 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x48>

 fail:
  return false;
    808e:	movs	r0, #0
}
    8090:	add	sp, #52	; 0x34
    8092:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8096:	movs	r5, #0
      uint16_t u = getLfnChar(ldir, i);
    8098:	uxtb	r2, r5
    809a:	mov	r1, sl
    809c:	mov	r0, r7
    809e:	bl	6dce <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
    80a2:	ldrh	r3, [r6, #12]
    80a4:	mov	fp, r0
    80a6:	cbnz	r3, 80b8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
    80a8:	ldrd	r2, r3, [r6, #4]
    80ac:	cmp	r2, r3
    80ae:	bne.n	80b8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x6a>
        return u == 0;
    80b0:	clz	r0, r0
    80b4:	lsrs	r0, r0, #5
    80b6:	b.n	8090 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x42>
      uint16_t cp = fname->get16();
    80b8:	mov	r0, r6
    80ba:	bl	5798 <FsName::get16()>
    80be:	str	r0, [sp, #4]
      if (toUpcase(u) != toUpcase(cp)) {
    80c0:	mov	r0, fp
    80c2:	bl	56f0 <toUpcase(unsigned short)>
    80c6:	ldr	r3, [sp, #4]
    80c8:	mov	fp, r0
    80ca:	mov	r0, r3
    80cc:	bl	56f0 <toUpcase(unsigned short)>
    80d0:	cmp	fp, r0
    80d2:	bne.n	808e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x40>
    for (uint8_t i = 0; i < 13; i++) {
    80d4:	adds	r5, #1
    80d6:	cmp	r5, #13
    80d8:	bne.n	8098 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x4a>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    80da:	adds	r4, #1
    80dc:	uxtb	r4, r4
    80de:	b.n	8076 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x28>

000080e0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    80e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
    80e4:	mov	r5, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
    80e6:	sub	sp, #52	; 0x34
    80e8:	mov	r4, r2
    80ea:	mov	r9, r1
    80ec:	mov	r7, r3
  FatFile dir = *this;
    80ee:	add	r6, sp, #12
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    80f0:	mov.w	sl, #15
  FatFile dir = *this;
    80f4:	ldmia	r5!, {r0, r1, r2, r3}
    80f6:	stmia	r6!, {r0, r1, r2, r3}
    80f8:	ldmia	r5!, {r0, r1, r2, r3}
    80fa:	stmia	r6!, {r0, r1, r2, r3}
    80fc:	ldr	r3, [r5, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    80fe:	add.w	r0, r4, #22
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8102:	movs	r5, #1
  FatFile dir = *this;
    8104:	str	r3, [r6, #0]
  uint8_t checksum = lfnChecksum(fname->sfn);
    8106:	bl	8030 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    ls = 0;  // lowSurrogate
    810a:	movs	r6, #0
    next = begin;
    810c:	ldr	r3, [r4, #0]
    810e:	mov	r8, r0
    8110:	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
    8112:	strh	r6, [r4, #12]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8114:	cmp	r5, r7
    8116:	bls.n	8120 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x40>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
    8118:	movs	r0, #1

 fail:
  return false;
}
    811a:	add	sp, #52	; 0x34
    811c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
    8120:	sub.w	r1, r9, r5
    8124:	add	r0, sp, #12
    8126:	uxth	r1, r1
    8128:	bl	6db4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    812c:	cmp	r0, #0
    812e:	beq.n	811a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x3a>
    dir.m_vol->cacheDirty();
    8130:	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8132:	cmp	r5, r7
    ldir->mustBeZero1 = 0;
    8134:	mov.w	r1, #0
    8138:	add.w	fp, r0, #1
    m_status |= CACHE_STATUS_DIRTY;
    813c:	ldrb.w	r3, [r2, #40]	; 0x28
    8140:	orr.w	r3, r3, #1
    8144:	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8148:	ite	eq
    814a:	orreq.w	r3, r5, #64	; 0x40
    814e:	movne	r3, r5
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    8150:	strb.w	sl, [r0, #11]
    ldir->mustBeZero1 = 0;
    8154:	strb	r1, [r0, #12]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    8156:	strb	r3, [r0, #0]
    ldir->checksum = checksum;
    8158:	strb.w	r8, [r0, #13]
  *reinterpret_cast<uint16_t*>(dst) = src;
    815c:	strh	r1, [r0, #26]
    return !ls && next == end;
    815e:	ldrh	r0, [r4, #12]
    8160:	cbnz	r0, 818e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
    8162:	ldrd	r2, r3, [r4, #4]
    8166:	cmp	r2, r3
    8168:	bne.n	818e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xae>
        cp = fc++ ? 0XFFFF : 0;
    816a:	cbz	r6, 819a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xba>
    816c:	adds	r6, #1
    816e:	movw	r0, #65535	; 0xffff
    8172:	uxtb	r6, r6
  if (i < 5) {
    8174:	cmp	r1, #4
    8176:	uxtb	r3, r1
    8178:	bhi.n	819e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbe>
    817a:	strh.w	r0, [fp]
    for (uint8_t i = 0; i < 13; i++) {
    817e:	adds	r1, #1
    8180:	add.w	fp, fp, #2
    8184:	cmp	r1, #13
    8186:	bne.n	815e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x7e>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
    8188:	adds	r5, #1
    818a:	uxtb	r5, r5
    818c:	b.n	8114 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x34>
        cp = fname->get16();
    818e:	mov	r0, r4
    8190:	str	r1, [sp, #4]
    8192:	bl	5798 <FsName::get16()>
    8196:	ldr	r1, [sp, #4]
    8198:	b.n	8174 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
    819a:	movs	r6, #1
    819c:	b.n	8174 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x94>
  } else if (i < 11) {
    819e:	cmp	r3, #10
    81a0:	ite	ls
    81a2:	strhls.w	r0, [fp, #3]
    81a6:	strhhi.w	r0, [fp, #5]
}
    81aa:	b.n	817e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x9e>

000081ac <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
    81ac:	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    81ae:	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
    81b2:	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
    81b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const char* end = fname->end;
    81ba:	ldr	r6, [r0, #8]
bool FatFile::makeSFN(FatLfn_t* fname) {
    81bc:	mov	r5, r0
    fname->sfn[k] = ' ';
    81be:	str.w	r1, [r0, #22]
    81c2:	str	r1, [r2, #4]
    81c4:	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
    81c8:	ldrb	r0, [r3, #0]
    81ca:	subs	r0, #46	; 0x2e
    81cc:	it	ne
    81ce:	movne	r0, #1
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
    81d0:	mov	r7, r3
    81d2:	ldrb.w	r2, [r3], #1
    81d6:	cmp	r2, #46	; 0x2e
    81d8:	beq.n	81d0 <FatFile::makeSFN(FatLfn_t*)+0x24>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
    81da:	subs	r3, r6, #1
    81dc:	cmp	r3, r7
    81de:	mov	lr, r3
    81e0:	bls.n	81ea <FatFile::makeSFN(FatLfn_t*)+0x3e>
    81e2:	ldrb.w	r2, [r3], #-1
    81e6:	cmp	r2, #46	; 0x2e
    81e8:	bne.n	81dc <FatFile::makeSFN(FatLfn_t*)+0x30>
    81ea:	movs	r2, #0
    81ec:	mov.w	ip, #7
    81f0:	mov.w	r9, #8
    81f4:	mov	r1, r2
    81f6:	mov	r8, r2
    81f8:	b.n	8210 <FatFile::makeSFN(FatLfn_t*)+0x64>

  for (; ptr < end; ptr++) {
    c = *ptr;
    81fa:	ldrb	r3, [r7, #0]
    if (c == '.' && ptr == dot) {
    81fc:	cmp	r3, #46	; 0x2e
    81fe:	bne.n	822c <FatFile::makeSFN(FatLfn_t*)+0x80>
    8200:	cmp	lr, r7
    8202:	bne.n	8248 <FatFile::makeSFN(FatLfn_t*)+0x9c>
      in = 10;  // Max index for full 8.3 name.
    8204:	mov.w	ip, #10
      i = 8;    // Place for extension.
    8208:	movs	r1, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    820a:	mov.w	r9, #16
  for (; ptr < end; ptr++) {
    820e:	adds	r7, #1
    8210:	cmp	r7, r6
    8212:	bcc.n	81fa <FatFile::makeSFN(FatLfn_t*)+0x4e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    8214:	ldrb	r3, [r5, #22]
    8216:	cmp	r3, #32
    8218:	beq.n	82cc <FatFile::makeSFN(FatLfn_t*)+0x120>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
    821a:	cmp	r0, #0
    821c:	beq.n	82b8 <FatFile::makeSFN(FatLfn_t*)+0x10c>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    821e:	tst.w	r8, r2
    8222:	it	ne
    8224:	movne	r2, #2
    8226:	strb	r2, [r5, #21]
  }
  return true;

 fail:
  return false;
}
    8228:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
    822c:	cmp	r3, #34	; 0x22
    822e:	beq.n	8248 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    8230:	cmp	r3, #124	; 0x7c
    8232:	beq.n	8248 <FatFile::makeSFN(FatLfn_t*)+0x9c>
    8234:	sub.w	r4, r3, #91	; 0x5b
    8238:	cmp	r4, #2
    823a:	bls.n	8248 <FatFile::makeSFN(FatLfn_t*)+0x9c>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
    823c:	sub.w	r4, r3, #42	; 0x2a
    8240:	cmp	r4, #5
    8242:	bhi.n	8252 <FatFile::makeSFN(FatLfn_t*)+0xa6>
    8244:	cmp	r3, #45	; 0x2d
    8246:	beq.n	826e <FatFile::makeSFN(FatLfn_t*)+0xc2>
      if (i > in) {
    8248:	cmp	r1, ip
    824a:	bhi.n	8272 <FatFile::makeSFN(FatLfn_t*)+0xc6>
        is83 = false;
    824c:	movs	r0, #0
        c = '_';
    824e:	movs	r3, #95	; 0x5f
    8250:	b.n	8294 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    8252:	sub.w	r4, r3, #58	; 0x3a
    8256:	cmp	r4, #5
    8258:	bls.n	8262 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      if (sfnReservedChar(c)) {
    825a:	sub.w	r4, r3, #33	; 0x21
    825e:	cmp	r4, #93	; 0x5d
    8260:	bls.n	826e <FatFile::makeSFN(FatLfn_t*)+0xc2>
        if ((c & 0XC0) == 0X80) {
    8262:	and.w	r3, r3, #192	; 0xc0
    8266:	cmp	r3, #128	; 0x80
    8268:	bne.n	8248 <FatFile::makeSFN(FatLfn_t*)+0x9c>
        is83 = false;
    826a:	movs	r0, #0
    826c:	b.n	820e <FatFile::makeSFN(FatLfn_t*)+0x62>
      if (i > in) {
    826e:	cmp	r1, ip
    8270:	bls.n	8282 <FatFile::makeSFN(FatLfn_t*)+0xd6>
        if (in == 10 || ptr > dot) {
    8272:	cmp.w	ip, #10
    8276:	beq.n	82b4 <FatFile::makeSFN(FatLfn_t*)+0x108>
    8278:	cmp	lr, r7
    827a:	bcc.n	82b4 <FatFile::makeSFN(FatLfn_t*)+0x108>
        ptr = dot - 1;
    827c:	add.w	r7, lr, #4294967295
        continue;
    8280:	b.n	826a <FatFile::makeSFN(FatLfn_t*)+0xbe>
      if (isLower(c)) {
    8282:	sub.w	r4, r3, #97	; 0x61
    8286:	cmp	r4, #25
    8288:	bhi.n	82a6 <FatFile::makeSFN(FatLfn_t*)+0xfa>
        c += 'A' - 'a';
    828a:	subs	r3, #32
        lc |= bit;
    828c:	orr.w	r2, r9, r2
        c += 'A' - 'a';
    8290:	uxtb	r3, r3
        lc |= bit;
    8292:	uxtb	r2, r2
      fname->sfn[i++] = c;
    8294:	adds	r4, r1, #1
    8296:	add	r1, r5
    8298:	uxtb	r4, r4
    829a:	strb	r3, [r1, #22]
      if (i < 7) {
    829c:	cmp	r4, #6
    829e:	bhi.n	82a2 <FatFile::makeSFN(FatLfn_t*)+0xf6>
        fname->seqPos = i;
    82a0:	strb	r4, [r5, #20]
    82a2:	mov	r1, r4
    82a4:	b.n	820e <FatFile::makeSFN(FatLfn_t*)+0x62>
      } else if (isUpper(c)) {
    82a6:	sub.w	r4, r3, #65	; 0x41
    82aa:	cmp	r4, #25
        uc |= bit;
    82ac:	it	ls
    82ae:	orrls.w	r8, r9, r8
    82b2:	b.n	8294 <FatFile::makeSFN(FatLfn_t*)+0xe8>
        is83 = false;
    82b4:	movs	r0, #0
    82b6:	b.n	8214 <FatFile::makeSFN(FatLfn_t*)+0x68>
    fname->sfn[fname->seqPos] = '~';
    82b8:	ldrb	r3, [r5, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
    82ba:	movs	r2, #1
    fname->sfn[fname->seqPos] = '~';
    82bc:	movs	r1, #126	; 0x7e
    82be:	add	r3, r5
    fname->flags = FNAME_FLAG_LOST_CHARS;
    82c0:	strb	r2, [r5, #21]
  return true;
    82c2:	mov	r0, r2
    fname->sfn[fname->seqPos] = '~';
    82c4:	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
    82c6:	movs	r1, #49	; 0x31
    82c8:	strb	r1, [r3, #23]
    82ca:	b.n	8228 <FatFile::makeSFN(FatLfn_t*)+0x7c>
  return false;
    82cc:	movs	r0, #0
    82ce:	b.n	8228 <FatFile::makeSFN(FatLfn_t*)+0x7c>

000082d0 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
    82d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82d4:	mov	r7, r0
    82d6:	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    82d8:	ldrb	r6, [r1, #20]
    82da:	movs	r4, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
    82dc:	mov.w	sl, #0
    82e0:	ldr.w	r8, [pc, #128]	; 8364 <FatFile::makeUniqueSfn(FatLfn_t*)+0x94>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    82e4:	add.w	r9, r1, #22
    82e8:	ldr.w	r3, [r8]
    82ec:	cmp	r6, #3
    hex += millis();
    82ee:	add	r3, sl
    82f0:	it	cs
    82f2:	movcs	r6, #3
    82f4:	uxth.w	sl, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    82f8:	adds	r3, r6, #4
    82fa:	uxtb	r3, r3
      uint8_t h = hex & 0XF;
    82fc:	and.w	r2, sl, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8300:	adds	r1, r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8302:	subs	r3, #1
      hex >>= 4;
    8304:	mov.w	sl, sl, lsr #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8308:	cmp	r2, #9
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    830a:	uxtb	r3, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    830c:	ite	ls
    830e:	addls	r2, #48	; 0x30
    8310:	addhi	r2, #55	; 0x37
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8312:	cmp	r6, r3
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    8314:	strb	r2, [r1, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
    8316:	bne.n	82fc <FatFile::makeUniqueSfn(FatLfn_t*)+0x2c>
    fname->sfn[pos] = '~';
    8318:	adds	r3, r5, r6
    831a:	movs	r2, #126	; 0x7e
    seekSet(0);
    831c:	movs	r1, #0
    831e:	mov	r0, r7
    8320:	strb	r2, [r3, #22]
    8322:	bl	72a6 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
    8326:	movs	r1, #1
    8328:	mov	r0, r7
    832a:	bl	7268 <FatFile::readDirCache(bool)>
      if (!dir) {
    832e:	mov	r1, r0
    8330:	cbnz	r0, 833e <FatFile::makeUniqueSfn(FatLfn_t*)+0x6e>
        if (!getError()) {
    8332:	ldrb	r0, [r7, #1]
    8334:	clz	r0, r0
    8338:	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
    833a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (dir->name[0] == FAT_NAME_FREE) {
    833e:	ldrb	r3, [r0, #0]
    8340:	cbz	r3, 8360 <FatFile::makeUniqueSfn(FatLfn_t*)+0x90>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    8342:	ldrb	r3, [r0, #11]
    8344:	lsls	r3, r3, #28
    8346:	bmi.n	8326 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
    8348:	movs	r2, #11
    834a:	mov	r0, r9
    834c:	bl	eb14 <memcmp>
    8350:	cmp	r0, #0
    8352:	bne.n	8326 <FatFile::makeUniqueSfn(FatLfn_t*)+0x56>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
    8354:	subs	r0, r4, #1
    8356:	ands.w	r4, r0, #255	; 0xff
    835a:	bne.n	82e8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x18>
  return false;
    835c:	mov	r0, r4
 fail:
    835e:	b.n	833a <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
  return true;
    8360:	movs	r0, #1
    8362:	b.n	833a <FatFile::makeUniqueSfn(FatLfn_t*)+0x6a>
    8364:	.word	0x20015374

00008368 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    8368:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    836c:	vpush	{d8}
    8370:	sub	sp, #44	; 0x2c
    8372:	mov	r5, r1
    8374:	mov	r7, r2
    8376:	str	r3, [sp, #16]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
    8378:	ldr	r3, [r1, #8]
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
    837a:	str	r0, [sp, #28]
  auto vol = dirFile->m_vol;
    837c:	str	r3, [sp, #20]

  if (!dirFile->isDir() || isOpen()) {
    837e:	ldrb	r3, [r1, #0]
    8380:	tst.w	r3, #112	; 0x70
    8384:	bne.n	8392 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a>
    goto fail;
  }
  return true;

 fail:
  return false;
    8386:	movs	r0, #0
}
    8388:	add	sp, #44	; 0x2c
    838a:	vpop	{d8}
    838e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool isOpen() const {return m_attributes;}
    8392:	ldr	r3, [sp, #28]
    8394:	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
    8396:	cmp	r3, #0
    8398:	bne.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  nameOrd = (fname->len + 12)/13;
    839a:	ldr	r3, [r2, #16]
    839c:	movs	r2, #13
    seekSet(0);
    839e:	movs	r1, #0
    83a0:	mov	r0, r5
    83a2:	adds	r3, #12
  uint8_t checksum = 0;
    83a4:	mov.w	sl, #0
  nameOrd = (fname->len + 12)/13;
    83a8:	udiv	r3, r3, r2
    83ac:	uxtb	r3, r3
  uint8_t order = 0;
    83ae:	mov	r8, sl
  uint8_t freeFound = 0;
    83b0:	mov	r4, sl
  bool fnameFound = false;
    83b2:	mov	fp, sl
  nameOrd = (fname->len + 12)/13;
    83b4:	str	r3, [sp, #24]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    83b6:	ldrb	r3, [r7, #21]
    83b8:	lsls	r2, r3, #30
    83ba:	itett	ne
    83bc:	ldrne	r3, [sp, #24]
    83be:	moveq	r3, #1
    83c0:	addne.w	r9, r3, #1
    83c4:	uxtbne.w	r3, r9
  uint8_t lfnOrd = 0;
    83c8:	mov	r9, sl
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
    83ca:	str	r3, [sp, #8]
    83cc:	bl	72a6 <FatFile::seekSet(unsigned long)>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    83d0:	add.w	r3, r7, #22
  uint16_t freeIndex = 0;
    83d4:	str.w	sl, [sp, #12]
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    83d8:	vmov	s16, r3
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83dc:	ldr	r6, [r5, #20]
    dir = dirFile->readDirCache();
    83de:	movs	r1, #0
    83e0:	mov	r0, r5
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    83e2:	ubfx	r6, r6, #5, #16
    dir = dirFile->readDirCache();
    83e6:	bl	7268 <FatFile::readDirCache(bool)>
    if (!dir) {
    83ea:	cmp	r0, #0
    83ec:	bne.n	84b2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x14a>
      if (dirFile->getError()) {
    83ee:	ldrb	r3, [r5, #1]
    83f0:	cmp	r3, #0
    83f2:	bne.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    83f4:	ldr	r3, [sp, #16]
    83f6:	lsls	r2, r3, #22
    83f8:	bpl.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
    83fa:	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
    83fe:	subs	r3, #1
    8400:	cmp	r3, #1
    8402:	bhi.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (freeFound == 0) {
    8404:	ldr	r3, [sp, #12]
    8406:	cmp	r4, #0
    8408:	it	eq
    840a:	moveq	r3, r6
    840c:	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
    840e:	ldr	r3, [sp, #8]
    8410:	cmp	r4, r3
    8412:	bcc.w	8596 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22e>
  if (fnameFound) {
    8416:	cmp.w	fp, #0
    841a:	bne.w	85cc <FatFile::open(FatFile*, FatLfn_t*, int)+0x264>
  lfnOrd = freeNeed - 1;
    841e:	ldr	r3, [sp, #8]
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8420:	mov	r2, r7
    8422:	mov	r0, r5
  lfnOrd = freeNeed - 1;
    8424:	subs	r6, r3, #1
  curIndex = freeIndex + lfnOrd;
    8426:	ldr	r3, [sp, #12]
  lfnOrd = freeNeed - 1;
    8428:	uxtb.w	fp, r6
  curIndex = freeIndex + lfnOrd;
    842c:	uxtab	r6, r3, r6
    8430:	uxth	r6, r6
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
    8432:	mov	r3, fp
    8434:	mov	r1, r6
    8436:	bl	80e0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
    843a:	cmp	r0, #0
    843c:	beq.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  dir = dirFile->cacheDir(curIndex);
    843e:	mov	r1, r6
    8440:	mov	r0, r5
    8442:	bl	6db4 <FatFile::cacheDir(unsigned short)>
  if (!dir) {
    8446:	mov	r4, r0
    8448:	cmp	r0, #0
    844a:	beq.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  memset(dir, 0, sizeof(DirFat_t));
    844c:	movs	r2, #32
    844e:	movs	r1, #0
    8450:	bl	a210 <memset>
  memcpy(dir->name, fname->sfn, 11);
    8454:	ldr.w	r3, [r7, #22]
    8458:	str	r3, [r4, #0]
    845a:	ldr.w	r3, [r7, #26]
    845e:	str	r3, [r4, #4]
    8460:	ldrh	r3, [r7, #30]
    8462:	strh	r3, [r4, #8]
    8464:	ldrb.w	r3, [r7, #32]
    8468:	strb	r3, [r4, #10]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    846a:	ldrb	r3, [r7, #21]
    846c:	and.w	r3, r3, #24
    8470:	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
    8472:	ldr	r3, [pc, #372]	; (85e8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>)
    8474:	ldr	r3, [r3, #0]
    8476:	cmp	r3, #0
    8478:	beq.w	85dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x274>
    FsDateTime::callback(&date, &time, &ms10);
    847c:	add.w	r2, sp, #35	; 0x23
    8480:	add.w	r1, sp, #38	; 0x26
    8484:	add	r0, sp, #36	; 0x24
    8486:	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
    8488:	ldrh.w	r3, [sp, #36]	; 0x24
    848c:	strh	r3, [r4, #16]
    848e:	ldrh.w	r3, [sp, #38]	; 0x26
    8492:	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
    8494:	ldrb.w	r3, [sp, #35]	; 0x23
    8498:	strb	r3, [r4, #13]
    849a:	ldr	r3, [sp, #20]
    849c:	ldr	r2, [sp, #20]
    849e:	ldrb.w	r3, [r3, #40]	; 0x28
    84a2:	orr.w	r3, r3, #1
    84a6:	strb.w	r3, [r2, #40]	; 0x28
  }
    84aa:	b.n	8584 <FatFile::open(FatFile*, FatLfn_t*, int)+0x21c>
        fnameFound = true;
    84ac:	mov.w	fp, #1
    84b0:	b.n	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    84b2:	ldrb	r2, [r0, #0]
    84b4:	cmp	r2, #229	; 0xe5
    84b6:	beq.n	84ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x152>
    84b8:	cbnz	r2, 84dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    84ba:	ldr	r3, [sp, #12]
    84bc:	cmp	r4, #0
    84be:	it	eq
    84c0:	moveq	r3, r6
    84c2:	str	r3, [sp, #12]
      if (freeFound < freeNeed) {
    84c4:	ldr	r3, [sp, #8]
    84c6:	cmp	r4, r3
        freeFound++;
    84c8:	itt	cc
    84ca:	addcc	r4, #1
    84cc:	uxtbcc	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
    84ce:	cmp	r2, #0
    84d0:	beq.n	83f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    84d2:	cmp	r2, #229	; 0xe5
    84d4:	bne.n	84e4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x17c>
      lfnOrd = 0;
    84d6:	mov.w	r9, #0
    84da:	b.n	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        freeFound = 0;
    84dc:	ldr	r3, [sp, #8]
    84de:	cmp	r4, r3
    84e0:	it	cc
    84e2:	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    84e4:	cmp	r2, #46	; 0x2e
    84e6:	beq.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
    84e8:	ldrb	r1, [r0, #11]
    } else if (isLongName(dir)) {
    84ea:	cmp	r1, #15
    84ec:	bne.n	8542 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1da>
      if (!lfnOrd) {
    84ee:	cmp.w	r9, #0
    84f2:	bne.n	852e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1c6>
        order = ldir->order & 0X1F;
    84f4:	and.w	r8, r2, #31
        if (order != nameOrd ||
    84f8:	ldr	r3, [sp, #24]
    84fa:	cmp	r3, r8
    84fc:	bne.w	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
    8500:	ands.w	r9, r2, #64	; 0x40
    8504:	beq.w	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        checksum = ldir->checksum;
    8508:	ldrb.w	sl, [r0, #13]
    850c:	mov	r9, r3
      if (order == 1) {
    850e:	cmp.w	r8, #1
    8512:	bne.w	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
    8516:	adds	r1, r6, #1
    8518:	mov	r3, r9
    851a:	mov	r2, r7
    851c:	mov	r0, r5
    851e:	uxth	r1, r1
    8520:	bl	804e <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
    8524:	cmp	r0, #0
    8526:	it	eq
    8528:	moveq.w	r9, #0
    852c:	b.n	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    852e:	add.w	r8, r8, #4294967295
    8532:	uxtb.w	r8, r8
    8536:	cmp	r2, r8
    8538:	bne.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    853a:	ldrb	r2, [r0, #13]
    853c:	cmp	r2, sl
    853e:	beq.n	850e <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a6>
    8540:	b.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
    } else if (isFileOrSubdir(dir)) {
    8542:	lsls	r3, r1, #28
    8544:	bmi.n	84d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x16e>
      if (lfnOrd) {
    8546:	cmp.w	r9, #0
    854a:	beq.n	8562 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1fa>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    854c:	cmp.w	r8, #1
    8550:	bne.w	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    8554:	bl	8030 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
    8558:	cmp	r0, sl
    855a:	bne.w	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    855e:	mov	fp, r9
    8560:	b.n	857c <FatFile::open(FatFile*, FatLfn_t*, int)+0x214>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    8562:	movs	r2, #11
    8564:	vmov	r1, s16
    8568:	bl	eb14 <memcmp>
    856c:	cmp	r0, #0
    856e:	bne.w	83dc <FatFile::open(FatFile*, FatLfn_t*, int)+0x74>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    8572:	ldrb.w	fp, [r7, #21]
    8576:	ands.w	fp, fp, #1
    857a:	bne.n	84ac <FatFile::open(FatFile*, FatLfn_t*, int)+0x144>
  if (oflag & O_EXCL) {
    857c:	ldr	r3, [sp, #16]
    857e:	lsls	r1, r3, #20
    8580:	bmi.w	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    8584:	ldr	r3, [sp, #16]
    8586:	mov	r2, r6
    8588:	mov	r1, r5
    858a:	ldr	r0, [sp, #28]
    858c:	str.w	fp, [sp]
    8590:	bl	7392 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    8594:	b.n	8388 <FatFile::open(FatFile*, FatLfn_t*, int)+0x20>
    dir = dirFile->readDirCache();
    8596:	movs	r1, #0
    8598:	mov	r0, r5
    859a:	bl	7268 <FatFile::readDirCache(bool)>
    if (!dir) {
    859e:	cbnz	r0, 85c6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x25e>
      if (dirFile->getError()) {
    85a0:	ldrb	r3, [r5, #1]
    85a2:	cmp	r3, #0
    85a4:	bne.w	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    if (!dirFile->addDirCluster()) {
    85a8:	mov	r0, r5
    85aa:	bl	6ff4 <FatFile::addDirCluster()>
    85ae:	cmp	r0, #0
    85b0:	beq.w	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
    85b4:	ldr	r3, [sp, #20]
    85b6:	ldrb	r3, [r3, #4]
    freeFound += vol->dirEntriesPerCluster();
    85b8:	add.w	r3, r4, r3, lsl #4
    85bc:	uxtb	r4, r3
  while (freeFound < freeNeed) {
    85be:	ldr	r3, [sp, #8]
    85c0:	cmp	r3, r4
    85c2:	bhi.n	85a8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x240>
    85c4:	b.n	8416 <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
    freeFound++;
    85c6:	adds	r4, #1
    85c8:	uxtb	r4, r4
    85ca:	b.n	840e <FatFile::open(FatFile*, FatLfn_t*, int)+0xa6>
    if (!dirFile->makeUniqueSfn(fname)) {
    85cc:	mov	r1, r7
    85ce:	mov	r0, r5
    85d0:	bl	82d0 <FatFile::makeUniqueSfn(FatLfn_t*)>
    85d4:	cmp	r0, #0
    85d6:	bne.w	841e <FatFile::open(FatFile*, FatLfn_t*, int)+0xb6>
    85da:	b.n	8386 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1e>
  *reinterpret_cast<uint16_t*>(dst) = src;
    85dc:	movw	r3, #22561	; 0x5821
    85e0:	strh	r3, [r4, #16]
    85e2:	strh	r3, [r4, #24]
    85e4:	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
    85e6:	b.n	849a <FatFile::open(FatFile*, FatLfn_t*, int)+0x132>
    85e8:	.word	0x200147fc

000085ec <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
    85ec:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    85ee:	mov	r4, r2
    85f0:	mov	r6, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
    85f2:	mov	r0, r1
    85f4:	ldrb.w	r3, [r1], #1
    85f8:	cmp	r3, #32
    85fa:	beq.n	85f2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6>
  size_t len = 0;
    85fc:	movs	r5, #0
    85fe:	ldr	r7, [pc, #148]	; (8694 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa8>)
    path++;
  }
  fname->begin = path;
    8600:	str	r0, [r4, #0]
  while (*path && !isDirSeparator(*path)) {
    8602:	ldrb	r3, [r0, #0]
    8604:	cbnz	r3, 8654 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x68>
      // Need to trim trailing dots spaces.
      fname->len = len;
      fname->end = path;
    }
  }
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
    8606:	ldr	r3, [r4, #16]
    8608:	subs	r3, #1
    860a:	cmp	r3, #254	; 0xfe
    860c:	bhi.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    860e:	mov	r2, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Advance to next path component.
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    8610:	ldrb.w	r3, [r0], #1
    8614:	cmp	r3, #32
    8616:	beq.n	860e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
    8618:	cmp	r3, #47	; 0x2f
    861a:	beq.n	860e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x22>
  *ptr = path;
  return makeSFN(fname);
    861c:	mov	r0, r4
  *ptr = path;
    861e:	str	r2, [r6, #0]

 fail:
  return false;
}
    8620:	add	sp, #12
    8622:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return makeSFN(fname);
    8626:	b.w	81ac <FatFile::makeSFN(FatLfn_t*)>
    862a:	subs	r1, #34	; 0x22
    862c:	uxtb	r1, r1
    862e:	lsr.w	r1, r7, r1
    8632:	lsls	r2, r1, #31
    8634:	bpl.n	868e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
}
    8636:	movs	r0, #0
    8638:	add	sp, #12
    863a:	pop	{r4, r5, r6, r7, pc}
    863c:	cmp	r1, #92	; 0x5c
    863e:	beq.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8640:	bhi.n	864e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x62>
    8642:	subs	r1, #62	; 0x3e
    8644:	cmp	r1, #1
    8646:	bls.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
      fname->len = len;
    8648:	str	r5, [r4, #16]
      fname->end = path;
    864a:	str	r0, [r4, #8]
    864c:	b.n	8602 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    864e:	cmp	r1, #124	; 0x7c
    8650:	beq.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    8652:	b.n	8648 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
  while (*path && !isDirSeparator(*path)) {
    8654:	cmp	r3, #47	; 0x2f
    8656:	beq.n	8606 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
    path = FsUtf::mbToCp(path, path + 4, &cp);
    8658:	add	r2, sp, #4
    865a:	adds	r1, r0, #4
    865c:	bl	55cc <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
    8660:	cmp	r0, #0
    8662:	beq.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    len += cp <= 0XFFFF ? 1 : 2;
    8664:	ldr	r3, [sp, #4]
    8666:	cmp.w	r3, #65536	; 0x10000
    866a:	ite	cc
    866c:	movcc	r2, #1
    866e:	movcs	r2, #2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8670:	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
    8672:	add	r5, r2
    if (cp < 0X80 && lfnReservedChar(cp)) {
    8674:	bhi.n	8648 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    8676:	cmp	r3, #60	; 0x3c
    8678:	uxtb	r1, r3
    867a:	bhi.n	863c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    867c:	cmp	r1, #33	; 0x21
    867e:	bhi.n	862a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x3e>
    8680:	cmp	r1, #31
    8682:	bls.n	8636 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4a>
    if (cp != '.' && cp != ' ') {
    8684:	cmp	r3, #46	; 0x2e
    8686:	beq.n	8602 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    8688:	cmp	r3, #32
    868a:	beq.n	8602 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x16>
    868c:	b.n	8648 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5c>
    868e:	cmp	r3, #46	; 0x2e
    8690:	b.n	868a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x9e>
    8692:	nop
    8694:	.word	0x05002101

00008698 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
    8698:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FatFile() {}
    869c:	movs	r3, #0
    869e:	sub	sp, #40	; 0x28
    86a0:	mov	r4, r0
    86a2:	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
    86a4:	ldrb	r3, [r0, #2]
    86a6:	lsls	r2, r3, #30
    86a8:	bmi.n	86b2 <FatFile::remove()+0x1a>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
    86aa:	movs	r0, #0
}
    86ac:	add	sp, #40	; 0x28
    86ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    86b2:	ldr	r1, [r0, #32]
    86b4:	cmp	r1, #0
    86b6:	bne.n	8744 <FatFile::remove()+0xac>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    86b8:	movs	r1, #1
    86ba:	mov	r0, r4
    86bc:	bl	7064 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
    86c0:	mov	r5, r0
    86c2:	cmp	r0, #0
    86c4:	beq.n	86aa <FatFile::remove()+0x12>
  checksum = lfnChecksum(dir->name);
    86c6:	bl	8030 <FatFile::lfnChecksum(unsigned char*) [clone .isra.0]>
  dir->name[0] = FAT_NAME_DELETED;
    86ca:	movs	r7, #229	; 0xe5
  m_attributes = FILE_ATTR_CLOSED;
    86cc:	movs	r3, #0
  checksum = lfnChecksum(dir->name);
    86ce:	mov	r6, r0
  dir->name[0] = FAT_NAME_DELETED;
    86d0:	strb	r7, [r5, #0]
  m_attributes = FILE_ATTR_CLOSED;
    86d2:	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
    86d4:	ldr	r0, [r4, #8]
  m_flags = 0;
    86d6:	strb	r3, [r4, #2]
  if (!m_vol->cacheSync()) {
    86d8:	bl	6f98 <FatPartition::cacheSync()>
    86dc:	cmp	r0, #0
    86de:	beq.n	86aa <FatFile::remove()+0x12>
  if (!isLFN()) {
    86e0:	ldrb	r3, [r4, #3]
    86e2:	cmp	r3, #0
    86e4:	beq.n	86ac <FatFile::remove()+0x14>
  if (!dirFile.openCluster(this)) {
    86e6:	mov	r1, r4
    86e8:	add	r0, sp, #4
    86ea:	bl	708e <FatFile::openCluster(FatFile*)>
    86ee:	cmp	r0, #0
    86f0:	beq.n	86aa <FatFile::remove()+0x12>
    86f2:	movs	r5, #1
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
    86f4:	uxtb.w	r8, r5
    86f8:	ldrb	r3, [r4, #3]
    86fa:	cmp	r3, r8
    86fc:	bcc.n	86aa <FatFile::remove()+0x12>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
    86fe:	ldrh	r1, [r4, #4]
    8700:	add	r0, sp, #4
    8702:	subs	r1, r1, r5
    8704:	uxth	r1, r1
    8706:	bl	6db4 <FatFile::cacheDir(unsigned short)>
    if (!ldir) {
    870a:	cmp	r0, #0
    870c:	beq.n	86aa <FatFile::remove()+0x12>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    870e:	ldrb	r3, [r0, #11]
    8710:	cmp	r3, #15
    8712:	bne.n	86aa <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    8714:	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
    8716:	and.w	r3, r2, #31
    871a:	cmp	r3, r8
    871c:	bne.n	86aa <FatFile::remove()+0x12>
        order != (ldir->order & 0X1F) ||
    871e:	ldrb	r3, [r0, #13]
    8720:	cmp	r3, r6
    8722:	bne.n	86aa <FatFile::remove()+0x12>
    ldir->order = FAT_NAME_DELETED;
    8724:	strb	r7, [r0, #0]
    if (last) {
    8726:	adds	r5, #1
    m_vol->cacheDirty();
    8728:	ldr	r1, [r4, #8]
    if (last) {
    872a:	uxth	r5, r5
    872c:	ldrb.w	r3, [r1, #40]	; 0x28
    8730:	orr.w	r3, r3, #1
    8734:	strb.w	r3, [r1, #40]	; 0x28
    8738:	lsls	r3, r2, #25
    873a:	bpl.n	86f4 <FatFile::remove()+0x5c>
      if (!m_vol->cacheSync()) {
    873c:	ldr	r0, [r4, #8]
    873e:	bl	6f98 <FatPartition::cacheSync()>
    8742:	b.n	86ac <FatFile::remove()+0x14>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    8744:	ldr	r0, [r0, #8]
    8746:	bl	7dee <FatPartition::freeChain(unsigned long)>
    874a:	cmp	r0, #0
    874c:	bne.n	86b8 <FatFile::remove()+0x20>
    874e:	b.n	86aa <FatFile::remove()+0x12>

00008750 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    8750:	push	{r4, lr}
    8752:	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    8754:	ldr	r0, [r0, #56]	; 0x38
    8756:	cbz	r0, 8764 <FsBaseFile::close()+0x14>
    8758:	bl	7570 <FatFile::close()>
    875c:	cbz	r0, 8764 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    875e:	movs	r3, #0
    8760:	str	r3, [r4, #56]	; 0x38
  if (m_xFile && m_xFile->close()) {
    m_xFile = nullptr;
    return true;
  }
  return false;
}
    8762:	pop	{r4, pc}
  if (m_xFile && m_xFile->close()) {
    8764:	ldr	r0, [r4, #60]	; 0x3c
    8766:	cbnz	r0, 876c <FsBaseFile::close()+0x1c>
  return false;
    8768:	movs	r0, #0
    876a:	b.n	8762 <FsBaseFile::close()+0x12>
  if (m_xFile && m_xFile->close()) {
    876c:	bl	5972 <ExFatFile::close()>
    8770:	cmp	r0, #0
    8772:	beq.n	8768 <FsBaseFile::close()+0x18>
    m_xFile = nullptr;
    8774:	movs	r3, #0
    8776:	str	r3, [r4, #60]	; 0x3c
    return true;
    8778:	b.n	8762 <FsBaseFile::close()+0x12>

0000877a <FsBaseFile::operator=(FsBaseFile const&)>:
  if (this == &from) return *this;
    877a:	cmp	r0, r1
FsBaseFile& FsBaseFile::operator=(const FsBaseFile& from) {
    877c:	push	{r4, r5, r6, lr}
    877e:	mov	r6, r0
    8780:	mov	r5, r1
  if (this == &from) return *this;
    8782:	beq.n	87ac <FsBaseFile::operator=(FsBaseFile const&)+0x32>
  close();
    8784:	bl	8750 <FsBaseFile::close()>
  if (from.m_fFile) {
    8788:	ldr	r4, [r5, #56]	; 0x38
    878a:	cbz	r4, 87b0 <FsBaseFile::operator=(FsBaseFile const&)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    878c:	mov	r1, r6
    878e:	movs	r0, #36	; 0x24
    8790:	bl	89ac <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    8794:	movs	r3, #0
    *m_fFile = *from.m_fFile;
    8796:	mov	r4, r0
    8798:	strh	r3, [r0, #0]
    879a:	strb	r3, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    879c:	str	r0, [r6, #56]	; 0x38
    *m_fFile = *from.m_fFile;
    879e:	ldr	r5, [r5, #56]	; 0x38
    87a0:	ldmia	r5!, {r0, r1, r2, r3}
    87a2:	stmia	r4!, {r0, r1, r2, r3}
    87a4:	ldmia	r5!, {r0, r1, r2, r3}
    87a6:	stmia	r4!, {r0, r1, r2, r3}
    87a8:	ldr	r3, [r5, #0]
    87aa:	str	r3, [r4, #0]
}
    87ac:	mov	r0, r6
    87ae:	pop	{r4, r5, r6, pc}
  } else if (from.m_xFile) {
    87b0:	ldr	r3, [r5, #60]	; 0x3c
    87b2:	cmp	r3, #0
    87b4:	beq.n	87ac <FsBaseFile::operator=(FsBaseFile const&)+0x32>
    m_xFile = new (m_fileMem) ExFatFile;
    87b6:	mov	r1, r6
    87b8:	movs	r0, #56	; 0x38
    87ba:	bl	89ac <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    87be:	strb.w	r4, [r0, #49]	; 0x31
    87c2:	strh	r4, [r0, #50]	; 0x32
    87c4:	str	r0, [r6, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
    87c6:	ldr	r3, [r5, #60]	; 0x3c
    87c8:	add.w	r2, r3, #52	; 0x34
    87cc:	ldr.w	r1, [r3], #4
    87d0:	cmp	r3, r2
    87d2:	str.w	r1, [r0], #4
    87d6:	bne.n	87cc <FsBaseFile::operator=(FsBaseFile const&)+0x52>
    87d8:	b.n	87ac <FsBaseFile::operator=(FsBaseFile const&)+0x32>

000087da <FsBaseFile::open(FsVolume*, char const*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    87da:	push	{r0, r1, r4, r5, r6, lr}
    87dc:	mov	r4, r0
  if (!vol) {
    87de:	mov	r5, r1
    87e0:	cbnz	r1, 87e8 <FsBaseFile::open(FsVolume*, char const*, int)+0xe>
    return false;
    87e2:	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    87e4:	add	sp, #8
    87e6:	pop	{r4, r5, r6, pc}
    87e8:	strd	r2, r3, [sp]
  close();
    87ec:	bl	8750 <FsBaseFile::close()>
  if (vol->m_fVol) {
    87f0:	ldr.w	r6, [r5, #1152]	; 0x480
    87f4:	ldrd	r2, r3, [sp]
    87f8:	cbz	r6, 8820 <FsBaseFile::open(FsVolume*, char const*, int)+0x46>
    87fa:	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    87fc:	mov	r1, r4
    87fe:	movs	r0, #36	; 0x24
    8800:	bl	89ac <operator new(unsigned int, unsigned long*)>
    8804:	strh	r6, [r0, #0]
    8806:	strb	r6, [r0, #2]
    8808:	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    880a:	ldr.w	r1, [r5, #1152]	; 0x480
    880e:	ldrd	r2, r3, [sp]
    8812:	bl	761e <FatFile::open(FatVolume*, char const*, int)>
    8816:	cbz	r0, 881c <FsBaseFile::open(FsVolume*, char const*, int)+0x42>
      return true;
    8818:	movs	r0, #1
    881a:	b.n	87e4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
    m_fFile = nullptr;
    881c:	str	r0, [r4, #56]	; 0x38
    881e:	b.n	87e4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>
  } else if (vol->m_xVol) {
    8820:	ldr.w	r1, [r5, #1156]	; 0x484
    8824:	strd	r2, r3, [sp]
    8828:	cmp	r1, #0
    882a:	beq.n	87e2 <FsBaseFile::open(FsVolume*, char const*, int)+0x8>
    m_xFile = new (m_fileMem) ExFatFile;
    882c:	mov	r1, r4
    882e:	movs	r0, #56	; 0x38
    8830:	bl	89ac <operator new(unsigned int, unsigned long*)>
    8834:	strb.w	r6, [r0, #49]	; 0x31
    8838:	strh	r6, [r0, #50]	; 0x32
    883a:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    883c:	ldr.w	r1, [r5, #1156]	; 0x484
    8840:	ldrd	r2, r3, [sp]
    8844:	bl	6112 <ExFatFile::open(ExFatVolume*, char const*, int)>
    8848:	cmp	r0, #0
    884a:	bne.n	8818 <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
    m_xFile = nullptr;
    884c:	str	r0, [r4, #60]	; 0x3c
    884e:	b.n	87e4 <FsBaseFile::open(FsVolume*, char const*, int)+0xa>

00008850 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
    8850:	push	{r0, r1, r4, r5, r6, lr}
    8852:	mov	r5, r1
    8854:	str	r2, [sp, #4]
    8856:	mov	r4, r0
  close();
    8858:	bl	8750 <FsBaseFile::close()>
  if (dir->m_fFile) {
    885c:	ldr	r6, [r5, #56]	; 0x38
    885e:	ldr	r2, [sp, #4]
    8860:	cbz	r6, 8886 <FsBaseFile::openNext(FsBaseFile*, int)+0x36>
    m_fFile = new (m_fileMem) FatFile;
    8862:	mov	r1, r4
    8864:	movs	r0, #36	; 0x24
    8866:	bl	89ac <operator new(unsigned int, unsigned long*)>
    886a:	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    886c:	ldr	r2, [sp, #4]
    886e:	strh	r1, [r0, #0]
    8870:	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
    8872:	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
    8874:	ldr	r1, [r5, #56]	; 0x38
    8876:	bl	7454 <FatFile::openNext(FatFile*, int)>
    887a:	cbz	r0, 8882 <FsBaseFile::openNext(FsBaseFile*, int)+0x32>
      return true;
    887c:	movs	r0, #1
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    887e:	add	sp, #8
    8880:	pop	{r4, r5, r6, pc}
    m_fFile = nullptr;
    8882:	str	r0, [r4, #56]	; 0x38
    8884:	b.n	887e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  } else if (dir->m_xFile) {
    8886:	ldr	r0, [r5, #60]	; 0x3c
    8888:	str	r2, [sp, #4]
    888a:	cmp	r0, #0
    888c:	beq.n	887e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = new (m_fileMem) ExFatFile;
    888e:	mov	r1, r4
    8890:	movs	r0, #56	; 0x38
    8892:	bl	89ac <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    8896:	ldr	r2, [sp, #4]
    8898:	strb.w	r6, [r0, #49]	; 0x31
    889c:	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
    889e:	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
    88a0:	ldr	r1, [r5, #60]	; 0x3c
    88a2:	bl	6120 <ExFatFile::openNext(ExFatFile*, int)>
    88a6:	cmp	r0, #0
    88a8:	bne.n	887c <FsBaseFile::openNext(FsBaseFile*, int)+0x2c>
    m_xFile = nullptr;
    88aa:	str	r0, [r4, #60]	; 0x3c
    88ac:	b.n	887e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
	...

000088b0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    88b0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
    88b4:	movs	r7, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    88b6:	mov	r4, r0
    88b8:	mov	r6, r3
  m_blockDev = blockDev;
    88ba:	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
    88be:	str.w	r7, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    88c2:	mov	r1, r0
    88c4:	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
    88c8:	mov	r9, r2
  m_xVol = new (m_volMem) ExFatVolume;
    88ca:	bl	89ac <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    88ce:	mov	r2, r6
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    88d0:	strb.w	r7, [r0, #1092]	; 0x444
    88d4:	mov	r5, r0
    88d6:	strb.w	r7, [r0, #1145]	; 0x479
    88da:	strh.w	r7, [r0, #1146]	; 0x47a
    88de:	str.w	r0, [r4, #1156]	; 0x484
    88e2:	ldr.w	r1, [r4, #1160]	; 0x488
    88e6:	ldr.w	r8, [pc, #152]	; 8980 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd0>
    88ea:	bl	6464 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    88ee:	cbz	r0, 8920 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    88f0:	add.w	r7, r5, #1096	; 0x448
    88f4:	mov	r0, r7
    88f6:	bl	5972 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    88fa:	mov	r1, r5
    88fc:	mov	r0, r7
    88fe:	bl	59c6 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
    8902:	cbz	r0, 8920 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x70>
    if (setCwv || !m_cwv) {
    8904:	ldr	r3, [pc, #112]	; (8978 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc8>)
      return false;
    }
    if (!chdir()) {
      return false;
    }
    if (setCwv || !m_cwv) {
    8906:	ldr	r2, [r3, #0]
    8908:	cbnz	r2, 890c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x5c>
      m_cwv = this;
    890a:	str	r5, [r3, #0]
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  if (setCwv || !m_cwv) {
    890c:	cmp.w	r9, #0
    8910:	bne.n	8918 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x68>
    8912:	ldr.w	r3, [r8]
    8916:	cbnz	r3, 891c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    m_cwv = this;
    8918:	str.w	r4, [r8]
  }
  return true;
    891c:	movs	r0, #1
    891e:	b.n	8972 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc2>
  m_xVol = nullptr;
    8920:	movs	r7, #0
  m_fVol = new (m_volMem) FatVolume;
    8922:	mov	r1, r4
    8924:	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
    8928:	str.w	r7, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    892c:	bl	89ac <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    8930:	movs	r3, #2
    8932:	strb	r7, [r0, #7]
    if (!init(dev, part)) {
    8934:	mov	r2, r6
    8936:	strb	r3, [r0, #8]
    8938:	mov	r5, r0
    893a:	strh.w	r7, [r0, #1096]	; 0x448
    893e:	strb.w	r7, [r0, #1098]	; 0x44a
    8942:	str.w	r0, [r4, #1152]	; 0x480
    8946:	ldr.w	r1, [r4, #1160]	; 0x488
    894a:	bl	7edc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
    894e:	cbz	r0, 8968 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    8950:	add.w	r6, r5, #1096	; 0x448
    8954:	mov	r0, r6
    8956:	bl	7570 <FatFile::close()>
    return m_vwd.openRoot(this);
    895a:	mov	r1, r5
    895c:	mov	r0, r6
    895e:	bl	7082 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
    8962:	cbz	r0, 8968 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb8>
    if (setCwv || !m_cwv) {
    8964:	ldr	r3, [pc, #20]	; (897c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xcc>)
    8966:	b.n	8906 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x56>
  m_cwv = nullptr;
    8968:	movs	r0, #0
    896a:	str.w	r0, [r8]
  m_fVol = nullptr;
    896e:	str.w	r0, [r4, #1152]	; 0x480
}
    8972:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8976:	nop
    8978:	.word	0x20014800
    897c:	.word	0x20014838
    8980:	.word	0x20014834

00008984 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
    8984:	push	{r3, r4, r5, lr}
    8986:	mov	r4, r0
    8988:	mov.w	r5, #1000	; 0x3e8
    898c:	movs	r0, #0
    898e:	strd	r0, r5, [r4, #4]
    8992:	strb	r0, [r4, #12]
    8994:	ldr	r5, [pc, #16]	; (89a8 <FsVolume::open(char const*, int)+0x24>)
  FsBaseFile() {}
    8996:	strd	r0, r0, [r4, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    899a:	mov	r0, r4
    899c:	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
    89a0:	bl	87da <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
    89a4:	mov	r0, r4
    89a6:	pop	{r3, r4, r5, pc}
    89a8:	.word	0x20000554

000089ac <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    89ac:	mov	r0, r1
    89ae:	bx	lr

000089b0 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
    89b0:	mov.w	r0, #4294967295
    89b4:	bx	lr

000089b6 <SharedSpiCard::errorCode() const>:
  }
    89b6:	ldrb	r0, [r0, #17]
    89b8:	bx	lr

000089ba <SharedSpiCard::errorData() const>:
  }
    89ba:	ldrb	r0, [r0, #20]
    89bc:	bx	lr

000089be <SharedSpiCard::type() const>:
  }
    89be:	ldrb	r0, [r0, #21]
    89c0:	bx	lr

000089c2 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
    89c2:	movs	r0, #1
    89c4:	bx	lr

000089c6 <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
    89c6:	ldrb	r0, [r0, #28]
    89c8:	bx	lr

000089ca <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
  return readSectors(sector, dst, 1);
    89ca:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
    89cc:	push	{r4}
  return readSectors(sector, dst, 1);
    89ce:	ldr	r4, [r3, #20]
    89d0:	movs	r3, #1
    89d2:	mov	ip, r4
}
    89d4:	ldr.w	r4, [sp], #4
  return readSectors(sector, dst, 1);
    89d8:	bx	ip

000089da <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    89da:	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
    89dc:	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
    89de:	mov	r4, r0
    89e0:	mov	r5, r1
  if (!syncDevice()) {
    89e2:	ldr	r3, [r3, #32]
    89e4:	blx	r3
    89e6:	cbz	r0, 89ea <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
    89e8:	strb	r5, [r4, #28]
  return true;
}
    89ea:	pop	{r3, r4, r5, pc}

000089ec <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89f0:	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89f2:	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89f4:	mov	r4, r0
    89f6:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    89f8:	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
    89fa:	mov	r6, r2
    89fc:	ldr.w	r9, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8a00:	bne.n	8a08 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x1c>
    8a02:	ldr	r3, [r0, #24]
    8a04:	cmp	r3, r1
    8a06:	beq.n	8a1c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
    if (!writeStart(sector)) {
    8a08:	ldr	r3, [r4, #0]
    8a0a:	mov	r1, r5
    8a0c:	mov	r0, r4
    8a0e:	ldr	r3, [r3, #96]	; 0x60
    8a10:	blx	r3
    8a12:	cbnz	r0, 8a1a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
    8a14:	movs	r0, #0
}
    8a16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8a1a:	str	r5, [r4, #24]
    8a1c:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8a20:	cmp	r5, r8
    8a22:	bne.n	8a3c <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x50>
  m_curSector += ns;
    8a24:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8a26:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8a28:	add	r3, r6
    8a2a:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8a2c:	cmp	r0, #0
    8a2e:	bne.n	8a16 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2a>
    8a30:	ldr	r3, [r4, #0]
    8a32:	mov	r0, r4
    8a34:	ldr	r3, [r3, #100]	; 0x64
}
    8a36:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
    8a3a:	bx	r3
    const uint8_t *src = callback(sector + i, context);
    8a3c:	mov	r1, r9
    8a3e:	mov	r0, r5
    8a40:	blx	r7
    if (!writeData(src)) {
    8a42:	ldr	r3, [r4, #0]
    const uint8_t *src = callback(sector + i, context);
    8a44:	mov	r1, r0
    if (!writeData(src)) {
    8a46:	mov	r0, r4
    8a48:	ldr	r3, [r3, #92]	; 0x5c
    8a4a:	adds	r5, #1
    8a4c:	blx	r3
    8a4e:	cmp	r0, #0
    8a50:	bne.n	8a20 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
    8a52:	b.n	8a14 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x28>

00008a54 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8a54:	bx	lr

00008a56 <SharedSpiCard::end()>:
    m_spiDriver.end();
    8a56:	adds	r0, #4
    8a58:	b.w	a190 <SdSpiArduinoDriver::end()>

00008a5c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
    8a5c:	push	{r4, lr}
    8a5e:	mov	r4, r0
    8a60:	movs	r1, #32
    8a62:	bl	c944 <operator delete(void*, unsigned int)>
    8a66:	mov	r0, r4
    8a68:	pop	{r4, pc}

00008a6a <SharedSpiCard::sectorCount()>:
uint32_t SharedSpiCard::sectorCount() {
    8a6a:	push	{r0, r1, r2, r3, r4, lr}
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8a6c:	ldr	r3, [r0, #0]
    8a6e:	mov	r1, sp
    8a70:	ldr	r3, [r3, #76]	; 0x4c
    8a72:	blx	r3
    8a74:	cbz	r0, 8abc <SharedSpiCard::sectorCount()+0x52>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8a76:	ldrb.w	r3, [sp]
    8a7a:	ands.w	r3, r3, #192	; 0xc0
    8a7e:	bne.n	8ac2 <SharedSpiCard::sectorCount()+0x58>
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8a80:	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8a84:	ldrb.w	r0, [sp, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    8a88:	and.w	r3, r3, #3
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8a8c:	ldrb.w	r2, [sp, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8a90:	lsls	r0, r0, #2
    8a92:	orr.w	r0, r0, r3, lsl #10
    8a96:	ldrb.w	r3, [sp, #8]
    8a9a:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8a9e:	ldrb.w	r3, [sp, #9]
    8aa2:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8aa6:	adds	r0, #1
                          | csd->v1.c_size_mult_low;
    8aa8:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8aaa:	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8aae:	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8ab2:	and.w	r2, r2, #15
    8ab6:	add	r3, r2
    8ab8:	subs	r3, #7
    8aba:	lsls	r0, r3
}
    8abc:	add	sp, #20
    8abe:	ldr.w	pc, [sp], #4
  } else if (csd->v2.csd_ver == 1) {
    8ac2:	cmp	r3, #64	; 0x40
    8ac4:	bne.n	8ae4 <SharedSpiCard::sectorCount()+0x7a>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8ac6:	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8aca:	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8ace:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8ad0:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8ad4:	add.w	r0, r0, r3, lsl #16
    8ad8:	ldrb.w	r3, [sp, #8]
    8adc:	add.w	r0, r0, r3, lsl #8
    8ae0:	lsls	r0, r0, #10
    8ae2:	b.n	8abc <SharedSpiCard::sectorCount()+0x52>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8ae4:	movs	r0, #0
    8ae6:	b.n	8abc <SharedSpiCard::sectorCount()+0x52>

00008ae8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
    8ae8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8aec:	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8aee:	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8af0:	mov	r4, r0
    8af2:	mov	r5, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8af4:	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
    8af6:	mov	r7, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
    8af8:	bne.n	8b00 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x18>
    8afa:	ldr	r3, [r0, #24]
    8afc:	cmp	r3, r1
    8afe:	beq.n	8b14 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
    if (!writeStart(sector)) {
    8b00:	ldr	r3, [r4, #0]
    8b02:	mov	r1, r5
    8b04:	mov	r0, r4
    8b06:	ldr	r3, [r3, #96]	; 0x60
    8b08:	blx	r3
    8b0a:	cbnz	r0, 8b12 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  return false;
    8b0c:	movs	r0, #0
}
    8b0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curSector = sector;
    8b12:	str	r5, [r4, #24]
    uint32_t sector, const uint8_t* src, size_t ns) {
    8b14:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, src += 512) {
    8b16:	cmp	r6, r5
    8b18:	add.w	r1, r7, r5, lsl #9
    8b1c:	bne.n	8b36 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
  m_curSector += ns;
    8b1e:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8b20:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8b22:	add	r3, r6
    8b24:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : writeStop();
    8b26:	cmp	r0, #0
    8b28:	bne.n	8b0e <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    8b2a:	ldr	r3, [r4, #0]
    8b2c:	mov	r0, r4
    8b2e:	ldr	r3, [r3, #100]	; 0x64
}
    8b30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
    8b34:	bx	r3
    if (!writeData(src)) {
    8b36:	ldr	r3, [r4, #0]
    8b38:	mov	r0, r4
    8b3a:	ldr	r3, [r3, #92]	; 0x5c
    8b3c:	blx	r3
    8b3e:	cmp	r0, #0
    8b40:	beq.n	8b0c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
  for (size_t i = 0; i < ns; i++, src += 512) {
    8b42:	adds	r5, #1
    8b44:	b.n	8b16 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>

00008b46 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
    8b46:	push	{r4, r5, r6, lr}
  if (!m_spiActive) {
    8b48:	ldrb	r6, [r0, #18]
void SharedSpiCard::spiStart() {
    8b4a:	mov	r4, r0
  if (!m_spiActive) {
    8b4c:	cbnz	r6, 8b6a <SharedSpiCard::spiStart()+0x24>
    m_spiDriver.activate();
    8b4e:	adds	r5, r0, #4
    8b50:	mov	r0, r5
    8b52:	bl	a134 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
    8b56:	mov	r1, r6
    8b58:	ldrb	r0, [r4, #16]
    8b5a:	bl	a20a <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b5e:	movs	r1, #255	; 0xff
    8b60:	mov	r0, r5
    8b62:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
    8b66:	movs	r3, #1
    8b68:	strb	r3, [r4, #18]
}
    8b6a:	pop	{r4, r5, r6, pc}

00008b6c <SharedSpiCard::spiStop()>:
  if (m_spiActive) {
    8b6c:	ldrb	r3, [r0, #18]
void SharedSpiCard::spiStop() {
    8b6e:	push	{r0, r1, r4, lr}
    8b70:	mov	r4, r0
  if (m_spiActive) {
    8b72:	cbz	r3, 8b90 <SharedSpiCard::spiStop()+0x24>
    sdCsWrite(m_csPin, true);
    8b74:	movs	r1, #1
    8b76:	ldrb	r0, [r0, #16]
    8b78:	bl	a20a <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
    8b7c:	adds	r0, r4, #4
    8b7e:	movs	r1, #255	; 0xff
    8b80:	str	r0, [sp, #4]
    8b82:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
    8b86:	ldr	r0, [sp, #4]
    8b88:	bl	a142 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
    8b8c:	movs	r3, #0
    8b8e:	strb	r3, [r4, #18]
}
    8b90:	add	sp, #8
    8b92:	pop	{r4, pc}

00008b94 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
    8b94:	push	{r4, r5, r6, lr}
  if (m_state == READ_STATE) {
    8b96:	ldrb	r3, [r0, #19]
bool SharedSpiCard::isBusy() {
    8b98:	mov	r4, r0
  if (m_state == READ_STATE) {
    8b9a:	cmp	r3, #1
    8b9c:	beq.n	8bc0 <SharedSpiCard::isBusy()+0x2c>
  bool spiActive = m_spiActive;
    8b9e:	ldrb	r6, [r0, #18]
  if (!spiActive) {
    8ba0:	cbnz	r6, 8ba6 <SharedSpiCard::isBusy()+0x12>
    spiStart();
    8ba2:	bl	8b46 <SharedSpiCard::spiStart()>
    return m_spiDriver.receive();
    8ba6:	adds	r0, r4, #4
    8ba8:	bl	a196 <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
    8bac:	subs.w	r5, r0, #255	; 0xff
    8bb0:	it	ne
    8bb2:	movne	r5, #1
  if (!spiActive) {
    8bb4:	cbnz	r6, 8bbc <SharedSpiCard::isBusy()+0x28>
    spiStop();
    8bb6:	mov	r0, r4
    8bb8:	bl	8b6c <SharedSpiCard::spiStop()>
}
    8bbc:	mov	r0, r5
    8bbe:	pop	{r4, r5, r6, pc}
    return false;
    8bc0:	movs	r5, #0
    8bc2:	b.n	8bbc <SharedSpiCard::isBusy()+0x28>

00008bc4 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
    8bc4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8bc6:	ldr	r7, [pc, #96]	; (8c28 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x64>)
    8bc8:	mov	r4, r0
    8bca:	adds	r6, r0, #4
    8bcc:	ldr	r5, [r7, #0]
    m_endTime = ms + millis16();
    8bce:	add.w	r5, r5, #300	; 0x12c
    8bd2:	uxth	r5, r5
    8bd4:	mov	r0, r6
    8bd6:	strd	r1, r2, [sp]
    8bda:	bl	a196 <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
    8bde:	cmp	r0, #255	; 0xff
    8be0:	strb	r0, [r4, #20]
    8be2:	ldrd	r1, r2, [sp]
    8be6:	beq.n	8c08 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x44>
  if (m_status != DATA_START_SECTOR) {
    8be8:	cmp	r0, #254	; 0xfe
    8bea:	bne.n	8c1e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5a>
    return m_spiDriver.receive(buf, n);
    8bec:	mov	r0, r6
    8bee:	bl	a1a0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
    8bf2:	strb	r0, [r4, #20]
    8bf4:	cbnz	r0, 8c22 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x5e>
    return m_spiDriver.receive();
    8bf6:	mov	r0, r6
    8bf8:	bl	a196 <SdSpiArduinoDriver::receive()>
    8bfc:	mov	r0, r6
    8bfe:	bl	a196 <SdSpiArduinoDriver::receive()>
  return true;
    8c02:	movs	r0, #1
}
    8c04:	add	sp, #12
    8c06:	pop	{r4, r5, r6, r7, pc}
    8c08:	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8c0a:	subs	r3, r5, r3
    if (timeout.timedOut()) {
    8c0c:	lsls	r3, r3, #16
    8c0e:	bpl.n	8bd4 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x10>
    8c10:	movs	r3, #29
  spiStop();
    8c12:	mov	r0, r4
    m_errorCode = code;
    8c14:	strb	r3, [r4, #17]
    8c16:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8c1a:	movs	r0, #0
    8c1c:	b.n	8c04 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8c1e:	movs	r3, #24
    8c20:	b.n	8c12 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8c22:	movs	r3, #37	; 0x25
    8c24:	b.n	8c12 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x4e>
    8c26:	nop
    8c28:	.word	0x20015374

00008c2c <SharedSpiCard::readData(unsigned char*)>:
  return readData(dst, 512);
    8c2c:	mov.w	r2, #512	; 0x200
    8c30:	b.w	8bc4 <SharedSpiCard::readData(unsigned char*, unsigned int)>

00008c34 <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
    8c34:	push	{r4, r5, r6, lr}
    8c36:	ldr	r6, [pc, #36]	; (8c5c <SharedSpiCard::waitReady(unsigned short)+0x28>)
    return m_spiDriver.receive();
    8c38:	adds	r5, r0, #4
    8c3a:	ldr	r3, [r6, #0]
    m_endTime = ms + millis16();
    8c3c:	add	r1, r3
    8c3e:	uxth	r4, r1
    8c40:	mov	r0, r5
    8c42:	bl	a196 <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
    8c46:	cmp	r0, #255	; 0xff
    8c48:	bne.n	8c4e <SharedSpiCard::waitReady(unsigned short)+0x1a>
  return true;
    8c4a:	movs	r0, #1
}
    8c4c:	pop	{r4, r5, r6, pc}
    8c4e:	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
    8c50:	subs	r3, r4, r3
    if (timeout.timedOut()) {
    8c52:	lsls	r3, r3, #16
    8c54:	bpl.n	8c40 <SharedSpiCard::waitReady(unsigned short)+0xc>
      return false;
    8c56:	movs	r0, #0
    8c58:	b.n	8c4c <SharedSpiCard::waitReady(unsigned short)+0x18>
    8c5a:	nop
    8c5c:	.word	0x20015374

00008c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
  if (!syncDevice()) {
    8c60:	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8c62:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
    8c66:	ldr	r3, [r3, #32]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    8c68:	mov	r4, r0
    8c6a:	str	r2, [sp, #4]
    8c6c:	mov	r5, r1
  if (!syncDevice()) {
    8c6e:	blx	r3
    8c70:	cmp	r0, #0
    8c72:	beq.n	8ce6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (!m_spiActive) {
    8c74:	ldrb	r3, [r4, #18]
    8c76:	cbnz	r3, 8c7e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1e>
    spiStart();
    8c78:	mov	r0, r4
    8c7a:	bl	8b46 <SharedSpiCard::spiStart()>
  if (cmd != CMD12) {
    8c7e:	cmp	r5, #12
    8c80:	bne.n	8cd4 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x74>
    m_spiDriver.send(data);
    8c82:	adds	r6, r4, #4
    8c84:	movs	r7, #3
    spiSend(pa[i]);
    8c86:	add.w	r8, sp, #4
    8c8a:	orr.w	r1, r5, #64	; 0x40
    8c8e:	mov	r0, r6
    8c90:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    8c94:	ldrb.w	r1, [r8, r7]
    8c98:	mov	r0, r6
    8c9a:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
    8c9e:	subs	r7, #1
    8ca0:	bcs.n	8c94 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8ca2:	cmp	r5, #0
    8ca4:	mov	r0, r6
    return m_spiDriver.receive();
    8ca6:	mov.w	r5, #10
    m_spiDriver.send(data);
    8caa:	ite	eq
    8cac:	moveq	r1, #149	; 0x95
    8cae:	movne	r1, #135	; 0x87
    8cb0:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8cb4:	mov	r0, r6
    8cb6:	bl	a196 <SdSpiArduinoDriver::receive()>
    8cba:	mov	r0, r6
    8cbc:	bl	a196 <SdSpiArduinoDriver::receive()>
  } while (m_status & 0X80 && ++n < 10);
    8cc0:	lsls	r3, r0, #24
    m_status = spiReceive();
    8cc2:	strb	r0, [r4, #20]
  } while (m_status & 0X80 && ++n < 10);
    8cc4:	bpl.n	8cce <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>
    8cc6:	subs	r5, #1
    8cc8:	uxth	r5, r5
    8cca:	cmp	r5, #0
    8ccc:	bne.n	8cba <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x5a>
}
    8cce:	add	sp, #8
    8cd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
    8cd4:	mov.w	r1, #300	; 0x12c
    8cd8:	mov	r0, r4
    8cda:	bl	8c34 <SharedSpiCard::waitReady(unsigned short)>
    8cde:	cmp	r0, #0
    8ce0:	bne.n	8c82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    8ce2:	cmp	r5, #0
    8ce4:	beq.n	8c82 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x22>
    return 0XFF;
    8ce6:	movs	r0, #255	; 0xff
    8ce8:	b.n	8cce <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6e>

00008cea <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cea:	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
    8cec:	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cee:	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
    8cf0:	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
    8cf2:	mov	r4, r0
  if (cardCommand(CMD58, 0)) {
    8cf4:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8cf8:	cbz	r0, 8d08 <SharedSpiCard::readOCR(unsigned long*)+0x1e>
    m_errorCode = code;
    8cfa:	movs	r3, #18
  spiStop();
    8cfc:	mov	r0, r4
    8cfe:	strb	r3, [r4, #17]
    8d00:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8d04:	movs	r0, #0
}
    8d06:	pop	{r3, r4, r5, r6, r7, pc}
    8d08:	adds	r6, r5, #4
    return m_spiDriver.receive();
    8d0a:	adds	r7, r4, #4
    8d0c:	mov	r0, r7
    8d0e:	bl	a196 <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
    8d12:	strb.w	r0, [r6, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
    8d16:	cmp	r6, r5
    8d18:	bne.n	8d0c <SharedSpiCard::readOCR(unsigned long*)+0x22>
  spiStop();
    8d1a:	mov	r0, r4
    8d1c:	bl	8b6c <SharedSpiCard::spiStop()>
    8d20:	movs	r0, #1
    8d22:	b.n	8d06 <SharedSpiCard::readOCR(unsigned long*)+0x1c>

00008d24 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8d24:	push	{r3, r4, r5, lr}
    8d26:	mov	r5, r2
  if (cardCommand(cmd, 0)) {
    8d28:	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
    8d2a:	mov	r4, r0
  if (cardCommand(cmd, 0)) {
    8d2c:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d30:	cbz	r0, 8d40 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
    m_errorCode = code;
    8d32:	movs	r3, #27
    8d34:	strb	r3, [r4, #17]
  spiStop();
    8d36:	mov	r0, r4
  return false;
    8d38:	movs	r5, #0
  spiStop();
    8d3a:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8d3e:	b.n	8d56 <SharedSpiCard::readRegister(unsigned char, void*)+0x32>
  if (!readData(dst, 16)) {
    8d40:	mov	r1, r5
    8d42:	movs	r2, #16
    8d44:	mov	r0, r4
    8d46:	bl	8bc4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
    8d4a:	mov	r5, r0
    8d4c:	cmp	r0, #0
    8d4e:	beq.n	8d36 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
    8d50:	mov	r0, r4
    8d52:	bl	8b6c <SharedSpiCard::spiStop()>
}
    8d56:	mov	r0, r5
    8d58:	pop	{r3, r4, r5, pc}

00008d5a <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
    8d5a:	mov	r2, r1
    return readRegister(CMD9, csd);
    8d5c:	movs	r1, #9
    8d5e:	b.w	8d24 <SharedSpiCard::readRegister(unsigned char, void*)>

00008d62 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
    8d62:	mov	r2, r1
    return readRegister(CMD10, cid);
    8d64:	movs	r1, #10
    8d66:	b.w	8d24 <SharedSpiCard::readRegister(unsigned char, void*)>

00008d6a <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
    8d6a:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8d6c:	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
    8d6e:	mov	r5, r1
    8d70:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8d72:	ldr	r3, [r3, #88]	; 0x58
    8d74:	blx	r3
    8d76:	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
    8d78:	mov.w	r1, #18
    8d7c:	mov	r0, r4
    sector <<= 9;
    8d7e:	it	ne
    8d80:	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
    8d82:	mov	r2, r5
    8d84:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8d88:	cbz	r0, 8d98 <SharedSpiCard::readStart(unsigned long)+0x2e>
    m_errorCode = code;
    8d8a:	movs	r3, #12
  spiStop();
    8d8c:	mov	r0, r4
    8d8e:	strb	r3, [r4, #17]
    8d90:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8d94:	movs	r0, #0
}
    8d96:	pop	{r3, r4, r5, pc}
  m_state = READ_STATE;
    8d98:	movs	r0, #1
    8d9a:	strb	r0, [r4, #19]
  return true;
    8d9c:	b.n	8d96 <SharedSpiCard::readStart(unsigned long)+0x2c>

00008d9e <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
    8d9e:	push	{r3, r4, r5, lr}
  m_state = IDLE_STATE;
    8da0:	movs	r4, #0
  if (cardCommand(CMD12, 0)) {
    8da2:	movs	r1, #12
bool SharedSpiCard::readStop() {
    8da4:	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8da6:	mov	r2, r4
  m_state = IDLE_STATE;
    8da8:	strb	r4, [r0, #19]
  if (cardCommand(CMD12, 0)) {
    8daa:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8dae:	cbz	r0, 8dbe <SharedSpiCard::readStop()+0x20>
    8db0:	movs	r3, #9
  spiStop();
    8db2:	mov	r0, r5
    8db4:	strb	r3, [r5, #17]
    8db6:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8dba:	mov	r0, r4
}
    8dbc:	pop	{r3, r4, r5, pc}
  spiStop();
    8dbe:	mov	r0, r5
    8dc0:	bl	8b6c <SharedSpiCard::spiStop()>
  return true;
    8dc4:	movs	r0, #1
    8dc6:	b.n	8dbc <SharedSpiCard::readStop()+0x1e>

00008dc8 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
    8dc8:	ldrb	r2, [r0, #19]
    8dca:	cmp	r2, #2
    8dcc:	bne.n	8dd4 <SharedSpiCard::syncDevice()+0xc>
    return writeStop();
    8dce:	ldr	r3, [r0, #0]
    8dd0:	ldr	r3, [r3, #100]	; 0x64
    8dd2:	bx	r3
  if (m_state == READ_STATE) {
    8dd4:	cmp	r2, #1
    8dd6:	bne.n	8ddc <SharedSpiCard::syncDevice()+0x14>
    return readStop();
    8dd8:	b.w	8d9e <SharedSpiCard::readStop()>
}
    8ddc:	movs	r0, #1
    8dde:	bx	lr

00008de0 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
    8de0:	push	{r3, r4, r5, r6, r7, lr}
    8de2:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8de4:	ldrb	r3, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8de6:	mov	r4, r0
    8de8:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dea:	cmp	r3, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
    8dec:	mov	r7, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
    8dee:	bne.n	8df6 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
    8df0:	ldr	r3, [r0, #24]
    8df2:	cmp	r3, r1
    8df4:	beq.n	8e06 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x26>
    if (!readStart(sector)) {
    8df6:	mov	r1, r5
    8df8:	mov	r0, r4
    8dfa:	bl	8d6a <SharedSpiCard::readStart(unsigned long)>
    8dfe:	cbnz	r0, 8e04 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
  return false;
    8e00:	movs	r0, #0
}
    8e02:	pop	{r3, r4, r5, r6, r7, pc}
    m_curSector = sector;
    8e04:	str	r5, [r4, #24]
    uint32_t sector, uint8_t* dst, size_t ns) {
    8e06:	movs	r5, #0
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8e08:	cmp	r5, r6
    8e0a:	add.w	r1, r7, r5, lsl #9
    8e0e:	bne.n	8e26 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  m_curSector += ns;
    8e10:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e12:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8e14:	add	r3, r5
    8e16:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e18:	cmp	r0, #0
    8e1a:	bne.n	8e02 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    8e1c:	mov	r0, r4
}
    8e1e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
    8e22:	b.w	8d9e <SharedSpiCard::readStop()>
    if (!readData(dst)) {
    8e26:	mov	r0, r4
    8e28:	bl	8c2c <SharedSpiCard::readData(unsigned char*)>
    8e2c:	cmp	r0, #0
    8e2e:	beq.n	8e00 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x20>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8e30:	adds	r5, #1
    8e32:	b.n	8e08 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>

00008e34 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e38:	mov	r6, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e3a:	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e3c:	mov	r4, r0
    8e3e:	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e40:	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
    8e42:	mov	r7, r2
    8e44:	ldrd	r9, sl, [sp, #32]
  if (sdState() != READ_STATE || sector != m_curSector) {
    8e48:	bne.n	8e50 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1c>
    8e4a:	ldr	r3, [r0, #24]
    8e4c:	cmp	r3, r1
    8e4e:	beq.n	8e62 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2e>
    if (!readStart(sector)) {
    8e50:	mov	r1, r5
    8e52:	mov	r0, r4
    8e54:	bl	8d6a <SharedSpiCard::readStart(unsigned long)>
    8e58:	cbnz	r0, 8e60 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
  return false;
    8e5a:	movs	r0, #0
}
    8e5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_curSector = sector;
    8e60:	str	r5, [r4, #24]
    8e62:	add.w	r8, r5, r6
  for (size_t i = 0; i < ns; i++) {
    8e66:	cmp	r5, r8
    8e68:	bne.n	8e80 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x4c>
  m_curSector += ns;
    8e6a:	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e6c:	ldrb	r0, [r4, #28]
  m_curSector += ns;
    8e6e:	add	r3, r6
    8e70:	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
    8e72:	cmp	r0, #0
    8e74:	bne.n	8e5c <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x28>
    8e76:	mov	r0, r4
}
    8e78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : readStop();
    8e7c:	b.w	8d9e <SharedSpiCard::readStop()>
    if (readData(dst)) {
    8e80:	mov	r1, r7
    8e82:	mov	r0, r4
    8e84:	bl	8c2c <SharedSpiCard::readData(unsigned char*)>
    8e88:	cmp	r0, #0
    8e8a:	beq.n	8e5a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x26>
      callback(sector + i, dst, context);
    8e8c:	mov	r0, r5
    8e8e:	mov	r2, sl
    8e90:	mov	r1, r7
    8e92:	adds	r5, #1
    8e94:	blx	r9
  for (size_t i = 0; i < ns; i++) {
    8e96:	b.n	8e66 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x32>

00008e98 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
    8e98:	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    8e9a:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
    8e9c:	mov	r5, r1
    8e9e:	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
    8ea0:	ldr	r3, [r3, #88]	; 0x58
    8ea2:	blx	r3
    8ea4:	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
    8ea6:	mov.w	r1, #25
    8eaa:	mov	r0, r4
    sector <<= 9;
    8eac:	it	ne
    8eae:	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
    8eb0:	mov	r2, r5
    8eb2:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8eb6:	cbz	r0, 8ec6 <SharedSpiCard::writeStart(unsigned long)+0x2e>
    8eb8:	movs	r3, #14
  spiStop();
    8eba:	mov	r0, r4
    8ebc:	strb	r3, [r4, #17]
    8ebe:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8ec2:	movs	r0, #0
}
    8ec4:	pop	{r3, r4, r5, pc}
  m_state = WRITE_STATE;
    8ec6:	movs	r3, #2
  return true;
    8ec8:	movs	r0, #1
  m_state = WRITE_STATE;
    8eca:	strb	r3, [r4, #19]
  return true;
    8ecc:	b.n	8ec4 <SharedSpiCard::writeStart(unsigned long)+0x2c>

00008ece <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8ece:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (!readCSD(&csd)) {
    8ed0:	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8ed2:	mov	r6, r1
  if (!readCSD(&csd)) {
    8ed4:	mov	r1, sp
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8ed6:	mov	r4, r0
  if (!readCSD(&csd)) {
    8ed8:	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    8eda:	mov	r5, r2
  if (!readCSD(&csd)) {
    8edc:	blx	r3
    8ede:	cbz	r0, 8f02 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
  if (!csd.v1.erase_blk_en) {
    8ee0:	ldrb.w	r3, [sp, #10]
    8ee4:	lsls	r2, r3, #25
    8ee6:	bmi.n	8f0c <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    8ee8:	and.w	r3, r3, #63	; 0x3f
    8eec:	ldrb.w	r2, [sp, #11]
    8ef0:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8ef2:	orr.w	r3, r3, r2, lsr #7
    8ef6:	adds	r2, r5, #1
    8ef8:	orrs	r2, r6
    8efa:	tst	r3, r2
    8efc:	beq.n	8f0c <SharedSpiCard::erase(unsigned long, unsigned long)+0x3e>
    8efe:	movs	r3, #39	; 0x27
    8f00:	strb	r3, [r4, #17]
  spiStop();
    8f02:	mov	r0, r4
  return false;
    8f04:	movs	r5, #0
  spiStop();
    8f06:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8f0a:	b.n	8f5a <SharedSpiCard::erase(unsigned long, unsigned long)+0x8c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    8f0c:	ldrb	r3, [r4, #21]
  if (cardCommand(CMD32, firstSector)
    8f0e:	movs	r1, #32
    8f10:	mov	r0, r4
  if (m_type != SD_CARD_TYPE_SDHC) {
    8f12:	cmp	r3, #3
    firstSector <<= 9;
    8f14:	itt	ne
    8f16:	lslne	r6, r6, #9
    lastSector <<= 9;
    8f18:	lslne	r5, r5, #9
  if (cardCommand(CMD32, firstSector)
    8f1a:	mov	r2, r6
    8f1c:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
    8f20:	cbz	r0, 8f26 <SharedSpiCard::erase(unsigned long, unsigned long)+0x58>
    8f22:	movs	r3, #38	; 0x26
    8f24:	b.n	8f00 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
      || cardCommand(CMD33, lastSector)
    8f26:	mov	r2, r5
    8f28:	movs	r1, #33	; 0x21
    8f2a:	mov	r0, r4
    8f2c:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f30:	mov	r2, r0
    8f32:	cmp	r0, #0
    8f34:	bne.n	8f22 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
      || cardCommand(CMD38, 0)) {
    8f36:	movs	r1, #38	; 0x26
    8f38:	mov	r0, r4
    8f3a:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    8f3e:	cmp	r0, #0
    8f40:	bne.n	8f22 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
    8f42:	movw	r1, #10000	; 0x2710
    8f46:	mov	r0, r4
    8f48:	bl	8c34 <SharedSpiCard::waitReady(unsigned short)>
    8f4c:	mov	r5, r0
    8f4e:	cbnz	r0, 8f54 <SharedSpiCard::erase(unsigned long, unsigned long)+0x86>
    8f50:	movs	r3, #40	; 0x28
    8f52:	b.n	8f00 <SharedSpiCard::erase(unsigned long, unsigned long)+0x32>
  spiStop();
    8f54:	mov	r0, r4
    8f56:	bl	8b6c <SharedSpiCard::spiStop()>
}
    8f5a:	mov	r0, r5
    8f5c:	add	sp, #16
    8f5e:	pop	{r4, r5, r6, pc}

00008f60 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
    8f60:	push	{r3, r4, r5, lr}
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8f62:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeStop() {
    8f66:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8f68:	bl	8c34 <SharedSpiCard::waitReady(unsigned short)>
    8f6c:	mov	r5, r0
    8f6e:	cbnz	r0, 8f7e <SharedSpiCard::writeStop()+0x1e>
    8f70:	movs	r3, #30
  spiStop();
    8f72:	mov	r0, r4
    8f74:	strb	r3, [r4, #17]
    8f76:	bl	8b6c <SharedSpiCard::spiStop()>
}
    8f7a:	mov	r0, r5
    8f7c:	pop	{r3, r4, r5, pc}
    m_spiDriver.send(data);
    8f7e:	movs	r1, #253	; 0xfd
    8f80:	adds	r0, r4, #4
    8f82:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
    8f86:	mov	r0, r4
    8f88:	bl	8b6c <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
    8f8c:	movs	r3, #0
    8f8e:	strb	r3, [r4, #19]
  return true;
    8f90:	b.n	8f7a <SharedSpiCard::writeStop()+0x1a>

00008f92 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
    8f92:	push	{r0, r1, r2, r4, r5, lr}
    8f94:	mov	r5, r2
    8f96:	mov	r4, r0
    8f98:	adds	r0, #4
    8f9a:	str	r0, [sp, #4]
    8f9c:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
    8fa0:	mov.w	r2, #512	; 0x200
    8fa4:	mov	r1, r5
    8fa6:	ldr	r0, [sp, #4]
    8fa8:	bl	a1ca <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
    8fac:	movs	r1, #255	; 0xff
    8fae:	ldr	r0, [sp, #4]
    8fb0:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    8fb4:	movs	r1, #255	; 0xff
    8fb6:	ldr	r0, [sp, #4]
    8fb8:	bl	a1c2 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
    8fbc:	ldr	r0, [sp, #4]
    8fbe:	bl	a196 <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
    8fc2:	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8fc4:	and.w	r0, r0, #31
    8fc8:	cmp	r0, #5
    8fca:	beq.n	8fdc <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x4a>
    m_errorCode = code;
    8fcc:	movs	r3, #32
  spiStop();
    8fce:	mov	r0, r4
    8fd0:	strb	r3, [r4, #17]
    8fd2:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8fd6:	movs	r0, #0
}
    8fd8:	add	sp, #12
    8fda:	pop	{r4, r5, pc}
  return true;
    8fdc:	movs	r0, #1
    8fde:	b.n	8fd8 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x46>

00008fe0 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
    8fe0:	push	{r0, r1, r4, lr}
    8fe2:	str	r1, [sp, #4]
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8fe4:	mov.w	r1, #600	; 0x258
bool SharedSpiCard::writeData(const uint8_t* src) {
    8fe8:	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
    8fea:	bl	8c34 <SharedSpiCard::waitReady(unsigned short)>
    8fee:	ldr	r2, [sp, #4]
    8ff0:	cbnz	r0, 9000 <SharedSpiCard::writeData(unsigned char const*)+0x20>
    8ff2:	movs	r3, #36	; 0x24
    8ff4:	strb	r3, [r4, #17]
  spiStop();
    8ff6:	mov	r0, r4
    8ff8:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    8ffc:	movs	r0, #0
    8ffe:	b.n	900c <SharedSpiCard::writeData(unsigned char const*)+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    9000:	movs	r1, #252	; 0xfc
    9002:	mov	r0, r4
    9004:	bl	8f92 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    9008:	cmp	r0, #0
    900a:	beq.n	8ff6 <SharedSpiCard::writeData(unsigned char const*)+0x16>
}
    900c:	add	sp, #8
    900e:	pop	{r4, pc}

00009010 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
    9010:	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    9012:	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    9014:	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    9016:	mov	r5, r1
    9018:	mov	r4, r0
    901a:	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
    901c:	blx	r3
    901e:	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
    9020:	mov.w	r1, #24
    9024:	mov	r0, r4
    sector <<= 9;
    9026:	it	ne
    9028:	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
    902a:	mov	r2, r5
    902c:	bl	8c60 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    9030:	cbz	r0, 9040 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
    9032:	movs	r3, #13
    9034:	strb	r3, [r4, #17]
  spiStop();
    9036:	mov	r0, r4
  return false;
    9038:	movs	r5, #0
  spiStop();
    903a:	bl	8b6c <SharedSpiCard::spiStop()>
  return false;
    903e:	b.n	9056 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (!writeData(DATA_START_SECTOR, src)) {
    9040:	mov	r2, r6
    9042:	movs	r1, #254	; 0xfe
    9044:	mov	r0, r4
    9046:	bl	8f92 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
    904a:	mov	r5, r0
    904c:	cmp	r0, #0
    904e:	beq.n	9036 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x26>
  spiStop();
    9050:	mov	r0, r4
    9052:	bl	8b6c <SharedSpiCard::spiStop()>
}
    9056:	mov	r0, r5
    9058:	pop	{r4, r5, r6, pc}

0000905a <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
    905a:	push	{r4}
  if (m_dedicatedSpi) {
    905c:	ldrb	r4, [r0, #28]
    905e:	cbz	r4, 906e <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
    9060:	ldr	r3, [r0, #0]
    9062:	ldr	r4, [r3, #40]	; 0x28
    9064:	movs	r3, #1
    9066:	mov	ip, r4
}
    9068:	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
    906c:	bx	ip
}
    906e:	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
    9072:	b.w	9010 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00009076 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
    9076:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    907a:	ldr	r5, [sp, #32]
    907c:	mov	r6, r0
    907e:	mov	r4, r1
    9080:	mov	r7, r2
    9082:	add.w	r8, r3, r1
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    9086:	cmp	r4, r8
    9088:	bne.n	9090 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       if (!readSector(sector + i, dst)) return false;
       callback(sector + i, dst, context);
     }
     return true;
    908a:	movs	r0, #1
  }
    908c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       if (!readSector(sector + i, dst)) return false;
    9090:	ldr	r3, [r6, #0]
    9092:	mov	r2, r7
    9094:	mov	r1, r4
    9096:	mov	r0, r6
    9098:	ldr	r3, [r3, #16]
    909a:	add.w	r9, r4, #1
    909e:	blx	r3
    90a0:	cmp	r0, #0
    90a2:	beq.n	908c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x16>
       callback(sector + i, dst, context);
    90a4:	mov	r0, r4
    90a6:	ldr	r2, [sp, #36]	; 0x24
    90a8:	mov	r1, r7
    90aa:	mov	r4, r9
    90ac:	blx	r5
     for (size_t i = 0; i < ns; i++) {
    90ae:	b.n	9086 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x10>

000090b0 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
    90b0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90b4:	mov	r5, r0
    90b6:	mov	r4, r1
    90b8:	mov	r7, r3
    90ba:	adds	r6, r2, r1
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
    90bc:	cmp	r4, r6
    90be:	bne.n	90c4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
     }
    return true;
    90c0:	movs	r0, #1
    90c2:	b.n	90de <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
    90c4:	ldr	r3, [r5, #0]
    90c6:	mov	r0, r4
    90c8:	ldr	r1, [sp, #24]
    90ca:	ldr.w	r8, [r3, #36]	; 0x24
    90ce:	blx	r7
    90d0:	mov	r1, r4
    90d2:	mov	r2, r0
    90d4:	mov	r0, r5
    90d6:	adds	r4, #1
    90d8:	blx	r8
    90da:	cmp	r0, #0
    90dc:	bne.n	90bc <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0xc>
  }
    90de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000090e2 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
    90e2:	movs	r0, #0
    90e4:	bx	lr

000090e6 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
    90e6:	movs	r0, #0
    90e8:	bx	lr

000090ea <SdCardInterface::setDedicatedSpi(bool)>:
  }
    90ea:	movs	r0, #0
    90ec:	bx	lr

000090ee <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
    90ee:	bx	lr

000090f0 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    90f0:	ldr	r3, [pc, #28]	; (9110 <sdIrs()+0x20>)
    90f2:	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    90f4:	ldr	r2, [pc, #28]	; (9114 <sdIrs()+0x24>)
  SDHC_IRQSIGEN = 0;
    90f6:	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    90f8:	ldr	r0, [r3, #48]	; 0x30
    90fa:	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    90fc:	ldr	r2, [r2, #0]
    90fe:	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    9100:	ldr	r2, [r3, #72]	; 0x48
    9102:	bic.w	r2, r2, #129	; 0x81
    9106:	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    9108:	ldr	r3, [pc, #12]	; (9118 <sdIrs()+0x28>)
    910a:	strb	r1, [r3, #0]
}
    910c:	bx	lr
    910e:	nop
    9110:	.word	0x402c0000
    9114:	.word	0x200147f8
    9118:	.word	0x20015536

0000911c <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    911c:	ldr	r3, [pc, #24]	; (9138 <gpioMux(unsigned char)+0x1c>)
    911e:	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    9122:	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    9126:	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    912a:	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    912e:	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    9132:	str.w	r0, [r3, #456]	; 0x1c8
}
    9136:	bx	lr
    9138:	.word	0x401f8000

0000913c <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    913c:	ldr	r3, [pc, #12]	; (914c <isBusyCommandComplete()+0x10>)
    913e:	ldr	r0, [pc, #16]	; (9150 <isBusyCommandComplete()+0x14>)
    9140:	ldr	r3, [r3, #48]	; 0x30
    9142:	ands	r0, r3
}
    9144:	clz	r0, r0
    9148:	lsrs	r0, r0, #5
    914a:	bx	lr
    914c:	.word	0x402c0000
    9150:	.word	0x000f0001

00009154 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    9154:	ldr	r3, [pc, #8]	; (9160 <isBusyCommandInhibit()+0xc>)
    9156:	ldr	r0, [r3, #36]	; 0x24
}
    9158:	and.w	r0, r0, #1
    915c:	bx	lr
    915e:	nop
    9160:	.word	0x402c0000

00009164 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9164:	ldr	r3, [pc, #12]	; (9174 <isBusyDat()+0x10>)
    9166:	ldr	r0, [r3, #36]	; 0x24
    9168:	eor.w	r0, r0, #16777216	; 0x1000000
}
    916c:	ubfx	r0, r0, #24, #1
    9170:	bx	lr
    9172:	nop
    9174:	.word	0x402c0000

00009178 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    9178:	ldr	r3, [pc, #4]	; (9180 <isBusyDMA()+0x8>)
    917a:	ldrb	r0, [r3, #0]
}
    917c:	bx	lr
    917e:	nop
    9180:	.word	0x20015536

00009184 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    9184:	ldr	r3, [pc, #12]	; (9194 <isBusyFifoRead()+0x10>)
    9186:	ldr	r0, [r3, #36]	; 0x24
    9188:	eor.w	r0, r0, #2048	; 0x800
}
    918c:	ubfx	r0, r0, #11, #1
    9190:	bx	lr
    9192:	nop
    9194:	.word	0x402c0000

00009198 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    9198:	ldr	r3, [pc, #12]	; (91a8 <isBusyFifoWrite()+0x10>)
    919a:	ldr	r0, [r3, #36]	; 0x24
    919c:	eor.w	r0, r0, #1024	; 0x400
}
    91a0:	ubfx	r0, r0, #10, #1
    91a4:	bx	lr
    91a6:	nop
    91a8:	.word	0x402c0000

000091ac <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    91ac:	ldr	r3, [pc, #12]	; (91bc <isBusyTransferComplete()+0x10>)
    91ae:	ldr	r0, [pc, #16]	; (91c0 <isBusyTransferComplete()+0x14>)
    91b0:	ldr	r3, [r3, #48]	; 0x30
    91b2:	ands	r0, r3
}
    91b4:	clz	r0, r0
    91b8:	lsrs	r0, r0, #5
    91ba:	bx	lr
    91bc:	.word	0x402c0000
    91c0:	.word	0x117f0002

000091c4 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    91c4:	mov.w	r3, #1000	; 0x3e8
    91c8:	muls	r0, r3
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    91ca:	ldr	r3, [pc, #140]	; (9258 <setSdclk(unsigned long)+0x94>)
    91cc:	ldr	r2, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91ce:	sub.w	r3, r3, #147456	; 0x24000
    91d2:	ldr.w	r1, [r3, #256]	; 0x100
    91d6:	movs	r3, #6
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    91d8:	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91dc:	and.w	r1, r1, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    91e0:	adds	r2, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91e2:	udiv	r1, r1, r3
    91e6:	ldr	r3, [pc, #116]	; (925c <setSdclk(unsigned long)+0x98>)
    91e8:	udiv	r3, r3, r1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    91ec:	movs	r1, #9
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    91ee:	udiv	r3, r3, r2
  uint32_t sdclkfs = 1;
    91f2:	movs	r2, #1
static void setSdclk(uint32_t kHzMax) {
    91f4:	push	{r4, r5, lr}
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    91f6:	lsls	r4, r2, #4
    91f8:	udiv	r4, r3, r4
    91fc:	cmp	r4, r0
    91fe:	bls.n	9204 <setSdclk(unsigned long)+0x40>
    9200:	subs	r1, #1
    9202:	bne.n	920a <setSdclk(unsigned long)+0x46>
    9204:	mov	r4, r2
    9206:	movs	r1, #1
    9208:	b.n	9212 <setSdclk(unsigned long)+0x4e>
    sdclkfs <<= 1;
    920a:	lsls	r2, r2, #1
    920c:	b.n	91f6 <setSdclk(unsigned long)+0x32>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
    920e:	adds	r1, #1
    9210:	mov	r4, r5
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    9212:	udiv	r5, r3, r4
    9216:	cmp	r5, r0
    9218:	bls.n	9222 <setSdclk(unsigned long)+0x5e>
    921a:	cmp	r1, #16
    921c:	add.w	r5, r2, r4
    9220:	bne.n	920e <setSdclk(unsigned long)+0x4a>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    9222:	mov.w	r0, #1000	; 0x3e8
  sdclkfs >>= 1;
  dvs--;
    9226:	subs	r1, #1
  sdclkfs >>= 1;
    9228:	lsrs	r2, r2, #1
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    922a:	muls	r4, r0
    922c:	ldr	r0, [pc, #48]	; (9260 <setSdclk(unsigned long)+0x9c>)
    922e:	udiv	r3, r3, r4
    9232:	str	r3, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    9234:	ldr	r0, [pc, #44]	; (9264 <setSdclk(unsigned long)+0xa0>)
    9236:	ldr	r3, [r0, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
    9238:	bic.w	r3, r3, #1044480	; 0xff000
    923c:	bic.w	r3, r3, #4080	; 0xff0

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    9240:	orr.w	r3, r3, r1, lsl #4
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    9244:	orr.w	r3, r3, r2, lsl #8
    9248:	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
    924c:	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    924e:	ldr	r3, [r0, #36]	; 0x24
    9250:	lsls	r3, r3, #28
    9252:	bpl.n	924e <setSdclk(unsigned long)+0x8a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    9254:	pop	{r4, r5, pc}
    9256:	nop
    9258:	.word	0x400fc000
    925c:	.word	0x5e69ec00
    9260:	.word	0x2000dfd0
    9264:	.word	0x402c0000

00009268 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
    9268:	ldr	r3, [pc, #4]	; (9270 <SdioCard::errorCode() const+0x8>)
    926a:	ldrb	r0, [r3, #0]
    926c:	bx	lr
    926e:	nop
    9270:	.word	0x2000230c

00009274 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    9274:	ldr	r3, [pc, #4]	; (927c <SdioCard::errorData() const+0x8>)
    9276:	ldr	r0, [r3, #0]
}
    9278:	bx	lr
    927a:	nop
    927c:	.word	0x200147f8

00009280 <SdioCard::readCID(CID*)>:
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    9280:	ldr	r3, [pc, #20]	; (9298 <SdioCard::readCID(CID*)+0x18>)
    9282:	add.w	r2, r3, #16
    9286:	ldr.w	r0, [r3], #4
    928a:	cmp	r3, r2
    928c:	str.w	r0, [r1], #4
    9290:	bne.n	9286 <SdioCard::readCID(CID*)+0x6>
  return true;
}
    9292:	movs	r0, #1
    9294:	bx	lr
    9296:	nop
    9298:	.word	0x20015476

0000929c <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    929c:	ldr	r3, [pc, #20]	; (92b4 <SdioCard::readCSD(csd_t*)+0x18>)
    929e:	add.w	r2, r3, #16
    92a2:	ldr.w	r0, [r3], #4
    92a6:	cmp	r3, r2
    92a8:	str.w	r0, [r1], #4
    92ac:	bne.n	92a2 <SdioCard::readCSD(csd_t*)+0x6>
  return true;
}
    92ae:	movs	r0, #1
    92b0:	bx	lr
    92b2:	nop
    92b4:	.word	0x20015486

000092b8 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    92b8:	ldr	r3, [pc, #8]	; (92c4 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    92ba:	movs	r0, #1
  *ocr = m_ocr;
    92bc:	ldr	r3, [r3, #0]
    92be:	str	r3, [r1, #0]
}
    92c0:	bx	lr
    92c2:	nop
    92c4:	.word	0x200141ec

000092c8 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
    92c8:	bx	lr
	...

000092cc <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
    92cc:	push	{r3, r4, r5, r6, r7, lr}
    92ce:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92d0:	ldr	r7, [pc, #24]	; (92ec <waitTimeout(bool (*)())+0x20>)
  uint32_t m = micros();
    92d2:	bl	b750 <micros>
    92d6:	mov	r6, r0
  while (fcn()) {
    92d8:	blx	r5
    92da:	mov	r4, r0
    92dc:	cbz	r0, 92e8 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92de:	bl	b750 <micros>
    92e2:	subs	r0, r0, r6
    92e4:	cmp	r0, r7
    92e6:	bls.n	92d8 <waitTimeout(bool (*)())+0xc>
}
    92e8:	mov	r0, r4
    92ea:	pop	{r3, r4, r5, r6, r7, pc}
    92ec:	.word	0x000f4240

000092f0 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
    92f0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    92f4:	ldr	r7, [pc, #44]	; (9324 <yieldTimeout(bool (*)())+0x34>)
static bool yieldTimeout(bool (*fcn)()) {
    92f6:	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    92f8:	ldr.w	r8, [pc, #44]	; 9328 <yieldTimeout(bool (*)())+0x38>
  m_busyFcn = fcn;
    92fc:	str	r0, [r7, #0]
  uint32_t m = micros();
    92fe:	bl	b750 <micros>
    9302:	mov	r6, r0
  while (fcn()) {
    9304:	blx	r5
    9306:	mov	r4, r0
    9308:	cbnz	r0, 9314 <yieldTimeout(bool (*)())+0x24>
      m_busyFcn = 0;
    930a:	movs	r3, #0
}
    930c:	mov	r0, r4
      m_busyFcn = 0;
    930e:	str	r3, [r7, #0]
}
    9310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    9314:	bl	b750 <micros>
    9318:	subs	r0, r0, r6
    931a:	cmp	r0, r8
    931c:	bhi.n	930a <yieldTimeout(bool (*)())+0x1a>
    yield();
    931e:	bl	c418 <yield>
    9322:	b.n	9304 <yieldTimeout(bool (*)())+0x14>
    9324:	.word	0x200147f4
    9328:	.word	0x000f4240

0000932c <SdioCard::~SdioCard()>:
    932c:	push	{r4, lr}
    932e:	mov	r4, r0
    9330:	movs	r1, #12
    9332:	bl	c944 <operator delete(void*, unsigned int)>
    9336:	mov	r0, r4
    9338:	pop	{r4, pc}
	...

0000933c <enableGPIO(bool) [clone .part.0]>:
static void enableGPIO(bool enable) {
    933c:	push	{r3, lr}
    gpioMux(0);
    933e:	movs	r0, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    9340:	movw	r2, #28856	; 0x70b8
    gpioMux(0);
    9344:	bl	911c <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    9348:	movw	r1, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    934c:	ldr	r3, [pc, #24]	; (9368 <enableGPIO(bool) [clone .part.0]+0x2c>)
    934e:	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    9352:	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    9356:	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    935a:	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    935e:	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    9362:	str.w	r2, [r3, #952]	; 0x3b8
}
    9366:	pop	{r3, pc}
    9368:	.word	0x401f8000

0000936c <initSDHC()>:
  CCM_ANALOG_PFD_528 |= (1 << 7);
    936c:	ldr	r3, [pc, #184]	; (9428 <initSDHC()+0xbc>)
    gpioMux(5);
    936e:	movs	r0, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
    9370:	ldr.w	r2, [r3, #256]	; 0x100
    9374:	orr.w	r2, r2, #128	; 0x80
static void initSDHC() {
    9378:	push	{r4, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
    937a:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    937e:	ldr.w	r2, [r3, #256]	; 0x100
  SDHC_MIX_CTRL |= 0x80000000;
    9382:	ldr	r4, [pc, #168]	; (942c <initSDHC()+0xc0>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    9384:	bic.w	r2, r2, #63	; 0x3f
    9388:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    938c:	ldr.w	r2, [r3, #256]	; 0x100
    9390:	orr.w	r2, r2, #24
    9394:	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    9398:	ldr.w	r2, [r3, #256]	; 0x100
    939c:	bic.w	r2, r2, #128	; 0x80
    93a0:	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    93a4:	add.w	r3, r3, #147456	; 0x24000
    93a8:	ldr.w	r2, [r3, #128]	; 0x80
    93ac:	orr.w	r2, r2, #12
    93b0:	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    93b4:	ldr	r2, [r3, #36]	; 0x24
    93b6:	bic.w	r2, r2, #14336	; 0x3800
    93ba:	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    93bc:	ldr	r2, [r3, #28]
    93be:	orr.w	r2, r2, #65536	; 0x10000
    93c2:	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    93c4:	ldr	r2, [r3, #36]	; 0x24
    93c6:	orr.w	r2, r2, #2048	; 0x800
    93ca:	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
    93cc:	bl	911c <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
    93d0:	ldr	r3, [r4, #72]	; 0x48
    93d2:	orr.w	r3, r3, #2147483648	; 0x80000000
    93d6:	str	r3, [r4, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    93d8:	ldr	r3, [r4, #44]	; 0x2c
    93da:	orr.w	r3, r3, #16777216	; 0x1000000
    93de:	orr.w	r3, r3, #32768	; 0x8000
    93e2:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    93e4:	ldr	r3, [r4, #44]	; 0x2c
    93e6:	lsls	r2, r3, #7
    93e8:	bmi.n	93e4 <initSDHC()+0x78>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    93ea:	mov.w	r0, #400	; 0x190
    93ee:	bl	91c4 <setSdclk(unsigned long)>
  if (enable) {
    93f2:	bl	933c <enableGPIO(bool) [clone .part.0]>
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    93f6:	ldr	r3, [pc, #56]	; (9430 <initSDHC()+0xc4>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    93f8:	ldr	r2, [pc, #56]	; (9434 <initSDHC()+0xc8>)
    93fa:	str	r3, [r4, #52]	; 0x34
    93fc:	ldr	r3, [pc, #56]	; (9438 <initSDHC()+0xcc>)
    93fe:	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    9402:	ldr	r3, [pc, #56]	; (943c <initSDHC()+0xd0>)
    9404:	movs	r2, #96	; 0x60
    9406:	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    940a:	mov.w	r3, #3758153728	; 0xe000e000
    940e:	mov.w	r2, #16384	; 0x4000
    9412:	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    9416:	ldr	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9418:	ldr	r2, [pc, #16]	; (942c <initSDHC()+0xc0>)
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    941a:	orr.w	r3, r3, #134217728	; 0x8000000
    941e:	str	r3, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    9420:	ldr	r3, [r2, #44]	; 0x2c
    9422:	lsls	r3, r3, #4
    9424:	bmi.n	9420 <initSDHC()+0xb4>
}
    9426:	pop	{r4, pc}
    9428:	.word	0x400d8000
    942c:	.word	0x402c0000
    9430:	.word	0x117f000b
    9434:	.word	0x000090f1
    9438:	.word	0x20002400
    943c:	.word	0xe000e400

00009440 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
    9440:	ldr	r3, [pc, #16]	; (9454 <SdioCard::type() const+0x14>)
    9442:	ldrb	r3, [r3, #0]
    9444:	cbz	r3, 9450 <SdioCard::type() const+0x10>
    9446:	ldr	r3, [pc, #16]	; (9458 <SdioCard::type() const+0x18>)
    9448:	ldrb	r0, [r3, #0]
    944a:	adds	r0, #2
    944c:	uxtb	r0, r0
    944e:	bx	lr
    9450:	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
    9452:	bx	lr
    9454:	.word	0x20015473
    9458:	.word	0x20015474

0000945c <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    945c:	push	{r3, r4, r5, lr}
    945e:	mov	r4, r0
  if (waitTimeout(isBusyCommandInhibit)) {
    9460:	ldr	r0, [pc, #80]	; (94b4 <cardCommand(unsigned long, unsigned long)+0x58>)
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    9462:	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
    9464:	bl	92cc <waitTimeout(bool (*)())>
    9468:	cbnz	r0, 94aa <cardCommand(unsigned long, unsigned long)+0x4e>
  SDHC_CMDARG = arg;
    946a:	ldr	r3, [pc, #76]	; (94b8 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    946c:	lsls	r1, r4, #10
  SDHC_CMDARG = arg;
    946e:	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    9470:	bpl.n	9482 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    9472:	ldr	r2, [r3, #72]	; 0x48
    9474:	bic.w	r2, r2, #255	; 0xff
    9478:	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    947a:	uxtb	r2, r4
    947c:	ldr	r1, [r3, #72]	; 0x48
    947e:	orrs	r2, r1
    9480:	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    9482:	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
    9486:	ldr	r5, [pc, #48]	; (94b8 <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    9488:	ldr	r0, [pc, #48]	; (94bc <cardCommand(unsigned long, unsigned long)+0x60>)
  SDHC_XFERTYP = xfertyp;
    948a:	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    948c:	bl	92cc <waitTimeout(bool (*)())>
    9490:	cbnz	r0, 94aa <cardCommand(unsigned long, unsigned long)+0x4e>
  m_irqstat = SDHC_IRQSTAT;
    9492:	ldr	r2, [r5, #48]	; 0x30
    9494:	ldr	r3, [pc, #40]	; (94c0 <cardCommand(unsigned long, unsigned long)+0x64>)
    9496:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9498:	ldr	r2, [r3, #0]
    949a:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    949c:	ldr	r2, [r3, #0]
    949e:	lsls	r2, r2, #31
    94a0:	bpl.n	94aa <cardCommand(unsigned long, unsigned long)+0x4e>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    94a2:	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    94a4:	tst.w	r3, #983040	; 0xf0000
    94a8:	beq.n	94ae <cardCommand(unsigned long, unsigned long)+0x52>
    94aa:	movs	r0, #0
}
    94ac:	pop	{r3, r4, r5, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    94ae:	movs	r0, #1
    94b0:	b.n	94ac <cardCommand(unsigned long, unsigned long)+0x50>
    94b2:	nop
    94b4:	.word	0x00009155
    94b8:	.word	0x402c0000
    94bc:	.word	0x0000913d
    94c0:	.word	0x200147f8

000094c4 <statusCMD13()>:
static uint32_t statusCMD13() {
    94c4:	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    94c6:	ldr	r3, [pc, #16]	; (94d8 <statusCMD13()+0x14>)
    94c8:	ldr	r0, [pc, #16]	; (94dc <statusCMD13()+0x18>)
    94ca:	ldr	r1, [r3, #0]
    94cc:	bl	945c <cardCommand(unsigned long, unsigned long)>
    94d0:	cbz	r0, 94d6 <statusCMD13()+0x12>
    94d2:	ldr	r3, [pc, #12]	; (94e0 <statusCMD13()+0x1c>)
    94d4:	ldr	r0, [r3, #16]
}
    94d6:	pop	{r3, pc}
    94d8:	.word	0x200141f0
    94dc:	.word	0x0d1a0000
    94e0:	.word	0x402c0000

000094e4 <isBusyCMD13()>:
static bool isBusyCMD13() {
    94e4:	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
    94e6:	bl	94c4 <statusCMD13()>
    94ea:	eor.w	r0, r0, #256	; 0x100
}
    94ee:	ubfx	r0, r0, #8, #1
    94f2:	pop	{r3, pc}

000094f4 <SdioCard::status()>:
  return statusCMD13();
    94f4:	b.w	94c4 <statusCMD13()>

000094f8 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
    94f8:	ldr	r3, [pc, #76]	; (9548 <readReg16(unsigned long, void*)+0x50>)
static bool readReg16(uint32_t xfertyp, void* data) {
    94fa:	push	{r4, r5, lr}
    94fc:	mov	r4, r1
    94fe:	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
    9500:	ldr	r1, [r3, #0]
    9502:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9506:	cbz	r0, 9544 <readReg16(unsigned long, void*)+0x4c>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    9508:	ldr	r3, [pc, #64]	; (954c <readReg16(unsigned long, void*)+0x54>)
    950a:	add.w	r5, r4, #15
    950e:	ldr	r2, [r3, #16]
    9510:	str	r2, [sp, #0]
    9512:	ldr	r2, [r3, #20]
    9514:	str	r2, [sp, #4]
    9516:	ldr	r2, [r3, #24]
    9518:	str	r2, [sp, #8]
    951a:	ldr	r3, [r3, #28]
    951c:	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
    951e:	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9520:	bic.w	r2, r3, #3
    9524:	and.w	r1, r3, #3
  for (int i = 0; i < 15; i++) {
    9528:	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    952a:	adds	r2, #16
    952c:	lsls	r1, r1, #3
  for (int i = 0; i < 15; i++) {
    952e:	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    9530:	add	r2, sp
    9532:	ldr.w	r2, [r2, #-16]
    9536:	lsr.w	r2, r2, r1
    953a:	strb.w	r2, [r5, #-1]!
  for (int i = 0; i < 15; i++) {
    953e:	bne.n	9520 <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
    9540:	movs	r3, #0
    9542:	strb	r3, [r4, #15]
}
    9544:	add	sp, #20
    9546:	pop	{r4, r5, pc}
    9548:	.word	0x200141f0
    954c:	.word	0x402c0000

00009550 <waitDmaStatus()>:
static bool waitDmaStatus() {
    9550:	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
    9552:	ldr	r0, [pc, #32]	; (9574 <waitDmaStatus()+0x24>)
    9554:	bl	92f0 <yieldTimeout(bool (*)())>
    9558:	cbnz	r0, 9570 <waitDmaStatus()+0x20>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    955a:	ldr	r3, [pc, #28]	; (9578 <waitDmaStatus()+0x28>)
    955c:	ldr	r2, [r3, #0]
    955e:	lsls	r2, r2, #30
    9560:	bpl.n	956e <waitDmaStatus()+0x1e>
    9562:	ldr	r2, [r3, #0]
    9564:	ldr	r3, [pc, #20]	; (957c <waitDmaStatus()+0x2c>)
    9566:	tst	r2, r3
    9568:	ite	eq
    956a:	moveq	r0, #1
    956c:	movne	r0, #0
}
    956e:	pop	{r3, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9570:	movs	r0, #0
    9572:	b.n	956e <waitDmaStatus()+0x1e>
    9574:	.word	0x00009179
    9578:	.word	0x200147f8
    957c:	.word	0x117f0000

00009580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
    9580:	push	{r3, r4, r5, r6, r7, lr}
    9582:	mov	r5, r3
  if ((3 & (uint32_t)buf) || n == 0) {
    9584:	lsls	r3, r2, #30
                       uint32_t sector, uint8_t* buf, size_t n) {
    9586:	mov	r7, r0
    9588:	mov	r4, r1
    958a:	mov	r6, r2
  if ((3 & (uint32_t)buf) || n == 0) {
    958c:	bne.n	9590 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x10>
    958e:	cbnz	r5, 95a2 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_errorCode = code;
    9590:	ldr	r3, [pc, #96]	; (95f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    9592:	movs	r2, #37	; 0x25
    9594:	strb	r2, [r3, #0]
  m_errorLine = line;
    9596:	movw	r2, #501	; 0x1f5
    959a:	ldr	r3, [pc, #92]	; (95f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    959c:	str	r2, [r3, #0]
}
    959e:	movs	r0, #0
    95a0:	pop	{r3, r4, r5, r6, r7, pc}
  if (yieldTimeout(isBusyCMD13)) {
    95a2:	ldr	r0, [pc, #88]	; (95fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>)
    95a4:	bl	92f0 <yieldTimeout(bool (*)())>
    95a8:	cbz	r0, 95b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    95aa:	ldr	r3, [pc, #72]	; (95f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x74>)
    95ac:	movs	r2, #10
    95ae:	strb	r2, [r3, #0]
  m_errorLine = line;
    95b0:	mov.w	r2, #504	; 0x1f8
    95b4:	ldr	r3, [pc, #64]	; (95f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x78>)
    95b6:	b.n	959c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1c>
  m_dmaBusy = true;
    95b8:	ldr	r3, [pc, #68]	; (9600 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x80>)
    95ba:	movs	r2, #1
  SDHC_DSADDR  = (uint32_t)buf;
    95bc:	ldr	r1, [pc, #68]	; (9604 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x84>)
  m_dmaBusy = true;
    95be:	strb	r2, [r3, #0]
  m_irqstat = 0;
    95c0:	ldr	r3, [pc, #68]	; (9608 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x88>)
    95c2:	str	r0, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    95c4:	ldr	r3, [pc, #68]	; (960c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
  SDHC_DSADDR  = (uint32_t)buf;
    95c6:	str	r6, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    95c8:	and.w	r3, r3, r5, lsl #16
    95cc:	orr.w	r3, r3, #512	; 0x200
    95d0:	str	r3, [r1, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    95d2:	ldr	r3, [pc, #60]	; (9610 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    95d4:	str	r3, [r1, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    95d6:	ldr	r3, [pc, #60]	; (9614 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    95d8:	ldrb	r3, [r3, #0]
    95da:	cbnz	r3, 95de <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x5e>
    95dc:	lsls	r4, r4, #9
    95de:	mov	r1, r4
    95e0:	mov	r0, r7
    95e2:	bl	945c <cardCommand(unsigned long, unsigned long)>
    95e6:	cmp	r0, #0
    95e8:	beq.n	959e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x1e>
}
    95ea:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return waitDmaStatus();
    95ee:	b.w	9550 <waitDmaStatus()>
    95f2:	nop
    95f4:	.word	0x2000230c
    95f8:	.word	0x2000dfd8
    95fc:	.word	0x000094e5
    9600:	.word	0x20015536
    9604:	.word	0x402c0000
    9608:	.word	0x200147f8
    960c:	.word	0x1fff0000
    9610:	.word	0x117f0002
    9614:	.word	0x20015474

00009618 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9618:	push	{r3, r4, r5, r6, r7, lr}
    961a:	mov	r7, r0
  bool useDma() {return m_options & DMA_SDIO;}
    961c:	ldrb	r0, [r0, #8]
    961e:	mov	r4, r1
    9620:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    9622:	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    9624:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    9626:	bmi.n	9646 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    9628:	add	r6, r1
    for (size_t i = 0; i < n; i++) {
    962a:	cmp	r4, r6
    962c:	beq.n	9650 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
      if (!readSector(sector + i, dst + i*512UL)) {
    962e:	ldr	r3, [r7, #0]
    9630:	mov	r2, r5
    9632:	mov	r1, r4
    9634:	mov	r0, r7
    9636:	ldr	r3, [r3, #16]
    9638:	adds	r4, #1
    963a:	add.w	r5, r5, #512	; 0x200
    963e:	blx	r3
    9640:	cmp	r0, #0
    9642:	bne.n	962a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    9644:	b.n	9662 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4a>
    if ((uint32_t)dst & 3) {
    9646:	lsls	r0, r2, #30
    9648:	beq.n	966e <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x56>
    964a:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    964c:	cmp	r4, r6
    964e:	bne.n	9654 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3c>
      return true;
    9650:	movs	r0, #1
    9652:	b.n	9664 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
        if (!readSector(sector, dst)) {
    9654:	ldr	r3, [r7, #0]
    9656:	mov	r2, r5
    9658:	mov	r1, r4
    965a:	mov	r0, r7
    965c:	ldr	r3, [r3, #16]
    965e:	blx	r3
    9660:	cbnz	r0, 9666 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
          return false;  // readSector will set errorCode.
    9662:	movs	r0, #0
}
    9664:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    9666:	adds	r4, #1
    9668:	add.w	r5, r5, #512	; 0x200
    966c:	b.n	964c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    966e:	ldr	r0, [pc, #24]	; (9688 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x70>)
    9670:	bl	9580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9674:	cmp	r0, #0
    9676:	bne.n	9650 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
  m_errorCode = code;
    9678:	ldr	r3, [pc, #16]	; (968c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x74>)
    967a:	movs	r2, #12
    967c:	strb	r2, [r3, #0]
  m_errorLine = line;
    967e:	movw	r2, #929	; 0x3a1
    9682:	ldr	r3, [pc, #12]	; (9690 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x78>)
    9684:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD18);
    9686:	b.n	9664 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
    9688:	.word	0x123a0037
    968c:	.word	0x2000230c
    9690:	.word	0x2000dfd8

00009694 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    9694:	push	{r3, r4, r5, r6, r7, lr}
    9696:	mov	r7, r0
    9698:	ldrb	r0, [r0, #8]
    969a:	mov	r4, r1
    969c:	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    969e:	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    96a0:	mov	r6, r3
  if (m_sdioConfig.useDma()) {
    96a2:	bmi.n	96c2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    96a4:	add	r6, r1
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    96a6:	cmp	r4, r6
    96a8:	beq.n	96cc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
      if (!writeSector(sector + i, src + i*512UL)) {
    96aa:	ldr	r3, [r7, #0]
    96ac:	mov	r2, r5
    96ae:	mov	r1, r4
    96b0:	mov	r0, r7
    96b2:	ldr	r3, [r3, #36]	; 0x24
    96b4:	adds	r4, #1
    96b6:	add.w	r5, r5, #512	; 0x200
    96ba:	blx	r3
    96bc:	cmp	r0, #0
    96be:	bne.n	96a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    96c0:	b.n	96de <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4a>
    if (3 & (uint32_t)ptr) {
    96c2:	lsls	r0, r2, #30
    96c4:	beq.n	96ea <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x56>
    96c6:	add	r6, r1
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    96c8:	cmp	r4, r6
    96ca:	bne.n	96d0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
      return true;
    96cc:	movs	r0, #1
    96ce:	b.n	96e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
        if (!writeSector(sector, ptr)) {
    96d0:	ldr	r3, [r7, #0]
    96d2:	mov	r2, r5
    96d4:	mov	r1, r4
    96d6:	mov	r0, r7
    96d8:	ldr	r3, [r3, #36]	; 0x24
    96da:	blx	r3
    96dc:	cbnz	r0, 96e2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4e>
          return false;  // writeSector will set errorCode.
    96de:	movs	r0, #0
        return false;
      }
    }
  }
  return true;
}
    96e0:	pop	{r3, r4, r5, r6, r7, pc}
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    96e2:	adds	r4, #1
    96e4:	add.w	r5, r5, #512	; 0x200
    96e8:	b.n	96c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    96ea:	ldr	r0, [pc, #24]	; (9704 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>)
    96ec:	bl	9580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    96f0:	cmp	r0, #0
    96f2:	bne.n	96cc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
  m_errorCode = code;
    96f4:	ldr	r3, [pc, #16]	; (9708 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x74>)
    96f6:	movs	r2, #14
    96f8:	strb	r2, [r3, #0]
  m_errorLine = line;
    96fa:	movw	r2, #1085	; 0x43d
    96fe:	ldr	r3, [pc, #12]	; (970c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x78>)
    9700:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD25);
    9702:	b.n	96e0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
    9704:	.word	0x193a0027
    9708:	.word	0x2000230c
    970c:	.word	0x2000dfd8

00009710 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
    9710:	ldr	r2, [pc, #88]	; (976c <SdioCard::sectorCount()+0x5c>)
    9712:	ldrb	r3, [r2, #0]
    9714:	ands.w	r3, r3, #192	; 0xc0
    9718:	bne.n	974c <SdioCard::sectorCount()+0x3c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
    971a:	ldrb	r3, [r2, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    971c:	ldrb	r0, [r2, #7]
    uint16_t c_size = (csd->v1.c_size_high << 10)
    971e:	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
    9722:	ldrb	r1, [r2, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    9724:	lsls	r0, r0, #2
    9726:	orr.w	r0, r0, r3, lsl #10
    972a:	ldrb	r3, [r2, #8]
    972c:	orr.w	r0, r0, r3, lsr #6
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9730:	ldrb	r3, [r2, #9]
    uint8_t read_bl_len = csd->v1.read_bl_len;
    9732:	ldrb	r2, [r2, #5]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    9734:	and.w	r3, r3, #3
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9738:	adds	r0, #1
    973a:	and.w	r2, r2, #15
                          | csd->v1.c_size_mult_low;
    973e:	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    9740:	orr.w	r3, r3, r1, lsr #7
    9744:	add	r3, r2
    9746:	subs	r3, #7
    9748:	lsls	r0, r3
    974a:	bx	lr
  } else if (csd->v2.csd_ver == 1) {
    974c:	cmp	r3, #64	; 0x40
    974e:	bne.n	9768 <SdioCard::sectorCount()+0x58>
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9750:	ldrb	r0, [r2, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9752:	ldrb	r3, [r2, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    9754:	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
    9756:	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    975a:	add.w	r0, r0, r3, lsl #16
    975e:	ldrb	r3, [r2, #8]
    9760:	add.w	r0, r0, r3, lsl #8
    9764:	lsls	r0, r0, #10
    9766:	bx	lr
  } else {
    return 0;
    9768:	movs	r0, #0
}
    976a:	bx	lr
    976c:	.word	0x20015486

00009770 <SdioCard::isBusy()>:
    9770:	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
    9772:	lsls	r3, r3, #31
    9774:	bpl.n	9788 <SdioCard::isBusy()+0x18>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    9776:	ldr	r3, [pc, #40]	; (97a0 <SdioCard::isBusy()+0x30>)
    9778:	ldr	r3, [r3, #0]
    977a:	cbz	r3, 977e <SdioCard::isBusy()+0xe>
    977c:	bx	r3
    977e:	ldr	r3, [pc, #36]	; (97a4 <SdioCard::isBusy()+0x34>)
    9780:	ldrb	r0, [r3, #0]
    9782:	cbz	r0, 979e <SdioCard::isBusy()+0x2e>
    9784:	b.w	94e4 <isBusyCMD13()>
    if (m_transferActive) {
    9788:	ldr	r3, [pc, #28]	; (97a8 <SdioCard::isBusy()+0x38>)
    978a:	ldrb	r3, [r3, #0]
    978c:	cbz	r3, 9792 <SdioCard::isBusy()+0x22>
      if (isBusyTransferComplete()) {
    978e:	b.w	91ac <isBusyTransferComplete()>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    9792:	ldr	r3, [pc, #24]	; (97ac <SdioCard::isBusy()+0x3c>)
    9794:	ldr	r0, [r3, #36]	; 0x24
    9796:	eor.w	r0, r0, #16777216	; 0x1000000
    979a:	ubfx	r0, r0, #24, #1
}
    979e:	bx	lr
    97a0:	.word	0x200147f4
    97a4:	.word	0x20015472
    97a8:	.word	0x20015475
    97ac:	.word	0x402c0000

000097b0 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    97b0:	push	{r3, r4, r5, lr}
    97b2:	mov	r5, r2
  if (!m_csd.v1.erase_blk_en) {
    97b4:	ldr	r2, [pc, #160]	; (9858 <SdioCard::erase(unsigned long, unsigned long)+0xa8>)
    97b6:	ldrb	r3, [r2, #10]
    97b8:	ands.w	r4, r3, #64	; 0x40
    97bc:	bne.n	97e4 <SdioCard::erase(unsigned long, unsigned long)+0x34>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    97be:	and.w	r3, r3, #63	; 0x3f
    97c2:	ldrb	r2, [r2, #11]
    97c4:	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    97c6:	orr.w	r3, r3, r2, lsr #7
    97ca:	adds	r2, r5, #1
    97cc:	orrs	r2, r1
    97ce:	tst	r3, r2
    97d0:	beq.n	97e4 <SdioCard::erase(unsigned long, unsigned long)+0x34>
  m_errorCode = code;
    97d2:	ldr	r3, [pc, #136]	; (985c <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    97d4:	movs	r2, #39	; 0x27
    97d6:	strb	r2, [r3, #0]
  m_errorLine = line;
    97d8:	movw	r2, #770	; 0x302
    97dc:	ldr	r3, [pc, #128]	; (9860 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    97de:	str	r2, [r3, #0]
}
    97e0:	mov	r0, r4
    97e2:	pop	{r3, r4, r5, pc}
  if (!m_highCapacity) {
    97e4:	ldr	r3, [pc, #124]	; (9864 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
    97e6:	ldrb	r3, [r3, #0]
    97e8:	cbnz	r3, 97ee <SdioCard::erase(unsigned long, unsigned long)+0x3e>
    firstSector <<= 9;
    97ea:	lsls	r1, r1, #9
    lastSector <<= 9;
    97ec:	lsls	r5, r5, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    97ee:	ldr	r0, [pc, #120]	; (9868 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
    97f0:	bl	945c <cardCommand(unsigned long, unsigned long)>
    97f4:	mov	r4, r0
    97f6:	cbnz	r0, 9806 <SdioCard::erase(unsigned long, unsigned long)+0x56>
  m_errorCode = code;
    97f8:	ldr	r3, [pc, #96]	; (985c <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    97fa:	movs	r2, #15
    97fc:	strb	r2, [r3, #0]
  m_errorLine = line;
    97fe:	movw	r2, #778	; 0x30a
    9802:	ldr	r3, [pc, #92]	; (9860 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9804:	b.n	97de <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    9806:	mov	r1, r5
    9808:	ldr	r0, [pc, #96]	; (986c <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
    980a:	bl	945c <cardCommand(unsigned long, unsigned long)>
    980e:	mov	r4, r0
    9810:	cbnz	r0, 9820 <SdioCard::erase(unsigned long, unsigned long)+0x70>
  m_errorCode = code;
    9812:	ldr	r3, [pc, #72]	; (985c <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9814:	movs	r2, #16
    9816:	strb	r2, [r3, #0]
  m_errorLine = line;
    9818:	movw	r2, #781	; 0x30d
    981c:	ldr	r3, [pc, #64]	; (9860 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    981e:	b.n	97de <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    9820:	movs	r1, #0
    9822:	ldr	r0, [pc, #76]	; (9870 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
    9824:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9828:	mov	r4, r0
    982a:	cbnz	r0, 983a <SdioCard::erase(unsigned long, unsigned long)+0x8a>
  m_errorCode = code;
    982c:	ldr	r3, [pc, #44]	; (985c <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    982e:	movs	r2, #17
    9830:	strb	r2, [r3, #0]
  m_errorLine = line;
    9832:	mov.w	r2, #784	; 0x310
    9836:	ldr	r3, [pc, #40]	; (9860 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9838:	b.n	97de <SdioCard::erase(unsigned long, unsigned long)+0x2e>
  if (waitTimeout(isBusyCMD13)) {
    983a:	ldr	r0, [pc, #56]	; (9874 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
    983c:	bl	92cc <waitTimeout(bool (*)())>
    9840:	cmp	r0, #0
    9842:	beq.n	97e0 <SdioCard::erase(unsigned long, unsigned long)+0x30>
  m_errorCode = code;
    9844:	ldr	r3, [pc, #20]	; (985c <SdioCard::erase(unsigned long, unsigned long)+0xac>)
    9846:	movs	r2, #40	; 0x28
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9848:	movs	r4, #0
  m_errorCode = code;
    984a:	strb	r2, [r3, #0]
  m_errorLine = line;
    984c:	movw	r2, #787	; 0x313
    9850:	ldr	r3, [pc, #12]	; (9860 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
    9852:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    9854:	b.n	97e0 <SdioCard::erase(unsigned long, unsigned long)+0x30>
    9856:	nop
    9858:	.word	0x20015486
    985c:	.word	0x2000230c
    9860:	.word	0x2000dfd8
    9864:	.word	0x20015474
    9868:	.word	0x201a0000
    986c:	.word	0x211a0000
    9870:	.word	0x261b0000
    9874:	.word	0x000094e5

00009878 <waitTransferComplete()>:
static bool waitTransferComplete() {
    9878:	push	{r4, lr}
  if (!m_transferActive) {
    987a:	ldr	r4, [pc, #60]	; (98b8 <waitTransferComplete()+0x40>)
    987c:	ldrb	r3, [r4, #0]
    987e:	cbnz	r3, 9884 <waitTransferComplete()+0xc>
    return true;
    9880:	movs	r0, #1
}
    9882:	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
    9884:	ldr	r0, [pc, #52]	; (98bc <waitTransferComplete()+0x44>)
    9886:	bl	92cc <waitTimeout(bool (*)())>
  m_transferActive = false;
    988a:	movs	r3, #0
  m_irqstat = SDHC_IRQSTAT;
    988c:	ldr	r2, [pc, #48]	; (98c0 <waitTransferComplete()+0x48>)
  m_transferActive = false;
    988e:	strb	r3, [r4, #0]
  m_irqstat = SDHC_IRQSTAT;
    9890:	ldr	r1, [r2, #48]	; 0x30
    9892:	ldr	r3, [pc, #48]	; (98c4 <waitTransferComplete()+0x4c>)
    9894:	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9896:	ldr	r1, [r3, #0]
    9898:	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    989a:	cbnz	r0, 98a4 <waitTransferComplete()+0x2c>
    989c:	ldr	r2, [r3, #0]
    989e:	ldr	r3, [pc, #40]	; (98c8 <waitTransferComplete()+0x50>)
    98a0:	tst	r2, r3
    98a2:	beq.n	9880 <waitTransferComplete()+0x8>
  m_errorCode = code;
    98a4:	ldr	r3, [pc, #36]	; (98cc <waitTransferComplete()+0x54>)
    98a6:	movs	r2, #31
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    98a8:	movs	r0, #0
  m_errorCode = code;
    98aa:	strb	r2, [r3, #0]
  m_errorLine = line;
    98ac:	movw	r2, #634	; 0x27a
    98b0:	ldr	r3, [pc, #28]	; (98d0 <waitTransferComplete()+0x58>)
    98b2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    98b4:	b.n	9882 <waitTransferComplete()+0xa>
    98b6:	nop
    98b8:	.word	0x20015475
    98bc:	.word	0x000091ad
    98c0:	.word	0x402c0000
    98c4:	.word	0x200147f8
    98c8:	.word	0x117f0000
    98cc:	.word	0x2000230c
    98d0:	.word	0x2000dfd8

000098d4 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    98d4:	push	{r4, r5, r6, r7, lr}
    98d6:	ldrb	r5, [r0, #8]
    98d8:	sub.w	sp, sp, #516	; 0x204
    98dc:	mov	r4, r0
    98de:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    98e0:	ands.w	r5, r5, #1
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    98e4:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    98e6:	beq.n	9920 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
    98e8:	lsls	r3, r2, #30
    98ea:	beq.n	98fa <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
    98ec:	mov	r1, r6
      ptr = aligned;
    98ee:	mov	r6, sp
      memcpy(aligned, src, 512);
    98f0:	mov.w	r2, #512	; 0x200
    98f4:	mov	r0, sp
    98f6:	bl	a254 <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    98fa:	movs	r3, #1
    98fc:	mov	r2, r6
    98fe:	mov	r1, r7
    9900:	ldr	r0, [pc, #104]	; (996c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>)
    9902:	bl	9580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9906:	mov	r5, r0
    9908:	cbnz	r0, 9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
    990a:	ldr	r3, [pc, #100]	; (9970 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9c>)
    990c:	movs	r2, #13
    990e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9910:	movw	r2, #1041	; 0x411
    9914:	ldr	r3, [pc, #92]	; (9974 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa0>)
    9916:	str	r2, [r3, #0]
}
    9918:	mov	r0, r5
    991a:	add.w	sp, sp, #516	; 0x204
    991e:	pop	{r4, r5, r6, r7, pc}
    if (!waitTransferComplete()) {
    9920:	bl	9878 <waitTransferComplete()>
    9924:	cmp	r0, #0
    9926:	beq.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    9928:	ldrb	r3, [r4, #9]
    992a:	cmp	r3, #2
    992c:	bne.n	9934 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x60>
    992e:	ldr	r3, [r4, #4]
    9930:	cmp	r3, r7
    9932:	beq.n	9954 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x80>
      if (!syncDevice()) {
    9934:	ldr	r3, [r4, #0]
    9936:	mov	r0, r4
    9938:	ldr	r3, [r3, #32]
    993a:	blx	r3
    993c:	cmp	r0, #0
    993e:	beq.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
    9940:	ldr	r3, [r4, #0]
    9942:	mov	r1, r7
    9944:	mov	r0, r4
    9946:	ldr	r3, [r3, #96]	; 0x60
    9948:	blx	r3
    994a:	cmp	r0, #0
    994c:	beq.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curState = WRITE_STATE;
    994e:	movs	r3, #2
      m_curSector = sector;
    9950:	str	r7, [r4, #4]
      m_curState = WRITE_STATE;
    9952:	strb	r3, [r4, #9]
    if (!writeData(src)) {
    9954:	ldr	r3, [r4, #0]
    9956:	mov	r1, r6
    9958:	mov	r0, r4
    995a:	ldr	r3, [r3, #92]	; 0x5c
    995c:	blx	r3
    995e:	cmp	r0, #0
    9960:	beq.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
    9962:	ldr	r3, [r4, #4]
  return true;
    9964:	mov	r5, r0
    m_curSector++;
    9966:	adds	r3, #1
    9968:	str	r3, [r4, #4]
    996a:	b.n	9918 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    996c:	.word	0x183a0001
    9970:	.word	0x2000230c
    9974:	.word	0x2000dfd8

00009978 <SdioCard::readStop()>:
bool SdioCard::readStop() {
    9978:	push	{r3, r4, r5, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    997a:	ldr	r4, [pc, #92]	; (99d8 <SdioCard::readStop()+0x60>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    997c:	movs	r1, #0
    997e:	ldr	r0, [pc, #92]	; (99dc <SdioCard::readStop()+0x64>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9980:	ldr	r3, [r4, #40]	; 0x28
    9982:	bic.w	r3, r3, #65536	; 0x10000
    9986:	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9988:	bl	945c <cardCommand(unsigned long, unsigned long)>
    998c:	mov	r5, r0
    998e:	cbnz	r0, 99a2 <SdioCard::readStop()+0x2a>
  m_errorCode = code;
    9990:	ldr	r3, [pc, #76]	; (99e0 <SdioCard::readStop()+0x68>)
    9992:	movs	r2, #9
    9994:	strb	r2, [r3, #0]
  m_errorLine = line;
    9996:	movw	r2, #573	; 0x23d
    999a:	ldr	r3, [pc, #72]	; (99e4 <SdioCard::readStop()+0x6c>)
    999c:	str	r2, [r3, #0]
}
    999e:	mov	r0, r5
    99a0:	pop	{r3, r4, r5, pc}
  if (yieldTimeout(isBusyDat)) {
    99a2:	ldr	r0, [pc, #68]	; (99e8 <SdioCard::readStop()+0x70>)
    99a4:	bl	92f0 <yieldTimeout(bool (*)())>
    99a8:	cbz	r0, 99bc <SdioCard::readStop()+0x44>
  m_errorCode = code;
    99aa:	ldr	r3, [pc, #52]	; (99e0 <SdioCard::readStop()+0x68>)
    99ac:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    99ae:	movs	r5, #0
  m_errorCode = code;
    99b0:	strb	r2, [r3, #0]
  m_errorLine = line;
    99b2:	mov.w	r2, #576	; 0x240
    99b6:	ldr	r3, [pc, #44]	; (99e4 <SdioCard::readStop()+0x6c>)
    99b8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
    99ba:	b.n	999e <SdioCard::readStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    99bc:	ldr	r3, [r4, #36]	; 0x24
    99be:	lsls	r3, r3, #30
    99c0:	bpl.n	999e <SdioCard::readStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
    99c2:	ldr	r1, [r4, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    99c4:	ldr	r3, [r4, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    99c6:	ldr	r2, [r4, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    99c8:	bic.w	r3, r3, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    99cc:	orr.w	r2, r2, #67108864	; 0x4000000
    99d0:	str	r2, [r4, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
    99d2:	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    99d4:	str	r3, [r4, #40]	; 0x28
    99d6:	b.n	999e <SdioCard::readStop()+0x26>
    99d8:	.word	0x402c0000
    99dc:	.word	0x0cdb0000
    99e0:	.word	0x2000230c
    99e4:	.word	0x2000dfd8
    99e8:	.word	0x00009165

000099ec <SdioCard::writeData(unsigned char const*)>:
bool SdioCard::writeData(const uint8_t* src) {
    99ec:	push	{r4, r5, r6, lr}
    99ee:	mov	r4, r1
  if (!waitTransferComplete()) {
    99f0:	bl	9878 <waitTransferComplete()>
    99f4:	mov	r5, r0
    99f6:	cbz	r0, 9a30 <SdioCard::writeData(unsigned char const*)+0x44>
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    99f8:	ldr	r3, [pc, #100]	; (9a60 <SdioCard::writeData(unsigned char const*)+0x74>)
    99fa:	ldr	r2, [r3, #36]	; 0x24
    99fc:	lsls	r2, r2, #23
    99fe:	bmi.n	9a10 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a00:	ldr	r2, [r3, #40]	; 0x28
    9a02:	bic.w	r2, r2, #65536	; 0x10000
    9a06:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9a08:	ldr	r2, [r3, #40]	; 0x28
    9a0a:	orr.w	r2, r2, #131072	; 0x20000
    9a0e:	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9a10:	ldr	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9a12:	ldr	r0, [pc, #80]	; (9a64 <SdioCard::writeData(unsigned char const*)+0x78>)
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9a14:	orr.w	r2, r2, #65536	; 0x10000
    9a18:	str	r2, [r3, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    9a1a:	bl	92cc <waitTimeout(bool (*)())>
    9a1e:	cbz	r0, 9a34 <SdioCard::writeData(unsigned char const*)+0x48>
  m_errorCode = code;
    9a20:	ldr	r3, [pc, #68]	; (9a68 <SdioCard::writeData(unsigned char const*)+0x7c>)
    9a22:	movs	r2, #33	; 0x21
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    9a24:	movs	r5, #0
  m_errorCode = code;
    9a26:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a28:	mov.w	r2, #1016	; 0x3f8
    9a2c:	ldr	r3, [pc, #60]	; (9a6c <SdioCard::writeData(unsigned char const*)+0x80>)
    9a2e:	str	r2, [r3, #0]
}
    9a30:	mov	r0, r5
    9a32:	pop	{r4, r5, r6, pc}
    9a34:	add.w	r1, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    9a38:	ldr	r2, [pc, #36]	; (9a60 <SdioCard::writeData(unsigned char const*)+0x74>)
    9a3a:	ldr	r3, [r2, #36]	; 0x24
    9a3c:	lsls	r3, r3, #21
    9a3e:	bpl.n	9a3a <SdioCard::writeData(unsigned char const*)+0x4e>
    9a40:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a42:	add.w	r0, r4, #60	; 0x3c
      SDHC_DATPORT = p32[i];
    9a46:	ldr.w	r6, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a4a:	cmp	r3, r0
      SDHC_DATPORT = p32[i];
    9a4c:	str	r6, [r2, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9a4e:	bne.n	9a46 <SdioCard::writeData(unsigned char const*)+0x5a>
    p32 += FIFO_WML;
    9a50:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9a52:	cmp	r4, r1
    9a54:	bne.n	9a3a <SdioCard::writeData(unsigned char const*)+0x4e>
  m_transferActive = true;
    9a56:	ldr	r3, [pc, #24]	; (9a70 <SdioCard::writeData(unsigned char const*)+0x84>)
    9a58:	movs	r2, #1
    9a5a:	strb	r2, [r3, #0]
  return true;
    9a5c:	b.n	9a30 <SdioCard::writeData(unsigned char const*)+0x44>
    9a5e:	nop
    9a60:	.word	0x402c0000
    9a64:	.word	0x00009199
    9a68:	.word	0x2000230c
    9a6c:	.word	0x2000dfd8
    9a70:	.word	0x20015475

00009a74 <SdioCard::writeStart(unsigned long)>:
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    9a74:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9a76:	ldr	r0, [pc, #80]	; (9ac8 <SdioCard::writeStart(unsigned long)+0x54>)
bool SdioCard::writeStart(uint32_t sector) {
    9a78:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9a7a:	bl	92f0 <yieldTimeout(bool (*)())>
    9a7e:	cbz	r0, 9a92 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
    9a80:	ldr	r3, [pc, #72]	; (9acc <SdioCard::writeStart(unsigned long)+0x58>)
    9a82:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9a84:	movs	r0, #0
  m_errorCode = code;
    9a86:	strb	r2, [r3, #0]
  m_errorLine = line;
    9a88:	movw	r2, #1099	; 0x44b
    9a8c:	ldr	r3, [pc, #64]	; (9ad0 <SdioCard::writeStart(unsigned long)+0x5c>)
    9a8e:	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    9a90:	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9a92:	ldr	r3, [pc, #64]	; (9ad4 <SdioCard::writeStart(unsigned long)+0x60>)
    9a94:	ldr	r2, [r3, #40]	; 0x28
    9a96:	bic.w	r2, r2, #65536	; 0x10000
    9a9a:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9a9c:	mov.w	r2, #512	; 0x200
    9aa0:	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9aa2:	ldr	r3, [pc, #52]	; (9ad8 <SdioCard::writeStart(unsigned long)+0x64>)
    9aa4:	ldrb	r3, [r3, #0]
    9aa6:	cbnz	r3, 9aaa <SdioCard::writeStart(unsigned long)+0x36>
    9aa8:	lsls	r4, r4, #9
    9aaa:	mov	r1, r4
    9aac:	ldr	r0, [pc, #44]	; (9adc <SdioCard::writeStart(unsigned long)+0x68>)
    9aae:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9ab2:	cmp	r0, #0
    9ab4:	bne.n	9a90 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
    9ab6:	ldr	r3, [pc, #20]	; (9acc <SdioCard::writeStart(unsigned long)+0x58>)
    9ab8:	movs	r2, #14
    9aba:	strb	r2, [r3, #0]
  m_errorLine = line;
    9abc:	movw	r2, #1111	; 0x457
    9ac0:	ldr	r3, [pc, #12]	; (9ad0 <SdioCard::writeStart(unsigned long)+0x5c>)
    9ac2:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
    9ac4:	b.n	9a90 <SdioCard::writeStart(unsigned long)+0x1c>
    9ac6:	nop
    9ac8:	.word	0x000094e5
    9acc:	.word	0x2000230c
    9ad0:	.word	0x2000dfd8
    9ad4:	.word	0x402c0000
    9ad8:	.word	0x20015474
    9adc:	.word	0x193a0020

00009ae0 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9ae0:	push	{r3, r4, r5, lr}
    9ae2:	mov	r4, r0
  if (waitTimeout(isBusyCMD13)) {
    9ae4:	ldr	r0, [pc, #96]	; (9b48 <cardCMD6(unsigned long, unsigned char*)+0x68>)
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    9ae6:	mov	r5, r1
  if (waitTimeout(isBusyCMD13)) {
    9ae8:	bl	92cc <waitTimeout(bool (*)())>
    9aec:	cbz	r0, 9b00 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
    9aee:	ldr	r3, [pc, #92]	; (9b4c <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9af0:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9af2:	movs	r0, #0
  m_errorCode = code;
    9af4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9af6:	mov.w	r2, #408	; 0x198
    9afa:	ldr	r3, [pc, #84]	; (9b50 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9afc:	str	r2, [r3, #0]
}
    9afe:	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
    9b00:	ldr	r3, [pc, #80]	; (9b54 <cardCMD6(unsigned long, unsigned char*)+0x74>)
    9b02:	movs	r2, #1
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b04:	mov	r1, r4
  m_dmaBusy = true;
    9b06:	strb	r2, [r3, #0]
  m_irqstat = 0;
    9b08:	ldr	r3, [pc, #76]	; (9b58 <cardCMD6(unsigned long, unsigned char*)+0x78>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9b0a:	ldr	r2, [pc, #80]	; (9b5c <cardCMD6(unsigned long, unsigned char*)+0x7c>)
  m_irqstat = 0;
    9b0c:	str	r0, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
    9b0e:	ldr	r3, [pc, #80]	; (9b60 <cardCMD6(unsigned long, unsigned char*)+0x80>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b10:	ldr	r0, [pc, #80]	; (9b64 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_DSADDR  = (uint32_t)status;
    9b12:	str	r5, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    9b14:	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    9b16:	ldr	r2, [pc, #80]	; (9b68 <cardCMD6(unsigned long, unsigned char*)+0x88>)
    9b18:	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    9b1a:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9b1e:	cbnz	r0, 9b30 <cardCMD6(unsigned long, unsigned char*)+0x50>
  m_errorCode = code;
    9b20:	ldr	r3, [pc, #40]	; (9b4c <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9b22:	movs	r2, #4
    9b24:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b26:	movw	r2, #415	; 0x19f
    9b2a:	ldr	r3, [pc, #36]	; (9b50 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9b2c:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
    9b2e:	b.n	9afe <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
    9b30:	bl	9550 <waitDmaStatus()>
    9b34:	cmp	r0, #0
    9b36:	bne.n	9afe <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
    9b38:	ldr	r3, [pc, #16]	; (9b4c <cardCMD6(unsigned long, unsigned char*)+0x6c>)
    9b3a:	movs	r2, #37	; 0x25
    9b3c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9b3e:	mov.w	r2, #418	; 0x1a2
    9b42:	ldr	r3, [pc, #12]	; (9b50 <cardCMD6(unsigned long, unsigned char*)+0x70>)
    9b44:	b.n	9b2c <cardCMD6(unsigned long, unsigned char*)+0x4c>
    9b46:	nop
    9b48:	.word	0x000094e5
    9b4c:	.word	0x2000230c
    9b50:	.word	0x2000dfd8
    9b54:	.word	0x20015536
    9b58:	.word	0x200147f8
    9b5c:	.word	0x00010040
    9b60:	.word	0x402c0000
    9b64:	.word	0x063a0011
    9b68:	.word	0x117f0002

00009b6c <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
    9b6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  m_curState = IDLE_STATE;
    9b70:	movs	r4, #0
  m_initDone = false;
    9b72:	ldr	r7, [pc, #524]	; (9d80 <SdioCard::begin(SdioConfig)+0x214>)
  m_errorCode = SD_CARD_ERROR_NONE;
    9b74:	ldr	r5, [pc, #524]	; (9d84 <SdioCard::begin(SdioConfig)+0x218>)
bool SdioCard::begin(SdioConfig sdioConfig) {
    9b76:	sub	sp, #68	; 0x44
  m_highCapacity = false;
    9b78:	ldr.w	r8, [pc, #584]	; 9dc4 <SdioCard::begin(SdioConfig)+0x258>
  m_version2 = false;
    9b7c:	ldr	r6, [pc, #520]	; (9d88 <SdioCard::begin(SdioConfig)+0x21c>)
  m_sdioConfig = sdioConfig;
    9b7e:	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
    9b80:	strb	r4, [r0, #9]
  m_initDone = false;
    9b82:	strb	r4, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
    9b84:	strb	r4, [r5, #0]
  m_highCapacity = false;
    9b86:	strb.w	r4, [r8]
  m_version2 = false;
    9b8a:	strb	r4, [r6, #0]
  initSDHC();
    9b8c:	bl	936c <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    9b90:	mov	r1, r4
    9b92:	mov	r0, r4
    9b94:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9b98:	mov	r4, r0
    9b9a:	cbnz	r0, 9bb0 <SdioCard::begin(SdioConfig)+0x44>
  m_errorCode = code;
    9b9c:	movs	r3, #1
  m_errorLine = line;
    9b9e:	movw	r2, #654	; 0x28e
  m_errorCode = code;
    9ba2:	strb	r3, [r5, #0]
  m_errorLine = line;
    9ba4:	ldr	r3, [pc, #484]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9ba6:	str	r2, [r3, #0]
}
    9ba8:	mov	r0, r4
    9baa:	add	sp, #68	; 0x44
    9bac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bb0:	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    9bb2:	ldr.w	r9, [pc, #532]	; 9dc8 <SdioCard::begin(SdioConfig)+0x25c>
    9bb6:	mov.w	r1, #426	; 0x1aa
    9bba:	mov	r0, r9
    9bbc:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9bc0:	cbz	r0, 9be4 <SdioCard::begin(SdioConfig)+0x78>
      if (SDHC_CMDRSP0 != 0X1AA) {
    9bc2:	ldr	r3, [pc, #460]	; (9d90 <SdioCard::begin(SdioConfig)+0x224>)
    9bc4:	ldr	r3, [r3, #16]
    9bc6:	cmp.w	r3, #426	; 0x1aa
    9bca:	beq.n	9bdc <SdioCard::begin(SdioConfig)+0x70>
  m_errorCode = code;
    9bcc:	movs	r3, #6
  m_errorLine = line;
    9bce:	mov.w	r2, #660	; 0x294
  m_errorCode = code;
    9bd2:	strb	r3, [r5, #0]
  m_errorLine = line;
    9bd4:	ldr	r3, [pc, #436]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    return sdError(SD_CARD_ERROR_ACMD6);
    9bd6:	movs	r4, #0
  m_errorLine = line;
    9bd8:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
    9bda:	b.n	9ba8 <SdioCard::begin(SdioConfig)+0x3c>
      m_version2 = true;
    9bdc:	movs	r3, #1
    9bde:	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9be0:	ldr	r6, [pc, #432]	; (9d94 <SdioCard::begin(SdioConfig)+0x228>)
    9be2:	b.n	9c04 <SdioCard::begin(SdioConfig)+0x98>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    9be4:	subs	r4, #1
    9be6:	bne.n	9bb6 <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
    9be8:	ldrb	r3, [r6, #0]
    9bea:	cmp	r3, #0
    9bec:	bne.n	9be0 <SdioCard::begin(SdioConfig)+0x74>
    initSDHC();
    9bee:	bl	936c <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
    9bf2:	mov	r1, r4
    9bf4:	mov	r0, r4
    9bf6:	bl	945c <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
    9bfa:	ldrb	r3, [r6, #0]
    9bfc:	cmp	r3, #0
    9bfe:	bne.n	9be0 <SdioCard::begin(SdioConfig)+0x74>
    9c00:	mov.w	r6, #3145728	; 0x300000
  int m = micros();
    9c04:	bl	b750 <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9c08:	ldr.w	r9, [pc, #428]	; 9db8 <SdioCard::begin(SdioConfig)+0x24c>
  int m = micros();
    9c0c:	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9c0e:	ldr.w	sl, [pc, #444]	; 9dcc <SdioCard::begin(SdioConfig)+0x260>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9c12:	ldr.w	fp, [pc, #444]	; 9dd0 <SdioCard::begin(SdioConfig)+0x264>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9c16:	movs	r1, #0
    9c18:	mov	r0, r9
    9c1a:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9c1e:	cbnz	r0, 9c2c <SdioCard::begin(SdioConfig)+0xc0>
  m_errorCode = code;
    9c20:	movs	r3, #23
  m_errorLine = line;
    9c22:	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
    9c26:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c28:	ldr	r3, [pc, #352]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9c2a:	b.n	9bd6 <SdioCard::begin(SdioConfig)+0x6a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9c2c:	mov	r1, r6
    9c2e:	mov	r0, sl
    9c30:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9c34:	cmp	r0, #0
    9c36:	beq.n	9c20 <SdioCard::begin(SdioConfig)+0xb4>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    9c38:	bl	b750 <micros>
    9c3c:	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    9c3e:	cmp	r0, fp
    9c40:	bhi.n	9c20 <SdioCard::begin(SdioConfig)+0xb4>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    9c42:	ldr	r3, [pc, #332]	; (9d90 <SdioCard::begin(SdioConfig)+0x224>)
    9c44:	ldr	r2, [r3, #16]
    9c46:	cmp	r2, #0
    9c48:	bge.n	9c16 <SdioCard::begin(SdioConfig)+0xaa>
  m_ocr = SDHC_CMDRSP0;
    9c4a:	ldr	r1, [r3, #16]
    9c4c:	ldr	r2, [pc, #328]	; (9d98 <SdioCard::begin(SdioConfig)+0x22c>)
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c4e:	ldr	r0, [pc, #332]	; (9d9c <SdioCard::begin(SdioConfig)+0x230>)
  m_ocr = SDHC_CMDRSP0;
    9c50:	str	r1, [r2, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c52:	movs	r1, #0
  if (SDHC_CMDRSP0 & 0x40000000) {
    9c54:	ldr	r3, [r3, #16]
    9c56:	lsls	r2, r3, #1
    m_highCapacity = true;
    9c58:	itt	mi
    9c5a:	movmi	r3, #1
    9c5c:	strbmi.w	r3, [r8]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    9c60:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9c64:	mov	r4, r0
    9c66:	cbnz	r0, 9c74 <SdioCard::begin(SdioConfig)+0x108>
  m_errorCode = code;
    9c68:	movs	r3, #2
  m_errorLine = line;
    9c6a:	movw	r2, #689	; 0x2b1
  m_errorCode = code;
    9c6e:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c70:	ldr	r3, [pc, #280]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9c72:	b.n	9ba6 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    9c74:	movs	r1, #0
    9c76:	ldr	r0, [pc, #296]	; (9da0 <SdioCard::begin(SdioConfig)+0x234>)
    9c78:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9c7c:	mov	r4, r0
    9c7e:	cbnz	r0, 9c8c <SdioCard::begin(SdioConfig)+0x120>
  m_errorCode = code;
    9c80:	movs	r3, #3
  m_errorLine = line;
    9c82:	mov.w	r2, #692	; 0x2b4
  m_errorCode = code;
    9c86:	strb	r3, [r5, #0]
  m_errorLine = line;
    9c88:	ldr	r3, [pc, #256]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9c8a:	b.n	9ba6 <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c8c:	ldr	r6, [pc, #256]	; (9d90 <SdioCard::begin(SdioConfig)+0x224>)
    9c8e:	ldr.w	r8, [pc, #324]	; 9dd4 <SdioCard::begin(SdioConfig)+0x268>
    9c92:	ldr	r3, [r6, #16]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9c94:	ldr	r1, [pc, #268]	; (9da4 <SdioCard::begin(SdioConfig)+0x238>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c96:	lsrs	r3, r3, #16
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9c98:	ldr	r0, [pc, #268]	; (9da8 <SdioCard::begin(SdioConfig)+0x23c>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    9c9a:	lsls	r3, r3, #16
    9c9c:	str.w	r3, [r8]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    9ca0:	bl	94f8 <readReg16(unsigned long, void*)>
    9ca4:	mov	r4, r0
    9ca6:	cbnz	r0, 9cb4 <SdioCard::begin(SdioConfig)+0x148>
  m_errorCode = code;
    9ca8:	movs	r3, #7
  m_errorLine = line;
    9caa:	movw	r2, #697	; 0x2b9
  m_errorCode = code;
    9cae:	strb	r3, [r5, #0]
  m_errorLine = line;
    9cb0:	ldr	r3, [pc, #216]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9cb2:	b.n	9ba6 <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    9cb4:	ldr	r1, [pc, #244]	; (9dac <SdioCard::begin(SdioConfig)+0x240>)
    9cb6:	ldr	r0, [pc, #248]	; (9db0 <SdioCard::begin(SdioConfig)+0x244>)
    9cb8:	bl	94f8 <readReg16(unsigned long, void*)>
    9cbc:	mov	r4, r0
    9cbe:	cbnz	r0, 9ccc <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
    9cc0:	movs	r3, #8
  m_errorLine = line;
    9cc2:	mov.w	r2, #700	; 0x2bc
  m_errorCode = code;
    9cc6:	strb	r3, [r5, #0]
  m_errorLine = line;
    9cc8:	ldr	r3, [pc, #192]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9cca:	b.n	9ba6 <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    9ccc:	ldr.w	r1, [r8]
    9cd0:	ldr	r0, [pc, #224]	; (9db4 <SdioCard::begin(SdioConfig)+0x248>)
    9cd2:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9cd6:	mov	r4, r0
    9cd8:	cbnz	r0, 9ce6 <SdioCard::begin(SdioConfig)+0x17a>
  m_errorCode = code;
    9cda:	movs	r3, #5
  m_errorLine = line;
    9cdc:	movw	r2, #703	; 0x2bf
  m_errorCode = code;
    9ce0:	strb	r3, [r5, #0]
  m_errorLine = line;
    9ce2:	ldr	r3, [pc, #168]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9ce4:	b.n	9ba6 <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    9ce6:	ldr.w	r1, [r8]
    9cea:	ldr	r0, [pc, #204]	; (9db8 <SdioCard::begin(SdioConfig)+0x24c>)
    9cec:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9cf0:	cbz	r0, 9d3a <SdioCard::begin(SdioConfig)+0x1ce>
    9cf2:	movs	r1, #2
    9cf4:	ldr	r0, [pc, #196]	; (9dbc <SdioCard::begin(SdioConfig)+0x250>)
    9cf6:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9cfa:	mov	r4, r0
    9cfc:	cbz	r0, 9d3a <SdioCard::begin(SdioConfig)+0x1ce>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9cfe:	ldr	r3, [r6, #40]	; 0x28
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9d00:	mov	r1, sp
    9d02:	mvn.w	r0, #4278190080	; 0xff000000
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    9d06:	bic.w	r3, r3, #6
    9d0a:	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    9d0c:	ldr	r3, [r6, #40]	; 0x28
    9d0e:	orr.w	r3, r3, #2
    9d12:	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    9d14:	mov.w	r3, #1048592	; 0x100010
    9d18:	str	r3, [r6, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
    9d1a:	bl	9ae0 <cardCMD6(unsigned long, unsigned char*)>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9d1e:	cbnz	r0, 9d46 <SdioCard::begin(SdioConfig)+0x1da>
  kHzSdClk = 25000;
    9d20:	movw	r2, #25000	; 0x61a8
    gpioMux(5);
    9d24:	movs	r0, #5
    9d26:	bl	911c <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
    9d2a:	mov	r0, r2
    9d2c:	bl	91c4 <setSdclk(unsigned long)>
  if (enable) {
    9d30:	bl	933c <enableGPIO(bool) [clone .part.0]>
  m_initDone = true;
    9d34:	movs	r3, #1
    9d36:	strb	r3, [r7, #0]
  return true;
    9d38:	b.n	9ba8 <SdioCard::begin(SdioConfig)+0x3c>
  m_errorCode = code;
    9d3a:	movs	r3, #20
  m_errorLine = line;
    9d3c:	movw	r2, #707	; 0x2c3
  m_errorCode = code;
    9d40:	strb	r3, [r5, #0]
  m_errorLine = line;
    9d42:	ldr	r3, [pc, #72]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    9d44:	b.n	9bd6 <SdioCard::begin(SdioConfig)+0x6a>
  if (highSpeedModeAsk && highspeedModeSupported) {
    9d46:	ldrb.w	r3, [sp, #13]
    9d4a:	lsls	r3, r3, #30
    9d4c:	bpl.n	9d20 <SdioCard::begin(SdioConfig)+0x1b4>
    uint32_t m_errorLine_before = m_errorLine;
    9d4e:	ldr	r6, [pc, #60]	; (9d8c <SdioCard::begin(SdioConfig)+0x220>)
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9d50:	mov	r1, sp
    9d52:	ldr	r0, [pc, #108]	; (9dc0 <SdioCard::begin(SdioConfig)+0x254>)
    uint8_t err_code_before = m_errorCode;
    9d54:	ldrb.w	r9, [r5]
    uint32_t m_errorLine_before = m_errorLine;
    9d58:	ldr.w	r8, [r6]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
    9d5c:	bl	9ae0 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
    9d60:	ldrb.w	r3, [sp, #16]
    if (switchRequestAsk && switchRequestDone) {
    9d64:	cbz	r0, 9d6e <SdioCard::begin(SdioConfig)+0x202>
    9d66:	and.w	r3, r3, #15
    9d6a:	cmp	r3, #1
    9d6c:	beq.n	9d78 <SdioCard::begin(SdioConfig)+0x20c>
      m_errorCode = err_code_before;
    9d6e:	strb.w	r9, [r5]
      m_errorLine = m_errorLine_before;
    9d72:	str.w	r8, [r6]
    9d76:	b.n	9d20 <SdioCard::begin(SdioConfig)+0x1b4>
      kHzSdClk = 50000;
    9d78:	movw	r2, #50000	; 0xc350
    9d7c:	b.n	9d24 <SdioCard::begin(SdioConfig)+0x1b8>
    9d7e:	nop
    9d80:	.word	0x20015472
    9d84:	.word	0x2000230c
    9d88:	.word	0x20015473
    9d8c:	.word	0x2000dfd8
    9d90:	.word	0x402c0000
    9d94:	.word	0x40300000
    9d98:	.word	0x200141ec
    9d9c:	.word	0x02090000
    9da0:	.word	0x031a0000
    9da4:	.word	0x20015486
    9da8:	.word	0x09090000
    9dac:	.word	0x20015476
    9db0:	.word	0x0a090000
    9db4:	.word	0x071b0000
    9db8:	.word	0x371a0000
    9dbc:	.word	0x061a0000
    9dc0:	.word	0x80fffff1
    9dc4:	.word	0x20015474
    9dc8:	.word	0x081a0000
    9dcc:	.word	0x29020000
    9dd0:	.word	0x000f4240
    9dd4:	.word	0x200141f0

00009dd8 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
    9dd8:	push	{r3, r4, r5, lr}
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9dda:	ldr	r3, [pc, #148]	; (9e70 <SdioCard::readData(unsigned char*)+0x98>)
bool SdioCard::readData(uint8_t* dst) {
    9ddc:	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    9dde:	ldr	r2, [r3, #36]	; 0x24
    9de0:	lsls	r0, r2, #22
    9de2:	bmi.n	9e00 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9de4:	ldr	r2, [r3, #40]	; 0x28
    9de6:	bic.w	r2, r2, #65536	; 0x10000
    9dea:	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    9dec:	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    9dee:	ldr	r2, [r3, #40]	; 0x28
    9df0:	orr.w	r2, r2, #131072	; 0x20000
    9df4:	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9df6:	ldr	r2, [r3, #40]	; 0x28
    9df8:	orr.w	r2, r2, #65536	; 0x10000
    9dfc:	str	r2, [r3, #40]	; 0x28
    interrupts();
    9dfe:	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
    9e00:	ldr	r0, [pc, #112]	; (9e74 <SdioCard::readData(unsigned char*)+0x9c>)
    9e02:	bl	92cc <waitTimeout(bool (*)())>
    9e06:	cbz	r0, 9e1a <SdioCard::readData(unsigned char*)+0x42>
  m_errorCode = code;
    9e08:	ldr	r3, [pc, #108]	; (9e78 <SdioCard::readData(unsigned char*)+0xa0>)
    9e0a:	movs	r2, #26
    9e0c:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e0e:	movw	r2, #854	; 0x356
    9e12:	ldr	r3, [pc, #104]	; (9e7c <SdioCard::readData(unsigned char*)+0xa4>)
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    9e14:	movs	r0, #0
  m_errorLine = line;
    9e16:	str	r2, [r3, #0]
}
    9e18:	pop	{r3, r4, r5, pc}
    9e1a:	add.w	r2, r4, #512	; 0x200
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    9e1e:	ldr	r5, [pc, #80]	; (9e70 <SdioCard::readData(unsigned char*)+0x98>)
    9e20:	ldr	r3, [r5, #36]	; 0x24
    9e22:	lsls	r1, r3, #20
    9e24:	bpl.n	9e20 <SdioCard::readData(unsigned char*)+0x48>
    9e26:	subs	r3, r4, #4
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9e28:	add.w	r1, r4, #60	; 0x3c
      p32[i] = SDHC_DATPORT;
    9e2c:	ldr	r0, [r5, #32]
    9e2e:	str.w	r0, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    9e32:	cmp	r3, r1
    9e34:	bne.n	9e2c <SdioCard::readData(unsigned char*)+0x54>
    p32 += FIFO_WML;
    9e36:	adds	r4, #64	; 0x40
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    9e38:	cmp	r4, r2
    9e3a:	bne.n	9e20 <SdioCard::readData(unsigned char*)+0x48>
  if (waitTimeout(isBusyTransferComplete)) {
    9e3c:	ldr	r0, [pc, #64]	; (9e80 <SdioCard::readData(unsigned char*)+0xa8>)
    9e3e:	bl	92cc <waitTimeout(bool (*)())>
    9e42:	cbz	r0, 9e52 <SdioCard::readData(unsigned char*)+0x7a>
  m_errorCode = code;
    9e44:	ldr	r3, [pc, #48]	; (9e78 <SdioCard::readData(unsigned char*)+0xa0>)
    9e46:	movs	r2, #29
    9e48:	strb	r2, [r3, #0]
  m_errorLine = line;
    9e4a:	movw	r2, #865	; 0x361
    9e4e:	ldr	r3, [pc, #44]	; (9e7c <SdioCard::readData(unsigned char*)+0xa4>)
    9e50:	b.n	9e14 <SdioCard::readData(unsigned char*)+0x3c>
  m_irqstat = SDHC_IRQSTAT;
    9e52:	ldr	r2, [r5, #48]	; 0x30
    9e54:	ldr	r3, [pc, #44]	; (9e84 <SdioCard::readData(unsigned char*)+0xac>)
    9e56:	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    9e58:	ldr	r2, [r3, #0]
    9e5a:	str	r2, [r5, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    9e5c:	ldr	r2, [r3, #0]
    9e5e:	lsls	r2, r2, #30
    9e60:	bpl.n	9e18 <SdioCard::readData(unsigned char*)+0x40>
    9e62:	ldr	r2, [r3, #0]
    9e64:	ldr	r3, [pc, #32]	; (9e88 <SdioCard::readData(unsigned char*)+0xb0>)
    9e66:	tst	r2, r3
    9e68:	ite	eq
    9e6a:	moveq	r0, #1
    9e6c:	movne	r0, #0
    9e6e:	b.n	9e18 <SdioCard::readData(unsigned char*)+0x40>
    9e70:	.word	0x402c0000
    9e74:	.word	0x00009185
    9e78:	.word	0x2000230c
    9e7c:	.word	0x2000dfd8
    9e80:	.word	0x000091ad
    9e84:	.word	0x200147f8
    9e88:	.word	0x117f0000

00009e8c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
    9e8c:	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    9e8e:	ldr	r0, [pc, #80]	; (9ee0 <SdioCard::readStart(unsigned long)+0x54>)
bool SdioCard::readStart(uint32_t sector) {
    9e90:	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    9e92:	bl	92f0 <yieldTimeout(bool (*)())>
    9e96:	cbz	r0, 9eaa <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
    9e98:	ldr	r3, [pc, #72]	; (9ee4 <SdioCard::readStart(unsigned long)+0x58>)
    9e9a:	movs	r2, #10
    return sdError(SD_CARD_ERROR_CMD13);
    9e9c:	movs	r0, #0
  m_errorCode = code;
    9e9e:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ea0:	movw	r2, #945	; 0x3b1
    9ea4:	ldr	r3, [pc, #64]	; (9ee8 <SdioCard::readStart(unsigned long)+0x5c>)
    9ea6:	str	r2, [r3, #0]
}
    9ea8:	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    9eaa:	ldr	r3, [pc, #64]	; (9eec <SdioCard::readStart(unsigned long)+0x60>)
    9eac:	ldr	r2, [r3, #40]	; 0x28
    9eae:	orr.w	r2, r2, #65536	; 0x10000
    9eb2:	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    9eb4:	mov.w	r2, #512	; 0x200
    9eb8:	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    9eba:	ldr	r3, [pc, #52]	; (9ef0 <SdioCard::readStart(unsigned long)+0x64>)
    9ebc:	ldrb	r3, [r3, #0]
    9ebe:	cbnz	r3, 9ec2 <SdioCard::readStart(unsigned long)+0x36>
    9ec0:	lsls	r4, r4, #9
    9ec2:	mov	r1, r4
    9ec4:	ldr	r0, [pc, #44]	; (9ef4 <SdioCard::readStart(unsigned long)+0x68>)
    9ec6:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9eca:	cmp	r0, #0
    9ecc:	bne.n	9ea8 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
    9ece:	ldr	r3, [pc, #20]	; (9ee4 <SdioCard::readStart(unsigned long)+0x58>)
    9ed0:	movs	r2, #12
    9ed2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9ed4:	movw	r2, #957	; 0x3bd
    9ed8:	ldr	r3, [pc, #12]	; (9ee8 <SdioCard::readStart(unsigned long)+0x5c>)
    9eda:	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
    9edc:	b.n	9ea8 <SdioCard::readStart(unsigned long)+0x1c>
    9ede:	nop
    9ee0:	.word	0x000094e5
    9ee4:	.word	0x2000230c
    9ee8:	.word	0x2000dfd8
    9eec:	.word	0x402c0000
    9ef0:	.word	0x20015474
    9ef4:	.word	0x123a0030

00009ef8 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9ef8:	push	{r4, r5, r6, r7, lr}
    9efa:	ldrb	r5, [r0, #8]
    9efc:	sub.w	sp, sp, #516	; 0x204
    9f00:	mov	r4, r0
    9f02:	mov	r7, r1
  if (m_sdioConfig.useDma()) {
    9f04:	ands.w	r5, r5, #1
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    9f08:	mov	r6, r2
  if (m_sdioConfig.useDma()) {
    9f0a:	beq.n	9f4c <SdioCard::readSector(unsigned long, unsigned char*)+0x54>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9f0c:	lsls	r3, r2, #30
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9f0e:	ldr	r0, [pc, #132]	; (9f94 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>)
    9f10:	mov.w	r3, #1
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    9f14:	ite	eq
    9f16:	moveq	r4, r2
    9f18:	movne	r4, sp
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    9f1a:	mov	r2, r4
    9f1c:	bl	9580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    9f20:	mov	r5, r0
    9f22:	cbnz	r0, 9f3a <SdioCard::readSector(unsigned long, unsigned char*)+0x42>
  m_errorCode = code;
    9f24:	ldr	r3, [pc, #112]	; (9f98 <SdioCard::readSector(unsigned long, unsigned char*)+0xa0>)
    9f26:	movs	r2, #11
    9f28:	strb	r2, [r3, #0]
  m_errorLine = line;
    9f2a:	mov.w	r2, #884	; 0x374
    9f2e:	ldr	r3, [pc, #108]	; (9f9c <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
    9f30:	str	r2, [r3, #0]
}
    9f32:	mov	r0, r5
    9f34:	add.w	sp, sp, #516	; 0x204
    9f38:	pop	{r4, r5, r6, r7, pc}
    if (ptr != dst) {
    9f3a:	cmp	r4, r6
    9f3c:	beq.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      memcpy(dst, aligned, 512);
    9f3e:	mov.w	r2, #512	; 0x200
    9f42:	mov	r1, sp
    9f44:	mov	r0, r6
    9f46:	bl	a254 <memcpy>
    9f4a:	b.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (!waitTransferComplete()) {
    9f4c:	bl	9878 <waitTransferComplete()>
    9f50:	cmp	r0, #0
    9f52:	beq.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    if (m_curState != READ_STATE || sector != m_curSector) {
    9f54:	ldrb	r3, [r4, #9]
    9f56:	cmp	r3, #1
    9f58:	bne.n	9f60 <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    9f5a:	ldr	r3, [r4, #4]
    9f5c:	cmp	r3, r7
    9f5e:	beq.n	9f7e <SdioCard::readSector(unsigned long, unsigned char*)+0x86>
      if (!syncDevice()) {
    9f60:	ldr	r3, [r4, #0]
    9f62:	mov	r0, r4
    9f64:	ldr	r3, [r3, #32]
    9f66:	blx	r3
    9f68:	cmp	r0, #0
    9f6a:	beq.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      if (!readStart(sector)) {
    9f6c:	mov	r1, r7
    9f6e:	mov	r0, r4
    9f70:	bl	9e8c <SdioCard::readStart(unsigned long)>
    9f74:	cmp	r0, #0
    9f76:	beq.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
      m_curState = READ_STATE;
    9f78:	movs	r3, #1
      m_curSector = sector;
    9f7a:	str	r7, [r4, #4]
      m_curState = READ_STATE;
    9f7c:	strb	r3, [r4, #9]
    if (!readData(dst)) {
    9f7e:	mov	r1, r6
    9f80:	mov	r0, r4
    9f82:	bl	9dd8 <SdioCard::readData(unsigned char*)>
    9f86:	cmp	r0, #0
    9f88:	beq.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    m_curSector++;
    9f8a:	ldr	r3, [r4, #4]
  return true;
    9f8c:	mov	r5, r0
    m_curSector++;
    9f8e:	adds	r3, #1
    9f90:	str	r3, [r4, #4]
    9f92:	b.n	9f32 <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    9f94:	.word	0x113a0011
    9f98:	.word	0x2000230c
    9f9c:	.word	0x2000dfd8

00009fa0 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
    9fa0:	push	{r4, r5, r6, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9fa2:	ldr	r2, [pc, #76]	; (9ff0 <SdioCard::stopTransmission(bool)+0x50>)
  m_curState = IDLE_STATE;
    9fa4:	movs	r5, #0
bool SdioCard::stopTransmission(bool blocking) {
    9fa6:	mov	r6, r1
  m_curState = IDLE_STATE;
    9fa8:	strb	r5, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9faa:	mov	r1, r5
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9fac:	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9fae:	ldr	r0, [pc, #68]	; (9ff4 <SdioCard::stopTransmission(bool)+0x54>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    9fb0:	bic.w	r3, r3, #65536	; 0x10000
    9fb4:	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    9fb6:	bl	945c <cardCommand(unsigned long, unsigned long)>
    9fba:	mov	r4, r0
    9fbc:	cbnz	r0, 9fd0 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
    9fbe:	ldr	r3, [pc, #56]	; (9ff8 <SdioCard::stopTransmission(bool)+0x58>)
    9fc0:	movs	r2, #9
    9fc2:	strb	r2, [r3, #0]
  m_errorLine = line;
    9fc4:	movw	r2, #979	; 0x3d3
    9fc8:	ldr	r3, [pc, #48]	; (9ffc <SdioCard::stopTransmission(bool)+0x5c>)
    9fca:	str	r2, [r3, #0]
}
    9fcc:	mov	r0, r4
    9fce:	pop	{r4, r5, r6, pc}
  if (blocking) {
    9fd0:	cmp	r6, #0
    9fd2:	beq.n	9fcc <SdioCard::stopTransmission(bool)+0x2c>
    if (yieldTimeout(isBusyDat)) {
    9fd4:	ldr	r0, [pc, #40]	; (a000 <SdioCard::stopTransmission(bool)+0x60>)
    9fd6:	bl	92f0 <yieldTimeout(bool (*)())>
    9fda:	cmp	r0, #0
    9fdc:	beq.n	9fcc <SdioCard::stopTransmission(bool)+0x2c>
  m_errorCode = code;
    9fde:	ldr	r3, [pc, #24]	; (9ff8 <SdioCard::stopTransmission(bool)+0x58>)
    9fe0:	movs	r2, #10
      return sdError(SD_CARD_ERROR_CMD13);
    9fe2:	mov	r4, r5
  m_errorCode = code;
    9fe4:	strb	r2, [r3, #0]
  m_errorLine = line;
    9fe6:	movw	r2, #983	; 0x3d7
    9fea:	ldr	r3, [pc, #16]	; (9ffc <SdioCard::stopTransmission(bool)+0x5c>)
    9fec:	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
    9fee:	b.n	9fcc <SdioCard::stopTransmission(bool)+0x2c>
    9ff0:	.word	0x402c0000
    9ff4:	.word	0x0cdb0000
    9ff8:	.word	0x2000230c
    9ffc:	.word	0x2000dfd8
    a000:	.word	0x00009165

0000a004 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
    a004:	push	{r4, lr}
    a006:	mov	r4, r0
  if (!waitTransferComplete()) {
    a008:	bl	9878 <waitTransferComplete()>
    a00c:	cbz	r0, a01e <SdioCard::syncDevice()+0x1a>
  if (m_curState != IDLE_STATE) {
    a00e:	ldrb	r3, [r4, #9]
    a010:	cbz	r3, a01e <SdioCard::syncDevice()+0x1a>
    return stopTransmission(true);
    a012:	mov	r0, r4
    a014:	movs	r1, #1
}
    a016:	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
    a01a:	b.w	9fa0 <SdioCard::stopTransmission(bool)>
}
    a01e:	pop	{r4, pc}

0000a020 <SPIClass::transfer(unsigned char) [clone .isra.0]>:
		port().TDR = data;
    a020:	str	r1, [r0, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    a022:	ldr	r3, [r0, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    a024:	tst.w	r3, #2031616	; 0x1f0000
    a028:	beq.n	a022 <SPIClass::transfer(unsigned char) [clone .isra.0]+0x2>
    a02a:	ldr	r0, [r0, #116]	; 0x74
	}
    a02c:	uxtb	r0, r0
    a02e:	bx	lr

0000a030 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    a030:	push	{r0, r1, r2, r4, r5, lr}
    a032:	add	r3, sp, #8
    a034:	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    a038:	ldrb	r2, [r0, #19]
    a03a:	mov	r3, r1
    a03c:	cmp	r2, #0
    a03e:	beq.n	a0b4 <SPIClass::beginTransaction(SPISettings)+0x84>
			__disable_irq();
    a040:	cpsid	i
			if (interruptMasksUsed & 0x01) {
    a042:	ldrb	r2, [r0, #19]
    a044:	lsls	r1, r2, #31
    a046:	bpl.n	a05a <SPIClass::beginTransaction(SPISettings)+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    a048:	mov.w	r4, #3758153728	; 0xe000e000
    a04c:	ldr	r5, [r0, #20]
    a04e:	ldr.w	r1, [r4, #384]	; 0x180
    a052:	ands	r1, r5
    a054:	str	r1, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    a056:	str.w	r1, [r4, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    a05a:	lsls	r5, r2, #30
    a05c:	bpl.n	a070 <SPIClass::beginTransaction(SPISettings)+0x40>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    a05e:	mov.w	r4, #3758153728	; 0xe000e000
    a062:	ldr	r5, [r0, #24]
    a064:	ldr.w	r1, [r4, #388]	; 0x184
    a068:	ands	r1, r5
    a06a:	str	r1, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    a06c:	str.w	r1, [r4, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    a070:	lsls	r4, r2, #29
    a072:	bpl.n	a086 <SPIClass::beginTransaction(SPISettings)+0x56>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    a074:	mov.w	r4, #3758153728	; 0xe000e000
    a078:	ldr	r5, [r0, #28]
    a07a:	ldr.w	r1, [r4, #392]	; 0x188
    a07e:	ands	r1, r5
    a080:	str	r1, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    a082:	str.w	r1, [r4, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    a086:	lsls	r1, r2, #28
    a088:	bpl.n	a09c <SPIClass::beginTransaction(SPISettings)+0x6c>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    a08a:	mov.w	r4, #3758153728	; 0xe000e000
    a08e:	ldr	r5, [r0, #32]
    a090:	ldr.w	r1, [r4, #396]	; 0x18c
    a094:	ands	r1, r5
    a096:	str	r1, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    a098:	str.w	r1, [r4, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    a09c:	lsls	r2, r2, #27
    a09e:	bpl.n	a0b2 <SPIClass::beginTransaction(SPISettings)+0x82>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    a0a0:	mov.w	r1, #3758153728	; 0xe000e000
    a0a4:	ldr	r4, [r0, #36]	; 0x24
    a0a6:	ldr.w	r2, [r1, #400]	; 0x190
    a0aa:	ands	r2, r4
    a0ac:	str	r2, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    a0ae:	str.w	r2, [r1, #400]	; 0x190
			__enable_irq();
    a0b2:	cpsie	i
		if (settings.clock() != _clock) {
    a0b4:	ldr	r2, [r0, #8]
    a0b6:	cmp	r3, r2
    a0b8:	beq.n	a108 <SPIClass::beginTransaction(SPISettings)+0xd8>
			uint32_t cbcmr = CCM_CBCMR;
    a0ba:	ldr	r2, [pc, #112]	; (a12c <SPIClass::beginTransaction(SPISettings)+0xfc>)
		    _clock = settings.clock();
    a0bc:	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    a0be:	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a0c0:	ldr	r1, [pc, #108]	; (a130 <SPIClass::beginTransaction(SPISettings)+0x100>)
    a0c2:	ubfx	r4, r2, #4, #2
    a0c6:	ubfx	r2, r2, #26, #3
    a0ca:	ldr.w	r4, [r1, r4, lsl #2]
    a0ce:	adds	r2, #1
    a0d0:	udiv	r1, r4, r2
			d = _clock ? clkhz/_clock : clkhz;
    a0d4:	cbz	r3, a122 <SPIClass::beginTransaction(SPISettings)+0xf2>
			if (d && clkhz/d > _clock) d++;
    a0d6:	cmp	r3, r1
    a0d8:	bhi.n	a0f2 <SPIClass::beginTransaction(SPISettings)+0xc2>
			d = _clock ? clkhz/_clock : clkhz;
    a0da:	udiv	r2, r1, r3
			if (d && clkhz/d > _clock) d++;
    a0de:	udiv	r1, r1, r2
    a0e2:	cmp	r3, r1
    a0e4:	bcs.n	a0e8 <SPIClass::beginTransaction(SPISettings)+0xb8>
    a0e6:	adds	r2, #1
			if (d > 257) d= 257;  // max div
    a0e8:	cmp.w	r2, #258	; 0x102
    a0ec:	bcs.n	a0f6 <SPIClass::beginTransaction(SPISettings)+0xc6>
			if (d > 2) {
    a0ee:	cmp	r2, #2
    a0f0:	bhi.n	a0fa <SPIClass::beginTransaction(SPISettings)+0xca>
				div =0;
    a0f2:	movs	r3, #0
    a0f4:	b.n	a0fc <SPIClass::beginTransaction(SPISettings)+0xcc>
			if (d > 257) d= 257;  // max div
    a0f6:	movw	r2, #257	; 0x101
				div = d-2;
    a0fa:	subs	r3, r2, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    a0fc:	lsrs	r1, r3, #1
    a0fe:	lsls	r2, r1, #16
    a100:	orr.w	r2, r2, r1, lsl #8
    a104:	orrs	r3, r2
    a106:	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    a108:	ldr	r3, [r0, #0]
		port().CR = 0;
    a10a:	movs	r2, #0
    a10c:	str	r2, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    a10e:	movs	r2, #3
    a110:	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    a112:	ldr	r2, [r0, #12]
    a114:	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    a116:	ldr	r2, [sp, #4]
    a118:	str	r2, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    a11a:	movs	r2, #1
    a11c:	str	r2, [r3, #16]
	}
    a11e:	add	sp, #12
    a120:	pop	{r4, r5, pc}
			if (d && clkhz/d > _clock) d++;
    a122:	cmp	r4, r2
    a124:	bcc.n	a0fc <SPIClass::beginTransaction(SPISettings)+0xcc>
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    a126:	mov	r2, r1
    a128:	b.n	a0e6 <SPIClass::beginTransaction(SPISettings)+0xb6>
    a12a:	nop
    a12c:	.word	0x400fc000
    a130:	.word	0x20000604

0000a134 <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    a134:	ldrd	r1, r2, [r0, #4]
void SdSpiArduinoDriver::activate() {
    a138:	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
    a13a:	ldr	r0, [r0, #0]
    a13c:	bl	a030 <SPIClass::beginTransaction(SPISettings)>
}
    a140:	pop	{r3, pc}

0000a142 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    a142:	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
    a144:	ldrb	r2, [r3, #19]
    a146:	cbz	r2, a18e <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    a148:	lsls	r0, r2, #31
    a14a:	bpl.n	a156 <SdSpiArduinoDriver::deactivate()+0x14>
    a14c:	ldr	r0, [r3, #40]	; 0x28
    a14e:	mov.w	r1, #3758153728	; 0xe000e000
    a152:	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    a156:	lsls	r1, r2, #30
    a158:	bpl.n	a164 <SdSpiArduinoDriver::deactivate()+0x22>
    a15a:	ldr	r0, [r3, #44]	; 0x2c
    a15c:	mov.w	r1, #3758153728	; 0xe000e000
    a160:	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    a164:	lsls	r0, r2, #29
    a166:	bpl.n	a172 <SdSpiArduinoDriver::deactivate()+0x30>
    a168:	ldr	r0, [r3, #48]	; 0x30
    a16a:	mov.w	r1, #3758153728	; 0xe000e000
    a16e:	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    a172:	lsls	r1, r2, #28
    a174:	bpl.n	a180 <SdSpiArduinoDriver::deactivate()+0x3e>
    a176:	ldr	r0, [r3, #52]	; 0x34
    a178:	mov.w	r1, #3758153728	; 0xe000e000
    a17c:	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    a180:	lsls	r2, r2, #27
    a182:	bpl.n	a18e <SdSpiArduinoDriver::deactivate()+0x4c>
    a184:	ldr	r2, [r3, #56]	; 0x38
    a186:	mov.w	r3, #3758153728	; 0xe000e000
    a18a:	str.w	r2, [r3, #272]	; 0x110
}
    a18e:	bx	lr

0000a190 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
    a190:	ldr	r0, [r0, #0]
    a192:	b.w	4fd6 <SPIClass::end()>

0000a196 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
    a196:	ldr	r3, [r0, #0]
    a198:	movs	r1, #255	; 0xff
    a19a:	ldr	r0, [r3, #0]
    a19c:	b.w	a020 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a1a0 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a1a0:	push	{r0, r1, r2, r4, r5, lr}
    a1a2:	mov	r4, r1
    a1a4:	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    a1a6:	movs	r1, #255	; 0xff
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    a1a8:	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
    a1aa:	mov	r0, r4
    a1ac:	bl	a210 <memset>
		transfer(buf, buf, count);
    a1b0:	ldr	r0, [r5, #0]
    a1b2:	ldr	r3, [sp, #4]
    a1b4:	mov	r2, r4
    a1b6:	mov	r1, r4
    a1b8:	bl	4f80 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    a1bc:	movs	r0, #0
    a1be:	add	sp, #12
    a1c0:	pop	{r4, r5, pc}

0000a1c2 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
    a1c2:	ldr	r3, [r0, #0]
    a1c4:	ldr	r0, [r3, #0]
    a1c6:	b.w	a020 <SPIClass::transfer(unsigned char) [clone .isra.0]>

0000a1ca <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    a1ca:	subs	r3, r2, #1
    a1cc:	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    a1d0:	push	{r4, r5, r6, lr}
    a1d2:	mov	r6, r0
    a1d4:	sub.w	sp, sp, #512	; 0x200
    a1d8:	mov	r4, r1
    a1da:	mov	r5, r2
  if (0 < count && count <= 512) {
    a1dc:	bcc.n	a1f2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x28>
    a1de:	add	r5, r1
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    a1e0:	cmp	r4, r5
    a1e2:	beq.n	a204 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    m_spi->transfer(buf[i]);
    a1e4:	ldr	r3, [r6, #0]
    a1e6:	ldrb.w	r1, [r4], #1
    a1ea:	ldr	r0, [r3, #0]
    a1ec:	bl	a020 <SPIClass::transfer(unsigned char) [clone .isra.0]>
  for (size_t i = 0; i < count; i++) {
    a1f0:	b.n	a1e0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x16>
    memcpy(tmp, buf, count);
    a1f2:	mov	r0, sp
    a1f4:	bl	a254 <memcpy>
    a1f8:	mov	r2, sp
    a1fa:	mov	r3, r5
    a1fc:	ldr	r0, [r6, #0]
    a1fe:	mov	r1, r2
    a200:	bl	4f80 <SPIClass::transfer(void const*, void*, unsigned int)>
  }
}
    a204:	add.w	sp, sp, #512	; 0x200
    a208:	pop	{r4, r5, r6, pc}

0000a20a <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    a20a:	b.w	beec <digitalWrite>
	...

0000a210 <memset>:
	.type	memset, %function
	.thumb_func
	memset:
//FUNCTION(memset)
    // save the original pointer
    push    { r0, lr }
    a210:	push	{r0, lr}

    // check for zero length
    cbz     r2, .L_done
    a212:	cbz	r2, a250 <memset+0x40>

    // short memsets aren't worth optimizing and make sure we have
    // enough headroom to try to do dwordwise move optimization
    cmp     r2, #16
    a214:	cmp	r2, #16
    blt     .L_bytewise
    a216:	blt.n	a248 <memset+0x38>

    // see how many bytes we need to move to align to dword boundaries
    and     r3, r0, #7
    a218:	and.w	r3, r0, #7
    cbz     r3, .L_prepare_dwordwise
    a21c:	cbz	r3, a22c <memset+0x1c>
    rsb     r3, #8
    a21e:	rsb	r3, r3, #8
    subs    r2, r3
    a222:	subs	r2, r2, r3

.L_bytewise_align:
    // bytewise to align memset
    subs    r3, r3, #1
    a224:	subs	r3, #1
    strb    r1, [r0], #1
    a226:	strb.w	r1, [r0], #1
    bgt     .L_bytewise_align
    a22a:	bgt.n	a224 <memset+0x14>

.L_prepare_dwordwise:
    // fill a pair of 32 bit registers with the 8 bit value
    uxtb    r1, r1
    a22c:	uxtb	r1, r1
    orr     r1, r1, r1, lsl #8
    a22e:	orr.w	r1, r1, r1, lsl #8
    orr     r1, r1, r1, lsl #16
    a232:	orr.w	r1, r1, r1, lsl #16
    mov     r12, r1
    a236:	mov	ip, r1

    // load the number of dwords left
    lsrs    r3, r2, #3
    a238:	lsrs	r3, r2, #3

.L_dwordwise:
    // dwordwise memset
		
    subs    r3, r3, #1
    a23a:	subs	r3, #1
    strd    r1, r12, [r0], #8
    a23c:	strd	r1, ip, [r0], #8
    bgt     .L_dwordwise
    a240:	bgt.n	a23a <memset+0x2a>

    // remaining bytes
    ands     r2, #7
    a242:	ands.w	r2, r2, #7
    beq     .L_done
    a246:	beq.n	a250 <memset+0x40>

.L_bytewise:
    // bytewise memset
    subs    r2, r2, #1
    a248:	subs	r2, #1
    strb    r1, [r0], #1
    a24a:	strb.w	r1, [r0], #1
    bgt     .L_bytewise
    a24e:	bgt.n	a248 <memset+0x38>

.L_done:
    // restore the base pointer as return value
    pop     { r0, pc }
    a250:	pop	{r0, pc}
    a252:	nop

0000a254 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    a254:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    a256:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    a25a:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    a25e:	bne.n	a33c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a260:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    a262:	bcc.n	a2e8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a264:	ldr.w	r3, [r1], #4
    a268:	str.w	r3, [r0], #4
    a26c:	ldr.w	r3, [r1], #4
    a270:	str.w	r3, [r0], #4
    a274:	ldr.w	r3, [r1], #4
    a278:	str.w	r3, [r0], #4
    a27c:	ldr.w	r3, [r1], #4
    a280:	str.w	r3, [r0], #4
    a284:	ldr.w	r3, [r1], #4
    a288:	str.w	r3, [r0], #4
    a28c:	ldr.w	r3, [r1], #4
    a290:	str.w	r3, [r0], #4
    a294:	ldr.w	r3, [r1], #4
    a298:	str.w	r3, [r0], #4
    a29c:	ldr.w	r3, [r1], #4
    a2a0:	str.w	r3, [r0], #4
    a2a4:	ldr.w	r3, [r1], #4
    a2a8:	str.w	r3, [r0], #4
    a2ac:	ldr.w	r3, [r1], #4
    a2b0:	str.w	r3, [r0], #4
    a2b4:	ldr.w	r3, [r1], #4
    a2b8:	str.w	r3, [r0], #4
    a2bc:	ldr.w	r3, [r1], #4
    a2c0:	str.w	r3, [r0], #4
    a2c4:	ldr.w	r3, [r1], #4
    a2c8:	str.w	r3, [r0], #4
    a2cc:	ldr.w	r3, [r1], #4
    a2d0:	str.w	r3, [r0], #4
    a2d4:	ldr.w	r3, [r1], #4
    a2d8:	str.w	r3, [r0], #4
    a2dc:	ldr.w	r3, [r1], #4
    a2e0:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    a2e4:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    a2e6:	bcs.n	a264 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    a2e8:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    a2ea:	bcc.n	a310 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    a2ec:	ldr.w	r3, [r1], #4
    a2f0:	str.w	r3, [r0], #4
    a2f4:	ldr.w	r3, [r1], #4
    a2f8:	str.w	r3, [r0], #4
    a2fc:	ldr.w	r3, [r1], #4
    a300:	str.w	r3, [r0], #4
    a304:	ldr.w	r3, [r1], #4
    a308:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    a30c:	subs	r2, #16
	bhs	.Lmid_block_loop
    a30e:	bcs.n	a2ec <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    a310:	adds	r2, #12
	blo	.Lcopy_less_than_4
    a312:	bcc.n	a320 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    a314:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    a318:	str.w	r3, [r0], #4
	subs	r2, #4
    a31c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    a31e:	bcs.n	a314 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    a320:	adds	r2, #4
	beq	.Ldone
    a322:	beq.n	a336 <memcpy+0xe2>

	lsls	r2, r2, #31
    a324:	lsls	r2, r2, #31
	itt ne
    a326:	itt	ne
	ldrbne  r3, [r1], #1
    a328:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a32c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    a330:	bcc.n	a336 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    a332:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    a334:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a336:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a338:	bx	lr
    a33a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    a33c:	cmp	r2, #8
	blo	.Lbyte_copy
    a33e:	bcc.n	a368 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    a340:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    a342:	beq.n	a260 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    a344:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    a348:	beq.n	a260 <memcpy+0xc>

	rsb	r3, #4
    a34a:	rsb	r3, r3, #4
	subs	r2, r3
    a34e:	subs	r2, r2, r3

	lsls    r3, r3, #31
    a350:	lsls	r3, r3, #31
	itt ne
    a352:	itt	ne
	ldrbne  r3, [r1], #1
    a354:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    a358:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    a35c:	bcc.n	a260 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    a35e:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    a362:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    a366:	b.n	a260 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    a368:	subs	r2, #4
	blo	.Lcopy_less_than_4
    a36a:	bcc.n	a320 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    a36c:	subs	r2, #1
	ldrb    r3, [r1], #1
    a36e:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    a372:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    a376:	bcs.n	a36c <memcpy+0x118>

	ldrb	r3, [r1]
    a378:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    a37a:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    a37c:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    a37e:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    a380:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    a382:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    a384:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    a386:	bx	lr

0000a388 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a388:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a38a:	ldr	r4, [pc, #80]	; (a3dc <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a38c:	mov.w	r6, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a390:	ldr	r5, [pc, #76]	; (a3e0 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a392:	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    a396:	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a39a:	ldr	r7, [pc, #72]	; (a3e4 <rx_queue_transfer+0x5c>)
    a39c:	add.w	r5, r5, r0, lsl #5
{
    a3a0:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a3a2:	str.w	r2, [r6, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a3a6:	mov	r1, r4
    a3a8:	ldrh	r2, [r7, #0]
    a3aa:	mov	r0, r5
    a3ac:	bl	b42c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    a3b0:	ldrh	r3, [r7, #0]
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a3b2:	add	r3, r4
	asm volatile("": : :"memory");
	asm("dsb");
    a3b4:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a3b8:	str.w	r4, [r6, #3932]	; 0xf5c
		location += 32;
    a3bc:	adds	r4, #32
	} while (location < end_addr);
    a3be:	cmp	r3, r4
    a3c0:	bhi.n	a3b8 <rx_queue_transfer+0x30>
	asm("dsb");
    a3c2:	dsb	sy
	asm("isb");
    a3c6:	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    a3ca:	movs	r0, #3
    a3cc:	mov	r1, r5
    a3ce:	bl	b47c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a3d2:	mov.w	r3, #131072	; 0x20000
    a3d6:	str.w	r3, [r6, #268]	; 0x10c
}
    a3da:	pop	{r3, r4, r5, r6, r7, pc}
    a3dc:	.word	0x20004b40
    a3e0:	.word	0x20005b40
    a3e4:	.word	0x200153e6

0000a3e8 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3e8:	ldr	r3, [r0, #4]
    a3ea:	ldr	r2, [pc, #136]	; (a474 <rx_event+0x8c>)
    a3ec:	ubfx	r3, r3, #16, #15
{
    a3f0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3f4:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    a3f6:	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a3f8:	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    a3fa:	cmp	r4, #0
    a3fc:	ble.n	a446 <rx_event+0x5e>
		// received a packet with data
		uint32_t head = rx_head;
    a3fe:	ldr	r2, [pc, #120]	; (a478 <rx_event+0x90>)
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    a400:	uxth.w	sl, r4
		if (head != rx_tail) {
    a404:	ldr	r0, [pc, #116]	; (a47c <rx_event+0x94>)
		uint32_t head = rx_head;
    a406:	ldrb	r1, [r2, #0]
		if (head != rx_tail) {
    a408:	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    a40a:	uxtb	r3, r1
		if (head != rx_tail) {
    a40c:	ldr.w	r8, [pc, #128]	; a490 <rx_event+0xa8>
    a410:	cmp	r1, r0
    a412:	ldr	r7, [pc, #108]	; (a480 <rx_event+0x98>)
    a414:	ldr	r1, [pc, #108]	; (a484 <rx_event+0x9c>)
    a416:	beq.n	a450 <rx_event+0x68>
			uint32_t ii = rx_list[head];
    a418:	ldrb.w	r9, [r1, r3]
			uint32_t count = rx_count[ii];
    a41c:	ldrh.w	r6, [r8, r9, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    a420:	rsb	r0, r6, #512	; 0x200
    a424:	cmp	r4, r0
    a426:	bhi.n	a450 <rx_event+0x68>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a428:	ldr	r3, [pc, #92]	; (a488 <rx_event+0xa0>)
    a42a:	add.w	r0, r6, r9, lsl #9
    a42e:	mov	r2, r4
				rx_count[ii] = count + len;
    a430:	add	r6, sl
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    a432:	add.w	r1, r3, r5, lsl #9
    a436:	add	r0, r3
    a438:	bl	a254 <memcpy>
				rx_available += len;
    a43c:	ldr	r3, [r7, #0]
				rx_count[ii] = count + len;
    a43e:	strh.w	r6, [r8, r9, lsl #1]
				rx_available += len;
    a442:	add	r3, r4
    a444:	str	r3, [r7, #0]
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    a446:	mov	r0, r5
	}
}
    a448:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_queue_transfer(i);
    a44c:	b.w	a388 <rx_queue_transfer>
		if (++head > RX_NUM) head = 0;
    a450:	adds	r3, #1
		rx_index[i] = 0;
    a452:	movs	r6, #0
    a454:	ldr	r0, [pc, #52]	; (a48c <rx_event+0xa4>)
		if (++head > RX_NUM) head = 0;
    a456:	cmp	r3, #9
		rx_count[i] = len;
    a458:	strh.w	sl, [r8, r5, lsl #1]
		rx_index[i] = 0;
    a45c:	strh.w	r6, [r0, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    a460:	it	cs
    a462:	movcs	r3, r6
		rx_list[head] = i;
    a464:	strb	r5, [r1, r3]
		rx_head = head;
    a466:	uxtb	r3, r3
    a468:	strb	r3, [r2, #0]
		rx_available += len;
    a46a:	ldr	r3, [r7, #0]
    a46c:	add	r4, r3
    a46e:	str	r4, [r7, #0]
}
    a470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a474:	.word	0x200153e6
    a478:	.word	0x200155c7
    a47c:	.word	0x200155d7
    a480:	.word	0x20014cb8
    a484:	.word	0x200155c9
    a488:	.word	0x20004b40
    a48c:	.word	0x200153d6
    a490:	.word	0x200153c6

0000a494 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    a494:	ldr	r3, [pc, #112]	; (a508 <usb_serial_flush_callback+0x74>)
{
    a496:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
    a49a:	ldrb	r2, [r3, #0]
    a49c:	and.w	r3, r2, #255	; 0xff
    a4a0:	cbnz	r2, a502 <usb_serial_flush_callback+0x6e>
	if (!usb_configuration) return;
    a4a2:	ldr	r2, [pc, #104]	; (a50c <usb_serial_flush_callback+0x78>)
    a4a4:	ldrb	r2, [r2, #0]
    a4a6:	cbz	r2, a502 <usb_serial_flush_callback+0x6e>
	if (tx_available == 0) return;
    a4a8:	ldr	r7, [pc, #100]	; (a510 <usb_serial_flush_callback+0x7c>)
    a4aa:	ldrh	r5, [r7, #0]
    a4ac:	cbz	r5, a502 <usb_serial_flush_callback+0x6e>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    a4ae:	ldr	r6, [pc, #100]	; (a514 <usb_serial_flush_callback+0x80>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a4b0:	rsb	r5, r5, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    a4b4:	ldr	r1, [pc, #96]	; (a518 <usb_serial_flush_callback+0x84>)
    a4b6:	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a4b8:	ldr	r4, [pc, #96]	; (a51c <usb_serial_flush_callback+0x88>)
	transfer_t *xfer = tx_transfer + tx_head;
    a4ba:	add.w	r8, r1, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a4be:	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a4c2:	mov	r2, r5
    a4c4:	mov	r0, r8
    a4c6:	mov	r1, r4
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a4c8:	add	r5, r4
    a4ca:	bl	b42c <usb_prepare_transfer>
	asm volatile("": : :"memory");
	asm("dsb");
    a4ce:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a4d2:	mov.w	r3, #3758153728	; 0xe000e000
    a4d6:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    a4da:	adds	r4, #32
	} while (location < end_addr);
    a4dc:	cmp	r5, r4
    a4de:	bhi.n	a4d6 <usb_serial_flush_callback+0x42>
	asm("dsb");
    a4e0:	dsb	sy
	asm("isb");
    a4e4:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a4e8:	movs	r0, #3
    a4ea:	mov	r1, r8
    a4ec:	bl	b458 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a4f0:	ldrb	r3, [r6, #0]
    a4f2:	movs	r2, #0
    a4f4:	adds	r3, #1
	tx_available = 0;
    a4f6:	strh	r2, [r7, #0]
	if (++tx_head >= TX_NUM) tx_head = 0;
    a4f8:	uxtb	r3, r3
    a4fa:	cmp	r3, #3
    a4fc:	ite	ls
    a4fe:	strbls	r3, [r6, #0]
    a500:	strbhi	r2, [r6, #0]
}
    a502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a506:	nop
    a508:	.word	0x200155dd
    a50c:	.word	0x200155df
    a510:	.word	0x2001546c
    a514:	.word	0x200155db
    a518:	.word	0x20005cc0
    a51c:	.word	0x20005dc0

0000a520 <usb_serial_reset>:
}
    a520:	bx	lr
	...

0000a524 <usb_serial_configure>:
	if (usb_high_speed) {
    a524:	ldr	r3, [pc, #180]	; (a5dc <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a526:	movs	r2, #128	; 0x80
    a528:	movs	r1, #0
    a52a:	ldr	r0, [pc, #180]	; (a5e0 <usb_serial_configure+0xbc>)
{
    a52c:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    a52e:	ldrb	r3, [r3, #0]
	tx_head = 0;
    a530:	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    a532:	ldr	r5, [pc, #176]	; (a5e4 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    a534:	cmp	r3, #0
		rx_packet_size = CDC_RX_SIZE_480;
    a536:	ldr	r6, [pc, #176]	; (a5e8 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    a538:	ite	eq
    a53a:	moveq	r3, #64	; 0x40
    a53c:	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    a540:	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    a542:	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a544:	bl	a210 <memset>
	tx_head = 0;
    a548:	ldr	r3, [pc, #160]	; (a5ec <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a54a:	mov.w	r2, #256	; 0x100
    a54e:	mov	r1, r4
    a550:	ldr	r0, [pc, #156]	; (a5f0 <usb_serial_configure+0xcc>)
	tx_head = 0;
    a552:	strb	r4, [r3, #0]
	tx_available = 0;
    a554:	ldr	r3, [pc, #156]	; (a5f4 <usb_serial_configure+0xd0>)
    a556:	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a558:	bl	a210 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    a55c:	movs	r2, #16
    a55e:	mov	r1, r4
    a560:	ldr	r0, [pc, #148]	; (a5f8 <usb_serial_configure+0xd4>)
    a562:	bl	a210 <memset>
	memset(rx_index, 0, sizeof(rx_index));
    a566:	movs	r2, #16
    a568:	mov	r1, r4
    a56a:	ldr	r0, [pc, #144]	; (a5fc <usb_serial_configure+0xd8>)
    a56c:	bl	a210 <memset>
	rx_head = 0;
    a570:	ldr	r3, [pc, #140]	; (a600 <usb_serial_configure+0xdc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a572:	mov	r2, r4
    a574:	movs	r1, #16
	rx_head = 0;
    a576:	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a578:	movs	r0, #2
	rx_tail = 0;
    a57a:	ldr	r3, [pc, #136]	; (a604 <usb_serial_configure+0xe0>)
    a57c:	strb	r4, [r3, #0]
	rx_available = 0;
    a57e:	ldr	r3, [pc, #136]	; (a608 <usb_serial_configure+0xe4>)
    a580:	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    a582:	mov	r3, r4
    a584:	bl	b3ec <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a588:	ldr	r3, [pc, #128]	; (a60c <usb_serial_configure+0xe8>)
    a58a:	mov	r2, r4
    a58c:	ldrh	r1, [r6, #0]
    a58e:	movs	r0, #3
    a590:	bl	b3ac <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    a594:	mov	r3, r4
    a596:	movs	r2, #1
    a598:	ldrh	r1, [r5, #0]
    a59a:	movs	r0, #3
    a59c:	bl	b3ec <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a5a0:	mov	r0, r4
    a5a2:	adds	r4, #1
    a5a4:	bl	a388 <rx_queue_transfer>
    a5a8:	cmp	r4, #8
    a5aa:	bne.n	a5a0 <usb_serial_configure+0x7c>
	usb_timer0_callback = callback;
    a5ac:	ldr	r3, [pc, #96]	; (a610 <usb_serial_configure+0xec>)
    a5ae:	ldr	r2, [pc, #100]	; (a614 <usb_serial_configure+0xf0>)
    a5b0:	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
    a5b2:	movs	r2, #0
    a5b4:	ldr	r3, [pc, #96]	; (a618 <usb_serial_configure+0xf4>)
    a5b6:	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    a5ba:	movs	r2, #74	; 0x4a
    a5bc:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    a5c0:	ldr.w	r2, [r3, #328]	; 0x148
    a5c4:	orr.w	r2, r2, #16777216	; 0x1000000
    a5c8:	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    a5cc:	ldr	r3, [pc, #76]	; (a61c <usb_serial_configure+0xf8>)
    a5ce:	cbz	r3, a5da <usb_serial_configure+0xb6>
    a5d0:	ldr	r2, [pc, #76]	; (a620 <usb_serial_configure+0xfc>)
    a5d2:	ldrb	r3, [r2, #0]
    a5d4:	orr.w	r3, r3, #1
    a5d8:	strb	r3, [r2, #0]
}
    a5da:	pop	{r4, r5, r6, pc}
    a5dc:	.word	0x200155e0
    a5e0:	.word	0x20005cc0
    a5e4:	.word	0x2001546e
    a5e8:	.word	0x200153e6
    a5ec:	.word	0x200155db
    a5f0:	.word	0x20005b40
    a5f4:	.word	0x2001546c
    a5f8:	.word	0x200153c6
    a5fc:	.word	0x200153d6
    a600:	.word	0x200155c7
    a604:	.word	0x200155d7
    a608:	.word	0x20014cb8
    a60c:	.word	0x0000a3e9
    a610:	.word	0x2001538c
    a614:	.word	0x0000a495
    a618:	.word	0x402e0000
    a61c:	.word	0x00000000
    a620:	.word	0x200155e2

0000a624 <usb_serial_read>:
{
    a624:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a628:	mov.w	r3, #3758153728	; 0xe000e000
    a62c:	mov.w	r2, #131072	; 0x20000
{
    a630:	mov	r7, r0
    a632:	mov	r8, r1
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a634:	str.w	r2, [r3, #396]	; 0x18c
	uint32_t count=0;
    a638:	movs	r5, #0
	uint32_t tail = rx_tail;
    a63a:	ldr	r3, [pc, #160]	; (a6dc <usb_serial_read+0xb8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a63c:	ldr.w	fp, [pc, #176]	; a6f0 <usb_serial_read+0xcc>
	uint32_t tail = rx_tail;
    a640:	ldrb	r4, [r3, #0]
    a642:	uxtb	r4, r4
	while (count < size && tail != rx_head) {
    a644:	cmp	r5, r8
    a646:	bcs.n	a650 <usb_serial_read+0x2c>
    a648:	ldr	r3, [pc, #148]	; (a6e0 <usb_serial_read+0xbc>)
    a64a:	ldrb	r2, [r3, #0]
    a64c:	cmp	r2, r4
    a64e:	bne.n	a664 <usb_serial_read+0x40>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a650:	mov.w	r3, #3758153728	; 0xe000e000
    a654:	mov.w	r2, #131072	; 0x20000
}
    a658:	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a65a:	str.w	r2, [r3, #268]	; 0x10c
}
    a65e:	add	sp, #12
    a660:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (++tail > RX_NUM) tail = 0;
    a664:	adds	r4, #1
		uint32_t i = rx_list[tail];
    a666:	ldr	r3, [pc, #124]	; (a6e4 <usb_serial_read+0xc0>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a668:	ldr	r0, [pc, #124]	; (a6e8 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
    a66a:	sub.w	r2, r8, r5
		if (++tail > RX_NUM) tail = 0;
    a66e:	cmp	r4, #9
    a670:	ldr.w	sl, [pc, #128]	; a6f4 <usb_serial_read+0xd0>
    a674:	it	cs
    a676:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a678:	ldrb.w	r9, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
    a67c:	ldrh.w	r1, [fp, r9, lsl #1]
    a680:	ldrh.w	r6, [r0, r9, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a684:	ldr	r0, [pc, #100]	; (a6ec <usb_serial_read+0xc8>)
		uint32_t avail = rx_count[i] - rx_index[i];
    a686:	subs	r6, r6, r1
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a688:	add.w	r1, r1, r9, lsl #9
		if (avail > len) {
    a68c:	cmp	r2, r6
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a68e:	add	r1, r0
		if (avail > len) {
    a690:	bcs.n	a6b8 <usb_serial_read+0x94>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    a692:	mov	r0, r7
    a694:	str	r2, [sp, #4]
    a696:	bl	a254 <memcpy>
			rx_available -= len;
    a69a:	ldr.w	r1, [sl]
			rx_index[i] += len;
    a69e:	ldr	r2, [sp, #4]
			rx_available -= len;
    a6a0:	sub.w	r1, r1, r8
    a6a4:	add	r1, r5
    a6a6:	mov	r5, r8
    a6a8:	str.w	r1, [sl]
			rx_index[i] += len;
    a6ac:	ldrh.w	r1, [fp, r9, lsl #1]
    a6b0:	add	r2, r1
    a6b2:	strh.w	r2, [fp, r9, lsl #1]
			count += len;
    a6b6:	b.n	a644 <usb_serial_read+0x20>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    a6b8:	mov	r2, r6
    a6ba:	mov	r0, r7
    a6bc:	bl	a254 <memcpy>
			rx_available -= avail;
    a6c0:	ldr.w	r2, [sl]
			rx_tail = tail;
    a6c4:	ldr	r3, [pc, #20]	; (a6dc <usb_serial_read+0xb8>)
			rx_queue_transfer(i);
    a6c6:	mov	r0, r9
			rx_available -= avail;
    a6c8:	subs	r2, r2, r6
			p += avail;
    a6ca:	add	r7, r6
			count += avail;
    a6cc:	add	r5, r6
			rx_available -= avail;
    a6ce:	str.w	r2, [sl]
			rx_tail = tail;
    a6d2:	uxtb	r2, r4
    a6d4:	strb	r2, [r3, #0]
			rx_queue_transfer(i);
    a6d6:	bl	a388 <rx_queue_transfer>
    a6da:	b.n	a644 <usb_serial_read+0x20>
    a6dc:	.word	0x200155d7
    a6e0:	.word	0x200155c7
    a6e4:	.word	0x200155c9
    a6e8:	.word	0x200153c6
    a6ec:	.word	0x20004b40
    a6f0:	.word	0x200153d6
    a6f4:	.word	0x20014cb8

0000a6f8 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
    a6f8:	ldr	r3, [pc, #44]	; (a728 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a6fa:	ldr	r1, [pc, #48]	; (a72c <usb_serial_peekchar+0x34>)
	uint32_t tail = rx_tail;
    a6fc:	ldrb	r2, [r3, #0]
	if (tail == rx_head) return -1;
    a6fe:	ldrb	r1, [r1, #0]
	uint32_t tail = rx_tail;
    a700:	uxtb	r3, r2
	if (tail == rx_head) return -1;
    a702:	cmp	r2, r1
    a704:	beq.n	a722 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a706:	adds	r3, #1
	uint32_t i = rx_list[tail];
    a708:	ldr	r2, [pc, #36]	; (a730 <usb_serial_peekchar+0x38>)
	if (++tail > RX_NUM) tail = 0;
    a70a:	cmp	r3, #9
    a70c:	it	cs
    a70e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a710:	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a712:	ldr	r3, [pc, #32]	; (a734 <usb_serial_peekchar+0x3c>)
    a714:	ldrh.w	r1, [r3, r2, lsl #1]
    a718:	ldr	r3, [pc, #28]	; (a738 <usb_serial_peekchar+0x40>)
    a71a:	add.w	r3, r3, r2, lsl #9
    a71e:	ldrb	r0, [r3, r1]
    a720:	bx	lr
	if (tail == rx_head) return -1;
    a722:	mov.w	r0, #4294967295
}
    a726:	bx	lr
    a728:	.word	0x200155d7
    a72c:	.word	0x200155c7
    a730:	.word	0x200155c9
    a734:	.word	0x200153d6
    a738:	.word	0x20004b40

0000a73c <usb_serial_available>:
	uint32_t n = rx_available;
    a73c:	ldr	r3, [pc, #12]	; (a74c <usb_serial_available+0x10>)
{
    a73e:	push	{r4, lr}
	uint32_t n = rx_available;
    a740:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    a742:	cbnz	r4, a748 <usb_serial_available+0xc>
    a744:	bl	c418 <yield>
}
    a748:	mov	r0, r4
    a74a:	pop	{r4, pc}
    a74c:	.word	0x20014cb8

0000a750 <usb_serial_flush_input>:
{
    a750:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tail = rx_tail;
    a754:	ldr	r5, [pc, #64]	; (a798 <usb_serial_flush_input+0x48>)
	while (tail != rx_head) {
    a756:	ldr	r7, [pc, #68]	; (a79c <usb_serial_flush_input+0x4c>)
	uint32_t tail = rx_tail;
    a758:	ldrb	r4, [r5, #0]
		uint32_t i = rx_list[tail];
    a75a:	ldr.w	r8, [pc, #80]	; a7ac <usb_serial_flush_input+0x5c>
	uint32_t tail = rx_tail;
    a75e:	uxtb	r4, r4
		rx_available -= rx_count[i] - rx_index[i];
    a760:	ldr	r6, [pc, #60]	; (a7a0 <usb_serial_flush_input+0x50>)
	while (tail != rx_head) {
    a762:	ldrb	r3, [r7, #0]
    a764:	cmp	r3, r4
    a766:	bne.n	a76c <usb_serial_flush_input+0x1c>
}
    a768:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (++tail > RX_NUM) tail = 0;
    a76c:	adds	r4, #1
		rx_available -= rx_count[i] - rx_index[i];
    a76e:	ldr	r2, [pc, #52]	; (a7a4 <usb_serial_flush_input+0x54>)
    a770:	ldr	r1, [pc, #52]	; (a7a8 <usb_serial_flush_input+0x58>)
		if (++tail > RX_NUM) tail = 0;
    a772:	cmp	r4, #9
		rx_available -= rx_count[i] - rx_index[i];
    a774:	ldr	r3, [r6, #0]
		if (++tail > RX_NUM) tail = 0;
    a776:	it	cs
    a778:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    a77a:	ldrb.w	r0, [r8, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a77e:	ldrh.w	r2, [r2, r0, lsl #1]
    a782:	ldrh.w	r1, [r1, r0, lsl #1]
    a786:	subs	r2, r2, r1
    a788:	subs	r3, r3, r2
    a78a:	str	r3, [r6, #0]
		rx_queue_transfer(i);
    a78c:	bl	a388 <rx_queue_transfer>
		rx_tail = tail;
    a790:	uxtb	r3, r4
    a792:	strb	r3, [r5, #0]
    a794:	b.n	a762 <usb_serial_flush_input+0x12>
    a796:	nop
    a798:	.word	0x200155d7
    a79c:	.word	0x200155c7
    a7a0:	.word	0x20014cb8
    a7a4:	.word	0x200153c6
    a7a8:	.word	0x200153d6
    a7ac:	.word	0x200155c9

0000a7b0 <usb_serial_getchar>:
{
    a7b0:	push	{r0, r1, r2, lr}
	if (usb_serial_read(&c, 1)) return c;
    a7b2:	movs	r1, #1
    a7b4:	add.w	r0, sp, #7
    a7b8:	bl	a624 <usb_serial_read>
    a7bc:	cbz	r0, a7c8 <usb_serial_getchar+0x18>
    a7be:	ldrb.w	r0, [sp, #7]
}
    a7c2:	add	sp, #12
    a7c4:	ldr.w	pc, [sp], #4
	return -1;
    a7c8:	mov.w	r0, #4294967295
    a7cc:	b.n	a7c2 <usb_serial_getchar+0x12>
	...

0000a7d0 <usb_serial_write>:
	if (!usb_configuration) return 0;
    a7d0:	ldr	r3, [pc, #356]	; (a938 <usb_serial_write+0x168>)
{
    a7d2:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!usb_configuration) return 0;
    a7d6:	ldrb	r3, [r3, #0]
{
    a7d8:	mov	r6, r0
    a7da:	mov	r5, r1
	if (!usb_configuration) return 0;
    a7dc:	and.w	r4, r3, #255	; 0xff
    a7e0:	cmp	r3, #0
    a7e2:	beq.w	a8f6 <usb_serial_write+0x126>
	uint32_t sent=0;
    a7e6:	movs	r4, #0
		tx_noautoflush = 1;
    a7e8:	ldr.w	fp, [pc, #360]	; a954 <usb_serial_write+0x184>
	while (size > 0) {
    a7ec:	cmp	r5, #0
    a7ee:	beq.w	a8f6 <usb_serial_write+0x126>
		tx_noautoflush = 1;
    a7f2:	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
    a7f4:	ldr.w	r9, [pc, #352]	; a958 <usb_serial_write+0x188>
		while (!tx_available) {
    a7f8:	ldr	r7, [pc, #320]	; (a93c <usb_serial_write+0x16c>)
		transfer_t *xfer = tx_transfer + tx_head;
    a7fa:	ldrb.w	sl, [r9]
		tx_noautoflush = 1;
    a7fe:	strb.w	r3, [fp]
		transfer_t *xfer = tx_transfer + tx_head;
    a802:	ldr	r3, [pc, #316]	; (a940 <usb_serial_write+0x170>)
    a804:	add.w	sl, r3, sl, lsl #5
		uint32_t wait_begin_at=0;
    a808:	movs	r3, #0
		int waiting=0;
    a80a:	mov	r8, r3
		while (!tx_available) {
    a80c:	ldrh	r1, [r7, #0]
    a80e:	cbnz	r1, a82e <usb_serial_write+0x5e>
			uint32_t status = usb_transfer_status(xfer);
    a810:	mov	r0, sl
    a812:	strd	r3, r1, [sp]
    a816:	bl	b498 <usb_transfer_status>
			if (!(status & 0x80)) {
    a81a:	ands.w	r0, r0, #128	; 0x80
    a81e:	ldr	r2, [pc, #292]	; (a944 <usb_serial_write+0x174>)
    a820:	ldrd	r3, r1, [sp]
    a824:	bne.n	a8d2 <usb_serial_write+0x102>
				tx_available = TX_SIZE;
    a826:	mov.w	r3, #2048	; 0x800
				transmit_previous_timeout = 0;
    a82a:	strb	r0, [r2, #0]
				tx_available = TX_SIZE;
    a82c:	strh	r3, [r7, #0]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a82e:	ldrh.w	r8, [r7]
    a832:	ldrb.w	r3, [r9]
    a836:	rsb	r0, r8, #2048	; 0x800
		if (size >= tx_available) {
    a83a:	cmp	r8, r5
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    a83c:	mov.w	r2, r3, lsl #11
    a840:	add.w	r0, r0, r3, lsl #11
    a844:	ldr	r3, [pc, #256]	; (a948 <usb_serial_write+0x178>)
    a846:	str	r2, [sp, #0]
    a848:	add	r0, r3
		if (size >= tx_available) {
    a84a:	bhi.n	a918 <usb_serial_write+0x148>
			memcpy(txdata, data, tx_available);
    a84c:	mov	r2, r8
    a84e:	mov	r1, r6
    a850:	bl	a254 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a854:	ldr	r2, [sp, #0]
    a856:	ldr	r3, [pc, #240]	; (a948 <usb_serial_write+0x178>)
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a858:	mov	r0, sl
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a85a:	add	r2, r3
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a85c:	movs	r3, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a85e:	mov	r8, r2
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    a860:	mov.w	r2, #2048	; 0x800
    a864:	mov	r1, r8
    a866:	bl	b42c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a86a:	mov	r1, r8
	asm("dsb");
    a86c:	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    a870:	add.w	r2, r8, #2048	; 0x800
    a874:	add.w	r3, r8, #32
    a878:	cmp	r3, r2
    a87a:	ite	hi
    a87c:	movhi	r3, #1
    a87e:	movls	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
    a880:	mov.w	r2, #3758153728	; 0xe000e000
    a884:	add.w	r3, r8, r3, lsl #5
    a888:	str.w	r1, [r2, #3952]	; 0xf70
		location += 32;
    a88c:	adds	r1, #32
	} while (location < end_addr);
    a88e:	cmp	r1, r3
    a890:	bne.n	a888 <usb_serial_write+0xb8>
	asm("dsb");
    a892:	dsb	sy
	asm("isb");
    a896:	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    a89a:	movs	r0, #3
    a89c:	mov	r1, sl
    a89e:	bl	b458 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    a8a2:	ldrb.w	r3, [r9]
	USB1_GPTIMER0CTRL = 0;
    a8a6:	ldr	r2, [pc, #164]	; (a94c <usb_serial_write+0x17c>)
			if (++tx_head >= TX_NUM) tx_head = 0;
    a8a8:	adds	r3, #1
    a8aa:	uxtb	r3, r3
    a8ac:	cmp	r3, #3
    a8ae:	it	hi
    a8b0:	movhi	r3, #0
    a8b2:	strb.w	r3, [r9]
			size -= tx_available;
    a8b6:	ldrh	r3, [r7, #0]
    a8b8:	subs	r5, r5, r3
			sent += tx_available;
    a8ba:	add	r4, r3
			data += tx_available;
    a8bc:	add	r6, r3
			tx_available = 0;
    a8be:	movs	r3, #0
    a8c0:	strh	r3, [r7, #0]
	USB1_GPTIMER0CTRL = 0;
    a8c2:	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
    a8c6:	dsb	sy
		tx_noautoflush = 0;
    a8ca:	movs	r3, #0
    a8cc:	strb.w	r3, [fp]
    a8d0:	b.n	a7ec <usb_serial_write+0x1c>
			asm("dsb" ::: "memory");
    a8d2:	dsb	sy
			tx_noautoflush = 0;
    a8d6:	strb.w	r1, [fp]
			if (!waiting) {
    a8da:	cmp.w	r8, #0
    a8de:	bne.n	a8e4 <usb_serial_write+0x114>
				wait_begin_at = systick_millis_count;
    a8e0:	ldr	r3, [pc, #108]	; (a950 <usb_serial_write+0x180>)
    a8e2:	ldr	r3, [r3, #0]
			if (transmit_previous_timeout) return sent;
    a8e4:	ldrb	r1, [r2, #0]
    a8e6:	cbnz	r1, a8f6 <usb_serial_write+0x126>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    a8e8:	ldr	r1, [pc, #100]	; (a950 <usb_serial_write+0x180>)
    a8ea:	ldr	r1, [r1, #0]
    a8ec:	subs	r1, r1, r3
    a8ee:	cmp	r1, #120	; 0x78
    a8f0:	bls.n	a8fe <usb_serial_write+0x12e>
				transmit_previous_timeout = 1;
    a8f2:	movs	r3, #1
    a8f4:	strb	r3, [r2, #0]
}
    a8f6:	mov	r0, r4
    a8f8:	add	sp, #12
    a8fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!usb_configuration) return sent;
    a8fe:	ldr	r1, [pc, #56]	; (a938 <usb_serial_write+0x168>)
    a900:	ldrb	r1, [r1, #0]
    a902:	cmp	r1, #0
    a904:	beq.n	a8f6 <usb_serial_write+0x126>
			tx_noautoflush = 1;
    a906:	mov.w	r8, #1
    a90a:	str	r3, [sp, #0]
			yield();
    a90c:	bl	c418 <yield>
			tx_noautoflush = 1;
    a910:	ldr	r3, [sp, #0]
    a912:	strb.w	r8, [fp]
    a916:	b.n	a80c <usb_serial_write+0x3c>
			memcpy(txdata, data, size);
    a918:	mov	r2, r5
    a91a:	mov	r1, r6
    a91c:	bl	a254 <memcpy>
			tx_available -= size;
    a920:	sub.w	r8, r8, r5
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a924:	ldr	r3, [pc, #36]	; (a94c <usb_serial_write+0x17c>)
    a926:	mov.w	r2, #3221225472	; 0xc0000000
			sent += size;
    a92a:	add	r4, r5
			tx_available -= size;
    a92c:	strh.w	r8, [r7]
			size = 0;
    a930:	movs	r5, #0
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    a932:	str.w	r2, [r3, #132]	; 0x84
}
    a936:	b.n	a8c6 <usb_serial_write+0xf6>
    a938:	.word	0x200155df
    a93c:	.word	0x2001546c
    a940:	.word	0x20005cc0
    a944:	.word	0x200155da
    a948:	.word	0x20005dc0
    a94c:	.word	0x402e0000
    a950:	.word	0x20015374
    a954:	.word	0x200155dd
    a958:	.word	0x200155db

0000a95c <usb_serial_putchar>:
{
    a95c:	push	{r0, r1, r2, lr}
	return usb_serial_write(&c, 1);
    a95e:	movs	r1, #1
{
    a960:	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
    a964:	add.w	r0, sp, #7
    a968:	bl	a7d0 <usb_serial_write>
}
    a96c:	add	sp, #12
    a96e:	ldr.w	pc, [sp], #4
	...

0000a974 <usb_serial_write_buffer_free>:
{
    a974:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
    a978:	movs	r4, #0
	tx_noautoflush = 1;
    a97a:	ldr	r7, [pc, #56]	; (a9b4 <usb_serial_write_buffer_free+0x40>)
    a97c:	movs	r3, #1
    a97e:	ldr	r6, [pc, #56]	; (a9b8 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
    a980:	mov	r5, r4
		if (i == tx_head) continue;
    a982:	ldr.w	r8, [pc, #56]	; a9bc <usb_serial_write_buffer_free+0x48>
	tx_noautoflush = 1;
    a986:	strb	r3, [r7, #0]
		if (i == tx_head) continue;
    a988:	ldrb.w	r3, [r8]
    a98c:	cmp	r3, r4
    a98e:	beq.n	a99e <usb_serial_write_buffer_free+0x2a>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a990:	mov	r0, r6
    a992:	bl	b498 <usb_transfer_status>
    a996:	lsls	r3, r0, #24
    a998:	it	pl
    a99a:	addpl.w	r5, r5, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
    a99e:	adds	r4, #1
    a9a0:	adds	r6, #32
    a9a2:	cmp	r4, #4
    a9a4:	bne.n	a988 <usb_serial_write_buffer_free+0x14>
	asm("dsb" ::: "memory");
    a9a6:	dsb	sy
	tx_noautoflush = 0;
    a9aa:	movs	r3, #0
}
    a9ac:	mov	r0, r5
	tx_noautoflush = 0;
    a9ae:	strb	r3, [r7, #0]
}
    a9b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9b4:	.word	0x200155dd
    a9b8:	.word	0x20005cc0
    a9bc:	.word	0x200155db

0000a9c0 <usb_serial_flush_output>:
{
    a9c0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
    a9c4:	ldr	r3, [pc, #116]	; (aa3c <usb_serial_flush_output+0x7c>)
    a9c6:	ldrb	r3, [r3, #0]
    a9c8:	cbz	r3, aa38 <usb_serial_flush_output+0x78>
	if (tx_available == 0) return;
    a9ca:	ldr.w	r8, [pc, #132]	; aa50 <usb_serial_flush_output+0x90>
    a9ce:	ldrh.w	r5, [r8]
    a9d2:	cbz	r5, aa38 <usb_serial_flush_output+0x78>
	tx_noautoflush = 1;
    a9d4:	ldr	r7, [pc, #104]	; (aa40 <usb_serial_flush_output+0x80>)
    a9d6:	movs	r3, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a9d8:	ldr	r6, [pc, #104]	; (aa44 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
    a9da:	rsb	r5, r5, #2048	; 0x800
	tx_noautoflush = 1;
    a9de:	strb	r3, [r7, #0]
	transfer_t *xfer = tx_transfer + tx_head;
    a9e0:	ldr	r2, [pc, #100]	; (aa48 <usb_serial_flush_output+0x88>)
    a9e2:	ldrb	r3, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a9e4:	ldr	r4, [pc, #100]	; (aa4c <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    a9e6:	add.w	r9, r2, r3, lsl #5
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a9ea:	mov	r2, r5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a9ec:	add.w	r4, r4, r3, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a9f0:	movs	r3, #0
    a9f2:	mov	r0, r9
    a9f4:	mov	r1, r4
	uint32_t end_addr = (uint32_t)addr + size;
    a9f6:	add	r5, r4
    a9f8:	bl	b42c <usb_prepare_transfer>
	asm("dsb");
    a9fc:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    aa00:	mov.w	r3, #3758153728	; 0xe000e000
    aa04:	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    aa08:	adds	r4, #32
	} while (location < end_addr);
    aa0a:	cmp	r5, r4
    aa0c:	bhi.n	aa04 <usb_serial_flush_output+0x44>
	asm("dsb");
    aa0e:	dsb	sy
	asm("isb");
    aa12:	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    aa16:	movs	r0, #3
    aa18:	mov	r1, r9
    aa1a:	bl	b458 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    aa1e:	ldrb	r3, [r6, #0]
    aa20:	movs	r2, #0
    aa22:	adds	r3, #1
	tx_available = 0;
    aa24:	strh.w	r2, [r8]
	if (++tx_head >= TX_NUM) tx_head = 0;
    aa28:	uxtb	r3, r3
    aa2a:	cmp	r3, #3
    aa2c:	ite	ls
    aa2e:	strbls	r3, [r6, #0]
    aa30:	strbhi	r2, [r6, #0]
	asm("dsb" ::: "memory");
    aa32:	dsb	sy
	tx_noautoflush = 0;
    aa36:	strb	r2, [r7, #0]
}
    aa38:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    aa3c:	.word	0x200155df
    aa40:	.word	0x200155dd
    aa44:	.word	0x200155db
    aa48:	.word	0x20005cc0
    aa4c:	.word	0x20005dc0
    aa50:	.word	0x2001546c

0000aa54 <set_arm_clock>:
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aa54:	ldr	r3, [pc, #512]	; (ac58 <set_arm_clock+0x204>)
{
    aa56:	push	{r4, r5, r6, r7, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    aa58:	ldr	r1, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    aa5a:	ldr	r5, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    aa5c:	sub.w	r3, r3, #507904	; 0x7c000
    aa60:	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    aa62:	ldr	r3, [pc, #504]	; (ac5c <set_arm_clock+0x208>)
    aa64:	cmp	r0, r3
    aa66:	bls.w	ac28 <set_arm_clock+0x1d4>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    aa6a:	ldr	r3, [pc, #500]	; (ac60 <set_arm_clock+0x20c>)
    aa6c:	cmp	r0, r3
    aa6e:	bls.w	ac3a <set_arm_clock+0x1e6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    aa72:	ldr	r2, [pc, #496]	; (ac64 <set_arm_clock+0x210>)
    aa74:	subs	r3, r0, r3
    aa76:	udiv	r3, r3, r2
    aa7a:	movs	r2, #25
    aa7c:	muls	r3, r2
    aa7e:	movw	r2, #1575	; 0x627
    aa82:	addw	r3, r3, #1250	; 0x4e2
    aa86:	cmp	r3, r2
    aa88:	it	cs
    aa8a:	movcs	r3, r2
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa8c:	ldr	r6, [pc, #456]	; (ac58 <set_arm_clock+0x204>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa8e:	sub.w	r3, r3, #800	; 0x320
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    aa92:	ldr.w	r2, [r6, #128]	; 0x80
    aa96:	orr.w	r2, r2, #192	; 0xc0
    aa9a:	str.w	r2, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    aa9e:	movs	r2, #25
    aaa0:	udiv	r2, r3, r2
    aaa4:	and.w	r3, r4, #31
    aaa8:	cmp	r3, r2
    aaaa:	bcs.n	aabc <set_arm_clock+0x68>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    aaac:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    aab0:	ldr	r3, [pc, #436]	; (ac68 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    aab2:	orrs	r4, r2
		DCDC_REG3 = dcdc;
    aab4:	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    aab6:	ldr	r6, [r3, #0]
    aab8:	cmp	r6, #0
    aaba:	bge.n	aab6 <set_arm_clock+0x62>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    aabc:	ands.w	r3, r1, #33554432	; 0x2000000
    aac0:	bne.n	ab14 <set_arm_clock+0xc0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    aac2:	ldr	r6, [pc, #424]	; (ac6c <set_arm_clock+0x218>)
    aac4:	ldr	r7, [pc, #424]	; (ac70 <set_arm_clock+0x21c>)
    aac6:	ldr	r6, [r6, #16]
    aac8:	ands	r6, r7
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
    aaca:	cmp	r6, r7
    aacc:	itee	eq
    aace:	moveq	r6, #3
    aad0:	movne	r6, #0
    aad2:	movne	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    aad4:	lsls	r7, r6, #27
    aad6:	eor.w	r6, r1, r6, lsl #27
    aada:	tst.w	r6, #939524096	; 0x38000000
    aade:	beq.n	aaea <set_arm_clock+0x96>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    aae0:	bic.w	r1, r1, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
    aae4:	ldr	r6, [pc, #368]	; (ac58 <set_arm_clock+0x204>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    aae6:	orrs	r1, r7
			CCM_CBCDR = cbcdr;
    aae8:	str	r1, [r6, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    aaea:	lsls	r6, r3, #12
    aaec:	eor.w	r3, r5, r3, lsl #12
    aaf0:	tst.w	r3, #12288	; 0x3000
    aaf4:	beq.n	ab06 <set_arm_clock+0xb2>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    aaf6:	bic.w	r5, r5, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    aafa:	orrs	r6, r5
			CCM_CBCMR = cbcmr;
    aafc:	ldr	r5, [pc, #344]	; (ac58 <set_arm_clock+0x204>)
    aafe:	str	r6, [r5, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    ab00:	ldr	r3, [r5, #72]	; 0x48
    ab02:	lsls	r6, r3, #28
    ab04:	bmi.n	ab00 <set_arm_clock+0xac>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    ab06:	orr.w	r1, r1, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    ab0a:	ldr	r3, [pc, #332]	; (ac58 <set_arm_clock+0x204>)
    ab0c:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    ab0e:	ldr	r5, [r3, #72]	; 0x48
    ab10:	lsls	r5, r5, #26
    ab12:	bmi.n	ab0e <set_arm_clock+0xba>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    ab14:	movs	r6, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    ab16:	ldr	r7, [pc, #348]	; (ac74 <set_arm_clock+0x220>)
	uint32_t div_arm = 1;
    ab18:	mov	r5, r6
	while (frequency * div_arm * div_ahb < 648000000) {
    ab1a:	mul.w	r3, r6, r5
    ab1e:	muls	r3, r0
    ab20:	cmp	r3, r7
    ab22:	bls.w	ac40 <set_arm_clock+0x1ec>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab26:	add.w	r3, r3, #5996544	; 0x5b8000
	if (mult > 108) mult = 108;
    ab2a:	ldr	r0, [pc, #332]	; (ac78 <set_arm_clock+0x224>)
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab2c:	add.w	r3, r3, #3456	; 0xd80
	if (mult > 108) mult = 108;
    ab30:	cmp	r3, r0
    ab32:	ldr	r0, [pc, #328]	; (ac7c <set_arm_clock+0x228>)
    ab34:	bhi.w	ac54 <set_arm_clock+0x200>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    ab38:	udiv	r3, r3, r0
    ab3c:	cmp	r3, #54	; 0x36
    ab3e:	it	cc
    ab40:	movcc	r3, #54	; 0x36

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab42:	ldr	r7, [pc, #296]	; (ac6c <set_arm_clock+0x218>)
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab44:	muls	r0, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab46:	ldr.w	lr, [pc, #344]	; aca0 <set_arm_clock+0x24c>
    ab4a:	ldr.w	ip, [r7]
    ab4e:	and.w	lr, ip, lr
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab52:	orr.w	ip, r3, #2147483648	; 0x80000000
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab56:	udiv	r0, r0, r5
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
    ab5a:	orr.w	ip, ip, #8192	; 0x2000
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab5e:	cmp	lr, ip
	frequency = mult * 12000000 / div_arm / div_ahb;
    ab60:	udiv	r0, r0, r6
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    ab64:	beq.n	ab7a <set_arm_clock+0x126>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ab66:	mov.w	ip, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    ab6a:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    ab6e:	str.w	ip, [r7]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    ab72:	str	r3, [r7, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    ab74:	ldr	r3, [r7, #0]
    ab76:	cmp	r3, #0
    ab78:	bge.n	ab74 <set_arm_clock+0x120>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    ab7a:	ldr	r3, [pc, #220]	; (ac58 <set_arm_clock+0x204>)
    ab7c:	subs	r5, #1
    ab7e:	ldr	r7, [r3, #16]
    ab80:	and.w	r7, r7, #7
    ab84:	cmp	r7, r5
    ab86:	beq.n	ab90 <set_arm_clock+0x13c>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    ab88:	str	r5, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    ab8a:	ldr	r5, [r3, #72]	; 0x48
    ab8c:	lsls	r7, r5, #15
    ab8e:	bmi.n	ab8a <set_arm_clock+0x136>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    ab90:	subs	r3, r6, #1
    ab92:	lsls	r5, r3, #10
    ab94:	eor.w	r3, r1, r3, lsl #10
    ab98:	tst.w	r3, #7168	; 0x1c00
    ab9c:	beq.n	abb2 <set_arm_clock+0x15e>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    ab9e:	and.w	r3, r5, #7168	; 0x1c00
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    aba2:	bic.w	r1, r1, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    aba6:	orrs	r1, r3
		CCM_CBCDR = cbcdr;
    aba8:	ldr	r3, [pc, #172]	; (ac58 <set_arm_clock+0x204>)
    abaa:	str	r1, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    abac:	ldr	r5, [r3, #72]	; 0x48
    abae:	lsls	r5, r5, #30
    abb0:	bmi.n	abac <set_arm_clock+0x158>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    abb2:	ldr	r3, [pc, #204]	; (ac80 <set_arm_clock+0x22c>)
	if (div_ipg > 4) div_ipg = 4;
    abb4:	ldr	r5, [pc, #204]	; (ac84 <set_arm_clock+0x230>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    abb6:	add	r3, r0
	if (div_ipg > 4) div_ipg = 4;
    abb8:	cmp	r3, r5
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    abba:	itet	ls
    abbc:	ldrls	r5, [pc, #200]	; (ac88 <set_arm_clock+0x234>)
	if (div_ipg > 4) div_ipg = 4;
    abbe:	movhi	r3, #4
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    abc0:	udivls	r3, r3, r5
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    abc4:	subs	r6, r3, #1
    abc6:	lsls	r5, r6, #8
    abc8:	eor.w	r6, r1, r6, lsl #8
    abcc:	tst.w	r6, #768	; 0x300
    abd0:	ldr	r6, [pc, #132]	; (ac58 <set_arm_clock+0x204>)
    abd2:	beq.n	abe0 <set_arm_clock+0x18c>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    abd4:	bic.w	r1, r1, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    abd8:	and.w	r5, r5, #768	; 0x300
    abdc:	orrs	r1, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    abde:	str	r1, [r6, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    abe0:	ldr	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    abe2:	ldr	r5, [pc, #116]	; (ac58 <set_arm_clock+0x204>)
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    abe4:	bic.w	r1, r1, #33554432	; 0x2000000
    abe8:	str	r1, [r6, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    abea:	ldr	r1, [r5, #72]	; 0x48
    abec:	lsls	r1, r1, #26
    abee:	bmi.n	abea <set_arm_clock+0x196>

	F_CPU_ACTUAL = frequency;
    abf0:	ldr	r1, [pc, #152]	; (ac8c <set_arm_clock+0x238>)
	F_BUS_ACTUAL = frequency / div_ipg;
    abf2:	udiv	r3, r0, r3
	F_CPU_ACTUAL = frequency;
    abf6:	str	r0, [r1, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
    abf8:	ldr	r1, [pc, #148]	; (ac90 <set_arm_clock+0x23c>)
    abfa:	str	r3, [r1, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    abfc:	mov.w	r3, #4294967295
    ac00:	ldr	r1, [pc, #144]	; (ac94 <set_arm_clock+0x240>)
    ac02:	udiv	r1, r0, r1
    ac06:	udiv	r3, r3, r1
    ac0a:	ldr	r1, [pc, #140]	; (ac98 <set_arm_clock+0x244>)
    ac0c:	str	r3, [r1, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    ac0e:	and.w	r3, r4, #31
    ac12:	cmp	r2, r3
    ac14:	bcs.n	ac26 <set_arm_clock+0x1d2>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    ac16:	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    ac1a:	ldr	r3, [pc, #76]	; (ac68 <set_arm_clock+0x214>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    ac1c:	orrs	r2, r4
		DCDC_REG3 = dcdc;
    ac1e:	str	r2, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    ac20:	ldr	r2, [r3, #0]
    ac22:	cmp	r2, #0
    ac24:	bge.n	ac20 <set_arm_clock+0x1cc>
	}

	return frequency;
}
    ac26:	pop	{r4, r5, r6, r7, pc}
		voltage = 950; // 0.95
    ac28:	ldr	r6, [pc, #112]	; (ac9c <set_arm_clock+0x248>)
    ac2a:	movw	r3, #1150	; 0x47e
    ac2e:	movw	r2, #950	; 0x3b6
    ac32:	cmp	r0, r6
    ac34:	it	ls
    ac36:	movls	r3, r2
    ac38:	b.n	aa8c <set_arm_clock+0x38>
		voltage = 1250; // 1.25V
    ac3a:	movw	r3, #1250	; 0x4e2
    ac3e:	b.n	aa8c <set_arm_clock+0x38>
		if (div_arm < 8) {
    ac40:	cmp	r5, #8
    ac42:	beq.n	ac48 <set_arm_clock+0x1f4>
			div_arm = div_arm + 1;
    ac44:	adds	r5, #1
    ac46:	b.n	ab1a <set_arm_clock+0xc6>
			if (div_ahb < 5) {
    ac48:	cmp	r6, #4
    ac4a:	bhi.w	ab26 <set_arm_clock+0xd2>
				div_ahb = div_ahb + 1;
    ac4e:	adds	r6, #1
				div_arm = 1;
    ac50:	movs	r5, #1
    ac52:	b.n	ab1a <set_arm_clock+0xc6>
	if (mult > 108) mult = 108;
    ac54:	movs	r3, #108	; 0x6c
    ac56:	b.n	ab42 <set_arm_clock+0xee>
    ac58:	.word	0x400fc000
    ac5c:	.word	0x1f78a400
    ac60:	.word	0x23c34600
    ac64:	.word	0x01ab3f00
    ac68:	.word	0x40080000
    ac6c:	.word	0x400d8000
    ac70:	.word	0x80003040
    ac74:	.word	0x269fb1ff
    ac78:	.word	0x4df67eff
    ac7c:	.word	0x00b71b00
    ac80:	.word	0x08f0d17f
    ac84:	.word	0x2cb4177f
    ac88:	.word	0x08f0d180
    ac8c:	.word	0x20001d2c
    ac90:	.word	0x20001d28
    ac94:	.word	0x000f4240
    ac98:	.word	0x20014ce0
    ac9c:	.word	0x016e3600
    aca0:	.word	0x8001307f

0000aca4 <endpoint0_receive>:
{
    aca4:	push	{r4, r5, lr}
    aca6:	ldr	r4, [pc, #136]	; (ad30 <endpoint0_receive+0x8c>)
	if (len > 0) {
    aca8:	cbz	r1, acec <endpoint0_receive+0x48>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    acaa:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    acac:	ldr	r3, [pc, #132]	; (ad34 <endpoint0_receive+0x90>)
    acae:	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    acb0:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    acb4:	str	r0, [r3, #8]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    acb6:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    acb8:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    acba:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    acbe:	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    acc0:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    acc2:	add.w	r1, r0, #8192	; 0x2000
    acc6:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acc8:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    accc:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    acd0:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    acd2:	str	r0, [r3, #24]
		endpoint_queue_head[0].status = 0;
    acd4:	movs	r3, #0
    acd6:	str	r3, [r4, #12]
		USB1_ENDPTPRIME |= (1<<0);
    acd8:	ldr	r3, [pc, #92]	; (ad38 <endpoint0_receive+0x94>)
    acda:	ldr.w	r1, [r3, #432]	; 0x1b0
    acde:	orrs	r1, r5
    ace0:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ace4:	ldr.w	r1, [r3, #432]	; 0x1b0
    ace8:	cmp	r1, #0
    acea:	bne.n	ace4 <endpoint0_receive+0x40>
	endpoint0_transfer_ack.next = 1;
    acec:	ldr	r3, [pc, #76]	; (ad3c <endpoint0_receive+0x98>)
    acee:	movs	r1, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    acf0:	cmp	r2, #0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    acf2:	mov.w	r2, r2, lsl #16
	endpoint0_transfer_ack.next = 1;
    acf6:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    acf8:	movw	r1, #32896	; 0x8080
    acfc:	it	eq
    acfe:	moveq	r1, #128	; 0x80
    ad00:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    ad02:	movs	r1, #0
	endpoint_queue_head[1].status = 0;
    ad04:	strd	r3, r1, [r4, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    ad08:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ad0a:	mov.w	r1, #65537	; 0x10001
    ad0e:	ldr	r3, [pc, #40]	; (ad38 <endpoint0_receive+0x94>)
    ad10:	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    ad14:	ldr.w	r1, [r3, #432]	; 0x1b0
    ad18:	orr.w	r1, r1, #65536	; 0x10000
    ad1c:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    ad20:	ldr	r1, [pc, #28]	; (ad40 <endpoint0_receive+0x9c>)
    ad22:	str	r2, [r1, #0]
	while (USB1_ENDPTPRIME) ;
    ad24:	ldr.w	r2, [r3, #432]	; 0x1b0
    ad28:	cmp	r2, #0
    ad2a:	bne.n	ad24 <endpoint0_receive+0x80>
}
    ad2c:	pop	{r4, r5, pc}
    ad2e:	nop
    ad30:	.word	0x20000000
    ad34:	.word	0x200026e0
    ad38:	.word	0x402e0000
    ad3c:	.word	0x200026c0
    ad40:	.word	0x20014b9c

0000ad44 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    ad44:	ldr	r3, [r0, #56]	; 0x38
{
    ad46:	push	{r4, r5, r6, r7, lr}
	if (endpoint->callback_function) {
    ad48:	cbz	r3, ad52 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    ad4a:	ldr	r3, [r2, #4]
    ad4c:	orr.w	r3, r3, #32768	; 0x8000
    ad50:	str	r3, [r2, #4]
	}
	__disable_irq();
    ad52:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    ad54:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    ad56:	ldr	r3, [pc, #96]	; (adb8 <schedule_transfer+0x74>)
    ad58:	cbz	r4, ada4 <schedule_transfer+0x60>
		last->next = (uint32_t)transfer;
    ad5a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    ad5c:	ldr.w	r4, [r3, #432]	; 0x1b0
    ad60:	tst	r4, r1
    ad62:	bne.n	ad9e <schedule_transfer+0x5a>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    ad64:	ldr	r6, [pc, #84]	; (adbc <schedule_transfer+0x78>)
    ad66:	ldr	r7, [r6, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    ad68:	ldr.w	r4, [r3, #320]	; 0x140
    ad6c:	orr.w	r4, r4, #16384	; 0x4000
    ad70:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    ad74:	ldr.w	r4, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    ad78:	ldr.w	r5, [r3, #320]	; 0x140
    ad7c:	lsls	r5, r5, #17
    ad7e:	bmi.n	ad8a <schedule_transfer+0x46>
    ad80:	ldr	r5, [r6, #4]
    ad82:	subs	r5, r5, r7
    ad84:	cmp.w	r5, #2400	; 0x960
    ad88:	bcc.n	ad68 <schedule_transfer+0x24>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    ad8a:	ands	r4, r1
    ad8c:	bne.n	ad9e <schedule_transfer+0x5a>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
    ad8e:	strd	r2, r4, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    ad92:	ldr	r4, [pc, #36]	; (adb8 <schedule_transfer+0x74>)
    ad94:	ldr.w	r3, [r4, #432]	; 0x1b0
    ad98:	orrs	r3, r1
    ad9a:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    ad9e:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    ada0:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    ada2:	pop	{r4, r5, r6, r7, pc}
	endpoint->status = 0;
    ada4:	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    ada8:	ldr.w	r4, [r3, #432]	; 0x1b0
    adac:	orrs	r1, r4
    adae:	str.w	r1, [r3, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    adb2:	str	r2, [r0, #48]	; 0x30
    adb4:	b.n	ad9e <schedule_transfer+0x5a>
    adb6:	nop
    adb8:	.word	0x402e0000
    adbc:	.word	0xe0001000

0000adc0 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    adc0:	push	{r4, r5, r6, lr}
    adc2:	mov	r4, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    adc4:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    adc6:	cbz	r0, add8 <run_callbacks+0x18>
    adc8:	mov	r2, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    adca:	movs	r5, #0
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    adcc:	ldr	r3, [r2, #4]
    adce:	ands.w	r3, r3, #128	; 0x80
    add2:	beq.n	adda <run_callbacks+0x1a>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    add4:	str	r2, [r4, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    add6:	cbnz	r5, ade8 <run_callbacks+0x28>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
		count--;
	}
}
    add8:	pop	{r4, r5, r6, pc}
		t = (transfer_t *)t->next;
    adda:	ldr	r2, [r2, #0]
		count++;
    addc:	adds	r5, #1
		if ((uint32_t)t == 1) {
    adde:	cmp	r2, #1
    ade0:	bne.n	adcc <run_callbacks+0xc>
			ep->last_transfer = NULL;
    ade2:	strd	r3, r3, [r4, #48]	; 0x30
			break;
    ade6:	b.n	add6 <run_callbacks+0x16>
		transfer_t *next = (transfer_t *)first->next;
    ade8:	ldr	r6, [r0, #0]
		count--;
    adea:	subs	r5, #1
		ep->callback_function(first);
    adec:	ldr	r3, [r4, #56]	; 0x38
    adee:	blx	r3
		first = next;
    adf0:	mov	r0, r6
    adf2:	b.n	add6 <run_callbacks+0x16>

0000adf4 <usb_endpoint_config>:
{
    adf4:	push	{r4, r5, r6, lr}
    adf6:	mov	r4, r0
    adf8:	mov	r6, r1
    adfa:	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
    adfc:	movs	r1, #0
    adfe:	movs	r2, #60	; 0x3c
    ae00:	adds	r0, #4
    ae02:	bl	a210 <memset>
	qh->next = 1; // Terminate bit = 1
    ae06:	movs	r3, #1
	qh->config = config;
    ae08:	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
    ae0a:	str	r3, [r4, #8]
	qh->callback_function = callback;
    ae0c:	str	r5, [r4, #56]	; 0x38
}
    ae0e:	pop	{r4, r5, r6, pc}

0000ae10 <endpoint0_transmit.constprop.0>:
	if (len > 0) {
    ae10:	ldr	r2, [pc, #124]	; (ae90 <endpoint0_transmit.constprop.0+0x80>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    ae12:	push	{r4, lr}
	if (len > 0) {
    ae14:	cbz	r1, ae5a <endpoint0_transmit.constprop.0+0x4a>
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae16:	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    ae18:	ldr	r3, [pc, #120]	; (ae94 <endpoint0_transmit.constprop.0+0x84>)
    ae1a:	movs	r4, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae1c:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    ae20:	str	r0, [r3, #8]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    ae22:	str	r3, [r2, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    ae24:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ae26:	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    ae2a:	str	r4, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    ae2c:	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    ae2e:	add.w	r1, r0, #8192	; 0x2000
    ae32:	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae34:	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae38:	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    ae3c:	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    ae3e:	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    ae40:	movs	r3, #0
    ae42:	str	r3, [r2, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    ae44:	ldr	r3, [pc, #80]	; (ae98 <endpoint0_transmit.constprop.0+0x88>)
    ae46:	ldr.w	r1, [r3, #432]	; 0x1b0
    ae4a:	orr.w	r1, r1, #65536	; 0x10000
    ae4e:	str.w	r1, [r3, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    ae52:	ldr.w	r1, [r3, #432]	; 0x1b0
    ae56:	cmp	r1, #0
    ae58:	bne.n	ae52 <endpoint0_transmit.constprop.0+0x42>
	endpoint0_transfer_ack.next = 1;
    ae5a:	ldr	r3, [pc, #64]	; (ae9c <endpoint0_transmit.constprop.0+0x8c>)
    ae5c:	movs	r1, #1
    ae5e:	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    ae60:	movs	r1, #128	; 0x80
    ae62:	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
    ae64:	movs	r1, #0
	endpoint_queue_head[0].status = 0;
    ae66:	strd	r3, r1, [r2, #8]
	endpoint0_transfer_ack.pointer0 = 0;
    ae6a:	str	r1, [r3, #8]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    ae6c:	mov.w	r2, #65537	; 0x10001
    ae70:	ldr	r3, [pc, #36]	; (ae98 <endpoint0_transmit.constprop.0+0x88>)
    ae72:	str.w	r2, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    ae76:	ldr.w	r2, [r3, #432]	; 0x1b0
    ae7a:	orr.w	r2, r2, #1
    ae7e:	str.w	r2, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    ae82:	ldr	r2, [pc, #28]	; (aea0 <endpoint0_transmit.constprop.0+0x90>)
    ae84:	str	r1, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    ae86:	ldr.w	r2, [r3, #432]	; 0x1b0
    ae8a:	cmp	r2, #0
    ae8c:	bne.n	ae86 <endpoint0_transmit.constprop.0+0x76>
}
    ae8e:	pop	{r4, pc}
    ae90:	.word	0x20000000
    ae94:	.word	0x200026e0
    ae98:	.word	0x402e0000
    ae9c:	.word	0x200026c0
    aea0:	.word	0x20014b9c

0000aea4 <usb_start_sof_interrupts>:
	__disable_irq();
    aea4:	cpsid	i
	sof_usage |= (1 << interface);
    aea6:	ldr	r2, [pc, #40]	; (aed0 <usb_start_sof_interrupts+0x2c>)
    aea8:	movs	r3, #1
    aeaa:	lsl.w	r0, r3, r0
    aeae:	ldrb	r3, [r2, #0]
    aeb0:	orrs	r0, r3
    aeb2:	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
    aeb4:	ldr	r2, [pc, #28]	; (aed4 <usb_start_sof_interrupts+0x30>)
    aeb6:	ldr.w	r3, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    aeba:	lsls	r1, r3, #24
    aebc:	bmi.n	aeca <usb_start_sof_interrupts+0x26>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aebe:	movs	r1, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aec0:	orrs	r3, r1
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    aec2:	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    aec6:	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
    aeca:	cpsie	i
}
    aecc:	bx	lr
    aece:	nop
    aed0:	.word	0x200155d9
    aed4:	.word	0x402e0000

0000aed8 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    aed8:	movs	r3, #1
    aeda:	ldr	r2, [pc, #32]	; (aefc <usb_stop_sof_interrupts+0x24>)
    aedc:	lsl.w	r0, r3, r0
    aee0:	ldrb	r3, [r2, #0]
    aee2:	bic.w	r0, r3, r0
    aee6:	strb	r0, [r2, #0]
	if (sof_usage == 0) {
    aee8:	cbnz	r0, aef8 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    aeea:	ldr	r2, [pc, #20]	; (af00 <usb_stop_sof_interrupts+0x28>)
    aeec:	ldr.w	r3, [r2, #328]	; 0x148
    aef0:	bic.w	r3, r3, #128	; 0x80
    aef4:	str.w	r3, [r2, #328]	; 0x148
}
    aef8:	bx	lr
    aefa:	nop
    aefc:	.word	0x200155d9
    af00:	.word	0x402e0000

0000af04 <usb_isr>:
{
    af04:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
    af08:	ldr	r4, [pc, #676]	; (b1b0 <usb_isr+0x2ac>)
    af0a:	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    af0e:	lsls	r0, r6, #31
	USB1_USBSTS = status;
    af10:	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    af14:	bmi.n	af7c <usb_isr+0x78>
	if (status & USB_USBSTS_URI) { // page 3164
    af16:	lsls	r1, r6, #25
    af18:	bmi.w	b342 <usb_isr+0x43e>
	if (status & USB_USBSTS_TI0) {
    af1c:	lsls	r4, r6, #7
    af1e:	bpl.n	af28 <usb_isr+0x24>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    af20:	ldr	r3, [pc, #656]	; (b1b4 <usb_isr+0x2b0>)
    af22:	ldr	r3, [r3, #0]
    af24:	cbz	r3, af28 <usb_isr+0x24>
    af26:	blx	r3
	if (status & USB_USBSTS_TI1) {
    af28:	lsls	r0, r6, #6
    af2a:	bpl.n	af34 <usb_isr+0x30>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    af2c:	ldr	r3, [pc, #648]	; (b1b8 <usb_isr+0x2b4>)
    af2e:	ldr	r3, [r3, #0]
    af30:	cbz	r3, af34 <usb_isr+0x30>
    af32:	blx	r3
	if (status & USB_USBSTS_PCI) {
    af34:	lsls	r1, r6, #29
    af36:	bpl.n	af4a <usb_isr+0x46>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    af38:	ldr	r3, [pc, #628]	; (b1b0 <usb_isr+0x2ac>)
    af3a:	ldr	r2, [pc, #640]	; (b1bc <usb_isr+0x2b8>)
    af3c:	ldr.w	r3, [r3, #388]	; 0x184
    af40:	ands.w	r3, r3, #512	; 0x200
			usb_high_speed = 1;
    af44:	it	ne
    af46:	movne	r3, #1
			usb_high_speed = 0;
    af48:	strb	r3, [r2, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    af4a:	ldr	r3, [pc, #612]	; (b1b0 <usb_isr+0x2ac>)
    af4c:	ldr.w	r3, [r3, #328]	; 0x148
    af50:	lsls	r2, r3, #24
    af52:	bpl.w	b372 <usb_isr+0x46e>
    af56:	lsls	r3, r6, #24
    af58:	bpl.w	b372 <usb_isr+0x46e>
		if (usb_reboot_timer) {
    af5c:	ldr	r2, [pc, #608]	; (b1c0 <usb_isr+0x2bc>)
    af5e:	ldrb	r3, [r2, #0]
    af60:	cmp	r3, #0
    af62:	beq.w	b372 <usb_isr+0x46e>
			if (--usb_reboot_timer == 0) {
    af66:	subs	r3, #1
    af68:	uxtb	r3, r3
    af6a:	strb	r3, [r2, #0]
    af6c:	cmp	r3, #0
    af6e:	bne.w	b372 <usb_isr+0x46e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    af72:	movs	r0, #3
    af74:	bl	aed8 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    af78:	bl	120e0 <___reboot_Teensyduino__veneer>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    af7c:	ldr.w	r3, [r4, #428]	; 0x1ac
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    af80:	ldr	r7, [pc, #576]	; (b1c4 <usb_isr+0x2c0>)
		while (setupstatus) {
    af82:	cmp	r3, #0
    af84:	bne.n	b00e <usb_isr+0x10a>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    af86:	ldr.w	r5, [r4, #444]	; 0x1bc
		if (completestatus) {
    af8a:	cmp	r5, #0
    af8c:	beq.n	af16 <usb_isr+0x12>
			if (completestatus & endpoint0_notify_mask) {
    af8e:	ldr	r2, [pc, #568]	; (b1c8 <usb_isr+0x2c4>)
			USB1_ENDPTCOMPLETE = completestatus;
    af90:	str.w	r5, [r4, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    af94:	ldr	r1, [r2, #0]
    af96:	tst	r5, r1
    af98:	beq.n	afd0 <usb_isr+0xcc>
				endpoint0_notify_mask = 0;
    af9a:	str	r3, [r2, #0]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    af9c:	movw	r1, #8225	; 0x2021
	setup.bothwords = endpoint0_setupdata.bothwords;
    afa0:	ldr	r2, [pc, #552]	; (b1cc <usb_isr+0x2c8>)
    afa2:	ldr	r3, [r2, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    afa4:	ldrh	r2, [r2, #0]
    afa6:	cmp	r2, r1
    afa8:	bne.w	b304 <usb_isr+0x400>
    afac:	uxth	r3, r3
    afae:	cbnz	r3, afd0 <usb_isr+0xcc>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    afb0:	ldr	r2, [pc, #540]	; (b1d0 <usb_isr+0x2cc>)
    afb2:	ldr	r3, [pc, #544]	; (b1d4 <usb_isr+0x2d0>)
    afb4:	ldr	r0, [r2, #0]
    afb6:	ldrh	r1, [r2, #4]
		if (usb_cdc_line_coding[0] == 134) {
    afb8:	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    afba:	ldrb	r2, [r2, #6]
    afbc:	str	r0, [r3, #0]
    afbe:	strh	r1, [r3, #4]
    afc0:	strb	r2, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
    afc2:	bne.n	afd0 <usb_isr+0xcc>
			usb_start_sof_interrupts(NUM_INTERFACE);
    afc4:	movs	r0, #3
    afc6:	bl	aea4 <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    afca:	ldr	r3, [pc, #500]	; (b1c0 <usb_isr+0x2bc>)
    afcc:	movs	r2, #80	; 0x50
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    afce:	strb	r2, [r3, #0]
			completestatus &= endpointN_notify_mask;
    afd0:	ldr	r3, [pc, #516]	; (b1d8 <usb_isr+0x2d4>)
    afd2:	ldr	r3, [r3, #0]
			if (completestatus) {
    afd4:	ands	r5, r3
    afd6:	beq.n	af16 <usb_isr+0x12>
				uint32_t tx = completestatus >> 16;
    afd8:	lsrs	r4, r5, #16
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    afda:	ldr.w	r8, [pc, #512]	; b1dc <usb_isr+0x2d8>
					tx &= ~(1<<p);
    afde:	mov.w	r9, #1
				while (tx) {
    afe2:	cmp	r4, #0
    afe4:	bne.w	b326 <usb_isr+0x422>
				uint32_t rx = completestatus & 0xffff;
    afe8:	uxth	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    afea:	ldr	r7, [pc, #496]	; (b1dc <usb_isr+0x2d8>)
					rx &= ~(1<<p);
    afec:	mov.w	r8, #1
				while(rx) {
    aff0:	cmp	r5, #0
    aff2:	beq.n	af16 <usb_isr+0x12>
					int p=__builtin_ctz(rx);
    aff4:	rbit	r4, r5
    aff8:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    affc:	add.w	r0, r7, r4, lsl #7
					rx &= ~(1<<p);
    b000:	lsl.w	r4, r8, r4
					run_callbacks(endpoint_queue_head + p * 2);
    b004:	bl	adc0 <run_callbacks>
					rx &= ~(1<<p);
    b008:	bic.w	r5, r5, r4
    b00c:	b.n	aff0 <usb_isr+0xec>
			USB1_ENDPTSETUPSTAT = setupstatus;
    b00e:	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
    b012:	ldr	r3, [pc, #456]	; (b1dc <usb_isr+0x2d8>)
				s.word2 = endpoint_queue_head[0].setup1;
    b014:	ldrd	r5, r3, [r3, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    b018:	ldr.w	r2, [r4, #320]	; 0x140
    b01c:	orr.w	r2, r2, #8192	; 0x2000
    b020:	str.w	r2, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    b024:	ldr.w	r2, [r4, #320]	; 0x140
    b028:	lsls	r2, r2, #18
    b02a:	bpl.n	b018 <usb_isr+0x114>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    b02c:	ldr.w	r2, [r4, #320]	; 0x140
    b030:	bic.w	r2, r2, #8192	; 0x2000
    b034:	str.w	r2, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    b038:	mov.w	r2, #65537	; 0x10001
    b03c:	str.w	r2, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    b040:	ldr.w	r2, [r4, #436]	; 0x1b4
    b044:	ands.w	r8, r2, #65537	; 0x10001
    b048:	bne.n	b040 <usb_isr+0x13c>
			endpoint0_notify_mask = 0;
    b04a:	uxth	r1, r5
    b04c:	ldr	r2, [pc, #376]	; (b1c8 <usb_isr+0x2c4>)
	switch (setup.wRequestAndType) {
    b04e:	cmp.w	r1, #2176	; 0x880
			endpoint0_notify_mask = 0;
    b052:	str.w	r8, [r2]
	switch (setup.wRequestAndType) {
    b056:	beq.w	b192 <usb_isr+0x28e>
    b05a:	bhi.n	b0f2 <usb_isr+0x1ee>
    b05c:	movw	r2, #770	; 0x302
    b060:	cmp	r1, r2
    b062:	beq.w	b236 <usb_isr+0x332>
    b066:	bhi.n	b086 <usb_isr+0x182>
    b068:	cmp	r1, #130	; 0x82
    b06a:	beq.w	b200 <usb_isr+0x2fc>
    b06e:	cmp.w	r1, #258	; 0x102
    b072:	beq.w	b25c <usb_isr+0x358>
    b076:	cmp	r1, #128	; 0x80
    b078:	beq.w	b1a2 <usb_isr+0x29e>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    b07c:	mov.w	r3, #65537	; 0x10001
    b080:	str.w	r3, [r4, #448]	; 0x1c0
    b084:	b.n	b18c <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b086:	cmp.w	r1, #1280	; 0x500
    b08a:	beq.n	b176 <usb_isr+0x272>
    b08c:	sub.w	r1, r1, #1664	; 0x680
    b090:	cmp	r1, #1
    b092:	bhi.n	b07c <usb_isr+0x178>
    b094:	ldr	r2, [pc, #328]	; (b1e0 <usb_isr+0x2dc>)
    b096:	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b09a:	uxth.w	ip, r3
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b09e:	ldr	r1, [r2, #4]
    b0a0:	cmp	r1, #0
    b0a2:	beq.n	b07c <usb_isr+0x178>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b0a4:	ldrh.w	lr, [r2]
    b0a8:	mov	r0, r5
    b0aa:	cmp	lr, r5
    b0ac:	bne.w	b2cc <usb_isr+0x3c8>
    b0b0:	ldrh.w	lr, [r2, #2]
    b0b4:	cmp	lr, ip
    b0b6:	bne.w	b2cc <usb_isr+0x3c8>
				if ((setup.wValue >> 8) == 3) {
    b0ba:	lsrs	r5, r5, #8
				if (datalen > setup.wLength) datalen = setup.wLength;
    b0bc:	mov.w	r8, r3, lsr #16
    b0c0:	ldr	r3, [pc, #288]	; (b1e4 <usb_isr+0x2e0>)
				if ((setup.wValue >> 8) == 3) {
    b0c2:	cmp	r5, #3
					datalen = *(list->addr);
    b0c4:	ite	eq
    b0c6:	ldrbeq	r2, [r1, #0]
					datalen = list->length;
    b0c8:	ldrhne	r2, [r2, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    b0ca:	cmp	r8, r2
    b0cc:	it	cs
    b0ce:	movcs	r8, r2
				if (setup.wValue == 0x200) {
    b0d0:	cmp.w	r0, #512	; 0x200
    b0d4:	bne.w	b27e <usb_isr+0x37a>
					if (usb_high_speed) src = usb_config_descriptor_480;
    b0d8:	ldr	r2, [pc, #224]	; (b1bc <usb_isr+0x2b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b0da:	ldr	r1, [pc, #268]	; (b1e8 <usb_isr+0x2e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    b0dc:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b0de:	mov	r2, r8
    b0e0:	ldr	r0, [pc, #264]	; (b1ec <usb_isr+0x2e8>)
    b0e2:	cmp	r5, #0
    b0e4:	it	ne
    b0e6:	movne	r1, r0
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b0e8:	mov	r0, r3
    b0ea:	bl	a254 <memcpy>
    b0ee:	mov	r3, r0
    b0f0:	b.n	b2a0 <usb_isr+0x39c>
	switch (setup.wRequestAndType) {
    b0f2:	movw	r2, #8993	; 0x2321
    b0f6:	cmp	r1, r2
    b0f8:	beq.n	b13c <usb_isr+0x238>
    b0fa:	bhi.n	b148 <usb_isr+0x244>
    b0fc:	movw	r2, #8225	; 0x2021
    b100:	cmp	r1, r2
    b102:	beq.w	b2ea <usb_isr+0x3e6>
    b106:	movw	r2, #8737	; 0x2221
    b10a:	cmp	r1, r2
    b10c:	beq.w	b2d0 <usb_isr+0x3cc>
    b110:	cmp.w	r1, #2304	; 0x900
    b114:	bne.n	b07c <usb_isr+0x178>
		usb_configuration = setup.wValue;
    b116:	ldr	r3, [pc, #216]	; (b1f0 <usb_isr+0x2ec>)
    b118:	ubfx	r5, r5, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b11c:	mov.w	r2, #13107400	; 0xc800c8
		usb_configuration = setup.wValue;
    b120:	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    b122:	ldr	r3, [pc, #208]	; (b1f4 <usb_isr+0x2f0>)
    b124:	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    b128:	str.w	r2, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    b12c:	str.w	r2, [r4, #464]	; 0x1d0
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    b130:	str.w	r3, [r4, #468]	; 0x1d4
		usb_serial_configure();
    b134:	bl	a524 <usb_serial_configure>
		usb_mtp_configure();
    b138:	bl	c144 <usb_mtp_configure>
		endpoint0_receive(NULL, 0, 0);
    b13c:	movs	r2, #0
    b13e:	mov	r1, r2
    b140:	mov	r0, r2
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b142:	bl	aca4 <endpoint0_receive>
			return;
    b146:	b.n	b18c <usb_isr+0x288>
	switch (setup.wRequestAndType) {
    b148:	movw	r2, #25633	; 0x6421
    b14c:	cmp	r1, r2
    b14e:	beq.w	b2fe <usb_isr+0x3fa>
    b152:	movw	r2, #26529	; 0x67a1
    b156:	cmp	r1, r2
    b158:	bne.n	b07c <usb_isr+0x178>
		if (setup.wLength >= 4) {
    b15a:	cmp.w	r3, #262144	; 0x40000
    b15e:	bcc.n	b07c <usb_isr+0x178>
			endpoint0_buffer[2] = usb_mtp_status;
    b160:	ldr	r3, [pc, #148]	; (b1f8 <usb_isr+0x2f4>)
			endpoint0_buffer[0] = 4;
    b162:	movs	r1, #4
    b164:	ldr	r0, [pc, #104]	; (b1d0 <usb_isr+0x2cc>)
			endpoint0_buffer[2] = usb_mtp_status;
    b166:	ldrb	r3, [r3, #0]
			endpoint0_buffer[0] = 4;
    b168:	strb	r1, [r0, #0]
			endpoint0_buffer[2] = usb_mtp_status;
    b16a:	strb	r3, [r0, #2]
			endpoint0_buffer[3] = 0x20;
    b16c:	movs	r3, #32
			endpoint0_buffer[1] = 0;
    b16e:	strb.w	r8, [r0, #1]
			endpoint0_buffer[3] = 0x20;
    b172:	strb	r3, [r0, #3]
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    b174:	b.n	b19c <usb_isr+0x298>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b176:	lsrs	r5, r5, #16
		endpoint0_receive(NULL, 0, 0);
    b178:	mov	r2, r8
    b17a:	mov	r1, r8
    b17c:	mov	r0, r8
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b17e:	lsls	r5, r5, #25
		endpoint0_receive(NULL, 0, 0);
    b180:	bl	aca4 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    b184:	orr.w	r5, r5, #16777216	; 0x1000000
    b188:	str.w	r5, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    b18c:	ldr.w	r3, [r4, #428]	; 0x1ac
    b190:	b.n	af82 <usb_isr+0x7e>
		reply_buffer[0] = usb_configuration;
    b192:	ldr	r3, [pc, #92]	; (b1f0 <usb_isr+0x2ec>)
		endpoint0_transmit(reply_buffer, 1, 0);
    b194:	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    b196:	ldr	r0, [pc, #100]	; (b1fc <usb_isr+0x2f8>)
    b198:	ldrb	r3, [r3, #0]
    b19a:	strb	r3, [r0, #0]
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b19c:	bl	ae10 <endpoint0_transmit.constprop.0>
				return;
    b1a0:	b.n	b18c <usb_isr+0x288>
		reply_buffer[0] = 0;
    b1a2:	ldr	r0, [pc, #88]	; (b1fc <usb_isr+0x2f8>)
		endpoint0_transmit(reply_buffer, 2, 0);
    b1a4:	movs	r1, #2
		reply_buffer[0] = 0;
    b1a6:	strb.w	r8, [r0]
		reply_buffer[1] = 0;
    b1aa:	strb.w	r8, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    b1ae:	b.n	b19c <usb_isr+0x298>
    b1b0:	.word	0x402e0000
    b1b4:	.word	0x2001538c
    b1b8:	.word	0x20015390
    b1bc:	.word	0x200155e0
    b1c0:	.word	0x200155e1
    b1c4:	.word	0x402e01c0
    b1c8:	.word	0x20014b9c
    b1cc:	.word	0x20007dc0
    b1d0:	.word	0x200155b5
    b1d4:	.word	0x20015380
    b1d8:	.word	0x20014ba0
    b1dc:	.word	0x20000000
    b1e0:	.word	0x200009b8
    b1e4:	.word	0x20202000
    b1e8:	.word	0x6000264c
    b1ec:	.word	0x600026b5
    b1f0:	.word	0x200155df
    b1f4:	.word	0x00cc0002
    b1f8:	.word	0x2000231f
    b1fc:	.word	0x200155bf
		endpoint = setup.wIndex & 0x7F;
    b200:	uxth	r0, r3
		if (endpoint > 7) break;
    b202:	ands.w	r3, r3, #120	; 0x78
    b206:	bne.w	b07c <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b20a:	and.w	r2, r0, #127	; 0x7f
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b20e:	lsls	r5, r0, #24
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    b210:	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
    b214:	ldr	r2, [pc, #352]	; (b378 <usb_isr+0x474>)
    b216:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    b218:	strb	r3, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b21a:	bpl.n	b230 <usb_isr+0x32c>
    b21c:	tst.w	r1, #65536	; 0x10000
			reply_buffer[0] = 1;
    b220:	it	ne
    b222:	movne	r3, #1
		endpoint0_transmit(reply_buffer, 2, 0);
    b224:	mov.w	r1, #2
    b228:	ldr	r0, [pc, #332]	; (b378 <usb_isr+0x474>)
			reply_buffer[0] = 1;
    b22a:	it	ne
    b22c:	strbne	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    b22e:	b.n	b19c <usb_isr+0x298>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    b230:	tst.w	r1, #1
    b234:	b.n	b220 <usb_isr+0x31c>
		if (endpoint > 7) break;
    b236:	tst.w	r3, #120	; 0x78
    b23a:	uxth	r2, r3
    b23c:	bne.w	b07c <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b240:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b244:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    b248:	ldr.w	r2, [r7, r3, lsl #2]
    b24c:	ite	ne
    b24e:	orrne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    b252:	orreq.w	r2, r2, #1
    b256:	str.w	r2, [r7, r3, lsl #2]
    b25a:	b.n	b13c <usb_isr+0x238>
		if (endpoint > 7) break;
    b25c:	tst.w	r3, #120	; 0x78
    b260:	uxth	r2, r3
    b262:	bne.w	b07c <usb_isr+0x178>
		endpoint = setup.wIndex & 0x7F;
    b266:	and.w	r3, r2, #127	; 0x7f
		if (dir) {
    b26a:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    b26e:	ldr.w	r2, [r7, r3, lsl #2]
    b272:	ite	ne
    b274:	bicne.w	r2, r2, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    b278:	biceq.w	r2, r2, #1
    b27c:	b.n	b256 <usb_isr+0x352>
				} else if (setup.wValue == 0x700) {
    b27e:	cmp.w	r0, #1792	; 0x700
    b282:	bne.n	b2c8 <usb_isr+0x3c4>
					if (usb_high_speed) src = usb_config_descriptor_12;
    b284:	ldr	r2, [pc, #244]	; (b37c <usb_isr+0x478>)
					memcpy(usb_descriptor_buffer, src, datalen);
    b286:	ldr	r0, [pc, #248]	; (b380 <usb_isr+0x47c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    b288:	ldrb	r5, [r2, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
    b28a:	mov	r2, r8
    b28c:	ldr	r1, [pc, #244]	; (b384 <usb_isr+0x480>)
    b28e:	cmp	r5, #0
    b290:	it	ne
    b292:	movne	r1, r0
    b294:	mov	r0, r3
    b296:	bl	a254 <memcpy>
					usb_descriptor_buffer[1] = 7;
    b29a:	movs	r2, #7
					memcpy(usb_descriptor_buffer, src, datalen);
    b29c:	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
    b29e:	strb	r2, [r0, #1]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    b2a0:	bic.w	r5, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
    b2a4:	add.w	r0, r3, r8
	asm("dsb");
    b2a8:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b2ac:	mov.w	r3, #3758153728	; 0xe000e000
    b2b0:	str.w	r5, [r3, #3952]	; 0xf70
		location += 32;
    b2b4:	adds	r5, #32
	} while (location < end_addr);
    b2b6:	cmp	r0, r5
    b2b8:	bhi.n	b2b0 <usb_isr+0x3ac>
	asm("dsb");
    b2ba:	dsb	sy
	asm("isb");
    b2be:	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    b2c2:	ldr	r0, [pc, #196]	; (b388 <usb_isr+0x484>)
    b2c4:	mov	r1, r8
    b2c6:	b.n	b19c <usb_isr+0x298>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    b2c8:	mov	r2, r8
    b2ca:	b.n	b0e8 <usb_isr+0x1e4>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    b2cc:	adds	r2, #12
    b2ce:	b.n	b09e <usb_isr+0x19a>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    b2d0:	uxth	r3, r3
    b2d2:	cmp	r3, #0
    b2d4:	bne.w	b13c <usb_isr+0x238>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b2d8:	ldr	r3, [pc, #176]	; (b38c <usb_isr+0x488>)
			usb_cdc_line_rtsdtr = setup.wValue;
    b2da:	ubfx	r5, r5, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b2de:	ldr	r2, [r3, #0]
    b2e0:	ldr	r3, [pc, #172]	; (b390 <usb_isr+0x48c>)
    b2e2:	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b2e4:	ldr	r3, [pc, #172]	; (b394 <usb_isr+0x490>)
    b2e6:	strb	r5, [r3, #0]
		endpoint0_receive(NULL, 0, 0);
    b2e8:	b.n	b13c <usb_isr+0x238>
		if (setup.wLength != 7) break;
    b2ea:	lsrs	r1, r3, #16
    b2ec:	cmp	r1, #7
		if (setup.wLength == 6) {
    b2ee:	bne.w	b07c <usb_isr+0x178>
			endpoint0_setupdata.bothwords = setupdata;
    b2f2:	ldr	r2, [pc, #164]	; (b398 <usb_isr+0x494>)
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b2f4:	ldr	r0, [pc, #164]	; (b39c <usb_isr+0x498>)
			endpoint0_setupdata.bothwords = setupdata;
    b2f6:	strd	r5, r3, [r2]
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    b2fa:	movs	r2, #1
    b2fc:	b.n	b142 <usb_isr+0x23e>
		if (setup.wLength == 6) {
    b2fe:	lsrs	r1, r3, #16
    b300:	cmp	r1, #6
    b302:	b.n	b2ee <usb_isr+0x3ea>
	if (setup.wRequestAndType == 0x6421) {
    b304:	movw	r3, #25633	; 0x6421
    b308:	cmp	r2, r3
    b30a:	bne.w	afd0 <usb_isr+0xcc>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    b30e:	ldr	r3, [pc, #140]	; (b39c <usb_isr+0x498>)
    b310:	ldrb	r2, [r3, #0]
    b312:	cmp	r2, #1
    b314:	bne.w	afd0 <usb_isr+0xcc>
    b318:	ldrb	r3, [r3, #1]
    b31a:	cmp	r3, #64	; 0x40
    b31c:	bne.w	afd0 <usb_isr+0xcc>
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    b320:	ldr	r3, [pc, #124]	; (b3a0 <usb_isr+0x49c>)
    b322:	movs	r2, #25
    b324:	b.n	afce <usb_isr+0xca>
					int p=__builtin_ctz(tx);
    b326:	rbit	r7, r4
    b32a:	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b32e:	add.w	r0, r8, r7, lsl #7
					tx &= ~(1<<p);
    b332:	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b336:	adds	r0, #64	; 0x40
					tx &= ~(1<<p);
    b338:	bic.w	r4, r4, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    b33c:	bl	adc0 <run_callbacks>
					tx &= ~(1<<p);
    b340:	b.n	afe2 <usb_isr+0xde>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    b342:	ldr	r3, [pc, #96]	; (b3a4 <usb_isr+0x4a0>)
    b344:	ldr.w	r2, [r3, #428]	; 0x1ac
    b348:	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    b34c:	ldr.w	r2, [r3, #444]	; 0x1bc
    b350:	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    b354:	ldr.w	r4, [r3, #432]	; 0x1b0
    b358:	cmp	r4, #0
    b35a:	bne.n	b354 <usb_isr+0x450>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    b35c:	mov.w	r2, #4294967295
    b360:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    b364:	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    b368:	bl	a520 <usb_serial_reset>
		endpointN_notify_mask = 0;
    b36c:	ldr	r3, [pc, #56]	; (b3a8 <usb_isr+0x4a4>)
    b36e:	str	r4, [r3, #0]
    b370:	b.n	af1c <usb_isr+0x18>
}
    b372:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b376:	nop
    b378:	.word	0x200155bf
    b37c:	.word	0x200155e0
    b380:	.word	0x6000264c
    b384:	.word	0x600026b5
    b388:	.word	0x20202000
    b38c:	.word	0x20015374
    b390:	.word	0x20015388
    b394:	.word	0x200155de
    b398:	.word	0x20007dc0
    b39c:	.word	0x200155b5
    b3a0:	.word	0x2000231f
    b3a4:	.word	0x402e0000
    b3a8:	.word	0x20014ba0

0000b3ac <usb_config_rx>:
{
    b3ac:	push	{r4, r5, r6, lr}
    b3ae:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3b0:	subs	r3, r0, #2
{
    b3b2:	mov	r5, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3b4:	cmp	r3, #3
    b3b6:	bhi.n	b3e0 <usb_config_rx+0x34>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3b8:	clz	r4, r2
    b3bc:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b3be:	ldr	r0, [pc, #36]	; (b3e4 <usb_config_rx+0x38>)
    b3c0:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3c2:	lsrs	r4, r4, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    b3c4:	add.w	r0, r0, r5, lsl #7
    b3c8:	orr.w	r1, r1, r4, lsl #29
    b3cc:	bl	adf4 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
    b3d0:	cbz	r6, b3e0 <usb_config_rx+0x34>
    b3d2:	ldr	r2, [pc, #20]	; (b3e8 <usb_config_rx+0x3c>)
    b3d4:	movs	r3, #1
    b3d6:	lsl.w	r0, r3, r5
    b3da:	ldr	r3, [r2, #0]
    b3dc:	orrs	r0, r3
    b3de:	str	r0, [r2, #0]
}
    b3e0:	pop	{r4, r5, r6, pc}
    b3e2:	nop
    b3e4:	.word	0x20000000
    b3e8:	.word	0x20014ba0

0000b3ec <usb_config_tx>:
{
    b3ec:	push	{r4, r5, r6, lr}
    b3ee:	mov	r6, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3f0:	subs	r3, r0, #2
{
    b3f2:	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    b3f4:	cmp	r3, #3
    b3f6:	bhi.n	b422 <usb_config_tx+0x36>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3f8:	clz	r5, r2
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b3fc:	ldr	r0, [pc, #36]	; (b424 <usb_config_tx+0x38>)
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b3fe:	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b400:	mov	r2, r6
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    b402:	lsrs	r5, r5, #5
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    b404:	add.w	r0, r0, r4, lsl #7
    b408:	orr.w	r1, r1, r5, lsl #29
    b40c:	adds	r0, #64	; 0x40
    b40e:	bl	adf4 <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    b412:	cbz	r6, b422 <usb_config_tx+0x36>
    b414:	ldr	r2, [pc, #16]	; (b428 <usb_config_tx+0x3c>)
    b416:	adds	r4, #16
    b418:	movs	r3, #1
    b41a:	ldr	r1, [r2, #0]
    b41c:	lsls	r3, r4
    b41e:	orrs	r3, r1
    b420:	str	r3, [r2, #0]
}
    b422:	pop	{r4, r5, r6, pc}
    b424:	.word	0x20000000
    b428:	.word	0x20014ba0

0000b42c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    b42c:	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    b42e:	str	r1, [r0, #8]
	transfer->status = (len << 16) | (1<<7);
    b430:	orr.w	r2, r2, #128	; 0x80
    b434:	str	r2, [r0, #4]
	transfer->pointer1 = addr + 4096;
    b436:	add.w	r2, r1, #4096	; 0x1000
    b43a:	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
    b43c:	add.w	r2, r1, #8192	; 0x2000
{
    b440:	push	{r4, lr}
	transfer->pointer2 = addr + 8192;
    b442:	str	r2, [r0, #16]
	transfer->next = 1;
    b444:	movs	r4, #1
	transfer->pointer3 = addr + 12288;
    b446:	add.w	r2, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    b44a:	add.w	r1, r1, #16384	; 0x4000
	transfer->next = 1;
    b44e:	str	r4, [r0, #0]
	transfer->pointer3 = addr + 12288;
    b450:	str	r2, [r0, #20]
	transfer->callback_param = param;
    b452:	strd	r1, r3, [r0, #24]
}
    b456:	pop	{r4, pc}

0000b458 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b458:	subs	r3, r0, #2
{
    b45a:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b45c:	cmp	r3, #3
    b45e:	bhi.n	b476 <usb_transmit+0x1e>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b460:	ldr	r3, [pc, #20]	; (b478 <usb_transmit+0x20>)
	uint32_t mask = 1 << (endpoint_number + 16);
    b462:	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    b466:	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    b46a:	movs	r3, #1
    b46c:	adds	r0, #64	; 0x40
    b46e:	lsl.w	r1, r3, r1
    b472:	b.w	ad44 <schedule_transfer>
}
    b476:	bx	lr
    b478:	.word	0x20000000

0000b47c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b47c:	subs	r3, r0, #2
{
    b47e:	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    b480:	cmp	r3, #3
    b482:	bhi.n	b492 <usb_receive+0x16>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    b484:	movs	r1, #1
    b486:	ldr	r3, [pc, #12]	; (b494 <usb_receive+0x18>)
    b488:	lsls	r1, r0
    b48a:	add.w	r0, r3, r0, lsl #7
    b48e:	b.w	ad44 <schedule_transfer>
}
    b492:	bx	lr
    b494:	.word	0x20000000

0000b498 <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    b498:	ldr	r2, [pc, #32]	; (b4bc <usb_transfer_status+0x24>)
{
    b49a:	mov	r1, r0
	cmd = USB1_USBCMD;
    b49c:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    b4a0:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    b4a2:	orr.w	r3, r3, #16384	; 0x4000
    b4a6:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    b4aa:	ldr	r0, [r1, #4]
		cmd = USB1_USBCMD;
    b4ac:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    b4b0:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    b4b2:	tst.w	r3, #16384	; 0x4000
    b4b6:	beq.n	b4a0 <usb_transfer_status+0x8>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    b4b8:	bx	lr
    b4ba:	nop
    b4bc:	.word	0x402e0000

0000b4c0 <ultoa>:
{
    b4c0:	push	{r4, r5, r6, lr}
	int i=0, j;
    b4c2:	movs	r4, #0
		digit = val % radix;
    b4c4:	udiv	r5, r0, r2
    b4c8:	mls	r6, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b4cc:	uxtb	r3, r6
    b4ce:	cmp	r6, #9
    b4d0:	ite	ls
    b4d2:	addls	r3, #48	; 0x30
    b4d4:	addhi	r3, #55	; 0x37
		if (val == 0) break;
    b4d6:	cmp	r2, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    b4d8:	uxtb	r3, r3
    b4da:	strb	r3, [r1, r4]
		if (val == 0) break;
    b4dc:	bhi.n	b4e4 <ultoa+0x24>
		i++;
    b4de:	adds	r4, #1
		val /= radix;
    b4e0:	mov	r0, r5
		digit = val % radix;
    b4e2:	b.n	b4c4 <ultoa+0x4>
	buf[i + 1] = 0;
    b4e4:	adds	r3, r1, r4
    b4e6:	movs	r2, #0
    b4e8:	subs	r0, r1, #1
    b4ea:	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    b4ec:	subs	r5, r4, r2
    b4ee:	cmp	r2, r5
    b4f0:	blt.n	b4f6 <ultoa+0x36>
}
    b4f2:	mov	r0, r1
    b4f4:	pop	{r4, r5, r6, pc}
		t = buf[j];
    b4f6:	ldrb.w	r5, [r0, #1]!
	for (j=0; j < i; j++, i--) {
    b4fa:	adds	r2, #1
		buf[j] = buf[i];
    b4fc:	ldrb	r6, [r3, #0]
    b4fe:	strb	r6, [r0, #0]
		buf[i] = t;
    b500:	strb.w	r5, [r3], #-1
	for (j=0; j < i; j++, i--) {
    b504:	b.n	b4ec <ultoa+0x2c>
	...

0000b508 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    b508:	vcmp.f32	s0, s0
{
    b50c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
    b510:	vmrs	APSR_nzcv, fpscr
	int awidth = abs(width);
    b514:	eor.w	r5, r0, r0, asr #31
{
    b518:	mov	r7, r0
    b51a:	mov	r6, r1
    b51c:	mov	r4, r2
	int awidth = abs(width);
    b51e:	sub.w	r5, r5, r0, asr #31
{
    b522:	vpush	{d8}
    b526:	vmov.f32	s16, s0
    b52a:	sub	sp, #20
	if (isnanf(val)) {
    b52c:	bvc.n	b58c <dtostrf+0x84>
		int ndigs = (val<0) ? 4 : 3;
    b52e:	vcmpe.f32	s0, #0.0
    b532:	vmrs	APSR_nzcv, fpscr
    b536:	ite	mi
    b538:	movmi	r3, #4
    b53a:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b53c:	cmp	r3, r5
    b53e:	ite	lt
    b540:	sublt	r5, r5, r3
    b542:	movge	r5, #0
		if (width<0) {
    b544:	cmp	r0, #0
    b546:	bge.n	b556 <dtostrf+0x4e>
			while (awidth) {
				*buf++ = ' ';
    b548:	mov	r2, r5
    b54a:	mov	r0, r4
    b54c:	add	r4, r5
    b54e:	movs	r5, #0
    b550:	movs	r1, #32
    b552:	bl	a210 <memset>
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b556:	vmov	r3, s16
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b55a:	movs	r2, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    b55c:	cmp	r3, #0
    b55e:	itt	lt
    b560:	movlt	r3, #45	; 0x2d
    b562:	strblt.w	r3, [r4], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    b566:	movs	r3, #65	; 0x41
    b568:	strb	r2, [r4, #0]
    b56a:	strb	r3, [r4, #1]
    b56c:	adds	r3, r4, #3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
			*buf++ = ' ';
    b56e:	mov	r0, r3
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b570:	strb	r2, [r4, #2]
			*buf++ = ' ';
    b572:	movs	r1, #32
    b574:	mov	r2, r5
    b576:	bl	a210 <memset>
			awidth--;
		}
		*buf = 0;
    b57a:	movs	r2, #0
			*buf++ = ' ';
    b57c:	mov	r3, r0
    b57e:	add	r0, r5
		*buf = 0;
    b580:	strb	r2, [r3, r5]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    b582:	add	sp, #20
    b584:	vpop	{d8}
    b588:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (isinff(val)) {
    b58c:	vabs.f32	s15, s0
    b590:	vldr	s14, [pc, #432]	; b744 <dtostrf+0x23c>
    b594:	vcmp.f32	s15, s14
    b598:	vmrs	APSR_nzcv, fpscr
    b59c:	ble.n	b5e4 <dtostrf+0xdc>
		int ndigs = (val<0) ? 4 : 3;
    b59e:	vcmpe.f32	s0, #0.0
    b5a2:	vmrs	APSR_nzcv, fpscr
    b5a6:	ite	mi
    b5a8:	movmi	r3, #4
    b5aa:	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    b5ac:	cmp	r3, r5
    b5ae:	ite	lt
    b5b0:	sublt	r5, r5, r3
    b5b2:	movge	r5, #0
		if (width<0) {
    b5b4:	cmp	r0, #0
    b5b6:	bge.n	b5c6 <dtostrf+0xbe>
				*buf++ = ' ';
    b5b8:	mov	r2, r5
    b5ba:	mov	r0, r4
    b5bc:	add	r4, r5
    b5be:	movs	r5, #0
    b5c0:	movs	r1, #32
    b5c2:	bl	a210 <memset>
		if (val<0) *buf++ = '-';
    b5c6:	vcmpe.f32	s16, #0.0
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b5ca:	movs	r2, #70	; 0x46
		if (val<0) *buf++ = '-';
    b5cc:	vmrs	APSR_nzcv, fpscr
    b5d0:	itt	mi
    b5d2:	movmi	r3, #45	; 0x2d
    b5d4:	strbmi.w	r3, [r4], #1
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    b5d8:	movs	r3, #73	; 0x49
    b5da:	strb	r3, [r4, #0]
    b5dc:	movs	r3, #78	; 0x4e
    b5de:	strb	r3, [r4, #1]
    b5e0:	adds	r3, r4, #3
    b5e2:	b.n	b56e <dtostrf+0x66>
	s = fcvtf(val, precision, &decpt, &sign);
    b5e4:	add	r2, sp, #8
    b5e6:	add	r1, sp, #4
    b5e8:	mov	r0, r6
    b5ea:	bl	dae2 <fcvtf>
	if (precision == 0 && decpt == 0) {
    b5ee:	ldr	r3, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
    b5f0:	mov	r8, r0
	if (precision == 0 && decpt == 0) {
    b5f2:	orrs.w	r2, r6, r3
    b5f6:	bne.n	b696 <dtostrf+0x18e>
		s = (*s < '5') ? "0" : "1";
    b5f8:	ldrb	r1, [r0, #0]
    b5fa:	ldr	r3, [pc, #332]	; (b748 <dtostrf+0x240>)
    b5fc:	ldr	r2, [pc, #332]	; (b74c <dtostrf+0x244>)
    b5fe:	cmp	r1, #52	; 0x34
    b600:	ite	ls
    b602:	movls	r8, r2
    b604:	movhi	r8, r3
		decpt++;
    b606:	movs	r3, #1
    b608:	str	r3, [sp, #4]
	reqd = strlen(s);
    b60a:	mov	r0, r8
    b60c:	bl	edd0 <strlen>
	if (reqd > decpt) reqd++;
    b610:	ldr	r3, [sp, #4]
	reqd = strlen(s);
    b612:	mov	r5, r0
	if (reqd > decpt) reqd++;
    b614:	cmp	r3, r0
    b616:	it	lt
    b618:	addlt	r5, r0, #1
	if (decpt == 0) reqd++;
    b61a:	cmp	r3, #0
    b61c:	bne.n	b6a6 <dtostrf+0x19e>
    b61e:	adds	r5, #1
	if (sign) reqd++;
    b620:	ldr.w	fp, [sp, #8]
    b624:	cmp.w	fp, #0
    b628:	beq.n	b62c <dtostrf+0x124>
    b62a:	adds	r5, #1
	pad = width - reqd;
    b62c:	sub.w	sl, r7, r5
	e = p + reqd;
    b630:	add.w	r9, r4, r5
	if (pad > 0) {
    b634:	cmp.w	sl, #0
    b638:	ble.n	b6ee <dtostrf+0x1e6>
		while (pad-- > 0) *p++ = ' ';
    b63a:	mov	r2, sl
    b63c:	movs	r1, #32
    b63e:	mov	r0, r4
		e += pad;
    b640:	add	r9, sl
		while (pad-- > 0) *p++ = ' ';
    b642:	bl	a210 <memset>
    b646:	add.w	r2, r4, sl
	if (sign) *p++ = '-';
    b64a:	cmp.w	fp, #0
    b64e:	beq.n	b656 <dtostrf+0x14e>
    b650:	movs	r3, #45	; 0x2d
    b652:	strb.w	r3, [r2], #1
	if (decpt == 0 && precision > 0) {
    b656:	ldr	r1, [sp, #4]
    b658:	cmp	r1, #0
    b65a:	bne.n	b6f2 <dtostrf+0x1ea>
    b65c:	cbz	r6, b66c <dtostrf+0x164>
		*p++ = '0';
    b65e:	mov	r3, r2
    b660:	movs	r1, #48	; 0x30
    b662:	strb.w	r1, [r3], #2
		*p++ = '.';
    b666:	movs	r1, #46	; 0x2e
    b668:	strb	r1, [r2, #1]
    b66a:	mov	r2, r3
		if (--decpt == 0) *p++ = '.';
    b66c:	movs	r0, #46	; 0x2e
	while (p < e) {
    b66e:	cmp	r9, r2
		*p++ = *s++;
    b670:	mov	r3, r2
	while (p < e) {
    b672:	bhi.n	b728 <dtostrf+0x220>
	if (width < 0) {
    b674:	cmp	r7, #0
    b676:	bge.n	b68e <dtostrf+0x186>
		pad = (reqd + width) * -1;
    b678:	adds	r0, r5, r7
		while (pad-- > 0) *p++ = ' ';
    b67a:	movs	r1, #32
		pad = (reqd + width) * -1;
    b67c:	negs	r5, r0
		while (pad-- > 0) *p++ = ' ';
    b67e:	mov	r0, r3
    b680:	bic.w	r5, r5, r5, asr #31
    b684:	mov	r2, r5
    b686:	bl	a210 <memset>
    b68a:	mov	r3, r0
    b68c:	add	r3, r5
	*p = 0;
    b68e:	movs	r2, #0
	return buf;
    b690:	mov	r0, r4
	*p = 0;
    b692:	strb	r2, [r3, #0]
	return buf;
    b694:	b.n	b582 <dtostrf+0x7a>
	if (-decpt  > (int)precision) {
    b696:	negs	r3, r3
    b698:	cmp	r6, r3
		decpt = -precision;
    b69a:	ittt	lt
    b69c:	neglt	r3, r6
		s = "0";
    b69e:	ldrlt.w	r8, [pc, #172]	; b74c <dtostrf+0x244>
		decpt = -precision;
    b6a2:	strlt	r3, [sp, #4]
    b6a4:	b.n	b60a <dtostrf+0x102>
	if (decpt < 0 && precision > 0) {
    b6a6:	bge.n	b620 <dtostrf+0x118>
    b6a8:	cmp	r6, #0
    b6aa:	beq.n	b620 <dtostrf+0x118>
		if (strlen(s) > precision + decpt) {
    b6ac:	add	r3, r6
		reqd = precision + 2;
    b6ae:	adds	r5, r6, #2
		if (strlen(s) > precision + decpt) {
    b6b0:	cmp	r0, r3
    b6b2:	bls.n	b620 <dtostrf+0x118>
				val *= 10.0f;
    b6b4:	vmov.f32	s15, #36	; 0x41200000  10.0
    b6b8:	mov	r3, r6
    b6ba:	b.n	b6c2 <dtostrf+0x1ba>
    b6bc:	vmul.f32	s16, s16, s15
				newPrecision--;
    b6c0:	subs	r3, #1
			while (newPrecision > 0) {
    b6c2:	cmp	r3, #0
    b6c4:	bgt.n	b6bc <dtostrf+0x1b4>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b6c6:	cmp	r6, #0
    b6c8:	add	r2, sp, #8
    b6ca:	add	r1, sp, #12
    b6cc:	vmov.f32	s0, s16
    b6d0:	ite	ge
    b6d2:	subge	r0, r6, r6
    b6d4:	movlt	r0, r6
    b6d6:	bl	dae2 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b6da:	ldr	r3, [sp, #4]
    b6dc:	ldr	r2, [sp, #12]
    b6de:	adds	r1, r6, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    b6e0:	mov	r8, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    b6e2:	subs	r2, r2, r3
    b6e4:	cmp	r2, r1
    b6e6:	itt	eq
    b6e8:	addeq	r3, #1
    b6ea:	streq	r3, [sp, #4]
    b6ec:	b.n	b620 <dtostrf+0x118>
    b6ee:	mov	r2, r4
    b6f0:	b.n	b64a <dtostrf+0x142>
	else if (decpt < 0 && precision > 0) {
    b6f2:	bge.n	b66c <dtostrf+0x164>
    b6f4:	cmp	r6, #0
    b6f6:	beq.n	b66c <dtostrf+0x164>
		*p++ = '0';
    b6f8:	mov	r3, r2
		*p++ = '.';
    b6fa:	movs	r0, #46	; 0x2e
		*p++ = '0';
    b6fc:	mov.w	ip, #48	; 0x30
		while ( decpt < 0 ) {
    b700:	movs	r6, #0
		*p++ = '0';
    b702:	strb.w	ip, [r3], #2
		*p++ = '.';
    b706:	strb	r0, [r2, #1]
		while ( decpt < 0 ) {
    b708:	rsb	r0, r1, #2
    b70c:	add	r2, r0
		*p++ = '.';
    b70e:	mov	r0, r3
		while ( decpt < 0 ) {
    b710:	cmp	r0, r2
    b712:	bne.n	b720 <dtostrf+0x218>
    b714:	subs	r2, r3, r1
    b716:	cmp	r6, #0
    b718:	beq.n	b66c <dtostrf+0x164>
    b71a:	movs	r3, #0
    b71c:	str	r3, [sp, #4]
    b71e:	b.n	b66c <dtostrf+0x164>
			*p++ = '0';
    b720:	movs	r6, #1
    b722:	strb.w	ip, [r0], #1
    b726:	b.n	b710 <dtostrf+0x208>
		*p++ = *s++;
    b728:	ldrb.w	r1, [r8], #1
    b72c:	strb.w	r1, [r3], #1
		if (p == e) break;
    b730:	cmp	r9, r3
    b732:	beq.n	b674 <dtostrf+0x16c>
		if (--decpt == 0) *p++ = '.';
    b734:	ldr	r1, [sp, #4]
    b736:	subs	r1, #1
    b738:	str	r1, [sp, #4]
    b73a:	cbnz	r1, b740 <dtostrf+0x238>
    b73c:	adds	r3, r2, #2
    b73e:	strb	r0, [r2, #1]
			*p++ = '0';
    b740:	mov	r2, r3
    b742:	b.n	b66e <dtostrf+0x166>
    b744:	.word	0x7f7fffff
    b748:	.word	0x20001024
    b74c:	.word	0x20001187

0000b750 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
    b750:	push	{r4, r5, r6, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b752:	ldr	r3, [pc, #52]	; (b788 <micros+0x38>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b754:	movs	r4, #1
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    b756:	ldr	r6, [pc, #52]	; (b78c <micros+0x3c>)
		scc = systick_cycle_count;
    b758:	ldr	r5, [pc, #52]	; (b790 <micros+0x40>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    b75a:	ldrex	r2, [r3]
		smc = systick_millis_count;
    b75e:	ldr	r0, [r6, #0]
		scc = systick_cycle_count;
    b760:	ldr	r1, [r5, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    b762:	strex	r2, r4, [r3]
	} while ( __STREXW(1, &systick_safe_read));
    b766:	cmp	r2, #0
    b768:	bne.n	b75a <micros+0xa>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    b76a:	ldr	r3, [pc, #40]	; (b794 <micros+0x44>)
    b76c:	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b76e:	ldr	r2, [pc, #40]	; (b798 <micros+0x48>)
	uint32_t ccdelta = cyccnt - scc;
    b770:	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    b772:	ldr	r2, [r2, #0]
    b774:	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    b778:	mov.w	r3, #1000	; 0x3e8
    b77c:	muls	r0, r3
	return usec;
}
    b77e:	cmp	r2, r3
    b780:	ite	ls
    b782:	addls	r0, r0, r2
    b784:	addhi	r0, r0, r3
    b786:	pop	{r4, r5, r6, pc}
    b788:	.word	0x20015378
    b78c:	.word	0x20015374
    b790:	.word	0x20015370
    b794:	.word	0xe0001000
    b798:	.word	0x20014ce0

0000b79c <delay>:
{
    b79c:	push	{r3, r4, r5, lr}
	if (msec == 0) return;
    b79e:	mov	r4, r0
    b7a0:	cbz	r0, b7c4 <delay+0x28>
	start = micros();
    b7a2:	bl	b750 <micros>
    b7a6:	mov	r5, r0
		while ((micros() - start) >= 1000) {
    b7a8:	bl	b750 <micros>
    b7ac:	subs	r0, r0, r5
    b7ae:	cmp.w	r0, #1000	; 0x3e8
    b7b2:	bcs.n	b7ba <delay+0x1e>
		yield();
    b7b4:	bl	c418 <yield>
		while ((micros() - start) >= 1000) {
    b7b8:	b.n	b7a8 <delay+0xc>
			if (--msec == 0) return;
    b7ba:	subs	r4, #1
    b7bc:	beq.n	b7c4 <delay+0x28>
			start += 1000;
    b7be:	add.w	r5, r5, #1000	; 0x3e8
    b7c2:	b.n	b7a8 <delay+0xc>
}
    b7c4:	pop	{r3, r4, r5, pc}
	...

0000b7c8 <unused_interrupt_vector>:
	__disable_irq();
    b7c8:	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    b7ca:	mrs	r3, IPSR
	info->ipsr = ipsr;
    b7ce:	ldr	r4, [pc, #316]	; (b90c <unused_interrupt_vector+0x144>)
    b7d0:	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
    b7d4:	tst.w	lr, #4
    b7d8:	ite	eq
    b7da:	mrseq	r2, MSP
    b7de:	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
    b7e2:	mov.w	r3, #3758153728	; 0xe000e000
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b7e6:	ldr	r7, [pc, #296]	; (b910 <unused_interrupt_vector+0x148>)
	while (p < end) {
    b7e8:	ldr	r6, [pc, #296]	; (b914 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
    b7ea:	ldr.w	r1, [r3, #3368]	; 0xd28
    b7ee:	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
    b7f2:	ldr.w	r1, [r3, #3372]	; 0xd2c
    b7f6:	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
    b7fa:	ldr.w	r1, [r3, #3380]	; 0xd34
    b7fe:	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
    b802:	ldr.w	r3, [r3, #3384]	; 0xd38
    b806:	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
    b80a:	ldr	r3, [r2, #24]
    b80c:	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
    b810:	ldr	r3, [r2, #28]
    b812:	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    b816:	bl	be8c <tempmonGetTemp>
    b81a:	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    b81e:	bl	b998 <rtc_get>
	info->len = sizeof(*info) / 4;
    b822:	movs	r3, #11
	p = (uint32_t *)info;
    b824:	ldr	r2, [pc, #240]	; (b918 <unused_interrupt_vector+0x150>)
	info->time = rtc_get();
    b826:	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    b82a:	str.w	r3, [r4, #128]	; 0x80
	while (p < end) {
    b82e:	mov	r0, r2
	crc = 0xFFFFFFFF;
    b830:	mov.w	r3, #4294967295
		crc ^= *p++;
    b834:	ldr	r1, [r2, #0]
    b836:	movs	r5, #32
    b838:	adds	r2, #4
    b83a:	eors	r3, r1
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    b83c:	and.w	r1, r3, #1
    b840:	subs	r5, #1
    b842:	mul.w	r1, r7, r1
    b846:	eor.w	r3, r1, r3, lsr #1
    b84a:	bne.n	b83c <unused_interrupt_vector+0x74>
	while (p < end) {
    b84c:	cmp	r2, r6
    b84e:	bne.n	b834 <unused_interrupt_vector+0x6c>
	info->crc = crc;
    b850:	str.w	r3, [r4, #168]	; 0xa8
	asm("dsb");
    b854:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    b858:	mov.w	r3, #3758153728	; 0xe000e000
    b85c:	ldr	r2, [pc, #188]	; (b91c <unused_interrupt_vector+0x154>)
    b85e:	str.w	r0, [r3, #3952]	; 0xf70
    b862:	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
    b866:	dsb	sy
	asm("isb");
    b86a:	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b86e:	ldr	r2, [pc, #176]	; (b920 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
    b870:	ldr	r4, [pc, #176]	; (b924 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b872:	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b874:	ldr	r0, [pc, #176]	; (b928 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    b876:	orr.w	r3, r3, #12288	; 0x3000
    b87a:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    b87c:	movs	r3, #2
    b87e:	str	r3, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    b880:	ldr	r3, [r2, #28]
    b882:	bic.w	r3, r3, #127	; 0x7f
    b886:	orr.w	r3, r3, #64	; 0x40
    b88a:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    b88c:	ldr	r3, [pc, #156]	; (b92c <unused_interrupt_vector+0x164>)
    b88e:	ldr	r3, [r3, #0]
    b890:	cmp	r3, r0
    b892:	bls.n	b898 <unused_interrupt_vector+0xd0>
    b894:	bl	aa54 <set_arm_clock>
	PIT_MCR = 0;
    b898:	movs	r3, #0
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b89a:	movs	r6, #1
	NVIC_ICER0 = 0xFFFFFFFF;
    b89c:	mov.w	r2, #4294967295
	PIT_MCR = 0;
    b8a0:	str	r3, [r4, #0]
	PIT_TCTRL0 = 0;
    b8a2:	str.w	r3, [r4, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    b8a6:	ldr	r3, [pc, #136]	; (b930 <unused_interrupt_vector+0x168>)
    b8a8:	str.w	r3, [r4, #256]	; 0x100
	NVIC_ICER0 = 0xFFFFFFFF;
    b8ac:	mov.w	r3, #3758153728	; 0xe000e000
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    b8b0:	str.w	r6, [r4, #264]	; 0x108
		if (PIT_TFLG0) {
    b8b4:	ldr	r4, [pc, #108]	; (b924 <unused_interrupt_vector+0x15c>)
	NVIC_ICER0 = 0xFFFFFFFF;
    b8b6:	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    b8ba:	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    b8be:	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    b8c2:	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    b8c6:	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
    b8ca:	ldr.w	r3, [r4, #268]	; 0x10c
    b8ce:	cbz	r3, b8da <unused_interrupt_vector+0x112>
			if (++count >= 80) break;  // reboot after 8 seconds
    b8d0:	adds	r5, #1
			PIT_TFLG0 = 1;
    b8d2:	str.w	r6, [r4, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    b8d6:	cmp	r5, #79	; 0x4f
    b8d8:	bhi.n	b8e0 <unused_interrupt_vector+0x118>
		usb_isr();
    b8da:	bl	af04 <usb_isr>
		if (PIT_TFLG0) {
    b8de:	b.n	b8ca <unused_interrupt_vector+0x102>
	USB1_USBCMD = USB_USBCMD_RST;
    b8e0:	ldr	r3, [pc, #80]	; (b934 <unused_interrupt_vector+0x16c>)
    b8e2:	movs	r2, #2
	SRC_GPR5 = 0x0BAD00F1;
    b8e4:	ldr	r1, [pc, #80]	; (b938 <unused_interrupt_vector+0x170>)
	USB1_USBCMD = USB_USBCMD_RST;
    b8e6:	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b8ea:	mov.w	r2, #2147483648	; 0x80000000
    b8ee:	ldr	r3, [pc, #76]	; (b93c <unused_interrupt_vector+0x174>)
	SRC_GPR5 = 0x0BAD00F1;
    b8f0:	ldr	r0, [pc, #76]	; (b940 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    b8f2:	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    b8f4:	ldr	r2, [pc, #44]	; (b924 <unused_interrupt_vector+0x15c>)
    b8f6:	ldr.w	r3, [r2, #268]	; 0x10c
    b8fa:	cbz	r3, b908 <unused_interrupt_vector+0x140>
	SCB_AIRCR = 0x05FA0004;
    b8fc:	mov.w	r3, #3758153728	; 0xe000e000
    b900:	ldr	r2, [pc, #64]	; (b944 <unused_interrupt_vector+0x17c>)
    b902:	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    b906:	b.n	b906 <unused_interrupt_vector+0x13e>
	SRC_GPR5 = 0x0BAD00F1;
    b908:	str	r0, [r1, #48]	; 0x30
    b90a:	b.n	b8f6 <unused_interrupt_vector+0x12e>
    b90c:	.word	0x2027ff00
    b910:	.word	0xedb88320
    b914:	.word	0x2027ffa8
    b918:	.word	0x2027ff80
    b91c:	.word	0x2027ffa0
    b920:	.word	0x400fc000
    b924:	.word	0x40084000
    b928:	.word	0x0bcd3d80
    b92c:	.word	0x20001d2c
    b930:	.word	0x00249f00
    b934:	.word	0x402e0000
    b938:	.word	0x400f8000
    b93c:	.word	0x400d9000
    b940:	.word	0x0bad00f1
    b944:	.word	0x05fa0004

0000b948 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    b948:	ldr	r2, [pc, #32]	; (b96c <_sbrk+0x24>)
{
    b94a:	push	{r3, lr}
    b94c:	mov	r3, r0
        char *prev = __brkval;
    b94e:	ldr	r0, [r2, #0]
        if (incr != 0) {
    b950:	cbz	r3, b966 <_sbrk+0x1e>
                if (prev + incr > (char *)&_heap_end) {
    b952:	add	r3, r0
    b954:	ldr	r1, [pc, #24]	; (b970 <_sbrk+0x28>)
    b956:	cmp	r3, r1
    b958:	bls.n	b968 <_sbrk+0x20>
                        errno = ENOMEM;
    b95a:	bl	ecbc <__errno>
    b95e:	movs	r3, #12
    b960:	str	r3, [r0, #0]
                        return (void *)-1;
    b962:	mov.w	r0, #4294967295
                }
                __brkval = prev + incr;
        }
        return prev;
}
    b966:	pop	{r3, pc}
                __brkval = prev + incr;
    b968:	str	r3, [r2, #0]
    b96a:	b.n	b966 <_sbrk+0x1e>
    b96c:	.word	0x20002104
    b970:	.word	0x20280000

0000b974 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
    b974:	movs	r0, #0
    b976:	bx	lr

0000b978 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
    b978:	mov.w	r0, #4294967295
    b97c:	bx	lr

0000b97e <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
    b97e:	mov.w	r3, #8192	; 0x2000
	return 0;
}
    b982:	movs	r0, #0
	st->st_mode = S_IFCHR;
    b984:	str	r3, [r1, #4]
}
    b986:	bx	lr

0000b988 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
    b988:	movs	r0, #1
    b98a:	bx	lr

0000b98c <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
    b98c:	mov.w	r0, #4294967295
    b990:	bx	lr

0000b992 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
    b992:	wfi
    b994:	b.n	b992 <abort>
	...

0000b998 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    b998:	ldr	r2, [pc, #28]	; (b9b8 <rtc_get+0x20>)
    b99a:	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    b99c:	ldr	r3, [r2, #40]	; 0x28
{
    b99e:	push	{r4, lr}
		uint32_t hi2 = SNVS_HPRTCMR;
    b9a0:	mov	r4, r3
    b9a2:	mov	r1, r0
    b9a4:	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    b9a6:	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    b9a8:	cmp	r4, r3
    b9aa:	bne.n	b9a0 <rtc_get+0x8>
    b9ac:	cmp	r1, r0
    b9ae:	bne.n	b9a0 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
    b9b0:	lsrs	r3, r3, #15
}
    b9b2:	orr.w	r0, r3, r0, lsl #17
    b9b6:	pop	{r4, pc}
    b9b8:	.word	0x400d4000

0000b9bc <rtc_set>:
	SNVS_HPCR &= ~(SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS);
    b9bc:	ldr	r3, [pc, #60]	; (b9fc <rtc_set+0x40>)
    b9be:	ldr	r2, [r3, #8]
    b9c0:	bic.w	r2, r2, #65537	; 0x10001
    b9c4:	str	r2, [r3, #8]
	while (SNVS_HPCR & SNVS_HPCR_RTC_EN); // wait
    b9c6:	ldr	r2, [r3, #8]
    b9c8:	lsls	r2, r2, #31
    b9ca:	bmi.n	b9c6 <rtc_set+0xa>
	SNVS_LPCR &= ~SNVS_LPCR_SRTC_ENV;
    b9cc:	ldr	r2, [r3, #56]	; 0x38
    b9ce:	bic.w	r2, r2, #1
    b9d2:	str	r2, [r3, #56]	; 0x38
	while (SNVS_LPCR & SNVS_LPCR_SRTC_ENV); // wait
    b9d4:	ldr	r3, [pc, #36]	; (b9fc <rtc_set+0x40>)
    b9d6:	ldr	r2, [r3, #56]	; 0x38
    b9d8:	lsls	r1, r2, #31
    b9da:	bmi.n	b9d6 <rtc_set+0x1a>
	SNVS_LPSRTCLR = t << 15;
    b9dc:	lsls	r2, r0, #15
	SNVS_LPSRTCMR = t >> 17;
    b9de:	lsrs	r0, r0, #17
	SNVS_LPSRTCLR = t << 15;
    b9e0:	str	r2, [r3, #84]	; 0x54
	SNVS_LPSRTCMR = t >> 17;
    b9e2:	str	r0, [r3, #80]	; 0x50
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
    b9e4:	ldr	r2, [r3, #56]	; 0x38
    b9e6:	orr.w	r2, r2, #1
    b9ea:	str	r2, [r3, #56]	; 0x38
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
    b9ec:	ldr	r2, [r3, #56]	; 0x38
    b9ee:	lsls	r2, r2, #31
    b9f0:	bpl.n	b9ec <rtc_set+0x30>
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
    b9f2:	ldr	r2, [r3, #8]
    b9f4:	orr.w	r2, r2, #65537	; 0x10001
    b9f8:	str	r2, [r3, #8]
}
    b9fa:	bx	lr
    b9fc:	.word	0x400d4000

0000ba00 <flash_wait>:
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

static void flash_wait()
{
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    ba00:	ldr	r3, [pc, #68]	; (ba48 <flash_wait+0x48>)
	FLEXSPI_LUT61 = 0;
    ba02:	movs	r1, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    ba04:	ldr	r2, [pc, #68]	; (ba4c <flash_wait+0x4c>)
{
    ba06:	push	{r4, r5, lr}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
    ba08:	str.w	r2, [r3, #752]	; 0x2f0
	uint8_t status;
	do {
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    ba0c:	movs	r2, #1
		FLEXSPI_IPCR0 = 0;
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    ba0e:	ldr	r5, [pc, #64]	; (ba50 <flash_wait+0x50>)
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
		asm("":::"memory");
		status = *(uint8_t *)&FLEXSPI_RFDR0;
    ba10:	ldr	r4, [pc, #64]	; (ba54 <flash_wait+0x54>)
	FLEXSPI_LUT61 = 0;
    ba12:	str.w	r1, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
    ba16:	str.w	r2, [r3, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
    ba1a:	str.w	r1, [r3, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
    ba1e:	str.w	r5, [r3, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    ba22:	str.w	r2, [r3, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
    ba26:	ldr	r0, [r3, #20]
    ba28:	lsls	r0, r0, #31
    ba2a:	bpl.n	ba26 <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    ba2c:	str	r2, [r3, #20]
	} while (status & 1);
    ba2e:	ldrb	r0, [r4, #0]
    ba30:	lsls	r0, r0, #31
    ba32:	bmi.n	ba16 <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
    ba34:	ldr	r2, [r3, #0]
    ba36:	orr.w	r2, r2, #1
    ba3a:	str	r2, [r3, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
    ba3c:	ldr	r2, [pc, #8]	; (ba48 <flash_wait+0x48>)
    ba3e:	ldr	r3, [r2, #0]
    ba40:	lsls	r3, r3, #31
    ba42:	bmi.n	ba3e <flash_wait+0x3e>
	__enable_irq();
    ba44:	cpsie	i
}
    ba46:	pop	{r4, r5, pc}
    ba48:	.word	0x402a8000
    ba4c:	.word	0x24010405
    ba50:	.word	0x000f0001
    ba54:	.word	0x402a8100

0000ba58 <eeprom_initialize>:
{
    ba58:	push	{r4, r5, lr}
    ba5a:	ldr	r3, [pc, #52]	; (ba90 <eeprom_initialize+0x38>)
			if (*p++ == 0xFFFF) break;
    ba5c:	movw	r5, #65535	; 0xffff
    ba60:	ldr	r4, [pc, #48]	; (ba94 <eeprom_initialize+0x3c>)
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    ba62:	sub.w	r1, r3, #4096	; 0x1000
		uint16_t index = 0;
    ba66:	movs	r2, #0
			if (*p++ == 0xFFFF) break;
    ba68:	ldrh	r0, [r1, #0]
    ba6a:	adds	r1, #2
    ba6c:	cmp	r0, r5
    ba6e:	beq.n	ba78 <eeprom_initialize+0x20>
			index++;
    ba70:	adds	r2, #1
		} while (p < end);
    ba72:	cmp	r1, r3
			index++;
    ba74:	uxth	r2, r2
		} while (p < end);
    ba76:	bcc.n	ba68 <eeprom_initialize+0x10>
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ba78:	add.w	r3, r3, #4096	; 0x1000
		sector_index[sector] = index;
    ba7c:	strh.w	r2, [r4], #2
	for (sector=0; sector < FLASH_SECTORS; sector++) {
    ba80:	cmp.w	r3, #1619001344	; 0x60800000
    ba84:	bne.n	ba62 <eeprom_initialize+0xa>
	initialized = 1;
    ba86:	ldr	r3, [pc, #16]	; (ba98 <eeprom_initialize+0x40>)
    ba88:	movs	r2, #1
    ba8a:	strb	r2, [r3, #0]
}
    ba8c:	pop	{r4, r5, pc}
    ba8e:	nop
    ba90:	.word	0x607c1000
    ba94:	.word	0x200153ea
    ba98:	.word	0x200155be

0000ba9c <eeprom_read_byte>:
{
    ba9c:	push	{r3, r4, r5, lr}
	if (addr > E2END) return 0xFF;
    ba9e:	movw	r3, #4283	; 0x10bb
{
    baa2:	mov	r4, r0
	if (addr > E2END) return 0xFF;
    baa4:	cmp	r0, r3
    baa6:	bhi.n	baf4 <eeprom_read_byte+0x58>
	if (!initialized) eeprom_initialize();
    baa8:	ldr	r3, [pc, #76]	; (baf8 <eeprom_read_byte+0x5c>)
    baaa:	ldrb	r3, [r3, #0]
    baac:	cbnz	r3, bab2 <eeprom_read_byte+0x16>
    baae:	bl	ba58 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS;
    bab2:	lsrs	r2, r4, #2
    bab4:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bab6:	ldr	r0, [pc, #68]	; (bafc <eeprom_read_byte+0x60>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bab8:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS;
    babc:	udiv	r3, r2, r3
    bac0:	rsb	r1, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bac4:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS;
    bac8:	subs	r2, r2, r1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    baca:	add.w	r1, r2, #393216	; 0x60000
	end = p + sector_index[sector];
    bace:	ldrh.w	r2, [r0, r2, lsl #1]
	uint8_t data=0xFF;
    bad2:	movs	r0, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bad4:	add.w	r1, r1, #1984	; 0x7c0
	end = p + sector_index[sector];
    bad8:	lsls	r2, r2, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bada:	lsls	r3, r1, #12
	end = p + sector_index[sector];
    badc:	add.w	r2, r2, r1, lsl #12
	while (p < end) {
    bae0:	cmp	r3, r2
    bae2:	bcc.n	bae6 <eeprom_read_byte+0x4a>
}
    bae4:	pop	{r3, r4, r5, pc}
		uint32_t val = *p++;
    bae6:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) data = val >> 8;
    baea:	uxtb	r5, r1
    baec:	cmp	r5, r4
    baee:	it	eq
    baf0:	lsreq	r0, r1, #8
    baf2:	b.n	bae0 <eeprom_read_byte+0x44>
	if (addr > E2END) return 0xFF;
    baf4:	movs	r0, #255	; 0xff
    baf6:	b.n	bae4 <eeprom_read_byte+0x48>
    baf8:	.word	0x200155be
    bafc:	.word	0x200153ea

0000bb00 <eeprom_read_block>:
{
    bb00:	push	{r4, r5, r6, lr}
    bb02:	mov	r4, r0
    bb04:	adds	r5, r1, r2
    bb06:	mov	r0, r1
	while (len--) {
    bb08:	cmp	r0, r5
    bb0a:	bne.n	bb0e <eeprom_read_block+0xe>
}
    bb0c:	pop	{r4, r5, r6, pc}
		*dest++ = eeprom_read_byte(p++);
    bb0e:	adds	r6, r0, #1
    bb10:	bl	ba9c <eeprom_read_byte>
    bb14:	strb.w	r0, [r4], #1
    bb18:	mov	r0, r6
    bb1a:	b.n	bb08 <eeprom_read_block+0x8>

0000bb1c <eepromemu_flash_write>:

// write bytes into flash memory (which is already erased to 0xFF)
void eepromemu_flash_write(void *addr, const void *data, uint32_t len)
{
    bb1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb20:	mov	r5, r1
    bb22:	mov	r4, r2
	__disable_irq();
    bb24:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bb26:	ldr	r3, [pc, #192]	; (bbe8 <eepromemu_flash_write+0xcc>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	FLEXSPI_IPCR0 = 0;
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bb28:	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bb2c:	ldr	r2, [pc, #188]	; (bbec <eepromemu_flash_write+0xd0>)
    bb2e:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bb30:	movs	r2, #2
    bb32:	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
    bb34:	movs	r2, #0
    bb36:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bb3a:	str.w	r1, [r3, #752]	; 0x2f0
	uint32_t end_addr = (uint32_t)addr + size;
    bb3e:	adds	r1, r0, r4
	FLEXSPI_LUT61 = 0;
    bb40:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bb44:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bb48:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bb4c:	mov.w	r2, #983040	; 0xf0000
    bb50:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bb54:	movs	r2, #1
    bb56:	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bb5a:	bic.w	r2, r0, #31
	asm("dsb");
    bb5e:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    bb62:	mov.w	r6, #3758153728	; 0xe000e000
    bb66:	str.w	r2, [r6, #3932]	; 0xf5c
		location += 32;
    bb6a:	adds	r2, #32
	} while (location < end_addr);
    bb6c:	cmp	r1, r2
    bb6e:	bhi.n	bb66 <eepromemu_flash_write+0x4a>
	asm("dsb");
    bb70:	dsb	sy
	asm("isb");
    bb74:	isb	sy
	arm_dcache_delete(addr, len); // purge old data from ARM's cache
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bb78:	ldr	r2, [r3, #20]
    bb7a:	lsls	r6, r2, #31
    bb7c:	bpl.n	bb78 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bb7e:	movs	r2, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bb80:	ldr	r1, [pc, #108]	; (bbf0 <eepromemu_flash_write+0xd4>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bb82:	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	const uint8_t *src = (const uint8_t *)data;
	uint32_t n;
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bb86:	ldr	r7, [pc, #96]	; (bbe8 <eepromemu_flash_write+0xcc>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bb88:	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
    bb8a:	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bb8e:	movw	r1, #8705	; 0x2201
		if (n & FLEXSPI_INTR_IPTXWE) {
			uint32_t wrlen = len;
			if (wrlen > 8) wrlen = 8;
			if (wrlen > 0) {
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bb92:	ldr.w	r8, [pc, #96]	; bbf4 <eepromemu_flash_write+0xd8>
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
    bb96:	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bb9a:	uxth	r1, r4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
    bb9c:	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bba0:	orr.w	r1, r1, #983040	; 0xf0000
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
    bba4:	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
    bba8:	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bbac:	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
    bbb0:	ldr	r3, [r7, #20]
    bbb2:	lsls	r2, r3, #31
    bbb4:	bpl.n	bbc2 <eepromemu_flash_write+0xa6>
				len -= wrlen;
			}
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
		}
	}
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
    bbb6:	movs	r3, #65	; 0x41
    bbb8:	str	r3, [r7, #20]
	flash_wait();
}
    bbba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	flash_wait();
    bbbe:	b.w	ba00 <flash_wait>
		if (n & FLEXSPI_INTR_IPTXWE) {
    bbc2:	lsls	r1, r3, #25
    bbc4:	bpl.n	bbb0 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    bbc6:	cmp	r4, #8
    bbc8:	bhi.n	bbe2 <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
    bbca:	cbz	r4, bbdc <eepromemu_flash_write+0xc0>
    bbcc:	mov	r6, r4
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bbce:	mov	r1, r5
				len -= wrlen;
    bbd0:	subs	r4, r4, r6
				src += wrlen;
    bbd2:	add	r5, r6
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
    bbd4:	mov	r2, r6
    bbd6:	mov	r0, r8
    bbd8:	bl	a254 <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
    bbdc:	movs	r3, #64	; 0x40
    bbde:	str	r3, [r7, #20]
    bbe0:	b.n	bbb0 <eepromemu_flash_write+0x94>
			if (wrlen > 8) wrlen = 8;
    bbe2:	movs	r6, #8
    bbe4:	b.n	bbce <eepromemu_flash_write+0xb2>
    bbe6:	nop
    bbe8:	.word	0x402a8000
    bbec:	.word	0x5af05af0
    bbf0:	.word	0x08180432
    bbf4:	.word	0x402a8180

0000bbf8 <eepromemu_flash_erase_sector>:

// erase a 4K sector
void eepromemu_flash_erase_sector(void *addr)
{
    bbf8:	push	{r4}
	__disable_irq();
    bbfa:	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
    bbfc:	ldr	r3, [pc, #156]	; (bc9c <eepromemu_flash_erase_sector+0xa4>)
    bbfe:	ldr	r2, [pc, #160]	; (bca0 <eepromemu_flash_erase_sector+0xa8>)
    bc00:	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
    bc02:	movs	r2, #2
    bc04:	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
    bc06:	movw	r2, #1030	; 0x406
    bc0a:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
    bc0e:	movs	r2, #0
    bc10:	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
    bc14:	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
    bc18:	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
    bc1c:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bc20:	mov.w	r2, #983040	; 0xf0000
    bc24:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bc28:	movs	r2, #1
    bc2a:	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
    bc2e:	bic.w	r2, r0, #4080	; 0xff0
    bc32:	bic.w	r2, r2, #15
	asm("dsb");
    bc36:	dsb	sy
    bc3a:	add.w	r4, r2, #32
	uint32_t end_addr = (uint32_t)addr + size;
    bc3e:	add.w	r1, r2, #4096	; 0x1000
    bc42:	cmp	r1, r4
    bc44:	ite	cc
    bc46:	movcc	r1, #1
    bc48:	movcs	r1, #128	; 0x80
		SCB_CACHE_DCIMVAC = location;
    bc4a:	mov.w	r4, #3758153728	; 0xe000e000
    bc4e:	add.w	r1, r2, r1, lsl #5
    bc52:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    bc56:	adds	r2, #32
	} while (location < end_addr);
    bc58:	cmp	r2, r1
    bc5a:	bne.n	bc52 <eepromemu_flash_erase_sector+0x5a>
	asm("dsb");
    bc5c:	dsb	sy
	asm("isb");
    bc60:	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bc64:	ldr	r2, [r3, #20]
    bc66:	lsls	r1, r2, #31
    bc68:	bpl.n	bc64 <eepromemu_flash_erase_sector+0x6c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc6a:	movs	r1, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bc6c:	ldr	r2, [pc, #52]	; (bca4 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc6e:	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
    bc70:	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
    bc74:	ldr	r2, [pc, #48]	; (bca8 <eepromemu_flash_erase_sector+0xb0>)
    bc76:	ands	r2, r0
    bc78:	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
    bc7c:	mov.w	r2, #983040	; 0xf0000
    bc80:	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
    bc84:	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
    bc88:	ldr	r3, [pc, #16]	; (bc9c <eepromemu_flash_erase_sector+0xa4>)
    bc8a:	ldr	r2, [r3, #20]
    bc8c:	lsls	r2, r2, #31
    bc8e:	bpl.n	bc8a <eepromemu_flash_erase_sector+0x92>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc90:	movs	r2, #1
	flash_wait();
}
    bc92:	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
    bc96:	str	r2, [r3, #20]
	flash_wait();
    bc98:	b.w	ba00 <flash_wait>
    bc9c:	.word	0x402a8000
    bca0:	.word	0x5af05af0
    bca4:	.word	0x08180420
    bca8:	.word	0x00fff000

0000bcac <eeprom_write_byte>:
	if (addr > E2END) return;
    bcac:	movw	r3, #4283	; 0x10bb
    bcb0:	cmp	r0, r3
{
    bcb2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bcb6:	mov	r4, r0
    bcb8:	sub	sp, #264	; 0x108
    bcba:	mov	r9, r1
	if (addr > E2END) return;
    bcbc:	bhi.n	bd1e <eeprom_write_byte+0x72>
	if (!initialized) eeprom_initialize();
    bcbe:	ldr	r3, [pc, #232]	; (bda8 <eeprom_write_byte+0xfc>)
    bcc0:	ldrb	r3, [r3, #0]
    bcc2:	cbnz	r3, bcc8 <eeprom_write_byte+0x1c>
    bcc4:	bl	ba58 <eeprom_initialize>
	sector = (addr >> 2) % FLASH_SECTORS; 
    bcc8:	lsrs	r6, r4, #2
    bcca:	movs	r3, #63	; 0x3f
	end = p + sector_index[sector];
    bccc:	ldr	r7, [pc, #220]	; (bdac <eeprom_write_byte+0x100>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bcce:	and.w	r4, r4, #3
	sector = (addr >> 2) % FLASH_SECTORS; 
    bcd2:	udiv	r3, r6, r3
    bcd6:	rsb	r2, r3, r3, lsl #6
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
    bcda:	orr.w	r4, r4, r3, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
    bcde:	subs	r6, r6, r2
	uint8_t olddata=0xFF;
    bce0:	movs	r2, #255	; 0xff
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bce2:	add.w	r5, r6, #393216	; 0x60000
	end = p + sector_index[sector];
    bce6:	ldrh.w	sl, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bcea:	add.w	r5, r5, #1984	; 0x7c0
    bcee:	lsls	r5, r5, #12
    bcf0:	mov	r8, r5
	end = p + sector_index[sector];
    bcf2:	add.w	r0, r5, sl, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
    bcf6:	mov	r3, r5
	while (p < end) {
    bcf8:	cmp	r3, r0
    bcfa:	bcc.n	bd24 <eeprom_write_byte+0x78>
	if (data == olddata) return;
    bcfc:	cmp	r2, r9
    bcfe:	beq.n	bd1e <eeprom_write_byte+0x72>
	if (sector_index[sector] < 2048) {
    bd00:	cmp.w	sl, #2048	; 0x800
    bd04:	bcs.n	bd34 <eeprom_write_byte+0x88>
		uint16_t newdata = offset | (data << 8);
    bd06:	orr.w	r4, r4, r9, lsl #8
		sector_index[sector] = sector_index[sector] + 1;
    bd0a:	add.w	sl, sl, #1
		eepromemu_flash_write(end, &newdata, 2);
    bd0e:	movs	r2, #2
    bd10:	add	r1, sp, #8
		uint16_t newdata = offset | (data << 8);
    bd12:	strh.w	r4, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
    bd16:	bl	bb1c <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
    bd1a:	strh.w	sl, [r7, r6, lsl #1]
}
    bd1e:	add	sp, #264	; 0x108
    bd20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t val = *p++;
    bd24:	ldrh.w	r1, [r3], #2
		if ((val & 255) == offset) olddata = val >> 8;
    bd28:	uxtb.w	ip, r1
    bd2c:	cmp	ip, r4
    bd2e:	it	eq
    bd30:	lsreq	r2, r1, #8
    bd32:	b.n	bcf8 <eeprom_write_byte+0x4c>
		memset(buf, 0xFF, sizeof(buf));
    bd34:	mov.w	r2, #256	; 0x100
    bd38:	movs	r1, #255	; 0xff
    bd3a:	add	r0, sp, #8
    bd3c:	bl	a210 <memset>
		while (p < end) {
    bd40:	cmn.w	r5, #4096	; 0x1000
    bd44:	movw	r3, #2049	; 0x801
    bd48:	it	cs
    bd4a:	movcs	r3, #1
    bd4c:	add.w	r3, r5, r3, lsl #1
    bd50:	mov	r1, r5
    bd52:	adds	r5, #2
    bd54:	cmp	r5, r3
    bd56:	bne.n	bd9a <eeprom_write_byte+0xee>
		buf[offset] = data;
    bd58:	add	r3, sp, #8
		for (i=0; i < 256; i++) {
    bd5a:	movs	r5, #0
		eepromemu_flash_erase_sector(p);
    bd5c:	mov	r0, r8
		buf[offset] = data;
    bd5e:	strb.w	r9, [r3, r4]
		eepromemu_flash_erase_sector(p);
    bd62:	add	r4, sp, #8
		index = 0;
    bd64:	mov	r9, r5
		eepromemu_flash_erase_sector(p);
    bd66:	bl	bbf8 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
    bd6a:	ldrb.w	r3, [r4], #1
    bd6e:	cmp	r3, #255	; 0xff
    bd70:	beq.n	bd8c <eeprom_write_byte+0xe0>
				uint16_t newval = i | (buf[i] << 8);
    bd72:	orr.w	r3, r5, r3, lsl #8
				eepromemu_flash_write(p + index, &newval, 2);
    bd76:	movs	r2, #2
    bd78:	add.w	r0, r8, r9, lsl #1
				index = index + 1;
    bd7c:	add.w	r9, r9, #1
				eepromemu_flash_write(p + index, &newval, 2);
    bd80:	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
    bd84:	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
    bd88:	bl	bb1c <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
    bd8c:	adds	r5, #1
    bd8e:	cmp.w	r5, #256	; 0x100
    bd92:	bne.n	bd6a <eeprom_write_byte+0xbe>
		sector_index[sector] = index;
    bd94:	strh.w	r9, [r7, r6, lsl #1]
    bd98:	b.n	bd1e <eeprom_write_byte+0x72>
			uint16_t val = *p++;
    bd9a:	ldrh	r2, [r1, #0]
			buf[val & 255] = val >> 8;
    bd9c:	add	r0, sp, #8
    bd9e:	ldrb	r1, [r1, #0]
    bda0:	lsrs	r2, r2, #8
    bda2:	strb	r2, [r0, r1]
    bda4:	b.n	bd50 <eeprom_write_byte+0xa4>
    bda6:	nop
    bda8:	.word	0x200155be
    bdac:	.word	0x200153ea

0000bdb0 <eeprom_write_block>:
{
    bdb0:	push	{r4, r5, r6, lr}
    bdb2:	mov	r4, r0
    bdb4:	mov	r0, r1
	while (len--) {
    bdb6:	adds	r5, r4, r2
    bdb8:	cmp	r4, r5
    bdba:	bne.n	bdbe <eeprom_write_block+0xe>
}
    bdbc:	pop	{r4, r5, r6, pc}
		eeprom_write_byte(p++, *src++);
    bdbe:	adds	r6, r0, #1
    bdc0:	ldrb.w	r1, [r4], #1
    bdc4:	bl	bcac <eeprom_write_byte>
    bdc8:	mov	r0, r6
    bdca:	b.n	bdb8 <eeprom_write_block+0x8>

0000bdcc <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    bdcc:	ldr	r3, [r0, #0]
    bdce:	cbz	r3, bde6 <smalloc_verify_pool+0x1a>
    bdd0:	ldr	r0, [r0, #4]
    bdd2:	cbz	r0, bde8 <smalloc_verify_pool+0x1c>
	if (spool->pool_size % HEADER_SZ) return 0;
    bdd4:	movs	r3, #12
    bdd6:	udiv	r2, r0, r3
    bdda:	mls	r0, r3, r2, r0
    bdde:	clz	r0, r0
    bde2:	lsrs	r0, r0, #5
    bde4:	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
    bde6:	mov	r0, r3
	return 1;
}
    bde8:	bx	lr

0000bdea <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
    bdea:	push	{r4, lr}
    bdec:	mov	r1, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    bdee:	bl	bdcc <smalloc_verify_pool>
    bdf2:	mov	r4, r0
    bdf4:	cbz	r0, bdfc <sm_align_pool+0x12>
    bdf6:	movs	r4, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    bdf8:	mov	r0, r4
    bdfa:	pop	{r4, pc}
	x = spool->pool_size % HEADER_SZ;
    bdfc:	ldr	r3, [r1, #4]
    bdfe:	movs	r0, #12
    be00:	udiv	r2, r3, r0
    be04:	mls	r2, r0, r2, r3
	if (x) spool->pool_size -= x;
    be08:	cbz	r2, be0e <sm_align_pool+0x24>
    be0a:	subs	r3, r3, r2
    be0c:	str	r3, [r1, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    be0e:	ldr	r3, [r1, #4]
    be10:	cmp	r3, #240	; 0xf0
    be12:	bhi.n	bdf6 <sm_align_pool+0xc>
		errno = ENOSPC;
    be14:	bl	ecbc <__errno>
    be18:	movs	r3, #28
    be1a:	str	r3, [r0, #0]
		return 0;
    be1c:	b.n	bdf8 <sm_align_pool+0xe>

0000be1e <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    be1e:	push	{r4, r5, r6, lr}
    be20:	mov	r6, r3
	if (!spool) {
    be22:	mov	r4, r0
    be24:	cbnz	r0, be34 <sm_set_pool+0x16>
		errno = EINVAL;
    be26:	bl	ecbc <__errno>
		return 0;
    be2a:	mov	r5, r4
		errno = EINVAL;
    be2c:	movs	r3, #22
    be2e:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    be30:	mov	r0, r5
    be32:	pop	{r4, r5, r6, pc}
	if (!new_pool || !new_pool_size) {
    be34:	cbz	r1, be38 <sm_set_pool+0x1a>
    be36:	cbnz	r2, be68 <sm_set_pool+0x4a>
		if (smalloc_verify_pool(spool)) {
    be38:	mov	r0, r4
    be3a:	bl	bdcc <smalloc_verify_pool>
    be3e:	mov	r5, r0
    be40:	cbz	r0, be5e <sm_set_pool+0x40>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    be42:	ldr	r3, [r4, #8]
    be44:	cbz	r3, be50 <sm_set_pool+0x32>
    be46:	ldr	r2, [r4, #4]
    be48:	movs	r1, #0
    be4a:	ldr	r0, [r4, #0]
    be4c:	bl	a210 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    be50:	movs	r2, #16
    be52:	movs	r1, #0
    be54:	mov	r0, r4
		memset(spool->pool, 0, spool->pool_size);
    be56:	bl	a210 <memset>
	return 1;
    be5a:	movs	r5, #1
    be5c:	b.n	be30 <sm_set_pool+0x12>
		errno = EINVAL;
    be5e:	bl	ecbc <__errno>
    be62:	movs	r3, #22
    be64:	str	r3, [r0, #0]
		return 0;
    be66:	b.n	be30 <sm_set_pool+0x12>
	spool->oomfn = oom_handler;
    be68:	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
    be6a:	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
    be6e:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    be70:	bl	bdea <sm_align_pool>
    be74:	mov	r5, r0
    be76:	cmp	r0, #0
    be78:	beq.n	be30 <sm_set_pool+0x12>
	if (do_zero) {
    be7a:	cmp	r6, #0
    be7c:	beq.n	be5a <sm_set_pool+0x3c>
		memset(spool->pool, 0, spool->pool_size);
    be7e:	ldr	r2, [r4, #4]
    be80:	movs	r1, #0
    be82:	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
    be84:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    be86:	b.n	be56 <sm_set_pool+0x38>

0000be88 <Panic_Temp_isr>:
  unused_interrupt_vector();
    be88:	b.w	b7c8 <unused_interrupt_vector>

0000be8c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    be8c:	ldr	r3, [pc, #72]	; (bed8 <tempmonGetTemp+0x4c>)
    be8e:	ldr.w	r2, [r3, #128]	; 0x80
    be92:	lsls	r2, r2, #29
    be94:	bpl.n	be8e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    be96:	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    be9a:	ldr	r2, [pc, #64]	; (bedc <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    be9c:	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bea0:	vldr	s0, [r2]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    bea4:	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    bea8:	ldr	r3, [pc, #52]	; (bee0 <tempmonGetTemp+0x54>)
    beaa:	vcvt.f32.u32	s0, s0
    beae:	vldr	s14, [r3]
    beb2:	vcvt.f32.s32	s15, s15
    beb6:	ldr	r3, [pc, #44]	; (bee4 <tempmonGetTemp+0x58>)
    beb8:	vcvt.f32.u32	s14, s14
    bebc:	vsub.f32	s15, s15, s14
    bec0:	vldr	s14, [r3]
    bec4:	ldr	r3, [pc, #32]	; (bee8 <tempmonGetTemp+0x5c>)
    bec6:	vmul.f32	s15, s15, s14
    beca:	vldr	s13, [r3]
    bece:	vdiv.f32	s14, s15, s13

    return tmeas;
}
    bed2:	vsub.f32	s0, s0, s14
    bed6:	bx	lr
    bed8:	.word	0x400d8100
    bedc:	.word	0x20014cd4
    bee0:	.word	0x20014cd0
    bee4:	.word	0x20014cd8
    bee8:	.word	0x20014cdc

0000beec <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    beec:	cmp	r0, #54	; 0x36
{
    beee:	push	{r4, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bef0:	bhi.n	bf0a <digitalWrite+0x1e>
	p = digital_pin_to_info_PGM + pin;
    bef2:	lsls	r2, r0, #4
    bef4:	ldr	r3, [pc, #40]	; (bf20 <digitalWrite+0x34>)
    bef6:	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
    befa:	ldr	r3, [r3, r2]
	mask = p->mask;
    befc:	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
    befe:	ldr	r4, [r3, #4]
	if (pinmode & mask) {
    bf00:	tst	r4, r2
    bf02:	beq.n	bf12 <digitalWrite+0x26>
		// pin is configured for output mode
		if (val) {
    bf04:	cbz	r1, bf0c <digitalWrite+0x20>
			*(p->reg + 0x21) = mask; // set register
    bf06:	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    bf0a:	pop	{r4, pc}
			*(p->reg + 0x22) = mask; // clear register
    bf0c:	str.w	r2, [r3, #136]	; 0x88
    bf10:	b.n	bf0a <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bf12:	ldr	r3, [r0, #8]
		if (val) {
    bf14:	cbz	r1, bf1c <digitalWrite+0x30>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bf16:	ldr	r2, [pc, #12]	; (bf24 <digitalWrite+0x38>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bf18:	str	r2, [r3, #0]
    bf1a:	b.n	bf0a <digitalWrite+0x1e>
    bf1c:	ldr	r2, [pc, #8]	; (bf28 <digitalWrite+0x3c>)
    bf1e:	b.n	bf18 <digitalWrite+0x2c>
    bf20:	.word	0x20000614
    bf24:	.word	0x0001f038
    bf28:	.word	0x00013038

0000bf2c <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    bf2c:	cmp	r0, #54	; 0x36
{
    bf2e:	push	{r4, r5, lr}
	if (pin >= CORE_NUM_DIGITAL) return;
    bf30:	bhi.n	bf62 <pinMode+0x36>
	p = digital_pin_to_info_PGM + pin;
    bf32:	ldr	r3, [pc, #76]	; (bf80 <pinMode+0x54>)
    bf34:	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bf36:	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bf38:	ldr	r2, [r3, r2]
	p = digital_pin_to_info_PGM + pin;
    bf3a:	add.w	r0, r3, r0, lsl #4
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf3e:	ldr	r4, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bf40:	ldrd	r3, r5, [r0, #8]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    bf44:	beq.n	bf4a <pinMode+0x1e>
    bf46:	cmp	r1, #4
    bf48:	bne.n	bf64 <pinMode+0x38>
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf4a:	orrs	r4, r5
		if (mode == OUTPUT) {
    bf4c:	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
    bf4e:	str	r4, [r2, #4]
		if (mode == OUTPUT) {
    bf50:	bne.n	bf56 <pinMode+0x2a>
			*(p->pad) = IOMUXC_PAD_DSE(7);
    bf52:	movs	r2, #56	; 0x38
    bf54:	b.n	bf5a <pinMode+0x2e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    bf56:	movw	r2, #2104	; 0x838
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bf5a:	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    bf5c:	movs	r2, #21
    bf5e:	ldr	r3, [r0, #4]
    bf60:	str	r2, [r3, #0]
}
    bf62:	pop	{r4, r5, pc}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    bf64:	bic.w	r4, r4, r5
    bf68:	str	r4, [r2, #4]
		if (mode == INPUT) {
    bf6a:	cmp	r1, #0
    bf6c:	beq.n	bf52 <pinMode+0x26>
		} else if (mode == INPUT_PULLUP) {
    bf6e:	cmp	r1, #2
    bf70:	bne.n	bf76 <pinMode+0x4a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    bf72:	ldr	r2, [pc, #16]	; (bf84 <pinMode+0x58>)
    bf74:	b.n	bf5a <pinMode+0x2e>
		} else if (mode == INPUT_PULLDOWN) {
    bf76:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    bf78:	ite	eq
    bf7a:	ldreq	r2, [pc, #12]	; (bf88 <pinMode+0x5c>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    bf7c:	ldrne	r2, [pc, #12]	; (bf8c <pinMode+0x60>)
    bf7e:	b.n	bf5a <pinMode+0x2e>
    bf80:	.word	0x20000614
    bf84:	.word	0x0001f038
    bf88:	.word	0x00013038
    bf8c:	.word	0x00010038

0000bf90 <flexpwm_init>:

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bf90:	mov.w	r3, #61440	; 0xf000
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    bf94:	movs	r2, #0
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    bf96:	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
    bf9a:	movs	r3, #15
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    bf9c:	mov	r1, r2
	p->FSTS0 = 0x000F; // clear fault status
    bf9e:	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
    bfa2:	strh.w	r2, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bfa6:	ldrh.w	r3, [r0, #392]	; 0x188
    bfaa:	uxth	r3, r3
{
    bfac:	push	{r4, r5, r6, r7, lr}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bfae:	orr.w	r3, r3, #240	; 0xf0
    bfb2:	movs	r7, #96	; 0x60
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bfb4:	mov.w	r6, #57344	; 0xe000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bfb8:	mov.w	r5, #1024	; 0x400
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    bfbc:	movw	r4, #33464	; 0x82b8
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    bfc0:	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bfc4:	mla	r3, r7, r2, r0
	for (i=0; i < 4; i++) {
    bfc8:	adds	r2, #1
    bfca:	cmp	r2, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    bfcc:	strh	r6, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    bfce:	strh	r5, [r3, #6]
		p->SM[i].OCTRL = 0;
    bfd0:	strh	r1, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    bfd2:	strh	r1, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    bfd4:	strh	r1, [r3, #2]
		p->SM[i].VAL0 = 0;
    bfd6:	strh	r1, [r3, #10]
		p->SM[i].VAL1 = 33464;
    bfd8:	strh	r4, [r3, #14]
		p->SM[i].VAL2 = 0;
    bfda:	strh	r1, [r3, #18]
		p->SM[i].VAL3 = 0;
    bfdc:	strh	r1, [r3, #22]
		p->SM[i].VAL4 = 0;
    bfde:	strh	r1, [r3, #26]
		p->SM[i].VAL5 = 0;
    bfe0:	strh	r1, [r3, #30]
	for (i=0; i < 4; i++) {
    bfe2:	bne.n	bfc4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    bfe4:	ldrh.w	r3, [r0, #392]	; 0x188
    bfe8:	uxth	r3, r3
    bfea:	orr.w	r3, r3, #15
    bfee:	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    bff2:	ldrh.w	r3, [r0, #392]	; 0x188
    bff6:	uxth	r3, r3
    bff8:	orr.w	r3, r3, #3840	; 0xf00
    bffc:	strh.w	r3, [r0, #392]	; 0x188
}
    c000:	pop	{r4, r5, r6, r7, pc}

0000c002 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    c002:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c004:	mov.w	ip, #15
{
    c008:	push	{r4, r5, r6, r7, lr}
		p->CH[i].CTRL = 0; // stop timer
    c00a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c00c:	movw	r7, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c010:	movw	r6, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c014:	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    c018:	add.w	r3, r0, r2, lsl #5
    c01c:	lsls	r5, r2, #5
	for (i=0; i < 4; i++) {
    c01e:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    c020:	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    c022:	cmp	r2, #4
		p->CH[i].CNTR = 0;
    c024:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    c026:	strh.w	ip, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    c02a:	strh	r7, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    c02c:	strh	r6, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    c02e:	strh	r1, [r0, r5]
		p->CH[i].CMPLD1 = 0;
    c030:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    c032:	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    c034:	bne.n	c018 <quadtimer_init+0x16>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
    c036:	pop	{r4, r5, r6, r7, pc}

0000c038 <pwm_init>:

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c038:	ldr	r2, [pc, #84]	; (c090 <pwm_init+0x58>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    c03a:	ldr	r0, [pc, #88]	; (c094 <pwm_init+0x5c>)
{
    c03c:	push	{r3, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    c03e:	ldr	r3, [r2, #120]	; 0x78
    c040:	orr.w	r3, r3, #16711680	; 0xff0000
    c044:	str	r3, [r2, #120]	; 0x78
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    c046:	ldr.w	r3, [r2, #128]	; 0x80
    c04a:	orr.w	r3, r3, #4227858432	; 0xfc000000
    c04e:	orr.w	r3, r3, #196608	; 0x30000
    c052:	str.w	r3, [r2, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    c056:	bl	bf90 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    c05a:	add.w	r0, r0, #16384	; 0x4000
    c05e:	bl	bf90 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    c062:	add.w	r0, r0, #16384	; 0x4000
    c066:	bl	bf90 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    c06a:	add.w	r0, r0, #16384	; 0x4000
    c06e:	bl	bf90 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
    c072:	sub.w	r0, r0, #2146304	; 0x20c000
    c076:	bl	c002 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
    c07a:	add.w	r0, r0, #16384	; 0x4000
    c07e:	bl	c002 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
    c082:	add.w	r0, r0, #16384	; 0x4000
}
    c086:	ldmia.w	sp!, {r3, lr}
	quadtimer_init(&IMXRT_TMR3);
    c08a:	b.w	c002 <quadtimer_init>
    c08e:	nop
    c090:	.word	0x400fc000
    c094:	.word	0x403dc000

0000c098 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    c098:	ldr	r2, [pc, #8]	; (c0a4 <txEvent_event+0xc>)
    c09a:	ldr	r3, [r2, #0]
    c09c:	adds	r3, #1
    c09e:	str	r3, [r2, #0]
    c0a0:	bx	lr
    c0a2:	nop
    c0a4:	.word	0x20014c30

0000c0a8 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    c0a8:	push	{r4, lr}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    c0aa:	ldr	r4, [pc, #40]	; (c0d4 <rx_event+0x2c>)
	int i = t->callback_param;
    c0ac:	ldr	r1, [r0, #28]
	uint32_t head = rx_head;
    c0ae:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    c0b0:	ldr	r2, [pc, #36]	; (c0d8 <rx_event+0x30>)
	if (++head > RX_NUM) head = 0;
    c0b2:	adds	r3, #1
    c0b4:	cmp	r3, #5
    c0b6:	it	cs
    c0b8:	movcs	r3, #0
	rx_list[head] = i;
    c0ba:	strb	r1, [r2, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    c0bc:	ldr	r1, [r0, #4]
    c0be:	ldr	r2, [pc, #28]	; (c0dc <rx_event+0x34>)
    c0c0:	ubfx	r1, r1, #16, #15
    c0c4:	ldrh	r2, [r2, #0]
    c0c6:	subs	r2, r2, r1
	rx_list_transfer_len[head] = len;
    c0c8:	ldr	r1, [pc, #20]	; (c0e0 <rx_event+0x38>)
    c0ca:	str.w	r2, [r1, r3, lsl #2]
	rx_head = head;
    c0ce:	uxtb	r3, r3
    c0d0:	strb	r3, [r4, #0]
}
    c0d2:	pop	{r4, pc}
    c0d4:	.word	0x200155c8
    c0d8:	.word	0x200155d2
    c0dc:	.word	0x200153e8
    c0e0:	.word	0x20014cbc

0000c0e4 <rx_queue_transfer>:
{
    c0e4:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c0e6:	ldr	r1, [pc, #80]	; (c138 <rx_queue_transfer+0x54>)
{
    c0e8:	mov	r3, r0
	arm_dcache_delete(buffer, rx_packet_size);
    c0ea:	ldr	r7, [pc, #80]	; (c13c <rx_queue_transfer+0x58>)
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    c0ec:	add.w	r1, r1, r0, lsl #9
	arm_dcache_delete(buffer, rx_packet_size);
    c0f0:	ldrh	r0, [r7, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c0f2:	mov	r2, r1
	uint32_t end_addr = (uint32_t)addr + size;
    c0f4:	add	r0, r1
	asm("dsb");
    c0f6:	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    c0fa:	mov.w	r4, #3758153728	; 0xe000e000
    c0fe:	str.w	r2, [r4, #3932]	; 0xf5c
		location += 32;
    c102:	adds	r2, #32
	} while (location < end_addr);
    c104:	cmp	r0, r2
    c106:	bhi.n	c0fe <rx_queue_transfer+0x1a>
	asm("dsb");
    c108:	dsb	sy
	asm("isb");
    c10c:	isb	sy
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c110:	ldr	r5, [pc, #44]	; (c140 <rx_queue_transfer+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c112:	mov.w	r6, #131072	; 0x20000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c116:	ldrh	r2, [r7, #0]
    c118:	add.w	r5, r5, r3, lsl #5
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c11c:	str.w	r6, [r4, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    c120:	mov	r0, r5
    c122:	bl	b42c <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c126:	mov	r1, r5
    c128:	movs	r0, #4
	NVIC_DISABLE_IRQ(IRQ_USB1);
    c12a:	str.w	r6, [r4, #396]	; 0x18c
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    c12e:	bl	b47c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    c132:	str.w	r6, [r4, #268]	; 0x10c
}
    c136:	pop	{r3, r4, r5, r6, r7, pc}
    c138:	.word	0x20201000
    c13c:	.word	0x200153e8
    c140:	.word	0x20005c40

0000c144 <usb_mtp_configure>:
	if (usb_high_speed) {
    c144:	ldr	r3, [pc, #120]	; (c1c0 <usb_mtp_configure+0x7c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c146:	movs	r2, #128	; 0x80
    c148:	movs	r1, #0
    c14a:	ldr	r0, [pc, #120]	; (c1c4 <usb_mtp_configure+0x80>)
{
    c14c:	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    c14e:	ldrb	r3, [r3, #0]
	tx_head = 0;
    c150:	movs	r4, #0
		rx_packet_size = MTP_RX_SIZE_480;
    c152:	ldr	r6, [pc, #116]	; (c1c8 <usb_mtp_configure+0x84>)
	if (usb_high_speed) {
    c154:	cmp	r3, #0
		tx_packet_size = MTP_TX_SIZE_480;
    c156:	ldr	r3, [pc, #116]	; (c1cc <usb_mtp_configure+0x88>)
	if (usb_high_speed) {
    c158:	ite	eq
    c15a:	moveq	r5, #64	; 0x40
    c15c:	movne.w	r5, #512	; 0x200
		tx_packet_size = MTP_TX_SIZE_480;
    c160:	strh	r5, [r3, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    c162:	strh	r5, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    c164:	bl	a210 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    c168:	movs	r2, #128	; 0x80
    c16a:	movs	r1, #0
    c16c:	ldr	r0, [pc, #96]	; (c1d0 <usb_mtp_configure+0x8c>)
    c16e:	bl	a210 <memset>
	tx_head = 0;
    c172:	ldr	r3, [pc, #96]	; (c1d4 <usb_mtp_configure+0x90>)
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c174:	mov	r2, r4
    c176:	mov	r1, r5
	tx_head = 0;
    c178:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c17a:	movs	r0, #4
	rx_head = 0;
    c17c:	ldr	r3, [pc, #88]	; (c1d8 <usb_mtp_configure+0x94>)
    c17e:	strb	r4, [r3, #0]
	rx_tail = 0;
    c180:	ldr	r3, [pc, #88]	; (c1dc <usb_mtp_configure+0x98>)
    c182:	strb	r4, [r3, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    c184:	mov	r3, r4
    c186:	bl	b3ec <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    c18a:	mov	r2, r4
    c18c:	ldrh	r1, [r6, #0]
    c18e:	movs	r0, #4
    c190:	ldr	r3, [pc, #76]	; (c1e0 <usb_mtp_configure+0x9c>)
    c192:	bl	b3ac <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    c196:	mov	r2, r4
    c198:	ldr	r3, [pc, #72]	; (c1e4 <usb_mtp_configure+0xa0>)
    c19a:	movs	r1, #32
    c19c:	movs	r0, #5
    c19e:	bl	b3ec <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c1a2:	mov	r0, r4
    c1a4:	bl	c0e4 <rx_queue_transfer>
    c1a8:	movs	r0, #1
    c1aa:	bl	c0e4 <rx_queue_transfer>
    c1ae:	movs	r0, #2
    c1b0:	bl	c0e4 <rx_queue_transfer>
    c1b4:	movs	r0, #3
}
    c1b6:	ldmia.w	sp!, {r4, r5, r6, lr}
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    c1ba:	b.w	c0e4 <rx_queue_transfer>
    c1be:	nop
    c1c0:	.word	0x200155e0
    c1c4:	.word	0x20005d40
    c1c8:	.word	0x200153e8
    c1cc:	.word	0x20015470
    c1d0:	.word	0x20005c40
    c1d4:	.word	0x200155dc
    c1d8:	.word	0x200155c8
    c1dc:	.word	0x200155d8
    c1e0:	.word	0x0000c0a9
    c1e4:	.word	0x0000c099

0000c1e8 <usb_mtp_recv>:


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    c1e8:	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t wait_begin_at = systick_millis_count;
    c1ec:	ldr	r7, [pc, #112]	; (c260 <usb_mtp_recv+0x78>)
{
    c1ee:	mov	r5, r1
	uint32_t tail = rx_tail;
    c1f0:	ldr	r6, [pc, #112]	; (c264 <usb_mtp_recv+0x7c>)
	uint32_t wait_begin_at = systick_millis_count;
    c1f2:	ldr.w	r8, [r7]
	uint32_t tail = rx_tail;
    c1f6:	ldrb	r3, [r6, #0]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c1f8:	ldr.w	r9, [pc, #120]	; c274 <usb_mtp_recv+0x8c>
	uint32_t tail = rx_tail;
    c1fc:	uxtb	r4, r3
		if (tail != rx_head) break;
    c1fe:	ldr.w	sl, [pc, #120]	; c278 <usb_mtp_recv+0x90>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c202:	ldrb.w	r3, [r9]
    c206:	cbz	r3, c254 <usb_mtp_recv+0x6c>
		if (tail != rx_head) break;
    c208:	ldrb.w	r3, [sl]
    c20c:	cmp	r4, r3
    c20e:	bne.n	c224 <usb_mtp_recv+0x3c>
		if (systick_millis_count - wait_begin_at >= timeout)  {
    c210:	ldr	r3, [r7, #0]
    c212:	str	r0, [sp, #4]
    c214:	sub.w	r3, r3, r8
    c218:	cmp	r3, r5
    c21a:	bcs.n	c25a <usb_mtp_recv+0x72>
			return 0;
		}
		yield();
    c21c:	bl	c418 <yield>
		if (!usb_configuration) return -1; // usb not enumerated by host
    c220:	ldr	r0, [sp, #4]
    c222:	b.n	c202 <usb_mtp_recv+0x1a>
	}
	if (++tail > RX_NUM) tail = 0;
    c224:	adds	r3, r4, #1
	uint32_t i = rx_list[tail];
    c226:	ldr	r2, [pc, #64]	; (c268 <usb_mtp_recv+0x80>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    c228:	ldr	r1, [pc, #64]	; (c26c <usb_mtp_recv+0x84>)
	if (++tail > RX_NUM) tail = 0;
    c22a:	cmp	r3, #5
    c22c:	it	cs
    c22e:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    c230:	ldrb	r5, [r2, r3]
	int len = rx_list_transfer_len[tail];
    c232:	ldr	r2, [pc, #60]	; (c270 <usb_mtp_recv+0x88>)
	memcpy(buffer,  rx_item_buffer, len);
    c234:	add.w	r1, r1, r5, lsl #9
	int len = rx_list_transfer_len[tail];
    c238:	ldr.w	r4, [r2, r3, lsl #2]
	rx_tail = tail;
    c23c:	uxtb	r3, r3
	memcpy(buffer,  rx_item_buffer, len);
    c23e:	mov	r2, r4
	rx_tail = tail;
    c240:	strb	r3, [r6, #0]
	memcpy(buffer,  rx_item_buffer, len);
    c242:	bl	a254 <memcpy>
	rx_queue_transfer(i);
    c246:	mov	r0, r5
    c248:	bl	c0e4 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
}
    c24c:	mov	r0, r4
    c24e:	add	sp, #8
    c250:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c254:	mov.w	r4, #4294967295
    c258:	b.n	c24c <usb_mtp_recv+0x64>
			return 0;
    c25a:	movs	r4, #0
    c25c:	b.n	c24c <usb_mtp_recv+0x64>
    c25e:	nop
    c260:	.word	0x20015374
    c264:	.word	0x200155d8
    c268:	.word	0x200155d2
    c26c:	.word	0x20201000
    c270:	.word	0x20014cbc
    c274:	.word	0x200155df
    c278:	.word	0x200155c8

0000c27c <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    c27c:	ldr	r3, [pc, #28]	; (c29c <usb_mtp_available+0x20>)
    c27e:	ldrb	r3, [r3, #0]
    c280:	and.w	r0, r3, #255	; 0xff
    c284:	cbz	r3, c29a <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    c286:	ldr	r3, [pc, #24]	; (c2a0 <usb_mtp_available+0x24>)
    c288:	ldrb	r2, [r3, #0]
    c28a:	ldr	r3, [pc, #24]	; (c2a4 <usb_mtp_available+0x28>)
    c28c:	ldrb	r3, [r3, #0]
    c28e:	cmp	r2, r3
    c290:	beq.n	c298 <usb_mtp_available+0x1c>
    c292:	ldr	r3, [pc, #20]	; (c2a8 <usb_mtp_available+0x2c>)
    c294:	ldrh	r0, [r3, #0]
    c296:	bx	lr
	if (!usb_configuration) return 0;
    c298:	movs	r0, #0
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    c29a:	bx	lr
    c29c:	.word	0x200155df
    c2a0:	.word	0x200155c8
    c2a4:	.word	0x200155d8
    c2a8:	.word	0x200153e8

0000c2ac <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    c2ac:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    c2b0:	ldr	r6, [pc, #164]	; (c358 <usb_mtp_send+0xac>)
{
    c2b2:	mov	r8, r0
	transfer_t *xfer = tx_transfer + tx_head;
    c2b4:	ldr	r7, [pc, #164]	; (c35c <usb_mtp_send+0xb0>)
{
    c2b6:	mov	r4, r1
	transfer_t *xfer = tx_transfer + tx_head;
    c2b8:	ldrb	r3, [r6, #0]
{
    c2ba:	mov	r5, r2
	uint32_t wait_begin_at = systick_millis_count;
    c2bc:	ldr.w	r9, [pc, #168]	; c368 <usb_mtp_send+0xbc>
	transfer_t *xfer = tx_transfer + tx_head;
    c2c0:	add.w	r7, r7, r3, lsl #5

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    c2c4:	ldr.w	fp, [pc, #164]	; c36c <usb_mtp_send+0xc0>
	uint32_t wait_begin_at = systick_millis_count;
    c2c8:	ldr.w	sl, [r9]
		if (!usb_configuration) return -1; // usb not enumerated by host
    c2cc:	ldrb.w	r3, [fp]
    c2d0:	cmp	r3, #0
    c2d2:	beq.n	c34c <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    c2d4:	mov	r0, r7
    c2d6:	bl	b498 <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    c2da:	lsls	r3, r0, #24
    c2dc:	bpl.n	c2f0 <usb_mtp_send+0x44>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c2de:	ldr.w	r3, [r9]
    c2e2:	sub.w	r3, r3, sl
    c2e6:	cmp	r3, r5
    c2e8:	bhi.n	c352 <usb_mtp_send+0xa6>
		yield();
    c2ea:	bl	c418 <yield>
	while (1) {
    c2ee:	b.n	c2cc <usb_mtp_send+0x20>
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2f0:	ldrb	r3, [r6, #0]
	memcpy(txdata, buffer, len);
    c2f2:	mov	r2, r4
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2f4:	ldr	r5, [pc, #104]	; (c360 <usb_mtp_send+0xb4>)
	memcpy(txdata, buffer, len);
    c2f6:	mov	r1, r8
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    c2f8:	add.w	r5, r5, r3, lsl #9
	memcpy(txdata, buffer, len);
    c2fc:	mov	r0, r5
    c2fe:	bl	a254 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    c302:	ldr	r2, [pc, #96]	; (c364 <usb_mtp_send+0xb8>)
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c304:	mov	r3, r5
    c306:	ldrh	r2, [r2, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    c308:	add	r2, r5
	asm("dsb");
    c30a:	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    c30e:	mov.w	r1, #3758153728	; 0xe000e000
    c312:	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    c316:	adds	r3, #32
	} while (location < end_addr);
    c318:	cmp	r2, r3
    c31a:	bhi.n	c312 <usb_mtp_send+0x66>
	asm("dsb");
    c31c:	dsb	sy
	asm("isb");
    c320:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    c324:	movs	r3, #0
    c326:	mov	r2, r4
    c328:	mov	r1, r5
    c32a:	mov	r0, r7
    c32c:	bl	b42c <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    c330:	movs	r0, #4
    c332:	mov	r1, r7
    c334:	bl	b458 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    c338:	ldrb	r3, [r6, #0]
	return len;
    c33a:	mov	r0, r4
	if (++tx_head >= TX_NUM) tx_head = 0;
    c33c:	adds	r3, #1
    c33e:	uxtb	r3, r3
    c340:	cmp	r3, #3
    c342:	it	hi
    c344:	movhi	r3, #0
    c346:	strb	r3, [r6, #0]
}
    c348:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!usb_configuration) return -1; // usb not enumerated by host
    c34c:	mov.w	r0, #4294967295
    c350:	b.n	c348 <usb_mtp_send+0x9c>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    c352:	movs	r0, #0
    c354:	b.n	c348 <usb_mtp_send+0x9c>
    c356:	nop
    c358:	.word	0x200155dc
    c35c:	.word	0x20005d40
    c360:	.word	0x20201800
    c364:	.word	0x20015470
    c368:	.word	0x20015374
    c36c:	.word	0x200155df

0000c370 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c370:	ldr	r3, [pc, #68]	; (c3b8 <usb_init_serialnumber+0x48>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
    c372:	movs	r2, #10
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c374:	ldr.w	r0, [r3, #544]	; 0x220
	if (num < 10000000) num = num * 10;
    c378:	ldr	r3, [pc, #64]	; (c3bc <usb_init_serialnumber+0x4c>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    c37a:	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    c37e:	cmp	r0, r3
{
    c380:	push	{r4, r5, lr}
	if (num < 10000000) num = num * 10;
    c382:	it	cc
    c384:	movcc	r3, #10
{
    c386:	sub	sp, #20
	if (num < 10000000) num = num * 10;
    c388:	it	cc
    c38a:	mulcc	r0, r3
	ultoa(num, buf, 10);
    c38c:	add	r1, sp, #4
    c38e:	bl	b4c0 <ultoa>
	for (i=0; i<10; i++) {
    c392:	ldr	r0, [pc, #44]	; (c3c0 <usb_init_serialnumber+0x50>)
    c394:	add	r2, sp, #4
    c396:	movs	r1, #0
    c398:	mov	r5, r0
		char c = buf[i];
    c39a:	ldrb.w	r4, [r2], #1
		if (!c) break;
    c39e:	mov	r3, r1
	for (i=0; i<10; i++) {
    c3a0:	adds	r1, #1
		if (!c) break;
    c3a2:	cbz	r4, c3ae <usb_init_serialnumber+0x3e>
	for (i=0; i<10; i++) {
    c3a4:	cmp	r1, #10
		usb_string_serial_number_default.wString[i] = c;
    c3a6:	strh.w	r4, [r0, #2]!
	for (i=0; i<10; i++) {
    c3aa:	bne.n	c39a <usb_init_serialnumber+0x2a>
    c3ac:	mov	r3, r1
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c3ae:	adds	r3, #1
    c3b0:	lsls	r3, r3, #1
    c3b2:	strb	r3, [r5, #0]
}
    c3b4:	add	sp, #20
    c3b6:	pop	{r4, r5, pc}
    c3b8:	.word	0x401f4400
    c3bc:	.word	0x00989680
    c3c0:	.word	0x200022f6

0000c3c4 <EventResponder::runFromYield()>:
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    c3c4:	ldr	r1, [pc, #68]	; (c40c <EventResponder::runFromYield()+0x48>)
	static void runFromYield() {
    c3c6:	push	{r3, r4, r5, lr}
		if (!firstYield) return;  
    c3c8:	ldr	r3, [r1, #0]
    c3ca:	cbz	r3, c3e0 <EventResponder::runFromYield()+0x1c>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c3cc:	mrs	r3, IPSR
		if (ipsr != 0) return;
    c3d0:	cbnz	r3, c3e0 <EventResponder::runFromYield()+0x1c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c3d2:	mrs	r2, PRIMASK
		__disable_irq();
    c3d6:	cpsid	i
		EventResponder *first = firstYield;
    c3d8:	ldr	r0, [r1, #0]
		if (first == nullptr) {
    c3da:	cbnz	r0, c3e2 <EventResponder::runFromYield()+0x1e>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    c3dc:	cbnz	r2, c3e0 <EventResponder::runFromYield()+0x1c>
    c3de:	cpsie	i
	}
    c3e0:	pop	{r3, r4, r5, pc}
		if (runningFromYield) {
    c3e2:	ldr	r4, [pc, #44]	; (c410 <EventResponder::runFromYield()+0x4c>)
    c3e4:	ldrb	r5, [r4, #0]
    c3e6:	cmp	r5, #0
    c3e8:	bne.n	c3dc <EventResponder::runFromYield()+0x18>
		runningFromYield = true;
    c3ea:	movs	r3, #1
    c3ec:	strb	r3, [r4, #0]
		firstYield = first->_next;
    c3ee:	ldr	r3, [r0, #20]
    c3f0:	str	r3, [r1, #0]
		if (firstYield) {
    c3f2:	cbz	r3, c406 <EventResponder::runFromYield()+0x42>
			firstYield->_prev = nullptr;
    c3f4:	str	r5, [r3, #24]
		if (doit) __enable_irq();
    c3f6:	cbnz	r2, c3fa <EventResponder::runFromYield()+0x36>
    c3f8:	cpsie	i
		first->_triggered = false;
    c3fa:	movs	r5, #0
		(*(first->_function))(*first);
    c3fc:	ldr	r3, [r0, #8]
		first->_triggered = false;
    c3fe:	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c400:	blx	r3
		runningFromYield = false;
    c402:	strb	r5, [r4, #0]
    c404:	b.n	c3e0 <EventResponder::runFromYield()+0x1c>
			lastYield = nullptr;
    c406:	ldr	r1, [pc, #12]	; (c414 <EventResponder::runFromYield()+0x50>)
    c408:	str	r3, [r1, #0]
    c40a:	b.n	c3f6 <EventResponder::runFromYield()+0x32>
    c40c:	.word	0x20014804
    c410:	.word	0x20015537
    c414:	.word	0x20014810

0000c418 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    c418:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    c41c:	ldr	r3, [pc, #92]	; (c47c <yield+0x64>)
    c41e:	ldrb	r4, [r3, #0]
	if (!check_flags) return;	// nothing to do
    c420:	cbz	r4, c44a <yield+0x32>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    c422:	ldr	r5, [pc, #92]	; (c480 <yield+0x68>)
    c424:	ldrb	r3, [r5, #0]
    c426:	cbnz	r3, c44a <yield+0x32>
	running = 1;
    c428:	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c42a:	lsls	r1, r4, #31
	running = 1;
    c42c:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    c42e:	bpl.n	c43a <yield+0x22>
    c430:	bl	a73c <usb_serial_available>
		if (Serial.available()) serialEvent();
    c434:	cbz	r0, c43a <yield+0x22>
    c436:	nop.w
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c43a:	lsls	r2, r4, #30
    c43c:	bmi.n	c470 <yield+0x58>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    c43e:	movs	r3, #0
    c440:	strb	r3, [r5, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    c442:	lsls	r3, r4, #29
    c444:	bpl.n	c44a <yield+0x32>
		EventResponder::runFromYield();
    c446:	bl	c3c4 <EventResponder::runFromYield()>
	}
};
    c44a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
			s_serials_with_serial_events[i]->doYieldCode();
    c44e:	ldr.w	r7, [r9, r3, lsl #2]
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    c452:	ldr	r3, [r7, #0]
    c454:	mov	r0, r7
    c456:	ldr	r3, [r3, #16]
    c458:	blx	r3
    c45a:	cbz	r0, c462 <yield+0x4a>
    c45c:	ldr	r3, [r7, #20]
    c45e:	ldr	r3, [r3, #8]
    c460:	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c462:	adds	r6, #1
    c464:	ldrb.w	r2, [r8]
    c468:	uxtb	r3, r6
    c46a:	cmp	r2, r3
    c46c:	bhi.n	c44e <yield+0x36>
    c46e:	b.n	c43e <yield+0x26>
    c470:	movs	r6, #0
    c472:	ldr.w	r8, [pc, #16]	; c484 <yield+0x6c>
			s_serials_with_serial_events[i]->doYieldCode();
    c476:	ldr.w	r9, [pc, #16]	; c488 <yield+0x70>
    c47a:	b.n	c464 <yield+0x4c>
    c47c:	.word	0x200155e2
    c480:	.word	0x20015539
    c484:	.word	0x20015538
    c488:	.word	0x20014814

0000c48c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    c48c:	push	{r4, r5, r6, lr}
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    c48e:	ldr	r5, [pc, #44]	; (c4bc <EventResponder::runFromInterrupt()+0x30>)
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    c490:	movs	r4, #0
			} else {
				lastInterrupt = nullptr;
    c492:	ldr	r6, [pc, #44]	; (c4c0 <EventResponder::runFromInterrupt()+0x34>)
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c494:	mrs	r2, PRIMASK
		__disable_irq();
    c498:	cpsid	i
		EventResponder *first = firstInterrupt;
    c49a:	ldr	r0, [r5, #0]
		if (first) {
    c49c:	cbz	r0, c4b6 <EventResponder::runFromInterrupt()+0x2a>
			firstInterrupt = first->_next;
    c49e:	ldr	r3, [r0, #20]
    c4a0:	str	r3, [r5, #0]
			if (firstInterrupt) {
    c4a2:	cbz	r3, c4b2 <EventResponder::runFromInterrupt()+0x26>
				firstInterrupt->_prev = nullptr;
    c4a4:	str	r4, [r3, #24]
		if (doit) __enable_irq();
    c4a6:	cbnz	r2, c4aa <EventResponder::runFromInterrupt()+0x1e>
    c4a8:	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    c4aa:	ldr	r3, [r0, #8]
			first->_triggered = false;
    c4ac:	strb	r4, [r0, #29]
			(*(first->_function))(*first);
    c4ae:	blx	r3
		} else {
			enableInterrupts(irq);
			break;
		}
	}
    c4b0:	b.n	c494 <EventResponder::runFromInterrupt()+0x8>
				lastInterrupt = nullptr;
    c4b2:	str	r3, [r6, #0]
    c4b4:	b.n	c4a6 <EventResponder::runFromInterrupt()+0x1a>
    c4b6:	cbnz	r2, c4ba <EventResponder::runFromInterrupt()+0x2e>
    c4b8:	cpsie	i
}
    c4ba:	pop	{r4, r5, r6, pc}
    c4bc:	.word	0x2001480c
    c4c0:	.word	0x20014808

0000c4c4 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    c4c4:	b.w	c48c <EventResponder::runFromInterrupt()>

0000c4c8 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    c4c8:	ldr	r3, [pc, #16]	; (c4dc <systick_isr+0x14>)
    c4ca:	ldr	r2, [r3, #4]
    c4cc:	ldr	r3, [pc, #16]	; (c4e0 <systick_isr+0x18>)
    c4ce:	str	r2, [r3, #0]
	systick_millis_count++;
    c4d0:	ldr	r2, [pc, #16]	; (c4e4 <systick_isr+0x1c>)
    c4d2:	ldr	r3, [r2, #0]
    c4d4:	adds	r3, #1
    c4d6:	str	r3, [r2, #0]
}
    c4d8:	bx	lr
    c4da:	nop
    c4dc:	.word	0xe0001000
    c4e0:	.word	0x20015370
    c4e4:	.word	0x20015374

0000c4e8 <DMAChannel::begin(bool)>:
#warning "CR is defined as something?"
#endif


void DMAChannel::begin(bool force_initialization)
{
    c4e8:	push	{r4, r5, lr}
	uint32_t ch = 0;

	__disable_irq();
    c4ea:	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    c4ec:	ldr	r4, [pc, #136]	; (c578 <DMAChannel::begin(bool)+0x90>)
    c4ee:	cbnz	r1, c514 <DMAChannel::begin(bool)+0x2c>
    c4f0:	ldr	r1, [r0, #0]
    c4f2:	cbz	r1, c514 <DMAChannel::begin(bool)+0x2c>
    c4f4:	ldrb	r3, [r0, #4]
    c4f6:	cmp	r3, #15
    c4f8:	bhi.n	c514 <DMAChannel::begin(bool)+0x2c>
	  && (dma_channel_allocated_mask & (1 << channel))
    c4fa:	ldrh	r2, [r4, #0]
    c4fc:	asrs	r2, r3
    c4fe:	lsls	r2, r2, #31
    c500:	bpl.n	c514 <DMAChannel::begin(bool)+0x2c>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
    c502:	add.w	r3, r3, #33554432	; 0x2000000
    c506:	add.w	r3, r3, #29824	; 0x7480
    c50a:	cmp.w	r1, r3, lsl #5
    c50e:	bne.n	c514 <DMAChannel::begin(bool)+0x2c>
		// DMA channel already allocated
		__enable_irq();
    c510:	cpsie	i
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    c512:	pop	{r4, r5, pc}
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    c514:	ldrh	r1, [r4, #0]
    c516:	movs	r3, #0
    c518:	asr.w	r2, r1, r3
    c51c:	ands.w	r2, r2, #1
    c520:	bne.n	c568 <DMAChannel::begin(bool)+0x80>
			dma_channel_allocated_mask |= (1 << ch);
    c522:	movs	r5, #1
    c524:	lsls	r5, r3
    c526:	orrs	r1, r5
    c528:	strh	r1, [r4, #0]
			__enable_irq();
    c52a:	cpsie	i
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c52c:	ldr	r5, [pc, #76]	; (c57c <DMAChannel::begin(bool)+0x94>)
	channel = ch;
    c52e:	uxtb	r4, r3
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c530:	add.w	r3, r3, #33554432	; 0x2000000
	channel = ch;
    c534:	strb	r4, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c536:	ldr	r1, [r5, #124]	; 0x7c
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c538:	add.w	r3, r3, #29824	; 0x7480
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c53c:	orr.w	r1, r1, #192	; 0xc0
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c540:	lsls	r3, r3, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
    c542:	str	r1, [r5, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
    c544:	movw	r5, #1154	; 0x482
    c548:	ldr	r1, [pc, #52]	; (c580 <DMAChannel::begin(bool)+0x98>)
    c54a:	str	r5, [r1, #0]
	DMA_CERQ = ch;
    c54c:	strb	r4, [r1, #26]
	DMA_CERR = ch;
    c54e:	strb	r4, [r1, #30]
	DMA_CEEI = ch;
    c550:	strb	r4, [r1, #24]
	DMA_CINT = ch;
    c552:	strb	r4, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
    c554:	str	r3, [r0, #0]
	*p++ = 0;
    c556:	strd	r2, r2, [r3]
	*p++ = 0;
    c55a:	strd	r2, r2, [r3, #8]
	*p++ = 0;
    c55e:	strd	r2, r2, [r3, #16]
	*p++ = 0;
    c562:	strd	r2, r2, [r3, #24]
    c566:	b.n	c512 <DMAChannel::begin(bool)+0x2a>
		if (++ch >= DMA_MAX_CHANNELS) {
    c568:	adds	r3, #1
    c56a:	cmp	r3, #16
    c56c:	bne.n	c518 <DMAChannel::begin(bool)+0x30>
			__enable_irq();
    c56e:	cpsie	i
			TCD = (TCD_t *)0;
    c570:	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
    c572:	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
    c574:	str	r2, [r0, #0]
			return; // no more channels available
    c576:	b.n	c512 <DMAChannel::begin(bool)+0x2a>
    c578:	.word	0x200153be
    c57c:	.word	0x400fc000
    c580:	.word	0x400e8000

0000c584 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    c584:	ldrb	r3, [r0, #4]
    c586:	cmp	r3, #15
    c588:	bhi.n	c5aa <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
    c58a:	ldr	r2, [pc, #32]	; (c5ac <DMAChannel::release()+0x28>)
    c58c:	strb	r3, [r2, #26]
	__disable_irq();
    c58e:	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    c590:	ldr	r1, [pc, #28]	; (c5b0 <DMAChannel::release()+0x2c>)
    c592:	movs	r2, #1
    c594:	ldrb	r3, [r0, #4]
    c596:	lsls	r2, r3
    c598:	ldrh	r3, [r1, #0]
    c59a:	bic.w	r3, r3, r2
    c59e:	strh	r3, [r1, #0]
	__enable_irq();
    c5a0:	cpsie	i
	channel = DMA_MAX_CHANNELS;
    c5a2:	movs	r3, #16
    c5a4:	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    c5a6:	movs	r3, #0
    c5a8:	str	r3, [r0, #0]
}
    c5aa:	bx	lr
    c5ac:	.word	0x400e8000
    c5b0:	.word	0x200153be

0000c5b4 <Print::print(char const*)>:
	size_t print(const char s[])			{ return write(s); }
    c5b4:	push	{r3, lr}
    c5b6:	bl	cda <Print::write(char const*)>
    c5ba:	pop	{r3, pc}

0000c5bc <Print::print(unsigned char)>:
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    c5bc:	movs	r3, #0
    c5be:	movs	r2, #10
    c5c0:	b.w	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c5c4 <Print::print(unsigned long, int)>:
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    c5c4:	movs	r3, #0
    c5c6:	uxtb	r2, r2
    c5c8:	b.w	c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

0000c5cc <Print::println(unsigned long, int)>:
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    c5cc:	push	{r3, r4, r5, lr}
    c5ce:	mov	r5, r0
    c5d0:	bl	c5c4 <Print::print(unsigned long, int)>
    c5d4:	mov	r4, r0
    c5d6:	mov	r0, r5
    c5d8:	bl	c720 <Print::println()>
    c5dc:	add	r0, r4
    c5de:	pop	{r3, r4, r5, pc}

0000c5e0 <CrashReportClass::checksum(void const volatile*, int)>:
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
    c5e0:	movs	r2, #0
    c5e2:	movs	r3, #1
    c5e4:	add	r0, r1
	static uint32_t checksum(volatile const void *data, int len) {
    c5e6:	push	{r4, lr}
		while (len > 0) {
    c5e8:	cmp	r1, #0
    c5ea:	sub.w	r4, r0, r1
    c5ee:	bgt.n	c5f8 <CrashReportClass::checksum(void const volatile*, int)+0x18>
			a += *p++;
			b += a;
			len -= 2;
		}
		a = a & 65535;
    c5f0:	uxth	r3, r3
		b = b & 65535;
		return a | (b << 16);
	}
    c5f2:	orr.w	r0, r3, r2, lsl #16
    c5f6:	pop	{r4, pc}
			a += *p++;
    c5f8:	ldrh	r4, [r4, #0]
			len -= 2;
    c5fa:	subs	r1, #2
			a += *p++;
    c5fc:	uxtah	r3, r3, r4
			b += a;
    c600:	add	r2, r3
			len -= 2;
    c602:	b.n	c5e8 <CrashReportClass::checksum(void const volatile*, int)+0x8>

0000c604 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c604:	b.w	a750 <usb_serial_flush_input>

0000c608 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c608:	b.w	a6f8 <usb_serial_peekchar>

0000c60c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c60c:	b.w	a7b0 <usb_serial_getchar>

0000c610 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c610:	b.w	a73c <usb_serial_available>

0000c614 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c614:	b.w	a9c0 <usb_serial_flush_output>

0000c618 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c618:	b.w	a974 <usb_serial_write_buffer_free>

0000c61c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c61c:	mov	r0, r1
    c61e:	mov	r1, r2
    c620:	b.w	a7d0 <usb_serial_write>

0000c624 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c624:	mov	r0, r1
    c626:	b.w	a95c <usb_serial_putchar>

0000c62a <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    c62a:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    c62c:	bl	788 <setup>
	while (1) {
		loop();
    c630:	bl	27c <loop>
		yield();
    c634:	bl	c418 <yield>
	while (1) {
    c638:	b.n	c630 <main+0x6>
	...

0000c63c <Stream::timedRead()>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    c63c:	push	{r4, r5, r6, lr}
    c63e:	ldr	r5, [pc, #36]	; (c664 <Stream::timedRead()+0x28>)
    c640:	mov	r4, r0
    c642:	ldr	r6, [r5, #0]
  int c;
  unsigned long startMillis = millis();
  do {
    c = read();
    c644:	ldr	r3, [r4, #0]
    c646:	mov	r0, r4
    c648:	ldr	r3, [r3, #20]
    c64a:	blx	r3
    if (c >= 0) return c;
    c64c:	cmp	r0, #0
    c64e:	bge.n	c662 <Stream::timedRead()+0x26>
    yield();
    c650:	bl	c418 <yield>
    c654:	ldr	r3, [r5, #0]
  } while(millis() - startMillis < _timeout);
    c656:	ldr	r2, [r4, #8]
    c658:	subs	r3, r3, r6
    c65a:	cmp	r3, r2
    c65c:	bcc.n	c644 <Stream::timedRead()+0x8>
  return -1;     // -1 indicates timeout
    c65e:	mov.w	r0, #4294967295
}
    c662:	pop	{r4, r5, r6, pc}
    c664:	.word	0x20015374

0000c668 <Stream::readBytesUntil(char, char*, unsigned int)>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
    c668:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c66c:	mov	r6, r0
    c66e:	mov	r7, r1
    c670:	mov	r4, r3
	if (buffer == nullptr) return 0;
    c672:	mov	r5, r2
    c674:	cbz	r2, c6a6 <Stream::readBytesUntil(char, char*, unsigned int)+0x3e>
	if (length < 1) return 0;
    c676:	cbz	r3, c698 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>
	length--;
    c678:	add.w	r8, r3, #4294967295
	size_t index = 0;
    c67c:	movs	r4, #0
	while (index < length) {
    c67e:	cmp	r4, r8
    c680:	bcs.n	c694 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		int c = timedRead();
    c682:	mov	r0, r6
    c684:	bl	c63c <Stream::timedRead()>
		if (c == terminator) break;
    c688:	cmp	r7, r0
    c68a:	beq.n	c694 <Stream::readBytesUntil(char, char*, unsigned int)+0x2c>
		if (c < 0) {
    c68c:	cmp	r0, #0
    c68e:	bge.n	c69e <Stream::readBytesUntil(char, char*, unsigned int)+0x36>
	String readString(size_t max = 0 /* 0 means unlimited length */);
	String readStringUntil(char terminator, size_t max = 0 /* 0 means unlimited length */);
	int getReadError() { return read_error; }
	void clearReadError() { setReadError(0); }
  protected:
	void setReadError(int err = 1) { read_error = err; }
    c690:	movs	r3, #1
    c692:	strb	r3, [r6, #12]
			break;
		}
		*buffer++ = (char)c;
		index++;
	}
	*buffer = 0;
    c694:	movs	r3, #0
    c696:	strb	r3, [r5, #0]
	return index; // return number of characters, not including null terminator
}
    c698:	mov	r0, r4
    c69a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		index++;
    c69e:	adds	r4, #1
		*buffer++ = (char)c;
    c6a0:	strb.w	r0, [r5], #1
		index++;
    c6a4:	b.n	c67e <Stream::readBytesUntil(char, char*, unsigned int)+0x16>
	if (buffer == nullptr) return 0;
    c6a6:	mov	r4, r2
    c6a8:	b.n	c698 <Stream::readBytesUntil(char, char*, unsigned int)+0x30>

0000c6aa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    c6aa:	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c6ac:	push	{r4, r5, r6, r7, lr}
		base = 10;
    c6ae:	it	eq
    c6b0:	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    c6b2:	sub	sp, #44	; 0x2c
	}


	if (n == 0) {
    c6b4:	cbnz	r1, c6e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x38>
		buf[sizeof(buf) - 1] = '0';
    c6b6:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    c6b8:	movs	r4, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
    c6ba:	strb.w	r2, [sp, #37]	; 0x25
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c6be:	cbz	r3, c6d0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x26>
		i--;
    c6c0:	subs	r3, r4, #1
		buf[i] = '-';
    c6c2:	add	r2, sp, #40	; 0x28
		i--;
    c6c4:	uxtb	r4, r3
		buf[i] = '-';
    c6c6:	uxtab	r3, r2, r3
    c6ca:	movs	r2, #45	; 0x2d
    c6cc:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    c6d0:	ldr	r3, [r0, #0]
    c6d2:	add	r1, sp, #4
    c6d4:	rsb	r2, r4, #34	; 0x22
    c6d8:	ldr	r3, [r3, #4]
    c6da:	add	r1, r4
    c6dc:	blx	r3
}
    c6de:	add	sp, #44	; 0x2c
    c6e0:	pop	{r4, r5, r6, r7, pc}
		i = sizeof(buf) - 1;
    c6e2:	movs	r4, #33	; 0x21
			digit = n % base;
    c6e4:	udiv	r6, r1, r2
    c6e8:	mls	r7, r2, r6, r1
    c6ec:	uxtb	r5, r7
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6ee:	cmp	r7, #9
    c6f0:	add.w	r7, r4, #40	; 0x28
    c6f4:	ite	ls
    c6f6:	addls	r5, #48	; 0x30
    c6f8:	addhi	r5, #55	; 0x37
    c6fa:	add	r7, sp
			if (n == 0) break;
    c6fc:	cmp	r2, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c6fe:	uxtb	r5, r5
    c700:	strb.w	r5, [r7, #-36]
			if (n == 0) break;
    c704:	bhi.n	c6be <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x14>
			i--;
    c706:	subs	r4, #1
			n /= base;
    c708:	mov	r1, r6
			i--;
    c70a:	uxtb	r4, r4
			digit = n % base;
    c70c:	b.n	c6e4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x3a>

0000c70e <Print::print(long)>:
	if (n < 0) {
    c70e:	cmp	r1, #0
		n = -n;
    c710:	mov.w	r2, #10
    c714:	itte	lt
    c716:	neglt	r1, r1
		sign = '-';
    c718:	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    c71a:	movge	r3, #0
	if (base == 0) {
    c71c:	b.w	c6aa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c720 <Print::println()>:
	uint8_t buf[2]={'\r', '\n'};
    c720:	movw	r3, #2573	; 0xa0d
{
    c724:	push	{r0, r1, r2, lr}
	uint8_t buf[2]={'\r', '\n'};
    c726:	strh.w	r3, [sp, #4]
	return write(buf, 2);
    c72a:	movs	r2, #2
    c72c:	ldr	r3, [r0, #0]
    c72e:	add	r1, sp, #4
    c730:	ldr	r3, [r3, #4]
    c732:	blx	r3
}
    c734:	add	sp, #12
    c736:	ldr.w	pc, [sp], #4
	...

0000c73c <_write>:
	if (file >= 0 && file <= 2) file = (int)&Serial;
    c73c:	ldr	r3, [pc, #20]	; (c754 <_write+0x18>)
    c73e:	cmp	r0, #2
    c740:	it	hi
    c742:	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c744:	ldr	r0, [r3, #0]
{
    c746:	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c748:	ldr	r4, [r0, #4]
    c74a:	mov	r0, r3
    c74c:	mov	r3, r4
}
    c74e:	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    c752:	bx	r3
    c754:	.word	0x20001d30

0000c758 <Print::printf(char const*, ...)>:
{
    c758:	push	{r1, r2, r3}
    c75a:	push	{r0, r1, lr}
    c75c:	add	r2, sp, #12
    c75e:	ldr.w	r1, [r2], #4
	va_start(ap, format);
    c762:	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
    c764:	bl	eaa0 <vdiprintf>
}
    c768:	add	sp, #8
    c76a:	ldr.w	lr, [sp], #4
    c76e:	add	sp, #12
    c770:	bx	lr

0000c772 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
{
    c772:	push	{r4, r5}
	if (base == 0) {
    c774:	cbnz	r2, c780 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		return write((uint8_t)n);
    c776:	ldr	r3, [r0, #0]
    c778:	uxtb	r1, r1
    c77a:	ldr	r3, [r3, #0]
}
    c77c:	pop	{r4, r5}
		return write((uint8_t)n);
    c77e:	bx	r3
}
    c780:	pop	{r4, r5}
    c782:	b.w	c6aa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

0000c786 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
    c786:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c78a:	sub	sp, #72	; 0x48
    c78c:	mov	r8, r0
    c78e:	mov	r7, r2
    c790:	mov	r6, r3
    c792:	ldrb.w	r9, [sp, #104]	; 0x68
    c796:	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
    c79a:	cmp.w	r9, #1
    c79e:	bls.n	c812 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x8c>
	if (n == 0) {
    c7a0:	orrs.w	r3, r2, r6
    c7a4:	bne.n	c7dc <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x56>
		buf[sizeof(buf) - 1] = '0';
    c7a6:	movs	r3, #48	; 0x30
		i = sizeof(buf) - 1;
    c7a8:	movs	r5, #65	; 0x41
		buf[sizeof(buf) - 1] = '0';
    c7aa:	strb.w	r3, [sp, #69]	; 0x45
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    c7ae:	cmp.w	sl, #0
    c7b2:	beq.n	c7c4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3e>
		i--;
    c7b4:	subs	r3, r5, #1
		buf[i] = '-';
    c7b6:	add	r2, sp, #72	; 0x48
		i--;
    c7b8:	uxtb	r5, r3
		buf[i] = '-';
    c7ba:	uxtab	r3, r2, r3
    c7be:	movs	r2, #45	; 0x2d
    c7c0:	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
    c7c4:	ldr.w	r3, [r8]
    c7c8:	add	r1, sp, #4
    c7ca:	rsb	r2, r5, #66	; 0x42
    c7ce:	mov	r0, r8
    c7d0:	ldr	r3, [r3, #4]
    c7d2:	add	r1, r5
    c7d4:	blx	r3
}
    c7d6:	add	sp, #72	; 0x48
    c7d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
    c7dc:	movs	r5, #65	; 0x41
			digit = n % base;
    c7de:	mov	r1, r6
    c7e0:	mov	r2, r9
    c7e2:	movs	r3, #0
    c7e4:	mov	r0, r7
    c7e6:	bl	c954 <__aeabi_uldivmod>
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7ea:	add.w	r3, r5, #72	; 0x48
			digit = n % base;
    c7ee:	uxtb	r4, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7f0:	add	r3, sp
    c7f2:	cmp	r4, #9
    c7f4:	ite	ls
    c7f6:	addls	r4, #48	; 0x30
    c7f8:	addhi	r4, #55	; 0x37
			if (n == 0) break;
    c7fa:	cmp	r7, r9
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c7fc:	uxtb	r4, r4
			if (n == 0) break;
    c7fe:	sbcs.w	r6, r6, #0
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    c802:	strb.w	r4, [r3, #-68]
			if (n == 0) break;
    c806:	bcc.n	c7ae <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x28>
			i--;
    c808:	subs	r5, #1
			n /= base;
    c80a:	mov	r7, r0
    c80c:	mov	r6, r1
			i--;
    c80e:	uxtb	r5, r5
			digit = n % base;
    c810:	b.n	c7de <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x58>
	if (base < 2) return 0;
    c812:	movs	r0, #0
    c814:	b.n	c7d6 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x50>
	...

0000c818 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    c818:	vcmp.f64	d0, d0
{
    c81c:	push	{r4, r5, r6, r7, lr}
	if (isnan(number)) return print("nan");
    c81e:	vmrs	APSR_nzcv, fpscr
{
    c822:	mov	r6, r0
    c824:	mov	r5, r1
    c826:	vpush	{d8-d9}
    c82a:	sub	sp, #28
	if (isnan(number)) return print("nan");
    c82c:	bvc.n	c840 <Print::printFloat(double, unsigned char)+0x28>
	size_t print(const char s[])			{ return write(s); }
    c82e:	ldr	r1, [pc, #264]	; (c938 <Print::printFloat(double, unsigned char)+0x120>)
    c830:	bl	cda <Print::write(char const*)>
    c834:	mov	r4, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    c836:	mov	r0, r4
    c838:	add	sp, #28
    c83a:	vpop	{d8-d9}
    c83e:	pop	{r4, r5, r6, r7, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    c840:	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
    c844:	vldr	d6, [pc, #208]	; c918 <Print::printFloat(double, unsigned char)+0x100>
    c848:	vcmp.f64	d7, d6
    c84c:	vmrs	APSR_nzcv, fpscr
    c850:	ble.n	c856 <Print::printFloat(double, unsigned char)+0x3e>
    c852:	ldr	r1, [pc, #232]	; (c93c <Print::printFloat(double, unsigned char)+0x124>)
    c854:	b.n	c830 <Print::printFloat(double, unsigned char)+0x18>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    c856:	vldr	d7, [pc, #200]	; c920 <Print::printFloat(double, unsigned char)+0x108>
    c85a:	vcmpe.f64	d0, d7
    c85e:	vmrs	APSR_nzcv, fpscr
    c862:	ble.n	c86a <Print::printFloat(double, unsigned char)+0x52>
    c864:	ldr	r1, [pc, #216]	; (c940 <Print::printFloat(double, unsigned char)+0x128>)
    c866:	mov	r0, r6
    c868:	b.n	c830 <Print::printFloat(double, unsigned char)+0x18>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    c86a:	vldr	d7, [pc, #188]	; c928 <Print::printFloat(double, unsigned char)+0x110>
    c86e:	vcmpe.f64	d0, d7
    c872:	vmrs	APSR_nzcv, fpscr
    c876:	bmi.n	c864 <Print::printFloat(double, unsigned char)+0x4c>
	if (number < 0.0) {
    c878:	vcmpe.f64	d0, #0.0
	for (uint8_t i=0; i<digits; ++i) {
    c87c:	movs	r2, #0
	double rounding = 0.5;
    c87e:	vmov.f64	d8, #96	; 0x3f000000  0.5
	if (number < 0.0) {
    c882:	vmrs	APSR_nzcv, fpscr
		rounding *= 0.1;
    c886:	vldr	d6, [pc, #168]	; c930 <Print::printFloat(double, unsigned char)+0x118>
		number = -number;
    c88a:	itte	mi
    c88c:	vnegmi.f64	d0, d0
		sign = 1;
    c890:	movmi	r3, #1
	uint8_t sign=0;
    c892:	movpl	r3, #0
	for (uint8_t i=0; i<digits; ++i) {
    c894:	uxtb	r1, r2
    c896:	cmp	r5, r1
    c898:	bhi.n	c8e8 <Print::printFloat(double, unsigned char)+0xd0>
	number += rounding;
    c89a:	vadd.f64	d8, d0, d8
	unsigned long int_part = (unsigned long)number;
    c89e:	movs	r2, #10
    c8a0:	mov	r0, r6
    c8a2:	vcvt.u32.f64	s18, d8
	if (base == 0) {
    c8a6:	vmov	r1, s18
    c8aa:	bl	c6aa <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    c8ae:	mov	r4, r0
	if (digits > 0) {
    c8b0:	cmp	r5, #0
    c8b2:	beq.n	c836 <Print::printFloat(double, unsigned char)+0x1e>
	double remainder = number - (double)int_part;
    c8b4:	vcvt.f64.u32	d0, s18
    c8b8:	cmp	r5, #15
    c8ba:	add	r0, sp, #8
			remainder *= 10.0;
    c8bc:	vmov.f64	d6, #36	; 0x41200000  10.0
    c8c0:	it	cs
    c8c2:	movcs	r5, #15
		buf[0] = '.';
    c8c4:	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    c8c6:	vsub.f64	d0, d8, d0
		buf[0] = '.';
    c8ca:	mov	r1, r0
    c8cc:	mov	r2, r5
    c8ce:	strb.w	r3, [sp, #8]
		while (digits-- > 0) {
    c8d2:	subs	r2, #1
    c8d4:	uxtb	r2, r2
    c8d6:	cmp	r2, #255	; 0xff
    c8d8:	bne.n	c8f0 <Print::printFloat(double, unsigned char)+0xd8>
		count += write(buf, count);
    c8da:	adds	r5, #1
    c8dc:	ldr	r3, [r6, #0]
    c8de:	mov	r0, r6
    c8e0:	ldr	r3, [r3, #4]
    c8e2:	uxtb	r2, r5
    c8e4:	blx	r3
    c8e6:	b.n	c836 <Print::printFloat(double, unsigned char)+0x1e>
		rounding *= 0.1;
    c8e8:	vmul.f64	d8, d8, d6
	for (uint8_t i=0; i<digits; ++i) {
    c8ec:	adds	r2, #1
    c8ee:	b.n	c894 <Print::printFloat(double, unsigned char)+0x7c>
			remainder *= 10.0;
    c8f0:	vmul.f64	d0, d0, d6
			n = (uint8_t)(remainder);
    c8f4:	vcvt.u32.f64	s15, d0
    c8f8:	vstr	s15, [sp, #4]
    c8fc:	ldrb.w	r3, [sp, #4]
			remainder -= n; 
    c900:	vmov	s15, r3
			buf[count++] = '0' + n;
    c904:	add.w	r7, r3, #48	; 0x30
			remainder -= n; 
    c908:	vcvt.f64.s32	d7, s15
			buf[count++] = '0' + n;
    c90c:	strb.w	r7, [r0, #1]!
			remainder -= n; 
    c910:	vsub.f64	d0, d0, d7
    c914:	b.n	c8d2 <Print::printFloat(double, unsigned char)+0xba>
    c916:	nop
    c918:	.word	0xffffffff
    c91c:	.word	0x7fefffff
    c920:	.word	0xe0000000
    c924:	.word	0x41efffff
    c928:	.word	0xe0000000
    c92c:	.word	0xc1efffff
    c930:	.word	0xa0000000
    c934:	.word	0x3fb99999
    c938:	.word	0x200011a2
    c93c:	.word	0x200011a6
    c940:	.word	0x200011aa

0000c944 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
    c944:	b.w	cc60 <free>

0000c948 <__aeabi_atexit>:
    c948:	mov	r3, r1
    c94a:	mov	r1, r0
    c94c:	mov	r0, r3
    c94e:	b.w	dac0 <__cxa_atexit>
	...

0000c954 <__aeabi_uldivmod>:
    c954:	cbnz	r3, c96c <__aeabi_uldivmod+0x18>
    c956:	cbnz	r2, c96c <__aeabi_uldivmod+0x18>
    c958:	cmp	r1, #0
    c95a:	it	eq
    c95c:	cmpeq	r0, #0
    c95e:	itt	ne
    c960:	movne.w	r1, #4294967295
    c964:	movne.w	r0, #4294967295
    c968:	b.w	cc4c <__aeabi_idiv0>
    c96c:	sub.w	ip, sp, #8
    c970:	strd	ip, lr, [sp, #-16]!
    c974:	bl	c984 <__udivmoddi4>
    c978:	ldr.w	lr, [sp, #4]
    c97c:	ldrd	r2, r3, [sp, #8]
    c980:	add	sp, #16
    c982:	bx	lr

0000c984 <__udivmoddi4>:
    c984:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c988:	ldr	r6, [sp, #32]
    c98a:	mov	r5, r1
    c98c:	mov	r4, r0
    c98e:	mov	r7, r1
    c990:	cmp	r3, #0
    c992:	bne.n	ca2a <__udivmoddi4+0xa6>
    c994:	cmp	r2, r1
    c996:	mov	ip, r2
    c998:	bls.n	ca66 <__udivmoddi4+0xe2>
    c99a:	clz	r3, r2
    c99e:	cbz	r3, c9b2 <__udivmoddi4+0x2e>
    c9a0:	lsl.w	ip, r2, r3
    c9a4:	rsb	r2, r3, #32
    c9a8:	lsls	r7, r3
    c9aa:	lsr.w	r2, r0, r2
    c9ae:	orrs	r7, r2
    c9b0:	lsls	r4, r3
    c9b2:	mov.w	lr, ip, lsr #16
    c9b6:	uxth.w	r5, ip
    c9ba:	udiv	r1, r7, lr
    c9be:	lsrs	r2, r4, #16
    c9c0:	mls	r7, lr, r1, r7
    c9c4:	orr.w	r2, r2, r7, lsl #16
    c9c8:	mul.w	r0, r1, r5
    c9cc:	cmp	r0, r2
    c9ce:	bls.n	c9e6 <__udivmoddi4+0x62>
    c9d0:	adds.w	r2, ip, r2
    c9d4:	add.w	r7, r1, #4294967295
    c9d8:	bcs.w	cc14 <__udivmoddi4+0x290>
    c9dc:	cmp	r0, r2
    c9de:	bls.w	cc14 <__udivmoddi4+0x290>
    c9e2:	subs	r1, #2
    c9e4:	add	r2, ip
    c9e6:	subs	r2, r2, r0
    c9e8:	uxth	r4, r4
    c9ea:	udiv	r0, r2, lr
    c9ee:	mls	r2, lr, r0, r2
    c9f2:	orr.w	r4, r4, r2, lsl #16
    c9f6:	mul.w	r5, r0, r5
    c9fa:	cmp	r5, r4
    c9fc:	bls.n	ca14 <__udivmoddi4+0x90>
    c9fe:	adds.w	r4, ip, r4
    ca02:	add.w	r2, r0, #4294967295
    ca06:	bcs.w	cc18 <__udivmoddi4+0x294>
    ca0a:	cmp	r5, r4
    ca0c:	bls.w	cc18 <__udivmoddi4+0x294>
    ca10:	add	r4, ip
    ca12:	subs	r0, #2
    ca14:	orr.w	r0, r0, r1, lsl #16
    ca18:	subs	r4, r4, r5
    ca1a:	movs	r1, #0
    ca1c:	cbz	r6, ca26 <__udivmoddi4+0xa2>
    ca1e:	lsrs	r4, r3
    ca20:	movs	r3, #0
    ca22:	strd	r4, r3, [r6]
    ca26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca2a:	cmp	r3, r1
    ca2c:	bls.n	ca40 <__udivmoddi4+0xbc>
    ca2e:	cmp	r6, #0
    ca30:	beq.w	cc0e <__udivmoddi4+0x28a>
    ca34:	movs	r1, #0
    ca36:	strd	r0, r5, [r6]
    ca3a:	mov	r0, r1
    ca3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ca40:	clz	r1, r3
    ca44:	cmp	r1, #0
    ca46:	bne.n	cadc <__udivmoddi4+0x158>
    ca48:	cmp	r3, r5
    ca4a:	bcc.n	ca52 <__udivmoddi4+0xce>
    ca4c:	cmp	r2, r0
    ca4e:	bhi.w	cc42 <__udivmoddi4+0x2be>
    ca52:	subs	r4, r0, r2
    ca54:	sbc.w	r2, r5, r3
    ca58:	movs	r0, #1
    ca5a:	mov	r7, r2
    ca5c:	cmp	r6, #0
    ca5e:	beq.n	ca26 <__udivmoddi4+0xa2>
    ca60:	strd	r4, r7, [r6]
    ca64:	b.n	ca26 <__udivmoddi4+0xa2>
    ca66:	cbnz	r2, ca6a <__udivmoddi4+0xe6>
    ca68:	udf	#255	; 0xff
    ca6a:	clz	r3, r2
    ca6e:	cmp	r3, #0
    ca70:	bne.w	cb94 <__udivmoddi4+0x210>
    ca74:	subs	r2, r1, r2
    ca76:	mov.w	r7, ip, lsr #16
    ca7a:	uxth.w	lr, ip
    ca7e:	movs	r1, #1
    ca80:	udiv	r5, r2, r7
    ca84:	mls	r0, r7, r5, r2
    ca88:	lsrs	r2, r4, #16
    ca8a:	orr.w	r2, r2, r0, lsl #16
    ca8e:	mul.w	r0, lr, r5
    ca92:	cmp	r0, r2
    ca94:	bls.n	caa8 <__udivmoddi4+0x124>
    ca96:	adds.w	r2, ip, r2
    ca9a:	add.w	r8, r5, #4294967295
    ca9e:	bcs.n	caa6 <__udivmoddi4+0x122>
    caa0:	cmp	r0, r2
    caa2:	bhi.w	cc3c <__udivmoddi4+0x2b8>
    caa6:	mov	r5, r8
    caa8:	subs	r2, r2, r0
    caaa:	uxth	r4, r4
    caac:	udiv	r0, r2, r7
    cab0:	mls	r2, r7, r0, r2
    cab4:	orr.w	r4, r4, r2, lsl #16
    cab8:	mul.w	lr, lr, r0
    cabc:	cmp	lr, r4
    cabe:	bls.n	cad2 <__udivmoddi4+0x14e>
    cac0:	adds.w	r4, ip, r4
    cac4:	add.w	r2, r0, #4294967295
    cac8:	bcs.n	cad0 <__udivmoddi4+0x14c>
    caca:	cmp	lr, r4
    cacc:	bhi.w	cc46 <__udivmoddi4+0x2c2>
    cad0:	mov	r0, r2
    cad2:	sub.w	r4, r4, lr
    cad6:	orr.w	r0, r0, r5, lsl #16
    cada:	b.n	ca1c <__udivmoddi4+0x98>
    cadc:	rsb	r7, r1, #32
    cae0:	lsls	r3, r1
    cae2:	lsr.w	ip, r2, r7
    cae6:	orr.w	ip, ip, r3
    caea:	lsl.w	r4, r5, r1
    caee:	lsr.w	r3, r0, r7
    caf2:	lsrs	r5, r7
    caf4:	mov.w	r9, ip, lsr #16
    caf8:	orrs	r3, r4
    cafa:	udiv	r8, r5, r9
    cafe:	uxth.w	lr, ip
    cb02:	mls	r5, r9, r8, r5
    cb06:	lsrs	r4, r3, #16
    cb08:	orr.w	r4, r4, r5, lsl #16
    cb0c:	mul.w	r5, r8, lr
    cb10:	cmp	r5, r4
    cb12:	lsl.w	r2, r2, r1
    cb16:	lsl.w	r0, r0, r1
    cb1a:	bls.n	cb34 <__udivmoddi4+0x1b0>
    cb1c:	adds.w	r4, ip, r4
    cb20:	add.w	sl, r8, #4294967295
    cb24:	bcs.w	cc38 <__udivmoddi4+0x2b4>
    cb28:	cmp	r5, r4
    cb2a:	bls.w	cc38 <__udivmoddi4+0x2b4>
    cb2e:	sub.w	r8, r8, #2
    cb32:	add	r4, ip
    cb34:	subs	r4, r4, r5
    cb36:	uxth	r5, r3
    cb38:	udiv	r3, r4, r9
    cb3c:	mls	r4, r9, r3, r4
    cb40:	orr.w	r4, r5, r4, lsl #16
    cb44:	mul.w	lr, r3, lr
    cb48:	cmp	lr, r4
    cb4a:	bls.n	cb5e <__udivmoddi4+0x1da>
    cb4c:	adds.w	r4, ip, r4
    cb50:	add.w	r5, r3, #4294967295
    cb54:	bcs.n	cc30 <__udivmoddi4+0x2ac>
    cb56:	cmp	lr, r4
    cb58:	bls.n	cc30 <__udivmoddi4+0x2ac>
    cb5a:	subs	r3, #2
    cb5c:	add	r4, ip
    cb5e:	orr.w	r3, r3, r8, lsl #16
    cb62:	umull	r9, r5, r3, r2
    cb66:	sub.w	r4, r4, lr
    cb6a:	cmp	r4, r5
    cb6c:	mov	r8, r9
    cb6e:	mov	lr, r5
    cb70:	bcc.n	cc20 <__udivmoddi4+0x29c>
    cb72:	beq.n	cc1c <__udivmoddi4+0x298>
    cb74:	cbz	r6, cb8c <__udivmoddi4+0x208>
    cb76:	subs.w	r2, r0, r8
    cb7a:	sbc.w	r4, r4, lr
    cb7e:	lsl.w	r7, r4, r7
    cb82:	lsrs	r2, r1
    cb84:	lsrs	r4, r1
    cb86:	orrs	r7, r2
    cb88:	strd	r7, r4, [r6]
    cb8c:	mov	r0, r3
    cb8e:	movs	r1, #0
    cb90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cb94:	rsb	r1, r3, #32
    cb98:	lsl.w	ip, r2, r3
    cb9c:	lsr.w	r2, r0, r1
    cba0:	lsr.w	r1, r5, r1
    cba4:	lsls	r5, r3
    cba6:	orrs	r2, r5
    cba8:	mov.w	r7, ip, lsr #16
    cbac:	uxth.w	lr, ip
    cbb0:	udiv	r0, r1, r7
    cbb4:	mls	r5, r7, r0, r1
    cbb8:	lsrs	r1, r2, #16
    cbba:	orr.w	r1, r1, r5, lsl #16
    cbbe:	mul.w	r5, r0, lr
    cbc2:	cmp	r5, r1
    cbc4:	lsl.w	r4, r4, r3
    cbc8:	bls.n	cbdc <__udivmoddi4+0x258>
    cbca:	adds.w	r1, ip, r1
    cbce:	add.w	r8, r0, #4294967295
    cbd2:	bcs.n	cc34 <__udivmoddi4+0x2b0>
    cbd4:	cmp	r5, r1
    cbd6:	bls.n	cc34 <__udivmoddi4+0x2b0>
    cbd8:	subs	r0, #2
    cbda:	add	r1, ip
    cbdc:	subs	r1, r1, r5
    cbde:	uxth	r2, r2
    cbe0:	udiv	r5, r1, r7
    cbe4:	mls	r1, r7, r5, r1
    cbe8:	orr.w	r2, r2, r1, lsl #16
    cbec:	mul.w	r1, r5, lr
    cbf0:	cmp	r1, r2
    cbf2:	bls.n	cc06 <__udivmoddi4+0x282>
    cbf4:	adds.w	r2, ip, r2
    cbf8:	add.w	r8, r5, #4294967295
    cbfc:	bcs.n	cc2c <__udivmoddi4+0x2a8>
    cbfe:	cmp	r1, r2
    cc00:	bls.n	cc2c <__udivmoddi4+0x2a8>
    cc02:	subs	r5, #2
    cc04:	add	r2, ip
    cc06:	subs	r2, r2, r1
    cc08:	orr.w	r1, r5, r0, lsl #16
    cc0c:	b.n	ca80 <__udivmoddi4+0xfc>
    cc0e:	mov	r1, r6
    cc10:	mov	r0, r6
    cc12:	b.n	ca26 <__udivmoddi4+0xa2>
    cc14:	mov	r1, r7
    cc16:	b.n	c9e6 <__udivmoddi4+0x62>
    cc18:	mov	r0, r2
    cc1a:	b.n	ca14 <__udivmoddi4+0x90>
    cc1c:	cmp	r0, r9
    cc1e:	bcs.n	cb74 <__udivmoddi4+0x1f0>
    cc20:	subs.w	r8, r9, r2
    cc24:	sbc.w	lr, r5, ip
    cc28:	subs	r3, #1
    cc2a:	b.n	cb74 <__udivmoddi4+0x1f0>
    cc2c:	mov	r5, r8
    cc2e:	b.n	cc06 <__udivmoddi4+0x282>
    cc30:	mov	r3, r5
    cc32:	b.n	cb5e <__udivmoddi4+0x1da>
    cc34:	mov	r0, r8
    cc36:	b.n	cbdc <__udivmoddi4+0x258>
    cc38:	mov	r8, sl
    cc3a:	b.n	cb34 <__udivmoddi4+0x1b0>
    cc3c:	subs	r5, #2
    cc3e:	add	r2, ip
    cc40:	b.n	caa8 <__udivmoddi4+0x124>
    cc42:	mov	r0, r1
    cc44:	b.n	ca5c <__udivmoddi4+0xd8>
    cc46:	add	r4, ip
    cc48:	subs	r0, #2
    cc4a:	b.n	cad2 <__udivmoddi4+0x14e>

0000cc4c <__aeabi_idiv0>:
    cc4c:	bx	lr
    cc4e:	nop

0000cc50 <malloc>:
    cc50:	ldr	r3, [pc, #8]	; (cc5c <malloc+0xc>)
    cc52:	mov	r1, r0
    cc54:	ldr	r0, [r3, #0]
    cc56:	b.w	ccb0 <_malloc_r>
    cc5a:	nop
    cc5c:	.word	0x200022d0

0000cc60 <free>:
    cc60:	ldr	r3, [pc, #8]	; (cc6c <free+0xc>)
    cc62:	mov	r1, r0
    cc64:	ldr	r0, [r3, #0]
    cc66:	b.w	f9e8 <_free_r>
    cc6a:	nop
    cc6c:	.word	0x200022d0

0000cc70 <sbrk_aligned>:
    cc70:	push	{r4, r5, r6, lr}
    cc72:	ldr	r6, [pc, #56]	; (ccac <sbrk_aligned+0x3c>)
    cc74:	mov	r4, r1
    cc76:	ldr	r1, [r6, #0]
    cc78:	mov	r5, r0
    cc7a:	cbnz	r1, cc82 <sbrk_aligned+0x12>
    cc7c:	bl	ec78 <_sbrk_r>
    cc80:	str	r0, [r6, #0]
    cc82:	mov	r1, r4
    cc84:	mov	r0, r5
    cc86:	bl	ec78 <_sbrk_r>
    cc8a:	adds	r3, r0, #1
    cc8c:	beq.n	cca4 <sbrk_aligned+0x34>
    cc8e:	adds	r4, r0, #3
    cc90:	bic.w	r4, r4, #3
    cc94:	cmp	r0, r4
    cc96:	beq.n	cca8 <sbrk_aligned+0x38>
    cc98:	subs	r1, r4, r0
    cc9a:	mov	r0, r5
    cc9c:	bl	ec78 <_sbrk_r>
    cca0:	adds	r0, #1
    cca2:	bne.n	cca8 <sbrk_aligned+0x38>
    cca4:	mov.w	r4, #4294967295
    cca8:	mov	r0, r4
    ccaa:	pop	{r4, r5, r6, pc}
    ccac:	.word	0x20014858

0000ccb0 <_malloc_r>:
    ccb0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccb4:	adds	r5, r1, #3
    ccb6:	bic.w	r5, r5, #3
    ccba:	adds	r5, #8
    ccbc:	cmp	r5, #12
    ccbe:	it	cc
    ccc0:	movcc	r5, #12
    ccc2:	cmp	r5, #0
    ccc4:	mov	r7, r0
    ccc6:	blt.n	cccc <_malloc_r+0x1c>
    ccc8:	cmp	r1, r5
    ccca:	bls.n	ccd8 <_malloc_r+0x28>
    cccc:	movs	r3, #12
    ccce:	str	r3, [r7, #0]
    ccd0:	movs	r6, #0
    ccd2:	mov	r0, r6
    ccd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccd8:	ldr	r6, [pc, #188]	; (cd98 <_malloc_r+0xe8>)
    ccda:	bl	cd9c <__malloc_lock>
    ccde:	ldr	r3, [r6, #0]
    cce0:	mov	r4, r3
    cce2:	cbnz	r4, cd36 <_malloc_r+0x86>
    cce4:	mov	r1, r5
    cce6:	mov	r0, r7
    cce8:	bl	cc70 <sbrk_aligned>
    ccec:	adds	r3, r0, #1
    ccee:	mov	r4, r0
    ccf0:	bne.n	cd92 <_malloc_r+0xe2>
    ccf2:	ldr	r4, [r6, #0]
    ccf4:	mov	r6, r4
    ccf6:	cmp	r6, #0
    ccf8:	bne.n	cd80 <_malloc_r+0xd0>
    ccfa:	cmp	r4, #0
    ccfc:	beq.n	cd86 <_malloc_r+0xd6>
    ccfe:	ldr	r3, [r4, #0]
    cd00:	mov	r1, r6
    cd02:	mov	r0, r7
    cd04:	add.w	r8, r4, r3
    cd08:	bl	ec78 <_sbrk_r>
    cd0c:	cmp	r8, r0
    cd0e:	bne.n	cd86 <_malloc_r+0xd6>
    cd10:	ldr	r3, [r4, #0]
    cd12:	adds	r5, #3
    cd14:	subs	r5, r5, r3
    cd16:	bic.w	r5, r5, #3
    cd1a:	adds	r5, #8
    cd1c:	cmp	r5, #12
    cd1e:	it	cc
    cd20:	movcc	r5, #12
    cd22:	mov	r1, r5
    cd24:	mov	r0, r7
    cd26:	bl	cc70 <sbrk_aligned>
    cd2a:	adds	r0, #1
    cd2c:	beq.n	cd86 <_malloc_r+0xd6>
    cd2e:	ldr	r3, [r4, #0]
    cd30:	add	r3, r5
    cd32:	str	r3, [r4, #0]
    cd34:	b.n	cd54 <_malloc_r+0xa4>
    cd36:	ldr	r2, [r4, #0]
    cd38:	subs	r2, r2, r5
    cd3a:	bmi.n	cd7a <_malloc_r+0xca>
    cd3c:	cmp	r2, #11
    cd3e:	bls.n	cd6e <_malloc_r+0xbe>
    cd40:	adds	r1, r4, r5
    cd42:	cmp	r3, r4
    cd44:	str	r5, [r4, #0]
    cd46:	it	ne
    cd48:	strne	r1, [r3, #4]
    cd4a:	ldr	r3, [r4, #4]
    cd4c:	it	eq
    cd4e:	streq	r1, [r6, #0]
    cd50:	str	r2, [r4, r5]
    cd52:	str	r3, [r1, #4]
    cd54:	mov	r0, r7
    cd56:	add.w	r6, r4, #11
    cd5a:	bl	cda8 <__malloc_unlock>
    cd5e:	bic.w	r6, r6, #7
    cd62:	adds	r3, r4, #4
    cd64:	subs	r2, r6, r3
    cd66:	beq.n	ccd2 <_malloc_r+0x22>
    cd68:	subs	r3, r3, r6
    cd6a:	str	r3, [r4, r2]
    cd6c:	b.n	ccd2 <_malloc_r+0x22>
    cd6e:	ldr	r2, [r4, #4]
    cd70:	cmp	r3, r4
    cd72:	ite	eq
    cd74:	streq	r2, [r6, #0]
    cd76:	strne	r2, [r3, #4]
    cd78:	b.n	cd54 <_malloc_r+0xa4>
    cd7a:	mov	r3, r4
    cd7c:	ldr	r4, [r4, #4]
    cd7e:	b.n	cce2 <_malloc_r+0x32>
    cd80:	mov	r4, r6
    cd82:	ldr	r6, [r6, #4]
    cd84:	b.n	ccf6 <_malloc_r+0x46>
    cd86:	movs	r3, #12
    cd88:	str	r3, [r7, #0]
    cd8a:	mov	r0, r7
    cd8c:	bl	cda8 <__malloc_unlock>
    cd90:	b.n	ccd2 <_malloc_r+0x22>
    cd92:	str	r5, [r4, #0]
    cd94:	b.n	cd54 <_malloc_r+0xa4>
    cd96:	nop
    cd98:	.word	0x20014854

0000cd9c <__malloc_lock>:
    cd9c:	ldr	r0, [pc, #4]	; (cda4 <__malloc_lock+0x8>)
    cd9e:	b.w	ed10 <__retarget_lock_acquire_recursive>
    cda2:	nop
    cda4:	.word	0x200155b2

0000cda8 <__malloc_unlock>:
    cda8:	ldr	r0, [pc, #4]	; (cdb0 <__malloc_unlock+0x8>)
    cdaa:	b.w	ed12 <__retarget_lock_release_recursive>
    cdae:	nop
    cdb0:	.word	0x200155b2

0000cdb4 <_realloc_r>:
    cdb4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cdb8:	mov	r8, r0
    cdba:	mov	r4, r2
    cdbc:	mov	r6, r1
    cdbe:	cbnz	r1, cdca <_realloc_r+0x16>
    cdc0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cdc4:	mov	r1, r2
    cdc6:	b.w	ccb0 <_malloc_r>
    cdca:	cbnz	r2, cdd8 <_realloc_r+0x24>
    cdcc:	bl	f9e8 <_free_r>
    cdd0:	mov	r5, r4
    cdd2:	mov	r0, r5
    cdd4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cdd8:	bl	10aa8 <_malloc_usable_size_r>
    cddc:	cmp	r4, r0
    cdde:	mov	r7, r0
    cde0:	bhi.n	cde8 <_realloc_r+0x34>
    cde2:	cmp.w	r4, r0, lsr #1
    cde6:	bhi.n	ce0e <_realloc_r+0x5a>
    cde8:	mov	r1, r4
    cdea:	mov	r0, r8
    cdec:	bl	ccb0 <_malloc_r>
    cdf0:	mov	r5, r0
    cdf2:	cmp	r0, #0
    cdf4:	beq.n	cdd2 <_realloc_r+0x1e>
    cdf6:	cmp	r4, r7
    cdf8:	mov	r2, r4
    cdfa:	mov	r1, r6
    cdfc:	it	cs
    cdfe:	movcs	r2, r7
    ce00:	bl	a254 <memcpy>
    ce04:	mov	r1, r6
    ce06:	mov	r0, r8
    ce08:	bl	f9e8 <_free_r>
    ce0c:	b.n	cdd2 <_realloc_r+0x1e>
    ce0e:	mov	r5, r6
    ce10:	b.n	cdd2 <_realloc_r+0x1e>

0000ce12 <sulp>:
    ce12:	push	{r4, r5, r6, lr}
    ce14:	mov	r4, r0
    ce16:	mov	r5, r1
    ce18:	mov	r6, r2
    ce1a:	vmov	d0, r4, r5
    ce1e:	bl	1082c <__ulp>
    ce22:	cbz	r6, ce44 <sulp+0x32>
    ce24:	ubfx	r3, r5, #20, #11
    ce28:	rsb	r3, r3, #107	; 0x6b
    ce2c:	cmp	r3, #0
    ce2e:	ble.n	ce44 <sulp+0x32>
    ce30:	lsls	r3, r3, #20
    ce32:	add.w	r1, r3, #1069547520	; 0x3fc00000
    ce36:	movs	r0, #0
    ce38:	add.w	r1, r1, #3145728	; 0x300000
    ce3c:	vmov	d7, r0, r1
    ce40:	vmul.f64	d0, d0, d7
    ce44:	pop	{r4, r5, r6, pc}
	...

0000ce48 <_strtod_l>:
    ce48:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce4c:	vpush	{d8-d14}
    ce50:	sub	sp, #92	; 0x5c
    ce52:	mov	r4, r0
    ce54:	str	r2, [sp, #52]	; 0x34
    ce56:	movs	r2, #0
    ce58:	str	r2, [sp, #72]	; 0x48
    ce5a:	mov	sl, r1
    ce5c:	mov.w	r8, #0
    ce60:	mov.w	r9, #0
    ce64:	mov	r2, r1
    ce66:	str	r2, [sp, #68]	; 0x44
    ce68:	ldrb	r1, [r2, #0]
    ce6a:	cmp	r1, #43	; 0x2b
    ce6c:	beq.n	cf08 <_strtod_l+0xc0>
    ce6e:	bhi.n	cee4 <_strtod_l+0x9c>
    ce70:	cmp	r1, #13
    ce72:	bhi.n	cedc <_strtod_l+0x94>
    ce74:	cmp	r1, #8
    ce76:	bhi.n	cee0 <_strtod_l+0x98>
    ce78:	cmp	r1, #0
    ce7a:	beq.n	cef6 <_strtod_l+0xae>
    ce7c:	movs	r2, #0
    ce7e:	str	r2, [sp, #32]
    ce80:	ldr	r6, [sp, #68]	; 0x44
    ce82:	ldrb	r2, [r6, #0]
    ce84:	cmp	r2, #48	; 0x30
    ce86:	bne.w	cffa <_strtod_l+0x1b2>
    ce8a:	ldrb	r2, [r6, #1]
    ce8c:	and.w	r2, r2, #223	; 0xdf
    ce90:	cmp	r2, #88	; 0x58
    ce92:	bne.n	cf76 <_strtod_l+0x12e>
    ce94:	str	r3, [sp, #8]
    ce96:	ldr	r3, [sp, #32]
    ce98:	str	r3, [sp, #4]
    ce9a:	add	r3, sp, #72	; 0x48
    ce9c:	str	r3, [sp, #0]
    ce9e:	ldr	r2, [pc, #580]	; (d0e4 <_strtod_l+0x29c>)
    cea0:	add	r3, sp, #76	; 0x4c
    cea2:	add	r1, sp, #68	; 0x44
    cea4:	mov	r0, r4
    cea6:	bl	fb50 <__gethex>
    ceaa:	ands.w	r7, r0, #15
    ceae:	mov	r5, r0
    ceb0:	beq.n	cebe <_strtod_l+0x76>
    ceb2:	cmp	r7, #6
    ceb4:	bne.n	cf0c <_strtod_l+0xc4>
    ceb6:	adds	r6, #1
    ceb8:	movs	r3, #0
    ceba:	str	r6, [sp, #68]	; 0x44
    cebc:	str	r3, [sp, #32]
    cebe:	ldr	r3, [sp, #52]	; 0x34
    cec0:	cmp	r3, #0
    cec2:	bne.w	d970 <_strtod_l+0xb28>
    cec6:	ldr	r3, [sp, #32]
    cec8:	vmov	d0, r8, r9
    cecc:	cbz	r3, cf02 <_strtod_l+0xba>
    cece:	vneg.f64	d0, d0
    ced2:	add	sp, #92	; 0x5c
    ced4:	vpop	{d8-d14}
    ced8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cedc:	cmp	r1, #32
    cede:	bne.n	ce7c <_strtod_l+0x34>
    cee0:	adds	r2, #1
    cee2:	b.n	ce66 <_strtod_l+0x1e>
    cee4:	cmp	r1, #45	; 0x2d
    cee6:	bne.n	ce7c <_strtod_l+0x34>
    cee8:	movs	r1, #1
    ceea:	str	r1, [sp, #32]
    ceec:	adds	r1, r2, #1
    ceee:	str	r1, [sp, #68]	; 0x44
    cef0:	ldrb	r2, [r2, #1]
    cef2:	cmp	r2, #0
    cef4:	bne.n	ce80 <_strtod_l+0x38>
    cef6:	ldr	r3, [sp, #52]	; 0x34
    cef8:	str.w	sl, [sp, #68]	; 0x44
    cefc:	cmp	r3, #0
    cefe:	bne.w	d96c <_strtod_l+0xb24>
    cf02:	vmov	d0, r8, r9
    cf06:	b.n	ced2 <_strtod_l+0x8a>
    cf08:	movs	r1, #0
    cf0a:	b.n	ceea <_strtod_l+0xa2>
    cf0c:	ldr	r2, [sp, #72]	; 0x48
    cf0e:	cbz	r2, cf20 <_strtod_l+0xd8>
    cf10:	movs	r1, #53	; 0x35
    cf12:	add	r0, sp, #80	; 0x50
    cf14:	bl	10a20 <__copybits>
    cf18:	ldr	r1, [sp, #72]	; 0x48
    cf1a:	mov	r0, r4
    cf1c:	bl	101d4 <_Bfree>
    cf20:	subs	r3, r7, #1
    cf22:	ldr	r2, [sp, #76]	; 0x4c
    cf24:	cmp	r3, #4
    cf26:	bhi.n	cf36 <_strtod_l+0xee>
    cf28:	tbb	[pc, r3]
    cf2c:	.word	0x201d0314
    cf30:	.byte	0x14
    cf31:	.byte	0x00
    cf32:	ldrd	r8, r9, [sp, #80]	; 0x50
    cf36:	lsls	r3, r5, #23
    cf38:	it	mi
    cf3a:	orrmi.w	r9, r9, #2147483648	; 0x80000000
    cf3e:	bic.w	r3, r9, #2147483648	; 0x80000000
    cf42:	lsrs	r3, r3, #20
    cf44:	lsls	r3, r3, #20
    cf46:	cmp	r3, #0
    cf48:	bne.n	cebe <_strtod_l+0x76>
    cf4a:	bl	ecbc <__errno>
    cf4e:	movs	r3, #34	; 0x22
    cf50:	str	r3, [r0, #0]
    cf52:	b.n	cebe <_strtod_l+0x76>
    cf54:	ldrd	r8, r3, [sp, #80]	; 0x50
    cf58:	addw	r2, r2, #1075	; 0x433
    cf5c:	bic.w	r3, r3, #1048576	; 0x100000
    cf60:	orr.w	r9, r3, r2, lsl #20
    cf64:	b.n	cf36 <_strtod_l+0xee>
    cf66:	ldr.w	r9, [pc, #388]	; d0ec <_strtod_l+0x2a4>
    cf6a:	b.n	cf36 <_strtod_l+0xee>
    cf6c:	mvn.w	r9, #2147483648	; 0x80000000
    cf70:	mov.w	r8, #4294967295
    cf74:	b.n	cf36 <_strtod_l+0xee>
    cf76:	ldr	r3, [sp, #68]	; 0x44
    cf78:	adds	r2, r3, #1
    cf7a:	str	r2, [sp, #68]	; 0x44
    cf7c:	ldrb	r3, [r3, #1]
    cf7e:	cmp	r3, #48	; 0x30
    cf80:	beq.n	cf76 <_strtod_l+0x12e>
    cf82:	cmp	r3, #0
    cf84:	beq.n	cebe <_strtod_l+0x76>
    cf86:	movs	r3, #1
    cf88:	str	r3, [sp, #24]
    cf8a:	ldr	r3, [sp, #68]	; 0x44
    cf8c:	str	r3, [sp, #36]	; 0x24
    cf8e:	movs	r3, #0
    cf90:	str	r3, [sp, #20]
    cf92:	str	r3, [sp, #28]
    cf94:	mov	r6, r3
    cf96:	movs	r2, #10
    cf98:	ldr	r0, [sp, #68]	; 0x44
    cf9a:	ldrb	r5, [r0, #0]
    cf9c:	sub.w	r3, r5, #48	; 0x30
    cfa0:	uxtb	r1, r3
    cfa2:	cmp	r1, #9
    cfa4:	bls.n	cffe <_strtod_l+0x1b6>
    cfa6:	ldr	r1, [pc, #320]	; (d0e8 <_strtod_l+0x2a0>)
    cfa8:	movs	r2, #1
    cfaa:	bl	ebe4 <strncmp>
    cfae:	cmp	r0, #0
    cfb0:	beq.n	d01e <_strtod_l+0x1d6>
    cfb2:	movs	r0, #0
    cfb4:	mov	r2, r5
    cfb6:	mov	r3, r6
    cfb8:	mov	fp, r0
    cfba:	mov	r1, r0
    cfbc:	cmp	r2, #101	; 0x65
    cfbe:	beq.n	cfc4 <_strtod_l+0x17c>
    cfc0:	cmp	r2, #69	; 0x45
    cfc2:	bne.n	cff6 <_strtod_l+0x1ae>
    cfc4:	cbnz	r3, cfce <_strtod_l+0x186>
    cfc6:	ldr	r3, [sp, #24]
    cfc8:	orrs	r3, r0
    cfca:	beq.n	cef6 <_strtod_l+0xae>
    cfcc:	movs	r3, #0
    cfce:	ldr.w	sl, [sp, #68]	; 0x44
    cfd2:	add.w	r2, sl, #1
    cfd6:	str	r2, [sp, #68]	; 0x44
    cfd8:	ldrb.w	r2, [sl, #1]
    cfdc:	cmp	r2, #43	; 0x2b
    cfde:	beq.n	d0cc <_strtod_l+0x284>
    cfe0:	cmp	r2, #45	; 0x2d
    cfe2:	beq.n	d0dc <_strtod_l+0x294>
    cfe4:	mov.w	lr, #0
    cfe8:	sub.w	r5, r2, #48	; 0x30
    cfec:	cmp	r5, #9
    cfee:	bls.w	d0f8 <_strtod_l+0x2b0>
    cff2:	str.w	sl, [sp, #68]	; 0x44
    cff6:	movs	r5, #0
    cff8:	b.n	d138 <_strtod_l+0x2f0>
    cffa:	movs	r3, #0
    cffc:	b.n	cf88 <_strtod_l+0x140>
    cffe:	cmp	r6, #8
    d000:	itete	le
    d002:	ldrle	r1, [sp, #28]
    d004:	ldrgt	r1, [sp, #20]
    d006:	mlale	r3, r2, r1, r3
    d00a:	mlagt	r3, r2, r1, r3
    d00e:	add.w	r0, r0, #1
    d012:	ite	le
    d014:	strle	r3, [sp, #28]
    d016:	strgt	r3, [sp, #20]
    d018:	adds	r6, #1
    d01a:	str	r0, [sp, #68]	; 0x44
    d01c:	b.n	cf98 <_strtod_l+0x150>
    d01e:	ldr	r3, [sp, #68]	; 0x44
    d020:	adds	r2, r3, #1
    d022:	str	r2, [sp, #68]	; 0x44
    d024:	ldrb	r2, [r3, #1]
    d026:	cbz	r6, d094 <_strtod_l+0x24c>
    d028:	mov	fp, r0
    d02a:	mov	r3, r6
    d02c:	sub.w	r1, r2, #48	; 0x30
    d030:	cmp	r1, #9
    d032:	bls.n	d05a <_strtod_l+0x212>
    d034:	movs	r1, #1
    d036:	b.n	cfbc <_strtod_l+0x174>
    d038:	ldr	r3, [sp, #68]	; 0x44
    d03a:	adds	r2, r3, #1
    d03c:	str	r2, [sp, #68]	; 0x44
    d03e:	ldrb	r2, [r3, #1]
    d040:	adds	r0, #1
    d042:	cmp	r2, #48	; 0x30
    d044:	beq.n	d038 <_strtod_l+0x1f0>
    d046:	sub.w	r3, r2, #49	; 0x31
    d04a:	cmp	r3, #8
    d04c:	bhi.w	d97a <_strtod_l+0xb32>
    d050:	ldr	r3, [sp, #68]	; 0x44
    d052:	str	r3, [sp, #36]	; 0x24
    d054:	mov	fp, r0
    d056:	movs	r0, #0
    d058:	mov	r3, r0
    d05a:	subs	r2, #48	; 0x30
    d05c:	add.w	r1, r0, #1
    d060:	beq.n	d088 <_strtod_l+0x240>
    d062:	add	fp, r1
    d064:	add.w	ip, r0, r3
    d068:	mov	r1, r3
    d06a:	movs	r5, #10
    d06c:	cmp	r1, ip
    d06e:	bne.n	d098 <_strtod_l+0x250>
    d070:	adds	r1, r3, r0
    d072:	cmp	r1, #8
    d074:	add.w	r3, r3, #1
    d078:	add	r3, r0
    d07a:	bgt.n	d0b4 <_strtod_l+0x26c>
    d07c:	ldr	r0, [sp, #28]
    d07e:	movs	r1, #10
    d080:	mla	r2, r1, r0, r2
    d084:	str	r2, [sp, #28]
    d086:	movs	r1, #0
    d088:	ldr	r2, [sp, #68]	; 0x44
    d08a:	adds	r0, r2, #1
    d08c:	str	r0, [sp, #68]	; 0x44
    d08e:	ldrb	r2, [r2, #1]
    d090:	mov	r0, r1
    d092:	b.n	d02c <_strtod_l+0x1e4>
    d094:	mov	r0, r6
    d096:	b.n	d042 <_strtod_l+0x1fa>
    d098:	cmp	r1, #8
    d09a:	add.w	r1, r1, #1
    d09e:	bgt.n	d0a8 <_strtod_l+0x260>
    d0a0:	ldr	r7, [sp, #28]
    d0a2:	muls	r7, r5
    d0a4:	str	r7, [sp, #28]
    d0a6:	b.n	d06c <_strtod_l+0x224>
    d0a8:	cmp	r1, #16
    d0aa:	ittt	le
    d0ac:	ldrle	r7, [sp, #20]
    d0ae:	mulle	r7, r5
    d0b0:	strle	r7, [sp, #20]
    d0b2:	b.n	d06c <_strtod_l+0x224>
    d0b4:	cmp	r3, #16
    d0b6:	itttt	le
    d0b8:	ldrle	r0, [sp, #20]
    d0ba:	movle	r1, #10
    d0bc:	mlale	r2, r1, r0, r2
    d0c0:	strle	r2, [sp, #20]
    d0c2:	b.n	d086 <_strtod_l+0x23e>
    d0c4:	mov.w	fp, #0
    d0c8:	movs	r1, #1
    d0ca:	b.n	cfc6 <_strtod_l+0x17e>
    d0cc:	mov.w	lr, #0
    d0d0:	add.w	r2, sl, #2
    d0d4:	str	r2, [sp, #68]	; 0x44
    d0d6:	ldrb.w	r2, [sl, #2]
    d0da:	b.n	cfe8 <_strtod_l+0x1a0>
    d0dc:	mov.w	lr, #1
    d0e0:	b.n	d0d0 <_strtod_l+0x288>
    d0e2:	nop
    d0e4:	.word	0x20000984
    d0e8:	.word	0x20000d02
    d0ec:	.word	0x7ff00000
    d0f0:	ldr	r2, [sp, #68]	; 0x44
    d0f2:	adds	r5, r2, #1
    d0f4:	str	r5, [sp, #68]	; 0x44
    d0f6:	ldrb	r2, [r2, #1]
    d0f8:	cmp	r2, #48	; 0x30
    d0fa:	beq.n	d0f0 <_strtod_l+0x2a8>
    d0fc:	sub.w	r5, r2, #49	; 0x31
    d100:	cmp	r5, #8
    d102:	bhi.w	cff6 <_strtod_l+0x1ae>
    d106:	sub.w	ip, r2, #48	; 0x30
    d10a:	ldr	r2, [sp, #68]	; 0x44
    d10c:	str	r2, [sp, #40]	; 0x28
    d10e:	ldr	r2, [sp, #68]	; 0x44
    d110:	adds	r5, r2, #1
    d112:	str	r5, [sp, #68]	; 0x44
    d114:	ldrb	r2, [r2, #1]
    d116:	sub.w	r7, r2, #48	; 0x30
    d11a:	cmp	r7, #9
    d11c:	bls.n	d18e <_strtod_l+0x346>
    d11e:	ldr	r7, [sp, #40]	; 0x28
    d120:	subs	r5, r5, r7
    d122:	cmp	r5, #8
    d124:	movw	r5, #19999	; 0x4e1f
    d128:	bgt.n	d130 <_strtod_l+0x2e8>
    d12a:	cmp	r5, ip
    d12c:	it	ge
    d12e:	movge	r5, ip
    d130:	cmp.w	lr, #0
    d134:	beq.n	d138 <_strtod_l+0x2f0>
    d136:	negs	r5, r5
    d138:	cmp	r3, #0
    d13a:	bne.n	d1d8 <_strtod_l+0x390>
    d13c:	ldr	r3, [sp, #24]
    d13e:	orrs	r3, r0
    d140:	bne.w	cebe <_strtod_l+0x76>
    d144:	cmp	r1, #0
    d146:	bne.w	cef6 <_strtod_l+0xae>
    d14a:	cmp	r2, #105	; 0x69
    d14c:	beq.n	d19e <_strtod_l+0x356>
    d14e:	bgt.n	d19a <_strtod_l+0x352>
    d150:	cmp	r2, #73	; 0x49
    d152:	beq.n	d19e <_strtod_l+0x356>
    d154:	cmp	r2, #78	; 0x4e
    d156:	bne.w	cef6 <_strtod_l+0xae>
    d15a:	ldr	r1, [pc, #596]	; (d3b0 <_strtod_l+0x568>)
    d15c:	add	r0, sp, #68	; 0x44
    d15e:	bl	ffd0 <__match>
    d162:	cmp	r0, #0
    d164:	beq.w	cef6 <_strtod_l+0xae>
    d168:	ldr	r3, [sp, #68]	; 0x44
    d16a:	ldrb	r3, [r3, #0]
    d16c:	cmp	r3, #40	; 0x28
    d16e:	bne.n	d1cc <_strtod_l+0x384>
    d170:	ldr	r1, [pc, #576]	; (d3b4 <_strtod_l+0x56c>)
    d172:	add	r2, sp, #80	; 0x50
    d174:	add	r0, sp, #68	; 0x44
    d176:	bl	fff8 <__hexnan>
    d17a:	cmp	r0, #5
    d17c:	bne.n	d1cc <_strtod_l+0x384>
    d17e:	ldr	r3, [sp, #84]	; 0x54
    d180:	ldr.w	r8, [sp, #80]	; 0x50
    d184:	orr.w	r9, r3, #2139095040	; 0x7f800000
    d188:	orr.w	r9, r9, #7340032	; 0x700000
    d18c:	b.n	cebe <_strtod_l+0x76>
    d18e:	movs	r5, #10
    d190:	mla	ip, r5, ip, r2
    d194:	sub.w	ip, ip, #48	; 0x30
    d198:	b.n	d10e <_strtod_l+0x2c6>
    d19a:	cmp	r2, #110	; 0x6e
    d19c:	b.n	d156 <_strtod_l+0x30e>
    d19e:	ldr	r1, [pc, #536]	; (d3b8 <_strtod_l+0x570>)
    d1a0:	add	r0, sp, #68	; 0x44
    d1a2:	bl	ffd0 <__match>
    d1a6:	cmp	r0, #0
    d1a8:	beq.w	cef6 <_strtod_l+0xae>
    d1ac:	ldr	r3, [sp, #68]	; 0x44
    d1ae:	ldr	r1, [pc, #524]	; (d3bc <_strtod_l+0x574>)
    d1b0:	subs	r3, #1
    d1b2:	add	r0, sp, #68	; 0x44
    d1b4:	str	r3, [sp, #68]	; 0x44
    d1b6:	bl	ffd0 <__match>
    d1ba:	cbnz	r0, d1c2 <_strtod_l+0x37a>
    d1bc:	ldr	r3, [sp, #68]	; 0x44
    d1be:	adds	r3, #1
    d1c0:	str	r3, [sp, #68]	; 0x44
    d1c2:	ldr.w	r9, [pc, #524]	; d3d0 <_strtod_l+0x588>
    d1c6:	mov.w	r8, #0
    d1ca:	b.n	cebe <_strtod_l+0x76>
    d1cc:	ldr	r0, [pc, #496]	; (d3c0 <_strtod_l+0x578>)
    d1ce:	bl	ede0 <nan>
    d1d2:	vmov	r8, r9, d0
    d1d6:	b.n	cebe <_strtod_l+0x76>
    d1d8:	vldr	s15, [sp, #28]
    d1dc:	sub.w	r2, r5, fp
    d1e0:	vcvt.f64.u32	d7, s15
    d1e4:	cmp	r6, #0
    d1e6:	it	eq
    d1e8:	moveq	r6, r3
    d1ea:	cmp	r3, #16
    d1ec:	str	r2, [sp, #24]
    d1ee:	mov	r2, r3
    d1f0:	it	ge
    d1f2:	movge	r2, #16
    d1f4:	cmp	r3, #9
    d1f6:	vmov	r8, r9, d7
    d1fa:	ble.n	d216 <_strtod_l+0x3ce>
    d1fc:	ldr	r1, [pc, #452]	; (d3c4 <_strtod_l+0x57c>)
    d1fe:	vldr	s13, [sp, #20]
    d202:	add.w	r1, r1, r2, lsl #3
    d206:	vldr	d5, [r1, #-72]	; 0xffffffb8
    d20a:	vcvt.f64.u32	d6, s13
    d20e:	vfma.f64	d6, d7, d5
    d212:	vmov	r8, r9, d6
    d216:	cmp	r3, #15
    d218:	bgt.n	d28a <_strtod_l+0x442>
    d21a:	ldr	r1, [sp, #24]
    d21c:	cmp	r1, #0
    d21e:	beq.w	cebe <_strtod_l+0x76>
    d222:	ble.n	d26c <_strtod_l+0x424>
    d224:	cmp	r1, #22
    d226:	bgt.n	d240 <_strtod_l+0x3f8>
    d228:	ldr	r3, [pc, #408]	; (d3c4 <_strtod_l+0x57c>)
    d22a:	add.w	r3, r3, r1, lsl #3
    d22e:	vldr	d7, [r3]
    d232:	vmov	d6, r8, r9
    d236:	vmul.f64	d7, d7, d6
    d23a:	vmov	r8, r9, d7
    d23e:	b.n	cebe <_strtod_l+0x76>
    d240:	ldr	r0, [sp, #24]
    d242:	rsb	r1, r3, #37	; 0x25
    d246:	cmp	r1, r0
    d248:	blt.n	d28a <_strtod_l+0x442>
    d24a:	ldr	r2, [pc, #376]	; (d3c4 <_strtod_l+0x57c>)
    d24c:	rsb	r3, r3, #15
    d250:	add.w	r1, r2, r3, lsl #3
    d254:	vldr	d7, [r1]
    d258:	vmov	d6, r8, r9
    d25c:	subs	r3, r0, r3
    d25e:	add.w	r2, r2, r3, lsl #3
    d262:	vmul.f64	d7, d7, d6
    d266:	vldr	d6, [r2]
    d26a:	b.n	d236 <_strtod_l+0x3ee>
    d26c:	ldr	r1, [sp, #24]
    d26e:	adds	r1, #22
    d270:	blt.n	d28a <_strtod_l+0x442>
    d272:	ldr	r3, [pc, #336]	; (d3c4 <_strtod_l+0x57c>)
    d274:	sub.w	r5, fp, r5
    d278:	add.w	r5, r3, r5, lsl #3
    d27c:	vldr	d7, [r5]
    d280:	vmov	d6, r8, r9
    d284:	vdiv.f64	d7, d6, d7
    d288:	b.n	d23a <_strtod_l+0x3f2>
    d28a:	ldr	r1, [sp, #24]
    d28c:	subs	r2, r3, r2
    d28e:	add	r2, r1
    d290:	cmp	r2, #0
    d292:	ble.n	d372 <_strtod_l+0x52a>
    d294:	ands.w	r0, r2, #15
    d298:	beq.n	d2b0 <_strtod_l+0x468>
    d29a:	ldr	r1, [pc, #296]	; (d3c4 <_strtod_l+0x57c>)
    d29c:	add.w	r1, r1, r0, lsl #3
    d2a0:	vldr	d7, [r1]
    d2a4:	vmov	d6, r8, r9
    d2a8:	vmul.f64	d7, d7, d6
    d2ac:	vmov	r8, r9, d7
    d2b0:	bics.w	r2, r2, #15
    d2b4:	beq.n	d354 <_strtod_l+0x50c>
    d2b6:	cmp.w	r2, #308	; 0x134
    d2ba:	ble.n	d302 <_strtod_l+0x4ba>
    d2bc:	movs	r5, #0
    d2be:	mov	r6, r5
    d2c0:	str	r5, [sp, #28]
    d2c2:	mov	r7, r5
    d2c4:	movs	r3, #34	; 0x22
    d2c6:	ldr.w	r9, [pc, #264]	; d3d0 <_strtod_l+0x588>
    d2ca:	str	r3, [r4, #0]
    d2cc:	mov.w	r8, #0
    d2d0:	ldr	r3, [sp, #28]
    d2d2:	cmp	r3, #0
    d2d4:	beq.w	cebe <_strtod_l+0x76>
    d2d8:	ldr	r1, [sp, #72]	; 0x48
    d2da:	mov	r0, r4
    d2dc:	bl	101d4 <_Bfree>
    d2e0:	mov	r1, r7
    d2e2:	mov	r0, r4
    d2e4:	bl	101d4 <_Bfree>
    d2e8:	mov	r1, r6
    d2ea:	mov	r0, r4
    d2ec:	bl	101d4 <_Bfree>
    d2f0:	ldr	r1, [sp, #28]
    d2f2:	mov	r0, r4
    d2f4:	bl	101d4 <_Bfree>
    d2f8:	mov	r1, r5
    d2fa:	mov	r0, r4
    d2fc:	bl	101d4 <_Bfree>
    d300:	b.n	cebe <_strtod_l+0x76>
    d302:	movs	r0, #0
    d304:	vmov	d7, r8, r9
    d308:	ldr	r7, [pc, #188]	; (d3c8 <_strtod_l+0x580>)
    d30a:	asrs	r2, r2, #4
    d30c:	mov	r1, r0
    d30e:	cmp	r2, #1
    d310:	bgt.n	d35a <_strtod_l+0x512>
    d312:	cbz	r0, d318 <_strtod_l+0x4d0>
    d314:	vmov	r8, r9, d7
    d318:	ldr	r2, [pc, #172]	; (d3c8 <_strtod_l+0x580>)
    d31a:	ldr	r0, [pc, #176]	; (d3cc <_strtod_l+0x584>)
    d31c:	add.w	r2, r2, r1, lsl #3
    d320:	vldr	d7, [r2]
    d324:	sub.w	r9, r9, #55574528	; 0x3500000
    d328:	vmov	d6, r8, r9
    d32c:	ldr	r2, [pc, #160]	; (d3d0 <_strtod_l+0x588>)
    d32e:	vmul.f64	d7, d7, d6
    d332:	vmov	r1, s15
    d336:	ands	r2, r1
    d338:	cmp	r2, r0
    d33a:	vmov	r8, r9, d7
    d33e:	bhi.n	d2bc <_strtod_l+0x474>
    d340:	sub.w	r0, r0, #1048576	; 0x100000
    d344:	cmp	r2, r0
    d346:	itte	hi
    d348:	ldrhi.w	r9, [pc, #136]	; d3d4 <_strtod_l+0x58c>
    d34c:	movhi.w	r8, #4294967295
    d350:	addls.w	r9, r1, #55574528	; 0x3500000
    d354:	movs	r2, #0
    d356:	str	r2, [sp, #20]
    d358:	b.n	d448 <_strtod_l+0x600>
    d35a:	tst.w	r2, #1
    d35e:	beq.n	d36a <_strtod_l+0x522>
    d360:	vldr	d6, [r7]
    d364:	movs	r0, #1
    d366:	vmul.f64	d7, d7, d6
    d36a:	adds	r1, #1
    d36c:	asrs	r2, r2, #1
    d36e:	adds	r7, #8
    d370:	b.n	d30e <_strtod_l+0x4c6>
    d372:	beq.n	d354 <_strtod_l+0x50c>
    d374:	negs	r2, r2
    d376:	ands.w	r0, r2, #15
    d37a:	beq.n	d392 <_strtod_l+0x54a>
    d37c:	ldr	r1, [pc, #68]	; (d3c4 <_strtod_l+0x57c>)
    d37e:	add.w	r1, r1, r0, lsl #3
    d382:	vldr	d7, [r1]
    d386:	vmov	d6, r8, r9
    d38a:	vdiv.f64	d7, d6, d7
    d38e:	vmov	r8, r9, d7
    d392:	asrs	r2, r2, #4
    d394:	beq.n	d354 <_strtod_l+0x50c>
    d396:	cmp	r2, #31
    d398:	ble.n	d3d8 <_strtod_l+0x590>
    d39a:	movs	r5, #0
    d39c:	mov	r6, r5
    d39e:	str	r5, [sp, #28]
    d3a0:	mov	r7, r5
    d3a2:	movs	r3, #34	; 0x22
    d3a4:	mov.w	r8, #0
    d3a8:	mov.w	r9, #0
    d3ac:	str	r3, [r4, #0]
    d3ae:	b.n	d2d0 <_strtod_l+0x488>
    d3b0:	.word	0x20001c30
    d3b4:	.word	0x20000998
    d3b8:	.word	0x200011a7
    d3bc:	.word	0x2000134f
    d3c0:	.word	0x20000dbc
    d3c4:	.word	0x20000328
    d3c8:	.word	0x20000300
    d3cc:	.word	0x7ca00000
    d3d0:	.word	0x7ff00000
    d3d4:	.word	0x7fefffff
    d3d8:	ands.w	r1, r2, #16
    d3dc:	it	ne
    d3de:	movne	r1, #106	; 0x6a
    d3e0:	str	r1, [sp, #20]
    d3e2:	vmov	d7, r8, r9
    d3e6:	ldr	r1, [pc, #760]	; (d6e0 <_strtod_l+0x898>)
    d3e8:	movs	r0, #0
    d3ea:	lsls	r7, r2, #31
    d3ec:	bpl.n	d3f8 <_strtod_l+0x5b0>
    d3ee:	vldr	d6, [r1]
    d3f2:	movs	r0, #1
    d3f4:	vmul.f64	d7, d7, d6
    d3f8:	asrs	r2, r2, #1
    d3fa:	add.w	r1, r1, #8
    d3fe:	bne.n	d3ea <_strtod_l+0x5a2>
    d400:	cbz	r0, d406 <_strtod_l+0x5be>
    d402:	vmov	r8, r9, d7
    d406:	ldr	r2, [sp, #20]
    d408:	cbz	r2, d43a <_strtod_l+0x5f2>
    d40a:	ubfx	r1, r9, #20, #11
    d40e:	rsb	r2, r1, #107	; 0x6b
    d412:	cmp	r2, #0
    d414:	mov	r0, r9
    d416:	ble.n	d43a <_strtod_l+0x5f2>
    d418:	cmp	r2, #31
    d41a:	ble.w	d676 <_strtod_l+0x82e>
    d41e:	cmp	r2, #52	; 0x34
    d420:	ittt	le
    d422:	movle.w	r2, #4294967295
    d426:	rsble	r1, r1, #75	; 0x4b
    d42a:	lslle	r2, r1
    d42c:	mov.w	r8, #0
    d430:	ite	gt
    d432:	movgt.w	r9, #57671680	; 0x3700000
    d436:	andle.w	r9, r2, r0
    d43a:	vmov	d7, r8, r9
    d43e:	vcmp.f64	d7, #0.0
    d442:	vmrs	APSR_nzcv, fpscr
    d446:	beq.n	d39a <_strtod_l+0x552>
    d448:	ldr	r2, [sp, #28]
    d44a:	str	r2, [sp, #0]
    d44c:	ldr	r1, [sp, #36]	; 0x24
    d44e:	mov	r2, r6
    d450:	mov	r0, r4
    d452:	bl	102a4 <__s2b>
    d456:	str	r0, [sp, #28]
    d458:	cmp	r0, #0
    d45a:	beq.w	d2bc <_strtod_l+0x474>
    d45e:	ldr	r2, [sp, #24]
    d460:	cmp	r2, #0
    d462:	sub.w	r3, fp, r5
    d466:	vldr	d9, [pc, #600]	; d6c0 <_strtod_l+0x878>
    d46a:	it	ge
    d46c:	movge	r3, #0
    d46e:	vldr	d10, [pc, #600]	; d6c8 <_strtod_l+0x880>
    d472:	vldr	d11, [pc, #604]	; d6d0 <_strtod_l+0x888>
    d476:	str	r3, [sp, #36]	; 0x24
    d478:	movs	r5, #0
    d47a:	bic.w	r3, r2, r2, asr #31
    d47e:	str	r3, [sp, #48]	; 0x30
    d480:	mov	r6, r5
    d482:	ldr	r3, [sp, #28]
    d484:	mov	r0, r4
    d486:	ldr	r1, [r3, #4]
    d488:	bl	10154 <_Balloc>
    d48c:	mov	r7, r0
    d48e:	cmp	r0, #0
    d490:	beq.w	d2c4 <_strtod_l+0x47c>
    d494:	ldr	r3, [sp, #28]
    d496:	ldr	r2, [r3, #16]
    d498:	adds	r2, #2
    d49a:	add.w	r1, r3, #12
    d49e:	lsls	r2, r2, #2
    d4a0:	adds	r0, #12
    d4a2:	bl	a254 <memcpy>
    d4a6:	vmov	d0, r8, r9
    d4aa:	add	r2, sp, #80	; 0x50
    d4ac:	add	r1, sp, #76	; 0x4c
    d4ae:	mov	r0, r4
    d4b0:	bl	1090c <__d2b>
    d4b4:	vmov	d8, r8, r9
    d4b8:	str	r0, [sp, #72]	; 0x48
    d4ba:	cmp	r0, #0
    d4bc:	beq.w	d2c4 <_strtod_l+0x47c>
    d4c0:	movs	r1, #1
    d4c2:	mov	r0, r4
    d4c4:	bl	103d4 <__i2b>
    d4c8:	mov	r6, r0
    d4ca:	cmp	r0, #0
    d4cc:	beq.w	d2c4 <_strtod_l+0x47c>
    d4d0:	ldr	r3, [sp, #76]	; 0x4c
    d4d2:	ldr	r1, [sp, #80]	; 0x50
    d4d4:	cmp	r3, #0
    d4d6:	itete	ge
    d4d8:	ldrge	r2, [sp, #36]	; 0x24
    d4da:	ldrlt	r2, [sp, #48]	; 0x30
    d4dc:	ldrge.w	sl, [sp, #48]	; 0x30
    d4e0:	ldrlt.w	fp, [sp, #36]	; 0x24
    d4e4:	ite	ge
    d4e6:	addge.w	fp, r3, r2
    d4ea:	sublt.w	sl, r2, r3
    d4ee:	ldr	r2, [sp, #20]
    d4f0:	subs	r3, r3, r2
    d4f2:	add	r3, r1
    d4f4:	ldr	r2, [pc, #492]	; (d6e4 <_strtod_l+0x89c>)
    d4f6:	subs	r3, #1
    d4f8:	cmp	r3, r2
    d4fa:	rsb	r1, r1, #54	; 0x36
    d4fe:	bge.w	d69c <_strtod_l+0x854>
    d502:	subs	r2, r2, r3
    d504:	cmp	r2, #31
    d506:	sub.w	r1, r1, r2
    d50a:	mov.w	r0, #1
    d50e:	bgt.w	d684 <_strtod_l+0x83c>
    d512:	lsl.w	r3, r0, r2
    d516:	str	r3, [sp, #44]	; 0x2c
    d518:	movs	r3, #0
    d51a:	str	r3, [sp, #40]	; 0x28
    d51c:	add.w	r3, fp, r1
    d520:	ldr	r2, [sp, #20]
    d522:	cmp	fp, r3
    d524:	add	sl, r1
    d526:	add	sl, r2
    d528:	mov	r2, fp
    d52a:	it	ge
    d52c:	movge	r2, r3
    d52e:	cmp	r2, sl
    d530:	it	ge
    d532:	movge	r2, sl
    d534:	cmp	r2, #0
    d536:	ittt	gt
    d538:	subgt	r3, r3, r2
    d53a:	subgt.w	sl, sl, r2
    d53e:	subgt.w	fp, fp, r2
    d542:	ldr	r2, [sp, #36]	; 0x24
    d544:	cmp	r2, #0
    d546:	ble.n	d57a <_strtod_l+0x732>
    d548:	mov	r1, r6
    d54a:	mov	r0, r4
    d54c:	str	r3, [sp, #60]	; 0x3c
    d54e:	bl	10554 <__pow5mult>
    d552:	mov	r6, r0
    d554:	cmp	r0, #0
    d556:	beq.w	d2c4 <_strtod_l+0x47c>
    d55a:	mov	r1, r0
    d55c:	ldr	r2, [sp, #72]	; 0x48
    d55e:	mov	r0, r4
    d560:	bl	10400 <__multiply>
    d564:	str	r0, [sp, #56]	; 0x38
    d566:	cmp	r0, #0
    d568:	beq.w	d2c4 <_strtod_l+0x47c>
    d56c:	ldr	r1, [sp, #72]	; 0x48
    d56e:	mov	r0, r4
    d570:	bl	101d4 <_Bfree>
    d574:	ldr	r2, [sp, #56]	; 0x38
    d576:	ldr	r3, [sp, #60]	; 0x3c
    d578:	str	r2, [sp, #72]	; 0x48
    d57a:	cmp	r3, #0
    d57c:	bgt.w	d6a6 <_strtod_l+0x85e>
    d580:	ldr	r3, [sp, #24]
    d582:	cmp	r3, #0
    d584:	ble.n	d598 <_strtod_l+0x750>
    d586:	mov	r1, r7
    d588:	ldr	r2, [sp, #48]	; 0x30
    d58a:	mov	r0, r4
    d58c:	bl	10554 <__pow5mult>
    d590:	mov	r7, r0
    d592:	cmp	r0, #0
    d594:	beq.w	d2c4 <_strtod_l+0x47c>
    d598:	cmp.w	sl, #0
    d59c:	ble.n	d5b0 <_strtod_l+0x768>
    d59e:	mov	r1, r7
    d5a0:	mov	r2, sl
    d5a2:	mov	r0, r4
    d5a4:	bl	10608 <__lshift>
    d5a8:	mov	r7, r0
    d5aa:	cmp	r0, #0
    d5ac:	beq.w	d2c4 <_strtod_l+0x47c>
    d5b0:	cmp.w	fp, #0
    d5b4:	ble.n	d5c8 <_strtod_l+0x780>
    d5b6:	mov	r1, r6
    d5b8:	mov	r2, fp
    d5ba:	mov	r0, r4
    d5bc:	bl	10608 <__lshift>
    d5c0:	mov	r6, r0
    d5c2:	cmp	r0, #0
    d5c4:	beq.w	d2c4 <_strtod_l+0x47c>
    d5c8:	ldr	r1, [sp, #72]	; 0x48
    d5ca:	mov	r2, r7
    d5cc:	mov	r0, r4
    d5ce:	bl	10718 <__mdiff>
    d5d2:	mov	r5, r0
    d5d4:	cmp	r0, #0
    d5d6:	beq.w	d2c4 <_strtod_l+0x47c>
    d5da:	movs	r3, #0
    d5dc:	ldr.w	sl, [r0, #12]
    d5e0:	str	r3, [r0, #12]
    d5e2:	mov	r1, r6
    d5e4:	bl	106e0 <__mcmp>
    d5e8:	cmp	r0, #0
    d5ea:	bge.n	d6ec <_strtod_l+0x8a4>
    d5ec:	orrs.w	sl, sl, r8
    d5f0:	bne.w	d73e <_strtod_l+0x8f6>
    d5f4:	ubfx	r3, r9, #0, #20
    d5f8:	cmp	r3, #0
    d5fa:	bne.w	d73e <_strtod_l+0x8f6>
    d5fe:	bic.w	r3, r9, #2147483648	; 0x80000000
    d602:	lsrs	r3, r3, #20
    d604:	lsls	r3, r3, #20
    d606:	cmp.w	r3, #112197632	; 0x6b00000
    d60a:	bls.w	d73e <_strtod_l+0x8f6>
    d60e:	ldr	r3, [r5, #20]
    d610:	cbnz	r3, d61a <_strtod_l+0x7d2>
    d612:	ldr	r3, [r5, #16]
    d614:	cmp	r3, #1
    d616:	ble.w	d73e <_strtod_l+0x8f6>
    d61a:	mov	r1, r5
    d61c:	movs	r2, #1
    d61e:	mov	r0, r4
    d620:	bl	10608 <__lshift>
    d624:	mov	r1, r6
    d626:	mov	r5, r0
    d628:	bl	106e0 <__mcmp>
    d62c:	cmp	r0, #0
    d62e:	ble.w	d73e <_strtod_l+0x8f6>
    d632:	ldr	r1, [sp, #20]
    d634:	ldr	r2, [pc, #176]	; (d6e8 <_strtod_l+0x8a0>)
    d636:	mov	r3, r9
    d638:	cmp	r1, #0
    d63a:	beq.w	d77c <_strtod_l+0x934>
    d63e:	and.w	r1, r2, r9
    d642:	cmp.w	r1, #112197632	; 0x6b00000
    d646:	bgt.w	d77c <_strtod_l+0x934>
    d64a:	cmp.w	r1, #57671680	; 0x3700000
    d64e:	ble.w	d3a2 <_strtod_l+0x55a>
    d652:	vldr	d7, [pc, #132]	; d6d8 <_strtod_l+0x890>
    d656:	vmov	d6, r8, r9
    d65a:	ldr	r3, [pc, #140]	; (d6e8 <_strtod_l+0x8a0>)
    d65c:	vmul.f64	d7, d6, d7
    d660:	vmov	r2, s15
    d664:	ands	r3, r2
    d666:	vmov	r8, r9, d7
    d66a:	cmp	r3, #0
    d66c:	bne.w	d2d8 <_strtod_l+0x490>
    d670:	movs	r3, #34	; 0x22
    d672:	str	r3, [r4, #0]
    d674:	b.n	d2d8 <_strtod_l+0x490>
    d676:	mov.w	r1, #4294967295
    d67a:	lsl.w	r2, r1, r2
    d67e:	and.w	r8, r2, r8
    d682:	b.n	d43a <_strtod_l+0x5f2>
    d684:	rsb	r3, r3, #4278190080	; 0xff000000
    d688:	add.w	r3, r3, #16711680	; 0xff0000
    d68c:	add.w	r3, r3, #64256	; 0xfb00
    d690:	adds	r3, #226	; 0xe2
    d692:	lsl.w	r3, r0, r3
    d696:	strd	r3, r0, [sp, #40]	; 0x28
    d69a:	b.n	d51c <_strtod_l+0x6d4>
    d69c:	movs	r2, #0
    d69e:	movs	r3, #1
    d6a0:	strd	r2, r3, [sp, #40]	; 0x28
    d6a4:	b.n	d51c <_strtod_l+0x6d4>
    d6a6:	ldr	r1, [sp, #72]	; 0x48
    d6a8:	mov	r2, r3
    d6aa:	mov	r0, r4
    d6ac:	bl	10608 <__lshift>
    d6b0:	str	r0, [sp, #72]	; 0x48
    d6b2:	cmp	r0, #0
    d6b4:	bne.w	d580 <_strtod_l+0x738>
    d6b8:	b.n	d2c4 <_strtod_l+0x47c>
    d6ba:	nop
    d6bc:	nop.w
    d6c0:	.word	0x94a03595
    d6c4:	.word	0x3fcfffff
    d6c8:	.word	0x94a03595
    d6cc:	.word	0x3fdfffff
    d6d0:	.word	0x35afe535
    d6d4:	.word	0x3fe00000
    d6d8:	.word	0x00000000
    d6dc:	.word	0x39500000
    d6e0:	.word	0x200003f0
    d6e4:	.word	0xfffffc02
    d6e8:	.word	0x7ff00000
    d6ec:	mov	fp, r9
    d6ee:	bne.n	d7b0 <_strtod_l+0x968>
    d6f0:	ubfx	r3, r9, #0, #20
    d6f4:	cmp.w	sl, #0
    d6f8:	beq.n	d750 <_strtod_l+0x908>
    d6fa:	ldr	r2, [pc, #668]	; (d998 <_strtod_l+0xb50>)
    d6fc:	cmp	r3, r2
    d6fe:	bne.n	d758 <_strtod_l+0x910>
    d700:	ldr	r3, [sp, #20]
    d702:	mov	r2, r8
    d704:	cbz	r3, d746 <_strtod_l+0x8fe>
    d706:	ldr	r3, [pc, #660]	; (d99c <_strtod_l+0xb54>)
    d708:	and.w	r3, r9, r3
    d70c:	cmp.w	r3, #111149056	; 0x6a00000
    d710:	mov.w	r1, #4294967295
    d714:	bhi.n	d74c <_strtod_l+0x904>
    d716:	lsrs	r3, r3, #20
    d718:	rsb	r3, r3, #107	; 0x6b
    d71c:	lsl.w	r3, r1, r3
    d720:	cmp	r2, r3
    d722:	bne.n	d758 <_strtod_l+0x910>
    d724:	ldr	r3, [pc, #632]	; (d9a0 <_strtod_l+0xb58>)
    d726:	cmp	fp, r3
    d728:	bne.n	d730 <_strtod_l+0x8e8>
    d72a:	adds	r2, #1
    d72c:	beq.w	d2c4 <_strtod_l+0x47c>
    d730:	ldr	r3, [pc, #616]	; (d99c <_strtod_l+0xb54>)
    d732:	and.w	r3, fp, r3
    d736:	add.w	r9, r3, #1048576	; 0x100000
    d73a:	mov.w	r8, #0
    d73e:	ldr	r3, [sp, #20]
    d740:	cmp	r3, #0
    d742:	bne.n	d652 <_strtod_l+0x80a>
    d744:	b.n	d2d8 <_strtod_l+0x490>
    d746:	mov.w	r3, #4294967295
    d74a:	b.n	d720 <_strtod_l+0x8d8>
    d74c:	mov	r3, r1
    d74e:	b.n	d720 <_strtod_l+0x8d8>
    d750:	orrs.w	r3, r3, r8
    d754:	beq.w	d632 <_strtod_l+0x7ea>
    d758:	ldr	r3, [sp, #40]	; 0x28
    d75a:	cbz	r3, d790 <_strtod_l+0x948>
    d75c:	tst.w	r3, fp
    d760:	beq.n	d73e <_strtod_l+0x8f6>
    d762:	ldr	r2, [sp, #20]
    d764:	mov	r0, r8
    d766:	mov	r1, r9
    d768:	cmp.w	sl, #0
    d76c:	beq.n	d798 <_strtod_l+0x950>
    d76e:	bl	ce12 <sulp>
    d772:	vadd.f64	d7, d8, d0
    d776:	vmov	r8, r9, d7
    d77a:	b.n	d73e <_strtod_l+0x8f6>
    d77c:	ands	r3, r2
    d77e:	sub.w	r3, r3, #1048576	; 0x100000
    d782:	mvn.w	r9, r3, lsr #20
    d786:	mvn.w	r9, r9, lsl #20
    d78a:	mov.w	r8, #4294967295
    d78e:	b.n	d73e <_strtod_l+0x8f6>
    d790:	ldr	r3, [sp, #44]	; 0x2c
    d792:	tst.w	r3, r8
    d796:	b.n	d760 <_strtod_l+0x918>
    d798:	bl	ce12 <sulp>
    d79c:	vsub.f64	d0, d8, d0
    d7a0:	vcmp.f64	d0, #0.0
    d7a4:	vmrs	APSR_nzcv, fpscr
    d7a8:	vmov	r8, r9, d0
    d7ac:	bne.n	d73e <_strtod_l+0x8f6>
    d7ae:	b.n	d3a2 <_strtod_l+0x55a>
    d7b0:	mov	r1, r6
    d7b2:	mov	r0, r5
    d7b4:	bl	109c0 <__ratio>
    d7b8:	vmov.f64	d7, #0	; 0x40000000  2.0
    d7bc:	vcmpe.f64	d0, d7
    d7c0:	vmrs	APSR_nzcv, fpscr
    d7c4:	bhi.n	d886 <_strtod_l+0xa3e>
    d7c6:	cmp.w	sl, #0
    d7ca:	bne.n	d89a <_strtod_l+0xa52>
    d7cc:	cmp.w	r8, #0
    d7d0:	bne.n	d86e <_strtod_l+0xa26>
    d7d2:	ubfx	r3, r9, #0, #20
    d7d6:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d7da:	cmp	r3, #0
    d7dc:	bne.n	d8a4 <_strtod_l+0xa5c>
    d7de:	vcmpe.f64	d0, d13
    d7e2:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d7e6:	vmrs	APSR_nzcv, fpscr
    d7ea:	bmi.n	d7f0 <_strtod_l+0x9a8>
    d7ec:	vmul.f64	d13, d0, d13
    d7f0:	vneg.f64	d12, d13
    d7f4:	ldr	r0, [pc, #420]	; (d99c <_strtod_l+0xb54>)
    d7f6:	ldr.w	ip, [pc, #432]	; d9a8 <_strtod_l+0xb60>
    d7fa:	and.w	r1, fp, r0
    d7fe:	cmp	r1, ip
    d800:	vmov	r2, r3, d12
    d804:	bne.n	d8fc <_strtod_l+0xab4>
    d806:	sub.w	r9, fp, #55574528	; 0x3500000
    d80a:	vmov	d0, r8, r9
    d80e:	str	r1, [sp, #40]	; 0x28
    d810:	bl	1082c <__ulp>
    d814:	vmov	d14, r8, r9
    d818:	ldr	r0, [pc, #384]	; (d99c <_strtod_l+0xb54>)
    d81a:	vfma.f64	d14, d0, d12
    d81e:	vmov	r3, s29
    d822:	ldr	r2, [pc, #384]	; (d9a4 <_strtod_l+0xb5c>)
    d824:	ldr	r1, [sp, #40]	; 0x28
    d826:	ands	r0, r3
    d828:	cmp	r0, r2
    d82a:	vmov	r8, r9, d14
    d82e:	bls.n	d8aa <_strtod_l+0xa62>
    d830:	vmov	r2, s17
    d834:	ldr	r3, [pc, #360]	; (d9a0 <_strtod_l+0xb58>)
    d836:	cmp	r2, r3
    d838:	bne.n	d844 <_strtod_l+0x9fc>
    d83a:	vmov	r3, s16
    d83e:	adds	r3, #1
    d840:	beq.w	d2c4 <_strtod_l+0x47c>
    d844:	ldr.w	r9, [pc, #344]	; d9a0 <_strtod_l+0xb58>
    d848:	mov.w	r8, #4294967295
    d84c:	ldr	r1, [sp, #72]	; 0x48
    d84e:	mov	r0, r4
    d850:	bl	101d4 <_Bfree>
    d854:	mov	r1, r7
    d856:	mov	r0, r4
    d858:	bl	101d4 <_Bfree>
    d85c:	mov	r1, r6
    d85e:	mov	r0, r4
    d860:	bl	101d4 <_Bfree>
    d864:	mov	r1, r5
    d866:	mov	r0, r4
    d868:	bl	101d4 <_Bfree>
    d86c:	b.n	d482 <_strtod_l+0x63a>
    d86e:	cmp.w	r8, #1
    d872:	bne.n	d87c <_strtod_l+0xa34>
    d874:	cmp.w	r9, #0
    d878:	beq.w	d3a2 <_strtod_l+0x55a>
    d87c:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d880:	vmov.f64	d13, #112	; 0x3f800000  1.0
    d884:	b.n	d7f4 <_strtod_l+0x9ac>
    d886:	vmov.f64	d13, #96	; 0x3f000000  0.5
    d88a:	vmul.f64	d13, d0, d13
    d88e:	cmp.w	sl, #0
    d892:	beq.n	d7f0 <_strtod_l+0x9a8>
    d894:	vmov.f64	d12, d13
    d898:	b.n	d7f4 <_strtod_l+0x9ac>
    d89a:	vmov.f64	d12, #112	; 0x3f800000  1.0
    d89e:	vmov.f64	d13, d12
    d8a2:	b.n	d7f4 <_strtod_l+0x9ac>
    d8a4:	vmov.f64	d12, #240	; 0xbf800000 -1.0
    d8a8:	b.n	d7f4 <_strtod_l+0x9ac>
    d8aa:	add.w	r9, r3, #55574528	; 0x3500000
    d8ae:	ldr	r3, [sp, #20]
    d8b0:	mov	fp, r9
    d8b2:	cmp	r3, #0
    d8b4:	bne.n	d84c <_strtod_l+0xa04>
    d8b6:	bic.w	r3, r9, #2147483648	; 0x80000000
    d8ba:	lsrs	r3, r3, #20
    d8bc:	lsls	r3, r3, #20
    d8be:	cmp	r1, r3
    d8c0:	bne.n	d84c <_strtod_l+0xa04>
    d8c2:	vmov	r0, r1, d13
    d8c6:	bl	12044 <__aeabi_d2lz>
    d8ca:	bl	11fe8 <__aeabi_l2d>
    d8ce:	ubfx	fp, r9, #0, #20
    d8d2:	vmov	d7, r0, r1
    d8d6:	orr.w	fp, fp, r8
    d8da:	orrs.w	fp, fp, sl
    d8de:	vsub.f64	d13, d13, d7
    d8e2:	beq.n	d95e <_strtod_l+0xb16>
    d8e4:	vcmpe.f64	d13, d10
    d8e8:	vmrs	APSR_nzcv, fpscr
    d8ec:	bmi.w	d2d8 <_strtod_l+0x490>
    d8f0:	vcmpe.f64	d13, d11
    d8f4:	vmrs	APSR_nzcv, fpscr
    d8f8:	ble.n	d84c <_strtod_l+0xa04>
    d8fa:	b.n	d2d8 <_strtod_l+0x490>
    d8fc:	ldr	r0, [sp, #20]
    d8fe:	cbz	r0, d93e <_strtod_l+0xaf6>
    d900:	cmp.w	r1, #111149056	; 0x6a00000
    d904:	bhi.n	d93e <_strtod_l+0xaf6>
    d906:	vldr	d7, [pc, #136]	; d990 <_strtod_l+0xb48>
    d90a:	vcmpe.f64	d13, d7
    d90e:	vmrs	APSR_nzcv, fpscr
    d912:	bhi.n	d938 <_strtod_l+0xaf0>
    d914:	vcvt.u32.f64	s26, d13
    d918:	vmov	r3, s26
    d91c:	cmp	r3, #1
    d91e:	it	cc
    d920:	movcc	r3, #1
    d922:	vmov	s26, r3
    d926:	vcvt.f64.u32	d13, s26
    d92a:	cmp.w	sl, #0
    d92e:	bne.n	d958 <_strtod_l+0xb10>
    d930:	vneg.f64	d7, d13
    d934:	vmov	r2, r3, d7
    d938:	add.w	r0, r3, #112197632	; 0x6b00000
    d93c:	subs	r3, r0, r1
    d93e:	vmov.f64	d0, d8
    d942:	vmov	d12, r2, r3
    d946:	str	r1, [sp, #40]	; 0x28
    d948:	bl	1082c <__ulp>
    d94c:	ldr	r1, [sp, #40]	; 0x28
    d94e:	vfma.f64	d8, d12, d0
    d952:	vmov	r8, r9, d8
    d956:	b.n	d8ae <_strtod_l+0xa66>
    d958:	vmov.f64	d7, d13
    d95c:	b.n	d934 <_strtod_l+0xaec>
    d95e:	vcmpe.f64	d13, d9
    d962:	vmrs	APSR_nzcv, fpscr
    d966:	bpl.w	d84c <_strtod_l+0xa04>
    d96a:	b.n	d2d8 <_strtod_l+0x490>
    d96c:	movs	r3, #0
    d96e:	str	r3, [sp, #32]
    d970:	ldr	r2, [sp, #52]	; 0x34
    d972:	ldr	r3, [sp, #68]	; 0x44
    d974:	str	r3, [r2, #0]
    d976:	b.w	cec6 <_strtod_l+0x7e>
    d97a:	cmp	r2, #101	; 0x65
    d97c:	beq.w	d0c4 <_strtod_l+0x27c>
    d980:	cmp	r2, #69	; 0x45
    d982:	beq.w	d0c4 <_strtod_l+0x27c>
    d986:	movs	r1, #1
    d988:	b.w	d13c <_strtod_l+0x2f4>
    d98c:	nop.w
    d990:	.word	0xffc00000
    d994:	.word	0x41dfffff
    d998:	.word	0x000fffff
    d99c:	.word	0x7ff00000
    d9a0:	.word	0x7fefffff
    d9a4:	.word	0x7c9fffff
    d9a8:	.word	0x7fe00000

0000d9ac <_strtod_r>:
    d9ac:	ldr	r3, [pc, #4]	; (d9b4 <_strtod_r+0x8>)
    d9ae:	b.w	ce48 <_strtod_l>
    d9b2:	nop
    d9b4:	.word	0x2000210c

0000d9b8 <_strtol_l.constprop.0>:
    d9b8:	cmp	r3, #1
    d9ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d9be:	beq.n	d9c4 <_strtol_l.constprop.0+0xc>
    d9c0:	cmp	r3, #36	; 0x24
    d9c2:	bls.n	d9d2 <_strtol_l.constprop.0+0x1a>
    d9c4:	bl	ecbc <__errno>
    d9c8:	movs	r3, #22
    d9ca:	str	r3, [r0, #0]
    d9cc:	movs	r0, #0
    d9ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9d2:	ldr.w	ip, [pc, #228]	; dab8 <_strtol_l.constprop.0+0x100>
    d9d6:	mov	r5, r1
    d9d8:	mov	r6, r5
    d9da:	ldrb.w	r4, [r5], #1
    d9de:	ldrb.w	r7, [ip, r4]
    d9e2:	ands.w	r7, r7, #8
    d9e6:	bne.n	d9d8 <_strtol_l.constprop.0+0x20>
    d9e8:	cmp	r4, #45	; 0x2d
    d9ea:	bne.n	da52 <_strtol_l.constprop.0+0x9a>
    d9ec:	ldrb	r4, [r5, #0]
    d9ee:	movs	r7, #1
    d9f0:	adds	r5, r6, #2
    d9f2:	cmp	r3, #0
    d9f4:	beq.n	daae <_strtol_l.constprop.0+0xf6>
    d9f6:	cmp	r3, #16
    d9f8:	bne.n	da0e <_strtol_l.constprop.0+0x56>
    d9fa:	cmp	r4, #48	; 0x30
    d9fc:	bne.n	da0e <_strtol_l.constprop.0+0x56>
    d9fe:	ldrb	r4, [r5, #0]
    da00:	and.w	r4, r4, #223	; 0xdf
    da04:	cmp	r4, #88	; 0x58
    da06:	bne.n	daa4 <_strtol_l.constprop.0+0xec>
    da08:	ldrb	r4, [r5, #1]
    da0a:	movs	r3, #16
    da0c:	adds	r5, #2
    da0e:	add.w	r8, r7, #2147483648	; 0x80000000
    da12:	add.w	r8, r8, #4294967295
    da16:	mov.w	lr, #0
    da1a:	udiv	r9, r8, r3
    da1e:	mov	r6, lr
    da20:	mls	sl, r3, r9, r8
    da24:	sub.w	ip, r4, #48	; 0x30
    da28:	cmp.w	ip, #9
    da2c:	bhi.n	da5c <_strtol_l.constprop.0+0xa4>
    da2e:	mov	r4, ip
    da30:	cmp	r3, r4
    da32:	ble.n	da7e <_strtol_l.constprop.0+0xc6>
    da34:	cmp.w	lr, #4294967295
    da38:	beq.n	da4c <_strtol_l.constprop.0+0x94>
    da3a:	cmp	r9, r6
    da3c:	bcc.n	da78 <_strtol_l.constprop.0+0xc0>
    da3e:	bne.n	da44 <_strtol_l.constprop.0+0x8c>
    da40:	cmp	sl, r4
    da42:	blt.n	da78 <_strtol_l.constprop.0+0xc0>
    da44:	mla	r6, r6, r3, r4
    da48:	mov.w	lr, #1
    da4c:	ldrb.w	r4, [r5], #1
    da50:	b.n	da24 <_strtol_l.constprop.0+0x6c>
    da52:	cmp	r4, #43	; 0x2b
    da54:	itt	eq
    da56:	ldrbeq	r4, [r5, #0]
    da58:	addeq	r5, r6, #2
    da5a:	b.n	d9f2 <_strtol_l.constprop.0+0x3a>
    da5c:	sub.w	ip, r4, #65	; 0x41
    da60:	cmp.w	ip, #25
    da64:	bhi.n	da6a <_strtol_l.constprop.0+0xb2>
    da66:	subs	r4, #55	; 0x37
    da68:	b.n	da30 <_strtol_l.constprop.0+0x78>
    da6a:	sub.w	ip, r4, #97	; 0x61
    da6e:	cmp.w	ip, #25
    da72:	bhi.n	da7e <_strtol_l.constprop.0+0xc6>
    da74:	subs	r4, #87	; 0x57
    da76:	b.n	da30 <_strtol_l.constprop.0+0x78>
    da78:	mov.w	lr, #4294967295
    da7c:	b.n	da4c <_strtol_l.constprop.0+0x94>
    da7e:	cmp.w	lr, #4294967295
    da82:	bne.n	da90 <_strtol_l.constprop.0+0xd8>
    da84:	movs	r3, #34	; 0x22
    da86:	str	r3, [r0, #0]
    da88:	mov	r6, r8
    da8a:	cbnz	r2, da9e <_strtol_l.constprop.0+0xe6>
    da8c:	mov	r0, r6
    da8e:	b.n	d9ce <_strtol_l.constprop.0+0x16>
    da90:	cbz	r7, da94 <_strtol_l.constprop.0+0xdc>
    da92:	negs	r6, r6
    da94:	cmp	r2, #0
    da96:	beq.n	da8c <_strtol_l.constprop.0+0xd4>
    da98:	cmp.w	lr, #0
    da9c:	beq.n	daa0 <_strtol_l.constprop.0+0xe8>
    da9e:	subs	r1, r5, #1
    daa0:	str	r1, [r2, #0]
    daa2:	b.n	da8c <_strtol_l.constprop.0+0xd4>
    daa4:	movs	r4, #48	; 0x30
    daa6:	cmp	r3, #0
    daa8:	bne.n	da0e <_strtol_l.constprop.0+0x56>
    daaa:	movs	r3, #8
    daac:	b.n	da0e <_strtol_l.constprop.0+0x56>
    daae:	cmp	r4, #48	; 0x30
    dab0:	beq.n	d9fe <_strtol_l.constprop.0+0x46>
    dab2:	movs	r3, #10
    dab4:	b.n	da0e <_strtol_l.constprop.0+0x56>
    dab6:	nop
    dab8:	.word	0x2000124c

0000dabc <_strtol_r>:
    dabc:	b.w	d9b8 <_strtol_l.constprop.0>

0000dac0 <__cxa_atexit>:
    dac0:	push	{r4, lr}
    dac2:	ldr	r4, [pc, #20]	; (dad8 <__cxa_atexit+0x18>)
    dac4:	mov	r3, r2
    dac6:	cbz	r4, dad4 <__cxa_atexit+0x14>
    dac8:	mov	r2, r1
    daca:	mov	r1, r0
    dacc:	movs	r0, #2
    dace:	nop.w
    dad2:	pop	{r4, pc}
    dad4:	mov	r0, r4
    dad6:	b.n	dad2 <__cxa_atexit+0x12>
    dad8:	.word	0x00000000

0000dadc <fcvt>:
    dadc:	movs	r3, #0
    dade:	b.w	10ad4 <fcvtbuf>

0000dae2 <fcvtf>:
    dae2:	vcvt.f64.f32	d0, s0
    dae6:	b.w	dadc <fcvt>

0000daea <__cvt>:
    daea:	push	{r4, r5, r6, r7, lr}
    daec:	vpush	{d8}
    daf0:	vmov.f64	d8, d0
    daf4:	sub	sp, #20
    daf6:	mov	r7, r2
    daf8:	ldr	r5, [sp, #52]	; 0x34
    dafa:	ldr	r6, [sp, #48]	; 0x30
    dafc:	vmov	r2, s17
    db00:	bic.w	r5, r5, #32
    db04:	cmp	r2, #0
    db06:	itet	lt
    db08:	movlt	r2, #45	; 0x2d
    db0a:	movge	r2, #0
    db0c:	vneglt.f64	d8, d0
    db10:	cmp	r5, #70	; 0x46
    db12:	mov	r4, r1
    db14:	strb	r2, [r3, #0]
    db16:	beq.n	db22 <__cvt+0x38>
    db18:	cmp	r5, #69	; 0x45
    db1a:	bne.n	db1e <__cvt+0x34>
    db1c:	adds	r4, #1
    db1e:	movs	r1, #2
    db20:	b.n	db24 <__cvt+0x3a>
    db22:	movs	r1, #3
    db24:	add	r3, sp, #12
    db26:	str	r3, [sp, #4]
    db28:	add	r3, sp, #8
    db2a:	str	r3, [sp, #0]
    db2c:	mov	r2, r4
    db2e:	mov	r3, r6
    db30:	vmov.f64	d0, d8
    db34:	bl	ef10 <_dtoa_r>
    db38:	cmp	r5, #71	; 0x47
    db3a:	bne.n	db40 <__cvt+0x56>
    db3c:	lsls	r3, r7, #31
    db3e:	bpl.n	db76 <__cvt+0x8c>
    db40:	cmp	r5, #70	; 0x46
    db42:	add.w	r2, r0, r4
    db46:	bne.n	db62 <__cvt+0x78>
    db48:	ldrb	r3, [r0, #0]
    db4a:	cmp	r3, #48	; 0x30
    db4c:	bne.n	db5e <__cvt+0x74>
    db4e:	vcmp.f64	d8, #0.0
    db52:	vmrs	APSR_nzcv, fpscr
    db56:	itt	ne
    db58:	rsbne	r4, r4, #1
    db5c:	strne	r4, [r6, #0]
    db5e:	ldr	r3, [r6, #0]
    db60:	add	r2, r3
    db62:	vcmp.f64	d8, #0.0
    db66:	vmrs	APSR_nzcv, fpscr
    db6a:	it	eq
    db6c:	streq	r2, [sp, #12]
    db6e:	movs	r1, #48	; 0x30
    db70:	ldr	r3, [sp, #12]
    db72:	cmp	r3, r2
    db74:	bcc.n	db86 <__cvt+0x9c>
    db76:	ldr	r3, [sp, #12]
    db78:	ldr	r2, [sp, #56]	; 0x38
    db7a:	subs	r3, r3, r0
    db7c:	str	r3, [r2, #0]
    db7e:	add	sp, #20
    db80:	vpop	{d8}
    db84:	pop	{r4, r5, r6, r7, pc}
    db86:	adds	r4, r3, #1
    db88:	str	r4, [sp, #12]
    db8a:	strb	r1, [r3, #0]
    db8c:	b.n	db70 <__cvt+0x86>

0000db8e <__exponent>:
    db8e:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    db90:	mov	r3, r0
    db92:	cmp	r1, #0
    db94:	it	lt
    db96:	neglt	r1, r1
    db98:	strb.w	r2, [r3], #2
    db9c:	ite	lt
    db9e:	movlt	r2, #45	; 0x2d
    dba0:	movge	r2, #43	; 0x2b
    dba2:	cmp	r1, #9
    dba4:	strb	r2, [r0, #1]
    dba6:	ble.n	dbfe <__exponent+0x70>
    dba8:	add.w	r2, sp, #7
    dbac:	mov	r7, r2
    dbae:	movs	r6, #10
    dbb0:	mov	ip, r2
    dbb2:	sdiv	r5, r1, r6
    dbb6:	mls	r4, r6, r5, r1
    dbba:	adds	r4, #48	; 0x30
    dbbc:	strb.w	r4, [ip, #-1]
    dbc0:	mov	r4, r1
    dbc2:	cmp	r4, #99	; 0x63
    dbc4:	add.w	r2, r2, #4294967295
    dbc8:	mov	r1, r5
    dbca:	bgt.n	dbb0 <__exponent+0x22>
    dbcc:	adds	r1, #48	; 0x30
    dbce:	sub.w	r4, ip, #2
    dbd2:	strb.w	r1, [r2, #-1]
    dbd6:	adds	r1, r0, #1
    dbd8:	mov	r2, r4
    dbda:	cmp	r2, r7
    dbdc:	bcc.n	dbf4 <__exponent+0x66>
    dbde:	add.w	r2, sp, #9
    dbe2:	sub.w	r2, r2, ip
    dbe6:	cmp	r4, r7
    dbe8:	it	hi
    dbea:	movhi	r2, #0
    dbec:	add	r3, r2
    dbee:	subs	r0, r3, r0
    dbf0:	add	sp, #12
    dbf2:	pop	{r4, r5, r6, r7, pc}
    dbf4:	ldrb.w	r5, [r2], #1
    dbf8:	strb.w	r5, [r1, #1]!
    dbfc:	b.n	dbda <__exponent+0x4c>
    dbfe:	movs	r3, #48	; 0x30
    dc00:	adds	r1, #48	; 0x30
    dc02:	strb	r3, [r0, #2]
    dc04:	strb	r1, [r0, #3]
    dc06:	adds	r3, r0, #4
    dc08:	b.n	dbee <__exponent+0x60>
    dc0a:	movs	r0, r0
    dc0c:	movs	r0, r0
	...

0000dc10 <_printf_float>:
    dc10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc14:	sub	sp, #44	; 0x2c
    dc16:	mov	r4, r1
    dc18:	ldr.w	r8, [sp, #80]	; 0x50
    dc1c:	mov	r6, r2
    dc1e:	mov	r7, r3
    dc20:	mov	r5, r0
    dc22:	bl	ec08 <_localeconv_r>
    dc26:	ldr.w	fp, [r0]
    dc2a:	mov	r0, fp
    dc2c:	bl	edd0 <strlen>
    dc30:	movs	r3, #0
    dc32:	str	r3, [sp, #32]
    dc34:	ldr.w	r3, [r8]
    dc38:	ldrb.w	r9, [r4, #24]
    dc3c:	ldr	r2, [r4, #0]
    dc3e:	adds	r3, #7
    dc40:	bic.w	r3, r3, #7
    dc44:	add.w	r1, r3, #8
    dc48:	str.w	r1, [r8]
    dc4c:	vldr	d0, [r3]
    dc50:	vldr	d6, [pc, #604]	; deb0 <_printf_float+0x2a0>
    dc54:	vabs.f64	d7, d0
    dc58:	vcmp.f64	d7, d6
    dc5c:	vmrs	APSR_nzcv, fpscr
    dc60:	vstr	d0, [r4, #72]	; 0x48
    dc64:	mov	sl, r0
    dc66:	ble.n	dcb2 <_printf_float+0xa2>
    dc68:	vcmpe.f64	d0, #0.0
    dc6c:	vmrs	APSR_nzcv, fpscr
    dc70:	bpl.n	dc78 <_printf_float+0x68>
    dc72:	movs	r3, #45	; 0x2d
    dc74:	strb.w	r3, [r4, #67]	; 0x43
    dc78:	ldr	r1, [pc, #572]	; (deb8 <_printf_float+0x2a8>)
    dc7a:	ldr	r3, [pc, #576]	; (debc <_printf_float+0x2ac>)
    dc7c:	cmp.w	r9, #71	; 0x47
    dc80:	ite	ls
    dc82:	movls	r8, r1
    dc84:	movhi	r8, r3
    dc86:	movs	r3, #3
    dc88:	str	r3, [r4, #16]
    dc8a:	bic.w	r2, r2, #4
    dc8e:	movs	r3, #0
    dc90:	str	r2, [r4, #0]
    dc92:	str	r3, [sp, #16]
    dc94:	str	r7, [sp, #0]
    dc96:	mov	r3, r6
    dc98:	add	r2, sp, #36	; 0x24
    dc9a:	mov	r1, r4
    dc9c:	mov	r0, r5
    dc9e:	bl	e044 <_printf_common>
    dca2:	adds	r0, #1
    dca4:	bne.w	ddbc <_printf_float+0x1ac>
    dca8:	mov.w	r0, #4294967295
    dcac:	add	sp, #44	; 0x2c
    dcae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcb2:	vcmp.f64	d0, d0
    dcb6:	vmrs	APSR_nzcv, fpscr
    dcba:	bvc.n	dcd0 <_printf_float+0xc0>
    dcbc:	vmov	r3, s1
    dcc0:	cmp	r3, #0
    dcc2:	itt	lt
    dcc4:	movlt	r3, #45	; 0x2d
    dcc6:	strblt.w	r3, [r4, #67]	; 0x43
    dcca:	ldr	r1, [pc, #500]	; (dec0 <_printf_float+0x2b0>)
    dccc:	ldr	r3, [pc, #500]	; (dec4 <_printf_float+0x2b4>)
    dcce:	b.n	dc7c <_printf_float+0x6c>
    dcd0:	ldr	r3, [r4, #4]
    dcd2:	and.w	r1, r9, #223	; 0xdf
    dcd6:	str	r1, [sp, #16]
    dcd8:	adds	r1, r3, #1
    dcda:	bne.n	dd56 <_printf_float+0x146>
    dcdc:	movs	r3, #6
    dcde:	str	r3, [r4, #4]
    dce0:	movs	r3, #0
    dce2:	str	r3, [sp, #12]
    dce4:	add	r3, sp, #32
    dce6:	strd	r9, r3, [sp, #4]
    dcea:	orr.w	r2, r2, #1024	; 0x400
    dcee:	add	r3, sp, #28
    dcf0:	ldr	r1, [r4, #4]
    dcf2:	str	r3, [sp, #0]
    dcf4:	str	r2, [r4, #0]
    dcf6:	add.w	r3, sp, #27
    dcfa:	mov	r0, r5
    dcfc:	bl	daea <__cvt>
    dd00:	ldr	r3, [sp, #16]
    dd02:	ldr	r1, [sp, #28]
    dd04:	cmp	r3, #71	; 0x47
    dd06:	mov	r8, r0
    dd08:	bne.n	dd1c <_printf_float+0x10c>
    dd0a:	adds	r0, r1, #3
    dd0c:	blt.n	dd14 <_printf_float+0x104>
    dd0e:	ldr	r3, [r4, #4]
    dd10:	cmp	r1, r3
    dd12:	ble.n	dd98 <_printf_float+0x188>
    dd14:	sub.w	r9, r9, #2
    dd18:	uxtb.w	r9, r9
    dd1c:	cmp.w	r9, #101	; 0x65
    dd20:	bhi.n	dd64 <_printf_float+0x154>
    dd22:	subs	r1, #1
    dd24:	mov	r2, r9
    dd26:	add.w	r0, r4, #80	; 0x50
    dd2a:	str	r1, [sp, #28]
    dd2c:	bl	db8e <__exponent>
    dd30:	ldr	r2, [sp, #32]
    dd32:	str	r0, [sp, #16]
    dd34:	adds	r3, r2, r0
    dd36:	cmp	r2, #1
    dd38:	str	r3, [r4, #16]
    dd3a:	bgt.n	dd42 <_printf_float+0x132>
    dd3c:	ldr	r2, [r4, #0]
    dd3e:	lsls	r2, r2, #31
    dd40:	bpl.n	dd46 <_printf_float+0x136>
    dd42:	adds	r3, #1
    dd44:	str	r3, [r4, #16]
    dd46:	ldrb.w	r3, [sp, #27]
    dd4a:	cmp	r3, #0
    dd4c:	beq.n	dc94 <_printf_float+0x84>
    dd4e:	movs	r3, #45	; 0x2d
    dd50:	strb.w	r3, [r4, #67]	; 0x43
    dd54:	b.n	dc94 <_printf_float+0x84>
    dd56:	ldr	r1, [sp, #16]
    dd58:	cmp	r1, #71	; 0x47
    dd5a:	bne.n	dce0 <_printf_float+0xd0>
    dd5c:	cmp	r3, #0
    dd5e:	bne.n	dce0 <_printf_float+0xd0>
    dd60:	movs	r3, #1
    dd62:	b.n	dcde <_printf_float+0xce>
    dd64:	cmp.w	r9, #102	; 0x66
    dd68:	bne.n	dd9c <_printf_float+0x18c>
    dd6a:	cmp	r1, #0
    dd6c:	ldr	r3, [r4, #4]
    dd6e:	ble.n	dd88 <_printf_float+0x178>
    dd70:	str	r1, [r4, #16]
    dd72:	cbnz	r3, dd7a <_printf_float+0x16a>
    dd74:	ldr	r2, [r4, #0]
    dd76:	lsls	r0, r2, #31
    dd78:	bpl.n	dd80 <_printf_float+0x170>
    dd7a:	adds	r3, #1
    dd7c:	add	r3, r1
    dd7e:	str	r3, [r4, #16]
    dd80:	movs	r3, #0
    dd82:	str	r1, [r4, #88]	; 0x58
    dd84:	str	r3, [sp, #16]
    dd86:	b.n	dd46 <_printf_float+0x136>
    dd88:	cbnz	r3, dd90 <_printf_float+0x180>
    dd8a:	ldr	r2, [r4, #0]
    dd8c:	lsls	r2, r2, #31
    dd8e:	bpl.n	dd94 <_printf_float+0x184>
    dd90:	adds	r3, #2
    dd92:	b.n	dd7e <_printf_float+0x16e>
    dd94:	movs	r3, #1
    dd96:	b.n	dd7e <_printf_float+0x16e>
    dd98:	mov.w	r9, #103	; 0x67
    dd9c:	ldr	r3, [sp, #32]
    dd9e:	cmp	r1, r3
    dda0:	blt.n	ddae <_printf_float+0x19e>
    dda2:	ldr	r3, [r4, #0]
    dda4:	str	r1, [r4, #16]
    dda6:	lsls	r0, r3, #31
    dda8:	bpl.n	dd80 <_printf_float+0x170>
    ddaa:	adds	r3, r1, #1
    ddac:	b.n	dd7e <_printf_float+0x16e>
    ddae:	cmp	r1, #0
    ddb0:	ite	le
    ddb2:	rsble	r2, r1, #2
    ddb6:	movgt	r2, #1
    ddb8:	add	r3, r2
    ddba:	b.n	dd7e <_printf_float+0x16e>
    ddbc:	ldr	r3, [r4, #0]
    ddbe:	lsls	r2, r3, #21
    ddc0:	bmi.n	ddd2 <_printf_float+0x1c2>
    ddc2:	ldr	r3, [r4, #16]
    ddc4:	mov	r2, r8
    ddc6:	mov	r1, r6
    ddc8:	mov	r0, r5
    ddca:	blx	r7
    ddcc:	adds	r0, #1
    ddce:	bne.n	de26 <_printf_float+0x216>
    ddd0:	b.n	dca8 <_printf_float+0x98>
    ddd2:	cmp.w	r9, #101	; 0x65
    ddd6:	bls.w	df9a <_printf_float+0x38a>
    ddda:	vldr	d7, [r4, #72]	; 0x48
    ddde:	vcmp.f64	d7, #0.0
    dde2:	vmrs	APSR_nzcv, fpscr
    dde6:	bne.n	de50 <_printf_float+0x240>
    dde8:	ldr	r2, [pc, #220]	; (dec8 <_printf_float+0x2b8>)
    ddea:	movs	r3, #1
    ddec:	mov	r1, r6
    ddee:	mov	r0, r5
    ddf0:	blx	r7
    ddf2:	adds	r0, #1
    ddf4:	beq.w	dca8 <_printf_float+0x98>
    ddf8:	ldrd	r2, r3, [sp, #28]
    ddfc:	cmp	r2, r3
    ddfe:	blt.n	de06 <_printf_float+0x1f6>
    de00:	ldr	r3, [r4, #0]
    de02:	lsls	r0, r3, #31
    de04:	bpl.n	de26 <_printf_float+0x216>
    de06:	mov	r3, sl
    de08:	mov	r2, fp
    de0a:	mov	r1, r6
    de0c:	mov	r0, r5
    de0e:	blx	r7
    de10:	adds	r0, #1
    de12:	beq.w	dca8 <_printf_float+0x98>
    de16:	mov.w	r8, #0
    de1a:	add.w	r9, r4, #26
    de1e:	ldr	r3, [sp, #32]
    de20:	subs	r3, #1
    de22:	cmp	r3, r8
    de24:	bgt.n	de3a <_printf_float+0x22a>
    de26:	ldr	r3, [r4, #0]
    de28:	lsls	r3, r3, #30
    de2a:	bmi.w	e03a <_printf_float+0x42a>
    de2e:	ldr	r0, [r4, #12]
    de30:	ldr	r3, [sp, #36]	; 0x24
    de32:	cmp	r0, r3
    de34:	it	lt
    de36:	movlt	r0, r3
    de38:	b.n	dcac <_printf_float+0x9c>
    de3a:	movs	r3, #1
    de3c:	mov	r2, r9
    de3e:	mov	r1, r6
    de40:	mov	r0, r5
    de42:	blx	r7
    de44:	adds	r0, #1
    de46:	beq.w	dca8 <_printf_float+0x98>
    de4a:	add.w	r8, r8, #1
    de4e:	b.n	de1e <_printf_float+0x20e>
    de50:	ldr	r3, [sp, #28]
    de52:	cmp	r3, #0
    de54:	bgt.n	decc <_printf_float+0x2bc>
    de56:	ldr	r2, [pc, #112]	; (dec8 <_printf_float+0x2b8>)
    de58:	movs	r3, #1
    de5a:	mov	r1, r6
    de5c:	mov	r0, r5
    de5e:	blx	r7
    de60:	adds	r0, #1
    de62:	beq.w	dca8 <_printf_float+0x98>
    de66:	ldrd	r3, r2, [sp, #28]
    de6a:	orrs	r3, r2
    de6c:	bne.n	de74 <_printf_float+0x264>
    de6e:	ldr	r3, [r4, #0]
    de70:	lsls	r1, r3, #31
    de72:	bpl.n	de26 <_printf_float+0x216>
    de74:	mov	r3, sl
    de76:	mov	r2, fp
    de78:	mov	r1, r6
    de7a:	mov	r0, r5
    de7c:	blx	r7
    de7e:	adds	r0, #1
    de80:	beq.w	dca8 <_printf_float+0x98>
    de84:	mov.w	r9, #0
    de88:	add.w	sl, r4, #26
    de8c:	ldr	r3, [sp, #28]
    de8e:	negs	r3, r3
    de90:	cmp	r3, r9
    de92:	bgt.n	de98 <_printf_float+0x288>
    de94:	ldr	r3, [sp, #32]
    de96:	b.n	ddc4 <_printf_float+0x1b4>
    de98:	movs	r3, #1
    de9a:	mov	r2, sl
    de9c:	mov	r1, r6
    de9e:	mov	r0, r5
    dea0:	blx	r7
    dea2:	adds	r0, #1
    dea4:	beq.w	dca8 <_printf_float+0x98>
    dea8:	add.w	r9, r9, #1
    deac:	b.n	de8c <_printf_float+0x27c>
    deae:	nop
    deb0:	.word	0xffffffff
    deb4:	.word	0x7fefffff
    deb8:	.word	0x200013da
    debc:	.word	0x200011a6
    dec0:	.word	0x200013de
    dec4:	.word	0x200011a2
    dec8:	.word	0x20001187
    decc:	ldr	r2, [sp, #32]
    dece:	ldr	r3, [r4, #88]	; 0x58
    ded0:	cmp	r2, r3
    ded2:	it	ge
    ded4:	movge	r2, r3
    ded6:	cmp	r2, #0
    ded8:	mov	r9, r2
    deda:	bgt.n	df4e <_printf_float+0x33e>
    dedc:	movs	r3, #0
    dede:	str	r3, [sp, #20]
    dee0:	bic.w	r9, r9, r9, asr #31
    dee4:	add.w	r2, r4, #26
    dee8:	ldr	r3, [r4, #88]	; 0x58
    deea:	ldr	r1, [sp, #20]
    deec:	str	r3, [sp, #16]
    deee:	sub.w	r3, r3, r9
    def2:	cmp	r3, r1
    def4:	bgt.n	df5e <_printf_float+0x34e>
    def6:	ldrd	r2, r3, [sp, #28]
    defa:	cmp	r2, r3
    defc:	blt.n	df78 <_printf_float+0x368>
    defe:	ldr	r3, [r4, #0]
    df00:	lsls	r2, r3, #31
    df02:	bmi.n	df78 <_printf_float+0x368>
    df04:	ldrd	r3, r2, [sp, #28]
    df08:	sub.w	r9, r2, r3
    df0c:	ldr	r3, [sp, #16]
    df0e:	subs	r2, r2, r3
    df10:	cmp	r9, r2
    df12:	it	ge
    df14:	movge	r9, r2
    df16:	cmp.w	r9, #0
    df1a:	bgt.n	df88 <_printf_float+0x378>
    df1c:	mov.w	r8, #0
    df20:	bic.w	r9, r9, r9, asr #31
    df24:	add.w	sl, r4, #26
    df28:	ldrd	r2, r3, [sp, #28]
    df2c:	subs	r3, r3, r2
    df2e:	sub.w	r3, r3, r9
    df32:	cmp	r3, r8
    df34:	ble.w	de26 <_printf_float+0x216>
    df38:	movs	r3, #1
    df3a:	mov	r2, sl
    df3c:	mov	r1, r6
    df3e:	mov	r0, r5
    df40:	blx	r7
    df42:	adds	r0, #1
    df44:	beq.w	dca8 <_printf_float+0x98>
    df48:	add.w	r8, r8, #1
    df4c:	b.n	df28 <_printf_float+0x318>
    df4e:	mov	r3, r2
    df50:	mov	r1, r6
    df52:	mov	r2, r8
    df54:	mov	r0, r5
    df56:	blx	r7
    df58:	adds	r0, #1
    df5a:	bne.n	dedc <_printf_float+0x2cc>
    df5c:	b.n	dca8 <_printf_float+0x98>
    df5e:	movs	r3, #1
    df60:	mov	r1, r6
    df62:	mov	r0, r5
    df64:	str	r2, [sp, #16]
    df66:	blx	r7
    df68:	adds	r0, #1
    df6a:	beq.w	dca8 <_printf_float+0x98>
    df6e:	ldr	r3, [sp, #20]
    df70:	ldr	r2, [sp, #16]
    df72:	adds	r3, #1
    df74:	str	r3, [sp, #20]
    df76:	b.n	dee8 <_printf_float+0x2d8>
    df78:	mov	r3, sl
    df7a:	mov	r2, fp
    df7c:	mov	r1, r6
    df7e:	mov	r0, r5
    df80:	blx	r7
    df82:	adds	r0, #1
    df84:	bne.n	df04 <_printf_float+0x2f4>
    df86:	b.n	dca8 <_printf_float+0x98>
    df88:	ldr	r2, [sp, #16]
    df8a:	mov	r3, r9
    df8c:	add	r2, r8
    df8e:	mov	r1, r6
    df90:	mov	r0, r5
    df92:	blx	r7
    df94:	adds	r0, #1
    df96:	bne.n	df1c <_printf_float+0x30c>
    df98:	b.n	dca8 <_printf_float+0x98>
    df9a:	ldr	r2, [sp, #32]
    df9c:	cmp	r2, #1
    df9e:	bgt.n	dfa4 <_printf_float+0x394>
    dfa0:	lsls	r3, r3, #31
    dfa2:	bpl.n	e014 <_printf_float+0x404>
    dfa4:	movs	r3, #1
    dfa6:	mov	r2, r8
    dfa8:	mov	r1, r6
    dfaa:	mov	r0, r5
    dfac:	blx	r7
    dfae:	adds	r0, #1
    dfb0:	beq.w	dca8 <_printf_float+0x98>
    dfb4:	mov	r3, sl
    dfb6:	mov	r2, fp
    dfb8:	mov	r1, r6
    dfba:	mov	r0, r5
    dfbc:	blx	r7
    dfbe:	adds	r0, #1
    dfc0:	beq.w	dca8 <_printf_float+0x98>
    dfc4:	vldr	d7, [r4, #72]	; 0x48
    dfc8:	vcmp.f64	d7, #0.0
    dfcc:	vmrs	APSR_nzcv, fpscr
    dfd0:	ldr	r3, [sp, #32]
    dfd2:	beq.n	e00a <_printf_float+0x3fa>
    dfd4:	subs	r3, #1
    dfd6:	add.w	r2, r8, #1
    dfda:	mov	r1, r6
    dfdc:	mov	r0, r5
    dfde:	blx	r7
    dfe0:	adds	r0, #1
    dfe2:	bne.n	e002 <_printf_float+0x3f2>
    dfe4:	b.n	dca8 <_printf_float+0x98>
    dfe6:	movs	r3, #1
    dfe8:	mov	r2, r9
    dfea:	mov	r1, r6
    dfec:	mov	r0, r5
    dfee:	blx	r7
    dff0:	adds	r0, #1
    dff2:	beq.w	dca8 <_printf_float+0x98>
    dff6:	add.w	r8, r8, #1
    dffa:	ldr	r3, [sp, #32]
    dffc:	subs	r3, #1
    dffe:	cmp	r3, r8
    e000:	bgt.n	dfe6 <_printf_float+0x3d6>
    e002:	ldr	r3, [sp, #16]
    e004:	add.w	r2, r4, #80	; 0x50
    e008:	b.n	ddc6 <_printf_float+0x1b6>
    e00a:	mov.w	r8, #0
    e00e:	add.w	r9, r4, #26
    e012:	b.n	dffa <_printf_float+0x3ea>
    e014:	movs	r3, #1
    e016:	mov	r2, r8
    e018:	b.n	dfda <_printf_float+0x3ca>
    e01a:	movs	r3, #1
    e01c:	mov	r2, r9
    e01e:	mov	r1, r6
    e020:	mov	r0, r5
    e022:	blx	r7
    e024:	adds	r0, #1
    e026:	beq.w	dca8 <_printf_float+0x98>
    e02a:	add.w	r8, r8, #1
    e02e:	ldr	r3, [r4, #12]
    e030:	ldr	r1, [sp, #36]	; 0x24
    e032:	subs	r3, r3, r1
    e034:	cmp	r3, r8
    e036:	bgt.n	e01a <_printf_float+0x40a>
    e038:	b.n	de2e <_printf_float+0x21e>
    e03a:	mov.w	r8, #0
    e03e:	add.w	r9, r4, #25
    e042:	b.n	e02e <_printf_float+0x41e>

0000e044 <_printf_common>:
    e044:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e048:	mov	r6, r2
    e04a:	mov	r9, r3
    e04c:	ldr	r2, [r1, #8]
    e04e:	ldr	r3, [r1, #16]
    e050:	ldr.w	r8, [sp, #32]
    e054:	cmp	r3, r2
    e056:	it	lt
    e058:	movlt	r3, r2
    e05a:	str	r3, [r6, #0]
    e05c:	ldrb.w	r2, [r1, #67]	; 0x43
    e060:	mov	r7, r0
    e062:	mov	r4, r1
    e064:	cbz	r2, e06a <_printf_common+0x26>
    e066:	adds	r3, #1
    e068:	str	r3, [r6, #0]
    e06a:	ldr	r3, [r4, #0]
    e06c:	lsls	r1, r3, #26
    e06e:	ittt	mi
    e070:	ldrmi	r3, [r6, #0]
    e072:	addmi	r3, #2
    e074:	strmi	r3, [r6, #0]
    e076:	ldr	r5, [r4, #0]
    e078:	ands.w	r5, r5, #6
    e07c:	bne.n	e08c <_printf_common+0x48>
    e07e:	add.w	sl, r4, #25
    e082:	ldr	r3, [r4, #12]
    e084:	ldr	r2, [r6, #0]
    e086:	subs	r3, r3, r2
    e088:	cmp	r3, r5
    e08a:	bgt.n	e0da <_printf_common+0x96>
    e08c:	ldrb.w	r2, [r4, #67]	; 0x43
    e090:	subs	r3, r2, #0
    e092:	ldr	r2, [r4, #0]
    e094:	it	ne
    e096:	movne	r3, #1
    e098:	lsls	r2, r2, #26
    e09a:	bmi.n	e0f4 <_printf_common+0xb0>
    e09c:	add.w	r2, r4, #67	; 0x43
    e0a0:	mov	r1, r9
    e0a2:	mov	r0, r7
    e0a4:	blx	r8
    e0a6:	adds	r0, #1
    e0a8:	beq.n	e0e8 <_printf_common+0xa4>
    e0aa:	ldr	r3, [r4, #0]
    e0ac:	ldr	r2, [r4, #16]
    e0ae:	and.w	r3, r3, #6
    e0b2:	cmp	r3, #4
    e0b4:	ittt	eq
    e0b6:	ldreq	r5, [r4, #12]
    e0b8:	ldreq	r3, [r6, #0]
    e0ba:	subeq	r5, r5, r3
    e0bc:	ldr	r3, [r4, #8]
    e0be:	ite	eq
    e0c0:	biceq.w	r5, r5, r5, asr #31
    e0c4:	movne	r5, #0
    e0c6:	cmp	r3, r2
    e0c8:	itt	gt
    e0ca:	subgt	r3, r3, r2
    e0cc:	addgt	r5, r5, r3
    e0ce:	movs	r6, #0
    e0d0:	adds	r4, #26
    e0d2:	cmp	r5, r6
    e0d4:	bne.n	e10c <_printf_common+0xc8>
    e0d6:	movs	r0, #0
    e0d8:	b.n	e0ec <_printf_common+0xa8>
    e0da:	movs	r3, #1
    e0dc:	mov	r2, sl
    e0de:	mov	r1, r9
    e0e0:	mov	r0, r7
    e0e2:	blx	r8
    e0e4:	adds	r0, #1
    e0e6:	bne.n	e0f0 <_printf_common+0xac>
    e0e8:	mov.w	r0, #4294967295
    e0ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e0f0:	adds	r5, #1
    e0f2:	b.n	e082 <_printf_common+0x3e>
    e0f4:	adds	r1, r4, r3
    e0f6:	adds	r2, r3, #1
    e0f8:	movs	r0, #48	; 0x30
    e0fa:	strb.w	r0, [r1, #67]	; 0x43
    e0fe:	add	r2, r4
    e100:	ldrb.w	r1, [r4, #69]	; 0x45
    e104:	strb.w	r1, [r2, #67]	; 0x43
    e108:	adds	r3, #2
    e10a:	b.n	e09c <_printf_common+0x58>
    e10c:	movs	r3, #1
    e10e:	mov	r2, r4
    e110:	mov	r1, r9
    e112:	mov	r0, r7
    e114:	blx	r8
    e116:	adds	r0, #1
    e118:	beq.n	e0e8 <_printf_common+0xa4>
    e11a:	adds	r6, #1
    e11c:	b.n	e0d2 <_printf_common+0x8e>
	...

0000e120 <_printf_i>:
    e120:	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e124:	ldrb	r7, [r1, #24]
    e126:	ldr	r5, [sp, #48]	; 0x30
    e128:	cmp	r7, #120	; 0x78
    e12a:	mov	r9, r2
    e12c:	mov	r8, r0
    e12e:	mov	r4, r1
    e130:	mov	sl, r3
    e132:	add.w	r2, r1, #67	; 0x43
    e136:	bhi.n	e148 <_printf_i+0x28>
    e138:	cmp	r7, #98	; 0x62
    e13a:	bhi.n	e152 <_printf_i+0x32>
    e13c:	cmp	r7, #0
    e13e:	beq.w	e2ea <_printf_i+0x1ca>
    e142:	cmp	r7, #88	; 0x58
    e144:	beq.w	e2c8 <_printf_i+0x1a8>
    e148:	add.w	r5, r4, #66	; 0x42
    e14c:	strb.w	r7, [r4, #66]	; 0x42
    e150:	b.n	e1c8 <_printf_i+0xa8>
    e152:	sub.w	r3, r7, #99	; 0x63
    e156:	cmp	r3, #21
    e158:	bhi.n	e148 <_printf_i+0x28>
    e15a:	add	r1, pc, #4	; (adr r1, e160 <_printf_i+0x40>)
    e15c:	ldr.w	pc, [r1, r3, lsl #2]
    e160:	.word	0x0000e1b9
    e164:	.word	0x0000e1cd
    e168:	.word	0x0000e149
    e16c:	.word	0x0000e149
    e170:	.word	0x0000e149
    e174:	.word	0x0000e149
    e178:	.word	0x0000e1cd
    e17c:	.word	0x0000e149
    e180:	.word	0x0000e149
    e184:	.word	0x0000e149
    e188:	.word	0x0000e149
    e18c:	.word	0x0000e2d1
    e190:	.word	0x0000e1f9
    e194:	.word	0x0000e28b
    e198:	.word	0x0000e149
    e19c:	.word	0x0000e149
    e1a0:	.word	0x0000e2f3
    e1a4:	.word	0x0000e149
    e1a8:	.word	0x0000e1f9
    e1ac:	.word	0x0000e149
    e1b0:	.word	0x0000e149
    e1b4:	.word	0x0000e293
    e1b8:	ldr	r3, [r5, #0]
    e1ba:	adds	r2, r3, #4
    e1bc:	ldr	r3, [r3, #0]
    e1be:	str	r2, [r5, #0]
    e1c0:	add.w	r5, r4, #66	; 0x42
    e1c4:	strb.w	r3, [r4, #66]	; 0x42
    e1c8:	movs	r3, #1
    e1ca:	b.n	e30c <_printf_i+0x1ec>
    e1cc:	ldr	r0, [r4, #0]
    e1ce:	ldr	r3, [r5, #0]
    e1d0:	lsls	r7, r0, #24
    e1d2:	add.w	r1, r3, #4
    e1d6:	str	r1, [r5, #0]
    e1d8:	bpl.n	e1de <_printf_i+0xbe>
    e1da:	ldr	r6, [r3, #0]
    e1dc:	b.n	e1e6 <_printf_i+0xc6>
    e1de:	lsls	r6, r0, #25
    e1e0:	bpl.n	e1da <_printf_i+0xba>
    e1e2:	ldrsh.w	r6, [r3]
    e1e6:	cmp	r6, #0
    e1e8:	bge.n	e1f2 <_printf_i+0xd2>
    e1ea:	movs	r3, #45	; 0x2d
    e1ec:	negs	r6, r6
    e1ee:	strb.w	r3, [r4, #67]	; 0x43
    e1f2:	ldr	r0, [pc, #360]	; (e35c <_printf_i+0x23c>)
    e1f4:	movs	r3, #10
    e1f6:	b.n	e21e <_printf_i+0xfe>
    e1f8:	ldr	r3, [r5, #0]
    e1fa:	ldr	r0, [r4, #0]
    e1fc:	adds	r1, r3, #4
    e1fe:	str	r1, [r5, #0]
    e200:	lsls	r5, r0, #24
    e202:	bpl.n	e208 <_printf_i+0xe8>
    e204:	ldr	r6, [r3, #0]
    e206:	b.n	e20e <_printf_i+0xee>
    e208:	lsls	r1, r0, #25
    e20a:	bpl.n	e204 <_printf_i+0xe4>
    e20c:	ldrh	r6, [r3, #0]
    e20e:	ldr	r0, [pc, #332]	; (e35c <_printf_i+0x23c>)
    e210:	cmp	r7, #111	; 0x6f
    e212:	ite	eq
    e214:	moveq	r3, #8
    e216:	movne	r3, #10
    e218:	movs	r1, #0
    e21a:	strb.w	r1, [r4, #67]	; 0x43
    e21e:	ldr	r5, [r4, #4]
    e220:	str	r5, [r4, #8]
    e222:	cmp	r5, #0
    e224:	ittt	ge
    e226:	ldrge	r1, [r4, #0]
    e228:	bicge.w	r1, r1, #4
    e22c:	strge	r1, [r4, #0]
    e22e:	cbnz	r6, e234 <_printf_i+0x114>
    e230:	cmp	r5, #0
    e232:	beq.n	e2cc <_printf_i+0x1ac>
    e234:	mov	r5, r2
    e236:	udiv	r1, r6, r3
    e23a:	mls	r7, r3, r1, r6
    e23e:	ldrb	r7, [r0, r7]
    e240:	strb.w	r7, [r5, #-1]!
    e244:	mov	r7, r6
    e246:	cmp	r3, r7
    e248:	mov	r6, r1
    e24a:	bls.n	e236 <_printf_i+0x116>
    e24c:	cmp	r3, #8
    e24e:	bne.n	e268 <_printf_i+0x148>
    e250:	ldr	r3, [r4, #0]
    e252:	lsls	r6, r3, #31
    e254:	bpl.n	e268 <_printf_i+0x148>
    e256:	ldr	r3, [r4, #16]
    e258:	ldr	r1, [r4, #4]
    e25a:	cmp	r1, r3
    e25c:	ittt	le
    e25e:	movle	r3, #48	; 0x30
    e260:	strble.w	r3, [r5, #-1]
    e264:	addle.w	r5, r5, #4294967295
    e268:	subs	r2, r2, r5
    e26a:	str	r2, [r4, #16]
    e26c:	str.w	sl, [sp]
    e270:	mov	r3, r9
    e272:	add	r2, sp, #12
    e274:	mov	r1, r4
    e276:	mov	r0, r8
    e278:	bl	e044 <_printf_common>
    e27c:	adds	r0, #1
    e27e:	bne.n	e316 <_printf_i+0x1f6>
    e280:	mov.w	r0, #4294967295
    e284:	add	sp, #16
    e286:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e28a:	ldr	r3, [r4, #0]
    e28c:	orr.w	r3, r3, #32
    e290:	str	r3, [r4, #0]
    e292:	ldr	r0, [pc, #204]	; (e360 <_printf_i+0x240>)
    e294:	movs	r7, #120	; 0x78
    e296:	strb.w	r7, [r4, #69]	; 0x45
    e29a:	ldr	r3, [r4, #0]
    e29c:	ldr	r1, [r5, #0]
    e29e:	lsls	r7, r3, #24
    e2a0:	ldr.w	r6, [r1], #4
    e2a4:	bmi.n	e2ac <_printf_i+0x18c>
    e2a6:	lsls	r7, r3, #25
    e2a8:	it	mi
    e2aa:	uxthmi	r6, r6
    e2ac:	lsls	r7, r3, #31
    e2ae:	it	mi
    e2b0:	orrmi.w	r3, r3, #32
    e2b4:	str	r1, [r5, #0]
    e2b6:	it	mi
    e2b8:	strmi	r3, [r4, #0]
    e2ba:	cbnz	r6, e2c4 <_printf_i+0x1a4>
    e2bc:	ldr	r3, [r4, #0]
    e2be:	bic.w	r3, r3, #32
    e2c2:	str	r3, [r4, #0]
    e2c4:	movs	r3, #16
    e2c6:	b.n	e218 <_printf_i+0xf8>
    e2c8:	ldr	r0, [pc, #144]	; (e35c <_printf_i+0x23c>)
    e2ca:	b.n	e296 <_printf_i+0x176>
    e2cc:	mov	r5, r2
    e2ce:	b.n	e24c <_printf_i+0x12c>
    e2d0:	ldr	r3, [r5, #0]
    e2d2:	ldr	r6, [r4, #0]
    e2d4:	ldr	r1, [r4, #20]
    e2d6:	adds	r0, r3, #4
    e2d8:	str	r0, [r5, #0]
    e2da:	lsls	r5, r6, #24
    e2dc:	ldr	r3, [r3, #0]
    e2de:	bpl.n	e2e4 <_printf_i+0x1c4>
    e2e0:	str	r1, [r3, #0]
    e2e2:	b.n	e2ea <_printf_i+0x1ca>
    e2e4:	lsls	r0, r6, #25
    e2e6:	bpl.n	e2e0 <_printf_i+0x1c0>
    e2e8:	strh	r1, [r3, #0]
    e2ea:	movs	r3, #0
    e2ec:	str	r3, [r4, #16]
    e2ee:	mov	r5, r2
    e2f0:	b.n	e26c <_printf_i+0x14c>
    e2f2:	ldr	r3, [r5, #0]
    e2f4:	adds	r2, r3, #4
    e2f6:	str	r2, [r5, #0]
    e2f8:	ldr	r5, [r3, #0]
    e2fa:	ldr	r2, [r4, #4]
    e2fc:	movs	r1, #0
    e2fe:	mov	r0, r5
    e300:	bl	ed30 <memchr>
    e304:	cbz	r0, e30a <_printf_i+0x1ea>
    e306:	subs	r0, r0, r5
    e308:	str	r0, [r4, #4]
    e30a:	ldr	r3, [r4, #4]
    e30c:	str	r3, [r4, #16]
    e30e:	movs	r3, #0
    e310:	strb.w	r3, [r4, #67]	; 0x43
    e314:	b.n	e26c <_printf_i+0x14c>
    e316:	ldr	r3, [r4, #16]
    e318:	mov	r2, r5
    e31a:	mov	r1, r9
    e31c:	mov	r0, r8
    e31e:	blx	sl
    e320:	adds	r0, #1
    e322:	beq.n	e280 <_printf_i+0x160>
    e324:	ldr	r3, [r4, #0]
    e326:	lsls	r3, r3, #30
    e328:	bmi.n	e352 <_printf_i+0x232>
    e32a:	ldr	r0, [r4, #12]
    e32c:	ldr	r3, [sp, #12]
    e32e:	cmp	r0, r3
    e330:	it	lt
    e332:	movlt	r0, r3
    e334:	b.n	e284 <_printf_i+0x164>
    e336:	movs	r3, #1
    e338:	mov	r2, r6
    e33a:	mov	r1, r9
    e33c:	mov	r0, r8
    e33e:	blx	sl
    e340:	adds	r0, #1
    e342:	beq.n	e280 <_printf_i+0x160>
    e344:	adds	r5, #1
    e346:	ldr	r3, [r4, #12]
    e348:	ldr	r1, [sp, #12]
    e34a:	subs	r3, r3, r1
    e34c:	cmp	r3, r5
    e34e:	bgt.n	e336 <_printf_i+0x216>
    e350:	b.n	e32a <_printf_i+0x20a>
    e352:	movs	r5, #0
    e354:	add.w	r6, r4, #25
    e358:	b.n	e346 <_printf_i+0x226>
    e35a:	nop
    e35c:	.word	0x200013e2
    e360:	.word	0x200013f3

0000e364 <_scanf_float>:
    e364:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e368:	sub	sp, #28
    e36a:	mov	r7, r2
    e36c:	str	r3, [sp, #12]
    e36e:	ldr	r3, [r1, #8]
    e370:	subs	r2, r3, #1
    e372:	cmp.w	r2, #348	; 0x15c
    e376:	ittte	hi
    e378:	mvnhi.w	r5, #348	; 0x15c
    e37c:	addhi	r3, r3, r5
    e37e:	strhi	r3, [sp, #8]
    e380:	movls	r3, #0
    e382:	itte	hi
    e384:	movwhi	r3, #349	; 0x15d
    e388:	strhi	r3, [r1, #8]
    e38a:	strls	r3, [sp, #8]
    e38c:	ldr	r3, [r1, #0]
    e38e:	mov	fp, r1
    e390:	movs	r5, #0
    e392:	orr.w	r3, r3, #1920	; 0x780
    e396:	str.w	r3, [fp], #28
    e39a:	strd	r5, r5, [sp, #16]
    e39e:	mov	r8, r0
    e3a0:	mov	r4, r1
    e3a2:	mov	r6, fp
    e3a4:	mov	sl, r5
    e3a6:	mov	r9, r5
    e3a8:	str	r5, [sp, #4]
    e3aa:	ldr	r2, [r4, #8]
    e3ac:	cbz	r2, e3c4 <_scanf_float+0x60>
    e3ae:	ldr	r3, [r7, #0]
    e3b0:	ldrb	r3, [r3, #0]
    e3b2:	cmp	r3, #78	; 0x4e
    e3b4:	bhi.n	e480 <_scanf_float+0x11c>
    e3b6:	cmp	r3, #64	; 0x40
    e3b8:	bhi.n	e434 <_scanf_float+0xd0>
    e3ba:	sub.w	r1, r3, #43	; 0x2b
    e3be:	uxtb	r0, r1
    e3c0:	cmp	r0, #14
    e3c2:	bls.n	e43a <_scanf_float+0xd6>
    e3c4:	cmp.w	r9, #0
    e3c8:	beq.n	e3d2 <_scanf_float+0x6e>
    e3ca:	ldr	r3, [r4, #0]
    e3cc:	bic.w	r3, r3, #256	; 0x100
    e3d0:	str	r3, [r4, #0]
    e3d2:	add.w	sl, sl, #4294967295
    e3d6:	cmp.w	sl, #1
    e3da:	bhi.w	e604 <_scanf_float+0x2a0>
    e3de:	cmp	r6, fp
    e3e0:	bhi.w	e5ee <_scanf_float+0x28a>
    e3e4:	movs	r5, #1
    e3e6:	mov	r0, r5
    e3e8:	add	sp, #28
    e3ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e3ee:	sub.w	r2, r3, #97	; 0x61
    e3f2:	cmp	r2, #13
    e3f4:	bhi.n	e3c4 <_scanf_float+0x60>
    e3f6:	add	r1, pc, #4	; (adr r1, e3fc <_scanf_float+0x98>)
    e3f8:	ldr.w	pc, [r1, r2, lsl #2]
    e3fc:	.word	0x0000e53b
    e400:	.word	0x0000e3c5
    e404:	.word	0x0000e3c5
    e408:	.word	0x0000e3c5
    e40c:	.word	0x0000e59b
    e410:	.word	0x0000e573
    e414:	.word	0x0000e3c5
    e418:	.word	0x0000e3c5
    e41c:	.word	0x0000e549
    e420:	.word	0x0000e3c5
    e424:	.word	0x0000e3c5
    e428:	.word	0x0000e3c5
    e42c:	.word	0x0000e3c5
    e430:	.word	0x0000e501
    e434:	sub.w	r2, r3, #65	; 0x41
    e438:	b.n	e3f2 <_scanf_float+0x8e>
    e43a:	cmp	r1, #14
    e43c:	bhi.n	e3c4 <_scanf_float+0x60>
    e43e:	add	r0, pc, #4	; (adr r0, e444 <_scanf_float+0xe0>)
    e440:	ldr.w	pc, [r0, r1, lsl #2]
    e444:	.word	0x0000e4f3
    e448:	.word	0x0000e3c5
    e44c:	.word	0x0000e4f3
    e450:	.word	0x0000e587
    e454:	.word	0x0000e3c5
    e458:	.word	0x0000e4a1
    e45c:	.word	0x0000e4dd
    e460:	.word	0x0000e4dd
    e464:	.word	0x0000e4dd
    e468:	.word	0x0000e4dd
    e46c:	.word	0x0000e4dd
    e470:	.word	0x0000e4dd
    e474:	.word	0x0000e4dd
    e478:	.word	0x0000e4dd
    e47c:	.word	0x0000e4dd
    e480:	cmp	r3, #110	; 0x6e
    e482:	bhi.n	e498 <_scanf_float+0x134>
    e484:	cmp	r3, #96	; 0x60
    e486:	bhi.n	e3ee <_scanf_float+0x8a>
    e488:	cmp	r3, #84	; 0x54
    e48a:	beq.n	e57c <_scanf_float+0x218>
    e48c:	cmp	r3, #89	; 0x59
    e48e:	bne.n	e3c4 <_scanf_float+0x60>
    e490:	cmp	r5, #7
    e492:	bne.n	e3c4 <_scanf_float+0x60>
    e494:	movs	r5, #8
    e496:	b.n	e4ec <_scanf_float+0x188>
    e498:	cmp	r3, #116	; 0x74
    e49a:	beq.n	e57c <_scanf_float+0x218>
    e49c:	cmp	r3, #121	; 0x79
    e49e:	b.n	e48e <_scanf_float+0x12a>
    e4a0:	ldr	r1, [r4, #0]
    e4a2:	lsls	r0, r1, #23
    e4a4:	bpl.n	e4dc <_scanf_float+0x178>
    e4a6:	ldr	r3, [sp, #8]
    e4a8:	bic.w	r1, r1, #128	; 0x80
    e4ac:	str	r1, [r4, #0]
    e4ae:	add.w	r9, r9, #1
    e4b2:	cbz	r3, e4bc <_scanf_float+0x158>
    e4b4:	subs	r3, #1
    e4b6:	adds	r2, #1
    e4b8:	str	r3, [sp, #8]
    e4ba:	str	r2, [r4, #8]
    e4bc:	ldr	r3, [r4, #8]
    e4be:	subs	r3, #1
    e4c0:	str	r3, [r4, #8]
    e4c2:	ldr	r3, [r4, #16]
    e4c4:	adds	r3, #1
    e4c6:	str	r3, [r4, #16]
    e4c8:	ldr	r3, [r7, #4]
    e4ca:	subs	r3, #1
    e4cc:	cmp	r3, #0
    e4ce:	str	r3, [r7, #4]
    e4d0:	ble.w	e5dc <_scanf_float+0x278>
    e4d4:	ldr	r3, [r7, #0]
    e4d6:	adds	r3, #1
    e4d8:	str	r3, [r7, #0]
    e4da:	b.n	e3aa <_scanf_float+0x46>
    e4dc:	cmn.w	sl, r5
    e4e0:	bne.w	e3c4 <_scanf_float+0x60>
    e4e4:	ldr	r2, [r4, #0]
    e4e6:	bic.w	r2, r2, #384	; 0x180
    e4ea:	str	r2, [r4, #0]
    e4ec:	strb.w	r3, [r6], #1
    e4f0:	b.n	e4bc <_scanf_float+0x158>
    e4f2:	ldr	r2, [r4, #0]
    e4f4:	lsls	r0, r2, #24
    e4f6:	bpl.w	e3c4 <_scanf_float+0x60>
    e4fa:	bic.w	r2, r2, #128	; 0x80
    e4fe:	b.n	e4ea <_scanf_float+0x186>
    e500:	cmp.w	sl, #0
    e504:	bne.n	e524 <_scanf_float+0x1c0>
    e506:	cmp.w	r9, #0
    e50a:	bne.n	e52a <_scanf_float+0x1c6>
    e50c:	ldr	r2, [r4, #0]
    e50e:	and.w	r1, r2, #1792	; 0x700
    e512:	cmp.w	r1, #1792	; 0x700
    e516:	bne.n	e52a <_scanf_float+0x1c6>
    e518:	bic.w	r2, r2, #1920	; 0x780
    e51c:	str	r2, [r4, #0]
    e51e:	mov.w	sl, #1
    e522:	b.n	e4ec <_scanf_float+0x188>
    e524:	cmp.w	sl, #2
    e528:	beq.n	e5d6 <_scanf_float+0x272>
    e52a:	cmp	r5, #1
    e52c:	beq.n	e534 <_scanf_float+0x1d0>
    e52e:	cmp	r5, #4
    e530:	bne.w	e3c4 <_scanf_float+0x60>
    e534:	adds	r5, #1
    e536:	uxtb	r5, r5
    e538:	b.n	e4ec <_scanf_float+0x188>
    e53a:	cmp.w	sl, #1
    e53e:	bne.w	e3c4 <_scanf_float+0x60>
    e542:	mov.w	sl, #2
    e546:	b.n	e4ec <_scanf_float+0x188>
    e548:	cbnz	r5, e56a <_scanf_float+0x206>
    e54a:	cmp.w	r9, #0
    e54e:	bne.w	e3ca <_scanf_float+0x66>
    e552:	ldr	r2, [r4, #0]
    e554:	and.w	r1, r2, #1792	; 0x700
    e558:	cmp.w	r1, #1792	; 0x700
    e55c:	bne.w	e3d2 <_scanf_float+0x6e>
    e560:	bic.w	r2, r2, #1920	; 0x780
    e564:	str	r2, [r4, #0]
    e566:	movs	r5, #1
    e568:	b.n	e4ec <_scanf_float+0x188>
    e56a:	cmp	r5, #3
    e56c:	beq.n	e534 <_scanf_float+0x1d0>
    e56e:	cmp	r5, #5
    e570:	b.n	e530 <_scanf_float+0x1cc>
    e572:	cmp	r5, #2
    e574:	bne.w	e3c4 <_scanf_float+0x60>
    e578:	movs	r5, #3
    e57a:	b.n	e4ec <_scanf_float+0x188>
    e57c:	cmp	r5, #6
    e57e:	bne.w	e3c4 <_scanf_float+0x60>
    e582:	movs	r5, #7
    e584:	b.n	e4ec <_scanf_float+0x188>
    e586:	ldr	r2, [r4, #0]
    e588:	lsls	r1, r2, #22
    e58a:	bpl.w	e3c4 <_scanf_float+0x60>
    e58e:	bic.w	r2, r2, #640	; 0x280
    e592:	str	r2, [r4, #0]
    e594:	str.w	r9, [sp, #4]
    e598:	b.n	e4ec <_scanf_float+0x188>
    e59a:	ldr	r2, [r4, #0]
    e59c:	and.w	r1, r2, #1280	; 0x500
    e5a0:	cmp.w	r1, #1024	; 0x400
    e5a4:	beq.n	e5b4 <_scanf_float+0x250>
    e5a6:	lsls	r0, r2, #21
    e5a8:	bpl.w	e3c4 <_scanf_float+0x60>
    e5ac:	cmp.w	r9, #0
    e5b0:	beq.w	e3d2 <_scanf_float+0x6e>
    e5b4:	lsls	r1, r2, #22
    e5b6:	it	pl
    e5b8:	ldrpl	r1, [sp, #4]
    e5ba:	bic.w	r2, r2, #1920	; 0x780
    e5be:	it	pl
    e5c0:	subpl.w	r1, r9, r1
    e5c4:	orr.w	r2, r2, #384	; 0x180
    e5c8:	it	pl
    e5ca:	strdpl	r1, r6, [sp, #16]
    e5ce:	str	r2, [r4, #0]
    e5d0:	mov.w	r9, #0
    e5d4:	b.n	e4ec <_scanf_float+0x188>
    e5d6:	mov.w	sl, #3
    e5da:	b.n	e4ec <_scanf_float+0x188>
    e5dc:	ldr.w	r3, [r4, #384]	; 0x180
    e5e0:	mov	r1, r7
    e5e2:	mov	r0, r8
    e5e4:	blx	r3
    e5e6:	cmp	r0, #0
    e5e8:	beq.w	e3aa <_scanf_float+0x46>
    e5ec:	b.n	e3c4 <_scanf_float+0x60>
    e5ee:	ldr.w	r3, [r4, #380]	; 0x17c
    e5f2:	ldrb.w	r1, [r6, #-1]!
    e5f6:	mov	r2, r7
    e5f8:	mov	r0, r8
    e5fa:	blx	r3
    e5fc:	ldr	r3, [r4, #16]
    e5fe:	subs	r3, #1
    e600:	str	r3, [r4, #16]
    e602:	b.n	e3de <_scanf_float+0x7a>
    e604:	subs	r3, r5, #1
    e606:	cmp	r3, #6
    e608:	bhi.n	e656 <_scanf_float+0x2f2>
    e60a:	cmp	r5, #2
    e60c:	bhi.n	e67c <_scanf_float+0x318>
    e60e:	cmp	r6, fp
    e610:	bls.w	e3e4 <_scanf_float+0x80>
    e614:	ldr.w	r3, [r4, #380]	; 0x17c
    e618:	ldrb.w	r1, [r6, #-1]!
    e61c:	mov	r2, r7
    e61e:	mov	r0, r8
    e620:	blx	r3
    e622:	ldr	r3, [r4, #16]
    e624:	subs	r3, #1
    e626:	str	r3, [r4, #16]
    e628:	b.n	e60e <_scanf_float+0x2aa>
    e62a:	ldr	r0, [sp, #8]
    e62c:	ldr.w	r3, [r4, #380]	; 0x17c
    e630:	ldrb.w	r1, [r0, #-1]!
    e634:	str	r0, [sp, #8]
    e636:	mov	r2, r7
    e638:	mov	r0, r8
    e63a:	blx	r3
    e63c:	ldr	r3, [r4, #16]
    e63e:	subs	r3, #1
    e640:	str	r3, [r4, #16]
    e642:	add.w	sl, sl, #4294967295
    e646:	uxtb.w	sl, sl
    e64a:	cmp.w	sl, #2
    e64e:	bne.n	e62a <_scanf_float+0x2c6>
    e650:	subs	r5, #3
    e652:	uxtb	r5, r5
    e654:	subs	r6, r6, r5
    e656:	ldr	r3, [r4, #0]
    e658:	lsls	r2, r3, #23
    e65a:	bpl.n	e6bc <_scanf_float+0x358>
    e65c:	lsls	r3, r3, #21
    e65e:	bpl.n	e682 <_scanf_float+0x31e>
    e660:	cmp	r6, fp
    e662:	bls.w	e3e4 <_scanf_float+0x80>
    e666:	ldr.w	r3, [r4, #380]	; 0x17c
    e66a:	ldrb.w	r1, [r6, #-1]!
    e66e:	mov	r2, r7
    e670:	mov	r0, r8
    e672:	blx	r3
    e674:	ldr	r3, [r4, #16]
    e676:	subs	r3, #1
    e678:	str	r3, [r4, #16]
    e67a:	b.n	e660 <_scanf_float+0x2fc>
    e67c:	mov	sl, r5
    e67e:	str	r6, [sp, #8]
    e680:	b.n	e642 <_scanf_float+0x2de>
    e682:	ldrb.w	r1, [r6, #-1]
    e686:	ldr	r3, [r4, #16]
    e688:	cmp	r1, #101	; 0x65
    e68a:	add.w	r3, r3, #4294967295
    e68e:	add.w	r5, r6, #4294967295
    e692:	str	r3, [r4, #16]
    e694:	beq.n	e6b0 <_scanf_float+0x34c>
    e696:	cmp	r1, #69	; 0x45
    e698:	beq.n	e6b0 <_scanf_float+0x34c>
    e69a:	ldr.w	r3, [r4, #380]	; 0x17c
    e69e:	mov	r2, r7
    e6a0:	mov	r0, r8
    e6a2:	blx	r3
    e6a4:	ldr	r3, [r4, #16]
    e6a6:	ldrb.w	r1, [r6, #-2]
    e6aa:	subs	r3, #1
    e6ac:	subs	r5, r6, #2
    e6ae:	str	r3, [r4, #16]
    e6b0:	ldr.w	r3, [r4, #380]	; 0x17c
    e6b4:	mov	r2, r7
    e6b6:	mov	r0, r8
    e6b8:	blx	r3
    e6ba:	mov	r6, r5
    e6bc:	ldr	r5, [r4, #0]
    e6be:	ands.w	r5, r5, #16
    e6c2:	bne.n	e760 <_scanf_float+0x3fc>
    e6c4:	strb	r5, [r6, #0]
    e6c6:	ldr	r3, [r4, #0]
    e6c8:	and.w	r3, r3, #1536	; 0x600
    e6cc:	cmp.w	r3, #1024	; 0x400
    e6d0:	bne.n	e708 <_scanf_float+0x3a4>
    e6d2:	ldr	r3, [sp, #4]
    e6d4:	cmp	r3, r9
    e6d6:	sub.w	r2, r3, r9
    e6da:	bne.n	e722 <_scanf_float+0x3be>
    e6dc:	movs	r2, #0
    e6de:	mov	r1, fp
    e6e0:	mov	r0, r8
    e6e2:	bl	d9ac <_strtod_r>
    e6e6:	ldr	r3, [sp, #12]
    e6e8:	ldr	r1, [r4, #0]
    e6ea:	ldr	r3, [r3, #0]
    e6ec:	tst.w	r1, #2
    e6f0:	add.w	r2, r3, #4
    e6f4:	beq.n	e738 <_scanf_float+0x3d4>
    e6f6:	ldr	r1, [sp, #12]
    e6f8:	str	r2, [r1, #0]
    e6fa:	ldr	r3, [r3, #0]
    e6fc:	vstr	d0, [r3]
    e700:	ldr	r3, [r4, #12]
    e702:	adds	r3, #1
    e704:	str	r3, [r4, #12]
    e706:	b.n	e3e6 <_scanf_float+0x82>
    e708:	ldr	r3, [sp, #16]
    e70a:	cmp	r3, #0
    e70c:	beq.n	e6dc <_scanf_float+0x378>
    e70e:	ldr	r1, [sp, #20]
    e710:	movs	r3, #10
    e712:	mov	r2, r5
    e714:	adds	r1, #1
    e716:	mov	r0, r8
    e718:	bl	dabc <_strtol_r>
    e71c:	ldr	r3, [sp, #16]
    e71e:	ldr	r6, [sp, #20]
    e720:	subs	r2, r0, r3
    e722:	addw	r3, r4, #367	; 0x16f
    e726:	cmp	r6, r3
    e728:	it	cs
    e72a:	addcs.w	r6, r4, #366	; 0x16e
    e72e:	ldr	r1, [pc, #52]	; (e764 <_scanf_float+0x400>)
    e730:	mov	r0, r6
    e732:	bl	e934 <siprintf>
    e736:	b.n	e6dc <_scanf_float+0x378>
    e738:	tst.w	r1, #4
    e73c:	ldr	r1, [sp, #12]
    e73e:	str	r2, [r1, #0]
    e740:	bne.n	e6fa <_scanf_float+0x396>
    e742:	vcmp.f64	d0, d0
    e746:	vmrs	APSR_nzcv, fpscr
    e74a:	ldr	r6, [r3, #0]
    e74c:	bvc.n	e75a <_scanf_float+0x3f6>
    e74e:	ldr	r0, [pc, #24]	; (e768 <_scanf_float+0x404>)
    e750:	bl	edf0 <nanf>
    e754:	vstr	s0, [r6]
    e758:	b.n	e700 <_scanf_float+0x39c>
    e75a:	vcvt.f32.f64	s0, d0
    e75e:	b.n	e754 <_scanf_float+0x3f0>
    e760:	movs	r5, #0
    e762:	b.n	e3e6 <_scanf_float+0x82>
    e764:	.word	0x20001404
    e768:	.word	0x20000dbc

0000e76c <std>:
    e76c:	movs	r3, #0
    e76e:	push	{r4, lr}
    e770:	mov	r4, r0
    e772:	strd	r3, r3, [r0]
    e776:	strd	r3, r3, [r0, #16]
    e77a:	str	r3, [r0, #8]
    e77c:	strh	r1, [r0, #12]
    e77e:	str	r3, [r0, #100]	; 0x64
    e780:	strh	r2, [r0, #14]
    e782:	str	r3, [r0, #24]
    e784:	mov	r1, r3
    e786:	movs	r2, #8
    e788:	adds	r0, #92	; 0x5c
    e78a:	bl	a210 <memset>
    e78e:	ldr	r3, [pc, #20]	; (e7a4 <std+0x38>)
    e790:	str	r3, [r4, #36]	; 0x24
    e792:	ldr	r3, [pc, #20]	; (e7a8 <std+0x3c>)
    e794:	str	r3, [r4, #40]	; 0x28
    e796:	ldr	r3, [pc, #20]	; (e7ac <std+0x40>)
    e798:	str	r3, [r4, #44]	; 0x2c
    e79a:	ldr	r3, [pc, #20]	; (e7b0 <std+0x44>)
    e79c:	str	r4, [r4, #32]
    e79e:	str	r3, [r4, #48]	; 0x30
    e7a0:	pop	{r4, pc}
    e7a2:	nop
    e7a4:	.word	0x0000e9cd
    e7a8:	.word	0x0000e9f3
    e7ac:	.word	0x0000ea2b
    e7b0:	.word	0x0000ea4f

0000e7b4 <stdio_exit_handler>:
    e7b4:	ldr	r2, [pc, #8]	; (e7c0 <stdio_exit_handler+0xc>)
    e7b6:	ldr	r1, [pc, #12]	; (e7c4 <stdio_exit_handler+0x10>)
    e7b8:	ldr	r0, [pc, #12]	; (e7c8 <stdio_exit_handler+0x14>)
    e7ba:	b.w	e890 <_fwalk_sglue>
    e7be:	nop
    e7c0:	.word	0x20002278
    e7c4:	.word	0x00011565
    e7c8:	.word	0x20002284

0000e7cc <cleanup_stdio>:
    e7cc:	ldr	r1, [r0, #4]
    e7ce:	ldr	r3, [pc, #48]	; (e800 <cleanup_stdio+0x34>)
    e7d0:	cmp	r1, r3
    e7d2:	push	{r4, lr}
    e7d4:	mov	r4, r0
    e7d6:	beq.n	e7dc <cleanup_stdio+0x10>
    e7d8:	bl	11564 <_fflush_r>
    e7dc:	ldr	r1, [r4, #8]
    e7de:	ldr	r3, [pc, #36]	; (e804 <cleanup_stdio+0x38>)
    e7e0:	cmp	r1, r3
    e7e2:	beq.n	e7ea <cleanup_stdio+0x1e>
    e7e4:	mov	r0, r4
    e7e6:	bl	11564 <_fflush_r>
    e7ea:	ldr	r1, [r4, #12]
    e7ec:	ldr	r3, [pc, #24]	; (e808 <cleanup_stdio+0x3c>)
    e7ee:	cmp	r1, r3
    e7f0:	beq.n	e7fc <cleanup_stdio+0x30>
    e7f2:	mov	r0, r4
    e7f4:	ldmia.w	sp!, {r4, lr}
    e7f8:	b.w	11564 <_fflush_r>
    e7fc:	pop	{r4, pc}
    e7fe:	nop
    e800:	.word	0x2001485c
    e804:	.word	0x200148c4
    e808:	.word	0x2001492c

0000e80c <global_stdio_init.part.0>:
    e80c:	push	{r4, lr}
    e80e:	ldr	r3, [pc, #44]	; (e83c <global_stdio_init.part.0+0x30>)
    e810:	ldr	r4, [pc, #44]	; (e840 <global_stdio_init.part.0+0x34>)
    e812:	ldr	r2, [pc, #48]	; (e844 <global_stdio_init.part.0+0x38>)
    e814:	str	r2, [r3, #0]
    e816:	mov	r0, r4
    e818:	movs	r2, #0
    e81a:	movs	r1, #4
    e81c:	bl	e76c <std>
    e820:	add.w	r0, r4, #104	; 0x68
    e824:	movs	r2, #1
    e826:	movs	r1, #9
    e828:	bl	e76c <std>
    e82c:	add.w	r0, r4, #208	; 0xd0
    e830:	movs	r2, #2
    e832:	ldmia.w	sp!, {r4, lr}
    e836:	movs	r1, #18
    e838:	b.w	e76c <std>
    e83c:	.word	0x20014994
    e840:	.word	0x2001485c
    e844:	.word	0x0000e7b5

0000e848 <__sfp_lock_acquire>:
    e848:	ldr	r0, [pc, #4]	; (e850 <__sfp_lock_acquire+0x8>)
    e84a:	b.w	ed10 <__retarget_lock_acquire_recursive>
    e84e:	nop
    e850:	.word	0x200155b3

0000e854 <__sfp_lock_release>:
    e854:	ldr	r0, [pc, #4]	; (e85c <__sfp_lock_release+0x8>)
    e856:	b.w	ed12 <__retarget_lock_release_recursive>
    e85a:	nop
    e85c:	.word	0x200155b3

0000e860 <__sinit>:
    e860:	push	{r4, lr}
    e862:	mov	r4, r0
    e864:	bl	e848 <__sfp_lock_acquire>
    e868:	ldr	r3, [r4, #32]
    e86a:	cbz	r3, e874 <__sinit+0x14>
    e86c:	ldmia.w	sp!, {r4, lr}
    e870:	b.w	e854 <__sfp_lock_release>
    e874:	ldr	r3, [pc, #16]	; (e888 <__sinit+0x28>)
    e876:	str	r3, [r4, #32]
    e878:	ldr	r3, [pc, #16]	; (e88c <__sinit+0x2c>)
    e87a:	ldr	r3, [r3, #0]
    e87c:	cmp	r3, #0
    e87e:	bne.n	e86c <__sinit+0xc>
    e880:	bl	e80c <global_stdio_init.part.0>
    e884:	b.n	e86c <__sinit+0xc>
    e886:	nop
    e888:	.word	0x0000e7cd
    e88c:	.word	0x20014994

0000e890 <_fwalk_sglue>:
    e890:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e894:	mov	r7, r0
    e896:	mov	r8, r1
    e898:	mov	r4, r2
    e89a:	movs	r6, #0
    e89c:	ldrd	r9, r5, [r4, #4]
    e8a0:	subs.w	r9, r9, #1
    e8a4:	bpl.n	e8b2 <_fwalk_sglue+0x22>
    e8a6:	ldr	r4, [r4, #0]
    e8a8:	cmp	r4, #0
    e8aa:	bne.n	e89c <_fwalk_sglue+0xc>
    e8ac:	mov	r0, r6
    e8ae:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e8b2:	ldrh	r3, [r5, #12]
    e8b4:	cmp	r3, #1
    e8b6:	bls.n	e8c8 <_fwalk_sglue+0x38>
    e8b8:	ldrsh.w	r3, [r5, #14]
    e8bc:	adds	r3, #1
    e8be:	beq.n	e8c8 <_fwalk_sglue+0x38>
    e8c0:	mov	r1, r5
    e8c2:	mov	r0, r7
    e8c4:	blx	r8
    e8c6:	orrs	r6, r0
    e8c8:	adds	r5, #104	; 0x68
    e8ca:	b.n	e8a0 <_fwalk_sglue+0x10>

0000e8cc <sniprintf>:
    e8cc:	push	{r2, r3}
    e8ce:	push	{r4, r5, lr}
    e8d0:	ldr	r3, [pc, #92]	; (e930 <sniprintf+0x64>)
    e8d2:	subs	r4, r1, #0
    e8d4:	ldr	r5, [r3, #0]
    e8d6:	sub	sp, #116	; 0x74
    e8d8:	bge.n	e8ec <sniprintf+0x20>
    e8da:	movs	r3, #139	; 0x8b
    e8dc:	str	r3, [r5, #0]
    e8de:	mov.w	r0, #4294967295
    e8e2:	add	sp, #116	; 0x74
    e8e4:	ldmia.w	sp!, {r4, r5, lr}
    e8e8:	add	sp, #8
    e8ea:	bx	lr
    e8ec:	mov.w	r3, #520	; 0x208
    e8f0:	strh.w	r3, [sp, #20]
    e8f4:	ite	ne
    e8f6:	addne.w	r3, r4, #4294967295
    e8fa:	moveq	r3, r4
    e8fc:	str	r3, [sp, #16]
    e8fe:	str	r3, [sp, #28]
    e900:	movw	r3, #65535	; 0xffff
    e904:	str	r0, [sp, #8]
    e906:	str	r0, [sp, #24]
    e908:	strh.w	r3, [sp, #22]
    e90c:	ldr	r2, [sp, #128]	; 0x80
    e90e:	add	r3, sp, #132	; 0x84
    e910:	add	r1, sp, #8
    e912:	mov	r0, r5
    e914:	str	r3, [sp, #4]
    e916:	bl	10c1c <_svfiprintf_r>
    e91a:	adds	r3, r0, #1
    e91c:	itt	lt
    e91e:	movlt	r3, #139	; 0x8b
    e920:	strlt	r3, [r5, #0]
    e922:	cmp	r4, #0
    e924:	beq.n	e8e2 <sniprintf+0x16>
    e926:	ldr	r3, [sp, #8]
    e928:	movs	r2, #0
    e92a:	strb	r2, [r3, #0]
    e92c:	b.n	e8e2 <sniprintf+0x16>
    e92e:	nop
    e930:	.word	0x200022d0

0000e934 <siprintf>:
    e934:	push	{r1, r2, r3}
    e936:	push	{lr}
    e938:	sub	sp, #112	; 0x70
    e93a:	add	r3, sp, #116	; 0x74
    e93c:	str	r0, [sp, #8]
    e93e:	str	r0, [sp, #24]
    e940:	mvn.w	r1, #2147483648	; 0x80000000
    e944:	ldr	r0, [pc, #36]	; (e96c <siprintf+0x38>)
    e946:	str	r1, [sp, #28]
    e948:	str	r1, [sp, #16]
    e94a:	ldr	r1, [pc, #36]	; (e970 <siprintf+0x3c>)
    e94c:	ldr.w	r2, [r3], #4
    e950:	str	r1, [sp, #20]
    e952:	ldr	r0, [r0, #0]
    e954:	str	r3, [sp, #4]
    e956:	add	r1, sp, #8
    e958:	bl	10c1c <_svfiprintf_r>
    e95c:	ldr	r3, [sp, #8]
    e95e:	movs	r2, #0
    e960:	strb	r2, [r3, #0]
    e962:	add	sp, #112	; 0x70
    e964:	ldr.w	lr, [sp], #4
    e968:	add	sp, #12
    e96a:	bx	lr
    e96c:	.word	0x200022d0
    e970:	.word	0xffff0208

0000e974 <siscanf>:
    e974:	push	{r1, r2, r3}
    e976:	push	{r4, lr}
    e978:	sub	sp, #124	; 0x7c
    e97a:	add	r4, sp, #132	; 0x84
    e97c:	mov.w	r1, #516	; 0x204
    e980:	ldr.w	r2, [r4], #4
    e984:	str	r2, [sp, #4]
    e986:	strh.w	r1, [sp, #28]
    e98a:	str	r0, [sp, #16]
    e98c:	str	r0, [sp, #32]
    e98e:	bl	edd0 <strlen>
    e992:	ldr	r3, [pc, #48]	; (e9c4 <siscanf+0x50>)
    e994:	str	r0, [sp, #20]
    e996:	str	r0, [sp, #36]	; 0x24
    e998:	str	r3, [sp, #52]	; 0x34
    e99a:	ldr	r0, [pc, #44]	; (e9c8 <siscanf+0x54>)
    e99c:	ldr	r2, [sp, #4]
    e99e:	ldr	r0, [r0, #0]
    e9a0:	str	r4, [sp, #12]
    e9a2:	movs	r3, #0
    e9a4:	str	r3, [sp, #68]	; 0x44
    e9a6:	str	r3, [sp, #88]	; 0x58
    e9a8:	movw	r3, #65535	; 0xffff
    e9ac:	strh.w	r3, [sp, #30]
    e9b0:	add	r1, sp, #16
    e9b2:	mov	r3, r4
    e9b4:	bl	10ecc <__ssvfiscanf_r>
    e9b8:	add	sp, #124	; 0x7c
    e9ba:	ldmia.w	sp!, {r4, lr}
    e9be:	add	sp, #12
    e9c0:	bx	lr
    e9c2:	nop
    e9c4:	.word	0x0000e9ef
    e9c8:	.word	0x200022d0

0000e9cc <__sread>:
    e9cc:	push	{r4, lr}
    e9ce:	mov	r4, r1
    e9d0:	ldrsh.w	r1, [r1, #14]
    e9d4:	bl	ec54 <_read_r>
    e9d8:	cmp	r0, #0
    e9da:	itete	ge
    e9dc:	ldrge	r3, [r4, #84]	; 0x54
    e9de:	ldrhlt	r3, [r4, #12]
    e9e0:	addge	r3, r3, r0
    e9e2:	biclt.w	r3, r3, #4096	; 0x1000
    e9e6:	ite	ge
    e9e8:	strge	r3, [r4, #84]	; 0x54
    e9ea:	strhlt	r3, [r4, #12]
    e9ec:	pop	{r4, pc}

0000e9ee <__seofread>:
    e9ee:	movs	r0, #0
    e9f0:	bx	lr

0000e9f2 <__swrite>:
    e9f2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9f6:	mov	r7, r3
    e9f8:	ldrh	r3, [r1, #12]
    e9fa:	lsls	r3, r3, #23
    e9fc:	mov	r5, r0
    e9fe:	mov	r4, r1
    ea00:	mov	r6, r2
    ea02:	bpl.n	ea10 <__swrite+0x1e>
    ea04:	ldrsh.w	r1, [r1, #14]
    ea08:	movs	r3, #2
    ea0a:	movs	r2, #0
    ea0c:	bl	ec30 <_lseek_r>
    ea10:	ldrh	r3, [r4, #12]
    ea12:	ldrsh.w	r1, [r4, #14]
    ea16:	bic.w	r3, r3, #4096	; 0x1000
    ea1a:	strh	r3, [r4, #12]
    ea1c:	mov	r2, r6
    ea1e:	mov	r3, r7
    ea20:	mov	r0, r5
    ea22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea26:	b.w	ec98 <_write_r>

0000ea2a <__sseek>:
    ea2a:	push	{r4, lr}
    ea2c:	mov	r4, r1
    ea2e:	ldrsh.w	r1, [r1, #14]
    ea32:	bl	ec30 <_lseek_r>
    ea36:	adds	r3, r0, #1
    ea38:	ldrh	r3, [r4, #12]
    ea3a:	itete	ne
    ea3c:	strne	r0, [r4, #84]	; 0x54
    ea3e:	biceq.w	r3, r3, #4096	; 0x1000
    ea42:	orrne.w	r3, r3, #4096	; 0x1000
    ea46:	strheq	r3, [r4, #12]
    ea48:	it	ne
    ea4a:	strhne	r3, [r4, #12]
    ea4c:	pop	{r4, pc}

0000ea4e <__sclose>:
    ea4e:	ldrsh.w	r1, [r1, #14]
    ea52:	b.w	ec10 <_close_r>

0000ea56 <_vdiprintf_r>:
    ea56:	push	{r4, r5, r6, r7, lr}
    ea58:	sub.w	sp, sp, #532	; 0x214
    ea5c:	mov	r6, r1
    ea5e:	add	r7, sp, #16
    ea60:	mov.w	r1, #512	; 0x200
    ea64:	str	r1, [sp, #12]
    ea66:	str	r3, [sp, #0]
    ea68:	mov	r1, r7
    ea6a:	mov	r3, r2
    ea6c:	add	r2, sp, #12
    ea6e:	mov	r5, r0
    ea70:	bl	eab4 <_vasniprintf_r>
    ea74:	mov	r4, r0
    ea76:	cbz	r0, ea9a <_vdiprintf_r+0x44>
    ea78:	mov	r2, r0
    ea7a:	ldr	r3, [sp, #12]
    ea7c:	mov	r1, r6
    ea7e:	mov	r0, r5
    ea80:	bl	ec98 <_write_r>
    ea84:	cmp	r4, r7
    ea86:	str	r0, [sp, #12]
    ea88:	beq.n	ea92 <_vdiprintf_r+0x3c>
    ea8a:	mov	r1, r4
    ea8c:	mov	r0, r5
    ea8e:	bl	f9e8 <_free_r>
    ea92:	ldr	r0, [sp, #12]
    ea94:	add.w	sp, sp, #532	; 0x214
    ea98:	pop	{r4, r5, r6, r7, pc}
    ea9a:	mov.w	r0, #4294967295
    ea9e:	b.n	ea94 <_vdiprintf_r+0x3e>

0000eaa0 <vdiprintf>:
    eaa0:	mov	r3, r2
    eaa2:	mov	r2, r1
    eaa4:	mov	r1, r0
    eaa6:	ldr	r0, [pc, #8]	; (eab0 <vdiprintf+0x10>)
    eaa8:	ldr	r0, [r0, #0]
    eaaa:	b.w	ea56 <_vdiprintf_r>
    eaae:	nop
    eab0:	.word	0x200022d0

0000eab4 <_vasniprintf_r>:
    eab4:	push	{r4, r5, lr}
    eab6:	mov	r5, r2
    eab8:	sub	sp, #108	; 0x6c
    eaba:	ldr	r4, [r5, #0]
    eabc:	mov	r2, r3
    eabe:	cbz	r1, eae4 <_vasniprintf_r+0x30>
    eac0:	cmp	r4, #0
    eac2:	itee	ne
    eac4:	movne.w	r3, #1544	; 0x608
    eac8:	moveq.w	r3, #648	; 0x288
    eacc:	moveq	r1, #0
    eace:	cmp	r4, #0
    ead0:	strh.w	r3, [sp, #12]
    ead4:	str	r1, [sp, #0]
    ead6:	str	r1, [sp, #16]
    ead8:	bge.n	eaec <_vasniprintf_r+0x38>
    eada:	movs	r3, #139	; 0x8b
    eadc:	str	r3, [r0, #0]
    eade:	movs	r0, #0
    eae0:	add	sp, #108	; 0x6c
    eae2:	pop	{r4, r5, pc}
    eae4:	mov.w	r3, #648	; 0x288
    eae8:	mov	r4, r1
    eaea:	b.n	eace <_vasniprintf_r+0x1a>
    eaec:	movw	r3, #65535	; 0xffff
    eaf0:	strh.w	r3, [sp, #14]
    eaf4:	mov	r1, sp
    eaf6:	ldr	r3, [sp, #120]	; 0x78
    eaf8:	str	r4, [sp, #8]
    eafa:	str	r4, [sp, #20]
    eafc:	bl	10c1c <_svfiprintf_r>
    eb00:	subs	r3, r0, #0
    eb02:	itt	ge
    eb04:	strge	r3, [r5, #0]
    eb06:	ldrge	r3, [sp, #0]
    eb08:	mov.w	r0, #0
    eb0c:	itt	ge
    eb0e:	strbge	r0, [r3, #0]
    eb10:	ldrge	r0, [sp, #16]
    eb12:	b.n	eae0 <_vasniprintf_r+0x2c>

0000eb14 <memcmp>:
    eb14:	push	{r4, lr}
    eb16:	subs	r1, #1
    eb18:	add	r2, r0
    eb1a:	cmp	r0, r2
    eb1c:	bne.n	eb22 <memcmp+0xe>
    eb1e:	movs	r0, #0
    eb20:	b.n	eb2e <memcmp+0x1a>
    eb22:	ldrb	r3, [r0, #0]
    eb24:	ldrb.w	r4, [r1, #1]!
    eb28:	cmp	r3, r4
    eb2a:	beq.n	eb30 <memcmp+0x1c>
    eb2c:	subs	r0, r3, r4
    eb2e:	pop	{r4, pc}
    eb30:	adds	r0, #1
    eb32:	b.n	eb1a <memcmp+0x6>

0000eb34 <memmove>:
    eb34:	cmp	r0, r1
    eb36:	push	{r4, lr}
    eb38:	add.w	r4, r1, r2
    eb3c:	bls.n	eb44 <memmove+0x10>
    eb3e:	cmp	r4, r0
    eb40:	mov	r3, r4
    eb42:	bhi.n	eb54 <memmove+0x20>
    eb44:	subs	r3, r0, #1
    eb46:	cmp	r1, r4
    eb48:	beq.n	eb5c <memmove+0x28>
    eb4a:	ldrb.w	r2, [r1], #1
    eb4e:	strb.w	r2, [r3, #1]!
    eb52:	b.n	eb46 <memmove+0x12>
    eb54:	add	r2, r0
    eb56:	mov	r1, r0
    eb58:	cmp	r2, r1
    eb5a:	bne.n	eb5e <memmove+0x2a>
    eb5c:	pop	{r4, pc}
    eb5e:	ldrb.w	r4, [r3, #-1]!
    eb62:	strb.w	r4, [r2, #-1]!
    eb66:	b.n	eb58 <memmove+0x24>

0000eb68 <strlcat>:
    eb68:	push	{r4, r5, r6, lr}
    eb6a:	mov	r4, r0
    eb6c:	adds	r6, r2, r0
    eb6e:	cmp	r4, r6
    eb70:	mov	r3, r4
    eb72:	bne.n	eb86 <strlcat+0x1e>
    eb74:	subs	r4, r3, r0
    eb76:	subs	r2, r2, r4
    eb78:	subs	r6, r2, #1
    eb7a:	cbnz	r2, eb90 <strlcat+0x28>
    eb7c:	mov	r0, r1
    eb7e:	bl	edd0 <strlen>
    eb82:	add	r0, r4
    eb84:	pop	{r4, r5, r6, pc}
    eb86:	ldrb	r5, [r3, #0]
    eb88:	adds	r4, #1
    eb8a:	cmp	r5, #0
    eb8c:	bne.n	eb6e <strlcat+0x6>
    eb8e:	b.n	eb74 <strlcat+0xc>
    eb90:	mov	r5, r1
    eb92:	mov	r2, r5
    eb94:	ldrb.w	r0, [r5], #1
    eb98:	cbnz	r0, eba2 <strlcat+0x3a>
    eb9a:	subs	r2, r2, r1
    eb9c:	strb	r0, [r3, #0]
    eb9e:	adds	r0, r2, r4
    eba0:	b.n	eb84 <strlcat+0x1c>
    eba2:	cmp	r6, #0
    eba4:	beq.n	eb92 <strlcat+0x2a>
    eba6:	strb.w	r0, [r3], #1
    ebaa:	subs	r6, #1
    ebac:	b.n	eb92 <strlcat+0x2a>

0000ebae <strlcpy>:
    ebae:	push	{r4, lr}
    ebb0:	cbz	r2, ebd8 <strlcpy+0x2a>
    ebb2:	add	r2, r1
    ebb4:	mov	r3, r1
    ebb6:	mov	r4, r3
    ebb8:	adds	r3, #1
    ebba:	cmp	r3, r2
    ebbc:	bne.n	ebc6 <strlcpy+0x18>
    ebbe:	movs	r3, #0
    ebc0:	strb	r3, [r0, #0]
    ebc2:	mov	r3, r4
    ebc4:	b.n	ebda <strlcpy+0x2c>
    ebc6:	ldrb.w	r4, [r3, #-1]
    ebca:	strb.w	r4, [r0], #1
    ebce:	cmp	r4, #0
    ebd0:	bne.n	ebb6 <strlcpy+0x8>
    ebd2:	subs	r1, r3, r1
    ebd4:	subs	r0, r1, #1
    ebd6:	pop	{r4, pc}
    ebd8:	mov	r3, r1
    ebda:	ldrb.w	r2, [r3], #1
    ebde:	cmp	r2, #0
    ebe0:	bne.n	ebda <strlcpy+0x2c>
    ebe2:	b.n	ebd2 <strlcpy+0x24>

0000ebe4 <strncmp>:
    ebe4:	push	{r4, lr}
    ebe6:	cbz	r2, ec04 <strncmp+0x20>
    ebe8:	subs	r1, #1
    ebea:	adds	r4, r0, r2
    ebec:	ldrb.w	r2, [r0], #1
    ebf0:	ldrb.w	r3, [r1, #1]!
    ebf4:	cmp	r2, r3
    ebf6:	bne.n	ec00 <strncmp+0x1c>
    ebf8:	cmp	r0, r4
    ebfa:	beq.n	ec00 <strncmp+0x1c>
    ebfc:	cmp	r2, #0
    ebfe:	bne.n	ebec <strncmp+0x8>
    ec00:	subs	r0, r2, r3
    ec02:	pop	{r4, pc}
    ec04:	mov	r0, r2
    ec06:	b.n	ec02 <strncmp+0x1e>

0000ec08 <_localeconv_r>:
    ec08:	ldr	r0, [pc, #0]	; (ec0c <_localeconv_r+0x4>)
    ec0a:	bx	lr
    ec0c:	.word	0x200021fc

0000ec10 <_close_r>:
    ec10:	push	{r3, r4, r5, lr}
    ec12:	ldr	r5, [pc, #24]	; (ec2c <_close_r+0x1c>)
    ec14:	movs	r3, #0
    ec16:	mov	r4, r0
    ec18:	mov	r0, r1
    ec1a:	str	r3, [r5, #0]
    ec1c:	bl	b978 <_close>
    ec20:	adds	r3, r0, #1
    ec22:	bne.n	ec2a <_close_r+0x1a>
    ec24:	ldr	r3, [r5, #0]
    ec26:	cbz	r3, ec2a <_close_r+0x1a>
    ec28:	str	r3, [r4, #0]
    ec2a:	pop	{r3, r4, r5, pc}
    ec2c:	.word	0x20014ba4

0000ec30 <_lseek_r>:
    ec30:	push	{r3, r4, r5, lr}
    ec32:	ldr	r5, [pc, #28]	; (ec50 <_lseek_r+0x20>)
    ec34:	mov	r4, r0
    ec36:	mov	r0, r1
    ec38:	mov	r1, r2
    ec3a:	movs	r2, #0
    ec3c:	str	r2, [r5, #0]
    ec3e:	mov	r2, r3
    ec40:	bl	b98c <_lseek>
    ec44:	adds	r3, r0, #1
    ec46:	bne.n	ec4e <_lseek_r+0x1e>
    ec48:	ldr	r3, [r5, #0]
    ec4a:	cbz	r3, ec4e <_lseek_r+0x1e>
    ec4c:	str	r3, [r4, #0]
    ec4e:	pop	{r3, r4, r5, pc}
    ec50:	.word	0x20014ba4

0000ec54 <_read_r>:
    ec54:	push	{r3, r4, r5, lr}
    ec56:	ldr	r5, [pc, #28]	; (ec74 <_read_r+0x20>)
    ec58:	mov	r4, r0
    ec5a:	mov	r0, r1
    ec5c:	mov	r1, r2
    ec5e:	movs	r2, #0
    ec60:	str	r2, [r5, #0]
    ec62:	mov	r2, r3
    ec64:	bl	b974 <_read>
    ec68:	adds	r3, r0, #1
    ec6a:	bne.n	ec72 <_read_r+0x1e>
    ec6c:	ldr	r3, [r5, #0]
    ec6e:	cbz	r3, ec72 <_read_r+0x1e>
    ec70:	str	r3, [r4, #0]
    ec72:	pop	{r3, r4, r5, pc}
    ec74:	.word	0x20014ba4

0000ec78 <_sbrk_r>:
    ec78:	push	{r3, r4, r5, lr}
    ec7a:	ldr	r5, [pc, #24]	; (ec94 <_sbrk_r+0x1c>)
    ec7c:	movs	r3, #0
    ec7e:	mov	r4, r0
    ec80:	mov	r0, r1
    ec82:	str	r3, [r5, #0]
    ec84:	bl	b948 <_sbrk>
    ec88:	adds	r3, r0, #1
    ec8a:	bne.n	ec92 <_sbrk_r+0x1a>
    ec8c:	ldr	r3, [r5, #0]
    ec8e:	cbz	r3, ec92 <_sbrk_r+0x1a>
    ec90:	str	r3, [r4, #0]
    ec92:	pop	{r3, r4, r5, pc}
    ec94:	.word	0x20014ba4

0000ec98 <_write_r>:
    ec98:	push	{r3, r4, r5, lr}
    ec9a:	ldr	r5, [pc, #28]	; (ecb8 <_write_r+0x20>)
    ec9c:	mov	r4, r0
    ec9e:	mov	r0, r1
    eca0:	mov	r1, r2
    eca2:	movs	r2, #0
    eca4:	str	r2, [r5, #0]
    eca6:	mov	r2, r3
    eca8:	bl	c73c <_write>
    ecac:	adds	r3, r0, #1
    ecae:	bne.n	ecb6 <_write_r+0x1e>
    ecb0:	ldr	r3, [r5, #0]
    ecb2:	cbz	r3, ecb6 <_write_r+0x1e>
    ecb4:	str	r3, [r4, #0]
    ecb6:	pop	{r3, r4, r5, pc}
    ecb8:	.word	0x20014ba4

0000ecbc <__errno>:
    ecbc:	ldr	r3, [pc, #4]	; (ecc4 <__errno+0x8>)
    ecbe:	ldr	r0, [r3, #0]
    ecc0:	bx	lr
    ecc2:	nop
    ecc4:	.word	0x200022d0

0000ecc8 <__libc_init_array>:
    ecc8:	push	{r4, r5, r6, lr}
    ecca:	ldr	r5, [pc, #52]	; (ed00 <__libc_init_array+0x38>)
    eccc:	ldr	r4, [pc, #52]	; (ed04 <__libc_init_array+0x3c>)
    ecce:	subs	r4, r4, r5
    ecd0:	asrs	r4, r4, #2
    ecd2:	movs	r6, #0
    ecd4:	cmp	r6, r4
    ecd6:	bne.n	ecec <__libc_init_array+0x24>
    ecd8:	ldr	r5, [pc, #44]	; (ed08 <__libc_init_array+0x40>)
    ecda:	ldr	r4, [pc, #48]	; (ed0c <__libc_init_array+0x44>)
    ecdc:	bl	120b8 <___init_veneer>
    ece0:	subs	r4, r4, r5
    ece2:	asrs	r4, r4, #2
    ece4:	movs	r6, #0
    ece6:	cmp	r6, r4
    ece8:	bne.n	ecf6 <__libc_init_array+0x2e>
    ecea:	pop	{r4, r5, r6, pc}
    ecec:	ldr.w	r3, [r5], #4
    ecf0:	blx	r3
    ecf2:	adds	r6, #1
    ecf4:	b.n	ecd4 <__libc_init_array+0xc>
    ecf6:	ldr.w	r3, [r5], #4
    ecfa:	blx	r3
    ecfc:	adds	r6, #1
    ecfe:	b.n	ece6 <__libc_init_array+0x1e>
    ed00:	.word	0x600024c0
    ed04:	.word	0x600024c0
    ed08:	.word	0x600024c0
    ed0c:	.word	0x600024d0

0000ed10 <__retarget_lock_acquire_recursive>:
    ed10:	bx	lr

0000ed12 <__retarget_lock_release_recursive>:
    ed12:	bx	lr

0000ed14 <strcpy>:
    ed14:	mov	r3, r0
    ed16:	ldrb.w	r2, [r1], #1
    ed1a:	strb.w	r2, [r3], #1
    ed1e:	cmp	r2, #0
    ed20:	bne.n	ed16 <strcpy+0x2>
    ed22:	bx	lr
	...

0000ed30 <memchr>:
    ed30:	and.w	r1, r1, #255	; 0xff
    ed34:	cmp	r2, #16
    ed36:	blt.n	ed90 <memchr+0x60>
    ed38:	tst.w	r0, #7
    ed3c:	beq.n	ed50 <memchr+0x20>
    ed3e:	ldrb.w	r3, [r0], #1
    ed42:	subs	r2, #1
    ed44:	cmp	r3, r1
    ed46:	beq.n	eda4 <memchr+0x74>
    ed48:	tst.w	r0, #7
    ed4c:	cbz	r2, eda0 <memchr+0x70>
    ed4e:	bne.n	ed3e <memchr+0xe>
    ed50:	push	{r4, r5, r6, r7}
    ed52:	orr.w	r1, r1, r1, lsl #8
    ed56:	orr.w	r1, r1, r1, lsl #16
    ed5a:	bic.w	r4, r2, #7
    ed5e:	mvns.w	r7, #0
    ed62:	movs	r3, #0
    ed64:	ldrd	r5, r6, [r0], #8
    ed68:	subs	r4, #8
    ed6a:	eor.w	r5, r5, r1
    ed6e:	eor.w	r6, r6, r1
    ed72:	uadd8	r5, r5, r7
    ed76:	sel	r5, r3, r7
    ed7a:	uadd8	r6, r6, r7
    ed7e:	sel	r6, r5, r7
    ed82:	cbnz	r6, eda8 <memchr+0x78>
    ed84:	bne.n	ed64 <memchr+0x34>
    ed86:	pop	{r4, r5, r6, r7}
    ed88:	and.w	r1, r1, #255	; 0xff
    ed8c:	and.w	r2, r2, #7
    ed90:	cbz	r2, eda0 <memchr+0x70>
    ed92:	ldrb.w	r3, [r0], #1
    ed96:	subs	r2, #1
    ed98:	eor.w	r3, r3, r1
    ed9c:	cbz	r3, eda4 <memchr+0x74>
    ed9e:	bne.n	ed92 <memchr+0x62>
    eda0:	movs	r0, #0
    eda2:	bx	lr
    eda4:	subs	r0, #1
    eda6:	bx	lr
    eda8:	cmp	r5, #0
    edaa:	itte	eq
    edac:	moveq	r5, r6
    edae:	subeq	r0, #3
    edb0:	subne	r0, #7
    edb2:	tst.w	r5, #1
    edb6:	bne.n	edc8 <memchr+0x98>
    edb8:	adds	r0, #1
    edba:	tst.w	r5, #256	; 0x100
    edbe:	ittt	eq
    edc0:	addeq	r0, #1
    edc2:	tsteq.w	r5, #98304	; 0x18000
    edc6:	addeq	r0, #1
    edc8:	pop	{r4, r5, r6, r7}
    edca:	subs	r0, #1
    edcc:	bx	lr
    edce:	nop

0000edd0 <strlen>:
    edd0:	mov	r3, r0
    edd2:	ldrb.w	r2, [r3], #1
    edd6:	cmp	r2, #0
    edd8:	bne.n	edd2 <strlen+0x2>
    edda:	subs	r0, r3, r0
    eddc:	subs	r0, #1
    edde:	bx	lr

0000ede0 <nan>:
    ede0:	vldr	d0, [pc, #4]	; ede8 <nan+0x8>
    ede4:	bx	lr
    ede6:	nop
    ede8:	.word	0x00000000
    edec:	.word	0x7ff80000

0000edf0 <nanf>:
    edf0:	vldr	s0, [pc, #4]	; edf8 <nanf+0x8>
    edf4:	bx	lr
    edf6:	nop
    edf8:	.word	0x7fc00000

0000edfc <quorem>:
    edfc:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee00:	ldr	r3, [r0, #16]
    ee02:	ldr	r4, [r1, #16]
    ee04:	cmp	r3, r4
    ee06:	mov	r7, r0
    ee08:	blt.n	ef08 <quorem+0x10c>
    ee0a:	subs	r4, #1
    ee0c:	add.w	r8, r1, #20
    ee10:	add.w	r5, r0, #20
    ee14:	add.w	r3, r5, r4, lsl #2
    ee18:	str	r3, [sp, #4]
    ee1a:	ldr.w	r3, [r8, r4, lsl #2]
    ee1e:	ldr.w	r2, [r5, r4, lsl #2]
    ee22:	adds	r3, #1
    ee24:	cmp	r2, r3
    ee26:	mov.w	fp, r4, lsl #2
    ee2a:	add.w	r9, r8, r4, lsl #2
    ee2e:	udiv	r6, r2, r3
    ee32:	bcc.n	ee98 <quorem+0x9c>
    ee34:	mov.w	lr, #0
    ee38:	mov	r0, r8
    ee3a:	mov	ip, r5
    ee3c:	mov	sl, lr
    ee3e:	ldr.w	r2, [r0], #4
    ee42:	uxth	r3, r2
    ee44:	mla	r3, r6, r3, lr
    ee48:	mov.w	lr, r2, lsr #16
    ee4c:	lsrs	r2, r3, #16
    ee4e:	uxth	r3, r3
    ee50:	sub.w	r3, sl, r3
    ee54:	ldr.w	sl, [ip]
    ee58:	uxtah	r3, r3, sl
    ee5c:	mla	r2, r6, lr, r2
    ee60:	str	r3, [sp, #0]
    ee62:	ldr	r3, [sp, #0]
    ee64:	mov.w	lr, r2, lsr #16
    ee68:	uxth	r2, r2
    ee6a:	rsb	r2, r2, sl, lsr #16
    ee6e:	add.w	r2, r2, r3, asr #16
    ee72:	ldrh.w	r3, [sp]
    ee76:	cmp	r9, r0
    ee78:	orr.w	r3, r3, r2, lsl #16
    ee7c:	str.w	r3, [ip], #4
    ee80:	mov.w	sl, r2, asr #16
    ee84:	bcs.n	ee3e <quorem+0x42>
    ee86:	ldr.w	r3, [r5, fp]
    ee8a:	cbnz	r3, ee98 <quorem+0x9c>
    ee8c:	ldr	r3, [sp, #4]
    ee8e:	subs	r3, #4
    ee90:	cmp	r5, r3
    ee92:	mov	r2, r3
    ee94:	bcc.n	eef0 <quorem+0xf4>
    ee96:	str	r4, [r7, #16]
    ee98:	mov	r0, r7
    ee9a:	bl	106e0 <__mcmp>
    ee9e:	cmp	r0, #0
    eea0:	blt.n	eee8 <quorem+0xec>
    eea2:	adds	r6, #1
    eea4:	mov	r1, r5
    eea6:	movs	r0, #0
    eea8:	ldr.w	r2, [r8], #4
    eeac:	ldr.w	ip, [r1]
    eeb0:	uxth	r3, r2
    eeb2:	subs	r3, r0, r3
    eeb4:	lsrs	r2, r2, #16
    eeb6:	uxtah	r3, r3, ip
    eeba:	rsb	r2, r2, ip, lsr #16
    eebe:	add.w	r2, r2, r3, asr #16
    eec2:	uxth	r3, r3
    eec4:	orr.w	r3, r3, r2, lsl #16
    eec8:	cmp	r9, r8
    eeca:	str.w	r3, [r1], #4
    eece:	mov.w	r0, r2, asr #16
    eed2:	bcs.n	eea8 <quorem+0xac>
    eed4:	ldr.w	r2, [r5, r4, lsl #2]
    eed8:	add.w	r3, r5, r4, lsl #2
    eedc:	cbnz	r2, eee8 <quorem+0xec>
    eede:	subs	r3, #4
    eee0:	cmp	r5, r3
    eee2:	mov	r2, r3
    eee4:	bcc.n	eefc <quorem+0x100>
    eee6:	str	r4, [r7, #16]
    eee8:	mov	r0, r6
    eeea:	add	sp, #12
    eeec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eef0:	ldr	r2, [r2, #0]
    eef2:	subs	r3, #4
    eef4:	cmp	r2, #0
    eef6:	bne.n	ee96 <quorem+0x9a>
    eef8:	subs	r4, #1
    eefa:	b.n	ee90 <quorem+0x94>
    eefc:	ldr	r2, [r2, #0]
    eefe:	subs	r3, #4
    ef00:	cmp	r2, #0
    ef02:	bne.n	eee6 <quorem+0xea>
    ef04:	subs	r4, #1
    ef06:	b.n	eee0 <quorem+0xe4>
    ef08:	movs	r0, #0
    ef0a:	b.n	eeea <quorem+0xee>
    ef0c:	movs	r0, r0
	...

0000ef10 <_dtoa_r>:
    ef10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef14:	vpush	{d8}
    ef18:	ldr	r5, [r0, #28]
    ef1a:	sub	sp, #68	; 0x44
    ef1c:	vstr	d0, [sp, #8]
    ef20:	vmov	r8, r9, d0
    ef24:	ldr	r4, [sp, #112]	; 0x70
    ef26:	str	r1, [sp, #24]
    ef28:	mov	r6, r0
    ef2a:	str	r2, [sp, #32]
    ef2c:	str	r3, [sp, #48]	; 0x30
    ef2e:	cbnz	r5, ef4e <_dtoa_r+0x3e>
    ef30:	movs	r0, #16
    ef32:	bl	cc50 <malloc>
    ef36:	mov	r2, r0
    ef38:	str	r0, [r6, #28]
    ef3a:	cbnz	r0, ef46 <_dtoa_r+0x36>
    ef3c:	ldr	r3, [pc, #664]	; (f1d8 <_dtoa_r+0x2c8>)
    ef3e:	movs	r1, #239	; 0xef
    ef40:	ldr	r0, [pc, #664]	; (f1dc <_dtoa_r+0x2cc>)
    ef42:	bl	1169c <__assert_func>
    ef46:	strd	r5, r5, [r0, #4]
    ef4a:	str	r5, [r0, #0]
    ef4c:	str	r5, [r0, #12]
    ef4e:	ldr	r3, [r6, #28]
    ef50:	ldr	r1, [r3, #0]
    ef52:	cbz	r1, ef6a <_dtoa_r+0x5a>
    ef54:	ldr	r2, [r3, #4]
    ef56:	str	r2, [r1, #4]
    ef58:	movs	r3, #1
    ef5a:	lsls	r3, r2
    ef5c:	str	r3, [r1, #8]
    ef5e:	mov	r0, r6
    ef60:	bl	101d4 <_Bfree>
    ef64:	ldr	r3, [r6, #28]
    ef66:	movs	r2, #0
    ef68:	str	r2, [r3, #0]
    ef6a:	subs.w	r3, r9, #0
    ef6e:	ittet	lt
    ef70:	biclt.w	r3, r3, #2147483648	; 0x80000000
    ef74:	strlt	r3, [sp, #12]
    ef76:	movge	r3, #0
    ef78:	movlt	r2, #1
    ef7a:	ite	ge
    ef7c:	strge	r3, [r4, #0]
    ef7e:	strlt	r2, [r4, #0]
    ef80:	ldr	r3, [pc, #604]	; (f1e0 <_dtoa_r+0x2d0>)
    ef82:	ldr	r4, [sp, #12]
    ef84:	bics	r3, r4
    ef86:	bne.n	efc2 <_dtoa_r+0xb2>
    ef88:	ldr	r2, [sp, #48]	; 0x30
    ef8a:	movw	r3, #9999	; 0x270f
    ef8e:	str	r3, [r2, #0]
    ef90:	ubfx	r3, r4, #0, #20
    ef94:	orrs.w	r3, r3, r8
    ef98:	beq.w	f992 <_dtoa_r+0xa82>
    ef9c:	ldr	r3, [sp, #116]	; 0x74
    ef9e:	cbnz	r3, efba <_dtoa_r+0xaa>
    efa0:	ldr	r3, [pc, #576]	; (f1e4 <_dtoa_r+0x2d4>)
    efa2:	b.n	efe6 <_dtoa_r+0xd6>
    efa4:	ldr	r3, [pc, #576]	; (f1e8 <_dtoa_r+0x2d8>)
    efa6:	str	r3, [sp, #4]
    efa8:	adds	r3, #8
    efaa:	ldr	r2, [sp, #116]	; 0x74
    efac:	str	r3, [r2, #0]
    efae:	ldr	r0, [sp, #4]
    efb0:	add	sp, #68	; 0x44
    efb2:	vpop	{d8}
    efb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efba:	ldr	r3, [pc, #552]	; (f1e4 <_dtoa_r+0x2d4>)
    efbc:	str	r3, [sp, #4]
    efbe:	adds	r3, #3
    efc0:	b.n	efaa <_dtoa_r+0x9a>
    efc2:	vldr	d8, [sp, #8]
    efc6:	vcmp.f64	d8, #0.0
    efca:	vmrs	APSR_nzcv, fpscr
    efce:	bne.n	efea <_dtoa_r+0xda>
    efd0:	ldr	r2, [sp, #48]	; 0x30
    efd2:	movs	r3, #1
    efd4:	str	r3, [r2, #0]
    efd6:	ldr	r3, [sp, #116]	; 0x74
    efd8:	cmp	r3, #0
    efda:	beq.w	f98c <_dtoa_r+0xa7c>
    efde:	ldr	r3, [pc, #524]	; (f1ec <_dtoa_r+0x2dc>)
    efe0:	ldr	r2, [sp, #116]	; 0x74
    efe2:	str	r3, [r2, #0]
    efe4:	subs	r3, #1
    efe6:	str	r3, [sp, #4]
    efe8:	b.n	efae <_dtoa_r+0x9e>
    efea:	add	r2, sp, #56	; 0x38
    efec:	add	r1, sp, #60	; 0x3c
    efee:	mov	r0, r6
    eff0:	vmov.f64	d0, d8
    eff4:	bl	1090c <__d2b>
    eff8:	ubfx	r3, r4, #20, #11
    effc:	ldr	r2, [sp, #56]	; 0x38
    effe:	mov	r5, r0
    f000:	cmp	r3, #0
    f002:	beq.n	f092 <_dtoa_r+0x182>
    f004:	vmov.f64	d7, d8
    f008:	vmov	r1, s17
    f00c:	ubfx	r1, r1, #0, #20
    f010:	orr.w	r1, r1, #1069547520	; 0x3fc00000
    f014:	orr.w	r1, r1, #3145728	; 0x300000
    f018:	subw	r3, r3, #1023	; 0x3ff
    f01c:	movs	r0, #0
    f01e:	vmov	s15, r1
    f022:	vmov.f64	d6, #120	; 0x3fc00000  1.5
    f026:	vldr	d5, [pc, #408]	; f1c0 <_dtoa_r+0x2b0>
    f02a:	vsub.f64	d7, d7, d6
    f02e:	vldr	d6, [pc, #408]	; f1c8 <_dtoa_r+0x2b8>
    f032:	vfma.f64	d6, d7, d5
    f036:	vldr	d5, [pc, #408]	; f1d0 <_dtoa_r+0x2c0>
    f03a:	vmov	s15, r3
    f03e:	vcvt.f64.s32	d4, s15
    f042:	vmov.f64	d7, d6
    f046:	vfma.f64	d7, d4, d5
    f04a:	vcvt.s32.f64	s13, d7
    f04e:	vcmpe.f64	d7, #0.0
    f052:	vmrs	APSR_nzcv, fpscr
    f056:	vmov	fp, s13
    f05a:	str	r0, [sp, #36]	; 0x24
    f05c:	bpl.n	f070 <_dtoa_r+0x160>
    f05e:	vcvt.f64.s32	d6, s13
    f062:	vcmp.f64	d6, d7
    f066:	vmrs	APSR_nzcv, fpscr
    f06a:	it	ne
    f06c:	addne.w	fp, fp, #4294967295
    f070:	cmp.w	fp, #22
    f074:	bhi.n	f0ce <_dtoa_r+0x1be>
    f076:	ldr	r1, [pc, #376]	; (f1f0 <_dtoa_r+0x2e0>)
    f078:	add.w	r1, r1, fp, lsl #3
    f07c:	vldr	d7, [r1]
    f080:	vcmpe.f64	d8, d7
    f084:	vmrs	APSR_nzcv, fpscr
    f088:	bpl.n	f08e <_dtoa_r+0x17e>
    f08a:	add.w	fp, fp, #4294967295
    f08e:	movs	r1, #0
    f090:	b.n	f0d0 <_dtoa_r+0x1c0>
    f092:	ldr	r3, [sp, #60]	; 0x3c
    f094:	add	r3, r2
    f096:	addw	r1, r3, #1074	; 0x432
    f09a:	cmp	r1, #32
    f09c:	itttt	gt
    f09e:	rsbgt	r1, r1, #64	; 0x40
    f0a2:	lslgt	r4, r1
    f0a4:	addwgt	r1, r3, #1042	; 0x412
    f0a8:	lsrgt.w	r1, r8, r1
    f0ac:	itet	le
    f0ae:	rsble	r1, r1, #32
    f0b2:	orrgt	r1, r4
    f0b4:	lslle.w	r1, r8, r1
    f0b8:	vmov	s15, r1
    f0bc:	vcvt.f64.u32	d7, s15
    f0c0:	subs	r3, #1
    f0c2:	vmov	r1, s15
    f0c6:	movs	r0, #1
    f0c8:	sub.w	r1, r1, #32505856	; 0x1f00000
    f0cc:	b.n	f01e <_dtoa_r+0x10e>
    f0ce:	movs	r1, #1
    f0d0:	subs	r2, r2, r3
    f0d2:	subs	r3, r2, #1
    f0d4:	str	r3, [sp, #20]
    f0d6:	ittet	mi
    f0d8:	rsbmi	r3, r2, #1
    f0dc:	strmi	r3, [sp, #16]
    f0de:	movpl	r3, #0
    f0e0:	movmi	r3, #0
    f0e2:	ite	mi
    f0e4:	strmi	r3, [sp, #20]
    f0e6:	strpl	r3, [sp, #16]
    f0e8:	cmp.w	fp, #0
    f0ec:	str	r1, [sp, #44]	; 0x2c
    f0ee:	blt.n	f122 <_dtoa_r+0x212>
    f0f0:	ldr	r3, [sp, #20]
    f0f2:	str.w	fp, [sp, #40]	; 0x28
    f0f6:	add	r3, fp
    f0f8:	str	r3, [sp, #20]
    f0fa:	movs	r3, #0
    f0fc:	ldr	r2, [sp, #24]
    f0fe:	cmp	r2, #9
    f100:	bhi.n	f194 <_dtoa_r+0x284>
    f102:	cmp	r2, #5
    f104:	itt	gt
    f106:	subgt	r2, #4
    f108:	strgt	r2, [sp, #24]
    f10a:	ldr	r2, [sp, #24]
    f10c:	sub.w	r2, r2, #2
    f110:	ite	gt
    f112:	movgt	r4, #0
    f114:	movle	r4, #1
    f116:	cmp	r2, #3
    f118:	bhi.n	f1aa <_dtoa_r+0x29a>
    f11a:	tbb	[pc, r2]
    f11e:	.short	0x2d0b
    f120:	.short	0x392b
    f122:	ldr	r3, [sp, #16]
    f124:	movs	r2, #0
    f126:	sub.w	r3, r3, fp
    f12a:	str	r3, [sp, #16]
    f12c:	str	r2, [sp, #40]	; 0x28
    f12e:	rsb	r3, fp, #0
    f132:	b.n	f0fc <_dtoa_r+0x1ec>
    f134:	movs	r2, #0
    f136:	str	r2, [sp, #28]
    f138:	ldr	r2, [sp, #32]
    f13a:	cmp	r2, #0
    f13c:	bgt.n	f1b0 <_dtoa_r+0x2a0>
    f13e:	mov.w	sl, #1
    f142:	mov	r9, sl
    f144:	mov	r2, sl
    f146:	str.w	sl, [sp, #32]
    f14a:	ldr	r7, [r6, #28]
    f14c:	movs	r1, #0
    f14e:	movs	r0, #4
    f150:	add.w	ip, r0, #20
    f154:	cmp	ip, r2
    f156:	bls.n	f1ba <_dtoa_r+0x2aa>
    f158:	str	r1, [r7, #4]
    f15a:	mov	r0, r6
    f15c:	str	r3, [sp, #52]	; 0x34
    f15e:	bl	10154 <_Balloc>
    f162:	ldr	r3, [sp, #52]	; 0x34
    f164:	str	r0, [sp, #4]
    f166:	mov	r2, r0
    f168:	cmp	r0, #0
    f16a:	bne.n	f1f8 <_dtoa_r+0x2e8>
    f16c:	ldr	r3, [pc, #132]	; (f1f4 <_dtoa_r+0x2e4>)
    f16e:	movw	r1, #431	; 0x1af
    f172:	b.n	ef40 <_dtoa_r+0x30>
    f174:	movs	r2, #1
    f176:	b.n	f136 <_dtoa_r+0x226>
    f178:	movs	r2, #0
    f17a:	str	r2, [sp, #28]
    f17c:	ldr	r2, [sp, #32]
    f17e:	add.w	sl, fp, r2
    f182:	add.w	r9, sl, #1
    f186:	mov	r2, r9
    f188:	cmp	r2, #1
    f18a:	it	lt
    f18c:	movlt	r2, #1
    f18e:	b.n	f14a <_dtoa_r+0x23a>
    f190:	movs	r2, #1
    f192:	b.n	f17a <_dtoa_r+0x26a>
    f194:	movs	r4, #1
    f196:	movs	r2, #0
    f198:	strd	r2, r4, [sp, #24]
    f19c:	mov.w	sl, #4294967295
    f1a0:	movs	r1, #0
    f1a2:	mov	r9, sl
    f1a4:	movs	r2, #18
    f1a6:	str	r1, [sp, #32]
    f1a8:	b.n	f14a <_dtoa_r+0x23a>
    f1aa:	movs	r2, #1
    f1ac:	str	r2, [sp, #28]
    f1ae:	b.n	f19c <_dtoa_r+0x28c>
    f1b0:	ldr.w	sl, [sp, #32]
    f1b4:	mov	r9, sl
    f1b6:	mov	r2, sl
    f1b8:	b.n	f14a <_dtoa_r+0x23a>
    f1ba:	adds	r1, #1
    f1bc:	lsls	r0, r0, #1
    f1be:	b.n	f150 <_dtoa_r+0x240>
    f1c0:	.word	0x636f4361
    f1c4:	.word	0x3fd287a7
    f1c8:	.word	0x8b60c8b3
    f1cc:	.word	0x3fc68a28
    f1d0:	.word	0x509f79fb
    f1d4:	.word	0x3fd34413
    f1d8:	.word	0x20001359
    f1dc:	.word	0x20001370
    f1e0:	.word	0x7ff00000
    f1e4:	.word	0x20001355
    f1e8:	.word	0x2000134c
    f1ec:	.word	0x20001188
    f1f0:	.word	0x20000328
    f1f4:	.word	0x200013c9
    f1f8:	ldr	r2, [r6, #28]
    f1fa:	ldr	r1, [sp, #4]
    f1fc:	str	r1, [r2, #0]
    f1fe:	cmp.w	r9, #14
    f202:	bhi.n	f2de <_dtoa_r+0x3ce>
    f204:	cmp	r4, #0
    f206:	beq.n	f2de <_dtoa_r+0x3ce>
    f208:	cmp.w	fp, #0
    f20c:	ble.w	f350 <_dtoa_r+0x440>
    f210:	ldr	r2, [pc, #772]	; (f518 <_dtoa_r+0x608>)
    f212:	and.w	r1, fp, #15
    f216:	add.w	r2, r2, r1, lsl #3
    f21a:	tst.w	fp, #256	; 0x100
    f21e:	vldr	d7, [r2]
    f222:	mov.w	r2, fp, asr #4
    f226:	beq.w	f338 <_dtoa_r+0x428>
    f22a:	ldr	r1, [pc, #752]	; (f51c <_dtoa_r+0x60c>)
    f22c:	vldr	d6, [r1, #32]
    f230:	vdiv.f64	d6, d8, d6
    f234:	vstr	d6, [sp, #8]
    f238:	and.w	r2, r2, #15
    f23c:	movs	r1, #3
    f23e:	ldr	r0, [pc, #732]	; (f51c <_dtoa_r+0x60c>)
    f240:	cmp	r2, #0
    f242:	bne.n	f33c <_dtoa_r+0x42c>
    f244:	vldr	d6, [sp, #8]
    f248:	vdiv.f64	d7, d6, d7
    f24c:	vstr	d7, [sp, #8]
    f250:	ldr	r2, [sp, #44]	; 0x2c
    f252:	vldr	d7, [sp, #8]
    f256:	cmp	r2, #0
    f258:	beq.w	f39c <_dtoa_r+0x48c>
    f25c:	vmov.f64	d6, #112	; 0x3f800000  1.0
    f260:	vcmpe.f64	d7, d6
    f264:	vmrs	APSR_nzcv, fpscr
    f268:	bpl.w	f39c <_dtoa_r+0x48c>
    f26c:	cmp.w	r9, #0
    f270:	beq.w	f39c <_dtoa_r+0x48c>
    f274:	cmp.w	sl, #0
    f278:	ble.n	f2da <_dtoa_r+0x3ca>
    f27a:	vmov.f64	d6, #36	; 0x41200000  10.0
    f27e:	vmul.f64	d7, d7, d6
    f282:	vstr	d7, [sp, #8]
    f286:	add.w	r2, fp, #4294967295
    f28a:	adds	r1, #1
    f28c:	mov	r4, sl
    f28e:	vldr	d6, [sp, #8]
    f292:	vmov.f64	d5, #28	; 0x40e00000  7.0
    f296:	vmov	s15, r1
    f29a:	vcvt.f64.s32	d7, s15
    f29e:	vfma.f64	d5, d7, d6
    f2a2:	vmov	r7, s11
    f2a6:	vmov	r0, r1, d5
    f2aa:	sub.w	r1, r7, #54525952	; 0x3400000
    f2ae:	cmp	r4, #0
    f2b0:	bne.n	f3a2 <_dtoa_r+0x492>
    f2b2:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f2b6:	vsub.f64	d6, d6, d7
    f2ba:	vmov	d7, r0, r1
    f2be:	vcmpe.f64	d6, d7
    f2c2:	vmrs	APSR_nzcv, fpscr
    f2c6:	bgt.w	f79e <_dtoa_r+0x88e>
    f2ca:	vneg.f64	d7, d7
    f2ce:	vcmpe.f64	d6, d7
    f2d2:	vmrs	APSR_nzcv, fpscr
    f2d6:	bmi.w	f79a <_dtoa_r+0x88a>
    f2da:	vstr	d8, [sp, #8]
    f2de:	ldr	r2, [sp, #60]	; 0x3c
    f2e0:	cmp	r2, #0
    f2e2:	blt.w	f520 <_dtoa_r+0x610>
    f2e6:	cmp.w	fp, #14
    f2ea:	bgt.w	f520 <_dtoa_r+0x610>
    f2ee:	ldr	r3, [pc, #552]	; (f518 <_dtoa_r+0x608>)
    f2f0:	add.w	r3, r3, fp, lsl #3
    f2f4:	vldr	d6, [r3]
    f2f8:	ldr	r3, [sp, #32]
    f2fa:	cmp	r3, #0
    f2fc:	bge.w	f46e <_dtoa_r+0x55e>
    f300:	cmp.w	r9, #0
    f304:	bgt.w	f46e <_dtoa_r+0x55e>
    f308:	bne.w	f798 <_dtoa_r+0x888>
    f30c:	vmov.f64	d7, #20	; 0x40a00000  5.0
    f310:	vmul.f64	d6, d6, d7
    f314:	vldr	d7, [sp, #8]
    f318:	vcmpe.f64	d6, d7
    f31c:	vmrs	APSR_nzcv, fpscr
    f320:	mov	r4, r9
    f322:	mov	r7, r9
    f324:	bge.w	f760 <_dtoa_r+0x850>
    f328:	ldr.w	r8, [sp, #4]
    f32c:	movs	r3, #49	; 0x31
    f32e:	strb.w	r3, [r8], #1
    f332:	add.w	fp, fp, #1
    f336:	b.n	f76a <_dtoa_r+0x85a>
    f338:	movs	r1, #2
    f33a:	b.n	f23e <_dtoa_r+0x32e>
    f33c:	lsls	r4, r2, #31
    f33e:	bpl.n	f34a <_dtoa_r+0x43a>
    f340:	vldr	d6, [r0]
    f344:	adds	r1, #1
    f346:	vmul.f64	d7, d7, d6
    f34a:	asrs	r2, r2, #1
    f34c:	adds	r0, #8
    f34e:	b.n	f240 <_dtoa_r+0x330>
    f350:	beq.n	f398 <_dtoa_r+0x488>
    f352:	rsb	r2, fp, #0
    f356:	ldr	r1, [pc, #448]	; (f518 <_dtoa_r+0x608>)
    f358:	and.w	r0, r2, #15
    f35c:	add.w	r1, r1, r0, lsl #3
    f360:	vldr	d7, [r1]
    f364:	vmul.f64	d7, d8, d7
    f368:	vstr	d7, [sp, #8]
    f36c:	ldr	r0, [pc, #428]	; (f51c <_dtoa_r+0x60c>)
    f36e:	asrs	r2, r2, #4
    f370:	movs	r4, #0
    f372:	movs	r1, #2
    f374:	cbnz	r2, f382 <_dtoa_r+0x472>
    f376:	cmp	r4, #0
    f378:	beq.w	f250 <_dtoa_r+0x340>
    f37c:	vstr	d7, [sp, #8]
    f380:	b.n	f250 <_dtoa_r+0x340>
    f382:	lsls	r7, r2, #31
    f384:	bpl.n	f392 <_dtoa_r+0x482>
    f386:	vldr	d6, [r0]
    f38a:	adds	r1, #1
    f38c:	movs	r4, #1
    f38e:	vmul.f64	d7, d7, d6
    f392:	asrs	r2, r2, #1
    f394:	adds	r0, #8
    f396:	b.n	f374 <_dtoa_r+0x464>
    f398:	movs	r1, #2
    f39a:	b.n	f250 <_dtoa_r+0x340>
    f39c:	mov	r2, fp
    f39e:	mov	r4, r9
    f3a0:	b.n	f28e <_dtoa_r+0x37e>
    f3a2:	vmov	d7, r0, r1
    f3a6:	ldr	r1, [pc, #368]	; (f518 <_dtoa_r+0x608>)
    f3a8:	add.w	r1, r1, r4, lsl #3
    f3ac:	vldr	d4, [r1, #-8]
    f3b0:	ldr	r1, [sp, #4]
    f3b2:	add	r4, r1
    f3b4:	ldr	r1, [sp, #28]
    f3b6:	cbz	r1, f40e <_dtoa_r+0x4fe>
    f3b8:	vmov.f64	d3, #96	; 0x3f000000  0.5
    f3bc:	vmov.f64	d2, #112	; 0x3f800000  1.0
    f3c0:	ldr.w	r8, [sp, #4]
    f3c4:	vdiv.f64	d5, d3, d4
    f3c8:	vmov.f64	d3, #36	; 0x41200000  10.0
    f3cc:	vsub.f64	d7, d5, d7
    f3d0:	vcvt.s32.f64	s9, d6
    f3d4:	vmov	r1, s9
    f3d8:	vcvt.f64.s32	d5, s9
    f3dc:	adds	r1, #48	; 0x30
    f3de:	vsub.f64	d6, d6, d5
    f3e2:	vcmpe.f64	d6, d7
    f3e6:	vmrs	APSR_nzcv, fpscr
    f3ea:	strb.w	r1, [r8], #1
    f3ee:	bmi.n	f464 <_dtoa_r+0x554>
    f3f0:	vsub.f64	d5, d2, d6
    f3f4:	vcmpe.f64	d5, d7
    f3f8:	vmrs	APSR_nzcv, fpscr
    f3fc:	bmi.n	f4e4 <_dtoa_r+0x5d4>
    f3fe:	cmp	r8, r4
    f400:	beq.w	f2da <_dtoa_r+0x3ca>
    f404:	vmul.f64	d7, d7, d3
    f408:	vmul.f64	d6, d6, d3
    f40c:	b.n	f3d0 <_dtoa_r+0x4c0>
    f40e:	ldr.w	r8, [sp, #4]
    f412:	vmul.f64	d7, d7, d4
    f416:	mov	r0, r4
    f418:	vmov.f64	d3, #36	; 0x41200000  10.0
    f41c:	vcvt.s32.f64	s9, d6
    f420:	vmov	r1, s9
    f424:	adds	r1, #48	; 0x30
    f426:	strb.w	r1, [r8], #1
    f42a:	cmp	r8, r4
    f42c:	vcvt.f64.s32	d5, s9
    f430:	vsub.f64	d6, d6, d5
    f434:	bne.n	f468 <_dtoa_r+0x558>
    f436:	vmov.f64	d5, #96	; 0x3f000000  0.5
    f43a:	vadd.f64	d4, d7, d5
    f43e:	vcmpe.f64	d6, d4
    f442:	vmrs	APSR_nzcv, fpscr
    f446:	bgt.n	f4e4 <_dtoa_r+0x5d4>
    f448:	vsub.f64	d5, d5, d7
    f44c:	vcmpe.f64	d6, d5
    f450:	vmrs	APSR_nzcv, fpscr
    f454:	bpl.w	f2da <_dtoa_r+0x3ca>
    f458:	mov	r8, r0
    f45a:	subs	r0, #1
    f45c:	ldrb.w	r3, [r8, #-1]
    f460:	cmp	r3, #48	; 0x30
    f462:	beq.n	f458 <_dtoa_r+0x548>
    f464:	mov	fp, r2
    f466:	b.n	f4be <_dtoa_r+0x5ae>
    f468:	vmul.f64	d6, d6, d3
    f46c:	b.n	f41c <_dtoa_r+0x50c>
    f46e:	vldr	d7, [sp, #8]
    f472:	vmov.f64	d4, #36	; 0x41200000  10.0
    f476:	ldr.w	r8, [sp, #4]
    f47a:	vdiv.f64	d5, d7, d6
    f47e:	vcvt.s32.f64	s10, d5
    f482:	vmov	r3, s10
    f486:	adds	r3, #48	; 0x30
    f488:	strb.w	r3, [r8], #1
    f48c:	ldr	r3, [sp, #4]
    f48e:	sub.w	r3, r8, r3
    f492:	cmp	r9, r3
    f494:	vcvt.f64.s32	d3, s10
    f498:	vfms.f64	d7, d3, d6
    f49c:	bne.n	f506 <_dtoa_r+0x5f6>
    f49e:	vadd.f64	d7, d7, d7
    f4a2:	vcmpe.f64	d7, d6
    f4a6:	vmrs	APSR_nzcv, fpscr
    f4aa:	bgt.n	f4e2 <_dtoa_r+0x5d2>
    f4ac:	vcmp.f64	d7, d6
    f4b0:	vmrs	APSR_nzcv, fpscr
    f4b4:	bne.n	f4be <_dtoa_r+0x5ae>
    f4b6:	vmov	r3, s10
    f4ba:	lsls	r1, r3, #31
    f4bc:	bmi.n	f4e2 <_dtoa_r+0x5d2>
    f4be:	mov	r1, r5
    f4c0:	mov	r0, r6
    f4c2:	bl	101d4 <_Bfree>
    f4c6:	movs	r3, #0
    f4c8:	ldr	r2, [sp, #48]	; 0x30
    f4ca:	strb.w	r3, [r8]
    f4ce:	add.w	r3, fp, #1
    f4d2:	str	r3, [r2, #0]
    f4d4:	ldr	r3, [sp, #116]	; 0x74
    f4d6:	cmp	r3, #0
    f4d8:	beq.w	efae <_dtoa_r+0x9e>
    f4dc:	str.w	r8, [r3]
    f4e0:	b.n	efae <_dtoa_r+0x9e>
    f4e2:	mov	r2, fp
    f4e4:	mov	r3, r8
    f4e6:	mov	r8, r3
    f4e8:	ldrb.w	r1, [r3, #-1]!
    f4ec:	cmp	r1, #57	; 0x39
    f4ee:	bne.n	f4fe <_dtoa_r+0x5ee>
    f4f0:	ldr	r1, [sp, #4]
    f4f2:	cmp	r1, r3
    f4f4:	bne.n	f4e6 <_dtoa_r+0x5d6>
    f4f6:	ldr	r0, [sp, #4]
    f4f8:	movs	r1, #48	; 0x30
    f4fa:	adds	r2, #1
    f4fc:	strb	r1, [r0, #0]
    f4fe:	ldrb	r1, [r3, #0]
    f500:	adds	r1, #1
    f502:	strb	r1, [r3, #0]
    f504:	b.n	f464 <_dtoa_r+0x554>
    f506:	vmul.f64	d7, d7, d4
    f50a:	vcmp.f64	d7, #0.0
    f50e:	vmrs	APSR_nzcv, fpscr
    f512:	bne.n	f47a <_dtoa_r+0x56a>
    f514:	b.n	f4be <_dtoa_r+0x5ae>
    f516:	nop
    f518:	.word	0x20000328
    f51c:	.word	0x20000300
    f520:	ldr	r1, [sp, #28]
    f522:	cmp	r1, #0
    f524:	beq.w	f6c8 <_dtoa_r+0x7b8>
    f528:	ldr	r1, [sp, #24]
    f52a:	cmp	r1, #1
    f52c:	bgt.w	f698 <_dtoa_r+0x788>
    f530:	ldr	r1, [sp, #36]	; 0x24
    f532:	cmp	r1, #0
    f534:	beq.w	f690 <_dtoa_r+0x780>
    f538:	addw	r2, r2, #1075	; 0x433
    f53c:	ldr.w	r8, [sp, #16]
    f540:	mov	r4, r3
    f542:	str	r3, [sp, #36]	; 0x24
    f544:	ldr	r3, [sp, #16]
    f546:	add	r3, r2
    f548:	str	r3, [sp, #16]
    f54a:	ldr	r3, [sp, #20]
    f54c:	movs	r1, #1
    f54e:	add	r3, r2
    f550:	mov	r0, r6
    f552:	str	r3, [sp, #20]
    f554:	bl	103d4 <__i2b>
    f558:	ldr	r3, [sp, #36]	; 0x24
    f55a:	mov	r7, r0
    f55c:	cmp.w	r8, #0
    f560:	beq.n	f57e <_dtoa_r+0x66e>
    f562:	ldr	r2, [sp, #20]
    f564:	cmp	r2, #0
    f566:	ble.n	f57e <_dtoa_r+0x66e>
    f568:	cmp	r2, r8
    f56a:	ldr	r1, [sp, #16]
    f56c:	it	ge
    f56e:	movge	r2, r8
    f570:	subs	r1, r1, r2
    f572:	str	r1, [sp, #16]
    f574:	ldr	r1, [sp, #20]
    f576:	sub.w	r8, r8, r2
    f57a:	subs	r2, r1, r2
    f57c:	str	r2, [sp, #20]
    f57e:	cbz	r3, f5c2 <_dtoa_r+0x6b2>
    f580:	ldr	r2, [sp, #28]
    f582:	cmp	r2, #0
    f584:	beq.w	f6d2 <_dtoa_r+0x7c2>
    f588:	cmp	r4, #0
    f58a:	ble.n	f5b4 <_dtoa_r+0x6a4>
    f58c:	mov	r1, r7
    f58e:	mov	r2, r4
    f590:	mov	r0, r6
    f592:	str	r3, [sp, #52]	; 0x34
    f594:	bl	10554 <__pow5mult>
    f598:	mov	r2, r5
    f59a:	mov	r1, r0
    f59c:	mov	r7, r0
    f59e:	mov	r0, r6
    f5a0:	bl	10400 <__multiply>
    f5a4:	mov	r1, r5
    f5a6:	str	r0, [sp, #36]	; 0x24
    f5a8:	mov	r0, r6
    f5aa:	bl	101d4 <_Bfree>
    f5ae:	ldr	r2, [sp, #36]	; 0x24
    f5b0:	ldr	r3, [sp, #52]	; 0x34
    f5b2:	mov	r5, r2
    f5b4:	subs	r2, r3, r4
    f5b6:	beq.n	f5c2 <_dtoa_r+0x6b2>
    f5b8:	mov	r1, r5
    f5ba:	mov	r0, r6
    f5bc:	bl	10554 <__pow5mult>
    f5c0:	mov	r5, r0
    f5c2:	movs	r1, #1
    f5c4:	mov	r0, r6
    f5c6:	bl	103d4 <__i2b>
    f5ca:	ldr	r3, [sp, #40]	; 0x28
    f5cc:	cmp	r3, #0
    f5ce:	mov	r4, r0
    f5d0:	ble.w	f6d6 <_dtoa_r+0x7c6>
    f5d4:	mov	r2, r3
    f5d6:	mov	r1, r0
    f5d8:	mov	r0, r6
    f5da:	bl	10554 <__pow5mult>
    f5de:	ldr	r3, [sp, #24]
    f5e0:	cmp	r3, #1
    f5e2:	mov	r4, r0
    f5e4:	ble.n	f6dc <_dtoa_r+0x7cc>
    f5e6:	movs	r3, #0
    f5e8:	str	r3, [sp, #36]	; 0x24
    f5ea:	ldr	r2, [r4, #16]
    f5ec:	add.w	r2, r4, r2, lsl #2
    f5f0:	ldr	r0, [r2, #16]
    f5f2:	bl	10338 <__hi0bits>
    f5f6:	rsb	r0, r0, #32
    f5fa:	ldr	r3, [sp, #20]
    f5fc:	add	r0, r3
    f5fe:	ands.w	r0, r0, #31
    f602:	beq.w	f72c <_dtoa_r+0x81c>
    f606:	rsb	r2, r0, #32
    f60a:	cmp	r2, #4
    f60c:	ble.w	f71a <_dtoa_r+0x80a>
    f610:	ldr	r3, [sp, #16]
    f612:	rsb	r0, r0, #28
    f616:	add	r3, r0
    f618:	str	r3, [sp, #16]
    f61a:	ldr	r3, [sp, #20]
    f61c:	add	r8, r0
    f61e:	add	r3, r0
    f620:	str	r3, [sp, #20]
    f622:	ldr	r3, [sp, #16]
    f624:	cmp	r3, #0
    f626:	ble.n	f634 <_dtoa_r+0x724>
    f628:	mov	r1, r5
    f62a:	mov	r2, r3
    f62c:	mov	r0, r6
    f62e:	bl	10608 <__lshift>
    f632:	mov	r5, r0
    f634:	ldr	r3, [sp, #20]
    f636:	cmp	r3, #0
    f638:	ble.n	f646 <_dtoa_r+0x736>
    f63a:	mov	r1, r4
    f63c:	mov	r2, r3
    f63e:	mov	r0, r6
    f640:	bl	10608 <__lshift>
    f644:	mov	r4, r0
    f646:	ldr	r3, [sp, #44]	; 0x2c
    f648:	cmp	r3, #0
    f64a:	beq.n	f730 <_dtoa_r+0x820>
    f64c:	mov	r1, r4
    f64e:	mov	r0, r5
    f650:	bl	106e0 <__mcmp>
    f654:	cmp	r0, #0
    f656:	bge.n	f730 <_dtoa_r+0x820>
    f658:	movs	r3, #0
    f65a:	mov	r1, r5
    f65c:	movs	r2, #10
    f65e:	mov	r0, r6
    f660:	bl	10218 <__multadd>
    f664:	ldr	r3, [sp, #28]
    f666:	add.w	fp, fp, #4294967295
    f66a:	mov	r5, r0
    f66c:	cmp	r3, #0
    f66e:	beq.w	f9a0 <_dtoa_r+0xa90>
    f672:	mov	r1, r7
    f674:	movs	r3, #0
    f676:	movs	r2, #10
    f678:	mov	r0, r6
    f67a:	bl	10218 <__multadd>
    f67e:	cmp.w	sl, #0
    f682:	mov	r7, r0
    f684:	bgt.w	f7ae <_dtoa_r+0x89e>
    f688:	ldr	r3, [sp, #24]
    f68a:	cmp	r3, #2
    f68c:	bgt.n	f73e <_dtoa_r+0x82e>
    f68e:	b.n	f7ae <_dtoa_r+0x89e>
    f690:	ldr	r2, [sp, #56]	; 0x38
    f692:	rsb	r2, r2, #54	; 0x36
    f696:	b.n	f53c <_dtoa_r+0x62c>
    f698:	add.w	r4, r9, #4294967295
    f69c:	cmp	r3, r4
    f69e:	itttt	lt
    f6a0:	sublt	r2, r4, r3
    f6a2:	ldrlt	r3, [sp, #40]	; 0x28
    f6a4:	addlt	r3, r3, r2
    f6a6:	strlt	r3, [sp, #40]	; 0x28
    f6a8:	itee	ge
    f6aa:	subge	r4, r3, r4
    f6ac:	movlt	r3, r4
    f6ae:	movlt	r4, #0
    f6b0:	cmp.w	r9, #0
    f6b4:	itete	lt
    f6b6:	ldrlt	r2, [sp, #16]
    f6b8:	ldrge.w	r8, [sp, #16]
    f6bc:	sublt.w	r8, r2, r9
    f6c0:	movge	r2, r9
    f6c2:	it	lt
    f6c4:	movlt	r2, #0
    f6c6:	b.n	f542 <_dtoa_r+0x632>
    f6c8:	ldr.w	r8, [sp, #16]
    f6cc:	ldr	r7, [sp, #28]
    f6ce:	mov	r4, r3
    f6d0:	b.n	f55c <_dtoa_r+0x64c>
    f6d2:	mov	r2, r3
    f6d4:	b.n	f5b8 <_dtoa_r+0x6a8>
    f6d6:	ldr	r3, [sp, #24]
    f6d8:	cmp	r3, #1
    f6da:	bgt.n	f70e <_dtoa_r+0x7fe>
    f6dc:	ldr	r3, [sp, #8]
    f6de:	cbnz	r3, f70e <_dtoa_r+0x7fe>
    f6e0:	ldr	r3, [sp, #12]
    f6e2:	ubfx	r2, r3, #0, #20
    f6e6:	cbnz	r2, f712 <_dtoa_r+0x802>
    f6e8:	bic.w	r2, r3, #2147483648	; 0x80000000
    f6ec:	lsrs	r2, r2, #20
    f6ee:	lsls	r2, r2, #20
    f6f0:	cbz	r2, f716 <_dtoa_r+0x806>
    f6f2:	ldr	r3, [sp, #16]
    f6f4:	adds	r3, #1
    f6f6:	str	r3, [sp, #16]
    f6f8:	ldr	r3, [sp, #20]
    f6fa:	adds	r3, #1
    f6fc:	str	r3, [sp, #20]
    f6fe:	movs	r3, #1
    f700:	str	r3, [sp, #36]	; 0x24
    f702:	ldr	r3, [sp, #40]	; 0x28
    f704:	cmp	r3, #0
    f706:	bne.w	f5ea <_dtoa_r+0x6da>
    f70a:	movs	r0, #1
    f70c:	b.n	f5fa <_dtoa_r+0x6ea>
    f70e:	movs	r3, #0
    f710:	b.n	f700 <_dtoa_r+0x7f0>
    f712:	ldr	r3, [sp, #8]
    f714:	b.n	f700 <_dtoa_r+0x7f0>
    f716:	str	r2, [sp, #36]	; 0x24
    f718:	b.n	f702 <_dtoa_r+0x7f2>
    f71a:	beq.n	f622 <_dtoa_r+0x712>
    f71c:	ldr	r3, [sp, #16]
    f71e:	adds	r2, #28
    f720:	add	r3, r2
    f722:	str	r3, [sp, #16]
    f724:	ldr	r3, [sp, #20]
    f726:	add	r8, r2
    f728:	add	r3, r2
    f72a:	b.n	f620 <_dtoa_r+0x710>
    f72c:	mov	r2, r0
    f72e:	b.n	f71c <_dtoa_r+0x80c>
    f730:	cmp.w	r9, #0
    f734:	bgt.n	f7a4 <_dtoa_r+0x894>
    f736:	ldr	r3, [sp, #24]
    f738:	cmp	r3, #2
    f73a:	ble.n	f7a4 <_dtoa_r+0x894>
    f73c:	mov	sl, r9
    f73e:	cmp.w	sl, #0
    f742:	bne.n	f760 <_dtoa_r+0x850>
    f744:	mov	r1, r4
    f746:	mov	r3, sl
    f748:	movs	r2, #5
    f74a:	mov	r0, r6
    f74c:	bl	10218 <__multadd>
    f750:	mov	r1, r0
    f752:	mov	r4, r0
    f754:	mov	r0, r5
    f756:	bl	106e0 <__mcmp>
    f75a:	cmp	r0, #0
    f75c:	bgt.w	f328 <_dtoa_r+0x418>
    f760:	ldr	r3, [sp, #32]
    f762:	ldr.w	r8, [sp, #4]
    f766:	mvn.w	fp, r3
    f76a:	mov.w	r9, #0
    f76e:	mov	r1, r4
    f770:	mov	r0, r6
    f772:	bl	101d4 <_Bfree>
    f776:	cmp	r7, #0
    f778:	beq.w	f4be <_dtoa_r+0x5ae>
    f77c:	cmp.w	r9, #0
    f780:	beq.n	f78e <_dtoa_r+0x87e>
    f782:	cmp	r9, r7
    f784:	beq.n	f78e <_dtoa_r+0x87e>
    f786:	mov	r1, r9
    f788:	mov	r0, r6
    f78a:	bl	101d4 <_Bfree>
    f78e:	mov	r1, r7
    f790:	mov	r0, r6
    f792:	bl	101d4 <_Bfree>
    f796:	b.n	f4be <_dtoa_r+0x5ae>
    f798:	movs	r4, #0
    f79a:	mov	r7, r4
    f79c:	b.n	f760 <_dtoa_r+0x850>
    f79e:	mov	fp, r2
    f7a0:	mov	r7, r4
    f7a2:	b.n	f328 <_dtoa_r+0x418>
    f7a4:	ldr	r3, [sp, #28]
    f7a6:	mov	sl, r9
    f7a8:	cmp	r3, #0
    f7aa:	beq.w	f9ae <_dtoa_r+0xa9e>
    f7ae:	cmp.w	r8, #0
    f7b2:	ble.n	f7c0 <_dtoa_r+0x8b0>
    f7b4:	mov	r1, r7
    f7b6:	mov	r2, r8
    f7b8:	mov	r0, r6
    f7ba:	bl	10608 <__lshift>
    f7be:	mov	r7, r0
    f7c0:	ldr	r3, [sp, #36]	; 0x24
    f7c2:	cmp	r3, #0
    f7c4:	beq.n	f882 <_dtoa_r+0x972>
    f7c6:	ldr	r1, [r7, #4]
    f7c8:	mov	r0, r6
    f7ca:	bl	10154 <_Balloc>
    f7ce:	mov	r8, r0
    f7d0:	cbnz	r0, f7de <_dtoa_r+0x8ce>
    f7d2:	ldr	r3, [pc, #520]	; (f9dc <_dtoa_r+0xacc>)
    f7d4:	mov	r2, r0
    f7d6:	movw	r1, #751	; 0x2ef
    f7da:	b.w	ef40 <_dtoa_r+0x30>
    f7de:	ldr	r2, [r7, #16]
    f7e0:	adds	r2, #2
    f7e2:	lsls	r2, r2, #2
    f7e4:	add.w	r1, r7, #12
    f7e8:	adds	r0, #12
    f7ea:	bl	a254 <memcpy>
    f7ee:	movs	r2, #1
    f7f0:	mov	r1, r8
    f7f2:	mov	r0, r6
    f7f4:	bl	10608 <__lshift>
    f7f8:	ldr	r3, [sp, #4]
    f7fa:	adds	r3, #1
    f7fc:	str	r3, [sp, #16]
    f7fe:	ldr	r3, [sp, #4]
    f800:	add	r3, sl
    f802:	str	r3, [sp, #32]
    f804:	ldr	r3, [sp, #8]
    f806:	and.w	r3, r3, #1
    f80a:	mov	r9, r7
    f80c:	str	r3, [sp, #28]
    f80e:	mov	r7, r0
    f810:	ldr	r3, [sp, #16]
    f812:	mov	r1, r4
    f814:	subs	r3, #1
    f816:	mov	r0, r5
    f818:	str	r3, [sp, #8]
    f81a:	bl	edfc <quorem>
    f81e:	mov	r3, r0
    f820:	adds	r3, #48	; 0x30
    f822:	str	r0, [sp, #20]
    f824:	mov	r1, r9
    f826:	mov	r0, r5
    f828:	str	r3, [sp, #36]	; 0x24
    f82a:	bl	106e0 <__mcmp>
    f82e:	mov	r2, r7
    f830:	mov	sl, r0
    f832:	mov	r1, r4
    f834:	mov	r0, r6
    f836:	bl	10718 <__mdiff>
    f83a:	ldr	r2, [r0, #12]
    f83c:	ldr	r3, [sp, #36]	; 0x24
    f83e:	mov	r8, r0
    f840:	cbnz	r2, f886 <_dtoa_r+0x976>
    f842:	mov	r1, r0
    f844:	mov	r0, r5
    f846:	bl	106e0 <__mcmp>
    f84a:	ldr	r3, [sp, #36]	; 0x24
    f84c:	mov	r2, r0
    f84e:	mov	r1, r8
    f850:	mov	r0, r6
    f852:	strd	r3, r2, [sp, #36]	; 0x24
    f856:	bl	101d4 <_Bfree>
    f85a:	ldr	r3, [sp, #24]
    f85c:	ldr	r2, [sp, #40]	; 0x28
    f85e:	ldr.w	r8, [sp, #16]
    f862:	orr.w	r1, r3, r2
    f866:	ldr	r3, [sp, #28]
    f868:	orrs	r1, r3
    f86a:	ldr	r3, [sp, #36]	; 0x24
    f86c:	bne.n	f88a <_dtoa_r+0x97a>
    f86e:	cmp	r3, #57	; 0x39
    f870:	beq.n	f8c6 <_dtoa_r+0x9b6>
    f872:	cmp.w	sl, #0
    f876:	ble.n	f87c <_dtoa_r+0x96c>
    f878:	ldr	r3, [sp, #20]
    f87a:	adds	r3, #49	; 0x31
    f87c:	ldr	r2, [sp, #8]
    f87e:	strb	r3, [r2, #0]
    f880:	b.n	f76e <_dtoa_r+0x85e>
    f882:	mov	r0, r7
    f884:	b.n	f7f8 <_dtoa_r+0x8e8>
    f886:	movs	r2, #1
    f888:	b.n	f84e <_dtoa_r+0x93e>
    f88a:	cmp.w	sl, #0
    f88e:	blt.n	f89e <_dtoa_r+0x98e>
    f890:	ldr	r1, [sp, #24]
    f892:	orr.w	sl, r1, sl
    f896:	ldr	r1, [sp, #28]
    f898:	orrs.w	sl, sl, r1
    f89c:	bne.n	f8e0 <_dtoa_r+0x9d0>
    f89e:	cmp	r2, #0
    f8a0:	ble.n	f87c <_dtoa_r+0x96c>
    f8a2:	mov	r1, r5
    f8a4:	movs	r2, #1
    f8a6:	mov	r0, r6
    f8a8:	str	r3, [sp, #16]
    f8aa:	bl	10608 <__lshift>
    f8ae:	mov	r1, r4
    f8b0:	mov	r5, r0
    f8b2:	bl	106e0 <__mcmp>
    f8b6:	cmp	r0, #0
    f8b8:	ldr	r3, [sp, #16]
    f8ba:	bgt.n	f8c2 <_dtoa_r+0x9b2>
    f8bc:	bne.n	f87c <_dtoa_r+0x96c>
    f8be:	lsls	r2, r3, #31
    f8c0:	bpl.n	f87c <_dtoa_r+0x96c>
    f8c2:	cmp	r3, #57	; 0x39
    f8c4:	bne.n	f878 <_dtoa_r+0x968>
    f8c6:	ldr	r2, [sp, #8]
    f8c8:	movs	r3, #57	; 0x39
    f8ca:	strb	r3, [r2, #0]
    f8cc:	mov	r3, r8
    f8ce:	mov	r8, r3
    f8d0:	subs	r3, #1
    f8d2:	ldrb.w	r2, [r8, #-1]
    f8d6:	cmp	r2, #57	; 0x39
    f8d8:	beq.n	f97e <_dtoa_r+0xa6e>
    f8da:	adds	r2, #1
    f8dc:	strb	r2, [r3, #0]
    f8de:	b.n	f76e <_dtoa_r+0x85e>
    f8e0:	cmp	r2, #0
    f8e2:	ble.n	f8ec <_dtoa_r+0x9dc>
    f8e4:	cmp	r3, #57	; 0x39
    f8e6:	beq.n	f8c6 <_dtoa_r+0x9b6>
    f8e8:	adds	r3, #1
    f8ea:	b.n	f87c <_dtoa_r+0x96c>
    f8ec:	ldr	r2, [sp, #16]
    f8ee:	ldr	r1, [sp, #32]
    f8f0:	strb.w	r3, [r2, #-1]
    f8f4:	cmp	r2, r1
    f8f6:	beq.n	f950 <_dtoa_r+0xa40>
    f8f8:	mov	r1, r5
    f8fa:	movs	r3, #0
    f8fc:	movs	r2, #10
    f8fe:	mov	r0, r6
    f900:	bl	10218 <__multadd>
    f904:	cmp	r9, r7
    f906:	mov	r5, r0
    f908:	mov.w	r3, #0
    f90c:	mov.w	r2, #10
    f910:	mov	r1, r9
    f912:	mov	r0, r6
    f914:	bne.n	f926 <_dtoa_r+0xa16>
    f916:	bl	10218 <__multadd>
    f91a:	mov	r9, r0
    f91c:	mov	r7, r0
    f91e:	ldr	r3, [sp, #16]
    f920:	adds	r3, #1
    f922:	str	r3, [sp, #16]
    f924:	b.n	f810 <_dtoa_r+0x900>
    f926:	bl	10218 <__multadd>
    f92a:	mov	r1, r7
    f92c:	mov	r9, r0
    f92e:	movs	r3, #0
    f930:	movs	r2, #10
    f932:	mov	r0, r6
    f934:	bl	10218 <__multadd>
    f938:	mov	r7, r0
    f93a:	b.n	f91e <_dtoa_r+0xa0e>
    f93c:	cmp.w	sl, #0
    f940:	ldr	r2, [sp, #4]
    f942:	ite	gt
    f944:	movgt	r8, sl
    f946:	movle.w	r8, #1
    f94a:	add	r8, r2
    f94c:	mov.w	r9, #0
    f950:	mov	r1, r5
    f952:	movs	r2, #1
    f954:	mov	r0, r6
    f956:	str	r3, [sp, #8]
    f958:	bl	10608 <__lshift>
    f95c:	mov	r1, r4
    f95e:	mov	r5, r0
    f960:	bl	106e0 <__mcmp>
    f964:	cmp	r0, #0
    f966:	bgt.n	f8cc <_dtoa_r+0x9bc>
    f968:	bne.n	f970 <_dtoa_r+0xa60>
    f96a:	ldr	r3, [sp, #8]
    f96c:	lsls	r3, r3, #31
    f96e:	bmi.n	f8cc <_dtoa_r+0x9bc>
    f970:	mov	r3, r8
    f972:	mov	r8, r3
    f974:	ldrb.w	r2, [r3, #-1]!
    f978:	cmp	r2, #48	; 0x30
    f97a:	beq.n	f972 <_dtoa_r+0xa62>
    f97c:	b.n	f76e <_dtoa_r+0x85e>
    f97e:	ldr	r2, [sp, #4]
    f980:	cmp	r2, r3
    f982:	bne.n	f8ce <_dtoa_r+0x9be>
    f984:	add.w	fp, fp, #1
    f988:	movs	r3, #49	; 0x31
    f98a:	b.n	f87e <_dtoa_r+0x96e>
    f98c:	ldr	r3, [pc, #80]	; (f9e0 <_dtoa_r+0xad0>)
    f98e:	b.w	efe6 <_dtoa_r+0xd6>
    f992:	ldr	r3, [sp, #116]	; 0x74
    f994:	cmp	r3, #0
    f996:	bne.w	efa4 <_dtoa_r+0x94>
    f99a:	ldr	r3, [pc, #72]	; (f9e4 <_dtoa_r+0xad4>)
    f99c:	b.w	efe6 <_dtoa_r+0xd6>
    f9a0:	cmp.w	sl, #0
    f9a4:	bgt.n	f9ae <_dtoa_r+0xa9e>
    f9a6:	ldr	r3, [sp, #24]
    f9a8:	cmp	r3, #2
    f9aa:	bgt.w	f73e <_dtoa_r+0x82e>
    f9ae:	ldr.w	r8, [sp, #4]
    f9b2:	mov	r1, r4
    f9b4:	mov	r0, r5
    f9b6:	bl	edfc <quorem>
    f9ba:	add.w	r3, r0, #48	; 0x30
    f9be:	strb.w	r3, [r8], #1
    f9c2:	ldr	r2, [sp, #4]
    f9c4:	sub.w	r2, r8, r2
    f9c8:	cmp	sl, r2
    f9ca:	ble.n	f93c <_dtoa_r+0xa2c>
    f9cc:	mov	r1, r5
    f9ce:	movs	r3, #0
    f9d0:	movs	r2, #10
    f9d2:	mov	r0, r6
    f9d4:	bl	10218 <__multadd>
    f9d8:	mov	r5, r0
    f9da:	b.n	f9b2 <_dtoa_r+0xaa2>
    f9dc:	.word	0x200013c9
    f9e0:	.word	0x20001187
    f9e4:	.word	0x2000134c

0000f9e8 <_free_r>:
    f9e8:	push	{r0, r1, r2, r4, r5, lr}
    f9ea:	cmp	r1, #0
    f9ec:	beq.n	fa78 <_free_r+0x90>
    f9ee:	ldr.w	r3, [r1, #-4]
    f9f2:	str	r0, [sp, #4]
    f9f4:	cmp	r3, #0
    f9f6:	sub.w	r4, r1, #4
    f9fa:	it	lt
    f9fc:	addlt	r4, r4, r3
    f9fe:	bl	cd9c <__malloc_lock>
    fa02:	ldr	r2, [pc, #120]	; (fa7c <_free_r+0x94>)
    fa04:	ldr	r0, [sp, #4]
    fa06:	ldr	r3, [r2, #0]
    fa08:	cbnz	r3, fa18 <_free_r+0x30>
    fa0a:	str	r3, [r4, #4]
    fa0c:	str	r4, [r2, #0]
    fa0e:	add	sp, #12
    fa10:	ldmia.w	sp!, {r4, r5, lr}
    fa14:	b.w	cda8 <__malloc_unlock>
    fa18:	cmp	r3, r4
    fa1a:	bls.n	fa2e <_free_r+0x46>
    fa1c:	ldr	r5, [r4, #0]
    fa1e:	adds	r1, r4, r5
    fa20:	cmp	r3, r1
    fa22:	itttt	eq
    fa24:	ldreq	r1, [r3, #0]
    fa26:	ldreq	r3, [r3, #4]
    fa28:	addeq	r1, r1, r5
    fa2a:	streq	r1, [r4, #0]
    fa2c:	b.n	fa0a <_free_r+0x22>
    fa2e:	mov	r2, r3
    fa30:	ldr	r3, [r3, #4]
    fa32:	cbz	r3, fa38 <_free_r+0x50>
    fa34:	cmp	r3, r4
    fa36:	bls.n	fa2e <_free_r+0x46>
    fa38:	ldr	r1, [r2, #0]
    fa3a:	adds	r5, r2, r1
    fa3c:	cmp	r5, r4
    fa3e:	bne.n	fa58 <_free_r+0x70>
    fa40:	ldr	r4, [r4, #0]
    fa42:	add	r1, r4
    fa44:	adds	r4, r2, r1
    fa46:	cmp	r3, r4
    fa48:	str	r1, [r2, #0]
    fa4a:	bne.n	fa0e <_free_r+0x26>
    fa4c:	ldr	r4, [r3, #0]
    fa4e:	ldr	r3, [r3, #4]
    fa50:	str	r3, [r2, #4]
    fa52:	add	r4, r1
    fa54:	str	r4, [r2, #0]
    fa56:	b.n	fa0e <_free_r+0x26>
    fa58:	bls.n	fa60 <_free_r+0x78>
    fa5a:	movs	r3, #12
    fa5c:	str	r3, [r0, #0]
    fa5e:	b.n	fa0e <_free_r+0x26>
    fa60:	ldr	r5, [r4, #0]
    fa62:	adds	r1, r4, r5
    fa64:	cmp	r3, r1
    fa66:	itt	eq
    fa68:	ldreq	r1, [r3, #0]
    fa6a:	ldreq	r3, [r3, #4]
    fa6c:	str	r3, [r4, #4]
    fa6e:	itt	eq
    fa70:	addeq	r1, r1, r5
    fa72:	streq	r1, [r4, #0]
    fa74:	str	r4, [r2, #4]
    fa76:	b.n	fa0e <_free_r+0x26>
    fa78:	add	sp, #12
    fa7a:	pop	{r4, r5, pc}
    fa7c:	.word	0x20014854

0000fa80 <rshift>:
    fa80:	ldr	r3, [r0, #16]
    fa82:	cmp.w	r3, r1, asr #5
    fa86:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fa8a:	mov.w	r2, r1, asr #5
    fa8e:	add.w	r4, r0, #20
    fa92:	ble.n	fb20 <rshift+0xa0>
    fa94:	ands.w	r1, r1, #31
    fa98:	add.w	r6, r4, r3, lsl #2
    fa9c:	add.w	r5, r4, r2, lsl #2
    faa0:	bne.n	fabc <rshift+0x3c>
    faa2:	add.w	r7, r0, #16
    faa6:	mov	r1, r5
    faa8:	cmp	r1, r6
    faaa:	bcc.n	fb16 <rshift+0x96>
    faac:	subs	r3, r3, r2
    faae:	lsls	r3, r3, #2
    fab0:	subs	r2, r5, #3
    fab2:	cmp	r6, r2
    fab4:	it	cc
    fab6:	movcc	r3, #0
    fab8:	add	r3, r4
    faba:	b.n	fae8 <rshift+0x68>
    fabc:	ldr.w	r7, [r4, r2, lsl #2]
    fac0:	rsb	r8, r1, #32
    fac4:	lsrs	r7, r1
    fac6:	add.w	lr, r5, #4
    faca:	mov	r9, r4
    facc:	cmp	r6, lr
    face:	mov	ip, lr
    fad0:	bhi.n	fafe <rshift+0x7e>
    fad2:	subs	r2, r3, r2
    fad4:	lsls	r2, r2, #2
    fad6:	subs	r2, #4
    fad8:	adds	r5, #1
    fada:	cmp	r6, r5
    fadc:	it	cc
    fade:	movcc	r2, #0
    fae0:	adds	r3, r4, r2
    fae2:	str	r7, [r4, r2]
    fae4:	cbz	r7, fae8 <rshift+0x68>
    fae6:	adds	r3, #4
    fae8:	subs	r2, r3, r4
    faea:	cmp	r3, r4
    faec:	mov.w	r2, r2, asr #2
    faf0:	it	eq
    faf2:	moveq	r3, #0
    faf4:	str	r2, [r0, #16]
    faf6:	it	eq
    faf8:	streq	r3, [r0, #20]
    fafa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fafe:	ldr.w	ip, [ip]
    fb02:	lsl.w	ip, ip, r8
    fb06:	orr.w	r7, ip, r7
    fb0a:	str.w	r7, [r9], #4
    fb0e:	ldr.w	r7, [lr], #4
    fb12:	lsrs	r7, r1
    fb14:	b.n	facc <rshift+0x4c>
    fb16:	ldr.w	ip, [r1], #4
    fb1a:	str.w	ip, [r7, #4]!
    fb1e:	b.n	faa8 <rshift+0x28>
    fb20:	mov	r3, r4
    fb22:	b.n	fae8 <rshift+0x68>

0000fb24 <__hexdig_fun>:
    fb24:	sub.w	r3, r0, #48	; 0x30
    fb28:	cmp	r3, #9
    fb2a:	bhi.n	fb32 <__hexdig_fun+0xe>
    fb2c:	subs	r0, #32
    fb2e:	uxtb	r0, r0
    fb30:	bx	lr
    fb32:	sub.w	r3, r0, #97	; 0x61
    fb36:	cmp	r3, #5
    fb38:	bhi.n	fb3e <__hexdig_fun+0x1a>
    fb3a:	subs	r0, #71	; 0x47
    fb3c:	b.n	fb2e <__hexdig_fun+0xa>
    fb3e:	sub.w	r3, r0, #65	; 0x41
    fb42:	cmp	r3, #5
    fb44:	bhi.n	fb4a <__hexdig_fun+0x26>
    fb46:	subs	r0, #39	; 0x27
    fb48:	b.n	fb2e <__hexdig_fun+0xa>
    fb4a:	movs	r0, #0
    fb4c:	bx	lr
	...

0000fb50 <__gethex>:
    fb50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fb54:	mov	r7, r2
    fb56:	ldr	r2, [r1, #0]
    fb58:	sub	sp, #20
    fb5a:	add.w	fp, r2, #2
    fb5e:	rsb	r2, r2, #4278255360	; 0xff00ff00
    fb62:	add.w	r2, r2, #16711680	; 0xff0000
    fb66:	mov	r9, r0
    fb68:	mov	sl, r1
    fb6a:	str	r3, [sp, #8]
    fb6c:	adds	r2, #254	; 0xfe
    fb6e:	add.w	r3, r2, fp
    fb72:	mov	r8, fp
    fb74:	ldrb.w	r0, [fp], #1
    fb78:	str	r3, [sp, #4]
    fb7a:	cmp	r0, #48	; 0x30
    fb7c:	beq.n	fb6e <__gethex+0x1e>
    fb7e:	bl	fb24 <__hexdig_fun>
    fb82:	mov	r4, r0
    fb84:	cmp	r0, #0
    fb86:	bne.n	fbfa <__gethex+0xaa>
    fb88:	ldr	r1, [pc, #668]	; (fe28 <__gethex+0x2d8>)
    fb8a:	movs	r2, #1
    fb8c:	mov	r0, r8
    fb8e:	bl	ebe4 <strncmp>
    fb92:	mov	r6, r0
    fb94:	cmp	r0, #0
    fb96:	bne.n	fc6c <__gethex+0x11c>
    fb98:	ldrb.w	r0, [r8, #1]
    fb9c:	mov	r5, fp
    fb9e:	bl	fb24 <__hexdig_fun>
    fba2:	cmp	r0, #0
    fba4:	beq.n	fc70 <__gethex+0x120>
    fba6:	mov	r2, fp
    fba8:	ldrb	r0, [r2, #0]
    fbaa:	cmp	r0, #48	; 0x30
    fbac:	mov	r8, r2
    fbae:	add.w	r2, r2, #1
    fbb2:	beq.n	fba8 <__gethex+0x58>
    fbb4:	bl	fb24 <__hexdig_fun>
    fbb8:	movs	r3, #1
    fbba:	clz	r4, r0
    fbbe:	lsrs	r4, r4, #5
    fbc0:	mov	r6, fp
    fbc2:	str	r3, [sp, #4]
    fbc4:	mov	r2, r8
    fbc6:	mov	r5, r2
    fbc8:	adds	r2, #1
    fbca:	ldrb	r0, [r5, #0]
    fbcc:	bl	fb24 <__hexdig_fun>
    fbd0:	cmp	r0, #0
    fbd2:	bne.n	fbc6 <__gethex+0x76>
    fbd4:	ldr	r1, [pc, #592]	; (fe28 <__gethex+0x2d8>)
    fbd6:	movs	r2, #1
    fbd8:	mov	r0, r5
    fbda:	bl	ebe4 <strncmp>
    fbde:	cbnz	r0, fc00 <__gethex+0xb0>
    fbe0:	cbnz	r6, fbf4 <__gethex+0xa4>
    fbe2:	adds	r6, r5, #1
    fbe4:	mov	r2, r6
    fbe6:	mov	r5, r2
    fbe8:	adds	r2, #1
    fbea:	ldrb	r0, [r5, #0]
    fbec:	bl	fb24 <__hexdig_fun>
    fbf0:	cmp	r0, #0
    fbf2:	bne.n	fbe6 <__gethex+0x96>
    fbf4:	subs	r3, r6, r5
    fbf6:	lsls	r6, r3, #2
    fbf8:	b.n	fc04 <__gethex+0xb4>
    fbfa:	movs	r4, #0
    fbfc:	mov	r6, r4
    fbfe:	b.n	fbc4 <__gethex+0x74>
    fc00:	cmp	r6, #0
    fc02:	bne.n	fbf4 <__gethex+0xa4>
    fc04:	ldrb	r3, [r5, #0]
    fc06:	and.w	r3, r3, #223	; 0xdf
    fc0a:	cmp	r3, #80	; 0x50
    fc0c:	bne.n	fc8a <__gethex+0x13a>
    fc0e:	ldrb	r3, [r5, #1]
    fc10:	cmp	r3, #43	; 0x2b
    fc12:	beq.n	fc74 <__gethex+0x124>
    fc14:	cmp	r3, #45	; 0x2d
    fc16:	beq.n	fc7c <__gethex+0x12c>
    fc18:	adds	r1, r5, #1
    fc1a:	mov.w	fp, #0
    fc1e:	ldrb	r0, [r1, #0]
    fc20:	bl	fb24 <__hexdig_fun>
    fc24:	subs	r2, r0, #1
    fc26:	uxtb	r2, r2
    fc28:	cmp	r2, #24
    fc2a:	bhi.n	fc8a <__gethex+0x13a>
    fc2c:	sub.w	r2, r0, #16
    fc30:	ldrb.w	r0, [r1, #1]!
    fc34:	bl	fb24 <__hexdig_fun>
    fc38:	add.w	ip, r0, #4294967295
    fc3c:	uxtb.w	ip, ip
    fc40:	cmp.w	ip, #24
    fc44:	bls.n	fc82 <__gethex+0x132>
    fc46:	cmp.w	fp, #0
    fc4a:	beq.n	fc4e <__gethex+0xfe>
    fc4c:	negs	r2, r2
    fc4e:	add	r6, r2
    fc50:	str.w	r1, [sl]
    fc54:	cbz	r4, fc8e <__gethex+0x13e>
    fc56:	ldr	r3, [sp, #4]
    fc58:	cmp	r3, #0
    fc5a:	ite	ne
    fc5c:	movne.w	r8, #0
    fc60:	moveq.w	r8, #6
    fc64:	mov	r0, r8
    fc66:	add	sp, #20
    fc68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc6c:	mov	r5, r8
    fc6e:	mov	r6, r4
    fc70:	movs	r4, #1
    fc72:	b.n	fc04 <__gethex+0xb4>
    fc74:	mov.w	fp, #0
    fc78:	adds	r1, r5, #2
    fc7a:	b.n	fc1e <__gethex+0xce>
    fc7c:	mov.w	fp, #1
    fc80:	b.n	fc78 <__gethex+0x128>
    fc82:	movs	r3, #10
    fc84:	mla	r0, r3, r2, r0
    fc88:	b.n	fc2c <__gethex+0xdc>
    fc8a:	mov	r1, r5
    fc8c:	b.n	fc50 <__gethex+0x100>
    fc8e:	sub.w	r3, r5, r8
    fc92:	subs	r3, #1
    fc94:	mov	r1, r4
    fc96:	cmp	r3, #7
    fc98:	bgt.n	fcb0 <__gethex+0x160>
    fc9a:	mov	r0, r9
    fc9c:	bl	10154 <_Balloc>
    fca0:	mov	r4, r0
    fca2:	cbnz	r0, fcb6 <__gethex+0x166>
    fca4:	ldr	r3, [pc, #388]	; (fe2c <__gethex+0x2dc>)
    fca6:	mov	r2, r0
    fca8:	movs	r1, #228	; 0xe4
    fcaa:	ldr	r0, [pc, #388]	; (fe30 <__gethex+0x2e0>)
    fcac:	bl	1169c <__assert_func>
    fcb0:	adds	r1, #1
    fcb2:	asrs	r3, r3, #1
    fcb4:	b.n	fc96 <__gethex+0x146>
    fcb6:	add.w	sl, r0, #20
    fcba:	movs	r3, #0
    fcbc:	ldr	r1, [pc, #360]	; (fe28 <__gethex+0x2d8>)
    fcbe:	str.w	sl, [sp, #4]
    fcc2:	mov	fp, r3
    fcc4:	cmp	r8, r5
    fcc6:	bcc.n	fd4e <__gethex+0x1fe>
    fcc8:	ldr	r0, [sp, #4]
    fcca:	str.w	fp, [r0], #4
    fcce:	sub.w	r0, r0, sl
    fcd2:	asrs	r0, r0, #2
    fcd4:	str	r0, [r4, #16]
    fcd6:	mov.w	r8, r0, lsl #5
    fcda:	mov	r0, fp
    fcdc:	bl	10338 <__hi0bits>
    fce0:	ldr	r5, [r7, #0]
    fce2:	sub.w	r0, r8, r0
    fce6:	cmp	r0, r5
    fce8:	ble.n	fd9e <__gethex+0x24e>
    fcea:	sub.w	r8, r0, r5
    fcee:	mov	r1, r8
    fcf0:	mov	r0, r4
    fcf2:	bl	10a66 <__any_on>
    fcf6:	mov	fp, r0
    fcf8:	cbz	r0, fd2a <__gethex+0x1da>
    fcfa:	add.w	r3, r8, #4294967295
    fcfe:	asrs	r1, r3, #5
    fd00:	and.w	r2, r3, #31
    fd04:	ldr.w	r1, [sl, r1, lsl #2]
    fd08:	mov.w	fp, #1
    fd0c:	lsl.w	r2, fp, r2
    fd10:	tst	r2, r1
    fd12:	beq.n	fd2a <__gethex+0x1da>
    fd14:	cmp	r3, fp
    fd16:	ble.n	fd26 <__gethex+0x1d6>
    fd18:	sub.w	r1, r8, #2
    fd1c:	mov	r0, r4
    fd1e:	bl	10a66 <__any_on>
    fd22:	cmp	r0, #0
    fd24:	bne.n	fd98 <__gethex+0x248>
    fd26:	mov.w	fp, #2
    fd2a:	mov	r1, r8
    fd2c:	mov	r0, r4
    fd2e:	bl	fa80 <rshift>
    fd32:	add	r6, r8
    fd34:	ldr	r3, [r7, #8]
    fd36:	cmp	r3, r6
    fd38:	bge.n	fdbe <__gethex+0x26e>
    fd3a:	mov	r1, r4
    fd3c:	mov	r0, r9
    fd3e:	bl	101d4 <_Bfree>
    fd42:	ldr	r2, [sp, #56]	; 0x38
    fd44:	movs	r3, #0
    fd46:	str	r3, [r2, #0]
    fd48:	mov.w	r8, #163	; 0xa3
    fd4c:	b.n	fc64 <__gethex+0x114>
    fd4e:	ldrb.w	r2, [r5, #-1]!
    fd52:	cmp	r2, #46	; 0x2e
    fd54:	beq.n	fd80 <__gethex+0x230>
    fd56:	cmp	r3, #32
    fd58:	bne.n	fd68 <__gethex+0x218>
    fd5a:	ldr	r3, [sp, #4]
    fd5c:	str.w	fp, [r3], #4
    fd60:	mov.w	fp, #0
    fd64:	str	r3, [sp, #4]
    fd66:	mov	r3, fp
    fd68:	ldrb	r0, [r5, #0]
    fd6a:	str	r3, [sp, #12]
    fd6c:	bl	fb24 <__hexdig_fun>
    fd70:	ldr	r3, [sp, #12]
    fd72:	and.w	r0, r0, #15
    fd76:	lsls	r0, r3
    fd78:	orr.w	fp, fp, r0
    fd7c:	adds	r3, #4
    fd7e:	b.n	fcc4 <__gethex+0x174>
    fd80:	cmp	r8, r5
    fd82:	bhi.n	fd56 <__gethex+0x206>
    fd84:	movs	r2, #1
    fd86:	mov	r0, r5
    fd88:	str	r3, [sp, #12]
    fd8a:	bl	ebe4 <strncmp>
    fd8e:	ldr	r1, [pc, #152]	; (fe28 <__gethex+0x2d8>)
    fd90:	ldr	r3, [sp, #12]
    fd92:	cmp	r0, #0
    fd94:	bne.n	fd56 <__gethex+0x206>
    fd96:	b.n	fcc4 <__gethex+0x174>
    fd98:	mov.w	fp, #3
    fd9c:	b.n	fd2a <__gethex+0x1da>
    fd9e:	bge.n	fdb8 <__gethex+0x268>
    fda0:	sub.w	r8, r5, r0
    fda4:	mov	r1, r4
    fda6:	mov	r2, r8
    fda8:	mov	r0, r9
    fdaa:	bl	10608 <__lshift>
    fdae:	sub.w	r6, r6, r8
    fdb2:	mov	r4, r0
    fdb4:	add.w	sl, r0, #20
    fdb8:	mov.w	fp, #0
    fdbc:	b.n	fd34 <__gethex+0x1e4>
    fdbe:	ldr	r3, [r7, #4]
    fdc0:	cmp	r3, r6
    fdc2:	ble.n	feac <__gethex+0x35c>
    fdc4:	subs	r6, r3, r6
    fdc6:	cmp	r5, r6
    fdc8:	bgt.n	fe34 <__gethex+0x2e4>
    fdca:	ldr	r3, [r7, #12]
    fdcc:	cmp	r3, #2
    fdce:	beq.n	fe18 <__gethex+0x2c8>
    fdd0:	cmp	r3, #3
    fdd2:	beq.n	fe20 <__gethex+0x2d0>
    fdd4:	cmp	r3, #1
    fdd6:	bne.n	fe04 <__gethex+0x2b4>
    fdd8:	cmp	r5, r6
    fdda:	bne.n	fe04 <__gethex+0x2b4>
    fddc:	cmp	r5, #1
    fdde:	bne.n	fdf8 <__gethex+0x2a8>
    fde0:	ldr	r2, [sp, #8]
    fde2:	ldr	r3, [r7, #4]
    fde4:	str	r3, [r2, #0]
    fde6:	movs	r3, #1
    fde8:	str	r3, [r4, #16]
    fdea:	str.w	r3, [sl]
    fdee:	ldr	r3, [sp, #56]	; 0x38
    fdf0:	mov.w	r8, #98	; 0x62
    fdf4:	str	r4, [r3, #0]
    fdf6:	b.n	fc64 <__gethex+0x114>
    fdf8:	subs	r1, r5, #1
    fdfa:	mov	r0, r4
    fdfc:	bl	10a66 <__any_on>
    fe00:	cmp	r0, #0
    fe02:	bne.n	fde0 <__gethex+0x290>
    fe04:	mov	r1, r4
    fe06:	mov	r0, r9
    fe08:	bl	101d4 <_Bfree>
    fe0c:	ldr	r2, [sp, #56]	; 0x38
    fe0e:	movs	r3, #0
    fe10:	str	r3, [r2, #0]
    fe12:	mov.w	r8, #80	; 0x50
    fe16:	b.n	fc64 <__gethex+0x114>
    fe18:	ldr	r3, [sp, #60]	; 0x3c
    fe1a:	cmp	r3, #0
    fe1c:	bne.n	fe04 <__gethex+0x2b4>
    fe1e:	b.n	fde0 <__gethex+0x290>
    fe20:	ldr	r3, [sp, #60]	; 0x3c
    fe22:	cmp	r3, #0
    fe24:	bne.n	fde0 <__gethex+0x290>
    fe26:	b.n	fe04 <__gethex+0x2b4>
    fe28:	.word	0x20000d02
    fe2c:	.word	0x200013c9
    fe30:	.word	0x200011ea
    fe34:	add.w	r8, r6, #4294967295
    fe38:	cmp.w	fp, #0
    fe3c:	bne.n	fea6 <__gethex+0x356>
    fe3e:	cmp.w	r8, #0
    fe42:	beq.n	fe4e <__gethex+0x2fe>
    fe44:	mov	r1, r8
    fe46:	mov	r0, r4
    fe48:	bl	10a66 <__any_on>
    fe4c:	mov	fp, r0
    fe4e:	mov.w	r2, r8, asr #5
    fe52:	movs	r3, #1
    fe54:	ldr.w	r2, [sl, r2, lsl #2]
    fe58:	and.w	r8, r8, #31
    fe5c:	lsl.w	r3, r3, r8
    fe60:	tst	r3, r2
    fe62:	mov	r1, r6
    fe64:	mov	r0, r4
    fe66:	it	ne
    fe68:	orrne.w	fp, fp, #2
    fe6c:	subs	r5, r5, r6
    fe6e:	bl	fa80 <rshift>
    fe72:	ldr	r6, [r7, #4]
    fe74:	mov.w	r8, #2
    fe78:	cmp.w	fp, #0
    fe7c:	beq.n	ff14 <__gethex+0x3c4>
    fe7e:	ldr	r3, [r7, #12]
    fe80:	cmp	r3, #2
    fe82:	beq.n	feb2 <__gethex+0x362>
    fe84:	cmp	r3, #3
    fe86:	beq.n	feba <__gethex+0x36a>
    fe88:	cmp	r3, #1
    fe8a:	bne.n	fea0 <__gethex+0x350>
    fe8c:	tst.w	fp, #2
    fe90:	beq.n	fea0 <__gethex+0x350>
    fe92:	ldr.w	r3, [sl]
    fe96:	orr.w	fp, fp, r3
    fe9a:	tst.w	fp, #1
    fe9e:	bne.n	fec0 <__gethex+0x370>
    fea0:	orr.w	r8, r8, #16
    fea4:	b.n	ff14 <__gethex+0x3c4>
    fea6:	mov.w	fp, #1
    feaa:	b.n	fe4e <__gethex+0x2fe>
    feac:	mov.w	r8, #1
    feb0:	b.n	fe78 <__gethex+0x328>
    feb2:	ldr	r3, [sp, #60]	; 0x3c
    feb4:	rsb	r3, r3, #1
    feb8:	str	r3, [sp, #60]	; 0x3c
    feba:	ldr	r3, [sp, #60]	; 0x3c
    febc:	cmp	r3, #0
    febe:	beq.n	fea0 <__gethex+0x350>
    fec0:	ldr.w	fp, [r4, #16]
    fec4:	add.w	r2, r4, #20
    fec8:	mov.w	r3, fp, lsl #2
    fecc:	str	r3, [sp, #4]
    fece:	add.w	r0, r2, fp, lsl #2
    fed2:	movs	r3, #0
    fed4:	mov	ip, r2
    fed6:	ldr.w	r1, [r2], #4
    feda:	cmp.w	r1, #4294967295
    fede:	beq.n	ff1e <__gethex+0x3ce>
    fee0:	adds	r1, #1
    fee2:	str.w	r1, [ip]
    fee6:	cmp.w	r8, #2
    feea:	add.w	r2, r4, #20
    feee:	bne.n	ff6c <__gethex+0x41c>
    fef0:	ldr	r3, [r7, #0]
    fef2:	subs	r3, #1
    fef4:	cmp	r3, r5
    fef6:	bne.n	ff10 <__gethex+0x3c0>
    fef8:	asrs	r1, r5, #5
    fefa:	movs	r3, #1
    fefc:	and.w	r5, r5, #31
    ff00:	lsl.w	r5, r3, r5
    ff04:	ldr.w	r3, [r2, r1, lsl #2]
    ff08:	tst	r5, r3
    ff0a:	it	ne
    ff0c:	movne.w	r8, #1
    ff10:	orr.w	r8, r8, #32
    ff14:	ldr	r3, [sp, #56]	; 0x38
    ff16:	str	r4, [r3, #0]
    ff18:	ldr	r3, [sp, #8]
    ff1a:	str	r6, [r3, #0]
    ff1c:	b.n	fc64 <__gethex+0x114>
    ff1e:	cmp	r0, r2
    ff20:	str.w	r3, [r2, #-4]
    ff24:	bhi.n	fed4 <__gethex+0x384>
    ff26:	ldr	r2, [r4, #8]
    ff28:	cmp	fp, r2
    ff2a:	blt.n	ff5c <__gethex+0x40c>
    ff2c:	ldr	r1, [r4, #4]
    ff2e:	mov	r0, r9
    ff30:	adds	r1, #1
    ff32:	bl	10154 <_Balloc>
    ff36:	mov	sl, r0
    ff38:	cbnz	r0, ff42 <__gethex+0x3f2>
    ff3a:	ldr	r3, [pc, #108]	; (ffa8 <__gethex+0x458>)
    ff3c:	mov	r2, r0
    ff3e:	movs	r1, #132	; 0x84
    ff40:	b.n	fcaa <__gethex+0x15a>
    ff42:	ldr	r2, [r4, #16]
    ff44:	adds	r2, #2
    ff46:	add.w	r1, r4, #12
    ff4a:	lsls	r2, r2, #2
    ff4c:	adds	r0, #12
    ff4e:	bl	a254 <memcpy>
    ff52:	mov	r1, r4
    ff54:	mov	r0, r9
    ff56:	bl	101d4 <_Bfree>
    ff5a:	mov	r4, sl
    ff5c:	ldr	r2, [r4, #16]
    ff5e:	adds	r1, r2, #1
    ff60:	add.w	r2, r4, r2, lsl #2
    ff64:	str	r1, [r4, #16]
    ff66:	movs	r1, #1
    ff68:	str	r1, [r2, #20]
    ff6a:	b.n	fee6 <__gethex+0x396>
    ff6c:	ldr	r1, [r4, #16]
    ff6e:	cmp	r1, fp
    ff70:	ble.n	ff8a <__gethex+0x43a>
    ff72:	movs	r1, #1
    ff74:	mov	r0, r4
    ff76:	bl	fa80 <rshift>
    ff7a:	ldr	r3, [r7, #8]
    ff7c:	adds	r6, #1
    ff7e:	cmp	r3, r6
    ff80:	blt.w	fd3a <__gethex+0x1ea>
    ff84:	mov.w	r8, #1
    ff88:	b.n	ff10 <__gethex+0x3c0>
    ff8a:	ands.w	r5, r5, #31
    ff8e:	beq.n	ff84 <__gethex+0x434>
    ff90:	ldr	r3, [sp, #4]
    ff92:	add	r2, r3
    ff94:	rsb	r5, r5, #32
    ff98:	ldr.w	r0, [r2, #-4]
    ff9c:	bl	10338 <__hi0bits>
    ffa0:	cmp	r0, r5
    ffa2:	blt.n	ff72 <__gethex+0x422>
    ffa4:	b.n	ff84 <__gethex+0x434>
    ffa6:	nop
    ffa8:	.word	0x200013c9

0000ffac <L_shift>:
    ffac:	rsb	r2, r2, #8
    ffb0:	lsls	r2, r2, #2
    ffb2:	push	{r4, r5, r6, lr}
    ffb4:	rsb	r6, r2, #32
    ffb8:	ldr	r3, [r0, #4]
    ffba:	ldr	r4, [r0, #0]
    ffbc:	lsl.w	r5, r3, r6
    ffc0:	orrs	r4, r5
    ffc2:	lsrs	r3, r2
    ffc4:	str	r4, [r0, #0]
    ffc6:	str.w	r3, [r0, #4]!
    ffca:	cmp	r0, r1
    ffcc:	bcc.n	ffb8 <L_shift+0xc>
    ffce:	pop	{r4, r5, r6, pc}

0000ffd0 <__match>:
    ffd0:	push	{r4, r5, lr}
    ffd2:	ldr	r3, [r0, #0]
    ffd4:	adds	r3, #1
    ffd6:	ldrb.w	r4, [r1], #1
    ffda:	cbnz	r4, ffe2 <__match+0x12>
    ffdc:	str	r3, [r0, #0]
    ffde:	movs	r0, #1
    ffe0:	pop	{r4, r5, pc}
    ffe2:	ldrb.w	r2, [r3], #1
    ffe6:	sub.w	r5, r2, #65	; 0x41
    ffea:	cmp	r5, #25
    ffec:	it	ls
    ffee:	addls	r2, #32
    fff0:	cmp	r2, r4
    fff2:	beq.n	ffd6 <__match+0x6>
    fff4:	movs	r0, #0
    fff6:	b.n	ffe0 <__match+0x10>

0000fff8 <__hexnan>:
    fff8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fffc:	ldr	r3, [r1, #0]
    fffe:	ldr	r1, [r0, #0]
   10000:	asrs	r6, r3, #5
   10002:	add.w	r6, r2, r6, lsl #2
   10006:	ands.w	r3, r3, #31
   1000a:	sub	sp, #28
   1000c:	it	ne
   1000e:	addne	r6, #4
   10010:	movs	r5, #0
   10012:	subs	r7, r6, #4
   10014:	mov	sl, r0
   10016:	mov	r8, r2
   10018:	str	r3, [sp, #4]
   1001a:	str.w	r5, [r6, #-4]
   1001e:	mov	r9, r7
   10020:	mov	r4, r7
   10022:	str	r5, [sp, #8]
   10024:	mov	fp, r5
   10026:	ldrb	r2, [r1, #1]
   10028:	adds	r3, r1, #1
   1002a:	str	r3, [sp, #12]
   1002c:	cbz	r2, 10080 <__hexnan+0x88>
   1002e:	mov	r0, r2
   10030:	str	r1, [sp, #20]
   10032:	str	r2, [sp, #16]
   10034:	bl	fb24 <__hexdig_fun>
   10038:	cmp	r0, #0
   1003a:	bne.n	100dc <__hexnan+0xe4>
   1003c:	ldr	r2, [sp, #16]
   1003e:	ldr	r1, [sp, #20]
   10040:	cmp	r2, #32
   10042:	bhi.n	10076 <__hexnan+0x7e>
   10044:	ldr	r3, [sp, #8]
   10046:	cmp	fp, r3
   10048:	ble.n	10072 <__hexnan+0x7a>
   1004a:	cmp	r4, r9
   1004c:	bcs.n	1005c <__hexnan+0x64>
   1004e:	cmp	r5, #7
   10050:	bgt.n	1005c <__hexnan+0x64>
   10052:	mov	r2, r5
   10054:	mov	r1, r9
   10056:	mov	r0, r4
   10058:	bl	ffac <L_shift>
   1005c:	cmp	r4, r8
   1005e:	bls.n	10102 <__hexnan+0x10a>
   10060:	movs	r3, #0
   10062:	sub.w	r9, r4, #4
   10066:	str.w	r3, [r4, #-4]
   1006a:	str.w	fp, [sp, #8]
   1006e:	mov	r4, r9
   10070:	mov	r5, r3
   10072:	ldr	r1, [sp, #12]
   10074:	b.n	10026 <__hexnan+0x2e>
   10076:	cmp	r2, #41	; 0x29
   10078:	bne.n	10126 <__hexnan+0x12e>
   1007a:	adds	r1, #2
   1007c:	str.w	r1, [sl]
   10080:	cmp.w	fp, #0
   10084:	beq.n	10126 <__hexnan+0x12e>
   10086:	cmp	r4, r9
   10088:	bcs.n	10098 <__hexnan+0xa0>
   1008a:	cmp	r5, #7
   1008c:	bgt.n	10098 <__hexnan+0xa0>
   1008e:	mov	r2, r5
   10090:	mov	r1, r9
   10092:	mov	r0, r4
   10094:	bl	ffac <L_shift>
   10098:	cmp	r4, r8
   1009a:	bls.n	10106 <__hexnan+0x10e>
   1009c:	sub.w	r2, r8, #4
   100a0:	mov	r3, r4
   100a2:	ldr.w	r1, [r3], #4
   100a6:	str.w	r1, [r2, #4]!
   100aa:	cmp	r7, r3
   100ac:	bcs.n	100a2 <__hexnan+0xaa>
   100ae:	subs	r3, r7, r4
   100b0:	bic.w	r3, r3, #3
   100b4:	adds	r3, #4
   100b6:	subs	r6, #3
   100b8:	adds	r4, #1
   100ba:	cmp	r6, r4
   100bc:	it	cc
   100be:	movcc	r3, #4
   100c0:	add	r3, r8
   100c2:	movs	r2, #0
   100c4:	str.w	r2, [r3], #4
   100c8:	cmp	r7, r3
   100ca:	bcs.n	100c4 <__hexnan+0xcc>
   100cc:	ldr	r3, [r7, #0]
   100ce:	cbnz	r3, 100d8 <__hexnan+0xe0>
   100d0:	cmp	r7, r8
   100d2:	bne.n	10122 <__hexnan+0x12a>
   100d4:	movs	r3, #1
   100d6:	str	r3, [r7, #0]
   100d8:	movs	r0, #5
   100da:	b.n	10128 <__hexnan+0x130>
   100dc:	adds	r5, #1
   100de:	cmp	r5, #8
   100e0:	add.w	fp, fp, #1
   100e4:	ble.n	100f4 <__hexnan+0xfc>
   100e6:	cmp	r4, r8
   100e8:	bls.n	10072 <__hexnan+0x7a>
   100ea:	movs	r3, #0
   100ec:	str.w	r3, [r4, #-4]
   100f0:	movs	r5, #1
   100f2:	subs	r4, #4
   100f4:	ldr	r2, [r4, #0]
   100f6:	and.w	r0, r0, #15
   100fa:	orr.w	r0, r0, r2, lsl #4
   100fe:	str	r0, [r4, #0]
   10100:	b.n	10072 <__hexnan+0x7a>
   10102:	movs	r5, #8
   10104:	b.n	10072 <__hexnan+0x7a>
   10106:	ldr	r3, [sp, #4]
   10108:	cmp	r3, #0
   1010a:	beq.n	100cc <__hexnan+0xd4>
   1010c:	rsb	r3, r3, #32
   10110:	mov.w	r2, #4294967295
   10114:	lsrs	r2, r3
   10116:	ldr.w	r3, [r6, #-4]
   1011a:	ands	r3, r2
   1011c:	str.w	r3, [r6, #-4]
   10120:	b.n	100cc <__hexnan+0xd4>
   10122:	subs	r7, #4
   10124:	b.n	100cc <__hexnan+0xd4>
   10126:	movs	r0, #4
   10128:	add	sp, #28
   1012a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001012e <__ascii_mbtowc>:
   1012e:	sub	sp, #8
   10130:	cbnz	r1, 10134 <__ascii_mbtowc+0x6>
   10132:	add	r1, sp, #4
   10134:	cbz	r2, 10148 <__ascii_mbtowc+0x1a>
   10136:	cbz	r3, 1014c <__ascii_mbtowc+0x1e>
   10138:	ldrb	r3, [r2, #0]
   1013a:	str	r3, [r1, #0]
   1013c:	ldrb	r2, [r2, #0]
   1013e:	subs	r0, r2, #0
   10140:	it	ne
   10142:	movne	r0, #1
   10144:	add	sp, #8
   10146:	bx	lr
   10148:	mov	r0, r2
   1014a:	b.n	10144 <__ascii_mbtowc+0x16>
   1014c:	mvn.w	r0, #1
   10150:	b.n	10144 <__ascii_mbtowc+0x16>
	...

00010154 <_Balloc>:
   10154:	push	{r4, r5, r6, lr}
   10156:	ldr	r6, [r0, #28]
   10158:	mov	r4, r0
   1015a:	mov	r5, r1
   1015c:	cbnz	r6, 1017c <_Balloc+0x28>
   1015e:	movs	r0, #16
   10160:	bl	cc50 <malloc>
   10164:	mov	r2, r0
   10166:	str	r0, [r4, #28]
   10168:	cbnz	r0, 10174 <_Balloc+0x20>
   1016a:	ldr	r3, [pc, #96]	; (101cc <_Balloc+0x78>)
   1016c:	ldr	r0, [pc, #96]	; (101d0 <_Balloc+0x7c>)
   1016e:	movs	r1, #107	; 0x6b
   10170:	bl	1169c <__assert_func>
   10174:	strd	r6, r6, [r0, #4]
   10178:	str	r6, [r0, #0]
   1017a:	str	r6, [r0, #12]
   1017c:	ldr	r6, [r4, #28]
   1017e:	ldr	r3, [r6, #12]
   10180:	cbz	r3, 101a4 <_Balloc+0x50>
   10182:	ldr	r3, [r4, #28]
   10184:	ldr	r3, [r3, #12]
   10186:	ldr.w	r0, [r3, r5, lsl #2]
   1018a:	cbnz	r0, 101bc <_Balloc+0x68>
   1018c:	movs	r1, #1
   1018e:	lsl.w	r6, r1, r5
   10192:	adds	r2, r6, #5
   10194:	lsls	r2, r2, #2
   10196:	mov	r0, r4
   10198:	bl	116d8 <_calloc_r>
   1019c:	cbz	r0, 101b8 <_Balloc+0x64>
   1019e:	strd	r5, r6, [r0, #4]
   101a2:	b.n	101c2 <_Balloc+0x6e>
   101a4:	movs	r2, #33	; 0x21
   101a6:	movs	r1, #4
   101a8:	mov	r0, r4
   101aa:	bl	116d8 <_calloc_r>
   101ae:	ldr	r3, [r4, #28]
   101b0:	str	r0, [r6, #12]
   101b2:	ldr	r3, [r3, #12]
   101b4:	cmp	r3, #0
   101b6:	bne.n	10182 <_Balloc+0x2e>
   101b8:	movs	r0, #0
   101ba:	pop	{r4, r5, r6, pc}
   101bc:	ldr	r2, [r0, #0]
   101be:	str.w	r2, [r3, r5, lsl #2]
   101c2:	movs	r3, #0
   101c4:	strd	r3, r3, [r0, #12]
   101c8:	b.n	101ba <_Balloc+0x66>
   101ca:	nop
   101cc:	.word	0x20001359
   101d0:	.word	0x20000c6c

000101d4 <_Bfree>:
   101d4:	push	{r4, r5, r6, lr}
   101d6:	ldr	r6, [r0, #28]
   101d8:	mov	r5, r0
   101da:	mov	r4, r1
   101dc:	cbnz	r6, 101fc <_Bfree+0x28>
   101de:	movs	r0, #16
   101e0:	bl	cc50 <malloc>
   101e4:	mov	r2, r0
   101e6:	str	r0, [r5, #28]
   101e8:	cbnz	r0, 101f4 <_Bfree+0x20>
   101ea:	ldr	r3, [pc, #36]	; (10210 <_Bfree+0x3c>)
   101ec:	ldr	r0, [pc, #36]	; (10214 <_Bfree+0x40>)
   101ee:	movs	r1, #143	; 0x8f
   101f0:	bl	1169c <__assert_func>
   101f4:	strd	r6, r6, [r0, #4]
   101f8:	str	r6, [r0, #0]
   101fa:	str	r6, [r0, #12]
   101fc:	cbz	r4, 1020e <_Bfree+0x3a>
   101fe:	ldr	r3, [r5, #28]
   10200:	ldr	r2, [r4, #4]
   10202:	ldr	r3, [r3, #12]
   10204:	ldr.w	r1, [r3, r2, lsl #2]
   10208:	str	r1, [r4, #0]
   1020a:	str.w	r4, [r3, r2, lsl #2]
   1020e:	pop	{r4, r5, r6, pc}
   10210:	.word	0x20001359
   10214:	.word	0x20000c6c

00010218 <__multadd>:
   10218:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1021c:	ldr	r5, [r1, #16]
   1021e:	mov	r7, r0
   10220:	mov	r4, r1
   10222:	mov	r6, r3
   10224:	add.w	ip, r1, #20
   10228:	movs	r0, #0
   1022a:	ldr.w	r3, [ip]
   1022e:	uxth	r1, r3
   10230:	mla	r1, r2, r1, r6
   10234:	lsrs	r6, r3, #16
   10236:	lsrs	r3, r1, #16
   10238:	mla	r3, r2, r6, r3
   1023c:	uxth	r1, r1
   1023e:	adds	r0, #1
   10240:	add.w	r1, r1, r3, lsl #16
   10244:	cmp	r5, r0
   10246:	str.w	r1, [ip], #4
   1024a:	mov.w	r6, r3, lsr #16
   1024e:	bgt.n	1022a <__multadd+0x12>
   10250:	cbz	r6, 10296 <__multadd+0x7e>
   10252:	ldr	r3, [r4, #8]
   10254:	cmp	r3, r5
   10256:	bgt.n	1028c <__multadd+0x74>
   10258:	ldr	r1, [r4, #4]
   1025a:	mov	r0, r7
   1025c:	adds	r1, #1
   1025e:	bl	10154 <_Balloc>
   10262:	mov	r8, r0
   10264:	cbnz	r0, 10272 <__multadd+0x5a>
   10266:	mov	r2, r0
   10268:	ldr	r3, [pc, #48]	; (1029c <__multadd+0x84>)
   1026a:	ldr	r0, [pc, #52]	; (102a0 <__multadd+0x88>)
   1026c:	movs	r1, #186	; 0xba
   1026e:	bl	1169c <__assert_func>
   10272:	ldr	r2, [r4, #16]
   10274:	adds	r2, #2
   10276:	add.w	r1, r4, #12
   1027a:	lsls	r2, r2, #2
   1027c:	adds	r0, #12
   1027e:	bl	a254 <memcpy>
   10282:	mov	r1, r4
   10284:	mov	r0, r7
   10286:	bl	101d4 <_Bfree>
   1028a:	mov	r4, r8
   1028c:	add.w	r3, r4, r5, lsl #2
   10290:	adds	r5, #1
   10292:	str	r6, [r3, #20]
   10294:	str	r5, [r4, #16]
   10296:	mov	r0, r4
   10298:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1029c:	.word	0x200013c9
   102a0:	.word	0x20000c6c

000102a4 <__s2b>:
   102a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   102a8:	mov	r4, r1
   102aa:	mov	r5, r2
   102ac:	mov	r7, r3
   102ae:	movs	r2, #9
   102b0:	adds	r3, #8
   102b2:	mov	r6, r0
   102b4:	sdiv	r3, r3, r2
   102b8:	movs	r1, #0
   102ba:	movs	r2, #1
   102bc:	cmp	r2, r3
   102be:	blt.n	102d4 <__s2b+0x30>
   102c0:	mov	r0, r6
   102c2:	bl	10154 <_Balloc>
   102c6:	cbnz	r0, 102da <__s2b+0x36>
   102c8:	mov	r2, r0
   102ca:	ldr	r3, [pc, #100]	; (10330 <__s2b+0x8c>)
   102cc:	ldr	r0, [pc, #100]	; (10334 <__s2b+0x90>)
   102ce:	movs	r1, #211	; 0xd3
   102d0:	bl	1169c <__assert_func>
   102d4:	lsls	r2, r2, #1
   102d6:	adds	r1, #1
   102d8:	b.n	102bc <__s2b+0x18>
   102da:	ldr	r3, [sp, #32]
   102dc:	str	r3, [r0, #20]
   102de:	cmp	r5, #9
   102e0:	mov.w	r3, #1
   102e4:	str	r3, [r0, #16]
   102e6:	ble.n	10316 <__s2b+0x72>
   102e8:	add.w	r9, r4, #9
   102ec:	mov	r8, r9
   102ee:	add	r4, r5
   102f0:	ldrb.w	r3, [r8], #1
   102f4:	mov	r1, r0
   102f6:	subs	r3, #48	; 0x30
   102f8:	movs	r2, #10
   102fa:	mov	r0, r6
   102fc:	bl	10218 <__multadd>
   10300:	cmp	r8, r4
   10302:	bne.n	102f0 <__s2b+0x4c>
   10304:	sub.w	r4, r5, #8
   10308:	add	r4, r9
   1030a:	subs	r5, r5, r4
   1030c:	adds	r3, r4, r5
   1030e:	cmp	r3, r7
   10310:	blt.n	1031c <__s2b+0x78>
   10312:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10316:	adds	r4, #10
   10318:	movs	r5, #9
   1031a:	b.n	1030a <__s2b+0x66>
   1031c:	ldrb.w	r3, [r4], #1
   10320:	mov	r1, r0
   10322:	subs	r3, #48	; 0x30
   10324:	movs	r2, #10
   10326:	mov	r0, r6
   10328:	bl	10218 <__multadd>
   1032c:	b.n	1030c <__s2b+0x68>
   1032e:	nop
   10330:	.word	0x200013c9
   10334:	.word	0x20000c6c

00010338 <__hi0bits>:
   10338:	lsrs	r3, r0, #16
   1033a:	lsls	r3, r3, #16
   1033c:	cbnz	r3, 10374 <__hi0bits+0x3c>
   1033e:	lsls	r0, r0, #16
   10340:	movs	r3, #16
   10342:	tst.w	r0, #4278190080	; 0xff000000
   10346:	itt	eq
   10348:	lsleq	r0, r0, #8
   1034a:	addeq	r3, #8
   1034c:	tst.w	r0, #4026531840	; 0xf0000000
   10350:	itt	eq
   10352:	lsleq	r0, r0, #4
   10354:	addeq	r3, #4
   10356:	tst.w	r0, #3221225472	; 0xc0000000
   1035a:	itt	eq
   1035c:	lsleq	r0, r0, #2
   1035e:	addeq	r3, #2
   10360:	cmp	r0, #0
   10362:	blt.n	10370 <__hi0bits+0x38>
   10364:	tst.w	r0, #1073741824	; 0x40000000
   10368:	add.w	r3, r3, #1
   1036c:	it	eq
   1036e:	moveq	r3, #32
   10370:	mov	r0, r3
   10372:	bx	lr
   10374:	movs	r3, #0
   10376:	b.n	10342 <__hi0bits+0xa>

00010378 <__lo0bits>:
   10378:	ldr	r3, [r0, #0]
   1037a:	ands.w	r2, r3, #7
   1037e:	beq.n	1039a <__lo0bits+0x22>
   10380:	lsls	r1, r3, #31
   10382:	bmi.n	103ca <__lo0bits+0x52>
   10384:	lsls	r2, r3, #30
   10386:	itett	mi
   10388:	lsrmi	r3, r3, #1
   1038a:	lsrpl	r3, r3, #2
   1038c:	strmi	r3, [r0, #0]
   1038e:	movmi	r2, #1
   10390:	itt	pl
   10392:	strpl	r3, [r0, #0]
   10394:	movpl	r2, #2
   10396:	mov	r0, r2
   10398:	bx	lr
   1039a:	uxth	r1, r3
   1039c:	cbnz	r1, 103a2 <__lo0bits+0x2a>
   1039e:	lsrs	r3, r3, #16
   103a0:	movs	r2, #16
   103a2:	uxtb	r1, r3
   103a4:	cbnz	r1, 103aa <__lo0bits+0x32>
   103a6:	adds	r2, #8
   103a8:	lsrs	r3, r3, #8
   103aa:	lsls	r1, r3, #28
   103ac:	itt	eq
   103ae:	lsreq	r3, r3, #4
   103b0:	addeq	r2, #4
   103b2:	lsls	r1, r3, #30
   103b4:	itt	eq
   103b6:	lsreq	r3, r3, #2
   103b8:	addeq	r2, #2
   103ba:	lsls	r1, r3, #31
   103bc:	bmi.n	103c6 <__lo0bits+0x4e>
   103be:	lsrs	r3, r3, #1
   103c0:	add.w	r2, r2, #1
   103c4:	beq.n	103ce <__lo0bits+0x56>
   103c6:	str	r3, [r0, #0]
   103c8:	b.n	10396 <__lo0bits+0x1e>
   103ca:	movs	r2, #0
   103cc:	b.n	10396 <__lo0bits+0x1e>
   103ce:	movs	r2, #32
   103d0:	b.n	10396 <__lo0bits+0x1e>
	...

000103d4 <__i2b>:
   103d4:	push	{r4, lr}
   103d6:	mov	r4, r1
   103d8:	movs	r1, #1
   103da:	bl	10154 <_Balloc>
   103de:	mov	r2, r0
   103e0:	cbnz	r0, 103ee <__i2b+0x1a>
   103e2:	ldr	r3, [pc, #20]	; (103f8 <__i2b+0x24>)
   103e4:	ldr	r0, [pc, #20]	; (103fc <__i2b+0x28>)
   103e6:	movw	r1, #325	; 0x145
   103ea:	bl	1169c <__assert_func>
   103ee:	movs	r3, #1
   103f0:	str	r4, [r0, #20]
   103f2:	str	r3, [r0, #16]
   103f4:	pop	{r4, pc}
   103f6:	nop
   103f8:	.word	0x200013c9
   103fc:	.word	0x20000c6c

00010400 <__multiply>:
   10400:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10404:	mov	r9, r2
   10406:	ldr	r2, [r1, #16]
   10408:	ldr.w	r3, [r9, #16]
   1040c:	cmp	r2, r3
   1040e:	it	lt
   10410:	movlt	r3, r1
   10412:	mov	r4, r1
   10414:	itt	lt
   10416:	movlt	r4, r9
   10418:	movlt	r9, r3
   1041a:	ldr	r7, [r4, #16]
   1041c:	ldr.w	sl, [r9, #16]
   10420:	ldr	r3, [r4, #8]
   10422:	ldr	r1, [r4, #4]
   10424:	add.w	r6, r7, sl
   10428:	cmp	r3, r6
   1042a:	sub	sp, #20
   1042c:	it	lt
   1042e:	addlt	r1, #1
   10430:	bl	10154 <_Balloc>
   10434:	cbnz	r0, 10444 <__multiply+0x44>
   10436:	mov	r2, r0
   10438:	ldr	r3, [pc, #272]	; (1054c <__multiply+0x14c>)
   1043a:	ldr	r0, [pc, #276]	; (10550 <__multiply+0x150>)
   1043c:	mov.w	r1, #354	; 0x162
   10440:	bl	1169c <__assert_func>
   10444:	add.w	r5, r0, #20
   10448:	add.w	r8, r5, r6, lsl #2
   1044c:	mov	r3, r5
   1044e:	movs	r2, #0
   10450:	cmp	r3, r8
   10452:	bcc.n	10498 <__multiply+0x98>
   10454:	add.w	r3, r4, #20
   10458:	add.w	r7, r3, r7, lsl #2
   1045c:	add.w	r3, r9, #20
   10460:	add.w	r2, r3, sl, lsl #2
   10464:	str	r2, [sp, #8]
   10466:	subs	r2, r7, r4
   10468:	subs	r2, #21
   1046a:	bic.w	r2, r2, #3
   1046e:	adds	r2, #4
   10470:	add.w	r1, r4, #21
   10474:	cmp	r7, r1
   10476:	it	cc
   10478:	movcc	r2, #4
   1047a:	str	r2, [sp, #4]
   1047c:	ldr	r2, [sp, #8]
   1047e:	str	r3, [sp, #12]
   10480:	cmp	r2, r3
   10482:	bhi.n	1049e <__multiply+0x9e>
   10484:	cmp	r6, #0
   10486:	ble.n	10490 <__multiply+0x90>
   10488:	ldr.w	r3, [r8, #-4]!
   1048c:	cmp	r3, #0
   1048e:	beq.n	10548 <__multiply+0x148>
   10490:	str	r6, [r0, #16]
   10492:	add	sp, #20
   10494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10498:	str.w	r2, [r3], #4
   1049c:	b.n	10450 <__multiply+0x50>
   1049e:	ldrh.w	sl, [r3]
   104a2:	cmp.w	sl, #0
   104a6:	beq.n	104f2 <__multiply+0xf2>
   104a8:	add.w	lr, r4, #20
   104ac:	mov	r9, r5
   104ae:	mov.w	ip, #0
   104b2:	ldr.w	r2, [lr], #4
   104b6:	ldr.w	r1, [r9]
   104ba:	uxth.w	fp, r2
   104be:	uxth	r1, r1
   104c0:	mla	r1, sl, fp, r1
   104c4:	mov.w	fp, r2, lsr #16
   104c8:	ldr.w	r2, [r9]
   104cc:	add	r1, ip
   104ce:	mov.w	ip, r2, lsr #16
   104d2:	mla	r2, sl, fp, ip
   104d6:	add.w	r2, r2, r1, lsr #16
   104da:	uxth	r1, r1
   104dc:	orr.w	r1, r1, r2, lsl #16
   104e0:	cmp	r7, lr
   104e2:	str.w	r1, [r9], #4
   104e6:	mov.w	ip, r2, lsr #16
   104ea:	bhi.n	104b2 <__multiply+0xb2>
   104ec:	ldr	r2, [sp, #4]
   104ee:	str.w	ip, [r5, r2]
   104f2:	ldr	r2, [sp, #12]
   104f4:	ldrh.w	r9, [r2, #2]
   104f8:	adds	r3, #4
   104fa:	cmp.w	r9, #0
   104fe:	beq.n	10544 <__multiply+0x144>
   10500:	ldr	r1, [r5, #0]
   10502:	add.w	ip, r4, #20
   10506:	mov	lr, r5
   10508:	mov.w	sl, #0
   1050c:	ldrh.w	fp, [ip]
   10510:	ldrh.w	r2, [lr, #2]
   10514:	mla	r2, r9, fp, r2
   10518:	add	r2, sl
   1051a:	uxth	r1, r1
   1051c:	orr.w	r1, r1, r2, lsl #16
   10520:	str.w	r1, [lr], #4
   10524:	ldr.w	r1, [ip], #4
   10528:	mov.w	sl, r1, lsr #16
   1052c:	ldrh.w	r1, [lr]
   10530:	mla	r1, r9, sl, r1
   10534:	add.w	r1, r1, r2, lsr #16
   10538:	cmp	r7, ip
   1053a:	mov.w	sl, r1, lsr #16
   1053e:	bhi.n	1050c <__multiply+0x10c>
   10540:	ldr	r2, [sp, #4]
   10542:	str	r1, [r5, r2]
   10544:	adds	r5, #4
   10546:	b.n	1047c <__multiply+0x7c>
   10548:	subs	r6, #1
   1054a:	b.n	10484 <__multiply+0x84>
   1054c:	.word	0x200013c9
   10550:	.word	0x20000c6c

00010554 <__pow5mult>:
   10554:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10558:	mov	r5, r2
   1055a:	ands.w	r2, r2, #3
   1055e:	mov	r6, r0
   10560:	mov	r7, r1
   10562:	beq.n	10574 <__pow5mult+0x20>
   10564:	ldr	r4, [pc, #148]	; (105fc <__pow5mult+0xa8>)
   10566:	subs	r2, #1
   10568:	movs	r3, #0
   1056a:	ldr.w	r2, [r4, r2, lsl #2]
   1056e:	bl	10218 <__multadd>
   10572:	mov	r7, r0
   10574:	asrs	r5, r5, #2
   10576:	beq.n	105f4 <__pow5mult+0xa0>
   10578:	ldr	r4, [r6, #28]
   1057a:	cbnz	r4, 1059c <__pow5mult+0x48>
   1057c:	movs	r0, #16
   1057e:	bl	cc50 <malloc>
   10582:	mov	r2, r0
   10584:	str	r0, [r6, #28]
   10586:	cbnz	r0, 10594 <__pow5mult+0x40>
   10588:	ldr	r3, [pc, #116]	; (10600 <__pow5mult+0xac>)
   1058a:	ldr	r0, [pc, #120]	; (10604 <__pow5mult+0xb0>)
   1058c:	movw	r1, #435	; 0x1b3
   10590:	bl	1169c <__assert_func>
   10594:	strd	r4, r4, [r0, #4]
   10598:	str	r4, [r0, #0]
   1059a:	str	r4, [r0, #12]
   1059c:	ldr.w	r8, [r6, #28]
   105a0:	ldr.w	r4, [r8, #8]
   105a4:	cbnz	r4, 105ba <__pow5mult+0x66>
   105a6:	movw	r1, #625	; 0x271
   105aa:	mov	r0, r6
   105ac:	bl	103d4 <__i2b>
   105b0:	movs	r3, #0
   105b2:	str.w	r0, [r8, #8]
   105b6:	mov	r4, r0
   105b8:	str	r3, [r0, #0]
   105ba:	mov.w	r9, #0
   105be:	lsls	r3, r5, #31
   105c0:	bpl.n	105d8 <__pow5mult+0x84>
   105c2:	mov	r1, r7
   105c4:	mov	r2, r4
   105c6:	mov	r0, r6
   105c8:	bl	10400 <__multiply>
   105cc:	mov	r1, r7
   105ce:	mov	r8, r0
   105d0:	mov	r0, r6
   105d2:	bl	101d4 <_Bfree>
   105d6:	mov	r7, r8
   105d8:	asrs	r5, r5, #1
   105da:	beq.n	105f4 <__pow5mult+0xa0>
   105dc:	ldr	r0, [r4, #0]
   105de:	cbnz	r0, 105f0 <__pow5mult+0x9c>
   105e0:	mov	r2, r4
   105e2:	mov	r1, r4
   105e4:	mov	r0, r6
   105e6:	bl	10400 <__multiply>
   105ea:	str	r0, [r4, #0]
   105ec:	str.w	r9, [r0]
   105f0:	mov	r4, r0
   105f2:	b.n	105be <__pow5mult+0x6a>
   105f4:	mov	r0, r7
   105f6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   105fa:	nop
   105fc:	.word	0x200009ac
   10600:	.word	0x20001359
   10604:	.word	0x20000c6c

00010608 <__lshift>:
   10608:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1060c:	mov	r4, r1
   1060e:	ldr	r1, [r1, #4]
   10610:	ldr	r3, [r4, #16]
   10612:	add.w	r8, r3, r2, asr #5
   10616:	ldr	r3, [r4, #8]
   10618:	mov	r7, r0
   1061a:	mov	r9, r2
   1061c:	mov.w	sl, r2, asr #5
   10620:	add.w	r6, r8, #1
   10624:	cmp	r3, r6
   10626:	blt.n	10640 <__lshift+0x38>
   10628:	mov	r0, r7
   1062a:	bl	10154 <_Balloc>
   1062e:	mov	r5, r0
   10630:	cbnz	r0, 10646 <__lshift+0x3e>
   10632:	mov	r2, r0
   10634:	ldr	r3, [pc, #160]	; (106d8 <__lshift+0xd0>)
   10636:	ldr	r0, [pc, #164]	; (106dc <__lshift+0xd4>)
   10638:	mov.w	r1, #478	; 0x1de
   1063c:	bl	1169c <__assert_func>
   10640:	adds	r1, #1
   10642:	lsls	r3, r3, #1
   10644:	b.n	10624 <__lshift+0x1c>
   10646:	movs	r3, #0
   10648:	add.w	r1, r0, #20
   1064c:	add.w	r2, r0, #16
   10650:	mov	r0, r3
   10652:	cmp	r3, sl
   10654:	blt.n	106be <__lshift+0xb6>
   10656:	ldr	r0, [r4, #16]
   10658:	bic.w	sl, sl, sl, asr #31
   1065c:	add.w	r3, r4, #20
   10660:	ands.w	r9, r9, #31
   10664:	add.w	r1, r1, sl, lsl #2
   10668:	add.w	ip, r3, r0, lsl #2
   1066c:	beq.n	106c6 <__lshift+0xbe>
   1066e:	rsb	lr, r9, #32
   10672:	mov	sl, r1
   10674:	movs	r2, #0
   10676:	ldr	r0, [r3, #0]
   10678:	lsl.w	r0, r0, r9
   1067c:	orrs	r0, r2
   1067e:	str.w	r0, [sl], #4
   10682:	ldr.w	r2, [r3], #4
   10686:	cmp	ip, r3
   10688:	lsr.w	r2, r2, lr
   1068c:	bhi.n	10676 <__lshift+0x6e>
   1068e:	sub.w	r3, ip, r4
   10692:	subs	r3, #21
   10694:	bic.w	r3, r3, #3
   10698:	adds	r3, #4
   1069a:	add.w	r0, r4, #21
   1069e:	cmp	ip, r0
   106a0:	it	cc
   106a2:	movcc	r3, #4
   106a4:	str	r2, [r1, r3]
   106a6:	cbz	r2, 106ac <__lshift+0xa4>
   106a8:	add.w	r6, r8, #2
   106ac:	subs	r6, #1
   106ae:	mov	r0, r7
   106b0:	str	r6, [r5, #16]
   106b2:	mov	r1, r4
   106b4:	bl	101d4 <_Bfree>
   106b8:	mov	r0, r5
   106ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   106be:	str.w	r0, [r2, #4]!
   106c2:	adds	r3, #1
   106c4:	b.n	10652 <__lshift+0x4a>
   106c6:	subs	r1, #4
   106c8:	ldr.w	r2, [r3], #4
   106cc:	str.w	r2, [r1, #4]!
   106d0:	cmp	ip, r3
   106d2:	bhi.n	106c8 <__lshift+0xc0>
   106d4:	b.n	106ac <__lshift+0xa4>
   106d6:	nop
   106d8:	.word	0x200013c9
   106dc:	.word	0x20000c6c

000106e0 <__mcmp>:
   106e0:	push	{r4, r5, lr}
   106e2:	ldr	r2, [r0, #16]
   106e4:	ldr	r4, [r1, #16]
   106e6:	subs	r2, r2, r4
   106e8:	bne.n	10708 <__mcmp+0x28>
   106ea:	add.w	r3, r0, #20
   106ee:	adds	r1, #20
   106f0:	add.w	r0, r3, r4, lsl #2
   106f4:	add.w	r1, r1, r4, lsl #2
   106f8:	ldr.w	r5, [r0, #-4]!
   106fc:	ldr.w	r4, [r1, #-4]!
   10700:	cmp	r5, r4
   10702:	beq.n	1070c <__mcmp+0x2c>
   10704:	bcc.n	10712 <__mcmp+0x32>
   10706:	movs	r2, #1
   10708:	mov	r0, r2
   1070a:	pop	{r4, r5, pc}
   1070c:	cmp	r3, r0
   1070e:	bcc.n	106f8 <__mcmp+0x18>
   10710:	b.n	10708 <__mcmp+0x28>
   10712:	mov.w	r2, #4294967295
   10716:	b.n	10708 <__mcmp+0x28>

00010718 <__mdiff>:
   10718:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1071c:	mov	r4, r1
   1071e:	mov	r6, r0
   10720:	mov	r1, r2
   10722:	mov	r0, r4
   10724:	mov	r8, r2
   10726:	bl	106e0 <__mcmp>
   1072a:	subs	r5, r0, #0
   1072c:	bne.n	10750 <__mdiff+0x38>
   1072e:	mov	r1, r5
   10730:	mov	r0, r6
   10732:	bl	10154 <_Balloc>
   10736:	cbnz	r0, 10746 <__mdiff+0x2e>
   10738:	ldr	r3, [pc, #232]	; (10824 <__mdiff+0x10c>)
   1073a:	mov	r2, r0
   1073c:	movw	r1, #567	; 0x237
   10740:	ldr	r0, [pc, #228]	; (10828 <__mdiff+0x110>)
   10742:	bl	1169c <__assert_func>
   10746:	movs	r3, #1
   10748:	strd	r3, r5, [r0, #16]
   1074c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10750:	itt	ge
   10752:	movge	r3, r8
   10754:	movge	r8, r4
   10756:	mov	r0, r6
   10758:	ldr.w	r1, [r8, #4]
   1075c:	itte	ge
   1075e:	movge	r4, r3
   10760:	movge	r5, #0
   10762:	movlt	r5, #1
   10764:	bl	10154 <_Balloc>
   10768:	cbnz	r0, 10774 <__mdiff+0x5c>
   1076a:	ldr	r3, [pc, #184]	; (10824 <__mdiff+0x10c>)
   1076c:	mov	r2, r0
   1076e:	movw	r1, #581	; 0x245
   10772:	b.n	10740 <__mdiff+0x28>
   10774:	ldr.w	r7, [r8, #16]
   10778:	ldr	r6, [r4, #16]
   1077a:	str	r5, [r0, #12]
   1077c:	add.w	r9, r4, #20
   10780:	add.w	r5, r8, #20
   10784:	add.w	lr, r0, #20
   10788:	add.w	ip, r5, r7, lsl #2
   1078c:	add.w	r6, r9, r6, lsl #2
   10790:	add.w	r2, r8, #16
   10794:	mov	sl, lr
   10796:	movs	r1, #0
   10798:	ldr.w	r3, [r9], #4
   1079c:	ldr.w	fp, [r2, #4]!
   107a0:	uxtah	r8, r1, fp
   107a4:	uxth	r1, r3
   107a6:	lsrs	r3, r3, #16
   107a8:	sub.w	r8, r8, r1
   107ac:	rsb	r3, r3, fp, lsr #16
   107b0:	add.w	r3, r3, r8, asr #16
   107b4:	uxth.w	r8, r8
   107b8:	asrs	r1, r3, #16
   107ba:	cmp	r6, r9
   107bc:	orr.w	r3, r8, r3, lsl #16
   107c0:	str.w	r3, [sl], #4
   107c4:	bhi.n	10798 <__mdiff+0x80>
   107c6:	subs	r3, r6, r4
   107c8:	subs	r3, #21
   107ca:	bic.w	r3, r3, #3
   107ce:	adds	r3, #4
   107d0:	adds	r4, #21
   107d2:	cmp	r6, r4
   107d4:	it	cc
   107d6:	movcc	r3, #4
   107d8:	add	r5, r3
   107da:	add	r3, lr
   107dc:	mov	lr, r3
   107de:	mov	r6, r5
   107e0:	cmp	r6, ip
   107e2:	bcc.n	10802 <__mdiff+0xea>
   107e4:	add.w	r2, ip, #3
   107e8:	subs	r2, r2, r5
   107ea:	bic.w	r2, r2, #3
   107ee:	subs	r5, #3
   107f0:	cmp	ip, r5
   107f2:	it	cc
   107f4:	movcc	r2, #0
   107f6:	add	r3, r2
   107f8:	ldr.w	r2, [r3, #-4]!
   107fc:	cbz	r2, 1081e <__mdiff+0x106>
   107fe:	str	r7, [r0, #16]
   10800:	b.n	1074c <__mdiff+0x34>
   10802:	ldr.w	r8, [r6], #4
   10806:	uxtah	r2, r1, r8
   1080a:	asrs	r4, r2, #16
   1080c:	add.w	r4, r4, r8, lsr #16
   10810:	uxth	r2, r2
   10812:	orr.w	r2, r2, r4, lsl #16
   10816:	str.w	r2, [lr], #4
   1081a:	asrs	r1, r4, #16
   1081c:	b.n	107e0 <__mdiff+0xc8>
   1081e:	subs	r7, #1
   10820:	b.n	107f8 <__mdiff+0xe0>
   10822:	nop
   10824:	.word	0x200013c9
   10828:	.word	0x20000c6c

0001082c <__ulp>:
   1082c:	sub	sp, #8
   1082e:	vstr	d0, [sp]
   10832:	ldr	r2, [sp, #4]
   10834:	ldr	r3, [pc, #60]	; (10874 <__ulp+0x48>)
   10836:	ands	r3, r2
   10838:	sub.w	r3, r3, #54525952	; 0x3400000
   1083c:	cmp	r3, #0
   1083e:	bgt.n	10852 <__ulp+0x26>
   10840:	negs	r3, r3
   10842:	cmp.w	r3, #20971520	; 0x1400000
   10846:	mov.w	r2, r3, asr #20
   1084a:	bge.n	10856 <__ulp+0x2a>
   1084c:	mov.w	r3, #524288	; 0x80000
   10850:	asrs	r3, r2
   10852:	movs	r2, #0
   10854:	b.n	10868 <__ulp+0x3c>
   10856:	sub.w	r3, r2, #20
   1085a:	cmp	r3, #30
   1085c:	itte	le
   1085e:	movle.w	r2, #2147483648	; 0x80000000
   10862:	lsrle	r2, r3
   10864:	movgt	r2, #1
   10866:	movs	r3, #0
   10868:	mov	r1, r3
   1086a:	mov	r0, r2
   1086c:	vmov	d0, r0, r1
   10870:	add	sp, #8
   10872:	bx	lr
   10874:	.word	0x7ff00000

00010878 <__b2d>:
   10878:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1087c:	ldr	r6, [r0, #16]
   1087e:	add.w	r8, r0, #20
   10882:	add.w	r6, r8, r6, lsl #2
   10886:	subs	r7, r6, #4
   10888:	ldr.w	r2, [r6, #-4]
   1088c:	mov	r0, r2
   1088e:	bl	10338 <__hi0bits>
   10892:	rsb	r3, r0, #32
   10896:	cmp	r0, #10
   10898:	str	r3, [r1, #0]
   1089a:	ldr	r1, [pc, #108]	; (10908 <__b2d+0x90>)
   1089c:	bgt.n	108ca <__b2d+0x52>
   1089e:	rsb	ip, r0, #11
   108a2:	lsr.w	r3, r2, ip
   108a6:	cmp	r8, r7
   108a8:	orr.w	r5, r3, r1
   108ac:	ite	cc
   108ae:	ldrcc.w	r3, [r6, #-8]
   108b2:	movcs	r3, #0
   108b4:	adds	r0, #21
   108b6:	lsl.w	r0, r2, r0
   108ba:	lsr.w	r3, r3, ip
   108be:	orrs	r3, r0
   108c0:	mov	r4, r3
   108c2:	vmov	d0, r4, r5
   108c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108ca:	cmp	r8, r7
   108cc:	itte	cc
   108ce:	ldrcc.w	r3, [r6, #-8]
   108d2:	subcc.w	r7, r6, #8
   108d6:	movcs	r3, #0
   108d8:	subs	r0, #11
   108da:	beq.n	10902 <__b2d+0x8a>
   108dc:	rsb	r1, r0, #32
   108e0:	lsr.w	r4, r3, r1
   108e4:	lsls	r2, r0
   108e6:	orrs	r2, r4
   108e8:	cmp	r7, r8
   108ea:	orr.w	r5, r2, #1069547520	; 0x3fc00000
   108ee:	ite	hi
   108f0:	ldrhi.w	r2, [r7, #-4]
   108f4:	movls	r2, #0
   108f6:	lsls	r3, r0
   108f8:	lsrs	r2, r1
   108fa:	orr.w	r5, r5, #3145728	; 0x300000
   108fe:	orrs	r3, r2
   10900:	b.n	108c0 <__b2d+0x48>
   10902:	orr.w	r5, r2, r1
   10906:	b.n	108c0 <__b2d+0x48>
   10908:	.word	0x3ff00000

0001090c <__d2b>:
   1090c:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   10910:	mov	r7, r1
   10912:	movs	r1, #1
   10914:	vmov	r8, r9, d0
   10918:	mov	r6, r2
   1091a:	bl	10154 <_Balloc>
   1091e:	mov	r4, r0
   10920:	cbnz	r0, 10930 <__d2b+0x24>
   10922:	mov	r2, r0
   10924:	ldr	r3, [pc, #144]	; (109b8 <__d2b+0xac>)
   10926:	ldr	r0, [pc, #148]	; (109bc <__d2b+0xb0>)
   10928:	movw	r1, #783	; 0x30f
   1092c:	bl	1169c <__assert_func>
   10930:	ubfx	r5, r9, #20, #11
   10934:	ubfx	r3, r9, #0, #20
   10938:	cbnz	r5, 10986 <__d2b+0x7a>
   1093a:	str	r3, [sp, #4]
   1093c:	subs.w	r3, r8, #0
   10940:	beq.n	10990 <__d2b+0x84>
   10942:	mov	r0, sp
   10944:	str	r3, [sp, #0]
   10946:	bl	10378 <__lo0bits>
   1094a:	ldrd	r1, r2, [sp]
   1094e:	cbz	r0, 1098c <__d2b+0x80>
   10950:	rsb	r3, r0, #32
   10954:	lsl.w	r3, r2, r3
   10958:	orrs	r3, r1
   1095a:	lsrs	r2, r0
   1095c:	str	r3, [r4, #20]
   1095e:	str	r2, [sp, #4]
   10960:	ldr	r3, [sp, #4]
   10962:	str	r3, [r4, #24]
   10964:	cmp	r3, #0
   10966:	ite	ne
   10968:	movne	r2, #2
   1096a:	moveq	r2, #1
   1096c:	str	r2, [r4, #16]
   1096e:	cbz	r5, 109a0 <__d2b+0x94>
   10970:	subw	r5, r5, #1075	; 0x433
   10974:	add	r5, r0
   10976:	str	r5, [r7, #0]
   10978:	rsb	r0, r0, #53	; 0x35
   1097c:	str	r0, [r6, #0]
   1097e:	mov	r0, r4
   10980:	add	sp, #12
   10982:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10986:	orr.w	r3, r3, #1048576	; 0x100000
   1098a:	b.n	1093a <__d2b+0x2e>
   1098c:	str	r1, [r4, #20]
   1098e:	b.n	10960 <__d2b+0x54>
   10990:	add	r0, sp, #4
   10992:	bl	10378 <__lo0bits>
   10996:	ldr	r3, [sp, #4]
   10998:	str	r3, [r4, #20]
   1099a:	adds	r0, #32
   1099c:	movs	r2, #1
   1099e:	b.n	1096c <__d2b+0x60>
   109a0:	add.w	r3, r4, r2, lsl #2
   109a4:	subw	r0, r0, #1074	; 0x432
   109a8:	str	r0, [r7, #0]
   109aa:	ldr	r0, [r3, #16]
   109ac:	bl	10338 <__hi0bits>
   109b0:	rsb	r0, r0, r2, lsl #5
   109b4:	b.n	1097c <__d2b+0x70>
   109b6:	nop
   109b8:	.word	0x200013c9
   109bc:	.word	0x20000c6c

000109c0 <__ratio>:
   109c0:	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109c4:	mov	r8, r1
   109c6:	mov	r1, sp
   109c8:	mov	r9, r0
   109ca:	bl	10878 <__b2d>
   109ce:	add	r1, sp, #4
   109d0:	mov	r0, r8
   109d2:	vmov	r4, r5, d0
   109d6:	vmov	sl, s0
   109da:	bl	10878 <__b2d>
   109de:	ldr.w	r3, [r8, #16]
   109e2:	ldr.w	r2, [r9, #16]
   109e6:	subs	r2, r2, r3
   109e8:	ldrd	r3, r1, [sp]
   109ec:	subs	r3, r3, r1
   109ee:	add.w	r3, r3, r2, lsl #5
   109f2:	vmov	r6, r7, d0
   109f6:	cmp	r3, #0
   109f8:	itet	le
   109fa:	rsble	r3, r3, r3, lsl #12
   109fe:	movgt	r2, r5
   10a00:	movle	r2, r7
   10a02:	mov	fp, r5
   10a04:	itet	le
   10a06:	addle.w	r3, r2, r3, lsl #20
   10a0a:	addgt.w	fp, r2, r3, lsl #20
   10a0e:	vmovle	s1, r3
   10a12:	vmov	d7, sl, fp
   10a16:	vdiv.f64	d0, d7, d0
   10a1a:	add	sp, #12
   10a1c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a20 <__copybits>:
   10a20:	subs	r1, #1
   10a22:	push	{r4, r5, r6, lr}
   10a24:	asrs	r1, r1, #5
   10a26:	ldr	r4, [r2, #16]
   10a28:	adds	r1, #1
   10a2a:	add.w	r3, r2, #20
   10a2e:	add.w	r1, r0, r1, lsl #2
   10a32:	add.w	r4, r3, r4, lsl #2
   10a36:	subs	r5, r0, #4
   10a38:	cmp	r3, r4
   10a3a:	bcc.n	10a56 <__copybits+0x36>
   10a3c:	subs	r3, r4, r2
   10a3e:	subs	r3, #17
   10a40:	bic.w	r3, r3, #3
   10a44:	adds	r2, #17
   10a46:	cmp	r2, r4
   10a48:	it	hi
   10a4a:	movhi	r3, #0
   10a4c:	add	r0, r3
   10a4e:	movs	r3, #0
   10a50:	cmp	r0, r1
   10a52:	bcc.n	10a60 <__copybits+0x40>
   10a54:	pop	{r4, r5, r6, pc}
   10a56:	ldr.w	r6, [r3], #4
   10a5a:	str.w	r6, [r5, #4]!
   10a5e:	b.n	10a38 <__copybits+0x18>
   10a60:	str.w	r3, [r0], #4
   10a64:	b.n	10a50 <__copybits+0x30>

00010a66 <__any_on>:
   10a66:	add.w	r2, r0, #20
   10a6a:	ldr	r0, [r0, #16]
   10a6c:	asrs	r3, r1, #5
   10a6e:	cmp	r0, r3
   10a70:	push	{r4, lr}
   10a72:	blt.n	10a98 <__any_on+0x32>
   10a74:	ble.n	10a8c <__any_on+0x26>
   10a76:	ands.w	r1, r1, #31
   10a7a:	beq.n	10a8c <__any_on+0x26>
   10a7c:	ldr.w	r4, [r2, r3, lsl #2]
   10a80:	lsr.w	r0, r4, r1
   10a84:	lsl.w	r1, r0, r1
   10a88:	cmp	r4, r1
   10a8a:	bne.n	10aa4 <__any_on+0x3e>
   10a8c:	add.w	r3, r2, r3, lsl #2
   10a90:	cmp	r3, r2
   10a92:	bhi.n	10a9c <__any_on+0x36>
   10a94:	movs	r0, #0
   10a96:	pop	{r4, pc}
   10a98:	mov	r3, r0
   10a9a:	b.n	10a8c <__any_on+0x26>
   10a9c:	ldr.w	r1, [r3, #-4]!
   10aa0:	cmp	r1, #0
   10aa2:	beq.n	10a90 <__any_on+0x2a>
   10aa4:	movs	r0, #1
   10aa6:	b.n	10a96 <__any_on+0x30>

00010aa8 <_malloc_usable_size_r>:
   10aa8:	ldr.w	r3, [r1, #-4]
   10aac:	subs	r0, r3, #4
   10aae:	cmp	r3, #0
   10ab0:	itt	lt
   10ab2:	ldrlt	r3, [r1, r0]
   10ab4:	addlt	r0, r0, r3
   10ab6:	bx	lr

00010ab8 <__ascii_wctomb>:
   10ab8:	cbz	r1, 10ace <__ascii_wctomb+0x16>
   10aba:	cmp	r2, #255	; 0xff
   10abc:	ittet	hi
   10abe:	movhi	r3, #138	; 0x8a
   10ac0:	strhi	r3, [r0, #0]
   10ac2:	strbls	r2, [r1, #0]
   10ac4:	movhi.w	r0, #4294967295
   10ac8:	it	ls
   10aca:	movls	r0, #1
   10acc:	bx	lr
   10ace:	mov	r0, r1
   10ad0:	bx	lr
	...

00010ad4 <fcvtbuf>:
   10ad4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10ad8:	mov	r8, r2
   10ada:	ldr	r2, [pc, #136]	; (10b64 <fcvtbuf+0x90>)
   10adc:	sub	sp, #28
   10ade:	ldr	r6, [r2, #0]
   10ae0:	mov	r5, r0
   10ae2:	mov	r7, r1
   10ae4:	mov	r4, r3
   10ae6:	cbnz	r3, 10b12 <fcvtbuf+0x3e>
   10ae8:	ldr	r2, [r6, #40]	; 0x28
   10aea:	ldr	r1, [r6, #44]	; 0x2c
   10aec:	add.w	r3, r0, #35	; 0x23
   10af0:	cmp	r2, r3
   10af2:	bgt.n	10b10 <fcvtbuf+0x3c>
   10af4:	add.w	r9, r0, #36	; 0x24
   10af8:	mov	r2, r9
   10afa:	mov	r0, r6
   10afc:	vstr	d0, [sp, #8]
   10b00:	bl	cdb4 <_realloc_r>
   10b04:	mov	r4, r0
   10b06:	cbz	r0, 10b4c <fcvtbuf+0x78>
   10b08:	strd	r9, r0, [r6, #40]	; 0x28
   10b0c:	vldr	d0, [sp, #8]
   10b10:	ldr	r4, [r6, #44]	; 0x2c
   10b12:	add	r3, sp, #20
   10b14:	strd	r8, r3, [sp]
   10b18:	mov	r2, r5
   10b1a:	mov	r3, r7
   10b1c:	movs	r1, #3
   10b1e:	mov	r0, r6
   10b20:	bl	ef10 <_dtoa_r>
   10b24:	ldr	r3, [r7, #0]
   10b26:	negs	r3, r3
   10b28:	mov	r2, r4
   10b2a:	subs	r3, r3, r4
   10b2c:	ldr	r1, [sp, #20]
   10b2e:	cmp	r1, r0
   10b30:	add.w	r6, r2, r3
   10b34:	bhi.n	10b54 <fcvtbuf+0x80>
   10b36:	mov	r1, r2
   10b38:	movs	r7, #48	; 0x30
   10b3a:	adds	r0, r1, r3
   10b3c:	cmp	r5, r0
   10b3e:	bgt.n	10b5e <fcvtbuf+0x8a>
   10b40:	subs	r3, r5, r6
   10b42:	cmp	r5, r6
   10b44:	it	lt
   10b46:	movlt	r3, #0
   10b48:	movs	r1, #0
   10b4a:	strb	r1, [r2, r3]
   10b4c:	mov	r0, r4
   10b4e:	add	sp, #28
   10b50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10b54:	ldrb.w	r1, [r0], #1
   10b58:	strb.w	r1, [r2], #1
   10b5c:	b.n	10b2c <fcvtbuf+0x58>
   10b5e:	strb.w	r7, [r1], #1
   10b62:	b.n	10b3a <fcvtbuf+0x66>
   10b64:	.word	0x200022d0

00010b68 <__ssputs_r>:
   10b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b6c:	ldr	r6, [r1, #8]
   10b6e:	mov	r7, r3
   10b70:	cmp	r6, r7
   10b72:	ldr	r3, [r1, #0]
   10b74:	mov	sl, r0
   10b76:	mov	r4, r1
   10b78:	mov	r8, r2
   10b7a:	bhi.n	10bd6 <__ssputs_r+0x6e>
   10b7c:	ldrh	r2, [r1, #12]
   10b7e:	tst.w	r2, #1152	; 0x480
   10b82:	beq.n	10bd2 <__ssputs_r+0x6a>
   10b84:	ldr	r5, [r4, #20]
   10b86:	ldr	r1, [r1, #16]
   10b88:	add.w	r5, r5, r5, lsl #1
   10b8c:	sub.w	r9, r3, r1
   10b90:	add.w	r5, r5, r5, lsr #31
   10b94:	adds	r3, r7, #1
   10b96:	add	r3, r9
   10b98:	asrs	r5, r5, #1
   10b9a:	cmp	r5, r3
   10b9c:	it	cc
   10b9e:	movcc	r5, r3
   10ba0:	lsls	r3, r2, #21
   10ba2:	bpl.n	10bf4 <__ssputs_r+0x8c>
   10ba4:	mov	r1, r5
   10ba6:	bl	ccb0 <_malloc_r>
   10baa:	mov	r6, r0
   10bac:	cbz	r0, 10c08 <__ssputs_r+0xa0>
   10bae:	ldr	r1, [r4, #16]
   10bb0:	mov	r2, r9
   10bb2:	bl	a254 <memcpy>
   10bb6:	ldrh	r3, [r4, #12]
   10bb8:	bic.w	r3, r3, #1152	; 0x480
   10bbc:	orr.w	r3, r3, #128	; 0x80
   10bc0:	strh	r3, [r4, #12]
   10bc2:	str	r6, [r4, #16]
   10bc4:	str	r5, [r4, #20]
   10bc6:	add	r6, r9
   10bc8:	sub.w	r5, r5, r9
   10bcc:	str	r6, [r4, #0]
   10bce:	str	r5, [r4, #8]
   10bd0:	mov	r6, r7
   10bd2:	cmp	r6, r7
   10bd4:	bls.n	10bd8 <__ssputs_r+0x70>
   10bd6:	mov	r6, r7
   10bd8:	ldr	r0, [r4, #0]
   10bda:	mov	r2, r6
   10bdc:	mov	r1, r8
   10bde:	bl	eb34 <memmove>
   10be2:	ldr	r3, [r4, #8]
   10be4:	subs	r3, r3, r6
   10be6:	str	r3, [r4, #8]
   10be8:	ldr	r3, [r4, #0]
   10bea:	add	r3, r6
   10bec:	str	r3, [r4, #0]
   10bee:	movs	r0, #0
   10bf0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10bf4:	mov	r2, r5
   10bf6:	bl	cdb4 <_realloc_r>
   10bfa:	mov	r6, r0
   10bfc:	cmp	r0, #0
   10bfe:	bne.n	10bc2 <__ssputs_r+0x5a>
   10c00:	ldr	r1, [r4, #16]
   10c02:	mov	r0, sl
   10c04:	bl	f9e8 <_free_r>
   10c08:	movs	r3, #12
   10c0a:	str.w	r3, [sl]
   10c0e:	ldrh	r3, [r4, #12]
   10c10:	orr.w	r3, r3, #64	; 0x40
   10c14:	strh	r3, [r4, #12]
   10c16:	mov.w	r0, #4294967295
   10c1a:	b.n	10bf0 <__ssputs_r+0x88>

00010c1c <_svfiprintf_r>:
   10c1c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c20:	mov	r8, r3
   10c22:	ldrh	r3, [r1, #12]
   10c24:	lsls	r3, r3, #24
   10c26:	sub	sp, #116	; 0x74
   10c28:	mov	r7, r0
   10c2a:	mov	r5, r1
   10c2c:	mov	r4, r2
   10c2e:	bpl.n	10c4e <_svfiprintf_r+0x32>
   10c30:	ldr	r3, [r1, #16]
   10c32:	cbnz	r3, 10c4e <_svfiprintf_r+0x32>
   10c34:	movs	r1, #64	; 0x40
   10c36:	bl	ccb0 <_malloc_r>
   10c3a:	str	r0, [r5, #0]
   10c3c:	str	r0, [r5, #16]
   10c3e:	cbnz	r0, 10c4a <_svfiprintf_r+0x2e>
   10c40:	movs	r3, #12
   10c42:	str	r3, [r7, #0]
   10c44:	mov.w	r0, #4294967295
   10c48:	b.n	10dec <_svfiprintf_r+0x1d0>
   10c4a:	movs	r3, #64	; 0x40
   10c4c:	str	r3, [r5, #20]
   10c4e:	movs	r3, #0
   10c50:	str	r3, [sp, #36]	; 0x24
   10c52:	movs	r3, #32
   10c54:	strb.w	r3, [sp, #41]	; 0x29
   10c58:	str.w	r8, [sp, #12]
   10c5c:	movs	r3, #48	; 0x30
   10c5e:	ldr.w	r8, [pc, #420]	; 10e04 <_svfiprintf_r+0x1e8>
   10c62:	strb.w	r3, [sp, #42]	; 0x2a
   10c66:	mov.w	r9, #1
   10c6a:	mov	r3, r4
   10c6c:	mov	sl, r3
   10c6e:	ldrb.w	r2, [r3], #1
   10c72:	cbz	r2, 10c78 <_svfiprintf_r+0x5c>
   10c74:	cmp	r2, #37	; 0x25
   10c76:	bne.n	10c6c <_svfiprintf_r+0x50>
   10c78:	subs.w	fp, sl, r4
   10c7c:	beq.n	10c96 <_svfiprintf_r+0x7a>
   10c7e:	mov	r3, fp
   10c80:	mov	r2, r4
   10c82:	mov	r1, r5
   10c84:	mov	r0, r7
   10c86:	bl	10b68 <__ssputs_r>
   10c8a:	adds	r0, #1
   10c8c:	beq.w	10de2 <_svfiprintf_r+0x1c6>
   10c90:	ldr	r2, [sp, #36]	; 0x24
   10c92:	add	r2, fp
   10c94:	str	r2, [sp, #36]	; 0x24
   10c96:	ldrb.w	r3, [sl]
   10c9a:	cmp	r3, #0
   10c9c:	beq.w	10de2 <_svfiprintf_r+0x1c6>
   10ca0:	movs	r3, #0
   10ca2:	mov.w	r2, #4294967295
   10ca6:	strd	r2, r3, [sp, #20]
   10caa:	add.w	sl, sl, #1
   10cae:	str	r3, [sp, #16]
   10cb0:	str	r3, [sp, #28]
   10cb2:	strb.w	r3, [sp, #83]	; 0x53
   10cb6:	str	r3, [sp, #104]	; 0x68
   10cb8:	mov	r4, sl
   10cba:	movs	r2, #5
   10cbc:	ldrb.w	r1, [r4], #1
   10cc0:	ldr	r0, [pc, #320]	; (10e04 <_svfiprintf_r+0x1e8>)
   10cc2:	bl	ed30 <memchr>
   10cc6:	ldr	r2, [sp, #16]
   10cc8:	cbnz	r0, 10d02 <_svfiprintf_r+0xe6>
   10cca:	lsls	r0, r2, #27
   10ccc:	itt	mi
   10cce:	movmi	r3, #32
   10cd0:	strbmi.w	r3, [sp, #83]	; 0x53
   10cd4:	lsls	r1, r2, #28
   10cd6:	itt	mi
   10cd8:	movmi	r3, #43	; 0x2b
   10cda:	strbmi.w	r3, [sp, #83]	; 0x53
   10cde:	ldrb.w	r3, [sl]
   10ce2:	cmp	r3, #42	; 0x2a
   10ce4:	beq.n	10d12 <_svfiprintf_r+0xf6>
   10ce6:	ldr	r2, [sp, #28]
   10ce8:	mov	r4, sl
   10cea:	movs	r0, #0
   10cec:	mov.w	ip, #10
   10cf0:	mov	r1, r4
   10cf2:	ldrb.w	r3, [r1], #1
   10cf6:	subs	r3, #48	; 0x30
   10cf8:	cmp	r3, #9
   10cfa:	bls.n	10d98 <_svfiprintf_r+0x17c>
   10cfc:	cbz	r0, 10d2c <_svfiprintf_r+0x110>
   10cfe:	str	r2, [sp, #28]
   10d00:	b.n	10d2c <_svfiprintf_r+0x110>
   10d02:	sub.w	r3, r0, r8
   10d06:	lsl.w	r3, r9, r3
   10d0a:	orrs	r3, r2
   10d0c:	str	r3, [sp, #16]
   10d0e:	mov	sl, r4
   10d10:	b.n	10cb8 <_svfiprintf_r+0x9c>
   10d12:	ldr	r3, [sp, #12]
   10d14:	adds	r1, r3, #4
   10d16:	ldr	r3, [r3, #0]
   10d18:	str	r1, [sp, #12]
   10d1a:	cmp	r3, #0
   10d1c:	ittet	lt
   10d1e:	neglt	r3, r3
   10d20:	orrlt.w	r2, r2, #2
   10d24:	strge	r3, [sp, #28]
   10d26:	strlt	r3, [sp, #28]
   10d28:	it	lt
   10d2a:	strlt	r2, [sp, #16]
   10d2c:	ldrb	r3, [r4, #0]
   10d2e:	cmp	r3, #46	; 0x2e
   10d30:	bne.n	10d4c <_svfiprintf_r+0x130>
   10d32:	ldrb	r3, [r4, #1]
   10d34:	cmp	r3, #42	; 0x2a
   10d36:	bne.n	10da2 <_svfiprintf_r+0x186>
   10d38:	ldr	r3, [sp, #12]
   10d3a:	adds	r2, r3, #4
   10d3c:	ldr	r3, [r3, #0]
   10d3e:	str	r2, [sp, #12]
   10d40:	cmp	r3, #0
   10d42:	it	lt
   10d44:	movlt.w	r3, #4294967295
   10d48:	adds	r4, #2
   10d4a:	str	r3, [sp, #20]
   10d4c:	ldr.w	sl, [pc, #196]	; 10e14 <_svfiprintf_r+0x1f8>
   10d50:	ldrb	r1, [r4, #0]
   10d52:	movs	r2, #3
   10d54:	mov	r0, sl
   10d56:	bl	ed30 <memchr>
   10d5a:	cbz	r0, 10d6c <_svfiprintf_r+0x150>
   10d5c:	ldr	r3, [sp, #16]
   10d5e:	sub.w	r0, r0, sl
   10d62:	movs	r2, #64	; 0x40
   10d64:	lsls	r2, r0
   10d66:	orrs	r3, r2
   10d68:	adds	r4, #1
   10d6a:	str	r3, [sp, #16]
   10d6c:	ldrb.w	r1, [r4], #1
   10d70:	ldr	r0, [pc, #148]	; (10e08 <_svfiprintf_r+0x1ec>)
   10d72:	strb.w	r1, [sp, #40]	; 0x28
   10d76:	movs	r2, #6
   10d78:	bl	ed30 <memchr>
   10d7c:	cmp	r0, #0
   10d7e:	beq.n	10df2 <_svfiprintf_r+0x1d6>
   10d80:	ldr	r3, [pc, #136]	; (10e0c <_svfiprintf_r+0x1f0>)
   10d82:	cbnz	r3, 10dcc <_svfiprintf_r+0x1b0>
   10d84:	ldr	r3, [sp, #12]
   10d86:	adds	r3, #7
   10d88:	bic.w	r3, r3, #7
   10d8c:	adds	r3, #8
   10d8e:	str	r3, [sp, #12]
   10d90:	ldr	r3, [sp, #36]	; 0x24
   10d92:	add	r3, r6
   10d94:	str	r3, [sp, #36]	; 0x24
   10d96:	b.n	10c6a <_svfiprintf_r+0x4e>
   10d98:	mla	r2, ip, r2, r3
   10d9c:	mov	r4, r1
   10d9e:	movs	r0, #1
   10da0:	b.n	10cf0 <_svfiprintf_r+0xd4>
   10da2:	movs	r3, #0
   10da4:	adds	r4, #1
   10da6:	str	r3, [sp, #20]
   10da8:	mov	r1, r3
   10daa:	mov.w	ip, #10
   10dae:	mov	r0, r4
   10db0:	ldrb.w	r2, [r0], #1
   10db4:	subs	r2, #48	; 0x30
   10db6:	cmp	r2, #9
   10db8:	bls.n	10dc2 <_svfiprintf_r+0x1a6>
   10dba:	cmp	r3, #0
   10dbc:	beq.n	10d4c <_svfiprintf_r+0x130>
   10dbe:	str	r1, [sp, #20]
   10dc0:	b.n	10d4c <_svfiprintf_r+0x130>
   10dc2:	mla	r1, ip, r1, r2
   10dc6:	mov	r4, r0
   10dc8:	movs	r3, #1
   10dca:	b.n	10dae <_svfiprintf_r+0x192>
   10dcc:	add	r3, sp, #12
   10dce:	str	r3, [sp, #0]
   10dd0:	mov	r2, r5
   10dd2:	ldr	r3, [pc, #60]	; (10e10 <_svfiprintf_r+0x1f4>)
   10dd4:	add	r1, sp, #16
   10dd6:	mov	r0, r7
   10dd8:	bl	dc10 <_printf_float>
   10ddc:	adds	r2, r0, #1
   10dde:	mov	r6, r0
   10de0:	bne.n	10d90 <_svfiprintf_r+0x174>
   10de2:	ldrh	r3, [r5, #12]
   10de4:	lsls	r3, r3, #25
   10de6:	bmi.w	10c44 <_svfiprintf_r+0x28>
   10dea:	ldr	r0, [sp, #36]	; 0x24
   10dec:	add	sp, #116	; 0x74
   10dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10df2:	add	r3, sp, #12
   10df4:	str	r3, [sp, #0]
   10df6:	mov	r2, r5
   10df8:	ldr	r3, [pc, #20]	; (10e10 <_svfiprintf_r+0x1f4>)
   10dfa:	add	r1, sp, #16
   10dfc:	mov	r0, r7
   10dfe:	bl	e120 <_printf_i>
   10e02:	b.n	10ddc <_svfiprintf_r+0x1c0>
   10e04:	.word	0x20001421
   10e08:	.word	0x2000142b
   10e0c:	.word	0x0000dc11
   10e10:	.word	0x00010b69
   10e14:	.word	0x20001427

00010e18 <_sungetc_r>:
   10e18:	push	{r3, r4, r5, lr}
   10e1a:	adds	r3, r1, #1
   10e1c:	mov	r4, r2
   10e1e:	bne.n	10e28 <_sungetc_r+0x10>
   10e20:	mov.w	r5, #4294967295
   10e24:	mov	r0, r5
   10e26:	pop	{r3, r4, r5, pc}
   10e28:	ldrh	r3, [r2, #12]
   10e2a:	bic.w	r3, r3, #32
   10e2e:	strh	r3, [r2, #12]
   10e30:	ldr	r3, [r4, #52]	; 0x34
   10e32:	ldr	r2, [r2, #4]
   10e34:	uxtb	r5, r1
   10e36:	cbz	r3, 10e5c <_sungetc_r+0x44>
   10e38:	ldr	r3, [r4, #56]	; 0x38
   10e3a:	cmp	r3, r2
   10e3c:	ble.n	10e50 <_sungetc_r+0x38>
   10e3e:	ldr	r3, [r4, #0]
   10e40:	subs	r2, r3, #1
   10e42:	str	r2, [r4, #0]
   10e44:	strb.w	r5, [r3, #-1]
   10e48:	ldr	r3, [r4, #4]
   10e4a:	adds	r3, #1
   10e4c:	str	r3, [r4, #4]
   10e4e:	b.n	10e24 <_sungetc_r+0xc>
   10e50:	mov	r1, r4
   10e52:	bl	11626 <__submore>
   10e56:	cmp	r0, #0
   10e58:	beq.n	10e3e <_sungetc_r+0x26>
   10e5a:	b.n	10e20 <_sungetc_r+0x8>
   10e5c:	ldr	r1, [r4, #16]
   10e5e:	ldr	r3, [r4, #0]
   10e60:	cbz	r1, 10e78 <_sungetc_r+0x60>
   10e62:	cmp	r1, r3
   10e64:	bcs.n	10e78 <_sungetc_r+0x60>
   10e66:	ldrb.w	r1, [r3, #-1]
   10e6a:	cmp	r1, r5
   10e6c:	bne.n	10e78 <_sungetc_r+0x60>
   10e6e:	subs	r3, #1
   10e70:	adds	r2, #1
   10e72:	str	r3, [r4, #0]
   10e74:	str	r2, [r4, #4]
   10e76:	b.n	10e24 <_sungetc_r+0xc>
   10e78:	strd	r3, r2, [r4, #60]	; 0x3c
   10e7c:	add.w	r3, r4, #68	; 0x44
   10e80:	str	r3, [r4, #52]	; 0x34
   10e82:	movs	r3, #3
   10e84:	str	r3, [r4, #56]	; 0x38
   10e86:	mov	r3, r4
   10e88:	strb.w	r5, [r3, #70]!
   10e8c:	str	r3, [r4, #0]
   10e8e:	movs	r3, #1
   10e90:	b.n	10e4c <_sungetc_r+0x34>

00010e92 <__ssrefill_r>:
   10e92:	push	{r4, lr}
   10e94:	mov	r4, r1
   10e96:	ldr	r1, [r1, #52]	; 0x34
   10e98:	cbz	r1, 10eb6 <__ssrefill_r+0x24>
   10e9a:	add.w	r3, r4, #68	; 0x44
   10e9e:	cmp	r1, r3
   10ea0:	beq.n	10ea6 <__ssrefill_r+0x14>
   10ea2:	bl	f9e8 <_free_r>
   10ea6:	ldr	r3, [r4, #64]	; 0x40
   10ea8:	str	r3, [r4, #4]
   10eaa:	movs	r0, #0
   10eac:	str	r0, [r4, #52]	; 0x34
   10eae:	cbz	r3, 10eb6 <__ssrefill_r+0x24>
   10eb0:	ldr	r3, [r4, #60]	; 0x3c
   10eb2:	str	r3, [r4, #0]
   10eb4:	pop	{r4, pc}
   10eb6:	ldr	r3, [r4, #16]
   10eb8:	str	r3, [r4, #0]
   10eba:	movs	r3, #0
   10ebc:	str	r3, [r4, #4]
   10ebe:	ldrh	r3, [r4, #12]
   10ec0:	orr.w	r3, r3, #32
   10ec4:	strh	r3, [r4, #12]
   10ec6:	mov.w	r0, #4294967295
   10eca:	b.n	10eb4 <__ssrefill_r+0x22>

00010ecc <__ssvfiscanf_r>:
   10ecc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10ed0:	mov	r4, r1
   10ed2:	sub.w	sp, sp, #648	; 0x288
   10ed6:	movs	r1, #0
   10ed8:	strd	r1, r1, [sp, #272]	; 0x110
   10edc:	ldr	r1, [pc, #664]	; (11178 <__ssvfiscanf_r+0x2ac>)
   10ede:	str	r1, [sp, #640]	; 0x280
   10ee0:	add.w	r8, sp, #4
   10ee4:	ldr	r1, [pc, #660]	; (1117c <__ssvfiscanf_r+0x2b0>)
   10ee6:	ldr	r7, [pc, #664]	; (11180 <__ssvfiscanf_r+0x2b4>)
   10ee8:	ldr.w	r9, [pc, #664]	; 11184 <__ssvfiscanf_r+0x2b8>
   10eec:	str.w	r8, [sp, #280]	; 0x118
   10ef0:	mov	r6, r0
   10ef2:	str	r1, [sp, #644]	; 0x284
   10ef4:	str	r3, [sp, #0]
   10ef6:	ldrb	r3, [r2, #0]
   10ef8:	cmp	r3, #0
   10efa:	beq.w	111b2 <__ssvfiscanf_r+0x2e6>
   10efe:	ldrb	r1, [r7, r3]
   10f00:	ands.w	r1, r1, #8
   10f04:	add.w	r5, r2, #1
   10f08:	beq.n	10f3e <__ssvfiscanf_r+0x72>
   10f0a:	ldr	r3, [r4, #4]
   10f0c:	cmp	r3, #0
   10f0e:	ble.n	10f30 <__ssvfiscanf_r+0x64>
   10f10:	ldr	r3, [r4, #0]
   10f12:	ldrb	r2, [r3, #0]
   10f14:	ldrb	r2, [r7, r2]
   10f16:	lsls	r2, r2, #28
   10f18:	bmi.n	10f1e <__ssvfiscanf_r+0x52>
   10f1a:	mov	r2, r5
   10f1c:	b.n	10ef6 <__ssvfiscanf_r+0x2a>
   10f1e:	ldr	r2, [sp, #276]	; 0x114
   10f20:	adds	r2, #1
   10f22:	str	r2, [sp, #276]	; 0x114
   10f24:	ldr	r2, [r4, #4]
   10f26:	adds	r3, #1
   10f28:	subs	r2, #1
   10f2a:	str	r2, [r4, #4]
   10f2c:	str	r3, [r4, #0]
   10f2e:	b.n	10f0a <__ssvfiscanf_r+0x3e>
   10f30:	ldr	r3, [sp, #644]	; 0x284
   10f32:	mov	r1, r4
   10f34:	mov	r0, r6
   10f36:	blx	r3
   10f38:	cmp	r0, #0
   10f3a:	beq.n	10f10 <__ssvfiscanf_r+0x44>
   10f3c:	b.n	10f1a <__ssvfiscanf_r+0x4e>
   10f3e:	cmp	r3, #37	; 0x25
   10f40:	beq.n	10f68 <__ssvfiscanf_r+0x9c>
   10f42:	mov	sl, r3
   10f44:	ldr	r3, [r4, #4]
   10f46:	cmp	r3, #0
   10f48:	ble.w	1106e <__ssvfiscanf_r+0x1a2>
   10f4c:	ldr	r2, [r4, #0]
   10f4e:	ldrb	r3, [r2, #0]
   10f50:	cmp	r3, sl
   10f52:	bne.w	111b2 <__ssvfiscanf_r+0x2e6>
   10f56:	ldr	r3, [r4, #4]
   10f58:	subs	r3, #1
   10f5a:	str	r3, [r4, #4]
   10f5c:	ldr	r3, [sp, #276]	; 0x114
   10f5e:	adds	r2, #1
   10f60:	adds	r3, #1
   10f62:	str	r2, [r4, #0]
   10f64:	str	r3, [sp, #276]	; 0x114
   10f66:	b.n	10f1a <__ssvfiscanf_r+0x4e>
   10f68:	str	r1, [sp, #260]	; 0x104
   10f6a:	str	r1, [sp, #268]	; 0x10c
   10f6c:	ldrb	r3, [r2, #1]
   10f6e:	cmp	r3, #42	; 0x2a
   10f70:	ittt	eq
   10f72:	moveq	r3, #16
   10f74:	addeq	r5, r2, #2
   10f76:	streq	r3, [sp, #260]	; 0x104
   10f78:	movs	r2, #10
   10f7a:	mov	sl, r5
   10f7c:	ldrb.w	r1, [sl], #1
   10f80:	sub.w	r3, r1, #48	; 0x30
   10f84:	cmp	r3, #9
   10f86:	bls.n	10fc2 <__ssvfiscanf_r+0xf6>
   10f88:	ldr	r0, [pc, #504]	; (11184 <__ssvfiscanf_r+0x2b8>)
   10f8a:	movs	r2, #3
   10f8c:	bl	ed30 <memchr>
   10f90:	cbz	r0, 10fa2 <__ssvfiscanf_r+0xd6>
   10f92:	ldr	r2, [sp, #260]	; 0x104
   10f94:	sub.w	r0, r0, r9
   10f98:	movs	r3, #1
   10f9a:	lsls	r3, r0
   10f9c:	orrs	r3, r2
   10f9e:	str	r3, [sp, #260]	; 0x104
   10fa0:	mov	r5, sl
   10fa2:	ldrb.w	r3, [r5], #1
   10fa6:	cmp	r3, #120	; 0x78
   10fa8:	bhi.n	10fb8 <__ssvfiscanf_r+0xec>
   10faa:	cmp	r3, #87	; 0x57
   10fac:	bhi.n	10fd0 <__ssvfiscanf_r+0x104>
   10fae:	cmp	r3, #37	; 0x25
   10fb0:	beq.n	10f42 <__ssvfiscanf_r+0x76>
   10fb2:	bhi.n	11064 <__ssvfiscanf_r+0x198>
   10fb4:	cmp	r3, #0
   10fb6:	beq.n	11084 <__ssvfiscanf_r+0x1b8>
   10fb8:	movs	r3, #3
   10fba:	str	r3, [sp, #284]	; 0x11c
   10fbc:	movs	r3, #10
   10fbe:	str	r3, [sp, #264]	; 0x108
   10fc0:	b.n	110b0 <__ssvfiscanf_r+0x1e4>
   10fc2:	ldr	r3, [sp, #268]	; 0x10c
   10fc4:	mla	r1, r2, r3, r1
   10fc8:	subs	r1, #48	; 0x30
   10fca:	str	r1, [sp, #268]	; 0x10c
   10fcc:	mov	r5, sl
   10fce:	b.n	10f7a <__ssvfiscanf_r+0xae>
   10fd0:	sub.w	r2, r3, #88	; 0x58
   10fd4:	cmp	r2, #32
   10fd6:	bhi.n	10fb8 <__ssvfiscanf_r+0xec>
   10fd8:	add	r1, pc, #4	; (adr r1, 10fe0 <__ssvfiscanf_r+0x114>)
   10fda:	ldr.w	pc, [r1, r2, lsl #2]
   10fde:	nop
   10fe0:	.word	0x00011093
   10fe4:	.word	0x00010fb9
   10fe8:	.word	0x00010fb9
   10fec:	.word	0x000110f1
   10ff0:	.word	0x00010fb9
   10ff4:	.word	0x00010fb9
   10ff8:	.word	0x00010fb9
   10ffc:	.word	0x00010fb9
   11000:	.word	0x00010fb9
   11004:	.word	0x00010fb9
   11008:	.word	0x00010fb9
   1100c:	.word	0x00011107
   11010:	.word	0x000110ed
   11014:	.word	0x0001106b
   11018:	.word	0x0001106b
   1101c:	.word	0x0001106b
   11020:	.word	0x00010fb9
   11024:	.word	0x000110a9
   11028:	.word	0x00010fb9
   1102c:	.word	0x00010fb9
   11030:	.word	0x00010fb9
   11034:	.word	0x00010fb9
   11038:	.word	0x00011117
   1103c:	.word	0x000110e5
   11040:	.word	0x0001108b
   11044:	.word	0x00010fb9
   11048:	.word	0x00010fb9
   1104c:	.word	0x00011113
   11050:	.word	0x00010fb9
   11054:	.word	0x000110ed
   11058:	.word	0x00010fb9
   1105c:	.word	0x00010fb9
   11060:	.word	0x00011093
   11064:	subs	r3, #69	; 0x45
   11066:	cmp	r3, #2
   11068:	bhi.n	10fb8 <__ssvfiscanf_r+0xec>
   1106a:	movs	r3, #5
   1106c:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   1106e:	ldr	r3, [sp, #644]	; 0x284
   11070:	mov	r1, r4
   11072:	mov	r0, r6
   11074:	blx	r3
   11076:	cmp	r0, #0
   11078:	beq.w	10f4c <__ssvfiscanf_r+0x80>
   1107c:	ldr	r0, [sp, #272]	; 0x110
   1107e:	cmp	r0, #0
   11080:	bne.w	1119e <__ssvfiscanf_r+0x2d2>
   11084:	mov.w	r0, #4294967295
   11088:	b.n	111aa <__ssvfiscanf_r+0x2de>
   1108a:	ldr	r2, [sp, #260]	; 0x104
   1108c:	orr.w	r2, r2, #32
   11090:	str	r2, [sp, #260]	; 0x104
   11092:	ldr	r2, [sp, #260]	; 0x104
   11094:	orr.w	r2, r2, #512	; 0x200
   11098:	str	r2, [sp, #260]	; 0x104
   1109a:	movs	r2, #16
   1109c:	cmp	r3, #111	; 0x6f
   1109e:	str	r2, [sp, #264]	; 0x108
   110a0:	ite	cc
   110a2:	movcc	r3, #3
   110a4:	movcs	r3, #4
   110a6:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   110a8:	movs	r3, #0
   110aa:	str	r3, [sp, #264]	; 0x108
   110ac:	movs	r3, #3
   110ae:	str	r3, [sp, #284]	; 0x11c
   110b0:	ldr	r3, [r4, #4]
   110b2:	cmp	r3, #0
   110b4:	ble.n	11132 <__ssvfiscanf_r+0x266>
   110b6:	ldr	r3, [sp, #260]	; 0x104
   110b8:	lsls	r1, r3, #25
   110ba:	bmi.n	110c6 <__ssvfiscanf_r+0x1fa>
   110bc:	ldr	r3, [r4, #0]
   110be:	ldrb	r2, [r3, #0]
   110c0:	ldrb	r2, [r7, r2]
   110c2:	lsls	r2, r2, #28
   110c4:	bmi.n	11140 <__ssvfiscanf_r+0x274>
   110c6:	ldr	r3, [sp, #284]	; 0x11c
   110c8:	cmp	r3, #2
   110ca:	bgt.n	11164 <__ssvfiscanf_r+0x298>
   110cc:	mov	r3, sp
   110ce:	mov	r2, r4
   110d0:	add	r1, sp, #260	; 0x104
   110d2:	mov	r0, r6
   110d4:	bl	111bc <_scanf_chars>
   110d8:	cmp	r0, #1
   110da:	beq.n	111b2 <__ssvfiscanf_r+0x2e6>
   110dc:	cmp	r0, #2
   110de:	bne.w	10f1a <__ssvfiscanf_r+0x4e>
   110e2:	b.n	1107c <__ssvfiscanf_r+0x1b0>
   110e4:	movs	r3, #8
   110e6:	str	r3, [sp, #264]	; 0x108
   110e8:	movs	r3, #4
   110ea:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   110ec:	movs	r2, #10
   110ee:	b.n	1109c <__ssvfiscanf_r+0x1d0>
   110f0:	mov	r1, r5
   110f2:	mov	r0, r8
   110f4:	bl	115b4 <__sccl>
   110f8:	ldr	r3, [sp, #260]	; 0x104
   110fa:	orr.w	r3, r3, #64	; 0x40
   110fe:	str	r3, [sp, #260]	; 0x104
   11100:	mov	r5, r0
   11102:	movs	r3, #1
   11104:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   11106:	ldr	r3, [sp, #260]	; 0x104
   11108:	orr.w	r3, r3, #64	; 0x40
   1110c:	str	r3, [sp, #260]	; 0x104
   1110e:	movs	r3, #0
   11110:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   11112:	movs	r3, #2
   11114:	b.n	110ae <__ssvfiscanf_r+0x1e2>
   11116:	ldr	r0, [sp, #260]	; 0x104
   11118:	lsls	r3, r0, #27
   1111a:	bmi.w	10f1a <__ssvfiscanf_r+0x4e>
   1111e:	ldr	r3, [sp, #0]
   11120:	ldr	r2, [sp, #276]	; 0x114
   11122:	adds	r1, r3, #4
   11124:	str	r1, [sp, #0]
   11126:	ldr	r3, [r3, #0]
   11128:	lsls	r0, r0, #31
   1112a:	ite	mi
   1112c:	strhmi	r2, [r3, #0]
   1112e:	strpl	r2, [r3, #0]
   11130:	b.n	10f1a <__ssvfiscanf_r+0x4e>
   11132:	ldr	r3, [sp, #644]	; 0x284
   11134:	mov	r1, r4
   11136:	mov	r0, r6
   11138:	blx	r3
   1113a:	cmp	r0, #0
   1113c:	beq.n	110b6 <__ssvfiscanf_r+0x1ea>
   1113e:	b.n	1107c <__ssvfiscanf_r+0x1b0>
   11140:	ldr	r2, [sp, #276]	; 0x114
   11142:	adds	r2, #1
   11144:	str	r2, [sp, #276]	; 0x114
   11146:	ldr	r2, [r4, #4]
   11148:	subs	r2, #1
   1114a:	cmp	r2, #0
   1114c:	str	r2, [r4, #4]
   1114e:	ble.n	11156 <__ssvfiscanf_r+0x28a>
   11150:	adds	r3, #1
   11152:	str	r3, [r4, #0]
   11154:	b.n	110bc <__ssvfiscanf_r+0x1f0>
   11156:	ldr	r3, [sp, #644]	; 0x284
   11158:	mov	r1, r4
   1115a:	mov	r0, r6
   1115c:	blx	r3
   1115e:	cmp	r0, #0
   11160:	beq.n	110bc <__ssvfiscanf_r+0x1f0>
   11162:	b.n	1107c <__ssvfiscanf_r+0x1b0>
   11164:	cmp	r3, #4
   11166:	bgt.n	11188 <__ssvfiscanf_r+0x2bc>
   11168:	mov	r3, sp
   1116a:	mov	r2, r4
   1116c:	add	r1, sp, #260	; 0x104
   1116e:	mov	r0, r6
   11170:	bl	11270 <_scanf_i>
   11174:	b.n	110d8 <__ssvfiscanf_r+0x20c>
   11176:	nop
   11178:	.word	0x00010e19
   1117c:	.word	0x00010e93
   11180:	.word	0x2000124c
   11184:	.word	0x20001427
   11188:	ldr	r3, [pc, #44]	; (111b8 <__ssvfiscanf_r+0x2ec>)
   1118a:	cmp	r3, #0
   1118c:	beq.w	10f1a <__ssvfiscanf_r+0x4e>
   11190:	mov	r3, sp
   11192:	mov	r2, r4
   11194:	add	r1, sp, #260	; 0x104
   11196:	mov	r0, r6
   11198:	bl	e364 <_scanf_float>
   1119c:	b.n	110d8 <__ssvfiscanf_r+0x20c>
   1119e:	ldrh	r3, [r4, #12]
   111a0:	tst.w	r3, #64	; 0x40
   111a4:	it	ne
   111a6:	movne.w	r0, #4294967295
   111aa:	add.w	sp, sp, #648	; 0x288
   111ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   111b2:	ldr	r0, [sp, #272]	; 0x110
   111b4:	b.n	111aa <__ssvfiscanf_r+0x2de>
   111b6:	nop
   111b8:	.word	0x0000e365

000111bc <_scanf_chars>:
   111bc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   111c0:	mov	r5, r2
   111c2:	ldr	r2, [r1, #8]
   111c4:	mov	r8, r0
   111c6:	mov	r4, r1
   111c8:	cbnz	r2, 111d8 <_scanf_chars+0x1c>
   111ca:	ldr	r2, [r1, #24]
   111cc:	cmp	r2, #0
   111ce:	ite	eq
   111d0:	moveq	r2, #1
   111d2:	movne.w	r2, #4294967295
   111d6:	str	r2, [r1, #8]
   111d8:	ldr	r2, [r4, #0]
   111da:	ldr.w	r9, [pc, #144]	; 1126c <_scanf_chars+0xb0>
   111de:	lsls	r1, r2, #27
   111e0:	itttt	pl
   111e2:	ldrpl	r2, [r3, #0]
   111e4:	addpl	r1, r2, #4
   111e6:	strpl	r1, [r3, #0]
   111e8:	ldrpl	r6, [r2, #0]
   111ea:	movs	r7, #0
   111ec:	ldr	r0, [r4, #24]
   111ee:	cbz	r0, 11214 <_scanf_chars+0x58>
   111f0:	cmp	r0, #1
   111f2:	bne.n	11204 <_scanf_chars+0x48>
   111f4:	ldr	r2, [r5, #0]
   111f6:	ldrb	r1, [r2, #0]
   111f8:	ldr	r2, [r4, #20]
   111fa:	ldrb	r2, [r2, r1]
   111fc:	cbnz	r2, 11214 <_scanf_chars+0x58>
   111fe:	cmp	r7, #0
   11200:	beq.n	11266 <_scanf_chars+0xaa>
   11202:	b.n	1124a <_scanf_chars+0x8e>
   11204:	cmp	r0, #2
   11206:	bne.n	1124a <_scanf_chars+0x8e>
   11208:	ldr	r3, [r5, #0]
   1120a:	ldrb	r3, [r3, #0]
   1120c:	ldrb.w	r3, [r9, r3]
   11210:	lsls	r3, r3, #28
   11212:	bmi.n	1124a <_scanf_chars+0x8e>
   11214:	ldr	r3, [r4, #0]
   11216:	lsls	r2, r3, #27
   11218:	ittt	pl
   1121a:	ldrpl	r3, [r5, #0]
   1121c:	ldrbpl	r3, [r3, #0]
   1121e:	strbpl.w	r3, [r6], #1
   11222:	ldr	r2, [r5, #0]
   11224:	ldr	r3, [r5, #4]
   11226:	adds	r2, #1
   11228:	str	r2, [r5, #0]
   1122a:	ldr	r2, [r4, #8]
   1122c:	subs	r3, #1
   1122e:	subs	r2, #1
   11230:	str	r3, [r5, #4]
   11232:	adds	r7, #1
   11234:	str	r2, [r4, #8]
   11236:	cbz	r2, 1124a <_scanf_chars+0x8e>
   11238:	cmp	r3, #0
   1123a:	bgt.n	111ec <_scanf_chars+0x30>
   1123c:	ldr.w	r3, [r4, #384]	; 0x180
   11240:	mov	r1, r5
   11242:	mov	r0, r8
   11244:	blx	r3
   11246:	cmp	r0, #0
   11248:	beq.n	111ec <_scanf_chars+0x30>
   1124a:	ldr	r3, [r4, #0]
   1124c:	ands.w	r3, r3, #16
   11250:	bne.n	1125e <_scanf_chars+0xa2>
   11252:	ldr	r2, [r4, #12]
   11254:	adds	r2, #1
   11256:	str	r2, [r4, #12]
   11258:	ldr	r2, [r4, #24]
   1125a:	cbz	r2, 1125e <_scanf_chars+0xa2>
   1125c:	strb	r3, [r6, #0]
   1125e:	ldr	r3, [r4, #16]
   11260:	add	r3, r7
   11262:	str	r3, [r4, #16]
   11264:	movs	r0, #0
   11266:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1126a:	nop
   1126c:	.word	0x2000124c

00011270 <_scanf_i>:
   11270:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11274:	mov	r8, r3
   11276:	ldr	r3, [pc, #464]	; (11448 <_scanf_i+0x1d8>)
   11278:	mov	r4, r1
   1127a:	mov	sl, r0
   1127c:	mov	r6, r2
   1127e:	ldmia.w	r3, {r0, r1, r2}
   11282:	sub	sp, #28
   11284:	add	r3, sp, #12
   11286:	stmia.w	r3, {r0, r1, r2}
   1128a:	ldr	r3, [pc, #448]	; (1144c <_scanf_i+0x1dc>)
   1128c:	ldr	r1, [r4, #24]
   1128e:	ldr	r2, [pc, #448]	; (11450 <_scanf_i+0x1e0>)
   11290:	cmp	r1, #3
   11292:	it	ne
   11294:	movne	r2, r3
   11296:	ldr	r3, [r4, #8]
   11298:	str	r2, [sp, #4]
   1129a:	subs	r2, r3, #1
   1129c:	cmp.w	r2, #348	; 0x15c
   112a0:	it	hi
   112a2:	mvnhi.w	r5, #348	; 0x15c
   112a6:	mov	r7, r4
   112a8:	ittt	hi
   112aa:	addhi.w	r9, r3, r5
   112ae:	movwhi	r3, #349	; 0x15d
   112b2:	strhi	r3, [r4, #8]
   112b4:	ldr.w	r3, [r7], #28
   112b8:	orr.w	r3, r3, #3328	; 0xd00
   112bc:	it	ls
   112be:	movls.w	r9, #0
   112c2:	str	r3, [r4, #0]
   112c4:	mov	r5, r7
   112c6:	mov.w	fp, #0
   112ca:	ldr	r1, [r6, #0]
   112cc:	add	r3, sp, #12
   112ce:	ldrb	r1, [r1, #0]
   112d0:	ldr.w	r0, [r3, fp, lsl #2]
   112d4:	movs	r2, #2
   112d6:	bl	ed30 <memchr>
   112da:	cbz	r0, 11328 <_scanf_i+0xb8>
   112dc:	cmp.w	fp, #1
   112e0:	bne.n	11396 <_scanf_i+0x126>
   112e2:	ldr	r2, [r4, #4]
   112e4:	cbnz	r2, 112f2 <_scanf_i+0x82>
   112e6:	ldr	r2, [r4, #0]
   112e8:	movs	r3, #8
   112ea:	orr.w	r2, r2, #512	; 0x200
   112ee:	str	r3, [r4, #4]
   112f0:	str	r2, [r4, #0]
   112f2:	ldr	r2, [r4, #0]
   112f4:	bic.w	r2, r2, #1280	; 0x500
   112f8:	str	r2, [r4, #0]
   112fa:	ldr	r2, [r4, #8]
   112fc:	subs	r1, r2, #1
   112fe:	str	r1, [r4, #8]
   11300:	cbz	r2, 11328 <_scanf_i+0xb8>
   11302:	ldr	r2, [r6, #0]
   11304:	adds	r1, r2, #1
   11306:	str	r1, [r6, #0]
   11308:	ldrb	r2, [r2, #0]
   1130a:	strb.w	r2, [r5], #1
   1130e:	ldr	r2, [r6, #4]
   11310:	subs	r2, #1
   11312:	cmp	r2, #0
   11314:	str	r2, [r6, #4]
   11316:	bgt.n	11328 <_scanf_i+0xb8>
   11318:	ldr.w	r2, [r4, #384]	; 0x180
   1131c:	mov	r1, r6
   1131e:	mov	r0, sl
   11320:	blx	r2
   11322:	cmp	r0, #0
   11324:	bne.w	11432 <_scanf_i+0x1c2>
   11328:	add.w	fp, fp, #1
   1132c:	cmp.w	fp, #3
   11330:	bne.n	112ca <_scanf_i+0x5a>
   11332:	ldr	r3, [r4, #4]
   11334:	cbnz	r3, 1133a <_scanf_i+0xca>
   11336:	movs	r3, #10
   11338:	str	r3, [r4, #4]
   1133a:	ldr	r3, [r4, #4]
   1133c:	ldr	r1, [pc, #276]	; (11454 <_scanf_i+0x1e4>)
   1133e:	ldr	r0, [r4, #20]
   11340:	subs	r1, r1, r3
   11342:	bl	115b4 <__sccl>
   11346:	mov.w	fp, #0
   1134a:	ldr	r3, [r4, #8]
   1134c:	ldr	r2, [r4, #0]
   1134e:	cmp	r3, #0
   11350:	beq.n	113ce <_scanf_i+0x15e>
   11352:	ldr	r1, [r6, #0]
   11354:	ldr	r0, [r4, #20]
   11356:	ldrb.w	ip, [r1]
   1135a:	ldrb.w	r0, [r0, ip]
   1135e:	cmp	r0, #0
   11360:	beq.n	113ce <_scanf_i+0x15e>
   11362:	cmp.w	ip, #48	; 0x30
   11366:	bne.n	113b2 <_scanf_i+0x142>
   11368:	lsls	r0, r2, #20
   1136a:	bpl.n	113b2 <_scanf_i+0x142>
   1136c:	add.w	fp, fp, #1
   11370:	cmp.w	r9, #0
   11374:	beq.n	1137e <_scanf_i+0x10e>
   11376:	adds	r3, #1
   11378:	add.w	r9, r9, #4294967295
   1137c:	str	r3, [r4, #8]
   1137e:	ldr	r3, [r6, #4]
   11380:	subs	r3, #1
   11382:	cmp	r3, #0
   11384:	str	r3, [r6, #4]
   11386:	ble.n	113c0 <_scanf_i+0x150>
   11388:	ldr	r3, [r6, #0]
   1138a:	adds	r3, #1
   1138c:	str	r3, [r6, #0]
   1138e:	ldr	r3, [r4, #8]
   11390:	subs	r3, #1
   11392:	str	r3, [r4, #8]
   11394:	b.n	1134a <_scanf_i+0xda>
   11396:	cmp.w	fp, #2
   1139a:	bne.n	112fa <_scanf_i+0x8a>
   1139c:	ldr	r2, [r4, #0]
   1139e:	and.w	r1, r2, #1536	; 0x600
   113a2:	cmp.w	r1, #512	; 0x200
   113a6:	bne.n	11328 <_scanf_i+0xb8>
   113a8:	movs	r3, #16
   113aa:	str	r3, [r4, #4]
   113ac:	orr.w	r2, r2, #256	; 0x100
   113b0:	b.n	112f8 <_scanf_i+0x88>
   113b2:	bic.w	r2, r2, #2304	; 0x900
   113b6:	str	r2, [r4, #0]
   113b8:	ldrb	r3, [r1, #0]
   113ba:	strb.w	r3, [r5], #1
   113be:	b.n	1137e <_scanf_i+0x10e>
   113c0:	ldr.w	r3, [r4, #384]	; 0x180
   113c4:	mov	r1, r6
   113c6:	mov	r0, sl
   113c8:	blx	r3
   113ca:	cmp	r0, #0
   113cc:	beq.n	1138e <_scanf_i+0x11e>
   113ce:	ldr	r3, [r4, #0]
   113d0:	lsls	r1, r3, #23
   113d2:	bpl.n	113f0 <_scanf_i+0x180>
   113d4:	cmp	r5, r7
   113d6:	bls.n	113ec <_scanf_i+0x17c>
   113d8:	ldrb.w	r1, [r5, #-1]
   113dc:	ldr.w	r3, [r4, #380]	; 0x17c
   113e0:	mov	r2, r6
   113e2:	mov	r0, sl
   113e4:	blx	r3
   113e6:	add.w	r9, r5, #4294967295
   113ea:	mov	r5, r9
   113ec:	cmp	r5, r7
   113ee:	beq.n	11442 <_scanf_i+0x1d2>
   113f0:	ldr	r2, [r4, #0]
   113f2:	ands.w	r2, r2, #16
   113f6:	bne.n	11420 <_scanf_i+0x1b0>
   113f8:	strb	r2, [r5, #0]
   113fa:	ldr	r3, [r4, #4]
   113fc:	ldr	r6, [sp, #4]
   113fe:	mov	r1, r7
   11400:	mov	r0, sl
   11402:	blx	r6
   11404:	ldr.w	r3, [r8]
   11408:	ldr	r1, [r4, #0]
   1140a:	adds	r2, r3, #4
   1140c:	str.w	r2, [r8]
   11410:	tst.w	r1, #32
   11414:	ldr	r3, [r3, #0]
   11416:	beq.n	11438 <_scanf_i+0x1c8>
   11418:	str	r0, [r3, #0]
   1141a:	ldr	r3, [r4, #12]
   1141c:	adds	r3, #1
   1141e:	str	r3, [r4, #12]
   11420:	ldr	r3, [r4, #16]
   11422:	subs	r5, r5, r7
   11424:	add	r5, fp
   11426:	add	r3, r5
   11428:	str	r3, [r4, #16]
   1142a:	movs	r0, #0
   1142c:	add	sp, #28
   1142e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11432:	mov.w	fp, #0
   11436:	b.n	113ce <_scanf_i+0x15e>
   11438:	lsls	r2, r1, #31
   1143a:	ite	mi
   1143c:	strhmi	r0, [r3, #0]
   1143e:	strpl	r0, [r3, #0]
   11440:	b.n	1141a <_scanf_i+0x1aa>
   11442:	movs	r0, #1
   11444:	b.n	1142c <_scanf_i+0x1bc>
   11446:	nop
   11448:	.word	0x20000418
   1144c:	.word	0x000117e9
   11450:	.word	0x0000dabd
   11454:	.word	0x20001419

00011458 <__sflush_r>:
   11458:	ldrh	r2, [r1, #12]
   1145a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1145e:	mov	r5, r0
   11460:	lsls	r0, r2, #28
   11462:	mov	r4, r1
   11464:	bmi.n	11518 <__sflush_r+0xc0>
   11466:	ldr	r3, [r1, #4]
   11468:	cmp	r3, #0
   1146a:	bgt.n	11478 <__sflush_r+0x20>
   1146c:	ldr	r3, [r1, #64]	; 0x40
   1146e:	cmp	r3, #0
   11470:	bgt.n	11478 <__sflush_r+0x20>
   11472:	movs	r0, #0
   11474:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11478:	ldr	r6, [r4, #44]	; 0x2c
   1147a:	cmp	r6, #0
   1147c:	beq.n	11472 <__sflush_r+0x1a>
   1147e:	movs	r3, #0
   11480:	ands.w	r2, r2, #4096	; 0x1000
   11484:	ldr	r7, [r5, #0]
   11486:	ldr	r1, [r4, #32]
   11488:	str	r3, [r5, #0]
   1148a:	beq.n	114f2 <__sflush_r+0x9a>
   1148c:	ldr	r0, [r4, #84]	; 0x54
   1148e:	ldrh	r3, [r4, #12]
   11490:	lsls	r2, r3, #29
   11492:	bpl.n	114a0 <__sflush_r+0x48>
   11494:	ldr	r3, [r4, #4]
   11496:	subs	r0, r0, r3
   11498:	ldr	r3, [r4, #52]	; 0x34
   1149a:	cbz	r3, 114a0 <__sflush_r+0x48>
   1149c:	ldr	r3, [r4, #64]	; 0x40
   1149e:	subs	r0, r0, r3
   114a0:	movs	r3, #0
   114a2:	mov	r2, r0
   114a4:	ldr	r6, [r4, #44]	; 0x2c
   114a6:	ldr	r1, [r4, #32]
   114a8:	mov	r0, r5
   114aa:	blx	r6
   114ac:	adds	r3, r0, #1
   114ae:	ldrh	r3, [r4, #12]
   114b0:	bne.n	114c0 <__sflush_r+0x68>
   114b2:	ldr	r1, [r5, #0]
   114b4:	cmp	r1, #29
   114b6:	bhi.n	11510 <__sflush_r+0xb8>
   114b8:	ldr	r2, [pc, #164]	; (11560 <__sflush_r+0x108>)
   114ba:	asrs	r2, r1
   114bc:	lsls	r6, r2, #31
   114be:	bmi.n	11510 <__sflush_r+0xb8>
   114c0:	movs	r2, #0
   114c2:	str	r2, [r4, #4]
   114c4:	lsls	r1, r3, #19
   114c6:	ldr	r2, [r4, #16]
   114c8:	str	r2, [r4, #0]
   114ca:	bpl.n	114d6 <__sflush_r+0x7e>
   114cc:	adds	r2, r0, #1
   114ce:	bne.n	114d4 <__sflush_r+0x7c>
   114d0:	ldr	r3, [r5, #0]
   114d2:	cbnz	r3, 114d6 <__sflush_r+0x7e>
   114d4:	str	r0, [r4, #84]	; 0x54
   114d6:	ldr	r1, [r4, #52]	; 0x34
   114d8:	str	r7, [r5, #0]
   114da:	cmp	r1, #0
   114dc:	beq.n	11472 <__sflush_r+0x1a>
   114de:	add.w	r3, r4, #68	; 0x44
   114e2:	cmp	r1, r3
   114e4:	beq.n	114ec <__sflush_r+0x94>
   114e6:	mov	r0, r5
   114e8:	bl	f9e8 <_free_r>
   114ec:	movs	r0, #0
   114ee:	str	r0, [r4, #52]	; 0x34
   114f0:	b.n	11474 <__sflush_r+0x1c>
   114f2:	movs	r3, #1
   114f4:	mov	r0, r5
   114f6:	blx	r6
   114f8:	adds	r1, r0, #1
   114fa:	bne.n	1148e <__sflush_r+0x36>
   114fc:	ldr	r3, [r5, #0]
   114fe:	cmp	r3, #0
   11500:	beq.n	1148e <__sflush_r+0x36>
   11502:	cmp	r3, #29
   11504:	beq.n	1150a <__sflush_r+0xb2>
   11506:	cmp	r3, #22
   11508:	bne.n	1150e <__sflush_r+0xb6>
   1150a:	str	r7, [r5, #0]
   1150c:	b.n	11472 <__sflush_r+0x1a>
   1150e:	ldrh	r3, [r4, #12]
   11510:	orr.w	r3, r3, #64	; 0x40
   11514:	strh	r3, [r4, #12]
   11516:	b.n	11474 <__sflush_r+0x1c>
   11518:	ldr	r7, [r1, #16]
   1151a:	cmp	r7, #0
   1151c:	beq.n	11472 <__sflush_r+0x1a>
   1151e:	lsls	r3, r2, #30
   11520:	ldr	r6, [r1, #0]
   11522:	it	eq
   11524:	ldreq	r3, [r1, #20]
   11526:	str	r7, [r1, #0]
   11528:	it	ne
   1152a:	movne	r3, #0
   1152c:	sub.w	r8, r6, r7
   11530:	str	r3, [r1, #8]
   11532:	cmp.w	r8, #0
   11536:	ble.n	11472 <__sflush_r+0x1a>
   11538:	ldr	r1, [r4, #32]
   1153a:	ldr	r6, [r4, #40]	; 0x28
   1153c:	mov	r3, r8
   1153e:	mov	r2, r7
   11540:	mov	r0, r5
   11542:	blx	r6
   11544:	cmp	r0, #0
   11546:	bgt.n	11556 <__sflush_r+0xfe>
   11548:	ldrh	r3, [r4, #12]
   1154a:	orr.w	r3, r3, #64	; 0x40
   1154e:	strh	r3, [r4, #12]
   11550:	mov.w	r0, #4294967295
   11554:	b.n	11474 <__sflush_r+0x1c>
   11556:	add	r7, r0
   11558:	sub.w	r8, r8, r0
   1155c:	b.n	11532 <__sflush_r+0xda>
   1155e:	nop
   11560:	.word	0xdfbffffe

00011564 <_fflush_r>:
   11564:	push	{r3, r4, r5, lr}
   11566:	ldr	r3, [r1, #16]
   11568:	mov	r5, r0
   1156a:	mov	r4, r1
   1156c:	cbnz	r3, 11574 <_fflush_r+0x10>
   1156e:	movs	r5, #0
   11570:	mov	r0, r5
   11572:	pop	{r3, r4, r5, pc}
   11574:	cbz	r0, 1157e <_fflush_r+0x1a>
   11576:	ldr	r3, [r0, #32]
   11578:	cbnz	r3, 1157e <_fflush_r+0x1a>
   1157a:	bl	e860 <__sinit>
   1157e:	ldrsh.w	r3, [r4, #12]
   11582:	cmp	r3, #0
   11584:	beq.n	1156e <_fflush_r+0xa>
   11586:	ldr	r2, [r4, #100]	; 0x64
   11588:	lsls	r0, r2, #31
   1158a:	bmi.n	11596 <_fflush_r+0x32>
   1158c:	lsls	r1, r3, #22
   1158e:	bmi.n	11596 <_fflush_r+0x32>
   11590:	ldr	r0, [r4, #88]	; 0x58
   11592:	bl	ed10 <__retarget_lock_acquire_recursive>
   11596:	mov	r0, r5
   11598:	mov	r1, r4
   1159a:	bl	11458 <__sflush_r>
   1159e:	ldr	r3, [r4, #100]	; 0x64
   115a0:	lsls	r2, r3, #31
   115a2:	mov	r5, r0
   115a4:	bmi.n	11570 <_fflush_r+0xc>
   115a6:	ldrh	r3, [r4, #12]
   115a8:	lsls	r3, r3, #22
   115aa:	bmi.n	11570 <_fflush_r+0xc>
   115ac:	ldr	r0, [r4, #88]	; 0x58
   115ae:	bl	ed12 <__retarget_lock_release_recursive>
   115b2:	b.n	11570 <_fflush_r+0xc>

000115b4 <__sccl>:
   115b4:	push	{r4, r5, r6, lr}
   115b6:	ldrb	r3, [r1, #0]
   115b8:	mov	r4, r0
   115ba:	cmp	r3, #94	; 0x5e
   115bc:	itete	eq
   115be:	ldrbeq	r3, [r1, #1]
   115c0:	addne	r2, r1, #1
   115c2:	addeq	r2, r1, #2
   115c4:	movne	r1, #0
   115c6:	it	eq
   115c8:	moveq	r1, #1
   115ca:	subs	r0, #1
   115cc:	add.w	r5, r4, #255	; 0xff
   115d0:	strb.w	r1, [r0, #1]!
   115d4:	cmp	r0, r5
   115d6:	bne.n	115d0 <__sccl+0x1c>
   115d8:	cbnz	r3, 115de <__sccl+0x2a>
   115da:	subs	r0, r2, #1
   115dc:	pop	{r4, r5, r6, pc}
   115de:	eor.w	r1, r1, #1
   115e2:	strb	r1, [r4, r3]
   115e4:	mov	r0, r2
   115e6:	mov	r2, r0
   115e8:	ldrb.w	r5, [r2], #1
   115ec:	cmp	r5, #45	; 0x2d
   115ee:	beq.n	115fc <__sccl+0x48>
   115f0:	cmp	r5, #93	; 0x5d
   115f2:	beq.n	11622 <__sccl+0x6e>
   115f4:	cmp	r5, #0
   115f6:	beq.n	115dc <__sccl+0x28>
   115f8:	mov	r3, r5
   115fa:	b.n	115e2 <__sccl+0x2e>
   115fc:	ldrb	r6, [r0, #1]
   115fe:	cmp	r6, #93	; 0x5d
   11600:	beq.n	115f8 <__sccl+0x44>
   11602:	cmp	r3, r6
   11604:	bgt.n	115f8 <__sccl+0x44>
   11606:	adds	r0, #2
   11608:	mov	r2, r3
   1160a:	adds	r2, #1
   1160c:	cmp	r6, r2
   1160e:	strb	r1, [r4, r2]
   11610:	bgt.n	1160a <__sccl+0x56>
   11612:	subs	r2, r6, r3
   11614:	subs	r2, #1
   11616:	adds	r5, r3, #1
   11618:	cmp	r3, r6
   1161a:	it	ge
   1161c:	movge	r2, #0
   1161e:	adds	r3, r5, r2
   11620:	b.n	115e6 <__sccl+0x32>
   11622:	mov	r0, r2
   11624:	b.n	115dc <__sccl+0x28>

00011626 <__submore>:
   11626:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1162a:	mov	r4, r1
   1162c:	ldr	r1, [r1, #52]	; 0x34
   1162e:	add.w	r3, r4, #68	; 0x44
   11632:	cmp	r1, r3
   11634:	bne.n	11672 <__submore+0x4c>
   11636:	mov.w	r1, #1024	; 0x400
   1163a:	bl	ccb0 <_malloc_r>
   1163e:	cbnz	r0, 11648 <__submore+0x22>
   11640:	mov.w	r0, #4294967295
   11644:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11648:	mov.w	r3, #1024	; 0x400
   1164c:	str	r3, [r4, #56]	; 0x38
   1164e:	ldrb.w	r3, [r4, #70]	; 0x46
   11652:	str	r0, [r4, #52]	; 0x34
   11654:	strb.w	r3, [r0, #1023]	; 0x3ff
   11658:	ldrb.w	r3, [r4, #69]	; 0x45
   1165c:	strb.w	r3, [r0, #1022]	; 0x3fe
   11660:	ldrb.w	r3, [r4, #68]	; 0x44
   11664:	strb.w	r3, [r0, #1021]	; 0x3fd
   11668:	addw	r0, r0, #1021	; 0x3fd
   1166c:	str	r0, [r4, #0]
   1166e:	movs	r0, #0
   11670:	b.n	11644 <__submore+0x1e>
   11672:	ldr	r6, [r4, #56]	; 0x38
   11674:	lsls	r7, r6, #1
   11676:	mov	r2, r7
   11678:	bl	cdb4 <_realloc_r>
   1167c:	mov	r5, r0
   1167e:	cmp	r0, #0
   11680:	beq.n	11640 <__submore+0x1a>
   11682:	add.w	r8, r0, r6
   11686:	mov	r1, r0
   11688:	mov	r2, r6
   1168a:	mov	r0, r8
   1168c:	bl	a254 <memcpy>
   11690:	strd	r5, r7, [r4, #52]	; 0x34
   11694:	str.w	r8, [r4]
   11698:	b.n	1166e <__submore+0x48>
	...

0001169c <__assert_func>:
   1169c:	push	{r0, r1, r2, r3, r4, lr}
   1169e:	mov	r4, r2
   116a0:	mov	r2, r3
   116a2:	ldr	r3, [pc, #36]	; (116c8 <__assert_func+0x2c>)
   116a4:	ldr	r3, [r3, #0]
   116a6:	mov	r5, r0
   116a8:	ldr	r0, [r3, #12]
   116aa:	cbz	r4, 116c0 <__assert_func+0x24>
   116ac:	ldr	r3, [pc, #28]	; (116cc <__assert_func+0x30>)
   116ae:	str	r1, [sp, #0]
   116b0:	strd	r3, r4, [sp, #4]
   116b4:	ldr	r1, [pc, #24]	; (116d0 <__assert_func+0x34>)
   116b6:	mov	r3, r5
   116b8:	bl	117ec <fiprintf>
   116bc:	bl	b992 <abort>
   116c0:	ldr	r3, [pc, #16]	; (116d4 <__assert_func+0x38>)
   116c2:	mov	r4, r3
   116c4:	b.n	116ae <__assert_func+0x12>
   116c6:	nop
   116c8:	.word	0x200022d0
   116cc:	.word	0x200011ae
   116d0:	.word	0x200011bb
   116d4:	.word	0x20000dbc

000116d8 <_calloc_r>:
   116d8:	push	{r0, r1, r2, r4, r5, lr}
   116da:	umull	r2, r4, r1, r2
   116de:	cbnz	r4, 116f4 <_calloc_r+0x1c>
   116e0:	mov	r1, r2
   116e2:	str	r2, [sp, #4]
   116e4:	bl	ccb0 <_malloc_r>
   116e8:	ldr	r2, [sp, #4]
   116ea:	mov	r5, r0
   116ec:	cbnz	r0, 116fc <_calloc_r+0x24>
   116ee:	mov	r0, r5
   116f0:	add	sp, #12
   116f2:	pop	{r4, r5, pc}
   116f4:	movs	r2, #12
   116f6:	str	r2, [r0, #0]
   116f8:	movs	r5, #0
   116fa:	b.n	116ee <_calloc_r+0x16>
   116fc:	mov	r1, r4
   116fe:	bl	a210 <memset>
   11702:	b.n	116ee <_calloc_r+0x16>

00011704 <_strtoul_l.constprop.0>:
   11704:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11708:	ldr	r7, [pc, #216]	; (117e4 <_strtoul_l.constprop.0+0xe0>)
   1170a:	mov	lr, r0
   1170c:	mov	r5, r1
   1170e:	mov	r0, r5
   11710:	ldrb.w	r4, [r5], #1
   11714:	ldrb	r6, [r7, r4]
   11716:	ands.w	r6, r6, #8
   1171a:	bne.n	1170e <_strtoul_l.constprop.0+0xa>
   1171c:	cmp	r4, #45	; 0x2d
   1171e:	bne.n	11782 <_strtoul_l.constprop.0+0x7e>
   11720:	ldrb	r4, [r5, #0]
   11722:	movs	r6, #1
   11724:	adds	r5, r0, #2
   11726:	cmp	r3, #0
   11728:	beq.n	117da <_strtoul_l.constprop.0+0xd6>
   1172a:	cmp	r3, #16
   1172c:	bne.n	11742 <_strtoul_l.constprop.0+0x3e>
   1172e:	cmp	r4, #48	; 0x30
   11730:	bne.n	11742 <_strtoul_l.constprop.0+0x3e>
   11732:	ldrb	r0, [r5, #0]
   11734:	and.w	r0, r0, #223	; 0xdf
   11738:	cmp	r0, #88	; 0x58
   1173a:	bne.n	117d0 <_strtoul_l.constprop.0+0xcc>
   1173c:	ldrb	r4, [r5, #1]
   1173e:	movs	r3, #16
   11740:	adds	r5, #2
   11742:	mov.w	r8, #4294967295
   11746:	movs	r7, #0
   11748:	udiv	r8, r8, r3
   1174c:	mul.w	r9, r3, r8
   11750:	mvn.w	r9, r9
   11754:	mov	r0, r7
   11756:	sub.w	ip, r4, #48	; 0x30
   1175a:	cmp.w	ip, #9
   1175e:	bhi.n	1178c <_strtoul_l.constprop.0+0x88>
   11760:	mov	r4, ip
   11762:	cmp	r3, r4
   11764:	ble.n	117ae <_strtoul_l.constprop.0+0xaa>
   11766:	cmp.w	r7, #4294967295
   1176a:	beq.n	1177c <_strtoul_l.constprop.0+0x78>
   1176c:	cmp	r8, r0
   1176e:	bcc.n	117a8 <_strtoul_l.constprop.0+0xa4>
   11770:	bne.n	11776 <_strtoul_l.constprop.0+0x72>
   11772:	cmp	r9, r4
   11774:	blt.n	117a8 <_strtoul_l.constprop.0+0xa4>
   11776:	mla	r0, r0, r3, r4
   1177a:	movs	r7, #1
   1177c:	ldrb.w	r4, [r5], #1
   11780:	b.n	11756 <_strtoul_l.constprop.0+0x52>
   11782:	cmp	r4, #43	; 0x2b
   11784:	itt	eq
   11786:	ldrbeq	r4, [r5, #0]
   11788:	addeq	r5, r0, #2
   1178a:	b.n	11726 <_strtoul_l.constprop.0+0x22>
   1178c:	sub.w	ip, r4, #65	; 0x41
   11790:	cmp.w	ip, #25
   11794:	bhi.n	1179a <_strtoul_l.constprop.0+0x96>
   11796:	subs	r4, #55	; 0x37
   11798:	b.n	11762 <_strtoul_l.constprop.0+0x5e>
   1179a:	sub.w	ip, r4, #97	; 0x61
   1179e:	cmp.w	ip, #25
   117a2:	bhi.n	117ae <_strtoul_l.constprop.0+0xaa>
   117a4:	subs	r4, #87	; 0x57
   117a6:	b.n	11762 <_strtoul_l.constprop.0+0x5e>
   117a8:	mov.w	r7, #4294967295
   117ac:	b.n	1177c <_strtoul_l.constprop.0+0x78>
   117ae:	adds	r3, r7, #1
   117b0:	bne.n	117c0 <_strtoul_l.constprop.0+0xbc>
   117b2:	movs	r3, #34	; 0x22
   117b4:	str.w	r3, [lr]
   117b8:	mov	r0, r7
   117ba:	cbnz	r2, 117ca <_strtoul_l.constprop.0+0xc6>
   117bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   117c0:	cbz	r6, 117c4 <_strtoul_l.constprop.0+0xc0>
   117c2:	negs	r0, r0
   117c4:	cmp	r2, #0
   117c6:	beq.n	117bc <_strtoul_l.constprop.0+0xb8>
   117c8:	cbz	r7, 117cc <_strtoul_l.constprop.0+0xc8>
   117ca:	subs	r1, r5, #1
   117cc:	str	r1, [r2, #0]
   117ce:	b.n	117bc <_strtoul_l.constprop.0+0xb8>
   117d0:	movs	r4, #48	; 0x30
   117d2:	cmp	r3, #0
   117d4:	bne.n	11742 <_strtoul_l.constprop.0+0x3e>
   117d6:	movs	r3, #8
   117d8:	b.n	11742 <_strtoul_l.constprop.0+0x3e>
   117da:	cmp	r4, #48	; 0x30
   117dc:	beq.n	11732 <_strtoul_l.constprop.0+0x2e>
   117de:	movs	r3, #10
   117e0:	b.n	11742 <_strtoul_l.constprop.0+0x3e>
   117e2:	nop
   117e4:	.word	0x2000124c

000117e8 <_strtoul_r>:
   117e8:	b.w	11704 <_strtoul_l.constprop.0>

000117ec <fiprintf>:
   117ec:	push	{r1, r2, r3}
   117ee:	push	{r0, r1, lr}
   117f0:	mov	r1, r0
   117f2:	add	r3, sp, #12
   117f4:	ldr	r0, [pc, #20]	; (1180c <fiprintf+0x20>)
   117f6:	ldr.w	r2, [r3], #4
   117fa:	ldr	r0, [r0, #0]
   117fc:	str	r3, [sp, #4]
   117fe:	bl	11864 <_vfiprintf_r>
   11802:	add	sp, #8
   11804:	ldr.w	lr, [sp], #4
   11808:	add	sp, #12
   1180a:	bx	lr
   1180c:	.word	0x200022d0

00011810 <__sfputc_r>:
   11810:	ldr	r3, [r2, #8]
   11812:	subs	r3, #1
   11814:	cmp	r3, #0
   11816:	push	{r4}
   11818:	str	r3, [r2, #8]
   1181a:	bge.n	1182e <__sfputc_r+0x1e>
   1181c:	ldr	r4, [r2, #24]
   1181e:	cmp	r3, r4
   11820:	blt.n	11826 <__sfputc_r+0x16>
   11822:	cmp	r1, #10
   11824:	bne.n	1182e <__sfputc_r+0x1e>
   11826:	ldr.w	r4, [sp], #4
   1182a:	b.w	11a98 <__swbuf_r>
   1182e:	ldr	r3, [r2, #0]
   11830:	adds	r0, r3, #1
   11832:	str	r0, [r2, #0]
   11834:	strb	r1, [r3, #0]
   11836:	mov	r0, r1
   11838:	ldr.w	r4, [sp], #4
   1183c:	bx	lr

0001183e <__sfputs_r>:
   1183e:	push	{r3, r4, r5, r6, r7, lr}
   11840:	mov	r6, r0
   11842:	mov	r7, r1
   11844:	mov	r4, r2
   11846:	adds	r5, r2, r3
   11848:	cmp	r4, r5
   1184a:	bne.n	11850 <__sfputs_r+0x12>
   1184c:	movs	r0, #0
   1184e:	b.n	11860 <__sfputs_r+0x22>
   11850:	ldrb.w	r1, [r4], #1
   11854:	mov	r2, r7
   11856:	mov	r0, r6
   11858:	bl	11810 <__sfputc_r>
   1185c:	adds	r3, r0, #1
   1185e:	bne.n	11848 <__sfputs_r+0xa>
   11860:	pop	{r3, r4, r5, r6, r7, pc}
	...

00011864 <_vfiprintf_r>:
   11864:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11868:	mov	r5, r1
   1186a:	sub	sp, #116	; 0x74
   1186c:	mov	r4, r2
   1186e:	mov	r8, r3
   11870:	mov	r6, r0
   11872:	cbz	r0, 1187c <_vfiprintf_r+0x18>
   11874:	ldr	r3, [r0, #32]
   11876:	cbnz	r3, 1187c <_vfiprintf_r+0x18>
   11878:	bl	e860 <__sinit>
   1187c:	ldr	r3, [r5, #100]	; 0x64
   1187e:	lsls	r1, r3, #31
   11880:	bmi.n	1188e <_vfiprintf_r+0x2a>
   11882:	ldrh	r3, [r5, #12]
   11884:	lsls	r2, r3, #22
   11886:	bmi.n	1188e <_vfiprintf_r+0x2a>
   11888:	ldr	r0, [r5, #88]	; 0x58
   1188a:	bl	ed10 <__retarget_lock_acquire_recursive>
   1188e:	ldrh	r3, [r5, #12]
   11890:	lsls	r3, r3, #28
   11892:	bpl.n	11898 <_vfiprintf_r+0x34>
   11894:	ldr	r3, [r5, #16]
   11896:	cbnz	r3, 118c0 <_vfiprintf_r+0x5c>
   11898:	mov	r1, r5
   1189a:	mov	r0, r6
   1189c:	bl	11b14 <__swsetup_r>
   118a0:	cbz	r0, 118c0 <_vfiprintf_r+0x5c>
   118a2:	ldr	r3, [r5, #100]	; 0x64
   118a4:	lsls	r4, r3, #31
   118a6:	bpl.n	118b2 <_vfiprintf_r+0x4e>
   118a8:	mov.w	r0, #4294967295
   118ac:	add	sp, #116	; 0x74
   118ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   118b2:	ldrh	r3, [r5, #12]
   118b4:	lsls	r0, r3, #22
   118b6:	bmi.n	118a8 <_vfiprintf_r+0x44>
   118b8:	ldr	r0, [r5, #88]	; 0x58
   118ba:	bl	ed12 <__retarget_lock_release_recursive>
   118be:	b.n	118a8 <_vfiprintf_r+0x44>
   118c0:	movs	r3, #0
   118c2:	str	r3, [sp, #36]	; 0x24
   118c4:	movs	r3, #32
   118c6:	strb.w	r3, [sp, #41]	; 0x29
   118ca:	str.w	r8, [sp, #12]
   118ce:	movs	r3, #48	; 0x30
   118d0:	ldr.w	r8, [pc, #432]	; 11a84 <_vfiprintf_r+0x220>
   118d4:	strb.w	r3, [sp, #42]	; 0x2a
   118d8:	mov.w	r9, #1
   118dc:	mov	r3, r4
   118de:	mov	sl, r3
   118e0:	ldrb.w	r2, [r3], #1
   118e4:	cbz	r2, 118ea <_vfiprintf_r+0x86>
   118e6:	cmp	r2, #37	; 0x25
   118e8:	bne.n	118de <_vfiprintf_r+0x7a>
   118ea:	subs.w	fp, sl, r4
   118ee:	beq.n	11908 <_vfiprintf_r+0xa4>
   118f0:	mov	r3, fp
   118f2:	mov	r2, r4
   118f4:	mov	r1, r5
   118f6:	mov	r0, r6
   118f8:	bl	1183e <__sfputs_r>
   118fc:	adds	r0, #1
   118fe:	beq.w	11a54 <_vfiprintf_r+0x1f0>
   11902:	ldr	r2, [sp, #36]	; 0x24
   11904:	add	r2, fp
   11906:	str	r2, [sp, #36]	; 0x24
   11908:	ldrb.w	r3, [sl]
   1190c:	cmp	r3, #0
   1190e:	beq.w	11a54 <_vfiprintf_r+0x1f0>
   11912:	movs	r3, #0
   11914:	mov.w	r2, #4294967295
   11918:	strd	r2, r3, [sp, #20]
   1191c:	add.w	sl, sl, #1
   11920:	str	r3, [sp, #16]
   11922:	str	r3, [sp, #28]
   11924:	strb.w	r3, [sp, #83]	; 0x53
   11928:	str	r3, [sp, #104]	; 0x68
   1192a:	mov	r4, sl
   1192c:	movs	r2, #5
   1192e:	ldrb.w	r1, [r4], #1
   11932:	ldr	r0, [pc, #336]	; (11a84 <_vfiprintf_r+0x220>)
   11934:	bl	ed30 <memchr>
   11938:	ldr	r2, [sp, #16]
   1193a:	cbnz	r0, 11974 <_vfiprintf_r+0x110>
   1193c:	lsls	r1, r2, #27
   1193e:	itt	mi
   11940:	movmi	r3, #32
   11942:	strbmi.w	r3, [sp, #83]	; 0x53
   11946:	lsls	r3, r2, #28
   11948:	itt	mi
   1194a:	movmi	r3, #43	; 0x2b
   1194c:	strbmi.w	r3, [sp, #83]	; 0x53
   11950:	ldrb.w	r3, [sl]
   11954:	cmp	r3, #42	; 0x2a
   11956:	beq.n	11984 <_vfiprintf_r+0x120>
   11958:	ldr	r2, [sp, #28]
   1195a:	mov	r4, sl
   1195c:	movs	r0, #0
   1195e:	mov.w	ip, #10
   11962:	mov	r1, r4
   11964:	ldrb.w	r3, [r1], #1
   11968:	subs	r3, #48	; 0x30
   1196a:	cmp	r3, #9
   1196c:	bls.n	11a0a <_vfiprintf_r+0x1a6>
   1196e:	cbz	r0, 1199e <_vfiprintf_r+0x13a>
   11970:	str	r2, [sp, #28]
   11972:	b.n	1199e <_vfiprintf_r+0x13a>
   11974:	sub.w	r3, r0, r8
   11978:	lsl.w	r3, r9, r3
   1197c:	orrs	r3, r2
   1197e:	str	r3, [sp, #16]
   11980:	mov	sl, r4
   11982:	b.n	1192a <_vfiprintf_r+0xc6>
   11984:	ldr	r3, [sp, #12]
   11986:	adds	r1, r3, #4
   11988:	ldr	r3, [r3, #0]
   1198a:	str	r1, [sp, #12]
   1198c:	cmp	r3, #0
   1198e:	ittet	lt
   11990:	neglt	r3, r3
   11992:	orrlt.w	r2, r2, #2
   11996:	strge	r3, [sp, #28]
   11998:	strlt	r3, [sp, #28]
   1199a:	it	lt
   1199c:	strlt	r2, [sp, #16]
   1199e:	ldrb	r3, [r4, #0]
   119a0:	cmp	r3, #46	; 0x2e
   119a2:	bne.n	119be <_vfiprintf_r+0x15a>
   119a4:	ldrb	r3, [r4, #1]
   119a6:	cmp	r3, #42	; 0x2a
   119a8:	bne.n	11a14 <_vfiprintf_r+0x1b0>
   119aa:	ldr	r3, [sp, #12]
   119ac:	adds	r2, r3, #4
   119ae:	ldr	r3, [r3, #0]
   119b0:	str	r2, [sp, #12]
   119b2:	cmp	r3, #0
   119b4:	it	lt
   119b6:	movlt.w	r3, #4294967295
   119ba:	adds	r4, #2
   119bc:	str	r3, [sp, #20]
   119be:	ldr.w	sl, [pc, #212]	; 11a94 <_vfiprintf_r+0x230>
   119c2:	ldrb	r1, [r4, #0]
   119c4:	movs	r2, #3
   119c6:	mov	r0, sl
   119c8:	bl	ed30 <memchr>
   119cc:	cbz	r0, 119de <_vfiprintf_r+0x17a>
   119ce:	ldr	r3, [sp, #16]
   119d0:	sub.w	r0, r0, sl
   119d4:	movs	r2, #64	; 0x40
   119d6:	lsls	r2, r0
   119d8:	orrs	r3, r2
   119da:	adds	r4, #1
   119dc:	str	r3, [sp, #16]
   119de:	ldrb.w	r1, [r4], #1
   119e2:	ldr	r0, [pc, #164]	; (11a88 <_vfiprintf_r+0x224>)
   119e4:	strb.w	r1, [sp, #40]	; 0x28
   119e8:	movs	r2, #6
   119ea:	bl	ed30 <memchr>
   119ee:	cmp	r0, #0
   119f0:	beq.n	11a72 <_vfiprintf_r+0x20e>
   119f2:	ldr	r3, [pc, #152]	; (11a8c <_vfiprintf_r+0x228>)
   119f4:	cbnz	r3, 11a3e <_vfiprintf_r+0x1da>
   119f6:	ldr	r3, [sp, #12]
   119f8:	adds	r3, #7
   119fa:	bic.w	r3, r3, #7
   119fe:	adds	r3, #8
   11a00:	str	r3, [sp, #12]
   11a02:	ldr	r3, [sp, #36]	; 0x24
   11a04:	add	r3, r7
   11a06:	str	r3, [sp, #36]	; 0x24
   11a08:	b.n	118dc <_vfiprintf_r+0x78>
   11a0a:	mla	r2, ip, r2, r3
   11a0e:	mov	r4, r1
   11a10:	movs	r0, #1
   11a12:	b.n	11962 <_vfiprintf_r+0xfe>
   11a14:	movs	r3, #0
   11a16:	adds	r4, #1
   11a18:	str	r3, [sp, #20]
   11a1a:	mov	r1, r3
   11a1c:	mov.w	ip, #10
   11a20:	mov	r0, r4
   11a22:	ldrb.w	r2, [r0], #1
   11a26:	subs	r2, #48	; 0x30
   11a28:	cmp	r2, #9
   11a2a:	bls.n	11a34 <_vfiprintf_r+0x1d0>
   11a2c:	cmp	r3, #0
   11a2e:	beq.n	119be <_vfiprintf_r+0x15a>
   11a30:	str	r1, [sp, #20]
   11a32:	b.n	119be <_vfiprintf_r+0x15a>
   11a34:	mla	r1, ip, r1, r2
   11a38:	mov	r4, r0
   11a3a:	movs	r3, #1
   11a3c:	b.n	11a20 <_vfiprintf_r+0x1bc>
   11a3e:	add	r3, sp, #12
   11a40:	str	r3, [sp, #0]
   11a42:	mov	r2, r5
   11a44:	ldr	r3, [pc, #72]	; (11a90 <_vfiprintf_r+0x22c>)
   11a46:	add	r1, sp, #16
   11a48:	mov	r0, r6
   11a4a:	bl	dc10 <_printf_float>
   11a4e:	mov	r7, r0
   11a50:	adds	r0, r7, #1
   11a52:	bne.n	11a02 <_vfiprintf_r+0x19e>
   11a54:	ldr	r3, [r5, #100]	; 0x64
   11a56:	lsls	r1, r3, #31
   11a58:	bmi.n	11a66 <_vfiprintf_r+0x202>
   11a5a:	ldrh	r3, [r5, #12]
   11a5c:	lsls	r2, r3, #22
   11a5e:	bmi.n	11a66 <_vfiprintf_r+0x202>
   11a60:	ldr	r0, [r5, #88]	; 0x58
   11a62:	bl	ed12 <__retarget_lock_release_recursive>
   11a66:	ldrh	r3, [r5, #12]
   11a68:	lsls	r3, r3, #25
   11a6a:	bmi.w	118a8 <_vfiprintf_r+0x44>
   11a6e:	ldr	r0, [sp, #36]	; 0x24
   11a70:	b.n	118ac <_vfiprintf_r+0x48>
   11a72:	add	r3, sp, #12
   11a74:	str	r3, [sp, #0]
   11a76:	mov	r2, r5
   11a78:	ldr	r3, [pc, #20]	; (11a90 <_vfiprintf_r+0x22c>)
   11a7a:	add	r1, sp, #16
   11a7c:	mov	r0, r6
   11a7e:	bl	e120 <_printf_i>
   11a82:	b.n	11a4e <_vfiprintf_r+0x1ea>
   11a84:	.word	0x20001421
   11a88:	.word	0x2000142b
   11a8c:	.word	0x0000dc11
   11a90:	.word	0x0001183f
   11a94:	.word	0x20001427

00011a98 <__swbuf_r>:
   11a98:	push	{r3, r4, r5, r6, r7, lr}
   11a9a:	mov	r6, r1
   11a9c:	mov	r4, r2
   11a9e:	mov	r5, r0
   11aa0:	cbz	r0, 11aaa <__swbuf_r+0x12>
   11aa2:	ldr	r3, [r0, #32]
   11aa4:	cbnz	r3, 11aaa <__swbuf_r+0x12>
   11aa6:	bl	e860 <__sinit>
   11aaa:	ldr	r3, [r4, #24]
   11aac:	str	r3, [r4, #8]
   11aae:	ldrh	r3, [r4, #12]
   11ab0:	lsls	r2, r3, #28
   11ab2:	bpl.n	11b00 <__swbuf_r+0x68>
   11ab4:	ldr	r3, [r4, #16]
   11ab6:	cbz	r3, 11b00 <__swbuf_r+0x68>
   11ab8:	ldr	r3, [r4, #0]
   11aba:	ldr	r2, [r4, #16]
   11abc:	subs	r0, r3, r2
   11abe:	ldr	r3, [r4, #20]
   11ac0:	uxtb	r6, r6
   11ac2:	cmp	r3, r0
   11ac4:	mov	r7, r6
   11ac6:	bgt.n	11ad2 <__swbuf_r+0x3a>
   11ac8:	mov	r1, r4
   11aca:	mov	r0, r5
   11acc:	bl	11564 <_fflush_r>
   11ad0:	cbnz	r0, 11b0c <__swbuf_r+0x74>
   11ad2:	ldr	r3, [r4, #8]
   11ad4:	subs	r3, #1
   11ad6:	str	r3, [r4, #8]
   11ad8:	ldr	r3, [r4, #0]
   11ada:	adds	r2, r3, #1
   11adc:	str	r2, [r4, #0]
   11ade:	strb	r6, [r3, #0]
   11ae0:	ldr	r2, [r4, #20]
   11ae2:	adds	r3, r0, #1
   11ae4:	cmp	r2, r3
   11ae6:	beq.n	11af2 <__swbuf_r+0x5a>
   11ae8:	ldrh	r3, [r4, #12]
   11aea:	lsls	r3, r3, #31
   11aec:	bpl.n	11afc <__swbuf_r+0x64>
   11aee:	cmp	r6, #10
   11af0:	bne.n	11afc <__swbuf_r+0x64>
   11af2:	mov	r1, r4
   11af4:	mov	r0, r5
   11af6:	bl	11564 <_fflush_r>
   11afa:	cbnz	r0, 11b0c <__swbuf_r+0x74>
   11afc:	mov	r0, r7
   11afe:	pop	{r3, r4, r5, r6, r7, pc}
   11b00:	mov	r1, r4
   11b02:	mov	r0, r5
   11b04:	bl	11b14 <__swsetup_r>
   11b08:	cmp	r0, #0
   11b0a:	beq.n	11ab8 <__swbuf_r+0x20>
   11b0c:	mov.w	r7, #4294967295
   11b10:	b.n	11afc <__swbuf_r+0x64>
	...

00011b14 <__swsetup_r>:
   11b14:	push	{r3, r4, r5, lr}
   11b16:	ldr	r3, [pc, #168]	; (11bc0 <__swsetup_r+0xac>)
   11b18:	mov	r5, r0
   11b1a:	ldr	r0, [r3, #0]
   11b1c:	mov	r4, r1
   11b1e:	cbz	r0, 11b28 <__swsetup_r+0x14>
   11b20:	ldr	r3, [r0, #32]
   11b22:	cbnz	r3, 11b28 <__swsetup_r+0x14>
   11b24:	bl	e860 <__sinit>
   11b28:	ldrh	r3, [r4, #12]
   11b2a:	ldrsh.w	r2, [r4, #12]
   11b2e:	lsls	r0, r3, #28
   11b30:	bmi.n	11b78 <__swsetup_r+0x64>
   11b32:	lsls	r1, r3, #27
   11b34:	bmi.n	11b46 <__swsetup_r+0x32>
   11b36:	movs	r3, #9
   11b38:	str	r3, [r5, #0]
   11b3a:	orr.w	r3, r2, #64	; 0x40
   11b3e:	strh	r3, [r4, #12]
   11b40:	mov.w	r0, #4294967295
   11b44:	b.n	11bb0 <__swsetup_r+0x9c>
   11b46:	lsls	r0, r3, #29
   11b48:	bpl.n	11b70 <__swsetup_r+0x5c>
   11b4a:	ldr	r1, [r4, #52]	; 0x34
   11b4c:	cbz	r1, 11b60 <__swsetup_r+0x4c>
   11b4e:	add.w	r3, r4, #68	; 0x44
   11b52:	cmp	r1, r3
   11b54:	beq.n	11b5c <__swsetup_r+0x48>
   11b56:	mov	r0, r5
   11b58:	bl	f9e8 <_free_r>
   11b5c:	movs	r3, #0
   11b5e:	str	r3, [r4, #52]	; 0x34
   11b60:	ldrh	r3, [r4, #12]
   11b62:	bic.w	r3, r3, #36	; 0x24
   11b66:	strh	r3, [r4, #12]
   11b68:	movs	r3, #0
   11b6a:	str	r3, [r4, #4]
   11b6c:	ldr	r3, [r4, #16]
   11b6e:	str	r3, [r4, #0]
   11b70:	ldrh	r3, [r4, #12]
   11b72:	orr.w	r3, r3, #8
   11b76:	strh	r3, [r4, #12]
   11b78:	ldr	r3, [r4, #16]
   11b7a:	cbnz	r3, 11b90 <__swsetup_r+0x7c>
   11b7c:	ldrh	r3, [r4, #12]
   11b7e:	and.w	r3, r3, #640	; 0x280
   11b82:	cmp.w	r3, #512	; 0x200
   11b86:	beq.n	11b90 <__swsetup_r+0x7c>
   11b88:	mov	r1, r4
   11b8a:	mov	r0, r5
   11b8c:	bl	11c10 <__smakebuf_r>
   11b90:	ldrh	r0, [r4, #12]
   11b92:	ldrsh.w	r2, [r4, #12]
   11b96:	ands.w	r3, r0, #1
   11b9a:	beq.n	11bb2 <__swsetup_r+0x9e>
   11b9c:	movs	r3, #0
   11b9e:	str	r3, [r4, #8]
   11ba0:	ldr	r3, [r4, #20]
   11ba2:	negs	r3, r3
   11ba4:	str	r3, [r4, #24]
   11ba6:	ldr	r3, [r4, #16]
   11ba8:	cbnz	r3, 11bbc <__swsetup_r+0xa8>
   11baa:	ands.w	r0, r0, #128	; 0x80
   11bae:	bne.n	11b3a <__swsetup_r+0x26>
   11bb0:	pop	{r3, r4, r5, pc}
   11bb2:	lsls	r1, r0, #30
   11bb4:	it	pl
   11bb6:	ldrpl	r3, [r4, #20]
   11bb8:	str	r3, [r4, #8]
   11bba:	b.n	11ba6 <__swsetup_r+0x92>
   11bbc:	movs	r0, #0
   11bbe:	b.n	11bb0 <__swsetup_r+0x9c>
   11bc0:	.word	0x200022d0

00011bc4 <__swhatbuf_r>:
   11bc4:	push	{r4, r5, r6, lr}
   11bc6:	mov	r4, r1
   11bc8:	ldrsh.w	r1, [r1, #14]
   11bcc:	cmp	r1, #0
   11bce:	sub	sp, #88	; 0x58
   11bd0:	mov	r5, r2
   11bd2:	mov	r6, r3
   11bd4:	bge.n	11bf2 <__swhatbuf_r+0x2e>
   11bd6:	ldrh	r3, [r4, #12]
   11bd8:	tst.w	r3, #128	; 0x80
   11bdc:	mov.w	r1, #0
   11be0:	ite	eq
   11be2:	moveq.w	r3, #1024	; 0x400
   11be6:	movne	r3, #64	; 0x40
   11be8:	movs	r0, #0
   11bea:	str	r1, [r6, #0]
   11bec:	str	r3, [r5, #0]
   11bee:	add	sp, #88	; 0x58
   11bf0:	pop	{r4, r5, r6, pc}
   11bf2:	mov	r2, sp
   11bf4:	bl	11c88 <_fstat_r>
   11bf8:	cmp	r0, #0
   11bfa:	blt.n	11bd6 <__swhatbuf_r+0x12>
   11bfc:	ldr	r1, [sp, #4]
   11bfe:	and.w	r1, r1, #61440	; 0xf000
   11c02:	sub.w	r3, r1, #8192	; 0x2000
   11c06:	negs	r1, r3
   11c08:	adcs	r1, r3
   11c0a:	mov.w	r3, #1024	; 0x400
   11c0e:	b.n	11be8 <__swhatbuf_r+0x24>

00011c10 <__smakebuf_r>:
   11c10:	ldrh	r3, [r1, #12]
   11c12:	push	{r0, r1, r4, r5, r6, lr}
   11c14:	lsls	r5, r3, #30
   11c16:	mov	r6, r0
   11c18:	mov	r4, r1
   11c1a:	bpl.n	11c2c <__smakebuf_r+0x1c>
   11c1c:	add.w	r3, r4, #71	; 0x47
   11c20:	str	r3, [r4, #0]
   11c22:	str	r3, [r4, #16]
   11c24:	movs	r3, #1
   11c26:	str	r3, [r4, #20]
   11c28:	add	sp, #8
   11c2a:	pop	{r4, r5, r6, pc}
   11c2c:	add	r3, sp, #4
   11c2e:	mov	r2, sp
   11c30:	bl	11bc4 <__swhatbuf_r>
   11c34:	ldr	r1, [sp, #0]
   11c36:	mov	r5, r0
   11c38:	mov	r0, r6
   11c3a:	bl	ccb0 <_malloc_r>
   11c3e:	cbnz	r0, 11c54 <__smakebuf_r+0x44>
   11c40:	ldrsh.w	r3, [r4, #12]
   11c44:	lsls	r2, r3, #22
   11c46:	bmi.n	11c28 <__smakebuf_r+0x18>
   11c48:	bic.w	r3, r3, #3
   11c4c:	orr.w	r3, r3, #2
   11c50:	strh	r3, [r4, #12]
   11c52:	b.n	11c1c <__smakebuf_r+0xc>
   11c54:	ldrh	r3, [r4, #12]
   11c56:	str	r0, [r4, #0]
   11c58:	orr.w	r3, r3, #128	; 0x80
   11c5c:	strh	r3, [r4, #12]
   11c5e:	ldr	r3, [sp, #0]
   11c60:	str	r3, [r4, #20]
   11c62:	ldr	r3, [sp, #4]
   11c64:	str	r0, [r4, #16]
   11c66:	cbz	r3, 11c80 <__smakebuf_r+0x70>
   11c68:	ldrsh.w	r1, [r4, #14]
   11c6c:	mov	r0, r6
   11c6e:	bl	11cac <_isatty_r>
   11c72:	cbz	r0, 11c80 <__smakebuf_r+0x70>
   11c74:	ldrh	r3, [r4, #12]
   11c76:	bic.w	r3, r3, #3
   11c7a:	orr.w	r3, r3, #1
   11c7e:	strh	r3, [r4, #12]
   11c80:	ldrh	r3, [r4, #12]
   11c82:	orrs	r5, r3
   11c84:	strh	r5, [r4, #12]
   11c86:	b.n	11c28 <__smakebuf_r+0x18>

00011c88 <_fstat_r>:
   11c88:	push	{r3, r4, r5, lr}
   11c8a:	ldr	r5, [pc, #28]	; (11ca8 <_fstat_r+0x20>)
   11c8c:	movs	r3, #0
   11c8e:	mov	r4, r0
   11c90:	mov	r0, r1
   11c92:	mov	r1, r2
   11c94:	str	r3, [r5, #0]
   11c96:	bl	b97e <_fstat>
   11c9a:	adds	r3, r0, #1
   11c9c:	bne.n	11ca4 <_fstat_r+0x1c>
   11c9e:	ldr	r3, [r5, #0]
   11ca0:	cbz	r3, 11ca4 <_fstat_r+0x1c>
   11ca2:	str	r3, [r4, #0]
   11ca4:	pop	{r3, r4, r5, pc}
   11ca6:	nop
   11ca8:	.word	0x20014ba4

00011cac <_isatty_r>:
   11cac:	push	{r3, r4, r5, lr}
   11cae:	ldr	r5, [pc, #24]	; (11cc8 <_isatty_r+0x1c>)
   11cb0:	movs	r3, #0
   11cb2:	mov	r4, r0
   11cb4:	mov	r0, r1
   11cb6:	str	r3, [r5, #0]
   11cb8:	bl	b988 <_isatty>
   11cbc:	adds	r3, r0, #1
   11cbe:	bne.n	11cc6 <_isatty_r+0x1a>
   11cc0:	ldr	r3, [r5, #0]
   11cc2:	cbz	r3, 11cc6 <_isatty_r+0x1a>
   11cc4:	str	r3, [r4, #0]
   11cc6:	pop	{r3, r4, r5, pc}
   11cc8:	.word	0x20014ba4

00011ccc <__aeabi_drsub>:
   11ccc:	eor.w	r1, r1, #2147483648	; 0x80000000
   11cd0:	b.n	11cd8 <__adddf3>
   11cd2:	nop

00011cd4 <__aeabi_dsub>:
   11cd4:	eor.w	r3, r3, #2147483648	; 0x80000000

00011cd8 <__adddf3>:
   11cd8:	push	{r4, r5, lr}
   11cda:	mov.w	r4, r1, lsl #1
   11cde:	mov.w	r5, r3, lsl #1
   11ce2:	teq	r4, r5
   11ce6:	it	eq
   11ce8:	teqeq	r0, r2
   11cec:	itttt	ne
   11cee:	orrsne.w	ip, r4, r0
   11cf2:	orrsne.w	ip, r5, r2
   11cf6:	mvnsne.w	ip, r4, asr #21
   11cfa:	mvnsne.w	ip, r5, asr #21
   11cfe:	beq.w	11ec6 <__adddf3+0x1ee>
   11d02:	mov.w	r4, r4, lsr #21
   11d06:	rsbs	r5, r4, r5, lsr #21
   11d0a:	it	lt
   11d0c:	neglt	r5, r5
   11d0e:	ble.n	11d2a <__adddf3+0x52>
   11d10:	add	r4, r5
   11d12:	eor.w	r2, r0, r2
   11d16:	eor.w	r3, r1, r3
   11d1a:	eor.w	r0, r2, r0
   11d1e:	eor.w	r1, r3, r1
   11d22:	eor.w	r2, r0, r2
   11d26:	eor.w	r3, r1, r3
   11d2a:	cmp	r5, #54	; 0x36
   11d2c:	it	hi
   11d2e:	pophi	{r4, r5, pc}
   11d30:	tst.w	r1, #2147483648	; 0x80000000
   11d34:	mov.w	r1, r1, lsl #12
   11d38:	mov.w	ip, #1048576	; 0x100000
   11d3c:	orr.w	r1, ip, r1, lsr #12
   11d40:	beq.n	11d48 <__adddf3+0x70>
   11d42:	negs	r0, r0
   11d44:	sbc.w	r1, r1, r1, lsl #1
   11d48:	tst.w	r3, #2147483648	; 0x80000000
   11d4c:	mov.w	r3, r3, lsl #12
   11d50:	orr.w	r3, ip, r3, lsr #12
   11d54:	beq.n	11d5c <__adddf3+0x84>
   11d56:	negs	r2, r2
   11d58:	sbc.w	r3, r3, r3, lsl #1
   11d5c:	teq	r4, r5
   11d60:	beq.w	11eb2 <__adddf3+0x1da>
   11d64:	sub.w	r4, r4, #1
   11d68:	rsbs	lr, r5, #32
   11d6c:	blt.n	11d8a <__adddf3+0xb2>
   11d6e:	lsl.w	ip, r2, lr
   11d72:	lsr.w	r2, r2, r5
   11d76:	adds	r0, r0, r2
   11d78:	adc.w	r1, r1, #0
   11d7c:	lsl.w	r2, r3, lr
   11d80:	adds	r0, r0, r2
   11d82:	asr.w	r3, r3, r5
   11d86:	adcs	r1, r3
   11d88:	b.n	11da8 <__adddf3+0xd0>
   11d8a:	sub.w	r5, r5, #32
   11d8e:	add.w	lr, lr, #32
   11d92:	cmp	r2, #1
   11d94:	lsl.w	ip, r3, lr
   11d98:	it	cs
   11d9a:	orrcs.w	ip, ip, #2
   11d9e:	asr.w	r3, r3, r5
   11da2:	adds	r0, r0, r3
   11da4:	adcs.w	r1, r1, r3, asr #31
   11da8:	and.w	r5, r1, #2147483648	; 0x80000000
   11dac:	bpl.n	11dbe <__adddf3+0xe6>
   11dae:	mov.w	lr, #0
   11db2:	rsbs	ip, ip, #0
   11db6:	sbcs.w	r0, lr, r0
   11dba:	sbc.w	r1, lr, r1
   11dbe:	cmp.w	r1, #1048576	; 0x100000
   11dc2:	bcc.n	11dfc <__adddf3+0x124>
   11dc4:	cmp.w	r1, #2097152	; 0x200000
   11dc8:	bcc.n	11de4 <__adddf3+0x10c>
   11dca:	lsrs	r1, r1, #1
   11dcc:	movs.w	r0, r0, rrx
   11dd0:	mov.w	ip, ip, rrx
   11dd4:	add.w	r4, r4, #1
   11dd8:	mov.w	r2, r4, lsl #21
   11ddc:	cmn.w	r2, #4194304	; 0x400000
   11de0:	bcs.w	11f18 <__adddf3+0x240>
   11de4:	cmp.w	ip, #2147483648	; 0x80000000
   11de8:	it	eq
   11dea:	movseq.w	ip, r0, lsr #1
   11dee:	adcs.w	r0, r0, #0
   11df2:	adc.w	r1, r1, r4, lsl #20
   11df6:	orr.w	r1, r1, r5
   11dfa:	pop	{r4, r5, pc}
   11dfc:	movs.w	ip, ip, lsl #1
   11e00:	adcs	r0, r0
   11e02:	adc.w	r1, r1, r1
   11e06:	subs	r4, #1
   11e08:	it	cs
   11e0a:	cmpcs.w	r1, #1048576	; 0x100000
   11e0e:	bcs.n	11de4 <__adddf3+0x10c>
   11e10:	teq	r1, #0
   11e14:	itt	eq
   11e16:	moveq	r1, r0
   11e18:	moveq	r0, #0
   11e1a:	clz	r3, r1
   11e1e:	it	eq
   11e20:	addeq	r3, #32
   11e22:	sub.w	r3, r3, #11
   11e26:	subs.w	r2, r3, #32
   11e2a:	bge.n	11e46 <__adddf3+0x16e>
   11e2c:	adds	r2, #12
   11e2e:	ble.n	11e42 <__adddf3+0x16a>
   11e30:	add.w	ip, r2, #20
   11e34:	rsb	r2, r2, #12
   11e38:	lsl.w	r0, r1, ip
   11e3c:	lsr.w	r1, r1, r2
   11e40:	b.n	11e5c <__adddf3+0x184>
   11e42:	add.w	r2, r2, #20
   11e46:	it	le
   11e48:	rsble	ip, r2, #32
   11e4c:	lsl.w	r1, r1, r2
   11e50:	lsr.w	ip, r0, ip
   11e54:	itt	le
   11e56:	orrle.w	r1, r1, ip
   11e5a:	lslle	r0, r2
   11e5c:	subs	r4, r4, r3
   11e5e:	ittt	ge
   11e60:	addge.w	r1, r1, r4, lsl #20
   11e64:	orrge	r1, r5
   11e66:	popge	{r4, r5, pc}
   11e68:	mvn.w	r4, r4
   11e6c:	subs	r4, #31
   11e6e:	bge.n	11eaa <__adddf3+0x1d2>
   11e70:	adds	r4, #12
   11e72:	bgt.n	11e92 <__adddf3+0x1ba>
   11e74:	add.w	r4, r4, #20
   11e78:	rsb	r2, r4, #32
   11e7c:	lsr.w	r0, r0, r4
   11e80:	lsl.w	r3, r1, r2
   11e84:	orr.w	r0, r0, r3
   11e88:	lsr.w	r3, r1, r4
   11e8c:	orr.w	r1, r5, r3
   11e90:	pop	{r4, r5, pc}
   11e92:	rsb	r4, r4, #12
   11e96:	rsb	r2, r4, #32
   11e9a:	lsr.w	r0, r0, r2
   11e9e:	lsl.w	r3, r1, r4
   11ea2:	orr.w	r0, r0, r3
   11ea6:	mov	r1, r5
   11ea8:	pop	{r4, r5, pc}
   11eaa:	lsr.w	r0, r1, r4
   11eae:	mov	r1, r5
   11eb0:	pop	{r4, r5, pc}
   11eb2:	teq	r4, #0
   11eb6:	eor.w	r3, r3, #1048576	; 0x100000
   11eba:	itte	eq
   11ebc:	eoreq.w	r1, r1, #1048576	; 0x100000
   11ec0:	addeq	r4, #1
   11ec2:	subne	r5, #1
   11ec4:	b.n	11d64 <__adddf3+0x8c>
   11ec6:	mvns.w	ip, r4, asr #21
   11eca:	it	ne
   11ecc:	mvnsne.w	ip, r5, asr #21
   11ed0:	beq.n	11f26 <__adddf3+0x24e>
   11ed2:	teq	r4, r5
   11ed6:	it	eq
   11ed8:	teqeq	r0, r2
   11edc:	beq.n	11eea <__adddf3+0x212>
   11ede:	orrs.w	ip, r4, r0
   11ee2:	itt	eq
   11ee4:	moveq	r1, r3
   11ee6:	moveq	r0, r2
   11ee8:	pop	{r4, r5, pc}
   11eea:	teq	r1, r3
   11eee:	ittt	ne
   11ef0:	movne	r1, #0
   11ef2:	movne	r0, #0
   11ef4:	popne	{r4, r5, pc}
   11ef6:	movs.w	ip, r4, lsr #21
   11efa:	bne.n	11f08 <__adddf3+0x230>
   11efc:	lsls	r0, r0, #1
   11efe:	adcs	r1, r1
   11f00:	it	cs
   11f02:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   11f06:	pop	{r4, r5, pc}
   11f08:	adds.w	r4, r4, #4194304	; 0x400000
   11f0c:	itt	cc
   11f0e:	addcc.w	r1, r1, #1048576	; 0x100000
   11f12:	popcc	{r4, r5, pc}
   11f14:	and.w	r5, r1, #2147483648	; 0x80000000
   11f18:	orr.w	r1, r5, #2130706432	; 0x7f000000
   11f1c:	orr.w	r1, r1, #15728640	; 0xf00000
   11f20:	mov.w	r0, #0
   11f24:	pop	{r4, r5, pc}
   11f26:	mvns.w	ip, r4, asr #21
   11f2a:	itte	ne
   11f2c:	movne	r1, r3
   11f2e:	movne	r0, r2
   11f30:	mvnseq.w	ip, r5, asr #21
   11f34:	itt	ne
   11f36:	movne	r3, r1
   11f38:	movne	r2, r0
   11f3a:	orrs.w	r4, r0, r1, lsl #12
   11f3e:	itte	eq
   11f40:	orrseq.w	r5, r2, r3, lsl #12
   11f44:	teqeq	r1, r3
   11f48:	orrne.w	r1, r1, #524288	; 0x80000
   11f4c:	pop	{r4, r5, pc}
   11f4e:	nop

00011f50 <__aeabi_ui2d>:
   11f50:	teq	r0, #0
   11f54:	itt	eq
   11f56:	moveq	r1, #0
   11f58:	bxeq	lr
   11f5a:	push	{r4, r5, lr}
   11f5c:	mov.w	r4, #1024	; 0x400
   11f60:	add.w	r4, r4, #50	; 0x32
   11f64:	mov.w	r5, #0
   11f68:	mov.w	r1, #0
   11f6c:	b.n	11e10 <__adddf3+0x138>
   11f6e:	nop

00011f70 <__aeabi_i2d>:
   11f70:	teq	r0, #0
   11f74:	itt	eq
   11f76:	moveq	r1, #0
   11f78:	bxeq	lr
   11f7a:	push	{r4, r5, lr}
   11f7c:	mov.w	r4, #1024	; 0x400
   11f80:	add.w	r4, r4, #50	; 0x32
   11f84:	ands.w	r5, r0, #2147483648	; 0x80000000
   11f88:	it	mi
   11f8a:	negmi	r0, r0
   11f8c:	mov.w	r1, #0
   11f90:	b.n	11e10 <__adddf3+0x138>
   11f92:	nop

00011f94 <__aeabi_f2d>:
   11f94:	lsls	r2, r0, #1
   11f96:	mov.w	r1, r2, asr #3
   11f9a:	mov.w	r1, r1, rrx
   11f9e:	mov.w	r0, r2, lsl #28
   11fa2:	itttt	ne
   11fa4:	andsne.w	r3, r2, #4278190080	; 0xff000000
   11fa8:	teqne	r3, #4278190080	; 0xff000000
   11fac:	eorne.w	r1, r1, #939524096	; 0x38000000
   11fb0:	bxne	lr
   11fb2:	bics.w	r2, r2, #4278190080	; 0xff000000
   11fb6:	it	eq
   11fb8:	bxeq	lr
   11fba:	teq	r3, #4278190080	; 0xff000000
   11fbe:	itt	eq
   11fc0:	orreq.w	r1, r1, #524288	; 0x80000
   11fc4:	bxeq	lr
   11fc6:	push	{r4, r5, lr}
   11fc8:	mov.w	r4, #896	; 0x380
   11fcc:	and.w	r5, r1, #2147483648	; 0x80000000
   11fd0:	bic.w	r1, r1, #2147483648	; 0x80000000
   11fd4:	b.n	11e10 <__adddf3+0x138>
   11fd6:	nop

00011fd8 <__aeabi_ul2d>:
   11fd8:	orrs.w	r2, r0, r1
   11fdc:	it	eq
   11fde:	bxeq	lr
   11fe0:	push	{r4, r5, lr}
   11fe2:	mov.w	r5, #0
   11fe6:	b.n	11ffe <__aeabi_l2d+0x16>

00011fe8 <__aeabi_l2d>:
   11fe8:	orrs.w	r2, r0, r1
   11fec:	it	eq
   11fee:	bxeq	lr
   11ff0:	push	{r4, r5, lr}
   11ff2:	ands.w	r5, r1, #2147483648	; 0x80000000
   11ff6:	bpl.n	11ffe <__aeabi_l2d+0x16>
   11ff8:	negs	r0, r0
   11ffa:	sbc.w	r1, r1, r1, lsl #1
   11ffe:	mov.w	r4, #1024	; 0x400
   12002:	add.w	r4, r4, #50	; 0x32
   12006:	movs.w	ip, r1, lsr #22
   1200a:	beq.w	11dbe <__adddf3+0xe6>
   1200e:	mov.w	r2, #3
   12012:	movs.w	ip, ip, lsr #3
   12016:	it	ne
   12018:	addne	r2, #3
   1201a:	movs.w	ip, ip, lsr #3
   1201e:	it	ne
   12020:	addne	r2, #3
   12022:	add.w	r2, r2, ip, lsr #3
   12026:	rsb	r3, r2, #32
   1202a:	lsl.w	ip, r0, r3
   1202e:	lsr.w	r0, r0, r2
   12032:	lsl.w	lr, r1, r3
   12036:	orr.w	r0, r0, lr
   1203a:	lsr.w	r1, r1, r2
   1203e:	add	r4, r2
   12040:	b.n	11dbe <__adddf3+0xe6>
   12042:	nop

00012044 <__aeabi_d2lz>:
   12044:	push	{r3, lr}
   12046:	mov	r2, r0
   12048:	mov	r3, r1
   1204a:	vmov	d7, r2, r3
   1204e:	vcmpe.f64	d7, #0.0
   12052:	vmrs	APSR_nzcv, fpscr
   12056:	bmi.n	12060 <__aeabi_d2lz+0x1c>
   12058:	ldmia.w	sp!, {r3, lr}
   1205c:	b.w	12078 <__aeabi_d2ulz>
   12060:	vneg.f64	d7, d7
   12064:	vmov	r0, r1, d7
   12068:	bl	12078 <__aeabi_d2ulz>
   1206c:	negs	r0, r0
   1206e:	sbc.w	r1, r1, r1, lsl #1
   12072:	pop	{r3, pc}
   12074:	movs	r0, r0
	...

00012078 <__aeabi_d2ulz>:
   12078:	vldr	d6, [pc, #44]	; 120a8 <__aeabi_d2ulz+0x30>
   1207c:	vmov	d7, r0, r1
   12080:	vldr	d5, [pc, #44]	; 120b0 <__aeabi_d2ulz+0x38>
   12084:	vmul.f64	d6, d7, d6
   12088:	vcvt.u32.f64	s12, d6
   1208c:	vcvt.f64.u32	d4, s12
   12090:	vfms.f64	d7, d4, d5
   12094:	vcvt.u32.f64	s15, d7
   12098:	vmov	r1, s12
   1209c:	vmov	r0, s15
   120a0:	bx	lr
   120a2:	nop
   120a4:	nop.w
   120a8:	.word	0x00000000
   120ac:	.word	0x3df00000
   120b0:	.word	0x00000000
   120b4:	.word	0x41f00000

000120b8 <___init_veneer>:
   120b8:	ldr.w	pc, [pc]	; 120bc <___init_veneer+0x4>
   120bc:	.word	0x6000241d

000120c0 <___Z14set_audioClockilm_veneer>:
   120c0:	ldr.w	pc, [pc]	; 120c4 <___Z14set_audioClockilm_veneer+0x4>
   120c4:	.word	0x600024d1

000120c8 <___ZN7TwoWire5beginEv_veneer>:
   120c8:	ldr.w	pc, [pc]	; 120cc <___ZN7TwoWire5beginEv_veneer+0x4>
   120cc:	.word	0x6000176d

000120d0 <___ZNK16CrashReportClass7printToER5Print_veneer>:
   120d0:	ldr.w	pc, [pc]	; 120d4 <___ZNK16CrashReportClass7printToER5Print_veneer+0x4>
   120d4:	.word	0x60001f1d

000120d8 <___ZN16CrashReportClasscvbEv_veneer>:
   120d8:	ldr.w	pc, [pc]	; 120dc <___ZN16CrashReportClasscvbEv_veneer+0x4>
   120dc:	.word	0x600023c1

000120e0 <___reboot_Teensyduino__veneer>:
   120e0:	ldr.w	pc, [pc]	; 120e4 <___reboot_Teensyduino__veneer+0x4>
   120e4:	.word	0x60001899

000120e8 <__usb_init_veneer>:
   120e8:	ldr.w	pc, [pc]	; 120ec <__usb_init_veneer+0x4>
   120ec:	.word	0x600017b5

Disassembly of section .fini:

000120f0 <_fini>:
   120f0:	push	{r3, r4, r5, r6, r7, lr}
   120f2:	nop
